Seaboard_AI_Modernization_POC/
├── blueprint/
│   ├── Seaboard_Modernization_AI_Blueprint_Full.docx
│   ├── Section 1-9.pdf
│   └── target_repo_structure.txt
│
├── inputs/
│   ├── PBGREFR_RPG.txt
│   ├── PBGREFR_DDS.txt
│   ├── PBGREFR_AD.txt
│   ├── repository_call_analysis_20251009_131458.csv
│   └── repository_dds_dependencies_20251009_131458.csv
│
├── configs/
│   ├── .prettierrc
│   ├── tsconfig.json
│
├── metadata/
│   └── instruction-set-v1.json
│
├── src/
│   ├── _shared/local/
│   ├── commands/
│   ├── controllers/
│   ├── interfaces/
│   ├── models/
│   ├── repository/
│   ├── routes/
│   ├── services/
│   └── ui/
│
├── scripts/
│   ├── validate-structure.js
│   └── generate-report.js
│
├── README.md
├── azure-pipelines.yml
├── eslint.config.js
└── package.json

Directory Structure Description:
=============================

blueprint/
- Contains all project documentation and blueprints
- Includes the main modernization blueprint document
- Contains section documentation and target structure definition

inputs/
- Contains all legacy source files and analysis data
- RPG, DDS, and AD files from the legacy IBM i system
- CSV files with call analysis and dependency information

configs/
- Contains configuration files for development tools
- Prettier configuration for code formatting
- TypeScript configuration

metadata/
- Contains project metadata and instruction sets
- JSON files with processing instructions and parameters

src/
- Main source code directory organized by function
- _shared/local/ - Shared utilities and local configurations
- commands/ - Command-line interface implementations
- controllers/ - Business logic controllers
- interfaces/ - TypeScript interface definitions
- models/ - Data models and schemas
- repository/ - Data access layer and repository patterns
- routes/ - API route definitions
- services/ - Business service layer implementations
- ui/ - User interface components

scripts/
- Utility scripts for project management
- Structure validation script
- Report generation script

Root Files:
- README.md - Project documentation
- azure-pipelines.yml - CI/CD pipeline configuration  
- eslint.config.js - ESLint configuration for code quality
- package.json - Node.js dependencies and scripts

This structure supports the IBM i to modern cloud migration project by:
1. Separating concerns into logical directories
2. Providing clear organization for legacy and modern code
3. Supporting TypeScript development with proper configuration
4. Including automation scripts for validation and reporting
5. Maintaining blueprint documentation alongside implementation