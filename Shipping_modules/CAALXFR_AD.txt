// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for CAALXFR
// ?Date: 14.08.2025 Time: 03:26:37
// ?------------------------------------------------------------------------------------------------

//?Execute user function

// PAR.USR Reason Code = PAR.Reason Code
PAR.USR_Reason_Code = PAR.Reason_Code;

EXECUTE FUNCTION(RTV Dsc,U/M,PrcInf,Str RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1418320;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(WRK.Description_Line_One);
PARAMETER(WRK.Description_Line_Two);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(PAR.UOM_Pricing);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Production_Date_Control);
PARAMETER(PAR.Catch_Weight_Status);
PARAMETER(PAR.Item_Structure_Class_Code);
PARAMETER(PAR.Item_Structure_Group_Code);
PARAMETER(PAR.Item_Structure_Type_Code);
PARAMETER(PAR.Default_Commod_Mark_basis);
PARAMETER(PAR.Price_Method_Default);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Status/Default     RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC1152524;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Unit_Cost_Per_Pound);
PARAMETER(WRK.Cost_Update_Pending);
PARAMETER(WRK.Post_GL_Status);
PARAMETER(WRK.Vendor_Item_Whse_Default);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If item balance not found then create it
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?If item balance not found then create it
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Item Typ/Grp/Cls  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1298334;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(WRK.Item_Structure_Class_Code);
PARAMETER(WRK.Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.Pricing Date Used = PAR.Transaction Date Code
WRK.Pricing_Date_Used = PAR.Transaction_Date_Code;

// Call program CLC Rtv Unit Cost/LB   XF.
CALL PROGRAM(CLC Rtv Unit Cost/LB   XF) ('PDLSXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Unit_Cost_Per_Pound);
PARAMETER(WRK.Cost_per_Primary_UOM);
PARAMETER(WRK.Pricing_Date_Used);
PARAMETER(WRK.Price_Status);
PARAMETER(PAR.Transaction_Date_Code);

//?Error transaction if no unit cost
CASE;

// IF PAR.Unit Cost Per Pound EQ WRK.ZERO
IF PAR.Unit_Cost_Per_Pound = WRK.ZERO;

// PAR.USR Reason Code = CND.Error
PAR.USR_Reason_Code = 'ERR';

ENDIF;

EXECUTE FUNCTION(Crt Item Balance       CR) TYPE(CRTOBJ) FILE(CAB0REP)          AC1119976;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Unit_Cost_Per_Pound);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('N');
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('N');
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('N');
PARAMETER('N');
PARAMETER('N');
PARAMETER(*ZERO);
PARAMETER(WRK.Item_Structure_Class_Code);
PARAMETER(WRK.Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER('A');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

//?Create transaction in IC Transaction Detail file
EXECUTE FUNCTION(Rtv Next Sequence No.  RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1304410;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Inventory_Trans_ID);
PARAMETER(PAR.Inventory_Trans_Type);
PARAMETER(PAR.Transaction_Date_Code);
PARAMETER(PAR.ITD_Sequence_Number);
{
 //?USER: Processing if Data record not found

 // PAR.ITD Sequence Number = CON.1
 PAR.ITD_Sequence_Number = 1;

 //?USER: Process Data record

 // PAR.ITD Sequence Number = DB1.ITD Sequence Number + CON.1
 PAR.ITD_Sequence_Number = DB1.ITD_Sequence_Number + 1;

 QUIT;

}


// PAR.Extended Amount = PAR.Transaction Weight * PAR.Unit Cost Per Pound *Rounded
PAR.Extended_Amount = PAR.Transaction_Weight * PAR.Unit_Cost_Per_Pound 'H';

EXECUTE FUNCTION(Crt IC Trans. Detail   CR) TYPE(CRTOBJ) FILE(CAB7CPP)          AC1122298;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Inventory_Trans_ID);
PARAMETER(PAR.Inventory_Trans_Type);
PARAMETER(PAR.Transaction_Date_Code);
PARAMETER(PAR.ITD_Sequence_Number);
PARAMETER(*ZERO);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.UOM_Primary);
PARAMETER('PL');
PARAMETER(PAR.Description);
PARAMETER(PAR.Transaction_Quantity);
PARAMETER(PAR.Transaction_Weight);
PARAMETER(*ZERO);
PARAMETER('LB');
PARAMETER(PAR.Extended_Amount);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER('N');
PARAMETER(PAR.USR_Reason_Code);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Item_Structure_Class_Code);
PARAMETER(PAR.Item_Structure_Group_Code);
PARAMETER(PAR.Item_Structure_Type_Code);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(PAR.Shift_Number);
PARAMETER(PAR.Label_Date);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER('A');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?USER: Processing after Data update

 // Call program Crt Export Rate Dtl   XF.
 CALL PROGRAM(Crt Export Rate Dtl   XF) ('POO5XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Inventory_Trans_ID);
 PARAMETER(DB1.Inventory_Trans_Type);
 PARAMETER(DB1.Transaction_Date_Code);
 PARAMETER(DB1.Sequence_Number);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.UOM_Transaction);
 PARAMETER(DB1.Item_Transaction_Source);
 PARAMETER(DB1.Description);
 PARAMETER(DB1.Transaction_Quantity);
 PARAMETER(DB1.Transaction_Weight);
 PARAMETER(DB1.USR_Transaction_Unit_Cost);
 PARAMETER(DB1.UOM_Cost);
 PARAMETER(DB1.Extended_Amount);
 PARAMETER(DB1.Ticket_Number);
 PARAMETER(DB1.GL_Document_Number);
 PARAMETER(DB1.GL_Update_Status);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Reference_Number_Code);
 PARAMETER(DB1.Lot_ID);
 PARAMETER(DB1.Transfer_Batch_Number);
 PARAMETER(DB1.Transfer_Batch_Sequence);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Item_Structure_Class_Code);
 PARAMETER(DB1.Item_Structure_Group_Code);
 PARAMETER(DB1.Item_Structure_Type_Code);
 PARAMETER(DB1.Employee_Badge_Number);
 PARAMETER(DB1.Production_Time);
 PARAMETER(DB1.Shift_Number);
 PARAMETER(DB1.Label_Date);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.Job_Date);

}


EXECUTE FUNCTION(Prc Create Dtl Receipt RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1139933;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Inventory_Trans_ID);
PARAMETER(PAR.Inventory_Trans_Type);
PARAMETER(PAR.Transaction_Date_Code);
PARAMETER(PAR.ITD_Sequence_Number);
PARAMETER(PAR.Sequence_Number);
PARAMETER(PAR.Shift_Number);
PARAMETER(PAR.Label_Date);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Base Values        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1125011;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.Description_Line_One);
 PARAMETER(WRK.Description_Line_Two);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Conversion_Factor_1);
 PARAMETER(PAR.Operation_Factor_1);
 PARAMETER(PAR.UOM_Second);
 PARAMETER(PAR.Conversion_Factor_2);
 PARAMETER(PAR.Operation_Factor_2);
 PARAMETER(PAR.UOM_Third);
 PARAMETER(WRK.UOM_Pricing);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Production_Date_Control);
 PARAMETER(PAR.Catch_Weight_Status);
 PARAMETER(WRK.Fresh_Chilling_Time);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Quantity/Dollars   RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC1163281;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Unit_Cost_Per_Pound);
 PARAMETER(PAR.Quantity_on_Hand_Weight);
 PARAMETER(PAR.Quantity_on_Hand_UOM1);
 PARAMETER(PAR.Quantity_on_Hand_UOM2);
 PARAMETER(PAR.Quantity_on_Hand_UOM3);
 PARAMETER(WRK.Value_of_On_Hand_Inventor);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(UPD Value/Qty/Wgt      CH) TYPE(CHGOBJ) FILE(CAB0REP)          AC1413030;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Inventory_Trans_ID);
 PARAMETER(DB1.Inventory_Trans_Type);
 PARAMETER(DB1.Transaction_Date_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.UOM_Transaction);
 PARAMETER(DB1.Transaction_Quantity);
 PARAMETER(DB1.Transaction_Weight);
 PARAMETER(PAR.Unit_Cost_Per_Pound);
 PARAMETER(DB1.UOM_Cost);
 PARAMETER(DB1.Extended_Amount);
 PARAMETER(PAR.Shift_Number);
 PARAMETER(DB1.Label_Date);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Conversion_Factor_1);
 PARAMETER(PAR.Operation_Factor_1);
 PARAMETER(PAR.UOM_Second);
 PARAMETER(PAR.Conversion_Factor_2);
 PARAMETER(PAR.Operation_Factor_2);
 PARAMETER(PAR.UOM_Third);
 PARAMETER(PAR.Production_Date_Control);
 PARAMETER(PAR.Catch_Weight_Status);
 PARAMETER(PAR.Quantity_on_Hand_Weight);
 PARAMETER(PAR.Quantity_on_Hand_UOM1);
 PARAMETER(PAR.Quantity_on_Hand_UOM2);
 PARAMETER(PAR.Quantity_on_Hand_UOM3);
 {
  //?USER: Processing before Data read

  EXECUTE FUNCTION(Clc Convert Cost       IF) TYPE(EXCINTFUN)                     AC1122884;
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Conversion_Factor_1);
  PARAMETER(PAR.Operation_Factor_1);
  PARAMETER(PAR.UOM_Second);
  PARAMETER(PAR.Conversion_Factor_2);
  PARAMETER(PAR.Operation_Factor_2);
  PARAMETER(PAR.UOM_Third);
  PARAMETER(PAR.USR_Transaction_Unit_Cost);
  PARAMETER(PAR.UOM_Cost);
  PARAMETER(PAR.Cost_based_on_U_M1_S);
  PARAMETER(PAR.Cost_based_on_U_M2_S);
  PARAMETER(PAR.Cost_based_on_U_M3_S);
  {
   //?Execute internal function

   //?Initialize parameter values
   // PAR.Cost based on U/M1 = CON.*ZERO
   PAR.Cost_based_on_U_M1 = *ZERO;

   // PAR.Cost based on U/M2 = CON.*ZERO
   PAR.Cost_based_on_U_M2 = *ZERO;

   // PAR.Cost based on U/M3 = CON.*ZERO
   PAR.Cost_based_on_U_M3 = *ZERO;

   //?Process based on Unit of Measure entered
   CASE;

   // IF PAR.U/M - Primary EQ PAR.U/M - Cost
   IF PAR.UOM_Primary = PAR.UOM_Cost;

   // PAR.Cost based on U/M1 = PAR.USR Transaction-Unit Cost
   PAR.Cost_based_on_U_M1 = PAR.USR_Transaction_Unit_Cost;

   //?Process second U/M if entered
   CASE;

   // IF PAR.U/M - Second is Entered
   IF PAR.UOM_Second <> *BLANK;

   //?Convert based on operation code
   CASE;

   // IF PAR.Operation Factor 1 is Multiply
   IF PAR.Operation_Factor_1 = 'M';

   CASE;

   // IF PAR.Conversion Factor 1 is Entered
   IF PAR.Conversion_Factor_1 <> *ZERO;

   // PAR.Cost based on U/M2 S = PAR.USR Transaction-Unit Cost / PAR.Conversion Factor
   PAR.Cost_based_on_U_M2_S = PAR.USR_Transaction_Unit_Cost / PAR.Conversion_Factor_1 'H';

   ENDIF;

   //?Convert based on operation code
   // IF PAR.Operation Factor 1 is Divide
   IF PAR.Operation_Factor_1 = 'D';

   // PAR.Cost based on U/M2 S = PAR.USR Transaction-Unit Cost * PAR.Conversion Factor
   PAR.Cost_based_on_U_M2_S = PAR.USR_Transaction_Unit_Cost * PAR.Conversion_Factor_1 'H';

   ENDIF;

   // PAR.Cost based on U/M2 = PAR.Cost based on U/M2 S
   PAR.Cost_based_on_U_M2 = PAR.Cost_based_on_U_M2_S;

   ENDIF;

   //?Process third U/M if entered
   CASE;

   // IF PAR.U/M - Third is Entered
   IF PAR.UOM_Third <> *BLANK;

   CASE;

   // IF PAR.Operation Factor 2 is Multiply
   IF PAR.Operation_Factor_2 = 'M';

   CASE;

   // IF PAR.Conversion Factor 2 is Entered
   IF PAR.Conversion_Factor_2 <> *ZERO;

   // PAR.Cost based on U/M3 = PAR.Cost based on U/M2 S / PAR.Conversion Factor 2 *Rou
   PAR.Cost_based_on_U_M3 = PAR.Cost_based_on_U_M2_S / PAR.Conversion_Factor_2 'H';

   ENDIF;

   // IF PAR.Operation Factor 2 is Divide
   IF PAR.Operation_Factor_2 = 'D';

   // PAR.Cost based on U/M3 = PAR.Cost based on U/M2 S * PAR.Conversion Factor 2 *Rou
   PAR.Cost_based_on_U_M3 = PAR.Cost_based_on_U_M2_S * PAR.Conversion_Factor_2 'H';

   ENDIF;

   ENDIF;

   //?Process based on Unit of Measure entered
   // IF PAR.U/M - Second EQ PAR.U/M - Cost
   IF PAR.UOM_Second = PAR.UOM_Cost;

   // PAR.Cost based on U/M2 = PAR.USR Transaction-Unit Cost
   PAR.Cost_based_on_U_M2 = PAR.USR_Transaction_Unit_Cost;

   //?Convert based on operation factor
   CASE;

   // IF PAR.Operation Factor 1 is Multiply
   IF PAR.Operation_Factor_1 = 'M';

   // PAR.Cost based on U/M1 = PAR.USR Transaction-Unit Cost * PAR.Conversion Factor 1
   PAR.Cost_based_on_U_M1 = PAR.USR_Transaction_Unit_Cost * PAR.Conversion_Factor_1 'H';

   //?Convert based on operation factor
   // IF PAR.Operation Factor 1 is Divide
   IF PAR.Operation_Factor_1 = 'D';

   CASE;

   // IF PAR.Conversion Factor 1 is Entered
   IF PAR.Conversion_Factor_1 <> *ZERO;

   // PAR.Cost based on U/M1 = PAR.USR Transaction-Unit Cost / PAR.Conversion Factor 1
   PAR.Cost_based_on_U_M1 = PAR.USR_Transaction_Unit_Cost / PAR.Conversion_Factor_1 'H';

   ENDIF;

   ENDIF;

   //?Process third U/M if entered
   CASE;

   // IF PAR.U/M - Third is Entered
   IF PAR.UOM_Third <> *BLANK;

   CASE;

   // IF PAR.Operation Factor 2 is Multiply
   IF PAR.Operation_Factor_2 = 'M';

   CASE;

   // IF PAR.Conversion Factor 2 is Entered
   IF PAR.Conversion_Factor_2 <> *ZERO;

   // PAR.Cost based on U/M3 = PAR.USR Transaction-Unit Cost / PAR.Conversion Factor 2
   PAR.Cost_based_on_U_M3 = PAR.USR_Transaction_Unit_Cost / PAR.Conversion_Factor_2 'H';

   ENDIF;

   // IF PAR.Operation Factor 2 is Divide
   IF PAR.Operation_Factor_2 = 'D';

   // PAR.Cost based on U/M3 = PAR.USR Transaction-Unit Cost * PAR.Conversion Factor 2
   PAR.Cost_based_on_U_M3 = PAR.USR_Transaction_Unit_Cost * PAR.Conversion_Factor_2 'H';

   ENDIF;

   ENDIF;

   //?Process based on Unit of Measure entered
   // IF PAR.U/M - Third EQ PAR.U/M - Cost
   IF PAR.UOM_Third = PAR.UOM_Cost;

   // PAR.Cost based on U/M3 = PAR.USR Transaction-Unit Cost
   PAR.Cost_based_on_U_M3 = PAR.USR_Transaction_Unit_Cost;

   //?Convert based on operation factor
   CASE;

   // IF PAR.Operation Factor 2 is Multiply
   IF PAR.Operation_Factor_2 = 'M';

   // PAR.Cost based on U/M2 S = PAR.USR Transaction-Unit Cost * PAR.Conversion Factor
   PAR.Cost_based_on_U_M2_S = PAR.USR_Transaction_Unit_Cost * PAR.Conversion_Factor_2 'H';

   //?Convert based on operation factor
   // IF PAR.Operation Factor 2 is Divide
   IF PAR.Operation_Factor_2 = 'D';

   CASE;

   // IF PAR.Conversion Factor 2 is Entered
   IF PAR.Conversion_Factor_2 <> *ZERO;

   // PAR.Cost based on U/M2 S = PAR.USR Transaction-Unit Cost / PAR.Conversion Factor
   PAR.Cost_based_on_U_M2_S = PAR.USR_Transaction_Unit_Cost / PAR.Conversion_Factor_2 'H';

   ENDIF;

   ENDIF;

   // PAR.Cost based on U/M2 = PAR.Cost based on U/M2 S
   PAR.Cost_based_on_U_M2 = PAR.Cost_based_on_U_M2_S;

   //?Convert based on operation factor
   CASE;

   // IF PAR.Operation Factor 1 is Multiply
   IF PAR.Operation_Factor_1 = 'M';

   // PAR.Cost based on U/M1 = PAR.Cost based on U/M2 S * PAR.Conversion Factor 1 *Rou
   PAR.Cost_based_on_U_M1 = PAR.Cost_based_on_U_M2_S * PAR.Conversion_Factor_1 'H';

   //?Convert based on operation factor
   // IF PAR.Operation Factor 1 is Divide
   IF PAR.Operation_Factor_1 = 'D';

   CASE;

   // IF PAR.Conversion Factor 1 is Entered
   IF PAR.Conversion_Factor_1 <> *ZERO;

   // PAR.Cost based on U/M1 = PAR.Cost based on U/M2 S / PAR.Conversion Factor 1 *Rou
   PAR.Cost_based_on_U_M1 = PAR.Cost_based_on_U_M2_S / PAR.Conversion_Factor_1 'H';

   ENDIF;

   ENDIF;

   ENDIF;

  }

  EXECUTE FUNCTION(Clc Convert Quantity   IF) TYPE(EXCINTFUN)                     AC1123260;
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Conversion_Factor_1);
  PARAMETER(PAR.Operation_Factor_1);
  PARAMETER(PAR.UOM_Second);
  PARAMETER(PAR.Conversion_Factor_2);
  PARAMETER(PAR.Operation_Factor_2);
  PARAMETER(PAR.UOM_Third);
  PARAMETER(PAR.UOM_Transaction);
  PARAMETER(PAR.Transaction_Quantity);
  PARAMETER(PAR.Quantity_based_on_U_M1_S);
  PARAMETER(PAR.Quantity_based_on_U_M2_S);
  PARAMETER(PAR.Quantity_based_on_U_M3_S);
  {
   //?Execute internal function

   //?Clear output parameters
   // PAR.USR Qty based on U/M1 = CON.*ZERO
   PAR.USR_Qty_based_on_U_M1 = *ZERO;

   // PAR.USR Qty based on U/M2 = CON.*ZERO
   PAR.USR_Qty_based_on_U_M2 = *ZERO;

   // PAR.USR Qty based on U/M3 = CON.*ZERO
   PAR.USR_Qty_based_on_U_M3 = *ZERO;

   //?Process based on transaction U/M
   CASE;

   // IF PAR.U/M - Primary EQ PAR.U/M - Transaction
   IF PAR.UOM_Primary = PAR.UOM_Transaction;

   // PAR.USR Qty based on U/M1 = PAR.Transaction Quantity
   PAR.USR_Qty_based_on_U_M1 = PAR.Transaction_Quantity;

   //?Process entered U/M2
   CASE;

   // IF PAR.U/M - Second is Entered
   IF PAR.UOM_Second <> *BLANK;

   //?Convert based on operation factor
   CASE;

   // IF PAR.Operation Factor 1 is Multiply
   IF PAR.Operation_Factor_1 = 'M';

   // PAR.Quantity based on U/M2 S = PAR.Transaction Quantity * PAR.Conversion Factor
   PAR.Quantity_based_on_U_M2_S = PAR.Transaction_Quantity * PAR.Conversion_Factor_1 'H';

   //?Convert based on operation factor
   // IF PAR.Operation Factor 1 is Divide
   IF PAR.Operation_Factor_1 = 'D';

   CASE;

   // IF PAR.Conversion Factor 1 is Entered
   IF PAR.Conversion_Factor_1 <> *ZERO;

   // PAR.Quantity based on U/M2 S = PAR.Transaction Quantity / PAR.Conversion Factor
   PAR.Quantity_based_on_U_M2_S = PAR.Transaction_Quantity / PAR.Conversion_Factor_1 'H';

   ENDIF;

   ENDIF;

   // PAR.Quantity based on U/M2 = PAR.Quantity based on U/M2 S
   PAR.USR_Qty_based_on_U_M2 = PAR.Quantity_based_on_U_M2_S;

   ENDIF;

   //?Process entered U/M3
   CASE;

   // IF PAR.U/M - Third is Entered
   IF PAR.UOM_Third <> *BLANK;

   //?Convert based on operation factor
   CASE;

   // IF PAR.Operation Factor 2 is Multiply
   IF PAR.Operation_Factor_2 = 'M';

   // PAR.Quantity based on U/M3 S = PAR.Quantity based on U/M2 S * PAR.Multiplier Two
   PAR.Quantity_based_on_U_M3_S = PAR.Quantity_based_on_U_M2_S * PAR.Conversion_Factor_2
   'H';

   //?Convert based on operation factor
   // IF PAR.Operation Factor 2 is Divide
   IF PAR.Operation_Factor_2 = 'D';

   CASE;

   // IF PAR.Conversion Factor 2 is Entered
   IF PAR.Conversion_Factor_2 <> *ZERO;

   // PAR.Quantity based on U/M3 S = PAR.Quantity based on U/M2 S / PAR.Conversion Fac
   PAR.Quantity_based_on_U_M3_S = PAR.Quantity_based_on_U_M2_S / PAR.Conversion_Factor_2
   'H';

   ENDIF;

   ENDIF;

   // PAR.Quantity based on U/M3 = PAR.Quantity based on U/M3 S
   PAR.USR_Qty_based_on_U_M3 = PAR.Quantity_based_on_U_M3_S;

   ENDIF;

   //?Process based on transaction U/M
   // IF PAR.U/M - Second EQ PAR.U/M - Transaction
   IF PAR.UOM_Second = PAR.UOM_Transaction;

   // PAR.Quantity based on U/M2 = PAR.Transaction Quantity
   PAR.USR_Qty_based_on_U_M2 = PAR.Transaction_Quantity;

   //?Convert based on operation factor
   CASE;

   // IF PAR.Operation Factor 1 is Multiply
   IF PAR.Operation_Factor_1 = 'M';

   CASE;

   // IF PAR.Conversion Factor 1 is Entered
   IF PAR.Conversion_Factor_1 <> *ZERO;

   // PAR.Quantity based on U/M1 = PAR.Transaction Quantity / PAR.Conversion Factor 1
   PAR.USR_Qty_based_on_U_M1 = PAR.Transaction_Quantity / PAR.Conversion_Factor_1 'H';

   ENDIF;

   //?Convert based on operation factor
   // IF PAR.Operation Factor 1 is Divide
   IF PAR.Operation_Factor_1 = 'D';

   // PAR.Quantity based on U/M1 = PAR.Transaction Quantity * PAR.Conversion Factor 1
   PAR.USR_Qty_based_on_U_M1 = PAR.Transaction_Quantity * PAR.Conversion_Factor_1 'H';

   ENDIF;

   //?Process entered U/M3
   CASE;

   // IF PAR.U/M - Third is Entered
   IF PAR.UOM_Third <> *BLANK;

   //?Convert based on operation factor
   CASE;

   // IF PAR.Operation Factor 2 is Multiply
   IF PAR.Operation_Factor_2 = 'M';

   // PAR.Quantity based on U/M3 S = PAR.Transaction Quantity * PAR.Conversion Factor
   PAR.Quantity_based_on_U_M3_S = PAR.Transaction_Quantity * PAR.Conversion_Factor_2 'H';

   //?Convert based on operation factor
   // IF PAR.Operation Factor 2 is Divide
   IF PAR.Operation_Factor_2 = 'D';

   CASE;

   // IF PAR.Conversion Factor 2 is Entered
   IF PAR.Conversion_Factor_2 <> *ZERO;

   // PAR.Quantity based on U/M3 S = PAR.Transaction Quantity / PAR.Conversion Factor
   PAR.Quantity_based_on_U_M3_S = PAR.Transaction_Quantity / PAR.Conversion_Factor_2 'H';

   ENDIF;

   ENDIF;

   // PAR.Quantity based on U/M3 = PAR.Quantity based on U/M3 S
   PAR.USR_Qty_based_on_U_M3 = PAR.Quantity_based_on_U_M3_S;

   ENDIF;

   //?Process based on transaction U/M
   // IF PAR.U/M - Third EQ PAR.U/M - Transaction
   IF PAR.UOM_Third = PAR.UOM_Transaction;

   // PAR.Quantity based on U/M3 = PAR.Transaction Quantity
   PAR.USR_Qty_based_on_U_M3 = PAR.Transaction_Quantity;

   //?Convert based on operation factor
   CASE;

   // IF PAR.Operation Factor 2 is Multiply
   IF PAR.Operation_Factor_2 = 'M';

   CASE;

   // IF PAR.Conversion Factor 2 is Entered
   IF PAR.Conversion_Factor_2 <> *ZERO;

   // PAR.Quantity based on U/M2 S = PAR.Transaction Quantity / PAR.Conversion Factor
   PAR.Quantity_based_on_U_M2_S = PAR.Transaction_Quantity / PAR.Conversion_Factor_2 'H';

   ENDIF;

   //?Convert based on operation factor
   // IF PAR.Operation Factor 2 is Divide
   IF PAR.Operation_Factor_2 = 'D';

   // PAR.Quantity based on U/M2 S = PAR.Transaction Quantity * PAR.Conversion Factor
   PAR.Quantity_based_on_U_M2_S = PAR.Transaction_Quantity * PAR.Conversion_Factor_2 'H';

   ENDIF;

   // PAR.Quantity based on U/M2 = PAR.Quantity based on U/M2 S
   PAR.USR_Qty_based_on_U_M2 = PAR.Quantity_based_on_U_M2_S;

   //?Convert based on operation factor
   CASE;

   // IF PAR.Operation Factor 1 is Multiply
   IF PAR.Operation_Factor_1 = 'M';

   CASE;

   // IF PAR.Conversion Factor 1 is Entered
   IF PAR.Conversion_Factor_1 <> *ZERO;

   // PAR.Quantity based on U/M1 = PAR.Quantity based on U/M2 S / PAR.Conversion Facto
   PAR.USR_Qty_based_on_U_M1 = PAR.Quantity_based_on_U_M2_S / PAR.Conversion_Factor_1 'H';

   ENDIF;

   //?Convert based on operation factor
   // IF PAR.Operation Factor 1 is Divide
   IF PAR.Operation_Factor_1 = 'D';

   // PAR.Quantity based on U/M1 = PAR.Quantity based on U/M2 S * PAR.Conversion Facto
   PAR.USR_Qty_based_on_U_M1 = PAR.Quantity_based_on_U_M2_S * PAR.Conversion_Factor_1 'H';

   ENDIF;

   ENDIF;

  }

  //?USER: Processing before Data update

  // PGM.*Record Data Changed = CND.*YES
  PGM.*Record_Data_Changed = 'Y';

  //?(Creates IB if not found or updates if it exists)
  //?Update IC Item Balance Detail
  EXECUTE FUNCTION(UPD Value/Qty          RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1413032;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Inventory_Trans_ID);
  PARAMETER(PAR.Inventory_Trans_Type);
  PARAMETER(PAR.Transaction_Date_Code);
  PARAMETER(PAR.UOM_Transaction);
  PARAMETER(PAR.Transaction_Quantity);
  PARAMETER(PAR.Transaction_Weight);
  PARAMETER(PAR.UOM_Cost);
  PARAMETER(PAR.Extended_Amount);
  PARAMETER(PAR.Shift_Number);
  PARAMETER(PAR.Label_Date);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Conversion_Factor_1);
  PARAMETER(PAR.Operation_Factor_1);
  PARAMETER(PAR.UOM_Second);
  PARAMETER(PAR.Conversion_Factor_2);
  PARAMETER(PAR.Operation_Factor_2);
  PARAMETER(PAR.UOM_Third);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(PAR.Quantity_based_on_U_M1_S);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.Quantity based on U/M1 S EQ WRK.ZERO
   IF PAR.Quantity_based_on_U_M1_S = WRK.ZERO;

   EXECUTE FUNCTION(Crt Item Bal. Detail   CR) TYPE(CRTOBJ) FILE(CAB1REP)          AC1120962;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Quantity_based_on_U_M1_S);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER('N');
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Label_Date);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER('A');
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // Call program RTV System Date/Time   UP.
    CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
    PARAMETER(DB1.Job_Date);
    PARAMETER(DB1.Job_Time);

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Crt Item Bal. Detail   CR) TYPE(CRTOBJ) FILE(CAB1REP)          AC1120962;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(PAR.Transaction_Weight);
   PARAMETER(PAR.Quantity_based_on_U_M1_S);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER('N');
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Extended_Amount);
   PARAMETER(PAR.Label_Date);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER('A');
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // Call program RTV System Date/Time   UP.
    CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
    PARAMETER(DB1.Job_Date);
    PARAMETER(DB1.Job_Time);

   }

   ENDIF;

   //?USER: Process Data record

   //?Calculate new On Hand Value
   CASE;

   // IF PAR.Inventory Trans. Type is Adjustment Cycle Count
   IF PAR.Inventory_Trans_Type = 'AC';

   // PAR.Value of On Hand Inventor = DB1.Value of On Hand Inventor + PAR.Extended Amo
   PAR.Value_of_On_Hand_Inventor = DB1.Value_of_On_Hand_Inventor + PAR.Extended_Amount;

   //?Calculate new On Hand Value
   // IF PAR.Inventory Trans. Type is Quantity based Avg. Cost
   IF PAR.Inventory_Trans_Type = 'R'/'RP'/'S'/'TW'/'RW'/'RR';

   // PAR.Value of On Hand Inventor = DB1.Value of On Hand Inventor + PAR.Extended Amo
   PAR.Value_of_On_Hand_Inventor = DB1.Value_of_On_Hand_Inventor + PAR.Extended_Amount;

   ENDIF;

   // PAR.Quantity on Hand - Weight = PAR.Transaction Weight + DB1.Quantity on Hand -
   PAR.Quantity_on_Hand_Weight = PAR.Transaction_Weight + DB1.Quantity_on_Hand_Weight;

   // PAR.Quantity on Hand - U/M1 = DB1.Quantity on Hand - U/M1 + PAR.Quantity based o
   PAR.Quantity_on_Hand_UOM1 = DB1.Quantity_on_Hand_UOM1 + PAR.Quantity_based_on_U_M1_S;

   //?If quantity goes TO exactly 0, wgt and value to go 0
   CASE;

   // IF PAR.Quantity on Hand - U/M1 EQ WRK.ZERO
   IF PAR.Quantity_on_Hand_UOM1 = WRK.ZERO;

   // Call program UPD Create Weight Adj. XF.
   CALL PROGRAM(UPD Create Weight Adj. XF) ('PDMYXFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.Transaction_Date_Code);
   PARAMETER(DB1.Production_Date);
   PARAMETER(PAR.UOM_Transaction);
   PARAMETER(PAR.Quantity_on_Hand_Weight);
   PARAMETER(PAR.Unit_Cost_Per_Pound);
   PARAMETER(PAR.UOM_Cost);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(PAR.Shift_Number);
   PARAMETER(DB1.Label_Date);

   // PAR.Quantity on Hand - Weight = CON.*ZERO
   PAR.Quantity_on_Hand_Weight = *ZERO;

   // PAR.Value of On Hand Inventor = CON.*ZERO
   PAR.Value_of_On_Hand_Inventor = *ZERO;

   ENDIF;

   EXECUTE FUNCTION(Rtv Lot Tracking Flag RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1506123;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.Lot_Tracking_Flag);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF PAR.Quantity on Hand - U/M1 EQ WRK.ZERO
   IF PAR.Quantity_on_Hand_UOM1 = WRK.ZERO;

   // AND DB1.Production Date NE WRK.ZERO
   AND DB1.Production_Date <> WRK.ZERO;

   // AND PAR.Lot Tracking Flag is Not Yes
   AND PAR.Lot_Tracking_Flag = *BLANK/'N';

   EXECUTE FUNCTION(DLT Item Bal. Detail   DL) TYPE(DLTOBJ) FILE(CAB1REP)          AC1120964;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Production_Date);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg Item Bal. Detail   CH) TYPE(CHGOBJ) FILE(CAB1REP)          AC1120963;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Physical_Count_Weight);
   PARAMETER(DB1.Physical_Count_Qty_UOM1);
   PARAMETER(DB1.Physical_Count_Qty_UOM2);
   PARAMETER(DB1.Physical_Count_Qty_UOM3);
   PARAMETER(DB1.Physical_Count_Status);
   PARAMETER(PAR.Quantity_on_Hand_Weight);
   PARAMETER(PAR.Quantity_on_Hand_UOM1);
   PARAMETER(DB1.Quantity_on_Hand_UOM2);
   PARAMETER(DB1.Quantity_on_Hand_UOM3);
   PARAMETER(DB1.Quantity_In_Chill);
   PARAMETER(DB1.Weight_In_Chill);
   PARAMETER(DB1.Update_Exception_Status);
   PARAMETER(DB1.Physical_Start_Weight);
   PARAMETER(DB1.Physical_Start_UOM1);
   PARAMETER(DB1.Physical_Start_UOM2);
   PARAMETER(DB1.Physical_Start_UOM3);
   PARAMETER(DB1.Physical_Start_Date);
   PARAMETER(DB1.Unit_Cost_Per_Pound);
   PARAMETER(DB1.Last_Cost);
   PARAMETER(PAR.Value_of_On_Hand_Inventor);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // DB1.Job Name = JOB.*PROGRAM
    DB1.Job_Name = JOB.*PROGRAM;

   }

   ENDIF;

  }

  //?Update the quantity/weight on hand in the item balance file
  EXECUTE FUNCTION(RTV Sum Act Qty,Wgt,ValRT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1402850;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.On_Hand_Weight_Summary);
  PARAMETER(DB1.On_Hand_UOM1_Summary);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(DB1.Value_of_On_Hand_Inventor);
  {
   //?USER: Initialize routine

   // PAR.Quantity on Hand - Weight = CON.*ZERO
   PAR.Quantity_on_Hand_Weight = *ZERO;

   // PAR.Quantity on Hand - U/M1 = CON.*ZERO
   PAR.Quantity_on_Hand_UOM1 = *ZERO;

   // PAR.Quantity on Hand - U/M2 = CON.*ZERO
   PAR.Quantity_on_Hand_UOM2 = *ZERO;

   // PAR.Quantity on Hand - U/M3 = CON.*ZERO
   PAR.Quantity_on_Hand_UOM3 = *ZERO;

   // PAR.Value of On Hand Inventor = CON.*ZERO
   PAR.Value_of_On_Hand_Inventor = *ZERO;

   //?USER: Process Data record

   // PAR.Quantity on Hand - Weight = PAR.Quantity on Hand - Weight + DB1.Quantity on
   PAR.Quantity_on_Hand_Weight = PAR.Quantity_on_Hand_Weight + DB1.Quantity_on_Hand_Weight;

   // PAR.Quantity on Hand - U/M1 = PAR.Quantity on Hand - U/M1 + DB1.Quantity on Hand
   PAR.Quantity_on_Hand_UOM1 = PAR.Quantity_on_Hand_UOM1 + DB1.Quantity_on_Hand_UOM1;

   // PAR.Quantity on Hand - U/M2 = PAR.Quantity on Hand - U/M2 + DB1.Quantity on Hand
   PAR.Quantity_on_Hand_UOM2 = PAR.Quantity_on_Hand_UOM2 + DB1.Quantity_on_Hand_UOM2;

   // PAR.Quantity on Hand - U/M3 = PAR.Quantity on Hand - U/M3 + DB1.Quantity on Hand
   PAR.Quantity_on_Hand_UOM3 = PAR.Quantity_on_Hand_UOM3 + DB1.Quantity_on_Hand_UOM3;

   // PAR.Value of On Hand Inventor = PAR.Value of On Hand Inventor + DB1.Value of On
   PAR.Value_of_On_Hand_Inventor = PAR.Value_of_On_Hand_Inventor
   + DB1.Value_of_On_Hand_Inventor;

  }

  EXECUTE FUNCTION(Available Primary U/M) TYPE(DRVFLD)                            AC1123809;
  PARAMETER(DB1.Quantity_Avail_To_Sell);
  PARAMETER(DB1.On_Hand_UOM1_Summary);
  PARAMETER(DB1.Quantity_Scheduled_UOM1);
  {
   //?Calculate derived field

   // PAR.Available Primary U/M = PAR.On Hand Primary U/M - PAR.USR Allocated Primary
   PAR.Available_Primary_U_M = PAR.On_Hand_Primary_U_M - PAR.USR_Allocated_Primary_U_M;

  }

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


