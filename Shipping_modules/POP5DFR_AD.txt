// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POP5DFR
// ?Date: 14.08.2025 Time: 03:38:27
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?DOC: Change Log
DO;

//?** 05/19/16 RMC E4119 remove live with tpm check
//?** 04/06/2015 LJB E004019    Disable options 9 and 13 when we go
//?**   Live with TPM. Condition the options on the screen to not
//?**   display after we go live.
//?01/19/15   RMC E3852  allow TFMODSCHE same updates as PORKSCHE
//?E2625 8/05/13 RMC chg sched ship dt to sched load dt
//?E2073 8/01/12 RMC Use new Whs Inventory Chill instead
//?** 01/07/2010 LJB W288   Added Access Limited parm for Edit
//?** Scheduled Ship Date so the test for Warehouse Control will be
//?** performed.
//?FP1054  prod whse
//?** 07/16/2009 RMC FP1054 display avail ship dates for each prod day
//?04/10/07 Effective 04/23/07 representation of Age Code changes
//?         will be such that Age Code A will be 0 day for boxes
//?         and combos.  The labels on the cartons will not print
//?         a date that is offset by Sunday or Holiday.  Instead of
//?         Code Date, it will be the Pack Date.
ENDDO;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
PARAMETER(JOB.*USER);
PARAMETER(LCL.User_Code_Model);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?User Code Model
CASE;

// IF LCL.User Code Model is Production Scheduling
IF LCL.User_Code_Model = 'PORKSCHE';

// OR LCL.User Code Model is IS
OR LCL.User_Code_Model = 'ISBGUTI';

// OR LCL.User Code Model is TF Prod Scheduling
OR LCL.User_Code_Model = 'TFMODSCHE';

//?User Code Model
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.User Code Model = CON.*BLANK
LCL.User_Code_Model = *BLANK;

ENDIF;

// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

//?** Set Access Limited to Yes for edt sched ship date routine W288
// PAR.Access Limited Sts USR = CND.yes
PAR.Access_Limited_Sts_USR = 'Y';

//?USER: Initialize subfile control

//?First Time Processing
CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

EXECUTE FUNCTION(Rtv Base Values PA    RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1416510;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(LCL.Description_Line_One);
PARAMETER(LCL.Description_Line_Two);
PARAMETER(LCL.UOM_Primary);
PARAMETER(LCL.Conversion_Factor_1);
PARAMETER(LCL.Operation_Factor_1);
PARAMETER(LCL.UOM_Second);
PARAMETER(LCL.Conversion_Factor_2);
PARAMETER(LCL.Operation_Factor_2);
PARAMETER(LCL.UOM_Third);
PARAMETER(LCL.UOM_Pricing);
PARAMETER(LCL.Unit_Weight);
PARAMETER(LCL.Production_Date_Control);
PARAMETER(LCL.Catch_Weight_Status);
PARAMETER(LCL.Fresh_Chilling_Time);
PARAMETER(LCL.Base_Conv_Loss_Item);
PARAMETER(LCL.Piece_Count_Item);
PARAMETER(LCL.Pieces_Per_Bag);
PARAMETER(LCL.Bags_Per_Unit);
PARAMETER(LCL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(CTL.Company_Name_DRV);
PARAMETER(CTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Item Desc DRV) TYPE(DRVFLD)                                    AC1505592;
PARAMETER(CTL.Item_Desc_DRV);
PARAMETER(CTL.Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Desc_DRV);
 PARAMETER(WRK.Description_Line_Two);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Warehouse Desc DRV) TYPE(DRVFLD)                               AC1532477;
PARAMETER(CTL.Warehouse_Desc_DRV);
PARAMETER(CTL.Warehouse_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

}


// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

//?------
//?Production Dates based on Production Days
EXECUTE FUNCTION(CLC Inventory Age     IF) TYPE(EXCINTFUN)                      AC1648635;
PARAMETER(CTL.Company_Number);
PARAMETER(LCL.Fresh_Chilling_Time);
PARAMETER(CTL.USR_Day_1);
PARAMETER(CTL.USR_Day_2);
PARAMETER(CTL.USR_Day_3);
PARAMETER(CTL.USR_Day_4);
PARAMETER(CTL.USR_Day_5);
PARAMETER(CTL.USR_Day_6);
PARAMETER(CTL.USR_Day_7);
PARAMETER(CTL.USR_Day_8);
{
 //?Execute internal function

 // LCL.Day NBR USR = CON.1
 LCL.Day_NBR_USR = 1;

 //?02/27/08 PKD Checking to see what the screen would look like with
 //?             current day as age A
 // LCL.Production Date = JOB.*Job date
 LCL.Production_Date = JOB.*Job_date;

 // DOW LCL.Day NBR USR is LE 8
 DOW LCL.Day_NBR_USR <= 8;

 EXECUTE FUNCTION(Rtv Holiday Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1648606;
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.Production_Date);
 PARAMETER(LCL.Public_Holiday_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.Day of Week (SYN) USR = LCL.Production Date *DAY OF WEEK
 LCL.Day_of_Week_SYN_USR = DATEDTLS(LCL.Production_Date 'DW' 1111111 'NONE' 'N' 1);

 //?DOC: 04/11/07 Change Log
 DO;

 //?04/10/07 Effective 04/23/07 representation of Age Code changes
 //?         will be such that Age Code A will be 0 day for boxes
 //?         and combos.  The labels on the cartons will not print
 //?         a date that is offset by Sunday or Holiday.  Instead of
 //?         Code Date, it will be the Pack Date.
 ENDDO;

 //?04/11/07 PKD Include Sundays and Holidays
 //?Move Date to PAR
 CASE;

 // IF LCL.Day NBR USR is One
 IF LCL.Day_NBR_USR = 1;

 // PAR.USR Day 1 = LCL.Production Date
 PAR.USR_Day_1 = LCL.Production_Date;

 //?Move Date to PAR
 // IF LCL.Day NBR USR is Two
 IF LCL.Day_NBR_USR = 2;

 // PAR.USR Day 2 = LCL.Production Date
 PAR.USR_Day_2 = LCL.Production_Date;

 //?Move Date to PAR
 // IF LCL.Day NBR USR is Three
 IF LCL.Day_NBR_USR = 3;

 // PAR.USR Day 3 = LCL.Production Date
 PAR.USR_Day_3 = LCL.Production_Date;

 //?Move Date to PAR
 // IF LCL.Day NBR USR is Four
 IF LCL.Day_NBR_USR = 4;

 // PAR.USR Day 4 = LCL.Production Date
 PAR.USR_Day_4 = LCL.Production_Date;

 //?Move Date to PAR
 // IF LCL.Day NBR USR is Five
 IF LCL.Day_NBR_USR = 5;

 // PAR.USR Day 5 = LCL.Production Date
 PAR.USR_Day_5 = LCL.Production_Date;

 //?Move Date to PAR
 // IF LCL.Day NBR USR is Six
 IF LCL.Day_NBR_USR = 6;

 // PAR.USR Day 6 = LCL.Production Date
 PAR.USR_Day_6 = LCL.Production_Date;

 //?Move Date to PAR
 // IF LCL.Day NBR USR is Seven
 IF LCL.Day_NBR_USR = 7;

 // PAR.USR Day 7 = LCL.Production Date
 PAR.USR_Day_7 = LCL.Production_Date;

 //?Move Date to PAR
 // IF LCL.Day NBR USR is Eight
 IF LCL.Day_NBR_USR = 8;

 // PAR.USR Day 8 = LCL.Production Date
 PAR.USR_Day_8 = LCL.Production_Date;

 ENDIF;

 // LCL.Production Date = LCL.Production Date + CON.-1 *DAYS
 LCL.Production_Date = DATEINCR(LCL.Production_Date '-1' 'DY' 1111111 'NONE' 'N' 1);

 // LCL.Day NBR USR = LCL.Day NBR USR + CON.1
 LCL.Day_NBR_USR = LCL.Day_NBR_USR + 1;

 ENDDO;

}


//?02/27/08 PKD Checking to see what the screen would look like with
//?             starting day 1 as age A
//?Age Days
CASE;

// IF WRK.#Sequence Block is NULL
IF WRK.#Sequence_Block = *BLANK;

// CTL.Generic Heading 1 - 5 = CON.0
CTL.Generic_Heading_1_5 = 0;

// CTL.Generic Heading 2 - 5 = CON.1
CTL.Generic_Heading_2_5 = 1;

// CTL.Generic Heading 3 - 5 = CON.2
CTL.Generic_Heading_3_5 = 2;

// CTL.Generic Heading 4 - 5 = CON.3
CTL.Generic_Heading_4_5 = 3;

// CTL.Generic Heading 5 - 5 = CON.4
CTL.Generic_Heading_5_5 = 4;

// CTL.Generic Heading 6 - 5 = CON.5
CTL.Generic_Heading_6_5 = 5;

// CTL.Generic Heading 7 - 5 = CON.6
CTL.Generic_Heading_7_5 = 6;

// CTL.Generic Heading 8 - 5 = CON.7
CTL.Generic_Heading_8_5 = 7;

ENDIF;

//?Order Number
CASE;

// IF PAR.Order Number is Not equal to zeros
IF PAR.Order_Number <> *ZERO;

// CTL.Order Number = PAR.Order Number
CTL.Order_Number = PAR.Order_Number;

ENDIF;

ENDIF;

//?02/27/08 PKD Retrieve Production for each day.
//?Retrieve Production
CASE;

// IF LCL.#Sequence Block is NULL
IF LCL.#Sequence_Block = *BLANK;

EXECUTE FUNCTION(Rtv Act Prod Trans Qt RT) TYPE(RTVOBJ) FILE(CAB7CPP)           AC1514971;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.USR_Day_1);
PARAMETER(CTL.Day_1_Production_50_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Actual Production = PAR.Actual Production + DB1.Transaction Quantity
 PAR.Actual_Production = PAR.Actual_Production + DB1.Transaction_Quantity;

}


EXECUTE FUNCTION(Rtv Act Prod Trans Qt RT) TYPE(RTVOBJ) FILE(CAB7CPP)           AC1514971;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.USR_Day_2);
PARAMETER(CTL.Day_2_Production_50_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Actual Production = PAR.Actual Production + DB1.Transaction Quantity
 PAR.Actual_Production = PAR.Actual_Production + DB1.Transaction_Quantity;

}


EXECUTE FUNCTION(Rtv Act Prod Trans Qt RT) TYPE(RTVOBJ) FILE(CAB7CPP)           AC1514971;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.USR_Day_3);
PARAMETER(CTL.Day_3_Production_50_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Actual Production = PAR.Actual Production + DB1.Transaction Quantity
 PAR.Actual_Production = PAR.Actual_Production + DB1.Transaction_Quantity;

}


EXECUTE FUNCTION(Rtv Act Prod Trans Qt RT) TYPE(RTVOBJ) FILE(CAB7CPP)           AC1514971;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.USR_Day_4);
PARAMETER(CTL.Day_4_Production_50_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Actual Production = PAR.Actual Production + DB1.Transaction Quantity
 PAR.Actual_Production = PAR.Actual_Production + DB1.Transaction_Quantity;

}


EXECUTE FUNCTION(Rtv Act Prod Trans Qt RT) TYPE(RTVOBJ) FILE(CAB7CPP)           AC1514971;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.USR_Day_5);
PARAMETER(CTL.Day_5_Production_50_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Actual Production = PAR.Actual Production + DB1.Transaction Quantity
 PAR.Actual_Production = PAR.Actual_Production + DB1.Transaction_Quantity;

}


EXECUTE FUNCTION(Rtv Act Prod Trans Qt RT) TYPE(RTVOBJ) FILE(CAB7CPP)           AC1514971;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.USR_Day_6);
PARAMETER(CTL.Day_6_Production_50_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Actual Production = PAR.Actual Production + DB1.Transaction Quantity
 PAR.Actual_Production = PAR.Actual_Production + DB1.Transaction_Quantity;

}


EXECUTE FUNCTION(Rtv Act Prod Trans Qt RT) TYPE(RTVOBJ) FILE(CAB7CPP)           AC1514971;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.USR_Day_7);
PARAMETER(CTL.Day_7_Production_50_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Actual Production = PAR.Actual Production + DB1.Transaction Quantity
 PAR.Actual_Production = PAR.Actual_Production + DB1.Transaction_Quantity;

}


EXECUTE FUNCTION(Rtv Act Prod Trans Qt RT) TYPE(RTVOBJ) FILE(CAB7CPP)           AC1514971;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.USR_Day_8);
PARAMETER(CTL.Day_8_Production_50_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Actual Production = PAR.Actual Production + DB1.Transaction Quantity
 PAR.Actual_Production = PAR.Actual_Production + DB1.Transaction_Quantity;

}


ENDIF;

EXECUTE FUNCTION(Rtv On-Hand Inventory RT) TYPE(RTVOBJ) FILE(POCWCPP)           AC1664892;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.USR_Day_1);
PARAMETER(CTL.USR_Day_2);
PARAMETER(CTL.USR_Day_3);
PARAMETER(CTL.USR_Day_4);
PARAMETER(CTL.USR_Day_5);
PARAMETER(CTL.USR_Day_6);
PARAMETER(CTL.USR_Day_7);
PARAMETER(CTL.USR_Day_8);
PARAMETER(CTL.Day_1_Inventory_50_USR);
PARAMETER(CTL.Day_2_Inventory_50_USR);
PARAMETER(CTL.Day_3_Inventory_50_USR);
PARAMETER(CTL.Day_4_Inventory_50_USR);
PARAMETER(CTL.Day_5_Inventory_50_USR);
PARAMETER(CTL.Day_6_Inventory_50_USR);
PARAMETER(CTL.Day_7_Inventory_50_USR);
PARAMETER(CTL.Day_8_Inventory_50_USR);
PARAMETER(CTL.Label_Date_1_USR);
PARAMETER(CTL.Label_Date_2_USR);
PARAMETER(CTL.Label_Date_3_USR);
PARAMETER(CTL.Label_Date_4_USR);
PARAMETER(CTL.Label_Date_5_USR);
PARAMETER(CTL.Label_Date_6_USR);
PARAMETER(CTL.Label_Date_7_USR);
PARAMETER(LCL.Fresh_Chilling_Time);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 EXECUTE FUNCTION(Rtv Dsc/TrCtl/PFS flgs RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1913688;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(LCL.Warehouse_Description);
 PARAMETER(LCL.Trans_Contol_AS400_Plant);
 PARAMETER(LCL.WHS_Live_with_Carlisle);
 PARAMETER(LCL.WHS_PFS_Interface);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?USER: Process Data record

 CASE;

 // IF DB1.Production Date EQ JOB.*Job date
 IF DB1.Production_Date = JOB.*Job_date;

 // AND LCL.WHS Live w/Carlisle is Yes
 AND LCL.WHS_Live_with_Carlisle = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?DOC: 04/11/07 Change Log
 DO;

 //?04/10/07 Effective 04/23/07 representation of Age Code changes
 //?         will be such that Age Code A will be 0 day for boxes
 //?         and combos.  The labels on the cartons will not print
 //?         a date that is offset by Sunday or Holiday.  Instead of
 //?         Code Date, it will be the Pack Date.
 ENDDO;

 //?04/11/07 PKD Chilled and non-chilled are aged the same.
 //?Inventory
 CASE;

 // IF DB1.Production Date EQ PAR.USR Day 1
 IF DB1.Production_Date = PAR.USR_Day_1;

 // PAR.Day 1 Inventory 5,0   USR = PAR.Day 1 Inventory 5,0   USR + DB1.Quantity on Hand - U/M1
 PAR.Day_1_Inventory_50_USR = PAR.Day_1_Inventory_50_USR + DB1.Quantity_on_Hand_UOM1;

 // PAR.Label Date 1 USR = DB1.Label Date
 PAR.Label_Date_1_USR = DB1.Label_Date;

 //?Inventory
 // IF DB1.Production Date EQ PAR.USR Day 2
 IF DB1.Production_Date = PAR.USR_Day_2;

 // PAR.Day 2 Inventory 5,0   USR = PAR.Day 2 Inventory 5,0   USR + DB1.Quantity on Hand - U/M1
 PAR.Day_2_Inventory_50_USR = PAR.Day_2_Inventory_50_USR + DB1.Quantity_on_Hand_UOM1;

 // PAR.Label Date 2 USR = DB1.Label Date
 PAR.Label_Date_2_USR = DB1.Label_Date;

 //?Inventory
 // IF DB1.Production Date EQ PAR.USR Day 3
 IF DB1.Production_Date = PAR.USR_Day_3;

 // PAR.Day 3 Inventory 5,0   USR = PAR.Day 3 Inventory 5,0   USR + DB1.Quantity on Hand - U/M1
 PAR.Day_3_Inventory_50_USR = PAR.Day_3_Inventory_50_USR + DB1.Quantity_on_Hand_UOM1;

 // PAR.Label Date 3 USR = DB1.Label Date
 PAR.Label_Date_3_USR = DB1.Label_Date;

 //?Inventory
 // IF DB1.Production Date EQ PAR.USR Day 4
 IF DB1.Production_Date = PAR.USR_Day_4;

 // PAR.Day 4 Inventory 5,0   USR = PAR.Day 4 Inventory 5,0   USR + DB1.Quantity on Hand - U/M1
 PAR.Day_4_Inventory_50_USR = PAR.Day_4_Inventory_50_USR + DB1.Quantity_on_Hand_UOM1;

 // PAR.Label Date 4 USR = DB1.Label Date
 PAR.Label_Date_4_USR = DB1.Label_Date;

 //?Inventory
 // IF DB1.Production Date EQ PAR.USR Day 5
 IF DB1.Production_Date = PAR.USR_Day_5;

 // PAR.Day 5 Inventory 5,0   USR = PAR.Day 5 Inventory 5,0   USR + DB1.Quantity on Hand - U/M1
 PAR.Day_5_Inventory_50_USR = PAR.Day_5_Inventory_50_USR + DB1.Quantity_on_Hand_UOM1;

 // PAR.Label Date 5 USR = DB1.Label Date
 PAR.Label_Date_5_USR = DB1.Label_Date;

 //?Inventory
 // IF DB1.Production Date EQ PAR.USR Day 6
 IF DB1.Production_Date = PAR.USR_Day_6;

 // PAR.Day 6 Inventory 5,0   USR = PAR.Day 6 Inventory 5,0   USR + DB1.Quantity on Hand - U/M1
 PAR.Day_6_Inventory_50_USR = PAR.Day_6_Inventory_50_USR + DB1.Quantity_on_Hand_UOM1;

 // PAR.Label Date 6 USR = DB1.Label Date
 PAR.Label_Date_6_USR = DB1.Label_Date;

 //?Inventory
 // IF DB1.Production Date EQ PAR.USR Day 7
 IF DB1.Production_Date = PAR.USR_Day_7;

 // PAR.Day 7 Inventory 5,0   USR = PAR.Day 7 Inventory 5,0   USR + DB1.Quantity on Hand - U/M1
 PAR.Day_7_Inventory_50_USR = PAR.Day_7_Inventory_50_USR + DB1.Quantity_on_Hand_UOM1;

 // PAR.Label Date 7 USR = DB1.Label Date
 PAR.Label_Date_7_USR = DB1.Label_Date;

 //?Inventory
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Day 8 Inventory 5,0   USR = PAR.Day 8 Inventory 5,0   USR + DB1.Quantity on Hand - U/M1
 PAR.Day_8_Inventory_50_USR = PAR.Day_8_Inventory_50_USR + DB1.Quantity_on_Hand_UOM1;

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Inv Allocated     RT) TYPE(RTVOBJ) FILE(POB5CPP)           AC1647108;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.USR_Day_1);
PARAMETER(CTL.USR_Day_2);
PARAMETER(CTL.USR_Day_3);
PARAMETER(CTL.USR_Day_4);
PARAMETER(CTL.USR_Day_5);
PARAMETER(CTL.USR_Day_6);
PARAMETER(CTL.USR_Day_7);
PARAMETER(CTL.USR_Day_8);
PARAMETER(CTL.Day_1_Sales_50_USR);
PARAMETER(CTL.Day_2_Sales_50_USR);
PARAMETER(CTL.Day_3_Sales_50_USR);
PARAMETER(CTL.Day_4_Sales_50_USR);
PARAMETER(CTL.Day_5_Sales_50_USR);
PARAMETER(CTL.Day_6_Sales_50_USR);
PARAMETER(CTL.Day_7_Sales_50_USR);
PARAMETER(CTL.Day_8_Sales_50_USR);
PARAMETER(LCL.Fresh_Chilling_Time);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?DOC: 04/11/07 Change Log
 DO;

 //?04/10/07 Effective 04/23/07 representation of Age Code changes
 //?         will be such that Age Code A will be 0 day for boxes
 //?         and combos.  The labels on the cartons will not print
 //?         a date that is offset by Sunday or Holiday.  Instead of
 //?         Code Date, it will be the Pack Date.
 ENDDO;

 //?04/11/07 PKD Chilled and Non-Chilled are aged the same.
 //?Allocated
 CASE;

 // IF DB1.OD Production Date EQ PAR.USR Day 1
 IF DB1.OD_Production_Date = PAR.USR_Day_1;

 // PAR.Day 1 Sales 5,0  USR = PAR.Day 1 Sales 5,0  USR + DB1.OD Quantity Inv Sched
 PAR.Day_1_Sales_50_USR = PAR.Day_1_Sales_50_USR + DB1.OD_Quantity_Inv_Sched;

 //?Allocated
 // IF DB1.OD Production Date EQ PAR.USR Day 2
 IF DB1.OD_Production_Date = PAR.USR_Day_2;

 // PAR.Day 2 Sales 5,0  USR = PAR.Day 2 Sales 5,0  USR + DB1.OD Quantity Inv Sched
 PAR.Day_2_Sales_50_USR = PAR.Day_2_Sales_50_USR + DB1.OD_Quantity_Inv_Sched;

 //?Allocated
 // IF DB1.OD Production Date EQ PAR.USR Day 3
 IF DB1.OD_Production_Date = PAR.USR_Day_3;

 // PAR.Day 3 Sales 5,0  USR = PAR.Day 3 Sales 5,0  USR + DB1.OD Quantity Inv Sched
 PAR.Day_3_Sales_50_USR = PAR.Day_3_Sales_50_USR + DB1.OD_Quantity_Inv_Sched;

 //?Allocated
 // IF DB1.OD Production Date EQ PAR.USR Day 4
 IF DB1.OD_Production_Date = PAR.USR_Day_4;

 // PAR.Day 4 Sales 5,0  USR = PAR.Day 4 Sales 5,0  USR + DB1.OD Quantity Inv Sched
 PAR.Day_4_Sales_50_USR = PAR.Day_4_Sales_50_USR + DB1.OD_Quantity_Inv_Sched;

 //?Allocated
 // IF DB1.OD Production Date EQ PAR.USR Day 5
 IF DB1.OD_Production_Date = PAR.USR_Day_5;

 // PAR.Day 5 Sales 5,0  USR = PAR.Day 5 Sales 5,0  USR + DB1.OD Quantity Inv Sched
 PAR.Day_5_Sales_50_USR = PAR.Day_5_Sales_50_USR + DB1.OD_Quantity_Inv_Sched;

 //?Allocated
 // IF DB1.OD Production Date EQ PAR.USR Day 6
 IF DB1.OD_Production_Date = PAR.USR_Day_6;

 // PAR.Day 6 Sales 5,0  USR = PAR.Day 6 Sales 5,0  USR + DB1.OD Quantity Inv Sched
 PAR.Day_6_Sales_50_USR = PAR.Day_6_Sales_50_USR + DB1.OD_Quantity_Inv_Sched;

 //?Allocated
 // IF DB1.OD Production Date EQ PAR.USR Day 7
 IF DB1.OD_Production_Date = PAR.USR_Day_7;

 // PAR.Day 7 Sales 5,0  USR = PAR.Day 7 Sales 5,0  USR + DB1.OD Quantity Inv Sched
 PAR.Day_7_Sales_50_USR = PAR.Day_7_Sales_50_USR + DB1.OD_Quantity_Inv_Sched;

 //?Allocated
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Day 8 Sales 5,0  USR = PAR.Day 8 Sales 5,0  USR + DB1.OD Quantity Inv Sched
 PAR.Day_8_Sales_50_USR = PAR.Day_8_Sales_50_USR + DB1.OD_Quantity_Inv_Sched;

 ENDIF;

}


// CTL.Day 1 Available Qty   USR = CTL.Day 1 Inventory 5,0   USR - CTL.Day 1 Sales 5,0  USR
CTL.Day_1_Available_Qty_USR = CTL.Day_1_Inventory_50_USR - CTL.Day_1_Sales_50_USR;

// CTL.Day 2 Available Qty   USR = CTL.Day 2 Inventory 5,0   USR - CTL.Day 2 Sales 5,0  USR
CTL.Day_2_Available_Qty_USR = CTL.Day_2_Inventory_50_USR - CTL.Day_2_Sales_50_USR;

// CTL.Day 3 Available Qty   USR = CTL.Day 3 Inventory 5,0   USR - CTL.Day 3 Sales 5,0  USR
CTL.Day_3_Available_Qty_USR = CTL.Day_3_Inventory_50_USR - CTL.Day_3_Sales_50_USR;

// CTL.Day 4 Available Qty   USR = CTL.Day 4 Inventory 5,0   USR - CTL.Day 4 Sales 5,0  USR
CTL.Day_4_Available_Qty_USR = CTL.Day_4_Inventory_50_USR - CTL.Day_4_Sales_50_USR;

// CTL.Day 5 Available Qty   USR = CTL.Day 5 Inventory 5,0   USR - CTL.Day 5 Sales 5,0  USR
CTL.Day_5_Available_Qty_USR = CTL.Day_5_Inventory_50_USR - CTL.Day_5_Sales_50_USR;

// CTL.Day 6 Available Qty   USR = CTL.Day 6 Inventory 5,0   USR - CTL.Day 6 Sales 5,0  USR
CTL.Day_6_Available_Qty_USR = CTL.Day_6_Inventory_50_USR - CTL.Day_6_Sales_50_USR;

// CTL.Day 7 Available Qty   USR = CTL.Day 7 Inventory 5,0   USR - CTL.Day 7 Sales 5,0  USR
CTL.Day_7_Available_Qty_USR = CTL.Day_7_Inventory_50_USR - CTL.Day_7_Sales_50_USR;

// CTL.Day 8 Available Qty   USR = CTL.Day 8 Inventory 5,0   USR - CTL.Day 8 Sales 5,0  USR
CTL.Day_8_Available_Qty_USR = CTL.Day_8_Inventory_50_USR - CTL.Day_8_Sales_50_USR;

//?------------------------------------------------------
//?FP1054   Get Avail ship dates per warehouse -- 7/16/09
EXECUTE FUNCTION(RTV Type/Std Chil/Chil RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1501268;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.Warehouse_Type);
PARAMETER(LCL.Warehouse_Std_Chill_Time);
PARAMETER(LCL.Warehouse_Chill_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Warehous Inv ChillRT) TYPE(RTVOBJ) FILE(CAADREP)           AC2048609;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.WHS_Inventory_Chill_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Chill Time        RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1304403;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(LCL.Fresh_Chilling_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?E2073 8/01/12 RMC Use new Whs Inventory Chill instead
//?Chilling Time
CASE;

// IF LCL.Warehouse Std Chill Time is yes
IF LCL.Warehouse_Std_Chill_Time = 'Y';

// LCL.Chilling Time USR = LCL.WHS Inventory Chill Time
LCL.Chilling_Time_USR = LCL.WHS_Inventory_Chill_Time;

// LCL.Chilling Time USR = LCL.Chilling Time USR - CON.1
LCL.Chilling_Time_USR = LCL.Chilling_Time_USR - 1;

//?Chilling Time
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Chilling Time USR = LCL.Fresh Chilling Time
LCL.Chilling_Time_USR = LCL.Fresh_Chilling_Time;

ENDIF;

// Call program Clc PA Avail Shp Dts  XF.
CALL PROGRAM(Clc PA Avail Shp Dts  XF) ('PNKRXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(LCL.Chilling_Time_USR);
PARAMETER(CTL.USR_Day_1);
PARAMETER(CTL.USR_Day_2);
PARAMETER(CTL.USR_Day_3);
PARAMETER(CTL.USR_Day_4);
PARAMETER(CTL.USR_Day_5);
PARAMETER(CTL.USR_Day_6);
PARAMETER(CTL.Avail_Ship_Date_1_USR);
PARAMETER(CTL.Avail_Ship_Date_2_USR);
PARAMETER(CTL.Avail_Ship_Date_3_USR);
PARAMETER(CTL.Avail_Ship_Date_4_USR);
PARAMETER(CTL.Avail_Ship_Date_5_USR);
PARAMETER(CTL.Avail_Ship_Date_6_USR);
PARAMETER(CTL.USR_Day_7);
PARAMETER(CTL.USR_Day_8);
PARAMETER(CTL.Avail_Ship_Date_7_USR);
PARAMETER(CTL.Avail_Ship_Date_8_USR);

//?USER: Initialize subfile record from DBF record

//?RTV:  Inventory Allocation
CASE;

// IF RCD.OD Quantity Inv Sched is GT Zero
IF RCD.OD_Quantity_Inv_Sched > *ZERO;

EXECUTE FUNCTION(Rtv Order Inv Alloc   RT) TYPE(RTVOBJ) FILE(POB5CPP)           AC1647118;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(CTL.USR_Day_1);
PARAMETER(CTL.USR_Day_2);
PARAMETER(CTL.USR_Day_3);
PARAMETER(CTL.USR_Day_4);
PARAMETER(CTL.USR_Day_5);
PARAMETER(CTL.USR_Day_6);
PARAMETER(CTL.USR_Day_7);
PARAMETER(CTL.USR_Day_8);
PARAMETER(RCD.Day_1_Sales_50_USR);
PARAMETER(RCD.Day_2_Sales_50_USR);
PARAMETER(RCD.Day_3_Sales_50_USR);
PARAMETER(RCD.Day_4_Sales_50_USR);
PARAMETER(RCD.Day_5_Sales_50_USR);
PARAMETER(RCD.Day_6_Sales_50_USR);
PARAMETER(RCD.Day_7_Sales_50_USR);
PARAMETER(RCD.Day_8_Sales_50_USR);
PARAMETER(LCL.Fresh_Chilling_Time);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?DOC: 04/11/07 Change Log
 DO;

 //?04/10/07 Effective 04/23/07 representation of Age Code changes
 //?         will be such that Age Code A will be 0 day for boxes
 //?         and combos.  The labels on the cartons will not print
 //?         a date that is offset by Sunday or Holiday.  Instead of
 //?         Code Date, it will be the Pack Date.
 ENDDO;

 //?04/11/07 PKD Chilled and Non-Chilled are aged the same
 //?Allocated
 CASE;

 // IF DB1.OD Production Date EQ PAR.USR Day 1
 IF DB1.OD_Production_Date = PAR.USR_Day_1;

 // PAR.Day 1 Sales 5,0  USR = DB1.OD Quantity Inv Sched
 PAR.Day_1_Sales_50_USR = DB1.OD_Quantity_Inv_Sched;

 //?Allocated
 // IF DB1.OD Production Date EQ PAR.USR Day 2
 IF DB1.OD_Production_Date = PAR.USR_Day_2;

 // PAR.Day 2 Sales 5,0  USR = DB1.OD Quantity Inv Sched
 PAR.Day_2_Sales_50_USR = DB1.OD_Quantity_Inv_Sched;

 //?Allocated
 // IF DB1.OD Production Date EQ PAR.USR Day 3
 IF DB1.OD_Production_Date = PAR.USR_Day_3;

 // PAR.Day 3 Sales 5,0  USR = DB1.OD Quantity Inv Sched
 PAR.Day_3_Sales_50_USR = DB1.OD_Quantity_Inv_Sched;

 //?Allocated
 // IF DB1.OD Production Date EQ PAR.USR Day 4
 IF DB1.OD_Production_Date = PAR.USR_Day_4;

 // PAR.Day 4 Sales 5,0  USR = DB1.OD Quantity Inv Sched
 PAR.Day_4_Sales_50_USR = DB1.OD_Quantity_Inv_Sched;

 //?Allocated
 // IF DB1.OD Production Date EQ PAR.USR Day 5
 IF DB1.OD_Production_Date = PAR.USR_Day_5;

 // PAR.Day 5 Sales 5,0  USR = DB1.OD Quantity Inv Sched
 PAR.Day_5_Sales_50_USR = DB1.OD_Quantity_Inv_Sched;

 //?Allocated
 // IF DB1.OD Production Date EQ PAR.USR Day 6
 IF DB1.OD_Production_Date = PAR.USR_Day_6;

 // PAR.Day 6 Sales 5,0  USR = DB1.OD Quantity Inv Sched
 PAR.Day_6_Sales_50_USR = DB1.OD_Quantity_Inv_Sched;

 //?Allocated
 // IF DB1.OD Production Date EQ PAR.USR Day 7
 IF DB1.OD_Production_Date = PAR.USR_Day_7;

 // PAR.Day 7 Sales 5,0  USR = DB1.OD Quantity Inv Sched
 PAR.Day_7_Sales_50_USR = DB1.OD_Quantity_Inv_Sched;

 //?Allocated
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Day 8 Sales 5,0  USR = PAR.Day 8 Sales 5,0  USR + DB1.OD Quantity Inv Sched
 PAR.Day_8_Sales_50_USR = PAR.Day_8_Sales_50_USR + DB1.OD_Quantity_Inv_Sched;

 ENDIF;

}


//?RTV:  Inventory Allocation
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

EXECUTE FUNCTION(Rtv Load/LdSts        IF) TYPE(EXCINTFUN)                      AC1648393;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.Order_Type_Sales);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(LCL.Ship_To_Name);
PARAMETER(LCL.Ship_To_City);
PARAMETER(LCL.Ship_To_State_Code);
PARAMETER(WRK.Order_Date);
PARAMETER(WRK.Actual_Shipped_Date);
PARAMETER(NLL.Order_in_Use);
PARAMETER(LCL.Header_Status);
PARAMETER(WRK.Credit_Hold);
PARAMETER(WRK.Production_Hold);
PARAMETER(PAR.Requested_Delivery_Date);
PARAMETER(LCL.Requested_Delivery_Time);
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.Billing_Activity_Type);
PARAMETER(NLL.Block_Order_Flag);
PARAMETER(RCD.Load_Status);
PARAMETER(WRK.Carrier_Code);
PARAMETER(WRK.Export_Status);
PARAMETER(WRK.Load_Acceptance_Flag);
PARAMETER(WRK.Deadline_Departure_Date);
PARAMETER(WRK.Deadline_Departure_Time);
{
 //?Execute internal function

 //?** 05/19/16   RMC E4119  remove live with tpm check
 EXECUTE FUNCTION(RTV LdId/OrdDt/ShpDt  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1648395;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Type_Sales);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name);
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Order_Date);
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Order_in_Use);
 PARAMETER(PAR.Header_Status);
 PARAMETER(PAR.Credit_Hold);
 PARAMETER(PAR.Production_Hold);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(PAR.Requested_Delivery_Time);
 PARAMETER(LCL.Load_ID);
 PARAMETER(PAR.Export_Status);
 PARAMETER(PAR.Billing_Activity_Type);
 PARAMETER(PAR.Block_Order_Flag);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.Load ID = LCL.Load ID
 PAR.Load_ID = LCL.Load_ID;

 CASE;

 // IF LCL.Load ID is NE Blank
 IF LCL.Load_ID <> *ZERO;

 EXECUTE FUNCTION(RTV LoadSts/Carrier    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1648402;
 PARAMETER(LCL.Load_ID);
 PARAMETER(PAR.Load_Status);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Export_Status);
 PARAMETER(PAR.Load_Acceptance_Flag);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

}


//?RTV:  Order Detail Information
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

// RCD.Inv Total             USR = RCD.OD Quantity Inv Sched
RCD.Inv_Total_USR = RCD.OD_Quantity_Inv_Sched;

// RCD.Production            USR = RCD.OD Qty/Cnsmd Pieces Sched
RCD.Production_USR = RCD.OD_Qty_Cnsmd_Pieces_Sched;

EXECUTE FUNCTION(RTV Qty/Wgt Ord/Sched RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1648058;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Detail_Line_Status);
PARAMETER(RCD.Quantity_Ordered_5_0_USR);
PARAMETER(LCL.Weight_Ordered);
PARAMETER(RCD.Quantity_Sched_5_0_USR);
PARAMETER(LCL.Weight_Scheduled);
PARAMETER(NLL.Requested_Ship_Date);
PARAMETER(RCD.Consumed_Item_Code);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(LCL.Production_Ovr_AgeDte_Fr);
PARAMETER(LCL.Production_Ovr_AgeDte_To);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?F5=Refresh
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?F9=Display Item Warehouse Inquiry Detail
CASE;

// IF CTL.*CMD key is CF09
IF CTL.*CMD_key = '09';

//?FP1054 SLM 4/14/2009 Correction on wharehouse
//?use ctl not LCL ALSO send in the warehouse desc drv as ctl
// Call program Dsp Item/Whse Inqy Dtl DF.
CALL PROGRAM(Dsp Item/Whse Inqy Dtl DF) ('ICQ9DFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(LCL.Description_Line_One);
PARAMETER(LCL.UOM_Primary);
PARAMETER(LCL.Conversion_Factor_1);
PARAMETER(LCL.Operation_Factor_1);
PARAMETER(LCL.UOM_Second);
PARAMETER(LCL.Conversion_Factor_2);
PARAMETER(LCL.Operation_Factor_2);
PARAMETER(LCL.UOM_Third);
PARAMETER(LCL.Unit_Weight);
PARAMETER(LCL.Production_Date_Control);
PARAMETER(LCL.Catch_Weight_Status);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Warehouse_Desc_DRV);
PARAMETER(PAR.Name);
PARAMETER(PAR.*Initial_call);

ENDIF;

//?F11=Work With Order Production Schedule
CASE;

// IF CTL.*CMD key is CF11
IF CTL.*CMD_key = '11';

CASE;

// IF LCL.Base/Conv/Loss Item is Base
IF LCL.Base_Conv_Loss_Item = 'B';

// LCL.Component Item Code = CTL.Item Code
LCL.Component_Item_Code = CTL.Item_Code;

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Rtv First Consumed Itm XF.
CALL PROGRAM(Rtv First Consumed Itm XF) ('POP1XFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(LCL.Component_Item_Code);

ENDIF;

EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.Production_Warehouse);
PARAMETER(LCL.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program WW OrdPrdSch Edit     DF.
CALL PROGRAM(WW OrdPrdSch Edit     DF) ('POQJDFR');
PARAMETER(LCL.Component_Item_Code);
PARAMETER(LCL.Production_Warehouse);
PARAMETER(CTL.Item_Code);
PARAMETER(*BLANK);

ENDIF;

//?F15=Display Item Specification
CASE;

// IF CTL.*CMD key is CF15
IF CTL.*CMD_key = '15';

// Call program Dsp Item Specs        DR.
CALL PROGRAM(Dsp Item Specs        DR) ('POQMD1R');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?5=Display Order
CASE;

// IF RCD.*SFLSEL is Option 5
IF RCD.*SFLSEL = '5'/'5';

// Call program DSP Ord Inquiry Detail DF.
CALL PROGRAM(DSP Ord Inquiry Detail DF) ('PDPZDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(LCL.Application_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?8=dsp age days
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

// Call program Dsp Age Information   DR.
CALL PROGRAM(Dsp Age Information   DR) ('PNQ0D1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?9=Edit Scheduled Ship Date/Warehouse
CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

CASE;

// IF RCD.Load ID is Blank
IF RCD.Load_ID = *ZERO;

EXECUTE FUNCTION(RTV Order in Use       RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1646052;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.Order_in_Use);
PARAMETER(LCL.Header_Status);
PARAMETER(LCL.Load_ID);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Order in Use is yes
IF LCL.Order_in_Use = 'Y';

// Send error message - 'Order &2 in use by another user.'
ERROR(USR0664);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Order_Number);

// IF *OTHERWISE
IF *OTHERWISE;

//?** Access Limited Flag added                        W288
// Call program EDT Schd Shp Dte/Whse  E1.
CALL PROGRAM(EDT Schd Shp Dte/Whse  E1) ('PDLQE1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(PAR.Access_Limited_Sts_USR);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Function not available for this entry'
ERROR(USR1942);

ENDIF;

ENDIF;

//?11=Work With Order Production Schedule
CASE;

// IF RCD.*SFLSEL is Option 11
IF RCD.*SFLSEL = '11';

//?FP1054  prod whse
EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
PARAMETER(RCD.Warehouse_Code);
PARAMETER(LCL.Production_Warehouse);
PARAMETER(LCL.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program WW OrdPrdSch Edit     DF.
CALL PROGRAM(WW OrdPrdSch Edit     DF) ('POQJDFR');
PARAMETER(RCD.Consumed_Item_Code);
PARAMETER(LCL.Production_Warehouse);
PARAMETER(RCD.Item_Code);
PARAMETER(*BLANK);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?13=Display Load   Only available until we go Live with TPM
CASE;

// IF RCD.*SFLSEL is Option 13
IF RCD.*SFLSEL = '13';

//?** 05/19/16 RMC E4119 remove live with tpm check
// Call program WW Orders on Load      DF.
CALL PROGRAM(WW Orders on Load      DF) ('PDODDFR');
PARAMETER(RCD.Load_ID);
PARAMETER(LCL.USR_Weight_Accumulated);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?15=Display Item Specifications
CASE;

// IF RCD.*SFLSEL is Option 15
IF RCD.*SFLSEL = '15';

// Call program Dsp Item Specs        DR.
CALL PROGRAM(Dsp Item Specs        DR) ('POQMD1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

