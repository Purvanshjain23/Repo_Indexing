// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDO4EFR
// ?Date: 14.08.2025 Time: 03:32:39
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PAR.Next Program Name = CON.PDO4EFR
PAR.Next_Program_Name = 'PDO4EFR';

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?08/19/19 DN R15322-Check User Exist to Edit Original Ordered Qty.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
PARAMETER(JOB.*USER);
PARAMETER(LCL.User_Code_Model);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.User Code Model is equal to blank
IF LCL.User_Code_Model = *BLANK;

EXECUTE FUNCTION(RTV for Existence     RT) TYPE(RTVOBJ) FILE(CADTREP)           AC2171404;
PARAMETER(JOB.*USER);
PARAMETER('ORDUPD');

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV for Existence     RT) TYPE(RTVOBJ) FILE(CADTREP)           AC2171404;
PARAMETER(LCL.User_Code_Model);
PARAMETER('ORDUPD');

ENDIF;

//?Check Return Code.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// LCL.User Appl Profile Exist U = CND.Yes
LCL.User_Appl_Profile_Exist_U = 'Y';

//?Check Return Code.
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.User Appl Profile Exist U = CND.No
LCL.User_Appl_Profile_Exist_U = 'N';

ENDIF;

ENDIF;

//?had RTV LAST Seq # from order detail; can't add on this screen
// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// Call program RTV Co. Dflt Int All   XF.
CALL PROGRAM(RTV Co. Dflt Int All   XF) ('PDSTXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(PAR.Allow_Mult_Whse_to_Order);
PARAMETER(PAR.Allow_Multi_Export_On_Ord);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(NLL.Company_Organization);
PARAMETER(NLL.CDI_Valuation_Grouping);
PARAMETER(NLL.CDI_Unused_Sts_3);
PARAMETER(NLL.CDI_Shipper);
PARAMETER(NLL.CDI_Produced_by_co);

// PAR.USR Display field = CND.no
PAR.USR_Display_field = 'N';

//?USER: Initialize subfile header

CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV for Order Dtl Ent. RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1332418;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Type_Sales);
PARAMETER(WRK.Order_Date);
PARAMETER(PAR.Requested_Ship_Date);
PARAMETER(PAR.Comment_Print_Acknowledge);
PARAMETER(PAR.Comment_Print_Inv_Cr_Memo);
PARAMETER(PAR.Comment_Print_Pick_Slip);
PARAMETER(PAR.Comment_Print_Ship_Doc);
PARAMETER(WRK.Scheduled_Ship_Date);
PARAMETER(PAR.Order_Value_Total);
PARAMETER(PAR.Order_Weight_Total);
PARAMETER(CTL.Requested_Delivery_Date);
PARAMETER(CTL.Requested_Delivery_Time);
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Shipping_Method);
PARAMETER(PAR.Palletize);
PARAMETER(WRK.Shrink_Wrap);
PARAMETER(PAR.Slip_Sheet);
PARAMETER(PAR.Reefer_Temperature);
PARAMETER(PAR.Load_Type);
PARAMETER(PAR.Event_Code);
PARAMETER(PAR.Trans_Contol_AS400_Plant);
PARAMETER(PAR.Billing_Activity_Type);
PARAMETER(PAR.Block_Order_Flag);
PARAMETER(PAR.Broker_Order_Status);
PARAMETER(PAR.OH_Load_Plan_Ready);
PARAMETER(PAR.HPB_Ship_to_Warehouse);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.USR Requested Deliver Dte = CTL.Requested Delivery Date
CTL.USR_Requested_Deliver_Dte = CTL.Requested_Delivery_Date;

// CTL.Usr Request Delivery Time = CTL.Requested Delivery Time
CTL.Usr_Request_Delivery_Time = CTL.Requested_Delivery_Time;

// CTL.USR Requested ship date s = PAR.Requested Ship Date
CTL.USR_Requested_ship_date_s = PAR.Requested_Ship_Date;

// CTL.Scheduled Ship Date USR = WRK.Scheduled Ship Date
CTL.Scheduled_Ship_Date_USR = WRK.Scheduled_Ship_Date;

EXECUTE FUNCTION(Ship To Name          DRV) TYPE(DRVFLD)                        AC1573561;
PARAMETER(CTL.Ship_To_Name_DRV);
PARAMETER(CTL.Ship_To_Customer);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?fp1309 bring in the deadline dep date for the first record
// Call program Rtv All Fields/1 line XF.
CALL PROGRAM(Rtv All Fields/1 line XF) ('PNQYXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(NLL.Credit_Hold);
PARAMETER(NLL.Production_Hold);
PARAMETER(NLL.Header_Status);
PARAMETER(NLL.Order_Type_Sales);
PARAMETER(NLL.Load_ID);
PARAMETER(NLL.Export_Status);
PARAMETER(NLL.Ship_To_City);
PARAMETER(NLL.Ship_To_State_Code);
PARAMETER(NLL.Order_in_Use);
PARAMETER(NLL.Order_Sequence_Number);
PARAMETER(NLL.Order_Secondary_Line_Seq);
PARAMETER(NLL.Item_Code);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(NLL.Ship_To_Customer);
PARAMETER(NLL.Order_Group_Code);
PARAMETER(NLL.Detail_Line_Status);
PARAMETER(NLL.Detail_Line_Status_Last);
PARAMETER(NLL.Billing_Detail_Cost_Dol);
PARAMETER(NLL.Billing_Detail_Gross_Dol);
PARAMETER(NLL.Billing_Detail_Net_Dol);
PARAMETER(NLL.Quantity_to_Substitute);
PARAMETER(NLL.Comment_Print_Acknowledge);
PARAMETER(NLL.Comment_Print_Inv_Cr_Memo);
PARAMETER(NLL.Comment_Print_Pick_Slip);
PARAMETER(NLL.Comment_Print_Ship_Doc);
PARAMETER(NLL.Extended_Amount);
PARAMETER(NLL.Market_Pricing_Date);
PARAMETER(NLL.Commodity_Market_Code);
PARAMETER(NLL.Date_Method_Code);
PARAMETER(NLL.Price_Method_Code);
PARAMETER(NLL.Price_Overage_Override);
PARAMETER(NLL.Contract_Number);
PARAMETER(NLL.Price_Status);
PARAMETER(NLL.Pricing_Date_Used);
PARAMETER(NLL.U_M_Base_Price);
PARAMETER(NLL.U_M_Ordered);
PARAMETER(NLL.Work_Confirm_Status);
PARAMETER(NLL.Work_Over_Short_Status);
PARAMETER(NLL.OD_Production_Plan_Sts);
PARAMETER(NLL.Order_Desc_Line_One);
PARAMETER(NLL.Order_Desc_Line_Two);
PARAMETER(NLL.Age_Code);
PARAMETER(NLL.Palletize);
PARAMETER(NLL.Slip_Sheet);
PARAMETER(NLL.Catch_Weight_Status);
PARAMETER(NLL.Price_Audit);
PARAMETER(NLL.Price_Audit_Reason_Code);
PARAMETER(NLL.Production_Date_Control);
PARAMETER(NLL.Rated_Freight);
PARAMETER(NLL.Quantity_Ordered);
PARAMETER(NLL.Weight_Ordered);
PARAMETER(NLL.Quantity_Scheduled);
PARAMETER(NLL.Weight_Scheduled);
PARAMETER(NLL.Quantity_Shipped_Total);
PARAMETER(NLL.Weight_Shipped_Total);
PARAMETER(NLL.Unit_Cost_Pricing_U_M);
PARAMETER(NLL.Unit_Cost_Per_Pound);
PARAMETER(NLL.Unit_Price);
PARAMETER(NLL.Unit_Price_Credit);
PARAMETER(NLL.Unit_Price_Ordered_U_M);
PARAMETER(NLL.Unit_Weight_Ordered_U_M);
PARAMETER(NLL.Tare_Weight_Total);
PARAMETER(NLL.Requested_Ship_Date);
PARAMETER(NLL.Scheduled_Ship_Date);
PARAMETER(NLL.Actual_Shipped_Date);
PARAMETER(NLL.Affect_Inventory_Status);
PARAMETER(NLL.Affect_Sales_Doll_Status);
PARAMETER(NLL.Affect_Sales_Pnds_Status);
PARAMETER(NLL.Item_Structure_Type_Code);
PARAMETER(NLL.Item_Structure_Group_Code);
PARAMETER(NLL.Item_Structure_Class_Code);
PARAMETER(NLL.Item_Level);
PARAMETER(NLL.Quality_Level);
PARAMETER(NLL.Pricing_Product_Class_Rep);
PARAMETER(NLL.Season_Product_Class_Repo);
PARAMETER(NLL.Date_of_Original_Entry);
PARAMETER(NLL.User_Profile_Name);
PARAMETER(NLL.Country_Code);
PARAMETER(NLL.Event_Code);
PARAMETER(NLL.Reason_Code);
PARAMETER(NLL.Sales_Route_Code);
PARAMETER(NLL.Modified_Flag);
PARAMETER(NLL.Substituted_Flag);
PARAMETER(NLL.OD_Schedule_Override_Sts);
PARAMETER(NLL.Invoice_Unit_Price);
PARAMETER(NLL.Invoice_Extended_Amt);
PARAMETER(NLL.Ham_Group_Number);
PARAMETER(NLL.OD_Adj_Type_Override);
PARAMETER(NLL.Affect_Trade_Fund);
PARAMETER(NLL.Affect_Commission);
PARAMETER(NLL.Affect_Pricing);
PARAMETER(NLL.Released_by_User_Sts_Y_N);
PARAMETER(NLL.Ord_TF_Exempt_Code);
PARAMETER(NLL.OD_Pallet_Type);
PARAMETER(NLL.Production_Warehouse);
PARAMETER(NLL.OD_Price_Type);
PARAMETER(NLL.Warehouse_Pallets_Loaded);
PARAMETER(NLL.Consumed_Item_Code);
PARAMETER(CTL.Deadline_Depart_Date_LH);
PARAMETER(NLL.OD_Price_Type_Ref_Num);
PARAMETER(NLL.OD_Firm_Date);
PARAMETER(CTL.Deadline_Depart_Time_LH);
PARAMETER(NLL.Price_Code);
PARAMETER(NLL.Maximum_Net_Weight);
PARAMETER(NLL.Substitution_Line_Number);
PARAMETER(NLL.Max_Qty_to_sched_per_day);
PARAMETER(NLL.Warehouse_Pallet_Tare);
PARAMETER(NLL.Warehouse_Avg_Pallet_Tare);
PARAMETER(NLL.OD_Item_Target_Price);
PARAMETER(NLL.OD_Estimated_Gross_Weight);
PARAMETER(NLL.OD_Maximum_Unit_Weight);
PARAMETER(NLL.Order_Gate_Final_Price);
PARAMETER(NLL.OD_Ceiling_Price);
PARAMETER(NLL.OD_Gate_Final_Price_Adj);
PARAMETER(NLL.OD_Weighted_Avg_Price);
PARAMETER(NLL.OD_Original_Ordered_Qty);
PARAMETER(NLL.OD_Cancel_Date);
PARAMETER(NLL.OD_Unused_Prc_7);
PARAMETER(NLL.OD_Unused_Prc_8);
PARAMETER(NLL.OD_MPR_Sent_to_USDA_Sts);
PARAMETER(NLL.OD_MPR_Prc_Ready_to_Send);
PARAMETER(NLL.OD_UnUsed_Price_Sts_3);
PARAMETER(NLL.Weight_Amount_Entered);
PARAMETER(NLL.Item_Age_Days);
PARAMETER(NLL.Production_Ovr_AgeDte_Fr);
PARAMETER(NLL.Production_Ovr_AgeDte_To);
PARAMETER(NLL.OD_Spot_Buy);
PARAMETER(NLL.OD_Clm_Full_Return_to_Plt);
PARAMETER(NLL.Order_Line_Error_Type);
PARAMETER(NLL.OD_Market_Begin_Date);
PARAMETER(NLL.OD_Market_Ending_Date);
PARAMETER(NLL.OD_Atch_to_Ord_ActShpDte);
PARAMETER(NLL.Requested_Delivery_Date);
PARAMETER(NLL.Requested_Delivery_Time);

//?Get Customer Type
EXECUTE FUNCTION(Rtv Co/Customer Type) TYPE(RTVOBJ) FILE(CAEOREP)               AC1758338;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(WRK.Type_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 // PAR.Type Code = CON.*BLANK
 PAR.Type_Code = *BLANK;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


//?Set Customer Type Desc Usr
CASE;

// IF WRK.Type Code is Inter Company
IF WRK.Type_Code = 'IC';

// CTL.Customer Type Desc Usr = CON.* Internal Company *
CTL.Customer_Type_Desc_Usr = * Internal Company *;

//?Set Customer Type Desc Usr
// IF WRK.Type Code is Inter-Comp Sales Agreemnt
IF WRK.Type_Code = 'IS';

// CTL.Customer Type Desc Usr = CON.* Inter-Co Sales Agrmnt *
CTL.Customer_Type_Desc_Usr = * Inter-Co Sales Agrmnt *;

//?Set Customer Type Desc Usr
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Customer Type Desc Usr = CON.* 3rd Party *
CTL.Customer_Type_Desc_Usr = * 3rd Party *;

ENDIF;

//?Hold customer's warehouse code (outside whse) in Par.usr warehouse code
CASE;

// IF PAR.Billing Activity Type is Warehouse Transfer
IF PAR.Billing_Activity_Type = '4';

EXECUTE FUNCTION(Rtv Default Warehouse  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1323141;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(PAR.USR_Warehouse_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?08/19/19 DN R15322-Allow Original Ordered Qty to be Change?
CASE;

// IF PAR.Block Order Flag is Firm Order
IF PAR.Block_Order_Flag = 'F';

// AND LCL.User Appl Profile Exist U is Yes
AND LCL.User_Appl_Profile_Exist_U = 'Y';

//?Allow for Edit of Original Ordered Qty.
// LCL.Edit Orig Ordered Qty U = CND.Yes
LCL.Edit_Orig_Ordered_Qty_U = 'Y';

//?08/19/19 DN R15322-Allow Original Ordered Qty to be Change?
// IF *OTHERWISE
IF *OTHERWISE;

//?Do NOT Allow for Edit of Original Ordered Qty.
// LCL.Edit Orig Ordered Qty U = CND.No
LCL.Edit_Orig_Ordered_Qty_U = 'N';

ENDIF;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

ENDIF;

EXECUTE FUNCTION(RTV Weight Ord & Sched RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1425280;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(CTL.Quantity_Ordered);
PARAMETER(CTL.Weight_Ordered);
PARAMETER(CTL.Weight_Scheduled);
{
 //?USER: Initialize routine

 // PAR.Weight Ordered = CON.*ZERO
 PAR.Weight_Ordered = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 // PAR.Quantity Ordered = CON.*ZERO
 PAR.Quantity_Ordered = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Avail/Alloc/Enter/Hold
 IF DB1.Detail_Line_Status = 'L'/'A'/'E'/'H';

 // PAR.Quantity Ordered = PAR.Quantity Ordered + DB1.Quantity Ordered
 PAR.Quantity_Ordered = PAR.Quantity_Ordered + DB1.Quantity_Ordered;

 // PAR.Weight Ordered = PAR.Weight Ordered + DB1.Weight Ordered
 PAR.Weight_Ordered = PAR.Weight_Ordered + DB1.Weight_Ordered;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + DB1.Weight Scheduled
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + DB1.Weight_Scheduled;

 ENDIF;

}


//?** PK0519 Accrual Exists  12/02/03**
//?** DLY029 Accrual Exists if one exists with Affect Inv Price=Y   06/19/07
EXECUTE FUNCTION(Val Mkt Accrual Exist RT) TYPE(RTVOBJ) FILE(OMHOREP)           AC1681638;
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Accrual Info       RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1681415;
 PARAMETER(DB1.Accrual_Code);
 PARAMETER(NLL.Accrual_Description);
 PARAMETER(NLL.Automatic_Accrual_Y_N);
 PARAMETER(NLL.Print_On_Invoice_Y_N);
 PARAMETER(NLL.Rate_Usage);
 PARAMETER(NLL.Add_on_Allowance);
 PARAMETER(LCL.Accrual_Type);
 PARAMETER(NLL.Sub_Ledger_Code);
 PARAMETER(NLL.Reverse_Accrual_Code);
 PARAMETER(NLL.UOM_Primary_Dft);
 PARAMETER(LCL.Affect_Invoice_Price);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  MOVE *ALL (To: PAR From: DB1);

 }

 //?New for DLY029   6/19/07 RMC
 CASE;

 // IF LCL.Affect Invoice Price is yes
 IF LCL.Affect_Invoice_Price = 'Y';

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

 ENDIF;

}


//?USER: Initialize subfile record (existing record)

//?OMS112C:  Use qty to substitute if this is a substitution.
//?Quantity ordered
CASE;

// IF DB1.Order Secondary Line Seq is GT 1
IF DB1.Order_Secondary_Line_Seq > 1;

// RCD.Qty Ordered USR = DB1.Quantity to Substitute
RCD.Qty_Ordered_USR = DB1.Quantity_to_Substitute;

//?Quantity ordered
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Qty Ordered USR = DB1.Quantity Ordered
RCD.Qty_Ordered_USR = DB1.Quantity_Ordered;

ENDIF;

//?SAZ 05/20/08 Move unit price to smaller field to display on screen.
// RCD.Unit Price (DSP)  USR = DB1.Unit Price
RCD.Unit_Price_DSP_USR = DB1.Unit_Price;

// RCD.Quantity 11.2 USR = RCD.Qty Ordered USR
RCD.Quantity_11_2_USR = RCD.Qty_Ordered_USR;

//?08/19/19 DN R15322-Set OD Original Ordered Qty U on Screen.
// RCD.OD Original Ordered Qty U = DB1.OD Original Ordered Qty
RCD.OD_Original_Ordered_Qty_U = DB1.OD_Original_Ordered_Qty;

// RCD.Scheduled Quantity = DB1.Quantity Scheduled
RCD.Scheduled_Quantity = DB1.Quantity_Scheduled;

// RCD.Weight Scheduled 7.1 = DB1.Weight Scheduled
RCD.Weight_Scheduled_7_1 = DB1.Weight_Scheduled;

// RCD.USR Warehouse Code = DB1.Warehouse Code
RCD.USR_Warehouse_Code = DB1.Warehouse_Code;

// LCL.Warehouse Code = DB1.Warehouse Code
LCL.Warehouse_Code = DB1.Warehouse_Code;

// RCD.USR Display field = PAR.USR Display field
RCD.USR_Display_field = PAR.USR_Display_field;

// RCD.USR Display 1 = PAR.Allow Mult Whse to Order
RCD.USR_Display_1 = PAR.Allow_Mult_Whse_to_Order;

// RCD.USR Display 2 = PAR.Allow Multi Export On Ord
RCD.USR_Display_2 = PAR.Allow_Multi_Export_On_Ord;

// LCL.USR Country Code = RCD.Country Code
LCL.USR_Country_Code = RCD.Country_Code;

//?Set to not allow updates if line is cancelled
CASE;

// IF DB1.Detail Line Status is Cancelled
IF DB1.Detail_Line_Status = 'X';

// RCD.USR Display field = CND.no
RCD.USR_Display_field = 'N';

// RCD.USR Display 1 = CND.No
RCD.USR_Display_1 = 'N';

// RCD.USR Display 2 = CND.No
RCD.USR_Display_2 = 'N';

ENDIF;

EXECUTE FUNCTION(RTV Primal Grp Code   RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1854737;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Primal_Group_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?CALC: Subfile control function fields

CASE;

// IF CTL.*CMD key is *Option Toggle
IF CTL.*CMD_key = '08';

CASE;

// IF PAR.USR Display field is yes
IF PAR.USR_Display_field = 'Y';

// PAR.USR Display field = CND.no
PAR.USR_Display_field = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Display field = CND.yes
PAR.USR_Display_field = 'Y';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Validate subfile record fields

//?E2393 RMC 1/09/13 ALLOW 0 QTY FOR BLOCK/TRANSFER ORDERS
CASE;

// IF RCD.Qty Ordered USR is Equal to Zero
IF RCD.Qty_Ordered_USR = *ZERO;

//?Allow for TR Block order only
CASE;

// IF PAR.Order Type - Sales is Transfer Order
IF PAR.Order_Type_Sales = 'TR';

// AND PAR.Block Order Flag is Block Order
AND PAR.Block_Order_Flag = 'B';

//?E2393 allow for TR block order only
//?Allow for TR Block order only
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Quantity is required.'
ERROR(USR0394);
MSGPARM(RCD.Qty_Ordered_USR);

ENDIF;

ENDIF;

//?If MAN price method then do not change the price status
CASE;

// IF RCD.Price Method Code is Manual
IF RCD.Price_Method_Code = 'MAN';

// WRK.Price Status USR = RCD.Price Status
WRK.Price_Status_USR = RCD.Price_Status;

ENDIF;

//?fill file fields with quantity
CASE;

// IF RCD.Order Secondary Line Seq is GT 1
IF RCD.Order_Secondary_Line_Seq > 1;

// RCD.Quantity to Substitute = RCD.Qty Ordered USR
RCD.Quantity_to_Substitute = RCD.Qty_Ordered_USR;

//?fill file fields with quantity
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Quantity Ordered = RCD.Qty Ordered USR
RCD.Quantity_Ordered = RCD.Qty_Ordered_USR;

ENDIF;

// RCD.Quantity 11.2 USR = RCD.Qty Ordered USR
RCD.Quantity_11_2_USR = RCD.Qty_Ordered_USR;

//?08/19/19 DN R15322-Move Screen Original Ordered Qty to RCD Before Update.
// RCD.OD Original Ordered Qty = RCD.OD Original Ordered Qty U
RCD.OD_Original_Ordered_Qty = RCD.OD_Original_Ordered_Qty_U;

//?Seq #
CASE;

// IF RCD.Order Sequence Number is Equal to zero
IF RCD.Order_Sequence_Number = *ZERO;

// RCD.Order Sequence Number = WRK.Order Sequence Number + CON.1
RCD.Order_Sequence_Number = WRK.Order_Sequence_Number + 1;

// WRK.Order Sequence Number = RCD.Order Sequence Number
WRK.Order_Sequence_Number = RCD.Order_Sequence_Number;

ENDIF;

//?Validate entered fields and load data to output record
//?Fields from Item Master Checking
CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

// IF *OTHERWISE
IF *OTHERWISE;

//?Warehouse edits
CASE;

// IF PAR.Allow Mult Whse to Order is yes
IF PAR.Allow_Mult_Whse_to_Order = 'Y';

EXECUTE FUNCTION(RTV Actv Descr, Ctrl   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304411;
PARAMETER(RCD.Warehouse_Code);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Trans_Contol_AS400_Plant);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Warehouse code from Item master
CASE;

// IF RCD.Warehouse Code is Warehouse Code Blank
IF RCD.Warehouse_Code = *BLANK;

// RCD.Warehouse Code = WRK.Warehouse Code
RCD.Warehouse_Code = WRK.Warehouse_Code;

ENDIF;

//?Error condition warehouse not found/control error
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Warehouse Codes not found.'
ERROR(USR0007);
MSGPARM(RCD.Warehouse_Code);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

//?Error condition warehouse not found/control error
// IF WRK.Trans Contol AS400/Plant NE PAR.Trans Contol AS400/Plant
IF WRK.Trans_Contol_AS400_Plant <> PAR.Trans_Contol_AS400_Plant;

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

// Send error message - 'Warehouse Control &2 not allowed on order with Plant/AS400 = &3.'
ERROR(USR1920);
MSGPARM(RCD.Warehouse_Code);
MSGPARM(WRK.Trans_Contol_AS400_Plant);
MSGPARM(PAR.Trans_Contol_AS400_Plant);

//?Error condition warehouse not found/control error
// IF PAR.Billing Activity Type is Warehouse Transfer
IF PAR.Billing_Activity_Type = '4';

// AND RCD.Warehouse Code EQ PAR.USR Warehouse Code
AND RCD.Warehouse_Code = PAR.USR_Warehouse_Code;

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

// Send error message - 'From and To warehouse must be different for transfer.'
ERROR(USR0433);
MSGPARM(RCD.Warehouse_Code);

ENDIF;

ENDIF;

// Call program VAL Itm Bal. Exists    XF.
CALL PROGRAM(VAL Itm Bal. Exists    XF) ('PDCUXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(WRK.Error_Status);

//?Error if no item balance
CASE;

// IF WRK.Error Status is yes
IF WRK.Error_Status = 'Y';

// Send error message - 'Item Balance not found.'
ERROR(USR0328);
MSGPARM(RCD.Company_Number);
MSGPARM(RCD.Item_Code);
MSGPARM(RCD.Warehouse_Code);

ENDIF;

// RCD.Weight Ordered = RCD.Quantity Ordered * RCD.Unit Weight Ordered U/M *
RCD.Weight_Ordered = RCD.Quantity_Ordered * RCD.Unit_Weight_Ordered_U_M;

//?Weight ordered/subbed
CASE;

// IF RCD.Order Secondary Line Seq is GT 1
IF RCD.Order_Secondary_Line_Seq > 1;

// RCD.Weight 11.2 USR = RCD.Quantity 11.2 USR * RCD.Unit Weight Ordered U/M *
RCD.Weight_11_2_USR = RCD.Quantity_11_2_USR * RCD.Unit_Weight_Ordered_U_M;

//?Weight ordered/subbed
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Weight 11.2 USR = RCD.Weight Ordered
RCD.Weight_11_2_USR = RCD.Weight_Ordered;

ENDIF;

CASE;

// IF RCD.Price Code is Entered
IF RCD.Price_Code > *ZERO;

EXECUTE FUNCTION(Rtv Max Wt and price  RT) TYPE(RTVOBJ) FILE(POC7REP)           AC1677837;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Price_Code);
PARAMETER(RCD.Item_Code);
PARAMETER(LCL.Maximum_Contract_Units);
PARAMETER(LCL.Customer_Price_UM_Prc);
PARAMETER(LCL.Commodity_Market_Code);
PARAMETER(LCL.Price_Method_Code);
PARAMETER(LCL.Date_Method_Code);
PARAMETER(NLL.Contract_Unit_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


//?Price Code /  max wgt validations             PK0519 12/09/03
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

// Send error message - 'Price Code &1 not found for Item &2'
ERROR(USR3319);
MSGPARM(RCD.Price_Code);
MSGPARM(RCD.Item_Code);

//?Price Code /  max wgt validations             PK0519 12/09/03
// IF *OTHERWISE
IF *OTHERWISE;

//?Sum weights shipped/ordered for ship to /price code
//?DLY029: Replaced with Internal Function & Added new UOMs
EXECUTE FUNCTION(Clc Sum Ship/Ord Unit IF) TYPE(EXCINTFUN)                      AC1829994;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Commodity_Market_Code);
PARAMETER(RCD.Date_Method_Code);
PARAMETER(RCD.Price_Method_Code);
PARAMETER(RCD.Price_Overage_Override);
PARAMETER(RCD.U_M_Base_Price);
PARAMETER(RCD.Quantity_Ordered);
PARAMETER(RCD.Unit_Weight_Ordered_U_M);
PARAMETER(RCD.Price_Code);
PARAMETER(RCD.OD_Ceiling_Price);
PARAMETER(WRK.Error_Status);
PARAMETER(PAR.Price_Method_Type);
PARAMETER(LCL.PMH_Price_Type);
{
 //?Execute internal function

 // PAR.Error Status = CND.no
 PAR.Error_Status = 'N';

 // LCL.Weight Ordered = PAR.Quantity Ordered * PAR.Unit Weight Ordered U/M *
 LCL.Weight_Ordered = PAR.Quantity_Ordered * PAR.Unit_Weight_Ordered_U_M;

 // Call program CLC Sum Ship/Ord Unit XF.
 CALL PROGRAM(CLC Sum Ship/Ord Unit XF) ('PPA6XFR');
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Price_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Total_Weight_Ordered_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Total_Quantity_Ordered);

 // PAR.Total Weight Ordered USR = PAR.Total Weight Ordered USR + LCL.Weight Ordered
 PAR.Total_Weight_Ordered_USR = PAR.Total_Weight_Ordered_USR + LCL.Weight_Ordered;

 // PAR.Total Quantity Ordered = PAR.Total Quantity Ordered + PAR.Quantity Ordered
 PAR.Total_Quantity_Ordered = PAR.Total_Quantity_Ordered + PAR.Quantity_Ordered;

 //?5/13/10 SAZ P205-Add parm for Max Unit Type;rtv Contract Unit Type
 // Call program Rtv Cust Prc hdr/dtl  XF.
 CALL PROGRAM(Rtv Cust Prc hdr/dtl  XF) ('PPA7XFR');
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Price_Code);
 PARAMETER(WRK.Price_Start_Date);
 PARAMETER(WRK.Price_End_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Maximum_Contract_Units);
 PARAMETER(PAR.Customer_Price_UM_Prc);
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(LCL.Price_Method_Code);
 PARAMETER(PAR.Date_Method_Code);
 PARAMETER(PAR.Contract_Unit_Type);

 // PAR.Price Method Code = LCL.Price Method Code
 PAR.Price_Method_Code = LCL.Price_Method_Code;

 EXECUTE FUNCTION(RTV PrcMthTyp/PrcTyp  RT) TYPE(RTVOBJ) FILE(PDIHREP)           AC1997170;
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.Price_Method_Code);
 PARAMETER(PAR.Price_Method_Type);
 PARAMETER(PAR.PMH_Price_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?5/13/10 SAZ P205-Use Contract Unit Type to check Qty or Weight-Lbs
 //?Use Contract Unit Type to check Qty or Weight-Lbs
 //?VAL: Total Weight and Quantity w/Maximum
 CASE;

 // IF PAR.Contract Unit Type is Weight-LB
 IF PAR.Contract_Unit_Type = 'W';

 CASE;

 // IF PAR.Total Weight Ordered USR GT PAR.Maximum Contract Units
 IF PAR.Total_Weight_Ordered_USR > PAR.Maximum_Contract_Units;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // LCL.Weight Allocated USR = PAR.Total Weight Ordered USR - PAR.Maximum Contract Units
 LCL.Weight_Allocated_USR = PAR.Total_Weight_Ordered_USR - PAR.Maximum_Contract_Units;

 // Send error message - 'Max Units &3 for Item &4/Price Code &1 exceeded by &2.'
 ERROR(USR3320);
 MSGPARM(PAR.Price_Code);
 MSGPARM(LCL.Weight_Allocated_USR);
 MSGPARM(PAR.Maximum_Contract_Units);
 MSGPARM(PAR.Item_Code);

 ENDIF;

 //?VAL: Total Weight and Quantity w/Maximum
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?If Contract Unit type = Quantity
 CASE;

 // IF PAR.Total Quantity Ordered GT PAR.Maximum Contract Units
 IF PAR.Total_Quantity_Ordered > PAR.Maximum_Contract_Units;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // LCL.Weight Allocated USR = PAR.Total Quantity Ordered - PAR.Maximum Contract Units
 LCL.Weight_Allocated_USR = PAR.Total_Quantity_Ordered - PAR.Maximum_Contract_Units;

 // Send error message - 'Max Units &3 for Item &4/Price Code &1 exceeded by &2.'
 ERROR(USR3320);
 MSGPARM(PAR.Price_Code);
 MSGPARM(LCL.Weight_Allocated_USR);
 MSGPARM(PAR.Maximum_Contract_Units);
 MSGPARM(PAR.Item_Code);

 ENDIF;

 ENDIF;

 //?Original code
 //?OUT: No Errors
 CASE;

 // IF PAR.Error Status is no
 IF PAR.Error_Status = 'N';

 // PAR.Price Overage Override = PAR.Customer Price /UM Prc
 PAR.Price_Overage_Override = PAR.Customer_Price_UM_Prc;

 CASE;

 // IF PAR.PMH Price Type is Invoice Price
 IF PAR.PMH_Price_Type = 'I';

 // PAR.Price Overage Override = PAR.Customer Price /UM Prc
 PAR.Price_Overage_Override = PAR.Customer_Price_UM_Prc;

 // PAR.OD Ceiling Price = CON.*ZERO
 PAR.OD_Ceiling_Price = *ZERO;

 // IF PAR.PMH Price Type is Ceiling Price
 IF PAR.PMH_Price_Type = 'C';

 // PAR.Price Overage Override = CON.*ZERO
 PAR.Price_Overage_Override = *ZERO;

 // PAR.OD Ceiling Price = PAR.Customer Price /UM Prc
 PAR.OD_Ceiling_Price = PAR.Customer_Price_UM_Prc;

 ENDIF;

 ENDIF;

}


ENDIF;

ENDIF;

ENDIF;

//?Process no errors
CASE;

// IF WRK.Error Status is yes
IF WRK.Error_Status = 'Y';

//?Process no errors
// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

//?NOTE:  If this program changes to have Confirm, put this after update
// Call program UPD Avail-To-Sell  ORD XF.
CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);
PARAMETER('OD');
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);

//?*-------------------------------------------------*
//?Process no errors
// IF *OTHERWISE
IF *OTHERWISE;

//?Update allocations
CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

// OR RCD.Detail Line Status is Cancelled
OR RCD.Detail_Line_Status = 'X';

//?RMC 8/21/19 added check for if line is already cancelled-dont allocate
//?Update allocations
// IF *OTHERWISE
IF *OTHERWISE;

//?NOTE:  If this program changes to have Confirm, put this after update
//?FP1054-commented these...the new CASE will deallocate from the original
//?   warehouse and qty AND reallocate from the new whse,qty
//?Allocate or deallocate changes - fp1054 for qty,whse deallc all orig ord
CASE;

// IF RCD.Quantity 11.2 USR NE RCD.Quantity Scheduled
IF ( RCD.Quantity_11_2_USR <> RCD.Quantity_Scheduled;

// OR RCD.Warehouse Code NE RCD.USR Warehouse Code
OR RCD.Warehouse_Code <> RCD.USR_Warehouse_Code );

// AND PGM.*Program mode is *CHANGE
AND PGM.*Program_mode = 'CHG';

// Call program UPD Avail-To-Sell  ORD XF.
CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.USR_Warehouse_Code);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);
PARAMETER('OD');
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);

// Call program UPD Avail-To-Sell  ORD XF.
CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.Quantity_11_2_USR);
PARAMETER(RCD.Weight_11_2_USR);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);
PARAMETER('OA');
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);

//?Allocate or deallocate changes - fp1054 for qty,whse deallc all orig ord
// IF *OTHERWISE
IF *OTHERWISE;

//?   no further action; quantity ordered = quantity allocated
ENDIF;

// RCD.Extended Amount = RCD.Quantity Ordered * RCD.Unit Price Ordered U/M *Rounded
RCD.Extended_Amount = RCD.Quantity_Ordered * RCD.Unit_Price_Ordered_U_M 'H';

ENDIF;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

//?PK0034
// LCL.Warehouse Code = RCD.Warehouse Code
LCL.Warehouse_Code = RCD.Warehouse_Code;

//?USER: Validate subfile record relations

//?Subfile options
CASE;

// IF RCD.*SFLSEL is *Comments
IF RCD.*SFLSEL = '8'/'8';

// Call program EDT Detail Comments    EF.
CALL PROGRAM(EDT Detail Comments    EF) ('PDDWEFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Ship_To_Name_DRV);
PARAMETER(RCD.Requested_Ship_Date);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?Subfile options
// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

// Call program DSP Order Entry Detail D1.
CALL PROGRAM(DSP Order Entry Detail D1) ('PDPYD1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER('O/P');

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(CHG PD Order Detail    CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1425286;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Order_Group_Code);
PARAMETER(RCD.Detail_Line_Status);
PARAMETER(RCD.Detail_Line_Status_Last);
PARAMETER(RCD.Billing_Detail_Cost_Dol);
PARAMETER(RCD.Billing_Detail_Gross_Dol);
PARAMETER(RCD.Billing_Detail_Net_Dol);
PARAMETER(RCD.Quantity_to_Substitute);
PARAMETER(RCD.Comment_Print_Acknowledge);
PARAMETER(RCD.Comment_Print_Inv_Cr_Memo);
PARAMETER(RCD.Comment_Print_Pick_Slip);
PARAMETER(RCD.Comment_Print_Ship_Doc);
PARAMETER(RCD.Extended_Amount);
PARAMETER(RCD.Market_Pricing_Date);
PARAMETER(RCD.Commodity_Market_Code);
PARAMETER(RCD.Date_Method_Code);
PARAMETER(RCD.Price_Method_Code);
PARAMETER(RCD.Price_Overage_Override);
PARAMETER(RCD.Contract_Number);
PARAMETER(RCD.Price_Status);
PARAMETER(RCD.Pricing_Date_Used);
PARAMETER(RCD.U_M_Base_Price);
PARAMETER(RCD.U_M_Ordered);
PARAMETER(RCD.Work_Confirm_Status);
PARAMETER(RCD.Work_Over_Short_Status);
PARAMETER(RCD.OD_Production_Plan_Sts);
PARAMETER(RCD.Order_Desc_Line_One);
PARAMETER(RCD.Order_Desc_Line_Two);
PARAMETER(RCD.Age_Code);
PARAMETER(RCD.Palletize);
PARAMETER(RCD.Slip_Sheet);
PARAMETER(RCD.Catch_Weight_Status);
PARAMETER(RCD.Price_Audit);
PARAMETER(RCD.Price_Audit_Reason_Code);
PARAMETER(RCD.Production_Date_Control);
PARAMETER(RCD.Rated_Freight);
PARAMETER(RCD.Quantity_Ordered);
PARAMETER(RCD.Weight_Ordered);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);
PARAMETER(RCD.Quantity_Shipped_Total);
PARAMETER(RCD.Weight_Shipped_Total);
PARAMETER(RCD.Unit_Cost_Pricing_U_M);
PARAMETER(RCD.Unit_Cost_Per_Pound);
PARAMETER(RCD.Unit_Price);
PARAMETER(RCD.Unit_Price_Credit);
PARAMETER(RCD.Unit_Price_Ordered_U_M);
PARAMETER(RCD.Unit_Weight_Ordered_U_M);
PARAMETER(RCD.Tare_Weight_Total);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Affect_Inventory_Status);
PARAMETER(RCD.Affect_Sales_Doll_Status);
PARAMETER(RCD.Affect_Sales_Pnds_Status);
PARAMETER(RCD.Item_Structure_Type_Code);
PARAMETER(RCD.Item_Structure_Group_Code);
PARAMETER(RCD.Item_Structure_Class_Code);
PARAMETER(RCD.Item_Level);
PARAMETER(RCD.Quality_Level);
PARAMETER(RCD.Pricing_Product_Class_Rep);
PARAMETER(RCD.Season_Product_Class_Repo);
PARAMETER(RCD.Date_of_Original_Entry);
PARAMETER(RCD.User_Profile_Name);
PARAMETER(RCD.Country_Code);
PARAMETER(RCD.Event_Code);
PARAMETER(RCD.Reason_Code);
PARAMETER(RCD.Sales_Route_Code);
PARAMETER(RCD.Modified_Flag);
PARAMETER(RCD.Substituted_Flag);
PARAMETER(RCD.OD_Schedule_Override_Sts);
PARAMETER(RCD.Invoice_Unit_Price);
PARAMETER(RCD.Invoice_Extended_Amt);
PARAMETER(RCD.Ham_Group_Number);
PARAMETER(RCD.OD_Adj_Type_Override);
PARAMETER(RCD.Affect_Trade_Fund);
PARAMETER(RCD.Affect_Commission);
PARAMETER(RCD.Affect_Pricing);
PARAMETER(RCD.Released_by_User_Sts_Y_N);
PARAMETER(RCD.Ord_TF_Exempt_Code);
PARAMETER(RCD.OD_Pallet_Type);
PARAMETER(RCD.Production_Warehouse);
PARAMETER(RCD.OD_Price_Type);
PARAMETER(RCD.Warehouse_Pallets_Loaded);
PARAMETER(RCD.Consumed_Item_Code);
PARAMETER(RCD.Deadline_Depart_Date_LH);
PARAMETER(RCD.OD_Price_Type_Ref_Num);
PARAMETER(RCD.OD_Firm_Date);
PARAMETER(RCD.Deadline_Depart_Time_LH);
PARAMETER(RCD.Price_Code);
PARAMETER(RCD.Maximum_Net_Weight);
PARAMETER(RCD.Substitution_Line_Number);
PARAMETER(RCD.Max_Qty_to_sched_per_day);
PARAMETER(RCD.Warehouse_Pallet_Tare);
PARAMETER(RCD.Warehouse_Avg_Pallet_Tare);
PARAMETER(RCD.OD_Item_Target_Price);
PARAMETER(RCD.OD_Estimated_Gross_Weight);
PARAMETER(RCD.OD_Maximum_Unit_Weight);
PARAMETER(RCD.Order_Gate_Final_Price);
PARAMETER(RCD.OD_Ceiling_Price);
PARAMETER(RCD.OD_Gate_Final_Price_Adj);
PARAMETER(RCD.OD_Weighted_Avg_Price);
PARAMETER(RCD.OD_Original_Ordered_Qty);
PARAMETER(RCD.OD_Cancel_Date);
PARAMETER(RCD.OD_Unused_Prc_7);
PARAMETER(RCD.OD_Unused_Prc_8);
PARAMETER(RCD.OD_MPR_Sent_to_USDA_Sts);
PARAMETER(RCD.OD_MPR_Prc_Ready_to_Send);
PARAMETER(RCD.OD_UnUsed_Price_Sts_3);
PARAMETER(RCD.Weight_Amount_Entered);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);
PARAMETER(RCD.OD_Spot_Buy);
PARAMETER(RCD.OD_Clm_Full_Return_to_Plt);
PARAMETER(RCD.Order_Line_Error_Type);
PARAMETER(RCD.OD_Market_Begin_Date);
PARAMETER(RCD.OD_Market_Ending_Date);
PARAMETER(RCD.OD_Atch_to_Ord_ActShpDte);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
{
 //?USER: Processing after Data read

 //?E2247 RMC 10/03/12 Crt chg log if dtl has been sent to MPR USDA
 CASE;

 // IF DB1.OD MPR Sent to USDA Sts is yes
 IF DB1.OD_MPR_Sent_to_USDA_Sts = 'Y';

 //?If price type changes, then create type: ORDPRT
 CASE;

 // IF DB1.OD Price Type NE PAR.OD Price Type
 IF DB1.OD_Price_Type <> PAR.OD_Price_Type;

 //?change log prior has seq in pos 1-3, price type 5-7: '001 NEG     '
 // LCL.Text 3 Length USR = DB1.Order Sequence Number
 LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

 // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,DB1.OD Price Type,CON.1)
 LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + DB1.OD_Price_Type (1);

 // LCL.Change Log New Value = PAR.OD Price Type
 LCL.Change_Log_New_Value = PAR.OD_Price_Type;

 // Call program CRT Load/OrderChg n/ld XF.
 CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
 PARAMETER(*ZERO);
 PARAMETER('ORDPRT');
 PARAMETER('SLS');
 PARAMETER(LCL.Change_Log_Prior_Value);
 PARAMETER(LCL.Change_Log_New_Value);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);

 ENDIF;

 ENDIF;

 //?If not the transfer order nbr 9999999 -> crt chg logs
 CASE;

 // IF DB1.Order Number is ne 9999999
 IF DB1.Order_Number <> 9999999;

 //?If qty changes, then create type: ORDWGT & ORDQTY ->ALWAYS 6/14/13
 CASE;

 // IF DB1.Quantity Ordered NE PAR.Quantity Ordered
 IF DB1.Quantity_Ordered <> PAR.Quantity_Ordered;

 // OR PAR.Detail Line Status is Cancelled
 OR PAR.Detail_Line_Status = 'X';

 //?(do this off of qty, because wgt can change often since unit wgt changes)
 //?change log prior has seq in pos 1-3, weight in 5-11: '001 0000nnn'
 // LCL.Text 3 Length USR = DB1.Order Sequence Number
 LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

 // LCL.Weight Beg Inv usr = DB1.Weight Ordered
 LCL.Weight_Beg_Inv_usr = DB1.Weight_Ordered;

 // LCL.Text USR 7 = LCL.Weight Beg Inv usr
 LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

 // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
 LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

 // LCL.Weight Beg Inv usr = PAR.Weight Ordered
 LCL.Weight_Beg_Inv_usr = PAR.Weight_Ordered;

 //?WI642-For cancelled item line new weight is zero for log only.
 CASE;

 // IF PAR.Detail Line Status is Cancelled
 IF PAR.Detail_Line_Status = 'X';

 // LCL.Weight Beg Inv usr = CND.Not Entered
 LCL.Weight_Beg_Inv_usr = *ZERO;

 ENDIF;

 // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
 LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

 // Call program CRT Load/OrderChg n/ld XF.
 CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
 PARAMETER(*ZERO);
 PARAMETER('ORDWGT');
 PARAMETER('SLS');
 PARAMETER(LCL.Change_Log_Prior_Value);
 PARAMETER(LCL.Change_Log_New_Value);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);

 // LCL.Weight Beg Inv usr = DB1.Quantity Ordered
 LCL.Weight_Beg_Inv_usr = DB1.Quantity_Ordered;

 // LCL.Text USR 7 = LCL.Weight Beg Inv usr
 LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

 // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
 LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

 // LCL.Weight Beg Inv usr = PAR.Quantity Ordered
 LCL.Weight_Beg_Inv_usr = PAR.Quantity_Ordered;

 //?WI642-For cancelled item line new quantity is zero for log only.
 CASE;

 // IF PAR.Detail Line Status is Cancelled
 IF PAR.Detail_Line_Status = 'X';

 // LCL.Weight Beg Inv usr = CND.Not Entered
 LCL.Weight_Beg_Inv_usr = *ZERO;

 ENDIF;

 // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
 LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

 // Call program CRT Load/OrderChg n/ld XF.
 CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
 PARAMETER(*ZERO);
 PARAMETER('ORDQTY');
 PARAMETER('SLS');
 PARAMETER(LCL.Change_Log_Prior_Value);
 PARAMETER(LCL.Change_Log_New_Value);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);

 ENDIF;

 ENDIF;

 //?USER: Processing before Data update

 // DB1.Age Code = CND.Blank
 DB1.Age_Code = *BLANK;

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 EXECUTE FUNCTION(Rtv Item Typ/Grp/Cls  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1298334;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Item_Structure_Class_Code);
 PARAMETER(DB1.Item_Structure_Group_Code);
 PARAMETER(DB1.Item_Structure_Type_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Production_Warehouse);
 PARAMETER(NLL.Accounting_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Calc Gross Weight from tares...    copied from Dsp Gross Wgt function
 DO;

 // Call program Rtv Tare Weight        XF.
 CALL PROGRAM(Rtv Tare Weight        XF) ('PBI3XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.Misc_Tare_Weight);

 //?wi464 change
 // Call program RTV Itm BxID & Tares  XF.
 CALL PROGRAM(RTV Itm BxID & Tares  XF) ('PBI4XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.Box_Weight);
 PARAMETER(LCL.Number_Cases_On_A_Pallet);
 PARAMETER(LCL.Pallet_Tare_Weight);
 PARAMETER(LCL.Box_iD);
 PARAMETER(DB1.OD_Pallet_Type);

 // LCL.Total Tare USR = LCL.Box Weight + LCL.Misc Tare Weight
 LCL.Total_Tare_USR = LCL.Box_Weight + LCL.Misc_Tare_Weight;

 // Box + Misc Tare
 LCL.Weight_1_1_U = ( LCL.Box_Weight + LCL.Misc_Tare_Weight ) * DB1.Quantity_Ordered 'H';

 //?Pallet Tare
 CASE;

 // IF DB1.Palletize is yes
 IF DB1.Palletize = 'Y';

 CASE;

 // IF LCL.Number Cases On A Pallet is GT Zero
 IF LCL.Number_Cases_On_A_Pallet > *ZERO;

 // Pallet Weight
 LCL.Weight_1_2_U = ( DB1.Quantity_Ordered / LCL.Number_Cases_On_A_Pallet 'H' )
 * LCL.Pallet_Tare_Weight 'H';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Weight 1.2             .U = CON.*ZERO
 LCL.Weight_1_2_U = *ZERO;

 ENDIF;

 //?Pallet Tare
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Weight 1.2             .U = CON.*ZERO
 LCL.Weight_1_2_U = *ZERO;

 ENDIF;

 // Estimated Gross
 DB1.OD_Estimated_Gross_Weight = ( DB1.Weight_Ordered + LCL.Weight_1_1_U )
 + LCL.Weight_1_2_U;

 //?E00196 RMC 8/24/12 chk pfs interface SHPTRN too
 ENDDO;

}


//?USER: Extra processing after DBF update

CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

//?10/20/05 PKD Always delete the line item.
//?12/21/05 PKD Changed to not delete cancelled items.   Caused issues
//?             with Carlisle not getting the deletes. Commented out.
EXECUTE FUNCTION(Rtv & Dlt for Cncl DtlRT) TYPE(RTVOBJ) FILE(PDMSREP)           AC1612172;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Del Exp Doc Order Dtl  DL) TYPE(DLTOBJ) FILE(PDMSREP)          AC1524037;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.ED_Export_Document_Type);
 PARAMETER(DB1.Country_Code);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
}


//?Delete line or change line status
CASE;

// IF RCD.Detail Line Status is Entered
IF RCD.Detail_Line_Status = 'E';

EXECUTE FUNCTION(DLT PD Order Detail    DL) TYPE(DLTOBJ) FILE(OPBGWKP)          AC1204566;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);

EXECUTE FUNCTION(Rtv & Dlt for Cncl DtlRT) TYPE(RTVOBJ) FILE(PDMSREP)           AC1612172;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Del Exp Doc Order Dtl  DL) TYPE(DLTOBJ) FILE(PDMSREP)          AC1524037;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.ED_Export_Document_Type);
 PARAMETER(DB1.Country_Code);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
}


//?Delete line or change line status
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Detail Line Status Last = RCD.Detail Line Status
RCD.Detail_Line_Status_Last = RCD.Detail_Line_Status;

// RCD.Detail Line Status = CND.Cancelled
RCD.Detail_Line_Status = 'X';

EXECUTE FUNCTION(CHG Detail Status      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1425418;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Detail_Line_Status);
PARAMETER(RCD.Detail_Line_Status_Last);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(Rtv & Dlt for Cncl DtlRT) TYPE(RTVOBJ) FILE(PDMSREP)           AC1612172;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Del Exp Doc Order Dtl  DL) TYPE(DLTOBJ) FILE(PDMSREP)          AC1524037;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.ED_Export_Document_Type);
 PARAMETER(DB1.Country_Code);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
}


ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.USR Country Code = RCD.Country Code
LCL.USR_Country_Code = RCD.Country_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process command keys

// WRK.Status - Y or N = CND.yes
WRK.Status_Y_or_N = 'Y';

//?F15=Order Header
CASE;

// IF CTL.*CMD key is *Order Header
IF CTL.*CMD_key = '15';

EXECUTE FUNCTION(RTV Weight Ord & Sched RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1425280;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);
PARAMETER(CTL.Quantity_Ordered);
PARAMETER(CTL.Weight_Ordered);
PARAMETER(PAR.Order_Weight_Total);
{
 //?USER: Initialize routine

 // PAR.Weight Ordered = CON.*ZERO
 PAR.Weight_Ordered = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 // PAR.Quantity Ordered = CON.*ZERO
 PAR.Quantity_Ordered = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Avail/Alloc/Enter/Hold
 IF DB1.Detail_Line_Status = 'L'/'A'/'E'/'H';

 // PAR.Quantity Ordered = PAR.Quantity Ordered + DB1.Quantity Ordered
 PAR.Quantity_Ordered = PAR.Quantity_Ordered + DB1.Quantity_Ordered;

 // PAR.Weight Ordered = PAR.Weight Ordered + DB1.Weight Ordered
 PAR.Weight_Ordered = PAR.Weight_Ordered + DB1.Weight_Ordered;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + DB1.Weight Scheduled
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + DB1.Weight_Scheduled;

 ENDIF;

}


EXECUTE FUNCTION(CHG Order Value,Wgt    CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1403601;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(PAR.Order_Value_Total);
PARAMETER(PAR.Order_Weight_Total);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


CASE;

// IF PAR.Load ID is NE Blank
IF PAR.Load_ID <> *ZERO;

// Call program RTV UPD Ld Abs.Frt/Wgt XF.
CALL PROGRAM(RTV UPD Ld Abs.Frt/Wgt XF) ('PDE0XFR');
PARAMETER(PAR.Load_ID);
PARAMETER(WRK.Total_Load_Order_Weight);
PARAMETER(WRK.Total_Freight);

ENDIF;

// PAR.Next Program Name = CON.PMGFE2R
PAR.Next_Program_Name = 'PMGFE2R';

RETURN;

ENDIF;

//?F18=Details
CASE;

// IF CTL.*CMD key is *Order Details
IF CTL.*CMD_key = '18';

// PAR.Next Program Name = CON.PDN9EFR
PAR.Next_Program_Name = 'PDN9EFR';

PGM.*Return_code = *BLANK;

RETURN;

ENDIF;

//?F16=Product Availability   Disable if Live w/TPM      E4119O
CASE;

// IF CTL.*CMD key is *Product Availability
IF CTL.*CMD_key = '16';

// Call program WW Product Availablty DF.
CALL PROGRAM(WW Product Availablty DF) ('PDFPDFR');
PARAMETER(CTL.Company_Number);
PARAMETER(LCL.Warehouse_Code);

ENDIF;

//?F20=Post
CASE;

// IF CTL.*CMD key is *Post/Update Open Order
IF CTL.*CMD_key = '20';

// WRK.Print (Yes/No) USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

// WRK.Status Flag 2  Y/N = CND.Yes
WRK.Status_Flag_2_Y_N = 'Y';

// WRK.Status Flag 3  Y/N = CND.No
WRK.Status_Flag_3_Y_N = 'N';

// WRK.Status Flag 4  Y/N = CND.no
WRK.Status_Flag_4_Y_N = 'N';

// WRK.Status Flag 5  Y/N = CND.Yes
WRK.Status_Flag_5_Y_N = 'Y';

// WRK.Status Flag 7  Y/N = CND.No
WRK.Status_Flag_7_Y_N = 'N';

//?** 03/12/13 slm add email on Acknowledgement by the Warehouse Dist
// WRK.Status Flag 8  Y/N = CND.No
WRK.Status_Flag_8_Y_N = 'N';

// WRK.Status Flag 12 Y/N = CND.No
WRK.Status_Flag_12_Y_N = 'N';

// LCL.OH Load Plan Ready = CND.Blank
LCL.OH_Load_Plan_Ready = *BLANK;

// WRK.Email to Warehouse Code = CON.*BLANK
WRK.Email_to_Warehouse_Code = *BLANK;

//?08/21/2017 DN T11489-Added Salesperson Code/Name to Parm.
//?08/06/24 SP S312312-Start (Get field "Email to Broker Usr")
// Call program SEL Confirm Prompt     PV.
CALL PROGRAM(SEL Confirm Prompt     PV) ('PDS0PVR');
PARAMETER(WRK.Status_Y_or_N);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(PAR.Block_Order_Flag);
PARAMETER(LCL.OH_Load_Plan_Ready);
PARAMETER(WRK.Print_Yes_No_USR);
PARAMETER(WRK.Status_Flag_2_Y_N);
PARAMETER(WRK.Status_Flag_3_Y_N);
PARAMETER(WRK.Status_Flag_4_Y_N);
PARAMETER(WRK.Status_Flag_5_Y_N);
PARAMETER(WRK.Status_Flag_6_Y_N);
PARAMETER(WRK.Status_Flag_7_Y_N);
PARAMETER(WRK.Status_Flag_8_Y_N);
PARAMETER(WRK.Status_Flag_12_Y_N);
PARAMETER(WRK.Email_to_Warehouse_Code);
PARAMETER(WRK.Email_Selection_usr);
PARAMETER(PAR.Salesperson_Code);
PARAMETER(LCL.Salesperson_Name);
PARAMETER(LCL.Email_to_Broker_Usr);
PARAMETER(LCL.Email_to_Salesperson_Usr);

//?08/06/24 SP S312312-End
CASE;

// IF WRK.Status - Y or N is no
IF WRK.Status_Y_or_N = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Next Program Name = CON.*BLANK
PAR.Next_Program_Name = *BLANK;

// Call program EDT Post Open Orders 2 XF.
CALL PROGRAM(EDT Post Open Orders 2 XF) ('POI4XFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(LCL.USR_Country_Code);
PARAMETER(PAR.USR_Warehouse_Code);
PARAMETER('OE');

//?Print Acknowledgement if flag is yes from the confirm prompt
CASE;

// IF WRK.Print (Yes/No) USR is Yes
IF WRK.Print_Yes_No_USR = 'Y';

// OR WRK.Status Flag 8  Y/N is Yes
OR WRK.Status_Flag_8_Y_N = 'Y';

// OR LCL.Email to Salesperson Usr is Yes
OR LCL.Email_to_Salesperson_Usr = 'Y';

// WRK.PRT Night Queue Run Sts = CND.no
WRK.PRT_Night_Queue_Run_Sts = 'N';

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Print Acknowledgement');
PARAMETER(WRK.PRT_Printer_Device);
PARAMETER(WRK.PRT_Hold_Output_Sts);
PARAMETER(WRK.PRT_Save_Output_Sts);
PARAMETER(WRK.PRT_Number_of_Copies);
PARAMETER(WRK.PRT_Night_Queue_Run_Sts);
PARAMETER(WRK.PRT_Night_Queue);
PARAMETER('OMS');
PARAMETER(*MISSING);
PARAMETER(WRK.Paper_Type_USR);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF WRK.Print (Yes/No) USR is No
IF WRK.Print_Yes_No_USR = 'N';

// WRK.PRT Printer Device = CON.*BLANK
WRK.PRT_Printer_Device = *BLANK;

ENDIF;

// Call program PRT Acknowledgements UP.
SBMJOB;
CALL PROGRAM(PRT Acknowledgements UP) ('PDJWPCLP');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(WRK.Blank_for_4_USR);
PARAMETER(1);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER('S');
PARAMETER(WRK.PRT_Printer_Device);
PARAMETER(WRK.PRT_Hold_Output_Sts);
PARAMETER(WRK.PRT_Save_Output_Sts);
PARAMETER(WRK.PRT_Number_of_Copies);
PARAMETER(*JOBD);
PARAMETER(*ZERO);
PARAMETER(WRK.Status_Flag_8_Y_N);
PARAMETER(WRK.Email_to_Warehouse_Code);
PARAMETER(LCL.Email_to_Salesperson_Usr);
SBMJOBOVR JOB(ORDER_ACK);
SBMJOBEND;

ENDIF;

ENDIF;

//?Print Get Ready Report if flag is yes from the confirm prompt
CASE;

// IF WRK.Status Flag 5  Y/N is Yes
IF WRK.Status_Flag_5_Y_N = 'Y';

// WRK.PRT Night Queue Run Sts = CND.no
WRK.PRT_Night_Queue_Run_Sts = 'N';

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Print Get Ready Report');
PARAMETER(WRK.PRT_Printer_Device);
PARAMETER(WRK.PRT_Hold_Output_Sts);
PARAMETER(WRK.PRT_Save_Output_Sts);
PARAMETER(WRK.PRT_Number_of_Copies);
PARAMETER(WRK.PRT_Night_Queue_Run_Sts);
PARAMETER(WRK.PRT_Night_Queue);
PARAMETER('OMS');
PARAMETER(*MISSING);
PARAMETER(WRK.Paper_Type_USR);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Zzz Get Ready Report   UP.
SBMJOB;
CALL PROGRAM(Zzz Get Ready Report   UP) ('PMH5UPC');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.PRT_Printer_Device);
PARAMETER(WRK.PRT_Hold_Output_Sts);
PARAMETER(WRK.PRT_Save_Output_Sts);
PARAMETER(WRK.PRT_Number_of_Copies);
PARAMETER(*JOBD);
PARAMETER(*BLANK);
SBMJOBOVR JOB(GETREADY);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

ENDIF;

ENDIF;

//?08/06/24 SP S312312-Start (Add new condition c5)
//?Fax Acknwlg to buyer/rep/brkr/Cust if slctd at confirm pmt 12/03/08
CASE;

// IF WRK.Status Flag 4  Y/N is yes
IF WRK.Status_Flag_4_Y_N = 'Y';

// OR WRK.Status Flag 2  Y/N is Yes
OR WRK.Status_Flag_2_Y_N = 'Y';

// OR WRK.Status Flag 3  Y/N is Yes
OR WRK.Status_Flag_3_Y_N = 'Y';

// OR WRK.Status Flag 7  Y/N is Yes
OR WRK.Status_Flag_7_Y_N = 'Y';

// OR LCL.Email to Broker Usr is Yes
OR LCL.Email_to_Broker_Usr = 'Y';

//?RMC  05/08/13 C2586-Status 3 - Regional Sales Rep changed to EMAIL only
//?                   -Status 2 - Buyer - will email and/or fax
//?RMC  06/23/04        LJB 12/03/2008
//?** Status Flag 2=Buyer Fax/email, Status Flag 3=Regional Sales Manager
//?** Status Flag 4=Broker Fax-which is not used at this level
//?** Status Flag 7=Customer Fax
//?08/21/2017 DN T11489-Added Salesperson Code to Parm.
//?08/06/24 SP S312312 (Passing parameter "Email to Broker Usr")
// Call program EXC Fax Acknwgmnt     XF.
CALL PROGRAM(EXC Fax Acknwgmnt     XF) ('PPFDXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(PAR.HPB_Ship_to_Warehouse);
PARAMETER(PAR.Salesperson_Code);
PARAMETER(WRK.Status_Flag_2_Y_N);
PARAMETER(WRK.Status_Flag_3_Y_N);
PARAMETER(WRK.Status_Flag_4_Y_N);
PARAMETER(WRK.Status_Flag_7_Y_N);
PARAMETER(LCL.Email_to_Broker_Usr);

ENDIF;

//?08/06/24 SP S312312-End
RETURN;

ENDIF;

ENDIF;

//?USER: Exit program processing

//?Disable *Exit key
CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

// Send error message - 'Function not allowed.'
ERROR(USR1833);

QUIT;

ENDIF;

