// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PUUFXFR
// ?Date: 14.08.2025 Time: 03:51:24
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Read all Orders on the Load and create ASN's if not already sent
EXECUTE FUNCTION(Crt EDI ASN by Load   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2200325;
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Invoice_Status_Override);
PARAMETER(PAR.F17_Pressed_USR);
{
 //?USER: Initialize routine

 //?Initialize fields used to check for changes
 // LCL.Company Number = CON.*ZERO
 LCL.Company_Number = *ZERO;

 // LCL.Ship To Customer = CON.*ZERO
 LCL.Ship_To_Customer = *ZERO;

 // LCL.Customer Purchase Order # = CON.*BLANK
 LCL.Customer_Purchase_Order_# = *BLANK;

 // LCL.@Pallet Type = CND.None
 LCL.@Pallet_Type = *BLANK;

 // LCL.First Time Flag = CND.Yes
 LCL.First_Time_Flag = 'Y';

 // LCL.EDI SURROGATE NUMBER = CND.Not Entered
 LCL.EDI_SURROGATE_NUMBER = *ZERO;

 // LCL.EDI Trading Partner No = CND.Blanks
 LCL.EDI_Trading_Partner_No = *BLANK;

 // LCL.Customer Purchase Order # = CND.Blank
 LCL.Customer_Purchase_Order_# = *BLANK;

 // LCL.Order Number = CND.Equal to zeros
 LCL.Order_Number = *ZERO;

 // LCL.Send Email USR = CND.No
 LCL.Send_Email_USR = 'N';

 // LCL.Header Or Detail USR = CND.Header
 LCL.Header_Or_Detail_USR = 'H';

 //?USER: Process Data record

 //?Initially default Create Record Flag to No
 // LCL.Create Record USR = CND.No
 LCL.Create_Record_USR = *BLANK;

 EXECUTE FUNCTION(Rtv OH Rental Pallet  RT) TYPE(RTVOBJ) FILE(PUB7CPP)           AC2200300;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Pallet_Type_1);
 PARAMETER(PAR.Pallet_Qty_1);
 PARAMETER(PAR.Pallet_Type_2);
 PARAMETER(PAR.Pallet_Qty_2);
 PARAMETER(PAR.Pallet_Type_3);
 PARAMETER(PAR.Pallet_Qty_3);
 PARAMETER(PAR.Pallet_Type_4);
 PARAMETER(PAR.Pallet_Qty_4);
 PARAMETER(PAR.EDI_ASN_Status);
 PARAMETER(PAR.Record_Status);
 PARAMETER(LCL.Rental_Pallet);
 PARAMETER(LCL.Rental_Pallet_Qty);
 {
  //?USER: Initialize routine

  //?This function retrieves the OH Pallet Table Shipped record for
  //?the Company and Order Number.  If any one of the four Pallet Types
  //?are for a rental pallet, then move that Pallet Type and Pallet Qty
  //?to the Rental Pallet and Rental Pallet Qty fields.
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  //?If Pallet Type 1 is entered, check if rental
  CASE;

  // IF NOT DB1.Pallet Type 1 is None
  IF ! DB1.Pallet_Type_1 = *BLANK;

  EXECUTE FUNCTION(Rtv Pallet Master     RT) TYPE(RTVOBJ) FILE(PUB6CPP)           AC2198688;
  PARAMETER(DB1.Pallet_Type_1);
  PARAMETER(NLL.PM_Description);
  PARAMETER(NLL.Misc_Tare_Weight);
  PARAMETER(LCL.Rental_Y_N);
  PARAMETER(NLL.Effective_Date);
  PARAMETER(NLL.Product_ID_GTIN);
  PARAMETER(NLL.Interchange_Code);
  PARAMETER(NLL.Class_Code);
  PARAMETER(NLL.EDI_Trading_Partner_No);
  PARAMETER(NLL.EDI_Whs_Duns_Number);
  PARAMETER(NLL.Contact_Name);
  PARAMETER(NLL.ASN_Ready_Y_N);
  PARAMETER(NLL.Status_1_Unused);
  PARAMETER(NLL.Status_2_Unused);
  PARAMETER(NLL.Text_75_Unused);
  PARAMETER(NLL.Record_Status);
  PARAMETER(NLL.Record_Found_USR);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PAR.Record Found USR = CND.Record Not Found
   PAR.Record_Found_USR = 'N';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PAR.Record Found USR = CND.Record Found
   PAR.Record_Found_USR = 'Y';

  }

  //?If Pallet Type 1 is a rental, populate rental fields
  CASE;

  // IF LCL.Rental (Y/N) is Yes
  IF LCL.Rental_Y_N = 'Y';

  // PAR.Rental Pallet = DB1.Pallet Type 1
  PAR.Rental_Pallet = DB1.Pallet_Type_1;

  // PAR.Rental Pallet Qty = DB1.Pallet Qty 1
  PAR.Rental_Pallet_Qty = DB1.Pallet_Qty_1;

  QUIT;

  ENDIF;

  ENDIF;

  //?If Pallet Type 2 is entered, check if rental
  CASE;

  // IF NOT DB1.Pallet Type 2 is None
  IF ! DB1.Pallet_Type_2 = *BLANK;

  EXECUTE FUNCTION(Rtv Pallet Master     RT) TYPE(RTVOBJ) FILE(PUB6CPP)           AC2198688;
  PARAMETER(DB1.Pallet_Type_2);
  PARAMETER(NLL.PM_Description);
  PARAMETER(NLL.Misc_Tare_Weight);
  PARAMETER(LCL.Rental_Y_N);
  PARAMETER(NLL.Effective_Date);
  PARAMETER(NLL.Product_ID_GTIN);
  PARAMETER(NLL.Interchange_Code);
  PARAMETER(NLL.Class_Code);
  PARAMETER(NLL.EDI_Trading_Partner_No);
  PARAMETER(NLL.EDI_Whs_Duns_Number);
  PARAMETER(NLL.Contact_Name);
  PARAMETER(NLL.ASN_Ready_Y_N);
  PARAMETER(NLL.Status_1_Unused);
  PARAMETER(NLL.Status_2_Unused);
  PARAMETER(NLL.Text_75_Unused);
  PARAMETER(NLL.Record_Status);
  PARAMETER(NLL.Record_Found_USR);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PAR.Record Found USR = CND.Record Not Found
   PAR.Record_Found_USR = 'N';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PAR.Record Found USR = CND.Record Found
   PAR.Record_Found_USR = 'Y';

  }

  //?If Pallet Type 1 is a rental, populate rental fields
  CASE;

  // IF LCL.Rental (Y/N) is Yes
  IF LCL.Rental_Y_N = 'Y';

  // PAR.Rental Pallet = DB1.Pallet Type 2
  PAR.Rental_Pallet = DB1.Pallet_Type_2;

  // PAR.Rental Pallet Qty = DB1.Pallet Qty 2
  PAR.Rental_Pallet_Qty = DB1.Pallet_Qty_2;

  QUIT;

  ENDIF;

  ENDIF;

  //?If Pallet Type 3 is entered, check if rental
  CASE;

  // IF NOT DB1.Pallet Type 3 is None
  IF ! DB1.Pallet_Type_3 = *BLANK;

  EXECUTE FUNCTION(Rtv Pallet Master     RT) TYPE(RTVOBJ) FILE(PUB6CPP)           AC2198688;
  PARAMETER(DB1.Pallet_Type_3);
  PARAMETER(NLL.PM_Description);
  PARAMETER(NLL.Misc_Tare_Weight);
  PARAMETER(LCL.Rental_Y_N);
  PARAMETER(NLL.Effective_Date);
  PARAMETER(NLL.Product_ID_GTIN);
  PARAMETER(NLL.Interchange_Code);
  PARAMETER(NLL.Class_Code);
  PARAMETER(NLL.EDI_Trading_Partner_No);
  PARAMETER(NLL.EDI_Whs_Duns_Number);
  PARAMETER(NLL.Contact_Name);
  PARAMETER(NLL.ASN_Ready_Y_N);
  PARAMETER(NLL.Status_1_Unused);
  PARAMETER(NLL.Status_2_Unused);
  PARAMETER(NLL.Text_75_Unused);
  PARAMETER(NLL.Record_Status);
  PARAMETER(NLL.Record_Found_USR);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PAR.Record Found USR = CND.Record Not Found
   PAR.Record_Found_USR = 'N';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PAR.Record Found USR = CND.Record Found
   PAR.Record_Found_USR = 'Y';

  }

  //?If Pallet Type 3 is a rental, populate rental fields
  CASE;

  // IF LCL.Rental (Y/N) is Yes
  IF LCL.Rental_Y_N = 'Y';

  // PAR.Rental Pallet = DB1.Pallet Type 3
  PAR.Rental_Pallet = DB1.Pallet_Type_3;

  // PAR.Rental Pallet Qty = DB1.Pallet Qty 3
  PAR.Rental_Pallet_Qty = DB1.Pallet_Qty_3;

  QUIT;

  ENDIF;

  ENDIF;

  //?If Pallet Type 4 is entered, check if rental
  CASE;

  // IF NOT DB1.Pallet Type 4 is None
  IF ! DB1.Pallet_Type_4 = *BLANK;

  EXECUTE FUNCTION(Rtv Pallet Master     RT) TYPE(RTVOBJ) FILE(PUB6CPP)           AC2198688;
  PARAMETER(DB1.Pallet_Type_4);
  PARAMETER(NLL.PM_Description);
  PARAMETER(NLL.Misc_Tare_Weight);
  PARAMETER(LCL.Rental_Y_N);
  PARAMETER(NLL.Effective_Date);
  PARAMETER(NLL.Product_ID_GTIN);
  PARAMETER(NLL.Interchange_Code);
  PARAMETER(NLL.Class_Code);
  PARAMETER(NLL.EDI_Trading_Partner_No);
  PARAMETER(NLL.EDI_Whs_Duns_Number);
  PARAMETER(NLL.Contact_Name);
  PARAMETER(NLL.ASN_Ready_Y_N);
  PARAMETER(NLL.Status_1_Unused);
  PARAMETER(NLL.Status_2_Unused);
  PARAMETER(NLL.Text_75_Unused);
  PARAMETER(NLL.Record_Status);
  PARAMETER(NLL.Record_Found_USR);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PAR.Record Found USR = CND.Record Not Found
   PAR.Record_Found_USR = 'N';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PAR.Record Found USR = CND.Record Found
   PAR.Record_Found_USR = 'Y';

  }

  //?If Pallet Type 4 is a rental, populate rental fields
  CASE;

  // IF LCL.Rental (Y/N) is Yes
  IF LCL.Rental_Y_N = 'Y';

  // PAR.Rental Pallet = DB1.Pallet Type 4
  PAR.Rental_Pallet = DB1.Pallet_Type_4;

  // PAR.Rental Pallet Qty = DB1.Pallet Qty 4
  PAR.Rental_Pallet_Qty = DB1.Pallet_Qty_4;

  QUIT;

  ENDIF;

  ENDIF;

 }

 //?If Rental Pallet is on the Order AND Sent Flag=No; Exception is F17.
 CASE;

 // IF NOT LCL.Rental Pallet is None
 IF ! LCL.Rental_Pallet = *BLANK;

 //?If F17 Pressed & EDI Sts='Sent' then Allow to Recreate 856 ASN.
 CASE;

 // IF PAR.F17 Pressed USR is Yes
 IF ( PAR.F17_Pressed_USR = 'Y';

 // AND LCL.EDI ASN Status is Sent
 AND LCL.EDI_ASN_Status = 'S' );

 // OR NOT LCL.EDI ASN Status is Sent
 OR ! LCL.EDI_ASN_Status = 'S';

 EXECUTE FUNCTION(Rtv Pallet Master     RT) TYPE(RTVOBJ) FILE(PUB6CPP)           AC2198688;
 PARAMETER(LCL.Rental_Pallet);
 PARAMETER(NLL.PM_Description);
 PARAMETER(LCL.Misc_Tare_Weight);
 PARAMETER(NLL.Rental_Y_N);
 PARAMETER(NLL.Effective_Date);
 PARAMETER(LCL.Product_ID_GTIN);
 PARAMETER(NLL.Interchange_Code);
 PARAMETER(NLL.Class_Code);
 PARAMETER(LCL.EDI_Trading_Partner_No);
 PARAMETER(LCL.EDI_Whs_Duns_Number);
 PARAMETER(NLL.Contact_Name);
 PARAMETER(NLL.ASN_Ready_Y_N);
 PARAMETER(NLL.Status_1_Unused);
 PARAMETER(NLL.Status_2_Unused);
 PARAMETER(NLL.Text_75_Unused);
 PARAMETER(NLL.Record_Status);
 PARAMETER(NLL.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?If Order Shipped, continue record selection
 CASE;

 // IF DB1.Actual Shipped Date is entered
 IF DB1.Actual_Shipped_Date <> *ZERO;

 //?Record selection based upon Invoice Status Override parameter
 CASE;

 // IF PAR.Invoice Status Override is No
 IF PAR.Invoice_Status_Override = 'N';

 //?If Invoice Date is not zero, create ASN's
 CASE;

 // IF DB1.Invoice Date is entered
 IF DB1.Invoice_Date <> *ZERO;

 // LCL.Create Record USR = CND.Yes
 LCL.Create_Record_USR = 'Y';

 ENDIF;

 //?Record selection based upon Invoice Status Override parameter
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Create Record USR = CND.Yes
 LCL.Create_Record_USR = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?If Create Record Flag is Yes, create ASN records
 CASE;

 // IF LCL.Create Record USR is Yes
 IF LCL.Create_Record_USR = 'Y';

 //?Determine which ASN files are created or updated
 CASE;

 // IF LCL.First Time Flag is Yes
 IF LCL.First_Time_Flag = 'Y';

 //?Load values for first record processed (create new ASN's)
 DO;

 // LCL.First Time Flag = CND.NO
 LCL.First_Time_Flag = 'N';

 // LCL.Create New ASN (Y/N) = CND.Yes
 LCL.Create_New_ASN_Y_N = 'Y';

 //?Save values for break logic
 // LCL.Company Number = DB1.Company Number
 LCL.Company_Number = DB1.Company_Number;

 // LCL.Ship To Customer = DB1.Ship To Customer
 LCL.Ship_To_Customer = DB1.Ship_To_Customer;

 // LCL.@Pallet Type = LCL.Rental Pallet
 LCL.@Pallet_Type = LCL.Rental_Pallet;

 // LCL.Customer Purchase Order # = DB1.Customer Purchase Order #
 LCL.Customer_Purchase_Order_# = DB1.Customer_Purchase_Order_#;

 //?This will apply for same Customer/PO# which we will update ECP040
 //?record for Pallet Qty & Wgt.
 // LCL.Rental Pallet Qty Total = LCL.Rental Pallet Qty
 LCL.Rental_Pallet_Qty_Total = LCL.Rental_Pallet_Qty;

 ENDDO;

 //?Determine which ASN files are created or updated
 // IF DB1.Company Number NE LCL.Company Number
 IF DB1.Company_Number <> LCL.Company_Number;

 // OR DB1.Ship To Customer NE LCL.Ship To Customer
 OR DB1.Ship_To_Customer <> LCL.Ship_To_Customer;

 // OR LCL.Rental Pallet NE LCL.@Pallet Type
 OR LCL.Rental_Pallet <> LCL.@Pallet_Type;

 //?Load values for changed records (create new ASN's)
 DO;

 // LCL.Create New ASN (Y/N) = CND.Yes
 LCL.Create_New_ASN_Y_N = 'Y';

 //?Save values for break logic
 // LCL.Company Number = DB1.Company Number
 LCL.Company_Number = DB1.Company_Number;

 // LCL.Ship To Customer = DB1.Ship To Customer
 LCL.Ship_To_Customer = DB1.Ship_To_Customer;

 // LCL.@Pallet Type = LCL.Rental Pallet
 LCL.@Pallet_Type = LCL.Rental_Pallet;

 //?If Customer PO# changes, save value
 CASE;

 // IF DB1.Customer Purchase Order # NE LCL.Customer Purchase Order #
 IF DB1.Customer_Purchase_Order_# <> LCL.Customer_Purchase_Order_#;

 // LCL.Customer Purchase Order # = DB1.Customer Purchase Order #
 LCL.Customer_Purchase_Order_# = DB1.Customer_Purchase_Order_#;

 ENDIF;

 //?DN-Don't think this is required. Only for Same Customer/PO#.
 //?Reset Total Rental Pallet Qty.
 // LCL.Rental Pallet Qty Total = LCL.Rental Pallet Qty
 LCL.Rental_Pallet_Qty_Total = LCL.Rental_Pallet_Qty;

 ENDDO;

 //?Determine which ASN files are created or updated
 // IF DB1.Customer Purchase Order # NE LCL.Customer Purchase Order #
 IF DB1.Customer_Purchase_Order_# <> LCL.Customer_Purchase_Order_#;

 //?If only Customer PO# changes, create ECP040 and ECP042 records
 DO;

 //?Create EDI Adv Ship Notice Dtl   (ECP040)
 // LCL.PO406 Gross WT Per Pack = LCL.Rental Pallet Qty * LCL.Misc Tare Weight *
 LCL.PO406_Gross_WT_Per_Pack = LCL.Rental_Pallet_Qty * LCL.Misc_Tare_Weight;

 EXECUTE FUNCTION(Upd EDI-ASN Dtl 040   RT) TYPE(RTVOBJ) FILE(ECP040)            AC2200333;
 PARAMETER(LCL.EDI_SURROGATE_NUMBER);
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.EDI_Trading_Partner_No);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Rental_Pallet_Qty);
 PARAMETER(LCL.Rental_Pallet);
 PARAMETER(*BLANK);
 PARAMETER(LCL.PO406_Gross_WT_Per_Pack);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Product_ID_GTIN);
 PARAMETER(*BLANK);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Create EDI-Adv Ship Notic) TYPE(CRTOBJ) FILE(ECP040)           AC1967266;
  PARAMETER(PAR.EDI_SURROGATE_NUMBER);
  PARAMETER(PAR.REF02_Ref_ID_Load_ID);
  PARAMETER(PAR.TRADE_PARTNER_CODE);
  PARAMETER(PAR.PRF01_Customer_PO);
  PARAMETER(PAR.LIN02_Prod_ID_Qualifier);
  PARAMETER(PAR.LIN03_Product_ID_UPC);
  PARAMETER(PAR.SN102_Quantity_Shipped);
  PARAMETER(PAR.SN103_Unit_of_Measure);
  PARAMETER(PAR.PO405_Weight_Qualifier);
  PARAMETER(PAR.PO406_Gross_WT_Per_Pack);
  PARAMETER(PAR.PO407_Unit_of_Measure_CDE);
  PARAMETER(PAR.PO401_Pack);
  PARAMETER(PAR.Product_ID_GTIN);
  PARAMETER(PAR.PID05_ITEM_DESCRIPTION);
  //?USER: Process Data record

  //?Update Pallet Qty & Pallet Wgt. Other Info was from 1st Order #.
  EXECUTE FUNCTION(Change EDI-Adv Ship Notic) TYPE(CHGOBJ) FILE(ECP040)           AC1967267;
  PARAMETER(DB1.EDI_SURROGATE_NUMBER);
  PARAMETER(DB1.REF02_Ref_ID_Load_ID);
  PARAMETER(DB1.TRADE_PARTNER_CODE);
  PARAMETER(DB1.PRF01_Customer_PO);
  PARAMETER(DB1.LIN02_Prod_ID_Qualifier);
  PARAMETER(DB1.LIN03_Product_ID_UPC);
  PARAMETER(PAR.SN102_Quantity_Shipped);
  PARAMETER(DB1.SN103_Unit_of_Measure);
  PARAMETER(DB1.PO405_Weight_Qualifier);
  PARAMETER(PAR.PO406_Gross_WT_Per_Pack);
  PARAMETER(DB1.PO407_Unit_of_Measure_CDE);
  PARAMETER(DB1.PO401_Pack);
  PARAMETER(DB1.Product_ID_GTIN);
  PARAMETER(DB1.PID05_ITEM_DESCRIPTION);
 }

 //?Create EDI Adv Ship Ntc Order    (ECP042)
 EXECUTE FUNCTION(Crt EDI-ASN Ordr 042  RT) TYPE(RTVOBJ) FILE(ECP042)            AC2200335;
 PARAMETER(LCL.EDI_SURROGATE_NUMBER);
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.EDI_Trading_Partner_No);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Number);
 {
  //?USER: Initialize routine

  // LCL.Orders on PO - TXT = CND.Not Entered
  LCL.Orders_on_PO_TXT = *BLANK;

  //?USER: Processing if Data record not found

  // LCL.Order Number Alpha = CVTVAR(PAR.Order Number)
  LCL.Order_Number_Alpha = CVTVAR(PAR.Order_Number);

  // LCL.Orders on PO - TXT = LCL.Order Number Alpha
  LCL.Orders_on_PO_TXT = LCL.Order_Number_Alpha;

  EXECUTE FUNCTION(Create EDI-Adv Ship Notic) TYPE(CRTOBJ) FILE(ECP042)           AC1967251;
  PARAMETER(PAR.EDI_SURROGATE_NUMBER);
  PARAMETER(PAR.REF02_Ref_ID_Load_ID);
  PARAMETER(PAR.TRADE_PARTNER_CODE);
  PARAMETER(PAR.PRF01_Customer_PO);
  PARAMETER(LCL.Orders_on_PO_TXT);
 }

 //?Save change in Customer PO#
 // LCL.Customer Purchase Order # = DB1.Customer Purchase Order #
 LCL.Customer_Purchase_Order_# = DB1.Customer_Purchase_Order_#;

 //?Reset Total Rental Pallet Qty.
 // LCL.Rental Pallet Qty Total = LCL.Rental Pallet Qty
 LCL.Rental_Pallet_Qty_Total = LCL.Rental_Pallet_Qty;

 EXECUTE FUNCTION(Chg EDI ASN Status    CH) TYPE(CHGOBJ) FILE(PUB7CPP)           AC2203331;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('S');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

 //?Do not create other ASN's
 // LCL.Create New ASN (Y/N) = CND.No
 LCL.Create_New_ASN_Y_N = *BLANK;

 ENDDO;

 //?Determine which ASN files are created or updated
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Update Orders on PO - TXT in ECP042.
 CASE;

 // IF DB1.Customer Purchase Order # EQ LCL.Customer Purchase Order #
 IF DB1.Customer_Purchase_Order_# = LCL.Customer_Purchase_Order_#;

 EXECUTE FUNCTION(Upd Orders on PO - TXT RT) TYPE(RTVOBJ) FILE(ECP042)           AC2205293;
 PARAMETER(LCL.EDI_SURROGATE_NUMBER);
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.EDI_Trading_Partner_No);
 PARAMETER(LCL.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Number);
 {
  //?USER: Initialize routine

  // PAR.Orders on PO - TXT = CON.*BLANK
  PAR.Orders_on_PO_TXT = *BLANK;

  //?USER: Process Data record

  //?Concat Subsequent Order Numbers up to 5 Orders Only.
  // LCL.Order Number Alpha = CVTVAR(PAR.Order Number)
  LCL.Order_Number_Alpha = CVTVAR(PAR.Order_Number);

  // PAR.Orders on PO - TXT = DB1.Orders on PO - TXT
  PAR.Orders_on_PO_TXT = DB1.Orders_on_PO_TXT;

  // PAR.Orders on PO - TXT = CONCAT(PAR.Orders on PO - TXT,LCL.Order Number Alpha,CON.*ZERO)
  PAR.Orders_on_PO_TXT = PAR.Orders_on_PO_TXT + LCL.Order_Number_Alpha (*ZERO);

  EXECUTE FUNCTION(Change EDI-Adv Ship Notic) TYPE(CHGOBJ) FILE(ECP042)           AC1967252;
  PARAMETER(DB1.EDI_SURROGATE_NUMBER);
  PARAMETER(DB1.REF02_Ref_ID_Load_ID);
  PARAMETER(DB1.TRADE_PARTNER_CODE);
  PARAMETER(DB1.PRF01_Customer_PO);
  PARAMETER(PAR.Orders_on_PO_TXT);
 }

 ENDIF;

 //?Update Rental Pallet Qty/Wgt Total in ECP040
 DO;

 //?Multiple Orders exist for same Customer/PO.
 // LCL.Rental Pallet Qty Total = LCL.Rental Pallet Qty Total + LCL.Rental Pallet Qty
 LCL.Rental_Pallet_Qty_Total = LCL.Rental_Pallet_Qty_Total + LCL.Rental_Pallet_Qty;

 // LCL.PO406 Gross WT Per Pack = LCL.Rental Pallet Qty Total * LCL.Misc Tare Weight *
 LCL.PO406_Gross_WT_Per_Pack = LCL.Rental_Pallet_Qty_Total * LCL.Misc_Tare_Weight;

 EXECUTE FUNCTION(Upd EDI-ASN Dtl 040   RT) TYPE(RTVOBJ) FILE(ECP040)            AC2200333;
 PARAMETER(LCL.EDI_SURROGATE_NUMBER);
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.EDI_Trading_Partner_No);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Rental_Pallet_Qty_Total);
 PARAMETER(LCL.Rental_Pallet);
 PARAMETER(*BLANK);
 PARAMETER(LCL.PO406_Gross_WT_Per_Pack);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Product_ID_GTIN);
 PARAMETER(*BLANK);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Create EDI-Adv Ship Notic) TYPE(CRTOBJ) FILE(ECP040)           AC1967266;
  PARAMETER(PAR.EDI_SURROGATE_NUMBER);
  PARAMETER(PAR.REF02_Ref_ID_Load_ID);
  PARAMETER(PAR.TRADE_PARTNER_CODE);
  PARAMETER(PAR.PRF01_Customer_PO);
  PARAMETER(PAR.LIN02_Prod_ID_Qualifier);
  PARAMETER(PAR.LIN03_Product_ID_UPC);
  PARAMETER(PAR.SN102_Quantity_Shipped);
  PARAMETER(PAR.SN103_Unit_of_Measure);
  PARAMETER(PAR.PO405_Weight_Qualifier);
  PARAMETER(PAR.PO406_Gross_WT_Per_Pack);
  PARAMETER(PAR.PO407_Unit_of_Measure_CDE);
  PARAMETER(PAR.PO401_Pack);
  PARAMETER(PAR.Product_ID_GTIN);
  PARAMETER(PAR.PID05_ITEM_DESCRIPTION);
  //?USER: Process Data record

  //?Update Pallet Qty & Pallet Wgt. Other Info was from 1st Order #.
  EXECUTE FUNCTION(Change EDI-Adv Ship Notic) TYPE(CHGOBJ) FILE(ECP040)           AC1967267;
  PARAMETER(DB1.EDI_SURROGATE_NUMBER);
  PARAMETER(DB1.REF02_Ref_ID_Load_ID);
  PARAMETER(DB1.TRADE_PARTNER_CODE);
  PARAMETER(DB1.PRF01_Customer_PO);
  PARAMETER(DB1.LIN02_Prod_ID_Qualifier);
  PARAMETER(DB1.LIN03_Product_ID_UPC);
  PARAMETER(PAR.SN102_Quantity_Shipped);
  PARAMETER(DB1.SN103_Unit_of_Measure);
  PARAMETER(DB1.PO405_Weight_Qualifier);
  PARAMETER(PAR.PO406_Gross_WT_Per_Pack);
  PARAMETER(DB1.PO407_Unit_of_Measure_CDE);
  PARAMETER(DB1.PO401_Pack);
  PARAMETER(DB1.Product_ID_GTIN);
  PARAMETER(DB1.PID05_ITEM_DESCRIPTION);
 }

 EXECUTE FUNCTION(Chg EDI ASN Status    CH) TYPE(CHGOBJ) FILE(PUB7CPP)           AC2203331;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('S');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

 //?Do not create other ASN's
 // LCL.Create New ASN (Y/N) = CND.No
 LCL.Create_New_ASN_Y_N = *BLANK;

 ENDDO;

 ENDIF;

 //?If Create New ASN is yes, perform updates
 CASE;

 // IF LCL.Create New ASN (Y/N) is Yes
 IF LCL.Create_New_ASN_Y_N = 'Y';

 // LCL.EDI SURROGATE NUMBER = CON.999999999
 LCL.EDI_SURROGATE_NUMBER = 999999999;

 EXECUTE FUNCTION(Rtv Next Surrogate #  RT) TYPE(RTVOBJ) FILE(ECP039)            AC2200291;
 PARAMETER(LCL.EDI_SURROGATE_NUMBER);
 {
  //?USER: Processing if Data record not found

  // PAR.EDI SURROGATE NUMBER = CON.100
  PAR.EDI_SURROGATE_NUMBER = 100;

  //?USER: Process Data record

  //?Determine next EDI Surrogate#
  CASE;

  // IF DB1.EDI SURROGATE NUMBER is 999999999
  IF DB1.EDI_SURROGATE_NUMBER = 999999999;

  // PAR.EDI SURROGATE NUMBER = CON.100
  PAR.EDI_SURROGATE_NUMBER = 100;

  //?Determine next EDI Surrogate#
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.EDI SURROGATE NUMBER = DB1.EDI SURROGATE NUMBER + CON.1
  PAR.EDI_SURROGATE_NUMBER = DB1.EDI_SURROGATE_NUMBER + 1;

  QUIT;

  ENDIF;

 }

 //?Retrieve values from Pallet Master that will be written to ASN's
 EXECUTE FUNCTION(Rtv Pallet Master     RT) TYPE(RTVOBJ) FILE(PUB6CPP)           AC2198688;
 PARAMETER(LCL.Rental_Pallet);
 PARAMETER(NLL.PM_Description);
 PARAMETER(LCL.Misc_Tare_Weight);
 PARAMETER(NLL.Rental_Y_N);
 PARAMETER(NLL.Effective_Date);
 PARAMETER(LCL.Product_ID_GTIN);
 PARAMETER(NLL.Interchange_Code);
 PARAMETER(NLL.Class_Code);
 PARAMETER(LCL.EDI_Trading_Partner_No);
 PARAMETER(LCL.EDI_Whs_Duns_Number);
 PARAMETER(NLL.Contact_Name);
 PARAMETER(LCL.ASN_Ready_Y_N);
 PARAMETER(NLL.Status_1_Unused);
 PARAMETER(NLL.Status_2_Unused);
 PARAMETER(NLL.Text_75_Unused);
 PARAMETER(LCL.Record_Status);
 PARAMETER(LCL.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Create EDI Adv Ship Notice Headr (ECP039)
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Convert Actual Ship Date from Synon format to YYYYMMDD format
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Actual Shipped Date USR = DB1.Actual Shipped Date
 LCL.Actual_Shipped_Date_USR = DB1.Actual_Shipped_Date;

 // LCL.DTM02-Actual Ship Date = LCL.Actual Shipped Date USR
 LCL.DTM02_Actual_Ship_Date = LCL.Actual_Shipped_Date_USR;

 ENDIF;

 //?This will only create a new record only.
 EXECUTE FUNCTION(Crt EDI-ASN Hdr 039   RT) TYPE(RTVOBJ) FILE(ECP039)            AC2200331;
 PARAMETER(LCL.EDI_SURROGATE_NUMBER);
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.EDI_Trading_Partner_No);
 PARAMETER('N');
 PARAMETER(LCL.DTM02_Actual_Ship_Date);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Create EDI-Adv Ship Notic) TYPE(CRTOBJ) FILE(ECP039)           AC1965358;
  PARAMETER(PAR.EDI_SURROGATE_NUMBER);
  PARAMETER(PAR.REF02_Ref_ID_Load_ID);
  PARAMETER(PAR.TRADE_PARTNER_CODE);
  PARAMETER(PAR.EDI_Record_Processed);
  PARAMETER(PAR.DTM02_Actual_Ship_Date);
  PARAMETER(PAR.ASN_Unused_Status_2);
  PARAMETER(PAR.ASN_Unused_Status_3);
  PARAMETER(PAR.ASN_Unused_Date);
 }

 ENDIF;

 //?Create EDI Adv Ship Notice Name  (ECP041) From and To records
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Determine Ship From values for ECP041
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Retrieve Ship From Address and Duns Number
 EXECUTE FUNCTION(RTV Co Addr,Phone,CntryRT) TYPE(RTVOBJ) FILE(CAABREP)          AC1936785;
 PARAMETER(DB1.Company_Number);
 PARAMETER(LCL.Name);
 PARAMETER(LCL.Address_Line_1);
 PARAMETER(LCL.Address_Line_2);
 PARAMETER(LCL.Address_Line_3);
 PARAMETER(LCL.City);
 PARAMETER(LCL.Zip_Postal_Code);
 PARAMETER(NLL.Telephone_Number_FF);
 PARAMETER(LCL.State_Code);
 PARAMETER(LCL.Country_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
 PARAMETER(DB1.Company_Number);
 PARAMETER('DUNSNUM');
 PARAMETER(LCL.D_N104_DUNS_NBR);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Move company to a 4 position numeric
 // LCL.Calc 4 = DB1.Company Number
 LCL.Calc_4 = DB1.Company_Number;

 //?Make Ship From N104-ID Code = Duns Number *CAT Company Number
 // LCL.Amount Right 4 position = LCL.Calc 4
 LCL.Amount_Right_4_position = LCL.Calc_4;

 // LCL.Text USR 9 = LCL.D-N104-DUNS NBR
 LCL.Text_USR_9 = LCL.D_N104_DUNS_NBR;

 // LCL.N104-ID CODE = CONCAT(LCL.Text USR 9,LCL.Amount Right 4 position,CON.*ZERO)
 LCL.N104_ID_CODE = LCL.Text_USR_9 + LCL.Amount_Right_4_position (*ZERO);

 ENDIF;

 EXECUTE FUNCTION(Crt EDI-ASN Name 041  RT) TYPE(RTVOBJ) FILE(ECP041)            AC2200332;
 PARAMETER(LCL.EDI_SURROGATE_NUMBER);
 PARAMETER(PAR.Load_ID);
 PARAMETER('SF');
 PARAMETER(LCL.Name);
 PARAMETER(LCL.N104_ID_CODE);
 PARAMETER(LCL.Address_Line_1);
 PARAMETER(LCL.Address_Line_2);
 PARAMETER(LCL.City);
 PARAMETER(LCL.State_Code);
 PARAMETER(LCL.Zip_Postal_Code);
 PARAMETER(LCL.Country_Code);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Create EDI-Adv Ship Notic) TYPE(CRTOBJ) FILE(ECP041)           AC1967177;
  PARAMETER(PAR.EDI_SURROGATE_NUMBER);
  PARAMETER(PAR.REF02_Ref_ID_Load_ID);
  PARAMETER(PAR.N101_NAME_TYPE_CODE);
  PARAMETER(PAR.N102_NAME);
  PARAMETER(PAR.N104_ID_CODE);
  PARAMETER(PAR.N301_ADD);
  PARAMETER(PAR.N302_ADDRESS);
  PARAMETER(PAR.N401_CITY);
  PARAMETER(PAR.N402_State_or_Prov_Code);
  PARAMETER(PAR.N403_POSTAL_CODE);
  PARAMETER(PAR.N404_COUNTRY_CODE);
 }

 //?Format 'Ship To' Values.                       WI464 DN 04/22/22
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Ship To Customer TXT = CVTVAR(DB1.Ship To Customer)
 LCL.Ship_To_Customer_TXT = CVTVAR(DB1.Ship_To_Customer);

 //?Format/Set ST Address Line 1 & 2 If Address Line 1 is Blank.
 CASE;

 // IF DB1.Ship To Address Line 1 is Blank
 IF DB1.Ship_To_Address_Line_1 = *BLANK;

 // LCL.String Text-Old USR = DB1.Ship To Address Line 2
 LCL.String_Text_Old_USR = DB1.Ship_To_Address_Line_2;

 // Call program Exc Repl SpcChar 2 BlnkXF.
 CALL PROGRAM(Exc Repl SpcChar 2 BlnkXF) ('PUGPXFR');
 PARAMETER(LCL.String_Text_Old_USR);
 PARAMETER(LCL.String_Text_New_USR);

 // LCL.Ship To Address Line 1 = LCL.String Text-New USR
 LCL.Ship_To_Address_Line_1 = LCL.String_Text_New_USR;

 // LCL.Ship To Address Line 2 = CND.Blank
 LCL.Ship_To_Address_Line_2 = *BLANK;

 CASE;

 // IF DB1.Ship To Address Line 3 is NE Blank
 IF DB1.Ship_To_Address_Line_3 <> *BLANK;

 // LCL.String Text-Old USR = DB1.Ship To Address Line 3
 LCL.String_Text_Old_USR = DB1.Ship_To_Address_Line_3;

 // Call program Exc Repl SpcChar 2 BlnkXF.
 CALL PROGRAM(Exc Repl SpcChar 2 BlnkXF) ('PUGPXFR');
 PARAMETER(LCL.String_Text_Old_USR);
 PARAMETER(LCL.String_Text_New_USR);

 // LCL.Ship To Address Line 2 = LCL.String Text-New USR
 LCL.Ship_To_Address_Line_2 = LCL.String_Text_New_USR;

 ENDIF;

 //?Format/Set ST Address Line 1 & 2 If Address Line 1 is Blank.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.String Text-Old USR = DB1.Ship To Address Line 1
 LCL.String_Text_Old_USR = DB1.Ship_To_Address_Line_1;

 // Call program Exc Repl SpcChar 2 BlnkXF.
 CALL PROGRAM(Exc Repl SpcChar 2 BlnkXF) ('PUGPXFR');
 PARAMETER(LCL.String_Text_Old_USR);
 PARAMETER(LCL.String_Text_New_USR);

 // LCL.Ship To Address Line 1 = LCL.String Text-New USR
 LCL.Ship_To_Address_Line_1 = LCL.String_Text_New_USR;

 // LCL.Ship To Address Line 2 = CND.Blank
 LCL.Ship_To_Address_Line_2 = *BLANK;

 CASE;

 // IF DB1.Ship To Address Line 2 is NE Blank
 IF DB1.Ship_To_Address_Line_2 <> *BLANK;

 // LCL.String Text-Old USR = DB1.Ship To Address Line 2
 LCL.String_Text_Old_USR = DB1.Ship_To_Address_Line_2;

 // Call program Exc Repl SpcChar 2 BlnkXF.
 CALL PROGRAM(Exc Repl SpcChar 2 BlnkXF) ('PUGPXFR');
 PARAMETER(LCL.String_Text_Old_USR);
 PARAMETER(LCL.String_Text_New_USR);

 // LCL.Ship To Address Line 2 = LCL.String Text-New USR
 LCL.Ship_To_Address_Line_2 = LCL.String_Text_New_USR;

 ENDIF;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(RTV Country Code       RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1395144;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(LCL.Country_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Crt EDI-ASN Name 041  RT) TYPE(RTVOBJ) FILE(ECP041)            AC2200332;
 PARAMETER(LCL.EDI_SURROGATE_NUMBER);
 PARAMETER(PAR.Load_ID);
 PARAMETER('ST');
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(LCL.Ship_To_Customer_TXT);
 PARAMETER(LCL.Ship_To_Address_Line_1);
 PARAMETER(LCL.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(LCL.Country_Code);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Create EDI-Adv Ship Notic) TYPE(CRTOBJ) FILE(ECP041)           AC1967177;
  PARAMETER(PAR.EDI_SURROGATE_NUMBER);
  PARAMETER(PAR.REF02_Ref_ID_Load_ID);
  PARAMETER(PAR.N101_NAME_TYPE_CODE);
  PARAMETER(PAR.N102_NAME);
  PARAMETER(PAR.N104_ID_CODE);
  PARAMETER(PAR.N301_ADD);
  PARAMETER(PAR.N302_ADDRESS);
  PARAMETER(PAR.N401_CITY);
  PARAMETER(PAR.N402_State_or_Prov_Code);
  PARAMETER(PAR.N403_POSTAL_CODE);
  PARAMETER(PAR.N404_COUNTRY_CODE);
 }

 ENDIF;

 //?Create EDI Adv Ship Notice Dtl   (ECP040)
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.PO406 Gross WT Per Pack = LCL.Rental Pallet Qty * LCL.Misc Tare Weight *
 LCL.PO406_Gross_WT_Per_Pack = LCL.Rental_Pallet_Qty * LCL.Misc_Tare_Weight;

 EXECUTE FUNCTION(Upd EDI-ASN Dtl 040   RT) TYPE(RTVOBJ) FILE(ECP040)            AC2200333;
 PARAMETER(LCL.EDI_SURROGATE_NUMBER);
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.EDI_Trading_Partner_No);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Rental_Pallet_Qty);
 PARAMETER(LCL.Rental_Pallet);
 PARAMETER(*BLANK);
 PARAMETER(LCL.PO406_Gross_WT_Per_Pack);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Product_ID_GTIN);
 PARAMETER(*BLANK);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Create EDI-Adv Ship Notic) TYPE(CRTOBJ) FILE(ECP040)           AC1967266;
  PARAMETER(PAR.EDI_SURROGATE_NUMBER);
  PARAMETER(PAR.REF02_Ref_ID_Load_ID);
  PARAMETER(PAR.TRADE_PARTNER_CODE);
  PARAMETER(PAR.PRF01_Customer_PO);
  PARAMETER(PAR.LIN02_Prod_ID_Qualifier);
  PARAMETER(PAR.LIN03_Product_ID_UPC);
  PARAMETER(PAR.SN102_Quantity_Shipped);
  PARAMETER(PAR.SN103_Unit_of_Measure);
  PARAMETER(PAR.PO405_Weight_Qualifier);
  PARAMETER(PAR.PO406_Gross_WT_Per_Pack);
  PARAMETER(PAR.PO407_Unit_of_Measure_CDE);
  PARAMETER(PAR.PO401_Pack);
  PARAMETER(PAR.Product_ID_GTIN);
  PARAMETER(PAR.PID05_ITEM_DESCRIPTION);
  //?USER: Process Data record

  //?Update Pallet Qty & Pallet Wgt. Other Info was from 1st Order #.
  EXECUTE FUNCTION(Change EDI-Adv Ship Notic) TYPE(CHGOBJ) FILE(ECP040)           AC1967267;
  PARAMETER(DB1.EDI_SURROGATE_NUMBER);
  PARAMETER(DB1.REF02_Ref_ID_Load_ID);
  PARAMETER(DB1.TRADE_PARTNER_CODE);
  PARAMETER(DB1.PRF01_Customer_PO);
  PARAMETER(DB1.LIN02_Prod_ID_Qualifier);
  PARAMETER(DB1.LIN03_Product_ID_UPC);
  PARAMETER(PAR.SN102_Quantity_Shipped);
  PARAMETER(DB1.SN103_Unit_of_Measure);
  PARAMETER(DB1.PO405_Weight_Qualifier);
  PARAMETER(PAR.PO406_Gross_WT_Per_Pack);
  PARAMETER(DB1.PO407_Unit_of_Measure_CDE);
  PARAMETER(DB1.PO401_Pack);
  PARAMETER(DB1.Product_ID_GTIN);
  PARAMETER(DB1.PID05_ITEM_DESCRIPTION);
 }

 ENDIF;

 //?Create EDI Adv Ship Ntc Order    (ECP042)
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Crt EDI-ASN Ordr 042  RT) TYPE(RTVOBJ) FILE(ECP042)            AC2200335;
 PARAMETER(LCL.EDI_SURROGATE_NUMBER);
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.EDI_Trading_Partner_No);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Number);
 {
  //?USER: Initialize routine

  // LCL.Orders on PO - TXT = CND.Not Entered
  LCL.Orders_on_PO_TXT = *BLANK;

  //?USER: Processing if Data record not found

  // LCL.Order Number Alpha = CVTVAR(PAR.Order Number)
  LCL.Order_Number_Alpha = CVTVAR(PAR.Order_Number);

  // LCL.Orders on PO - TXT = LCL.Order Number Alpha
  LCL.Orders_on_PO_TXT = LCL.Order_Number_Alpha;

  EXECUTE FUNCTION(Create EDI-Adv Ship Notic) TYPE(CRTOBJ) FILE(ECP042)           AC1967251;
  PARAMETER(PAR.EDI_SURROGATE_NUMBER);
  PARAMETER(PAR.REF02_Ref_ID_Load_ID);
  PARAMETER(PAR.TRADE_PARTNER_CODE);
  PARAMETER(PAR.PRF01_Customer_PO);
  PARAMETER(LCL.Orders_on_PO_TXT);
 }

 ENDIF;

 EXECUTE FUNCTION(Chg EDI ASN Status    CH) TYPE(CHGOBJ) FILE(PUB7CPP)           AC2203331;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('S');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

 ENDIF;

 //?JM-S031547-Validate if order is included in EDI
 CASE;

 // IF LCL.Create Record USR is Yes
 IF LCL.Create_Record_USR = 'Y';

 // LCL.Order Number Alpha = CVTVAR(DB1.Order Number)
 LCL.Order_Number_Alpha = CVTVAR(DB1.Order_Number);

 // LCL.Orders on PO - TXT = LCL.Order Number Alpha
 LCL.Orders_on_PO_TXT = LCL.Order_Number_Alpha;

 // Call program EXC ASN rental pallet  XF.
 CALL PROGRAM(EXC ASN rental pallet  XF) ('PVK5XFR');
 PARAMETER(LCL.EDI_SURROGATE_NUMBER);
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.EDI_Trading_Partner_No);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(LCL.Order_Number_Alpha);
 PARAMETER(LCL.USR_Return_Code);

 //?Call failure email program
 CASE;

 // IF LCL.USR Return Code is Not Returned
 IF LCL.USR_Return_Code = *BLANK;

 // LCL.Send Email USR = CND.Yes
 LCL.Send_Email_USR = 'Y';

 // Call program EXC ASN Rental Failure XF.
 CALL PROGRAM(EXC ASN Rental Failure XF) ('PVKZXFR');
 PARAMETER('L');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.Email_Message_1_USR);
 PARAMETER(LCL.Email_Message_3_USR);
 PARAMETER(LCL.Header_Or_Detail_USR);

 // LCL.Header Or Detail USR = CND.Detail
 LCL.Header_Or_Detail_USR = 'D';

 ENDIF;

 //?JM-S031547-Validate if order is included in EDI
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?If it is rental pallet
 CASE;

 // IF NOT LCL.Rental Pallet is None
 IF ! LCL.Rental_Pallet = *BLANK;

 EXECUTE FUNCTION(Rtv OH Shipped Pallet RT) TYPE(RTVOBJ) FILE(PUB7CPP)           AC2198891;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(NLL.Pallet_Type_1);
 PARAMETER(NLL.Pallet_Qty_1);
 PARAMETER(NLL.Pallet_Type_2);
 PARAMETER(NLL.Pallet_Qty_2);
 PARAMETER(NLL.Pallet_Type_3);
 PARAMETER(NLL.Pallet_Qty_3);
 PARAMETER(NLL.Pallet_Type_4);
 PARAMETER(NLL.Pallet_Qty_4);
 PARAMETER(LCL.EDI_ASN_Status);
 PARAMETER(NLL.Unused_Flag_1);
 PARAMETER(NLL.Unused_Flag_2);
 PARAMETER(NLL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.EDI ASN Status is Sent
 IF LCL.EDI_ASN_Status = 'S';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Send Email USR = CND.Yes
 LCL.Send_Email_USR = 'Y';

 // Call program EXC ASN Rental Failure XF.
 CALL PROGRAM(EXC ASN Rental Failure XF) ('PVKZXFR');
 PARAMETER('L');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.Email_Message_1_USR);
 PARAMETER(LCL.Email_Message_3_USR);
 PARAMETER(LCL.Header_Or_Detail_USR);

 // LCL.Header Or Detail USR = CND.Detail
 LCL.Header_Or_Detail_USR = 'D';

 ENDIF;

 ENDIF;

 ENDIF;

 //?USER: Exit processing

 CASE;

 // IF LCL.Send Email USR is Yes
 IF LCL.Send_Email_USR = 'Y';

 // Call program EXC ASN Rental Failure XF.
 CALL PROGRAM(EXC ASN Rental Failure XF) ('PVKZXFR');
 PARAMETER('L');
 PARAMETER(999);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.Email_Message_1_USR);
 PARAMETER(LCL.Email_Message_3_USR);
 PARAMETER(*BLANK);

 ENDIF;

}


