// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDSRXFR
// ?Date: 14.08.2025 Time: 03:36:01
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(Rtv Loc/Fzn/Avl Qt/Wt RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC1542440;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Lot_Number);
PARAMETER(PAR.Location_Code);
PARAMETER(PAR.Location_Level);
PARAMETER(PAR.Quantity_Loc_On_Hand_USR);
PARAMETER(PAR.Quantity_Loc_Trans_USR);
PARAMETER(PAR.Quantity_Loc_Alloc_USR);
PARAMETER(PAR.Quantity_Loc_Avail_USR);
PARAMETER(PAR.Quantity_Loc_Hold_USR);
PARAMETER(PAR.Weight_Open_7_0_USR);
PARAMETER(WRK.Inv_Hold_Reason_1_USR);
PARAMETER(WRK.Inv_Hold_Reason_2_USR);
PARAMETER(WRK.Inv_Hold_Reason_3_USR);
PARAMETER(WRK.Inv_Hold_Qty_1_USR);
PARAMETER(WRK.Inv_Hold_Qty_2_USR);
PARAMETER(WRK.Inv_Hold_Qty_3_USR);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Item_age_days_usr);
PARAMETER(PAR.ILL_Avail_Ship_Date);
PARAMETER(PAR.ILL_Status);
PARAMETER(PAR.Inv_Hold_Reason_Code);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?SEL: Age days was age code -- FP1309
 CASE;

 // IF PAR.Item age days usr is Not Entered
 IF PAR.Item_age_days_usr = *ZERO;

 //?SEL: Age days was age code -- FP1309
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Clc Age Days          IF) TYPE(EXCINTFUN)                      AC1883655;
 PARAMETER(DB1.Production_Date);
 PARAMETER(LCL.Item_Age_Days_Selected);
 {
  //?Execute internal function

  // PAR.Item Age Days Selected = JOB.*Job date - PAR.Production Date *DAYS
  PAR.Item_Age_Days_Selected = DURATION(JOB.*Job_date PAR.Production_Date 'DY' 1111111
  'NONE' 'N' 1);

 }

 CASE;

 // IF LCL.Item Age Days Selected LE PAR.Item age days usr
 IF LCL.Item_Age_Days_Selected <= PAR.Item_age_days_usr;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?SEL: Production Date
 CASE;

 // IF PAR.Production Date is not entered
 IF PAR.Production_Date = *ZERO;

 //?SEL: Production Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Production Date NE PAR.Production Date
 IF DB1.Production_Date <> PAR.Production_Date;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?SEL: Lot Number
 CASE;

 // IF PAR.Lot Number is Not Entered
 IF PAR.Lot_Number = *ZERO;

 //?SEL: Lot Number
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Lot Number NE PAR.Lot Number
 IF DB1.Lot_Number <> PAR.Lot_Number;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?SEL: Location
 CASE;

 // IF PAR.Location Code is Not Entered
 IF PAR.Location_Code = *BLANK;

 //?SEL: Location
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Location Code NE PAR.Location Code
 IF DB1.Location_Code <> PAR.Location_Code;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?SEL: Location Level
 CASE;

 // IF PAR.Location Level is Not Entered
 IF PAR.Location_Level = *ZERO;

 //?SEL: Location Level
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Location Level NE PAR.Location Level
 IF DB1.Location_Level <> PAR.Location_Level;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?SEL: Available Ship Date
 CASE;

 // IF PAR.ILL Avail Ship Date is Not Entered
 IF PAR.ILL_Avail_Ship_Date = *ZERO;

 //?SEL: Available Ship Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.ILL Avail Ship Date GT PAR.ILL Avail Ship Date
 IF DB1.ILL_Avail_Ship_Date > PAR.ILL_Avail_Ship_Date;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?SEL: Inv Hold Reason Code
 CASE;

 // IF PAR.Inv Hold Reason Code is EQ Blank
 IF PAR.Inv_Hold_Reason_Code = *BLANK;

 //?SEL: Inv Hold Reason Code
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Inv Hold Reason Code NE PAR.Inv Hold Reason Code
 IF DB1.Inv_Hold_Reason_Code <> PAR.Inv_Hold_Reason_Code;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?SEL: ILL Status
 CASE;

 // IF PAR.ILL Status EQ WRK.USR Blank Field
 IF PAR.ILL_Status = WRK.USR_Blank_Field;

 //?SEL: ILL Status
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.ILL Status NE PAR.ILL Status
 IF DB1.ILL_Status <> PAR.ILL_Status;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Process Selected Records
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // PAR.Quantity Loc On-Hand USR = PAR.Quantity Loc On-Hand USR + DB1.ILL Item Qty On-Hand
 PAR.Quantity_Loc_On_Hand_USR = PAR.Quantity_Loc_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

 //?Frozen Quantity
 CASE;

 // IF DB1.ILL Avail Ship Date LE JOB.*Job date
 IF DB1.ILL_Avail_Ship_Date <= JOB.*Job_date;

 CASE;

 // IF DB1.ILL Status is Available
 IF DB1.ILL_Status = 'A';

 // PAR.Quantity Loc Trans USR = PAR.Quantity Loc Trans USR + DB1.ILL Item Qty On-Ha
 PAR.Quantity_Loc_Trans_USR = PAR.Quantity_Loc_Trans_USR + DB1.ILL_Item_Qty_On_Hand;

 ENDIF;

 ENDIF;

 //?Hold Quantity
 CASE;

 // IF DB1.ILL Status is Hold
 IF DB1.ILL_Status = 'H';

 // PAR.Quantity Loc Hold USR = PAR.Quantity Loc Hold USR + DB1.ILL Item Qty On-Hand
 PAR.Quantity_Loc_Hold_USR = PAR.Quantity_Loc_Hold_USR + DB1.ILL_Item_Qty_On_Hand;

 CASE;

 // IF DB1.Inv Hold Reason Code is Plant
 IF DB1.Inv_Hold_Reason_Code = 'PL';

 // PAR.Inv Hold Reason 1 USR = CND.Plant
 PAR.Inv_Hold_Reason_1_USR = 'PL';

 // PAR.Inv Hold Qty 1 USR = PAR.Inv Hold Qty 1 USR + DB1.ILL Item Qty On-Hand
 PAR.Inv_Hold_Qty_1_USR = PAR.Inv_Hold_Qty_1_USR + DB1.ILL_Item_Qty_On_Hand;

 // IF DB1.Inv Hold Reason Code is Quality
 IF DB1.Inv_Hold_Reason_Code = 'QA';

 // PAR.Inv Hold Reason 2 USR = CND.Quality
 PAR.Inv_Hold_Reason_2_USR = 'QA';

 // PAR.Inv Hold Qty 2 USR = PAR.Inv Hold Qty 2 USR + DB1.ILL Item Qty On-Hand
 PAR.Inv_Hold_Qty_2_USR = PAR.Inv_Hold_Qty_2_USR + DB1.ILL_Item_Qty_On_Hand;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Inv Hold Reason 3 USR = CND.Special Handling
 PAR.Inv_Hold_Reason_3_USR = 'SH';

 // PAR.Inv Hold Qty 3 USR = PAR.Inv Hold Qty 3 USR + DB1.ILL Item Qty On-Hand
 PAR.Inv_Hold_Qty_3_USR = PAR.Inv_Hold_Qty_3_USR + DB1.ILL_Item_Qty_On_Hand;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Rtv Allocated Qty     RT) TYPE(RTVOBJ) FILE(PDL8CPP)           AC1514260;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Lot_Number);
 PARAMETER(DB1.Location_Code);
 PARAMETER(DB1.Location_Level);
 PARAMETER(PAR.OIA_Alloc_Shipped_Qty);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.OIA Alloc/Shipped Qty = PAR.OIA Alloc/Shipped Qty + DB1.OIA Alloc/Shipped Qt
  PAR.OIA_Alloc_Shipped_Qty = PAR.OIA_Alloc_Shipped_Qty + DB1.OIA_Alloc_Shipped_Qty;

 }

 // PAR.Quantity Loc Alloc USR = PAR.Quantity Loc Alloc USR + PAR.OIA Alloc/Shipped
 PAR.Quantity_Loc_Alloc_USR = PAR.Quantity_Loc_Alloc_USR + PAR.OIA_Alloc_Shipped_Qty;

 // PAR.Quantity Avail USR = DB1.ILL Item Qty On-Hand - PAR.OIA Alloc/Shipped Qty
 PAR.Quantity_Avail_USR = DB1.ILL_Item_Qty_On_Hand - PAR.OIA_Alloc_Shipped_Qty;

 // PAR.Quantity Loc Avail USR = PAR.Quantity Loc Avail USR + PAR.Quantity Avail USR
 PAR.Quantity_Loc_Avail_USR = PAR.Quantity_Loc_Avail_USR + PAR.Quantity_Avail_USR;

 ENDIF;

 //?USER: Exit processing

 // PAR.Weight Open  7.0      USR = PAR.Quantity Loc Avail USR * PAR.Unit Weight *Rounded
 PAR.Weight_Open_7_0_USR = PAR.Quantity_Loc_Avail_USR * PAR.Unit_Weight 'H';

}


