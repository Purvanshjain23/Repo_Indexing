// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPNSXFR
// ?Date: 14.08.2025 Time: 03:41:16
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(PFS Ship Load Header  RT) TYPE(RTVOBJ) FILE(PPBLCPP)           AC1733412;
PARAMETER(PAR.PFS_Company_Number);
PARAMETER(PAR.PFS_Load_ID);
PARAMETER(PAR.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 // PAR.PFS Process Status = DB1.PFS Process Status
 PAR.PFS_Process_Status = DB1.PFS_Process_Status;

 // PAR.PFS Error Reason = CND.No Error
 PAR.PFS_Error_Reason = *BLANK;

 //?VALIDATE
 DO;

 // PAR.Load ID = DB1.PFS Load ID
 PAR.Load_ID = DB1.PFS_Load_ID;

 //?** Override Total Load Miles included in rtv       E00207  8/18/08
 EXECUTE FUNCTION(PFS Rtv Load Header   RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1733772;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(PAR.Load_Status);
 PARAMETER(PAR.Seal_1);
 PARAMETER(PAR.Seal_2);
 PARAMETER(PAR.Seal_3);
 PARAMETER(PAR.Flat_Amount);
 PARAMETER(PAR.Total_Stops);
 PARAMETER(PAR.Trailer_Id);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Ship_Status);
 PARAMETER(PAR.Load_Type);
 PARAMETER(PAR.Number_Pallets_Received);
 PARAMETER(PAR.Number_Pallets_Loaded);
 PARAMETER(PAR.Actual_Departure_Date);
 PARAMETER(PAR.Departure_Time);
 PARAMETER(PAR.Total_Load_Miles);
 PARAMETER(PAR.Recorder_ID);
 PARAMETER(PAR.Shipping_Method);
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Export_Status);
 PARAMETER(PAR.Actual_Ship_Date);
 PARAMETER(LCL.BOL_Complete_Date);
 PARAMETER(LCL.BOL_Complete_Time);
 PARAMETER(PAR.Shipping_Line);
 PARAMETER(PAR.Discharge_Port);
 PARAMETER(PAR.Scheduled_Delivery_Date);
 PARAMETER(PAR.Scheduled_Delivery_Time);
 PARAMETER(PAR.Load_Shag_Flag);
 PARAMETER(PAR.Load_Wash_Flag);
 PARAMETER(PAR.Avg_Pallet_Tare);
 PARAMETER(PAR.Tot_Pallet_Tare);
 PARAMETER(PAR.Override_Total_Load_Miles);
 PARAMETER(PAR.MG_Created_Load);
 PARAMETER(PAR.Load_U_M);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(LCL.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 CASE;

 // IF LCL.Record Found USR is Record Not Found
 IF LCL.Record_Found_USR = 'N';

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Load Not Found
 PAR.PFS_Error_Reason = 'LOADNF';

 ENDIF;

 CASE;

 // IF PAR.PFS Process Status is Error
 IF PAR.PFS_Process_Status = 2;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDDO;

 //?PROCESS:  Selected Record
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // PAR.Product Temperature = DB1.PFS Actual Prod Temp
 PAR.Product_Temperature = DB1.PFS_Actual_Prod_Temp;

 // PAR.Reefer Temperature = DB1.PFS Actual Reefer Temp
 PAR.Reefer_Temperature = DB1.PFS_Actual_Reefer_Temp;

 //?04/02/09 PKD Use IF instead of CL to convert date.
 EXECUTE FUNCTION(CVT *YYMD to *CYMD    IF) TYPE(EXCINTFUN)                      AC1929228;
 PARAMETER(PAR.BOL_Complete_Date);
 PARAMETER(DB1.PFS_BOL_Complete_Date);
 {
  //?Execute internal function

  //?** YEAR **
  // PAR.Year Code = PAR.DATE / CON.10000 *
  PAR.Year_Code = PAR.DATE / 10000;

  // PAR.Year  NBR USR = PAR.Year Code
  PAR.Year_NBR_USR = PAR.Year_Code;

  // PAR.Year  (Char) USR = CVTVAR(PAR.Year  NBR USR)
  PAR.Year_Char_USR = CVTVAR(PAR.Year_NBR_USR);

  //?** MONTH **
  // PAR.Month                 USR = PAR.DATE / CON.100 *
  PAR.Month_USR = PAR.DATE / 100;

  // PAR.Month (Char) USR = CVTVAR(PAR.Month                 USR)
  PAR.Month_Char_USR = CVTVAR(PAR.Month_USR);

  //?** DAY **
  // PAR.Day of Month USR = PAR.DATE
  PAR.Day_of_Month_USR = PAR.DATE;

  // PAR.Day   (Char) USR = CVTVAR(PAR.Day of Month USR)
  PAR.Day_Char_USR = CVTVAR(PAR.Day_of_Month_USR);

  //?CENTURY+YEAR
  CASE;

  // IF PAR.Year Code is Twentieth Century
  IF PAR.Year_Code <= 1999;

  // PAR.Date (Alpha) USR = CONCAT(CON.0,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '0' + PAR.Year_Char_USR (*ZERO);

  //?CENTURY+YEAR
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date (Alpha) USR = CONCAT(CON.1,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '1' + PAR.Year_Char_USR (*ZERO);

  ENDIF;

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Month (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Month_Char_USR (*ZERO);

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Day   (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date                  USR = CVTVAR(PAR.Date (Alpha) USR)
  PAR.Date_USR = CVTVAR(PAR.Date_Alpha_USR);

 }

 // PAR.BOL Complete Time = DB1.PFS BOL Complete Time
 PAR.BOL_Complete_Time = DB1.PFS_BOL_Complete_Time;

 // PAR.Actual Departure Date = PAR.BOL Complete Date
 PAR.Actual_Departure_Date = PAR.BOL_Complete_Date;

 // PAR.Departure Time = PAR.BOL Complete Time
 PAR.Departure_Time = PAR.BOL_Complete_Time;

 // PAR.Seal 1 = DB1.PFS Seal 1
 PAR.Seal_1 = DB1.PFS_Seal_1;

 // PAR.Seal 2 = DB1.PFS Seal 2
 PAR.Seal_2 = DB1.PFS_Seal_2;

 // PAR.Seal 3 = DB1.PFS Seal 3
 PAR.Seal_3 = DB1.PFS_Seal_3;

 // PAR.Seal 4 = DB1.PFS Seal 4
 PAR.Seal_4 = DB1.PFS_Seal_4;

 // PAR.Trailer Id = DB1.PFS Trailer Number
 PAR.Trailer_Id = DB1.PFS_Trailer_Number;

 // PAR.Number Pallets Received = DB1.PFS Pallets Received
 PAR.Number_Pallets_Received = DB1.PFS_Pallets_Received;

 // PAR.Number Pallets Loaded = DB1.PFS Pallets Loaded
 PAR.Number_Pallets_Loaded = DB1.PFS_Pallets_Loaded;

 //?R11331 DN 01/29/18-Updated Field Name.
 // PAR.Number Spacers Loaded = DB1.PFS Spacers Loaded
 PAR.Number_Spacers_Loaded = DB1.PFS_Spacers_Loaded;

 // PAR.Tot Pallet Tare = DB1.PFS Total Pallet Weight
 PAR.Tot_Pallet_Tare = DB1.PFS_Total_Pallet_Weight;

 CASE;

 // IF PAR.Number Pallets Loaded is Greater than zero
 IF PAR.Number_Pallets_Loaded > *ZERO;

 // PAR.Avg Pallet Tare = PAR.Tot Pallet Tare / PAR.Number Pallets Loaded *Rounded
 PAR.Avg_Pallet_Tare = PAR.Tot_Pallet_Tare / PAR.Number_Pallets_Loaded 'H';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Avg Pallet Tare = CON.*ZERO
 PAR.Avg_Pallet_Tare = *ZERO;

 ENDIF;

 // PAR.Export Load USDA-OK = PAR.Export Load USDA-OK
 PAR.Export_Load_USDA_OK = PAR.Export_Load_USDA_OK;

 // PAR.Recorder ID = DB1.PFS Recorder ID
 PAR.Recorder_ID = DB1.PFS_Recorder_ID;

 EXECUTE FUNCTION(RTV All Ords Shipped?  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1366564;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Status_Y_or_N);
 {
  //?USER: Initialize routine

  // PAR.Status - Y or N = CND.yes
  PAR.Status_Y_or_N = 'Y';

  //?USER: Process Data record

  //?Assume all orders are shipped, unless find one that isn't
  EXECUTE FUNCTION(RTV Order Status       RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1131568;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Header_Status);
  PARAMETER(WRK.TXT_field_not_needed);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.Header Status is Conf/Comp/Canc
  IF PAR.Header_Status = 'X'/'C'/'R';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Status - Y or N = CND.no
  PAR.Status_Y_or_N = 'N';

  QUIT;

  ENDIF;

 }

 //?PRC:  All Orders on Load are Shipped.
 CASE;

 // IF LCL.Status - Y or N is yes
 IF LCL.Status_Y_or_N = 'Y';

 EXECUTE FUNCTION(RTV Act ShpDt Last Ord RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1444830;
 PARAMETER(PAR.Load_ID);
 PARAMETER(9999);
 PARAMETER(PAR.Actual_Ship_Date);
 PARAMETER(NLL.Ship_To_Name);
 PARAMETER(NLL.Ship_To_City);
 PARAMETER(NLL.Ship_To_State_Code);
 {
  //?USER: Initialize routine

  // PAR.Actual Shipped Date = CON.*ZERO
  PAR.Actual_Shipped_Date = *ZERO;

  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Actual Ship Date  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1444831;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Ship_To_Name);
  PARAMETER(PAR.Ship_To_City);
  PARAMETER(PAR.Ship_To_State_Code);
  PARAMETER(WRK.Actual_Shipped_Date);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Actual Shipped Date GT PAR.Actual Shipped Date
  IF WRK.Actual_Shipped_Date > PAR.Actual_Shipped_Date;

  // PAR.Actual Shipped Date = WRK.Actual Shipped Date
  PAR.Actual_Shipped_Date = WRK.Actual_Shipped_Date;

  ENDIF;

 }

 // PAR.Load Status = CND.Shipped
 PAR.Load_Status = 'S';

 // PAR.Ship Status = CND.Shipped
 PAR.Ship_Status = 'S';

 // Call program RTV UPD Ld Abs.Frt/Wgt XF.
 CALL PROGRAM(RTV UPD Ld Abs.Frt/Wgt XF) ('PDE0XFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Total_Load_Order_Weight);
 PARAMETER(LCL.Total_Freight);

 EXECUTE FUNCTION(CHG Last Used Date     CH) TYPE(CHGOBJ) FILE(OMFFREP)          AC1360310;
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(JOB.*Job_date);
 //?E4119 Also,Create trigger when CloseTruck so they can get Actual wt/qtys
 EXECUTE FUNCTION(PFS Upd OrdDtl ShpDte RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1761964;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Actual_Ship_Date);
 PARAMETER(PAR.MG_Created_Load);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(PFS Upd OrdDtl ShpDte RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1761965;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Actual_Ship_Date);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Actual Shipped Date is not entered
   IF DB1.Actual_Shipped_Date = *ZERO;

   EXECUTE FUNCTION(CHG Actual Ship Date   CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1366581;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Actual_Ship_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  //?E4119 Create trigger when CloseTruck so they can get Actual wt/qtys
  CASE;

  // IF PAR.MG Created Load is Yes
  IF PAR.MG_Created_Load = 'Y';

  // Call program Rtv Crt OH Trigger    XF.
  CALL PROGRAM(Rtv Crt OH Trigger    XF) ('PBWVXFR');
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Company_Number);

  ENDIF;

 }

 CASE;

 // IF PAR.Load U/M is CB or Mixed
 IF PAR.Load_U_M = 'CB'/'MX';

 EXECUTE FUNCTION(Rtv Last CB Prd Dt/Tm RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1991325;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.LH_Last_Combo_Prod_Date);
 PARAMETER(PAR.LH_Last_Combo_Prod_Time);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Last CB Prd Dt/Tm RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1991326;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.LH_Last_Combo_Prod_Date);
  PARAMETER(PAR.LH_Last_Combo_Prod_Time);
  {
   //?USER: Initialize routine

   // LCL.First Time Flag = CND.Yes
   LCL.First_Time_Flag = 'Y';

   //?USER: Process Data record

   CASE;

   // IF DB1.U/M - Ordered is Combos
   IF DB1.U_M_Ordered = 'CB';

   CASE;

   // IF DB1.Quantity Shipped Total is Greater than zero
   IF DB1.Quantity_Shipped_Total > *ZERO;

   CASE;

   // IF LCL.First Time Flag is Yes
   IF LCL.First_Time_Flag = 'Y';

   EXECUTE FUNCTION(Rtv Acct Co          RT) TYPE(RTVOBJ) FILE(CAADREP)            AC1802492;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // LCL.First Time Flag = CND.NO
   LCL.First_Time_Flag = 'N';

   ENDIF;

   EXECUTE FUNCTION(Rtv Last CB Prd Dt/Tm RT) TYPE(RTVOBJ) FILE(POB2CPP)           AC1991333;
   PARAMETER(PAR.Accounting_Company);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(PAR.PT_Production_Time);
   PARAMETER(PAR.PT_Label_Date_YYYYMMDD);
   {
    //?USER: Initialize routine

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   EXECUTE FUNCTION(CVT *YYMD to *CYMD    IF) TYPE(EXCINTFUN)                      AC1929228;
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.PT_Label_Date_YYYYMMDD);
   {
    //?Execute internal function

    //?** YEAR **
    // PAR.Year Code = PAR.DATE / CON.10000 *
    PAR.Year_Code = PAR.DATE / 10000;

    // PAR.Year  NBR USR = PAR.Year Code
    PAR.Year_NBR_USR = PAR.Year_Code;

    // PAR.Year  (Char) USR = CVTVAR(PAR.Year  NBR USR)
    PAR.Year_Char_USR = CVTVAR(PAR.Year_NBR_USR);

    //?** MONTH **
    // PAR.Month                 USR = PAR.DATE / CON.100 *
    PAR.Month_USR = PAR.DATE / 100;

    // PAR.Month (Char) USR = CVTVAR(PAR.Month                 USR)
    PAR.Month_Char_USR = CVTVAR(PAR.Month_USR);

    //?** DAY **
    // PAR.Day of Month USR = PAR.DATE
    PAR.Day_of_Month_USR = PAR.DATE;

    // PAR.Day   (Char) USR = CVTVAR(PAR.Day of Month USR)
    PAR.Day_Char_USR = CVTVAR(PAR.Day_of_Month_USR);

    //?CENTURY+YEAR
    CASE;

    // IF PAR.Year Code is Twentieth Century
    IF PAR.Year_Code <= 1999;

    // PAR.Date (Alpha) USR = CONCAT(CON.0,PAR.Year  (Char) USR,CON.*ZERO)
    PAR.Date_Alpha_USR = '0' + PAR.Year_Char_USR (*ZERO);

    //?CENTURY+YEAR
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Date (Alpha) USR = CONCAT(CON.1,PAR.Year  (Char) USR,CON.*ZERO)
    PAR.Date_Alpha_USR = '1' + PAR.Year_Char_USR (*ZERO);

    ENDIF;

    // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Month (Char) USR,CON.*ZERO)
    PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Month_Char_USR (*ZERO);

    // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Day   (Char) USR,CON.*ZERO)
    PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Day_Char_USR (*ZERO);

    // PAR.Date                  USR = CVTVAR(PAR.Date (Alpha) USR)
    PAR.Date_USR = CVTVAR(PAR.Date_Alpha_USR);

   }

   CASE;

   // IF PAR.Production Date LT PAR.LH Last Combo Prod Date
   IF PAR.Production_Date < PAR.LH_Last_Combo_Prod_Date;

   // IF PAR.Production Date GT PAR.LH Last Combo Prod Date
   IF PAR.Production_Date > PAR.LH_Last_Combo_Prod_Date;

   // PAR.LH Last Combo Prod Date = PAR.Production Date
   PAR.LH_Last_Combo_Prod_Date = PAR.Production_Date;

   // PAR.LH Last Combo Prod Time = PAR.PT Production Time
   PAR.LH_Last_Combo_Prod_Time = PAR.PT_Production_Time;

   // IF PAR.Production Date EQ PAR.LH Last Combo Prod Date
   IF PAR.Production_Date = PAR.LH_Last_Combo_Prod_Date;

   //?CHK: Production Time
   CASE;

   // IF PAR.PT Production Time GT PAR.LH Last Combo Prod Time
   IF PAR.PT_Production_Time > PAR.LH_Last_Combo_Prod_Time;

   // PAR.LH Last Combo Prod Time = PAR.PT Production Time
   PAR.LH_Last_Combo_Prod_Time = PAR.PT_Production_Time;

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

  }

 }

 ENDIF;

 //?R15305 DN 10/25/19-Build EDI 856 ASN Data Sets.
 // Call program Exc Crt EDI 856 ASN V2 XF.
 CALL PROGRAM(Exc Crt EDI 856 ASN V2 XF) ('PUOIXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('N');

 ENDIF;

 EXECUTE FUNCTION(Upd Whs Pallet Tare   RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1591448;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.USR_Warehouse_Code);
 PARAMETER(PAR.Tot_Pallet_Tare);
 PARAMETER(PAR.Number_Pallets_Loaded);
 PARAMETER(PAR.Avg_Pallet_Tare);
 {
  //?USER: Initialize routine

  // LCL.Order Changed Y/N = CND.*NO
  LCL.Order_Changed_Y_N = *NO;

  //?USER: Process Data record

  EXECUTE FUNCTION(Upd Whs Pallet Tare   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1591444;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Number_Pallets_Loaded);
  PARAMETER(PAR.Tot_Pallet_Tare);
  PARAMETER(PAR.Avg_Pallet_Tare);
  PARAMETER(PAR.USR_Warehouse_Code);
  PARAMETER(LCL.Order_Changed_Y_N);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Warehouse Code NE PAR.USR Warehouse Code
   IF DB1.Warehouse_Code <> PAR.USR_Warehouse_Code;

   QUIT;

   ENDIF;

   CASE;

   // IF DB1.Detail Line Status is Not cancelled
   IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

   EXECUTE FUNCTION(Chg Whs Pallet Tare   CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1591447;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Warehouse_Pallets_Loaded);
   PARAMETER(PAR.Warehouse_Pallet_Tare);
   PARAMETER(PAR.Warehouse_Avg_Pallet_Tare);
   // PAR.Order Changed Y/N = CND.*YES
   PAR.Order_Changed_Y_N = *YES;

   QUIT;

   ENDIF;

  }

  CASE;

  // IF LCL.Order Changed Y/N is *YES
  IF LCL.Order_Changed_Y_N = *YES;

  QUIT;

  ENDIF;

 }

 //?----------
 EXECUTE FUNCTION(PFS Upd Load Header   RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1733433;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Load_Status);
 PARAMETER(PAR.Reefer_Temperature);
 PARAMETER(PAR.Seal_1);
 PARAMETER(PAR.Seal_2);
 PARAMETER(PAR.Seal_3);
 PARAMETER(PAR.Seal_4);
 PARAMETER(PAR.Trailer_Id);
 PARAMETER(PAR.Ship_Status);
 PARAMETER(PAR.Number_Pallets_Received);
 PARAMETER(PAR.Number_Pallets_Loaded);
 PARAMETER(PAR.Actual_Departure_Date);
 PARAMETER(PAR.Departure_Time);
 PARAMETER(PAR.Number_Spacers_Loaded);
 PARAMETER(PAR.Recorder_ID);
 PARAMETER(PAR.BOL_Complete_Date);
 PARAMETER(PAR.BOL_Complete_Time);
 PARAMETER(PAR.Scheduled_Delivery_Date);
 PARAMETER(PAR.Scheduled_Delivery_Time);
 PARAMETER(PAR.Avg_Pallet_Tare);
 PARAMETER(PAR.Tot_Pallet_Tare);
 PARAMETER(PAR.Export_Load_USDA_OK);
 PARAMETER(PAR.LH_Last_Combo_Prod_Date);
 PARAMETER(PAR.LH_Last_Combo_Prod_Time);
 PARAMETER('M');
 {
  //?USER: Process Data record

  // LCL.Container Number = DB1.Container Number
  LCL.Container_Number = DB1.Container_Number;

  CASE;

  // IF DB1.Export Status is yes
  IF DB1.Export_Status = 'Y';

  CASE;

  // IF DB1.MG Created Load is Yes
  IF DB1.MG_Created_Load = 'Y';

  // LCL.Container Number = PAR.Trailer Id
  LCL.Container_Number = PAR.Trailer_Id;

  // Call program RTV UPD Cntnr-ords/ld  XF.
  CALL PROGRAM(RTV UPD Cntnr-ords/ld  XF) ('PBRXXFR');
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Shipping_Line);
  PARAMETER(LCL.Container_Number);

  ENDIF;

  ENDIF;

  EXECUTE FUNCTION(PFS Chg Load Header   CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC1733434;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Load_Status);
  PARAMETER(PAR.Reefer_Temperature);
  PARAMETER(PAR.Seal_1);
  PARAMETER(PAR.Seal_2);
  PARAMETER(PAR.Seal_3);
  PARAMETER(PAR.Seal_4);
  PARAMETER(PAR.Trailer_Id);
  PARAMETER(PAR.Ship_Status);
  PARAMETER(PAR.Number_Pallets_Received);
  PARAMETER(PAR.Number_Pallets_Loaded);
  PARAMETER(PAR.Actual_Departure_Date);
  PARAMETER(PAR.Departure_Time);
  PARAMETER(PAR.Number_Spacers_Loaded);
  PARAMETER(PAR.Recorder_ID);
  PARAMETER(PAR.BOL_Complete_Date);
  PARAMETER(PAR.BOL_Complete_Time);
  PARAMETER(LCL.Container_Number);
  PARAMETER(PAR.Scheduled_Delivery_Date);
  PARAMETER(PAR.Scheduled_Delivery_Time);
  PARAMETER(PAR.Avg_Pallet_Tare);
  PARAMETER(PAR.Tot_Pallet_Tare);
  PARAMETER(PAR.Export_Load_USDA_OK);
  PARAMETER(PAR.LH_Last_Combo_Prod_Date);
  PARAMETER(PAR.LH_Last_Combo_Prod_Time);
  PARAMETER(PAR.EDI_Status_1);
  {
   //?USER: Processing before Data read

   //?change log
   DO;

   //?FP1061
   //?TCJ 10/03/07 - Load Order Change Log created if Carrier Code or
   //?               Scheduled Delivery Date changes
   ENDDO;

   //?USER: Processing after Data read

   //?Save copy of fields written to Load Order Change Log
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Scheduled Delivery Date = DB1.Scheduled Delivery Date
   LCL.Scheduled_Delivery_Date = DB1.Scheduled_Delivery_Date;

   ENDIF;

   CASE;

   // IF DB1.MG Created Load is Yes
   IF DB1.MG_Created_Load = 'Y';

   //?If Seal 1 changes: Write TMS load trigger
   CASE;

   // IF PAR.Seal 1 NE DB1.Seal 1
   IF PAR.Seal_1 <> DB1.Seal_1;

   // OR PAR.Seal 2 NE DB1.Seal 2
   OR PAR.Seal_2 <> DB1.Seal_2;

   // OR PAR.Seal 3 NE DB1.Seal 3
   OR PAR.Seal_3 <> DB1.Seal_3;

   // OR PAR.Trailer Id NE DB1.Trailer Id
   OR PAR.Trailer_Id <> DB1.Trailer_Id;

   // LCL.Load Change Type = WRK.Blank for 12          USR
   LCL.Load_Change_Type = WRK.Blank_for_12_USR;

   // LCL.Load Change Type 2 = WRK.Blank for 12          USR
   LCL.Load_Change_Type_2 = WRK.Blank_for_12_USR;

   // LCL.Load Change Type 3 = WRK.Blank for 12          USR
   LCL.Load_Change_Type_3 = WRK.Blank_for_12_USR;

   // LCL.Load Change Type 4 = WRK.Blank for 12          USR
   LCL.Load_Change_Type_4 = WRK.Blank_for_12_USR;

   // LCL.Load Change Type 5 = WRK.Blank for 12          USR
   LCL.Load_Change_Type_5 = WRK.Blank_for_12_USR;

   CASE;

   // IF PAR.Trailer Id NE DB1.Trailer Id
   IF PAR.Trailer_Id <> DB1.Trailer_Id;

   // LCL.Load Change Type = CND.Trailer
   LCL.Load_Change_Type = 'TRAILR';

   ENDIF;

   CASE;

   // IF PAR.Seal 1 NE DB1.Seal 1
   IF PAR.Seal_1 <> DB1.Seal_1;

   // OR PAR.Seal 2 NE DB1.Seal 2
   OR PAR.Seal_2 <> DB1.Seal_2;

   // OR PAR.Seal 3 NE DB1.Seal 3
   OR PAR.Seal_3 <> DB1.Seal_3;

   CASE;

   // IF LCL.Load Change Type EQ WRK.Blank 6 USR
   IF LCL.Load_Change_Type = WRK.Blank_6_USR;

   // LCL.Load Change Type = CND.Export Seal 1
   LCL.Load_Change_Type = 'EXSEAL';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Load Change Type 2 = CND.Export Seal 1
   LCL.Load_Change_Type_2 = 'EXSEAL';

   ENDIF;

   ENDIF;

   // Call program Exc Crt TMS Load Trg  XF.
   CALL PROGRAM(Exc Crt TMS Load Trg  XF) ('PBXOXFR');
   PARAMETER(JOB.*Job_date);
   PARAMETER(JOB.*Job_time);
   PARAMETER(DB1.Load_ID);
   PARAMETER(DB1.Company_Number);
   PARAMETER(LCL.TMS_LH_Field_Chg_Text);
   PARAMETER('A');
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(LCL.Load_Change_Type);
   PARAMETER(LCL.Load_Change_Type_2);
   PARAMETER(LCL.Load_Change_Type_3);
   PARAMETER(LCL.Load_Change_Type_4);
   PARAMETER(LCL.Load_Change_Type_5);

   ENDIF;

   ENDIF;

   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   //?USER: Processing after Data update

   //?Load Order Change Log
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Scheduled Delivery Date
   CASE;

   // IF PAR.Scheduled Delivery Date NE LCL.Scheduled Delivery Date
   IF PAR.Scheduled_Delivery_Date <> LCL.Scheduled_Delivery_Date;

   //?Convert dates to character
   // LCL.Date From Alpha       USR = CVTVAR(LCL.Scheduled Delivery Date)
   LCL.Date_From_Alpha_USR = CVTVAR(LCL.Scheduled_Delivery_Date);

   // LCL.Date To Alpha         USR = CVTVAR(PAR.Scheduled Delivery Date)
   LCL.Date_To_Alpha_USR = CVTVAR(PAR.Scheduled_Delivery_Date);

   // Call program CRT Load/Order Chg Log XF.
   CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
   PARAMETER(DB1.Load_ID);
   PARAMETER(*ZERO);
   PARAMETER('SCHDLV');
   PARAMETER('SHP');
   PARAMETER(LCL.Date_From_Alpha_USR);
   PARAMETER(LCL.Date_To_Alpha_USR);
   PARAMETER(JOB.*USER);
   PARAMETER(JOB.*PROGRAM);
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Company_Number);
   PARAMETER(*ZERO);

   ENDIF;

   ENDIF;

  }

 }

 CASE;

 // IF PAR.Shipping Method is Prepaid
 IF PAR.Shipping_Method = 'PR'/'PT';

 // Call program UPD Rated Frt Post Shp XF.
 CALL PROGRAM(UPD Rated Frt Post Shp XF) ('PDJVXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);

 //?*------------------------------------------------------------*
 //?* 07/13/01 PKD The following routine will automatically create
 //?*              Freight Charges.
 //?* 04/21/06 RMC pass in the bol complete date
 //?* 08/14/08 LJB pass in override total load miles      E00207
 //?* 12/05/16 RMC R7575 only create for NOT MG Created loads
 CASE;

 // IF PAR.MG Created Load is Not MG Created Load
 IF PAR.MG_Created_Load = *BLANK;

 // Call program Clc Freight Charges   XF.
 CALL PROGRAM(Clc Freight Charges   XF) ('POL2XFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(PAR.Load_Status);
 PARAMETER(PAR.Flat_Amount);
 PARAMETER(PAR.Total_Stops);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Load_Type);
 PARAMETER(PAR.Total_Load_Miles);
 PARAMETER(PAR.Shipping_Method);
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Export_Status);
 PARAMETER(PAR.BOL_Complete_Date);
 PARAMETER(PAR.Shipping_Line);
 PARAMETER(PAR.Discharge_Port);
 PARAMETER(PAR.Load_Shag_Flag);
 PARAMETER(PAR.Load_Wash_Flag);
 PARAMETER(PAR.Override_Total_Load_Miles);

 ENDIF;

 //?*------------------------------------------------------------*
 ENDIF;

 // PAR.PFS Process Status = CND.Processed
 PAR.PFS_Process_Status = 1;

 ENDIF;

 EXECUTE FUNCTION(Chg PostSts/ErrRsn    CH) TYPE(CHGOBJ) FILE(PPBLCPP)           AC1736445;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER(DB1.PFS_Transaction_Date);
 PARAMETER(DB1.PFS_Transaction_Time);
 PARAMETER(DB1.PFS_Transaction_Seq);
 PARAMETER(DB1.PFS_Load_ID);
 PARAMETER(DB1.PFS_Seal_4);
 PARAMETER(PAR.PFS_Process_Status);
 PARAMETER(PAR.PFS_Error_Reason);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Change Stamp      IF) TYPE(EXCINTFUN)                      AC1732163;
  PARAMETER(DB1.PFS_Change_Date);
  PARAMETER(DB1.PFS_Change_Time);
  {
   //?Execute internal function

   // PAR.PFS Change Date = JOB.*Job date
   PAR.PFS_Change_Date = JOB.*Job_date;

   // PAR.PFS Change time = JOB.*Job time
   PAR.PFS_Change_Time = JOB.*Job_time;

  }

 }

 //?RMC E01523
 //?Just process 1 record.. if theres more than one, leave it til the next CT
 QUIT;

}


