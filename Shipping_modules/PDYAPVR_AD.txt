// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDYAPVR
// ?Date: 14.08.2025 Time: 03:33:34
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(WRK.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.Company Number Pass   USR = PAR.Company Number
PAR.Company_Number_Pass_USR = PAR.Company_Number;

// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

EXECUTE FUNCTION(Rtv Allow Multi-Whs   RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1512192;
PARAMETER(JOB.*USER);
PARAMETER(WRK.Allow_Multi_Warehouse);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?***** Change Log and Comments
DO;

//?*****
//?** 04/17/2015 LJB E004076
//?** Add Send Y/N flag to control email if no records.
//?*****
//?** 03/05/2015 LJB E003914
//?** Add Carrier Code to prompt screen. Make optional.
//?*****
//?** 04/04/2014 LJB E003072
//?** Add Requested Ship Date to prompt screen. Make optional.
//?** If entered, build report based on RDD, else base on SSD.
//?*****
//?** 10/20/2008 LJB E00240
//?** Add Select/Omit selector to screen. Add warehouses for the
//?** selection, pass to the print program.
//?*****
//?** 03/07/2006 LJB
//?** Default Company number only if Allow Multi-Company=NO,
//?** otherwise, leave it blank.
//?*****
ENDDO;

//?USER: Load screen

//?First time: Fill in report type
CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

//?deflt email address to all blanks
// WRK.Text Usr 50 = CONCAT(CON.*BLANK,CON.*BLANK,CON.*ZERO)
WRK.Text_Usr_50 = *BLANK + *BLANK (*ZERO);

// DTL.Email Address = WRK.Text Usr 50
DTL.Email_Address = WRK.Text_Usr_50;

// DTL.Daily HoldOver Rpt Type = CND.All Holdovers
DTL.Daily_HoldOver_Rpt_Type = 1;

// DTL.Condition Desc. 1  USR = Condition name of DTL.Daily HoldOver Rpt Type
DTL.Condition_Desc_1_USR = RTVCND(DTL.Daily_HoldOver_Rpt_Type);

//?** Default Co# only if Allow Multi-Co=No          3/07/2006 LJB
CASE;

// IF PAR.Allow Multi-Company is no
IF PAR.Allow_Multi_Company = 'N';

// DTL.Company Number = PAR.Company Number
DTL.Company_Number = PAR.Company_Number;

// DTL.Company Number CDE = PAR.Company Number
DTL.Company_Number_CDE = PAR.Company_Number;

ENDIF;

ENDIF;

//?** Get Co Name
CASE;

// IF DTL.Company Number CDE is not equal to zero
IF DTL.Company_Number_CDE <> *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?** Default Warehouse Code if allow multiple warehouse is not yes
CASE;

// IF WRK.Allow Multi Warehouse is no
IF WRK.Allow_Multi_Warehouse = 'N';

// DTL.Company Number CDE = PAR.Company Number
DTL.Company_Number_CDE = PAR.Company_Number;

// DTL.Warehouse 1 USR = WRK.Warehouse Code
DTL.Warehouse_1_USR = WRK.Warehouse_Code;

// DTL.USR Select/Omit Flag = CND.Select
DTL.USR_Select_Omit_Flag = 'S';

ENDIF;

//?USER: Process command keys

//?Prompt for Load ID
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Load ID
AND PGM.*Cursor_field = DTL.Load_ID;

// Call program SEL Load ID            SR.
CALL PROGRAM(SEL Load ID            SR) ('OMCPSRR');
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Company_Number);

ENDIF;

//?Edit Traffic Comments
CASE;

// IF DTL.*CMD key is CF05
IF DTL.*CMD_key = '05';

// Call program EDT Daily Holdover Cmt EF.
CALL PROGRAM(EDT Daily Holdover Cmt EF) ('PDYFEFR');
PARAMETER(DTL.Load_ID);

ENDIF;

//?USER: Validate fields

//?Process F4 on Company Number
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Company Number CDE
IF PGM.*Cursor_field = DTL.Company_Number_CDE;

CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(DTL.Company_Number_CDE);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

ENDIF;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Warehouse 1
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Warehouse 1 USR
AND PGM.*Cursor_field = DTL.Warehouse_1_USR;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.Warehouse_1_USR);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Warehouse 2
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Warehouse 2 USR
AND PGM.*Cursor_field = DTL.Warehouse_2_USR;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.Warehouse_2_USR);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Warehouse 3
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Warehouse 3 USR
AND PGM.*Cursor_field = DTL.Warehouse_3_USR;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.Warehouse_3_USR);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Warehouse 4
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Warehouse 4 USR
AND PGM.*Cursor_field = DTL.Warehouse_4_USR;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.Warehouse_4_USR);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Warehouse 5
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Warehouse 5 USR
AND PGM.*Cursor_field = DTL.Warehouse_5_USR;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.Warehouse_5_USR);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Warehouse 6
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Warehouse 6 USR
AND PGM.*Cursor_field = DTL.Warehouse_6_USR;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.Warehouse_6_USR);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Warehouse 7
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Warehouse 7 USR
AND PGM.*Cursor_field = DTL.Warehouse_7_USR;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.Warehouse_7_USR);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Warehouse 8
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Warehouse 8 USR
AND PGM.*Cursor_field = DTL.Warehouse_8_USR;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.Warehouse_8_USR);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Warehouse 9
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Warehouse 9 USR
AND PGM.*Cursor_field = DTL.Warehouse_9_USR;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.Warehouse_9_USR);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Warehouse 10
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Warehouse 10 USR
AND PGM.*Cursor_field = DTL.Warehouse_10_USR;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.Warehouse_10_USR);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Carrier Code                     E003914
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Carrier Code Usr
AND PGM.*Cursor_field = DTL.Carrier_Code_Usr;

// Call program SEL Active Carrier     SR.
CALL PROGRAM(SEL Active Carrier     SR) ('OMY6SRR');
PARAMETER(DTL.Carrier_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?CALC: Screen function fields

//?* Put Carrier name on the screen            E003914
CASE;

// IF DTL.Carrier Code Usr is entered
IF DTL.Carrier_Code_Usr <> *BLANK;

EXECUTE FUNCTION(RTV Active Carr Name   RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1447369;
PARAMETER(DTL.Carrier_Code_Usr);
PARAMETER(DTL.USR_Description_15);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


ENDIF;

//?USER: Validate relations

//?* At least one date field must be entered.
CASE;

// IF DTL.USR From Date is not entered
IF DTL.USR_From_Date = *ZERO;

// AND DTL.Requested Delivery Dt is not entered
AND DTL.Requested_Delivery_Dt = *ZERO;

// Send error message - 'Date must be entered.'
ERROR(USR0231);
MSGPARM(DTL.USR_From_Date);

ENDIF;

// DTL.Name = CON.*BLANK
DTL.Name = *BLANK;

//?Validate company if entered
CASE;

// IF DTL.Company Number CDE is not equal to zero
IF DTL.Company_Number_CDE <> *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is Company not found
IF PGM.*Return_code = 'USR0003';

// DTL.Company Number = DTL.Company Number CDE
DTL.Company_Number = DTL.Company_Number_CDE;

// Send error message - 'Company Number not found'
ERROR(USR0163);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Plant Co Status   RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1761084;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(LCL.Plant_Company_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?05/11/07 JRB removed hard coded companies
CASE;

// IF LCL.Plant Company Sts is Plant Company
IF LCL.Plant_Company_Sts = 'P';

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Company Number = DTL.Company Number CDE
DTL.Company_Number = DTL.Company_Number_CDE;

// DTL.Name = CON.*BLANK
DTL.Name = *BLANK;

// Send error message - 'Company Number not found'
ERROR(USR0163);

ENDIF;

ENDIF;

ENDIF;

// DTL.Condition Desc. 1  USR = Condition name of DTL.Daily HoldOver Rpt Type
DTL.Condition_Desc_1_USR = RTVCND(DTL.Daily_HoldOver_Rpt_Type);

//?Validate warehouse 1 if entered
CASE;

// IF DTL.Warehouse 1 USR is Entered
IF DTL.Warehouse_1_USR <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.Warehouse_1_USR);
PARAMETER(DTL.Description_1_usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.Warehouse_1_USR);

ENDIF;

//?Validate warehouse 1 if entered
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Description 1 usr = CND.Blanks
DTL.Description_1_usr = *BLANK;

ENDIF;

//?Validate warehouse 2 if entered
CASE;

// IF DTL.Warehouse 2 USR is Entered
IF DTL.Warehouse_2_USR <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.Warehouse_2_USR);
PARAMETER(DTL.Description_2_usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.Warehouse_2_USR);

ENDIF;

//?Validate warehouse 2 if entered
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Description 2 usr = CND.Blanks
DTL.Description_2_usr = *BLANK;

ENDIF;

//?Validate warehouse 3 if entered
CASE;

// IF DTL.Warehouse 3 USR is Entered
IF DTL.Warehouse_3_USR <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.Warehouse_3_USR);
PARAMETER(DTL.Description_3_usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.Warehouse_3_USR);

ENDIF;

//?Validate warehouse 3 if entered
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Description 3 usr = CND.Blanks
DTL.Description_3_usr = *BLANK;

ENDIF;

//?Validate warehouse 4 if entered
CASE;

// IF DTL.Warehouse 4 USR is Entered
IF DTL.Warehouse_4_USR <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.Warehouse_4_USR);
PARAMETER(DTL.Description_4_usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.Warehouse_4_USR);

ENDIF;

//?Validate warehouse 4 if entered
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Description 4 usr = CND.Blanks
DTL.Description_4_usr = *BLANK;

ENDIF;

//?Validate warehouse 5 if entered
CASE;

// IF DTL.Warehouse 5 USR is Entered
IF DTL.Warehouse_5_USR <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.Warehouse_5_USR);
PARAMETER(DTL.Description_5_usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.Warehouse_5_USR);

ENDIF;

//?Validate warehouse 5 if entered
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Description 5 usr = CND.Blanks
DTL.Description_5_usr = *BLANK;

ENDIF;

//?Validate warehouse 6 if entered
CASE;

// IF DTL.Warehouse 6 USR is Entered
IF DTL.Warehouse_6_USR <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.Warehouse_6_USR);
PARAMETER(DTL.Description_6_usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.Warehouse_6_USR);

ENDIF;

//?Validate warehouse 6 if entered
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Description 6 usr = CND.Blanks
DTL.Description_6_usr = *BLANK;

ENDIF;

//?Validate warehouse 7 if entered
CASE;

// IF DTL.Warehouse 7 USR is Entered
IF DTL.Warehouse_7_USR <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.Warehouse_7_USR);
PARAMETER(DTL.Description_7_usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.Warehouse_7_USR);

ENDIF;

//?Validate warehouse 7 if entered
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Description 7 usr = CND.Blanks
DTL.Description_7_usr = *BLANK;

ENDIF;

//?Validate warehouse 8 if entered
CASE;

// IF DTL.Warehouse 8 USR is Entered
IF DTL.Warehouse_8_USR <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.Warehouse_1_USR);
PARAMETER(DTL.Description_8_usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.Warehouse_8_USR);

ENDIF;

//?Validate warehouse 8 if entered
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Description 8 usr = CND.Blanks
DTL.Description_8_usr = *BLANK;

ENDIF;

//?Validate warehouse 9 if entered
CASE;

// IF DTL.Warehouse 9 USR is Entered
IF DTL.Warehouse_9_USR <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.Warehouse_9_USR);
PARAMETER(DTL.Description_9_usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.Warehouse_9_USR);

ENDIF;

//?Validate warehouse 9 if entered
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Description 9 usr = CND.Blanks
DTL.Description_9_usr = *BLANK;

ENDIF;

//?Validate warehouse 10 if entered
CASE;

// IF DTL.Warehouse 10 USR is Entered
IF DTL.Warehouse_10_USR <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.Warehouse_10_USR);
PARAMETER(DTL.Description_10_usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.Warehouse_10_USR);

ENDIF;

//?Validate warehouse 10 if entered
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Description 10 usr = CND.Blanks
DTL.Description_10_usr = *BLANK;

ENDIF;

//?If Omit is selected there must be at least 1 warehouse entered
CASE;

// IF DTL.USR Select/Omit Flag is Omit
IF DTL.USR_Select_Omit_Flag = 'O';

CASE;

// IF DTL.Warehouse 1 USR is EQ Blank
IF DTL.Warehouse_1_USR = *BLANK;

// AND DTL.Warehouse 2 USR is EQ Blank
AND DTL.Warehouse_2_USR = *BLANK;

// AND DTL.Warehouse 3 USR is EQ Blank
AND DTL.Warehouse_3_USR = *BLANK;

// AND DTL.Warehouse 4 USR is EQ Blank
AND DTL.Warehouse_4_USR = *BLANK;

// AND DTL.Warehouse 5 USR is EQ Blank
AND DTL.Warehouse_5_USR = *BLANK;

// AND DTL.Warehouse 6 USR is EQ Blank
AND DTL.Warehouse_6_USR = *BLANK;

// AND DTL.Warehouse 7 USR is EQ Blank
AND DTL.Warehouse_7_USR = *BLANK;

// AND DTL.Warehouse 8 USR is EQ Blank
AND DTL.Warehouse_8_USR = *BLANK;

// AND DTL.Warehouse 9 USR is EQ Blank
AND DTL.Warehouse_9_USR = *BLANK;

// AND DTL.Warehouse 10 USR is EQ Blank
AND DTL.Warehouse_10_USR = *BLANK;

// Send error message - 'Warehouse Code is required.'
ERROR(USR2015);
MSGPARM(DTL.Warehouse_1_USR);

ENDIF;

ENDIF;

//?Validate Carrier Code if entered              E003914
CASE;

// IF DTL.Carrier Code Usr is entered
IF DTL.Carrier_Code_Usr <> *BLANK;

EXECUTE FUNCTION(Val Carrier Active     RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1418093;
PARAMETER(DTL.Carrier_Code_Usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Carrier doesn't exist'
ERROR(USR1252);
MSGPARM(DTL.Carrier_Code_Usr);

ENDIF;

ENDIF;

//?USER: User defined action

MOVE *ALL (To: PAR From: DTL);

//?Set dates based on report type selected
CASE;

// IF DTL.Daily HoldOver Rpt Type is Business Day 0600-0559 am
IF DTL.Daily_HoldOver_Rpt_Type = '3';

// WRK.Date To               USR = DTL.USR From Date + CON.1 *DAYS
WRK.Date_To_USR = DATEINCR(DTL.USR_From_Date 1 'DY' 1111111 'NONE' 'N' 1);

// WRK.Thru Date Pass        USR = WRK.Date To               USR
WRK.Thru_Date_Pass_USR = WRK.Date_To_USR;

// WRK.Time 1           PASS USR = CON.060000
WRK.Time_1_PASS_USR = 060000;

// WRK.Time 2           PASS USR = CON.055900
WRK.Time_2_PASS_USR = 055900;

//?Set dates based on report type selected
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Thru Date Pass        USR = CON.*ZERO
WRK.Thru_Date_Pass_USR = *ZERO;

// WRK.Time 1           PASS USR = CON.*ZERO
WRK.Time_1_PASS_USR = 0;

// WRK.Time 2           PASS USR = CON.*ZERO
WRK.Time_2_PASS_USR = 0;

ENDIF;

//?Submit job for Print
// PAR.Company Number Pass   USR = DTL.Company Number CDE
PAR.Company_Number_Pass_USR = DTL.Company_Number_CDE;

//?* Pass Scheduled Ship Date
// PAR.From Date Pass        USR = DTL.USR From Date
PAR.From_Date_Pass_USR = DTL.USR_From_Date;

//?* Pass Requested Delivery Date                        E003072
// PAR.Date 2          PASS  USR = DTL.Requested Delivery Dt
PAR.Date_2_PASS_USR = DTL.Requested_Delivery_Dt;

// PAR.Carrier Code = DTL.Carrier Code Usr
PAR.Carrier_Code = DTL.Carrier_Code_Usr;

// WRK.Status - Y or N = CND.blank
WRK.Status_Y_or_N = *BLANK;

// Call program PRT Pmt/Pass Dly Hold  UP.
CALL PROGRAM(PRT Pmt/Pass Dly Hold  UP) ('PDFJUPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('SHP');
PARAMETER('PDX9CLP');
PARAMETER('Print Daily Holdovers');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Date_2_PASS_USR);
PARAMETER(PAR.From_Date_Pass_USR);
PARAMETER(WRK.Thru_Date_Pass_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(PAR.Carrier_Code);
PARAMETER(DTL.Daily_HoldOver_Rpt_Type);
PARAMETER(WRK.Time_1_PASS_USR);
PARAMETER(WRK.Time_2_PASS_USR);
PARAMETER(DTL.Warehouse_1_USR);
PARAMETER(DTL.Warehouse_2_USR);
PARAMETER(DTL.Warehouse_3_USR);
PARAMETER(DTL.Warehouse_4_USR);
PARAMETER(DTL.Warehouse_5_USR);
PARAMETER(DTL.Warehouse_6_USR);
PARAMETER(DTL.Warehouse_7_USR);
PARAMETER(DTL.Warehouse_8_USR);
PARAMETER(DTL.Warehouse_9_USR);
PARAMETER(DTL.Warehouse_10_USR);
PARAMETER(DTL.USR_Select_Omit_Flag);
PARAMETER(DTL.Email_Address);
PARAMETER(WRK.Status_Y_or_N);

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

