// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDKUXFR
// ?Date: 14.08.2025 Time: 03:28:38
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?This routine will receive an Item Price, chain to the Item
//?and determine the Hundred Weight Price for this item
EXECUTE FUNCTION(RTV Item Price Struct  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1230472;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(PAR.UOM_Pricing);
PARAMETER(PAR.Unit_Weight);
PARAMETER(WRK.Market_Overage);
PARAMETER(WRK.Standard_Overage_Underage);
PARAMETER(WRK.Commodity_Price_Group);
PARAMETER(WRK.Item_Pricing_Operation);
PARAMETER(WRK.Item_Pricing_Constant);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(CLC Convert Price      IF) TYPE(EXCINTFUN)                     AC1290254;
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(PAR.UOM_Pricing);
PARAMETER(PAR.Price_based_on_U_M1_S);
PARAMETER(PAR.Price_based_on_U_M2_S);
PARAMETER(PAR.Price_based_on_U_M3_S);
PARAMETER(PAR.Unit_Price);
{
 //?Execute internal function

 //?Initialize parameter values
 // PAR.Price based on U/M1 S = CON.*ZERO
 PAR.Price_based_on_U_M1_S = *ZERO;

 // PAR.Price based on U/M2 S = CON.*ZERO
 PAR.Price_based_on_U_M2_S = *ZERO;

 // PAR.Price based on U/M3 S = CON.*ZERO
 PAR.Price_based_on_U_M3_S = *ZERO;

 //?Process based on Unit of Measure entered
 CASE;

 // IF PAR.U/M - Primary EQ PAR.U/M - Pricing
 IF PAR.UOM_Primary = PAR.UOM_Pricing;

 // PAR.Price based on U/M1 S = PAR.Unit Price
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price;

 //?Process second U/M if entered
 CASE;

 // IF PAR.U/M - Second is Entered
 IF PAR.UOM_Second <> *BLANK;

 //?Convert based on operation code
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M2 S = PAR.Unit Price / PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price / PAR.Conversion_Factor_1 'H';

 ENDIF;

 //?Convert based on operation code
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 // PAR.Price based on U/M2 S = PAR.Unit Price * PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price * PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 //?Process third U/M if entered
 CASE;

 // IF PAR.U/M - Third is Entered
 IF PAR.UOM_Third <> *BLANK;

 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M3 S = PAR.Price based on U/M2 S / PAR.Conversion Factor 2
 PAR.Price_based_on_U_M3_S = PAR.Price_based_on_U_M2_S / PAR.Conversion_Factor_2 'H';

 ENDIF;

 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 // PAR.Price based on U/M3 S = PAR.Price based on U/M2 S * PAR.Conversion Factor 2
 PAR.Price_based_on_U_M3_S = PAR.Price_based_on_U_M2_S * PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Process based on Unit of Measure entered
 // IF PAR.U/M - Second EQ PAR.U/M - Pricing
 IF PAR.UOM_Second = PAR.UOM_Pricing;

 // PAR.Price based on U/M2 S = PAR.Unit Price
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 // PAR.Price based on U/M1 S = PAR.Unit Price * PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price * PAR.Conversion_Factor_1 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M1 S = PAR.Unit Price / PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price / PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 //?Process third U/M if entered
 CASE;

 // IF PAR.U/M - Third is Entered
 IF PAR.UOM_Third <> *BLANK;

 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M3 S = PAR.Unit Price / PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price / PAR.Conversion_Factor_2 'H';

 ENDIF;

 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 // PAR.Price based on U/M3 S = PAR.Unit Price * PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price * PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Process based on Unit of Measure entered
 // IF PAR.U/M - Third EQ PAR.U/M - Pricing
 IF PAR.UOM_Third = PAR.UOM_Pricing;

 // PAR.Price based on U/M3 S = PAR.Unit Price
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 // PAR.Price based on U/M2 S = PAR.Unit Price * PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price * PAR.Conversion_Factor_2 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M2 S = PAR.Unit Price / PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price / PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 // PAR.Price based on U/M1 S = PAR.Price based on U/M2 S * PAR.Conversion Factor 1
 PAR.Price_based_on_U_M1_S = PAR.Price_based_on_U_M2_S * PAR.Conversion_Factor_1 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M1 S = PAR.Price based on U/M2 S / PAR.Conversion Factor 1
 PAR.Price_based_on_U_M1_S = PAR.Price_based_on_U_M2_S / PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 ENDIF;

}


CASE;

// IF PAR.U/M - Pricing is Hundred Weight
IF PAR.UOM_Pricing = 'CW';

// PAR.Price Adjustment Amount = PAR.Unit Price
PAR.Price_Adjustment_Amount = PAR.Unit_Price;

// IF *OTHERWISE
IF *OTHERWISE;

//?Calculate into Hundred Weight
CASE;

// IF PAR.Unit Weight NE WRK.ZERO
IF PAR.Unit_Weight <> WRK.ZERO;

// WRK.Pricing Work Quantity 1 = CON.100 / PAR.Unit Weight *
WRK.Pricing_Work_Quantity_1 = 100 / PAR.Unit_Weight;

// WRK.Price Adjustment Amount = WRK.Pricing Work Quantity 1 * PAR.Price based on U
WRK.Price_Adjustment_Amount = WRK.Pricing_Work_Quantity_1 * PAR.Price_based_on_U_M1_S              +
'H';

//?Load Output parm "Price Adjustment Amount" with the CW Price
CASE;

// IF WRK.Price Adjustment Amount NE WRK.ZERO
IF WRK.Price_Adjustment_Amount <> WRK.ZERO;

// PAR.Price Adjustment Amount = WRK.Price Adjustment Amount
PAR.Price_Adjustment_Amount = WRK.Price_Adjustment_Amount;

//?Load Output parm "Price Adjustment Amount" with the CW Price
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Price Adjustment Amount = PAR.Unit Price
PAR.Price_Adjustment_Amount = PAR.Unit_Price;

ENDIF;

ENDIF;

ENDIF;

