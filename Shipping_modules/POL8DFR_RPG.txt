      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      Order Management System
      * PROGRAM:     POL8DFR
      * TITLE:       View Item Loads
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     07/16/01
      *
      *
      * FUNCTION: This is a View that displays the order detail records associated with loads.
      *
      *           Restrictors:
      *               Company
      *               Scheduled ship date range
      *               Warehouse
      *
      *           Positioners:
      *               None
      *
      *           Selectors:
      *               Load id
      *               Load status
      *               Item
      *               Order number
      *               Order status
      *               Scheduled quantity
      *               Scheduled weight
      *               Shipped quantity
      *               Shipped weight
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 06/07/04  RMC PKTR01  remove company restiction - comment in keylists. use
      *                       opbgwkmf in place of opbgwklt
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fpol8dfr#  cf   e             workstn
     F                                     sfile(om7001s1:hdrrn1)
     F                                     infds(iofeed)
      *
      *
      *
     Fomfjcpl0  if   e           k disk
      *    Load header
      *
      *
      *
     Fopbfcplg  if   e           k disk
      *    Order header
      *
      *
     Fopbfcpl1  if   e           k disk    prefix(p1)
      *    Order header
      *
      *
     F*pbgwklt  if   e           k disk    prefix(p2)
     Fopbgwkmf  if   e           k disk    prefix(p2)
      *    Order detail
      *
      *
     Fopbgwkl0  if   e           k disk
      *    Order detail
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      * Define array holding load ids that have been processed.
      *
     D                 ds
     D load                           7  0 dim(500)
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D maxmsg          s              2  0  inz(20)
     D routne          s              6
     D reset           s              1    inz('N')
     D norecs          s              1    inz('N')
     D wkflow          s                   like(idflow)
     D rtncd           s              7
      *
      *
      * Save fields for restrictors, positioners and selectors
      *
     D svloadid        s                   like(c1loadid)
     D svloadst        s                   like(c1loadst)
     D svorst          s                   like(c1orst)
     D svorno          s                   like(c1orno)
     D svitcd          s                   like(c1itcd)
     D svscqt          s                   like(c1scqt)
     D svscwt          s                   like(c1scwt)
     D svshqt          s                   like(c1shqt)
     D svshwt          s                   like(c1shwt)
      *
      *
      * Parms
      *
     D xxfrscshdt      s                   like(omaodt)
     D xxtoscshdt      s                   like(omaodt)
      *
      *
      * Array indexes
      *
     D x               s              3  0
     D y               s              3  0
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      * Date structures for formating SYNON dates into CCYYMMDD format
      *---------------------------------------------------------------
      *
      * Synon format CYYMMDD
      *
     D                 ds
     D  wk0ymd                 1      7  0
     D  wkcc                   1      1  0
     D  wkyy                   2      3  0
     D  wkmm                   4      5  0
     D  wkdd                   6      7  0
      *
      * Format MMDDYY
     D                 ds
     D  wkmdy                  1      6  0
     D  wkmon                  1      2  0
     D  wkday                  3      4  0
     D  wkyer                  5      6  0
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      * $set1 - set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * Clear and fill the subfile
      *
     C                   exsr      $clr1
     C                   exsr      $frsh1
      *
      * Set routine to display screen
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * $scrn1 - perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to crt
      *
     C                   write     om7001k1
     C                   write     om7001ec
     C                   exfmt     om7001c1
      *
      * Save the value of the lowest subfile rrn on the screen for
      * later repositioning of the subfile
      *
     C                   eval      wkflow = idflow
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-EXIT
     C                   eval      routne = exit
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   movel     yes           reset
     C                   eval      routne = set1
      *
     C                   when      *in28 = *on
     C                   call      'HPHELPCL'
     C                   parm                    sdpgm
     C                   eval      routne = scrn1
      *
      * Reposition the subfile if the user has changed any of the positioners
      * or selectors in the control record.
      *
     C                   when      svitcd <> c1itcd or
     C                             svloadid <> c1loadid or
     C                             svloadst <> c1loadst or
     C                             svorno <> c1orno or
     C                             svorst <> c1orst or
     C                             svscqt <> c1scqt or
     C                             svscwt <> c1scwt or
     C                             svshqt <> c1shqt or
     C                             svshwt <> c1shwt
     C                   exsr      $chksv
     C                   other
      *
      * User has pressed enter
      *
     C                   eval      routne = set1
     C                   move      yes           reset
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $chksv - Save the control record positioners/selectors
      *----------------------------------------------------------------
      *
     C     $chksv        begsr
      *
     C                   movel     no            reset
     C                   eval      routne = set1
      *
     C                   z-add     c1loadid      svloadid
     C                   move      c1loadst      svloadst
     C                   z-add     c1orno        svorno
     C                   move      c1orst        svorst
     C                   z-add     c1itcd        svitcd
     C                   z-add     c1scqt        svscqt
     C                   z-add     c1scwt        svscwt
     C                   z-add     c1shqt        svshqt
     C                   z-add     c1shwt        svshwt
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $clr1  - clear subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $clr1         begsr
      *
     C                   clear                   om7001s1
     C                   seton                                        83        sflclr
     C                   write     om7001c1
     C                   setoff                                       818283
      *                                                    81=sfldsp
      *                                                    82=sflend
      *                                                    83=sflclr
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $frsh1 - refresh/fill the subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $frsh1        begsr
      *
      * Initialize arrays and indexes
      *
     C                   z-add     0             x
     C                   z-add     0             y
     C                   z-add     0             load
      *
      * Set position in file
      *
     C     key01         setll     opbgwkmf
      *
      * Subfile loading is way outside the 'norm' in this program!!! We will
      * load the entire subfile at one time.
      *
      * Read each order detail line that has the user-specified
      * company/warehouse/item and falls in the user's selected date range.
      *
     C                   dou       *in90 = *on or p2omaodt > xxtoscshdt         Main load loop
     C     key02         reade     opbgwkmf                               90
     C                   if        *in90 = *off and p2omaodt <= xxtoscshdt      If process
      *
      * Retrieve the 'load id' associated with this company/order
      * from the order header.
      *
     C     key03         chain     opbfcpl1                           92
     C                   if        *in92 = *off                                 If order header
      *
      * Check the load id array to see if you have already done this load.
      * If you have not already processed this 'load', then continue.
      *
     C                   eval      x = 1
     C     p1bermnb      lookup    load(x)                                92
     C                   if        *in92 = *on                                  If already done
     C                   else
     C                   add       1             y
     C                   z-add     p1bermnb      load(y)
      *
      * Process all 'orders' from the order header file for this
      * company/load id.  For each order, you will read the order detail
      * and write the detail records to the subfile for display.
      *
     C     key04         setll     opbfcplg
     C                   dou       *in91 = *on                                  Do load orders
     C     key04         reade     opbfcplg                               91
     C                   if        *in91 = *off                                 If order
     C     key05         setll     opbgwkl0
     C                   exsr      $load1
     C                   endif                                                  If order
     C                   enddo                                                  Do load orders
      *
     C                   endif                                                  If aleady done
     C                   endif                                                  If order header
      *
     C                   endif                                                  If process
      *
     C                   enddo                                                  Main load loop
      *
      * Now, all writing to the subfile is complete. So, determine if you
      * had any records that met all the selection criteria.
      * If no records were written to the subfile, then issue
      * the standard message 'No data to Display'.
      *
     C                   if        hdrrn1 = 0                                   If no recs
     C                   movel     yes           norecs
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09002'
     C                   endif
      *
     C                   else
     C                   movel     no            norecs
     C                   endif                                                  If no recs
      *
      *
      * Set the page of the subfile to display.
      *
     C                   if        reset = yes
     C                   z-add     wkflow        hdpag1
     C                   else
     C                   z-add     1             hdpag1
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $load1- load subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $load1        begsr
      *
      * Fill the subfile until the end of the database file.
      *
     C                   dou       *in82 = *on                                  Do fill
     C     key05         reade     opbgwkl0                               82
     C                   if        *in82 = *off                                 If read
      *
      * Retrieve load status from load status header.
      *
     C     key04         chain     omfjcpl0                           92
     C                   if        *in92 = *off                                 If load hit
     C                   move      fjpkst        d1loadst
     C                   else
     C                   move      *blank        d1loadst
     C                   endif                                                  If load hit
      *
      * Only include records that match the user's selectors
      *
     C                   if        c1loadid <> 0 and                             If load id
     C                             c1loadid <> p1bermnb
     C                   else
      *
     C                   if        c1loadst <> *blank and                        If load st
     C                             c1loadst <> d1loadst
     C                   else
      *
     C                   if        c1orno <> 0 and                               If order
     C                             c1orno <> omc4nb
     C                   else
      *
     C                   if        c1orst <> *blank and                          If order st
     C                             c1orst <> begwst
     C                   else
      *
     C                   if        c1itcd <> 0 and                               If item
     C                             c1itcd <> omhgcd
     C                   else
      *
     C                   if        c1scqt <> 0 and                               If sched qty
     C                             c1scqt <> omccqt
     C                   else
      *
     C                   if        c1scwt <> 0 and                               If sched weight
     C                             c1scwt <> omauwg
     C                   else
      *
     C                   if        c1shqt <> 0 and                               If shipped qty
     C                             c1shqt <> omcbqt
     C                   else
      *
     C                   if        c1shwt <> 0 and                               If shipped weight
     C                             c1shwt <> omatwg
     C                   else
      *
      * Flip scheduled ship date from CYYMMDD to MMDDYY.
      *
     C                   z-add     omaodt        wk0ymd
     C                   exsr      $tomdy
     C                   z-add     wkmdy         d1mdy
      *
     C                   z-add     p1bermnb      d1loadid
     C                   move      begwst        d1orst
     C                   z-add     omhgcd        d1itcd
     C                   z-add     omc4nb        d1orno
     C                   z-add     omccqt        d1scqt
     C                   z-add     omauwg        d1scwt
     C                   z-add     omcbqt        d1shqt
     C                   z-add     omatwg        d1shwt
      *
     C                   add       1             hdrrn1
     C                   write     om7001s1
     C                   seton                                        81
      *
     C                   endif                                                  If shipped weight
     C                   endif                                                  If shipped qty
     C                   endif                                                  If sched weight
     C                   endif                                                  If sched qty
     C                   endif                                                  If item
     C                   endif                                                  If order st
     C                   endif                                                  If order
     C                   endif                                                  If load st
     C                   endif                                                  If load id
     C                   endif                                                  If read
     C                   enddo                                                  Do fill loop
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Flip SYNON date to MMDDYY
      *---------------------------------------------------------------
      *
     C     $tomdy        begsr
      *
     C                   z-add     wkyy          wkyer
     C                   z-add     wkmm          wkmon
     C                   z-add     wkdd          wkday
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * $exit - seton last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $wrmsg - write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * $clmsg - clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * *inzsr - initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *
     C     *entry        plist
     C                   parm                    rtncd
     C                   parm                    c1aic3            3 0
     C                   parm                    c1whcd
     C                   parm                    c1initcd
     C                   parm                    xxfrscshdt
     C                   parm                    xxtoscshdt
      *
      * Key lists
      *
     C     key01         klist
     C*                  kfld                    c1aic3
     C                   kfld                    c1initcd
     C                   kfld                    c1whcd
     C                   kfld                    xxfrscshdt
      *
      *
     C     key02         klist
     C*                  kfld                    c1aic3
     C                   kfld                    c1initcd
     C                   kfld                    c1whcd
      *
      *
     C     key03         klist
     C                   kfld                    p2omaic3
     C                   kfld                    p2omc4nb
      *
      *
     C     key04         klist
     C*                  kfld                    p1beaic3
     C                   kfld                    p1bermnb
      *
      *
     C     key05         klist
     C                   kfld                    beaic3
     C                   kfld                    bec4nb
      *
      * Flip incoming from/to dates to MMDDYY format for display on the
      * screen in the control record.
      *
     C                   z-add     xxfrscshdt    wk0ymd
     C                   exsr      $tomdy
     C                   z-add     wkmdy         c1frmdy
      *
     C                   z-add     xxtoscshdt    wk0ymd
     C                   exsr      $tomdy
     C                   z-add     wkmdy         c1tomdy
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
