// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POMPPVR
// ?Date: 14.08.2025 Time: 03:38:07
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?** 10/23/2006 LJB V61020A
//?** Send message to the screen that the print was submitted
//?** Add "Sales Route = Zero" field. Default to N to skip printing
//?** any records with a sales route of 000. This will skip transfers
//?*****
//?01/07/05 slm Change pgm to allow the company(load) as opitional
//?*****
EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

// LCL.First time flag 2     USR = CND.Yes
LCL.First_time_flag_2_USR = 'Y';

// PAR.Company Number CDE = CND.Equal to zero
PAR.Company_Number_CDE = *ZERO;

// PAR.Company Number = CND.Equal to zero
PAR.Company_Number = *ZERO;

//?** Default Sales Route = Zero to No             10/26/2006
// PAR.USR Display 1 = CND.No
PAR.USR_Display_1 = 'N';

//?USER: Load screen

CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

// DTL.Report Type - 1 or 2  USR = CND.By Ship Date
DTL.Report_Type_1_or_2_USR = 1;

ENDIF;

// DTL.Company Number = DTL.Company Number CDE
DTL.Company_Number = DTL.Company_Number_CDE;

CASE;

// IF DTL.Company Number is not equal to zero
IF DTL.Company_Number <> *ZERO;

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


ENDIF;

// DTL.Condition Desc. 9  USR = Condition name of DTL.Report Type - 1 or 2  USR
DTL.Condition_Desc_9_USR = RTVCND(DTL.Report_Type_1_or_2_USR);

//?** Default select of Sales Route = Zero to No   10/26/2006 LJB
CASE;

// IF DTL.USR Display 1 is *blank
IF DTL.USR_Display_1 = *BLANK;

// DTL.USR Display 1 = PAR.USR Display 1
DTL.USR_Display_1 = PAR.USR_Display_1;

// DTL.Text USR 4 = Condition name of DTL.USR Display 1
DTL.Text_USR_4 = RTVCND(DTL.USR_Display_1);

ENDIF;

//?USER: Validate fields

CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

//?SEL:  Company Number
CASE;

// IF PGM.*Cursor field <IS> DTL.Company Number CDE
IF PGM.*Cursor_field = DTL.Company_Number_CDE;

CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// DTL.Company Number = DTL.Company Number CDE
DTL.Company_Number = DTL.Company_Number_CDE;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(DTL.Company_Number);

// DTL.Company Number CDE = DTL.Company Number
DTL.Company_Number_CDE = DTL.Company_Number;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?SEL:  Sales Route
CASE;

// IF PGM.*Cursor field <IS> DTL.Sales Route Code
IF PGM.*Cursor_field = DTL.Sales_Route_Code;

// Call program SEL PD Sales Route Act SR.
CALL PROGRAM(SEL PD Sales Route Act SR) ('PDFWSRR');
PARAMETER(DTL.Sales_Route_Code);

ENDIF;

//?SEL:  Ship To Customer
CASE;

// IF PGM.*Cursor field <IS> DTL.Ship To Customer
IF PGM.*Cursor_field = DTL.Ship_To_Customer;

// Call program Zzz Customer by Name 2 SR.
CALL PROGRAM(Zzz Customer by Name 2 SR) ('POIGSRR');
PARAMETER(DTL.Ship_To_Customer);

ENDIF;

//?SEL:  Carrier
CASE;

// IF PGM.*Cursor field <IS> DTL.Carrier Code
IF PGM.*Cursor_field = DTL.Carrier_Code;

// Call program SEL Active Carrier     SR.
CALL PROGRAM(SEL Active Carrier     SR) ('OMY6SRR');
PARAMETER(DTL.Carrier_Code);

ENDIF;

ENDIF;

//?CALC: Screen function fields

EXECUTE FUNCTION(Rtv Plant Co Status   RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1761084;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(LCL.Plant_Company_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Validate Company Number
CASE;

// IF DTL.Company Number CDE is Equal to zero
IF DTL.Company_Number_CDE = *ZERO;

// DTL.Company Name DRV = CON.Requested All
DTL.Company_Name_DRV = 'Requested All';

//?05/11/07 JRB Removed hard coded companies
//?Validate Company Number
// IF LCL.Plant Company Sts is Plant Company
IF LCL.Plant_Company_Sts = 'P';

//?Validate Company Number
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Company Number not found.'
ERROR(USR2396);

SET CURSOR;

ENDIF;

//?Company zero
CASE;

// IF DTL.Company Number CDE is Equal to zero
IF DTL.Company_Number_CDE = *ZERO;

// DTL.Company Name DRV = CON.Requested All
DTL.Company_Name_DRV = 'Requested All';

//?Company zero
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Company Number = DTL.Company Number CDE
DTL.Company_Number = DTL.Company_Number_CDE;

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


ENDIF;

//?From date > to date
CASE;

// IF DTL.Scheduled Ship Date GT DTL.Date To               USR
IF DTL.Scheduled_Ship_Date > DTL.Date_To_USR;

// Send error message - 'From date exceeds to date.  Please re-enter.'
ERROR(USR0319);
MSGPARM(DTL.Scheduled_Ship_Date);

ENDIF;

//?Shp date from must be greater then zero
CASE;

// IF DTL.Scheduled Ship Date is not entered
IF DTL.Scheduled_Ship_Date = *ZERO;

// AND LCL.First time flag 2     USR is No
AND LCL.First_time_flag_2_USR = 'N';

// Send error message - 'Date must be entered.'
ERROR(USR0231);
MSGPARM(DTL.Scheduled_Ship_Date);

ENDIF;

// LCL.First time flag 2     USR = CND.No
LCL.First_time_flag_2_USR = 'N';

//?Cannot select Sales Route = 000 if report is by Sales Route
CASE;

// IF DTL.USR Display 1 is Yes
IF DTL.USR_Display_1 = 'Y';

// AND DTL.Report Type - 1 or 2  USR is By Sales Route
AND DTL.Report_Type_1_or_2_USR = '2';

// Send error message - 'Cannot select Sales Route = 000 if report is by Sales Route'
ERROR(USR3657);
MSGPARM(DTL.USR_Display_1);

ENDIF;

//?Shipped/Unshipped Condition Name
CASE;

// IF DTL.Shipped/Unshpd Sts USR is *ALL values
IF DTL.Shipped_Unshpd_Sts_USR = 'S'/'U';

// DTL.Condition Name USR = Condition name of DTL.Shipped/Unshpd Sts USR
DTL.Condition_Name_USR = RTVCND(DTL.Shipped_Unshpd_Sts_USR);

//?Shipped/Unshipped Condition Name
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Condition Name USR = CON.*All
DTL.Condition_Name_USR = *All;

ENDIF;

//?Sales Route Desc
CASE;

// IF DTL.Sales Route Code is entered
IF DTL.Sales_Route_Code <> *BLANK;

EXECUTE FUNCTION(Sales Route Desc      DRV) TYPE(DRVFLD)                        AC1575490;
PARAMETER(DTL.Sales_Route_Desc_DRV);
PARAMETER(DTL.Sales_Route_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1270614;
 PARAMETER(PAR.Sales_Route_Code);
 PARAMETER(PAR.Sales_Route_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?Sales Route Desc
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Sales Route Desc      DRV = CON.*All
DTL.Sales_Route_Desc_DRV = *All;

ENDIF;

//?Ship To Name
CASE;

// IF DTL.Ship To Customer is not equal to zero
IF DTL.Ship_To_Customer <> *ZERO;

EXECUTE FUNCTION(Ship To Name          DRV) TYPE(DRVFLD)                        AC1573561;
PARAMETER(DTL.Ship_To_Name_DRV);
PARAMETER(DTL.Ship_To_Customer);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?Ship To Name
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Ship To Name          DRV = CON.*All
DTL.Ship_To_Name_DRV = *All;

ENDIF;

//?Carrier Name
CASE;

// IF DTL.Carrier Code is entered
IF DTL.Carrier_Code <> *BLANK;

EXECUTE FUNCTION(Carrier Name DRV) TYPE(DRVFLD)                                 AC1582201;
PARAMETER(DTL.Carrier_Name_DRV);
PARAMETER(DTL.Carrier_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Carrier_Name_DRV);
 PARAMETER(NLL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

}


//?Carrier Name
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Carrier Name DRV = CON.*All
DTL.Carrier_Name_DRV = *All;

ENDIF;

//?Shipping Method
CASE;

// IF DTL.Shipping Method is *ALL values
IF DTL.Shipping_Method = 'CR'/'CT'/'PR'/'PT'/*BLANK;

// DTL.Condition Desc. 1  USR = Condition name of DTL.Shipping Method
DTL.Condition_Desc_1_USR = RTVCND(DTL.Shipping_Method);

//?Shipping Method
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Condition Desc. 1  USR = CON.*All
DTL.Condition_Desc_1_USR = *All;

ENDIF;

//?Shipped < Ordered
CASE;

// IF DTL.Status Flag 1  Y/N is Yes
IF DTL.Status_Flag_1_Y_N = 'Y';

// DTL.Condition Desc. 2  USR = Condition name of DTL.Status Flag 1  Y/N
DTL.Condition_Desc_2_USR = RTVCND(DTL.Status_Flag_1_Y_N);

//?Shipped < Ordered
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Condition Desc. 2  USR = CON.*All
DTL.Condition_Desc_2_USR = *All;

ENDIF;

//?Weight Ordered
CASE;

// IF DTL.Weight Ordered is Greater than zero
IF DTL.Weight_Ordered > *ZERO;

// DTL.Condition Desc. 3  USR = CON.*All
DTL.Condition_Desc_3_USR = *All;

//?Weight Ordered
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Condition Desc. 3  USR = CON.*BLANK
DTL.Condition_Desc_3_USR = *BLANK;

ENDIF;

//?LTL Flag
CASE;

// IF DTL.LTL Flag is Valid
IF DTL.LTL_Flag = 'N'/'Y';

// DTL.Condition Desc. 4  USR = Condition name of DTL.LTL Flag
DTL.Condition_Desc_4_USR = RTVCND(DTL.LTL_Flag);

//?LTL Flag
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Condition Desc. 4  USR = CON.*All
DTL.Condition_Desc_4_USR = *All;

ENDIF;

//?Load Type
CASE;

// IF DTL.Load Type is Bulk or Regular
IF DTL.Load_Type = 'B'/'R';

// DTL.Condition Desc. 5  USR = Condition name of DTL.Load Type
DTL.Condition_Desc_5_USR = RTVCND(DTL.Load_Type);

//?Load Type
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Condition Desc. 5  USR = CON.*All
DTL.Condition_Desc_5_USR = *All;

ENDIF;

// DTL.Condition Desc. 9  USR = Condition name of DTL.Report Type - 1 or 2  USR
DTL.Condition_Desc_9_USR = RTVCND(DTL.Report_Type_1_or_2_USR);

//?Slot type for load
CASE;

// IF DTL.Slot Type f/load USR NE WRK.Blank for 4           USR
IF DTL.Slot_Type_f_load_USR <> WRK.Blank_for_4_USR;

// DTL.Condition Desc. 10 USR = Condition name of DTL.Slot Type f/load USR
DTL.Condition_Desc_10_USR = RTVCND(DTL.Slot_Type_f_load_USR);

//?Slot type for load
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Condition Desc. 10 USR = CON.*All
DTL.Condition_Desc_10_USR = *All;

ENDIF;

//?Sales Route = Zero
CASE;

// IF DTL.USR Display 1 NE WRK.Blank for 4           USR
IF DTL.USR_Display_1 <> WRK.Blank_for_4_USR;

// DTL.Text USR 4 = Condition name of DTL.USR Display 1
DTL.Text_USR_4 = RTVCND(DTL.USR_Display_1);

//?Sales Route = Zero
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Condition Desc. 10 USR = CON.*All
DTL.Condition_Desc_10_USR = *All;

ENDIF;

//?USER: User defined action

// DTL.Company Number = DTL.Company Number CDE
DTL.Company_Number = DTL.Company_Number_CDE;

// PAR.PRT Description = CON.Weight Exception Report
PAR.PRT_Description = 'Weight Exception Report';

// Call program PMT Prt/Sbm Opt    SHR PV.
CALL PROGRAM(PMT Prt/Sbm Opt    SHR PV) ('PDKMPVR');
PARAMETER(PAR.PRT_Description);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('OMS');
PARAMETER(1);
PARAMETER(PAR.Hold_On_Jobq);
PARAMETER(PAR.Job_Log_Create);
PARAMETER(PAR.Hold);
PARAMETER(PAR.Log);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// Retrieve message - 'JOB(&1) jobq(&2) log(&3) hold(&4)'
PGM.*Sbmjob_override_string = RTVMSG(USR2684);
PARAMETER('PRTWGTEXC');
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Log);
PARAMETER(PAR.Hold);

// LCL.Copies NBR USR = CVTVAR(PAR.PRT Number of Copies)
LCL.Copies_NBR_USR = CVTVAR(PAR.PRT_Number_of_Copies);

//?** Default Sales Route = Zero to No if it is blank  10/26/2006 LJB
CASE;

// IF DTL.USR Display 1 is *blank
IF DTL.USR_Display_1 = *BLANK;

// DTL.USR Display 1 = PAR.USR Display 1
DTL.USR_Display_1 = PAR.USR_Display_1;

ENDIF;

// Call program Zzz Weight Exception  CL.
SBMJOB;
CALL PROGRAM(Zzz Weight Exception  CL) ('POMRUPC');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(DTL.Date_To_USR);
PARAMETER(DTL.Shipped_Unshpd_Sts_USR);
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Shipping_Method);
PARAMETER(DTL.Status_Flag_1_Y_N);
PARAMETER(DTL.Weight_Ordered);
PARAMETER(DTL.LTL_Flag);
PARAMETER(DTL.Load_Type);
PARAMETER(DTL.Report_Type_1_or_2_USR);
PARAMETER(DTL.Slot_Type_f_load_USR);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(LCL.Copies_NBR_USR);
PARAMETER(DTL.USR_Display_1);
SBMJOBOVR JOB(MASSCANCEL);
SBMJOBEND;

//?** 10/23/2006 LJB V61020A
//?** Send message to the screen that the print was submitted
// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

