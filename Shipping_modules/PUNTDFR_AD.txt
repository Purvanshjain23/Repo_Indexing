// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PUNTDFR
// ?Date: 14.08.2025 Time: 03:50:51
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?*** Program was cloned from PPXCDFR.
EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(RTV Sys Date Format    RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1264543;
PARAMETER(PAR.User_Profile_Name);
PARAMETER(PAR.System_Date_Format);

// PAR.User Profile Name = JOB.*USER
PAR.User_Profile_Name = JOB.*USER;

// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Printer Device = CND.Not entered
PAR.PRT_Printer_Device = *BLANK;

//?USER: Initialize subfile control

CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

// CTL.Record Status = CND.Active
CTL.Record_Status = 'A';

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

ENDIF;

// CTL.City = CTL.USR 15 Text           USR
CTL.City = CTL.USR_15_Text_USR;

// CTL.Type of Customer Sav = CTL.Type of Customer
CTL.Type_of_Customer_USR_SAV = CTL.Type_of_Customer_USR;

// PAR.Error Flag            USR = CND.No
PAR.Error_Flag_USR = 'N';

//?USER: Initialize subfile record from DBF record

// RCD.Type of Customer = CND.*BLANKS
RCD.Type_of_Customer_USR = *BLANK;

// RCD.Name  25A  USR = DB1.Customer Name
RCD.Name_25A_USR = DB1.Customer_Name;

//?09/11/19 DN S15444-Only Select Ship To Customers.
CASE;

// IF RCD.Ship To Customer Flag is Allow Use as Ship To Cust
IF RCD.Ship_To_Customer_Flag = 'Y';

//?09/11/19 DN S15444-Only Select Ship To Customers.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?09/09/19 DN S15444-Set Default Shipping Co Sts for Plant Companies.
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(Rtv Dflt Ship Co Sts  RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC2175282;
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(RCD.Default_Shipping_Co_S_360);
PARAMETER(RCD.Default_Shipping_Co_S_440);
PARAMETER(RCD.Default_Shipping_Co_S_960);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?Set Default Shipping Co Sts for Each Plant Company.
 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 EXECUTE FUNCTION(Rtv Dflt Ship Co Sts  RT) TYPE(RTVOBJ) FILE(CAEOREP)           AC2175283;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(LCL.Default_Shipping_Co_Sts);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF NOT LCL.Default Shipping Co Sts is Blank
 IF ! LCL.Default_Shipping_Co_Sts = *BLANK;

 CASE;

 // IF DB1.Company Number is Guymon
 IF DB1.Company_Number = 360;

 // PAR.Default Shipping Co S-360 = LCL.Default Shipping Co Sts
 PAR.Default_Shipping_Co_S_360 = LCL.Default_Shipping_Co_Sts;

 // IF DB1.Company Number is Sioux City
 IF DB1.Company_Number = 440;

 // PAR.Default Shipping Co S-440 = LCL.Default Shipping Co Sts
 PAR.Default_Shipping_Co_S_440 = LCL.Default_Shipping_Co_Sts;

 // IF DB1.Company Number is St. Joseph
 IF DB1.Company_Number = 960;

 // PAR.Default Shipping Co S-960 = LCL.Default Shipping Co Sts
 PAR.Default_Shipping_Co_S_960 = LCL.Default_Shipping_Co_Sts;

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Save Original Values.
// RCD.Default Shipping Co S 360 = RCD.Default Shipping Co S-360
RCD.Default_Shipping_Co_S_360 = RCD.Default_Shipping_Co_S_360;

// RCD.Default Shipping Co S 440 = RCD.Default Shipping Co S-440
RCD.Default_Shipping_Co_S_440 = RCD.Default_Shipping_Co_S_440;

// RCD.Default Shipping Co S 960 = RCD.Default Shipping Co S-960
RCD.Default_Shipping_Co_S_960 = RCD.Default_Shipping_Co_S_960;

ENDIF;

//?** Set up Type of Customer
CASE;

// IF DB1.Ship To Customer Flag is Allow Use as Ship To Cust
IF DB1.Ship_To_Customer_Flag = 'Y';

// RCD.Type of Customer = CND.ShipTo
RCD.Type_of_Customer_USR = 'S';

CASE;

// IF DB1.A/R Customer Number EQ DB1.Ship To Customer
IF DB1.AR_Customer_Number = DB1.Ship_To_Customer;

// RCD.Type of Customer = CND.Ship to Bill To
RCD.Type_of_Customer_USR = 'X';

ENDIF;

//?** Set up Type of Customer
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DB1.A/R Customer Number EQ DB1.Ship To Customer
IF DB1.AR_Customer_Number = DB1.Ship_To_Customer;

// RCD.Type of Customer = CND.Bill To
RCD.Type_of_Customer_USR = 'B';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DB1.Parent Customer EQ DB1.Ship To Customer
IF DB1.Parent_Customer = DB1.Ship_To_Customer;

CASE;

// IF DB1.Parent Customer NE DB1.A/R Customer Number
IF DB1.Parent_Customer <> DB1.AR_Customer_Number;

// RCD.Type of Customer = CND.Parent
RCD.Type_of_Customer_USR = 'P';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?** Select by Type of Customer
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF CTL.Type of Customer NE WRK.BLANK
IF CTL.Type_of_Customer_USR <> WRK.BLANK;

CASE;

// IF CTL.Type of Customer EQ RCD.Type of Customer
IF CTL.Type_of_Customer_USR = RCD.Type_of_Customer_USR;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

ENDIF;

ENDIF;

//?** Select by Customer Name
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF CTL.Name 25A USR NE WRK.BLANK
IF CTL.Name_25A_USR <> WRK.BLANK;

// Call program CLC Call Qclscan       UP.
CALL PROGRAM(CLC Call Qclscan       UP) ('QCLSCAN');
PARAMETER(RCD.Name_25A_USR);
PARAMETER(25);
PARAMETER(1);
PARAMETER(CTL.Name_25A_USR);
PARAMETER(25);
PARAMETER(1);
PARAMETER(1);
PARAMETER(*BLANK);
PARAMETER(WRK.USR_Qclscan_Result);

CASE;

// IF WRK.USR Qclscan Result ? is Does contain
IF WRK.USR_Qclscan_Result > 0;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

// WRK.Text 1 Length USR = SUBSTRING(CTL.Name  25A  USR,CON.2,CON.1)
WRK.Text_1_Length_USR = SUBSTRING(CTL.Name_25A_USR:2:1);

// RCD.USR First New Subfile Rcd = CND.yes
RCD.USR_First_New_Subfile_Rcd = 'Y';

// PGM.*Scan limit = CON.999999
PGM.*Scan_limit = 999999;

//?** See if ACTIVE Accrual exists for this customer
// RCD.Reverse Image Flag USR = CND.No
RCD.Reverse_Image_Flag_USR = 'N';

EXECUTE FUNCTION(Val Accrual Exists    RT) TYPE(RTVOBJ) FILE(OMHOREP)           AC1680822;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.Period Ending Date GE JOB.*Job date
 IF DB1.Period_Ending_Date >= JOB.*Job_date;

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// RCD.Reverse Image Flag USR = CND.Yes
RCD.Reverse_Image_Flag_USR = 'Y';

ENDIF;

//?09/10/2019 DN S15444-Dflt Ship Co Sts Only Allowed for 1 Company.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Check the number of 'Y' instance on Dflt Ship Co Sts > 1 Else Error.
//?Check the number of 'N' instance on Dflt Ship Co Sts > 1 Else Error.
// Execute function SET Off Indics 38,39,40US.
EXECUTE FUNCTION(SET Off Indics 38,39,40US) TYPE(EXCUSRSRC) ('PUNUUFR');
{
 C                     SETOF                     38    SETOFF INDICATR
 C                     SETOF                     39    SETOFF INDICATR
 C                     SETOF                     40    SETOFF INDICATR
}


EXECUTE FUNCTION(Vry Dft Shpco for 1 Co2RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC2175436;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER('Y');
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Count_Records_USR);
{
 //?USER: Initialize routine

 // PAR.Count Records        USR = CON.*ZERO
 PAR.Count_Records_USR = *ZERO;

 // PAR.Company Number = CON.*ZERO
 PAR.Company_Number = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF PAR.Yes/No Selection      USR is Yes
 IF PAR.Yes_No_Selection_USR = 'Y';

 CASE;

 // IF DB1.Default Shipping Co Sts is Yes
 IF DB1.Default_Shipping_Co_Sts = 'Y';

 // PAR.Company Number = DB1.Company Number
 PAR.Company_Number = DB1.Company_Number;

 // PAR.Count Records        USR = CON.1 + PAR.Count Records        USR
 PAR.Count_Records_USR = 1 + PAR.Count_Records_USR;

 ENDIF;

 // IF PAR.Yes/No Selection      USR is No
 IF PAR.Yes_No_Selection_USR = 'N';

 CASE;

 // IF DB1.Default Shipping Co Sts is No
 IF DB1.Default_Shipping_Co_Sts = 'N';

 // PAR.Company Number = DB1.Company Number
 PAR.Company_Number = DB1.Company_Number;

 // PAR.Count Records        USR = CON.1 + PAR.Count Records        USR
 PAR.Count_Records_USR = 1 + PAR.Count_Records_USR;

 ENDIF;

 ENDIF;

}


//?Dft Ship Company only allowed for 1 Company.
CASE;

// IF LCL.Count Records        USR is GT 1
IF LCL.Count_Records_USR > 1;

//?Send Error Msg.
CASE;

// IF LCL.Company Number is Guymon
IF LCL.Company_Number = 360;

// Send error message - 'Dflt Ship Co can only be sel/non selected for 1 company'
ERROR(USR3617);
MSGPARM(RCD.Default_Shipping_Co_S_360);

//?Send Error Msg.
// IF LCL.Company Number is Seaboard Triumph Foods
IF LCL.Company_Number = 440;

// Send error message - 'Dflt Ship Co can only be sel/non selected for 1 company'
ERROR(USR3617);
MSGPARM(RCD.Default_Shipping_Co_S_440);

//?Send Error Msg.
// IF LCL.Company Number is St. Joseph
IF LCL.Company_Number = 960;

// Send error message - 'Dflt Ship Co can only be sel/non selected for 1 company'
ERROR(USR3617);
MSGPARM(RCD.Default_Shipping_Co_S_960);

ENDIF;

// PAR.Error Flag            USR = CND.Yes
PAR.Error_Flag_USR = 'Y';

//?Dft Ship Company only allowed for 1 Company.
// IF LCL.Count Records        USR is Zero
IF LCL.Count_Records_USR = *ZERO;

// Call program Vry Dft ShpCo for 1 Co XF.
CALL PROGRAM(Vry Dft ShpCo for 1 Co XF) ('PPWRXFR');
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(LCL.Count_Records_USR);
PARAMETER('N');

//?Dft Ship Company only allowed for 1 Company.
CASE;

// IF LCL.Count Records        USR is GT 1
IF LCL.Count_Records_USR > 1;

// PAR.Error Flag            USR = CND.Yes
PAR.Error_Flag_USR = 'Y';

// Send error message - 'Dflt Ship Co can only be sel/non selected for 1 company'
ERROR(USR3617);
MSGPARM(RCD.Default_Shipping_Co_S_360);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

// CTL.USR Name = CTL.Name 25A USR
CTL.USR_Name = CTL.Name_25A_USR;

//?** Convert name to 25 char upper case
CASE;

// IF CTL.USR Name NE WRK.USR Name
IF CTL.USR_Name <> WRK.USR_Name;

// Execute function CVT Str to Upper Alpha US.
EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
PARAMETER(CTL.USR_Name);
PARAMETER(CTL.USR_Name);
{
 PDWEUFR:  PGM PARM(&STRIN &STROUT)

 CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
}


// WRK.USR Name = CTL.USR Name
WRK.USR_Name = CTL.USR_Name;

// CTL.Name 25A USR = CTL.USR Name
CTL.Name_25A_USR = CTL.USR_Name;

// WRK.Name 25A USR = CTL.USR Name
WRK.Name_25A_USR = CTL.USR_Name;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?** Check for Type of Customer request
CASE;

// IF CTL.Type of Customer Sav NE CTL.Type of Customer
IF CTL.Type_of_Customer_USR_SAV <> CTL.Type_of_Customer_USR;

// CTL.Type of Customer Sav = CTL.Type of Customer
CTL.Type_of_Customer_USR_SAV = CTL.Type_of_Customer_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?** Position on ship to customers
CASE;

// IF CTL.Ship To Customer NE CTL.Ship to Customer      USR
IF CTL.Ship_To_Customer <> CTL.Ship_to_Customer_USR;

// CTL.Ship to Customer      USR = CTL.Ship To Customer
CTL.Ship_to_Customer_USR = CTL.Ship_To_Customer;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?** Position on city
CASE;

// IF CTL.City NE CTL.USR 15 Text           USR
IF CTL.City <> CTL.USR_15_Text_USR;

// CTL.City = CTL.USR 15 Text           USR
CTL.City = CTL.USR_15_Text_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?09/10/2019 DN S15444-Validate Default Shipping Co Sts Cannot Be Blank.
CASE;

// IF RCD.Default Shipping Co S-360 is Blank
IF RCD.Default_Shipping_Co_S_360 = *BLANK;

// Send error message - 'Value Required'
ERROR(USR1852);
MSGPARM(RCD.Default_Shipping_Co_S_360);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

//?09/10/2019 DN S15444-Validate Default Shipping Co Sts Cannot Be Blank.
// IF RCD.Default Shipping Co S-440 is Blank
IF RCD.Default_Shipping_Co_S_440 = *BLANK;

// Send error message - 'Value Required'
ERROR(USR1852);
MSGPARM(RCD.Default_Shipping_Co_S_440);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

//?09/10/2019 DN S15444-Validate Default Shipping Co Sts Cannot Be Blank.
// IF RCD.Default Shipping Co S-960 is Blank
IF RCD.Default_Shipping_Co_S_960 = *BLANK;

// Send error message - 'Value Required'
ERROR(USR1852);
MSGPARM(RCD.Default_Shipping_Co_S_960);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

ENDIF;

//?USER: Process subfile record (Post-confirm)

//?09/10/2019 DN S15444-Update Dflt Shipping Co Sts If Changed.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Record Updated = CND.no
PAR.USR_Record_Updated = 'N';

//?Co 360 Guymon.
CASE;

// IF RCD.Default Shipping Co S-360 NE RCD.Default Shipping Co S 360
IF RCD.Default_Shipping_Co_S_360 <> RCD.Default_Shipping_Co_S_360;

// RCD.Default Shipping Co S 360 = RCD.Default Shipping Co S-360
RCD.Default_Shipping_Co_S_360 = RCD.Default_Shipping_Co_S_360;

EXECUTE FUNCTION(Upd Dflt Ship Co Sts  RT) TYPE(RTVOBJ) FILE(CAEOREP)           AC2175356;
PARAMETER(360);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Default_Shipping_Co_S_360);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Dflt Ship Co Sts  CH) TYPE(CHGOBJ) FILE(CAEOREP)           AC2175357;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(PAR.Default_Shipping_Co_Sts);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


// PAR.USR Record Updated = CND.yes
PAR.USR_Record_Updated = 'Y';

ENDIF;

//?Co 440 Sioux City.
CASE;

// IF RCD.Default Shipping Co S-440 NE RCD.Default Shipping Co S 440
IF RCD.Default_Shipping_Co_S_440 <> RCD.Default_Shipping_Co_S_440;

// RCD.Default Shipping Co S 440 = RCD.Default Shipping Co S-440
RCD.Default_Shipping_Co_S_440 = RCD.Default_Shipping_Co_S_440;

EXECUTE FUNCTION(Upd Dflt Ship Co Sts  RT) TYPE(RTVOBJ) FILE(CAEOREP)           AC2175356;
PARAMETER(440);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Default_Shipping_Co_S_440);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Dflt Ship Co Sts  CH) TYPE(CHGOBJ) FILE(CAEOREP)           AC2175357;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(PAR.Default_Shipping_Co_Sts);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


// PAR.USR Record Updated = CND.yes
PAR.USR_Record_Updated = 'Y';

ENDIF;

//?Co 960 Saint Joseph.
CASE;

// IF RCD.Default Shipping Co S-960 NE RCD.Default Shipping Co S 960
IF RCD.Default_Shipping_Co_S_960 <> RCD.Default_Shipping_Co_S_960;

// RCD.Default Shipping Co S 960 = RCD.Default Shipping Co S-960
RCD.Default_Shipping_Co_S_960 = RCD.Default_Shipping_Co_S_960;

EXECUTE FUNCTION(Upd Dflt Ship Co Sts  RT) TYPE(RTVOBJ) FILE(CAEOREP)           AC2175356;
PARAMETER(960);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Default_Shipping_Co_S_960);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Dflt Ship Co Sts  CH) TYPE(CHGOBJ) FILE(CAEOREP)           AC2175357;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(PAR.Default_Shipping_Co_Sts);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


// PAR.USR Record Updated = CND.yes
PAR.USR_Record_Updated = 'Y';

ENDIF;

CASE;

// IF PAR.USR Record Updated is yes
IF PAR.USR_Record_Updated = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?09/10/2019 DN S15444-Dflt Ship Co Sts Only Allowed for 1 Company.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Check the number of 'Y' instance on Dflt Ship Co Sts > 1 Else Error.
//?Check the number of 'N' instance on Dflt Ship Co Sts > 1 Else Error.
//?Default Shipping Co Sts Changed?
CASE;

// IF RCD.Default Shipping Co S-360 NE RCD.Default Shipping Co S 360
IF RCD.Default_Shipping_Co_S_360 <> RCD.Default_Shipping_Co_S_360;

// OR RCD.Default Shipping Co S-440 NE RCD.Default Shipping Co S 440
OR RCD.Default_Shipping_Co_S_440 <> RCD.Default_Shipping_Co_S_440;

// OR RCD.Default Shipping Co S-960 NE RCD.Default Shipping Co S 960
OR RCD.Default_Shipping_Co_S_960 <> RCD.Default_Shipping_Co_S_960;

EXECUTE FUNCTION(Vry Dft Shpco for 1 Co2RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC2175436;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER('Y');
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Count_Records_USR);
{
 //?USER: Initialize routine

 // PAR.Count Records        USR = CON.*ZERO
 PAR.Count_Records_USR = *ZERO;

 // PAR.Company Number = CON.*ZERO
 PAR.Company_Number = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF PAR.Yes/No Selection      USR is Yes
 IF PAR.Yes_No_Selection_USR = 'Y';

 CASE;

 // IF DB1.Default Shipping Co Sts is Yes
 IF DB1.Default_Shipping_Co_Sts = 'Y';

 // PAR.Company Number = DB1.Company Number
 PAR.Company_Number = DB1.Company_Number;

 // PAR.Count Records        USR = CON.1 + PAR.Count Records        USR
 PAR.Count_Records_USR = 1 + PAR.Count_Records_USR;

 ENDIF;

 // IF PAR.Yes/No Selection      USR is No
 IF PAR.Yes_No_Selection_USR = 'N';

 CASE;

 // IF DB1.Default Shipping Co Sts is No
 IF DB1.Default_Shipping_Co_Sts = 'N';

 // PAR.Company Number = DB1.Company Number
 PAR.Company_Number = DB1.Company_Number;

 // PAR.Count Records        USR = CON.1 + PAR.Count Records        USR
 PAR.Count_Records_USR = 1 + PAR.Count_Records_USR;

 ENDIF;

 ENDIF;

}


//?Dft Ship Company only allowed for 1 Company.
CASE;

// IF LCL.Count Records        USR is GT 1
IF LCL.Count_Records_USR > 1;

//?Send Error Msg.
CASE;

// IF LCL.Company Number is Guymon
IF LCL.Company_Number = 360;

// Send error message - 'Dflt Ship Co can only be sel/non selected for 1 company'
ERROR(USR3617);
MSGPARM(RCD.Default_Shipping_Co_S_360);

//?Send Error Msg.
// IF LCL.Company Number is Seaboard Triumph Foods
IF LCL.Company_Number = 440;

// Send error message - 'Dflt Ship Co can only be sel/non selected for 1 company'
ERROR(USR3617);
MSGPARM(RCD.Default_Shipping_Co_S_440);

//?Send Error Msg.
// IF LCL.Company Number is St. Joseph
IF LCL.Company_Number = 960;

// Send error message - 'Dflt Ship Co can only be sel/non selected for 1 company'
ERROR(USR3617);
MSGPARM(RCD.Default_Shipping_Co_S_960);

ENDIF;

// PAR.Error Flag            USR = CND.Yes
PAR.Error_Flag_USR = 'Y';

//?Dft Ship Company only allowed for 1 Company.
// IF LCL.Count Records        USR is Zero
IF LCL.Count_Records_USR = *ZERO;

// Call program Vry Dft ShpCo for 1 Co XF.
CALL PROGRAM(Vry Dft ShpCo for 1 Co XF) ('PPWRXFR');
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(LCL.Count_Records_USR);
PARAMETER('N');

//?Dft Ship Company only allowed for 1 Company.
CASE;

// IF LCL.Count Records        USR is GT 1
IF LCL.Count_Records_USR > 1;

// PAR.Error Flag            USR = CND.Yes
PAR.Error_Flag_USR = 'Y';

// Send error message - 'Dflt Ship Co can only be sel/non selected for 1 company'
ERROR(USR3617);
MSGPARM(RCD.Default_Shipping_Co_S_360);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?USER: Exit program processing

//?09/10/2019 DN S15444-Do Not Allow Exit, Dflt Ship Co Sts Error Exist.
CASE;

// IF PAR.Error Flag            USR is Yes
IF PAR.Error_Flag_USR = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

