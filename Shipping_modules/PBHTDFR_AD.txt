// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBHTDFR
// ?Date: 14.08.2025 Time: 03:48:01
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PAR.Application Code = CND.Order Management System
PAR.Application_Code = 'OMS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.USR First Line on Screen = CON.*ZERO
PAR.USR_First_Line_on_Screen = *ZERO;

// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// PAR.USR Status (Y/N) = CND.no
PAR.USR_Status_Y_N = 'N';

// PAR.User Profile Name = JOB.*USER
PAR.User_Profile_Name = JOB.*USER;

// Call program Rtv Plant Co/Org      XF.
CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
PARAMETER(WRK.Company_Number);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);

CASE;

// IF LCL.Company Organization is Daily's
IF LCL.Company_Organization = 'D';

// PAR.Allow Multi-Company = CND.yes
PAR.Allow_Multi_Company = 'Y';

ENDIF;

//?USER: Initialize subfile control

//?First time Through Program
CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

// CTL.Status - Y or N = CND.no
CTL.Status_Y_or_N = 'N';

EXECUTE FUNCTION(Rtv Prior Saturday    RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1618543;
PARAMETER(CTL.Company_Number);
PARAMETER(JOB.*Job_date);
PARAMETER(CTL.Thru_Date_USR);
{
 //?USER: Initialize routine

 // LCL.First Time Flag = CND.Yes
 LCL.First_Time_Flag = 'Y';

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF LCL.First Time Flag is Yes
 IF LCL.First_Time_Flag = 'Y';

 // LCL.First Time Flag = CND.NO
 LCL.First_Time_Flag = 'N';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Day of Week is Saturday
 IF DB1.Day_of_Week = '7';

 // PAR.Date Out = DB1.Post to G/L Date
 PAR.Date_Out = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

 ENDIF;

}


SET CURSOR;

ENDIF;

//?USER: Initialize subfile record from DBF record

//?Regular OR only
CASE;

// IF RCD.Order Type - Sales is Not Regular Order
IF RCD.Order_Type_Sales <> 'OR';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL: Thru ship date
CASE;

// IF CTL.Thru Date             USR is Entered
IF CTL.Thru_Date_USR <> *ZERO;

CASE;

// IF CTL.Thru Date             USR LT RCD.Actual Shipped Date
IF CTL.Thru_Date_USR < RCD.Actual_Shipped_Date;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL:  Company Number
CASE;

// IF CTL.Company Number is Equal to zero
IF CTL.Company_Number = *ZERO;

//?SEL:  Company Number
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DB1.Company Number EQ CTL.Company Number
IF DB1.Company_Number = CTL.Company_Number;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Sel: Customer Name
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF CTL.USR Description - 15 NE WRK.BLANK
IF CTL.USR_Description_15 <> WRK.BLANK;

// Execute function CVT Str to Upper Alpha US.
EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
PARAMETER(CTL.USR_Description_15);
PARAMETER(CTL.USR_Description_15);
{
 PDWEUFR:  PGM PARM(&STRIN &STROUT)

 CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
}


// Call program CLC Call Qclscan       UP.
CALL PROGRAM(CLC Call Qclscan       UP) ('QCLSCAN');
PARAMETER(RCD.Ship_To_Name);
PARAMETER(30);
PARAMETER(1);
PARAMETER(CTL.USR_Description_15);
PARAMETER(15);
PARAMETER(1);
PARAMETER(1);
PARAMETER(*BLANK);
PARAMETER(WRK.USR_Qclscan_Result);

CASE;

// IF WRK.USR Qclscan Result ? is Does contain
IF WRK.USR_Qclscan_Result > 0;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

// Execute function Clc Line on Scrn       US.
EXECUTE FUNCTION(Clc Line on Scrn       US) TYPE(EXCUSRSRC) ('PDLCUFR');
PARAMETER(PAR.USR_First_Line_on_Screen);
{
 0110 C*****  ##RR CONTAINS THE 1ST LINE ON SCREEN                    *****
 0124 C*****  ##RRMAX CONTAINS THE LAST LINE ON PRIOR SCREEN          *****
 0124 C*****  IF ##RR - ##RRMAX = 1, THIS IS THE FIRST LINE ON SCREEN *****
 0125 C           ##RR      SUB  ##RRMX    #OPLUF
}


EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(1);
PARAMETER(1);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Trans_Contol_AS400_Plant);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Trans_Contol_AS400_Plant);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?SEL: 1st Warehouse code
CASE;

// IF CTL.Warehouse Code is Warehouse Code not Blank
IF CTL.Warehouse_Code <> *BLANK;

CASE;

// IF CTL.Warehouse Code NE RCD.Warehouse Code
IF CTL.Warehouse_Code <> RCD.Warehouse_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Country Code only  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1531787;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Country_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


// RCD.Customer Name         USR = RCD.Ship To Name
RCD.Customer_Name_USR = RCD.Ship_To_Name;

EXECUTE FUNCTION(RTV OHE Arrival Dt    RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC2063699;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.OHE_Arrival_Date);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?SEL: Country Code
CASE;

// IF CTL.Country Code is Entered
IF CTL.Country_Code <> *BLANK;

CASE;

// IF CTL.Country Code NE RCD.Country Code
IF CTL.Country_Code <> RCD.Country_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?05/23/16 RMC E4119 remove live with tpm check
EXECUTE FUNCTION(RTV Departure DT/TM   RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC2062272;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Truck_Departure_Date);
PARAMETER(RCD.Truck_Departure_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?SEL: Departure Dt=0
CASE;

// IF CTL.Status - Y or N is yes
IF CTL.Status_Y_or_N = 'Y';

CASE;

// IF RCD.Truck Departure Date is Entered
IF RCD.Truck_Departure_Date <> *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL: Departure Dt
CASE;

// IF CTL.Truck Departure Date is Entered
IF CTL.Truck_Departure_Date <> *ZERO;

CASE;

// IF CTL.Truck Departure Date NE RCD.Truck Departure Date
IF CTL.Truck_Departure_Date <> RCD.Truck_Departure_Date;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL: Departure Tm  >=
CASE;

// IF CTL.Truck Departure Time is Entered
IF CTL.Truck_Departure_Time > *ZERO;

CASE;

// IF RCD.Truck Departure Time LT CTL.Truck Departure Time
IF RCD.Truck_Departure_Time < CTL.Truck_Departure_Time;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?F4 on Company Number
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Company Number
AND PGM.*Cursor_field = CTL.Company_Number;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(CTL.Company_Number);

ENDIF;

//?F4 Prompt for Customer Number
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Ship To Customer
AND PGM.*Cursor_field = CTL.Ship_To_Customer;

// Call program SEL Ship To Customer   SR.
CALL PROGRAM(SEL Ship To Customer   SR) ('PDR5SRR');
PARAMETER(CTL.Ship_To_Customer);

ENDIF;

//?F4 Prompt for warehouse code
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Warehouse Code
AND PGM.*Cursor_field = CTL.Warehouse_Code;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(CTL.Warehouse_Code);

ENDIF;

//?F4 Prompt for Sales Route
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Sales Route Code
AND PGM.*Cursor_field = CTL.Sales_Route_Code;

// Call program SEL PD Sales Route Act SR.
CALL PROGRAM(SEL PD Sales Route Act SR) ('PDFWSRR');
PARAMETER(CTL.Sales_Route_Code);

ENDIF;

//?F4 Customer name
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.USR Description - 15
AND PGM.*Cursor_field = CTL.USR_Description_15;

//?42704 slm add select on shipped to customer name
// Call program SEL Cust/ShpTo Flag 'Y'SR.
CALL PROGRAM(SEL Cust/ShpTo Flag 'Y'SR) ('PDYSSRR');
PARAMETER(CTL.Ship_To_Customer);

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(LCL.Ship_To_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.USR Description - 15 = LCL.Ship To Name
CTL.USR_Description_15 = LCL.Ship_To_Name;

ENDIF;

//?F5 Refresh
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F21=Email it
CASE;

// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

// Call program Pmt Enter Email Addr  PV.
CALL PROGRAM(Pmt Enter Email Addr  PV) ('POWGPVR');
PARAMETER(LCL.Email_Address);

CASE;

// IF CTL.Company Number is Equal to zero
IF CTL.Company_Number = *ZERO;

// Send error message - 'Company Number is required when Spreadsheets or Reports selected'
ERROR(USR4505);
MSGPARM(CTL.Company_Number);

ENDIF;

//?Email it
CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// OR LCL.Email Address is Blank
OR LCL.Email_Address = *BLANK;

//?Email it
// IF *OTHERWISE
IF *OTHERWISE;

//?email SHPNOTINV
// LCL.Company Number Pass   USR = CTL.Company Number
LCL.Company_Number_Pass_USR = CTL.Company_Number;

CASE;

// IF CTL.Thru Date             USR is Not Entered
IF CTL.Thru_Date_USR = *ZERO;

// CTL.Thru Date             USR = JOB.*Job date
CTL.Thru_Date_USR = JOB.*Job_date;

ENDIF;

// LCL.Date 1          PASS  USR = CTL.Thru Date             USR
LCL.Date_1_PASS_USR = CTL.Thru_Date_USR;

// Call program CLP Exec sql SHPNOTINV UP.
SBMJOB;
CALL PROGRAM(CLP Exec sql SHPNOTINV UP) ('HBH0UPC');
PARAMETER(LCL.Return_Code_Usr);
PARAMETER(LCL.Date_1_PASS_USR);
PARAMETER(LCL.Company_Number_Pass_USR);
PARAMETER(LCL.Email_Address);
SBMJOBOVR JOB(SHPNOTINV);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

ENDIF;

ENDIF;

//?F22=Email Chg Log for ACTSHP
CASE;

// IF CTL.*CMD key is CF22
IF CTL.*CMD_key = '22';

CASE;

// IF CTL.Company Number is Equal to zero
IF CTL.Company_Number = *ZERO;

// Send error message - 'Company Number is required when Spreadsheets or Reports selected'
ERROR(USR4505);
MSGPARM(CTL.Company_Number);

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.From Date             USR = CON.*ZERO
LCL.From_Date_USR = *ZERO;

// LCL.To Date               USR = CON.*ZERO
LCL.To_Date_USR = *ZERO;

// Call program Pmt Enter Email/Dt RngPV.
CALL PROGRAM(Pmt Enter Email/Dt RngPV) ('PBHYPVR');
PARAMETER(LCL.From_Date_USR);
PARAMETER(LCL.To_Date_USR);
PARAMETER(LCL.Email_Address);

//?Email it
CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// OR LCL.Email Address is Blank
OR LCL.Email_Address = *BLANK;

// OR LCL.From Date             USR is Zero
OR LCL.From_Date_USR = *ZERO;

// OR LCL.To Date               USR is Zero
OR LCL.To_Date_USR = *ZERO;

//?Email it
// IF *OTHERWISE
IF *OTHERWISE;

//?email load order change log for type "ACTSHP"
// LCL.Company Number Pass   USR = CTL.Company Number
LCL.Company_Number_Pass_USR = CTL.Company_Number;

// LCL.Date 1          PASS  USR = LCL.From Date             USR
LCL.Date_1_PASS_USR = LCL.From_Date_USR;

// LCL.Date 2          PASS  USR = LCL.To Date               USR
LCL.Date_2_PASS_USR = LCL.To_Date_USR;

// Call program CLP Exec sql ACTSHP  UP.
SBMJOB;
CALL PROGRAM(CLP Exec sql ACTSHP  UP) ('PBHZUPC');
PARAMETER(LCL.Return_Code_Usr);
PARAMETER(LCL.Date_1_PASS_USR);
PARAMETER(LCL.Date_2_PASS_USR);
PARAMETER(LCL.Company_Number_Pass_USR);
PARAMETER(LCL.Email_Address);
SBMJOBOVR JOB(LOGACTSHP);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

ENDIF;

ENDIF;

ENDIF;

//?thru date change
CASE;

// IF CTL.Thru Date             USR NE LCL.Thru Date             USR
IF CTL.Thru_Date_USR <> LCL.Thru_Date_USR;

// LCL.Thru Date             USR = CTL.Thru Date             USR
LCL.Thru_Date_USR = CTL.Thru_Date_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?departure date sts
CASE;

// IF CTL.Status - Y or N NE LCL.Status - Y or N
IF CTL.Status_Y_or_N <> LCL.Status_Y_or_N;

// LCL.Status - Y or N = CTL.Status - Y or N
LCL.Status_Y_or_N = CTL.Status_Y_or_N;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?description
CASE;

// IF CTL.USR Description - 15 NE WRK.USR Description - 15
IF CTL.USR_Description_15 <> WRK.USR_Description_15;

// WRK.USR Description - 15 = CTL.USR Description - 15
WRK.USR_Description_15 = CTL.USR_Description_15;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?whse change
CASE;

// IF CTL.Warehouse Code NE WRK.Warehouse Code
IF CTL.Warehouse_Code <> WRK.Warehouse_Code;

// WRK.Warehouse Code = CTL.Warehouse Code
WRK.Warehouse_Code = CTL.Warehouse_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?departure change
CASE;

// IF CTL.Truck Departure Date NE LCL.Truck Departure Date
IF CTL.Truck_Departure_Date <> LCL.Truck_Departure_Date;

// OR CTL.Truck Departure Time NE LCL.Truck Departure Time
OR CTL.Truck_Departure_Time <> LCL.Truck_Departure_Time;

// LCL.Truck Departure Date = CTL.Truck Departure Date
LCL.Truck_Departure_Date = CTL.Truck_Departure_Date;

// LCL.Truck Departure Time = CTL.Truck Departure Time
LCL.Truck_Departure_Time = CTL.Truck_Departure_Time;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?country code change
CASE;

// IF CTL.Country Code NE LCL.Country Code
IF CTL.Country_Code <> LCL.Country_Code;

// LCL.Country Code = CTL.Country Code
LCL.Country_Code = CTL.Country_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Validate NEW actual ship date
CASE;

// IF CTL.Actual Ship Date Usr is entered
IF CTL.Actual_Ship_Date_Usr <> *ZERO;

EXECUTE FUNCTION(RTV Next Saturday      RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1674395;
PARAMETER(PAR.Company_Number);
PARAMETER(JOB.*Job_date);
PARAMETER(LCL.Week_End_Date_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Day of Week is Saturday
 IF DB1.Day_of_Week = '7';

 // PAR.Scheduled Ship Date = DB1.Post to G/L Date
 PAR.Scheduled_Ship_Date = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

}


//?New date cant be > week ending date
CASE;

// IF CTL.Actual Ship Date Usr GT LCL.Week End Date        USR
IF CTL.Actual_Ship_Date_Usr > LCL.Week_End_Date_USR;

// Send error message - 'Invalid Date Change - Must be in the current week.'
ERROR(USR4587);
MSGPARM(CTL.Actual_Ship_Date_Usr);

ENDIF;

//?** New date cannot be in a revenue closed week
//?** TF812 requires the date in CCYYMMDD format.
EXECUTE FUNCTION(CNV cyymmdd to yyyymmdd) TYPE(EXCINTFUN)                       AC1732965;
PARAMETER(CTL.Actual_Ship_Date_Usr);
PARAMETER(WRK.Date_Out_80_USR);
{
 //?Execute internal function

 // LCL.Year Code = PAR.Date In  (7,0) USR *YEAR
 LCL.Year_Code = DATEDTLS(PAR.Date_In_70_USR 'YR' 1111111 'NONE' 'N' 1);

 // LCL.Month NBR USR = PAR.Date In  (7,0) USR *MONTH
 LCL.Month_NBR_USR = DATEDTLS(PAR.Date_In_70_USR 'MO' 1111111 'NONE' 'N' 1);

 // LCL.Day of Month USR = PAR.Date In  (7,0) USR *DAY OF MONTH
 LCL.Day_of_Month_USR = DATEDTLS(PAR.Date_In_70_USR 'DM' 1111111 'NONE' 'N' 1);

 // PAR.Year Alpha (YYYY) USR = CVTVAR(LCL.Year Code)
 PAR.Year_Alpha_YYYY_USR = CVTVAR(LCL.Year_Code);

 // PAR.Month (Char) USR = CVTVAR(LCL.Month NBR USR)
 PAR.Month_Char_USR = CVTVAR(LCL.Month_NBR_USR);

 // PAR.Day   (Char) USR = CVTVAR(LCL.Day of Month USR)
 PAR.Day_Char_USR = CVTVAR(LCL.Day_of_Month_USR);

 // PAR.Date (Char-8) USR = CONCAT(PAR.Year Alpha (YYYY) USR,PAR.Month (Char) USR,CON.*ZERO)
 PAR.Date_Char_8_USR = PAR.Year_Alpha_YYYY_USR + PAR.Month_Char_USR (*ZERO);

 // PAR.Date (Char-8) USR = CONCAT(PAR.Date (Char-8) USR,PAR.Day   (Char) USR,CON.*ZERO)
 PAR.Date_Char_8_USR = PAR.Date_Char_8_USR + PAR.Day_Char_USR (*ZERO);

 // PAR.Date Out (8,0) USR = CVTVAR(PAR.Date (Char-8) USR)
 PAR.Date_Out_80_USR = CVTVAR(PAR.Date_Char_8_USR);

}


// PAR.USR Check Y/N Status = CND.no
PAR.USR_Check_Y_N_Status = 'N';

// Call program VRY Dte is Closed Rev UP.
CALL PROGRAM(VRY Dte is Closed Rev UP) ('TF812');
PARAMETER(WRK.Date_Out_80_USR);
PARAMETER(PAR.USR_Check_Y_N_Status);

//?** If the Status flag = "N" then the Revenue Week is still open
//?** If it is "Y" then the Revenue Week is Closed.
//?** Posting to a closed Revenue Week is not allowed.
//?** If Actual Ship Date is in a Closed Revenue Week, dont allow
CASE;

// IF PAR.USR Check Y/N Status is yes
IF PAR.USR_Check_Y_N_Status = 'Y';

// Send error message - 'Invalid Date Change - Cannot be in a closed Revenue Week.'
ERROR(USR4586);
MSGPARM(CTL.Actual_Ship_Date_Usr);

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?1=Select for date change
CASE;

// IF RCD.*SFLSEL is *Select
IF RCD.*SFLSEL = '1'/'1';

CASE;

// IF CTL.Actual Ship Date Usr is not entered
IF CTL.Actual_Ship_Date_Usr = *ZERO;

// Send error message - 'Date must be entered.'
ERROR(USR0231);
MSGPARM(CTL.Actual_Ship_Date_Usr);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.Actual Ship Date Usr EQ RCD.Actual Shipped Date
IF CTL.Actual_Ship_Date_Usr = RCD.Actual_Shipped_Date;

// Send error message - 'New Date &1 not different than &2. No change made.'
ERROR(USR4584);
MSGPARM(CTL.Actual_Ship_Date_Usr);
MSGPARM(RCD.Actual_Shipped_Date);

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

ENDIF;

ENDIF;

//?5=Process request for detail
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

CASE;

// IF RCD.Billing Activity Type is Credit or Debit Memo
IF RCD.Billing_Activity_Type = '2'/'3';

// Call program DSP Credit/Debit Memo  D1.
CALL PROGRAM(DSP Credit/Debit Memo  D1) ('PDIXD1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Date);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.Event Code is Shipped Thru 07 History
IF RCD.Event_Code >= '04';
AND RCD.Event_Code <= '07';

// Call program DSP Ord Inq Ship Dtl   DF.
CALL PROGRAM(DSP Ord Inq Ship Dtl   DF) ('PDP3DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.Order_Sequence_Number);
PARAMETER(PAR.Application_Code);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program DSP Ord Inquiry Detail DF.
CALL PROGRAM(DSP Ord Inquiry Detail DF) ('PDPZDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.Order_Sequence_Number);
PARAMETER(WRK.Order_Secondary_Line_Seq);
PARAMETER(PAR.Application_Code);

ENDIF;

ENDIF;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?8=Process request Ordered vs. Shipped
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

CASE;

// IF RCD.Billing Activity Type is Credit or Debit Memo
IF RCD.Billing_Activity_Type = '2'/'3';

// Send information message - 'No Shipping Detail for CM/DM'
MESSAGE(USR2328 *INFO);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program DSP Order vs. Ship Dtl DF.
CALL PROGRAM(DSP Order vs. Ship Dtl DF) ('PDP7DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Type_Sales);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Ship_To_Name);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER(RCD.Order_Date);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Header_Status);
PARAMETER(RCD.Credit_Hold);
PARAMETER(RCD.Production_Hold);
PARAMETER(RCD.New_Customer_Hold);
PARAMETER(RCD.Sales_Route_Code);
PARAMETER(PAR.Application_Code);

ENDIF;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?9=Process Display Dispatch/Tracer request
CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

// Call program DSP Dispatch/Tracer    DF.
CALL PROGRAM(DSP Dispatch/Tracer    DF) ('PDT3DFR');
PARAMETER(RCD.Load_ID);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

SET CURSOR;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?16=Display Order Header
CASE;

// IF RCD.*SFLSEL is Option 16
IF RCD.*SFLSEL = '16';

// Call program Dsp Order Header       PV.
CALL PROGRAM(Dsp Order Header       PV) ('OMB5PVR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER(RCD.Date_of_Original_Entry);
PARAMETER(RCD.Requested_Delivery_Time);
PARAMETER(PAR.Application_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?USER: Process subfile record (Post-confirm)

//?1=Chg act ship date
CASE;

// IF RCD.*SFLSEL is *Select
IF RCD.*SFLSEL = '1'/'1';

CASE;

// IF CTL.Actual Ship Date Usr is entered
IF CTL.Actual_Ship_Date_Usr <> *ZERO;

EXECUTE FUNCTION(CHG Act Shp Dte + Dtl  IF) TYPE(EXCINTFUN)                     AC2062261;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(CTL.Actual_Ship_Date_Usr);
{
 //?Execute internal function

 EXECUTE FUNCTION(CHG Act Shp Dte + Dtl  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC2062262;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Actual_Ship_Date_Usr);
 {
  //?USER: Process Data record

  //?Crt change log:
  // LCL.Change Log Prior Value = CVTVAR(DB1.Actual Shipped Date)
  LCL.Change_Log_Prior_Value = CVTVAR(DB1.Actual_Shipped_Date);

  // LCL.Change Log New Value = CVTVAR(PAR.Actual Ship Date Usr)
  LCL.Change_Log_New_Value = CVTVAR(PAR.Actual_Ship_Date_Usr);

  EXECUTE FUNCTION(CRT Load/Order Chg Log IF) TYPE(EXCINTFUN)                     AC1849953;
  PARAMETER(DB1.Load_ID);
  PARAMETER('ACTSHP');
  PARAMETER('ACC');
  PARAMETER(LCL.Change_Log_Prior_Value);
  PARAMETER(LCL.Change_Log_New_Value);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  {
   //?Execute internal function

   CASE;

   // IF PAR.Load ID is Blank
   IF PAR.Load_ID = *ZERO;

   EXECUTE FUNCTION(RTV Next Key f/crt dt RT) TYPE(RTVOBJ) FILE(PDLHCPP)           AC2052180;
   PARAMETER(JOB.*Job_date);
   PARAMETER(JOB.*Job_time);
   PARAMETER(LCL.Sequence_Number);
   {
    //?USER: Initialize routine

    // PAR.Sequence Number = CON.1
    PAR.Sequence_Number = 1;

    //?USER: Processing if Data record not found

    // PAR.Sequence Number = CON.1
    PAR.Sequence_Number = 1;

    QUIT;

    //?USER: Process Data record

    CASE;

    // IF DB1.Sequence Number is EQ 999
    IF DB1.Sequence_Number = 999;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Sequence Number = DB1.Sequence Number + CON.1
    PAR.Sequence_Number = DB1.Sequence_Number + 1;

    QUIT;

    ENDIF;

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Next Key           RT) TYPE(RTVOBJ) FILE(PDLHCPP)          AC1485145;
   PARAMETER(PAR.Load_ID);
   PARAMETER(LCL.Sequence_Number);
   {
    //?USER: Initialize routine

    // PAR.Sequence Number = CON.1
    PAR.Sequence_Number = 1;

    //?USER: Processing if Data record not found

    // PAR.Sequence Number = CON.1
    PAR.Sequence_Number = 1;

    QUIT;

    //?USER: Process Data record

    CASE;

    // IF DB1.Sequence Number is EQ 999
    IF DB1.Sequence_Number = 999;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Sequence Number = DB1.Sequence Number + CON.1
    PAR.Sequence_Number = DB1.Sequence_Number + 1;

    QUIT;

    ENDIF;

   }

   ENDIF;

   //?Use system date/time to minimize dup record creation
   // Call program RTV System Date/Time   UP.
   CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
   PARAMETER(LCL.Current_System_Date);
   PARAMETER(LCL.Current_System_Time);

   EXECUTE FUNCTION(CRT Load/Order Chg Log CR) TYPE(CRTOBJ) FILE(PDLHCPP)          AC1465744;
   PARAMETER(LCL.Current_System_Date);
   PARAMETER(LCL.Current_System_Time);
   PARAMETER(LCL.Sequence_Number);
   PARAMETER(PAR.Load_ID);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Load_Change_Type);
   PARAMETER(PAR.Department_Control_Code);
   PARAMETER(PAR.Change_Log_Prior_Value);
   PARAMETER(PAR.Change_Log_New_Value);
   PARAMETER(JOB.*USER);
   PARAMETER(JOB.*PROGRAM);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   {
    //?USER: Processing if Data record already exists

    // PGM.*Return code = CND.*Record already exists
    PGM.*Return_code = 'Y2U0003';

    //?USER: Processing after Data update

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   //?Add seconds until it can be added successfully
   CASE;

   // IF PGM.*Return code is *Record already exists
   IF PGM.*Return_code = 'Y2U0003';

   // LCL.Created Time = LCL.Current System Time
   LCL.Created_Time = LCL.Current_System_Time;

   // DOW PGM.*Return code is *Record already exists
   DOW PGM.*Return_code = 'Y2U0003';

   // LCL.Created Time = LCL.Created Time + CON.1 *SECONDS
   LCL.Created_Time = TIMEINCR(LCL.Created_Time 1 'SC');

   EXECUTE FUNCTION(CRT Load/Order Chg Log CR) TYPE(CRTOBJ) FILE(PDLHCPP)          AC1465744;
   PARAMETER(LCL.Current_System_Date);
   PARAMETER(LCL.Created_Time);
   PARAMETER(LCL.Sequence_Number);
   PARAMETER(PAR.Load_ID);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Load_Change_Type);
   PARAMETER(PAR.Department_Control_Code);
   PARAMETER(PAR.Change_Log_Prior_Value);
   PARAMETER(PAR.Change_Log_New_Value);
   PARAMETER(JOB.*USER);
   PARAMETER(JOB.*PROGRAM);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   {
    //?USER: Processing if Data record already exists

    // PGM.*Return code = CND.*Record already exists
    PGM.*Return_code = 'Y2U0003';

    //?USER: Processing after Data update

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   ENDDO;

   ENDIF;

  }

  EXECUTE FUNCTION(CHG Act Shp Dte + Dtl  CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1410530;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Actual_Ship_Date_Usr);
  {
   //?USER: Processing before Data read

   EXECUTE FUNCTION(CHG All Act Ship Date  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1366580;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Actual_Shipped_Date);
   {
    //?USER: Process Data record

    CASE;

    // IF DB1.Detail Line Status is Cancelled
    IF DB1.Detail_Line_Status = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(CHG Actual Ship Date   CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1366581;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Actual_Shipped_Date);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

   }

   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // Call program TRG Order Hdr CHG Trig XT.
   CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Type_Sales);
   PARAMETER(DB1.AR_Customer_Number);
   PARAMETER(DB1.Ship_To_Customer);
   PARAMETER(DB1.Ship_To_Name);
   PARAMETER(DB1.Ship_To_Address_Line_1);
   PARAMETER(DB1.Ship_To_Address_Line_2);
   PARAMETER(DB1.Ship_To_Address_Line_3);
   PARAMETER(DB1.Ship_To_City);
   PARAMETER(DB1.Ship_To_State_Code);
   PARAMETER(DB1.Ship_To_Zip_Postal_Code);
   PARAMETER(DB1.Bill_to_Customer);
   PARAMETER(DB1.Bill_to_Name);
   PARAMETER(DB1.Bill_to_Address_Line_1);
   PARAMETER(DB1.Bill_to_Address_Line_2);
   PARAMETER(DB1.Bill_to_Address_Line_3);
   PARAMETER(DB1.Bill_to_City);
   PARAMETER(DB1.Bill_to_State_Code);
   PARAMETER(DB1.Bill_to_Zip_Postal_Code);
   PARAMETER(DB1.Customer_Purchase_Order_#);
   PARAMETER(DB1.Order_Date);
   PARAMETER(DB1.Requested_Ship_Date);
   PARAMETER(DB1.Actual_Shipped_Date);
   PARAMETER(DB1.Cancel_Date);
   PARAMETER(DB1.Terms_Code);
   PARAMETER(DB1.Special_Instructions);
   PARAMETER(DB1.Special_Instructions_2);
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Comment_Print_Acknowledge);
   PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
   PARAMETER(DB1.Comment_Print_Pick_Slip);
   PARAMETER(DB1.Comment_Print_Ship_Doc);
   PARAMETER(DB1.Reason_Code);
   PARAMETER(DB1.Order_in_Use);
   PARAMETER(DB1.Header_Status);
   PARAMETER(DB1.Header_Status_Last);
   PARAMETER(DB1.Order_Type_Print_Status);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(DB1.User_Original_Entry);
   PARAMETER(DB1.Date_of_Original_Entry);
   PARAMETER(DB1.Order_Value_Total);
   PARAMETER(DB1.Order_Weight_Total);
   PARAMETER(DB1.Credit_Hold);
   PARAMETER(DB1.Production_Hold);
   PARAMETER(DB1.New_Customer_Hold);
   PARAMETER(DB1.Requested_Delivery_Date);
   PARAMETER(DB1.Requested_Delivery_Time);
   PARAMETER(DB1.Accounts_Receiv_Ent_1);
   PARAMETER(DB1.Accounts_Receiv_Ent_2);
   PARAMETER(DB1.Load_ID);
   PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
   PARAMETER(DB1.Rated_Freight);
   PARAMETER(DB1.LTL_Flag);
   PARAMETER(DB1.Price_Audit);
   PARAMETER(DB1.Price_Status);
   PARAMETER(DB1.Shipping_Method);
   PARAMETER(DB1.Export_Status);
   PARAMETER(DB1.Palletize);
   PARAMETER(DB1.Shrink_Wrap);
   PARAMETER(DB1.Slip_Sheet);
   PARAMETER(DB1.Age_Code);
   PARAMETER(DB1.Reefer_Temperature);
   PARAMETER(DB1.Load_Type);
   PARAMETER(DB1.Attach_to_Invoice_Number);
   PARAMETER(DB1.Load_Plan_Order);
   PARAMETER(DB1.Print_Pick_Slip);
   PARAMETER(DB1.Resell_Reference_Number);
   PARAMETER(DB1.Special_Comment_1);
   PARAMETER(DB1.Special_Comment_2);
   PARAMETER(DB1.Affect_Auto_Accruals);
   PARAMETER(DB1.Sales_Route_Code);
   PARAMETER(DB1.Manager_Level_Code);
   PARAMETER(DB1.VP_Level_Code);
   PARAMETER(DB1.Attach_to_Order_Number);
   PARAMETER(DB1.Reason_for_Price_Audit);
   PARAMETER(DB1.Invoice_Number);
   PARAMETER(DB1.Invoice_Suffix);
   PARAMETER(DB1.Invoice_Date);
   PARAMETER(DB1.Event_Code);
   PARAMETER(DB1.Trans_Contol_AS400_Plant);
   PARAMETER(DB1.Modified_Flag);
   PARAMETER(DB1.A_R_order_Value_Total);
   PARAMETER(DB1.Billing_Activity_Type);
   PARAMETER(DB1.Block_Order_Flag);
   PARAMETER(DB1.Order_Certification_Flag);
   PARAMETER(DB1.Invoice_Order_Value_Tot);
   PARAMETER(DB1.Process_Sts_for_3C);
   PARAMETER(DB1.Order_Conf_Fax_Sts);
   PARAMETER(DB1.Manifest_Fax_Sts);
   PARAMETER(DB1.Invoice_Fax_Sts);
   PARAMETER(DB1.Transfer_in_Storage_Ind);
   PARAMETER(DB1.Email_Cust_On_Order_Ship);
   PARAMETER(DB1.Order_Emailed);
   PARAMETER(DB1.Export_Docs_Go_w_Driver);
   PARAMETER(DB1.Shipping_Temp_Code_C_F);
   PARAMETER(DB1.Broker_Order_Status);
   PARAMETER(DB1.Air_Freight_Order);
   PARAMETER(DB1.Order_Requires_Review);
   PARAMETER(DB1.OH_Load_Plan_Ready);
   PARAMETER(DB1.Export_USDA_Approved);
   PARAMETER(DB1.HPB_Ship_to_Warehouse);
   PARAMETER(DB1.OH_TF_Exempt_Code);
   PARAMETER(DB1.OH_Appt_Confirmation_Dt);
   PARAMETER(DB1.JPN_Invoice_Issuance_Date);
   PARAMETER(DB1.Load_Actual_Shipped_Date);
   PARAMETER(DB1.Load_BOL_Complete_Date);
   PARAMETER(DB1.Load_Truck_Departure_Date);
   PARAMETER(DB1.Maximum_Gross_Weight);
   PARAMETER(DB1.Time_of_Original_Entry);
   PARAMETER(DB1.OH_Appt_Confirmation_Tm);
   PARAMETER(DB1.Load_BOL_Complete_Time);
   PARAMETER(DB1.Load_Truck_Departure_Time);
   PARAMETER(DB1.Act_Frt_Reference_Amount);
   PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
   PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
   PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
   PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
   PARAMETER(DB1.Claim_Number);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);

   //?USER: Processing after Data update

   EXECUTE FUNCTION(Upd Actual Ship Dt    RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC2044825;
   PARAMETER(DB1.Load_ID);
   PARAMETER(PAR.Actual_Shipped_Date);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(CHG Actual Ship Date  CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC2044828;
    PARAMETER(DB1.Load_ID);
    PARAMETER(PAR.Actual_Ship_Date);
    {
     //?USER: Processing before Data update

     // DB1.Job Time = JOB.*Job time
     DB1.Job_Time = JOB.*Job_time;

     // DB1.User Id = JOB.*USER
     DB1.User_Id = JOB.*USER;

     // DB1.Job Name = JOB.*JOB
     DB1.Job_Name = JOB.*JOB;

     // DB1.Job Date = JOB.*Job date
     DB1.Job_Date = JOB.*Job_date;

    }

   }

  }

 }

}


ENDIF;

ENDIF;

//?USER: Final processing (Post-confirm)

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

