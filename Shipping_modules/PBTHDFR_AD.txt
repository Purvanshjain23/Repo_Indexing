// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBTHDFR
// ?Date: 14.08.2025 Time: 03:49:19
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PAR.Application Code = CND.Order Management System
PAR.Application_Code = 'OMS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PGM.*Scan limit = CND.9999999
PGM.*Scan_limit = 9999999;

// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// WRK.Text 2 = CON.ES
WRK.Text_2 = 'ES';

// Call program EXC Rtv Status        XF.
CALL PROGRAM(EXC Rtv Status        XF) ('PBXNXFR');
PARAMETER(PAR.Company_Number);
PARAMETER('TMSLDP');
PARAMETER(LCL.Live_with_TPM);

// Call program EXC Rtv Status-AS     XF.
CALL PROGRAM(EXC Rtv Status-AS     XF) ('PBX2XFR');
PARAMETER(PAR.Company_Number);
PARAMETER('TMSLDP');
PARAMETER(LCL.PFS_AccuSort_Active);

//?USER: Initialize subfile control

CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

//?Initialize Sweep date range calculated using today's date
// Call program CLC TMS Sweep Dates    XF.
CALL PROGRAM(CLC TMS Sweep Dates    XF) ('PBTGXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(JOB.*Job_date);
PARAMETER(LCL.Date_0_RGT);
PARAMETER(LCL.Date_1_RGT);
PARAMETER(LCL.Date_2_RGT);

//?For Mon, Tue, Wed, or Fri date 0 is used for From date
// CTL.Scheduled Ship Date USR = LCL.Date 0 RGT
CTL.Scheduled_Ship_Date_USR = LCL.Date_0_RGT;

//?For Thur: Sat, Sun, Mon dates are put into date 2 for end date
CASE;

// IF LCL.Date 2 RGT is Entered
IF LCL.Date_2_RGT <> *ZERO;

// CTL.USR Through Date = LCL.Date 2 RGT
CTL.USR_Through_Date = LCL.Date_2_RGT;

//?For Thur: Sat, Sun, Mon dates are put into date 2 for end date
// IF *OTHERWISE
IF *OTHERWISE;

//?For all other dates use date 0 for end date
// CTL.USR Through Date = LCL.Date 0 RGT
CTL.USR_Through_Date = LCL.Date_0_RGT;

ENDIF;

//?9.7.16 E4119  default current day for from date
// CTL.Scheduled Ship Date USR = JOB.*Job date
CTL.Scheduled_Ship_Date_USR = JOB.*Job_date;

// WRK.Scheduled Ship Date USR = CTL.Scheduled Ship Date USR
WRK.Scheduled_Ship_Date_USR = CTL.Scheduled_Ship_Date_USR;

// CTL.Scheduled Ship Date = CTL.Scheduled Ship Date USR
CTL.Scheduled_Ship_Date = CTL.Scheduled_Ship_Date_USR;

// WRK.USR Through Date = CTL.USR Through Date
WRK.USR_Through_Date = CTL.USR_Through_Date;

// WRK.Company Number = CTL.Company Number
WRK.Company_Number = CTL.Company_Number;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

ENDIF;

//?USER: Initialize subfile record from DBF record

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// WRK.*Record selected = CND.*YES
WRK.*Record_selected = 'Y';

EXECUTE FUNCTION(RTV Type              RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC2100377;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.OHE_Override_Type_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Skip if Block Orders
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF DB1.Block Order Flag is Block Order
IF DB1.Block_Order_Flag = 'B';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** Skip if LTL = NO
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF DB1.LTL Flag is No
IF DB1.LTL_Flag = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** Skip if Load ID is not zeros
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF DB1.Load ID is Entered
IF DB1.Load_ID <> *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** Skip if OH Load Plan Ready is not *blanks
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?** Skip if TMS Order Status is not blanks or "N"
CASE;

// IF DB1.OH Load Plan Ready is OH Sent to TMS
IF DB1.OH_Load_Plan_Ready = 'Y';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** If Cust Type is blank display all except 'ES' if live with DOM/EX only
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF CTL.Type Code is EQ Blank
IF CTL.Type_Code = *BLANK;

CASE;

// IF LCL.OHE Override Type Code EQ WRK.Text 2
IF LCL.OHE_Override_Type_Code = WRK.Text_2;

//?only want ES when live with tpm, and Accusort = N (live with dom/ex only)
//?                  ( Y= live with dom/ex only)
CASE;

// IF LCL.Live with TPM is Yes
IF LCL.Live_with_TPM = 'Y';

// AND LCL.PFS AccuSort Active is No
AND LCL.PFS_AccuSort_Active = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

// RCD.Type Code = LCL.OHE Override Type Code
RCD.Type_Code = LCL.OHE_Override_Type_Code;

ENDIF;

//?** If Cust Type entered, match. If blank, select all except 'ES'
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF CTL.Type Code is Entered
IF CTL.Type_Code <> *BLANK;

CASE;

// IF LCL.OHE Override Type Code NE CTL.Type Code
IF LCL.OHE_Override_Type_Code <> CTL.Type_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Type Code = LCL.OHE Override Type Code
RCD.Type_Code = LCL.OHE_Override_Type_Code;

ENDIF;

ENDIF;

ENDIF;

//?** Test date range
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF DB1.Scheduled Ship Date is not entered
IF DB1.Scheduled_Ship_Date = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF DB1.Scheduled Ship Date LT CTL.Scheduled Ship Date USR
IF DB1.Scheduled_Ship_Date < CTL.Scheduled_Ship_Date_USR;

// OR DB1.Scheduled Ship Date GT CTL.USR Through Date
OR DB1.Scheduled_Ship_Date > CTL.USR_Through_Date;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** Test for matching company number
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?** If Company Number passed in, only select matching
CASE;

// IF CTL.Company Number is greater than zero
IF CTL.Company_Number > *ZERO;

// AND DB1.Company Number NE CTL.Company Number
AND DB1.Company_Number <> CTL.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** Test for matching order#
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?** If Order# requested, only select matching
CASE;

// IF CTL.Order Number is Greater then zero
IF CTL.Order_Number > *ZERO;

// AND DB1.Order Number NE CTL.Order Number
AND DB1.Order_Number <> CTL.Order_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** Test for matching PO#
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?** If PO# is requested, select matching
CASE;

// IF CTL.Customer Purchase Order # is NE Blank
IF CTL.Customer_Purchase_Order_# <> *BLANK;

//?* Select if PO# matches exactly
CASE;

// IF CTL.Customer Purchase Order # NE DB1.Customer Purchase Order #
IF CTL.Customer_Purchase_Order_# <> DB1.Customer_Purchase_Order_#;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?** Test for matching Ship To Number
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?** If Ship To# is requested, select matching
CASE;

// IF CTL.Ship To Customer is not equal to zero
IF CTL.Ship_To_Customer <> *ZERO;

CASE;

// IF CTL.Ship To Customer NE DB1.Ship To Customer
IF CTL.Ship_To_Customer <> DB1.Ship_To_Customer;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?** Test for matching Ship To Name
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?** If Ship To Name is requested, select matching
CASE;

// IF CTL.Name 25A USR is Not blank
IF CTL.Name_25A_USR > *BLANK;

// Execute function CVT Str to Upper Alpha US.
EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
PARAMETER(CTL.Name_25A_USR);
PARAMETER(WRK.SH_Genset_Number);
{
 PDWEUFR:  PGM PARM(&STRIN &STROUT)

 CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
}


// Call program CLC Call Qclscan       UP.
CALL PROGRAM(CLC Call Qclscan       UP) ('QCLSCAN');
PARAMETER(RCD.Ship_To_Name);
PARAMETER(30);
PARAMETER(1);
PARAMETER(WRK.SH_Genset_Number);
PARAMETER(30);
PARAMETER(1);
PARAMETER(1);
PARAMETER(*BLANK);
PARAMETER(WRK.USR_Qclscan_Result);

CASE;

// IF WRK.USR Qclscan Result ? is Does contain
IF WRK.USR_Qclscan_Result > 0;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?** Test for matching Ship To City
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?** If Ship To City is requested, select matching
CASE;

// IF CTL.City 11 USR is Entered
IF CTL.City_11_USR <> *BLANK;

// Execute function CVT Str to Upper Alpha US.
EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
PARAMETER(CTL.City_11_USR);
PARAMETER(WRK.Text_20_USR);
{
 PDWEUFR:  PGM PARM(&STRIN &STROUT)

 CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
}


// Call program CLC Call Qclscan       UP.
CALL PROGRAM(CLC Call Qclscan       UP) ('QCLSCAN');
PARAMETER(RCD.Ship_To_City);
PARAMETER(20);
PARAMETER(1);
PARAMETER(WRK.Text_20_USR);
PARAMETER(20);
PARAMETER(1);
PARAMETER(1);
PARAMETER(*BLANK);
PARAMETER(WRK.USR_Qclscan_Result);

CASE;

// IF WRK.USR Qclscan Result ? is Does contain
IF WRK.USR_Qclscan_Result > 0;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?** Test for matching Ship To State
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?** If Ship To State is requested, select matching
CASE;

// IF CTL.Ship To State Code is State code not Blanks
IF CTL.Ship_To_State_Code <> *BLANK;

CASE;

// IF CTL.Ship To State Code NE DB1.Ship To State Code
IF CTL.Ship_To_State_Code <> DB1.Ship_To_State_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?** Test for matching Requested Delivery Date
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?** If Requested Delivery date is requested, select matching
CASE;

// IF CTL.Requested Delivery Date is entered
IF CTL.Requested_Delivery_Date <> *ZERO;

CASE;

// IF CTL.Requested Delivery Date NE DB1.Requested Delivery Date
IF CTL.Requested_Delivery_Date <> DB1.Requested_Delivery_Date;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?** Test for orders = 'A',  'H'
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?** Allow if header status is available, allocated,entered or held
CASE;

// IF DB1.Header Status is Available/Held
IF DB1.Header_Status = 'A'/'H';

//?** Allow if header status is available, allocated,entered or held
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** Test for matching warehouse, skip EF4 regardless
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?S17054 DN 04/07/21-Count Cases as Boxes. Replaced function with
//?  'RTV UM/Whs Code-Add CS RT'.
EXECUTE FUNCTION(RTV UM/Whs Code-Add CS RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2196569;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(1);
PARAMETER(0);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.USR_Unit_of_Measure);
{
 //?USER: Initialize routine

 // WRK.First Time Flag = CND.Yes
 WRK.First_Time_Flag = 'Y';

 // LCL.Boxes Total Quantity = CON.*ZERO
 LCL.Boxes_Total_Quantity = *ZERO;

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 //?PF3280 -- add "Cases" to the case-stmt
 // PAR.Warehouse Code = DB1.Warehouse Code
 PAR.Warehouse_Code = DB1.Warehouse_Code;

 CASE;

 // IF DB1.U/M - Ordered is Combos
 IF DB1.U_M_Ordered = 'CB';

 // OR DB1.U/M - Ordered is EQ Boxes
 OR DB1.U_M_Ordered = 'BX';

 // OR DB1.U/M - Ordered is Mixed
 OR DB1.U_M_Ordered = 'MX';

 // OR DB1.U/M - Ordered is Cases
 OR DB1.U_M_Ordered = 'CS';

 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?S17054 DN 04/06/21-Beyond this point, changed all 'U/M - Ordered'
 //?  to reference LCL Context instead of DB1.
 //?S17054 DN 04/06/21-Count Type 'Cases' (CS) as 'Boxes' (BX).
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.U/M - Ordered = DB1.U/M - Ordered
 LCL.U_M_Ordered = DB1.U_M_Ordered;

 CASE;

 // IF LCL.U/M - Ordered is Cases
 IF LCL.U_M_Ordered = 'CS';

 // LCL.U/M - Ordered = CND.EQ Boxes
 LCL.U_M_Ordered = 'BX';

 ENDIF;

 ENDIF;

 //?Sum for later check
 CASE;

 // IF LCL.U/M - Ordered is EQ Boxes
 IF LCL.U_M_Ordered = 'BX';

 // LCL.Boxes Total Quantity = LCL.Boxes Total Quantity + DB1.Quantity Ordered
 LCL.Boxes_Total_Quantity = LCL.Boxes_Total_Quantity + DB1.Quantity_Ordered;

 ENDIF;

 CASE;

 // IF PAR.USR Unit of Measure is *Blank
 IF PAR.USR_Unit_of_Measure = *BLANK;

 // PAR.USR Unit of Measure = LCL.U/M - Ordered
 PAR.USR_Unit_of_Measure = LCL.U_M_Ordered;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.U/M - Ordered EQ PAR.USR Unit of Measure
 IF LCL.U_M_Ordered = PAR.USR_Unit_of_Measure;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.U/M - Ordered = CND.Mixed
 WRK.U_M_Ordered = 'MX';

 // PAR.USR Unit of Measure = WRK.U/M - Ordered
 PAR.USR_Unit_of_Measure = WRK.U_M_Ordered;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?USER: Exit processing

 //?E2709 RMC 9/12/13  Classify as BX/CB - never MX
 CASE;

 // IF PAR.USR Unit of Measure is Mixed
 IF PAR.USR_Unit_of_Measure = 'MX';

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(DB1.Company_Number);
 PARAMETER('BOXLOAD');
 PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
 IF LCL.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

 // PAR.USR Unit of Measure = CND.Combos
 PAR.USR_Unit_of_Measure = 'CB';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Unit of Measure = CND.Boxed
 PAR.USR_Unit_of_Measure = 'BX';

 ENDIF;

 ENDIF;

}


//?** If Whse requested, only select matching
CASE;

// IF CTL.Warehouse Code is Not Blanks
IF CTL.Warehouse_Code <> *BLANK;

// AND CTL.Warehouse Code NE RCD.Warehouse Code
AND CTL.Warehouse_Code <> RCD.Warehouse_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL:  Order detail must exist ACTIVE  11/29/18 s14166
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(RTV Chk Any DtlExists  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2120531;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
{
 //?USER: Initialize routine

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 ENDIF;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?SEL:  Check for < ctl.Weight Adjust         USR  -E04119 9/9/16  RMC
CASE;

// IF CTL.Weight Adjust is Not Equal to Zero
IF CTL.Weight_Adjust <> *ZERO;

// AND RCD.Order Weight Total GT CTL.Weight Adjust
AND RCD.Order_Weight_Total > CTL.Weight_Adjust;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?HI the warehouse if the company was changed
EXECUTE FUNCTION(VAL RTV Ord/Type existsRT) TYPE(RTVOBJ) FILE(PDLHCPP)          AC2086525;
PARAMETER('ORDCMP');
PARAMETER(RCD.Company_Number_041405);
PARAMETER(RCD.Order_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF PAR.Load Change Type EQ DB1.Load Change Type
 IF PAR.Load_Change_Type = DB1.Load_Change_Type;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


// RCD.Weight Adjust = RCD.Order Weight Total
RCD.Weight_Adjust = RCD.Order_Weight_Total;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?* Company#, From Date, and Through Date are required
CASE;

// IF CTL.Scheduled Ship Date USR is Not Entered
IF CTL.Scheduled_Ship_Date_USR = *ZERO;

// Send error message - 'Date must be entered.'
ERROR(USR0231);
MSGPARM(CTL.Scheduled_Ship_Date_USR);

//?* Company#, From Date, and Through Date are required
// IF CTL.USR Through Date is not entered
IF CTL.USR_Through_Date = *ZERO;

// Send error message - 'Date must be entered.'
ERROR(USR0231);
MSGPARM(CTL.USR_Through_Date);

//?* Company#, From Date, and Through Date are required
// IF CTL.Company Number is Equal to zero
IF CTL.Company_Number = *ZERO;

// Send error message - 'Company Number is required.'
ERROR(USR2183);
MSGPARM(CTL.Company_Number);

ENDIF;

CASE;

// IF CTL.City 11 USR NE WRK.City 11 USR
IF CTL.City_11_USR <> WRK.City_11_USR;

// CTL.Ship To City = CTL.City 11 USR
CTL.Ship_To_City = CTL.City_11_USR;

// WRK.City 11 USR = CTL.City 11 USR
WRK.City_11_USR = CTL.City_11_USR;

// WRK.Ship To City = CTL.Ship To City
WRK.Ship_To_City = CTL.Ship_To_City;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF CTL.Scheduled Ship Date USR NE WRK.Scheduled Ship Date USR
IF CTL.Scheduled_Ship_Date_USR <> WRK.Scheduled_Ship_Date_USR;

// WRK.Scheduled Ship Date USR = CTL.Scheduled Ship Date USR
WRK.Scheduled_Ship_Date_USR = CTL.Scheduled_Ship_Date_USR;

// CTL.Scheduled Ship Date = CTL.Scheduled Ship Date USR
CTL.Scheduled_Ship_Date = CTL.Scheduled_Ship_Date_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF CTL.USR Through Date NE WRK.USR Through Date
IF CTL.USR_Through_Date <> WRK.USR_Through_Date;

// WRK.USR Through Date = CTL.USR Through Date
WRK.USR_Through_Date = CTL.USR_Through_Date;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF CTL.Company Number NE WRK.Company Number
IF CTL.Company_Number <> WRK.Company_Number;

// WRK.Company Number = CTL.Company Number
WRK.Company_Number = CTL.Company_Number;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF CTL.Type Code NE WRK.Type Code
IF CTL.Type_Code <> WRK.Type_Code;

// WRK.Type Code = CTL.Type Code
WRK.Type_Code = CTL.Type_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF CTL.Name 25A USR NE WRK.Name 25A USR
IF CTL.Name_25A_USR <> WRK.Name_25A_USR;

// WRK.Name 25A USR = CTL.Name 25A USR
WRK.Name_25A_USR = CTL.Name_25A_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF CTL.Weight Adjust NE WRK.Weight Adjust
IF CTL.Weight_Adjust <> WRK.Weight_Adjust;

// WRK.Weight Adjust = CTL.Weight Adjust
WRK.Weight_Adjust = CTL.Weight_Adjust;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF CTL.Warehouse Code NE WRK.Warehouse Code
IF CTL.Warehouse_Code <> WRK.Warehouse_Code;

// WRK.Warehouse Code = CTL.Warehouse Code
WRK.Warehouse_Code = CTL.Warehouse_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?* Command Keys: F6=Sweep all to MG, F5=Refresh, F3=Exit
CASE;

// IF CTL.*CMD key is Sweep Orders to MG
IF CTL.*CMD_key = '06';

//?F6=Sweep all to MG
//?03/27/25 DN SR27558-Deactivated. Throw Info Message.
// LCL.Generic Message 80 USR = CONCAT(CON.F6 is invalid. Job Schedu,CON.le TMSORDSWP will auto,CON.
LCL.Generic_Message_80_USR = 'F6 is invalid. Job Schedu' + 'le TMSORDSWP will auto' (*ZERO);

// LCL.Generic Message 80 USR = CONCAT(LCL.Generic Message 80 USR,CON.sweep every 30 mins.,CON.1)
LCL.Generic_Message_80_USR = LCL.Generic_Message_80_USR + 'sweep every 30 mins.' (1);

// Send information message - '&1'
MESSAGE(USR4976 *INFO);
MSGPARM(LCL.Generic_Message_80_USR);

QUIT;

//?* Command Keys: F6=Sweep all to MG, F5=Refresh, F3=Exit
// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

//?F5=Refresh
// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?* Command Keys: F6=Sweep all to MG, F5=Refresh, F3=Exit
// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

RETURN;

//?* Command Keys: F6=Sweep all to MG, F5=Refresh, F3=Exit
// IF CTL.*CMD key is CF08
IF CTL.*CMD_key = '08';

// Call program EDT Reset LPR Status   EF.
CALL PROGRAM(EDT Reset LPR Status   EF) ('PBWPEFR');

ENDIF;

//?* Command Keys: F3/F5/F10= ww tms load --temp
CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

// Call program WW TMS Load           DF.
CALL PROGRAM(WW TMS Load           DF) ('PBXFDFR');

//?* Command Keys: F3/F5/F10= ww tms load --temp
// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

//?F5=Refresh
// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?* Command Keys: F3/F5/F10= ww tms load --temp
// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

RETURN;

ENDIF;

//?* Command Keys: F09= pmt reset lpr flag -- restrict users
CASE;

// IF CTL.*CMD key is CF09
IF CTL.*CMD_key = '09';

CASE;

// IF JOB.*USER is Rose - God
IF JOB.*USER = 'ISROSEM';

// OR JOB.*USER is Mike Booth PROD
OR JOB.*USER = 'ISMIKEB';

// OR JOB.*USER is TPMTEST
OR JOB.*USER = 'TPMTEST';

// OR JOB.*USER is PRKTEST
OR JOB.*USER = 'PRKTEST';

// OR JOB.*USER is Rose Centonze
OR JOB.*USER = 'ISRCENT';

// OR JOB.*USER is Jeff Armstrong
OR JOB.*USER = 'TRJARMS';

// Call program PMT Chg Load Plan Rdy PV.
CALL PROGRAM(PMT Chg Load Plan Rdy PV) ('PBYLPVR');

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?From Date must be entered
CASE;

// IF CTL.Scheduled Ship Date USR is Not Entered
IF CTL.Scheduled_Ship_Date_USR = *ZERO;

// Send error message - 'Date must be entered.'
ERROR(USR0231);
MSGPARM(CTL.Scheduled_Ship_Date_USR);

ENDIF;

//?Set Thru date = From date if it is blank
CASE;

// IF CTL.USR Through Date is not entered
IF CTL.USR_Through_Date = *ZERO;

// CTL.USR Through Date = CTL.Scheduled Ship Date USR
CTL.USR_Through_Date = CTL.Scheduled_Ship_Date_USR;

ENDIF;

//?5=Display Order Inquiry
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

// Call program DSP Ord Inquiry Detail DF.
CALL PROGRAM(DSP Ord Inquiry Detail DF) ('PDPZDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.Order_Sequence_Number);
PARAMETER(LCL.Order_Secondary_Line_Seq);
PARAMETER(PAR.Application_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?USER: Process subfile control (Post-confirm)

//?* Command Keys
CASE;

// IF CTL.*CMD key is Sweep Orders to MG
IF CTL.*CMD_key = '06';

//?03/27/25 DN SR27558-Deactivated. JS 'TMSORDSWP' will auto run every 30mins
QUIT;

//?F6=Sweep all to MG
// LCL.Return Code Usr = CND.*Blank
LCL.Return_Code_Usr = *BLANK;

// PAR.Thru Date Pass        USR = CTL.USR Through Date
PAR.Thru_Date_Pass_USR = CTL.USR_Through_Date;

// PAR.From Date Pass        USR = CTL.Scheduled Ship Date USR
PAR.From_Date_Pass_USR = CTL.Scheduled_Ship_Date_USR;

// PAR.Company Number Pass   USR = CTL.Company Number
PAR.Company_Number_Pass_USR = CTL.Company_Number;

// PAR.Order Number 1  PASS  USR = CTL.Order Number
PAR.Order_Number_1_PASS_USR = CTL.Order_Number;

// PAR.Customer Number Pass  USR = CTL.Ship To Customer
PAR.Customer_Number_Pass_USR = CTL.Ship_To_Customer;

// PAR.Customer Purchase Order # = CTL.USR Customer PO #
PAR.Customer_Purchase_Order_# = CTL.USR_Customer_PO_#;

// PAR.OH Load Plan Ready = CND.Yes
PAR.OH_Load_Plan_Ready = 'Y';

// PAR.Pricing Event Called From = CND.Sweep Orders to MG
PAR.Pricing_Event_Called_From = 'SWP';

// PAR.Change Flag USR = CND.All
PAR.Change_Flag_USR = 'A';

// PAR.Ship To Name = CTL.Ship To Name
PAR.Ship_To_Name = CTL.Ship_To_Name;

// PAR.USR Description 20 = CTL.Ship To City
PAR.USR_Description_20 = CTL.Ship_To_City;

// PAR.Date 0          PASS  USR = CTL.Requested Delivery Date
PAR.Date_0_PASS_USR = CTL.Requested_Delivery_Date;

// PAR.Trans Type 1 PASS     USR = CTL.Type Code
PAR.Trans_Type_1_PASS_USR = CTL.Type_Code;

// PAR.Trans Type 2 PASS     USR = CTL.Ship To State Code
PAR.Trans_Type_2_PASS_USR = CTL.Ship_To_State_Code;

// PAR.Warehouse Code PASS   USR = CTL.Warehouse Code
PAR.Warehouse_Code_PASS_USR = CTL.Warehouse_Code;

// Call program SBM Sweep Ords to MG   CL.
CALL PROGRAM(SBM Sweep Ords to MG   CL) ('PBTJUPC');
PARAMETER(LCL.Return_Code_Usr);
PARAMETER(PAR.Ship_To_Name);
PARAMETER(PAR.Customer_Purchase_Order_#);
PARAMETER(PAR.OH_Load_Plan_Ready);
PARAMETER(PAR.Thru_Date_Pass_USR);
PARAMETER(PAR.From_Date_Pass_USR);
PARAMETER(PAR.Date_0_PASS_USR);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Customer_Number_Pass_USR);
PARAMETER(PAR.Order_Number_1_PASS_USR);
PARAMETER(PAR.Warehouse_Code_PASS_USR);
PARAMETER(PAR.Trans_Type_1_PASS_USR);
PARAMETER(PAR.Trans_Type_2_PASS_USR);
PARAMETER(PAR.Change_Flag_USR);
PARAMETER(PAR.USR_Description_20);
PARAMETER(PAR.Pricing_Event_Called_From);

// Send information message - 'Sweep all orders to MercuryGate is complete'
MESSAGE(USR4858 *INFO);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?* Command Keys
// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

//?F5=Refresh
// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?* Command Keys
// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

RETURN;

ENDIF;

//?USER: Process subfile record (Post-confirm)

//?1=Select to sweep to MG
CASE;

// IF RCD.*SFLSEL is *Select
IF RCD.*SFLSEL = '1'/'1';

// Call program Rtv Crt OH Trigger    XF.
CALL PROGRAM(Rtv Crt OH Trigger    XF) ('PBWVXFR');
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Company_Number);

CASE;

// IF RCD.OH Load Plan Ready is Not Sent to TMS
IF RCD.OH_Load_Plan_Ready = *BLANK/'N';

EXECUTE FUNCTION(CHG OH Load Plan Ready CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1733022;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('Y');
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

// LCL.Return Code Usr = CND.*Blank
LCL.Return_Code_Usr = *BLANK;

// Send information message - 'Order number &1 scheduled for MercuryGate'
MESSAGE(USR4857 *INFO);
MSGPARM(RCD.Order_Number);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?USER: Final processing (Post-confirm)

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

