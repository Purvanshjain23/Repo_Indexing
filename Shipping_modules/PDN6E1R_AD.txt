// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDN6E1R
// ?Date: 14.08.2025 Time: 03:29:02
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.USR Display field = CND.yes
PAR.USR_Display_field = 'Y';

EXECUTE FUNCTION(RTV 1st Whse/Ctl/Cntry RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1612794;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(LCL.Country_Code);
PARAMETER(WRK.Trans_Contol_AS400_Plant);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Trans_Contol_AS400_Plant);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

CASE;

// IF PAR.Allow Mult Whse to Order is Not Yes
IF PAR.Allow_Mult_Whse_to_Order = *BLANK/'N';

// PAR.USR Display field = CND.no
PAR.USR_Display_field = 'N';

ENDIF;

ENDIF;

//?USER: Initialize key screen

MOVE *ALL (To: KEY From: PAR);

//?Retrieve Last Sequence number
EXECUTE FUNCTION(RTV Next Sequence #    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1312105;
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Order_Number);
PARAMETER(KEY.Order_Sequence_Number);
{
 //?USER: Processing if Data record not found

 // PAR.Order Sequence Number = PAR.Order Sequence Number + CON.1
 PAR.Order_Sequence_Number = PAR.Order_Sequence_Number + 1;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// KEY.Order Sequence Number = KEY.Order Sequence Number + CON.1
KEY.Order_Sequence_Number = KEY.Order_Sequence_Number + 1;

// KEY.Order Secondary Line Seq = CON.1
KEY.Order_Secondary_Line_Seq = 1;

//?USER: Initialize detail screen (new record)

EXECUTE FUNCTION(RTV All Header Fields  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1326885;
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Order_Number);
PARAMETER(DTL.Order_Type_Sales);
PARAMETER(WRK.AR_Customer_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(WRK.Ship_To_Name);
PARAMETER(WRK.Ship_To_Address_Line_1);
PARAMETER(WRK.Ship_To_Address_Line_2);
PARAMETER(WRK.Ship_To_Address_Line_3);
PARAMETER(WRK.Ship_To_City);
PARAMETER(WRK.Ship_To_State_Code);
PARAMETER(WRK.Ship_To_Zip_Postal_Code);
PARAMETER(WRK.Bill_to_Customer);
PARAMETER(WRK.Bill_to_Name);
PARAMETER(WRK.Bill_to_Address_Line_1);
PARAMETER(WRK.Bill_to_Address_Line_2);
PARAMETER(WRK.Bill_to_Address_Line_3);
PARAMETER(WRK.Bill_to_City);
PARAMETER(WRK.Bill_to_State_Code);
PARAMETER(WRK.Bill_to_Zip_Postal_Code);
PARAMETER(WRK.Customer_Purchase_Order_#);
PARAMETER(PAR.Order_Date);
PARAMETER(DTL.Requested_Ship_Date);
PARAMETER(DTL.Actual_Shipped_Date);
PARAMETER(WRK.Cancel_Date);
PARAMETER(WRK.Terms_Code);
PARAMETER(WRK.Special_Instructions);
PARAMETER(WRK.Special_Instructions_2);
PARAMETER(WRK.Carrier_Code);
PARAMETER(DTL.Comment_Print_Acknowledge);
PARAMETER(DTL.Comment_Print_Inv_Cr_Memo);
PARAMETER(DTL.Comment_Print_Pick_Slip);
PARAMETER(DTL.Comment_Print_Ship_Doc);
PARAMETER(DTL.Reason_Code);
PARAMETER(WRK.Order_in_Use);
PARAMETER(WRK.Header_Status);
PARAMETER(PAR.Header_Status_Last);
PARAMETER(WRK.Order_Type_Print_Status);
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(WRK.User_Original_Entry);
PARAMETER(WRK.Date_of_Original_Entry);
PARAMETER(WRK.Unused_Parm_Value_USR);
PARAMETER(WRK.Order_Weight_Total);
PARAMETER(WRK.Credit_Hold);
PARAMETER(WRK.Production_Hold);
PARAMETER(WRK.New_Customer_Hold);
PARAMETER(WRK.Requested_Delivery_Date);
PARAMETER(WRK.Requested_Delivery_Time);
PARAMETER(WRK.Accounts_Receiv_Ent_1);
PARAMETER(WRK.Accounts_Receiv_Ent_2);
PARAMETER(WRK.Load_ID);
PARAMETER(WRK.Absorbed_Freight_Rate_CWT);
PARAMETER(WRK.Rated_Freight);
PARAMETER(WRK.LTL_Flag);
PARAMETER(DTL.Price_Audit);
PARAMETER(DTL.Price_Status);
PARAMETER(WRK.Shipping_Method);
PARAMETER(WRK.Export_Status);
PARAMETER(DTL.Palletize);
PARAMETER(WRK.Shrink_Wrap);
PARAMETER(DTL.Slip_Sheet);
PARAMETER(DTL.Age_Code);
PARAMETER(WRK.Reefer_Temperature);
PARAMETER(WRK.Load_Type);
PARAMETER(WRK.Attach_to_Invoice_Number);
PARAMETER(WRK.Load_Plan_Order);
PARAMETER(WRK.Print_Pick_Slip);
PARAMETER(WRK.Resell_Reference_Number);
PARAMETER(WRK.Special_Comment_1);
PARAMETER(WRK.Special_Comment_2);
PARAMETER(WRK.Affect_Auto_Accruals);
PARAMETER(WRK.Sales_Route_Code);
PARAMETER(WRK.Manager_Level_Code);
PARAMETER(WRK.VP_Level_Code);
PARAMETER(WRK.Attach_to_Order_Number);
PARAMETER(WRK.Reason_for_Price_Audit);
PARAMETER(WRK.Invoice_Number);
PARAMETER(WRK.Invoice_Suffix);
PARAMETER(WRK.Invoice_Date);
PARAMETER(WRK.Event_Code);
PARAMETER(WRK.Trans_Contol_AS400_Plant);
PARAMETER(DTL.Modified_Flag);
PARAMETER(WRK.A_R_order_Value_Total);
PARAMETER(PAR.Billing_Activity_Type);
PARAMETER(WRK.Block_Order_Flag);
PARAMETER(WRK.Order_Certification_Flag);
PARAMETER(WRK.EDI_Status_1);
PARAMETER(WRK.EDI_Status_2);
PARAMETER(WRK.EDI_Status_3);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV OH Tf Exempt Cod  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1750885;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.OH_TF_Exempt_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.OH TF Exempt Code = DTL.OH TF Exempt Code
LCL.OH_TF_Exempt_Code = DTL.OH_TF_Exempt_Code;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(DTL.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Warehouse Code = PAR.Warehouse Code
DTL.Warehouse_Code = PAR.Warehouse_Code;

EXECUTE FUNCTION(RTV Warehouse          RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1100960;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(KEY.Company_Number);
PARAMETER(DTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?To Warehouse for transfer
CASE;

// IF PAR.Billing Activity Type is Warehouse Transfer
IF PAR.Billing_Activity_Type = '4';

EXECUTE FUNCTION(Rtv Default Warehouse  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1323141;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Warehouse_Code_Transfer);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Warehouse          RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1100960;
PARAMETER(DTL.Warehouse_Code_Transfer);
PARAMETER(DTL.Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


//?To Warehouse for transfer
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Warehouse Code Transfer = CON.*BLANK
DTL.Warehouse_Code_Transfer = *BLANK;

// DTL.Description = CON.*BLANK
DTL.Description = *BLANK;

ENDIF;

// DTL.Deadline Depart Date LH = PAR.Deadline Depart Date LH
DTL.Deadline_Depart_Date_LH = PAR.Deadline_Depart_Date_LH;

// DTL.Deadline Depart Time LH = PAR.Deadline Depart Time LH
DTL.Deadline_Depart_Time_LH = PAR.Deadline_Depart_Time_LH;

//?USER: Validate detail screen fields

EXECUTE FUNCTION(Val User Whs Access   IF) TYPE(EXCINTFUN)                      AC1531984;
PARAMETER(JOB.*USER);
PARAMETER(DTL.Warehouse_Code);
PARAMETER('S');
PARAMETER('U');
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.User_Code_Model);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Retrieve User Warehouse Access Type
 CASE;

 // IF PAR.User Code Model is equal to blank
 IF PAR.User_Code_Model = *BLANK;

 EXECUTE FUNCTION(Rtv User Whs Access   RT) TYPE(RTVOBJ) FILE(PDL1REP)           AC1531985;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.UWA_Inventory_Trans);
 PARAMETER(PAR.UWA_Lot_Loc_Trans);
 PARAMETER(PAR.UWA_Shipping_Trans);
 PARAMETER(PAR.UWA_Cross_Applications);
 PARAMETER(PAR.UWA_Unused_Status_1);
 PARAMETER(PAR.UWA_Unused_Status_2);
 PARAMETER(PAR.UWA_Unused_Sts_3);
 PARAMETER(PAR.UWA_Unused_Sts_4);
 PARAMETER(PAR.UWA_Unused_Sts_5);
 PARAMETER(PAR.UWA_Unused_Sts_6);
 PARAMETER(PAR.UWA_Unused_Sts_7);
 PARAMETER(PAR.UWA_Unused_Sts_8);
 PARAMETER(PAR.UWA_Unused_Sts_9);
 PARAMETER(PAR.UWA_Unused_Sts_10);
 PARAMETER(PAR.UWA_Unused_Sts_11);
 PARAMETER(PAR.UWA_Unused_Sts_12);
 PARAMETER(PAR.UWA_Unused_Sts_13);
 PARAMETER(PAR.UWA_Unused_Sts_14);
 PARAMETER(PAR.UWA_Unused_Sts_15);
 PARAMETER(PAR.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Retrieve User Warehouse Access Type
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv User Whs Access   RT) TYPE(RTVOBJ) FILE(PDL1REP)           AC1531985;
 PARAMETER(PAR.User_Code_Model);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.UWA_Inventory_Trans);
 PARAMETER(PAR.UWA_Lot_Loc_Trans);
 PARAMETER(PAR.UWA_Shipping_Trans);
 PARAMETER(PAR.UWA_Cross_Applications);
 PARAMETER(PAR.UWA_Unused_Status_1);
 PARAMETER(PAR.UWA_Unused_Status_2);
 PARAMETER(PAR.UWA_Unused_Sts_3);
 PARAMETER(PAR.UWA_Unused_Sts_4);
 PARAMETER(PAR.UWA_Unused_Sts_5);
 PARAMETER(PAR.UWA_Unused_Sts_6);
 PARAMETER(PAR.UWA_Unused_Sts_7);
 PARAMETER(PAR.UWA_Unused_Sts_8);
 PARAMETER(PAR.UWA_Unused_Sts_9);
 PARAMETER(PAR.UWA_Unused_Sts_10);
 PARAMETER(PAR.UWA_Unused_Sts_11);
 PARAMETER(PAR.UWA_Unused_Sts_12);
 PARAMETER(PAR.UWA_Unused_Sts_13);
 PARAMETER(PAR.UWA_Unused_Sts_14);
 PARAMETER(PAR.UWA_Unused_Sts_15);
 PARAMETER(PAR.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 ENDIF;

 //?Validate Access
 CASE;

 // IF PAR.Record Found USR is Record Not Found
 IF PAR.Record_Found_USR = 'N';

 // Send error message - 'Access Denied to &1 for Warehouse &2.'
 ERROR(USR2776);
 MSGPARM(PAR.User_Profile_Name);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 //?Validate Access
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Inventory Transactions
 CASE;

 // IF PAR.Access Area Needed USR is Inventory Transactions
 IF PAR.Access_Area_Needed_USR = 'I';

 CASE;

 // IF PAR.Access Needed USR is Update
 IF PAR.Access_Needed_USR = 'U';

 CASE;

 // IF PAR.UWA Inventory Trans is *Not Update
 IF PAR.UWA_Inventory_Trans = 'N'/'R';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 // IF PAR.Access Needed USR is Read
 IF PAR.Access_Needed_USR = 'R';

 CASE;

 // IF PAR.UWA Inventory Trans is None
 IF PAR.UWA_Inventory_Trans = 'N';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 //?Lot Loc Transactions
 CASE;

 // IF PAR.Access Area Needed USR is Lot Loc Transactions
 IF PAR.Access_Area_Needed_USR = 'L';

 CASE;

 // IF PAR.Access Needed USR is Update
 IF PAR.Access_Needed_USR = 'U';

 CASE;

 // IF PAR.UWA Lot Loc Trans is *Not Update
 IF PAR.UWA_Lot_Loc_Trans = 'N'/'R';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 // IF PAR.Access Needed USR is Read
 IF PAR.Access_Needed_USR = 'R';

 CASE;

 // IF PAR.UWA Lot Loc Trans is None
 IF PAR.UWA_Lot_Loc_Trans = 'N';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 //?Shipping Transactions
 CASE;

 // IF PAR.Access Area Needed USR is Shipping Transactions
 IF PAR.Access_Area_Needed_USR = 'S';

 CASE;

 // IF PAR.Access Needed USR is Update
 IF PAR.Access_Needed_USR = 'U';

 CASE;

 // IF PAR.UWA Shipping Trans is *Not Update
 IF PAR.UWA_Shipping_Trans = 'N'/'R';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 // IF PAR.Access Needed USR is Read
 IF PAR.Access_Needed_USR = 'R';

 CASE;

 // IF PAR.UWA Shipping Trans is None
 IF PAR.UWA_Shipping_Trans = 'N';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 //?Cross Applications
 CASE;

 // IF PAR.Access Area Needed USR is Cross Applications
 IF PAR.Access_Area_Needed_USR = 'C';

 CASE;

 // IF PAR.Access Needed USR is Update
 IF PAR.Access_Needed_USR = 'U';

 CASE;

 // IF PAR.UWA Unused Sts is *Not Update
 IF PAR.UWA_Cross_Applications = 'N'/'R';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 // IF PAR.Access Needed USR is Read
 IF PAR.Access_Needed_USR = 'R';

 CASE;

 // IF PAR.UWA Unused Sts is None
 IF PAR.UWA_Cross_Applications = 'N';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Select Item
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Item Code
AND PGM.*Cursor_field = DTL.Item_Code;

// Call program SEL Actv Finished Good SR.
CALL PROGRAM(SEL Actv Finished Good SR) ('PDNHSRR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);

ENDIF;

//?Insert the Item information here
// Call program RTV for Ord.Detail     XF.
CALL PROGRAM(RTV for Ord.Detail     XF) ('PDC3XFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Description_Line_One);
PARAMETER(DTL.Description_Line_Two);
PARAMETER(WRK.UOM_Primary);
PARAMETER(WRK.UOM_Pricing);
PARAMETER(LCL.Unit_Weight);
PARAMETER(DTL.Item_Level);
PARAMETER(DTL.Production_Date_Control);
PARAMETER(DTL.Catch_Weight_Status);
PARAMETER(DTL.Item_Structure_Class_Code);
PARAMETER(DTL.Item_Structure_Group_Code);
PARAMETER(DTL.Item_Structure_Type_Code);
PARAMETER(DTL.Commodity_Market_Code);
PARAMETER(WRK.Transportation_Temp);
PARAMETER(WRK.Item_Type_Code);
PARAMETER(WRK.Commodity_Price_Group);
PARAMETER(WRK.Default_Warehouse);
PARAMETER(DTL.Price_Method_Code);
PARAMETER(WRK.Fresh_Chilling_Time);
PARAMETER(WRK.Variety_Rendered_Cut);
PARAMETER(DTL.OD_Item_Target_Price);
PARAMETER(WRK.Error_Status);

// DTL.Weight Ordered = DTL.Quantity Ordered * LCL.Unit Weight *Rounded
DTL.Weight_Ordered = DTL.Quantity_Ordered * LCL.Unit_Weight 'H';

// DTL.Order Desc. Line One = DTL.Description Line One
DTL.Order_Desc_Line_One = DTL.Description_Line_One;

// DTL.Order Desc. Line Two = DTL.Description Line Two
DTL.Order_Desc_Line_Two = DTL.Description_Line_Two;

EXECUTE FUNCTION(RTV Warehouse          RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1100960;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


//?Item Not Found Error Message
CASE;

// IF WRK.Error Status is yes
IF WRK.Error_Status = 'Y';

// Send error message - 'Item is not found'
ERROR(USR0461);
MSGPARM(DTL.Item_Code);

ENDIF;

//?Warehouse Code on the Screen
CASE;

// IF DTL.Warehouse Code is Warehouse Code Blank
IF DTL.Warehouse_Code = *BLANK;

// DTL.Warehouse Code = PAR.Warehouse Code
DTL.Warehouse_Code = PAR.Warehouse_Code;

ENDIF;

// Call program Val ItmBal.Unit Cst    XF.
CALL PROGRAM(Val ItmBal.Unit Cst    XF) ('PDMCXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(WRK.Unit_Cost_Per_Pound);
PARAMETER(WRK.Error_Status);

//?Error if no item balance
CASE;

// IF WRK.Error Status is yes
IF WRK.Error_Status = 'Y';

// Send error message - 'Item Balance not found.'
ERROR(USR0328);
MSGPARM(DTL.Company_Number);
MSGPARM(DTL.Item_Code);
MSGPARM(DTL.Warehouse_Code);

//?Error if no item balance
// IF WRK.Unit Cost Per Pound EQ WRK.ZERO
IF WRK.Unit_Cost_Per_Pound = WRK.ZERO;

// Send error message - 'Unit Cost for Warehouse &2 Cannot Be 0'
ERROR(USR2343);
MSGPARM(DTL.Item_Code);
MSGPARM(DTL.Warehouse_Code);

ENDIF;

//?Edit for TO warehouse on transfers
CASE;

// IF PAR.Billing Activity Type is Warehouse Transfer
IF PAR.Billing_Activity_Type = '4';

//?verify shipping company of to warehouse code in item balance 6/08/09
EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
PARAMETER(DTL.Warehouse_Code_Transfer);
PARAMETER(WRK.Shipping_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Val ItmBal.Unit Cst    XF.
CALL PROGRAM(Val ItmBal.Unit Cst    XF) ('PDMCXFR');
PARAMETER(WRK.Shipping_Company);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code_Transfer);
PARAMETER(WRK.Unit_Cost_Per_Pound);
PARAMETER(WRK.Error_Status);

//?Error if no item balance
CASE;

// IF WRK.Error Status is yes
IF WRK.Error_Status = 'Y';

// Send error message - 'Item Balance for "To" transfer warehouse not found'
ERROR(USR2340);
MSGPARM(DTL.Item_Code);
MSGPARM(DTL.Warehouse_Code_Transfer);

//?Error if no item balance
// IF WRK.Unit Cost Per Pound EQ WRK.ZERO
IF WRK.Unit_Cost_Per_Pound = WRK.ZERO;

// Send error message - 'Unit Cost for Warehouse &2 Cannot Be 0'
ERROR(USR2343);
MSGPARM(DTL.Item_Code);
MSGPARM(DTL.Warehouse_Code_Transfer);

ENDIF;

ENDIF;

//?Finished Good Item Check
CASE;

// IF WRK.Item Type Code is Not Finished Good
IF WRK.Item_Type_Code <> 'FG';

// Send error message - 'Ordered Items must be Finished Goods.'
ERROR(USR1941);
MSGPARM(DTL.Item_Code);

ENDIF;

//?Load Type Regular and Item is Bulk
CASE;

// IF WRK.Load Type is Regular
IF WRK.Load_Type = 'R';

// AND WRK.Variety/Rendered/Cut is Rendered
AND WRK.Variety_Rendered_Cut = 'R';

// Send error message - 'Bulk items can not be on regular order type.'
ERROR(USR1881);
MSGPARM(DTL.Item_Code);

ENDIF;

//?Load type is Bulk and item is non-bulk
CASE;

// IF WRK.Load Type is Bulk
IF WRK.Load_Type = 'B';

// AND WRK.Variety/Rendered/Cut is Not Bulk Item
AND WRK.Variety_Rendered_Cut = 'C'/*BLANK/'V';

// Send error message - 'Only bulk items can be on a bulk order load type.'
ERROR(USR1882);
MSGPARM(DTL.Item_Code);

ENDIF;

//?Unit of Measure on the Screen
CASE;

// IF DTL.U/M - Ordered is Not Entered
IF DTL.U_M_Ordered = *BLANK;

// DTL.U/M - Ordered = WRK.U/M - Primary
DTL.U_M_Ordered = WRK.UOM_Primary;

ENDIF;

//?Retrieve Contract Information if This item is on contract
//?Contract Number
CASE;

// IF DTL.Contract Number is Zero
IF DTL.Contract_Number = *ZERO;

EXECUTE FUNCTION(RTV Edt for Existing   RT) TYPE(RTVOBJ) FILE(OPCIREP)          AC1291147;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Item_Code);
PARAMETER(PAR.Order_Date);
PARAMETER(WRK.Contract_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF PAR.Effective Date GE DB1.Effective Date
 IF PAR.Effective_Date >= DB1.Effective_Date;

 // AND PAR.Effective Date LE DB1.End Date Effective
 AND PAR.Effective_Date <= DB1.End_Date_Effective;

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 ENDIF;

 // PAR.Contract Number = DB1.Contract Number
 PAR.Contract_Number = DB1.Contract_Number;

}


CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// DTL.Contract Number = WRK.Contract Number
DTL.Contract_Number = WRK.Contract_Number;

EXECUTE FUNCTION(RTV Contract Defaults  RT) TYPE(RTVOBJ) FILE(OPCIREP)          AC1277302;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Item_Code);
PARAMETER(WRK.Description);
PARAMETER(DTL.Contract_Number);
PARAMETER(DTL.Price_Overage_Override);
PARAMETER(DTL.Market_Pricing_Date);
PARAMETER(DTL.Date_Method_Code);
PARAMETER(DTL.Price_Method_Code);
PARAMETER(DTL.Commodity_Market_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

ENDIF;

//?   Retreive Data to Load into Item Record
EXECUTE FUNCTION(RTV Comod. Markt. Code RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1263958;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Customer_Name);
PARAMETER(WRK.Country_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Country Code is Blank
IF LCL.Country_Code = *BLANK;

// DTL.Country Code = WRK.Country Code
DTL.Country_Code = WRK.Country_Code;

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Country Code = LCL.Country Code
DTL.Country_Code = LCL.Country_Code;

ENDIF;

//?RMC 4/09 dont output USA country code. not necessary!
CASE;

// IF DTL.Country Code is USA
IF DTL.Country_Code = 'USA';

// DTL.Country Code = CON.*BLANK
DTL.Country_Code = *BLANK;

ENDIF;

EXECUTE FUNCTION(RTV Affect Fields      RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1264364;
PARAMETER(DTL.Order_Type_Sales);
PARAMETER(DTL.Affect_Inventory_Status);
PARAMETER(DTL.Affect_Sales_Doll_Status);
PARAMETER(DTL.Affect_Sales_Pnds_Status);
PARAMETER(WRK.Affect_Brokerage_Default);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?* used to call XF RTV Item Costs  XF; all parms DTL.
//?commented 4/30/03  cant use this logic.The group/type was rtv'd from item
//?Update Records status as Entered so that it marks it as new Item line
// DTL.Detail Line Status = CND.Entered
DTL.Detail_Line_Status = 'E';

// DTL.Price Audit = CND.Needs Price Audit
DTL.Price_Audit = 'N';

// DTL.Price Status = CND.Unpriced
DTL.Price_Status = 'U';

// DTL.Price Audit Reason Code = CND.Item Change
DTL.Price_Audit_Reason_Code = 'ITM';

EXECUTE FUNCTION(Rtv Item Def/TFExp    RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC1747888;
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Ord_TF_Exempt_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If not Pre-Commencement, set Tf exempt code   8/31/05
CASE;

// IF DTL.OH TF Exempt Code is Not Pre-Commencement
IF DTL.OH_TF_Exempt_Code = 'EC'/'EP'/'NE';

CASE;

// IF DTL.OH TF Exempt Code is Exempt Customer
IF DTL.OH_TF_Exempt_Code = 'EC';

CASE;

// IF DTL.Ord TF Exempt Code is Not Exempt
IF DTL.Ord_TF_Exempt_Code = 'NE';

// DTL.Ord TF Exempt Code = CND.Exempt Customer
DTL.Ord_TF_Exempt_Code = 'EC';

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Ord TF Exempt Code = CND.Exempt Product
DTL.Ord_TF_Exempt_Code = 'EP';

ENDIF;

ENDIF;

CASE;

// IF DTL.OH TF Exempt Code is Not Exempt
IF DTL.OH_TF_Exempt_Code = 'NE';

// AND DTL.Ord TF Exempt Code is Exempt Product
AND DTL.Ord_TF_Exempt_Code = 'EP';

// DTL.OH TF Exempt Code = CND.Exempt Product
DTL.OH_TF_Exempt_Code = 'EP';

ENDIF;

//?If not Pre-Commencement, set Tf exempt code   8/31/05
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Ord TF Exempt Code = CND.Pre Commencement
DTL.Ord_TF_Exempt_Code = 'PC';

ENDIF;

//?R17029 DN 01/18/21-Get/Set OD Spot Buy for Item.
// Call program Set Spot Buy @Shipping XF.
CALL PROGRAM(Set Spot Buy @Shipping XF) ('PUSKXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.OD_Spot_Buy);

//?USER: Validate detail screen relations

EXECUTE FUNCTION(Rtv Date Method Code  RT) TYPE(RTVOBJ) FILE(PMCEREP)           AC1847958;
PARAMETER(DTL.Price_Method_Code);
PARAMETER(DTL.Date_Method_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Create DBF record

EXECUTE FUNCTION(CRT Ship Det'l frm Ord CR) TYPE(CRTOBJ) FILE(OPBGWKP)          AC1306536;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Order_Sequence_Number);
PARAMETER(DTL.Order_Secondary_Line_Seq);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Order_Group_Code);
PARAMETER(DTL.Detail_Line_Status);
PARAMETER(DTL.Detail_Line_Status_Last);
PARAMETER(DTL.Billing_Detail_Cost_Dol);
PARAMETER(DTL.Billing_Detail_Gross_Dol);
PARAMETER(DTL.Billing_Detail_Net_Dol);
PARAMETER(DTL.Quantity_to_Substitute);
PARAMETER(DTL.Comment_Print_Acknowledge);
PARAMETER(DTL.Comment_Print_Inv_Cr_Memo);
PARAMETER(DTL.Comment_Print_Pick_Slip);
PARAMETER(DTL.Comment_Print_Ship_Doc);
PARAMETER(DTL.Extended_Amount);
PARAMETER(DTL.Market_Pricing_Date);
PARAMETER(DTL.Commodity_Market_Code);
PARAMETER(DTL.Date_Method_Code);
PARAMETER(DTL.Price_Method_Code);
PARAMETER(DTL.Price_Overage_Override);
PARAMETER(DTL.Contract_Number);
PARAMETER(DTL.Price_Status);
PARAMETER(DTL.Pricing_Date_Used);
PARAMETER(WRK.UOM_Pricing);
PARAMETER(DTL.U_M_Ordered);
PARAMETER(DTL.Work_Confirm_Status);
PARAMETER(DTL.Work_Over_Short_Status);
PARAMETER(DTL.OD_Production_Plan_Sts);
PARAMETER(DTL.Order_Desc_Line_One);
PARAMETER(DTL.Order_Desc_Line_Two);
PARAMETER(DTL.Age_Code);
PARAMETER(DTL.Palletize);
PARAMETER(DTL.Slip_Sheet);
PARAMETER(DTL.Catch_Weight_Status);
PARAMETER(DTL.Price_Audit);
PARAMETER(DTL.Price_Audit_Reason_Code);
PARAMETER(DTL.Production_Date_Control);
PARAMETER(*ZERO);
PARAMETER(DTL.Quantity_Ordered);
PARAMETER(DTL.Weight_Ordered);
PARAMETER(DTL.Quantity_Ordered);
PARAMETER(DTL.Weight_Ordered);
PARAMETER(DTL.Quantity_Shipped_Total);
PARAMETER(DTL.Weight_Shipped_Total);
PARAMETER(DTL.Unit_Cost_Pricing_U_M);
PARAMETER(DTL.Unit_Cost_Per_Pound);
PARAMETER(DTL.Unit_Price);
PARAMETER(DTL.Unit_Price_Credit);
PARAMETER(DTL.Unit_Price_Ordered_U_M);
PARAMETER(DTL.Unit_Weight_Ordered_U_M);
PARAMETER(DTL.Tare_Weight_Total);
PARAMETER(DTL.Requested_Ship_Date);
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(PAR.Actual_Shipped_Date);
PARAMETER(DTL.Affect_Inventory_Status);
PARAMETER(DTL.Affect_Sales_Doll_Status);
PARAMETER(DTL.Affect_Sales_Pnds_Status);
PARAMETER(DTL.Item_Structure_Type_Code);
PARAMETER(DTL.Item_Structure_Group_Code);
PARAMETER(DTL.Item_Structure_Class_Code);
PARAMETER(DTL.Item_Level);
PARAMETER(DTL.Quality_Level);
PARAMETER(DTL.Pricing_Product_Class_Rep);
PARAMETER(DTL.Season_Product_Class_Repo);
PARAMETER(DTL.Date_of_Original_Entry);
PARAMETER(DTL.User_Profile_Name);
PARAMETER(DTL.Country_Code);
PARAMETER('04');
PARAMETER(DTL.Reason_Code);
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(DTL.Modified_Flag);
PARAMETER(DTL.Substituted_Flag);
PARAMETER(DTL.OD_Schedule_Override_Sts);
PARAMETER(DTL.Invoice_Unit_Price);
PARAMETER(DTL.Invoice_Extended_Amt);
PARAMETER(DTL.Ham_Group_Number);
PARAMETER(DTL.OD_Adj_Type_Override);
PARAMETER(DTL.Affect_Trade_Fund);
PARAMETER(DTL.Affect_Commission);
PARAMETER(DTL.Affect_Pricing);
PARAMETER(DTL.Released_by_User_Sts_Y_N);
PARAMETER(DTL.Ord_TF_Exempt_Code);
PARAMETER(DTL.OD_Pallet_Type);
PARAMETER(DTL.Production_Warehouse);
PARAMETER(DTL.OD_Price_Type);
PARAMETER(DTL.Warehouse_Pallets_Loaded);
PARAMETER(DTL.Consumed_Item_Code);
PARAMETER(DTL.Deadline_Depart_Date_LH);
PARAMETER(DTL.OD_Price_Type_Ref_Num);
PARAMETER(DTL.OD_Firm_Date);
PARAMETER(DTL.Deadline_Depart_Time_LH);
PARAMETER(DTL.Price_Code);
PARAMETER(DTL.Maximum_Net_Weight);
PARAMETER(DTL.Substitution_Line_Number);
PARAMETER(DTL.Max_Qty_to_sched_per_day);
PARAMETER(DTL.Warehouse_Pallet_Tare);
PARAMETER(DTL.Warehouse_Avg_Pallet_Tare);
PARAMETER(DTL.OD_Item_Target_Price);
PARAMETER(DTL.OD_Estimated_Gross_Weight);
PARAMETER(DTL.OD_Maximum_Unit_Weight);
PARAMETER(DTL.Order_Gate_Final_Price);
PARAMETER(DTL.OD_Ceiling_Price);
PARAMETER(DTL.OD_Gate_Final_Price_Adj);
PARAMETER(DTL.OD_Weighted_Avg_Price);
PARAMETER(DTL.OD_Original_Ordered_Qty);
PARAMETER(DTL.OD_Cancel_Date);
PARAMETER(DTL.OD_Unused_Prc_7);
PARAMETER(DTL.OD_Unused_Prc_8);
PARAMETER(DTL.OD_MPR_Sent_to_USDA_Sts);
PARAMETER(DTL.OD_MPR_Prc_Ready_to_Send);
PARAMETER(DTL.OD_UnUsed_Price_Sts_3);
PARAMETER(DTL.Weight_Amount_Entered);
PARAMETER(DTL.Item_Age_Days);
PARAMETER(DTL.Production_Ovr_AgeDte_Fr);
PARAMETER(DTL.Production_Ovr_AgeDte_To);
PARAMETER(DTL.OD_Spot_Buy);
PARAMETER(DTL.OD_Clm_Full_Return_to_Plt);
PARAMETER(DTL.Order_Line_Error_Type);
PARAMETER(DTL.OD_Market_Begin_Date);
PARAMETER(DTL.OD_Market_Ending_Date);
PARAMETER(DTL.OD_Atch_to_Ord_ActShpDte);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Job_Time);
PARAMETER(DTL.User_Id);
PARAMETER(DTL.Job_Name);
PARAMETER(DTL.Job_Date);
PARAMETER(WRK.Export_Status);
{
 //?USER: Processing before Data update

 // DB1.Age Code = CND.Blank
 DB1.Age_Code = *BLANK;

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program Rtv First Consumed Itm XF.
 CALL PROGRAM(Rtv First Consumed Itm XF) ('POP1XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Consumed_Item_Code);

 EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Production_Warehouse);
 PARAMETER(NLL.Accounting_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?USER: Processing after Data update

 EXECUTE FUNCTION(Rtv/Crt Dflt f/OrdDtl  RT) TYPE(RTVOBJ) FILE(PDMMREP)          AC1612748;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Country_Code);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Extended_Amount);
 PARAMETER(DB1.U_M_Ordered);
 PARAMETER(DB1.Quantity_Scheduled);
 PARAMETER(DB1.Weight_Scheduled);
 PARAMETER(DB1.Quantity_Shipped_Total);
 PARAMETER(DB1.Weight_Shipped_Total);
 PARAMETER(DB1.Unit_Price);
 {
  //?USER: Initialize routine

  //?RMC 02/06/17 R9126 CANadian unstamped text
  //?RMC 08/14/07 RTV COMPANY value to determine if item desc on form
  //?            is the item description or item label+item code
  //?N = Not special -- use item description
  //?Y = Yes Special -- use item label+item code
  // Call program Rtv Alpha Value       XF.
  CALL PROGRAM(Rtv Alpha Value       XF) ('POMTXFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER('MPGITEM');
  PARAMETER(LCL.Status_Flag_1_Y_N);

  //?DO2642 DN 11/15/22-Initialize.
  // LCL.First Time Through USR = CND.Yes
  LCL.First_Time_Through_USR = 'Y';

  //?USER: Process Data record

  //?11/15/22 DN DO2642-Get/Save Live with PHIS Flag from Doc Type 'A'.
  CASE;

  // IF DB1.ED Export Document Type is Application for Export
  IF DB1.ED_Export_Document_Type = 'A';

  // AND LCL.First Time Through USR is Yes
  AND LCL.First_Time_Through_USR = 'Y';

  // LCL.First Time Through USR = CND.No
  LCL.First_Time_Through_USR = 'N';

  // LCL.ED Live with PHIS = DB1.ED Live with PHIS
  LCL.ED_Live_with_PHIS = DB1.ED_Live_with_PHIS;

  ENDIF;

  //?12/26/18 DN R13944-Save 'Translate Desc' Flag from Doc Type A.
  CASE;

  // IF DB1.ED Export Document Type is Application for Export
  IF DB1.ED_Export_Document_Type = 'A';

  // AND NOT DB1.ED Xlate Desc to Country is Not Entered
  AND ! DB1.ED_Xlate_Desc_to_Country = *BLANK;

  // PAR.ED Xlate Desc to Country = DB1.ED Xlate Desc to Country
  PAR.ED_Xlate_Desc_to_Country = DB1.ED_Xlate_Desc_to_Country;

  ENDIF;

  //?Create Detail if required for the document.
  CASE;

  // IF DB1.ED Export Document Type is Health Certificate
  IF DB1.ED_Export_Document_Type = 'H';

  // OR DB1.ED Export Document Type is Customs Invoice
  OR DB1.ED_Export_Document_Type = 'C';

  // OR DB1.Country Code is China
  OR DB1.Country_Code = 'CHN';

  // OR DB1.Country Code is Hong Kong
  OR DB1.Country_Code = 'HKG';

  // OR DB1.Country Code is Australia
  OR DB1.Country_Code = 'AUS';

  // OR DB1.Country Code is Russia
  OR DB1.Country_Code = 'RUS';

  EXECUTE FUNCTION(RTV for Exp Document   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1529231;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.ED_Item_Label_Line_1);
  PARAMETER(PAR.ED_Item_Label_Line_2);
  PARAMETER(WRK.ED_Item_Label_Line_1);
  PARAMETER(WRK.ED_Item_Label_Line_2);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Variety_Rendered_Cut);
  PARAMETER(WRK.Piece_Count_Item);
  PARAMETER(PAR.ED_Pieces_per_Bag);
  PARAMETER(PAR.ED_Bags_per_Unit);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?DO2642 DN 06/21/22-Commented Out Old Method of Item Label Formatting.
  //?DO2642 DN 06/21/22-New Method of Item Label Formatting.
  CASE;

  // IF LCL.Status Flag 1  Y/N is Yes
  IF LCL.Status_Flag_1_Y_N = 'Y';

  //?DO2642 DN 11/15/22-Pass in ED Live with PHIS.
  EXECUTE FUNCTION(Fmt Item Label Line1&2 IF) TYPE(EXCINTFUN)                     AC2205984;
  PARAMETER(DB1.Country_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(WRK.ED_Item_Label_Line_1);
  PARAMETER(WRK.ED_Item_Label_Line_2);
  PARAMETER(LCL.ED_Live_with_PHIS);
  PARAMETER(PAR.ED_Item_Label_Line_1);
  PARAMETER(PAR.ED_Item_Label_Line_2);
  {
   //?Execute internal function

   //?Initialize.
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.ED Item Label Line 1 USR = CND.Not Entered
   PAR.ED_Item_Label_Line_1_USR = *BLANK;

   // PAR.ED Item Label Line 2 USR = CND.Not Entered
   PAR.ED_Item_Label_Line_2_USR = *BLANK;

   // LCL.Item Label Line Info USR = CND.Not Entered
   LCL.Item_Label_Line_Info_USR = *BLANK;

   // LCL.Position 33 Text USR = CND.Not Entered
   LCL.Position_33_Text_USR = *BLANK;

   // LCL.Last 6 Bytes USR = CND.Not Entered
   LCL.Last_6_Bytes_USR = *BLANK;

   ENDIF;

   //?Format Item Label Line 1 & 2 with Item Code at the End if Spaces Avail.
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?DO2642 DN 11/14/22-Removed 'Chilled/Frozen' Text if Exist.
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.ED Item Label Line 1 = PAR.ED Item Label Line 1
   LCL.ED_Item_Label_Line_1 = PAR.ED_Item_Label_Line_1;

   // LCL.ED Chilled/Frozen Text = SUBSTRING(PAR.ED Item Label Line 1,CON.1,CON.7)
   LCL.ED_Chilled_Frozen_Text = SUBSTRING(PAR.ED_Item_Label_Line_1:1:7);

   //?Chilled Text Exist?
   CASE;

   // IF LCL.ED Chilled/Frozen Text is Chilled
   IF LCL.ED_Chilled_Frozen_Text = 'Chilled';

   // OR LCL.ED Chilled/Frozen Text is CHILLED All Caps
   OR LCL.ED_Chilled_Frozen_Text = 'CHILLED';

   // LCL.ED Item Label Line 1 = SUBSTRING(LCL.ED Item Label Line 1,CON.9,CON.24)
   LCL.ED_Item_Label_Line_1 = SUBSTRING(LCL.ED_Item_Label_Line_1:9:24);

   ENDIF;

   //?Frozen Text Exist?
   CASE;

   // IF LCL.ED Chilled/Frozen Text is Frozen
   IF LCL.ED_Chilled_Frozen_Text = 'Frozen';

   // OR LCL.ED Chilled/Frozen Text is FROZEN All Caps
   OR LCL.ED_Chilled_Frozen_Text = 'FROZEN';

   // LCL.ED Item Label Line 1 = SUBSTRING(LCL.ED Item Label Line 1,CON.8,CON.25)
   LCL.ED_Item_Label_Line_1 = SUBSTRING(LCL.ED_Item_Label_Line_1:8:25);

   ENDIF;

   ENDIF;

   //?Concat Item Label Line 1 & 2 and append the Item Code at the end if
   //?there is 6 available spaces left. If no space avail for Item Code,
   //?Business must manually update this info in PHIS.
   //?W116174 DN 12/12/22-Undo word wrapping & word splitting. Commented out.
   //?Values with more than 64 characters will be truncated. Business agrees.
   //?W116174 DN 12/12/22-Undo word wrapping & word splitting. Commented out.
   //?W116174 DN 12/12/22-Populate Item Label Lines as is.
   // PAR.ED Item Label Line 1 USR = LCL.ED Item Label Line 1
   PAR.ED_Item_Label_Line_1_USR = LCL.ED_Item_Label_Line_1;

   // PAR.ED Item Label Line 2 USR = PAR.ED Item Label Line 2
   PAR.ED_Item_Label_Line_2_USR = PAR.ED_Item_Label_Line_2;

   //?DO2642 DN 11/15/22-Do Not Concat Item Code if Country is Live with PHIS=Y.
   CASE;

   // IF PAR.ED Live with PHIS is yes
   IF PAR.ED_Live_with_PHIS = 'Y';

   //?DO2642 DN 11/15/22-Do Not Concat Item Code if Country is Live with PHIS=Y.
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Convert Item Code to Alpha.
   // LCL.Item Code 5.0 = PAR.ED Item Code
   LCL.Item_Code_5_0 = PAR.ED_Item_Code;

   // LCL.Item Code 5A = CVTVAR(LCL.Item Code 5.0)
   LCL.Item_Code_5A = CVTVAR(LCL.Item_Code_5_0);

   //?Check Label Line 1 Last 6 Bytes is Blank Else Check Label Line 2.
   CASE;

   // IF PAR.ED Item Label Line 2 USR is Not Entered
   IF PAR.ED_Item_Label_Line_2_USR = *BLANK;

   // LCL.Last 6 Bytes USR = SUBSTRING(PAR.ED Item Label Line 1 USR,CON.27,CON.6)
   LCL.Last_6_Bytes_USR = SUBSTRING(PAR.ED_Item_Label_Line_1_USR:27:6);

   //?Append Item Code to Label Line 1 Else Line 2.
   CASE;

   // IF LCL.Last 6 Bytes USR is Not Entered
   IF LCL.Last_6_Bytes_USR = *BLANK;

   // PAR.ED Item Label Line 1 USR = CONCAT(PAR.ED Item Label Line 1 USR,LCL.Item Code 5A,CON.1)
   PAR.ED_Item_Label_Line_1_USR = PAR.ED_Item_Label_Line_1_USR + LCL.Item_Code_5A (1);

   //?Append Item Code to Label Line 1 Else Line 2.
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.ED Item Label Line 2 USR = LCL.Item Code 5A
   PAR.ED_Item_Label_Line_2_USR = LCL.Item_Code_5A;

   ENDIF;

   //?Check Label Line 1 Last 6 Bytes is Blank Else Check Label Line 2.
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Check Label Line 2 Last 6 Bytes.
   // LCL.Last 6 Bytes USR = SUBSTRING(PAR.ED Item Label Line 2 USR,CON.27,CON.6)
   LCL.Last_6_Bytes_USR = SUBSTRING(PAR.ED_Item_Label_Line_2_USR:27:6);

   //?Append Item Code to Label Line 2 Else Truncate Item Code.
   CASE;

   // IF LCL.Last 6 Bytes USR is Not Entered
   IF LCL.Last_6_Bytes_USR = *BLANK;

   // PAR.ED Item Label Line 2 USR = CONCAT(PAR.ED Item Label Line 2 USR,LCL.Item Code 5A,CON.1)
   PAR.ED_Item_Label_Line_2_USR = PAR.ED_Item_Label_Line_2_USR + LCL.Item_Code_5A (1);

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

  }

  ENDIF;

  EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Warehouse_Type);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.ED Product UOM = CON.Lbs
  PAR.ED_Product_UOM = 'Lbs';

  //?NEW Package type for FSIS V2
  CASE;

  // IF PAR.U/M - Ordered is Combos
  IF PAR.U_M_Ordered = 'CB';

  // PAR.ED Product Pkg Type = CND.COMBO
  PAR.ED_Product_Pkg_Type = 'COM';

  //?NEW Package type for FSIS V2
  // IF PAR.U/M - Ordered is Cases
  IF PAR.U_M_Ordered = 'CS';

  // PAR.ED Product Pkg Type = CND.CASE
  PAR.ED_Product_Pkg_Type = 'CS';

  //?NEW Package type for FSIS V2
  // IF PAR.U/M - Ordered is EQ Boxes
  IF PAR.U_M_Ordered = 'BX';

  // PAR.ED Product Pkg Type = CND.Box
  PAR.ED_Product_Pkg_Type = 'BX';

  //?NEW Package type for FSIS V2
  // IF PAR.U/M - Ordered is Each
  IF PAR.U_M_Ordered = 'EA';

  // PAR.ED Product Pkg Type = CND.Box
  PAR.ED_Product_Pkg_Type = 'BX';

  //?NEW Package type for FSIS V2
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.ED Product Pkg Type = CND.Box
  PAR.ED_Product_Pkg_Type = 'BX';

  ENDIF;

  //?RMC 5/24/18 for FSIS V2 - Set HACCP Code
  DO;

  // LCL.Position = CON.*ZERO
  LCL.Position = *ZERO;

  // LCL.Position USR = CON.*ZERO
  LCL.Position_USR = *ZERO;

  EXECUTE FUNCTION(Rtv Class             RT) TYPE(RTVOBJ) FILE(PBBNREP)           AC2151832;
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.DP_Product_Class);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // LCL.Search Text USR = LCL.DP Product Class
  LCL.Search_Text_USR = LCL.DP_Product_Class;

  // LCL.Search Pattern USR = CON.Ground
  LCL.Search_Pattern_USR = 'Ground';

  // LCL.Scan Length USR = CON.6
  LCL.Scan_Length_USR = 6;

  // LCL.Start Position USR = CON.1
  LCL.Start_Position_USR = 1;

  // Execute function Scn Text              US.
  EXECUTE FUNCTION(Scn Text              US) TYPE(EXCUSRSRC) ('PPB8UFR');
  PARAMETER(LCL.Scan_Length_USR);
  PARAMETER(LCL.Start_Position_USR);
  PARAMETER(LCL.Search_Pattern_USR);
  PARAMETER(LCL.Search_Text_USR);
  PARAMETER(LCL.Position_USR);
  {
   C                     Z-ADD*ZEROS    POS     50
   C                     MOVE #ILN      LEN     50
   C                     MOVE #IST      ST      50
   C           #IPTN:LEN SCAN #IDTA:ST  POS
   C                     MOVE POS       #OU3NX
  }

  // LCL.Search Pattern USR = CON.Diced
  LCL.Search_Pattern_USR = 'Diced';

  // LCL.Scan Length USR = CON.5
  LCL.Scan_Length_USR = 5;

  // LCL.Start Position USR = CON.1
  LCL.Start_Position_USR = 1;

  // Execute function Scn Text              US.
  EXECUTE FUNCTION(Scn Text              US) TYPE(EXCUSRSRC) ('PPB8UFR');
  PARAMETER(LCL.Scan_Length_USR);
  PARAMETER(LCL.Start_Position_USR);
  PARAMETER(LCL.Search_Pattern_USR);
  PARAMETER(LCL.Search_Text_USR);
  PARAMETER(LCL.Position);
  {
   C                     Z-ADD*ZEROS    POS     50
   C                     MOVE #ILN      LEN     50
   C                     MOVE #IST      ST      50
   C           #IPTN:LEN SCAN #IDTA:ST  POS
   C                     MOVE POS       #OU3NX
  }

  CASE;

  // IF LCL.Position USR is Greater than zero
  IF LCL.Position_USR > *ZERO;

  // OR LCL.Position is Greater than zero
  OR LCL.Position > *ZERO;

  // LCL.ED HACCP Category = CND.Raw Product-Ground (03B)
  LCL.ED_HACCP_Category = '03B';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.ED HACCP Category = CND.Raw Product-Nt Grnd(03C)
  LCL.ED_HACCP_Category = '03C';

  ENDIF;

  ENDDO;

  // PAR.ED Product Net Weight lbs = PAR.Weight Shipped Total
  PAR.ED_Product_Net_Weight_lbs = PAR.Weight_Shipped_Total;

  // PAR.ED Product Net Weight MT = PAR.Weight Shipped Total / CON.2204.6 *
  PAR.ED_Product_Net_Weight_MT = PAR.Weight_Shipped_Total / 2204.6;

  // PAR.ED Product Nbr of Pkgs = PAR.Quantity Shipped Total
  PAR.ED_Product_Nbr_of_Pkgs = PAR.Quantity_Shipped_Total;

  // PAR.ED Nbr of Packages = PAR.ED Nbr of Packages + PAR.Quantity Shipped Total
  PAR.ED_Nbr_of_Packages = PAR.ED_Nbr_of_Packages + PAR.Quantity_Shipped_Total;

  // Compute: Total Nbr Pieces
  PAR.ED_Total_Nbr_of_Pieces = PAR.Quantity_Shipped_Total * ( PAR.ED_Pieces_per_Bag
  * PAR.ED_Bags_per_Unit );

  // PAR.ED Product Unit Price = PAR.Unit Price
  PAR.ED_Product_Unit_Price = PAR.Unit_Price;

  // PAR.ED Producet Extended Amt = PAR.Extended Amount
  PAR.ED_Producet_Extended_Amt = PAR.Extended_Amount;

  CASE;

  // IF PAR.Item Structure Group Code is Edible Rendering
  IF PAR.Item_Structure_Group_Code = 755;

  // OR PAR.Item Structure Class Code is EQ 772
  OR PAR.Item_Structure_Class_Code = 772;

  EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
  PARAMETER(DB1.Company_Number);
  PARAMETER('PLTESTNO');
  PARAMETER(PAR.ED_Plant_Number_Dtl);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.ED Chilled/Frozen Text = CON.*BLANK
  PAR.ED_Chilled_Frozen_Text = *BLANK;

  // IF LCL.Warehouse Type is Fresh
  IF LCL.Warehouse_Type = 'FR';

  EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
  PARAMETER(DB1.Company_Number);
  PARAMETER('PLTESTNO');
  PARAMETER(PAR.ED_Plant_Number_Dtl);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?DO2642 DN 10/13/22-Use Uppercase.
  // PAR.ED Chilled/Frozen Text = CON.CHILLED
  PAR.ED_Chilled_Frozen_Text = 'CHILLED';

  // IF LCL.Warehouse Type is Frozen
  IF LCL.Warehouse_Type = 'FZ';

  EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
  PARAMETER(DB1.Company_Number);
  PARAMETER('FZESTNO');
  PARAMETER(PAR.ED_Plant_Number_Dtl);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?DO2642 DN 10/13/22-Use Uppercase.
  // PAR.ED Chilled/Frozen Text = CON.FROZEN
  PAR.ED_Chilled_Frozen_Text = 'FROZEN';

  ENDIF;

  // PAR.ED Unmarked Txt = CON.Unmarked
  PAR.ED_Unmarked_Txt = 'Unmarked';

  CASE;

  // IF DB1.Company Number is Guymon
  IF DB1.Company_Number = 360;

  // AND DB1.Country Code is Canada
  AND DB1.Country_Code = 'CAN';

  // PAR.ED Unmarked Txt = CON.Unstamped
  PAR.ED_Unmarked_Txt = 'Unstamped';

  ENDIF;

  // PAR.ED Product UOM = CON.lbs
  PAR.ED_Product_UOM = 'lbs';

  //?Calculate Gross Weight
  EXECUTE FUNCTION(Rtv Tare Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1228249;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(WRK.Description_Line_One);
  PARAMETER(LCL.Misc_Tare_Weight);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  //?Misc Tare Weight
  CASE;

  // IF PAR.Header Status is Confirmed & Complete
  IF PAR.Header_Status = 'C'/'R';

  // LCL.Misc Tare Weight = LCL.Misc Tare Weight * PAR.Quantity Shipped Total *
  LCL.Misc_Tare_Weight = LCL.Misc_Tare_Weight * PAR.Quantity_Shipped_Total;

  //?Misc Tare Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Misc Tare Weight = LCL.Misc Tare Weight * PAR.Quantity Scheduled *
  LCL.Misc_Tare_Weight = LCL.Misc_Tare_Weight * PAR.Quantity_Scheduled;

  ENDIF;

  //?Find Box weight for the Item and Subtract for final tare weight
  // LCL.Unit Weight = CON.*ZERO
  LCL.Unit_Weight = *ZERO;

  //?Gross Weight
  CASE;

  // IF PAR.Header Status is Confirmed & Complete
  IF PAR.Header_Status = 'C'/'R';

  //?Calculate Gross Weight
  CASE;

  // IF PAR.Weight Shipped Total NE WRK.ZERO
  IF PAR.Weight_Shipped_Total <> WRK.ZERO;

  // LCL.Gross Weight USR 9.1 = LCL.Gross Weight USR 9.1 + LCL.Misc Tare Weight
  LCL.Gross_Weight_USR_9_1 = LCL.Gross_Weight_USR_9_1 + LCL.Misc_Tare_Weight;

  EXECUTE FUNCTION(RTV Item Box Tare Wgt  RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC1379982;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.Unit_Weight);
  {
   //?USER: Initialize routine

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   //?USER: Process Data record

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   EXECUTE FUNCTION(RTV Type/Pack/Unit Wgt RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1379988;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Component_Item_Code);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Package_Type_Code);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   CASE;

   // IF PAR.Item Type Code is Packaging and Supplies
   IF PAR.Item_Type_Code = 'PS';

   // AND PAR.Package Type Code is Box
   AND PAR.Package_Type_Code = 'B';

   QUIT;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   ENDIF;

   //?USER: Exit processing

   // PAR.Unit Weight = PAR.Unit Weight USR
   PAR.Unit_Weight = PAR.Unit_Weight_USR;

  }

  // LCL.Unit Weight = PAR.Quantity Shipped Total * LCL.Unit Weight *Rounded
  LCL.Unit_Weight = PAR.Quantity_Shipped_Total * LCL.Unit_Weight 'H';

  // LCL.Gross Weight USR 9.1 = LCL.Gross Weight USR 9.1 + LCL.Unit Weight
  LCL.Gross_Weight_USR_9_1 = LCL.Gross_Weight_USR_9_1 + LCL.Unit_Weight;

  ENDIF;

  //?Gross Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Calculate Gross Weight
  CASE;

  // IF PAR.Weight Scheduled NE WRK.ZERO
  IF PAR.Weight_Scheduled <> WRK.ZERO;

  // LCL.Gross Weight USR 9.1 = LCL.Gross Weight USR 9.1 + LCL.Misc Tare Weight
  LCL.Gross_Weight_USR_9_1 = LCL.Gross_Weight_USR_9_1 + LCL.Misc_Tare_Weight;

  EXECUTE FUNCTION(RTV Item Box Tare Wgt  RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC1379982;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.Unit_Weight);
  {
   //?USER: Initialize routine

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   //?USER: Process Data record

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   EXECUTE FUNCTION(RTV Type/Pack/Unit Wgt RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1379988;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Component_Item_Code);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Package_Type_Code);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   CASE;

   // IF PAR.Item Type Code is Packaging and Supplies
   IF PAR.Item_Type_Code = 'PS';

   // AND PAR.Package Type Code is Box
   AND PAR.Package_Type_Code = 'B';

   QUIT;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   ENDIF;

   //?USER: Exit processing

   // PAR.Unit Weight = PAR.Unit Weight USR
   PAR.Unit_Weight = PAR.Unit_Weight_USR;

  }

  // LCL.Unit Weight = PAR.Quantity Scheduled * LCL.Unit Weight *Rounded
  LCL.Unit_Weight = PAR.Quantity_Scheduled * LCL.Unit_Weight 'H';

  // LCL.Gross Weight USR 9.1 = LCL.Gross Weight USR 9.1 + LCL.Unit Weight
  LCL.Gross_Weight_USR_9_1 = LCL.Gross_Weight_USR_9_1 + LCL.Unit_Weight;

  ENDIF;

  ENDIF;

  //?12/26/18 DN R13944-Get 'Translated Item Desc' Language if Present.
  CASE;

  // IF NOT PAR.ED Xlate Desc to Country is Not Entered
  IF ! PAR.ED_Xlate_Desc_to_Country = *BLANK;

  //?DO2642 DN 06/21/22-Added ED Language Xlate Desc 2 as Output Parm.
  // Call program RTV Translated Item DscXF.
  CALL PROGRAM(RTV Translated Item DscXF) ('PUKLXFR');
  PARAMETER(PAR.ED_Xlate_Desc_to_Country);
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.ED_Language_Xlate_Desc_2);
  PARAMETER(LCL.ED_Language_Xlate_Desc);

  ENDIF;

  //?12/20/18 DN R13944-Pass in ED Xlate Desc to Country.
  //?05/02/19 DN R14822-Change Access Path to Read by PDMSREL1 instead PDMSREL2
  //?06/21/22 DN DO2642-Pass in ED Language Xlate Desc 2.
  EXECUTE FUNCTION(Rtv/Chg/Crt ExpOrdDtls RT) TYPE(RTVOBJ) FILE(PDMSREP)          AC1612206;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(DB1.ED_Export_Document_Type);
  PARAMETER(DB1.Country_Code);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.ED_Item_Label_Line_1);
  PARAMETER(PAR.ED_Item_Label_Line_2);
  PARAMETER(PAR.ED_Chilled_Frozen_Text);
  PARAMETER(PAR.ED_Unmarked_Txt);
  PARAMETER(PAR.ED_Product_Net_Weight_lbs);
  PARAMETER(PAR.ED_Product_Net_Weight_MT);
  PARAMETER(PAR.ED_Product_UOM);
  PARAMETER(PAR.ED_Product_Nbr_of_Pkgs);
  PARAMETER(PAR.ED_Product_Pkg_Type);
  PARAMETER(LCL.ED_Shipping_Marks_Txt);
  PARAMETER(PAR.ED_Pieces_per_Bag);
  PARAMETER(PAR.ED_Bags_per_Unit);
  PARAMETER(PAR.ED_Total_Nbr_of_Pieces);
  PARAMETER(PAR.ED_Product_Unit_Price);
  PARAMETER(PAR.ED_Producet_Extended_Amt);
  PARAMETER('N');
  PARAMETER(PAR.ED_Plant_Number_Dtl);
  PARAMETER(LCL.ED_Language_Xlate_Desc_2);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(LCL.ED_HACCP_Category);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(LCL.ED_Language_Xlate_Desc);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER('A');
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing if Data record not found

   //?12/20/18 DN R13944-Update ED Language Xlate Desc.
   //?04/19/22 DN DO2642-Update ED Language Xlate Desc 2.
   EXECUTE FUNCTION(Crt Exp Doc Order Dtl  CR) TYPE(CRTOBJ) FILE(PDMSREP)          AC1524035;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.ED_Export_Document_Type);
   PARAMETER(PAR.Country_Code);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.ED_Item_Code);
   PARAMETER(PAR.ED_Item_Label_Line_1);
   PARAMETER(PAR.ED_Item_Label_Line_2);
   PARAMETER(PAR.ED_Chilled_Frozen_Text);
   PARAMETER(PAR.ED_Unmarked_Txt);
   PARAMETER(PAR.ED_Product_Net_Weight_lbs);
   PARAMETER(PAR.ED_Product_Net_Weight_MT);
   PARAMETER(PAR.ED_Product_UOM);
   PARAMETER(PAR.ED_Product_Nbr_of_Pkgs);
   PARAMETER(PAR.ED_Product_Pkg_Type);
   PARAMETER(PAR.ED_Shipping_Marks_Txt);
   PARAMETER(PAR.ED_Pieces_per_Bag);
   PARAMETER(PAR.ED_Bags_per_Unit);
   PARAMETER(PAR.ED_Total_Nbr_of_Pieces);
   PARAMETER(PAR.ED_Product_Unit_Price);
   PARAMETER(PAR.ED_Producet_Extended_Amt);
   PARAMETER('N');
   PARAMETER(PAR.ED_Plant_Number_Dtl);
   PARAMETER(PAR.ED_Language_Xlate_Desc_2);
   PARAMETER(*ZERO);
   PARAMETER(PAR.ED_Date_of_Slaughter_Dtl);
   PARAMETER(PAR.ED_HACCP_Category);
   PARAMETER(PAR.ED_Slaughter_Date_Range);
   PARAMETER(PAR.ED_Production_Date_Range);
   PARAMETER(LCL.ED_Product_UID);
   PARAMETER(PAR.ED_Language_Xlate_Desc);
   PARAMETER(LCL.ED_Unused_Status_1);
   PARAMETER(LCL.ED_Unused_Status_2);
   PARAMETER(LCL.ED_Harmonized_Tariff_Cde);
   PARAMETER(LCL.ED_Nbr_of_Packing_Units);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER('A');
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // DB1.Record Status = CND.Active
    DB1.Record_Status = 'A';

    //?USER: Processing after Data update

    // Call program Rtv/Chg Hdr Shpd Amts XF.
    CALL PROGRAM(Rtv/Chg Hdr Shpd Amts XF) ('POIYXFR');
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.ED_Export_Document_Type);
    PARAMETER(DB1.Country_Code);

   }

   //?USER: Process Data record

   //?05/01/19 DN R14822-Update Only. Do NOT Create Dtl Record Here.
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Date of Slaughter.
   CASE;

   // IF PAR.ED Date of Slaughter Dtl is Not Entered
   IF PAR.ED_Date_of_Slaughter_Dtl = *BLANK;

   // LCL.ED Date of Slaughter Dtl = DB1.ED Date of Slaughter Dtl
   LCL.ED_Date_of_Slaughter_Dtl = DB1.ED_Date_of_Slaughter_Dtl;

   //?Date of Slaughter.
   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.ED Date of Slaughter Dtl = PAR.ED Date of Slaughter Dtl
   LCL.ED_Date_of_Slaughter_Dtl = PAR.ED_Date_of_Slaughter_Dtl;

   ENDIF;

   //?Production Date Range.
   CASE;

   // IF PAR.ED Production Date Range is Not Entered
   IF PAR.ED_Production_Date_Range = *BLANK;

   // LCL.ED Production Date Range = DB1.ED Production Date Range
   LCL.ED_Production_Date_Range = DB1.ED_Production_Date_Range;

   //?Production Date Range.
   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.ED Production Date Range = PAR.ED Production Date Range
   LCL.ED_Production_Date_Range = PAR.ED_Production_Date_Range;

   ENDIF;

   //?Language Xlate Desc.   12/21/18 DN R13944-Maintain Xlate Desc.
   CASE;

   // IF DB1.ED Language Xlate Desc is Entered
   IF DB1.ED_Language_Xlate_Desc <> *BLANK;

   // LCL.ED Language Xlate Desc = DB1.ED Language Xlate Desc
   LCL.ED_Language_Xlate_Desc = DB1.ED_Language_Xlate_Desc;

   //?Language Xlate Desc.   12/21/18 DN R13944-Maintain Xlate Desc.
   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.ED Language Xlate Desc = PAR.ED Language Xlate Desc
   LCL.ED_Language_Xlate_Desc = PAR.ED_Language_Xlate_Desc;

   ENDIF;

   //?Language Xlate Desc 2. 04/19/22 DN DO2642-Maintain Xlate Desc 2.
   CASE;

   // IF DB1.ED Language Xlate Desc 2 is Entered
   IF DB1.ED_Language_Xlate_Desc_2 <> *BLANK;

   // LCL.ED Language Xlate Desc 2 = DB1.ED Language Xlate Desc 2
   LCL.ED_Language_Xlate_Desc_2 = DB1.ED_Language_Xlate_Desc_2;

   //?Language Xlate Desc 2. 04/19/22 DN DO2642-Maintain Xlate Desc 2.
   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.ED Language Xlate Desc 2 = PAR.ED Language Xlate Desc 2
   LCL.ED_Language_Xlate_Desc_2 = PAR.ED_Language_Xlate_Desc_2;

   ENDIF;

   CASE;

   // IF DB1.ED Export Document Type is Form 9060-7 (Casings)
   IF DB1.ED_Export_Document_Type = 'G';

   // LCL.ED Product Nbr of Pkgs = DB1.ED Product Nbr of Pkgs
   LCL.ED_Product_Nbr_of_Pkgs = DB1.ED_Product_Nbr_of_Pkgs;

   // LCL.ED Product Net Weight MT = DB1.ED Product Net Weight MT
   LCL.ED_Product_Net_Weight_MT = DB1.ED_Product_Net_Weight_MT;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.ED Product Nbr of Pkgs = PAR.ED Product Nbr of Pkgs
   LCL.ED_Product_Nbr_of_Pkgs = PAR.ED_Product_Nbr_of_Pkgs;

   // LCL.ED Product Net Weight MT = PAR.ED Product Net Weight MT
   LCL.ED_Product_Net_Weight_MT = PAR.ED_Product_Net_Weight_MT;

   ENDIF;

   //?05/25/18 DN R13074-Change to not update Item Label Line 1/2,
   //?  Chilled/Frozen Text, Pkg Type & HACCP Category.
   //?04/20/22 DN DO2642-Change to Update ED Language Xlate Desc 2.
   EXECUTE FUNCTION(Chg Exp Doc Order Dtl  CH) TYPE(CHGOBJ) FILE(PDMSREP)          AC1524036;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.ED_Export_Document_Type);
   PARAMETER(PAR.Country_Code);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(PAR.ED_Item_Code);
   PARAMETER(DB1.ED_Item_Label_Line_1);
   PARAMETER(DB1.ED_Item_Label_Line_2);
   PARAMETER(DB1.ED_Chilled_Frozen_Text);
   PARAMETER(PAR.ED_Unmarked_Txt);
   PARAMETER(PAR.ED_Product_Net_Weight_lbs);
   PARAMETER(LCL.ED_Product_Net_Weight_MT);
   PARAMETER(PAR.ED_Product_UOM);
   PARAMETER(LCL.ED_Product_Nbr_of_Pkgs);
   PARAMETER(PAR.ED_Product_Pkg_Type);
   PARAMETER(PAR.ED_Shipping_Marks_Txt);
   PARAMETER(PAR.ED_Pieces_per_Bag);
   PARAMETER(PAR.ED_Bags_per_Unit);
   PARAMETER(PAR.ED_Total_Nbr_of_Pieces);
   PARAMETER(PAR.ED_Product_Unit_Price);
   PARAMETER(PAR.ED_Producet_Extended_Amt);
   PARAMETER(PAR.ED_Print_Status);
   PARAMETER(DB1.ED_Plant_Number_Dtl);
   PARAMETER(LCL.ED_Language_Xlate_Desc_2);
   PARAMETER(PAR.ED_Consignee_Address_Nbr);
   PARAMETER(LCL.ED_Date_of_Slaughter_Dtl);
   PARAMETER(PAR.ED_HACCP_Category);
   PARAMETER(PAR.ED_Slaughter_Date_Range);
   PARAMETER(LCL.ED_Production_Date_Range);
   PARAMETER(DB1.ED_Product_UID);
   PARAMETER(LCL.ED_Language_Xlate_Desc);
   PARAMETER(DB1.ED_Unused_Status_1);
   PARAMETER(DB1.ED_Unused_Status_2);
   PARAMETER(DB1.ED_Harmonized_Tariff_Cde);
   PARAMETER(DB1.ED_Nbr_of_Packing_Units);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(DB1.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    //?USER: Processing after Data update

    // Call program Rtv/Chg Hdr Shpd Amts XF.
    CALL PROGRAM(Rtv/Chg Hdr Shpd Amts XF) ('POIYXFR');
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.ED_Export_Document_Type);
    PARAMETER(DB1.Country_Code);

   }

   ENDIF;

  }

  ENDIF;

 }

 // Call program Exc Calc Ord ExemptCd XF.
 CALL PROGRAM(Exc Calc Ord ExemptCd XF) ('PPSLXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(LCL.OH_TF_Exempt_Code);
 PARAMETER(WRK.Blank_for_4_USR);
 PARAMETER('N');

 EXECUTE FUNCTION(Chg TF Exempt         CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC1750711;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.OH_TF_Exempt_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


