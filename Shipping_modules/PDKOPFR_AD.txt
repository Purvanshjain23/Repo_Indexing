// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDKOPFR
// ?Date: 14.08.2025 Time: 12:04:01
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PAR.User Profile Name = JOB.*USER
PAR.User_Profile_Name = JOB.*USER;

EXECUTE FUNCTION(RTV Model Profile      RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1249165;
PARAMETER(PAR.User_Profile_Name);
PARAMETER(PAR.System_Date_Format);
PARAMETER(WRK.Printer_Device_Str);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(WRK.Application_WHS_Restrict);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Enterprise_Code_1);
PARAMETER(WRK.Enterprise_Code_2);
PARAMETER(PAR.Warehouse_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.USR Page number = CON.*ZERO
PAR.USR_Page_number = *ZERO;

EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
PARAMETER(PAR.Company_Number);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Record selection processing

//?Select passed warehouses
CASE;

// IF PAR.USR Select/Omit Flag is Select
IF PAR.USR_Select_Omit_Flag = 'S';

//?Select only Order Detail records matching warehouse codes passed in
CASE;

// IF PAR.USR Warehouse Code is Warehouse Code not Blank
IF PAR.USR_Warehouse_Code <> *BLANK;

// OR PAR.USR CDE Parm 1 is Warehouse Code not Blank
OR PAR.USR_CDE_Parm_1 <> *BLANK;

// OR PAR.USR CDE Parm 2 is Warehouse Code not Blank
OR PAR.USR_CDE_Parm_2 <> *BLANK;

// OR PAR.USR CDE Parm 3 is Warehouse Code not Blank
OR PAR.USR_CDE_Parm_3 <> *BLANK;

// OR PAR.USR CDE Parm 4 is Warehouse Code not Blank
OR PAR.USR_CDE_Parm_4 <> *BLANK;

// OR PAR.USR CDE Parm 5 is Warehouse Code not Blank
OR PAR.USR_CDE_Parm_5 <> *BLANK;

// OR PAR.USR CDE Parm 6 is Warehouse Code not Blank
OR PAR.USR_CDE_Parm_6 <> *BLANK;

// OR PAR.USR CDE Parm 7 is Warehouse Code not Blank
OR PAR.USR_CDE_Parm_7 <> *BLANK;

// OR PAR.USR CDE Parm 8 is Warehouse Code not Blank
OR PAR.USR_CDE_Parm_8 <> *BLANK;

// OR PAR.USR CDE Parm 9 is Warehouse Code not Blank
OR PAR.USR_CDE_Parm_9 <> *BLANK;

// WRK.Select Status = CND.no
WRK.Select_Status = 'N';

//?Check warehouse 1
CASE;

// IF PAR.USR Warehouse Code is Warehouse Code not Blank
IF PAR.USR_Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(RTV Check Warehouse    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1439130;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(PAR.USR_Warehouse_Code);
PARAMETER(WRK.Select_Status);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF DB1.Warehouse Code EQ PAR.Warehouse Code
 IF DB1.Warehouse_Code = PAR.Warehouse_Code;

 // PAR.Select Status = CND.yes
 PAR.Select_Status = 'Y';

 QUIT;

 ENDIF;

}


ENDIF;

//?Check warehouse 2
CASE;

// IF PAR.USR CDE Parm 1 is Warehouse Code not Blank
IF PAR.USR_CDE_Parm_1 <> *BLANK;

// AND WRK.Select Status is no
AND WRK.Select_Status = 'N';

EXECUTE FUNCTION(RTV Check Warehouse    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1439130;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(PAR.USR_CDE_Parm_1);
PARAMETER(WRK.Select_Status);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF DB1.Warehouse Code EQ PAR.Warehouse Code
 IF DB1.Warehouse_Code = PAR.Warehouse_Code;

 // PAR.Select Status = CND.yes
 PAR.Select_Status = 'Y';

 QUIT;

 ENDIF;

}


ENDIF;

//?Check warehouse 3
CASE;

// IF PAR.USR CDE Parm 2 is Warehouse Code not Blank
IF PAR.USR_CDE_Parm_2 <> *BLANK;

// AND WRK.Select Status is no
AND WRK.Select_Status = 'N';

EXECUTE FUNCTION(RTV Check Warehouse    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1439130;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(PAR.USR_CDE_Parm_2);
PARAMETER(WRK.Select_Status);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF DB1.Warehouse Code EQ PAR.Warehouse Code
 IF DB1.Warehouse_Code = PAR.Warehouse_Code;

 // PAR.Select Status = CND.yes
 PAR.Select_Status = 'Y';

 QUIT;

 ENDIF;

}


ENDIF;

//?Check warehouse 4
CASE;

// IF PAR.USR CDE Parm 3 is Warehouse Code not Blank
IF PAR.USR_CDE_Parm_3 <> *BLANK;

// AND WRK.Select Status is no
AND WRK.Select_Status = 'N';

EXECUTE FUNCTION(RTV Check Warehouse    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1439130;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(PAR.USR_CDE_Parm_3);
PARAMETER(WRK.Select_Status);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF DB1.Warehouse Code EQ PAR.Warehouse Code
 IF DB1.Warehouse_Code = PAR.Warehouse_Code;

 // PAR.Select Status = CND.yes
 PAR.Select_Status = 'Y';

 QUIT;

 ENDIF;

}


ENDIF;

//?Check warehouse 5
CASE;

// IF PAR.USR CDE Parm 4 is Warehouse Code not Blank
IF PAR.USR_CDE_Parm_4 <> *BLANK;

// AND WRK.Select Status is no
AND WRK.Select_Status = 'N';

EXECUTE FUNCTION(RTV Check Warehouse    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1439130;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(PAR.USR_CDE_Parm_4);
PARAMETER(WRK.Select_Status);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF DB1.Warehouse Code EQ PAR.Warehouse Code
 IF DB1.Warehouse_Code = PAR.Warehouse_Code;

 // PAR.Select Status = CND.yes
 PAR.Select_Status = 'Y';

 QUIT;

 ENDIF;

}


ENDIF;

//?Check warehouse 6
CASE;

// IF PAR.USR CDE Parm 5 is Warehouse Code not Blank
IF PAR.USR_CDE_Parm_5 <> *BLANK;

// AND WRK.Select Status is no
AND WRK.Select_Status = 'N';

EXECUTE FUNCTION(RTV Check Warehouse    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1439130;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(PAR.USR_CDE_Parm_5);
PARAMETER(WRK.Select_Status);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF DB1.Warehouse Code EQ PAR.Warehouse Code
 IF DB1.Warehouse_Code = PAR.Warehouse_Code;

 // PAR.Select Status = CND.yes
 PAR.Select_Status = 'Y';

 QUIT;

 ENDIF;

}


ENDIF;

//?Check warehouse 7
CASE;

// IF PAR.USR CDE Parm 6 is Warehouse Code not Blank
IF PAR.USR_CDE_Parm_6 <> *BLANK;

// AND WRK.Select Status is no
AND WRK.Select_Status = 'N';

EXECUTE FUNCTION(RTV Check Warehouse    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1439130;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(PAR.USR_CDE_Parm_6);
PARAMETER(WRK.Select_Status);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF DB1.Warehouse Code EQ PAR.Warehouse Code
 IF DB1.Warehouse_Code = PAR.Warehouse_Code;

 // PAR.Select Status = CND.yes
 PAR.Select_Status = 'Y';

 QUIT;

 ENDIF;

}


ENDIF;

//?Check warehouse 8
CASE;

// IF PAR.USR CDE Parm 7 is Warehouse Code not Blank
IF PAR.USR_CDE_Parm_7 <> *BLANK;

// AND WRK.Select Status is no
AND WRK.Select_Status = 'N';

EXECUTE FUNCTION(RTV Check Warehouse    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1439130;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(PAR.USR_CDE_Parm_7);
PARAMETER(WRK.Select_Status);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF DB1.Warehouse Code EQ PAR.Warehouse Code
 IF DB1.Warehouse_Code = PAR.Warehouse_Code;

 // PAR.Select Status = CND.yes
 PAR.Select_Status = 'Y';

 QUIT;

 ENDIF;

}


ENDIF;

//?Check warehouse 9
CASE;

// IF PAR.USR CDE Parm 8 is Warehouse Code not Blank
IF PAR.USR_CDE_Parm_8 <> *BLANK;

// AND WRK.Select Status is no
AND WRK.Select_Status = 'N';

EXECUTE FUNCTION(RTV Check Warehouse    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1439130;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(PAR.USR_CDE_Parm_8);
PARAMETER(WRK.Select_Status);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF DB1.Warehouse Code EQ PAR.Warehouse Code
 IF DB1.Warehouse_Code = PAR.Warehouse_Code;

 // PAR.Select Status = CND.yes
 PAR.Select_Status = 'Y';

 QUIT;

 ENDIF;

}


ENDIF;

//?Check warehouse 10
CASE;

// IF PAR.USR CDE Parm 9 is Warehouse Code not Blank
IF PAR.USR_CDE_Parm_9 <> *BLANK;

// AND WRK.Select Status is no
AND WRK.Select_Status = 'N';

EXECUTE FUNCTION(RTV Check Warehouse    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1439130;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(PAR.USR_CDE_Parm_9);
PARAMETER(WRK.Select_Status);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF DB1.Warehouse Code EQ PAR.Warehouse Code
 IF DB1.Warehouse_Code = PAR.Warehouse_Code;

 // PAR.Select Status = CND.yes
 PAR.Select_Status = 'Y';

 QUIT;

 ENDIF;

}


ENDIF;

//?If select status is no then do not select record
CASE;

// IF WRK.Select Status is no
IF WRK.Select_Status = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Omit passed warehouses
CASE;

// IF PAR.USR Select/Omit Flag is Omit
IF PAR.USR_Select_Omit_Flag = 'O';

//?Omit any Order Detail records matching warehouse codes passed in
//?Get the warehouse from the first order detail record
//?C2748:  Changed RTV Warehouse Code RT to exclude Cancelled lines.
EXECUTE FUNCTION(RTV Whse/Non Cancelled RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428700;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.Warehouse_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?C2748:  Changed RTV Warehouse Code RT to exclude Cancelled lines.
 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF *OTHERWISE
 IF *OTHERWISE;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


CASE;

// IF PAR.USR Warehouse Code is Warehouse Code not Blank
IF PAR.USR_Warehouse_Code <> *BLANK;

// OR PAR.USR CDE Parm 1 is Warehouse Code not Blank
OR PAR.USR_CDE_Parm_1 <> *BLANK;

// OR PAR.USR CDE Parm 2 is Warehouse Code not Blank
OR PAR.USR_CDE_Parm_2 <> *BLANK;

// OR PAR.USR CDE Parm 3 is Warehouse Code not Blank
OR PAR.USR_CDE_Parm_3 <> *BLANK;

// OR PAR.USR CDE Parm 4 is Warehouse Code not Blank
OR PAR.USR_CDE_Parm_4 <> *BLANK;

// OR PAR.USR CDE Parm 5 is Warehouse Code not Blank
OR PAR.USR_CDE_Parm_5 <> *BLANK;

// OR PAR.USR CDE Parm 6 is Warehouse Code not Blank
OR PAR.USR_CDE_Parm_6 <> *BLANK;

// OR PAR.USR CDE Parm 7 is Warehouse Code not Blank
OR PAR.USR_CDE_Parm_7 <> *BLANK;

// OR PAR.USR CDE Parm 8 is Warehouse Code not Blank
OR PAR.USR_CDE_Parm_8 <> *BLANK;

// OR PAR.USR CDE Parm 9 is Warehouse Code not Blank
OR PAR.USR_CDE_Parm_9 <> *BLANK;

CASE;

// IF PAR.USR Warehouse Code EQ WRK.Warehouse Code
IF PAR.USR_Warehouse_Code = WRK.Warehouse_Code;

// OR PAR.USR CDE Parm 1 EQ WRK.Warehouse Code
OR PAR.USR_CDE_Parm_1 = WRK.Warehouse_Code;

// OR PAR.USR CDE Parm 2 EQ WRK.Warehouse Code
OR PAR.USR_CDE_Parm_2 = WRK.Warehouse_Code;

// OR PAR.USR CDE Parm 3 EQ WRK.Warehouse Code
OR PAR.USR_CDE_Parm_3 = WRK.Warehouse_Code;

// OR PAR.USR CDE Parm 4 EQ WRK.Warehouse Code
OR PAR.USR_CDE_Parm_4 = WRK.Warehouse_Code;

// OR PAR.USR CDE Parm 5 EQ WRK.Warehouse Code
OR PAR.USR_CDE_Parm_5 = WRK.Warehouse_Code;

// OR PAR.USR CDE Parm 6 EQ WRK.Warehouse Code
OR PAR.USR_CDE_Parm_6 = WRK.Warehouse_Code;

// OR PAR.USR CDE Parm 7 EQ WRK.Warehouse Code
OR PAR.USR_CDE_Parm_7 = WRK.Warehouse_Code;

// OR PAR.USR CDE Parm 8 EQ WRK.Warehouse Code
OR PAR.USR_CDE_Parm_8 = WRK.Warehouse_Code;

// OR PAR.USR CDE Parm 9 EQ WRK.Warehouse Code
OR PAR.USR_CDE_Parm_9 = WRK.Warehouse_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Exclude cancelled orders
CASE;

// IF DB1.Header Status is Not eligible for acks.
IF DB1.Header_Status = 'X';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Exclude by billing activity type (Where came from)
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?Exclude by billing activity type
CASE;

// IF PAR.Billing Activity Type EQ WRK.BLANK
IF PAR.Billing_Activity_Type = WRK.BLANK;

//?(include only credit and debit memos)
//?Exclude invoice/transfer types
CASE;

// IF DB1.Billing Activity Type is Invoice or Transfer
IF DB1.Billing_Activity_Type = '1'/'4';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Exclude by billing activity type
// IF PAR.Billing Activity Type is Invoice
IF PAR.Billing_Activity_Type = '1';

//?(include invoice and transfer)
//?Exclude Credit/Debit memo types
CASE;

// IF DB1.Billing Activity Type is Credit or Debit Memo
IF DB1.Billing_Activity_Type = '2'/'3';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Exclude by billing activity type
// IF *OTHERWISE
IF *OTHERWISE;

//?(include only credit OR debit memo)
//?Exclude non matching billing activity type
CASE;

// IF DB1.Billing Activity Type NE PAR.Billing Activity Type
IF DB1.Billing_Activity_Type <> PAR.Billing_Activity_Type;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?S029516 - Added call to function to get Salesperson email address
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(Rtv Eml addr w/rte cd  IF) TYPE(EXCINTFUN)                     AC2240518;
PARAMETER(DB1.Sales_Route_Code);
PARAMETER(PAR.Salesperson_Email_addr);
{
 //?Execute internal function

 EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
 PARAMETER(PAR.Sales_Route_Code);
 PARAMETER(LCL.Salesperson_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Email/EDI Sts 3    RT) TYPE(RTVOBJ) FILE(PDNFREP)          AC1644428;
 PARAMETER(LCL.Salesperson_Code);
 PARAMETER(PAR.Salesperson_Email_addr);
 PARAMETER(NLL.EDI_Status_3);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


ENDIF;

//?USER: Process top of page

// Execute function Set Date Format        US.
EXECUTE FUNCTION(Set Date Format        US) TYPE(EXCUSRSRC) ('USZEUFR');
PARAMETER(PAR.System_Date_Format);
{
 C                     MOVEL#IB8NA    XDDTFM  3
}


// PAR.USR Page number = PAR.USR Page number + CON.1
PAR.USR_Page_number = PAR.USR_Page_number + 1;

// TOP.USR Page number = PAR.USR Page number
TOP_USR_Page_number = PAR.USR_Page_number;

// TOP.USR Date - ATR = JOB.*Job date
TOP_USR_Date_ATR = JOB.*Job_date;

// TOP.USR Time = JOB.*Job time
TOP_USR_Time = JOB.*Job_time;

//?USER: Print required level headings

// SUPPRESSED PRINT Company Number - 3 header format

CASE;

IF NEW Order_Number;
CASE;

// IF CUR.Order Number NE PAR.Order Number
IF CUR.Order_Number <> PAR.Order_Number;

// PAR.USR Page number = CON.*ZERO
PAR.USR_Page_number = *ZERO;

// PAR.Order Number = CUR.Order Number
PAR.Order_Number = CUR.Order_Number;

ENDIF;

//? Print first 8 positions of order type description
EXECUTE FUNCTION(RTV Order Types        RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1168350;
PARAMETER(CUR.Order_Type_Sales);
PARAMETER(WRK.Order_Type_Description);
PARAMETER(WRK.Processing_Cycle_Type);
PARAMETER(WRK.Billing_Activity_Type);
PARAMETER(WRK.Affect_Inventory_Default);
PARAMETER(WRK.Affect_Sales_Doll_Default);
PARAMETER(WRK.Affect_Sales_Pnds_Default);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Set reference heading
CASE;

// IF WRK.Billing Activity Type is Credit Memo
IF WRK.Billing_Activity_Type = '2';

// CUR.USR Heading - 8 = CON.C.M. #
CUR.USR_Heading_8 = 'C.M. #';

//?Set reference heading
// IF WRK.Billing Activity Type is Debit Memo
IF WRK.Billing_Activity_Type = '3';

// CUR.USR Heading - 8 = CON.D.M. #
CUR.USR_Heading_8 = 'D.M. #';

//?Set reference heading
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Heading - 8 = CON.Invoice
CUR.USR_Heading_8 = 'Invoice';

ENDIF;

EXECUTE FUNCTION(RTV Customer Telephone RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1216241;
PARAMETER(CUR.Ship_To_Customer);
PARAMETER(CUR.USR_Telephone_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1270614;
PARAMETER(CUR.Sales_Route_Code);
PARAMETER(CUR.Sales_Route_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Fax number ff      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1698920;
PARAMETER(CUR.Ship_To_Customer);
PARAMETER(NLL.Customer_Name);
PARAMETER(CUR.Fax_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?4/7/2004 slm Add concat of Company and Order number
//?9/30/16 RMC Use CUR. context instead of DB1.  DB1 printed the next order
//?  number in the heading if a page 2 is printed!
// WRK.Company Number Alpha = CVTVAR(CUR.Company Number)
WRK.Company_Number_Alpha = CVTVAR(CUR.Company_Number);

// WRK.Order Number Alpha = CVTVAR(CUR.Order Number)
WRK.Order_Number_Alpha = CVTVAR(CUR.Order_Number);

// WRK.Alpha Search = CONCAT(WRK.Company Number Alpha,CON.-,CND.*None)
WRK.Alpha_Search = WRK.Company_Number_Alpha + '-' (*ZERO);

// WRK.Alpha Search = CONCAT(WRK.Alpha Search,WRK.Order Number Alpha,CND.*None)
WRK.Alpha_Search = WRK.Alpha_Search + WRK.Order_Number_Alpha (*ZERO);

// CUR.Company/Order NO Usr = WRK.Alpha Search
CUR.Company_Order_NO_Usr = WRK.Alpha_Search;

EXECUTE FUNCTION(RTV Prt. Address/Msg   RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1131903;
PARAMETER(CUR.Company_Number);
PARAMETER(PAR.Print_Co_Addr_on_Acknow);
PARAMETER(CUR.USR_Comment_1);
PARAMETER(CUR.USR_Comment_2);
PARAMETER(CUR.USR_Comment_3);
PARAMETER(CUR.USR_Comment_4);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If prt Co Addr on Acknow is 'Y' then print Co. Address else default Porks
CASE;

// IF PAR.Print Co Addr on Acknow is yes
IF PAR.Print_Co_Addr_on_Acknow = 'Y';

EXECUTE FUNCTION(RTV Co Address & Phone RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1203423;
PARAMETER(DB1.Company_Number);
PARAMETER(WRK.Name);
PARAMETER(WRK.Address_Line_1);
PARAMETER(WRK.Address_Line_2);
PARAMETER(WRK.Address_Line_3);
PARAMETER(WRK.City);
PARAMETER(WRK.Zip_Postal_Code);
PARAMETER(WRK.Telephone_Number_FF);
PARAMETER(WRK.State_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Execute function RTV Comprs Nme/Add/CtryUS.
EXECUTE FUNCTION(RTV Comprs Nme/Add/CtryUS) TYPE(EXCUSRSRC) ('PDRYUFR');
PARAMETER(WRK.Name);
PARAMETER(WRK.Address_Line_1);
PARAMETER(WRK.Address_Line_2);
PARAMETER(WRK.Address_Line_3);
PARAMETER(WRK.City);
PARAMETER(WRK.State_Code);
PARAMETER(WRK.Zip_Postal_Code);
PARAMETER(WRK.Country_Description);
PARAMETER(CUR.USR_Company_Address_Line1);
PARAMETER(CUR.USR_Company_Address_Line2);
PARAMETER(CUR.USR_Company_Address_Line3);
PARAMETER(CUR.USR_Company_Address_Line4);
PARAMETER(CUR.USR_Company_Address_Line5);
PARAMETER(WRK.USR_Country_Description);
{
 * Use this function to compress name/address information
 *
 E                    UAD         6 34               Name/Address
 *
 C                     MOVEL#IADTX    UUADTX           Name
 C                     MOVEL#IACNA    UUACNA           Address 1
 C                     MOVEL#IADNA    UUADNA           Address 2
 C                     MOVEL#IAENA    UUAENA           Address 3
 C                     MOVEL#IAJNA    UUAJNA           City
 C                     MOVEL#IEINA    UUEINA           State
 C                     MOVEL#IBTTX    UUBTTX           Zip
 C                     MOVEL#IDATX    UUDATX           Country
 C                     EXSR UJ1UF
 C                     MOVELUAD,1     #OEJNA
 C                     MOVELUAD,2     #OEKNA
 C                     MOVELUAD,3     #OELNA
 C                     MOVELUAD,4     #OEMNA
 C                     MOVELUAD,5     #OENNA
 C                     MOVELUAD,6     #OKSTX
 C           UJ1UF     BEGSR
 *============================================================
 * UJ1UF - COMPRESS NAME/ADDRESS/COUNTRY INFORMATION
 *============================================================
 *
 C           *LIKE     DEFN #IADTX    UUADTX
 C           *LIKE     DEFN #IACNA    UUACNA
 C           *LIKE     DEFN #IADNA    UUADNA
 C           *LIKE     DEFN #IAENA    UUAENA
 C           *LIKE     DEFN #IAJNA    UUAJNA
 C           *LIKE     DEFN #IEINA    UUEINA
 C           *LIKE     DEFN #IBTTX    UUBTTX- 1
 C           *LIKE     DEFN #IDATX    UUDATX
 * CLEAR OUTPUT ARRAY
 C                     MOVE *BLANK    UAD
 C                     Z-ADD1         UX      20
 C                     MOVELUUADTX    UAD,UX
 C                     ADD  1         UX
 C           UUACNA    IFNE *BLANK
 C                     MOVELUUACNA    UAD,UX
 C                     ADD  1         UX
 C                     END
 C           UUADNA    IFNE *BLANK
 C                     MOVELUUADNA    UAD,UX
 C                     ADD  1         UX
 C                     END
 C           UUAENA    IFNE *BLANK
 C                     MOVELUUAENA    UAD,UX
 C                     ADD  1         UX
 C                     END
 C                     MOVE *BLANK    UUCSTZ 34
 C                     MOVELUUAJNA    UUCST  23
 C                     MOVE UUEINA    UUCST
 C                     MOVELUUCST     UUCSTZ
 C                     MOVE UUBTTX    UUCSTZ
 C                     MOVELUUCSTZ    UAD,UX
 C           UUDATX    IFNE *BLANK
 C                     ADD  1         UX
 C                     MOVELUUDATX    UAD,UX
 C                     END
 C                     ENDSR
}


// CUR.USR Company Address Line5 = CONCAT(CON.Phone:,WRK.Telephone Number FF,CON.1)
CUR.USR_Company_Address_Line5 = 'Phone:' + WRK.Telephone_Number_FF (1);

//?If prt Co Addr on Acknow is 'Y' then print Co. Address else default Porks
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Company Address Line1 = CON.Seaboard Foods
CUR.USR_Company_Address_Line1 = 'Seaboard Foods';

// CUR.USR Company Address Line2 = CON.9000 W. 67th Street
CUR.USR_Company_Address_Line2 = '9000 W. 67th Street';

// CUR.USR Company Address Line3 = CON.Suite 200
CUR.USR_Company_Address_Line3 = 'Suite 200';

// CUR.USR Company Address Line4 = CONCAT(CON.Shawnee Mission, KS,CON.66202-3677,CO
CUR.USR_Company_Address_Line4 = 'Shawnee Mission, KS' + '66202-3677' (2);

// CUR.USR Company Address Line5 = CON.Phone: 913-261-2600
CUR.USR_Company_Address_Line5 = 'Phone: 913-261-2600';

ENDIF;

// PAR.USR Company Number = CUR.Accounting Company Number
PAR.USR_Company_Number = CUR.Company_Number;

// WRK.USR Comment 1 = CUR.USR Comment 1
WRK.USR_Comment_1 = CUR.USR_Comment_1;

// WRK.USR Comment 2 = CUR.USR Comment 2
WRK.USR_Comment_2 = CUR.USR_Comment_2;

// WRK.USR Comment 3 = CUR.USR Comment 3
WRK.USR_Comment_3 = CUR.USR_Comment_3;

// WRK.USR Comment 4 = CUR.USR Comment 4
WRK.USR_Comment_4 = CUR.USR_Comment_4;

//?Check Export status
CASE;

// IF CUR.Export Status is yes
IF CUR.Export_Status = 'Y';

// CUR.USR Description - 15 = CON.**EXPORT**
CUR.USR_Description_15 = '**EXPORT**';

//?Check Export status
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Description - 15 = CON.*BLANK
CUR.USR_Description_15 = *BLANK;

ENDIF;

// WRK.Export Status = CUR.Export Status
WRK.Export_Status = CUR.Export_Status;

// PAR.Country Description = CND.Blank
PAR.Country_Description = *BLANK;

//?     Compress Sold to and Ship to customer addresses
EXECUTE FUNCTION(RTV Country Code       RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1395144;
PARAMETER(CUR.Ship_To_Customer);
PARAMETER(PAR.Country_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Print country if not USA
CASE;

// IF PAR.Country Code is USA
IF PAR.Country_Code = 'USA';

// WRK.USR Flag 1 = CND.No
WRK.USR_Flag_1 = 'N';

//?** 05/11/2007 LJB FP1101   Blank out country descr if USA
// PAR.Country Description = CND.Blank
PAR.Country_Description = *BLANK;

//?Print country if not USA
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR Flag 1 = CND.Yes
WRK.USR_Flag_1 = 'Y';

EXECUTE FUNCTION(RTV Desc, Status       RT) TYPE(RTVOBJ) FILE(OME5REP)          AC1261065;
PARAMETER(PAR.Country_Code);
PARAMETER(PAR.Country_Description);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// WRK.Name = CUR.Ship To Name
WRK.Name = CUR.Ship_To_Name;

// WRK.Address Line 1 = CUR.Ship To Address Line 1
WRK.Address_Line_1 = CUR.Ship_To_Address_Line_1;

// WRK.Address Line 2 = CUR.Ship To Address Line 2
WRK.Address_Line_2 = CUR.Ship_To_Address_Line_2;

// WRK.Address Line 3 = CUR.Ship To Address Line 3
WRK.Address_Line_3 = CUR.Ship_To_Address_Line_3;

// WRK.City = CUR.Ship To City
WRK.City = CUR.Ship_To_City;

// WRK.State = CUR.Ship To State Code
WRK.State = CUR.Ship_To_State_Code;

// WRK.Zip/Postal Code = CUR.Ship To Zip/Postal Code
WRK.Zip_Postal_Code = CUR.Ship_To_Zip_Postal_Code;

// WRK.Country Description = PAR.Country Description
WRK.Country_Description = PAR.Country_Description;

// WRK.USR Country Description = CON.*BLANK
WRK.USR_Country_Description = *BLANK;

// Execute function RTV Comprs Nme/Add/CtryUS.
EXECUTE FUNCTION(RTV Comprs Nme/Add/CtryUS) TYPE(EXCUSRSRC) ('PDRYUFR');
PARAMETER(WRK.Name);
PARAMETER(WRK.Address_Line_1);
PARAMETER(WRK.Address_Line_2);
PARAMETER(WRK.Address_Line_3);
PARAMETER(WRK.City);
PARAMETER(WRK.State);
PARAMETER(WRK.Zip_Postal_Code);
PARAMETER(WRK.USR_Country_Description);
PARAMETER(CUR.USR_Compressed_Co_Addr_1);
PARAMETER(CUR.USR_Compressed_Co_Addr_2);
PARAMETER(CUR.USR_Compressed_Co_Addr_3);
PARAMETER(CUR.USR_Compressed_Co_Addr_4);
PARAMETER(CUR.USR_Compressed_Co_Addr_5);
PARAMETER(CUR.USR_Compressed_Address_16);
{
 * Use this function to compress name/address information
 *
 E                    UAD         6 34               Name/Address
 *
 C                     MOVEL#IADTX    UUADTX           Name
 C                     MOVEL#IACNA    UUACNA           Address 1
 C                     MOVEL#IADNA    UUADNA           Address 2
 C                     MOVEL#IAENA    UUAENA           Address 3
 C                     MOVEL#IAJNA    UUAJNA           City
 C                     MOVEL#IEINA    UUEINA           State
 C                     MOVEL#IBTTX    UUBTTX           Zip
 C                     MOVEL#IDATX    UUDATX           Country
 C                     EXSR UJ1UF
 C                     MOVELUAD,1     #OEJNA
 C                     MOVELUAD,2     #OEKNA
 C                     MOVELUAD,3     #OELNA
 C                     MOVELUAD,4     #OEMNA
 C                     MOVELUAD,5     #OENNA
 C                     MOVELUAD,6     #OKSTX
 C           UJ1UF     BEGSR
 *============================================================
 * UJ1UF - COMPRESS NAME/ADDRESS/COUNTRY INFORMATION
 *============================================================
 *
 C           *LIKE     DEFN #IADTX    UUADTX
 C           *LIKE     DEFN #IACNA    UUACNA
 C           *LIKE     DEFN #IADNA    UUADNA
 C           *LIKE     DEFN #IAENA    UUAENA
 C           *LIKE     DEFN #IAJNA    UUAJNA
 C           *LIKE     DEFN #IEINA    UUEINA
 C           *LIKE     DEFN #IBTTX    UUBTTX- 1
 C           *LIKE     DEFN #IDATX    UUDATX
 * CLEAR OUTPUT ARRAY
 C                     MOVE *BLANK    UAD
 C                     Z-ADD1         UX      20
 C                     MOVELUUADTX    UAD,UX
 C                     ADD  1         UX
 C           UUACNA    IFNE *BLANK
 C                     MOVELUUACNA    UAD,UX
 C                     ADD  1         UX
 C                     END
 C           UUADNA    IFNE *BLANK
 C                     MOVELUUADNA    UAD,UX
 C                     ADD  1         UX
 C                     END
 C           UUAENA    IFNE *BLANK
 C                     MOVELUUAENA    UAD,UX
 C                     ADD  1         UX
 C                     END
 C                     MOVE *BLANK    UUCSTZ 34
 C                     MOVELUUAJNA    UUCST  23
 C                     MOVE UUEINA    UUCST
 C                     MOVELUUCST     UUCSTZ
 C                     MOVE UUBTTX    UUCSTZ
 C                     MOVELUUCSTZ    UAD,UX
 C           UUDATX    IFNE *BLANK
 C                     ADD  1         UX
 C                     MOVELUUDATX    UAD,UX
 C                     END
 C                     ENDSR
}


// CUR.Country Description = WRK.Country Description
CUR.Country_Description = WRK.Country_Description;

EXECUTE FUNCTION(RTV Country Code       RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1395144;
PARAMETER(CUR.Bill_to_Customer);
PARAMETER(PAR.Country_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Print country if not USA
CASE;

// IF PAR.Country Code is USA
IF PAR.Country_Code = 'USA';

// WRK.USR Flag 2 = CND.No
WRK.USR_Flag_2 = 'N';

//?** 05/11/2007 LJB FP1101   Blank out country descr if USA
// PAR.Country Description = CND.Blank
PAR.Country_Description = *BLANK;

//?Print country if not USA
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR Flag 2 = CND.Yes
WRK.USR_Flag_2 = 'Y';

EXECUTE FUNCTION(RTV Desc, Status       RT) TYPE(RTVOBJ) FILE(OME5REP)          AC1261065;
PARAMETER(PAR.Country_Code);
PARAMETER(PAR.Country_Description);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// WRK.Name = CUR.Bill to Name
WRK.Name = CUR.Bill_to_Name;

// WRK.Address Line 1 = CUR.Bill to Address Line 1
WRK.Address_Line_1 = CUR.Bill_to_Address_Line_1;

// WRK.Address Line 2 = CUR.Bill to Address Line 2
WRK.Address_Line_2 = CUR.Bill_to_Address_Line_2;

// WRK.Address Line 3 = CUR.Bill to Address Line 3
WRK.Address_Line_3 = CUR.Bill_to_Address_Line_3;

// WRK.City = CUR.Bill to City
WRK.City = CUR.Bill_to_City;

// WRK.State = CUR.Bill to State Code
WRK.State = CUR.Bill_to_State_Code;

// WRK.Zip/Postal Code = CUR.Bill to Zip/Postal Code
WRK.Zip_Postal_Code = CUR.Bill_to_Zip_Postal_Code;

// WRK.Country Description = PAR.Country Description
WRK.Country_Description = PAR.Country_Description;

// WRK.Blank for 30          USR = CON.*BLANK
WRK.Blank_for_30_USR = *BLANK;

// Execute function RTV Comprs Nme/Add/CtryUS.
EXECUTE FUNCTION(RTV Comprs Nme/Add/CtryUS) TYPE(EXCUSRSRC) ('PDRYUFR');
PARAMETER(WRK.Name);
PARAMETER(WRK.Address_Line_1);
PARAMETER(WRK.Address_Line_2);
PARAMETER(WRK.Address_Line_3);
PARAMETER(WRK.City);
PARAMETER(WRK.State);
PARAMETER(WRK.Zip_Postal_Code);
PARAMETER(WRK.Blank_for_30_USR);
PARAMETER(CUR.USR_Compressed_Address_1);
PARAMETER(CUR.USR_Compressed_Address_2);
PARAMETER(CUR.USR_Compressed_Address_3);
PARAMETER(CUR.USR_Compressed_Address_4);
PARAMETER(CUR.USR_Compressed_Address_5);
PARAMETER(CUR.USR_Compressed_Address_17);
{
 * Use this function to compress name/address information
 *
 E                    UAD         6 34               Name/Address
 *
 C                     MOVEL#IADTX    UUADTX           Name
 C                     MOVEL#IACNA    UUACNA           Address 1
 C                     MOVEL#IADNA    UUADNA           Address 2
 C                     MOVEL#IAENA    UUAENA           Address 3
 C                     MOVEL#IAJNA    UUAJNA           City
 C                     MOVEL#IEINA    UUEINA           State
 C                     MOVEL#IBTTX    UUBTTX           Zip
 C                     MOVEL#IDATX    UUDATX           Country
 C                     EXSR UJ1UF
 C                     MOVELUAD,1     #OEJNA
 C                     MOVELUAD,2     #OEKNA
 C                     MOVELUAD,3     #OELNA
 C                     MOVELUAD,4     #OEMNA
 C                     MOVELUAD,5     #OENNA
 C                     MOVELUAD,6     #OKSTX
 C           UJ1UF     BEGSR
 *============================================================
 * UJ1UF - COMPRESS NAME/ADDRESS/COUNTRY INFORMATION
 *============================================================
 *
 C           *LIKE     DEFN #IADTX    UUADTX
 C           *LIKE     DEFN #IACNA    UUACNA
 C           *LIKE     DEFN #IADNA    UUADNA
 C           *LIKE     DEFN #IAENA    UUAENA
 C           *LIKE     DEFN #IAJNA    UUAJNA
 C           *LIKE     DEFN #IEINA    UUEINA
 C           *LIKE     DEFN #IBTTX    UUBTTX- 1
 C           *LIKE     DEFN #IDATX    UUDATX
 * CLEAR OUTPUT ARRAY
 C                     MOVE *BLANK    UAD
 C                     Z-ADD1         UX      20
 C                     MOVELUUADTX    UAD,UX
 C                     ADD  1         UX
 C           UUACNA    IFNE *BLANK
 C                     MOVELUUACNA    UAD,UX
 C                     ADD  1         UX
 C                     END
 C           UUADNA    IFNE *BLANK
 C                     MOVELUUADNA    UAD,UX
 C                     ADD  1         UX
 C                     END
 C           UUAENA    IFNE *BLANK
 C                     MOVELUUAENA    UAD,UX
 C                     ADD  1         UX
 C                     END
 C                     MOVE *BLANK    UUCSTZ 34
 C                     MOVELUUAJNA    UUCST  23
 C                     MOVE UUEINA    UUCST
 C                     MOVELUUCST     UUCSTZ
 C                     MOVE UUBTTX    UUCSTZ
 C                     MOVELUUCSTZ    UAD,UX
 C           UUDATX    IFNE *BLANK
 C                     ADD  1         UX
 C                     MOVELUUDATX    UAD,UX
 C                     END
 C                     ENDSR
}


// CUR.Country Description = WRK.Country Description
CUR.Country_Description = WRK.Country_Description;

EXECUTE FUNCTION(RTV 1st Warehouse/UOM  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1568424;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(CUR.Warehouse_Code_PASS_USR);
PARAMETER(NLL.U_M_Ordered);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(RTV Country Code only  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1531787;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(LCL.Country_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


//?RMC oms026  5/4/6 for russian, use "E" document type
CASE;

// IF LCL.Country Code is Russia
IF LCL.Country_Code = 'RUS';

//?R16637 DN 10/07/20-Replaced Function to Get Other Cnsgnr/Cnsgne Info.
EXECUTE FUNCTION(Rtv Consignee/Consgnr2 RT) TYPE(RTVOBJ) FILE(PDMRREP)          AC2191691;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER('E');
PARAMETER(LCL.Country_Code_USR);
PARAMETER(CUR.ED_Consignor_Name);
PARAMETER(CUR.ED_Consignor_Addr_1);
PARAMETER(CUR.ED_Consignor_Addr_2);
PARAMETER(CUR.ED_Consignor_Addr_3);
PARAMETER(CUR.ED_Consignor_Addr_4);
PARAMETER(CUR.ED_Consignor_State);
PARAMETER(CUR.ED_Consignor_Postal);
PARAMETER(CUR.ED_Consignor_Country_Code);
PARAMETER(CUR.ED_Consignee_Name);
PARAMETER(CUR.ED_Consignee_Addr_1);
PARAMETER(CUR.ED_Consignee_Addr_2);
PARAMETER(CUR.ED_Consignee_Addr_3);
PARAMETER(CUR.ED_Consignee_Addr_4);
PARAMETER(CUR.ED_Consignee_State);
PARAMETER(CUR.ED_Consignee_Postal);
PARAMETER(CUR.ED_Consignee_Country_Code);
PARAMETER(CUR.ED_Shipping_Marks_Txt);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?RMC oms026  5/4/6 for russian, use "E" document type
// IF *OTHERWISE
IF *OTHERWISE;

//?R16637 DN 10/07/20-Replaced Function to Get Other Cnsgnr/Cnsgne Info.
EXECUTE FUNCTION(Rtv Consignee/Consgnr2 RT) TYPE(RTVOBJ) FILE(PDMRREP)          AC2191691;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER('H');
PARAMETER(LCL.Country_Code_USR);
PARAMETER(CUR.ED_Consignor_Name);
PARAMETER(CUR.ED_Consignor_Addr_1);
PARAMETER(CUR.ED_Consignor_Addr_2);
PARAMETER(CUR.ED_Consignor_Addr_3);
PARAMETER(CUR.ED_Consignor_Addr_4);
PARAMETER(CUR.ED_Consignor_State);
PARAMETER(CUR.ED_Consignor_Postal);
PARAMETER(CUR.ED_Consignor_Country_Code);
PARAMETER(CUR.ED_Consignee_Name);
PARAMETER(CUR.ED_Consignee_Addr_1);
PARAMETER(CUR.ED_Consignee_Addr_2);
PARAMETER(CUR.ED_Consignee_Addr_3);
PARAMETER(CUR.ED_Consignee_Addr_4);
PARAMETER(CUR.ED_Consignee_State);
PARAMETER(CUR.ED_Consignee_Postal);
PARAMETER(CUR.ED_Consignee_Country_Code);
PARAMETER(CUR.ED_Shipping_Marks_Txt);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

//?R16637 DN 10/07/20-Suppress Consignor/Consignee Blank Address Lines.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Live with PHIS    RT) TYPE(RTVOBJ) FILE(PDMMREP)           AC2160999;
PARAMETER(CUR.Company_Number);
PARAMETER('A');
PARAMETER(LCL.Country_Code_USR);
PARAMETER(LCL.ED_Live_with_PHIS);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Fmt Suppress Addr LinesIF) TYPE(EXCINTFUN)                     AC2191192;
PARAMETER(CUR.ED_Consignor_Addr_2);
PARAMETER(CUR.ED_Consignor_Addr_3);
PARAMETER(CUR.ED_Consignor_Addr_4);
PARAMETER(CUR.ED_Consignor_State);
PARAMETER(CUR.ED_Consignor_Postal);
PARAMETER(CUR.ED_Consignor_Country_Code);
PARAMETER(CUR.ED_Consignee_Addr_2);
PARAMETER(CUR.ED_Consignee_Addr_3);
PARAMETER(CUR.ED_Consignee_Addr_4);
PARAMETER(CUR.ED_Consignee_State);
PARAMETER(CUR.ED_Consignee_Postal);
PARAMETER(CUR.ED_Consignee_Country_Code);
PARAMETER(LCL.ED_Live_with_PHIS);
PARAMETER(CUR.Consignor_Country_Desc_U);
PARAMETER(CUR.Consignee_Country_Desc_U);
{
 //?Execute internal function

 //?CONSIGNOR: Format & Suppress Blank Address Lines.
 CASE;

 // IF PAR.ED Consignor Addr 2 is Not Blank
 IF PAR.ED_Consignor_Addr_2 <> *BLANK;

 // AND PAR.ED Consignor Addr 3 is Not Blank
 AND PAR.ED_Consignor_Addr_3 <> *BLANK;

 //?If Addr4/City is Entered then Concat State & Zip.
 CASE;

 // IF PAR.ED Consignor Addr 4 is Not Blank
 IF PAR.ED_Consignor_Addr_4 <> *BLANK;

 // PAR.ED Consignor Addr 4 = CONCAT(PAR.ED Consignor Addr 4,PAR.ED Consignor State,CON.1)
 PAR.ED_Consignor_Addr_4 = PAR.ED_Consignor_Addr_4 + PAR.ED_Consignor_State (1);

 // PAR.ED Consignor Addr 4 = CONCAT(PAR.ED Consignor Addr 4,PAR.ED Consignor Postal,CON.1)
 PAR.ED_Consignor_Addr_4 = PAR.ED_Consignor_Addr_4 + PAR.ED_Consignor_Postal (1);

 ENDIF;

 //?CONSIGNOR: Format & Suppress Blank Address Lines.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Check Blank Address Lines to Suppress.
 CASE;

 // IF PAR.ED Consignor Addr 2 is eq blank
 IF PAR.ED_Consignor_Addr_2 = *BLANK;

 //?Shouldn't have too many scenarios with Addr 2 is blank.
 // PAR.ED Consignor Addr 2 = PAR.ED Consignor Addr 3
 PAR.ED_Consignor_Addr_2 = PAR.ED_Consignor_Addr_3;

 // PAR.ED Consignor Addr 3 = CON.*BLANK
 PAR.ED_Consignor_Addr_3 = *BLANK;

 ENDIF;

 //?Check Addr 4/City & Suppress Blank Address Line.
 CASE;

 // IF PAR.ED Consignor Addr 4 is eq blank
 IF PAR.ED_Consignor_Addr_4 = *BLANK;

 //?Check Addr 4/City & Suppress Blank Address Line.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Addr4/City is Entered, Concat State & Zip.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ED Consignor Addr 4 = CONCAT(PAR.ED Consignor Addr 4,PAR.ED Consignor State,CON.1)
 PAR.ED_Consignor_Addr_4 = PAR.ED_Consignor_Addr_4 + PAR.ED_Consignor_State (1);

 // PAR.ED Consignor Addr 4 = CONCAT(PAR.ED Consignor Addr 4,PAR.ED Consignor Postal,CON.1)
 PAR.ED_Consignor_Addr_4 = PAR.ED_Consignor_Addr_4 + PAR.ED_Consignor_Postal (1);

 ENDIF;

 CASE;

 // IF PAR.ED Consignor Addr 2 is Blank
 IF PAR.ED_Consignor_Addr_2 = *BLANK;

 // PAR.ED Consignor Addr 2 = PAR.ED Consignor Addr 4
 PAR.ED_Consignor_Addr_2 = PAR.ED_Consignor_Addr_4;

 // PAR.ED Consignor Addr 4 = CON.*BLANK
 PAR.ED_Consignor_Addr_4 = *BLANK;

 // IF PAR.ED Consignor Addr 3 is Blank
 IF PAR.ED_Consignor_Addr_3 = *BLANK;

 // PAR.ED Consignor Addr 3 = PAR.ED Consignor Addr 4
 PAR.ED_Consignor_Addr_3 = PAR.ED_Consignor_Addr_4;

 // PAR.ED Consignor Addr 4 = CON.*BLANK
 PAR.ED_Consignor_Addr_4 = *BLANK;

 ENDIF;

 ENDIF;

 ENDIF;

 //?CONSIGNEE: Format & Suppress Blank Address Lines.
 CASE;

 // IF PAR.ED Consignee Addr 2 is Not Blank
 IF PAR.ED_Consignee_Addr_2 <> *BLANK;

 // AND PAR.ED Consignee Addr 3 is Not Blank
 AND PAR.ED_Consignee_Addr_3 <> *BLANK;

 //?If Addr4/City is Entered then Concat State & Zip.
 CASE;

 // IF PAR.ED Consignee Addr 4 is Not Blank
 IF PAR.ED_Consignee_Addr_4 <> *BLANK;

 // PAR.ED Consignee Addr 4 = CONCAT(PAR.ED Consignee Addr 4,PAR.ED Consignee State,CON.1)
 PAR.ED_Consignee_Addr_4 = PAR.ED_Consignee_Addr_4 + PAR.ED_Consignee_State (1);

 // PAR.ED Consignee Addr 4 = CONCAT(PAR.ED Consignee Addr 4,PAR.ED Consignee Postal,CON.1)
 PAR.ED_Consignee_Addr_4 = PAR.ED_Consignee_Addr_4 + PAR.ED_Consignee_Postal (1);

 ENDIF;

 //?CONSIGNEE: Format & Suppress Blank Address Lines.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Check Blank Address Lines to Suppress.
 CASE;

 // IF PAR.ED Consignee Addr 2 is eq blank
 IF PAR.ED_Consignee_Addr_2 = *BLANK;

 //?Shouldn't have too many scenarios with Addr 2 is blank.
 // LCL.ED Consignee Addr 3 = PAR.ED Consignee Addr 3
 LCL.ED_Consignee_Addr_3 = PAR.ED_Consignee_Addr_3;

 // PAR.ED Consignee Addr 2 = LCL.ED Consignee Addr 3
 PAR.ED_Consignee_Addr_2 = LCL.ED_Consignee_Addr_3;

 // PAR.ED Consignee Addr 3 = LCL.USR Blank Field
 PAR.ED_Consignee_Addr_3 = LCL.USR_Blank_Field;

 ENDIF;

 //?Check Addr 4/City & Suppress Blank Address Line.
 CASE;

 // IF PAR.ED Consignee Addr 4 is eq blank
 IF PAR.ED_Consignee_Addr_4 = *BLANK;

 //?S17055 DN 04/06/21-Concat Consignee State & Zip if Entered.
 CASE;

 // IF PAR.ED Consignee Postal is Entered
 IF PAR.ED_Consignee_Postal <> *BLANK;

 //?Get State for Domestic Address Else Concat Only Zip Code.
 CASE;

 // IF PAR.ED Consignee State is State code not Blanks
 IF PAR.ED_Consignee_State <> *BLANK;

 // AND PAR.ED Consignee State is Not International
 AND PAR.ED_Consignee_State <> '.';

 // LCL.ED Consignee Addr 4 = PAR.ED Consignee State
 LCL.ED_Consignee_Addr_4 = PAR.ED_Consignee_State;

 // LCL.ED Consignee Addr 4 = CONCAT(LCL.ED Consignee Addr 4,PAR.ED Consignee Postal,CON.1)
 LCL.ED_Consignee_Addr_4 = LCL.ED_Consignee_Addr_4 + PAR.ED_Consignee_Postal (1);

 //?Get State for Domestic Address Else Concat Only Zip Code.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.ED Consignee Addr 4 = PAR.ED Consignee Postal
 LCL.ED_Consignee_Addr_4 = PAR.ED_Consignee_Postal;

 ENDIF;

 //?Concat State/Zip to Last Non Blank Address Line.
 CASE;

 // IF PAR.ED Consignee Addr 3 is Not Blank
 IF PAR.ED_Consignee_Addr_3 <> *BLANK;

 // PAR.ED Consignee Addr 3 = CONCAT(PAR.ED Consignee Addr 3,LCL.ED Consignee Addr 4,CON.1)
 PAR.ED_Consignee_Addr_3 = PAR.ED_Consignee_Addr_3 + LCL.ED_Consignee_Addr_4 (1);

 //?Concat State/Zip to Last Non Blank Address Line.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Must Concat on Address 2 Line.
 // PAR.ED Consignee Addr 2 = CONCAT(PAR.ED Consignee Addr 2,LCL.ED Consignee Addr 4,CON.1)
 PAR.ED_Consignee_Addr_2 = PAR.ED_Consignee_Addr_2 + LCL.ED_Consignee_Addr_4 (1);

 ENDIF;

 ENDIF;

 //?Check Addr 4/City & Suppress Blank Address Line.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Addr4/City is Entered, Concat State & Zip.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.ED Consignee Addr 4 = CONCAT(PAR.ED Consignee Addr 4,PAR.ED Consignee State,CON.1)
 LCL.ED_Consignee_Addr_4 = PAR.ED_Consignee_Addr_4 + PAR.ED_Consignee_State (1);

 // LCL.ED Consignee Addr 4 = CONCAT(LCL.ED Consignee Addr 4,PAR.ED Consignee Postal,CON.1)
 LCL.ED_Consignee_Addr_4 = LCL.ED_Consignee_Addr_4 + PAR.ED_Consignee_Postal (1);

 ENDIF;

 CASE;

 // IF PAR.ED Consignee Addr 2 is Blank
 IF PAR.ED_Consignee_Addr_2 = *BLANK;

 // PAR.ED Consignee Addr 2 = LCL.ED Consignee Addr 4
 PAR.ED_Consignee_Addr_2 = LCL.ED_Consignee_Addr_4;

 // PAR.ED Consignee Addr 4 = LCL.USR Blank Field
 PAR.ED_Consignee_Addr_4 = LCL.USR_Blank_Field;

 // IF PAR.ED Consignee Addr 3 is Blank
 IF PAR.ED_Consignee_Addr_3 = *BLANK;

 // PAR.ED Consignee Addr 3 = LCL.ED Consignee Addr 4
 PAR.ED_Consignee_Addr_3 = LCL.ED_Consignee_Addr_4;

 // PAR.ED Consignee Addr 4 = LCL.USR Blank Field
 PAR.ED_Consignee_Addr_4 = LCL.USR_Blank_Field;

 ENDIF;

 ENDIF;

 ENDIF;

 //?Get Consignor Country Desc.
 CASE;

 // IF PAR.ED Consignor Country Code is Entered
 IF PAR.ED_Consignor_Country_Code <> *BLANK;

 EXECUTE FUNCTION(Rtv Country Desc       RT) TYPE(RTVOBJ) FILE(OME5REP)          AC2188699;
 PARAMETER(PAR.ED_Consignor_Country_Code);
 PARAMETER(PAR.Consignor_Country_Desc_U);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Move Country Desc to Addr 3 or 4 if Blank.
 CASE;

 // IF PAR.ED Consignor Addr 3 is eq blank
 IF PAR.ED_Consignor_Addr_3 = *BLANK;

 // PAR.ED Consignor Addr 3 = PAR.Consignor Country Desc U
 PAR.ED_Consignor_Addr_3 = PAR.Consignor_Country_Desc_U;

 // PAR.Consignor Country Desc U = CON.*BLANK
 PAR.Consignor_Country_Desc_U = *BLANK;

 //?Move Country Desc to Addr 3 or 4 if Blank.
 // IF PAR.ED Consignor Addr 4 is eq blank
 IF PAR.ED_Consignor_Addr_4 = *BLANK;

 // PAR.ED Consignor Addr 4 = PAR.Consignor Country Desc U
 PAR.ED_Consignor_Addr_4 = PAR.Consignor_Country_Desc_U;

 // PAR.Consignor Country Desc U = CON.*BLANK
 PAR.Consignor_Country_Desc_U = *BLANK;

 ENDIF;

 ENDIF;

 //?Get Consignee Country Desc.
 CASE;

 // IF PAR.ED Consignee Country Code is Entered
 IF PAR.ED_Consignee_Country_Code <> *BLANK;

 //?Set 'THE PEOPLE'S REPUBLIC OF CHINA' Else Get Country Desc.
 CASE;

 // IF PAR.ED Consignee Country Code is China
 IF PAR.ED_Consignee_Country_Code = 'CHN';

 // PAR.Consignee Country Desc U = CONCAT(CON.THE PEOPLE'S REPUBLIC OF,CON.CHINA,CON.1)
 PAR.Consignee_Country_Desc_U = 'THE PEOPLE'S REPUBLIC OF' + 'CHINA' (1);

 //?Set 'THE PEOPLE'S REPUBLIC OF CHINA' Else Get Country Desc.
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Country Desc       RT) TYPE(RTVOBJ) FILE(OME5REP)          AC2188699;
 PARAMETER(PAR.ED_Consignee_Country_Code);
 PARAMETER(PAR.Consignee_Country_Desc_U);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?Move Country Desc to Addr 3 or 4 if Blank.
 CASE;

 // IF PAR.ED Consignee Addr 3 is eq blank
 IF PAR.ED_Consignee_Addr_3 = *BLANK;

 // PAR.ED Consignee Addr 3 = PAR.Consignee Country Desc U
 PAR.ED_Consignee_Addr_3 = PAR.Consignee_Country_Desc_U;

 // PAR.Consignee Country Desc U = CON.*BLANK
 PAR.Consignee_Country_Desc_U = *BLANK;

 //?Move Country Desc to Addr 3 or 4 if Blank.
 // IF PAR.ED Consignee Addr 4 is eq blank
 IF PAR.ED_Consignee_Addr_4 = *BLANK;

 // PAR.ED Consignee Addr 4 = PAR.Consignee Country Desc U
 PAR.ED_Consignee_Addr_4 = PAR.Consignee_Country_Desc_U;

 // PAR.Consignee Country Desc U = CON.*BLANK
 PAR.Consignee_Country_Desc_U = *BLANK;

 ENDIF;

 ENDIF;

}


ENDIF;

//?RMC E01457 07/18/2011 MEXico - print destination
CASE;

// IF LCL.Country Code is Mexico
IF LCL.Country_Code = 'MEX';

EXECUTE FUNCTION(Rtv Destination RemrksRT) TYPE(RTVOBJ) FILE(PDMRREP)           AC2022582;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER('H');
PARAMETER(CUR.ED_Remark_Constant_2);
PARAMETER(CUR.ED_Remark_Constant_3);
PARAMETER(CUR.ED_Remark_Constant_4);
PARAMETER(CUR.ED_Remark_Constant_5);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF CUR.ED Remark Constant 2 is Blank
IF CUR.ED_Remark_Constant_2 = *BLANK;

// CUR.ED Remark Constant 2 = CON.Destination:
CUR.ED_Remark_Constant_2 = 'Destination:';

ENDIF;

//?RMC E01457 07/18/2011 MEXico - print destination
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.ED Remark Constant 2 = CON.*BLANK
CUR.ED_Remark_Constant_2 = *BLANK;

// CUR.ED Remark Constant 3 = CON.*BLANK
CUR.ED_Remark_Constant_3 = *BLANK;

// CUR.ED Remark Constant 4 = CON.*BLANK
CUR.ED_Remark_Constant_4 = *BLANK;

// CUR.ED Remark Constant 5 = CON.*BLANK
CUR.ED_Remark_Constant_5 = *BLANK;

ENDIF;

// CUR.Country Code = LCL.Country Code
CUR.Country_Code = LCL.Country_Code;

// Print Order Number header format
PRINT Order Number header format;

ENDIF;

// SUPPRESSED PRINT Ship To Customer header format

//?USER: Process before print of detail format

// PAR.Block Order Flag = DB1.Block Order Flag
PAR.Block_Order_Flag = DB1.Block_Order_Flag;

//?USER: On print of detail format

// PAR.Order Certification Flag = CUR.Order Certification Flag
PAR.Order_Certification_Flag = CUR.Order_Certification_Flag;

// PAR.Export Docs Go w/Driver = CUR.Export Docs Go w/Driver
PAR.Export_Docs_Go_w_Driver = CUR.Export_Docs_Go_w_Driver;

//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : PRT Hdr Comment 3/Lne PO
CASE;

// IF DB1.Comment Print Acknowledge is no
IF DB1.Comment_Print_Acknowledge = 'N';

QUIT;

ENDIF;

EXECUTE FUNCTION(PRT Hdr Comment 3/Lne PO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER('PS');
PARAMETER(*ZERO);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Embedded PRTOBJ : PRT Hdr Comment 3/Lne PO
EXECUTE FUNCTION(PRT Hdr Comment 3/Lne PO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER('PI');
PARAMETER(*ZERO);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Embedded PRTOBJ : PRT Hdr Comment 3/Lne PO
EXECUTE FUNCTION(PRT Hdr Comment 3/Lne PO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER('BL');
PARAMETER(*ZERO);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Embedded PRTOBJ : PRT Hdr Comment 3/Lne PO
EXECUTE FUNCTION(PRT Hdr Comment 3/Lne PO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER('IN');
PARAMETER(*ZERO);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Embedded PRTOBJ : PRT Ship Inst 3/Line  PO
EXECUTE FUNCTION(PRT Ship Inst 3/Line  PO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Embedded PRTOBJ : Prt Cust Comment PL   PO
EXECUTE FUNCTION(Rtv Record count      RT) TYPE(RTVOBJ) FILE(POAVCPP)           AC1603538;
PARAMETER(DB1.Ship_To_Customer);
PARAMETER('PI');
PARAMETER(LCL.USR_Count);
{
 //?USER: Processing if Data record not found

 // PAR.USR Count = CON.*ZERO
 PAR.USR_Count = 0;

 //?USER: Process Data record

 // PAR.USR Count = PAR.USR Count + CON.1
 PAR.USR_Count = PAR.USR_Count + 1;

}


CASE;

// IF LCL.USR Count is EQ 0
IF LCL.USR_Count = *ZERO;

QUIT;

ENDIF;

EXECUTE FUNCTION(Prt Cust Comment PL   PO) TYPE(PRTOBJ);
PARAMETER(DB1.Ship_To_Customer);
PARAMETER('PI');
PARAMETER(*ZERO);
PARAMETER('Y');
{
 //?USER: Processing if Data record not found

 // PAR.USR Count = CON.*ZERO
 PAR.USR_Count = 0;

 //?USER: Process Data record

 // PAR.USR Count = PAR.USR Count + CON.1
 PAR.USR_Count = PAR.USR_Count + 1;

}


//?Embedded PRTOBJ : Prt Country Comment   PO
EXECUTE FUNCTION(RTV Country Code only  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1531787;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(LCL.Country_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Record count      RT) TYPE(RTVOBJ) FILE(PPB1REP)           AC1751982;
PARAMETER(LCL.Country_Code);
PARAMETER('PL');
PARAMETER(LCL.USR_Count);
{
 //?USER: Processing if Data record not found

 // PAR.USR Count = CON.*ZERO
 PAR.USR_Count = 0;

 //?USER: Process Data record

 // PAR.USR Count = PAR.USR Count + CON.1
 PAR.USR_Count = PAR.USR_Count + 1;

}


CASE;

// IF LCL.USR Count is EQ 0
IF LCL.USR_Count = *ZERO;

QUIT;

ENDIF;

EXECUTE FUNCTION(Prt Country Comment   PO) TYPE(PRTOBJ);
PARAMETER(LCL.Country_Code);
PARAMETER('PL');
PARAMETER('Y');
{
 //?USER: Processing if Data record not found

 // PAR.USR Count = CON.*ZERO
 PAR.USR_Count = 0;

 //?USER: Process Data record

 // PAR.USR Count = PAR.USR Count + CON.1
 PAR.USR_Count = PAR.USR_Count + 1;

}


//?Embedded PRTOBJ : PRT All Orders on Load PO
EXECUTE FUNCTION(PRT All Orders on Load PO) TYPE(PRTOBJ);
PARAMETER(DB1.Load_ID);
PARAMETER(*ZERO);
{
 //?USER: Processing if Data record not found

 // PAR.USR Count = CON.*ZERO
 PAR.USR_Count = 0;

 //?USER: Process Data record

 // PAR.USR Count = PAR.USR Count + CON.1
 PAR.USR_Count = PAR.USR_Count + 1;

}


//?Embedded PRTOBJ : PRT Detail-Acknowledge PO
EXECUTE FUNCTION(PRT Detail-Acknowledge PO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.USR_Freight_Amount_1);
PARAMETER(WRK.USR_Spec_Charge_Amount_1);
PARAMETER(PAR.System_Date_Format);
PARAMETER(CUR.Air_Freight_Order);
PARAMETER(LCL.Country_Code);
PARAMETER(LCL.Company_Organization);
{
 //?USER: Processing if Data record not found

 // PAR.USR Count = CON.*ZERO
 PAR.USR_Count = 0;

 //?USER: Process Data record

 // PAR.USR Count = PAR.USR Count + CON.1
 PAR.USR_Count = PAR.USR_Count + 1;

}


//?USER: Print required level totals

// SUPPRESSED PRINT Ship To Customer totals format

CASE;

IF NEW Order_Number;
// CUR.USR Temperature 3.1 = CUR.Reefer Temperature
CUR.USR_Temperature_3_1 = CUR.Reefer_Temperature;

//?check shipping method
CASE;

// IF CUR.Shipping Method is Buyers Truck
IF CUR.Shipping_Method = 'CT';

// CUR.USR Check Y/N Status = CND.yes
CUR.USR_Check_Y_N_Status = 'Y';

//?check shipping method
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Check Y/N Status = CND.no
CUR.USR_Check_Y_N_Status = 'N';

ENDIF;

//?Load "Order Certification" descriptor.
CASE;

// IF PAR.Order Certification Flag is Yes
IF PAR.Order_Certification_Flag = 'Y';

// CUR.USR Text 7            USR = CON.CERTIFY
CUR.USR_Text_7_USR = 'CERTIFY';

//?Load "Order Certification" descriptor.
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Text 7            USR = CON.*BLANK
CUR.USR_Text_7_USR = *BLANK;

ENDIF;

//?OMS336 - Phase I
EXECUTE FUNCTION(RTV Combo for P & T    RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1585951;
PARAMETER(PAR.Order_Number);
PARAMETER(CUR.Load_ID);
PARAMETER(WRK.Palletize);
PARAMETER(WRK.U_M_Ordered);
PARAMETER(WRK.Palletize_USR);
{
 //?USER: Initialize routine

 //?05/11/04 SLM PKTR01 Multi-Company Order Header TFG
 //?                    Remove Co from Parms
 // PAR.U/M - Ordered = CON.*BLANK
 PAR.U_M_Ordered = *BLANK;

 //?RMC added 6-30-21
 // PAR.Palletize             USR = CND.blank
 PAR.Palletize_USR = *BLANK;

 //?USER: Processing if Data record not found

 QUIT;

 //?USER: Process Data record

 //?RMC change par.palletize to BOTH .. was output - 6/30/21
 CASE;

 // IF PAR.U/M - Ordered is Mixed
 IF PAR.U_M_Ordered = 'MX';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Palletize = DB1.Palletize
 PAR.Palletize = DB1.Palletize;

 EXECUTE FUNCTION(RTV Combo for P & T    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1585952;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(PAR.U_M_Ordered);
 {
  //?USER: Initialize routine

  // WRK.First Time Flag = CND.Yes
  WRK.First_Time_Flag = 'Y';

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  QUIT;

  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF PAR.U/M - Ordered is Not Entered
  IF PAR.U_M_Ordered = *BLANK;

  // PAR.U/M - Ordered = DB1.U/M - Ordered
  PAR.U_M_Ordered = DB1.U_M_Ordered;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF DB1.U/M - Ordered EQ PAR.U/M - Ordered
  IF DB1.U_M_Ordered = PAR.U_M_Ordered;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.U/M - Ordered = CND.Mixed
  PAR.U_M_Ordered = 'MX';

  QUIT;

  ENDIF;

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?RMC after 6-30-21   check par.palletize
 CASE;

 // IF PAR.Palletize is no
 IF PAR.Palletize = 'N';

 // AND PAR.U/M - Ordered is Combos
 AND PAR.U_M_Ordered = 'CB';

 // PAR.Palletize             USR = CND.no
 PAR.Palletize_USR = 'N';

 //?RMC after 6-30-21   check par.palletize
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Pallet Flag/Combo  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1590207;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(PAR.Palletize_USR);
 {
  //?USER: Initialize routine

  // PAR.Palletize = CND.blank
  PAR.Palletize = *BLANK;

  //?USER: Process Data record

  //?RMC added not Cancelled check 6-30-21
  CASE;

  // IF DB1.Detail Line Status is Not cancelled
  IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

  CASE;

  // IF DB1.U/M - Ordered is Combos
  IF DB1.U_M_Ordered = 'CB';

  // AND DB1.Palletize is no
  AND DB1.Palletize = 'N';

  // PAR.Palletize = DB1.Palletize
  PAR.Palletize = DB1.Palletize;

  QUIT;

  ENDIF;

  ENDIF;

 }

 ENDIF;

}


// CUR.Status Unused 1 = CND.no
CUR.Status_Unused_1 = 'N';

//?check combos   after 6/30/21  RMC W80897
CASE;

// IF WRK.Palletize             USR is not no
IF WRK.Palletize_USR = *BLANK/'Y';

// CUR.Status Unused 1 = CND.yes
CUR.Status_Unused_1 = 'Y';

ENDIF;

//?** Get booking number from OHE not Load Header   05/11/2007 LJB FP1101
EXECUTE FUNCTION(RTV OHE Ship fields    RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC1814635;
PARAMETER(CUR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Shipping_Line);
PARAMETER(LCL.Port_Delv_Terminal);
PARAMETER(LCL.OHE_City);
PARAMETER(LCL.OHE_Vessel_Airline);
PARAMETER(LCL.OHE_Voyage_Flight);
PARAMETER(CUR.Special_Comment_1);
PARAMETER(LCL.OHE_Discharge_Port_Airprt);
PARAMETER(LCL.OHE_Sail_Flight_Date);
PARAMETER(LCL.OHE_Port_Cut_Date);
PARAMETER(LCL.OHE_Arrival_Date);
PARAMETER(LCL.OHE_Late_Delivery_Code);
PARAMETER(LCL.OHE_Ship_Status);
PARAMETER(LCL.OHE_Container_Number);
PARAMETER(LCL.OHE_Comment_1);
PARAMETER(LCL.OHE_Comment_2);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Retrieve delivery po from OHE file            01/15/2009 LJB FP1303
EXECUTE FUNCTION(RTV OHE for Ord Entry RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC1914702;
PARAMETER(CUR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(CUR.Delivery_P_O_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?** Retrieve Print Req Delv Tm on docs            02/16/2011 RMC E01335
EXECUTE FUNCTION(Rtv Print Req Delv Tm RT) TYPE(RTVOBJ) FILE(PDNIREP)           AC2011476;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Ship_To_Customer);
PARAMETER(LCL.Print_Req_Delv_Tm_on_Docs);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If Palletize is yes, get Pallet Type description
CASE;

// IF CUR.Palletize is yes
IF CUR.Palletize = 'Y';

//?WI464 DN 03/31/22-Get Pallet Type from O.D. file. Order not shipped yet.
EXECUTE FUNCTION(Rtv Unique Pallet Type RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2204441;
PARAMETER(CUR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(1);
PARAMETER(1);
PARAMETER(CUR.Pallet_Type_1);
PARAMETER(CUR.Pallet_Type_2);
PARAMETER(CUR.Pallet_Type_3);
PARAMETER(CUR.Pallet_Type_4);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?Send Back Up to 4 Unique Pallet Types Only.
 CASE;

 // IF NOT DB1.OD Pallet Type is None
 IF ! DB1.OD_Pallet_Type = *BLANK;

 //?NOTE: Per Rose, an Order shouldn't have more than 4 unique Pallet Types.
 //?Set Pallet Type 1.
 CASE;

 // IF PAR.Pallet Type 1 is None
 IF PAR.Pallet_Type_1 = *BLANK;

 // PAR.Pallet Type 1 = DB1.OD Pallet Type
 PAR.Pallet_Type_1 = DB1.OD_Pallet_Type;

 //?Set Pallet Type 1.
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Pallet Type 1 EQ DB1.OD Pallet Type
 IF PAR.Pallet_Type_1 = DB1.OD_Pallet_Type;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Set Pallet Type 2.
 CASE;

 // IF PAR.Pallet Type 2 is None
 IF PAR.Pallet_Type_2 = *BLANK;

 // PAR.Pallet Type 2 = DB1.OD Pallet Type
 PAR.Pallet_Type_2 = DB1.OD_Pallet_Type;

 //?Set Pallet Type 2.
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Pallet Type 2 EQ DB1.OD Pallet Type
 IF PAR.Pallet_Type_2 = DB1.OD_Pallet_Type;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Set Pallet Type 3.
 CASE;

 // IF PAR.Pallet Type 3 is None
 IF PAR.Pallet_Type_3 = *BLANK;

 // PAR.Pallet Type 3 = DB1.OD Pallet Type
 PAR.Pallet_Type_3 = DB1.OD_Pallet_Type;

 //?Set Pallet Type 3.
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Pallet Type 3 EQ DB1.OD Pallet Type
 IF PAR.Pallet_Type_3 = DB1.OD_Pallet_Type;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Set Pallet Type 4.
 CASE;

 // IF PAR.Pallet Type 4 is None
 IF PAR.Pallet_Type_4 = *BLANK;

 // PAR.Pallet Type 4 = DB1.OD Pallet Type
 PAR.Pallet_Type_4 = DB1.OD_Pallet_Type;

 QUIT;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

}


ENDIF;

// Print Order Number totals format
PRINT Order Number totals format;

ENDIF;

// SUPPRESSED PRINT Company Number - 3 totals format

