// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPNLXFR
// ?Date: 14.08.2025 Time: 03:41:15
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?** Create PFS records for Load Header, Order Header, Order Detail
CASE;

// IF PAR.Load ID is NE Blank
IF PAR.Load_ID <> *ZERO;

//?** Check for errors during Export Order Automation Upload   P001251
EXECUTE FUNCTION(RTV Ord Requires Revw RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2027682;
PARAMETER(PAR.Load_ID);
PARAMETER(LCL.Order_Requires_Review);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Skip if Order Requires Review                      P001251
CASE;

// IF LCL.Order Requires Review is No
IF LCL.Order_Requires_Review = *BLANK;

EXECUTE FUNCTION(PFS Load/Orders       RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1732926;
PARAMETER(PAR.Load_ID);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: CON);

 //?EXIT: If PAR.Load ID Entered and PAR.Load ID NE DB1.Load ID
 CASE;

 // IF PAR.Load ID is NE Blank
 IF PAR.Load_ID <> *ZERO;

 // AND DB1.Load ID NE PAR.Load ID
 AND DB1.Load_ID <> PAR.Load_ID;

 RETURN;

 ENDIF;

 //?CHK:  Send to PFS
 DO;

 // LCL.PFS Send Sts USR = CND.No
 LCL.PFS_Send_Sts_USR = 'N';

 // LCL.USR Company Number 1 = CON.*ZERO
 LCL.USR_Company_Number_1 = *ZERO;

 // LCL.USR Company Number 2 = CON.*ZERO
 LCL.USR_Company_Number_2 = *ZERO;

 // LCL.USR Company Number 3 = CON.*ZERO
 LCL.USR_Company_Number_3 = *ZERO;

 // LCL.USR Company Number 4 = CON.*ZERO
 LCL.USR_Company_Number_4 = *ZERO;

 // LCL.USR Company Number 5 = CON.*ZERO
 LCL.USR_Company_Number_5 = *ZERO;

 // LCL.USR Company Number 6 = CON.*ZERO
 LCL.USR_Company_Number_6 = *ZERO;

 // LCL.USR Company Number 7 = CON.*ZERO
 LCL.USR_Company_Number_7 = *ZERO;

 // LCL.USR Company Number 8 = CON.*ZERO
 LCL.USR_Company_Number_8 = *ZERO;

 // LCL.USR Company Number 9 = CON.*ZERO
 LCL.USR_Company_Number_9 = *ZERO;

 // LCL.USR Company Number 10 = CON.*ZERO
 LCL.USR_Company_Number_10 = *ZERO;

 EXECUTE FUNCTION(RTV All Whses on Load  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1483728;
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.USR_Warehouse_Code);
 PARAMETER(LCL.USR_CDE_Parm_1);
 PARAMETER(LCL.USR_CDE_Parm_2);
 PARAMETER(LCL.USR_CDE_Parm_3);
 PARAMETER(LCL.USR_CDE_Parm_4);
 PARAMETER(LCL.USR_CDE_Parm_5);
 PARAMETER(LCL.USR_CDE_Parm_6);
 PARAMETER(LCL.USR_CDE_Parm_7);
 PARAMETER(LCL.USR_CDE_Parm_8);
 PARAMETER(LCL.USR_CDE_Parm_9);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV All Whses on Order RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1483729;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.USR_Warehouse_Code);
  PARAMETER(PAR.USR_CDE_Parm_1);
  PARAMETER(PAR.USR_CDE_Parm_2);
  PARAMETER(PAR.USR_CDE_Parm_3);
  PARAMETER(PAR.USR_CDE_Parm_4);
  PARAMETER(PAR.USR_CDE_Parm_5);
  PARAMETER(PAR.USR_CDE_Parm_6);
  PARAMETER(PAR.USR_CDE_Parm_7);
  PARAMETER(PAR.USR_CDE_Parm_8);
  PARAMETER(PAR.USR_CDE_Parm_9);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Warehouse Code EQ PAR.USR Warehouse Code
   IF DB1.Warehouse_Code = PAR.USR_Warehouse_Code;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 1
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_1;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 2
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_2;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 3
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_3;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 4
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_4;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 5
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_5;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 6
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_6;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 7
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_7;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 8
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_8;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 9
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_9;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?current warehouse not already being used
   //?Fill in first blank warehouse
   CASE;

   // IF PAR.USR Warehouse Code EQ WRK.BLANK
   IF PAR.USR_Warehouse_Code = WRK.BLANK;

   // PAR.USR Warehouse Code = DB1.Warehouse Code
   PAR.USR_Warehouse_Code = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 1 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_1 = WRK.BLANK;

   // PAR.USR CDE Parm 1 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_1 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 2 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_2 = WRK.BLANK;

   // PAR.USR CDE Parm 2 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_2 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 3 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_3 = WRK.BLANK;

   // PAR.USR CDE Parm 3 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_3 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 4 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_4 = WRK.BLANK;

   // PAR.USR CDE Parm 4 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_4 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 5 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_5 = WRK.BLANK;

   // PAR.USR CDE Parm 5 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_5 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 6 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_6 = WRK.BLANK;

   // PAR.USR CDE Parm 6 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_6 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 7 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_7 = WRK.BLANK;

   // PAR.USR CDE Parm 7 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_7 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 8 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_8 = WRK.BLANK;

   // PAR.USR CDE Parm 8 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_8 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 9 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_9 = WRK.BLANK;

   // PAR.USR CDE Parm 9 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_9 = DB1.Warehouse_Code;

   ENDIF;

   ENDIF;

  }

 }

 //?10/20/06 PKD Changed to check WHS PFS LD/ORD Interface
 //?USR Warehouse Code
 CASE;

 // IF LCL.USR Warehouse Code is Warehouse Code not Blank
 IF LCL.USR_Warehouse_Code <> *BLANK;

 EXECUTE FUNCTION(Rtv Live w/CT PFS,SCO RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2129173;
 PARAMETER(LCL.USR_Warehouse_Code);
 PARAMETER(LCL.Shipping_Company);
 PARAMETER(LCL.WHS_Live_with_Carlisle);
 PARAMETER(LCL.WHS_PFS_Interface);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?PFS Send Sts = Y
 CASE;

 // IF LCL.WHS Live w/Carlisle is Yes
 IF LCL.WHS_Live_with_Carlisle = 'Y';

 // AND LCL.WHS PFS Interface is Download/Both
 AND LCL.WHS_PFS_Interface = 'D'/'B';

 // LCL.PFS Send Sts USR = CND.Yes
 LCL.PFS_Send_Sts_USR = 'Y';

 // LCL.USR Company Number 10 = LCL.Shipping Company
 LCL.USR_Company_Number_10 = LCL.Shipping_Company;

 ENDIF;

 ENDIF;

 //?USR CDE Parm 1
 CASE;

 // IF LCL.USR CDE Parm 1 is Warehouse Code not Blank
 IF LCL.USR_CDE_Parm_1 <> *BLANK;

 EXECUTE FUNCTION(Rtv Live w/CT PFS,SCO RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2129173;
 PARAMETER(LCL.USR_CDE_Parm_1);
 PARAMETER(LCL.Shipping_Company);
 PARAMETER(LCL.WHS_Live_with_Carlisle);
 PARAMETER(LCL.WHS_PFS_Interface);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?PFS Send Sts = Y
 CASE;

 // IF LCL.WHS Live w/Carlisle is Yes
 IF LCL.WHS_Live_with_Carlisle = 'Y';

 // AND LCL.WHS PFS Interface is Download/Both
 AND LCL.WHS_PFS_Interface = 'D'/'B';

 // LCL.PFS Send Sts USR = CND.Yes
 LCL.PFS_Send_Sts_USR = 'Y';

 // LCL.USR Company Number 1 = LCL.Shipping Company
 LCL.USR_Company_Number_1 = LCL.Shipping_Company;

 ENDIF;

 ENDIF;

 //?USR CDE Parm 2
 CASE;

 // IF LCL.USR CDE Parm 2 is Warehouse Code not Blank
 IF LCL.USR_CDE_Parm_2 <> *BLANK;

 EXECUTE FUNCTION(Rtv Live w/CT PFS,SCO RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2129173;
 PARAMETER(LCL.USR_CDE_Parm_2);
 PARAMETER(LCL.Shipping_Company);
 PARAMETER(LCL.WHS_Live_with_Carlisle);
 PARAMETER(LCL.WHS_PFS_Interface);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?PFS Send Sts = Y
 CASE;

 // IF LCL.WHS Live w/Carlisle is Yes
 IF LCL.WHS_Live_with_Carlisle = 'Y';

 // AND LCL.WHS PFS Interface is Download/Both
 AND LCL.WHS_PFS_Interface = 'D'/'B';

 // LCL.PFS Send Sts USR = CND.Yes
 LCL.PFS_Send_Sts_USR = 'Y';

 // LCL.USR Company Number 2 = LCL.Shipping Company
 LCL.USR_Company_Number_2 = LCL.Shipping_Company;

 ENDIF;

 ENDIF;

 //?USR CDE Parm 3
 CASE;

 // IF LCL.USR CDE Parm 3 is Warehouse Code not Blank
 IF LCL.USR_CDE_Parm_3 <> *BLANK;

 EXECUTE FUNCTION(Rtv Live w/CT PFS,SCO RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2129173;
 PARAMETER(LCL.USR_CDE_Parm_3);
 PARAMETER(LCL.Shipping_Company);
 PARAMETER(LCL.WHS_Live_with_Carlisle);
 PARAMETER(LCL.WHS_PFS_Interface);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?PFS Send Sts = Y
 CASE;

 // IF LCL.WHS Live w/Carlisle is Yes
 IF LCL.WHS_Live_with_Carlisle = 'Y';

 // AND LCL.WHS PFS Interface is Download/Both
 AND LCL.WHS_PFS_Interface = 'D'/'B';

 // LCL.PFS Send Sts USR = CND.Yes
 LCL.PFS_Send_Sts_USR = 'Y';

 // LCL.USR Company Number 3 = LCL.Shipping Company
 LCL.USR_Company_Number_3 = LCL.Shipping_Company;

 ENDIF;

 ENDIF;

 //?USR CDE Parm 4
 CASE;

 // IF LCL.USR CDE Parm 4 is Warehouse Code not Blank
 IF LCL.USR_CDE_Parm_4 <> *BLANK;

 EXECUTE FUNCTION(Rtv Live w/CT PFS,SCO RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2129173;
 PARAMETER(LCL.USR_CDE_Parm_4);
 PARAMETER(LCL.Shipping_Company);
 PARAMETER(LCL.WHS_Live_with_Carlisle);
 PARAMETER(LCL.WHS_PFS_Interface);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?PFS Send Sts = Y
 CASE;

 // IF LCL.WHS Live w/Carlisle is Yes
 IF LCL.WHS_Live_with_Carlisle = 'Y';

 // AND LCL.WHS PFS Interface is Download/Both
 AND LCL.WHS_PFS_Interface = 'D'/'B';

 // LCL.PFS Send Sts USR = CND.Yes
 LCL.PFS_Send_Sts_USR = 'Y';

 // LCL.USR Company Number 4 = LCL.Shipping Company
 LCL.USR_Company_Number_4 = LCL.Shipping_Company;

 ENDIF;

 ENDIF;

 //?USR CDE Parm 5
 CASE;

 // IF LCL.USR CDE Parm 5 is Warehouse Code not Blank
 IF LCL.USR_CDE_Parm_5 <> *BLANK;

 EXECUTE FUNCTION(Rtv Live w/CT PFS,SCO RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2129173;
 PARAMETER(LCL.USR_CDE_Parm_5);
 PARAMETER(LCL.Shipping_Company);
 PARAMETER(LCL.WHS_Live_with_Carlisle);
 PARAMETER(LCL.WHS_PFS_Interface);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?PFS Send Sts = Y
 CASE;

 // IF LCL.WHS Live w/Carlisle is Yes
 IF LCL.WHS_Live_with_Carlisle = 'Y';

 // AND LCL.WHS PFS Interface is Download/Both
 AND LCL.WHS_PFS_Interface = 'D'/'B';

 // LCL.PFS Send Sts USR = CND.Yes
 LCL.PFS_Send_Sts_USR = 'Y';

 // LCL.USR Company Number 5 = LCL.Shipping Company
 LCL.USR_Company_Number_5 = LCL.Shipping_Company;

 ENDIF;

 ENDIF;

 //?USR CDE Parm 6
 CASE;

 // IF LCL.USR CDE Parm 6 is Warehouse Code not Blank
 IF LCL.USR_CDE_Parm_6 <> *BLANK;

 EXECUTE FUNCTION(Rtv Live w/CT PFS,SCO RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2129173;
 PARAMETER(LCL.USR_CDE_Parm_6);
 PARAMETER(LCL.Shipping_Company);
 PARAMETER(LCL.WHS_Live_with_Carlisle);
 PARAMETER(LCL.WHS_PFS_Interface);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?PFS Send Sts = Y
 CASE;

 // IF LCL.WHS Live w/Carlisle is Yes
 IF LCL.WHS_Live_with_Carlisle = 'Y';

 // AND LCL.WHS PFS Interface is Download/Both
 AND LCL.WHS_PFS_Interface = 'D'/'B';

 // LCL.PFS Send Sts USR = CND.Yes
 LCL.PFS_Send_Sts_USR = 'Y';

 // LCL.USR Company Number 6 = LCL.Shipping Company
 LCL.USR_Company_Number_6 = LCL.Shipping_Company;

 ENDIF;

 ENDIF;

 //?USR CDE Parm 7
 CASE;

 // IF LCL.USR CDE Parm 7 is Warehouse Code not Blank
 IF LCL.USR_CDE_Parm_7 <> *BLANK;

 EXECUTE FUNCTION(Rtv Live w/CT PFS,SCO RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2129173;
 PARAMETER(LCL.USR_CDE_Parm_7);
 PARAMETER(LCL.Shipping_Company);
 PARAMETER(LCL.WHS_Live_with_Carlisle);
 PARAMETER(LCL.WHS_PFS_Interface);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?PFS Send Sts = Y
 CASE;

 // IF LCL.WHS Live w/Carlisle is Yes
 IF LCL.WHS_Live_with_Carlisle = 'Y';

 // AND LCL.WHS PFS Interface is Download/Both
 AND LCL.WHS_PFS_Interface = 'D'/'B';

 // LCL.PFS Send Sts USR = CND.Yes
 LCL.PFS_Send_Sts_USR = 'Y';

 // LCL.USR Company Number 7 = LCL.Shipping Company
 LCL.USR_Company_Number_7 = LCL.Shipping_Company;

 ENDIF;

 ENDIF;

 //?USR CDE Parm 8
 CASE;

 // IF LCL.USR CDE Parm 8 is Warehouse Code not Blank
 IF LCL.USR_CDE_Parm_8 <> *BLANK;

 EXECUTE FUNCTION(Rtv Live w/CT PFS,SCO RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2129173;
 PARAMETER(LCL.USR_CDE_Parm_8);
 PARAMETER(LCL.Shipping_Company);
 PARAMETER(LCL.WHS_Live_with_Carlisle);
 PARAMETER(LCL.WHS_PFS_Interface);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?PFS Send Sts = Y
 CASE;

 // IF LCL.WHS Live w/Carlisle is Yes
 IF LCL.WHS_Live_with_Carlisle = 'Y';

 // AND LCL.WHS PFS Interface is Download/Both
 AND LCL.WHS_PFS_Interface = 'D'/'B';

 // LCL.PFS Send Sts USR = CND.Yes
 LCL.PFS_Send_Sts_USR = 'Y';

 // LCL.USR Company Number 8 = LCL.Shipping Company
 LCL.USR_Company_Number_8 = LCL.Shipping_Company;

 ENDIF;

 ENDIF;

 //?USR CDE Parm 9
 CASE;

 // IF LCL.USR CDE Parm 9 is Warehouse Code not Blank
 IF LCL.USR_CDE_Parm_9 <> *BLANK;

 EXECUTE FUNCTION(Rtv Live w/CT PFS,SCO RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2129173;
 PARAMETER(LCL.USR_CDE_Parm_9);
 PARAMETER(LCL.Shipping_Company);
 PARAMETER(LCL.WHS_Live_with_Carlisle);
 PARAMETER(LCL.WHS_PFS_Interface);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?PFS Send Sts = Y
 CASE;

 // IF LCL.WHS Live w/Carlisle is Yes
 IF LCL.WHS_Live_with_Carlisle = 'Y';

 // AND LCL.WHS PFS Interface is Download/Both
 AND LCL.WHS_PFS_Interface = 'D'/'B';

 // LCL.PFS Send Sts USR = CND.Yes
 LCL.PFS_Send_Sts_USR = 'Y';

 // LCL.USR Company Number 9 = LCL.Shipping Company
 LCL.USR_Company_Number_9 = LCL.Shipping_Company;

 ENDIF;

 ENDIF;

 //?Receipt Order?    RMC 8/14/06 PFS015
 CASE;

 // IF LCL.PFS Send Sts USR is No
 IF LCL.PFS_Send_Sts_USR = 'N';

 EXECUTE FUNCTION(RTV Chk f/Receipt Ord RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1790178;
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.Receipt_Order_Sts_USR);
 {
  //?USER: Initialize routine

  // PAR.Receipt Order Sts USR = CND.no
  PAR.Receipt_Order_Sts_USR = 'N';

  //?USER: Process Data record

  //?PFS Ship To Warehouse * RMC PFS015 If TR order, send to pfs if to wh live
  CASE;

  // IF DB1.Order Type - Sales is Transfer Order
  IF DB1.Order_Type_Sales = 'TR';

  //?Get FROM Whse info---
  EXECUTE FUNCTION(RTV 1st Warehouse      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1575817;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(0);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   // PAR.Warehouse Code = DB1.Warehouse Code
   PAR.Warehouse_Code = DB1.Warehouse_Code;

   QUIT;

  }

  EXECUTE FUNCTION(Rtv Liv w/Carl,Locatn RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1790152;
  PARAMETER(LCL.Warehouse_Code);
  PARAMETER(LCL.Warehouse_Location);
  PARAMETER(LCL.WHS_Live_with_Carlisle);
  PARAMETER(LCL.WHS_PFS_Interface);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Get TO Whse info---
  EXECUTE FUNCTION(Rtv Default Warehouse  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1323141;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(WRK.Warehouse_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Liv w/Carl,Locatn RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1790152;
  PARAMETER(WRK.Warehouse_Code);
  PARAMETER(WRK.Warehouse_Location);
  PARAMETER(WRK.WHS_Live_with_Carlisle);
  PARAMETER(WRK.WHS_PFS_Interface);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?If From Whse is Ext & Live=No, and TO Whse is Internal and Live=Y ...
  CASE;

  // IF LCL.WHS Live w/Carlisle is No
  IF LCL.WHS_Live_with_Carlisle = 'N';

  // AND LCL.Warehouse Location is External
  AND LCL.Warehouse_Location = 'E';

  // AND WRK.Warehouse Location is Internal (Plant)
  AND WRK.Warehouse_Location = 'I';

  // AND WRK.WHS Live w/Carlisle is Yes
  AND WRK.WHS_Live_with_Carlisle = 'Y';

  // PAR.Receipt Order Sts USR = CND.yes
  PAR.Receipt_Order_Sts_USR = 'Y';

  ENDIF;

  ENDIF;

 }

 CASE;

 // IF PAR.Receipt Order Sts USR is yes
 IF PAR.Receipt_Order_Sts_USR = 'Y';

 // LCL.PFS Send Sts USR = CND.Yes
 LCL.PFS_Send_Sts_USR = 'Y';

 ENDIF;

 ENDIF;

 ENDDO;

 EXECUTE FUNCTION(RTV Any Ord/Blk OR Hld RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1774933;
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.USR_Check_Y_N_Status);
 PARAMETER(LCL.Block_Order_Flag);
 PARAMETER(LCL.Hold_Order);
 {
  //?USER: Initialize routine

  //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
  // PAR.USR Check Y/N Status = CND.blank
  PAR.USR_Check_Y_N_Status = *BLANK;

  //?OMS203:  need to know if there are any Block orders on load
  // PAR.Block Order Flag = CND.Firm Order
  PAR.Block_Order_Flag = 'F';

  // PAR.Hold Order = CND.no
  PAR.Hold_Order = 'N';

  //?USER: Process Data record

  // PAR.USR Check Y/N Status = CND.yes
  PAR.USR_Check_Y_N_Status = 'Y';

  CASE;

  // IF DB1.Block Order Flag is Block Order
  IF DB1.Block_Order_Flag = 'B';

  // PAR.Block Order Flag = DB1.Block Order Flag
  PAR.Block_Order_Flag = DB1.Block_Order_Flag;

  ENDIF;

  CASE;

  // IF DB1.Header Status is Hold
  IF DB1.Header_Status = 'H';

  // PAR.Hold Order = CND.yes
  PAR.Hold_Order = 'Y';

  ENDIF;

 }

 //?CHK: Order Status
 CASE;

 // IF LCL.USR Check Y/N Status is no
 IF LCL.USR_Check_Y_N_Status = 'N';

 // LCL.PFS Send Sts USR = CND.No
 LCL.PFS_Send_Sts_USR = 'N';

 //?CHK: Order Status
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // LCL.PFS Send Sts USR = CND.No
 LCL.PFS_Send_Sts_USR = 'N';

 ENDIF;

 CASE;

 // IF LCL.Hold Order is yes
 IF LCL.Hold_Order = 'Y';

 // LCL.PFS Send Sts USR = CND.No
 LCL.PFS_Send_Sts_USR = 'N';

 ENDIF;

 ENDIF;

 //?01/29/09 PKD If Carrier Code is blank, do not send anything
 //?CHK: Carrier Code
 CASE;

 // IF DB1.Carrier Code is not entered
 IF DB1.Carrier_Code = *BLANK;

 // LCL.PFS Send Sts USR = CND.No
 LCL.PFS_Send_Sts_USR = 'N';

 ENDIF;

 //?** Create PFS file records if PFS Send Status is Yes
 CASE;

 // IF LCL.PFS Send Sts USR is Yes
 IF LCL.PFS_Send_Sts_USR = 'Y';

 //?****************
 //?Get Next PFS Sequence No         -- RMC 03/14/07
 DO;

 //?Create all records for this order/load with same sequence.
 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(DB1.Company_Number);
 PARAMETER('PFSSEQNO');
 PARAMETER(LCL.PFS_Sequence_No);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.PFS Sequence No. = LCL.PFS Sequence No. + CON.1
 LCL.PFS_Sequence_No = LCL.PFS_Sequence_No + 1;

 //?Skip 0
 CASE;

 // IF LCL.PFS Sequence No. is eq 0
 IF LCL.PFS_Sequence_No = *ZERO;

 // LCL.PFS Sequence No. = LCL.PFS Sequence No. + CON.1
 LCL.PFS_Sequence_No = LCL.PFS_Sequence_No + 1;

 ENDIF;

 // Call program Rtv Chg Comp Val Num   XF.
 CALL PROGRAM(Rtv Chg Comp Val Num   XF) ('PPW2XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER('PFSSEQNO');
 PARAMETER(LCL.PFS_Sequence_No);

 ENDDO;

 //?****************
 //?*** CREATE ORDER HEADER, ORDER DETAIL, & SHIPPING INSTRUCTIONS ***
 //?**  Get Export Instruction information from OHE by order number
 //?** in the following function. The passed in shipping line par
 //?** will be blank at this point because is is no longer used.
 // Call program PFS Order Header/Dtl  XF.
 CALL PROGRAM(PFS Order Header/Dtl  XF) ('PPNJXFR');
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Load_Status);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(PAR.Number_Pallets_Loaded);
 PARAMETER(PAR.Weight_1_USR);
 PARAMETER(LCL.Shipping_Line);
 PARAMETER(LCL.Port_Delv_Terminal);
 PARAMETER(LCL.PFS_Sequence_No);

 //?** Fill in PFS Load Header Fields (export instr are cleared here)
 //?*** CREATE LOAD HEADER ***
 DO;

 // PAR.PFS Company Number = DB1.Company Number
 PAR.PFS_Company_Number = DB1.Company_Number;

 // PAR.PFS Load ID = DB1.Load ID
 PAR.PFS_Load_ID = DB1.Load_ID;

 // PAR.PFS Sched Sequence Num = DB1.Schedule Sequence Number
 PAR.PFS_Sched_Sequence_Num = DB1.Schedule_Sequence_Number;

 // PAR.PFS Carrier Code = DB1.Carrier Code
 PAR.PFS_Carrier_Code = DB1.Carrier_Code;

 EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(PAR.PFS_Carrier_Name);
 PARAMETER(NLL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

 // PAR.PFS Export Status = DB1.Export Status
 PAR.PFS_Export_Status = DB1.Export_Status;

 //?** FP1101
 EXECUTE FUNCTION(RTV Name, Address, Fax RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1448662;
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(PAR.PFS_Shipping_Line_Name);
 PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
 PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
 PARAMETER(PAR.PFS_Shipping_Line_City);
 PARAMETER(PAR.PFS_Shipping_LIne_Zip);
 PARAMETER(PAR.PFS_Shipping_Line_State);
 PARAMETER(NLL.Fax_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.PFS Trailer Id = DB1.Trailer Id
 PAR.PFS_Trailer_Id = DB1.Trailer_Id;

 // PAR.PFS Shipping Method = DB1.Shipping Method
 PAR.PFS_Shipping_Method = DB1.Shipping_Method;

 // PAR.PFS Load Shag Flag = DB1.Load Shag Flag
 PAR.PFS_Load_Shag_Flag = DB1.Load_Shag_Flag;

 // PAR.PFS Load Wash Flag = DB1.Load Wash Flag
 PAR.PFS_Load_Wash_Flag = DB1.Load_Wash_Flag;

 // PAR.PFS Load Total Stops = DB1.Total Stops
 PAR.PFS_Load_Total_Stops = DB1.Total_Stops;

 //?** Pass in Override miles, if entered, else total miles   E00207
 CASE;

 // IF DB1.Override Total Load Miles is Entered
 IF DB1.Override_Total_Load_Miles <> *ZERO;

 // PAR.PFS Load Total Miles = DB1.Override Total Load Miles
 PAR.PFS_Load_Total_Miles = DB1.Override_Total_Load_Miles;

 //?** Pass in Override miles, if entered, else total miles   E00207
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.PFS Load Total Miles = DB1.Total Load Miles
 PAR.PFS_Load_Total_Miles = DB1.Total_Load_Miles;

 ENDIF;

 // PAR.PFS Reefer Temp = DB1.Reefer Temperature
 PAR.PFS_Reefer_Temp = DB1.Reefer_Temperature;

 // PAR.PFS Reefer Temp Code = DB1.Shipping Temp C/F txt
 PAR.PFS_Reefer_Temp_Code = DB1.Shipping_Temp_C_F_txt;

 //?E4119 RMC 7/5/16 TMS Use appt date/time if there, else use req delivery
 EXECUTE FUNCTION(RTV First Appd Dt TMS RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC2124209;
 PARAMETER(DB1.Load_ID);
 PARAMETER(1);
 PARAMETER(LCL.LD_Carrier_Appt_Date);
 PARAMETER(LCL.LD_Carrier_Appt_Time);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 CASE;

 // IF DB1.MG Created Load is Yes
 IF DB1.MG_Created_Load = 'Y';

 //?dont populate here per Mike B 9.2.16
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(CNV cyymmdd to yyyymmdd) TYPE(EXCINTFUN)                       AC1732965;
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(PAR.PFS_Load_Sched_Delv_Date);
 {
  //?Execute internal function

  // LCL.Year Code = PAR.Date In  (7,0) USR *YEAR
  LCL.Year_Code = DATEDTLS(PAR.Date_In_70_USR 'YR' 1111111 'NONE' 'N' 1);

  // LCL.Month NBR USR = PAR.Date In  (7,0) USR *MONTH
  LCL.Month_NBR_USR = DATEDTLS(PAR.Date_In_70_USR 'MO' 1111111 'NONE' 'N' 1);

  // LCL.Day of Month USR = PAR.Date In  (7,0) USR *DAY OF MONTH
  LCL.Day_of_Month_USR = DATEDTLS(PAR.Date_In_70_USR 'DM' 1111111 'NONE' 'N' 1);

  // PAR.Year Alpha (YYYY) USR = CVTVAR(LCL.Year Code)
  PAR.Year_Alpha_YYYY_USR = CVTVAR(LCL.Year_Code);

  // PAR.Month (Char) USR = CVTVAR(LCL.Month NBR USR)
  PAR.Month_Char_USR = CVTVAR(LCL.Month_NBR_USR);

  // PAR.Day   (Char) USR = CVTVAR(LCL.Day of Month USR)
  PAR.Day_Char_USR = CVTVAR(LCL.Day_of_Month_USR);

  // PAR.Date (Char-8) USR = CONCAT(PAR.Year Alpha (YYYY) USR,PAR.Month (Char) USR,CON.*ZERO)
  PAR.Date_Char_8_USR = PAR.Year_Alpha_YYYY_USR + PAR.Month_Char_USR (*ZERO);

  // PAR.Date (Char-8) USR = CONCAT(PAR.Date (Char-8) USR,PAR.Day   (Char) USR,CON.*ZERO)
  PAR.Date_Char_8_USR = PAR.Date_Char_8_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date Out (8,0) USR = CVTVAR(PAR.Date (Char-8) USR)
  PAR.Date_Out_80_USR = CVTVAR(PAR.Date_Char_8_USR);

 }

 // PAR.PFS Load Sched Delv Time = DB1.Scheduled Delivery Time
 PAR.PFS_Load_Sched_Delv_Time = DB1.Scheduled_Delivery_Time;

 ENDIF;

 EXECUTE FUNCTION(CNV cyymmdd to yyyymmdd) TYPE(EXCINTFUN)                       AC1732965;
 PARAMETER(DB1.Deadline_Departure_Date);
 PARAMETER(PAR.PFS_Load_Deadline_Date);
 {
  //?Execute internal function

  // LCL.Year Code = PAR.Date In  (7,0) USR *YEAR
  LCL.Year_Code = DATEDTLS(PAR.Date_In_70_USR 'YR' 1111111 'NONE' 'N' 1);

  // LCL.Month NBR USR = PAR.Date In  (7,0) USR *MONTH
  LCL.Month_NBR_USR = DATEDTLS(PAR.Date_In_70_USR 'MO' 1111111 'NONE' 'N' 1);

  // LCL.Day of Month USR = PAR.Date In  (7,0) USR *DAY OF MONTH
  LCL.Day_of_Month_USR = DATEDTLS(PAR.Date_In_70_USR 'DM' 1111111 'NONE' 'N' 1);

  // PAR.Year Alpha (YYYY) USR = CVTVAR(LCL.Year Code)
  PAR.Year_Alpha_YYYY_USR = CVTVAR(LCL.Year_Code);

  // PAR.Month (Char) USR = CVTVAR(LCL.Month NBR USR)
  PAR.Month_Char_USR = CVTVAR(LCL.Month_NBR_USR);

  // PAR.Day   (Char) USR = CVTVAR(LCL.Day of Month USR)
  PAR.Day_Char_USR = CVTVAR(LCL.Day_of_Month_USR);

  // PAR.Date (Char-8) USR = CONCAT(PAR.Year Alpha (YYYY) USR,PAR.Month (Char) USR,CON.*ZERO)
  PAR.Date_Char_8_USR = PAR.Year_Alpha_YYYY_USR + PAR.Month_Char_USR (*ZERO);

  // PAR.Date (Char-8) USR = CONCAT(PAR.Date (Char-8) USR,PAR.Day   (Char) USR,CON.*ZERO)
  PAR.Date_Char_8_USR = PAR.Date_Char_8_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date Out (8,0) USR = CVTVAR(PAR.Date (Char-8) USR)
  PAR.Date_Out_80_USR = CVTVAR(PAR.Date_Char_8_USR);

 }

 // PAR.PFS Load Deadline Time = DB1.Deadline Departure Time
 PAR.PFS_Load_Deadline_Time = DB1.Deadline_Departure_Time;

 EXECUTE FUNCTION(RTV Federal ID         RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1379325;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.PFS_Federal_Tax_ID);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Min & Max Pounds  RT) TYPE(RTVOBJ) FILE(OMFKREP)           AC1197715;
 PARAMETER(DB1.Truck_Size);
 PARAMETER(PAR.PFS_Maximum_Load_Weight);
 PARAMETER(LCL.Minimum_pounds);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.PFS Estimated Pallets = PAR.Number Pallets Loaded
 PAR.PFS_Estimated_Pallets = PAR.Number_Pallets_Loaded;

 EXECUTE FUNCTION(RTV Gross Weight Load  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1421342;
 PARAMETER(DB1.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(PAR.PFS_Predicted_Load_Wgt);
 {
  //?USER: Initialize routine

  // PAR.USR Weight Accumulated = CON.*ZERO
  PAR.USR_Weight_Accumulated = *ZERO;

  //?USER: Process Data record

  //?** Rtv pallet tare and send into gross weight calc   E000261
  EXECUTE FUNCTION(RTV Pallet/Tare        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1585842;
  PARAMETER(DB1.Load_ID);
  PARAMETER(LCL.Pallets_Loaded);
  PARAMETER(LCL.Avg_Pallet_Tare);
  PARAMETER(LCL.Tot_Pallet_Tare);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // Call program RTV Gross Wgt/Qty     XF.
  CALL PROGRAM(RTV Gross Wgt/Qty     XF) ('PQPQXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.USR_Weight_Accumulated);
  PARAMETER(LCL.Order_Quantity);
  PARAMETER(LCL.Avg_Pallet_Tare);

 }

 EXECUTE FUNCTION(Rtv ShipLine Info PFS RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1847551;
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.PFS_Shipping_Line);
 PARAMETER(PAR.PFS_Shipping_Line_Name);
 PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
 PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
 PARAMETER(PAR.PFS_Shipping_Line_City);
 PARAMETER(PAR.PFS_Shipping_Line_State);
 PARAMETER(PAR.PFS_Shipping_LIne_Zip);
 PARAMETER(PAR.PFS_Vessel_Name);
 PARAMETER(PAR.PFS_Voyage);
 PARAMETER(PAR.PFS_Discharge_Port);
 PARAMETER(PAR.PFS_Booking_Number);
 PARAMETER(DB1.MG_Created_Load);
 {
  //?USER: Initialize routine

  //?E4119 RMC 7/5/16 If mg created load, then ............... get
  //?  the shipping line info from the TMS International Shipmnt file
  //?USER: Process Data record

  CASE;

  // IF DB1.Header Status is Not cancelled
  IF DB1.Header_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

  CASE;

  // IF DB1.Export Status is yes
  IF DB1.Export_Status = 'Y';

  EXECUTE FUNCTION(RTV OHE Ship fields    RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC1814635;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(LCL.Shipping_Line);
  PARAMETER(LCL.Port_Delv_Terminal);
  PARAMETER(PAR.PFS_Shipping_Line_City);
  PARAMETER(PAR.PFS_Vessel_Name);
  PARAMETER(PAR.PFS_Voyage);
  PARAMETER(PAR.PFS_Booking_Number);
  PARAMETER(PAR.PFS_Discharge_Port);
  PARAMETER(NLL.OHE_Sail_Flight_Date);
  PARAMETER(NLL.OHE_Port_Cut_Date);
  PARAMETER(NLL.OHE_Arrival_Date);
  PARAMETER(NLL.OHE_Late_Delivery_Code);
  PARAMETER(NLL.OHE_Ship_Status);
  PARAMETER(NLL.OHE_Container_Number);
  PARAMETER(NLL.OHE_Comment_1);
  PARAMETER(NLL.OHE_Comment_2);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.MG Created Load is Yes
  IF PAR.MG_Created_Load = 'Y';

  // Call program Exc Rtv Shpng Ln /PFS XF.
  CALL PROGRAM(Exc Rtv Shpng Ln /PFS XF) ('PBXUXFR');
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.PFS_Shipping_Line_Name);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
  PARAMETER(PAR.PFS_Shipping_Line_City);
  PARAMETER(PAR.PFS_Shipping_Line_State);
  PARAMETER(PAR.PFS_Shipping_LIne_Zip);
  PARAMETER(LCL.TMS_Country_Code);

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Shipping Line/PortsRT) TYPE(RTVOBJ) FILE(PDLCREP)          AC1447742;
  PARAMETER(LCL.Shipping_Line);
  PARAMETER(LCL.Port_Delv_Terminal);
  PARAMETER(PAR.PFS_Shipping_Line_City);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
  PARAMETER(PAR.PFS_Shipping_Line_State);
  PARAMETER(PAR.PFS_Shipping_LIne_Zip);
  PARAMETER(LCL.Port_Phone_Number);
  PARAMETER(LCL.Port_Fax_Number);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Record already exists
   PGM.*Return_code = 'Y2U0003';

  }

  // PAR.PFS Shipping Line = LCL.Shipping Line
  PAR.PFS_Shipping_Line = LCL.Shipping_Line;

  // PAR.PFS Shipping Line Name = LCL.Port Delv Terminal
  PAR.PFS_Shipping_Line_Name = LCL.Port_Delv_Terminal;

  ENDIF;

  QUIT;

  ENDIF;

  ENDIF;

 }

 //?** Calc average pallet tare
 CASE;

 // IF PAR.Number Pallets Loaded is Not zero
 IF PAR.Number_Pallets_Loaded <> *ZERO;

 // PAR.PFS Average Pallet Tare = PAR.Weight 1 USR / PAR.Number Pallets Loaded *Rounded
 PAR.PFS_Average_Pallet_Tare = PAR.Weight_1_USR / PAR.Number_Pallets_Loaded 'H';

 ENDIF;

 //?** Test load status
 CASE;

 // IF DB1.Load Status is Unlock
 IF DB1.Load_Status = 'U';

 // PAR.PFS Record Status = CND.Delete
 PAR.PFS_Record_Status = 'D';

 //?** Test load status
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.PFS Record Status = CND.Change
 PAR.PFS_Record_Status = 'C';

 ENDIF;

 // PAR.PFS Load Status = DB1.Load Status
 PAR.PFS_Load_Status = DB1.Load_Status;

 //?07/11/19 DN R15161-Sent in PAR.PFS Load Unused Text 1.
 EXECUTE FUNCTION(Upd Load Header       RT) TYPE(RTVOBJ) FILE(PPBACPP)           AC1733062;
 PARAMETER(PAR.PFS_Company_Number);
 PARAMETER(PAR.PFS_Load_ID);
 PARAMETER(PAR.PFS_Sched_Sequence_Num);
 PARAMETER(PAR.PFS_Carrier_Code);
 PARAMETER(PAR.PFS_Carrier_Name);
 PARAMETER(PAR.PFS_Export_Status);
 PARAMETER(PAR.PFS_Shipping_Line);
 PARAMETER(PAR.PFS_Shipping_Line_Name);
 PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
 PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
 PARAMETER(PAR.PFS_Shipping_Line_City);
 PARAMETER(PAR.PFS_Shipping_Line_State);
 PARAMETER(PAR.PFS_Shipping_LIne_Zip);
 PARAMETER(PAR.PFS_Vessel_Name);
 PARAMETER(PAR.PFS_Voyage);
 PARAMETER(PAR.PFS_Discharge_Port);
 PARAMETER(PAR.PFS_Booking_Number);
 PARAMETER(PAR.PFS_Shipping_Method);
 PARAMETER(PAR.PFS_Load_Shag_Flag);
 PARAMETER(PAR.PFS_Load_Wash_Flag);
 PARAMETER(PAR.PFS_Load_Total_Stops);
 PARAMETER(PAR.PFS_Load_Total_Miles);
 PARAMETER(PAR.PFS_Reefer_Temp);
 PARAMETER(PAR.PFS_Reefer_Temp_Code);
 PARAMETER(PAR.PFS_Load_Sched_Delv_Date);
 PARAMETER(PAR.PFS_Load_Sched_Delv_Time);
 PARAMETER(PAR.PFS_Load_Deadline_Date);
 PARAMETER(PAR.PFS_Load_Deadline_Time);
 PARAMETER(PAR.PFS_Maximum_Load_Weight);
 PARAMETER(PAR.PFS_Federal_Tax_ID);
 PARAMETER(PAR.PFS_Estimated_Pallets);
 PARAMETER(PAR.PFS_Average_Pallet_Tare);
 PARAMETER(PAR.PFS_Predicted_Load_Wgt);
 PARAMETER(PAR.PFS_Load_Status);
 PARAMETER(PAR.PFS_Trailer_Id);
 PARAMETER(LCL.PFS_Sequence_No);
 PARAMETER(PAR.PFS_Load_Unused_Sts_1);
 PARAMETER(PAR.PFS_Load_Unused_Sts_2);
 PARAMETER(PAR.PFS_Load_Unused_Sts_3);
 PARAMETER(PAR.PFS_Load_Unused_Sts_4);
 PARAMETER(PAR.PFS_Load_Unused_Sts_5);
 PARAMETER(PAR.PFS_Load_Unused_Text_1);
 PARAMETER(PAR.PFS_Record_Status);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt PFS Load Header   CR) TYPE(CRTOBJ) FILE(PPBACPP)           AC1732292;
  PARAMETER(PAR.PFS_Company_Number);
  PARAMETER(PAR.PFS_Load_ID);
  PARAMETER(PAR.PFS_Sched_Sequence_Num);
  PARAMETER(PAR.PFS_Carrier_Code);
  PARAMETER(PAR.PFS_Carrier_Name);
  PARAMETER(PAR.PFS_Export_Status);
  PARAMETER(PAR.PFS_Shipping_Line);
  PARAMETER(PAR.PFS_Shipping_Line_Name);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
  PARAMETER(PAR.PFS_Shipping_Line_City);
  PARAMETER(PAR.PFS_Shipping_Line_State);
  PARAMETER(PAR.PFS_Shipping_LIne_Zip);
  PARAMETER(PAR.PFS_Vessel_Name);
  PARAMETER(PAR.PFS_Voyage);
  PARAMETER(PAR.PFS_Discharge_Port);
  PARAMETER(PAR.PFS_Booking_Number);
  PARAMETER(PAR.PFS_Shipping_Method);
  PARAMETER(PAR.PFS_Load_Shag_Flag);
  PARAMETER(PAR.PFS_Load_Wash_Flag);
  PARAMETER(PAR.PFS_Load_Total_Stops);
  PARAMETER(PAR.PFS_Load_Total_Miles);
  PARAMETER(PAR.PFS_Reefer_Temp);
  PARAMETER(PAR.PFS_Reefer_Temp_Code);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Date);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Time);
  PARAMETER(PAR.PFS_Load_Deadline_Date);
  PARAMETER(PAR.PFS_Load_Deadline_Time);
  PARAMETER(PAR.PFS_Maximum_Load_Weight);
  PARAMETER(PAR.PFS_Federal_Tax_ID);
  PARAMETER(PAR.PFS_Estimated_Pallets);
  PARAMETER(PAR.PFS_Average_Pallet_Tare);
  PARAMETER(PAR.PFS_Predicted_Load_Wgt);
  PARAMETER(PAR.PFS_Load_Status);
  PARAMETER(PAR.PFS_Trailer_Id);
  PARAMETER(PAR.PFS_Sequence_No);
  PARAMETER(PAR.PFS_Load_Unused_Sts_1);
  PARAMETER(PAR.PFS_Load_Unused_Sts_2);
  PARAMETER(PAR.PFS_Load_Unused_Sts_3);
  PARAMETER(PAR.PFS_Load_Unused_Sts_4);
  PARAMETER(PAR.PFS_Load_Unused_Sts_5);
  PARAMETER(PAR.PFS_Load_Unused_Text_1);
  PARAMETER(PAR.PFS_Record_Status);
  PARAMETER(PAR.PFS_Process_Status);
  PARAMETER(PAR.PFS_Error_Reason);
  PARAMETER(PAR.PFS_Create_Date);
  PARAMETER(PAR.PFS_Create_Time);
  PARAMETER(PAR.PFS_Change_Date);
  PARAMETER(PAR.PFS_Change_Time);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Create Stamp      IF) TYPE(EXCINTFUN)                      AC1732162;
   PARAMETER(DB1.PFS_Process_Status);
   PARAMETER(DB1.PFS_Create_Date);
   PARAMETER(DB1.PFS_Create_Time);
   {
    //?Execute internal function

    // PAR.PFS Process Status = CND.Not Processed
    PAR.PFS_Process_Status = *ZERO;

    // PAR.PFS Create Date = JOB.*Job date
    PAR.PFS_Create_Date = JOB.*Job_date;

    // PAR.PFS Create Time = JOB.*Job time
    PAR.PFS_Create_Time = JOB.*Job_time;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg PFS Load Header   CH) TYPE(CHGOBJ) FILE(PPBACPP)           AC1732293;
  PARAMETER(PAR.PFS_Company_Number);
  PARAMETER(PAR.PFS_Load_ID);
  PARAMETER(PAR.PFS_Sched_Sequence_Num);
  PARAMETER(PAR.PFS_Carrier_Code);
  PARAMETER(PAR.PFS_Carrier_Name);
  PARAMETER(PAR.PFS_Export_Status);
  PARAMETER(PAR.PFS_Shipping_Line);
  PARAMETER(PAR.PFS_Shipping_Line_Name);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
  PARAMETER(PAR.PFS_Shipping_Line_City);
  PARAMETER(PAR.PFS_Shipping_Line_State);
  PARAMETER(PAR.PFS_Shipping_LIne_Zip);
  PARAMETER(PAR.PFS_Vessel_Name);
  PARAMETER(PAR.PFS_Voyage);
  PARAMETER(PAR.PFS_Discharge_Port);
  PARAMETER(PAR.PFS_Booking_Number);
  PARAMETER(PAR.PFS_Shipping_Method);
  PARAMETER(PAR.PFS_Load_Shag_Flag);
  PARAMETER(PAR.PFS_Load_Wash_Flag);
  PARAMETER(PAR.PFS_Load_Total_Stops);
  PARAMETER(PAR.PFS_Load_Total_Miles);
  PARAMETER(PAR.PFS_Reefer_Temp);
  PARAMETER(PAR.PFS_Reefer_Temp_Code);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Date);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Time);
  PARAMETER(PAR.PFS_Load_Deadline_Date);
  PARAMETER(PAR.PFS_Load_Deadline_Time);
  PARAMETER(PAR.PFS_Maximum_Load_Weight);
  PARAMETER(PAR.PFS_Federal_Tax_ID);
  PARAMETER(PAR.PFS_Estimated_Pallets);
  PARAMETER(PAR.PFS_Average_Pallet_Tare);
  PARAMETER(PAR.PFS_Predicted_Load_Wgt);
  PARAMETER(PAR.PFS_Load_Status);
  PARAMETER(PAR.PFS_Trailer_Id);
  PARAMETER(PAR.PFS_Sequence_No);
  PARAMETER(PAR.PFS_Load_Unused_Sts_1);
  PARAMETER(PAR.PFS_Load_Unused_Sts_2);
  PARAMETER(PAR.PFS_Load_Unused_Sts_3);
  PARAMETER(PAR.PFS_Load_Unused_Sts_4);
  PARAMETER(PAR.PFS_Load_Unused_Sts_5);
  PARAMETER(PAR.PFS_Load_Unused_Text_1);
  PARAMETER(PAR.PFS_Record_Status);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Change Stamp      IF) TYPE(EXCINTFUN)                      AC1732163;
   PARAMETER(DB1.PFS_Change_Date);
   PARAMETER(DB1.PFS_Change_Time);
   {
    //?Execute internal function

    // PAR.PFS Change Date = JOB.*Job date
    PAR.PFS_Change_Date = JOB.*Job_date;

    // PAR.PFS Change time = JOB.*Job time
    PAR.PFS_Change_Time = JOB.*Job_time;

   }

  }

 }

 //?** Only process Plant Companies    DLY029 LJB 04/27/2007
 //?*** MULTI COMPANY LOAD ***       ** Only process whs live with PFS  S7362
 CASE;

 // IF DB1.Multi Company Load is yes
 IF DB1.Multi_Company_Load = 'Y';

 //?RMC 10/18/2016  Comment the above and do it this way:
 //?** Create PFS Load header for other plant company USR Company 10
 CASE;

 // IF LCL.USR Company Number 10 is greater than zero
 IF LCL.USR_Company_Number_10 > *ZERO;

 // AND LCL.USR Company Number 10 NE DB1.Company Number
 AND LCL.USR_Company_Number_10 <> DB1.Company_Number;

 // WRK.Company Number = LCL.USR Company Number 10
 WRK.Company_Number = LCL.USR_Company_Number_10;

 //?Get Next PFS Sequence No         -- RMC 03/14/07
 DO;

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(WRK.Company_Number);
 PARAMETER('PFSSEQNO');
 PARAMETER(LCL.PFS_Sequence_No);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.PFS Sequence No. = LCL.PFS Sequence No. + CON.1
 LCL.PFS_Sequence_No = LCL.PFS_Sequence_No + 1;

 //?Increment if -0-
 CASE;

 // IF LCL.PFS Sequence No. is eq 0
 IF LCL.PFS_Sequence_No = *ZERO;

 // LCL.PFS Sequence No. = LCL.PFS Sequence No. + CON.1
 LCL.PFS_Sequence_No = LCL.PFS_Sequence_No + 1;

 ENDIF;

 // Call program Rtv Chg Comp Val Num   XF.
 CALL PROGRAM(Rtv Chg Comp Val Num   XF) ('PPW2XFR');
 PARAMETER(WRK.Company_Number);
 PARAMETER('PFSSEQNO');
 PARAMETER(LCL.PFS_Sequence_No);

 ENDDO;

 EXECUTE FUNCTION(Upd Load Header       RT) TYPE(RTVOBJ) FILE(PPBACPP)           AC1733062;
 PARAMETER(WRK.Company_Number);
 PARAMETER(PAR.PFS_Load_ID);
 PARAMETER(PAR.PFS_Sched_Sequence_Num);
 PARAMETER(PAR.PFS_Carrier_Code);
 PARAMETER(PAR.PFS_Carrier_Name);
 PARAMETER(PAR.PFS_Export_Status);
 PARAMETER(PAR.PFS_Shipping_Line);
 PARAMETER(PAR.PFS_Shipping_Line_Name);
 PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
 PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
 PARAMETER(PAR.PFS_Shipping_Line_City);
 PARAMETER(PAR.PFS_Shipping_Line_State);
 PARAMETER(PAR.PFS_Shipping_LIne_Zip);
 PARAMETER(PAR.PFS_Vessel_Name);
 PARAMETER(PAR.PFS_Voyage);
 PARAMETER(PAR.PFS_Discharge_Port);
 PARAMETER(PAR.PFS_Booking_Number);
 PARAMETER(PAR.PFS_Shipping_Method);
 PARAMETER(PAR.PFS_Load_Shag_Flag);
 PARAMETER(PAR.PFS_Load_Wash_Flag);
 PARAMETER(PAR.PFS_Load_Total_Stops);
 PARAMETER(PAR.PFS_Load_Total_Miles);
 PARAMETER(PAR.PFS_Reefer_Temp);
 PARAMETER(PAR.PFS_Reefer_Temp_Code);
 PARAMETER(PAR.PFS_Load_Sched_Delv_Date);
 PARAMETER(PAR.PFS_Load_Sched_Delv_Time);
 PARAMETER(PAR.PFS_Load_Deadline_Date);
 PARAMETER(PAR.PFS_Load_Deadline_Time);
 PARAMETER(PAR.PFS_Maximum_Load_Weight);
 PARAMETER(PAR.PFS_Federal_Tax_ID);
 PARAMETER(PAR.PFS_Estimated_Pallets);
 PARAMETER(PAR.PFS_Average_Pallet_Tare);
 PARAMETER(PAR.PFS_Predicted_Load_Wgt);
 PARAMETER(PAR.PFS_Load_Status);
 PARAMETER(PAR.PFS_Trailer_Id);
 PARAMETER(LCL.PFS_Sequence_No);
 PARAMETER(PAR.PFS_Load_Unused_Sts_1);
 PARAMETER(PAR.PFS_Load_Unused_Sts_2);
 PARAMETER(PAR.PFS_Load_Unused_Sts_3);
 PARAMETER(PAR.PFS_Load_Unused_Sts_4);
 PARAMETER(PAR.PFS_Load_Unused_Sts_5);
 PARAMETER(PAR.PFS_Load_Unused_Text_1);
 PARAMETER(PAR.PFS_Record_Status);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt PFS Load Header   CR) TYPE(CRTOBJ) FILE(PPBACPP)           AC1732292;
  PARAMETER(PAR.PFS_Company_Number);
  PARAMETER(PAR.PFS_Load_ID);
  PARAMETER(PAR.PFS_Sched_Sequence_Num);
  PARAMETER(PAR.PFS_Carrier_Code);
  PARAMETER(PAR.PFS_Carrier_Name);
  PARAMETER(PAR.PFS_Export_Status);
  PARAMETER(PAR.PFS_Shipping_Line);
  PARAMETER(PAR.PFS_Shipping_Line_Name);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
  PARAMETER(PAR.PFS_Shipping_Line_City);
  PARAMETER(PAR.PFS_Shipping_Line_State);
  PARAMETER(PAR.PFS_Shipping_LIne_Zip);
  PARAMETER(PAR.PFS_Vessel_Name);
  PARAMETER(PAR.PFS_Voyage);
  PARAMETER(PAR.PFS_Discharge_Port);
  PARAMETER(PAR.PFS_Booking_Number);
  PARAMETER(PAR.PFS_Shipping_Method);
  PARAMETER(PAR.PFS_Load_Shag_Flag);
  PARAMETER(PAR.PFS_Load_Wash_Flag);
  PARAMETER(PAR.PFS_Load_Total_Stops);
  PARAMETER(PAR.PFS_Load_Total_Miles);
  PARAMETER(PAR.PFS_Reefer_Temp);
  PARAMETER(PAR.PFS_Reefer_Temp_Code);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Date);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Time);
  PARAMETER(PAR.PFS_Load_Deadline_Date);
  PARAMETER(PAR.PFS_Load_Deadline_Time);
  PARAMETER(PAR.PFS_Maximum_Load_Weight);
  PARAMETER(PAR.PFS_Federal_Tax_ID);
  PARAMETER(PAR.PFS_Estimated_Pallets);
  PARAMETER(PAR.PFS_Average_Pallet_Tare);
  PARAMETER(PAR.PFS_Predicted_Load_Wgt);
  PARAMETER(PAR.PFS_Load_Status);
  PARAMETER(PAR.PFS_Trailer_Id);
  PARAMETER(PAR.PFS_Sequence_No);
  PARAMETER(PAR.PFS_Load_Unused_Sts_1);
  PARAMETER(PAR.PFS_Load_Unused_Sts_2);
  PARAMETER(PAR.PFS_Load_Unused_Sts_3);
  PARAMETER(PAR.PFS_Load_Unused_Sts_4);
  PARAMETER(PAR.PFS_Load_Unused_Sts_5);
  PARAMETER(PAR.PFS_Load_Unused_Text_1);
  PARAMETER(PAR.PFS_Record_Status);
  PARAMETER(PAR.PFS_Process_Status);
  PARAMETER(PAR.PFS_Error_Reason);
  PARAMETER(PAR.PFS_Create_Date);
  PARAMETER(PAR.PFS_Create_Time);
  PARAMETER(PAR.PFS_Change_Date);
  PARAMETER(PAR.PFS_Change_Time);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Create Stamp      IF) TYPE(EXCINTFUN)                      AC1732162;
   PARAMETER(DB1.PFS_Process_Status);
   PARAMETER(DB1.PFS_Create_Date);
   PARAMETER(DB1.PFS_Create_Time);
   {
    //?Execute internal function

    // PAR.PFS Process Status = CND.Not Processed
    PAR.PFS_Process_Status = *ZERO;

    // PAR.PFS Create Date = JOB.*Job date
    PAR.PFS_Create_Date = JOB.*Job_date;

    // PAR.PFS Create Time = JOB.*Job time
    PAR.PFS_Create_Time = JOB.*Job_time;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg PFS Load Header   CH) TYPE(CHGOBJ) FILE(PPBACPP)           AC1732293;
  PARAMETER(PAR.PFS_Company_Number);
  PARAMETER(PAR.PFS_Load_ID);
  PARAMETER(PAR.PFS_Sched_Sequence_Num);
  PARAMETER(PAR.PFS_Carrier_Code);
  PARAMETER(PAR.PFS_Carrier_Name);
  PARAMETER(PAR.PFS_Export_Status);
  PARAMETER(PAR.PFS_Shipping_Line);
  PARAMETER(PAR.PFS_Shipping_Line_Name);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
  PARAMETER(PAR.PFS_Shipping_Line_City);
  PARAMETER(PAR.PFS_Shipping_Line_State);
  PARAMETER(PAR.PFS_Shipping_LIne_Zip);
  PARAMETER(PAR.PFS_Vessel_Name);
  PARAMETER(PAR.PFS_Voyage);
  PARAMETER(PAR.PFS_Discharge_Port);
  PARAMETER(PAR.PFS_Booking_Number);
  PARAMETER(PAR.PFS_Shipping_Method);
  PARAMETER(PAR.PFS_Load_Shag_Flag);
  PARAMETER(PAR.PFS_Load_Wash_Flag);
  PARAMETER(PAR.PFS_Load_Total_Stops);
  PARAMETER(PAR.PFS_Load_Total_Miles);
  PARAMETER(PAR.PFS_Reefer_Temp);
  PARAMETER(PAR.PFS_Reefer_Temp_Code);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Date);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Time);
  PARAMETER(PAR.PFS_Load_Deadline_Date);
  PARAMETER(PAR.PFS_Load_Deadline_Time);
  PARAMETER(PAR.PFS_Maximum_Load_Weight);
  PARAMETER(PAR.PFS_Federal_Tax_ID);
  PARAMETER(PAR.PFS_Estimated_Pallets);
  PARAMETER(PAR.PFS_Average_Pallet_Tare);
  PARAMETER(PAR.PFS_Predicted_Load_Wgt);
  PARAMETER(PAR.PFS_Load_Status);
  PARAMETER(PAR.PFS_Trailer_Id);
  PARAMETER(PAR.PFS_Sequence_No);
  PARAMETER(PAR.PFS_Load_Unused_Sts_1);
  PARAMETER(PAR.PFS_Load_Unused_Sts_2);
  PARAMETER(PAR.PFS_Load_Unused_Sts_3);
  PARAMETER(PAR.PFS_Load_Unused_Sts_4);
  PARAMETER(PAR.PFS_Load_Unused_Sts_5);
  PARAMETER(PAR.PFS_Load_Unused_Text_1);
  PARAMETER(PAR.PFS_Record_Status);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Change Stamp      IF) TYPE(EXCINTFUN)                      AC1732163;
   PARAMETER(DB1.PFS_Change_Date);
   PARAMETER(DB1.PFS_Change_Time);
   {
    //?Execute internal function

    // PAR.PFS Change Date = JOB.*Job date
    PAR.PFS_Change_Date = JOB.*Job_date;

    // PAR.PFS Change time = JOB.*Job time
    PAR.PFS_Change_Time = JOB.*Job_time;

   }

  }

 }

 ENDIF;

 //?** Create PFS Load header for other plant company USR Company 1
 CASE;

 // IF LCL.USR Company Number 1 is greater than zero
 IF LCL.USR_Company_Number_1 > *ZERO;

 // AND LCL.USR Company Number 1 NE DB1.Company Number
 AND LCL.USR_Company_Number_1 <> DB1.Company_Number;

 // WRK.Company Number = LCL.USR Company Number 1
 WRK.Company_Number = LCL.USR_Company_Number_1;

 //?Get Next PFS Sequence No         -- RMC 03/14/07
 DO;

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(WRK.Company_Number);
 PARAMETER('PFSSEQNO');
 PARAMETER(LCL.PFS_Sequence_No);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.PFS Sequence No. = LCL.PFS Sequence No. + CON.1
 LCL.PFS_Sequence_No = LCL.PFS_Sequence_No + 1;

 //?Increment if -0-
 CASE;

 // IF LCL.PFS Sequence No. is eq 0
 IF LCL.PFS_Sequence_No = *ZERO;

 // LCL.PFS Sequence No. = LCL.PFS Sequence No. + CON.1
 LCL.PFS_Sequence_No = LCL.PFS_Sequence_No + 1;

 ENDIF;

 // Call program Rtv Chg Comp Val Num   XF.
 CALL PROGRAM(Rtv Chg Comp Val Num   XF) ('PPW2XFR');
 PARAMETER(WRK.Company_Number);
 PARAMETER('PFSSEQNO');
 PARAMETER(LCL.PFS_Sequence_No);

 ENDDO;

 EXECUTE FUNCTION(Upd Load Header       RT) TYPE(RTVOBJ) FILE(PPBACPP)           AC1733062;
 PARAMETER(WRK.Company_Number);
 PARAMETER(PAR.PFS_Load_ID);
 PARAMETER(PAR.PFS_Sched_Sequence_Num);
 PARAMETER(PAR.PFS_Carrier_Code);
 PARAMETER(PAR.PFS_Carrier_Name);
 PARAMETER(PAR.PFS_Export_Status);
 PARAMETER(PAR.PFS_Shipping_Line);
 PARAMETER(PAR.PFS_Shipping_Line_Name);
 PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
 PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
 PARAMETER(PAR.PFS_Shipping_Line_City);
 PARAMETER(PAR.PFS_Shipping_Line_State);
 PARAMETER(PAR.PFS_Shipping_LIne_Zip);
 PARAMETER(PAR.PFS_Vessel_Name);
 PARAMETER(PAR.PFS_Voyage);
 PARAMETER(PAR.PFS_Discharge_Port);
 PARAMETER(PAR.PFS_Booking_Number);
 PARAMETER(PAR.PFS_Shipping_Method);
 PARAMETER(PAR.PFS_Load_Shag_Flag);
 PARAMETER(PAR.PFS_Load_Wash_Flag);
 PARAMETER(PAR.PFS_Load_Total_Stops);
 PARAMETER(PAR.PFS_Load_Total_Miles);
 PARAMETER(PAR.PFS_Reefer_Temp);
 PARAMETER(PAR.PFS_Reefer_Temp_Code);
 PARAMETER(PAR.PFS_Load_Sched_Delv_Date);
 PARAMETER(PAR.PFS_Load_Sched_Delv_Time);
 PARAMETER(PAR.PFS_Load_Deadline_Date);
 PARAMETER(PAR.PFS_Load_Deadline_Time);
 PARAMETER(PAR.PFS_Maximum_Load_Weight);
 PARAMETER(PAR.PFS_Federal_Tax_ID);
 PARAMETER(PAR.PFS_Estimated_Pallets);
 PARAMETER(PAR.PFS_Average_Pallet_Tare);
 PARAMETER(PAR.PFS_Predicted_Load_Wgt);
 PARAMETER(PAR.PFS_Load_Status);
 PARAMETER(PAR.PFS_Trailer_Id);
 PARAMETER(LCL.PFS_Sequence_No);
 PARAMETER(PAR.PFS_Load_Unused_Sts_1);
 PARAMETER(PAR.PFS_Load_Unused_Sts_2);
 PARAMETER(PAR.PFS_Load_Unused_Sts_3);
 PARAMETER(PAR.PFS_Load_Unused_Sts_4);
 PARAMETER(PAR.PFS_Load_Unused_Sts_5);
 PARAMETER(PAR.PFS_Load_Unused_Text_1);
 PARAMETER(PAR.PFS_Record_Status);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt PFS Load Header   CR) TYPE(CRTOBJ) FILE(PPBACPP)           AC1732292;
  PARAMETER(PAR.PFS_Company_Number);
  PARAMETER(PAR.PFS_Load_ID);
  PARAMETER(PAR.PFS_Sched_Sequence_Num);
  PARAMETER(PAR.PFS_Carrier_Code);
  PARAMETER(PAR.PFS_Carrier_Name);
  PARAMETER(PAR.PFS_Export_Status);
  PARAMETER(PAR.PFS_Shipping_Line);
  PARAMETER(PAR.PFS_Shipping_Line_Name);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
  PARAMETER(PAR.PFS_Shipping_Line_City);
  PARAMETER(PAR.PFS_Shipping_Line_State);
  PARAMETER(PAR.PFS_Shipping_LIne_Zip);
  PARAMETER(PAR.PFS_Vessel_Name);
  PARAMETER(PAR.PFS_Voyage);
  PARAMETER(PAR.PFS_Discharge_Port);
  PARAMETER(PAR.PFS_Booking_Number);
  PARAMETER(PAR.PFS_Shipping_Method);
  PARAMETER(PAR.PFS_Load_Shag_Flag);
  PARAMETER(PAR.PFS_Load_Wash_Flag);
  PARAMETER(PAR.PFS_Load_Total_Stops);
  PARAMETER(PAR.PFS_Load_Total_Miles);
  PARAMETER(PAR.PFS_Reefer_Temp);
  PARAMETER(PAR.PFS_Reefer_Temp_Code);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Date);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Time);
  PARAMETER(PAR.PFS_Load_Deadline_Date);
  PARAMETER(PAR.PFS_Load_Deadline_Time);
  PARAMETER(PAR.PFS_Maximum_Load_Weight);
  PARAMETER(PAR.PFS_Federal_Tax_ID);
  PARAMETER(PAR.PFS_Estimated_Pallets);
  PARAMETER(PAR.PFS_Average_Pallet_Tare);
  PARAMETER(PAR.PFS_Predicted_Load_Wgt);
  PARAMETER(PAR.PFS_Load_Status);
  PARAMETER(PAR.PFS_Trailer_Id);
  PARAMETER(PAR.PFS_Sequence_No);
  PARAMETER(PAR.PFS_Load_Unused_Sts_1);
  PARAMETER(PAR.PFS_Load_Unused_Sts_2);
  PARAMETER(PAR.PFS_Load_Unused_Sts_3);
  PARAMETER(PAR.PFS_Load_Unused_Sts_4);
  PARAMETER(PAR.PFS_Load_Unused_Sts_5);
  PARAMETER(PAR.PFS_Load_Unused_Text_1);
  PARAMETER(PAR.PFS_Record_Status);
  PARAMETER(PAR.PFS_Process_Status);
  PARAMETER(PAR.PFS_Error_Reason);
  PARAMETER(PAR.PFS_Create_Date);
  PARAMETER(PAR.PFS_Create_Time);
  PARAMETER(PAR.PFS_Change_Date);
  PARAMETER(PAR.PFS_Change_Time);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Create Stamp      IF) TYPE(EXCINTFUN)                      AC1732162;
   PARAMETER(DB1.PFS_Process_Status);
   PARAMETER(DB1.PFS_Create_Date);
   PARAMETER(DB1.PFS_Create_Time);
   {
    //?Execute internal function

    // PAR.PFS Process Status = CND.Not Processed
    PAR.PFS_Process_Status = *ZERO;

    // PAR.PFS Create Date = JOB.*Job date
    PAR.PFS_Create_Date = JOB.*Job_date;

    // PAR.PFS Create Time = JOB.*Job time
    PAR.PFS_Create_Time = JOB.*Job_time;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg PFS Load Header   CH) TYPE(CHGOBJ) FILE(PPBACPP)           AC1732293;
  PARAMETER(PAR.PFS_Company_Number);
  PARAMETER(PAR.PFS_Load_ID);
  PARAMETER(PAR.PFS_Sched_Sequence_Num);
  PARAMETER(PAR.PFS_Carrier_Code);
  PARAMETER(PAR.PFS_Carrier_Name);
  PARAMETER(PAR.PFS_Export_Status);
  PARAMETER(PAR.PFS_Shipping_Line);
  PARAMETER(PAR.PFS_Shipping_Line_Name);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
  PARAMETER(PAR.PFS_Shipping_Line_City);
  PARAMETER(PAR.PFS_Shipping_Line_State);
  PARAMETER(PAR.PFS_Shipping_LIne_Zip);
  PARAMETER(PAR.PFS_Vessel_Name);
  PARAMETER(PAR.PFS_Voyage);
  PARAMETER(PAR.PFS_Discharge_Port);
  PARAMETER(PAR.PFS_Booking_Number);
  PARAMETER(PAR.PFS_Shipping_Method);
  PARAMETER(PAR.PFS_Load_Shag_Flag);
  PARAMETER(PAR.PFS_Load_Wash_Flag);
  PARAMETER(PAR.PFS_Load_Total_Stops);
  PARAMETER(PAR.PFS_Load_Total_Miles);
  PARAMETER(PAR.PFS_Reefer_Temp);
  PARAMETER(PAR.PFS_Reefer_Temp_Code);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Date);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Time);
  PARAMETER(PAR.PFS_Load_Deadline_Date);
  PARAMETER(PAR.PFS_Load_Deadline_Time);
  PARAMETER(PAR.PFS_Maximum_Load_Weight);
  PARAMETER(PAR.PFS_Federal_Tax_ID);
  PARAMETER(PAR.PFS_Estimated_Pallets);
  PARAMETER(PAR.PFS_Average_Pallet_Tare);
  PARAMETER(PAR.PFS_Predicted_Load_Wgt);
  PARAMETER(PAR.PFS_Load_Status);
  PARAMETER(PAR.PFS_Trailer_Id);
  PARAMETER(PAR.PFS_Sequence_No);
  PARAMETER(PAR.PFS_Load_Unused_Sts_1);
  PARAMETER(PAR.PFS_Load_Unused_Sts_2);
  PARAMETER(PAR.PFS_Load_Unused_Sts_3);
  PARAMETER(PAR.PFS_Load_Unused_Sts_4);
  PARAMETER(PAR.PFS_Load_Unused_Sts_5);
  PARAMETER(PAR.PFS_Load_Unused_Text_1);
  PARAMETER(PAR.PFS_Record_Status);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Change Stamp      IF) TYPE(EXCINTFUN)                      AC1732163;
   PARAMETER(DB1.PFS_Change_Date);
   PARAMETER(DB1.PFS_Change_Time);
   {
    //?Execute internal function

    // PAR.PFS Change Date = JOB.*Job date
    PAR.PFS_Change_Date = JOB.*Job_date;

    // PAR.PFS Change time = JOB.*Job time
    PAR.PFS_Change_Time = JOB.*Job_time;

   }

  }

 }

 ENDIF;

 //?** Create PFS Load header for other plant company USR Company 2
 CASE;

 // IF LCL.USR Company Number 2 is greater than zero
 IF LCL.USR_Company_Number_2 > *ZERO;

 // AND LCL.USR Company Number 2 NE DB1.Company Number
 AND LCL.USR_Company_Number_2 <> DB1.Company_Number;

 // WRK.Company Number = LCL.USR Company Number 2
 WRK.Company_Number = LCL.USR_Company_Number_2;

 //?Get Next PFS Sequence No         -- RMC 03/14/07
 DO;

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(WRK.Company_Number);
 PARAMETER('PFSSEQNO');
 PARAMETER(LCL.PFS_Sequence_No);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.PFS Sequence No. = LCL.PFS Sequence No. + CON.1
 LCL.PFS_Sequence_No = LCL.PFS_Sequence_No + 1;

 //?Increment if -0-
 CASE;

 // IF LCL.PFS Sequence No. is eq 0
 IF LCL.PFS_Sequence_No = *ZERO;

 // LCL.PFS Sequence No. = LCL.PFS Sequence No. + CON.1
 LCL.PFS_Sequence_No = LCL.PFS_Sequence_No + 1;

 ENDIF;

 // Call program Rtv Chg Comp Val Num   XF.
 CALL PROGRAM(Rtv Chg Comp Val Num   XF) ('PPW2XFR');
 PARAMETER(WRK.Company_Number);
 PARAMETER('PFSSEQNO');
 PARAMETER(LCL.PFS_Sequence_No);

 ENDDO;

 EXECUTE FUNCTION(Upd Load Header       RT) TYPE(RTVOBJ) FILE(PPBACPP)           AC1733062;
 PARAMETER(WRK.Company_Number);
 PARAMETER(PAR.PFS_Load_ID);
 PARAMETER(PAR.PFS_Sched_Sequence_Num);
 PARAMETER(PAR.PFS_Carrier_Code);
 PARAMETER(PAR.PFS_Carrier_Name);
 PARAMETER(PAR.PFS_Export_Status);
 PARAMETER(PAR.PFS_Shipping_Line);
 PARAMETER(PAR.PFS_Shipping_Line_Name);
 PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
 PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
 PARAMETER(PAR.PFS_Shipping_Line_City);
 PARAMETER(PAR.PFS_Shipping_Line_State);
 PARAMETER(PAR.PFS_Shipping_LIne_Zip);
 PARAMETER(PAR.PFS_Vessel_Name);
 PARAMETER(PAR.PFS_Voyage);
 PARAMETER(PAR.PFS_Discharge_Port);
 PARAMETER(PAR.PFS_Booking_Number);
 PARAMETER(PAR.PFS_Shipping_Method);
 PARAMETER(PAR.PFS_Load_Shag_Flag);
 PARAMETER(PAR.PFS_Load_Wash_Flag);
 PARAMETER(PAR.PFS_Load_Total_Stops);
 PARAMETER(PAR.PFS_Load_Total_Miles);
 PARAMETER(PAR.PFS_Reefer_Temp);
 PARAMETER(PAR.PFS_Reefer_Temp_Code);
 PARAMETER(PAR.PFS_Load_Sched_Delv_Date);
 PARAMETER(PAR.PFS_Load_Sched_Delv_Time);
 PARAMETER(PAR.PFS_Load_Deadline_Date);
 PARAMETER(PAR.PFS_Load_Deadline_Time);
 PARAMETER(PAR.PFS_Maximum_Load_Weight);
 PARAMETER(PAR.PFS_Federal_Tax_ID);
 PARAMETER(PAR.PFS_Estimated_Pallets);
 PARAMETER(PAR.PFS_Average_Pallet_Tare);
 PARAMETER(PAR.PFS_Predicted_Load_Wgt);
 PARAMETER(PAR.PFS_Load_Status);
 PARAMETER(PAR.PFS_Trailer_Id);
 PARAMETER(LCL.PFS_Sequence_No);
 PARAMETER(PAR.PFS_Load_Unused_Sts_1);
 PARAMETER(PAR.PFS_Load_Unused_Sts_2);
 PARAMETER(PAR.PFS_Load_Unused_Sts_3);
 PARAMETER(PAR.PFS_Load_Unused_Sts_4);
 PARAMETER(PAR.PFS_Load_Unused_Sts_5);
 PARAMETER(PAR.PFS_Load_Unused_Text_1);
 PARAMETER(PAR.PFS_Record_Status);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt PFS Load Header   CR) TYPE(CRTOBJ) FILE(PPBACPP)           AC1732292;
  PARAMETER(PAR.PFS_Company_Number);
  PARAMETER(PAR.PFS_Load_ID);
  PARAMETER(PAR.PFS_Sched_Sequence_Num);
  PARAMETER(PAR.PFS_Carrier_Code);
  PARAMETER(PAR.PFS_Carrier_Name);
  PARAMETER(PAR.PFS_Export_Status);
  PARAMETER(PAR.PFS_Shipping_Line);
  PARAMETER(PAR.PFS_Shipping_Line_Name);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
  PARAMETER(PAR.PFS_Shipping_Line_City);
  PARAMETER(PAR.PFS_Shipping_Line_State);
  PARAMETER(PAR.PFS_Shipping_LIne_Zip);
  PARAMETER(PAR.PFS_Vessel_Name);
  PARAMETER(PAR.PFS_Voyage);
  PARAMETER(PAR.PFS_Discharge_Port);
  PARAMETER(PAR.PFS_Booking_Number);
  PARAMETER(PAR.PFS_Shipping_Method);
  PARAMETER(PAR.PFS_Load_Shag_Flag);
  PARAMETER(PAR.PFS_Load_Wash_Flag);
  PARAMETER(PAR.PFS_Load_Total_Stops);
  PARAMETER(PAR.PFS_Load_Total_Miles);
  PARAMETER(PAR.PFS_Reefer_Temp);
  PARAMETER(PAR.PFS_Reefer_Temp_Code);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Date);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Time);
  PARAMETER(PAR.PFS_Load_Deadline_Date);
  PARAMETER(PAR.PFS_Load_Deadline_Time);
  PARAMETER(PAR.PFS_Maximum_Load_Weight);
  PARAMETER(PAR.PFS_Federal_Tax_ID);
  PARAMETER(PAR.PFS_Estimated_Pallets);
  PARAMETER(PAR.PFS_Average_Pallet_Tare);
  PARAMETER(PAR.PFS_Predicted_Load_Wgt);
  PARAMETER(PAR.PFS_Load_Status);
  PARAMETER(PAR.PFS_Trailer_Id);
  PARAMETER(PAR.PFS_Sequence_No);
  PARAMETER(PAR.PFS_Load_Unused_Sts_1);
  PARAMETER(PAR.PFS_Load_Unused_Sts_2);
  PARAMETER(PAR.PFS_Load_Unused_Sts_3);
  PARAMETER(PAR.PFS_Load_Unused_Sts_4);
  PARAMETER(PAR.PFS_Load_Unused_Sts_5);
  PARAMETER(PAR.PFS_Load_Unused_Text_1);
  PARAMETER(PAR.PFS_Record_Status);
  PARAMETER(PAR.PFS_Process_Status);
  PARAMETER(PAR.PFS_Error_Reason);
  PARAMETER(PAR.PFS_Create_Date);
  PARAMETER(PAR.PFS_Create_Time);
  PARAMETER(PAR.PFS_Change_Date);
  PARAMETER(PAR.PFS_Change_Time);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Create Stamp      IF) TYPE(EXCINTFUN)                      AC1732162;
   PARAMETER(DB1.PFS_Process_Status);
   PARAMETER(DB1.PFS_Create_Date);
   PARAMETER(DB1.PFS_Create_Time);
   {
    //?Execute internal function

    // PAR.PFS Process Status = CND.Not Processed
    PAR.PFS_Process_Status = *ZERO;

    // PAR.PFS Create Date = JOB.*Job date
    PAR.PFS_Create_Date = JOB.*Job_date;

    // PAR.PFS Create Time = JOB.*Job time
    PAR.PFS_Create_Time = JOB.*Job_time;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg PFS Load Header   CH) TYPE(CHGOBJ) FILE(PPBACPP)           AC1732293;
  PARAMETER(PAR.PFS_Company_Number);
  PARAMETER(PAR.PFS_Load_ID);
  PARAMETER(PAR.PFS_Sched_Sequence_Num);
  PARAMETER(PAR.PFS_Carrier_Code);
  PARAMETER(PAR.PFS_Carrier_Name);
  PARAMETER(PAR.PFS_Export_Status);
  PARAMETER(PAR.PFS_Shipping_Line);
  PARAMETER(PAR.PFS_Shipping_Line_Name);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
  PARAMETER(PAR.PFS_Shipping_Line_City);
  PARAMETER(PAR.PFS_Shipping_Line_State);
  PARAMETER(PAR.PFS_Shipping_LIne_Zip);
  PARAMETER(PAR.PFS_Vessel_Name);
  PARAMETER(PAR.PFS_Voyage);
  PARAMETER(PAR.PFS_Discharge_Port);
  PARAMETER(PAR.PFS_Booking_Number);
  PARAMETER(PAR.PFS_Shipping_Method);
  PARAMETER(PAR.PFS_Load_Shag_Flag);
  PARAMETER(PAR.PFS_Load_Wash_Flag);
  PARAMETER(PAR.PFS_Load_Total_Stops);
  PARAMETER(PAR.PFS_Load_Total_Miles);
  PARAMETER(PAR.PFS_Reefer_Temp);
  PARAMETER(PAR.PFS_Reefer_Temp_Code);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Date);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Time);
  PARAMETER(PAR.PFS_Load_Deadline_Date);
  PARAMETER(PAR.PFS_Load_Deadline_Time);
  PARAMETER(PAR.PFS_Maximum_Load_Weight);
  PARAMETER(PAR.PFS_Federal_Tax_ID);
  PARAMETER(PAR.PFS_Estimated_Pallets);
  PARAMETER(PAR.PFS_Average_Pallet_Tare);
  PARAMETER(PAR.PFS_Predicted_Load_Wgt);
  PARAMETER(PAR.PFS_Load_Status);
  PARAMETER(PAR.PFS_Trailer_Id);
  PARAMETER(PAR.PFS_Sequence_No);
  PARAMETER(PAR.PFS_Load_Unused_Sts_1);
  PARAMETER(PAR.PFS_Load_Unused_Sts_2);
  PARAMETER(PAR.PFS_Load_Unused_Sts_3);
  PARAMETER(PAR.PFS_Load_Unused_Sts_4);
  PARAMETER(PAR.PFS_Load_Unused_Sts_5);
  PARAMETER(PAR.PFS_Load_Unused_Text_1);
  PARAMETER(PAR.PFS_Record_Status);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Change Stamp      IF) TYPE(EXCINTFUN)                      AC1732163;
   PARAMETER(DB1.PFS_Change_Date);
   PARAMETER(DB1.PFS_Change_Time);
   {
    //?Execute internal function

    // PAR.PFS Change Date = JOB.*Job date
    PAR.PFS_Change_Date = JOB.*Job_date;

    // PAR.PFS Change time = JOB.*Job time
    PAR.PFS_Change_Time = JOB.*Job_time;

   }

  }

 }

 ENDIF;

 //?** Create PFS Load header for other plant company USR Company 3
 CASE;

 // IF LCL.USR Company Number 3 is greater than zero
 IF LCL.USR_Company_Number_3 > *ZERO;

 // AND LCL.USR Company Number 3 NE DB1.Company Number
 AND LCL.USR_Company_Number_3 <> DB1.Company_Number;

 // WRK.Company Number = LCL.USR Company Number 3
 WRK.Company_Number = LCL.USR_Company_Number_3;

 //?Get Next PFS Sequence No         -- RMC 03/14/07
 DO;

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(WRK.Company_Number);
 PARAMETER('PFSSEQNO');
 PARAMETER(LCL.PFS_Sequence_No);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.PFS Sequence No. = LCL.PFS Sequence No. + CON.1
 LCL.PFS_Sequence_No = LCL.PFS_Sequence_No + 1;

 //?Increment if -0-
 CASE;

 // IF LCL.PFS Sequence No. is eq 0
 IF LCL.PFS_Sequence_No = *ZERO;

 // LCL.PFS Sequence No. = LCL.PFS Sequence No. + CON.1
 LCL.PFS_Sequence_No = LCL.PFS_Sequence_No + 1;

 ENDIF;

 // Call program Rtv Chg Comp Val Num   XF.
 CALL PROGRAM(Rtv Chg Comp Val Num   XF) ('PPW2XFR');
 PARAMETER(WRK.Company_Number);
 PARAMETER('PFSSEQNO');
 PARAMETER(LCL.PFS_Sequence_No);

 ENDDO;

 EXECUTE FUNCTION(Upd Load Header       RT) TYPE(RTVOBJ) FILE(PPBACPP)           AC1733062;
 PARAMETER(WRK.Company_Number);
 PARAMETER(PAR.PFS_Load_ID);
 PARAMETER(PAR.PFS_Sched_Sequence_Num);
 PARAMETER(PAR.PFS_Carrier_Code);
 PARAMETER(PAR.PFS_Carrier_Name);
 PARAMETER(PAR.PFS_Export_Status);
 PARAMETER(PAR.PFS_Shipping_Line);
 PARAMETER(PAR.PFS_Shipping_Line_Name);
 PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
 PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
 PARAMETER(PAR.PFS_Shipping_Line_City);
 PARAMETER(PAR.PFS_Shipping_Line_State);
 PARAMETER(PAR.PFS_Shipping_LIne_Zip);
 PARAMETER(PAR.PFS_Vessel_Name);
 PARAMETER(PAR.PFS_Voyage);
 PARAMETER(PAR.PFS_Discharge_Port);
 PARAMETER(PAR.PFS_Booking_Number);
 PARAMETER(PAR.PFS_Shipping_Method);
 PARAMETER(PAR.PFS_Load_Shag_Flag);
 PARAMETER(PAR.PFS_Load_Wash_Flag);
 PARAMETER(PAR.PFS_Load_Total_Stops);
 PARAMETER(PAR.PFS_Load_Total_Miles);
 PARAMETER(PAR.PFS_Reefer_Temp);
 PARAMETER(PAR.PFS_Reefer_Temp_Code);
 PARAMETER(PAR.PFS_Load_Sched_Delv_Date);
 PARAMETER(PAR.PFS_Load_Sched_Delv_Time);
 PARAMETER(PAR.PFS_Load_Deadline_Date);
 PARAMETER(PAR.PFS_Load_Deadline_Time);
 PARAMETER(PAR.PFS_Maximum_Load_Weight);
 PARAMETER(PAR.PFS_Federal_Tax_ID);
 PARAMETER(PAR.PFS_Estimated_Pallets);
 PARAMETER(PAR.PFS_Average_Pallet_Tare);
 PARAMETER(PAR.PFS_Predicted_Load_Wgt);
 PARAMETER(PAR.PFS_Load_Status);
 PARAMETER(PAR.PFS_Trailer_Id);
 PARAMETER(LCL.PFS_Sequence_No);
 PARAMETER(PAR.PFS_Load_Unused_Sts_1);
 PARAMETER(PAR.PFS_Load_Unused_Sts_2);
 PARAMETER(PAR.PFS_Load_Unused_Sts_3);
 PARAMETER(PAR.PFS_Load_Unused_Sts_4);
 PARAMETER(PAR.PFS_Load_Unused_Sts_5);
 PARAMETER(PAR.PFS_Load_Unused_Text_1);
 PARAMETER(PAR.PFS_Record_Status);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt PFS Load Header   CR) TYPE(CRTOBJ) FILE(PPBACPP)           AC1732292;
  PARAMETER(PAR.PFS_Company_Number);
  PARAMETER(PAR.PFS_Load_ID);
  PARAMETER(PAR.PFS_Sched_Sequence_Num);
  PARAMETER(PAR.PFS_Carrier_Code);
  PARAMETER(PAR.PFS_Carrier_Name);
  PARAMETER(PAR.PFS_Export_Status);
  PARAMETER(PAR.PFS_Shipping_Line);
  PARAMETER(PAR.PFS_Shipping_Line_Name);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
  PARAMETER(PAR.PFS_Shipping_Line_City);
  PARAMETER(PAR.PFS_Shipping_Line_State);
  PARAMETER(PAR.PFS_Shipping_LIne_Zip);
  PARAMETER(PAR.PFS_Vessel_Name);
  PARAMETER(PAR.PFS_Voyage);
  PARAMETER(PAR.PFS_Discharge_Port);
  PARAMETER(PAR.PFS_Booking_Number);
  PARAMETER(PAR.PFS_Shipping_Method);
  PARAMETER(PAR.PFS_Load_Shag_Flag);
  PARAMETER(PAR.PFS_Load_Wash_Flag);
  PARAMETER(PAR.PFS_Load_Total_Stops);
  PARAMETER(PAR.PFS_Load_Total_Miles);
  PARAMETER(PAR.PFS_Reefer_Temp);
  PARAMETER(PAR.PFS_Reefer_Temp_Code);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Date);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Time);
  PARAMETER(PAR.PFS_Load_Deadline_Date);
  PARAMETER(PAR.PFS_Load_Deadline_Time);
  PARAMETER(PAR.PFS_Maximum_Load_Weight);
  PARAMETER(PAR.PFS_Federal_Tax_ID);
  PARAMETER(PAR.PFS_Estimated_Pallets);
  PARAMETER(PAR.PFS_Average_Pallet_Tare);
  PARAMETER(PAR.PFS_Predicted_Load_Wgt);
  PARAMETER(PAR.PFS_Load_Status);
  PARAMETER(PAR.PFS_Trailer_Id);
  PARAMETER(PAR.PFS_Sequence_No);
  PARAMETER(PAR.PFS_Load_Unused_Sts_1);
  PARAMETER(PAR.PFS_Load_Unused_Sts_2);
  PARAMETER(PAR.PFS_Load_Unused_Sts_3);
  PARAMETER(PAR.PFS_Load_Unused_Sts_4);
  PARAMETER(PAR.PFS_Load_Unused_Sts_5);
  PARAMETER(PAR.PFS_Load_Unused_Text_1);
  PARAMETER(PAR.PFS_Record_Status);
  PARAMETER(PAR.PFS_Process_Status);
  PARAMETER(PAR.PFS_Error_Reason);
  PARAMETER(PAR.PFS_Create_Date);
  PARAMETER(PAR.PFS_Create_Time);
  PARAMETER(PAR.PFS_Change_Date);
  PARAMETER(PAR.PFS_Change_Time);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Create Stamp      IF) TYPE(EXCINTFUN)                      AC1732162;
   PARAMETER(DB1.PFS_Process_Status);
   PARAMETER(DB1.PFS_Create_Date);
   PARAMETER(DB1.PFS_Create_Time);
   {
    //?Execute internal function

    // PAR.PFS Process Status = CND.Not Processed
    PAR.PFS_Process_Status = *ZERO;

    // PAR.PFS Create Date = JOB.*Job date
    PAR.PFS_Create_Date = JOB.*Job_date;

    // PAR.PFS Create Time = JOB.*Job time
    PAR.PFS_Create_Time = JOB.*Job_time;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg PFS Load Header   CH) TYPE(CHGOBJ) FILE(PPBACPP)           AC1732293;
  PARAMETER(PAR.PFS_Company_Number);
  PARAMETER(PAR.PFS_Load_ID);
  PARAMETER(PAR.PFS_Sched_Sequence_Num);
  PARAMETER(PAR.PFS_Carrier_Code);
  PARAMETER(PAR.PFS_Carrier_Name);
  PARAMETER(PAR.PFS_Export_Status);
  PARAMETER(PAR.PFS_Shipping_Line);
  PARAMETER(PAR.PFS_Shipping_Line_Name);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
  PARAMETER(PAR.PFS_Shipping_Line_City);
  PARAMETER(PAR.PFS_Shipping_Line_State);
  PARAMETER(PAR.PFS_Shipping_LIne_Zip);
  PARAMETER(PAR.PFS_Vessel_Name);
  PARAMETER(PAR.PFS_Voyage);
  PARAMETER(PAR.PFS_Discharge_Port);
  PARAMETER(PAR.PFS_Booking_Number);
  PARAMETER(PAR.PFS_Shipping_Method);
  PARAMETER(PAR.PFS_Load_Shag_Flag);
  PARAMETER(PAR.PFS_Load_Wash_Flag);
  PARAMETER(PAR.PFS_Load_Total_Stops);
  PARAMETER(PAR.PFS_Load_Total_Miles);
  PARAMETER(PAR.PFS_Reefer_Temp);
  PARAMETER(PAR.PFS_Reefer_Temp_Code);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Date);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Time);
  PARAMETER(PAR.PFS_Load_Deadline_Date);
  PARAMETER(PAR.PFS_Load_Deadline_Time);
  PARAMETER(PAR.PFS_Maximum_Load_Weight);
  PARAMETER(PAR.PFS_Federal_Tax_ID);
  PARAMETER(PAR.PFS_Estimated_Pallets);
  PARAMETER(PAR.PFS_Average_Pallet_Tare);
  PARAMETER(PAR.PFS_Predicted_Load_Wgt);
  PARAMETER(PAR.PFS_Load_Status);
  PARAMETER(PAR.PFS_Trailer_Id);
  PARAMETER(PAR.PFS_Sequence_No);
  PARAMETER(PAR.PFS_Load_Unused_Sts_1);
  PARAMETER(PAR.PFS_Load_Unused_Sts_2);
  PARAMETER(PAR.PFS_Load_Unused_Sts_3);
  PARAMETER(PAR.PFS_Load_Unused_Sts_4);
  PARAMETER(PAR.PFS_Load_Unused_Sts_5);
  PARAMETER(PAR.PFS_Load_Unused_Text_1);
  PARAMETER(PAR.PFS_Record_Status);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Change Stamp      IF) TYPE(EXCINTFUN)                      AC1732163;
   PARAMETER(DB1.PFS_Change_Date);
   PARAMETER(DB1.PFS_Change_Time);
   {
    //?Execute internal function

    // PAR.PFS Change Date = JOB.*Job date
    PAR.PFS_Change_Date = JOB.*Job_date;

    // PAR.PFS Change time = JOB.*Job time
    PAR.PFS_Change_Time = JOB.*Job_time;

   }

  }

 }

 ENDIF;

 //?** Create PFS Load header for other plant company USR Company 4
 CASE;

 // IF LCL.USR Company Number 4 is greater than zero
 IF LCL.USR_Company_Number_4 > *ZERO;

 // AND LCL.USR Company Number 4 NE DB1.Company Number
 AND LCL.USR_Company_Number_4 <> DB1.Company_Number;

 // WRK.Company Number = LCL.USR Company Number 4
 WRK.Company_Number = LCL.USR_Company_Number_4;

 //?Get Next PFS Sequence No         -- RMC 03/14/07
 DO;

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(WRK.Company_Number);
 PARAMETER('PFSSEQNO');
 PARAMETER(LCL.PFS_Sequence_No);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.PFS Sequence No. = LCL.PFS Sequence No. + CON.1
 LCL.PFS_Sequence_No = LCL.PFS_Sequence_No + 1;

 //?Increment if -0-
 CASE;

 // IF LCL.PFS Sequence No. is eq 0
 IF LCL.PFS_Sequence_No = *ZERO;

 // LCL.PFS Sequence No. = LCL.PFS Sequence No. + CON.1
 LCL.PFS_Sequence_No = LCL.PFS_Sequence_No + 1;

 ENDIF;

 // Call program Rtv Chg Comp Val Num   XF.
 CALL PROGRAM(Rtv Chg Comp Val Num   XF) ('PPW2XFR');
 PARAMETER(WRK.Company_Number);
 PARAMETER('PFSSEQNO');
 PARAMETER(LCL.PFS_Sequence_No);

 ENDDO;

 EXECUTE FUNCTION(Upd Load Header       RT) TYPE(RTVOBJ) FILE(PPBACPP)           AC1733062;
 PARAMETER(WRK.Company_Number);
 PARAMETER(PAR.PFS_Load_ID);
 PARAMETER(PAR.PFS_Sched_Sequence_Num);
 PARAMETER(PAR.PFS_Carrier_Code);
 PARAMETER(PAR.PFS_Carrier_Name);
 PARAMETER(PAR.PFS_Export_Status);
 PARAMETER(PAR.PFS_Shipping_Line);
 PARAMETER(PAR.PFS_Shipping_Line_Name);
 PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
 PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
 PARAMETER(PAR.PFS_Shipping_Line_City);
 PARAMETER(PAR.PFS_Shipping_Line_State);
 PARAMETER(PAR.PFS_Shipping_LIne_Zip);
 PARAMETER(PAR.PFS_Vessel_Name);
 PARAMETER(PAR.PFS_Voyage);
 PARAMETER(PAR.PFS_Discharge_Port);
 PARAMETER(PAR.PFS_Booking_Number);
 PARAMETER(PAR.PFS_Shipping_Method);
 PARAMETER(PAR.PFS_Load_Shag_Flag);
 PARAMETER(PAR.PFS_Load_Wash_Flag);
 PARAMETER(PAR.PFS_Load_Total_Stops);
 PARAMETER(PAR.PFS_Load_Total_Miles);
 PARAMETER(PAR.PFS_Reefer_Temp);
 PARAMETER(PAR.PFS_Reefer_Temp_Code);
 PARAMETER(PAR.PFS_Load_Sched_Delv_Date);
 PARAMETER(PAR.PFS_Load_Sched_Delv_Time);
 PARAMETER(PAR.PFS_Load_Deadline_Date);
 PARAMETER(PAR.PFS_Load_Deadline_Time);
 PARAMETER(PAR.PFS_Maximum_Load_Weight);
 PARAMETER(PAR.PFS_Federal_Tax_ID);
 PARAMETER(PAR.PFS_Estimated_Pallets);
 PARAMETER(PAR.PFS_Average_Pallet_Tare);
 PARAMETER(PAR.PFS_Predicted_Load_Wgt);
 PARAMETER(PAR.PFS_Load_Status);
 PARAMETER(PAR.PFS_Trailer_Id);
 PARAMETER(LCL.PFS_Sequence_No);
 PARAMETER(PAR.PFS_Load_Unused_Sts_1);
 PARAMETER(PAR.PFS_Load_Unused_Sts_2);
 PARAMETER(PAR.PFS_Load_Unused_Sts_3);
 PARAMETER(PAR.PFS_Load_Unused_Sts_4);
 PARAMETER(PAR.PFS_Load_Unused_Sts_5);
 PARAMETER(PAR.PFS_Load_Unused_Text_1);
 PARAMETER(PAR.PFS_Record_Status);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt PFS Load Header   CR) TYPE(CRTOBJ) FILE(PPBACPP)           AC1732292;
  PARAMETER(PAR.PFS_Company_Number);
  PARAMETER(PAR.PFS_Load_ID);
  PARAMETER(PAR.PFS_Sched_Sequence_Num);
  PARAMETER(PAR.PFS_Carrier_Code);
  PARAMETER(PAR.PFS_Carrier_Name);
  PARAMETER(PAR.PFS_Export_Status);
  PARAMETER(PAR.PFS_Shipping_Line);
  PARAMETER(PAR.PFS_Shipping_Line_Name);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
  PARAMETER(PAR.PFS_Shipping_Line_City);
  PARAMETER(PAR.PFS_Shipping_Line_State);
  PARAMETER(PAR.PFS_Shipping_LIne_Zip);
  PARAMETER(PAR.PFS_Vessel_Name);
  PARAMETER(PAR.PFS_Voyage);
  PARAMETER(PAR.PFS_Discharge_Port);
  PARAMETER(PAR.PFS_Booking_Number);
  PARAMETER(PAR.PFS_Shipping_Method);
  PARAMETER(PAR.PFS_Load_Shag_Flag);
  PARAMETER(PAR.PFS_Load_Wash_Flag);
  PARAMETER(PAR.PFS_Load_Total_Stops);
  PARAMETER(PAR.PFS_Load_Total_Miles);
  PARAMETER(PAR.PFS_Reefer_Temp);
  PARAMETER(PAR.PFS_Reefer_Temp_Code);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Date);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Time);
  PARAMETER(PAR.PFS_Load_Deadline_Date);
  PARAMETER(PAR.PFS_Load_Deadline_Time);
  PARAMETER(PAR.PFS_Maximum_Load_Weight);
  PARAMETER(PAR.PFS_Federal_Tax_ID);
  PARAMETER(PAR.PFS_Estimated_Pallets);
  PARAMETER(PAR.PFS_Average_Pallet_Tare);
  PARAMETER(PAR.PFS_Predicted_Load_Wgt);
  PARAMETER(PAR.PFS_Load_Status);
  PARAMETER(PAR.PFS_Trailer_Id);
  PARAMETER(PAR.PFS_Sequence_No);
  PARAMETER(PAR.PFS_Load_Unused_Sts_1);
  PARAMETER(PAR.PFS_Load_Unused_Sts_2);
  PARAMETER(PAR.PFS_Load_Unused_Sts_3);
  PARAMETER(PAR.PFS_Load_Unused_Sts_4);
  PARAMETER(PAR.PFS_Load_Unused_Sts_5);
  PARAMETER(PAR.PFS_Load_Unused_Text_1);
  PARAMETER(PAR.PFS_Record_Status);
  PARAMETER(PAR.PFS_Process_Status);
  PARAMETER(PAR.PFS_Error_Reason);
  PARAMETER(PAR.PFS_Create_Date);
  PARAMETER(PAR.PFS_Create_Time);
  PARAMETER(PAR.PFS_Change_Date);
  PARAMETER(PAR.PFS_Change_Time);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Create Stamp      IF) TYPE(EXCINTFUN)                      AC1732162;
   PARAMETER(DB1.PFS_Process_Status);
   PARAMETER(DB1.PFS_Create_Date);
   PARAMETER(DB1.PFS_Create_Time);
   {
    //?Execute internal function

    // PAR.PFS Process Status = CND.Not Processed
    PAR.PFS_Process_Status = *ZERO;

    // PAR.PFS Create Date = JOB.*Job date
    PAR.PFS_Create_Date = JOB.*Job_date;

    // PAR.PFS Create Time = JOB.*Job time
    PAR.PFS_Create_Time = JOB.*Job_time;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg PFS Load Header   CH) TYPE(CHGOBJ) FILE(PPBACPP)           AC1732293;
  PARAMETER(PAR.PFS_Company_Number);
  PARAMETER(PAR.PFS_Load_ID);
  PARAMETER(PAR.PFS_Sched_Sequence_Num);
  PARAMETER(PAR.PFS_Carrier_Code);
  PARAMETER(PAR.PFS_Carrier_Name);
  PARAMETER(PAR.PFS_Export_Status);
  PARAMETER(PAR.PFS_Shipping_Line);
  PARAMETER(PAR.PFS_Shipping_Line_Name);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
  PARAMETER(PAR.PFS_Shipping_Line_City);
  PARAMETER(PAR.PFS_Shipping_Line_State);
  PARAMETER(PAR.PFS_Shipping_LIne_Zip);
  PARAMETER(PAR.PFS_Vessel_Name);
  PARAMETER(PAR.PFS_Voyage);
  PARAMETER(PAR.PFS_Discharge_Port);
  PARAMETER(PAR.PFS_Booking_Number);
  PARAMETER(PAR.PFS_Shipping_Method);
  PARAMETER(PAR.PFS_Load_Shag_Flag);
  PARAMETER(PAR.PFS_Load_Wash_Flag);
  PARAMETER(PAR.PFS_Load_Total_Stops);
  PARAMETER(PAR.PFS_Load_Total_Miles);
  PARAMETER(PAR.PFS_Reefer_Temp);
  PARAMETER(PAR.PFS_Reefer_Temp_Code);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Date);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Time);
  PARAMETER(PAR.PFS_Load_Deadline_Date);
  PARAMETER(PAR.PFS_Load_Deadline_Time);
  PARAMETER(PAR.PFS_Maximum_Load_Weight);
  PARAMETER(PAR.PFS_Federal_Tax_ID);
  PARAMETER(PAR.PFS_Estimated_Pallets);
  PARAMETER(PAR.PFS_Average_Pallet_Tare);
  PARAMETER(PAR.PFS_Predicted_Load_Wgt);
  PARAMETER(PAR.PFS_Load_Status);
  PARAMETER(PAR.PFS_Trailer_Id);
  PARAMETER(PAR.PFS_Sequence_No);
  PARAMETER(PAR.PFS_Load_Unused_Sts_1);
  PARAMETER(PAR.PFS_Load_Unused_Sts_2);
  PARAMETER(PAR.PFS_Load_Unused_Sts_3);
  PARAMETER(PAR.PFS_Load_Unused_Sts_4);
  PARAMETER(PAR.PFS_Load_Unused_Sts_5);
  PARAMETER(PAR.PFS_Load_Unused_Text_1);
  PARAMETER(PAR.PFS_Record_Status);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Change Stamp      IF) TYPE(EXCINTFUN)                      AC1732163;
   PARAMETER(DB1.PFS_Change_Date);
   PARAMETER(DB1.PFS_Change_Time);
   {
    //?Execute internal function

    // PAR.PFS Change Date = JOB.*Job date
    PAR.PFS_Change_Date = JOB.*Job_date;

    // PAR.PFS Change time = JOB.*Job time
    PAR.PFS_Change_Time = JOB.*Job_time;

   }

  }

 }

 ENDIF;

 //?** Create PFS Load header for other plant company USR Company 5
 CASE;

 // IF LCL.USR Company Number 5 is greater than zero
 IF LCL.USR_Company_Number_5 > *ZERO;

 // AND LCL.USR Company Number 5 NE DB1.Company Number
 AND LCL.USR_Company_Number_5 <> DB1.Company_Number;

 // WRK.Company Number = LCL.USR Company Number 5
 WRK.Company_Number = LCL.USR_Company_Number_5;

 //?Get Next PFS Sequence No         -- RMC 03/14/07
 DO;

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(WRK.Company_Number);
 PARAMETER('PFSSEQNO');
 PARAMETER(LCL.PFS_Sequence_No);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.PFS Sequence No. = LCL.PFS Sequence No. + CON.1
 LCL.PFS_Sequence_No = LCL.PFS_Sequence_No + 1;

 //?Increment if -0-
 CASE;

 // IF LCL.PFS Sequence No. is eq 0
 IF LCL.PFS_Sequence_No = *ZERO;

 // LCL.PFS Sequence No. = LCL.PFS Sequence No. + CON.1
 LCL.PFS_Sequence_No = LCL.PFS_Sequence_No + 1;

 ENDIF;

 // Call program Rtv Chg Comp Val Num   XF.
 CALL PROGRAM(Rtv Chg Comp Val Num   XF) ('PPW2XFR');
 PARAMETER(WRK.Company_Number);
 PARAMETER('PFSSEQNO');
 PARAMETER(LCL.PFS_Sequence_No);

 ENDDO;

 EXECUTE FUNCTION(Upd Load Header       RT) TYPE(RTVOBJ) FILE(PPBACPP)           AC1733062;
 PARAMETER(WRK.Company_Number);
 PARAMETER(PAR.PFS_Load_ID);
 PARAMETER(PAR.PFS_Sched_Sequence_Num);
 PARAMETER(PAR.PFS_Carrier_Code);
 PARAMETER(PAR.PFS_Carrier_Name);
 PARAMETER(PAR.PFS_Export_Status);
 PARAMETER(PAR.PFS_Shipping_Line);
 PARAMETER(PAR.PFS_Shipping_Line_Name);
 PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
 PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
 PARAMETER(PAR.PFS_Shipping_Line_City);
 PARAMETER(PAR.PFS_Shipping_Line_State);
 PARAMETER(PAR.PFS_Shipping_LIne_Zip);
 PARAMETER(PAR.PFS_Vessel_Name);
 PARAMETER(PAR.PFS_Voyage);
 PARAMETER(PAR.PFS_Discharge_Port);
 PARAMETER(PAR.PFS_Booking_Number);
 PARAMETER(PAR.PFS_Shipping_Method);
 PARAMETER(PAR.PFS_Load_Shag_Flag);
 PARAMETER(PAR.PFS_Load_Wash_Flag);
 PARAMETER(PAR.PFS_Load_Total_Stops);
 PARAMETER(PAR.PFS_Load_Total_Miles);
 PARAMETER(PAR.PFS_Reefer_Temp);
 PARAMETER(PAR.PFS_Reefer_Temp_Code);
 PARAMETER(PAR.PFS_Load_Sched_Delv_Date);
 PARAMETER(PAR.PFS_Load_Sched_Delv_Time);
 PARAMETER(PAR.PFS_Load_Deadline_Date);
 PARAMETER(PAR.PFS_Load_Deadline_Time);
 PARAMETER(PAR.PFS_Maximum_Load_Weight);
 PARAMETER(PAR.PFS_Federal_Tax_ID);
 PARAMETER(PAR.PFS_Estimated_Pallets);
 PARAMETER(PAR.PFS_Average_Pallet_Tare);
 PARAMETER(PAR.PFS_Predicted_Load_Wgt);
 PARAMETER(PAR.PFS_Load_Status);
 PARAMETER(PAR.PFS_Trailer_Id);
 PARAMETER(LCL.PFS_Sequence_No);
 PARAMETER(PAR.PFS_Load_Unused_Sts_1);
 PARAMETER(PAR.PFS_Load_Unused_Sts_2);
 PARAMETER(PAR.PFS_Load_Unused_Sts_3);
 PARAMETER(PAR.PFS_Load_Unused_Sts_4);
 PARAMETER(PAR.PFS_Load_Unused_Sts_5);
 PARAMETER(PAR.PFS_Load_Unused_Text_1);
 PARAMETER(PAR.PFS_Record_Status);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt PFS Load Header   CR) TYPE(CRTOBJ) FILE(PPBACPP)           AC1732292;
  PARAMETER(PAR.PFS_Company_Number);
  PARAMETER(PAR.PFS_Load_ID);
  PARAMETER(PAR.PFS_Sched_Sequence_Num);
  PARAMETER(PAR.PFS_Carrier_Code);
  PARAMETER(PAR.PFS_Carrier_Name);
  PARAMETER(PAR.PFS_Export_Status);
  PARAMETER(PAR.PFS_Shipping_Line);
  PARAMETER(PAR.PFS_Shipping_Line_Name);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
  PARAMETER(PAR.PFS_Shipping_Line_City);
  PARAMETER(PAR.PFS_Shipping_Line_State);
  PARAMETER(PAR.PFS_Shipping_LIne_Zip);
  PARAMETER(PAR.PFS_Vessel_Name);
  PARAMETER(PAR.PFS_Voyage);
  PARAMETER(PAR.PFS_Discharge_Port);
  PARAMETER(PAR.PFS_Booking_Number);
  PARAMETER(PAR.PFS_Shipping_Method);
  PARAMETER(PAR.PFS_Load_Shag_Flag);
  PARAMETER(PAR.PFS_Load_Wash_Flag);
  PARAMETER(PAR.PFS_Load_Total_Stops);
  PARAMETER(PAR.PFS_Load_Total_Miles);
  PARAMETER(PAR.PFS_Reefer_Temp);
  PARAMETER(PAR.PFS_Reefer_Temp_Code);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Date);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Time);
  PARAMETER(PAR.PFS_Load_Deadline_Date);
  PARAMETER(PAR.PFS_Load_Deadline_Time);
  PARAMETER(PAR.PFS_Maximum_Load_Weight);
  PARAMETER(PAR.PFS_Federal_Tax_ID);
  PARAMETER(PAR.PFS_Estimated_Pallets);
  PARAMETER(PAR.PFS_Average_Pallet_Tare);
  PARAMETER(PAR.PFS_Predicted_Load_Wgt);
  PARAMETER(PAR.PFS_Load_Status);
  PARAMETER(PAR.PFS_Trailer_Id);
  PARAMETER(PAR.PFS_Sequence_No);
  PARAMETER(PAR.PFS_Load_Unused_Sts_1);
  PARAMETER(PAR.PFS_Load_Unused_Sts_2);
  PARAMETER(PAR.PFS_Load_Unused_Sts_3);
  PARAMETER(PAR.PFS_Load_Unused_Sts_4);
  PARAMETER(PAR.PFS_Load_Unused_Sts_5);
  PARAMETER(PAR.PFS_Load_Unused_Text_1);
  PARAMETER(PAR.PFS_Record_Status);
  PARAMETER(PAR.PFS_Process_Status);
  PARAMETER(PAR.PFS_Error_Reason);
  PARAMETER(PAR.PFS_Create_Date);
  PARAMETER(PAR.PFS_Create_Time);
  PARAMETER(PAR.PFS_Change_Date);
  PARAMETER(PAR.PFS_Change_Time);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Create Stamp      IF) TYPE(EXCINTFUN)                      AC1732162;
   PARAMETER(DB1.PFS_Process_Status);
   PARAMETER(DB1.PFS_Create_Date);
   PARAMETER(DB1.PFS_Create_Time);
   {
    //?Execute internal function

    // PAR.PFS Process Status = CND.Not Processed
    PAR.PFS_Process_Status = *ZERO;

    // PAR.PFS Create Date = JOB.*Job date
    PAR.PFS_Create_Date = JOB.*Job_date;

    // PAR.PFS Create Time = JOB.*Job time
    PAR.PFS_Create_Time = JOB.*Job_time;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg PFS Load Header   CH) TYPE(CHGOBJ) FILE(PPBACPP)           AC1732293;
  PARAMETER(PAR.PFS_Company_Number);
  PARAMETER(PAR.PFS_Load_ID);
  PARAMETER(PAR.PFS_Sched_Sequence_Num);
  PARAMETER(PAR.PFS_Carrier_Code);
  PARAMETER(PAR.PFS_Carrier_Name);
  PARAMETER(PAR.PFS_Export_Status);
  PARAMETER(PAR.PFS_Shipping_Line);
  PARAMETER(PAR.PFS_Shipping_Line_Name);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
  PARAMETER(PAR.PFS_Shipping_Line_City);
  PARAMETER(PAR.PFS_Shipping_Line_State);
  PARAMETER(PAR.PFS_Shipping_LIne_Zip);
  PARAMETER(PAR.PFS_Vessel_Name);
  PARAMETER(PAR.PFS_Voyage);
  PARAMETER(PAR.PFS_Discharge_Port);
  PARAMETER(PAR.PFS_Booking_Number);
  PARAMETER(PAR.PFS_Shipping_Method);
  PARAMETER(PAR.PFS_Load_Shag_Flag);
  PARAMETER(PAR.PFS_Load_Wash_Flag);
  PARAMETER(PAR.PFS_Load_Total_Stops);
  PARAMETER(PAR.PFS_Load_Total_Miles);
  PARAMETER(PAR.PFS_Reefer_Temp);
  PARAMETER(PAR.PFS_Reefer_Temp_Code);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Date);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Time);
  PARAMETER(PAR.PFS_Load_Deadline_Date);
  PARAMETER(PAR.PFS_Load_Deadline_Time);
  PARAMETER(PAR.PFS_Maximum_Load_Weight);
  PARAMETER(PAR.PFS_Federal_Tax_ID);
  PARAMETER(PAR.PFS_Estimated_Pallets);
  PARAMETER(PAR.PFS_Average_Pallet_Tare);
  PARAMETER(PAR.PFS_Predicted_Load_Wgt);
  PARAMETER(PAR.PFS_Load_Status);
  PARAMETER(PAR.PFS_Trailer_Id);
  PARAMETER(PAR.PFS_Sequence_No);
  PARAMETER(PAR.PFS_Load_Unused_Sts_1);
  PARAMETER(PAR.PFS_Load_Unused_Sts_2);
  PARAMETER(PAR.PFS_Load_Unused_Sts_3);
  PARAMETER(PAR.PFS_Load_Unused_Sts_4);
  PARAMETER(PAR.PFS_Load_Unused_Sts_5);
  PARAMETER(PAR.PFS_Load_Unused_Text_1);
  PARAMETER(PAR.PFS_Record_Status);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Change Stamp      IF) TYPE(EXCINTFUN)                      AC1732163;
   PARAMETER(DB1.PFS_Change_Date);
   PARAMETER(DB1.PFS_Change_Time);
   {
    //?Execute internal function

    // PAR.PFS Change Date = JOB.*Job date
    PAR.PFS_Change_Date = JOB.*Job_date;

    // PAR.PFS Change time = JOB.*Job time
    PAR.PFS_Change_Time = JOB.*Job_time;

   }

  }

 }

 ENDIF;

 //?** Create PFS Load header for other plant company USR Company 6
 CASE;

 // IF LCL.USR Company Number 6 is greater than zero
 IF LCL.USR_Company_Number_6 > *ZERO;

 // AND LCL.USR Company Number 6 NE DB1.Company Number
 AND LCL.USR_Company_Number_6 <> DB1.Company_Number;

 // WRK.Company Number = LCL.USR Company Number 6
 WRK.Company_Number = LCL.USR_Company_Number_6;

 //?Get Next PFS Sequence No         -- RMC 03/14/07
 DO;

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(WRK.Company_Number);
 PARAMETER('PFSSEQNO');
 PARAMETER(LCL.PFS_Sequence_No);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.PFS Sequence No. = LCL.PFS Sequence No. + CON.1
 LCL.PFS_Sequence_No = LCL.PFS_Sequence_No + 1;

 //?Increment if -0-
 CASE;

 // IF LCL.PFS Sequence No. is eq 0
 IF LCL.PFS_Sequence_No = *ZERO;

 // LCL.PFS Sequence No. = LCL.PFS Sequence No. + CON.1
 LCL.PFS_Sequence_No = LCL.PFS_Sequence_No + 1;

 ENDIF;

 // Call program Rtv Chg Comp Val Num   XF.
 CALL PROGRAM(Rtv Chg Comp Val Num   XF) ('PPW2XFR');
 PARAMETER(WRK.Company_Number);
 PARAMETER('PFSSEQNO');
 PARAMETER(LCL.PFS_Sequence_No);

 ENDDO;

 EXECUTE FUNCTION(Upd Load Header       RT) TYPE(RTVOBJ) FILE(PPBACPP)           AC1733062;
 PARAMETER(WRK.Company_Number);
 PARAMETER(PAR.PFS_Load_ID);
 PARAMETER(PAR.PFS_Sched_Sequence_Num);
 PARAMETER(PAR.PFS_Carrier_Code);
 PARAMETER(PAR.PFS_Carrier_Name);
 PARAMETER(PAR.PFS_Export_Status);
 PARAMETER(PAR.PFS_Shipping_Line);
 PARAMETER(PAR.PFS_Shipping_Line_Name);
 PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
 PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
 PARAMETER(PAR.PFS_Shipping_Line_City);
 PARAMETER(PAR.PFS_Shipping_Line_State);
 PARAMETER(PAR.PFS_Shipping_LIne_Zip);
 PARAMETER(PAR.PFS_Vessel_Name);
 PARAMETER(PAR.PFS_Voyage);
 PARAMETER(PAR.PFS_Discharge_Port);
 PARAMETER(PAR.PFS_Booking_Number);
 PARAMETER(PAR.PFS_Shipping_Method);
 PARAMETER(PAR.PFS_Load_Shag_Flag);
 PARAMETER(PAR.PFS_Load_Wash_Flag);
 PARAMETER(PAR.PFS_Load_Total_Stops);
 PARAMETER(PAR.PFS_Load_Total_Miles);
 PARAMETER(PAR.PFS_Reefer_Temp);
 PARAMETER(PAR.PFS_Reefer_Temp_Code);
 PARAMETER(PAR.PFS_Load_Sched_Delv_Date);
 PARAMETER(PAR.PFS_Load_Sched_Delv_Time);
 PARAMETER(PAR.PFS_Load_Deadline_Date);
 PARAMETER(PAR.PFS_Load_Deadline_Time);
 PARAMETER(PAR.PFS_Maximum_Load_Weight);
 PARAMETER(PAR.PFS_Federal_Tax_ID);
 PARAMETER(PAR.PFS_Estimated_Pallets);
 PARAMETER(PAR.PFS_Average_Pallet_Tare);
 PARAMETER(PAR.PFS_Predicted_Load_Wgt);
 PARAMETER(PAR.PFS_Load_Status);
 PARAMETER(PAR.PFS_Trailer_Id);
 PARAMETER(LCL.PFS_Sequence_No);
 PARAMETER(PAR.PFS_Load_Unused_Sts_1);
 PARAMETER(PAR.PFS_Load_Unused_Sts_2);
 PARAMETER(PAR.PFS_Load_Unused_Sts_3);
 PARAMETER(PAR.PFS_Load_Unused_Sts_4);
 PARAMETER(PAR.PFS_Load_Unused_Sts_5);
 PARAMETER(PAR.PFS_Load_Unused_Text_1);
 PARAMETER(PAR.PFS_Record_Status);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt PFS Load Header   CR) TYPE(CRTOBJ) FILE(PPBACPP)           AC1732292;
  PARAMETER(PAR.PFS_Company_Number);
  PARAMETER(PAR.PFS_Load_ID);
  PARAMETER(PAR.PFS_Sched_Sequence_Num);
  PARAMETER(PAR.PFS_Carrier_Code);
  PARAMETER(PAR.PFS_Carrier_Name);
  PARAMETER(PAR.PFS_Export_Status);
  PARAMETER(PAR.PFS_Shipping_Line);
  PARAMETER(PAR.PFS_Shipping_Line_Name);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
  PARAMETER(PAR.PFS_Shipping_Line_City);
  PARAMETER(PAR.PFS_Shipping_Line_State);
  PARAMETER(PAR.PFS_Shipping_LIne_Zip);
  PARAMETER(PAR.PFS_Vessel_Name);
  PARAMETER(PAR.PFS_Voyage);
  PARAMETER(PAR.PFS_Discharge_Port);
  PARAMETER(PAR.PFS_Booking_Number);
  PARAMETER(PAR.PFS_Shipping_Method);
  PARAMETER(PAR.PFS_Load_Shag_Flag);
  PARAMETER(PAR.PFS_Load_Wash_Flag);
  PARAMETER(PAR.PFS_Load_Total_Stops);
  PARAMETER(PAR.PFS_Load_Total_Miles);
  PARAMETER(PAR.PFS_Reefer_Temp);
  PARAMETER(PAR.PFS_Reefer_Temp_Code);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Date);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Time);
  PARAMETER(PAR.PFS_Load_Deadline_Date);
  PARAMETER(PAR.PFS_Load_Deadline_Time);
  PARAMETER(PAR.PFS_Maximum_Load_Weight);
  PARAMETER(PAR.PFS_Federal_Tax_ID);
  PARAMETER(PAR.PFS_Estimated_Pallets);
  PARAMETER(PAR.PFS_Average_Pallet_Tare);
  PARAMETER(PAR.PFS_Predicted_Load_Wgt);
  PARAMETER(PAR.PFS_Load_Status);
  PARAMETER(PAR.PFS_Trailer_Id);
  PARAMETER(PAR.PFS_Sequence_No);
  PARAMETER(PAR.PFS_Load_Unused_Sts_1);
  PARAMETER(PAR.PFS_Load_Unused_Sts_2);
  PARAMETER(PAR.PFS_Load_Unused_Sts_3);
  PARAMETER(PAR.PFS_Load_Unused_Sts_4);
  PARAMETER(PAR.PFS_Load_Unused_Sts_5);
  PARAMETER(PAR.PFS_Load_Unused_Text_1);
  PARAMETER(PAR.PFS_Record_Status);
  PARAMETER(PAR.PFS_Process_Status);
  PARAMETER(PAR.PFS_Error_Reason);
  PARAMETER(PAR.PFS_Create_Date);
  PARAMETER(PAR.PFS_Create_Time);
  PARAMETER(PAR.PFS_Change_Date);
  PARAMETER(PAR.PFS_Change_Time);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Create Stamp      IF) TYPE(EXCINTFUN)                      AC1732162;
   PARAMETER(DB1.PFS_Process_Status);
   PARAMETER(DB1.PFS_Create_Date);
   PARAMETER(DB1.PFS_Create_Time);
   {
    //?Execute internal function

    // PAR.PFS Process Status = CND.Not Processed
    PAR.PFS_Process_Status = *ZERO;

    // PAR.PFS Create Date = JOB.*Job date
    PAR.PFS_Create_Date = JOB.*Job_date;

    // PAR.PFS Create Time = JOB.*Job time
    PAR.PFS_Create_Time = JOB.*Job_time;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg PFS Load Header   CH) TYPE(CHGOBJ) FILE(PPBACPP)           AC1732293;
  PARAMETER(PAR.PFS_Company_Number);
  PARAMETER(PAR.PFS_Load_ID);
  PARAMETER(PAR.PFS_Sched_Sequence_Num);
  PARAMETER(PAR.PFS_Carrier_Code);
  PARAMETER(PAR.PFS_Carrier_Name);
  PARAMETER(PAR.PFS_Export_Status);
  PARAMETER(PAR.PFS_Shipping_Line);
  PARAMETER(PAR.PFS_Shipping_Line_Name);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
  PARAMETER(PAR.PFS_Shipping_Line_City);
  PARAMETER(PAR.PFS_Shipping_Line_State);
  PARAMETER(PAR.PFS_Shipping_LIne_Zip);
  PARAMETER(PAR.PFS_Vessel_Name);
  PARAMETER(PAR.PFS_Voyage);
  PARAMETER(PAR.PFS_Discharge_Port);
  PARAMETER(PAR.PFS_Booking_Number);
  PARAMETER(PAR.PFS_Shipping_Method);
  PARAMETER(PAR.PFS_Load_Shag_Flag);
  PARAMETER(PAR.PFS_Load_Wash_Flag);
  PARAMETER(PAR.PFS_Load_Total_Stops);
  PARAMETER(PAR.PFS_Load_Total_Miles);
  PARAMETER(PAR.PFS_Reefer_Temp);
  PARAMETER(PAR.PFS_Reefer_Temp_Code);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Date);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Time);
  PARAMETER(PAR.PFS_Load_Deadline_Date);
  PARAMETER(PAR.PFS_Load_Deadline_Time);
  PARAMETER(PAR.PFS_Maximum_Load_Weight);
  PARAMETER(PAR.PFS_Federal_Tax_ID);
  PARAMETER(PAR.PFS_Estimated_Pallets);
  PARAMETER(PAR.PFS_Average_Pallet_Tare);
  PARAMETER(PAR.PFS_Predicted_Load_Wgt);
  PARAMETER(PAR.PFS_Load_Status);
  PARAMETER(PAR.PFS_Trailer_Id);
  PARAMETER(PAR.PFS_Sequence_No);
  PARAMETER(PAR.PFS_Load_Unused_Sts_1);
  PARAMETER(PAR.PFS_Load_Unused_Sts_2);
  PARAMETER(PAR.PFS_Load_Unused_Sts_3);
  PARAMETER(PAR.PFS_Load_Unused_Sts_4);
  PARAMETER(PAR.PFS_Load_Unused_Sts_5);
  PARAMETER(PAR.PFS_Load_Unused_Text_1);
  PARAMETER(PAR.PFS_Record_Status);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Change Stamp      IF) TYPE(EXCINTFUN)                      AC1732163;
   PARAMETER(DB1.PFS_Change_Date);
   PARAMETER(DB1.PFS_Change_Time);
   {
    //?Execute internal function

    // PAR.PFS Change Date = JOB.*Job date
    PAR.PFS_Change_Date = JOB.*Job_date;

    // PAR.PFS Change time = JOB.*Job time
    PAR.PFS_Change_Time = JOB.*Job_time;

   }

  }

 }

 ENDIF;

 //?** Create PFS Load header for other plant company USR Company 7
 CASE;

 // IF LCL.USR Company Number 7 is greater than zero
 IF LCL.USR_Company_Number_7 > *ZERO;

 // AND LCL.USR Company Number 7 NE DB1.Company Number
 AND LCL.USR_Company_Number_7 <> DB1.Company_Number;

 // WRK.Company Number = LCL.USR Company Number 7
 WRK.Company_Number = LCL.USR_Company_Number_7;

 //?Get Next PFS Sequence No         -- RMC 03/14/07
 DO;

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(WRK.Company_Number);
 PARAMETER('PFSSEQNO');
 PARAMETER(LCL.PFS_Sequence_No);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.PFS Sequence No. = LCL.PFS Sequence No. + CON.1
 LCL.PFS_Sequence_No = LCL.PFS_Sequence_No + 1;

 //?Increment if -0-
 CASE;

 // IF LCL.PFS Sequence No. is eq 0
 IF LCL.PFS_Sequence_No = *ZERO;

 // LCL.PFS Sequence No. = LCL.PFS Sequence No. + CON.1
 LCL.PFS_Sequence_No = LCL.PFS_Sequence_No + 1;

 ENDIF;

 // Call program Rtv Chg Comp Val Num   XF.
 CALL PROGRAM(Rtv Chg Comp Val Num   XF) ('PPW2XFR');
 PARAMETER(WRK.Company_Number);
 PARAMETER('PFSSEQNO');
 PARAMETER(LCL.PFS_Sequence_No);

 ENDDO;

 EXECUTE FUNCTION(Upd Load Header       RT) TYPE(RTVOBJ) FILE(PPBACPP)           AC1733062;
 PARAMETER(WRK.Company_Number);
 PARAMETER(PAR.PFS_Load_ID);
 PARAMETER(PAR.PFS_Sched_Sequence_Num);
 PARAMETER(PAR.PFS_Carrier_Code);
 PARAMETER(PAR.PFS_Carrier_Name);
 PARAMETER(PAR.PFS_Export_Status);
 PARAMETER(PAR.PFS_Shipping_Line);
 PARAMETER(PAR.PFS_Shipping_Line_Name);
 PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
 PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
 PARAMETER(PAR.PFS_Shipping_Line_City);
 PARAMETER(PAR.PFS_Shipping_Line_State);
 PARAMETER(PAR.PFS_Shipping_LIne_Zip);
 PARAMETER(PAR.PFS_Vessel_Name);
 PARAMETER(PAR.PFS_Voyage);
 PARAMETER(PAR.PFS_Discharge_Port);
 PARAMETER(PAR.PFS_Booking_Number);
 PARAMETER(PAR.PFS_Shipping_Method);
 PARAMETER(PAR.PFS_Load_Shag_Flag);
 PARAMETER(PAR.PFS_Load_Wash_Flag);
 PARAMETER(PAR.PFS_Load_Total_Stops);
 PARAMETER(PAR.PFS_Load_Total_Miles);
 PARAMETER(PAR.PFS_Reefer_Temp);
 PARAMETER(PAR.PFS_Reefer_Temp_Code);
 PARAMETER(PAR.PFS_Load_Sched_Delv_Date);
 PARAMETER(PAR.PFS_Load_Sched_Delv_Time);
 PARAMETER(PAR.PFS_Load_Deadline_Date);
 PARAMETER(PAR.PFS_Load_Deadline_Time);
 PARAMETER(PAR.PFS_Maximum_Load_Weight);
 PARAMETER(PAR.PFS_Federal_Tax_ID);
 PARAMETER(PAR.PFS_Estimated_Pallets);
 PARAMETER(PAR.PFS_Average_Pallet_Tare);
 PARAMETER(PAR.PFS_Predicted_Load_Wgt);
 PARAMETER(PAR.PFS_Load_Status);
 PARAMETER(PAR.PFS_Trailer_Id);
 PARAMETER(LCL.PFS_Sequence_No);
 PARAMETER(PAR.PFS_Load_Unused_Sts_1);
 PARAMETER(PAR.PFS_Load_Unused_Sts_2);
 PARAMETER(PAR.PFS_Load_Unused_Sts_3);
 PARAMETER(PAR.PFS_Load_Unused_Sts_4);
 PARAMETER(PAR.PFS_Load_Unused_Sts_5);
 PARAMETER(PAR.PFS_Load_Unused_Text_1);
 PARAMETER(PAR.PFS_Record_Status);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt PFS Load Header   CR) TYPE(CRTOBJ) FILE(PPBACPP)           AC1732292;
  PARAMETER(PAR.PFS_Company_Number);
  PARAMETER(PAR.PFS_Load_ID);
  PARAMETER(PAR.PFS_Sched_Sequence_Num);
  PARAMETER(PAR.PFS_Carrier_Code);
  PARAMETER(PAR.PFS_Carrier_Name);
  PARAMETER(PAR.PFS_Export_Status);
  PARAMETER(PAR.PFS_Shipping_Line);
  PARAMETER(PAR.PFS_Shipping_Line_Name);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
  PARAMETER(PAR.PFS_Shipping_Line_City);
  PARAMETER(PAR.PFS_Shipping_Line_State);
  PARAMETER(PAR.PFS_Shipping_LIne_Zip);
  PARAMETER(PAR.PFS_Vessel_Name);
  PARAMETER(PAR.PFS_Voyage);
  PARAMETER(PAR.PFS_Discharge_Port);
  PARAMETER(PAR.PFS_Booking_Number);
  PARAMETER(PAR.PFS_Shipping_Method);
  PARAMETER(PAR.PFS_Load_Shag_Flag);
  PARAMETER(PAR.PFS_Load_Wash_Flag);
  PARAMETER(PAR.PFS_Load_Total_Stops);
  PARAMETER(PAR.PFS_Load_Total_Miles);
  PARAMETER(PAR.PFS_Reefer_Temp);
  PARAMETER(PAR.PFS_Reefer_Temp_Code);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Date);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Time);
  PARAMETER(PAR.PFS_Load_Deadline_Date);
  PARAMETER(PAR.PFS_Load_Deadline_Time);
  PARAMETER(PAR.PFS_Maximum_Load_Weight);
  PARAMETER(PAR.PFS_Federal_Tax_ID);
  PARAMETER(PAR.PFS_Estimated_Pallets);
  PARAMETER(PAR.PFS_Average_Pallet_Tare);
  PARAMETER(PAR.PFS_Predicted_Load_Wgt);
  PARAMETER(PAR.PFS_Load_Status);
  PARAMETER(PAR.PFS_Trailer_Id);
  PARAMETER(PAR.PFS_Sequence_No);
  PARAMETER(PAR.PFS_Load_Unused_Sts_1);
  PARAMETER(PAR.PFS_Load_Unused_Sts_2);
  PARAMETER(PAR.PFS_Load_Unused_Sts_3);
  PARAMETER(PAR.PFS_Load_Unused_Sts_4);
  PARAMETER(PAR.PFS_Load_Unused_Sts_5);
  PARAMETER(PAR.PFS_Load_Unused_Text_1);
  PARAMETER(PAR.PFS_Record_Status);
  PARAMETER(PAR.PFS_Process_Status);
  PARAMETER(PAR.PFS_Error_Reason);
  PARAMETER(PAR.PFS_Create_Date);
  PARAMETER(PAR.PFS_Create_Time);
  PARAMETER(PAR.PFS_Change_Date);
  PARAMETER(PAR.PFS_Change_Time);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Create Stamp      IF) TYPE(EXCINTFUN)                      AC1732162;
   PARAMETER(DB1.PFS_Process_Status);
   PARAMETER(DB1.PFS_Create_Date);
   PARAMETER(DB1.PFS_Create_Time);
   {
    //?Execute internal function

    // PAR.PFS Process Status = CND.Not Processed
    PAR.PFS_Process_Status = *ZERO;

    // PAR.PFS Create Date = JOB.*Job date
    PAR.PFS_Create_Date = JOB.*Job_date;

    // PAR.PFS Create Time = JOB.*Job time
    PAR.PFS_Create_Time = JOB.*Job_time;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg PFS Load Header   CH) TYPE(CHGOBJ) FILE(PPBACPP)           AC1732293;
  PARAMETER(PAR.PFS_Company_Number);
  PARAMETER(PAR.PFS_Load_ID);
  PARAMETER(PAR.PFS_Sched_Sequence_Num);
  PARAMETER(PAR.PFS_Carrier_Code);
  PARAMETER(PAR.PFS_Carrier_Name);
  PARAMETER(PAR.PFS_Export_Status);
  PARAMETER(PAR.PFS_Shipping_Line);
  PARAMETER(PAR.PFS_Shipping_Line_Name);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
  PARAMETER(PAR.PFS_Shipping_Line_City);
  PARAMETER(PAR.PFS_Shipping_Line_State);
  PARAMETER(PAR.PFS_Shipping_LIne_Zip);
  PARAMETER(PAR.PFS_Vessel_Name);
  PARAMETER(PAR.PFS_Voyage);
  PARAMETER(PAR.PFS_Discharge_Port);
  PARAMETER(PAR.PFS_Booking_Number);
  PARAMETER(PAR.PFS_Shipping_Method);
  PARAMETER(PAR.PFS_Load_Shag_Flag);
  PARAMETER(PAR.PFS_Load_Wash_Flag);
  PARAMETER(PAR.PFS_Load_Total_Stops);
  PARAMETER(PAR.PFS_Load_Total_Miles);
  PARAMETER(PAR.PFS_Reefer_Temp);
  PARAMETER(PAR.PFS_Reefer_Temp_Code);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Date);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Time);
  PARAMETER(PAR.PFS_Load_Deadline_Date);
  PARAMETER(PAR.PFS_Load_Deadline_Time);
  PARAMETER(PAR.PFS_Maximum_Load_Weight);
  PARAMETER(PAR.PFS_Federal_Tax_ID);
  PARAMETER(PAR.PFS_Estimated_Pallets);
  PARAMETER(PAR.PFS_Average_Pallet_Tare);
  PARAMETER(PAR.PFS_Predicted_Load_Wgt);
  PARAMETER(PAR.PFS_Load_Status);
  PARAMETER(PAR.PFS_Trailer_Id);
  PARAMETER(PAR.PFS_Sequence_No);
  PARAMETER(PAR.PFS_Load_Unused_Sts_1);
  PARAMETER(PAR.PFS_Load_Unused_Sts_2);
  PARAMETER(PAR.PFS_Load_Unused_Sts_3);
  PARAMETER(PAR.PFS_Load_Unused_Sts_4);
  PARAMETER(PAR.PFS_Load_Unused_Sts_5);
  PARAMETER(PAR.PFS_Load_Unused_Text_1);
  PARAMETER(PAR.PFS_Record_Status);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Change Stamp      IF) TYPE(EXCINTFUN)                      AC1732163;
   PARAMETER(DB1.PFS_Change_Date);
   PARAMETER(DB1.PFS_Change_Time);
   {
    //?Execute internal function

    // PAR.PFS Change Date = JOB.*Job date
    PAR.PFS_Change_Date = JOB.*Job_date;

    // PAR.PFS Change time = JOB.*Job time
    PAR.PFS_Change_Time = JOB.*Job_time;

   }

  }

 }

 ENDIF;

 //?** Create PFS Load header for other plant company USR Company 8
 CASE;

 // IF LCL.USR Company Number 8 is greater than zero
 IF LCL.USR_Company_Number_8 > *ZERO;

 // AND LCL.USR Company Number 8 NE DB1.Company Number
 AND LCL.USR_Company_Number_8 <> DB1.Company_Number;

 // WRK.Company Number = LCL.USR Company Number 8
 WRK.Company_Number = LCL.USR_Company_Number_8;

 //?Get Next PFS Sequence No         -- RMC 03/14/07
 DO;

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(WRK.Company_Number);
 PARAMETER('PFSSEQNO');
 PARAMETER(LCL.PFS_Sequence_No);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.PFS Sequence No. = LCL.PFS Sequence No. + CON.1
 LCL.PFS_Sequence_No = LCL.PFS_Sequence_No + 1;

 //?Increment if -0-
 CASE;

 // IF LCL.PFS Sequence No. is eq 0
 IF LCL.PFS_Sequence_No = *ZERO;

 // LCL.PFS Sequence No. = LCL.PFS Sequence No. + CON.1
 LCL.PFS_Sequence_No = LCL.PFS_Sequence_No + 1;

 ENDIF;

 // Call program Rtv Chg Comp Val Num   XF.
 CALL PROGRAM(Rtv Chg Comp Val Num   XF) ('PPW2XFR');
 PARAMETER(WRK.Company_Number);
 PARAMETER('PFSSEQNO');
 PARAMETER(LCL.PFS_Sequence_No);

 ENDDO;

 EXECUTE FUNCTION(Upd Load Header       RT) TYPE(RTVOBJ) FILE(PPBACPP)           AC1733062;
 PARAMETER(WRK.Company_Number);
 PARAMETER(PAR.PFS_Load_ID);
 PARAMETER(PAR.PFS_Sched_Sequence_Num);
 PARAMETER(PAR.PFS_Carrier_Code);
 PARAMETER(PAR.PFS_Carrier_Name);
 PARAMETER(PAR.PFS_Export_Status);
 PARAMETER(PAR.PFS_Shipping_Line);
 PARAMETER(PAR.PFS_Shipping_Line_Name);
 PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
 PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
 PARAMETER(PAR.PFS_Shipping_Line_City);
 PARAMETER(PAR.PFS_Shipping_Line_State);
 PARAMETER(PAR.PFS_Shipping_LIne_Zip);
 PARAMETER(PAR.PFS_Vessel_Name);
 PARAMETER(PAR.PFS_Voyage);
 PARAMETER(PAR.PFS_Discharge_Port);
 PARAMETER(PAR.PFS_Booking_Number);
 PARAMETER(PAR.PFS_Shipping_Method);
 PARAMETER(PAR.PFS_Load_Shag_Flag);
 PARAMETER(PAR.PFS_Load_Wash_Flag);
 PARAMETER(PAR.PFS_Load_Total_Stops);
 PARAMETER(PAR.PFS_Load_Total_Miles);
 PARAMETER(PAR.PFS_Reefer_Temp);
 PARAMETER(PAR.PFS_Reefer_Temp_Code);
 PARAMETER(PAR.PFS_Load_Sched_Delv_Date);
 PARAMETER(PAR.PFS_Load_Sched_Delv_Time);
 PARAMETER(PAR.PFS_Load_Deadline_Date);
 PARAMETER(PAR.PFS_Load_Deadline_Time);
 PARAMETER(PAR.PFS_Maximum_Load_Weight);
 PARAMETER(PAR.PFS_Federal_Tax_ID);
 PARAMETER(PAR.PFS_Estimated_Pallets);
 PARAMETER(PAR.PFS_Average_Pallet_Tare);
 PARAMETER(PAR.PFS_Predicted_Load_Wgt);
 PARAMETER(PAR.PFS_Load_Status);
 PARAMETER(PAR.PFS_Trailer_Id);
 PARAMETER(LCL.PFS_Sequence_No);
 PARAMETER(PAR.PFS_Load_Unused_Sts_1);
 PARAMETER(PAR.PFS_Load_Unused_Sts_2);
 PARAMETER(PAR.PFS_Load_Unused_Sts_3);
 PARAMETER(PAR.PFS_Load_Unused_Sts_4);
 PARAMETER(PAR.PFS_Load_Unused_Sts_5);
 PARAMETER(PAR.PFS_Load_Unused_Text_1);
 PARAMETER(PAR.PFS_Record_Status);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt PFS Load Header   CR) TYPE(CRTOBJ) FILE(PPBACPP)           AC1732292;
  PARAMETER(PAR.PFS_Company_Number);
  PARAMETER(PAR.PFS_Load_ID);
  PARAMETER(PAR.PFS_Sched_Sequence_Num);
  PARAMETER(PAR.PFS_Carrier_Code);
  PARAMETER(PAR.PFS_Carrier_Name);
  PARAMETER(PAR.PFS_Export_Status);
  PARAMETER(PAR.PFS_Shipping_Line);
  PARAMETER(PAR.PFS_Shipping_Line_Name);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
  PARAMETER(PAR.PFS_Shipping_Line_City);
  PARAMETER(PAR.PFS_Shipping_Line_State);
  PARAMETER(PAR.PFS_Shipping_LIne_Zip);
  PARAMETER(PAR.PFS_Vessel_Name);
  PARAMETER(PAR.PFS_Voyage);
  PARAMETER(PAR.PFS_Discharge_Port);
  PARAMETER(PAR.PFS_Booking_Number);
  PARAMETER(PAR.PFS_Shipping_Method);
  PARAMETER(PAR.PFS_Load_Shag_Flag);
  PARAMETER(PAR.PFS_Load_Wash_Flag);
  PARAMETER(PAR.PFS_Load_Total_Stops);
  PARAMETER(PAR.PFS_Load_Total_Miles);
  PARAMETER(PAR.PFS_Reefer_Temp);
  PARAMETER(PAR.PFS_Reefer_Temp_Code);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Date);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Time);
  PARAMETER(PAR.PFS_Load_Deadline_Date);
  PARAMETER(PAR.PFS_Load_Deadline_Time);
  PARAMETER(PAR.PFS_Maximum_Load_Weight);
  PARAMETER(PAR.PFS_Federal_Tax_ID);
  PARAMETER(PAR.PFS_Estimated_Pallets);
  PARAMETER(PAR.PFS_Average_Pallet_Tare);
  PARAMETER(PAR.PFS_Predicted_Load_Wgt);
  PARAMETER(PAR.PFS_Load_Status);
  PARAMETER(PAR.PFS_Trailer_Id);
  PARAMETER(PAR.PFS_Sequence_No);
  PARAMETER(PAR.PFS_Load_Unused_Sts_1);
  PARAMETER(PAR.PFS_Load_Unused_Sts_2);
  PARAMETER(PAR.PFS_Load_Unused_Sts_3);
  PARAMETER(PAR.PFS_Load_Unused_Sts_4);
  PARAMETER(PAR.PFS_Load_Unused_Sts_5);
  PARAMETER(PAR.PFS_Load_Unused_Text_1);
  PARAMETER(PAR.PFS_Record_Status);
  PARAMETER(PAR.PFS_Process_Status);
  PARAMETER(PAR.PFS_Error_Reason);
  PARAMETER(PAR.PFS_Create_Date);
  PARAMETER(PAR.PFS_Create_Time);
  PARAMETER(PAR.PFS_Change_Date);
  PARAMETER(PAR.PFS_Change_Time);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Create Stamp      IF) TYPE(EXCINTFUN)                      AC1732162;
   PARAMETER(DB1.PFS_Process_Status);
   PARAMETER(DB1.PFS_Create_Date);
   PARAMETER(DB1.PFS_Create_Time);
   {
    //?Execute internal function

    // PAR.PFS Process Status = CND.Not Processed
    PAR.PFS_Process_Status = *ZERO;

    // PAR.PFS Create Date = JOB.*Job date
    PAR.PFS_Create_Date = JOB.*Job_date;

    // PAR.PFS Create Time = JOB.*Job time
    PAR.PFS_Create_Time = JOB.*Job_time;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg PFS Load Header   CH) TYPE(CHGOBJ) FILE(PPBACPP)           AC1732293;
  PARAMETER(PAR.PFS_Company_Number);
  PARAMETER(PAR.PFS_Load_ID);
  PARAMETER(PAR.PFS_Sched_Sequence_Num);
  PARAMETER(PAR.PFS_Carrier_Code);
  PARAMETER(PAR.PFS_Carrier_Name);
  PARAMETER(PAR.PFS_Export_Status);
  PARAMETER(PAR.PFS_Shipping_Line);
  PARAMETER(PAR.PFS_Shipping_Line_Name);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
  PARAMETER(PAR.PFS_Shipping_Line_City);
  PARAMETER(PAR.PFS_Shipping_Line_State);
  PARAMETER(PAR.PFS_Shipping_LIne_Zip);
  PARAMETER(PAR.PFS_Vessel_Name);
  PARAMETER(PAR.PFS_Voyage);
  PARAMETER(PAR.PFS_Discharge_Port);
  PARAMETER(PAR.PFS_Booking_Number);
  PARAMETER(PAR.PFS_Shipping_Method);
  PARAMETER(PAR.PFS_Load_Shag_Flag);
  PARAMETER(PAR.PFS_Load_Wash_Flag);
  PARAMETER(PAR.PFS_Load_Total_Stops);
  PARAMETER(PAR.PFS_Load_Total_Miles);
  PARAMETER(PAR.PFS_Reefer_Temp);
  PARAMETER(PAR.PFS_Reefer_Temp_Code);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Date);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Time);
  PARAMETER(PAR.PFS_Load_Deadline_Date);
  PARAMETER(PAR.PFS_Load_Deadline_Time);
  PARAMETER(PAR.PFS_Maximum_Load_Weight);
  PARAMETER(PAR.PFS_Federal_Tax_ID);
  PARAMETER(PAR.PFS_Estimated_Pallets);
  PARAMETER(PAR.PFS_Average_Pallet_Tare);
  PARAMETER(PAR.PFS_Predicted_Load_Wgt);
  PARAMETER(PAR.PFS_Load_Status);
  PARAMETER(PAR.PFS_Trailer_Id);
  PARAMETER(PAR.PFS_Sequence_No);
  PARAMETER(PAR.PFS_Load_Unused_Sts_1);
  PARAMETER(PAR.PFS_Load_Unused_Sts_2);
  PARAMETER(PAR.PFS_Load_Unused_Sts_3);
  PARAMETER(PAR.PFS_Load_Unused_Sts_4);
  PARAMETER(PAR.PFS_Load_Unused_Sts_5);
  PARAMETER(PAR.PFS_Load_Unused_Text_1);
  PARAMETER(PAR.PFS_Record_Status);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Change Stamp      IF) TYPE(EXCINTFUN)                      AC1732163;
   PARAMETER(DB1.PFS_Change_Date);
   PARAMETER(DB1.PFS_Change_Time);
   {
    //?Execute internal function

    // PAR.PFS Change Date = JOB.*Job date
    PAR.PFS_Change_Date = JOB.*Job_date;

    // PAR.PFS Change time = JOB.*Job time
    PAR.PFS_Change_Time = JOB.*Job_time;

   }

  }

 }

 ENDIF;

 //?** Create PFS Load header for other plant company USR Company 9
 CASE;

 // IF LCL.USR Company Number 9 is greater than zero
 IF LCL.USR_Company_Number_9 > *ZERO;

 // AND LCL.USR Company Number 9 NE DB1.Company Number
 AND LCL.USR_Company_Number_9 <> DB1.Company_Number;

 // WRK.Company Number = LCL.USR Company Number 9
 WRK.Company_Number = LCL.USR_Company_Number_9;

 //?Get Next PFS Sequence No         -- RMC 03/14/07
 DO;

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(WRK.Company_Number);
 PARAMETER('PFSSEQNO');
 PARAMETER(LCL.PFS_Sequence_No);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.PFS Sequence No. = LCL.PFS Sequence No. + CON.1
 LCL.PFS_Sequence_No = LCL.PFS_Sequence_No + 1;

 //?Increment if -0-
 CASE;

 // IF LCL.PFS Sequence No. is eq 0
 IF LCL.PFS_Sequence_No = *ZERO;

 // LCL.PFS Sequence No. = LCL.PFS Sequence No. + CON.1
 LCL.PFS_Sequence_No = LCL.PFS_Sequence_No + 1;

 ENDIF;

 // Call program Rtv Chg Comp Val Num   XF.
 CALL PROGRAM(Rtv Chg Comp Val Num   XF) ('PPW2XFR');
 PARAMETER(WRK.Company_Number);
 PARAMETER('PFSSEQNO');
 PARAMETER(LCL.PFS_Sequence_No);

 ENDDO;

 EXECUTE FUNCTION(Upd Load Header       RT) TYPE(RTVOBJ) FILE(PPBACPP)           AC1733062;
 PARAMETER(WRK.Company_Number);
 PARAMETER(PAR.PFS_Load_ID);
 PARAMETER(PAR.PFS_Sched_Sequence_Num);
 PARAMETER(PAR.PFS_Carrier_Code);
 PARAMETER(PAR.PFS_Carrier_Name);
 PARAMETER(PAR.PFS_Export_Status);
 PARAMETER(PAR.PFS_Shipping_Line);
 PARAMETER(PAR.PFS_Shipping_Line_Name);
 PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
 PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
 PARAMETER(PAR.PFS_Shipping_Line_City);
 PARAMETER(PAR.PFS_Shipping_Line_State);
 PARAMETER(PAR.PFS_Shipping_LIne_Zip);
 PARAMETER(PAR.PFS_Vessel_Name);
 PARAMETER(PAR.PFS_Voyage);
 PARAMETER(PAR.PFS_Discharge_Port);
 PARAMETER(PAR.PFS_Booking_Number);
 PARAMETER(PAR.PFS_Shipping_Method);
 PARAMETER(PAR.PFS_Load_Shag_Flag);
 PARAMETER(PAR.PFS_Load_Wash_Flag);
 PARAMETER(PAR.PFS_Load_Total_Stops);
 PARAMETER(PAR.PFS_Load_Total_Miles);
 PARAMETER(PAR.PFS_Reefer_Temp);
 PARAMETER(PAR.PFS_Reefer_Temp_Code);
 PARAMETER(PAR.PFS_Load_Sched_Delv_Date);
 PARAMETER(PAR.PFS_Load_Sched_Delv_Time);
 PARAMETER(PAR.PFS_Load_Deadline_Date);
 PARAMETER(PAR.PFS_Load_Deadline_Time);
 PARAMETER(PAR.PFS_Maximum_Load_Weight);
 PARAMETER(PAR.PFS_Federal_Tax_ID);
 PARAMETER(PAR.PFS_Estimated_Pallets);
 PARAMETER(PAR.PFS_Average_Pallet_Tare);
 PARAMETER(PAR.PFS_Predicted_Load_Wgt);
 PARAMETER(PAR.PFS_Load_Status);
 PARAMETER(PAR.PFS_Trailer_Id);
 PARAMETER(LCL.PFS_Sequence_No);
 PARAMETER(PAR.PFS_Load_Unused_Sts_1);
 PARAMETER(PAR.PFS_Load_Unused_Sts_2);
 PARAMETER(PAR.PFS_Load_Unused_Sts_3);
 PARAMETER(PAR.PFS_Load_Unused_Sts_4);
 PARAMETER(PAR.PFS_Load_Unused_Sts_5);
 PARAMETER(PAR.PFS_Load_Unused_Text_1);
 PARAMETER(PAR.PFS_Record_Status);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt PFS Load Header   CR) TYPE(CRTOBJ) FILE(PPBACPP)           AC1732292;
  PARAMETER(PAR.PFS_Company_Number);
  PARAMETER(PAR.PFS_Load_ID);
  PARAMETER(PAR.PFS_Sched_Sequence_Num);
  PARAMETER(PAR.PFS_Carrier_Code);
  PARAMETER(PAR.PFS_Carrier_Name);
  PARAMETER(PAR.PFS_Export_Status);
  PARAMETER(PAR.PFS_Shipping_Line);
  PARAMETER(PAR.PFS_Shipping_Line_Name);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
  PARAMETER(PAR.PFS_Shipping_Line_City);
  PARAMETER(PAR.PFS_Shipping_Line_State);
  PARAMETER(PAR.PFS_Shipping_LIne_Zip);
  PARAMETER(PAR.PFS_Vessel_Name);
  PARAMETER(PAR.PFS_Voyage);
  PARAMETER(PAR.PFS_Discharge_Port);
  PARAMETER(PAR.PFS_Booking_Number);
  PARAMETER(PAR.PFS_Shipping_Method);
  PARAMETER(PAR.PFS_Load_Shag_Flag);
  PARAMETER(PAR.PFS_Load_Wash_Flag);
  PARAMETER(PAR.PFS_Load_Total_Stops);
  PARAMETER(PAR.PFS_Load_Total_Miles);
  PARAMETER(PAR.PFS_Reefer_Temp);
  PARAMETER(PAR.PFS_Reefer_Temp_Code);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Date);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Time);
  PARAMETER(PAR.PFS_Load_Deadline_Date);
  PARAMETER(PAR.PFS_Load_Deadline_Time);
  PARAMETER(PAR.PFS_Maximum_Load_Weight);
  PARAMETER(PAR.PFS_Federal_Tax_ID);
  PARAMETER(PAR.PFS_Estimated_Pallets);
  PARAMETER(PAR.PFS_Average_Pallet_Tare);
  PARAMETER(PAR.PFS_Predicted_Load_Wgt);
  PARAMETER(PAR.PFS_Load_Status);
  PARAMETER(PAR.PFS_Trailer_Id);
  PARAMETER(PAR.PFS_Sequence_No);
  PARAMETER(PAR.PFS_Load_Unused_Sts_1);
  PARAMETER(PAR.PFS_Load_Unused_Sts_2);
  PARAMETER(PAR.PFS_Load_Unused_Sts_3);
  PARAMETER(PAR.PFS_Load_Unused_Sts_4);
  PARAMETER(PAR.PFS_Load_Unused_Sts_5);
  PARAMETER(PAR.PFS_Load_Unused_Text_1);
  PARAMETER(PAR.PFS_Record_Status);
  PARAMETER(PAR.PFS_Process_Status);
  PARAMETER(PAR.PFS_Error_Reason);
  PARAMETER(PAR.PFS_Create_Date);
  PARAMETER(PAR.PFS_Create_Time);
  PARAMETER(PAR.PFS_Change_Date);
  PARAMETER(PAR.PFS_Change_Time);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Create Stamp      IF) TYPE(EXCINTFUN)                      AC1732162;
   PARAMETER(DB1.PFS_Process_Status);
   PARAMETER(DB1.PFS_Create_Date);
   PARAMETER(DB1.PFS_Create_Time);
   {
    //?Execute internal function

    // PAR.PFS Process Status = CND.Not Processed
    PAR.PFS_Process_Status = *ZERO;

    // PAR.PFS Create Date = JOB.*Job date
    PAR.PFS_Create_Date = JOB.*Job_date;

    // PAR.PFS Create Time = JOB.*Job time
    PAR.PFS_Create_Time = JOB.*Job_time;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg PFS Load Header   CH) TYPE(CHGOBJ) FILE(PPBACPP)           AC1732293;
  PARAMETER(PAR.PFS_Company_Number);
  PARAMETER(PAR.PFS_Load_ID);
  PARAMETER(PAR.PFS_Sched_Sequence_Num);
  PARAMETER(PAR.PFS_Carrier_Code);
  PARAMETER(PAR.PFS_Carrier_Name);
  PARAMETER(PAR.PFS_Export_Status);
  PARAMETER(PAR.PFS_Shipping_Line);
  PARAMETER(PAR.PFS_Shipping_Line_Name);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
  PARAMETER(PAR.PFS_Shipping_Line_City);
  PARAMETER(PAR.PFS_Shipping_Line_State);
  PARAMETER(PAR.PFS_Shipping_LIne_Zip);
  PARAMETER(PAR.PFS_Vessel_Name);
  PARAMETER(PAR.PFS_Voyage);
  PARAMETER(PAR.PFS_Discharge_Port);
  PARAMETER(PAR.PFS_Booking_Number);
  PARAMETER(PAR.PFS_Shipping_Method);
  PARAMETER(PAR.PFS_Load_Shag_Flag);
  PARAMETER(PAR.PFS_Load_Wash_Flag);
  PARAMETER(PAR.PFS_Load_Total_Stops);
  PARAMETER(PAR.PFS_Load_Total_Miles);
  PARAMETER(PAR.PFS_Reefer_Temp);
  PARAMETER(PAR.PFS_Reefer_Temp_Code);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Date);
  PARAMETER(PAR.PFS_Load_Sched_Delv_Time);
  PARAMETER(PAR.PFS_Load_Deadline_Date);
  PARAMETER(PAR.PFS_Load_Deadline_Time);
  PARAMETER(PAR.PFS_Maximum_Load_Weight);
  PARAMETER(PAR.PFS_Federal_Tax_ID);
  PARAMETER(PAR.PFS_Estimated_Pallets);
  PARAMETER(PAR.PFS_Average_Pallet_Tare);
  PARAMETER(PAR.PFS_Predicted_Load_Wgt);
  PARAMETER(PAR.PFS_Load_Status);
  PARAMETER(PAR.PFS_Trailer_Id);
  PARAMETER(PAR.PFS_Sequence_No);
  PARAMETER(PAR.PFS_Load_Unused_Sts_1);
  PARAMETER(PAR.PFS_Load_Unused_Sts_2);
  PARAMETER(PAR.PFS_Load_Unused_Sts_3);
  PARAMETER(PAR.PFS_Load_Unused_Sts_4);
  PARAMETER(PAR.PFS_Load_Unused_Sts_5);
  PARAMETER(PAR.PFS_Load_Unused_Text_1);
  PARAMETER(PAR.PFS_Record_Status);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Change Stamp      IF) TYPE(EXCINTFUN)                      AC1732163;
   PARAMETER(DB1.PFS_Change_Date);
   PARAMETER(DB1.PFS_Change_Time);
   {
    //?Execute internal function

    // PAR.PFS Change Date = JOB.*Job date
    PAR.PFS_Change_Date = JOB.*Job_date;

    // PAR.PFS Change time = JOB.*Job time
    PAR.PFS_Change_Time = JOB.*Job_time;

   }

  }

 }

 ENDIF;

 ENDIF;

 ENDDO;

 ENDIF;

}


ENDIF;

ENDIF;

