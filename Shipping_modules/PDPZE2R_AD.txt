// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDPZE2R
// ?Date: 14.08.2025 Time: 03:35:44
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?R16637 DN 09/22/20-Get 'Live with PHIS' Flag on Doc Type 'A' Only.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Live with PHIS    RT) TYPE(RTVOBJ) FILE(PDMMREP)           AC2160999;
PARAMETER(PAR.Company_Number);
PARAMETER('A');
PARAMETER(PAR.Country_Code);
PARAMETER(LCL.ED_Live_with_PHIS);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?USER: Initialize detail screen (existing record)

// LCL.MPC Number = DTL.ED Export Certificate Nbr
LCL.MPC_Number = DTL.ED_Export_Certificate_Nbr;

CASE;

// IF DB1.ED Total Gross Weight lbs is EQ Zero
IF DB1.ED_Total_Gross_Weight_lbs = 0;

// DTL.ED Total Gross Weight lbs = DB1.ED Total Gross Weight MT * CON.2204.6 *
DTL.ED_Total_Gross_Weight_lbs = DB1.ED_Total_Gross_Weight_MT * 2204.6;

ENDIF;

CASE;

// IF DTL.ED Total Package UOM EQ WRK.Blank for 4           USR
IF DTL.ED_Total_Package_UOM = WRK.Blank_for_4_USR;

EXECUTE FUNCTION(RTV UM/Whs Code        RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1429488;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(LCL.Order_Sequence_Number);
PARAMETER(*ZERO);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(DTL.ED_Total_Package_UOM);
{
 //?USER: Initialize routine

 // WRK.First Time Flag = CND.Yes
 WRK.First_Time_Flag = 'Y';

 // LCL.Boxes Total Quantity = CON.*ZERO
 LCL.Boxes_Total_Quantity = *ZERO;

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 //?PF3280 -- add "Cases" to the case-stmt
 // PAR.Warehouse Code = DB1.Warehouse Code
 PAR.Warehouse_Code = DB1.Warehouse_Code;

 CASE;

 // IF DB1.U/M - Ordered is Combos
 IF DB1.U_M_Ordered = 'CB';

 // OR DB1.U/M - Ordered is EQ Boxes
 OR DB1.U_M_Ordered = 'BX';

 // OR DB1.U/M - Ordered is Mixed
 OR DB1.U_M_Ordered = 'MX';

 // OR DB1.U/M - Ordered is Cases
 OR DB1.U_M_Ordered = 'CS';

 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Sum for later check
 CASE;

 // IF DB1.U/M - Ordered is EQ Boxes
 IF DB1.U_M_Ordered = 'BX';

 // LCL.Boxes Total Quantity = LCL.Boxes Total Quantity + DB1.Quantity Ordered
 LCL.Boxes_Total_Quantity = LCL.Boxes_Total_Quantity + DB1.Quantity_Ordered;

 ENDIF;

 CASE;

 // IF PAR.USR Unit of Measure is *Blank
 IF PAR.USR_Unit_of_Measure = *BLANK;

 // PAR.USR Unit of Measure = DB1.U/M - Ordered
 PAR.USR_Unit_of_Measure = DB1.U_M_Ordered;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.U/M - Ordered EQ PAR.USR Unit of Measure
 IF DB1.U_M_Ordered = PAR.USR_Unit_of_Measure;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.U/M - Ordered = CND.Mixed
 WRK.U_M_Ordered = 'MX';

 // PAR.USR Unit of Measure = WRK.U/M - Ordered
 PAR.USR_Unit_of_Measure = WRK.U_M_Ordered;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?USER: Exit processing

 //?E2709 RMC 9/12/13  Classify as BX/CB - never MX
 CASE;

 // IF PAR.USR Unit of Measure is Mixed
 IF PAR.USR_Unit_of_Measure = 'MX';

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(DB1.Company_Number);
 PARAMETER('BOXLOAD');
 PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
 IF LCL.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

 // PAR.USR Unit of Measure = CND.Combos
 PAR.USR_Unit_of_Measure = 'CB';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Unit of Measure = CND.Boxed
 PAR.USR_Unit_of_Measure = 'BX';

 ENDIF;

 ENDIF;

}


ENDIF;

CASE;

// IF DTL.ED Modified Text is original
IF DTL.ED_Modified_Text = 'original';

// DTL.Original Application USR = CND.X
DTL.Original_Application_USR = 'X';

// IF DTL.ED Modified Text is inlieu
IF DTL.ED_Modified_Text = 'inlieu';

// DTL.In Lieu Application USR = CND.X
DTL.In_Lieu_Application_USR = 'X';

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Original Application USR = CND.X
DTL.Original_Application_USR = 'X';

// DTL.ED Modified Text = CND.original
DTL.ED_Modified_Text = 'original';

ENDIF;

EXECUTE FUNCTION(RTV Sum Kilograms     RT) TYPE(RTVOBJ) FILE(OMFNCPP)           AC2156291;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(DTL.Net_Weight_Kilograms);
{
 //?USER: Initialize routine

 //?RMC 7/09/18  new for exp docs
 MOVE *ALL (To: PAR From: CON);

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Net Weight Kilograms = PAR.Net Weight Kilograms + DB1.Manifest Net Weight - Kg
 PAR.Net_Weight_Kilograms = PAR.Net_Weight_Kilograms + DB1.Manifest_Net_Weight_Kg;

}


//?USER: Validate detail screen fields

//?R16637 DN 09/22/20-Allow for F4=Prompt.
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

//?Consignor State.
CASE;

// IF PGM.*Cursor field <IS> DTL.ED Consignor State
IF PGM.*Cursor_field = DTL.ED_Consignor_State;

// Call program SEL State              SR.
CALL PROGRAM(SEL State              SR) ('CAAHSRR');
PARAMETER(DTL.ED_Consignor_State);

ENDIF;

//?Consignor Country.
CASE;

// IF PGM.*Cursor field <IS> DTL.ED Consignor Country Code
IF PGM.*Cursor_field = DTL.ED_Consignor_Country_Code;

// Call program SEL Country Active     SR.
CALL PROGRAM(SEL Country Active     SR) ('PDEGSRR');
PARAMETER(DTL.ED_Consignor_Country_Code);

ENDIF;

//?Consignee State.
CASE;

// IF PGM.*Cursor field <IS> DTL.ED Consignee State
IF PGM.*Cursor_field = DTL.ED_Consignee_State;

// Call program SEL State              SR.
CALL PROGRAM(SEL State              SR) ('CAAHSRR');
PARAMETER(DTL.ED_Consignee_State);

ENDIF;

//?Consignee Country.
CASE;

// IF PGM.*Cursor field <IS> DTL.ED Consignee Country Code
IF PGM.*Cursor_field = DTL.ED_Consignee_Country_Code;

// Call program SEL Country Active     SR.
CALL PROGRAM(SEL Country Active     SR) ('PDEGSRR');
PARAMETER(DTL.ED_Consignee_Country_Code);

ENDIF;

ENDIF;

//?Substitute MPF# into a remark if &M exists in the remark
CASE;

// IF DTL.ED Export Certificate Nbr is Entered
IF DTL.ED_Export_Certificate_Nbr <> *ZERO;

// LCL.MPF Number Alpha USR = CVTVAR(DTL.ED Export Certificate Nbr)
LCL.MPF_Number_Alpha_USR = CVTVAR(DTL.ED_Export_Certificate_Nbr);

// LCL.ED Remark Constant 1 = DTL.ED Remark Constant 1
LCL.ED_Remark_Constant_1 = DTL.ED_Remark_Constant_1;

// Execute function CLC Scan for Variable  US.
EXECUTE FUNCTION(CLC Scan for Variable  US) TYPE(EXCUSRSRC) ('POT4UFR');
PARAMETER(LCL.ED_Remark_Constant_1);
PARAMETER(LCL.MPF_Number_Alpha_USR);
{
 E                    ARR        70  1
 C           FIRST     IFNE 'N'
 C*  MAKE LEADING ZERO OF THE MPF# BLANK
 C*                    MOVELYL0002    ZERO5   50
 C*          ZERO5     IFEQ 0
 C*                    MOVE YL0002    WRK2    2
 C*                    MOVELWRK2      YL0002    P
 C*                    ELSE
 C*                    MOVELYL0002    ZERO4   40
 C*          ZERO4     IFEQ 0
 C*                    MOVE YL0002    WRK3    3
 C*                    MOVELWRK3      YL0002    P
 C*                    ELSE
 C*                    MOVELYL0002    ZERO3   30
 C*          ZERO3     IFEQ 0
 C*                    MOVE YL0002    WRK4    4
 C*                    MOVELWRK4      YL0002    P
 C*                    ELSE
 C*                    MOVELYL0002    ZERO2   20
 C*          ZERO2     IFEQ 0
 C*                    MOVE YL0002    WRK5    5
 C*                    MOVELWRK5      YL0002    P
 C*                    ELSE
 C*                    MOVELYL0002    ZERO1   10
 C*          ZERO1     IFEQ 0
 C*                    MOVE YL0002    WRK6    6
 C*                    MOVELWRK6      YL0002    P
 C*                    ENDIF
 C*                    ENDIF
 C*                    ENDIF
 C*                    ENDIF
 C*                    ENDIF
 C                     MOVELYL0006    ZERO1   10        WAS YL0002
 C           ZERO1     IFEQ 0
 C                     MOVE YL0006    WRK6    6
 C                     MOVELWRK6      YL0006    P
 C                     ENDIF
 C                     ENDIF
 C                     MOVE 'N'       FIRST   1
 C*  SCAN A REMARK FOR A VARIABLE '&M'.  IF FOUND INSERT THE
 C*  MPF NUMBER IN THE REMARK.
 C*
 C           '&M'      SCAN YL0007    P1      20          YL0003 -> YL0007
 C           P1        IFGT 0
 C                     MOVEAYL0007    ARR
 C                     MOVEAYL0006    ARR,P1
 C                     MOVEAARR       YL0007
 C                     END
}


// DTL.ED Remark Constant 1 = LCL.ED Remark Constant 1
DTL.ED_Remark_Constant_1 = LCL.ED_Remark_Constant_1;

// LCL.ED Remark Constant 1 = DTL.ED Remark Constant 2
LCL.ED_Remark_Constant_1 = DTL.ED_Remark_Constant_2;

// Execute function CLC Scan for Variable  US.
EXECUTE FUNCTION(CLC Scan for Variable  US) TYPE(EXCUSRSRC) ('POT4UFR');
PARAMETER(LCL.ED_Remark_Constant_1);
PARAMETER(LCL.MPF_Number_Alpha_USR);
{
 E                    ARR        70  1
 C           FIRST     IFNE 'N'
 C*  MAKE LEADING ZERO OF THE MPF# BLANK
 C*                    MOVELYL0002    ZERO5   50
 C*          ZERO5     IFEQ 0
 C*                    MOVE YL0002    WRK2    2
 C*                    MOVELWRK2      YL0002    P
 C*                    ELSE
 C*                    MOVELYL0002    ZERO4   40
 C*          ZERO4     IFEQ 0
 C*                    MOVE YL0002    WRK3    3
 C*                    MOVELWRK3      YL0002    P
 C*                    ELSE
 C*                    MOVELYL0002    ZERO3   30
 C*          ZERO3     IFEQ 0
 C*                    MOVE YL0002    WRK4    4
 C*                    MOVELWRK4      YL0002    P
 C*                    ELSE
 C*                    MOVELYL0002    ZERO2   20
 C*          ZERO2     IFEQ 0
 C*                    MOVE YL0002    WRK5    5
 C*                    MOVELWRK5      YL0002    P
 C*                    ELSE
 C*                    MOVELYL0002    ZERO1   10
 C*          ZERO1     IFEQ 0
 C*                    MOVE YL0002    WRK6    6
 C*                    MOVELWRK6      YL0002    P
 C*                    ENDIF
 C*                    ENDIF
 C*                    ENDIF
 C*                    ENDIF
 C*                    ENDIF
 C                     MOVELYL0006    ZERO1   10        WAS YL0002
 C           ZERO1     IFEQ 0
 C                     MOVE YL0006    WRK6    6
 C                     MOVELWRK6      YL0006    P
 C                     ENDIF
 C                     ENDIF
 C                     MOVE 'N'       FIRST   1
 C*  SCAN A REMARK FOR A VARIABLE '&M'.  IF FOUND INSERT THE
 C*  MPF NUMBER IN THE REMARK.
 C*
 C           '&M'      SCAN YL0007    P1      20          YL0003 -> YL0007
 C           P1        IFGT 0
 C                     MOVEAYL0007    ARR
 C                     MOVEAYL0006    ARR,P1
 C                     MOVEAARR       YL0007
 C                     END
}


// DTL.ED Remark Constant 2 = LCL.ED Remark Constant 1
DTL.ED_Remark_Constant_2 = LCL.ED_Remark_Constant_1;

// LCL.ED Remark Constant 1 = DTL.ED Remark Constant 3
LCL.ED_Remark_Constant_1 = DTL.ED_Remark_Constant_3;

// Execute function CLC Scan for Variable  US.
EXECUTE FUNCTION(CLC Scan for Variable  US) TYPE(EXCUSRSRC) ('POT4UFR');
PARAMETER(LCL.ED_Remark_Constant_1);
PARAMETER(LCL.MPF_Number_Alpha_USR);
{
 E                    ARR        70  1
 C           FIRST     IFNE 'N'
 C*  MAKE LEADING ZERO OF THE MPF# BLANK
 C*                    MOVELYL0002    ZERO5   50
 C*          ZERO5     IFEQ 0
 C*                    MOVE YL0002    WRK2    2
 C*                    MOVELWRK2      YL0002    P
 C*                    ELSE
 C*                    MOVELYL0002    ZERO4   40
 C*          ZERO4     IFEQ 0
 C*                    MOVE YL0002    WRK3    3
 C*                    MOVELWRK3      YL0002    P
 C*                    ELSE
 C*                    MOVELYL0002    ZERO3   30
 C*          ZERO3     IFEQ 0
 C*                    MOVE YL0002    WRK4    4
 C*                    MOVELWRK4      YL0002    P
 C*                    ELSE
 C*                    MOVELYL0002    ZERO2   20
 C*          ZERO2     IFEQ 0
 C*                    MOVE YL0002    WRK5    5
 C*                    MOVELWRK5      YL0002    P
 C*                    ELSE
 C*                    MOVELYL0002    ZERO1   10
 C*          ZERO1     IFEQ 0
 C*                    MOVE YL0002    WRK6    6
 C*                    MOVELWRK6      YL0002    P
 C*                    ENDIF
 C*                    ENDIF
 C*                    ENDIF
 C*                    ENDIF
 C*                    ENDIF
 C                     MOVELYL0006    ZERO1   10        WAS YL0002
 C           ZERO1     IFEQ 0
 C                     MOVE YL0006    WRK6    6
 C                     MOVELWRK6      YL0006    P
 C                     ENDIF
 C                     ENDIF
 C                     MOVE 'N'       FIRST   1
 C*  SCAN A REMARK FOR A VARIABLE '&M'.  IF FOUND INSERT THE
 C*  MPF NUMBER IN THE REMARK.
 C*
 C           '&M'      SCAN YL0007    P1      20          YL0003 -> YL0007
 C           P1        IFGT 0
 C                     MOVEAYL0007    ARR
 C                     MOVEAYL0006    ARR,P1
 C                     MOVEAARR       YL0007
 C                     END
}


// DTL.ED Remark Constant 3 = LCL.ED Remark Constant 1
DTL.ED_Remark_Constant_3 = LCL.ED_Remark_Constant_1;

// LCL.ED Remark Constant 1 = DTL.ED Remark Constant 4
LCL.ED_Remark_Constant_1 = DTL.ED_Remark_Constant_4;

// Execute function CLC Scan for Variable  US.
EXECUTE FUNCTION(CLC Scan for Variable  US) TYPE(EXCUSRSRC) ('POT4UFR');
PARAMETER(LCL.ED_Remark_Constant_1);
PARAMETER(LCL.MPF_Number_Alpha_USR);
{
 E                    ARR        70  1
 C           FIRST     IFNE 'N'
 C*  MAKE LEADING ZERO OF THE MPF# BLANK
 C*                    MOVELYL0002    ZERO5   50
 C*          ZERO5     IFEQ 0
 C*                    MOVE YL0002    WRK2    2
 C*                    MOVELWRK2      YL0002    P
 C*                    ELSE
 C*                    MOVELYL0002    ZERO4   40
 C*          ZERO4     IFEQ 0
 C*                    MOVE YL0002    WRK3    3
 C*                    MOVELWRK3      YL0002    P
 C*                    ELSE
 C*                    MOVELYL0002    ZERO3   30
 C*          ZERO3     IFEQ 0
 C*                    MOVE YL0002    WRK4    4
 C*                    MOVELWRK4      YL0002    P
 C*                    ELSE
 C*                    MOVELYL0002    ZERO2   20
 C*          ZERO2     IFEQ 0
 C*                    MOVE YL0002    WRK5    5
 C*                    MOVELWRK5      YL0002    P
 C*                    ELSE
 C*                    MOVELYL0002    ZERO1   10
 C*          ZERO1     IFEQ 0
 C*                    MOVE YL0002    WRK6    6
 C*                    MOVELWRK6      YL0002    P
 C*                    ENDIF
 C*                    ENDIF
 C*                    ENDIF
 C*                    ENDIF
 C*                    ENDIF
 C                     MOVELYL0006    ZERO1   10        WAS YL0002
 C           ZERO1     IFEQ 0
 C                     MOVE YL0006    WRK6    6
 C                     MOVELWRK6      YL0006    P
 C                     ENDIF
 C                     ENDIF
 C                     MOVE 'N'       FIRST   1
 C*  SCAN A REMARK FOR A VARIABLE '&M'.  IF FOUND INSERT THE
 C*  MPF NUMBER IN THE REMARK.
 C*
 C           '&M'      SCAN YL0007    P1      20          YL0003 -> YL0007
 C           P1        IFGT 0
 C                     MOVEAYL0007    ARR
 C                     MOVEAYL0006    ARR,P1
 C                     MOVEAARR       YL0007
 C                     END
}


// DTL.ED Remark Constant 4 = LCL.ED Remark Constant 1
DTL.ED_Remark_Constant_4 = LCL.ED_Remark_Constant_1;

// LCL.ED Remark Constant 1 = DTL.ED Remark Constant 5
LCL.ED_Remark_Constant_1 = DTL.ED_Remark_Constant_5;

// Execute function CLC Scan for Variable  US.
EXECUTE FUNCTION(CLC Scan for Variable  US) TYPE(EXCUSRSRC) ('POT4UFR');
PARAMETER(LCL.ED_Remark_Constant_1);
PARAMETER(LCL.MPF_Number_Alpha_USR);
{
 E                    ARR        70  1
 C           FIRST     IFNE 'N'
 C*  MAKE LEADING ZERO OF THE MPF# BLANK
 C*                    MOVELYL0002    ZERO5   50
 C*          ZERO5     IFEQ 0
 C*                    MOVE YL0002    WRK2    2
 C*                    MOVELWRK2      YL0002    P
 C*                    ELSE
 C*                    MOVELYL0002    ZERO4   40
 C*          ZERO4     IFEQ 0
 C*                    MOVE YL0002    WRK3    3
 C*                    MOVELWRK3      YL0002    P
 C*                    ELSE
 C*                    MOVELYL0002    ZERO3   30
 C*          ZERO3     IFEQ 0
 C*                    MOVE YL0002    WRK4    4
 C*                    MOVELWRK4      YL0002    P
 C*                    ELSE
 C*                    MOVELYL0002    ZERO2   20
 C*          ZERO2     IFEQ 0
 C*                    MOVE YL0002    WRK5    5
 C*                    MOVELWRK5      YL0002    P
 C*                    ELSE
 C*                    MOVELYL0002    ZERO1   10
 C*          ZERO1     IFEQ 0
 C*                    MOVE YL0002    WRK6    6
 C*                    MOVELWRK6      YL0002    P
 C*                    ENDIF
 C*                    ENDIF
 C*                    ENDIF
 C*                    ENDIF
 C*                    ENDIF
 C                     MOVELYL0006    ZERO1   10        WAS YL0002
 C           ZERO1     IFEQ 0
 C                     MOVE YL0006    WRK6    6
 C                     MOVELWRK6      YL0006    P
 C                     ENDIF
 C                     ENDIF
 C                     MOVE 'N'       FIRST   1
 C*  SCAN A REMARK FOR A VARIABLE '&M'.  IF FOUND INSERT THE
 C*  MPF NUMBER IN THE REMARK.
 C*
 C           '&M'      SCAN YL0007    P1      20          YL0003 -> YL0007
 C           P1        IFGT 0
 C                     MOVEAYL0007    ARR
 C                     MOVEAYL0006    ARR,P1
 C                     MOVEAARR       YL0007
 C                     END
}


// DTL.ED Remark Constant 5 = LCL.ED Remark Constant 1
DTL.ED_Remark_Constant_5 = LCL.ED_Remark_Constant_1;

// LCL.ED Remark Constant 1 = DTL.ED Remark Constant 6
LCL.ED_Remark_Constant_1 = DTL.ED_Remark_Constant_6;

// Execute function CLC Scan for Variable  US.
EXECUTE FUNCTION(CLC Scan for Variable  US) TYPE(EXCUSRSRC) ('POT4UFR');
PARAMETER(LCL.ED_Remark_Constant_1);
PARAMETER(LCL.MPF_Number_Alpha_USR);
{
 E                    ARR        70  1
 C           FIRST     IFNE 'N'
 C*  MAKE LEADING ZERO OF THE MPF# BLANK
 C*                    MOVELYL0002    ZERO5   50
 C*          ZERO5     IFEQ 0
 C*                    MOVE YL0002    WRK2    2
 C*                    MOVELWRK2      YL0002    P
 C*                    ELSE
 C*                    MOVELYL0002    ZERO4   40
 C*          ZERO4     IFEQ 0
 C*                    MOVE YL0002    WRK3    3
 C*                    MOVELWRK3      YL0002    P
 C*                    ELSE
 C*                    MOVELYL0002    ZERO3   30
 C*          ZERO3     IFEQ 0
 C*                    MOVE YL0002    WRK4    4
 C*                    MOVELWRK4      YL0002    P
 C*                    ELSE
 C*                    MOVELYL0002    ZERO2   20
 C*          ZERO2     IFEQ 0
 C*                    MOVE YL0002    WRK5    5
 C*                    MOVELWRK5      YL0002    P
 C*                    ELSE
 C*                    MOVELYL0002    ZERO1   10
 C*          ZERO1     IFEQ 0
 C*                    MOVE YL0002    WRK6    6
 C*                    MOVELWRK6      YL0002    P
 C*                    ENDIF
 C*                    ENDIF
 C*                    ENDIF
 C*                    ENDIF
 C*                    ENDIF
 C                     MOVELYL0006    ZERO1   10        WAS YL0002
 C           ZERO1     IFEQ 0
 C                     MOVE YL0006    WRK6    6
 C                     MOVELWRK6      YL0006    P
 C                     ENDIF
 C                     ENDIF
 C                     MOVE 'N'       FIRST   1
 C*  SCAN A REMARK FOR A VARIABLE '&M'.  IF FOUND INSERT THE
 C*  MPF NUMBER IN THE REMARK.
 C*
 C           '&M'      SCAN YL0007    P1      20          YL0003 -> YL0007
 C           P1        IFGT 0
 C                     MOVEAYL0007    ARR
 C                     MOVEAYL0006    ARR,P1
 C                     MOVEAARR       YL0007
 C                     END
}


// DTL.ED Remark Constant 6 = LCL.ED Remark Constant 1
DTL.ED_Remark_Constant_6 = LCL.ED_Remark_Constant_1;

// LCL.ED Remark Constant 1 = DTL.ED Remark Constant 7
LCL.ED_Remark_Constant_1 = DTL.ED_Remark_Constant_7;

// Execute function CLC Scan for Variable  US.
EXECUTE FUNCTION(CLC Scan for Variable  US) TYPE(EXCUSRSRC) ('POT4UFR');
PARAMETER(LCL.ED_Remark_Constant_1);
PARAMETER(LCL.MPF_Number_Alpha_USR);
{
 E                    ARR        70  1
 C           FIRST     IFNE 'N'
 C*  MAKE LEADING ZERO OF THE MPF# BLANK
 C*                    MOVELYL0002    ZERO5   50
 C*          ZERO5     IFEQ 0
 C*                    MOVE YL0002    WRK2    2
 C*                    MOVELWRK2      YL0002    P
 C*                    ELSE
 C*                    MOVELYL0002    ZERO4   40
 C*          ZERO4     IFEQ 0
 C*                    MOVE YL0002    WRK3    3
 C*                    MOVELWRK3      YL0002    P
 C*                    ELSE
 C*                    MOVELYL0002    ZERO3   30
 C*          ZERO3     IFEQ 0
 C*                    MOVE YL0002    WRK4    4
 C*                    MOVELWRK4      YL0002    P
 C*                    ELSE
 C*                    MOVELYL0002    ZERO2   20
 C*          ZERO2     IFEQ 0
 C*                    MOVE YL0002    WRK5    5
 C*                    MOVELWRK5      YL0002    P
 C*                    ELSE
 C*                    MOVELYL0002    ZERO1   10
 C*          ZERO1     IFEQ 0
 C*                    MOVE YL0002    WRK6    6
 C*                    MOVELWRK6      YL0002    P
 C*                    ENDIF
 C*                    ENDIF
 C*                    ENDIF
 C*                    ENDIF
 C*                    ENDIF
 C                     MOVELYL0006    ZERO1   10        WAS YL0002
 C           ZERO1     IFEQ 0
 C                     MOVE YL0006    WRK6    6
 C                     MOVELWRK6      YL0006    P
 C                     ENDIF
 C                     ENDIF
 C                     MOVE 'N'       FIRST   1
 C*  SCAN A REMARK FOR A VARIABLE '&M'.  IF FOUND INSERT THE
 C*  MPF NUMBER IN THE REMARK.
 C*
 C           '&M'      SCAN YL0007    P1      20          YL0003 -> YL0007
 C           P1        IFGT 0
 C                     MOVEAYL0007    ARR
 C                     MOVEAYL0006    ARR,P1
 C                     MOVEAARR       YL0007
 C                     END
}


// DTL.ED Remark Constant 7 = LCL.ED Remark Constant 1
DTL.ED_Remark_Constant_7 = LCL.ED_Remark_Constant_1;

// LCL.ED Remark Constant 1 = DTL.ED Remark Constant 8
LCL.ED_Remark_Constant_1 = DTL.ED_Remark_Constant_8;

// Execute function CLC Scan for Variable  US.
EXECUTE FUNCTION(CLC Scan for Variable  US) TYPE(EXCUSRSRC) ('POT4UFR');
PARAMETER(LCL.ED_Remark_Constant_1);
PARAMETER(LCL.MPF_Number_Alpha_USR);
{
 E                    ARR        70  1
 C           FIRST     IFNE 'N'
 C*  MAKE LEADING ZERO OF THE MPF# BLANK
 C*                    MOVELYL0002    ZERO5   50
 C*          ZERO5     IFEQ 0
 C*                    MOVE YL0002    WRK2    2
 C*                    MOVELWRK2      YL0002    P
 C*                    ELSE
 C*                    MOVELYL0002    ZERO4   40
 C*          ZERO4     IFEQ 0
 C*                    MOVE YL0002    WRK3    3
 C*                    MOVELWRK3      YL0002    P
 C*                    ELSE
 C*                    MOVELYL0002    ZERO3   30
 C*          ZERO3     IFEQ 0
 C*                    MOVE YL0002    WRK4    4
 C*                    MOVELWRK4      YL0002    P
 C*                    ELSE
 C*                    MOVELYL0002    ZERO2   20
 C*          ZERO2     IFEQ 0
 C*                    MOVE YL0002    WRK5    5
 C*                    MOVELWRK5      YL0002    P
 C*                    ELSE
 C*                    MOVELYL0002    ZERO1   10
 C*          ZERO1     IFEQ 0
 C*                    MOVE YL0002    WRK6    6
 C*                    MOVELWRK6      YL0002    P
 C*                    ENDIF
 C*                    ENDIF
 C*                    ENDIF
 C*                    ENDIF
 C*                    ENDIF
 C                     MOVELYL0006    ZERO1   10        WAS YL0002
 C           ZERO1     IFEQ 0
 C                     MOVE YL0006    WRK6    6
 C                     MOVELWRK6      YL0006    P
 C                     ENDIF
 C                     ENDIF
 C                     MOVE 'N'       FIRST   1
 C*  SCAN A REMARK FOR A VARIABLE '&M'.  IF FOUND INSERT THE
 C*  MPF NUMBER IN THE REMARK.
 C*
 C           '&M'      SCAN YL0007    P1      20          YL0003 -> YL0007
 C           P1        IFGT 0
 C                     MOVEAYL0007    ARR
 C                     MOVEAYL0006    ARR,P1
 C                     MOVEAARR       YL0007
 C                     END
}


// DTL.ED Remark Constant 8 = LCL.ED Remark Constant 1
DTL.ED_Remark_Constant_8 = LCL.ED_Remark_Constant_1;

ENDIF;

CASE;

// IF DTL.Original Application USR is X
IF DTL.Original_Application_USR = 'X';

// DTL.ED Modified Text = CND.original
DTL.ED_Modified_Text = 'original';

// IF DTL.In Lieu Application USR is X
IF DTL.In_Lieu_Application_USR = 'X';

// DTL.ED Modified Text = CND.inlieu
DTL.ED_Modified_Text = 'inlieu';

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.ED Modified Text = CND.original
DTL.ED_Modified_Text = 'original';

ENDIF;

//?R16637 DN 09/22/20-Validations for Consignor/Consignee Fields.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Required Fields When 'ED Live with PHIS=Y'.
CASE;

// IF LCL.ED Live with PHIS is yes
IF LCL.ED_Live_with_PHIS = 'Y';

//?Consignor Addr 4/City Required.
CASE;

// IF DTL.ED Consignor Addr 4 is Blank
IF DTL.ED_Consignor_Addr_4 = *BLANK;

// Send error message - 'Value Required'
ERROR(USR1852);
MSGPARM(DTL.ED_Consignor_Addr_4);

ENDIF;

//?Consignor Country Required.
CASE;

// IF DTL.ED Consignor Country Code is Blank
IF DTL.ED_Consignor_Country_Code = *BLANK;

// Send error message - 'Value Required'
ERROR(USR1852);
MSGPARM(DTL.ED_Consignor_Country_Code);

ENDIF;

//?Consignor Zip Required.
CASE;

// IF DTL.ED Consignor Postal is Not Entered
IF DTL.ED_Consignor_Postal = *BLANK;

// AND DTL.ED Consignor Country Code is USA
AND DTL.ED_Consignor_Country_Code = 'USA';

// Send error message - 'Value Required'
ERROR(USR1852);
MSGPARM(DTL.ED_Consignor_Postal);

ENDIF;

//?Consignee Addr 4/City Required.
CASE;

// IF DTL.ED Consignee Addr 4 is Blank
IF DTL.ED_Consignee_Addr_4 = *BLANK;

// Send error message - 'Value Required'
ERROR(USR1852);
MSGPARM(DTL.ED_Consignee_Addr_4);

ENDIF;

//?Consignee Country Required.
CASE;

// IF DTL.ED Consignee Country Code is Blank
IF DTL.ED_Consignee_Country_Code = *BLANK;

// Send error message - 'Value Required'
ERROR(USR1852);
MSGPARM(DTL.ED_Consignee_Country_Code);

ENDIF;

ENDIF;

//?Consignor State.
CASE;

// IF DTL.ED Consignor State is State code not Blanks
IF DTL.ED_Consignor_State <> *BLANK;

EXECUTE FUNCTION(Val State & Active     RT) TYPE(RTVOBJ) FILE(CAACREP)          AC2188226;
PARAMETER(DTL.ED_Consignor_State);
PARAMETER(LCL.Record_Status);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 // PAR.Record Status = DB1.Record Status
 PAR.Record_Status = DB1.Record_Status;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Record Status = CND.Inactive
 PAR.Record_Status = 'I';

 ENDIF;

}


//?Check Return Code.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

CASE;

// IF LCL.Record Status is Inactive
IF LCL.Record_Status = 'I';

// Send error message - 'State &1 Inactive.'
ERROR(USR5197);
MSGPARM(DTL.ED_Consignor_State);

ENDIF;

//?Check Return Code.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'State not found'
ERROR(USR1838);
MSGPARM(DTL.ED_Consignor_State);

ENDIF;

ENDIF;

//?Consignor Country.
CASE;

// IF DTL.ED Consignor Country Code is Entered
IF DTL.ED_Consignor_Country_Code <> *BLANK;

EXECUTE FUNCTION(Val Country & Active   RT) TYPE(RTVOBJ) FILE(OME5REP)          AC2188228;
PARAMETER(DTL.ED_Consignor_Country_Code);
PARAMETER(LCL.Record_Status);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 // PAR.Record Status = DB1.Record Status
 PAR.Record_Status = DB1.Record_Status;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Record Status = CND.Inactive
 PAR.Record_Status = 'I';

 ENDIF;

}


//?Check Return Code.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

CASE;

// IF LCL.Record Status is Inactive
IF LCL.Record_Status = 'I';

// Send error message - 'Country &1 Inactive.'
ERROR(USR5198);
MSGPARM(DTL.ED_Consignor_Country_Code);

ENDIF;

//?Check Return Code.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Country Code not found.'
ERROR(USR2030);
MSGPARM(DTL.ED_Consignor_Country_Code);

ENDIF;

ENDIF;

//?Consignee State.
CASE;

// IF DTL.ED Consignee State is State code not Blanks
IF DTL.ED_Consignee_State <> *BLANK;

EXECUTE FUNCTION(Val State & Active     RT) TYPE(RTVOBJ) FILE(CAACREP)          AC2188226;
PARAMETER(DTL.ED_Consignee_State);
PARAMETER(LCL.Record_Status);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 // PAR.Record Status = DB1.Record Status
 PAR.Record_Status = DB1.Record_Status;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Record Status = CND.Inactive
 PAR.Record_Status = 'I';

 ENDIF;

}


//?Check Return Code.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

CASE;

// IF LCL.Record Status is Inactive
IF LCL.Record_Status = 'I';

// Send error message - 'State &1 Inactive.'
ERROR(USR5197);
MSGPARM(DTL.ED_Consignee_State);

ENDIF;

//?Check Return Code.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'State not found'
ERROR(USR1838);
MSGPARM(DTL.ED_Consignee_State);

ENDIF;

ENDIF;

//?Consignee Country.
CASE;

// IF DTL.ED Consignee Country Code is Entered
IF DTL.ED_Consignee_Country_Code <> *BLANK;

EXECUTE FUNCTION(Val Country & Active   RT) TYPE(RTVOBJ) FILE(OME5REP)          AC2188228;
PARAMETER(DTL.ED_Consignee_Country_Code);
PARAMETER(LCL.Record_Status);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 // PAR.Record Status = DB1.Record Status
 PAR.Record_Status = DB1.Record_Status;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Record Status = CND.Inactive
 PAR.Record_Status = 'I';

 ENDIF;

}


//?Check Return Code.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

CASE;

// IF LCL.Record Status is Inactive
IF LCL.Record_Status = 'I';

// Send error message - 'Country &1 Inactive.'
ERROR(USR5198);
MSGPARM(DTL.ED_Consignee_Country_Code);

QUIT;

ENDIF;

//?Check Return Code.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Country Code not found.'
ERROR(USR2030);
MSGPARM(DTL.ED_Consignee_Country_Code);

QUIT;

ENDIF;

ENDIF;

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(Chg All Order Hdrs     IF) TYPE(EXCINTFUN) FILE(PDMRREP)       AC1538305;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.ED_Export_Document_Type);
PARAMETER(DTL.Country_Code);
PARAMETER(DTL.ED_Area_Office);
PARAMETER(DTL.ED_Destination);
PARAMETER(DTL.ED_Consignor_Name);
PARAMETER(DTL.ED_Consignor_Addr_1);
PARAMETER(DTL.ED_Consignor_Addr_2);
PARAMETER(DTL.ED_Consignor_Addr_3);
PARAMETER(DTL.ED_Consignor_Addr_4);
PARAMETER(DTL.ED_Consignor_State);
PARAMETER(DTL.ED_Consignor_Postal);
PARAMETER(DTL.ED_Consignor_Country_Code);
PARAMETER(DTL.ED_Consignee_Name);
PARAMETER(DTL.ED_Consignee_Addr_1);
PARAMETER(DTL.ED_Consignee_Addr_2);
PARAMETER(DTL.ED_Consignee_Addr_3);
PARAMETER(DTL.ED_Consignee_Addr_4);
PARAMETER(DTL.ED_Consignee_State);
PARAMETER(DTL.ED_Consignee_Postal);
PARAMETER(DTL.ED_Consignee_Country_Code);
PARAMETER(DTL.ED_Plant_Location_City);
PARAMETER(DTL.ED_Plant_Location_State);
PARAMETER(DTL.ED_Plant_Number);
PARAMETER(DTL.ED_Processing_Plant_Sts);
PARAMETER(DTL.ED_Attachment_Subtype);
PARAMETER(DTL.ED_Attachment_Type_Sts);
PARAMETER(DTL.ED_Xlate_Desc_to_Country);
PARAMETER(DTL.ED_Unmarked_Txt);
PARAMETER(DTL.ED_Shipping_Marks_Txt);
PARAMETER(DTL.ED_Date_of_Slaughter);
PARAMETER(DTL.ED_Place_of_Slaughter_Txt);
PARAMETER(DTL.ED_Date_of_Processing);
PARAMETER(DTL.ED_Place_of_processing_Tx);
PARAMETER(DTL.ED_Continue_Comment_Txt);
PARAMETER(DTL.ED_Remark_Constant_1);
PARAMETER(DTL.ED_Remark_Constant_2);
PARAMETER(DTL.ED_Remark_Constant_3);
PARAMETER(DTL.ED_Remark_Constant_4);
PARAMETER(DTL.ED_Remark_Constant_5);
PARAMETER(DTL.ED_Remark_Constant_7);
PARAMETER(DTL.ED_Remark_Constant_8);
PARAMETER(DTL.ED_Certify_that_the_meat);
PARAMETER(DTL.ED_Inspector_Name);
PARAMETER(DTL.ED_Origin_Country);
PARAMETER(DTL.ED_Port_of_Loading);
PARAMETER(DTL.ED_Transportion);
PARAMETER(DTL.ED_Seal_Number_1);
PARAMETER(DTL.ED_Seal_Number_2);
PARAMETER(DTL.ED_Can_Import_Cntrl_Nm);
PARAMETER(DTL.ED_Can_Import_Cntrl_Ad_1);
PARAMETER(DTL.ED_Can_Import_Cntrl_Ad_2);
PARAMETER(DTL.ED_Can_Import_Cntrl_Fax);
PARAMETER(DTL.ED_Can_Import_Cntrl_Phne);
PARAMETER(DTL.ED_Seaboard_Plant_Fax);
PARAMETER(DTL.ED_USDA_Cert_Nbr_US);
PARAMETER(DTL.ED_USDA_Cert_Nbr_CA);
PARAMETER(DTL.ED_Can_Port_of_Entry);
PARAMETER(DTL.ED_Can_Reinsp_Est_Nbr);
PARAMETER(DTL.ED_Can_Reinsp_Est_Name);
PARAMETER(DTL.ED_Can_Reinsp_Est_City);
PARAMETER(DTL.ED_Herm_Sealed_Cntr_Sts);
PARAMETER(DTL.ED_Herm_Sealed_Cntr_Type);
PARAMETER(DTL.ED_Herm_Sealed_Cntr_p_Crt);
PARAMETER(DTL.ED_Whole_Bird_Sts);
PARAMETER(DTL.ED_Marked_Sts);
PARAMETER(DTL.ED_Tamper_Evident_Sts);
PARAMETER(DTL.ED_Plant_Contact_Name);
PARAMETER(DTL.ED_Plant_Contact_Phone);
PARAMETER(DTL.ED_Modified_Text);
PARAMETER(DTL.ED_Issued_Crt_for_Exp_Txt);
PARAMETER(DTL.ED_Species);
PARAMETER(DTL.ED_Slaughter_Plant_Name);
PARAMETER(DTL.ED_Slaughter_Plant_Addr_1);
PARAMETER(DTL.ED_Slaughter_Plant_Addr_2);
PARAMETER(DTL.ED_Packaging_Plant_Name);
PARAMETER(DTL.ED_Packaging_Plant_Addr_1);
PARAMETER(DTL.ED_Packaging_Plant_Addr_2);
PARAMETER(DTL.ED_Manufact_Plant_Name);
PARAMETER(DTL.ED_Manufact_Plant_Addr_1);
PARAMETER(DTL.ED_Manufact_Plant_Addr_2);
PARAMETER(DTL.ED_USDA_Name_1);
PARAMETER(DTL.ED_USDA_Name_2);
PARAMETER(DTL.ED_USDA_Name_3);
PARAMETER(DTL.ED_Title_of_Official);
PARAMETER(DTL.ED_Letter_of_Credit_Nbr);
PARAMETER(DTL.ED_Unused_prd_mo_yr);
PARAMETER(DTL.ED_Nbr_of_prods_on_1st_pg);
PARAMETER(DTL.ED_Importer_Name);
PARAMETER(DTL.ED_Importer_Addr_1);
PARAMETER(DTL.ED_Importer_Addr_2);
PARAMETER(DTL.ED_Purchaser_Name);
PARAMETER(DTL.ED_Purchaser_Addr_1);
PARAMETER(DTL.ED_Purchaser_Addr_2);
PARAMETER(DTL.ED_Place_Drct_Shpmnt_Nm);
PARAMETER(DTL.ED_Place_Drct_Shpmnt_Ad_1);
PARAMETER(DTL.ED_Place_Drct_Shpmnt_Ad_2);
PARAMETER(DTL.ED_Place_Drct_Shpmnt_Ad_3);
PARAMETER(DTL.ED_Currency);
PARAMETER(DTL.ED_Conditions_of_Sale);
PARAMETER(DTL.ED_Total_Unit_Price);
PARAMETER(DTL.ED_Invoice_Total);
PARAMETER(DTL.ED_Live_with_PHIS);
PARAMETER(DTL.ED_Print_Status);
PARAMETER(DTL.ED_Total_Net_Weight_lbs);
PARAMETER(DTL.ED_Total_Net_Weight_MT);
PARAMETER(DTL.ED_Nbr_of_Packages);
PARAMETER(DTL.ED_Customer_PO_#);
PARAMETER(DTL.ED_Total_Gross_Weight_lbs);
PARAMETER(DTL.ED_Total_Gross_Weight_MT);
PARAMETER(DTL.ED_Plant_Number_Dtl);
PARAMETER(DTL.ED_Language_Xlate_Desc_2);
PARAMETER(DTL.ED_Slaughter_Date_CofE_3);
PARAMETER(DTL.ED_Production_mo_yr_ln_3);
PARAMETER(DTL.ED_Remark_Constant_6);
PARAMETER(DTL.ED_Allow_Print_bef_Ship);
PARAMETER(DTL.ED_Cert_of_Orig_Sbd_addr);
PARAMETER(DTL.ED_Use_item_label_1_2);
PARAMETER(DTL.ED_Slg_Proc_Date_Format);
PARAMETER(DTL.ED_Total_Package_UOM);
PARAMETER(DTL.ED_Export_Certificate_Nbr);
PARAMETER(DTL.ED_Sail_Date);
PARAMETER(DTL.ED_Sworn_on_Date);
PARAMETER(DTL.ED_Consignee_Address_Nbr);
PARAMETER(DTL.ED_Form_Identification_Tx);
PARAMETER(DTL.ED_Cold_Storage_Name);
PARAMETER(DTL.ED_Cold_Storage_Addr_1);
PARAMETER(DTL.ED_Cold_Storage_Addr_2);
PARAMETER(DTL.ED_Cold_Storage_Plant_Nbr);
PARAMETER(DTL.ED_Slaughter_Date_CofE_1);
PARAMETER(DTL.ED_Production_mo_yr_ln_1);
PARAMETER(DTL.ED_Production_mo_yr_ln_2);
PARAMETER(DTL.ED_Booking_Nbr);
PARAMETER(DTL.ED_Document_Date);
PARAMETER(DTL.ED_Packing_Date);
PARAMETER(DTL.ED_Expiration_Date);
PARAMETER(DTL.ED_Packing_Date_To);
PARAMETER(DTL.ED_Unused_Date_2);
PARAMETER(DTL.ED_Print_Kilograms);
PARAMETER(DTL.ED_MPR_Canadian_Province);
PARAMETER(DTL.ED_Container_Nbrs);
PARAMETER(DTL.ED_Slaughter_Date_CofE_2);
PARAMETER(DTL.ED_Submit_Status);
PARAMETER(DTL.EDOH_Unused_Sts_2);
PARAMETER(DTL.EDOH_Unused_Text_1);
PARAMETER(DTL.EDOH_Unused_Text_2);
PARAMETER(DTL.EDOH_Unused_Number_1);
PARAMETER(DTL.EDOH_Unused_Date_1);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Job_Time);
PARAMETER(DTL.User_Id);
PARAMETER(DTL.Job_Name);
PARAMETER(DTL.Job_Date);
PARAMETER(LCL.MPC_Number);
{
 //?Execute internal function

 //?5/17/22 RMC WHD 99675 -- the below was commented until now...so do it now
 //?3/11/21 RMC WHD 75298 -- DO change the consignor on the Appl so it is
 //?  the same on all documents
 //?R16637 DN 09/10/20-Accepted PAR context default for new fields.
 EXECUTE FUNCTION(Chg Exp Doc Order Hdr  CH) TYPE(CHGOBJ) FILE(PDMRREP)          AC1523843;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.ED_Export_Document_Type);
 PARAMETER(PAR.Country_Code);
 PARAMETER(PAR.ED_Area_Office);
 PARAMETER(PAR.ED_Destination);
 PARAMETER(PAR.ED_Consignor_Name);
 PARAMETER(PAR.ED_Consignor_Addr_1);
 PARAMETER(PAR.ED_Consignor_Addr_2);
 PARAMETER(PAR.ED_Consignor_Addr_3);
 PARAMETER(PAR.ED_Consignor_Addr_4);
 PARAMETER(PAR.ED_Consignor_State);
 PARAMETER(PAR.ED_Consignor_Postal);
 PARAMETER(PAR.ED_Consignor_Country_Code);
 PARAMETER(PAR.ED_Consignee_Name);
 PARAMETER(PAR.ED_Consignee_Addr_1);
 PARAMETER(PAR.ED_Consignee_Addr_2);
 PARAMETER(PAR.ED_Consignee_Addr_3);
 PARAMETER(PAR.ED_Consignee_Addr_4);
 PARAMETER(PAR.ED_Consignee_State);
 PARAMETER(PAR.ED_Consignee_Postal);
 PARAMETER(PAR.ED_Consignee_Country_Code);
 PARAMETER(PAR.ED_Plant_Location_City);
 PARAMETER(PAR.ED_Plant_Location_State);
 PARAMETER(PAR.ED_Plant_Number);
 PARAMETER(PAR.ED_Processing_Plant_Sts);
 PARAMETER(PAR.ED_Attachment_Subtype);
 PARAMETER(PAR.ED_Attachment_Type_Sts);
 PARAMETER(PAR.ED_Xlate_Desc_to_Country);
 PARAMETER(PAR.ED_Unmarked_Txt);
 PARAMETER(PAR.ED_Shipping_Marks_Txt);
 PARAMETER(PAR.ED_Date_of_Slaughter);
 PARAMETER(PAR.ED_Place_of_Slaughter_Txt);
 PARAMETER(PAR.ED_Date_of_Processing);
 PARAMETER(PAR.ED_Place_of_processing_Tx);
 PARAMETER(PAR.ED_Continue_Comment_Txt);
 PARAMETER(PAR.ED_Remark_Constant_1);
 PARAMETER(PAR.ED_Remark_Constant_2);
 PARAMETER(PAR.ED_Remark_Constant_3);
 PARAMETER(PAR.ED_Remark_Constant_4);
 PARAMETER(PAR.ED_Remark_Constant_5);
 PARAMETER(PAR.ED_Remark_Constant_7);
 PARAMETER(PAR.ED_Remark_Constant_8);
 PARAMETER(PAR.ED_Certify_that_the_meat);
 PARAMETER(PAR.ED_Inspector_Name);
 PARAMETER(PAR.ED_Origin_Country);
 PARAMETER(PAR.ED_Port_of_Loading);
 PARAMETER(PAR.ED_Transportion);
 PARAMETER(PAR.ED_Seal_Number_1);
 PARAMETER(PAR.ED_Seal_Number_2);
 PARAMETER(PAR.ED_Can_Import_Cntrl_Nm);
 PARAMETER(PAR.ED_Can_Import_Cntrl_Ad_1);
 PARAMETER(PAR.ED_Can_Import_Cntrl_Ad_2);
 PARAMETER(PAR.ED_Can_Import_Cntrl_Fax);
 PARAMETER(PAR.ED_Can_Import_Cntrl_Phne);
 PARAMETER(PAR.ED_Seaboard_Plant_Fax);
 PARAMETER(PAR.ED_USDA_Cert_Nbr_US);
 PARAMETER(PAR.ED_USDA_Cert_Nbr_CA);
 PARAMETER(PAR.ED_Can_Port_of_Entry);
 PARAMETER(PAR.ED_Can_Reinsp_Est_Nbr);
 PARAMETER(PAR.ED_Can_Reinsp_Est_Name);
 PARAMETER(PAR.ED_Can_Reinsp_Est_City);
 PARAMETER(PAR.ED_Herm_Sealed_Cntr_Sts);
 PARAMETER(PAR.ED_Herm_Sealed_Cntr_Type);
 PARAMETER(PAR.ED_Herm_Sealed_Cntr_p_Crt);
 PARAMETER(PAR.ED_Whole_Bird_Sts);
 PARAMETER(PAR.ED_Marked_Sts);
 PARAMETER(PAR.ED_Tamper_Evident_Sts);
 PARAMETER(PAR.ED_Plant_Contact_Name);
 PARAMETER(PAR.ED_Plant_Contact_Phone);
 PARAMETER(PAR.ED_Modified_Text);
 PARAMETER(PAR.ED_Issued_Crt_for_Exp_Txt);
 PARAMETER(PAR.ED_Species);
 PARAMETER(PAR.ED_Slaughter_Plant_Name);
 PARAMETER(PAR.ED_Slaughter_Plant_Addr_1);
 PARAMETER(PAR.ED_Slaughter_Plant_Addr_2);
 PARAMETER(PAR.ED_Packaging_Plant_Name);
 PARAMETER(PAR.ED_Packaging_Plant_Addr_1);
 PARAMETER(PAR.ED_Packaging_Plant_Addr_2);
 PARAMETER(PAR.ED_Manufact_Plant_Name);
 PARAMETER(PAR.ED_Manufact_Plant_Addr_1);
 PARAMETER(PAR.ED_Manufact_Plant_Addr_2);
 PARAMETER(PAR.ED_USDA_Name_1);
 PARAMETER(PAR.ED_USDA_Name_2);
 PARAMETER(PAR.ED_USDA_Name_3);
 PARAMETER(PAR.ED_Title_of_Official);
 PARAMETER(PAR.ED_Letter_of_Credit_Nbr);
 PARAMETER(PAR.ED_Unused_prd_mo_yr);
 PARAMETER(PAR.ED_Nbr_of_prods_on_1st_pg);
 PARAMETER(PAR.ED_Importer_Name);
 PARAMETER(PAR.ED_Importer_Addr_1);
 PARAMETER(PAR.ED_Importer_Addr_2);
 PARAMETER(PAR.ED_Purchaser_Name);
 PARAMETER(PAR.ED_Purchaser_Addr_1);
 PARAMETER(PAR.ED_Purchaser_Addr_2);
 PARAMETER(PAR.ED_Place_Drct_Shpmnt_Nm);
 PARAMETER(PAR.ED_Place_Drct_Shpmnt_Ad_1);
 PARAMETER(PAR.ED_Place_Drct_Shpmnt_Ad_2);
 PARAMETER(PAR.ED_Place_Drct_Shpmnt_Ad_3);
 PARAMETER(PAR.ED_Currency);
 PARAMETER(PAR.ED_Conditions_of_Sale);
 PARAMETER(PAR.ED_Total_Unit_Price);
 PARAMETER(PAR.ED_Invoice_Total);
 PARAMETER(PAR.ED_Live_with_PHIS);
 PARAMETER(PAR.ED_Print_Status);
 PARAMETER(PAR.ED_Total_Net_Weight_lbs);
 PARAMETER(PAR.ED_Total_Net_Weight_MT);
 PARAMETER(PAR.ED_Nbr_of_Packages);
 PARAMETER(PAR.ED_Customer_PO_#);
 PARAMETER(PAR.ED_Total_Gross_Weight_lbs);
 PARAMETER(PAR.ED_Total_Gross_Weight_MT);
 PARAMETER(PAR.ED_Plant_Number_Dtl);
 PARAMETER(PAR.ED_Language_Xlate_Desc_2);
 PARAMETER(PAR.ED_Slaughter_Date_CofE_3);
 PARAMETER(PAR.ED_Production_mo_yr_ln_3);
 PARAMETER(PAR.ED_Remark_Constant_6);
 PARAMETER(PAR.ED_Allow_Print_bef_Ship);
 PARAMETER(PAR.ED_Cert_of_Orig_Sbd_addr);
 PARAMETER(PAR.ED_Use_item_label_1_2);
 PARAMETER(PAR.ED_Slg_Proc_Date_Format);
 PARAMETER(PAR.ED_Total_Package_UOM);
 PARAMETER(PAR.ED_Export_Certificate_Nbr);
 PARAMETER(PAR.ED_Sail_Date);
 PARAMETER(PAR.ED_Sworn_on_Date);
 PARAMETER(PAR.ED_Consignee_Address_Nbr);
 PARAMETER(PAR.ED_Form_Identification_Tx);
 PARAMETER(PAR.ED_Cold_Storage_Name);
 PARAMETER(PAR.ED_Cold_Storage_Addr_1);
 PARAMETER(PAR.ED_Cold_Storage_Addr_2);
 PARAMETER(PAR.ED_Cold_Storage_Plant_Nbr);
 PARAMETER(PAR.ED_Slaughter_Date_CofE_1);
 PARAMETER(PAR.ED_Production_mo_yr_ln_1);
 PARAMETER(PAR.ED_Production_mo_yr_ln_2);
 PARAMETER(PAR.ED_Booking_Nbr);
 PARAMETER(PAR.ED_Document_Date);
 PARAMETER(PAR.ED_Packing_Date);
 PARAMETER(PAR.ED_Expiration_Date);
 PARAMETER(PAR.ED_Packing_Date_To);
 PARAMETER(PAR.ED_Unused_Date_2);
 PARAMETER(PAR.ED_Print_Kilograms);
 PARAMETER(PAR.ED_MPR_Canadian_Province);
 PARAMETER(PAR.ED_Container_Nbrs);
 PARAMETER(PAR.ED_Slaughter_Date_CofE_2);
 PARAMETER(PAR.ED_Submit_Status);
 PARAMETER(PAR.EDOH_Unused_Sts_2);
 PARAMETER(PAR.EDOH_Unused_Text_1);
 PARAMETER(PAR.EDOH_Unused_Text_2);
 PARAMETER(PAR.EDOH_Unused_Number_1);
 PARAMETER(PAR.EDOH_Unused_Date_1);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Job_Time);
 PARAMETER(PAR.User_Id);
 PARAMETER(PAR.Job_Name);
 PARAMETER(PAR.Job_Date);
 {
  //?USER: Processing after Data read

  CASE;

  // IF DB1.ED Export Document Type is MPD
  IF DB1.ED_Export_Document_Type = 'H';

  // OR DB1.ED Export Document Type is 9290/9285/9295/9115/9450
  OR DB1.ED_Export_Document_Type = 'E';

  //?The H and or the E record are the only records that we would
  //?want to write out the comments records
  //?on the A record even if the consignee or consignor are
  //?changed do not write out these records
  //?R16637 DN 09/10/20-Pass in New Consignor/Consignee Fields.
  // Call program Rtv/Consignor/ConsigneXF.
  CALL PROGRAM(Rtv/Consignor/ConsigneXF) ('PNVIXFR');
  PARAMETER(JOB.*PROGRAM);
  PARAMETER(DB1.ED_Consignor_Name);
  PARAMETER(DB1.ED_Consignor_Addr_1);
  PARAMETER(DB1.ED_Consignor_Addr_2);
  PARAMETER(DB1.ED_Consignor_Addr_3);
  PARAMETER(DB1.ED_Consignor_Addr_4);
  PARAMETER(DB1.ED_Consignor_State);
  PARAMETER(DB1.ED_Consignor_Postal);
  PARAMETER(DB1.ED_Consignor_Country_Code);
  PARAMETER(DB1.ED_Consignee_Name);
  PARAMETER(DB1.ED_Consignee_Addr_1);
  PARAMETER(DB1.ED_Consignee_Addr_2);
  PARAMETER(DB1.ED_Consignee_Addr_3);
  PARAMETER(DB1.ED_Consignee_Addr_4);
  PARAMETER(DB1.ED_Consignee_State);
  PARAMETER(DB1.ED_Consignee_Postal);
  PARAMETER(DB1.ED_Consignee_Country_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.ED_Export_Document_Type);
  PARAMETER(PAR.Country_Code);
  PARAMETER(PAR.ED_Area_Office);
  PARAMETER(PAR.ED_Destination);
  PARAMETER(PAR.ED_Consignor_Name);
  PARAMETER(PAR.ED_Consignor_Addr_1);
  PARAMETER(PAR.ED_Consignor_Addr_2);
  PARAMETER(PAR.ED_Consignor_Addr_3);
  PARAMETER(PAR.ED_Consignor_Addr_4);
  PARAMETER(PAR.ED_Consignor_State);
  PARAMETER(PAR.ED_Consignor_Postal);
  PARAMETER(PAR.ED_Consignor_Country_Code);
  PARAMETER(PAR.ED_Consignee_Name);
  PARAMETER(PAR.ED_Consignee_Addr_1);
  PARAMETER(PAR.ED_Consignee_Addr_2);
  PARAMETER(PAR.ED_Consignee_Addr_3);
  PARAMETER(PAR.ED_Consignee_Addr_4);
  PARAMETER(PAR.ED_Consignee_State);
  PARAMETER(PAR.ED_Consignee_Postal);
  PARAMETER(PAR.ED_Consignee_Country_Code);

  ENDIF;

  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?Update fields used in H CERT, CERT FOR EXP, AND CUSTOM INV doc types
 //?E00198  RMC 9/15/08 pass in par.ED USDA Cert Nbr US and update if not CAN
 //?R16637 DN 09/10/20-Pass in New Consignor/Consignee Fields.
 EXECUTE FUNCTION(Rtv/Chg Order Hdrs     RT) TYPE(RTVOBJ) FILE(PDMRREP)          AC1538317;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.ED_Export_Document_Type);
 PARAMETER(PAR.Country_Code);
 PARAMETER(PAR.ED_Destination);
 PARAMETER(PAR.ED_Consignor_Name);
 PARAMETER(PAR.ED_Consignor_Addr_1);
 PARAMETER(PAR.ED_Consignor_Addr_2);
 PARAMETER(PAR.ED_Consignor_Addr_3);
 PARAMETER(PAR.ED_Consignor_Addr_4);
 PARAMETER(PAR.ED_Consignor_State);
 PARAMETER(PAR.ED_Consignor_Postal);
 PARAMETER(PAR.ED_Consignor_Country_Code);
 PARAMETER(PAR.ED_Consignee_Name);
 PARAMETER(PAR.ED_Consignee_Addr_1);
 PARAMETER(PAR.ED_Consignee_Addr_2);
 PARAMETER(PAR.ED_Consignee_Addr_3);
 PARAMETER(PAR.ED_Consignee_Addr_4);
 PARAMETER(PAR.ED_Consignee_State);
 PARAMETER(PAR.ED_Consignee_Postal);
 PARAMETER(PAR.ED_Consignee_Country_Code);
 PARAMETER(PAR.ED_Plant_Number);
 PARAMETER(PAR.ED_Shipping_Marks_Txt);
 PARAMETER(PAR.ED_Date_of_Slaughter);
 PARAMETER(PAR.ED_Date_of_Processing);
 PARAMETER(PAR.ED_Origin_Country);
 PARAMETER(PAR.ED_Transportion);
 PARAMETER(PAR.ED_USDA_Cert_Nbr_US);
 PARAMETER(PAR.ED_Packaging_Plant_Name);
 PARAMETER(PAR.ED_Total_Net_Weight_lbs);
 PARAMETER(PAR.ED_Total_Net_Weight_MT);
 PARAMETER(PAR.ED_Nbr_of_Packages);
 PARAMETER(PAR.ED_Total_Gross_Weight_lbs);
 PARAMETER(PAR.ED_Slaughter_Date_CofE_3);
 PARAMETER(PAR.ED_Total_Package_UOM);
 PARAMETER(PAR.ED_Export_Certificate_Nbr);
 PARAMETER(PAR.ED_Booking_Nbr);
 {
  //?USER: Process Data record

  CASE;

  // IF PAR.ED Export Document Type NE DB1.ED Export Document Type
  IF PAR.ED_Export_Document_Type <> DB1.ED_Export_Document_Type;

  CASE;

  // IF DB1.Country Code is Canada
  IF DB1.Country_Code = 'CAN';

  CASE;

  // IF DB1.ED Export Document Type is Intent to Import
  IF DB1.ED_Export_Document_Type = 'I';

  //?update packaging plant name          4/29/09
  //?R16637 DN 09/10/20-Set New Consignor/Consignee Fields to DB1 Ctxt.
  EXECUTE FUNCTION(Chg Exp Doc Order Hdr  CH) TYPE(CHGOBJ) FILE(PDMRREP)          AC1523843;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.ED_Export_Document_Type);
  PARAMETER(DB1.Country_Code);
  PARAMETER(DB1.ED_Area_Office);
  PARAMETER(DB1.ED_Destination);
  PARAMETER(DB1.ED_Consignor_Name);
  PARAMETER(DB1.ED_Consignor_Addr_1);
  PARAMETER(DB1.ED_Consignor_Addr_2);
  PARAMETER(DB1.ED_Consignor_Addr_3);
  PARAMETER(DB1.ED_Consignor_Addr_4);
  PARAMETER(DB1.ED_Consignor_State);
  PARAMETER(DB1.ED_Consignor_Postal);
  PARAMETER(DB1.ED_Consignor_Country_Code);
  PARAMETER(DB1.ED_Consignee_Name);
  PARAMETER(DB1.ED_Consignee_Addr_1);
  PARAMETER(DB1.ED_Consignee_Addr_2);
  PARAMETER(DB1.ED_Consignee_Addr_3);
  PARAMETER(DB1.ED_Consignee_Addr_4);
  PARAMETER(DB1.ED_Consignee_State);
  PARAMETER(DB1.ED_Consignee_Postal);
  PARAMETER(DB1.ED_Consignee_Country_Code);
  PARAMETER(DB1.ED_Plant_Location_City);
  PARAMETER(DB1.ED_Plant_Location_State);
  PARAMETER(DB1.ED_Plant_Number);
  PARAMETER(DB1.ED_Processing_Plant_Sts);
  PARAMETER(DB1.ED_Attachment_Subtype);
  PARAMETER(DB1.ED_Attachment_Type_Sts);
  PARAMETER(DB1.ED_Xlate_Desc_to_Country);
  PARAMETER(DB1.ED_Unmarked_Txt);
  PARAMETER(PAR.ED_Shipping_Marks_Txt);
  PARAMETER(DB1.ED_Date_of_Slaughter);
  PARAMETER(DB1.ED_Place_of_Slaughter_Txt);
  PARAMETER(DB1.ED_Date_of_Processing);
  PARAMETER(DB1.ED_Place_of_processing_Tx);
  PARAMETER(DB1.ED_Continue_Comment_Txt);
  PARAMETER(DB1.ED_Remark_Constant_1);
  PARAMETER(DB1.ED_Remark_Constant_2);
  PARAMETER(DB1.ED_Remark_Constant_3);
  PARAMETER(DB1.ED_Remark_Constant_4);
  PARAMETER(DB1.ED_Remark_Constant_5);
  PARAMETER(DB1.ED_Remark_Constant_7);
  PARAMETER(DB1.ED_Remark_Constant_8);
  PARAMETER(DB1.ED_Certify_that_the_meat);
  PARAMETER(DB1.ED_Inspector_Name);
  PARAMETER(DB1.ED_Origin_Country);
  PARAMETER(DB1.ED_Port_of_Loading);
  PARAMETER(DB1.ED_Transportion);
  PARAMETER(DB1.ED_Seal_Number_1);
  PARAMETER(DB1.ED_Seal_Number_2);
  PARAMETER(DB1.ED_Can_Import_Cntrl_Nm);
  PARAMETER(DB1.ED_Can_Import_Cntrl_Ad_1);
  PARAMETER(DB1.ED_Can_Import_Cntrl_Ad_2);
  PARAMETER(DB1.ED_Can_Import_Cntrl_Fax);
  PARAMETER(DB1.ED_Can_Import_Cntrl_Phne);
  PARAMETER(DB1.ED_Seaboard_Plant_Fax);
  PARAMETER(DB1.ED_USDA_Cert_Nbr_US);
  PARAMETER(DB1.ED_USDA_Cert_Nbr_CA);
  PARAMETER(DB1.ED_Can_Port_of_Entry);
  PARAMETER(DB1.ED_Can_Reinsp_Est_Nbr);
  PARAMETER(DB1.ED_Can_Reinsp_Est_Name);
  PARAMETER(DB1.ED_Can_Reinsp_Est_City);
  PARAMETER(DB1.ED_Herm_Sealed_Cntr_Sts);
  PARAMETER(DB1.ED_Herm_Sealed_Cntr_Type);
  PARAMETER(DB1.ED_Herm_Sealed_Cntr_p_Crt);
  PARAMETER(DB1.ED_Whole_Bird_Sts);
  PARAMETER(DB1.ED_Marked_Sts);
  PARAMETER(DB1.ED_Tamper_Evident_Sts);
  PARAMETER(DB1.ED_Plant_Contact_Name);
  PARAMETER(DB1.ED_Plant_Contact_Phone);
  PARAMETER(DB1.ED_Modified_Text);
  PARAMETER(DB1.ED_Issued_Crt_for_Exp_Txt);
  PARAMETER(DB1.ED_Species);
  PARAMETER(DB1.ED_Slaughter_Plant_Name);
  PARAMETER(DB1.ED_Slaughter_Plant_Addr_1);
  PARAMETER(DB1.ED_Slaughter_Plant_Addr_2);
  PARAMETER(PAR.ED_Packaging_Plant_Name);
  PARAMETER(DB1.ED_Packaging_Plant_Addr_1);
  PARAMETER(DB1.ED_Packaging_Plant_Addr_2);
  PARAMETER(DB1.ED_Manufact_Plant_Name);
  PARAMETER(DB1.ED_Manufact_Plant_Addr_1);
  PARAMETER(DB1.ED_Manufact_Plant_Addr_2);
  PARAMETER(DB1.ED_USDA_Name_1);
  PARAMETER(DB1.ED_USDA_Name_2);
  PARAMETER(DB1.ED_USDA_Name_3);
  PARAMETER(DB1.ED_Title_of_Official);
  PARAMETER(DB1.ED_Letter_of_Credit_Nbr);
  PARAMETER(DB1.ED_Unused_prd_mo_yr);
  PARAMETER(DB1.ED_Nbr_of_prods_on_1st_pg);
  PARAMETER(DB1.ED_Importer_Name);
  PARAMETER(DB1.ED_Importer_Addr_1);
  PARAMETER(DB1.ED_Importer_Addr_2);
  PARAMETER(DB1.ED_Purchaser_Name);
  PARAMETER(DB1.ED_Purchaser_Addr_1);
  PARAMETER(DB1.ED_Purchaser_Addr_2);
  PARAMETER(DB1.ED_Place_Drct_Shpmnt_Nm);
  PARAMETER(DB1.ED_Place_Drct_Shpmnt_Ad_1);
  PARAMETER(DB1.ED_Place_Drct_Shpmnt_Ad_2);
  PARAMETER(DB1.ED_Place_Drct_Shpmnt_Ad_3);
  PARAMETER(DB1.ED_Currency);
  PARAMETER(DB1.ED_Conditions_of_Sale);
  PARAMETER(DB1.ED_Total_Unit_Price);
  PARAMETER(DB1.ED_Invoice_Total);
  PARAMETER(DB1.ED_Live_with_PHIS);
  PARAMETER(DB1.ED_Print_Status);
  PARAMETER(DB1.ED_Total_Net_Weight_lbs);
  PARAMETER(DB1.ED_Total_Net_Weight_MT);
  PARAMETER(DB1.ED_Nbr_of_Packages);
  PARAMETER(DB1.ED_Customer_PO_#);
  PARAMETER(PAR.ED_Total_Gross_Weight_lbs);
  PARAMETER(DB1.ED_Total_Gross_Weight_MT);
  PARAMETER(DB1.ED_Plant_Number_Dtl);
  PARAMETER(DB1.ED_Language_Xlate_Desc_2);
  PARAMETER(DB1.ED_Slaughter_Date_CofE_3);
  PARAMETER(DB1.ED_Production_mo_yr_ln_3);
  PARAMETER(DB1.ED_Remark_Constant_6);
  PARAMETER(DB1.ED_Allow_Print_bef_Ship);
  PARAMETER(DB1.ED_Cert_of_Orig_Sbd_addr);
  PARAMETER(DB1.ED_Use_item_label_1_2);
  PARAMETER(DB1.ED_Slg_Proc_Date_Format);
  PARAMETER(DB1.ED_Total_Package_UOM);
  PARAMETER(PAR.ED_Export_Certificate_Nbr);
  PARAMETER(DB1.ED_Sail_Date);
  PARAMETER(DB1.ED_Sworn_on_Date);
  PARAMETER(DB1.ED_Consignee_Address_Nbr);
  PARAMETER(DB1.ED_Form_Identification_Tx);
  PARAMETER(DB1.ED_Cold_Storage_Name);
  PARAMETER(DB1.ED_Cold_Storage_Addr_1);
  PARAMETER(DB1.ED_Cold_Storage_Addr_2);
  PARAMETER(DB1.ED_Cold_Storage_Plant_Nbr);
  PARAMETER(DB1.ED_Slaughter_Date_CofE_1);
  PARAMETER(DB1.ED_Production_mo_yr_ln_1);
  PARAMETER(DB1.ED_Production_mo_yr_ln_2);
  PARAMETER(PAR.ED_Booking_Nbr);
  PARAMETER(DB1.ED_Document_Date);
  PARAMETER(DB1.ED_Packing_Date);
  PARAMETER(DB1.ED_Expiration_Date);
  PARAMETER(DB1.ED_Packing_Date_To);
  PARAMETER(DB1.ED_Unused_Date_2);
  PARAMETER(DB1.ED_Print_Kilograms);
  PARAMETER(DB1.ED_MPR_Canadian_Province);
  PARAMETER(DB1.ED_Container_Nbrs);
  PARAMETER(DB1.ED_Slaughter_Date_CofE_2);
  PARAMETER(DB1.ED_Submit_Status);
  PARAMETER(DB1.EDOH_Unused_Sts_2);
  PARAMETER(DB1.EDOH_Unused_Text_1);
  PARAMETER(DB1.EDOH_Unused_Text_2);
  PARAMETER(DB1.EDOH_Unused_Number_1);
  PARAMETER(DB1.EDOH_Unused_Date_1);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing after Data read

   CASE;

   // IF DB1.ED Export Document Type is MPD
   IF DB1.ED_Export_Document_Type = 'H';

   // OR DB1.ED Export Document Type is 9290/9285/9295/9115/9450
   OR DB1.ED_Export_Document_Type = 'E';

   //?The H and or the E record are the only records that we would
   //?want to write out the comments records
   //?on the A record even if the consignee or consignor are
   //?changed do not write out these records
   //?R16637 DN 09/10/20-Pass in New Consignor/Consignee Fields.
   // Call program Rtv/Consignor/ConsigneXF.
   CALL PROGRAM(Rtv/Consignor/ConsigneXF) ('PNVIXFR');
   PARAMETER(JOB.*PROGRAM);
   PARAMETER(DB1.ED_Consignor_Name);
   PARAMETER(DB1.ED_Consignor_Addr_1);
   PARAMETER(DB1.ED_Consignor_Addr_2);
   PARAMETER(DB1.ED_Consignor_Addr_3);
   PARAMETER(DB1.ED_Consignor_Addr_4);
   PARAMETER(DB1.ED_Consignor_State);
   PARAMETER(DB1.ED_Consignor_Postal);
   PARAMETER(DB1.ED_Consignor_Country_Code);
   PARAMETER(DB1.ED_Consignee_Name);
   PARAMETER(DB1.ED_Consignee_Addr_1);
   PARAMETER(DB1.ED_Consignee_Addr_2);
   PARAMETER(DB1.ED_Consignee_Addr_3);
   PARAMETER(DB1.ED_Consignee_Addr_4);
   PARAMETER(DB1.ED_Consignee_State);
   PARAMETER(DB1.ED_Consignee_Postal);
   PARAMETER(DB1.ED_Consignee_Country_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.ED_Export_Document_Type);
   PARAMETER(PAR.Country_Code);
   PARAMETER(PAR.ED_Area_Office);
   PARAMETER(PAR.ED_Destination);
   PARAMETER(PAR.ED_Consignor_Name);
   PARAMETER(PAR.ED_Consignor_Addr_1);
   PARAMETER(PAR.ED_Consignor_Addr_2);
   PARAMETER(PAR.ED_Consignor_Addr_3);
   PARAMETER(PAR.ED_Consignor_Addr_4);
   PARAMETER(PAR.ED_Consignor_State);
   PARAMETER(PAR.ED_Consignor_Postal);
   PARAMETER(PAR.ED_Consignor_Country_Code);
   PARAMETER(PAR.ED_Consignee_Name);
   PARAMETER(PAR.ED_Consignee_Addr_1);
   PARAMETER(PAR.ED_Consignee_Addr_2);
   PARAMETER(PAR.ED_Consignee_Addr_3);
   PARAMETER(PAR.ED_Consignee_Addr_4);
   PARAMETER(PAR.ED_Consignee_State);
   PARAMETER(PAR.ED_Consignee_Postal);
   PARAMETER(PAR.ED_Consignee_Country_Code);

   ENDIF;

   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?R16637 DN 09/10/20-Set New Consignor Flds to DB1 & Consignee to PAR Ctxt.
  EXECUTE FUNCTION(Chg Exp Doc Order Hdr  CH) TYPE(CHGOBJ) FILE(PDMRREP)          AC1523843;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.ED_Export_Document_Type);
  PARAMETER(DB1.Country_Code);
  PARAMETER(DB1.ED_Area_Office);
  PARAMETER(PAR.ED_Destination);
  PARAMETER(PAR.ED_Consignor_Name);
  PARAMETER(PAR.ED_Consignor_Addr_1);
  PARAMETER(PAR.ED_Consignor_Addr_2);
  PARAMETER(PAR.ED_Consignor_Addr_3);
  PARAMETER(PAR.ED_Consignor_Addr_4);
  PARAMETER(PAR.ED_Consignor_State);
  PARAMETER(PAR.ED_Consignor_Postal);
  PARAMETER(PAR.ED_Consignor_Country_Code);
  PARAMETER(PAR.ED_Consignee_Name);
  PARAMETER(PAR.ED_Consignee_Addr_1);
  PARAMETER(PAR.ED_Consignee_Addr_2);
  PARAMETER(PAR.ED_Consignee_Addr_3);
  PARAMETER(PAR.ED_Consignee_Addr_4);
  PARAMETER(PAR.ED_Consignee_State);
  PARAMETER(PAR.ED_Consignee_Postal);
  PARAMETER(PAR.ED_Consignee_Country_Code);
  PARAMETER(DB1.ED_Plant_Location_City);
  PARAMETER(DB1.ED_Plant_Location_State);
  PARAMETER(PAR.ED_Plant_Number);
  PARAMETER(DB1.ED_Processing_Plant_Sts);
  PARAMETER(DB1.ED_Attachment_Subtype);
  PARAMETER(DB1.ED_Attachment_Type_Sts);
  PARAMETER(DB1.ED_Xlate_Desc_to_Country);
  PARAMETER(DB1.ED_Unmarked_Txt);
  PARAMETER(PAR.ED_Shipping_Marks_Txt);
  PARAMETER(DB1.ED_Date_of_Slaughter);
  PARAMETER(DB1.ED_Place_of_Slaughter_Txt);
  PARAMETER(DB1.ED_Date_of_Processing);
  PARAMETER(DB1.ED_Place_of_processing_Tx);
  PARAMETER(DB1.ED_Continue_Comment_Txt);
  PARAMETER(DB1.ED_Remark_Constant_1);
  PARAMETER(DB1.ED_Remark_Constant_2);
  PARAMETER(DB1.ED_Remark_Constant_3);
  PARAMETER(DB1.ED_Remark_Constant_4);
  PARAMETER(DB1.ED_Remark_Constant_5);
  PARAMETER(DB1.ED_Remark_Constant_7);
  PARAMETER(DB1.ED_Remark_Constant_8);
  PARAMETER(DB1.ED_Certify_that_the_meat);
  PARAMETER(DB1.ED_Inspector_Name);
  PARAMETER(PAR.ED_Origin_Country);
  PARAMETER(DB1.ED_Port_of_Loading);
  PARAMETER(PAR.ED_Transportion);
  PARAMETER(DB1.ED_Seal_Number_1);
  PARAMETER(DB1.ED_Seal_Number_2);
  PARAMETER(DB1.ED_Can_Import_Cntrl_Nm);
  PARAMETER(DB1.ED_Can_Import_Cntrl_Ad_1);
  PARAMETER(DB1.ED_Can_Import_Cntrl_Ad_2);
  PARAMETER(DB1.ED_Can_Import_Cntrl_Fax);
  PARAMETER(DB1.ED_Can_Import_Cntrl_Phne);
  PARAMETER(DB1.ED_Seaboard_Plant_Fax);
  PARAMETER(DB1.ED_USDA_Cert_Nbr_US);
  PARAMETER(DB1.ED_USDA_Cert_Nbr_CA);
  PARAMETER(DB1.ED_Can_Port_of_Entry);
  PARAMETER(DB1.ED_Can_Reinsp_Est_Nbr);
  PARAMETER(DB1.ED_Can_Reinsp_Est_Name);
  PARAMETER(DB1.ED_Can_Reinsp_Est_City);
  PARAMETER(DB1.ED_Herm_Sealed_Cntr_Sts);
  PARAMETER(DB1.ED_Herm_Sealed_Cntr_Type);
  PARAMETER(DB1.ED_Herm_Sealed_Cntr_p_Crt);
  PARAMETER(DB1.ED_Whole_Bird_Sts);
  PARAMETER(DB1.ED_Marked_Sts);
  PARAMETER(DB1.ED_Tamper_Evident_Sts);
  PARAMETER(DB1.ED_Plant_Contact_Name);
  PARAMETER(DB1.ED_Plant_Contact_Phone);
  PARAMETER(DB1.ED_Modified_Text);
  PARAMETER(DB1.ED_Issued_Crt_for_Exp_Txt);
  PARAMETER(DB1.ED_Species);
  PARAMETER(DB1.ED_Slaughter_Plant_Name);
  PARAMETER(DB1.ED_Slaughter_Plant_Addr_1);
  PARAMETER(DB1.ED_Slaughter_Plant_Addr_2);
  PARAMETER(DB1.ED_Packaging_Plant_Name);
  PARAMETER(DB1.ED_Packaging_Plant_Addr_1);
  PARAMETER(DB1.ED_Packaging_Plant_Addr_2);
  PARAMETER(DB1.ED_Manufact_Plant_Name);
  PARAMETER(DB1.ED_Manufact_Plant_Addr_1);
  PARAMETER(DB1.ED_Manufact_Plant_Addr_2);
  PARAMETER(DB1.ED_USDA_Name_1);
  PARAMETER(DB1.ED_USDA_Name_2);
  PARAMETER(DB1.ED_USDA_Name_3);
  PARAMETER(DB1.ED_Title_of_Official);
  PARAMETER(DB1.ED_Letter_of_Credit_Nbr);
  PARAMETER(DB1.ED_Unused_prd_mo_yr);
  PARAMETER(DB1.ED_Nbr_of_prods_on_1st_pg);
  PARAMETER(DB1.ED_Importer_Name);
  PARAMETER(DB1.ED_Importer_Addr_1);
  PARAMETER(DB1.ED_Importer_Addr_2);
  PARAMETER(DB1.ED_Purchaser_Name);
  PARAMETER(DB1.ED_Purchaser_Addr_1);
  PARAMETER(DB1.ED_Purchaser_Addr_2);
  PARAMETER(DB1.ED_Place_Drct_Shpmnt_Nm);
  PARAMETER(DB1.ED_Place_Drct_Shpmnt_Ad_1);
  PARAMETER(DB1.ED_Place_Drct_Shpmnt_Ad_2);
  PARAMETER(DB1.ED_Place_Drct_Shpmnt_Ad_3);
  PARAMETER(DB1.ED_Currency);
  PARAMETER(DB1.ED_Conditions_of_Sale);
  PARAMETER(DB1.ED_Total_Unit_Price);
  PARAMETER(DB1.ED_Invoice_Total);
  PARAMETER(DB1.ED_Live_with_PHIS);
  PARAMETER(DB1.ED_Print_Status);
  PARAMETER(DB1.ED_Total_Net_Weight_lbs);
  PARAMETER(DB1.ED_Total_Net_Weight_MT);
  PARAMETER(PAR.ED_Nbr_of_Packages);
  PARAMETER(DB1.ED_Customer_PO_#);
  PARAMETER(PAR.ED_Total_Gross_Weight_lbs);
  PARAMETER(DB1.ED_Total_Gross_Weight_MT);
  PARAMETER(DB1.ED_Plant_Number_Dtl);
  PARAMETER(DB1.ED_Language_Xlate_Desc_2);
  PARAMETER(PAR.ED_Slaughter_Date_CofE_3);
  PARAMETER(DB1.ED_Production_mo_yr_ln_3);
  PARAMETER(DB1.ED_Remark_Constant_6);
  PARAMETER(DB1.ED_Allow_Print_bef_Ship);
  PARAMETER(DB1.ED_Cert_of_Orig_Sbd_addr);
  PARAMETER(DB1.ED_Use_item_label_1_2);
  PARAMETER(DB1.ED_Slg_Proc_Date_Format);
  PARAMETER(PAR.ED_Total_Package_UOM);
  PARAMETER(PAR.ED_Export_Certificate_Nbr);
  PARAMETER(DB1.ED_Sail_Date);
  PARAMETER(DB1.ED_Sworn_on_Date);
  PARAMETER(DB1.ED_Consignee_Address_Nbr);
  PARAMETER(DB1.ED_Form_Identification_Tx);
  PARAMETER(DB1.ED_Cold_Storage_Name);
  PARAMETER(DB1.ED_Cold_Storage_Addr_1);
  PARAMETER(DB1.ED_Cold_Storage_Addr_2);
  PARAMETER(DB1.ED_Cold_Storage_Plant_Nbr);
  PARAMETER(DB1.ED_Slaughter_Date_CofE_1);
  PARAMETER(DB1.ED_Production_mo_yr_ln_1);
  PARAMETER(DB1.ED_Production_mo_yr_ln_2);
  PARAMETER(PAR.ED_Booking_Nbr);
  PARAMETER(DB1.ED_Document_Date);
  PARAMETER(DB1.ED_Packing_Date);
  PARAMETER(DB1.ED_Expiration_Date);
  PARAMETER(DB1.ED_Packing_Date_To);
  PARAMETER(DB1.ED_Unused_Date_2);
  PARAMETER(DB1.ED_Print_Kilograms);
  PARAMETER(DB1.ED_MPR_Canadian_Province);
  PARAMETER(DB1.ED_Container_Nbrs);
  PARAMETER(DB1.ED_Slaughter_Date_CofE_2);
  PARAMETER(DB1.ED_Submit_Status);
  PARAMETER(DB1.EDOH_Unused_Sts_2);
  PARAMETER(DB1.EDOH_Unused_Text_1);
  PARAMETER(DB1.EDOH_Unused_Text_2);
  PARAMETER(DB1.EDOH_Unused_Number_1);
  PARAMETER(DB1.EDOH_Unused_Date_1);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing after Data read

   CASE;

   // IF DB1.ED Export Document Type is MPD
   IF DB1.ED_Export_Document_Type = 'H';

   // OR DB1.ED Export Document Type is 9290/9285/9295/9115/9450
   OR DB1.ED_Export_Document_Type = 'E';

   //?The H and or the E record are the only records that we would
   //?want to write out the comments records
   //?on the A record even if the consignee or consignor are
   //?changed do not write out these records
   //?R16637 DN 09/10/20-Pass in New Consignor/Consignee Fields.
   // Call program Rtv/Consignor/ConsigneXF.
   CALL PROGRAM(Rtv/Consignor/ConsigneXF) ('PNVIXFR');
   PARAMETER(JOB.*PROGRAM);
   PARAMETER(DB1.ED_Consignor_Name);
   PARAMETER(DB1.ED_Consignor_Addr_1);
   PARAMETER(DB1.ED_Consignor_Addr_2);
   PARAMETER(DB1.ED_Consignor_Addr_3);
   PARAMETER(DB1.ED_Consignor_Addr_4);
   PARAMETER(DB1.ED_Consignor_State);
   PARAMETER(DB1.ED_Consignor_Postal);
   PARAMETER(DB1.ED_Consignor_Country_Code);
   PARAMETER(DB1.ED_Consignee_Name);
   PARAMETER(DB1.ED_Consignee_Addr_1);
   PARAMETER(DB1.ED_Consignee_Addr_2);
   PARAMETER(DB1.ED_Consignee_Addr_3);
   PARAMETER(DB1.ED_Consignee_Addr_4);
   PARAMETER(DB1.ED_Consignee_State);
   PARAMETER(DB1.ED_Consignee_Postal);
   PARAMETER(DB1.ED_Consignee_Country_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.ED_Export_Document_Type);
   PARAMETER(PAR.Country_Code);
   PARAMETER(PAR.ED_Area_Office);
   PARAMETER(PAR.ED_Destination);
   PARAMETER(PAR.ED_Consignor_Name);
   PARAMETER(PAR.ED_Consignor_Addr_1);
   PARAMETER(PAR.ED_Consignor_Addr_2);
   PARAMETER(PAR.ED_Consignor_Addr_3);
   PARAMETER(PAR.ED_Consignor_Addr_4);
   PARAMETER(PAR.ED_Consignor_State);
   PARAMETER(PAR.ED_Consignor_Postal);
   PARAMETER(PAR.ED_Consignor_Country_Code);
   PARAMETER(PAR.ED_Consignee_Name);
   PARAMETER(PAR.ED_Consignee_Addr_1);
   PARAMETER(PAR.ED_Consignee_Addr_2);
   PARAMETER(PAR.ED_Consignee_Addr_3);
   PARAMETER(PAR.ED_Consignee_Addr_4);
   PARAMETER(PAR.ED_Consignee_State);
   PARAMETER(PAR.ED_Consignee_Postal);
   PARAMETER(PAR.ED_Consignee_Country_Code);

   ENDIF;

   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Korean form 9305  and all others
  CASE;

  // IF DB1.Country Code is Korea
  IF DB1.Country_Code = 'KOR';

  //?dont change plant on all other Korean forms
  //?R16637 DN 09/10/20-Set New Consignor Flds to DB1 & Consignee to PAR Ctxt.
  //?3/11/21 RMC WHD 75298 -- DO change on APPL,it's to be the same on all docs
  EXECUTE FUNCTION(Chg Exp Doc Order Hdr  CH) TYPE(CHGOBJ) FILE(PDMRREP)          AC1523843;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.ED_Export_Document_Type);
  PARAMETER(DB1.Country_Code);
  PARAMETER(DB1.ED_Area_Office);
  PARAMETER(PAR.ED_Destination);
  PARAMETER(PAR.ED_Consignor_Name);
  PARAMETER(PAR.ED_Consignor_Addr_1);
  PARAMETER(PAR.ED_Consignor_Addr_2);
  PARAMETER(PAR.ED_Consignor_Addr_3);
  PARAMETER(PAR.ED_Consignor_Addr_4);
  PARAMETER(PAR.ED_Consignor_State);
  PARAMETER(PAR.ED_Consignor_Postal);
  PARAMETER(PAR.ED_Consignor_Country_Code);
  PARAMETER(PAR.ED_Consignee_Name);
  PARAMETER(PAR.ED_Consignee_Addr_1);
  PARAMETER(PAR.ED_Consignee_Addr_2);
  PARAMETER(PAR.ED_Consignee_Addr_3);
  PARAMETER(PAR.ED_Consignee_Addr_4);
  PARAMETER(PAR.ED_Consignee_State);
  PARAMETER(PAR.ED_Consignee_Postal);
  PARAMETER(PAR.ED_Consignee_Country_Code);
  PARAMETER(DB1.ED_Plant_Location_City);
  PARAMETER(DB1.ED_Plant_Location_State);
  PARAMETER(DB1.ED_Plant_Number);
  PARAMETER(DB1.ED_Processing_Plant_Sts);
  PARAMETER(DB1.ED_Attachment_Subtype);
  PARAMETER(DB1.ED_Attachment_Type_Sts);
  PARAMETER(DB1.ED_Xlate_Desc_to_Country);
  PARAMETER(DB1.ED_Unmarked_Txt);
  PARAMETER(PAR.ED_Shipping_Marks_Txt);
  PARAMETER(DB1.ED_Date_of_Slaughter);
  PARAMETER(DB1.ED_Place_of_Slaughter_Txt);
  PARAMETER(DB1.ED_Date_of_Processing);
  PARAMETER(DB1.ED_Place_of_processing_Tx);
  PARAMETER(DB1.ED_Continue_Comment_Txt);
  PARAMETER(DB1.ED_Remark_Constant_1);
  PARAMETER(DB1.ED_Remark_Constant_2);
  PARAMETER(DB1.ED_Remark_Constant_3);
  PARAMETER(DB1.ED_Remark_Constant_4);
  PARAMETER(DB1.ED_Remark_Constant_5);
  PARAMETER(DB1.ED_Remark_Constant_7);
  PARAMETER(DB1.ED_Remark_Constant_8);
  PARAMETER(DB1.ED_Certify_that_the_meat);
  PARAMETER(DB1.ED_Inspector_Name);
  PARAMETER(PAR.ED_Origin_Country);
  PARAMETER(DB1.ED_Port_of_Loading);
  PARAMETER(PAR.ED_Transportion);
  PARAMETER(DB1.ED_Seal_Number_1);
  PARAMETER(DB1.ED_Seal_Number_2);
  PARAMETER(DB1.ED_Can_Import_Cntrl_Nm);
  PARAMETER(DB1.ED_Can_Import_Cntrl_Ad_1);
  PARAMETER(DB1.ED_Can_Import_Cntrl_Ad_2);
  PARAMETER(DB1.ED_Can_Import_Cntrl_Fax);
  PARAMETER(DB1.ED_Can_Import_Cntrl_Phne);
  PARAMETER(DB1.ED_Seaboard_Plant_Fax);
  PARAMETER(DB1.ED_USDA_Cert_Nbr_US);
  PARAMETER(DB1.ED_USDA_Cert_Nbr_CA);
  PARAMETER(DB1.ED_Can_Port_of_Entry);
  PARAMETER(DB1.ED_Can_Reinsp_Est_Nbr);
  PARAMETER(DB1.ED_Can_Reinsp_Est_Name);
  PARAMETER(DB1.ED_Can_Reinsp_Est_City);
  PARAMETER(DB1.ED_Herm_Sealed_Cntr_Sts);
  PARAMETER(DB1.ED_Herm_Sealed_Cntr_Type);
  PARAMETER(DB1.ED_Herm_Sealed_Cntr_p_Crt);
  PARAMETER(DB1.ED_Whole_Bird_Sts);
  PARAMETER(DB1.ED_Marked_Sts);
  PARAMETER(DB1.ED_Tamper_Evident_Sts);
  PARAMETER(DB1.ED_Plant_Contact_Name);
  PARAMETER(DB1.ED_Plant_Contact_Phone);
  PARAMETER(DB1.ED_Modified_Text);
  PARAMETER(DB1.ED_Issued_Crt_for_Exp_Txt);
  PARAMETER(DB1.ED_Species);
  PARAMETER(DB1.ED_Slaughter_Plant_Name);
  PARAMETER(DB1.ED_Slaughter_Plant_Addr_1);
  PARAMETER(DB1.ED_Slaughter_Plant_Addr_2);
  PARAMETER(DB1.ED_Packaging_Plant_Name);
  PARAMETER(DB1.ED_Packaging_Plant_Addr_1);
  PARAMETER(DB1.ED_Packaging_Plant_Addr_2);
  PARAMETER(DB1.ED_Manufact_Plant_Name);
  PARAMETER(DB1.ED_Manufact_Plant_Addr_1);
  PARAMETER(DB1.ED_Manufact_Plant_Addr_2);
  PARAMETER(DB1.ED_USDA_Name_1);
  PARAMETER(DB1.ED_USDA_Name_2);
  PARAMETER(DB1.ED_USDA_Name_3);
  PARAMETER(DB1.ED_Title_of_Official);
  PARAMETER(DB1.ED_Letter_of_Credit_Nbr);
  PARAMETER(DB1.ED_Unused_prd_mo_yr);
  PARAMETER(DB1.ED_Nbr_of_prods_on_1st_pg);
  PARAMETER(DB1.ED_Importer_Name);
  PARAMETER(DB1.ED_Importer_Addr_1);
  PARAMETER(DB1.ED_Importer_Addr_2);
  PARAMETER(DB1.ED_Purchaser_Name);
  PARAMETER(DB1.ED_Purchaser_Addr_1);
  PARAMETER(DB1.ED_Purchaser_Addr_2);
  PARAMETER(DB1.ED_Place_Drct_Shpmnt_Nm);
  PARAMETER(DB1.ED_Place_Drct_Shpmnt_Ad_1);
  PARAMETER(DB1.ED_Place_Drct_Shpmnt_Ad_2);
  PARAMETER(DB1.ED_Place_Drct_Shpmnt_Ad_3);
  PARAMETER(DB1.ED_Currency);
  PARAMETER(DB1.ED_Conditions_of_Sale);
  PARAMETER(DB1.ED_Total_Unit_Price);
  PARAMETER(DB1.ED_Invoice_Total);
  PARAMETER(DB1.ED_Live_with_PHIS);
  PARAMETER(DB1.ED_Print_Status);
  PARAMETER(DB1.ED_Total_Net_Weight_lbs);
  PARAMETER(DB1.ED_Total_Net_Weight_MT);
  PARAMETER(PAR.ED_Nbr_of_Packages);
  PARAMETER(DB1.ED_Customer_PO_#);
  PARAMETER(PAR.ED_Total_Gross_Weight_lbs);
  PARAMETER(DB1.ED_Total_Gross_Weight_MT);
  PARAMETER(DB1.ED_Plant_Number_Dtl);
  PARAMETER(DB1.ED_Language_Xlate_Desc_2);
  PARAMETER(PAR.ED_Slaughter_Date_CofE_3);
  PARAMETER(DB1.ED_Production_mo_yr_ln_3);
  PARAMETER(DB1.ED_Remark_Constant_6);
  PARAMETER(DB1.ED_Allow_Print_bef_Ship);
  PARAMETER(DB1.ED_Cert_of_Orig_Sbd_addr);
  PARAMETER(DB1.ED_Use_item_label_1_2);
  PARAMETER(DB1.ED_Slg_Proc_Date_Format);
  PARAMETER(PAR.ED_Total_Package_UOM);
  PARAMETER(PAR.ED_Export_Certificate_Nbr);
  PARAMETER(DB1.ED_Sail_Date);
  PARAMETER(DB1.ED_Sworn_on_Date);
  PARAMETER(DB1.ED_Consignee_Address_Nbr);
  PARAMETER(DB1.ED_Form_Identification_Tx);
  PARAMETER(DB1.ED_Cold_Storage_Name);
  PARAMETER(DB1.ED_Cold_Storage_Addr_1);
  PARAMETER(DB1.ED_Cold_Storage_Addr_2);
  PARAMETER(DB1.ED_Cold_Storage_Plant_Nbr);
  PARAMETER(DB1.ED_Slaughter_Date_CofE_1);
  PARAMETER(DB1.ED_Production_mo_yr_ln_1);
  PARAMETER(DB1.ED_Production_mo_yr_ln_2);
  PARAMETER(PAR.ED_Booking_Nbr);
  PARAMETER(DB1.ED_Document_Date);
  PARAMETER(DB1.ED_Packing_Date);
  PARAMETER(DB1.ED_Expiration_Date);
  PARAMETER(DB1.ED_Packing_Date_To);
  PARAMETER(DB1.ED_Unused_Date_2);
  PARAMETER(DB1.ED_Print_Kilograms);
  PARAMETER(DB1.ED_MPR_Canadian_Province);
  PARAMETER(DB1.ED_Container_Nbrs);
  PARAMETER(DB1.ED_Slaughter_Date_CofE_2);
  PARAMETER(DB1.ED_Submit_Status);
  PARAMETER(DB1.EDOH_Unused_Sts_2);
  PARAMETER(DB1.EDOH_Unused_Text_1);
  PARAMETER(DB1.EDOH_Unused_Text_2);
  PARAMETER(DB1.EDOH_Unused_Number_1);
  PARAMETER(DB1.EDOH_Unused_Date_1);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing after Data read

   CASE;

   // IF DB1.ED Export Document Type is MPD
   IF DB1.ED_Export_Document_Type = 'H';

   // OR DB1.ED Export Document Type is 9290/9285/9295/9115/9450
   OR DB1.ED_Export_Document_Type = 'E';

   //?The H and or the E record are the only records that we would
   //?want to write out the comments records
   //?on the A record even if the consignee or consignor are
   //?changed do not write out these records
   //?R16637 DN 09/10/20-Pass in New Consignor/Consignee Fields.
   // Call program Rtv/Consignor/ConsigneXF.
   CALL PROGRAM(Rtv/Consignor/ConsigneXF) ('PNVIXFR');
   PARAMETER(JOB.*PROGRAM);
   PARAMETER(DB1.ED_Consignor_Name);
   PARAMETER(DB1.ED_Consignor_Addr_1);
   PARAMETER(DB1.ED_Consignor_Addr_2);
   PARAMETER(DB1.ED_Consignor_Addr_3);
   PARAMETER(DB1.ED_Consignor_Addr_4);
   PARAMETER(DB1.ED_Consignor_State);
   PARAMETER(DB1.ED_Consignor_Postal);
   PARAMETER(DB1.ED_Consignor_Country_Code);
   PARAMETER(DB1.ED_Consignee_Name);
   PARAMETER(DB1.ED_Consignee_Addr_1);
   PARAMETER(DB1.ED_Consignee_Addr_2);
   PARAMETER(DB1.ED_Consignee_Addr_3);
   PARAMETER(DB1.ED_Consignee_Addr_4);
   PARAMETER(DB1.ED_Consignee_State);
   PARAMETER(DB1.ED_Consignee_Postal);
   PARAMETER(DB1.ED_Consignee_Country_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.ED_Export_Document_Type);
   PARAMETER(PAR.Country_Code);
   PARAMETER(PAR.ED_Area_Office);
   PARAMETER(PAR.ED_Destination);
   PARAMETER(PAR.ED_Consignor_Name);
   PARAMETER(PAR.ED_Consignor_Addr_1);
   PARAMETER(PAR.ED_Consignor_Addr_2);
   PARAMETER(PAR.ED_Consignor_Addr_3);
   PARAMETER(PAR.ED_Consignor_Addr_4);
   PARAMETER(PAR.ED_Consignor_State);
   PARAMETER(PAR.ED_Consignor_Postal);
   PARAMETER(PAR.ED_Consignor_Country_Code);
   PARAMETER(PAR.ED_Consignee_Name);
   PARAMETER(PAR.ED_Consignee_Addr_1);
   PARAMETER(PAR.ED_Consignee_Addr_2);
   PARAMETER(PAR.ED_Consignee_Addr_3);
   PARAMETER(PAR.ED_Consignee_Addr_4);
   PARAMETER(PAR.ED_Consignee_State);
   PARAMETER(PAR.ED_Consignee_Postal);
   PARAMETER(PAR.ED_Consignee_Country_Code);

   ENDIF;

   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?Korean form 9305  and all others
  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF DB1.ED Export Document Type is Application for Export
  IF DB1.ED_Export_Document_Type = 'A';

  //?dont chg consignor -- its the applicant name - Seaboard or Triumph
  //?R16637 DN 09/10/20-Set New Consignor Flds to DB1 & Consignee to PAR Ctxt.
  EXECUTE FUNCTION(Chg Exp Doc Order Hdr  CH) TYPE(CHGOBJ) FILE(PDMRREP)          AC1523843;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.ED_Export_Document_Type);
  PARAMETER(DB1.Country_Code);
  PARAMETER(DB1.ED_Area_Office);
  PARAMETER(DB1.ED_Destination);
  PARAMETER(PAR.ED_Consignor_Name);
  PARAMETER(PAR.ED_Consignor_Addr_1);
  PARAMETER(PAR.ED_Consignor_Addr_2);
  PARAMETER(PAR.ED_Consignor_Addr_3);
  PARAMETER(PAR.ED_Consignor_Addr_4);
  PARAMETER(PAR.ED_Consignor_State);
  PARAMETER(PAR.ED_Consignor_Postal);
  PARAMETER(PAR.ED_Consignor_Country_Code);
  PARAMETER(PAR.ED_Consignee_Name);
  PARAMETER(PAR.ED_Consignee_Addr_1);
  PARAMETER(PAR.ED_Consignee_Addr_2);
  PARAMETER(PAR.ED_Consignee_Addr_3);
  PARAMETER(PAR.ED_Consignee_Addr_4);
  PARAMETER(PAR.ED_Consignee_State);
  PARAMETER(PAR.ED_Consignee_Postal);
  PARAMETER(PAR.ED_Consignee_Country_Code);
  PARAMETER(DB1.ED_Plant_Location_City);
  PARAMETER(DB1.ED_Plant_Location_State);
  PARAMETER(PAR.ED_Plant_Number);
  PARAMETER(DB1.ED_Processing_Plant_Sts);
  PARAMETER(DB1.ED_Attachment_Subtype);
  PARAMETER(DB1.ED_Attachment_Type_Sts);
  PARAMETER(DB1.ED_Xlate_Desc_to_Country);
  PARAMETER(DB1.ED_Unmarked_Txt);
  PARAMETER(PAR.ED_Shipping_Marks_Txt);
  PARAMETER(PAR.ED_Date_of_Slaughter);
  PARAMETER(DB1.ED_Place_of_Slaughter_Txt);
  PARAMETER(PAR.ED_Date_of_Processing);
  PARAMETER(DB1.ED_Place_of_processing_Tx);
  PARAMETER(DB1.ED_Continue_Comment_Txt);
  PARAMETER(DB1.ED_Remark_Constant_1);
  PARAMETER(DB1.ED_Remark_Constant_2);
  PARAMETER(DB1.ED_Remark_Constant_3);
  PARAMETER(DB1.ED_Remark_Constant_4);
  PARAMETER(DB1.ED_Remark_Constant_5);
  PARAMETER(DB1.ED_Remark_Constant_7);
  PARAMETER(DB1.ED_Remark_Constant_8);
  PARAMETER(DB1.ED_Certify_that_the_meat);
  PARAMETER(DB1.ED_Inspector_Name);
  PARAMETER(DB1.ED_Origin_Country);
  PARAMETER(DB1.ED_Port_of_Loading);
  PARAMETER(DB1.ED_Transportion);
  PARAMETER(DB1.ED_Seal_Number_1);
  PARAMETER(DB1.ED_Seal_Number_2);
  PARAMETER(DB1.ED_Can_Import_Cntrl_Nm);
  PARAMETER(DB1.ED_Can_Import_Cntrl_Ad_1);
  PARAMETER(DB1.ED_Can_Import_Cntrl_Ad_2);
  PARAMETER(DB1.ED_Can_Import_Cntrl_Fax);
  PARAMETER(DB1.ED_Can_Import_Cntrl_Phne);
  PARAMETER(DB1.ED_Seaboard_Plant_Fax);
  PARAMETER(DB1.ED_USDA_Cert_Nbr_US);
  PARAMETER(DB1.ED_USDA_Cert_Nbr_CA);
  PARAMETER(DB1.ED_Can_Port_of_Entry);
  PARAMETER(DB1.ED_Can_Reinsp_Est_Nbr);
  PARAMETER(DB1.ED_Can_Reinsp_Est_Name);
  PARAMETER(DB1.ED_Can_Reinsp_Est_City);
  PARAMETER(DB1.ED_Herm_Sealed_Cntr_Sts);
  PARAMETER(DB1.ED_Herm_Sealed_Cntr_Type);
  PARAMETER(DB1.ED_Herm_Sealed_Cntr_p_Crt);
  PARAMETER(DB1.ED_Whole_Bird_Sts);
  PARAMETER(DB1.ED_Marked_Sts);
  PARAMETER(DB1.ED_Tamper_Evident_Sts);
  PARAMETER(DB1.ED_Plant_Contact_Name);
  PARAMETER(DB1.ED_Plant_Contact_Phone);
  PARAMETER(DB1.ED_Modified_Text);
  PARAMETER(DB1.ED_Issued_Crt_for_Exp_Txt);
  PARAMETER(DB1.ED_Species);
  PARAMETER(DB1.ED_Slaughter_Plant_Name);
  PARAMETER(DB1.ED_Slaughter_Plant_Addr_1);
  PARAMETER(DB1.ED_Slaughter_Plant_Addr_2);
  PARAMETER(DB1.ED_Packaging_Plant_Name);
  PARAMETER(DB1.ED_Packaging_Plant_Addr_1);
  PARAMETER(DB1.ED_Packaging_Plant_Addr_2);
  PARAMETER(DB1.ED_Manufact_Plant_Name);
  PARAMETER(DB1.ED_Manufact_Plant_Addr_1);
  PARAMETER(DB1.ED_Manufact_Plant_Addr_2);
  PARAMETER(DB1.ED_USDA_Name_1);
  PARAMETER(DB1.ED_USDA_Name_2);
  PARAMETER(DB1.ED_USDA_Name_3);
  PARAMETER(DB1.ED_Title_of_Official);
  PARAMETER(DB1.ED_Letter_of_Credit_Nbr);
  PARAMETER(DB1.ED_Unused_prd_mo_yr);
  PARAMETER(DB1.ED_Nbr_of_prods_on_1st_pg);
  PARAMETER(DB1.ED_Importer_Name);
  PARAMETER(DB1.ED_Importer_Addr_1);
  PARAMETER(DB1.ED_Importer_Addr_2);
  PARAMETER(DB1.ED_Purchaser_Name);
  PARAMETER(DB1.ED_Purchaser_Addr_1);
  PARAMETER(DB1.ED_Purchaser_Addr_2);
  PARAMETER(DB1.ED_Place_Drct_Shpmnt_Nm);
  PARAMETER(DB1.ED_Place_Drct_Shpmnt_Ad_1);
  PARAMETER(DB1.ED_Place_Drct_Shpmnt_Ad_2);
  PARAMETER(DB1.ED_Place_Drct_Shpmnt_Ad_3);
  PARAMETER(DB1.ED_Currency);
  PARAMETER(DB1.ED_Conditions_of_Sale);
  PARAMETER(DB1.ED_Total_Unit_Price);
  PARAMETER(DB1.ED_Invoice_Total);
  PARAMETER(DB1.ED_Live_with_PHIS);
  PARAMETER(DB1.ED_Print_Status);
  PARAMETER(PAR.ED_Total_Net_Weight_lbs);
  PARAMETER(PAR.ED_Total_Net_Weight_MT);
  PARAMETER(PAR.ED_Nbr_of_Packages);
  PARAMETER(DB1.ED_Customer_PO_#);
  PARAMETER(PAR.ED_Total_Gross_Weight_lbs);
  PARAMETER(DB1.ED_Total_Gross_Weight_MT);
  PARAMETER(DB1.ED_Plant_Number_Dtl);
  PARAMETER(DB1.ED_Language_Xlate_Desc_2);
  PARAMETER(PAR.ED_Slaughter_Date_CofE_3);
  PARAMETER(DB1.ED_Production_mo_yr_ln_3);
  PARAMETER(DB1.ED_Remark_Constant_6);
  PARAMETER(DB1.ED_Allow_Print_bef_Ship);
  PARAMETER(DB1.ED_Cert_of_Orig_Sbd_addr);
  PARAMETER(DB1.ED_Use_item_label_1_2);
  PARAMETER(DB1.ED_Slg_Proc_Date_Format);
  PARAMETER(PAR.ED_Total_Package_UOM);
  PARAMETER(PAR.ED_Export_Certificate_Nbr);
  PARAMETER(DB1.ED_Sail_Date);
  PARAMETER(DB1.ED_Sworn_on_Date);
  PARAMETER(DB1.ED_Consignee_Address_Nbr);
  PARAMETER(DB1.ED_Form_Identification_Tx);
  PARAMETER(DB1.ED_Cold_Storage_Name);
  PARAMETER(DB1.ED_Cold_Storage_Addr_1);
  PARAMETER(DB1.ED_Cold_Storage_Addr_2);
  PARAMETER(DB1.ED_Cold_Storage_Plant_Nbr);
  PARAMETER(DB1.ED_Slaughter_Date_CofE_1);
  PARAMETER(DB1.ED_Production_mo_yr_ln_1);
  PARAMETER(DB1.ED_Production_mo_yr_ln_2);
  PARAMETER(PAR.ED_Booking_Nbr);
  PARAMETER(DB1.ED_Document_Date);
  PARAMETER(DB1.ED_Packing_Date);
  PARAMETER(DB1.ED_Expiration_Date);
  PARAMETER(DB1.ED_Packing_Date_To);
  PARAMETER(DB1.ED_Unused_Date_2);
  PARAMETER(DB1.ED_Print_Kilograms);
  PARAMETER(DB1.ED_MPR_Canadian_Province);
  PARAMETER(DB1.ED_Container_Nbrs);
  PARAMETER(DB1.ED_Slaughter_Date_CofE_2);
  PARAMETER(DB1.ED_Submit_Status);
  PARAMETER(DB1.EDOH_Unused_Sts_2);
  PARAMETER(DB1.EDOH_Unused_Text_1);
  PARAMETER(DB1.EDOH_Unused_Text_2);
  PARAMETER(DB1.EDOH_Unused_Number_1);
  PARAMETER(DB1.EDOH_Unused_Date_1);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing after Data read

   CASE;

   // IF DB1.ED Export Document Type is MPD
   IF DB1.ED_Export_Document_Type = 'H';

   // OR DB1.ED Export Document Type is 9290/9285/9295/9115/9450
   OR DB1.ED_Export_Document_Type = 'E';

   //?The H and or the E record are the only records that we would
   //?want to write out the comments records
   //?on the A record even if the consignee or consignor are
   //?changed do not write out these records
   //?R16637 DN 09/10/20-Pass in New Consignor/Consignee Fields.
   // Call program Rtv/Consignor/ConsigneXF.
   CALL PROGRAM(Rtv/Consignor/ConsigneXF) ('PNVIXFR');
   PARAMETER(JOB.*PROGRAM);
   PARAMETER(DB1.ED_Consignor_Name);
   PARAMETER(DB1.ED_Consignor_Addr_1);
   PARAMETER(DB1.ED_Consignor_Addr_2);
   PARAMETER(DB1.ED_Consignor_Addr_3);
   PARAMETER(DB1.ED_Consignor_Addr_4);
   PARAMETER(DB1.ED_Consignor_State);
   PARAMETER(DB1.ED_Consignor_Postal);
   PARAMETER(DB1.ED_Consignor_Country_Code);
   PARAMETER(DB1.ED_Consignee_Name);
   PARAMETER(DB1.ED_Consignee_Addr_1);
   PARAMETER(DB1.ED_Consignee_Addr_2);
   PARAMETER(DB1.ED_Consignee_Addr_3);
   PARAMETER(DB1.ED_Consignee_Addr_4);
   PARAMETER(DB1.ED_Consignee_State);
   PARAMETER(DB1.ED_Consignee_Postal);
   PARAMETER(DB1.ED_Consignee_Country_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.ED_Export_Document_Type);
   PARAMETER(PAR.Country_Code);
   PARAMETER(PAR.ED_Area_Office);
   PARAMETER(PAR.ED_Destination);
   PARAMETER(PAR.ED_Consignor_Name);
   PARAMETER(PAR.ED_Consignor_Addr_1);
   PARAMETER(PAR.ED_Consignor_Addr_2);
   PARAMETER(PAR.ED_Consignor_Addr_3);
   PARAMETER(PAR.ED_Consignor_Addr_4);
   PARAMETER(PAR.ED_Consignor_State);
   PARAMETER(PAR.ED_Consignor_Postal);
   PARAMETER(PAR.ED_Consignor_Country_Code);
   PARAMETER(PAR.ED_Consignee_Name);
   PARAMETER(PAR.ED_Consignee_Addr_1);
   PARAMETER(PAR.ED_Consignee_Addr_2);
   PARAMETER(PAR.ED_Consignee_Addr_3);
   PARAMETER(PAR.ED_Consignee_Addr_4);
   PARAMETER(PAR.ED_Consignee_State);
   PARAMETER(PAR.ED_Consignee_Postal);
   PARAMETER(PAR.ED_Consignee_Country_Code);

   ENDIF;

   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF DB1.ED Export Document Type is Mexican Letterheads
  IF DB1.ED_Export_Document_Type = 'N'/'L'/'M'/'P'/'Q'/'R'/'S'/'T';

  //?R16637 DN 09/10/20-Set New Consignor/Consignee Fields to DB1 Ctxt.
  EXECUTE FUNCTION(Chg Exp Doc Order Hdr  CH) TYPE(CHGOBJ) FILE(PDMRREP)          AC1523843;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.ED_Export_Document_Type);
  PARAMETER(DB1.Country_Code);
  PARAMETER(DB1.ED_Area_Office);
  PARAMETER(DB1.ED_Destination);
  PARAMETER(DB1.ED_Consignor_Name);
  PARAMETER(DB1.ED_Consignor_Addr_1);
  PARAMETER(DB1.ED_Consignor_Addr_2);
  PARAMETER(DB1.ED_Consignor_Addr_3);
  PARAMETER(DB1.ED_Consignor_Addr_4);
  PARAMETER(DB1.ED_Consignor_State);
  PARAMETER(DB1.ED_Consignor_Postal);
  PARAMETER(DB1.ED_Consignor_Country_Code);
  PARAMETER(DB1.ED_Consignee_Name);
  PARAMETER(DB1.ED_Consignee_Addr_1);
  PARAMETER(DB1.ED_Consignee_Addr_2);
  PARAMETER(DB1.ED_Consignee_Addr_3);
  PARAMETER(DB1.ED_Consignee_Addr_4);
  PARAMETER(DB1.ED_Consignee_State);
  PARAMETER(DB1.ED_Consignee_Postal);
  PARAMETER(DB1.ED_Consignee_Country_Code);
  PARAMETER(DB1.ED_Plant_Location_City);
  PARAMETER(DB1.ED_Plant_Location_State);
  PARAMETER(DB1.ED_Plant_Number);
  PARAMETER(DB1.ED_Processing_Plant_Sts);
  PARAMETER(DB1.ED_Attachment_Subtype);
  PARAMETER(DB1.ED_Attachment_Type_Sts);
  PARAMETER(DB1.ED_Xlate_Desc_to_Country);
  PARAMETER(DB1.ED_Unmarked_Txt);
  PARAMETER(DB1.ED_Shipping_Marks_Txt);
  PARAMETER(DB1.ED_Date_of_Slaughter);
  PARAMETER(DB1.ED_Place_of_Slaughter_Txt);
  PARAMETER(DB1.ED_Date_of_Processing);
  PARAMETER(DB1.ED_Place_of_processing_Tx);
  PARAMETER(DB1.ED_Continue_Comment_Txt);
  PARAMETER(DB1.ED_Remark_Constant_1);
  PARAMETER(DB1.ED_Remark_Constant_2);
  PARAMETER(DB1.ED_Remark_Constant_3);
  PARAMETER(DB1.ED_Remark_Constant_4);
  PARAMETER(DB1.ED_Remark_Constant_5);
  PARAMETER(DB1.ED_Remark_Constant_7);
  PARAMETER(DB1.ED_Remark_Constant_8);
  PARAMETER(DB1.ED_Certify_that_the_meat);
  PARAMETER(DB1.ED_Inspector_Name);
  PARAMETER(DB1.ED_Origin_Country);
  PARAMETER(DB1.ED_Port_of_Loading);
  PARAMETER(DB1.ED_Transportion);
  PARAMETER(DB1.ED_Seal_Number_1);
  PARAMETER(DB1.ED_Seal_Number_2);
  PARAMETER(DB1.ED_Can_Import_Cntrl_Nm);
  PARAMETER(DB1.ED_Can_Import_Cntrl_Ad_1);
  PARAMETER(DB1.ED_Can_Import_Cntrl_Ad_2);
  PARAMETER(DB1.ED_Can_Import_Cntrl_Fax);
  PARAMETER(DB1.ED_Can_Import_Cntrl_Phne);
  PARAMETER(DB1.ED_Seaboard_Plant_Fax);
  PARAMETER(DB1.ED_USDA_Cert_Nbr_US);
  PARAMETER(DB1.ED_USDA_Cert_Nbr_CA);
  PARAMETER(DB1.ED_Can_Port_of_Entry);
  PARAMETER(DB1.ED_Can_Reinsp_Est_Nbr);
  PARAMETER(DB1.ED_Can_Reinsp_Est_Name);
  PARAMETER(DB1.ED_Can_Reinsp_Est_City);
  PARAMETER(DB1.ED_Herm_Sealed_Cntr_Sts);
  PARAMETER(DB1.ED_Herm_Sealed_Cntr_Type);
  PARAMETER(DB1.ED_Herm_Sealed_Cntr_p_Crt);
  PARAMETER(DB1.ED_Whole_Bird_Sts);
  PARAMETER(DB1.ED_Marked_Sts);
  PARAMETER(DB1.ED_Tamper_Evident_Sts);
  PARAMETER(DB1.ED_Plant_Contact_Name);
  PARAMETER(DB1.ED_Plant_Contact_Phone);
  PARAMETER(DB1.ED_Modified_Text);
  PARAMETER(DB1.ED_Issued_Crt_for_Exp_Txt);
  PARAMETER(DB1.ED_Species);
  PARAMETER(DB1.ED_Slaughter_Plant_Name);
  PARAMETER(DB1.ED_Slaughter_Plant_Addr_1);
  PARAMETER(DB1.ED_Slaughter_Plant_Addr_2);
  PARAMETER(DB1.ED_Packaging_Plant_Name);
  PARAMETER(DB1.ED_Packaging_Plant_Addr_1);
  PARAMETER(DB1.ED_Packaging_Plant_Addr_2);
  PARAMETER(DB1.ED_Manufact_Plant_Name);
  PARAMETER(DB1.ED_Manufact_Plant_Addr_1);
  PARAMETER(DB1.ED_Manufact_Plant_Addr_2);
  PARAMETER(DB1.ED_USDA_Name_1);
  PARAMETER(DB1.ED_USDA_Name_2);
  PARAMETER(DB1.ED_USDA_Name_3);
  PARAMETER(DB1.ED_Title_of_Official);
  PARAMETER(DB1.ED_Letter_of_Credit_Nbr);
  PARAMETER(DB1.ED_Unused_prd_mo_yr);
  PARAMETER(DB1.ED_Nbr_of_prods_on_1st_pg);
  PARAMETER(DB1.ED_Importer_Name);
  PARAMETER(DB1.ED_Importer_Addr_1);
  PARAMETER(DB1.ED_Importer_Addr_2);
  PARAMETER(DB1.ED_Purchaser_Name);
  PARAMETER(DB1.ED_Purchaser_Addr_1);
  PARAMETER(DB1.ED_Purchaser_Addr_2);
  PARAMETER(DB1.ED_Place_Drct_Shpmnt_Nm);
  PARAMETER(DB1.ED_Place_Drct_Shpmnt_Ad_1);
  PARAMETER(DB1.ED_Place_Drct_Shpmnt_Ad_2);
  PARAMETER(DB1.ED_Place_Drct_Shpmnt_Ad_3);
  PARAMETER(DB1.ED_Currency);
  PARAMETER(DB1.ED_Conditions_of_Sale);
  PARAMETER(DB1.ED_Total_Unit_Price);
  PARAMETER(DB1.ED_Invoice_Total);
  PARAMETER(DB1.ED_Live_with_PHIS);
  PARAMETER(DB1.ED_Print_Status);
  PARAMETER(DB1.ED_Total_Net_Weight_lbs);
  PARAMETER(DB1.ED_Total_Net_Weight_MT);
  PARAMETER(DB1.ED_Nbr_of_Packages);
  PARAMETER(DB1.ED_Customer_PO_#);
  PARAMETER(DB1.ED_Total_Gross_Weight_lbs);
  PARAMETER(DB1.ED_Total_Gross_Weight_MT);
  PARAMETER(DB1.ED_Plant_Number_Dtl);
  PARAMETER(DB1.ED_Language_Xlate_Desc_2);
  PARAMETER(DB1.ED_Slaughter_Date_CofE_3);
  PARAMETER(DB1.ED_Production_mo_yr_ln_3);
  PARAMETER(DB1.ED_Remark_Constant_6);
  PARAMETER(DB1.ED_Allow_Print_bef_Ship);
  PARAMETER(DB1.ED_Cert_of_Orig_Sbd_addr);
  PARAMETER(DB1.ED_Use_item_label_1_2);
  PARAMETER(DB1.ED_Slg_Proc_Date_Format);
  PARAMETER(DB1.ED_Total_Package_UOM);
  PARAMETER(PAR.ED_Export_Certificate_Nbr);
  PARAMETER(DB1.ED_Sail_Date);
  PARAMETER(DB1.ED_Sworn_on_Date);
  PARAMETER(DB1.ED_Consignee_Address_Nbr);
  PARAMETER(DB1.ED_Form_Identification_Tx);
  PARAMETER(DB1.ED_Cold_Storage_Name);
  PARAMETER(DB1.ED_Cold_Storage_Addr_1);
  PARAMETER(DB1.ED_Cold_Storage_Addr_2);
  PARAMETER(DB1.ED_Cold_Storage_Plant_Nbr);
  PARAMETER(DB1.ED_Slaughter_Date_CofE_1);
  PARAMETER(DB1.ED_Production_mo_yr_ln_1);
  PARAMETER(DB1.ED_Production_mo_yr_ln_2);
  PARAMETER(DB1.ED_Booking_Nbr);
  PARAMETER(DB1.ED_Document_Date);
  PARAMETER(DB1.ED_Packing_Date);
  PARAMETER(DB1.ED_Expiration_Date);
  PARAMETER(DB1.ED_Packing_Date_To);
  PARAMETER(DB1.ED_Unused_Date_2);
  PARAMETER(DB1.ED_Print_Kilograms);
  PARAMETER(DB1.ED_MPR_Canadian_Province);
  PARAMETER(DB1.ED_Container_Nbrs);
  PARAMETER(DB1.ED_Slaughter_Date_CofE_2);
  PARAMETER(DB1.ED_Submit_Status);
  PARAMETER(DB1.EDOH_Unused_Sts_2);
  PARAMETER(DB1.EDOH_Unused_Text_1);
  PARAMETER(DB1.EDOH_Unused_Text_2);
  PARAMETER(DB1.EDOH_Unused_Number_1);
  PARAMETER(DB1.EDOH_Unused_Date_1);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing after Data read

   CASE;

   // IF DB1.ED Export Document Type is MPD
   IF DB1.ED_Export_Document_Type = 'H';

   // OR DB1.ED Export Document Type is 9290/9285/9295/9115/9450
   OR DB1.ED_Export_Document_Type = 'E';

   //?The H and or the E record are the only records that we would
   //?want to write out the comments records
   //?on the A record even if the consignee or consignor are
   //?changed do not write out these records
   //?R16637 DN 09/10/20-Pass in New Consignor/Consignee Fields.
   // Call program Rtv/Consignor/ConsigneXF.
   CALL PROGRAM(Rtv/Consignor/ConsigneXF) ('PNVIXFR');
   PARAMETER(JOB.*PROGRAM);
   PARAMETER(DB1.ED_Consignor_Name);
   PARAMETER(DB1.ED_Consignor_Addr_1);
   PARAMETER(DB1.ED_Consignor_Addr_2);
   PARAMETER(DB1.ED_Consignor_Addr_3);
   PARAMETER(DB1.ED_Consignor_Addr_4);
   PARAMETER(DB1.ED_Consignor_State);
   PARAMETER(DB1.ED_Consignor_Postal);
   PARAMETER(DB1.ED_Consignor_Country_Code);
   PARAMETER(DB1.ED_Consignee_Name);
   PARAMETER(DB1.ED_Consignee_Addr_1);
   PARAMETER(DB1.ED_Consignee_Addr_2);
   PARAMETER(DB1.ED_Consignee_Addr_3);
   PARAMETER(DB1.ED_Consignee_Addr_4);
   PARAMETER(DB1.ED_Consignee_State);
   PARAMETER(DB1.ED_Consignee_Postal);
   PARAMETER(DB1.ED_Consignee_Country_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.ED_Export_Document_Type);
   PARAMETER(PAR.Country_Code);
   PARAMETER(PAR.ED_Area_Office);
   PARAMETER(PAR.ED_Destination);
   PARAMETER(PAR.ED_Consignor_Name);
   PARAMETER(PAR.ED_Consignor_Addr_1);
   PARAMETER(PAR.ED_Consignor_Addr_2);
   PARAMETER(PAR.ED_Consignor_Addr_3);
   PARAMETER(PAR.ED_Consignor_Addr_4);
   PARAMETER(PAR.ED_Consignor_State);
   PARAMETER(PAR.ED_Consignor_Postal);
   PARAMETER(PAR.ED_Consignor_Country_Code);
   PARAMETER(PAR.ED_Consignee_Name);
   PARAMETER(PAR.ED_Consignee_Addr_1);
   PARAMETER(PAR.ED_Consignee_Addr_2);
   PARAMETER(PAR.ED_Consignee_Addr_3);
   PARAMETER(PAR.ED_Consignee_Addr_4);
   PARAMETER(PAR.ED_Consignee_State);
   PARAMETER(PAR.ED_Consignee_Postal);
   PARAMETER(PAR.ED_Consignee_Country_Code);

   ENDIF;

   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF DB1.ED Export Document Type is Form 9060-7 (Casings)
  IF DB1.ED_Export_Document_Type = 'G';

  // OR DB1.Country Code is China
  OR DB1.Country_Code = 'CHN';

  // LCL.ED Nbr of Packages = DB1.ED Nbr of Packages
  LCL.ED_Nbr_of_Packages = DB1.ED_Nbr_of_Packages;

  // LCL.ED Total Net Weight MT = DB1.ED Total Net Weight MT
  LCL.ED_Total_Net_Weight_MT = DB1.ED_Total_Net_Weight_MT;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.ED Nbr of Packages = PAR.ED Nbr of Packages
  LCL.ED_Nbr_of_Packages = PAR.ED_Nbr_of_Packages;

  // LCL.ED Total Net Weight MT = PAR.ED Total Net Weight MT
  LCL.ED_Total_Net_Weight_MT = PAR.ED_Total_Net_Weight_MT;

  ENDIF;

  CASE;

  // IF DB1.Country Code is Japan
  IF DB1.Country_Code = 'JPN';

  //?this is kg --> *100 before printing/displaying it
  // LCL.ED Total Net Weight MT = PAR.ED Total Net Weight MT
  LCL.ED_Total_Net_Weight_MT = PAR.ED_Total_Net_Weight_MT;

  ENDIF;

  //?E00198 RMC 9/15/08  update with par.ED USDA Cert Nbr US
  //?R16637 DN 09/10/20-Set New Consignor/Consignee Fields to PAR Ctxt.
  EXECUTE FUNCTION(Chg Exp Doc Order Hdr  CH) TYPE(CHGOBJ) FILE(PDMRREP)          AC1523843;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.ED_Export_Document_Type);
  PARAMETER(DB1.Country_Code);
  PARAMETER(DB1.ED_Area_Office);
  PARAMETER(DB1.ED_Destination);
  PARAMETER(PAR.ED_Consignor_Name);
  PARAMETER(PAR.ED_Consignor_Addr_1);
  PARAMETER(PAR.ED_Consignor_Addr_2);
  PARAMETER(PAR.ED_Consignor_Addr_3);
  PARAMETER(PAR.ED_Consignor_Addr_4);
  PARAMETER(PAR.ED_Consignor_State);
  PARAMETER(PAR.ED_Consignor_Postal);
  PARAMETER(PAR.ED_Consignor_Country_Code);
  PARAMETER(PAR.ED_Consignee_Name);
  PARAMETER(PAR.ED_Consignee_Addr_1);
  PARAMETER(PAR.ED_Consignee_Addr_2);
  PARAMETER(PAR.ED_Consignee_Addr_3);
  PARAMETER(PAR.ED_Consignee_Addr_4);
  PARAMETER(PAR.ED_Consignee_State);
  PARAMETER(PAR.ED_Consignee_Postal);
  PARAMETER(PAR.ED_Consignee_Country_Code);
  PARAMETER(DB1.ED_Plant_Location_City);
  PARAMETER(DB1.ED_Plant_Location_State);
  PARAMETER(PAR.ED_Plant_Number);
  PARAMETER(DB1.ED_Processing_Plant_Sts);
  PARAMETER(DB1.ED_Attachment_Subtype);
  PARAMETER(DB1.ED_Attachment_Type_Sts);
  PARAMETER(DB1.ED_Xlate_Desc_to_Country);
  PARAMETER(DB1.ED_Unmarked_Txt);
  PARAMETER(PAR.ED_Shipping_Marks_Txt);
  PARAMETER(PAR.ED_Date_of_Slaughter);
  PARAMETER(DB1.ED_Place_of_Slaughter_Txt);
  PARAMETER(PAR.ED_Date_of_Processing);
  PARAMETER(DB1.ED_Place_of_processing_Tx);
  PARAMETER(DB1.ED_Continue_Comment_Txt);
  PARAMETER(DB1.ED_Remark_Constant_1);
  PARAMETER(DB1.ED_Remark_Constant_2);
  PARAMETER(DB1.ED_Remark_Constant_3);
  PARAMETER(DB1.ED_Remark_Constant_4);
  PARAMETER(DB1.ED_Remark_Constant_5);
  PARAMETER(DB1.ED_Remark_Constant_7);
  PARAMETER(DB1.ED_Remark_Constant_8);
  PARAMETER(DB1.ED_Certify_that_the_meat);
  PARAMETER(DB1.ED_Inspector_Name);
  PARAMETER(DB1.ED_Origin_Country);
  PARAMETER(DB1.ED_Port_of_Loading);
  PARAMETER(DB1.ED_Transportion);
  PARAMETER(DB1.ED_Seal_Number_1);
  PARAMETER(DB1.ED_Seal_Number_2);
  PARAMETER(DB1.ED_Can_Import_Cntrl_Nm);
  PARAMETER(DB1.ED_Can_Import_Cntrl_Ad_1);
  PARAMETER(DB1.ED_Can_Import_Cntrl_Ad_2);
  PARAMETER(DB1.ED_Can_Import_Cntrl_Fax);
  PARAMETER(DB1.ED_Can_Import_Cntrl_Phne);
  PARAMETER(DB1.ED_Seaboard_Plant_Fax);
  PARAMETER(PAR.ED_USDA_Cert_Nbr_US);
  PARAMETER(DB1.ED_USDA_Cert_Nbr_CA);
  PARAMETER(DB1.ED_Can_Port_of_Entry);
  PARAMETER(DB1.ED_Can_Reinsp_Est_Nbr);
  PARAMETER(DB1.ED_Can_Reinsp_Est_Name);
  PARAMETER(DB1.ED_Can_Reinsp_Est_City);
  PARAMETER(DB1.ED_Herm_Sealed_Cntr_Sts);
  PARAMETER(DB1.ED_Herm_Sealed_Cntr_Type);
  PARAMETER(DB1.ED_Herm_Sealed_Cntr_p_Crt);
  PARAMETER(DB1.ED_Whole_Bird_Sts);
  PARAMETER(DB1.ED_Marked_Sts);
  PARAMETER(DB1.ED_Tamper_Evident_Sts);
  PARAMETER(DB1.ED_Plant_Contact_Name);
  PARAMETER(DB1.ED_Plant_Contact_Phone);
  PARAMETER(DB1.ED_Modified_Text);
  PARAMETER(DB1.ED_Issued_Crt_for_Exp_Txt);
  PARAMETER(DB1.ED_Species);
  PARAMETER(DB1.ED_Slaughter_Plant_Name);
  PARAMETER(DB1.ED_Slaughter_Plant_Addr_1);
  PARAMETER(DB1.ED_Slaughter_Plant_Addr_2);
  PARAMETER(DB1.ED_Packaging_Plant_Name);
  PARAMETER(DB1.ED_Packaging_Plant_Addr_1);
  PARAMETER(DB1.ED_Packaging_Plant_Addr_2);
  PARAMETER(DB1.ED_Manufact_Plant_Name);
  PARAMETER(DB1.ED_Manufact_Plant_Addr_1);
  PARAMETER(DB1.ED_Manufact_Plant_Addr_2);
  PARAMETER(DB1.ED_USDA_Name_1);
  PARAMETER(DB1.ED_USDA_Name_2);
  PARAMETER(DB1.ED_USDA_Name_3);
  PARAMETER(DB1.ED_Title_of_Official);
  PARAMETER(DB1.ED_Letter_of_Credit_Nbr);
  PARAMETER(DB1.ED_Unused_prd_mo_yr);
  PARAMETER(DB1.ED_Nbr_of_prods_on_1st_pg);
  PARAMETER(DB1.ED_Importer_Name);
  PARAMETER(DB1.ED_Importer_Addr_1);
  PARAMETER(DB1.ED_Importer_Addr_2);
  PARAMETER(DB1.ED_Purchaser_Name);
  PARAMETER(DB1.ED_Purchaser_Addr_1);
  PARAMETER(DB1.ED_Purchaser_Addr_2);
  PARAMETER(DB1.ED_Place_Drct_Shpmnt_Nm);
  PARAMETER(DB1.ED_Place_Drct_Shpmnt_Ad_1);
  PARAMETER(DB1.ED_Place_Drct_Shpmnt_Ad_2);
  PARAMETER(DB1.ED_Place_Drct_Shpmnt_Ad_3);
  PARAMETER(DB1.ED_Currency);
  PARAMETER(DB1.ED_Conditions_of_Sale);
  PARAMETER(DB1.ED_Total_Unit_Price);
  PARAMETER(DB1.ED_Invoice_Total);
  PARAMETER(DB1.ED_Live_with_PHIS);
  PARAMETER(DB1.ED_Print_Status);
  PARAMETER(PAR.ED_Total_Net_Weight_lbs);
  PARAMETER(LCL.ED_Total_Net_Weight_MT);
  PARAMETER(LCL.ED_Nbr_of_Packages);
  PARAMETER(DB1.ED_Customer_PO_#);
  PARAMETER(PAR.ED_Total_Gross_Weight_lbs);
  PARAMETER(DB1.ED_Total_Gross_Weight_MT);
  PARAMETER(DB1.ED_Plant_Number_Dtl);
  PARAMETER(DB1.ED_Language_Xlate_Desc_2);
  PARAMETER(PAR.ED_Slaughter_Date_CofE_3);
  PARAMETER(DB1.ED_Production_mo_yr_ln_3);
  PARAMETER(DB1.ED_Remark_Constant_6);
  PARAMETER(DB1.ED_Allow_Print_bef_Ship);
  PARAMETER(DB1.ED_Cert_of_Orig_Sbd_addr);
  PARAMETER(DB1.ED_Use_item_label_1_2);
  PARAMETER(DB1.ED_Slg_Proc_Date_Format);
  PARAMETER(PAR.ED_Total_Package_UOM);
  PARAMETER(PAR.ED_Export_Certificate_Nbr);
  PARAMETER(DB1.ED_Sail_Date);
  PARAMETER(DB1.ED_Sworn_on_Date);
  PARAMETER(DB1.ED_Consignee_Address_Nbr);
  PARAMETER(DB1.ED_Form_Identification_Tx);
  PARAMETER(DB1.ED_Cold_Storage_Name);
  PARAMETER(DB1.ED_Cold_Storage_Addr_1);
  PARAMETER(DB1.ED_Cold_Storage_Addr_2);
  PARAMETER(DB1.ED_Cold_Storage_Plant_Nbr);
  PARAMETER(DB1.ED_Slaughter_Date_CofE_1);
  PARAMETER(DB1.ED_Production_mo_yr_ln_1);
  PARAMETER(DB1.ED_Production_mo_yr_ln_2);
  PARAMETER(PAR.ED_Booking_Nbr);
  PARAMETER(DB1.ED_Document_Date);
  PARAMETER(DB1.ED_Packing_Date);
  PARAMETER(DB1.ED_Expiration_Date);
  PARAMETER(DB1.ED_Packing_Date_To);
  PARAMETER(DB1.ED_Unused_Date_2);
  PARAMETER(DB1.ED_Print_Kilograms);
  PARAMETER(DB1.ED_MPR_Canadian_Province);
  PARAMETER(DB1.ED_Container_Nbrs);
  PARAMETER(DB1.ED_Slaughter_Date_CofE_2);
  PARAMETER(DB1.ED_Submit_Status);
  PARAMETER(DB1.EDOH_Unused_Sts_2);
  PARAMETER(DB1.EDOH_Unused_Text_1);
  PARAMETER(DB1.EDOH_Unused_Text_2);
  PARAMETER(DB1.EDOH_Unused_Number_1);
  PARAMETER(DB1.EDOH_Unused_Date_1);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing after Data read

   CASE;

   // IF DB1.ED Export Document Type is MPD
   IF DB1.ED_Export_Document_Type = 'H';

   // OR DB1.ED Export Document Type is 9290/9285/9295/9115/9450
   OR DB1.ED_Export_Document_Type = 'E';

   //?The H and or the E record are the only records that we would
   //?want to write out the comments records
   //?on the A record even if the consignee or consignor are
   //?changed do not write out these records
   //?R16637 DN 09/10/20-Pass in New Consignor/Consignee Fields.
   // Call program Rtv/Consignor/ConsigneXF.
   CALL PROGRAM(Rtv/Consignor/ConsigneXF) ('PNVIXFR');
   PARAMETER(JOB.*PROGRAM);
   PARAMETER(DB1.ED_Consignor_Name);
   PARAMETER(DB1.ED_Consignor_Addr_1);
   PARAMETER(DB1.ED_Consignor_Addr_2);
   PARAMETER(DB1.ED_Consignor_Addr_3);
   PARAMETER(DB1.ED_Consignor_Addr_4);
   PARAMETER(DB1.ED_Consignor_State);
   PARAMETER(DB1.ED_Consignor_Postal);
   PARAMETER(DB1.ED_Consignor_Country_Code);
   PARAMETER(DB1.ED_Consignee_Name);
   PARAMETER(DB1.ED_Consignee_Addr_1);
   PARAMETER(DB1.ED_Consignee_Addr_2);
   PARAMETER(DB1.ED_Consignee_Addr_3);
   PARAMETER(DB1.ED_Consignee_Addr_4);
   PARAMETER(DB1.ED_Consignee_State);
   PARAMETER(DB1.ED_Consignee_Postal);
   PARAMETER(DB1.ED_Consignee_Country_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.ED_Export_Document_Type);
   PARAMETER(PAR.Country_Code);
   PARAMETER(PAR.ED_Area_Office);
   PARAMETER(PAR.ED_Destination);
   PARAMETER(PAR.ED_Consignor_Name);
   PARAMETER(PAR.ED_Consignor_Addr_1);
   PARAMETER(PAR.ED_Consignor_Addr_2);
   PARAMETER(PAR.ED_Consignor_Addr_3);
   PARAMETER(PAR.ED_Consignor_Addr_4);
   PARAMETER(PAR.ED_Consignor_State);
   PARAMETER(PAR.ED_Consignor_Postal);
   PARAMETER(PAR.ED_Consignor_Country_Code);
   PARAMETER(PAR.ED_Consignee_Name);
   PARAMETER(PAR.ED_Consignee_Addr_1);
   PARAMETER(PAR.ED_Consignee_Addr_2);
   PARAMETER(PAR.ED_Consignee_Addr_3);
   PARAMETER(PAR.ED_Consignee_Addr_4);
   PARAMETER(PAR.ED_Consignee_State);
   PARAMETER(PAR.ED_Consignee_Postal);
   PARAMETER(PAR.ED_Consignee_Country_Code);

   ENDIF;

   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

 }

 //?Update MPC on Load Dtls
 CASE;

 // IF PAR.MPC Number NE PAR.ED Export Certificate Nbr
 IF PAR.MPC_Number <> PAR.ED_Export_Certificate_Nbr;

 EXECUTE FUNCTION(RTV/Chg MPC per Order  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1614592;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.ED_Export_Certificate_Nbr);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(CHG MPC Number         CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1541824;
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Stop_Drop_Sequence_Number);
  PARAMETER(PAR.MPC_Number);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 ENDIF;

}


