// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDHRXFR
// ?Date: 14.08.2025 Time: 03:28:24
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Initialize Fields.
DO;

// PAR.USR Credit Hold = CND.No
PAR.USR_Credit_Hold = 'N';

// PAR.USR Production = CND.No
PAR.USR_Production = 'N';

// PAR.USR New Order = CND.*NO
PAR.USR_New_Order = *NO;

ENDDO;

//?** Add check for Export Order Automation errors     P001251
//?Retrieve Company, Order, & Load Information. (UPD Order Detail)
DO;

EXECUTE FUNCTION(RTV Credit Hold Status RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1348371;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Credit_Hold_Status);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Post/Update Cond   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1280364;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Type_Sales);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.Requested_Ship_Date);
PARAMETER(PAR.Reason_Code);
PARAMETER(PAR.Header_Status);
PARAMETER(PAR.Header_Status_Last);
PARAMETER(PAR.Order_Type_Print_Status);
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(PAR.Order_Value_Total);
PARAMETER(PAR.Order_Weight_Total);
PARAMETER(PAR.Credit_Hold);
PARAMETER(PAR.Production_Hold);
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Export_Status);
PARAMETER(PAR.Palletize);
PARAMETER(PAR.Load_Plan_Order);
PARAMETER(PAR.Sales_Route_Code);
PARAMETER(PAR.Modified_Flag);
PARAMETER(PAR.A_R_order_Value_Total);
PARAMETER(PAR.Block_Order_Flag);
PARAMETER(WRK.Unused_Parm_CD7_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Rtv Plant Co/Org      XF.
CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);

//?Set flag for new order
CASE;

// IF PAR.Header Status is Entered
IF PAR.Header_Status = 'E';

// PAR.USR New Order = CND.*YES
PAR.USR_New_Order = *YES;

ENDIF;

CASE;

// IF PAR.Load Plan Order is yes
IF PAR.Load_Plan_Order = 'Y';

EXECUTE FUNCTION(RTV Load Status        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1297640;
PARAMETER(PAR.Load_ID);
PARAMETER(LCL.Load_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?** Reset Order Req Revw flags, only for Seaboard       C001956
CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

EXECUTE FUNCTION(RTV All Fields         RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1571206;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Order_Type_Sales);
PARAMETER(LCL.AR_Customer_Number);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(LCL.Ship_To_Name);
PARAMETER(LCL.Ship_To_Address_Line_1);
PARAMETER(LCL.Ship_To_Address_Line_2);
PARAMETER(LCL.Ship_To_Address_Line_3);
PARAMETER(LCL.Ship_To_City);
PARAMETER(LCL.Ship_To_State_Code);
PARAMETER(LCL.Ship_To_Zip_Postal_Code);
PARAMETER(LCL.Bill_to_Customer);
PARAMETER(LCL.Bill_to_Name);
PARAMETER(LCL.Bill_to_Address_Line_1);
PARAMETER(LCL.Bill_to_Address_Line_2);
PARAMETER(LCL.Bill_to_Address_Line_3);
PARAMETER(LCL.Bill_to_City);
PARAMETER(LCL.Bill_to_State_Code);
PARAMETER(LCL.Bill_to_Zip_Postal_Code);
PARAMETER(LCL.Customer_Purchase_Order_#);
PARAMETER(LCL.Order_Date);
PARAMETER(LCL.Requested_Ship_Date);
PARAMETER(LCL.Actual_Shipped_Date);
PARAMETER(LCL.Cancel_Date);
PARAMETER(LCL.Terms_Code);
PARAMETER(LCL.Special_Instructions);
PARAMETER(LCL.Special_Instructions_2);
PARAMETER(LCL.Carrier_Code);
PARAMETER(LCL.Comment_Print_Acknowledge);
PARAMETER(LCL.Comment_Print_Inv_Cr_Memo);
PARAMETER(LCL.Comment_Print_Pick_Slip);
PARAMETER(LCL.Comment_Print_Ship_Doc);
PARAMETER(LCL.Reason_Code);
PARAMETER(LCL.Order_in_Use);
PARAMETER(LCL.Header_Status);
PARAMETER(LCL.Header_Status_Last);
PARAMETER(LCL.Order_Type_Print_Status);
PARAMETER(LCL.Scheduled_Ship_Date);
PARAMETER(LCL.User_Original_Entry);
PARAMETER(LCL.Date_of_Original_Entry);
PARAMETER(LCL.Order_Value_Total);
PARAMETER(LCL.Order_Weight_Total);
PARAMETER(LCL.Credit_Hold);
PARAMETER(LCL.Production_Hold);
PARAMETER(LCL.New_Customer_Hold);
PARAMETER(LCL.Requested_Delivery_Date);
PARAMETER(LCL.Requested_Delivery_Time);
PARAMETER(LCL.Accounts_Receiv_Ent_1);
PARAMETER(LCL.Accounts_Receiv_Ent_2);
PARAMETER(LCL.Load_ID);
PARAMETER(LCL.Absorbed_Freight_Rate_CWT);
PARAMETER(LCL.Rated_Freight);
PARAMETER(LCL.LTL_Flag);
PARAMETER(LCL.Price_Audit);
PARAMETER(LCL.Price_Status);
PARAMETER(LCL.Shipping_Method);
PARAMETER(LCL.Export_Status);
PARAMETER(LCL.Palletize);
PARAMETER(LCL.Shrink_Wrap);
PARAMETER(LCL.Slip_Sheet);
PARAMETER(LCL.Age_Code);
PARAMETER(LCL.Reefer_Temperature);
PARAMETER(LCL.Load_Type);
PARAMETER(LCL.Attach_to_Invoice_Number);
PARAMETER(LCL.Load_Plan_Order);
PARAMETER(LCL.Print_Pick_Slip);
PARAMETER(LCL.Resell_Reference_Number);
PARAMETER(LCL.Special_Comment_1);
PARAMETER(LCL.Special_Comment_2);
PARAMETER(LCL.Affect_Auto_Accruals);
PARAMETER(LCL.Sales_Route_Code);
PARAMETER(LCL.Manager_Level_Code);
PARAMETER(LCL.VP_Level_Code);
PARAMETER(LCL.Attach_to_Order_Number);
PARAMETER(LCL.Reason_for_Price_Audit);
PARAMETER(LCL.Invoice_Number);
PARAMETER(LCL.Invoice_Suffix);
PARAMETER(LCL.Invoice_Date);
PARAMETER(LCL.Event_Code);
PARAMETER(LCL.Trans_Contol_AS400_Plant);
PARAMETER(LCL.Modified_Flag);
PARAMETER(LCL.A_R_order_Value_Total);
PARAMETER(LCL.Billing_Activity_Type);
PARAMETER(LCL.Block_Order_Flag);
PARAMETER(LCL.Order_Certification_Flag);
PARAMETER(LCL.Invoice_Order_Value_Tot);
PARAMETER(LCL.Process_Sts_for_3C);
PARAMETER(LCL.Order_Conf_Fax_Sts);
PARAMETER(LCL.Manifest_Fax_Sts);
PARAMETER(LCL.Invoice_Fax_Sts);
PARAMETER(LCL.Transfer_in_Storage_Ind);
PARAMETER(LCL.Email_Cust_On_Order_Ship);
PARAMETER(LCL.Order_Emailed);
PARAMETER(LCL.Export_Docs_Go_w_Driver);
PARAMETER(LCL.Shipping_Temp_Code_C_F);
PARAMETER(LCL.Broker_Order_Status);
PARAMETER(LCL.Air_Freight_Order);
PARAMETER(LCL.Order_Requires_Review);
PARAMETER(LCL.OH_Load_Plan_Ready);
PARAMETER(LCL.Export_USDA_Approved);
PARAMETER(LCL.HPB_Ship_to_Warehouse);
PARAMETER(LCL.OH_TF_Exempt_Code);
PARAMETER(LCL.OH_Appt_Confirmation_Dt);
PARAMETER(LCL.JPN_Invoice_Issuance_Date);
PARAMETER(LCL.Load_Actual_Shipped_Date);
PARAMETER(LCL.Load_BOL_Complete_Date);
PARAMETER(LCL.Load_Truck_Departure_Date);
PARAMETER(LCL.Maximum_Gross_Weight);
PARAMETER(LCL.Time_of_Original_Entry);
PARAMETER(LCL.OH_Appt_Confirmation_Tm);
PARAMETER(LCL.Load_BOL_Complete_Time);
PARAMETER(LCL.Load_Truck_Departure_Time);
PARAMETER(LCL.Act_Frt_Reference_Amount);
PARAMETER(LCL.Act_Non_Ref_Frt_Amount);
PARAMETER(LCL.OH_Fuel_Surcharge_Amount);
PARAMETER(LCL.OH_Total_Non_Ref_Frt_Amt);
PARAMETER(LCL.OH_Total_Ref_Frt_Amt);
PARAMETER(LCL.Claim_Number);
PARAMETER(LCL.EDI_Status_1);
PARAMETER(LCL.EDI_Status_2);
PARAMETER(LCL.EDI_Status_3);
PARAMETER(LCL.Job_Time);
PARAMETER(LCL.User_Id);
PARAMETER(LCL.Job_Name);
PARAMETER(LCL.Job_Date);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Order Requires Review is No
IF LCL.Order_Requires_Review = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

//?** If EOA errors still exist, update OH and OD        P001251
// Call program EXC Order Req Rvw editsXF.
CALL PROGRAM(EXC Order Req Rvw editsXF) ('PBBIXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Requested_Ship_Date);
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(LCL.Requested_Delivery_Date);
PARAMETER(LCL.Requested_Delivery_Time);
PARAMETER(LCL.Load_ID);
PARAMETER(LCL.Order_Requires_Review);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.Order_Line_Error_Type);
PARAMETER(LCL.Deadline_Departure_Date);
PARAMETER(LCL.Deadline_Departure_Time);
PARAMETER(LCL.Company_Organization);

ENDIF;

ENDIF;

//?09/23/08 PKD S00463 Repost of Order will not update missing
//?             info in the Order Detail.
EXECUTE FUNCTION(Edt Post Upd OrdDtl   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1901550;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Requested_Ship_Date);
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(PAR.Sales_Route_Code);
{
 //?USER: Process Data record

 // LCL.USR Update Flag = CND.No
 LCL.USR_Update_Flag = *BLANK;

 //?CHK: Requested Ship Date, Scheduled Ship Date, Sales Route Code
 CASE;

 // IF DB1.Requested Ship Date NE PAR.Requested Ship Date
 IF DB1.Requested_Ship_Date <> PAR.Requested_Ship_Date;

 // OR DB1.Scheduled Ship Date NE PAR.Scheduled Ship Date
 OR DB1.Scheduled_Ship_Date <> PAR.Scheduled_Ship_Date;

 // OR DB1.Sales Route Code NE PAR.Sales Route Code
 OR DB1.Sales_Route_Code <> PAR.Sales_Route_Code;

 // LCL.USR Update Flag = CND.Yes
 LCL.USR_Update_Flag = 'Y';

 ENDIF;

 //?CHK: Affect Inventory Status
 CASE;

 // IF DB1.Affect Inventory Status is blank
 IF DB1.Affect_Inventory_Status = *BLANK;

 // PAR.Affect Inventory Status = CND.yes
 PAR.Affect_Inventory_Status = 'Y';

 // LCL.USR Update Flag = CND.Yes
 LCL.USR_Update_Flag = 'Y';

 //?CHK: Affect Inventory Status
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Affect Inventory Status = DB1.Affect Inventory Status
 PAR.Affect_Inventory_Status = DB1.Affect_Inventory_Status;

 ENDIF;

 //?CHK: Affect Sales Dollars Status
 CASE;

 // IF DB1.Affect Sales Doll Status is blank
 IF DB1.Affect_Sales_Doll_Status = *BLANK;

 // PAR.Affect Sales Doll Status = CND.yes
 PAR.Affect_Sales_Doll_Status = 'Y';

 // LCL.USR Update Flag = CND.Yes
 LCL.USR_Update_Flag = 'Y';

 //?CHK: Affect Sales Dollars Status
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Affect Sales Doll Status = DB1.Affect Sales Doll Status
 PAR.Affect_Sales_Doll_Status = DB1.Affect_Sales_Doll_Status;

 ENDIF;

 //?CHK: Affect Sales Pounds Status
 CASE;

 // IF DB1.Affect Sales Pnds Status is blank
 IF DB1.Affect_Sales_Pnds_Status = *BLANK;

 // PAR.Affect Sales Pnds Status = CND.yes
 PAR.Affect_Sales_Pnds_Status = 'Y';

 // LCL.USR Update Flag = CND.Yes
 LCL.USR_Update_Flag = 'Y';

 //?CHK: Affect Sales Pounds Status
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Affect Sales Pnds Status = DB1.Affect Sales Pnds Status
 PAR.Affect_Sales_Pnds_Status = DB1.Affect_Sales_Pnds_Status;

 ENDIF;

 //?UPD: Order Detail
 CASE;

 // IF LCL.USR Update Flag is Yes
 IF LCL.USR_Update_Flag = 'Y';

 EXECUTE FUNCTION(Edt Post Upd OrdDtl   CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1901552;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Requested_Ship_Date);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(PAR.Affect_Inventory_Status);
 PARAMETER(PAR.Affect_Sales_Doll_Status);
 PARAMETER(PAR.Affect_Sales_Pnds_Status);
 PARAMETER(PAR.Sales_Route_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

}


ENDDO;

//?Retrieve Credit Limits.
DO;

//?* A/R Credit Limit *
EXECUTE FUNCTION(RTV Credit Limits      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1280263;
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.Parent_Customer);
PARAMETER(PAR.Credit_Check_AR_Customer);
PARAMETER(PAR.Credit_Check_Parent_Cust);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(PAR.AR_Credit_Limit);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?* Parent Credit Limit *
EXECUTE FUNCTION(RTV Credit Limits      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1280263;
PARAMETER(PAR.Parent_Customer);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(PAR.Parent_Credit_Limit);
PARAMETER(WRK.Numeric_Field_Not_Needed);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDDO;

//?Calculate Order Value & Weight total and Order Value Difference.
DO;

// PAR.USR Order Value = CON.*ZERO
PAR.USR_Order_Value = *ZERO;

// PAR.USR Order Weight = CON.*ZERO
PAR.USR_Order_Weight = *ZERO;

CASE;

// IF PAR.Load ID is NE Blank
IF PAR.Load_ID <> *ZERO;

// AND PAR.Load Plan Order is yes
AND PAR.Load_Plan_Order = 'Y';

//?** Use req delv for ddt calc all the time   E01523  5/31/11
//?** Use carr appt dt/tm, if entered to calc DDD/T      E00495
//?** Override miles will replace total miles.           E00207
EXECUTE FUNCTION(UPD Ld Mi,Whse,DDD/T   IF) TYPE(EXCINTFUN)                     AC1496180;
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Load_Status);
{
 //?Execute internal function

 //?***** Change Log and Comments
 DO;

 //?E04119  RMC 7/15/16 if TMSLDP is live and MG Load, then dont upd LH
 //?   miles or Deadline Depart (comes from MG)
 //?E01523  RMC 5/31/11 Use req delv all the time for ddt calc
 //?** 09.23.2009 LJB E00495
 //?** Retrieve Carrier Appt Date/Time, use if not zeros, else
 //?** use Requested Delivery Date/Time
 ENDDO;

 EXECUTE FUNCTION(Rtv/Chg Whs,ld miles  RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1471360;
 PARAMETER(PAR.Load_ID);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(RTV First Order Whse   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1397882;
  PARAMETER(DB1.Load_ID);
  PARAMETER(1);
  PARAMETER(PAR.Ship_From_Warehouse);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(WRK.TXT_field_not_needed);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   QUIT;

  }

  CASE;

  // IF DB1.Warehouse Code EQ PAR.Ship From Warehouse
  IF DB1.Warehouse_Code = PAR.Ship_From_Warehouse;

  // PAR.Warehouse Code = CON.*BLANK
  PAR.Warehouse_Code = *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Warehouse Code = DB1.Warehouse Code
  PAR.Warehouse_Code = DB1.Warehouse_Code;

  ENDIF;

  //?** 11/16/2007 LJB FP1251 Total Load Miles will = zeros if no
  //?** Miles Between Cities record exists
  //?** Override total load miles will take precedence over tlm  E00207
  //?E4119 RMC 7/15/16  Upd miles if NOT MG LOAD
  CASE;

  // IF DB1.MG Created Load is Yes
  IF DB1.MG_Created_Load = 'Y';

  // PAR.Total Load Miles = DB1.Total Load Miles
  PAR.Total_Load_Miles = DB1.Total_Load_Miles;

  // PAR.Override Total Load Miles = DB1.Override Total Load Miles
  PAR.Override_Total_Load_Miles = DB1.Override_Total_Load_Miles;

  //?E4119 RMC 7/15/16  Upd miles if NOT MG LOAD
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Call program CLC Total Load Miles   XF.
  CALL PROGRAM(CLC Total Load Miles   XF) ('PDW3XFR');
  PARAMETER(DB1.Load_ID);
  PARAMETER(PAR.Total_Load_Miles);
  PARAMETER(PAR.Override_Total_Load_Miles);

  ENDIF;

  //?** Add override miles to the update            E00207 LJB 08/13/08
  EXECUTE FUNCTION(CHG Ship FrmWhs,ld mls CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1471384;
  PARAMETER(DB1.Load_ID);
  PARAMETER(PAR.Total_Load_Miles);
  PARAMETER(PAR.Ship_From_Warehouse);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Override_Total_Load_Miles);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 EXECUTE FUNCTION(RTV MG Created Load   RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC2124762;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.MG_Created_Load);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 CASE;

 // IF LCL.MG Created Load is Not MG Created Load
 IF LCL.MG_Created_Load = *BLANK;

 //?Deadline depart calcs
 CASE;

 // IF PAR.Load Status is Entered
 IF PAR.Load_Status = 'E';

 //?only calculate deadline departure if the load is not "E"ntered
 //?Deadline depart calcs
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv 1st Ord Delv Dt/Tm RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1456727;
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(PAR.Requested_Delivery_Time);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Delivery Date/Time RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1445871;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Ship_To_Name);
  PARAMETER(WRK.Ship_To_City);
  PARAMETER(NLL.Ship_To_State_Code);
  PARAMETER(PAR.Requested_Delivery_Date);
  PARAMETER(PAR.Requested_Delivery_Time);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  QUIT;

 }

 // PAR.Deadline Departure Time = PAR.Requested Delivery Time * CON.100 *
 PAR.Deadline_Departure_Time = PAR.Requested_Delivery_Time * 100;

 // PAR.Deadline Departure Date = PAR.Requested Delivery Date
 PAR.Deadline_Departure_Date = PAR.Requested_Delivery_Date;

 //?** 11/16/2007 LJB FP1251 Total Load Miles will be zeros if there
 //?** is no Miles Between Cities record - this is an error that
 //?** needs to be corrected
 //?** 08/21/2008 LJB E00207 If 1st stop miles cannot be calculated, it
 //?** is still an error. Override miles won't correct this.
 //?** 09/23/2009 LJB E00495  Date and Time will be zero'd out if
 //?** mileage could not be calculated.
 EXECUTE FUNCTION(CLC Departure Date/TimeIF) TYPE(EXCINTFUN)                     AC1456426;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 {
  //?Execute internal function

  //?***** Change Log and Comments
  DO;

  //?** The Date and Time being calculated are the latest date and time
  //?** that the truck can leave the warehouse and still make the
  //?** delivery on time.
  //?*****
  //?** E00495 LJB 09.23.2009
  //?** Carrier Appt Date and Time are in the parm Deadline Departure
  //?** date and time, if called from "UPD Ld Mi,Whse,DDD/T IF"
  //?*****
  //?** E00207 LJB 08/11/2008
  //?** Override Total Load Miles has been added to the
  //?** Retrieve Total Load Miles function
  //?*****
  //?** FP1251 LJB 12/26/2007
  //?** If no Miles To Next record, change SSD/T to zeros.
  //?** Scheduled Deliv Date has (should have) Requested Delivery Date in it
  ENDDO;

  EXECUTE FUNCTION(RTV Shipping Method    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1572676;
  PARAMETER(PAR.Load_ID);
  PARAMETER(LCL.Shipping_Method);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Shipping Method is Collect Truck
  IF LCL.Shipping_Method = 'CT';

  // OR LCL.Shipping Method is Collect Rail
  OR LCL.Shipping_Method = 'CR';

  //?** Treat CT & CR the same           FP1251 LJB 12/26/2007
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV 1st Stop Mileage   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1456048;
  PARAMETER(PAR.Load_ID);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Miles_to_next_stop);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?** Calc miles between all stops then retrieve 1st stop miles
  CASE;

  // IF PAR.Miles to next stop is Not Entered
  IF PAR.Miles_to_next_stop = *ZERO;

  //?** Override miles will be returned, if entered
  // Call program CLC Total Load Miles   XF.
  CALL PROGRAM(CLC Total Load Miles   XF) ('PDW3XFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(WRK.Total_Load_Miles);
  PARAMETER(WRK.Override_Total_Load_Miles);

  EXECUTE FUNCTION(RTV 1st Stop Mileage   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1456048;
  PARAMETER(PAR.Load_ID);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Miles_to_next_stop);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  ENDIF;

  //?** 11/16/2007 LJB FP1251 Error if no miles, set SDD/SDT to zeros
  CASE;

  // IF PAR.Miles to next stop is Not Entered
  IF PAR.Miles_to_next_stop = *ZERO;

  // PAR.Scheduled Delivery Date = CND.not entered
  PAR.Scheduled_Delivery_Date = *ZERO;

  // PAR.Scheduled Delivery Time = CND.Not Entered
  PAR.Scheduled_Delivery_Time = *ZERO;

  //?** 11/16/2007 LJB FP1251 Error if no miles, set SDD/SDT to zeros
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Hours Required = CON.*ZERO
  PAR.Hours_Required = *ZERO;

  // LCL.Hours Required = CON.*ZERO
  LCL.Hours_Required = *ZERO;

  EXECUTE FUNCTION(RTV Legal Run Miles DscRT) TYPE(RTVOBJ) FILE(PDLGCPP)          AC1456042;
  PARAMETER(PAR.Miles_to_next_stop);
  PARAMETER(LCL.Hours_Required);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?09/09/11 PKD E1659 Additional Route Hours
  // Call program Rtv Addtnl Route Hrs  XF.
  CALL PROGRAM(Rtv Addtnl Route Hrs  XF) ('PMACXFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(LCL.Additional_Route_Hours);

  // PAR.Hours Required = LCL.Hours Required + LCL.Additional Route Hours
  PAR.Hours_Required = LCL.Hours_Required + LCL.Additional_Route_Hours;

  //?get number of whole days + remaining hours
  CASE;

  // IF PAR.Hours Required is Zero
  IF PAR.Hours_Required = *ZERO;

  //?get number of whole days + remaining hours
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.@Days 5 = PAR.Hours Required / CON.24 *
  PAR.@Days_5 = PAR.Hours_Required / 24;

  // WRK.USR Hours 5.0 = PAR.@Days 5 * CON.24 *
  WRK.USR_Hours_5_0 = PAR.@Days_5 * 24;

  // PAR.USR Hours 5.0 = PAR.Hours Required - WRK.USR Hours 5.0
  PAR.USR_Hours_5_0 = PAR.Hours_Required - WRK.USR_Hours_5_0;

  // WRK.@Numeric 6,0 = PAR.USR Hours 5.0 * CON.10000 *
  WRK.@Numeric_60 = PAR.USR_Hours_5_0 * 10000;

  //?Subtract whole days
  CASE;

  // IF PAR.@Days 5 is greater than zero
  IF PAR.@Days_5 > *ZERO;

  // PAR.@Days 5 = PAR.@Days 5 * CON.-1 *
  PAR.@Days_5 = PAR.@Days_5 * -1;

  // PAR.Scheduled Delivery Date = PAR.Scheduled Delivery Date + PAR.@Days 5 *DAYS
  PAR.Scheduled_Delivery_Date = DATEINCR(PAR.Scheduled_Delivery_Date PAR.@Days_5 'DY'
  1111111 'NONE' 'N' 1);

  ENDIF;

  //?Calculate # whole days + hours left
  CASE;

  // IF WRK.@Numeric 6,0 GE PAR.Scheduled Delivery Time
  IF WRK.@Numeric_60 >= PAR.Scheduled_Delivery_Time;

  // WRK.@Numeric 6,0 = WRK.@Numeric 6,0 - PAR.Scheduled Delivery Time
  WRK.@Numeric_60 = WRK.@Numeric_60 - PAR.Scheduled_Delivery_Time;

  // PAR.@Days 5 = CON.-1
  PAR.@Days_5 = -1;

  // PAR.Scheduled Delivery Date = PAR.Scheduled Delivery Date + PAR.@Days 5 *DAYS
  PAR.Scheduled_Delivery_Date = DATEINCR(PAR.Scheduled_Delivery_Date PAR.@Days_5 'DY'
  1111111 'NONE' 'N' 1);

  // PAR.Scheduled Delivery Time = CON.240000 - WRK.@Numeric 6,0
  PAR.Scheduled_Delivery_Time = 240000 - WRK.@Numeric_60;

  //?Calculate # whole days + hours left
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Scheduled Delivery Time = PAR.Scheduled Delivery Time - WRK.@Numeric 6,0
  PAR.Scheduled_Delivery_Time = PAR.Scheduled_Delivery_Time - WRK.@Numeric_60;

  ENDIF;

  ENDIF;

  ENDIF;

  EXECUTE FUNCTION(RTV Total Ld Mi/Sts    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1496186;
  PARAMETER(PAR.Load_ID);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Total_Load_Miles);
  PARAMETER(WRK.Override_Total_Load_Miles);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

 }

 EXECUTE FUNCTION(CHG Deadline Dep D/T   CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1493670;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 EXECUTE FUNCTION(CHG Deadline Date/Time RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1496989;
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  QUIT;

  //?USER: Process Data record

  EXECUTE FUNCTION(CHG Deadline Date/Time CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1496963;
  PARAMETER(PAR.Load_ID);
  PARAMETER(DB1.Stop_Drop_Sequence_Number);
  PARAMETER(PAR.Deadline_Depart_DT_HDR);
  PARAMETER(PAR.Deadline_Depart_Time_HDR);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   //?USER: Processing after Data update

   EXECUTE FUNCTION(Upd Deadline Dte/Tme  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1648968;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Deadline_Depart_DT_HDR);
   PARAMETER(DB1.Deadline_Depart_Time_HDR);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(Chg Deadline Dte/Tme  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1648969;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Deadline_Depart_Date_LH);
    PARAMETER(PAR.Deadline_Depart_Time_LH);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

   }

  }

 }

 ENDIF;

 ENDIF;

}


ENDIF;

// Call program CLC Price/Price Audit  XF.
CALL PROGRAM(CLC Price/Price Audit  XF) ('PDPRXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Pricing_Event_Called_From);
PARAMETER(PAR.USR_Order_Value);
PARAMETER(PAR.USR_Order_Weight);
PARAMETER(PAR.USR_Production);
PARAMETER(PAR.USR_New_Order);

ENDDO;

//?Production Hold Setup 0 E4019
CASE;

// IF PAR.Load Plan Order is yes
IF PAR.Load_Plan_Order = 'Y';

//?Production Hold setup  - FP1054 modify 6/11/09
CASE;

// IF LCL.Load Status is Locked thru Invoiced
IF LCL.Load_Status = 'I'/'L'/'S';

CASE;

// IF PAR.Pricing Event Called From is Production Scheduling
IF PAR.Pricing_Event_Called_From = 'PS';

//?from PS and when the sched is built, we want them to go on hold if appl.
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Production = PAR.Production Hold
PAR.USR_Production = PAR.Production_Hold;

ENDIF;

ENDIF;

//?Production Hold Setup 0 E4019
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Pricing Event Called From is Production Scheduling
IF PAR.Pricing_Event_Called_From = 'PS';

//?from PS and when the sched is built, we want them to go on hold if appl.
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Production = PAR.Production Hold
PAR.USR_Production = PAR.Production_Hold;

ENDIF;

ENDIF;

// PAR.USR Order Value Change = PAR.USR Order Value - PAR.Order Value Total
PAR.USR_Order_Value_Change = PAR.USR_Order_Value - PAR.Order_Value_Total;

//?Check Credit.
DO;

//?****** Credit checking routine
//?       ***E2824 :  Do not credit check from event "PS"  10/11/13
//?       ***OMS203:  Do not credit check Block Orders
//?       *** C2576:  no credit check if shipped/invoiced
//?       *** PDD012: no credit check if Pricing event is Unit Weight Change
//?       *** C2968: no credit check if load is locked
//?       *** E3028: No credit check if previously Credit Released
//?       *** E004119 No check for Sweep of Orders to MercuryGate
//?       No Credit Check done when Credit Check off for Co. or $ < last time
EXECUTE FUNCTION(VAL Ld/Ord/Type exists RT) TYPE(RTVOBJ) FILE(PDLHCPP)          AC2086163;
PARAMETER(PAR.Load_ID);
PARAMETER('CRDRLS');
PARAMETER(PAR.Order_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


//?Credit Checks:
CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

//?     Do not credit check if the order has been Credit Released
// PAR.USR Credit Hold = PAR.Credit Hold
PAR.USR_Credit_Hold = PAR.Credit_Hold;

//?Credit Checks:
// IF PAR.Header Status is Confirmed & Complete
IF PAR.Header_Status = 'C'/'R';

//?     no credit checking needed
// PAR.USR Credit Hold = PAR.Credit Hold
PAR.USR_Credit_Hold = PAR.Credit_Hold;

//?Credit Checks:
// IF LCL.Load Status is Locked thru Invoiced
IF LCL.Load_Status = 'I'/'L'/'S';

// AND PAR.Load Plan Order is yes
AND PAR.Load_Plan_Order = 'Y';

//?     C2968: no credit checking needed
// PAR.USR Credit Hold = PAR.Credit Hold
PAR.USR_Credit_Hold = PAR.Credit_Hold;

//?Credit Checks:
// IF PAR.USR Order Value LE PAR.A/R order Value Total
IF PAR.USR_Order_Value <= PAR.A_R_order_Value_Total;

// AND PAR.Credit Hold is No
AND PAR.Credit_Hold = 'N';

//?     no credit checking needed
//?Credit Checks:
// IF PAR.Block Order Flag is Block Order
IF PAR.Block_Order_Flag = 'B';

//?   OMS203:  Do not credit check Block Orders
// PAR.USR Credit Hold = PAR.Credit Hold
PAR.USR_Credit_Hold = PAR.Credit_Hold;

//?Credit Checks:
// IF PAR.Pricing Event Called From is Unit Weight Change
IF PAR.Pricing_Event_Called_From = 'UWC';

// OR PAR.Pricing Event Called From is Unit Weight Change-TMS
OR PAR.Pricing_Event_Called_From = 'UWT';

//?   PDD012:  Do not credit check on unit weight change
// PAR.USR Credit Hold = PAR.Credit Hold
PAR.USR_Credit_Hold = PAR.Credit_Hold;

//?Credit Checks:
// IF PAR.Pricing Event Called From is Sweep Orders to MG
IF PAR.Pricing_Event_Called_From = 'SWP';

// PAR.USR Credit Hold = PAR.Credit Hold
PAR.USR_Credit_Hold = PAR.Credit_Hold;

//?Credit Checks:
// IF PAR.Pricing Event Called From is Production Scheduling
IF PAR.Pricing_Event_Called_From = 'PS';

//?   E2824 :  Do not credit check from PS changes, including am build sched
// PAR.USR Credit Hold = PAR.Credit Hold
PAR.USR_Credit_Hold = PAR.Credit_Hold;

//?Credit Checks:
// IF PAR.Credit Hold Status is yes
IF PAR.Credit_Hold_Status = 'Y';

EXECUTE FUNCTION(INT Post/Ord Cred Ck   IF) TYPE(EXCINTFUN)                     AC1402910;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.Parent_Customer);
PARAMETER(PAR.Credit_Check_AR_Customer);
PARAMETER(PAR.Credit_Check_Parent_Cust);
PARAMETER(PAR.Parent_Credit_Limit);
PARAMETER(PAR.AR_Credit_Limit);
PARAMETER(PAR.USR_Order_Credit_Hold);
PARAMETER(PAR.USR_Order_Value);
PARAMETER(LCL.Status_Y_or_N);
{
 //?Execute internal function

 // PAR.USR Order Credit Hold = CND.no
 PAR.USR_Order_Credit_Hold = 'N';

 // PAR.Status - Y or N = WRK.Blank for 4           USR
 PAR.Status_Y_or_N = WRK.Blank_for_4_USR;

 //?Credit check A/R Customer
 CASE;

 // IF PAR.Credit Check A/R Customer is yes
 IF PAR.Credit_Check_AR_Customer = 'Y';

 EXECUTE FUNCTION(RTV Sum $ Owed-A/R Cst RT) TYPE(RTVOBJ) FILE(ARBCREP)          AC1402911;
 PARAMETER(PAR.AR_Customer_Number);
 PARAMETER(PAR.@Numeric_15_2);
 {
  //?USER: Initialize routine

  // PAR.@Numeric 15.2 = CON.*ZERO
  PAR.@Numeric_15_2 = *ZERO;

  //?USER: Process Data record

  // Synon (15,2) work field =       * Compute Credit Amount
  PGM.*Synon_152_work_field = ( ( ( ( ( DB1.Age_Due_Current_W_O_CB
  + DB1.Age_Due_Aging_1_W_O_CB ) + DB1.Age_Due_Aging_2_W_O_CB )
  + DB1.Age_Due_Aging_3_W_O_CB ) + DB1.Age_Due_Aging_4_W_O_CB )
  + DB1.Age_Due_Aging_5_W_O_CB ) + DB1.Value_of_Open_Orders;

  // PAR.@Numeric 15.2 = PAR.@Numeric 15.2 + PGM.*Synon (15,2) work field
  PAR.@Numeric_15_2 = PAR.@Numeric_15_2 + PGM.*Synon_152_work_field;

 }

 // PAR.USR Credit Amount = PAR.@Numeric 15.2
 PAR.USR_Credit_Amount = PAR.@Numeric_15_2;

 //?Hold if total of A/R Summaries for A/R Cust + this ord > A/R C/L
 CASE;

 // IF PAR.USR Credit Amount GT PAR.A/R Credit Limit
 IF PAR.USR_Credit_Amount > PAR.AR_Credit_Limit;

 // PAR.USR Order Credit Hold = CND.yes
 PAR.USR_Order_Credit_Hold = 'Y';

 // PAR.Status - Y or N = CND.no
 PAR.Status_Y_or_N = 'N';

 ENDIF;

 ENDIF;

 //?Credit check Parent Customer
 CASE;

 // IF PAR.Credit Check Parent Cust is yes
 IF PAR.Credit_Check_Parent_Cust = 'Y';

 // AND PAR.USR Order Credit Hold is no
 AND PAR.USR_Order_Credit_Hold = 'N';

 EXECUTE FUNCTION(CLC Sum A/R Due by Par RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1307034;
 PARAMETER(PAR.Parent_Customer);
 PARAMETER(PAR.@Numeric_15_2);
 {
  //?USER: Initialize routine

  // PAR.@Numeric 15.2 = CON.*ZERO
  PAR.@Numeric_15_2 = *ZERO;

  //?USER: Process Data record

  //?only process the customer once
  CASE;

  // IF DB1.Ship To Customer EQ DB1.A/R Customer Number
  IF DB1.Ship_To_Customer = DB1.AR_Customer_Number;

  EXECUTE FUNCTION(RTV Sum $ Owed-A/R Cst RT) TYPE(RTVOBJ) FILE(ARBCREP)          AC1402911;
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(WRK.@Numeric_15_2);
  {
   //?USER: Initialize routine

   // PAR.@Numeric 15.2 = CON.*ZERO
   PAR.@Numeric_15_2 = *ZERO;

   //?USER: Process Data record

   // Synon (15,2) work field =       * Compute Credit Amount
   PGM.*Synon_152_work_field = ( ( ( ( ( DB1.Age_Due_Current_W_O_CB
   + DB1.Age_Due_Aging_1_W_O_CB ) + DB1.Age_Due_Aging_2_W_O_CB )
   + DB1.Age_Due_Aging_3_W_O_CB ) + DB1.Age_Due_Aging_4_W_O_CB )
   + DB1.Age_Due_Aging_5_W_O_CB ) + DB1.Value_of_Open_Orders;

   // PAR.@Numeric 15.2 = PAR.@Numeric 15.2 + PGM.*Synon (15,2) work field
   PAR.@Numeric_15_2 = PAR.@Numeric_15_2 + PGM.*Synon_152_work_field;

  }

  // PAR.@Numeric 15.2 = PAR.@Numeric 15.2 + WRK.@Numeric 15.2
  PAR.@Numeric_15_2 = PAR.@Numeric_15_2 + WRK.@Numeric_15_2;

  ENDIF;

 }

 // PAR.USR Credit Amount = PAR.@Numeric 15.2
 PAR.USR_Credit_Amount = PAR.@Numeric_15_2;

 //?Hold if total of A/R Summaries under Parent + this ord > Parent C/L
 CASE;

 // IF PAR.USR Credit Amount GT PAR.Parent Credit Limit
 IF PAR.USR_Credit_Amount > PAR.Parent_Credit_Limit;

 // PAR.USR Order Credit Hold = CND.yes
 PAR.USR_Order_Credit_Hold = 'Y';

 // PAR.Status - Y or N = CND.yes
 PAR.Status_Y_or_N = 'Y';

 ENDIF;

 ENDIF;

}


// PAR.USR Credit Hold = PAR.USR Order Credit Hold
PAR.USR_Credit_Hold = PAR.USR_Order_Credit_Hold;

ENDIF;

ENDDO;

//?Update Order Dtl and Sts lines; track if have active subs.
DO;

EXECUTE FUNCTION(RTV Chg Stat/Hdr P/S   RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1426153;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Palletize);
PARAMETER(WRK.Substituted_Flag);
{
 //?USER: Initialize routine

 // PAR.USR Update Flag = CND.No
 PAR.USR_Update_Flag = *BLANK;

 // PAR.Update Palletize = CND.no
 PAR.Update_Palletize = 'N';

 // PAR.Update Slip Sheet = CND.no
 PAR.Update_Slip_Sheet = 'N';

 // PAR.Substituted Flag = CND.No Substitutions Exist
 PAR.Substituted_Flag = *BLANK;

 //?06/16/21 DN W77734-Added All OD Palletize is No Flag.
 // PAR.All OD Palletize is No = CND.blank
 PAR.All_OD_Palletize_is_No = *BLANK;

 //?USER: Process Data record

 // PAR.USR Update Flag = CND.No
 PAR.USR_Update_Flag = *BLANK;

 //?Update Entered to Available
 CASE;

 // IF DB1.Detail Line Status is Entered
 IF DB1.Detail_Line_Status = 'E';

 // WRK.Detail Line Status Last = DB1.Detail Line Status
 WRK.Detail_Line_Status_Last = DB1.Detail_Line_Status;

 // WRK.Detail Line Status = CND.Available
 WRK.Detail_Line_Status = 'A';

 EXECUTE FUNCTION(CHG Detail Status      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1425418;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(WRK.Detail_Line_Status);
 PARAMETER(WRK.Detail_Line_Status_Last);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 //?Slip Sheet 'Y' on detail must be Yes on Header
 CASE;

 // IF DB1.Slip Sheet is yes
 IF DB1.Slip_Sheet = 'Y';

 // PAR.Update Slip Sheet = DB1.Slip Sheet
 PAR.Update_Slip_Sheet = DB1.Slip_Sheet;

 // PAR.USR Update Flag = CND.Yes
 PAR.USR_Update_Flag = 'Y';

 ENDIF;

 //?Palletize  'Y' on detail must be Yes on Header - New Rule 8/25/09 RMC/PKD
 CASE;

 // IF DB1.Palletize is yes
 IF DB1.Palletize = 'Y';

 // PAR.Update Palletize = DB1.Palletize
 PAR.Update_Palletize = DB1.Palletize;

 // PAR.USR Update Flag = CND.Yes
 PAR.USR_Update_Flag = 'Y';

 //?06/16/21 DN W77734-Added All OD Palletize is No Flag.
 // PAR.All OD Palletize is No = CND.no
 PAR.All_OD_Palletize_is_No = 'N';

 ENDIF;

 //?06/16/21 DN W77734-Keep Track if All OD is Palletize = No.
 CASE;

 // IF DB1.Palletize is no
 IF DB1.Palletize = 'N';

 // AND NOT PAR.All OD Palletize is No is no
 AND ! PAR.All_OD_Palletize_is_No = 'N';

 // PAR.All OD Palletize is No = CND.yes
 PAR.All_OD_Palletize_is_No = 'Y';

 ENDIF;

 //?Substitution flag
 CASE;

 // IF DB1.Order Secondary Line Seq is GT 1
 IF DB1.Order_Secondary_Line_Seq > 1;

 // PAR.Substituted Flag = CND.Substitutions Exist
 PAR.Substituted_Flag = 'Y';

 ENDIF;

 //?Update Order Header
 CASE;

 // IF PAR.USR Update Flag is Yes
 IF PAR.USR_Update_Flag = 'Y';

 EXECUTE FUNCTION(CHG Pall./Slip Post/Or CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1286691;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Update_Palletize);
 PARAMETER(PAR.Update_Slip_Sheet);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program TRG Order Hdr CHG Trig XT.
  CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Ship_To_Name);
  PARAMETER(DB1.Ship_To_Address_Line_1);
  PARAMETER(DB1.Ship_To_Address_Line_2);
  PARAMETER(DB1.Ship_To_Address_Line_3);
  PARAMETER(DB1.Ship_To_City);
  PARAMETER(DB1.Ship_To_State_Code);
  PARAMETER(DB1.Ship_To_Zip_Postal_Code);
  PARAMETER(DB1.Bill_to_Customer);
  PARAMETER(DB1.Bill_to_Name);
  PARAMETER(DB1.Bill_to_Address_Line_1);
  PARAMETER(DB1.Bill_to_Address_Line_2);
  PARAMETER(DB1.Bill_to_Address_Line_3);
  PARAMETER(DB1.Bill_to_City);
  PARAMETER(DB1.Bill_to_State_Code);
  PARAMETER(DB1.Bill_to_Zip_Postal_Code);
  PARAMETER(DB1.Customer_Purchase_Order_#);
  PARAMETER(DB1.Order_Date);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Cancel_Date);
  PARAMETER(DB1.Terms_Code);
  PARAMETER(DB1.Special_Instructions);
  PARAMETER(DB1.Special_Instructions_2);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Comment_Print_Acknowledge);
  PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
  PARAMETER(DB1.Comment_Print_Pick_Slip);
  PARAMETER(DB1.Comment_Print_Ship_Doc);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Order_in_Use);
  PARAMETER(DB1.Header_Status);
  PARAMETER(DB1.Header_Status_Last);
  PARAMETER(DB1.Order_Type_Print_Status);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.User_Original_Entry);
  PARAMETER(DB1.Date_of_Original_Entry);
  PARAMETER(DB1.Order_Value_Total);
  PARAMETER(DB1.Order_Weight_Total);
  PARAMETER(DB1.Credit_Hold);
  PARAMETER(DB1.Production_Hold);
  PARAMETER(DB1.New_Customer_Hold);
  PARAMETER(DB1.Requested_Delivery_Date);
  PARAMETER(DB1.Requested_Delivery_Time);
  PARAMETER(DB1.Accounts_Receiv_Ent_1);
  PARAMETER(DB1.Accounts_Receiv_Ent_2);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.LTL_Flag);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Shipping_Method);
  PARAMETER(DB1.Export_Status);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Shrink_Wrap);
  PARAMETER(DB1.Slip_Sheet);
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Reefer_Temperature);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Attach_to_Invoice_Number);
  PARAMETER(DB1.Load_Plan_Order);
  PARAMETER(DB1.Print_Pick_Slip);
  PARAMETER(DB1.Resell_Reference_Number);
  PARAMETER(DB1.Special_Comment_1);
  PARAMETER(DB1.Special_Comment_2);
  PARAMETER(DB1.Affect_Auto_Accruals);
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(DB1.Manager_Level_Code);
  PARAMETER(DB1.VP_Level_Code);
  PARAMETER(DB1.Attach_to_Order_Number);
  PARAMETER(DB1.Reason_for_Price_Audit);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Invoice_Date);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Trans_Contol_AS400_Plant);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.A_R_order_Value_Total);
  PARAMETER(DB1.Billing_Activity_Type);
  PARAMETER(DB1.Block_Order_Flag);
  PARAMETER(DB1.Order_Certification_Flag);
  PARAMETER(DB1.Invoice_Order_Value_Tot);
  PARAMETER(DB1.Process_Sts_for_3C);
  PARAMETER(DB1.Order_Conf_Fax_Sts);
  PARAMETER(DB1.Manifest_Fax_Sts);
  PARAMETER(DB1.Invoice_Fax_Sts);
  PARAMETER(DB1.Transfer_in_Storage_Ind);
  PARAMETER(DB1.Email_Cust_On_Order_Ship);
  PARAMETER(DB1.Order_Emailed);
  PARAMETER(DB1.Export_Docs_Go_w_Driver);
  PARAMETER(DB1.Shipping_Temp_Code_C_F);
  PARAMETER(DB1.Broker_Order_Status);
  PARAMETER(DB1.Air_Freight_Order);
  PARAMETER(DB1.Order_Requires_Review);
  PARAMETER(DB1.OH_Load_Plan_Ready);
  PARAMETER(DB1.Export_USDA_Approved);
  PARAMETER(DB1.HPB_Ship_to_Warehouse);
  PARAMETER(DB1.OH_TF_Exempt_Code);
  PARAMETER(DB1.OH_Appt_Confirmation_Dt);
  PARAMETER(DB1.JPN_Invoice_Issuance_Date);
  PARAMETER(DB1.Load_Actual_Shipped_Date);
  PARAMETER(DB1.Load_BOL_Complete_Date);
  PARAMETER(DB1.Load_Truck_Departure_Date);
  PARAMETER(DB1.Maximum_Gross_Weight);
  PARAMETER(DB1.Time_of_Original_Entry);
  PARAMETER(DB1.OH_Appt_Confirmation_Tm);
  PARAMETER(DB1.Load_BOL_Complete_Time);
  PARAMETER(DB1.Load_Truck_Departure_Time);
  PARAMETER(DB1.Act_Frt_Reference_Amount);
  PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
  PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
  PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
  PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);

 }

 ENDIF;

 //?USER: Exit processing

 //?06/16/21 DN W77734-If All OD Palletize is No Then Update OH to No.
 CASE;

 // IF PAR.All OD Palletize is No is yes
 IF PAR.All_OD_Palletize_is_No = 'Y';

 EXECUTE FUNCTION(CHG Palletize         CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC2197526;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('N');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

}


//?Modified flag
CASE;

// IF PAR.Header Status is Confirmed & Complete
IF PAR.Header_Status = 'C'/'R';

//?     ** no change
//?Modified flag
// IF WRK.Substituted Flag is Substitutions Exist
IF WRK.Substituted_Flag = 'Y';

// PAR.Modified Flag = CND.Shipped & Modified
PAR.Modified_Flag = 'M';

//?Modified flag
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Modified Flag = CND.Not Shipped
PAR.Modified_Flag = *BLANK;

ENDIF;

ENDDO;

//?Update Order Header and TMS Trigger table
DO;

EXECUTE FUNCTION(UPD Chg Order-Post     RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1282159;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.USR_Order_Value);
PARAMETER(PAR.USR_Order_Weight);
PARAMETER(PAR.Modified_Flag);
PARAMETER(PAR.USR_Production);
PARAMETER(PAR.USR_Credit_Hold);
PARAMETER(LCL.Company_Organization);
PARAMETER(LCL.Load_Status);
PARAMETER(PAR.Pricing_Event_Called_From);
{
 //?USER: Initialize routine

 //?***** Changes and Comments
 DO;

 //?E4119 RMC 5/23/2016 Remove Live with tpm checks
 //?** 02/22/16 LJB E4119O:  This is changing AGAIN. Write to the Trigger
 //?**   file when Order is first created?????
 //?** 02/09/16 LJB E004119:  This is changing again. OE won't write to
 //?**   the Trigger file at this time
 //?** 10/08/15 LJB E004119:  Create TMS Trigger Table record if order
 //?**   is not complete/confirmed and order has been changed.
 //?**   The TMS Load Plan Ready flag should be "  " in the Ord Hdr
 //?**   when first created, then "N ". When sent to MG the first time
 //?**   the flag will always by "Y ".
 //?** 10/14/13 RMC E2684 Dont hold order for Prod Hold -- only for Credt Hold
 //?** 02/01/13 RMC P02045 Upd TPM Order Header TRG if sts is Y or P
 //?** 08/22/12 RMC P0196: Dailys implementation of CAT2 - in exit process
 //?** 11/30/11 LJB P1251: EDI Nistevo Send Status is no longer used
 //?**   Check Order Detail for Export Order Automation Upload errors.
 //?**   If errors still exist then set Order Header, Order Requires
 //?**   Review flag to Yes.
 ENDDO;

 //?USER: Process Data record

 //?C2576:  don't change status if confirmed/complete; no holds, either
 //?Change status if needed
 CASE;

 // IF DB1.Header Status is Confirmed & Complete
 IF DB1.Header_Status = 'C'/'R';

 // PAR.Header Status Last = DB1.Header Status Last
 PAR.Header_Status_Last = DB1.Header_Status_Last;

 // PAR.Header Status = DB1.Header Status
 PAR.Header_Status = DB1.Header_Status;

 //?Change status if needed
 // IF DB1.Header Status is Available
 IF DB1.Header_Status = 'A';

 // OR DB1.Header Status is Cancelled
 OR DB1.Header_Status = 'X';

 //?03/14/19 DN S14648-Added Condition to Check Header Sts='X'.
 // PAR.Header Status Last = DB1.Header Status Last
 PAR.Header_Status_Last = DB1.Header_Status_Last;

 // PAR.Header Status = DB1.Header Status
 PAR.Header_Status = DB1.Header_Status;

 //?Change status if needed
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?don't reactivate if order was cancelled               e004119
 CASE;

 // IF DB1.Header Status is Not cancelled
 IF DB1.Header_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 // PAR.Header Status Last = DB1.Header Status
 PAR.Header_Status_Last = DB1.Header_Status;

 // PAR.Header Status = CND.Available
 PAR.Header_Status = 'A';

 ENDIF;

 ENDIF;

 //?On Credit Hold
 CASE;

 // IF PAR.Header Status is Confirmed & Complete
 IF PAR.Header_Status = 'C'/'R';

 // PAR.Credit Hold = CND.No
 PAR.Credit_Hold = 'N';

 //?On Credit Hold
 // IF PAR.USR Credit Hold is Yes
 IF PAR.USR_Credit_Hold = 'Y';

 // PAR.Header Status = CND.Hold
 PAR.Header_Status = 'H';

 // PAR.Credit Hold = CND.Yes
 PAR.Credit_Hold = 'Y';

 //?On Credit Hold
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Credit Hold = CND.No
 PAR.Credit_Hold = 'N';

 ENDIF;

 //?Production Hold
 CASE;

 // IF PAR.Header Status is Confirmed & Complete
 IF PAR.Header_Status = 'C'/'R';

 // PAR.Production Hold = CND.No
 PAR.Production_Hold = 'N';

 //?Production Hold
 // IF PAR.USR Production is Yes
 IF PAR.USR_Production = 'Y';

 //?E2824 10/14/13 RMC Dont hold Order for Prod Hold -- only for Credit Hold
 // PAR.Production Hold = CND.Yes
 PAR.Production_Hold = 'Y';

 //?Production Hold
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Hold = CND.No
 PAR.Production_Hold = 'N';

 ENDIF;

 //?** Check Ord Dtl record for Export Ord Autom Upload Errors  P001251
 //?**  This function does not recheck or reset errors
 // Call program RTV OD Error from Upl XF.
 CALL PROGRAM(RTV OD Error from Upl XF) ('PBACXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Item_Age_Days);
 PARAMETER(LCL.Order_Line_Error_Type);
 PARAMETER(LCL.Status_Flag_20_Y_N);

 //?** If upload errors in Ord Dtl, set Ord Requires Rvw to Yes  P001251
 CASE;

 // IF LCL.Order Line Error Type is Upload Error Pending
 IF LCL.Order_Line_Error_Type = 'DD'/'HD'/'IT'/'AC'/'WT'/'PA'/'SL'/'DT'/'ME';

 // PAR.Order Requires Review = CND.Yes
 PAR.Order_Requires_Review = 'Y';

 ENDIF;

 EXECUTE FUNCTION(CHG Ord Sts/Crd-PrdHld CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1282170;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('N');
 PARAMETER(PAR.Header_Status);
 PARAMETER(PAR.Header_Status_Last);
 PARAMETER(PAR.Order_Value_Total);
 PARAMETER(PAR.Order_Weight_Total);
 PARAMETER(PAR.Credit_Hold);
 PARAMETER(PAR.Production_Hold);
 PARAMETER(PAR.Modified_Flag);
 PARAMETER(PAR.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program TRG Order Hdr CHG Trig XT.
  CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Ship_To_Name);
  PARAMETER(DB1.Ship_To_Address_Line_1);
  PARAMETER(DB1.Ship_To_Address_Line_2);
  PARAMETER(DB1.Ship_To_Address_Line_3);
  PARAMETER(DB1.Ship_To_City);
  PARAMETER(DB1.Ship_To_State_Code);
  PARAMETER(DB1.Ship_To_Zip_Postal_Code);
  PARAMETER(DB1.Bill_to_Customer);
  PARAMETER(DB1.Bill_to_Name);
  PARAMETER(DB1.Bill_to_Address_Line_1);
  PARAMETER(DB1.Bill_to_Address_Line_2);
  PARAMETER(DB1.Bill_to_Address_Line_3);
  PARAMETER(DB1.Bill_to_City);
  PARAMETER(DB1.Bill_to_State_Code);
  PARAMETER(DB1.Bill_to_Zip_Postal_Code);
  PARAMETER(DB1.Customer_Purchase_Order_#);
  PARAMETER(DB1.Order_Date);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Cancel_Date);
  PARAMETER(DB1.Terms_Code);
  PARAMETER(DB1.Special_Instructions);
  PARAMETER(DB1.Special_Instructions_2);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Comment_Print_Acknowledge);
  PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
  PARAMETER(DB1.Comment_Print_Pick_Slip);
  PARAMETER(DB1.Comment_Print_Ship_Doc);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Order_in_Use);
  PARAMETER(DB1.Header_Status);
  PARAMETER(DB1.Header_Status_Last);
  PARAMETER(DB1.Order_Type_Print_Status);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.User_Original_Entry);
  PARAMETER(DB1.Date_of_Original_Entry);
  PARAMETER(DB1.Order_Value_Total);
  PARAMETER(DB1.Order_Weight_Total);
  PARAMETER(DB1.Credit_Hold);
  PARAMETER(DB1.Production_Hold);
  PARAMETER(DB1.New_Customer_Hold);
  PARAMETER(DB1.Requested_Delivery_Date);
  PARAMETER(DB1.Requested_Delivery_Time);
  PARAMETER(DB1.Accounts_Receiv_Ent_1);
  PARAMETER(DB1.Accounts_Receiv_Ent_2);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.LTL_Flag);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Shipping_Method);
  PARAMETER(DB1.Export_Status);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Shrink_Wrap);
  PARAMETER(DB1.Slip_Sheet);
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Reefer_Temperature);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Attach_to_Invoice_Number);
  PARAMETER(DB1.Load_Plan_Order);
  PARAMETER(DB1.Print_Pick_Slip);
  PARAMETER(DB1.Resell_Reference_Number);
  PARAMETER(DB1.Special_Comment_1);
  PARAMETER(DB1.Special_Comment_2);
  PARAMETER(DB1.Affect_Auto_Accruals);
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(DB1.Manager_Level_Code);
  PARAMETER(DB1.VP_Level_Code);
  PARAMETER(DB1.Attach_to_Order_Number);
  PARAMETER(DB1.Reason_for_Price_Audit);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Invoice_Date);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Trans_Contol_AS400_Plant);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.A_R_order_Value_Total);
  PARAMETER(DB1.Billing_Activity_Type);
  PARAMETER(DB1.Block_Order_Flag);
  PARAMETER(DB1.Order_Certification_Flag);
  PARAMETER(DB1.Invoice_Order_Value_Tot);
  PARAMETER(DB1.Process_Sts_for_3C);
  PARAMETER(DB1.Order_Conf_Fax_Sts);
  PARAMETER(DB1.Manifest_Fax_Sts);
  PARAMETER(DB1.Invoice_Fax_Sts);
  PARAMETER(DB1.Transfer_in_Storage_Ind);
  PARAMETER(DB1.Email_Cust_On_Order_Ship);
  PARAMETER(DB1.Order_Emailed);
  PARAMETER(DB1.Export_Docs_Go_w_Driver);
  PARAMETER(DB1.Shipping_Temp_Code_C_F);
  PARAMETER(DB1.Broker_Order_Status);
  PARAMETER(DB1.Air_Freight_Order);
  PARAMETER(DB1.Order_Requires_Review);
  PARAMETER(DB1.OH_Load_Plan_Ready);
  PARAMETER(DB1.Export_USDA_Approved);
  PARAMETER(DB1.HPB_Ship_to_Warehouse);
  PARAMETER(DB1.OH_TF_Exempt_Code);
  PARAMETER(DB1.OH_Appt_Confirmation_Dt);
  PARAMETER(DB1.JPN_Invoice_Issuance_Date);
  PARAMETER(DB1.Load_Actual_Shipped_Date);
  PARAMETER(DB1.Load_BOL_Complete_Date);
  PARAMETER(DB1.Load_Truck_Departure_Date);
  PARAMETER(DB1.Maximum_Gross_Weight);
  PARAMETER(DB1.Time_of_Original_Entry);
  PARAMETER(DB1.OH_Appt_Confirmation_Tm);
  PARAMETER(DB1.Load_BOL_Complete_Time);
  PARAMETER(DB1.Load_Truck_Departure_Time);
  PARAMETER(DB1.Act_Frt_Reference_Amount);
  PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
  PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
  PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
  PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);

 }

 // PAR.OH Load Plan Ready = DB1.OH Load Plan Ready
 PAR.OH_Load_Plan_Ready = DB1.OH_Load_Plan_Ready;

 //?* Default in DDD/T if Load ID is blanks
 CASE;

 // IF DB1.Load ID is Blank
 IF DB1.Load_ID = *ZERO;

 //?** Defaults DDD/T to SSD & 8:00 am if export w/no state code
 // Call program CLC Deadln Depart Dt  XF.
 CALL PROGRAM(CLC Deadln Depart Dt  XF) ('POSCXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(LCL.Deadline_Depart_DT_HDR);
 PARAMETER(LCL.Deadline_Depart_Time_HDR);

 //?** 11/16/2007 LJB FP1251
 //?** If no Miles To Next Stop, DDD/T will be zeros
 EXECUTE FUNCTION(Upd Deadline Dte/Tme  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1648968;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Deadline_Depart_DT_HDR);
 PARAMETER(LCL.Deadline_Depart_Time_HDR);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Deadline Dte/Tme  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1648969;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Deadline_Depart_Date_LH);
  PARAMETER(PAR.Deadline_Depart_Time_LH);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 ENDIF;

 //?USER: Exit processing

 //?P00196 8/22/12 RMC Chk Pfs Interface cond "LDORDD" for Y for this now
 EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
 PARAMETER(DB1.Company_Number);
 PARAMETER('LDORDD');
 PARAMETER(LCL.PFS_AccuSort_Active);
 PARAMETER(LCL.PFS_Carlisle_Active);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF DB1.Load ID is GT Zero
 IF DB1.Load_ID > *ZERO;

 EXECUTE FUNCTION(RTV Load Status        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1297640;
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.Load_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

  MOVE *ALL (To: PAR From: DB1);

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Load Status = CND.*Blank
 LCL.Load_Status = *BLANK;

 ENDIF;

 //?Carlisle
 CASE;

 // IF LCL.PFS Carlisle Active is Yes
 IF LCL.PFS_Carlisle_Active = 'Y';

 CASE;

 // IF DB1.Load ID is GT Zero
 IF DB1.Load_ID > *ZERO;

 CASE;

 // IF LCL.Load Status is Lock
 IF LCL.Load_Status = 'L';

 // Call program PFS Lock Load/Order   XF.
 CALL PROGRAM(PFS Lock Load/Order   XF) ('PPNLXFR');
 PARAMETER(DB1.Load_ID);

 ENDIF;

 ENDIF;

 ENDIF;

 //?P00196 RMC 10/3/12 CAT2 Dailys-Interface Cond "ORDONL" - send orders only
 //?PFS Order Header XF
 CASE;

 // IF DB1.Load ID is Blank
 IF DB1.Load_ID = *ZERO;

 // OR LCL.Load Status is Prior to Lock
 OR LCL.Load_Status = 'C'/'E'/'U';

 EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
 PARAMETER(DB1.Company_Number);
 PARAMETER('ORDONL');
 PARAMETER(LCL.PFS_AccuSort_Active);
 PARAMETER(LCL.PFS_Carlisle_Active);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.PFS Carlisle Active is Yes
 IF LCL.PFS_Carlisle_Active = 'Y';

 // LCL.Load Status = CND.*Blank
 LCL.Load_Status = *BLANK;

 // LCL.Load ID = CND.Blank
 LCL.Load_ID = *ZERO;

 // Call program Zzz Order Header      XF.
 CALL PROGRAM(Zzz Order Header      XF) ('PBEYXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(LCL.Load_ID);
 PARAMETER(LCL.Load_Status);

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Pricing Event Called From is TMS Update for Select
 IF PAR.Pricing_Event_Called_From = 'OE'/'SWP'/'CEO'/'UWT';

 CASE;

 // IF PAR.OH Load Plan Ready is Yes
 IF PAR.OH_Load_Plan_Ready = 'Y';

 // Call program Rtv Crt OH Trigger    XF.
 CALL PROGRAM(Rtv Crt OH Trigger    XF) ('PBWVXFR');
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Company_Number);

 ENDIF;

 ENDIF;

}


ENDDO;

//?Update Ham Group/Order records.
DO;

//?*** Delete OLD Ham Group/Order Entries ***
EXECUTE FUNCTION(DLT Unused HG/Orders   RT) TYPE(RTVOBJ) FILE(PDNDCPP)          AC1568164;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(VAL Ham Group on Order RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1568165;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Ham_Group_Number);
 PARAMETER(PAR.Ham_Group_Found_USR);
 {
  //?USER: Initialize routine

  // PAR.Ham Group Found USR = CND.No
  PAR.Ham_Group_Found_USR = 'N';

  //?USER: Process Data record

  CASE;

  // IF DB1.Ham Group Number EQ PAR.Ham Group Number
  IF DB1.Ham_Group_Number = PAR.Ham_Group_Number;

  // AND DB1.Detail Line Status is Not cancelled
  AND DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

  // PAR.Ham Group Found USR = CND.Yes
  PAR.Ham_Group_Found_USR = 'Y';

  QUIT;

  ENDIF;

 }

 CASE;

 // IF PAR.Ham Group Found USR is No
 IF PAR.Ham_Group_Found_USR = 'N';

 EXECUTE FUNCTION(DLT Ham Group/Order    DL) TYPE(DLTOBJ) FILE(PDNDCPP)          AC1564714;
 PARAMETER(DB1.Ham_Group_Number);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 ENDIF;

}


//?*** Create NEW Ham Group/Order Entries ***
EXECUTE FUNCTION(CRT New HamGrp/Orders  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1568168;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Load_ID);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Ham Group Number is Entered
 IF DB1.Ham_Group_Number <> *ZERO;

 EXECUTE FUNCTION(RTV Deadln DepartDT/TM RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1497302;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  QUIT;

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 EXECUTE FUNCTION(CRT Ham Group/Order    CR) TYPE(CRTOBJ) FILE(PDNDCPP)          AC1564712;
 PARAMETER(DB1.Ham_Group_Number);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 {
  //?USER: Processing before Data update

  // DB1.EDI Status 1 = CND.Blank
  DB1.EDI_Status_1 = *BLANK;

  // DB1.EDI Status 2 = CND.Blank
  DB1.EDI_Status_2 = *BLANK;

  // DB1.EDI Status 3 = CND.Blank
  DB1.EDI_Status_3 = *BLANK;

  // DB1.Record Status = CND.Active
  DB1.Record_Status = 'A';

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing if Data record already exists

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

 //?** Default record status to Active
 EXECUTE FUNCTION(CRT Ham Group/Customer CR) TYPE(CRTOBJ) FILE(PDNCCPP)          AC1564691;
 PARAMETER(DB1.Ham_Group_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(*BLANK);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER('A');
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?USER: Processing before Data update

  //?** change from par context             05/04/2007 LJB OMS011
  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing if Data record already exists

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

 ENDIF;

}


ENDDO;

// PAR.Order Value Total = PAR.USR Order Value
PAR.Order_Value_Total = PAR.USR_Order_Value;

// PAR.Order Weight Total = PAR.USR Order Weight
PAR.Order_Weight_Total = PAR.USR_Order_Weight;

