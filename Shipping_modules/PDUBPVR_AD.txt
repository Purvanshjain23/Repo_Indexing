// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDUBPVR
// ?Date: 14.08.2025 Time: 03:33:05
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.PRT Printer Device = CND.Not entered
PAR.PRT_Printer_Device = *BLANK;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// LCL.Text 3 Length USR = CON.ALL
LCL.Text_3_Length_USR = 'ALL';

//?***** Change Log and Comments
DO;

//?*****
//?** 02/13/2020 RMC W57687
//?** Add Email XLS to the screen and pass to the report CLP
//?*****
//?** 07/06/2015 LJB E004147
//?** "ALL" not allowed for On-Time/Late Delivery Code
//?*****
//?** 04/16/2015 LJB E004076
//?** Add Email field to the screen and pass to the report CLP
//?*****
//?** 03/11/2015 LJB E003965
//?** Reactivate the Salesperson code in the optional selections
//?*****
//?5/14/04 RMC - PKTR01 - make company optional
//?*****
//?** 06/14/2006 LJB TRF011
//?** Add Exclude Exports to the selections
//?** Add a new report selection for Report by Actual Ship Date
//?** Remove single text field for Shipping or Transportation
//?** Change on time reason code to select from file (file is new)
//?** Put report selection description on the screen
//?*****
//?7/24/06 RMC - trf011 change appl checked from TRF back to OMS
//?*****
//?** 08/25/2006 LJB TRF011
//?** Add OTR department and reason to the screen.
//?** Removed description since any combination can be entered.
//?** Don't validate reason code combinations here. Just pass
//?** to report program. If not found, a message will print.
//?*****
//?**DLY029R 05/23/07 JRB Get days will use default co num
//?** for hard coded co num
//?*****
ENDDO;

//?USER: Load screen

//?** Default company no. to the screen if allow multi-co is no **
CASE;

// IF PAR.Allow Multi-Company is no
IF PAR.Allow_Multi_Company = 'N';

// DTL.Company Number CDE = PAR.Company Number
DTL.Company_Number_CDE = PAR.Company_Number;

ENDIF;

//?** Retrieve Company Name
CASE;

// IF DTL.Company Number CDE is not equal to zero
IF DTL.Company_Number_CDE <> *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// DTL.Load Type = CND.Regular
DTL.Load_Type = 'R';

// DTL.Load Type Desc = Condition name of DTL.Load Type
DTL.Load_Type_Desc = RTVCND(DTL.Load_Type);

// DTL.Late Deliv Report Slt USR = CND.Requested Delivery Date
DTL.Late_Deliv_Report_Slt_USR = 2;

// DTL.Description = Condition name of DTL.Late Deliv Report Slt USR
DTL.Description = RTVCND(DTL.Late_Deliv_Report_Slt_USR);

//?** Default Exclude Exports to 'Y'es
//?** Per Teri F...  Default Exclude Exports to 'N'  7/28/06
// DTL.Yes/No Selection      USR = CND.No
DTL.Yes_No_Selection_USR = 'N';

CASE;

// IF DTL.USR Quarter is Valid Values
IF DTL.USR_Quarter = '1'/'2'/'3'/'4';

// DTL.USR Quarter = Condition name of DTL.USR Description 18
DTL.USR_Quarter = RTVCND(DTL.USR_Description_18);

ENDIF;

//?USER: Validate fields

// DTL.Company Name = CON.*BLANK
DTL.Company_Name = *BLANK;

//?Process F4 on Company Number
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Company Number CDE
AND PGM.*Cursor_field = DTL.Company_Number_CDE;

CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(DTL.Company_Number_CDE);

//?Retrieve Company Name
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Load Number
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.CD7 Int Numeric Key
AND PGM.*Cursor_field = DTL.CD7_Int_Numeric_Key;

// WRK.Load ID Alpha = DTL.CD7 Int Numeric Key
WRK.Load_ID_Alpha = DTL.CD7_Int_Numeric_Key;

// Call program SEL Shipped Load       SR.
CALL PROGRAM(SEL Shipped Load       SR) ('PDKWSRR');
PARAMETER(WRK.Load_ID_Alpha);
PARAMETER(DTL.Company_Number_CDE);

// DTL.CD7 Int Numeric Key = WRK.Load ID Alpha
DTL.CD7_Int_Numeric_Key = WRK.Load_ID_Alpha;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Ship to Customer
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.USR Ship to Customer CD7
AND PGM.*Cursor_field = DTL.USR_Ship_to_Customer_CD7;

// Call program SEL Cust/ShpTo Flag 'Y'SR.
CALL PROGRAM(SEL Cust/ShpTo Flag 'Y'SR) ('PDYSSRR');
PARAMETER(DTL.USR_Ship_to_Customer_CD7);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Carrier Code
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Carrier Code
AND PGM.*Cursor_field = DTL.Carrier_Code;

// Call program SEL Carrier Name       SR.
CALL PROGRAM(SEL Carrier Name       SR) ('PDWHSRR');
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Name);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Salesperson
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Salesperson Code
AND PGM.*Cursor_field = DTL.Salesperson_Code;

// Call program SEL Active Salesperson SR.
CALL PROGRAM(SEL Active Salesperson SR) ('CABYSRR');
PARAMETER(DTL.Salesperson_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on On Time Reason Group
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.OTR Group Code
AND PGM.*Cursor_field = DTL.OTR_Group_Code;

// Call program SEL On Time Reas Group SR.
CALL PROGRAM(SEL On Time Reas Group SR) ('PPYWSRR');
PARAMETER(WRK.On_Time_Reason_Code);
PARAMETER(NLL.OTR_Description);
PARAMETER(WRK.OTR_Department_Code);
PARAMETER(NLL.OTR_Dept_Description);
PARAMETER(DTL.OTR_Group_Code);
PARAMETER(NLL.OTR_Group_Description);
PARAMETER(NLL.Record_Status);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on On Time Reason Department  08/25/2006 LJB TRF011
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.OTR Department Code
AND PGM.*Cursor_field = DTL.OTR_Department_Code;

// Call program SEL On Time Reas Group SR.
CALL PROGRAM(SEL On Time Reas Group SR) ('PPYWSRR');
PARAMETER(WRK.On_Time_Reason_Code);
PARAMETER(NLL.OTR_Description);
PARAMETER(DTL.OTR_Department_Code);
PARAMETER(NLL.OTR_Dept_Description);
PARAMETER(WRK.OTR_Group_Code);
PARAMETER(NLL.OTR_Group_Description);
PARAMETER(NLL.Record_Status);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on On Time Reason Code        08/25/2006 LJB TRF011
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.On Time Reason Code
AND PGM.*Cursor_field = DTL.On_Time_Reason_Code;

// Call program SEL On Time Reas Group SR.
CALL PROGRAM(SEL On Time Reas Group SR) ('PPYWSRR');
PARAMETER(DTL.On_Time_Reason_Code);
PARAMETER(NLL.OTR_Description);
PARAMETER(WRK.OTR_Department_Code);
PARAMETER(NLL.OTR_Dept_Description);
PARAMETER(WRK.OTR_Group_Code);
PARAMETER(NLL.OTR_Group_Description);
PARAMETER(NLL.Record_Status);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Validate Unit of Measure
CASE;

// IF DTL.USR U/M 1 is Combos
IF DTL.USR_U_M_1 = 'CB';

// OR DTL.USR U/M 1 is EQ Boxes
OR DTL.USR_U_M_1 = 'BX';

// OR DTL.USR U/M 1 is Not Entered
OR DTL.USR_U_M_1 = *BLANK;

//?Validate Unit of Measure
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Allowed entries are Combos, Boxes, or Blanks'
ERROR(USR3641);
MSGPARM(DTL.USR_U_M_1);

ENDIF;

EXECUTE FUNCTION(Customer Name DRV) TYPE(DRVFLD)                                AC1631131;
PARAMETER(DTL.Customer_Name_DRV);
PARAMETER(DTL.USR_Ship_to_Customer_CD7);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Customer_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?error msg if customer not found
CASE;

// IF DTL.Customer Name DRV is blanks
IF DTL.Customer_Name_DRV = *BLANK;

// AND DTL.USR Ship to Customer CD7 is Entered
AND DTL.USR_Ship_to_Customer_CD7 <> *ZERO;

// Send error message - 'Customer Master not found.'
ERROR(USR0170);
MSGPARM(DTL.USR_Ship_to_Customer_CD7);

ENDIF;

// DTL.Description = Condition name of DTL.Late Deliv Report Slt USR
DTL.Description = RTVCND(DTL.Late_Deliv_Report_Slt_USR);

// DTL.Load Type Desc = Condition name of DTL.Load Type
DTL.Load_Type_Desc = RTVCND(DTL.Load_Type);

//?USER: Validate relations

// DTL.Load Type Desc = CON.*BLANK
DTL.Load_Type_Desc = *BLANK;

// DTL.USR Description 18 = CON.*BLANK
DTL.USR_Description_18 = *BLANK;

// DTL.Description = CON.*BLANK
DTL.Description = *BLANK;

// DTL.OTR Group Description = CON.*BLANK
DTL.OTR_Group_Description = *BLANK;

// DTL.Company Name = CON.*BLANK
DTL.Company_Name = *BLANK;

// DTL.Name = CON.*BLANK
DTL.Name = *BLANK;

// DTL.Load Type Desc = Condition name of DTL.Load Type
DTL.Load_Type_Desc = RTVCND(DTL.Load_Type);

//?Week Ending Date, Year, or Quarter required
CASE;

// IF DTL.USR To Date is not entered
IF DTL.USR_To_Date = *ZERO;

// AND DTL.USR Year is Zero
AND DTL.USR_Year = *ZERO;

// AND DTL.USR Quarter is Not Entered
AND DTL.USR_Quarter = *BLANK;

// Send error message - 'Week Ending Date, or Year, or Quarter must be entered.'
ERROR(USR2496);

//?Week Ending Date, Year, or Quarter required
// IF *OTHERWISE
IF *OTHERWISE;

//?Week Ending Date not valid with Year or Quarter
CASE;

// IF DTL.USR To Date is Entered
IF DTL.USR_To_Date <> *ZERO;

// AND DTL.USR Year is Not Zero
AND ( DTL.USR_Year <> *ZERO;

// OR DTL.USR Quarter is Valid Values
OR DTL.USR_Quarter = '1'/'2'/'3'/'4' );

// Send error message - 'Year and Quarter are invalid with Week Ending Date'
ERROR(USR2499);

ENDIF;

ENDIF;

//?Get Saturday date -- then weekly date range
CASE;

// IF DTL.USR To Date is Entered
IF DTL.USR_To_Date <> *ZERO;

EXECUTE FUNCTION(RTV Day of Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1658821;
PARAMETER(PAR.Company_Number);
PARAMETER(DTL.USR_To_Date);
PARAMETER(PAR.Day_of_Week);
{
 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.Day of Week is Saturday
IF PAR.Day_of_Week = '7';

// WRK.Saturday              USR = DTL.USR To Date
WRK.Saturday_USR = DTL.USR_To_Date;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Next Saturday      RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1674395;
PARAMETER(PAR.Company_Number);
PARAMETER(DTL.USR_To_Date);
PARAMETER(WRK.Saturday_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Day of Week is Saturday
 IF DB1.Day_of_Week = '7';

 // PAR.Scheduled Ship Date = DB1.Post to G/L Date
 PAR.Scheduled_Ship_Date = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

}


ENDIF;

// DTL.USR From Date = WRK.Saturday              USR + CON.-6 *DAYS
DTL.USR_From_Date = DATEINCR(WRK.Saturday_USR '-6' 'DY' 1111111 'NONE' 'N' 1);

// DTL.USR Date - ATR = WRK.Saturday              USR
DTL.USR_Date_ATR = WRK.Saturday_USR;

// PAR.From Date Pass        USR = DTL.USR From Date
PAR.From_Date_Pass_USR = DTL.USR_From_Date;

// PAR.Thru Date Pass        USR = DTL.USR Date - ATR
PAR.Thru_Date_Pass_USR = DTL.USR_Date_ATR;

ENDIF;

//?If Quarter is entered, Year is required.
CASE;

// IF DTL.USR Quarter is Valid Values
IF DTL.USR_Quarter = '1'/'2'/'3'/'4';

// AND DTL.USR Year is Zero
AND DTL.USR_Year = *ZERO;

// Send error message - 'Year is required if Quarter is entered.'
ERROR(USR2498);

ENDIF;

//?Determine periods and date range if Quarter is entered
CASE;

// IF DTL.USR Quarter is Not Entered
IF DTL.USR_Quarter = *BLANK;

//?Determine periods and date range if Quarter is entered
// IF *OTHERWISE
IF *OTHERWISE;

//?Find Periods in Quarter
CASE;

// IF DTL.USR Quarter is 1st - Period 1-3
IF DTL.USR_Quarter = '1';

// WRK.USR From Period = CON.1
WRK.USR_From_Period = 1;

// WRK.USR To Period = CON.3
WRK.USR_To_Period = 3;

//?Find Periods in Quarter
// IF DTL.USR Quarter is 2nd - Period 4-6
IF DTL.USR_Quarter = '2';

// WRK.USR From Period = CON.4
WRK.USR_From_Period = 4;

// WRK.USR To Period = CON.6
WRK.USR_To_Period = 6;

//?Find Periods in Quarter
// IF DTL.USR Quarter is 3rd - Period 7-9
IF DTL.USR_Quarter = '3';

// WRK.USR From Period = CON.7
WRK.USR_From_Period = 7;

// WRK.USR To Period = CON.9
WRK.USR_To_Period = 9;

//?Find Periods in Quarter
// IF DTL.USR Quarter is 4th - Period 10-12
IF DTL.USR_Quarter = '4';

// WRK.USR From Period = CON.10
WRK.USR_From_Period = 10;

// WRK.USR To Period = CON.12
WRK.USR_To_Period = 12;

ENDIF;

//?Retrieve beginning date of Period
EXECUTE FUNCTION(RTV First Dte of PeriodRT) TYPE(RTVOBJ) FILE(CAATREP)          AC1470512;
PARAMETER(PAR.Company_Number);
PARAMETER(DTL.USR_Year);
PARAMETER(WRK.USR_From_Period);
PARAMETER(DTL.USR_From_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Retrieve ending date of Period
EXECUTE FUNCTION(RTV Last Date of PeriodRT) TYPE(RTVOBJ) FILE(CAATREP)          AC1470484;
PARAMETER(PAR.Company_Number);
PARAMETER(DTL.USR_Year);
PARAMETER(WRK.USR_To_Period);
PARAMETER(DTL.USR_Date_ATR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// PAR.From Date Pass        USR = DTL.USR From Date
PAR.From_Date_Pass_USR = DTL.USR_From_Date;

// PAR.Thru Date Pass        USR = DTL.USR Date - ATR
PAR.Thru_Date_Pass_USR = DTL.USR_Date_ATR;

// PAR.Date 1          PASS  USR = DTL.USR Year
PAR.Date_1_PASS_USR = DTL.USR_Year;

// PAR.USR Quarter = DTL.USR Quarter
PAR.USR_Quarter = DTL.USR_Quarter;

ENDIF;

//?Determine date range if Year is entered
CASE;

// IF DTL.USR Year is Zero
IF DTL.USR_Year = *ZERO;

//?Determine date range if Year is entered
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.USR Quarter is Not Entered
IF DTL.USR_Quarter = *BLANK;

//?Retrieve beginning date of Year
EXECUTE FUNCTION(RTV First Day of Year  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1470525;
PARAMETER(PAR.Company_Number);
PARAMETER(DTL.USR_From_Date);
PARAMETER(DTL.USR_Year);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Retrieve ending date of Year
EXECUTE FUNCTION(RTV Last Day of Year   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1470526;
PARAMETER(PAR.Company_Number);
PARAMETER(DTL.USR_Date_ATR);
PARAMETER(DTL.USR_Year);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// PAR.From Date Pass        USR = DTL.USR From Date
PAR.From_Date_Pass_USR = DTL.USR_From_Date;

// PAR.Thru Date Pass        USR = DTL.USR Date - ATR
PAR.Thru_Date_Pass_USR = DTL.USR_Date_ATR;

ENDIF;

ENDIF;

//?** Put quarter description on screen if quarter is entered
CASE;

// IF DTL.USR Quarter is Valid Values
IF DTL.USR_Quarter = '1'/'2'/'3'/'4';

// DTL.USR Description 18 = Condition name of DTL.USR Quarter
DTL.USR_Description_18 = RTVCND(DTL.USR_Quarter);

ENDIF;

//?Validate Company if entered
CASE;

// IF DTL.Company Number is not equal to zero
IF DTL.Company_Number_CDE <> *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is Company not found
IF PGM.*Return_code = 'USR0003';

// DTL.Company Number = DTL.Company Number CDE
DTL.Company_Number = DTL.Company_Number_CDE;

// Send error message - 'Company Number not found'
ERROR(USR0163);

ENDIF;

ENDIF;

//?Validate Load ID if entered
CASE;

// IF DTL.CD7 Int Numeric Key is not equal zero
IF DTL.CD7_Int_Numeric_Key <> *ZERO;

EXECUTE FUNCTION(RTV Load Status        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1297640;
PARAMETER(DTL.CD7_Int_Numeric_Key);
PARAMETER(WRK.Load_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

}


//?Load not found
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// WRK.Load ID Alpha = DTL.CD7 Int Numeric Key
WRK.Load_ID_Alpha = DTL.CD7_Int_Numeric_Key;

// Send error message - 'Load ID is Invalid.'
ERROR(USR1305);
MSGPARM(WRK.Load_ID_Alpha);

ENDIF;

ENDIF;

//?Validate Carrier Code if entered
CASE;

// IF DTL.Carrier Code is entered
IF DTL.Carrier_Code <> *BLANK;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?If Carrier not found
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Carrier doesn't exist'
ERROR(USR1252);
MSGPARM(DTL.Carrier_Code);

ENDIF;

ENDIF;

//?Validate Salesperson if entered
CASE;

// IF DTL.Salesperson Code is entered
IF DTL.Salesperson_Code <> *BLANK;

EXECUTE FUNCTION(RTV Salesperson Name   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1111501;
PARAMETER(DTL.Salesperson_Code);
PARAMETER(DTL.Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?salesperson not found
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Salesperson not found.'
ERROR(USR0039);
MSGPARM(DTL.Salesperson_Code);

ENDIF;

ENDIF;

//?Validate report type
CASE;

// IF DTL.Late Deliv Report Slt USR is Option 2 or Option 3
IF DTL.Late_Deliv_Report_Slt_USR = '3'/'2';

// DTL.Description = Condition name of DTL.Late Deliv Report Slt USR
DTL.Description = RTVCND(DTL.Late_Deliv_Report_Slt_USR);

//?Validate report type
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid report type.'
ERROR(USR2902);
MSGPARM(DTL.Late_Deliv_Report_Slt_USR);

ENDIF;

//?Validate Unit of Measure
CASE;

// IF DTL.USR U/M 1 is Entered
IF DTL.USR_U_M_1 <> *BLANK;

CASE;

// IF DTL.USR U/M 1 is EQ Boxes
IF DTL.USR_U_M_1 = 'BX';

// IF DTL.USR U/M 1 is Combos
IF DTL.USR_U_M_1 = 'CB';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Unit of measure not found.'
ERROR(USR0573);
MSGPARM(DTL.USR_U_M_1);

ENDIF;

ENDIF;

//?** Don't validate reason code combinations here. Just pass
//?** to report program. If not found, a message will print.  08/25/06
//?Validate On Time Reason Code - "ALL" is not allowed   E004147
CASE;

// IF DTL.On Time Reason Code EQ LCL.Text 3 Length USR
IF DTL.On_Time_Reason_Code = LCL.Text_3_Length_USR;

// Send error message - 'On Time reason code "ALL" is not allowed.'
ERROR(USR4799);
MSGPARM(DTL.On_Time_Reason_Code);

ENDIF;

//?Validate Excludes Export
CASE;

// IF DTL.Yes/No Selection      USR is *yes/no
IF DTL.Yes_No_Selection_USR = 'N'/'Y';

//?Validate Excludes Export
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Value not found in drop down list - Prompt for list of values.'
ERROR(Y2U0052);

ENDIF;

//?Check for date change
CASE;

// IF DTL.USR From Date NE LCL.USR Day 1
IF DTL.USR_From_Date <> LCL.USR_Day_1;

// OR DTL.USR Date - ATR NE LCL.USR Day 2
OR DTL.USR_Date_ATR <> LCL.USR_Day_2;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?Save dates to edit changes and control Confirm Prompt
// LCL.USR Day 1 = DTL.USR From Date
LCL.USR_Day_1 = DTL.USR_From_Date;

// LCL.USR Day 2 = DTL.USR Date - ATR
LCL.USR_Day_2 = DTL.USR_Date_ATR;

//?Check for date change
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

//?USER: User defined action

//?Submit job for Print
// PAR.Company Number Pass   USR = DTL.Company Number CDE
PAR.Company_Number_Pass_USR = DTL.Company_Number_CDE;

// PAR.Ship to Customer Pass USR = DTL.USR Ship to Customer CD7
PAR.Ship_to_Customer_Pass_USR = DTL.USR_Ship_to_Customer_CD7;

//?** Call the correct report program based on select type
CASE;

// IF DTL.Late Deliv Report Slt USR is Actual Ship Date
IF DTL.Late_Deliv_Report_Slt_USR = '3';

//?** Call PDUCUPC which submits PPYQUPC which calls PPYMPFR
// WRK.Program name USR = CON.PPYQUPC
WRK.Program_name_USR = 'PPYQUPC';

//?** Call the correct report program based on select type
// IF *OTHERWISE
IF *OTHERWISE;

//?** Call PDUCUPC which submits PPY4UPC which calls PPY4PFR
// WRK.Program name USR = CON.PPY4UPC
WRK.Program_name_USR = 'PPY4UPC';

ENDIF;

// Call program Prt Late Delivery Rpt  CL.
CALL PROGRAM(Prt Late Delivery Rpt  CL) ('PDUCUPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(WRK.Program_name_USR);
PARAMETER('OMS');
PARAMETER(DTL.Carrier_Code);
PARAMETER('Late Delivery Report');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(DTL.USR_Year);
PARAMETER(PAR.From_Date_Pass_USR);
PARAMETER(PAR.Thru_Date_Pass_USR);
PARAMETER(DTL.CD7_Int_Numeric_Key);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(DTL.Salesperson_Code);
PARAMETER(PAR.Ship_to_Customer_Pass_USR);
PARAMETER(DTL.Yes_No_Selection_USR);
PARAMETER(DTL.USR_U_M_1);
PARAMETER(DTL.Load_Type);
PARAMETER(DTL.USR_Quarter);
PARAMETER(DTL.USR_Confirm_Status_Y_N);
PARAMETER(DTL.Late_Deliv_Report_Slt_USR);
PARAMETER(DTL.On_Time_Reason_Code);
PARAMETER(DTL.OTR_Department_Code);
PARAMETER(DTL.OTR_Group_Code);
PARAMETER(DTL.Email_Address);

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

