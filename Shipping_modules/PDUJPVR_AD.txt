// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDUJPVR
// ?Date: 14.08.2025 Time: 03:33:07
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.Change Flag USR = CND.Yes
PAR.Change_Flag_USR = 'Y';

// PAR.Status - Y or N = CND.yes
PAR.Status_Y_or_N = 'Y';

// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

// LCL.Description 14A      USR = CON.(S=Spreadsht )
LCL.Description_14A_USR = '(S=Spreadsht )';

//?USER: Load screen

//?** Default Co# & Name only if Allow Multi-Co=NO     03/07/06 LJB
CASE;

// IF PAR.Allow Multi-Company is no
IF PAR.Allow_Multi_Company = 'N';

// DTL.Company Number CDE = PAR.Company Number
DTL.Company_Number_CDE = PAR.Company_Number;

CASE;

// IF DTL.Company Number CDE is not equal to zero
IF DTL.Company_Number_CDE <> *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

ENDIF;

//?** Default "Include Collect Y/N" to Yes           E00210
// DTL.Status - Y or N = CND.yes
DTL.Status_Y_or_N = 'Y';

//?** Default Report Selection to E = Export Load Report  P000737
//?** If Broker is passed in, get Sumie's email from Company Values E1704
//?** Add: Customer Type, default to Bill To             E002587
//?** Add: Warehouse Type, default to Fresh              E002587
//?** Add: Letter of Credit (L/C) and default to "A" (All) E002768
// DTL.Select Option = CND.Export Load Report
DTL.Select_Option = 'E';

// DTL.Description 14A      USR = LCL.Description 14A      USR
DTL.Description_14A_USR = LCL.Description_14A_USR;

// DTL.Warehouse Type = CND.Fresh
DTL.Warehouse_Type = 'FR';

// DTL.Whse Type Description = Condition name of DTL.Warehouse Type
DTL.Whse_Type_Description = RTVCND(DTL.Warehouse_Type);

// DTL.Type of Customer USR = CND.ShipTo
DTL.Type_of_Customer_USR = 'S';

// DTL.Select Report Options USR = CND.L/C - All
DTL.Select_Report_Options_USR = 'A';

// DTL.Description 21a 1 Usr = Condition name of DTL.Select Report Options USR
DTL.Description_21a_1_Usr = RTVCND(DTL.Select_Report_Options_USR);

//?** display selection option description
CASE;

// IF DTL.Select Option is Export Load Report
IF DTL.Select_Option = 'E';

// DTL.Condition Desc. 1  USR = CON.Export Load Report
DTL.Condition_Desc_1_USR = 'Export Load Report';

//?** display selection option description
// IF DTL.Select Option is Export Load Rpt w/Weights
IF DTL.Select_Option = 'W';

// DTL.Condition Desc. 1  USR = CON.Export Load Rpt w/Weights
DTL.Condition_Desc_1_USR = 'Export Load Rpt w/Weights';

//?** display selection option description
// IF DTL.Select Option is Booking Rpt for Exports
IF DTL.Select_Option = 'B';

// DTL.Condition Desc. 1  USR = CON.Booking Rpt for Exports
DTL.Condition_Desc_1_USR = 'Booking Rpt for Exports';

//?** display selection option description
// IF DTL.Select Option is Booking for Exp Coord
IF DTL.Select_Option = 'C';

// DTL.Condition Desc. 1  USR = CON.Booking for Exp Coord
DTL.Condition_Desc_1_USR = 'Booking for Exp Coord';

//?** display selection option description
// IF DTL.Select Option is Booking Rpt 4/Export-Less
IF DTL.Select_Option = 'L';

// DTL.Condition Desc. 1  USR = CON.Booking Rpt 4/Export-Less
DTL.Condition_Desc_1_USR = 'Booking Rpt 4/Export-Less';

ENDIF;

//?** If called from Sumi's menu, protect Broker Code   E1704 LJB
CASE;

// IF PAR.Broker Code is Entered
IF PAR.Broker_Code <> *BLANK;

// DTL.Broker Code = PAR.Broker Code
DTL.Broker_Code = PAR.Broker_Code;

// PAR.Change Flag USR = CND.No
PAR.Change_Flag_USR = 'N';

//?** If Co# is blanks, default to User Profile Co#   E1788
CASE;

// IF DTL.Company Number CDE is Equal to zero
IF DTL.Company_Number_CDE = *ZERO;

// DTL.Company Number CDE = PAR.Company Number
DTL.Company_Number_CDE = PAR.Company_Number;

ENDIF;

//?** Default Co# to retrieve email address           E1788
CASE;

// IF DTL.Company Number CDE is Equal to zero
IF DTL.Company_Number_CDE = *ZERO;

// LCL.Company Number = PAR.Company Number
LCL.Company_Number = PAR.Company_Number;

//?** Default Co# to retrieve email address           E1788
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Company Number = DTL.Company Number CDE
LCL.Company_Number = DTL.Company_Number_CDE;

ENDIF;

//?** Default to Email the report to Sumie
// DTL.Email Selection usr = CND.Email Selected
DTL.Email_Selection_usr = 'E';

EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(LCL.Company_Number);
PARAMETER('JPNBRKREML');
PARAMETER(LCL.System_Value_Alpha);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Email Address = LCL.System Value Alpha
DTL.Email_Address = LCL.System_Value_Alpha;

ENDIF;

//?** If Country is passed in, protect Country Code    E1704 LJB
CASE;

// IF PAR.Country Code is Entered
IF PAR.Country_Code <> *BLANK;

//?* Put par.country in 1st country code field and protect
// DTL.Country Code 1 usr = PAR.Country Code
DTL.Country_Code_1_usr = PAR.Country_Code;

// PAR.Status - Y or N = CND.no
PAR.Status_Y_or_N = 'N';

ENDIF;

//?USER: Validate fields

//?Process F4 on Company and on Broker
DO;

//?Load
// DTL.Company Name = CON.*BLANK
DTL.Company_Name = *BLANK;

//?Process F4 on Company Number
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Company Number CDE
IF PGM.*Cursor_field = DTL.Company_Number_CDE;

CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(DTL.Company_Number_CDE);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

ENDIF;

// IF PGM.*Cursor field <IS> DTL.Broker Code
IF PGM.*Cursor_field = DTL.Broker_Code;

// Call program Sel Broker            SL.
CALL PROGRAM(Sel Broker            SL) ('POY6SRR');
PARAMETER(DTL.Broker_Code);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Test for plant co if co# is entered
CASE;

// IF DTL.Company Number CDE is not equal to zero
IF DTL.Company_Number_CDE <> *ZERO;

EXECUTE FUNCTION(Rtv Plant Co Status   RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1761084;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(PAR.Plant_Company_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.Plant Company Sts is Plant Company
IF PAR.Plant_Company_Sts = 'P';

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Company Number must be a Plant company.'
ERROR(USR3706);
MSGPARM(DTL.Company_Number_CDE);

ENDIF;

ENDIF;

ENDDO;

//?Process F4 on Load Number
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.CD7 Int Numeric Key
AND PGM.*Cursor_field = DTL.CD7_Int_Numeric_Key;

// WRK.Load ID Alpha = DTL.CD7 Int Numeric Key
WRK.Load_ID_Alpha = DTL.CD7_Int_Numeric_Key;

// Call program SEL Export Loads       SR.
CALL PROGRAM(SEL Export Loads       SR) ('PDULSRR');
PARAMETER(WRK.Load_ID_Alpha);

// DTL.CD7 Int Numeric Key = WRK.Load ID Alpha
DTL.CD7_Int_Numeric_Key = WRK.Load_ID_Alpha;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Customer - base return on Type of Customer  E002587
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Customer Number       NBR
AND PGM.*Cursor_field = DTL.Customer_Number_NBR;

CASE;

// IF DTL.Type of Customer USR is Bill To
IF DTL.Type_of_Customer_USR = 'B';

//?** Select Customer for Broker if Broker is passed in  E001704
CASE;

// IF PAR.Broker Code is Entered
IF PAR.Broker_Code <> *BLANK;

// Call program Zzz Cust Accr by Brokr SR.
CALL PROGRAM(Zzz Cust Accr by Brokr SR) ('PBBESRR');
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(PAR.Broker_Code);
PARAMETER(DTL.Customer_Number_NBR);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?** Select Customer for Broker if Broker is passed in  E001704
// IF *OTHERWISE
IF *OTHERWISE;

// Call program SEL Bill To for ContrctSR.
CALL PROGRAM(SEL Bill To for ContrctSR) ('PBJASRR');
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Customer_Number_NBR);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

// IF DTL.Type of Customer USR is ShipTo
IF DTL.Type_of_Customer_USR = 'S';

//?** Select Customer for Broker if Broker is passed in  E001704
CASE;

// IF PAR.Broker Code is Entered
IF PAR.Broker_Code <> *BLANK;

// Call program Zzz Cust Accr by Brokr SR.
CALL PROGRAM(Zzz Cust Accr by Brokr SR) ('PBBESRR');
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(PAR.Broker_Code);
PARAMETER(NLL.AR_Customer_Number);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?** Select Customer for Broker if Broker is passed in  E001704
// IF *OTHERWISE
IF *OTHERWISE;

//?4/2/04 slm add select on shipped to customer with customer name selection
// Call program SEL Cust/ShpTo Flag 'Y'SR.
CALL PROGRAM(SEL Cust/ShpTo Flag 'Y'SR) ('PDYSSRR');
PARAMETER(DTL.Ship_To_Customer);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?Process F4 on Country Codes (10 total)      P000737
DO;

//?Only allow prompt if Country was not passed in        E001704
CASE;

// IF PAR.Change Flag USR is *yes/blank
IF PAR.Change_Flag_USR = *BLANK/'Y';

//?Process F4 on Country 1
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Country Code 1 usr
AND PGM.*Cursor_field = DTL.Country_Code_1_usr;

// Call program SEL Country Active     SR.
CALL PROGRAM(SEL Country Active     SR) ('PDEGSRR');
PARAMETER(DTL.Country_Code_1_usr);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Country 2
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Country Code 2 usr
AND PGM.*Cursor_field = DTL.Country_Code_2_usr;

// Call program SEL Country Active     SR.
CALL PROGRAM(SEL Country Active     SR) ('PDEGSRR');
PARAMETER(DTL.Country_Code_2_usr);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Country 3
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Country Code 3 usr
AND PGM.*Cursor_field = DTL.Country_Code_3_usr;

// Call program SEL Country Active     SR.
CALL PROGRAM(SEL Country Active     SR) ('PDEGSRR');
PARAMETER(DTL.Country_Code_3_usr);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Country 4
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Country Code 4 usr
AND PGM.*Cursor_field = DTL.Country_Code_4_usr;

// Call program SEL Country Active     SR.
CALL PROGRAM(SEL Country Active     SR) ('PDEGSRR');
PARAMETER(DTL.Country_Code_4_usr);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Country 5
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Country Code 5 usr
AND PGM.*Cursor_field = DTL.Country_Code_5_usr;

// Call program SEL Country Active     SR.
CALL PROGRAM(SEL Country Active     SR) ('PDEGSRR');
PARAMETER(DTL.Country_Code_5_usr);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Country 6
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Country Code 6 usr
AND PGM.*Cursor_field = DTL.Country_Code_6_usr;

// Call program SEL Country Active     SR.
CALL PROGRAM(SEL Country Active     SR) ('PDEGSRR');
PARAMETER(DTL.Country_Code_6_usr);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Country 7
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Country Code 7 usr
AND PGM.*Cursor_field = DTL.Country_Code_7_usr;

// Call program SEL Country Active     SR.
CALL PROGRAM(SEL Country Active     SR) ('PDEGSRR');
PARAMETER(DTL.Country_Code_7_usr);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Country 8
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Country Code 8 usr
AND PGM.*Cursor_field = DTL.Country_Code_8_usr;

// Call program SEL Country Active     SR.
CALL PROGRAM(SEL Country Active     SR) ('PDEGSRR');
PARAMETER(DTL.Country_Code_8_usr);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Country 9
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Country Code 9 usr
AND PGM.*Cursor_field = DTL.Country_Code_9_usr;

// Call program SEL Country Active     SR.
CALL PROGRAM(SEL Country Active     SR) ('PDEGSRR');
PARAMETER(DTL.Country_Code_9_usr);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Country 10
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Country Code 10 usr
AND PGM.*Cursor_field = DTL.Country_Code_10_usr;

// Call program SEL Country Active     SR.
CALL PROGRAM(SEL Country Active     SR) ('PDEGSRR');
PARAMETER(DTL.Country_Code_10_usr);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

ENDDO;

//?Process F4 on Carrier Codes                 P000737
DO;

//?Process F4 on Carrier 1
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Carrier Code Usr 1
AND PGM.*Cursor_field = DTL.Carrier_Code_Usr_1;

// Call program SEL Active Carrier     SR.
CALL PROGRAM(SEL Active Carrier     SR) ('OMY6SRR');
PARAMETER(DTL.Carrier_Code_Usr_1);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Carrier 2
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Carrier Code Usr 2
AND PGM.*Cursor_field = DTL.Carrier_Code_Usr_2;

// Call program SEL Active Carrier     SR.
CALL PROGRAM(SEL Active Carrier     SR) ('OMY6SRR');
PARAMETER(DTL.Carrier_Code_Usr_2);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Carrier 3
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Carrier Code Usr 3
AND PGM.*Cursor_field = DTL.Carrier_Code_Usr_3;

// Call program SEL Active Carrier     SR.
CALL PROGRAM(SEL Active Carrier     SR) ('OMY6SRR');
PARAMETER(DTL.Carrier_Code_Usr_3);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Carrier 4
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Carrier Code Usr 4
AND PGM.*Cursor_field = DTL.Carrier_Code_Usr_4;

// Call program SEL Active Carrier     SR.
CALL PROGRAM(SEL Active Carrier     SR) ('OMY6SRR');
PARAMETER(DTL.Carrier_Code_Usr_4);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Carrier 5
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Carrier Code Usr 5
AND PGM.*Cursor_field = DTL.Carrier_Code_Usr_5;

// Call program SEL Active Carrier     SR.
CALL PROGRAM(SEL Active Carrier     SR) ('OMY6SRR');
PARAMETER(DTL.Carrier_Code_Usr_5);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Carrier 6
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Carrier Code Usr 6
AND PGM.*Cursor_field = DTL.Carrier_Code_Usr_6;

// Call program SEL Active Carrier     SR.
CALL PROGRAM(SEL Active Carrier     SR) ('OMY6SRR');
PARAMETER(DTL.Carrier_Code_Usr_6);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Carrier 7
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Carrier Code Usr 7
AND PGM.*Cursor_field = DTL.Carrier_Code_Usr_7;

// Call program SEL Active Carrier     SR.
CALL PROGRAM(SEL Active Carrier     SR) ('OMY6SRR');
PARAMETER(DTL.Carrier_Code_Usr_7);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Carrier 8
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Carrier Code Usr 8
AND PGM.*Cursor_field = DTL.Carrier_Code_Usr_8;

// Call program SEL Active Carrier     SR.
CALL PROGRAM(SEL Active Carrier     SR) ('OMY6SRR');
PARAMETER(DTL.Carrier_Code_Usr_8);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Carrier 9
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Carrier Code Usr 9
AND PGM.*Cursor_field = DTL.Carrier_Code_Usr_9;

// Call program SEL Active Carrier     SR.
CALL PROGRAM(SEL Active Carrier     SR) ('OMY6SRR');
PARAMETER(DTL.Carrier_Code_Usr_9);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Carrier 10
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Carrier Code Usr 10
AND PGM.*Cursor_field = DTL.Carrier_Code_Usr_10;

// Call program SEL Active Carrier     SR.
CALL PROGRAM(SEL Active Carrier     SR) ('OMY6SRR');
PARAMETER(DTL.Carrier_Code_Usr_10);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDDO;

//?Process F4 on Shipping Lines                P000737
DO;

//?Process F4 on Shipper 1
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Carrier Code Usr 11
AND PGM.*Cursor_field = DTL.Carrier_Code_Usr_11;

// Call program SEL Active Carrier     SR.
CALL PROGRAM(SEL Active Carrier     SR) ('OMY6SRR');
PARAMETER(DTL.Carrier_Code_Usr_11);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Shipper 2
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Carrier Code Usr 12
AND PGM.*Cursor_field = DTL.Carrier_Code_Usr_12;

// Call program SEL Active Carrier     SR.
CALL PROGRAM(SEL Active Carrier     SR) ('OMY6SRR');
PARAMETER(DTL.Carrier_Code_Usr_12);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Shipper 3
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Carrier Code Usr 13
AND PGM.*Cursor_field = DTL.Carrier_Code_Usr_13;

// Call program SEL Active Carrier     SR.
CALL PROGRAM(SEL Active Carrier     SR) ('OMY6SRR');
PARAMETER(DTL.Carrier_Code_Usr_13);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Shipper 4
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Carrier Code Usr 14
AND PGM.*Cursor_field = DTL.Carrier_Code_Usr_14;

// Call program SEL Active Carrier     SR.
CALL PROGRAM(SEL Active Carrier     SR) ('OMY6SRR');
PARAMETER(DTL.Carrier_Code_Usr_14);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Shipper 5
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Carrier Code Usr 15
AND PGM.*Cursor_field = DTL.Carrier_Code_Usr_15;

// Call program SEL Active Carrier     SR.
CALL PROGRAM(SEL Active Carrier     SR) ('OMY6SRR');
PARAMETER(DTL.Carrier_Code_Usr_15);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDDO;

//?07/17/19 DN R15161-Replaced Booking Number with OHE Booking Number.
//?Process F4 on Booking Number                  07/17/19 DN R15161
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.OHE Booking Number
AND PGM.*Cursor_field = DTL.OHE_Booking_Number;

// Call program SEL Booking Number     SR.
CALL PROGRAM(SEL Booking Number     SR) ('PBA9SRR');
PARAMETER(DTL.OHE_Booking_Number);
PARAMETER(LCL.Record_Selected_USR);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Select Email Format, display correct description  E002984
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Select Option
AND PGM.*Cursor_field = DTL.Select_Option;

//?** display selection option description
CASE;

// IF DTL.Select Option is Export Load Report
IF DTL.Select_Option = 'E';

// DTL.Condition Desc. 1  USR = CON.Export Load Report
DTL.Condition_Desc_1_USR = 'Export Load Report';

//?** display selection option description
// IF DTL.Select Option is Export Load Rpt w/Weights
IF DTL.Select_Option = 'W';

// DTL.Condition Desc. 1  USR = CON.Export Load Rpt w/Weights
DTL.Condition_Desc_1_USR = 'Export Load Rpt w/Weights';

//?** display selection option description
// IF DTL.Select Option is Booking Rpt for Exports
IF DTL.Select_Option = 'B';

// DTL.Condition Desc. 1  USR = CON.Booking Rpt for Exports
DTL.Condition_Desc_1_USR = 'Booking Rpt for Exports';

//?** display selection option description
// IF DTL.Select Option is Booking for Exp Coord
IF DTL.Select_Option = 'C';

// DTL.Condition Desc. 1  USR = CON.Booking for Exp Coord
DTL.Condition_Desc_1_USR = 'Booking for Exp Coord';

//?** display selection option description
// IF DTL.Select Option is Booking Rpt 4/Export-Less
IF DTL.Select_Option = 'L';

// DTL.Condition Desc. 1  USR = CON.Booking Rpt 4/Export-Less
DTL.Condition_Desc_1_USR = 'Booking Rpt 4/Export-Less';

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Customer Type Code            E002395
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Type Code
AND PGM.*Cursor_field = DTL.Type_Code;

// Call program SEL Type Codes         SR.
CALL PROGRAM(SEL Type Codes         SR) ('CABVSRR');
PARAMETER(DTL.Type_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on each of 9 Warehouses          E004105
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Warehouse Code
IF PGM.*Cursor_field = DTL.Warehouse_Code;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.Warehouse_Code);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> DTL.Warehouse 1 USR
IF PGM.*Cursor_field = DTL.Warehouse_1_USR;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.Warehouse_1_USR);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> DTL.Warehouse 2 USR
IF PGM.*Cursor_field = DTL.Warehouse_2_USR;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.Warehouse_2_USR);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> DTL.Warehouse 3 USR
IF PGM.*Cursor_field = DTL.Warehouse_3_USR;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.Warehouse_3_USR);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> DTL.Warehouse 4 USR
IF PGM.*Cursor_field = DTL.Warehouse_4_USR;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.Warehouse_4_USR);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> DTL.Warehouse 5 USR
IF PGM.*Cursor_field = DTL.Warehouse_5_USR;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.Warehouse_5_USR);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> DTL.Warehouse 6 USR
IF PGM.*Cursor_field = DTL.Warehouse_6_USR;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.Warehouse_6_USR);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> DTL.Warehouse 7 USR
IF PGM.*Cursor_field = DTL.Warehouse_7_USR;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.Warehouse_7_USR);

ENDIF;

//?01/17/20 DN S16050-Added 9th Warehouse.
CASE;

// IF PGM.*Cursor field <IS> DTL.Warehouse 8 USR
IF PGM.*Cursor_field = DTL.Warehouse_8_USR;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.Warehouse_8_USR);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?CALC: Screen function fields

//?** Get Ship-to customer name
//?** Get Warehouse Type name (Fresh or Frozen)  E002587
EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Condition Desc. 10 USR = Condition name of DTL.Email Selection usr
DTL.Condition_Desc_10_USR = RTVCND(DTL.Email_Selection_usr);

// DTL.Whse Type Description = Condition name of DTL.Warehouse Type
DTL.Whse_Type_Description = RTVCND(DTL.Warehouse_Type);

// DTL.Description 21a 1 Usr = Condition name of DTL.Select Report Options USR
DTL.Description_21a_1_Usr = RTVCND(DTL.Select_Report_Options_USR);

//?* Default whse type descr to *all if whse type = blanks   E002587
CASE;

// IF DTL.Warehouse Type is Equal blank
IF DTL.Warehouse_Type = *BLANK;

// DTL.Whse Type Description = CND.*All
DTL.Whse_Type_Description = *ALL;

ENDIF;

// DTL.Description 14A      USR = LCL.Description 14A      USR
DTL.Description_14A_USR = LCL.Description_14A_USR;

//?** display selection option description
CASE;

// IF DTL.Select Option is Export Load Report
IF DTL.Select_Option = 'E';

// DTL.Condition Desc. 1  USR = CON.Export Load Report
DTL.Condition_Desc_1_USR = 'Export Load Report';

//?** display selection option description
// IF DTL.Select Option is Export Load Rpt w/Weights
IF DTL.Select_Option = 'W';

// DTL.Condition Desc. 1  USR = CON.Export Load Rpt w/Weights
DTL.Condition_Desc_1_USR = 'Export Load Rpt w/Weights';

//?** display selection option description
// IF DTL.Select Option is Booking Rpt for Exports
IF DTL.Select_Option = 'B';

// DTL.Condition Desc. 1  USR = CON.Booking Rpt for Exports
DTL.Condition_Desc_1_USR = 'Booking Rpt for Exports';

//?** display selection option description
// IF DTL.Select Option is Booking for Exp Coord
IF DTL.Select_Option = 'C';

// DTL.Condition Desc. 1  USR = CON.Booking for Exp Coord
DTL.Condition_Desc_1_USR = 'Booking for Exp Coord';

//?** display selection option description
// IF DTL.Select Option is Booking Rpt 4/Export-Less
IF DTL.Select_Option = 'L';

// DTL.Condition Desc. 1  USR = CON.Booking Rpt 4/Export-Less
DTL.Condition_Desc_1_USR = 'Booking Rpt 4/Export-Less';

ENDIF;

EXECUTE FUNCTION(Broker Name DRV) TYPE(DRVFLD)                                  AC1675815;
PARAMETER(DTL.Broker_Name_DRV);
PARAMETER(DTL.Broker_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Broker Info       RT) TYPE(RTVOBJ) FILE(POC5REP)           AC1675816;
 PARAMETER(*MISSING);
 PARAMETER(PAR.Broker_Name_DRV);
 PARAMETER(NLL.Broker_Address_Line_1);
 PARAMETER(NLL.Broker_Address_Line_2);
 PARAMETER(NLL.Broker_City);
 PARAMETER(NLL.Broker_State);
 PARAMETER(NLL.Broker_Zip);
 PARAMETER(NLL.Broker_Office_Manager);
 PARAMETER(NLL.Broker_Telephone_Number);
 PARAMETER(NLL.Broker_Fax_Number);
 PARAMETER(NLL.Broker_Email_Address);
 PARAMETER(NLL.Broker_G_L_Vendor_Number);
 PARAMETER(NLL.Salesperson_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Validate relations

// DTL.Order Company Name Usr = CON.*BLANK
DTL.Order_Company_Name_Usr = *BLANK;

// DTL.Company Name = CON.*BLANK
DTL.Company_Name = *BLANK;

// DTL.Name = CON.*BLANK
DTL.Name = *BLANK;

//?Validate load company if entered
CASE;

// IF DTL.Company Number CDE is not equal to zero
IF DTL.Company_Number_CDE <> *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is Company not found
IF PGM.*Return_code = 'USR0003';

// DTL.Company Number = DTL.Company Number CDE
DTL.Company_Number = DTL.Company_Number_CDE;

// Send error message - 'Company Number not found'
ERROR(USR0163);

// IF *OTHERWISE
IF *OTHERWISE;

//?02/13/07 PKD Removed hardcoding of company number
EXECUTE FUNCTION(Rtv Plant Co Status   RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1761084;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(LCL.Plant_Company_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Plant Company Sts is Plant Company
IF LCL.Plant_Company_Sts = 'P';

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Company Number = DTL.Company Number CDE
DTL.Company_Number = DTL.Company_Number_CDE;

// Send error message - 'Company Number not found'
ERROR(USR0163);

ENDIF;

ENDIF;

ENDIF;

//?Validate Dates
CASE;

// IF DTL.USR From Date GT DTL.USR To Date
IF DTL.USR_From_Date > DTL.USR_To_Date;

// Send error message - 'From date exceeds to date.  Please re-enter.'
ERROR(USR0319);
MSGPARM(DTL.USR_From_Date);

ENDIF;

//?Validate Load Id
CASE;

// IF DTL.CD7 Int Numeric Key is not equal zero
IF DTL.CD7_Int_Numeric_Key <> *ZERO;

EXECUTE FUNCTION(RTV Load Status        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1297640;
PARAMETER(DTL.CD7_Int_Numeric_Key);
PARAMETER(WRK.Load_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

}


//?Load not found
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// WRK.Load ID Alpha = DTL.CD7 Int Numeric Key
WRK.Load_ID_Alpha = DTL.CD7_Int_Numeric_Key;

// Send error message - 'Load Id is not found'
ERROR(USR2783);
MSGPARM(DTL.CD7_Int_Numeric_Key);

ENDIF;

ENDIF;

//?Validate Carrier Codes              P000737
DO;

//?Validate Carrier Code 1
CASE;

// IF DTL.Carrier Code Usr 1 is Entered
IF DTL.Carrier_Code_Usr_1 <> *BLANK;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Carrier_Code_Usr_1);
PARAMETER(NLL.Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Carrier not found
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Carrier doesn't exist'
ERROR(USR1252);
MSGPARM(DTL.Carrier_Code_Usr_1);

ENDIF;

ENDIF;

//?Validate Carrier Code 2
CASE;

// IF DTL.Carrier Code Usr 2 is Entered
IF DTL.Carrier_Code_Usr_2 <> *BLANK;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Carrier_Code_Usr_2);
PARAMETER(NLL.Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Carrier not found
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Carrier doesn't exist'
ERROR(USR1252);
MSGPARM(DTL.Carrier_Code_Usr_2);

ENDIF;

ENDIF;

//?Validate Carrier Code 3
CASE;

// IF DTL.Carrier Code Usr 3 is Entered
IF DTL.Carrier_Code_Usr_3 <> *BLANK;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Carrier_Code_Usr_3);
PARAMETER(NLL.Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Carrier not found
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Carrier doesn't exist'
ERROR(USR1252);
MSGPARM(DTL.Carrier_Code_Usr_3);

ENDIF;

ENDIF;

//?Validate Carrier Code 4
CASE;

// IF DTL.Carrier Code Usr 4 is Entered
IF DTL.Carrier_Code_Usr_4 <> *BLANK;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Carrier_Code_Usr_4);
PARAMETER(NLL.Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Carrier not found
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Carrier doesn't exist'
ERROR(USR1252);
MSGPARM(DTL.Carrier_Code_Usr_4);

ENDIF;

ENDIF;

//?Validate Carrier Code 5
CASE;

// IF DTL.Carrier Code Usr 5 is Entered
IF DTL.Carrier_Code_Usr_5 <> *BLANK;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Carrier_Code_Usr_5);
PARAMETER(NLL.Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Carrier not found
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Carrier doesn't exist'
ERROR(USR1252);
MSGPARM(DTL.Carrier_Code_Usr_5);

ENDIF;

ENDIF;

//?Validate Carrier Code 6
CASE;

// IF DTL.Carrier Code Usr 6 is Entered
IF DTL.Carrier_Code_Usr_6 <> *BLANK;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Carrier_Code_Usr_6);
PARAMETER(NLL.Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Carrier not found
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Carrier doesn't exist'
ERROR(USR1252);
MSGPARM(DTL.Carrier_Code_Usr_6);

ENDIF;

ENDIF;

//?Validate Carrier Code 7
CASE;

// IF DTL.Carrier Code Usr 7 is Entered
IF DTL.Carrier_Code_Usr_7 <> *BLANK;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Carrier_Code_Usr_7);
PARAMETER(NLL.Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Carrier not found
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Carrier doesn't exist'
ERROR(USR1252);
MSGPARM(DTL.Carrier_Code_Usr_7);

ENDIF;

ENDIF;

//?Validate Carrier Code 8
CASE;

// IF DTL.Carrier Code Usr 8 is Entered
IF DTL.Carrier_Code_Usr_8 <> *BLANK;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Carrier_Code_Usr_8);
PARAMETER(NLL.Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Carrier not found
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Carrier doesn't exist'
ERROR(USR1252);
MSGPARM(DTL.Carrier_Code_Usr_8);

ENDIF;

ENDIF;

//?Validate Carrier Code 9
CASE;

// IF DTL.Carrier Code Usr 9 is Entered
IF DTL.Carrier_Code_Usr_9 <> *BLANK;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Carrier_Code_Usr_9);
PARAMETER(NLL.Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Carrier not found
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Carrier doesn't exist'
ERROR(USR1252);
MSGPARM(DTL.Carrier_Code_Usr_9);

ENDIF;

ENDIF;

//?Validate Carrier Code 10
CASE;

// IF DTL.Carrier Code Usr 10 is Entered
IF DTL.Carrier_Code_Usr_10 <> *BLANK;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Carrier_Code_Usr_10);
PARAMETER(NLL.Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Carrier not found
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Carrier doesn't exist'
ERROR(USR1252);
MSGPARM(DTL.Carrier_Code_Usr_10);

ENDIF;

ENDIF;

ENDDO;

//?Validate Shipping Lines             P000737
DO;

//?Validate Shipping Line 1
CASE;

// IF DTL.Carrier Code Usr 11 is Entered
IF DTL.Carrier_Code_Usr_11 <> *BLANK;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Carrier_Code_Usr_11);
PARAMETER(NLL.Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Carrier not found
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Carrier doesn't exist'
ERROR(USR1252);
MSGPARM(DTL.Carrier_Code_Usr_11);

ENDIF;

ENDIF;

//?Validate Shipping Line 2
CASE;

// IF DTL.Carrier Code Usr 12 is Entered
IF DTL.Carrier_Code_Usr_12 <> *BLANK;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Carrier_Code_Usr_12);
PARAMETER(NLL.Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Carrier not found
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Carrier doesn't exist'
ERROR(USR1252);
MSGPARM(DTL.Carrier_Code_Usr_12);

ENDIF;

ENDIF;

//?Validate Shipping Line 3
CASE;

// IF DTL.Carrier Code Usr 13 is Entered
IF DTL.Carrier_Code_Usr_13 <> *BLANK;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Carrier_Code_Usr_13);
PARAMETER(NLL.Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Carrier not found
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Carrier doesn't exist'
ERROR(USR1252);
MSGPARM(DTL.Carrier_Code_Usr_13);

ENDIF;

ENDIF;

//?Validate Shipping Line 4
CASE;

// IF DTL.Carrier Code Usr 14 is Entered
IF DTL.Carrier_Code_Usr_14 <> *BLANK;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Carrier_Code_Usr_14);
PARAMETER(NLL.Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Carrier not found
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Carrier doesn't exist'
ERROR(USR1252);
MSGPARM(DTL.Carrier_Code_Usr_14);

ENDIF;

ENDIF;

//?Validate Shipping Line 5
CASE;

// IF DTL.Carrier Code Usr 15 is Entered
IF DTL.Carrier_Code_Usr_15 <> *BLANK;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Carrier_Code_Usr_15);
PARAMETER(NLL.Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Carrier not found
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Carrier doesn't exist'
ERROR(USR1252);
MSGPARM(DTL.Carrier_Code_Usr_15);

ENDIF;

ENDIF;

ENDDO;

//?Validate Customer                                     E002587
CASE;

// IF DTL.Customer Number       NBR is not equal 0
IF DTL.Customer_Number_NBR <> *ZERO;

CASE;

// IF DTL.Type of Customer USR is Bill To
IF DTL.Type_of_Customer_USR = 'B';

EXECUTE FUNCTION(RTV Bill To Cust Name  RT) TYPE(RTVOBJ) FILE(CABBREP)          AC2066378;
PARAMETER(DTL.Customer_Name);
PARAMETER(DTL.Customer_Number_NBR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF PAR.A/R Customer Number EQ DB1.A/R Customer Number
 IF PAR.AR_Customer_Number = DB1.AR_Customer_Number;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


// IF DTL.Type of Customer USR is ShipTo
IF DTL.Type_of_Customer_USR = 'S';

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(DTL.Customer_Number_NBR);
PARAMETER(DTL.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Customer is not found.'
ERROR(USR0525);
MSGPARM(DTL.Customer_Number_NBR);

ENDIF;

ENDIF;

//?Validate customer if broker code is entered           E001704
CASE;

// IF DTL.Broker Code is Entered
IF DTL.Broker_Code <> *BLANK;

EXECUTE FUNCTION(VAL Broker Exists     RT) TYPE(RTVOBJ) FILE(POC5REP)           AC2032975;
PARAMETER(DTL.Broker_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Broker News not found.'
ERROR(USR3288);
MSGPARM(DTL.Broker_Code);

// IF *OTHERWISE
IF *OTHERWISE;

//?If ship to cust is entered, it must belong to the broker
CASE;

// IF DTL.Customer Number       NBR is not equal 0
IF DTL.Customer_Number_NBR <> *ZERO;

CASE;

// IF DTL.Type of Customer USR is ShipTo
IF DTL.Type_of_Customer_USR = 'S';

EXECUTE FUNCTION(VAL Broker for ShipTo  RT) TYPE(RTVOBJ) FILE(OMHOREP)          AC2031619;
PARAMETER(DTL.Broker_Code);
PARAMETER(DTL.Customer_Number_NBR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// WRK.Ship to Customer      USR = DTL.Customer Number       NBR
WRK.Ship_to_Customer_USR = DTL.Customer_Number_NBR;

// Send error message - 'This Customer is not found for Broker Code'
ERROR(USR4469);
MSGPARM(WRK.Ship_to_Customer_USR);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?07/17/19 DN R15161-Replaced Booking Number with OHE Booking Number.
//?Validate Booking Number                       07/17/19 DN R15161
CASE;

// IF DTL.OHE Booking Number is Entered
IF DTL.OHE_Booking_Number <> *BLANK;

EXECUTE FUNCTION(RTV Booking Number     RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2032212;
PARAMETER(DTL.OHE_Booking_Number);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Booking Number &1 not found'
ERROR(USR4471);
MSGPARM(DTL.OHE_Booking_Number);

ENDIF;

ENDIF;

//?Validate Type Code                  E002395
CASE;

// IF DTL.Type Code is Entered
IF DTL.Type_Code <> *BLANK;

// Call program Val Type Codes         XF.
CALL PROGRAM(Val Type Codes         XF) ('PBAKXFR');
PARAMETER(DTL.Type_Code);
PARAMETER(LCL.Return_Code_Usr);

CASE;

// IF LCL.Return Code Usr is *Blank
IF LCL.Return_Code_Usr = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Type Code &1 Not Found'
ERROR(USR3388);
MSGPARM(DTL.Type_Code);

ENDIF;

ENDIF;

//?Validate Country Codes (10 total)   P000737
DO;

//?VAL: Country Code 1
CASE;

// IF DTL.Country Code 1 usr is Entered
IF DTL.Country_Code_1_usr <> *BLANK;

EXECUTE FUNCTION(RTV Chk if valid Cntry RT) TYPE(RTVOBJ) FILE(OME5REP)          AC1198145;
PARAMETER(DTL.Country_Code_1_usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Country Master not found.'
ERROR(USR1158);
MSGPARM(DTL.Country_Code_1_usr);

ENDIF;

ENDIF;

//?VAL: Country Code 2
CASE;

// IF DTL.Country Code 2 usr is Entered
IF DTL.Country_Code_2_usr <> *BLANK;

EXECUTE FUNCTION(RTV Chk if valid Cntry RT) TYPE(RTVOBJ) FILE(OME5REP)          AC1198145;
PARAMETER(DTL.Country_Code_2_usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Country Master not found.'
ERROR(USR1158);
MSGPARM(DTL.Country_Code_2_usr);

ENDIF;

ENDIF;

//?VAL: Country Code 3
CASE;

// IF DTL.Country Code 3 usr is Entered
IF DTL.Country_Code_3_usr <> *BLANK;

EXECUTE FUNCTION(RTV Chk if valid Cntry RT) TYPE(RTVOBJ) FILE(OME5REP)          AC1198145;
PARAMETER(DTL.Country_Code_3_usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Country Master not found.'
ERROR(USR1158);
MSGPARM(DTL.Country_Code_3_usr);

ENDIF;

ENDIF;

//?VAL: Country Code 4
CASE;

// IF DTL.Country Code 4 usr is Entered
IF DTL.Country_Code_4_usr <> *BLANK;

EXECUTE FUNCTION(RTV Chk if valid Cntry RT) TYPE(RTVOBJ) FILE(OME5REP)          AC1198145;
PARAMETER(DTL.Country_Code_4_usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Country Master not found.'
ERROR(USR1158);
MSGPARM(DTL.Country_Code_4_usr);

ENDIF;

ENDIF;

//?VAL: Country Code 5
CASE;

// IF DTL.Country Code 5 usr is Entered
IF DTL.Country_Code_5_usr <> *BLANK;

EXECUTE FUNCTION(RTV Chk if valid Cntry RT) TYPE(RTVOBJ) FILE(OME5REP)          AC1198145;
PARAMETER(DTL.Country_Code_5_usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Country Master not found.'
ERROR(USR1158);
MSGPARM(DTL.Country_Code_5_usr);

ENDIF;

ENDIF;

//?VAL: Country Code 6
CASE;

// IF DTL.Country Code 6 usr is Entered
IF DTL.Country_Code_6_usr <> *BLANK;

EXECUTE FUNCTION(RTV Chk if valid Cntry RT) TYPE(RTVOBJ) FILE(OME5REP)          AC1198145;
PARAMETER(DTL.Country_Code_6_usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Country Master not found.'
ERROR(USR1158);
MSGPARM(DTL.Country_Code_6_usr);

ENDIF;

ENDIF;

//?VAL: Country Code 7
CASE;

// IF DTL.Country Code 7 usr is entered
IF DTL.Country_Code_7_usr <> *BLANK;

EXECUTE FUNCTION(RTV Chk if valid Cntry RT) TYPE(RTVOBJ) FILE(OME5REP)          AC1198145;
PARAMETER(DTL.Country_Code_7_usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Country Master not found.'
ERROR(USR1158);
MSGPARM(DTL.Country_Code_7_usr);

ENDIF;

ENDIF;

//?VAL: Country Code 8
CASE;

// IF DTL.Country Code 8 usr is Entered
IF DTL.Country_Code_8_usr <> *BLANK;

EXECUTE FUNCTION(RTV Chk if valid Cntry RT) TYPE(RTVOBJ) FILE(OME5REP)          AC1198145;
PARAMETER(DTL.Country_Code_8_usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Country Master not found.'
ERROR(USR1158);
MSGPARM(DTL.Country_Code_8_usr);

ENDIF;

ENDIF;

//?VAL: Country Code 9
CASE;

// IF DTL.Country Code 9 usr is Entered
IF DTL.Country_Code_9_usr <> *BLANK;

EXECUTE FUNCTION(RTV Chk if valid Cntry RT) TYPE(RTVOBJ) FILE(OME5REP)          AC1198145;
PARAMETER(DTL.Country_Code_9_usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Country Master not found.'
ERROR(USR1158);
MSGPARM(DTL.Country_Code_9_usr);

ENDIF;

ENDIF;

//?VAL: Country Code 10
CASE;

// IF DTL.Country Code 10 usr is Entered
IF DTL.Country_Code_10_usr <> *BLANK;

EXECUTE FUNCTION(RTV Chk if valid Cntry RT) TYPE(RTVOBJ) FILE(OME5REP)          AC1198145;
PARAMETER(DTL.Country_Code_10_usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Country Master not found.'
ERROR(USR1158);
MSGPARM(DTL.Country_Code_10_usr);

ENDIF;

ENDIF;

ENDDO;

//?VAL: Warehouse or Warehouse and Warehouse Type        E002587
CASE;

// IF DTL.Warehouse Code is Warehouse Code not Blank
IF DTL.Warehouse_Code <> *BLANK;

CASE;

// IF DTL.Warehouse Type NE WRK.Blank for 3          USR
IF DTL.Warehouse_Type <> WRK.Blank_for_3_USR;

EXECUTE FUNCTION(Val Whse for Type      RT) TYPE(RTVOBJ) FILE(CAADREP)          AC2069800;
PARAMETER(DTL.Warehouse_Type);
PARAMETER(DTL.Warehouse_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Whse for Type not found'
ERROR(USR4626);
MSGPARM(DTL.Warehouse_Code);
MSGPARM(DTL.Warehouse_Type);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Warehouse Exists   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1323885;
PARAMETER(DTL.Warehouse_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Warehouse Codes not found.'
ERROR(USR0007);
MSGPARM(DTL.Warehouse_Code);

ENDIF;

ENDIF;

ENDIF;

//?VAL: Warehouse and Warehouse Type 1                   E004105
CASE;

// IF DTL.Warehouse 1 USR is Entered
IF DTL.Warehouse_1_USR <> *BLANK;

CASE;

// IF DTL.Warehouse Type NE WRK.Blank for 3          USR
IF DTL.Warehouse_Type <> WRK.Blank_for_3_USR;

EXECUTE FUNCTION(Val Whse for Type      RT) TYPE(RTVOBJ) FILE(CAADREP)          AC2069800;
PARAMETER(DTL.Warehouse_Type);
PARAMETER(DTL.Warehouse_1_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Whse for Type not found'
ERROR(USR4626);
MSGPARM(DTL.Warehouse_1_USR);
MSGPARM(DTL.Warehouse_Type);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Warehouse Exists   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1323885;
PARAMETER(DTL.Warehouse_1_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Warehouse Codes not found.'
ERROR(USR0007);
MSGPARM(DTL.Warehouse_1_USR);

ENDIF;

ENDIF;

ENDIF;

//?VAL: Warehouse and Warehouse Type 2                   E004105
CASE;

// IF DTL.Warehouse 2 USR is Entered
IF DTL.Warehouse_2_USR <> *BLANK;

CASE;

// IF DTL.Warehouse Type NE WRK.Blank for 3          USR
IF DTL.Warehouse_Type <> WRK.Blank_for_3_USR;

EXECUTE FUNCTION(Val Whse for Type      RT) TYPE(RTVOBJ) FILE(CAADREP)          AC2069800;
PARAMETER(DTL.Warehouse_Type);
PARAMETER(DTL.Warehouse_2_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Whse for Type not found'
ERROR(USR4626);
MSGPARM(DTL.Warehouse_2_USR);
MSGPARM(DTL.Warehouse_Type);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Warehouse Exists   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1323885;
PARAMETER(DTL.Warehouse_2_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Warehouse Codes not found.'
ERROR(USR0007);
MSGPARM(DTL.Warehouse_2_USR);

ENDIF;

ENDIF;

ENDIF;

//?VAL: Warehouse and Warehouse Type 3                   E004105
CASE;

// IF DTL.Warehouse 3 USR is Entered
IF DTL.Warehouse_3_USR <> *BLANK;

CASE;

// IF DTL.Warehouse Type NE WRK.Blank for 3          USR
IF DTL.Warehouse_Type <> WRK.Blank_for_3_USR;

EXECUTE FUNCTION(Val Whse for Type      RT) TYPE(RTVOBJ) FILE(CAADREP)          AC2069800;
PARAMETER(DTL.Warehouse_Type);
PARAMETER(DTL.Warehouse_3_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Whse for Type not found'
ERROR(USR4626);
MSGPARM(DTL.Warehouse_3_USR);
MSGPARM(DTL.Warehouse_Type);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Warehouse Exists   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1323885;
PARAMETER(DTL.Warehouse_3_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Warehouse Codes not found.'
ERROR(USR0007);
MSGPARM(DTL.Warehouse_3_USR);

ENDIF;

ENDIF;

ENDIF;

//?VAL: Warehouse and Warehouse Type 4                   E004105
CASE;

// IF DTL.Warehouse 4 USR is Entered
IF DTL.Warehouse_4_USR <> *BLANK;

CASE;

// IF DTL.Warehouse Type NE WRK.Blank for 3          USR
IF DTL.Warehouse_Type <> WRK.Blank_for_3_USR;

EXECUTE FUNCTION(Val Whse for Type      RT) TYPE(RTVOBJ) FILE(CAADREP)          AC2069800;
PARAMETER(DTL.Warehouse_Type);
PARAMETER(DTL.Warehouse_4_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Whse for Type not found'
ERROR(USR4626);
MSGPARM(DTL.Warehouse_4_USR);
MSGPARM(DTL.Warehouse_Type);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Warehouse Exists   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1323885;
PARAMETER(DTL.Warehouse_4_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Warehouse Codes not found.'
ERROR(USR0007);
MSGPARM(DTL.Warehouse_4_USR);

ENDIF;

ENDIF;

ENDIF;

//?VAL: Warehouse and Warehouse Type 5                   E004105
CASE;

// IF DTL.Warehouse 5 USR is Entered
IF DTL.Warehouse_5_USR <> *BLANK;

CASE;

// IF DTL.Warehouse Type NE WRK.Blank for 3          USR
IF DTL.Warehouse_Type <> WRK.Blank_for_3_USR;

EXECUTE FUNCTION(Val Whse for Type      RT) TYPE(RTVOBJ) FILE(CAADREP)          AC2069800;
PARAMETER(DTL.Warehouse_Type);
PARAMETER(DTL.Warehouse_5_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Whse for Type not found'
ERROR(USR4626);
MSGPARM(DTL.Warehouse_5_USR);
MSGPARM(DTL.Warehouse_Type);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Warehouse Exists   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1323885;
PARAMETER(DTL.Warehouse_5_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Warehouse Codes not found.'
ERROR(USR0007);
MSGPARM(DTL.Warehouse_5_USR);

ENDIF;

ENDIF;

ENDIF;

//?VAL: Warehouse and Warehouse Type 6                   E004105
CASE;

// IF DTL.Warehouse 6 USR is Entered
IF DTL.Warehouse_6_USR <> *BLANK;

CASE;

// IF DTL.Warehouse Type NE WRK.Blank for 3          USR
IF DTL.Warehouse_Type <> WRK.Blank_for_3_USR;

EXECUTE FUNCTION(Val Whse for Type      RT) TYPE(RTVOBJ) FILE(CAADREP)          AC2069800;
PARAMETER(DTL.Warehouse_Type);
PARAMETER(DTL.Warehouse_6_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Whse for Type not found'
ERROR(USR4626);
MSGPARM(DTL.Warehouse_6_USR);
MSGPARM(DTL.Warehouse_Type);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Warehouse Exists   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1323885;
PARAMETER(DTL.Warehouse_6_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Warehouse Codes not found.'
ERROR(USR0007);
MSGPARM(DTL.Warehouse_6_USR);

ENDIF;

ENDIF;

ENDIF;

//?VAL: Warehouse and Warehouse Type 7                   E004105
CASE;

// IF DTL.Warehouse 7 USR is Entered
IF DTL.Warehouse_7_USR <> *BLANK;

CASE;

// IF DTL.Warehouse Type NE WRK.Blank for 3          USR
IF DTL.Warehouse_Type <> WRK.Blank_for_3_USR;

EXECUTE FUNCTION(Val Whse for Type      RT) TYPE(RTVOBJ) FILE(CAADREP)          AC2069800;
PARAMETER(DTL.Warehouse_Type);
PARAMETER(DTL.Warehouse_7_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Whse for Type not found'
ERROR(USR4626);
MSGPARM(DTL.Warehouse_7_USR);
MSGPARM(DTL.Warehouse_Type);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Warehouse Exists   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1323885;
PARAMETER(DTL.Warehouse_7_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Warehouse Codes not found.'
ERROR(USR0007);
MSGPARM(DTL.Warehouse_7_USR);

ENDIF;

ENDIF;

ENDIF;

//?VAL: Warehouse and Warehouse Type 8                   S16050
CASE;

// IF DTL.Warehouse 8 USR is Entered
IF DTL.Warehouse_8_USR <> *BLANK;

CASE;

// IF DTL.Warehouse Type NE WRK.Blank for 3          USR
IF DTL.Warehouse_Type <> WRK.Blank_for_3_USR;

EXECUTE FUNCTION(Val Whse for Type      RT) TYPE(RTVOBJ) FILE(CAADREP)          AC2069800;
PARAMETER(DTL.Warehouse_Type);
PARAMETER(DTL.Warehouse_8_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Whse for Type not found'
ERROR(USR4626);
MSGPARM(DTL.Warehouse_8_USR);
MSGPARM(DTL.Warehouse_Type);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Warehouse Exists   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1323885;
PARAMETER(DTL.Warehouse_8_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Warehouse Codes not found.'
ERROR(USR0007);
MSGPARM(DTL.Warehouse_8_USR);

ENDIF;

ENDIF;

ENDIF;

//?Val: Email selector is entered if email address is entered
CASE;

// IF DTL.Email Address is Entered
IF DTL.Email_Address <> *BLANK;

// AND DTL.Email Selection usr is Not Selected
AND DTL.Email_Selection_usr = *BLANK;

// Send error message - 'Value Required'
ERROR(USR1852);
MSGPARM(DTL.Email_Selection_usr);

ENDIF;

//?Val: Email address entered if email format is selected
CASE;

// IF DTL.Email Selection usr is E,Y,S only
IF DTL.Email_Selection_usr = 'E'/'S'/'Y';

//?email address cannot be blanks
CASE;

// IF DTL.Email Address is Blank
IF DTL.Email_Address = *BLANK;

// Send error message - 'Email address cannot be left blank. Enter a valid email address.'
ERROR(USR3670);
MSGPARM(DTL.Email_Address);

ENDIF;

//?* Don't test first time around     E001788
CASE;

// IF LCL.First Time Flag is NO
IF LCL.First_Time_Flag = 'N';

//?email address cannot be blanks
CASE;

// IF DTL.Email Address is Blank
IF DTL.Email_Address = *BLANK;

// Send error message - 'Email address cannot be left blank. Enter a valid email address.'
ERROR(USR3670);
MSGPARM(DTL.Email_Address);

ENDIF;

ENDIF;

ENDIF;

//?Val: If Booking download selected then format must be Spreadsheet
CASE;

// IF DTL.Select Option is Booking Rpt for Exports
IF DTL.Select_Option = 'B';

//?E, Y, or blanks invalid. S only allowed for Booking Download.
CASE;

// IF DTL.Email Selection usr is Spreadsheet Format
IF DTL.Email_Selection_usr = 'S';

//?E, Y, or blanks invalid. S only allowed for Booking Download.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option for Booking Download can ONLY be "S" for Spreadsheet'
ERROR(USR4502);
MSGPARM(DTL.Email_Selection_usr);

ENDIF;

ENDIF;

//?Val: If Exp Coord booking download then check Type/email format E002984
CASE;

// IF DTL.Select Option is Booking for Exp Coord
IF DTL.Select_Option = 'C';

//?Type Code is required for Export Coordinator Booking Download
CASE;

// IF DTL.Type Code is EQ Blank
IF DTL.Type_Code = *BLANK;

// Send error message - 'Value Required'
ERROR(USR1852);
MSGPARM(DTL.Type_Code);

ENDIF;

//?Email Format must be 'S' for Export Coordinator Booking Download
CASE;

// IF DTL.Email Selection usr is Spreadsheet Format
IF DTL.Email_Selection_usr = 'S';

//?Email Format must be 'S' for Export Coordinator Booking Download
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Email format must be 'S' for Spreadsheet when Booking for Exp Coord is sele
ERROR(USR4685);
MSGPARM(DTL.Email_Selection_usr);

ENDIF;

ENDIF;

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

//?USER: User defined action

//?Submit job for Print
// PAR.PRT Printer Device = PAR.Default Printer
PAR.PRT_Printer_Device = PAR.Default_Printer;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Night Queue = CND.Not entered
PAR.PRT_Night_Queue = *BLANK;

// PAR.PRT Save Output Sts = CND.*NO
PAR.PRT_Save_Output_Sts = *NO;

// PAR.PRT Hold Output Sts = CND.*NO
PAR.PRT_Hold_Output_Sts = *NO;

//?** Hold print file if emailing the report
CASE;

// IF DTL.Email Address is Entered
IF DTL.Email_Address <> *BLANK;

//?** Default printer to QPRINT2 if email, fax, or download
// PAR.PRT Printer Device = CND.No print printer
PAR.PRT_Printer_Device = 'QPRINT2';

// PAR.PRT Hold Output Sts = CND.*YES
PAR.PRT_Hold_Output_Sts = *YES;

ENDIF;

//?** description
CASE;

// IF DTL.Select Option is Export Load Report
IF DTL.Select_Option = 'E';

// LCL.PRT Description = CON.Export Load Report
LCL.PRT_Description = 'Export Load Report';

//?** description
// IF DTL.Select Option is Export Load Rpt w/Weights
IF DTL.Select_Option = 'W';

// LCL.PRT Description = CON.Exp Ld Rept w/Amt & Wgts
LCL.PRT_Description = 'Exp Ld Rept w/Amt & Wgts';

//?** description
// IF DTL.Select Option is Booking Rpt for Exports
IF DTL.Select_Option = 'B';

// LCL.PRT Description = CON.Booking Rpt for Exports
LCL.PRT_Description = 'Booking Rpt for Exports';

//?** description
// IF DTL.Select Option is Booking Rpt 4/Export-Less
IF DTL.Select_Option = 'L';

// LCL.PRT Description = CON.Booking Rpt 4/Export-Less
LCL.PRT_Description = 'Booking Rpt 4/Export-Less';

ENDIF;

//?move Load Start Company & dates to 15.5
// PAR.Company Number Pass   USR = DTL.Company Number CDE
PAR.Company_Number_Pass_USR = DTL.Company_Number_CDE;

// PAR.From Date Pass        USR = DTL.USR From Date
PAR.From_Date_Pass_USR = DTL.USR_From_Date;

// PAR.Thru Date Pass        USR = DTL.USR To Date
PAR.Thru_Date_Pass_USR = DTL.USR_To_Date;

//?** break email address into 2-25 char fields  rc-2/11
// LCL.Email addr 1 = DTL.Email Address
LCL.Email_addr_1 = DTL.Email_Address;

// Execute function *Move-Right.
EXECUTE FUNCTION(*Move-Right) TYPE(EXCUSRSRC) ('PDUIUFR');
PARAMETER(LCL.Email_Addr_2);
PARAMETER(DTL.Email_Address);
{
 C                     MOVE #IPANA    #OO9NA
}


//?** Add: Warehouse Type and Type of Customer           E002587
//?07/17/19 DN R15161-Replaced Enterprise Code 2 parm w/ OHE Booking Number.
//?01/17/20 DN S16050-Passed in 9th Warehouse Code.
// Call program Prt Export Load Pass   UP.
CALL PROGRAM(Prt Export Load Pass   UP) ('PPICUPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('TRF');
PARAMETER(DTL.OHE_Booking_Number);
PARAMETER(LCL.PRT_Description);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.From_Date_Pass_USR);
PARAMETER(PAR.Thru_Date_Pass_USR);
PARAMETER(DTL.CD7_Int_Numeric_Key);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(DTL.Type_Code);
PARAMETER(DTL.Warehouse_Type);
PARAMETER(DTL.OHE_Load_Haul_Type);
PARAMETER(DTL.Type_of_Customer_USR);
PARAMETER(DTL.Customer_Number_NBR);
PARAMETER(DTL.Status_Y_or_N);
PARAMETER(DTL.Select_Option);
PARAMETER(DTL.Select_Report_Options_USR);
PARAMETER(DTL.Carrier_Code_Usr_1);
PARAMETER(DTL.Carrier_Code_Usr_2);
PARAMETER(DTL.Carrier_Code_Usr_3);
PARAMETER(DTL.Carrier_Code_Usr_4);
PARAMETER(DTL.Carrier_Code_Usr_5);
PARAMETER(DTL.Carrier_Code_Usr_6);
PARAMETER(DTL.Carrier_Code_Usr_7);
PARAMETER(DTL.Carrier_Code_Usr_8);
PARAMETER(DTL.Carrier_Code_Usr_9);
PARAMETER(DTL.Carrier_Code_Usr_10);
PARAMETER(DTL.Carrier_Code_Usr_11);
PARAMETER(DTL.Carrier_Code_Usr_12);
PARAMETER(DTL.Carrier_Code_Usr_13);
PARAMETER(DTL.Carrier_Code_Usr_14);
PARAMETER(DTL.Carrier_Code_Usr_15);
PARAMETER(DTL.Country_Code_1_usr);
PARAMETER(DTL.Country_Code_2_usr);
PARAMETER(DTL.Country_Code_3_usr);
PARAMETER(DTL.Country_Code_4_usr);
PARAMETER(DTL.Country_Code_5_usr);
PARAMETER(DTL.Country_Code_6_usr);
PARAMETER(DTL.Country_Code_7_usr);
PARAMETER(DTL.Country_Code_8_usr);
PARAMETER(DTL.Country_Code_9_usr);
PARAMETER(DTL.Country_Code_10_usr);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Warehouse_1_USR);
PARAMETER(DTL.Warehouse_2_USR);
PARAMETER(DTL.Warehouse_3_USR);
PARAMETER(DTL.Warehouse_4_USR);
PARAMETER(DTL.Warehouse_5_USR);
PARAMETER(DTL.Warehouse_6_USR);
PARAMETER(DTL.Warehouse_7_USR);
PARAMETER(DTL.Warehouse_8_USR);
PARAMETER(DTL.Broker_Code);
PARAMETER(DTL.Email_Selection_usr);
PARAMETER(LCL.Email_addr_1);
PARAMETER(LCL.Email_Addr_2);

//?report has been submitted message
CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'The report has been submitted.'
MESSAGE(USR2720 *INFO);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

