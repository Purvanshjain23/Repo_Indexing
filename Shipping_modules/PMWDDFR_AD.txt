// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMWDDFR
// ?Date: 14.08.2025 Time: 03:44:18
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PGM.*Scan limit = CND.9999999
PGM.*Scan_limit = 9999999;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.PRT Printer Device = CND.Not entered
PAR.PRT_Printer_Device = *BLANK;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.Display Prt Opt Pmt USR = CND.*YES
PAR.Display_Prt_Opt_Pmt_USR = *YES;

// PAR.USR Print Detail = CND.yes
PAR.USR_Print_Detail = 'Y';

// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

//?** Change Log and Comments
DO;

//?PIO 03/20/24 CHANGED THE FILE NAME FROM OMFJCPLI TO OMFJCPMS
//?** Add 8=Display TPM Whs Locations and F22=Print TPM Whs Locations
//?** 08/19/2008 LJB E00207
//?** Use Override Total Load Miles, if entered, and highlight
ENDDO;

//?USER: Initialize subfile control

CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

CASE;

// IF PAR.Allow Multi-Company is no
IF PAR.Allow_Multi_Company = 'N';

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

ENDIF;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

ENDIF;

// CTL.USR Carrier Code = CTL.Carrier Code
CTL.USR_Carrier_Code = CTL.Carrier_Code;

// WRK.Warehouse 1 USR = CTL.Warehouse 1 USR
WRK.Warehouse_1_USR = CTL.Warehouse_1_USR;

CASE;

// IF CTL.Load ID is GT Zero
IF CTL.Load_ID > *ZERO;

EXECUTE FUNCTION(RTV Sched ShipDte,Seq  RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1451989;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Scheduled_Ship_Date);
PARAMETER(CTL.Schedule_Sequence_Number);
PARAMETER(CTL.Requested_Delivery_Date);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.Numeric 4,0           USR = CTL.Schedule Sequence Number
CTL.Numeric_40_USR = CTL.Schedule_Sequence_Number;

ENDIF;

//?USER: Initialize subfile record from DBF record

//?If company selection is made, then select only that company
CASE;

// IF CTL.Company Number is not equal to zero
IF CTL.Company_Number <> *ZERO;

// AND DB1.Company Number NE CTL.Company Number
AND DB1.Company_Number <> CTL.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?RST: Scheduled Ship Date
CASE;

// IF CTL.Scheduled Ship Date is entered
IF CTL.Scheduled_Ship_Date <> *ZERO;

CASE;

// IF DB1.Scheduled Ship Date NE CTL.Scheduled Ship Date
IF DB1.Scheduled_Ship_Date <> CTL.Scheduled_Ship_Date;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?force quit so the entire file isnt read
CASE;

// IF DB1.Scheduled Ship Date LT CTL.Scheduled Ship Date
IF DB1.Scheduled_Ship_Date < CTL.Scheduled_Ship_Date;

QUIT;

ENDIF;

ENDIF;

ENDIF;

//?If carrier selection is made, then select only that carrier
CASE;

// IF CTL.Carrier Code is entered
IF CTL.Carrier_Code <> *BLANK;

CASE;

// IF CTL.Carrier Code is Select Blank Carriers
IF CTL.Carrier_Code = *;

CASE;

// IF DB1.Carrier Code is entered
IF DB1.Carrier_Code <> *BLANK;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.Carrier Code NE DB1.Carrier Code
IF CTL.Carrier_Code <> DB1.Carrier_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Get Last Stop on Order
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(RTV Last Stop Consign  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1377331;
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.Ship_To_Customer);
PARAMETER(WRK.Ship_To_Name);
PARAMETER(WRK.Ship_To_Address_Line_1);
PARAMETER(WRK.Ship_To_Address_Line_2);
PARAMETER(WRK.Ship_To_Address_Line_3);
PARAMETER(WRK.Ship_To_City);
PARAMETER(RCD.USR_State_Code);
PARAMETER(WRK.Ship_To_Zip_Postal_Code);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV for B.O.L. Print   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1377319;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name);
 PARAMETER(PAR.Ship_To_Address_Line_1);
 PARAMETER(PAR.Ship_To_Address_Line_2);
 PARAMETER(PAR.Ship_To_Address_Line_3);
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Ship_To_Zip_Postal_Code);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 QUIT;

}


// RCD.USR Load/Stop 10 Alpha = WRK.Ship To City
RCD.USR_Load_Stop_10_Alpha = WRK.Ship_To_City;

CASE;

// IF CTL.Ship To State Code is State code not Blanks
IF CTL.Ship_To_State_Code <> *BLANK;

// AND RCD.USR State Code NE CTL.Ship To State Code
AND RCD.USR_State_Code <> CTL.Ship_To_State_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Scan for Ctl.last stop city
CASE;

// IF CTL.USR Load/Stop 10 Alpha is Entered
IF CTL.USR_Load_Stop_10_Alpha <> *BLANK;

// Call program CLC Call Qclscan       UP.
CALL PROGRAM(CLC Call Qclscan       UP) ('QCLSCAN');
PARAMETER(WRK.Ship_To_City);
PARAMETER(20);
PARAMETER(1);
PARAMETER(CTL.USR_Load_Stop_10_Alpha);
PARAMETER(10);
PARAMETER(1);
PARAMETER(1);
PARAMETER(*BLANK);
PARAMETER(WRK.USR_Qclscan_Result);

CASE;

// IF WRK.USR Qclscan Result ? is Does contain
IF WRK.USR_Qclscan_Result > 0;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Fill trailer ID on screen
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

// RCD.Trailer ID USR = DB1.Trailer Id
RCD.Trailer_ID_USR = DB1.Trailer_Id;

ENDIF;

EXECUTE FUNCTION(RTV GrsWgt w/PltTr Ld RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1601442;
PARAMETER(RCD.Load_ID);
PARAMETER(*ZERO);
PARAMETER(PAR.USR_Weight_Accumulated);
PARAMETER(RCD.Load_Status);
{
 //?USER: Initialize routine

 // PAR.USR Weight Accumulated = CON.*ZERO
 PAR.USR_Weight_Accumulated = *ZERO;

 CASE;

 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 EXECUTE FUNCTION(RTV Pallet/Tare        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1585842;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Pallets_Loaded);
 PARAMETER(LCL.Avg_Pallet_Tare);
 PARAMETER(LCL.Tot_Pallet_Tare);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?***** Change log and comments
 DO;

 //?** 01/18/2010 PKD E000261 Pass the Average Pallet Tare
 ENDDO;

 //?USER: Process Data record

 //?01/18/10 PKD E000261 SEND in LCL.Avg Pallet Tare
 // Call program RTV Gross Wgt/Qty     XF.
 CALL PROGRAM(RTV Gross Wgt/Qty     XF) ('PQPQXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.USR_Weight_Accumulated);
 PARAMETER(LCL.Order_Quantity);
 PARAMETER(LCL.Avg_Pallet_Tare);

 //?USER: Exit processing

 CASE;

 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 EXECUTE FUNCTION(RTV Pallet/Tare        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1585842;
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.Pallets_Loaded);
 PARAMETER(LCL.Avg_Pallet_Tare);
 PARAMETER(LCL.Tot_Pallet_Tare);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.USR Weight Accumulated = PAR.USR Weight Accumulated + LCL.Tot Pallet Tare
 PAR.USR_Weight_Accumulated = PAR.USR_Weight_Accumulated + LCL.Tot_Pallet_Tare;

 ENDIF;

}


// RCD.Weight Adjust 6.0     USR = PAR.USR Weight Accumulated
RCD.Weight_Adjust_6_0_USR = PAR.USR_Weight_Accumulated;

//?Highlight load number if traffic comments exist
EXECUTE FUNCTION(RTV Verify Trffc Cmnts RT) TYPE(RTVOBJ) FILE(PDKECPP)          AC1424786;
PARAMETER(RCD.Load_ID);
{
 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 QUIT;

}


//?Set Highlight Flag
CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// RCD.Include Todays Trans = CND.yes
RCD.Include_Todays_Trans = 'Y';

//?Set Highlight Flag
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Include Todays Trans = CND.no
RCD.Include_Todays_Trans = 'N';

ENDIF;

// WRK.USR Time 4.0 = DB1.Deadline Departure Time / CON.100 *
WRK.USR_Time_4_0 = DB1.Deadline_Departure_Time / 100;

//?Set Highlight Flag - Sched Ship Date, check Deadline Departure
CASE;

// IF DB1.Actual Departure Date GT DB1.Deadline Departure Date
IF DB1.Actual_Departure_Date > DB1.Deadline_Departure_Date;

// OR DB1.Actual Departure Date EQ DB1.Deadline Departure Date
OR ( DB1.Actual_Departure_Date = DB1.Deadline_Departure_Date;

// AND DB1.Departure Time GT WRK.USR Time 4.0
AND DB1.Departure_Time > WRK.USR_Time_4_0 );

// WRK.USR Status (Y/N) = CND.yes
WRK.USR_Status_Y_N = 'Y';

//?Set Highlight Flag - Sched Ship Date, check Deadline Departure
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR Status (Y/N) = CND.no
WRK.USR_Status_Y_N = 'N';

ENDIF;

EXECUTE FUNCTION(RTV Any Ord/Blk  on Ld RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1448300;
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(RCD.Block_Order_Flag);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 // PAR.USR Check Y/N Status = CND.blank
 PAR.USR_Check_Y_N_Status = *BLANK;

 //?OMS203:  need to know if there are any Block orders on load
 // PAR.Block Order Flag = CND.Firm Order
 PAR.Block_Order_Flag = 'F';

 //?USER: Process Data record

 // PAR.USR Check Y/N Status = CND.yes
 PAR.USR_Check_Y_N_Status = 'Y';

 CASE;

 // IF DB1.Block Order Flag is Block Order
 IF DB1.Block_Order_Flag = 'B';

 // PAR.Block Order Flag = DB1.Block Order Flag
 PAR.Block_Order_Flag = DB1.Block_Order_Flag;

 QUIT;

 ENDIF;

}


//?** Set Highlight Flag - Total Miles, if Override miles used    E00207
CASE;

// IF DB1.Override Total Load Miles is Entered
IF DB1.Override_Total_Load_Miles <> *ZERO;

// RCD.Total Miles 4,0       USR = DB1.Override Total Load Miles
RCD.Total_Miles_40_USR = DB1.Override_Total_Load_Miles;

// RCD.Change Flag USR = CND.Yes
RCD.Change_Flag_USR = 'Y';

//?** Set Highlight Flag - Total Miles, if Override miles used    E00207
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Total Miles 4,0       USR = DB1.Total Load Miles
RCD.Total_Miles_40_USR = DB1.Total_Load_Miles;

// RCD.Change Flag USR = CND.No
RCD.Change_Flag_USR = 'N';

ENDIF;

// RCD.Numeric 4,0           USR = RCD.Schedule Sequence Number
RCD.Numeric_40_USR = RCD.Schedule_Sequence_Number;

// PAR.USR Flag 1 = CND.No
PAR.USR_Flag_1 = 'N';

EXECUTE FUNCTION(RTV First Order Whse   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1397882;
PARAMETER(RCD.Load_ID);
PARAMETER(1);
PARAMETER(RCD.Warehouse_1_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.TXT_field_not_needed);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 QUIT;

}


//?Determine if multi-comp or just multi whse, (RI) the Whse if yes
CASE;

// IF RCD.Multi Company Load is yes
IF RCD.Multi_Company_Load = 'Y';

//?Determine if multi-comp or just multi whse, (RI) the Whse if yes
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Num Multi-Whs Ords RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1788807;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Multi_Company_Load);
PARAMETER(LCL.Number_of_Orders);
{
 //?USER: Initialize routine

 // PAR.Number of Orders = CON.*ZERO
 PAR.Number_of_Orders = *ZERO;

 // PAR.Warehouse Code = CON.*BLANK
 PAR.Warehouse_Code = *BLANK;

 // PAR.Multi Company Load = CND.no
 PAR.Multi_Company_Load = 'N';

 //?USER: Process Data record

 CASE;

 // IF PAR.Number of Orders is Greater Than 1
 IF PAR.Number_of_Orders > 1;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Warehouse wo/Quit RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1788808;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Warehouse_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Warehouse Code = DB1.Warehouse Code
  PAR.Warehouse_Code = DB1.Warehouse_Code;

  ENDIF;

 }

 CASE;

 // IF PAR.Warehouse Code NE LCL.Warehouse Code
 IF PAR.Warehouse_Code <> LCL.Warehouse_Code;

 // PAR.Warehouse Code = LCL.Warehouse Code
 PAR.Warehouse_Code = LCL.Warehouse_Code;

 // PAR.Number of Orders = PAR.Number of Orders + CON.1
 PAR.Number_of_Orders = PAR.Number_of_Orders + 1;

 ENDIF;

 ENDIF;

}


CASE;

// IF WRK.Number of Orders is Greater Than 1
IF WRK.Number_of_Orders > 1;

// RCD.Multi Company Load = CND.yes
RCD.Multi_Company_Load = 'Y';

ENDIF;

ENDIF;

//?Select Records for the Warehouse entered on the control level
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?Select Records for the Warehouse entered on the control level
CASE;

// IF CTL.Warehouse 1 USR is EQ Blank
IF CTL.Warehouse_1_USR = *BLANK;

//?Select Records for the Warehouse entered on the control level
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.Warehouse 1 USR EQ RCD.Warehouse 1 USR
IF CTL.Warehouse_1_USR = RCD.Warehouse_1_USR;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

// RCD.Flat Amount = DB1.Flat Amount
RCD.Flat_Amount = DB1.Flat_Amount;

// RCD.Deadline Depart Time 4,0 = DB1.Deadline Departure Time / CON.100 *
RCD.Deadline_Depart_Time_40 = DB1.Deadline_Departure_Time / 100;

// RCD.Deadline Departure MM/DD = DB1.Deadline Departure Date
RCD.Deadline_Departure_MM_DD = DB1.Deadline_Departure_Date;

//?CALC: Subfile control function fields

//?F5=Refresh
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?Format seq#
CASE;

// IF CTL.Numeric 4,0           USR is *Zero
IF CTL.Numeric_40_USR = *ZERO;

CASE;

// IF CTL.Numeric 4,0           USR NE PAR.Numeric 4,0           USR
IF CTL.Numeric_40_USR <> PAR.Numeric_40_USR;

// CTL.Schedule Sequence Number = CON.*ZERO
CTL.Schedule_Sequence_Number = *ZERO;

// PAR.Numeric 4,0           USR = CON.*ZERO
PAR.Numeric_40_USR = *ZERO;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Format seq#
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Schedule Sequence Number = CTL.Numeric 4,0           USR
CTL.Schedule_Sequence_Number = CTL.Numeric_40_USR;

// PAR.Numeric 4,0           USR = CTL.Numeric 4,0           USR
PAR.Numeric_40_USR = CTL.Numeric_40_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?F4
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Warehouse 1 USR
IF PGM.*Cursor_field = CTL.Warehouse_1_USR;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(CTL.Warehouse_1_USR);

ENDIF;

ENDIF;

//?Reload subfile if carrier changes.
CASE;

// IF CTL.Carrier Code NE CTL.USR Carrier Code
IF CTL.Carrier_Code <> CTL.USR_Carrier_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// CTL.USR Carrier Code = CTL.Carrier Code
CTL.USR_Carrier_Code = CTL.Carrier_Code;

ENDIF;

//?Reload If Warehouse is entered
CASE;

// IF CTL.Warehouse 1 USR EQ WRK.Warehouse 1 USR
IF CTL.Warehouse_1_USR = WRK.Warehouse_1_USR;

//?Reload If Warehouse is entered
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Warehouse 1 USR = CTL.Warehouse 1 USR
WRK.Warehouse_1_USR = CTL.Warehouse_1_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Reload If LastStopCity is entered
CASE;

// IF CTL.USR Load/Stop 10 Alpha EQ WRK.USR Load/Stop 10 Alpha
IF CTL.USR_Load_Stop_10_Alpha = WRK.USR_Load_Stop_10_Alpha;

//?Reload If LastStopCity is entered
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR Load/Stop 10 Alpha = CTL.USR Load/Stop 10 Alpha
WRK.USR_Load_Stop_10_Alpha = CTL.USR_Load_Stop_10_Alpha;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?** Put miles into wrk context           E00207
EXECUTE FUNCTION(RTV WW Screen Fields   RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1384832;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Load_Status);
PARAMETER(RCD.Total_Load_Order_Weight);
PARAMETER(RCD.Flat_Amount);
PARAMETER(RCD.Allocate_Pounds_Miles);
PARAMETER(RCD.Trailer_Id);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Truck_Size);
PARAMETER(RCD.Load_Type);
PARAMETER(RCD.Schedule_Sequence_Number);
PARAMETER(WRK.Total_Load_Miles);
PARAMETER(RCD.Shipping_Method);
PARAMETER(RCD.Ship_From_Warehouse);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(RCD.Load_Acceptance_Flag);
PARAMETER(RCD.Tot_Pallet_Tare);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Error if Load Header Not Found
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Error if Load Header Not Found
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Load Header &1 not found.'
ERROR(USR2313);
MSGPARM(RCD.Load_ID);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

EXECUTE FUNCTION(RTV Any Ord/Blk  on Ld RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1448300;
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(RCD.Block_Order_Flag);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 // PAR.USR Check Y/N Status = CND.blank
 PAR.USR_Check_Y_N_Status = *BLANK;

 //?OMS203:  need to know if there are any Block orders on load
 // PAR.Block Order Flag = CND.Firm Order
 PAR.Block_Order_Flag = 'F';

 //?USER: Process Data record

 // PAR.USR Check Y/N Status = CND.yes
 PAR.USR_Check_Y_N_Status = 'Y';

 CASE;

 // IF DB1.Block Order Flag is Block Order
 IF DB1.Block_Order_Flag = 'B';

 // PAR.Block Order Flag = DB1.Block Order Flag
 PAR.Block_Order_Flag = DB1.Block_Order_Flag;

 QUIT;

 ENDIF;

}


EXECUTE FUNCTION(RTV Total Ld Mi/Sts    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1496186;
PARAMETER(RCD.Load_ID);
PARAMETER(NLL.Load_Status);
PARAMETER(NLL.Total_Load_Miles);
PARAMETER(WRK.Override_Total_Load_Miles);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Use Override miles and highlight if entered       E00207
CASE;

// IF WRK.Override Total Load Miles is Entered
IF WRK.Override_Total_Load_Miles <> *ZERO;

// RCD.Total Miles 4,0       USR = WRK.Override Total Load Miles
RCD.Total_Miles_40_USR = WRK.Override_Total_Load_Miles;

// RCD.Change Flag USR = CND.Yes
RCD.Change_Flag_USR = 'Y';

//?** Use Override miles and highlight if entered       E00207
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Total Miles 4,0       USR = WRK.Total Load Miles
RCD.Total_Miles_40_USR = WRK.Total_Load_Miles;

// RCD.Change Flag USR = CND.No
RCD.Change_Flag_USR = 'N';

ENDIF;

// RCD.Trailer ID USR = RCD.Trailer Id
RCD.Trailer_ID_USR = RCD.Trailer_Id;

//?16=Display Dispatch/Tracer
CASE;

// IF RCD.*SFLSEL is Option 16
IF RCD.*SFLSEL = '16';

// Call program DSP Dispatch/Tracer    DF.
CALL PROGRAM(DSP Dispatch/Tracer    DF) ('PDT3DFR');
PARAMETER(RCD.Load_ID);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?8=Display TPM Whs Location
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

// Call program Zzz TPM Loc Mstr-WHSE  DR.
CALL PROGRAM(Zzz TPM Loc Mstr-WHSE  DR) ('PBFRD1R');
PARAMETER('WAREHOUSE');
PARAMETER(RCD.Warehouse_1_USR);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

SET CURSOR;

ENDIF;

//?screen displays state of last stop on load, so get that field again
//?do this @end of validate, so that processing will use REAL ship to state
EXECUTE FUNCTION(RTV Last Stop Consign  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1377331;
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.Ship_To_Customer);
PARAMETER(WRK.Ship_To_Name);
PARAMETER(WRK.Ship_To_Address_Line_1);
PARAMETER(WRK.Ship_To_Address_Line_2);
PARAMETER(WRK.Ship_To_Address_Line_3);
PARAMETER(RCD.USR_Load_Stop_10_Alpha);
PARAMETER(RCD.USR_State_Code);
PARAMETER(WRK.Ship_To_Zip_Postal_Code);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV for B.O.L. Print   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1377319;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name);
 PARAMETER(PAR.Ship_To_Address_Line_1);
 PARAMETER(PAR.Ship_To_Address_Line_2);
 PARAMETER(PAR.Ship_To_Address_Line_3);
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Ship_To_Zip_Postal_Code);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 QUIT;

}


//?USER: Process command keys

CASE;

// IF CTL.*CMD key is *Print 22
IF CTL.*CMD_key = '22';

// Call program Zzz TPM Loc Master     PF.
CALL PROGRAM(Zzz TPM Loc Master     PF) ('PBFSPFR');
PARAMETER('WAREHOUSE');

ENDIF;

