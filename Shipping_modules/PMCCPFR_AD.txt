// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMCCPFR
// ?Date: 14.08.2025 Time: 12:05:26
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// WRK.Print (Yes/No) USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

// WRK.Count USR = CON.*ZERO
WRK.Count_USR = *ZERO;

// LCL.Weight 11.0 USR = CON.*ZERO
LCL.Weight_11_0_USR = *ZERO;

// LCL.Quantity 11.0 = CON.*ZERO
LCL.Quantity_11_0 = *ZERO;

// WRK.Usr Counter Dtl = CON.*ZERO
WRK.Usr_Counter_Dtl = *ZERO;

//?USER: Record selection processing

//?** Select order Company Number
CASE;

// IF PAR.Company Number is not equal to zero
IF PAR.Company_Number <> *ZERO;

// AND PAR.Company Number NE DB1.Company Number
AND PAR.Company_Number <> DB1.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select Load Type
CASE;

// IF PAR.Load Type is Bulk or Regular
IF PAR.Load_Type = 'B'/'R';

// AND PAR.Load Type NE DB1.Load Type
AND PAR.Load_Type <> DB1.Load_Type;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select on UOM if entered
CASE;

// IF PAR.U/M - Primary is Entered
IF PAR.UOM_Primary <> *BLANK;

EXECUTE FUNCTION(VAL UOM Exists on Ord  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1458355;
PARAMETER(DB1.Load_ID);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Record_Found_USR);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 //?USER: Process Data record

 EXECUTE FUNCTION(VAL UOM Exists on Ord  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1457916;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Record_Found_USR);
 {
  //?USER: Initialize routine

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  CASE;

  // IF PAR.U/M - Ordered EQ DB1.U/M - Ordered
  IF PAR.U_M_Ordered = DB1.U_M_Ordered;

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

  QUIT;

  ENDIF;

 }

 CASE;

 // IF PAR.Record Found USR is Record Found
 IF PAR.Record_Found_USR = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF PAR.Record Found USR is Record Not Found
IF PAR.Record_Found_USR = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Select loads shipped/unshipped
CASE;

// IF PAR.Loads Shipped or Unship is Shipped
IF PAR.Loads_Shipped_or_Unship = 'S';

// AND DB1.Load Status is Not Shipped
AND DB1.Load_Status = 'C'/'E'/'I'/'L'/'U';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?Select loads shipped/unshipped
// IF PAR.Loads Shipped or Unship is Unshipped
IF PAR.Loads_Shipped_or_Unship = 'U';

// AND DB1.Load Status is Shipped or Invoiced
AND DB1.Load_Status = 'I'/'S';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process top of page

// TOP.Order Company Number Usr = PAR.Order Company Number Usr
TOP_Order_Company_Number_Usr = PAR.Order_Company_Number_Usr;

//?Order company name
CASE;

// IF TOP.Order Company Number Usr is greater than zero
IF TOP_Order_Company_Number_Usr > *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(TOP_Order_Company_Number_Usr);
PARAMETER(TOP_Order_Company_Name_Usr);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// TOP.USR Company Number = PAR.Company Number
TOP_USR_Company_Number = PAR.Company_Number;

//?Company Name
CASE;

// IF TOP.USR Company Number is greater than zero
IF TOP_USR_Company_Number > *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(TOP_USR_Company_Number);
PARAMETER(TOP_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Company Name
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Company Name = CON.*ALL
TOP_Company_Name = *ALL;

ENDIF;

//?Set up warehouses
CASE;

// IF PAR.USR Warehouse Code is Warehouse Code Blank
IF PAR.USR_Warehouse_Code = *BLANK;

// AND PAR.USR CDE Parm 1 is Warehouse Code Blank
AND PAR.USR_CDE_Parm_1 = *BLANK;

// AND PAR.USR CDE Parm 2 is Warehouse Code Blank
AND PAR.USR_CDE_Parm_2 = *BLANK;

// AND PAR.USR CDE Parm 3 is Warehouse Code Blank
AND PAR.USR_CDE_Parm_3 = *BLANK;

// AND PAR.USR CDE Parm 4 is Warehouse Code Blank
AND PAR.USR_CDE_Parm_4 = *BLANK;

// AND PAR.USR CDE Parm 5 is Warehouse Code Blank
AND PAR.USR_CDE_Parm_5 = *BLANK;

// AND PAR.USR CDE Parm 6 is Warehouse Code Blank
AND PAR.USR_CDE_Parm_6 = *BLANK;

// AND PAR.USR CDE Parm 7 is Warehouse Code Blank
AND PAR.USR_CDE_Parm_7 = *BLANK;

// AND PAR.USR CDE Parm 8 is Warehouse Code Blank
AND PAR.USR_CDE_Parm_8 = *BLANK;

// AND PAR.USR CDE Parm 9 is Warehouse Code Blank
AND PAR.USR_CDE_Parm_9 = *BLANK;

// TOP.USR Warehouse Code = CON.ALL
TOP_USR_Warehouse_Code = 'ALL';

//?Set up warehouses
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.USR Warehouse Code = PAR.USR Warehouse Code
TOP_USR_Warehouse_Code = PAR.USR_Warehouse_Code;

// TOP.USR CDE Parm 1 = PAR.USR CDE Parm 1
TOP_USR_CDE_Parm_1 = PAR.USR_CDE_Parm_1;

// TOP.USR CDE Parm 2 = PAR.USR CDE Parm 2
TOP_USR_CDE_Parm_2 = PAR.USR_CDE_Parm_2;

// TOP.USR CDE Parm 3 = PAR.USR CDE Parm 3
TOP_USR_CDE_Parm_3 = PAR.USR_CDE_Parm_3;

// TOP.USR CDE Parm 4 = PAR.USR CDE Parm 4
TOP_USR_CDE_Parm_4 = PAR.USR_CDE_Parm_4;

// TOP.USR CDE Parm 5 = PAR.USR CDE Parm 5
TOP_USR_CDE_Parm_5 = PAR.USR_CDE_Parm_5;

// TOP.USR CDE Parm 6 = PAR.USR CDE Parm 6
TOP_USR_CDE_Parm_6 = PAR.USR_CDE_Parm_6;

// TOP.USR CDE Parm 7 = PAR.USR CDE Parm 7
TOP_USR_CDE_Parm_7 = PAR.USR_CDE_Parm_7;

// TOP.USR CDE Parm 8 = PAR.USR CDE Parm 8
TOP_USR_CDE_Parm_8 = PAR.USR_CDE_Parm_8;

// TOP.USR CDE Parm 9 = PAR.USR CDE Parm 9
TOP_USR_CDE_Parm_9 = PAR.USR_CDE_Parm_9;

ENDIF;

// TOP.USR Date - ATR = PAR.Scheduled Ship Date
TOP_USR_Date_ATR = PAR.Scheduled_Ship_Date;

// TOP.USR Desc. 10 = Condition name of PAR.USR Select/Omit Flag
TOP_USR_Desc_10 = RTVCND(PAR.USR_Select_Omit_Flag);

// TOP.Load Type = PAR.Load Type
TOP_Load_Type = PAR.Load_Type;

//?Set load type description
CASE;

// IF TOP.Load Type is Blank
IF TOP_Load_Type = *BLANK;

// TOP.Condition Desc. 1  USR = CON.ALL
TOP_Condition_Desc_1_USR = 'ALL';

//?Set load type description
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Condition Desc. 1  USR = Condition name of TOP.Load Type
TOP_Condition_Desc_1_USR = RTVCND(TOP_Load_Type);

ENDIF;

// TOP.U/M - Primary = PAR.U/M - Primary
TOP_UOM_Primary = PAR.UOM_Primary;

//?Set UOM description
CASE;

// IF TOP.U/M - Primary is Not Entered
IF TOP_UOM_Primary = *BLANK;

// TOP.Description = CON.ALL
TOP_Description = 'ALL';

//?Set UOM description
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv UOM Description    RT) TYPE(RTVOBJ) FILE(CAAMREP)          AC1216290;
PARAMETER(TOP_UOM_Primary);
PARAMETER(TOP_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// TOP.Loads Shipped or Unship = PAR.Loads Shipped or Unship
TOP_Loads_Shipped_or_Unship = PAR.Loads_Shipped_or_Unship;

//?Set Loads shipped/unshipped description
CASE;

// IF TOP.Loads Shipped or Unship is Shipped
IF TOP_Loads_Shipped_or_Unship = 'S';

// TOP.Condition Desc. 2  USR = Condition name of TOP.Loads Shipped or Unship
TOP_Condition_Desc_2_USR = RTVCND(TOP_Loads_Shipped_or_Unship);

//?Set Loads shipped/unshipped description
// IF TOP.Loads Shipped or Unship is Unshipped
IF TOP_Loads_Shipped_or_Unship = 'U';

// TOP.Condition Desc. 2  USR = Condition name of TOP.Loads Shipped or Unship
TOP_Condition_Desc_2_USR = RTVCND(TOP_Loads_Shipped_or_Unship);

//?Set Loads shipped/unshipped description
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Condition Desc. 2  USR = CON.ALL
TOP_Condition_Desc_2_USR = 'ALL';

ENDIF;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

// SUPPRESSED PRINT Scheduled Ship Date header format

// SUPPRESSED PRINT Export Status header format

// SUPPRESSED PRINT Schedule Sequence Number header format

// SUPPRESSED PRINT Load ID header format

//?USER: On print of detail format

// WRK.Print (Yes/No) USR = CND.No
WRK.Print_Yes_No_USR = 'N';

// WRK.USR Active Flag = CND.Record Not Found
WRK.USR_Active_Flag = 'N';

// PAR.USR U/M 1 = CON.*BLANK
PAR.USR_U_M_1 = *BLANK;

//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : PRT Ld Lst Dtl-SSD/Seq PO
//?** Replace miles with override, if entered
CASE;

// IF DB1.Override Total Load Miles is Entered
IF DB1.Override_Total_Load_Miles <> *ZERO;

// CUR.Total Load Miles = DB1.Override Total Load Miles
CUR.Total_Load_Miles = DB1.Override_Total_Load_Miles;

//?** Replace miles with override, if entered
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Total Load Miles = DB1.Total Load Miles
CUR.Total_Load_Miles = DB1.Total_Load_Miles;

ENDIF;

// WRK.Display Flag 1 USR = CND.blank
WRK.Display_Flag_1_USR = *BLANK;

// WRK.Load U/M = CND.not entered
WRK.Load_U_M = *BLANK;

//?** Pass in Load U/M. If it is blanks, pass back the calculated
//?** load u/m from the order detail file.               E00476
EXECUTE FUNCTION(PRT Ld Lst Dtl-SSD/Seq PO) TYPE(PRTOBJ);
PARAMETER(DB1.Load_ID);
PARAMETER(PAR.Order_Company_Number_Usr);
PARAMETER(DB1.Total_Stops);
PARAMETER(DB1.Trailer_Id);
PARAMETER(DB1.Schedule_Sequence_Number);
PARAMETER(CUR.Total_Load_Miles);
PARAMETER(DB1.Load_Acceptance_Flag);
PARAMETER(PAR.USR_U_M_1);
PARAMETER(WRK.Count_USR);
PARAMETER(PAR.Quantity_11_0);
PARAMETER(PAR.Export_Status);
PARAMETER(PAR.Palletize);
PARAMETER(PAR.Shrink_Wrap);
PARAMETER(PAR.Slip_Sheet);
PARAMETER(PAR.USR_Warehouse_Code);
PARAMETER(PAR.USR_CDE_Parm_1);
PARAMETER(PAR.USR_CDE_Parm_2);
PARAMETER(PAR.USR_CDE_Parm_3);
PARAMETER(PAR.USR_CDE_Parm_4);
PARAMETER(PAR.USR_CDE_Parm_5);
PARAMETER(PAR.USR_CDE_Parm_6);
PARAMETER(PAR.USR_CDE_Parm_7);
PARAMETER(PAR.USR_CDE_Parm_8);
PARAMETER(PAR.USR_CDE_Parm_9);
PARAMETER(PAR.USR_Select_Omit_Flag);
PARAMETER(WRK.Display_Flag_1_USR);
PARAMETER(DB1.Load_U_M);
PARAMETER(WRK.Load_U_M);
PARAMETER(DB1.Company_Number);
PARAMETER(LCL.Weight_11_0_USR);
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


//?USER: Process after print of detail format

//?Accum number of loads Export, Box, Combo, or Mixed
CASE;

// IF PAR.Export Status is yes
IF PAR.Export_Status = 'Y';

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

// OR WRK.Display Flag 1 USR is yes
OR WRK.Display_Flag_1_USR = 'Y';

// PAR.Count Export Loads USR = PAR.Count Export Loads USR + CON.1
PAR.Count_Export_Loads_USR = PAR.Count_Export_Loads_USR + 1;

ENDIF;

//?Accum number of loads Export, Box, Combo, or Mixed
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

// OR WRK.Display Flag 1 USR is yes
OR WRK.Display_Flag_1_USR = 'Y';

//?count load u/m (updated when load is locked)
CASE;

// IF DB1.Load U/M is Box
IF DB1.Load_U_M = 'BX';

// PAR.Count 2 USR = PAR.Count 2 USR + CON.1
PAR.Count_2_USR = PAR.Count_2_USR + 1;

//?count load u/m (updated when load is locked)
// IF DB1.Load U/M is Combo
IF DB1.Load_U_M = 'CB';

// PAR.Count USR 3 = PAR.Count USR 3 + CON.1
PAR.Count_USR_3 = PAR.Count_USR_3 + 1;

//?count load u/m (updated when load is locked)
// IF DB1.Load U/M is Mix
IF DB1.Load_U_M = 'MX';

// PAR.Count Mixed USR = PAR.Count Mixed USR + CON.1
PAR.Count_Mixed_USR = PAR.Count_Mixed_USR + 1;

//?count load u/m (updated when load is locked)
// IF *OTHERWISE
IF *OTHERWISE;

//?** Remove the "other" count field from the report
//?** Calculations for when the Load U/M is blank:
//?** Count the u/m that was calculated from the Order Detail
//?** file into the group that it would fall into if the load
//?** had been locked before the report was run.         E00476
CASE;

// IF WRK.Load U/M is Box
IF WRK.Load_U_M = 'BX';

// PAR.Count 2 USR = PAR.Count 2 USR + CON.1
PAR.Count_2_USR = PAR.Count_2_USR + 1;

// IF WRK.Load U/M is Combo
IF WRK.Load_U_M = 'CB';

// PAR.Count USR 3 = PAR.Count USR 3 + CON.1
PAR.Count_USR_3 = PAR.Count_USR_3 + 1;

// IF WRK.Load U/M is Mix
IF WRK.Load_U_M = 'MX';

// PAR.Count Mixed USR = PAR.Count Mixed USR + CON.1
PAR.Count_Mixed_USR = PAR.Count_Mixed_USR + 1;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?USER: Print required level totals

CASE;

IF NEW Load_ID;
CASE;

// IF WRK.USR Active Flag is Record Not Found
IF WRK.USR_Active_Flag = 'N';

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

//?new 2/9/04  print 1st freezer order item/qty/+
EXECUTE FUNCTION(RTV Freezer Ord Item  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1683475;
PARAMETER(CUR.Load_ID);
PARAMETER(CUR.Item_Code);
PARAMETER(LCL.Quantity_Scheduled);
PARAMETER(CUR.Text_1_Length_USR);
{
 //?USER: Initialize routine

 //?05/12/04 SLM PKTR01 Multi-Company - Function was changed
 //?                                    to remove Company RST or Pos
 // PAR.Item Code = CON.*ZERO
 PAR.Item_Code = *ZERO;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Freezer Ord Item  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1683476;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Quantity_Scheduled);
 PARAMETER(PAR.Text_1_Length_USR);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(LCL.Warehouse_Type);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Warehouse Type is Frozen
  IF LCL.Warehouse_Type = 'FZ';

  CASE;

  // IF PAR.Item Code is Not Entered
  IF PAR.Item_Code = *ZERO;

  MOVE *ALL (To: PAR From: DB1);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Text 1 Length USR = CON.+
  PAR.Text_1_Length_USR = '+';

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  QUIT;

  ENDIF;

 }

}


// LCL.Item Code = CUR.Item Code
LCL.Item_Code = CUR.Item_Code;

// CUR.Quantity Scheduled 1 USR = LCL.Quantity Scheduled
CUR.Quantity_Scheduled_1_USR = LCL.Quantity_Scheduled;

ENDIF;

// Print Load ID totals format
PRINT Load ID totals format;

ENDIF;

// SUPPRESSED PRINT Schedule Sequence Number totals format

// SUPPRESSED PRINT Export Status totals format

// SUPPRESSED PRINT Scheduled Ship Date totals format

//?USER: On print of final totals format

// CUR.Weight 11.0 USR = LCL.Weight 11.0 USR
CUR.Weight_11_0_USR = LCL.Weight_11_0_USR;

// CUR.Quantity 11.0 = PAR.Quantity 11.0
CUR.Quantity_11_0 = PAR.Quantity_11_0;

// CUR.Count Export Loads USR = PAR.Count Export Loads USR
CUR.Count_Export_Loads_USR = PAR.Count_Export_Loads_USR;

// CUR.Count 2 USR = PAR.Count 2 USR
CUR.Count_2_USR = PAR.Count_2_USR;

// CUR.Count USR 3 = PAR.Count USR 3
CUR.Count_USR_3 = PAR.Count_USR_3;

// CUR.Count Mixed USR = PAR.Count Mixed USR
CUR.Count_Mixed_USR = PAR.Count_Mixed_USR;

// CUR.Usr Counter Dtl = WRK.Usr Counter Dtl
CUR.Usr_Counter_Dtl = WRK.Usr_Counter_Dtl;

