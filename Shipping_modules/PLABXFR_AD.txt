// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLABXFR
// ?Date: 14.08.2025 Time: 03:42:27
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(UPD Alloc Frt to Hist  IF) TYPE(EXCINTFUN)                     AC1787975;
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Load_Total_Freight);
PARAMETER(PAR.Flat_Amount);
{
 //?Execute internal function

 // LCL.Total Freight USR = PAR.Total Freight USR
 LCL.Total_Freight_USR = PAR.Total_Freight_USR;

 // LCL.Load Total Freight = PAR.Load Total Freight
 LCL.Load_Total_Freight = PAR.Load_Total_Freight;

 // LCL.Total Amount = CON.*ZERO
 LCL.Total_Amount = 0;

 // LCL.USR Percent Work, 7.4   1 = CON.*ZERO
 LCL.USR_Percent_Work_7_4_1 = 0;

 // LCL.USR Work Percent 7/6 = CON.*ZERO
 LCL.USR_Work_Percent_7_6 = *ZERO;

 // LCL.Reference Req Freight Amt = CON.*ZERO
 LCL.Reference_Req_Freight_Amt = *ZERO;

 // WRK.Total Weight Work = CON.*ZERO
 WRK.Total_Weight_Work = *ZERO;

 EXECUTE FUNCTION(Upd Ref Act Frt Amt   IF) TYPE(EXCINTFUN)                      AC1872061;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Total_Amount);
 PARAMETER(LCL.Act_Frt_Ref_Amt_USR);
 PARAMETER(LCL.Tot_Frt_Ref_Amt_USR);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Upd Ref Act Frt Amt   RT) TYPE(RTVOBJ) FILE(POBCCPP)           AC1871598;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Total_Amount);
  PARAMETER(PAR.Act_Frt_Ref_Amt_USR);
  PARAMETER(PAR.Tot_Frt_Ref_Amt_USR);
  {
   //?USER: Initialize routine

   //?***** Change Log and Comments
   DO;

   //?** Notes:
   //?** Only process freight records if Actual Freight Include
   //?** Sts = Y and Reference Required = Y.
   //?** Accumulate ref charge code amounts for the ship to customer
   //?** (reference) and pass out the total so it can be deducted
   //?** from the Total Actual Freight Amount for the Load ID.
   //?** The remainder of the Total Actual Freight Amount
   //?** will be allocated by Incremental Miles. (as it is done now)
   ENDDO;

   EXECUTE FUNCTION(Upd Init Ld Ref Amt   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1878866;
   PARAMETER(PAR.Load_ID);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(Chg Ord Init RefAmt   CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC1894826;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

   }

   //?USER: Process Data record

   //?R8827 JJH 01/25/17 - Add additional condition LFC Special Type
   //?  NE E=Evenly by Stop
   CASE;

   // IF DB1.LFC Reference Required is Yes
   IF DB1.LFC_Reference_Required = 'Y';

   // AND NOT DB1.LFC Special Type is Evenly by Stop
   AND ! DB1.LFC_Special_Type = 'E';

   EXECUTE FUNCTION(Rtv Charge Reference  RT) TYPE(RTVOBJ) FILE(PMDKCPP)           AC1871599;
   PARAMETER(DB1.Load_ID);
   PARAMETER(DB1.FC_Code);
   PARAMETER(DB1.LFC_Sequence_Number);
   PARAMETER(PAR.CR_Reference_Code);
   PARAMETER(PAR.LFCR_Value_Type);
   PARAMETER(PAR.LFCR_Numeric_Value);
   PARAMETER(PAR.LFCR_Alpha_Value);
   {
    //?USER: Initialize routine

    // LCL.Count USR = CON.1
    LCL.Count_USR = 1;

    MOVE *ALL (To: PAR From: CON);

    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    CASE;

    // IF DB1.LFCR Reference Type is Charge Allocation
    IF DB1.LFCR_Reference_Type = 'A';

    MOVE *ALL (To: PAR From: DB1);

    ENDIF;

   }

   //?If Reference Type of Charge Allocation found
   CASE;

   // IF PAR.CR Reference Code is Not Blanks
   IF PAR.CR_Reference_Code <> *BLANK;

   //?UPD: Order Freight Reference Amount
   CASE;

   // IF PAR.CR Reference Code is Ship To
   IF PAR.CR_Reference_Code = 'SHIPTO';

   //?CVT: Ship To Customer
   CASE;

   // IF PAR.LFCR Value Type is Numeric Value Type
   IF PAR.LFCR_Value_Type = 'N';

   // LCL.Ship To Customer = PAR.LFCR Numeric Value
   LCL.Ship_To_Customer = PAR.LFCR_Numeric_Value;

   //?CVT: Ship To Customer
   // IF PAR.LFCR Value Type is Alpha Value Type
   IF PAR.LFCR_Value_Type = 'A';

   // LCL.USR Text 7            USR = PAR.LFCR Alpha Value
   LCL.USR_Text_7_USR = PAR.LFCR_Alpha_Value;

   // LCL.Ship To Customer = CVTVAR(LCL.USR Text 7            USR)
   LCL.Ship_To_Customer = CVTVAR(LCL.USR_Text_7_USR);

   ENDIF;

   EXECUTE FUNCTION(Rtv Ld/ShipTo  OrdWgt RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1878850;
   PARAMETER(DB1.Load_ID);
   PARAMETER(LCL.Ship_To_Customer);
   PARAMETER(PAR.Total_Weight_Work);
   {
    //?USER: Initialize routine

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    // PAR.Total Weight Work = PAR.Total Weight Work + DB1.Order Weight Total
    PAR.Total_Weight_Work = PAR.Total_Weight_Work + DB1.Order_Weight_Total;

   }

   EXECUTE FUNCTION(Upd Ld/ShipTo  RefAmt RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1878864;
   PARAMETER(DB1.Load_ID);
   PARAMETER(LCL.Ship_To_Customer);
   PARAMETER(PAR.Total_Weight_Work);
   PARAMETER(DB1.LFC_Amount);
   PARAMETER(DB1.LFC_Act_Frt_Include_Sts);
   PARAMETER(DB1.LFC_Tot_Freight_Inc_Sts);
   {
    //?USER: Initialize routine

    // LCL.LFC Amount = PAR.LFC Amount
    LCL.LFC_Amount = PAR.LFC_Amount;

    //?* CALC: Freight Rate Per Pound
    CASE;

    // IF PAR.Total Weight Work is Not Zeros
    IF PAR.Total_Weight_Work <> *ZERO;

    // LCL.Freight Rate USR = PAR.LFC Amount / PAR.Total Weight Work *Rounded
    LCL.Freight_Rate_USR = PAR.LFC_Amount / PAR.Total_Weight_Work 'H';

    ENDIF;

    //?USER: Process Data record

    //?* CALC: Freight Amount for Order
    // LCL.Freight Amount = LCL.Freight Rate USR * DB1.Order Weight Total *Rounded
    LCL.Freight_Amount = LCL.Freight_Rate_USR * DB1.Order_Weight_Total 'H';

    //?UPD: Actual Freight Reference Amount
    CASE;

    // IF PAR.LFC Act Frt Include Sts is Yes
    IF PAR.LFC_Act_Frt_Include_Sts = 'Y';

    //?* ADD: Add to the current value of Reference Amount
    // LCL.Act Frt Reference Amount = DB1.Act Frt Reference Amount + LCL.Freight Amount
    LCL.Act_Frt_Reference_Amount = DB1.Act_Frt_Reference_Amount + LCL.Freight_Amount;

    //?* UPD: Update with New Reference Amount
    EXECUTE FUNCTION(Chg Ord ActFrt RefAmt CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC1878867;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(LCL.Act_Frt_Reference_Amount);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

    //?UPD: Total Freight Reference Amount
    CASE;

    // IF PAR.LFC Tot Freight Inc Sts is Yes
    IF PAR.LFC_Tot_Freight_Inc_Sts = 'Y';

    //?* ADD: Add to the current value of Reference Amount
    // LCL.OH Total Ref Frt Amt = DB1.OH Total Ref Frt Amt + LCL.Freight Amount
    LCL.OH_Total_Ref_Frt_Amt = DB1.OH_Total_Ref_Frt_Amt + LCL.Freight_Amount;

    //?* UPD: Update with New Reference Amount
    EXECUTE FUNCTION(Chg Ord TotFrt RefAmt CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC1894713;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(LCL.OH_Total_Ref_Frt_Amt);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

    //?* CALC: Remaining Amount to Allocate
    // LCL.LFC Amount = LCL.LFC Amount - LCL.Freight Amount
    LCL.LFC_Amount = LCL.LFC_Amount - LCL.Freight_Amount;

    //?USER: Exit processing

    CASE;

    // IF LCL.LFC Amount is Entered
    IF LCL.LFC_Amount <> *ZERO;

    //?Adjust difference on last Order
    CASE;

    // IF PAR.LFC Act Frt Include Sts is Yes
    IF PAR.LFC_Act_Frt_Include_Sts = 'Y';

    // LCL.Act Frt Reference Amount = LCL.Act Frt Reference Amount + LCL.LFC Amount
    LCL.Act_Frt_Reference_Amount = LCL.Act_Frt_Reference_Amount + LCL.LFC_Amount;

    EXECUTE FUNCTION(Chg Ord ActFrt RefAmt CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC1878867;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(LCL.Act_Frt_Reference_Amount);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

    CASE;

    // IF PAR.LFC Act Frt Include Sts is Yes
    IF PAR.LFC_Act_Frt_Include_Sts = 'Y';

    // LCL.OH Total Ref Frt Amt = LCL.OH Total Ref Frt Amt + LCL.LFC Amount
    LCL.OH_Total_Ref_Frt_Amt = LCL.OH_Total_Ref_Frt_Amt + LCL.LFC_Amount;

    EXECUTE FUNCTION(Chg Ord TotFrt RefAmt CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC1894713;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(LCL.OH_Total_Ref_Frt_Amt);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

    ENDIF;

   }

   //?UPD: Order Freight Reference Amount
   // IF PAR.CR Reference Code is State
   IF PAR.CR_Reference_Code = 'STATE';

   // LCL.Ship To State Code = PAR.LFCR Alpha Value
   LCL.Ship_To_State_Code = PAR.LFCR_Alpha_Value;

   EXECUTE FUNCTION(Rtv Ld/State   OrdWgt RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1878851;
   PARAMETER(DB1.Load_ID);
   PARAMETER(LCL.Ship_To_State_Code);
   PARAMETER(PAR.Total_Weight_Work);
   {
    //?USER: Initialize routine

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    // PAR.Total Weight Work = PAR.Total Weight Work + DB1.Order Weight Total
    PAR.Total_Weight_Work = PAR.Total_Weight_Work + DB1.Order_Weight_Total;

   }

   EXECUTE FUNCTION(Upd Ld/State   RefAmt RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1878911;
   PARAMETER(DB1.Load_ID);
   PARAMETER(LCL.Ship_To_State_Code);
   PARAMETER(PAR.Total_Weight_Work);
   PARAMETER(DB1.LFC_Amount);
   PARAMETER(DB1.LFC_Act_Frt_Include_Sts);
   PARAMETER(DB1.LFC_Tot_Freight_Inc_Sts);
   {
    //?USER: Initialize routine

    // LCL.LFC Amount = PAR.LFC Amount
    LCL.LFC_Amount = PAR.LFC_Amount;

    //?* CALC: Freight Rate Per Pound
    CASE;

    // IF PAR.Total Weight Work is Not Zeros
    IF PAR.Total_Weight_Work <> *ZERO;

    // LCL.Freight Rate USR = PAR.LFC Amount / PAR.Total Weight Work *Rounded
    LCL.Freight_Rate_USR = PAR.LFC_Amount / PAR.Total_Weight_Work 'H';

    ENDIF;

    //?USER: Process Data record

    //?* CALC: Freight Amount for Order
    // LCL.Freight Amount = LCL.Freight Rate USR * DB1.Order Weight Total *Rounded
    LCL.Freight_Amount = LCL.Freight_Rate_USR * DB1.Order_Weight_Total 'H';

    //?UPD: Actual Freight Reference Amount
    CASE;

    // IF PAR.LFC Act Frt Include Sts is Yes
    IF PAR.LFC_Act_Frt_Include_Sts = 'Y';

    //?* ADD: Add to the current value of Reference Amount
    // LCL.Freight Reference Amount = DB1.Freight Reference Amount + LCL.Freight Amount
    LCL.Act_Frt_Reference_Amount = DB1.Act_Frt_Reference_Amount + LCL.Freight_Amount;

    //?* UPD: Update with New Reference Amount
    EXECUTE FUNCTION(Chg Ord ActFrt RefAmt CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC1878867;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(LCL.Act_Frt_Reference_Amount);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

    //?UPD: Total Freight Reference Amount
    CASE;

    // IF PAR.LFC Tot Freight Inc Sts is Yes
    IF PAR.LFC_Tot_Freight_Inc_Sts = 'Y';

    //?* ADD: Add to the current value of Reference Amount
    // LCL.OH Total Ref Frt Amt = DB1.OH Total Ref Frt Amt + LCL.Freight Amount
    LCL.OH_Total_Ref_Frt_Amt = DB1.OH_Total_Ref_Frt_Amt + LCL.Freight_Amount;

    //?* UPD: Update with New Reference Amount
    EXECUTE FUNCTION(Chg Ord TotFrt RefAmt CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC1894713;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(LCL.OH_Total_Ref_Frt_Amt);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

    //?* CALC: Remaining Amount to Allocate
    // LCL.LFC Amount = LCL.LFC Amount - LCL.Freight Amount
    LCL.LFC_Amount = LCL.LFC_Amount - LCL.Freight_Amount;

    //?USER: Exit processing

    CASE;

    // IF LCL.LFC Amount is Entered
    IF LCL.LFC_Amount <> *ZERO;

    //?Adjust difference on last Order
    CASE;

    // IF PAR.LFC Act Frt Include Sts is Yes
    IF PAR.LFC_Act_Frt_Include_Sts = 'Y';

    // LCL.Freight Reference Amount = LCL.Freight Reference Amount + LCL.LFC Amount
    LCL.Act_Frt_Reference_Amount = LCL.Act_Frt_Reference_Amount + LCL.LFC_Amount;

    EXECUTE FUNCTION(Chg Ord ActFrt RefAmt CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC1878867;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(LCL.Act_Frt_Reference_Amount);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

    CASE;

    // IF PAR.LFC Tot Freight Inc Sts is Yes
    IF PAR.LFC_Tot_Freight_Inc_Sts = 'Y';

    // LCL.OH Total Ref Frt Amt = LCL.OH Total Ref Frt Amt + LCL.LFC Amount
    LCL.OH_Total_Ref_Frt_Amt = LCL.OH_Total_Ref_Frt_Amt + LCL.LFC_Amount;

    EXECUTE FUNCTION(Chg Ord TotFrt RefAmt CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC1894713;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(LCL.OH_Total_Ref_Frt_Amt);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

    ENDIF;

   }

   //?UPD: Order Freight Reference Amount
   // IF PAR.CR Reference Code is City-St
   IF PAR.CR_Reference_Code = 'CITYST';

   // LCL.Ship To City = SUBSTRING(PAR.LFCR Alpha Value,CON.1,CON.20)
   LCL.Ship_To_City = SUBSTRING(PAR.LFCR_Alpha_Value:1:20);

   // LCL.Ship To State Code = SUBSTRING(PAR.LFCR Alpha Value,CON.21,CON.2)
   LCL.Ship_To_State_Code = SUBSTRING(PAR.LFCR_Alpha_Value:21:2);

   EXECUTE FUNCTION(Rtv Ld/St/Cty  OrdWgt RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1880803;
   PARAMETER(DB1.Load_ID);
   PARAMETER(LCL.Ship_To_State_Code);
   PARAMETER(LCL.Ship_To_City);
   PARAMETER(PAR.Total_Weight_Work);
   {
    //?USER: Initialize routine

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    // PAR.Total Weight Work = PAR.Total Weight Work + DB1.Order Weight Total
    PAR.Total_Weight_Work = PAR.Total_Weight_Work + DB1.Order_Weight_Total;

   }

   EXECUTE FUNCTION(Upd Ld/St/Cty  RefAmt RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1880805;
   PARAMETER(DB1.Load_ID);
   PARAMETER(LCL.Ship_To_State_Code);
   PARAMETER(LCL.Ship_To_City);
   PARAMETER(PAR.Total_Weight_Work);
   PARAMETER(DB1.LFC_Amount);
   PARAMETER(DB1.LFC_Act_Frt_Include_Sts);
   PARAMETER(DB1.LFC_Tot_Freight_Inc_Sts);
   {
    //?USER: Initialize routine

    // LCL.LFC Amount = PAR.LFC Amount
    LCL.LFC_Amount = PAR.LFC_Amount;

    //?* CALC: Freight Rate Per Pound
    CASE;

    // IF PAR.Total Weight Work is Not Zeros
    IF PAR.Total_Weight_Work <> *ZERO;

    // LCL.Freight Rate USR = PAR.LFC Amount / PAR.Total Weight Work *Rounded
    LCL.Freight_Rate_USR = PAR.LFC_Amount / PAR.Total_Weight_Work 'H';

    ENDIF;

    //?USER: Process Data record

    //?* CALC: Freight Amount for Order
    // LCL.Freight Amount = LCL.Freight Rate USR * DB1.Order Weight Total *Rounded
    LCL.Freight_Amount = LCL.Freight_Rate_USR * DB1.Order_Weight_Total 'H';

    //?UPD: Actual Freight Reference Amount
    CASE;

    // IF PAR.LFC Act Frt Include Sts is Yes
    IF PAR.LFC_Act_Frt_Include_Sts = 'Y';

    //?* ADD: Add to the current value of Reference Amount
    // LCL.Freight Reference Amount = DB1.Freight Reference Amount + LCL.Freight Amount
    LCL.Act_Frt_Reference_Amount = DB1.Act_Frt_Reference_Amount + LCL.Freight_Amount;

    //?* UPD: Update with New Reference Amount
    EXECUTE FUNCTION(Chg Ord ActFrt RefAmt CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC1878867;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(LCL.Act_Frt_Reference_Amount);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

    //?UPD: Total Freight Reference Amount
    CASE;

    // IF PAR.LFC Act Frt Include Sts is Yes
    IF PAR.LFC_Act_Frt_Include_Sts = 'Y';

    //?* ADD: Add to the current value of Reference Amount
    // LCL.OH Total Ref Frt Amt = DB1.OH Total Ref Frt Amt + LCL.Freight Amount
    LCL.OH_Total_Ref_Frt_Amt = DB1.OH_Total_Ref_Frt_Amt + LCL.Freight_Amount;

    //?* UPD: Update with New Reference Amount
    EXECUTE FUNCTION(Chg Ord TotFrt RefAmt CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC1894713;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(LCL.OH_Total_Ref_Frt_Amt);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

    //?* CALC: Remaining Amount to Allocate
    // LCL.LFC Amount = LCL.LFC Amount - LCL.Freight Amount
    LCL.LFC_Amount = LCL.LFC_Amount - LCL.Freight_Amount;

    //?USER: Exit processing

    CASE;

    // IF LCL.LFC Amount is Entered
    IF LCL.LFC_Amount <> *ZERO;

    //?Adjust difference on last Order
    CASE;

    // IF PAR.LFC Act Frt Include Sts is Yes
    IF PAR.LFC_Act_Frt_Include_Sts = 'Y';

    // LCL.Freight Reference Amount = LCL.Freight Reference Amount + LCL.LFC Amount
    LCL.Act_Frt_Reference_Amount = LCL.Act_Frt_Reference_Amount + LCL.LFC_Amount;

    EXECUTE FUNCTION(Chg Ord ActFrt RefAmt CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC1878867;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(LCL.Act_Frt_Reference_Amount);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

    CASE;

    // IF PAR.LFC Tot Freight Inc Sts is Yes
    IF PAR.LFC_Tot_Freight_Inc_Sts = 'Y';

    // LCL.OH Total Ref Frt Amt = LCL.OH Total Ref Frt Amt + LCL.LFC Amount
    LCL.OH_Total_Ref_Frt_Amt = LCL.OH_Total_Ref_Frt_Amt + LCL.LFC_Amount;

    EXECUTE FUNCTION(Chg Ord TotFrt RefAmt CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC1894713;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(LCL.OH_Total_Ref_Frt_Amt);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

    ENDIF;

   }

   //?UPD: Order Freight Reference Amount
   // IF PAR.CR Reference Code is Warehouse
   IF PAR.CR_Reference_Code = 'WHS';

   // LCL.Warehouse Code = SUBSTRING(PAR.LFCR Alpha Value,CON.1,CON.3)
   LCL.Warehouse_Code = SUBSTRING(PAR.LFCR_Alpha_Value:1:3);

   EXECUTE FUNCTION(Rtv Ld/Whs     OrdWgt RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1893898;
   PARAMETER(DB1.Load_ID);
   PARAMETER(LCL.Warehouse_Code);
   PARAMETER(PAR.Total_Weight_Work);
   {
    //?USER: Initialize routine

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Whse/Non Cancelled RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428700;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(LCL.Warehouse_Code);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     //?C2748:  Changed RTV Warehouse Code RT to exclude Cancelled lines.
     CASE;

     // IF DB1.Detail Line Status is Cancelled
     IF DB1.Detail_Line_Status = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     MOVE *ALL (To: PAR From: DB1);

     QUIT;

     ENDIF;

    }

    CASE;

    // IF LCL.Warehouse Code EQ PAR.Warehouse Code
    IF LCL.Warehouse_Code = PAR.Warehouse_Code;

    // PAR.Total Weight Work = PAR.Total Weight Work + DB1.Order Weight Total
    PAR.Total_Weight_Work = PAR.Total_Weight_Work + DB1.Order_Weight_Total;

    ENDIF;

   }

   EXECUTE FUNCTION(Upd Ld/WHS     RefAmt RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1893901;
   PARAMETER(DB1.Load_ID);
   PARAMETER(LCL.Warehouse_Code);
   PARAMETER(PAR.Total_Weight_Work);
   PARAMETER(DB1.LFC_Amount);
   PARAMETER(DB1.LFC_Act_Frt_Include_Sts);
   PARAMETER(DB1.LFC_Tot_Freight_Inc_Sts);
   {
    //?USER: Initialize routine

    // LCL.LFC Amount = PAR.LFC Amount
    LCL.LFC_Amount = PAR.LFC_Amount;

    //?* CALC: Freight Rate Per Pound
    CASE;

    // IF PAR.Total Weight Work is Not Zeros
    IF PAR.Total_Weight_Work <> *ZERO;

    // LCL.Freight Rate USR = PAR.LFC Amount / PAR.Total Weight Work *Rounded
    LCL.Freight_Rate_USR = PAR.LFC_Amount / PAR.Total_Weight_Work 'H';

    ENDIF;

    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Whse/Non Cancelled RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428700;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(LCL.Warehouse_Code);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     //?C2748:  Changed RTV Warehouse Code RT to exclude Cancelled lines.
     CASE;

     // IF DB1.Detail Line Status is Cancelled
     IF DB1.Detail_Line_Status = 'X';

     // IF *OTHERWISE
     IF *OTHERWISE;

     MOVE *ALL (To: PAR From: DB1);

     QUIT;

     ENDIF;

    }

    CASE;

    // IF LCL.Warehouse Code EQ PAR.Warehouse Code
    IF LCL.Warehouse_Code = PAR.Warehouse_Code;

    //?* CALC: Freight Amount for Order
    // LCL.Freight Amount = LCL.Freight Rate USR * DB1.Order Weight Total *Rounded
    LCL.Freight_Amount = LCL.Freight_Rate_USR * DB1.Order_Weight_Total 'H';

    //?UPD: Actual Freight Reference Amount
    CASE;

    // IF PAR.LFC Act Frt Include Sts is Yes
    IF PAR.LFC_Act_Frt_Include_Sts = 'Y';

    //?* ADD: Add to the current value of Reference Amount
    // LCL.Freight Reference Amount = DB1.Freight Reference Amount + LCL.Freight Amount
    LCL.Act_Frt_Reference_Amount = DB1.Act_Frt_Reference_Amount + LCL.Freight_Amount;

    //?* UPD: Update with New Reference Amount
    EXECUTE FUNCTION(Chg Ord ActFrt RefAmt CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC1878867;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(LCL.Act_Frt_Reference_Amount);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

    //?UPD: Total Freight Reference Amount
    CASE;

    // IF PAR.LFC Tot Freight Inc Sts is Yes
    IF PAR.LFC_Tot_Freight_Inc_Sts = 'Y';

    //?* ADD: Add to the current value of Reference Amount
    // LCL.OH Total Ref Frt Amt = DB1.OH Total Ref Frt Amt + LCL.Freight Amount
    LCL.OH_Total_Ref_Frt_Amt = DB1.OH_Total_Ref_Frt_Amt + LCL.Freight_Amount;

    //?* UPD: Update with New Reference Amount
    EXECUTE FUNCTION(Chg Ord TotFrt RefAmt CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC1894713;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(LCL.OH_Total_Ref_Frt_Amt);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

    //?* CALC: Remaining Amount to Allocate
    // LCL.LFC Amount = LCL.LFC Amount - LCL.Freight Amount
    LCL.LFC_Amount = LCL.LFC_Amount - LCL.Freight_Amount;

    //?* SAVE: Last Order with the Warehouse Code for Exit Processing
    // LCL.Company Number = DB1.Company Number
    LCL.Company_Number = DB1.Company_Number;

    // LCL.Order Number = DB1.Order Number
    LCL.Order_Number = DB1.Order_Number;

    ENDIF;

    //?USER: Exit processing

    CASE;

    // IF LCL.LFC Amount is Entered
    IF LCL.LFC_Amount <> *ZERO;

    //?Adjust difference on last Order
    CASE;

    // IF PAR.LFC Act Frt Include Sts is Yes
    IF PAR.LFC_Act_Frt_Include_Sts = 'Y';

    // LCL.Freight Reference Amount = LCL.Freight Reference Amount + LCL.LFC Amount
    LCL.Act_Frt_Reference_Amount = LCL.Act_Frt_Reference_Amount + LCL.LFC_Amount;

    EXECUTE FUNCTION(Chg Ord ActFrt RefAmt CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC1878867;
    PARAMETER(LCL.Company_Number);
    PARAMETER(LCL.Order_Number);
    PARAMETER(LCL.Act_Frt_Reference_Amount);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

    CASE;

    // IF PAR.LFC Tot Freight Inc Sts is Yes
    IF PAR.LFC_Tot_Freight_Inc_Sts = 'Y';

    // LCL.OH Total Ref Frt Amt = LCL.OH Total Ref Frt Amt + LCL.LFC Amount
    LCL.OH_Total_Ref_Frt_Amt = LCL.OH_Total_Ref_Frt_Amt + LCL.LFC_Amount;

    EXECUTE FUNCTION(Chg Ord TotFrt RefAmt CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC1894713;
    PARAMETER(LCL.Company_Number);
    PARAMETER(LCL.Order_Number);
    PARAMETER(LCL.OH_Total_Ref_Frt_Amt);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

    ENDIF;

   }

   //?UPD: Order Freight Reference Amount
   // IF PAR.CR Reference Code is Drop Number
   IF PAR.CR_Reference_Code = 'DROP';

   //?CVT: Drop
   CASE;

   // IF PAR.LFCR Value Type is Numeric Value Type
   IF PAR.LFCR_Value_Type = 'N';

   // LCL.Stop/Drop = PAR.LFCR Numeric Value
   LCL.Stop_Drop = PAR.LFCR_Numeric_Value;

   //?CVT: Drop
   // IF PAR.LFCR Value Type is Alpha Value Type
   IF PAR.LFCR_Value_Type = 'A';

   // LCL.USR Work Field 5A     USR = PAR.LFCR Alpha Value
   LCL.USR_Work_Field_5A_USR = PAR.LFCR_Alpha_Value;

   // LCL.Stop/Drop = CVTVAR(LCL.USR Work Field 5A     USR)
   LCL.Stop_Drop = CVTVAR(LCL.USR_Work_Field_5A_USR);

   ENDIF;

   EXECUTE FUNCTION(Rtv Ld/ShipTo  OrdWgt RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC2047376;
   PARAMETER(DB1.Load_ID);
   PARAMETER(LCL.Stop_Drop);
   PARAMETER(PAR.Total_Weight_Work);
   {
    //?USER: Initialize routine

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    EXECUTE FUNCTION(Rtv Ld/Order   OrdWgt RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2047377;
    PARAMETER(DB1.Load_ID);
    PARAMETER(DB1.Order_Number);
    PARAMETER(LCL.Order_Weight_Total);
    {
     //?USER: Process Data record

     // PAR.Order Weight Total = DB1.Order Weight Total
     PAR.Order_Weight_Total = DB1.Order_Weight_Total;

    }

    // PAR.Total Weight Work = PAR.Total Weight Work + LCL.Order Weight Total
    PAR.Total_Weight_Work = PAR.Total_Weight_Work + LCL.Order_Weight_Total;

   }

   EXECUTE FUNCTION(Upd Ld/ShipTo  RefAmt RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC2047379;
   PARAMETER(DB1.Load_ID);
   PARAMETER(LCL.Stop_Drop);
   PARAMETER(PAR.Total_Weight_Work);
   PARAMETER(DB1.LFC_Amount);
   PARAMETER(DB1.LFC_Act_Frt_Include_Sts);
   PARAMETER(DB1.LFC_Tot_Freight_Inc_Sts);
   {
    //?USER: Initialize routine

    // LCL.LFC Amount = PAR.LFC Amount
    LCL.LFC_Amount = PAR.LFC_Amount;

    //?* CALC: Freight Rate Per Pound
    CASE;

    // IF PAR.Total Weight Work is Not Zeros
    IF PAR.Total_Weight_Work <> *ZERO;

    // LCL.Freight Rate USR = PAR.LFC Amount / PAR.Total Weight Work *Rounded
    LCL.Freight_Rate_USR = PAR.LFC_Amount / PAR.Total_Weight_Work 'H';

    ENDIF;

    //?USER: Process Data record

    //?* CALC: Freight Amount for Order
    EXECUTE FUNCTION(RTV Order Weight       RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1292006;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(LCL.Order_Weight_Total);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    // LCL.Freight Amount = LCL.Freight Rate USR * LCL.Order Weight Total *
    LCL.Freight_Amount = LCL.Freight_Rate_USR * LCL.Order_Weight_Total;

    EXECUTE FUNCTION(Upd Ld/Order   RefAmt RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2047378;
    PARAMETER(DB1.Load_ID);
    PARAMETER(DB1.Order_Number);
    PARAMETER(LCL.Freight_Amount);
    PARAMETER(PAR.LFC_Act_Frt_Include_Sts);
    PARAMETER(PAR.LFC_Tot_Freight_Inc_Sts);
    {
     //?USER: Process Data record

     //?UPD: Actual Freight Reference Amount
     CASE;

     // IF PAR.LFC Act Frt Include Sts is Yes
     IF PAR.LFC_Act_Frt_Include_Sts = 'Y';

     //?* ADD: Add to the current value of Reference Amount
     // LCL.Act Frt Reference Amount = DB1.Act Frt Reference Amount + PAR.Freight Amount
     LCL.Act_Frt_Reference_Amount = DB1.Act_Frt_Reference_Amount + PAR.Freight_Amount;

     //?* UPD: Update with New Reference Amount
     EXECUTE FUNCTION(Chg Ord ActFrt RefAmt CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC1878867;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(LCL.Act_Frt_Reference_Amount);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
      PARAMETER(DB1.Job_Time);
      PARAMETER(DB1.User_Id);
      PARAMETER(DB1.Job_Name);
      PARAMETER(DB1.Job_Date);
      {
       //?Execute internal function

       // PAR.Job Time = JOB.*Job time
       PAR.Job_Time = JOB.*Job_time;

       // PAR.User Id = JOB.*USER
       PAR.User_Id = JOB.*USER;

       // PAR.Job Name = JOB.*PROGRAM
       PAR.Job_Name = JOB.*PROGRAM;

       // PAR.Job Date = JOB.*Job date
       PAR.Job_Date = JOB.*Job_date;

      }

     }

     ENDIF;

     //?UPD: Total Freight Reference Amount
     CASE;

     // IF PAR.LFC Tot Freight Inc Sts is Yes
     IF PAR.LFC_Tot_Freight_Inc_Sts = 'Y';

     //?* ADD: Add to the current value of Reference Amount
     // LCL.OH Total Ref Frt Amt = DB1.OH Total Ref Frt Amt + PAR.Freight Amount
     LCL.OH_Total_Ref_Frt_Amt = DB1.OH_Total_Ref_Frt_Amt + PAR.Freight_Amount;

     //?* UPD: Update with New Reference Amount
     EXECUTE FUNCTION(Chg Ord TotFrt RefAmt CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC1894713;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(LCL.OH_Total_Ref_Frt_Amt);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
      PARAMETER(DB1.Job_Time);
      PARAMETER(DB1.User_Id);
      PARAMETER(DB1.Job_Name);
      PARAMETER(DB1.Job_Date);
      {
       //?Execute internal function

       // PAR.Job Time = JOB.*Job time
       PAR.Job_Time = JOB.*Job_time;

       // PAR.User Id = JOB.*USER
       PAR.User_Id = JOB.*USER;

       // PAR.Job Name = JOB.*PROGRAM
       PAR.Job_Name = JOB.*PROGRAM;

       // PAR.Job Date = JOB.*Job date
       PAR.Job_Date = JOB.*Job_date;

      }

     }

     ENDIF;

    }

    //?* CALC: Remaining Amount to Allocate
    // LCL.LFC Amount = LCL.LFC Amount - LCL.Freight Amount
    LCL.LFC_Amount = LCL.LFC_Amount - LCL.Freight_Amount;

    //?USER: Exit processing

    CASE;

    // IF LCL.LFC Amount is Entered
    IF LCL.LFC_Amount <> *ZERO;

    //?Adjust difference on last Order
    EXECUTE FUNCTION(Upd Ld/Order   RefAmt RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2047378;
    PARAMETER(DB1.Load_ID);
    PARAMETER(DB1.Order_Number);
    PARAMETER(LCL.LFC_Amount);
    PARAMETER(PAR.LFC_Act_Frt_Include_Sts);
    PARAMETER(PAR.LFC_Tot_Freight_Inc_Sts);
    {
     //?USER: Process Data record

     //?UPD: Actual Freight Reference Amount
     CASE;

     // IF PAR.LFC Act Frt Include Sts is Yes
     IF PAR.LFC_Act_Frt_Include_Sts = 'Y';

     //?* ADD: Add to the current value of Reference Amount
     // LCL.Act Frt Reference Amount = DB1.Act Frt Reference Amount + PAR.Freight Amount
     LCL.Act_Frt_Reference_Amount = DB1.Act_Frt_Reference_Amount + PAR.Freight_Amount;

     //?* UPD: Update with New Reference Amount
     EXECUTE FUNCTION(Chg Ord ActFrt RefAmt CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC1878867;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(LCL.Act_Frt_Reference_Amount);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
      PARAMETER(DB1.Job_Time);
      PARAMETER(DB1.User_Id);
      PARAMETER(DB1.Job_Name);
      PARAMETER(DB1.Job_Date);
      {
       //?Execute internal function

       // PAR.Job Time = JOB.*Job time
       PAR.Job_Time = JOB.*Job_time;

       // PAR.User Id = JOB.*USER
       PAR.User_Id = JOB.*USER;

       // PAR.Job Name = JOB.*PROGRAM
       PAR.Job_Name = JOB.*PROGRAM;

       // PAR.Job Date = JOB.*Job date
       PAR.Job_Date = JOB.*Job_date;

      }

     }

     ENDIF;

     //?UPD: Total Freight Reference Amount
     CASE;

     // IF PAR.LFC Tot Freight Inc Sts is Yes
     IF PAR.LFC_Tot_Freight_Inc_Sts = 'Y';

     //?* ADD: Add to the current value of Reference Amount
     // LCL.OH Total Ref Frt Amt = DB1.OH Total Ref Frt Amt + PAR.Freight Amount
     LCL.OH_Total_Ref_Frt_Amt = DB1.OH_Total_Ref_Frt_Amt + PAR.Freight_Amount;

     //?* UPD: Update with New Reference Amount
     EXECUTE FUNCTION(Chg Ord TotFrt RefAmt CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC1894713;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(LCL.OH_Total_Ref_Frt_Amt);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
      PARAMETER(DB1.Job_Time);
      PARAMETER(DB1.User_Id);
      PARAMETER(DB1.Job_Name);
      PARAMETER(DB1.Job_Date);
      {
       //?Execute internal function

       // PAR.Job Time = JOB.*Job time
       PAR.Job_Time = JOB.*Job_time;

       // PAR.User Id = JOB.*USER
       PAR.User_Id = JOB.*USER;

       // PAR.Job Name = JOB.*PROGRAM
       PAR.Job_Name = JOB.*PROGRAM;

       // PAR.Job Date = JOB.*Job date
       PAR.Job_Date = JOB.*Job_date;

      }

     }

     ENDIF;

    }

    ENDIF;

   }

   ENDIF;

   // PAR.Total Amount = PAR.Total Amount + DB1.LFC Amount
   PAR.Total_Amount = PAR.Total_Amount + DB1.LFC_Amount;

   CASE;

   // IF DB1.LFC Act Frt Include Sts is Yes
   IF DB1.LFC_Act_Frt_Include_Sts = 'Y';

   // PAR.Act Frt Ref Amt USR = PAR.Act Frt Ref Amt USR + DB1.LFC Amount
   PAR.Act_Frt_Ref_Amt_USR = PAR.Act_Frt_Ref_Amt_USR + DB1.LFC_Amount;

   ENDIF;

   CASE;

   // IF DB1.LFC Tot Freight Inc Sts is Yes
   IF DB1.LFC_Tot_Freight_Inc_Sts = 'Y';

   // PAR.Tot Frt Ref Amt USR = PAR.Tot Frt Ref Amt USR + DB1.LFC Amount
   PAR.Tot_Frt_Ref_Amt_USR = PAR.Tot_Frt_Ref_Amt_USR + DB1.LFC_Amount;

   ENDIF;

   ENDIF;

   ENDIF;

  }

 }

 // WRK.Bal Act Freight Amt USR = LCL.Total Freight USR - LCL.Act Frt Ref Amt USR
 WRK.Bal_Act_Freight_Amt_USR = LCL.Total_Freight_USR - LCL.Act_Frt_Ref_Amt_USR;

 // LCL.Bal Load Total Frt USR = LCL.Load Total Freight - LCL.Tot Frt Ref Amt USR
 LCL.Bal_Load_Total_Frt_USR = LCL.Load_Total_Freight - LCL.Tot_Frt_Ref_Amt_USR;

 //?** Determine the allocation % to use to distribute balance of freight
 //?** Calculate Total Pound Miles for this load
 //?R8827 JJH 01/23/17 - Calc Load Frt Chrg with Special Type=E
 EXECUTE FUNCTION(Upd Ref Act Frt Even  IF) TYPE(EXCINTFUN)                      AC2131413;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.LFC_Spc_TypE_Amt_USR);
 {
  //?Execute internal function

  //?Calc the Total Amount of LFC Charge Amt with Special Type = E
  EXECUTE FUNCTION(Rtv Ref Act Frt Even  RT) TYPE(RTVOBJ) FILE(POBCCPP)           AC2131414;
  PARAMETER(PAR.Load_ID);
  PARAMETER(LCL.LFC_Spc_TypE_Amt_USR);
  {
   //?USER: Initialize routine

   // LCL.LFC Spc Typ=E Amt USR = CON.*ZERO
   LCL.LFC_Spc_TypE_Amt_USR = *ZERO;

   //?USER: Processing if Data record not found

   // PAR.LFC Spc Typ=E Amt USR = CON.*ZERO
   PAR.LFC_Spc_TypE_Amt_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF DB1.LFC Special Type is Evenly by Stop
   IF DB1.LFC_Special_Type = 'E';

   // LCL.LFC Spc Typ=E Amt USR = LCL.LFC Spc Typ=E Amt USR + DB1.LFC Amount
   LCL.LFC_Spc_TypE_Amt_USR = LCL.LFC_Spc_TypE_Amt_USR + DB1.LFC_Amount;

   ENDIF;

   //?USER: Exit processing

   // PAR.LFC Spc Typ=E Amt USR = LCL.LFC Spc Typ=E Amt USR
   PAR.LFC_Spc_TypE_Amt_USR = LCL.LFC_Spc_TypE_Amt_USR;

  }

  // PAR.LFC Spc Typ=E Amt USR = LCL.LFC Spc Typ=E Amt USR
  PAR.LFC_Spc_TypE_Amt_USR = LCL.LFC_Spc_TypE_Amt_USR;

  CASE;

  // IF LCL.LFC Spc Typ=E Amt USR is Not Entered
  IF LCL.LFC_Spc_TypE_Amt_USR = *ZERO;

  //?No action if there are no Load Freight Charge Special Type=E
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Get Total Stops from Load Header
  EXECUTE FUNCTION(Rtv Total Stops       RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC2131343;
  PARAMETER(PAR.Load_ID);
  PARAMETER(LCL.Total_Stops);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Calc LFC Special Type=E Amt to be applied to each Stop
  // LCL.LFC Spc Typ=E Amt Stp USR = LCL.LFC Spc Typ=E Amt USR / LCL.Total Stops LFC Spc Typ=E Amt R
  LCL.LFC_Spc_TypE_Amt_Stp_USR = LCL.LFC_Spc_TypE_Amt_USR / LCL.Total_Stops ,REMAINDER:
  LCL.LFC_Spc_TypE_Amt_Rem_USR;

  //?Add Remaining cents so that it will be applied to the First Stop
  // LCL.LFC Spc Typ=E Amt Stp1USR = LCL.LFC Spc Typ=E Amt Stp USR + LCL.LFC Spc Typ=E Amt Rem USR
  LCL.LFC_Spc_TypE_Amt_Stp1USR = LCL.LFC_Spc_TypE_Amt_Stp_USR
  + LCL.LFC_Spc_TypE_Amt_Rem_USR;

  //?Calc and update LFC Special Type=E Amt to be applied to each Order
  EXECUTE FUNCTION(Upd Ref Act Frt Even  RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC2131448;
  PARAMETER(PAR.Load_ID);
  PARAMETER(LCL.LFC_Spc_TypE_Amt_Stp_USR);
  PARAMETER(LCL.LFC_Spc_TypE_Amt_Stp1USR);
  {
   //?USER: Initialize routine

   // LCL.First Stop USR = CND.Yes
   LCL.First_Stop_USR = 'Y';

   // LCL.Stop/Drop = CON.*ZERO
   LCL.Stop_Drop = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF DB1.Stop/Drop NE LCL.Stop/Drop
   IF DB1.Stop_Drop <> LCL.Stop_Drop;

   //?Determine how many orders are on Load/Stop
   EXECUTE FUNCTION(Rtv Ref Act Frt EvenCtRT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC2131464;
   PARAMETER(PAR.Load_ID);
   PARAMETER(DB1.Stop_Drop);
   PARAMETER(LCL.Load_Stop_Ord_Cnt_USR);
   {
    //?USER: Initialize routine

    // LCL.Load/Stop Ord Cnt USR = CON.*ZERO
    LCL.Load_Stop_Ord_Cnt_USR = *ZERO;

    //?USER: Process Data record

    // LCL.Load/Stop Ord Cnt USR = LCL.Load/Stop Ord Cnt USR + CON.1
    LCL.Load_Stop_Ord_Cnt_USR = LCL.Load_Stop_Ord_Cnt_USR + 1;

    //?USER: Exit processing

    // PAR.Load/Stop Ord Cnt USR = LCL.Load/Stop Ord Cnt USR
    PAR.Load_Stop_Ord_Cnt_USR = LCL.Load_Stop_Ord_Cnt_USR;

   }

   //?Reset LCL Fields to ZERO for the Next Stop
   // LCL.LFC Spc Typ=E Amt Ord USR = CON.*ZERO
   LCL.LFC_Spc_TypE_Amt_Ord_USR = *ZERO;

   // LCL.LFC Spc Typ=E Amt Ord1USR = CON.*ZERO
   LCL.LFC_Spc_TypE_Amt_Ord1USR = *ZERO;

   //?Calc LFC Freight Charge Special Type=E to be applied to each Order
   CASE;

   // IF LCL.First Stop USR is Yes
   IF LCL.First_Stop_USR = 'Y';

   // LCL.First Stop USR = CND.No
   LCL.First_Stop_USR = 'N';

   CASE;

   // IF LCL.Load/Stop Ord Cnt USR is EQ 1
   IF LCL.Load_Stop_Ord_Cnt_USR = 1;

   // LCL.LFC Spc Typ=E Amt Ord1USR = PAR.LFC Spc Typ=E Amt Stp1USR
   LCL.LFC_Spc_TypE_Amt_Ord1USR = PAR.LFC_Spc_TypE_Amt_Stp1USR;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.LFC Spc Typ=E Amt Ord USR = PAR.LFC Spc Typ=E Amt Stp1USR / LCL.Load/Stop Ord Cnt USR LFC
   LCL.LFC_Spc_TypE_Amt_Ord_USR = PAR.LFC_Spc_TypE_Amt_Stp1USR /
   LCL.Load_Stop_Ord_Cnt_USR ,REMAINDER: LCL.LFC_Spc_TypE_Amt_Rem1USR;

   // LCL.LFC Spc Typ=E Amt Ord1USR = LCL.LFC Spc Typ=E Amt Ord USR + LCL.LFC Spc Typ=E Amt Rem1USR
   LCL.LFC_Spc_TypE_Amt_Ord1USR = LCL.LFC_Spc_TypE_Amt_Ord_USR
   + LCL.LFC_Spc_TypE_Amt_Rem1USR;

   ENDIF;

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF LCL.Load/Stop Ord Cnt USR is EQ 1
   IF LCL.Load_Stop_Ord_Cnt_USR = 1;

   // LCL.LFC Spc Typ=E Amt Ord1USR = PAR.LFC Spc Typ=E Amt Stp USR
   LCL.LFC_Spc_TypE_Amt_Ord1USR = PAR.LFC_Spc_TypE_Amt_Stp_USR;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.LFC Spc Typ=E Amt Ord USR = PAR.LFC Spc Typ=E Amt Stp USR / LCL.Load/Stop Ord Cnt USR LFC
   LCL.LFC_Spc_TypE_Amt_Ord_USR = PAR.LFC_Spc_TypE_Amt_Stp_USR /
   LCL.Load_Stop_Ord_Cnt_USR ,REMAINDER: LCL.LFC_Spc_TypE_Amt_Rem_USR;

   // LCL.LFC Spc Typ=E Amt Ord1USR = LCL.LFC Spc Typ=E Amt Ord USR + LCL.LFC Spc Typ=E Amt Rem USR
   LCL.LFC_Spc_TypE_Amt_Ord1USR = LCL.LFC_Spc_TypE_Amt_Ord_USR
   + LCL.LFC_Spc_TypE_Amt_Rem_USR;

   ENDIF;

   ENDIF;

   //?Upd OHT - Act Frt Reference Amount & OH Total Ref Frt Amt
   EXECUTE FUNCTION(Upd Ref Act Frt EvenOHRT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC2131511;
   PARAMETER(DB1.Load_ID);
   PARAMETER(DB1.Stop_Drop);
   PARAMETER(LCL.LFC_Spc_TypE_Amt_Ord_USR);
   PARAMETER(LCL.LFC_Spc_TypE_Amt_Ord1USR);
   {
    //?USER: Initialize routine

    // LCL.First Order USR = CND.Yes
    LCL.First_Order_USR = 'Y';

    //?USER: Process Data record

    CASE;

    // IF LCL.First Order USR is Yes
    IF LCL.First_Order_USR = 'Y';

    // LCL.First Order USR = CND.No
    LCL.First_Order_USR = 'N';

    EXECUTE FUNCTION(Upd Ref Act Frt EvenOHRT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2131553;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(PAR.LFC_Spc_TypE_Amt_Ord1USR);
    PARAMETER(PAR.LFC_Spc_TypE_Amt_Ord1USR);
    {
     //?USER: Process Data record

     // LCL.Act Frt Reference Amount = DB1.Act Frt Reference Amount + PAR.Act Frt Reference Amount
     LCL.Act_Frt_Reference_Amount = DB1.Act_Frt_Reference_Amount
     + PAR.Act_Frt_Reference_Amount;

     // LCL.OH Total Ref Frt Amt = DB1.OH Total Ref Frt Amt + PAR.OH Total Ref Frt Amt
     LCL.OH_Total_Ref_Frt_Amt = DB1.OH_Total_Ref_Frt_Amt + PAR.OH_Total_Ref_Frt_Amt;

     EXECUTE FUNCTION(Chg Act/Tot Frt Ref   CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC2131554;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(LCL.Act_Frt_Reference_Amount);
     PARAMETER(LCL.OH_Total_Ref_Frt_Amt);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
      PARAMETER(DB1.Job_Time);
      PARAMETER(DB1.User_Id);
      PARAMETER(DB1.Job_Name);
      PARAMETER(DB1.Job_Date);
      {
       //?Execute internal function

       // PAR.Job Time = JOB.*Job time
       PAR.Job_Time = JOB.*Job_time;

       // PAR.User Id = JOB.*USER
       PAR.User_Id = JOB.*USER;

       // PAR.Job Name = JOB.*PROGRAM
       PAR.Job_Name = JOB.*PROGRAM;

       // PAR.Job Date = JOB.*Job date
       PAR.Job_Date = JOB.*Job_date;

      }

      // Call program TRG Order Hdr CHG Trig XT.
      CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
      PARAMETER(DB1.Company_Number);
      PARAMETER(DB1.Order_Number);
      PARAMETER(DB1.Order_Type_Sales);
      PARAMETER(DB1.AR_Customer_Number);
      PARAMETER(DB1.Ship_To_Customer);
      PARAMETER(DB1.Ship_To_Name);
      PARAMETER(DB1.Ship_To_Address_Line_1);
      PARAMETER(DB1.Ship_To_Address_Line_2);
      PARAMETER(DB1.Ship_To_Address_Line_3);
      PARAMETER(DB1.Ship_To_City);
      PARAMETER(DB1.Ship_To_State_Code);
      PARAMETER(DB1.Ship_To_Zip_Postal_Code);
      PARAMETER(DB1.Bill_to_Customer);
      PARAMETER(DB1.Bill_to_Name);
      PARAMETER(DB1.Bill_to_Address_Line_1);
      PARAMETER(DB1.Bill_to_Address_Line_2);
      PARAMETER(DB1.Bill_to_Address_Line_3);
      PARAMETER(DB1.Bill_to_City);
      PARAMETER(DB1.Bill_to_State_Code);
      PARAMETER(DB1.Bill_to_Zip_Postal_Code);
      PARAMETER(DB1.Customer_Purchase_Order_#);
      PARAMETER(DB1.Order_Date);
      PARAMETER(DB1.Requested_Ship_Date);
      PARAMETER(DB1.Actual_Shipped_Date);
      PARAMETER(DB1.Cancel_Date);
      PARAMETER(DB1.Terms_Code);
      PARAMETER(DB1.Special_Instructions);
      PARAMETER(DB1.Special_Instructions_2);
      PARAMETER(DB1.Carrier_Code);
      PARAMETER(DB1.Comment_Print_Acknowledge);
      PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
      PARAMETER(DB1.Comment_Print_Pick_Slip);
      PARAMETER(DB1.Comment_Print_Ship_Doc);
      PARAMETER(DB1.Reason_Code);
      PARAMETER(DB1.Order_in_Use);
      PARAMETER(DB1.Header_Status);
      PARAMETER(DB1.Header_Status_Last);
      PARAMETER(DB1.Order_Type_Print_Status);
      PARAMETER(DB1.Scheduled_Ship_Date);
      PARAMETER(DB1.User_Original_Entry);
      PARAMETER(DB1.Date_of_Original_Entry);
      PARAMETER(DB1.Order_Value_Total);
      PARAMETER(DB1.Order_Weight_Total);
      PARAMETER(DB1.Credit_Hold);
      PARAMETER(DB1.Production_Hold);
      PARAMETER(DB1.New_Customer_Hold);
      PARAMETER(DB1.Requested_Delivery_Date);
      PARAMETER(DB1.Requested_Delivery_Time);
      PARAMETER(DB1.Accounts_Receiv_Ent_1);
      PARAMETER(DB1.Accounts_Receiv_Ent_2);
      PARAMETER(DB1.Load_ID);
      PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
      PARAMETER(DB1.Rated_Freight);
      PARAMETER(DB1.LTL_Flag);
      PARAMETER(DB1.Price_Audit);
      PARAMETER(DB1.Price_Status);
      PARAMETER(DB1.Shipping_Method);
      PARAMETER(DB1.Export_Status);
      PARAMETER(DB1.Palletize);
      PARAMETER(DB1.Shrink_Wrap);
      PARAMETER(DB1.Slip_Sheet);
      PARAMETER(DB1.Age_Code);
      PARAMETER(DB1.Reefer_Temperature);
      PARAMETER(DB1.Load_Type);
      PARAMETER(DB1.Attach_to_Invoice_Number);
      PARAMETER(DB1.Load_Plan_Order);
      PARAMETER(DB1.Print_Pick_Slip);
      PARAMETER(DB1.Resell_Reference_Number);
      PARAMETER(DB1.Special_Comment_1);
      PARAMETER(DB1.Special_Comment_2);
      PARAMETER(DB1.Affect_Auto_Accruals);
      PARAMETER(DB1.Sales_Route_Code);
      PARAMETER(DB1.Manager_Level_Code);
      PARAMETER(DB1.VP_Level_Code);
      PARAMETER(DB1.Attach_to_Order_Number);
      PARAMETER(DB1.Reason_for_Price_Audit);
      PARAMETER(DB1.Invoice_Number);
      PARAMETER(DB1.Invoice_Suffix);
      PARAMETER(DB1.Invoice_Date);
      PARAMETER(DB1.Event_Code);
      PARAMETER(DB1.Trans_Contol_AS400_Plant);
      PARAMETER(DB1.Modified_Flag);
      PARAMETER(DB1.A_R_order_Value_Total);
      PARAMETER(DB1.Billing_Activity_Type);
      PARAMETER(DB1.Block_Order_Flag);
      PARAMETER(DB1.Order_Certification_Flag);
      PARAMETER(DB1.Invoice_Order_Value_Tot);
      PARAMETER(DB1.Process_Sts_for_3C);
      PARAMETER(DB1.Order_Conf_Fax_Sts);
      PARAMETER(DB1.Manifest_Fax_Sts);
      PARAMETER(DB1.Invoice_Fax_Sts);
      PARAMETER(DB1.Transfer_in_Storage_Ind);
      PARAMETER(DB1.Email_Cust_On_Order_Ship);
      PARAMETER(DB1.Order_Emailed);
      PARAMETER(DB1.Export_Docs_Go_w_Driver);
      PARAMETER(DB1.Shipping_Temp_Code_C_F);
      PARAMETER(DB1.Broker_Order_Status);
      PARAMETER(DB1.Air_Freight_Order);
      PARAMETER(DB1.Order_Requires_Review);
      PARAMETER(DB1.OH_Load_Plan_Ready);
      PARAMETER(DB1.Export_USDA_Approved);
      PARAMETER(DB1.HPB_Ship_to_Warehouse);
      PARAMETER(DB1.OH_TF_Exempt_Code);
      PARAMETER(DB1.OH_Appt_Confirmation_Dt);
      PARAMETER(DB1.JPN_Invoice_Issuance_Date);
      PARAMETER(DB1.Load_Actual_Shipped_Date);
      PARAMETER(DB1.Load_BOL_Complete_Date);
      PARAMETER(DB1.Load_Truck_Departure_Date);
      PARAMETER(DB1.Maximum_Gross_Weight);
      PARAMETER(DB1.Time_of_Original_Entry);
      PARAMETER(DB1.OH_Appt_Confirmation_Tm);
      PARAMETER(DB1.Load_BOL_Complete_Time);
      PARAMETER(DB1.Load_Truck_Departure_Time);
      PARAMETER(DB1.Act_Frt_Reference_Amount);
      PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
      PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
      PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
      PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
      PARAMETER(DB1.Claim_Number);
      PARAMETER(DB1.EDI_Status_1);
      PARAMETER(DB1.EDI_Status_2);
      PARAMETER(DB1.EDI_Status_3);
      PARAMETER(DB1.Job_Time);
      PARAMETER(DB1.User_Id);
      PARAMETER(DB1.Job_Name);
      PARAMETER(DB1.Job_Date);

     }

    }

    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(Upd Ref Act Frt EvenOHRT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2131553;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(PAR.LFC_Spc_TypE_Amt_Ord_USR);
    PARAMETER(PAR.LFC_Spc_TypE_Amt_Ord_USR);
    {
     //?USER: Process Data record

     // LCL.Act Frt Reference Amount = DB1.Act Frt Reference Amount + PAR.Act Frt Reference Amount
     LCL.Act_Frt_Reference_Amount = DB1.Act_Frt_Reference_Amount
     + PAR.Act_Frt_Reference_Amount;

     // LCL.OH Total Ref Frt Amt = DB1.OH Total Ref Frt Amt + PAR.OH Total Ref Frt Amt
     LCL.OH_Total_Ref_Frt_Amt = DB1.OH_Total_Ref_Frt_Amt + PAR.OH_Total_Ref_Frt_Amt;

     EXECUTE FUNCTION(Chg Act/Tot Frt Ref   CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC2131554;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(LCL.Act_Frt_Reference_Amount);
     PARAMETER(LCL.OH_Total_Ref_Frt_Amt);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
      PARAMETER(DB1.Job_Time);
      PARAMETER(DB1.User_Id);
      PARAMETER(DB1.Job_Name);
      PARAMETER(DB1.Job_Date);
      {
       //?Execute internal function

       // PAR.Job Time = JOB.*Job time
       PAR.Job_Time = JOB.*Job_time;

       // PAR.User Id = JOB.*USER
       PAR.User_Id = JOB.*USER;

       // PAR.Job Name = JOB.*PROGRAM
       PAR.Job_Name = JOB.*PROGRAM;

       // PAR.Job Date = JOB.*Job date
       PAR.Job_Date = JOB.*Job_date;

      }

      // Call program TRG Order Hdr CHG Trig XT.
      CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
      PARAMETER(DB1.Company_Number);
      PARAMETER(DB1.Order_Number);
      PARAMETER(DB1.Order_Type_Sales);
      PARAMETER(DB1.AR_Customer_Number);
      PARAMETER(DB1.Ship_To_Customer);
      PARAMETER(DB1.Ship_To_Name);
      PARAMETER(DB1.Ship_To_Address_Line_1);
      PARAMETER(DB1.Ship_To_Address_Line_2);
      PARAMETER(DB1.Ship_To_Address_Line_3);
      PARAMETER(DB1.Ship_To_City);
      PARAMETER(DB1.Ship_To_State_Code);
      PARAMETER(DB1.Ship_To_Zip_Postal_Code);
      PARAMETER(DB1.Bill_to_Customer);
      PARAMETER(DB1.Bill_to_Name);
      PARAMETER(DB1.Bill_to_Address_Line_1);
      PARAMETER(DB1.Bill_to_Address_Line_2);
      PARAMETER(DB1.Bill_to_Address_Line_3);
      PARAMETER(DB1.Bill_to_City);
      PARAMETER(DB1.Bill_to_State_Code);
      PARAMETER(DB1.Bill_to_Zip_Postal_Code);
      PARAMETER(DB1.Customer_Purchase_Order_#);
      PARAMETER(DB1.Order_Date);
      PARAMETER(DB1.Requested_Ship_Date);
      PARAMETER(DB1.Actual_Shipped_Date);
      PARAMETER(DB1.Cancel_Date);
      PARAMETER(DB1.Terms_Code);
      PARAMETER(DB1.Special_Instructions);
      PARAMETER(DB1.Special_Instructions_2);
      PARAMETER(DB1.Carrier_Code);
      PARAMETER(DB1.Comment_Print_Acknowledge);
      PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
      PARAMETER(DB1.Comment_Print_Pick_Slip);
      PARAMETER(DB1.Comment_Print_Ship_Doc);
      PARAMETER(DB1.Reason_Code);
      PARAMETER(DB1.Order_in_Use);
      PARAMETER(DB1.Header_Status);
      PARAMETER(DB1.Header_Status_Last);
      PARAMETER(DB1.Order_Type_Print_Status);
      PARAMETER(DB1.Scheduled_Ship_Date);
      PARAMETER(DB1.User_Original_Entry);
      PARAMETER(DB1.Date_of_Original_Entry);
      PARAMETER(DB1.Order_Value_Total);
      PARAMETER(DB1.Order_Weight_Total);
      PARAMETER(DB1.Credit_Hold);
      PARAMETER(DB1.Production_Hold);
      PARAMETER(DB1.New_Customer_Hold);
      PARAMETER(DB1.Requested_Delivery_Date);
      PARAMETER(DB1.Requested_Delivery_Time);
      PARAMETER(DB1.Accounts_Receiv_Ent_1);
      PARAMETER(DB1.Accounts_Receiv_Ent_2);
      PARAMETER(DB1.Load_ID);
      PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
      PARAMETER(DB1.Rated_Freight);
      PARAMETER(DB1.LTL_Flag);
      PARAMETER(DB1.Price_Audit);
      PARAMETER(DB1.Price_Status);
      PARAMETER(DB1.Shipping_Method);
      PARAMETER(DB1.Export_Status);
      PARAMETER(DB1.Palletize);
      PARAMETER(DB1.Shrink_Wrap);
      PARAMETER(DB1.Slip_Sheet);
      PARAMETER(DB1.Age_Code);
      PARAMETER(DB1.Reefer_Temperature);
      PARAMETER(DB1.Load_Type);
      PARAMETER(DB1.Attach_to_Invoice_Number);
      PARAMETER(DB1.Load_Plan_Order);
      PARAMETER(DB1.Print_Pick_Slip);
      PARAMETER(DB1.Resell_Reference_Number);
      PARAMETER(DB1.Special_Comment_1);
      PARAMETER(DB1.Special_Comment_2);
      PARAMETER(DB1.Affect_Auto_Accruals);
      PARAMETER(DB1.Sales_Route_Code);
      PARAMETER(DB1.Manager_Level_Code);
      PARAMETER(DB1.VP_Level_Code);
      PARAMETER(DB1.Attach_to_Order_Number);
      PARAMETER(DB1.Reason_for_Price_Audit);
      PARAMETER(DB1.Invoice_Number);
      PARAMETER(DB1.Invoice_Suffix);
      PARAMETER(DB1.Invoice_Date);
      PARAMETER(DB1.Event_Code);
      PARAMETER(DB1.Trans_Contol_AS400_Plant);
      PARAMETER(DB1.Modified_Flag);
      PARAMETER(DB1.A_R_order_Value_Total);
      PARAMETER(DB1.Billing_Activity_Type);
      PARAMETER(DB1.Block_Order_Flag);
      PARAMETER(DB1.Order_Certification_Flag);
      PARAMETER(DB1.Invoice_Order_Value_Tot);
      PARAMETER(DB1.Process_Sts_for_3C);
      PARAMETER(DB1.Order_Conf_Fax_Sts);
      PARAMETER(DB1.Manifest_Fax_Sts);
      PARAMETER(DB1.Invoice_Fax_Sts);
      PARAMETER(DB1.Transfer_in_Storage_Ind);
      PARAMETER(DB1.Email_Cust_On_Order_Ship);
      PARAMETER(DB1.Order_Emailed);
      PARAMETER(DB1.Export_Docs_Go_w_Driver);
      PARAMETER(DB1.Shipping_Temp_Code_C_F);
      PARAMETER(DB1.Broker_Order_Status);
      PARAMETER(DB1.Air_Freight_Order);
      PARAMETER(DB1.Order_Requires_Review);
      PARAMETER(DB1.OH_Load_Plan_Ready);
      PARAMETER(DB1.Export_USDA_Approved);
      PARAMETER(DB1.HPB_Ship_to_Warehouse);
      PARAMETER(DB1.OH_TF_Exempt_Code);
      PARAMETER(DB1.OH_Appt_Confirmation_Dt);
      PARAMETER(DB1.JPN_Invoice_Issuance_Date);
      PARAMETER(DB1.Load_Actual_Shipped_Date);
      PARAMETER(DB1.Load_BOL_Complete_Date);
      PARAMETER(DB1.Load_Truck_Departure_Date);
      PARAMETER(DB1.Maximum_Gross_Weight);
      PARAMETER(DB1.Time_of_Original_Entry);
      PARAMETER(DB1.OH_Appt_Confirmation_Tm);
      PARAMETER(DB1.Load_BOL_Complete_Time);
      PARAMETER(DB1.Load_Truck_Departure_Time);
      PARAMETER(DB1.Act_Frt_Reference_Amount);
      PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
      PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
      PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
      PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
      PARAMETER(DB1.Claim_Number);
      PARAMETER(DB1.EDI_Status_1);
      PARAMETER(DB1.EDI_Status_2);
      PARAMETER(DB1.EDI_Status_3);
      PARAMETER(DB1.Job_Time);
      PARAMETER(DB1.User_Id);
      PARAMETER(DB1.Job_Name);
      PARAMETER(DB1.Job_Date);

     }

    }

    ENDIF;

   }

   //?Update LCL.Stop/Drop which is used to determine the next stop
   // LCL.Stop/Drop = DB1.Stop/Drop
   LCL.Stop_Drop = DB1.Stop_Drop;

   ENDIF;

  }

  ENDIF;

 }

 // WRK.Bal Act Freight Amt USR = WRK.Bal Act Freight Amt USR - LCL.LFC Spc Typ=E Amt USR
 WRK.Bal_Act_Freight_Amt_USR = WRK.Bal_Act_Freight_Amt_USR - LCL.LFC_Spc_TypE_Amt_USR;

 // LCL.Bal Load Total Frt USR = LCL.Bal Load Total Frt USR - LCL.LFC Spc Typ=E Amt USR
 LCL.Bal_Load_Total_Frt_USR = LCL.Bal_Load_Total_Frt_USR - LCL.LFC_Spc_TypE_Amt_USR;

 //?R8827 JJH 01/18/17 - Modify calculation of Incremental Miles USR
 EXECUTE FUNCTION(CLC Total Lbs-Miles    RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1787755;
 PARAMETER(PAR.Load_ID);
 PARAMETER(WRK.Lbs_Miles_USR);
 PARAMETER(WRK.Total_Lbs_Miles_USR);
 {
  //?USER: Initialize routine

  //?***** Change Log and Comments
  DO;

  //?R8827 JJH 01/18/17 - Correct Load Freight Allocation Calculation
  //?- Get MG Created Load from Load Header
  //?- Modify calculation of Incremental Miles.  If Mercury Gate created
  //?  use Miles to next stop from Load Detail, otherwise Increment miles.
  //?** Calculations to get the total pound miles used in next calc
  //?** 1. Retrieve the order weight from the order header
  //?** 2. If stop/drop is different, add Miles to Next to Incremental
  //?**    Miles
  //?**    (this will be zeros if there was no Miles Between Cities rec)
  //?** 3. Default Incremental Miles to 1 if it is zeros
  //?** 4. Multiply Order Weight by Incremental Miles to get pound-miles
  //?** 5. Add Lbs-Miles to total pound-miles (Total Lbs-Miles)
  //?** 6. Return Total Lbs-Miles for next part of calculations
  //?** 03/10/2008 LJB FP1271
  //?** After db calcs, if incremental miles is zeros, default to 1.
  ENDDO;

  // PAR.Lbs-Miles USR = CON.*ZERO
  PAR.Lbs_Miles_USR = *ZERO;

  // PAR.Total Lbs-Miles USR = CON.*ZERO
  PAR.Total_Lbs_Miles_USR = *ZERO;

  //?R8827 JJH 01/18/17 - Get MG Created Load from Load Header
  EXECUTE FUNCTION(RTV MG Created Load   RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC2124762;
  PARAMETER(PAR.Load_ID);
  PARAMETER(LCL.MG_Created_Load);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Order Weight       RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1292006;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Order_Weight_Total);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?R8827 JJH 01/18/17 - Modify calculation of Incremental Miles USR
  //?** Accumulate Incremental Miles when Stop/Drop changes
  CASE;

  // IF DB1.Stop/Drop NE PAR.Stop/Drop
  IF DB1.Stop_Drop <> PAR.Stop_Drop;

  CASE;

  // IF LCL.MG Created Load is Yes
  IF LCL.MG_Created_Load = 'Y';

  // PAR.Incremental Miles USR = DB1.Miles to next stop
  PAR.Incremental_Miles_USR = DB1.Miles_to_next_stop;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Incremental Miles USR = DB1.Miles to next stop + PAR.Incremental Miles USR
  PAR.Incremental_Miles_USR = DB1.Miles_to_next_stop + PAR.Incremental_Miles_USR;

  ENDIF;

  ENDIF;

  //?** Default Incremental Miles to 1 if it is zeros   3/10/08 FP1271
  CASE;

  // IF PAR.Incremental Miles USR is Zeros
  IF PAR.Incremental_Miles_USR = 0;

  // PAR.Incremental Miles USR = CON.1
  PAR.Incremental_Miles_USR = 1;

  ENDIF;

  // PAR.Lbs-Miles USR = PAR.Incremental Miles USR * PAR.Order Weight Total *Rounded
  PAR.Lbs_Miles_USR = PAR.Incremental_Miles_USR * PAR.Order_Weight_Total 'H';

  // PAR.Total Lbs-Miles USR = PAR.Lbs-Miles USR + PAR.Total Lbs-Miles USR
  PAR.Total_Lbs_Miles_USR = PAR.Lbs_Miles_USR + PAR.Total_Lbs_Miles_USR;

  ENDIF;

  // PAR.Stop/Drop = DB1.Stop/Drop
  PAR.Stop_Drop = DB1.Stop_Drop;

 }

 //?** Calculate the Order Allocation % and use to distribute freight
 //?** and update each order on the Order Header
 //?R8827 JJH 01/18/17 - Modify calculation of Incremental Miles USR
 EXECUTE FUNCTION(CLC UPD Order Alloc %  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1787756;
 PARAMETER(PAR.Load_ID);
 PARAMETER(WRK.Order_Allocation_USR);
 PARAMETER(WRK.Total_Lbs_Miles_USR);
 PARAMETER(WRK.Bal_Act_Freight_Amt_USR);
 PARAMETER(LCL.Bal_Load_Total_Frt_USR);
 {
  //?USER: Initialize routine

  //?***** Change Log and Comments
  DO;

  //?R8827 JJH 01/18/17 - Correct Load Freight Allocation Calculation
  //?- Get MG Created Load from Load Header
  //?- Modify calculation of Incremental Miles.  If Mercury Gate created
  //?  use Miles to next stop from Load Detail, otherwise Increment miles.
  //?** 3/10/08 LJB FP1271
  //?** If incremental miles is zeros, default to 1.
  //?** Calculations to get the order allocation % to use to
  //?** calculate the Allocated Freight Amount
  //?** 1. Retrieve the order weight from the order header
  //?** 2. If stop/drop is different, add Miles to Next to Incremental
  //?**    Miles
  //?** 3. If incremental miles is zeros, default to 1
  //?** 4. Multiply Order Weight by Incremental Miles to get Lbs-Miles
  //?** 5. Divide the Lbs-Miles by the Total Lbs-Miles to get the
  //?**    Order Allocation %
  //?** 6. Multiply Balance Air Freight Amount by Order Allocation% to
  //?**    get the Allocated Freight Amount for this order.
  //?** 7. Update the Order Header with the Allocated Freight Amount
  ENDDO;

  // PAR.Order Allocation % USR = CON.*ZERO
  PAR.Order_Allocation_USR = *ZERO;

  //?*---- Retrieve Fuel Surcharge ----*
  EXECUTE FUNCTION(Rtv Special Chrg Amt  RT) TYPE(RTVOBJ) FILE(POBCCPP)           AC1886781;
  PARAMETER(PAR.Load_ID);
  PARAMETER('F');
  PARAMETER(PAR.Fuel_Surcharge_Amount);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.LFC Amount = PAR.LFC Amount + DB1.LFC Amount
   PAR.LFC_Amount = PAR.LFC_Amount + DB1.LFC_Amount;

  }

  //?R8827 JJH 01/18/17 - Get MG Created Load from Load Header
  EXECUTE FUNCTION(RTV MG Created Load   RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC2124762;
  PARAMETER(PAR.Load_ID);
  PARAMETER(LCL.MG_Created_Load);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Order Weight       RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1292006;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Order_Weight_Total);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?R8827 JJH 01/18/17 - Modify calculation of Incremental Miles USR
  //?** Accumulate Incremental Miles when Stop/Drop changes
  CASE;

  // IF DB1.Stop/Drop NE PAR.Stop/Drop
  IF DB1.Stop_Drop <> PAR.Stop_Drop;

  CASE;

  // IF LCL.MG Created Load is Yes
  IF LCL.MG_Created_Load = 'Y';

  // PAR.Incremental Miles USR = DB1.Miles to next stop
  PAR.Incremental_Miles_USR = DB1.Miles_to_next_stop;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Incremental Miles USR = DB1.Miles to next stop + PAR.Incremental Miles USR
  PAR.Incremental_Miles_USR = DB1.Miles_to_next_stop + PAR.Incremental_Miles_USR;

  ENDIF;

  ENDIF;

  //?** If incremental miles is zeros, default to 1.   3/10/08 FP1271
  CASE;

  // IF PAR.Incremental Miles USR is Zeros
  IF PAR.Incremental_Miles_USR = 0;

  // PAR.Incremental Miles USR = CON.1
  PAR.Incremental_Miles_USR = 1;

  ENDIF;

  // PAR.Lbs-Miles USR = PAR.Incremental Miles USR * PAR.Order Weight Total *Rounded
  PAR.Lbs_Miles_USR = PAR.Incremental_Miles_USR * PAR.Order_Weight_Total 'H';

  //?** Calc Ord Alloc%. If Tot Lbs-Miles=0, Set to 100%
  CASE;

  // IF PAR.Total Lbs-Miles USR is GT Zero
  IF PAR.Total_Lbs_Miles_USR > *ZERO;

  // PAR.Order Allocation % USR = PAR.Lbs-Miles USR / PAR.Total Lbs-Miles USR *Rounded
  PAR.Order_Allocation_USR = PAR.Lbs_Miles_USR / PAR.Total_Lbs_Miles_USR 'H';

  //?** Calc Ord Alloc%. If Tot Lbs-Miles=0, Set to 100%
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Order Allocation % USR = CND.One
  PAR.Order_Allocation_USR = 1;

  ENDIF;

  //?*--- Calculate Percent of total for the Order ---*
  // WRK.Allocated Freight Amount = PAR.Bal Act Freight Amt USR * PAR.Order Allocation % USR *Rounde
  WRK.Act_Non_Ref_Frt_Amount = PAR.Bal_Act_Freight_Amt_USR * PAR.Order_Allocation_USR 'H';

  // LCL.OH Fuel Surcharge Amount = PAR.Fuel Surcharge Amount * PAR.Order Allocation % USR *Rounded
  LCL.OH_Fuel_Surcharge_Amount = PAR.Fuel_Surcharge_Amount * PAR.Order_Allocation_USR 'H';

  // LCL.OH Total Non-Ref Frt Amt = PAR.Bal Load Total Frt USR * PAR.Order Allocation % USR *Rounded
  LCL.OH_Total_Non_Ref_Frt_Amt = PAR.Bal_Load_Total_Frt_USR * PAR.Order_Allocation_USR 'H';

  //?*--- Update Order Header ---*
  EXECUTE FUNCTION(Chg Alloc Frt Amount   CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1787768;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Act_Non_Ref_Frt_Amount);
  PARAMETER(LCL.OH_Fuel_Surcharge_Amount);
  PARAMETER(LCL.OH_Total_Non_Ref_Frt_Amt);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?*--- Accumulate allocated values ---*
  // LCL.Total Amount = WRK.Allocated Freight Amount + LCL.Total Amount
  LCL.Total_Amount = WRK.Act_Non_Ref_Frt_Amount + LCL.Total_Amount;

  // LCL.Fuel Surcharge Amount = LCL.Fuel Surcharge Amount + LCL.OH Fuel Surcharge Amount
  LCL.Fuel_Surcharge_Amount = LCL.Fuel_Surcharge_Amount + LCL.OH_Fuel_Surcharge_Amount;

  // LCL.Load Total Freight = LCL.Load Total Freight + LCL.OH Total Non-Ref Frt Amt
  LCL.Load_Total_Freight = LCL.Load_Total_Freight + LCL.OH_Total_Non_Ref_Frt_Amt;

  // WRK.Company Number = DB1.Company Number
  WRK.Company_Number = DB1.Company_Number;

  // WRK.Order Number = DB1.Order Number
  WRK.Order_Number = DB1.Order_Number;

  ENDIF;

  // PAR.Stop/Drop = DB1.Stop/Drop
  PAR.Stop_Drop = DB1.Stop_Drop;

  //?USER: Exit processing

  //?** Subtract the accumulated allocated freight from the balance
  //?** of the freight after air freight has been removed. Add this to
  //?** the last order.
  // LCL.Freight Amount = PAR.Bal Act Freight Amt USR - LCL.Total Amount
  LCL.Freight_Amount = PAR.Bal_Act_Freight_Amt_USR - LCL.Total_Amount;

  // WRK.Allocated Freight Amount = LCL.Freight Amount + WRK.Allocated Freight Amount
  WRK.Act_Non_Ref_Frt_Amount = LCL.Freight_Amount + WRK.Act_Non_Ref_Frt_Amount;

  // LCL.Remaining to Apply = PAR.Fuel Surcharge Amount - LCL.Fuel Surcharge Amount
  LCL.Remaining_to_Apply = PAR.Fuel_Surcharge_Amount - LCL.Fuel_Surcharge_Amount;

  // LCL.OH Fuel Surcharge Amount = LCL.OH Fuel Surcharge Amount + LCL.Remaining to Apply
  LCL.OH_Fuel_Surcharge_Amount = LCL.OH_Fuel_Surcharge_Amount + LCL.Remaining_to_Apply;

  // LCL.Remaining to Apply = PAR.Bal Load Total Frt USR - LCL.Load Total Freight
  LCL.Remaining_to_Apply = PAR.Bal_Load_Total_Frt_USR - LCL.Load_Total_Freight;

  // LCL.OH Allocated Ld Tot Frt = LCL.OH Allocated Ld Tot Frt + LCL.Remaining to Apply
  LCL.OH_Total_Non_Ref_Frt_Amt = LCL.OH_Total_Non_Ref_Frt_Amt + LCL.Remaining_to_Apply;

  EXECUTE FUNCTION(Chg Alloc Frt Amount   CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1787768;
  PARAMETER(WRK.Company_Number);
  PARAMETER(WRK.Order_Number);
  PARAMETER(WRK.Act_Non_Ref_Frt_Amount);
  PARAMETER(LCL.OH_Fuel_Surcharge_Amount);
  PARAMETER(LCL.OH_Total_Non_Ref_Frt_Amt);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 //?** Update the Sales History Detail with Actual Freight Amount
 //? make sure order is on this load and not an old one  12.7.16
 EXECUTE FUNCTION(UPD/Alloc Act Freight  RT) TYPE(RTVOBJ) FILE(OMHSTPP)          AC1787811;
 PARAMETER(PAR.Load_ID);
 {
  //?USER: Initialize routine

  // WRK.First Time Flag = CND.Yes
  WRK.First_Time_Flag = 'Y';

  //?** Used for Actual Freight
  // WRK.Actual Freight Amount = CON.*ZERO
  WRK.Actual_Freight_Amount = *ZERO;

  // PAR.USR Remaining Balance = CON.*ZERO
  PAR.USR_Remaining_Balance = *ZERO;

  //?** Used for Fuel Surcharge
  // LCL.SH Fuel Surcharge Amount = CON.*ZERO
  LCL.SH_Fuel_Surcharge_Amount = *ZERO;

  // LCL.Fuel Surcharge Amount = CON.*ZERO
  LCL.Fuel_Surcharge_Amount = *ZERO;

  //?** Used for Load Total Freight
  // LCL.OH Allocated Ld Tot Frt = CON.*ZERO
  LCL.OH_Total_Non_Ref_Frt_Amt = *ZERO;

  // LCL.Load Total Freight USR = CON.*ZERO
  LCL.Load_Total_Freight_USR = *ZERO;

  // WRK.USR Amount Remaining = CON.*ZERO
  WRK.USR_Amount_Remaining = *ZERO;

  //?***** Change Log and Comments
  DO;

  //?** 08/26/2009 LJB E00157-Prompt OHE chg for newly added parms
  ENDDO;

  //?USER: Process Data record

  EXECUTE FUNCTION(Val Order on Load     RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC2130201;
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Order_Number);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   QUIT;

  }

  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?** Add Air Freight Amount to Actual Freight Allocation from Order
  //?** Header to get the Total Freight for this order. Allocation % is
  //?** calculated by dividing the Total Freight Amount by the Order
  //?** Weight Total.
  //?** Rtv freight and allocation % by order number
  CASE;

  // IF DB1.Order Number NE PAR.Order Number
  IF DB1.Order_Number <> PAR.Order_Number;

  //?** Update last detail record with any remaining freight amount
  CASE;

  // IF WRK.First Time Flag is NO
  IF WRK.First_Time_Flag = 'N';

  // WRK.Total Amount = WRK.Total Freight Amount 13.2 - PAR.USR Remaining Balance
  WRK.Total_Amount = WRK.Total_Freight_Amount_13_2 - PAR.USR_Remaining_Balance;

  // WRK.Actual Freight Amount = WRK.Total Amount + WRK.Actual Freight Amount
  WRK.Actual_Freight_Amount = WRK.Total_Amount + WRK.Actual_Freight_Amount;

  // LCL.Remaining to Apply = PAR.OH Allocated Ld Tot Frt - LCL.Load Total Freight USR
  LCL.Remaining_to_Apply = PAR.OH_Total_Non_Ref_Frt_Amt - LCL.Load_Total_Freight_USR;

  // LCL.OH Allocated Ld Tot Frt = LCL.OH Allocated Ld Tot Frt + LCL.Remaining to Apply
  LCL.OH_Total_Non_Ref_Frt_Amt = LCL.OH_Total_Non_Ref_Frt_Amt + LCL.Remaining_to_Apply;

  EXECUTE FUNCTION(CHG Act/Tot Frt Amt   CH) TYPE(CHGOBJ) FILE(OMHSTPP)           AC1787815;
  PARAMETER(WRK.Company_Number);
  PARAMETER(WRK.Order_Number);
  PARAMETER(WRK.Order_Sequence_Number);
  PARAMETER(WRK.Order_Secondary_Line_Seq);
  PARAMETER(WRK.Actual_Freight_Amount);
  PARAMETER(LCL.OH_Total_Non_Ref_Frt_Amt);
  {
   //?USER: Processing after Data read

   // DB1.Data Mart Process Sts = CND.no
   DB1.Data_Mart_Process_Sts = 'N';

   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Job_Date);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

  // PAR.USR Remaining Balance = CON.*ZERO
  PAR.USR_Remaining_Balance = *ZERO;

  // LCL.Load Total Freight USR = CON.*ZERO
  LCL.Load_Total_Freight_USR = *ZERO;

  //?*---- UPDATE TOTAL FREIGHT & FUEL SURCHARGE ----*
  // LCL.Remaining to Apply = PAR.OH Fuel Surcharge Amount - LCL.Fuel Surcharge Amount
  LCL.Remaining_to_Apply = PAR.OH_Fuel_Surcharge_Amount - LCL.Fuel_Surcharge_Amount;

  // LCL.SH Fuel Surcharge Amount = LCL.SH Fuel Surcharge Amount + LCL.Remaining to Apply
  LCL.SH_Fuel_Surcharge_Amount = LCL.SH_Fuel_Surcharge_Amount + LCL.Remaining_to_Apply;

  EXECUTE FUNCTION(Upd Fuel Charge       RT) TYPE(RTVOBJ) FILE(PMD0CPP)           AC1888873;
  PARAMETER(WRK.Company_Number);
  PARAMETER(WRK.Order_Number);
  PARAMETER(WRK.Order_Sequence_Number);
  PARAMETER(WRK.Order_Secondary_Line_Seq);
  PARAMETER(LCL.SH_Fuel_Surcharge_Amount);
  {
   //?USER: Processing if Data record not found

   //?FP1303 - Delivery P.O. field added
   //?W77844 DN 09/14/21-Commented Out & Condition CRTOBJ Below.
   //?W77844 DN 09/14/21-Only Create It if Order Sequence Number > 0.
   CASE;

   // IF PAR.Order Sequence Number is GT 0
   IF PAR.Order_Sequence_Number > 0;

   //?- This should NOT be happening since the SHE record should have
   //?  already been created.
   //?- If Order Sequence Number = 0 it means it's a Transfer Order
   //?  and we should NOT create the SHE record.
   EXECUTE FUNCTION(Crt Sales History EXT CR) TYPE(CRTOBJ) FILE(PMD0CPP)           AC1886772;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.SH_Fuel_Surcharge_Amount);
   PARAMETER(PAR.SH_Price_Type);
   PARAMETER(PAR.SH_Slip_Sheet);
   PARAMETER(PAR.SH_Spot_Buy_Sts);
   PARAMETER(PAR.SH_Unused_Sts_2);
   PARAMETER(PAR.SH_Order_Sales_Channel);
   PARAMETER(PAR.SH_Price_Type_Ref_Num);
   PARAMETER(PAR.Delivery_P_O_Number);
   PARAMETER(PAR.SH_Firm_Date);
   PARAMETER(PAR.SH_Revenue_Adjust_Amount);
   PARAMETER(PAR.Orig_Ord_ABS_Freight_Rate);
   PARAMETER(PAR.SH_Unused_Value_3);
   PARAMETER(PAR.SH_Gate_Price);
   PARAMETER(PAR.SH_Gate_Final_Adjustmnt);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(LCL.SH_Unused_Status_2_2);
   PARAMETER(LCL.Invoiced_Abs_Ovrde_Reason);
   PARAMETER(*BLANK);
   PARAMETER(LCL.SH_Unused_Status_6_1);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Create_Date);
    PARAMETER(DB1.Create_Time);
    PARAMETER(DB1.Create_User);
    PARAMETER(DB1.Create_Program);
    PARAMETER(DB1.Change_Date);
    PARAMETER(DB1.Change_Time);
    PARAMETER(DB1.Change_User);
    PARAMETER(DB1.Change_Program);
    {
     //?Execute internal function

     //?*** Set RECORD STATUS field. ***
     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     //?*** Set CREATE fields. ***
     // PAR.Create Date = JOB.*Job date
     PAR.Create_Date = JOB.*Job_date;

     // PAR.Create Time = JOB.*Job time
     PAR.Create_Time = JOB.*Job_time;

     // PAR.Create User = JOB.*USER
     PAR.Create_User = JOB.*USER;

     // PAR.Create Program = JOB.*PROGRAM
     PAR.Create_Program = JOB.*PROGRAM;

     //?*** Set CHANGE fields. ***
     // PAR.Change Date = CON.*ZERO
     PAR.Change_Date = *ZERO;

     // PAR.Change Time = CON.*ZERO
     PAR.Change_Time = *ZERO;

     // PAR.Change User = CON.*BLANK
     PAR.Change_User = *BLANK;

     // PAR.Change Program = CON.*BLANK
     PAR.Change_Program = *BLANK;

    }

   }

   ENDIF;

   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Fuel Charge       CH) TYPE(CHGOBJ) FILE(PMD0CPP)           AC1886775;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.SH_Fuel_Surcharge_Amount);
   PARAMETER(DB1.SH_Unused_Date_3);
   PARAMETER(DB1.SH_Unused_Date_4);
   PARAMETER(DB1.SH_Unused_Status_2_2);
   PARAMETER(DB1.Invoiced_Abs_Ovrde_Reason);
   PARAMETER(DB1.SH_Intended_for_Export_CC);
   PARAMETER(DB1.SH_Unused_Status_6_1);
   PARAMETER(DB1.SH_Unused_Text_10);
   PARAMETER(DB1.SH_Booking_Number);
   PARAMETER(DB1.SH_Genset_Number);
   PARAMETER(DB1.SH_Unused_Text_50);
   PARAMETER(DB1.SH_Calendar_Week);
   PARAMETER(DB1.SH_Unused_Numeric_3_0_2);
   PARAMETER(DB1.SH_Calendar_Year);
   PARAMETER(DB1.SH_Original_Ordered_Qty);
   PARAMETER(DB1.SH_Unused_Numeric_6_0_1);
   PARAMETER(DB1.SH_Unused_Numeric_6_0_2);
   PARAMETER(DB1.SH_Unused_Numeric_9_0_1);
   PARAMETER(DB1.SH_Unused_Numeric_9_0_2);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
    PARAMETER(DB1.Change_Date);
    PARAMETER(DB1.Change_Time);
    PARAMETER(DB1.Change_User);
    PARAMETER(DB1.Change_Program);
    {
     //?Execute internal function

     // PAR.Change Date = JOB.*Job date
     PAR.Change_Date = JOB.*Job_date;

     // PAR.Change Time = JOB.*Job time
     PAR.Change_Time = JOB.*Job_time;

     // PAR.Change User = JOB.*USER
     PAR.Change_User = JOB.*USER;

     // PAR.Change Program = JOB.*PROGRAM
     PAR.Change_Program = JOB.*PROGRAM;

    }

   }

  }

  // LCL.Fuel Surcharge Amount = CON.*ZERO
  LCL.Fuel_Surcharge_Amount = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(RTV Air&Actual Freight RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1787812;
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Load_ID);
  PARAMETER(WRK.Total_Freight_Amount_13_2);
  PARAMETER(PAR.USR_Work_Percent_7_6);
  PARAMETER(PAR.Fuel_Surcharge_per_LB_USR);
  PARAMETER(PAR.OH_Fuel_Surcharge_Amount);
  PARAMETER(PAR.OH_Total_Non_Ref_Frt_Amt);
  PARAMETER(PAR.Load_Total_Freight_LB_USR);
  {
   //?USER: Initialize routine

   // PAR.Total Freight Amount 13.2 = CON.*ZERO
   PAR.Total_Freight_Amount_13_2 = *ZERO;

   // PAR.OH Allocated Ld Tot Frt = CON.*ZERO
   PAR.OH_Total_Non_Ref_Frt_Amt = *ZERO;

   // PAR.OH Fuel Surcharge Amount = CON.*ZERO
   PAR.OH_Fuel_Surcharge_Amount = *ZERO;

   //?***** Change Log and Comments
   //?** Prevent divide by zero               11/27/2006 LJB V61127A
   //?*****
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.Total Freight Amount 13.2 = DB1.Act Non-Ref Frt Amount + DB1.Act Frt Reference Amount
   PAR.Total_Freight_Amount_13_2 = DB1.Act_Non_Ref_Frt_Amount
   + DB1.Act_Frt_Reference_Amount;

   // PAR.OH Fuel Surcharge Amount = DB1.OH Fuel Surcharge Amount
   PAR.OH_Fuel_Surcharge_Amount = DB1.OH_Fuel_Surcharge_Amount;

   // PAR.OH Total Non-Ref Frt Amt = DB1.OH Total Non-Ref Frt Amt + DB1.OH Total Ref Frt Amt
   PAR.OH_Total_Non_Ref_Frt_Amt = DB1.OH_Total_Non_Ref_Frt_Amt + DB1.OH_Total_Ref_Frt_Amt;

   //?** Prevent divide by zero               11/27/2006 LJB V61127A
   //?** Calc percent - plug in zeros if db1.order weight total is zeros
   CASE;

   // IF DB1.Order Weight Total is Not equal zero
   IF DB1.Order_Weight_Total <> *ZERO;

   // PAR.USR Work Percent 7/6 = PAR.Total Freight Amount 13.2 / DB1.Order Weight Total *Rounded
   PAR.USR_Work_Percent_7_6 = PAR.Total_Freight_Amount_13_2 / DB1.Order_Weight_Total 'H';

   // PAR.Fuel Surcharge per LB USR = DB1.OH Fuel Surcharge Amount / DB1.Order Weight Total *Rounded
   PAR.Fuel_Surcharge_per_LB_USR = DB1.OH_Fuel_Surcharge_Amount / DB1.Order_Weight_Total
   'H';

   // PAR.Load Total Freight/LB USR = PAR.OH Total Non-Ref Frt Amt / DB1.Order Weight Total *Rounded
   PAR.Load_Total_Freight_LB_USR = PAR.OH_Total_Non_Ref_Frt_Amt / DB1.Order_Weight_Total
   'H';

   //?** Calc percent - plug in zeros if db1.order weight total is zeros
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.USR Work Percent 7/6 = CND.Equal to zero
   PAR.USR_Work_Percent_7_6 = *ZERO;

   // PAR.Fuel Surcharge per LB USR = CON.*ZERO
   PAR.Fuel_Surcharge_per_LB_USR = *ZERO;

   // PAR.Load Total Freight/LB USR = CON.*ZERO
   PAR.Load_Total_Freight_LB_USR = *ZERO;

   ENDIF;

  }

  // PAR.Order Number = DB1.Order Number
  PAR.Order_Number = DB1.Order_Number;

  // WRK.First Time Flag = CND.NO
  WRK.First_Time_Flag = 'N';

  ENDIF;

  //?** Distribute the freight to each detail record for the order
  //?** (Remaining Balance is actually a running balance of the
  //?** freight that is distributed for this order.)
  CASE;

  // IF DB1.Order Number EQ PAR.Order Number
  IF DB1.Order_Number = PAR.Order_Number;

  //?*---- UPDATE ACTUAL FREIGHT AMOUNT & Total Freight ----*
  // WRK.Actual Freight Amount = DB1.Weight Billed * PAR.USR Work Percent 7/6 *
  WRK.Actual_Freight_Amount = DB1.Weight_Billed * PAR.USR_Work_Percent_7_6;

  // LCL.OH Total Non-Ref Frt Amt = DB1.Weight Billed * PAR.Load Total Freight/LB USR *
  LCL.OH_Total_Non_Ref_Frt_Amt = DB1.Weight_Billed * PAR.Load_Total_Freight_LB_USR;

  EXECUTE FUNCTION(CHG Act/Tot Frt Amt   CH) TYPE(CHGOBJ) FILE(OMHSTPP)           AC1787815;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(WRK.Actual_Freight_Amount);
  PARAMETER(LCL.OH_Total_Non_Ref_Frt_Amt);
  {
   //?USER: Processing after Data read

   // DB1.Data Mart Process Sts = CND.no
   DB1.Data_Mart_Process_Sts = 'N';

   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Job_Date);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

  //?*---- UPDATE FUEL SURCHARGE ----*
  // LCL.SH Fuel Surcharge Amount = DB1.Weight Billed * PAR.Fuel Surcharge per LB USR *
  LCL.SH_Fuel_Surcharge_Amount = DB1.Weight_Billed * PAR.Fuel_Surcharge_per_LB_USR;

  EXECUTE FUNCTION(Upd Fuel Charge       RT) TYPE(RTVOBJ) FILE(PMD0CPP)           AC1888873;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(LCL.SH_Fuel_Surcharge_Amount);
  {
   //?USER: Processing if Data record not found

   //?FP1303 - Delivery P.O. field added
   //?W77844 DN 09/14/21-Commented Out & Condition CRTOBJ Below.
   //?W77844 DN 09/14/21-Only Create It if Order Sequence Number > 0.
   CASE;

   // IF PAR.Order Sequence Number is GT 0
   IF PAR.Order_Sequence_Number > 0;

   //?- This should NOT be happening since the SHE record should have
   //?  already been created.
   //?- If Order Sequence Number = 0 it means it's a Transfer Order
   //?  and we should NOT create the SHE record.
   EXECUTE FUNCTION(Crt Sales History EXT CR) TYPE(CRTOBJ) FILE(PMD0CPP)           AC1886772;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.SH_Fuel_Surcharge_Amount);
   PARAMETER(PAR.SH_Price_Type);
   PARAMETER(PAR.SH_Slip_Sheet);
   PARAMETER(PAR.SH_Spot_Buy_Sts);
   PARAMETER(PAR.SH_Unused_Sts_2);
   PARAMETER(PAR.SH_Order_Sales_Channel);
   PARAMETER(PAR.SH_Price_Type_Ref_Num);
   PARAMETER(PAR.Delivery_P_O_Number);
   PARAMETER(PAR.SH_Firm_Date);
   PARAMETER(PAR.SH_Revenue_Adjust_Amount);
   PARAMETER(PAR.Orig_Ord_ABS_Freight_Rate);
   PARAMETER(PAR.SH_Unused_Value_3);
   PARAMETER(PAR.SH_Gate_Price);
   PARAMETER(PAR.SH_Gate_Final_Adjustmnt);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(LCL.SH_Unused_Status_2_2);
   PARAMETER(LCL.Invoiced_Abs_Ovrde_Reason);
   PARAMETER(*BLANK);
   PARAMETER(LCL.SH_Unused_Status_6_1);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Create_Date);
    PARAMETER(DB1.Create_Time);
    PARAMETER(DB1.Create_User);
    PARAMETER(DB1.Create_Program);
    PARAMETER(DB1.Change_Date);
    PARAMETER(DB1.Change_Time);
    PARAMETER(DB1.Change_User);
    PARAMETER(DB1.Change_Program);
    {
     //?Execute internal function

     //?*** Set RECORD STATUS field. ***
     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     //?*** Set CREATE fields. ***
     // PAR.Create Date = JOB.*Job date
     PAR.Create_Date = JOB.*Job_date;

     // PAR.Create Time = JOB.*Job time
     PAR.Create_Time = JOB.*Job_time;

     // PAR.Create User = JOB.*USER
     PAR.Create_User = JOB.*USER;

     // PAR.Create Program = JOB.*PROGRAM
     PAR.Create_Program = JOB.*PROGRAM;

     //?*** Set CHANGE fields. ***
     // PAR.Change Date = CON.*ZERO
     PAR.Change_Date = *ZERO;

     // PAR.Change Time = CON.*ZERO
     PAR.Change_Time = *ZERO;

     // PAR.Change User = CON.*BLANK
     PAR.Change_User = *BLANK;

     // PAR.Change Program = CON.*BLANK
     PAR.Change_Program = *BLANK;

    }

   }

   ENDIF;

   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Fuel Charge       CH) TYPE(CHGOBJ) FILE(PMD0CPP)           AC1886775;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.SH_Fuel_Surcharge_Amount);
   PARAMETER(DB1.SH_Unused_Date_3);
   PARAMETER(DB1.SH_Unused_Date_4);
   PARAMETER(DB1.SH_Unused_Status_2_2);
   PARAMETER(DB1.Invoiced_Abs_Ovrde_Reason);
   PARAMETER(DB1.SH_Intended_for_Export_CC);
   PARAMETER(DB1.SH_Unused_Status_6_1);
   PARAMETER(DB1.SH_Unused_Text_10);
   PARAMETER(DB1.SH_Booking_Number);
   PARAMETER(DB1.SH_Genset_Number);
   PARAMETER(DB1.SH_Unused_Text_50);
   PARAMETER(DB1.SH_Calendar_Week);
   PARAMETER(DB1.SH_Unused_Numeric_3_0_2);
   PARAMETER(DB1.SH_Calendar_Year);
   PARAMETER(DB1.SH_Original_Ordered_Qty);
   PARAMETER(DB1.SH_Unused_Numeric_6_0_1);
   PARAMETER(DB1.SH_Unused_Numeric_6_0_2);
   PARAMETER(DB1.SH_Unused_Numeric_9_0_1);
   PARAMETER(DB1.SH_Unused_Numeric_9_0_2);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
    PARAMETER(DB1.Change_Date);
    PARAMETER(DB1.Change_Time);
    PARAMETER(DB1.Change_User);
    PARAMETER(DB1.Change_Program);
    {
     //?Execute internal function

     // PAR.Change Date = JOB.*Job date
     PAR.Change_Date = JOB.*Job_date;

     // PAR.Change Time = JOB.*Job time
     PAR.Change_Time = JOB.*Job_time;

     // PAR.Change User = JOB.*USER
     PAR.Change_User = JOB.*USER;

     // PAR.Change Program = JOB.*PROGRAM
     PAR.Change_Program = JOB.*PROGRAM;

    }

   }

  }

  //?*--- Accumulated Allocated Amount ---*
  // PAR.USR Remaining Balance = WRK.Actual Freight Amount + PAR.USR Remaining Balance
  PAR.USR_Remaining_Balance = WRK.Actual_Freight_Amount + PAR.USR_Remaining_Balance;

  // LCL.Fuel Surcharge Amount = LCL.Fuel Surcharge Amount + LCL.SH Fuel Surcharge Amount
  LCL.Fuel_Surcharge_Amount = LCL.Fuel_Surcharge_Amount + LCL.SH_Fuel_Surcharge_Amount;

  // LCL.Load Total Freight USR = LCL.Load Total Freight USR + LCL.OH Total Non-Ref Frt Amt
  LCL.Load_Total_Freight_USR = LCL.Load_Total_Freight_USR + LCL.OH_Total_Non_Ref_Frt_Amt;

  //?** Save parms for updating the last detail record for the order
  // WRK.Company Number = DB1.Company Number
  WRK.Company_Number = DB1.Company_Number;

  // WRK.Order Number = DB1.Order Number
  WRK.Order_Number = DB1.Order_Number;

  // WRK.Order Sequence Number = DB1.Order Sequence Number
  WRK.Order_Sequence_Number = DB1.Order_Sequence_Number;

  // WRK.Order Secondary Line Seq = DB1.Order Secondary Line Seq
  WRK.Order_Secondary_Line_Seq = DB1.Order_Secondary_Line_Seq;

  ENDIF;

  ENDIF;

  //?USER: Exit processing

  //?*---- UPDATE Actual & Total Freight ----*
  //?Update last record with any remaining freight
  // WRK.Total Amount = WRK.Total Freight Amount 13.2 - PAR.USR Remaining Balance
  WRK.Total_Amount = WRK.Total_Freight_Amount_13_2 - PAR.USR_Remaining_Balance;

  // WRK.Actual Freight Amount = WRK.Total Amount + WRK.Actual Freight Amount
  WRK.Actual_Freight_Amount = WRK.Total_Amount + WRK.Actual_Freight_Amount;

  // LCL.Remaining to Apply = PAR.OH Allocated Ld Tot Frt - LCL.Load Total Freight USR
  LCL.Remaining_to_Apply = PAR.OH_Total_Non_Ref_Frt_Amt - LCL.Load_Total_Freight_USR;

  // LCL.OH Allocated Ld Tot Frt = LCL.OH Allocated Ld Tot Frt + LCL.Remaining to Apply
  LCL.OH_Total_Non_Ref_Frt_Amt = LCL.OH_Total_Non_Ref_Frt_Amt + LCL.Remaining_to_Apply;

  EXECUTE FUNCTION(CHG Act/Tot Frt Amt   CH) TYPE(CHGOBJ) FILE(OMHSTPP)           AC1787815;
  PARAMETER(WRK.Company_Number);
  PARAMETER(WRK.Order_Number);
  PARAMETER(WRK.Order_Sequence_Number);
  PARAMETER(WRK.Order_Secondary_Line_Seq);
  PARAMETER(WRK.Actual_Freight_Amount);
  PARAMETER(LCL.OH_Total_Non_Ref_Frt_Amt);
  {
   //?USER: Processing after Data read

   // DB1.Data Mart Process Sts = CND.no
   DB1.Data_Mart_Process_Sts = 'N';

   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Job_Date);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

  //?*---- UPDATE FUEL SURCHARGE ----*
  // LCL.Remaining to Apply = PAR.OH Fuel Surcharge Amount - LCL.Fuel Surcharge Amount
  LCL.Remaining_to_Apply = PAR.OH_Fuel_Surcharge_Amount - LCL.Fuel_Surcharge_Amount;

  // LCL.SH Fuel Surcharge Amount = LCL.SH Fuel Surcharge Amount + LCL.Remaining to Apply
  LCL.SH_Fuel_Surcharge_Amount = LCL.SH_Fuel_Surcharge_Amount + LCL.Remaining_to_Apply;

  EXECUTE FUNCTION(Upd Fuel Charge       RT) TYPE(RTVOBJ) FILE(PMD0CPP)           AC1888873;
  PARAMETER(WRK.Company_Number);
  PARAMETER(WRK.Order_Number);
  PARAMETER(WRK.Order_Sequence_Number);
  PARAMETER(WRK.Order_Secondary_Line_Seq);
  PARAMETER(LCL.SH_Fuel_Surcharge_Amount);
  {
   //?USER: Processing if Data record not found

   //?FP1303 - Delivery P.O. field added
   //?W77844 DN 09/14/21-Commented Out & Condition CRTOBJ Below.
   //?W77844 DN 09/14/21-Only Create It if Order Sequence Number > 0.
   CASE;

   // IF PAR.Order Sequence Number is GT 0
   IF PAR.Order_Sequence_Number > 0;

   //?- This should NOT be happening since the SHE record should have
   //?  already been created.
   //?- If Order Sequence Number = 0 it means it's a Transfer Order
   //?  and we should NOT create the SHE record.
   EXECUTE FUNCTION(Crt Sales History EXT CR) TYPE(CRTOBJ) FILE(PMD0CPP)           AC1886772;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.SH_Fuel_Surcharge_Amount);
   PARAMETER(PAR.SH_Price_Type);
   PARAMETER(PAR.SH_Slip_Sheet);
   PARAMETER(PAR.SH_Spot_Buy_Sts);
   PARAMETER(PAR.SH_Unused_Sts_2);
   PARAMETER(PAR.SH_Order_Sales_Channel);
   PARAMETER(PAR.SH_Price_Type_Ref_Num);
   PARAMETER(PAR.Delivery_P_O_Number);
   PARAMETER(PAR.SH_Firm_Date);
   PARAMETER(PAR.SH_Revenue_Adjust_Amount);
   PARAMETER(PAR.Orig_Ord_ABS_Freight_Rate);
   PARAMETER(PAR.SH_Unused_Value_3);
   PARAMETER(PAR.SH_Gate_Price);
   PARAMETER(PAR.SH_Gate_Final_Adjustmnt);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(LCL.SH_Unused_Status_2_2);
   PARAMETER(LCL.Invoiced_Abs_Ovrde_Reason);
   PARAMETER(*BLANK);
   PARAMETER(LCL.SH_Unused_Status_6_1);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Create_Date);
    PARAMETER(DB1.Create_Time);
    PARAMETER(DB1.Create_User);
    PARAMETER(DB1.Create_Program);
    PARAMETER(DB1.Change_Date);
    PARAMETER(DB1.Change_Time);
    PARAMETER(DB1.Change_User);
    PARAMETER(DB1.Change_Program);
    {
     //?Execute internal function

     //?*** Set RECORD STATUS field. ***
     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     //?*** Set CREATE fields. ***
     // PAR.Create Date = JOB.*Job date
     PAR.Create_Date = JOB.*Job_date;

     // PAR.Create Time = JOB.*Job time
     PAR.Create_Time = JOB.*Job_time;

     // PAR.Create User = JOB.*USER
     PAR.Create_User = JOB.*USER;

     // PAR.Create Program = JOB.*PROGRAM
     PAR.Create_Program = JOB.*PROGRAM;

     //?*** Set CHANGE fields. ***
     // PAR.Change Date = CON.*ZERO
     PAR.Change_Date = *ZERO;

     // PAR.Change Time = CON.*ZERO
     PAR.Change_Time = *ZERO;

     // PAR.Change User = CON.*BLANK
     PAR.Change_User = *BLANK;

     // PAR.Change Program = CON.*BLANK
     PAR.Change_Program = *BLANK;

    }

   }

   ENDIF;

   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Fuel Charge       CH) TYPE(CHGOBJ) FILE(PMD0CPP)           AC1886775;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.SH_Fuel_Surcharge_Amount);
   PARAMETER(DB1.SH_Unused_Date_3);
   PARAMETER(DB1.SH_Unused_Date_4);
   PARAMETER(DB1.SH_Unused_Status_2_2);
   PARAMETER(DB1.Invoiced_Abs_Ovrde_Reason);
   PARAMETER(DB1.SH_Intended_for_Export_CC);
   PARAMETER(DB1.SH_Unused_Status_6_1);
   PARAMETER(DB1.SH_Unused_Text_10);
   PARAMETER(DB1.SH_Booking_Number);
   PARAMETER(DB1.SH_Genset_Number);
   PARAMETER(DB1.SH_Unused_Text_50);
   PARAMETER(DB1.SH_Calendar_Week);
   PARAMETER(DB1.SH_Unused_Numeric_3_0_2);
   PARAMETER(DB1.SH_Calendar_Year);
   PARAMETER(DB1.SH_Original_Ordered_Qty);
   PARAMETER(DB1.SH_Unused_Numeric_6_0_1);
   PARAMETER(DB1.SH_Unused_Numeric_6_0_2);
   PARAMETER(DB1.SH_Unused_Numeric_9_0_1);
   PARAMETER(DB1.SH_Unused_Numeric_9_0_2);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
    PARAMETER(DB1.Change_Date);
    PARAMETER(DB1.Change_Time);
    PARAMETER(DB1.Change_User);
    PARAMETER(DB1.Change_Program);
    {
     //?Execute internal function

     // PAR.Change Date = JOB.*Job date
     PAR.Change_Date = JOB.*Job_date;

     // PAR.Change Time = JOB.*Job time
     PAR.Change_Time = JOB.*Job_time;

     // PAR.Change User = JOB.*USER
     PAR.Change_User = JOB.*USER;

     // PAR.Change Program = JOB.*PROGRAM
     PAR.Change_Program = JOB.*PROGRAM;

    }

   }

  }

 }

}


