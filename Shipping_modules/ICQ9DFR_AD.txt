// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for ICQ9DFR
// ?Date: 14.08.2025 Time: 03:33:33
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('I/C');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

//?toggle quantity/weights -----> no = display quantities
// WRK.Status Flag 4  Y/N = CND.no
WRK.Status_Flag_4_Y_N = 'N';

// Execute function SFL Fold/Drop  RPG    US.
EXECUTE FUNCTION(SFL Fold/Drop  RPG    US) TYPE(EXCUSRSRC) ('POBHUFU');
PARAMETER(6);
{
 ) find text=#SFLCTL
 ) insert
 A                                      SFLDROP(CF07)
 A* 07                                  SFLFOLD(CF07)
}


//?***** Change Log and Comments
DO;

//?E3014  RMC 03/14/2014
//?  Include Reason RWZ Freezer transfer in production number
//?FP1309 slm 03/12/2010
EXECUTE FUNCTION(FP1309 Inventory Age  IF) TYPE(EXCINTFUN)                      AC1981251;
{
 //?Execute internal function

 //?FP1309 Inventory Age Code Description
}


//?** Remove the AS Last Update Date and time from screen
//?** 05/15/2009 slm S00806
//?** Remove the AS Last Update Date and time from screen
//?** Remove retrieve to the AS Last Data Collection data base
//?*****
//?** 05/15/2009 slm S00806
//?** Remove the AS Last Update Date and time from screen
//?** Remove retrieve to the AS Last Data Collection data base
//?*****
//?** 03/31/2009 LJB S00375
//?** Change CLC Age Code to use a different function so that
//?** 7 thru 119 days = "H" and 120+ days = "I"
//?*****
//?** 1/18/06 LJB:
//?** F13 toggles to display weights in the subfile. These values
//?**   were estimated by multiplying the quantity by the primary
//?**   conversion factor in the control record. Change to use
//?**   the actual weights stored in the files.
//?**   See "USER: Initialize subfile control" and "USER:
//?**   Initialize subfile record from DBF record" for more
//?**   detailed description of changes.
//?*****
ENDDO;

//?USER: Initialize subfile control

// CTL.Inv/Ord Diff          USR = CON.*ZERO
CTL.Inv_Ord_Diff_USR = *ZERO;

// CTL.Inv Current           USR = CON.*ZERO
CTL.Inv_Current_USR = *ZERO;

// CTL.Inv Aged              USR = CON.*ZERO
CTL.Inv_Aged_USR = *ZERO;

//?Init Toggle Text field
CASE;

// IF CTL.Toggle Text 1         USR EQ WRK.BLANK 1               USR
IF CTL.Toggle_Text_1_USR = WRK.BLANK_1_USR;

// CTL.Toggle Text 1         USR = CON.Qty
CTL.Toggle_Text_1_USR = 'Qty';

// CTL.Toggle Text 2         USR = CON.Qty
CTL.Toggle_Text_2_USR = 'Qty';

// CTL.Toggle Text 3         USR = CON.Qty
CTL.Toggle_Text_3_USR = 'Qty';

// CTL.Toggle Text 4         USR = CON.Qty
CTL.Toggle_Text_4_USR = 'Qty';

ENDIF;

// CTL.Condition Desc. 1  USR = Condition name of PAR.Catch Weight Status
CTL.Condition_Desc_1_USR = RTVCND(PAR.Catch_Weight_Status);

EXECUTE FUNCTION(Del Qty Sched for Age  DL) TYPE(DLTOBJ) ARRAY(Date_for_Qty_ScheAC1549956;

//?** Build array using label dates from Item Balance Detail file
//?** If Qty On-Hand-Weight is not zeros, add the date to the array
//?** and initialize the quantity field to zeros.
EXECUTE FUNCTION(Rtv Bld Label Dt Array RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1547252;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Item_Code);
PARAMETER(PAR.First_Label_Date_USR);
{
 //?USER: Initialize routine

 // PAR.First Time Flag = CND.Yes
 PAR.First_Time_Flag = 'Y';

 //?USER: Process Data record

 CASE;

 // IF DB1.Quantity on Hand - Weight is Not equal zero
 IF DB1.Quantity_on_Hand_Weight <> *ZERO;

 EXECUTE FUNCTION(Crt Date for Qty Sched CR) TYPE(CRTOBJ) ARRAY(Date_for_Qty_ScheAC1547134;
 PARAMETER(DB1.Label_Date);
 PARAMETER(*ZERO);
 CASE;

 // IF PAR.First Time Flag is Yes
 IF PAR.First_Time_Flag = 'Y';

 // PAR.First Label Date    USR = DB1.Label Date
 PAR.First_Label_Date_USR = DB1.Label_Date;

 // PAR.First Time Flag = CND.NO
 PAR.First_Time_Flag = 'N';

 ENDIF;

 ENDIF;

}


//?** Calculate the label date based on the age code and scheduled
//?** ship date. The age code number of days is subtracted
//?** from the scheduled ship date and the result is used to look up
//?** the corresponding label date. The scheduled quantity is added
//?** to the corresponding quantity bucket
//?FP1309 calculate the label date
//?slm 08/04/2010
EXECUTE FUNCTION(Rtv Sched Qty/Label Dt RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1547128;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.First_Label_Date_USR);
{
 //?USER: Process Data record

 //?rmc 7/07/09 added comp to bill act type
 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Header_Status);
 PARAMETER(LCL.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Billing Activity Type is Invoice or Transfer
 IF LCL.Billing_Activity_Type = '1'/'4';

 //?8/4/2010 slm FP1309 Inventory Age --- Calculate the Label date
 //?We believe that this is calculating the From Date
 EXECUTE FUNCTION(RTV Req Delv/Hdr Sts  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1598298;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(NLL.Header_Status);
 PARAMETER(LCL.Requested_Delivery_Date);
 PARAMETER(NLL.Requested_Delivery_Time);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Val Age Information   IF) TYPE(EXCINTFUN)                      AC1984951;
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(LCL.Requested_Delivery_Date);
 PARAMETER(DB1.Item_Age_Days);
 PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
 PARAMETER(DB1.Production_Ovr_AgeDte_To);
 PARAMETER(LCL.Production_AgeDte_Fr);
 PARAMETER(LCL.Production_AgeDte_To);
 PARAMETER(LCL.Error_Status);
 PARAMETER('S');
 PARAMETER('C');
 {
  //?Execute internal function

  // WRK.Error Flag            USR = CND.Blank
  WRK.Error_Flag_USR = *BLANK;

  // PAR.Error Status = CND.blank
  PAR.Error_Status = *BLANK;

  // WRK.Error Reason Descript 1 = CON.*BLANK
  WRK.Error_Reason_Descript_1 = *BLANK;

  // WRK.Error Reason Descript 2 = CON.*BLANK
  WRK.Error_Reason_Descript_2 = *BLANK;

  // WRK.Error Reason Descript 3 = CON.*BLANK
  WRK.Error_Reason_Descript_3 = *BLANK;

  // WRK.Error Reason Descript 4 = CON.*BLANK
  WRK.Error_Reason_Descript_4 = *BLANK;

  // WRK.Error Reason Descript 5 = CON.*BLANK
  WRK.Error_Reason_Descript_5 = *BLANK;

  CASE;

  // IF PAR.Company Organization is Seaboard
  IF PAR.Company_Organization = 'S';

  CASE;

  // IF PAR.Requested Delivery Date is not entered
  IF PAR.Requested_Delivery_Date = *ZERO;

  // Send error message - 'Requested Delv Date is required'
  ERROR(USR4329);
  MSGPARM(PAR.Requested_Delivery_Date);

  // IF PAR.Scheduled Ship Date is not entered
  IF PAR.Scheduled_Ship_Date = *ZERO;

  // Send error message - 'Scheduled Ship Date is required when orders are assigned to load.'
  ERROR(USR2230);
  MSGPARM(PAR.Scheduled_Ship_Date);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Call program Val Age information   XF.
  CALL PROGRAM(Val Age information   XF) ('PNQNXFR');
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(WRK.Error_Flag_USR);
  PARAMETER(WRK.Error_Reason_Descript_1);
  PARAMETER(WRK.Error_Reason_Descript_2);
  PARAMETER(WRK.Error_Reason_Descript_3);
  PARAMETER(WRK.Error_Reason_Descript_4);
  PARAMETER(WRK.Error_Reason_Descript_5);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Requested_Delivery_Date);
  PARAMETER(PAR.Item_Age_Days);
  PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
  PARAMETER(PAR.Production_Ovr_AgeDte_To);
  PARAMETER(PAR.Production_AgeDte_Fr);
  PARAMETER(PAR.Production_AgeDte_To);

  //?Verify if message should be sent if validation is required
  CASE;

  // IF WRK.Error Flag            USR is Yes
  IF WRK.Error_Flag_USR = 'Y';

  // AND PAR.Production Dates Sts Usr is Validation routine
  AND PAR.Production_Dates_Sts_Usr = 'V';

  //?message 1 Product is shipped before product is made
  CASE;

  // IF WRK.Error Reason Descript 1 NE WRK.Blank for 30          USR
  IF WRK.Error_Reason_Descript_1 <> WRK.Blank_for_30_USR;

  // Send error message - 'Prd Date is invalid for requested delivery date'
  ERROR(USR4307);
  MSGPARM(PAR.Production_AgeDte_Fr);

  ENDIF;

  //?message 2 Either Days or override date but not both
  CASE;

  // IF WRK.Error Reason Descript 2 NE WRK.Blank for 30          USR
  IF WRK.Error_Reason_Descript_2 <> WRK.Blank_for_30_USR;

  // Send error message - 'Enter Age Days or Dates'
  ERROR(USR4304);
  MSGPARM(PAR.Item_Age_Days);
  MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
  MSGPARM(PAR.Production_Ovr_AgeDte_To);

  ENDIF;

  //?message 3 With Chill Days Either Days or Override Dates required
  CASE;

  // IF WRK.Error Reason Descript 3 NE WRK.Blank for 30          USR
  IF WRK.Error_Reason_Descript_3 <> WRK.Blank_for_30_USR;

  // Send error message - 'Override Dates is after shipped date'
  ERROR(USR4305);
  MSGPARM(PAR.Item_Age_Days);
  MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
  MSGPARM(PAR.Production_Ovr_AgeDte_To);

  ENDIF;

  //?message 4 From date is > then SHIP DATE
  CASE;

  // IF WRK.Error Reason Descript 4 NE WRK.Blank for 30          USR
  IF WRK.Error_Reason_Descript_4 <> WRK.Blank_for_30_USR;

  // Send error message - 'Override Dates is after shipped date'
  ERROR(USR4305);
  MSGPARM(PAR.Item_Age_Days);
  MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
  MSGPARM(PAR.Production_Ovr_AgeDte_To);

  ENDIF;

  //?message 5 To date is > then SHIP DATE
  CASE;

  // IF WRK.Error Reason Descript 5 NE WRK.Blank for 30          USR
  IF WRK.Error_Reason_Descript_5 <> WRK.Blank_for_30_USR;

  // Send error message - 'Override Dates is after shipped date'
  ERROR(USR4305);
  MSGPARM(PAR.Item_Age_Days);
  MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
  MSGPARM(PAR.Production_Ovr_AgeDte_To);

  ENDIF;

  CASE;

  // IF PAR.Production Ovr AgeDte Fr is not entered
  IF PAR.Production_Ovr_AgeDte_Fr = *ZERO;

  // Send error message - 'Invalid Item Age Days'
  ERROR(USR4309);
  MSGPARM(PAR.Item_Age_Days);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Send error message - 'Invalid Production Override Age Frm/To Dates'
  ERROR(USR4310);
  MSGPARM(PAR.Production_AgeDte_Fr);
  MSGPARM(PAR.Production_AgeDte_To);

  ENDIF;

  // PAR.Error Status = CND.yes
  PAR.Error_Status = 'Y';

  ENDIF;

  ENDIF;

  ENDIF;

 }

 // PAR.Label Date  USR = LCL.Production AgeDte Fr
 PAR.Label_Date_USR = LCL.Production_AgeDte_Fr;

 EXECUTE FUNCTION(Upd Sched Qtys by Age  RT) TYPE(RTVOBJ) ARRAY(Date_for_Qty_ScheAC1547255;
 PARAMETER(PAR.Label_Date_USR);
 PARAMETER(DB1.Quantity_Scheduled);
 PARAMETER(DB1.Scheduled_Ship_Date);
 {
  //?USER: Process Data record

  //?If not past scheduled ship date add up quantities then quit.
  CASE;

  // IF DB1.Label Date LE PAR.Scheduled Ship Date
  IF DB1.Label_Date <= PAR.Scheduled_Ship_Date;

  // PAR.Quantity Ordered = DB1.Quantity Ordered + PAR.Quantity Scheduled
  PAR.Quantity_Ordered = DB1.Quantity_Ordered + PAR.Quantity_Scheduled;

  EXECUTE FUNCTION(Chg Scheduled Qty's   CH) TYPE(CHGOBJ) ARRAY(Date_for_Qty_SchedAC1547259;
  PARAMETER(DB1.Label_Date);
  PARAMETER(PAR.Quantity_Ordered);
  ENDIF;

  QUIT;

 }

 ENDIF;

}


//?USED ONLY FOR TESTING
EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Desc/Type/LotTrk  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1471511;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Warehouse_Description);
PARAMETER(WRK.Lot_Tracking_Flag);
PARAMETER(LCL.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Chilling Time     IF) TYPE(EXCINTFUN)                      AC1430022;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Chill_Time_USR);
PARAMETER(CTL.Warehouse_Code);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Chill Time        RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1304403;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Fresh_Chilling_Time);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Whs Typ/FZNCHLTME IF) TYPE(EXCINTFUN)                      AC1423925;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.Warehouse_Type);
 PARAMETER(PAR.Fresh_Chilling_Time);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Warehouse_Type);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.Warehouse Type is Frozen
  IF PAR.Warehouse_Type = 'FZ';

  EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
  PARAMETER(PAR.Company_Number);
  PARAMETER('FZNCHLTME');
  PARAMETER(PAR.System_Value_Numeric);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.Fresh Chilling Time = PAR.System Value Numeric
  PAR.Fresh_Chilling_Time = PAR.System_Value_Numeric;

  ENDIF;

 }

}


EXECUTE FUNCTION(RTV On Hand Qty       RT) TYPE(RTVOBJ) FILE(CAB0REP)           AC1517668;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Quantity_On_Hand_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.On Hand U/M1 Summary = PAR.On Hand U/M1 Summary + DB1.On Hand U/M1 Summary
 PAR.On_Hand_UOM1_Summary = PAR.On_Hand_UOM1_Summary + DB1.On_Hand_UOM1_Summary;

}


EXECUTE FUNCTION(RTV Itm Inq -Opn Ords RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1517570;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(JOB.*Job_date);
PARAMETER(CTL.Quantity_Open_7_0_USR);
PARAMETER(WRK.First_Time_Flag);
PARAMETER(PAR.Production_Date_RGF);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Header_Status);
 PARAMETER(WRK.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.Header Status is Not Comp/Canc/Conf
 IF WRK.Header_Status = 'L'/'A'/'E'/'H';

 // AND WRK.Billing Activity Type is Invoice or Transfer
 AND WRK.Billing_Activity_Type = '1'/'4';

 CASE;

 // IF PAR.First Time Flag is Yes
 IF PAR.First_Time_Flag = 'Y';

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + DB1.Quantity Scheduled
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + DB1.Quantity_Scheduled;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Scheduled Ship Date NE DB1.Scheduled Ship Date
 IF PAR.Scheduled_Ship_Date <> DB1.Scheduled_Ship_Date;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + DB1.Quantity Scheduled
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + DB1.Quantity_Scheduled;

 ENDIF;

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Current/Aged Inv  RT) TYPE(RTVOBJ) FILE(CAB1REP)           AC1518024;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Inv_Current_USR);
PARAMETER(CTL.Inv_Aged_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // Call program CLC Age Code #ofDays  XF.
 CALL PROGRAM(CLC Age Code #ofDays  XF) ('PNO6XFR');
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.@Number_of_Days_to_Age);

 CASE;

 // IF LCL.@Number of Days to Age is 7 days to 121 days
 IF LCL.@Number_of_Days_to_Age >= 7;
 AND LCL.@Number_of_Days_to_Age <= 9999;

 // PAR.Inv Aged              USR = PAR.Inv Aged              USR + DB1.Quantity on Hand - U/M1
 PAR.Inv_Aged_USR = PAR.Inv_Aged_USR + DB1.Quantity_on_Hand_UOM1;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Inv Current           USR = PAR.Inv Current           USR + DB1.Quantity on Hand - U/M1
 PAR.Inv_Current_USR = PAR.Inv_Current_USR + DB1.Quantity_on_Hand_UOM1;

 ENDIF;

}


// CTL.Inv/Ord Diff          USR = CTL.Quantity On-Hand USR - CTL.Quantity Open  7.0    USR
CTL.Inv_Ord_Diff_USR = CTL.Quantity_On_Hand_USR - CTL.Quantity_Open_7_0_USR;

//?C5516  Toggle Quantities/Weights for the on-screen values
//?F13=Toggle quantity/weight
CASE;

// IF CTL.*CMD key is CF13
IF CTL.*CMD_key = '13';

CASE;

// IF WRK.Status Flag 4  Y/N is yes
IF WRK.Status_Flag_4_Y_N = 'Y';

//?no  = display quantities
// WRK.Status Flag 4  Y/N = CND.no
WRK.Status_Flag_4_Y_N = 'N';

// CTL.Toggle Text 1         USR = CON.Qty
CTL.Toggle_Text_1_USR = 'Qty';

// CTL.Toggle Text 2         USR = CON.Qty
CTL.Toggle_Text_2_USR = 'Qty';

// CTL.Toggle Text 3         USR = CON.Qty
CTL.Toggle_Text_3_USR = 'Qty';

// CTL.Toggle Text 4         USR = CON.Qty
CTL.Toggle_Text_4_USR = 'Qty';

// IF *OTHERWISE
IF *OTHERWISE;

//?yes = display weights
// WRK.Status Flag 4  Y/N = CND.yes
WRK.Status_Flag_4_Y_N = 'Y';

// CTL.Toggle Text 1         USR = CON.Wgt
CTL.Toggle_Text_1_USR = 'Wgt';

// CTL.Toggle Text 2         USR = CON.Wgt
CTL.Toggle_Text_2_USR = 'Wgt';

// CTL.Toggle Text 3         USR = CON.Wgt
CTL.Toggle_Text_3_USR = 'Wgt';

// CTL.Toggle Text 4         USR = CON.Wgt
CTL.Toggle_Text_4_USR = 'Wgt';

ENDIF;

ENDIF;

//?** Calc weights for aged, curr, open ord, on hand, inv/ord difference
CASE;

// IF WRK.Status Flag 4  Y/N is yes
IF WRK.Status_Flag_4_Y_N = 'Y';

//?** Weight contains decimals. All weight fields are accumulated
//?** then moved into screen fields with no decimals. This
//?** action truncates the decimal place without rounding.
//?** Get Aged and Current weight, put in screen fields     1/18/06 LJB
EXECUTE FUNCTION(Rtv Current/Aged Wgt  RT) TYPE(RTVOBJ) FILE(CAB1REP)           AC1769735;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(WRK.Weight_Prod_3_USR);
PARAMETER(WRK.Weight_Prod_4_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?*****  Log
 //?** Accumulate all items 7 days old and older into aged - 1/18/06 LJB
 //?** Weight Prod 3 is Current and Weight Prod 4 is Aged
 //?*****
 //?USER: Process Data record

 EXECUTE FUNCTION(FP1309 Inventory Age  IF) TYPE(EXCINTFUN)                      AC1981251;
 {
  //?Execute internal function

  //?FP1309 Inventory Age Code Description
 }

 // Call program CLC Age Code #ofDays  XF.
 CALL PROGRAM(CLC Age Code #ofDays  XF) ('PNO6XFR');
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.@Number_of_Days_to_Age);

 //?** Accumulate all items 7 days old and older into aged - 1/18/06 LJB
 //?** Inv Aged and Inv Current are both used to store weight since
 //?** these fields are already on the Item/Warehouse Inquire Details
 //?** screen.
 //?** Calculate the weight for the quantity on hand
 CASE;

 // IF LCL.@Number of Days to Age is 7 days to 121 days & Over
 IF LCL.@Number_of_Days_to_Age >= 7;
 AND LCL.@Number_of_Days_to_Age <= 9999;

 // PAR.Weight Prod 4 USR = PAR.Weight Prod 4 USR + DB1.Quantity on Hand - Weight
 PAR.Weight_Prod_4_USR = PAR.Weight_Prod_4_USR + DB1.Quantity_on_Hand_Weight;

 //?** Calculate the weight for the quantity on hand
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Weight Prod 3 USR = PAR.Weight Prod 3 USR + DB1.Quantity on Hand - Weight
 PAR.Weight_Prod_3_USR = PAR.Weight_Prod_3_USR + DB1.Quantity_on_Hand_Weight;

 ENDIF;

}


// CTL.Inv Current           USR = WRK.Weight Prod 3 USR
CTL.Inv_Current_USR = WRK.Weight_Prod_3_USR;

// CTL.Inv Aged              USR = WRK.Weight Prod 4 USR
CTL.Inv_Aged_USR = WRK.Weight_Prod_4_USR;

//?** Get On Hand weight and put in quantity-on-hand field    1/18/06 LJB
EXECUTE FUNCTION(RTV Avail Qty - Alloc  RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC1305183;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(WRK.Weight_Prod_5_USR);
PARAMETER(LCL.Quantity_Avail_To_Sell);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.Quantity On-Hand USR = WRK.Weight Prod 5 USR
CTL.Quantity_On_Hand_USR = WRK.Weight_Prod_5_USR;

//?** Get Scheduled weight and put in Ctl.Quantity Open field
EXECUTE FUNCTION(RTV ItmInq-OpnOrds,Wgt RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1769744;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(JOB.*Job_date);
PARAMETER(WRK.Weight_Schd_1_USR);
PARAMETER(WRK.First_Time_Flag);
PARAMETER(PAR.Production_Date_RGF);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Header_Status);
 PARAMETER(WRK.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.Header Status is Not Comp/Canc/Conf
 IF WRK.Header_Status = 'L'/'A'/'E'/'H';

 // AND WRK.Billing Activity Type is Invoice or Transfer
 AND WRK.Billing_Activity_Type = '1'/'4';

 CASE;

 // IF PAR.First Time Flag is Yes
 IF PAR.First_Time_Flag = 'Y';

 // PAR.Weight Scheduled = PAR.Weight Scheduled + DB1.Weight Scheduled
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + DB1.Weight_Scheduled;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Scheduled Ship Date NE DB1.Scheduled Ship Date
 IF PAR.Scheduled_Ship_Date <> DB1.Scheduled_Ship_Date;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + DB1.Weight Scheduled
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + DB1.Weight_Scheduled;

 ENDIF;

 ENDIF;

 ENDIF;

}


// CTL.Quantity Open  7.0    USR = WRK.Weight Schd 1 USR
CTL.Quantity_Open_7_0_USR = WRK.Weight_Schd_1_USR;

//?** Calculate Inv/Ord Difference for Weights      1/18/06 LJB
//?**   Use the work fields for the calculation
// CTL.Inv/Ord Diff          USR = WRK.Weight Prod 5 USR - WRK.Weight Schd 1 USR
CTL.Inv_Ord_Diff_USR = WRK.Weight_Prod_5_USR - WRK.Weight_Schd_1_USR;

ENDIF;

EXECUTE FUNCTION(Rtv Picked Qty Tot    RT) TYPE(RTVOBJ) FILE(PPBGCPP)           AC1753222;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Quantity_Picked_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.PFS Transaction Type is SM: Ship Regular Order
 IF DB1.PFS_Transaction_Type = 'S01';

 // OR DB1.PFS Transaction Type is SM: Transfer Order
 OR DB1.PFS_Transaction_Type = 'S02';

 // PAR.Quantity Picked USR = PAR.Quantity Picked USR + DB1.PFS Transaction Quantity
 PAR.Quantity_Picked_USR = PAR.Quantity_Picked_USR + DB1.PFS_Transaction_Quantity;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Picked USR = PAR.Quantity Picked USR - DB1.PFS Transaction Quantity
 PAR.Quantity_Picked_USR = PAR.Quantity_Picked_USR - DB1.PFS_Transaction_Quantity;

 ENDIF;

}


// LCL.USR Work Field 5,0 = CTL.Item Code
LCL.USR_Work_Field_50 = CTL.Item_Code;

// LCL.USR Work Field 5A     USR = CVTVAR(LCL.USR Work Field 5,0)
LCL.USR_Work_Field_5A_USR = CVTVAR(LCL.USR_Work_Field_50);

EXECUTE FUNCTION(Rtv InTransit Qty     RT) TYPE(RTVOBJ) FILE(PMAECPP)           AC1805161;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.USR_Work_Field_5A_USR);
PARAMETER(CTL.Quantity_Transfer_Stg_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Quantity Transfer/Stg USR = PAR.Quantity Transfer/Stg USR + CON.1
 PAR.Quantity_Transfer_Stg_USR = PAR.Quantity_Transfer_Stg_USR + 1;

}


//?USER: Initialize subfile record from DBF record

CASE;

// IF DB1.Quantity on Hand - Weight is Equal to zero
IF DB1.Quantity_on_Hand_Weight = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

//?Describe Mode of Calculation
CASE;

// IF CTL.*CMD key is CF11
IF CTL.*CMD_key = '11';

// CTL.USR Description - 15 = CON.W/ Rework-All
CTL.USR_Description_15 = 'W/ Rework-All';

// PAR.Select Option = CND.Option 1
PAR.Select_Option = 1;

//?Describe Mode of Calculation
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.*CMD key is CF12
IF CTL.*CMD_key = '12';

// CTL.USR Description - 15 = CON.W/ Rework & Adj
CTL.USR_Description_15 = 'W/ Rework & Adj';

// PAR.Select Option = CND.Option 2
PAR.Select_Option = 2;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

// CTL.USR Description - 15 = CON.W/O Rework-PRD
CTL.USR_Description_15 = 'W/O Rework-PRD';

// PAR.Select Option = CND.Blank
PAR.Select_Option = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.*CMD key is CF13
IF CTL.*CMD_key = '13';

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.USR Description - 15 = CON.W/O Rework-PRD
CTL.USR_Description_15 = 'W/O Rework-PRD';

// PAR.Select Option = CND.Blank
PAR.Select_Option = *BLANK;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

// RCD.Qty Produced          USR = CON.*ZERO
RCD.Qty_Produced_USR = *ZERO;

// RCD.Qty Produced 2        USR = CON.*ZERO
RCD.Qty_Produced_2_USR = *ZERO;

EXECUTE FUNCTION(Rtv Tran qty by Trn TypRT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1460272;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Qty_Produced_USR);
PARAMETER(PAR.Select_Option);
PARAMETER('1');
{
 //?USER: Initialize routine

 //?E3014 RMC 3.4.14 include reason RWZ in production
 //?USER: Processing if Data record not found

 // PAR.Qty Produced          USR = CON.*ZERO
 PAR.Qty_Produced_USR = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF PAR.Shift Number is Not Entered
 IF PAR.Shift_Number = *BLANK;

 //?Check Selection Option for correct record selection
 CASE;

 // IF PAR.Select Option is Blank
 IF PAR.Select_Option = *BLANK;

 // AND DB1.Inventory Trans. Type is Receipt Production
 AND DB1.Inventory_Trans_Type = 'RR';

 // AND DB1.Reason Code is Production from Accu-Sort
 AND ( DB1.Reason_Code = 'PRD';

 // OR DB1.Reason Code is P05: Freezer Transfer
 OR DB1.Reason_Code = 'RWZ' );

 // PAR.Qty Produced          USR = PAR.Qty Produced          USR + DB1.Transaction
 PAR.Qty_Produced_USR = PAR.Qty_Produced_USR + DB1.Transaction_Quantity;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?Check Selection Option for correct record selection
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Select Option is Option 1
 IF PAR.Select_Option = '1';

 // AND DB1.Inventory Trans. Type is Receipt Production
 AND DB1.Inventory_Trans_Type = 'RR';

 // PAR.Qty Produced          USR = PAR.Qty Produced          USR + DB1.Transaction
 PAR.Qty_Produced_USR = PAR.Qty_Produced_USR + DB1.Transaction_Quantity;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Select Option is Option 2
 IF PAR.Select_Option = '2';

 CASE;

 // IF DB1.Inventory Trans. Type is Receipt Production
 IF DB1.Inventory_Trans_Type = 'RR';

 // OR DB1.Inventory Trans. Type is Adjustment Quantity
 OR DB1.Inventory_Trans_Type = 'A';

 // PAR.Qty Produced          USR = PAR.Qty Produced          USR + DB1.Transaction
 PAR.Qty_Produced_USR = PAR.Qty_Produced_USR + DB1.Transaction_Quantity;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Shift Number EQ PAR.Shift Number
 IF DB1.Shift_Number = PAR.Shift_Number;

 //?Check Selection Option for correct record selection
 CASE;

 // IF PAR.Select Option is Blank
 IF PAR.Select_Option = *BLANK;

 // AND DB1.Inventory Trans. Type is Receipt Production
 AND DB1.Inventory_Trans_Type = 'RR';

 // AND DB1.Reason Code is Production from Accu-Sort
 AND ( DB1.Reason_Code = 'PRD';

 // OR DB1.Reason Code is P05: Freezer Transfer
 OR DB1.Reason_Code = 'RWZ' );

 // PAR.Qty Produced          USR = PAR.Qty Produced          USR + DB1.Transaction
 PAR.Qty_Produced_USR = PAR.Qty_Produced_USR + DB1.Transaction_Quantity;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?Check Selection Option for correct record selection
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Select Option is Option 1
 IF PAR.Select_Option = '1';

 // AND DB1.Inventory Trans. Type is Receipt Production
 AND DB1.Inventory_Trans_Type = 'RR';

 // PAR.Qty Produced          USR = PAR.Qty Produced          USR + DB1.Transaction
 PAR.Qty_Produced_USR = PAR.Qty_Produced_USR + DB1.Transaction_Quantity;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Select Option is Option 2
 IF PAR.Select_Option = '2';

 CASE;

 // IF DB1.Inventory Trans. Type is Receipt Production
 IF DB1.Inventory_Trans_Type = 'RR';

 // OR DB1.Inventory Trans. Type is Adjustment Quantity
 OR DB1.Inventory_Trans_Type = 'A';

 // PAR.Qty Produced          USR = PAR.Qty Produced          USR + DB1.Transaction
 PAR.Qty_Produced_USR = PAR.Qty_Produced_USR + DB1.Transaction_Quantity;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Tran qty by Trn TypRT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1460272;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Qty_Produced_2_USR);
PARAMETER(PAR.Select_Option);
PARAMETER('2');
{
 //?USER: Initialize routine

 //?E3014 RMC 3.4.14 include reason RWZ in production
 //?USER: Processing if Data record not found

 // PAR.Qty Produced          USR = CON.*ZERO
 PAR.Qty_Produced_USR = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF PAR.Shift Number is Not Entered
 IF PAR.Shift_Number = *BLANK;

 //?Check Selection Option for correct record selection
 CASE;

 // IF PAR.Select Option is Blank
 IF PAR.Select_Option = *BLANK;

 // AND DB1.Inventory Trans. Type is Receipt Production
 AND DB1.Inventory_Trans_Type = 'RR';

 // AND DB1.Reason Code is Production from Accu-Sort
 AND ( DB1.Reason_Code = 'PRD';

 // OR DB1.Reason Code is P05: Freezer Transfer
 OR DB1.Reason_Code = 'RWZ' );

 // PAR.Qty Produced          USR = PAR.Qty Produced          USR + DB1.Transaction
 PAR.Qty_Produced_USR = PAR.Qty_Produced_USR + DB1.Transaction_Quantity;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?Check Selection Option for correct record selection
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Select Option is Option 1
 IF PAR.Select_Option = '1';

 // AND DB1.Inventory Trans. Type is Receipt Production
 AND DB1.Inventory_Trans_Type = 'RR';

 // PAR.Qty Produced          USR = PAR.Qty Produced          USR + DB1.Transaction
 PAR.Qty_Produced_USR = PAR.Qty_Produced_USR + DB1.Transaction_Quantity;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Select Option is Option 2
 IF PAR.Select_Option = '2';

 CASE;

 // IF DB1.Inventory Trans. Type is Receipt Production
 IF DB1.Inventory_Trans_Type = 'RR';

 // OR DB1.Inventory Trans. Type is Adjustment Quantity
 OR DB1.Inventory_Trans_Type = 'A';

 // PAR.Qty Produced          USR = PAR.Qty Produced          USR + DB1.Transaction
 PAR.Qty_Produced_USR = PAR.Qty_Produced_USR + DB1.Transaction_Quantity;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Shift Number EQ PAR.Shift Number
 IF DB1.Shift_Number = PAR.Shift_Number;

 //?Check Selection Option for correct record selection
 CASE;

 // IF PAR.Select Option is Blank
 IF PAR.Select_Option = *BLANK;

 // AND DB1.Inventory Trans. Type is Receipt Production
 AND DB1.Inventory_Trans_Type = 'RR';

 // AND DB1.Reason Code is Production from Accu-Sort
 AND ( DB1.Reason_Code = 'PRD';

 // OR DB1.Reason Code is P05: Freezer Transfer
 OR DB1.Reason_Code = 'RWZ' );

 // PAR.Qty Produced          USR = PAR.Qty Produced          USR + DB1.Transaction
 PAR.Qty_Produced_USR = PAR.Qty_Produced_USR + DB1.Transaction_Quantity;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?Check Selection Option for correct record selection
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Select Option is Option 1
 IF PAR.Select_Option = '1';

 // AND DB1.Inventory Trans. Type is Receipt Production
 AND DB1.Inventory_Trans_Type = 'RR';

 // PAR.Qty Produced          USR = PAR.Qty Produced          USR + DB1.Transaction
 PAR.Qty_Produced_USR = PAR.Qty_Produced_USR + DB1.Transaction_Quantity;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Select Option is Option 2
 IF PAR.Select_Option = '2';

 CASE;

 // IF DB1.Inventory Trans. Type is Receipt Production
 IF DB1.Inventory_Trans_Type = 'RR';

 // OR DB1.Inventory Trans. Type is Adjustment Quantity
 OR DB1.Inventory_Trans_Type = 'A';

 // PAR.Qty Produced          USR = PAR.Qty Produced          USR + DB1.Transaction
 PAR.Qty_Produced_USR = PAR.Qty_Produced_USR + DB1.Transaction_Quantity;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

}


// RCD.@Calc 11,0 = RCD.Quantity on Hand - U/M1
RCD.@Calc_110 = RCD.Quantity_on_Hand_UOM1;

// Call program CLC Age Code #ofDays  XF.
CALL PROGRAM(CLC Age Code #ofDays  XF) ('PNO6XFR');
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.@Number_of_Days_to_Age);

EXECUTE FUNCTION(Rtv Order Age Quantity RT) TYPE(RTVOBJ) ARRAY(Date_for_Qty_ScheAC1547267;
PARAMETER(RCD.Label_Date);
PARAMETER(RCD.Quantity_Ordered_1_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(CNV cyymmdd to yyyymmdd) TYPE(EXCINTFUN)                       AC1732965;
PARAMETER(RCD.Label_Date);
PARAMETER(LCL.PFS_Label_Date);
{
 //?Execute internal function

 // LCL.Year Code = PAR.Date In  (7,0) USR *YEAR
 LCL.Year_Code = DATEDTLS(PAR.Date_In_70_USR 'YR' 1111111 'NONE' 'N' 1);

 // LCL.Month NBR USR = PAR.Date In  (7,0) USR *MONTH
 LCL.Month_NBR_USR = DATEDTLS(PAR.Date_In_70_USR 'MO' 1111111 'NONE' 'N' 1);

 // LCL.Day of Month USR = PAR.Date In  (7,0) USR *DAY OF MONTH
 LCL.Day_of_Month_USR = DATEDTLS(PAR.Date_In_70_USR 'DM' 1111111 'NONE' 'N' 1);

 // PAR.Year Alpha (YYYY) USR = CVTVAR(LCL.Year Code)
 PAR.Year_Alpha_YYYY_USR = CVTVAR(LCL.Year_Code);

 // PAR.Month (Char) USR = CVTVAR(LCL.Month NBR USR)
 PAR.Month_Char_USR = CVTVAR(LCL.Month_NBR_USR);

 // PAR.Day   (Char) USR = CVTVAR(LCL.Day of Month USR)
 PAR.Day_Char_USR = CVTVAR(LCL.Day_of_Month_USR);

 // PAR.Date (Char-8) USR = CONCAT(PAR.Year Alpha (YYYY) USR,PAR.Month (Char) USR,CON.*ZERO)
 PAR.Date_Char_8_USR = PAR.Year_Alpha_YYYY_USR + PAR.Month_Char_USR (*ZERO);

 // PAR.Date (Char-8) USR = CONCAT(PAR.Date (Char-8) USR,PAR.Day   (Char) USR,CON.*ZERO)
 PAR.Date_Char_8_USR = PAR.Date_Char_8_USR + PAR.Day_Char_USR (*ZERO);

 // PAR.Date Out (8,0) USR = CVTVAR(PAR.Date (Char-8) USR)
 PAR.Date_Out_80_USR = CVTVAR(PAR.Date_Char_8_USR);

}


EXECUTE FUNCTION(Rtv Picked Qty        RT) TYPE(RTVOBJ) FILE(PPBGCPP)           AC1753183;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Item_Code);
PARAMETER(LCL.PFS_Label_Date);
PARAMETER(RCD.Quantity_Picked_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Quantity Picked USR = PAR.Quantity Picked USR + DB1.PFS Transaction Quantity
 PAR.Quantity_Picked_USR = PAR.Quantity_Picked_USR + DB1.PFS_Transaction_Quantity;

}


// RCD.Quantity Avail  7.0  USR = RCD.@Calc 11,0 - RCD.Quantity Picked USR
RCD.Quantity_Avail_7_0_USR = RCD.@Calc_110 - RCD.Quantity_Picked_USR;

//?** Change Toggle calculations. They were calculating an estimated
//?** weight based on the conversion factor. Users need to see the
//?** actual weight stored in the files.       1/18/06  LJB
//?** Weight fields are placed in the quantity user fields on the
//?** screen when F13 is pressed.
//?** Put detail fields for weights onto the screen    1/18/06  LJB
CASE;

// IF WRK.Status Flag 4  Y/N is yes
IF WRK.Status_Flag_4_Y_N = 'Y';

//?** Put Quantity on-hand - weight, into the screen field      1/18/06 LJB
//?** This particular move truncates the decimal places.
// RCD.@Calc 11,0 = RCD.Quantity on Hand - Weight
RCD.@Calc_110 = RCD.Quantity_on_Hand_Weight;

//?Get weight produced by Shift 1 & Shift 2       1/18/06 LJB
DO;

//?** Weight contains decimals. All weight fields are accumulated
//?** then moved into screen fields with no decimal places. This
//?** action truncates the decimal place without rounding.
// RCD.Qty Produced          USR = CON.*ZERO
RCD.Qty_Produced_USR = *ZERO;

// RCD.Qty Produced 2        USR = CON.*ZERO
RCD.Qty_Produced_2_USR = *ZERO;

// WRK.Weight Prod 1 USR = CON.*ZERO
WRK.Weight_Prod_1_USR = *ZERO;

// WRK.Weight Prod 2 USR = CON.*ZERO
WRK.Weight_Prod_2_USR = *ZERO;

EXECUTE FUNCTION(Rtv Tran Wgt by Trn TypRT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1769746;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(WRK.Weight_Prod_1_USR);
PARAMETER(PAR.Select_Option);
PARAMETER('1');
{
 //?USER: Processing if Data record not found

 // PAR.Weight Prod usr = CON.*ZERO
 PAR.Weight_Prod_usr = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF PAR.Shift Number is Not Entered
 IF PAR.Shift_Number = *BLANK;

 //?Check Selection Option for correct record selection
 CASE;

 // IF PAR.Select Option is Blank
 IF PAR.Select_Option = *BLANK;

 // AND DB1.Inventory Trans. Type is Receipt Production
 AND DB1.Inventory_Trans_Type = 'RR';

 // AND DB1.Reason Code is Production from Accu-Sort
 AND DB1.Reason_Code = 'PRD';

 // PAR.Weight Prod usr = PAR.Weight Prod usr + DB1.Transaction Weight
 PAR.Weight_Prod_usr = PAR.Weight_Prod_usr + DB1.Transaction_Weight;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?Check Selection Option for correct record selection
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Select Option is Option 1
 IF PAR.Select_Option = '1';

 // AND DB1.Inventory Trans. Type is Receipt Production
 AND DB1.Inventory_Trans_Type = 'RR';

 // PAR.Weight Prod usr = PAR.Weight Prod usr + DB1.Transaction Weight
 PAR.Weight_Prod_usr = PAR.Weight_Prod_usr + DB1.Transaction_Weight;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Select Option is Option 2
 IF PAR.Select_Option = '2';

 CASE;

 // IF DB1.Inventory Trans. Type is Receipt Production
 IF DB1.Inventory_Trans_Type = 'RR';

 // OR DB1.Inventory Trans. Type is Adjustment Quantity
 OR DB1.Inventory_Trans_Type = 'A';

 // PAR.Weight Prod usr = PAR.Weight Prod usr + DB1.Transaction Weight
 PAR.Weight_Prod_usr = PAR.Weight_Prod_usr + DB1.Transaction_Weight;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Shift Number EQ PAR.Shift Number
 IF DB1.Shift_Number = PAR.Shift_Number;

 //?Check Selection Option for correct record selection
 CASE;

 // IF PAR.Select Option is Blank
 IF PAR.Select_Option = *BLANK;

 // AND DB1.Inventory Trans. Type is Receipt Production
 AND DB1.Inventory_Trans_Type = 'RR';

 // AND DB1.Reason Code is Production from Accu-Sort
 AND DB1.Reason_Code = 'PRD';

 // PAR.Weight Prod usr = PAR.Weight Prod usr + DB1.Transaction Weight
 PAR.Weight_Prod_usr = PAR.Weight_Prod_usr + DB1.Transaction_Weight;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?Check Selection Option for correct record selection
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Select Option is Option 1
 IF PAR.Select_Option = '1';

 // AND DB1.Inventory Trans. Type is Receipt Production
 AND DB1.Inventory_Trans_Type = 'RR';

 // PAR.Weight Prod usr = PAR.Weight Prod usr + DB1.Transaction Weight
 PAR.Weight_Prod_usr = PAR.Weight_Prod_usr + DB1.Transaction_Weight;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Select Option is Option 2
 IF PAR.Select_Option = '2';

 CASE;

 // IF DB1.Inventory Trans. Type is Receipt Production
 IF DB1.Inventory_Trans_Type = 'RR';

 // OR DB1.Inventory Trans. Type is Adjustment Quantity
 OR DB1.Inventory_Trans_Type = 'A';

 // PAR.Weight Prod usr = PAR.Weight Prod usr + DB1.Transaction Weight
 PAR.Weight_Prod_usr = PAR.Weight_Prod_usr + DB1.Transaction_Weight;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Tran Wgt by Trn TypRT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1769746;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(WRK.Weight_Prod_2_USR);
PARAMETER(PAR.Select_Option);
PARAMETER('2');
{
 //?USER: Processing if Data record not found

 // PAR.Weight Prod usr = CON.*ZERO
 PAR.Weight_Prod_usr = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF PAR.Shift Number is Not Entered
 IF PAR.Shift_Number = *BLANK;

 //?Check Selection Option for correct record selection
 CASE;

 // IF PAR.Select Option is Blank
 IF PAR.Select_Option = *BLANK;

 // AND DB1.Inventory Trans. Type is Receipt Production
 AND DB1.Inventory_Trans_Type = 'RR';

 // AND DB1.Reason Code is Production from Accu-Sort
 AND DB1.Reason_Code = 'PRD';

 // PAR.Weight Prod usr = PAR.Weight Prod usr + DB1.Transaction Weight
 PAR.Weight_Prod_usr = PAR.Weight_Prod_usr + DB1.Transaction_Weight;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?Check Selection Option for correct record selection
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Select Option is Option 1
 IF PAR.Select_Option = '1';

 // AND DB1.Inventory Trans. Type is Receipt Production
 AND DB1.Inventory_Trans_Type = 'RR';

 // PAR.Weight Prod usr = PAR.Weight Prod usr + DB1.Transaction Weight
 PAR.Weight_Prod_usr = PAR.Weight_Prod_usr + DB1.Transaction_Weight;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Select Option is Option 2
 IF PAR.Select_Option = '2';

 CASE;

 // IF DB1.Inventory Trans. Type is Receipt Production
 IF DB1.Inventory_Trans_Type = 'RR';

 // OR DB1.Inventory Trans. Type is Adjustment Quantity
 OR DB1.Inventory_Trans_Type = 'A';

 // PAR.Weight Prod usr = PAR.Weight Prod usr + DB1.Transaction Weight
 PAR.Weight_Prod_usr = PAR.Weight_Prod_usr + DB1.Transaction_Weight;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Shift Number EQ PAR.Shift Number
 IF DB1.Shift_Number = PAR.Shift_Number;

 //?Check Selection Option for correct record selection
 CASE;

 // IF PAR.Select Option is Blank
 IF PAR.Select_Option = *BLANK;

 // AND DB1.Inventory Trans. Type is Receipt Production
 AND DB1.Inventory_Trans_Type = 'RR';

 // AND DB1.Reason Code is Production from Accu-Sort
 AND DB1.Reason_Code = 'PRD';

 // PAR.Weight Prod usr = PAR.Weight Prod usr + DB1.Transaction Weight
 PAR.Weight_Prod_usr = PAR.Weight_Prod_usr + DB1.Transaction_Weight;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?Check Selection Option for correct record selection
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Select Option is Option 1
 IF PAR.Select_Option = '1';

 // AND DB1.Inventory Trans. Type is Receipt Production
 AND DB1.Inventory_Trans_Type = 'RR';

 // PAR.Weight Prod usr = PAR.Weight Prod usr + DB1.Transaction Weight
 PAR.Weight_Prod_usr = PAR.Weight_Prod_usr + DB1.Transaction_Weight;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Select Option is Option 2
 IF PAR.Select_Option = '2';

 CASE;

 // IF DB1.Inventory Trans. Type is Receipt Production
 IF DB1.Inventory_Trans_Type = 'RR';

 // OR DB1.Inventory Trans. Type is Adjustment Quantity
 OR DB1.Inventory_Trans_Type = 'A';

 // PAR.Weight Prod usr = PAR.Weight Prod usr + DB1.Transaction Weight
 PAR.Weight_Prod_usr = PAR.Weight_Prod_usr + DB1.Transaction_Weight;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

}


// RCD.Qty Produced          USR = WRK.Weight Prod 1 USR
RCD.Qty_Produced_USR = WRK.Weight_Prod_1_USR;

// RCD.Qty Produced 2        USR = WRK.Weight Prod 2 USR
RCD.Qty_Produced_2_USR = WRK.Weight_Prod_2_USR;

ENDDO;

//?** Weight committed is estimated at this point, per Purva
//?** Multiply the Quantity Committed by the conversion factor
//?** in the control record (u/m primary)      1/19/06  LJB
// WRK.Weight Ordered = RCD.Quantity Ordered 1 USR * CTL.Conversion Factor 1 *Rounded
WRK.Weight_Ordered = RCD.Quantity_Ordered_1_USR * CTL.Conversion_Factor_1 'H';

// RCD.Quantity Ordered 1 USR = WRK.Weight Ordered
RCD.Quantity_Ordered_1_USR = WRK.Weight_Ordered;

//?** Calc 11,0 contains Weight (Quantity On-Hand-weight)
EXECUTE FUNCTION(Rtv Picked Qty        RT) TYPE(RTVOBJ) FILE(PPBGCPP)           AC1753183;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Item_Code);
PARAMETER(LCL.PFS_Label_Date);
PARAMETER(RCD.Quantity_Picked_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Quantity Picked USR = PAR.Quantity Picked USR + DB1.PFS Transaction Quantity
 PAR.Quantity_Picked_USR = PAR.Quantity_Picked_USR + DB1.PFS_Transaction_Quantity;

}


// RCD.Quantity Avail  7.0  USR = RCD.@Calc 11,0 - RCD.Quantity Picked USR
RCD.Quantity_Avail_7_0_USR = RCD.@Calc_110 - RCD.Quantity_Picked_USR;

ENDIF;

ENDIF;

// Execute function SFL Fold/Drop  RPG 2  US.
EXECUTE FUNCTION(SFL Fold/Drop  RPG 2  US) TYPE(EXCUSRSRC) ('POBKUFR');
{
 C     MODE          IFEQ      '0'
 C                   SETON                                        89
 C                   ELSE
 C                   SETOFF                                       89
 C                   ENDIF
}


//?USER: Process subfile control (Pre-confirm)

CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

// OR CTL.*CMD key is CF11
OR CTL.*CMD_key = '11';

// OR CTL.*CMD key is CF12
OR CTL.*CMD_key = '12';

// OR CTL.*CMD key is CF13
OR CTL.*CMD_key = '13';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

QUIT;

ENDIF;

//?USER: Process command keys

CASE;

// IF CTL.*CMD key is CF14
IF CTL.*CMD_key = '14';

CASE;

// IF PAR.*Initial call is *NO
IF PAR.*Initial_call = 'N';

RETURN;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.*Initial call = CND.*NO
PAR.*Initial_call = 'N';

// Call program Zzz Item Orders       DF.
CALL PROGRAM(Zzz Item Orders       DF) ('PDO7DFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(JOB.*Job_date);
PARAMETER(CTL.Name);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.*Initial_call);
PARAMETER(LCL.Warehouse_Type);

// PAR.*Initial call = CND.*YES
PAR.*Initial_call = 'Y';

ENDIF;

ENDIF;

//?USER: Exit program processing

CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

PGM.*Return_code = 'Y2U9999';

RETURN;

ENDIF;

