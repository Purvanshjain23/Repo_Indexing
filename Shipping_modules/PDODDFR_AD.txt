// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDODDFR
// ?Date: 14.08.2025 Time: 03:32:30
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PAR.Application Code = CND.Traffic
PAR.Application_Code = 'TRF';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(CTL.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize subfile control

EXECUTE FUNCTION(RTV WW Screen Fields   RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1384832;
PARAMETER(PAR.Load_ID);
PARAMETER(CTL.Scheduled_Ship_Date);
PARAMETER(CTL.Load_Status);
PARAMETER(CTL.Total_Load_Order_Weight);
PARAMETER(WRK.Flat_Amount);
PARAMETER(WRK.Allocate_Pounds_Miles);
PARAMETER(CTL.Trailer_ID_USR);
PARAMETER(CTL.Carrier_Code);
PARAMETER(WRK.Truck_Size);
PARAMETER(WRK.Load_Type);
PARAMETER(WRK.Schedule_Sequence_Number);
PARAMETER(WRK.Total_Load_Miles);
PARAMETER(CTL.Shipping_Method);
PARAMETER(WRK.Ship_From_Warehouse);
PARAMETER(WRK.Ship_To_State_Code);
PARAMETER(WRK.Load_Acceptance_Flag);
PARAMETER(CTL.Tot_Pallet_Tare);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(CTL.Carrier_Code);
PARAMETER(CTL.USR_Carrier_Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


EXECUTE FUNCTION(RTV Carrier Broker     RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1475617;
PARAMETER(PAR.Load_ID);
PARAMETER(CTL.Carrier_Broker);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Carr,Pln Shp dt   RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC2070153;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Carrier_Code);
PARAMETER(CTL.TPM_Planned_Ship_Date);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Carrier Name DRV) TYPE(DRVFLD)                                 AC1582201;
PARAMETER(CTL.Carrier_Name_DRV);
PARAMETER(CTL.Carrier_Broker);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Carrier_Name_DRV);
 PARAMETER(NLL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

}


EXECUTE FUNCTION(Rtv Min & Max Pounds  RT) TYPE(RTVOBJ) FILE(OMFKREP)           AC1197715;
PARAMETER(WRK.Truck_Size);
PARAMETER(PAR.Maximum_pounds);
PARAMETER(PAR.Minimum_pounds);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Port Deliv Term has been moved to the subfile and rtv'd
//?** using order header info                 05/04/2007 oms011
EXECUTE FUNCTION(RTV GrsWgt w/PltTr Ld RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1601442;
PARAMETER(CTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(PAR.USR_Weight_Accumulated);
PARAMETER(CTL.Load_Status);
{
 //?USER: Initialize routine

 // PAR.USR Weight Accumulated = CON.*ZERO
 PAR.USR_Weight_Accumulated = *ZERO;

 CASE;

 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 EXECUTE FUNCTION(RTV Pallet/Tare        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1585842;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Pallets_Loaded);
 PARAMETER(LCL.Avg_Pallet_Tare);
 PARAMETER(LCL.Tot_Pallet_Tare);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?***** Change log and comments
 DO;

 //?** 01/18/2010 PKD E000261 Pass the Average Pallet Tare
 ENDDO;

 //?USER: Process Data record

 //?01/18/10 PKD E000261 SEND in LCL.Avg Pallet Tare
 // Call program RTV Gross Wgt/Qty     XF.
 CALL PROGRAM(RTV Gross Wgt/Qty     XF) ('PQPQXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.USR_Weight_Accumulated);
 PARAMETER(LCL.Order_Quantity);
 PARAMETER(LCL.Avg_Pallet_Tare);

 //?USER: Exit processing

 CASE;

 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 EXECUTE FUNCTION(RTV Pallet/Tare        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1585842;
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.Pallets_Loaded);
 PARAMETER(LCL.Avg_Pallet_Tare);
 PARAMETER(LCL.Tot_Pallet_Tare);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.USR Weight Accumulated = PAR.USR Weight Accumulated + LCL.Tot Pallet Tare
 PAR.USR_Weight_Accumulated = PAR.USR_Weight_Accumulated + LCL.Tot_Pallet_Tare;

 ENDIF;

}


// CTL.Weight Adjust = PAR.USR Weight Accumulated
CTL.Weight_Adjust = PAR.USR_Weight_Accumulated;

//?Maximum message
CASE;

// IF CTL.Weight Adjust GT PAR.Maximum pounds
IF CTL.Weight_Adjust > PAR.Maximum_pounds;

// AND PAR.Maximum pounds NE WRK.ZERO
AND PAR.Maximum_pounds <> WRK.ZERO;

// Send information message - 'Load weight is greater than maximum pounds allowed.'
MESSAGE(USR1261 *INFO);

ENDIF;

//?USER: Initialize subfile record from DBF record

SET CURSOR;

EXECUTE FUNCTION(RTV All Header Fields  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1326885;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(RCD.Order_Type_Sales);
PARAMETER(WRK.AR_Customer_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Ship_To_Name);
PARAMETER(RCD.Address_Line_1);
PARAMETER(RCD.Address_Line_2);
PARAMETER(RCD.Address_Line_3);
PARAMETER(RCD.Ship_To_City);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(WRK.Ship_To_Zip_Postal_Code);
PARAMETER(WRK.Bill_to_Customer);
PARAMETER(WRK.Bill_to_Name);
PARAMETER(WRK.Bill_to_Address_Line_1);
PARAMETER(WRK.Bill_to_Address_Line_2);
PARAMETER(WRK.Bill_to_Address_Line_3);
PARAMETER(WRK.Bill_to_City);
PARAMETER(WRK.Bill_to_State_Code);
PARAMETER(WRK.Bill_to_Zip_Postal_Code);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER(RCD.Order_Date);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(WRK.Cancel_Date);
PARAMETER(WRK.Terms_Code);
PARAMETER(RCD.Special_Instructions);
PARAMETER(RCD.Special_Instructions_2);
PARAMETER(WRK.Carrier_Code);
PARAMETER(WRK.Comment_Print_Acknowledge);
PARAMETER(WRK.Comment_Print_Inv_Cr_Memo);
PARAMETER(WRK.Comment_Print_Pick_Slip);
PARAMETER(WRK.Comment_Print_Ship_Doc);
PARAMETER(WRK.Reason_Code);
PARAMETER(WRK.Order_in_Use);
PARAMETER(RCD.Header_Status);
PARAMETER(WRK.Header_Status_Last);
PARAMETER(WRK.Order_Type_Print_Status);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(WRK.User_Original_Entry);
PARAMETER(RCD.Date_of_Original_Entry);
PARAMETER(WRK.Order_Value_Total);
PARAMETER(WRK.Order_Weight_Total);
PARAMETER(RCD.Credit_Hold);
PARAMETER(RCD.Production_Hold);
PARAMETER(WRK.New_Customer_Hold);
PARAMETER(RCD.Requested_Delivery_Date);
PARAMETER(RCD.Requested_Delivery_Time);
PARAMETER(WRK.Accounts_Receiv_Ent_1);
PARAMETER(WRK.Accounts_Receiv_Ent_2);
PARAMETER(WRK.Load_ID);
PARAMETER(WRK.Absorbed_Freight_Rate_CWT);
PARAMETER(WRK.Rated_Freight);
PARAMETER(WRK.LTL_Flag);
PARAMETER(WRK.Price_Audit);
PARAMETER(WRK.Price_Status);
PARAMETER(WRK.Shipping_Method);
PARAMETER(PAR.Export_Status);
PARAMETER(RCD.Palletize);
PARAMETER(RCD.Shrink_Wrap);
PARAMETER(RCD.Slip_Sheet);
PARAMETER(WRK.Age_Code);
PARAMETER(WRK.Reefer_Temperature);
PARAMETER(WRK.Load_Type);
PARAMETER(WRK.Attach_to_Invoice_Number);
PARAMETER(WRK.Load_Plan_Order);
PARAMETER(WRK.Print_Pick_Slip);
PARAMETER(WRK.Resell_Reference_Number);
PARAMETER(WRK.Special_Comment_1);
PARAMETER(WRK.Special_Comment_2);
PARAMETER(WRK.Affect_Auto_Accruals);
PARAMETER(RCD.Sales_Route_Code);
PARAMETER(WRK.Manager_Level_Code);
PARAMETER(WRK.VP_Level_Code);
PARAMETER(WRK.Attach_to_Order_Number);
PARAMETER(WRK.Reason_for_Price_Audit);
PARAMETER(WRK.Invoice_Number);
PARAMETER(WRK.Invoice_Suffix);
PARAMETER(WRK.Invoice_Date);
PARAMETER(RCD.Event_Code);
PARAMETER(WRK.Trans_Contol_AS400_Plant);
PARAMETER(WRK.Modified_Flag);
PARAMETER(WRK.A_R_order_Value_Total);
PARAMETER(WRK.Billing_Activity_Type);
PARAMETER(RCD.Block_Order_Flag);
PARAMETER(WRK.Order_Certification_Flag);
PARAMETER(WRK.EDI_Status_1);
PARAMETER(WRK.EDI_Status_2);
PARAMETER(WRK.EDI_Status_3);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Telephone Number   RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1333192;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Telephone_Number_FF);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Trans_Contol_AS400_Plant);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(RTV Total Qty & Weight RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428887;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.USR_Quantity_9_0);
PARAMETER(RCD.USR_Weight_9_1);
{
 //?USER: Initialize routine

 // WRK.Quantity Allocated = CON.*ZERO
 WRK.Quantity_Scheduled = *ZERO;

 // WRK.Weight Allocated = CON.*ZERO
 WRK.Weight_Scheduled = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 // WRK.Quantity Scheduled = WRK.Quantity Scheduled + DB1.Quantity Scheduled
 WRK.Quantity_Scheduled = WRK.Quantity_Scheduled + DB1.Quantity_Scheduled;

 // WRK.Weight Scheduled = WRK.Weight Scheduled + DB1.Weight Scheduled
 WRK.Weight_Scheduled = WRK.Weight_Scheduled + DB1.Weight_Scheduled;

 // WRK.Weight Shipped Total = WRK.Weight Shipped Total + DB1.Weight Shipped Total
 WRK.Weight_Shipped_Total = WRK.Weight_Shipped_Total + DB1.Weight_Shipped_Total;

 // WRK.Tare Weight Total = WRK.Tare Weight Total + DB1.Tare Weight Total
 WRK.Tare_Weight_Total = WRK.Tare_Weight_Total + DB1.Tare_Weight_Total;

 ENDIF;

 //?USER: Exit processing

 // PAR.USR Quantity, 9.0 = WRK.Quantity Scheduled * CON.1 *Rounded
 PAR.USR_Quantity_9_0 = WRK.Quantity_Scheduled * 1 'H';

 // PAR.USR Weight   9.1 = WRK.Weight Scheduled * CON.1 *Rounded
 PAR.USR_Weight_9_1 = WRK.Weight_Scheduled * 1 'H';

 // PAR.USR Weight   9.1  2 = WRK.Weight Shipped Total * CON.1 *Rounded
 PAR.USR_Weight_9_1_2 = WRK.Weight_Shipped_Total * 1 'H';

}


//?If Export replace address information with Sail Port information
CASE;

// IF PAR.Export Status is yes
IF PAR.Export_Status = 'Y';

//?** Retrieve the Shipping Line and Deliv Term from the new Order
//?** Header Extension file                 05/04/2007 LJB FP11014
EXECUTE FUNCTION(RTV OHE Ship fields    RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC1814635;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(PAR.Shipping_Line);
PARAMETER(PAR.Port_Delv_Terminal);
PARAMETER(LCL.OHE_City);
PARAMETER(LCL.OHE_Vessel_Airline);
PARAMETER(LCL.OHE_Voyage_Flight);
PARAMETER(LCL.OHE_Booking_Number);
PARAMETER(LCL.OHE_Discharge_Port_Airprt);
PARAMETER(LCL.OHE_Sail_Flight_Date);
PARAMETER(LCL.OHE_Port_Cut_Date);
PARAMETER(LCL.OHE_Arrival_Date);
PARAMETER(LCL.OHE_Late_Delivery_Code);
PARAMETER(LCL.OHE_Ship_Status);
PARAMETER(LCL.OHE_Container_Number);
PARAMETER(LCL.OHE_Comment_1);
PARAMETER(LCL.OHE_Comment_2);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Format fields and put on the screen
CASE;

// IF PAR.Port Delv Terminal is Entered
IF PAR.Port_Delv_Terminal <> *BLANK;

EXECUTE FUNCTION(RTV Shipping Line/PortsRT) TYPE(RTVOBJ) FILE(PDLCREP)          AC1447742;
PARAMETER(PAR.Shipping_Line);
PARAMETER(PAR.Port_Delv_Terminal);
PARAMETER(RCD.Ship_To_City);
PARAMETER(RCD.Address_Line_1);
PARAMETER(WRK.Port_Address_Line_2);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(WRK.Port_Zip_Postal_Code);
PARAMETER(WRK.Port_Phone_Number);
PARAMETER(WRK.Port_Fax_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


// RCD.Port Delv Terminal = PAR.Port Delv Terminal
RCD.Port_Delv_Terminal = PAR.Port_Delv_Terminal;

// RCD.Telephone Number FF = CON.*BLANK
RCD.Telephone_Number_FF = *BLANK;

// WRK.Value Alpha 13  (11) = WRK.Sail Port Phone Number
WRK.Value_Alpha_13_11 = WRK.Port_Phone_Number;

// WRK.USR Reason Code 3 = SUBSTRING(WRK.Value Alpha 13  (11),CON.2,CON.3)
WRK.USR_Reason_Code_3 = SUBSTRING(WRK.Value_Alpha_13_11:2:3);

// WRK.USR Work Field 3A = SUBSTRING(WRK.Value Alpha 13  (11),CON.5,CON.3)
WRK.USR_Work_Field_3A = SUBSTRING(WRK.Value_Alpha_13_11:5:3);

// WRK.USR To Format = SUBSTRING(WRK.Value Alpha 13  (11),CON.8,CON.4)
WRK.USR_To_Format = SUBSTRING(WRK.Value_Alpha_13_11:8:4);

// WRK.CMS Contact Phone ext = CONCAT(WRK.USR Reason Code 3,CON.-,CON.*ZERO)
WRK.CMS_Contact_Phone_ext = WRK.USR_Reason_Code_3 + '-' (*ZERO);

// WRK.CMS Primary SIC = CONCAT(WRK.USR Work Field 3A,CON.-,CON.*ZERO)
WRK.CMS_Primary_SIC = WRK.USR_Work_Field_3A + '-' (*ZERO);

// WRK.@Alpha 8 = CONCAT(WRK.CMS Contact Phone ext,WRK.CMS Primary SIC,CON.*ZERO)
WRK.@Alpha_8 = WRK.CMS_Contact_Phone_ext + WRK.CMS_Primary_SIC (*ZERO);

// WRK.@Alpha 12 = CONCAT(WRK.@Alpha 8,WRK.USR To Format,CON.*ZERO)
WRK.@Alpha_12 = WRK.@Alpha_8 + WRK.USR_To_Format (*ZERO);

// RCD.Telephone Number FF = WRK.@Alpha 12
RCD.Telephone_Number_FF = WRK.@Alpha_12;

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV OHE for Ord Entry RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC1914702;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(RCD.Delivery_P_O_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(RTV Pallet/Tare        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1585842;
PARAMETER(RCD.Load_ID);
PARAMETER(LCL.Pallets_Loaded);
PARAMETER(LCL.Avg_Pallet_Tare);
PARAMETER(LCL.Tot_Pallet_Tare);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program RTV Gross Wgt/Qty     XF.
CALL PROGRAM(RTV Gross Wgt/Qty     XF) ('PQPQXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(RCD.Gross_Weight_USR_9_1);
PARAMETER(LCL.Order_Quantity);
PARAMETER(LCL.Avg_Pallet_Tare);

EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
PARAMETER(RCD.Company_Number);
PARAMETER(LCL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Company Organization is High Plains Biodiesel
IF LCL.Company_Organization = 'H';

EXECUTE FUNCTION(RTV Ship To Whse-HPB  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1962118;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER(RCD.HPB_Ship_to_Warehouse);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?USER: Process subfile record (Pre-confirm)

EXECUTE FUNCTION(RTV GrsWgt w/PltTr Ld RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1601442;
PARAMETER(CTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(PAR.USR_Weight_Accumulated);
PARAMETER(CTL.Load_Status);
{
 //?USER: Initialize routine

 // PAR.USR Weight Accumulated = CON.*ZERO
 PAR.USR_Weight_Accumulated = *ZERO;

 CASE;

 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 EXECUTE FUNCTION(RTV Pallet/Tare        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1585842;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Pallets_Loaded);
 PARAMETER(LCL.Avg_Pallet_Tare);
 PARAMETER(LCL.Tot_Pallet_Tare);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?***** Change log and comments
 DO;

 //?** 01/18/2010 PKD E000261 Pass the Average Pallet Tare
 ENDDO;

 //?USER: Process Data record

 //?01/18/10 PKD E000261 SEND in LCL.Avg Pallet Tare
 // Call program RTV Gross Wgt/Qty     XF.
 CALL PROGRAM(RTV Gross Wgt/Qty     XF) ('PQPQXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.USR_Weight_Accumulated);
 PARAMETER(LCL.Order_Quantity);
 PARAMETER(LCL.Avg_Pallet_Tare);

 //?USER: Exit processing

 CASE;

 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 EXECUTE FUNCTION(RTV Pallet/Tare        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1585842;
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.Pallets_Loaded);
 PARAMETER(LCL.Avg_Pallet_Tare);
 PARAMETER(LCL.Tot_Pallet_Tare);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.USR Weight Accumulated = PAR.USR Weight Accumulated + LCL.Tot Pallet Tare
 PAR.USR_Weight_Accumulated = PAR.USR_Weight_Accumulated + LCL.Tot_Pallet_Tare;

 ENDIF;

}


//?*-----------------------------------------------------------------*
// CTL.Weight Adjust = PAR.USR Weight Accumulated
CTL.Weight_Adjust = PAR.USR_Weight_Accumulated;

//?Maximum message
CASE;

// IF CTL.Weight Adjust GT PAR.Maximum pounds
IF CTL.Weight_Adjust > PAR.Maximum_pounds;

// AND PAR.Maximum pounds NE WRK.ZERO
AND PAR.Maximum_pounds <> WRK.ZERO;

// Send information message - 'Load weight is greater than maximum pounds allowed.'
MESSAGE(USR1261 *INFO);

ENDIF;

//?Edit Shipping Instructions
CASE;

// IF RCD.*SFLSEL is *Edit
IF RCD.*SFLSEL = '2'/'2';

// Call program EDT Shipping Inst.     EF.
CALL PROGRAM(EDT Shipping Inst.     EF) ('PDAEEFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(*ZERO);

ENDIF;

//?Display order details
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

CASE;

// IF RCD.Event Code is Shipped Thru 07 History
IF RCD.Event_Code >= '04';
AND RCD.Event_Code <= '07';

// Call program DSP Ord Inq Ship Dtl   DF.
CALL PROGRAM(DSP Ord Inq Ship Dtl   DF) ('PDP3DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.Order_Sequence_Number);
PARAMETER(PAR.Application_Code);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program DSP Ord Inquiry Detail DF.
CALL PROGRAM(DSP Ord Inquiry Detail DF) ('PDPZDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.Order_Sequence_Number);
PARAMETER(WRK.Order_Secondary_Line_Seq);
PARAMETER(PAR.Application_Code);

ENDIF;

ENDIF;

//?** FP1101 LJB 04/10/2007 display order level export instructions
//?** Display Customer Order Export Instructions
CASE;

// IF RCD.*SFLSEL is Option 6
IF RCD.*SFLSEL = '6'/'6';

// WRK.Sequence Number = CON.1
WRK.Sequence_Number = 1;

CASE;

// IF PAR.Export Status is yes
IF PAR.Export_Status = 'Y';

EXECUTE FUNCTION(RTV CHK OHE Exists     RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC1815388;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?** Display OHE or error message if no record exists
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?** Select the order and pass to the dsprcd     FP1101 LJB 04/09/2007
// WRK.Exit Selection USR = CND.No
WRK.Exit_Selection_USR = 'N';

// DOW WRK.Exit Selection USR is No
DOW WRK.Exit_Selection_USR = 'N';

// Call program SEL Order/Load/Exp Sts SR.
CALL PROGRAM(SEL Order/Load/Exp Sts SR) ('PMFXSRR');
PARAMETER(WRK.Exit_Selection_USR);
PARAMETER(WRK.USR_Order_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.USR_Company_Number);

//?** Edit order until exit is requested
CASE;

// IF WRK.Exit Selection USR is No
IF WRK.Exit_Selection_USR = 'N';

// Call program DSP Cust Ord Export    D1.
CALL PROGRAM(DSP Cust Ord Export    D1) ('PMFWD1R');
PARAMETER(WRK.USR_Company_Number);
PARAMETER(WRK.USR_Order_Number);
PARAMETER(RCD.Load_ID);

CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Export Instructions not found for order.'
ERROR(USR3697);

ENDIF;

ENDIF;

ENDDO;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?** Display OHE or error message if no record exists
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Export Instructions not found for order.'
ERROR(USR3697);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

// Call program Dsp Gross Weight Dtl  DF.
CALL PROGRAM(Dsp Gross Weight Dtl  DF) ('PNJNDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Header_Status);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

SET CURSOR;

