// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDJVXFR
// ?Date: 14.08.2025 Time: 03:28:32
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(RTV MG Created Load   RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC2124762;
PARAMETER(PAR.Load_ID);
PARAMETER(LCL.MG_Created_Load);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF LCL.MG Created Load is Yes
IF LCL.MG_Created_Load = 'Y';

QUIT;

ENDIF;

EXECUTE FUNCTION(RTV Last Stop Info    RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1604222;
PARAMETER(PAR.Load_ID);
PARAMETER(NLL.Ship_To_Customer);
PARAMETER(NLL.Ship_To_Name);
PARAMETER(NLL.Ship_To_Address_Line_1);
PARAMETER(NLL.Ship_To_Address_Line_2);
PARAMETER(NLL.Ship_To_Address_Line_3);
PARAMETER(PAR.Destination_City);
PARAMETER(PAR.Ship_To_State_Code);
PARAMETER(NLL.Ship_To_Zip_Postal_Code);
PARAMETER(NLL.Salesperson_Name);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Last Stop Info     RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1604224;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name);
 PARAMETER(PAR.Ship_To_Address_Line_1);
 PARAMETER(PAR.Ship_To_Address_Line_2);
 PARAMETER(PAR.Ship_To_Address_Line_3);
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Ship_To_Zip_Postal_Code);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(LCL.Sales_Route_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
 PARAMETER(LCL.Sales_Route_Code);
 PARAMETER(LCL.Salesperson_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Salesperson Name   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1111501;
 PARAMETER(LCL.Salesperson_Code);
 PARAMETER(PAR.Salesperson_Name);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 QUIT;

}


EXECUTE FUNCTION(RTV Load for Rated Frt RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1400016;
PARAMETER(PAR.Load_ID);
PARAMETER(LCL.Scheduled_Ship_Date);
PARAMETER(WRK.Load_Status);
PARAMETER(PAR.Total_Load_Order_Weight);
PARAMETER(PAR.Flat_Amount);
PARAMETER(PAR.Allocate_Pounds_Miles);
PARAMETER(PAR.Total_Stops);
PARAMETER(PAR.Carrier_Code);
PARAMETER(PAR.Total_Rated_Freight);
PARAMETER(PAR.Load_Type);
PARAMETER(PAR.Total_Load_Miles);
PARAMETER(WRK.Shipping_Method);
PARAMETER(PAR.Ship_From_Warehouse);
PARAMETER(NLL.Ship_To_State_Code);
PARAMETER(PAR.Carrier_Broker);
PARAMETER(PAR.Export_Status);
PARAMETER(NLL.Shipping_Line);
PARAMETER(NLL.Port_Delv_Terminal);
PARAMETER(NLL.Discharge_Port);
PARAMETER(PAR.LH_Power_Only_Load);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Retrieve Override Miles             E00207 8/13/08
EXECUTE FUNCTION(RTV Total Ld Mi/Sts    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1496186;
PARAMETER(PAR.Load_ID);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(PAR.Total_Load_Miles);
PARAMETER(WRK.Override_Total_Load_Miles);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Put miles into total miles work field to use later    E00207
CASE;

// IF WRK.Override Total Load Miles is Entered
IF WRK.Override_Total_Load_Miles <> *ZERO;

// WRK.Total Miles = WRK.Override Total Load Miles
WRK.Total_Miles = WRK.Override_Total_Load_Miles;

//?** Put miles into total miles work field to use later    E00207
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Total Miles = PAR.Total Load Miles
WRK.Total_Miles = PAR.Total_Load_Miles;

ENDIF;

//?** Export State Code is retrieved from the Order Header file.
// Call program RTV ExpOrd Info for LD XF.
CALL PROGRAM(RTV ExpOrd Info for LD XF) ('PMJMXFR');
PARAMETER(LCL.Order_Number);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(LCL.Ship_To_Name);
PARAMETER(LCL.Ship_To_Address_Line_1);
PARAMETER(LCL.Ship_To_Address_Line_2);
PARAMETER(LCL.Ship_To_Address_Line_3);
PARAMETER(LCL.Ship_To_City);
PARAMETER(LCL.Ship_To_State_Code);
PARAMETER(LCL.Ship_To_Zip_Postal_Code);
PARAMETER(LCL.Carrier_Code);
PARAMETER(PAR.Load_ID);
PARAMETER(LCL.Export_Status);
PARAMETER(LCL.Export_Docs_Go_w_Driver);
PARAMETER(LCL.Air_Freight_Order);
PARAMETER(LCL.Export_USDA_Approved);
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Stop_Drop_Sequence_Number);
PARAMETER(PAR.Shipping_Line);
PARAMETER(PAR.Port_Delv_Terminal);
PARAMETER(LCL.OHE_City);
PARAMETER(LCL.OHE_Vessel_Airline);
PARAMETER(LCL.OHE_Voyage_Flight);
PARAMETER(LCL.OHE_Booking_Number);
PARAMETER(LCL.OHE_Discharge_Port_Airprt);
PARAMETER(LCL.OHE_Sail_Flight_Date);
PARAMETER(LCL.OHE_Port_Cut_Date);
PARAMETER(LCL.OHE_Arrival_Date);
PARAMETER(LCL.OHE_Late_Delivery_Code);
PARAMETER(LCL.OHE_Ship_Status);
PARAMETER(LCL.OHE_Container_Number);
PARAMETER(LCL.OHE_Comment_1);
PARAMETER(LCL.OHE_Comment_2);
PARAMETER(LCL.Port_City);
PARAMETER(LCL.Port_Address_Line_1);
PARAMETER(LCL.Port_Address_Line_2);
PARAMETER(LCL.Sail_Port_State);
PARAMETER(LCL.Port_Zip_Postal_Code);
PARAMETER(LCL.Port_Phone_Number);
PARAMETER(LCL.Port_Fax_Number);

//?** Export - Retrieve Port City if International Accounts  FP1101
CASE;

// IF LCL.Ship To State Code is International Accounts
IF LCL.Ship_To_State_Code = '.';

// PAR.Ship To State Code = LCL.Sail Port State
PAR.Ship_To_State_Code = LCL.Sail_Port_State;

// PAR.Destination City = LCL.Port City
PAR.Destination_City = LCL.Port_City;

EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
PARAMETER(PAR.Ship_From_Warehouse);
PARAMETER(LCL.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?***************
//?TRF015 RMC 11/3/06 Get minimum charge for carrier
EXECUTE FUNCTION(Rtv Carrier Frt Chr   RT) TYPE(RTVOBJ) FILE(PMABREP)           AC1799112;
PARAMETER(PAR.Carrier_Code);
PARAMETER('MINIM');
PARAMETER(*ZERO);
PARAMETER(LCL.CFC_Charge_Amount);
PARAMETER(LCL.CFC_Unit_of_Measure);
PARAMETER(JOB.*Job_date);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?***************
// Execute function CVT Str to Upper Alpha US.
EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
PARAMETER(PAR.Destination_City);
PARAMETER(PAR.Destination_City);
{
 PDWEUFR:  PGM PARM(&STRIN &STROUT)

 CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
}


// LCL.Destination City = PAR.Destination City
LCL.Destination_City = PAR.Destination_City;

EXECUTE FUNCTION(Rtv Destination Rates RT) TYPE(RTVOBJ) FILE(PDLECPP)           AC1634972;
PARAMETER(PAR.Carrier_Code);
PARAMETER(PAR.Ship_From_Warehouse);
PARAMETER(LCL.Destination_City);
PARAMETER(PAR.Ship_To_State_Code);
PARAMETER(LCL.Flat_Rate);
PARAMETER(LCL.CDR_Unit_of_Measure);
PARAMETER(PAR.Bulk_Rate);
PARAMETER(PAR.Export_Fresh_Flat_Amt);
PARAMETER(PAR.Export_Frozen_Flat_Amt);
PARAMETER(WRK.Double_Fuel_Surcharge_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?New code:     get the frt rate per carr/whse/State/state    TRF015
//?  Set the Dest city = State Code to get rate for entire state.
//?If found, this is used before the Rate per Region for rated frt calc.
//?RMC 12/19 do this if city/st rate not found
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// LCL.Destination City = PAR.Ship To State Code
LCL.Destination_City = PAR.Ship_To_State_Code;

EXECUTE FUNCTION(Rtv Destination Rates RT) TYPE(RTVOBJ) FILE(PDLECPP)           AC1634972;
PARAMETER(PAR.Carrier_Code);
PARAMETER(PAR.Ship_From_Warehouse);
PARAMETER(LCL.Destination_City);
PARAMETER(PAR.Ship_To_State_Code);
PARAMETER(LCL.Freight_Rate_USR);
PARAMETER(LCL.CDR_Unit_of_Measure);
PARAMETER(PAR.Bulk_Rate);
PARAMETER(PAR.Export_Fresh_Flat_Amt);
PARAMETER(PAR.Export_Frozen_Flat_Amt);
PARAMETER(LCL.Double_Fuel_Surcharge_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?*********************
//?** For City to City, if flat rate <> 0, put into Flat Amount
//?Destination Flat Rate (New)
CASE;

// IF LCL.Flat Rate is GT Zero
IF LCL.Flat_Rate > *ZERO;

CASE;

// IF LCL.CDR Unit of Measure is Flat
IF LCL.CDR_Unit_of_Measure = 'FL';

// PAR.Flat Amount = LCL.Flat Rate
PAR.Flat_Amount = LCL.Flat_Rate;

ENDIF;

ENDIF;

//?get first stop number
EXECUTE FUNCTION(CLC Maximum Load Miles RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1291273;
PARAMETER(PAR.Load_ID);
PARAMETER(WRK.Maximum_Miles);
PARAMETER(PAR.@Number_to_Rank);
{
 //?USER: Initialize routine

 //?Change Log
 DO;

 //?OMS186 2/12/97 PLL
 //?   changed so use Miles to Next Stop instead of retrieving mileage to
 //?   customer from co/cust file.
 ENDDO;

 // PAR.Maximum Miles = CON.*ZERO
 PAR.Maximum_Miles = *ZERO;

 // PAR.Stop/Drop = CON.*ZERO
 PAR.Stop_Drop = *ZERO;

 // PAR.Miles to next stop = CON.*ZERO
 PAR.Miles_to_next_stop = *ZERO;

 // PAR.@Number to Rank = CON.99999
 PAR.@Number_to_Rank = 99999;

 //?USER: Process Data record

 //?Assumption:  1 customer per stop
 //?Set up 1st stop
 CASE;

 // IF PAR.Stop/Drop NE DB1.Stop/Drop
 IF PAR.Stop_Drop <> DB1.Stop_Drop;

 // PAR.Stop/Drop = DB1.Stop/Drop
 PAR.Stop_Drop = DB1.Stop_Drop;

 //?Set 1st stop (number to rank)
 CASE;

 // IF DB1.Stop/Drop LT PAR.@Number to Rank
 IF DB1.Stop_Drop < PAR.@Number_to_Rank;

 // PAR.@Number to Rank = DB1.Stop/Drop
 PAR.@Number_to_Rank = DB1.Stop_Drop;

 ENDIF;

 ENDIF;

 CASE;

 // IF DB1.Miles to next stop GT PAR.Maximum Miles
 IF DB1.Miles_to_next_stop > PAR.Maximum_Miles;

 // PAR.Maximum Miles = DB1.Miles to next stop
 PAR.Maximum_Miles = DB1.Miles_to_next_stop;

 ENDIF;

}


//?Retrieve total freight entered on Order Header Financial  ELB Load Plan
EXECUTE FUNCTION(Rtv Order Freight ELB  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1568402;
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Order_Freight_USR);
PARAMETER(PAR.Total_Weight_Work);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 // PAR.Order Freight  USR = CON.*ZERO
 PAR.Order_Freight_USR = *ZERO;

 // PAR.Total Weight Work = CON.*ZERO
 PAR.Total_Weight_Work = *ZERO;

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Misc Cost for Ord  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1572471;
 PARAMETER(PAR.Freight_Misc_Charge);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Ttl Frght for Ord  RT) TYPE(RTVOBJ) FILE(OMCQWKP)          AC1568403;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Transaction_Amount);
 {
  //?USER: Initialize routine

  // PAR.Transaction Amount = CON.*ZERO
  PAR.Transaction_Amount = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF DB1.Financial Type is Freight Charge
  IF DB1.Financial_Type = 'F';

  // PAR.Transaction Amount = PAR.Transaction Amount + DB1.Transaction Amount
  PAR.Transaction_Amount = PAR.Transaction_Amount + DB1.Transaction_Amount;

  ENDIF;

 }

 //?Order freight
 CASE;

 // IF PAR.Transaction Amount is greater than zero
 IF PAR.Transaction_Amount > *ZERO;

 // AND PAR.Freight Misc. Charge is Entered
 AND PAR.Freight_Misc_Charge <> *ZERO;

 // Order freight
 PAR.Order_Freight_USR = ( PAR.Order_Freight_USR + PAR.Transaction_Amount )
 + PAR.Freight_Misc_Charge;

 //?Order freight
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Order Freight  USR = PAR.Order Freight  USR + PAR.Transaction Amount
 PAR.Order_Freight_USR = PAR.Order_Freight_USR + PAR.Transaction_Amount;

 ENDIF;

 CASE;

 // IF PAR.Transaction Amount is greater than zero
 IF PAR.Transaction_Amount > *ZERO;

 // OR DB1.Order Type - Sales is Sample Order
 OR DB1.Order_Type_Sales = 'SA';

 // PAR.Total Weight Work = PAR.Total Weight Work + DB1.Order Weight Total
 PAR.Total_Weight_Work = PAR.Total_Weight_Work + DB1.Order_Weight_Total;

 ENDIF;

}


// PAR.Total Weight = PAR.Total Weight - PAR.Total Weight Work
PAR.Total_Load_Order_Weight = PAR.Total_Load_Order_Weight - PAR.Total_Weight_Work;

//?** Use Override miles here, if they exist
//?** Update Total Base Cost in each section in the following:
//?Pounds/Miles/Ton computation
CASE;

// IF PAR.Flat Amount is GT Zero
IF PAR.Flat_Amount > *ZERO;

//?** Flat amount from Load Header takes precedence in calcs - DLY029
// PGM.*Synon (15,5) work field = CON.*ZERO
PGM.*Synon_155_work_field = *ZERO;

//?** FP1251 LJB 01/22/2008 Update Total Base Cost from flat amount
// PAR.Total Base Cost = PAR.Flat Amount
PAR.Total_Base_Cost = PAR.Flat_Amount;

//?Pounds/Miles/Ton computation
// IF LCL.Destination City NE PAR.Ship To State Code
IF LCL.Destination_City <> PAR.Ship_To_State_Code;

// AND LCL.Flat Rate is GT Zero
AND LCL.Flat_Rate > *ZERO;

//?** city calcs                              dly029 07/16/2007 ljb
CASE;

// IF LCL.CDR Unit of Measure is Flat
IF LCL.CDR_Unit_of_Measure = 'FL';

// LCL.Freight Rate USR = CON.*ZERO
LCL.Freight_Rate_USR = *ZERO;

// PAR.Flat Amount = LCL.Flat Rate
PAR.Flat_Amount = LCL.Flat_Rate;

// PGM.*Synon (15,5) work field = LCL.Flat Rate
PGM.*Synon_155_work_field = LCL.Flat_Rate;

// PAR.Total Base Cost = PGM.*Synon (15,5) work field
PAR.Total_Base_Cost = PGM.*Synon_155_work_field;

//?** city calcs                              dly029 07/16/2007 ljb
// IF LCL.CDR Unit of Measure is Mile
IF LCL.CDR_Unit_of_Measure = 'ML';

// PAR.Unused Mile Rate 1 = LCL.Flat Rate
PAR.Unused_Mile_Rate_1 = LCL.Flat_Rate;

//?** Total miles work field will have either override miles or
//?** total load miles. Override miles takes precedence.   E00207
// PGM.*Synon (15,5) work field = WRK.Total Miles * PAR.Unused Mile Rate 1 *Rounded
PGM.*Synon_155_work_field = WRK.Total_Miles * PAR.Unused_Mile_Rate_1 'H';

// PAR.Total Base Cost = PGM.*Synon (15,5) work field
PAR.Total_Base_Cost = PGM.*Synon_155_work_field;

ENDIF;

//?Pounds/Miles/Ton computation
// IF LCL.Destination City EQ PAR.Ship To State Code
IF LCL.Destination_City = PAR.Ship_To_State_Code;

// AND LCL.Freight Rate USR NE WRK.ZERO
AND LCL.Freight_Rate_USR <> WRK.ZERO;

//?** state to state calcs                    dly029 07/16/2007 ljb
CASE;

// IF LCL.CDR Unit of Measure is Flat
IF LCL.CDR_Unit_of_Measure = 'FL';

// PGM.*Synon (15,5) work field = LCL.Freight Rate USR
PGM.*Synon_155_work_field = LCL.Freight_Rate_USR;

// PAR.Total Base Cost = PGM.*Synon (15,5) work field
PAR.Total_Base_Cost = PGM.*Synon_155_work_field;

//?** state to state calcs                    dly029 07/16/2007 ljb
// IF LCL.CDR Unit of Measure is Mile
IF LCL.CDR_Unit_of_Measure = 'ML';

// PAR.Unused Mile Rate 1 = LCL.Freight Rate USR
PAR.Unused_Mile_Rate_1 = LCL.Freight_Rate_USR;

//?** Total miles work field will have either override miles or
//?** total load miles. Override miles takes precedence.   E00207
// PGM.*Synon (15,5) work field = WRK.Total Miles * PAR.Unused Mile Rate 1 *Rounded
PGM.*Synon_155_work_field = WRK.Total_Miles * PAR.Unused_Mile_Rate_1 'H';

// PAR.Total Base Cost = PGM.*Synon (15,5) work field
PAR.Total_Base_Cost = PGM.*Synon_155_work_field;

ENDIF;

//?Pounds/Miles/Ton computation
// IF PAR.Allocate Pounds/Miles is Miles
IF PAR.Allocate_Pounds_Miles = 'M';

EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
PARAMETER(PAR.Ship_From_Warehouse);
PARAMETER(LCL.Shipping_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Total miles work field will have either override miles or
//?** total load miles. Override miles takes precedence.   E00207
// Call program CLC Mile Rate          XF.
CALL PROGRAM(CLC Mile Rate          XF) ('PDELXFR');
PARAMETER(LCL.Shipping_Company);
PARAMETER(PAR.Ship_From_Warehouse);
PARAMETER(PAR.Carrier_Broker);
PARAMETER(WRK.Total_Miles);
PARAMETER(PAR.Unused_Mile_Rate_1);
PARAMETER(PAR.Ship_To_State_Code);

//?Use Region Rate or Rate per State       TRF015 11/3/6 RMC
CASE;

// IF LCL.Freight Rate USR is Equal to Zero
IF LCL.Freight_Rate_USR = *ZERO;

CASE;

// IF LCL.CDR Unit of Measure is Mile
IF LCL.CDR_Unit_of_Measure = 'ML';

// AND LCL.Flat Rate is GT Zero
AND LCL.Flat_Rate > *ZERO;

//?** Total miles work field will have either override miles or
//?** total load miles. Override miles takes precedence.   E00207
// PGM.*Synon (15,5) work field = WRK.Total Miles * LCL.Flat Rate *Rounded
PGM.*Synon_155_work_field = WRK.Total_Miles * LCL.Flat_Rate 'H';

// PAR.Total Base Cost = PGM.*Synon (15,5) work field
PAR.Total_Base_Cost = PGM.*Synon_155_work_field;

// IF *OTHERWISE
IF *OTHERWISE;

//?** Total miles work field will have either override miles or
//?** total load miles. Override miles takes precedence.   E00207
// PGM.*Synon (15,5) work field = WRK.Total Miles * PAR.Unused Mile Rate 1 *Rounded
PGM.*Synon_155_work_field = WRK.Total_Miles * PAR.Unused_Mile_Rate_1 'H';

// PAR.Total Base Cost = PGM.*Synon (15,5) work field
PAR.Total_Base_Cost = PGM.*Synon_155_work_field;

ENDIF;

//?Use Region Rate or Rate per State       TRF015 11/3/6 RMC
// IF *OTHERWISE
IF *OTHERWISE;

//?TRF015 RMC 11/3/6 new calc
//?** Total miles work field will have either override miles or
//?** total load miles. Override miles takes precedence.   E00207
// PGM.*Synon (15,5) work field = WRK.Total Miles * LCL.Freight Rate USR *Rounded
PGM.*Synon_155_work_field = WRK.Total_Miles * LCL.Freight_Rate_USR 'H';

// PAR.Total Base Cost = PGM.*Synon (15,5) work field
PAR.Total_Base_Cost = PGM.*Synon_155_work_field;

ENDIF;

//?Pounds/Miles/Ton computation
//?Pounds/Miles/Ton computation
// IF PAR.Allocate Pounds/Miles is Ton
IF PAR.Allocate_Pounds_Miles = 'T';

// Synon (15,5) work field =       * *Synon (15,5) work field
PGM.*Synon_155_work_field = ( PAR.Total_Load_Order_Weight / 2000 'H' ) * PAR.Bulk_Rate             +
'H';

// PAR.Total Base Cost = PGM.*Synon (15,5) work field
PAR.Total_Base_Cost = PGM.*Synon_155_work_field;

//?Pounds/Miles/Ton computation
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Synon (15,5) work field = CON.*ZERO
PGM.*Synon_155_work_field = *ZERO;

// PAR.Total Base Cost = PGM.*Synon (15,5) work field
PAR.Total_Base_Cost = PGM.*Synon_155_work_field;

ENDIF;

//?** Don't add flat amount to work field per Rose - 7/13/2007 DLY029
//?Remove Order freight for Elberton.
CASE;

// IF PAR.Flat Amount GE PAR.Order Freight  USR
IF PAR.Flat_Amount >= PAR.Order_Freight_USR;

// Remove Order Freight ELB
PAR.Total_Base_Cost_USR = PAR.Total_Base_Cost - PAR.Order_Freight_USR;

//?Remove Order freight for Elberton.
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Total Base Cost  USR = PAR.Total Base Cost
PAR.Total_Base_Cost_USR = PAR.Total_Base_Cost;

ENDIF;

//?******************************************************************
// PAR.Total Rated Freight = PAR.Total Base Cost
PAR.Total_Rated_Freight = PAR.Total_Base_Cost;

//?*******************
//?TRF015 11/3/06 RMC Use minimum charge if found for carrier
//?TRF015 RMC 11/3/6 Use Carrier Minimum Charge if flat amt=0 and ...
CASE;

// IF PAR.Flat Amount is EQ Zero
IF PAR.Flat_Amount = 0;

// AND LCL.CFC Charge Amount is GT Zero
AND LCL.CFC_Charge_Amount > *ZERO;

//?and Rated Freight is < minimum charge AND rated>0 RMC 01/25/07
CASE;

// IF PAR.Total Rated Freight LT LCL.CFC Charge Amount
IF PAR.Total_Rated_Freight < LCL.CFC_Charge_Amount;

// AND PAR.Total Rated Freight is GT 0
AND PAR.Total_Rated_Freight > *ZERO;

// PAR.Total Rated Freight = LCL.CFC Charge Amount
PAR.Total_Rated_Freight = LCL.CFC_Charge_Amount;

// PAR.Total Base Cost  USR = LCL.CFC Charge Amount
PAR.Total_Base_Cost_USR = LCL.CFC_Charge_Amount;

// PAR.Total Base Cost = LCL.CFC Charge Amount
PAR.Total_Base_Cost = LCL.CFC_Charge_Amount;

ENDIF;

ENDIF;

//?*******************
//?E1647 PKD 0/28/11 PKD If Load is identified as a Power Only Load
//?                      and Flat Amount is not entered, then do
//?                      not calculate the Rated Freight.
//?                      not calculate the Rated Freight.
//?OVERRIDE Rated Freight: Power Only Load
CASE;

// IF PAR.Flat Amount is EQ Zero
IF PAR.Flat_Amount = 0;

CASE;

// IF PAR.LH Power Only Load is Yes
IF PAR.LH_Power_Only_Load = 'Y';

// PAR.Total Rated Freight = CON.*ZERO
PAR.Total_Rated_Freight = *ZERO;

// PAR.Total Base Cost  USR = CON.*ZERO
PAR.Total_Base_Cost_USR = *ZERO;

// PAR.Total Base Cost = CON.*ZERO
PAR.Total_Base_Cost = *ZERO;

ENDIF;

ENDIF;

//?*******************
//?update load details with new rated freight calculation
EXECUTE FUNCTION(CHG Recovery Freight   CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1292149;
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Flat_Amount);
PARAMETER(PAR.Allocate_Pounds_Miles);
PARAMETER(PAR.Total_Rated_Freight);
PARAMETER(PAR.Total_Load_Miles);
PARAMETER(WRK.Override_Total_Load_Miles);
PARAMETER(PAR.LH_Power_Only_Load);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?USER: Processing after Data update

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


EXECUTE FUNCTION(CHG Update Rated Frt   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1293847;
PARAMETER(PAR.Load_ID);
PARAMETER(*ZERO);
PARAMETER(PAR.Total_Load_Order_Weight);
PARAMETER(PAR.Flat_Amount);
PARAMETER(PAR.Allocate_Pounds_Miles);
PARAMETER(PAR.Total_Stops);
PARAMETER(PAR.Total_Load_Miles);
PARAMETER(PAR.Ship_From_Warehouse);
PARAMETER(PAR.Ship_To_State_Code);
PARAMETER(PAR.Total_Rated_Freight);
PARAMETER(PAR.Total_Base_Cost_USR);
PARAMETER(PAR.AASequence_Number_5_0);
PARAMETER(PAR.@Rated_Freight);
PARAMETER(PAR.Total_Stops_Cost);
PARAMETER(PAR.@Number_to_Rank);
PARAMETER(PAR.Unused_Rate_Per_Stop);
PARAMETER(PAR.Unused_Mile_Rate_1);
PARAMETER(PAR.Unused_Weight_Rate_1);
{
 //?USER: Initialize routine

 //?par.stop/drop is used for stop break processing
 // PAR.Stop/Drop = CON.*ZERO
 PAR.Stop_Drop = *ZERO;

 //?par.@rated freight is the sum of all detail rated frt, used in adjusting
 // PAR.@Rated Freight = CON.*ZERO
 PAR.@Rated_Freight = *ZERO;

 //?par.@sequence number 5.0 is the last seq. no.  on the load for adjusting
 // PAR.@Sequence Number 5.0 = CON.*ZERO
 PAR.AASequence_Number_5_0 = *ZERO;

 //?USER: Process Data record

 //?Retrieve order freight from Order Header Financial  ELB Load Plan
 EXECUTE FUNCTION(RTV Ttl Frght for Ord  RT) TYPE(RTVOBJ) FILE(OMCQWKP)          AC1568403;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Order_Freight_USR);
 {
  //?USER: Initialize routine

  // PAR.Transaction Amount = CON.*ZERO
  PAR.Transaction_Amount = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF DB1.Financial Type is Freight Charge
  IF DB1.Financial_Type = 'F';

  // PAR.Transaction Amount = PAR.Transaction Amount + DB1.Transaction Amount
  PAR.Transaction_Amount = PAR.Transaction_Amount + DB1.Transaction_Amount;

  ENDIF;

 }

 EXECUTE FUNCTION(RTV Order Type         RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1564834;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Order_Type_Sales);
 {
  //?USER: Process Data record

  // PAR.Order Type - Sales = DB1.Order Type - Sales
  PAR.Order_Type_Sales = DB1.Order_Type_Sales;

  QUIT;

 }

 //?If sample order or order header has freight, rated freight = 0 ELB Load Pl
 CASE;

 // IF PAR.Order Freight  USR is Not Zero
 IF PAR.Order_Freight_USR <> *ZERO;

 // OR PAR.Order Type - Sales is Sample Order
 OR PAR.Order_Type_Sales = 'SA';

 // WRK.Rated Freight = DB1.Freight Misc. Charge
 WRK.Rated_Freight = DB1.Freight_Misc_Charge;

 // Rated freight check
 PAR.@Rated_Freight = ( PAR.@Rated_Freight + PAR.Order_Freight_USR )
 + DB1.Freight_Misc_Charge;

 //?If sample order or order header has freight, rated freight = 0 ELB Load Pl
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?@sequence number 5.0 will be the last sequence number, used for adjusting
 // PAR.@Sequence Number 5.0 = DB1.Stop/Drop Sequence Number
 PAR.AASequence_Number_5_0 = DB1.Stop_Drop_Sequence_Number;

 EXECUTE FUNCTION(RTV Order Weight       RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1292006;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.USR_Order_Weight);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Compute rated freight
 DO;

 //?Compute ratio
 CASE;

 // IF PAR.Total Weight EQ WRK.ZERO
 IF PAR.Total_Load_Order_Weight = WRK.ZERO;

 // PAR.@Percent 9/6 = CON.*ZERO
 PAR.@Percent_9_6 = *ZERO;

 //?Compute ratio
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.@Percent 9/6 = PAR.USR Order Weight / PAR.Total Weight *Rounded
 PAR.@Percent_9_6 = PAR.USR_Order_Weight / PAR.Total_Load_Order_Weight 'H';

 ENDIF;

 // Synon (17,5) work field =       * Compute Rated Freight
 PGM.*Synon_175_work_field = PAR.@Percent_9_6 * PAR.Total_Base_Cost 'H';

 // WRK.Rated Freight = PGM.*Synon (17,5) work field * CON.1 *Rounded
 WRK.Rated_Freight = PGM.*Synon_175_work_field * 1 'H';

 ENDDO;

 // PAR.@Rated Freight = PAR.@Rated Freight + WRK.Rated Freight
 PAR.@Rated_Freight = PAR.@Rated_Freight + WRK.Rated_Freight;

 ENDIF;

 //?Update from new computations
 CASE;

 // IF WRK.Rated Freight NE DB1.Rated Freight
 IF WRK.Rated_Freight <> DB1.Rated_Freight;

 EXECUTE FUNCTION(CHG Recovery Freight   CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1292118;
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Stop_Drop_Sequence_Number);
 PARAMETER(DB1.Miles_to_next_stop);
 PARAMETER(DB1.Freight_Misc_Charge);
 PARAMETER(PAR.Freight_Stop_Charge);
 PARAMETER(WRK.Rated_Freight);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1293468;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Rated_Freight);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program TRG Order Hdr CHG Trig XT.
  CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Ship_To_Name);
  PARAMETER(DB1.Ship_To_Address_Line_1);
  PARAMETER(DB1.Ship_To_Address_Line_2);
  PARAMETER(DB1.Ship_To_Address_Line_3);
  PARAMETER(DB1.Ship_To_City);
  PARAMETER(DB1.Ship_To_State_Code);
  PARAMETER(DB1.Ship_To_Zip_Postal_Code);
  PARAMETER(DB1.Bill_to_Customer);
  PARAMETER(DB1.Bill_to_Name);
  PARAMETER(DB1.Bill_to_Address_Line_1);
  PARAMETER(DB1.Bill_to_Address_Line_2);
  PARAMETER(DB1.Bill_to_Address_Line_3);
  PARAMETER(DB1.Bill_to_City);
  PARAMETER(DB1.Bill_to_State_Code);
  PARAMETER(DB1.Bill_to_Zip_Postal_Code);
  PARAMETER(DB1.Customer_Purchase_Order_#);
  PARAMETER(DB1.Order_Date);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Cancel_Date);
  PARAMETER(DB1.Terms_Code);
  PARAMETER(DB1.Special_Instructions);
  PARAMETER(DB1.Special_Instructions_2);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Comment_Print_Acknowledge);
  PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
  PARAMETER(DB1.Comment_Print_Pick_Slip);
  PARAMETER(DB1.Comment_Print_Ship_Doc);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Order_in_Use);
  PARAMETER(DB1.Header_Status);
  PARAMETER(DB1.Header_Status_Last);
  PARAMETER(DB1.Order_Type_Print_Status);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.User_Original_Entry);
  PARAMETER(DB1.Date_of_Original_Entry);
  PARAMETER(DB1.Order_Value_Total);
  PARAMETER(DB1.Order_Weight_Total);
  PARAMETER(DB1.Credit_Hold);
  PARAMETER(DB1.Production_Hold);
  PARAMETER(DB1.New_Customer_Hold);
  PARAMETER(DB1.Requested_Delivery_Date);
  PARAMETER(DB1.Requested_Delivery_Time);
  PARAMETER(DB1.Accounts_Receiv_Ent_1);
  PARAMETER(DB1.Accounts_Receiv_Ent_2);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.LTL_Flag);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Shipping_Method);
  PARAMETER(DB1.Export_Status);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Shrink_Wrap);
  PARAMETER(DB1.Slip_Sheet);
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Reefer_Temperature);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Attach_to_Invoice_Number);
  PARAMETER(DB1.Load_Plan_Order);
  PARAMETER(DB1.Print_Pick_Slip);
  PARAMETER(DB1.Resell_Reference_Number);
  PARAMETER(DB1.Special_Comment_1);
  PARAMETER(DB1.Special_Comment_2);
  PARAMETER(DB1.Affect_Auto_Accruals);
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(DB1.Manager_Level_Code);
  PARAMETER(DB1.VP_Level_Code);
  PARAMETER(DB1.Attach_to_Order_Number);
  PARAMETER(DB1.Reason_for_Price_Audit);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Invoice_Date);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Trans_Contol_AS400_Plant);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.A_R_order_Value_Total);
  PARAMETER(DB1.Billing_Activity_Type);
  PARAMETER(DB1.Block_Order_Flag);
  PARAMETER(DB1.Order_Certification_Flag);
  PARAMETER(DB1.Invoice_Order_Value_Tot);
  PARAMETER(DB1.Process_Sts_for_3C);
  PARAMETER(DB1.Order_Conf_Fax_Sts);
  PARAMETER(DB1.Manifest_Fax_Sts);
  PARAMETER(DB1.Invoice_Fax_Sts);
  PARAMETER(DB1.Transfer_in_Storage_Ind);
  PARAMETER(DB1.Email_Cust_On_Order_Ship);
  PARAMETER(DB1.Order_Emailed);
  PARAMETER(DB1.Export_Docs_Go_w_Driver);
  PARAMETER(DB1.Shipping_Temp_Code_C_F);
  PARAMETER(DB1.Broker_Order_Status);
  PARAMETER(DB1.Air_Freight_Order);
  PARAMETER(DB1.Order_Requires_Review);
  PARAMETER(DB1.OH_Load_Plan_Ready);
  PARAMETER(DB1.Export_USDA_Approved);
  PARAMETER(DB1.HPB_Ship_to_Warehouse);
  PARAMETER(DB1.OH_TF_Exempt_Code);
  PARAMETER(DB1.OH_Appt_Confirmation_Dt);
  PARAMETER(DB1.JPN_Invoice_Issuance_Date);
  PARAMETER(DB1.Load_Actual_Shipped_Date);
  PARAMETER(DB1.Load_BOL_Complete_Date);
  PARAMETER(DB1.Load_Truck_Departure_Date);
  PARAMETER(DB1.Maximum_Gross_Weight);
  PARAMETER(DB1.Time_of_Original_Entry);
  PARAMETER(DB1.OH_Appt_Confirmation_Tm);
  PARAMETER(DB1.Load_BOL_Complete_Time);
  PARAMETER(DB1.Load_Truck_Departure_Time);
  PARAMETER(DB1.Act_Frt_Reference_Amount);
  PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
  PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
  PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
  PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);

 }

 ENDIF;

}


//?Check totals
//?Adjust totals
CASE;

// IF PAR.Total Rated Freight NE PAR.@Rated Freight
IF PAR.Total_Rated_Freight <> PAR.@Rated_Freight;

// WRK.Adjustment Amount = PAR.Total Rated Freight - PAR.@Rated Freight
WRK.Adjustment_Amount = PAR.Total_Rated_Freight - PAR.@Rated_Freight;

//?adjust last load detail, and order header for that detail
EXECUTE FUNCTION(CHG Adjust Rated Frt   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1293744;
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.AASequence_Number_5_0);
PARAMETER(WRK.Adjustment_Amount);
{
 //?USER: Process Data record

 // PAR.Rated Freight = DB1.Rated Freight + PAR.Adjustment Amount
 PAR.Rated_Freight = DB1.Rated_Freight + PAR.Adjustment_Amount;

 CASE;

 // IF PAR.Rated Freight is GE Zero
 IF PAR.Rated_Freight >= *ZERO;

 EXECUTE FUNCTION(CHG Recovery Freight   CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1292118;
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Stop_Drop_Sequence_Number);
 PARAMETER(DB1.Miles_to_next_stop);
 PARAMETER(DB1.Freight_Misc_Charge);
 PARAMETER(DB1.Freight_Stop_Charge);
 PARAMETER(PAR.Rated_Freight);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1293468;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Rated_Freight);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program TRG Order Hdr CHG Trig XT.
  CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Ship_To_Name);
  PARAMETER(DB1.Ship_To_Address_Line_1);
  PARAMETER(DB1.Ship_To_Address_Line_2);
  PARAMETER(DB1.Ship_To_Address_Line_3);
  PARAMETER(DB1.Ship_To_City);
  PARAMETER(DB1.Ship_To_State_Code);
  PARAMETER(DB1.Ship_To_Zip_Postal_Code);
  PARAMETER(DB1.Bill_to_Customer);
  PARAMETER(DB1.Bill_to_Name);
  PARAMETER(DB1.Bill_to_Address_Line_1);
  PARAMETER(DB1.Bill_to_Address_Line_2);
  PARAMETER(DB1.Bill_to_Address_Line_3);
  PARAMETER(DB1.Bill_to_City);
  PARAMETER(DB1.Bill_to_State_Code);
  PARAMETER(DB1.Bill_to_Zip_Postal_Code);
  PARAMETER(DB1.Customer_Purchase_Order_#);
  PARAMETER(DB1.Order_Date);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Cancel_Date);
  PARAMETER(DB1.Terms_Code);
  PARAMETER(DB1.Special_Instructions);
  PARAMETER(DB1.Special_Instructions_2);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Comment_Print_Acknowledge);
  PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
  PARAMETER(DB1.Comment_Print_Pick_Slip);
  PARAMETER(DB1.Comment_Print_Ship_Doc);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Order_in_Use);
  PARAMETER(DB1.Header_Status);
  PARAMETER(DB1.Header_Status_Last);
  PARAMETER(DB1.Order_Type_Print_Status);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.User_Original_Entry);
  PARAMETER(DB1.Date_of_Original_Entry);
  PARAMETER(DB1.Order_Value_Total);
  PARAMETER(DB1.Order_Weight_Total);
  PARAMETER(DB1.Credit_Hold);
  PARAMETER(DB1.Production_Hold);
  PARAMETER(DB1.New_Customer_Hold);
  PARAMETER(DB1.Requested_Delivery_Date);
  PARAMETER(DB1.Requested_Delivery_Time);
  PARAMETER(DB1.Accounts_Receiv_Ent_1);
  PARAMETER(DB1.Accounts_Receiv_Ent_2);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.LTL_Flag);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Shipping_Method);
  PARAMETER(DB1.Export_Status);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Shrink_Wrap);
  PARAMETER(DB1.Slip_Sheet);
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Reefer_Temperature);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Attach_to_Invoice_Number);
  PARAMETER(DB1.Load_Plan_Order);
  PARAMETER(DB1.Print_Pick_Slip);
  PARAMETER(DB1.Resell_Reference_Number);
  PARAMETER(DB1.Special_Comment_1);
  PARAMETER(DB1.Special_Comment_2);
  PARAMETER(DB1.Affect_Auto_Accruals);
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(DB1.Manager_Level_Code);
  PARAMETER(DB1.VP_Level_Code);
  PARAMETER(DB1.Attach_to_Order_Number);
  PARAMETER(DB1.Reason_for_Price_Audit);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Invoice_Date);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Trans_Contol_AS400_Plant);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.A_R_order_Value_Total);
  PARAMETER(DB1.Billing_Activity_Type);
  PARAMETER(DB1.Block_Order_Flag);
  PARAMETER(DB1.Order_Certification_Flag);
  PARAMETER(DB1.Invoice_Order_Value_Tot);
  PARAMETER(DB1.Process_Sts_for_3C);
  PARAMETER(DB1.Order_Conf_Fax_Sts);
  PARAMETER(DB1.Manifest_Fax_Sts);
  PARAMETER(DB1.Invoice_Fax_Sts);
  PARAMETER(DB1.Transfer_in_Storage_Ind);
  PARAMETER(DB1.Email_Cust_On_Order_Ship);
  PARAMETER(DB1.Order_Emailed);
  PARAMETER(DB1.Export_Docs_Go_w_Driver);
  PARAMETER(DB1.Shipping_Temp_Code_C_F);
  PARAMETER(DB1.Broker_Order_Status);
  PARAMETER(DB1.Air_Freight_Order);
  PARAMETER(DB1.Order_Requires_Review);
  PARAMETER(DB1.OH_Load_Plan_Ready);
  PARAMETER(DB1.Export_USDA_Approved);
  PARAMETER(DB1.HPB_Ship_to_Warehouse);
  PARAMETER(DB1.OH_TF_Exempt_Code);
  PARAMETER(DB1.OH_Appt_Confirmation_Dt);
  PARAMETER(DB1.JPN_Invoice_Issuance_Date);
  PARAMETER(DB1.Load_Actual_Shipped_Date);
  PARAMETER(DB1.Load_BOL_Complete_Date);
  PARAMETER(DB1.Load_Truck_Departure_Date);
  PARAMETER(DB1.Maximum_Gross_Weight);
  PARAMETER(DB1.Time_of_Original_Entry);
  PARAMETER(DB1.OH_Appt_Confirmation_Tm);
  PARAMETER(DB1.Load_BOL_Complete_Time);
  PARAMETER(DB1.Load_Truck_Departure_Time);
  PARAMETER(DB1.Act_Frt_Reference_Amount);
  PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
  PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
  PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
  PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);

 }

 QUIT;

 ENDIF;

}


ENDIF;

//?Update all order detail rated freight
EXECUTE FUNCTION(Chg Adjust Rated Frt   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1294363;
PARAMETER(PAR.Load_ID);
{
 //?USER: Initialize routine

 //?05/12/04 SLM PKTR01 Multi-Company - Function was changed
 //?                                    to remove Company RST or Pos
 //?USER: Process Data record

 EXECUTE FUNCTION(UPD Rated Freight      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1396132;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Rated_Freight);
 {
  //?USER: Initialize routine

  //?par.@rated freight is the sum of all the detail rated frt, for adjusting
  // PAR.@Rated Freight = CON.*ZERO
  PAR.@Rated_Freight = *ZERO;

  //?par.usr process status is used to indicate if there are detail present
  // PAR.USR Process status = CND.no
  PAR.USR_Process_status = 'N';

  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.USR Process status = CND.yes
  PAR.USR_Process_status = 'Y';

  CASE;

  // IF PAR.Order Weight Total is Equal to zero
  IF PAR.Order_Weight_Total = *ZERO;

  // OR PAR.Total Rated Freight is Zero
  OR PAR.Total_Rated_Freight = *ZERO;

  // PAR.Rated Freight = CON.*ZERO
  PAR.Rated_Freight = *ZERO;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF DB1.Detail Line Status is Confirmed & Complete
  IF DB1.Detail_Line_Status = 'C'/'R';

  // Synon (17,9) work field =       * Compute Dtl Rated Freight
  PGM.*Synon_179_work_field = ( DB1.Weight_Shipped_Total / PAR.Order_Weight_Total 'H' )
  * PAR.Total_Rated_Freight 'H';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Synon (17,9) work field =       * Compute Dtl Rated Freight
  PGM.*Synon_179_work_field = ( ( DB1.Quantity_Ordered * DB1.Unit_Weight_Ordered_U_M 'H' )
  / PAR.Order_Weight_Total 'H' ) * PAR.Total_Rated_Freight 'H';

  ENDIF;

  // PAR.Rated Freight = PGM.*Synon (17,9) work field * CON.1 *Rounded
  PAR.Rated_Freight = PGM.*Synon_179_work_field * 1 'H';

  ENDIF;

  EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Rated_Freight);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PAR.@Rated Freight = PAR.@Rated Freight + PAR.Rated Freight
  PAR.@Rated_Freight = PAR.@Rated_Freight + PAR.Rated_Freight;

  // PAR.Order Sequence Number = DB1.Order Sequence Number
  PAR.Order_Sequence_Number = DB1.Order_Sequence_Number;

  // PAR.Order Secondary Line Seq = DB1.Order Secondary Line Seq
  PAR.Order_Secondary_Line_Seq = DB1.Order_Secondary_Line_Seq;

  ENDIF;

  //?USER: Exit processing

  //?Adjust totals
  CASE;

  // IF PAR.@Rated Freight NE PAR.Total Rated Freight
  IF PAR.@Rated_Freight <> PAR.Total_Rated_Freight;

  // AND PAR.USR Process status is yes
  AND PAR.USR_Process_status = 'Y';

  // WRK.USR Adjustment Amount 1 = PAR.Total Rated Freight - PAR.@Rated Freight
  WRK.USR_Adjustment_Amount_1 = PAR.Total_Rated_Freight - PAR.@Rated_Freight;

  // PAR.Rated Freight = PAR.Rated Freight + WRK.USR Adjustment Amount 1
  PAR.Rated_Freight = PAR.Rated_Freight + WRK.USR_Adjustment_Amount_1;

  //?Update last detail line processed
  EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Rated_Freight);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

 }

}


