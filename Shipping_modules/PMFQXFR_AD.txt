// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMFQXFR
// ?Date: 14.08.2025 Time: 03:44:57
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Are the BOM consumed items an AND or an OR condition?
//? AND : the consume priority is 1 on all consumed items.
//?        all of the consumed items must be available to sched the item
//?        The (consmd pty%)  * (the weight needed) must be avail
//? OR  : the consume priority is different on all consumed items.
//?        Consumption is taken per the consmd pty% * weight needed
//?        The last consmd item should have 100%, so the remaining
//?        weight needed will come from this item
EXECUTE FUNCTION(Rtv Consmd Itm AND/OR RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1927968;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER('C');
PARAMETER(LCL.Consume_Priority);
{
 //?USER: Initialize routine

 // PAR.Consume Priority = CON.*ZERO
 PAR.Consume_Priority = *ZERO;

 //?USER: Processing if Data record not found

 // PAR.Consume Priority = CND.EQ Zero
 PAR.Consume_Priority = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.Consume Priority is NE Zero
 IF DB1.Consume_Priority <> *ZERO;

 CASE;

 // IF DB1.Consume Priority GT PAR.Consume Priority
 IF DB1.Consume_Priority > PAR.Consume_Priority;

 // PAR.Consume Priority = DB1.Consume Priority
 PAR.Consume_Priority = DB1.Consume_Priority;

 ENDIF;

 ENDIF;

}


//?*** IF consumed priority is 1, then perform AND condition process ***
//?Consume Priority = 1
CASE;

// IF LCL.Consume Priority is EQ 1
IF LCL.Consume_Priority = 1;

//?1. Build array with consumed items and the RM lbs that are needed
//?   from this consumed item to fill the need, based on its consmed pty %
//?2. Calc whats avail from each consumed item in lbs or pieces  &
//?  set AvailNeed% = (avail per item) / (RM need per item)
EXECUTE FUNCTION(BLD BPS Consumed Itm  RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1924102;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Weight_Need_USR);
PARAMETER(PAR.Pieces_Need_USR);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Production_Type);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Warehouse_Code);
{
 //?USER: Initialize routine

 EXECUTE FUNCTION(Clr BPS Consumed Itm  DL) TYPE(DLTOBJ) ARRAY(ARR_BPS_Consumed_IAC1924100;
 // LCL.First Time Flag = CND.Yes
 LCL.First_Time_Flag = 'Y';

 EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(LCL.Production_Warehouse_Code);
 PARAMETER(LCL.Accounting_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?USER: Process Data record

 //?CRT: BPS Consumed Item Allc array for Active items Only
 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 // AND DB1.Consume Priority % is Greater than zero
 AND DB1.Consume_Priority_Percent > *ZERO;

 //?Calc weight of consumed item needed to fill the order based on consm%
 // Compute: weight need p/it
 LCL.Weight_Ordered = PAR.Weight_Need_USR * ( DB1.Consume_Priority_Percent / 100 );

 //? if piece count
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Compute: pieces need p/it
 LCL.Pieces_Ordered = PAR.Pieces_Need_USR * ( DB1.Consume_Priority_Percent / 100 );

 ENDIF;

 EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Component_Item_Code);
 PARAMETER(WRK.Description_Line_One);
 PARAMETER(WRK.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(WRK.Item_Structure_Class_Code);
 PARAMETER(WRK.Item_Structure_Group_Code);
 PARAMETER(WRK.Item_Structure_Type_Code);
 PARAMETER(WRK.Item_Type_Code);
 PARAMETER(WRK.Default_Warehouse);
 PARAMETER(WRK.Fresh_Chilling_Time);
 PARAMETER(WRK.Base_Conv_Loss_Item);
 PARAMETER(WRK.Variety_Rendered_Cut);
 PARAMETER(WRK.Credit_Item_Status);
 PARAMETER(WRK.Std_Weight_Head_Var_Ren);
 PARAMETER(PAR.Pieces_Per_Head);
 PARAMETER(WRK.Department_Code);
 PARAMETER(WRK.Group_for_Packaging);
 PARAMETER(WRK.Seconds_Item);
 PARAMETER(PAR.Piece_Count_Item_USR);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(WRK.Export_Domestic);
 PARAMETER(WRK.Print_On_Schedule);
 PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
 PARAMETER(WRK.Fresh_Sched_As_Ordered);
 PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
 PARAMETER(WRK.Primal_Group_Code);
 PARAMETER(LCL.Production_Warehouse_Code);
 PARAMETER(WRK.Warehouse_Type);
 PARAMETER(WRK.Trans_Contol_AS400_Plant);
 PARAMETER(WRK.Warehouse_Location);
 PARAMETER(WRK.Warehouse_Std_Chill_Time);
 PARAMETER(WRK.Warehouse_Chill_Time);
 PARAMETER(WRK.PS_Item_Id);
 {
  //?Execute internal function

  EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Description_Line_One);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Type_Code);
  PARAMETER(PAR.Default_Warehouse);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Base_Conv_Loss_Item);
  PARAMETER(PAR.Variety_Rendered_Cut);
  PARAMETER(PAR.Credit_Item_Status);
  PARAMETER(PAR.Std_Weight_Head_Var_Ren);
  PARAMETER(PAR.Pieces_Per_Head);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Group_for_Packaging);
  PARAMETER(PAR.Seconds_Item);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.Export_Domestic);
  PARAMETER(PAR.Print_On_Schedule);
  PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
  PARAMETER(PAR.Fresh_Sched_As_Ordered);
  PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  PARAMETER(PAR.Warehouse_Location);
  PARAMETER(PAR.Warehouse_Std_Chill_Time);
  PARAMETER(PAR.Warehouse_Chill_Time);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Description_Line_One);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Default_Warehouse);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Std_Weight_Head_Var_Ren);
   PARAMETER(PAR.Pieces_Per_Head);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Group_for_Packaging);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Export_Domestic);
   PARAMETER(PAR.Print_On_Schedule);
   PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
   PARAMETER(PAR.Fresh_Sched_As_Ordered);
   PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
   PARAMETER(PAR.Primal_Group_Code);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.Trans_Contol_AS400_Plant);
   PARAMETER(PAR.Warehouse_Location);
   PARAMETER(PAR.Warehouse_Std_Chill_Time);
   PARAMETER(PAR.Warehouse_Chill_Time);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

  }

  EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
  PARAMETER(PAR.Item_Type_Code);
  PARAMETER(PAR.Base_Conv_Loss_Item);
  PARAMETER(PAR.Variety_Rendered_Cut);
  PARAMETER(PAR.Credit_Item_Status);
  PARAMETER(PAR.Seconds_Item);
  PARAMETER(PAR.PS_Item_Id);
  {
   //?Execute internal function

   CASE;

   // IF PAR.Item Type Code is Raw Materials
   IF PAR.Item_Type_Code = 'RM';

   // PAR.PS Item Identification = CND.RM Base
   PAR.PS_Item_Id = 'RMB';

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Seconds Item is Yes
   IF PAR.Seconds_Item = 'Y';

   // PAR.PS Item Identification = CND.FG Seconds
   PAR.PS_Item_Id = 'FSC';

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Variety/Rendered/Cut is Variety
   IF PAR.Variety_Rendered_Cut = 'V';

   // PAR.PS Item Identification = CND.FG Variety
   PAR.PS_Item_Id = 'FVR';

   // IF PAR.Variety/Rendered/Cut is Rendered
   IF PAR.Variety_Rendered_Cut = 'R';

   // PAR.PS Item Identification = CND.FG Rendered
   PAR.PS_Item_Id = 'FRD';

   // IF PAR.Variety/Rendered/Cut is Cut
   IF PAR.Variety_Rendered_Cut = 'C';

   //?Base/Converted/Fabricated
   CASE;

   // IF PAR.Credit Item Status is yes
   IF PAR.Credit_Item_Status = 'Y';

   //?Setup Base/Converted/Fabricated Credit
   CASE;

   // IF PAR.Converted/Base Item is Base
   IF PAR.Base_Conv_Loss_Item = 'B';

   // PAR.PS Item Identification = CND.FG Base Credit
   PAR.PS_Item_Id = 'FBC';

   //?Setup Base/Converted/Fabricated Credit
   // IF PAR.Converted/Base Item is Converted
   IF PAR.Base_Conv_Loss_Item = 'C';

   // PAR.PS Item Identification = CND.FG Converted Credit
   PAR.PS_Item_Id = 'FCC';

   //?Setup Base/Converted/Fabricated Credit
   // IF PAR.Converted/Base Item is Fabricated
   IF PAR.Base_Conv_Loss_Item = 'F';

   // PAR.PS Item Identification = CND.FG Fabricated Credit
   PAR.PS_Item_Id = 'FFC';

   //?Setup Base/Converted/Fabricated Credit
   // IF PAR.Converted/Base Item is Loss
   IF PAR.Base_Conv_Loss_Item = 'L';

   // PAR.PS Item Identification = CND.FG Loss Credit
   PAR.PS_Item_Id = 'FLC';

   ENDIF;

   //?Base/Converted/Fabricated
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Setup Base/Converted/Fabricated
   CASE;

   // IF PAR.Converted/Base Item is Base
   IF PAR.Base_Conv_Loss_Item = 'B';

   // PAR.PS Item Identification = CND.FG Base
   PAR.PS_Item_Id = 'FGB';

   //?Setup Base/Converted/Fabricated
   // IF PAR.Converted/Base Item is Converted
   IF PAR.Base_Conv_Loss_Item = 'C';

   // PAR.PS Item Identification = CND.FG Converted
   PAR.PS_Item_Id = 'FCV';

   //?Setup Base/Converted/Fabricated
   // IF PAR.Converted/Base Item is Fabricated
   IF PAR.Base_Conv_Loss_Item = 'F';

   // PAR.PS Item Identification = CND.FG Fabricated
   PAR.PS_Item_Id = 'FFB';

   //?Setup Base/Converted/Fabricated
   // IF PAR.Converted/Base Item is Loss
   IF PAR.Base_Conv_Loss_Item = 'L';

   // PAR.PS Item Identification = CND.FG Loss
   PAR.PS_Item_Id = 'FLS';

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

  }

 }

 //?Chilling Time
 CASE;

 // IF WRK.Warehouse Std Chill Time is yes
 IF WRK.Warehouse_Std_Chill_Time = 'Y';

 // PAR.Chilling Time USR = WRK.Warehouse Chill Time
 PAR.Chilling_Time_USR = WRK.Warehouse_Chill_Time;

 //?Chilling Time
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Chilling Time USR = WRK.Fresh Chilling Time
 PAR.Chilling_Time_USR = WRK.Fresh_Chilling_Time;

 ENDIF;

 EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
 PARAMETER(LCL.Accounting_Company);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(DB1.Component_Item_Code);
 PARAMETER(LCL.Production_Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.ATS_Weight_Available_USR);
 PARAMETER(PAR.ATS_Pieces_Available_USR);
 PARAMETER(PAR.Chilling_Time_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
  //? instead of:
  //?Production = Standard + Prod Adj - Converted
  //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
  CASE;

  // IF DB1.PS Lock Status is NOT LOCKED
  IF DB1.PS_Lock_Status = 'N';

  //?Ship Cut Adjust
  CASE;

  // IF PAR.Chilling Time USR is GT Zero
  IF PAR.Chilling_Time_USR > *ZERO;

  // AND DB1.Production Date EQ JOB.*Job date
  AND DB1.Production_Date = JOB.*Job_date;

  EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
  PARAMETER(DB1.Company_Number);
  PARAMETER('P');
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  // Weight Production
  PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
  + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
  + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // Weight Available
  PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
  + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
  - DB1.PS_Weight_Prod_Allocated;

  // Pieces Available
  PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
  + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
  - DB1.PS_Pieces_Prod_Allocated;

  //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
  CASE;

  // IF PAR.ATS Weight Available USR is Less than zero
  IF PAR.ATS_Weight_Available_USR < *ZERO;

  CASE;

  // IF PAR.ATS Pieces Available USR is LE Zero
  IF PAR.ATS_Pieces_Available_USR <= *ZERO;

  // PAR.ATS Weight Available USR = CON.*ZERO
  PAR.ATS_Weight_Available_USR = *ZERO;

  // PAR.ATS Pieces Available USR = CON.*ZERO
  PAR.ATS_Pieces_Available_USR = *ZERO;

  ENDIF;

  ENDIF;

  // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
  PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

  ENDIF;

 }

 //?make sure weight avail isnt > rm needed
 CASE;

 // IF PAR.ATS Weight Available USR GT LCL.Weight Ordered
 IF PAR.ATS_Weight_Available_USR > LCL.Weight_Ordered;

 // PAR.ATS Weight Available USR = LCL.Weight Ordered
 PAR.ATS_Weight_Available_USR = LCL.Weight_Ordered;

 ENDIF;

 //?make sure pieces avail isnt > rm needed
 CASE;

 // IF PAR.ATS Pieces Available USR GT LCL.Pieces Ordered
 IF PAR.ATS_Pieces_Available_USR > LCL.Pieces_Ordered;

 // PAR.ATS Pieces Available USR = LCL.Pieces Ordered
 PAR.ATS_Pieces_Available_USR = LCL.Pieces_Ordered;

 ENDIF;

 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 CASE;

 // IF PAR.ATS Pieces Available USR is GT Zero
 IF PAR.ATS_Pieces_Available_USR > *ZERO;

 // Compute: pct avail
 LCL.Percent_Available_for_ord = ( PAR.ATS_Pieces_Available_USR / LCL.Pieces_Ordered )
 * 100;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.ATS Weight Available USR is Greater than zero
 IF PAR.ATS_Weight_Available_USR > *ZERO;

 // Compute: pct avail
 LCL.Percent_Available_for_ord = ( PAR.ATS_Weight_Available_USR / LCL.Weight_Ordered )
 * 100;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(BPS Consumed Itm Allc RT) TYPE(RTVOBJ) ARRAY(ARR_BPS_Consumed_IAC1924072;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Component_Item_Code);
 PARAMETER(DB1.Consume_Priority);
 PARAMETER(DB1.Consume_Priority_Percent);
 PARAMETER(LCL.Weight_Ordered);
 PARAMETER(LCL.Pieces_Ordered);
 PARAMETER(PAR.ATS_Weight_Available_USR);
 PARAMETER(PAR.ATS_Pieces_Available_USR);
 PARAMETER(LCL.Percent_Available_for_ord);
 PARAMETER(PAR.Weight_Need_USR);
 PARAMETER(PAR.Pieces_Need_USR);
 PARAMETER(PAR.Piece_Count_Item);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt BPS Consumed Itm  CR) TYPE(CRTOBJ) ARRAY(ARR_BPS_Consumed_IAC1924074;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Component_Item_Code);
  PARAMETER(PAR.Consume_Priority);
  PARAMETER(PAR.Consume_Priority_Percent);
  PARAMETER(LCL.Weight_Ordered);
  PARAMETER(LCL.Pieces_Ordered);
  PARAMETER(PAR.Weight_Available_USR);
  PARAMETER(PAR.Pieces_Avail_Production);
  PARAMETER(PAR.Percent_Available_for_ord);
 }

 ENDIF;

}


//?3. The lowest AvailNeed% * (rm wt need) = new adjusted need weight
EXECUTE FUNCTION(Rtv BPS Lowest % AvailRT) TYPE(RTVOBJ) ARRAY(ARR_BPS_Consumed_IAC1924156;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(LCL.Percent_Available_for_ord);
{
 //?USER: Initialize routine

 // PAR.Percent Available for ord = CND.eq 100%
 PAR.Percent_Available_for_ord = 100;

 //?USER: Process Data record

 CASE;

 // IF DB1.Percent Available for ord LT PAR.Percent Available for ord
 IF DB1.Percent_Available_for_ord < PAR.Percent_Available_for_ord;

 // PAR.Percent Available for ord = DB1.Percent Available for ord
 PAR.Percent_Available_for_ord = DB1.Percent_Available_for_ord;

 ENDIF;

}


CASE;

// IF LCL.Percent Available for ord is GT 0
IF LCL.Percent_Available_for_ord > *ZERO;

// Compute: new weight need
PAR.Weight_Need_USR = PAR.Weight_Need_USR * ( LCL.Percent_Available_for_ord / 100 );

CASE;

// IF PAR.Piece Count Item is yes
IF PAR.Piece_Count_Item = 'Y';

// Compute: new pieces need
PAR.Pieces_Need_USR = PAR.Pieces_Need_USR * ( LCL.Percent_Available_for_ord / 100 );

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Weight Need USR = CON.*ZERO
PAR.Weight_Need_USR = *ZERO;

// PAR.Pieces Need USR = CON.*ZERO
PAR.Pieces_Need_USR = *ZERO;

ENDIF;

// PAR.Percent Available for ord = LCL.Percent Available for ord
PAR.Percent_Available_for_ord = LCL.Percent_Available_for_ord;

ENDIF;

//?*** IF consumed priority is 1,2,3.. then perform OR condition process ***
