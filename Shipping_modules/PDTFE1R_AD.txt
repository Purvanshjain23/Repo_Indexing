// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDTFE1R
// ?Date: 14.08.2025 Time: 03:34:24
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('PDTFE1');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
PARAMETER(JOB.*USER);
PARAMETER(WRK.User_Code_Model);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** If Company Number is blank, default to security parms value
CASE;

// IF PAR.Company Number is Equal to zero
IF PAR.Company_Number = *ZERO;

// PAR.Company Number = WRK.Company Number
PAR.Company_Number = WRK.Company_Number;

ENDIF;

// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

// PAR.USR Exit Program = CND.no
PAR.USR_Exit_Program = 'N';

// Call program RTV System Date/Time   UP.
CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
PARAMETER(PAR.Current_System_Date);
PARAMETER(WRK.Numeric_Field_Not_Needed);

// PAR.Change Flag USR = CND.Yes
PAR.Change_Flag_USR = 'Y';

EXECUTE FUNCTION(RTV Appl Whs Restrict  RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1959551;
PARAMETER(JOB.*USER);
PARAMETER(LCL.Application_WHS_Restrict);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?P00196 RMC 8/24/12 get this now to chk it in the command proc
EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
PARAMETER(PAR.Company_Number);
PARAMETER('LDORDD');
PARAMETER(LCL.PFS_AccuSort_Active);
PARAMETER(LCL.PFS_Carlisle_Active);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?08/14/24 SP WI648-Start (Get field Effective Wash Date and Default Wash)
EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
PARAMETER(PAR.Company_Number);
PARAMETER('EFFWASHDT');
PARAMETER(LCL.Date_From_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(PAR.Company_Number);
PARAMETER('DFTWASH');
PARAMETER(LCL.Load_Wash_Flag_Usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Change Wash Flag      USR = CND.Yes
LCL.Change_Wash_Flag_USR = 'Y';

//?08/14/24 SP WI648-End
//?USER: Validate key screen

// PAR.Load ID = KEY.Load ID
PAR.Load_ID = KEY.Load_ID;

//?USER: Initialize detail screen (existing record)

MOVE *ALL (To: DTL From: DB1);

//?Flag 2:  *YES = coming from menu; no load has been entered
CASE;

// IF PAR.Flag 2 is *YES
IF PAR.Flag_2 = *YES;

// DTL.Load ID USR = CON.*ZERO
DTL.Load_ID_USR = *ZERO;

// PAR.Flag 2 = CND.*NO
PAR.Flag_2 = *NO;

//?Flag 2:  *YES = coming from menu; no load has been entered
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Load ID USR = PAR.Load ID
DTL.Load_ID_USR = PAR.Load_ID;

// DTL.Company Number Select = PAR.Company Number
DTL.Company_Number_Select = PAR.Company_Number;

//?** 12/09/2005 LJB - Put PAR.company number into output field
// DTL.Company Number = PAR.Company Number
DTL.Company_Number = PAR.Company_Number;

ENDIF;

// DTL.Trailer ID USR = DTL.Trailer Id
DTL.Trailer_ID_USR = DTL.Trailer_Id;

//?Convert Trailer ID to all caps                        E004079
CASE;

// IF DTL.Trailer ID USR is Entered
IF DTL.Trailer_ID_USR <> *BLANK;

// LCL.Case Sensitive Field = DTL.Trailer ID USR
LCL.Case_Sensitive_Field = DTL.Trailer_ID_USR;

// Call program CVT to Upper Alpha 3   XF.
CALL PROGRAM(CVT to Upper Alpha 3   XF) ('PBSBXFR');
PARAMETER(LCL.Case_Sensitive_Field);
PARAMETER(LCL.Case_Upper_Field);

// DTL.Trailer ID USR = LCL.Case Upper Field
DTL.Trailer_ID_USR = LCL.Case_Upper_Field;

ENDIF;

// WRK.Trailer Id            USR = DTL.Trailer ID USR
WRK.Trailer_Id_USR = DTL.Trailer_ID_USR;

// DTL.Load ID = DTL.Load ID USR
DTL.Load_ID = DTL.Load_ID_USR;

//?E4687A JJH 02/03/16 - Remove logic for OHE Mexican Buyer Truck
EXECUTE FUNCTION(RTV Shipping Line-OHE  RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2016789;
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Shipping_Line_1_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?** pass back the first record found with a shipping line
 CASE;

 // IF DB1.Shipping Line is not entered
 IF DB1.Shipping_Line = *BLANK;

 //?** pass back the first record found with a shipping line
 // IF *OTHERWISE
 IF *OTHERWISE;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Shipping_Line_1_USR);
PARAMETER(DTL.Description_14A_USR);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?E01488 RMC 5/20/11  get this for (RI) on req delv date
EXECUTE FUNCTION(RTV Appt Cnfrm Info   RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC2019201;
PARAMETER(DB1.Load_ID);
PARAMETER(LCL.Appointment_Confirm_Date);
PARAMETER(LCL.Appointment_Confirm_Time);
PARAMETER(LCL.Confirmation_Made_With);
PARAMETER(LCL.Confirmation_Number);
PARAMETER(LCL.LD_Unused_Date_2);
PARAMETER(LCL.LD_Unused_Time_2);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?** Not an error if no record
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

ENDIF;

//?process load
CASE;

// IF DTL.Load ID USR EQ WRK.ZERO
IF DTL.Load_ID_USR = WRK.ZERO;

MOVE *ALL (To: DTL From: CON);

// DTL.Company Number Select = PAR.Company Number
DTL.Company_Number_Select = PAR.Company_Number;

//?** Put par.co# into output screen field & use to get name
// DTL.Company Number = PAR.Company Number
DTL.Company_Number = PAR.Company_Number;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.USR Trailer Output Only = CND.no
PAR.USR_Trailer_Output_Only = 'N';

SET CURSOR;

//?process load
// IF *OTHERWISE
IF *OTHERWISE;

//?** Retrieve start load company for later testing   E00192 7/15/08
EXECUTE FUNCTION(RTV Load Str Company  RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1695918;
PARAMETER(DB1.Load_ID);
PARAMETER(LCL.USR_Company_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Error if user is restricted to one Company and this isn't it
CASE;

// IF LCL.USR Company Number NE WRK.Company Number
IF LCL.USR_Company_Number <> WRK.Company_Number;

// AND PAR.Allow Multi-Company is no
AND PAR.Allow_Multi_Company = 'N';

// Send information message - '&1 Restricted to &2 Company. Access Denied.'
MESSAGE(USR3964 *INFO);
MSGPARM(JOB.*USER);
MSGPARM(PAR.Company_Number);

ENDIF;

//?VAL: Application Warehouse Access
CASE;

// IF PAR.Warehouse Specific Usr is Warehouse Specific Proc
IF PAR.Warehouse_Specific_Usr = 'W';

EXECUTE FUNCTION(Val Warehouse         IF) TYPE(EXCINTFUN)                      AC1961537;
PARAMETER(LCL.Application_WHS_Restrict);
PARAMETER(DB1.Ship_From_Warehouse);
PARAMETER('PDTFE1');
{
 //?Execute internal function

 //?VAL: Warehouse Code
 CASE;

 // IF PAR.Application WHS Restrict is yes
 IF PAR.Application_WHS_Restrict = 'Y';

 CASE;

 // IF PAR.Warehouse Code is Blanks
 IF PAR.Warehouse_Code = *BLANK;

 // Send error message - 'Warehouse Code is required.'
 ERROR(USR2015);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Val App Whs Itm Acs   XF.
 CALL PROGRAM(Val App Whs Itm Acs   XF) ('PNMOXFR');
 PARAMETER(JOB.*USER);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(*ZERO);
 PARAMETER(LCL.WHS_Item_Access_Sts_USR);

 CASE;

 // IF LCL.WHS/Item Access Sts USR is Access Denied
 IF LCL.WHS_Item_Access_Sts_USR = 'D';

 // Send error message - 'Access Denied to &1 for Warehouse &2.'
 ERROR(USR2776);
 MSGPARM(JOB.*USER);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 ENDIF;

 ENDIF;

 //?VAL: Warehouse Code
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Warehouse Code is Not Blanks
 IF PAR.Warehouse_Code <> *BLANK;

 EXECUTE FUNCTION(Val Warehouse Exists   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1323885;
 PARAMETER(PAR.Warehouse_Code);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // Send error message - 'Warehouse Codes not found.'
 ERROR(USR0007);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 ENDIF;

 ENDIF;

 ENDIF;

}


ENDIF;

SET CURSOR;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Load Dispatch new  RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1575740;
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(WRK.Trailer_Id_USR);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Schedule_Sequence_Number);
PARAMETER(DTL.Shipping_Method);
PARAMETER(DTL.On_Time_Y_N);
PARAMETER(DTL.Truck_Ready_Date);
PARAMETER(DTL.Truck_Ready_Time);
PARAMETER(DTL.Spotted_Date);
PARAMETER(DTL.Spotted_Time);
PARAMETER(DTL.Load_Finished_Date);
PARAMETER(DTL.Load_Finished_Time);
PARAMETER(DTL.BOL_Complete_Date);
PARAMETER(DTL.BOL_Complete_Time);
PARAMETER(DTL.BOL_Received_Date);
PARAMETER(DTL.BOL_Received_Time);
PARAMETER(DTL.Truck_Departure_Date);
PARAMETER(DTL.Truck_Departure_Time);
PARAMETER(DTL.Adjusted_Departure_Date);
PARAMETER(DTL.Adjusted_Departure_Time);
PARAMETER(LCL.Shipping_Line);
PARAMETER(DTL.Port_Delv_Terminal);
PARAMETER(DTL.Scheduled_Delivery_Date);
PARAMETER(DTL.Scheduled_Delivery_Time);
PARAMETER(DTL.LH_Unused_Sts);
PARAMETER(DTL.On_Yard_Date);
PARAMETER(DTL.On_Yard_Time);
PARAMETER(NLL.Deadline_Departure_Date);
PARAMETER(NLL.Deadline_Departure_Time);
PARAMETER(DTL.Load_Held_Over);
PARAMETER(DTL.Product_Complete_Date);
PARAMETER(DTL.Product_Complete_Time);
PARAMETER(NLL.Load_Confirmed_Contact);
PARAMETER(DTL.Load_Confirmation_Time);
PARAMETER(DTL.Load_Door_1);
PARAMETER(DTL.Load_Door_2);
PARAMETER(DTL.Partial_Load);
PARAMETER(DTL.LH_Held_Over_Rsn_Cmt);
PARAMETER(DTL.LH_On_Time_Reason_Code);
PARAMETER(DTL.LH_Held_Over_Reason);
PARAMETER(DTL.LPT_Load_Plan_Start_Tm);
PARAMETER(DTL.TPM_Planned_Ship_Date);
{
 //?USER: Initialize routine

 //?***** Change Log and Comments
 //?** 09/19/2006 LJB PK0036
 //?** Change to use new 3 char LH Heldover Reason code
 //?*****
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Use ShipLine/Container if Exports, else Carrier/Trailer  E004079
CASE;

// IF DTL.Shipping Line 1 USR is Entered
IF DTL.Shipping_Line_1_USR <> *BLANK;

// LCL.Trailer ID USR = DTL.Container Number
LCL.Trailer_ID_USR = DTL.Container_Number;

// LCL.Carrier Code = DTL.Shipping Line 1 USR
LCL.Carrier_Code = DTL.Shipping_Line_1_USR;

//?Use ShipLine/Container if Exports, else Carrier/Trailer  E004079
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Trailer ID USR = DTL.Trailer ID USR
LCL.Trailer_ID_USR = DTL.Trailer_ID_USR;

// LCL.Carrier Code = DTL.Carrier Code
LCL.Carrier_Code = DTL.Carrier_Code;

ENDIF;

//?Convert Trailer ID to all caps                        E004079
CASE;

// IF LCL.Trailer ID USR is Entered
IF LCL.Trailer_ID_USR <> *BLANK;

// LCL.Case Sensitive Field = LCL.Trailer ID USR
LCL.Case_Sensitive_Field = LCL.Trailer_ID_USR;

// Call program CVT to Upper Alpha 3   XF.
CALL PROGRAM(CVT to Upper Alpha 3   XF) ('PBSBXFR');
PARAMETER(LCL.Case_Sensitive_Field);
PARAMETER(LCL.Case_Upper_Field);

// LCL.Trailer ID USR = LCL.Case Upper Field
LCL.Trailer_ID_USR = LCL.Case_Upper_Field;

ENDIF;

EXECUTE FUNCTION(Rtv Trailer            RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC1498208;
PARAMETER(LCL.Carrier_Code);
PARAMETER(LCL.Trailer_ID_USR);
PARAMETER(NLL.Company_Number);
PARAMETER(WRK.USR_Load_Type);
PARAMETER(PAR.Trailer_Type);
PARAMETER(PAR.Seaboard_Owned_Status);
PARAMETER(PAR.On_Yard_Status);
PARAMETER(WRK.On_Yard_Date_Trailer_USR);
PARAMETER(WRK.On_Yard_Time_Trailer_USR);
PARAMETER(PAR.Assigned_Status);
PARAMETER(PAR.Available_Status);
PARAMETER(PAR.Not_Available_Reason_Code);
PARAMETER(PAR.Comment_Line);
PARAMETER(PAR.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?If BOL Cmplt and Trailer entered, change Trailer to output only
CASE;

// IF DTL.Trailer ID USR NE WRK.Blank for 12          USR
IF DTL.Trailer_ID_USR <> WRK.Blank_for_12_USR;

// AND DTL.BOL Complete Date is Entered
AND DTL.BOL_Complete_Date <> *ZERO;

// PAR.USR Trailer Output Only = CND.yes
PAR.USR_Trailer_Output_Only = 'Y';

//?If BOL Cmplt and Trailer entered, change Trailer to output only
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Trailer Output Only = CND.no
PAR.USR_Trailer_Output_Only = 'N';

ENDIF;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Shipping_Line_1_USR);
PARAMETER(DTL.Description_14A_USR);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?** 04/09/2008 LJB S00164
//?** Default Shag flag, if it is blanks
CASE;

// IF DTL.Load Shag Flag is blank
IF DTL.Load_Shag_Flag = *BLANK;

// DTL.Load Shag Flag = CND.yes
DTL.Load_Shag_Flag = 'Y';

ENDIF;

//?** Default Wash flag, if it is blanks
CASE;

// IF DTL.Load Wash Flag is blank
IF DTL.Load_Wash_Flag = *BLANK;

// DTL.Load Wash Flag = CND.yes
DTL.Load_Wash_Flag = 'Y';

ENDIF;

//?08/14/24 SP WI648-Start
//?Set field Load Wash Flag
CASE;

// IF DTL.Load Status is Shipped or Invoiced
IF DTL.Load_Status = 'I'/'S';

CASE;

// IF DTL.Scheduled Ship Date GE LCL.Date From             USR
IF DTL.Scheduled_Ship_Date >= LCL.Date_From_USR;

// DTL.Load Wash Flag = LCL.Load Wash Flag        Usr
DTL.Load_Wash_Flag = LCL.Load_Wash_Flag_Usr;

// LCL.Change Wash Flag      USR = CND.No
LCL.Change_Wash_Flag_USR = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Change Wash Flag      USR = CND.Yes
LCL.Change_Wash_Flag_USR = 'Y';

ENDIF;

//?Set field Load Wash Flag
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Load Wash Flag = LCL.Load Wash Flag        Usr
DTL.Load_Wash_Flag = LCL.Load_Wash_Flag_Usr;

CASE;

// IF LCL.Load Wash Flag        Usr is no
IF LCL.Load_Wash_Flag_Usr = 'N';

// LCL.Change Wash Flag      USR = CND.No
LCL.Change_Wash_Flag_USR = 'N';

// IF LCL.Load Wash Flag        Usr is yes
IF LCL.Load_Wash_Flag_Usr = 'Y';

// LCL.Change Wash Flag      USR = CND.Yes
LCL.Change_Wash_Flag_USR = 'Y';

ENDIF;

ENDIF;

//?** LJB 07/01/2014 E003167 Default Nor-Am, Millard Shag/Wash="N"
//?09/06/24 SP WI648-Start
//?Default Shag & Wash to NO if NA1, EF1, EF2, EF3, or EF4   E003167
CASE;

// IF DTL.Ship From Warehouse is EF1-Millard Freezer
IF DTL.Ship_From_Warehouse = 'EF1';

// OR DTL.Ship From Warehouse is EF2-Millard-Friona
OR DTL.Ship_From_Warehouse = 'EF2';

// OR DTL.Ship From Warehouse is EF3-Millard Freezer
OR DTL.Ship_From_Warehouse = 'EF3';

// OR DTL.Ship From Warehouse is EF4-Millard-Fresh
OR DTL.Ship_From_Warehouse = 'EF4';

// OR DTL.Ship From Warehouse is NA1-Nor-Am Cold Storage
OR DTL.Ship_From_Warehouse = 'NA1';

// DTL.Load Shag Flag = CND.no
DTL.Load_Shag_Flag = 'N';

ENDIF;

EXECUTE FUNCTION(RTV All               RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2221988;
PARAMETER(DTL.Ship_From_Warehouse);
PARAMETER(NLL.Warehouse_Description);
PARAMETER(NLL.Address_Line_1);
PARAMETER(NLL.Address_Line_2);
PARAMETER(NLL.Address_Line_3);
PARAMETER(NLL.City);
PARAMETER(NLL.Zip_Postal_Code);
PARAMETER(NLL.Production_Warehouse_Code);
PARAMETER(NLL.State_Code);
PARAMETER(NLL.Lot_Tracking_Flag);
PARAMETER(NLL.Default_Printer);
PARAMETER(NLL.Warehouse_Type);
PARAMETER(NLL.Trans_Contol_AS400_Plant);
PARAMETER(LCL.Warehouse_Location);
PARAMETER(NLL.Warehouse_Std_Chill_Time);
PARAMETER(NLL.Warehouse_Chill_Time);
PARAMETER(NLL.Include_in_Auto_Pre_Pick);
PARAMETER(NLL.Default_Manifest_Copies);
PARAMETER(NLL.Default_Load_Sequence);
PARAMETER(NLL.WHS_Slotting_Limit_Type);
PARAMETER(NLL.Shipping_Company);
PARAMETER(NLL.Accounting_Company);
PARAMETER(NLL.WHS_Sched_Prod_Max_Days);
PARAMETER(NLL.WHS_Inventory_Chill_Time);
PARAMETER(NLL.Parent_Warehouse);
PARAMETER(NLL.Default_Shipping_Whs);
PARAMETER(NLL.WHS_Live_with_Carlisle);
PARAMETER(NLL.WHS_PFS_Interface);
PARAMETER(NLL.WHS_Req_Meter_Reading_Shp);
PARAMETER(NLL.WHS_Default_Load_Type);
PARAMETER(NLL.WHS_TMS_Planning_Region);
PARAMETER(NLL.Default_Carrier_Code);
PARAMETER(NLL.Inventory_Logic_Version);
PARAMETER(NLL.WHS_Auto_Inv_Restoration);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Validate and Update Wash Flag for Warehouse with External Location
CASE;

// IF LCL.Warehouse Location is External
IF LCL.Warehouse_Location = 'E';

// DTL.Load Wash Flag = CND.no
DTL.Load_Wash_Flag = 'N';

//?Set field Load Wash Flag
CASE;

// IF DTL.Load Status is Shipped or Invoiced
IF DTL.Load_Status = 'I'/'S';

// LCL.Change Wash Flag      USR = CND.No
LCL.Change_Wash_Flag_USR = 'N';

//?Set field Load Wash Flag
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF LCL.Date From             USR is Not Entered
IF LCL.Date_From_USR = *ZERO;

// LCL.Change Wash Flag      USR = CND.No
LCL.Change_Wash_Flag_USR = 'N';

// IF DTL.Scheduled Ship Date GE LCL.Date From             USR
IF DTL.Scheduled_Ship_Date >= LCL.Date_From_USR;

// DTL.Load Wash Flag = LCL.Load Wash Flag        Usr
DTL.Load_Wash_Flag = LCL.Load_Wash_Flag_Usr;

CASE;

// IF LCL.Load Wash Flag        Usr is no
IF LCL.Load_Wash_Flag_Usr = 'N';

// LCL.Change Wash Flag      USR = CND.No
LCL.Change_Wash_Flag_USR = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Change Wash Flag      USR = CND.Yes
LCL.Change_Wash_Flag_USR = 'Y';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Change Wash Flag      USR = CND.No
LCL.Change_Wash_Flag_USR = 'N';

ENDIF;

ENDIF;

ENDIF;

//?09/06/24 SP WI648-End
//?08/14/24 SP WI648-End
//?** If Load Status is Shipped or Invoiced, change shag/wash to output
CASE;

// IF DTL.Load Status is Shipped or Invoiced
IF DTL.Load_Status = 'I'/'S';

// PAR.Change Flag USR = CND.No
PAR.Change_Flag_USR = 'N';

ENDIF;

//?** 10/31/2007 LJB FT617
//?** If BOL Cmplt, change Shag and Wash flags to output only
CASE;

// IF DTL.BOL Complete Date is Entered
IF DTL.BOL_Complete_Date <> *ZERO;

// PAR.Change Flag USR = CND.No
PAR.Change_Flag_USR = 'N';

ENDIF;

// WRK.USR On Yard Date = DTL.On Yard Date
WRK.USR_On_Yard_Date = DTL.On_Yard_Date;

// PAR.On Yard Date = DTL.On Yard Date
PAR.On_Yard_Date = DTL.On_Yard_Date;

// WRK.USR Truck Depart Date = DTL.Truck Departure Date
WRK.USR_Truck_Depart_Date = DTL.Truck_Departure_Date;

// WRK.USR Truck Depart Time = DTL.USR Delivery After Time
WRK.USR_Truck_Depart_Time = DTL.USR_Delivery_After_Time;

//?*******
// DTL.Delivery Date = DB1.Requested Delivery Date
DTL.Delivery_Date = DB1.Requested_Delivery_Date;

EXECUTE FUNCTION(RTV Act ShpDt Last Ord RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1444830;
PARAMETER(DTL.Load_ID);
PARAMETER(99999);
PARAMETER(DTL.Actual_Ship_Date);
PARAMETER(DTL.Ship_To_Name);
PARAMETER(DTL.Ship_To_City);
PARAMETER(DTL.Ship_To_State_Code);
{
 //?USER: Initialize routine

 // PAR.Actual Shipped Date = CON.*ZERO
 PAR.Actual_Shipped_Date = *ZERO;

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Actual Ship Date  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1444831;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Ship_To_Name);
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(WRK.Actual_Shipped_Date);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.Actual Shipped Date GT PAR.Actual Shipped Date
 IF WRK.Actual_Shipped_Date > PAR.Actual_Shipped_Date;

 // PAR.Actual Shipped Date = WRK.Actual Shipped Date
 PAR.Actual_Shipped_Date = WRK.Actual_Shipped_Date;

 ENDIF;

}


//?***** 3/4/02  Exp doc with driver sts
EXECUTE FUNCTION(RTV 1st Export Order   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1502454;
PARAMETER(DB1.Load_ID);
PARAMETER(*ZERO);
PARAMETER(WRK.Order_Number);
PARAMETER(WRK.MPC_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?*** If Export Order, then Stop Search and Return Order #
 EXECUTE FUNCTION(RTV Exprt Sts/ShipCust RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1502609;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Export_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Export Status is yes
 IF PAR.Export_Status = 'Y';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 ENDIF;

}


//?Get Exp Docs
CASE;

// IF WRK.Order Number is Not equal to zeros
IF WRK.Order_Number <> *ZERO;

EXECUTE FUNCTION(RTV Exp Doc w/Drvr     RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1643702;
PARAMETER(DB1.Company_Number);
PARAMETER(WRK.Order_Number);
PARAMETER(DTL.Export_Docs_Go_w_Driver);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Get Exp Docs
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Export Docs Go w/Driver = CND.Blank
DTL.Export_Docs_Go_w_Driver = *BLANK;

ENDIF;

//?*****
//?RMC 6/21/06 make bol complet dt/time output all the time with this flag
// PAR.USR Flag 1 = CND.Yes
PAR.USR_Flag_1 = 'Y';

//?** Rtv Sail Port City/State from OHE file if exports exist
CASE;

// IF DB1.Export Status is yes
IF DB1.Export_Status = 'Y';

//?07/30/19 DN R15161-OHE Voyage/Flight parm type changed from NBR to TXT.
// Call program RTV ExpOrd Info for LD XF.
CALL PROGRAM(RTV ExpOrd Info for LD XF) ('PMJMXFR');
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(DTL.Ship_To_Name);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(DB1.Load_ID);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(DTL.Ship_To_City);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(DTL.Ship_To_State_Code);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);

ENDIF;

//?Default dates
CASE;

// IF DTL.On Yard Date is not entered
IF DTL.On_Yard_Date = *ZERO;

//?Put On Yard Date from Trailer into screen fields  E002966
CASE;

// IF DTL.Trailer ID USR NE WRK.Blank for 12          USR
IF DTL.Trailer_ID_USR <> WRK.Blank_for_12_USR;

// AND DTL.Truck Departure Date is not entered
AND DTL.Truck_Departure_Date = *ZERO;

// AND WRK.On Yard Date-Trailer  USR is not entered
AND WRK.On_Yard_Date_Trailer_USR = *ZERO;

// DTL.On Yard Date = JOB.*Job date
DTL.On_Yard_Date = JOB.*Job_date;

//?Put On Yard Date from Trailer into screen fields  E002966
// IF WRK.On Yard Date-Trailer  USR is Entered
IF WRK.On_Yard_Date_Trailer_USR <> *ZERO;

// DTL.On Yard Date = WRK.On Yard Date-Trailer  USR
DTL.On_Yard_Date = WRK.On_Yard_Date_Trailer_USR;

// WRK.USR Display 11 = CND.No
WRK.USR_Display_11 = 'N';

ENDIF;

//?Default dates
// IF DTL.Truck Ready Date is not entered
IF DTL.Truck_Ready_Date = *ZERO;

// DTL.Truck Ready Date = PAR.Current System Date
DTL.Truck_Ready_Date = PAR.Current_System_Date;

//?Default dates
// IF DTL.Spotted Date is not entered
IF DTL.Spotted_Date = *ZERO;

// DTL.Spotted Date = PAR.Current System Date
DTL.Spotted_Date = PAR.Current_System_Date;

//?Default dates
// IF DTL.Load Finished Date is not entered
IF DTL.Load_Finished_Date = *ZERO;

// DTL.Load Finished Date = PAR.Current System Date
DTL.Load_Finished_Date = PAR.Current_System_Date;

//?Default dates
// IF DTL.BOL Received Date is not entered
IF DTL.BOL_Received_Date = *ZERO;

// DTL.BOL Received Date = PAR.Current System Date
DTL.BOL_Received_Date = PAR.Current_System_Date;

//?Default dates
// IF DTL.Truck Departure Date is not entered
IF DTL.Truck_Departure_Date = *ZERO;

// DTL.Truck Departure Date = PAR.Current System Date
DTL.Truck_Departure_Date = PAR.Current_System_Date;

//?Default dates
// IF DTL.Adjusted Departure Date is not entered
IF DTL.Adjusted_Departure_Date = *ZERO;

// DTL.Adjusted Departure Date = PAR.Current System Date
DTL.Adjusted_Departure_Date = PAR.Current_System_Date;

ENDIF;

//?Default times
CASE;

// IF DTL.On Yard Time is Not Entered
IF DTL.On_Yard_Time = *ZERO;

//?Put On Yard Date/Time from Trailer into screen fields  E002966
CASE;

// IF DTL.Trailer ID USR NE WRK.Blank for 12          USR
IF DTL.Trailer_ID_USR <> WRK.Blank_for_12_USR;

// AND DTL.Truck Departure Date is not entered
AND DTL.Truck_Departure_Date = *ZERO;

// AND WRK.On Yard Time-Trailer  USR is Not Entered
AND WRK.On_Yard_Time_Trailer_USR = *ZERO;

// DTL.On Yard Time = JOB.*Job time
DTL.On_Yard_Time = JOB.*Job_time;

//?Put On Yard Date/Time from Trailer into screen fields  E002966
// IF WRK.On Yard Time-Trailer  USR is Entered
IF WRK.On_Yard_Time_Trailer_USR > *ZERO;

// DTL.On Yard Time = WRK.On Yard Time-Trailer  USR
DTL.On_Yard_Time = WRK.On_Yard_Time_Trailer_USR;

// WRK.On Yard Time = WRK.On Yard Time-Trailer  USR
WRK.On_Yard_Time = WRK.On_Yard_Time_Trailer_USR;

// WRK.USR Display 11 = CND.No
WRK.USR_Display_11 = 'N';

ENDIF;

//?Default times
// IF DTL.Truck Ready Time is Not Entered
IF DTL.Truck_Ready_Time = *ZERO;

// DTL.Truck Ready Time = JOB.*Job time
DTL.Truck_Ready_Time = JOB.*Job_time;

//?Default times
// IF DTL.Spotted Time is Not Entered
IF DTL.Spotted_Time = *ZERO;

// DTL.Spotted Time = JOB.*Job time
DTL.Spotted_Time = JOB.*Job_time;

//?Default times
// IF DTL.Load Finished Time is Not Entered
IF DTL.Load_Finished_Time = *ZERO;

// DTL.Load Finished Time = JOB.*Job time
DTL.Load_Finished_Time = JOB.*Job_time;

SET CURSOR;

//?Default times
// IF DTL.BOL Received Time is Not Entered
IF DTL.BOL_Received_Time = *ZERO;

// DTL.BOL Received Time = JOB.*Job time
DTL.BOL_Received_Time = JOB.*Job_time;

//?Default times
// IF DTL.Truck Departure Time is Not Entered
IF DTL.Truck_Departure_Time = *ZERO;

// DTL.Truck Departure Time = JOB.*Job time
DTL.Truck_Departure_Time = JOB.*Job_time;

//?Default times
// IF DTL.Adjusted Departure Time is Not Entered
IF DTL.Adjusted_Departure_Time = *ZERO;

// DTL.Adjusted Departure Time = JOB.*Job time
DTL.Adjusted_Departure_Time = JOB.*Job_time;

ENDIF;

//?Move 6.0 time fields to 4.0 - user does not want to see seconds
// DTL.Departure Time DFT = DTL.Adjusted Departure Time / CON.100 *
DTL.Departure_Time_DFT = DTL.Adjusted_Departure_Time / 100;

// DTL.USR Delivery After Time = DTL.Truck Departure Time / CON.100 *
DTL.USR_Delivery_After_Time = DTL.Truck_Departure_Time / 100;

// DTL.USR Billed Time = DTL.BOL Received Time / CON.100 *
DTL.USR_Billed_Time = DTL.BOL_Received_Time / 100;

// DTL.USR Complete Time = DTL.BOL Complete Time / CON.100 *
DTL.USR_Complete_Time = DTL.BOL_Complete_Time / 100;

// DTL.USR Finished Time = DTL.Load Finished Time / CON.100 *
DTL.USR_Finished_Time = DTL.Load_Finished_Time / 100;

// DTL.USR Picked Up Time = DTL.Spotted Time / CON.100 *
DTL.USR_Picked_Up_Time = DTL.Spotted_Time / 100;

// DTL.USR Ready Time = DTL.Truck Ready Time / CON.100 *
DTL.USR_Ready_Time = DTL.Truck_Ready_Time / 100;

// DTL.USR On Yard Time = DTL.On Yard Time / CON.100 *
DTL.USR_On_Yard_Time = DTL.On_Yard_Time / 100;

// DTL.LPT Load Plan Time = DTL.LPT Load Plan Start Tm / CON.100 *
DTL.LPT_Load_Plan_Time = DTL.LPT_Load_Plan_Start_Tm / 100;

//?** 11/16/2007 LJB FP1251 DDD&T will be zeros if one or more of
//?** the Miles Between Cities records is missing
//?E7892-Replaced 'USR Deadline Deprt Time' with 'TMS Deadline Depart Time'.
// DTL.TMS Deadline Depart Time = DTL.Deadline Departure Time / CON.100 *
DTL.TMS_Deadline_Depart_Time = DTL.Deadline_Departure_Time / 100;

// DTL.USR Product complete tm = DTL.Product Complete Time / CON.100 *
DTL.USR_Product_complete_tm = DTL.Product_Complete_Time / 100;

// DTL.Load Door 1 USR = DTL.Load Door 1
DTL.Load_Door_1_USR = DTL.Load_Door_1;

// DTL.Load Door 2 USR = DTL.Load Door 2
DTL.Load_Door_2_USR = DTL.Load_Door_2;

//?Default:  Partial Load
CASE;

// IF DB1.Partial Load is Not Entered
IF DB1.Partial_Load = *BLANK;

// DTL.Partial Load = CND.No
DTL.Partial_Load = 'N';

ENDIF;

ENDIF;

//?USER: Validate detail screen fields

//?** If Allow-Multi Company = NO, then Load Company must match
//?** Company Number from Security parms       E00192 7/15/2008
//?** Error if user is restricted to one Company and this isn't it
CASE;

// IF LCL.USR Company Number NE WRK.Company Number
IF LCL.USR_Company_Number <> WRK.Company_Number;

// AND PAR.Allow Multi-Company is no
AND PAR.Allow_Multi_Company = 'N';

// Send error message - '&1 Restricted to &2 Company. Access Denied.'
ERROR(USR3610);
MSGPARM(JOB.*USER);
MSGPARM(WRK.Company_Number);

ENDIF;

//?F5=Refresh
CASE;

// IF DTL.*CMD key is *Refresh
IF DTL.*CMD_key = '05';

// PAR.Load ID = DTL.Load ID
PAR.Load_ID = DTL.Load_ID;

// PAR.Company Number = DTL.Company Number
PAR.Company_Number = DTL.Company_Number;

RETURN;

ENDIF;

//?F4=Prompt Company or Load
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

//?Prompt on Company Number - 12/09/2005 LJB - Use dtl.company number
CASE;

// IF PGM.*Cursor field <IS> DTL.Company Number
IF PGM.*Cursor_field = DTL.Company_Number;

CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// Call program SEL Company by Number  SR.
CALL PROGRAM(SEL Company by Number  SR) ('CAAJSRR');
PARAMETER(DTL.Company_Number_Select);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Function not available for this entry'
ERROR(USR1942);

ENDIF;

ENDIF;

//?Prompt on Load ID
CASE;

// IF PGM.*Cursor field <IS> DTL.Load ID USR
IF PGM.*Cursor_field = DTL.Load_ID_USR;

// DTL.Company Number Select = DTL.Company Number
DTL.Company_Number_Select = DTL.Company_Number;

// Call program SEL Load ID by Co#     SR.
CALL PROGRAM(SEL Load ID by Co#     SR) ('PPVJSRR');
PARAMETER(DTL.Load_ID_USR);
PARAMETER(DTL.Company_Number_Select);

//?** 12/12/2005 - if co# was selected, load it to screen
CASE;

// IF DTL.Company Number Select NE DTL.Company Number
IF DTL.Company_Number_Select <> DTL.Company_Number;

// DTL.Company Number = DTL.Company Number Select
DTL.Company_Number = DTL.Company_Number_Select;

ENDIF;

ENDIF;

ENDIF;

//?F4=Prompt on Trailer (or container  E004079)
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Trailer ID USR
AND PGM.*Cursor_field = DTL.Trailer_ID_USR;

// LCL.Company Number = DTL.Company Number
LCL.Company_Number = DTL.Company_Number;

//?If export use ShipLine/Container, else use Carrier/Trailer  E004079
CASE;

// IF DTL.Shipping Line 1 USR is Entered
IF DTL.Shipping_Line_1_USR <> *BLANK;

// LCL.Carrier Code = DTL.Shipping Line 1 USR
LCL.Carrier_Code = DTL.Shipping_Line_1_USR;

// LCL.Trailer ID USR = DTL.Container Number
LCL.Trailer_ID_USR = DTL.Container_Number;

//?If export use ShipLine/Container, else use Carrier/Trailer  E004079
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Carrier Code = DTL.Carrier Code
LCL.Carrier_Code = DTL.Carrier_Code;

// LCL.Trailer ID USR = DTL.Trailer ID USR
LCL.Trailer_ID_USR = DTL.Trailer_ID_USR;

ENDIF;

// Call program Sel Trailer           SR.
CALL PROGRAM(Sel Trailer           SR) ('PBRFSRR');
PARAMETER(LCL.Carrier_Code);
PARAMETER(LCL.Trailer_ID_USR);
PARAMETER(LCL.Company_Number);
PARAMETER(NLL.On_Yard_Status);
PARAMETER(NLL.On_Yard_Date);
PARAMETER(NLL.On_Yard_Time);
PARAMETER(NLL.Available_Status);

//?Update screen with retrieved values                   E004079
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

// DTL.Shipping Line 1 USR = LCL.Carrier Code
DTL.Shipping_Line_1_USR = LCL.Carrier_Code;

// DTL.Trailer ID USR = LCL.Trailer ID USR
DTL.Trailer_ID_USR = LCL.Trailer_ID_USR;

//?Update screen with retrieved values                   E004079
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Carrier Code = LCL.Carrier Code
DTL.Carrier_Code = LCL.Carrier_Code;

// DTL.Trailer ID USR = LCL.Trailer ID USR
DTL.Trailer_ID_USR = LCL.Trailer_ID_USR;

ENDIF;

ENDIF;

//?F22=Search Load Id by PO#; E7762
CASE;

// IF DTL.*CMD key is CF22
IF DTL.*CMD_key = '22';

// LCL.Customer Purchase Order # = CON.*BLANK
LCL.Customer_Purchase_Order_# = *BLANK;

// DTL.Load ID USR = CON.*ZERO
DTL.Load_ID_USR = *ZERO;

// Call program SEL Load Id by PO      SR.
CALL PROGRAM(SEL Load Id by PO      SR) ('PBY1SRR');
PARAMETER(DTL.Company_Number);
PARAMETER(LCL.Customer_Purchase_Order_#);
PARAMETER(DTL.Load_ID_USR);

ENDIF;

//?Exit if changed load id
CASE;

// IF DTL.Load ID USR NE DTL.Load ID
IF DTL.Load_ID_USR <> DTL.Load_ID;

// OR DTL.Company Number Select NE DTL.Company Number
OR DTL.Company_Number_Select <> DTL.Company_Number;

EXECUTE FUNCTION(VAL Load Exist        RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1197457;
PARAMETER(DTL.Load_ID_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Load Header &1 not found.'
ERROR(USR2313);
MSGPARM(DTL.Load_ID_USR);

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Load ID = DTL.Load ID USR
PAR.Load_ID = DTL.Load_ID_USR;

// PAR.Company Number = DTL.Company Number
PAR.Company_Number = DTL.Company_Number;

RETURN;

ENDIF;

ENDIF;

//?F20=Traffic Comments
CASE;

// IF DTL.*CMD key is CF20
IF DTL.*CMD_key = '20';

// Call program EDT PD Traffic Comment EF.
CALL PROGRAM(EDT PD Traffic Comment EF) ('PDCZEFR');
PARAMETER(DTL.Load_ID);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?F21=Print Confirmation
CASE;

// IF DTL.*CMD key is *Print 21
IF DTL.*CMD_key = '21';

CASE;

// IF DTL.Truck Ready Date is not entered
IF DTL.Truck_Ready_Date = *ZERO;

// OR DTL.USR Ready Time is *Not Entered
OR DTL.USR_Ready_Time = *ZERO;

// Send error message - 'Truck Ready Date and Time must be present to print confirmation.'
ERROR(USR2797);
MSGPARM(DTL.Truck_Ready_Date);
MSGPARM(DTL.USR_Ready_Time);

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Company Number Pass   USR = DTL.Company Number
WRK.Company_Number_Pass_USR = DTL.Company_Number;

//?** load par fields with screen fields                P000737
// PAR.Company Number Pass   USR = DTL.Company Number
PAR.Company_Number_Pass_USR = DTL.Company_Number;

// PAR.Order Number 1  PASS  USR = DTL.Load ID USR
PAR.Order_Number_1_PASS_USR = DTL.Load_ID_USR;

// WRK.Company Number Pass   USR = DTL.Company Number
WRK.Company_Number_Pass_USR = DTL.Company_Number;

// WRK.Job Name = SUBSTRING(JOB.*JOB,CON.1,CON.9)
WRK.Job_Name = SUBSTRING(JOB.*JOB:1:9);

// WRK.Job Name = CONCAT(WRK.Job Name,CON.P,CON.*ZERO)
WRK.Job_Name = WRK.Job_Name + 'P' (*ZERO);

//?** Remove WF Load Confirmation Work functions      P000737
// LCL.Job Log Create = CND.*NO
LCL.Job_Log_Create = *NO;

// PAR.PRT Description = CON.Print Load Confirm
PAR.PRT_Description = 'Print Load Confirm';

// PAR.PRT Printer Device = PAR.Default Printer
PAR.PRT_Printer_Device = PAR.Default_Printer;

// PAR.PRT Hold Output Sts = CND.*NO
PAR.PRT_Hold_Output_Sts = *NO;

// PAR.PRT Save Output Sts = CND.*NO
PAR.PRT_Save_Output_Sts = *NO;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Night Queue = CON.*BLANK
PAR.PRT_Night_Queue = *BLANK;

// Call program PMT Print Option  SHR  PV.
CALL PROGRAM(PMT Print Option  SHR  PV) ('PDG0PVR');
PARAMETER(PAR.PRT_Description);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('O/M');

//?Call the submitting program
CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

//?Call the submitting program
// IF *OTHERWISE
IF *OTHERWISE;

//?** Remove PCA2UPR and call function for PDVVUPC    P000737
//?** to Print Only the load confirmation
// PAR.System Value Numeric = PAR.PRT Number of Copies
PAR.System_Value_Numeric = PAR.PRT_Number_of_Copies;

//?** default # of copies to 1 if it is zeros      P000737
CASE;

// IF PAR.System Value Numeric is Equal to zero
IF PAR.System_Value_Numeric = *ZERO;

// PAR.System Value Numeric = CON.1
PAR.System_Value_Numeric = 1;

ENDIF;

// WRK.USR Status (Y/N) = CND.Print
WRK.USR_Status_Y_N = 'P';

// WRK.Status Description 3  USR = CON.PNW2PFR$
WRK.Status_Description_3_USR = 'PNW2PFR$';

// WRK.Status - Y or N = CND.no
WRK.Status_Y_or_N = 'N';

// WRK.Status Flag 1  Y/N = CND.No
WRK.Status_Flag_1_Y_N = 'N';

EXECUTE FUNCTION(EXC Load Confirm Fax   IF) TYPE(EXCINTFUN)                     AC1595755;
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Order_Number_1_PASS_USR);
PARAMETER(*BLANK);
PARAMETER(DTL.Carrier_Code);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(WRK.Status_Flag_1_Y_N);
PARAMETER('N');
PARAMETER('N');
PARAMETER('N');
PARAMETER('N');
PARAMETER(WRK.Status_Y_or_N);
PARAMETER(WRK.Status_Description_3_USR);
PARAMETER(WRK.USR_Status_Y_N);
PARAMETER(PAR.PRT_Description);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(*BLANK);
{
 //?Execute internal function

 //?** See comments for explanation of parms.
 // Call program PRC Submit Fax Load Cn UP.
 CALL PROGRAM(PRC Submit Fax Load Cn UP) ('PDVVUPC');
 PARAMETER(WRK.Return_Code_Usr);
 PARAMETER(PAR.Company_Number_Pass_USR);
 PARAMETER(PAR.Order_Number_1_PASS_USR);
 PARAMETER(PAR.Transloader_Carrier_Code);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Shipping_Line);
 PARAMETER(PAR.OHE_Carrier_SCAC_Code);
 PARAMETER(PAR.Status_Flag_1_Y_N);
 PARAMETER(PAR.Status_Flag_2_Y_N);
 PARAMETER(PAR.Status_Flag_3_Y_N);
 PARAMETER(PAR.Status_Flag_4_Y_N);
 PARAMETER(PAR.Status_Flag_5_Y_N);
 PARAMETER(PAR.Status_Y_or_N);
 PARAMETER(PAR.Status_Description_3_USR);
 PARAMETER(PAR.USR_Status_Y_N);
 PARAMETER(PAR.PRT_Printer_Device);
 PARAMETER(PAR.PRT_Hold_Output_Sts);
 PARAMETER(PAR.PRT_Save_Output_Sts);
 PARAMETER(PAR.System_Value_Numeric);
 PARAMETER(PAR.Email_Address);

 //?***** Change Log and Comments
 DO;

 //?*****
 //?** 04/24/2011 LJB P000737
 //?** Pgm PODPUPR replaced with PDVVUPC. Parms changed to either
 //?** Print Only or Fax/Email to all carriers that are passed in.
 //?** *** Parms are:
 //?** Status-Y or N = Fax Carrier, Status Flag 1 Y/N=Fax Dispatcher,
 //?** Status Flag 2 Y/N=Fax Transloader, Status Flag 3 Y/N=Fax Mexican,
 //?** Status Flag 4 Y/N=Fax Exp Coordn, Status Flag 5 Y/N=Fax Ocean Shpr,
 //?** Usr Status (Y/N)=Print Only/Fax, Status Description 3=Printer file
 //?*****
 ENDDO;

}


CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?Trailer ID formatting
CASE;

// IF DTL.Trailer ID USR EQ WRK.Blank for 12          USR
IF DTL.Trailer_ID_USR = WRK.Blank_for_12_USR;

// DTL.Trailer Id = CON.*BLANK
DTL.Trailer_Id = *BLANK;

// DTL.On Yard Date = CON.*ZERO
DTL.On_Yard_Date = *ZERO;

// DTL.USR On Yard Time = CON.*ZERO
DTL.USR_On_Yard_Time = *ZERO;

//?Trailer ID formatting
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Trailer Id = DTL.Trailer ID USR
DTL.Trailer_Id = DTL.Trailer_ID_USR;

ENDIF;

//?F6 & F17: Trailer - do not allow if Warehouse Specific is true
CASE;

// IF PAR.Warehouse Specific Usr is Warehouse Specific Proc
IF PAR.Warehouse_Specific_Usr = 'W';

CASE;

// IF DTL.*CMD key is CF06
IF DTL.*CMD_key = '06';

// OR DTL.*CMD key is CF17
OR DTL.*CMD_key = '17';

// Send error message - 'Function not allowed.'
ERROR(USR1833);

ENDIF;

//?F6 & F17: Trailer - do not allow if Warehouse Specific is true
// IF *OTHERWISE
IF *OTHERWISE;

//?F6=Create Trailer
CASE;

// IF DTL.*CMD key is *Create
IF DTL.*CMD_key = '06';

// Call program EDT Trailer            PV.
CALL PROGRAM(EDT Trailer            PV) ('PDI0PVR');
PARAMETER(*BLANK);
PARAMETER(*BLANK);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?F17=WW Trailer
CASE;

// IF DTL.*CMD key is CF17
IF DTL.*CMD_key = '17';

// Call program WW Trailer             DF.
CALL PROGRAM(WW Trailer             DF) ('PDGNDFR');
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(DTL.Company_Number);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?VAL:  Doors
CASE;

// IF DTL.USR Picked Up Time is Entered
IF DTL.USR_Picked_Up_Time <> *ZERO;

// AND DTL.Load Status is Prior to Shipped
AND DTL.Load_Status = 'C'/'E'/'L'/'U';

CASE;

// IF DTL.Load Door 1 USR is Not Entered
IF DTL.Load_Door_1_USR = *ZERO;

// Send error message - 'At least one Door is required.'
ERROR(USR2998);
MSGPARM(DTL.Load_Door_1_USR);

ENDIF;

ENDIF;

//?USER: Validate detail screen relations

//?Convert Trailer ID to all caps                        E004079
CASE;

// IF DTL.Trailer ID USR is Entered
IF DTL.Trailer_ID_USR <> *BLANK;

// LCL.Case Sensitive Field = DTL.Trailer ID USR
LCL.Case_Sensitive_Field = DTL.Trailer_ID_USR;

// Call program CVT to Upper Alpha 3   XF.
CALL PROGRAM(CVT to Upper Alpha 3   XF) ('PBSBXFR');
PARAMETER(LCL.Case_Sensitive_Field);
PARAMETER(LCL.Case_Upper_Field);

// DTL.Trailer ID USR = LCL.Case Upper Field
DTL.Trailer_ID_USR = LCL.Case_Upper_Field;

ENDIF;

//?OMS245 - see Narrative for changes on 5/01/97
// DTL.Adjusted Departure Time = DTL.Departure Time DFT * CON.100 *
DTL.Adjusted_Departure_Time = DTL.Departure_Time_DFT * 100;

// DTL.Truck Departure Time = DTL.USR Delivery After Time * CON.100 *
DTL.Truck_Departure_Time = DTL.USR_Delivery_After_Time * 100;

// DTL.BOL Received Time = DTL.USR Billed Time * CON.100 *
DTL.BOL_Received_Time = DTL.USR_Billed_Time * 100;

// DTL.BOL Complete Time = DTL.USR Complete Time * CON.100 *
DTL.BOL_Complete_Time = DTL.USR_Complete_Time * 100;

// DTL.Load Finished Time = DTL.USR Finished Time * CON.100 *
DTL.Load_Finished_Time = DTL.USR_Finished_Time * 100;

// DTL.Spotted Time = DTL.USR Picked Up Time * CON.100 *
DTL.Spotted_Time = DTL.USR_Picked_Up_Time * 100;

// DTL.Truck Ready Time = DTL.USR Ready Time * CON.100 *
DTL.Truck_Ready_Time = DTL.USR_Ready_Time * 100;

// DTL.On Yard Time = DTL.USR On Yard Time * CON.100 *
DTL.On_Yard_Time = DTL.USR_On_Yard_Time * 100;

// LCL.test field two = CON.59
LCL.test_field_two = 59;

//?Check times for minutes *gt 59
DO;

//?Error if On Yard time minutes is *gt 59
CASE;

// IF DTL.USR On Yard Time is Entered
IF DTL.USR_On_Yard_Time <> 0;

// LCL.Time Alpha usr 6 = CVTVAR(DTL.On Yard Time)
LCL.Time_Alpha_usr_6 = CVTVAR(DTL.On_Yard_Time);

// Call program Mov DteTme MM dd YY.etcXF.
CALL PROGRAM(Mov DteTme MM dd YY.etcXF) ('PNI4XFR');
PARAMETER(LCL.Date_Alpha_USR);
PARAMETER(LCL.Time_Alpha_usr_6);
PARAMETER(LCL.Month_Char_USR);
PARAMETER(LCL.Day_Char_USR);
PARAMETER(LCL.Century_Usr_TXT);
PARAMETER(LCL.Year_Char_USR);
PARAMETER(LCL.Hours_2A_USR);
PARAMETER(LCL.Minutes_2A_USR);
PARAMETER(LCL.Seconds_2A_USR);

// LCL.USR Number 2.0 = CVTVAR(LCL.Minutes  2A          USR)
LCL.USR_Number_2_0 = CVTVAR(LCL.Minutes_2A_USR);

CASE;

// IF LCL.USR Number 2.0 GT LCL.test field two
IF LCL.USR_Number_2_0 > LCL.test_field_two;

// Send error message - 'Time Field minutes GT 59.  Correct time and re-enter.'
ERROR(USR2175);
MSGPARM(DTL.USR_On_Yard_Time);

ENDIF;

ENDIF;

//?Error if Truck Ready time minutes is *gt 59
CASE;

// IF DTL.USR Ready Time is Entered
IF DTL.USR_Ready_Time <> *ZERO;

// LCL.Time Alpha usr 6 = CVTVAR(DTL.Truck Ready Time)
LCL.Time_Alpha_usr_6 = CVTVAR(DTL.Truck_Ready_Time);

// Call program Mov DteTme MM dd YY.etcXF.
CALL PROGRAM(Mov DteTme MM dd YY.etcXF) ('PNI4XFR');
PARAMETER(LCL.Date_Alpha_USR);
PARAMETER(LCL.Time_Alpha_usr_6);
PARAMETER(LCL.Month_Char_USR);
PARAMETER(LCL.Day_Char_USR);
PARAMETER(LCL.Century_Usr_TXT);
PARAMETER(LCL.Year_Char_USR);
PARAMETER(LCL.Hours_2A_USR);
PARAMETER(LCL.Minutes_2A_USR);
PARAMETER(LCL.Seconds_2A_USR);

// LCL.USR Number 2.0 = CVTVAR(LCL.Minutes  2A          USR)
LCL.USR_Number_2_0 = CVTVAR(LCL.Minutes_2A_USR);

CASE;

// IF LCL.USR Number 2.0 GT LCL.test field two
IF LCL.USR_Number_2_0 > LCL.test_field_two;

// Send error message - 'Time Field minutes GT 59.  Correct time and re-enter.'
ERROR(USR2175);
MSGPARM(DTL.USR_Ready_Time);

ENDIF;

ENDIF;

//?Error if Spotted time minutes is *gt 59
CASE;

// IF DTL.USR Picked Up Time is Entered
IF DTL.USR_Picked_Up_Time <> *ZERO;

// LCL.Time Alpha usr 6 = CVTVAR(DTL.Spotted Time)
LCL.Time_Alpha_usr_6 = CVTVAR(DTL.Spotted_Time);

// Call program Mov DteTme MM dd YY.etcXF.
CALL PROGRAM(Mov DteTme MM dd YY.etcXF) ('PNI4XFR');
PARAMETER(LCL.Date_Alpha_USR);
PARAMETER(LCL.Time_Alpha_usr_6);
PARAMETER(LCL.Month_Char_USR);
PARAMETER(LCL.Day_Char_USR);
PARAMETER(LCL.Century_Usr_TXT);
PARAMETER(LCL.Year_Char_USR);
PARAMETER(LCL.Hours_2A_USR);
PARAMETER(LCL.Minutes_2A_USR);
PARAMETER(LCL.Seconds_2A_USR);

// LCL.USR Number 2.0 = CVTVAR(LCL.Minutes  2A          USR)
LCL.USR_Number_2_0 = CVTVAR(LCL.Minutes_2A_USR);

CASE;

// IF LCL.USR Number 2.0 GT LCL.test field two
IF LCL.USR_Number_2_0 > LCL.test_field_two;

// Send error message - 'Time Field minutes GT 59.  Correct time and re-enter.'
ERROR(USR2175);
MSGPARM(DTL.USR_Picked_Up_Time);

ENDIF;

ENDIF;

//?Error if Load Finished time minutes is *gt 59
CASE;

// IF DTL.USR Finished Time is Entered
IF DTL.USR_Finished_Time <> *ZERO;

// LCL.Time Alpha usr 6 = CVTVAR(DTL.Load Finished Time)
LCL.Time_Alpha_usr_6 = CVTVAR(DTL.Load_Finished_Time);

// Call program Mov DteTme MM dd YY.etcXF.
CALL PROGRAM(Mov DteTme MM dd YY.etcXF) ('PNI4XFR');
PARAMETER(LCL.Date_Alpha_USR);
PARAMETER(LCL.Time_Alpha_usr_6);
PARAMETER(LCL.Month_Char_USR);
PARAMETER(LCL.Day_Char_USR);
PARAMETER(LCL.Century_Usr_TXT);
PARAMETER(LCL.Year_Char_USR);
PARAMETER(LCL.Hours_2A_USR);
PARAMETER(LCL.Minutes_2A_USR);
PARAMETER(LCL.Seconds_2A_USR);

// LCL.USR Number 2.0 = CVTVAR(LCL.Minutes  2A          USR)
LCL.USR_Number_2_0 = CVTVAR(LCL.Minutes_2A_USR);

CASE;

// IF LCL.USR Number 2.0 GT LCL.test field two
IF LCL.USR_Number_2_0 > LCL.test_field_two;

// Send error message - 'Time Field minutes GT 59.  Correct time and re-enter.'
ERROR(USR2175);
MSGPARM(DTL.USR_Finished_Time);

ENDIF;

ENDIF;

//?Error if BOL Complete time minutes is *gt 59
CASE;

// IF DTL.USR Complete Time is Entered
IF DTL.USR_Complete_Time <> *ZERO;

// LCL.Time Alpha usr 6 = CVTVAR(DTL.BOL Complete Time)
LCL.Time_Alpha_usr_6 = CVTVAR(DTL.BOL_Complete_Time);

// Call program Mov DteTme MM dd YY.etcXF.
CALL PROGRAM(Mov DteTme MM dd YY.etcXF) ('PNI4XFR');
PARAMETER(LCL.Date_Alpha_USR);
PARAMETER(LCL.Time_Alpha_usr_6);
PARAMETER(LCL.Month_Char_USR);
PARAMETER(LCL.Day_Char_USR);
PARAMETER(LCL.Century_Usr_TXT);
PARAMETER(LCL.Year_Char_USR);
PARAMETER(LCL.Hours_2A_USR);
PARAMETER(LCL.Minutes_2A_USR);
PARAMETER(LCL.Seconds_2A_USR);

// LCL.USR Number 2.0 = CVTVAR(LCL.Minutes  2A          USR)
LCL.USR_Number_2_0 = CVTVAR(LCL.Minutes_2A_USR);

CASE;

// IF LCL.USR Number 2.0 GT LCL.test field two
IF LCL.USR_Number_2_0 > LCL.test_field_two;

// Send error message - 'Time Field minutes GT 59.  Correct time and re-enter.'
ERROR(USR2175);
MSGPARM(DTL.BOL_Complete_Time);

ENDIF;

ENDIF;

//?Error if BOL Received time minutes is *gt 59
CASE;

// IF DTL.USR Billed Time is Entered
IF DTL.USR_Billed_Time <> *ZERO;

// LCL.Time Alpha usr 6 = CVTVAR(DTL.BOL Received Time)
LCL.Time_Alpha_usr_6 = CVTVAR(DTL.BOL_Received_Time);

// Call program Mov DteTme MM dd YY.etcXF.
CALL PROGRAM(Mov DteTme MM dd YY.etcXF) ('PNI4XFR');
PARAMETER(LCL.Date_Alpha_USR);
PARAMETER(LCL.Time_Alpha_usr_6);
PARAMETER(LCL.Month_Char_USR);
PARAMETER(LCL.Day_Char_USR);
PARAMETER(LCL.Century_Usr_TXT);
PARAMETER(LCL.Year_Char_USR);
PARAMETER(LCL.Hours_2A_USR);
PARAMETER(LCL.Minutes_2A_USR);
PARAMETER(LCL.Seconds_2A_USR);

// LCL.USR Number 2.0 = CVTVAR(LCL.Minutes  2A          USR)
LCL.USR_Number_2_0 = CVTVAR(LCL.Minutes_2A_USR);

CASE;

// IF LCL.USR Number 2.0 GT LCL.test field two
IF LCL.USR_Number_2_0 > LCL.test_field_two;

// Send error message - 'Time Field minutes GT 59.  Correct time and re-enter.'
ERROR(USR2175);
MSGPARM(DTL.USR_Billed_Time);

ENDIF;

ENDIF;

//?Error if Truck Departure time minutes is *gt 59
CASE;

// IF DTL.USR Delivery After Time is Entered
IF DTL.USR_Delivery_After_Time <> *ZERO;

// LCL.Time Alpha usr 6 = CVTVAR(DTL.Truck Departure Time)
LCL.Time_Alpha_usr_6 = CVTVAR(DTL.Truck_Departure_Time);

// Call program Mov DteTme MM dd YY.etcXF.
CALL PROGRAM(Mov DteTme MM dd YY.etcXF) ('PNI4XFR');
PARAMETER(LCL.Date_Alpha_USR);
PARAMETER(LCL.Time_Alpha_usr_6);
PARAMETER(LCL.Month_Char_USR);
PARAMETER(LCL.Day_Char_USR);
PARAMETER(LCL.Century_Usr_TXT);
PARAMETER(LCL.Year_Char_USR);
PARAMETER(LCL.Hours_2A_USR);
PARAMETER(LCL.Minutes_2A_USR);
PARAMETER(LCL.Seconds_2A_USR);

// LCL.USR Number 2.0 = CVTVAR(LCL.Minutes  2A          USR)
LCL.USR_Number_2_0 = CVTVAR(LCL.Minutes_2A_USR);

CASE;

// IF LCL.USR Number 2.0 GT LCL.test field two
IF LCL.USR_Number_2_0 > LCL.test_field_two;

// Send error message - 'Time Field minutes GT 59.  Correct time and re-enter.'
ERROR(USR2175);
MSGPARM(DTL.USR_Delivery_After_Time);

ENDIF;

ENDIF;

//?Error if Adjusted Departure time minutes is *gt 59
CASE;

// IF DTL.Departure Time DFT is Entered
IF DTL.Departure_Time_DFT <> 0;

// LCL.Time Alpha usr 6 = CVTVAR(DTL.Adjusted Departure Time)
LCL.Time_Alpha_usr_6 = CVTVAR(DTL.Adjusted_Departure_Time);

// Call program Mov DteTme MM dd YY.etcXF.
CALL PROGRAM(Mov DteTme MM dd YY.etcXF) ('PNI4XFR');
PARAMETER(LCL.Date_Alpha_USR);
PARAMETER(LCL.Time_Alpha_usr_6);
PARAMETER(LCL.Month_Char_USR);
PARAMETER(LCL.Day_Char_USR);
PARAMETER(LCL.Century_Usr_TXT);
PARAMETER(LCL.Year_Char_USR);
PARAMETER(LCL.Hours_2A_USR);
PARAMETER(LCL.Minutes_2A_USR);
PARAMETER(LCL.Seconds_2A_USR);

// LCL.USR Number 2.0 = CVTVAR(LCL.Minutes  2A          USR)
LCL.USR_Number_2_0 = CVTVAR(LCL.Minutes_2A_USR);

CASE;

// IF LCL.USR Number 2.0 GT LCL.test field two
IF LCL.USR_Number_2_0 > LCL.test_field_two;

// Send error message - 'Time Field minutes GT 59.  Correct time and re-enter.'
ERROR(USR2175);
MSGPARM(DTL.Departure_Time_DFT);

ENDIF;

ENDIF;

ENDDO;

//?OMS301 -- Validate Trailer    E001790--Error if Trailer is already assignd
CASE;

// IF DTL.Trailer ID USR NE WRK.Blank for 12          USR
IF DTL.Trailer_ID_USR <> WRK.Blank_for_12_USR;

// AND DTL.Trailer ID USR NE WRK.Trailer Id            USR
AND DTL.Trailer_ID_USR <> WRK.Trailer_Id_USR;

//?** Don't allow selection if trailer is used on another load  E001790
//?** Allow multiple carriers to use the same Trailer ID E002105
//?** Validate ShipLine/Container or Carrier/Trailer ID  E004079
// LCL.Carrier Code = DTL.Carrier Code
LCL.Carrier_Code = DTL.Carrier_Code;

// LCL.Trailer ID USR = DTL.Trailer ID USR
LCL.Trailer_ID_USR = DTL.Trailer_ID_USR;

// LCL.Load ID USR = CND.Not entered
LCL.Load_ID_USR = *ZERO;

EXECUTE FUNCTION(VAL Trailer assignmnt RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC2031954;
PARAMETER(*ZERO);
PARAMETER(LCL.Trailer_ID_USR);
PARAMETER(LCL.Carrier_Code);
PARAMETER(LCL.Load_Id_3);
PARAMETER(DTL.Load_ID_USR);
{
 //?USER: Initialize routine

 //?***** Changes and comments
 DO;

 //?** 05/14/2012 LJB E002105
 //?** Restrict to Carrier/Trailer, okay if multiple carriers have
 //?** the same trailer id
 ENDDO;

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.Trailer Available to assn
 PGM.*Return_code = 'TRLRAVL';

 //?USER: Process Data record

 CASE;

 // IF DB1.Load ID NE PAR.Load Id 2
 IF DB1.Load_ID <> PAR.Load_Id_2;

 CASE;

 // IF DB1.Load Status is Prior to Shipped
 IF DB1.Load_Status = 'C'/'E'/'L'/'U';

 // PGM.*Return code = CND.Trailer already assigned
 PGM.*Return_code = 'TRLRASN';

 // PAR.USR Load ID = DB1.Load ID
 PAR.USR_Load_ID = DB1.Load_ID;

 QUIT;

 ENDIF;

 ENDIF;

}


//?* Send message if trailer is used, else validate   E001790
CASE;

// IF PGM.*Return code is Trailer already assigned
IF PGM.*Return_code = 'TRLRASN';

// Send error message - 'Trailer is assigned to Load &1.'
ERROR(USR2822);
MSGPARM(LCL.Load_Id_3);

//?* Send message if trailer is used, else validate   E001790
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Record Found USR = CND.Record Not Found
LCL.Record_Found_USR = 'N';

//?* If Export, see if trailer has been assigned as OHE Container E001790
CASE;

// IF DTL.Export Status is yes
IF DTL.Export_Status = 'Y';

// LCL.Carrier Code = DTL.Shipping Line 1 USR
LCL.Carrier_Code = DTL.Shipping_Line_1_USR;

// LCL.Trailer ID USR = DTL.Trailer ID USR
LCL.Trailer_ID_USR = DTL.Trailer_ID_USR;

//?** See if Trailer ID exist in OHE             E002105
// Call program VAL Dup Assignd Contnr XF.
CALL PROGRAM(VAL Dup Assignd Contnr XF) ('PBDTXFR');
PARAMETER(DTL.Load_ID_USR);
PARAMETER(LCL.Trailer_ID_USR);
PARAMETER(LCL.Carrier_Code);
PARAMETER(LCL.Load_Id_3);

CASE;

// IF PGM.*Return code is Trailer already assigned
IF PGM.*Return_code = 'TRLRASN';

// Send error message - 'Trailer is assigned to Load &1.'
ERROR(USR2822);
MSGPARM(LCL.Load_Id_3);

// LCL.Record Found USR = CND.Record Found
LCL.Record_Found_USR = 'Y';

ENDIF;

ENDIF;

//?* Validate trailer if not assigned and not an Export container  E001790
CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

EXECUTE FUNCTION(Rtv Trailer            RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC1498208;
PARAMETER(LCL.Carrier_Code);
PARAMETER(LCL.Trailer_ID_USR);
PARAMETER(LCL.Company_Number);
PARAMETER(WRK.USR_Load_Type);
PARAMETER(PAR.Trailer_Type);
PARAMETER(PAR.Seaboard_Owned_Status);
PARAMETER(PAR.On_Yard_Status);
PARAMETER(WRK.USR_On_Yard_Date_New);
PARAMETER(WRK.USR_On_Yard_Time_New);
PARAMETER(PAR.Assigned_Status);
PARAMETER(PAR.Available_Status);
PARAMETER(PAR.Not_Available_Reason_Code);
PARAMETER(PAR.Comment_Line);
PARAMETER(PAR.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Validate trailer fields if found
CASE;

// IF WRK.USR Load Type is Blank
IF WRK.USR_Load_Type = *BLANK;

//?C3819: Create trailer if it doesn't exist
//?Carrier required; otherwise info message
CASE;

// IF DTL.Carrier Code EQ WRK.BLANK
IF DTL.Carrier_Code = WRK.BLANK;

// Send error message - 'Carrier is required to enter a trailer.'
ERROR(USR2668);
MSGPARM(DTL.Carrier_Code);

//?Carrier required; otherwise info message
// IF *OTHERWISE
IF *OTHERWISE;

// Send information message - 'Trailer doesn't exist; it will be added.'
MESSAGE(USR2667 *INFO);

//?If wrk.OYD New is zeros, update with today's date   E004079
CASE;

// IF WRK.USR On Yard Date New is not entered
IF WRK.USR_On_Yard_Date_New = *ZERO;

//?* If trailer is new, update screen fields with new info   E004079
// DTL.On Yard Date = PAR.Current System Date
DTL.On_Yard_Date = PAR.Current_System_Date;

// DTL.On Yard Time = JOB.*Job time
DTL.On_Yard_Time = JOB.*Job_time;

// DTL.USR On Yard Time = DTL.On Yard Time / CON.100 *
DTL.USR_On_Yard_Time = DTL.On_Yard_Time / 100;

// PAR.On Yard Date = DTL.On Yard Date
PAR.On_Yard_Date = DTL.On_Yard_Date;

// PAR.On Yard Time = DTL.On Yard Time
PAR.On_Yard_Time = DTL.On_Yard_Time;

// PAR.Seaboard Owned Status = CND.no
PAR.Seaboard_Owned_Status = 'N';

// PAR.On Yard Status = CND.yes
PAR.On_Yard_Status = 'Y';

// PAR.Assigned Status = CND.yes
PAR.Assigned_Status = 'Y';

// PAR.Available Status = CND.no
PAR.Available_Status = 'N';

ENDIF;

ENDIF;

//?Validate trailer fields if found
// IF *OTHERWISE
IF *OTHERWISE;

//?** Warning if Trailer Co# <> Load Start Co#             E00117 3/12/08
CASE;

// IF LCL.Company Number NE DTL.Company Number
IF LCL.Company_Number <> DTL.Company_Number;

// Send information message - 'Trailer Co# & Load Start Co# do not match-Press enter'
MESSAGE(USR3902 *INFO);
MSGPARM(DTL.Trailer_ID_USR);

ENDIF;

//? Load the On Yard Date/Time
CASE;

// IF WRK.USR On Yard Date New is Entered
IF WRK.USR_On_Yard_Date_New <> *ZERO;

// DTL.On Yard Date = WRK.USR On Yard Date New
DTL.On_Yard_Date = WRK.USR_On_Yard_Date_New;

// DTL.On Yard Time = WRK.USR On Yard Time New
DTL.On_Yard_Time = WRK.USR_On_Yard_Time_New;

// DTL.USR On Yard Time = DTL.On Yard Time / CON.100 *
DTL.USR_On_Yard_Time = DTL.On_Yard_Time / 100;

//? Load the On Yard Date/Time
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Truck Ready Date is not entered
IF DTL.Truck_Ready_Date = *ZERO;

// AND DTL.On Yard Date is not entered
AND DTL.On_Yard_Date = *ZERO;

// DTL.On Yard Date = PAR.Current System Date
DTL.On_Yard_Date = PAR.Current_System_Date;

// DTL.On Yard Time = JOB.*Job time
DTL.On_Yard_Time = JOB.*Job_time;

// DTL.USR On Yard Time = DTL.On Yard Time / CON.100 *
DTL.USR_On_Yard_Time = DTL.On_Yard_Time / 100;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.On Yard Date is not entered
IF DTL.On_Yard_Date = *ZERO;

// DTL.On Yard Date = CON.*ZERO
DTL.On_Yard_Date = *ZERO;

// DTL.On Yard Time = CON.*ZERO
DTL.On_Yard_Time = *ZERO;

// DTL.USR On Yard Time = CON.*ZERO
DTL.USR_On_Yard_Time = *ZERO;

ENDIF;

ENDIF;

ENDIF;

//?Load Type
CASE;

// IF WRK.USR Load Type NE DTL.Load Type
IF WRK.USR_Load_Type <> DTL.Load_Type;

// Send error message - 'Trailer Load Type &2 disagrees with Load Type &1 on the Load.'
ERROR(USR2613);
MSGPARM(DTL.Load_Type);
MSGPARM(WRK.USR_Load_Type);
MSGPARM(DTL.Trailer_ID_USR);

ENDIF;

//?Assigned Sts
CASE;

// IF PAR.Assigned Status is yes
IF PAR.Assigned_Status = 'Y';

// LCL.USR Load Assigned = CND.Blank
LCL.USR_Load_Assigned = *ZERO;

EXECUTE FUNCTION(RTV Load ID for Trailr RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1498955;
PARAMETER(DTL.Load_ID_USR);
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Trailer_ID_USR);
PARAMETER(LCL.Carrier_Code);
PARAMETER(WRK.USR_Active_Load);
PARAMETER(WRK.USR_Load_Assigned);
{
 //?USER: Initialize routine

 // PAR.USR Active Load = CND.no
 PAR.USR_Active_Load = 'N';

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.USR Active Load = CND.no
 PAR.USR_Active_Load = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.Truck Departure Date is not entered
 IF DB1.Truck_Departure_Date = *ZERO;

 //?Active load
 //?If Load is not the Load currently being edited.
 CASE;

 // IF DB1.Load ID NE PAR.Load ID
 IF DB1.Load_ID <> PAR.Load_ID;

 // AND DB1.Load Status is Entered,Comb,Unlck,Locked
 AND DB1.Load_Status = 'C'/'E'/'L'/'U';

 // PAR.USR Active Load = CND.yes
 PAR.USR_Active_Load = 'Y';

 // PAR.USR Load Assigned = DB1.Load ID
 PAR.USR_Load_Assigned = DB1.Load_ID;

 // PAR.Company Number = DB1.Company Number
 PAR.Company_Number = DB1.Company_Number;

 QUIT;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?NOT Active load
 ENDIF;

}


CASE;

// IF WRK.USR Active Load is yes
IF WRK.USR_Active_Load = 'Y';

CASE;

// IF DTL.Truck Departure Date is not entered
IF DTL.Truck_Departure_Date = *ZERO;

// Send error message - 'Trailer is already assigned to load &2'
ERROR(USR2618);
MSGPARM(LCL.Trailer_ID_USR);
MSGPARM(WRK.USR_Load_Assigned);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warning: Departing Trailer is already assigned to load &2'
ERROR(USR2622);
MSGPARM(LCL.Trailer_ID_USR);
MSGPARM(WRK.USR_Load_Assigned);

ENDIF;

ENDIF;

ENDIF;

//?On Yard
CASE;

// IF WRK.USR On Yard Date New is not entered
IF WRK.USR_On_Yard_Date_New = *ZERO;

// Send information message - 'Warning: Trailer is not On Yard.'
MESSAGE(USR2619 *INFO);
MSGPARM(LCL.Trailer_ID_USR);

ENDIF;

//?Available Sts
CASE;

// IF PAR.Available Status is Not Yes
IF PAR.Available_Status = *BLANK/'N';

// Send information message - 'Warning: Trailer is not Available for assignment.'
MESSAGE(USR2616 *INFO);
MSGPARM(LCL.Trailer_ID_USR);

ENDIF;

//?Seaboard Owned
CASE;

// IF PAR.Seaboard Owned Status is yes
IF PAR.Seaboard_Owned_Status = 'Y';

// Send information message - 'Warning:  Trailer is Seaboard Owned.'
MESSAGE(USR2617 *INFO);
MSGPARM(LCL.Trailer_ID_USR);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Edit Adjusted Departure Date & Time
CASE;

// IF DTL.Adjusted Departure Date is Entered
IF DTL.Adjusted_Departure_Date <> *ZERO;

CASE;

// IF DTL.Truck Departure Date is not entered
IF DTL.Truck_Departure_Date = *ZERO;

// Send information message - 'Warn:Dt/Tm &1 &2 should not be entered before prev Dt/Tm.'
MESSAGE(USR2430 *INFO);
MSGPARM(DTL.Adjusted_Departure_Date);
MSGPARM(DTL.Departure_Time_DFT);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Adjusted Departure Date LT DTL.Truck Departure Date
IF DTL.Adjusted_Departure_Date < DTL.Truck_Departure_Date;

// Send information message - 'WARN:Dt/Tm &1 &2 should not be less than previous dt/tm.'
MESSAGE(USR2422 *INFO);
MSGPARM(DTL.Adjusted_Departure_Date);
MSGPARM(DTL.Departure_Time_DFT);

QUIT;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Adjusted Departure Date EQ DTL.Truck Departure Date
IF DTL.Adjusted_Departure_Date = DTL.Truck_Departure_Date;

// AND DTL.Adjusted Departure Time LE DTL.Truck Departure Time
AND DTL.Adjusted_Departure_Time <= DTL.Truck_Departure_Time;

// Send information message - 'WARN:Dt/Tm &1 &2 should not be less than previous dt/tm.'
MESSAGE(USR2422 *INFO);
MSGPARM(DTL.Adjusted_Departure_Date);
MSGPARM(DTL.Departure_Time_DFT);

QUIT;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Verify Trffc Cmnts RT) TYPE(RTVOBJ) FILE(PDKECPP)          AC1424786;
PARAMETER(DTL.Load_ID);
{
 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// Send information message - 'WARNING: Traffic Comments are required with Adjusted Departure entrie
MESSAGE(USR2450 *INFO);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Traffic comments are required with Adjusted Departure Date/Time entries.'
ERROR(USR2425);
MSGPARM(DTL.Adjusted_Departure_Date);

QUIT;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Edit Truck Departure Date & Time
CASE;

// IF DTL.Truck Departure Date is Entered
IF DTL.Truck_Departure_Date <> *ZERO;

CASE;

// IF DTL.BOL Received Date is not entered
IF DTL.BOL_Received_Date = *ZERO;

// Send information message - 'Warn:Dt/Tm &1 &2 should not be entered before prev Dt/Tm.'
MESSAGE(USR2430 *INFO);
MSGPARM(DTL.Truck_Departure_Date);
MSGPARM(DTL.USR_Delivery_After_Time);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Truck Departure Date LT DTL.BOL Received Date
IF DTL.Truck_Departure_Date < DTL.BOL_Received_Date;

// Send information message - 'WARN:Dt/Tm &1 &2 should not be less than previous dt/tm.'
MESSAGE(USR2422 *INFO);
MSGPARM(DTL.Truck_Departure_Date);
MSGPARM(DTL.USR_Delivery_After_Time);

QUIT;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Truck Departure Time is Not Entered
IF DTL.Truck_Departure_Time = *ZERO;

// Send error message - 'Time is required.'
ERROR(USR2333);
MSGPARM(DTL.USR_Delivery_After_Time);

// IF *OTHERWISE
IF *OTHERWISE;

//?Validate later than received dt/tm
CASE;

// IF DTL.Truck Departure Date EQ DTL.BOL Received Date
IF DTL.Truck_Departure_Date = DTL.BOL_Received_Date;

// AND DTL.Truck Departure Time LE DTL.BOL Received Time
AND DTL.Truck_Departure_Time <= DTL.BOL_Received_Time;

// Send information message - 'WARN:Dt/Tm &1 &2 should not be less than previous dt/tm.'
MESSAGE(USR2422 *INFO);
MSGPARM(DTL.Truck_Departure_Date);
MSGPARM(DTL.USR_Delivery_After_Time);

QUIT;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Edit BOL Received Date & Time
CASE;

// IF DTL.BOL Received Date is Entered
IF DTL.BOL_Received_Date <> *ZERO;

CASE;

// IF DTL.BOL Complete Date is not entered
IF DTL.BOL_Complete_Date = *ZERO;

// Send information message - 'Warn:Dt/Tm &1 &2 should not be entered before prev Dt/Tm.'
MESSAGE(USR2430 *INFO);
MSGPARM(DTL.BOL_Received_Date);
MSGPARM(DTL.USR_Billed_Time);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.BOL Received Date LT DTL.BOL Complete Date
IF DTL.BOL_Received_Date < DTL.BOL_Complete_Date;

// Send information message - 'WARN:Dt/Tm &1 &2 should not be less than previous dt/tm.'
MESSAGE(USR2422 *INFO);
MSGPARM(DTL.BOL_Received_Date);
MSGPARM(DTL.USR_Billed_Time);

QUIT;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.BOL Received Date EQ DTL.BOL Complete Date
IF DTL.BOL_Received_Date = DTL.BOL_Complete_Date;

// AND DTL.BOL Received Time LE DTL.BOL Complete Time
AND DTL.BOL_Received_Time <= DTL.BOL_Complete_Time;

// Send information message - 'WARN:Dt/Tm &1 &2 should not be less than previous dt/tm.'
MESSAGE(USR2422 *INFO);
MSGPARM(DTL.BOL_Received_Date);
MSGPARM(DTL.USR_Billed_Time);

QUIT;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Edit BOL Complete Date & Time
CASE;

// IF DTL.BOL Complete Date is Entered
IF DTL.BOL_Complete_Date <> *ZERO;

CASE;

// IF DTL.Load Finished Date is not entered
IF DTL.Load_Finished_Date = *ZERO;

// Send information message - 'Warn:Dt/Tm &1 &2 should not be entered before prev Dt/Tm.'
MESSAGE(USR2430 *INFO);
MSGPARM(DTL.BOL_Complete_Date);
MSGPARM(DTL.USR_Complete_Time);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.BOL Complete Date LT DTL.Load Finished Date
IF DTL.BOL_Complete_Date < DTL.Load_Finished_Date;

// Send information message - 'WARN:Dt/Tm &1 &2 should not be less than previous dt/tm.'
MESSAGE(USR2422 *INFO);
MSGPARM(DTL.BOL_Complete_Date);
MSGPARM(DTL.USR_Complete_Time);

QUIT;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.BOL Complete Date EQ DTL.Load Finished Date
IF DTL.BOL_Complete_Date = DTL.Load_Finished_Date;

// AND DTL.BOL Complete Time LE DTL.Load Finished Time
AND DTL.BOL_Complete_Time <= DTL.Load_Finished_Time;

// Send information message - 'WARN:Dt/Tm &1 &2 should not be less than previous dt/tm.'
MESSAGE(USR2422 *INFO);
MSGPARM(DTL.BOL_Complete_Date);
MSGPARM(DTL.USR_Complete_Time);

QUIT;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Edit Load Finished Date & Time
CASE;

// IF DTL.Load Finished Date is Entered
IF DTL.Load_Finished_Date <> *ZERO;

CASE;

// IF DTL.Spotted Date is not entered
IF DTL.Spotted_Date = *ZERO;

// Send information message - 'Warn:Dt/Tm &1 &2 should not be entered before prev Dt/Tm.'
MESSAGE(USR2430 *INFO);
MSGPARM(DTL.Load_Finished_Date);
MSGPARM(DTL.USR_Finished_Time);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Load Finished Date LT DTL.Spotted Date
IF DTL.Load_Finished_Date < DTL.Spotted_Date;

// Send information message - 'WARN:Dt/Tm &1 &2 should not be less than previous dt/tm.'
MESSAGE(USR2422 *INFO);
MSGPARM(DTL.Load_Finished_Date);
MSGPARM(DTL.USR_Finished_Time);

QUIT;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Load Finished Date EQ DTL.Spotted Date
IF DTL.Load_Finished_Date = DTL.Spotted_Date;

// AND DTL.Load Finished Time LE DTL.Spotted Time
AND DTL.Load_Finished_Time <= DTL.Spotted_Time;

// Send information message - 'WARN:Dt/Tm &1 &2 should not be less than previous dt/tm.'
MESSAGE(USR2422 *INFO);
MSGPARM(DTL.Load_Finished_Date);
MSGPARM(DTL.USR_Finished_Time);

QUIT;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Edit Spotted Date & Time
CASE;

// IF DTL.Spotted Date is Entered
IF DTL.Spotted_Date <> *ZERO;

CASE;

// IF DTL.Truck Ready Date is not entered
IF DTL.Truck_Ready_Date = *ZERO;

// Send information message - 'Warn:Dt/Tm &1 &2 should not be entered before prev Dt/Tm.'
MESSAGE(USR2430 *INFO);
MSGPARM(DTL.Spotted_Date);
MSGPARM(DTL.USR_Picked_Up_Time);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Spotted Date LT DTL.Truck Ready Date
IF DTL.Spotted_Date < DTL.Truck_Ready_Date;

// Send information message - 'WARN:Dt/Tm &1 &2 should not be less than previous dt/tm.'
MESSAGE(USR2422 *INFO);
MSGPARM(DTL.Spotted_Date);
MSGPARM(DTL.USR_Picked_Up_Time);

QUIT;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Spotted Date EQ DTL.Truck Ready Date
IF DTL.Spotted_Date = DTL.Truck_Ready_Date;

// AND DTL.Spotted Time LE DTL.Truck Ready Time
AND DTL.Spotted_Time <= DTL.Truck_Ready_Time;

// Send information message - 'WARN:Dt/Tm &1 &2 should not be less than previous dt/tm.'
MESSAGE(USR2422 *INFO);
MSGPARM(DTL.Spotted_Date);
MSGPARM(DTL.USR_Picked_Up_Time);

QUIT;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Edit Truck Ready Date & Time
CASE;

// IF DTL.Truck Ready Date is Entered
IF DTL.Truck_Ready_Date <> *ZERO;

CASE;

// IF DTL.On Yard Date is not entered
IF DTL.On_Yard_Date = *ZERO;

// Send information message - 'Warn:Dt/Tm &1 &2 should not be entered before prev Dt/Tm.'
MESSAGE(USR2430 *INFO);
MSGPARM(DTL.Truck_Ready_Date);
MSGPARM(DTL.USR_Ready_Time);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Truck Ready Date LT DTL.On Yard Date
IF DTL.Truck_Ready_Date < DTL.On_Yard_Date;

// Send information message - 'WARN:Dt/Tm &1 &2 should not be less than previous dt/tm.'
MESSAGE(USR2422 *INFO);
MSGPARM(DTL.Truck_Ready_Date);
MSGPARM(DTL.USR_Ready_Time);

QUIT;

ENDIF;

ENDIF;

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(CHG Ld Head/Trlr/Cstsv IF) TYPE(EXCINTFUN) FILE(OMFJCPP)       AC1516460;
PARAMETER(DTL.Load_ID_USR);
PARAMETER(DTL.Company_Number_Select);
PARAMETER(DTL.Trailer_ID_USR);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Load_Type);
PARAMETER(DTL.Truck_Ready_Date);
PARAMETER(DTL.Truck_Ready_Time);
PARAMETER(DTL.Spotted_Date);
PARAMETER(DTL.Spotted_Time);
PARAMETER(DTL.Load_Finished_Date);
PARAMETER(DTL.Load_Finished_Time);
PARAMETER(DTL.BOL_Received_Date);
PARAMETER(DTL.BOL_Received_Time);
PARAMETER(DTL.Truck_Departure_Date);
PARAMETER(DTL.Truck_Departure_Time);
PARAMETER(DTL.Adjusted_Departure_Date);
PARAMETER(DTL.Adjusted_Departure_Time);
PARAMETER(DTL.Shipping_Line_1_USR);
PARAMETER(DTL.Container_Number);
PARAMETER(DTL.On_Yard_Date);
PARAMETER(DTL.On_Yard_Time);
PARAMETER(DTL.Deadline_Departure_Date);
PARAMETER(DTL.Deadline_Departure_Time);
PARAMETER(DTL.Load_Shag_Flag);
PARAMETER(DTL.Load_Wash_Flag);
PARAMETER(DTL.Load_Door_1_USR);
PARAMETER(DTL.Load_Door_2_USR);
PARAMETER(DTL.Partial_Load);
PARAMETER(DTL.MG_Created_Load);
PARAMETER(WRK.Carrier_Code_Usr);
PARAMETER(WRK.Trailer_ID_USR);
PARAMETER(WRK.Type_Code);
PARAMETER(PAR.On_Yard_Status);
PARAMETER(PAR.On_Yard_Date);
PARAMETER(PAR.On_Yard_Time);
PARAMETER(PAR.Assigned_Status);
PARAMETER(PAR.Available_Status);
PARAMETER(WRK.Trailer_Id_USR);
{
 //?Execute internal function

 //?RMC 6/21/06 dont update the bol complete dt/time
 //?RMC If Trailer, bol rcvd, depart, adj depart changes: Write TMS ord trigg
 //?Pre set On Yard, Assigned for Trailer
 CASE;

 // IF PAR.On Yard Date EQ WRK.ZERO
 IF PAR.On_Yard_Date = WRK.ZERO;

 // PAR.On Yard Status = CND.no
 PAR.On_Yard_Status = 'N';

 // PAR.Available Status = CND.no
 PAR.Available_Status = 'N';

 //?Pre set On Yard, Assigned for Trailer
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.On Yard Status = CND.yes
 PAR.On_Yard_Status = 'Y';

 // PAR.Available Status = CND.yes
 PAR.Available_Status = 'Y';

 ENDIF;

 CASE;

 // IF PAR.MG Created Load is Not MG Created Load
 IF PAR.MG_Created_Load = *BLANK;

 // Call program CLC Deadline Date/Time XF.
 CALL PROGRAM(CLC Deadline Date/Time XF) ('PMP9XFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Deadline_Depart_DT_HDR);
 PARAMETER(PAR.Deadline_Depart_Time_HDR);
 PARAMETER(LCL.Requested_Delivery_Date);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Deadline Depart DT    HDR = PAR.Deadline Departure Date
 PAR.Deadline_Depart_DT_HDR = PAR.Deadline_Departure_Date;

 // PAR.Deadline Depart Time  HDR = PAR.Deadline Departure Time
 PAR.Deadline_Depart_Time_HDR = PAR.Deadline_Departure_Time;

 ENDIF;

 EXECUTE FUNCTION(CHG Load Cust Service  CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1516465;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Trailer_Id);
 PARAMETER(PAR.Truck_Ready_Date);
 PARAMETER(PAR.Truck_Ready_Time);
 PARAMETER(PAR.Spotted_Date);
 PARAMETER(PAR.Spotted_Time);
 PARAMETER(PAR.Load_Finished_Date);
 PARAMETER(PAR.Load_Finished_Time);
 PARAMETER(PAR.BOL_Received_Date);
 PARAMETER(PAR.BOL_Received_Time);
 PARAMETER(PAR.Truck_Departure_Date);
 PARAMETER(PAR.Truck_Departure_Time);
 PARAMETER(PAR.Adjusted_Departure_Date);
 PARAMETER(PAR.Adjusted_Departure_Time);
 PARAMETER(PAR.On_Yard_Date);
 PARAMETER(PAR.On_Yard_Time);
 PARAMETER(PAR.Deadline_Depart_DT_HDR);
 PARAMETER(PAR.Deadline_Depart_Time_HDR);
 PARAMETER(PAR.Load_Shag_Flag);
 PARAMETER(PAR.Load_Wash_Flag);
 PARAMETER(PAR.Load_Door_1);
 PARAMETER(PAR.Load_Door_2);
 PARAMETER(PAR.Partial_Load);
 {
  //?USER: Processing after Data read

  CASE;

  // IF DB1.MG Created Load is Yes
  IF DB1.MG_Created_Load = 'Y';

  //?If Trailer, adj dep,dep, bol rcv  changes: Write TMS ord trigger
  CASE;

  // IF PAR.Trailer Id NE DB1.Trailer Id
  IF PAR.Trailer_Id <> DB1.Trailer_Id;

  // OR PAR.Truck Departure Date NE DB1.Truck Departure Date
  OR PAR.Truck_Departure_Date <> DB1.Truck_Departure_Date;

  // OR PAR.Truck Departure Time NE DB1.Truck Departure Time
  OR PAR.Truck_Departure_Time <> DB1.Truck_Departure_Time;

  // OR PAR.Adjusted Departure Date NE DB1.Adjusted Departure Date
  OR PAR.Adjusted_Departure_Date <> DB1.Adjusted_Departure_Date;

  // OR PAR.Adjusted Departure Time NE DB1.Adjusted Departure Time
  OR PAR.Adjusted_Departure_Time <> DB1.Adjusted_Departure_Time;

  // OR PAR.BOL Received Date NE DB1.BOL Received Date
  OR PAR.BOL_Received_Date <> DB1.BOL_Received_Date;

  // OR PAR.BOL Received Time NE DB1.BOL Received Time
  OR PAR.BOL_Received_Time <> DB1.BOL_Received_Time;

  // OR PAR.Trailer Id NE DB1.Trailer Id
  OR PAR.Trailer_Id <> DB1.Trailer_Id;

  // LCL.Load Change Type = WRK.Blank for 12          USR
  LCL.Load_Change_Type = WRK.Blank_for_12_USR;

  // LCL.Load Change Type 2 = WRK.Blank for 12          USR
  LCL.Load_Change_Type_2 = WRK.Blank_for_12_USR;

  // LCL.Load Change Type 3 = WRK.Blank for 12          USR
  LCL.Load_Change_Type_3 = WRK.Blank_for_12_USR;

  // LCL.Load Change Type 4 = WRK.Blank for 12          USR
  LCL.Load_Change_Type_4 = WRK.Blank_for_12_USR;

  // LCL.Load Change Type 5 = WRK.Blank for 12          USR
  LCL.Load_Change_Type_5 = WRK.Blank_for_12_USR;

  //?trailer
  CASE;

  // IF PAR.Trailer Id NE DB1.Trailer Id
  IF PAR.Trailer_Id <> DB1.Trailer_Id;

  // LCL.Load Change Type = CND.Assign Trailer
  LCL.Load_Change_Type = 'ASNTRL';

  ENDIF;

  //?truck depart
  CASE;

  // IF PAR.Truck Departure Date NE DB1.Truck Departure Date
  IF PAR.Truck_Departure_Date <> DB1.Truck_Departure_Date;

  // OR PAR.Truck Departure Time NE DB1.Truck Departure Time
  OR PAR.Truck_Departure_Time <> DB1.Truck_Departure_Time;

  CASE;

  // IF LCL.Load Change Type EQ WRK.Blank for 12          USR
  IF LCL.Load_Change_Type = WRK.Blank_for_12_USR;

  // LCL.Load Change Type = CND.Truck Departure date time
  LCL.Load_Change_Type = 'TRKDPT';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Load Change Type 2 = CND.Truck Departure date time
  LCL.Load_Change_Type_2 = 'TRKDPT';

  ENDIF;

  ENDIF;

  //?adj depart
  CASE;

  // IF PAR.Adjusted Departure Date NE DB1.Adjusted Departure Date
  IF PAR.Adjusted_Departure_Date <> DB1.Adjusted_Departure_Date;

  // OR PAR.Adjusted Departure Time NE DB1.Adjusted Departure Time
  OR PAR.Adjusted_Departure_Time <> DB1.Adjusted_Departure_Time;

  CASE;

  // IF LCL.Load Change Type EQ WRK.Blank for 12          USR
  IF LCL.Load_Change_Type = WRK.Blank_for_12_USR;

  // LCL.Load Change Type = CND.Adjst Departure date time
  LCL.Load_Change_Type = 'ADJDPT';

  // IF LCL.Load Change Type 2 EQ WRK.Blank for 12          USR
  IF LCL.Load_Change_Type_2 = WRK.Blank_for_12_USR;

  // LCL.Load Change Type 2 = CND.Adjst Departure date time
  LCL.Load_Change_Type_2 = 'ADJDPT';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Load Change Type 3 = CND.Adjst Departure date time
  LCL.Load_Change_Type_3 = 'ADJDPT';

  ENDIF;

  ENDIF;

  //?bol recvd
  CASE;

  // IF PAR.BOL Received Date NE DB1.BOL Received Date
  IF PAR.BOL_Received_Date <> DB1.BOL_Received_Date;

  // OR PAR.BOL Received Time NE DB1.BOL Received Time
  OR PAR.BOL_Received_Time <> DB1.BOL_Received_Time;

  CASE;

  // IF LCL.Load Change Type EQ WRK.Blank for 12          USR
  IF LCL.Load_Change_Type = WRK.Blank_for_12_USR;

  // LCL.Load Change Type = CND.BOL Received date time
  LCL.Load_Change_Type = 'BOLRCV';

  // IF LCL.Load Change Type 2 EQ WRK.Blank for 12          USR
  IF LCL.Load_Change_Type_2 = WRK.Blank_for_12_USR;

  // LCL.Load Change Type 2 = CND.BOL Received date time
  LCL.Load_Change_Type_2 = 'BOLRCV';

  // IF LCL.Load Change Type 3 EQ WRK.Blank for 12          USR
  IF LCL.Load_Change_Type_3 = WRK.Blank_for_12_USR;

  // LCL.Load Change Type 3 = CND.BOL Received date time
  LCL.Load_Change_Type_3 = 'BOLRCV';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Load Change Type 4 = CND.BOL Received date time
  LCL.Load_Change_Type_4 = 'BOLRCV';

  ENDIF;

  ENDIF;

  // Call program Exc Crt TMS Load Trg  XF.
  CALL PROGRAM(Exc Crt TMS Load Trg  XF) ('PBXOXFR');
  PARAMETER(JOB.*Job_date);
  PARAMETER(JOB.*Job_time);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Company_Number);
  PARAMETER(LCL.TMS_LH_Field_Chg_Text);
  PARAMETER('A');
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Load_Change_Type);
  PARAMETER(LCL.Load_Change_Type_2);
  PARAMETER(LCL.Load_Change_Type_3);
  PARAMETER(LCL.Load_Change_Type_4);
  PARAMETER(LCL.Load_Change_Type_5);

  ENDIF;

  ENDIF;

  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?* Trailer can now be added if not on yard, update dt/tm here  E002966
 //?Use ShipLine/Cntnr if entered, else Carr/Trlr & upd   E004079
 CASE;

 // IF PAR.Shipping Line is entered
 IF PAR.Shipping_Line <> *BLANK;

 // LCL.Carrier Code = PAR.Shipping Line
 LCL.Carrier_Code = PAR.Shipping_Line;

 // LCL.Trailer Id = PAR.Trailer Id
 LCL.Trailer_Id = PAR.Trailer_Id;

 // Call program RTV UPD Cntnr-ords/ld  XF.
 CALL PROGRAM(RTV UPD Cntnr-ords/ld  XF) ('PBRXXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Shipping_Line);
 PARAMETER(LCL.Trailer_Id);

 //?Use ShipLine/Cntnr if entered, else Carr/Trlr & upd   E004079
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Carrier Code = PAR.Carrier Code
 LCL.Carrier_Code = PAR.Carrier_Code;

 // LCL.Trailer Id = PAR.Trailer Id
 LCL.Trailer_Id = PAR.Trailer_Id;

 ENDIF;

 //?Create or change trailer
 CASE;

 // IF LCL.Trailer Id NE WRK.Blank for 30          USR
 IF LCL.Trailer_Id <> WRK.Blank_for_30_USR;

 EXECUTE FUNCTION(Rtv Trailer            RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC1498208;
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(LCL.Trailer_Id);
 PARAMETER(LCL.Company_Number);
 PARAMETER(LCL.Load_Type);
 PARAMETER(LCL.Trailer_Type);
 PARAMETER(LCL.Seaboard_Owned_Status);
 PARAMETER(LCL.On_Yard_Status);
 PARAMETER(LCL.On_Yard_Date);
 PARAMETER(LCL.On_Yard_Time);
 PARAMETER(LCL.Assigned_Status);
 PARAMETER(LCL.Available_Status);
 PARAMETER(LCL.Not_Available_Reason_Code);
 PARAMETER(LCL.Comment_Line);
 PARAMETER(PAR.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?If trailer does not exist, add it, else update it     E002966
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 //?Create trailer
 CASE;

 // IF PAR.Load Type is Regular
 IF PAR.Load_Type = 'R';

 //?Regular:  Reefer
 EXECUTE FUNCTION(Crt PD Trailer         CR) TYPE(CRTOBJ) FILE(PDLYREP)          AC1496468;
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(LCL.Trailer_Id);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Load_Type);
 PARAMETER('R');
 PARAMETER('N');
 PARAMETER('Y');
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 PARAMETER('Y');
 PARAMETER('N');
 PARAMETER(WRK.BLANK);
 PARAMETER(*BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER('A');
 PARAMETER(JOB.*Job_time);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(JOB.*Job_date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?Create trailer
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Bulk:  Tanker
 EXECUTE FUNCTION(Crt PD Trailer         CR) TYPE(CRTOBJ) FILE(PDLYREP)          AC1496468;
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(LCL.Trailer_Id);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Load_Type);
 PARAMETER('T');
 PARAMETER('N');
 PARAMETER('Y');
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 PARAMETER('Y');
 PARAMETER('N');
 PARAMETER(WRK.BLANK);
 PARAMETER(*BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER('A');
 PARAMETER(JOB.*Job_time);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(JOB.*Job_date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 //?If trailer does not exist, add it, else update it     E002966
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?trailer on file
 //?Update current/new trailer from dispatcher screen
 CASE;

 // IF PAR.Record Status is Active
 IF PAR.Record_Status = 'A';

 EXECUTE FUNCTION(CHG Asgn, Avail, On Yd CH) TYPE(CHGOBJ) FILE(PDLYREP)          AC2084912;
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(LCL.Trailer_Id);
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.On_Yard_Status);
 PARAMETER(LCL.On_Yard_Date);
 PARAMETER(LCL.On_Yard_Time);
 PARAMETER('Y');
 PARAMETER('N');
 PARAMETER('A');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?Update current/new trailer from dispatcher screen
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?If trailer on file but inactive, update
 //?Regular versus Bulk
 CASE;

 // IF PAR.Load Type is Regular
 IF PAR.Load_Type = 'R';

 //?Regular:  Reefer
 EXECUTE FUNCTION(Chg PD Trailer         CH) TYPE(CHGOBJ) FILE(PDLYREP)          AC1496469;
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(LCL.Trailer_Id);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Load_Type);
 PARAMETER('R');
 PARAMETER('N');
 PARAMETER(LCL.On_Yard_Status);
 PARAMETER(LCL.On_Yard_Date);
 PARAMETER(LCL.On_Yard_Time);
 PARAMETER('Y');
 PARAMETER('N');
 PARAMETER(WRK.BLANK);
 PARAMETER(*BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER('A');
 PARAMETER(JOB.*Job_time);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(JOB.*Job_date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?Regular versus Bulk
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Bulk:  Tanker
 EXECUTE FUNCTION(Chg PD Trailer         CH) TYPE(CHGOBJ) FILE(PDLYREP)          AC1496469;
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(LCL.Trailer_Id);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Load_Type);
 PARAMETER('T');
 PARAMETER('N');
 PARAMETER(LCL.On_Yard_Status);
 PARAMETER(LCL.On_Yard_Date);
 PARAMETER(LCL.On_Yard_Time);
 PARAMETER('Y');
 PARAMETER('N');
 PARAMETER(WRK.BLANK);
 PARAMETER(*BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER('A');
 PARAMETER(JOB.*Job_time);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(JOB.*Job_date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?If Trailer chgd, wrt Ld Ord Chg Log & Upd orig trailer      E004079
 CASE;

 // IF PAR.Trailer Id NE PAR.Trailer Id            USR
 IF PAR.Trailer_Id <> PAR.Trailer_Id_USR;

 //?Update the original trailer (chgd from) to available     E004079
 CASE;

 // IF PAR.Trailer Id            USR is Entered
 IF PAR.Trailer_Id_USR <> *BLANK;

 // AND PAR.Trailer Id            USR NE PAR.Trailer Id
 AND PAR.Trailer_Id_USR <> PAR.Trailer_Id;

 //?Rtv info for the original trailer                     E004079
 EXECUTE FUNCTION(Rtv Trailer            RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC1498208;
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(PAR.Trailer_Id_USR);
 PARAMETER(LCL.Company_Number);
 PARAMETER(LCL.Load_Type);
 PARAMETER(LCL.Trailer_Type);
 PARAMETER(LCL.Seaboard_Owned_Status);
 PARAMETER(LCL.On_Yard_Status);
 PARAMETER(LCL.On_Yard_Date);
 PARAMETER(LCL.On_Yard_Time);
 PARAMETER(LCL.Assigned_Status);
 PARAMETER(LCL.Available_Status);
 PARAMETER(LCL.Not_Available_Reason_Code);
 PARAMETER(LCL.Comment_Line);
 PARAMETER(LCL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?not an error if trailer not found                     E004079
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?Create trailer
 CASE;

 // IF PAR.Load Type is Regular
 IF PAR.Load_Type = 'R';

 //?Regular:  Reefer
 EXECUTE FUNCTION(Crt PD Trailer         CR) TYPE(CRTOBJ) FILE(PDLYREP)          AC1496468;
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(PAR.Trailer_Id_USR);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Load_Type);
 PARAMETER('R');
 PARAMETER('N');
 PARAMETER('Y');
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 PARAMETER('N');
 PARAMETER('Y');
 PARAMETER(WRK.BLANK);
 PARAMETER(*BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER('A');
 PARAMETER(JOB.*Job_time);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(JOB.*Job_date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?Create trailer
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Bulk:  Tanker
 EXECUTE FUNCTION(Crt PD Trailer         CR) TYPE(CRTOBJ) FILE(PDLYREP)          AC1496468;
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(PAR.Trailer_Id_USR);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Load_Type);
 PARAMETER('T');
 PARAMETER('N');
 PARAMETER('Y');
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 PARAMETER('N');
 PARAMETER('Y');
 PARAMETER(WRK.BLANK);
 PARAMETER(*BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER('A');
 PARAMETER(JOB.*Job_time);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(JOB.*Job_date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 //?not an error if trailer not found                     E004079
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV/Upd Chgd Trlr/CntnrRT) TYPE(RTVOBJ) FILE(PDLYREP)          AC2104613;
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(PAR.Trailer_Id_USR);
 PARAMETER(LCL.Company_Number);
 PARAMETER(LCL.Load_Type);
 PARAMETER(LCL.Trailer_Type);
 PARAMETER(LCL.Seaboard_Owned_Status);
 PARAMETER(LCL.On_Yard_Status);
 PARAMETER(LCL.On_Yard_Date);
 PARAMETER(LCL.On_Yard_Time);
 PARAMETER('N');
 PARAMETER('Y');
 PARAMETER(LCL.Not_Available_Reason_Code);
 PARAMETER(LCL.Comment_Line);
 PARAMETER(LCL.Record_Status);
 PARAMETER(LCL.Job_Time);
 PARAMETER(LCL.User_Id);
 PARAMETER(LCL.Job_Name);
 PARAMETER(LCL.Job_Date);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg PD Trailer         CH) TYPE(CHGOBJ) FILE(PDLYREP)          AC1496469;
  PARAMETER(PAR.Carrier_Code);
  PARAMETER(PAR.Trailer_Id);
  PARAMETER(PAR.Company_Number);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Trailer_Type);
  PARAMETER(DB1.Seaboard_Owned_Status);
  PARAMETER(PAR.On_Yard_Status);
  PARAMETER(PAR.On_Yard_Date);
  PARAMETER(PAR.On_Yard_Time);
  PARAMETER(PAR.Assigned_Status);
  PARAMETER(PAR.Available_Status);
  PARAMETER(DB1.Not_Available_Reason_Code);
  PARAMETER(DB1.Comment_Line);
  PARAMETER(DB1.Status_Unused_1);
  PARAMETER(DB1.Status_Unused_2);
  PARAMETER(DB1.Status_Unused_3);
  PARAMETER(DB1.Status_Unused_4);
  PARAMETER(DB1.Status_Unused_5);
  PARAMETER(DB1.Date_Unused_1);
  PARAMETER(DB1.Date_Unused_2);
  PARAMETER(DB1.Date_Unused_3);
  PARAMETER(DB1.Date_Unused_4);
  PARAMETER(DB1.Date_Unused_5);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 ENDIF;

 ENDIF;

 // WRK.Load Change Type = CND.Assign Trailer
 WRK.Load_Change_Type = 'ASNTRL';

 // WRK.Department Control Code = CND.Traffic Dept
 WRK.Department_Control_Code = 'TRF';

 // Call program CRT Load/Order Chg Log XF.
 CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Load_Change_Type);
 PARAMETER(WRK.Department_Control_Code);
 PARAMETER(PAR.Trailer_Id_USR);
 PARAMETER(PAR.Trailer_Id);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(*ZERO);

 ENDIF;

 //?***** Change Log and Comments
 DO;

 //?** 05/07/2015 LJB E004079
 //?** If Trailer was changed, update original trailer as available.
 //?** 02/28/2009 LJB E002966
 //?** Trailer can now be added to load header when not yet on yard.
 //?**  Update on yard date/time here, if that is the case
 //?** 09/30/2009 LJB E00495
 //?** Retrieve carrier appointment date/time. If it is entered,
 //?** Use for Deadline Departure Date/Time calcs
 //?** 11/16/2007 LJB FP1251
 //?** Deadline Depart date and time set to zeros if there is
 //?** no miles between cities record.
 ENDDO;

}


//?USER: Process command keys

// PAR.Load ID = DTL.Load ID USR
PAR.Load_ID = DTL.Load_ID_USR;

// PAR.Company Number = DTL.Company Number
PAR.Company_Number = DTL.Company_Number;

//?*** OMS301 --  Update Trailer File
//?** If Load is reassigned to a different Trailer, update the
//?** original Trailer from the Trailer file.
//?** and then add a record to Load Order Change Log     E001790 12/22/11
//?log the trailer assignment or change
CASE;

// IF DTL.Trailer ID USR NE WRK.Trailer Id            USR
IF DTL.Trailer_ID_USR <> WRK.Trailer_Id_USR;

// AND WRK.Trailer Id            USR NE WRK.Blank for 12          USR
AND WRK.Trailer_Id_USR <> WRK.Blank_for_12_USR;

//?Update of the trailer file is in the chgobj, rmvd from here  E004079
//?Write log record if trailer has been changed          e004079
// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(DTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER('ASNTRL');
PARAMETER('TRF');
PARAMETER(WRK.Trailer_Id_USR);
PARAMETER(DTL.Trailer_ID_USR);
PARAMETER(DTL.User_Id);
PARAMETER(DTL.Job_Name);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Company_Number);
PARAMETER(*ZERO);

//?S00549 RMC 11/07/8 download to carlisle if load is locked,and pfs int=Y
CASE;

// IF DTL.Load Status is Lock
IF DTL.Load_Status = 'L';

// AND LCL.PFS Carlisle Active is Yes
AND LCL.PFS_Carlisle_Active = 'Y';

// Call program PFS Lock Load/Order   XF.
CALL PROGRAM(PFS Lock Load/Order   XF) ('PPNLXFR');
PARAMETER(DTL.Load_ID);

ENDIF;

ENDIF;

//?Update the Trailer if assigned or on yard or departure dates change.
CASE;

// IF DTL.Trailer ID USR NE WRK.Blank for 12          USR
IF DTL.Trailer_ID_USR <> WRK.Blank_for_12_USR;

//?On Yard Date & Truck Departure Date tests
CASE;

// IF DTL.On Yard Date is Entered
IF DTL.On_Yard_Date <> *ZERO;

CASE;

// IF DTL.Truck Departure Date is not entered
IF DTL.Truck_Departure_Date = *ZERO;

//?Flag trailer as assigned/unavailable
// PAR.On Yard Status = CND.yes
PAR.On_Yard_Status = 'Y';

// PAR.Available Status = CND.no
PAR.Available_Status = 'N';

// PAR.Assigned Status = CND.yes
PAR.Assigned_Status = 'Y';

// WRK.On Yard Date-Trailer  USR = DTL.On Yard Date
WRK.On_Yard_Date_Trailer_USR = DTL.On_Yard_Date;

// WRK.On Yard Time-Trailer  USR = DTL.On Yard Time
WRK.On_Yard_Time_Trailer_USR = DTL.On_Yard_Time;

EXECUTE FUNCTION(Rtv/Chg Assg Trailer   RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC1498586;
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Trailer_ID_USR);
PARAMETER(DTL.Company_Number);
PARAMETER(PAR.On_Yard_Status);
PARAMETER(WRK.On_Yard_Date_Trailer_USR);
PARAMETER(WRK.On_Yard_Time_Trailer_USR);
PARAMETER(PAR.Assigned_Status);
PARAMETER(PAR.Available_Status);
PARAMETER(PAR.Comment_Line);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg PD Trailer         CH) TYPE(CHGOBJ) FILE(PDLYREP)          AC1496469;
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Trailer_Id);
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Trailer_Type);
 PARAMETER(DB1.Seaboard_Owned_Status);
 PARAMETER(PAR.On_Yard_Status);
 PARAMETER(PAR.On_Yard_Date);
 PARAMETER(PAR.On_Yard_Time);
 PARAMETER(PAR.Assigned_Status);
 PARAMETER(PAR.Available_Status);
 PARAMETER(DB1.Not_Available_Reason_Code);
 PARAMETER(DB1.Comment_Line);
 PARAMETER(DB1.Status_Unused_1);
 PARAMETER(DB1.Status_Unused_2);
 PARAMETER(DB1.Status_Unused_3);
 PARAMETER(DB1.Status_Unused_4);
 PARAMETER(DB1.Status_Unused_5);
 PARAMETER(DB1.Date_Unused_1);
 PARAMETER(DB1.Date_Unused_2);
 PARAMETER(DB1.Date_Unused_3);
 PARAMETER(DB1.Date_Unused_4);
 PARAMETER(DB1.Date_Unused_5);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


ENDIF;

//?On Yard Date & Truck Departure Date tests
// WRK.Blank Date            USR = CON.*ZERO
WRK.Blank_Date_USR = *ZERO;

//?If Truck has Departed, delete trailer record          E004079
// IF DTL.Truck Departure Date is Entered
IF DTL.Truck_Departure_Date <> *ZERO;

EXECUTE FUNCTION(DLT Trailer            DO) TYPE(DLTOBJ) FILE(PDLYREP)          AC1496470;
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Trailer_ID_USR);

//?If Truck has Departed, delete trailer record          E004079
// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

ENDIF;

//?***
//?USER: Exit program processing

CASE;

// IF KEY.*CMD key is *Exit
IF KEY.*CMD_key = '03';

// PAR.USR Exit Program = CND.yes
PAR.USR_Exit_Program = 'Y';

ENDIF;

