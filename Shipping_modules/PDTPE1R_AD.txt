// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDTPE1R
// ?Date: 14.08.2025 Time: 03:29:53
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?5/13/09  RMC FP1054 For OV override allow Base items only
EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('P/S');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(KEY.Allow_Multi_Company);
PARAMETER(KEY.Default_Printer);
PARAMETER(KEY.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

//?USER: Initialize key screen

CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

CASE;

// IF PAR.Company Number is Equal to zero
IF PAR.Company_Number = *ZERO;

// KEY.Company Number = WRK.Company Number
KEY.Company_Number = WRK.Company_Number;

// IF *OTHERWISE
IF *OTHERWISE;

// KEY.Company Number = PAR.Company Number
KEY.Company_Number = PAR.Company_Number;

ENDIF;

// KEY.PS Adjustment Type = CND.Override
KEY.PS_Adjustment_Type = 'OV';

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

ENDIF;

//?USER: Validate key screen

//?Validate Production Date
CASE;

// IF KEY.Production Date LT JOB.*Job date
IF KEY.Production_Date < JOB.*Job_date;

// Send error message - '&1 entered must be equal to or greater than &2.'
ERROR(USR2018);
MSGPARM(KEY.Production_Date);
MSGPARM(JOB.*Job_date);

ENDIF;

EXECUTE FUNCTION(Rtv Dsc/Typ/2nd/Crd   RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1349907;
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Item_Code);
PARAMETER(LCL.Description_Line_One);
PARAMETER(LCL.Item_Type_Code);
PARAMETER(LCL.Base_Conv_Loss_Item);
PARAMETER(LCL.Variety_Rendered_Cut);
PARAMETER(LCL.Credit_Item_Status);
PARAMETER(LCL.Seconds_Item);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Validate Item Code
CASE;

// IF LCL.Item Type Code is Finished Goods
IF LCL.Item_Type_Code = 'FG';

//?Base item
CASE;

// IF LCL.Base/Conv/Loss Item is Base
IF LCL.Base_Conv_Loss_Item = 'B';

//?Base item
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Item must be a base item.'
ERROR(USR4154);
MSGPARM(KEY.Item_Code);

ENDIF;

//?Seconds
CASE;

// IF LCL.Seconds Item is Yes
IF LCL.Seconds_Item = 'Y';

// Send error message - 'Item &1 is a Seconds item..'
ERROR(USR2124);
MSGPARM(KEY.Item_Code);

ENDIF;

//?Credit Item
CASE;

// IF LCL.Credit Item Status is yes
IF LCL.Credit_Item_Status = 'Y';

// AND KEY.PS Adjustment Type is Production/Forecast
AND KEY.PS_Adjustment_Type = 'PR'/'FC';

// Send error message - 'Fixed or Forecast Adjustment not allowed for a Credit Item.'
ERROR(USR2125);
MSGPARM(KEY.Item_Code);

ENDIF;

//?Validate Item Code
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Item &1 must be a Finished Goods item.'
ERROR(USR2112);
MSGPARM(KEY.Item_Code);

ENDIF;

EXECUTE FUNCTION(VAL Shipping Co WHS   RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1714721;
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Warehouse_Code);
PARAMETER(LCL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Warehouse Description is equal to blank
IF LCL.Warehouse_Description = *BLANK;

// Send error message - 'Warehouse &1 Invalid for Co &2.'
ERROR(USR3404);
MSGPARM(KEY.Warehouse_Code);
MSGPARM(KEY.Company_Number);

ENDIF;

CASE;

// IF KEY.PS Adjustment Type is Override/Production
IF KEY.PS_Adjustment_Type = 'PR'/'OV';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Adjustment Type &1 invalid.'
ERROR(USR3923);
MSGPARM(KEY.PS_Adjustment_Type);

ENDIF;

//?USER: Initialize detail screen (new record)

CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

EXECUTE FUNCTION(Rtv Next Adj Num      RT) TYPE(RTVOBJ) FILE(PDI9CPP)           AC1335053;
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Production_Date);
PARAMETER(KEY.Item_Code);
PARAMETER(KEY.Warehouse_Code);
PARAMETER(KEY.PS_Adjustment_Type);
PARAMETER(KEY.PS_Adjustment_Number);
{
 //?USER: Processing if Data record not found

 // PAR.PS Adjustment Number = CON.1
 PAR.PS_Adjustment_Number = 1;

 //?USER: Process Data record

 // PAR.PS Adjustment Number = DB1.PS Adjustment Number + CON.1
 PAR.PS_Adjustment_Number = DB1.PS_Adjustment_Number + 1;

 QUIT;

}


ENDIF;

// DTL.PS Adjustment Status = CND.Open
DTL.PS_Adjustment_Status = 'O';

// DTL.Status - Y or N = CND.yes
DTL.Status_Y_or_N = 'Y';

//?USER: Initialize detail screen (existing record)

CASE;

// IF DB1.PS Adjustment Type is Not Override
IF DB1.PS_Adjustment_Type = 'FC'/'OT'/'PR'/'SC';

// DTL.Status - Y or N = CND.yes
DTL.Status_Y_or_N = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Status - Y or N = CND.no
DTL.Status_Y_or_N = 'N';

ENDIF;

//?USER: Validate detail screen fields

//?Forecast cannot be LT zero
CASE;

// IF DTL.PS Adjustment Type is Forecast
IF DTL.PS_Adjustment_Type = 'FC';

CASE;

// IF DTL.PS Adjustment Quantity is LE Zero
IF DTL.PS_Adjustment_Quantity <= *ZERO;

// Send error message - 'Quantity cannot be negative.'
ERROR(USR0416);
MSGPARM(DTL.PS_Adjustment_Quantity);

ENDIF;

//?Forecast cannot be LT zero
// IF DTL.PS Adjustment Type is One Time/Production
IF DTL.PS_Adjustment_Type = 'PR'/'OT';

//?One Time and production cannot be zero
CASE;

// IF DTL.PS Adjustment Quantity is EQ Zero
IF DTL.PS_Adjustment_Quantity = *ZERO;

// Send error message - 'Quantity is required.'
ERROR(USR0394);
MSGPARM(DTL.PS_Adjustment_Quantity);

//?One Time and production cannot be zero
// IF *OTHERWISE
IF *OTHERWISE;

//?Do not allow adjustment if it will cause prod to go negative
EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(WRK.Description_Line_One);
PARAMETER(WRK.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(WRK.Item_Structure_Class_Code);
PARAMETER(WRK.Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(WRK.Item_Type_Code);
PARAMETER(WRK.Default_Warehouse);
PARAMETER(WRK.Fresh_Chilling_Time);
PARAMETER(WRK.Base_Conv_Loss_Item);
PARAMETER(WRK.Variety_Rendered_Cut);
PARAMETER(WRK.Credit_Item_Status);
PARAMETER(WRK.Std_Weight_Head_Var_Ren);
PARAMETER(WRK.Pieces_Per_Head);
PARAMETER(WRK.Department_Code);
PARAMETER(WRK.Group_for_Packaging);
PARAMETER(WRK.Seconds_Item);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(WRK.Export_Domestic);
PARAMETER(WRK.Print_On_Schedule);
PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
PARAMETER(WRK.Fresh_Sched_As_Ordered);
PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
PARAMETER(WRK.Primal_Group_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Determine Production Type
CASE;

// IF DTL.Production Date EQ JOB.*Job date
IF DTL.Production_Date = JOB.*Job_date;

// PAR.Production Type = CND.Schedule
PAR.Production_Type = 'S';

EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
PARAMETER(DTL.Company_Number);
PARAMETER(PAR.Production_Type);
PARAMETER(DTL.Production_Date);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


//?Set to Plan if record not found
CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// PAR.Production Type = CND.Plan
PAR.Production_Type = 'P';

ENDIF;

//?Determine Production Type
// IF DTL.Production Date GT JOB.*Job date
IF DTL.Production_Date > JOB.*Job_date;

// PAR.Production Type = CND.Plan
PAR.Production_Type = 'P';

ENDIF;

EXECUTE FUNCTION(Rtv AvgPcWgt/Prd/PrdAl RT) TYPE(RTVOBJ) FILE(PDI8CPP)          AC1484812;
PARAMETER(DTL.Company_Number);
PARAMETER(PAR.Production_Type);
PARAMETER(DTL.Production_Date);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(PAR.PS_Weight_Production_Need);
PARAMETER(PAR.PS_Pieces_Production_Need);
PARAMETER(WRK.PS_Avg_Piece_Wgt);
PARAMETER(WRK.PS_Weight_Prod_Allocated);
PARAMETER(WRK.PS_Pieces_Prod_Allocated);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // Total Production Weight
 PAR.PS_Weight_Planned_Prod = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
 - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

 // Total Production Pieces
 PAR.PS_Pieces_Planned_Prod = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
 - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

}


CASE;

// IF PAR.Piece Count Item is yes
IF PAR.Piece_Count_Item = 'Y';

// Pieces Prod after delete
PAR.ATS_Pieces_Available_USR = PAR.PS_Pieces_Production_Need + ( (                                 +
DTL.PS_Adjustment_Quantity * PAR.Pieces_Per_Bag ) * PAR.Bags_Per_Unit );

//?If pieces available is LT zero then error
CASE;

// IF PAR.ATS Pieces Available USR is LT Zeros
IF PAR.ATS_Pieces_Available_USR < *ZERO;

// PAR.ATS Pieces Available USR = PAR.ATS Pieces Available USR * CON.-1 *
PAR.ATS_Pieces_Available_USR = PAR.ATS_Pieces_Available_USR * -1;

// Calc total pieces per box
PAR.Pieces_SUM = PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit;

CASE;

// IF PAR.ATS Pieces Available USR GT PAR.Pieces SUM
IF PAR.ATS_Pieces_Available_USR > PAR.Pieces_SUM;

// Send error message - 'Adjustment not allowed will cause production to go negative.'
ERROR(USR2571);

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Weight Prod after delete
PAR.ATS_Weight_Available_USR = PAR.PS_Weight_Production_Need + (                                   +
DTL.PS_Adjustment_Quantity * PAR.Unit_Weight );

//?If weight available is LT zero then error
CASE;

// IF PAR.ATS Weight Available USR is Less than zero
IF PAR.ATS_Weight_Available_USR < *ZERO;

// Send error message - 'Adjustment not allowed will cause production to go negative.'
ERROR(USR2571);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Prod. Adjustment  CR) TYPE(CRTOBJ) FILE(PDI9CPP)           AC1261448;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Production_Date);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.PS_Adjustment_Type);
PARAMETER(DTL.PS_Adjustment_Number);
PARAMETER(DTL.PS_Adjustment_Quantity);
PARAMETER(DTL.PS_Adjustment_Status);
PARAMETER(DTL.PS_Consumed_Item_Code);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Status_Y_or_N);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 CASE;

 // IF PAR.Status - Y or N is yes
 IF PAR.Status_Y_or_N = 'Y';

 // DB1.PS Adjustment Status = CND.Scheduled
 DB1.PS_Adjustment_Status = 'S';

 ENDIF;

 //?USER: Processing after Data update

 CASE;

 // IF PAR.Status - Y or N is yes
 IF PAR.Status_Y_or_N = 'Y';

 EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(WRK.Description_Line_One);
 PARAMETER(WRK.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(WRK.Item_Structure_Class_Code);
 PARAMETER(WRK.Item_Structure_Group_Code);
 PARAMETER(WRK.Item_Structure_Type_Code);
 PARAMETER(WRK.Item_Type_Code);
 PARAMETER(WRK.Default_Warehouse);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(WRK.Base_Conv_Loss_Item);
 PARAMETER(WRK.Variety_Rendered_Cut);
 PARAMETER(WRK.Credit_Item_Status);
 PARAMETER(WRK.Std_Weight_Head_Var_Ren);
 PARAMETER(WRK.Pieces_Per_Head);
 PARAMETER(WRK.Department_Code);
 PARAMETER(WRK.Group_for_Packaging);
 PARAMETER(WRK.Seconds_Item);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(WRK.Export_Domestic);
 PARAMETER(WRK.Print_On_Schedule);
 PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
 PARAMETER(WRK.Fresh_Sched_As_Ordered);
 PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
 PARAMETER(WRK.Primal_Group_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.Warehouse_Type);
 PARAMETER(WRK.Trans_Contol_AS400_Plant);
 PARAMETER(WRK.Warehouse_Location);
 PARAMETER(PAR.Warehouse_Std_Chill_Time);
 PARAMETER(PAR.Warehouse_Chill_Time);
 PARAMETER(WRK.PS_Item_Id);
 {
  //?Execute internal function

  EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Description_Line_One);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Type_Code);
  PARAMETER(PAR.Default_Warehouse);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Base_Conv_Loss_Item);
  PARAMETER(PAR.Variety_Rendered_Cut);
  PARAMETER(PAR.Credit_Item_Status);
  PARAMETER(PAR.Std_Weight_Head_Var_Ren);
  PARAMETER(PAR.Pieces_Per_Head);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Group_for_Packaging);
  PARAMETER(PAR.Seconds_Item);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.Export_Domestic);
  PARAMETER(PAR.Print_On_Schedule);
  PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
  PARAMETER(PAR.Fresh_Sched_As_Ordered);
  PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  PARAMETER(PAR.Warehouse_Location);
  PARAMETER(PAR.Warehouse_Std_Chill_Time);
  PARAMETER(PAR.Warehouse_Chill_Time);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Description_Line_One);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Default_Warehouse);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Std_Weight_Head_Var_Ren);
   PARAMETER(PAR.Pieces_Per_Head);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Group_for_Packaging);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Export_Domestic);
   PARAMETER(PAR.Print_On_Schedule);
   PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
   PARAMETER(PAR.Fresh_Sched_As_Ordered);
   PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
   PARAMETER(PAR.Primal_Group_Code);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.Trans_Contol_AS400_Plant);
   PARAMETER(PAR.Warehouse_Location);
   PARAMETER(PAR.Warehouse_Std_Chill_Time);
   PARAMETER(PAR.Warehouse_Chill_Time);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

  }

  EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
  PARAMETER(PAR.Item_Type_Code);
  PARAMETER(PAR.Base_Conv_Loss_Item);
  PARAMETER(PAR.Variety_Rendered_Cut);
  PARAMETER(PAR.Credit_Item_Status);
  PARAMETER(PAR.Seconds_Item);
  PARAMETER(PAR.PS_Item_Id);
  {
   //?Execute internal function

   CASE;

   // IF PAR.Item Type Code is Raw Materials
   IF PAR.Item_Type_Code = 'RM';

   // PAR.PS Item Identification = CND.RM Base
   PAR.PS_Item_Id = 'RMB';

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Seconds Item is Yes
   IF PAR.Seconds_Item = 'Y';

   // PAR.PS Item Identification = CND.FG Seconds
   PAR.PS_Item_Id = 'FSC';

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Variety/Rendered/Cut is Variety
   IF PAR.Variety_Rendered_Cut = 'V';

   // PAR.PS Item Identification = CND.FG Variety
   PAR.PS_Item_Id = 'FVR';

   // IF PAR.Variety/Rendered/Cut is Rendered
   IF PAR.Variety_Rendered_Cut = 'R';

   // PAR.PS Item Identification = CND.FG Rendered
   PAR.PS_Item_Id = 'FRD';

   // IF PAR.Variety/Rendered/Cut is Cut
   IF PAR.Variety_Rendered_Cut = 'C';

   //?Base/Converted/Fabricated
   CASE;

   // IF PAR.Credit Item Status is yes
   IF PAR.Credit_Item_Status = 'Y';

   //?Setup Base/Converted/Fabricated Credit
   CASE;

   // IF PAR.Converted/Base Item is Base
   IF PAR.Base_Conv_Loss_Item = 'B';

   // PAR.PS Item Identification = CND.FG Base Credit
   PAR.PS_Item_Id = 'FBC';

   //?Setup Base/Converted/Fabricated Credit
   // IF PAR.Converted/Base Item is Converted
   IF PAR.Base_Conv_Loss_Item = 'C';

   // PAR.PS Item Identification = CND.FG Converted Credit
   PAR.PS_Item_Id = 'FCC';

   //?Setup Base/Converted/Fabricated Credit
   // IF PAR.Converted/Base Item is Fabricated
   IF PAR.Base_Conv_Loss_Item = 'F';

   // PAR.PS Item Identification = CND.FG Fabricated Credit
   PAR.PS_Item_Id = 'FFC';

   //?Setup Base/Converted/Fabricated Credit
   // IF PAR.Converted/Base Item is Loss
   IF PAR.Base_Conv_Loss_Item = 'L';

   // PAR.PS Item Identification = CND.FG Loss Credit
   PAR.PS_Item_Id = 'FLC';

   ENDIF;

   //?Base/Converted/Fabricated
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Setup Base/Converted/Fabricated
   CASE;

   // IF PAR.Converted/Base Item is Base
   IF PAR.Base_Conv_Loss_Item = 'B';

   // PAR.PS Item Identification = CND.FG Base
   PAR.PS_Item_Id = 'FGB';

   //?Setup Base/Converted/Fabricated
   // IF PAR.Converted/Base Item is Converted
   IF PAR.Base_Conv_Loss_Item = 'C';

   // PAR.PS Item Identification = CND.FG Converted
   PAR.PS_Item_Id = 'FCV';

   //?Setup Base/Converted/Fabricated
   // IF PAR.Converted/Base Item is Fabricated
   IF PAR.Base_Conv_Loss_Item = 'F';

   // PAR.PS Item Identification = CND.FG Fabricated
   PAR.PS_Item_Id = 'FFB';

   //?Setup Base/Converted/Fabricated
   // IF PAR.Converted/Base Item is Loss
   IF PAR.Base_Conv_Loss_Item = 'L';

   // PAR.PS Item Identification = CND.FG Loss
   PAR.PS_Item_Id = 'FLS';

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

  }

 }

 //?Determine Production Type
 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF PAR.Production Date GT JOB.*Job date
 IF PAR.Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Update Production
 CASE;

 // IF PAR.PS Adjustment Type is One Time/Prod
 IF PAR.PS_Adjustment_Type = 'PR'/'OT';

 // Call program UPD Avail-To-Sell  SCH XF.
 CALL PROGRAM(UPD Avail-To-Sell  SCH XF) ('PDTRXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Adjustment_Quantity);
 PARAMETER('SA');
 PARAMETER(PAR.Production_Type);
 PARAMETER(WRK.Return_Code_ATS_USR);
 PARAMETER(PAR.PS_Adjustment_Number);

 CASE;

 // IF WRK.Return Code ATS USR is BOM Not Found
 IF WRK.Return_Code_ATS_USR = 'BNF';

 // Send error message - 'Bill of Material for Item &1 does not exist.'
 ERROR(USR2057);
 MSGPARM(PAR.Item_Code);

 ENDIF;

 //?Update Production
 // IF PAR.PS Adjustment Type is Override
 IF PAR.PS_Adjustment_Type = 'OV';

 //?Pieces Vs. Weight
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 EXECUTE FUNCTION(Rtv Avg Piece Wgt     RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478092;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.PS_Avg_Piece_Wgt);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.PS Weight Standard = PAR.PS Adjustment Quantity * WRK.PS Avg Piece Wgt *Rounded
 LCL.PS_Weight_Standard = PAR.PS_Adjustment_Quantity * WRK.PS_Avg_Piece_Wgt 'H';

 // Pieces
 LCL.PS_Pieces_Standard = ( PAR.PS_Adjustment_Quantity * PAR.Pieces_Per_Bag 'H' )
 * PAR.Bags_Per_Unit 'H';

 //?Pieces Vs. Weight
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.PS Weight Standard = PAR.PS Adjustment Quantity * PAR.Unit Weight *Rounded
 LCL.PS_Weight_Standard = PAR.PS_Adjustment_Quantity * PAR.Unit_Weight 'H';

 // LCL.PS Pieces Standard = CON.*ZERO
 LCL.PS_Pieces_Standard = *ZERO;

 ENDIF;

 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(LCL.PS_Pieces_Standard);
 PARAMETER(LCL.PS_Weight_Standard);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Standard = PAR.Weight Scheduled
  PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.PS Weight Standard is NE Zero
  IF PAR.PS_Weight_Standard <> *ZERO;

  // OR PAR.PS Pieces Standard is NE Zeros
  OR PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
  PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
 }

 //?Update Production
 // IF PAR.PS Adjustment Type is Forecast
 IF PAR.PS_Adjustment_Type = 'FC';

 EXECUTE FUNCTION(RTV Scheduled for Date RT) TYPE(RTVOBJ) FILE(PDKNCPP)          AC1488318;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Quantity_Scheduled_SUM);
 PARAMETER(WRK.OD_Weight_Scheduled);
 {
  //?USER: Initialize routine

  // PAR.OD Quantity Scheduled = CON.*ZERO
  PAR.OD_Qty_Cnsmd_Pieces_Sched = *ZERO;

  // PAR.OD Weight Scheduled = CON.*ZERO
  PAR.OD_Weight_Scheduled = *ZERO;

  //?USER: Process Data record

  // PAR.OD Quantity Scheduled = PAR.OD Quantity Scheduled + DB1.OD Quantity Schedule
  PAR.OD_Qty_Cnsmd_Pieces_Sched = PAR.OD_Qty_Cnsmd_Pieces_Sched
  + DB1.OD_Qty_Cnsmd_Pieces_Sched;

  // PAR.OD Weight Scheduled = PAR.OD Weight Scheduled + DB1.OD Weight Scheduled
  PAR.OD_Weight_Scheduled = PAR.OD_Weight_Scheduled + DB1.OD_Weight_Scheduled;

 }

 // WRK.PS Adjustment Quantity = PAR.PS Adjustment Quantity - PAR.Quantity Scheduled
 WRK.PS_Adjustment_Quantity = PAR.PS_Adjustment_Quantity - PAR.Quantity_Scheduled_SUM;

 //?Only do adjustment if adjust Qty is GT orders for date
 CASE;

 // IF WRK.PS Adjustment Quantity is GT Zero
 IF WRK.PS_Adjustment_Quantity > *ZERO;

 // Call program UPD Avail-To-Sell  SCH XF.
 CALL PROGRAM(UPD Avail-To-Sell  SCH XF) ('PDTRXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.PS_Adjustment_Quantity);
 PARAMETER('SF');
 PARAMETER(PAR.Production_Type);
 PARAMETER(WRK.Return_Code_ATS_USR);
 PARAMETER(PAR.PS_Adjustment_Number);

 CASE;

 // IF WRK.Return Code ATS USR is BOM Not Found
 IF WRK.Return_Code_ATS_USR = 'BNF';

 // Send error message - 'Bill of Material for Item &1 does not exist.'
 ERROR(USR2057);
 MSGPARM(PAR.Item_Code);

 ENDIF;

 ENDIF;

 //?Update Production
 // IF PAR.PS Adjustment Type is Ship Cut
 IF PAR.PS_Adjustment_Type = 'SC';

 //?Pieces Vs. Weight
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 EXECUTE FUNCTION(Rtv Avg Piece Wgt     RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478092;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.PS_Avg_Piece_Wgt);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.PS Weight Ship Cut Adj = PAR.PS Adjustment Quantity * WRK.PS Avg Piece Wgt *
 PAR.PS_Weight_Ship_Cut_Adj = PAR.PS_Adjustment_Quantity * WRK.PS_Avg_Piece_Wgt 'H';

 // Pieces
 PAR.PS_Pieces_Ship_Cut_Adj = ( PAR.PS_Adjustment_Quantity * PAR.Pieces_Per_Bag 'H' )
 * PAR.Bags_Per_Unit 'H';

 //?Pieces Vs. Weight
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.PS Weight Ship Cut Adjust = PAR.PS Adjustment Quantity * PAR.Unit Weight *Ro
 PAR.PS_Weight_Ship_Cut_Adj = PAR.PS_Adjustment_Quantity * PAR.Unit_Weight 'H';

 // PAR.PS Pieces Ship Cut Adj = CON.*ZERO
 PAR.PS_Pieces_Ship_Cut_Adj = *ZERO;

 ENDIF;

 EXECUTE FUNCTION(Upd Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461650;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?USER: Process Data record

  // WRK.PS Weight Ship Cut Adjust = DB1.PS Weight Ship Cut Adjust + PAR.PS Weight Sh
  WRK.PS_Weight_Ship_Cut_Adj = DB1.PS_Weight_Ship_Cut_Adj + PAR.PS_Weight_Ship_Cut_Adj;

  // WRK.PS Pieces Ship Cut Adj = DB1.PS Pieces Ship Cut Adj + PAR.PS Pieces Ship Cut
  WRK.PS_Pieces_Ship_Cut_Adj = DB1.PS_Pieces_Ship_Cut_Adj + PAR.PS_Pieces_Ship_Cut_Adj;

  EXECUTE FUNCTION(Chg Ship Cut Adjust   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1461651;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(WRK.PS_Weight_Ship_Cut_Adj);
  PARAMETER(WRK.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 ENDIF;

 ENDIF;

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Prod. Adjustment  CH) TYPE(CHGOBJ) FILE(PDI9CPP)           AC1261449;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Production_Date);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.PS_Adjustment_Type);
PARAMETER(DTL.PS_Adjustment_Number);
PARAMETER(DTL.PS_Adjustment_Quantity);
PARAMETER(DTL.PS_Adjustment_Status);
PARAMETER(DTL.PS_Consumed_Item_Code);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Status_Y_or_N);
{
 //?USER: Processing after Data read

 // PAR.Quantity Adjustment USR = DB1.PS Adjustment Quantity
 PAR.Quantity_Adjustment_USR = DB1.PS_Adjustment_Quantity;

 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 CASE;

 // IF PAR.Status - Y or N is yes
 IF PAR.Status_Y_or_N = 'Y';

 // DB1.PS Adjustment Status = CND.Scheduled
 DB1.PS_Adjustment_Status = 'S';

 ENDIF;

 //?USER: Processing after Data update

 EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(WRK.Description_Line_One);
 PARAMETER(WRK.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(WRK.Item_Structure_Class_Code);
 PARAMETER(WRK.Item_Structure_Group_Code);
 PARAMETER(WRK.Item_Structure_Type_Code);
 PARAMETER(WRK.Item_Type_Code);
 PARAMETER(WRK.Default_Warehouse);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(WRK.Base_Conv_Loss_Item);
 PARAMETER(WRK.Variety_Rendered_Cut);
 PARAMETER(WRK.Credit_Item_Status);
 PARAMETER(WRK.Std_Weight_Head_Var_Ren);
 PARAMETER(WRK.Pieces_Per_Head);
 PARAMETER(WRK.Department_Code);
 PARAMETER(WRK.Group_for_Packaging);
 PARAMETER(WRK.Seconds_Item);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(WRK.Export_Domestic);
 PARAMETER(WRK.Print_On_Schedule);
 PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
 PARAMETER(WRK.Fresh_Sched_As_Ordered);
 PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
 PARAMETER(WRK.Primal_Group_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.Warehouse_Type);
 PARAMETER(WRK.Trans_Contol_AS400_Plant);
 PARAMETER(WRK.Warehouse_Location);
 PARAMETER(PAR.Warehouse_Std_Chill_Time);
 PARAMETER(PAR.Warehouse_Chill_Time);
 PARAMETER(WRK.PS_Item_Id);
 {
  //?Execute internal function

  EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Description_Line_One);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Type_Code);
  PARAMETER(PAR.Default_Warehouse);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Base_Conv_Loss_Item);
  PARAMETER(PAR.Variety_Rendered_Cut);
  PARAMETER(PAR.Credit_Item_Status);
  PARAMETER(PAR.Std_Weight_Head_Var_Ren);
  PARAMETER(PAR.Pieces_Per_Head);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Group_for_Packaging);
  PARAMETER(PAR.Seconds_Item);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.Export_Domestic);
  PARAMETER(PAR.Print_On_Schedule);
  PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
  PARAMETER(PAR.Fresh_Sched_As_Ordered);
  PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  PARAMETER(PAR.Warehouse_Location);
  PARAMETER(PAR.Warehouse_Std_Chill_Time);
  PARAMETER(PAR.Warehouse_Chill_Time);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Description_Line_One);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Default_Warehouse);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Std_Weight_Head_Var_Ren);
   PARAMETER(PAR.Pieces_Per_Head);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Group_for_Packaging);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Export_Domestic);
   PARAMETER(PAR.Print_On_Schedule);
   PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
   PARAMETER(PAR.Fresh_Sched_As_Ordered);
   PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
   PARAMETER(PAR.Primal_Group_Code);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.Trans_Contol_AS400_Plant);
   PARAMETER(PAR.Warehouse_Location);
   PARAMETER(PAR.Warehouse_Std_Chill_Time);
   PARAMETER(PAR.Warehouse_Chill_Time);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

  }

  EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
  PARAMETER(PAR.Item_Type_Code);
  PARAMETER(PAR.Base_Conv_Loss_Item);
  PARAMETER(PAR.Variety_Rendered_Cut);
  PARAMETER(PAR.Credit_Item_Status);
  PARAMETER(PAR.Seconds_Item);
  PARAMETER(PAR.PS_Item_Id);
  {
   //?Execute internal function

   CASE;

   // IF PAR.Item Type Code is Raw Materials
   IF PAR.Item_Type_Code = 'RM';

   // PAR.PS Item Identification = CND.RM Base
   PAR.PS_Item_Id = 'RMB';

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Seconds Item is Yes
   IF PAR.Seconds_Item = 'Y';

   // PAR.PS Item Identification = CND.FG Seconds
   PAR.PS_Item_Id = 'FSC';

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Variety/Rendered/Cut is Variety
   IF PAR.Variety_Rendered_Cut = 'V';

   // PAR.PS Item Identification = CND.FG Variety
   PAR.PS_Item_Id = 'FVR';

   // IF PAR.Variety/Rendered/Cut is Rendered
   IF PAR.Variety_Rendered_Cut = 'R';

   // PAR.PS Item Identification = CND.FG Rendered
   PAR.PS_Item_Id = 'FRD';

   // IF PAR.Variety/Rendered/Cut is Cut
   IF PAR.Variety_Rendered_Cut = 'C';

   //?Base/Converted/Fabricated
   CASE;

   // IF PAR.Credit Item Status is yes
   IF PAR.Credit_Item_Status = 'Y';

   //?Setup Base/Converted/Fabricated Credit
   CASE;

   // IF PAR.Converted/Base Item is Base
   IF PAR.Base_Conv_Loss_Item = 'B';

   // PAR.PS Item Identification = CND.FG Base Credit
   PAR.PS_Item_Id = 'FBC';

   //?Setup Base/Converted/Fabricated Credit
   // IF PAR.Converted/Base Item is Converted
   IF PAR.Base_Conv_Loss_Item = 'C';

   // PAR.PS Item Identification = CND.FG Converted Credit
   PAR.PS_Item_Id = 'FCC';

   //?Setup Base/Converted/Fabricated Credit
   // IF PAR.Converted/Base Item is Fabricated
   IF PAR.Base_Conv_Loss_Item = 'F';

   // PAR.PS Item Identification = CND.FG Fabricated Credit
   PAR.PS_Item_Id = 'FFC';

   //?Setup Base/Converted/Fabricated Credit
   // IF PAR.Converted/Base Item is Loss
   IF PAR.Base_Conv_Loss_Item = 'L';

   // PAR.PS Item Identification = CND.FG Loss Credit
   PAR.PS_Item_Id = 'FLC';

   ENDIF;

   //?Base/Converted/Fabricated
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Setup Base/Converted/Fabricated
   CASE;

   // IF PAR.Converted/Base Item is Base
   IF PAR.Base_Conv_Loss_Item = 'B';

   // PAR.PS Item Identification = CND.FG Base
   PAR.PS_Item_Id = 'FGB';

   //?Setup Base/Converted/Fabricated
   // IF PAR.Converted/Base Item is Converted
   IF PAR.Base_Conv_Loss_Item = 'C';

   // PAR.PS Item Identification = CND.FG Converted
   PAR.PS_Item_Id = 'FCV';

   //?Setup Base/Converted/Fabricated
   // IF PAR.Converted/Base Item is Fabricated
   IF PAR.Base_Conv_Loss_Item = 'F';

   // PAR.PS Item Identification = CND.FG Fabricated
   PAR.PS_Item_Id = 'FFB';

   //?Setup Base/Converted/Fabricated
   // IF PAR.Converted/Base Item is Loss
   IF PAR.Base_Conv_Loss_Item = 'L';

   // PAR.PS Item Identification = CND.FG Loss
   PAR.PS_Item_Id = 'FLS';

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

  }

 }

 //?Determine Production Type
 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF PAR.Production Date GT JOB.*Job date
 IF PAR.Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Update production
 CASE;

 // IF PAR.Status - Y or N is yes
 IF PAR.Status_Y_or_N = 'Y';

 CASE;

 // IF PAR.PS Adjustment Type is Ship Cut
 IF PAR.PS_Adjustment_Type = 'SC';

 // WRK.PS Adjustment Quantity = PAR.PS Adjustment Quantity - PAR.Quantity Adjustmen
 WRK.PS_Adjustment_Quantity = PAR.PS_Adjustment_Quantity - PAR.Quantity_Adjustment_USR;

 //?Adjustment Weight/Pieces
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 EXECUTE FUNCTION(Rtv Avg Piece Wgt     RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478092;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.PS_Avg_Piece_Wgt);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // WRK.PS Weight Ship Cut Adj = WRK.PS Adjustment Quantity * WRK.PS Avg Piece Wgt *
 WRK.PS_Weight_Ship_Cut_Adj = WRK.PS_Adjustment_Quantity * WRK.PS_Avg_Piece_Wgt 'H';

 // Pieces
 WRK.PS_Pieces_Ship_Cut_Adj = ( WRK.PS_Adjustment_Quantity * PAR.Pieces_Per_Bag 'H' )
 * PAR.Bags_Per_Unit 'H';

 //?Adjustment Weight/Pieces
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.PS Weight Ship Cut Adj = WRK.PS Adjustment Quantity * PAR.Unit Weight *Round
 WRK.PS_Weight_Ship_Cut_Adj = WRK.PS_Adjustment_Quantity * PAR.Unit_Weight 'H';

 // WRK.PS Pieces Ship Cut Adj = CON.*ZERO
 WRK.PS_Pieces_Ship_Cut_Adj = *ZERO;

 ENDIF;

 EXECUTE FUNCTION(Upd Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461650;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.PS_Weight_Ship_Cut_Adj);
 PARAMETER(WRK.PS_Pieces_Ship_Cut_Adj);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?USER: Process Data record

  // WRK.PS Weight Ship Cut Adjust = DB1.PS Weight Ship Cut Adjust + PAR.PS Weight Sh
  WRK.PS_Weight_Ship_Cut_Adj = DB1.PS_Weight_Ship_Cut_Adj + PAR.PS_Weight_Ship_Cut_Adj;

  // WRK.PS Pieces Ship Cut Adj = DB1.PS Pieces Ship Cut Adj + PAR.PS Pieces Ship Cut
  WRK.PS_Pieces_Ship_Cut_Adj = DB1.PS_Pieces_Ship_Cut_Adj + PAR.PS_Pieces_Ship_Cut_Adj;

  EXECUTE FUNCTION(Chg Ship Cut Adjust   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1461651;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(WRK.PS_Weight_Ship_Cut_Adj);
  PARAMETER(WRK.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 // IF PAR.PS Adjustment Type is Forecast
 IF PAR.PS_Adjustment_Type = 'FC';

 EXECUTE FUNCTION(UPD Dealloc One FC Adj RT) TYPE(RTVOBJ) FILE(PDI9CPP)          AC1489838;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Adjustment_Type);
 PARAMETER(DB1.PS_Adjustment_Number);
 PARAMETER(PAR.Quantity_Adjustment_USR);
 PARAMETER(PAR.Production_Type);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.PS Adjustment Type is Forecast
  IF DB1.PS_Adjustment_Type = 'FC';

  EXECUTE FUNCTION(RTV Scheduled for Date RT) TYPE(RTVOBJ) FILE(PDKNCPP)          AC1488318;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Quantity_Scheduled_SUM);
  PARAMETER(WRK.OD_Weight_Scheduled);
  {
   //?USER: Initialize routine

   // PAR.OD Quantity Scheduled = CON.*ZERO
   PAR.OD_Qty_Cnsmd_Pieces_Sched = *ZERO;

   // PAR.OD Weight Scheduled = CON.*ZERO
   PAR.OD_Weight_Scheduled = *ZERO;

   //?USER: Process Data record

   // PAR.OD Quantity Scheduled = PAR.OD Quantity Scheduled + DB1.OD Quantity Schedule
   PAR.OD_Qty_Cnsmd_Pieces_Sched = PAR.OD_Qty_Cnsmd_Pieces_Sched
   + DB1.OD_Qty_Cnsmd_Pieces_Sched;

   // PAR.OD Weight Scheduled = PAR.OD Weight Scheduled + DB1.OD Weight Scheduled
   PAR.OD_Weight_Scheduled = PAR.OD_Weight_Scheduled + DB1.OD_Weight_Scheduled;

  }

  // WRK.PS Adjustment Quantity = PAR.PS Adjustment Quantity - PAR.Quantity Scheduled
  WRK.PS_Adjustment_Quantity = PAR.PS_Adjustment_Quantity - PAR.Quantity_Scheduled_SUM;

  //?If adjustment quantity is greater than ordered delete difference
  CASE;

  // IF WRK.PS Adjustment Quantity is GE Zero
  IF WRK.PS_Adjustment_Quantity >= *ZERO;

  // WRK.PS Adjustment Quantity = WRK.PS Adjustment Quantity * CON.-1 *
  WRK.PS_Adjustment_Quantity = WRK.PS_Adjustment_Quantity * -1;

  // Call program UPD Avail-To-Sell  SCH XF.
  CALL PROGRAM(UPD Avail-To-Sell  SCH XF) ('PDTRXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(WRK.PS_Adjustment_Quantity);
  PARAMETER('SF');
  PARAMETER(PAR.Production_Type);
  PARAMETER(WRK.Return_Code_ATS_USR);
  PARAMETER(DB1.PS_Adjustment_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(UPD Alloc One FC Adj  RT) TYPE(RTVOBJ) FILE(PDI9CPP)           AC1489841;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Adjustment_Type);
 PARAMETER(DB1.PS_Adjustment_Number);
 PARAMETER(PAR.PS_Adjustment_Quantity);
 PARAMETER(PAR.Production_Type);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.PS Adjustment Type is Forecast
  IF DB1.PS_Adjustment_Type = 'FC';

  EXECUTE FUNCTION(RTV Scheduled for Date RT) TYPE(RTVOBJ) FILE(PDKNCPP)          AC1488318;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Quantity_Scheduled_SUM);
  PARAMETER(WRK.OD_Weight_Scheduled);
  {
   //?USER: Initialize routine

   // PAR.OD Quantity Scheduled = CON.*ZERO
   PAR.OD_Qty_Cnsmd_Pieces_Sched = *ZERO;

   // PAR.OD Weight Scheduled = CON.*ZERO
   PAR.OD_Weight_Scheduled = *ZERO;

   //?USER: Process Data record

   // PAR.OD Quantity Scheduled = PAR.OD Quantity Scheduled + DB1.OD Quantity Schedule
   PAR.OD_Qty_Cnsmd_Pieces_Sched = PAR.OD_Qty_Cnsmd_Pieces_Sched
   + DB1.OD_Qty_Cnsmd_Pieces_Sched;

   // PAR.OD Weight Scheduled = PAR.OD Weight Scheduled + DB1.OD Weight Scheduled
   PAR.OD_Weight_Scheduled = PAR.OD_Weight_Scheduled + DB1.OD_Weight_Scheduled;

  }

  // Calc adjust quantity
  WRK.PS_Adjustment_Quantity = PAR.PS_Adjustment_Quantity - PAR.Quantity_Scheduled_SUM;

  //?Only do adjustment if adjust Qty is GE orders for date
  CASE;

  // IF WRK.PS Adjustment Quantity is GE Zero
  IF WRK.PS_Adjustment_Quantity >= *ZERO;

  // Call program UPD Avail-To-Sell  SCH XF.
  CALL PROGRAM(UPD Avail-To-Sell  SCH XF) ('PDTRXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(WRK.PS_Adjustment_Quantity);
  PARAMETER('SF');
  PARAMETER(PAR.Production_Type);
  PARAMETER(WRK.Return_Code_ATS_USR);
  PARAMETER(DB1.PS_Adjustment_Number);

  ENDIF;

  ENDIF;

 }

 // IF PAR.PS Adjustment Type is Override
 IF PAR.PS_Adjustment_Type = 'OV';

 EXECUTE FUNCTION(BPS Rpl Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1941028;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Standard = PAR.Weight Scheduled
  PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.PS Weight Standard is NE Zero
  IF PAR.PS_Weight_Standard <> *ZERO;

  // OR PAR.PS Pieces Standard is NE Zeros
  OR PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Standard = PAR.Weight Scheduled
  PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.PS Adjustment Quantity = PAR.PS Adjustment Quantity - PAR.Quantity Adjustment USR
 WRK.PS_Adjustment_Quantity = PAR.PS_Adjustment_Quantity - PAR.Quantity_Adjustment_USR;

 // Call program UPD Avail-To-Sell  SCH XF.
 CALL PROGRAM(UPD Avail-To-Sell  SCH XF) ('PDTRXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.PS_Adjustment_Quantity);
 PARAMETER('SA');
 PARAMETER(PAR.Production_Type);
 PARAMETER(WRK.Return_Code_ATS_USR);
 PARAMETER(PAR.PS_Adjustment_Number);

 CASE;

 // IF WRK.Return Code ATS USR is BOM Not Found
 IF WRK.Return_Code_ATS_USR = 'BNF';

 // Send error message - 'Bill of Material for Item &1 does not exist.'
 ERROR(USR2057);
 MSGPARM(PAR.Item_Code);

 ENDIF;

 ENDIF;

 ENDIF;

}


