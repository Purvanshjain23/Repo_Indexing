// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDR7EFR
// ?Date: 14.08.2025 Time: 03:32:54
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('P/S');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(WRK.Allow_Multi_Company);
PARAMETER(WRK.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(RTV All Fields/1 Line  Rt) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1438734;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(WRK.Order_Group_Code);
PARAMETER(WRK.Detail_Line_Status);
PARAMETER(WRK.Detail_Line_Status_Last);
PARAMETER(WRK.Billing_Detail_Cost_Dol);
PARAMETER(WRK.Billing_Detail_Gross_Dol);
PARAMETER(WRK.Billing_Detail_Net_Dol);
PARAMETER(WRK.Quantity_to_Substitute);
PARAMETER(PAR.Comment_Print_Acknowledge);
PARAMETER(PAR.Comment_Print_Inv_Cr_Memo);
PARAMETER(PAR.Comment_Print_Pick_Slip);
PARAMETER(PAR.Comment_Print_Ship_Doc);
PARAMETER(WRK.Extended_Amount);
PARAMETER(WRK.Market_Pricing_Date);
PARAMETER(WRK.Commodity_Market_Code);
PARAMETER(WRK.Date_Method_Code);
PARAMETER(WRK.Price_Method_Code);
PARAMETER(WRK.Price_Overage_Override);
PARAMETER(WRK.Contract_Number);
PARAMETER(WRK.Price_Status);
PARAMETER(WRK.Pricing_Date_Used);
PARAMETER(WRK.U_M_Base_Price);
PARAMETER(WRK.U_M_Ordered);
PARAMETER(WRK.Work_Confirm_Status);
PARAMETER(WRK.Work_Over_Short_Status);
PARAMETER(WRK.OD_Production_Plan_Sts);
PARAMETER(PAR.Order_Desc_Line_One);
PARAMETER(WRK.Order_Desc_Line_Two);
PARAMETER(PAR.Age_Code);
PARAMETER(PAR.Palletize);
PARAMETER(PAR.Slip_Sheet);
PARAMETER(WRK.Catch_Weight_Status);
PARAMETER(WRK.Price_Audit);
PARAMETER(WRK.Price_Audit_Reason_Code);
PARAMETER(WRK.Production_Date_Control);
PARAMETER(WRK.Rated_Freight);
PARAMETER(PAR.Quantity_Ordered);
PARAMETER(WRK.Weight_Ordered);
PARAMETER(PAR.Quantity_Scheduled);
PARAMETER(WRK.Weight_Scheduled);
PARAMETER(WRK.Quantity_Shipped_Total);
PARAMETER(WRK.Weight_Shipped_Total);
PARAMETER(WRK.Unit_Cost_Pricing_U_M);
PARAMETER(WRK.Unit_Cost_Per_Pound);
PARAMETER(WRK.Unit_Price);
PARAMETER(WRK.Unit_Price_Credit);
PARAMETER(WRK.Unit_Price_Ordered_U_M);
PARAMETER(WRK.Unit_Weight_Ordered_U_M);
PARAMETER(WRK.Tare_Weight_Total);
PARAMETER(PAR.Requested_Ship_Date);
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(PAR.Actual_Shipped_Date);
PARAMETER(PAR.Affect_Inventory_Status);
PARAMETER(PAR.Affect_Sales_Doll_Status);
PARAMETER(PAR.Affect_Sales_Pnds_Status);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(WRK.Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Class_Code);
PARAMETER(WRK.Item_Level);
PARAMETER(WRK.Quality_Level);
PARAMETER(WRK.Pricing_Product_Class_Rep);
PARAMETER(WRK.Season_Product_Class_Repo);
PARAMETER(WRK.Date_of_Original_Entry);
PARAMETER(WRK.User_Profile_Name);
PARAMETER(PAR.Country_Code);
PARAMETER(PAR.Event_Code);
PARAMETER(WRK.Reason_Code);
PARAMETER(PAR.Sales_Route_Code);
PARAMETER(WRK.Modified_Flag);
PARAMETER(PAR.Substituted_Flag);
PARAMETER(WRK.OD_Schedule_Override_Sts);
PARAMETER(PAR.Affect_Trade_Fund);
PARAMETER(PAR.Affect_Commission);
PARAMETER(PAR.Affect_Pricing);
PARAMETER(WRK.EDI_Status_1);
PARAMETER(WRK.EDI_Status_2);
PARAMETER(WRK.EDI_Status_3);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Last Order Seq#    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1327551;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Subst_Sequence_Nbr);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.Order Subst Sequence Nbr = PAR.Order Subst Sequence Nbr + CON.1
PAR.Order_Subst_Sequence_Nbr = PAR.Order_Subst_Sequence_Nbr + 1;

EXECUTE FUNCTION(RTV Load,Bill Types    RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1441533;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Load_ID);
PARAMETER(PAR.Load_Type);
PARAMETER(PAR.Billing_Activity_Type);
PARAMETER(LCL.OH_TF_Exempt_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Deadln DepartDT/TM RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1497302;
PARAMETER(LCL.Load_ID);
PARAMETER(LCL.Deadline_Departure_Date);
PARAMETER(LCL.Deadline_Departure_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?set load type
CASE;

// IF PAR.Load Type is Regular
IF PAR.Load_Type = 'R';

// PAR.Variety/Rendered/Cut = CND.Cut
PAR.Variety_Rendered_Cut = 'C';

//?set load type
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Variety/Rendered/Cut = CND.Rendered
PAR.Variety_Rendered_Cut = 'R';

ENDIF;

// PAR.USR Update Flag = CND.No
PAR.USR_Update_Flag = *BLANK;

//?Set program mode
CASE;

// IF PAR.Substituted Flag is Substitutions Exist
IF PAR.Substituted_Flag = 'Y';

// PGM.*Program mode = CND.*CHANGE
PGM.*Program_mode = 'CHG';

//?Set program mode
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

ENDIF;

// Call program Rtv Plant Co/Org      XF.
CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(WRK.Plant_Company_Sts);
PARAMETER(WRK.Company_Organization);

//?USER: Initialize subfile header

MOVE *ALL (To: CTL From: PAR);

// CTL.Item Code = PAR.Item Code
CTL.Item_Code = PAR.Item_Code;

// CTL.Quantity Ordered = PAR.Quantity Ordered
CTL.Quantity_Ordered = PAR.Quantity_Ordered;

// CTL.Quantity Scheduled = PAR.Quantity Scheduled
CTL.Quantity_Scheduled = PAR.Quantity_Scheduled;

// CTL.Warehouse Code = PAR.Warehouse Code
CTL.Warehouse_Code = PAR.Warehouse_Code;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program RTV Item Descript.     XF.
CALL PROGRAM(RTV Item Descript.     XF) ('PDNGXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Item_Description);
PARAMETER(WRK.Description_Line_Two);

EXECUTE FUNCTION(RTV Warehouse          RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1100960;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


// CTL.Condition Desc. 1  USR = Condition name of PAR.Substituted Flag
CTL.Condition_Desc_1_USR = RTVCND(PAR.Substituted_Flag);

// CTL.Deadline Depart Date = LCL.Deadline Departure Date
CTL.Deadline_Depart_Date = LCL.Deadline_Departure_Date;

// CTL.Deadline Departure Time = LCL.Deadline Departure Time
CTL.Deadline_Departure_Time = LCL.Deadline_Departure_Time;

// Call program Rtv Age Information   XF.
CALL PROGRAM(Rtv Age Information   XF) ('PNQCXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(CTL.Item_Age_Days_Fresh);
PARAMETER(CTL.Item_Age_Days_Frozen);

//?USER: Initialize subfile record (existing record)

CASE;

// IF DB1.Order Secondary Line Seq is EQ 1
IF DB1.Order_Secondary_Line_Seq = 1;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.USR Quantity Subeded = DB1.Quantity to Substitute
RCD.USR_Quantity_Subeded = DB1.Quantity_to_Substitute;

ENDIF;

//?FP1309
// RCD.Item Age Days = DB1.Item Age Days
RCD.Item_Age_Days = DB1.Item_Age_Days;

// RCD.Item age days usr = DB1.Item Age Days
RCD.Item_age_days_usr = DB1.Item_Age_Days;

// RCD.Prod OvrAge Frm Usr = DB1.Production Ovr AgeDte Fr
RCD.Prod_OvrAge_Frm_Usr = DB1.Production_Ovr_AgeDte_Fr;

// RCD.Prod OvrAge To Usr = DB1.Production Ovr AgeDte To
RCD.Prod_OvrAge_To_Usr = DB1.Production_Ovr_AgeDte_To;

// LCL.Chilling Time USR = CON.*ZERO
LCL.Chilling_Time_USR = *ZERO;

EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(NLL.Description_Line_One);
PARAMETER(NLL.UOM_Primary);
PARAMETER(NLL.Unit_Weight);
PARAMETER(NLL.Item_Structure_Class_Code);
PARAMETER(NLL.Item_Structure_Group_Code);
PARAMETER(NLL.Item_Structure_Type_Code);
PARAMETER(NLL.Item_Type_Code);
PARAMETER(NLL.Default_Warehouse);
PARAMETER(LCL.Fresh_Chilling_Time);
PARAMETER(NLL.Base_Conv_Loss_Item);
PARAMETER(NLL.Variety_Rendered_Cut);
PARAMETER(NLL.Credit_Item_Status);
PARAMETER(NLL.Std_Weight_Head_Var_Ren);
PARAMETER(NLL.Pieces_Per_Head);
PARAMETER(NLL.Department_Code);
PARAMETER(NLL.Group_for_Packaging);
PARAMETER(NLL.Seconds_Item);
PARAMETER(NLL.Piece_Count_Item);
PARAMETER(NLL.Pieces_Per_Bag);
PARAMETER(NLL.Bags_Per_Unit);
PARAMETER(NLL.Export_Domestic);
PARAMETER(NLL.Print_On_Schedule);
PARAMETER(NLL.Fresh_Inv_Allocation_Seq);
PARAMETER(NLL.Fresh_Sched_As_Ordered);
PARAMETER(NLL.Frozen_Inv_Allocation_Seq);
PARAMETER(NLL.Primal_Group_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(NLL.Warehouse_Type);
PARAMETER(NLL.Trans_Contol_AS400_Plant);
PARAMETER(NLL.Warehouse_Location);
PARAMETER(LCL.Warehouse_Std_Chill_Time);
PARAMETER(LCL.Warehouse_Chill_Time);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Description_Line_One);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Type_Code);
 PARAMETER(PAR.Default_Warehouse);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 PARAMETER(PAR.Variety_Rendered_Cut);
 PARAMETER(PAR.Credit_Item_Status);
 PARAMETER(PAR.Std_Weight_Head_Var_Ren);
 PARAMETER(PAR.Pieces_Per_Head);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Group_for_Packaging);
 PARAMETER(PAR.Seconds_Item);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Export_Domestic);
 PARAMETER(PAR.Print_On_Schedule);
 PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
 PARAMETER(PAR.Fresh_Sched_As_Ordered);
 PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
 PARAMETER(PAR.Primal_Group_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.Trans_Contol_AS400_Plant);
 PARAMETER(PAR.Warehouse_Location);
 PARAMETER(PAR.Warehouse_Std_Chill_Time);
 PARAMETER(PAR.Warehouse_Chill_Time);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


CASE;

// IF LCL.Warehouse Std Chill Time is yes
IF LCL.Warehouse_Std_Chill_Time = 'Y';

// LCL.Chilling Time USR = LCL.Warehouse Chill Time
LCL.Chilling_Time_USR = LCL.Warehouse_Chill_Time;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Chilling Time USR = LCL.Fresh Chilling Time
LCL.Chilling_Time_USR = LCL.Fresh_Chilling_Time;

ENDIF;

// Call program CLC PA Age FrmToDates XF.
CALL PROGRAM(CLC PA Age FrmToDates XF) ('PNO7XFR');
PARAMETER(RCD.Company_Number);
PARAMETER(LCL.Chilling_Time_USR);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(CTL.Requested_Delivery_Date);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);
PARAMETER(RCD.Production_AgeDte_Fr);
PARAMETER(RCD.Production_AgeDte_To);

//?USER: Initialize subfile record (new record)

// RCD.Item Age Days = CON.*ZERO
RCD.Item_Age_Days = *ZERO;

// RCD.Production Ovr AgeDte Fr = CON.*ZERO
RCD.Production_Ovr_AgeDte_Fr = *ZERO;

// RCD.Production Ovr AgeDte To = CON.*ZERO
RCD.Production_Ovr_AgeDte_To = *ZERO;

//?USER: Validate subfile control

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program RTV Item Descript.     XF.
CALL PROGRAM(RTV Item Descript.     XF) ('PDNGXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Item_Description);
PARAMETER(WRK.Description_Line_Two);

// CTL.Condition Desc. 1  USR = Condition name of PAR.Substituted Flag
CTL.Condition_Desc_1_USR = RTVCND(PAR.Substituted_Flag);

//?USER: Validate subfile record fields

//?Increment secondary sequence number (one time only)
CASE;

// IF RCD.Order Secondary Line Seq EQ WRK.ZERO
IF RCD.Order_Secondary_Line_Seq = WRK.ZERO;

// RCD.Order Secondary Line Seq = PAR.Order Subst Sequence Nbr
RCD.Order_Secondary_Line_Seq = PAR.Order_Subst_Sequence_Nbr;

// PAR.Order Subst Sequence Nbr = PAR.Order Subst Sequence Nbr + CON.1
PAR.Order_Subst_Sequence_Nbr = PAR.Order_Subst_Sequence_Nbr + 1;

ENDIF;

// Call program RTV for Ord.Detail     XF.
CALL PROGRAM(RTV for Ord.Detail     XF) ('PDC3XFR');
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Order_Desc_Line_One);
PARAMETER(RCD.Order_Desc_Line_Two);
PARAMETER(RCD.U_M_Ordered);
PARAMETER(RCD.U_M_Base_Price);
PARAMETER(RCD.Unit_Weight_Ordered_U_M);
PARAMETER(RCD.Item_Level);
PARAMETER(RCD.Production_Date_Control);
PARAMETER(RCD.Catch_Weight_Status);
PARAMETER(RCD.Item_Structure_Class_Code);
PARAMETER(RCD.Item_Structure_Group_Code);
PARAMETER(RCD.Item_Structure_Type_Code);
PARAMETER(RCD.Default_Commod_Mark_basis);
PARAMETER(WRK.Transportation_Temp);
PARAMETER(WRK.Item_Type_Code);
PARAMETER(RCD.Commodity_Price_Group);
PARAMETER(WRK.Default_Warehouse);
PARAMETER(WRK.Price_Method_Default);
PARAMETER(WRK.Fresh_Chilling_Time);
PARAMETER(WRK.Variety_Rendered_Cut);
PARAMETER(RCD.OD_Item_Target_Price);
PARAMETER(WRK.Error_Status);

//?Validate Item
CASE;

// IF WRK.Error Status is yes
IF WRK.Error_Status = 'Y';

// Send error message - 'Item Balance not found.'
ERROR(USR0328);
MSGPARM(RCD.Company_Number);
MSGPARM(RCD.Item_Code);
MSGPARM(RCD.Warehouse_Code);

//?Validate Item
// IF WRK.Variety/Rendered/Cut is Rendered
IF WRK.Variety_Rendered_Cut = 'R';

// AND PAR.Load Type is Regular
AND PAR.Load_Type = 'R';

// Send error message - 'Bulk items can not be on regular order type.'
ERROR(USR1881);
MSGPARM(RCD.Item_Code);

//?Validate Item
// IF WRK.Variety/Rendered/Cut is Not Bulk Item
IF WRK.Variety_Rendered_Cut = 'C'/*BLANK/'V';

// AND PAR.Load Type is Bulk
AND PAR.Load_Type = 'B';

// Send error message - 'Bulk items can not be on regular order type.'
ERROR(USR1881);
MSGPARM(RCD.Item_Code);

//?Validate Item
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Val ItmBal.Unit Cst    XF.
CALL PROGRAM(Val ItmBal.Unit Cst    XF) ('PDMCXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(WRK.Unit_Cost_Per_Pound);
PARAMETER(WRK.Error_Status);

//?Error if no item balance or 0 unit cost
CASE;

// IF WRK.Error Status is yes
IF WRK.Error_Status = 'Y';

// Send error message - 'Item Balance not found.'
ERROR(USR0328);
MSGPARM(RCD.Company_Number);
MSGPARM(RCD.Item_Code);
MSGPARM(RCD.Warehouse_Code);

//?Error if no item balance or 0 unit cost
// IF WRK.Unit Cost Per Pound EQ WRK.ZERO
IF WRK.Unit_Cost_Per_Pound = WRK.ZERO;

// Send error message - 'Unit Cost for Warehouse &2 Cannot Be 0'
ERROR(USR2343);
MSGPARM(RCD.Item_Code);
MSGPARM(RCD.Warehouse_Code);

ENDIF;

//?Item must be FG
CASE;

// IF WRK.Item Type Code is Not Finished Good
IF WRK.Item_Type_Code <> 'FG';

// Send error message - 'Ordered Items must be Finished Goods.'
ERROR(USR1941);
MSGPARM(RCD.Item_Code);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

ENDIF;

ENDIF;

// RCD.Palletize = PAR.Palletize
RCD.Palletize = PAR.Palletize;

// RCD.Slip Sheet = PAR.Slip Sheet
RCD.Slip_Sheet = PAR.Slip_Sheet;

EXECUTE FUNCTION(Rtv Whs Typ/FZNCHLTME IF) TYPE(EXCINTFUN)                      AC1423925;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(WRK.Warehouse_Type);
PARAMETER(WRK.Fresh_Chilling_Time);
{
 //?Execute internal function

 EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Warehouse Type is Frozen
 IF PAR.Warehouse_Type = 'FZ';

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(PAR.Company_Number);
 PARAMETER('FZNCHLTME');
 PARAMETER(PAR.System_Value_Numeric);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.Fresh Chilling Time = PAR.System Value Numeric
 PAR.Fresh_Chilling_Time = PAR.System_Value_Numeric;

 ENDIF;

}


//?Default Fresh or Frozen Days from CTL ONLY in *add mode
CASE;

// IF RCD.Production Ovr AgeDte Fr is not entered
IF RCD.Production_Ovr_AgeDte_Fr = *ZERO;

CASE;

// IF RCD.Item Age Days is Not Entered
IF RCD.Item_Age_Days = *ZERO;

CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

CASE;

// IF WRK.Warehouse Type is Fresh
IF WRK.Warehouse_Type = 'FR';

// RCD.Item Age Days = CTL.Item Age Days Fresh
RCD.Item_Age_Days = CTL.Item_Age_Days_Fresh;

// IF WRK.Warehouse Type is Frozen
IF WRK.Warehouse_Type = 'FZ';

// RCD.Item Age Days = CTL.Item Age Days Frozen
RCD.Item_Age_Days = CTL.Item_Age_Days_Frozen;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

EXECUTE FUNCTION(Val Age Information   IF) TYPE(EXCINTFUN)                      AC1984951;
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(CTL.Scheduled_Ship_Date);
PARAMETER(CTL.Requested_Delivery_Date);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);
PARAMETER(RCD.Production_AgeDte_Fr);
PARAMETER(RCD.Production_AgeDte_To);
PARAMETER(LCL.Error_Status);
PARAMETER(WRK.Company_Organization);
PARAMETER('V');
{
 //?Execute internal function

 // WRK.Error Flag            USR = CND.Blank
 WRK.Error_Flag_USR = *BLANK;

 // PAR.Error Status = CND.blank
 PAR.Error_Status = *BLANK;

 // WRK.Error Reason Descript 1 = CON.*BLANK
 WRK.Error_Reason_Descript_1 = *BLANK;

 // WRK.Error Reason Descript 2 = CON.*BLANK
 WRK.Error_Reason_Descript_2 = *BLANK;

 // WRK.Error Reason Descript 3 = CON.*BLANK
 WRK.Error_Reason_Descript_3 = *BLANK;

 // WRK.Error Reason Descript 4 = CON.*BLANK
 WRK.Error_Reason_Descript_4 = *BLANK;

 // WRK.Error Reason Descript 5 = CON.*BLANK
 WRK.Error_Reason_Descript_5 = *BLANK;

 CASE;

 // IF PAR.Company Organization is Seaboard
 IF PAR.Company_Organization = 'S';

 CASE;

 // IF PAR.Requested Delivery Date is not entered
 IF PAR.Requested_Delivery_Date = *ZERO;

 // Send error message - 'Requested Delv Date is required'
 ERROR(USR4329);
 MSGPARM(PAR.Requested_Delivery_Date);

 // IF PAR.Scheduled Ship Date is not entered
 IF PAR.Scheduled_Ship_Date = *ZERO;

 // Send error message - 'Scheduled Ship Date is required when orders are assigned to load.'
 ERROR(USR2230);
 MSGPARM(PAR.Scheduled_Ship_Date);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Val Age information   XF.
 CALL PROGRAM(Val Age information   XF) ('PNQNXFR');
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.Error_Flag_USR);
 PARAMETER(WRK.Error_Reason_Descript_1);
 PARAMETER(WRK.Error_Reason_Descript_2);
 PARAMETER(WRK.Error_Reason_Descript_3);
 PARAMETER(WRK.Error_Reason_Descript_4);
 PARAMETER(WRK.Error_Reason_Descript_5);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(PAR.Item_Age_Days);
 PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
 PARAMETER(PAR.Production_Ovr_AgeDte_To);
 PARAMETER(PAR.Production_AgeDte_Fr);
 PARAMETER(PAR.Production_AgeDte_To);

 //?Verify if message should be sent if validation is required
 CASE;

 // IF WRK.Error Flag            USR is Yes
 IF WRK.Error_Flag_USR = 'Y';

 // AND PAR.Production Dates Sts Usr is Validation routine
 AND PAR.Production_Dates_Sts_Usr = 'V';

 //?message 1 Product is shipped before product is made
 CASE;

 // IF WRK.Error Reason Descript 1 NE WRK.Blank for 30          USR
 IF WRK.Error_Reason_Descript_1 <> WRK.Blank_for_30_USR;

 // Send error message - 'Prd Date is invalid for requested delivery date'
 ERROR(USR4307);
 MSGPARM(PAR.Production_AgeDte_Fr);

 ENDIF;

 //?message 2 Either Days or override date but not both
 CASE;

 // IF WRK.Error Reason Descript 2 NE WRK.Blank for 30          USR
 IF WRK.Error_Reason_Descript_2 <> WRK.Blank_for_30_USR;

 // Send error message - 'Enter Age Days or Dates'
 ERROR(USR4304);
 MSGPARM(PAR.Item_Age_Days);
 MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
 MSGPARM(PAR.Production_Ovr_AgeDte_To);

 ENDIF;

 //?message 3 With Chill Days Either Days or Override Dates required
 CASE;

 // IF WRK.Error Reason Descript 3 NE WRK.Blank for 30          USR
 IF WRK.Error_Reason_Descript_3 <> WRK.Blank_for_30_USR;

 // Send error message - 'Override Dates is after shipped date'
 ERROR(USR4305);
 MSGPARM(PAR.Item_Age_Days);
 MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
 MSGPARM(PAR.Production_Ovr_AgeDte_To);

 ENDIF;

 //?message 4 From date is > then SHIP DATE
 CASE;

 // IF WRK.Error Reason Descript 4 NE WRK.Blank for 30          USR
 IF WRK.Error_Reason_Descript_4 <> WRK.Blank_for_30_USR;

 // Send error message - 'Override Dates is after shipped date'
 ERROR(USR4305);
 MSGPARM(PAR.Item_Age_Days);
 MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
 MSGPARM(PAR.Production_Ovr_AgeDte_To);

 ENDIF;

 //?message 5 To date is > then SHIP DATE
 CASE;

 // IF WRK.Error Reason Descript 5 NE WRK.Blank for 30          USR
 IF WRK.Error_Reason_Descript_5 <> WRK.Blank_for_30_USR;

 // Send error message - 'Override Dates is after shipped date'
 ERROR(USR4305);
 MSGPARM(PAR.Item_Age_Days);
 MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
 MSGPARM(PAR.Production_Ovr_AgeDte_To);

 ENDIF;

 CASE;

 // IF PAR.Production Ovr AgeDte Fr is not entered
 IF PAR.Production_Ovr_AgeDte_Fr = *ZERO;

 // Send error message - 'Invalid Item Age Days'
 ERROR(USR4309);
 MSGPARM(PAR.Item_Age_Days);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send error message - 'Invalid Production Override Age Frm/To Dates'
 ERROR(USR4310);
 MSGPARM(PAR.Production_AgeDte_Fr);
 MSGPARM(PAR.Production_AgeDte_To);

 ENDIF;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Cannot substitute same item
CASE;

// IF RCD.Item Code EQ CTL.Item Code
IF RCD.Item_Code = CTL.Item_Code;

// Send error message - 'Can't substitute same item.'
ERROR(USR2400);
MSGPARM(RCD.Item_Code);

ENDIF;

// RCD.Warehouse Code = CTL.Warehouse Code
RCD.Warehouse_Code = CTL.Warehouse_Code;

// Call program Rtv Plan Prod Sts     XF.
CALL PROGRAM(Rtv Plan Prod Sts     XF) ('PNHKXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.OD_Production_Plan_Sts);

CASE;

// IF CTL.Order Type - Sales is Transfer Order
IF CTL.Order_Type_Sales = 'TR';

// RCD.OD Production Plan Sts = CND.No
RCD.OD_Production_Plan_Sts = 'N';

ENDIF;

//?RMC NEW 11/01/07 THIS PGM WASNT WRITING THE TF ORD EXEMPT CODE
EXECUTE FUNCTION(Rtv Item Def/TFExp    RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC1747888;
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Ord_TF_Exempt_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If not Pre-Commencement, set Tf exempt code   11/01/07 Copy f/PDN6E1R
CASE;

// IF LCL.OH TF Exempt Code is Not Pre-Commencement
IF LCL.OH_TF_Exempt_Code = 'EC'/'EP'/'NE';

CASE;

// IF LCL.OH TF Exempt Code is Exempt Customer
IF LCL.OH_TF_Exempt_Code = 'EC';

CASE;

// IF RCD.Ord TF Exempt Code is Not Exempt
IF RCD.Ord_TF_Exempt_Code = 'NE';

// RCD.Ord TF Exempt Code = CND.Exempt Customer
RCD.Ord_TF_Exempt_Code = 'EC';

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Ord TF Exempt Code = CND.Exempt Product
RCD.Ord_TF_Exempt_Code = 'EP';

ENDIF;

ENDIF;

CASE;

// IF LCL.OH TF Exempt Code is Not Exempt
IF LCL.OH_TF_Exempt_Code = 'NE';

// AND RCD.Ord TF Exempt Code is Exempt Product
AND RCD.Ord_TF_Exempt_Code = 'EP';

// LCL.OH TF Exempt Code = CND.Exempt Product
LCL.OH_TF_Exempt_Code = 'EP';

ENDIF;

//?If not Pre-Commencement, set Tf exempt code   11/01/07 Copy f/PDN6E1R
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Ord TF Exempt Code = CND.Pre Commencement
RCD.Ord_TF_Exempt_Code = 'PC';

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(UPD Crt Substitution   IF) TYPE(EXCINTFUN) FILE(OPBGWKP)       AC1440921;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(RCD.Order_Group_Code);
PARAMETER('E');
PARAMETER(WRK.Detail_Line_Status_Last);
PARAMETER(RCD.USR_Quantity_Subeded);
PARAMETER(PAR.Comment_Print_Acknowledge);
PARAMETER(PAR.Comment_Print_Inv_Cr_Memo);
PARAMETER(PAR.Comment_Print_Pick_Slip);
PARAMETER(PAR.Comment_Print_Ship_Doc);
PARAMETER('U');
PARAMETER(RCD.U_M_Base_Price);
PARAMETER(RCD.U_M_Ordered);
PARAMETER(RCD.OD_Production_Plan_Sts);
PARAMETER(RCD.Order_Desc_Line_One);
PARAMETER(RCD.Order_Desc_Line_Two);
PARAMETER(*BLANK);
PARAMETER(PAR.Palletize);
PARAMETER(PAR.Slip_Sheet);
PARAMETER(RCD.Catch_Weight_Status);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(RCD.Production_Date_Control);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(RCD.Unit_Weight_Ordered_U_M);
PARAMETER(PAR.Requested_Ship_Date);
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(PAR.Actual_Shipped_Date);
PARAMETER(PAR.Affect_Inventory_Status);
PARAMETER(PAR.Affect_Sales_Doll_Status);
PARAMETER(PAR.Affect_Sales_Pnds_Status);
PARAMETER(RCD.Item_Structure_Type_Code);
PARAMETER(RCD.Item_Structure_Group_Code);
PARAMETER(RCD.Item_Structure_Class_Code);
PARAMETER(RCD.Item_Level);
PARAMETER(RCD.Quality_Level);
PARAMETER(PAR.Country_Code);
PARAMETER(PAR.Event_Code);
PARAMETER(PAR.Sales_Route_Code);
PARAMETER(PAR.Affect_Trade_Fund);
PARAMETER(PAR.Affect_Commission);
PARAMETER(PAR.Affect_Pricing);
PARAMETER(RCD.Ord_TF_Exempt_Code);
PARAMETER(LCL.Deadline_Departure_Date);
PARAMETER(LCL.Deadline_Departure_Time);
PARAMETER(RCD.OD_Item_Target_Price);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);
PARAMETER(RCD.Default_Commod_Mark_basis);
PARAMETER(RCD.Commodity_Price_Group);
PARAMETER(PAR.Billing_Activity_Type);
{
 //?Execute internal function

 // PAR.USR Weight = PAR.Unit Weight Ordered U/M * PAR.Quantity to Substitute *
 PAR.USR_Weight = PAR.Unit_Weight_Ordered_U_M * PAR.Quantity_to_Substitute;

 CASE;

 // IF PAR.OD Production Plan Sts is Yes
 IF PAR.OD_Production_Plan_Sts = *BLANK;

 // Call program UPD Avail-To-Sell  ORD XF.
 CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Requested_Ship_Date);
 PARAMETER(PAR.Quantity_to_Substitute);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Quantity_Scheduled);
 PARAMETER(PAR.Weight_Scheduled);
 PARAMETER('OA');
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(PAR.Item_Age_Days);
 PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
 PARAMETER(PAR.Production_Ovr_AgeDte_To);

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?fp1054 new 6/17/09
 // PAR.Quantity Scheduled = PAR.Quantity to Substitute
 PAR.Quantity_Scheduled = PAR.Quantity_to_Substitute;

 // PAR.Weight Scheduled = PAR.USR Weight
 PAR.Weight_Scheduled = PAR.USR_Weight;

 ENDIF;

 //?If manual pricing and not a transfer order, check price range
 CASE;

 // IF PAR.Billing Activity Type is Not Warehouse Transfer
 IF PAR.Billing_Activity_Type = '2'/'3'/'1';

 EXECUTE FUNCTION(Val Manual Price      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1581694;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Description_Line_One);
 PARAMETER(LCL.Default_Commod_Mark_basis);
 PARAMETER(LCL.Market_Overage);
 PARAMETER(LCL.Standard_Overage_Underage);
 PARAMETER(LCL.Commodity_Price_Group);
 PARAMETER(LCL.Std_Weight_Head_Var_Ren);
 PARAMETER(LCL.Primal_Group_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?R12926 DN 05/02/18-At Order level, get Absorbed Freight Rate from OH.
 EXECUTE FUNCTION(RTV AbsFrtRt/Type Cde  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1582615;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(LCL.Type_Code);
 PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Absorbed Frt Rate RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2149231;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.Absorbed_Freight_Rate_CWT);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Primal Group Code is NE Samples or Cut Loss
 IF LCL.Primal_Group_Code <> 'UNID';

 // AND LCL.Type Code is Not Promotional/Samples
 AND LCL.Type_Code <> 'PS';

 EXECUTE FUNCTION(VAL Manual Price Range IF) TYPE(EXCINTFUN)                     AC1414607;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Default_Commod_Mark_basis);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(WRK.Projected_Market_Price);
 PARAMETER(PAR.Default_Commod_Mark_basis);
 PARAMETER(LCL.Market_Overage);
 PARAMETER(WRK.Error_Status_3);
 PARAMETER(LCL.Minimum_Price_USR);
 PARAMETER(LCL.Maximum_Price_USR);
 PARAMETER(LCL.Absorbed_Freight_Rate_CWT);
 {
  //?Execute internal function

  //?*---------------------------------------------------------------*
  //?Documentation:
  //?This internal function will determine if a manual price entered
  //?on an order detail line is within the Manual Pricing Acceptance
  //?Percentage from the Company Control file. If it does not fall
  //?within the percentage range then the market price will be used.
  //?If no market price is found then it is a manual price error
  //?*---------------------------------------------------------------*
  // PAR.Projected Market Price = CON.*ZERO
  PAR.Projected_Market_Price = *ZERO;

  // PAR.Minimum Price   USR = CON.*ZERO
  PAR.Minimum_Price_USR = *ZERO;

  // PAR.Maximum Price  USR = CON.*ZERO
  PAR.Maximum_Price_USR = *ZERO;

  // PAR.Error Status  3 = CND.Yes
  PAR.Error_Status_3 = 'Y';

  EXECUTE FUNCTION(RTV Manual Price Accpt RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1414604;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Manual_Price_Accept_Prcnt);
  PARAMETER(PAR.CoPk_FdSrv_ManPrc_Acpt_PT);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Food Service and Co-Pack Items
  CASE;

  // IF PAR.Default Commod Mark basis is Food Service
  IF PAR.Default_Commod_Mark_basis = 'FSV';

  // OR PAR.Default Commod Mark basis is Co-Pack
  OR PAR.Default_Commod_Mark_basis = 'CPK';

  // PAR.Manual Price Accept Prcnt = PAR.CoPk/FdSrv ManPrc Acpt%
  PAR.Manual_Price_Accept_Prcnt = PAR.CoPk_FdSrv_ManPrc_Acpt_PT;

  ENDIF;

  EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
  PARAMETER(PAR.Commodity_Market_Code);
  PARAMETER(PAR.Commodity_Price_Group);
  PARAMETER(9999999);
  PARAMETER(PAR.Projected_Market_Price);
  PARAMETER(WRK.USR_Date_Priced);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.Commodity Market Price = DB1.Commodity Market Price
   PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

   // PAR.USR Date Priced = DB1.Market Price Date
   PAR.USR_Date_Priced = DB1.Market_Price_Date;

   QUIT;

  }

  // Projected Market Price
  PAR.Projected_Market_Price = ( PAR.Projected_Market_Price
  + PAR.Standard_Overage_Underage ) + ( PAR.Absorbed_Freight_Rate_CWT / 100 'H' );

  //?If a market price is found for co/cust market code default
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // Minimum price allowed
  PAR.Minimum_Price_USR = ( 1 - ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) )
  * PAR.Projected_Market_Price 'H';

  // Maximum price allowed
  PAR.Maximum_Price_USR = ( ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) + 1 )
  * PAR.Projected_Market_Price 'H';

  //?If the Price Override is within the range then error status is no
  CASE;

  // IF PAR.Price Overage Override GE PAR.Minimum Price   USR
  IF PAR.Price_Overage_Override >= PAR.Minimum_Price_USR;

  // AND PAR.Price Overage Override LE PAR.Maximum Price  USR
  AND PAR.Price_Overage_Override <= PAR.Maximum_Price_USR;

  // PAR.Error Status  3 = CND.No
  PAR.Error_Status_3 = 'N';

  ENDIF;

  //?If a market price is found for co/cust market code default
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?If no price for co/cust market code then use co/item market code
  EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
  PARAMETER(PAR.Default_Commod_Mark_basis);
  PARAMETER(PAR.Commodity_Price_Group);
  PARAMETER(9999999);
  PARAMETER(PAR.Projected_Market_Price);
  PARAMETER(WRK.USR_Date_Priced);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.Commodity Market Price = DB1.Commodity Market Price
   PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

   // PAR.USR Date Priced = DB1.Market Price Date
   PAR.USR_Date_Priced = DB1.Market_Price_Date;

   QUIT;

  }

  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // Minimum price allowed
  PAR.Minimum_Price_USR = ( PAR.Manual_Price_Accept_Prcnt / 100 'H' )
  * PAR.Projected_Market_Price 'H';

  // Maximum price allowed
  PAR.Maximum_Price_USR = ( ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) + 1 )
  * PAR.Projected_Market_Price 'H';

  //?If the Price Override is within the range then error status is no
  CASE;

  // IF PAR.Price Overage Override GE PAR.Minimum Price   USR
  IF PAR.Price_Overage_Override >= PAR.Minimum_Price_USR;

  // AND PAR.Price Overage Override LE PAR.Maximum Price  USR
  AND PAR.Price_Overage_Override <= PAR.Maximum_Price_USR;

  // PAR.Error Status  3 = CND.No
  PAR.Error_Status_3 = 'N';

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Projected Market Price = CON.*ZERO
  PAR.Projected_Market_Price = *ZERO;

  ENDIF;

  ENDIF;

 }

 ENDIF;

 ENDIF;

 //?RMC 11/01/07 output Tf Ord Exempt code-- it was going out BLANK
 //?     so call this other crt that updates the header too
 EXECUTE FUNCTION(CRT Ship Det'l frm Ord CR) TYPE(CRTOBJ) FILE(OPBGWKP)          AC1306536;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Order_Group_Code);
 PARAMETER(PAR.Detail_Line_Status);
 PARAMETER(PAR.Detail_Line_Status_Last);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Quantity_to_Substitute);
 PARAMETER(PAR.Comment_Print_Acknowledge);
 PARAMETER(PAR.Comment_Print_Inv_Cr_Memo);
 PARAMETER(PAR.Comment_Print_Pick_Slip);
 PARAMETER(PAR.Comment_Print_Ship_Doc);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('U');
 PARAMETER(*ZERO);
 PARAMETER(PAR.U_M_Base_Price);
 PARAMETER(PAR.U_M_Ordered);
 PARAMETER(WRK.Work_Confirm_Status);
 PARAMETER(WRK.Work_Over_Short_Status);
 PARAMETER(PAR.OD_Production_Plan_Sts);
 PARAMETER(PAR.Order_Desc_Line_One);
 PARAMETER(WRK.Order_Desc_Line_Two);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Palletize);
 PARAMETER(PAR.Slip_Sheet);
 PARAMETER(PAR.Catch_Weight_Status);
 PARAMETER(PAR.Price_Audit);
 PARAMETER(PAR.Price_Audit_Reason_Code);
 PARAMETER(PAR.Production_Date_Control);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Quantity_Scheduled);
 PARAMETER(PAR.Weight_Scheduled);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Projected_Market_Price);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Requested_Ship_Date);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER(PAR.Affect_Inventory_Status);
 PARAMETER(PAR.Affect_Sales_Doll_Status);
 PARAMETER(PAR.Affect_Sales_Pnds_Status);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Level);
 PARAMETER(PAR.Quality_Level);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*USER);
 PARAMETER(PAR.Country_Code);
 PARAMETER(PAR.Event_Code);
 PARAMETER(WRK.Reason_Code);
 PARAMETER(PAR.Sales_Route_Code);
 PARAMETER(*BLANK);
 PARAMETER(WRK.Substituted_Flag);
 PARAMETER(WRK.OD_Schedule_Override_Sts);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(WRK.OD_Adj_Type_Override);
 PARAMETER(PAR.Affect_Trade_Fund);
 PARAMETER(PAR.Affect_Commission);
 PARAMETER(PAR.Affect_Pricing);
 PARAMETER(WRK.Released_by_User_Sts_Y_N);
 PARAMETER(PAR.Ord_TF_Exempt_Code);
 PARAMETER(WRK.OD_Pallet_Type);
 PARAMETER(WRK.Production_Warehouse);
 PARAMETER(WRK.OD_Price_Type);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Deadline_Depart_Date_LH);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Deadline_Depart_Time_LH);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.OD_Item_Target_Price);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Item_Age_Days);
 PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
 PARAMETER(PAR.Production_Ovr_AgeDte_To);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(WRK.EDI_Status_1);
 PARAMETER(WRK.EDI_Status_2);
 PARAMETER(WRK.EDI_Status_3);
 PARAMETER(JOB.*Job_time);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(JOB.*Job_date);
 PARAMETER(WRK.Export_Status);
 {
  //?USER: Processing before Data update

  // DB1.Age Code = CND.Blank
  DB1.Age_Code = *BLANK;

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program Rtv First Consumed Itm XF.
  CALL PROGRAM(Rtv First Consumed Itm XF) ('POP1XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Consumed_Item_Code);

  EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Production_Warehouse);
  PARAMETER(NLL.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(Rtv/Crt Dflt f/OrdDtl  RT) TYPE(RTVOBJ) FILE(PDMMREP)          AC1612748;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Country_Code);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Extended_Amount);
  PARAMETER(DB1.U_M_Ordered);
  PARAMETER(DB1.Quantity_Scheduled);
  PARAMETER(DB1.Weight_Scheduled);
  PARAMETER(DB1.Quantity_Shipped_Total);
  PARAMETER(DB1.Weight_Shipped_Total);
  PARAMETER(DB1.Unit_Price);
  {
   //?USER: Initialize routine

   //?RMC 02/06/17 R9126 CANadian unstamped text
   //?RMC 08/14/07 RTV COMPANY value to determine if item desc on form
   //?            is the item description or item label+item code
   //?N = Not special -- use item description
   //?Y = Yes Special -- use item label+item code
   // Call program Rtv Alpha Value       XF.
   CALL PROGRAM(Rtv Alpha Value       XF) ('POMTXFR');
   PARAMETER(PAR.Company_Number);
   PARAMETER('MPGITEM');
   PARAMETER(LCL.Status_Flag_1_Y_N);

   //?DO2642 DN 11/15/22-Initialize.
   // LCL.First Time Through USR = CND.Yes
   LCL.First_Time_Through_USR = 'Y';

   //?USER: Process Data record

   //?11/15/22 DN DO2642-Get/Save Live with PHIS Flag from Doc Type 'A'.
   CASE;

   // IF DB1.ED Export Document Type is Application for Export
   IF DB1.ED_Export_Document_Type = 'A';

   // AND LCL.First Time Through USR is Yes
   AND LCL.First_Time_Through_USR = 'Y';

   // LCL.First Time Through USR = CND.No
   LCL.First_Time_Through_USR = 'N';

   // LCL.ED Live with PHIS = DB1.ED Live with PHIS
   LCL.ED_Live_with_PHIS = DB1.ED_Live_with_PHIS;

   ENDIF;

   //?12/26/18 DN R13944-Save 'Translate Desc' Flag from Doc Type A.
   CASE;

   // IF DB1.ED Export Document Type is Application for Export
   IF DB1.ED_Export_Document_Type = 'A';

   // AND NOT DB1.ED Xlate Desc to Country is Not Entered
   AND ! DB1.ED_Xlate_Desc_to_Country = *BLANK;

   // PAR.ED Xlate Desc to Country = DB1.ED Xlate Desc to Country
   PAR.ED_Xlate_Desc_to_Country = DB1.ED_Xlate_Desc_to_Country;

   ENDIF;

   //?Create Detail if required for the document.
   CASE;

   // IF DB1.ED Export Document Type is Health Certificate
   IF DB1.ED_Export_Document_Type = 'H';

   // OR DB1.ED Export Document Type is Customs Invoice
   OR DB1.ED_Export_Document_Type = 'C';

   // OR DB1.Country Code is China
   OR DB1.Country_Code = 'CHN';

   // OR DB1.Country Code is Hong Kong
   OR DB1.Country_Code = 'HKG';

   // OR DB1.Country Code is Australia
   OR DB1.Country_Code = 'AUS';

   // OR DB1.Country Code is Russia
   OR DB1.Country_Code = 'RUS';

   EXECUTE FUNCTION(RTV for Exp Document   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1529231;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.ED_Item_Label_Line_1);
   PARAMETER(PAR.ED_Item_Label_Line_2);
   PARAMETER(WRK.ED_Item_Label_Line_1);
   PARAMETER(WRK.ED_Item_Label_Line_2);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(WRK.Piece_Count_Item);
   PARAMETER(PAR.ED_Pieces_per_Bag);
   PARAMETER(PAR.ED_Bags_per_Unit);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   //?DO2642 DN 06/21/22-Commented Out Old Method of Item Label Formatting.
   //?DO2642 DN 06/21/22-New Method of Item Label Formatting.
   CASE;

   // IF LCL.Status Flag 1  Y/N is Yes
   IF LCL.Status_Flag_1_Y_N = 'Y';

   //?DO2642 DN 11/15/22-Pass in ED Live with PHIS.
   EXECUTE FUNCTION(Fmt Item Label Line1&2 IF) TYPE(EXCINTFUN)                     AC2205984;
   PARAMETER(DB1.Country_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(WRK.ED_Item_Label_Line_1);
   PARAMETER(WRK.ED_Item_Label_Line_2);
   PARAMETER(LCL.ED_Live_with_PHIS);
   PARAMETER(PAR.ED_Item_Label_Line_1);
   PARAMETER(PAR.ED_Item_Label_Line_2);
   {
    //?Execute internal function

    //?Initialize.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.ED Item Label Line 1 USR = CND.Not Entered
    PAR.ED_Item_Label_Line_1_USR = *BLANK;

    // PAR.ED Item Label Line 2 USR = CND.Not Entered
    PAR.ED_Item_Label_Line_2_USR = *BLANK;

    // LCL.Item Label Line Info USR = CND.Not Entered
    LCL.Item_Label_Line_Info_USR = *BLANK;

    // LCL.Position 33 Text USR = CND.Not Entered
    LCL.Position_33_Text_USR = *BLANK;

    // LCL.Last 6 Bytes USR = CND.Not Entered
    LCL.Last_6_Bytes_USR = *BLANK;

    ENDIF;

    //?Format Item Label Line 1 & 2 with Item Code at the End if Spaces Avail.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?DO2642 DN 11/14/22-Removed 'Chilled/Frozen' Text if Exist.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.ED Item Label Line 1 = PAR.ED Item Label Line 1
    LCL.ED_Item_Label_Line_1 = PAR.ED_Item_Label_Line_1;

    // LCL.ED Chilled/Frozen Text = SUBSTRING(PAR.ED Item Label Line 1,CON.1,CON.7)
    LCL.ED_Chilled_Frozen_Text = SUBSTRING(PAR.ED_Item_Label_Line_1:1:7);

    //?Chilled Text Exist?
    CASE;

    // IF LCL.ED Chilled/Frozen Text is Chilled
    IF LCL.ED_Chilled_Frozen_Text = 'Chilled';

    // OR LCL.ED Chilled/Frozen Text is CHILLED All Caps
    OR LCL.ED_Chilled_Frozen_Text = 'CHILLED';

    // LCL.ED Item Label Line 1 = SUBSTRING(LCL.ED Item Label Line 1,CON.9,CON.24)
    LCL.ED_Item_Label_Line_1 = SUBSTRING(LCL.ED_Item_Label_Line_1:9:24);

    ENDIF;

    //?Frozen Text Exist?
    CASE;

    // IF LCL.ED Chilled/Frozen Text is Frozen
    IF LCL.ED_Chilled_Frozen_Text = 'Frozen';

    // OR LCL.ED Chilled/Frozen Text is FROZEN All Caps
    OR LCL.ED_Chilled_Frozen_Text = 'FROZEN';

    // LCL.ED Item Label Line 1 = SUBSTRING(LCL.ED Item Label Line 1,CON.8,CON.25)
    LCL.ED_Item_Label_Line_1 = SUBSTRING(LCL.ED_Item_Label_Line_1:8:25);

    ENDIF;

    ENDIF;

    //?Concat Item Label Line 1 & 2 and append the Item Code at the end if
    //?there is 6 available spaces left. If no space avail for Item Code,
    //?Business must manually update this info in PHIS.
    //?W116174 DN 12/12/22-Undo word wrapping & word splitting. Commented out.
    //?Values with more than 64 characters will be truncated. Business agrees.
    //?W116174 DN 12/12/22-Undo word wrapping & word splitting. Commented out.
    //?W116174 DN 12/12/22-Populate Item Label Lines as is.
    // PAR.ED Item Label Line 1 USR = LCL.ED Item Label Line 1
    PAR.ED_Item_Label_Line_1_USR = LCL.ED_Item_Label_Line_1;

    // PAR.ED Item Label Line 2 USR = PAR.ED Item Label Line 2
    PAR.ED_Item_Label_Line_2_USR = PAR.ED_Item_Label_Line_2;

    //?DO2642 DN 11/15/22-Do Not Concat Item Code if Country is Live with PHIS=Y.
    CASE;

    // IF PAR.ED Live with PHIS is yes
    IF PAR.ED_Live_with_PHIS = 'Y';

    //?DO2642 DN 11/15/22-Do Not Concat Item Code if Country is Live with PHIS=Y.
    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Convert Item Code to Alpha.
    // LCL.Item Code 5.0 = PAR.ED Item Code
    LCL.Item_Code_5_0 = PAR.ED_Item_Code;

    // LCL.Item Code 5A = CVTVAR(LCL.Item Code 5.0)
    LCL.Item_Code_5A = CVTVAR(LCL.Item_Code_5_0);

    //?Check Label Line 1 Last 6 Bytes is Blank Else Check Label Line 2.
    CASE;

    // IF PAR.ED Item Label Line 2 USR is Not Entered
    IF PAR.ED_Item_Label_Line_2_USR = *BLANK;

    // LCL.Last 6 Bytes USR = SUBSTRING(PAR.ED Item Label Line 1 USR,CON.27,CON.6)
    LCL.Last_6_Bytes_USR = SUBSTRING(PAR.ED_Item_Label_Line_1_USR:27:6);

    //?Append Item Code to Label Line 1 Else Line 2.
    CASE;

    // IF LCL.Last 6 Bytes USR is Not Entered
    IF LCL.Last_6_Bytes_USR = *BLANK;

    // PAR.ED Item Label Line 1 USR = CONCAT(PAR.ED Item Label Line 1 USR,LCL.Item Code 5A,CON.1)
    PAR.ED_Item_Label_Line_1_USR = PAR.ED_Item_Label_Line_1_USR + LCL.Item_Code_5A (1);

    //?Append Item Code to Label Line 1 Else Line 2.
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.ED Item Label Line 2 USR = LCL.Item Code 5A
    PAR.ED_Item_Label_Line_2_USR = LCL.Item_Code_5A;

    ENDIF;

    //?Check Label Line 1 Last 6 Bytes is Blank Else Check Label Line 2.
    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Check Label Line 2 Last 6 Bytes.
    // LCL.Last 6 Bytes USR = SUBSTRING(PAR.ED Item Label Line 2 USR,CON.27,CON.6)
    LCL.Last_6_Bytes_USR = SUBSTRING(PAR.ED_Item_Label_Line_2_USR:27:6);

    //?Append Item Code to Label Line 2 Else Truncate Item Code.
    CASE;

    // IF LCL.Last 6 Bytes USR is Not Entered
    IF LCL.Last_6_Bytes_USR = *BLANK;

    // PAR.ED Item Label Line 2 USR = CONCAT(PAR.ED Item Label Line 2 USR,LCL.Item Code 5A,CON.1)
    PAR.ED_Item_Label_Line_2_USR = PAR.ED_Item_Label_Line_2_USR + LCL.Item_Code_5A (1);

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

   }

   ENDIF;

   EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(LCL.Warehouse_Type);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // PAR.ED Product UOM = CON.Lbs
   PAR.ED_Product_UOM = 'Lbs';

   //?NEW Package type for FSIS V2
   CASE;

   // IF PAR.U/M - Ordered is Combos
   IF PAR.U_M_Ordered = 'CB';

   // PAR.ED Product Pkg Type = CND.COMBO
   PAR.ED_Product_Pkg_Type = 'COM';

   //?NEW Package type for FSIS V2
   // IF PAR.U/M - Ordered is Cases
   IF PAR.U_M_Ordered = 'CS';

   // PAR.ED Product Pkg Type = CND.CASE
   PAR.ED_Product_Pkg_Type = 'CS';

   //?NEW Package type for FSIS V2
   // IF PAR.U/M - Ordered is EQ Boxes
   IF PAR.U_M_Ordered = 'BX';

   // PAR.ED Product Pkg Type = CND.Box
   PAR.ED_Product_Pkg_Type = 'BX';

   //?NEW Package type for FSIS V2
   // IF PAR.U/M - Ordered is Each
   IF PAR.U_M_Ordered = 'EA';

   // PAR.ED Product Pkg Type = CND.Box
   PAR.ED_Product_Pkg_Type = 'BX';

   //?NEW Package type for FSIS V2
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.ED Product Pkg Type = CND.Box
   PAR.ED_Product_Pkg_Type = 'BX';

   ENDIF;

   //?RMC 5/24/18 for FSIS V2 - Set HACCP Code
   DO;

   // LCL.Position = CON.*ZERO
   LCL.Position = *ZERO;

   // LCL.Position USR = CON.*ZERO
   LCL.Position_USR = *ZERO;

   EXECUTE FUNCTION(Rtv Class             RT) TYPE(RTVOBJ) FILE(PBBNREP)           AC2151832;
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.DP_Product_Class);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // LCL.Search Text USR = LCL.DP Product Class
   LCL.Search_Text_USR = LCL.DP_Product_Class;

   // LCL.Search Pattern USR = CON.Ground
   LCL.Search_Pattern_USR = 'Ground';

   // LCL.Scan Length USR = CON.6
   LCL.Scan_Length_USR = 6;

   // LCL.Start Position USR = CON.1
   LCL.Start_Position_USR = 1;

   // Execute function Scn Text              US.
   EXECUTE FUNCTION(Scn Text              US) TYPE(EXCUSRSRC) ('PPB8UFR');
   PARAMETER(LCL.Scan_Length_USR);
   PARAMETER(LCL.Start_Position_USR);
   PARAMETER(LCL.Search_Pattern_USR);
   PARAMETER(LCL.Search_Text_USR);
   PARAMETER(LCL.Position_USR);
   {
    C                     Z-ADD*ZEROS    POS     50
    C                     MOVE #ILN      LEN     50
    C                     MOVE #IST      ST      50
    C           #IPTN:LEN SCAN #IDTA:ST  POS
    C                     MOVE POS       #OU3NX
   }

   // LCL.Search Pattern USR = CON.Diced
   LCL.Search_Pattern_USR = 'Diced';

   // LCL.Scan Length USR = CON.5
   LCL.Scan_Length_USR = 5;

   // LCL.Start Position USR = CON.1
   LCL.Start_Position_USR = 1;

   // Execute function Scn Text              US.
   EXECUTE FUNCTION(Scn Text              US) TYPE(EXCUSRSRC) ('PPB8UFR');
   PARAMETER(LCL.Scan_Length_USR);
   PARAMETER(LCL.Start_Position_USR);
   PARAMETER(LCL.Search_Pattern_USR);
   PARAMETER(LCL.Search_Text_USR);
   PARAMETER(LCL.Position);
   {
    C                     Z-ADD*ZEROS    POS     50
    C                     MOVE #ILN      LEN     50
    C                     MOVE #IST      ST      50
    C           #IPTN:LEN SCAN #IDTA:ST  POS
    C                     MOVE POS       #OU3NX
   }

   CASE;

   // IF LCL.Position USR is Greater than zero
   IF LCL.Position_USR > *ZERO;

   // OR LCL.Position is Greater than zero
   OR LCL.Position > *ZERO;

   // LCL.ED HACCP Category = CND.Raw Product-Ground (03B)
   LCL.ED_HACCP_Category = '03B';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.ED HACCP Category = CND.Raw Product-Nt Grnd(03C)
   LCL.ED_HACCP_Category = '03C';

   ENDIF;

   ENDDO;

   // PAR.ED Product Net Weight lbs = PAR.Weight Shipped Total
   PAR.ED_Product_Net_Weight_lbs = PAR.Weight_Shipped_Total;

   // PAR.ED Product Net Weight MT = PAR.Weight Shipped Total / CON.2204.6 *
   PAR.ED_Product_Net_Weight_MT = PAR.Weight_Shipped_Total / 2204.6;

   // PAR.ED Product Nbr of Pkgs = PAR.Quantity Shipped Total
   PAR.ED_Product_Nbr_of_Pkgs = PAR.Quantity_Shipped_Total;

   // PAR.ED Nbr of Packages = PAR.ED Nbr of Packages + PAR.Quantity Shipped Total
   PAR.ED_Nbr_of_Packages = PAR.ED_Nbr_of_Packages + PAR.Quantity_Shipped_Total;

   // Compute: Total Nbr Pieces
   PAR.ED_Total_Nbr_of_Pieces = PAR.Quantity_Shipped_Total * ( PAR.ED_Pieces_per_Bag
   * PAR.ED_Bags_per_Unit );

   // PAR.ED Product Unit Price = PAR.Unit Price
   PAR.ED_Product_Unit_Price = PAR.Unit_Price;

   // PAR.ED Producet Extended Amt = PAR.Extended Amount
   PAR.ED_Producet_Extended_Amt = PAR.Extended_Amount;

   CASE;

   // IF PAR.Item Structure Group Code is Edible Rendering
   IF PAR.Item_Structure_Group_Code = 755;

   // OR PAR.Item Structure Class Code is EQ 772
   OR PAR.Item_Structure_Class_Code = 772;

   EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
   PARAMETER(DB1.Company_Number);
   PARAMETER('PLTESTNO');
   PARAMETER(PAR.ED_Plant_Number_Dtl);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // PAR.ED Chilled/Frozen Text = CON.*BLANK
   PAR.ED_Chilled_Frozen_Text = *BLANK;

   // IF LCL.Warehouse Type is Fresh
   IF LCL.Warehouse_Type = 'FR';

   EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
   PARAMETER(DB1.Company_Number);
   PARAMETER('PLTESTNO');
   PARAMETER(PAR.ED_Plant_Number_Dtl);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?DO2642 DN 10/13/22-Use Uppercase.
   // PAR.ED Chilled/Frozen Text = CON.CHILLED
   PAR.ED_Chilled_Frozen_Text = 'CHILLED';

   // IF LCL.Warehouse Type is Frozen
   IF LCL.Warehouse_Type = 'FZ';

   EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
   PARAMETER(DB1.Company_Number);
   PARAMETER('FZESTNO');
   PARAMETER(PAR.ED_Plant_Number_Dtl);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?DO2642 DN 10/13/22-Use Uppercase.
   // PAR.ED Chilled/Frozen Text = CON.FROZEN
   PAR.ED_Chilled_Frozen_Text = 'FROZEN';

   ENDIF;

   // PAR.ED Unmarked Txt = CON.Unmarked
   PAR.ED_Unmarked_Txt = 'Unmarked';

   CASE;

   // IF DB1.Company Number is Guymon
   IF DB1.Company_Number = 360;

   // AND DB1.Country Code is Canada
   AND DB1.Country_Code = 'CAN';

   // PAR.ED Unmarked Txt = CON.Unstamped
   PAR.ED_Unmarked_Txt = 'Unstamped';

   ENDIF;

   // PAR.ED Product UOM = CON.lbs
   PAR.ED_Product_UOM = 'lbs';

   //?Calculate Gross Weight
   EXECUTE FUNCTION(Rtv Tare Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1228249;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(LCL.Misc_Tare_Weight);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   //?Misc Tare Weight
   CASE;

   // IF PAR.Header Status is Confirmed & Complete
   IF PAR.Header_Status = 'C'/'R';

   // LCL.Misc Tare Weight = LCL.Misc Tare Weight * PAR.Quantity Shipped Total *
   LCL.Misc_Tare_Weight = LCL.Misc_Tare_Weight * PAR.Quantity_Shipped_Total;

   //?Misc Tare Weight
   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Misc Tare Weight = LCL.Misc Tare Weight * PAR.Quantity Scheduled *
   LCL.Misc_Tare_Weight = LCL.Misc_Tare_Weight * PAR.Quantity_Scheduled;

   ENDIF;

   //?Find Box weight for the Item and Subtract for final tare weight
   // LCL.Unit Weight = CON.*ZERO
   LCL.Unit_Weight = *ZERO;

   //?Gross Weight
   CASE;

   // IF PAR.Header Status is Confirmed & Complete
   IF PAR.Header_Status = 'C'/'R';

   //?Calculate Gross Weight
   CASE;

   // IF PAR.Weight Shipped Total NE WRK.ZERO
   IF PAR.Weight_Shipped_Total <> WRK.ZERO;

   // LCL.Gross Weight USR 9.1 = LCL.Gross Weight USR 9.1 + LCL.Misc Tare Weight
   LCL.Gross_Weight_USR_9_1 = LCL.Gross_Weight_USR_9_1 + LCL.Misc_Tare_Weight;

   EXECUTE FUNCTION(RTV Item Box Tare Wgt  RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC1379982;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.Unit_Weight);
   {
    //?USER: Initialize routine

    // PAR.Unit Weight = CON.*ZERO
    PAR.Unit_Weight = *ZERO;

    //?USER: Process Data record

    // PAR.Unit Weight = CON.*ZERO
    PAR.Unit_Weight = *ZERO;

    EXECUTE FUNCTION(RTV Type/Pack/Unit Wgt RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1379988;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Component_Item_Code);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Package_Type_Code);
    {
     //?USER: Processing if Data record not found

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

     // PGM.*Return code = CND.*Normal
     PGM.*Return_code = *BLANK;

    }

    CASE;

    // IF PAR.Item Type Code is Packaging and Supplies
    IF PAR.Item_Type_Code = 'PS';

    // AND PAR.Package Type Code is Box
    AND PAR.Package_Type_Code = 'B';

    QUIT;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Unit Weight = CON.*ZERO
    PAR.Unit_Weight = *ZERO;

    ENDIF;

    //?USER: Exit processing

    // PAR.Unit Weight = PAR.Unit Weight USR
    PAR.Unit_Weight = PAR.Unit_Weight_USR;

   }

   // LCL.Unit Weight = PAR.Quantity Shipped Total * LCL.Unit Weight *Rounded
   LCL.Unit_Weight = PAR.Quantity_Shipped_Total * LCL.Unit_Weight 'H';

   // LCL.Gross Weight USR 9.1 = LCL.Gross Weight USR 9.1 + LCL.Unit Weight
   LCL.Gross_Weight_USR_9_1 = LCL.Gross_Weight_USR_9_1 + LCL.Unit_Weight;

   ENDIF;

   //?Gross Weight
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Calculate Gross Weight
   CASE;

   // IF PAR.Weight Scheduled NE WRK.ZERO
   IF PAR.Weight_Scheduled <> WRK.ZERO;

   // LCL.Gross Weight USR 9.1 = LCL.Gross Weight USR 9.1 + LCL.Misc Tare Weight
   LCL.Gross_Weight_USR_9_1 = LCL.Gross_Weight_USR_9_1 + LCL.Misc_Tare_Weight;

   EXECUTE FUNCTION(RTV Item Box Tare Wgt  RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC1379982;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.Unit_Weight);
   {
    //?USER: Initialize routine

    // PAR.Unit Weight = CON.*ZERO
    PAR.Unit_Weight = *ZERO;

    //?USER: Process Data record

    // PAR.Unit Weight = CON.*ZERO
    PAR.Unit_Weight = *ZERO;

    EXECUTE FUNCTION(RTV Type/Pack/Unit Wgt RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1379988;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Component_Item_Code);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Package_Type_Code);
    {
     //?USER: Processing if Data record not found

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

     // PGM.*Return code = CND.*Normal
     PGM.*Return_code = *BLANK;

    }

    CASE;

    // IF PAR.Item Type Code is Packaging and Supplies
    IF PAR.Item_Type_Code = 'PS';

    // AND PAR.Package Type Code is Box
    AND PAR.Package_Type_Code = 'B';

    QUIT;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Unit Weight = CON.*ZERO
    PAR.Unit_Weight = *ZERO;

    ENDIF;

    //?USER: Exit processing

    // PAR.Unit Weight = PAR.Unit Weight USR
    PAR.Unit_Weight = PAR.Unit_Weight_USR;

   }

   // LCL.Unit Weight = PAR.Quantity Scheduled * LCL.Unit Weight *Rounded
   LCL.Unit_Weight = PAR.Quantity_Scheduled * LCL.Unit_Weight 'H';

   // LCL.Gross Weight USR 9.1 = LCL.Gross Weight USR 9.1 + LCL.Unit Weight
   LCL.Gross_Weight_USR_9_1 = LCL.Gross_Weight_USR_9_1 + LCL.Unit_Weight;

   ENDIF;

   ENDIF;

   //?12/26/18 DN R13944-Get 'Translated Item Desc' Language if Present.
   CASE;

   // IF NOT PAR.ED Xlate Desc to Country is Not Entered
   IF ! PAR.ED_Xlate_Desc_to_Country = *BLANK;

   //?DO2642 DN 06/21/22-Added ED Language Xlate Desc 2 as Output Parm.
   // Call program RTV Translated Item DscXF.
   CALL PROGRAM(RTV Translated Item DscXF) ('PUKLXFR');
   PARAMETER(PAR.ED_Xlate_Desc_to_Country);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.ED_Language_Xlate_Desc_2);
   PARAMETER(LCL.ED_Language_Xlate_Desc);

   ENDIF;

   //?12/20/18 DN R13944-Pass in ED Xlate Desc to Country.
   //?05/02/19 DN R14822-Change Access Path to Read by PDMSREL1 instead PDMSREL2
   //?06/21/22 DN DO2642-Pass in ED Language Xlate Desc 2.
   EXECUTE FUNCTION(Rtv/Chg/Crt ExpOrdDtls RT) TYPE(RTVOBJ) FILE(PDMSREP)          AC1612206;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(DB1.ED_Export_Document_Type);
   PARAMETER(DB1.Country_Code);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.ED_Item_Label_Line_1);
   PARAMETER(PAR.ED_Item_Label_Line_2);
   PARAMETER(PAR.ED_Chilled_Frozen_Text);
   PARAMETER(PAR.ED_Unmarked_Txt);
   PARAMETER(PAR.ED_Product_Net_Weight_lbs);
   PARAMETER(PAR.ED_Product_Net_Weight_MT);
   PARAMETER(PAR.ED_Product_UOM);
   PARAMETER(PAR.ED_Product_Nbr_of_Pkgs);
   PARAMETER(PAR.ED_Product_Pkg_Type);
   PARAMETER(LCL.ED_Shipping_Marks_Txt);
   PARAMETER(PAR.ED_Pieces_per_Bag);
   PARAMETER(PAR.ED_Bags_per_Unit);
   PARAMETER(PAR.ED_Total_Nbr_of_Pieces);
   PARAMETER(PAR.ED_Product_Unit_Price);
   PARAMETER(PAR.ED_Producet_Extended_Amt);
   PARAMETER('N');
   PARAMETER(PAR.ED_Plant_Number_Dtl);
   PARAMETER(LCL.ED_Language_Xlate_Desc_2);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(LCL.ED_HACCP_Category);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(LCL.ED_Language_Xlate_Desc);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER('A');
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?USER: Processing if Data record not found

    //?12/20/18 DN R13944-Update ED Language Xlate Desc.
    //?04/19/22 DN DO2642-Update ED Language Xlate Desc 2.
    EXECUTE FUNCTION(Crt Exp Doc Order Dtl  CR) TYPE(CRTOBJ) FILE(PDMSREP)          AC1524035;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Order_Number);
    PARAMETER(PAR.ED_Export_Document_Type);
    PARAMETER(PAR.Country_Code);
    PARAMETER(PAR.Order_Sequence_Number);
    PARAMETER(PAR.Order_Secondary_Line_Seq);
    PARAMETER(PAR.ED_Item_Code);
    PARAMETER(PAR.ED_Item_Label_Line_1);
    PARAMETER(PAR.ED_Item_Label_Line_2);
    PARAMETER(PAR.ED_Chilled_Frozen_Text);
    PARAMETER(PAR.ED_Unmarked_Txt);
    PARAMETER(PAR.ED_Product_Net_Weight_lbs);
    PARAMETER(PAR.ED_Product_Net_Weight_MT);
    PARAMETER(PAR.ED_Product_UOM);
    PARAMETER(PAR.ED_Product_Nbr_of_Pkgs);
    PARAMETER(PAR.ED_Product_Pkg_Type);
    PARAMETER(PAR.ED_Shipping_Marks_Txt);
    PARAMETER(PAR.ED_Pieces_per_Bag);
    PARAMETER(PAR.ED_Bags_per_Unit);
    PARAMETER(PAR.ED_Total_Nbr_of_Pieces);
    PARAMETER(PAR.ED_Product_Unit_Price);
    PARAMETER(PAR.ED_Producet_Extended_Amt);
    PARAMETER('N');
    PARAMETER(PAR.ED_Plant_Number_Dtl);
    PARAMETER(PAR.ED_Language_Xlate_Desc_2);
    PARAMETER(*ZERO);
    PARAMETER(PAR.ED_Date_of_Slaughter_Dtl);
    PARAMETER(PAR.ED_HACCP_Category);
    PARAMETER(PAR.ED_Slaughter_Date_Range);
    PARAMETER(PAR.ED_Production_Date_Range);
    PARAMETER(LCL.ED_Product_UID);
    PARAMETER(PAR.ED_Language_Xlate_Desc);
    PARAMETER(LCL.ED_Unused_Status_1);
    PARAMETER(LCL.ED_Unused_Status_2);
    PARAMETER(LCL.ED_Harmonized_Tariff_Cde);
    PARAMETER(LCL.ED_Nbr_of_Packing_Units);
    PARAMETER(PAR.EDI_Status_1);
    PARAMETER(PAR.EDI_Status_2);
    PARAMETER(PAR.EDI_Status_3);
    PARAMETER('A');
    PARAMETER(PAR.Job_Time);
    PARAMETER(PAR.User_Id);
    PARAMETER(PAR.Job_Name);
    PARAMETER(PAR.Job_Date);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
     PARAMETER(DB1.Record_Status);
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Record Status = CND.Active
      PAR.Record_Status = 'A';

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

     // DB1.Record Status = CND.Active
     DB1.Record_Status = 'A';

     //?USER: Processing after Data update

     // Call program Rtv/Chg Hdr Shpd Amts XF.
     CALL PROGRAM(Rtv/Chg Hdr Shpd Amts XF) ('POIYXFR');
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(DB1.ED_Export_Document_Type);
     PARAMETER(DB1.Country_Code);

    }

    //?USER: Process Data record

    //?05/01/19 DN R14822-Update Only. Do NOT Create Dtl Record Here.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Date of Slaughter.
    CASE;

    // IF PAR.ED Date of Slaughter Dtl is Not Entered
    IF PAR.ED_Date_of_Slaughter_Dtl = *BLANK;

    // LCL.ED Date of Slaughter Dtl = DB1.ED Date of Slaughter Dtl
    LCL.ED_Date_of_Slaughter_Dtl = DB1.ED_Date_of_Slaughter_Dtl;

    //?Date of Slaughter.
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.ED Date of Slaughter Dtl = PAR.ED Date of Slaughter Dtl
    LCL.ED_Date_of_Slaughter_Dtl = PAR.ED_Date_of_Slaughter_Dtl;

    ENDIF;

    //?Production Date Range.
    CASE;

    // IF PAR.ED Production Date Range is Not Entered
    IF PAR.ED_Production_Date_Range = *BLANK;

    // LCL.ED Production Date Range = DB1.ED Production Date Range
    LCL.ED_Production_Date_Range = DB1.ED_Production_Date_Range;

    //?Production Date Range.
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.ED Production Date Range = PAR.ED Production Date Range
    LCL.ED_Production_Date_Range = PAR.ED_Production_Date_Range;

    ENDIF;

    //?Language Xlate Desc.   12/21/18 DN R13944-Maintain Xlate Desc.
    CASE;

    // IF DB1.ED Language Xlate Desc is Entered
    IF DB1.ED_Language_Xlate_Desc <> *BLANK;

    // LCL.ED Language Xlate Desc = DB1.ED Language Xlate Desc
    LCL.ED_Language_Xlate_Desc = DB1.ED_Language_Xlate_Desc;

    //?Language Xlate Desc.   12/21/18 DN R13944-Maintain Xlate Desc.
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.ED Language Xlate Desc = PAR.ED Language Xlate Desc
    LCL.ED_Language_Xlate_Desc = PAR.ED_Language_Xlate_Desc;

    ENDIF;

    //?Language Xlate Desc 2. 04/19/22 DN DO2642-Maintain Xlate Desc 2.
    CASE;

    // IF DB1.ED Language Xlate Desc 2 is Entered
    IF DB1.ED_Language_Xlate_Desc_2 <> *BLANK;

    // LCL.ED Language Xlate Desc 2 = DB1.ED Language Xlate Desc 2
    LCL.ED_Language_Xlate_Desc_2 = DB1.ED_Language_Xlate_Desc_2;

    //?Language Xlate Desc 2. 04/19/22 DN DO2642-Maintain Xlate Desc 2.
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.ED Language Xlate Desc 2 = PAR.ED Language Xlate Desc 2
    LCL.ED_Language_Xlate_Desc_2 = PAR.ED_Language_Xlate_Desc_2;

    ENDIF;

    CASE;

    // IF DB1.ED Export Document Type is Form 9060-7 (Casings)
    IF DB1.ED_Export_Document_Type = 'G';

    // LCL.ED Product Nbr of Pkgs = DB1.ED Product Nbr of Pkgs
    LCL.ED_Product_Nbr_of_Pkgs = DB1.ED_Product_Nbr_of_Pkgs;

    // LCL.ED Product Net Weight MT = DB1.ED Product Net Weight MT
    LCL.ED_Product_Net_Weight_MT = DB1.ED_Product_Net_Weight_MT;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.ED Product Nbr of Pkgs = PAR.ED Product Nbr of Pkgs
    LCL.ED_Product_Nbr_of_Pkgs = PAR.ED_Product_Nbr_of_Pkgs;

    // LCL.ED Product Net Weight MT = PAR.ED Product Net Weight MT
    LCL.ED_Product_Net_Weight_MT = PAR.ED_Product_Net_Weight_MT;

    ENDIF;

    //?05/25/18 DN R13074-Change to not update Item Label Line 1/2,
    //?  Chilled/Frozen Text, Pkg Type & HACCP Category.
    //?04/20/22 DN DO2642-Change to Update ED Language Xlate Desc 2.
    EXECUTE FUNCTION(Chg Exp Doc Order Dtl  CH) TYPE(CHGOBJ) FILE(PDMSREP)          AC1524036;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.ED_Export_Document_Type);
    PARAMETER(PAR.Country_Code);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(PAR.ED_Item_Code);
    PARAMETER(DB1.ED_Item_Label_Line_1);
    PARAMETER(DB1.ED_Item_Label_Line_2);
    PARAMETER(DB1.ED_Chilled_Frozen_Text);
    PARAMETER(PAR.ED_Unmarked_Txt);
    PARAMETER(PAR.ED_Product_Net_Weight_lbs);
    PARAMETER(LCL.ED_Product_Net_Weight_MT);
    PARAMETER(PAR.ED_Product_UOM);
    PARAMETER(LCL.ED_Product_Nbr_of_Pkgs);
    PARAMETER(PAR.ED_Product_Pkg_Type);
    PARAMETER(PAR.ED_Shipping_Marks_Txt);
    PARAMETER(PAR.ED_Pieces_per_Bag);
    PARAMETER(PAR.ED_Bags_per_Unit);
    PARAMETER(PAR.ED_Total_Nbr_of_Pieces);
    PARAMETER(PAR.ED_Product_Unit_Price);
    PARAMETER(PAR.ED_Producet_Extended_Amt);
    PARAMETER(PAR.ED_Print_Status);
    PARAMETER(DB1.ED_Plant_Number_Dtl);
    PARAMETER(LCL.ED_Language_Xlate_Desc_2);
    PARAMETER(PAR.ED_Consignee_Address_Nbr);
    PARAMETER(LCL.ED_Date_of_Slaughter_Dtl);
    PARAMETER(PAR.ED_HACCP_Category);
    PARAMETER(PAR.ED_Slaughter_Date_Range);
    PARAMETER(LCL.ED_Production_Date_Range);
    PARAMETER(DB1.ED_Product_UID);
    PARAMETER(LCL.ED_Language_Xlate_Desc);
    PARAMETER(DB1.ED_Unused_Status_1);
    PARAMETER(DB1.ED_Unused_Status_2);
    PARAMETER(DB1.ED_Harmonized_Tariff_Cde);
    PARAMETER(DB1.ED_Nbr_of_Packing_Units);
    PARAMETER(PAR.EDI_Status_1);
    PARAMETER(PAR.EDI_Status_2);
    PARAMETER(PAR.EDI_Status_3);
    PARAMETER(DB1.Record_Status);
    PARAMETER(PAR.Job_Time);
    PARAMETER(PAR.User_Id);
    PARAMETER(PAR.Job_Name);
    PARAMETER(PAR.Job_Date);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

     //?USER: Processing after Data update

     // Call program Rtv/Chg Hdr Shpd Amts XF.
     CALL PROGRAM(Rtv/Chg Hdr Shpd Amts XF) ('POIYXFR');
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(DB1.ED_Export_Document_Type);
     PARAMETER(DB1.Country_Code);

    }

    ENDIF;

   }

   ENDIF;

  }

  // Call program Exc Calc Ord ExemptCd XF.
  CALL PROGRAM(Exc Calc Ord ExemptCd XF) ('PPSLXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(LCL.OH_TF_Exempt_Code);
  PARAMETER(WRK.Blank_for_4_USR);
  PARAMETER('N');

  EXECUTE FUNCTION(Chg TF Exempt         CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC1750711;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(LCL.OH_TF_Exempt_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG Delete Detail Line RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1426408;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER('A');
PARAMETER(WRK.USR_Order_Value);
PARAMETER(WRK.USR_Order_Weight);
PARAMETER(RCD.Scheduled_Ship_Date);
{
 //?USER: Initialize routine

 //?***** PA PROCESS - USE REQUESTED SHIP DATE FOR Ship Date USR *****
 // WRK.USR Quantity = CON.*ZERO
 WRK.USR_Quantity = *ZERO;

 //?USER: Process Data record

 //?Set control for inventory update
 // WRK.USR Status (Y/N) = CND.yes
 WRK.USR_Status_Y_N = 'Y';

 //?If negative quantity then no inventory update required
 CASE;

 // IF DB1.Quantity Ordered is Less than zero
 IF DB1.Quantity_Ordered < *ZERO;

 // WRK.USR Status (Y/N) = CND.no
 WRK.USR_Status_Y_N = 'N';

 ENDIF;

 //?Bypass if affect inventory is no
 CASE;

 // IF DB1.Affect Inventory Status is no
 IF DB1.Affect_Inventory_Status = 'N';

 // WRK.USR Status (Y/N) = CND.no
 WRK.USR_Status_Y_N = 'N';

 ENDIF;

 //?Bypass if entered status
 CASE;

 // IF DB1.Detail Line Status is Entered
 IF DB1.Detail_Line_Status = 'E';

 // WRK.USR Status (Y/N) = CND.no
 WRK.USR_Status_Y_N = 'N';

 ENDIF;

 //?Determine quantity open on this line
 DO;

 CASE;

 // IF DB1.Detail Line Status is Cancel Status Types
 IF DB1.Detail_Line_Status = 'L'/'A'/'E'/'H';

 //?If entered status force control value to N
 CASE;

 // IF DB1.Detail Line Status is Entered
 IF DB1.Detail_Line_Status = 'E';

 // WRK.USR Status (Y/N) = CND.no
 WRK.USR_Status_Y_N = 'N';

 ENDIF;

 // WRK.Quantity Ordered = DB1.Quantity Ordered - DB1.Quantity Shipped Total
 WRK.Quantity_Ordered = DB1.Quantity_Ordered - DB1.Quantity_Shipped_Total;

 // WRK.Quantity Allocated = DB1.Quantity Allocated
 WRK.Quantity_Scheduled = DB1.Quantity_Scheduled;

 // WRK.USR Order Weight = WRK.Quantity Ordered * DB1.Unit Weight Ordered U/M *Round
 WRK.USR_Order_Weight = WRK.Quantity_Ordered * DB1.Unit_Weight_Ordered_U_M 'H';

 // PAR.USR Order Weight = PAR.USR Order Weight - WRK.USR Order Weight
 PAR.USR_Order_Weight = PAR.USR_Order_Weight - WRK.USR_Order_Weight;

 // PAR.USR Order Value = PAR.USR Order Value - DB1.Extended Amount
 PAR.USR_Order_Value = PAR.USR_Order_Value - DB1.Extended_Amount;

 ENDIF;

 ENDDO;

 //?Process Inventory update if required by control field
 DO;

 // WRK.Quantity Backordered = DB1.Quantity Ordered - DB1.Quantity Scheduled
 WRK.Quantity_Backordered = DB1.Quantity_Ordered - DB1.Quantity_Scheduled;

 //?update availability  if Prod Plan sts is " " = yes - chgd fp1054 6/17/09
 CASE;

 // IF DB1.OD Production Plan Sts is Yes
 IF DB1.OD_Production_Plan_Sts = *BLANK;

 // PAR.Quantity Scheduled = DB1.Quantity Scheduled
 PAR.Quantity_Scheduled = DB1.Quantity_Scheduled;

 // PAR.Weight Scheduled = DB1.Weight Scheduled
 PAR.Weight_Scheduled = DB1.Weight_Scheduled;

 // Call program UPD Avail-To-Sell  ORD XF.
 CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Quantity_Scheduled);
 PARAMETER(PAR.Weight_Scheduled);
 PARAMETER('OD');
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(DB1.Item_Age_Days);
 PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
 PARAMETER(DB1.Production_Ovr_AgeDte_To);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Scheduled = CON.*ZERO
 PAR.Quantity_Scheduled = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 ENDIF;

 ENDDO;

 //?Update detail record to indicate delete status
 DO;

 CASE;

 // IF PAR.Header Status is Entered
 IF PAR.Header_Status = 'E';

 EXECUTE FUNCTION(DLT PD Order Detail    DL) TYPE(DLTOBJ) FILE(OPBGWKP)          AC1204566;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Set status to cancelled
 // WRK.Detail Line Status Last = DB1.Detail Line Status
 WRK.Detail_Line_Status_Last = DB1.Detail_Line_Status;

 // WRK.Detail Line Status = CND.Cancelled
 WRK.Detail_Line_Status = 'X';

 EXECUTE FUNCTION(CHG PD Order Detail    CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1425286;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Order_Group_Code);
 PARAMETER(WRK.Detail_Line_Status);
 PARAMETER(WRK.Detail_Line_Status_Last);
 PARAMETER(DB1.Billing_Detail_Cost_Dol);
 PARAMETER(DB1.Billing_Detail_Gross_Dol);
 PARAMETER(DB1.Billing_Detail_Net_Dol);
 PARAMETER(DB1.Quantity_to_Substitute);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Extended_Amount);
 PARAMETER(DB1.Market_Pricing_Date);
 PARAMETER(DB1.Commodity_Market_Code);
 PARAMETER(DB1.Date_Method_Code);
 PARAMETER(DB1.Price_Method_Code);
 PARAMETER(DB1.Price_Overage_Override);
 PARAMETER(DB1.Contract_Number);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Pricing_Date_Used);
 PARAMETER(DB1.U_M_Base_Price);
 PARAMETER(DB1.U_M_Ordered);
 PARAMETER(DB1.Work_Confirm_Status);
 PARAMETER(DB1.Work_Over_Short_Status);
 PARAMETER(DB1.OD_Production_Plan_Sts);
 PARAMETER(DB1.Order_Desc_Line_One);
 PARAMETER(DB1.Order_Desc_Line_Two);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Catch_Weight_Status);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Audit_Reason_Code);
 PARAMETER(DB1.Production_Date_Control);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.Quantity_Ordered);
 PARAMETER(DB1.Weight_Ordered);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.Quantity_Shipped_Total);
 PARAMETER(DB1.Weight_Shipped_Total);
 PARAMETER(DB1.Unit_Cost_Pricing_U_M);
 PARAMETER(DB1.Unit_Cost_Per_Pound);
 PARAMETER(DB1.Unit_Price);
 PARAMETER(DB1.Unit_Price_Credit);
 PARAMETER(DB1.Unit_Price_Ordered_U_M);
 PARAMETER(DB1.Unit_Weight_Ordered_U_M);
 PARAMETER(DB1.Tare_Weight_Total);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Affect_Inventory_Status);
 PARAMETER(DB1.Affect_Sales_Doll_Status);
 PARAMETER(DB1.Affect_Sales_Pnds_Status);
 PARAMETER(DB1.Item_Structure_Type_Code);
 PARAMETER(DB1.Item_Structure_Group_Code);
 PARAMETER(DB1.Item_Structure_Class_Code);
 PARAMETER(DB1.Item_Level);
 PARAMETER(DB1.Quality_Level);
 PARAMETER(DB1.Pricing_Product_Class_Rep);
 PARAMETER(DB1.Season_Product_Class_Repo);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.User_Profile_Name);
 PARAMETER(DB1.Country_Code);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.Substituted_Flag);
 PARAMETER(DB1.OD_Schedule_Override_Sts);
 PARAMETER(DB1.Invoice_Unit_Price);
 PARAMETER(DB1.Invoice_Extended_Amt);
 PARAMETER(DB1.Ham_Group_Number);
 PARAMETER(DB1.OD_Adj_Type_Override);
 PARAMETER(DB1.Affect_Trade_Fund);
 PARAMETER(DB1.Affect_Commission);
 PARAMETER(DB1.Affect_Pricing);
 PARAMETER(DB1.Released_by_User_Sts_Y_N);
 PARAMETER(DB1.Ord_TF_Exempt_Code);
 PARAMETER(DB1.OD_Pallet_Type);
 PARAMETER(DB1.Production_Warehouse);
 PARAMETER(DB1.OD_Price_Type);
 PARAMETER(DB1.Warehouse_Pallets_Loaded);
 PARAMETER(DB1.Consumed_Item_Code);
 PARAMETER(DB1.Deadline_Depart_Date_LH);
 PARAMETER(DB1.OD_Price_Type_Ref_Num);
 PARAMETER(DB1.OD_Firm_Date);
 PARAMETER(DB1.Deadline_Depart_Time_LH);
 PARAMETER(DB1.Price_Code);
 PARAMETER(DB1.Maximum_Net_Weight);
 PARAMETER(DB1.Substitution_Line_Number);
 PARAMETER(DB1.Max_Qty_to_sched_per_day);
 PARAMETER(DB1.Warehouse_Pallet_Tare);
 PARAMETER(DB1.Warehouse_Avg_Pallet_Tare);
 PARAMETER(DB1.OD_Item_Target_Price);
 PARAMETER(DB1.OD_Estimated_Gross_Weight);
 PARAMETER(DB1.OD_Maximum_Unit_Weight);
 PARAMETER(DB1.Order_Gate_Final_Price);
 PARAMETER(DB1.OD_Ceiling_Price);
 PARAMETER(DB1.OD_Gate_Final_Price_Adj);
 PARAMETER(DB1.OD_Weighted_Avg_Price);
 PARAMETER(DB1.OD_Original_Ordered_Qty);
 PARAMETER(DB1.OD_Cancel_Date);
 PARAMETER(DB1.OD_Unused_Prc_7);
 PARAMETER(DB1.OD_Unused_Prc_8);
 PARAMETER(DB1.OD_MPR_Sent_to_USDA_Sts);
 PARAMETER(DB1.OD_MPR_Prc_Ready_to_Send);
 PARAMETER(DB1.OD_UnUsed_Price_Sts_3);
 PARAMETER(DB1.Weight_Amount_Entered);
 PARAMETER(DB1.Item_Age_Days);
 PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
 PARAMETER(DB1.Production_Ovr_AgeDte_To);
 PARAMETER(DB1.OD_Spot_Buy);
 PARAMETER(DB1.OD_Clm_Full_Return_to_Plt);
 PARAMETER(DB1.Order_Line_Error_Type);
 PARAMETER(DB1.OD_Market_Begin_Date);
 PARAMETER(DB1.OD_Market_Ending_Date);
 PARAMETER(DB1.OD_Atch_to_Ord_ActShpDte);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 {
  //?USER: Processing after Data read

  //?E2247 RMC 10/03/12 Crt chg log if dtl has been sent to MPR USDA
  CASE;

  // IF DB1.OD MPR Sent to USDA Sts is yes
  IF DB1.OD_MPR_Sent_to_USDA_Sts = 'Y';

  //?If price type changes, then create type: ORDPRT
  CASE;

  // IF DB1.OD Price Type NE PAR.OD Price Type
  IF DB1.OD_Price_Type <> PAR.OD_Price_Type;

  //?change log prior has seq in pos 1-3, price type 5-7: '001 NEG     '
  // LCL.Text 3 Length USR = DB1.Order Sequence Number
  LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

  // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,DB1.OD Price Type,CON.1)
  LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + DB1.OD_Price_Type (1);

  // LCL.Change Log New Value = PAR.OD Price Type
  LCL.Change_Log_New_Value = PAR.OD_Price_Type;

  // Call program CRT Load/OrderChg n/ld XF.
  CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
  PARAMETER(*ZERO);
  PARAMETER('ORDPRT');
  PARAMETER('SLS');
  PARAMETER(LCL.Change_Log_Prior_Value);
  PARAMETER(LCL.Change_Log_New_Value);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);

  ENDIF;

  ENDIF;

  //?If not the transfer order nbr 9999999 -> crt chg logs
  CASE;

  // IF DB1.Order Number is ne 9999999
  IF DB1.Order_Number <> 9999999;

  //?If qty changes, then create type: ORDWGT & ORDQTY ->ALWAYS 6/14/13
  CASE;

  // IF DB1.Quantity Ordered NE PAR.Quantity Ordered
  IF DB1.Quantity_Ordered <> PAR.Quantity_Ordered;

  // OR PAR.Detail Line Status is Cancelled
  OR PAR.Detail_Line_Status = 'X';

  //?(do this off of qty, because wgt can change often since unit wgt changes)
  //?change log prior has seq in pos 1-3, weight in 5-11: '001 0000nnn'
  // LCL.Text 3 Length USR = DB1.Order Sequence Number
  LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

  // LCL.Weight Beg Inv usr = DB1.Weight Ordered
  LCL.Weight_Beg_Inv_usr = DB1.Weight_Ordered;

  // LCL.Text USR 7 = LCL.Weight Beg Inv usr
  LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

  // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
  LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

  // LCL.Weight Beg Inv usr = PAR.Weight Ordered
  LCL.Weight_Beg_Inv_usr = PAR.Weight_Ordered;

  //?WI642-For cancelled item line new weight is zero for log only.
  CASE;

  // IF PAR.Detail Line Status is Cancelled
  IF PAR.Detail_Line_Status = 'X';

  // LCL.Weight Beg Inv usr = CND.Not Entered
  LCL.Weight_Beg_Inv_usr = *ZERO;

  ENDIF;

  // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
  LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

  // Call program CRT Load/OrderChg n/ld XF.
  CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
  PARAMETER(*ZERO);
  PARAMETER('ORDWGT');
  PARAMETER('SLS');
  PARAMETER(LCL.Change_Log_Prior_Value);
  PARAMETER(LCL.Change_Log_New_Value);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);

  // LCL.Weight Beg Inv usr = DB1.Quantity Ordered
  LCL.Weight_Beg_Inv_usr = DB1.Quantity_Ordered;

  // LCL.Text USR 7 = LCL.Weight Beg Inv usr
  LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

  // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
  LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

  // LCL.Weight Beg Inv usr = PAR.Quantity Ordered
  LCL.Weight_Beg_Inv_usr = PAR.Quantity_Ordered;

  //?WI642-For cancelled item line new quantity is zero for log only.
  CASE;

  // IF PAR.Detail Line Status is Cancelled
  IF PAR.Detail_Line_Status = 'X';

  // LCL.Weight Beg Inv usr = CND.Not Entered
  LCL.Weight_Beg_Inv_usr = *ZERO;

  ENDIF;

  // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
  LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

  // Call program CRT Load/OrderChg n/ld XF.
  CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
  PARAMETER(*ZERO);
  PARAMETER('ORDQTY');
  PARAMETER('SLS');
  PARAMETER(LCL.Change_Log_Prior_Value);
  PARAMETER(LCL.Change_Log_New_Value);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);

  ENDIF;

  ENDIF;

  //?USER: Processing before Data update

  // DB1.Age Code = CND.Blank
  DB1.Age_Code = *BLANK;

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  EXECUTE FUNCTION(Rtv Item Typ/Grp/Cls  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1298334;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Type_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Production_Warehouse);
  PARAMETER(NLL.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Calc Gross Weight from tares...    copied from Dsp Gross Wgt function
  DO;

  // Call program Rtv Tare Weight        XF.
  CALL PROGRAM(Rtv Tare Weight        XF) ('PBI3XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Misc_Tare_Weight);

  //?wi464 change
  // Call program RTV Itm BxID & Tares  XF.
  CALL PROGRAM(RTV Itm BxID & Tares  XF) ('PBI4XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Box_Weight);
  PARAMETER(LCL.Number_Cases_On_A_Pallet);
  PARAMETER(LCL.Pallet_Tare_Weight);
  PARAMETER(LCL.Box_iD);
  PARAMETER(DB1.OD_Pallet_Type);

  // LCL.Total Tare USR = LCL.Box Weight + LCL.Misc Tare Weight
  LCL.Total_Tare_USR = LCL.Box_Weight + LCL.Misc_Tare_Weight;

  // Box + Misc Tare
  LCL.Weight_1_1_U = ( LCL.Box_Weight + LCL.Misc_Tare_Weight ) * DB1.Quantity_Ordered 'H';

  //?Pallet Tare
  CASE;

  // IF DB1.Palletize is yes
  IF DB1.Palletize = 'Y';

  CASE;

  // IF LCL.Number Cases On A Pallet is GT Zero
  IF LCL.Number_Cases_On_A_Pallet > *ZERO;

  // Pallet Weight
  LCL.Weight_1_2_U = ( DB1.Quantity_Ordered / LCL.Number_Cases_On_A_Pallet 'H' )
  * LCL.Pallet_Tare_Weight 'H';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Weight 1.2             .U = CON.*ZERO
  LCL.Weight_1_2_U = *ZERO;

  ENDIF;

  //?Pallet Tare
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Weight 1.2             .U = CON.*ZERO
  LCL.Weight_1_2_U = *ZERO;

  ENDIF;

  // Estimated Gross
  DB1.OD_Estimated_Gross_Weight = ( DB1.Weight_Ordered + LCL.Weight_1_1_U )
  + LCL.Weight_1_2_U;

  //?E00196 RMC 8/24/12 chk pfs interface SHPTRN too
  ENDDO;

 }

 ENDIF;

 ENDDO;

}


//?USER: Extra processing after DBF update

// PAR.USR Update Flag = CND.Yes
PAR.USR_Update_Flag = 'Y';

//?USER: Process command keys

CASE;

// IF PAR.USR Update Flag is No
IF PAR.USR_Update_Flag = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

//?det. if any substitutions for this item.
EXECUTE FUNCTION(RTV Substitutions      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1441770;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(*ZERO);
PARAMETER(WRK.Substitution_Flag);
{
 //?USER: Initialize routine

 // PAR.Substitution Flag = CND.no
 PAR.Substitution_Flag = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.Order Secondary Line Seq is GT 1
 IF DB1.Order_Secondary_Line_Seq > 1;

 // PAR.Substitution Flag = CND.yes
 PAR.Substitution_Flag = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF WRK.Substitution Flag is yes
IF WRK.Substitution_Flag = 'Y';

// PAR.Substituted Flag = CND.Substitutions Exist
PAR.Substituted_Flag = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Substituted Flag = CND.No Substitutions Exist
PAR.Substituted_Flag = *BLANK;

ENDIF;

EXECUTE FUNCTION(CHG Substitution Flag  CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1440670;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.Substituted_Flag);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


PGM.*Return_code = *BLANK;

RETURN;

ENDIF;

//?USER: Exit program processing

CASE;

// IF PAR.USR Update Flag is No
IF PAR.USR_Update_Flag = *BLANK;

// PGM.*Return code = CND.*User QUIT requested
PGM.*Return_code = 'Y2U9999';

ENDIF;

