// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMBPDFR
// ?Date: 14.08.2025 Time: 03:44:39
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// CTL.Ship From Warehouse = PAR.Warehouse Code
CTL.Ship_From_Warehouse = PAR.Warehouse_Code;

EXECUTE FUNCTION(Rtv Allow Multi-Whs   RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1512192;
PARAMETER(JOB.*USER);
PARAMETER(PAR.Allow_Multi_Warehouse);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// PAR.Reprocess User View = CND.blank
PAR.Reprocess_User_View = *BLANK;

//?USER: Initialize subfile control

//?** First time
CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

//?Go to the Calendar and get the >>>> date from 3 days ago
//?Go to the Calendar and get 1 day in the future
// CTL.Ship From Warehouse = PAR.Warehouse Code
CTL.Ship_From_Warehouse = PAR.Warehouse_Code;

EXECUTE FUNCTION(RTV Newest Rcd         RT) TYPE(RTVOBJ) FILE(PDMHCPP)          AC1542212;
PARAMETER(WRK.Job_Time);
PARAMETER(WRK.Job_Date);
PARAMETER(WRK.Thru_Scheduled_Ship_Date);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// CTL.Job Date = WRK.Job Date
CTL.Job_Date = WRK.Job_Date;

// CTL.Job Time = WRK.Job Time
CTL.Job_Time = WRK.Job_Time;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

ENDIF;

EXECUTE FUNCTION(Warehouse Desc DRV) TYPE(DRVFLD)                               AC1532477;
PARAMETER(CTL.Warehouse_Desc_DRV);
PARAMETER(CTL.Ship_From_Warehouse);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

}


EXECUTE FUNCTION(RTV Newest Rcd         RT) TYPE(RTVOBJ) FILE(PDMHCPP)          AC1542212;
PARAMETER(CTL.Job_Time);
PARAMETER(CTL.Job_Date);
PARAMETER(LCL.Thru_Scheduled_Ship_Date);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?USER: Initialize subfile record from DBF record

EXECUTE FUNCTION(Sel Load by Whs       IF) TYPE(EXCINTFUN)                      AC1512394;
PARAMETER(PGM.*Record_selected);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Company_Number);
PARAMETER(CTL.Ship_From_Warehouse);
PARAMETER(WRK.Whs_Ord_Ship_Sts_USR);
PARAMETER(WRK.Plant_Controlled_Sts);
{
 //?Execute internal function

 // PAR.*Record selected = CND.*NO
 PAR.*Record_selected = 'N';

 EXECUTE FUNCTION(Sel Order by Whs      RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1512395;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.*Record_selected);
 PARAMETER(PAR.Whs_Ord_Ship_Sts_USR);
 PARAMETER(PAR.Plant_Controlled_Sts);
 {
  //?USER: Initialize routine

  //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
  // PAR.Whs Ord Ship Sts USR = CND.Not Shipped
  PAR.Whs_Ord_Ship_Sts_USR = *BLANK;

  // PAR.Count USR = CON.*ZERO
  PAR.Count_USR = *ZERO;

  // PAR.Count 2 USR = CON.*ZERO
  PAR.Count_2_USR = *ZERO;

  // PAR.Plant Controlled Sts = CND.no
  PAR.Plant_Controlled_Sts = 'N';

  //?USER: Process Data record

  EXECUTE FUNCTION(Sel Order by Whs      RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1512396;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.*Record_selected);
  PARAMETER(PAR.Whs_Ord_Found_STS);
  {
   //?USER: Initialize routine

   // PAR.Whs Ord Found STS = CND.no
   PAR.Whs_Ord_Found_STS = 'N';

   //?USER: Process Data record

   CASE;

   // IF DB1.Detail Line Status is Not cancelled
   IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

   CASE;

   // IF PAR.Warehouse Code EQ DB1.Warehouse Code
   IF PAR.Warehouse_Code = DB1.Warehouse_Code;

   // PAR.*Record selected = CND.*YES
   PAR.*Record_selected = 'Y';

   // PAR.Whs Ord Found STS = CND.yes
   PAR.Whs_Ord_Found_STS = 'Y';

   QUIT;

   ENDIF;

   ENDIF;

  }

  CASE;

  // IF DB1.Trans Contol AS400/Plant is Plant
  IF DB1.Trans_Contol_AS400_Plant = 'P';

  // PAR.Plant Controlled Sts = CND.yes
  PAR.Plant_Controlled_Sts = 'Y';

  ENDIF;

  CASE;

  // IF PAR.Whs Ord Found STS is yes
  IF PAR.Whs_Ord_Found_STS = 'Y';

  CASE;

  // IF DB1.Header Status is Confirmed & Complete
  IF DB1.Header_Status = 'C'/'R';

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Count 2 USR = PAR.Count 2 USR + CON.1
  PAR.Count_2_USR = PAR.Count_2_USR + 1;

  ENDIF;

  ENDIF;

  //?USER: Exit processing

  CASE;

  // IF PAR.Count USR is GT 0
  IF PAR.Count_USR > *ZERO;

  CASE;

  // IF PAR.Count 2 USR is Greater than zero
  IF PAR.Count_2_USR > *ZERO;

  // PAR.Whs Ord Ship Sts USR = CND.Partial
  PAR.Whs_Ord_Ship_Sts_USR = 'P';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Whs Ord Ship Sts USR = CND.All
  PAR.Whs_Ord_Ship_Sts_USR = 'A';

  ENDIF;

  ENDIF;

 }

}


//?See if there is a load scheduling position record
DO;

EXECUTE FUNCTION(RTV Load               RT) TYPE(RTVOBJ) FILE(PDMHCPP)          AC1918529;
PARAMETER(DB1.Load_ID);
{
 //?USER: Processing if Data record not found

 //?Record not found
 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 QUIT;

 //?USER: Process Data record

 //?Record Found
 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDDO;

//?Selected record
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?If carrier selection is made, then select only that carrier
CASE;

// IF CTL.Carrier Code is entered
IF CTL.Carrier_Code <> *BLANK;

CASE;

// IF CTL.Carrier Code is Select Blank Carriers
IF CTL.Carrier_Code = *;

CASE;

// IF DB1.Carrier Code is entered
IF DB1.Carrier_Code <> *BLANK;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.Carrier Code NE DB1.Carrier Code
IF CTL.Carrier_Code <> DB1.Carrier_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

// RCD.Load Door 1 USR = DB1.Load Door 1
RCD.Load_Door_1_USR = DB1.Load_Door_1;

// RCD.Load Door 2 USR = DB1.Load Door 2
RCD.Load_Door_2_USR = DB1.Load_Door_2;

ENDIF;

//?CALC: Subfile control function fields

CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

// IF *OTHERWISE
IF *OTHERWISE;

//?Select
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Ship From Warehouse
IF PGM.*Cursor_field = CTL.Ship_From_Warehouse;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(CTL.Ship_From_Warehouse);

ENDIF;

ENDIF;

//?F9=View Item/Loads
CASE;

// IF CTL.*CMD key is CF09
IF CTL.*CMD_key = '09';

// LCL.Item Code = CON.*ZERO
LCL.Item_Code = *ZERO;

// Call program Dsp Load Schdlng Dtl3 DF.
CALL PROGRAM(Dsp Load Schdlng Dtl3 DF) ('PMB4DFR');
PARAMETER(LCL.Item_Code);
PARAMETER(CTL.Company_Number);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?5=Dsp Load Sch Detail
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

//?SEND IN THR DATA AS "TO" PRODUCTION DATE FROM CTL
// Call program Dsp Load Schdlng Dtl2 DF.
CALL PROGRAM(Dsp Load Schdlng Dtl2 DF) ('PMBSDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(CTL.To_Production_Date);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Deadline_Departure_Date);
PARAMETER(RCD.Deadline_Departure_Time);
PARAMETER(RCD.Job_Time);
PARAMETER(RCD.Job_Date);
PARAMETER(RCD.Warehouse_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

SET CURSOR;

ENDIF;

//?7=dsp Display Dispatch/tracer info
CASE;

// IF RCD.*SFLSEL is Opt 7
IF RCD.*SFLSEL = '7'/'7';

//?get the dsp dispatch/tracer info
// Call program Dsp Dispatch/Tracer LH D1.
CALL PROGRAM(Dsp Dispatch/Tracer LH D1) ('PMBRD1R');
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Company_Number);
PARAMETER(WRK.USR_Exit_Program);
PARAMETER(WRK.Flag_2);
PARAMETER(WRK.Warehouse_Specific_Usr);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?USER: Process command keys

CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

// PAR.Reprocess User View = CND.yes
PAR.Reprocess_User_View = 'Y';

// PGM.*Return code = WRK.BLANK
PGM.*Return_code = WRK.BLANK;

RETURN;

QUIT;

ENDIF;

