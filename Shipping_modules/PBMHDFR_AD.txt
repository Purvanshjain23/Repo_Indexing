// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBMHDFR
// ?Date: 14.08.2025 Time: 03:48:33
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PGM.*Scan limit = CND.999999
PGM.*Scan_limit = 999999;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(LCL.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(Rtv Allow Multi-Whs   RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1512192;
PARAMETER(JOB.*USER);
PARAMETER(PAR.Allow_Multi_Warehouse);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.PRT Printer Device = CND.Not entered
PAR.PRT_Printer_Device = *BLANK;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.Display Prt Opt Pmt USR = CND.*YES
PAR.Display_Prt_Opt_Pmt_USR = *YES;

// PAR.USR Print Detail = CND.yes
PAR.USR_Print_Detail = 'Y';

// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// PAR.Job Name CDE = JOB.*JOB
PAR.Job_Name_CDE = JOB.*JOB;

// PAR.Job Name = SUBSTRING(JOB.*JOB,CON.1,CON.9)
PAR.Job_Name = SUBSTRING(JOB.*JOB:1:9);

// PAR.Job Name = CONCAT(PAR.Job Name,CON.P,CON.*ZERO)
PAR.Job_Name = PAR.Job_Name + 'P' (*ZERO);

// PAR.Change Flag USR = CND.No
PAR.Change_Flag_USR = 'N';

// PGM.*Subfile mode = CND.Truncated
PGM.*Subfile_mode = 1;

// Call program RTV Live w/TPM Sts    XF.
CALL PROGRAM(RTV Live w/TPM Sts    XF) ('PBEGXFR');
PARAMETER('LIVE W/TPM');
PARAMETER(LCL.Live_with_TPM);

//?USER: Initialize subfile control

CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

// CTL.USR Warehouse Code = PAR.Warehouse Code
CTL.USR_Warehouse_Code = PAR.Warehouse_Code;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

// PAR.Numeric 4,0           USR = CTL.Numeric 4,0           USR
PAR.Numeric_40_USR = CTL.Numeric_40_USR;

// CTL.Scheduled Ship Date = PAR.Scheduled Ship Date
CTL.Scheduled_Ship_Date = PAR.Scheduled_Ship_Date;

ENDIF;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.USR Carrier Code = CTL.Carrier Code
CTL.USR_Carrier_Code = CTL.Carrier_Code;

EXECUTE FUNCTION(Warehouse Desc DRV) TYPE(DRVFLD)                               AC1532477;
PARAMETER(CTL.Warehouse_Desc_DRV);
PARAMETER(CTL.USR_Warehouse_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

}


//?Val:  Warehouse Code
CASE;

// IF CTL.USR Warehouse Code is Warehouse Code Blank
IF CTL.USR_Warehouse_Code = *BLANK;

// Send error message - 'Warehouse Code is required.'
ERROR(USR2015);
MSGPARM(CTL.USR_Warehouse_Code);

QUIT;

//?Val:  Warehouse Code
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val User Whs Access   IF) TYPE(EXCINTFUN)                      AC1531984;
PARAMETER(JOB.*USER);
PARAMETER(CTL.USR_Warehouse_Code);
PARAMETER('S');
PARAMETER('U');
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.User_Code_Model);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Retrieve User Warehouse Access Type
 CASE;

 // IF PAR.User Code Model is equal to blank
 IF PAR.User_Code_Model = *BLANK;

 EXECUTE FUNCTION(Rtv User Whs Access   RT) TYPE(RTVOBJ) FILE(PDL1REP)           AC1531985;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.UWA_Inventory_Trans);
 PARAMETER(PAR.UWA_Lot_Loc_Trans);
 PARAMETER(PAR.UWA_Shipping_Trans);
 PARAMETER(PAR.UWA_Cross_Applications);
 PARAMETER(PAR.UWA_Unused_Status_1);
 PARAMETER(PAR.UWA_Unused_Status_2);
 PARAMETER(PAR.UWA_Unused_Sts_3);
 PARAMETER(PAR.UWA_Unused_Sts_4);
 PARAMETER(PAR.UWA_Unused_Sts_5);
 PARAMETER(PAR.UWA_Unused_Sts_6);
 PARAMETER(PAR.UWA_Unused_Sts_7);
 PARAMETER(PAR.UWA_Unused_Sts_8);
 PARAMETER(PAR.UWA_Unused_Sts_9);
 PARAMETER(PAR.UWA_Unused_Sts_10);
 PARAMETER(PAR.UWA_Unused_Sts_11);
 PARAMETER(PAR.UWA_Unused_Sts_12);
 PARAMETER(PAR.UWA_Unused_Sts_13);
 PARAMETER(PAR.UWA_Unused_Sts_14);
 PARAMETER(PAR.UWA_Unused_Sts_15);
 PARAMETER(PAR.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Retrieve User Warehouse Access Type
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv User Whs Access   RT) TYPE(RTVOBJ) FILE(PDL1REP)           AC1531985;
 PARAMETER(PAR.User_Code_Model);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.UWA_Inventory_Trans);
 PARAMETER(PAR.UWA_Lot_Loc_Trans);
 PARAMETER(PAR.UWA_Shipping_Trans);
 PARAMETER(PAR.UWA_Cross_Applications);
 PARAMETER(PAR.UWA_Unused_Status_1);
 PARAMETER(PAR.UWA_Unused_Status_2);
 PARAMETER(PAR.UWA_Unused_Sts_3);
 PARAMETER(PAR.UWA_Unused_Sts_4);
 PARAMETER(PAR.UWA_Unused_Sts_5);
 PARAMETER(PAR.UWA_Unused_Sts_6);
 PARAMETER(PAR.UWA_Unused_Sts_7);
 PARAMETER(PAR.UWA_Unused_Sts_8);
 PARAMETER(PAR.UWA_Unused_Sts_9);
 PARAMETER(PAR.UWA_Unused_Sts_10);
 PARAMETER(PAR.UWA_Unused_Sts_11);
 PARAMETER(PAR.UWA_Unused_Sts_12);
 PARAMETER(PAR.UWA_Unused_Sts_13);
 PARAMETER(PAR.UWA_Unused_Sts_14);
 PARAMETER(PAR.UWA_Unused_Sts_15);
 PARAMETER(PAR.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 ENDIF;

 //?Validate Access
 CASE;

 // IF PAR.Record Found USR is Record Not Found
 IF PAR.Record_Found_USR = 'N';

 // Send error message - 'Access Denied to &1 for Warehouse &2.'
 ERROR(USR2776);
 MSGPARM(PAR.User_Profile_Name);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 //?Validate Access
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Inventory Transactions
 CASE;

 // IF PAR.Access Area Needed USR is Inventory Transactions
 IF PAR.Access_Area_Needed_USR = 'I';

 CASE;

 // IF PAR.Access Needed USR is Update
 IF PAR.Access_Needed_USR = 'U';

 CASE;

 // IF PAR.UWA Inventory Trans is *Not Update
 IF PAR.UWA_Inventory_Trans = 'N'/'R';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 // IF PAR.Access Needed USR is Read
 IF PAR.Access_Needed_USR = 'R';

 CASE;

 // IF PAR.UWA Inventory Trans is None
 IF PAR.UWA_Inventory_Trans = 'N';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 //?Lot Loc Transactions
 CASE;

 // IF PAR.Access Area Needed USR is Lot Loc Transactions
 IF PAR.Access_Area_Needed_USR = 'L';

 CASE;

 // IF PAR.Access Needed USR is Update
 IF PAR.Access_Needed_USR = 'U';

 CASE;

 // IF PAR.UWA Lot Loc Trans is *Not Update
 IF PAR.UWA_Lot_Loc_Trans = 'N'/'R';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 // IF PAR.Access Needed USR is Read
 IF PAR.Access_Needed_USR = 'R';

 CASE;

 // IF PAR.UWA Lot Loc Trans is None
 IF PAR.UWA_Lot_Loc_Trans = 'N';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 //?Shipping Transactions
 CASE;

 // IF PAR.Access Area Needed USR is Shipping Transactions
 IF PAR.Access_Area_Needed_USR = 'S';

 CASE;

 // IF PAR.Access Needed USR is Update
 IF PAR.Access_Needed_USR = 'U';

 CASE;

 // IF PAR.UWA Shipping Trans is *Not Update
 IF PAR.UWA_Shipping_Trans = 'N'/'R';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 // IF PAR.Access Needed USR is Read
 IF PAR.Access_Needed_USR = 'R';

 CASE;

 // IF PAR.UWA Shipping Trans is None
 IF PAR.UWA_Shipping_Trans = 'N';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 //?Cross Applications
 CASE;

 // IF PAR.Access Area Needed USR is Cross Applications
 IF PAR.Access_Area_Needed_USR = 'C';

 CASE;

 // IF PAR.Access Needed USR is Update
 IF PAR.Access_Needed_USR = 'U';

 CASE;

 // IF PAR.UWA Unused Sts is *Not Update
 IF PAR.UWA_Cross_Applications = 'N'/'R';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 // IF PAR.Access Needed USR is Read
 IF PAR.Access_Needed_USR = 'R';

 CASE;

 // IF PAR.UWA Unused Sts is None
 IF PAR.UWA_Cross_Applications = 'N';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

}


ENDIF;

EXECUTE FUNCTION(Item Desc DRV) TYPE(DRVFLD)                                    AC1505592;
PARAMETER(CTL.Item_Desc_DRV);
PARAMETER(CTL.Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Desc_DRV);
 PARAMETER(WRK.Description_Line_Two);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Initialize subfile record from DBF record

//?If company selection is made, then select only that company
CASE;

// IF CTL.Company Number is not equal to zero
IF CTL.Company_Number <> *ZERO;

// AND DB1.Company Number NE CTL.Company Number
AND DB1.Company_Number <> CTL.Company_Number;

CASE;

// IF DB1.Multi Company Load is no
IF DB1.Multi_Company_Load = 'N';

//?RMC 7/27/06 ADDED THIS CASE FOR MULTI-PICKUP LOADS TO BE SEEN BY BOTH PLTS
// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

EXECUTE FUNCTION(Sel Load by Whs       IF) TYPE(EXCINTFUN)                      AC1512394;
PARAMETER(PGM.*Record_selected);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Company_Number);
PARAMETER(CTL.USR_Warehouse_Code);
PARAMETER(WRK.Whs_Ord_Ship_Sts_USR);
PARAMETER(WRK.Plant_Controlled_Sts);
{
 //?Execute internal function

 // PAR.*Record selected = CND.*NO
 PAR.*Record_selected = 'N';

 EXECUTE FUNCTION(Sel Order by Whs      RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1512395;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.*Record_selected);
 PARAMETER(PAR.Whs_Ord_Ship_Sts_USR);
 PARAMETER(PAR.Plant_Controlled_Sts);
 {
  //?USER: Initialize routine

  //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
  // PAR.Whs Ord Ship Sts USR = CND.Not Shipped
  PAR.Whs_Ord_Ship_Sts_USR = *BLANK;

  // PAR.Count USR = CON.*ZERO
  PAR.Count_USR = *ZERO;

  // PAR.Count 2 USR = CON.*ZERO
  PAR.Count_2_USR = *ZERO;

  // PAR.Plant Controlled Sts = CND.no
  PAR.Plant_Controlled_Sts = 'N';

  //?USER: Process Data record

  EXECUTE FUNCTION(Sel Order by Whs      RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1512396;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.*Record_selected);
  PARAMETER(PAR.Whs_Ord_Found_STS);
  {
   //?USER: Initialize routine

   // PAR.Whs Ord Found STS = CND.no
   PAR.Whs_Ord_Found_STS = 'N';

   //?USER: Process Data record

   CASE;

   // IF DB1.Detail Line Status is Not cancelled
   IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

   CASE;

   // IF PAR.Warehouse Code EQ DB1.Warehouse Code
   IF PAR.Warehouse_Code = DB1.Warehouse_Code;

   // PAR.*Record selected = CND.*YES
   PAR.*Record_selected = 'Y';

   // PAR.Whs Ord Found STS = CND.yes
   PAR.Whs_Ord_Found_STS = 'Y';

   QUIT;

   ENDIF;

   ENDIF;

  }

  CASE;

  // IF DB1.Trans Contol AS400/Plant is Plant
  IF DB1.Trans_Contol_AS400_Plant = 'P';

  // PAR.Plant Controlled Sts = CND.yes
  PAR.Plant_Controlled_Sts = 'Y';

  ENDIF;

  CASE;

  // IF PAR.Whs Ord Found STS is yes
  IF PAR.Whs_Ord_Found_STS = 'Y';

  CASE;

  // IF DB1.Header Status is Confirmed & Complete
  IF DB1.Header_Status = 'C'/'R';

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Count 2 USR = PAR.Count 2 USR + CON.1
  PAR.Count_2_USR = PAR.Count_2_USR + 1;

  ENDIF;

  ENDIF;

  //?USER: Exit processing

  CASE;

  // IF PAR.Count USR is GT 0
  IF PAR.Count_USR > *ZERO;

  CASE;

  // IF PAR.Count 2 USR is Greater than zero
  IF PAR.Count_2_USR > *ZERO;

  // PAR.Whs Ord Ship Sts USR = CND.Partial
  PAR.Whs_Ord_Ship_Sts_USR = 'P';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Whs Ord Ship Sts USR = CND.All
  PAR.Whs_Ord_Ship_Sts_USR = 'A';

  ENDIF;

  ENDIF;

 }

}


CASE;

// IF RCD.Load Status is Entered,Comb,Unlck,Locked
IF RCD.Load_Status = 'C'/'E'/'L'/'U';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF CTL.Item Code is Not Entered
IF CTL.Item_Code = *ZERO;

QUIT;

ENDIF;

CASE;

// IF PGM.*Record selected is Not *NO
IF PGM.*Record_selected = 'Y'/*BLANK;

EXECUTE FUNCTION(Val Itm exists on LD   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC2075412;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(CTL.Item_Code);
PARAMETER(LCL.Record_Found_USR);
PARAMETER(LCL.Quantity_Ordered_1_USR);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 EXECUTE FUNCTION(VAL Item Exists on ld RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2075415;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Quantity_Ordered);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Record_Found_USR);
 {
  //?USER: Initialize routine

  // PAR.Quantity Ordered = CON.*ZERO
  PAR.Quantity_Ordered = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF PAR.Item Code EQ DB1.Item Code
  IF PAR.Item_Code = DB1.Item_Code;

  // PAR.Quantity Ordered = PAR.Quantity Ordered + DB1.Quantity Ordered
  PAR.Quantity_Ordered = PAR.Quantity_Ordered + DB1.Quantity_Ordered;

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

  ENDIF;

 }

 // PAR.Quantity Ordered 1 USR = PAR.Quantity Ordered 1 USR + LCL.Quantity Ordered
 PAR.Quantity_Ordered_1_USR = PAR.Quantity_Ordered_1_USR + LCL.Quantity_Ordered;

}


CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?If carrier selection is made, then select only that carrier
CASE;

// IF CTL.Carrier Code is entered
IF CTL.Carrier_Code <> *BLANK;

CASE;

// IF CTL.Carrier Code is Select Blank Carriers
IF CTL.Carrier_Code = *;

CASE;

// IF DB1.Carrier Code is entered
IF DB1.Carrier_Code <> *BLANK;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.Carrier Code NE DB1.Carrier Code
IF CTL.Carrier_Code <> DB1.Carrier_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Fill trailer ID on screen
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

// RCD.Trailer ID USR = DB1.Trailer Id
RCD.Trailer_ID_USR = DB1.Trailer_Id;

ENDIF;

//?RST: Scheduled Ship Date
CASE;

// IF CTL.Scheduled Ship Date is entered
IF CTL.Scheduled_Ship_Date <> *ZERO;

CASE;

// IF DB1.Scheduled Ship Date NE CTL.Scheduled Ship Date
IF DB1.Scheduled_Ship_Date <> CTL.Scheduled_Ship_Date;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?*-----------------------------------------------------------------*
//?*-----------------------------------------------------------------*
// RCD.Numeric 4,0           USR = DB1.Schedule Sequence Number
RCD.Numeric_40_USR = DB1.Schedule_Sequence_Number;

// RCD.USR Time 4.0 = DB1.LPT Load Plan Start Tm / CON.100 *
RCD.USR_Time_4_0 = DB1.LPT_Load_Plan_Start_Tm / 100;

// RCD.USR To Time 4.0 = DB1.LPT Load Plan Start Tm / CON.100 *
RCD.USR_To_Time_4_0 = DB1.LPT_Load_Plan_Start_Tm / 100;

// RCD.Date                  USR = DB1.LPT Load Plan Start Dt
RCD.Date_USR = DB1.LPT_Load_Plan_Start_Dt;

// PAR.USR Flag 1 = CND.No
PAR.USR_Flag_1 = 'N';

ENDIF;

//?CALC: Subfile control function fields

//?f5=refresh
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

CASE;

// IF CTL.Numeric 4,0           USR is *Zero
IF CTL.Numeric_40_USR = *ZERO;

CASE;

// IF CTL.Numeric 4,0           USR NE PAR.Numeric 4,0           USR
IF CTL.Numeric_40_USR <> PAR.Numeric_40_USR;

// CTL.Schedule Sequence Number = CON.*ZERO
CTL.Schedule_Sequence_Number = *ZERO;

// PAR.Numeric 4,0           USR = CON.*ZERO
PAR.Numeric_40_USR = *ZERO;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Schedule Sequence Number = CTL.Numeric 4,0           USR
CTL.Schedule_Sequence_Number = CTL.Numeric_40_USR;

// PAR.Numeric 4,0           USR = CTL.Numeric 4,0           USR
PAR.Numeric_40_USR = CTL.Numeric_40_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

EXECUTE FUNCTION(Item Desc DRV) TYPE(DRVFLD)                                    AC1505592;
PARAMETER(CTL.Item_Desc_DRV);
PARAMETER(CTL.Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Desc_DRV);
 PARAMETER(WRK.Description_Line_Two);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Process subfile control (Pre-confirm)

//?Select
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Company Number
IF PGM.*Cursor_field = CTL.Company_Number;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(CTL.Company_Number);

// IF PGM.*Cursor field <IS> CTL.USR Warehouse Code
IF PGM.*Cursor_field = CTL.USR_Warehouse_Code;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(CTL.USR_Warehouse_Code);

// IF PGM.*Cursor field <IS> CTL.Item Code
IF PGM.*Cursor_field = CTL.Item_Code;

// Call program SEL Actv FG by WHS    SR.
CALL PROGRAM(SEL Actv FG by WHS    SR) ('PNMQSRR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.USR_Warehouse_Code);

// IF PGM.*Cursor field <IS> CTL.Carrier Code
IF PGM.*Cursor_field = CTL.Carrier_Code;

// Call program SEL Active Carrier     SR.
CALL PROGRAM(SEL Active Carrier     SR) ('OMY6SRR');
PARAMETER(CTL.Carrier_Code);

ENDIF;

ENDIF;

//?Reload Subfile if Warehouse Code changed.
CASE;

// IF PAR.Warehouse Code NE CTL.USR Warehouse Code
IF PAR.Warehouse_Code <> CTL.USR_Warehouse_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PAR.Warehouse Code = CTL.USR Warehouse Code
PAR.Warehouse_Code = CTL.USR_Warehouse_Code;

QUIT;

ENDIF;

//?Reload Subfile if Item Code changed.
CASE;

// IF LCL.Item Code NE CTL.Item Code
IF LCL.Item_Code <> CTL.Item_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// LCL.Item Code = CTL.Item Code
LCL.Item_Code = CTL.Item_Code;

QUIT;

ENDIF;

//?Reload Subfile if F5
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?Email it F21
CASE;

// IF CTL.*CMD key is *Print 21
IF CTL.*CMD_key = '21';

//?Req company/whse/date/item
CASE;

// IF CTL.Company Number is greater than zero
IF CTL.Company_Number > *ZERO;

// AND CTL.USR Warehouse Code is Not Blanks
AND CTL.USR_Warehouse_Code <> *BLANK;

// AND CTL.Scheduled Ship Date is entered
AND CTL.Scheduled_Ship_Date <> *ZERO;

// AND CTL.Item Code is Entered
AND CTL.Item_Code <> *ZERO;

// Call program Pmt Enter Email Addr  PV.
CALL PROGRAM(Pmt Enter Email Addr  PV) ('POWGPVR');
PARAMETER(LCL.Email_Address);

CASE;

// IF LCL.Email Address is Entered
IF LCL.Email_Address <> *BLANK;

// LCL.Numeric Field Needed  USR = CTL.Scheduled Ship Date
LCL.Numeric_Field_Needed_USR = CTL.Scheduled_Ship_Date;

// Execute command - 'EXECUTE SQL VIEW to Email'
EXECUTE COMMAND(USR4699);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Warehouse_Code);
PARAMETER(LCL.Numeric_Field_Needed_USR);
PARAMETER(LCL.Email_Address);
PARAMETER(CTL.Item_Code);

ENDIF;

//?Req company/whse/date/item
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Company/Warehouse/Sched Ship is required for Spreadsheet.'
ERROR(USR4697);
MSGPARM(CTL.USR_Warehouse_Code);
MSGPARM(CTL.Scheduled_Ship_Date);
MSGPARM(CTL.Company_Number);

ENDIF;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// PAR.USR Update Flag = CND.No
PAR.USR_Update_Flag = *BLANK;

// PAR.USR Print Detail = CND.no
PAR.USR_Print_Detail = 'N';

//?USER: Process subfile record (Pre-confirm)

//?* Ensure have current data  (put miles into wrk context E00207)
EXECUTE FUNCTION(RTV WW Screen Fields   RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1384832;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Load_Status);
PARAMETER(RCD.Total_Load_Order_Weight);
PARAMETER(RCD.Flat_Amount);
PARAMETER(RCD.Allocate_Pounds_Miles);
PARAMETER(RCD.Trailer_Id);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Truck_Size);
PARAMETER(RCD.Load_Type);
PARAMETER(RCD.Schedule_Sequence_Number);
PARAMETER(WRK.Total_Load_Miles);
PARAMETER(RCD.Shipping_Method);
PARAMETER(RCD.Ship_From_Warehouse);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(RCD.Load_Acceptance_Flag);
PARAMETER(RCD.Tot_Pallet_Tare);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Error if Load Header Not Found
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Error if Load Header Not Found
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Load Header &1 not found.'
ERROR(USR2313);
MSGPARM(RCD.Load_ID);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

// RCD.Trailer ID USR = RCD.Trailer Id
RCD.Trailer_ID_USR = RCD.Trailer_Id;

//?Validate lpt date and time
CASE;

// IF RCD.USR Time 4.0 is Entered
IF ( RCD.USR_Time_4_0 <> 0;

// AND RCD.Date                  USR is Not Entered
AND RCD.Date_USR = *ZERO );

// OR RCD.Date                  USR GT WRK.ZERO
OR ( RCD.Date_USR > WRK.ZERO;

// AND RCD.USR Time 4.0 is Zero
AND RCD.USR_Time_4_0 = *ZERO );

// Send error message - 'Must enter Date and time.'
ERROR(USR4698);
MSGPARM(RCD.Date_USR);
MSGPARM(RCD.USR_Time_4_0);

ENDIF;

CASE;

// IF RCD.USR Time 4.0 NE RCD.USR To Time 4.0
IF RCD.USR_Time_4_0 <> RCD.USR_To_Time_4_0;

// OR RCD.LPT Load Plan Start Dt NE RCD.Date                  USR
OR RCD.LPT_Load_Plan_Start_Dt <> RCD.Date_USR;

// PAR.USR Update Flag = CND.Yes
PAR.USR_Update_Flag = 'Y';

ENDIF;

//?USER: Final processing (Pre-confirm)

CASE;

// IF PAR.USR Update Flag is No
IF PAR.USR_Update_Flag = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

// PAR.USR Update Flag = CND.No
PAR.USR_Update_Flag = *BLANK;

ENDIF;

//?USER: Process subfile record (Post-confirm)

CASE;

// IF RCD.USR Time 4.0 is Entered
IF RCD.USR_Time_4_0 <> 0;

// LCL.LPT Load Plan Start Tm = RCD.USR Time 4.0 * CON.100 *
LCL.LPT_Load_Plan_Start_Tm = RCD.USR_Time_4_0 * 100;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.LPT Load Plan Start Tm = CON.*ZERO
LCL.LPT_Load_Plan_Start_Tm = *ZERO;

ENDIF;

EXECUTE FUNCTION(RTV Chg LPT Start Tm  RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC2086686;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Date_USR);
PARAMETER(LCL.LPT_Load_Plan_Start_Tm);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(CHG LPT Start time    CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC2086687;
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.LPT_Load_Plan_Start_Dt);
 PARAMETER(PAR.LPT_Load_Plan_Start_Tm);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

  // DB1.Job Name = JOB.*JOB
  DB1.Job_Name = JOB.*JOB;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

  //?S14625 03/11/19 DN-Create TMS Load Trigger.
  CASE;

  // IF DB1.MG Created Load is Yes
  IF DB1.MG_Created_Load = 'Y';

  // LCL.Load Change Type = CND.Load Plan Start Tm Change
  LCL.Load_Change_Type = 'LPTCHG';

  // Call program Exc Crt TMS Load Trg  XF.
  CALL PROGRAM(Exc Crt TMS Load Trg  XF) ('PBXOXFR');
  PARAMETER(JOB.*Job_date);
  PARAMETER(JOB.*Job_time);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Company_Number);
  PARAMETER(LCL.TMS_LH_Field_Chg_Text);
  PARAMETER('A');
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Load_Change_Type);
  PARAMETER(LCL.Load_Change_Type_2);
  PARAMETER(LCL.Load_Change_Type_3);
  PARAMETER(LCL.Load_Change_Type_4);
  PARAMETER(LCL.Load_Change_Type_5);

  ENDIF;

 }

}


//?USER: Final processing (Post-confirm)

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

