// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNL9EFR
// ?Date: 14.08.2025 Time: 03:45:35
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?get acctng co or pass it in ??
// LCL.Accounting Company = PAR.Company Number
LCL.Accounting_Company = PAR.Company_Number;

//?***** change log and comments
DO;

//?** 02/23/2010 LJB E000512
//?** new parm added to ARACTRET-VAL Acct ID JDE-8 dgt  UP
//? 5/19/2020 JBB P16169 - JDE World to JDE Enterprise 1
//?               SDN465    Add Company Number parameter to call of
//?                         programs SELSUB and ARACTRET
ENDDO;

//?USER: Initialize subfile header

MOVE *ALL (To: CTL From: PAR);

EXECUTE FUNCTION(Shipping Method Desc DRV) TYPE(DRVFLD)                         AC1927077;
PARAMETER(CTL.Shipping_Method_Desc_DRV);
PARAMETER(CTL.Shipping_Method);
{
 //?Calculate derived field

 // PAR.Shipping Method Desc DRV = Condition name of PAR.Shipping Method
 PAR.Shipping_Method_Desc_DRV = RTVCND(PAR.Shipping_Method);

}


EXECUTE FUNCTION(Warehouse Desc DRV) TYPE(DRVFLD)                               AC1532477;
PARAMETER(CTL.Warehouse_Desc_DRV);
PARAMETER(CTL.Warehouse_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

}


//?RMC - this wasnt being populated 3.31.22
// CTL.Billing Activity Desc = Condition name of PAR.Billing Activity Type
CTL.Billing_Activity_Desc = RTVCND(PAR.Billing_Activity_Type);

//?USER: Initialize subfile record (existing record)

EXECUTE FUNCTION(Accrual Description DRV) TYPE(DRVFLD)                          AC1706268;
PARAMETER(RCD.Accrual_Description_DRV);
PARAMETER(RCD.Accrual_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Accrual Descript   RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1285204;
 PARAMETER(PAR.Accrual_Code);
 PARAMETER(PAR.Accrual_Description_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Validate subfile record fields

//?F4=Accrual Code
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

CASE;

// IF PGM.*Cursor field <IS> RCD.Accrual Code
IF PGM.*Cursor_field = RCD.Accrual_Code;

// Call program SEL Acrl Code by/REnt SR.
CALL PROGRAM(SEL Acrl Code by/REnt SR) ('PNNGSRR');
PARAMETER('O');
PARAMETER(RCD.Accrual_Code);

ENDIF;

ENDIF;

//?F4=Rate Code
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

CASE;

// IF PGM.*Cursor field <IS> RCD.Rate Code
IF PGM.*Cursor_field = RCD.Accrual_Rate_Code;

// Call program Sel Accrl Pgm Rate    SL.
CALL PROGRAM(Sel Accrl Pgm Rate    SL) ('PNNMSRR');
PARAMETER(RCD.Accrual_Code);
PARAMETER(RCD.Accrual_Rate_Code);

ENDIF;

ENDIF;

//?F4=Sub Code
CASE;

// IF PGM.*Cursor field <IS> RCD.G/L Sub Account
IF PGM.*Cursor_field = RCD.G_L_Sub_Account;

// AND CTL.*CMD key is *Prompt
AND CTL.*CMD_key = '04';

CASE;

// IF RCD.Accrual Code is Not Entered
IF RCD.Accrual_Code = *BLANK;

// Send error message - 'Discount/Addition Code Required.'
ERROR(USR4258);
MSGPARM(RCD.Accrual_Code);

// IF *OTHERWISE
IF *OTHERWISE;

//?RTV: Accrual Type
// Call program RTV Accrual Desc,Type XF.
CALL PROGRAM(RTV Accrual Desc,Type XF) ('PNKMXFR');
PARAMETER(RCD.Accrual_Code);
PARAMETER(LCL.Accrual_Description);
PARAMETER(RCD.Accrual_Type);

//?RTV: Account ID
// Call program Val Acct Sub Type     XF.
CALL PROGRAM(Val Acct Sub Type     XF) ('PLOZXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Accrual_Type);
PARAMETER('H');
PARAMETER(LCL.G_L_Account_Id_USR);
PARAMETER(LCL.Record_Found_USR);

//?RTV: G/L Cost Center/Object
// Call program VAL Acct ID JDE-8 dgt  UP.
CALL PROGRAM(VAL Acct ID JDE-8 dgt  UP) ('ARACTRET');
PARAMETER(LCL.G_L_Account_Id_USR);
PARAMETER(LCL.Cost_Center);
PARAMETER(LCL.Object_Account);
PARAMETER(LCL.Subsidiary);
PARAMETER(LCL.Description);
PARAMETER(LCL.G_L_Posting_Company);
PARAMETER(LCL.JDE_Posting_Edit_Code_USR);
PARAMETER(LCL.Error_Return_text);

//?F4=G/L Sub Account Code
CASE;

// IF PGM.*Cursor field <IS> RCD.G/L Sub Account
IF PGM.*Cursor_field = RCD.G_L_Sub_Account;

// AND CTL.*CMD key is *Prompt
AND CTL.*CMD_key = '04';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?For Sub account sel --> accrual code must be entered
CASE;

// IF RCD.Accrual Code is Entered
IF RCD.Accrual_Code <> *BLANK;

CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

//?SDN465: Added Company Number as an input parm on call to SELSUB
// Call program Sel Sub Account       UP.
CALL PROGRAM(Sel Sub Account       UP) ('SELSUB');
PARAMETER(PGM.*Return_code);
PARAMETER(LCL.Cost_Center);
PARAMETER(LCL.Object_Account);
PARAMETER(RCD.G_L_Sub_Account);
PARAMETER(LCL.G_L_Account_Id_USR);
PARAMETER(LCL.Description_Usr_50);
PARAMETER(CTL.Company_Number);

// IF *OTHERWISE
IF *OTHERWISE;

// Send information message - 'G/L Account Not Found for D/A Type.'
MESSAGE(USR4257 *INFO);
MSGPARM(RCD.Accrual_Type);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?F10=Display Customer Accrual Programs
CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

// Call program WW Cust Accruals-Dsp  DF.
CALL PROGRAM(WW Cust Accruals-Dsp  DF) ('PPB2DFR');
PARAMETER(CTL.Ship_To_Customer);

ENDIF;

//?CALC: Subfile record function fields

EXECUTE FUNCTION(Accrual Description DRV) TYPE(DRVFLD)                          AC1706268;
PARAMETER(RCD.Accrual_Description_DRV);
PARAMETER(RCD.Accrual_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Accrual Descript   RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1285204;
 PARAMETER(PAR.Accrual_Code);
 PARAMETER(PAR.Accrual_Description_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Validate subfile record relations

//?VAL: Accrual Code
CASE;

// IF RCD.Accrual Code is Entered
IF RCD.Accrual_Code <> *BLANK;

EXECUTE FUNCTION(Val Acrl Code by/REnt RT) TYPE(RTVOBJ) FILE(OMHLREP)           AC1964678;
PARAMETER('O');
PARAMETER(RCD.Accrual_Code);
PARAMETER(LCL.Record_Found_USR);
PARAMETER(RCD.Accrual_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send error message - 'Accrual Program Code not found.'
ERROR(USR1514);
MSGPARM(RCD.Accrual_Code);

ENDIF;

//?VAL: Accrual Code
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Accrual Program Code is required.'
ERROR(USR4229);
MSGPARM(RCD.Accrual_Code);

ENDIF;

//?VAL: Rate Code
CASE;

// IF RCD.Rate Code is Entered
IF RCD.Accrual_Rate_Code <> *BLANK;

EXECUTE FUNCTION(Val Rate Code Exists  RT) TYPE(RTVOBJ) FILE(PNFVREP)           AC1966118;
PARAMETER(RCD.Accrual_Code);
PARAMETER(RCD.Accrual_Rate_Code);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send error message - 'Accrual Program Rate not found.'
ERROR(USR4235);
MSGPARM(RCD.Accrual_Rate_Code);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Pgm Rate Info     RT) TYPE(RTVOBJ) FILE(PNFVREP)           AC1966143;
PARAMETER(RCD.Accrual_Code);
PARAMETER(RCD.Accrual_Rate_Code);
PARAMETER(LCL.Accrual_Rate_Description);
PARAMETER(LCL.Accrual_Rate);
PARAMETER(LCL.Accrual_Rate_Type);
PARAMETER(LCL.G_L_Sub_Account);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?DEFAULT:  ODA Description
CASE;

// IF RCD.ODA Description is equal to blank
IF RCD.ODA_Description = *BLANK;

// RCD.ODA Description = LCL.Accrual Rate Description
RCD.ODA_Description = LCL.Accrual_Rate_Description;

ENDIF;

//?DEFAULT:  Accrual Rate
CASE;

// IF RCD.Accrual Rate is equal to zero
IF RCD.Accrual_Rate = *ZERO;

// RCD.Accrual Rate = LCL.Accrual Rate
RCD.Accrual_Rate = LCL.Accrual_Rate;

ENDIF;

//?DEFAULT:  Accrual Rate Type
CASE;

// IF RCD.Accrual Rate Type is *NONE
IF RCD.Accrual_Rate_Type = *BLANK;

// RCD.Accrual Rate Type = LCL.Accrual Rate Type
RCD.Accrual_Rate_Type = LCL.Accrual_Rate_Type;

ENDIF;

//?DEFAULT:  G/L Sub Code
CASE;

// IF RCD.G/L Sub Account is not entered
IF RCD.G_L_Sub_Account = *BLANK;

// RCD.G/L Sub Account = LCL.G/L Sub Account
RCD.G_L_Sub_Account = LCL.G_L_Sub_Account;

ENDIF;

ENDIF;

ENDIF;

//?VAL: G/L Sub Account Code
CASE;

// IF RCD.G/L Sub Account is Entered
IF RCD.G_L_Sub_Account <> *BLANK;

//?RTV: Account ID
// Call program Val Acct Sub Type     XF.
CALL PROGRAM(Val Acct Sub Type     XF) ('PLOZXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Accrual_Type);
PARAMETER('H');
PARAMETER(LCL.G_L_Account_Id_USR);
PARAMETER(LCL.Record_Found_USR);

//?RTV: G/L Cost Center/Object
// Call program VAL Acct ID JDE-8 dgt  UP.
CALL PROGRAM(VAL Acct ID JDE-8 dgt  UP) ('ARACTRET');
PARAMETER(LCL.G_L_Account_Id_USR);
PARAMETER(LCL.Cost_Center);
PARAMETER(LCL.Object_Account);
PARAMETER(LCL.Subsidiary);
PARAMETER(LCL.Description);
PARAMETER(LCL.G_L_Posting_Company);
PARAMETER(LCL.JDE_Posting_Edit_Code_USR);
PARAMETER(LCL.Error_Return_text);

//?VAL: Account
// Call program Val CC/Obj/Sub        UP.
CALL PROGRAM(Val CC/Obj/Sub        UP) ('VALCCOBSB');
PARAMETER(LCL.Cost_Center);
PARAMETER(LCL.Object_Account);
PARAMETER(RCD.G_L_Sub_Account);
PARAMETER(PGM.*Return_code);

// RCD.Comment = CON.*BLANK
RCD.Comment = *BLANK;

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Call program VAL Acct ID JDE-8 dgt  UP.
CALL PROGRAM(VAL Acct ID JDE-8 dgt  UP) ('ARACTRET');
PARAMETER(LCL.G_L_Account_Id_USR);
PARAMETER(LCL.Cost_Center);
PARAMETER(LCL.Object_Account);
PARAMETER(LCL.G_L_Sub_Account);
PARAMETER(RCD.Comment);
PARAMETER(LCL.G_L_Posting_Company);
PARAMETER(LCL.JDE_Posting_Edit_Code_USR);
PARAMETER(LCL.Error_Return_text);

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Comment = CONCAT(RCD.Comment,LCL.Cost Center. . . . . . .,CON.1)
RCD.Comment = RCD.Comment + LCL.Cost_Center (1);

// RCD.Comment = CONCAT(RCD.Comment,LCL.Object Account . . . . .,CON.1)
RCD.Comment = RCD.Comment + LCL.Object_Account (1);

// RCD.Comment = CONCAT(RCD.Comment,RCD.G/L Sub Account,CON.1)
RCD.Comment = RCD.Comment + RCD.G_L_Sub_Account (1);

// RCD.Comment = CONCAT(RCD.Comment,CON.needed for Invoice Post,CON.1)
RCD.Comment = RCD.Comment + 'needed for Invoice Post' (1);

// RCD.Comment = CONCAT(RCD.Comment,CON.in JDE.,CON.1)
RCD.Comment = RCD.Comment + 'in JDE.' (1);

// Send information message - 'G/L Account Not Found for D/A Type.'
MESSAGE(USR4257 *INFO);
MSGPARM(RCD.Accrual_Type);

ENDIF;

//?VAL: G/L Sub Account Code
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Comment = CONCAT(CON.may be needed for,CON.invoicing in JDE.,CON.1)
RCD.Comment = 'may be needed for' + 'invoicing in JDE.' (1);

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Ord Dtl Accr      IF) TYPE(EXCINTFUN) FILE(OMHQCPP)        AC1957745;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Accrual_Rate);
PARAMETER(RCD.Accrual_Rate_Type);
PARAMETER(RCD.Accrual_Type);
PARAMETER(RCD.ODA_Description);
PARAMETER(RCD.G_L_Sub_Account);
PARAMETER(RCD.ODA_Status_1);
PARAMETER(RCD.ODA_Status_2);
PARAMETER(RCD.ODA_Status_3);
PARAMETER(RCD.ODA_Status_4);
PARAMETER(RCD.ODA_Status_5);
PARAMETER(RCD.ODA_Status_6);
PARAMETER(RCD.Accrual_Code);
PARAMETER(RCD.Accrual_Rate_Code);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Next Sequence     RT) TYPE(RTVOBJ) FILE(OMHQCPP)           AC1957748;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Sequence_Number);
 {
  //?USER: Processing if Data record not found

  // PAR.Sequence Number = CON.1
  PAR.Sequence_Number = 1;

  //?USER: Process Data record

  // PAR.Sequence Number = DB1.Sequence Number + CON.1
  PAR.Sequence_Number = DB1.Sequence_Number + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Ord Dtl Accr      CR) TYPE(CRTOBJ) FILE(OMHQCPP)           AC1434118;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Sequence_Number);
 PARAMETER(PAR.Accrual_Rate);
 PARAMETER(PAR.Accrual_Rate_Type);
 PARAMETER(PAR.Accrual_Type);
 PARAMETER(PAR.ODA_Description);
 PARAMETER(PAR.G_L_Sub_Account);
 PARAMETER(PAR.ODA_Status_1);
 PARAMETER(PAR.ODA_Status_2);
 PARAMETER(PAR.ODA_Status_3);
 PARAMETER(PAR.ODA_Status_4);
 PARAMETER(PAR.ODA_Status_5);
 PARAMETER(PAR.ODA_Status_6);
 PARAMETER(PAR.Accrual_Code);
 PARAMETER(PAR.Accrual_Rate_Code);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Create_Date);
 PARAMETER(PAR.Create_Time);
 PARAMETER(PAR.Create_User);
 PARAMETER(PAR.Create_Program);
 PARAMETER(PAR.Change_Date);
 PARAMETER(PAR.Change_Time);
 PARAMETER(PAR.Change_User);
 PARAMETER(PAR.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

 }

}


//?USER: Delete DBF record

EXECUTE FUNCTION(DLT Ord Dtl Accr Purge DL) TYPE(DLTOBJ) FILE(OMHQCPP)          AC1842109;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Sequence_Number);

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Ord Dtl Accr      CH) TYPE(CHGOBJ) FILE(OMHQCPP)           AC1434119;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Sequence_Number);
PARAMETER(RCD.Accrual_Rate);
PARAMETER(RCD.Accrual_Rate_Type);
PARAMETER(RCD.Accrual_Type);
PARAMETER(RCD.ODA_Description);
PARAMETER(RCD.G_L_Sub_Account);
PARAMETER(RCD.ODA_Status_1);
PARAMETER(RCD.ODA_Status_2);
PARAMETER(RCD.ODA_Status_3);
PARAMETER(RCD.ODA_Status_4);
PARAMETER(RCD.ODA_Status_5);
PARAMETER(RCD.ODA_Status_6);
PARAMETER(RCD.Accrual_Code);
PARAMETER(RCD.Accrual_Rate_Code);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Create_Date);
PARAMETER(RCD.Create_Time);
PARAMETER(RCD.Create_User);
PARAMETER(RCD.Create_Program);
PARAMETER(RCD.Change_Date);
PARAMETER(RCD.Change_Time);
PARAMETER(RCD.Change_User);
PARAMETER(RCD.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

}


