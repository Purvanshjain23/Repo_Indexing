// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDPIE1R
// ?Date: 14.08.2025 Time: 03:29:14
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?***** Change Log and Comments
DO;

//?** FP1309 03/26/2010 SLM  ORDER HEADER AGE CODE WITH BLANKS *ADD
//?** FP1309 03/26/2010 SLM  ORDER HEADER AGE CODE WRK FIELD *HIDE
//?** FT665  02/19/2008 RMC  output time of orig entry
//?** E3387  09/09/2014 JJH  Display Shipping Method as Output and
//?          Optional.  Removed restriction for Shipping Method
//?          NE Blank.
//?** E4057  06/11/2015 JJH  Default Affect Auto Accrual with Y=Yes
ENDDO;

//?Set program mode
CASE;

// IF PAR.Order Number is Equal to zeros
IF PAR.Order_Number = *ZERO;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

EXECUTE FUNCTION(RTV OP status          RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1129149;
PARAMETER(000);
PARAMETER(PAR.Auto_Order_Numbering);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Set Application
CASE;

// IF PAR.Billing Activity Type is Credit Memo
IF PAR.Billing_Activity_Type = '2';

// PAR.Application Code = CND.Credit Memos
PAR.Application_Code = 'C/M';

EXECUTE FUNCTION(RTV Dflt Type for Co   RT) TYPE(RTVOBJ) FILE(OPC0REP)          AC1316112;
PARAMETER(JOB.*USER);
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Type_Sales);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Set Application
// IF PAR.Billing Activity Type is Debit Memo
IF PAR.Billing_Activity_Type = '3';

// PAR.Application Code = CND.Debit Memos
PAR.Application_Code = 'D/M';

EXECUTE FUNCTION(RTV Dflt Type for Co   RT) TYPE(RTVOBJ) FILE(OPC0REP)          AC1316112;
PARAMETER(JOB.*USER);
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Type_Sales);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Set Application
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Application Code = CND.Memo Processing
PAR.Application_Code = 'MEMO';

// PAR.Order Type - Sales = CON.*BLANK
PAR.Order_Type_Sales = *BLANK;

ENDIF;

//?Set Order type
CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

//?Set default Order type
CASE;

// IF PAR.Billing Activity Type is Credit Memo
IF PAR.Billing_Activity_Type = '2';

EXECUTE FUNCTION(RTV Dflt Type for Co   RT) TYPE(RTVOBJ) FILE(OPC0REP)          AC1316112;
PARAMETER(JOB.*USER);
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Type_Sales);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Set default Order type
// IF PAR.Billing Activity Type is Debit Memo
IF PAR.Billing_Activity_Type = '3';

EXECUTE FUNCTION(RTV Dflt Type for Co   RT) TYPE(RTVOBJ) FILE(OPC0REP)          AC1316112;
PARAMETER(JOB.*USER);
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Type_Sales);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Set default Order type
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Order Type - Sales = CON.*BLANK
PAR.Order_Type_Sales = *BLANK;

ENDIF;

ENDIF;

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER(PAR.Application_Code);
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// KEY.Company Number = PAR.Company Number
KEY.Company_Number = PAR.Company_Number;

// KEY.Order Number = PAR.Order Number
KEY.Order_Number = PAR.Order_Number;

//?** FP1251 Determine if Seaboard, Dailys, HPB, etc.
// Call program Rtv Plant Co/Org      XF.
CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
PARAMETER(KEY.Company_Number);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(WRK.Company_Organization);

//?USER: Initialize key screen

EXECUTE FUNCTION(RTV Company Name Only  RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1100959;
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Company_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// KEY.Accounting Company Number = PAR.Accounting Company Number
KEY.Company_Number = PAR.Company_Number;

// KEY.Order Number = PAR.Order Number
KEY.Order_Number = PAR.Order_Number;

// KEY.@Order Type Code = PAR.Order Type - Sales
KEY.@Order_Type_Code = PAR.Order_Type_Sales;

//?USER: Validate key screen

// WRK.Record Selected       USR = CND.no
WRK.Record_Selected_USR = 'N';

//?Add Mode processing
CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

//?Gets the next number to use temporarily.
EXECUTE FUNCTION(RTV Next Order Number  RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1316902;
PARAMETER(*ZERO);
PARAMETER(KEY.Order_Number);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Process key screen selects
CASE;

// IF KEY.*CMD key is *Prompt
IF KEY.*CMD_key = '04';

// AND PGM.*Cursor field <IS> KEY.Accounting Company Number
AND PGM.*Cursor_field = KEY.Company_Number;

// Call program SEL Co By Number       SR.
CALL PROGRAM(SEL Co By Number       SR) ('PDMESRR');
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Company_Name);

// WRK.Record Selected       USR = CND.yes
WRK.Record_Selected_USR = 'Y';

//?Process key screen selects
// IF KEY.*CMD key is *Prompt
IF KEY.*CMD_key = '04';

// AND PGM.*Cursor field <IS> KEY.@Order Type Code
AND PGM.*Cursor_field = KEY.@Order_Type_Code;

// Call program SEL Credit/Debit Memo  SR.
CALL PROGRAM(SEL Credit/Debit Memo  SR) ('PDPKSRR');
PARAMETER(KEY.@Order_Type_Code);
PARAMETER(PAR.Billing_Activity_Type);

// WRK.Record Selected       USR = CND.yes
WRK.Record_Selected_USR = 'Y';

//?Process key screen selects
// IF KEY.*CMD key is *Prompt
IF KEY.*CMD_key = '04';

// AND PGM.*Cursor field <IS> KEY.@Order Number Alpha
AND PGM.*Cursor_field = KEY.@Order_Number_Alpha;

//?Will need to select only Invoice type orders ??
// Call program Zzz Order by PO        SR.
CALL PROGRAM(Zzz Order by PO        SR) ('PDHKSRR');
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.@Order_Number_Alpha);
PARAMETER(WRK.Customer_Purchase_Order_#);

// WRK.Record Selected       USR = CND.yes
WRK.Record_Selected_USR = 'Y';

//?Process key screen selects
// IF KEY.*CMD key is *Prompt
IF KEY.*CMD_key = '04';

// AND PGM.*Cursor field <IS> KEY.@Invoice Number
AND PGM.*Cursor_field = KEY.@Invoice_Number;

// Call program SEL A/R Header         SR.
CALL PROGRAM(SEL A/R Header         SR) ('PDPGSRR');
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.@Invoice_Number);
PARAMETER(WRK.Invoice_Suffix);

// WRK.Record Selected       USR = CND.yes
WRK.Record_Selected_USR = 'Y';

ENDIF;

EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
PARAMETER(KEY.@Order_Type_Code);
PARAMETER(WRK.Billing_Activity_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Error if not found or bill type mismatch
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Description for error message
CASE;

// IF PAR.Billing Activity Type EQ WRK.BLANK
IF PAR.Billing_Activity_Type = WRK.BLANK;

// WRK.Order Type Description = CON.Credit or Debit Memo
WRK.Order_Type_Description = 'Credit or Debit Memo';

//?Description for error message
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Order Type Description = Condition name of PAR.Billing Activity Type
WRK.Order_Type_Description = RTVCND(PAR.Billing_Activity_Type);

ENDIF;

CASE;

// IF PAR.Billing Activity Type EQ WRK.BLANK
IF PAR.Billing_Activity_Type = WRK.BLANK;

// AND WRK.Billing Activity Type is Credit or Debit Memo
AND WRK.Billing_Activity_Type = '2'/'3';

// IF PAR.Billing Activity Type EQ WRK.Billing Activity Type
IF PAR.Billing_Activity_Type = WRK.Billing_Activity_Type;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Order type is invalid for &1'
ERROR(USR1895);
MSGPARM(WRK.Order_Type_Description);
MSGPARM(PAR.Order_Type_Sales);

ENDIF;

//?Error if not found or bill type mismatch
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Order Types not found.'
ERROR(USR1063);
MSGPARM(KEY.Company_Number);
MSGPARM(KEY.@Order_Type_Code);

ENDIF;

//?Validate original order number
CASE;

// IF KEY.@Order Number Alpha is NE Zero
IF KEY.@Order_Number_Alpha <> *ZERO;

EXECUTE FUNCTION(RTV Invoice Number     RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1322426;
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.@Order_Number_Alpha);
PARAMETER(KEY.@Invoice_Number);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Original order not found'
ERROR(USR1777);
MSGPARM(KEY.@Order_Number_Alpha);

ENDIF;

ENDIF;

//?Validate original invoice number
CASE;

// IF KEY.@Invoice Number is Not equal to zero
IF KEY.@Invoice_Number <> *ZERO;

EXECUTE FUNCTION(RTV Order # for Invc   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1344540;
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.@Invoice_Number);
PARAMETER(KEY.@Order_Number_Alpha);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Original invoice not found'
ERROR(USR1778);
MSGPARM(KEY.@Invoice_Number);

ENDIF;

ENDIF;

//?Check for other memos attached to original order number
CASE;

// IF KEY.@Order Number Alpha is NE Zero
IF KEY.@Order_Number_Alpha <> *ZERO;

EXECUTE FUNCTION(VAL Addl Memos for Ord RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1467127;
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.@Order_Number_Alpha);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF DB1.Billing Activity Type is Credit or Debit Memo
 IF DB1.Billing_Activity_Type = '2'/'3';

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 QUIT;

 ENDIF;

}


CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// Call program ZzzAttached Memos      DF.
CALL PROGRAM(ZzzAttached Memos      DF) ('PDY5DFR');
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.@Order_Number_Alpha);

ENDIF;

ENDIF;

//?Ensure that if a field was Selected, the program does not continue
CASE;

// IF WRK.Record Selected       USR is yes
IF WRK.Record_Selected_USR = 'Y';

// Send error message - '&1'
ERROR(USR1969);
MSGPARM(WRK.BLANK);

ENDIF;

ENDIF;

//?USER: Initialize detail screen (new record)

//?Determine whether to hide order # in add mode
CASE;

// IF PAR.Auto Order Numbering? is yes
IF PAR.Auto_Order_Numbering = 'Y';

// AND PGM.*Program mode is *ADD
AND PGM.*Program_mode = 'ADD';

// DTL.USR Display field = CND.no
DTL.USR_Display_field = 'N';

//?Determine whether to hide order # in add mode
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.USR Display field = CND.yes
DTL.USR_Display_field = 'Y';

ENDIF;

// DTL.Company Name = KEY.Company Name
DTL.Company_Name = KEY.Company_Name;

// DTL.Order Type - Sales = KEY.@Order Type Code
DTL.Order_Type_Sales = KEY.@Order_Type_Code;

// DTL.Attach to Order Number = KEY.@Order Number Alpha
DTL.Attach_to_Order_Number = KEY.@Order_Number_Alpha;

// DTL.Attach to Invoice Number = KEY.@Invoice Number
DTL.Attach_to_Invoice_Number = KEY.@Invoice_Number;

//?E4057 JJH 06/09/15 - Default Affect Auto accrual with Yes
// DTL.Affect Auto Accruals = CND.Affect Auto Accruals
DTL.Affect_Auto_Accruals = 'Y';

//?Fill fields from original order
CASE;

// IF DTL.Attach to Order Number is Not equal to zeros
IF DTL.Attach_to_Order_Number <> *ZERO;

EXECUTE FUNCTION(RTV Orig Order Fields  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1317018;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Attach_to_Order_Number);
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Ship_To_Name);
PARAMETER(DTL.Ship_To_Address_Line_1);
PARAMETER(DTL.Ship_To_Address_Line_2);
PARAMETER(DTL.Ship_To_Address_Line_3);
PARAMETER(DTL.Ship_To_City);
PARAMETER(DTL.Ship_To_State_Code);
PARAMETER(DTL.Ship_To_Zip_Postal_Code);
PARAMETER(DTL.Bill_to_Customer);
PARAMETER(DTL.Bill_to_Name);
PARAMETER(DTL.Bill_to_Address_Line_1);
PARAMETER(DTL.Bill_to_Address_Line_2);
PARAMETER(DTL.Bill_to_Address_Line_3);
PARAMETER(DTL.Bill_to_City);
PARAMETER(DTL.Bill_to_State_Code);
PARAMETER(DTL.Bill_to_Zip_Postal_Code);
PARAMETER(DTL.Customer_Purchase_Order_#);
PARAMETER(DTL.Export_Status);
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(DTL.Manager_Level_Code);
PARAMETER(DTL.VP_Level_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Fill fields from original order
// IF *OTHERWISE
IF *OTHERWISE;

//?Fill fields from original order via invoice
CASE;

// IF DTL.Attach to Invoice Number is Not equal to zero
IF DTL.Attach_to_Invoice_Number <> *ZERO;

EXECUTE FUNCTION(RTV Order # for Invc   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1344540;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Attach_to_Invoice_Number);
PARAMETER(DTL.Attach_to_Order_Number);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

EXECUTE FUNCTION(RTV Orig Order Fields  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1317018;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Attach_to_Order_Number);
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Ship_To_Name);
PARAMETER(DTL.Ship_To_Address_Line_1);
PARAMETER(DTL.Ship_To_Address_Line_2);
PARAMETER(DTL.Ship_To_Address_Line_3);
PARAMETER(DTL.Ship_To_City);
PARAMETER(DTL.Ship_To_State_Code);
PARAMETER(DTL.Ship_To_Zip_Postal_Code);
PARAMETER(DTL.Bill_to_Customer);
PARAMETER(DTL.Bill_to_Name);
PARAMETER(DTL.Bill_to_Address_Line_1);
PARAMETER(DTL.Bill_to_Address_Line_2);
PARAMETER(DTL.Bill_to_Address_Line_3);
PARAMETER(DTL.Bill_to_City);
PARAMETER(DTL.Bill_to_State_Code);
PARAMETER(DTL.Bill_to_Zip_Postal_Code);
PARAMETER(DTL.Customer_Purchase_Order_#);
PARAMETER(DTL.Export_Status);
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(DTL.Manager_Level_Code);
PARAMETER(DTL.VP_Level_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

ENDIF;

ENDIF;

//?Determine if Ship to Customer should be input or output field
CASE;

// IF DTL.Attach to Order Number is Equal to zeros
IF DTL.Attach_to_Order_Number = *ZERO;

// AND DTL.Attach to Invoice Number is Equal to zero
AND DTL.Attach_to_Invoice_Number = *ZERO;

// PAR.USR Update Flag = CND.Yes
PAR.USR_Update_Flag = 'Y';

//?Determine if Ship to Customer should be input or output field
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Update Flag = CND.No
PAR.USR_Update_Flag = *BLANK;

ENDIF;

//?Not a claim memo, so screen is input capable.
DO;

// DTL.Claim Number = CND.Zero
DTL.Claim_Number = *ZERO;

// PAR.Access Denied (Y/N) = CND.no
PAR.Access_Denied_Y_N = 'N';

ENDDO;

// DTL.Order Date = JOB.*Job date
DTL.Order_Date = JOB.*Job_date;

// DTL.Load Plan Order = CND.no
DTL.Load_Plan_Order = 'N';

// DTL.Print Pick Slip = CND.no
DTL.Print_Pick_Slip = 'N';

// DTL.Price Audit = CND.Automatically Price Audit
DTL.Price_Audit = 'A';

// DTL.Price Status = CND.Priced
DTL.Price_Status = 'P';

// DTL.Event Code = CND.01 Order Entry
DTL.Event_Code = '01';

// DTL.Credit Hold = CND.No
DTL.Credit_Hold = 'N';

// DTL.Production Hold = CND.No
DTL.Production_Hold = 'N';

// DTL.New Customer Hold = CND.No
DTL.New_Customer_Hold = 'N';

EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
PARAMETER(DTL.Order_Type_Sales);
PARAMETER(DTL.Billing_Activity_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Set suffix
CASE;

// IF DTL.Billing Activity Type is Credit Memo
IF DTL.Billing_Activity_Type = '2';

// DTL.Invoice Suffix = CND.Credit Memos
DTL.Invoice_Suffix = 'CM';

//?Set suffix
// IF DTL.Billing Activity Type is Debit Memo
IF DTL.Billing_Activity_Type = '3';

// DTL.Invoice Suffix = CND.Debit Memos
DTL.Invoice_Suffix = 'DM';

ENDIF;

//?Save initial values for later comparison
CASE;

// IF WRK.ZERO is Zero
IF WRK.ZERO = *ZERO;

// WRK.Ship To Customer = DTL.Ship To Customer
WRK.Ship_To_Customer = DTL.Ship_To_Customer;

// WRK.Ship To Name = DTL.Ship To Name
WRK.Ship_To_Name = DTL.Ship_To_Name;

// WRK.Ship To Address Line 1 = DTL.Ship To Address Line 1
WRK.Ship_To_Address_Line_1 = DTL.Ship_To_Address_Line_1;

// WRK.Ship To Address Line 2 = DTL.Ship To Address Line 2
WRK.Ship_To_Address_Line_2 = DTL.Ship_To_Address_Line_2;

// WRK.Ship To Address Line 3 = DTL.Ship To Address Line 3
WRK.Ship_To_Address_Line_3 = DTL.Ship_To_Address_Line_3;

// WRK.Ship To City = DTL.Ship To City
WRK.Ship_To_City = DTL.Ship_To_City;

// WRK.Ship To State Code = DTL.Ship To State Code
WRK.Ship_To_State_Code = DTL.Ship_To_State_Code;

// WRK.Ship To Zip/Postal Code = DTL.Ship To Zip/Postal Code
WRK.Ship_To_Zip_Postal_Code = DTL.Ship_To_Zip_Postal_Code;

// WRK.Bill to Customer = DTL.Bill to Customer
WRK.Bill_to_Customer = DTL.Bill_to_Customer;

// WRK.Bill to Name = DTL.Bill to Name
WRK.Bill_to_Name = DTL.Bill_to_Name;

// WRK.Bill to Address Line 1 = DTL.Bill to Address Line 1
WRK.Bill_to_Address_Line_1 = DTL.Bill_to_Address_Line_1;

// WRK.Bill to Address Line 2 = DTL.Bill to Address Line 2
WRK.Bill_to_Address_Line_2 = DTL.Bill_to_Address_Line_2;

// WRK.Bill to Address Line 3 = DTL.Bill to Address Line 3
WRK.Bill_to_Address_Line_3 = DTL.Bill_to_Address_Line_3;

// WRK.Bill to City = DTL.Bill to City
WRK.Bill_to_City = DTL.Bill_to_City;

// WRK.Bill to State Code = DTL.Bill to State Code
WRK.Bill_to_State_Code = DTL.Bill_to_State_Code;

// WRK.Bill to Zip/Postal Code = DTL.Bill to Zip/Postal Code
WRK.Bill_to_Zip_Postal_Code = DTL.Bill_to_Zip_Postal_Code;

// WRK.Attach to Order Number = DTL.Attach to Order Number
WRK.Attach_to_Order_Number = DTL.Attach_to_Order_Number;

// WRK.Attach to Invoice Number = DTL.Attach to Invoice Number
WRK.Attach_to_Invoice_Number = DTL.Attach_to_Invoice_Number;

// WRK.Customer Purchase Order # = DTL.Customer Purchase Order #
WRK.Customer_Purchase_Order_# = DTL.Customer_Purchase_Order_#;

// WRK.Resell Reference Number = DTL.Resell Reference Number
WRK.Resell_Reference_Number = DTL.Resell_Reference_Number;

// WRK.Special Comment 1 = DTL.Special Comment 1
WRK.Special_Comment_1 = DTL.Special_Comment_1;

// WRK.Special Comment 2 = DTL.Special Comment 2
WRK.Special_Comment_2 = DTL.Special_Comment_2;

// WRK.Affect Auto Accruals = DTL.Affect Auto Accruals
WRK.Affect_Auto_Accruals = DTL.Affect_Auto_Accruals;

ENDIF;

//?USER: Initialize detail screen (existing record)

// DTL.Company Name = KEY.Company Name
DTL.Company_Name = KEY.Company_Name;

//?FP1309 SLM
//?Do not internal populate the age code on the order header
// PAR.Ship To Customer = DB1.Ship To Customer
PAR.Ship_To_Customer = DB1.Ship_To_Customer;

//?Determine if Ship to Customer should be input or output field
CASE;

// IF DB1.Attach to Order Number is Equal to zeros
IF DB1.Attach_to_Order_Number = *ZERO;

// AND DB1.Attach to Invoice Number is Equal to zero
AND DB1.Attach_to_Invoice_Number = *ZERO;

// PAR.USR Update Flag = CND.Yes
PAR.USR_Update_Flag = 'Y';

//?Determine if Ship to Customer should be input or output field
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Update Flag = CND.No
PAR.USR_Update_Flag = *BLANK;

ENDIF;

//?If claim memo, then screen is output only.
DO;

CASE;

// IF DTL.Claim Number is Not Zero
IF DTL.Claim_Number <> *ZERO;

// PAR.Access Denied (Y/N) = CND.yes
PAR.Access_Denied_Y_N = 'Y';

// PAR.USR Update Flag = CND.No
PAR.USR_Update_Flag = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Access Denied (Y/N) = CND.no
PAR.Access_Denied_Y_N = 'N';

ENDIF;

ENDDO;

// PAR.Attach to Invoice Number = DB1.Attach to Invoice Number
PAR.Attach_to_Invoice_Number = DB1.Attach_to_Invoice_Number;

// PAR.Attach to Order Number = DB1.Attach to Order Number
PAR.Attach_to_Order_Number = DB1.Attach_to_Order_Number;

//?Save initial values for later comparison
CASE;

// IF WRK.ZERO is Zero
IF WRK.ZERO = *ZERO;

// WRK.Ship To Customer = DTL.Ship To Customer
WRK.Ship_To_Customer = DTL.Ship_To_Customer;

// WRK.Ship To Name = DTL.Ship To Name
WRK.Ship_To_Name = DTL.Ship_To_Name;

// WRK.Ship To Address Line 1 = DTL.Ship To Address Line 1
WRK.Ship_To_Address_Line_1 = DTL.Ship_To_Address_Line_1;

// WRK.Ship To Address Line 2 = DTL.Ship To Address Line 2
WRK.Ship_To_Address_Line_2 = DTL.Ship_To_Address_Line_2;

// WRK.Ship To Address Line 3 = DTL.Ship To Address Line 3
WRK.Ship_To_Address_Line_3 = DTL.Ship_To_Address_Line_3;

// WRK.Ship To City = DTL.Ship To City
WRK.Ship_To_City = DTL.Ship_To_City;

// WRK.Ship To State Code = DTL.Ship To State Code
WRK.Ship_To_State_Code = DTL.Ship_To_State_Code;

// WRK.Ship To Zip/Postal Code = DTL.Ship To Zip/Postal Code
WRK.Ship_To_Zip_Postal_Code = DTL.Ship_To_Zip_Postal_Code;

// WRK.Bill to Customer = DTL.Bill to Customer
WRK.Bill_to_Customer = DTL.Bill_to_Customer;

// WRK.Bill to Name = DTL.Bill to Name
WRK.Bill_to_Name = DTL.Bill_to_Name;

// WRK.Bill to Address Line 1 = DTL.Bill to Address Line 1
WRK.Bill_to_Address_Line_1 = DTL.Bill_to_Address_Line_1;

// WRK.Bill to Address Line 2 = DTL.Bill to Address Line 2
WRK.Bill_to_Address_Line_2 = DTL.Bill_to_Address_Line_2;

// WRK.Bill to Address Line 3 = DTL.Bill to Address Line 3
WRK.Bill_to_Address_Line_3 = DTL.Bill_to_Address_Line_3;

// WRK.Bill to City = DTL.Bill to City
WRK.Bill_to_City = DTL.Bill_to_City;

// WRK.Bill to State Code = DTL.Bill to State Code
WRK.Bill_to_State_Code = DTL.Bill_to_State_Code;

// WRK.Bill to Zip/Postal Code = DTL.Bill to Zip/Postal Code
WRK.Bill_to_Zip_Postal_Code = DTL.Bill_to_Zip_Postal_Code;

// WRK.Attach to Order Number = DTL.Attach to Order Number
WRK.Attach_to_Order_Number = DTL.Attach_to_Order_Number;

// WRK.Attach to Invoice Number = DTL.Attach to Invoice Number
WRK.Attach_to_Invoice_Number = DTL.Attach_to_Invoice_Number;

// WRK.Customer Purchase Order # = DTL.Customer Purchase Order #
WRK.Customer_Purchase_Order_# = DTL.Customer_Purchase_Order_#;

// WRK.Resell Reference Number = DTL.Resell Reference Number
WRK.Resell_Reference_Number = DTL.Resell_Reference_Number;

// WRK.Special Comment 1 = DTL.Special Comment 1
WRK.Special_Comment_1 = DTL.Special_Comment_1;

// WRK.Special Comment 2 = DTL.Special Comment 2
WRK.Special_Comment_2 = DTL.Special_Comment_2;

// WRK.Affect Auto Accruals = DTL.Affect Auto Accruals
WRK.Affect_Auto_Accruals = DTL.Affect_Auto_Accruals;

ENDIF;

//?USER: Process key screen request

CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

// Send error message - 'Function not allowed.'
ERROR(USR1833);

QUIT;

ENDIF;

//?USER: Validate detail screen fields

// DTL.Company Name = KEY.Company Name
DTL.Company_Name = KEY.Company_Name;

//?If nothing on Edit Credit/Debit Memo screen changes, do not Confirm Prompt
CASE;

// IF DTL.Ship To Customer NE WRK.Ship To Customer
IF DTL.Ship_To_Customer <> WRK.Ship_To_Customer;

// OR DTL.Ship To Name NE WRK.Ship To Name
OR DTL.Ship_To_Name <> WRK.Ship_To_Name;

// OR DTL.Ship To Address Line 1 NE WRK.Ship To Address Line 1
OR DTL.Ship_To_Address_Line_1 <> WRK.Ship_To_Address_Line_1;

// OR DTL.Ship To Address Line 2 NE WRK.Ship To Address Line 2
OR DTL.Ship_To_Address_Line_2 <> WRK.Ship_To_Address_Line_2;

// OR DTL.Ship To Address Line 3 NE WRK.Ship To Address Line 3
OR DTL.Ship_To_Address_Line_3 <> WRK.Ship_To_Address_Line_3;

// OR DTL.Ship To City NE WRK.Ship To City
OR DTL.Ship_To_City <> WRK.Ship_To_City;

// OR DTL.Ship To State Code NE WRK.Ship To State Code
OR DTL.Ship_To_State_Code <> WRK.Ship_To_State_Code;

// OR DTL.Ship To Zip/Postal Code NE WRK.Ship To Zip/Postal Code
OR DTL.Ship_To_Zip_Postal_Code <> WRK.Ship_To_Zip_Postal_Code;

// OR DTL.Bill to Name NE WRK.Bill to Name
OR DTL.Bill_to_Name <> WRK.Bill_to_Name;

// OR DTL.Bill to Address Line 1 NE WRK.Bill to Address Line 1
OR DTL.Bill_to_Address_Line_1 <> WRK.Bill_to_Address_Line_1;

// OR DTL.Bill to Address Line 2 NE WRK.Bill to Address Line 2
OR DTL.Bill_to_Address_Line_2 <> WRK.Bill_to_Address_Line_2;

// OR DTL.Bill to Address Line 3 NE WRK.Bill to Address Line 3
OR DTL.Bill_to_Address_Line_3 <> WRK.Bill_to_Address_Line_3;

// OR DTL.Bill to City NE WRK.Bill to City
OR DTL.Bill_to_City <> WRK.Bill_to_City;

// OR DTL.Bill to State Code NE WRK.Bill to State Code
OR DTL.Bill_to_State_Code <> WRK.Bill_to_State_Code;

// OR DTL.Bill to Zip/Postal Code NE WRK.Bill to Zip/Postal Code
OR DTL.Bill_to_Zip_Postal_Code <> WRK.Bill_to_Zip_Postal_Code;

// OR DTL.Attach to Order Number NE WRK.Attach to Order Number
OR DTL.Attach_to_Order_Number <> WRK.Attach_to_Order_Number;

// OR DTL.Attach to Invoice Number NE WRK.Attach to Invoice Number
OR DTL.Attach_to_Invoice_Number <> WRK.Attach_to_Invoice_Number;

// OR DTL.Customer Purchase Order # NE WRK.Customer Purchase Order #
OR DTL.Customer_Purchase_Order_# <> WRK.Customer_Purchase_Order_#;

// OR DTL.Resell Reference Number NE WRK.Resell Reference Number
OR DTL.Resell_Reference_Number <> WRK.Resell_Reference_Number;

// OR DTL.Special Comment 1 NE WRK.Special Comment 1
OR DTL.Special_Comment_1 <> WRK.Special_Comment_1;

// OR DTL.Special Comment 2 NE WRK.Special Comment 2
OR DTL.Special_Comment_2 <> WRK.Special_Comment_2;

// OR DTL.Affect Auto Accruals NE WRK.Affect Auto Accruals
OR DTL.Affect_Auto_Accruals <> WRK.Affect_Auto_Accruals;

//?Edit details
CASE;

// IF DTL.*CMD key is *Edit Details
IF DTL.*CMD_key = '13';

CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Function not allowed.'
ERROR(USR1833);

ENDIF;

ENDIF;

//?If nothing on Edit Credit/Debit Memo screen changes, do not Confirm Prompt
// IF *OTHERWISE
IF *OTHERWISE;

//?Edit details
CASE;

// IF DTL.*CMD key is *Edit Details
IF DTL.*CMD_key = '13';

CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

// Call program EDT Cr/Dr Memo Lines   EF.
CALL PROGRAM(EDT Cr/Dr Memo Lines   EF) ('PDPGEFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Order_Type_Sales);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Ship_To_Name);
PARAMETER(DTL.Order_Date);
PARAMETER(DTL.Price_Status);
PARAMETER(DTL.Claim_Number);
PARAMETER(PAR.Application_Code);

RETURN;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Function not allowed.'
ERROR(USR1833);

ENDIF;

ENDIF;

ENDIF;

//?Process Selects
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Ship To Customer
AND PGM.*Cursor_field = DTL.Ship_To_Customer;

// Call program SEL Shipto & A/R Cust  SR.
CALL PROGRAM(SEL Shipto & A/R Cust  SR) ('PDY5SRR');
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.AR_Customer_Number);

//?Fill in Bill to information
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// DTL.Bill to Customer = DTL.A/R Customer Number
DTL.Bill_to_Customer = DTL.AR_Customer_Number;

EXECUTE FUNCTION(RTV Cust Name/Addr     RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1129143;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Ship_To_Name);
PARAMETER(DTL.Ship_To_Address_Line_1);
PARAMETER(DTL.Ship_To_Address_Line_2);
PARAMETER(DTL.Ship_To_Address_Line_3);
PARAMETER(DTL.Ship_To_City);
PARAMETER(DTL.Ship_To_State_Code);
PARAMETER(DTL.Ship_To_Zip_Postal_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Cust Name/Addr     RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1129143;
PARAMETER(DTL.Bill_to_Customer);
PARAMETER(DTL.Bill_to_Name);
PARAMETER(DTL.Bill_to_Address_Line_1);
PARAMETER(DTL.Bill_to_Address_Line_2);
PARAMETER(DTL.Bill_to_Address_Line_3);
PARAMETER(DTL.Bill_to_City);
PARAMETER(DTL.Bill_to_State_Code);
PARAMETER(DTL.Bill_to_Zip_Postal_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.Ship To Customer = DTL.Ship To Customer
PAR.Ship_To_Customer = DTL.Ship_To_Customer;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?Process Selects
// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Ship To State Code
AND PGM.*Cursor_field = DTL.Ship_To_State_Code;

// Call program SEL State              SR.
CALL PROGRAM(SEL State              SR) ('CAAHSRR');
PARAMETER(DTL.Ship_To_State_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?Process Selects
// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Bill to State Code
AND PGM.*Cursor_field = DTL.Bill_to_State_Code;

// Call program SEL State              SR.
CALL PROGRAM(SEL State              SR) ('CAAHSRR');
PARAMETER(DTL.Bill_to_State_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?Process Selects
// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Attach to Order Number
AND PGM.*Cursor_field = DTL.Attach_to_Order_Number;

//?Will need to select only Invoice type orders ??
// Call program Zzz Order by PO        SR.
CALL PROGRAM(Zzz Order by PO        SR) ('PDHKSRR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Attach_to_Order_Number);
PARAMETER(WRK.Customer_Purchase_Order_#);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?Process Selects
// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Attach to Invoice Number
AND PGM.*Cursor_field = DTL.Attach_to_Invoice_Number;

// Call program SEL A/R Header         SR.
CALL PROGRAM(SEL A/R Header         SR) ('PDPGSRR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Attach_to_Invoice_Number);
PARAMETER(WRK.Invoice_Suffix);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?Process Selects
// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Ship To City
AND PGM.*Cursor_field = DTL.Ship_To_City;

//?** FP1251 LJB 03/19/2008 change to To City and State
// Call program SEL Milge Ship To City SR.
CALL PROGRAM(SEL Milge Ship To City SR) ('PDWMSRR');
PARAMETER(DTL.Ship_To_City);
PARAMETER(DTL.Ship_To_State_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Orig order & invoice both entered
CASE;

// IF DTL.Attach to Order Number is Not equal to zeros
IF DTL.Attach_to_Order_Number <> *ZERO;

// AND DTL.Attach to Invoice Number is Not equal to zero
AND DTL.Attach_to_Invoice_Number <> *ZERO;

EXECUTE FUNCTION(RTV Order # for Invc   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1344540;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Attach_to_Invoice_Number);
PARAMETER(WRK.Attach_to_Order_Number);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Error if attach to order isn't order for invoice
CASE;

// IF WRK.Attach to Order Number NE DTL.Attach to Order Number
IF WRK.Attach_to_Order_Number <> DTL.Attach_to_Order_Number;

// Send error message - 'Original Invoice does not match original Order'
ERROR(USR1997);
MSGPARM(DTL.Attach_to_Order_Number);
MSGPARM(DTL.Attach_to_Invoice_Number);

QUIT;

ENDIF;

ENDIF;

//?Validate original order number
CASE;

// IF DTL.Attach to Order Number is Not equal to zeros
IF DTL.Attach_to_Order_Number <> *ZERO;

EXECUTE FUNCTION(RTV Invoice Number     RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1322426;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Attach_to_Order_Number);
PARAMETER(WRK.Attach_to_Invoice_Number);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Fill in/check invoice number
CASE;

// IF DTL.Attach to Invoice Number EQ WRK.ZERO
IF DTL.Attach_to_Invoice_Number = WRK.ZERO;

// DTL.Attach to Invoice Number = WRK.Attach to Invoice Number
DTL.Attach_to_Invoice_Number = WRK.Attach_to_Invoice_Number;

//?Fill in/check invoice number
// IF WRK.Attach to Invoice Number EQ DTL.Attach to Invoice Number
IF WRK.Attach_to_Invoice_Number = DTL.Attach_to_Invoice_Number;

//?Fill in/check invoice number
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Original Invoice does not match original Order'
ERROR(USR1997);
MSGPARM(DTL.Attach_to_Order_Number);
MSGPARM(DTL.Attach_to_Invoice_Number);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Original order not found'
ERROR(USR1777);
MSGPARM(DTL.Attach_to_Order_Number);

ENDIF;

ENDIF;

//?Validate original invoice number
CASE;

// IF DTL.Attach to Invoice Number is Not equal to zero
IF DTL.Attach_to_Invoice_Number <> *ZERO;

EXECUTE FUNCTION(RTV Order # for Invc   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1344540;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Attach_to_Invoice_Number);
PARAMETER(WRK.Attach_to_Order_Number);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Fill in/check order number
CASE;

// IF DTL.Attach to Order Number EQ WRK.ZERO
IF DTL.Attach_to_Order_Number = WRK.ZERO;

// DTL.Attach to Order Number = WRK.Attach to Order Number
DTL.Attach_to_Order_Number = WRK.Attach_to_Order_Number;

//?Fill in/check order number
// IF WRK.Attach to Order Number EQ DTL.Attach to Order Number
IF WRK.Attach_to_Order_Number = DTL.Attach_to_Order_Number;

//?Fill in/check order number
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Original Invoice does not match original Order'
ERROR(USR1997);
MSGPARM(DTL.Attach_to_Order_Number);
MSGPARM(DTL.Attach_to_Invoice_Number);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Original invoice not found'
ERROR(USR1778);
MSGPARM(DTL.Attach_to_Invoice_Number);

ENDIF;

ENDIF;

//?Original document change
CASE;

// IF PAR.Attach to Invoice Number NE DTL.Attach to Invoice Number
IF PAR.Attach_to_Invoice_Number <> DTL.Attach_to_Invoice_Number;

EXECUTE FUNCTION(RTV Order # for Invc   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1344540;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Attach_to_Invoice_Number);
PARAMETER(DTL.Attach_to_Order_Number);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Fill in fields from original order
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

EXECUTE FUNCTION(RTV Orig Order Fields  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1317018;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Attach_to_Order_Number);
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Ship_To_Name);
PARAMETER(DTL.Ship_To_Address_Line_1);
PARAMETER(DTL.Ship_To_Address_Line_2);
PARAMETER(DTL.Ship_To_Address_Line_3);
PARAMETER(DTL.Ship_To_City);
PARAMETER(DTL.Ship_To_State_Code);
PARAMETER(DTL.Ship_To_Zip_Postal_Code);
PARAMETER(DTL.Bill_to_Customer);
PARAMETER(DTL.Bill_to_Name);
PARAMETER(DTL.Bill_to_Address_Line_1);
PARAMETER(DTL.Bill_to_Address_Line_2);
PARAMETER(DTL.Bill_to_Address_Line_3);
PARAMETER(DTL.Bill_to_City);
PARAMETER(DTL.Bill_to_State_Code);
PARAMETER(DTL.Bill_to_Zip_Postal_Code);
PARAMETER(DTL.Customer_Purchase_Order_#);
PARAMETER(DTL.Export_Status);
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(DTL.Manager_Level_Code);
PARAMETER(DTL.VP_Level_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// PAR.Attach to Order Number = DTL.Attach to Order Number
PAR.Attach_to_Order_Number = DTL.Attach_to_Order_Number;

// PAR.Attach to Invoice Number = DTL.Attach to Invoice Number
PAR.Attach_to_Invoice_Number = DTL.Attach_to_Invoice_Number;

// PAR.Ship To Customer = DTL.Ship To Customer
PAR.Ship_To_Customer = DTL.Ship_To_Customer;

//?Original document change
// IF PAR.Attach to Order Number NE DTL.Attach to Order Number
IF PAR.Attach_to_Order_Number <> DTL.Attach_to_Order_Number;

EXECUTE FUNCTION(RTV Orig Order Fields  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1317018;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Attach_to_Order_Number);
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Ship_To_Name);
PARAMETER(DTL.Ship_To_Address_Line_1);
PARAMETER(DTL.Ship_To_Address_Line_2);
PARAMETER(DTL.Ship_To_Address_Line_3);
PARAMETER(DTL.Ship_To_City);
PARAMETER(DTL.Ship_To_State_Code);
PARAMETER(DTL.Ship_To_Zip_Postal_Code);
PARAMETER(DTL.Bill_to_Customer);
PARAMETER(DTL.Bill_to_Name);
PARAMETER(DTL.Bill_to_Address_Line_1);
PARAMETER(DTL.Bill_to_Address_Line_2);
PARAMETER(DTL.Bill_to_Address_Line_3);
PARAMETER(DTL.Bill_to_City);
PARAMETER(DTL.Bill_to_State_Code);
PARAMETER(DTL.Bill_to_Zip_Postal_Code);
PARAMETER(DTL.Customer_Purchase_Order_#);
PARAMETER(DTL.Export_Status);
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(DTL.Manager_Level_Code);
PARAMETER(DTL.VP_Level_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.Attach to Order Number = DTL.Attach to Order Number
PAR.Attach_to_Order_Number = DTL.Attach_to_Order_Number;

// PAR.Attach to Invoice Number = DTL.Attach to Invoice Number
PAR.Attach_to_Invoice_Number = DTL.Attach_to_Invoice_Number;

// PAR.Ship To Customer = DTL.Ship To Customer
PAR.Ship_To_Customer = DTL.Ship_To_Customer;

ENDIF;

//?Customer change
CASE;

// IF DTL.Ship To Customer NE PAR.Ship To Customer
IF DTL.Ship_To_Customer <> PAR.Ship_To_Customer;

EXECUTE FUNCTION(RTV Cust Name/Addr     RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1129143;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Ship_To_Name);
PARAMETER(DTL.Ship_To_Address_Line_1);
PARAMETER(DTL.Ship_To_Address_Line_2);
PARAMETER(DTL.Ship_To_Address_Line_3);
PARAMETER(DTL.Ship_To_City);
PARAMETER(DTL.Ship_To_State_Code);
PARAMETER(DTL.Ship_To_Zip_Postal_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.Ship To Customer = DTL.Ship To Customer
PAR.Ship_To_Customer = DTL.Ship_To_Customer;

EXECUTE FUNCTION(RTV Customer A/R Cust  RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1210709;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.AR_Customer_Number);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Bill to Customer = DTL.A/R Customer Number
DTL.Bill_to_Customer = DTL.AR_Customer_Number;

EXECUTE FUNCTION(RTV Cust Name/Addr     RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1129143;
PARAMETER(DTL.Bill_to_Customer);
PARAMETER(DTL.Bill_to_Name);
PARAMETER(DTL.Bill_to_Address_Line_1);
PARAMETER(DTL.Bill_to_Address_Line_2);
PARAMETER(DTL.Bill_to_Address_Line_3);
PARAMETER(DTL.Bill_to_City);
PARAMETER(DTL.Bill_to_State_Code);
PARAMETER(DTL.Bill_to_Zip_Postal_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Set up sales route, mgr, VP
CASE;

// IF DTL.Attach to Order Number EQ WRK.ZERO
IF DTL.Attach_to_Order_Number = WRK.ZERO;

// AND DTL.Attach to Invoice Number EQ WRK.ZERO
AND DTL.Attach_to_Invoice_Number = WRK.ZERO;

EXECUTE FUNCTION(RTV Sales Route        RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1371227;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Sales_Route_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Sales Hierarchy    RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1277658;
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(DTL.Manager_Level_Code);
PARAMETER(DTL.VP_Level_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.VP Level Code EQ WRK.BLANK
IF DTL.VP_Level_Code = WRK.BLANK;

EXECUTE FUNCTION(RTV Mgr Desc,VP Level  RT) TYPE(RTVOBJ) FILE(CAALREP)          AC1277261;
PARAMETER(DTL.Manager_Level_Code);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(DTL.VP_Level_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

ENDIF;

//?Ensure that bill to customer not 0
CASE;

// IF DTL.Bill to Customer EQ WRK.ZERO
IF DTL.Bill_to_Customer = WRK.ZERO;

// Send error message - 'A/R Customer is invalid.'
ERROR(USR2110);
MSGPARM(DTL.Bill_to_Customer);

//?Ensure that bill to customer not 0
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(VAL Check Exists       RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1347294;
PARAMETER(DTL.Bill_to_Customer);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'A/R Customer is invalid.'
ERROR(USR2110);
MSGPARM(DTL.Bill_to_Customer);

ENDIF;

ENDIF;

//?Validate that the ship to Customer entered has a shiptoflag
DO;

//?031808 slm Add validation that the ship to customer number
//?does have the flag set as a Y in the ship to flag for this
//?customer
EXECUTE FUNCTION(RTV Ship To Flag       RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1464722;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(WRK.Ship_To_Customer_Flag);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.Ship To Customer Flag is Allow Use as Ship To Cust
IF WRK.Ship_To_Customer_Flag = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid Ship To entered - Ship to Customer Flag is 'N'o.'
ERROR(USR2482);
MSGPARM(DTL.Ship_To_Customer);

ENDIF;

ENDDO;

//?06/26/14 PKD E3164 Need Shipping Method for Credit/Debit Memo for
//?             processing Accrual Programs for Daily's
//?09/11/14 JJH E3387 Removed validation for Daily's Only.  It will
//?         Validation will now occur for all companies.
//?E4057 JJH 09/06/15 - SNDERRMSG if Affect Auto Accruals is not
//?  set to a Y or N
//?SNDERRMSG if Affect Auto Accruals NE Y or N
CASE;

// IF DTL.Affect Auto Accruals is Affect Auto Accruals
IF DTL.Affect_Auto_Accruals = 'Y';

// OR DTL.Affect Auto Accruals is Dont Affect Auto Accruals
OR DTL.Affect_Auto_Accruals = 'N';

//?SNDERRMSG if Affect Auto Accruals NE Y or N
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Affect Auto Accruals must be set to a "Y" or "N".'
ERROR(USR4796);
MSGPARM(DTL.Affect_Auto_Accruals);

ENDIF;

//?CALC: Detail screen function fields

EXECUTE FUNCTION(ACR Shipping Method DRV) TYPE(DRVFLD)                          AC2098708;
PARAMETER(DTL.ACR_Shipping_Method_DRV);
PARAMETER(DTL.Shipping_Method);
{
 //?Calculate derived field

 // PAR.ACR Shipping Method DRV = Condition name of PAR.ACR Shipping Method
 PAR.ACR_Shipping_Method_DRV = RTVCND(PAR.ACR_Shipping_Method);

}


//?USER: Validate detail screen relations

//?Add mode processing
CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

EXECUTE FUNCTION(RTV Terms/Type        RT) TYPE(RTVOBJ) FILE(CAEOREP)           AC1632198;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Terms_Code);
PARAMETER(LCL.Type_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.Export Status is blank
IF DTL.Export_Status = *BLANK;

CASE;

// IF LCL.Type Code is Export
IF LCL.Type_Code = 'EX';

// DTL.Export Status = CND.yes
DTL.Export_Status = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Co. Dflt Int All   RT) TYPE(RTVOBJ) FILE(PDJYREP)          AC1331240;
PARAMETER(DTL.Company_Number);
PARAMETER(WRK.Shipping_Method_Dft);
PARAMETER(WRK.Load_Type_Dft);
PARAMETER(WRK.LTL_Flag_Dft);
PARAMETER(LCL.Export_Status_Dft);
PARAMETER(WRK.Shrink_Wrap_Dft);
PARAMETER(WRK.Departure_Time_DFT);
PARAMETER(WRK.Export_Code_Dft);
PARAMETER(WRK.Allow_Mult_Whse_to_Order);
PARAMETER(WRK.Allow_Multi_Export_On_Ord);
PARAMETER(WRK.Slip_Sheet_Dft);
PARAMETER(WRK.Palletize_Dft);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(NLL.Company_Organization);
PARAMETER(NLL.CDI_Valuation_Grouping);
PARAMETER(NLL.CDI_Unused_Sts_3);
PARAMETER(NLL.CDI_Shipper);
PARAMETER(NLL.CDI_Produced_by_co);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Export Status = LCL.Export Status Dft
DTL.Export_Status = LCL.Export_Status_Dft;

ENDIF;

ENDIF;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(CRT Order Hdr-auto nbr CR) TYPE(CRTOBJ) FILE(OPBFCPP)          AC1316826;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Order_Type_Sales);
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Ship_To_Name);
PARAMETER(DTL.Ship_To_Address_Line_1);
PARAMETER(DTL.Ship_To_Address_Line_2);
PARAMETER(DTL.Ship_To_Address_Line_3);
PARAMETER(DTL.Ship_To_City);
PARAMETER(DTL.Ship_To_State_Code);
PARAMETER(DTL.Ship_To_Zip_Postal_Code);
PARAMETER(DTL.Bill_to_Customer);
PARAMETER(DTL.Bill_to_Name);
PARAMETER(DTL.Bill_to_Address_Line_1);
PARAMETER(DTL.Bill_to_Address_Line_2);
PARAMETER(DTL.Bill_to_Address_Line_3);
PARAMETER(DTL.Bill_to_City);
PARAMETER(DTL.Bill_to_State_Code);
PARAMETER(DTL.Bill_to_Zip_Postal_Code);
PARAMETER(DTL.Customer_Purchase_Order_#);
PARAMETER(DTL.Order_Date);
PARAMETER(DTL.Requested_Ship_Date);
PARAMETER(DTL.Actual_Shipped_Date);
PARAMETER(DTL.Cancel_Date);
PARAMETER(DTL.Terms_Code);
PARAMETER(DTL.Special_Instructions);
PARAMETER(DTL.Special_Instructions_2);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Comment_Print_Acknowledge);
PARAMETER(DTL.Comment_Print_Inv_Cr_Memo);
PARAMETER(DTL.Comment_Print_Pick_Slip);
PARAMETER(DTL.Comment_Print_Ship_Doc);
PARAMETER(DTL.Reason_Code);
PARAMETER('Y');
PARAMETER('A');
PARAMETER(DTL.Header_Status_Last);
PARAMETER(*BLANK);
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*Job_date);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(DTL.Credit_Hold);
PARAMETER(DTL.Production_Hold);
PARAMETER(DTL.New_Customer_Hold);
PARAMETER(DTL.Requested_Delivery_Date);
PARAMETER(DTL.Requested_Delivery_Time);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(DTL.LTL_Flag);
PARAMETER(DTL.Price_Audit);
PARAMETER(DTL.Price_Status);
PARAMETER(DTL.Shipping_Method);
PARAMETER(DTL.Export_Status);
PARAMETER(DTL.Palletize);
PARAMETER(DTL.Shrink_Wrap);
PARAMETER(DTL.Slip_Sheet);
PARAMETER(*BLANK);
PARAMETER(DTL.Reefer_Temperature);
PARAMETER(DTL.Load_Type);
PARAMETER(DTL.Attach_to_Invoice_Number);
PARAMETER(DTL.Load_Plan_Order);
PARAMETER(DTL.Print_Pick_Slip);
PARAMETER(DTL.Resell_Reference_Number);
PARAMETER(DTL.Special_Comment_1);
PARAMETER(DTL.Special_Comment_2);
PARAMETER(DTL.Affect_Auto_Accruals);
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(DTL.Manager_Level_Code);
PARAMETER(DTL.VP_Level_Code);
PARAMETER(DTL.Attach_to_Order_Number);
PARAMETER(DTL.Reason_for_Price_Audit);
PARAMETER(DTL.Invoice_Number);
PARAMETER(DTL.Invoice_Suffix);
PARAMETER(DTL.Invoice_Date);
PARAMETER(DTL.Event_Code);
PARAMETER(DTL.Trans_Contol_AS400_Plant);
PARAMETER(DTL.Modified_Flag);
PARAMETER(DTL.A_R_order_Value_Total);
PARAMETER(DTL.Billing_Activity_Type);
PARAMETER('F');
PARAMETER(DTL.Order_Certification_Flag);
PARAMETER(DTL.Invoice_Order_Value_Tot);
PARAMETER(DTL.Process_Sts_for_3C);
PARAMETER(DTL.Order_Conf_Fax_Sts);
PARAMETER(DTL.Manifest_Fax_Sts);
PARAMETER(DTL.Invoice_Fax_Sts);
PARAMETER(DTL.Transfer_in_Storage_Ind);
PARAMETER(DTL.Email_Cust_On_Order_Ship);
PARAMETER(DTL.Order_Emailed);
PARAMETER(DTL.Export_Docs_Go_w_Driver);
PARAMETER(DTL.Shipping_Temp_Code_C_F);
PARAMETER(DTL.Broker_Order_Status);
PARAMETER(DTL.Air_Freight_Order);
PARAMETER(DTL.Order_Requires_Review);
PARAMETER(DTL.OH_Load_Plan_Ready);
PARAMETER(DTL.Export_USDA_Approved);
PARAMETER(DTL.HPB_Ship_to_Warehouse);
PARAMETER(DTL.OH_TF_Exempt_Code);
PARAMETER(DTL.OH_Appt_Confirmation_Dt);
PARAMETER(DTL.JPN_Invoice_Issuance_Date);
PARAMETER(DTL.Load_Actual_Shipped_Date);
PARAMETER(DTL.Load_BOL_Complete_Date);
PARAMETER(DTL.Load_Truck_Departure_Date);
PARAMETER(DTL.Maximum_Gross_Weight);
PARAMETER(JOB.*Job_time);
PARAMETER(DTL.OH_Appt_Confirmation_Tm);
PARAMETER(DTL.Load_BOL_Complete_Time);
PARAMETER(DTL.Load_Truck_Departure_Time);
PARAMETER(DTL.Act_Frt_Reference_Amount);
PARAMETER(DTL.Act_Non_Ref_Frt_Amount);
PARAMETER(DTL.OH_Fuel_Surcharge_Amount);
PARAMETER(DTL.OH_Total_Non_Ref_Frt_Amt);
PARAMETER(DTL.OH_Total_Ref_Frt_Amt);
PARAMETER(DTL.Claim_Number);
PARAMETER(PAR.Auto_Order_Numbering);
{
 //?USER: Processing before Data update

 // DB1.Age Code = CND.Blank
 DB1.Age_Code = *BLANK;

 //?Get/Update current next number
 CASE;

 // IF PAR.Auto Order Numbering? is yes
 IF PAR.Auto_Order_Numbering = 'Y';

 //?PKTR01 Update control company 000                 7/27/04
 EXECUTE FUNCTION(CHG Next Order Number  CH) TYPE(CHGOBJ) FILE(CAASREP)          AC1263775;
 PARAMETER(*ZERO);
 PARAMETER(DB1.Order_Number);
 {
  //?USER: Processing before Data update

  //?Assumes Credit memo numbers always automatically assigned
  // PGM.*Record Data Changed = CND.*YES
  PGM.*Record_Data_Changed = 'Y';

  // PAR.USR Next Order Number = DB1.Next Order Number
  PAR.USR_Next_Order_Number = DB1.Next_Order_Number;

  // DB1.Next Order Number = DB1.Next Order Number + CON.1
  DB1.Next_Order_Number = DB1.Next_Order_Number + 1;

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 //?Check return code
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 //?Check return code
 // IF *OTHERWISE
 IF *OTHERWISE;

 PGM.*Return_code = 'Y2U9999';

 RETURN;

 ENDIF;

 // PAR.Order Number = DB1.Order Number
 PAR.Order_Number = DB1.Order_Number;

 //?Get/Update invoice number if Credit or Debit memo
 CASE;

 // IF PAR.Invoice Number is Equal to zero
 IF PAR.Invoice_Number = *ZERO;

 // AND PAR.Billing Activity Type is Credit or Debit Memo
 AND PAR.Billing_Activity_Type = '2'/'3';

 //?02/18/05 PKD get from company 000
 EXECUTE FUNCTION(CHG Next Invoice Nbr   CH) TYPE(CHGOBJ) FILE(CAASREP)          AC1329962;
 PARAMETER(*ZERO);
 PARAMETER(DB1.Invoice_Number);
 {
  //?USER: Processing before Data update

  //?Assumes Invoice numbers always automatically assigned
  // PGM.*Record Data Changed = CND.*YES
  PGM.*Record_Data_Changed = 'Y';

  // Call program Val Invoice Exists    XF.
  CALL PROGRAM(Val Invoice Exists    XF) ('PMQIXFR');
  PARAMETER(DB1.Next_Invoice_Number);
  PARAMETER(LCL.Record_Found_USR);

  // DOW LCL.Record Found USR is Record Found
  DOW LCL.Record_Found_USR = 'Y';

  // DB1.Next Invoice Number = DB1.Next Invoice Number + CON.1
  DB1.Next_Invoice_Number = DB1.Next_Invoice_Number + 1;

  // Call program Val Invoice Exists    XF.
  CALL PROGRAM(Val Invoice Exists    XF) ('PMQIXFR');
  PARAMETER(DB1.Next_Invoice_Number);
  PARAMETER(LCL.Record_Found_USR);

  ENDDO;

  // PAR.USR Next Invoice Number = DB1.Next Invoice Number
  PAR.USR_Next_Invoice_Number = DB1.Next_Invoice_Number;

  // DB1.Next Invoice Number = DB1.Next Invoice Number + CON.1
  DB1.Next_Invoice_Number = DB1.Next_Invoice_Number + 1;

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?Invoice Suffix
 CASE;

 // IF PAR.Billing Activity Type is Credit Memo
 IF PAR.Billing_Activity_Type = '2';

 // DB1.Invoice Suffix = CND.Credit Memos
 DB1.Invoice_Suffix = 'CM';

 //?Invoice Suffix
 // IF PAR.Billing Activity Type is Debit Memo
 IF PAR.Billing_Activity_Type = '3';

 // DB1.Invoice Suffix = CND.Debit Memos
 DB1.Invoice_Suffix = 'DM';

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program RTV System Date/Time   UP.
 CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Time_of_Original_Entry);

 //?USER: Processing if Data record already exists

 RETURN;

 //?USER: Processing if Data update error

 RETURN;

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Order Header       CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1113751;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Order_Type_Sales);
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Ship_To_Name);
PARAMETER(DTL.Ship_To_Address_Line_1);
PARAMETER(DTL.Ship_To_Address_Line_2);
PARAMETER(DTL.Ship_To_Address_Line_3);
PARAMETER(DTL.Ship_To_City);
PARAMETER(DTL.Ship_To_State_Code);
PARAMETER(DTL.Ship_To_Zip_Postal_Code);
PARAMETER(DTL.Bill_to_Customer);
PARAMETER(DTL.Bill_to_Name);
PARAMETER(DTL.Bill_to_Address_Line_1);
PARAMETER(DTL.Bill_to_Address_Line_2);
PARAMETER(DTL.Bill_to_Address_Line_3);
PARAMETER(DTL.Bill_to_City);
PARAMETER(DTL.Bill_to_State_Code);
PARAMETER(DTL.Bill_to_Zip_Postal_Code);
PARAMETER(DTL.Customer_Purchase_Order_#);
PARAMETER(DTL.Order_Date);
PARAMETER(DTL.Requested_Ship_Date);
PARAMETER(DTL.Actual_Shipped_Date);
PARAMETER(DTL.Cancel_Date);
PARAMETER(DTL.Terms_Code);
PARAMETER(DTL.Special_Instructions);
PARAMETER(DTL.Special_Instructions_2);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Comment_Print_Acknowledge);
PARAMETER(DTL.Comment_Print_Inv_Cr_Memo);
PARAMETER(DTL.Comment_Print_Pick_Slip);
PARAMETER(DTL.Comment_Print_Ship_Doc);
PARAMETER(DTL.Reason_Code);
PARAMETER(DTL.Order_in_Use);
PARAMETER(DTL.Header_Status);
PARAMETER(DTL.Header_Status_Last);
PARAMETER(*BLANK);
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(DTL.User_Original_Entry);
PARAMETER(DTL.Date_of_Original_Entry);
PARAMETER(DTL.Order_Value_Total);
PARAMETER(DTL.Order_Weight_Total);
PARAMETER(DTL.Credit_Hold);
PARAMETER(DTL.Production_Hold);
PARAMETER(DTL.New_Customer_Hold);
PARAMETER(DTL.Requested_Delivery_Date);
PARAMETER(DTL.Requested_Delivery_Time);
PARAMETER(DTL.Accounts_Receiv_Ent_1);
PARAMETER(DTL.Accounts_Receiv_Ent_2);
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Absorbed_Freight_Rate_CWT);
PARAMETER(DTL.Rated_Freight);
PARAMETER(DTL.LTL_Flag);
PARAMETER(DTL.Price_Audit);
PARAMETER(DTL.Price_Status);
PARAMETER(DTL.Shipping_Method);
PARAMETER(DTL.Export_Status);
PARAMETER(DTL.Palletize);
PARAMETER(DTL.Shrink_Wrap);
PARAMETER(DTL.Slip_Sheet);
PARAMETER(DTL.Age_Code);
PARAMETER(DTL.Reefer_Temperature);
PARAMETER(DTL.Load_Type);
PARAMETER(DTL.Attach_to_Invoice_Number);
PARAMETER(DTL.Load_Plan_Order);
PARAMETER(DTL.Print_Pick_Slip);
PARAMETER(DTL.Resell_Reference_Number);
PARAMETER(DTL.Special_Comment_1);
PARAMETER(DTL.Special_Comment_2);
PARAMETER(DTL.Affect_Auto_Accruals);
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(DTL.Manager_Level_Code);
PARAMETER(DTL.VP_Level_Code);
PARAMETER(DTL.Attach_to_Order_Number);
PARAMETER(DTL.Reason_for_Price_Audit);
PARAMETER(DTL.Invoice_Number);
PARAMETER(DTL.Invoice_Suffix);
PARAMETER(DTL.Invoice_Date);
PARAMETER(DTL.Event_Code);
PARAMETER(DTL.Trans_Contol_AS400_Plant);
PARAMETER(DTL.Modified_Flag);
PARAMETER(DTL.A_R_order_Value_Total);
PARAMETER(DTL.Billing_Activity_Type);
PARAMETER(DTL.Block_Order_Flag);
PARAMETER(DTL.Order_Certification_Flag);
PARAMETER(DTL.Invoice_Order_Value_Tot);
PARAMETER(DTL.Process_Sts_for_3C);
PARAMETER(DTL.Order_Conf_Fax_Sts);
PARAMETER(DTL.Manifest_Fax_Sts);
PARAMETER(DTL.Invoice_Fax_Sts);
PARAMETER(DTL.Transfer_in_Storage_Ind);
PARAMETER(DTL.Email_Cust_On_Order_Ship);
PARAMETER(DTL.Order_Emailed);
PARAMETER(DTL.Export_Docs_Go_w_Driver);
PARAMETER(DTL.Shipping_Temp_Code_C_F);
PARAMETER(DTL.Broker_Order_Status);
PARAMETER(DTL.Air_Freight_Order);
PARAMETER(DTL.Order_Requires_Review);
PARAMETER(DTL.OH_Load_Plan_Ready);
PARAMETER(DTL.Export_USDA_Approved);
PARAMETER(DTL.HPB_Ship_to_Warehouse);
PARAMETER(DTL.OH_TF_Exempt_Code);
PARAMETER(DTL.OH_Appt_Confirmation_Dt);
PARAMETER(DTL.JPN_Invoice_Issuance_Date);
PARAMETER(DTL.Load_Actual_Shipped_Date);
PARAMETER(DTL.Load_BOL_Complete_Date);
PARAMETER(DTL.Load_Truck_Departure_Date);
PARAMETER(DTL.Maximum_Gross_Weight);
PARAMETER(DTL.Time_of_Original_Entry);
PARAMETER(DTL.OH_Appt_Confirmation_Tm);
PARAMETER(DTL.Load_BOL_Complete_Time);
PARAMETER(DTL.Load_Truck_Departure_Time);
PARAMETER(DTL.Act_Frt_Reference_Amount);
PARAMETER(DTL.Act_Non_Ref_Frt_Amount);
PARAMETER(DTL.OH_Fuel_Surcharge_Amount);
PARAMETER(DTL.OH_Total_Non_Ref_Frt_Amt);
PARAMETER(DTL.OH_Total_Ref_Frt_Amt);
PARAMETER(DTL.Claim_Number);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Processing after Data read

 //?01/22/09 RMC  move here from "before Data update" spot
 //?06/23/00 PKD Added the update of the Export Status on the Load
 //?             if the Export Status on the Order is changed to Y,
 //?Change the Export Status.
 CASE;

 // IF PAR.Export Status NE DB1.Export Status
 IF PAR.Export_Status <> DB1.Export_Status;

 // AND PAR.Export Status is yes
 AND PAR.Export_Status = 'Y';

 CASE;

 // IF DB1.Load ID is NE Blank
 IF DB1.Load_ID <> *ZERO;

 // AND DB1.Load Plan Order is yes
 AND DB1.Load_Plan_Order = 'Y';

 EXECUTE FUNCTION(Chg Export Status     CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC1540180;
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.Export_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 ENDIF;

 // LCL.Status Flag 1  Y/N = CND.No
 LCL.Status_Flag_1_Y_N = 'N';

 //?Email Requested Delv Change msg is changed and Appt exists.
 CASE;

 // IF PAR.Requested Delivery Date NE DB1.Requested Delivery Date
 IF ( PAR.Requested_Delivery_Date <> DB1.Requested_Delivery_Date;

 // OR PAR.Requested Delivery Time NE DB1.Requested Delivery Time
 OR PAR.Requested_Delivery_Time <> DB1.Requested_Delivery_Time );

 // AND DB1.OH Appt Confirmation Dt is Entered
 AND DB1.OH_Appt_Confirmation_Dt > *ZERO;

 // LCL.Status Flag 1  Y/N = CND.Yes
 LCL.Status_Flag_1_Y_N = 'Y';

 ENDIF;

 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

 //?------------------------------------------------------------------
 //?------------------------------------------------------------------
 //?USER: Processing after Data update

 //?Email Requested Delv Change msg is changed and Appt exists.
 CASE;

 // IF LCL.Status Flag 1  Y/N is Yes
 IF LCL.Status_Flag_1_Y_N = 'Y';

 // Call program Exc Email Ord RqDtChg XF.
 CALL PROGRAM(Exc Email Ord RqDtChg XF) ('PBEPXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Sales_Route_Code);

 ENDIF;

}


//?USER: Process command keys

//?Add mode processing
CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(1);
PARAMETER('01');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(*BLANK);
PARAMETER(JOB.*Job_date);
PARAMETER('Y');
PARAMETER('N');
PARAMETER('Y');
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(DTL.Ship_To_Customer);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
PARAMETER(DTL.Order_Type_Sales);
PARAMETER(WRK.Billing_Activity_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Set Invoice Suffix
CASE;

// IF WRK.Billing Activity Type is Credit Memo
IF WRK.Billing_Activity_Type = '2';

// DTL.Invoice Suffix = CND.Credit Memos
DTL.Invoice_Suffix = 'CM';

//?Set Invoice Suffix
// IF WRK.Billing Activity Type is Debit Memo
IF WRK.Billing_Activity_Type = '3';

// DTL.Invoice Suffix = CND.Debit Memos
DTL.Invoice_Suffix = 'DM';

ENDIF;

// Send completion message - 'Memo &1 created'
MESSAGE(USR1968 *COMPLETION);
MSGPARM(DTL.Order_Number);

// Call program EDT Cr/Dr Memo Lines   EF.
CALL PROGRAM(EDT Cr/Dr Memo Lines   EF) ('PDPGEFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Order_Type_Sales);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Ship_To_Name);
PARAMETER(DTL.Order_Date);
PARAMETER(DTL.Price_Status);
PARAMETER(DTL.Claim_Number);
PARAMETER(PAR.Application_Code);

// PAR.Order Number = DTL.Order Number
PAR.Order_Number = DTL.Order_Number;

ENDIF;

//?no need to update load weight, since memos aren't load planned.
//?Edit details
CASE;

// IF DTL.*CMD key is *Edit Details
IF DTL.*CMD_key = '13';

// Call program EDT Cr/Dr Memo Lines   EF.
CALL PROGRAM(EDT Cr/Dr Memo Lines   EF) ('PDPGEFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Order_Type_Sales);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Ship_To_Name);
PARAMETER(DTL.Order_Date);
PARAMETER(DTL.Price_Status);
PARAMETER(DTL.Claim_Number);
PARAMETER(PAR.Application_Code);

ENDIF;

//?Cmd 3 End of Job
CASE;

// IF DTL.*CMD key is *Exit
IF DTL.*CMD_key = '03';

QUIT;

ENDIF;

