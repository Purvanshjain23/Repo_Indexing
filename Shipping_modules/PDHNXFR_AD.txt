// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDHNXFR
// ?Date: 14.08.2025 Time: 03:34:38
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?** 06/24/2014 JJH E3160 - Logic changed in this function to
//?** only process Item Bill of Material records with Upd Standard
//?** Production = Blank(Yes).
EXECUTE FUNCTION(Upd Allocate Std      RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1477778;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Production_Type);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Warehouse_Type);
PARAMETER(PAR.Warehouse_Std_Chill_Time);
PARAMETER(PAR.Warehouse_Chill_Time);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.ATS_Adj_Type_USR_2);
PARAMETER(PAR.SM_Pieces_Need_USR);
PARAMETER(PAR.SM_Weight_Need_USR);
{
 //?USER: Initialize routine

 // PAR.100 % Already Used  USR = CND.no
 PAR.X100_Already_Used_USR = 'N';

 // PAR.Pieces Consumed USR = CON.*ZERO
 PAR.Pieces_Consumed_USR = *ZERO;

 // PAR.Weight Consumed USR = CON.*ZERO
 PAR.Weight_Consumed_USR = *ZERO;

 // PAR.RM Weight Need USR = PAR.SM Weight Need USR
 PAR.RM_Weight_Need_USR = PAR.SM_Weight_Need_USR;

 // PAR.RM Pieces Need USR = PAR.SM Pieces Need USR
 PAR.RM_Pieces_Need_USR = PAR.SM_Pieces_Need_USR;

 // PAR.RM Weight Alloc USR = PAR.SM Weight Need USR
 PAR.RM_Weight_Alloc_USR = PAR.SM_Weight_Need_USR;

 // PAR.RM Pieces Alloc USR = PAR.SM Pieces Need USR
 PAR.RM_Pieces_Alloc_USR = PAR.SM_Pieces_Need_USR;

 //?FP1054 01/20/09 use production warehouse when alloc consumed items
 EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(LCL.Production_Warehouse_Code);
 PARAMETER(LCL.Accounting_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?02/15/10 PKD C000527 Retrieve Adjust Credit Pieces from Company
 //?             Item Ext.  This will be used for the Produced Items.
 EXECUTE FUNCTION(Rtv Adj Credit Pieces RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1973401;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Adjust_Credit_Pieces);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?USER: Process Data record

 //?Consumed Items
 CASE;

 // IF DB1.BOM Type is Consumed - Meat
 IF DB1.BOM_Type = 'C';

 // AND DB1.Consume Priority % is Greater than zero
 AND DB1.Consume_Priority_Percent > *ZERO;

 //?FP1054  use lcl.production warehouse, acctng co
 EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Component_Item_Code);
 PARAMETER(WRK.Description_Line_One);
 PARAMETER(WRK.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(WRK.Item_Structure_Class_Code);
 PARAMETER(WRK.Item_Structure_Group_Code);
 PARAMETER(WRK.Item_Structure_Type_Code);
 PARAMETER(WRK.Item_Type_Code);
 PARAMETER(WRK.Default_Warehouse);
 PARAMETER(WRK.Fresh_Chilling_Time);
 PARAMETER(WRK.Base_Conv_Loss_Item);
 PARAMETER(WRK.Variety_Rendered_Cut);
 PARAMETER(WRK.Credit_Item_Status);
 PARAMETER(WRK.Std_Weight_Head_Var_Ren);
 PARAMETER(PAR.Pieces_Per_Head);
 PARAMETER(WRK.Department_Code);
 PARAMETER(WRK.Group_for_Packaging);
 PARAMETER(WRK.Seconds_Item);
 PARAMETER(PAR.Piece_Count_Item_USR);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(WRK.Export_Domestic);
 PARAMETER(WRK.Print_On_Schedule);
 PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
 PARAMETER(WRK.Fresh_Sched_As_Ordered);
 PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
 PARAMETER(WRK.Primal_Group_Code);
 PARAMETER(LCL.Production_Warehouse_Code);
 PARAMETER(WRK.Warehouse_Type);
 PARAMETER(WRK.Trans_Contol_AS400_Plant);
 PARAMETER(WRK.Warehouse_Location);
 PARAMETER(WRK.Warehouse_Std_Chill_Time);
 PARAMETER(WRK.Warehouse_Chill_Time);
 PARAMETER(WRK.PS_Item_Id);
 {
  //?Execute internal function

  EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Description_Line_One);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Type_Code);
  PARAMETER(PAR.Default_Warehouse);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Base_Conv_Loss_Item);
  PARAMETER(PAR.Variety_Rendered_Cut);
  PARAMETER(PAR.Credit_Item_Status);
  PARAMETER(PAR.Std_Weight_Head_Var_Ren);
  PARAMETER(PAR.Pieces_Per_Head);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Group_for_Packaging);
  PARAMETER(PAR.Seconds_Item);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.Export_Domestic);
  PARAMETER(PAR.Print_On_Schedule);
  PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
  PARAMETER(PAR.Fresh_Sched_As_Ordered);
  PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  PARAMETER(PAR.Warehouse_Location);
  PARAMETER(PAR.Warehouse_Std_Chill_Time);
  PARAMETER(PAR.Warehouse_Chill_Time);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Description_Line_One);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Default_Warehouse);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Std_Weight_Head_Var_Ren);
   PARAMETER(PAR.Pieces_Per_Head);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Group_for_Packaging);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Export_Domestic);
   PARAMETER(PAR.Print_On_Schedule);
   PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
   PARAMETER(PAR.Fresh_Sched_As_Ordered);
   PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
   PARAMETER(PAR.Primal_Group_Code);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.Trans_Contol_AS400_Plant);
   PARAMETER(PAR.Warehouse_Location);
   PARAMETER(PAR.Warehouse_Std_Chill_Time);
   PARAMETER(PAR.Warehouse_Chill_Time);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

  }

  EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
  PARAMETER(PAR.Item_Type_Code);
  PARAMETER(PAR.Base_Conv_Loss_Item);
  PARAMETER(PAR.Variety_Rendered_Cut);
  PARAMETER(PAR.Credit_Item_Status);
  PARAMETER(PAR.Seconds_Item);
  PARAMETER(PAR.PS_Item_Id);
  {
   //?Execute internal function

   CASE;

   // IF PAR.Item Type Code is Raw Materials
   IF PAR.Item_Type_Code = 'RM';

   // PAR.PS Item Identification = CND.RM Base
   PAR.PS_Item_Id = 'RMB';

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Seconds Item is Yes
   IF PAR.Seconds_Item = 'Y';

   // PAR.PS Item Identification = CND.FG Seconds
   PAR.PS_Item_Id = 'FSC';

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Variety/Rendered/Cut is Variety
   IF PAR.Variety_Rendered_Cut = 'V';

   // PAR.PS Item Identification = CND.FG Variety
   PAR.PS_Item_Id = 'FVR';

   // IF PAR.Variety/Rendered/Cut is Rendered
   IF PAR.Variety_Rendered_Cut = 'R';

   // PAR.PS Item Identification = CND.FG Rendered
   PAR.PS_Item_Id = 'FRD';

   // IF PAR.Variety/Rendered/Cut is Cut
   IF PAR.Variety_Rendered_Cut = 'C';

   //?Base/Converted/Fabricated
   CASE;

   // IF PAR.Credit Item Status is yes
   IF PAR.Credit_Item_Status = 'Y';

   //?Setup Base/Converted/Fabricated Credit
   CASE;

   // IF PAR.Converted/Base Item is Base
   IF PAR.Base_Conv_Loss_Item = 'B';

   // PAR.PS Item Identification = CND.FG Base Credit
   PAR.PS_Item_Id = 'FBC';

   //?Setup Base/Converted/Fabricated Credit
   // IF PAR.Converted/Base Item is Converted
   IF PAR.Base_Conv_Loss_Item = 'C';

   // PAR.PS Item Identification = CND.FG Converted Credit
   PAR.PS_Item_Id = 'FCC';

   //?Setup Base/Converted/Fabricated Credit
   // IF PAR.Converted/Base Item is Fabricated
   IF PAR.Base_Conv_Loss_Item = 'F';

   // PAR.PS Item Identification = CND.FG Fabricated Credit
   PAR.PS_Item_Id = 'FFC';

   //?Setup Base/Converted/Fabricated Credit
   // IF PAR.Converted/Base Item is Loss
   IF PAR.Base_Conv_Loss_Item = 'L';

   // PAR.PS Item Identification = CND.FG Loss Credit
   PAR.PS_Item_Id = 'FLC';

   ENDIF;

   //?Base/Converted/Fabricated
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Setup Base/Converted/Fabricated
   CASE;

   // IF PAR.Converted/Base Item is Base
   IF PAR.Base_Conv_Loss_Item = 'B';

   // PAR.PS Item Identification = CND.FG Base
   PAR.PS_Item_Id = 'FGB';

   //?Setup Base/Converted/Fabricated
   // IF PAR.Converted/Base Item is Converted
   IF PAR.Base_Conv_Loss_Item = 'C';

   // PAR.PS Item Identification = CND.FG Converted
   PAR.PS_Item_Id = 'FCV';

   //?Setup Base/Converted/Fabricated
   // IF PAR.Converted/Base Item is Fabricated
   IF PAR.Base_Conv_Loss_Item = 'F';

   // PAR.PS Item Identification = CND.FG Fabricated
   PAR.PS_Item_Id = 'FFB';

   //?Setup Base/Converted/Fabricated
   // IF PAR.Converted/Base Item is Loss
   IF PAR.Base_Conv_Loss_Item = 'L';

   // PAR.PS Item Identification = CND.FG Loss
   PAR.PS_Item_Id = 'FLS';

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

  }

 }

 //?Chilling Time
 CASE;

 // IF WRK.Warehouse Std Chill Time is yes
 IF WRK.Warehouse_Std_Chill_Time = 'Y';

 // PAR.Chilling Time USR = WRK.Warehouse Chill Time
 PAR.Chilling_Time_USR = WRK.Warehouse_Chill_Time;

 //?Chilling Time
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Chilling Time USR = WRK.Fresh Chilling Time
 PAR.Chilling_Time_USR = WRK.Fresh_Chilling_Time;

 ENDIF;

 //?FP1054 use lcl.production warehouse, acctng comp for  avail prod
 EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
 PARAMETER(LCL.Accounting_Company);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(DB1.Component_Item_Code);
 PARAMETER(LCL.Production_Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.RM_Weight_Avail_USR);
 PARAMETER(PAR.RM_Pieces_Avail_USR);
 PARAMETER(PAR.Chilling_Time_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
  //? instead of:
  //?Production = Standard + Prod Adj - Converted
  //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
  CASE;

  // IF DB1.PS Lock Status is NOT LOCKED
  IF DB1.PS_Lock_Status = 'N';

  //?Ship Cut Adjust
  CASE;

  // IF PAR.Chilling Time USR is GT Zero
  IF PAR.Chilling_Time_USR > *ZERO;

  // AND DB1.Production Date EQ JOB.*Job date
  AND DB1.Production_Date = JOB.*Job_date;

  EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
  PARAMETER(DB1.Company_Number);
  PARAMETER('P');
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  // Weight Production
  PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
  + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
  + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // Weight Available
  PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
  + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
  - DB1.PS_Weight_Prod_Allocated;

  // Pieces Available
  PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
  + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
  - DB1.PS_Pieces_Prod_Allocated;

  //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
  CASE;

  // IF PAR.ATS Weight Available USR is Less than zero
  IF PAR.ATS_Weight_Available_USR < *ZERO;

  CASE;

  // IF PAR.ATS Pieces Available USR is LE Zero
  IF PAR.ATS_Pieces_Available_USR <= *ZERO;

  // PAR.ATS Weight Available USR = CON.*ZERO
  PAR.ATS_Weight_Available_USR = *ZERO;

  // PAR.ATS Pieces Available USR = CON.*ZERO
  PAR.ATS_Pieces_Available_USR = *ZERO;

  ENDIF;

  ENDIF;

  // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
  PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

  ENDIF;

 }

 //?Schedule As Ordered
 CASE;

 // IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
 IF PAR.ATS_Adj_Type_USR_2 = 'AO';

 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 CASE;

 // IF PAR.RM Pieces Need USR GT PAR.RM Pieces Avail USR
 IF PAR.RM_Pieces_Need_USR > PAR.RM_Pieces_Avail_USR;

 // PAR.RM Pieces Avail USR = PAR.RM Pieces Need USR
 PAR.RM_Pieces_Avail_USR = PAR.RM_Pieces_Need_USR;

 // PAR.RM Weight Avail USR = PAR.RM Weight Need USR
 PAR.RM_Weight_Avail_USR = PAR.RM_Weight_Need_USR;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.RM Weight Need USR GT PAR.RM Weight Avail USR
 IF PAR.RM_Weight_Need_USR > PAR.RM_Weight_Avail_USR;

 // PAR.RM Pieces Avail USR = PAR.RM Pieces Need USR
 PAR.RM_Pieces_Avail_USR = PAR.RM_Pieces_Need_USR;

 // PAR.RM Weight Avail USR = PAR.RM Weight Need USR
 PAR.RM_Weight_Avail_USR = PAR.RM_Weight_Need_USR;

 ENDIF;

 ENDIF;

 ENDIF;

 //?Allocate consumed items or Deallocate consumed items.
 CASE;

 // IF PAR.ATS Adj Type USR 2 is Order Allocate
 IF PAR.ATS_Adj_Type_USR_2 = 'OA';

 // OR PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
 OR PAR.ATS_Adj_Type_USR_2 = 'AO';

 // PAR.Pieces Scheduled USR = CON.*ZERO
 PAR.Pieces_Scheduled_USR = *ZERO;

 // PAR.Weight Scheduled USR = CON.*ZERO
 PAR.Weight_Scheduled_USR = *ZERO;

 //?Changed to process the Consumption based on Pieces Per Head of
 //?the Component Item Code.  Mark Arensberg  9/11/97
 //?Process by Pieces Per Head from Component Item
 CASE;

 // IF PAR.Pieces Per Head is GT Zero
 IF PAR.Pieces_Per_Head > *ZERO;

 // OR PAR.Piece Count Item USR is yes
 OR PAR.Piece_Count_Item_USR = 'Y';

 CASE;

 // IF PAR.RM Pieces Need USR is GT Zero
 IF PAR.RM_Pieces_Need_USR > *ZERO;

 //?Process by Consume Priority % using Pieces
 CASE;

 // IF DB1.Consume Priority % is Equal to 100 Pct
 IF DB1.Consume_Priority_Percent = 100;

 // PAR.Pieces Need USR = PAR.RM Pieces Need USR
 PAR.Pieces_Need_USR = PAR.RM_Pieces_Need_USR;

 // Weight Need
 PAR.Weight_Need_USR = PAR.Pieces_Need_USR * PAR.PS_Avg_Piece_Wgt;

 //?Pieces/Weight Scheduled
 CASE;

 // IF PAR.Pieces Need USR GT PAR.RM Pieces Avail USR
 IF PAR.Pieces_Need_USR > PAR.RM_Pieces_Avail_USR;

 // PAR.Pieces Scheduled USR = PAR.RM Pieces Avail USR
 PAR.Pieces_Scheduled_USR = PAR.RM_Pieces_Avail_USR;

 // PAR.Weight Scheduled USR = PAR.RM Weight Avail USR
 PAR.Weight_Scheduled_USR = PAR.RM_Weight_Avail_USR;

 // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.RM Pieces Avail USR
 PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.RM_Pieces_Avail_USR;

 // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.RM Weight Avail USR
 PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.RM_Weight_Avail_USR;

 // PAR.RM Pieces Alloc USR = PAR.RM Pieces Alloc USR - PAR.RM Pieces Avail USR
 PAR.RM_Pieces_Alloc_USR = PAR.RM_Pieces_Alloc_USR - PAR.RM_Pieces_Avail_USR;

 // PAR.RM Weight Alloc USR = PAR.RM Weight Alloc USR - PAR.RM Weight Avail USR
 PAR.RM_Weight_Alloc_USR = PAR.RM_Weight_Alloc_USR - PAR.RM_Weight_Avail_USR;

 //?Pieces/Weight Scheduled
 // IF PAR.Pieces Need USR LE PAR.RM Pieces Avail USR
 IF PAR.Pieces_Need_USR <= PAR.RM_Pieces_Avail_USR;

 // PAR.Pieces Scheduled USR = PAR.Pieces Need USR
 PAR.Pieces_Scheduled_USR = PAR.Pieces_Need_USR;

 // PAR.Weight Scheduled USR = PAR.Weight Need USR
 PAR.Weight_Scheduled_USR = PAR.Weight_Need_USR;

 // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.Pieces Need USR
 PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.Pieces_Need_USR;

 // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.Weight Need USR
 PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.Weight_Need_USR;

 // PAR.RM Pieces Alloc USR = PAR.RM Pieces Alloc USR - PAR.Pieces Need USR
 PAR.RM_Pieces_Alloc_USR = PAR.RM_Pieces_Alloc_USR - PAR.Pieces_Need_USR;

 // PAR.RM Weight Alloc USR = PAR.RM Weight Alloc USR - PAR.Weight Need USR
 PAR.RM_Weight_Alloc_USR = PAR.RM_Weight_Alloc_USR - PAR.Weight_Need_USR;

 ENDIF;

 //?Process by Consume Priority % using Pieces
 // IF DB1.Consume Priority % is Not Equal to 100 PCt
 IF DB1.Consume_Priority_Percent <> 100;

 // Pieces Need
 PAR.Pieces_Need_USR = PAR.RM_Pieces_Alloc_USR * ( DB1.Consume_Priority_Percent / 100 'H' );

 // Weight Need
 PAR.Weight_Need_USR = PAR.Pieces_Need_USR * PAR.PS_Avg_Piece_Wgt;

 //?Pieces/Weight Scheduled
 CASE;

 // IF PAR.Pieces Need USR GT PAR.RM Pieces Avail USR
 IF PAR.Pieces_Need_USR > PAR.RM_Pieces_Avail_USR;

 // PAR.Pieces Scheduled USR = PAR.RM Pieces Avail USR
 PAR.Pieces_Scheduled_USR = PAR.RM_Pieces_Avail_USR;

 // PAR.Weight Scheduled USR = PAR.RM Weight Avail USR
 PAR.Weight_Scheduled_USR = PAR.RM_Weight_Avail_USR;

 // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.RM Pieces Avail USR
 PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.RM_Pieces_Avail_USR;

 // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.RM Weight Avail USR
 PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.RM_Weight_Avail_USR;

 //?Pieces/Weight Scheduled
 // IF PAR.Pieces Need USR LE PAR.RM Pieces Avail USR
 IF PAR.Pieces_Need_USR <= PAR.RM_Pieces_Avail_USR;

 // PAR.Pieces Scheduled USR = PAR.Pieces Need USR
 PAR.Pieces_Scheduled_USR = PAR.Pieces_Need_USR;

 // PAR.Weight Scheduled USR = PAR.Weight Need USR
 PAR.Weight_Scheduled_USR = PAR.Weight_Need_USR;

 // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.Pieces Need USR
 PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.Pieces_Need_USR;

 // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.Weight Need USR
 PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.Weight_Need_USR;

 ENDIF;

 ENDIF;

 ENDIF;

 //?Process by Pieces Per Head from Component Item
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.RM Weight Need USR is Greater than zero
 IF PAR.RM_Weight_Need_USR > *ZERO;

 //?Process by Consume Priority % using Weight
 CASE;

 // IF DB1.Consume Priority % is Equal to 100 Pct
 IF DB1.Consume_Priority_Percent = 100;

 // PAR.Weight Need USR = PAR.RM Weight Need USR
 PAR.Weight_Need_USR = PAR.RM_Weight_Need_USR;

 //?Pieces Need
 CASE;

 // IF PAR.PS Avg Piece Wgt is GT Zero
 IF PAR.PS_Avg_Piece_Wgt > *ZERO;

 // Pieces Need USR
 PAR.Pieces_Need_USR = PAR.Weight_Need_USR / PAR.PS_Avg_Piece_Wgt;

 ENDIF;

 //?Pieces/Weight Scheduled
 CASE;

 // IF PAR.Weight Need USR GT PAR.RM Weight Avail USR
 IF PAR.Weight_Need_USR > PAR.RM_Weight_Avail_USR;

 // PAR.Pieces Scheduled USR = PAR.RM Pieces Avail USR
 PAR.Pieces_Scheduled_USR = PAR.RM_Pieces_Avail_USR;

 // PAR.Weight Scheduled USR = PAR.RM Weight Avail USR
 PAR.Weight_Scheduled_USR = PAR.RM_Weight_Avail_USR;

 // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.RM Pieces Avail USR
 PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.RM_Pieces_Avail_USR;

 // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.RM Weight Avail USR
 PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.RM_Weight_Avail_USR;

 // PAR.RM Pieces Alloc USR = PAR.RM Pieces Alloc USR - PAR.RM Pieces Avail USR
 PAR.RM_Pieces_Alloc_USR = PAR.RM_Pieces_Alloc_USR - PAR.RM_Pieces_Avail_USR;

 // PAR.RM Weight Alloc USR = PAR.RM Weight Alloc USR - PAR.RM Weight Avail USR
 PAR.RM_Weight_Alloc_USR = PAR.RM_Weight_Alloc_USR - PAR.RM_Weight_Avail_USR;

 //?Pieces/Weight Scheduled
 // IF PAR.Weight Need USR LE PAR.RM Weight Avail USR
 IF PAR.Weight_Need_USR <= PAR.RM_Weight_Avail_USR;

 // PAR.Pieces Scheduled USR = PAR.Pieces Need USR
 PAR.Pieces_Scheduled_USR = PAR.Pieces_Need_USR;

 // PAR.Weight Scheduled USR = PAR.Weight Need USR
 PAR.Weight_Scheduled_USR = PAR.Weight_Need_USR;

 // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.Pieces Need USR
 PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.Pieces_Need_USR;

 // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.Weight Need USR
 PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.Weight_Need_USR;

 // PAR.RM Pieces Alloc USR = PAR.RM Pieces Alloc USR - PAR.Pieces Need USR
 PAR.RM_Pieces_Alloc_USR = PAR.RM_Pieces_Alloc_USR - PAR.Pieces_Need_USR;

 // PAR.RM Weight Alloc USR = PAR.RM Weight Alloc USR - PAR.Weight Need USR
 PAR.RM_Weight_Alloc_USR = PAR.RM_Weight_Alloc_USR - PAR.Weight_Need_USR;

 ENDIF;

 //?Process by Consume Priority % using Weight
 // IF DB1.Consume Priority % is Not Equal to 100 PCt
 IF DB1.Consume_Priority_Percent <> 100;

 // Weight Need
 PAR.Weight_Need_USR = PAR.RM_Weight_Alloc_USR * ( DB1.Consume_Priority_Percent / 100 'H' );

 //?Pieces Need
 CASE;

 // IF PAR.PS Avg Piece Wgt is GT Zero
 IF PAR.PS_Avg_Piece_Wgt > *ZERO;

 // Pieces Need
 PAR.Pieces_Need_USR = PAR.Weight_Need_USR / PAR.PS_Avg_Piece_Wgt;

 ENDIF;

 //?Pieces/Weight Scheduled
 CASE;

 // IF PAR.Weight Need USR GT PAR.RM Weight Avail USR
 IF PAR.Weight_Need_USR > PAR.RM_Weight_Avail_USR;

 // PAR.Pieces Scheduled USR = PAR.RM Pieces Avail USR
 PAR.Pieces_Scheduled_USR = PAR.RM_Pieces_Avail_USR;

 // PAR.Weight Scheduled USR = PAR.RM Weight Avail USR
 PAR.Weight_Scheduled_USR = PAR.RM_Weight_Avail_USR;

 // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.RM Pieces Avail USR
 PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.RM_Pieces_Avail_USR;

 // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.RM Weight Avail USR
 PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.RM_Weight_Avail_USR;

 //?Pieces/Weight Scheduled
 // IF PAR.Weight Need USR LE PAR.RM Weight Avail USR
 IF PAR.Weight_Need_USR <= PAR.RM_Weight_Avail_USR;

 // PAR.Pieces Scheduled USR = PAR.Pieces Need USR
 PAR.Pieces_Scheduled_USR = PAR.Pieces_Need_USR;

 // PAR.Weight Scheduled USR = PAR.Weight Need USR
 PAR.Weight_Scheduled_USR = PAR.Weight_Need_USR;

 // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.Pieces Need USR
 PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.Pieces_Need_USR;

 // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.Weight Need USR
 PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.Weight_Need_USR;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 // PAR.Pieces Consumed USR = PAR.Pieces Consumed USR + PAR.Pieces Scheduled USR
 PAR.Pieces_Consumed_USR = PAR.Pieces_Consumed_USR + PAR.Pieces_Scheduled_USR;

 // PAR.Weight Consumed USR = PAR.Weight Consumed USR + PAR.Weight Scheduled USR
 PAR.Weight_Consumed_USR = PAR.Weight_Consumed_USR + PAR.Weight_Scheduled_USR;

 //?**UPDATE**
 //?FP1054  use lcl.production warehouse
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Conv  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476182;
 PARAMETER(LCL.Accounting_Company);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(DB1.Component_Item_Code);
 PARAMETER(LCL.Production_Warehouse_Code);
 PARAMETER(PAR.Pieces_Scheduled_USR);
 PARAMETER(PAR.Weight_Scheduled_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Item_Code);
 {
  //?USER: Process Data record

  // PAR.PS Pieces Converted = DB1.PS Pieces Converted + PAR.Pieces Scheduled
  PAR.PS_Pieces_Converted = DB1.PS_Pieces_Converted + PAR.Pieces_Scheduled;

  // PAR.PS Weight Converted = DB1.PS Weight Converted + PAR.Weight Scheduled
  PAR.PS_Weight_Converted = DB1.PS_Weight_Converted + PAR.Weight_Scheduled;

  //?If weight OR pieces converted is LT 0 then make zero
  CASE;

  // IF PAR.PS Weight Converted is LT Zero
  IF PAR.PS_Weight_Converted < *ZERO;

  // OR PAR.PS Pieces Converted is LT Zeros
  OR PAR.PS_Pieces_Converted < *ZERO;

  // PAR.PS Weight Converted = CON.*ZERO
  PAR.PS_Weight_Converted = *ZERO;

  // PAR.PS Pieces Converted = CON.*ZERO
  PAR.PS_Pieces_Converted = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Conv  CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476183;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create consumed records   -- 10/05/2020 WITH SHIPP CO ON ORDER
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?WAS UPD WITH PAR.COMPANY NUMBER WHICH IS THE ACCTNG CO 10-05-2020
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code_USR);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code_USR);
  PARAMETER(PAR.Pieces_Scheduled);
  PARAMETER(PAR.Weight_Scheduled);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

 }

 //?Allocate consumed items or Deallocate consumed items.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Deallocate here:
 // PAR.Pieces Scheduled USR = CON.*ZERO
 PAR.Pieces_Scheduled_USR = *ZERO;

 // PAR.Weight Scheduled USR = CON.*ZERO
 PAR.Weight_Scheduled_USR = *ZERO;

 EXECUTE FUNCTION(Rtv Order cnsmd wgt,pc RT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1928106;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Production_Date);
 PARAMETER(DB1.Component_Item_Code);
 PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
 PARAMETER(LCL.OD_Weight_Scheduled);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.Weight Scheduled USR = CON.*ZERO - LCL.OD Weight Scheduled
 PAR.Weight_Scheduled_USR = *ZERO - LCL.OD_Weight_Scheduled;

 // PAR.Pieces Scheduled USR = CON.*ZERO - LCL.OD Pieces Scheduled
 PAR.Pieces_Scheduled_USR = *ZERO - LCL.OD_Qty_Cnsmd_Pieces_Sched;

 // PAR.Pieces Consumed USR = PAR.Pieces Consumed USR + PAR.Pieces Scheduled USR
 PAR.Pieces_Consumed_USR = PAR.Pieces_Consumed_USR + PAR.Pieces_Scheduled_USR;

 // PAR.Weight Consumed USR = PAR.Weight Consumed USR + PAR.Weight Scheduled USR
 PAR.Weight_Consumed_USR = PAR.Weight_Consumed_USR + PAR.Weight_Scheduled_USR;

 //?**UPDATE**
 //?FP1054  use lcl.production warehouse, acctng co
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Conv  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476182;
 PARAMETER(LCL.Accounting_Company);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(DB1.Component_Item_Code);
 PARAMETER(LCL.Production_Warehouse_Code);
 PARAMETER(PAR.Pieces_Scheduled_USR);
 PARAMETER(PAR.Weight_Scheduled_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Item_Code);
 {
  //?USER: Process Data record

  // PAR.PS Pieces Converted = DB1.PS Pieces Converted + PAR.Pieces Scheduled
  PAR.PS_Pieces_Converted = DB1.PS_Pieces_Converted + PAR.Pieces_Scheduled;

  // PAR.PS Weight Converted = DB1.PS Weight Converted + PAR.Weight Scheduled
  PAR.PS_Weight_Converted = DB1.PS_Weight_Converted + PAR.Weight_Scheduled;

  //?If weight OR pieces converted is LT 0 then make zero
  CASE;

  // IF PAR.PS Weight Converted is LT Zero
  IF PAR.PS_Weight_Converted < *ZERO;

  // OR PAR.PS Pieces Converted is LT Zeros
  OR PAR.PS_Pieces_Converted < *ZERO;

  // PAR.PS Weight Converted = CON.*ZERO
  PAR.PS_Weight_Converted = *ZERO;

  // PAR.PS Pieces Converted = CON.*ZERO
  PAR.PS_Pieces_Converted = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Conv  CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476183;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create consumed records   -- 10/05/2020 WITH SHIPP CO ON ORDER
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?WAS UPD WITH PAR.COMPANY NUMBER WHICH IS THE ACCTNG CO 10-05-2020
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code_USR);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code_USR);
  PARAMETER(PAR.Pieces_Scheduled);
  PARAMETER(PAR.Weight_Scheduled);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

 }

 ENDIF;

 ENDIF;

 //?** 06/24/2014 JJH E3160
 //?** Changed the definition of the "Average if WPA" field to "Upd
 //?** Standard Production".  Include Item Bill of Material records
 //?** with Upd Standard Production = Blank(yes).
 //?Produced Item
 CASE;

 // IF DB1.BOM Type is Produced - Meat
 IF DB1.BOM_Type = 'P';

 // AND DB1.Production Yield is not equal to zeros
 AND DB1.Production_Yield <> *ZERO;

 // AND DB1.Upd Standard Production is blank
 AND DB1.Upd_Standard_Production = *BLANK;

 //?FP1054 RMC 5/14/09 Chg above CASE to ne 0 , it was GT 0
 CASE;

 // IF DB1.Component Item Code NE DB1.Item Code
 IF DB1.Component_Item_Code <> DB1.Item_Code;

 EXECUTE FUNCTION(RTV Pces/Bag/Unit Chil RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1538895;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Component_Item_Code);
 PARAMETER(NLL.Description_Line_One);
 PARAMETER(NLL.Unit_Weight);
 PARAMETER(NLL.Fresh_Chilling_Time);
 PARAMETER(LCL.Piece_Count_Item);
 PARAMETER(NLL.Pieces_Per_Bag);
 PARAMETER(NLL.Bags_Per_Unit);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Piece Count Item = PAR.Piece Count Item
 LCL.Piece_Count_Item = PAR.Piece_Count_Item;

 ENDIF;

 // Weight Scheduled
 WRK.Copies_15_5_USR = PAR.Weight_Consumed_USR * ( DB1.Production_Yield / 100 'H' ) 'H';

 //?9/28/11 dont control rounding with +.005
 //?6/03/09   control rounding.. needed in case a number is like nnnn.9935
 //?  because we want it to round up
 // PAR.Weight Scheduled USR = WRK.Copies 15.5           USR * CON.1 *Rounded
 PAR.Weight_Scheduled_USR = WRK.Copies_15_5_USR * 1 'H';

 //?The number of Pieces Scheduled for a Produced Item is based
 //?on the Piece Count Item sts of the Component Item Code.
 //?Pieces Scheduled
 CASE;

 // IF LCL.Piece Count Item is yes
 IF LCL.Piece_Count_Item = 'Y';

 //?CHANGE LOG
 DO;

 //?S00965 PKD 10/14/09 Pieces scheduled needs to be reduced if
 //?                    the yield is negative.
 //?C000527 PKD 02/12/09 When we have a negative yield, only the weight
 //?                     needs to be adjusted and not the pieces.
 //?C000527 PKD 02/12/09 The Pieces should not be adjusted at all.
 //?                     Added Adjust Credit Pieces logig.
 //?                     * Business Rule *
 //?                     If an Item is converted from a Base Boneless
 //?                     Loin, then do not adjust the Pieces of the
 //?                     Credit Items.  Only the Weight needs to be
 //?                     adjusted.  The Pieces of the Tenderloins and
 //?                     Sirloins, for example, were already produced
 //?                     when the Base Boneless Loin was produced in
 //?                     the Standard Mix.
 ENDDO;

 //?02/15/2010 PKD C000527 Added Adjust Credit Pieces logic.
 CASE;

 // IF LCL.Adjust Credit Pieces is No
 IF LCL.Adjust_Credit_Pieces = 'N';

 CASE;

 // IF DB1.Item Code EQ DB1.Component Item Code
 IF DB1.Item_Code = DB1.Component_Item_Code;

 //?* Converted Finished Goods *
 // PAR.Pieces Scheduled USR = PAR.Pieces Consumed USR
 PAR.Pieces_Scheduled_USR = PAR.Pieces_Consumed_USR;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?* Credit Items *
 // PAR.Pieces Scheduled USR = CON.*ZERO
 PAR.Pieces_Scheduled_USR = *ZERO;

 ENDIF;

 //?02/15/2010 PKD C000527 Added Adjust Credit Pieces logic.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?* Base Finished Goods *
 // PAR.Pieces Scheduled USR = PAR.Pieces Consumed USR
 PAR.Pieces_Scheduled_USR = PAR.Pieces_Consumed_USR;

 ENDIF;

 //?Pieces Scheduled
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Pieces Scheduled USR = CON.*ZERO
 PAR.Pieces_Scheduled_USR = *ZERO;

 ENDIF;

 //?**UPDATE**
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(DB1.Component_Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Pieces_Scheduled_USR);
 PARAMETER(PAR.Weight_Scheduled_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Standard = PAR.Weight Scheduled
  PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.PS Weight Standard is NE Zero
  IF PAR.PS_Weight_Standard <> *ZERO;

  // OR PAR.PS Pieces Standard is NE Zeros
  OR PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
  PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
 }

 ENDIF;

}


