// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDWGPVR
// ?Date: 14.08.2025 Time: 03:30:15
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.Company Number Pass   USR = PAR.Company Number
PAR.Company_Number_Pass_USR = PAR.Company_Number;

//?***** Change Log and Comments
DO;

//?** 05/14/2007 LJB FP11014
//?** Change the F4 on Co# to pass in the Company# that is on the
//?** screen.
ENDDO;

//?USER: Load screen

// DTL.Company Number = PAR.Company Number
DTL.Company_Number = PAR.Company_Number;

// DTL.Company Number CDE = PAR.Company Number
DTL.Company_Number_CDE = PAR.Company_Number;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.USR_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.USR Check Y/N Status = CND.yes
DTL.USR_Check_Y_N_Status = 'Y';

// DTL.USR Select/Omit Flag = CND.Select
DTL.USR_Select_Omit_Flag = 'S';

// DTL.Report Seq- Load Summ USR = CND.By Sched Ship Date/Load
DTL.Report_Seq_Load_Summ_USR = 1;

// DTL.Report Sequence Desc  USR = Condition name of DTL.Report Seq- Load Summ USR
DTL.Report_Sequence_Desc_USR = RTVCND(DTL.Report_Seq_Load_Summ_USR);

//?USER: Validate fields

//?Process F4 on Company Number
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Company Number CDE
IF PGM.*Cursor_field = DTL.Company_Number_CDE;

CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(DTL.Company_Number_CDE);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

ENDIF;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Load#
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.CD7 Int Numeric Key
AND PGM.*Cursor_field = DTL.CD7_Int_Numeric_Key;

// WRK.Load ID Alpha = DTL.CD7 Int Numeric Key
WRK.Load_ID_Alpha = DTL.CD7_Int_Numeric_Key;

//?** Change to pass in the Co# from the screen itself
// Call program SEL Load ID            SR.
CALL PROGRAM(SEL Load ID            SR) ('OMCPSRR');
PARAMETER(WRK.Load_ID_Alpha);
PARAMETER(DTL.Company_Number_CDE);

// DTL.CD7 Int Numeric Key = WRK.Load ID Alpha
DTL.CD7_Int_Numeric_Key = WRK.Load_ID_Alpha;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on carrier code
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.USR Carrier Code
AND PGM.*Cursor_field = DTL.USR_Carrier_Code;

// Call program SEL Carrier Name       SR.
CALL PROGRAM(SEL Carrier Name       SR) ('PDWHSRR');
PARAMETER(DTL.USR_Carrier_Code);
PARAMETER(DTL.Name);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Warehouse 1
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.USR Warehouse Code
AND PGM.*Cursor_field = DTL.USR_Warehouse_Code;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.USR_Warehouse_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Warehouse 2
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.USR CDE Parm 1
AND PGM.*Cursor_field = DTL.USR_CDE_Parm_1;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.USR_CDE_Parm_1);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Warehouse 3
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.USR CDE Parm 2
AND PGM.*Cursor_field = DTL.USR_CDE_Parm_2;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.USR_CDE_Parm_2);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Warehouse 4
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.USR CDE Parm 3
AND PGM.*Cursor_field = DTL.USR_CDE_Parm_3;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.USR_CDE_Parm_3);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Warehouse 5
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.USR CDE Parm 4
AND PGM.*Cursor_field = DTL.USR_CDE_Parm_4;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.USR_CDE_Parm_4);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Warehouse 6
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.USR CDE Parm 5
AND PGM.*Cursor_field = DTL.USR_CDE_Parm_5;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.USR_CDE_Parm_5);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Warehouse 7
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.USR CDE Parm 6
AND PGM.*Cursor_field = DTL.USR_CDE_Parm_6;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.USR_CDE_Parm_6);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Warehouse 8
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.USR CDE Parm 7
AND PGM.*Cursor_field = DTL.USR_CDE_Parm_7;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.USR_CDE_Parm_7);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Warehouse 9
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.USR CDE Parm 8
AND PGM.*Cursor_field = DTL.USR_CDE_Parm_8;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.USR_CDE_Parm_8);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Warehouse 10
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.USR CDE Parm 9
AND PGM.*Cursor_field = DTL.USR_CDE_Parm_9;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.USR_CDE_Parm_9);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?USER: Validate relations

// DTL.USR Company Name = CON.*BLANK
DTL.USR_Company_Name = *BLANK;

CASE;

// IF DTL.Company Number CDE is not equal to zero
IF DTL.Company_Number_CDE <> *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.USR_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// DTL.USR Desc. 10 = Condition name of DTL.USR Load Type
DTL.USR_Desc_10 = RTVCND(DTL.USR_Load_Type);

// DTL.Report Sequence Desc  USR = Condition name of DTL.Report Seq- Load Summ USR
DTL.Report_Sequence_Desc_USR = RTVCND(DTL.Report_Seq_Load_Summ_USR);

//?Company not found
CASE;

// IF PGM.*Return code is Company not found
IF PGM.*Return_code = 'USR0003';

// DTL.Company Number = DTL.Company Number CDE
DTL.Company_Number = DTL.Company_Number_CDE;

// Send error message - 'Company Number not found'
ERROR(USR0163);

//?Company not found
// IF *OTHERWISE
IF *OTHERWISE;

//?02/13/07 PKD Removed hardcoding of Company Number
EXECUTE FUNCTION(Rtv Plant Co Status   RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1761084;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(LCL.Plant_Company_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Plant Company Sts is Plant Company
IF LCL.Plant_Company_Sts = 'P';

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Company Number = DTL.Company Number CDE
DTL.Company_Number = DTL.Company_Number_CDE;

// Send error message - 'Company Number not found'
ERROR(USR0163);

ENDIF;

ENDIF;

//?One of the date ranges must be entered
CASE;

// IF DTL.USR From Date EQ WRK.ZERO
IF DTL.USR_From_Date = WRK.ZERO;

// AND DTL.Prm From Date EQ WRK.ZERO
AND DTL.Prm_From_Date = WRK.ZERO;

// AND DTL.From Date             USR EQ WRK.ZERO
AND DTL.From_Date_USR = WRK.ZERO;

// Send error message - 'A Date Range is Required.'
ERROR(USR2591);
MSGPARM(DTL.USR_From_Date);
MSGPARM(DTL.Prm_From_Date);
MSGPARM(DTL.From_Date_USR);

ENDIF;

//?If From Sched Ship Date GT Through Date, send error message
CASE;

// IF DTL.USR From Date GT DTL.USR Through Date
IF DTL.USR_From_Date > DTL.USR_Through_Date;

// Send error message - 'From date exceeds to date.  Please re-enter.'
ERROR(USR0319);
MSGPARM(DTL.USR_From_Date);

ENDIF;

//?If From Sched Deliv Date GT Through Date, send error message
CASE;

// IF DTL.Prm From Date GT DTL.Prm To Date
IF DTL.Prm_From_Date > DTL.Prm_To_Date;

// Send error message - 'From date exceeds to date.  Please re-enter.'
ERROR(USR0319);
MSGPARM(DTL.Prm_From_Date);

ENDIF;

//?Validate Load Id
CASE;

// IF DTL.CD7 Int Numeric Key is not equal zero
IF DTL.CD7_Int_Numeric_Key <> *ZERO;

EXECUTE FUNCTION(RTV Load Status        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1297640;
PARAMETER(DTL.CD7_Int_Numeric_Key);
PARAMETER(WRK.Load_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

}


//?Load not found
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// WRK.Load ID Alpha = DTL.CD7 Int Numeric Key
WRK.Load_ID_Alpha = DTL.CD7_Int_Numeric_Key;

// Send error message - 'Load ID is Invalid.'
ERROR(USR1305);
MSGPARM(WRK.Load_ID_Alpha);

ENDIF;

ENDIF;

//?Validate Carrier Code
CASE;

// IF DTL.USR Carrier Code is Entered
IF DTL.USR_Carrier_Code <> *BLANK;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.USR_Carrier_Code);
PARAMETER(DTL.Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Carrier code not found
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Carrier doesn't exist'
ERROR(USR1252);
MSGPARM(DTL.USR_Carrier_Code);

ENDIF;

ENDIF;

//?Validate warehouse 1 if entered
CASE;

// IF DTL.USR Warehouse Code is Warehouse Code not Blank
IF DTL.USR_Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.USR_Warehouse_Code);
PARAMETER(DTL.USR_Warehouse_description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.USR_Warehouse_Code);

ENDIF;

//?Validate warehouse 1 if entered
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.USR Warehouse description = CND.equal to blank
DTL.USR_Warehouse_description = *BLANK;

ENDIF;

//?Validate warehouse 2 if entered
CASE;

// IF DTL.USR CDE Parm 1 is Warehouse Code not Blank
IF DTL.USR_CDE_Parm_1 <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.USR_CDE_Parm_1);
PARAMETER(DTL.USR_Comment_1);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.USR_CDE_Parm_1);

ENDIF;

//?Validate warehouse 2 if entered
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.USR Comment 1 = CND.Eq Blank
DTL.USR_Comment_1 = *BLANK;

ENDIF;

//?Validate warehouse 3 if entered
CASE;

// IF DTL.USR CDE Parm 2 is Warehouse Code not Blank
IF DTL.USR_CDE_Parm_2 <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.USR_CDE_Parm_2);
PARAMETER(DTL.USR_Comment_2);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.USR_CDE_Parm_2);

ENDIF;

//?Validate warehouse 3 if entered
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.USR Comment 2 = CND.Eq Blank
DTL.USR_Comment_2 = *BLANK;

ENDIF;

//?Validate warehouse 4 if entered
CASE;

// IF DTL.USR CDE Parm 3 is Warehouse Code not Blank
IF DTL.USR_CDE_Parm_3 <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.USR_CDE_Parm_3);
PARAMETER(DTL.USR_Comment_3);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.USR_CDE_Parm_3);

ENDIF;

//?Validate warehouse 4 if entered
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.USR Comment 3 = CND.Eq Blank
DTL.USR_Comment_3 = *BLANK;

ENDIF;

//?Validate warehouse 5 if entered
CASE;

// IF DTL.USR CDE Parm 4 is Warehouse Code not Blank
IF DTL.USR_CDE_Parm_4 <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.USR_CDE_Parm_4);
PARAMETER(DTL.USR_Comment_4);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.USR_CDE_Parm_4);

ENDIF;

//?Validate warehouse 5 if entered
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.USR Comment 4 = CND.Eq Blank
DTL.USR_Comment_4 = *BLANK;

ENDIF;

//?Validate warehouse 6 if entered
CASE;

// IF DTL.USR CDE Parm 5 is Warehouse Code not Blank
IF DTL.USR_CDE_Parm_5 <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.USR_CDE_Parm_5);
PARAMETER(DTL.USR_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.USR_CDE_Parm_5);

ENDIF;

//?Validate warehouse 6 if entered
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.USR Description = CND.equal to blank
DTL.USR_Description = *BLANK;

ENDIF;

//?Validate warehouse 7 if entered
CASE;

// IF DTL.USR CDE Parm 6 is Warehouse Code not Blank
IF DTL.USR_CDE_Parm_6 <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.USR_CDE_Parm_6);
PARAMETER(DTL.USR_Description_New);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.USR_CDE_Parm_6);

ENDIF;

//?Validate warehouse 7 if entered
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.USR Description - New = CND.equal to blank
DTL.USR_Description_New = *BLANK;

ENDIF;

//?Validate warehouse 8 if entered
CASE;

// IF DTL.USR CDE Parm 7 is Warehouse Code not Blank
IF DTL.USR_CDE_Parm_7 <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.USR_CDE_Parm_7);
PARAMETER(DTL.USR_Message_Line_1);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.USR_CDE_Parm_7);

ENDIF;

//?Validate warehouse 8 if entered
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.USR Message Line 1 = CND.Eq Blank
DTL.USR_Message_Line_1 = *BLANK;

ENDIF;

//?Validate warehouse 9 if entered
CASE;

// IF DTL.USR CDE Parm 8 is Warehouse Code not Blank
IF DTL.USR_CDE_Parm_8 <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.USR_CDE_Parm_8);
PARAMETER(DTL.USR_Message_Line_2);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.USR_CDE_Parm_8);

ENDIF;

//?Validate warehouse 9 if entered
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.USR Message Line 2 = CND.Eq Blank
DTL.USR_Message_Line_2 = *BLANK;

ENDIF;

//?Validate warehouse 10 if entered
CASE;

// IF DTL.USR CDE Parm 9 is Warehouse Code not Blank
IF DTL.USR_CDE_Parm_9 <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.USR_CDE_Parm_9);
PARAMETER(DTL.USR_Message_Line_3);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.USR_CDE_Parm_9);

ENDIF;

//?Validate warehouse 10 if entered
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.USR Message Line 3 = CND.Eq Blank
DTL.USR_Message_Line_3 = *BLANK;

ENDIF;

//?If Omit is selected there must be at least 1 warehouse entered
CASE;

// IF DTL.USR Select/Omit Flag is Omit
IF DTL.USR_Select_Omit_Flag = 'O';

CASE;

// IF DTL.USR Warehouse Code is Warehouse Code Blank
IF DTL.USR_Warehouse_Code = *BLANK;

// AND DTL.USR CDE Parm 1 is Warehouse Code Blank
AND DTL.USR_CDE_Parm_1 = *BLANK;

// AND DTL.USR CDE Parm 2 is Warehouse Code Blank
AND DTL.USR_CDE_Parm_2 = *BLANK;

// AND DTL.USR CDE Parm 3 is Warehouse Code Blank
AND DTL.USR_CDE_Parm_3 = *BLANK;

// AND DTL.USR CDE Parm 4 is Warehouse Code Blank
AND DTL.USR_CDE_Parm_4 = *BLANK;

// AND DTL.USR CDE Parm 5 is Warehouse Code Blank
AND DTL.USR_CDE_Parm_5 = *BLANK;

// AND DTL.USR CDE Parm 6 is Warehouse Code Blank
AND DTL.USR_CDE_Parm_6 = *BLANK;

// AND DTL.USR CDE Parm 7 is Warehouse Code Blank
AND DTL.USR_CDE_Parm_7 = *BLANK;

// AND DTL.USR CDE Parm 8 is Warehouse Code Blank
AND DTL.USR_CDE_Parm_8 = *BLANK;

// AND DTL.USR CDE Parm 9 is Warehouse Code Blank
AND DTL.USR_CDE_Parm_9 = *BLANK;

// Send error message - 'Warehouse Code is required.'
ERROR(USR2015);
MSGPARM(DTL.USR_Warehouse_Code);

ENDIF;

ENDIF;

//?USER: User defined action

MOVE *ALL (To: PAR From: DTL);

//?Submit job for Print
// PAR.Company Number Pass   USR = DTL.Company Number CDE
PAR.Company_Number_Pass_USR = DTL.Company_Number_CDE;

// PAR.Date 1          PASS  USR = DTL.USR From Date
PAR.Date_1_PASS_USR = DTL.USR_From_Date;

// PAR.Date 2          PASS  USR = DTL.USR Through Date
PAR.Date_2_PASS_USR = DTL.USR_Through_Date;

// PAR.From Date Pass        USR = DTL.Prm From Date
PAR.From_Date_Pass_USR = DTL.Prm_From_Date;

// PAR.Thru Date Pass        USR = DTL.Prm To Date
PAR.Thru_Date_Pass_USR = DTL.Prm_To_Date;

// PAR.Order Number 1  PASS  USR = DTL.CD7 Int Numeric Key
PAR.Order_Number_1_PASS_USR = DTL.CD7_Int_Numeric_Key;

// PAR.USR Summary/Detail or Tot = DTL.USR Check Y/N Status
PAR.USR_Summary_Detail_or_Tot = DTL.USR_Check_Y_N_Status;

// PAR.Appoint Date From Pass = DTL.From Date             USR
PAR.Appoint_Date_From_Pass = DTL.From_Date_USR;

// PAR.Appoint Date To Pass = DTL.Thru Date             USR
PAR.Appoint_Date_To_Pass = DTL.Thru_Date_USR;

// Call program Prt Load Summary Pass  UP.
CALL PROGRAM(Prt Load Summary Pass  UP) ('PDWIUPR');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('O/M');
PARAMETER('OMNLPCLP');
PARAMETER('Print Load Summary');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Date_1_PASS_USR);
PARAMETER(PAR.Date_2_PASS_USR);
PARAMETER(PAR.From_Date_Pass_USR);
PARAMETER(PAR.Thru_Date_Pass_USR);
PARAMETER(PAR.Order_Number_1_PASS_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(DTL.USR_Check_Y_N_Status);
PARAMETER(DTL.USR_Carrier_Code);
PARAMETER(DTL.USR_Load_Type);
PARAMETER(DTL.Shipping_Method);
PARAMETER(DTL.USR_Warehouse_Code);
PARAMETER(DTL.USR_CDE_Parm_1);
PARAMETER(DTL.USR_CDE_Parm_2);
PARAMETER(DTL.USR_CDE_Parm_3);
PARAMETER(DTL.USR_CDE_Parm_4);
PARAMETER(DTL.USR_CDE_Parm_5);
PARAMETER(DTL.USR_CDE_Parm_6);
PARAMETER(DTL.USR_CDE_Parm_7);
PARAMETER(DTL.USR_CDE_Parm_8);
PARAMETER(DTL.USR_CDE_Parm_9);
PARAMETER(DTL.USR_Select_Omit_Flag);
PARAMETER(DTL.Report_Seq_Load_Summ_USR);
PARAMETER(PAR.Appoint_Date_From_Pass);
PARAMETER(PAR.Appoint_Date_To_Pass);

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?USER: Exit program processing

CASE;

// IF DTL.*CMD key is *Exit
IF DTL.*CMD_key = '03';

PGM.*Return_code = 'Y2U9999';

RETURN;

ENDIF;

