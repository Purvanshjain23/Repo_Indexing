// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDUZE1R
// ?Date: 14.08.2025 Time: 03:36:13
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PAR.Application Code = CND.Order Management System
PAR.Application_Code = 'OMS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// WRK.Update Exception Status = CND.no
WRK.Update_Exception_Status = 'N';

EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program EXC Rtv Status        XF.
CALL PROGRAM(EXC Rtv Status        XF) ('PBXNXFR');
PARAMETER(PAR.Company_Number);
PARAMETER('TMSLDP');
PARAMETER(PAR.Live_with_TPM);

//?04/13/18 DN S12917-To Save Original Sales Route.
// LCL.Sales Route Code 2 USR = CON.*BLANK
LCL.Sales_Route_Code_2_USR = *BLANK;

//?USER: Initialize detail screen (existing record)

//?* Save original values. If changed, flag to send to MG  E004119
CASE;

// IF LCL.Company Organization is High Plains Biodiesel
IF LCL.Company_Organization = 'H';

// DTL.Text USR 20 = CON.Override Type Code .
DTL.Text_USR_20 = 'Override Type Code .';

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Text USR 20 = CON.Sales Channel . . .
DTL.Text_USR_20 = 'Sales Channel . . .';

ENDIF;

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?rtv salesperson
CASE;

// IF DTL.Sales Route Code is entered
IF DTL.Sales_Route_Code <> *BLANK;

EXECUTE FUNCTION(RTV Salesperson        RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1369411;
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(DTL.Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?04/13/18 DN S12917-To Save Original Sales Route.
// LCL.Sales Route Code 2 USR = DTL.Sales Route Code
LCL.Sales_Route_Code_2_USR = DTL.Sales_Route_Code;

ENDIF;

//?transfer in storage
CASE;

// IF DTL.Transfer in Storage Ind is No
IF DTL.Transfer_in_Storage_Ind = 'N';

// PAR.Transfer in Storage Ind = DTL.Transfer in Storage Ind
PAR.Transfer_in_Storage_Ind = DTL.Transfer_in_Storage_Ind;

ENDIF;

// WRK.Transfer in Storage Ind = DTL.Transfer in Storage Ind
WRK.Transfer_in_Storage_Ind = DTL.Transfer_in_Storage_Ind;

// WRK.Event Type = DTL.Event Code
WRK.Event_Type = DTL.Event_Code;

// DTL.Condition Desc. 1  USR = Condition name of WRK.Event Type
DTL.Condition_Desc_1_USR = RTVCND(WRK.Event_Type);

// WRK.Delivery P.O. Number = DTL.USR 15 Text           USR
WRK.Delivery_P_O_Number = DTL.USR_15_Text_USR;

//?RMC PFS017 Save to check for change  6/6/6
// PAR.Customer Purchase Order # = DB1.Customer Purchase Order #
PAR.Customer_Purchase_Order_# = DB1.Customer_Purchase_Order_#;

// WRK.Customer Purchase Order # = DB1.Customer Purchase Order #
WRK.Customer_Purchase_Order_# = DB1.Customer_Purchase_Order_#;

//?** Rtv the Delivery P.O. from OHE file  AND HPB RIN Equiv Value 7/20/11
//?** Rtv the appt fields too  9/16/11 e1714 rmc
EXECUTE FUNCTION(RTV HPB Equiv/dlv po RT) TYPE(RTVOBJ) FILE(PMAMREP)            AC2022650;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(DTL.OHE_HPB_RIN_Equiv_Value);
PARAMETER(DTL.OHE_HPB_RIN_Price);
PARAMETER(DTL.OHE_Spot_Buy);
PARAMETER(LCL.OHE_Override_Type_Code);
PARAMETER(WRK.Delivery_P_O_Number);
PARAMETER(WRK.OHE_Intended_for_ExportCC);
PARAMETER(DTL.OHE_Appt_Confirmation_#);
PARAMETER(DTL.OHE_Appt_Confirmation_Nm);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Type Code = LCL.OHE Override Type Code
DTL.Type_Code = LCL.OHE_Override_Type_Code;

// DTL.USR 15 Text           USR = WRK.Delivery P.O. Number
DTL.USR_15_Text_USR = WRK.Delivery_P_O_Number;

// LCL.USR 15 Text           USR = DTL.USR 15 Text           USR
LCL.USR_15_Text_USR = DTL.USR_15_Text_USR;

EXECUTE FUNCTION(RTV Carr Appt Dt/Tm   RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1677570;
PARAMETER(DB1.Load_ID);
PARAMETER(DB1.Order_Number);
PARAMETER(DTL.LD_Carrier_Appt_Date);
PARAMETER(DTL.LD_Carrier_Appt_Time);
{
 //?USER: Process Data record

 // PAR.Appointment Confirm Date = DB1.LD Carrier Appt Date
 PAR.Appointment_Confirm_Date = DB1.LD_Carrier_Appt_Date;

 // PAR.Appointment Confirm Time = DB1.LD Carrier Appt Time
 PAR.Appointment_Confirm_Time = DB1.LD_Carrier_Appt_Time;

 QUIT;

}


//?E2436 2/13/13 RMC Show OHE Type if company is 360/960/369
CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

// OR DB1.Company Number is HPB Biodiesel
OR DB1.Company_Number = 369;

// OR DB1.Company Number is St Joseph HPB Marketing
OR DB1.Company_Number = 374;

// PAR.USR Display 1 = CND.Yes
PAR.USR_Display_1 = 'Y';

//?E2436 2/13/13 RMC Show OHE Type if company is 360/960/369
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Display 1 = CND.No
PAR.USR_Display_1 = 'N';

ENDIF;

// DTL.OH Load Plan Ready = DB1.OH Load Plan Ready
DTL.OH_Load_Plan_Ready = DB1.OH_Load_Plan_Ready;

// DTL.Condition Desc. 2  USR = Condition name of DTL.OH Load Plan Ready
DTL.Condition_Desc_2_USR = RTVCND(DTL.OH_Load_Plan_Ready);

EXECUTE FUNCTION(RTV Ltr of Crdt - 1st  RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2078908;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(WRK.Letter_of_Credit_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 //?** Pass back the first record found with a Letter of Credit
 CASE;

 // IF DB1.Letter of Credit Number is Not entered
 IF DB1.Letter_of_Credit_Number = *BLANK;

 //?** Pass back the first record found with a Letter of Credit
 // IF *OTHERWISE
 IF *OTHERWISE;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


// DTL.String 30 = WRK.Letter of Credit Number
DTL.String_30 = WRK.Letter_of_Credit_Number;

//?W77844 DN 06/12/21-Convert Old Spot Buy Flag Value to New Val: S, T, P
//?Spot buy
CASE;

// IF DTL.OHE Spot Buy is Spot
IF DTL.OHE_Spot_Buy = 'S';

// DTL.Spot Buy  (Y/N) = CND.Spot
DTL.Spot_Buy_Y_N = 'S';

// DTL.Spot Buy Text USR = Condition name of DTL.Spot Buy  (Y/N)
DTL.Spot_Buy_Text_USR = RTVCND(DTL.Spot_Buy_Y_N);

//?Spot buy
// IF DTL.OHE Spot Buy is Turn
IF DTL.OHE_Spot_Buy = 'T';

// DTL.Spot Buy  (Y/N) = CND.Turn
DTL.Spot_Buy_Y_N = 'T';

// DTL.Spot Buy Text USR = Condition name of DTL.Spot Buy  (Y/N)
DTL.Spot_Buy_Text_USR = RTVCND(DTL.Spot_Buy_Y_N);

//?Spot buy
// IF DTL.OHE Spot Buy is Promo
IF DTL.OHE_Spot_Buy = 'P';

// DTL.Spot Buy  (Y/N) = CND.Promo
DTL.Spot_Buy_Y_N = 'P';

// DTL.Spot Buy Text USR = Condition name of DTL.Spot Buy  (Y/N)
DTL.Spot_Buy_Text_USR = RTVCND(DTL.Spot_Buy_Y_N);

//?Spot buy
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Spot Buy  (Y/N) = CND.Turn
DTL.Spot_Buy_Y_N = 'T';

// DTL.OHE Spot Buy = CND.Turn
DTL.OHE_Spot_Buy = 'T';

// DTL.Spot Buy Text USR = Condition name of DTL.OHE Spot Buy
DTL.Spot_Buy_Text_USR = RTVCND(DTL.OHE_Spot_Buy);

ENDIF;

ENDIF;

//?USER: Validate detail screen fields

//?RMC: F17=Export Docs
CASE;

// IF DTL.*CMD key is CF17
IF DTL.*CMD_key = '17';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

CASE;

// IF DTL.Export Status is yes
IF DTL.Export_Status = 'Y';

EXECUTE FUNCTION(RTV Country Code only  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1531787;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(WRK.Country_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


// WRK.Next Program Name = CND.Export Document Data
WRK.Next_Program_Name = 'POIRXFR';

// DOW WRK.Next Program Name is Export Document Data
DOW WRK.Next_Program_Name = 'POIRXFR';

// Call program Edt Export Document   XF.
CALL PROGRAM(Edt Export Document   XF) ('POIRXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(WRK.Country_Code);
PARAMETER(WRK.Next_Program_Name);
PARAMETER(PAR.Warehouse_Code_PASS_USR);

ENDDO;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Function not allowed.'
ERROR(USR1833);

ENDIF;

ENDIF;

//?F3=Exit without update
CASE;

// IF DTL.*CMD key is *Exit
IF DTL.*CMD_key = '03';

RETURN;

ENDIF;

//?CALC: Detail screen function fields

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Sales Route Code
AND PGM.*Cursor_field = DTL.Sales_Route_Code;

// Call program SEL Active Salesperson SR.
CALL PROGRAM(SEL Active Salesperson SR) ('CABYSRR');
PARAMETER(DTL.Sales_Route_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F4=TYPE CODE
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Type Code
AND PGM.*Cursor_field = DTL.Type_Code;

// Call program SEL Type Codes         SR.
CALL PROGRAM(SEL Type Codes         SR) ('CABVSRR');
PARAMETER(DTL.Type_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Validate detail screen relations

//?Get Salesperson Name - 04/13/18 DN S12917
CASE;

// IF DTL.Sales Route Code is entered
IF DTL.Sales_Route_Code <> *BLANK;

EXECUTE FUNCTION(RTV Salesperson        RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1369411;
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(DTL.Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Warehouse Edit for TIS Indicator
CASE;

// IF DTL.Transfer in Storage Ind is Yes
IF DTL.Transfer_in_Storage_Ind = 'Y';

CASE;

// IF DTL.Transfer in Storage Ind EQ PAR.Transfer in Storage Ind
IF DTL.Transfer_in_Storage_Ind = PAR.Transfer_in_Storage_Ind;

// IF *OTHERWISE
IF *OTHERWISE;

//?-----------------------------------------------------------------
EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
PARAMETER(PAR.Warehouse_Code_PASS_USR);
PARAMETER(LCL.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Warehouse Type is Frozen
IF LCL.Warehouse_Type = 'FZ';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Whs Type for &1 must be Frozen if TIS Indicator is equal to 'Y'.'
ERROR(USR2867);
MSGPARM(PAR.Warehouse_Code_PASS_USR);

ENDIF;

//?-----------------------------------------------------------------
ENDIF;

ENDIF;

//?validate PO# required
CASE;

// IF DTL.Customer Purchase Order # is Blank
IF DTL.Customer_Purchase_Order_# = *BLANK;

EXECUTE FUNCTION(RTV P.O. Required Flag RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1443517;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(PAR.P_O_Required_Flag);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.P.O. Required Flag is yes
IF PAR.P_O_Required_Flag = 'Y';

// Send error message - 'Customer Default File requires P.O. to be entered for this customer.'
ERROR(USR1243);
MSGPARM(DTL.Customer_Purchase_Order_#);

ENDIF;

ENDIF;

// WRK.BLANK 1               USR = CON.*BLANK
WRK.BLANK_1_USR = *BLANK;

//?Check for duplicate P.O # - if not changed as of 6/6/6 RMC
CASE;

// IF DTL.Customer Purchase Order # NE WRK.BLANK 1               USR
IF DTL.Customer_Purchase_Order_# <> WRK.BLANK_1_USR;

// AND DTL.Customer Purchase Order # NE PAR.Customer Purchase Order #
AND DTL.Customer_Purchase_Order_# <> PAR.Customer_Purchase_Order_#;

EXECUTE FUNCTION(RTV Co,Cust,PO         RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1279297;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Customer_Purchase_Order_#);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

//?informational message was getting lost; get error message 1st time, then
//?    allow update
// Send information message - 'PO Number is a duplicate on another open order header.'
MESSAGE(USR2869 *INFO);
MSGPARM(DTL.Customer_Purchase_Order_#);

ENDIF;

ENDIF;

//?Notify Traffic of Delvery PO# chg
CASE;

// IF LCL.USR 15 Text           USR NE DTL.USR 15 Text           USR
IF LCL.USR_15_Text_USR <> DTL.USR_15_Text_USR;

CASE;

// IF LCL.Company Organization is Not HPB
IF LCL.Company_Organization = 'D'/'S';

// Send information message - 'Notify Traffic to "Unlock then Lock Load to send change to Plant"'
MESSAGE(USR4102 *INFO);
MSGPARM(DTL.USR_15_Text_USR);

ENDIF;

ENDIF;

// WRK.Delivery P.O. Number = DTL.USR 15 Text           USR
WRK.Delivery_P_O_Number = DTL.USR_15_Text_USR;

//?Validate Type code for HPB  and foods
CASE;

// IF LCL.Company Organization is High Plains Biodiesel
IF LCL.Company_Organization = 'H';

// OR LCL.Company Organization is Seaboard
OR LCL.Company_Organization = 'S';

//?Validate
CASE;

// IF DTL.Type Code is Entered
IF DTL.Type_Code <> *BLANK;

EXECUTE FUNCTION(Val Type Codes         RT) TYPE(RTVOBJ) FILE(CAAJREP)          AC1708581;
PARAMETER(DTL.Type_Code);
{
 //?USER: Initialize routine

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Type Code &1 Not Found'
ERROR(USR3388);
MSGPARM(DTL.Type_Code);

ENDIF;

//?Validate
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Type Code &1 Not Found'
ERROR(USR3388);
MSGPARM(DTL.Type_Code);

ENDIF;

ENDIF;

//?W77844 DN 06/12/21-Convert Old Spot Buy Flag Value to New Val: S, T, P
//?Spot buy                           W77844 DN 06/12/21-Use New Value.
CASE;

// IF DTL.Spot Buy  (Y/N) is Spot
IF DTL.Spot_Buy_Y_N = 'S';

// DTL.OHE Spot Buy = CND.Spot
DTL.OHE_Spot_Buy = 'S';

// DTL.Spot Buy Text USR = Condition name of DTL.OHE Spot Buy
DTL.Spot_Buy_Text_USR = RTVCND(DTL.OHE_Spot_Buy);

//?Spot buy                           W77844 DN 06/12/21-Use New Value.
// IF DTL.Spot Buy  (Y/N) is Turn
IF DTL.Spot_Buy_Y_N = 'T';

// DTL.OHE Spot Buy = CND.Turn
DTL.OHE_Spot_Buy = 'T';

// DTL.Spot Buy Text USR = Condition name of DTL.OHE Spot Buy
DTL.Spot_Buy_Text_USR = RTVCND(DTL.OHE_Spot_Buy);

//?Spot buy                           W77844 DN 06/12/21-Use New Value.
// IF DTL.Spot Buy  (Y/N) is Promo
IF DTL.Spot_Buy_Y_N = 'P';

// DTL.OHE Spot Buy = CND.Promo
DTL.OHE_Spot_Buy = 'P';

// DTL.Spot Buy Text USR = Condition name of DTL.OHE Spot Buy
DTL.Spot_Buy_Text_USR = RTVCND(DTL.OHE_Spot_Buy);

//?Spot buy                           W77844 DN 06/12/21-Use New Value.
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

// DTL.OHE Spot Buy = CND.*Blank
DTL.OHE_Spot_Buy = *BLANK;

// DTL.Spot Buy Text USR = CON.*BLANK
DTL.Spot_Buy_Text_USR = *BLANK;

// Send error message - 'Spot Buy S/T/P required'
ERROR(USR4747);
MSGPARM(DTL.Spot_Buy_Y_N);

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.OHE Spot Buy = CND.Turn
DTL.OHE_Spot_Buy = 'T';

// DTL.Spot Buy Text USR = Condition name of DTL.OHE Spot Buy
DTL.Spot_Buy_Text_USR = RTVCND(DTL.OHE_Spot_Buy);

// DTL.Spot Buy  (Y/N) = CND.Turn
DTL.Spot_Buy_Y_N = 'T';

ENDIF;

ENDIF;

//?letter of credit                                      E004119
CASE;

// IF DTL.String 30 is Not Blank
IF DTL.String_30 <> *BLANK;

// WRK.Letter of Credit Number = DTL.String 30
WRK.Letter_of_Credit_Number = DTL.String_30;

ENDIF;

// LCL.Pricing Event Called From = CND.Chg/Edt Order
LCL.Pricing_Event_Called_From = 'CEO';

//?USER: Change DBF record

EXECUTE FUNCTION(CHG Locked Order       CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1562271;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Customer_Purchase_Order_#);
PARAMETER(DTL.Special_Instructions);
PARAMETER(DTL.Special_Instructions_2);
PARAMETER(DTL.Absorbed_Freight_Rate_CWT);
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(DTL.Transfer_in_Storage_Ind);
PARAMETER(DTL.OH_Appt_Confirmation_Dt);
PARAMETER(DTL.OH_Appt_Confirmation_Tm);
PARAMETER(DTL.OHE_HPB_RIN_Equiv_Value);
PARAMETER(DTL.OHE_HPB_RIN_Price);
PARAMETER(DTL.OHE_Spot_Buy);
PARAMETER(DTL.Type_Code);
PARAMETER(DTL.USR_15_Text_USR);
PARAMETER(WRK.OHE_Intended_for_ExportCC);
PARAMETER(DTL.OHE_Appt_Confirmation_#);
PARAMETER(DTL.OHE_Appt_Confirmation_Nm);
PARAMETER(WRK.Letter_of_Credit_Number);
PARAMETER(PAR.Customer_Purchase_Order_#);
PARAMETER(DTL.LD_Carrier_Appt_Date);
PARAMETER(DTL.LD_Carrier_Appt_Time);
PARAMETER(LCL.Pricing_Event_Called_From);
PARAMETER(LCL.Sales_Route_Code_2_USR);
{
 //?USER: Processing after Data read

 //?** If PO# chgd, write log record & unaccept load   E00447
 CASE;

 // IF PAR.Customer Purchase Order # NE PAR.Purchase Order # 1 usr
 IF PAR.Customer_Purchase_Order_# <> PAR.Purchase_Order_#_1_usr;

 //?** par.Customer Purchase Order # is the new PO#
 //?** If PO# changed & order is on a load, write log   E00447
 CASE;

 // IF DB1.Load ID is NE Blank
 IF DB1.Load_ID <> *ZERO;

 //?If shipped or buyers truck, crt log for Sales and don't unaccept E00522
 CASE;

 // IF DB1.Event Code is GE than Shipped
 IF DB1.Event_Code >= '04';

 // OR DB1.Carrier Code is Buyer's Truck
 OR DB1.Carrier_Code = 'BUY';

 // LCL.Department Control Code = CND.Sales Dept
 LCL.Department_Control_Code = 'SLS';

 // LCL.Load Change Type = CND.PO Number Changed
 LCL.Load_Change_Type = 'PO#CHG';

 // Call program CRT Load/Order Chg Log XF.
 CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
 PARAMETER(DB1.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Load_Change_Type);
 PARAMETER(LCL.Department_Control_Code);
 PARAMETER(PAR.Purchase_Order_#_1_usr);
 PARAMETER(PAR.Customer_Purchase_Order_#);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);

 //?If shipped or buyers truck, crt log for Sales and don't unaccept E00522
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Department Control Code = CND.Traffic Dept
 LCL.Department_Control_Code = 'TRF';

 // LCL.Load Change Type = CND.PO Number Changed
 LCL.Load_Change_Type = 'PO#CHG';

 // Call program CRT Load/Order Chg Log XF.
 CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
 PARAMETER(DB1.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Load_Change_Type);
 PARAMETER(LCL.Department_Control_Code);
 PARAMETER(PAR.Purchase_Order_#_1_usr);
 PARAMETER(PAR.Customer_Purchase_Order_#);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);

 EXECUTE FUNCTION(RTV Load Acceptance Sw RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1476499;
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.Load_Acceptance_Flag);
 PARAMETER(LCL.MG_Created_Load);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?** Change to Unaccepted if load had already been accepted.  E00447
 CASE;

 // IF LCL.Load Acceptance Flag is Load Accepted
 IF LCL.Load_Acceptance_Flag = 'A';

 // AND LCL.MG Created Load is Not MG Created Load
 AND LCL.MG_Created_Load = *BLANK;

 EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
 PARAMETER(DB1.Company_Number);
 PARAMETER(LCL.Plant_Company_Sts);
 PARAMETER(LCL.Company_Organization);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Company Organization is High Plains Biodiesel
 IF LCL.Company_Organization = 'H';

 //?E01507 RMC dont do for hpb 4/26/11
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?** Unaccept load if PO# chg on any of the orders
 EXECUTE FUNCTION(CHG Load Acceptance Sw CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1475345;
 PARAMETER(DB1.Load_ID);
 PARAMETER('U');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?2/18/13 Upd HPB Coa Batch RIn -- rail car no.
 EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
 PARAMETER(DB1.Company_Number);
 PARAMETER(LCL.Plant_Company_Sts);
 PARAMETER(LCL.Company_Organization);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Company Organization is High Plains Biodiesel
 IF LCL.Company_Organization = 'H';

 EXECUTE FUNCTION(RTV Whse Acct Co      RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1809259;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Accounting_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Acct Co          RT) TYPE(RTVOBJ) FILE(CAADREP)            AC1802492;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  QUIT;

 }

 EXECUTE FUNCTION(Rtv Upd Cust PO#      RT) TYPE(RTVOBJ) FILE(PMDACPP)           AC2003630;
 PARAMETER(LCL.Accounting_Company);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Customer_Purchase_Order_#);
 PARAMETER(DB1.Company_Number);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Cust PO#          CH) TYPE(CHGOBJ) FILE(PMDACPP)           AC2003631;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.COA_ULSD_Company_#);
  PARAMETER(DB1.COA_Batch_Number);
  PARAMETER(DB1.COA_Batch_Header_RIN_Seq);
  PARAMETER(DB1.COA_Batch_Hdr_RIN_Seq_Sec);
  PARAMETER(DB1.COA_Batch_Header_RIN);
  PARAMETER(PAR.COA_RIN_Customer_PO#);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

  //?RMC 4/13/20 chg to work for 374//373 too
  //?Chg 369/374 BUY that matches the 361/373 SEL
  EXECUTE FUNCTION(Rtv Upd Cust PO f/BUY RT) TYPE(RTVOBJ) FILE(PMDACPP)           AC2003634;
  PARAMETER(PAR.Shipping_Company);
  PARAMETER(DB1.COA_ULSD_Company_#);
  PARAMETER(DB1.COA_Batch_Number);
  PARAMETER(DB1.COA_Batch_Header_RIN_Seq);
  PARAMETER(PAR.COA_RIN_Customer_PO#);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.RFS Transaction Type is Buy
   IF DB1.RFS_Transaction_Type = 'BUY';

   EXECUTE FUNCTION(Chg Cust PO#          CH) TYPE(CHGOBJ) FILE(PMDACPP)           AC2003631;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.COA_ULSD_Company_#);
   PARAMETER(DB1.COA_Batch_Number);
   PARAMETER(DB1.COA_Batch_Header_RIN_Seq);
   PARAMETER(DB1.COA_Batch_Hdr_RIN_Seq_Sec);
   PARAMETER(DB1.COA_Batch_Header_RIN);
   PARAMETER(PAR.COA_RIN_Customer_PO#);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
    PARAMETER(DB1.Change_Date);
    PARAMETER(DB1.Change_Time);
    PARAMETER(DB1.Change_User);
    PARAMETER(DB1.Change_Program);
    {
     //?Execute internal function

     // PAR.Change Date = JOB.*Job date
     PAR.Change_Date = JOB.*Job_date;

     // PAR.Change Time = JOB.*Job time
     PAR.Change_Time = JOB.*Job_time;

     // PAR.Change User = JOB.*USER
     PAR.Change_User = JOB.*USER;

     // PAR.Change Program = JOB.*PROGRAM
     PAR.Change_Program = JOB.*PROGRAM;

    }

   }

   ENDIF;

  }

 }

 //?R6965 RMC 8/17/16 new HPB Plant
 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(DB1.Company_Number);
 PARAMETER('HPBPLT');
 PARAMETER(LCL.Company_Number_041405);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?New
 CASE;

 // IF LCL.Company Number     041405 is greater than zero
 IF LCL.Company_Number_041405 > *ZERO;

 EXECUTE FUNCTION(Rtv Upd Cust PO#      RT) TYPE(RTVOBJ) FILE(PMDACPP)           AC2003630;
 PARAMETER(LCL.Company_Number_041405);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Customer_Purchase_Order_#);
 PARAMETER(DB1.Company_Number);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Cust PO#          CH) TYPE(CHGOBJ) FILE(PMDACPP)           AC2003631;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.COA_ULSD_Company_#);
  PARAMETER(DB1.COA_Batch_Number);
  PARAMETER(DB1.COA_Batch_Header_RIN_Seq);
  PARAMETER(DB1.COA_Batch_Hdr_RIN_Seq_Sec);
  PARAMETER(DB1.COA_Batch_Header_RIN);
  PARAMETER(PAR.COA_RIN_Customer_PO#);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

  //?RMC 4/13/20 chg to work for 374//373 too
  //?Chg 369/374 BUY that matches the 361/373 SEL
  EXECUTE FUNCTION(Rtv Upd Cust PO f/BUY RT) TYPE(RTVOBJ) FILE(PMDACPP)           AC2003634;
  PARAMETER(PAR.Shipping_Company);
  PARAMETER(DB1.COA_ULSD_Company_#);
  PARAMETER(DB1.COA_Batch_Number);
  PARAMETER(DB1.COA_Batch_Header_RIN_Seq);
  PARAMETER(PAR.COA_RIN_Customer_PO#);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.RFS Transaction Type is Buy
   IF DB1.RFS_Transaction_Type = 'BUY';

   EXECUTE FUNCTION(Chg Cust PO#          CH) TYPE(CHGOBJ) FILE(PMDACPP)           AC2003631;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.COA_ULSD_Company_#);
   PARAMETER(DB1.COA_Batch_Number);
   PARAMETER(DB1.COA_Batch_Header_RIN_Seq);
   PARAMETER(DB1.COA_Batch_Hdr_RIN_Seq_Sec);
   PARAMETER(DB1.COA_Batch_Header_RIN);
   PARAMETER(PAR.COA_RIN_Customer_PO#);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
    PARAMETER(DB1.Change_Date);
    PARAMETER(DB1.Change_Time);
    PARAMETER(DB1.Change_User);
    PARAMETER(DB1.Change_Program);
    {
     //?Execute internal function

     // PAR.Change Date = JOB.*Job date
     PAR.Change_Date = JOB.*Job_date;

     // PAR.Change Time = JOB.*Job time
     PAR.Change_Time = JOB.*Job_time;

     // PAR.Change User = JOB.*USER
     PAR.Change_User = JOB.*USER;

     // PAR.Change Program = JOB.*PROGRAM
     PAR.Change_Program = JOB.*PROGRAM;

    }

   }

   ENDIF;

  }

 }

 ENDIF;

 ENDIF;

 ENDIF;

 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

 //?USER: Processing after Data update

 //?** If OHE record exists, update, else, add    FP1303
 EXECUTE FUNCTION(RTV OHE for Ord Entry RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC1914702;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(WRK.Delivery_P_O_Number);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?** Recompile for backhaul truck# size change          E002768
 //?** Letter of Credit added for Exports                 E002768
 //?* Chg or Crt Order Header Extension
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 //?08/15/18 DN S13591-Set the Orig AFR from PAR.
 //?07/31/19 DN R15161-Replaced OHE CRTOBJ to Not Call CHGOBJ.
 EXECUTE FUNCTION(CRT Order Header Extsn CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC2173922;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(LCL.OHE_Ship_Status);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.OHE_HPB_RIN_Equiv_Value);
 PARAMETER(PAR.OHE_HPB_RIN_Price);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.OHE_Carrier_SCAC_Code);
 PARAMETER(LCL.OHE_Spot_Buy);
 PARAMETER(LCL.OHE_PO_ACK_Flag);
 PARAMETER(PAR.OHE_Override_Type_Code);
 PARAMETER(LCL.OHE_Backhaul_Status);
 PARAMETER(LCL.OHE_Backhaul_ETA_AM_PM);
 PARAMETER(LCL.OHE_Load_Haul_Type);
 PARAMETER(LCL.OHE_Backhaul_Carrier_Code);
 PARAMETER(LCL.OHE_Bookings_Confirmed);
 PARAMETER(LCL.OHE_EDI_Error_Reasons);
 PARAMETER(LCL.Blank_1_USR);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Delivery_P_O_Number);
 PARAMETER(*BLANK);
 PARAMETER(LCL.OHE_EDI_943_Action);
 PARAMETER(LCL.OHE_EDI_944_Action);
 PARAMETER(LCL.OHE_EDI_940_Action);
 PARAMETER(LCL.OHE_EDI_945_Action);
 PARAMETER(LCL.Blank_1_USR);
 PARAMETER(LCL.Blank_1_USR);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(PAR.OHE_Appt_Confirmation_#);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(PAR.OHE_Appt_Confirmation_Nm);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Absorbed_Freight_Rate_CWT);
 PARAMETER(LCL.Blank_1_USR);
 PARAMETER(LCL.Blank_1_USR);
 PARAMETER(LCL.Blank_1_USR);
 PARAMETER(LCL.Blank_1_USR);
 PARAMETER(LCL.Blank_1_USR);
 PARAMETER(LCL.Blank_1_USR);
 PARAMETER(LCL.Blank_1_USR);
 PARAMETER(LCL.Blank_1_USR);
 PARAMETER(LCL.Blank_1_USR);
 PARAMETER(LCL.Blank_1_USR);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER('A');
 PARAMETER(JOB.*Job_time);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(JOB.*Job_date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp 2 IF) TYPE(EXCINTFUN)                      AC2165057;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing if Data update error

  RETURN;

 }

 //?* Chg or Crt Order Header Extension
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?08/15/18 DN S13591-Do NOT Clear the Orig AFR & Abs O/R Rsn in OHE File.
 EXECUTE FUNCTION(CHG OE Fields 2      CH) TYPE(CHGOBJ) FILE(PMAMREP)            AC2158021;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.OHE_HPB_RIN_Equiv_Value);
 PARAMETER(PAR.OHE_HPB_RIN_Price);
 PARAMETER(PAR.OHE_Spot_Buy);
 PARAMETER(PAR.OHE_Override_Type_Code);
 PARAMETER(PAR.Delivery_P_O_Number);
 PARAMETER(PAR.OHE_Intended_for_ExportCC);
 PARAMETER(PAR.OHE_Appt_Confirmation_#);
 PARAMETER(PAR.OHE_Appt_Confirmation_Nm);
 PARAMETER(PAR.Letter_of_Credit_Number);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

 }

 ENDIF;

 //?04/13/18 DN S12917-Update Order Detail if Sales Route Changes.
 CASE;

 // IF PAR.Sales Route Code NE PAR.Sales Route Code 2 USR
 IF PAR.Sales_Route_Code <> PAR.Sales_Route_Code_2_USR;

 EXECUTE FUNCTION(Upd Sales Route Code  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2149052;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Sales_Route_Code);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(CHG Sales Route Code  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC2149051;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Sales_Route_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 ENDIF;

 //?E1714 12/02/11 RMC pass in ld carr appt date and upd if its been entered
 //?** 05/19/16   RMC E4119  remove live with tpm check
 // LCL.Requested Delivery Time = PAR.LD Carrier Appt Time / CON.100 *
 LCL.Requested_Delivery_Time = PAR.LD_Carrier_Appt_Time / 100;

 EXECUTE FUNCTION(RTV Chg LD APPT/CNFRM RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC2030690;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.OHE_Appt_Confirmation_Nm);
 PARAMETER(PAR.OHE_Appt_Confirmation_#);
 PARAMETER(PAR.OH_Appt_Confirmation_Dt);
 PARAMETER(PAR.OH_Appt_Confirmation_Tm);
 PARAMETER(PAR.LD_Carrier_Appt_Date);
 PARAMETER(LCL.Requested_Delivery_Time);
 {
  //?USER: Process Data record

  // LCL.LD Carrier Appt Date = DB1.LD Carrier Appt Date
  LCL.LD_Carrier_Appt_Date = DB1.LD_Carrier_Appt_Date;

  // LCL.LD Carrier Appt Time = DB1.LD Carrier Appt Time
  LCL.LD_Carrier_Appt_Time = DB1.LD_Carrier_Appt_Time;

  //?Upd Ld Carr Appt if Sls Appt is entered
  CASE;

  // IF PAR.LD Sls Appt Confirm Dt is Entered
  IF PAR.LD_Unused_Date_2 > *ZERO;

  // LCL.LD Carrier Appt Date = PAR.Requested Delivery Date
  LCL.LD_Carrier_Appt_Date = PAR.Requested_Delivery_Date;

  // LCL.LD Carrier Appt Time = PAR.Requested Delivery Time * CON.100 *
  LCL.LD_Carrier_Appt_Time = PAR.Requested_Delivery_Time * 100;

  ENDIF;

  //?Blank out Ld Carr Appt if Sls Appt is now blank AND WAS entered before
  CASE;

  // IF PAR.LD Sls Appt Confirm Dt is Zero
  IF PAR.LD_Unused_Date_2 = *ZERO;

  // AND DB1.LD Sls Appt Confirm Dt is Entered
  AND DB1.LD_Unused_Date_2 > *ZERO;

  // LCL.LD Carrier Appt Date = CON.*ZERO
  LCL.LD_Carrier_Appt_Date = *ZERO;

  // LCL.LD Carrier Appt Time = CON.*ZERO
  LCL.LD_Carrier_Appt_Time = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(Chg LD APPT/CNFRM    CH) TYPE(CHGOBJ) FILE(OMFLCPP)            AC2030693;
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Stop_Drop_Sequence_Number);
  PARAMETER(DB1.Stop_Drop);
  PARAMETER(PAR.Confirmation_Made_With);
  PARAMETER(PAR.Confirmation_Number);
  PARAMETER(LCL.LD_Carrier_Appt_Date);
  PARAMETER(PAR.LD_Unused_Date_2);
  PARAMETER(LCL.LD_Carrier_Appt_Time);
  PARAMETER(PAR.LD_Unused_Time_2);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 //?CRT: TMS Order Header Trigger
 CASE;

 // IF PAR.Pricing Event Called From is TMS Update for Select
 IF PAR.Pricing_Event_Called_From = 'OE'/'SWP'/'CEO'/'UWT';

 CASE;

 // IF DB1.OH Load Plan Ready is Yes
 IF DB1.OH_Load_Plan_Ready = 'Y';

 // Call program Rtv Crt OH Trigger    XF.
 CALL PROGRAM(Rtv Crt OH Trigger    XF) ('PBWVXFR');
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Company_Number);

 ENDIF;

 ENDIF;

}


