// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDWJEFR
// ?Date: 14.08.2025 Time: 03:33:24
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?***** Change Log and Comments
DO;

//?** 07/12/2007 LJB DLY029
//?** Change text on screen from "City or Port" to "City/Port/State"
//?** Allow State to State flat rate.
ENDDO;

//?USER: Initialize subfile header

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(CTL.Carrier_Code);
PARAMETER(CTL.USR_Carrier_Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?USER: Initialize subfile record (existing record)

//?Select by Warehouse
CASE;

// IF CTL.Warehouse Code is Warehouse Code not Blank
IF CTL.Warehouse_Code <> *BLANK;

// AND CTL.Warehouse Code NE DB1.Warehouse Code
AND CTL.Warehouse_Code <> DB1.Warehouse_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select by State Code
CASE;

// IF CTL.State Code is State code not Blanks
IF CTL.State_Code <> *BLANK;

// AND CTL.State Code NE DB1.State Code
AND CTL.State_Code <> DB1.State_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Dest City Scan  - new since Whse is part of the key
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF CTL.Destination City is Entered
IF CTL.Destination_City <> *BLANK;

// Call program CLC Call Qclscan       UP.
CALL PROGRAM(CLC Call Qclscan       UP) ('QCLSCAN');
PARAMETER(RCD.Destination_City);
PARAMETER(20);
PARAMETER(1);
PARAMETER(CTL.Destination_City);
PARAMETER(20);
PARAMETER(1);
PARAMETER(1);
PARAMETER(*BLANK);
PARAMETER(WRK.USR_Qclscan_Result);

CASE;

// IF WRK.USR Qclscan Result ? is Does contain
IF WRK.USR_Qclscan_Result > 0;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Skip inactive warehouses                              E003118
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(Rtv Warehouse/type Val RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1469740;
PARAMETER(RCD.Warehouse_Code);
PARAMETER(LCL.Warehouse_Type);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 // PAR.Warehouse Type = DB1.Warehouse Type
 PAR.Warehouse_Type = DB1.Warehouse_Type;

 QUIT;

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Validate subfile control

//?F4=Prompt
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Warehouse Code
IF PGM.*Cursor_field = CTL.Warehouse_Code;

// Call program SEL Prod Whse-No Sec   SR.
CALL PROGRAM(SEL Prod Whse-No Sec   SR) ('PMCLSRR');
PARAMETER(CTL.Warehouse_Code);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> CTL.State Code
IF PGM.*Cursor_field = CTL.State_Code;

// Call program SEL State              SR.
CALL PROGRAM(SEL State              SR) ('CAAHSRR');
PARAMETER(CTL.State_Code);

ENDIF;

ENDIF;

CASE;

// IF CTL.Destination City NE LCL.USR City
IF CTL.Destination_City <> LCL.USR_City;

// LCL.USR City = CTL.Destination City
LCL.USR_City = CTL.Destination_City;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Validate subfile record fields

// Execute function CVT Str to Upper Alpha US.
EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
PARAMETER(RCD.Destination_City);
PARAMETER(PAR.Destination_City);
{
 PDWEUFR:  PGM PARM(&STRIN &STROUT)

 CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
}


// RCD.Destination City = PAR.Destination City
RCD.Destination_City = PAR.Destination_City;

//?3 =Copy Rate
CASE;

// IF RCD.*SFLSEL is *Copy request
IF RCD.*SFLSEL = '3'/'3';

// Call program Zzz Copy Carr/Whse    PV.
CALL PROGRAM(Zzz Copy Carr/Whse    PV) ('PMBYPVR');
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Destination_City);
PARAMETER(RCD.State_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Validate subfile record relations

EXECUTE FUNCTION(RTV Active Description RT) TYPE(RTVOBJ) FILE(CAACREP)          AC1287387;
PARAMETER(RCD.State_Code);
PARAMETER(WRK.Description);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Validate State Code
CASE;

// IF WRK.Record Status is Deleted & Inactive
IF WRK.Record_Status = 'D'/'I';

// Send error message - 'State Master not found.'
ERROR(USR0005);

ENDIF;

CASE;

// IF RCD.Flat Rate is GT Zero
IF RCD.Flat_Rate > *ZERO;

CASE;

// IF RCD.CDR Unit of Measure is *ALL values
IF RCD.CDR_Unit_of_Measure = 'ML'/'FL'/'ST'/*BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Value Required'
ERROR(USR1852);
MSGPARM(RCD.CDR_Unit_of_Measure);

ENDIF;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(CRT Carrier-Destinatio CR) TYPE(CRTOBJ) FILE(PDLECPP)          AC1453463;
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Destination_City);
PARAMETER(RCD.State_Code);
PARAMETER(RCD.Flat_Rate);
PARAMETER(RCD.CDR_Unit_of_Measure);
PARAMETER(RCD.Bulk_Rate);
PARAMETER(RCD.Export_Fresh_Flat_Amt);
PARAMETER(RCD.Export_Frozen_Flat_Amt);
PARAMETER(RCD.Double_Fuel_Surcharge_Sts);
PARAMETER(RCD.CDR_Unused_Sts_2);
PARAMETER(RCD.CDR_Unused_Date_1);
PARAMETER(RCD.CDR_Unused_Date_2);
PARAMETER(RCD.CDR_Unused_Amount);
PARAMETER(RCD.Job_Time);
PARAMETER(RCD.User_Id);
PARAMETER(RCD.Job_Name);
PARAMETER(RCD.Job_Date);
{
 //?USER: Processing if Data record already exists

 EXECUTE FUNCTION(CHG Carrier-Destinatio CH) TYPE(CHGOBJ) FILE(PDLECPP)          AC1453464;
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Destination_City);
 PARAMETER(DB1.State_Code);
 PARAMETER(PAR.Flat_Rate);
 PARAMETER(PAR.CDR_Unit_of_Measure);
 PARAMETER(PAR.Bulk_Rate);
 PARAMETER(PAR.Export_Fresh_Flat_Amt);
 PARAMETER(PAR.Export_Frozen_Flat_Amt);
 PARAMETER(PAR.Double_Fuel_Surcharge_Sts);
 PARAMETER(PAR.CDR_Unused_Sts_2);
 PARAMETER(PAR.CDR_Unused_Date_1);
 PARAMETER(PAR.CDR_Unused_Date_2);
 PARAMETER(PAR.CDR_Unused_Amount);
 PARAMETER(JOB.*Job_time);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*JOB);
 PARAMETER(JOB.*Job_date);
}


//?USER: Delete DBF record

EXECUTE FUNCTION(DEL Carrier-Destinatio DL) TYPE(DLTOBJ) FILE(PDLECPP)          AC1453465;
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Destination_City);
PARAMETER(RCD.State_Code);

//?USER: Change DBF record

EXECUTE FUNCTION(CHG Carrier-Destinatio CH) TYPE(CHGOBJ) FILE(PDLECPP)          AC1453464;
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Destination_City);
PARAMETER(RCD.State_Code);
PARAMETER(RCD.Flat_Rate);
PARAMETER(RCD.CDR_Unit_of_Measure);
PARAMETER(RCD.Bulk_Rate);
PARAMETER(RCD.Export_Fresh_Flat_Amt);
PARAMETER(RCD.Export_Frozen_Flat_Amt);
PARAMETER(RCD.Double_Fuel_Surcharge_Sts);
PARAMETER(RCD.CDR_Unused_Sts_2);
PARAMETER(RCD.CDR_Unused_Date_1);
PARAMETER(RCD.CDR_Unused_Date_2);
PARAMETER(RCD.CDR_Unused_Amount);
PARAMETER(RCD.Job_Time);
PARAMETER(RCD.User_Id);
PARAMETER(RCD.Job_Name);
PARAMETER(RCD.Job_Date);

//?USER: Extra processing after DBF update

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?USER: Process command keys

//?F5=Refresh
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F7=Mass Rate Update
CASE;

// IF CTL.*CMD key is CF07
IF CTL.*CMD_key = '07';

// Call program Zzz UPD Mass CarrDest  PV.
CALL PROGRAM(Zzz UPD Mass CarrDest  PV) ('PBMVPVR');
PARAMETER(CTL.Carrier_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F10=Copy Rate
CASE;

// IF CTL.*CMD key is *Copy
IF CTL.*CMD_key = '10';

// Call program Zzz Copy Carr/Whse    PV.
CALL PROGRAM(Zzz Copy Carr/Whse    PV) ('PMBYPVR');
PARAMETER(CTL.Carrier_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(*BLANK);
PARAMETER(*BLANK);

// CTL.Warehouse Code = CON.*BLANK
CTL.Warehouse_Code = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F21=Process print listing request
CASE;

// IF CTL.*CMD key is *Print List
IF CTL.*CMD_key = '21';

// Call program Zzz&Pass Carr/City/St  UP.
CALL PROGRAM(Zzz&Pass Carr/City/St  UP) ('PDWSUPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('OMS');
PARAMETER('PDWTPCLP');
PARAMETER(CTL.Carrier_Code);
PARAMETER(CTL.Destination_City);
PARAMETER(CTL.State_Code);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER('Destination Rate Listing');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(CTL.Warehouse_Code);

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

ENDIF;

//?USER: Exit program processing

RETURN;

