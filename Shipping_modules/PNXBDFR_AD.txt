// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNXBDFR
// ?Date: 14.08.2025 Time: 03:46:55
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PGM.*Scan limit = CND.20000
PGM.*Scan_limit = 20000;

// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

// PAR.USR Flag 1 = CND.No
PAR.USR_Flag_1 = 'N';

//?USER: Initialize subfile control

//?** First time process
CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

// CTL.Include/Exclude Option = CND.Include
CTL.Include_Exclude_Option = 'INC';

// CTL.Include/Exclude Option 2 = CND.Exclude
CTL.Include_Exclude_Option_2 = 'EXC';

// CTL.Type Code = CND.Export Seaboard Bookings
CTL.Type_Code = 'ES';

// CTL.Description 2 usr = CON.Export Seaboard Bookings
CTL.Description_2_usr = 'Export Seaboard Bookings';

// CTL.Load ID = CON.4000000
CTL.Load_ID = 4000000;

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

ENDIF;

//?USER: Initialize subfile record from DBF record

//?* Skip if Type Code is entered and no match
CASE;

// IF CTL.Type Code is Entered
IF CTL.Type_Code <> *BLANK;

CASE;

// IF DB1.OHE Override Type Code NE CTL.Type Code
IF DB1.OHE_Override_Type_Code <> CTL.Type_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

// Call program RTV ExpOrd Info for LD XF.
CALL PROGRAM(RTV ExpOrd Info for LD XF) ('PMJMXFR');
PARAMETER(LCL.Order_Number);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(LCL.Ship_To_Name);
PARAMETER(LCL.Ship_To_Address_Line_1);
PARAMETER(LCL.Ship_To_Address_Line_2);
PARAMETER(LCL.Ship_To_Address_Line_3);
PARAMETER(LCL.Ship_To_City);
PARAMETER(LCL.Ship_To_State_Code);
PARAMETER(LCL.Ship_To_Zip_Postal_Code);
PARAMETER(LCL.Carrier_Code);
PARAMETER(DB1.Load_ID);
PARAMETER(LCL.Export_Status);
PARAMETER(LCL.Export_Docs_Go_w_Driver);
PARAMETER(LCL.Air_Freight_Order);
PARAMETER(LCL.Export_USDA_Approved);
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Stop_Drop_Sequence_Number);
PARAMETER(LCL.Shipping_Line);
PARAMETER(LCL.Port_Delv_Terminal);
PARAMETER(LCL.OHE_City);
PARAMETER(LCL.OHE_Vessel_Airline);
PARAMETER(LCL.OHE_Voyage_Flight);
PARAMETER(LCL.OHE_Booking_Number);
PARAMETER(LCL.OHE_Discharge_Port_Airprt);
PARAMETER(LCL.OHE_Sail_Flight_Date);
PARAMETER(LCL.OHE_Port_Cut_Date);
PARAMETER(LCL.OHE_Arrival_Date);
PARAMETER(LCL.OHE_Late_Delivery_Code);
PARAMETER(LCL.OHE_Ship_Status);
PARAMETER(LCL.OHE_Container_Number);
PARAMETER(LCL.OHE_Comment_1);
PARAMETER(LCL.OHE_Comment_2);
PARAMETER(LCL.Port_City);
PARAMETER(LCL.Port_Address_Line_1);
PARAMETER(LCL.Port_Address_Line_2);
PARAMETER(LCL.Sail_Port_State);
PARAMETER(LCL.Port_Zip_Postal_Code);
PARAMETER(LCL.Port_Phone_Number);
PARAMETER(LCL.Port_Fax_Number);

//?Process INC/EXC option - Show/don't show booked loads
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?Include = Select booked and unbooked loads
CASE;

// IF CTL.Include/Exclude Option is Include
IF CTL.Include_Exclude_Option = 'INC';

ENDIF;

//?EXCLUDE = skip booked loads
CASE;

// IF CTL.Include/Exclude Option is Exclude
IF CTL.Include_Exclude_Option = 'EXC';

CASE;

// IF DB1.OHE Booking Number is Entered
IF DB1.OHE_Booking_Number <> *BLANK;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Load All Fields    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1491510;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(NLL.LTL_Flag);
PARAMETER(RCD.Load_Status);
PARAMETER(NLL.Reefer_Temperature);
PARAMETER(NLL.Seal_1);
PARAMETER(NLL.Seal_2);
PARAMETER(NLL.Seal_3);
PARAMETER(NLL.Seal_4);
PARAMETER(NLL.Seal_2_Unused);
PARAMETER(NLL.Total_Load_Order_Weight);
PARAMETER(NLL.Flat_Amount);
PARAMETER(NLL.Allocate_Pounds_Miles);
PARAMETER(NLL.Total_Stops);
PARAMETER(NLL.Trailer_Id);
PARAMETER(NLL.Transloader_Carrier_Code);
PARAMETER(NLL.BOL_Time);
PARAMETER(RCD.Carrier_Code_Usr);
PARAMETER(NLL.Truck_Size);
PARAMETER(NLL.Ld_Hdr_Ld_Dtl_Unused);
PARAMETER(NLL.Rated_Freight);
PARAMETER(NLL.Ship_Status);
PARAMETER(NLL.Load_Type);
PARAMETER(NLL.Number_Pallets_Received);
PARAMETER(NLL.Number_Pallets_Loaded);
PARAMETER(NLL.Load_Carrier_Pay_Amt);
PARAMETER(NLL.Estimated_Arrival_Time);
PARAMETER(NLL.Actual_Arrival_Date);
PARAMETER(NLL.Actual_Arrival_Time);
PARAMETER(NLL.Trailer_IN_Weight);
PARAMETER(NLL.Trailer_OUT_Weight);
PARAMETER(NLL.Actual_Departure_Date);
PARAMETER(NLL.Departure_Time);
PARAMETER(NLL.Schedule_Sequence_Number);
PARAMETER(NLL.Product_Temperature);
PARAMETER(NLL.Number_Spacers_Loaded);
PARAMETER(NLL.Car_Veh_Initials);
PARAMETER(NLL.Total_Load_Miles);
PARAMETER(NLL.Recorder_ID);
PARAMETER(NLL.Shipping_Method);
PARAMETER(NLL.Ship_From_Warehouse);
PARAMETER(NLL.Ship_To_State_Code);
PARAMETER(NLL.Gross_Weight);
PARAMETER(NLL.Carrier_Broker);
PARAMETER(NLL.Export_Status);
PARAMETER(NLL.Actual_Ship_Date);
PARAMETER(NLL.On_Time_Y_N);
PARAMETER(NLL.Truck_Ready_Date);
PARAMETER(NLL.Truck_Ready_Time);
PARAMETER(NLL.Spotted_Date);
PARAMETER(NLL.Spotted_Time);
PARAMETER(NLL.Load_Finished_Date);
PARAMETER(NLL.Load_Finished_Time);
PARAMETER(NLL.BOL_Complete_Date);
PARAMETER(NLL.BOL_Complete_Time);
PARAMETER(NLL.BOL_Received_Date);
PARAMETER(NLL.BOL_Received_Time);
PARAMETER(NLL.Truck_Departure_Date);
PARAMETER(NLL.Truck_Departure_Time);
PARAMETER(NLL.Adjusted_Departure_Date);
PARAMETER(NLL.Adjusted_Departure_Time);
PARAMETER(NLL.Shipping_Line);
PARAMETER(NLL.Port_Delv_Terminal);
PARAMETER(NLL.Vessel_Name);
PARAMETER(NLL.Voyage);
PARAMETER(NLL.Sail_Date);
PARAMETER(NLL.Booking_Number);
PARAMETER(NLL.Discharge_Port);
PARAMETER(NLL.Arrival_Date);
PARAMETER(NLL.Container_Number);
PARAMETER(NLL.Date_In);
PARAMETER(NLL.Time_In);
PARAMETER(NLL.Date_Out);
PARAMETER(NLL.Time_Out);
PARAMETER(NLL.Load_Total_Freight);
PARAMETER(NLL.Scheduled_Delivery_Date);
PARAMETER(NLL.Scheduled_Delivery_Time);
PARAMETER(NLL.LH_Unused_Sts);
PARAMETER(NLL.LH_Carrier_Payment_Sts);
PARAMETER(NLL.Bring_Back_Miles);
PARAMETER(NLL.Requested_Delivery_Date);
PARAMETER(NLL.Load_Acceptance_Flag);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(NLL.On_Yard_Date);
PARAMETER(NLL.On_Yard_Time);
PARAMETER(NLL.Deadline_Departure_Date);
PARAMETER(NLL.Deadline_Departure_Time);
PARAMETER(NLL.Load_Held_Over);
PARAMETER(NLL.Load_Held_Over_Reason);
PARAMETER(NLL.Load_Held_Over_Rsn_Cmt);
PARAMETER(NLL.Ocean_BOL_Number);
PARAMETER(NLL.Express_Mail_Number);
PARAMETER(NLL.Express_Mail_Date);
PARAMETER(NLL.Load_Shag_Flag);
PARAMETER(NLL.Load_Wash_Flag);
PARAMETER(NLL.Product_Complete_Date);
PARAMETER(NLL.Product_Complete_Time);
PARAMETER(NLL.Pallets_Loaded);
PARAMETER(NLL.Avg_Pallet_Tare);
PARAMETER(NLL.Tot_Pallet_Tare);
PARAMETER(NLL.Load_Confirmed_Sts);
PARAMETER(NLL.Load_Confirmed_Contact);
PARAMETER(NLL.Load_Confirmation_Time);
PARAMETER(NLL.Load_Door_1);
PARAMETER(NLL.Override_Total_Load_Miles);
PARAMETER(NLL.Load_Door_2);
PARAMETER(NLL.Partial_Load);
PARAMETER(NLL.Load_Confirmation_Fax_Sts);
PARAMETER(NLL.Export_Load_USDA_OK);
PARAMETER(NLL.Late_Delivery_Email_Flag);
PARAMETER(NLL.Load_Actual_Freight);
PARAMETER(NLL.Hide_on_WW_Load_Sts);
PARAMETER(NLL.Late_Billing_Email_Flag);
PARAMETER(NLL.Shipping_Temp_C_F_txt);
PARAMETER(NLL.LH_Held_Over_Rsn_Cmt);
PARAMETER(NLL.Multi_Company_Load);
PARAMETER(NLL.Fax_Sent_to_SSI_Carrier);
PARAMETER(NLL.Schedule_Pos_Load_Grade);
PARAMETER(NLL.LH_Power_Only_Load);
PARAMETER(NLL.MG_Created_Load);
PARAMETER(NLL.LH_Unused_Sts_5);
PARAMETER(NLL.Load_U_M);
PARAMETER(NLL.TPM_Shipment_Status);
PARAMETER(NLL.LH_Unused_Sts_8);
PARAMETER(NLL.LH_On_Time_Reason_Code);
PARAMETER(NLL.LH_Held_Over_Reason);
PARAMETER(NLL.LH_Carrier_Paid_Dte);
PARAMETER(NLL.LH_Carrier_Paid_Time);
PARAMETER(NLL.LH_Last_Combo_Prod_Date);
PARAMETER(NLL.LH_Last_Combo_Prod_Time);
PARAMETER(NLL.LPT_Load_Plan_Start_Dt);
PARAMETER(NLL.LPT_Load_Plan_Start_Tm);
PARAMETER(NLL.TPM_Planned_Ship_Date);
PARAMETER(NLL.LH_Unused_Time_4);
PARAMETER(NLL.LH_Unused_Date_5);
PARAMETER(NLL.LH_Unused_Time_5);
PARAMETER(NLL.LH_Unused_Date_6);
PARAMETER(NLL.LH_Unused_Time_6);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?DO4595 DN 11/23/22-Commented Out & Moved Below.
//?DO4595 DN 11/23/22-Do Select If Load Header Not Exist/Cancel.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?* Skip if Scheduled Ship Date is requested but no match
CASE;

// IF CTL.Scheduled Ship Date is entered
IF CTL.Scheduled_Ship_Date <> *ZERO;

CASE;

// IF RCD.Scheduled Ship Date NE CTL.Scheduled Ship Date
IF RCD.Scheduled_Ship_Date <> CTL.Scheduled_Ship_Date;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?DO4595 DN 11/23/22-Do Select If Load Header Not Exist/Cancel.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(RTV 1st Whse Not CancelRT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2130424;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(1);
PARAMETER(1);
PARAMETER(RCD.Warehouse_Code);
{
 //?USER: Initialize routine

 // PAR.Warehouse Code = CON.*BLANK
 PAR.Warehouse_Code = *BLANK;

 //?USER: Process Data record

 // PAR.Warehouse Code = DB1.Warehouse Code
 PAR.Warehouse_Code = DB1.Warehouse_Code;

 QUIT;

}


EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?* Skip if Warehouse Type is requested but no match
CASE;

// IF CTL.Warehouse Type is Fresh or Frozen
IF CTL.Warehouse_Type = 'FR'/'FZ';

CASE;

// IF RCD.Warehouse Type NE CTL.Warehouse Type
IF RCD.Warehouse_Type <> CTL.Warehouse_Type;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?* Skip if Load Status is requested but no match
CASE;

// IF CTL.Load Status is All but Blank
IF CTL.Load_Status = 'C'/'E'/'I'/'L'/'S'/'U';

CASE;

// IF RCD.Load Status NE CTL.Load Status
IF RCD.Load_Status <> CTL.Load_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?DO4595 DN 11/28/22-Set EDI 601/824 Status Desc.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Display Flag 1 USR = CND.no
LCL.Display_Flag_1_USR = 'N';

// LCL.Display Flag = CND.No
LCL.Display_Flag = 'N';

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(RTV Export Status      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1449325;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.Export_Status);
{
 //?USER: Initialize routine

 // PAR.Export Status = CND.blank
 PAR.Export_Status = *BLANK;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Export Status is yes
IF LCL.Export_Status = 'Y';

CASE;

// IF RCD.OHE EDI 601 Action is Not Entered
IF RCD.OHE_EDI_601_Action = *BLANK;

// AND RCD.OHE EDI 824 Action is Blanks
AND RCD.OHE_EDI_824_Action = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.EDI 601 Action Dsc USR = Condition name of RCD.OHE EDI 601 Action
RCD.EDI_601_Action_Dsc_USR = RTVCND(RCD.OHE_EDI_601_Action);

// RCD.EDI 824 Action Dsc USR = Condition name of RCD.OHE EDI 824 Action
RCD.EDI_824_Action_Dsc_USR = RTVCND(RCD.OHE_EDI_824_Action);

// LCL.Display Flag 1 USR = CND.yes
LCL.Display_Flag_1_USR = 'Y';

//?Display AES ITN #.
CASE;

// IF RCD.OHE EDI 824 Action is Received
IF RCD.OHE_EDI_824_Action = 'R';

// LCL.Display Flag = CND.Yes
LCL.Display_Flag = 'Y';

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.EDI 601 Action Dsc USR = CND.Blank
RCD.EDI_601_Action_Dsc_USR = *BLANK;

// RCD.EDI 824 Action Dsc USR = CND.Blank
RCD.EDI_824_Action_Dsc_USR = *BLANK;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?CALC: Subfile control function fields

CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?Command Key Operatons
CASE;

// IF CTL.*CMD key is CF06
IF CTL.*CMD_key = '06';

// Call program PMT Backhaul Download  PV.
CALL PROGRAM(PMT Backhaul Download  PV) ('PNXCPVR');
PARAMETER(2);
PARAMETER(LCL.Return_Code_Usr);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Command Key Operatons
// IF CTL.*CMD key is CF07
IF CTL.*CMD_key = '07';

//?F7=Include/Exclude booked loads
CASE;

// IF CTL.Include/Exclude Option is Include
IF CTL.Include_Exclude_Option = 'INC';

// CTL.Include/Exclude Option = CND.Exclude
CTL.Include_Exclude_Option = 'EXC';

//?F7=Include/Exclude booked loads
// IF CTL.Include/Exclude Option is Exclude
IF CTL.Include_Exclude_Option = 'EXC';

// CTL.Include/Exclude Option = CND.Include
CTL.Include_Exclude_Option = 'INC';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Command Key Operatons
// IF CTL.*CMD key is CF13
IF CTL.*CMD_key = '13';

// Call program WW Backhaul Loads      DF.
CALL PROGRAM(WW Backhaul Loads      DF) ('PNVVDFR');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Command Key Operatons
//?Command Key Operatons
//?S16050 DN 01/17/20-Commented F8 & Replaced with Opt 8 Instead.
// IF DTL.*CMD key is CF15
IF DTL.*CMD_key = '15';

// Call program PMT Backhaul Download  PV.
CALL PROGRAM(PMT Backhaul Download  PV) ('PNXCPVR');
PARAMETER(2);
PARAMETER(LCL.Return_Code_Usr);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?whs type chg
CASE;

// IF LCL.Warehouse Type NE CTL.Warehouse Type
IF LCL.Warehouse_Type <> CTL.Warehouse_Type;

// LCL.Warehouse Type = CTL.Warehouse Type
LCL.Warehouse_Type = CTL.Warehouse_Type;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?sch ship date chg
CASE;

// IF LCL.Scheduled Ship Date NE CTL.Scheduled Ship Date
IF LCL.Scheduled_Ship_Date <> CTL.Scheduled_Ship_Date;

// LCL.Scheduled Ship Date = CTL.Scheduled Ship Date
LCL.Scheduled_Ship_Date = CTL.Scheduled_Ship_Date;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?load sts change
CASE;

// IF LCL.Load Status NE CTL.Load Status
IF LCL.Load_Status <> CTL.Load_Status;

// LCL.Load Status = CTL.Load Status
LCL.Load_Status = CTL.Load_Status;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// PAR.USR Update Flag = CND.No
PAR.USR_Update_Flag = *BLANK;

//? Subfile Selections
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

//?5 = Display Orders
// Call program WW Orders on Load      DF.
CALL PROGRAM(WW Orders on Load      DF) ('PDODDFR');
PARAMETER(RCD.Load_ID);
PARAMETER(LCL.USR_Weight_Accumulated);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

SET CURSOR;

//? Subfile Selections
// IF RCD.*SFLSEL is Option 11
IF RCD.*SFLSEL = '11';

// Call program EDT PD Traffic Comment EF.
CALL PROGRAM(EDT PD Traffic Comment EF) ('PDCZEFR');
PARAMETER(RCD.Load_ID);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

SET CURSOR;

//? Subfile Selections
// IF RCD.*SFLSEL is Option 14
IF RCD.*SFLSEL = '14';

//?14 = Edit Export Instructions
//?** Multiple orders on a Load. Process them one at a time:
//?** First select the order to be processed. Then pass the
//?** order number to the Edit Export Instructions program
// WRK.Exit Selection USR = CND.No
WRK.Exit_Selection_USR = 'N';

//?** Loop until the Select receives an <F3> to exit
// DOW WRK.Exit Selection USR is No
DOW WRK.Exit_Selection_USR = 'N';

// OR WRK.USR Exit Program is yes
OR WRK.USR_Exit_Program = 'Y';

//?11/23/22 DN DO4595-Replaced PMFXSRR with PUXRSRR.
// Call program SEL Order/Load/Exp Sts2SR.
CALL PROGRAM(SEL Order/Load/Exp Sts2SR) ('PUXRSRR');
PARAMETER(WRK.Exit_Selection_USR);
PARAMETER(WRK.USR_Order_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.USR_Company_Number);
PARAMETER(LCL.Orders_have_Same_Booking#);

//?** Process record if not <F3> to exit
CASE;

// IF WRK.Exit Selection USR is No
IF WRK.Exit_Selection_USR = 'N';

//?** Use program with the newly added OHE fields    P000373
//?11/23/22 DN DO4595-Passed in Parm 'Orders have Same Booking#'.
// Call program EDT Export Order Instr E2.
CALL PROGRAM(EDT Export Order Instr E2) ('PNVZE2R');
PARAMETER(WRK.USR_Company_Number);
PARAMETER(WRK.USR_Order_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.USR_Exit_Program);
PARAMETER(LCL.Orders_have_Same_Booking#);

ENDIF;

ENDDO;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

SET CURSOR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
PARAMETER(RCD.Company_Number);
PARAMETER('LDORDD');
PARAMETER(LCL.PFS_AccuSort_Active);
PARAMETER(LCL.PFS_Carlisle_Active);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF RCD.Load Status is Locked or Shipped
IF RCD.Load_Status = 'L'/'S';

EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
PARAMETER(RCD.Company_Number);
PARAMETER('LDORDD');
PARAMETER(LCL.PFS_AccuSort_Active);
PARAMETER(LCL.PFS_Carlisle_Active);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.PFS Carlisle Active is Yes
IF LCL.PFS_Carlisle_Active = 'Y';

// Call program PFS Lock Load/Order   XF.
CALL PROGRAM(PFS Lock Load/Order   XF) ('PPNLXFR');
PARAMETER(RCD.Load_ID);

ENDIF;

ENDIF;

//? Subfile Selections
// IF RCD.*SFLSEL is Option 18
IF RCD.*SFLSEL = '18';

CASE;

// IF RCD.Carrier Code Usr is not entered
IF RCD.Carrier_Code_Usr = *BLANK;

// Send error message - 'Carrier must exist on load to fax Load Confirmation.'
ERROR(USR2444);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Carrier_Code_Usr);

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Company Number Pass   USR = RCD.Company Number
PAR.Company_Number_Pass_USR = RCD.Company_Number;

// PAR.Order Number 1  PASS  USR = RCD.Load ID
PAR.Order_Number_1_PASS_USR = RCD.Load_ID;

// PAR.Load ID = RCD.Load ID
PAR.Load_ID = RCD.Load_ID;

// LCL.Carrier Code Usr = RCD.Carrier Code Usr
LCL.Carrier_Code_Usr = RCD.Carrier_Code_Usr;

// WRK.Load ID = RCD.Load ID
WRK.Load_ID = RCD.Load_ID;

//?** Check SSI download flag. If Yes, send info to PowerPro   FP1166
EXECUTE FUNCTION(RTV SSI Carrier flag   RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1904336;
PARAMETER(RCD.Carrier_Code_Usr);
PARAMETER(WRK.SSI_Download_Flag);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV SSI Fax'd Flag     RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1906598;
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.Fax_Sent_to_SSI_Carrier);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** See if carrier has already received a fax, if yes, send Change FP1166
CASE;

// IF WRK.SSI Download Flag is Yes, Download to SSI
IF WRK.SSI_Download_Flag = 'Y';

CASE;

// IF WRK.Fax Sent to SSI Carrier is Not Fax'd to Carrier
IF WRK.Fax_Sent_to_SSI_Carrier = *BLANK/'N';

// WRK.SSI Add, Chg, Delete flag = CND.Add
WRK.SSI_Add_Chg_Delete_flag = 00;

// IF *OTHERWISE
IF *OTHERWISE;

//?** Send "Changed" record to SSI PowerPro
// WRK.SSI Add, Chg, Delete flag = CND.Change
WRK.SSI_Add_Chg_Delete_flag = 04;

ENDIF;

// Call program BLD SSI Download       XF.
CALL PROGRAM(BLD SSI Download       XF) ('PNPNXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Carrier_Code_Usr);
PARAMETER(WRK.SSI_Add_Chg_Delete_flag);

EXECUTE FUNCTION(CHG Fax'd to SSI flag  CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1906429;
PARAMETER(RCD.Load_ID);
PARAMETER('Y');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Set printer options
CASE;

// IF PAR.USR Flag 1 is Blank
IF PAR.USR_Flag_1 = *BLANK;

// OR PAR.USR Flag 1 is No
OR PAR.USR_Flag_1 = 'N';

//?** PDVVUPC which calls PDVVPCLP which calls
//?** PDAMXFR which calls PODYUPR to send any faxes and then calls
//?** PLAMUPC to send any emails
//?** Set Fax Carrier=Yes, Fax dispatch=No, Fax/Print=Fax
//?** Default reporting parms, so no popup window for print options
// WRK.Status - Y or N = CND.yes
WRK.Status_Y_or_N = 'Y';

// WRK.Status Flag 1  Y/N = CND.No
WRK.Status_Flag_1_Y_N = 'N';

// WRK.USR Status (Y/N) = CND.Fax
WRK.USR_Status_Y_N = 'F';

// WRK.Status Description 3  USR = CON.PNW2PFR$
WRK.Status_Description_3_USR = 'PNW2PFR$';

// PAR.PRT Description = CON.FAXLDCNFRM
PAR.PRT_Description = 'FAXLDCNFRM';

// PAR.PRT Printer Device = PAR.Default Printer
PAR.PRT_Printer_Device = PAR.Default_Printer;

// PAR.PRT Hold Output Sts = CND.*YES
PAR.PRT_Hold_Output_Sts = *YES;

// PAR.PRT Save Output Sts = CND.*NO
PAR.PRT_Save_Output_Sts = *NO;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Night Queue = CON.*BLANK
PAR.PRT_Night_Queue = *BLANK;

// PAR.PRT Number of Copies = CND.One
PAR.PRT_Number_of_Copies = 1;

// Call program PMT Print Option  SHR  PV.
CALL PROGRAM(PMT Print Option  SHR  PV) ('PDG0PVR');
PARAMETER(PAR.PRT_Description);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('OMS');

// PAR.System Value Numeric = PAR.PRT Number of Copies
PAR.System_Value_Numeric = PAR.PRT_Number_of_Copies;

// PAR.USR Flag 1 = CND.Yes
PAR.USR_Flag_1 = 'Y';

ENDIF;

//?* Only fax if F3 to cancel has not been pressed   C001921
CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// Send information message - 'Fax/Email Load Confirmation has been cancelled'
MESSAGE(USR4484 *INFO);

//?* Only fax if F3 to cancel has not been pressed   C001921
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(EXC Load Confirm Fax   IF) TYPE(EXCINTFUN)                     AC1595755;
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Order_Number_1_PASS_USR);
PARAMETER(*BLANK);
PARAMETER(RCD.Carrier_Code_Usr);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(WRK.Status_Flag_1_Y_N);
PARAMETER('N');
PARAMETER('N');
PARAMETER('N');
PARAMETER('N');
PARAMETER(WRK.Status_Y_or_N);
PARAMETER(WRK.Status_Description_3_USR);
PARAMETER(WRK.USR_Status_Y_N);
PARAMETER(PAR.PRT_Description);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(*BLANK);
{
 //?Execute internal function

 //?** See comments for explanation of parms.
 // Call program PRC Submit Fax Load Cn UP.
 CALL PROGRAM(PRC Submit Fax Load Cn UP) ('PDVVUPC');
 PARAMETER(WRK.Return_Code_Usr);
 PARAMETER(PAR.Company_Number_Pass_USR);
 PARAMETER(PAR.Order_Number_1_PASS_USR);
 PARAMETER(PAR.Transloader_Carrier_Code);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Shipping_Line);
 PARAMETER(PAR.OHE_Carrier_SCAC_Code);
 PARAMETER(PAR.Status_Flag_1_Y_N);
 PARAMETER(PAR.Status_Flag_2_Y_N);
 PARAMETER(PAR.Status_Flag_3_Y_N);
 PARAMETER(PAR.Status_Flag_4_Y_N);
 PARAMETER(PAR.Status_Flag_5_Y_N);
 PARAMETER(PAR.Status_Y_or_N);
 PARAMETER(PAR.Status_Description_3_USR);
 PARAMETER(PAR.USR_Status_Y_N);
 PARAMETER(PAR.PRT_Printer_Device);
 PARAMETER(PAR.PRT_Hold_Output_Sts);
 PARAMETER(PAR.PRT_Save_Output_Sts);
 PARAMETER(PAR.System_Value_Numeric);
 PARAMETER(PAR.Email_Address);

 //?***** Change Log and Comments
 DO;

 //?*****
 //?** 04/24/2011 LJB P000737
 //?** Pgm PODPUPR replaced with PDVVUPC. Parms changed to either
 //?** Print Only or Fax/Email to all carriers that are passed in.
 //?** *** Parms are:
 //?** Status-Y or N = Fax Carrier, Status Flag 1 Y/N=Fax Dispatcher,
 //?** Status Flag 2 Y/N=Fax Transloader, Status Flag 3 Y/N=Fax Mexican,
 //?** Status Flag 4 Y/N=Fax Exp Coordn, Status Flag 5 Y/N=Fax Ocean Shpr,
 //?** Usr Status (Y/N)=Print Only/Fax, Status Description 3=Printer file
 //?*****
 ENDDO;

}


// Send information message - 'Selected Load(s) have been faxed/emailed to carrier.'
MESSAGE(USR2445 *INFO);

ENDIF;

ENDIF;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

SET CURSOR;

ENDIF;

//? Subfile Selections
// IF RCD.*SFLSEL is Option 19
IF RCD.*SFLSEL = '19';

// Call program DSP Load Plan          DF.
CALL PROGRAM(DSP Load Plan          DF) ('PDSLDFR');
PARAMETER(RCD.Load_ID);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

SET CURSOR;

//? Subfile Selections
// IF RCD.*SFLSEL is Option 20
IF RCD.*SFLSEL = '20';

// Call program DSP Chg Log Entries-Ld DF.
CALL PROGRAM(DSP Chg Log Entries-Ld DF) ('PDCRDFR');
PARAMETER(RCD.Load_ID);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

SET CURSOR;

//? Subfile Selections
// IF RCD.*SFLSEL is *8
IF RCD.*SFLSEL = '8';

//?F8=Copy Booking Info to 1 or more orders
//?S16050 DN 01/17/20-Change from F8 to Opt 8=Copy Booking Info.
// Call program PMT Assign Bkg Info    PV.
CALL PROGRAM(PMT Assign Bkg Info    PV) ('PBLQPVR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Stop_Drop_Sequence_Number);
PARAMETER(RCD.Shipping_Line);
PARAMETER(RCD.Port_Delv_Terminal);
PARAMETER(RCD.OHE_City);
PARAMETER(RCD.OHE_Vessel_Airline);
PARAMETER(RCD.OHE_Voyage_Flight);
PARAMETER(RCD.OHE_Booking_Number);
PARAMETER(RCD.OHE_Discharge_Port_Airprt);
PARAMETER(RCD.OHE_Sail_Flight_Date);
PARAMETER(RCD.OHE_Arrival_Date);
PARAMETER(RCD.OHE_Ship_Status);
PARAMETER(RCD.OHE_Load_Haul_Type);
PARAMETER(RCD.Warehouse_Type);
PARAMETER(RCD.Carrier_Code_Usr);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

//? Subfile Selections
ENDIF;

//?USER: Final processing (Post-confirm)

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

