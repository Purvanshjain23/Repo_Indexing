// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PVATXFR
// ?Date: 14.08.2025 Time: 03:51:49
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Program Comments.
DO;

//?S027849-JM-03/28/25-Stop firm order update by block order automation.
//?S027442-JM-03/20/25-Fix zero order number scenario in order detail.
//?S028944-JM-09/09/24-Block Order Automation Fixes
//?S016189-JM-07/03/24-Block Order Automation Fixes
//?WI546_2 Called from informatica job ETLBLOCK.
//?** WI546_2 05/22/24
//?1019801 JM - WI546_2 Added RDD check in Calendar file.
//?** WI546 10/01/23
//?This program will process through two work files.  Block order
//?Header and Block Order Detail.  We will process the records from
//?these two files and test for a number of different errors.  If
//?errors are found then we will write and email for each
//?Surrogate #.  If we don't find an error, we will post to Order
//?Header and Detail in Qtemp.  More errors are tested and if we
//?find no more, then we copy the records from Qtemp to Production.
//?** WI546_2  02/22/24
//?Part 2 of Block Orders has added additional fields and those
//?need to be validated and not defaulted.  We will also be
//?processing changed records and will need to validate those also.
ENDDO;

//?Must Read - Trigger Information
DO;

//?DB2 Trigger is added on files PUC2CPP & PUC3CPP.
ENDDO;

EXECUTE FUNCTION(RTV Sequence by Ordr Num) TYPE(RTVOBJ) FILE(PUC2CPP)           AC2225563;
PARAMETER(*ZERO);
{
 //?USER: Initialize routine

 //?Comments
 DO;

 //?** WI546 10/01/23
 //?Process through all the Work file Header records and for each
 //?Header record, process the Work file detail records for that
 //?Surrogate #.  Write emails for any errors.
 //?** WI546_2 02/22/24
 //?Additional validations and process changed records.
 //?** WI546_2 06/06/24
 //?Updated Order Number from 9999999 to New one in work file.
 //?This will take care of scheduling.
 ENDDO;

 //?Initialization.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 MOVE *ALL (To: LCL From: CON);

 // Call program UPD Copy Order Templt2UP.
 CALL PROGRAM(UPD Copy Order Templt2UP) ('PVAUUPC');
 PARAMETER('C');

 ENDIF;

 //?*** Setting first time flag for when we process the first Change.
 // LCL.First Time Flag = CND.Yes
 LCL.First_Time_Flag = 'Y';

 //?USER: Process Data record

 //?Comments
 DO;

 //?** WI546 10/01/23
 //?Validate for error conditions in the Header Work file.
 //?** WI546_2 02/22/24
 //?Validate additional fields for new orders (No order number)
 //? and process change records (Order Number is Present).
 ENDDO;

 //?Process through all the Header and Detail Records.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Hdr/Dtl Validation Pass U = CND.Yes
 LCL.Hdr_Dtl_Validation_Pass_U = 'Y';

 // PAR.Hdr/Dtl Validation Pass U = CND.Yes
 PAR.Hdr_Dtl_Validation_Pass_U = 'Y';

 CASE;

 // IF DB1.Order Number is Equal to zeros
 IF DB1.Order_Number = *ZERO;

 EXECUTE FUNCTION(RTV Surogate is Present) TYPE(RTVOBJ) FILE(PUC4CPP)            AC2225350;
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(NLL.Company_Number);
 PARAMETER(NLL.Order_Number);
 PARAMETER(NLL.Record_Processed);
 PARAMETER(NLL.Record_Status);
 {
  //?USER: Initialize routine

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  MOVE *ALL (To: PAR From: DB1);

 }

 //?** Mark as an error if surrogate is already present
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // LCL.@Text 9 = CVTVAR(DB1.Surrogate Number)
 LCL.@Text_9 = CVTVAR(DB1.Surrogate_Number);

 // LCL.BOE Error Comment = CON.Surrogate ID #:
 LCL.BOE_Error_Comment = 'Surrogate ID #:';

 // LCL.BOE Error Comment = CONCAT(CON.Surrogate ID #:,LCL.@Text 9,CON.*ZERO)
 LCL.BOE_Error_Comment = 'Surrogate ID #:' + LCL.@Text_9 (*ZERO);

 // LCL.BOE Error Comment = CONCAT(LCL.BOE Error Comment,CON.is already present.,CON.1)
 LCL.BOE_Error_Comment = LCL.BOE_Error_Comment + 'is already present.' (1);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('DUPSUR');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 //?*** 0 Order number is a new order.
 //?** 1 Company Number
 EXECUTE FUNCTION(Val Company Exist     RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC2143767;
 PARAMETER(DB1.Company_Number);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

 }

 //?** Mark as an error if we don't find the Company.
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // LCL.BOE Error Comment = CON.Invalid Company
 LCL.BOE_Error_Comment = 'Invalid Company';

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('INVCMP');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 //?** 2 Ship to Customer
 EXECUTE FUNCTION(RTV Com Market        RT) TYPE(RTVOBJ) FILE(CABBREP)           AC1943662;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(LCL.Ship_To_Name);
 PARAMETER(LCL.Ship_To_Address_Line_1);
 PARAMETER(LCL.Ship_To_Address_Line_2);
 PARAMETER(LCL.Ship_To_Address_Line_3);
 PARAMETER(LCL.Ship_To_City);
 PARAMETER(LCL.Ship_To_State_Code);
 PARAMETER(NLL.County_Code);
 PARAMETER(LCL.Ship_To_Zip_Postal_Code);
 PARAMETER(NLL.Telephone_Number_FF);
 PARAMETER(NLL.Fax_Number_FF);
 PARAMETER(NLL.Alpha_Search);
 PARAMETER(NLL.Federal_Tax_Id);
 PARAMETER(NLL.New_Customer_Status);
 PARAMETER(NLL.SIC_Number);
 PARAMETER(NLL.D_B_Number);
 PARAMETER(NLL.D_B_Rating);
 PARAMETER(NLL.Date_of_D_B_Rating);
 PARAMETER(NLL.Credit_Line_Expire_Date);
 PARAMETER(LCL.AR_Customer_Number);
 PARAMETER(NLL.Parent_Customer);
 PARAMETER(NLL.Credit_Check_AR_Customer);
 PARAMETER(NLL.Credit_Check_Parent_Cust);
 PARAMETER(NLL.Country_Code);
 PARAMETER(NLL.EDI_Invoice_Sts);
 PARAMETER(NLL.Order_Entry_Hold);
 PARAMETER(NLL.Parent_Credit_Limit);
 PARAMETER(NLL.AR_Credit_Limit);
 PARAMETER(NLL.Order_Entry_Hold_Date);
 PARAMETER(NLL.Ship_To_Customer_Flag);
 PARAMETER(NLL.Field_vs_In_House_flag);
 PARAMETER(LCL.Email_Cust_On_Order_Ship);
 PARAMETER(NLL.Print_Invoice_Sts);
 PARAMETER(NLL.Item_Reference_Status);
 PARAMETER(NLL.Statement_Print_Frequency);
 PARAMETER(NLL.EDI_Status_1);
 PARAMETER(NLL.EDI_Status_2);
 PARAMETER(NLL.EDI_Status_3);
 PARAMETER(NLL.Record_Status);
 PARAMETER(NLL.Job_Time);
 PARAMETER(NLL.User_Id);
 PARAMETER(NLL.Job_Name);
 PARAMETER(NLL.Job_Date);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?** Mark as an error if we don't find the Ship to.
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 EXECUTE FUNCTION(Rtv Customer Air Frt  RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1789821;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(LCL.Air_Freight_Order);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Cust Name/Addr     RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1129143;
 PARAMETER(LCL.AR_Customer_Number);
 PARAMETER(LCL.Bill_to_Name);
 PARAMETER(LCL.Bill_to_Address_Line_1);
 PARAMETER(LCL.Bill_to_Address_Line_2);
 PARAMETER(LCL.Bill_to_Address_Line_3);
 PARAMETER(LCL.Bill_to_City);
 PARAMETER(LCL.Bill_to_State_Code);
 PARAMETER(LCL.Bill_to_Zip_Postal_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?** Mark as an error if we don't find the Bill to.
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 //?** Mark as an error if we don't find the Bill to.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('INVBLT');
 PARAMETER('Invalid Bill to');

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 //?** Mark as an error if we don't find the Ship to.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.BOE Error Comment = CONCAT(CON.Invalid Ship to,CON.Customer #,CON.1)
 LCL.BOE_Error_Comment = 'Invalid Ship to' + 'Customer #' (1);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('INVSTC');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 //?** 2 Ship to Customer
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program RTV OE Hold/ShipTo FlagXF.
 CALL PROGRAM(RTV OE Hold/ShipTo FlagXF) ('PDNEXFR');
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(LCL.Order_Entry_Hold);
 PARAMETER(LCL.Ship_To_Customer_Flag);

 CASE;

 // IF LCL.Ship To Customer Flag is No Use as Ship to Cust
 IF LCL.Ship_To_Customer_Flag = 'N';

 // LCL.BOE Error Comment = CONCAT(CON.Ship To Customer Flag,CON.not use as Ship To,CON.1)
 LCL.BOE_Error_Comment = 'Ship To Customer Flag' + 'not use as Ship To' (1);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('CSTFLG');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 CASE;

 // IF LCL.Order Entry Hold is New Order Hold
 IF LCL.Order_Entry_Hold = 'Y';

 // LCL.BOE Error Comment = CONCAT(CON.Customer is held for,CON.New Orders,CON.1)
 LCL.BOE_Error_Comment = 'Customer is held for' + 'New Orders' (1);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('OEHOLD');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 ENDIF;

 //?** 3  Company/Ship to Customer
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program RTV Cust Ordering Dflt2XF.
 CALL PROGRAM(RTV Cust Ordering Dflt2XF) ('PNS9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(LCL.Terms_Code);
 PARAMETER(LCL.Sales_Route_Code);
 PARAMETER(LCL.Special_Instructions_2);
 PARAMETER(LCL.Special_Instructions);
 PARAMETER(NLL.Carrier_Code);
 PARAMETER(NLL.P_O_Required_Flag);
 PARAMETER(LCL.Requested_Delivery_Time);
 PARAMETER(LCL.Type_Code);
 PARAMETER(LCL.Absorbed_Freight_Rate_CWT);
 PARAMETER(NLL.Mileage_To_Customer);
 PARAMETER(NLL.Warehouse_Code);
 PARAMETER(LCL.Outside_Warehouse_Flag);
 PARAMETER(NLL.Customer_Group_Code);
 PARAMETER(NLL.Customer_Group_Code_2);
 PARAMETER(NLL.Ord_Ent_Default_Sls_Rte);
 PARAMETER(LCL.Record_Found_USR);

 //?** Return code processing
 CASE;

 // IF NOT LCL.Record Found USR is Record Found
 IF ! LCL.Record_Found_USR = 'Y';

 // LCL.BOE Error Comment = CONCAT(CON.Company Customer not,CON.Found,CON.1)
 LCL.BOE_Error_Comment = 'Company Customer not' + 'Found' (1);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('CMPCST');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 //?** Return code processing
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?** Validate Sales Route Code
 CASE;

 // IF LCL.Sales Route Code is not entered
 IF LCL.Sales_Route_Code = *BLANK;

 // LCL.BOE Error Comment = CONCAT(CON.Sales Route not found in,CON.Company Customer,CON.1)
 LCL.BOE_Error_Comment = 'Sales Route not found in' + 'Company Customer' (1);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('SLSRTE');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 //?** Validate Sales Route Code
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program RTV Salesman Code      XF.
 CALL PROGRAM(RTV Salesman Code      XF) ('PNIAXFR');
 PARAMETER(LCL.Sales_Route_Code);
 PARAMETER(LCL.Salesperson_Code);

 //?** Validate Salesperson Code
 CASE;

 // IF LCL.Salesperson Code is not entered
 IF LCL.Salesperson_Code = *BLANK;

 // LCL.BOE Error Comment = CONCAT(CON.Salesperson Code not,CON.found in Sales Route,CON.1)
 LCL.BOE_Error_Comment = 'Salesperson Code not' + 'found in Sales Route' (1);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('SLSPER');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 //?** Validate Salesperson Code
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Rtv Dft Sales Channel  XF.
 CALL PROGRAM(Rtv Dft Sales Channel  XF) ('PBHPXFR');
 PARAMETER(LCL.Salesperson_Code);
 PARAMETER(LCL.Type_Code);

 //?** Validate Type Code
 CASE;

 // IF LCL.Type Code is EQ Blank
 IF LCL.Type_Code = *BLANK;

 // LCL.BOE Error Comment = CONCAT(CON.Type Code is not set in,CON.Salesperson Electronic,CON.1)
 LCL.BOE_Error_Comment = 'Type Code is not set in' + 'Salesperson Electronic' (1);

 // LCL.BOE Error Comment = CONCAT(LCL.BOE Error Comment,CON.CM Table,CON.1)
 LCL.BOE_Error_Comment = LCL.BOE_Error_Comment + 'CM Table' (1);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('TYPCDE');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 ENDIF;

 // Call program RTV Sls Route by Slsp  XF.
 CALL PROGRAM(RTV Sls Route by Slsp  XF) ('PNH6XFR');
 PARAMETER(LCL.Sales_Route_Code);
 PARAMETER(LCL.Salesperson_Code);
 PARAMETER(LCL.Manager_Level_Code);
 PARAMETER(LCL.VP_Level_Code);

 //?** Get Sales Route Code
 CASE;

 // IF LCL.Sales Route Code is not entered
 IF LCL.Sales_Route_Code = *BLANK;

 // LCL.BOE Error Comment = CONCAT(CON.Salesperson is not assign,CON.ed a Sales Route,CON.*ZERO)
 LCL.BOE_Error_Comment = 'Salesperson is not assign' + 'ed a Sales Route' (*ZERO);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('SLSPER');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 //?** Get VP Level Code
 CASE;

 // IF LCL.VP Level Code is Not Entered
 IF LCL.VP_Level_Code = *BLANK;

 // Call program RTV Mgr Desc,VP Level  XF.
 CALL PROGRAM(RTV Mgr Desc,VP Level  XF) ('PNIBXFR');
 PARAMETER(LCL.Manager_Level_Code);
 PARAMETER(LCL.Description);
 PARAMETER(LCL.VP_Level_Code);

 ENDIF;

 ENDIF;

 //?** Validate Requested Delivery Time
 CASE;

 // IF LCL.Requested Delivery Time is Entered
 IF LCL.Requested_Delivery_Time <> 0;

 //?** Validate Requested Delivery Time
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv All) TYPE(RTVOBJ) FILE(PUAAREP)                            AC2149720;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(NLL.M3_Supplier_ID);
 PARAMETER(NLL.Dft_Mode_of_Transportaton);
 PARAMETER(NLL.Buying_Group);
 PARAMETER(NLL.Buying_Group_Opt_In_Out);
 PARAMETER(NLL.Ship_To_Establishment_nbr);
 PARAMETER(NLL.PM_Pallet_Type);
 PARAMETER(NLL.Cust_Dft_Price_Type);
 PARAMETER(NLL.Cust_Dft_Age_Days);
 PARAMETER(LCL.Cust_Dft_Delivery_Time);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Convert 6,0 HHMMSS format to 4,0 HHMM time format.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Time Alpha usr 6 = CVTVAR(LCL.Cust Dft Delivery Time)
 LCL.Time_Alpha_usr_6 = CVTVAR(LCL.Cust_Dft_Delivery_Time);

 // LCL.Time HHMM Alpha USR = SUBSTRING(LCL.Time Alpha usr 6,CON.1,CON.4)
 LCL.Time_HHMM_Alpha_USR = SUBSTRING(LCL.Time_Alpha_usr_6:1:4);

 // LCL.Requested Delivery Time = CVTVAR(LCL.Time HHMM Alpha USR)
 LCL.Requested_Delivery_Time = CVTVAR(LCL.Time_HHMM_Alpha_USR);

 ENDIF;

 CASE;

 // IF LCL.Requested Delivery Time is Zero
 IF LCL.Requested_Delivery_Time = *ZERO;

 //?** Defaulting to 06:00 per Joe Kellerman.
 // LCL.Requested Delivery Time = CND.6 AM
 LCL.Requested_Delivery_Time = 0600;

 ENDIF;

 ENDIF;

 // Call program RTV Co. Dflt Int All,O XF.
 CALL PROGRAM(RTV Co. Dflt Int All,O XF) ('PMRMXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(NLL.Shipping_Method_Dft);
 PARAMETER(LCL.Load_Type_Dft);
 PARAMETER(LCL.LTL_Flag);
 PARAMETER(NLL.Export_Status_Dft);
 PARAMETER(LCL.Shrink_Wrap);
 PARAMETER(NLL.Departure_Time_DFT);
 PARAMETER(NLL.Export_Code_Dft);
 PARAMETER(NLL.Allow_Mult_Whse_to_Order);
 PARAMETER(NLL.Allow_Multi_Export_On_Ord);
 PARAMETER(LCL.Slip_Sheet_Dft);
 PARAMETER(LCL.Palletize);
 PARAMETER(LCL.Company_Organization);

 //?** Consider Palletize from WF Header
 CASE;

 // IF DB1.Palletize is Not Blank
 IF DB1.Palletize = 'N'/'Y';

 // LCL.Palletize = DB1.Palletize
 LCL.Palletize = DB1.Palletize;

 ENDIF;

 //?** Test for Slip Sheet
 CASE;

 // IF DB1.Slip Sheet is Y/N/' ' Values
 IF DB1.Slip_Sheet = *BLANK/'N'/'Y';

 // LCL.Slip Sheet = DB1.Slip Sheet
 LCL.Slip_Sheet = DB1.Slip_Sheet;

 //?** Test for Slip Sheet
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Slip Sheet = CND.blank
 LCL.Slip_Sheet = *BLANK;

 CASE;

 // IF DB1.Shipping Method is Not Entered
 IF DB1.Shipping_Method = *BLANK;

 // LCL.Slip Sheet = LCL.Slip Sheet Dft
 LCL.Slip_Sheet = LCL.Slip_Sheet_Dft;

 ENDIF;

 ENDIF;

 //?WI546_2 02/22/24
 //?Shipping Method
 CASE;

 // IF DB1.Shipping Method is Not Entered
 IF DB1.Shipping_Method = *BLANK;

 // LCL.Shipping Method = CND.Prepaid Truck
 LCL.Shipping_Method = 'PT';

 //?Shipping Method
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?** Validate Shipping Method
 CASE;

 // IF DB1.Shipping Method is Valid Values
 IF DB1.Shipping_Method = 'CR'/'CT'/'PR'/'PT';

 //?We B OK.
 // LCL.Shipping Method = DB1.Shipping Method
 LCL.Shipping_Method = DB1.Shipping_Method;

 //?** Validate Shipping Method
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.BOE Error Comment = CONCAT(CON.Shipping Method is not,CON.a Valid Value.,CON.1)
 LCL.BOE_Error_Comment = 'Shipping Method is not' + 'a Valid Value.' (1);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('SHPMTH');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 ENDIF;

 //?** Validate Intended for Export
 CASE;

 // IF LCL.Type Code is Export
 IF LCL.Type_Code = 'EX';

 // AND DB1.OHE Intended for ExportCC is Entered
 AND DB1.OHE_Intended_for_ExportCC <> *BLANK;

 // LCL.BOE Error Comment = CONCAT(CON.Intended for Export canno,CON.t be entered for Export,CON.*ZE
 LCL.BOE_Error_Comment = 'Intended for Export canno' + 't be entered for Export' (*ZERO);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('INTEXP');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 //?** Validate Export status
 CASE;

 // IF LCL.Type Code is Not Export
 IF LCL.Type_Code <> 'EX';

 // AND DB1.Country Code is Entered
 AND ( DB1.Country_Code <> *BLANK;

 // OR DB1.Export Status is yes
 OR DB1.Export_Status = 'Y' );

 // LCL.BOE Error Comment = CONCAT(CON.Type code is not setup as,CON. Export.,CON.*ZERO)
 LCL.BOE_Error_Comment = 'Type code is not setup as' + ' Export.' (*ZERO);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('INVEXS');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 //?** Validate Export status
 // IF LCL.Type Code is Export
 IF LCL.Type_Code = 'EX';

 // AND DB1.Country Code is Entered
 AND DB1.Country_Code <> *BLANK;

 EXECUTE FUNCTION(Val Country & Active   RT) TYPE(RTVOBJ) FILE(OME5REP)          AC2188228;
 PARAMETER(DB1.Country_Code);
 PARAMETER(LCL.USR_Record_Status);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Record Status is Active
  IF DB1.Record_Status = 'A';

  // PAR.Record Status = DB1.Record Status
  PAR.Record_Status = DB1.Record_Status;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Record Status = CND.Inactive
  PAR.Record_Status = 'I';

  ENDIF;

 }

 CASE;

 // IF LCL.USR Record Status is Active
 IF LCL.USR_Record_Status = 'A';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.BOE Error Comment = CONCAT(CON.Export Status Should Be Y,CON.es For Exporting.,CON.*ZERO)
 LCL.BOE_Error_Comment = 'Export Status Should Be Y' + 'es For Exporting.' (*ZERO);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('INVEXS');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 ENDIF;

 //?** Validate Load Type Dft
 CASE;

 // IF LCL.Load Type Dft is Blank
 IF LCL.Load_Type_Dft = *BLANK;

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('LDTYPE');
 PARAMETER('Load Type cannot be Blank');

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 //?** Validate Palletize
 CASE;

 // IF DB1.Palletize is Y/N Values
 IF DB1.Palletize = 'N'/'Y';

 //?** Validate Palletize
 // IF LCL.Palletize is blank
 IF LCL.Palletize = *BLANK;

 // LCL.BOE Error Comment = CONCAT(CON.Palletize cannot be blank,CON.in Company Defaults file,CON.1)
 LCL.BOE_Error_Comment = 'Palletize cannot be blank' + 'in Company Defaults file' (1);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('PALTZE');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 //?** Validate Palletize
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.Palletize is yes
 IF LCL.Palletize = 'Y';

 // Call program Rtv Pallet Type/Desc  XF.
 CALL PROGRAM(Rtv Pallet Type/Desc  XF) ('PUTPXFR');
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(LCL.OD_Pallet_Type);
 PARAMETER(NLL.PM_Description);
 PARAMETER(LCL.Record_Found_USR);

 CASE;

 // IF LCL.OD Pallet Type is None
 IF LCL.OD_Pallet_Type = *BLANK;

 // LCL.OD Pallet Type = CND.#2 Pallet
 LCL.OD_Pallet_Type = 02;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.OD Pallet Type = CND.None
 LCL.OD_Pallet_Type = *BLANK;

 ENDIF;

 ENDIF;

 ENDIF;

 //?** Validate Slip Sheet Dft
 CASE;

 // IF LCL.Slip Sheet Dft is blank
 IF LCL.Slip_Sheet_Dft = *BLANK;

 // LCL.BOE Error Comment = CONCAT(CON.Slip Sheet cannot be blan,CON.k in Company Default file,CON.*
 LCL.BOE_Error_Comment = 'Slip Sheet cannot be blan' + 'k in Company Default file' (*ZERO);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('SLPSHT');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 // Call program RTV Order Types        XF.
 CALL PROGRAM(RTV Order Types        XF) ('PNH9XFR');
 PARAMETER('OR');
 PARAMETER(NLL.Order_Type_Description);
 PARAMETER(NLL.Processing_Cycle_Type);
 PARAMETER(LCL.Billing_Activity_Type);
 PARAMETER(LCL.Affect_Inventory_Default);
 PARAMETER(LCL.Affect_Sales_Doll_Default);
 PARAMETER(LCL.Affect_Sales_Pnds_Default);

 //?** Validate Cust & Order Type
 CASE;

 // IF LCL.Billing Activity Type is Invoice
 IF LCL.Billing_Activity_Type = '1';

 // AND LCL.Outside Warehouse Flag is yes
 AND LCL.Outside_Warehouse_Flag = 'Y';

 // LCL.BOE Error Comment = CONCAT(CON.Cust is Outside WHS,but O,CON.rder Type not WHS XFR,CON.*ZERO
 LCL.BOE_Error_Comment = 'Cust is Outside WHS,but O' + 'rder Type not WHS XFR' (*ZERO);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('OUTWHS');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 ENDIF;

 //?** 4 Warehouse Code
 EXECUTE FUNCTION(Val Warehouse Exist   RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2213610;
 PARAMETER(DB1.Warehouse_Code);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

 }

 //?** Warehouse Code
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 // LCL.BOE Error Comment = CONCAT(CON.Warehouse Code is Invalid,CON. in Warehouse Codes file.,CON.*
 LCL.BOE_Error_Comment = 'Warehouse Code is Invalid' + ' in Warehouse Codes file.' (*ZERO);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(*MISSING);
 PARAMETER('WHSCDE');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 //?** Warehouse Code
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV All               RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2221988;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(NLL.Warehouse_Description);
 PARAMETER(NLL.Address_Line_1);
 PARAMETER(NLL.Address_Line_2);
 PARAMETER(NLL.Address_Line_3);
 PARAMETER(NLL.City);
 PARAMETER(NLL.Zip_Postal_Code);
 PARAMETER(LCL.Production_Warehouse);
 PARAMETER(NLL.State_Code);
 PARAMETER(NLL.Lot_Tracking_Flag);
 PARAMETER(NLL.Default_Printer);
 PARAMETER(LCL.Warehouse_Type);
 PARAMETER(LCL.Trans_Contol_AS400_Plant);
 PARAMETER(NLL.Warehouse_Location);
 PARAMETER(NLL.Warehouse_Std_Chill_Time);
 PARAMETER(NLL.Warehouse_Chill_Time);
 PARAMETER(NLL.Include_in_Auto_Pre_Pick);
 PARAMETER(NLL.Default_Manifest_Copies);
 PARAMETER(NLL.Default_Load_Sequence);
 PARAMETER(NLL.WHS_Slotting_Limit_Type);
 PARAMETER(NLL.Shipping_Company);
 PARAMETER(NLL.Accounting_Company);
 PARAMETER(NLL.WHS_Sched_Prod_Max_Days);
 PARAMETER(NLL.WHS_Inventory_Chill_Time);
 PARAMETER(NLL.Parent_Warehouse);
 PARAMETER(NLL.Default_Shipping_Whs);
 PARAMETER(NLL.WHS_Live_with_Carlisle);
 PARAMETER(NLL.WHS_PFS_Interface);
 PARAMETER(NLL.WHS_Req_Meter_Reading_Shp);
 PARAMETER(NLL.WHS_Default_Load_Type);
 PARAMETER(NLL.WHS_TMS_Planning_Region);
 PARAMETER(NLL.Default_Carrier_Code);
 PARAMETER(NLL.Inventory_Logic_Version);
 PARAMETER(NLL.WHS_Auto_Inv_Restoration);
 PARAMETER(NLL.EDI_Status_1);
 PARAMETER(NLL.EDI_Status_2);
 PARAMETER(NLL.EDI_Status_3);
 PARAMETER(NLL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Call program RTV Shipping Temp      XF.
 CALL PROGRAM(RTV Shipping Temp      XF) ('PDSSXFR');
 PARAMETER(LCL.Warehouse_Type);
 PARAMETER(NLL.Reefer_Temperature_Dft);
 PARAMETER(LCL.Temperature_Code_C_F);

 EXECUTE FUNCTION(Rtv Whs Typ/FZNCHLTME IF) TYPE(EXCINTFUN)                      AC1423925;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(LCL.Warehouse_Type);
 PARAMETER(LCL.Fresh_Chilling_Time);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Warehouse_Type);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.Warehouse Type is Frozen
  IF PAR.Warehouse_Type = 'FZ';

  EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
  PARAMETER(PAR.Company_Number);
  PARAMETER('FZNCHLTME');
  PARAMETER(PAR.System_Value_Numeric);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.Fresh Chilling Time = PAR.System Value Numeric
  PAR.Fresh_Chilling_Time = PAR.System_Value_Numeric;

  ENDIF;

 }

 CASE;

 // IF DB1.Warehouse Code NE LCL.HPB Ship to Warehouse
 IF DB1.Warehouse_Code <> LCL.HPB_Ship_to_Warehouse;

 // LCL.HPB Ship to Warehouse = DB1.Warehouse Code
 LCL.HPB_Ship_to_Warehouse = DB1.Warehouse_Code;

 ENDIF;

 ENDIF;

 //?** 5 Requested Ship Date
 CASE;

 // IF DB1.Requested Ship Date is entered
 IF DB1.Requested_Ship_Date <> *ZERO;

 //?** Saving the date to pass into the Detail validation.
 // LCL.Requested Ship Date = DB1.Requested Ship Date
 LCL.Requested_Ship_Date = DB1.Requested_Ship_Date;

 EXECUTE FUNCTION(RTV Calendar           RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1102049;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Requested_Ship_Date);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.Calendar not found
  PGM.*Return_code = 'USR0018';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

 //?** Error if Requested Ship Date is not in Calendar
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 //?** Error if Requested Ship Date is not in Calendar
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.BOE Error Comment = CONCAT(CON.Requested Ship Date not y,CON.et in Calendar File,CON.*ZERO)
 LCL.BOE_Error_Comment = 'Requested Ship Date not y' + 'et in Calendar File' (*ZERO);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('INVRSD');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 //?** If the date is not in the Calendar, default to today's
 //?**  date so that the Detail validations will not get hung in a loop.
 // LCL.Requested Ship Date = JOB.*Job exec start date
 LCL.Requested_Ship_Date = JOB.*Job_exec_start_date;

 ENDIF;

 //?** WI546_2-Validate Date format is CYMD for Requested Ship Date
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Date From Convert USR = CVTVAR(DB1.Requested Ship Date)
 LCL.Date_From_Convert_USR = CVTVAR(DB1.Requested_Ship_Date);

 // LCL.Text usr 11 = CND.Not Entered
 LCL.Text_usr_11 = *BLANK;

 // Call program Cvt Date              UP.
 CALL PROGRAM(Cvt Date              UP) ('POD5UPR');
 PARAMETER(LCL.Date_From_Convert_USR);
 PARAMETER(LCL.Text_usr_11);
 PARAMETER(*CYMD);
 PARAMETER(*YYMD);
 PARAMETER(*NONE);

 CASE;

 // IF LCL.Text usr 11 is Not Entered
 IF LCL.Text_usr_11 = *BLANK;

 // LCL.BOE Error Comment = CONCAT(CON.Invalid Requested Ship Da,CON.te Format.,CON.*ZERO)
 LCL.BOE_Error_Comment = 'Invalid Requested Ship Da' + 'te Format.' (*ZERO);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('INVRSD');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 ENDIF;

 //?** 5 Requested Ship Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.BOE Error Comment = CONCAT(CON.Invalid Requested Ship Da,CON.te,CON.*ZERO)
 LCL.BOE_Error_Comment = 'Invalid Requested Ship Da' + 'te' (*ZERO);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(*MISSING);
 PARAMETER('INVRSD');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 //?** 6 Spot Buy
 CASE;

 // IF DB1.OHE Spot Buy is Valid Values
 IF DB1.OHE_Spot_Buy = 'P'/'S'/'T';

 // LCL.OD Spot Buy = DB1.OHE Spot Buy
 LCL.OD_Spot_Buy = DB1.OHE_Spot_Buy;

 //?** 6 Spot Buy
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.BOE Error Comment = CONCAT(CON.Invalid Spot Buy Value,CON.*BLANK,CON.*ZERO)
 LCL.BOE_Error_Comment = 'Invalid Spot Buy Value' + *BLANK (*ZERO);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(*MISSING);
 PARAMETER('SPTBUY');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 //?** 7 Customer Purchase Order#
 CASE;

 // IF DB1.Customer Purchase Order # is Blank
 IF DB1.Customer_Purchase_Order_# = *BLANK;

 // LCL.BOE Error Comment = CONCAT(CON.Invalid Purchase Order Nu,CON.mber,CON.*ZERO)
 LCL.BOE_Error_Comment = 'Invalid Purchase Order Nu' + 'mber' (*ZERO);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(*MISSING);
 PARAMETER('INVPO#');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 //?** 8 Export Status
 CASE;

 // IF DB1.Export Status is Y/N Values
 IF DB1.Export_Status = 'N'/'Y';

 //?** 8 Export Status
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.BOE Error Comment = CONCAT(CON.Export Status must be Ent,CON.ered,CON.*ZERO)
 LCL.BOE_Error_Comment = 'Export Status must be Ent' + 'ered' (*ZERO);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(*MISSING);
 PARAMETER('EXPSTS');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 //?** 9 Country Code
 CASE;

 // IF DB1.Country Code is Blank
 IF DB1.Country_Code = *BLANK;

 //?** 9 Country Code
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Val Country & Active   RT) TYPE(RTVOBJ) FILE(OME5REP)          AC2188228;
 PARAMETER(DB1.Country_Code);
 PARAMETER(LCL.Record_Status);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Record Status is Active
  IF DB1.Record_Status = 'A';

  // PAR.Record Status = DB1.Record Status
  PAR.Record_Status = DB1.Record_Status;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Record Status = CND.Inactive
  PAR.Record_Status = 'I';

  ENDIF;

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // AND LCL.Record Status is Active
 AND LCL.Record_Status = 'A';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.BOE Error Comment = CONCAT(CON.Country Code does not Exi,CON.st or is Inactive,CON.*ZERO)
 LCL.BOE_Error_Comment = 'Country Code does not Exi' + 'st or is Inactive' (*ZERO);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(*MISSING);
 PARAMETER('CNTCDE');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 ENDIF;

 //?** 10 OHE Intended for ExportCC
 //?** Only validate if Entered.
 CASE;

 // IF DB1.OHE Intended for ExportCC is Entered
 IF DB1.OHE_Intended_for_ExportCC <> *BLANK;

 EXECUTE FUNCTION(Val Country & Active   RT) TYPE(RTVOBJ) FILE(OME5REP)          AC2188228;
 PARAMETER(DB1.OHE_Intended_for_ExportCC);
 PARAMETER(LCL.Record_Status);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Record Status is Active
  IF DB1.Record_Status = 'A';

  // PAR.Record Status = DB1.Record Status
  PAR.Record_Status = DB1.Record_Status;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Record Status = CND.Inactive
  PAR.Record_Status = 'I';

  ENDIF;

 }

 //?** Country Exists and Active
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // AND LCL.Record Status is Active
 AND LCL.Record_Status = 'A';

 //?** Country Exists and Active
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.BOE Error Comment = CONCAT(CON.Intended for Export Count,CON.ry not exist or Inactive,CON.*Z
 LCL.BOE_Error_Comment = 'Intended for Export Count' + 'ry not exist or Inactive' (*ZERO);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(*MISSING);
 PARAMETER('INVIFE');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 ENDIF;

 //?Country & Intend for Export Can't both be entered.
 CASE;

 // IF DB1.Country Code is Entered
 IF DB1.Country_Code <> *BLANK;

 // AND DB1.OHE Intended for ExportCC is Entered
 AND DB1.OHE_Intended_for_ExportCC <> *BLANK;

 // LCL.BOE Error Comment = CONCAT(CON.Both Intend for Exprt and,CON.Country can't be entered.,CON.1
 LCL.BOE_Error_Comment = 'Both Intend for Exprt and' + 'Country can't be entered.' (1);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(*MISSING);
 PARAMETER('INTCNT');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 ENDIF;

 //?*** WI546_2   Shrink Wrap
 CASE;

 // IF DB1.Shrink Wrap is Y/N Values
 IF DB1.Shrink_Wrap = 'N'/'Y';

 // LCL.Shrink Wrap = DB1.Shrink Wrap
 LCL.Shrink_Wrap = DB1.Shrink_Wrap;

 //?*** WI546_2   Shrink Wrap
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Shrink Wrap = CND.no
 LCL.Shrink_Wrap = 'N';

 ENDIF;

 //?*** WI546_2   Requested Delivery Date
 CASE;

 // IF DB1.Requested Delivery Date is entered
 IF DB1.Requested_Delivery_Date <> *ZERO;

 //?** WI546_2-Validate Date format is CYMD for Requested Delivery Date
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Text usr 11 = CND.Not Entered
 LCL.Text_usr_11 = *BLANK;

 // LCL.Date From Convert USR = CVTVAR(DB1.Requested Delivery Date)
 LCL.Date_From_Convert_USR = CVTVAR(DB1.Requested_Delivery_Date);

 // Call program Cvt Date              UP.
 CALL PROGRAM(Cvt Date              UP) ('POD5UPR');
 PARAMETER(LCL.Date_From_Convert_USR);
 PARAMETER(LCL.Text_usr_11);
 PARAMETER(*CYMD);
 PARAMETER(*YYMD);
 PARAMETER(*NONE);

 CASE;

 // IF LCL.Text usr 11 is Not Entered
 IF LCL.Text_usr_11 = *BLANK;

 // LCL.BOE Error Comment = CONCAT(CON.Invalid Requested Deliver,CON.y Date Format.,CON.*ZERO)
 LCL.BOE_Error_Comment = 'Invalid Requested Deliver' + 'y Date Format.' (*ZERO);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('INVDEL');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 ENDIF;

 //?** 1019801 JM - WI546_2 Make sure RDD is present in Calendar.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Calendar           RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1102049;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Requested_Delivery_Date);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.Calendar not found
  PGM.*Return_code = 'USR0018';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

 CASE;

 // IF PGM.*Return code is Calendar not found
 IF PGM.*Return_code = 'USR0018';

 // LCL.BOE Error Comment = CONCAT(CON.Requested Delivery Date N,CON.ot Found In Calendar.,CON.*ZERO
 LCL.BOE_Error_Comment = 'Requested Delivery Date N' + 'ot Found In Calendar.' (*ZERO);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('INVDEL');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 ENDIF;

 //?*** WI546_2   Requested Delivery Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.BOE Error Comment = CONCAT(CON.Invalid Requested Deliver,CON.y Date.,CON.*ZERO)
 LCL.BOE_Error_Comment = 'Invalid Requested Deliver' + 'y Date.' (0);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('INVDAT');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 //?*** WI546_2 Validate shipping date
 CASE;

 // IF DB1.Requested Ship Date is entered
 IF DB1.Requested_Ship_Date <> *ZERO;

 // AND DB1.Requested Delivery Date is entered
 AND DB1.Requested_Delivery_Date <> *ZERO;

 // AND LCL.Shipping Method is Prepaid
 AND LCL.Shipping_Method = 'PR'/'PT';

 // LCL.Warehouse Code = DB1.Warehouse Code
 LCL.Warehouse_Code = DB1.Warehouse_Code;

 // Call program CLC Must Ship 4 Req DlvXF.
 CALL PROGRAM(CLC Must Ship 4 Req DlvXF) ('PMUSXFR');
 PARAMETER(LCL.Must_Ship_Error);
 PARAMETER(DB1.Company_Number);
 PARAMETER(9999999);
 PARAMETER(LCL.Ship_To_City);
 PARAMETER(LCL.Ship_To_State_Code);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(LCL.Requested_Delivery_Time);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(LCL.Must_Ship_Date_USR);
 PARAMETER(LCL.Must_Ship_Time_USR);
 PARAMETER(*ZERO);

 CASE;

 // IF LCL.Must Ship Error is Miles to Next=Zeros
 IF LCL.Must_Ship_Error = 'MTN';

 // LCL.Must Ship Error = CND.No Error
 LCL.Must_Ship_Error = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(PMT Must Ship Err Msg  IF) TYPE(EXCINTFUN)                     AC1521273;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Must_Ship_Error);
 PARAMETER(LCL.Explaination_Text_1);
 {
  //?Execute internal function

  // PAR.Explaination Text 1 = CON.*BLANK
  PAR.Explaination_Text_1 = *BLANK;

  CASE;

  // IF PAR.Must Ship Error is No Error
  IF PAR.Must_Ship_Error = *BLANK;

  // IF PAR.Must Ship Error is Must Ship before NOW
  IF PAR.Must_Ship_Error = 'NOW';

  // PAR.Explaination Text 1 = CON.Order should have already
  PAR.Explaination_Text_1 = 'Order should have already';

  // PAR.Explaination Text 1 = CONCAT(PAR.Explaination Text 1,CON. shipped,CON.*ZERO)
  PAR.Explaination_Text_1 = PAR.Explaination_Text_1 + ' shipped' (*ZERO);

  // IF PAR.Must Ship Error is Deadline not bef Delivery
  IF PAR.Must_Ship_Error = 'DDD';

  // PAR.Explaination Text 1 = CON.Deadline after Delivery
  PAR.Explaination_Text_1 = 'Deadline after Delivery';

  // IF PAR.Must Ship Error is Must Shp not bef Deadline
  IF PAR.Must_Ship_Error = 'MSD';

  // PAR.Explaination Text 1 = CON.Must Ship after Deadline
  PAR.Explaination_Text_1 = 'Must Ship after Deadline';

  // IF PAR.Must Ship Error is Schd Shp not bef Must Shp
  IF PAR.Must_Ship_Error = 'SSD';

  // PAR.Explaination Text 1 = CON.Scheduled Ship after Must
  PAR.Explaination_Text_1 = 'Scheduled Ship after Must';

  // PAR.Explaination Text 1 = CONCAT(PAR.Explaination Text 1,CON. Ship,CON.*ZERO)
  PAR.Explaination_Text_1 = PAR.Explaination_Text_1 + ' Ship' (*ZERO);

  // IF PAR.Must Ship Error is Miles to Next=Zeros
  IF PAR.Must_Ship_Error = 'MTN';

  // PAR.Explaination Text 1 = CON.No Miles Between Cities
  PAR.Explaination_Text_1 = 'No Miles Between Cities';

  // IF PAR.Must Ship Error is Req Ship should =Must Shp
  IF PAR.Must_Ship_Error = 'RSD';

  // PAR.Explaination Text 1 = CON.Requested Ship Date shoul
  PAR.Explaination_Text_1 = 'Requested Ship Date shoul';

  // PAR.Explaination Text 1 = CONCAT(PAR.Explaination Text 1,CON.d = Must Ship,CON.*ZERO)
  PAR.Explaination_Text_1 = PAR.Explaination_Text_1 + 'd = Must Ship' (*ZERO);

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?--- unexpected error ---
  // PAR.Explaination Text 1 = Condition name of PAR.Must Ship Error
  PAR.Explaination_Text_1 = RTVCND(PAR.Must_Ship_Error);

  ENDIF;

 }

 CASE;

 // IF LCL.Must Ship Error is Error List
 IF LCL.Must_Ship_Error = 'DDD'/'MTN'/'NOW'/'MSD'/'RSD'/'SSD';

 //?Populate error message text
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Convert 6,0 HHMMSS format to 4,0 HHMM time format.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Time Alpha usr 6 = CVTVAR(LCL.Must Ship Time        USR)
 LCL.Time_Alpha_usr_6 = CVTVAR(LCL.Must_Ship_Time_USR);

 // LCL.Time HHMM Alpha USR = SUBSTRING(LCL.Time Alpha usr 6,CON.1,CON.4)
 LCL.Time_HHMM_Alpha_USR = SUBSTRING(LCL.Time_Alpha_usr_6:1:4);

 ENDIF;

 // LCL.USR Work Field 7A = CVTVAR(LCL.Must Ship Date        USR)
 LCL.USR_Work_Field_7A = CVTVAR(LCL.Must_Ship_Date_USR);

 // LCL.USR Date Alpha = SUBSTRING(LCL.USR Work Field 7A,CON.2,CON.6)
 LCL.USR_Date_Alpha = SUBSTRING(LCL.USR_Work_Field_7A:2:6);

 // LCL.BOE Error Comment = CONCAT(CON.Order must be shipped on,CON.or before:,CND.*One)
 LCL.BOE_Error_Comment = 'Order must be shipped on' + 'or before:' (1);

 // LCL.BOE Error Comment = CONCAT(LCL.BOE Error Comment,LCL.USR Date Alpha,CND.*One)
 LCL.BOE_Error_Comment = LCL.BOE_Error_Comment + LCL.USR_Date_Alpha (1);

 // LCL.BOE Error Comment = CONCAT(LCL.BOE Error Comment,LCL.Time HHMM Alpha USR,CND.*One)
 LCL.BOE_Error_Comment = LCL.BOE_Error_Comment + LCL.Time_HHMM_Alpha_USR (1);

 ENDIF;

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('INVDAT');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

 //?** Process each valid record.
 CASE;

 // IF LCL.Hdr/Dtl Validation Pass U is Yes
 IF LCL.Hdr_Dtl_Validation_Pass_U = 'Y';

 //?** Write Header records to Qtemp.
 // Call program Crt Block Order Qtemp XF.
 CALL PROGRAM(Crt Block Order Qtemp XF) ('PUZ6XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(9999999);
 PARAMETER('OR');
 PARAMETER(LCL.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(LCL.Ship_To_Name);
 PARAMETER(LCL.Ship_To_Address_Line_1);
 PARAMETER(LCL.Ship_To_Address_Line_2);
 PARAMETER(LCL.Ship_To_Address_Line_3);
 PARAMETER(LCL.Ship_To_City);
 PARAMETER(LCL.Ship_To_State_Code);
 PARAMETER(LCL.Ship_To_Zip_Postal_Code);
 PARAMETER(LCL.AR_Customer_Number);
 PARAMETER(LCL.Bill_to_Name);
 PARAMETER(LCL.Bill_to_Address_Line_1);
 PARAMETER(LCL.Bill_to_Address_Line_2);
 PARAMETER(LCL.Bill_to_Address_Line_3);
 PARAMETER(LCL.Bill_to_City);
 PARAMETER(LCL.Bill_to_State_Code);
 PARAMETER(LCL.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(JOB.*Job_date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Terms_Code);
 PARAMETER(LCL.Special_Instructions);
 PARAMETER(LCL.Special_Instructions_2);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER('N');
 PARAMETER(*BLANK);
 PARAMETER('N');
 PARAMETER('E');
 PARAMETER(*BLANK);
 PARAMETER('N');
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER('INFORMATIC');
 PARAMETER(JOB.*Job_date);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('N');
 PARAMETER('N');
 PARAMETER('N');
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(LCL.Requested_Delivery_Time);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Absorbed_Freight_Rate_CWT);
 PARAMETER(*ZERO);
 PARAMETER(LCL.LTL_Flag);
 PARAMETER(*BLANK);
 PARAMETER('U');
 PARAMETER(LCL.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(LCL.Palletize);
 PARAMETER(LCL.Shrink_Wrap);
 PARAMETER(LCL.Slip_Sheet);
 PARAMETER(*BLANK);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(LCL.Load_Type_Dft);
 PARAMETER(*ZERO);
 PARAMETER('Y');
 PARAMETER('Y');
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER('Y');
 PARAMETER(LCL.Sales_Route_Code);
 PARAMETER(LCL.Manager_Level_Code);
 PARAMETER(LCL.VP_Level_Code);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER('01');
 PARAMETER(LCL.Trans_Contol_AS400_Plant);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Billing_Activity_Type);
 PARAMETER('B');
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER('N');
 PARAMETER(LCL.Email_Cust_On_Order_Ship);
 PARAMETER(*BLANK);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(LCL.Temperature_Code_C_F);
 PARAMETER(*BLANK);
 PARAMETER(LCL.Air_Freight_Order);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(JOB.*Job_exec_start_time);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);

 // PAR.Hdr/Dtl Validation Pass U = CND.Yes
 PAR.Hdr_Dtl_Validation_Pass_U = 'Y';

 //?** Process each valid record.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Hdr/Dtl Validation Pass U = CND.No
 PAR.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 EXECUTE FUNCTION(RTV Validate Blck Or Dtl) TYPE(RTVOBJ) FILE(PUC3CPP)           AC2217056;
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(LCL.Requested_Ship_Date);
 PARAMETER(DB1.OHE_Spot_Buy);
 PARAMETER(DB1.Country_Code);
 PARAMETER(LCL.Hdr_Dtl_Validation_Pass_U);
 PARAMETER(LCL.Palletize);
 PARAMETER(LCL.Slip_Sheet);
 PARAMETER(LCL.Affect_Inventory_Default);
 PARAMETER(LCL.Affect_Sales_Doll_Default);
 PARAMETER(LCL.Affect_Sales_Pnds_Default);
 {
  //?USER: Initialize routine

  //?** Comments
  DO;

  //?** WI546 10/01/23
  //?In this routine we will process each detail record in the Work
  //?File.  Each record will be checked for a number of possible error
  //?conditions.  If an error is found, we will add a record to the
  //?Error Work File.  If no errors are found, we will write a
  //?record to the Order Detail file in Qtemp.
  ENDDO;

  // PAR.Hdr/Dtl Validation Pass U = CND.Yes
  PAR.Hdr_Dtl_Validation_Pass_U = 'Y';

  //?USER: Process Data record

  // Call program Rtv f/Copy Orders TemplXF.
  CALL PROGRAM(Rtv f/Copy Orders TemplXF) ('PUX7XFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Order_Desc_Line_One);
  PARAMETER(LCL.Order_Desc_Line_Two);
  PARAMETER(LCL.U_M_Ordered);
  PARAMETER(LCL.U_M_Base_Price);
  PARAMETER(LCL.Unit_Weight_Ordered_U_M);
  PARAMETER(LCL.Item_Level);
  PARAMETER(LCL.Production_Date_Control);
  PARAMETER(LCL.Catch_Weight_Status);
  PARAMETER(LCL.Item_Structure_Class_Code);
  PARAMETER(LCL.Item_Structure_Group_Code);
  PARAMETER(LCL.Item_Structure_Type_Code);
  PARAMETER(NLL.Default_Commod_Mark_basis);
  PARAMETER(NLL.Transportation_Temp);
  PARAMETER(LCL.Item_Type_Code);
  PARAMETER(NLL.Commodity_Price_Group);
  PARAMETER(NLL.Default_Warehouse);
  PARAMETER(NLL.Price_Method_Default);
  PARAMETER(NLL.Fresh_Chilling_Time);
  PARAMETER(LCL.Variety_Rendered_Cut);
  PARAMETER(LCL.OD_Item_Target_Price);
  PARAMETER(LCL.Sold_100_Percent_Frozen);
  PARAMETER(LCL.Error_Status);

  CASE;

  // IF LCL.Error Status is yes
  IF LCL.Error_Status = 'Y';

  // LCL.BOE Error Comment = CONCAT(CON.Invalid Item Code,CON.*BLANK,CON.*ZERO)
  LCL.BOE_Error_Comment = 'Invalid Item Code' + *BLANK (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('INVITM');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Call program Rtv Item Def/TFExp/CO XF.
  CALL PROGRAM(Rtv Item Def/TFExp/CO XF) ('PNNCXFR');
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.TF_Co_Ownership_Sts);
  PARAMETER(LCL.Ord_TF_Exempt_Code);

  // Call program Rtv First Consumed Itm XF.
  CALL PROGRAM(Rtv First Consumed Itm XF) ('POP1XFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Consumed_Item_Code);

  // Call program Val Manual Price      XF.
  CALL PROGRAM(Val Manual Price      XF) ('POA5XFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(NLL.Description_Line_One);
  PARAMETER(LCL.Default_Commod_Mark_basis);
  PARAMETER(LCL.Market_Overage);
  PARAMETER(NLL.Standard_Overage_Underage);
  PARAMETER(LCL.Commodity_Price_Group);
  PARAMETER(NLL.Std_Weight_Head_Var_Ren);
  PARAMETER(LCL.Primal_Group_Code);

  // Call program Rtv Cust Tf Exempt    XF.
  CALL PROGRAM(Rtv Cust Tf Exempt    XF) ('PPSMXFR');
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(LCL.Customer_TF_Exempt_Code);

  EXECUTE FUNCTION(Set/Val OH TF Exempt2 IF) TYPE(EXCINTFUN)                      AC2217071;
  PARAMETER(LCL.OH_TF_Exempt_Code);
  PARAMETER(LCL.Ord_TF_Exempt_Code);
  PARAMETER(LCL.Item_Code);
  PARAMETER(LCL.Error_Status);
  PARAMETER(LCL.Customer_TF_Exempt_Code);
  PARAMETER(LCL.TF_Co_Ownership_Sts);
  PARAMETER(LCL.OH_TF_Exempt_Error_Cde_U);
  {
   //?Execute internal function

   // PAR.OH TF Exempt Error Cde U = CND.Not Entered
   PAR.OH_TF_Exempt_Error_Cde_U = *BLANK;

   //?Set / Validate TF Exempt code values              RMC 8/24/05
   CASE;

   // IF PAR.OH TF Exempt Code is Blank
   IF PAR.OH_TF_Exempt_Code = *BLANK;

   //?VAL: Customer Exempt Code  w/Item Exempt Code
   CASE;

   // IF PAR.Customer TF Exempt Code is Not Exempt
   IF PAR.Customer_TF_Exempt_Code = 'NE';

   //?VAL: Item Exempt Code
   CASE;

   // IF PAR.Ord TF Exempt Code is Item Codes
   IF PAR.Ord_TF_Exempt_Code = 'EP'/'NE';

   // PAR.OH TF Exempt Code = PAR.Ord TF Exempt Code
   PAR.OH_TF_Exempt_Code = PAR.Ord_TF_Exempt_Code;

   ENDIF;

   //?VAL: Customer Exempt Code  w/Item Exempt Code
   // IF PAR.Customer TF Exempt Code is Exempt Customer
   IF PAR.Customer_TF_Exempt_Code = 'EC';

   // PAR.OH TF Exempt Code = PAR.Customer TF Exempt Code
   PAR.OH_TF_Exempt_Code = PAR.Customer_TF_Exempt_Code;

   //?VAL: Item Exempt Code
   CASE;

   // IF PAR.Ord TF Exempt Code is Not Exempt
   IF PAR.Ord_TF_Exempt_Code = 'NE';

   CASE;

   // IF PAR.TF Co-Ownership Sts is Co-Owned
   IF PAR.TF_Co_Ownership_Sts = 'S'/'T';

   //?E00505-Prevent Co-Owned Item to be sold to Exempt Customers.
   // PAR.OH TF Exempt Error Cde U = CND.TF Exempt-Item & Cust
   PAR.OH_TF_Exempt_Error_Cde_U = 'TFEXE1';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Ord TF Exempt Code = CND.Exempt Customer
   PAR.Ord_TF_Exempt_Code = 'EC';

   ENDIF;

   //?VAL: Item Exempt Code
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Ord TF Exempt Code = CND.Exempt Product
   PAR.Ord_TF_Exempt_Code = 'EP';

   ENDIF;

   ENDIF;

   //?Set / Validate TF Exempt code values              RMC 8/24/05
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Validate after 1 line item has been entered
   //?If not Pre-Commencement, set exempt code
   CASE;

   // IF PAR.OH TF Exempt Code is Not Pre-Commencement
   IF PAR.OH_TF_Exempt_Code = 'EC'/'EP'/'NE';

   //?VAL: Customer Exempt Code w/Item Exempt Code
   CASE;

   // IF PAR.Customer TF Exempt Code is Not Exempt
   IF PAR.Customer_TF_Exempt_Code = 'NE';

   //?Line item must eq whats in the header, else Error
   CASE;

   // IF PAR.OH TF Exempt Code NE PAR.Ord TF Exempt Code
   IF PAR.OH_TF_Exempt_Code <> PAR.Ord_TF_Exempt_Code;

   // PAR.OH TF Exempt Error Cde U = CND.Tf Exempt - mix error
   PAR.OH_TF_Exempt_Error_Cde_U = 'TFEXE2';

   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   ENDIF;

   //?VAL: Customer Exempt Code w/Item Exempt Code
   // IF PAR.Customer TF Exempt Code is Exempt Customer
   IF PAR.Customer_TF_Exempt_Code = 'EC';

   //?VAL: Item Exempt Code
   CASE;

   // IF PAR.Ord TF Exempt Code is Not Exempt
   IF PAR.Ord_TF_Exempt_Code = 'NE';

   CASE;

   // IF PAR.TF Co-Ownership Sts is Co-Owned
   IF PAR.TF_Co_Ownership_Sts = 'S'/'T';

   //?E00505-Prevent Co-Owned Item to be sold to Exempt Customers.
   // PAR.OH TF Exempt Error Cde U = CND.TF Exempt-Item & Cust
   PAR.OH_TF_Exempt_Error_Cde_U = 'TFEXE1';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Ord TF Exempt Code = CND.Exempt Customer
   PAR.Ord_TF_Exempt_Code = 'EC';

   ENDIF;

   //?VAL: Item Exempt Code
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Ord TF Exempt Code = CND.Exempt Product
   PAR.Ord_TF_Exempt_Code = 'EP';

   ENDIF;

   ENDIF;

   //?If not Pre-Commencement, set exempt code
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Ord TF Exempt Code = CND.Pre Commencement
   PAR.Ord_TF_Exempt_Code = 'PC';

   ENDIF;

   ENDIF;

  }

  //?** WI546_2-Validate OH TF Exempt Code
  CASE;

  // IF LCL.OH TF Exempt Error Cde U is NE *Blank
  IF LCL.OH_TF_Exempt_Error_Cde_U <> *BLANK;

  CASE;

  // IF LCL.OH TF Exempt Error Cde U is TF Exempt-Item & Cust
  IF LCL.OH_TF_Exempt_Error_Cde_U = 'TFEXE1';

  // LCL.BOE Error Comment = CONCAT(CON.Error-Item Must be Non Co,CON.-Owned for Exempt Cust,CON.*ZE
  LCL.BOE_Error_Comment = 'Error-Item Must be Non Co' + '-Owned for Exempt Cust' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('TFEXE1');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  // IF LCL.OH TF Exempt Error Cde U is Tf Exempt - mix error
  IF LCL.OH_TF_Exempt_Error_Cde_U = 'TFEXE2';

  // LCL.BOE Error Comment = CONCAT(CON.TF Exempt Error-Can't mix,CON. exempt/non-exempt items,CON.*
  LCL.BOE_Error_Comment = 'TF Exempt Error-Can't mix' + ' exempt/non-exempt items' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('TFEXE2');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  ENDIF;

  ENDIF;

  // Call program VAL Item Level Exists  XF.
  CALL PROGRAM(VAL Item Level Exists  XF) ('PNH3XFR');
  PARAMETER(LCL.Item_Level);

  //?** Item code not found
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?** Item code not found
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.BOE Error Comment = CONCAT(CON.Item Level not Found,CON.*BLANK,CON.*ZERO)
  LCL.BOE_Error_Comment = 'Item Level not Found' + *BLANK (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('ITMLVL');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  ENDIF;

  //?** Not Finished Goods
  CASE;

  // IF NOT LCL.Item Type Code is Finished Good
  IF ! LCL.Item_Type_Code = 'FG';

  // LCL.BOE Error Comment = CONCAT(CON.Ordered Items Must be Fin,CON.ished Goods,CON.*ZERO)
  LCL.BOE_Error_Comment = 'Ordered Items Must be Fin' + 'ished Goods' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('ITMTYP');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  ENDIF;

  //?** Warehouse type=Fresh & Sold 100%=Frozen
  CASE;

  // IF LCL.Warehouse Type is Fresh
  IF LCL.Warehouse_Type = 'FR';

  // AND LCL.Sold 100 Percent Frozen is yes
  AND LCL.Sold_100_Percent_Frozen = 'Y';

  // LCL.BOE Error Comment = CONCAT(CON.Item Invalid. Sold 100% F,CON.rozen,CON.*ZERO)
  LCL.BOE_Error_Comment = 'Item Invalid. Sold 100% F' + 'rozen' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('100FRZ');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  ENDIF;

  //?** Rendered & Regular Load Type
  CASE;

  // IF LCL.Variety_Rendered_Cut is Rendered
  IF LCL.Variety_Rendered_Cut = 'R';

  // AND LCL.Load Type is Regular
  AND LCL.Load_Type = 'R';

  // LCL.BOE Error Comment = CONCAT(CON.Bulk Items cannot be on R,CON.egular Order Type,CON.*ZERO)
  LCL.BOE_Error_Comment = 'Bulk Items cannot be on R' + 'egular Order Type' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('BLKITM');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  ENDIF;

  //?** Rendered & Bulk Load Type
  CASE;

  // IF LCL.Variety_Rendered_Cut is Rendered
  IF LCL.Variety_Rendered_Cut = 'R';

  // AND LCL.Load Type is Bulk
  AND LCL.Load_Type = 'B';

  // LCL.BOE Error Comment = CONCAT(CON.Only Bulk Items can be on,CON. a Bulk Order Load Type,CON.*Z
  LCL.BOE_Error_Comment = 'Only Bulk Items can be on' + ' a Bulk Order Load Type' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('BLKORD');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  ENDIF;

  // Call program Rtv Plan Prod Sts     XF.
  CALL PROGRAM(Rtv Plan Prod Sts     XF) ('PNHKXFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Plan_Production_Sts);

  // Call program Val ItmBal.Unit Cst    XF.
  CALL PROGRAM(Val ItmBal.Unit Cst    XF) ('PDMCXFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Unit_Cost_Per_Pound);
  PARAMETER(LCL.Error_Status);

  //?** Unit Cost for Warehouse
  CASE;

  // IF LCL.Unit Cost Per Pound is equal to zero
  IF LCL.Unit_Cost_Per_Pound = *ZERO;

  // LCL.BOE Error Comment = CONCAT(CON.Unit Cost for Warehouse c,CON.annot be 0,CON.*ZERO)
  LCL.BOE_Error_Comment = 'Unit Cost for Warehouse c' + 'annot be 0' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('UNTCST');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  ENDIF;

  //?** Item Balance not found
  CASE;

  // IF LCL.Error Status is yes
  IF LCL.Error_Status = 'Y';

  // LCL.BOE Error Comment = CONCAT(CON.Item Balance not found.,CON.*BLANK,CON.*ZERO)
  LCL.BOE_Error_Comment = 'Item Balance not found.' + *BLANK (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('ITMBAL');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  ENDIF;

  EXECUTE FUNCTION(Val Age Information2  IF) TYPE(EXCINTFUN)                      AC2217146;
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Requested_Ship_Date);
  PARAMETER(PAR.Requested_Ship_Date);
  PARAMETER(DB1.Item_Age_Days);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Production_AgeDte_Fr);
  PARAMETER(LCL.Production_AgeDte_To);
  PARAMETER(LCL.Error_Status);
  PARAMETER(LCL.Company_Organization);
  PARAMETER('V');
  PARAMETER(PAR.Error_Reason_Descript_1);
  PARAMETER(PAR.Error_Reason_Descript_2);
  PARAMETER(PAR.Error_Reason_Descript_3);
  PARAMETER(PAR.Error_Reason_Descript_4);
  PARAMETER(PAR.Error_Reason_Descript_5);
  PARAMETER(PAR.Error_Reason_Descript_6);
  PARAMETER(PAR.Error_Reason_Descript_7);
  {
   //?Execute internal function

   // PAR.Error Reason Descript 1 = CON.*BLANK
   PAR.Error_Reason_Descript_1 = *BLANK;

   // PAR.Error Reason Descript 2 = CON.*BLANK
   PAR.Error_Reason_Descript_2 = *BLANK;

   // PAR.Error Reason Descript 3 = CON.*BLANK
   PAR.Error_Reason_Descript_3 = *BLANK;

   // PAR.Error Reason Descript 4 = CON.*BLANK
   PAR.Error_Reason_Descript_4 = *BLANK;

   // PAR.Error Reason Descript 5 = CON.*BLANK
   PAR.Error_Reason_Descript_5 = *BLANK;

   // WRK.Error Flag            USR = CND.Blank
   WRK.Error_Flag_USR = *BLANK;

   // PAR.Error Status = CND.blank
   PAR.Error_Status = *BLANK;

   // WRK.Error Reason Descript 1 = CON.*BLANK
   WRK.Error_Reason_Descript_1 = *BLANK;

   // WRK.Error Reason Descript 2 = CON.*BLANK
   WRK.Error_Reason_Descript_2 = *BLANK;

   // WRK.Error Reason Descript 3 = CON.*BLANK
   WRK.Error_Reason_Descript_3 = *BLANK;

   // WRK.Error Reason Descript 4 = CON.*BLANK
   WRK.Error_Reason_Descript_4 = *BLANK;

   // WRK.Error Reason Descript 5 = CON.*BLANK
   WRK.Error_Reason_Descript_5 = *BLANK;

   CASE;

   // IF PAR.Company Organization is Seaboard
   IF PAR.Company_Organization = 'S';

   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // Call program Val Age information   XF.
   CALL PROGRAM(Val Age information   XF) ('PNQNXFR');
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(WRK.Error_Flag_USR);
   PARAMETER(WRK.Error_Reason_Descript_1);
   PARAMETER(WRK.Error_Reason_Descript_2);
   PARAMETER(WRK.Error_Reason_Descript_3);
   PARAMETER(WRK.Error_Reason_Descript_4);
   PARAMETER(WRK.Error_Reason_Descript_5);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Requested_Delivery_Date);
   PARAMETER(PAR.Item_Age_Days);
   PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
   PARAMETER(PAR.Production_Ovr_AgeDte_To);
   PARAMETER(PAR.Production_AgeDte_Fr);
   PARAMETER(PAR.Production_AgeDte_To);

   //?Verify if message should be sent if validation is required
   CASE;

   // IF WRK.Error Flag            USR is Yes
   IF WRK.Error_Flag_USR = 'Y';

   // AND PAR.Production Dates Sts Usr is Validation routine
   AND PAR.Production_Dates_Sts_Usr = 'V';

   //?message 1 Product is shipped before product is made
   CASE;

   // IF WRK.Error Reason Descript 1 NE WRK.Blank for 30          USR
   IF WRK.Error_Reason_Descript_1 <> WRK.Blank_for_30_USR;

   // PAR.Error Reason Descript 1 = WRK.Error Reason Descript 1
   PAR.Error_Reason_Descript_1 = WRK.Error_Reason_Descript_1;

   ENDIF;

   //?message 2 Either Days or override date but not both
   CASE;

   // IF WRK.Error Reason Descript 2 NE WRK.Blank for 30          USR
   IF WRK.Error_Reason_Descript_2 <> WRK.Blank_for_30_USR;

   // PAR.Error Reason Descript 2 = WRK.Error Reason Descript 2
   PAR.Error_Reason_Descript_2 = WRK.Error_Reason_Descript_2;

   ENDIF;

   //?message 3 With Chill Days Either Days or Override Dates required
   CASE;

   // IF WRK.Error Reason Descript 3 NE WRK.Blank for 30          USR
   IF WRK.Error_Reason_Descript_3 <> WRK.Blank_for_30_USR;

   // PAR.Error Reason Descript 3 = WRK.Error Reason Descript 3
   PAR.Error_Reason_Descript_3 = WRK.Error_Reason_Descript_3;

   ENDIF;

   //?message 4 From date is > then SHIP DATE
   CASE;

   // IF WRK.Error Reason Descript 4 NE WRK.Blank for 30          USR
   IF WRK.Error_Reason_Descript_4 <> WRK.Blank_for_30_USR;

   // PAR.Error Reason Descript 4 = WRK.Error Reason Descript 4
   PAR.Error_Reason_Descript_4 = WRK.Error_Reason_Descript_4;

   ENDIF;

   //?message 5 To date is > then SHIP DATE
   CASE;

   // IF WRK.Error Reason Descript 5 NE WRK.Blank for 30          USR
   IF WRK.Error_Reason_Descript_5 <> WRK.Blank_for_30_USR;

   // PAR.Error Reason Descript 5 = WRK.Error Reason Descript 5
   PAR.Error_Reason_Descript_5 = WRK.Error_Reason_Descript_5;

   ENDIF;

   CASE;

   // IF PAR.Production Ovr AgeDte Fr is not entered
   IF PAR.Production_Ovr_AgeDte_Fr = *ZERO;

   //?** These are coming in as *ZERO in the parms. So no error.
   // WRK.Error Flag            USR = CND.No
   WRK.Error_Flag_USR = 'N';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Error Reason Descript 7 = CON.Inv Prod Ovr Age Fr/To Dt
   PAR.Error_Reason_Descript_7 = 'Inv Prod Ovr Age Fr/To Dt';

   // WRK.Error Flag            USR = CND.No
   WRK.Error_Flag_USR = 'N';

   ENDIF;

   CASE;

   // IF WRK.Error Flag            USR is Yes
   IF WRK.Error_Flag_USR = 'Y';

   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

  }

  //?** Error Reason Descr 1
  CASE;

  // IF PAR.Error Reason Descript 1 is Not Blank
  IF PAR.Error_Reason_Descript_1 <> *BLANK;

  // LCL.BOE Error Comment = CONCAT(CON.Production Date is Invali,CON.d for Requested Ship Date,CON.
  LCL.BOE_Error_Comment = 'Production Date is Invali' + 'd for Requested Ship Date' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('OVAGD1');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  ENDIF;

  //?** Error Reason Descr 2
  CASE;

  // IF PAR.Error Reason Descript 2 is Not Blank
  IF PAR.Error_Reason_Descript_2 <> *BLANK;

  // LCL.BOE Error Comment = CONCAT(CON.Enter Age Days or Product,CON.ion Override Age Frm/To,CON.*Z
  LCL.BOE_Error_Comment = 'Enter Age Days or Product' + 'ion Override Age Frm/To' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('OVAGD2');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  ENDIF;

  //?** Error Reason Descr 3
  CASE;

  // IF PAR.Error Reason Descript 3 is Not Blank
  IF PAR.Error_Reason_Descript_3 <> *BLANK;

  // LCL.BOE Error Comment = CONCAT(CON.Override Dates after Ship,CON.ped Date.,CON.*ZERO)
  LCL.BOE_Error_Comment = 'Override Dates after Ship' + 'ped Date.' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('OVAGD3');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  ENDIF;

  //?** Error Reason Descr 4
  CASE;

  // IF PAR.Error Reason Descript 4 is Not Blank
  IF PAR.Error_Reason_Descript_4 <> *BLANK;

  // LCL.BOE Error Comment = CONCAT(CON.Override Dates after Ship,CON.ped Date.,CON.*ZERO)
  LCL.BOE_Error_Comment = 'Override Dates after Ship' + 'ped Date.' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('OVAGD3');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  ENDIF;

  //?** Error Reason Descr 5
  CASE;

  // IF PAR.Error Reason Descript 5 is Not Blank
  IF PAR.Error_Reason_Descript_5 <> *BLANK;

  // LCL.BOE Error Comment = CONCAT(CON.Override Dates after Ship,CON.ped Date.,CON.*ZERO)
  LCL.BOE_Error_Comment = 'Override Dates after Ship' + 'ped Date.' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('OVAGD3');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  ENDIF;

  //?** Error Reason Descr 6
  CASE;

  // IF PAR.Error Reason Descript 6 is Not Blank
  IF PAR.Error_Reason_Descript_6 <> *BLANK;

  // LCL.BOE Error Comment = CONCAT(CON.Invalid Itm Age Days in I,CON.tm Age Info Validation.,CON.*Z
  LCL.BOE_Error_Comment = 'Invalid Itm Age Days in I' + 'tm Age Info Validation.' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('OVAGD6');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  ENDIF;

  //?** Validate Ham group
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Call program RTV for Ord.Detail     XF.
  CALL PROGRAM(RTV for Ord.Detail     XF) ('PDC3XFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(NLL.Description_Line_One);
  PARAMETER(NLL.Description_Line_Two);
  PARAMETER(LCL.U_M_Ordered);
  PARAMETER(NLL.UOM_Pricing);
  PARAMETER(NLL.Unit_Weight);
  PARAMETER(NLL.Item_Level);
  PARAMETER(NLL.Production_Date_Control);
  PARAMETER(NLL.Catch_Weight_Status);
  PARAMETER(NLL.Item_Structure_Class_Code);
  PARAMETER(NLL.Item_Structure_Group_Code);
  PARAMETER(NLL.Item_Structure_Type_Code);
  PARAMETER(NLL.Default_Commod_Mark_basis);
  PARAMETER(NLL.Transportation_Temp);
  PARAMETER(NLL.Item_Type_Code);
  PARAMETER(NLL.Commodity_Price_Group);
  PARAMETER(NLL.Default_Warehouse);
  PARAMETER(NLL.Price_Method_Default);
  PARAMETER(NLL.Fresh_Chilling_Time);
  PARAMETER(NLL.Variety_Rendered_Cut);
  PARAMETER(NLL.Item_Target_Price);
  PARAMETER(NLL.Error_Status);

  CASE;

  // IF LCL.U_M_Ordered is Combos
  IF LCL.U_M_Ordered = 'CB';

  // Call program Val Item              XF.
  CALL PROGRAM(Val Item              XF) ('PMG1XFR');
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Record_Found_USR);

  //?** Ham Group Reqd
  CASE;

  // IF LCL.Record Found USR is Record Found
  IF LCL.Record_Found_USR = 'Y';

  // AND DB1.Ham Group Number is Not Entered
  AND DB1.Ham_Group_Number = *ZERO;

  // LCL.BOE Error Comment = CONCAT(CON.Ham Group is Required for,CON. Item Code.,CON.*ZERO)
  LCL.BOE_Error_Comment = 'Ham Group is Required for' + ' Item Code.' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('HAMGRP');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  //?** Ham Group Reqd
  // IF LCL.Record Found USR is Record Found
  IF LCL.Record_Found_USR = 'Y';

  // AND DB1.Ham Group Number is Entered
  AND DB1.Ham_Group_Number <> *ZERO;

  EXECUTE FUNCTION(Rtv Credit Item Sts   RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1326370;
  PARAMETER(PAR.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Credit_Item_Status);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Credit Item Status is yes
  IF LCL.Credit_Item_Status = 'Y';

  // IF LCL.U_M_Ordered is Not Combos
  IF LCL.U_M_Ordered <> 'CB';

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(VAL Ham Group/Item     RT) TYPE(RTVOBJ) FILE(PDM1REP)          AC1568020;
  PARAMETER(DB1.Ham_Group_Number);
  PARAMETER(DB1.Item_Code);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  //?** Ham / Item error
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?** Ham / Item error
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.BOE Error Comment = CONCAT(CON.Ham Group Item is not fou,CON.nd.,CON.*ZERO)
  LCL.BOE_Error_Comment = 'Ham Group Item is not fou' + 'nd.' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('HAMITM');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  //?** 2 Quantity Ordered
  CASE;

  // IF DB1.Quantity Ordered is Equal to zero
  IF DB1.Quantity_Ordered = *ZERO;

  // LCL.BOE Error Comment = CONCAT(CON.Invalid Quantity Ordered.,CON.*BLANK,CON.*ZERO)
  LCL.BOE_Error_Comment = 'Invalid Quantity Ordered.' + *BLANK (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('QTYORD');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  ENDIF;

  // Call program RTV PrcMthTyp/PrcTyp  XF.
  CALL PROGRAM(RTV PrcMthTyp/PrcTyp  XF) ('PNS7XFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(DB1.Price_Method_Code);
  PARAMETER(LCL.Price_Method_Type);
  PARAMETER(NLL.PMH_Price_Type);

  //?** WI546_2 Use Price Method Code to calc unit price credit.
  // LCL.Price Method Code = DB1.Price Method Code
  LCL.Price_Method_Code = DB1.Price_Method_Code;

  //?** WI546_2 populate Commodity Market Code USR
  CASE;

  // IF LCL.Price Method Code is Manual
  IF LCL.Price_Method_Code = 'MAN';

  // OR LCL.Price Method Code is Deviated Flat Duty Item
  OR LCL.Price_Method_Code = 'DVF';

  // OR LCL.Price Method Code is Deviated Gate Price
  OR LCL.Price_Method_Code = 'DVG';

  // LCL.Commodity Market Code USR = CND.Not Entered
  LCL.Commodity_Market_Code_USR = *BLANK;

  ENDIF;

  //?** 3 Price Method Type
  CASE;

  // IF LCL.Price Method Type is *Blank
  IF LCL.Price_Method_Type = *BLANK;

  // LCL.BOE Error Comment = CONCAT(CON.Invalid Price Method Code,CON.*BLANK,CON.*ZERO)
  LCL.BOE_Error_Comment = 'Invalid Price Method Code' + *BLANK (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('PRCMTH');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  ENDIF;

  //?** 4 Item Age Days
  CASE;

  // IF DB1.Item Age Days is Not Entered
  IF DB1.Item_Age_Days = *ZERO;

  // LCL.BOE Error Comment = CONCAT(CON.Invalid Item Age Days.,CON.*BLANK,CON.*ZERO)
  LCL.BOE_Error_Comment = 'Invalid Item Age Days.' + *BLANK (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('OVAGD6');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  ENDIF;

  //?** 5 OD Price Type
  CASE;

  // IF DB1.OD Price Type is Valid Values
  IF DB1.OD_Price_Type = 'CON'/'FRM'/'NEG'/'HDG'/'DST'/'NHT'/'TNK'/'FLR';

  //?** 5 OD Price Type
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.BOE Error Comment = CONCAT(CON.Invalid OD Price Type.,CON.*BLANK,CON.*ZERO)
  LCL.BOE_Error_Comment = 'Invalid OD Price Type.' + *BLANK (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('PRCTYP');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  ENDIF;

  //?*** Load From and Thru Date for 1 month prior and after today.
  // LCL.From Date             USR = JOB.*Job exec start date + CON.-1 *MONTHS
  LCL.From_Date_USR = DATEINCR(JOB.*Job_exec_start_date '-1' 'MO' 1111111 'NONE' 'N' 1);

  // LCL.Thru Date             USR = JOB.*Job exec start date + CON.1 *MONTHS
  LCL.Thru_Date_USR = DATEINCR(JOB.*Job_exec_start_date 1 'MO' 1111111 'NONE' 'N' 1);

  //?** WI546_2-Validate Date format is CYMD for Market Pricing Date
  CASE;

  // IF DB1.Market Pricing Date is NE Zero
  IF DB1.Market_Pricing_Date <> *ZERO;

  // LCL.Text usr 11 = CND.Not Entered
  LCL.Text_usr_11 = *BLANK;

  // LCL.Date From Convert USR = CVTVAR(DB1.Market Pricing Date)
  LCL.Date_From_Convert_USR = CVTVAR(DB1.Market_Pricing_Date);

  // Call program Cvt Date              UP.
  CALL PROGRAM(Cvt Date              UP) ('POD5UPR');
  PARAMETER(LCL.Date_From_Convert_USR);
  PARAMETER(LCL.Text_usr_11);
  PARAMETER(*CYMD);
  PARAMETER(*YYMD);
  PARAMETER(*NONE);

  CASE;

  // IF LCL.Text usr 11 is Not Entered
  IF LCL.Text_usr_11 = *BLANK;

  // LCL.BOE Error Comment = CONCAT(CON.Invalid Market Pricing Da,CON.te Format.,CON.*ZERO)
  LCL.BOE_Error_Comment = 'Invalid Market Pricing Da' + 'te Format.' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER('MKTPDT');
  PARAMETER(LCL.BOE_Error_Comment);

  // LCL.Hdr/Dtl Validation Pass U = CND.No
  LCL.Hdr_Dtl_Validation_Pass_U = 'N';

  ENDIF;

  ENDIF;

  //?** 7 OC MPR Prc Ready to Send
  CASE;

  // IF DB1.OD MPR Prc Ready to Send is MPR Ready Sts
  IF DB1.OD_MPR_Prc_Ready_to_Send = *BLANK/'X'/'N'/'Y';

  //?** 7 OC MPR Prc Ready to Send
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.BOE Error Comment = CONCAT(CON.Invalid MPR Ready Status.,CON.*BLANK,CON.*ZERO)
  LCL.BOE_Error_Comment = 'Invalid MPR Ready Status.' + *BLANK (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('MPRRDY');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  ENDIF;

  //?** 8 Price Overage Override
  CASE;

  // IF DB1.OD MPR Prc Ready to Send is yes
  IF DB1.OD_MPR_Prc_Ready_to_Send = 'Y';

  // AND DB1.Price Overage Override is LE .0100
  AND DB1.Price_Overage_Override <= .0100;

  // LCL.BOE Error Comment = CONCAT(CON.Cannot send to MPR with p,CON.rice <=.01,CON.*ZERO)
  LCL.BOE_Error_Comment = 'Cannot send to MPR with p' + 'rice <=.01' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('PRCOVR');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  ENDIF;

  //?** Consider Palletize from WF Detail or Header
  CASE;

  // IF DB1.Palletize is Y/N Values
  IF DB1.Palletize = 'N'/'Y';

  // LCL.Palletize = DB1.Palletize
  LCL.Palletize = DB1.Palletize;

  //?** Consider Palletize from WF Detail or Header
  // IF LCL.Palletize is blank
  IF LCL.Palletize = *BLANK;

  // LCL.Palletize = PAR.Palletize
  LCL.Palletize = PAR.Palletize;

  ENDIF;

  //?** WI546_2 Populate OD Pallet Type Based on Palletize
  CASE;

  // IF DB1.OD Pallet Type is Valid Values
  IF DB1.OD_Pallet_Type = '01'/'02'/'CH'/'HT'/'04'/'03';

  // AND LCL.Palletize is yes
  AND LCL.Palletize = 'Y';

  // LCL.OD Pallet Type = DB1.OD Pallet Type
  LCL.OD_Pallet_Type = DB1.OD_Pallet_Type;

  //?** WI546_2 Populate OD Pallet Type Based on Palletize
  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF LCL.Palletize is yes
  IF LCL.Palletize = 'Y';

  EXECUTE FUNCTION(Rtv All) TYPE(RTVOBJ) FILE(PUAAREP)                            AC2149720;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(NLL.M3_Supplier_ID);
  PARAMETER(NLL.Dft_Mode_of_Transportaton);
  PARAMETER(NLL.Buying_Group);
  PARAMETER(NLL.Buying_Group_Opt_In_Out);
  PARAMETER(NLL.Ship_To_Establishment_nbr);
  PARAMETER(LCL.OD_Pallet_Type);
  PARAMETER(NLL.Cust_Dft_Price_Type);
  PARAMETER(NLL.Cust_Dft_Age_Days);
  PARAMETER(NLL.Cust_Dft_Delivery_Time);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.OD Pallet Type = CND.None
  LCL.OD_Pallet_Type = *BLANK;

  ENDIF;

  ENDIF;

  //?** Slip sheet
  CASE;

  // IF DB1.Slip Sheet is Not Blank
  IF DB1.Slip_Sheet = 'N'/'Y';

  // LCL.Slip Sheet = DB1.Slip Sheet
  LCL.Slip_Sheet = DB1.Slip_Sheet;

  //?** Slip sheet
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Slip Sheet = PAR.Slip Sheet
  LCL.Slip_Sheet = PAR.Slip_Sheet;

  ENDIF;

  //?** Write Detail to Ord Detail in Qtemp if validation passed.
  CASE;

  // IF PAR.Hdr/Dtl Validation Pass U is Yes
  IF PAR.Hdr_Dtl_Validation_Pass_U = 'Y';

  EXECUTE FUNCTION(RTV All fields) TYPE(RTVOBJ) FILE(CAEOREP)                     AC1478596;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(NLL.Terms_Code);
  PARAMETER(NLL.Sales_Route_Code);
  PARAMETER(NLL.Special_Instructions_2);
  PARAMETER(NLL.Special_Instructions);
  PARAMETER(NLL.Carrier_Code);
  PARAMETER(NLL.Broker);
  PARAMETER(NLL.P_O_Required_Flag);
  PARAMETER(NLL.Deliver_after_time);
  PARAMETER(NLL.Deliver_before_time);
  PARAMETER(NLL.Alt_Remittance_Flag);
  PARAMETER(NLL.Type_Code);
  PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
  PARAMETER(NLL.Mileage_To_Customer);
  PARAMETER(NLL.Co_Cust_Overage_Rate_CWT);
  PARAMETER(NLL.Age_Code);
  PARAMETER(NLL.Warehouse_Code);
  PARAMETER(NLL.Outside_Warehouse_Flag);
  PARAMETER(NLL.Customer_Group_Code);
  PARAMETER(NLL.Customer_Group_Code_2);
  PARAMETER(NLL.G_L_Code);
  PARAMETER(LCL.Commodity_Market_Code);
  PARAMETER(NLL.Credit_Contact_Name);
  PARAMETER(NLL.Credit_Contact_Telephone);
  PARAMETER(NLL.Credit_Contact_Bus_Title);
  PARAMETER(NLL.Credit_Contact_Fax_Number);
  PARAMETER(NLL.Allow_Man_Qt_WO_Approval);
  PARAMETER(NLL.Fax_Invoice_Flag);
  PARAMETER(NLL.Fax_Invoice_Fax_Number);
  PARAMETER(NLL.Fax_Invoice_Contact_Name);
  PARAMETER(NLL.Distributor);
  PARAMETER(NLL.Default_Shipping_Co_Sts);
  PARAMETER(NLL.Ord_Ent_Default_Sls_Rte);
  PARAMETER(NLL.Bypass_DDt_Delay_w_Invcng);
  PARAMETER(NLL.EDI_Status_1);
  PARAMETER(NLL.EDI_Status_2);
  PARAMETER(NLL.EDI_Status_3);
  PARAMETER(NLL.Record_Status);
  PARAMETER(NLL.Job_Time);
  PARAMETER(NLL.User_Id);
  PARAMETER(NLL.Job_Name);
  PARAMETER(NLL.Job_Date);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   // PGM.*Return code = CND.*Record already exists
   PGM.*Return_code = 'Y2U0003';

   MOVE *ALL (To: PAR From: DB1);

  }

  //?** WI546_2 Overwrite Commodity Market Code
  CASE;

  // IF LCL.Price Method Code is Manual
  IF LCL.Price_Method_Code = 'MAN';

  // OR LCL.Price Method Code is Deviated Flat Duty Item
  OR LCL.Price_Method_Code = 'DVF';

  // OR LCL.Price Method Code is Deviated Gate Price
  OR LCL.Price_Method_Code = 'DVG';

  // LCL.Commodity Market Code = LCL.Commodity Market Code USR
  LCL.Commodity_Market_Code = LCL.Commodity_Market_Code_USR;

  ENDIF;

  // Call program Crt Block Order Qtemp XF.
  CALL PROGRAM(Crt Block Order Qtemp XF) ('PUZ7XFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(9999999);
  PARAMETER(DB1.Sequence_Number);
  PARAMETER(1);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(*ZERO);
  PARAMETER('E');
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(DB1.Market_Pricing_Date);
  PARAMETER(LCL.Commodity_Market_Code);
  PARAMETER(*BLANK);
  PARAMETER(DB1.Price_Method_Code);
  PARAMETER(DB1.Price_Overage_Override);
  PARAMETER(*ZERO);
  PARAMETER('U');
  PARAMETER(*ZERO);
  PARAMETER(LCL.U_M_Base_Price);
  PARAMETER(LCL.U_M_Ordered);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(LCL.OD_Production_Plan_Sts);
  PARAMETER(LCL.Order_Desc_Line_One);
  PARAMETER(LCL.Order_Desc_Line_Two);
  PARAMETER(*BLANK);
  PARAMETER(LCL.Palletize);
  PARAMETER(LCL.Slip_Sheet);
  PARAMETER(LCL.Catch_Weight_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(LCL.Production_Date_Control);
  PARAMETER(*ZERO);
  PARAMETER(DB1.Quantity_Ordered);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Unit_Cost_Per_Pound);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Unit_Weight_Ordered_U_M);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Requested_Ship_Date);
  PARAMETER(PAR.Requested_Ship_Date);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Affect_Inventory_Default);
  PARAMETER(PAR.Affect_Sales_Doll_Default);
  PARAMETER(PAR.Affect_Sales_Pnds_Default);
  PARAMETER(LCL.Item_Structure_Type_Code);
  PARAMETER(LCL.Item_Structure_Group_Code);
  PARAMETER(LCL.Item_Structure_Class_Code);
  PARAMETER(LCL.Item_Level);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(JOB.*Job_exec_start_date);
  PARAMETER('INFORMATIC');
  PARAMETER(PAR.Country_Code);
  PARAMETER('01');
  PARAMETER(*BLANK);
  PARAMETER(LCL.Sales_Route_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.Ham_Group_Number);
  PARAMETER(*BLANK);
  PARAMETER('Y');
  PARAMETER('Y');
  PARAMETER('Y');
  PARAMETER(*BLANK);
  PARAMETER(LCL.Ord_TF_Exempt_Code);
  PARAMETER(LCL.OD_Pallet_Type);
  PARAMETER(LCL.Production_Warehouse);
  PARAMETER(DB1.OD_Price_Type);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Consumed_Item_Code);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.OD_Item_Target_Price);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(DB1.OD_MPR_Prc_Ready_to_Send);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(DB1.Item_Age_Days);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.OHE_Spot_Buy);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);

  // LCL.Billing Activity Type = CND.Invoice
  LCL.Billing_Activity_Type = 1;

  EXECUTE FUNCTION(Edt OD Pricing Validt2 IF) TYPE(EXCINTFUN)                     AC2217400;
  PARAMETER(PAR.Company_Number);
  PARAMETER(9999999);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Market_Pricing_Date);
  PARAMETER(LCL.Commodity_Market_Code);
  PARAMETER(LCL.Date_Method_Code);
  PARAMETER(LCL.Price_Method_Code);
  PARAMETER(LCL.Price_Overage_Override);
  PARAMETER(LCL.U_M_Base_Price);
  PARAMETER(DB1.Quantity_Ordered);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Unit_Price_Credit);
  PARAMETER(LCL.Unit_Weight_Ordered_U_M);
  PARAMETER(PAR.Requested_Ship_Date);
  PARAMETER(*ZERO);
  PARAMETER(LCL.OD_Ceiling_Price);
  PARAMETER(LCL.OD_Market_Begin_Date);
  PARAMETER(LCL.OD_Market_Ending_Date);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(LCL.Type_Code);
  PARAMETER(LCL.Default_Commod_Mark_basis);
  PARAMETER(LCL.Market_Overage);
  PARAMETER(LCL.Commodity_Price_Group);
  PARAMETER(LCL.Primal_Group_Code);
  PARAMETER(LCL.Absorbed_Freight_Rate_CWT);
  PARAMETER(LCL.Billing_Activity_Type);
  PARAMETER(LCL.USR_Display_4);
  PARAMETER(LCL.Pricing_Valid_Error_Cde_U);
  PARAMETER(LCL.Error_Status);
  {
   //?Execute internal function

   // PAR.Pricing Valid Error Cde U = CON.*BLANK
   PAR.Pricing_Valid_Error_Cde_U = *BLANK;

   // PAR.Unit Price - Credit = CON.*ZERO
   PAR.Unit_Price_Credit = *ZERO;

   // Call program RTV PrcMthTyp/PrcTyp  XF.
   CALL PROGRAM(RTV PrcMthTyp/PrcTyp  XF) ('PNS7XFR');
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Price_Method_Code);
   PARAMETER(LCL.Price_Method_Type);
   PARAMETER(LCL.PMH_Price_Type);

   // Call program Rtv Market Dtls OrEnt XF.
   CALL PROGRAM(Rtv Market Dtls OrEnt XF) ('PNS1XFR');
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Commodity_Market_Code);
   PARAMETER(LCL.Commodity_Price_Group);
   PARAMETER(LCL.Market_Prem_Ded);
   PARAMETER(LCL.Record_Found_USR);

   // PAR.USR Display 4 = CND.No
   PAR.USR_Display_4 = 'N';

   //?LCL.Commodity Price Group & LCL.Market Overage
   CASE;

   // IF LCL.Record Found USR is Record Found
   IF LCL.Record_Found_USR = 'Y';

   // LCL.Market Overage = LCL.Market Prem/Ded
   LCL.Market_Overage = LCL.Market_Prem_Ded;

   //?LCL.Commodity Price Group & LCL.Market Overage
   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Commodity Price Group = PAR.Commodity Price Group
   LCL.Commodity_Price_Group = PAR.Commodity_Price_Group;

   // LCL.Market Overage = PAR.Market Overage
   LCL.Market_Overage = PAR.Market_Overage;

   ENDIF;

   //?VAL: Price Method Code
   CASE;

   // IF PAR.Price Method Code is Blank
   IF PAR.Price_Method_Code = *BLANK;

   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   // Send error message - 'Value Required.'
   ERROR(USR2808);
   MSGPARM(PAR.Price_Method_Code);

   ENDIF;

   //?VAL: Price Code
   CASE;

   // IF PAR.Price Code is Entered
   IF PAR.Price_Code > *ZERO;

   //?VAL: Price Code
   CASE;

   // IF LCL.Price Method Type is Not Contract
   IF LCL.Price_Method_Type = 'X'/'F'/'M'/'K';

   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error 1
   PAR.Pricing_Valid_Error_Cde_U = 'PRCER1';

   CASE;

   // IF PAR.USR Display 4 is No
   IF PAR.USR_Display_4 = 'N';

   // PAR.USR Display 4 = CND.Yes
   PAR.USR_Display_4 = 'Y';

   ENDIF;

   //?VAL: Price Code
   // IF *OTHERWISE
   IF *OTHERWISE;

   // Call program Rtv Cust Prc Str/End  XF.
   CALL PROGRAM(Rtv Cust Prc Str/End  XF) ('PNTAXFR');
   PARAMETER(PAR.Ship_To_Customer);
   PARAMETER(PAR.Price_Code);
   PARAMETER(LCL.Price_Start_Date);
   PARAMETER(LCL.Price_End_Date);

   CASE;

   // IF LCL.Price Start Date is Not Entered
   IF LCL.Price_Start_Date = *ZERO;

   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error 2
   PAR.Pricing_Valid_Error_Cde_U = 'PRCER2';

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?VAL: Contract Start & End Date
   CASE;

   // IF PAR.Scheduled Ship Date LT LCL.Price Start Date
   IF PAR.Scheduled_Ship_Date < LCL.Price_Start_Date;

   // OR PAR.Scheduled Ship Date GT LCL.Price End Date
   OR PAR.Scheduled_Ship_Date > LCL.Price_End_Date;

   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error 3
   PAR.Pricing_Valid_Error_Cde_U = 'PRCER3';

   ENDIF;

   // Call program Rtv Max Wt and price  XF.
   CALL PROGRAM(Rtv Max Wt and price  XF) ('PNTBXFR');
   PARAMETER(PGM.*Return_code);
   PARAMETER(PAR.Ship_To_Customer);
   PARAMETER(PAR.Price_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.Maximum_Contract_Units);
   PARAMETER(LCL.Customer_Price_UM_Prc);
   PARAMETER(LCL.Commodity_Market_Code_USR);
   PARAMETER(LCL.Price_Method_Code_USR);
   PARAMETER(LCL.Date_Method_Code_USR);
   PARAMETER(LCL.Contract_Unit_Type);

   CASE;

   // IF PGM.*Return code is *Record does not exist
   IF PGM.*Return_code = 'Y2U0005';

   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error 4
   PAR.Pricing_Valid_Error_Cde_U = 'PRCER4';

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Sum weights shipped/ordered for ship to /price code
   EXECUTE FUNCTION(Clc Sum Ship/Ord Unit2 IF) TYPE(EXCINTFUN)                     AC2217407;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Ship_To_Customer);
   PARAMETER(PAR.Commodity_Market_Code);
   PARAMETER(PAR.Date_Method_Code);
   PARAMETER(PAR.Price_Method_Code);
   PARAMETER(PAR.Price_Overage_Override);
   PARAMETER(PAR.U_M_Base_Price);
   PARAMETER(PAR.Quantity_Ordered);
   PARAMETER(PAR.Unit_Weight_Ordered_U_M);
   PARAMETER(PAR.Price_Code);
   PARAMETER(PAR.OD_Ceiling_Price);
   PARAMETER(PAR.Error_Status);
   PARAMETER(LCL.Price_Method_Type);
   PARAMETER(LCL.PMH_Price_Type);
   PARAMETER(LCL.Pricing_Valid_Error_Cde_U);
   {
    //?Execute internal function

    // PAR.Error Status = CND.no
    PAR.Error_Status = 'N';

    // LCL.Weight Ordered = PAR.Quantity Ordered * PAR.Unit Weight Ordered U/M *
    LCL.Weight_Ordered = PAR.Quantity_Ordered * PAR.Unit_Weight_Ordered_U_M;

    // Call program CLC Sum Ship/Ord Unit XF.
    CALL PROGRAM(CLC Sum Ship/Ord Unit XF) ('PPA6XFR');
    PARAMETER(PAR.Ship_To_Customer);
    PARAMETER(PAR.Price_Code);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Total_Weight_Ordered_USR);
    PARAMETER(PAR.Order_Number);
    PARAMETER(PAR.Total_Quantity_Ordered);

    // PAR.Total Weight Ordered USR = PAR.Total Weight Ordered USR + LCL.Weight Ordered
    PAR.Total_Weight_Ordered_USR = PAR.Total_Weight_Ordered_USR + LCL.Weight_Ordered;

    // PAR.Total Quantity Ordered = PAR.Total Quantity Ordered + PAR.Quantity Ordered
    PAR.Total_Quantity_Ordered = PAR.Total_Quantity_Ordered + PAR.Quantity_Ordered;

    //?5/13/10 SAZ P205-Add parm for Max Unit Type;rtv Contract Unit Type
    // Call program Rtv Cust Prc hdr/dtl  XF.
    CALL PROGRAM(Rtv Cust Prc hdr/dtl  XF) ('PPA7XFR');
    PARAMETER(PAR.Ship_To_Customer);
    PARAMETER(PAR.Price_Code);
    PARAMETER(WRK.Price_Start_Date);
    PARAMETER(WRK.Price_End_Date);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Maximum_Contract_Units);
    PARAMETER(PAR.Customer_Price_UM_Prc);
    PARAMETER(PAR.Commodity_Market_Code);
    PARAMETER(LCL.Price_Method_Code);
    PARAMETER(PAR.Date_Method_Code);
    PARAMETER(PAR.Contract_Unit_Type);

    // PAR.Price Method Code = LCL.Price Method Code
    PAR.Price_Method_Code = LCL.Price_Method_Code;

    EXECUTE FUNCTION(RTV PrcMthTyp/PrcTyp  RT) TYPE(RTVOBJ) FILE(PDIHREP)           AC1997170;
    PARAMETER(PAR.Company_Number);
    PARAMETER(LCL.Price_Method_Code);
    PARAMETER(PAR.Price_Method_Type);
    PARAMETER(PAR.PMH_Price_Type);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?5/13/10 SAZ P205-Use Contract Unit Type to check Qty or Weight-Lbs
    //?Use Contract Unit Type to check Qty or Weight-Lbs
    //?VAL: Total Weight and Quantity w/Maximum
    CASE;

    // IF PAR.Contract Unit Type is Weight-LB
    IF PAR.Contract_Unit_Type = 'W';

    CASE;

    // IF PAR.Total Weight Ordered USR GT PAR.Maximum Contract Units
    IF PAR.Total_Weight_Ordered_USR > PAR.Maximum_Contract_Units;

    // PAR.Error Status = CND.yes
    PAR.Error_Status = 'Y';

    // LCL.Weight Allocated USR = PAR.Total Weight Ordered USR - PAR.Maximum Contract Units
    LCL.Weight_Allocated_USR = PAR.Total_Weight_Ordered_USR - PAR.Maximum_Contract_Units;

    // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error T
    PAR.Pricing_Valid_Error_Cde_U = 'PRCERT';

    ENDIF;

    //?VAL: Total Weight and Quantity w/Maximum
    // IF *OTHERWISE
    IF *OTHERWISE;

    //?If Contract Unit type = Quantity
    CASE;

    // IF PAR.Total Quantity Ordered GT PAR.Maximum Contract Units
    IF PAR.Total_Quantity_Ordered > PAR.Maximum_Contract_Units;

    // PAR.Error Status = CND.yes
    PAR.Error_Status = 'Y';

    // LCL.Weight Allocated USR = PAR.Total Quantity Ordered - PAR.Maximum Contract Units
    LCL.Weight_Allocated_USR = PAR.Total_Quantity_Ordered - PAR.Maximum_Contract_Units;

    // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error T
    PAR.Pricing_Valid_Error_Cde_U = 'PRCERT';

    ENDIF;

    ENDIF;

    //?Original code
    //?OUT: No Errors
    CASE;

    // IF PAR.Error Status is no
    IF PAR.Error_Status = 'N';

    // PAR.Price Overage Override = PAR.Customer Price /UM Prc
    PAR.Price_Overage_Override = PAR.Customer_Price_UM_Prc;

    CASE;

    // IF PAR.PMH Price Type is Invoice Price
    IF PAR.PMH_Price_Type = 'I';

    // PAR.Price Overage Override = PAR.Customer Price /UM Prc
    PAR.Price_Overage_Override = PAR.Customer_Price_UM_Prc;

    // PAR.OD Ceiling Price = CON.*ZERO
    PAR.OD_Ceiling_Price = *ZERO;

    // IF PAR.PMH Price Type is Ceiling Price
    IF PAR.PMH_Price_Type = 'C';

    // PAR.Price Overage Override = CON.*ZERO
    PAR.Price_Overage_Override = *ZERO;

    // PAR.OD Ceiling Price = PAR.Customer Price /UM Prc
    PAR.OD_Ceiling_Price = PAR.Customer_Price_UM_Prc;

    ENDIF;

    ENDIF;

   }

   CASE;

   // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error 1
   IF LCL.Pricing_Valid_Error_Cde_U = 'PRCER1';

   // LCL.BOE Error Comment = CONCAT(CON.Price Code must be Zero f,CON.or Price Method Code.,CON.*ZE
   LCL.BOE_Error_Comment = 'Price Code must be Zero f' + 'or Price Method Code.' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(LCL.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('PRCER1');
   PARAMETER(LCL.BOE_Error_Comment);

   // LCL.Hdr/Dtl Validation Pass U = CND.No
   LCL.Hdr_Dtl_Validation_Pass_U = 'N';

   // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error 1
   IF LCL.Pricing_Valid_Error_Cde_U = 'PRCER1';

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

   //?VAL: Price Code
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?VAL: Price Code Required
   CASE;

   // IF LCL.Price Method Type is Contract Pricing
   IF LCL.Price_Method_Type = 'Q';

   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error 5
   PAR.Pricing_Valid_Error_Cde_U = 'PRCER5';

   CASE;

   // IF PAR.USR Display 4 is No
   IF PAR.USR_Display_4 = 'N';

   // PAR.USR Display 4 = CND.Yes
   PAR.USR_Display_4 = 'Y';

   ENDIF;

   ENDIF;

   ENDIF;

   //?VAL: Market Price Date/Range
   CASE;

   // IF PAR.Market Pricing Date is NE Zero
   IF PAR.Market_Pricing_Date <> *ZERO;

   // AND PAR.OD Market Begin Date is Entered
   AND ( PAR.OD_Market_Begin_Date <> *ZERO;

   // OR PAR.OD Market Ending Date is Entered
   OR PAR.OD_Market_Ending_Date <> *ZERO );

   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error 6
   PAR.Pricing_Valid_Error_Cde_U = 'PRCER6';

   //?VAL: Market Price Date/Range
   // IF PAR.OD Market Begin Date GT PAR.OD Market Ending Date
   IF PAR.OD_Market_Begin_Date > PAR.OD_Market_Ending_Date;

   CASE;

   // IF PAR.OD Market Ending Date is not entered
   IF PAR.OD_Market_Ending_Date = *ZERO;

   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error 7
   PAR.Pricing_Valid_Error_Cde_U = 'PRCER7';

   ENDIF;

   ENDIF;

   //?VAL: Price Method Type = Published
   CASE;

   // IF LCL.Price Method Type is Published Pricing
   IF LCL.Price_Method_Type = 'P';

   //?VAL: Price Overage Override
   CASE;

   // IF PAR.Price Overage Override is Not Zeros
   IF PAR.Price_Overage_Override <> *ZERO;

   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error 8
   PAR.Pricing_Valid_Error_Cde_U = 'PRCER8';

   ENDIF;

   // PAR.Commodity Market Code = CND.Seaboard
   PAR.Commodity_Market_Code = 'SBD';

   //?VAL: Date Method Code
   CASE;

   // IF PAR.Date Method Code is Entered
   IF PAR.Date_Method_Code <> *BLANK;

   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error 9
   PAR.Pricing_Valid_Error_Cde_U = 'PRCER9';

   ENDIF;

   //?VAL: Ceiling Price
   CASE;

   // IF PAR.OD Ceiling Price is Not Zeros
   IF PAR.OD_Ceiling_Price <> *ZERO;

   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error A
   PAR.Pricing_Valid_Error_Cde_U = 'PRCERA';

   ENDIF;

   //?VAL: Market Date or Date Range
   CASE;

   // IF PAR.OD Market Begin Date is Entered
   IF PAR.OD_Market_Begin_Date <> *ZERO;

   // OR PAR.OD Market Ending Date is Entered
   OR PAR.OD_Market_Ending_Date <> *ZERO;

   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error B
   PAR.Pricing_Valid_Error_Cde_U = 'PRCERB';

   ENDIF;

   ENDIF;

   //?VAL: Price Method Type = Manual/Extended
   CASE;

   // IF LCL.Price Method Type is Manual Pricing
   IF LCL.Price_Method_Type = 'M';

   // OR LCL.Price Method Type is Extended Pricing
   OR LCL.Price_Method_Type = 'X';

   //?VAL: Price Overage Override for Price Method Type=Extended
   CASE;

   // IF PAR.Price Overage Override is Equal zero
   IF PAR.Price_Overage_Override = *ZERO;

   // AND LCL.Price Method Type is Extended Pricing
   AND LCL.Price_Method_Type = 'X';

   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error C
   PAR.Pricing_Valid_Error_Cde_U = 'PRCERC';

   ENDIF;

   //?VAL: Commodity Market Code
   CASE;

   // IF PAR.Commodity Market Code is Entered
   IF PAR.Commodity_Market_Code <> *BLANK;

   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error D
   PAR.Pricing_Valid_Error_Cde_U = 'PRCERD';

   ENDIF;

   //?VAL: Date Method Code
   CASE;

   // IF PAR.Date Method Code is Entered
   IF PAR.Date_Method_Code <> *BLANK;

   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error E
   PAR.Pricing_Valid_Error_Cde_U = 'PRCERE';

   ENDIF;

   //?VAL: Ceiling Price
   CASE;

   // IF PAR.OD Ceiling Price is Not Zeros
   IF PAR.OD_Ceiling_Price <> *ZERO;

   // Send information message - 'Ceiling Price invalid for Pricing Method. Changed Ceiling Price to
   MESSAGE(USR4333 *INFO);
   MSGPARM(PAR.OD_Ceiling_Price);

   // PAR.OD Ceiling Price = CON.*ZERO
   PAR.OD_Ceiling_Price = *ZERO;

   ENDIF;

   //?VAL: Market Date or Date Range
   CASE;

   // IF PAR.Market Pricing Date is NE Zero
   IF PAR.Market_Pricing_Date <> *ZERO;

   // OR PAR.OD Market Begin Date is Entered
   OR PAR.OD_Market_Begin_Date <> *ZERO;

   // OR PAR.OD Market Ending Date is Entered
   OR PAR.OD_Market_Ending_Date <> *ZERO;

   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error F
   PAR.Pricing_Valid_Error_Cde_U = 'PRCERF';

   ENDIF;

   //?VAL: Manual Pricing
   CASE;

   // IF LCL.Price Method Type is Manual Pricing
   IF LCL.Price_Method_Type = 'M';

   //?VAL: Manual Price Range
   CASE;

   // IF PAR.Billing Activity Type is Not Warehouse Transfer
   IF PAR.Billing_Activity_Type = '2'/'3'/'1';

   CASE;

   // IF PAR.Primal Group Code is NE Samples or Cut Loss
   IF PAR.Primal_Group_Code <> 'UNID';

   //?RMC S14013 remove chk for type n= Promo/Samples- we want them validated
   EXECUTE FUNCTION(VAL Manual Price Range IF) TYPE(EXCINTFUN)                     AC1414607;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Commodity_Market_Code);
   PARAMETER(PAR.Price_Overage_Override);
   PARAMETER(LCL.Commodity_Price_Group);
   PARAMETER(LCL.Projected_Market_Price);
   PARAMETER(PAR.Default_Commod_Mark_basis);
   PARAMETER(LCL.Market_Overage);
   PARAMETER(LCL.Error_Status_3);
   PARAMETER(LCL.Minimum_Price_USR);
   PARAMETER(LCL.Maximum_Price_USR);
   PARAMETER(PAR.Absorbed_Freight_Rate_CWT);
   {
    //?Execute internal function

    //?*---------------------------------------------------------------*
    //?Documentation:
    //?This internal function will determine if a manual price entered
    //?on an order detail line is within the Manual Pricing Acceptance
    //?Percentage from the Company Control file. If it does not fall
    //?within the percentage range then the market price will be used.
    //?If no market price is found then it is a manual price error
    //?*---------------------------------------------------------------*
    // PAR.Projected Market Price = CON.*ZERO
    PAR.Projected_Market_Price = *ZERO;

    // PAR.Minimum Price   USR = CON.*ZERO
    PAR.Minimum_Price_USR = *ZERO;

    // PAR.Maximum Price  USR = CON.*ZERO
    PAR.Maximum_Price_USR = *ZERO;

    // PAR.Error Status  3 = CND.Yes
    PAR.Error_Status_3 = 'Y';

    EXECUTE FUNCTION(RTV Manual Price Accpt RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1414604;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Manual_Price_Accept_Prcnt);
    PARAMETER(PAR.CoPk_FdSrv_ManPrc_Acpt_PT);
    {
     //?USER: Processing if Data record not found

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?Food Service and Co-Pack Items
    CASE;

    // IF PAR.Default Commod Mark basis is Food Service
    IF PAR.Default_Commod_Mark_basis = 'FSV';

    // OR PAR.Default Commod Mark basis is Co-Pack
    OR PAR.Default_Commod_Mark_basis = 'CPK';

    // PAR.Manual Price Accept Prcnt = PAR.CoPk/FdSrv ManPrc Acpt%
    PAR.Manual_Price_Accept_Prcnt = PAR.CoPk_FdSrv_ManPrc_Acpt_PT;

    ENDIF;

    EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
    PARAMETER(PAR.Commodity_Market_Code);
    PARAMETER(PAR.Commodity_Price_Group);
    PARAMETER(9999999);
    PARAMETER(PAR.Projected_Market_Price);
    PARAMETER(WRK.USR_Date_Priced);
    {
     //?USER: Processing if Data record not found

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     // PAR.Commodity Market Price = DB1.Commodity Market Price
     PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

     // PAR.USR Date Priced = DB1.Market Price Date
     PAR.USR_Date_Priced = DB1.Market_Price_Date;

     QUIT;

    }

    // Projected Market Price
    PAR.Projected_Market_Price = ( PAR.Projected_Market_Price
    + PAR.Standard_Overage_Underage ) + ( PAR.Absorbed_Freight_Rate_CWT / 100 'H' );

    //?If a market price is found for co/cust market code default
    CASE;

    // IF PGM.*Return code is *Normal
    IF PGM.*Return_code = *BLANK;

    // Minimum price allowed
    PAR.Minimum_Price_USR = ( 1 - ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) )
    * PAR.Projected_Market_Price 'H';

    // Maximum price allowed
    PAR.Maximum_Price_USR = ( ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) + 1 )
    * PAR.Projected_Market_Price 'H';

    //?If the Price Override is within the range then error status is no
    CASE;

    // IF PAR.Price Overage Override GE PAR.Minimum Price   USR
    IF PAR.Price_Overage_Override >= PAR.Minimum_Price_USR;

    // AND PAR.Price Overage Override LE PAR.Maximum Price  USR
    AND PAR.Price_Overage_Override <= PAR.Maximum_Price_USR;

    // PAR.Error Status  3 = CND.No
    PAR.Error_Status_3 = 'N';

    ENDIF;

    //?If a market price is found for co/cust market code default
    // IF *OTHERWISE
    IF *OTHERWISE;

    //?If no price for co/cust market code then use co/item market code
    EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
    PARAMETER(PAR.Default_Commod_Mark_basis);
    PARAMETER(PAR.Commodity_Price_Group);
    PARAMETER(9999999);
    PARAMETER(PAR.Projected_Market_Price);
    PARAMETER(WRK.USR_Date_Priced);
    {
     //?USER: Processing if Data record not found

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     // PAR.Commodity Market Price = DB1.Commodity Market Price
     PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

     // PAR.USR Date Priced = DB1.Market Price Date
     PAR.USR_Date_Priced = DB1.Market_Price_Date;

     QUIT;

    }

    CASE;

    // IF PGM.*Return code is *Normal
    IF PGM.*Return_code = *BLANK;

    // Minimum price allowed
    PAR.Minimum_Price_USR = ( PAR.Manual_Price_Accept_Prcnt / 100 'H' )
    * PAR.Projected_Market_Price 'H';

    // Maximum price allowed
    PAR.Maximum_Price_USR = ( ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) + 1 )
    * PAR.Projected_Market_Price 'H';

    //?If the Price Override is within the range then error status is no
    CASE;

    // IF PAR.Price Overage Override GE PAR.Minimum Price   USR
    IF PAR.Price_Overage_Override >= PAR.Minimum_Price_USR;

    // AND PAR.Price Overage Override LE PAR.Maximum Price  USR
    AND PAR.Price_Overage_Override <= PAR.Maximum_Price_USR;

    // PAR.Error Status  3 = CND.No
    PAR.Error_Status_3 = 'N';

    ENDIF;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Projected Market Price = CON.*ZERO
    PAR.Projected_Market_Price = *ZERO;

    ENDIF;

    ENDIF;

   }

   // PAR.Unit Price - Credit = LCL.Projected Market Price
   PAR.Unit_Price_Credit = LCL.Projected_Market_Price;

   ENDIF;

   CASE;

   // IF LCL.Error Status  3 is Yes
   IF LCL.Error_Status_3 = 'Y';

   CASE;

   // IF LCL.Projected Market Price is Not Zeros
   IF LCL.Projected_Market_Price <> *ZERO;

   // Send information message - 'Price Override not within valid range, Market Price will be defaul
   MESSAGE(USR2351 *INFO);
   MSGPARM(PAR.Price_Overage_Override);

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error G
   PAR.Pricing_Valid_Error_Cde_U = 'PRCERG';

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

   //?VAL: Price Method Type = Contract
   CASE;

   // IF LCL.Price Method Type is Contract Pricing
   IF LCL.Price_Method_Type = 'Q';

   //?VAL: Commodity Market Code
   CASE;

   // IF PAR.Commodity Market Code is Entered
   IF PAR.Commodity_Market_Code <> *BLANK;

   // AND LCL.PMH Price Type is Invoice Price
   AND LCL.PMH_Price_Type = 'I';

   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error H
   PAR.Pricing_Valid_Error_Cde_U = 'PRCERH';

   ENDIF;

   //?VAL: Date Method Code
   CASE;

   // IF PAR.Date Method Code is Entered
   IF PAR.Date_Method_Code <> *BLANK;

   // AND LCL.PMH Price Type is Invoice Price
   AND LCL.PMH_Price_Type = 'I';

   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error I
   PAR.Pricing_Valid_Error_Cde_U = 'PRCERI';

   ENDIF;

   //?VAL: Ceiling Price
   CASE;

   // IF LCL.PMH Price Type is Invoice Price
   IF LCL.PMH_Price_Type = 'I';

   //?ERR: Ceiling Price not allowed
   CASE;

   // IF PAR.OD Ceiling Price is Not Zeros
   IF PAR.OD_Ceiling_Price <> *ZERO;

   // Send information message - 'Ceiling Price invalid for Pricing Method. Changed Ceiling Price to
   MESSAGE(USR4333 *INFO);
   MSGPARM(PAR.OD_Ceiling_Price);

   // PAR.OD Ceiling Price = CON.*ZERO
   PAR.OD_Ceiling_Price = *ZERO;

   ENDIF;

   //?VAL: Ceiling Price
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?ERR: Ceiling Price Required
   CASE;

   // IF PAR.OD Ceiling Price is Equal zero
   IF PAR.OD_Ceiling_Price = *ZERO;

   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error J
   PAR.Pricing_Valid_Error_Cde_U = 'PRCERJ';

   ENDIF;

   // PAR.Unit Price - Credit = PAR.OD Ceiling Price
   PAR.Unit_Price_Credit = PAR.OD_Ceiling_Price;

   ENDIF;

   //?VAL: Market Date or Date Range
   CASE;

   // IF PAR.Market Pricing Date is NE Zero
   IF PAR.Market_Pricing_Date <> *ZERO;

   // OR PAR.OD Market Begin Date is Entered
   OR PAR.OD_Market_Begin_Date <> *ZERO;

   // OR PAR.OD Market Ending Date is Entered
   OR PAR.OD_Market_Ending_Date <> *ZERO;

   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error K
   PAR.Pricing_Valid_Error_Cde_U = 'PRCERK';

   ENDIF;

   ENDIF;

   //?VAL: Price Method Type = Market/Formula
   CASE;

   // IF LCL.Price Method Type is Market or Formula
   IF LCL.Price_Method_Type = 'F'/'K';

   //?VAL: Price Overage Override
   CASE;

   // IF PAR.Price Overage Override is Not Zeros
   IF PAR.Price_Overage_Override <> *ZERO;

   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error L
   PAR.Pricing_Valid_Error_Cde_U = 'PRCERL';

   ENDIF;

   //?VAL: Commodity Market Code
   CASE;

   // IF PAR.Commodity Market Code is Not Entered
   IF PAR.Commodity_Market_Code = *BLANK;

   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error M
   PAR.Pricing_Valid_Error_Cde_U = 'PRCERM';

   ENDIF;

   //?VAL: Date Method Code
   CASE;

   // IF PAR.Date Method Code is Entered
   IF PAR.Date_Method_Code <> *BLANK;

   EXECUTE FUNCTION(VAL Date Method Exists RT) TYPE(RTVOBJ) FILE(PDIPREP)          AC1365305;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Date_Method_Code);
   PARAMETER(NLL.Date_Method_Description);
   PARAMETER('O');
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?ERR: Date Method Code Invalid
   CASE;

   // IF PGM.*Return code is *Record does not exist
   IF PGM.*Return_code = 'Y2U0005';

   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error N
   PAR.Pricing_Valid_Error_Cde_U = 'PRCERN';

   ENDIF;

   ENDIF;

   //?ERR: Date Method Entered & Market Price Date/Range Entered
   CASE;

   // IF PAR.Date Method Code is Entered
   IF ( PAR.Date_Method_Code <> *BLANK;

   // AND PAR.Market Pricing Date is NE Zero
   AND PAR.Market_Pricing_Date <> *ZERO );

   // OR PAR.Date Method Code is Entered
   OR ( PAR.Date_Method_Code <> *BLANK;

   // AND PAR.OD Market Begin Date is Entered
   AND PAR.OD_Market_Begin_Date <> *ZERO;

   // AND PAR.OD Market Ending Date is Entered
   AND PAR.OD_Market_Ending_Date <> *ZERO );

   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error O
   PAR.Pricing_Valid_Error_Cde_U = 'PRCERO';

   ENDIF;

   //?ERR: Date Method = Blank and Market Price Date/Rage = Zero
   CASE;

   // IF PAR.Date Method Code is Not Entered
   IF PAR.Date_Method_Code = *BLANK;

   // AND PAR.Market Pricing Date is EQ Zero
   AND PAR.Market_Pricing_Date = *ZERO;

   // AND PAR.OD Market Begin Date is not entered
   AND PAR.OD_Market_Begin_Date = *ZERO;

   // AND PAR.OD Market Ending Date is not entered
   AND PAR.OD_Market_Ending_Date = *ZERO;

   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error P
   PAR.Pricing_Valid_Error_Cde_U = 'PRCERP';

   ENDIF;

   //?ERR: Market Price Date & Market Price Date Range Entered
   CASE;

   // IF PAR.Market Pricing Date is NE Zero
   IF PAR.Market_Pricing_Date <> *ZERO;

   // AND PAR.OD Market Begin Date is Entered
   AND ( PAR.OD_Market_Begin_Date <> *ZERO;

   // OR PAR.OD Market Ending Date is Entered
   OR PAR.OD_Market_Ending_Date <> *ZERO );

   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error Q
   PAR.Pricing_Valid_Error_Cde_U = 'PRCERQ';

   ENDIF;

   //?ERR: Market Price Begin Date > Market Price Ending Date
   CASE;

   // IF PAR.OD Market Begin Date GT PAR.OD Market Ending Date
   IF PAR.OD_Market_Begin_Date > PAR.OD_Market_Ending_Date;

   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error R
   PAR.Pricing_Valid_Error_Cde_U = 'PRCERR';

   ENDIF;

   EXECUTE FUNCTION(VAL Market Cd & Group  RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1414484;
   PARAMETER(PAR.Commodity_Market_Code);
   PARAMETER(LCL.Commodity_Price_Group);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

    QUIT;

   }

   //?VAL: Commodity Market Price Exists
   CASE;

   // IF PGM.*Return code is *Record does not exist
   IF PGM.*Return_code = 'Y2U0005';

   CASE;

   // IF PAR.Commodity Market Code NE PAR.Default Commod Mark basis
   IF PAR.Commodity_Market_Code <> PAR.Default_Commod_Mark_basis;

   EXECUTE FUNCTION(VAL Market Cd & Group  RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1414484;
   PARAMETER(PAR.Default_Commod_Mark_basis);
   PARAMETER(LCL.Commodity_Price_Group);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

    QUIT;

   }

   //?Use Company Item
   CASE;

   // IF PGM.*Return code is *Record does not exist
   IF PGM.*Return_code = 'Y2U0005';

   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error S
   PAR.Pricing_Valid_Error_Cde_U = 'PRCERS';

   //?Use Company Item
   // IF *OTHERWISE
   IF *OTHERWISE;

   // Send information message - 'No price found for market &1 and group &2, so market &3 will be us
   MESSAGE(USR2350 *INFO);
   MSGPARM(PAR.Commodity_Market_Code);
   MSGPARM(LCL.Commodity_Price_Group);
   MSGPARM(PAR.Default_Commod_Mark_basis);

   ENDIF;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error S
   PAR.Pricing_Valid_Error_Cde_U = 'PRCERS';

   ENDIF;

   ENDIF;

   ENDIF;

  }

  //?** Error processing
  CASE;

  // IF LCL.Pricing Valid Error Cde U is NE *Blank
  IF LCL.Pricing_Valid_Error_Cde_U <> *BLANK;

  CASE;

  // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error 1
  IF LCL.Pricing_Valid_Error_Cde_U = 'PRCER1';

  // LCL.BOE Error Comment = CONCAT(CON.Price Code must be zero f,CON.or Price Method Code.,CON.*ZER
  LCL.BOE_Error_Comment = 'Price Code must be zero f' + 'or Price Method Code.' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('PRCER1');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error 2
  IF LCL.Pricing_Valid_Error_Cde_U = 'PRCER2';

  // LCL.BOE Error Comment = CONCAT(CON.Price Code not found for,CON.Cust or Invalid Dt Range,CON.*Z
  LCL.BOE_Error_Comment = 'Price Code not found for' + 'Cust or Invalid Dt Range' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('PRCER2');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error 3
  IF LCL.Pricing_Valid_Error_Cde_U = 'PRCER3';

  // LCL.BOE Error Comment = CONCAT(CON.Price Code not Valid for,CON.Start/End Dates.,CON.*ZERO)
  LCL.BOE_Error_Comment = 'Price Code not Valid for' + 'Start/End Dates.' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('PRCER3');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error 4
  IF LCL.Pricing_Valid_Error_Cde_U = 'PRCER4';

  // LCL.BOE Error Comment = CONCAT(CON.Price Code not Found for,CON.Item Code.,CON.*ZERO)
  LCL.BOE_Error_Comment = 'Price Code not Found for' + 'Item Code.' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('PRCER4');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error 5
  IF LCL.Pricing_Valid_Error_Cde_U = 'PRCER5';

  // LCL.BOE Error Comment = CONCAT(CON.Price Code Required for P,CON.ricing Method.,CON.*ZERO)
  LCL.BOE_Error_Comment = 'Price Code Required for P' + 'ricing Method.' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('PRCER5');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error 6
  IF LCL.Pricing_Valid_Error_Cde_U = 'PRCER6';

  // LCL.BOE Error Comment = CONCAT(CON.Mkt Pricing Dt & Mkt Prc,CON.Dt Rng can't both exist.,CON.*Z
  LCL.BOE_Error_Comment = 'Mkt Pricing Dt & Mkt Prc' + 'Dt Rng can't both exist.' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('PRCER6');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error 7
  IF LCL.Pricing_Valid_Error_Cde_U = 'PRCER7';

  // LCL.BOE Error Comment = CONCAT(CON.Market Price Date Range I,CON.nvalid.,CON.*ZERO)
  LCL.BOE_Error_Comment = 'Market Price Date Range I' + 'nvalid.' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('PRCER7');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error 8
  IF LCL.Pricing_Valid_Error_Cde_U = 'PRCER8';

  // LCL.BOE Error Comment = CONCAT(CON.Price Override not Allowe,CON.d with Price Method.,CON.*ZERO
  LCL.BOE_Error_Comment = 'Price Override not Allowe' + 'd with Price Method.' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('PRCER8');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error 9
  IF LCL.Pricing_Valid_Error_Cde_U = 'PRCER9';

  // LCL.BOE Error Comment = CONCAT(CON.Date Method Code not Allo,CON.wed for Price Method.,CON.*ZER
  LCL.BOE_Error_Comment = 'Date Method Code not Allo' + 'wed for Price Method.' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('PRCER9');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error B
  IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERB';

  // LCL.BOE Error Comment = CONCAT(CON.Market Pricing Date Range,CON. must be 0 for Prc Method,CON.
  LCL.BOE_Error_Comment = 'Market Pricing Date Range' + ' must be 0 for Prc Method' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('PRCERB');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error C
  IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERC';

  // LCL.BOE Error Comment = CONCAT(CON.Price Override Required f,CON.or Price Method.,CON.*ZERO)
  LCL.BOE_Error_Comment = 'Price Override Required f' + 'or Price Method.' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('PRCERC');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error D
  IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERD';

  // LCL.BOE Error Comment = CONCAT(CON.Market Code not allowed f,CON.or Price Method.,CON.*ZERO)
  LCL.BOE_Error_Comment = 'Market Code not allowed f' + 'or Price Method.' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('PRCERD');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error E
  IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERE';

  // LCL.BOE Error Comment = CONCAT(CON.Date Method Code not allo,CON.wed for Price Method.,CON.*ZER
  LCL.BOE_Error_Comment = 'Date Method Code not allo' + 'wed for Price Method.' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('PRCERE');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error F
  IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERF';

  // LCL.BOE Error Comment = CONCAT(CON.Mkt Prc Dt or Dt Range mu,CON.st be 0 for Price Method.,CON.
  LCL.BOE_Error_Comment = 'Mkt Prc Dt or Dt Range mu' + 'st be 0 for Price Method.' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('PRCERF');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error G
  IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERG';

  // LCL.BOE Error Comment = CONCAT(CON.No Price Found for Commod,CON.ity Market Code/Group.,CON.*ZE
  LCL.BOE_Error_Comment = 'No Price Found for Commod' + 'ity Market Code/Group.' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('PRCERG');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error H
  IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERH';

  // LCL.BOE Error Comment = CONCAT(CON.Market Code not Allowed f,CON.or Price Method.,CON.*ZERO)
  LCL.BOE_Error_Comment = 'Market Code not Allowed f' + 'or Price Method.' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('PRCERH');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error I
  IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERI';

  // LCL.BOE Error Comment = CONCAT(CON.Date Method Code not allo,CON.wed for Price Method.,CON.*ZER
  LCL.BOE_Error_Comment = 'Date Method Code not allo' + 'wed for Price Method.' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('PRCERI');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error J
  IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERJ';

  // LCL.BOE Error Comment = CONCAT(CON.Ceiling Price is Required,CON. for Pricing Method.,CON.*ZERO
  LCL.BOE_Error_Comment = 'Ceiling Price is Required' + ' for Pricing Method.' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('PRCERJ');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error K
  IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERK';

  // LCL.BOE Error Comment = CONCAT(CON.Market Prc Dt or Dt Range,CON. must be 0 for Prc Methd,CON.*
  LCL.BOE_Error_Comment = 'Market Prc Dt or Dt Range' + ' must be 0 for Prc Methd' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('PRCERK');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error L
  IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERL';

  // LCL.BOE Error Comment = CONCAT(CON.Price Overage Override no,CON.t allowed for Price Mthd,CON.*
  LCL.BOE_Error_Comment = 'Price Overage Override no' + 't allowed for Price Mthd' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('PRCERL');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error M
  IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERM';

  // LCL.BOE Error Comment = CONCAT(CON.Market Code must be enter,CON.ed for Price Method.,CON.*ZERO
  LCL.BOE_Error_Comment = 'Market Code must be enter' + 'ed for Price Method.' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('PRCERM');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error N
  IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERN';

  // LCL.BOE Error Comment = CONCAT(CON.Date Method is Invalid.,CON.*BLANK,CON.*ZERO)
  LCL.BOE_Error_Comment = 'Date Method is Invalid.' + *BLANK (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('PRCERN');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error O
  IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERO';

  // LCL.BOE Error Comment = CONCAT(CON.Dt Mthd & Mkt Prc Dt or D,CON.t Range not Allowed.,CON.*ZERO
  LCL.BOE_Error_Comment = 'Dt Mthd & Mkt Prc Dt or D' + 't Range not Allowed.' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('PRCERO');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error P
  IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERP';

  // LCL.BOE Error Comment = CONCAT(CON.Date Method is Invalid,CON.*BLANK,CON.*ZERO)
  LCL.BOE_Error_Comment = 'Date Method is Invalid' + *BLANK (*ZERO);

  //?**  Did not create PRCERP as is is a duplicate. Used PRCERN
  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('PRCERN');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error Q
  IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERQ';

  // LCL.BOE Error Comment = CONCAT(CON.Market Pricing Date/Range,CON. can be entered not both.,CON.
  LCL.BOE_Error_Comment = 'Market Pricing Date/Range' + ' can be entered not both.' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('PRCERQ');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error R
  IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERR';

  // LCL.BOE Error Comment = CONCAT(CON.Market Price Date Range I,CON.nvalid.,CON.*ZERO)
  LCL.BOE_Error_Comment = 'Market Price Date Range I' + 'nvalid.' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('PRCERR');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error S
  IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERS';

  // LCL.BOE Error Comment = CONCAT(CON.No Price can be found for,CON. Market Code/Group,CON.*ZERO)
  LCL.BOE_Error_Comment = 'No Price can be found for' + ' Market Code/Group' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('PRCERS');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error T
  IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERT';

  // LCL.BOE Error Comment = CONCAT(CON.Max Cntrct Units for Item,CON./Prc cd wgt alloc exceed,CON.*
  LCL.BOE_Error_Comment = 'Max Cntrct Units for Item' + '/Prc cd wgt alloc exceed' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('PRCERT');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  ENDIF;

  ENDIF;

  // LCL.Weight Ordered = DB1.Quantity Ordered * LCL.Unit Weight Ordered U_M *
  LCL.Weight_Ordered = DB1.Quantity_Ordered * LCL.Unit_Weight_Ordered_U_M;

  // Call program Exc Calc Ord ExemptCd XF.
  CALL PROGRAM(Exc Calc Ord ExemptCd XF) ('PPSLXFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(9999999);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(LCL.OH_TF_Exempt_Code);
  PARAMETER(LCL.Error_Flag_USR);
  PARAMETER('Y');

  //?** Error checking...
  CASE;

  // IF LCL.Error Flag            USR is Yes
  IF LCL.Error_Flag_USR = 'Y';

  // LCL.BOE Error Comment = CONCAT(CON.Can't mix Exempt & Non Ex,CON.empt items for Customer.,CON.*
  LCL.BOE_Error_Comment = 'Can't mix Exempt & Non Ex' + 'empt items for Customer.' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('TFEXMX');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  ENDIF;

  //?** If TF Exempt Code is not *Blank...
  CASE;

  // IF LCL.OH TF Exempt Code NE LCL.Blank 1 USR
  IF LCL.OH_TF_Exempt_Code <> LCL.Blank_1_USR;

  // Call program Upd Block Order Qtemp XF.
  CALL PROGRAM(Upd Block Order Qtemp XF) ('PUZ8XFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(9999999);
  PARAMETER(LCL.OH_TF_Exempt_Code);

  ENDIF;

  //?** Test to see if we need to update Detail record again.
  CASE;

  // IF LCL.Date Method Code is Entered
  IF LCL.Date_Method_Code <> *BLANK;

  // OR LCL.Weight Ordered is Not equal zero
  OR LCL.Weight_Ordered <> *ZERO;

  // OR LCL.Unit Price_Credit is Not Zeros
  OR LCL.Unit_Price_Credit <> *ZERO;

  // OR LCL.Market Pricing Date is NE Zero
  OR LCL.Market_Pricing_Date <> *ZERO;

  // OR LCL.Commodity Market Code is Entered
  OR LCL.Commodity_Market_Code <> *BLANK;

  // OR LCL.Price Method Code is Not Blank
  OR LCL.Price_Method_Code <> *BLANK;

  // OR LCL.Price Overage Override is Not Zeros
  OR LCL.Price_Overage_Override <> *ZERO;

  // OR LCL.OD Ceiling Price is Not Zeros
  OR LCL.OD_Ceiling_Price <> *ZERO;

  // OR LCL.OD Market Begin Date is Entered
  OR LCL.OD_Market_Begin_Date <> *ZERO;

  // OR LCL.OD Market Ending Date is Entered
  OR LCL.OD_Market_Ending_Date <> *ZERO;

  // Call program Upd Block Order Qtemp XF.
  CALL PROGRAM(Upd Block Order Qtemp XF) ('PUZ9XFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(9999999);
  PARAMETER(DB1.Sequence_Number);
  PARAMETER(1);
  PARAMETER(LCL.Market_Pricing_Date);
  PARAMETER(LCL.Commodity_Market_Code);
  PARAMETER(LCL.Date_Method_Code);
  PARAMETER(DB1.Price_Method_Code);
  PARAMETER(DB1.Price_Overage_Override);
  PARAMETER(LCL.Weight_Ordered);
  PARAMETER(LCL.Unit_Price_Credit);
  PARAMETER(LCL.OD_Ceiling_Price);
  PARAMETER(LCL.OD_Market_Begin_Date);
  PARAMETER(LCL.OD_Market_Ending_Date);

  ENDIF;

  // Call program UPD Order Weight.
  CALL PROGRAM(UPD Order Weight) ('PVFEXFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(9999999);

  ENDIF;

 }

 //?** If Header passed, but Dtl didn't, Override Par to No.
 CASE;

 // IF PAR.Hdr/Dtl Validation Pass U is Yes
 IF PAR.Hdr_Dtl_Validation_Pass_U = 'Y';

 // AND LCL.Hdr/Dtl Validation Pass U is No
 AND LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 // PAR.Hdr/Dtl Validation Pass U = CND.No
 PAR.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 //?** Update Error Code in the Header.
 CASE;

 // IF PAR.Hdr/Dtl Validation Pass U is No
 IF PAR.Hdr_Dtl_Validation_Pass_U = 'N';

 EXECUTE FUNCTION(Chg Block Order Upl HdrCH) TYPE(CHGOBJ) FILE(PUC2CPP)          AC2212473;
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.OHE_Spot_Buy);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Country_Code);
 PARAMETER(DB1.OHE_Intended_for_ExportCC);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER('E');
 PARAMETER(DB1.Email_Sent);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 ENDIF;

 //?** Check the error file for any errors.  If none, write records.
 EXECUTE FUNCTION(RTV Chk Existence      RT) TYPE(RTVOBJ) FILE(PUC5CPP)          AC2217510;
 PARAMETER(DB1.Surrogate_Number);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  QUIT;

 }

 //?** If no Error, Write from Qtemp to Permanent files.
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // Call program DLT Block Order Qtemp XF.
 CALL PROGRAM(DLT Block Order Qtemp XF) ('PVBMXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(9999999);

 // Call program DLT Block Order Qtemp XF.
 CALL PROGRAM(DLT Block Order Qtemp XF) ('PVBNXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(9999999);

 EXECUTE FUNCTION(Chg Block Order Upl HdrCH) TYPE(CHGOBJ) FILE(PUC2CPP)          AC2212473;
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Company_Number);
 PARAMETER(LCL.Next_Order_Number);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.OHE_Spot_Buy);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Country_Code);
 PARAMETER(DB1.OHE_Intended_for_ExportCC);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER('Y');
 PARAMETER(DB1.Email_Sent);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 //?** If no Error, Write from Qtemp to Permanent files.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute command - 'DLTOVR'
 EXECUTE COMMAND(USR2787);

 // Call program EXC Command DLTF       UP.
 CALL PROGRAM(EXC Command DLTF       UP) ('PDUHUPR');
 PARAMETER('QTEMP');
 PARAMETER('OPBFCPW0');

 // Call program EXC Command DLTF       UP.
 CALL PROGRAM(EXC Command DLTF       UP) ('PDUHUPR');
 PARAMETER('QTEMP');
 PARAMETER('OPBGWKW0');

 // Call program CPY Copy Order Temp Block.
 CALL PROGRAM(CPY Copy Order Temp Block) ('PVEZXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(9999999);
 PARAMETER('OR');
 PARAMETER(LCL.Next_Order_Number);
 PARAMETER(DB1.OHE_Intended_for_ExportCC);
 PARAMETER(LCL.Type_Code);
 PARAMETER(DB1.OHE_Spot_Buy);

 EXECUTE FUNCTION(RTV Crt Blck Ord Trns RT) TYPE(RTVOBJ) FILE(PUC4CPP)           AC2217508;
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Company_Number);
 PARAMETER(LCL.Next_Order_Number);
 PARAMETER('Y');
 PARAMETER('A');
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt Block Order Trans CR) TYPE(CRTOBJ) FILE(PUC4CPP)           AC2212478;
  PARAMETER(PAR.Surrogate_Number);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Record_Processed);
  PARAMETER(PAR.Record_Status);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Date/Time 2    IF) TYPE(EXCINTFUN)                     AC2045684;
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    //?*** Set CREATE fields. ***
    // PAR.Create Date = JOB.*Job date
    PAR.Create_Date = JOB.*Job_date;

    // PAR.Create Time = JOB.*Job time
    PAR.Create_Time = JOB.*Job_time;

    // PAR.Create User = JOB.*USER
    PAR.Create_User = JOB.*USER;

    // PAR.Create Program = JOB.*PROGRAM
    PAR.Create_Program = JOB.*PROGRAM;

    //?*** Set CHANGE fields. ***
    // PAR.Change Date = CON.*ZERO
    PAR.Change_Date = *ZERO;

    // PAR.Change Time = CON.*ZERO
    PAR.Change_Time = *ZERO;

    // PAR.Change User = CON.*BLANK
    PAR.Change_User = *BLANK;

    // PAR.Change Program = CON.*BLANK
    PAR.Change_Program = *BLANK;

   }

  }

 }

 EXECUTE FUNCTION(Chg Block Order Upl HdrCH) TYPE(CHGOBJ) FILE(PUC2CPP)          AC2212473;
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Company_Number);
 PARAMETER(LCL.Next_Order_Number);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.OHE_Spot_Buy);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Country_Code);
 PARAMETER(DB1.OHE_Intended_for_ExportCC);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER('Y');
 PARAMETER(DB1.Email_Sent);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 //?** Delete records in Qtemp to prepare for the next record.
 // Call program DLT Block Order Qtemp XF.
 CALL PROGRAM(DLT Block Order Qtemp XF) ('PVBMXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(LCL.Next_Order_Number);

 // Call program DLT Block Order Qtemp XF.
 CALL PROGRAM(DLT Block Order Qtemp XF) ('PVBNXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(LCL.Next_Order_Number);

 // LCL.Next Order Number = CND.Equal to zeros
 LCL.Next_Order_Number = *ZERO;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?*** Order Number is Present so this is a change.
 //?** Remove files from QTEMP now that Adds have finished.
 CASE;

 // IF LCL.First Time Flag is Yes
 IF LCL.First_Time_Flag = 'Y';

 // Execute command - 'DLTOVR'
 EXECUTE COMMAND(USR2787);

 // Call program EXC Command DLTF       UP.
 CALL PROGRAM(EXC Command DLTF       UP) ('PDUHUPR');
 PARAMETER('QTEMP');
 PARAMETER('OPBFCPL*');

 // Call program EXC Command DLTF       UP.
 CALL PROGRAM(EXC Command DLTF       UP) ('PDUHUPR');
 PARAMETER('QTEMP');
 PARAMETER('OPBFCPN*');

 // Call program EXC Command DLTF       UP.
 CALL PROGRAM(EXC Command DLTF       UP) ('PDUHUPR');
 PARAMETER('QTEMP');
 PARAMETER('OPBFCPW*');

 // Call program EXC Command DLTF       UP.
 CALL PROGRAM(EXC Command DLTF       UP) ('PDUHUPR');
 PARAMETER('QTEMP');
 PARAMETER('OPBFCPP');

 // Call program EXC Command DLTF       UP.
 CALL PROGRAM(EXC Command DLTF       UP) ('PDUHUPR');
 PARAMETER('QTEMP');
 PARAMETER('OPBGWKN*');

 // Call program EXC Command DLTF       UP.
 CALL PROGRAM(EXC Command DLTF       UP) ('PDUHUPR');
 PARAMETER('QTEMP');
 PARAMETER('OPBGWKL*');

 // Call program EXC Command DLTF       UP.
 CALL PROGRAM(EXC Command DLTF       UP) ('PDUHUPR');
 PARAMETER('QTEMP');
 PARAMETER('OPBGWKW*');

 // Call program EXC Command DLTF       UP.
 CALL PROGRAM(EXC Command DLTF       UP) ('PDUHUPR');
 PARAMETER('QTEMP');
 PARAMETER('OPBGWKP');

 // Call program EXC Command DLTF       UP.
 CALL PROGRAM(EXC Command DLTF       UP) ('PDUHUPR');
 PARAMETER('QTEMP');
 PARAMETER('OMCRWKL*');

 // Call program EXC Command DLTF       UP.
 CALL PROGRAM(EXC Command DLTF       UP) ('PDUHUPR');
 PARAMETER('QTEMP');
 PARAMETER('OMCRWKP');

 // Call program EXC Command DLTF       UP.
 CALL PROGRAM(EXC Command DLTF       UP) ('PDUHUPR');
 PARAMETER('QTEMP');
 PARAMETER('OPCPCPL*');

 // Call program EXC Command DLTF       UP.
 CALL PROGRAM(EXC Command DLTF       UP) ('PDUHUPR');
 PARAMETER('QTEMP');
 PARAMETER('OPCPCPP');

 // Call program EXC Command DLTF       UP.
 CALL PROGRAM(EXC Command DLTF       UP) ('PDUHUPR');
 PARAMETER('QTEMP');
 PARAMETER('PDIECPL*');

 // Call program EXC Command DLTF       UP.
 CALL PROGRAM(EXC Command DLTF       UP) ('PDUHUPR');
 PARAMETER('QTEMP');
 PARAMETER('PDIECPP');

 // Call program EXC Command DLTF       UP.
 CALL PROGRAM(EXC Command DLTF       UP) ('PDUHUPR');
 PARAMETER('QTEMP');
 PARAMETER('PDMRREL*');

 // Call program EXC Command DLTF       UP.
 CALL PROGRAM(EXC Command DLTF       UP) ('PDUHUPR');
 PARAMETER('QTEMP');
 PARAMETER('PDMRREP');

 // Call program EXC Command DLTF       UP.
 CALL PROGRAM(EXC Command DLTF       UP) ('PDUHUPR');
 PARAMETER('QTEMP');
 PARAMETER('PNGTCPL*');

 // Call program EXC Command DLTF       UP.
 CALL PROGRAM(EXC Command DLTF       UP) ('PDUHUPR');
 PARAMETER('QTEMP');
 PARAMETER('PNGTCPP');

 // Call program EXC Command DLTF       UP.
 CALL PROGRAM(EXC Command DLTF       UP) ('PDUHUPR');
 PARAMETER('QTEMP');
 PARAMETER('PDMSREL*');

 // Call program EXC Command DLTF       UP.
 CALL PROGRAM(EXC Command DLTF       UP) ('PDUHUPR');
 PARAMETER('QTEMP');
 PARAMETER('PDMSREP');

 // Call program EXC Command DLTF       UP.
 CALL PROGRAM(EXC Command DLTF       UP) ('PDUHUPR');
 PARAMETER('QTEMP');
 PARAMETER('PUA6CPL*');

 // Call program EXC Command DLTF       UP.
 CALL PROGRAM(EXC Command DLTF       UP) ('PDUHUPR');
 PARAMETER('QTEMP');
 PARAMETER('PUA6CPP');

 // LCL.First Time Flag = CND.NO
 LCL.First_Time_Flag = 'N';

 ENDIF;

 CASE;

 // IF DB1.Header Status is Change Record
 IF DB1.Header_Status = 'N';

 EXECUTE FUNCTION(RTV All Fields         RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1571206;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Order_Type_Sales);
 PARAMETER(LCL.AR_Customer_Number);
 PARAMETER(LCL.Ship_To_Customer);
 PARAMETER(LCL.Ship_To_Name);
 PARAMETER(LCL.Ship_To_Address_Line_1);
 PARAMETER(LCL.Ship_To_Address_Line_2);
 PARAMETER(LCL.Ship_To_Address_Line_3);
 PARAMETER(LCL.Ship_To_City);
 PARAMETER(LCL.Ship_To_State_Code);
 PARAMETER(LCL.Ship_To_Zip_Postal_Code);
 PARAMETER(LCL.Bill_to_Customer);
 PARAMETER(LCL.Bill_to_Name);
 PARAMETER(LCL.Bill_to_Address_Line_1);
 PARAMETER(LCL.Bill_to_Address_Line_2);
 PARAMETER(LCL.Bill_to_Address_Line_3);
 PARAMETER(LCL.Bill_to_City);
 PARAMETER(LCL.Bill_to_State_Code);
 PARAMETER(LCL.Bill_to_Zip_Postal_Code);
 PARAMETER(LCL.Customer_Purchase_Order_#);
 PARAMETER(LCL.Order_Date);
 PARAMETER(LCL.Requested_Ship_Date);
 PARAMETER(LCL.Actual_Shipped_Date);
 PARAMETER(LCL.Cancel_Date);
 PARAMETER(LCL.Terms_Code);
 PARAMETER(LCL.Special_Instructions);
 PARAMETER(LCL.Special_Instructions_2);
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(LCL.Comment_Print_Acknowledge);
 PARAMETER(LCL.Comment_Print_Inv_Cr_Memo);
 PARAMETER(LCL.Comment_Print_Pick_Slip);
 PARAMETER(LCL.Comment_Print_Ship_Doc);
 PARAMETER(LCL.Reason_Code);
 PARAMETER(LCL.Order_in_Use);
 PARAMETER(LCL.Header_Status);
 PARAMETER(LCL.Header_Status_Last);
 PARAMETER(LCL.Order_Type_Print_Status);
 PARAMETER(LCL.Scheduled_Ship_Date);
 PARAMETER(LCL.User_Original_Entry);
 PARAMETER(LCL.Date_of_Original_Entry);
 PARAMETER(LCL.Order_Value_Total);
 PARAMETER(LCL.Order_Weight_Total);
 PARAMETER(LCL.Credit_Hold);
 PARAMETER(LCL.Production_Hold);
 PARAMETER(LCL.New_Customer_Hold);
 PARAMETER(LCL.Requested_Delivery_Date);
 PARAMETER(LCL.Requested_Delivery_Time);
 PARAMETER(LCL.Accounts_Receiv_Ent_1);
 PARAMETER(LCL.Accounts_Receiv_Ent_2);
 PARAMETER(LCL.Load_ID);
 PARAMETER(LCL.Absorbed_Freight_Rate_CWT);
 PARAMETER(LCL.Rated_Freight);
 PARAMETER(LCL.LTL_Flag);
 PARAMETER(LCL.Price_Audit);
 PARAMETER(LCL.Price_Status);
 PARAMETER(LCL.Shipping_Method);
 PARAMETER(LCL.Export_Status);
 PARAMETER(LCL.Palletize);
 PARAMETER(LCL.Shrink_Wrap);
 PARAMETER(LCL.Slip_Sheet);
 PARAMETER(LCL.Age_Code);
 PARAMETER(LCL.Reefer_Temperature);
 PARAMETER(LCL.Load_Type);
 PARAMETER(LCL.Attach_to_Invoice_Number);
 PARAMETER(LCL.Load_Plan_Order);
 PARAMETER(LCL.Print_Pick_Slip);
 PARAMETER(LCL.Resell_Reference_Number);
 PARAMETER(LCL.Special_Comment_1);
 PARAMETER(LCL.Special_Comment_2);
 PARAMETER(LCL.Affect_Auto_Accruals);
 PARAMETER(LCL.Sales_Route_Code);
 PARAMETER(LCL.Manager_Level_Code);
 PARAMETER(LCL.VP_Level_Code);
 PARAMETER(LCL.Attach_to_Order_Number);
 PARAMETER(LCL.Reason_for_Price_Audit);
 PARAMETER(LCL.Invoice_Number);
 PARAMETER(LCL.Invoice_Suffix);
 PARAMETER(LCL.Invoice_Date);
 PARAMETER(LCL.Event_Code);
 PARAMETER(LCL.Trans_Contol_AS400_Plant);
 PARAMETER(LCL.Modified_Flag);
 PARAMETER(LCL.A_R_order_Value_Total);
 PARAMETER(LCL.Billing_Activity_Type);
 PARAMETER(LCL.Block_Order_Flag);
 PARAMETER(LCL.Order_Certification_Flag);
 PARAMETER(LCL.Invoice_Order_Value_Tot);
 PARAMETER(LCL.Process_Sts_for_3C);
 PARAMETER(LCL.Order_Conf_Fax_Sts);
 PARAMETER(LCL.Manifest_Fax_Sts);
 PARAMETER(LCL.Invoice_Fax_Sts);
 PARAMETER(LCL.Transfer_in_Storage_Ind);
 PARAMETER(LCL.Email_Cust_On_Order_Ship);
 PARAMETER(LCL.Order_Emailed);
 PARAMETER(LCL.Export_Docs_Go_w_Driver);
 PARAMETER(LCL.Shipping_Temp_Code_C_F);
 PARAMETER(LCL.Broker_Order_Status);
 PARAMETER(LCL.Air_Freight_Order);
 PARAMETER(LCL.Order_Requires_Review);
 PARAMETER(LCL.OH_Load_Plan_Ready);
 PARAMETER(LCL.Export_USDA_Approved);
 PARAMETER(LCL.HPB_Ship_to_Warehouse);
 PARAMETER(LCL.OH_TF_Exempt_Code);
 PARAMETER(LCL.OH_Appt_Confirmation_Dt);
 PARAMETER(LCL.JPN_Invoice_Issuance_Date);
 PARAMETER(LCL.Load_Actual_Shipped_Date);
 PARAMETER(LCL.Load_BOL_Complete_Date);
 PARAMETER(LCL.Load_Truck_Departure_Date);
 PARAMETER(LCL.Maximum_Gross_Weight);
 PARAMETER(LCL.Time_of_Original_Entry);
 PARAMETER(LCL.OH_Appt_Confirmation_Tm);
 PARAMETER(LCL.Load_BOL_Complete_Time);
 PARAMETER(LCL.Load_Truck_Departure_Time);
 PARAMETER(LCL.Act_Frt_Reference_Amount);
 PARAMETER(LCL.Act_Non_Ref_Frt_Amount);
 PARAMETER(LCL.OH_Fuel_Surcharge_Amount);
 PARAMETER(LCL.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(LCL.OH_Total_Ref_Frt_Amt);
 PARAMETER(LCL.Claim_Number);
 PARAMETER(LCL.EDI_Status_1);
 PARAMETER(LCL.EDI_Status_2);
 PARAMETER(LCL.EDI_Status_3);
 PARAMETER(LCL.Job_Time);
 PARAMETER(LCL.User_Id);
 PARAMETER(LCL.Job_Name);
 PARAMETER(LCL.Job_Date);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?*** Order must still be a Block Order
 CASE;

 // IF LCL.Block Order Flag is Not Block Order
 IF LCL.Block_Order_Flag = *BLANK/'F'/'N'/'Y';

 // LCL.BOE Error Comment = CONCAT(CON.Order is No longer in Blo,CON.ck Order status.,CON.*ZERO)
 LCL.BOE_Error_Comment = 'Order is No longer in Blo' + 'ck Order status.' (*ZERO);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(*MISSING);
 PARAMETER('ORDFRM');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 //?*** Order can't be Firmed or Complete.
 CASE;

 // IF LCL.Header Status is Confirmed & Complete
 IF LCL.Header_Status = 'C'/'R';

 // LCL.BOE Error Comment = CONCAT(CON.Order is Confirmed or Com,CON.plete. No change allowed.,CON.*
 LCL.BOE_Error_Comment = 'Order is Confirmed or Com' + 'plete. No change allowed.' (*ZERO);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(*MISSING);
 PARAMETER('ORDCOM');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 //?*** Order can't be in use.
 CASE;

 // IF LCL.Order in Use is yes
 IF LCL.Order_in_Use = 'Y';

 // LCL.BOE Error Comment = CONCAT(CON.Order is In Use and canno,CON.t be changed.,CON.*ZERO)
 LCL.BOE_Error_Comment = 'Order is In Use and canno' + 't be changed.' (*ZERO);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(*MISSING);
 PARAMETER('INUSE');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 //?*** Order cannot have been updated after the upload.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.Job Date GT DB1.Create Date
 IF LCL.Job_Date > DB1.Create_Date;

 // LCL.BOE Error Comment = CONCAT(CON.Block Order already exist,CON.s in OMS, can not create.,CON.*
 LCL.BOE_Error_Comment = 'Block Order already exist' + 's in OMS, can not create.' (*ZERO);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(*MISSING);
 PARAMETER('ORDUPD');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Hdr/Dtl Validation PassSv = LCL.Hdr/Dtl Validation Pass U
 LCL.Hdr_Dtl_Validation_PassSv = LCL.Hdr_Dtl_Validation_Pass_U;

 //?*** Test Header chg date against all Dtl lines
 EXECUTE FUNCTION(VAL Block Ord Dates) TYPE(RTVOBJ) FILE(OPBGWKP)                AC2222183;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(LCL.Hdr_Dtl_Validation_Pass_U);
 {
  //?USER: Initialize routine

  // PAR.Hdr/Dtl Validation Pass U = CND.Yes
  PAR.Hdr_Dtl_Validation_Pass_U = 'Y';

  //?USER: Process Data record

  //?*** Test to see if Ord has been updated since the Blk Ord was created.
  CASE;

  // IF PAR.Create Date LT DB1.Job Date
  IF PAR.Create_Date < DB1.Job_Date;

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  QUIT;

  //?*** Test to see if Ord has been updated since the Blk Ord was created.
  // IF PAR.Create Date EQ DB1.Job Date
  IF PAR.Create_Date = DB1.Job_Date;

  // AND PAR.Create Time LE DB1.Job Time
  AND PAR.Create_Time <= DB1.Job_Time;

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  QUIT;

  ENDIF;

 }

 CASE;

 // IF LCL.Hdr/Dtl Validation Pass U is No
 IF LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 // LCL.BOE Error Comment = CONCAT(CON.Order has been updated af,CON.ter the upload.,CON.*ZERO)
 LCL.BOE_Error_Comment = 'Order has been updated af' + 'ter the upload.' (*ZERO);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(*MISSING);
 PARAMETER('ORDUPD');
 PARAMETER(LCL.BOE_Error_Comment);

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.Hdr/Dtl Validation PassSv is No
 IF LCL.Hdr_Dtl_Validation_PassSv = 'N';

 // LCL.Hdr/Dtl Validation Pass U = LCL.Hdr/Dtl Validation PassSv
 LCL.Hdr_Dtl_Validation_Pass_U = LCL.Hdr_Dtl_Validation_PassSv;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(RTV All Blk Ord Trns  RT) TYPE(RTVOBJ) FILE(PUC4CPP)           AC2222009;
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(NLL.Company_Number);
 PARAMETER(LCL.Order_Number);
 PARAMETER(NLL.Record_Processed);
 PARAMETER(NLL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?*** Surrogate must be the same as the original
 CASE;

 // IF NOT PGM.*Return code is *Normal
 IF ! ( PGM.*Return_code = *BLANK );

 // OR LCL.Order Number NE DB1.Order Number
 OR LCL.Order_Number <> DB1.Order_Number;

 // LCL.BOE Error Comment = CONCAT(CON.Invalid Surrogate Number.,CON.*BLANK,CON.*ZERO)
 LCL.BOE_Error_Comment = 'Invalid Surrogate Number.' + *BLANK (*ZERO);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(*MISSING);
 PARAMETER('MISMAT');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 //?*** Validate Spot Buy
 CASE;

 // IF DB1.OHE Spot Buy is Valid Values
 IF DB1.OHE_Spot_Buy = 'P'/'S'/'T';

 //?*** Validate Spot Buy
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.BOE Error Comment = CONCAT(CON.Invalid Spot Buy Value,CON.*BLANK,CON.*ZERO)
 LCL.BOE_Error_Comment = 'Invalid Spot Buy Value' + *BLANK (*ZERO);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('SPTBUY');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 //?*** WI546_2 Validate shipping date
 CASE;

 // IF DB1.Requested Ship Date is entered
 IF DB1.Requested_Ship_Date <> *ZERO;

 // AND DB1.Requested Delivery Date is entered
 AND DB1.Requested_Delivery_Date <> *ZERO;

 // AND DB1.Shipping Method is Prepaid
 AND ( DB1.Shipping_Method = 'PR'/'PT';

 // OR LCL.Shipping Method is Prepaid
 OR LCL.Shipping_Method = 'PR'/'PT' );

 //?*** WI546_2 Validate Requested Ship Date
 CASE;

 // IF DB1.Requested Ship Date is entered
 IF DB1.Requested_Ship_Date <> *ZERO;

 //?** Saving the date to pass into the Detail validation.
 // LCL.Requested Ship Date = DB1.Requested Ship Date
 LCL.Requested_Ship_Date = DB1.Requested_Ship_Date;

 EXECUTE FUNCTION(RTV Calendar           RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1102049;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Requested_Ship_Date);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.Calendar not found
  PGM.*Return_code = 'USR0018';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

 //?** if Requested Ship Date is in Calendar
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // LCL.Date From Convert USR = CVTVAR(DB1.Requested Ship Date)
 LCL.Date_From_Convert_USR = CVTVAR(DB1.Requested_Ship_Date);

 // LCL.Text usr 11 = CND.Not Entered
 LCL.Text_usr_11 = *BLANK;

 // Call program Cvt Date              UP.
 CALL PROGRAM(Cvt Date              UP) ('POD5UPR');
 PARAMETER(LCL.Date_From_Convert_USR);
 PARAMETER(LCL.Text_usr_11);
 PARAMETER(*CYMD);
 PARAMETER(*YYMD);
 PARAMETER(*NONE);

 CASE;

 // IF LCL.Text usr 11 is Not Entered
 IF LCL.Text_usr_11 = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Requested Ship Date = DB1.Requested Ship Date
 LCL.Requested_Ship_Date = DB1.Requested_Ship_Date;

 ENDIF;

 //?** if Requested Ship Date is in Calendar
 // IF PGM.*Return code is Calendar not found
 IF PGM.*Return_code = 'USR0018';

 //?** 1019801 JM - WI546_2 Make sure RSD is present in Calendar.
 CASE;

 // IF PGM.*Return code is Calendar not found
 IF PGM.*Return_code = 'USR0018';

 // LCL.BOE Error Comment = CONCAT(CON.Requested Shipping Date N,CON.ot Found In Calendar.,CON.*ZERO
 LCL.BOE_Error_Comment = 'Requested Shipping Date N' + 'ot Found In Calendar.' (*ZERO);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('INVDAT');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

 //?*** WI546_2 Validate Requested Delivery Date
 CASE;

 // IF DB1.Requested Delivery Date is entered
 IF DB1.Requested_Delivery_Date <> *ZERO;

 // LCL.Text usr 11 = CND.Not Entered
 LCL.Text_usr_11 = *BLANK;

 // LCL.Date From Convert USR = CVTVAR(DB1.Requested Delivery Date)
 LCL.Date_From_Convert_USR = CVTVAR(DB1.Requested_Delivery_Date);

 // Call program Cvt Date              UP.
 CALL PROGRAM(Cvt Date              UP) ('POD5UPR');
 PARAMETER(LCL.Date_From_Convert_USR);
 PARAMETER(LCL.Text_usr_11);
 PARAMETER(*CYMD);
 PARAMETER(*YYMD);
 PARAMETER(*NONE);

 CASE;

 // IF LCL.Text usr 11 is Not Entered
 IF LCL.Text_usr_11 = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Requested Delivery Date = DB1.Requested Delivery Date
 LCL.Requested_Delivery_Date = DB1.Requested_Delivery_Date;

 ENDIF;

 //?** 1019801 JM - WI546_2 Make sure RDD is present in Calendar.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Calendar           RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1102049;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Requested_Delivery_Date);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.Calendar not found
  PGM.*Return_code = 'USR0018';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

 CASE;

 // IF PGM.*Return code is Calendar not found
 IF PGM.*Return_code = 'USR0018';

 // LCL.BOE Error Comment = CONCAT(CON.Requested Delivery Date N,CON.ot Found In Calendar.,CON.*ZERO
 LCL.BOE_Error_Comment = 'Requested Delivery Date N' + 'ot Found In Calendar.' (*ZERO);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('INVDEL');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

 // LCL.Warehouse Code = DB1.Warehouse Code
 LCL.Warehouse_Code = DB1.Warehouse_Code;

 // Call program CLC Must Ship 4 Req DlvXF.
 CALL PROGRAM(CLC Must Ship 4 Req DlvXF) ('PMUSXFR');
 PARAMETER(LCL.Must_Ship_Error);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Ship_To_City);
 PARAMETER(LCL.Ship_To_State_Code);
 PARAMETER(LCL.Requested_Ship_Date);
 PARAMETER(LCL.Requested_Ship_Date);
 PARAMETER(LCL.Requested_Delivery_Date);
 PARAMETER(LCL.Requested_Delivery_Time);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(LCL.Must_Ship_Date_USR);
 PARAMETER(LCL.Must_Ship_Time_USR);
 PARAMETER(*ZERO);

 CASE;

 // IF LCL.Must Ship Error is Miles to Next=Zeros
 IF LCL.Must_Ship_Error = 'MTN';

 // LCL.Must Ship Error = CND.No Error
 LCL.Must_Ship_Error = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(PMT Must Ship Err Msg  IF) TYPE(EXCINTFUN)                     AC1521273;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Must_Ship_Error);
 PARAMETER(LCL.Explaination_Text_1);
 {
  //?Execute internal function

  // PAR.Explaination Text 1 = CON.*BLANK
  PAR.Explaination_Text_1 = *BLANK;

  CASE;

  // IF PAR.Must Ship Error is No Error
  IF PAR.Must_Ship_Error = *BLANK;

  // IF PAR.Must Ship Error is Must Ship before NOW
  IF PAR.Must_Ship_Error = 'NOW';

  // PAR.Explaination Text 1 = CON.Order should have already
  PAR.Explaination_Text_1 = 'Order should have already';

  // PAR.Explaination Text 1 = CONCAT(PAR.Explaination Text 1,CON. shipped,CON.*ZERO)
  PAR.Explaination_Text_1 = PAR.Explaination_Text_1 + ' shipped' (*ZERO);

  // IF PAR.Must Ship Error is Deadline not bef Delivery
  IF PAR.Must_Ship_Error = 'DDD';

  // PAR.Explaination Text 1 = CON.Deadline after Delivery
  PAR.Explaination_Text_1 = 'Deadline after Delivery';

  // IF PAR.Must Ship Error is Must Shp not bef Deadline
  IF PAR.Must_Ship_Error = 'MSD';

  // PAR.Explaination Text 1 = CON.Must Ship after Deadline
  PAR.Explaination_Text_1 = 'Must Ship after Deadline';

  // IF PAR.Must Ship Error is Schd Shp not bef Must Shp
  IF PAR.Must_Ship_Error = 'SSD';

  // PAR.Explaination Text 1 = CON.Scheduled Ship after Must
  PAR.Explaination_Text_1 = 'Scheduled Ship after Must';

  // PAR.Explaination Text 1 = CONCAT(PAR.Explaination Text 1,CON. Ship,CON.*ZERO)
  PAR.Explaination_Text_1 = PAR.Explaination_Text_1 + ' Ship' (*ZERO);

  // IF PAR.Must Ship Error is Miles to Next=Zeros
  IF PAR.Must_Ship_Error = 'MTN';

  // PAR.Explaination Text 1 = CON.No Miles Between Cities
  PAR.Explaination_Text_1 = 'No Miles Between Cities';

  // IF PAR.Must Ship Error is Req Ship should =Must Shp
  IF PAR.Must_Ship_Error = 'RSD';

  // PAR.Explaination Text 1 = CON.Requested Ship Date shoul
  PAR.Explaination_Text_1 = 'Requested Ship Date shoul';

  // PAR.Explaination Text 1 = CONCAT(PAR.Explaination Text 1,CON.d = Must Ship,CON.*ZERO)
  PAR.Explaination_Text_1 = PAR.Explaination_Text_1 + 'd = Must Ship' (*ZERO);

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?--- unexpected error ---
  // PAR.Explaination Text 1 = Condition name of PAR.Must Ship Error
  PAR.Explaination_Text_1 = RTVCND(PAR.Must_Ship_Error);

  ENDIF;

 }

 CASE;

 // IF LCL.Must Ship Error is Error List
 IF LCL.Must_Ship_Error = 'DDD'/'MTN'/'NOW'/'MSD'/'RSD'/'SSD';

 //?Populate error message text
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Convert 6,0 HHMMSS format to 4,0 HHMM time format.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Time Alpha usr 6 = CVTVAR(LCL.Must Ship Time        USR)
 LCL.Time_Alpha_usr_6 = CVTVAR(LCL.Must_Ship_Time_USR);

 // LCL.Time HHMM Alpha USR = SUBSTRING(LCL.Time Alpha usr 6,CON.1,CON.4)
 LCL.Time_HHMM_Alpha_USR = SUBSTRING(LCL.Time_Alpha_usr_6:1:4);

 ENDIF;

 // LCL.USR Work Field 7A = CVTVAR(LCL.Must Ship Date        USR)
 LCL.USR_Work_Field_7A = CVTVAR(LCL.Must_Ship_Date_USR);

 // LCL.USR Date Alpha = SUBSTRING(LCL.USR Work Field 7A,CON.2,CON.6)
 LCL.USR_Date_Alpha = SUBSTRING(LCL.USR_Work_Field_7A:2:6);

 // LCL.BOE Error Comment = CONCAT(CON.Order must be shipped on,CON.or before:,CND.*One)
 LCL.BOE_Error_Comment = 'Order must be shipped on' + 'or before:' (1);

 // LCL.BOE Error Comment = CONCAT(LCL.BOE Error Comment,LCL.USR Date Alpha,CND.*One)
 LCL.BOE_Error_Comment = LCL.BOE_Error_Comment + LCL.USR_Date_Alpha (1);

 // LCL.BOE Error Comment = CONCAT(LCL.BOE Error Comment,LCL.Time HHMM Alpha USR,CND.*One)
 LCL.BOE_Error_Comment = LCL.BOE_Error_Comment + LCL.Time_HHMM_Alpha_USR (1);

 ENDIF;

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('INVDAT');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

 //?*** If no errors so far, continue validating Header & Details
 CASE;

 // IF LCL.Hdr/Dtl Validation Pass U is Yes
 IF LCL.Hdr_Dtl_Validation_Pass_U = 'Y';

 // LCL.Requested Ship Date = DB1.Requested Ship Date
 LCL.Requested_Ship_Date = DB1.Requested_Ship_Date;

 //?** Keep scheduled & requested ship date in sync.
 CASE;

 // IF LCL.Requested Ship Date is entered
 IF LCL.Requested_Ship_Date <> *ZERO;

 // AND LCL.Requested Ship Date NE LCL.Scheduled Ship Date
 AND LCL.Requested_Ship_Date <> LCL.Scheduled_Ship_Date;

 // LCL.Scheduled Ship Date = LCL.Requested Ship Date
 LCL.Scheduled_Ship_Date = LCL.Requested_Ship_Date;

 ENDIF;

 // LCL.Palletize = DB1.Palletize
 LCL.Palletize = DB1.Palletize;

 // LCL.Slip Sheet = DB1.Slip Sheet
 LCL.Slip_Sheet = DB1.Slip_Sheet;

 // LCL.Shipping Method = DB1.Shipping Method
 LCL.Shipping_Method = DB1.Shipping_Method;

 // LCL.Reefer Temperature = DB1.Reefer Temperature
 LCL.Reefer_Temperature = DB1.Reefer_Temperature;

 // LCL.Requested Delivery Date = DB1.Requested Delivery Date
 LCL.Requested_Delivery_Date = DB1.Requested_Delivery_Date;

 // LCL.Shrink Wrap = DB1.Shrink Wrap
 LCL.Shrink_Wrap = DB1.Shrink_Wrap;

 EXECUTE FUNCTION(VAL Block Header chgs RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2222108;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(LCL.Requested_Ship_Date);
 PARAMETER(DB1.OHE_Spot_Buy);
 PARAMETER(DB1.Country_Code);
 PARAMETER(LCL.Palletize);
 PARAMETER(LCL.Slip_Sheet);
 PARAMETER(LCL.Shipping_Method);
 PARAMETER(LCL.Reefer_Temperature);
 PARAMETER(LCL.Requested_Delivery_Date);
 PARAMETER(LCL.Shrink_Wrap);
 PARAMETER(LCL.Hdr_Dtl_Validation_Pass_U);
 PARAMETER(LCL.Change_Flag_USR);
 {
  //?USER: Initialize routine

  // PAR.Change Flag USR = CND.No
  PAR.Change_Flag_USR = 'N';

  // PAR.Hdr/Dtl Validation Pass U = CND.Yes
  PAR.Hdr_Dtl_Validation_Pass_U = 'Y';

  //?USER: Process Data record

  //?** 5 Requested Ship Date
  CASE;

  // IF PAR.Requested Ship Date is entered
  IF PAR.Requested_Ship_Date <> *ZERO;

  //?WI546_2-Validate Date format is CYMD for Requested Ship Date
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Text usr 11 = CND.Not Entered
  LCL.Text_usr_11 = *BLANK;

  // LCL.Date From Convert USR = CVTVAR(PAR.Requested Ship Date)
  LCL.Date_From_Convert_USR = CVTVAR(PAR.Requested_Ship_Date);

  // Call program Cvt Date              UP.
  CALL PROGRAM(Cvt Date              UP) ('POD5UPR');
  PARAMETER(LCL.Date_From_Convert_USR);
  PARAMETER(LCL.Text_usr_11);
  PARAMETER(*CYMD);
  PARAMETER(*YYMD);
  PARAMETER(*NONE);

  CASE;

  // IF LCL.Text usr 11 is Not Entered
  IF LCL.Text_usr_11 = *BLANK;

  // LCL.BOE Error Comment = CONCAT(CON.Invalid Requested Ship Da,CON.te Format.,CON.*ZERO)
  LCL.BOE_Error_Comment = 'Invalid Requested Ship Da' + 'te Format.' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(PAR.Surrogate_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER('INVRSD');
  PARAMETER(LCL.BOE_Error_Comment);

  // LCL.Hdr/Dtl Validation Pass U = CND.No
  LCL.Hdr_Dtl_Validation_Pass_U = 'N';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Change Flag USR = CND.Yes
  PAR.Change_Flag_USR = 'Y';

  ENDIF;

  ENDIF;

  //?Validate Requested Ship Date in Calendar
  CASE;

  // IF PAR.Requested Ship Date NE DB1.Requested Ship Date
  IF PAR.Requested_Ship_Date <> DB1.Requested_Ship_Date;

  //?** Saving the date to pass into the Detail validation.
  // LCL.Requested Ship Date = PAR.Requested Ship Date
  LCL.Requested_Ship_Date = PAR.Requested_Ship_Date;

  EXECUTE FUNCTION(RTV Calendar           RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1102049;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Requested_Ship_Date);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.Calendar not found
   PGM.*Return_code = 'USR0018';

   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  //?** Error if Requested Ship Date is not in Calendar
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // PAR.Change Flag USR = CND.Yes
  PAR.Change_Flag_USR = 'Y';

  //?** Error if Requested Ship Date is not in Calendar
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.BOE Error Comment = CONCAT(CON.Requested Ship Date not y,CON.et in Calendar File,CON.*ZERO)
  LCL.BOE_Error_Comment = 'Requested Ship Date not y' + 'et in Calendar File' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(PAR.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('INVRSD');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  ENDIF;

  ENDIF;

  //?** 5 Requested Ship Date
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Requested Ship Date = DB1.Requested Ship Date
  LCL.Requested_Ship_Date = DB1.Requested_Ship_Date;

  ENDIF;

  //?** Requested Delivery Date
  CASE;

  // IF PAR.Requested Delivery Date is entered
  IF PAR.Requested_Delivery_Date <> *ZERO;

  // AND PAR.Requested Delivery Date NE DB1.Requested Delivery Date
  AND PAR.Requested_Delivery_Date <> DB1.Requested_Delivery_Date;

  //?WI546_2-Validate Date format is CYMD for Requested Delivery Date
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Text usr 11 = CND.Not Entered
  LCL.Text_usr_11 = *BLANK;

  // LCL.Date From Convert USR = CVTVAR(PAR.Requested Delivery Date)
  LCL.Date_From_Convert_USR = CVTVAR(PAR.Requested_Delivery_Date);

  // Call program Cvt Date              UP.
  CALL PROGRAM(Cvt Date              UP) ('POD5UPR');
  PARAMETER(LCL.Date_From_Convert_USR);
  PARAMETER(LCL.Text_usr_11);
  PARAMETER(*CYMD);
  PARAMETER(*YYMD);
  PARAMETER(*NONE);

  CASE;

  // IF LCL.Text usr 11 is Not Entered
  IF LCL.Text_usr_11 = *BLANK;

  // LCL.BOE Error Comment = CONCAT(CON.Invalid Requested Deliver,CON.y Date Format.,CON.*ZERO)
  LCL.BOE_Error_Comment = 'Invalid Requested Deliver' + 'y Date Format.' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(PAR.Surrogate_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER('INVDEL');
  PARAMETER(LCL.BOE_Error_Comment);

  // LCL.Hdr/Dtl Validation Pass U = CND.No
  LCL.Hdr_Dtl_Validation_Pass_U = 'N';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Change Flag USR = CND.Yes
  PAR.Change_Flag_USR = 'Y';

  ENDIF;

  ENDIF;

  //?Validate Requested Delivery Date in Calendar
  CASE;

  // IF PAR.Requested Delivery Date NE DB1.Requested Delivery Date
  IF PAR.Requested_Delivery_Date <> DB1.Requested_Delivery_Date;

  //?** Saving the date to pass into the Detail validation.
  // LCL.Requested Delivery Date = PAR.Requested Delivery Date
  LCL.Requested_Delivery_Date = PAR.Requested_Delivery_Date;

  EXECUTE FUNCTION(RTV Calendar           RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1102049;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Requested_Delivery_Date);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.Calendar not found
   PGM.*Return_code = 'USR0018';

   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  //?** Error if Requested Ship Date is not in Calendar
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // PAR.Change Flag USR = CND.Yes
  PAR.Change_Flag_USR = 'Y';

  //?** Error if Requested Ship Date is not in Calendar
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.BOE Error Comment = CONCAT(CON.Requested Delivery Date n,CON.ot yet in Calendar File,CON.*Z
  LCL.BOE_Error_Comment = 'Requested Delivery Date n' + 'ot yet in Calendar File' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(PAR.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('INVRSD');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  ENDIF;

  ENDIF;

  //?** Requested Delivery Date
  // IF PAR.Requested Delivery Date is entered
  IF PAR.Requested_Delivery_Date <> *ZERO;

  // AND PAR.Requested Delivery Date EQ DB1.Requested Delivery Date
  AND PAR.Requested_Delivery_Date = DB1.Requested_Delivery_Date;

  //?** Requested Delivery Date
  // IF PAR.Requested Delivery Date is not entered
  IF PAR.Requested_Delivery_Date = *ZERO;

  // LCL.Requested Delivery Date = DB1.Requested Delivery Date
  LCL.Requested_Delivery_Date = DB1.Requested_Delivery_Date;

  //?** Requested Delivery Date
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.BOE Error Comment = CONCAT(CON.Invalid Requested Deliver,CON.y Date.,CON.*ZERO)
  LCL.BOE_Error_Comment = 'Invalid Requested Deliver' + 'y Date.' (*ZERO);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(PAR.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('INVDAT');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  ENDIF;

  //?** Requested Delivery Time
  CASE;

  // IF PAR.Requested Delivery Date is entered
  IF PAR.Requested_Delivery_Date <> *ZERO;

  EXECUTE FUNCTION(Rtv All) TYPE(RTVOBJ) FILE(PUAAREP)                            AC2149720;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(NLL.M3_Supplier_ID);
  PARAMETER(NLL.Dft_Mode_of_Transportaton);
  PARAMETER(NLL.Buying_Group);
  PARAMETER(NLL.Buying_Group_Opt_In_Out);
  PARAMETER(NLL.Ship_To_Establishment_nbr);
  PARAMETER(NLL.PM_Pallet_Type);
  PARAMETER(NLL.Cust_Dft_Price_Type);
  PARAMETER(NLL.Cust_Dft_Age_Days);
  PARAMETER(LCL.Requested_Delivery_Time);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?** Default if we don't find it.
  CASE;

  // IF LCL.Requested Delivery Time is Zero
  IF LCL.Requested_Delivery_Time = *ZERO;

  // LCL.Requested Delivery Time = CND.6 AM
  LCL.Requested_Delivery_Time = 0600;

  ENDIF;

  // PAR.Change Flag USR = CND.Yes
  PAR.Change_Flag_USR = 'Y';

  //?** Requested Delivery Time
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?**  No change
  // LCL.Requested Delivery Time = DB1.Requested Delivery Time
  LCL.Requested_Delivery_Time = DB1.Requested_Delivery_Time;

  ENDIF;

  //?** Shipping Method
  CASE;

  // IF PAR.Shipping Method is Not Entered
  IF PAR.Shipping_Method = *BLANK;

  //?** No change default to DB1
  // LCL.Shipping Method = DB1.Shipping Method
  LCL.Shipping_Method = DB1.Shipping_Method;

  //?** Shipping Method
  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF PAR.Shipping Method is Valid Values
  IF PAR.Shipping_Method = 'CR'/'CT'/'PR'/'PT';

  //?We B OK.
  // LCL.Shipping Method = PAR.Shipping Method
  LCL.Shipping_Method = PAR.Shipping_Method;

  // PAR.Change Flag USR = CND.Yes
  PAR.Change_Flag_USR = 'Y';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.BOE Error Comment = CONCAT(CON.Shipping Method is not,CON.a Valid Value.,CON.1)
  LCL.BOE_Error_Comment = 'Shipping Method is not' + 'a Valid Value.' (1);

  // Call program EXC Crt Blk Order ErrorEX.
  CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
  PARAMETER(PAR.Surrogate_Number);
  PARAMETER(*MISSING);
  PARAMETER('SHPMTH');
  PARAMETER(LCL.BOE_Error_Comment);

  // PAR.Hdr/Dtl Validation Pass U = CND.No
  PAR.Hdr_Dtl_Validation_Pass_U = 'N';

  ENDIF;

  ENDIF;

  //?** Reefer Temperature (Shipping Temperature)
  CASE;

  // IF PAR.Reefer Temperature NE DB1.Reefer Temperature
  IF PAR.Reefer_Temperature <> DB1.Reefer_Temperature;

  //?** Shipping Temp UOM (C or F)
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Change Flag USR = CND.Yes
  PAR.Change_Flag_USR = 'Y';

  EXECUTE FUNCTION(RTV All               RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2221988;
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(NLL.Warehouse_Description);
  PARAMETER(NLL.Address_Line_1);
  PARAMETER(NLL.Address_Line_2);
  PARAMETER(NLL.Address_Line_3);
  PARAMETER(NLL.City);
  PARAMETER(NLL.Zip_Postal_Code);
  PARAMETER(LCL.Production_Warehouse);
  PARAMETER(NLL.State_Code);
  PARAMETER(NLL.Lot_Tracking_Flag);
  PARAMETER(NLL.Default_Printer);
  PARAMETER(LCL.Warehouse_Type);
  PARAMETER(LCL.Trans_Contol_AS400_Plant);
  PARAMETER(NLL.Warehouse_Location);
  PARAMETER(NLL.Warehouse_Std_Chill_Time);
  PARAMETER(NLL.Warehouse_Chill_Time);
  PARAMETER(NLL.Include_in_Auto_Pre_Pick);
  PARAMETER(NLL.Default_Manifest_Copies);
  PARAMETER(NLL.Default_Load_Sequence);
  PARAMETER(NLL.WHS_Slotting_Limit_Type);
  PARAMETER(NLL.Shipping_Company);
  PARAMETER(NLL.Accounting_Company);
  PARAMETER(NLL.WHS_Sched_Prod_Max_Days);
  PARAMETER(NLL.WHS_Inventory_Chill_Time);
  PARAMETER(NLL.Parent_Warehouse);
  PARAMETER(NLL.Default_Shipping_Whs);
  PARAMETER(NLL.WHS_Live_with_Carlisle);
  PARAMETER(NLL.WHS_PFS_Interface);
  PARAMETER(NLL.WHS_Req_Meter_Reading_Shp);
  PARAMETER(NLL.WHS_Default_Load_Type);
  PARAMETER(NLL.WHS_TMS_Planning_Region);
  PARAMETER(NLL.Default_Carrier_Code);
  PARAMETER(NLL.Inventory_Logic_Version);
  PARAMETER(NLL.WHS_Auto_Inv_Restoration);
  PARAMETER(NLL.EDI_Status_1);
  PARAMETER(NLL.EDI_Status_2);
  PARAMETER(NLL.EDI_Status_3);
  PARAMETER(NLL.Record_Status);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // Call program RTV Shipping Temp      XF.
  CALL PROGRAM(RTV Shipping Temp      XF) ('PDSSXFR');
  PARAMETER(LCL.Warehouse_Type);
  PARAMETER(NLL.Reefer_Temperature_Dft);
  PARAMETER(LCL.Temperature_Code_C_F);

  // LCL.Reefer Temperature = DB1.Reefer Temperature
  LCL.Reefer_Temperature = DB1.Reefer_Temperature;

  ENDIF;

  //?** Reefer Temperature (Shipping Temperature)
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Reefer Temperature = DB1.Reefer Temperature
  LCL.Reefer_Temperature = DB1.Reefer_Temperature;

  ENDIF;

  //?** Palletize
  CASE;

  // IF PAR.Palletize is blank
  IF PAR.Palletize = *BLANK;

  //?** No change if blank
  // LCL.Palletize = DB1.Palletize
  LCL.Palletize = DB1.Palletize;

  //?** Palletize
  // IF PAR.Palletize is Y/N Values
  IF PAR.Palletize = 'N'/'Y';

  // LCL.Palletize = PAR.Palletize
  LCL.Palletize = PAR.Palletize;

  // PAR.Change Flag USR = CND.Yes
  PAR.Change_Flag_USR = 'Y';

  //?** Palletize
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Palletize = CND.blank
  LCL.Palletize = *BLANK;

  // PAR.Change Flag USR = CND.Yes
  PAR.Change_Flag_USR = 'Y';

  ENDIF;

  //?** Shrink Wrap
  CASE;

  // IF PAR.Shrink Wrap is blank
  IF PAR.Shrink_Wrap = *BLANK;

  //?** No change if blank
  // LCL.Shrink Wrap = DB1.Shrink Wrap
  LCL.Shrink_Wrap = DB1.Shrink_Wrap;

  //?** Shrink Wrap
  // IF PAR.Shrink Wrap is Y/N Values
  IF PAR.Shrink_Wrap = 'N'/'Y';

  // LCL.Shrink Wrap = PAR.Shrink Wrap
  LCL.Shrink_Wrap = PAR.Shrink_Wrap;

  // PAR.Change Flag USR = CND.Yes
  PAR.Change_Flag_USR = 'Y';

  //?** Shrink Wrap
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Shrink Wrap = CND.no
  LCL.Shrink_Wrap = 'N';

  // PAR.Change Flag USR = CND.Yes
  PAR.Change_Flag_USR = 'Y';

  ENDIF;

  //?** Slip Sheet
  CASE;

  // IF PAR.Slip Sheet is blank
  IF PAR.Slip_Sheet = *BLANK;

  //?** No change if blank
  // LCL.Slip Sheet = DB1.Slip Sheet
  LCL.Slip_Sheet = DB1.Slip_Sheet;

  //?** Slip Sheet
  // IF PAR.Slip Sheet is Y/N Values
  IF PAR.Slip_Sheet = 'N'/'Y';

  // LCL.Slip Sheet = PAR.Slip Sheet
  LCL.Slip_Sheet = PAR.Slip_Sheet;

  // PAR.Change Flag USR = CND.Yes
  PAR.Change_Flag_USR = 'Y';

  //?** Slip Sheet
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Slip Sheet = CND.blank
  LCL.Slip_Sheet = *BLANK;

  // PAR.Change Flag USR = CND.Yes
  PAR.Change_Flag_USR = 'Y';

  ENDIF;

  //?**  If no errors, Validate details.
  CASE;

  // IF PAR.Hdr/Dtl Validation Pass U is Yes
  IF PAR.Hdr_Dtl_Validation_Pass_U = 'Y';

  EXECUTE FUNCTION(Val Blck Ord Dtl Chgs RT) TYPE(RTVOBJ) FILE(PUC3CPP)           AC2222605;
  PARAMETER(PAR.Surrogate_Number);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Requested_Ship_Date);
  PARAMETER(PAR.OHE_Spot_Buy);
  PARAMETER(PAR.Country_Code);
  PARAMETER(PAR.Requested_Delivery_Date);
  PARAMETER(PAR.Hdr_Dtl_Validation_Pass_U);
  {
   //?USER: Initialize routine

   // LCL.USR Update Flag = CND.No
   LCL.USR_Update_Flag = *BLANK;

   //?USER: Process Data record

   //?S027442-JM-03/20/25-Fix zero order scenario in order detail
   CASE;

   // IF DB1.Order Number is Equal to zeros
   IF DB1.Order_Number = *ZERO;

   EXECUTE FUNCTION(Chg Block Order Upl DtlCH) TYPE(CHGOBJ) FILE(PUC3CPP)          AC2212476;
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(DB1.Sequence_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Detail_Line_Status);
   PARAMETER(DB1.Cancel_Date);
   PARAMETER(DB1.Quantity_Ordered);
   PARAMETER(DB1.Price_Method_Code);
   PARAMETER(DB1.Item_Age_Days);
   PARAMETER(DB1.OD_Price_Type);
   PARAMETER(DB1.Market_Pricing_Date);
   PARAMETER(DB1.OD_MPR_Prc_Ready_to_Send);
   PARAMETER(DB1.Price_Overage_Override);
   PARAMETER(DB1.Ham_Group_Number);
   PARAMETER(DB1.Palletize);
   PARAMETER(DB1.OD_Pallet_Type);
   PARAMETER(DB1.Slip_Sheet);
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Create_Date_Timestamp);
   PARAMETER(DB1.Create_User_ID);
   PARAMETER(DB1.Create_Program_Name);
   PARAMETER(DB1.Update_Date_Timestamp);
   PARAMETER(DB1.Update_User_Id);
   PARAMETER(DB1.Update_Program_Name);
   {
    //?USER: Processing before Data update

    // DB1.Update User Id = CON.INFORMATIC
    DB1.Update_User_Id = 'INFORMATIC';

    // DB1.Update Program Name = CON.AUTOUPLOAD
    DB1.Update_Program_Name = 'AUTOUPLOAD';

    // DB1.Update Date Timestamp = JOB.*System timestamp
    DB1.Update_Date_Timestamp = JOB.*System_timestamp;

   }

   ENDIF;

   //?S027442-JM-03/20/25-Read with Non zero order number from Header.
   EXECUTE FUNCTION(RTV All (Really all)  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2222188;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(DB1.Sequence_Number);
   PARAMETER(1);
   PARAMETER(LCL.Item_Code);
   PARAMETER(LCL.Warehouse_Code);
   PARAMETER(LCL.Ship_To_Customer);
   PARAMETER(LCL.Order_Group_Code);
   PARAMETER(LCL.Detail_Line_Status);
   PARAMETER(LCL.Detail_Line_Status_Last);
   PARAMETER(LCL.Billing_Detail_Cost_Dol);
   PARAMETER(LCL.Billing_Detail_Gross_Dol);
   PARAMETER(LCL.Billing_Detail_Net_Dol);
   PARAMETER(LCL.Quantity_to_Substitute);
   PARAMETER(LCL.Comment_Print_Acknowledge);
   PARAMETER(LCL.Comment_Print_Inv_Cr_Memo);
   PARAMETER(LCL.Comment_Print_Pick_Slip);
   PARAMETER(LCL.Comment_Print_Ship_Doc);
   PARAMETER(LCL.Extended_Amount);
   PARAMETER(LCL.Market_Pricing_Date);
   PARAMETER(LCL.Commodity_Market_Code);
   PARAMETER(LCL.Date_Method_Code);
   PARAMETER(LCL.Price_Method_Code);
   PARAMETER(LCL.Price_Overage_Override);
   PARAMETER(LCL.Contract_Number);
   PARAMETER(LCL.Price_Status);
   PARAMETER(LCL.Pricing_Date_Used);
   PARAMETER(LCL.U_M_Base_Price);
   PARAMETER(LCL.U_M_Ordered);
   PARAMETER(LCL.Work_Confirm_Status);
   PARAMETER(LCL.Work_Over_Short_Status);
   PARAMETER(LCL.OD_Production_Plan_Sts);
   PARAMETER(LCL.Order_Desc_Line_One);
   PARAMETER(LCL.Order_Desc_Line_Two);
   PARAMETER(LCL.Age_Code);
   PARAMETER(LCL.Palletize);
   PARAMETER(LCL.Slip_Sheet);
   PARAMETER(LCL.Catch_Weight_Status);
   PARAMETER(LCL.Price_Audit);
   PARAMETER(LCL.Price_Audit_Reason_Code);
   PARAMETER(LCL.Production_Date_Control);
   PARAMETER(LCL.Rated_Freight);
   PARAMETER(LCL.Quantity_Ordered);
   PARAMETER(LCL.Weight_Ordered);
   PARAMETER(LCL.Quantity_Scheduled);
   PARAMETER(LCL.Weight_Scheduled);
   PARAMETER(LCL.Quantity_Shipped_Total);
   PARAMETER(LCL.Weight_Shipped_Total);
   PARAMETER(LCL.Unit_Cost_Pricing_U_M);
   PARAMETER(LCL.Unit_Cost_Per_Pound);
   PARAMETER(LCL.Unit_Price);
   PARAMETER(LCL.Unit_Price_Credit);
   PARAMETER(LCL.Unit_Price_Ordered_U_M);
   PARAMETER(LCL.Unit_Weight_Ordered_U_M);
   PARAMETER(LCL.Tare_Weight_Total);
   PARAMETER(LCL.Requested_Ship_Date);
   PARAMETER(LCL.Scheduled_Ship_Date);
   PARAMETER(LCL.Actual_Shipped_Date);
   PARAMETER(LCL.Affect_Inventory_Status);
   PARAMETER(LCL.Affect_Sales_Doll_Status);
   PARAMETER(LCL.Affect_Sales_Pnds_Status);
   PARAMETER(LCL.Item_Structure_Type_Code);
   PARAMETER(LCL.Item_Structure_Group_Code);
   PARAMETER(LCL.Item_Structure_Class_Code);
   PARAMETER(LCL.Item_Level);
   PARAMETER(LCL.Quality_Level);
   PARAMETER(LCL.Pricing_Product_Class_Rep);
   PARAMETER(LCL.Season_Product_Class_Repo);
   PARAMETER(LCL.Date_of_Original_Entry);
   PARAMETER(LCL.User_Profile_Name);
   PARAMETER(LCL.Country_Code);
   PARAMETER(LCL.Event_Code);
   PARAMETER(LCL.Reason_Code);
   PARAMETER(LCL.Sales_Route_Code);
   PARAMETER(LCL.Modified_Flag);
   PARAMETER(LCL.Substituted_Flag);
   PARAMETER(LCL.OD_Schedule_Override_Sts);
   PARAMETER(LCL.Invoice_Unit_Price);
   PARAMETER(LCL.Invoice_Extended_Amt);
   PARAMETER(LCL.Ham_Group_Number);
   PARAMETER(LCL.OD_Adj_Type_Override);
   PARAMETER(LCL.Affect_Trade_Fund);
   PARAMETER(LCL.Affect_Commission);
   PARAMETER(LCL.Affect_Pricing);
   PARAMETER(LCL.Released_by_User_Sts_Y_N);
   PARAMETER(LCL.Ord_TF_Exempt_Code);
   PARAMETER(LCL.OD_Pallet_Type);
   PARAMETER(LCL.Production_Warehouse);
   PARAMETER(LCL.OD_Price_Type);
   PARAMETER(LCL.Warehouse_Pallets_Loaded);
   PARAMETER(LCL.Consumed_Item_Code);
   PARAMETER(LCL.Deadline_Depart_Date_LH);
   PARAMETER(LCL.OD_Price_Type_Ref_Num);
   PARAMETER(LCL.OD_Firm_Date);
   PARAMETER(LCL.Deadline_Depart_Time_LH);
   PARAMETER(LCL.Price_Code);
   PARAMETER(LCL.Maximum_Net_Weight);
   PARAMETER(LCL.Substitution_Line_Number);
   PARAMETER(LCL.Max_Qty_to_sched_per_day);
   PARAMETER(LCL.Warehouse_Pallet_Tare);
   PARAMETER(LCL.Warehouse_Avg_Pallet_Tare);
   PARAMETER(LCL.OD_Item_Target_Price);
   PARAMETER(LCL.OD_Estimated_Gross_Weight);
   PARAMETER(LCL.OD_Maximum_Unit_Weight);
   PARAMETER(LCL.Order_Gate_Final_Price);
   PARAMETER(LCL.OD_Ceiling_Price);
   PARAMETER(LCL.OD_Gate_Final_Price_Adj);
   PARAMETER(LCL.OD_Weighted_Avg_Price);
   PARAMETER(LCL.OD_Original_Ordered_Qty);
   PARAMETER(LCL.OD_Cancel_Date);
   PARAMETER(LCL.OD_Unused_Prc_7);
   PARAMETER(LCL.OD_Unused_Prc_8);
   PARAMETER(LCL.OD_MPR_Sent_to_USDA_Sts);
   PARAMETER(LCL.OD_MPR_Prc_Ready_to_Send);
   PARAMETER(LCL.OD_UnUsed_Price_Sts_3);
   PARAMETER(LCL.Weight_Amount_Entered);
   PARAMETER(LCL.Item_Age_Days);
   PARAMETER(LCL.Production_Ovr_AgeDte_Fr);
   PARAMETER(LCL.Production_Ovr_AgeDte_To);
   PARAMETER(LCL.OD_Spot_Buy);
   PARAMETER(LCL.OD_Clm_Full_Return_to_Plt);
   PARAMETER(LCL.Order_Line_Error_Type);
   PARAMETER(LCL.OD_Market_Begin_Date);
   PARAMETER(LCL.OD_Market_Ending_Date);
   PARAMETER(LCL.OD_Atch_to_Ord_ActShpDte);
   PARAMETER(LCL.EDI_Status_1);
   PARAMETER(LCL.EDI_Status_2);
   PARAMETER(LCL.EDI_Status_3);
   PARAMETER(LCL.Job_Time);
   PARAMETER(LCL.User_Id);
   PARAMETER(LCL.Job_Name);
   PARAMETER(LCL.Job_Date);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?** Change or Add a new Detail line.
   CASE;

   // IF PGM.*Return code is *Normal
   IF PGM.*Return_code = *BLANK;

   //?** Quantity Ordered
   CASE;

   // IF DB1.Quantity Ordered is Equal to zero
   IF DB1.Quantity_Ordered = *ZERO;

   //?** No change
   //?** Quantity Ordered
   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF DB1.Quantity Ordered NE LCL.Quantity Ordered
   IF DB1.Quantity_Ordered <> LCL.Quantity_Ordered;

   // LCL.Quantity Ordered = DB1.Quantity Ordered
   LCL.Quantity_Ordered = DB1.Quantity_Ordered;

   ENDIF;

   //?** If the DB1 and LCL are the same, there is no change.
   ENDIF;

   // LCL.Weight Ordered = LCL.Quantity Ordered * LCL.Unit Weight Ordered U_M *
   LCL.Weight_Ordered = LCL.Quantity_Ordered * LCL.Unit_Weight_Ordered_U_M;

   //?** Palletize
   CASE;

   // IF DB1.Palletize is blank
   IF DB1.Palletize = *BLANK;

   //?** No change
   //?** Palletize
   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF DB1.Palletize NE LCL.Palletize
   IF DB1.Palletize <> LCL.Palletize;

   //?Test for Valid values, Otherwise Blank
   CASE;

   // IF DB1.Palletize is Y/N/' ' Values
   IF DB1.Palletize = *BLANK/'N'/'Y';

   // LCL.Palletize = DB1.Palletize
   LCL.Palletize = DB1.Palletize;

   //?Test for Valid values, Otherwise Blank
   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Palletize = CND.blank
   LCL.Palletize = *BLANK;

   ENDIF;

   ENDIF;

   //?** If the DB1 and LCL are the same, there is no change.
   ENDIF;

   //?** Slip Sheet
   CASE;

   // IF DB1.Slip Sheet is blank
   IF DB1.Slip_Sheet = *BLANK;

   //?** No change
   //?** Slip Sheet
   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF DB1.Slip Sheet NE LCL.Slip Sheet
   IF DB1.Slip_Sheet <> LCL.Slip_Sheet;

   //?Needs to valid.  Otherwise Blank.
   CASE;

   // IF DB1.Slip Sheet is Y/N/' ' Values
   IF DB1.Slip_Sheet = *BLANK/'N'/'Y';

   // LCL.Slip Sheet = DB1.Slip Sheet
   LCL.Slip_Sheet = DB1.Slip_Sheet;

   //?Needs to valid.  Otherwise Blank.
   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Slip Sheet = CND.blank
   LCL.Slip_Sheet = *BLANK;

   ENDIF;

   ENDIF;

   //?** If the DB1 and LCL are the same, there is no change.
   ENDIF;

   //?** Pallet Type
   CASE;

   // IF DB1.OD Pallet Type is Blank
   IF DB1.OD_Pallet_Type = *BLANK;

   //?** No change
   //?** Pallet Type
   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF DB1.OD Pallet Type NE LCL.OD Pallet Type
   IF DB1.OD_Pallet_Type <> LCL.OD_Pallet_Type;

   //?** If valid, use it.  Otherwise go get it.
   CASE;

   // IF DB1.OD Pallet Type is Valid Values
   IF DB1.OD_Pallet_Type = '01'/'02'/'CH'/'HT'/'04'/'03';

   // LCL.OD Pallet Type = DB1.OD Pallet Type
   LCL.OD_Pallet_Type = DB1.OD_Pallet_Type;

   //?** If valid, use it.  Otherwise go get it.
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Rtv All) TYPE(RTVOBJ) FILE(PUAAREP)                            AC2149720;
   PARAMETER(PAR.Ship_To_Customer);
   PARAMETER(NLL.M3_Supplier_ID);
   PARAMETER(NLL.Dft_Mode_of_Transportaton);
   PARAMETER(NLL.Buying_Group);
   PARAMETER(NLL.Buying_Group_Opt_In_Out);
   PARAMETER(NLL.Ship_To_Establishment_nbr);
   PARAMETER(LCL.OD_Pallet_Type);
   PARAMETER(NLL.Cust_Dft_Price_Type);
   PARAMETER(NLL.Cust_Dft_Age_Days);
   PARAMETER(NLL.Cust_Dft_Delivery_Time);
   {
    //?USER: Initialize routine

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

   ENDIF;

   //?** If the DB1 and LCL are the same, there is no change.
   ENDIF;

   //?** Set OD Pallet Type to ' ' if palletize='N'
   CASE;

   // IF LCL.Palletize is Blank/N
   IF LCL.Palletize = *BLANK/'N';

   // LCL.OD Pallet Type = CND.None
   LCL.OD_Pallet_Type = *BLANK;

   ENDIF;

   //?** Update warehouse code
   CASE;

   // IF LCL.Warehouse Code NE PAR.Warehouse Code
   IF LCL.Warehouse_Code <> PAR.Warehouse_Code;

   // LCL.Warehouse Code = PAR.Warehouse Code
   LCL.Warehouse_Code = PAR.Warehouse_Code;

   ENDIF;

   //?** Update Requested & scheduled ship date
   CASE;

   // IF PAR.Requested Ship Date NE LCL.Requested Ship Date
   IF PAR.Requested_Ship_Date <> LCL.Requested_Ship_Date;

   // AND PAR.Requested Ship Date is entered
   AND PAR.Requested_Ship_Date <> *ZERO;

   // LCL.Requested Ship Date = PAR.Requested Ship Date
   LCL.Requested_Ship_Date = PAR.Requested_Ship_Date;

   // LCL.Scheduled Ship Date = PAR.Requested Ship Date
   LCL.Scheduled_Ship_Date = PAR.Requested_Ship_Date;

   ENDIF;

   //?** WI546_2 Cancel detail line or Update
   CASE;

   // IF DB1.Detail Line Status is Cancelled
   IF DB1.Detail_Line_Status = 'X';

   // OR DB1.Cancel Date is entered
   OR DB1.Cancel_Date <> *ZERO;

   //?*** WI546_2-Validate Date format is CYMD for Cancel Date
   CASE;

   // IF DB1.Cancel Date is entered
   IF DB1.Cancel_Date <> *ZERO;

   // LCL.Text usr 11 = CND.Not Entered
   LCL.Text_usr_11 = *BLANK;

   // LCL.Date From Convert USR = CVTVAR(DB1.Cancel Date)
   LCL.Date_From_Convert_USR = CVTVAR(DB1.Cancel_Date);

   // Call program Cvt Date              UP.
   CALL PROGRAM(Cvt Date              UP) ('POD5UPR');
   PARAMETER(LCL.Date_From_Convert_USR);
   PARAMETER(LCL.Text_usr_11);
   PARAMETER(*CYMD);
   PARAMETER(*YYMD);
   PARAMETER(*NONE);

   CASE;

   // IF LCL.Text usr 11 is Not Entered
   IF LCL.Text_usr_11 = *BLANK;

   // LCL.BOE Error Comment = CONCAT(CON.Invalid Cancel Date Forma,CON.t.,CON.*ZERO)
   LCL.BOE_Error_Comment = 'Invalid Cancel Date Forma' + 't.' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER('INVCAN');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   ENDIF;

   //?** 1019801 JM - WI546_2 Make sure Cancel Date is present in Calendar.
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Calendar           RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1102049;
   PARAMETER(PAR.Company_Number);
   PARAMETER(DB1.Cancel_Date);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.Calendar not found
    PGM.*Return_code = 'USR0018';

    //?USER: Process Data record

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   CASE;

   // IF PGM.*Return code is Calendar not found
   IF PGM.*Return_code = 'USR0018';

   // LCL.BOE Error Comment = CONCAT(CON.Cancel Date Not Found In,CON. Calendar.,CON.*ZERO)
   LCL.BOE_Error_Comment = 'Cancel Date Not Found In' + ' Calendar.' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER('INVCAN');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   //?*** WI546_2-validate cancel date & proceed for cancellation
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.From Date             USR = JOB.*Job exec start date + CON.-7 *DAYS
   LCL.From_Date_USR = DATEINCR(JOB.*Job_exec_start_date '-7' 'DY' 1111111 'NONE' 'N' 1);

   // LCL.To Date               USR = JOB.*Job exec start date + CON.7 *DAYS
   LCL.To_Date_USR = DATEINCR(JOB.*Job_exec_start_date 7 'DY' 1111111 'NONE' 'N' 1);

   //?*** Validate Cancel Date within 7 days.
   CASE;

   // IF DB1.Cancel Date LT LCL.From Date             USR
   IF DB1.Cancel_Date < LCL.From_Date_USR;

   // OR DB1.Cancel Date GT LCL.To Date               USR
   OR DB1.Cancel_Date > LCL.To_Date_USR;

   // LCL.Date 7A              USR = CVTVAR(DB1.Cancel Date)
   LCL.Date_7A_USR = CVTVAR(DB1.Cancel_Date);

   // LCL.BOE Error Comment = CONCAT(CON.Cancel Date is out of Ran,CON.ge. Must be + - 7 days.,CON.*
   LCL.BOE_Error_Comment = 'Cancel Date is out of Ran' + 'ge. Must be + - 7 days.' (*ZERO);

   // LCL.BOE Error Comment = CONCAT(LCL.BOE Error Comment,LCL.Date 7A              USR,CON.1)
   LCL.BOE_Error_Comment = LCL.BOE_Error_Comment + LCL.Date_7A_USR (1);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('INVDAT');
   PARAMETER(LCL.BOE_Error_Comment);

   //?*** Validate Cancel Date within 7 days.
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Cancel Order Detail) TYPE(RTVOBJ) FILE(OPBGWKP)            AC2224840;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(DB1.Sequence_Number);
   PARAMETER(1);
   PARAMETER(DB1.Cancel_Date);
   {
    //?USER: Process Data record

    // LCL.Quantity Scheduled = DB1.Quantity Scheduled
    LCL.Quantity_Scheduled = DB1.Quantity_Scheduled;

    // LCL.Weight Scheduled = DB1.Weight Scheduled
    LCL.Weight_Scheduled = DB1.Weight_Scheduled;

    //?**WI546_2-Dealloc inventory
    CASE;

    // IF DB1.OD Production Plan Sts is Yes
    IF DB1.OD_Production_Plan_Sts = *BLANK;

    // Call program UPD Avail-To-Sell  ORD XF.
    CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Requested_Ship_Date);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(LCL.Quantity_Scheduled);
    PARAMETER(LCL.Weight_Scheduled);
    PARAMETER('OD');
    PARAMETER(JOB.*PROGRAM);
    PARAMETER(DB1.Item_Age_Days);
    PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
    PARAMETER(DB1.Production_Ovr_AgeDte_To);

    //?**WI546_2-Dealloc inventory
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.Quantity Scheduled = CON.*ZERO
    LCL.Quantity_Scheduled = *ZERO;

    // LCL.Weight Scheduled = CON.*ZERO
    LCL.Weight_Scheduled = *ZERO;

    ENDIF;

    EXECUTE FUNCTION(Chg Qty/Wgt Sched BlockOR) TYPE(CHGOBJ) FILE(OPBGWKP)          AC2224914;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(LCL.Quantity_Scheduled);
    PARAMETER(LCL.Weight_Scheduled);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

     // DB1.User Id = CON.INFORMATIC
     DB1.User_Id = 'INFORMATIC';

    }

    //?**WI546_2-Cancellation logic same as PDN9EFR UI.
    CASE;

    // IF DB1.Detail Line Status is Entered
    IF DB1.Detail_Line_Status = 'E';

    EXECUTE FUNCTION(DLT PD Order Detail    DL) TYPE(DLTOBJ) FILE(OPBGWKP)          AC1204566;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    // Call program Rtv Dlt OD Files/CanclXF.
    CALL PROGRAM(Rtv Dlt OD Files/CanclXF) ('PUKGXFR');
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);

    //?**WI546_2-Cancellation logic same as PDN9EFR UI.
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.Detail Line Status Last = DB1.Detail Line Status
    LCL.Detail_Line_Status_Last = DB1.Detail_Line_Status;

    // LCL.Detail Line Status = CND.Cancelled
    LCL.Detail_Line_Status = 'X';

    EXECUTE FUNCTION(CHG Sts,Alloc          CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1425289;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(LCL.Detail_Line_Status);
    PARAMETER(LCL.Detail_Line_Status_Last);
    PARAMETER(DB1.Quantity_Scheduled);
    PARAMETER(DB1.Weight_Scheduled);
    {
     //?USER: Processing before Data update

     //?E2640 Write chg log for cancel line item
     CASE;

     // IF PAR.Detail Line Status is Cancelled
     IF PAR.Detail_Line_Status = 'X';

     // AND PAR.Detail Line Status Last is Not cancelled
     AND PAR.Detail_Line_Status_Last = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

     // LCL.Text 3 Length USR = DB1.Order Sequence Number
     LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

     // LCL.Weight Beg Inv usr = DB1.Weight Ordered
     LCL.Weight_Beg_Inv_usr = DB1.Weight_Ordered;

     // LCL.Text USR 7 = LCL.Weight Beg Inv usr
     LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

     // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
     LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

     //?New value is -0- for cancel
     // LCL.Weight Beg Inv usr = CON.*ZERO
     LCL.Weight_Beg_Inv_usr = 0;

     // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
     LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

     // Call program CRT Load/OrderChg n/ld XF.
     CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
     PARAMETER(*ZERO);
     PARAMETER('ORDWGT');
     PARAMETER('SLS');
     PARAMETER(LCL.Change_Log_Prior_Value);
     PARAMETER(LCL.Change_Log_New_Value);
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);

     // LCL.Weight Beg Inv usr = DB1.Quantity Ordered
     LCL.Weight_Beg_Inv_usr = DB1.Quantity_Ordered;

     // LCL.Text USR 7 = LCL.Weight Beg Inv usr
     LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

     // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
     LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

     //?New value is -0- for cancel
     // LCL.Weight Beg Inv usr = CON.*ZERO
     LCL.Weight_Beg_Inv_usr = 0;

     // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
     LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

     // Call program CRT Load/OrderChg n/ld XF.
     CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
     PARAMETER(*ZERO);
     PARAMETER('ORDQTY');
     PARAMETER('SLS');
     PARAMETER(LCL.Change_Log_Prior_Value);
     PARAMETER(LCL.Change_Log_New_Value);
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);

     ENDIF;

    }

    EXECUTE FUNCTION(Rtv & Dlt for Cncl DtlRT) TYPE(RTVOBJ) FILE(PDMSREP)           AC1612172;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    {
     //?USER: Process Data record

     EXECUTE FUNCTION(Del Exp Doc Order Dtl  DL) TYPE(DLTOBJ) FILE(PDMSREP)          AC1524037;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(DB1.ED_Export_Document_Type);
     PARAMETER(DB1.Country_Code);
     PARAMETER(DB1.Order_Sequence_Number);
     PARAMETER(DB1.Order_Secondary_Line_Seq);
    }

    ENDIF;

    //?USER: Exit processing

    EXECUTE FUNCTION(RTV If Item Not Cancelled) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2225578;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(LCL.USR_Return_Code);
    {
     //?USER: Initialize routine

     // PAR.USR Return Code = CND.Does Not Exist
     PAR.USR_Return_Code = 'N';

     //?USER: Process Data record

     CASE;

     // IF DB1.Detail Line Status is Cancel Status Types
     IF DB1.Detail_Line_Status = 'L'/'A'/'E'/'H';

     // PAR.USR Return Code = CND.Exists
     PAR.USR_Return_Code = 'E';

     QUIT;

     ENDIF;

    }

    CASE;

    // IF LCL.USR Return Code is Does Not Exist
    IF LCL.USR_Return_Code = 'N';

    // LCL.Header Status Last = DB1.Detail Line Status
    LCL.Header_Status_Last = DB1.Detail_Line_Status;

    EXECUTE FUNCTION(Chg Order Status BlockOrd) TYPE(CHGOBJ) FILE(OPBFCPP)          AC2225125;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(PAR.OD_Cancel_Date);
    PARAMETER('X');
    PARAMETER(LCL.Header_Status_Last);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER('N');
    PARAMETER('N');
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER('N');
    PARAMETER(*BLANK);
    PARAMETER(*ZERO);
    PARAMETER(*BLANK);
    PARAMETER(*ZERO);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

     // DB1.Job Name = CON.AUTOUPLOAD
     DB1.Job_Name = 'AUTOUPLOAD';

     // DB1.User Id = CON.INFORMATIC
     DB1.User_Id = 'INFORMATIC';

     // Call program TRG Order Hdr CHG Trig XT.
     CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(DB1.Order_Type_Sales);
     PARAMETER(DB1.AR_Customer_Number);
     PARAMETER(DB1.Ship_To_Customer);
     PARAMETER(DB1.Ship_To_Name);
     PARAMETER(DB1.Ship_To_Address_Line_1);
     PARAMETER(DB1.Ship_To_Address_Line_2);
     PARAMETER(DB1.Ship_To_Address_Line_3);
     PARAMETER(DB1.Ship_To_City);
     PARAMETER(DB1.Ship_To_State_Code);
     PARAMETER(DB1.Ship_To_Zip_Postal_Code);
     PARAMETER(DB1.Bill_to_Customer);
     PARAMETER(DB1.Bill_to_Name);
     PARAMETER(DB1.Bill_to_Address_Line_1);
     PARAMETER(DB1.Bill_to_Address_Line_2);
     PARAMETER(DB1.Bill_to_Address_Line_3);
     PARAMETER(DB1.Bill_to_City);
     PARAMETER(DB1.Bill_to_State_Code);
     PARAMETER(DB1.Bill_to_Zip_Postal_Code);
     PARAMETER(DB1.Customer_Purchase_Order_#);
     PARAMETER(DB1.Order_Date);
     PARAMETER(DB1.Requested_Ship_Date);
     PARAMETER(DB1.Actual_Shipped_Date);
     PARAMETER(DB1.Cancel_Date);
     PARAMETER(DB1.Terms_Code);
     PARAMETER(DB1.Special_Instructions);
     PARAMETER(DB1.Special_Instructions_2);
     PARAMETER(DB1.Carrier_Code);
     PARAMETER(DB1.Comment_Print_Acknowledge);
     PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
     PARAMETER(DB1.Comment_Print_Pick_Slip);
     PARAMETER(DB1.Comment_Print_Ship_Doc);
     PARAMETER(DB1.Reason_Code);
     PARAMETER(DB1.Order_in_Use);
     PARAMETER(DB1.Header_Status);
     PARAMETER(DB1.Header_Status_Last);
     PARAMETER(DB1.Order_Type_Print_Status);
     PARAMETER(DB1.Scheduled_Ship_Date);
     PARAMETER(DB1.User_Original_Entry);
     PARAMETER(DB1.Date_of_Original_Entry);
     PARAMETER(DB1.Order_Value_Total);
     PARAMETER(DB1.Order_Weight_Total);
     PARAMETER(DB1.Credit_Hold);
     PARAMETER(DB1.Production_Hold);
     PARAMETER(DB1.New_Customer_Hold);
     PARAMETER(DB1.Requested_Delivery_Date);
     PARAMETER(DB1.Requested_Delivery_Time);
     PARAMETER(DB1.Accounts_Receiv_Ent_1);
     PARAMETER(DB1.Accounts_Receiv_Ent_2);
     PARAMETER(DB1.Load_ID);
     PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
     PARAMETER(DB1.Rated_Freight);
     PARAMETER(DB1.LTL_Flag);
     PARAMETER(DB1.Price_Audit);
     PARAMETER(DB1.Price_Status);
     PARAMETER(DB1.Shipping_Method);
     PARAMETER(DB1.Export_Status);
     PARAMETER(DB1.Palletize);
     PARAMETER(DB1.Shrink_Wrap);
     PARAMETER(DB1.Slip_Sheet);
     PARAMETER(DB1.Age_Code);
     PARAMETER(DB1.Reefer_Temperature);
     PARAMETER(DB1.Load_Type);
     PARAMETER(DB1.Attach_to_Invoice_Number);
     PARAMETER(DB1.Load_Plan_Order);
     PARAMETER(DB1.Print_Pick_Slip);
     PARAMETER(DB1.Resell_Reference_Number);
     PARAMETER(DB1.Special_Comment_1);
     PARAMETER(DB1.Special_Comment_2);
     PARAMETER(DB1.Affect_Auto_Accruals);
     PARAMETER(DB1.Sales_Route_Code);
     PARAMETER(DB1.Manager_Level_Code);
     PARAMETER(DB1.VP_Level_Code);
     PARAMETER(DB1.Attach_to_Order_Number);
     PARAMETER(DB1.Reason_for_Price_Audit);
     PARAMETER(DB1.Invoice_Number);
     PARAMETER(DB1.Invoice_Suffix);
     PARAMETER(DB1.Invoice_Date);
     PARAMETER(DB1.Event_Code);
     PARAMETER(DB1.Trans_Contol_AS400_Plant);
     PARAMETER(DB1.Modified_Flag);
     PARAMETER(DB1.A_R_order_Value_Total);
     PARAMETER(DB1.Billing_Activity_Type);
     PARAMETER(DB1.Block_Order_Flag);
     PARAMETER(DB1.Order_Certification_Flag);
     PARAMETER(DB1.Invoice_Order_Value_Tot);
     PARAMETER(DB1.Process_Sts_for_3C);
     PARAMETER(DB1.Order_Conf_Fax_Sts);
     PARAMETER(DB1.Manifest_Fax_Sts);
     PARAMETER(DB1.Invoice_Fax_Sts);
     PARAMETER(DB1.Transfer_in_Storage_Ind);
     PARAMETER(DB1.Email_Cust_On_Order_Ship);
     PARAMETER(DB1.Order_Emailed);
     PARAMETER(DB1.Export_Docs_Go_w_Driver);
     PARAMETER(DB1.Shipping_Temp_Code_C_F);
     PARAMETER(DB1.Broker_Order_Status);
     PARAMETER(DB1.Air_Freight_Order);
     PARAMETER(DB1.Order_Requires_Review);
     PARAMETER(DB1.OH_Load_Plan_Ready);
     PARAMETER(DB1.Export_USDA_Approved);
     PARAMETER(DB1.HPB_Ship_to_Warehouse);
     PARAMETER(DB1.OH_TF_Exempt_Code);
     PARAMETER(DB1.OH_Appt_Confirmation_Dt);
     PARAMETER(DB1.JPN_Invoice_Issuance_Date);
     PARAMETER(DB1.Load_Actual_Shipped_Date);
     PARAMETER(DB1.Load_BOL_Complete_Date);
     PARAMETER(DB1.Load_Truck_Departure_Date);
     PARAMETER(DB1.Maximum_Gross_Weight);
     PARAMETER(DB1.Time_of_Original_Entry);
     PARAMETER(DB1.OH_Appt_Confirmation_Tm);
     PARAMETER(DB1.Load_BOL_Complete_Time);
     PARAMETER(DB1.Load_Truck_Departure_Time);
     PARAMETER(DB1.Act_Frt_Reference_Amount);
     PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
     PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
     PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
     PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
     PARAMETER(DB1.Claim_Number);
     PARAMETER(DB1.EDI_Status_1);
     PARAMETER(DB1.EDI_Status_2);
     PARAMETER(DB1.EDI_Status_3);
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);

    }

    ENDIF;

   }

   ENDIF;

   ENDIF;

   //?** WI546_2 Cancel detail line or Update
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(CHG PD Order Detail Block) TYPE(CHGOBJ) FILE(OPBGWKP)          AC2224972;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(DB1.Sequence_Number);
   PARAMETER(1);
   PARAMETER(LCL.Item_Code);
   PARAMETER(LCL.Warehouse_Code);
   PARAMETER(LCL.Ship_To_Customer);
   PARAMETER(LCL.Order_Group_Code);
   PARAMETER(LCL.Detail_Line_Status);
   PARAMETER(LCL.Detail_Line_Status_Last);
   PARAMETER(LCL.Billing_Detail_Cost_Dol);
   PARAMETER(LCL.Billing_Detail_Gross_Dol);
   PARAMETER(LCL.Billing_Detail_Net_Dol);
   PARAMETER(LCL.Quantity_to_Substitute);
   PARAMETER(LCL.Comment_Print_Acknowledge);
   PARAMETER(LCL.Comment_Print_Inv_Cr_Memo);
   PARAMETER(LCL.Comment_Print_Pick_Slip);
   PARAMETER(LCL.Comment_Print_Ship_Doc);
   PARAMETER(LCL.Extended_Amount);
   PARAMETER(LCL.Market_Pricing_Date);
   PARAMETER(LCL.Commodity_Market_Code);
   PARAMETER(LCL.Date_Method_Code);
   PARAMETER(LCL.Price_Method_Code);
   PARAMETER(LCL.Price_Overage_Override);
   PARAMETER(LCL.Contract_Number);
   PARAMETER(LCL.Price_Status);
   PARAMETER(LCL.Pricing_Date_Used);
   PARAMETER(LCL.U_M_Base_Price);
   PARAMETER(LCL.U_M_Ordered);
   PARAMETER(LCL.Work_Confirm_Status);
   PARAMETER(LCL.Work_Over_Short_Status);
   PARAMETER(LCL.OD_Production_Plan_Sts);
   PARAMETER(LCL.Order_Desc_Line_One);
   PARAMETER(LCL.Order_Desc_Line_Two);
   PARAMETER(LCL.Age_Code);
   PARAMETER(LCL.Palletize);
   PARAMETER(LCL.Slip_Sheet);
   PARAMETER(LCL.Catch_Weight_Status);
   PARAMETER(LCL.Price_Audit);
   PARAMETER(LCL.Price_Audit_Reason_Code);
   PARAMETER(LCL.Production_Date_Control);
   PARAMETER(LCL.Rated_Freight);
   PARAMETER(LCL.Quantity_Ordered);
   PARAMETER(LCL.Weight_Ordered);
   PARAMETER(LCL.Quantity_Scheduled);
   PARAMETER(LCL.Weight_Scheduled);
   PARAMETER(LCL.Quantity_Shipped_Total);
   PARAMETER(LCL.Weight_Shipped_Total);
   PARAMETER(LCL.Unit_Cost_Pricing_U_M);
   PARAMETER(LCL.Unit_Cost_Per_Pound);
   PARAMETER(LCL.Unit_Price);
   PARAMETER(LCL.Unit_Price_Credit);
   PARAMETER(LCL.Unit_Price_Ordered_U_M);
   PARAMETER(LCL.Unit_Weight_Ordered_U_M);
   PARAMETER(LCL.Tare_Weight_Total);
   PARAMETER(LCL.Requested_Ship_Date);
   PARAMETER(LCL.Scheduled_Ship_Date);
   PARAMETER(LCL.Actual_Shipped_Date);
   PARAMETER(LCL.Affect_Inventory_Status);
   PARAMETER(LCL.Affect_Sales_Doll_Status);
   PARAMETER(LCL.Affect_Sales_Pnds_Status);
   PARAMETER(LCL.Item_Structure_Type_Code);
   PARAMETER(LCL.Item_Structure_Group_Code);
   PARAMETER(LCL.Item_Structure_Class_Code);
   PARAMETER(LCL.Item_Level);
   PARAMETER(LCL.Quality_Level);
   PARAMETER(LCL.Pricing_Product_Class_Rep);
   PARAMETER(LCL.Season_Product_Class_Repo);
   PARAMETER(LCL.Date_of_Original_Entry);
   PARAMETER('INFORMATIC');
   PARAMETER(LCL.Country_Code);
   PARAMETER(LCL.Event_Code);
   PARAMETER(LCL.Reason_Code);
   PARAMETER(LCL.Sales_Route_Code);
   PARAMETER(LCL.Modified_Flag);
   PARAMETER(LCL.Substituted_Flag);
   PARAMETER(LCL.OD_Schedule_Override_Sts);
   PARAMETER(LCL.Invoice_Unit_Price);
   PARAMETER(LCL.Invoice_Extended_Amt);
   PARAMETER(LCL.Ham_Group_Number);
   PARAMETER(LCL.OD_Adj_Type_Override);
   PARAMETER(LCL.Affect_Trade_Fund);
   PARAMETER(LCL.Affect_Commission);
   PARAMETER(LCL.Affect_Pricing);
   PARAMETER(LCL.Released_by_User_Sts_Y_N);
   PARAMETER(LCL.Ord_TF_Exempt_Code);
   PARAMETER(LCL.OD_Pallet_Type);
   PARAMETER(LCL.Production_Warehouse);
   PARAMETER(LCL.OD_Price_Type);
   PARAMETER(LCL.Warehouse_Pallets_Loaded);
   PARAMETER(LCL.Consumed_Item_Code);
   PARAMETER(LCL.Deadline_Depart_Date_LH);
   PARAMETER(LCL.OD_Price_Type_Ref_Num);
   PARAMETER(LCL.OD_Firm_Date);
   PARAMETER(LCL.Deadline_Depart_Time_LH);
   PARAMETER(LCL.Price_Code);
   PARAMETER(LCL.Maximum_Net_Weight);
   PARAMETER(LCL.Substitution_Line_Number);
   PARAMETER(LCL.Max_Qty_to_sched_per_day);
   PARAMETER(LCL.Warehouse_Pallet_Tare);
   PARAMETER(LCL.Warehouse_Avg_Pallet_Tare);
   PARAMETER(LCL.OD_Item_Target_Price);
   PARAMETER(LCL.OD_Estimated_Gross_Weight);
   PARAMETER(LCL.OD_Maximum_Unit_Weight);
   PARAMETER(LCL.Order_Gate_Final_Price);
   PARAMETER(LCL.OD_Ceiling_Price);
   PARAMETER(LCL.OD_Gate_Final_Price_Adj);
   PARAMETER(LCL.OD_Weighted_Avg_Price);
   PARAMETER(LCL.OD_Original_Ordered_Qty);
   PARAMETER(LCL.OD_Cancel_Date);
   PARAMETER(LCL.OD_Unused_Prc_7);
   PARAMETER(LCL.OD_Unused_Prc_8);
   PARAMETER(LCL.OD_MPR_Sent_to_USDA_Sts);
   PARAMETER(LCL.OD_MPR_Prc_Ready_to_Send);
   PARAMETER(LCL.OD_UnUsed_Price_Sts_3);
   PARAMETER(LCL.Weight_Amount_Entered);
   PARAMETER(LCL.Item_Age_Days);
   PARAMETER(LCL.Production_Ovr_AgeDte_Fr);
   PARAMETER(LCL.Production_Ovr_AgeDte_To);
   PARAMETER(LCL.OD_Spot_Buy);
   PARAMETER(LCL.OD_Clm_Full_Return_to_Plt);
   PARAMETER(LCL.Order_Line_Error_Type);
   PARAMETER(LCL.OD_Market_Begin_Date);
   PARAMETER(LCL.OD_Market_Ending_Date);
   PARAMETER(LCL.OD_Atch_to_Ord_ActShpDte);
   PARAMETER(LCL.EDI_Status_1);
   PARAMETER(LCL.EDI_Status_2);
   PARAMETER(LCL.EDI_Status_3);
   {
    //?USER: Processing after Data read

    //?E2247 RMC 10/03/12 Crt chg log if dtl has been sent to MPR USDA
    CASE;

    // IF DB1.OD MPR Sent to USDA Sts is yes
    IF DB1.OD_MPR_Sent_to_USDA_Sts = 'Y';

    //?If price type changes, then create type: ORDPRT
    CASE;

    // IF DB1.OD Price Type NE PAR.OD Price Type
    IF DB1.OD_Price_Type <> PAR.OD_Price_Type;

    //?change log prior has seq in pos 1-3, price type 5-7: '001 NEG     '
    // LCL.Text 3 Length USR = DB1.Order Sequence Number
    LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

    // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,DB1.OD Price Type,CON.1)
    LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + DB1.OD_Price_Type (1);

    // LCL.Change Log New Value = PAR.OD Price Type
    LCL.Change_Log_New_Value = PAR.OD_Price_Type;

    // Call program CRT Load/OrderChg n/ld XF.
    CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
    PARAMETER(*ZERO);
    PARAMETER('ORDPRT');
    PARAMETER('SLS');
    PARAMETER(LCL.Change_Log_Prior_Value);
    PARAMETER(LCL.Change_Log_New_Value);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);

    ENDIF;

    ENDIF;

    //?If not the transfer order nbr 9999999 -> crt chg logs
    CASE;

    // IF DB1.Order Number is ne 9999999
    IF DB1.Order_Number <> 9999999;

    //?If qty changes, then create type: ORDWGT & ORDQTY ->ALWAYS 6/14/13
    CASE;

    // IF DB1.Quantity Ordered NE PAR.Quantity Ordered
    IF DB1.Quantity_Ordered <> PAR.Quantity_Ordered;

    //?(do this off of qty, because wgt can change often since unit wgt changes)
    //?change log prior has seq in pos 1-3, weight in 5-11: '001 0000nnn'
    // LCL.Text 3 Length USR = DB1.Order Sequence Number
    LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

    // LCL.Weight Beg Inv usr = DB1.Weight Ordered
    LCL.Weight_Beg_Inv_usr = DB1.Weight_Ordered;

    // LCL.Text USR 7 = LCL.Weight Beg Inv usr
    LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

    // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
    LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

    // LCL.Weight Beg Inv usr = PAR.Weight Ordered
    LCL.Weight_Beg_Inv_usr = PAR.Weight_Ordered;

    // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
    LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

    // Call program CRT Load/OrderChg n/ld XF.
    CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
    PARAMETER(*ZERO);
    PARAMETER('ORDWGT');
    PARAMETER('SLS');
    PARAMETER(LCL.Change_Log_Prior_Value);
    PARAMETER(LCL.Change_Log_New_Value);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);

    // LCL.Weight Beg Inv usr = DB1.Quantity Ordered
    LCL.Weight_Beg_Inv_usr = DB1.Quantity_Ordered;

    // LCL.Text USR 7 = LCL.Weight Beg Inv usr
    LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

    // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
    LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

    // LCL.Weight Beg Inv usr = PAR.Quantity Ordered
    LCL.Weight_Beg_Inv_usr = PAR.Quantity_Ordered;

    // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
    LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

    // Call program CRT Load/OrderChg n/ld XF.
    CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
    PARAMETER(*ZERO);
    PARAMETER('ORDQTY');
    PARAMETER('SLS');
    PARAMETER(LCL.Change_Log_Prior_Value);
    PARAMETER(LCL.Change_Log_New_Value);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);

    ENDIF;

    ENDIF;

    //?USER: Processing before Data update

    // DB1.Age Code = CND.Blank
    DB1.Age_Code = *BLANK;

    EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // DB1.Job Name = CON.AUTOUPLOAD
    DB1.Job_Name = 'AUTOUPLOAD';

    // DB1.User Id = CON.INFORMATIC
    DB1.User_Id = 'INFORMATIC';

    EXECUTE FUNCTION(Rtv Item Typ/Grp/Cls  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1298334;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Item_Structure_Class_Code);
    PARAMETER(DB1.Item_Structure_Group_Code);
    PARAMETER(DB1.Item_Structure_Type_Code);
    {
     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Production_Warehouse);
    PARAMETER(NLL.Accounting_Company);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?Calc Gross Weight from tares...    copied from Dsp Gross Wgt function
    DO;

    // Call program Rtv Tare Weight        XF.
    CALL PROGRAM(Rtv Tare Weight        XF) ('PBI3XFR');
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(LCL.Misc_Tare_Weight);

    //?wi464 change
    // Call program RTV Itm BxID & Tares  XF.
    CALL PROGRAM(RTV Itm BxID & Tares  XF) ('PBI4XFR');
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(LCL.Box_Weight);
    PARAMETER(LCL.Number_Cases_On_A_Pallet);
    PARAMETER(LCL.Pallet_Tare_Weight);
    PARAMETER(LCL.Box_iD);
    PARAMETER(DB1.OD_Pallet_Type);

    // LCL.Total Tare USR = LCL.Box Weight + LCL.Misc Tare Weight
    LCL.Total_Tare_USR = LCL.Box_Weight + LCL.Misc_Tare_Weight;

    // Box + Misc Tare
    LCL.Weight_1_1_U = ( LCL.Box_Weight + LCL.Misc_Tare_Weight ) * DB1.Quantity_Ordered 'H';

    //?Pallet Tare
    CASE;

    // IF DB1.Palletize is yes
    IF DB1.Palletize = 'Y';

    CASE;

    // IF LCL.Number Cases On A Pallet is GT Zero
    IF LCL.Number_Cases_On_A_Pallet > *ZERO;

    // Pallet Weight
    LCL.Weight_1_2_U = ( DB1.Quantity_Ordered / LCL.Number_Cases_On_A_Pallet 'H' )
    * LCL.Pallet_Tare_Weight 'H';

    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.Weight 1.2             .U = CON.*ZERO
    LCL.Weight_1_2_U = *ZERO;

    ENDIF;

    //?Pallet Tare
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.Weight 1.2             .U = CON.*ZERO
    LCL.Weight_1_2_U = *ZERO;

    ENDIF;

    // Estimated Gross
    DB1.OD_Estimated_Gross_Weight = ( DB1.Weight_Ordered + LCL.Weight_1_1_U )
    + LCL.Weight_1_2_U;

    //?E00196 RMC 8/24/12 chk pfs interface SHPTRN too
    ENDDO;

   }

   // LCL.Order Number = PAR.Order Number
   LCL.Order_Number = PAR.Order_Number;

   // LCL.USR Update Flag = CND.Yes
   LCL.USR_Update_Flag = 'Y';

   ENDIF;

   //?** Change or Add a new Detail line.
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?** Didn't find a detail so we must be creating a new one.
   // Call program Rtv f/Copy Orders TemplXF.
   CALL PROGRAM(Rtv f/Copy Orders TemplXF) ('PUX7XFR');
   PARAMETER(PAR.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Order_Desc_Line_One);
   PARAMETER(LCL.Order_Desc_Line_Two);
   PARAMETER(LCL.U_M_Ordered);
   PARAMETER(LCL.U_M_Base_Price);
   PARAMETER(LCL.Unit_Weight_Ordered_U_M);
   PARAMETER(LCL.Item_Level);
   PARAMETER(LCL.Production_Date_Control);
   PARAMETER(LCL.Catch_Weight_Status);
   PARAMETER(LCL.Item_Structure_Class_Code);
   PARAMETER(LCL.Item_Structure_Group_Code);
   PARAMETER(LCL.Item_Structure_Type_Code);
   PARAMETER(NLL.Default_Commod_Mark_basis);
   PARAMETER(NLL.Transportation_Temp);
   PARAMETER(LCL.Item_Type_Code);
   PARAMETER(NLL.Commodity_Price_Group);
   PARAMETER(NLL.Default_Warehouse);
   PARAMETER(NLL.Price_Method_Default);
   PARAMETER(NLL.Fresh_Chilling_Time);
   PARAMETER(LCL.Variety_Rendered_Cut);
   PARAMETER(LCL.OD_Item_Target_Price);
   PARAMETER(LCL.Sold_100_Percent_Frozen);
   PARAMETER(LCL.Error_Status);

   CASE;

   // IF LCL.Error Status is yes
   IF LCL.Error_Status = 'Y';

   // LCL.BOE Error Comment = CONCAT(CON.Ivalid Item Code,CON.*BLANK,CON.*ZERO)
   LCL.BOE_Error_Comment = 'Ivalid Item Code' + *BLANK (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('INVITM');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // Call program Rtv Item Def/TFExp/CO XF.
   CALL PROGRAM(Rtv Item Def/TFExp/CO XF) ('PNNCXFR');
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.TF_Co_Ownership_Sts);
   PARAMETER(LCL.Ord_TF_Exempt_Code);

   // Call program Rtv First Consumed Itm XF.
   CALL PROGRAM(Rtv First Consumed Itm XF) ('POP1XFR');
   PARAMETER(PAR.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Consumed_Item_Code);

   // Call program Val Manual Price      XF.
   CALL PROGRAM(Val Manual Price      XF) ('POA5XFR');
   PARAMETER(PAR.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(NLL.Description_Line_One);
   PARAMETER(LCL.Default_Commod_Mark_basis);
   PARAMETER(LCL.Market_Overage);
   PARAMETER(NLL.Standard_Overage_Underage);
   PARAMETER(LCL.Commodity_Price_Group);
   PARAMETER(NLL.Std_Weight_Head_Var_Ren);
   PARAMETER(LCL.Primal_Group_Code);

   // Call program Rtv Cust Tf Exempt    XF.
   CALL PROGRAM(Rtv Cust Tf Exempt    XF) ('PPSMXFR');
   PARAMETER(PAR.Ship_To_Customer);
   PARAMETER(LCL.Customer_TF_Exempt_Code);

   EXECUTE FUNCTION(Set/Val OH TF Exempt2 IF) TYPE(EXCINTFUN)                      AC2217071;
   PARAMETER(LCL.OH_TF_Exempt_Code);
   PARAMETER(LCL.Ord_TF_Exempt_Code);
   PARAMETER(LCL.Item_Code);
   PARAMETER(LCL.Error_Status);
   PARAMETER(LCL.Customer_TF_Exempt_Code);
   PARAMETER(LCL.TF_Co_Ownership_Sts);
   PARAMETER(LCL.OH_TF_Exempt_Error_Cde_U);
   {
    //?Execute internal function

    // PAR.OH TF Exempt Error Cde U = CND.Not Entered
    PAR.OH_TF_Exempt_Error_Cde_U = *BLANK;

    //?Set / Validate TF Exempt code values              RMC 8/24/05
    CASE;

    // IF PAR.OH TF Exempt Code is Blank
    IF PAR.OH_TF_Exempt_Code = *BLANK;

    //?VAL: Customer Exempt Code  w/Item Exempt Code
    CASE;

    // IF PAR.Customer TF Exempt Code is Not Exempt
    IF PAR.Customer_TF_Exempt_Code = 'NE';

    //?VAL: Item Exempt Code
    CASE;

    // IF PAR.Ord TF Exempt Code is Item Codes
    IF PAR.Ord_TF_Exempt_Code = 'EP'/'NE';

    // PAR.OH TF Exempt Code = PAR.Ord TF Exempt Code
    PAR.OH_TF_Exempt_Code = PAR.Ord_TF_Exempt_Code;

    ENDIF;

    //?VAL: Customer Exempt Code  w/Item Exempt Code
    // IF PAR.Customer TF Exempt Code is Exempt Customer
    IF PAR.Customer_TF_Exempt_Code = 'EC';

    // PAR.OH TF Exempt Code = PAR.Customer TF Exempt Code
    PAR.OH_TF_Exempt_Code = PAR.Customer_TF_Exempt_Code;

    //?VAL: Item Exempt Code
    CASE;

    // IF PAR.Ord TF Exempt Code is Not Exempt
    IF PAR.Ord_TF_Exempt_Code = 'NE';

    CASE;

    // IF PAR.TF Co-Ownership Sts is Co-Owned
    IF PAR.TF_Co_Ownership_Sts = 'S'/'T';

    //?E00505-Prevent Co-Owned Item to be sold to Exempt Customers.
    // PAR.OH TF Exempt Error Cde U = CND.TF Exempt-Item & Cust
    PAR.OH_TF_Exempt_Error_Cde_U = 'TFEXE1';

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Ord TF Exempt Code = CND.Exempt Customer
    PAR.Ord_TF_Exempt_Code = 'EC';

    ENDIF;

    //?VAL: Item Exempt Code
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Ord TF Exempt Code = CND.Exempt Product
    PAR.Ord_TF_Exempt_Code = 'EP';

    ENDIF;

    ENDIF;

    //?Set / Validate TF Exempt code values              RMC 8/24/05
    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Validate after 1 line item has been entered
    //?If not Pre-Commencement, set exempt code
    CASE;

    // IF PAR.OH TF Exempt Code is Not Pre-Commencement
    IF PAR.OH_TF_Exempt_Code = 'EC'/'EP'/'NE';

    //?VAL: Customer Exempt Code w/Item Exempt Code
    CASE;

    // IF PAR.Customer TF Exempt Code is Not Exempt
    IF PAR.Customer_TF_Exempt_Code = 'NE';

    //?Line item must eq whats in the header, else Error
    CASE;

    // IF PAR.OH TF Exempt Code NE PAR.Ord TF Exempt Code
    IF PAR.OH_TF_Exempt_Code <> PAR.Ord_TF_Exempt_Code;

    // PAR.OH TF Exempt Error Cde U = CND.Tf Exempt - mix error
    PAR.OH_TF_Exempt_Error_Cde_U = 'TFEXE2';

    // PAR.Error Status = CND.yes
    PAR.Error_Status = 'Y';

    ENDIF;

    //?VAL: Customer Exempt Code w/Item Exempt Code
    // IF PAR.Customer TF Exempt Code is Exempt Customer
    IF PAR.Customer_TF_Exempt_Code = 'EC';

    //?VAL: Item Exempt Code
    CASE;

    // IF PAR.Ord TF Exempt Code is Not Exempt
    IF PAR.Ord_TF_Exempt_Code = 'NE';

    CASE;

    // IF PAR.TF Co-Ownership Sts is Co-Owned
    IF PAR.TF_Co_Ownership_Sts = 'S'/'T';

    //?E00505-Prevent Co-Owned Item to be sold to Exempt Customers.
    // PAR.OH TF Exempt Error Cde U = CND.TF Exempt-Item & Cust
    PAR.OH_TF_Exempt_Error_Cde_U = 'TFEXE1';

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Ord TF Exempt Code = CND.Exempt Customer
    PAR.Ord_TF_Exempt_Code = 'EC';

    ENDIF;

    //?VAL: Item Exempt Code
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Ord TF Exempt Code = CND.Exempt Product
    PAR.Ord_TF_Exempt_Code = 'EP';

    ENDIF;

    ENDIF;

    //?If not Pre-Commencement, set exempt code
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Ord TF Exempt Code = CND.Pre Commencement
    PAR.Ord_TF_Exempt_Code = 'PC';

    ENDIF;

    ENDIF;

   }

   //?*** WI546_2 Validate OH TF Exempt Error Cde U
   CASE;

   // IF LCL.OH TF Exempt Error Cde U is NE *Blank
   IF LCL.OH_TF_Exempt_Error_Cde_U <> *BLANK;

   CASE;

   // IF LCL.OH TF Exempt Error Cde U is TF Exempt-Item & Cust
   IF LCL.OH_TF_Exempt_Error_Cde_U = 'TFEXE1';

   // LCL.BOE Error Comment = CONCAT(CON.Error-Item Must be Non Co,CON.-Owned for Exempt Cust,CON.*Z
   LCL.BOE_Error_Comment = 'Error-Item Must be Non Co' + '-Owned for Exempt Cust' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('TFEXE1');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   // IF LCL.OH TF Exempt Error Cde U is Tf Exempt - mix error
   IF LCL.OH_TF_Exempt_Error_Cde_U = 'TFEXE2';

   // LCL.BOE Error Comment = CONCAT(CON.TF Exempt Error-Can't mix,CON. exempt/non-exempt items,CON.
   LCL.BOE_Error_Comment = 'TF Exempt Error-Can't mix' + ' exempt/non-exempt items' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('TFEXE2');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   ENDIF;

   ENDIF;

   // Call program VAL Item Level Exists  XF.
   CALL PROGRAM(VAL Item Level Exists  XF) ('PNH3XFR');
   PARAMETER(LCL.Item_Level);

   //?** Item code not found
   CASE;

   // IF PGM.*Return code is *Normal
   IF PGM.*Return_code = *BLANK;

   //?** Item code not found
   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.BOE Error Comment = CONCAT(CON.Item Level not Found,CON.*BLANK,CON.*ZERO)
   LCL.BOE_Error_Comment = 'Item Level not Found' + *BLANK (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('ITMLVL');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   ENDIF;

   //?** Not Finished Goods
   CASE;

   // IF NOT LCL.Item Type Code is Finished Good
   IF ! LCL.Item_Type_Code = 'FG';

   // LCL.BOE Error Comment = CONCAT(CON.Ordered Items Must be Fin,CON.ished Goods,CON.*ZERO)
   LCL.BOE_Error_Comment = 'Ordered Items Must be Fin' + 'ished Goods' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('ITMTYP');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   ENDIF;

   //?** Warehouse type=Fresh & Sold 100%=Frozen
   CASE;

   // IF LCL.Warehouse Type is Fresh
   IF LCL.Warehouse_Type = 'FR';

   // AND LCL.Sold 100 Percent Frozen is yes
   AND LCL.Sold_100_Percent_Frozen = 'Y';

   // LCL.BOE Error Comment = CONCAT(CON.Item Invalid. Sold 100% F,CON.rozen,CON.*ZERO)
   LCL.BOE_Error_Comment = 'Item Invalid. Sold 100% F' + 'rozen' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('100FRZ');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   ENDIF;

   //?** Rendered & Regular Load Type
   CASE;

   // IF LCL.Variety_Rendered_Cut is Rendered
   IF LCL.Variety_Rendered_Cut = 'R';

   // AND LCL.Load Type is Regular
   AND LCL.Load_Type = 'R';

   // LCL.BOE Error Comment = CONCAT(CON.Bulk Items cannot be on R,CON.egular Order Type,CON.*ZERO)
   LCL.BOE_Error_Comment = 'Bulk Items cannot be on R' + 'egular Order Type' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('BLKITM');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   ENDIF;

   //?** Rendered & Bulk Load Type
   CASE;

   // IF LCL.Variety_Rendered_Cut is Rendered
   IF LCL.Variety_Rendered_Cut = 'R';

   // AND LCL.Load Type is Bulk
   AND LCL.Load_Type = 'B';

   // LCL.BOE Error Comment = CONCAT(CON.Only Bulk Items can be on,CON. a Bulk Order Load Type,CON.*
   LCL.BOE_Error_Comment = 'Only Bulk Items can be on' + ' a Bulk Order Load Type' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('BLKORD');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   ENDIF;

   // Call program Rtv Plan Prod Sts     XF.
   CALL PROGRAM(Rtv Plan Prod Sts     XF) ('PNHKXFR');
   PARAMETER(PAR.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Plan_Production_Sts);

   // Call program Val ItmBal.Unit Cst    XF.
   CALL PROGRAM(Val ItmBal.Unit Cst    XF) ('PDMCXFR');
   PARAMETER(PAR.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(LCL.Unit_Cost_Per_Pound);
   PARAMETER(LCL.Error_Status);

   //?** Unit Cost for Warehouse
   CASE;

   // IF LCL.Unit Cost Per Pound is equal to zero
   IF LCL.Unit_Cost_Per_Pound = *ZERO;

   // LCL.BOE Error Comment = CONCAT(CON.Unit Cost for Warehouse c,CON.annot be 0,CON.*ZERO)
   LCL.BOE_Error_Comment = 'Unit Cost for Warehouse c' + 'annot be 0' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('UNTCST');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   ENDIF;

   //?** Item Balance not found
   CASE;

   // IF LCL.Error Status is yes
   IF LCL.Error_Status = 'Y';

   // LCL.BOE Error Comment = CONCAT(CON.Item Balance not found.,CON.*BLANK,CON.*ZERO)
   LCL.BOE_Error_Comment = 'Item Balance not found.' + *BLANK (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('ITMBAL');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   ENDIF;

   EXECUTE FUNCTION(Val Age Information2  IF) TYPE(EXCINTFUN)                      AC2217146;
   PARAMETER(DB1.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Requested_Ship_Date);
   PARAMETER(PAR.Requested_Ship_Date);
   PARAMETER(DB1.Item_Age_Days);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(LCL.Production_AgeDte_Fr);
   PARAMETER(LCL.Production_AgeDte_To);
   PARAMETER(LCL.Error_Status);
   PARAMETER(LCL.Company_Organization);
   PARAMETER('V');
   PARAMETER(LCL.Error_Reason_Descript_1);
   PARAMETER(LCL.Error_Reason_Descript_2);
   PARAMETER(LCL.Error_Reason_Descript_3);
   PARAMETER(LCL.Error_Reason_Descript_4);
   PARAMETER(LCL.Error_Reason_Descript_5);
   PARAMETER(LCL.Error_Reason_Descript_6);
   PARAMETER(LCL.Error_Reason_Descript_7);
   {
    //?Execute internal function

    // PAR.Error Reason Descript 1 = CON.*BLANK
    PAR.Error_Reason_Descript_1 = *BLANK;

    // PAR.Error Reason Descript 2 = CON.*BLANK
    PAR.Error_Reason_Descript_2 = *BLANK;

    // PAR.Error Reason Descript 3 = CON.*BLANK
    PAR.Error_Reason_Descript_3 = *BLANK;

    // PAR.Error Reason Descript 4 = CON.*BLANK
    PAR.Error_Reason_Descript_4 = *BLANK;

    // PAR.Error Reason Descript 5 = CON.*BLANK
    PAR.Error_Reason_Descript_5 = *BLANK;

    // WRK.Error Flag            USR = CND.Blank
    WRK.Error_Flag_USR = *BLANK;

    // PAR.Error Status = CND.blank
    PAR.Error_Status = *BLANK;

    // WRK.Error Reason Descript 1 = CON.*BLANK
    WRK.Error_Reason_Descript_1 = *BLANK;

    // WRK.Error Reason Descript 2 = CON.*BLANK
    WRK.Error_Reason_Descript_2 = *BLANK;

    // WRK.Error Reason Descript 3 = CON.*BLANK
    WRK.Error_Reason_Descript_3 = *BLANK;

    // WRK.Error Reason Descript 4 = CON.*BLANK
    WRK.Error_Reason_Descript_4 = *BLANK;

    // WRK.Error Reason Descript 5 = CON.*BLANK
    WRK.Error_Reason_Descript_5 = *BLANK;

    CASE;

    // IF PAR.Company Organization is Seaboard
    IF PAR.Company_Organization = 'S';

    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // Call program Val Age information   XF.
    CALL PROGRAM(Val Age information   XF) ('PNQNXFR');
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(WRK.Error_Flag_USR);
    PARAMETER(WRK.Error_Reason_Descript_1);
    PARAMETER(WRK.Error_Reason_Descript_2);
    PARAMETER(WRK.Error_Reason_Descript_3);
    PARAMETER(WRK.Error_Reason_Descript_4);
    PARAMETER(WRK.Error_Reason_Descript_5);
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Scheduled_Ship_Date);
    PARAMETER(PAR.Requested_Delivery_Date);
    PARAMETER(PAR.Item_Age_Days);
    PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
    PARAMETER(PAR.Production_Ovr_AgeDte_To);
    PARAMETER(PAR.Production_AgeDte_Fr);
    PARAMETER(PAR.Production_AgeDte_To);

    //?Verify if message should be sent if validation is required
    CASE;

    // IF WRK.Error Flag            USR is Yes
    IF WRK.Error_Flag_USR = 'Y';

    // AND PAR.Production Dates Sts Usr is Validation routine
    AND PAR.Production_Dates_Sts_Usr = 'V';

    //?message 1 Product is shipped before product is made
    CASE;

    // IF WRK.Error Reason Descript 1 NE WRK.Blank for 30          USR
    IF WRK.Error_Reason_Descript_1 <> WRK.Blank_for_30_USR;

    // PAR.Error Reason Descript 1 = WRK.Error Reason Descript 1
    PAR.Error_Reason_Descript_1 = WRK.Error_Reason_Descript_1;

    ENDIF;

    //?message 2 Either Days or override date but not both
    CASE;

    // IF WRK.Error Reason Descript 2 NE WRK.Blank for 30          USR
    IF WRK.Error_Reason_Descript_2 <> WRK.Blank_for_30_USR;

    // PAR.Error Reason Descript 2 = WRK.Error Reason Descript 2
    PAR.Error_Reason_Descript_2 = WRK.Error_Reason_Descript_2;

    ENDIF;

    //?message 3 With Chill Days Either Days or Override Dates required
    CASE;

    // IF WRK.Error Reason Descript 3 NE WRK.Blank for 30          USR
    IF WRK.Error_Reason_Descript_3 <> WRK.Blank_for_30_USR;

    // PAR.Error Reason Descript 3 = WRK.Error Reason Descript 3
    PAR.Error_Reason_Descript_3 = WRK.Error_Reason_Descript_3;

    ENDIF;

    //?message 4 From date is > then SHIP DATE
    CASE;

    // IF WRK.Error Reason Descript 4 NE WRK.Blank for 30          USR
    IF WRK.Error_Reason_Descript_4 <> WRK.Blank_for_30_USR;

    // PAR.Error Reason Descript 4 = WRK.Error Reason Descript 4
    PAR.Error_Reason_Descript_4 = WRK.Error_Reason_Descript_4;

    ENDIF;

    //?message 5 To date is > then SHIP DATE
    CASE;

    // IF WRK.Error Reason Descript 5 NE WRK.Blank for 30          USR
    IF WRK.Error_Reason_Descript_5 <> WRK.Blank_for_30_USR;

    // PAR.Error Reason Descript 5 = WRK.Error Reason Descript 5
    PAR.Error_Reason_Descript_5 = WRK.Error_Reason_Descript_5;

    ENDIF;

    CASE;

    // IF PAR.Production Ovr AgeDte Fr is not entered
    IF PAR.Production_Ovr_AgeDte_Fr = *ZERO;

    //?** These are coming in as *ZERO in the parms. So no error.
    // WRK.Error Flag            USR = CND.No
    WRK.Error_Flag_USR = 'N';

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Error Reason Descript 7 = CON.Inv Prod Ovr Age Fr/To Dt
    PAR.Error_Reason_Descript_7 = 'Inv Prod Ovr Age Fr/To Dt';

    // WRK.Error Flag            USR = CND.No
    WRK.Error_Flag_USR = 'N';

    ENDIF;

    CASE;

    // IF WRK.Error Flag            USR is Yes
    IF WRK.Error_Flag_USR = 'Y';

    // PAR.Error Status = CND.yes
    PAR.Error_Status = 'Y';

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

   }

   //?** Error Reason Descr 1
   CASE;

   // IF LCL.Error Reason Descript 1 is Not Blank
   IF LCL.Error_Reason_Descript_1 <> *BLANK;

   // LCL.BOE Error Comment = CONCAT(CON.Production Date is Invali,CON.d for Requested Ship Date,CON
   LCL.BOE_Error_Comment = 'Production Date is Invali' + 'd for Requested Ship Date' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('OVAGD1');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   ENDIF;

   //?** Error Reason Descr 2
   CASE;

   // IF LCL.Error Reason Descript 2 is Not Blank
   IF LCL.Error_Reason_Descript_2 <> *BLANK;

   // LCL.BOE Error Comment = CONCAT(CON.Enter Age Days or Product,CON.ion Override Age Frm/To,CON.*
   LCL.BOE_Error_Comment = 'Enter Age Days or Product' + 'ion Override Age Frm/To' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('OVAGD2');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   ENDIF;

   //?** Error Reason Descr 3
   CASE;

   // IF LCL.Error Reason Descript 3 is Not Blank
   IF LCL.Error_Reason_Descript_3 <> *BLANK;

   // LCL.BOE Error Comment = CONCAT(CON.Override Dates after Ship,CON.ped Date.,CON.*ZERO)
   LCL.BOE_Error_Comment = 'Override Dates after Ship' + 'ped Date.' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('OVAGD3');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   ENDIF;

   //?** Error Reason Descr 4
   CASE;

   // IF LCL.Error Reason Descript 4 is Not Blank
   IF LCL.Error_Reason_Descript_4 <> *BLANK;

   // LCL.BOE Error Comment = CONCAT(CON.Override Dates after Ship,CON.ped Date.,CON.*ZERO)
   LCL.BOE_Error_Comment = 'Override Dates after Ship' + 'ped Date.' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('OVAGD3');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   ENDIF;

   //?** Error Reason Descr 5
   CASE;

   // IF LCL.Error Reason Descript 5 is Not Blank
   IF LCL.Error_Reason_Descript_5 <> *BLANK;

   // LCL.BOE Error Comment = CONCAT(CON.Override Dates after Ship,CON.ped Date.,CON.*ZERO)
   LCL.BOE_Error_Comment = 'Override Dates after Ship' + 'ped Date.' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('OVAGD3');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   ENDIF;

   //?** Error Reason Descr 6
   CASE;

   // IF LCL.Error Reason Descript 6 is Not Blank
   IF LCL.Error_Reason_Descript_6 <> *BLANK;

   // LCL.BOE Error Comment = CONCAT(CON.Invalid Itm Age Days in I,CON.tm Age Info Validation.,CON.*
   LCL.BOE_Error_Comment = 'Invalid Itm Age Days in I' + 'tm Age Info Validation.' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('OVAGD6');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   ENDIF;

   // Call program Val Item              XF.
   CALL PROGRAM(Val Item              XF) ('PMG1XFR');
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Record_Found_USR);

   //?** Ham Group Reqd
   CASE;

   // IF LCL.Record Found USR is Record Found
   IF LCL.Record_Found_USR = 'Y';

   // AND DB1.Ham Group Number is Not Entered
   AND DB1.Ham_Group_Number = *ZERO;

   // LCL.BOE Error Comment = CONCAT(CON.Ham Group is Required for,CON. Item Code.,CON.*ZERO)
   LCL.BOE_Error_Comment = 'Ham Group is Required for' + ' Item Code.' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('HAMGRP');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   //?** Ham Group Reqd
   // IF LCL.Record Found USR is Record Found
   IF LCL.Record_Found_USR = 'Y';

   // AND DB1.Ham Group Number is Entered
   AND DB1.Ham_Group_Number <> *ZERO;

   EXECUTE FUNCTION(Rtv Credit Item Sts   RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1326370;
   PARAMETER(PAR.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Credit_Item_Status);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.Credit Item Status is yes
   IF LCL.Credit_Item_Status = 'Y';

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(VAL Ham Group/Item     RT) TYPE(RTVOBJ) FILE(PDM1REP)          AC1568020;
   PARAMETER(DB1.Ham_Group_Number);
   PARAMETER(DB1.Item_Code);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   //?** Ham / Item error
   CASE;

   // IF PGM.*Return code is *Normal
   IF PGM.*Return_code = *BLANK;

   //?** Ham / Item error
   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.BOE Error Comment = CONCAT(CON.Ham Group Item is not fou,CON.nd.,CON.*ZERO)
   LCL.BOE_Error_Comment = 'Ham Group Item is not fou' + 'nd.' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('HAMITM');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

   //?** 2 Quantity Ordered
   CASE;

   // IF DB1.Quantity Ordered is Equal to zero
   IF DB1.Quantity_Ordered = *ZERO;

   // LCL.BOE Error Comment = CONCAT(CON.Invalid Quantity Ordered.,CON.*BLANK,CON.*ZERO)
   LCL.BOE_Error_Comment = 'Invalid Quantity Ordered.' + *BLANK (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('QTYORD');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   ENDIF;

   // Call program RTV PrcMthTyp/PrcTyp  XF.
   CALL PROGRAM(RTV PrcMthTyp/PrcTyp  XF) ('PNS7XFR');
   PARAMETER(PAR.Company_Number);
   PARAMETER(DB1.Price_Method_Code);
   PARAMETER(LCL.Price_Method_Type);
   PARAMETER(NLL.PMH_Price_Type);

   //?** 3 Price Method Code
   CASE;

   // IF LCL.Price Method Type is *Blank
   IF LCL.Price_Method_Type = *BLANK;

   // LCL.BOE Error Comment = CONCAT(CON.Invalid Price Method Code,CON.*BLANK,CON.*ZERO)
   LCL.BOE_Error_Comment = 'Invalid Price Method Code' + *BLANK (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('PRCMTH');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   ENDIF;

   //?** 4 Item Age Days
   CASE;

   // IF DB1.Item Age Days is Not Entered
   IF DB1.Item_Age_Days = *ZERO;

   // LCL.BOE Error Comment = CONCAT(CON.Invalid Item Age Days.,CON.*BLANK,CON.*ZERO)
   LCL.BOE_Error_Comment = 'Invalid Item Age Days.' + *BLANK (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('OVAGD6');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   ENDIF;

   //?** 5 OD Price Type
   CASE;

   // IF DB1.OD Price Type is Valid Values
   IF DB1.OD_Price_Type = 'CON'/'FRM'/'NEG'/'HDG'/'DST'/'NHT'/'TNK'/'FLR';

   //?** 5 OD Price Type
   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.BOE Error Comment = CONCAT(CON.Invalid OD Price Type.,CON.*BLANK,CON.*ZERO)
   LCL.BOE_Error_Comment = 'Invalid OD Price Type.' + *BLANK (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('PRCTYP');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   ENDIF;

   //?*** Load From and Thru Date for 1 month prior and after today.
   // LCL.From Date             USR = JOB.*Job exec start date + CON.-1 *MONTHS
   LCL.From_Date_USR = DATEINCR(JOB.*Job_exec_start_date '-1' 'MO' 1111111 'NONE' 'N' 1);

   // LCL.Thru Date             USR = JOB.*Job exec start date + CON.1 *MONTHS
   LCL.Thru_Date_USR = DATEINCR(JOB.*Job_exec_start_date 1 'MO' 1111111 'NONE' 'N' 1);

   //?** WI546_2-Validate Date format is CYMD for Market Pricing Date
   CASE;

   // IF DB1.Market Pricing Date is NE Zero
   IF DB1.Market_Pricing_Date <> *ZERO;

   // LCL.Text usr 11 = CND.Not Entered
   LCL.Text_usr_11 = *BLANK;

   // LCL.Date From Convert USR = CVTVAR(DB1.Market Pricing Date)
   LCL.Date_From_Convert_USR = CVTVAR(DB1.Market_Pricing_Date);

   // Call program Cvt Date              UP.
   CALL PROGRAM(Cvt Date              UP) ('POD5UPR');
   PARAMETER(LCL.Date_From_Convert_USR);
   PARAMETER(LCL.Text_usr_11);
   PARAMETER(*CYMD);
   PARAMETER(*YYMD);
   PARAMETER(*NONE);

   CASE;

   // IF LCL.Text usr 11 is Not Entered
   IF LCL.Text_usr_11 = *BLANK;

   // LCL.BOE Error Comment = CONCAT(CON.Invalid Market Pricing Da,CON.te Format.,CON.*ZERO)
   LCL.BOE_Error_Comment = 'Invalid Market Pricing Da' + 'te Format.' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER('MKTPDT');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   ENDIF;

   ENDIF;

   //?** 7 OC MPR Prc Ready to Send
   CASE;

   // IF DB1.OD MPR Prc Ready to Send is MPR Ready Sts
   IF DB1.OD_MPR_Prc_Ready_to_Send = *BLANK/'X'/'N'/'Y';

   //?** 7 OC MPR Prc Ready to Send
   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.BOE Error Comment = CONCAT(CON.Invalid MPR Ready Status.,CON.*BLANK,CON.*ZERO)
   LCL.BOE_Error_Comment = 'Invalid MPR Ready Status.' + *BLANK (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('MPRRDY');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   ENDIF;

   //?** 8 Price Overage Override
   CASE;

   // IF DB1.OD MPR Prc Ready to Send is yes
   IF DB1.OD_MPR_Prc_Ready_to_Send = 'Y';

   // AND DB1.Price Overage Override is LE .0100
   AND DB1.Price_Overage_Override <= .0100;

   // LCL.BOE Error Comment = CONCAT(CON.Cannot send to MPR with p,CON.rice <=.01,CON.*ZERO)
   LCL.BOE_Error_Comment = 'Cannot send to MPR with p' + 'rice <=.01' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('PRCOVR');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   ENDIF;

   //?** OD Pallet Type  WI546_2
   CASE;

   // IF DB1.OD Pallet Type is Valid Values
   IF DB1.OD_Pallet_Type = '01'/'02'/'CH'/'HT'/'04'/'03';

   // LCL.OD Pallet Type = DB1.OD Pallet Type
   LCL.OD_Pallet_Type = DB1.OD_Pallet_Type;

   //?** OD Pallet Type  WI546_2
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Rtv All) TYPE(RTVOBJ) FILE(PUAAREP)                            AC2149720;
   PARAMETER(PAR.Ship_To_Customer);
   PARAMETER(NLL.M3_Supplier_ID);
   PARAMETER(NLL.Dft_Mode_of_Transportaton);
   PARAMETER(NLL.Buying_Group);
   PARAMETER(NLL.Buying_Group_Opt_In_Out);
   PARAMETER(NLL.Ship_To_Establishment_nbr);
   PARAMETER(LCL.OD_Pallet_Type);
   PARAMETER(NLL.Cust_Dft_Price_Type);
   PARAMETER(NLL.Cust_Dft_Age_Days);
   PARAMETER(NLL.Cust_Dft_Delivery_Time);
   {
    //?USER: Initialize routine

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

   //?** Test for Valid values,Palletize Otherwise Blank
   CASE;

   // IF DB1.Palletize is Y/N/' ' Values
   IF DB1.Palletize = *BLANK/'N'/'Y';

   // LCL.Palletize = DB1.Palletize
   LCL.Palletize = DB1.Palletize;

   //?** Test for Valid values,Palletize Otherwise Blank
   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Palletize = CND.blank
   LCL.Palletize = *BLANK;

   ENDIF;

   //?** Test for Slip Sheet
   CASE;

   // IF DB1.Slip Sheet is Y/N/' ' Values
   IF DB1.Slip_Sheet = *BLANK/'N'/'Y';

   // LCL.Slip Sheet = DB1.Slip Sheet
   LCL.Slip_Sheet = DB1.Slip_Sheet;

   //?** Test for Slip Sheet
   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Slip Sheet = CND.blank
   LCL.Slip_Sheet = *BLANK;

   ENDIF;

   //?** Write Detail to Ord Detail in Qtemp if validation passed.
   CASE;

   // IF PAR.Hdr/Dtl Validation Pass U is Yes
   IF PAR.Hdr_Dtl_Validation_Pass_U = 'Y';

   EXECUTE FUNCTION(RTV All fields) TYPE(RTVOBJ) FILE(CAEOREP)                     AC1478596;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Ship_To_Customer);
   PARAMETER(NLL.Terms_Code);
   PARAMETER(NLL.Sales_Route_Code);
   PARAMETER(NLL.Special_Instructions_2);
   PARAMETER(NLL.Special_Instructions);
   PARAMETER(NLL.Carrier_Code);
   PARAMETER(NLL.Broker);
   PARAMETER(NLL.P_O_Required_Flag);
   PARAMETER(NLL.Deliver_after_time);
   PARAMETER(NLL.Deliver_before_time);
   PARAMETER(NLL.Alt_Remittance_Flag);
   PARAMETER(NLL.Type_Code);
   PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
   PARAMETER(NLL.Mileage_To_Customer);
   PARAMETER(NLL.Co_Cust_Overage_Rate_CWT);
   PARAMETER(NLL.Age_Code);
   PARAMETER(NLL.Warehouse_Code);
   PARAMETER(NLL.Outside_Warehouse_Flag);
   PARAMETER(NLL.Customer_Group_Code);
   PARAMETER(NLL.Customer_Group_Code_2);
   PARAMETER(NLL.G_L_Code);
   PARAMETER(LCL.Commodity_Market_Code);
   PARAMETER(NLL.Credit_Contact_Name);
   PARAMETER(NLL.Credit_Contact_Telephone);
   PARAMETER(NLL.Credit_Contact_Bus_Title);
   PARAMETER(NLL.Credit_Contact_Fax_Number);
   PARAMETER(NLL.Allow_Man_Qt_WO_Approval);
   PARAMETER(NLL.Fax_Invoice_Flag);
   PARAMETER(NLL.Fax_Invoice_Fax_Number);
   PARAMETER(NLL.Fax_Invoice_Contact_Name);
   PARAMETER(NLL.Distributor);
   PARAMETER(NLL.Default_Shipping_Co_Sts);
   PARAMETER(NLL.Ord_Ent_Default_Sls_Rte);
   PARAMETER(NLL.Bypass_DDt_Delay_w_Invcng);
   PARAMETER(NLL.EDI_Status_1);
   PARAMETER(NLL.EDI_Status_2);
   PARAMETER(NLL.EDI_Status_3);
   PARAMETER(NLL.Record_Status);
   PARAMETER(NLL.Job_Time);
   PARAMETER(NLL.User_Id);
   PARAMETER(NLL.Job_Name);
   PARAMETER(NLL.Job_Date);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    // PGM.*Return code = CND.*Record already exists
    PGM.*Return_code = 'Y2U0003';

    MOVE *ALL (To: PAR From: DB1);

   }

   // Call program Crt Block Order Qtemp XF.
   CALL PROGRAM(Crt Block Order Qtemp XF) ('PUZ7XFR');
   PARAMETER(PAR.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Sequence_Number);
   PARAMETER(1);
   PARAMETER(DB1.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Ship_To_Customer);
   PARAMETER(*ZERO);
   PARAMETER('E');
   PARAMETER('E');
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(DB1.Market_Pricing_Date);
   PARAMETER(LCL.Commodity_Market_Code);
   PARAMETER(*BLANK);
   PARAMETER(DB1.Price_Method_Code);
   PARAMETER(DB1.Price_Overage_Override);
   PARAMETER(*ZERO);
   PARAMETER('U');
   PARAMETER(*ZERO);
   PARAMETER(LCL.U_M_Base_Price);
   PARAMETER(LCL.U_M_Ordered);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(LCL.OD_Production_Plan_Sts);
   PARAMETER(LCL.Order_Desc_Line_One);
   PARAMETER(LCL.Order_Desc_Line_Two);
   PARAMETER(*BLANK);
   PARAMETER(LCL.Palletize);
   PARAMETER(LCL.Slip_Sheet);
   PARAMETER(LCL.Catch_Weight_Status);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(LCL.Production_Date_Control);
   PARAMETER(*ZERO);
   PARAMETER(DB1.Quantity_Ordered);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(LCL.Unit_Cost_Per_Pound);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(LCL.Unit_Weight_Ordered_U_M);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Requested_Ship_Date);
   PARAMETER(PAR.Requested_Ship_Date);
   PARAMETER(*ZERO);
   PARAMETER(LCL.Affect_Inventory_Status);
   PARAMETER(LCL.Affect_Sales_Doll_Status);
   PARAMETER(LCL.Affect_Sales_Pnds_Status);
   PARAMETER(LCL.Item_Structure_Type_Code);
   PARAMETER(LCL.Item_Structure_Group_Code);
   PARAMETER(LCL.Item_Structure_Class_Code);
   PARAMETER(LCL.Item_Level);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(JOB.*Job_exec_start_date);
   PARAMETER('INFORMATIC');
   PARAMETER(PAR.Country_Code);
   PARAMETER('01');
   PARAMETER(*BLANK);
   PARAMETER(LCL.Sales_Route_Code);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(DB1.Ham_Group_Number);
   PARAMETER(*BLANK);
   PARAMETER('Y');
   PARAMETER('Y');
   PARAMETER('Y');
   PARAMETER(*BLANK);
   PARAMETER(LCL.Ord_TF_Exempt_Code);
   PARAMETER(LCL.OD_Pallet_Type);
   PARAMETER(LCL.Production_Warehouse);
   PARAMETER(DB1.OD_Price_Type);
   PARAMETER(*ZERO);
   PARAMETER(LCL.Consumed_Item_Code);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(LCL.OD_Item_Target_Price);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(DB1.OD_MPR_Prc_Ready_to_Send);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(DB1.Item_Age_Days);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.OHE_Spot_Buy);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);

   EXECUTE FUNCTION(Edt OD Pricing Validt2 IF) TYPE(EXCINTFUN)                     AC2217400;
   PARAMETER(PAR.Company_Number);
   PARAMETER(9999999);
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Market_Pricing_Date);
   PARAMETER(LCL.Commodity_Market_Code);
   PARAMETER(LCL.Date_Method_Code);
   PARAMETER(LCL.Price_Method_Code);
   PARAMETER(LCL.Price_Overage_Override);
   PARAMETER(LCL.U_M_Base_Price);
   PARAMETER(DB1.Quantity_Ordered);
   PARAMETER(*ZERO);
   PARAMETER(LCL.Unit_Price_Credit);
   PARAMETER(LCL.Unit_Weight_Ordered_U_M);
   PARAMETER(PAR.Requested_Ship_Date);
   PARAMETER(*ZERO);
   PARAMETER(LCL.OD_Ceiling_Price);
   PARAMETER(LCL.OD_Market_Begin_Date);
   PARAMETER(LCL.OD_Market_Ending_Date);
   PARAMETER(PAR.Ship_To_Customer);
   PARAMETER(LCL.Type_Code);
   PARAMETER(LCL.Default_Commod_Mark_basis);
   PARAMETER(LCL.Market_Overage);
   PARAMETER(LCL.Commodity_Price_Group);
   PARAMETER(LCL.Primal_Group_Code);
   PARAMETER(LCL.Absorbed_Freight_Rate_CWT);
   PARAMETER(LCL.Billing_Activity_Type);
   PARAMETER(LCL.USR_Display_4);
   PARAMETER(LCL.Pricing_Valid_Error_Cde_U);
   PARAMETER(LCL.Error_Status);
   {
    //?Execute internal function

    // PAR.Pricing Valid Error Cde U = CON.*BLANK
    PAR.Pricing_Valid_Error_Cde_U = *BLANK;

    // PAR.Unit Price - Credit = CON.*ZERO
    PAR.Unit_Price_Credit = *ZERO;

    // Call program RTV PrcMthTyp/PrcTyp  XF.
    CALL PROGRAM(RTV PrcMthTyp/PrcTyp  XF) ('PNS7XFR');
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Price_Method_Code);
    PARAMETER(LCL.Price_Method_Type);
    PARAMETER(LCL.PMH_Price_Type);

    // Call program Rtv Market Dtls OrEnt XF.
    CALL PROGRAM(Rtv Market Dtls OrEnt XF) ('PNS1XFR');
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Commodity_Market_Code);
    PARAMETER(LCL.Commodity_Price_Group);
    PARAMETER(LCL.Market_Prem_Ded);
    PARAMETER(LCL.Record_Found_USR);

    // PAR.USR Display 4 = CND.No
    PAR.USR_Display_4 = 'N';

    //?LCL.Commodity Price Group & LCL.Market Overage
    CASE;

    // IF LCL.Record Found USR is Record Found
    IF LCL.Record_Found_USR = 'Y';

    // LCL.Market Overage = LCL.Market Prem/Ded
    LCL.Market_Overage = LCL.Market_Prem_Ded;

    //?LCL.Commodity Price Group & LCL.Market Overage
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.Commodity Price Group = PAR.Commodity Price Group
    LCL.Commodity_Price_Group = PAR.Commodity_Price_Group;

    // LCL.Market Overage = PAR.Market Overage
    LCL.Market_Overage = PAR.Market_Overage;

    ENDIF;

    //?VAL: Price Method Code
    CASE;

    // IF PAR.Price Method Code is Blank
    IF PAR.Price_Method_Code = *BLANK;

    // PAR.Error Status = CND.yes
    PAR.Error_Status = 'Y';

    // Send error message - 'Value Required.'
    ERROR(USR2808);
    MSGPARM(PAR.Price_Method_Code);

    ENDIF;

    //?VAL: Price Code
    CASE;

    // IF PAR.Price Code is Entered
    IF PAR.Price_Code > *ZERO;

    //?VAL: Price Code
    CASE;

    // IF LCL.Price Method Type is Not Contract
    IF LCL.Price_Method_Type = 'X'/'F'/'M'/'K';

    // PAR.Error Status = CND.yes
    PAR.Error_Status = 'Y';

    // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error 1
    PAR.Pricing_Valid_Error_Cde_U = 'PRCER1';

    CASE;

    // IF PAR.USR Display 4 is No
    IF PAR.USR_Display_4 = 'N';

    // PAR.USR Display 4 = CND.Yes
    PAR.USR_Display_4 = 'Y';

    ENDIF;

    //?VAL: Price Code
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Call program Rtv Cust Prc Str/End  XF.
    CALL PROGRAM(Rtv Cust Prc Str/End  XF) ('PNTAXFR');
    PARAMETER(PAR.Ship_To_Customer);
    PARAMETER(PAR.Price_Code);
    PARAMETER(LCL.Price_Start_Date);
    PARAMETER(LCL.Price_End_Date);

    CASE;

    // IF LCL.Price Start Date is Not Entered
    IF LCL.Price_Start_Date = *ZERO;

    // PAR.Error Status = CND.yes
    PAR.Error_Status = 'Y';

    // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error 2
    PAR.Pricing_Valid_Error_Cde_U = 'PRCER2';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?VAL: Contract Start & End Date
    CASE;

    // IF PAR.Scheduled Ship Date LT LCL.Price Start Date
    IF PAR.Scheduled_Ship_Date < LCL.Price_Start_Date;

    // OR PAR.Scheduled Ship Date GT LCL.Price End Date
    OR PAR.Scheduled_Ship_Date > LCL.Price_End_Date;

    // PAR.Error Status = CND.yes
    PAR.Error_Status = 'Y';

    // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error 3
    PAR.Pricing_Valid_Error_Cde_U = 'PRCER3';

    ENDIF;

    // Call program Rtv Max Wt and price  XF.
    CALL PROGRAM(Rtv Max Wt and price  XF) ('PNTBXFR');
    PARAMETER(PGM.*Return_code);
    PARAMETER(PAR.Ship_To_Customer);
    PARAMETER(PAR.Price_Code);
    PARAMETER(PAR.Item_Code);
    PARAMETER(LCL.Maximum_Contract_Units);
    PARAMETER(LCL.Customer_Price_UM_Prc);
    PARAMETER(LCL.Commodity_Market_Code_USR);
    PARAMETER(LCL.Price_Method_Code_USR);
    PARAMETER(LCL.Date_Method_Code_USR);
    PARAMETER(LCL.Contract_Unit_Type);

    CASE;

    // IF PGM.*Return code is *Record does not exist
    IF PGM.*Return_code = 'Y2U0005';

    // PAR.Error Status = CND.yes
    PAR.Error_Status = 'Y';

    // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error 4
    PAR.Pricing_Valid_Error_Cde_U = 'PRCER4';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Sum weights shipped/ordered for ship to /price code
    EXECUTE FUNCTION(Clc Sum Ship/Ord Unit2 IF) TYPE(EXCINTFUN)                     AC2217407;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Order_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Ship_To_Customer);
    PARAMETER(PAR.Commodity_Market_Code);
    PARAMETER(PAR.Date_Method_Code);
    PARAMETER(PAR.Price_Method_Code);
    PARAMETER(PAR.Price_Overage_Override);
    PARAMETER(PAR.U_M_Base_Price);
    PARAMETER(PAR.Quantity_Ordered);
    PARAMETER(PAR.Unit_Weight_Ordered_U_M);
    PARAMETER(PAR.Price_Code);
    PARAMETER(PAR.OD_Ceiling_Price);
    PARAMETER(PAR.Error_Status);
    PARAMETER(LCL.Price_Method_Type);
    PARAMETER(LCL.PMH_Price_Type);
    PARAMETER(LCL.Pricing_Valid_Error_Cde_U);
    {
     //?Execute internal function

     // PAR.Error Status = CND.no
     PAR.Error_Status = 'N';

     // LCL.Weight Ordered = PAR.Quantity Ordered * PAR.Unit Weight Ordered U/M *
     LCL.Weight_Ordered = PAR.Quantity_Ordered * PAR.Unit_Weight_Ordered_U_M;

     // Call program CLC Sum Ship/Ord Unit XF.
     CALL PROGRAM(CLC Sum Ship/Ord Unit XF) ('PPA6XFR');
     PARAMETER(PAR.Ship_To_Customer);
     PARAMETER(PAR.Price_Code);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Total_Weight_Ordered_USR);
     PARAMETER(PAR.Order_Number);
     PARAMETER(PAR.Total_Quantity_Ordered);

     // PAR.Total Weight Ordered USR = PAR.Total Weight Ordered USR + LCL.Weight Ordered
     PAR.Total_Weight_Ordered_USR = PAR.Total_Weight_Ordered_USR + LCL.Weight_Ordered;

     // PAR.Total Quantity Ordered = PAR.Total Quantity Ordered + PAR.Quantity Ordered
     PAR.Total_Quantity_Ordered = PAR.Total_Quantity_Ordered + PAR.Quantity_Ordered;

     //?5/13/10 SAZ P205-Add parm for Max Unit Type;rtv Contract Unit Type
     // Call program Rtv Cust Prc hdr/dtl  XF.
     CALL PROGRAM(Rtv Cust Prc hdr/dtl  XF) ('PPA7XFR');
     PARAMETER(PAR.Ship_To_Customer);
     PARAMETER(PAR.Price_Code);
     PARAMETER(WRK.Price_Start_Date);
     PARAMETER(WRK.Price_End_Date);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Maximum_Contract_Units);
     PARAMETER(PAR.Customer_Price_UM_Prc);
     PARAMETER(PAR.Commodity_Market_Code);
     PARAMETER(LCL.Price_Method_Code);
     PARAMETER(PAR.Date_Method_Code);
     PARAMETER(PAR.Contract_Unit_Type);

     // PAR.Price Method Code = LCL.Price Method Code
     PAR.Price_Method_Code = LCL.Price_Method_Code;

     EXECUTE FUNCTION(RTV PrcMthTyp/PrcTyp  RT) TYPE(RTVOBJ) FILE(PDIHREP)           AC1997170;
     PARAMETER(PAR.Company_Number);
     PARAMETER(LCL.Price_Method_Code);
     PARAMETER(PAR.Price_Method_Type);
     PARAMETER(PAR.PMH_Price_Type);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     //?5/13/10 SAZ P205-Use Contract Unit Type to check Qty or Weight-Lbs
     //?Use Contract Unit Type to check Qty or Weight-Lbs
     //?VAL: Total Weight and Quantity w/Maximum
     CASE;

     // IF PAR.Contract Unit Type is Weight-LB
     IF PAR.Contract_Unit_Type = 'W';

     CASE;

     // IF PAR.Total Weight Ordered USR GT PAR.Maximum Contract Units
     IF PAR.Total_Weight_Ordered_USR > PAR.Maximum_Contract_Units;

     // PAR.Error Status = CND.yes
     PAR.Error_Status = 'Y';

     // LCL.Weight Allocated USR = PAR.Total Weight Ordered USR - PAR.Maximum Contract Units
     LCL.Weight_Allocated_USR = PAR.Total_Weight_Ordered_USR - PAR.Maximum_Contract_Units;

     // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error T
     PAR.Pricing_Valid_Error_Cde_U = 'PRCERT';

     ENDIF;

     //?VAL: Total Weight and Quantity w/Maximum
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?If Contract Unit type = Quantity
     CASE;

     // IF PAR.Total Quantity Ordered GT PAR.Maximum Contract Units
     IF PAR.Total_Quantity_Ordered > PAR.Maximum_Contract_Units;

     // PAR.Error Status = CND.yes
     PAR.Error_Status = 'Y';

     // LCL.Weight Allocated USR = PAR.Total Quantity Ordered - PAR.Maximum Contract Units
     LCL.Weight_Allocated_USR = PAR.Total_Quantity_Ordered - PAR.Maximum_Contract_Units;

     // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error T
     PAR.Pricing_Valid_Error_Cde_U = 'PRCERT';

     ENDIF;

     ENDIF;

     //?Original code
     //?OUT: No Errors
     CASE;

     // IF PAR.Error Status is no
     IF PAR.Error_Status = 'N';

     // PAR.Price Overage Override = PAR.Customer Price /UM Prc
     PAR.Price_Overage_Override = PAR.Customer_Price_UM_Prc;

     CASE;

     // IF PAR.PMH Price Type is Invoice Price
     IF PAR.PMH_Price_Type = 'I';

     // PAR.Price Overage Override = PAR.Customer Price /UM Prc
     PAR.Price_Overage_Override = PAR.Customer_Price_UM_Prc;

     // PAR.OD Ceiling Price = CON.*ZERO
     PAR.OD_Ceiling_Price = *ZERO;

     // IF PAR.PMH Price Type is Ceiling Price
     IF PAR.PMH_Price_Type = 'C';

     // PAR.Price Overage Override = CON.*ZERO
     PAR.Price_Overage_Override = *ZERO;

     // PAR.OD Ceiling Price = PAR.Customer Price /UM Prc
     PAR.OD_Ceiling_Price = PAR.Customer_Price_UM_Prc;

     ENDIF;

     ENDIF;

    }

    CASE;

    // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error 1
    IF LCL.Pricing_Valid_Error_Cde_U = 'PRCER1';

    // LCL.BOE Error Comment = CONCAT(CON.Price Code must be Zero f,CON.or Price Method Code.,CON.*Z
    LCL.BOE_Error_Comment = 'Price Code must be Zero f' + 'or Price Method Code.' (*ZERO);

    // Call program EXC Crt Blk Order ErrorEX.
    CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
    PARAMETER(LCL.Surrogate_Number);
    PARAMETER(*MISSING);
    PARAMETER('PRCER1');
    PARAMETER(LCL.BOE_Error_Comment);

    // LCL.Hdr/Dtl Validation Pass U = CND.No
    LCL.Hdr_Dtl_Validation_Pass_U = 'N';

    // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error 1
    IF LCL.Pricing_Valid_Error_Cde_U = 'PRCER1';

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

    //?VAL: Price Code
    // IF *OTHERWISE
    IF *OTHERWISE;

    //?VAL: Price Code Required
    CASE;

    // IF LCL.Price Method Type is Contract Pricing
    IF LCL.Price_Method_Type = 'Q';

    // PAR.Error Status = CND.yes
    PAR.Error_Status = 'Y';

    // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error 5
    PAR.Pricing_Valid_Error_Cde_U = 'PRCER5';

    CASE;

    // IF PAR.USR Display 4 is No
    IF PAR.USR_Display_4 = 'N';

    // PAR.USR Display 4 = CND.Yes
    PAR.USR_Display_4 = 'Y';

    ENDIF;

    ENDIF;

    ENDIF;

    //?VAL: Market Price Date/Range
    CASE;

    // IF PAR.Market Pricing Date is NE Zero
    IF PAR.Market_Pricing_Date <> *ZERO;

    // AND PAR.OD Market Begin Date is Entered
    AND ( PAR.OD_Market_Begin_Date <> *ZERO;

    // OR PAR.OD Market Ending Date is Entered
    OR PAR.OD_Market_Ending_Date <> *ZERO );

    // PAR.Error Status = CND.yes
    PAR.Error_Status = 'Y';

    // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error 6
    PAR.Pricing_Valid_Error_Cde_U = 'PRCER6';

    //?VAL: Market Price Date/Range
    // IF PAR.OD Market Begin Date GT PAR.OD Market Ending Date
    IF PAR.OD_Market_Begin_Date > PAR.OD_Market_Ending_Date;

    CASE;

    // IF PAR.OD Market Ending Date is not entered
    IF PAR.OD_Market_Ending_Date = *ZERO;

    // PAR.Error Status = CND.yes
    PAR.Error_Status = 'Y';

    // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error 7
    PAR.Pricing_Valid_Error_Cde_U = 'PRCER7';

    ENDIF;

    ENDIF;

    //?VAL: Price Method Type = Published
    CASE;

    // IF LCL.Price Method Type is Published Pricing
    IF LCL.Price_Method_Type = 'P';

    //?VAL: Price Overage Override
    CASE;

    // IF PAR.Price Overage Override is Not Zeros
    IF PAR.Price_Overage_Override <> *ZERO;

    // PAR.Error Status = CND.yes
    PAR.Error_Status = 'Y';

    // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error 8
    PAR.Pricing_Valid_Error_Cde_U = 'PRCER8';

    ENDIF;

    // PAR.Commodity Market Code = CND.Seaboard
    PAR.Commodity_Market_Code = 'SBD';

    //?VAL: Date Method Code
    CASE;

    // IF PAR.Date Method Code is Entered
    IF PAR.Date_Method_Code <> *BLANK;

    // PAR.Error Status = CND.yes
    PAR.Error_Status = 'Y';

    // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error 9
    PAR.Pricing_Valid_Error_Cde_U = 'PRCER9';

    ENDIF;

    //?VAL: Ceiling Price
    CASE;

    // IF PAR.OD Ceiling Price is Not Zeros
    IF PAR.OD_Ceiling_Price <> *ZERO;

    // PAR.Error Status = CND.yes
    PAR.Error_Status = 'Y';

    // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error A
    PAR.Pricing_Valid_Error_Cde_U = 'PRCERA';

    ENDIF;

    //?VAL: Market Date or Date Range
    CASE;

    // IF PAR.OD Market Begin Date is Entered
    IF PAR.OD_Market_Begin_Date <> *ZERO;

    // OR PAR.OD Market Ending Date is Entered
    OR PAR.OD_Market_Ending_Date <> *ZERO;

    // PAR.Error Status = CND.yes
    PAR.Error_Status = 'Y';

    // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error B
    PAR.Pricing_Valid_Error_Cde_U = 'PRCERB';

    ENDIF;

    ENDIF;

    //?VAL: Price Method Type = Manual/Extended
    CASE;

    // IF LCL.Price Method Type is Manual Pricing
    IF LCL.Price_Method_Type = 'M';

    // OR LCL.Price Method Type is Extended Pricing
    OR LCL.Price_Method_Type = 'X';

    //?VAL: Price Overage Override for Price Method Type=Extended
    CASE;

    // IF PAR.Price Overage Override is Equal zero
    IF PAR.Price_Overage_Override = *ZERO;

    // AND LCL.Price Method Type is Extended Pricing
    AND LCL.Price_Method_Type = 'X';

    // PAR.Error Status = CND.yes
    PAR.Error_Status = 'Y';

    // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error C
    PAR.Pricing_Valid_Error_Cde_U = 'PRCERC';

    ENDIF;

    //?VAL: Commodity Market Code
    CASE;

    // IF PAR.Commodity Market Code is Entered
    IF PAR.Commodity_Market_Code <> *BLANK;

    // PAR.Error Status = CND.yes
    PAR.Error_Status = 'Y';

    // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error D
    PAR.Pricing_Valid_Error_Cde_U = 'PRCERD';

    ENDIF;

    //?VAL: Date Method Code
    CASE;

    // IF PAR.Date Method Code is Entered
    IF PAR.Date_Method_Code <> *BLANK;

    // PAR.Error Status = CND.yes
    PAR.Error_Status = 'Y';

    // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error E
    PAR.Pricing_Valid_Error_Cde_U = 'PRCERE';

    ENDIF;

    //?VAL: Ceiling Price
    CASE;

    // IF PAR.OD Ceiling Price is Not Zeros
    IF PAR.OD_Ceiling_Price <> *ZERO;

    // Send information message - 'Ceiling Price invalid for Pricing Method. Changed Ceiling Price t
    MESSAGE(USR4333 *INFO);
    MSGPARM(PAR.OD_Ceiling_Price);

    // PAR.OD Ceiling Price = CON.*ZERO
    PAR.OD_Ceiling_Price = *ZERO;

    ENDIF;

    //?VAL: Market Date or Date Range
    CASE;

    // IF PAR.Market Pricing Date is NE Zero
    IF PAR.Market_Pricing_Date <> *ZERO;

    // OR PAR.OD Market Begin Date is Entered
    OR PAR.OD_Market_Begin_Date <> *ZERO;

    // OR PAR.OD Market Ending Date is Entered
    OR PAR.OD_Market_Ending_Date <> *ZERO;

    // PAR.Error Status = CND.yes
    PAR.Error_Status = 'Y';

    // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error F
    PAR.Pricing_Valid_Error_Cde_U = 'PRCERF';

    ENDIF;

    //?VAL: Manual Pricing
    CASE;

    // IF LCL.Price Method Type is Manual Pricing
    IF LCL.Price_Method_Type = 'M';

    //?VAL: Manual Price Range
    CASE;

    // IF PAR.Billing Activity Type is Not Warehouse Transfer
    IF PAR.Billing_Activity_Type = '2'/'3'/'1';

    CASE;

    // IF PAR.Primal Group Code is NE Samples or Cut Loss
    IF PAR.Primal_Group_Code <> 'UNID';

    //?RMC S14013 remove chk for type n= Promo/Samples- we want them validated
    EXECUTE FUNCTION(VAL Manual Price Range IF) TYPE(EXCINTFUN)                     AC1414607;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Commodity_Market_Code);
    PARAMETER(PAR.Price_Overage_Override);
    PARAMETER(LCL.Commodity_Price_Group);
    PARAMETER(LCL.Projected_Market_Price);
    PARAMETER(PAR.Default_Commod_Mark_basis);
    PARAMETER(LCL.Market_Overage);
    PARAMETER(LCL.Error_Status_3);
    PARAMETER(LCL.Minimum_Price_USR);
    PARAMETER(LCL.Maximum_Price_USR);
    PARAMETER(PAR.Absorbed_Freight_Rate_CWT);
    {
     //?Execute internal function

     //?*---------------------------------------------------------------*
     //?Documentation:
     //?This internal function will determine if a manual price entered
     //?on an order detail line is within the Manual Pricing Acceptance
     //?Percentage from the Company Control file. If it does not fall
     //?within the percentage range then the market price will be used.
     //?If no market price is found then it is a manual price error
     //?*---------------------------------------------------------------*
     // PAR.Projected Market Price = CON.*ZERO
     PAR.Projected_Market_Price = *ZERO;

     // PAR.Minimum Price   USR = CON.*ZERO
     PAR.Minimum_Price_USR = *ZERO;

     // PAR.Maximum Price  USR = CON.*ZERO
     PAR.Maximum_Price_USR = *ZERO;

     // PAR.Error Status  3 = CND.Yes
     PAR.Error_Status_3 = 'Y';

     EXECUTE FUNCTION(RTV Manual Price Accpt RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1414604;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Manual_Price_Accept_Prcnt);
     PARAMETER(PAR.CoPk_FdSrv_ManPrc_Acpt_PT);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     //?Food Service and Co-Pack Items
     CASE;

     // IF PAR.Default Commod Mark basis is Food Service
     IF PAR.Default_Commod_Mark_basis = 'FSV';

     // OR PAR.Default Commod Mark basis is Co-Pack
     OR PAR.Default_Commod_Mark_basis = 'CPK';

     // PAR.Manual Price Accept Prcnt = PAR.CoPk/FdSrv ManPrc Acpt%
     PAR.Manual_Price_Accept_Prcnt = PAR.CoPk_FdSrv_ManPrc_Acpt_PT;

     ENDIF;

     EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
     PARAMETER(PAR.Commodity_Market_Code);
     PARAMETER(PAR.Commodity_Price_Group);
     PARAMETER(9999999);
     PARAMETER(PAR.Projected_Market_Price);
     PARAMETER(WRK.USR_Date_Priced);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      // PAR.Commodity Market Price = DB1.Commodity Market Price
      PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

      // PAR.USR Date Priced = DB1.Market Price Date
      PAR.USR_Date_Priced = DB1.Market_Price_Date;

      QUIT;

     }

     // Projected Market Price
     PAR.Projected_Market_Price = ( PAR.Projected_Market_Price
     + PAR.Standard_Overage_Underage ) + ( PAR.Absorbed_Freight_Rate_CWT / 100 'H' );

     //?If a market price is found for co/cust market code default
     CASE;

     // IF PGM.*Return code is *Normal
     IF PGM.*Return_code = *BLANK;

     // Minimum price allowed
     PAR.Minimum_Price_USR = ( 1 - ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) )
     * PAR.Projected_Market_Price 'H';

     // Maximum price allowed
     PAR.Maximum_Price_USR = ( ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) + 1 )
     * PAR.Projected_Market_Price 'H';

     //?If the Price Override is within the range then error status is no
     CASE;

     // IF PAR.Price Overage Override GE PAR.Minimum Price   USR
     IF PAR.Price_Overage_Override >= PAR.Minimum_Price_USR;

     // AND PAR.Price Overage Override LE PAR.Maximum Price  USR
     AND PAR.Price_Overage_Override <= PAR.Maximum_Price_USR;

     // PAR.Error Status  3 = CND.No
     PAR.Error_Status_3 = 'N';

     ENDIF;

     //?If a market price is found for co/cust market code default
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?If no price for co/cust market code then use co/item market code
     EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
     PARAMETER(PAR.Default_Commod_Mark_basis);
     PARAMETER(PAR.Commodity_Price_Group);
     PARAMETER(9999999);
     PARAMETER(PAR.Projected_Market_Price);
     PARAMETER(WRK.USR_Date_Priced);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      // PAR.Commodity Market Price = DB1.Commodity Market Price
      PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

      // PAR.USR Date Priced = DB1.Market Price Date
      PAR.USR_Date_Priced = DB1.Market_Price_Date;

      QUIT;

     }

     CASE;

     // IF PGM.*Return code is *Normal
     IF PGM.*Return_code = *BLANK;

     // Minimum price allowed
     PAR.Minimum_Price_USR = ( PAR.Manual_Price_Accept_Prcnt / 100 'H' )
     * PAR.Projected_Market_Price 'H';

     // Maximum price allowed
     PAR.Maximum_Price_USR = ( ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) + 1 )
     * PAR.Projected_Market_Price 'H';

     //?If the Price Override is within the range then error status is no
     CASE;

     // IF PAR.Price Overage Override GE PAR.Minimum Price   USR
     IF PAR.Price_Overage_Override >= PAR.Minimum_Price_USR;

     // AND PAR.Price Overage Override LE PAR.Maximum Price  USR
     AND PAR.Price_Overage_Override <= PAR.Maximum_Price_USR;

     // PAR.Error Status  3 = CND.No
     PAR.Error_Status_3 = 'N';

     ENDIF;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Projected Market Price = CON.*ZERO
     PAR.Projected_Market_Price = *ZERO;

     ENDIF;

     ENDIF;

    }

    // PAR.Unit Price - Credit = LCL.Projected Market Price
    PAR.Unit_Price_Credit = LCL.Projected_Market_Price;

    ENDIF;

    CASE;

    // IF LCL.Error Status  3 is Yes
    IF LCL.Error_Status_3 = 'Y';

    CASE;

    // IF LCL.Projected Market Price is Not Zeros
    IF LCL.Projected_Market_Price <> *ZERO;

    // Send information message - 'Price Override not within valid range, Market Price will be defau
    MESSAGE(USR2351 *INFO);
    MSGPARM(PAR.Price_Overage_Override);

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Error Status = CND.yes
    PAR.Error_Status = 'Y';

    // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error G
    PAR.Pricing_Valid_Error_Cde_U = 'PRCERG';

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

    //?VAL: Price Method Type = Contract
    CASE;

    // IF LCL.Price Method Type is Contract Pricing
    IF LCL.Price_Method_Type = 'Q';

    //?VAL: Commodity Market Code
    CASE;

    // IF PAR.Commodity Market Code is Entered
    IF PAR.Commodity_Market_Code <> *BLANK;

    // AND LCL.PMH Price Type is Invoice Price
    AND LCL.PMH_Price_Type = 'I';

    // PAR.Error Status = CND.yes
    PAR.Error_Status = 'Y';

    // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error H
    PAR.Pricing_Valid_Error_Cde_U = 'PRCERH';

    ENDIF;

    //?VAL: Date Method Code
    CASE;

    // IF PAR.Date Method Code is Entered
    IF PAR.Date_Method_Code <> *BLANK;

    // AND LCL.PMH Price Type is Invoice Price
    AND LCL.PMH_Price_Type = 'I';

    // PAR.Error Status = CND.yes
    PAR.Error_Status = 'Y';

    // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error I
    PAR.Pricing_Valid_Error_Cde_U = 'PRCERI';

    ENDIF;

    //?VAL: Ceiling Price
    CASE;

    // IF LCL.PMH Price Type is Invoice Price
    IF LCL.PMH_Price_Type = 'I';

    //?ERR: Ceiling Price not allowed
    CASE;

    // IF PAR.OD Ceiling Price is Not Zeros
    IF PAR.OD_Ceiling_Price <> *ZERO;

    // Send information message - 'Ceiling Price invalid for Pricing Method. Changed Ceiling Price t
    MESSAGE(USR4333 *INFO);
    MSGPARM(PAR.OD_Ceiling_Price);

    // PAR.OD Ceiling Price = CON.*ZERO
    PAR.OD_Ceiling_Price = *ZERO;

    ENDIF;

    //?VAL: Ceiling Price
    // IF *OTHERWISE
    IF *OTHERWISE;

    //?ERR: Ceiling Price Required
    CASE;

    // IF PAR.OD Ceiling Price is Equal zero
    IF PAR.OD_Ceiling_Price = *ZERO;

    // PAR.Error Status = CND.yes
    PAR.Error_Status = 'Y';

    // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error J
    PAR.Pricing_Valid_Error_Cde_U = 'PRCERJ';

    ENDIF;

    // PAR.Unit Price - Credit = PAR.OD Ceiling Price
    PAR.Unit_Price_Credit = PAR.OD_Ceiling_Price;

    ENDIF;

    //?VAL: Market Date or Date Range
    CASE;

    // IF PAR.Market Pricing Date is NE Zero
    IF PAR.Market_Pricing_Date <> *ZERO;

    // OR PAR.OD Market Begin Date is Entered
    OR PAR.OD_Market_Begin_Date <> *ZERO;

    // OR PAR.OD Market Ending Date is Entered
    OR PAR.OD_Market_Ending_Date <> *ZERO;

    // PAR.Error Status = CND.yes
    PAR.Error_Status = 'Y';

    // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error K
    PAR.Pricing_Valid_Error_Cde_U = 'PRCERK';

    ENDIF;

    ENDIF;

    //?VAL: Price Method Type = Market/Formula
    CASE;

    // IF LCL.Price Method Type is Market or Formula
    IF LCL.Price_Method_Type = 'F'/'K';

    //?VAL: Price Overage Override
    CASE;

    // IF PAR.Price Overage Override is Not Zeros
    IF PAR.Price_Overage_Override <> *ZERO;

    // PAR.Error Status = CND.yes
    PAR.Error_Status = 'Y';

    // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error L
    PAR.Pricing_Valid_Error_Cde_U = 'PRCERL';

    ENDIF;

    //?VAL: Commodity Market Code
    CASE;

    // IF PAR.Commodity Market Code is Not Entered
    IF PAR.Commodity_Market_Code = *BLANK;

    // PAR.Error Status = CND.yes
    PAR.Error_Status = 'Y';

    // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error M
    PAR.Pricing_Valid_Error_Cde_U = 'PRCERM';

    ENDIF;

    //?VAL: Date Method Code
    CASE;

    // IF PAR.Date Method Code is Entered
    IF PAR.Date_Method_Code <> *BLANK;

    EXECUTE FUNCTION(VAL Date Method Exists RT) TYPE(RTVOBJ) FILE(PDIPREP)          AC1365305;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Date_Method_Code);
    PARAMETER(NLL.Date_Method_Description);
    PARAMETER('O');
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?ERR: Date Method Code Invalid
    CASE;

    // IF PGM.*Return code is *Record does not exist
    IF PGM.*Return_code = 'Y2U0005';

    // PAR.Error Status = CND.yes
    PAR.Error_Status = 'Y';

    // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error N
    PAR.Pricing_Valid_Error_Cde_U = 'PRCERN';

    ENDIF;

    ENDIF;

    //?ERR: Date Method Entered & Market Price Date/Range Entered
    CASE;

    // IF PAR.Date Method Code is Entered
    IF ( PAR.Date_Method_Code <> *BLANK;

    // AND PAR.Market Pricing Date is NE Zero
    AND PAR.Market_Pricing_Date <> *ZERO );

    // OR PAR.Date Method Code is Entered
    OR ( PAR.Date_Method_Code <> *BLANK;

    // AND PAR.OD Market Begin Date is Entered
    AND PAR.OD_Market_Begin_Date <> *ZERO;

    // AND PAR.OD Market Ending Date is Entered
    AND PAR.OD_Market_Ending_Date <> *ZERO );

    // PAR.Error Status = CND.yes
    PAR.Error_Status = 'Y';

    // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error O
    PAR.Pricing_Valid_Error_Cde_U = 'PRCERO';

    ENDIF;

    //?ERR: Date Method = Blank and Market Price Date/Rage = Zero
    CASE;

    // IF PAR.Date Method Code is Not Entered
    IF PAR.Date_Method_Code = *BLANK;

    // AND PAR.Market Pricing Date is EQ Zero
    AND PAR.Market_Pricing_Date = *ZERO;

    // AND PAR.OD Market Begin Date is not entered
    AND PAR.OD_Market_Begin_Date = *ZERO;

    // AND PAR.OD Market Ending Date is not entered
    AND PAR.OD_Market_Ending_Date = *ZERO;

    // PAR.Error Status = CND.yes
    PAR.Error_Status = 'Y';

    // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error P
    PAR.Pricing_Valid_Error_Cde_U = 'PRCERP';

    ENDIF;

    //?ERR: Market Price Date & Market Price Date Range Entered
    CASE;

    // IF PAR.Market Pricing Date is NE Zero
    IF PAR.Market_Pricing_Date <> *ZERO;

    // AND PAR.OD Market Begin Date is Entered
    AND ( PAR.OD_Market_Begin_Date <> *ZERO;

    // OR PAR.OD Market Ending Date is Entered
    OR PAR.OD_Market_Ending_Date <> *ZERO );

    // PAR.Error Status = CND.yes
    PAR.Error_Status = 'Y';

    // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error Q
    PAR.Pricing_Valid_Error_Cde_U = 'PRCERQ';

    ENDIF;

    //?ERR: Market Price Begin Date > Market Price Ending Date
    CASE;

    // IF PAR.OD Market Begin Date GT PAR.OD Market Ending Date
    IF PAR.OD_Market_Begin_Date > PAR.OD_Market_Ending_Date;

    // PAR.Error Status = CND.yes
    PAR.Error_Status = 'Y';

    // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error R
    PAR.Pricing_Valid_Error_Cde_U = 'PRCERR';

    ENDIF;

    EXECUTE FUNCTION(VAL Market Cd & Group  RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1414484;
    PARAMETER(PAR.Commodity_Market_Code);
    PARAMETER(LCL.Commodity_Price_Group);
    {
     //?USER: Processing if Data record not found

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     // PGM.*Return code = CND.*Normal
     PGM.*Return_code = *BLANK;

     QUIT;

    }

    //?VAL: Commodity Market Price Exists
    CASE;

    // IF PGM.*Return code is *Record does not exist
    IF PGM.*Return_code = 'Y2U0005';

    CASE;

    // IF PAR.Commodity Market Code NE PAR.Default Commod Mark basis
    IF PAR.Commodity_Market_Code <> PAR.Default_Commod_Mark_basis;

    EXECUTE FUNCTION(VAL Market Cd & Group  RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1414484;
    PARAMETER(PAR.Default_Commod_Mark_basis);
    PARAMETER(LCL.Commodity_Price_Group);
    {
     //?USER: Processing if Data record not found

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     // PGM.*Return code = CND.*Normal
     PGM.*Return_code = *BLANK;

     QUIT;

    }

    //?Use Company Item
    CASE;

    // IF PGM.*Return code is *Record does not exist
    IF PGM.*Return_code = 'Y2U0005';

    // PAR.Error Status = CND.yes
    PAR.Error_Status = 'Y';

    // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error S
    PAR.Pricing_Valid_Error_Cde_U = 'PRCERS';

    //?Use Company Item
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Send information message - 'No price found for market &1 and group &2, so market &3 will be u
    MESSAGE(USR2350 *INFO);
    MSGPARM(PAR.Commodity_Market_Code);
    MSGPARM(LCL.Commodity_Price_Group);
    MSGPARM(PAR.Default_Commod_Mark_basis);

    ENDIF;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Error Status = CND.yes
    PAR.Error_Status = 'Y';

    // PAR.Pricing Valid Error Cde U = CND.Pricing Valid Error S
    PAR.Pricing_Valid_Error_Cde_U = 'PRCERS';

    ENDIF;

    ENDIF;

    ENDIF;

   }

   //?** Error processing
   CASE;

   // IF LCL.Pricing Valid Error Cde U is NE *Blank
   IF LCL.Pricing_Valid_Error_Cde_U <> *BLANK;

   CASE;

   // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error 1
   IF LCL.Pricing_Valid_Error_Cde_U = 'PRCER1';

   // LCL.BOE Error Comment = CONCAT(CON.Price Code must be zero f,CON.or Price Method Code.,CON.*ZE
   LCL.BOE_Error_Comment = 'Price Code must be zero f' + 'or Price Method Code.' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('PRCER1');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error 2
   IF LCL.Pricing_Valid_Error_Cde_U = 'PRCER2';

   // LCL.BOE Error Comment = CONCAT(CON.Price Code not found for,CON.Cust or Invalid Dt Range,CON.*
   LCL.BOE_Error_Comment = 'Price Code not found for' + 'Cust or Invalid Dt Range' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('PRCER2');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error 3
   IF LCL.Pricing_Valid_Error_Cde_U = 'PRCER3';

   // LCL.BOE Error Comment = CONCAT(CON.Price Code not Valid for,CON.Start/End Dates.,CON.*ZERO)
   LCL.BOE_Error_Comment = 'Price Code not Valid for' + 'Start/End Dates.' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('PRCER3');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error 4
   IF LCL.Pricing_Valid_Error_Cde_U = 'PRCER4';

   // LCL.BOE Error Comment = CONCAT(CON.Price Code not Found for,CON.Item Code.,CON.*ZERO)
   LCL.BOE_Error_Comment = 'Price Code not Found for' + 'Item Code.' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('PRCER4');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error 5
   IF LCL.Pricing_Valid_Error_Cde_U = 'PRCER5';

   // LCL.BOE Error Comment = CONCAT(CON.Price Code Required for P,CON.ricing Method.,CON.*ZERO)
   LCL.BOE_Error_Comment = 'Price Code Required for P' + 'ricing Method.' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('PRCER5');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error 6
   IF LCL.Pricing_Valid_Error_Cde_U = 'PRCER6';

   // LCL.BOE Error Comment = CONCAT(CON.Mkt Pricing Dt & Mkt Prc,CON.Dt Rng can't both exist.,CON.*
   LCL.BOE_Error_Comment = 'Mkt Pricing Dt & Mkt Prc' + 'Dt Rng can't both exist.' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('PRCER6');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error 7
   IF LCL.Pricing_Valid_Error_Cde_U = 'PRCER7';

   // LCL.BOE Error Comment = CONCAT(CON.Market Price Date Range I,CON.nvalid.,CON.*ZERO)
   LCL.BOE_Error_Comment = 'Market Price Date Range I' + 'nvalid.' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('PRCER7');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error 8
   IF LCL.Pricing_Valid_Error_Cde_U = 'PRCER8';

   // LCL.BOE Error Comment = CONCAT(CON.Price Override not Allowe,CON.d with Price Method.,CON.*ZER
   LCL.BOE_Error_Comment = 'Price Override not Allowe' + 'd with Price Method.' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('PRCER8');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error 9
   IF LCL.Pricing_Valid_Error_Cde_U = 'PRCER9';

   // LCL.BOE Error Comment = CONCAT(CON.Date Method Code not Allo,CON.wed for Price Method.,CON.*ZE
   LCL.BOE_Error_Comment = 'Date Method Code not Allo' + 'wed for Price Method.' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('PRCER9');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error B
   IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERB';

   // LCL.BOE Error Comment = CONCAT(CON.Market Pricing Date Range,CON. must be 0 for Prc Method,CON
   LCL.BOE_Error_Comment = 'Market Pricing Date Range' + ' must be 0 for Prc Method' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('PRCERB');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error C
   IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERC';

   // LCL.BOE Error Comment = CONCAT(CON.Price Override Required f,CON.or Price Method.,CON.*ZERO)
   LCL.BOE_Error_Comment = 'Price Override Required f' + 'or Price Method.' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('PRCERC');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error D
   IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERD';

   // LCL.BOE Error Comment = CONCAT(CON.Market Code not allowed f,CON.or Price Method.,CON.*ZERO)
   LCL.BOE_Error_Comment = 'Market Code not allowed f' + 'or Price Method.' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('PRCERD');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error E
   IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERE';

   // LCL.BOE Error Comment = CONCAT(CON.Date Method Code not allo,CON.wed for Price Method.,CON.*ZE
   LCL.BOE_Error_Comment = 'Date Method Code not allo' + 'wed for Price Method.' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('PRCERE');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error F
   IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERF';

   // LCL.BOE Error Comment = CONCAT(CON.Mkt Prc Dt or Dt Range mu,CON.st be 0 for Price Method.,CON
   LCL.BOE_Error_Comment = 'Mkt Prc Dt or Dt Range mu' + 'st be 0 for Price Method.' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('PRCERF');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error G
   IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERG';

   // LCL.BOE Error Comment = CONCAT(CON.No Price Found for Commod,CON.ity Market Code/Group.,CON.*Z
   LCL.BOE_Error_Comment = 'No Price Found for Commod' + 'ity Market Code/Group.' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('PRCERG');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error H
   IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERH';

   // LCL.BOE Error Comment = CONCAT(CON.Market Code not Allowed f,CON.or Price Method.,CON.*ZERO)
   LCL.BOE_Error_Comment = 'Market Code not Allowed f' + 'or Price Method.' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('PRCERH');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error I
   IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERI';

   // LCL.BOE Error Comment = CONCAT(CON.Date Method Code not allo,CON.wed for Price Method.,CON.*ZE
   LCL.BOE_Error_Comment = 'Date Method Code not allo' + 'wed for Price Method.' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('PRCERI');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error J
   IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERJ';

   // LCL.BOE Error Comment = CONCAT(CON.Ceiling Price is Required,CON. for Pricing Method.,CON.*ZER
   LCL.BOE_Error_Comment = 'Ceiling Price is Required' + ' for Pricing Method.' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('PRCERJ');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error K
   IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERK';

   // LCL.BOE Error Comment = CONCAT(CON.Market Prc Dt or Dt Range,CON. must be 0 for Prc Methd,CON.
   LCL.BOE_Error_Comment = 'Market Prc Dt or Dt Range' + ' must be 0 for Prc Methd' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('PRCERK');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error L
   IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERL';

   // LCL.BOE Error Comment = CONCAT(CON.Price Overage Override no,CON.t allowed for Price Mthd,CON.
   LCL.BOE_Error_Comment = 'Price Overage Override no' + 't allowed for Price Mthd' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('PRCERL');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error M
   IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERM';

   // LCL.BOE Error Comment = CONCAT(CON.Market Code must be enter,CON.ed for Price Method.,CON.*ZER
   LCL.BOE_Error_Comment = 'Market Code must be enter' + 'ed for Price Method.' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('PRCERM');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error N
   IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERN';

   // LCL.BOE Error Comment = CONCAT(CON.Date Method is Invalid.,CON.*BLANK,CON.*ZERO)
   LCL.BOE_Error_Comment = 'Date Method is Invalid.' + *BLANK (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('PRCERN');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error O
   IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERO';

   // LCL.BOE Error Comment = CONCAT(CON.Dt Mthd & Mkt Prc Dt or D,CON.t Range not Allowed.,CON.*ZER
   LCL.BOE_Error_Comment = 'Dt Mthd & Mkt Prc Dt or D' + 't Range not Allowed.' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('PRCERO');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error P
   IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERP';

   // LCL.BOE Error Comment = CONCAT(CON.Date Method is Invalid,CON.*BLANK,CON.*ZERO)
   LCL.BOE_Error_Comment = 'Date Method is Invalid' + *BLANK (*ZERO);

   //?**  Did not create PRCERP as is is a duplicate. Used PRCERN
   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('PRCERN');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error Q
   IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERQ';

   // LCL.BOE Error Comment = CONCAT(CON.Market Pricing Date/Range,CON. can be entered not both.,CON
   LCL.BOE_Error_Comment = 'Market Pricing Date/Range' + ' can be entered not both.' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('PRCERQ');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error R
   IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERR';

   // LCL.BOE Error Comment = CONCAT(CON.Market Price Date Range I,CON.nvalid.,CON.*ZERO)
   LCL.BOE_Error_Comment = 'Market Price Date Range I' + 'nvalid.' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('PRCERR');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error S
   IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERS';

   // LCL.BOE Error Comment = CONCAT(CON.No Price can be found for,CON. Market Code/Group,CON.*ZERO)
   LCL.BOE_Error_Comment = 'No Price can be found for' + ' Market Code/Group' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('PRCERS');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   // IF LCL.Pricing Valid Error Cde U is Pricing Valid Error T
   IF LCL.Pricing_Valid_Error_Cde_U = 'PRCERT';

   // LCL.BOE Error Comment = CONCAT(CON.Max Cntrct Units for Item,CON./Prc cd wgt alloc exceed,CON.
   LCL.BOE_Error_Comment = 'Max Cntrct Units for Item' + '/Prc cd wgt alloc exceed' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('PRCERT');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   ENDIF;

   ENDIF;

   // LCL.Weight Ordered = DB1.Quantity Ordered * LCL.Unit Weight Ordered U_M *
   LCL.Weight_Ordered = DB1.Quantity_Ordered * LCL.Unit_Weight_Ordered_U_M;

   // Call program Exc Calc Ord ExemptCd XF.
   CALL PROGRAM(Exc Calc Ord ExemptCd XF) ('PPSLXFR');
   PARAMETER(PAR.Company_Number);
   PARAMETER(9999999);
   PARAMETER(PAR.Ship_To_Customer);
   PARAMETER(LCL.OH_TF_Exempt_Code);
   PARAMETER(LCL.Error_Flag_USR);
   PARAMETER('Y');

   //?** Error checking...
   CASE;

   // IF LCL.Error Flag            USR is Yes
   IF LCL.Error_Flag_USR = 'Y';

   // LCL.BOE Error Comment = CONCAT(CON.Can't mix Exempt & Non Ex,CON.empt items for Customer.,CON.
   LCL.BOE_Error_Comment = 'Can't mix Exempt & Non Ex' + 'empt items for Customer.' (*ZERO);

   // Call program EXC Crt Blk Order ErrorEX.
   CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
   PARAMETER(DB1.Surrogate_Number);
   PARAMETER(*MISSING);
   PARAMETER('TFEXMX');
   PARAMETER(LCL.BOE_Error_Comment);

   // PAR.Hdr/Dtl Validation Pass U = CND.No
   PAR.Hdr_Dtl_Validation_Pass_U = 'N';

   ENDIF;

   //?** If TF Exempt Code is not *Blank...
   CASE;

   // IF LCL.OH TF Exempt Code NE LCL.Blank 1 USR
   IF LCL.OH_TF_Exempt_Code <> LCL.Blank_1_USR;

   // Call program Upd Block Order Qtemp XF.
   CALL PROGRAM(Upd Block Order Qtemp XF) ('PUZ8XFR');
   PARAMETER(PAR.Company_Number);
   PARAMETER(9999999);
   PARAMETER(LCL.OH_TF_Exempt_Code);

   ENDIF;

   //?** Test to see if we need to update Detail record again.
   CASE;

   // IF LCL.Date Method Code is Entered
   IF LCL.Date_Method_Code <> *BLANK;

   // OR LCL.Weight Ordered is Not equal zero
   OR LCL.Weight_Ordered <> *ZERO;

   // OR LCL.Unit Price_Credit is Not Zeros
   OR LCL.Unit_Price_Credit <> *ZERO;

   // OR LCL.Market Pricing Date is NE Zero
   OR LCL.Market_Pricing_Date <> *ZERO;

   // OR LCL.Commodity Market Code is Entered
   OR LCL.Commodity_Market_Code <> *BLANK;

   // OR LCL.Price Method Code is Not Blank
   OR LCL.Price_Method_Code <> *BLANK;

   // OR LCL.Price Overage Override is Not Zeros
   OR LCL.Price_Overage_Override <> *ZERO;

   // OR LCL.OD Ceiling Price is Not Zeros
   OR LCL.OD_Ceiling_Price <> *ZERO;

   // OR LCL.OD Market Begin Date is Entered
   OR LCL.OD_Market_Begin_Date <> *ZERO;

   // OR LCL.OD Market Ending Date is Entered
   OR LCL.OD_Market_Ending_Date <> *ZERO;

   // Call program Upd Block Order Qtemp XF.
   CALL PROGRAM(Upd Block Order Qtemp XF) ('PUZ9XFR');
   PARAMETER(PAR.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Sequence_Number);
   PARAMETER(1);
   PARAMETER(LCL.Market_Pricing_Date);
   PARAMETER(LCL.Commodity_Market_Code);
   PARAMETER(LCL.Date_Method_Code);
   PARAMETER(DB1.Price_Method_Code);
   PARAMETER(DB1.Price_Overage_Override);
   PARAMETER(LCL.Weight_Ordered);
   PARAMETER(LCL.Unit_Price_Credit);
   PARAMETER(LCL.OD_Ceiling_Price);
   PARAMETER(LCL.OD_Market_Begin_Date);
   PARAMETER(LCL.OD_Market_Ending_Date);

   ENDIF;

   ENDIF;

   ENDIF;

   //?USER: Exit processing

   //?** WI546_2 Update Order Total weight in OMS Header
   CASE;

   // IF LCL.USR Update Flag is Yes
   IF LCL.USR_Update_Flag = 'Y';

   // Call program UPD Order Weight.
   CALL PROGRAM(UPD Order Weight) ('PVFEXFR');
   PARAMETER(PAR.Company_Number);
   PARAMETER(LCL.Order_Number);

   ENDIF;

  }

  //?**  If no errors, Validate details.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Hdr/Dtl Validation Pass U = LCL.Hdr/Dtl Validation Pass U
  PAR.Hdr_Dtl_Validation_Pass_U = LCL.Hdr_Dtl_Validation_Pass_U;

  ENDIF;

 }

 EXECUTE FUNCTION(Chg Block Order Upl HdrCH) TYPE(CHGOBJ) FILE(PUC2CPP)          AC2212473;
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.OHE_Spot_Buy);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Country_Code);
 PARAMETER(DB1.OHE_Intended_for_ExportCC);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER('Y');
 PARAMETER(DB1.Email_Sent);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 // PAR.Hdr/Dtl Validation Pass U = LCL.Hdr/Dtl Validation Pass U
 PAR.Hdr_Dtl_Validation_Pass_U = LCL.Hdr_Dtl_Validation_Pass_U;

 ENDIF;

 //?*** If all error testing is passed, update the record(s).
 CASE;

 // IF LCL.Hdr/Dtl Validation Pass U is Yes
 IF LCL.Hdr_Dtl_Validation_Pass_U = 'Y';

 // AND LCL.Change Flag USR is Yes
 AND LCL.Change_Flag_USR = 'Y';

 EXECUTE FUNCTION(RTV If Item Not Cancelled) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2225578;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.USR_Return_Code);
 {
  //?USER: Initialize routine

  // PAR.USR Return Code = CND.Does Not Exist
  PAR.USR_Return_Code = 'N';

  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Cancel Status Types
  IF DB1.Detail_Line_Status = 'L'/'A'/'E'/'H';

  // PAR.USR Return Code = CND.Exists
  PAR.USR_Return_Code = 'E';

  QUIT;

  ENDIF;

 }

 CASE;

 // IF LCL.USR Return Code is Does Not Exist
 IF LCL.USR_Return_Code = 'N';

 EXECUTE FUNCTION(Chg Order Header WRK  CH1) TYPE(CHGOBJ) FILE(OPBFCPP)          AC2225585;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Order_Type_Sales);
 PARAMETER(LCL.AR_Customer_Number);
 PARAMETER(LCL.Ship_To_Customer);
 PARAMETER(LCL.Ship_To_Name);
 PARAMETER(LCL.Ship_To_Address_Line_1);
 PARAMETER(LCL.Ship_To_Address_Line_2);
 PARAMETER(LCL.Ship_To_Address_Line_3);
 PARAMETER(LCL.Ship_To_City);
 PARAMETER(LCL.Ship_To_State_Code);
 PARAMETER(LCL.Ship_To_Zip_Postal_Code);
 PARAMETER(LCL.Bill_to_Customer);
 PARAMETER(LCL.Bill_to_Name);
 PARAMETER(LCL.Bill_to_Address_Line_1);
 PARAMETER(LCL.Bill_to_Address_Line_2);
 PARAMETER(LCL.Bill_to_Address_Line_3);
 PARAMETER(LCL.Bill_to_City);
 PARAMETER(LCL.Bill_to_State_Code);
 PARAMETER(LCL.Bill_to_Zip_Postal_Code);
 PARAMETER(LCL.Customer_Purchase_Order_#);
 PARAMETER(LCL.Order_Date);
 PARAMETER(LCL.Requested_Ship_Date);
 PARAMETER(LCL.Actual_Shipped_Date);
 PARAMETER(LCL.Terms_Code);
 PARAMETER(LCL.Special_Instructions);
 PARAMETER(LCL.Special_Instructions_2);
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(LCL.Comment_Print_Acknowledge);
 PARAMETER(LCL.Comment_Print_Inv_Cr_Memo);
 PARAMETER(LCL.Comment_Print_Pick_Slip);
 PARAMETER(LCL.Comment_Print_Ship_Doc);
 PARAMETER(LCL.Reason_Code);
 PARAMETER(LCL.Order_in_Use);
 PARAMETER(LCL.Order_Type_Print_Status);
 PARAMETER(LCL.Scheduled_Ship_Date);
 PARAMETER('INFORMATIC');
 PARAMETER(LCL.Date_of_Original_Entry);
 PARAMETER(LCL.Order_Value_Total);
 PARAMETER(LCL.Credit_Hold);
 PARAMETER(LCL.Production_Hold);
 PARAMETER(LCL.New_Customer_Hold);
 PARAMETER(LCL.Requested_Delivery_Date);
 PARAMETER(LCL.Requested_Delivery_Time);
 PARAMETER(LCL.Accounts_Receiv_Ent_1);
 PARAMETER(LCL.Accounts_Receiv_Ent_2);
 PARAMETER(LCL.Load_ID);
 PARAMETER(LCL.Absorbed_Freight_Rate_CWT);
 PARAMETER(LCL.Rated_Freight);
 PARAMETER(LCL.LTL_Flag);
 PARAMETER(LCL.Price_Audit);
 PARAMETER(LCL.Price_Status);
 PARAMETER(LCL.Shipping_Method);
 PARAMETER(LCL.Export_Status);
 PARAMETER(LCL.Palletize);
 PARAMETER(LCL.Shrink_Wrap);
 PARAMETER(LCL.Slip_Sheet);
 PARAMETER(LCL.Age_Code);
 PARAMETER(LCL.Reefer_Temperature);
 PARAMETER(LCL.Load_Type);
 PARAMETER(LCL.Attach_to_Invoice_Number);
 PARAMETER(LCL.Load_Plan_Order);
 PARAMETER(LCL.Print_Pick_Slip);
 PARAMETER(LCL.Resell_Reference_Number);
 PARAMETER(LCL.Special_Comment_1);
 PARAMETER(LCL.Special_Comment_2);
 PARAMETER(LCL.Affect_Auto_Accruals);
 PARAMETER(LCL.Sales_Route_Code);
 PARAMETER(LCL.Manager_Level_Code);
 PARAMETER(LCL.VP_Level_Code);
 PARAMETER(LCL.Attach_to_Order_Number);
 PARAMETER(LCL.Reason_for_Price_Audit);
 PARAMETER(LCL.Invoice_Number);
 PARAMETER(LCL.Invoice_Suffix);
 PARAMETER(LCL.Invoice_Date);
 PARAMETER(LCL.Event_Code);
 PARAMETER(LCL.Trans_Contol_AS400_Plant);
 PARAMETER(LCL.Modified_Flag);
 PARAMETER(LCL.A_R_order_Value_Total);
 PARAMETER(LCL.Billing_Activity_Type);
 PARAMETER(LCL.Block_Order_Flag);
 PARAMETER(LCL.Order_Certification_Flag);
 PARAMETER(LCL.Invoice_Order_Value_Tot);
 PARAMETER(LCL.Process_Sts_for_3C);
 PARAMETER(LCL.Order_Conf_Fax_Sts);
 PARAMETER(LCL.Manifest_Fax_Sts);
 PARAMETER(LCL.Invoice_Fax_Sts);
 PARAMETER(LCL.Transfer_in_Storage_Ind);
 PARAMETER(LCL.Email_Cust_On_Order_Ship);
 PARAMETER(LCL.Order_Emailed);
 PARAMETER(LCL.Export_Docs_Go_w_Driver);
 PARAMETER(LCL.Shipping_Temp_Code_C_F);
 PARAMETER(LCL.Broker_Order_Status);
 PARAMETER(LCL.Air_Freight_Order);
 PARAMETER(LCL.Order_Requires_Review);
 PARAMETER(LCL.OH_Load_Plan_Ready);
 PARAMETER(LCL.Export_USDA_Approved);
 PARAMETER(LCL.HPB_Ship_to_Warehouse);
 PARAMETER(LCL.OH_TF_Exempt_Code);
 PARAMETER(LCL.OH_Appt_Confirmation_Dt);
 PARAMETER(LCL.JPN_Invoice_Issuance_Date);
 PARAMETER(LCL.Load_Actual_Shipped_Date);
 PARAMETER(LCL.Load_BOL_Complete_Date);
 PARAMETER(LCL.Load_Truck_Departure_Date);
 PARAMETER(LCL.Maximum_Gross_Weight);
 PARAMETER(LCL.Time_of_Original_Entry);
 PARAMETER(LCL.OH_Appt_Confirmation_Tm);
 PARAMETER(LCL.Load_BOL_Complete_Time);
 PARAMETER(LCL.Load_Truck_Departure_Time);
 PARAMETER(LCL.Act_Frt_Reference_Amount);
 PARAMETER(LCL.Act_Non_Ref_Frt_Amount);
 PARAMETER(LCL.OH_Fuel_Surcharge_Amount);
 PARAMETER(LCL.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(LCL.OH_Total_Ref_Frt_Amt);
 PARAMETER(LCL.Claim_Number);
 PARAMETER(LCL.EDI_Status_1);
 PARAMETER(LCL.EDI_Status_2);
 PARAMETER(LCL.EDI_Status_3);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Processing after Data read

  //?01/22/09 RMC  move here from "before Data update" spot
  //?06/23/00 PKD Added the update of the Export Status on the Load
  //?             if the Export Status on the Order is changed to Y,
  //?Change the Export Status.
  CASE;

  // IF PAR.Export Status NE DB1.Export Status
  IF PAR.Export_Status <> DB1.Export_Status;

  // AND PAR.Export Status is yes
  AND PAR.Export_Status = 'Y';

  CASE;

  // IF DB1.Load ID is NE Blank
  IF DB1.Load_ID <> *ZERO;

  // AND DB1.Load Plan Order is yes
  AND DB1.Load_Plan_Order = 'Y';

  EXECUTE FUNCTION(Chg Export Status     CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC1540180;
  PARAMETER(DB1.Load_ID);
  PARAMETER(PAR.Export_Status);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

  ENDIF;

  // LCL.Status Flag 1  Y/N = CND.No
  LCL.Status_Flag_1_Y_N = 'N';

  //?Email Requested Delv Change msg is changed and Appt exists.
  CASE;

  // IF PAR.Requested Delivery Date NE DB1.Requested Delivery Date
  IF ( PAR.Requested_Delivery_Date <> DB1.Requested_Delivery_Date;

  // OR PAR.Requested Delivery Time NE DB1.Requested Delivery Time
  OR PAR.Requested_Delivery_Time <> DB1.Requested_Delivery_Time );

  // AND DB1.OH Appt Confirmation Dt is Entered
  AND DB1.OH_Appt_Confirmation_Dt > *ZERO;

  // LCL.Status Flag 1  Y/N = CND.Yes
  LCL.Status_Flag_1_Y_N = 'Y';

  ENDIF;

  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // DB1.User Id = CON.INFORMATIC
  DB1.User_Id = 'INFORMATIC';

  // Call program TRG Order Hdr CHG Trig XT.
  CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Ship_To_Name);
  PARAMETER(DB1.Ship_To_Address_Line_1);
  PARAMETER(DB1.Ship_To_Address_Line_2);
  PARAMETER(DB1.Ship_To_Address_Line_3);
  PARAMETER(DB1.Ship_To_City);
  PARAMETER(DB1.Ship_To_State_Code);
  PARAMETER(DB1.Ship_To_Zip_Postal_Code);
  PARAMETER(DB1.Bill_to_Customer);
  PARAMETER(DB1.Bill_to_Name);
  PARAMETER(DB1.Bill_to_Address_Line_1);
  PARAMETER(DB1.Bill_to_Address_Line_2);
  PARAMETER(DB1.Bill_to_Address_Line_3);
  PARAMETER(DB1.Bill_to_City);
  PARAMETER(DB1.Bill_to_State_Code);
  PARAMETER(DB1.Bill_to_Zip_Postal_Code);
  PARAMETER(DB1.Customer_Purchase_Order_#);
  PARAMETER(DB1.Order_Date);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Cancel_Date);
  PARAMETER(DB1.Terms_Code);
  PARAMETER(DB1.Special_Instructions);
  PARAMETER(DB1.Special_Instructions_2);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Comment_Print_Acknowledge);
  PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
  PARAMETER(DB1.Comment_Print_Pick_Slip);
  PARAMETER(DB1.Comment_Print_Ship_Doc);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Order_in_Use);
  PARAMETER(DB1.Header_Status);
  PARAMETER(DB1.Header_Status_Last);
  PARAMETER(DB1.Order_Type_Print_Status);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.User_Original_Entry);
  PARAMETER(DB1.Date_of_Original_Entry);
  PARAMETER(DB1.Order_Value_Total);
  PARAMETER(DB1.Order_Weight_Total);
  PARAMETER(DB1.Credit_Hold);
  PARAMETER(DB1.Production_Hold);
  PARAMETER(DB1.New_Customer_Hold);
  PARAMETER(DB1.Requested_Delivery_Date);
  PARAMETER(DB1.Requested_Delivery_Time);
  PARAMETER(DB1.Accounts_Receiv_Ent_1);
  PARAMETER(DB1.Accounts_Receiv_Ent_2);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.LTL_Flag);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Shipping_Method);
  PARAMETER(DB1.Export_Status);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Shrink_Wrap);
  PARAMETER(DB1.Slip_Sheet);
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Reefer_Temperature);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Attach_to_Invoice_Number);
  PARAMETER(DB1.Load_Plan_Order);
  PARAMETER(DB1.Print_Pick_Slip);
  PARAMETER(DB1.Resell_Reference_Number);
  PARAMETER(DB1.Special_Comment_1);
  PARAMETER(DB1.Special_Comment_2);
  PARAMETER(DB1.Affect_Auto_Accruals);
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(DB1.Manager_Level_Code);
  PARAMETER(DB1.VP_Level_Code);
  PARAMETER(DB1.Attach_to_Order_Number);
  PARAMETER(DB1.Reason_for_Price_Audit);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Invoice_Date);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Trans_Contol_AS400_Plant);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.A_R_order_Value_Total);
  PARAMETER(DB1.Billing_Activity_Type);
  PARAMETER(DB1.Block_Order_Flag);
  PARAMETER(DB1.Order_Certification_Flag);
  PARAMETER(DB1.Invoice_Order_Value_Tot);
  PARAMETER(DB1.Process_Sts_for_3C);
  PARAMETER(DB1.Order_Conf_Fax_Sts);
  PARAMETER(DB1.Manifest_Fax_Sts);
  PARAMETER(DB1.Invoice_Fax_Sts);
  PARAMETER(DB1.Transfer_in_Storage_Ind);
  PARAMETER(DB1.Email_Cust_On_Order_Ship);
  PARAMETER(DB1.Order_Emailed);
  PARAMETER(DB1.Export_Docs_Go_w_Driver);
  PARAMETER(DB1.Shipping_Temp_Code_C_F);
  PARAMETER(DB1.Broker_Order_Status);
  PARAMETER(DB1.Air_Freight_Order);
  PARAMETER(DB1.Order_Requires_Review);
  PARAMETER(DB1.OH_Load_Plan_Ready);
  PARAMETER(DB1.Export_USDA_Approved);
  PARAMETER(DB1.HPB_Ship_to_Warehouse);
  PARAMETER(DB1.OH_TF_Exempt_Code);
  PARAMETER(DB1.OH_Appt_Confirmation_Dt);
  PARAMETER(DB1.JPN_Invoice_Issuance_Date);
  PARAMETER(DB1.Load_Actual_Shipped_Date);
  PARAMETER(DB1.Load_BOL_Complete_Date);
  PARAMETER(DB1.Load_Truck_Departure_Date);
  PARAMETER(DB1.Maximum_Gross_Weight);
  PARAMETER(DB1.Time_of_Original_Entry);
  PARAMETER(DB1.OH_Appt_Confirmation_Tm);
  PARAMETER(DB1.Load_BOL_Complete_Time);
  PARAMETER(DB1.Load_Truck_Departure_Time);
  PARAMETER(DB1.Act_Frt_Reference_Amount);
  PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
  PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
  PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
  PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);

  //?------------------------------------------------------------------
  //?------------------------------------------------------------------
  //?USER: Processing after Data update

  //?Email Requested Delv Change msg is changed and Appt exists.
  CASE;

  // IF LCL.Status Flag 1  Y/N is Yes
  IF LCL.Status_Flag_1_Y_N = 'Y';

  // Call program Exc Email Ord RqDtChg XF.
  CALL PROGRAM(Exc Email Ord RqDtChg XF) ('PBEPXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Sales_Route_Code);

  ENDIF;

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Chg Order Header WRK  CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC2223744;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Order_Type_Sales);
 PARAMETER(LCL.AR_Customer_Number);
 PARAMETER(LCL.Ship_To_Customer);
 PARAMETER(LCL.Ship_To_Name);
 PARAMETER(LCL.Ship_To_Address_Line_1);
 PARAMETER(LCL.Ship_To_Address_Line_2);
 PARAMETER(LCL.Ship_To_Address_Line_3);
 PARAMETER(LCL.Ship_To_City);
 PARAMETER(LCL.Ship_To_State_Code);
 PARAMETER(LCL.Ship_To_Zip_Postal_Code);
 PARAMETER(LCL.Bill_to_Customer);
 PARAMETER(LCL.Bill_to_Name);
 PARAMETER(LCL.Bill_to_Address_Line_1);
 PARAMETER(LCL.Bill_to_Address_Line_2);
 PARAMETER(LCL.Bill_to_Address_Line_3);
 PARAMETER(LCL.Bill_to_City);
 PARAMETER(LCL.Bill_to_State_Code);
 PARAMETER(LCL.Bill_to_Zip_Postal_Code);
 PARAMETER(LCL.Customer_Purchase_Order_#);
 PARAMETER(LCL.Order_Date);
 PARAMETER(LCL.Requested_Ship_Date);
 PARAMETER(LCL.Actual_Shipped_Date);
 PARAMETER(LCL.Cancel_Date);
 PARAMETER(LCL.Terms_Code);
 PARAMETER(LCL.Special_Instructions);
 PARAMETER(LCL.Special_Instructions_2);
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(LCL.Comment_Print_Acknowledge);
 PARAMETER(LCL.Comment_Print_Inv_Cr_Memo);
 PARAMETER(LCL.Comment_Print_Pick_Slip);
 PARAMETER(LCL.Comment_Print_Ship_Doc);
 PARAMETER(LCL.Reason_Code);
 PARAMETER(LCL.Order_in_Use);
 PARAMETER(LCL.Header_Status);
 PARAMETER(LCL.Header_Status_Last);
 PARAMETER(LCL.Order_Type_Print_Status);
 PARAMETER(LCL.Scheduled_Ship_Date);
 PARAMETER('INFORMATIC');
 PARAMETER(LCL.Date_of_Original_Entry);
 PARAMETER(LCL.Order_Value_Total);
 PARAMETER(LCL.Credit_Hold);
 PARAMETER(LCL.Production_Hold);
 PARAMETER(LCL.New_Customer_Hold);
 PARAMETER(LCL.Requested_Delivery_Date);
 PARAMETER(LCL.Requested_Delivery_Time);
 PARAMETER(LCL.Accounts_Receiv_Ent_1);
 PARAMETER(LCL.Accounts_Receiv_Ent_2);
 PARAMETER(LCL.Load_ID);
 PARAMETER(LCL.Absorbed_Freight_Rate_CWT);
 PARAMETER(LCL.Rated_Freight);
 PARAMETER(LCL.LTL_Flag);
 PARAMETER(LCL.Price_Audit);
 PARAMETER(LCL.Price_Status);
 PARAMETER(LCL.Shipping_Method);
 PARAMETER(LCL.Export_Status);
 PARAMETER(LCL.Palletize);
 PARAMETER(LCL.Shrink_Wrap);
 PARAMETER(LCL.Slip_Sheet);
 PARAMETER(LCL.Age_Code);
 PARAMETER(LCL.Reefer_Temperature);
 PARAMETER(LCL.Load_Type);
 PARAMETER(LCL.Attach_to_Invoice_Number);
 PARAMETER(LCL.Load_Plan_Order);
 PARAMETER(LCL.Print_Pick_Slip);
 PARAMETER(LCL.Resell_Reference_Number);
 PARAMETER(LCL.Special_Comment_1);
 PARAMETER(LCL.Special_Comment_2);
 PARAMETER(LCL.Affect_Auto_Accruals);
 PARAMETER(LCL.Sales_Route_Code);
 PARAMETER(LCL.Manager_Level_Code);
 PARAMETER(LCL.VP_Level_Code);
 PARAMETER(LCL.Attach_to_Order_Number);
 PARAMETER(LCL.Reason_for_Price_Audit);
 PARAMETER(LCL.Invoice_Number);
 PARAMETER(LCL.Invoice_Suffix);
 PARAMETER(LCL.Invoice_Date);
 PARAMETER(LCL.Event_Code);
 PARAMETER(LCL.Trans_Contol_AS400_Plant);
 PARAMETER(LCL.Modified_Flag);
 PARAMETER(LCL.A_R_order_Value_Total);
 PARAMETER(LCL.Billing_Activity_Type);
 PARAMETER(LCL.Block_Order_Flag);
 PARAMETER(LCL.Order_Certification_Flag);
 PARAMETER(LCL.Invoice_Order_Value_Tot);
 PARAMETER(LCL.Process_Sts_for_3C);
 PARAMETER(LCL.Order_Conf_Fax_Sts);
 PARAMETER(LCL.Manifest_Fax_Sts);
 PARAMETER(LCL.Invoice_Fax_Sts);
 PARAMETER(LCL.Transfer_in_Storage_Ind);
 PARAMETER(LCL.Email_Cust_On_Order_Ship);
 PARAMETER(LCL.Order_Emailed);
 PARAMETER(LCL.Export_Docs_Go_w_Driver);
 PARAMETER(LCL.Shipping_Temp_Code_C_F);
 PARAMETER(LCL.Broker_Order_Status);
 PARAMETER(LCL.Air_Freight_Order);
 PARAMETER(LCL.Order_Requires_Review);
 PARAMETER(LCL.OH_Load_Plan_Ready);
 PARAMETER(LCL.Export_USDA_Approved);
 PARAMETER(LCL.HPB_Ship_to_Warehouse);
 PARAMETER(LCL.OH_TF_Exempt_Code);
 PARAMETER(LCL.OH_Appt_Confirmation_Dt);
 PARAMETER(LCL.JPN_Invoice_Issuance_Date);
 PARAMETER(LCL.Load_Actual_Shipped_Date);
 PARAMETER(LCL.Load_BOL_Complete_Date);
 PARAMETER(LCL.Load_Truck_Departure_Date);
 PARAMETER(LCL.Maximum_Gross_Weight);
 PARAMETER(LCL.Time_of_Original_Entry);
 PARAMETER(LCL.OH_Appt_Confirmation_Tm);
 PARAMETER(LCL.Load_BOL_Complete_Time);
 PARAMETER(LCL.Load_Truck_Departure_Time);
 PARAMETER(LCL.Act_Frt_Reference_Amount);
 PARAMETER(LCL.Act_Non_Ref_Frt_Amount);
 PARAMETER(LCL.OH_Fuel_Surcharge_Amount);
 PARAMETER(LCL.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(LCL.OH_Total_Ref_Frt_Amt);
 PARAMETER(LCL.Claim_Number);
 PARAMETER(LCL.EDI_Status_1);
 PARAMETER(LCL.EDI_Status_2);
 PARAMETER(LCL.EDI_Status_3);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Processing after Data read

  //?01/22/09 RMC  move here from "before Data update" spot
  //?06/23/00 PKD Added the update of the Export Status on the Load
  //?             if the Export Status on the Order is changed to Y,
  //?Change the Export Status.
  CASE;

  // IF PAR.Export Status NE DB1.Export Status
  IF PAR.Export_Status <> DB1.Export_Status;

  // AND PAR.Export Status is yes
  AND PAR.Export_Status = 'Y';

  CASE;

  // IF DB1.Load ID is NE Blank
  IF DB1.Load_ID <> *ZERO;

  // AND DB1.Load Plan Order is yes
  AND DB1.Load_Plan_Order = 'Y';

  EXECUTE FUNCTION(Chg Export Status     CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC1540180;
  PARAMETER(DB1.Load_ID);
  PARAMETER(PAR.Export_Status);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

  ENDIF;

  // LCL.Status Flag 1  Y/N = CND.No
  LCL.Status_Flag_1_Y_N = 'N';

  //?Email Requested Delv Change msg is changed and Appt exists.
  CASE;

  // IF PAR.Requested Delivery Date NE DB1.Requested Delivery Date
  IF ( PAR.Requested_Delivery_Date <> DB1.Requested_Delivery_Date;

  // OR PAR.Requested Delivery Time NE DB1.Requested Delivery Time
  OR PAR.Requested_Delivery_Time <> DB1.Requested_Delivery_Time );

  // AND DB1.OH Appt Confirmation Dt is Entered
  AND DB1.OH_Appt_Confirmation_Dt > *ZERO;

  // LCL.Status Flag 1  Y/N = CND.Yes
  LCL.Status_Flag_1_Y_N = 'Y';

  ENDIF;

  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // DB1.User Id = CON.INFORMATIC
  DB1.User_Id = 'INFORMATIC';

  // Call program TRG Order Hdr CHG Trig XT.
  CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Ship_To_Name);
  PARAMETER(DB1.Ship_To_Address_Line_1);
  PARAMETER(DB1.Ship_To_Address_Line_2);
  PARAMETER(DB1.Ship_To_Address_Line_3);
  PARAMETER(DB1.Ship_To_City);
  PARAMETER(DB1.Ship_To_State_Code);
  PARAMETER(DB1.Ship_To_Zip_Postal_Code);
  PARAMETER(DB1.Bill_to_Customer);
  PARAMETER(DB1.Bill_to_Name);
  PARAMETER(DB1.Bill_to_Address_Line_1);
  PARAMETER(DB1.Bill_to_Address_Line_2);
  PARAMETER(DB1.Bill_to_Address_Line_3);
  PARAMETER(DB1.Bill_to_City);
  PARAMETER(DB1.Bill_to_State_Code);
  PARAMETER(DB1.Bill_to_Zip_Postal_Code);
  PARAMETER(DB1.Customer_Purchase_Order_#);
  PARAMETER(DB1.Order_Date);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Cancel_Date);
  PARAMETER(DB1.Terms_Code);
  PARAMETER(DB1.Special_Instructions);
  PARAMETER(DB1.Special_Instructions_2);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Comment_Print_Acknowledge);
  PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
  PARAMETER(DB1.Comment_Print_Pick_Slip);
  PARAMETER(DB1.Comment_Print_Ship_Doc);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Order_in_Use);
  PARAMETER(DB1.Header_Status);
  PARAMETER(DB1.Header_Status_Last);
  PARAMETER(DB1.Order_Type_Print_Status);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.User_Original_Entry);
  PARAMETER(DB1.Date_of_Original_Entry);
  PARAMETER(DB1.Order_Value_Total);
  PARAMETER(DB1.Order_Weight_Total);
  PARAMETER(DB1.Credit_Hold);
  PARAMETER(DB1.Production_Hold);
  PARAMETER(DB1.New_Customer_Hold);
  PARAMETER(DB1.Requested_Delivery_Date);
  PARAMETER(DB1.Requested_Delivery_Time);
  PARAMETER(DB1.Accounts_Receiv_Ent_1);
  PARAMETER(DB1.Accounts_Receiv_Ent_2);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.LTL_Flag);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Shipping_Method);
  PARAMETER(DB1.Export_Status);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Shrink_Wrap);
  PARAMETER(DB1.Slip_Sheet);
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Reefer_Temperature);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Attach_to_Invoice_Number);
  PARAMETER(DB1.Load_Plan_Order);
  PARAMETER(DB1.Print_Pick_Slip);
  PARAMETER(DB1.Resell_Reference_Number);
  PARAMETER(DB1.Special_Comment_1);
  PARAMETER(DB1.Special_Comment_2);
  PARAMETER(DB1.Affect_Auto_Accruals);
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(DB1.Manager_Level_Code);
  PARAMETER(DB1.VP_Level_Code);
  PARAMETER(DB1.Attach_to_Order_Number);
  PARAMETER(DB1.Reason_for_Price_Audit);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Invoice_Date);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Trans_Contol_AS400_Plant);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.A_R_order_Value_Total);
  PARAMETER(DB1.Billing_Activity_Type);
  PARAMETER(DB1.Block_Order_Flag);
  PARAMETER(DB1.Order_Certification_Flag);
  PARAMETER(DB1.Invoice_Order_Value_Tot);
  PARAMETER(DB1.Process_Sts_for_3C);
  PARAMETER(DB1.Order_Conf_Fax_Sts);
  PARAMETER(DB1.Manifest_Fax_Sts);
  PARAMETER(DB1.Invoice_Fax_Sts);
  PARAMETER(DB1.Transfer_in_Storage_Ind);
  PARAMETER(DB1.Email_Cust_On_Order_Ship);
  PARAMETER(DB1.Order_Emailed);
  PARAMETER(DB1.Export_Docs_Go_w_Driver);
  PARAMETER(DB1.Shipping_Temp_Code_C_F);
  PARAMETER(DB1.Broker_Order_Status);
  PARAMETER(DB1.Air_Freight_Order);
  PARAMETER(DB1.Order_Requires_Review);
  PARAMETER(DB1.OH_Load_Plan_Ready);
  PARAMETER(DB1.Export_USDA_Approved);
  PARAMETER(DB1.HPB_Ship_to_Warehouse);
  PARAMETER(DB1.OH_TF_Exempt_Code);
  PARAMETER(DB1.OH_Appt_Confirmation_Dt);
  PARAMETER(DB1.JPN_Invoice_Issuance_Date);
  PARAMETER(DB1.Load_Actual_Shipped_Date);
  PARAMETER(DB1.Load_BOL_Complete_Date);
  PARAMETER(DB1.Load_Truck_Departure_Date);
  PARAMETER(DB1.Maximum_Gross_Weight);
  PARAMETER(DB1.Time_of_Original_Entry);
  PARAMETER(DB1.OH_Appt_Confirmation_Tm);
  PARAMETER(DB1.Load_BOL_Complete_Time);
  PARAMETER(DB1.Load_Truck_Departure_Time);
  PARAMETER(DB1.Act_Frt_Reference_Amount);
  PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
  PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
  PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
  PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);

  //?------------------------------------------------------------------
  //?------------------------------------------------------------------
  //?USER: Processing after Data update

  //?Email Requested Delv Change msg is changed and Appt exists.
  CASE;

  // IF LCL.Status Flag 1  Y/N is Yes
  IF LCL.Status_Flag_1_Y_N = 'Y';

  // Call program Exc Email Ord RqDtChg XF.
  CALL PROGRAM(Exc Email Ord RqDtChg XF) ('PBEPXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Sales_Route_Code);

  ENDIF;

 }

 ENDIF;

 EXECUTE FUNCTION(Chg Block Order Upl HdrCH) TYPE(CHGOBJ) FILE(PUC2CPP)          AC2212473;
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.OHE_Spot_Buy);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Country_Code);
 PARAMETER(DB1.OHE_Intended_for_ExportCC);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER('Y');
 PARAMETER(DB1.Email_Sent);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 // PAR.Hdr/Dtl Validation Pass U = LCL.Hdr/Dtl Validation Pass U
 PAR.Hdr_Dtl_Validation_Pass_U = LCL.Hdr_Dtl_Validation_Pass_U;

 //?*** If all error testing is passed, update the record(s).
 // IF LCL.Hdr/Dtl Validation Pass U is No
 IF LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 // PAR.Hdr/Dtl Validation Pass U = LCL.Hdr/Dtl Validation Pass U
 PAR.Hdr_Dtl_Validation_Pass_U = LCL.Hdr_Dtl_Validation_Pass_U;

 EXECUTE FUNCTION(Chg Block Order Upl HdrCH) TYPE(CHGOBJ) FILE(PUC2CPP)          AC2212473;
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.OHE_Spot_Buy);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Country_Code);
 PARAMETER(DB1.OHE_Intended_for_ExportCC);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER('Y');
 PARAMETER(DB1.Email_Sent);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 ENDIF;

 // IF DB1.Header Status is Cancelled
 IF DB1.Header_Status = 'X';

 EXECUTE FUNCTION(RTV All Fields         RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1571206;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(NLL.Order_Type_Sales);
 PARAMETER(NLL.AR_Customer_Number);
 PARAMETER(NLL.Ship_To_Customer);
 PARAMETER(NLL.Ship_To_Name);
 PARAMETER(NLL.Ship_To_Address_Line_1);
 PARAMETER(NLL.Ship_To_Address_Line_2);
 PARAMETER(NLL.Ship_To_Address_Line_3);
 PARAMETER(NLL.Ship_To_City);
 PARAMETER(NLL.Ship_To_State_Code);
 PARAMETER(NLL.Ship_To_Zip_Postal_Code);
 PARAMETER(NLL.Bill_to_Customer);
 PARAMETER(NLL.Bill_to_Name);
 PARAMETER(NLL.Bill_to_Address_Line_1);
 PARAMETER(NLL.Bill_to_Address_Line_2);
 PARAMETER(NLL.Bill_to_Address_Line_3);
 PARAMETER(NLL.Bill_to_City);
 PARAMETER(NLL.Bill_to_State_Code);
 PARAMETER(NLL.Bill_to_Zip_Postal_Code);
 PARAMETER(NLL.Customer_Purchase_Order_#);
 PARAMETER(NLL.Order_Date);
 PARAMETER(NLL.Requested_Ship_Date);
 PARAMETER(NLL.Actual_Shipped_Date);
 PARAMETER(NLL.Cancel_Date);
 PARAMETER(NLL.Terms_Code);
 PARAMETER(NLL.Special_Instructions);
 PARAMETER(NLL.Special_Instructions_2);
 PARAMETER(NLL.Carrier_Code);
 PARAMETER(NLL.Comment_Print_Acknowledge);
 PARAMETER(NLL.Comment_Print_Inv_Cr_Memo);
 PARAMETER(NLL.Comment_Print_Pick_Slip);
 PARAMETER(NLL.Comment_Print_Ship_Doc);
 PARAMETER(NLL.Reason_Code);
 PARAMETER(LCL.Order_in_Use);
 PARAMETER(LCL.Header_Status);
 PARAMETER(NLL.Header_Status_Last);
 PARAMETER(NLL.Order_Type_Print_Status);
 PARAMETER(NLL.Scheduled_Ship_Date);
 PARAMETER(NLL.User_Original_Entry);
 PARAMETER(NLL.Date_of_Original_Entry);
 PARAMETER(NLL.Order_Value_Total);
 PARAMETER(NLL.Order_Weight_Total);
 PARAMETER(NLL.Credit_Hold);
 PARAMETER(NLL.Production_Hold);
 PARAMETER(NLL.New_Customer_Hold);
 PARAMETER(NLL.Requested_Delivery_Date);
 PARAMETER(NLL.Requested_Delivery_Time);
 PARAMETER(NLL.Accounts_Receiv_Ent_1);
 PARAMETER(NLL.Accounts_Receiv_Ent_2);
 PARAMETER(NLL.Load_ID);
 PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
 PARAMETER(NLL.Rated_Freight);
 PARAMETER(NLL.LTL_Flag);
 PARAMETER(NLL.Price_Audit);
 PARAMETER(NLL.Price_Status);
 PARAMETER(NLL.Shipping_Method);
 PARAMETER(NLL.Export_Status);
 PARAMETER(NLL.Palletize);
 PARAMETER(NLL.Shrink_Wrap);
 PARAMETER(NLL.Slip_Sheet);
 PARAMETER(NLL.Age_Code);
 PARAMETER(NLL.Reefer_Temperature);
 PARAMETER(NLL.Load_Type);
 PARAMETER(NLL.Attach_to_Invoice_Number);
 PARAMETER(NLL.Load_Plan_Order);
 PARAMETER(NLL.Print_Pick_Slip);
 PARAMETER(NLL.Resell_Reference_Number);
 PARAMETER(NLL.Special_Comment_1);
 PARAMETER(NLL.Special_Comment_2);
 PARAMETER(NLL.Affect_Auto_Accruals);
 PARAMETER(NLL.Sales_Route_Code);
 PARAMETER(NLL.Manager_Level_Code);
 PARAMETER(NLL.VP_Level_Code);
 PARAMETER(NLL.Attach_to_Order_Number);
 PARAMETER(NLL.Reason_for_Price_Audit);
 PARAMETER(NLL.Invoice_Number);
 PARAMETER(NLL.Invoice_Suffix);
 PARAMETER(NLL.Invoice_Date);
 PARAMETER(NLL.Event_Code);
 PARAMETER(NLL.Trans_Contol_AS400_Plant);
 PARAMETER(NLL.Modified_Flag);
 PARAMETER(NLL.A_R_order_Value_Total);
 PARAMETER(NLL.Billing_Activity_Type);
 PARAMETER(LCL.Block_Order_Flag);
 PARAMETER(NLL.Order_Certification_Flag);
 PARAMETER(NLL.Invoice_Order_Value_Tot);
 PARAMETER(NLL.Process_Sts_for_3C);
 PARAMETER(NLL.Order_Conf_Fax_Sts);
 PARAMETER(NLL.Manifest_Fax_Sts);
 PARAMETER(NLL.Invoice_Fax_Sts);
 PARAMETER(NLL.Transfer_in_Storage_Ind);
 PARAMETER(NLL.Email_Cust_On_Order_Ship);
 PARAMETER(NLL.Order_Emailed);
 PARAMETER(NLL.Export_Docs_Go_w_Driver);
 PARAMETER(NLL.Shipping_Temp_Code_C_F);
 PARAMETER(NLL.Broker_Order_Status);
 PARAMETER(NLL.Air_Freight_Order);
 PARAMETER(NLL.Order_Requires_Review);
 PARAMETER(NLL.OH_Load_Plan_Ready);
 PARAMETER(NLL.Export_USDA_Approved);
 PARAMETER(NLL.HPB_Ship_to_Warehouse);
 PARAMETER(NLL.OH_TF_Exempt_Code);
 PARAMETER(NLL.OH_Appt_Confirmation_Dt);
 PARAMETER(NLL.JPN_Invoice_Issuance_Date);
 PARAMETER(NLL.Load_Actual_Shipped_Date);
 PARAMETER(NLL.Load_BOL_Complete_Date);
 PARAMETER(NLL.Load_Truck_Departure_Date);
 PARAMETER(NLL.Maximum_Gross_Weight);
 PARAMETER(NLL.Time_of_Original_Entry);
 PARAMETER(NLL.OH_Appt_Confirmation_Tm);
 PARAMETER(NLL.Load_BOL_Complete_Time);
 PARAMETER(NLL.Load_Truck_Departure_Time);
 PARAMETER(NLL.Act_Frt_Reference_Amount);
 PARAMETER(NLL.Act_Non_Ref_Frt_Amount);
 PARAMETER(NLL.OH_Fuel_Surcharge_Amount);
 PARAMETER(NLL.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(NLL.OH_Total_Ref_Frt_Amt);
 PARAMETER(NLL.Claim_Number);
 PARAMETER(NLL.EDI_Status_1);
 PARAMETER(NLL.EDI_Status_2);
 PARAMETER(NLL.EDI_Status_3);
 PARAMETER(NLL.Job_Time);
 PARAMETER(NLL.User_Id);
 PARAMETER(NLL.Job_Name);
 PARAMETER(NLL.Job_Date);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?*** Order can't be Firmed or Complete.
 CASE;

 // IF LCL.Header Status is Confirmed & Complete
 IF LCL.Header_Status = 'C'/'R';

 // LCL.BOE Error Comment = CONCAT(CON.Order is Confirmed or Com,CON.plete. No change allowed.,CON.*
 LCL.BOE_Error_Comment = 'Order is Confirmed or Com' + 'plete. No change allowed.' (*ZERO);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(*MISSING);
 PARAMETER('ORDCOM');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 //?*** Order can't be Firmed or Complete.
 // IF *OTHERWISE
 IF *OTHERWISE;

 ENDIF;

 // LCL.From Date             USR = JOB.*Job exec start date + CON.-7 *DAYS
 LCL.From_Date_USR = DATEINCR(JOB.*Job_exec_start_date '-7' 'DY' 1111111 'NONE' 'N' 1);

 // LCL.To Date               USR = JOB.*Job exec start date + CON.7 *DAYS
 LCL.To_Date_USR = DATEINCR(JOB.*Job_exec_start_date 7 'DY' 1111111 'NONE' 'N' 1);

 //?*** Validate Cancel Date within 7 days.
 CASE;

 // IF DB1.Cancel Date LT LCL.From Date             USR
 IF DB1.Cancel_Date < LCL.From_Date_USR;

 // OR DB1.Cancel Date GT LCL.To Date               USR
 OR DB1.Cancel_Date > LCL.To_Date_USR;

 // LCL.Date 7A              USR = CVTVAR(DB1.Cancel Date)
 LCL.Date_7A_USR = CVTVAR(DB1.Cancel_Date);

 // LCL.BOE Error Comment = CONCAT(CON.Cancel Date is out of Ran,CON.ge. Must be + - 7 days.,CON.*ZE
 LCL.BOE_Error_Comment = 'Cancel Date is out of Ran' + 'ge. Must be + - 7 days.' (*ZERO);

 // LCL.BOE Error Comment = CONCAT(LCL.BOE Error Comment,LCL.Date 7A              USR,CON.1)
 LCL.BOE_Error_Comment = LCL.BOE_Error_Comment + LCL.Date_7A_USR (1);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(*MISSING);
 PARAMETER('INVDAT');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 //?*** WI546_2-Validate Date format is CYMD
 CASE;

 // IF DB1.Cancel Date is entered
 IF DB1.Cancel_Date <> *ZERO;

 // LCL.Text usr 11 = CND.Not Entered
 LCL.Text_usr_11 = *BLANK;

 // LCL.Date From Convert USR = CVTVAR(DB1.Cancel Date)
 LCL.Date_From_Convert_USR = CVTVAR(DB1.Cancel_Date);

 // Call program Cvt Date              UP.
 CALL PROGRAM(Cvt Date              UP) ('POD5UPR');
 PARAMETER(LCL.Date_From_Convert_USR);
 PARAMETER(LCL.Text_usr_11);
 PARAMETER(*CYMD);
 PARAMETER(*YYMD);
 PARAMETER(*NONE);

 CASE;

 // IF LCL.Text usr 11 is Not Entered
 IF LCL.Text_usr_11 = *BLANK;

 // LCL.BOE Error Comment = CONCAT(CON.Invalid Cancel Date Forma,CON.t.,CON.*ZERO)
 LCL.BOE_Error_Comment = 'Invalid Cancel Date Forma' + 't.' (*ZERO);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('INVCAN');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 ENDIF;

 //?** 1019801 JM - WI546_2 Make sure Cancel Date is present in Calendar.
 CASE;

 // IF DB1.Cancel Date is entered
 IF DB1.Cancel_Date <> *ZERO;

 EXECUTE FUNCTION(RTV Calendar           RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1102049;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Cancel_Date);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.Calendar not found
  PGM.*Return_code = 'USR0018';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

 CASE;

 // IF PGM.*Return code is Calendar not found
 IF PGM.*Return_code = 'USR0018';

 // LCL.BOE Error Comment = CONCAT(CON.Cancel Date Not Found In,CON. Calendar.,CON.*ZERO)
 LCL.BOE_Error_Comment = 'Cancel Date Not Found In' + ' Calendar.' (*ZERO);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('INVCAN');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 ENDIF;

 //?*** S028944-JM-09/09/24-Log error if it is firm order.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Block Order Flag  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1873478;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Block_Order_Flag);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Block Order Flag is Not Block Order
 IF LCL.Block_Order_Flag = *BLANK/'F'/'N'/'Y';

 // LCL.BOE Error Comment = CONCAT(CON.Firm Order can not be can,CON.celled using automation.,CON.*Z
 LCL.BOE_Error_Comment = 'Firm Order can not be can' + 'celled using automation.' (*ZERO);

 // Call program EXC Crt Blk Order ErrorEX.
 CALL PROGRAM(EXC Crt Blk Order ErrorEX) ('PVAWXFR');
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('ORDLOD');
 PARAMETER(LCL.BOE_Error_Comment);

 // LCL.Hdr/Dtl Validation Pass U = CND.No
 LCL.Hdr_Dtl_Validation_Pass_U = 'N';

 ENDIF;

 ENDIF;

 //?*** Cancel the Order if no errors.
 CASE;

 // IF LCL.Hdr/Dtl Validation Pass U is Yes
 IF LCL.Hdr_Dtl_Validation_Pass_U = 'Y';

 EXECUTE FUNCTION(RTV Cancel Order       RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC2224839;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Cancel_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Cancel Entire Order) TYPE(RTVOBJ) FILE(OPBGWKP)            AC2225577;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Cancel_Date);
  PARAMETER(LCL.USR_Return_Code);
  {
   //?USER: Initialize routine

   // PAR.USR Return Code = CND.Does Not Exist
   PAR.USR_Return_Code = 'N';

   //?USER: Process Data record

   // PAR.USR Return Code = CND.Exists
   PAR.USR_Return_Code = 'E';

   // LCL.Quantity Scheduled = DB1.Quantity Scheduled
   LCL.Quantity_Scheduled = DB1.Quantity_Scheduled;

   // LCL.Weight Scheduled = DB1.Weight Scheduled
   LCL.Weight_Scheduled = DB1.Weight_Scheduled;

   //?**WI546_2-Dealloc inventory
   CASE;

   // IF DB1.OD Production Plan Sts is Yes
   IF DB1.OD_Production_Plan_Sts = *BLANK;

   // Call program UPD Avail-To-Sell  ORD XF.
   CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Requested_Ship_Date);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(LCL.Quantity_Scheduled);
   PARAMETER(LCL.Weight_Scheduled);
   PARAMETER('OD');
   PARAMETER(JOB.*PROGRAM);
   PARAMETER(DB1.Item_Age_Days);
   PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
   PARAMETER(DB1.Production_Ovr_AgeDte_To);

   //?**WI546_2-Dealloc inventory
   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Quantity Scheduled = CON.*ZERO
   LCL.Quantity_Scheduled = *ZERO;

   // LCL.Weight Scheduled = CON.*ZERO
   LCL.Weight_Scheduled = *ZERO;

   ENDIF;

   EXECUTE FUNCTION(Chg Qty/Wgt Sched BlockOR) TYPE(CHGOBJ) FILE(OPBGWKP)          AC2224914;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(LCL.Quantity_Scheduled);
   PARAMETER(LCL.Weight_Scheduled);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // DB1.User Id = CON.INFORMATIC
    DB1.User_Id = 'INFORMATIC';

   }

   //?**WI546_2-Cancellation logic same as PDN9EFR UI.
   CASE;

   // IF DB1.Detail Line Status is Entered
   IF DB1.Detail_Line_Status = 'E';

   EXECUTE FUNCTION(DLT PD Order Detail    DL) TYPE(DLTOBJ) FILE(OPBGWKP)          AC1204566;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   // Call program Rtv Dlt OD Files/CanclXF.
   CALL PROGRAM(Rtv Dlt OD Files/CanclXF) ('PUKGXFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);

   //?**WI546_2-Cancellation logic same as PDN9EFR UI.
   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Detail Line Status Last = DB1.Detail Line Status
   LCL.Detail_Line_Status_Last = DB1.Detail_Line_Status;

   // LCL.Detail Line Status = CND.Cancelled
   LCL.Detail_Line_Status = 'X';

   EXECUTE FUNCTION(CHG Sts,Alloc          CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1425289;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(LCL.Detail_Line_Status);
   PARAMETER(LCL.Detail_Line_Status_Last);
   PARAMETER(DB1.Quantity_Scheduled);
   PARAMETER(DB1.Weight_Scheduled);
   {
    //?USER: Processing before Data update

    //?E2640 Write chg log for cancel line item
    CASE;

    // IF PAR.Detail Line Status is Cancelled
    IF PAR.Detail_Line_Status = 'X';

    // AND PAR.Detail Line Status Last is Not cancelled
    AND PAR.Detail_Line_Status_Last = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

    // LCL.Text 3 Length USR = DB1.Order Sequence Number
    LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

    // LCL.Weight Beg Inv usr = DB1.Weight Ordered
    LCL.Weight_Beg_Inv_usr = DB1.Weight_Ordered;

    // LCL.Text USR 7 = LCL.Weight Beg Inv usr
    LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

    // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
    LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

    //?New value is -0- for cancel
    // LCL.Weight Beg Inv usr = CON.*ZERO
    LCL.Weight_Beg_Inv_usr = 0;

    // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
    LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

    // Call program CRT Load/OrderChg n/ld XF.
    CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
    PARAMETER(*ZERO);
    PARAMETER('ORDWGT');
    PARAMETER('SLS');
    PARAMETER(LCL.Change_Log_Prior_Value);
    PARAMETER(LCL.Change_Log_New_Value);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);

    // LCL.Weight Beg Inv usr = DB1.Quantity Ordered
    LCL.Weight_Beg_Inv_usr = DB1.Quantity_Ordered;

    // LCL.Text USR 7 = LCL.Weight Beg Inv usr
    LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

    // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
    LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

    //?New value is -0- for cancel
    // LCL.Weight Beg Inv usr = CON.*ZERO
    LCL.Weight_Beg_Inv_usr = 0;

    // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
    LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

    // Call program CRT Load/OrderChg n/ld XF.
    CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
    PARAMETER(*ZERO);
    PARAMETER('ORDQTY');
    PARAMETER('SLS');
    PARAMETER(LCL.Change_Log_Prior_Value);
    PARAMETER(LCL.Change_Log_New_Value);
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);

    ENDIF;

   }

   EXECUTE FUNCTION(Rtv & Dlt for Cncl DtlRT) TYPE(RTVOBJ) FILE(PDMSREP)           AC1612172;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(Del Exp Doc Order Dtl  DL) TYPE(DLTOBJ) FILE(PDMSREP)          AC1524037;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.ED_Export_Document_Type);
    PARAMETER(DB1.Country_Code);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
   }

   ENDIF;

   //?USER: Exit processing

   // LCL.Header Status Last = DB1.Detail Line Status
   LCL.Header_Status_Last = DB1.Detail_Line_Status;

   EXECUTE FUNCTION(Chg Order Status BlockOrd) TYPE(CHGOBJ) FILE(OPBFCPP)          AC2225125;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(PAR.OD_Cancel_Date);
   PARAMETER('X');
   PARAMETER(LCL.Header_Status_Last);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER('N');
   PARAMETER('N');
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER('N');
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // DB1.Job Name = CON.AUTOUPLOAD
    DB1.Job_Name = 'AUTOUPLOAD';

    // DB1.User Id = CON.INFORMATIC
    DB1.User_Id = 'INFORMATIC';

    // Call program TRG Order Hdr CHG Trig XT.
    CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Type_Sales);
    PARAMETER(DB1.AR_Customer_Number);
    PARAMETER(DB1.Ship_To_Customer);
    PARAMETER(DB1.Ship_To_Name);
    PARAMETER(DB1.Ship_To_Address_Line_1);
    PARAMETER(DB1.Ship_To_Address_Line_2);
    PARAMETER(DB1.Ship_To_Address_Line_3);
    PARAMETER(DB1.Ship_To_City);
    PARAMETER(DB1.Ship_To_State_Code);
    PARAMETER(DB1.Ship_To_Zip_Postal_Code);
    PARAMETER(DB1.Bill_to_Customer);
    PARAMETER(DB1.Bill_to_Name);
    PARAMETER(DB1.Bill_to_Address_Line_1);
    PARAMETER(DB1.Bill_to_Address_Line_2);
    PARAMETER(DB1.Bill_to_Address_Line_3);
    PARAMETER(DB1.Bill_to_City);
    PARAMETER(DB1.Bill_to_State_Code);
    PARAMETER(DB1.Bill_to_Zip_Postal_Code);
    PARAMETER(DB1.Customer_Purchase_Order_#);
    PARAMETER(DB1.Order_Date);
    PARAMETER(DB1.Requested_Ship_Date);
    PARAMETER(DB1.Actual_Shipped_Date);
    PARAMETER(DB1.Cancel_Date);
    PARAMETER(DB1.Terms_Code);
    PARAMETER(DB1.Special_Instructions);
    PARAMETER(DB1.Special_Instructions_2);
    PARAMETER(DB1.Carrier_Code);
    PARAMETER(DB1.Comment_Print_Acknowledge);
    PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
    PARAMETER(DB1.Comment_Print_Pick_Slip);
    PARAMETER(DB1.Comment_Print_Ship_Doc);
    PARAMETER(DB1.Reason_Code);
    PARAMETER(DB1.Order_in_Use);
    PARAMETER(DB1.Header_Status);
    PARAMETER(DB1.Header_Status_Last);
    PARAMETER(DB1.Order_Type_Print_Status);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(DB1.User_Original_Entry);
    PARAMETER(DB1.Date_of_Original_Entry);
    PARAMETER(DB1.Order_Value_Total);
    PARAMETER(DB1.Order_Weight_Total);
    PARAMETER(DB1.Credit_Hold);
    PARAMETER(DB1.Production_Hold);
    PARAMETER(DB1.New_Customer_Hold);
    PARAMETER(DB1.Requested_Delivery_Date);
    PARAMETER(DB1.Requested_Delivery_Time);
    PARAMETER(DB1.Accounts_Receiv_Ent_1);
    PARAMETER(DB1.Accounts_Receiv_Ent_2);
    PARAMETER(DB1.Load_ID);
    PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
    PARAMETER(DB1.Rated_Freight);
    PARAMETER(DB1.LTL_Flag);
    PARAMETER(DB1.Price_Audit);
    PARAMETER(DB1.Price_Status);
    PARAMETER(DB1.Shipping_Method);
    PARAMETER(DB1.Export_Status);
    PARAMETER(DB1.Palletize);
    PARAMETER(DB1.Shrink_Wrap);
    PARAMETER(DB1.Slip_Sheet);
    PARAMETER(DB1.Age_Code);
    PARAMETER(DB1.Reefer_Temperature);
    PARAMETER(DB1.Load_Type);
    PARAMETER(DB1.Attach_to_Invoice_Number);
    PARAMETER(DB1.Load_Plan_Order);
    PARAMETER(DB1.Print_Pick_Slip);
    PARAMETER(DB1.Resell_Reference_Number);
    PARAMETER(DB1.Special_Comment_1);
    PARAMETER(DB1.Special_Comment_2);
    PARAMETER(DB1.Affect_Auto_Accruals);
    PARAMETER(DB1.Sales_Route_Code);
    PARAMETER(DB1.Manager_Level_Code);
    PARAMETER(DB1.VP_Level_Code);
    PARAMETER(DB1.Attach_to_Order_Number);
    PARAMETER(DB1.Reason_for_Price_Audit);
    PARAMETER(DB1.Invoice_Number);
    PARAMETER(DB1.Invoice_Suffix);
    PARAMETER(DB1.Invoice_Date);
    PARAMETER(DB1.Event_Code);
    PARAMETER(DB1.Trans_Contol_AS400_Plant);
    PARAMETER(DB1.Modified_Flag);
    PARAMETER(DB1.A_R_order_Value_Total);
    PARAMETER(DB1.Billing_Activity_Type);
    PARAMETER(DB1.Block_Order_Flag);
    PARAMETER(DB1.Order_Certification_Flag);
    PARAMETER(DB1.Invoice_Order_Value_Tot);
    PARAMETER(DB1.Process_Sts_for_3C);
    PARAMETER(DB1.Order_Conf_Fax_Sts);
    PARAMETER(DB1.Manifest_Fax_Sts);
    PARAMETER(DB1.Invoice_Fax_Sts);
    PARAMETER(DB1.Transfer_in_Storage_Ind);
    PARAMETER(DB1.Email_Cust_On_Order_Ship);
    PARAMETER(DB1.Order_Emailed);
    PARAMETER(DB1.Export_Docs_Go_w_Driver);
    PARAMETER(DB1.Shipping_Temp_Code_C_F);
    PARAMETER(DB1.Broker_Order_Status);
    PARAMETER(DB1.Air_Freight_Order);
    PARAMETER(DB1.Order_Requires_Review);
    PARAMETER(DB1.OH_Load_Plan_Ready);
    PARAMETER(DB1.Export_USDA_Approved);
    PARAMETER(DB1.HPB_Ship_to_Warehouse);
    PARAMETER(DB1.OH_TF_Exempt_Code);
    PARAMETER(DB1.OH_Appt_Confirmation_Dt);
    PARAMETER(DB1.JPN_Invoice_Issuance_Date);
    PARAMETER(DB1.Load_Actual_Shipped_Date);
    PARAMETER(DB1.Load_BOL_Complete_Date);
    PARAMETER(DB1.Load_Truck_Departure_Date);
    PARAMETER(DB1.Maximum_Gross_Weight);
    PARAMETER(DB1.Time_of_Original_Entry);
    PARAMETER(DB1.OH_Appt_Confirmation_Tm);
    PARAMETER(DB1.Load_BOL_Complete_Time);
    PARAMETER(DB1.Load_Truck_Departure_Time);
    PARAMETER(DB1.Act_Frt_Reference_Amount);
    PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
    PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
    PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
    PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
    PARAMETER(DB1.Claim_Number);
    PARAMETER(DB1.EDI_Status_1);
    PARAMETER(DB1.EDI_Status_2);
    PARAMETER(DB1.EDI_Status_3);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);

   }

  }

  CASE;

  // IF LCL.USR Return Code is Does Not Exist
  IF LCL.USR_Return_Code = 'N';

  // LCL.Header Status Last = DB1.Header Status
  LCL.Header_Status_Last = DB1.Header_Status;

  EXECUTE FUNCTION(Chg Order Status BlockOrd) TYPE(CHGOBJ) FILE(OPBFCPP)          AC2225125;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Cancel_Date);
  PARAMETER('X');
  PARAMETER(LCL.Header_Status_Last);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('N');
  PARAMETER('N');
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('N');
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.Job Name = CON.AUTOUPLOAD
   DB1.Job_Name = 'AUTOUPLOAD';

   // DB1.User Id = CON.INFORMATIC
   DB1.User_Id = 'INFORMATIC';

   // Call program TRG Order Hdr CHG Trig XT.
   CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Type_Sales);
   PARAMETER(DB1.AR_Customer_Number);
   PARAMETER(DB1.Ship_To_Customer);
   PARAMETER(DB1.Ship_To_Name);
   PARAMETER(DB1.Ship_To_Address_Line_1);
   PARAMETER(DB1.Ship_To_Address_Line_2);
   PARAMETER(DB1.Ship_To_Address_Line_3);
   PARAMETER(DB1.Ship_To_City);
   PARAMETER(DB1.Ship_To_State_Code);
   PARAMETER(DB1.Ship_To_Zip_Postal_Code);
   PARAMETER(DB1.Bill_to_Customer);
   PARAMETER(DB1.Bill_to_Name);
   PARAMETER(DB1.Bill_to_Address_Line_1);
   PARAMETER(DB1.Bill_to_Address_Line_2);
   PARAMETER(DB1.Bill_to_Address_Line_3);
   PARAMETER(DB1.Bill_to_City);
   PARAMETER(DB1.Bill_to_State_Code);
   PARAMETER(DB1.Bill_to_Zip_Postal_Code);
   PARAMETER(DB1.Customer_Purchase_Order_#);
   PARAMETER(DB1.Order_Date);
   PARAMETER(DB1.Requested_Ship_Date);
   PARAMETER(DB1.Actual_Shipped_Date);
   PARAMETER(DB1.Cancel_Date);
   PARAMETER(DB1.Terms_Code);
   PARAMETER(DB1.Special_Instructions);
   PARAMETER(DB1.Special_Instructions_2);
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Comment_Print_Acknowledge);
   PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
   PARAMETER(DB1.Comment_Print_Pick_Slip);
   PARAMETER(DB1.Comment_Print_Ship_Doc);
   PARAMETER(DB1.Reason_Code);
   PARAMETER(DB1.Order_in_Use);
   PARAMETER(DB1.Header_Status);
   PARAMETER(DB1.Header_Status_Last);
   PARAMETER(DB1.Order_Type_Print_Status);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(DB1.User_Original_Entry);
   PARAMETER(DB1.Date_of_Original_Entry);
   PARAMETER(DB1.Order_Value_Total);
   PARAMETER(DB1.Order_Weight_Total);
   PARAMETER(DB1.Credit_Hold);
   PARAMETER(DB1.Production_Hold);
   PARAMETER(DB1.New_Customer_Hold);
   PARAMETER(DB1.Requested_Delivery_Date);
   PARAMETER(DB1.Requested_Delivery_Time);
   PARAMETER(DB1.Accounts_Receiv_Ent_1);
   PARAMETER(DB1.Accounts_Receiv_Ent_2);
   PARAMETER(DB1.Load_ID);
   PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
   PARAMETER(DB1.Rated_Freight);
   PARAMETER(DB1.LTL_Flag);
   PARAMETER(DB1.Price_Audit);
   PARAMETER(DB1.Price_Status);
   PARAMETER(DB1.Shipping_Method);
   PARAMETER(DB1.Export_Status);
   PARAMETER(DB1.Palletize);
   PARAMETER(DB1.Shrink_Wrap);
   PARAMETER(DB1.Slip_Sheet);
   PARAMETER(DB1.Age_Code);
   PARAMETER(DB1.Reefer_Temperature);
   PARAMETER(DB1.Load_Type);
   PARAMETER(DB1.Attach_to_Invoice_Number);
   PARAMETER(DB1.Load_Plan_Order);
   PARAMETER(DB1.Print_Pick_Slip);
   PARAMETER(DB1.Resell_Reference_Number);
   PARAMETER(DB1.Special_Comment_1);
   PARAMETER(DB1.Special_Comment_2);
   PARAMETER(DB1.Affect_Auto_Accruals);
   PARAMETER(DB1.Sales_Route_Code);
   PARAMETER(DB1.Manager_Level_Code);
   PARAMETER(DB1.VP_Level_Code);
   PARAMETER(DB1.Attach_to_Order_Number);
   PARAMETER(DB1.Reason_for_Price_Audit);
   PARAMETER(DB1.Invoice_Number);
   PARAMETER(DB1.Invoice_Suffix);
   PARAMETER(DB1.Invoice_Date);
   PARAMETER(DB1.Event_Code);
   PARAMETER(DB1.Trans_Contol_AS400_Plant);
   PARAMETER(DB1.Modified_Flag);
   PARAMETER(DB1.A_R_order_Value_Total);
   PARAMETER(DB1.Billing_Activity_Type);
   PARAMETER(DB1.Block_Order_Flag);
   PARAMETER(DB1.Order_Certification_Flag);
   PARAMETER(DB1.Invoice_Order_Value_Tot);
   PARAMETER(DB1.Process_Sts_for_3C);
   PARAMETER(DB1.Order_Conf_Fax_Sts);
   PARAMETER(DB1.Manifest_Fax_Sts);
   PARAMETER(DB1.Invoice_Fax_Sts);
   PARAMETER(DB1.Transfer_in_Storage_Ind);
   PARAMETER(DB1.Email_Cust_On_Order_Ship);
   PARAMETER(DB1.Order_Emailed);
   PARAMETER(DB1.Export_Docs_Go_w_Driver);
   PARAMETER(DB1.Shipping_Temp_Code_C_F);
   PARAMETER(DB1.Broker_Order_Status);
   PARAMETER(DB1.Air_Freight_Order);
   PARAMETER(DB1.Order_Requires_Review);
   PARAMETER(DB1.OH_Load_Plan_Ready);
   PARAMETER(DB1.Export_USDA_Approved);
   PARAMETER(DB1.HPB_Ship_to_Warehouse);
   PARAMETER(DB1.OH_TF_Exempt_Code);
   PARAMETER(DB1.OH_Appt_Confirmation_Dt);
   PARAMETER(DB1.JPN_Invoice_Issuance_Date);
   PARAMETER(DB1.Load_Actual_Shipped_Date);
   PARAMETER(DB1.Load_BOL_Complete_Date);
   PARAMETER(DB1.Load_Truck_Departure_Date);
   PARAMETER(DB1.Maximum_Gross_Weight);
   PARAMETER(DB1.Time_of_Original_Entry);
   PARAMETER(DB1.OH_Appt_Confirmation_Tm);
   PARAMETER(DB1.Load_BOL_Complete_Time);
   PARAMETER(DB1.Load_Truck_Departure_Time);
   PARAMETER(DB1.Act_Frt_Reference_Amount);
   PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
   PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
   PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
   PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
   PARAMETER(DB1.Claim_Number);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);

  }

  ENDIF;

 }

 EXECUTE FUNCTION(Chg Block Order Upl HdrCH) TYPE(CHGOBJ) FILE(PUC2CPP)          AC2212473;
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.OHE_Spot_Buy);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Country_Code);
 PARAMETER(DB1.OHE_Intended_for_ExportCC);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER('Y');
 PARAMETER(DB1.Email_Sent);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 //?*** Cancel the Order if no errors.
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Chg Block Order Upl HdrCH) TYPE(CHGOBJ) FILE(PUC2CPP)          AC2212473;
 PARAMETER(DB1.Surrogate_Number);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.OHE_Spot_Buy);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Country_Code);
 PARAMETER(DB1.OHE_Intended_for_ExportCC);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER('Y');
 PARAMETER(DB1.Email_Sent);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(RTV Send Error Emails  RT) TYPE(RTVOBJ) FILE(PUC2CPP)          AC2217511;
 PARAMETER('E');
 {
  //?USER: Initialize routine

  EXECUTE FUNCTION(RTV Data Libraries     RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1165753;
  PARAMETER('DTALIB');
  PARAMETER(LCL.Library_List_Code);
  PARAMETER(NLL.@Library_List_Code);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.System Value Code is Data File Library
   IF DB1.System_Value_Code = 'DTALIB';

   // PAR.Library List Code = DB1.System Value Alpha
   PAR.Library_List_Code = DB1.System_Value_Alpha;

   // IF DB1.System Value Code is History File Library
   IF DB1.System_Value_Code = 'HISLIB';

   // PAR.@Library List Code = DB1.System Value Alpha
   PAR.@Library_List_Code = DB1.System_Value_Alpha;

   QUIT;

   ENDIF;

  }

  //?If Not PROD Then get 'TEST' Email address.
  CASE;

  // IF LCL.Library List Code is Not PRKFLIB
  IF LCL.Library_List_Code <> 'PRKFLIB';

  EXECUTE FUNCTION(RTV System Value Alpha RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1530745;
  PARAMETER('AUTBORTST');
  PARAMETER(LCL.Email_Address);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?If Not PROD Then get 'TEST' Email address.
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV System Value Alpha RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1530745;
  PARAMETER('AUTBOREML');
  PARAMETER(LCL.Email_Address);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?USER: Process Data record

  // LCL.Send Email USR = CND.No
  LCL.Send_Email_USR = 'N';

  //?** Send one email for all errors per surrogate number.
  EXECUTE FUNCTION(RTV Send Email for Err RT) TYPE(RTVOBJ) FILE(PUC5CPP)          AC2217512;
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(LCL.Email_Sent);
  PARAMETER(LCL.Email_Address);
  PARAMETER(LCL.Library_List_Code);
  PARAMETER(LCL.Send_Email_USR);
  {
   //?USER: Initialize routine

   // PAR.Email Sent = CND.No
   PAR.Email_Sent = 'N';

   // LCL.First Time Through USR = CND.Yes
   LCL.First_Time_Through_USR = 'Y';

   // PAR.Send Email USR = CND.No
   PAR.Send_Email_USR = 'N';

   EXECUTE FUNCTION(RTV Count Errors       RT) TYPE(RTVOBJ) FILE(PUC5CPP)          AC2217631;
   PARAMETER(PAR.Surrogate_Number);
   PARAMETER(LCL.Count_Records_USR);
   {
    //?USER: Initialize routine

    // LCL.Count Records        USR = CND.Zero
    LCL.Count_Records_USR = *ZERO;

    //?USER: Process Data record

    //?** Count the number of errors for a surrogate.
    // LCL.Count Records        USR = LCL.Count Records        USR + CON.1
    LCL.Count_Records_USR = LCL.Count_Records_USR + 1;

    //?USER: Exit processing

    // PAR.Count Records        USR = LCL.Count Records        USR
    PAR.Count_Records_USR = LCL.Count_Records_USR;

   }

   //?USER: Process Data record

   //?Processing for Only 1 Record Exist.
   CASE;

   // IF LCL.Count Records        USR is EQ 1
   IF LCL.Count_Records_USR = 1;

   //?Format Email Data.
   CASE;

   // IF LCL.First Time Through USR is Yes
   IF LCL.First_Time_Through_USR = 'Y';

   // LCL.First Time Through USR = CND.No
   LCL.First_Time_Through_USR = 'N';

   // PAR.Send Email USR = CND.Yes
   PAR.Send_Email_USR = 'Y';

   //?Format Email Subject Line.
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Email Subject 2 USR = CONCAT(CON.Block Order Automation Er,CON.rors,CON.*ZERO)
   LCL.Email_Subject_2_USR = 'Block Order Automation Er' + 'rors' (*ZERO);

   // LCL.Text USR 9 = DB1.Surrogate Number
   LCL.Text_USR_9 = DB1.Surrogate_Number;

   // LCL.Email Subject 2 USR = CONCAT(LCL.Email Subject 2 USR,CON.Surrogate #:,CON.1)
   LCL.Email_Subject_2_USR = LCL.Email_Subject_2_USR + 'Surrogate #:' (1);

   // LCL.Email Subject 2 USR = CONCAT(LCL.Email Subject 2 USR,LCL.Text USR 9,CON.1)
   LCL.Email_Subject_2_USR = LCL.Email_Subject_2_USR + LCL.Text_USR_9 (1);

   //?If Not PROD Then Append 'TEST' to Email Subject Line.
   CASE;

   // IF PAR.Library List Code is Not PRKFLIB
   IF PAR.Library_List_Code <> 'PRKFLIB';

   // LCL.Email Subject 2 USR = CONCAT(LCL.Email Subject 2 USR,CON.- TEST,CON.1)
   LCL.Email_Subject_2_USR = LCL.Email_Subject_2_USR + '- TEST' (1);

   ENDIF;

   ENDIF;

   //?Format Email Message 'Surrogate Number' Line.
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?** Force New Line
   // LCL.Email Message 2 USR = DB1.BOE Error Comment
   LCL.Email_Message_2_USR = DB1.BOE_Error_Comment;

   ENDIF;

   ENDIF;

   ENDIF;

   //?Processing for Multiple Records Exist.
   CASE;

   // IF LCL.Count Records        USR is GT 1
   IF LCL.Count_Records_USR > 1;

   // AND LCL.First Time Through USR is Yes
   AND LCL.First_Time_Through_USR = 'Y';

   //?Format Email Data.
   CASE;

   // IF LCL.First Time Through USR is Yes
   IF LCL.First_Time_Through_USR = 'Y';

   // LCL.First Time Through USR = CND.No
   LCL.First_Time_Through_USR = 'N';

   // PAR.Send Email USR = CND.Yes
   PAR.Send_Email_USR = 'Y';

   //?Format Email Subject Line.
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Email Subject 2 USR = CONCAT(CON.Block Order Automation Er,CON.rors,CON.*ZERO)
   LCL.Email_Subject_2_USR = 'Block Order Automation Er' + 'rors' (*ZERO);

   // LCL.Text USR 9 = DB1.Surrogate Number
   LCL.Text_USR_9 = DB1.Surrogate_Number;

   // LCL.Email Subject 2 USR = CONCAT(LCL.Email Subject 2 USR,CON.Surrogate #:,CON.1)
   LCL.Email_Subject_2_USR = LCL.Email_Subject_2_USR + 'Surrogate #:' (1);

   // LCL.Email Subject 2 USR = CONCAT(LCL.Email Subject 2 USR,LCL.Text USR 9,CON.1)
   LCL.Email_Subject_2_USR = LCL.Email_Subject_2_USR + LCL.Text_USR_9 (1);

   //?If Not PROD Then Append 'TEST' to Email Subject Line.
   CASE;

   // IF PAR.Library List Code is Not PRKFLIB
   IF PAR.Library_List_Code <> 'PRKFLIB';

   // LCL.Email Subject 2 USR = CONCAT(LCL.Email Subject 2 USR,CON.- TEST,CON.1)
   LCL.Email_Subject_2_USR = LCL.Email_Subject_2_USR + '- TEST' (1);

   ENDIF;

   ENDIF;

   //?Format Email Message 'Surrogate Number' Line.
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?** Force New Line
   // LCL.Email Message 2 USR = CONCAT(LCL.Email Message 2 USR,CON.&N,CON.1)
   LCL.Email_Message_2_USR = LCL.Email_Message_2_USR + '&N' (1);

   // LCL.Email Message 2 USR = CONCAT(LCL.Email Message 2 USR,DB1.BOE Error Comment,CON.1)
   LCL.Email_Message_2_USR = LCL.Email_Message_2_USR + DB1.BOE_Error_Comment (1);

   // LCL.Email Message 2 USR = CONCAT(LCL.Email Message 2 USR,CON..,CON.*ZERO)
   LCL.Email_Message_2_USR = LCL.Email_Message_2_USR + '.' (*ZERO);

   ENDIF;

   ENDIF;

   //?Processing for Multiple Records Exist.
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Format Email Message Additional 'Attention' Lines if Exist.
   CASE;

   // IF LCL.Count Records        USR is NE 1
   IF LCL.Count_Records_USR <> 1;

   //?Force New Line.
   // LCL.Email Message 2 USR = CONCAT(LCL.Email Message 2 USR,CON.&N,CON.1)
   LCL.Email_Message_2_USR = LCL.Email_Message_2_USR + '&N' (1);

   // LCL.Email Message 2 USR = CONCAT(LCL.Email Message 2 USR,DB1.BOE Error Comment,CON.1)
   LCL.Email_Message_2_USR = LCL.Email_Message_2_USR + DB1.BOE_Error_Comment (1);

   // LCL.Email Message 2 USR = CONCAT(LCL.Email Message 2 USR,CON..,CON.*ZERO)
   LCL.Email_Message_2_USR = LCL.Email_Message_2_USR + '.' (*ZERO);

   ENDIF;

   ENDIF;

   //?USER: Exit processing

   //?OK to Send Email?
   CASE;

   // IF PAR.Send Email USR is Yes
   IF PAR.Send_Email_USR = 'Y';

   // PAR.Email Sent = CND.Yes
   PAR.Email_Sent = 'Y';

   // Call program Exc ESNDMAIL Generic2 CL.
   CALL PROGRAM(Exc ESNDMAIL Generic2 CL) ('PUX2UPC');
   PARAMETER(PAR.Email_Address);
   PARAMETER(LCL.Email_Subject_2_USR);
   PARAMETER(LCL.Email_Message_2_USR);

   ENDIF;

  }

  //?** Update header with Email Sent
  CASE;

  // IF LCL.Email Sent is Yes
  IF LCL.Email_Sent = 'Y';

  EXECUTE FUNCTION(Chg Block Order Upl HdrCH) TYPE(CHGOBJ) FILE(PUC2CPP)          AC2212473;
  PARAMETER(DB1.Surrogate_Number);
  PARAMETER(DB1.Company_Number);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(*MISSING);
  PARAMETER(DB1.OHE_Spot_Buy);
  PARAMETER(DB1.Customer_Purchase_Order_#);
  PARAMETER(DB1.Export_Status);
  PARAMETER(DB1.Country_Code);
  PARAMETER(DB1.OHE_Intended_for_ExportCC);
  PARAMETER(DB1.Export_Docs_Go_w_Driver);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.Record_Processed);
  PARAMETER(LCL.Email_Sent);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  ENDIF;

 }

 //?USER: Exit processing

 //?Clear Qtemp work files.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program UPD Copy Order Templt2UP.
 CALL PROGRAM(UPD Copy Order Templt2UP) ('PVAUUPC');
 PARAMETER('D');

 ENDIF;

}


