// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDW3XFR
// ?Date: 14.08.2025 Time: 03:33:28
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(RTV First Order Whse   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1397882;
PARAMETER(PAR.Load_ID);
PARAMETER(*ZERO);
PARAMETER(PAR.Ship_From_Warehouse);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.TXT_field_not_needed);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 QUIT;

}


CASE;

// IF PAR.Ship From Warehouse is Warehouse Code not Blank
IF PAR.Ship_From_Warehouse <> *BLANK;

//?** 11/16/2007 LJB FP1251 Total Load Miles will be = zeros if no
//?** Miles Between Cities record exists for any leg of the journey.
//?** However, not an error if Override Total Load Miles is entered E00207
EXECUTE FUNCTION(CLC Total Load Miles   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1454116;
PARAMETER(PAR.Load_ID);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Total_Load_Miles);
PARAMETER(PAR.Ship_From_Warehouse);
PARAMETER(PAR.Override_Total_Load_Miles);
{
 //?USER: Initialize routine

 //?update exception status is set to Y if any leg of trip has no mileage
 // PAR.Update Exception Status = CND.blank
 PAR.Update_Exception_Status = *BLANK;

 // PAR.USR Stop/Drop = CON.*ZERO
 PAR.USR_Stop_Drop = *ZERO;

 // PAR.Total Load Miles = CON.*ZERO
 PAR.Total_Load_Miles = *ZERO;

 EXECUTE FUNCTION(RTV Bring Back, 2 Whse RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1467520;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Bring_Back_Miles);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?** Retrieve Override Miles                     E00207
 EXECUTE FUNCTION(RTV Total Ld Mi/Sts    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1496186;
 PARAMETER(PAR.Load_ID);
 PARAMETER(WRK.AS_Unused_Sts_1);
 PARAMETER(NLL.Total_Load_Miles);
 PARAMETER(PAR.Override_Total_Load_Miles);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?** Get Load Start warehouse city and state
 EXECUTE FUNCTION(RTV Warehouse Address  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1211418;
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(WRK.Warehouse_Description);
 PARAMETER(WRK.Address_Line_1);
 PARAMETER(WRK.Address_Line_2);
 PARAMETER(WRK.Address_Line_3);
 PARAMETER(PAR.From_City);
 PARAMETER(WRK.Zip_Postal_Code);
 PARAMETER(PAR.From_State);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?** Calc miles for loads that start in either Guymon or St Joe and
 //?** go to the other warehouse to pick up product. Put these miles
 //?** in the Total Load Miles before continuing the calcs
 //?If 2nd Pick Whse: calc miles betw whses and set from city to 2nd city
 CASE;

 // IF PAR.Warehouse Code NE WRK.BLANK
 IF PAR.Warehouse_Code <> WRK.BLANK;

 EXECUTE FUNCTION(RTV Warehouse Address  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1211418;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.Warehouse_Description);
 PARAMETER(WRK.Address_Line_1);
 PARAMETER(WRK.Address_Line_2);
 PARAMETER(WRK.Address_Line_3);
 PARAMETER(WRK.City);
 PARAMETER(WRK.Zip_Postal_Code);
 PARAMETER(WRK.State_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Call program CVT to Upper w/SpclChr XF.
 CALL PROGRAM(CVT to Upper w/SpclChr XF) ('PMREXFR');
 PARAMETER(WRK.City);
 PARAMETER(WRK.City);

 EXECUTE FUNCTION(RTV Miles Between      IF) TYPE(EXCINTFUN)                     AC1453987;
 PARAMETER(PAR.From_City);
 PARAMETER(PAR.From_State);
 PARAMETER(WRK.City);
 PARAMETER(WRK.State_Code);
 PARAMETER(PAR.Total_Load_Miles);
 {
  //?Execute internal function

  // PAR.Miles to next stop = CON.*ZERO
  PAR.Miles_to_next_stop = *ZERO;

  //?ensure cities are all caps, no punctuation
  //?usr city is From City; Ship to City is To city
  // Execute function CVT Str to Upper Alpha US.
  EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
  PARAMETER(PAR.From_City);
  PARAMETER(PAR.USR_City);
  {
   PDWEUFR:  PGM PARM(&STRIN &STROUT)

   CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
  }

  // Execute function CVT Str to Upper Alpha US.
  EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
  PARAMETER(PAR.To_City);
  PARAMETER(PAR.Ship_To_City);
  {
   PDWEUFR:  PGM PARM(&STRIN &STROUT)

   CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
  }

  //?** Rtv miles, if none, then reverse the order of cities and check again
  EXECUTE FUNCTION(RTV Miles Between      RT) TYPE(RTVOBJ) FILE(PDLFREP)          AC1453986;
  PARAMETER(PAR.USR_City);
  PARAMETER(PAR.From_State);
  PARAMETER(PAR.Ship_To_City);
  PARAMETER(PAR.To_State_State_Code);
  PARAMETER(PAR.Miles_to_next_stop);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  EXECUTE FUNCTION(RTV Miles Between      RT) TYPE(RTVOBJ) FILE(PDLFREP)          AC1453986;
  PARAMETER(PAR.Ship_To_City);
  PARAMETER(PAR.To_State_State_Code);
  PARAMETER(PAR.USR_City);
  PARAMETER(PAR.From_State);
  PARAMETER(PAR.Miles_to_next_stop);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  ENDIF;

  ENDIF;

 }

 //?** There should always be mileage from Guymon to St Joe
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PAR.Update Exception Status = CND.yes
 PAR.Update_Exception_Status = 'Y';

 //?** There should always be mileage from Guymon to St Joe
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.From City = WRK.City
 PAR.From_City = WRK.City;

 // PAR.From State = WRK.State Code
 PAR.From_State = WRK.State_Code;

 ENDIF;

 ENDIF;

 //?** Change Log and Comments for Calculate Total Miles for Load
 DO;

 //?**************************************************************************
 //?** Logic
 //?** 1.  Get 2nd warehouse code in initialize if going between Guymon
 //?** and St Joe, and set From city/state to city/state of 2nd whse.
 //?** 2.  Rtv miles between the 2 warehouses and put in total load miles.
 //?** 3.  Rtv miles between cities for each leg of the journey and add
 //?** to the Total Load Miles
 //?** 4. If any leg of the journey is missing a record in the
 //?** Miles Between Cities file, set the exception flag to "Yes"
 //?** 5.  Update the miles to next stop in the load detail record
 //?** for each leg of the journey.
 //?** 6.  If there is no exception for any journey leg, return the
 //?** Total Load Miles to the calling program.
 //?** 7. If there is an exception for any journey leg, set the
 //?** Total Load Miles to zeros and return zeros to the calling pgm.
 //?** 8. There is no error if Override Total Miles was entered.
 //?** The override will be used instead of the total load miles.
 //?**************************************************************************
 //?** E00207 LJB 08/11/2008
 //?** If "Override Total Load Miles" > zeros, use it instead of
 //?** calculating the Total Load Miles.
 //?**************************************************************************
 //?** FP1251 LJB 11/15/2007
 //?** Don't default in any mileage if no Miles To Next record,
 //?** just set Total Load Miles to zeros
 //?**************************************************************************
 //?** FP1101 LJB 04/06/2007
 //?** Get the Ship To city & state for the OHE Port Terminal
 //?** Load Header no longer contains the export information. This is
 //?** now stored in the Order Header Extension file. Change the
 //?** calc to use the sail port city to calc the miles from the
 //?** order header order number, not the load header load id.
 //?**************************************************************************
 //?** 01/18/2007 LJB Go get the export status from the Order Header
 //?** in case there is a domestic order on the same load as export
 //?** orders - so we get the correct ship to city and state
 //?**************************************************************************
 //?New 6/29/04 use db1.milestonextstop if entered
 //?update exception status is set to Y if any leg of trip has no mileage
 ENDDO;

 //?USER: Process Data record

 CASE;

 // IF DB1.Stop/Drop NE PAR.USR Stop/Drop
 IF DB1.Stop_Drop <> PAR.USR_Stop_Drop;

 // PAR.USR Stop/Drop = DB1.Stop/Drop
 PAR.USR_Stop_Drop = DB1.Stop_Drop;

 //?** If this order is an export, get sail port city/state
 DO;

 //?** 01/18/2007 LJB If is order is an export, based on the Order Header,
 //?** use the sail port city to calculate the miles between cities
 EXECUTE FUNCTION(RTV Export Status      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1449325;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Export_Status);
 {
  //?USER: Initialize routine

  // PAR.Export Status = CND.blank
  PAR.Export_Status = *BLANK;

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?** Retrieve port delivery city and state
 CASE;

 // IF PAR.Export Status is yes
 IF PAR.Export_Status = 'Y';

 EXECUTE FUNCTION(RTV OHE Ship fields    RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC1814635;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Shipping_Line);
 PARAMETER(PAR.Port_Delv_Terminal);
 PARAMETER(LCL.OHE_City);
 PARAMETER(LCL.OHE_Vessel_Airline);
 PARAMETER(LCL.OHE_Voyage_Flight);
 PARAMETER(LCL.OHE_Booking_Number);
 PARAMETER(LCL.OHE_Discharge_Port_Airprt);
 PARAMETER(LCL.OHE_Sail_Flight_Date);
 PARAMETER(LCL.OHE_Port_Cut_Date);
 PARAMETER(LCL.OHE_Arrival_Date);
 PARAMETER(LCL.OHE_Late_Delivery_Code);
 PARAMETER(LCL.OHE_Ship_Status);
 PARAMETER(LCL.OHE_Container_Number);
 PARAMETER(LCL.OHE_Comment_1);
 PARAMETER(LCL.OHE_Comment_2);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Port Delv Terminal is Not Entered
 IF PAR.Port_Delv_Terminal = *BLANK;

 //?** Get city/state for Mexico or Canada (no port city/state)
 EXECUTE FUNCTION(RTV Ship To City/State RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1454149;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.Ship_To_State_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?** Get the Ship To city & state for the OHE Port Terminal
 EXECUTE FUNCTION(RTV Shipping Line/PortsRT) TYPE(RTVOBJ) FILE(PDLCREP)          AC1447742;
 PARAMETER(PAR.Shipping_Line);
 PARAMETER(PAR.Port_Delv_Terminal);
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(WRK.Port_Address_Line_1);
 PARAMETER(WRK.Port_Address_Line_2);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(WRK.Port_Zip_Postal_Code);
 PARAMETER(WRK.Port_Phone_Number);
 PARAMETER(WRK.Port_Fax_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

 }

 ENDIF;

 //?** Retrieve port delivery city and state
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Ship To City/State RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1454149;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.Ship_To_State_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?**************************************************************************
 ENDDO;

 //?** Convert cities to upper case before verifying
 // Call program CVT to Upper w/SpclChr XF.
 CALL PROGRAM(CVT to Upper w/SpclChr XF) ('PMREXFR');
 PARAMETER(PAR.From_City);
 PARAMETER(PAR.From_City);

 // Call program CVT to Upper w/SpclChr XF.
 CALL PROGRAM(CVT to Upper w/SpclChr XF) ('PMREXFR');
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.Ship_To_City);

 EXECUTE FUNCTION(RTV Miles Between      IF) TYPE(EXCINTFUN)                     AC1453987;
 PARAMETER(PAR.From_City);
 PARAMETER(PAR.From_State);
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Miles_to_next_stop);
 {
  //?Execute internal function

  // PAR.Miles to next stop = CON.*ZERO
  PAR.Miles_to_next_stop = *ZERO;

  //?ensure cities are all caps, no punctuation
  //?usr city is From City; Ship to City is To city
  // Execute function CVT Str to Upper Alpha US.
  EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
  PARAMETER(PAR.From_City);
  PARAMETER(PAR.USR_City);
  {
   PDWEUFR:  PGM PARM(&STRIN &STROUT)

   CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
  }

  // Execute function CVT Str to Upper Alpha US.
  EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
  PARAMETER(PAR.To_City);
  PARAMETER(PAR.Ship_To_City);
  {
   PDWEUFR:  PGM PARM(&STRIN &STROUT)

   CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
  }

  //?** Rtv miles, if none, then reverse the order of cities and check again
  EXECUTE FUNCTION(RTV Miles Between      RT) TYPE(RTVOBJ) FILE(PDLFREP)          AC1453986;
  PARAMETER(PAR.USR_City);
  PARAMETER(PAR.From_State);
  PARAMETER(PAR.Ship_To_City);
  PARAMETER(PAR.To_State_State_Code);
  PARAMETER(PAR.Miles_to_next_stop);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  EXECUTE FUNCTION(RTV Miles Between      RT) TYPE(RTVOBJ) FILE(PDLFREP)          AC1453986;
  PARAMETER(PAR.Ship_To_City);
  PARAMETER(PAR.To_State_State_Code);
  PARAMETER(PAR.USR_City);
  PARAMETER(PAR.From_State);
  PARAMETER(PAR.Miles_to_next_stop);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  ENDIF;

  ENDIF;

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PAR.Miles to next stop = CON.*ZERO
 PAR.Miles_to_next_stop = *ZERO;

 ENDIF;

 //?** Update Load Detail mileage or Set exception status
 CASE;

 // IF PAR.Miles to next stop is Entered
 IF PAR.Miles_to_next_stop <> *ZERO;

 // PAR.Total Load Miles = PAR.Total Load Miles + PAR.Miles to next stop
 PAR.Total_Load_Miles = PAR.Total_Load_Miles + PAR.Miles_to_next_stop;

 //?** Update mileage in the load detail for this stop
 EXECUTE FUNCTION(CHG Mileage            CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1454202;
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Stop_Drop_Sequence_Number);
 PARAMETER(DB1.Stop_Drop);
 PARAMETER(PAR.Miles_to_next_stop);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?** Change the "To" city/state to "From" city/state for next stop calcs
 // PAR.From City = PAR.Ship To City
 PAR.From_City = PAR.Ship_To_City;

 // PAR.From State = PAR.Ship To State Code
 PAR.From_State = PAR.Ship_To_State_Code;

 //?** Update Load Detail mileage or Set exception status
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?** Set exception status - this is tested in the exit processing
 //?** Update load detail mileage with zeros for this stop
 // PAR.Update Exception Status = CND.yes
 PAR.Update_Exception_Status = 'Y';

 EXECUTE FUNCTION(CHG Mileage            CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1454202;
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Stop_Drop_Sequence_Number);
 PARAMETER(DB1.Stop_Drop);
 PARAMETER(PAR.Miles_to_next_stop);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?** Update mileage in the load detail for last stop
 EXECUTE FUNCTION(CHG Mileage            CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1454202;
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Stop_Drop_Sequence_Number);
 PARAMETER(DB1.Stop_Drop);
 PARAMETER(PAR.Miles_to_next_stop);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 //?USER: Exit processing

 CASE;

 // IF PAR.Update Exception Status is yes
 IF PAR.Update_Exception_Status = 'Y';

 // PAR.Total Load Miles = CON.*ZERO
 PAR.Total_Load_Miles = *ZERO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Total Load Miles = PAR.Total Load Miles + PAR.Bring Back Miles
 PAR.Total_Load_Miles = PAR.Total_Load_Miles + PAR.Bring_Back_Miles;

 ENDIF;

 //?** No error if total miles has been overriden     E00207
 CASE;

 // IF PAR.Override Total Load Miles is Entered
 IF PAR.Override_Total_Load_Miles <> *ZERO;

 // PAR.Update Exception Status = CND.no
 PAR.Update_Exception_Status = 'N';

 ENDIF;

}


// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Total Load Miles = CON.*ZERO
PAR.Total_Load_Miles = *ZERO;

ENDIF;

