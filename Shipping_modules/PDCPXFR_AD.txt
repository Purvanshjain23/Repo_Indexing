// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDCPXFR
// ?Date: 14.08.2025 Time: 03:34:10
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?S015890 JM 07/09/24 - Block Order automation fixes.
//?                    - Changed closedown program to N.
//?                    - for performance tuning.INVBLDALC will complete fast.
//?WI546_2 JM 04/11/24 - Block Order automation phase 2.
//?                    - Changed closedown program to Y.
//?E10457 RMC 5/10/17 use prod whse when updating pdi8cpp--> COMMENTED NOW!
//?FP1054 Changes in:Upd Deallocate PRD    RT - Order Detail Schedule  *
//?Deallocate Inventory & Production
CASE;

// IF PAR.Warehouse Type is Frozen
IF PAR.Warehouse_Type = 'FZ';

//?Deallocate Production
CASE;

// IF PAR.ATS Weight Need USR is Less than zero
IF PAR.ATS_Weight_Need_USR < *ZERO;

EXECUTE FUNCTION(Upd Deallocate PRD    RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1478086;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Base_Conv_Loss_Item);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(PAR.Quantity_Ordered);
PARAMETER(PAR.Weight_Ordered);
PARAMETER(PAR.Quantity_Scheduled);
PARAMETER(PAR.Weight_Scheduled);
PARAMETER(PAR.ATS_Quantity_Need_USR);
PARAMETER(PAR.ATS_Weight_Need_USR);
PARAMETER(PAR.Production_Date_USR);
{
 //?USER: Initialize routine

 //?C01643 8/02/11 RMC use db1.od avg piece wght instead of pdi8cpp wgt, now
 //? its being upd per order on its order dtl schedule rcd
 //?The value coming in is Negative, need to make it positive.
 // WRK.ATS Quantity Need USR = CON.-1 * PAR.ATS Quantity Need USR *
 WRK.ATS_Quantity_Need_USR = -1 * PAR.ATS_Quantity_Need_USR;

 //?FP1054 new
 EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(LCL.Production_Warehouse_Code);
 PARAMETER(LCL.Accounting_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?USER: Process Data record

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.Production Date USR is Entered
 IF PAR.Production_Date_USR <> *ZERO;

 CASE;

 // IF DB1.OD Production Date NE PAR.Production Date USR
 IF DB1.OD_Production_Date <> PAR.Production_Date_USR;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Process Record
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // PAR.OD Production Date = DB1.OD Production Date
 PAR.OD_Production_Date = DB1.OD_Production_Date;

 EXECUTE FUNCTION(RTV Type/Std Chil/Chil RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1501268;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.Warehouse_Std_Chill_Time);
 PARAMETER(PAR.Warehouse_Chill_Time);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Chilling Time
 CASE;

 // IF PAR.Warehouse Std Chill Time is yes
 IF PAR.Warehouse_Std_Chill_Time = 'Y';

 // PAR.Fresh Chilling Time = PAR.Warehouse Chill Time
 PAR.Fresh_Chilling_Time = PAR.Warehouse_Chill_Time;

 ENDIF;

 CASE;

 // IF WRK.ATS Quantity Need USR is Equal to zero
 IF WRK.ATS_Quantity_Need_USR = *ZERO;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Deallocate Production
 CASE;

 // IF DB1.OD Quantity Scheduled is Greater than zero
 IF DB1.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

 //?Determine Production Type
 CASE;

 // IF DB1.OD Production Date EQ JOB.*Job date
 IF DB1.OD_Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 // PAR.OD Production Date = JOB.*Job date
 PAR.OD_Production_Date = JOB.*Job_date;

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.OD_Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF DB1.OD Production Date GT JOB.*Job date
 IF DB1.OD_Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?De-allocate
 CASE;

 // IF DB1.OD Production Date LT JOB.*Job date
 IF DB1.OD_Production_Date < JOB.*Job_date;

 EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.OD_Production_Date);
 EXECUTE FUNCTION(Rtv AvgPcWgt/Prd/PrdAl RT) TYPE(RTVOBJ) FILE(PDI8CPP)          AC1484812;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.OD_Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.PS_Weight_Planned_Prod);
 PARAMETER(PAR.PS_Pieces_Planned_Prod);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.PS_Weight_Prod_Allocated);
 PARAMETER(PAR.PS_Pieces_Prod_Allocated);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // Total Production Weight
  PAR.PS_Weight_Planned_Prod = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
  - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Total Production Pieces
  PAR.PS_Pieces_Planned_Prod = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
  - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

 }

 //?Pieces & Weight Deallocated.
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Pieces Allocated
 WRK.Pieces_Allocated_USR = ( ( DB1.OD_Qty_Cnsmd_Pieces_Sched * PAR.Pieces_Per_Bag 'H' )
 * PAR.Bags_Per_Unit 'H' ) * -1;

 //?C01643 8/5/11 use od sched wgt on order dtl sched
 // WRK.ATS Weight Available USR = CON.-1 * DB1.OD Weight Scheduled *
 WRK.ATS_Weight_Available_USR = -1 * DB1.OD_Weight_Scheduled;

 //?Pieces & Weight Deallocated.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // ATS Weight Available USR
 WRK.ATS_Weight_Available_USR = ( DB1.OD_Qty_Cnsmd_Pieces_Sched * PAR.Unit_Weight ) * -1;

 // WRK.Pieces Allocated USR = CON.*ZERO
 WRK.Pieces_Allocated_USR = *ZERO;

 ENDIF;

 EXECUTE FUNCTION(Upd Prod Allocated    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478090;
 PARAMETER(DB1.Company_Number);
 PARAMETER('S');
 PARAMETER(JOB.*Job_date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(WRK.ATS_Weight_Available_USR);
 PARAMETER(WRK.Pieces_Allocated_USR);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER('Y');
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Prod Allocated = PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Prod_Allocated = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Prod Allocated is GT Zero
  IF PAR.PS_Pieces_Prod_Allocated > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Allocated / PAR.PS_Pieces_Prod_Allocated;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?FP1054 create consumed records
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05 20 use ord co instead of par.company which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Prod Allocated = DB1.PS Weight Prod Allocated + PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = DB1.PS_Weight_Prod_Allocated + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = DB1.PS Pieces Prod Allocated + PAR.Pieces Allocat
  PAR.PS_Pieces_Prod_Allocated = DB1.PS_Pieces_Prod_Allocated + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Allocated    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478091;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
  CASE;

  // IF PAR.Status Flag 19 Y/N is Yes
  IF PAR.Status_Flag_19_Y_N = 'Y';

  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05-2020 was par.company number which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 // WRK.ATS Quantity Need USR = WRK.ATS Quantity Need USR - DB1.OD Quantity Scheduled
 WRK.ATS_Quantity_Need_USR = WRK.ATS_Quantity_Need_USR - DB1.OD_Qty_Cnsmd_Pieces_Sched;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled - DB1.OD Quantity Scheduled
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled - DB1.OD_Qty_Cnsmd_Pieces_Sched;

 // PAR.Weight Scheduled = PAR.Quantity Scheduled * PAR.Unit Weight *Rounded
 PAR.Weight_Scheduled = PAR.Quantity_Scheduled * PAR.Unit_Weight 'H';

 //?De-allocate
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv AvgPcWgt/Prd/PrdAl RT) TYPE(RTVOBJ) FILE(PDI8CPP)          AC1484812;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.OD_Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.PS_Weight_Planned_Prod);
 PARAMETER(PAR.PS_Pieces_Planned_Prod);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.PS_Weight_Prod_Allocated);
 PARAMETER(PAR.PS_Pieces_Prod_Allocated);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // Total Production Weight
  PAR.PS_Weight_Planned_Prod = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
  - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Total Production Pieces
  PAR.PS_Pieces_Planned_Prod = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
  - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

 }

 //?Update Production Schedule
 CASE;

 // IF DB1.OD Quantity Scheduled GT WRK.ATS Quantity Need USR
 IF DB1.OD_Qty_Cnsmd_Pieces_Sched > WRK.ATS_Quantity_Need_USR;

 // PAR.OD Quantity Scheduled = DB1.OD Quantity Scheduled - WRK.ATS Quantity Need USR
 PAR.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
 - WRK.ATS_Quantity_Need_USR;

 //?Calc Weight to deallocate from order detail schedule
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Pieces Allocated
 WRK.Pieces_Allocated_USR = ( ( WRK.ATS_Quantity_Need_USR * PAR.Pieces_Per_Bag 'H' )
 * PAR.Bags_Per_Unit 'H' ) * -1;

 //?C01643 8/5/11 use od weight sched on order dtl sched
 // WRK.ATS Weight Available USR = DB1.OD Weight Scheduled * CON.-1 *
 WRK.ATS_Weight_Available_USR = DB1.OD_Weight_Scheduled * -1;

 // PAR.OD Weight Scheduled = PAR.OD Pieces Scheduled * PAR.Unit Weight *
 PAR.OD_Weight_Scheduled = PAR.OD_Qty_Cnsmd_Pieces_Sched * PAR.Unit_Weight;

 //?Calc Weight to deallocate from order detail schedule
 // IF *OTHERWISE
 IF *OTHERWISE;

 // ATS Weight Available USR
 WRK.ATS_Weight_Available_USR = ( WRK.ATS_Quantity_Need_USR * PAR.Unit_Weight ) * -1;

 // WRK.Pieces Allocated USR = CON.*ZERO
 WRK.Pieces_Allocated_USR = *ZERO;

 // PAR.OD Weight Scheduled = PAR.OD Pieces Scheduled * PAR.Unit Weight *
 PAR.OD_Weight_Scheduled = PAR.OD_Qty_Cnsmd_Pieces_Sched * PAR.Unit_Weight;

 ENDIF;

 EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.OD_Production_Date);
 PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
 PARAMETER(PAR.OD_Weight_Scheduled);
 PARAMETER(DB1.OD_Quantity_Inv_Sched);
 PARAMETER(DB1.OD_Weight_Inv_Sched);
 PARAMETER(DB1.OD_Added_to_Sched_Today);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 EXECUTE FUNCTION(Upd Prod Allocated    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478090;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.OD_Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(WRK.ATS_Weight_Available_USR);
 PARAMETER(WRK.Pieces_Allocated_USR);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER('Y');
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Prod Allocated = PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Prod_Allocated = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Prod Allocated is GT Zero
  IF PAR.PS_Pieces_Prod_Allocated > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Allocated / PAR.PS_Pieces_Prod_Allocated;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?FP1054 create consumed records
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05 20 use ord co instead of par.company which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Prod Allocated = DB1.PS Weight Prod Allocated + PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = DB1.PS_Weight_Prod_Allocated + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = DB1.PS Pieces Prod Allocated + PAR.Pieces Allocat
  PAR.PS_Pieces_Prod_Allocated = DB1.PS_Pieces_Prod_Allocated + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Allocated    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478091;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
  CASE;

  // IF PAR.Status Flag 19 Y/N is Yes
  IF PAR.Status_Flag_19_Y_N = 'Y';

  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05-2020 was par.company number which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 //?Production Date > or = Job Date, Add back BASE
 CASE;

 // IF DB1.OD Production Date GE JOB.*Job date
 IF DB1.OD_Production_Date >= JOB.*Job_date;

 //?If converted item add scheduled quantity back to base item
 CASE;

 // IF PAR.Base/Conv/Loss Item is Converted
 IF PAR.Base_Conv_Loss_Item = 'C';

 EXECUTE FUNCTION(Rtv Item Prd Yld SWYG RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1930659;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Yield);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Production Yield = PAR.Production Yield + DB1.Production Yield
  PAR.Production_Yield = PAR.Production_Yield + DB1.Production_Yield;

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Add back to the base item and remove from credit items.
 CASE;

 // IF PAR.Production Yield is Greater than zero
 IF PAR.Production_Yield > *ZERO;

 //?If piece count Item, find production avail in pieces else weight
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // PAR.PS Pieces Production Need = WRK.Pieces Allocated USR
 PAR.PS_Pieces_Production_Need = WRK.Pieces_Allocated_USR;

 //?This should be pieces * avg weight of consumed item if consuming
 //?only one base item.
 // Weight Need
 PAR.PS_Weight_Production_Need = WRK.ATS_Weight_Available_USR / ( PAR.Production_Yield
 / 100 'H' );

 //?If piece count Item, find production avail in pieces else weight
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Weight Need
 PAR.PS_Weight_Production_Need = WRK.ATS_Weight_Available_USR / ( PAR.Production_Yield
 / 100 'H' );

 // PAR.PS Pieces Production Need = CON.*ZERO
 PAR.PS_Pieces_Production_Need = *ZERO;

 ENDIF;

 CASE;

 // IF PAR.PS Pieces Production Need is NE Zeros
 IF PAR.PS_Pieces_Production_Need <> *ZERO;

 // OR PAR.PS Weight Production Need is NE Zero
 OR PAR.PS_Weight_Production_Need <> *ZERO;

 // Call program Upd Allocate Std      XF.
 CALL PROGRAM(Upd Allocate Std      XF) ('PDHNXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.OD_Production_Date);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.Warehouse_Std_Chill_Time);
 PARAMETER(PAR.Warehouse_Chill_Time);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER('OD');
 PARAMETER(PAR.PS_Weight_Production_Need);
 PARAMETER(PAR.PS_Pieces_Production_Need);

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled - WRK.ATS Quantity Need USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled - WRK.ATS_Quantity_Need_USR;

 // PAR.Weight Scheduled = PAR.Quantity Scheduled * PAR.Unit Weight *Rounded
 PAR.Weight_Scheduled = PAR.Quantity_Scheduled * PAR.Unit_Weight 'H';

 //?FP1054 save this for prod whse update outside of this CASE
 // WRK.Weight Deallocate USR = WRK.ATS Weight Available USR
 WRK.Weight_Deallocate_USR = WRK.ATS_Weight_Available_USR;

 // WRK.ATS Quantity Need USR = CON.*ZERO
 WRK.ATS_Quantity_Need_USR = *ZERO;

 //?Update Production Schedule
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Calc Weight to deallocate from order detail schedule
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Pieces Allocated
 WRK.Pieces_Allocated_USR = ( ( DB1.OD_Qty_Cnsmd_Pieces_Sched * PAR.Pieces_Per_Bag )
 * PAR.Bags_Per_Unit ) * -1;

 //?C01643 use db1 weight sched
 // WRK.ATS Weight Available USR = DB1.OD Weight Scheduled * CON.-1 *
 WRK.ATS_Weight_Available_USR = DB1.OD_Weight_Scheduled * -1;

 //?Calc Weight to deallocate from order detail schedule
 // IF *OTHERWISE
 IF *OTHERWISE;

 // ATS Weight Available USR
 WRK.ATS_Weight_Available_USR = DB1.OD_Weight_Scheduled * -1;

 // WRK.Pieces Allocated USR = CON.*ZERO
 WRK.Pieces_Allocated_USR = *ZERO;

 ENDIF;

 EXECUTE FUNCTION(Upd Prod Allocated    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478090;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.OD_Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(WRK.ATS_Weight_Available_USR);
 PARAMETER(WRK.Pieces_Allocated_USR);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER('Y');
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Prod Allocated = PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Prod_Allocated = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Prod Allocated is GT Zero
  IF PAR.PS_Pieces_Prod_Allocated > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Allocated / PAR.PS_Pieces_Prod_Allocated;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?FP1054 create consumed records
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05 20 use ord co instead of par.company which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Prod Allocated = DB1.PS Weight Prod Allocated + PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = DB1.PS_Weight_Prod_Allocated + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = DB1.PS Pieces Prod Allocated + PAR.Pieces Allocat
  PAR.PS_Pieces_Prod_Allocated = DB1.PS_Pieces_Prod_Allocated + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Allocated    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478091;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
  CASE;

  // IF PAR.Status Flag 19 Y/N is Yes
  IF PAR.Status_Flag_19_Y_N = 'Y';

  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05-2020 was par.company number which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 //?Production Date > or = Job Date, Add back Base
 CASE;

 // IF DB1.OD Production Date GE JOB.*Job date
 IF DB1.OD_Production_Date >= JOB.*Job_date;

 //?If converted item add scheduled quantity back to base item
 CASE;

 // IF PAR.Base/Conv/Loss Item is Converted
 IF PAR.Base_Conv_Loss_Item = 'C';

 EXECUTE FUNCTION(Rtv Item Prd Yld SWYG RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1930659;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Yield);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Production Yield = PAR.Production Yield + DB1.Production Yield
  PAR.Production_Yield = PAR.Production_Yield + DB1.Production_Yield;

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Add back to the base item and remove from credit items.
 CASE;

 // IF PAR.Production Yield is Greater than zero
 IF PAR.Production_Yield > *ZERO;

 //?If piece count Item, find production avail in pieces else weight
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // PAR.PS Pieces Production Need = WRK.Pieces Allocated USR
 PAR.PS_Pieces_Production_Need = WRK.Pieces_Allocated_USR;

 // Weight Need
 PAR.PS_Weight_Production_Need = WRK.ATS_Weight_Available_USR / ( PAR.Production_Yield
 / 100 'H' ) 'H';

 //?If piece count Item, find production avail in pieces else weight
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Weight Need
 PAR.PS_Weight_Production_Need = WRK.ATS_Weight_Available_USR / ( PAR.Production_Yield
 / 100 'H' ) 'H';

 // PAR.PS Pieces Production Need = CON.*ZERO
 PAR.PS_Pieces_Production_Need = *ZERO;

 ENDIF;

 CASE;

 // IF PAR.PS Pieces Production Need is NE Zeros
 IF PAR.PS_Pieces_Production_Need <> *ZERO;

 // OR PAR.PS Weight Production Need is NE Zero
 OR PAR.PS_Weight_Production_Need <> *ZERO;

 // Call program Upd Allocate Std      XF.
 CALL PROGRAM(Upd Allocate Std      XF) ('PDHNXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.OD_Production_Date);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.Warehouse_Std_Chill_Time);
 PARAMETER(PAR.Warehouse_Chill_Time);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER('OD');
 PARAMETER(PAR.PS_Weight_Production_Need);
 PARAMETER(PAR.PS_Pieces_Production_Need);

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 // WRK.ATS Quantity Need USR = WRK.ATS Quantity Need USR - DB1.OD Quantity Scheduled
 WRK.ATS_Quantity_Need_USR = WRK.ATS_Quantity_Need_USR - DB1.OD_Qty_Cnsmd_Pieces_Sched;

 CASE;

 // IF DB1.OD Quantity Inv Sched is Equal to zero
 IF DB1.OD_Quantity_Inv_Sched = *ZERO;

 EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.OD_Production_Date);
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.OD_Production_Date);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.OD_Quantity_Inv_Sched);
 PARAMETER(DB1.OD_Weight_Inv_Sched);
 PARAMETER(DB1.OD_Added_to_Sched_Today);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled - DB1.OD Quantity Scheduled
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled - DB1.OD_Qty_Cnsmd_Pieces_Sched;

 // PAR.Weight Scheduled = PAR.Quantity Scheduled * PAR.Unit Weight *
 PAR.Weight_Scheduled = PAR.Quantity_Scheduled * PAR.Unit_Weight;

 //?FP1054 save this for prod whse update outside of this CASE
 // WRK.Weight Deallocate USR = WRK.ATS Weight Available USR
 WRK.Weight_Deallocate_USR = WRK.ATS_Weight_Available_USR;

 ENDIF;

 //?FP1054 New
 CASE;

 // IF PAR.Base/Conv/Loss Item is Base
 IF PAR.Base_Conv_Loss_Item = 'B';

 //?FP1054  Reduce order's warehouse standard prod too & prod whse txfr
 CASE;

 // IF PAR.Warehouse Code NE LCL.Production Warehouse Code
 IF PAR.Warehouse_Code <> LCL.Production_Warehouse_Code;

 //?use order's warehouse and company
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(DB1.OD_Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(WRK.Pieces_Allocated_USR);
 PARAMETER(WRK.Weight_Deallocate_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Standard = PAR.Weight Scheduled
  PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.PS Weight Standard is NE Zero
  IF PAR.PS_Weight_Standard <> *ZERO;

  // OR PAR.PS Pieces Standard is NE Zeros
  OR PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
  PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
 }

 //?Move prod that was alloc to order's warehouse back to prod whse's std
 EXECUTE FUNCTION(Upd Prod Whse Txfr    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1933130;
 PARAMETER(LCL.Accounting_Company);
 PARAMETER(PAR.Production_Type);
 PARAMETER(DB1.OD_Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Production_Warehouse_Code);
 PARAMETER(WRK.Weight_Deallocate_USR);
 PARAMETER(WRK.Pieces_Allocated_USR);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER('Y');
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Whse Tfr Adj = PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Whse Tfr Adj is GT Zero
  IF PAR.PS_Pieces_Whs_Tfr_Adj > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Whs_Tfr_Adj / PAR.PS_Pieces_Whs_Tfr_Adj;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //? not necessary here ...
  //?USER: Process Data record

  // PAR.PS Weight Whse Tfr Adj = DB1.PS Weight Whse Tfr Adj + PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = DB1.PS_Weight_Whs_Tfr_Adj + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = DB1.PS Pieces Whse Tfr Adj + PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = DB1.PS_Pieces_Whs_Tfr_Adj + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Whse Txfr    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1933131;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //? not necessary here ...
  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
 }

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

}


ENDIF;

//?**** NEW ****
//?Deallocate Inventory
CASE;

// IF PAR.ATS Quantity Need USR is Less than zero
IF PAR.ATS_Quantity_Need_USR < *ZERO;

EXECUTE FUNCTION(UPD Deallocate Inv    IF) TYPE(EXCINTFUN)                      AC1478093;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.Quantity_Ordered);
PARAMETER(PAR.Weight_Ordered);
PARAMETER(PAR.Quantity_Scheduled);
PARAMETER(PAR.Weight_Scheduled);
PARAMETER(PAR.ATS_Quantity_Need_USR);
PARAMETER(PAR.ATS_Weight_Need_USR);
PARAMETER(PAR.Production_Date_USR);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.Warehouse_Code);
{
 //?Execute internal function

 EXECUTE FUNCTION(UPD Deallocate Inv    RT) TYPE(RTVOBJ) FILE(POB5CPP)           AC1647008;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Quantity_Ordered);
 PARAMETER(PAR.Weight_Ordered);
 PARAMETER(PAR.Quantity_Scheduled);
 PARAMETER(PAR.Weight_Scheduled);
 PARAMETER(PAR.ATS_Quantity_Need_USR);
 PARAMETER(PAR.ATS_Weight_Need_USR);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(PAR.Production_Date_USR);
 {
  //?USER: Process Data record

  // PGM.*Record selected = CND.*YES
  PGM.*Record_selected = 'Y';

  CASE;

  // IF PAR.Production Date USR is Entered
  IF PAR.Production_Date_USR <> *ZERO;

  CASE;

  // IF DB1.OD Production Date NE PAR.Production Date USR
  IF DB1.OD_Production_Date <> PAR.Production_Date_USR;

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  ENDIF;

  //?Process Record
  CASE;

  // IF PGM.*Record selected is *YES
  IF PGM.*Record_selected = 'Y';

  //?Deallocate Inventory
  CASE;

  // IF PAR.ATS Quantity Need USR is Less than zero
  IF PAR.ATS_Quantity_Need_USR < *ZERO;

  CASE;

  // IF DB1.OD Weight Inv Sched is Greater than zero
  IF DB1.OD_Weight_Inv_Sched > *ZERO;

  // Weight Deallocate USR
  PAR.Weight_Deallocate_USR = DB1.OD_Weight_Inv_Sched * -1;

  // Quantity Deallocate USR
  PAR.Quantity_Deallocated_USR = DB1.OD_Quantity_Inv_Sched * -1;

  //?Update Inventory Allocated.
  CASE;

  // IF PAR.Weight Deallocate USR LE PAR.ATS Weight Need USR
  IF PAR.Weight_Deallocate_USR <= PAR.ATS_Weight_Need_USR;

  EXECUTE FUNCTION(Upd Inv Allocated     RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1407229;
  PARAMETER(PAR.Company_Number);
  PARAMETER('S');
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.ATS_Weight_Need_USR);
  PARAMETER(PAR.ATS_Quantity_Need_USR);
  {
   //?USER: Process Data record

   // PAR.PS Weight Inv Allocated = DB1.PS Weight Inv Allocated + PAR.Weight Allocated
   PAR.PS_Weight_Inv_Allocated = DB1.PS_Weight_Inv_Allocated + PAR.Weight_Allocated_USR;

   //?PS Pieces Inv Allocated
   CASE;

   // IF PAR.Piece Count Item is yes
   IF PAR.Piece_Count_Item = 'Y';

   // Pieces Inv Allocated
   PAR.PS_Pieces_Inv_Allocated = DB1.PS_Pieces_Inv_Allocated + ( PAR.Quantity_Allocated_USR *
   ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit 'H' ) 'H' );

   //?PS Pieces Inv Allocated
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.PS Pieces Inv Allocated = CON.*ZERO
   PAR.PS_Pieces_Inv_Allocated = *ZERO;

   ENDIF;

   EXECUTE FUNCTION(Chg Inv Allocated     CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1407230;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  EXECUTE FUNCTION(Upd Qty/Wgt Inv Alc   RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1453897;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Ship_Date_USR);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.ATS_Quantity_Need_USR);
  PARAMETER(PAR.ATS_Weight_Need_USR);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.Quantity_Allocated_USR);
   PARAMETER(PAR.Weight_Allocated_USR);
   PARAMETER(PAR.OD_Quantity_Unused_1);
   PARAMETER(PAR.OD_Unused_weight_1);
   PARAMETER(PAR.OD_Added_to_Sched_Today);
   PARAMETER(PAR.OD_Reallocate_Sts);
   PARAMETER(PAR.OD_Status_Unused_3);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?USER: Process Data record

   // PAR.OD Quantity Inv Sched = DB1.OD Quantity Inv Sched + PAR.Quantity Allocated U
   PAR.OD_Quantity_Inv_Sched = DB1.OD_Quantity_Inv_Sched + PAR.Quantity_Allocated_USR;

   // PAR.OD Weight Inv Sched = DB1.OD Weight Inv Sched + PAR.Weight Allocated USR
   PAR.OD_Weight_Inv_Sched = DB1.OD_Weight_Inv_Sched + PAR.Weight_Allocated_USR;

   CASE;

   // IF PAR.OD Quantity Inv Sched is LE Zero
   IF PAR.OD_Quantity_Inv_Sched <= *ZERO;

   EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg Qty/Wgt Inv Alc) TYPE(CHGOBJ) FILE(PDKNCPP)                AC1453898;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.OD_Quantity_Inv_Sched);
   PARAMETER(PAR.OD_Weight_Inv_Sched);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  // PAR.OD Weight Inv Sched = DB1.OD Weight Inv Sched + PAR.ATS Weight Need USR
  PAR.OD_Weight_Inv_Sched = DB1.OD_Weight_Inv_Sched + PAR.ATS_Weight_Need_USR;

  // PAR.OD Quantity Inv Sched = DB1.OD Quantity Inv Sched + PAR.ATS Quantity Need USR
  PAR.OD_Quantity_Inv_Sched = DB1.OD_Quantity_Inv_Sched + PAR.ATS_Quantity_Need_USR;

  CASE;

  // IF PAR.OD Quantity Inv Sched is LE Zero
  IF PAR.OD_Quantity_Inv_Sched <= *ZERO;

  EXECUTE FUNCTION(Del Ord Dtl Sch-Inv   DL) TYPE(DLTOBJ) FILE(POB5CPP)           AC1647003;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Chg Ord Dtl Sch-Inv   CH) TYPE(CHGOBJ) FILE(POB5CPP)           AC1647005;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  PARAMETER(PAR.Ship_Date_USR);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.OD_Quantity_Inv_Sched);
  PARAMETER(PAR.OD_Weight_Inv_Sched);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

  // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
  PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

  // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
  PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

  //?Update Inventory Allocated.
  // IF PAR.Weight Deallocate USR GT PAR.ATS Weight Need USR
  IF PAR.Weight_Deallocate_USR > PAR.ATS_Weight_Need_USR;

  EXECUTE FUNCTION(Upd Inv Allocated     RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1407229;
  PARAMETER(PAR.Company_Number);
  PARAMETER('S');
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.Weight_Deallocate_USR);
  PARAMETER(PAR.Quantity_Deallocated_USR);
  {
   //?USER: Process Data record

   // PAR.PS Weight Inv Allocated = DB1.PS Weight Inv Allocated + PAR.Weight Allocated
   PAR.PS_Weight_Inv_Allocated = DB1.PS_Weight_Inv_Allocated + PAR.Weight_Allocated_USR;

   //?PS Pieces Inv Allocated
   CASE;

   // IF PAR.Piece Count Item is yes
   IF PAR.Piece_Count_Item = 'Y';

   // Pieces Inv Allocated
   PAR.PS_Pieces_Inv_Allocated = DB1.PS_Pieces_Inv_Allocated + ( PAR.Quantity_Allocated_USR *
   ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit 'H' ) 'H' );

   //?PS Pieces Inv Allocated
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.PS Pieces Inv Allocated = CON.*ZERO
   PAR.PS_Pieces_Inv_Allocated = *ZERO;

   ENDIF;

   EXECUTE FUNCTION(Chg Inv Allocated     CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1407230;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  EXECUTE FUNCTION(Upd Qty/Wgt Inv Alc   RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1453897;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(JOB.*Job_date);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Deallocated_USR);
  PARAMETER(PAR.Weight_Deallocate_USR);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.Quantity_Allocated_USR);
   PARAMETER(PAR.Weight_Allocated_USR);
   PARAMETER(PAR.OD_Quantity_Unused_1);
   PARAMETER(PAR.OD_Unused_weight_1);
   PARAMETER(PAR.OD_Added_to_Sched_Today);
   PARAMETER(PAR.OD_Reallocate_Sts);
   PARAMETER(PAR.OD_Status_Unused_3);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?USER: Process Data record

   // PAR.OD Quantity Inv Sched = DB1.OD Quantity Inv Sched + PAR.Quantity Allocated U
   PAR.OD_Quantity_Inv_Sched = DB1.OD_Quantity_Inv_Sched + PAR.Quantity_Allocated_USR;

   // PAR.OD Weight Inv Sched = DB1.OD Weight Inv Sched + PAR.Weight Allocated USR
   PAR.OD_Weight_Inv_Sched = DB1.OD_Weight_Inv_Sched + PAR.Weight_Allocated_USR;

   CASE;

   // IF PAR.OD Quantity Inv Sched is LE Zero
   IF PAR.OD_Quantity_Inv_Sched <= *ZERO;

   EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg Qty/Wgt Inv Alc) TYPE(CHGOBJ) FILE(PDKNCPP)                AC1453898;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.OD_Quantity_Inv_Sched);
   PARAMETER(PAR.OD_Weight_Inv_Sched);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  //?** UPDATE INVENTORY SCHEDULED **
  // PAR.OD Weight Inv Sched = DB1.OD Weight Inv Sched + PAR.Weight Deallocate USR
  PAR.OD_Weight_Inv_Sched = DB1.OD_Weight_Inv_Sched + PAR.Weight_Deallocate_USR;

  // PAR.OD Quantity Inv Sched = DB1.OD Quantity Inv Sched + PAR.Quantity Deallocated USR
  PAR.OD_Quantity_Inv_Sched = DB1.OD_Quantity_Inv_Sched + PAR.Quantity_Deallocated_USR;

  CASE;

  // IF PAR.OD Quantity Inv Sched is LE Zero
  IF PAR.OD_Quantity_Inv_Sched <= *ZERO;

  EXECUTE FUNCTION(Del Ord Dtl Sch-Inv   DL) TYPE(DLTOBJ) FILE(POB5CPP)           AC1647003;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Chg Ord Dtl Sch-Inv   CH) TYPE(CHGOBJ) FILE(POB5CPP)           AC1647005;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  PARAMETER(PAR.Ship_Date_USR);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.OD_Quantity_Inv_Sched);
  PARAMETER(PAR.OD_Weight_Inv_Sched);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

  // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.Weight Deallocate USR
  PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.Weight_Deallocate_USR;

  // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.Quantity Deallocated USR
  PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.Quantity_Deallocated_USR;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
  PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

  // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
  PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 }

}


ENDIF;

//?*************
//?Deallocate Inventory & Production
// IF PAR.Warehouse Type is Fresh
IF PAR.Warehouse_Type = 'FR';

//?Deallocate Production
CASE;

// IF PAR.ATS Weight Need USR is Less than zero
IF PAR.ATS_Weight_Need_USR < *ZERO;

EXECUTE FUNCTION(Upd Deallocate PRD    RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1478086;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Base_Conv_Loss_Item);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(PAR.Quantity_Ordered);
PARAMETER(PAR.Weight_Ordered);
PARAMETER(PAR.Quantity_Scheduled);
PARAMETER(PAR.Weight_Scheduled);
PARAMETER(PAR.ATS_Quantity_Need_USR);
PARAMETER(PAR.ATS_Weight_Need_USR);
PARAMETER(PAR.Production_Date_USR);
{
 //?USER: Initialize routine

 //?C01643 8/02/11 RMC use db1.od avg piece wght instead of pdi8cpp wgt, now
 //? its being upd per order on its order dtl schedule rcd
 //?The value coming in is Negative, need to make it positive.
 // WRK.ATS Quantity Need USR = CON.-1 * PAR.ATS Quantity Need USR *
 WRK.ATS_Quantity_Need_USR = -1 * PAR.ATS_Quantity_Need_USR;

 //?FP1054 new
 EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(LCL.Production_Warehouse_Code);
 PARAMETER(LCL.Accounting_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?USER: Process Data record

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.Production Date USR is Entered
 IF PAR.Production_Date_USR <> *ZERO;

 CASE;

 // IF DB1.OD Production Date NE PAR.Production Date USR
 IF DB1.OD_Production_Date <> PAR.Production_Date_USR;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Process Record
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // PAR.OD Production Date = DB1.OD Production Date
 PAR.OD_Production_Date = DB1.OD_Production_Date;

 EXECUTE FUNCTION(RTV Type/Std Chil/Chil RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1501268;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.Warehouse_Std_Chill_Time);
 PARAMETER(PAR.Warehouse_Chill_Time);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Chilling Time
 CASE;

 // IF PAR.Warehouse Std Chill Time is yes
 IF PAR.Warehouse_Std_Chill_Time = 'Y';

 // PAR.Fresh Chilling Time = PAR.Warehouse Chill Time
 PAR.Fresh_Chilling_Time = PAR.Warehouse_Chill_Time;

 ENDIF;

 CASE;

 // IF WRK.ATS Quantity Need USR is Equal to zero
 IF WRK.ATS_Quantity_Need_USR = *ZERO;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Deallocate Production
 CASE;

 // IF DB1.OD Quantity Scheduled is Greater than zero
 IF DB1.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

 //?Determine Production Type
 CASE;

 // IF DB1.OD Production Date EQ JOB.*Job date
 IF DB1.OD_Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 // PAR.OD Production Date = JOB.*Job date
 PAR.OD_Production_Date = JOB.*Job_date;

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.OD_Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF DB1.OD Production Date GT JOB.*Job date
 IF DB1.OD_Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?De-allocate
 CASE;

 // IF DB1.OD Production Date LT JOB.*Job date
 IF DB1.OD_Production_Date < JOB.*Job_date;

 EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.OD_Production_Date);
 EXECUTE FUNCTION(Rtv AvgPcWgt/Prd/PrdAl RT) TYPE(RTVOBJ) FILE(PDI8CPP)          AC1484812;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.OD_Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.PS_Weight_Planned_Prod);
 PARAMETER(PAR.PS_Pieces_Planned_Prod);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.PS_Weight_Prod_Allocated);
 PARAMETER(PAR.PS_Pieces_Prod_Allocated);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // Total Production Weight
  PAR.PS_Weight_Planned_Prod = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
  - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Total Production Pieces
  PAR.PS_Pieces_Planned_Prod = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
  - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

 }

 //?Pieces & Weight Deallocated.
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Pieces Allocated
 WRK.Pieces_Allocated_USR = ( ( DB1.OD_Qty_Cnsmd_Pieces_Sched * PAR.Pieces_Per_Bag 'H' )
 * PAR.Bags_Per_Unit 'H' ) * -1;

 //?C01643 8/5/11 use od sched wgt on order dtl sched
 // WRK.ATS Weight Available USR = CON.-1 * DB1.OD Weight Scheduled *
 WRK.ATS_Weight_Available_USR = -1 * DB1.OD_Weight_Scheduled;

 //?Pieces & Weight Deallocated.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // ATS Weight Available USR
 WRK.ATS_Weight_Available_USR = ( DB1.OD_Qty_Cnsmd_Pieces_Sched * PAR.Unit_Weight ) * -1;

 // WRK.Pieces Allocated USR = CON.*ZERO
 WRK.Pieces_Allocated_USR = *ZERO;

 ENDIF;

 EXECUTE FUNCTION(Upd Prod Allocated    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478090;
 PARAMETER(DB1.Company_Number);
 PARAMETER('S');
 PARAMETER(JOB.*Job_date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(WRK.ATS_Weight_Available_USR);
 PARAMETER(WRK.Pieces_Allocated_USR);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER('Y');
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Prod Allocated = PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Prod_Allocated = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Prod Allocated is GT Zero
  IF PAR.PS_Pieces_Prod_Allocated > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Allocated / PAR.PS_Pieces_Prod_Allocated;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?FP1054 create consumed records
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05 20 use ord co instead of par.company which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Prod Allocated = DB1.PS Weight Prod Allocated + PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = DB1.PS_Weight_Prod_Allocated + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = DB1.PS Pieces Prod Allocated + PAR.Pieces Allocat
  PAR.PS_Pieces_Prod_Allocated = DB1.PS_Pieces_Prod_Allocated + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Allocated    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478091;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
  CASE;

  // IF PAR.Status Flag 19 Y/N is Yes
  IF PAR.Status_Flag_19_Y_N = 'Y';

  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05-2020 was par.company number which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 // WRK.ATS Quantity Need USR = WRK.ATS Quantity Need USR - DB1.OD Quantity Scheduled
 WRK.ATS_Quantity_Need_USR = WRK.ATS_Quantity_Need_USR - DB1.OD_Qty_Cnsmd_Pieces_Sched;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled - DB1.OD Quantity Scheduled
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled - DB1.OD_Qty_Cnsmd_Pieces_Sched;

 // PAR.Weight Scheduled = PAR.Quantity Scheduled * PAR.Unit Weight *Rounded
 PAR.Weight_Scheduled = PAR.Quantity_Scheduled * PAR.Unit_Weight 'H';

 //?De-allocate
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv AvgPcWgt/Prd/PrdAl RT) TYPE(RTVOBJ) FILE(PDI8CPP)          AC1484812;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.OD_Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.PS_Weight_Planned_Prod);
 PARAMETER(PAR.PS_Pieces_Planned_Prod);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.PS_Weight_Prod_Allocated);
 PARAMETER(PAR.PS_Pieces_Prod_Allocated);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // Total Production Weight
  PAR.PS_Weight_Planned_Prod = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
  - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Total Production Pieces
  PAR.PS_Pieces_Planned_Prod = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
  - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

 }

 //?Update Production Schedule
 CASE;

 // IF DB1.OD Quantity Scheduled GT WRK.ATS Quantity Need USR
 IF DB1.OD_Qty_Cnsmd_Pieces_Sched > WRK.ATS_Quantity_Need_USR;

 // PAR.OD Quantity Scheduled = DB1.OD Quantity Scheduled - WRK.ATS Quantity Need USR
 PAR.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
 - WRK.ATS_Quantity_Need_USR;

 //?Calc Weight to deallocate from order detail schedule
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Pieces Allocated
 WRK.Pieces_Allocated_USR = ( ( WRK.ATS_Quantity_Need_USR * PAR.Pieces_Per_Bag 'H' )
 * PAR.Bags_Per_Unit 'H' ) * -1;

 //?C01643 8/5/11 use od weight sched on order dtl sched
 // WRK.ATS Weight Available USR = DB1.OD Weight Scheduled * CON.-1 *
 WRK.ATS_Weight_Available_USR = DB1.OD_Weight_Scheduled * -1;

 // PAR.OD Weight Scheduled = PAR.OD Pieces Scheduled * PAR.Unit Weight *
 PAR.OD_Weight_Scheduled = PAR.OD_Qty_Cnsmd_Pieces_Sched * PAR.Unit_Weight;

 //?Calc Weight to deallocate from order detail schedule
 // IF *OTHERWISE
 IF *OTHERWISE;

 // ATS Weight Available USR
 WRK.ATS_Weight_Available_USR = ( WRK.ATS_Quantity_Need_USR * PAR.Unit_Weight ) * -1;

 // WRK.Pieces Allocated USR = CON.*ZERO
 WRK.Pieces_Allocated_USR = *ZERO;

 // PAR.OD Weight Scheduled = PAR.OD Pieces Scheduled * PAR.Unit Weight *
 PAR.OD_Weight_Scheduled = PAR.OD_Qty_Cnsmd_Pieces_Sched * PAR.Unit_Weight;

 ENDIF;

 EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.OD_Production_Date);
 PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
 PARAMETER(PAR.OD_Weight_Scheduled);
 PARAMETER(DB1.OD_Quantity_Inv_Sched);
 PARAMETER(DB1.OD_Weight_Inv_Sched);
 PARAMETER(DB1.OD_Added_to_Sched_Today);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 EXECUTE FUNCTION(Upd Prod Allocated    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478090;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.OD_Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(WRK.ATS_Weight_Available_USR);
 PARAMETER(WRK.Pieces_Allocated_USR);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER('Y');
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Prod Allocated = PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Prod_Allocated = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Prod Allocated is GT Zero
  IF PAR.PS_Pieces_Prod_Allocated > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Allocated / PAR.PS_Pieces_Prod_Allocated;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?FP1054 create consumed records
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05 20 use ord co instead of par.company which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Prod Allocated = DB1.PS Weight Prod Allocated + PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = DB1.PS_Weight_Prod_Allocated + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = DB1.PS Pieces Prod Allocated + PAR.Pieces Allocat
  PAR.PS_Pieces_Prod_Allocated = DB1.PS_Pieces_Prod_Allocated + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Allocated    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478091;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
  CASE;

  // IF PAR.Status Flag 19 Y/N is Yes
  IF PAR.Status_Flag_19_Y_N = 'Y';

  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05-2020 was par.company number which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 //?Production Date > or = Job Date, Add back BASE
 CASE;

 // IF DB1.OD Production Date GE JOB.*Job date
 IF DB1.OD_Production_Date >= JOB.*Job_date;

 //?If converted item add scheduled quantity back to base item
 CASE;

 // IF PAR.Base/Conv/Loss Item is Converted
 IF PAR.Base_Conv_Loss_Item = 'C';

 EXECUTE FUNCTION(Rtv Item Prd Yld SWYG RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1930659;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Yield);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Production Yield = PAR.Production Yield + DB1.Production Yield
  PAR.Production_Yield = PAR.Production_Yield + DB1.Production_Yield;

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Add back to the base item and remove from credit items.
 CASE;

 // IF PAR.Production Yield is Greater than zero
 IF PAR.Production_Yield > *ZERO;

 //?If piece count Item, find production avail in pieces else weight
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // PAR.PS Pieces Production Need = WRK.Pieces Allocated USR
 PAR.PS_Pieces_Production_Need = WRK.Pieces_Allocated_USR;

 //?This should be pieces * avg weight of consumed item if consuming
 //?only one base item.
 // Weight Need
 PAR.PS_Weight_Production_Need = WRK.ATS_Weight_Available_USR / ( PAR.Production_Yield
 / 100 'H' );

 //?If piece count Item, find production avail in pieces else weight
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Weight Need
 PAR.PS_Weight_Production_Need = WRK.ATS_Weight_Available_USR / ( PAR.Production_Yield
 / 100 'H' );

 // PAR.PS Pieces Production Need = CON.*ZERO
 PAR.PS_Pieces_Production_Need = *ZERO;

 ENDIF;

 CASE;

 // IF PAR.PS Pieces Production Need is NE Zeros
 IF PAR.PS_Pieces_Production_Need <> *ZERO;

 // OR PAR.PS Weight Production Need is NE Zero
 OR PAR.PS_Weight_Production_Need <> *ZERO;

 // Call program Upd Allocate Std      XF.
 CALL PROGRAM(Upd Allocate Std      XF) ('PDHNXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.OD_Production_Date);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.Warehouse_Std_Chill_Time);
 PARAMETER(PAR.Warehouse_Chill_Time);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER('OD');
 PARAMETER(PAR.PS_Weight_Production_Need);
 PARAMETER(PAR.PS_Pieces_Production_Need);

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled - WRK.ATS Quantity Need USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled - WRK.ATS_Quantity_Need_USR;

 // PAR.Weight Scheduled = PAR.Quantity Scheduled * PAR.Unit Weight *Rounded
 PAR.Weight_Scheduled = PAR.Quantity_Scheduled * PAR.Unit_Weight 'H';

 //?FP1054 save this for prod whse update outside of this CASE
 // WRK.Weight Deallocate USR = WRK.ATS Weight Available USR
 WRK.Weight_Deallocate_USR = WRK.ATS_Weight_Available_USR;

 // WRK.ATS Quantity Need USR = CON.*ZERO
 WRK.ATS_Quantity_Need_USR = *ZERO;

 //?Update Production Schedule
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Calc Weight to deallocate from order detail schedule
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Pieces Allocated
 WRK.Pieces_Allocated_USR = ( ( DB1.OD_Qty_Cnsmd_Pieces_Sched * PAR.Pieces_Per_Bag )
 * PAR.Bags_Per_Unit ) * -1;

 //?C01643 use db1 weight sched
 // WRK.ATS Weight Available USR = DB1.OD Weight Scheduled * CON.-1 *
 WRK.ATS_Weight_Available_USR = DB1.OD_Weight_Scheduled * -1;

 //?Calc Weight to deallocate from order detail schedule
 // IF *OTHERWISE
 IF *OTHERWISE;

 // ATS Weight Available USR
 WRK.ATS_Weight_Available_USR = DB1.OD_Weight_Scheduled * -1;

 // WRK.Pieces Allocated USR = CON.*ZERO
 WRK.Pieces_Allocated_USR = *ZERO;

 ENDIF;

 EXECUTE FUNCTION(Upd Prod Allocated    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478090;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.OD_Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(WRK.ATS_Weight_Available_USR);
 PARAMETER(WRK.Pieces_Allocated_USR);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER('Y');
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Prod Allocated = PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Prod_Allocated = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Prod Allocated is GT Zero
  IF PAR.PS_Pieces_Prod_Allocated > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Allocated / PAR.PS_Pieces_Prod_Allocated;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?FP1054 create consumed records
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05 20 use ord co instead of par.company which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Prod Allocated = DB1.PS Weight Prod Allocated + PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = DB1.PS_Weight_Prod_Allocated + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = DB1.PS Pieces Prod Allocated + PAR.Pieces Allocat
  PAR.PS_Pieces_Prod_Allocated = DB1.PS_Pieces_Prod_Allocated + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Allocated    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478091;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
  CASE;

  // IF PAR.Status Flag 19 Y/N is Yes
  IF PAR.Status_Flag_19_Y_N = 'Y';

  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05-2020 was par.company number which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 //?Production Date > or = Job Date, Add back Base
 CASE;

 // IF DB1.OD Production Date GE JOB.*Job date
 IF DB1.OD_Production_Date >= JOB.*Job_date;

 //?If converted item add scheduled quantity back to base item
 CASE;

 // IF PAR.Base/Conv/Loss Item is Converted
 IF PAR.Base_Conv_Loss_Item = 'C';

 EXECUTE FUNCTION(Rtv Item Prd Yld SWYG RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1930659;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Yield);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Production Yield = PAR.Production Yield + DB1.Production Yield
  PAR.Production_Yield = PAR.Production_Yield + DB1.Production_Yield;

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Add back to the base item and remove from credit items.
 CASE;

 // IF PAR.Production Yield is Greater than zero
 IF PAR.Production_Yield > *ZERO;

 //?If piece count Item, find production avail in pieces else weight
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // PAR.PS Pieces Production Need = WRK.Pieces Allocated USR
 PAR.PS_Pieces_Production_Need = WRK.Pieces_Allocated_USR;

 // Weight Need
 PAR.PS_Weight_Production_Need = WRK.ATS_Weight_Available_USR / ( PAR.Production_Yield
 / 100 'H' ) 'H';

 //?If piece count Item, find production avail in pieces else weight
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Weight Need
 PAR.PS_Weight_Production_Need = WRK.ATS_Weight_Available_USR / ( PAR.Production_Yield
 / 100 'H' ) 'H';

 // PAR.PS Pieces Production Need = CON.*ZERO
 PAR.PS_Pieces_Production_Need = *ZERO;

 ENDIF;

 CASE;

 // IF PAR.PS Pieces Production Need is NE Zeros
 IF PAR.PS_Pieces_Production_Need <> *ZERO;

 // OR PAR.PS Weight Production Need is NE Zero
 OR PAR.PS_Weight_Production_Need <> *ZERO;

 // Call program Upd Allocate Std      XF.
 CALL PROGRAM(Upd Allocate Std      XF) ('PDHNXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.OD_Production_Date);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.Warehouse_Std_Chill_Time);
 PARAMETER(PAR.Warehouse_Chill_Time);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER('OD');
 PARAMETER(PAR.PS_Weight_Production_Need);
 PARAMETER(PAR.PS_Pieces_Production_Need);

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 // WRK.ATS Quantity Need USR = WRK.ATS Quantity Need USR - DB1.OD Quantity Scheduled
 WRK.ATS_Quantity_Need_USR = WRK.ATS_Quantity_Need_USR - DB1.OD_Qty_Cnsmd_Pieces_Sched;

 CASE;

 // IF DB1.OD Quantity Inv Sched is Equal to zero
 IF DB1.OD_Quantity_Inv_Sched = *ZERO;

 EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.OD_Production_Date);
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.OD_Production_Date);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.OD_Quantity_Inv_Sched);
 PARAMETER(DB1.OD_Weight_Inv_Sched);
 PARAMETER(DB1.OD_Added_to_Sched_Today);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled - DB1.OD Quantity Scheduled
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled - DB1.OD_Qty_Cnsmd_Pieces_Sched;

 // PAR.Weight Scheduled = PAR.Quantity Scheduled * PAR.Unit Weight *
 PAR.Weight_Scheduled = PAR.Quantity_Scheduled * PAR.Unit_Weight;

 //?FP1054 save this for prod whse update outside of this CASE
 // WRK.Weight Deallocate USR = WRK.ATS Weight Available USR
 WRK.Weight_Deallocate_USR = WRK.ATS_Weight_Available_USR;

 ENDIF;

 //?FP1054 New
 CASE;

 // IF PAR.Base/Conv/Loss Item is Base
 IF PAR.Base_Conv_Loss_Item = 'B';

 //?FP1054  Reduce order's warehouse standard prod too & prod whse txfr
 CASE;

 // IF PAR.Warehouse Code NE LCL.Production Warehouse Code
 IF PAR.Warehouse_Code <> LCL.Production_Warehouse_Code;

 //?use order's warehouse and company
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(DB1.OD_Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(WRK.Pieces_Allocated_USR);
 PARAMETER(WRK.Weight_Deallocate_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Standard = PAR.Weight Scheduled
  PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.PS Weight Standard is NE Zero
  IF PAR.PS_Weight_Standard <> *ZERO;

  // OR PAR.PS Pieces Standard is NE Zeros
  OR PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
  PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
 }

 //?Move prod that was alloc to order's warehouse back to prod whse's std
 EXECUTE FUNCTION(Upd Prod Whse Txfr    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1933130;
 PARAMETER(LCL.Accounting_Company);
 PARAMETER(PAR.Production_Type);
 PARAMETER(DB1.OD_Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Production_Warehouse_Code);
 PARAMETER(WRK.Weight_Deallocate_USR);
 PARAMETER(WRK.Pieces_Allocated_USR);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER('Y');
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Whse Tfr Adj = PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Whse Tfr Adj is GT Zero
  IF PAR.PS_Pieces_Whs_Tfr_Adj > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Whs_Tfr_Adj / PAR.PS_Pieces_Whs_Tfr_Adj;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //? not necessary here ...
  //?USER: Process Data record

  // PAR.PS Weight Whse Tfr Adj = DB1.PS Weight Whse Tfr Adj + PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = DB1.PS_Weight_Whs_Tfr_Adj + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = DB1.PS Pieces Whse Tfr Adj + PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = DB1.PS_Pieces_Whs_Tfr_Adj + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Whse Txfr    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1933131;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //? not necessary here ...
  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
 }

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

}


ENDIF;

//?**** NEW ****
//?Deallocate Inventory
CASE;

// IF PAR.ATS Quantity Need USR is Less than zero
IF PAR.ATS_Quantity_Need_USR < *ZERO;

EXECUTE FUNCTION(UPD Deallocate Inv    IF) TYPE(EXCINTFUN)                      AC1478093;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.Quantity_Ordered);
PARAMETER(PAR.Weight_Ordered);
PARAMETER(PAR.Quantity_Scheduled);
PARAMETER(PAR.Weight_Scheduled);
PARAMETER(PAR.ATS_Quantity_Need_USR);
PARAMETER(PAR.ATS_Weight_Need_USR);
PARAMETER(PAR.Production_Date_USR);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.Warehouse_Code);
{
 //?Execute internal function

 EXECUTE FUNCTION(UPD Deallocate Inv    RT) TYPE(RTVOBJ) FILE(POB5CPP)           AC1647008;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Quantity_Ordered);
 PARAMETER(PAR.Weight_Ordered);
 PARAMETER(PAR.Quantity_Scheduled);
 PARAMETER(PAR.Weight_Scheduled);
 PARAMETER(PAR.ATS_Quantity_Need_USR);
 PARAMETER(PAR.ATS_Weight_Need_USR);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(PAR.Production_Date_USR);
 {
  //?USER: Process Data record

  // PGM.*Record selected = CND.*YES
  PGM.*Record_selected = 'Y';

  CASE;

  // IF PAR.Production Date USR is Entered
  IF PAR.Production_Date_USR <> *ZERO;

  CASE;

  // IF DB1.OD Production Date NE PAR.Production Date USR
  IF DB1.OD_Production_Date <> PAR.Production_Date_USR;

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  ENDIF;

  //?Process Record
  CASE;

  // IF PGM.*Record selected is *YES
  IF PGM.*Record_selected = 'Y';

  //?Deallocate Inventory
  CASE;

  // IF PAR.ATS Quantity Need USR is Less than zero
  IF PAR.ATS_Quantity_Need_USR < *ZERO;

  CASE;

  // IF DB1.OD Weight Inv Sched is Greater than zero
  IF DB1.OD_Weight_Inv_Sched > *ZERO;

  // Weight Deallocate USR
  PAR.Weight_Deallocate_USR = DB1.OD_Weight_Inv_Sched * -1;

  // Quantity Deallocate USR
  PAR.Quantity_Deallocated_USR = DB1.OD_Quantity_Inv_Sched * -1;

  //?Update Inventory Allocated.
  CASE;

  // IF PAR.Weight Deallocate USR LE PAR.ATS Weight Need USR
  IF PAR.Weight_Deallocate_USR <= PAR.ATS_Weight_Need_USR;

  EXECUTE FUNCTION(Upd Inv Allocated     RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1407229;
  PARAMETER(PAR.Company_Number);
  PARAMETER('S');
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.ATS_Weight_Need_USR);
  PARAMETER(PAR.ATS_Quantity_Need_USR);
  {
   //?USER: Process Data record

   // PAR.PS Weight Inv Allocated = DB1.PS Weight Inv Allocated + PAR.Weight Allocated
   PAR.PS_Weight_Inv_Allocated = DB1.PS_Weight_Inv_Allocated + PAR.Weight_Allocated_USR;

   //?PS Pieces Inv Allocated
   CASE;

   // IF PAR.Piece Count Item is yes
   IF PAR.Piece_Count_Item = 'Y';

   // Pieces Inv Allocated
   PAR.PS_Pieces_Inv_Allocated = DB1.PS_Pieces_Inv_Allocated + ( PAR.Quantity_Allocated_USR *
   ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit 'H' ) 'H' );

   //?PS Pieces Inv Allocated
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.PS Pieces Inv Allocated = CON.*ZERO
   PAR.PS_Pieces_Inv_Allocated = *ZERO;

   ENDIF;

   EXECUTE FUNCTION(Chg Inv Allocated     CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1407230;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  EXECUTE FUNCTION(Upd Qty/Wgt Inv Alc   RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1453897;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Ship_Date_USR);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.ATS_Quantity_Need_USR);
  PARAMETER(PAR.ATS_Weight_Need_USR);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.Quantity_Allocated_USR);
   PARAMETER(PAR.Weight_Allocated_USR);
   PARAMETER(PAR.OD_Quantity_Unused_1);
   PARAMETER(PAR.OD_Unused_weight_1);
   PARAMETER(PAR.OD_Added_to_Sched_Today);
   PARAMETER(PAR.OD_Reallocate_Sts);
   PARAMETER(PAR.OD_Status_Unused_3);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?USER: Process Data record

   // PAR.OD Quantity Inv Sched = DB1.OD Quantity Inv Sched + PAR.Quantity Allocated U
   PAR.OD_Quantity_Inv_Sched = DB1.OD_Quantity_Inv_Sched + PAR.Quantity_Allocated_USR;

   // PAR.OD Weight Inv Sched = DB1.OD Weight Inv Sched + PAR.Weight Allocated USR
   PAR.OD_Weight_Inv_Sched = DB1.OD_Weight_Inv_Sched + PAR.Weight_Allocated_USR;

   CASE;

   // IF PAR.OD Quantity Inv Sched is LE Zero
   IF PAR.OD_Quantity_Inv_Sched <= *ZERO;

   EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg Qty/Wgt Inv Alc) TYPE(CHGOBJ) FILE(PDKNCPP)                AC1453898;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.OD_Quantity_Inv_Sched);
   PARAMETER(PAR.OD_Weight_Inv_Sched);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  // PAR.OD Weight Inv Sched = DB1.OD Weight Inv Sched + PAR.ATS Weight Need USR
  PAR.OD_Weight_Inv_Sched = DB1.OD_Weight_Inv_Sched + PAR.ATS_Weight_Need_USR;

  // PAR.OD Quantity Inv Sched = DB1.OD Quantity Inv Sched + PAR.ATS Quantity Need USR
  PAR.OD_Quantity_Inv_Sched = DB1.OD_Quantity_Inv_Sched + PAR.ATS_Quantity_Need_USR;

  CASE;

  // IF PAR.OD Quantity Inv Sched is LE Zero
  IF PAR.OD_Quantity_Inv_Sched <= *ZERO;

  EXECUTE FUNCTION(Del Ord Dtl Sch-Inv   DL) TYPE(DLTOBJ) FILE(POB5CPP)           AC1647003;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Chg Ord Dtl Sch-Inv   CH) TYPE(CHGOBJ) FILE(POB5CPP)           AC1647005;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  PARAMETER(PAR.Ship_Date_USR);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.OD_Quantity_Inv_Sched);
  PARAMETER(PAR.OD_Weight_Inv_Sched);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

  // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
  PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

  // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
  PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

  //?Update Inventory Allocated.
  // IF PAR.Weight Deallocate USR GT PAR.ATS Weight Need USR
  IF PAR.Weight_Deallocate_USR > PAR.ATS_Weight_Need_USR;

  EXECUTE FUNCTION(Upd Inv Allocated     RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1407229;
  PARAMETER(PAR.Company_Number);
  PARAMETER('S');
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.Weight_Deallocate_USR);
  PARAMETER(PAR.Quantity_Deallocated_USR);
  {
   //?USER: Process Data record

   // PAR.PS Weight Inv Allocated = DB1.PS Weight Inv Allocated + PAR.Weight Allocated
   PAR.PS_Weight_Inv_Allocated = DB1.PS_Weight_Inv_Allocated + PAR.Weight_Allocated_USR;

   //?PS Pieces Inv Allocated
   CASE;

   // IF PAR.Piece Count Item is yes
   IF PAR.Piece_Count_Item = 'Y';

   // Pieces Inv Allocated
   PAR.PS_Pieces_Inv_Allocated = DB1.PS_Pieces_Inv_Allocated + ( PAR.Quantity_Allocated_USR *
   ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit 'H' ) 'H' );

   //?PS Pieces Inv Allocated
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.PS Pieces Inv Allocated = CON.*ZERO
   PAR.PS_Pieces_Inv_Allocated = *ZERO;

   ENDIF;

   EXECUTE FUNCTION(Chg Inv Allocated     CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1407230;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  EXECUTE FUNCTION(Upd Qty/Wgt Inv Alc   RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1453897;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(JOB.*Job_date);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Deallocated_USR);
  PARAMETER(PAR.Weight_Deallocate_USR);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.Quantity_Allocated_USR);
   PARAMETER(PAR.Weight_Allocated_USR);
   PARAMETER(PAR.OD_Quantity_Unused_1);
   PARAMETER(PAR.OD_Unused_weight_1);
   PARAMETER(PAR.OD_Added_to_Sched_Today);
   PARAMETER(PAR.OD_Reallocate_Sts);
   PARAMETER(PAR.OD_Status_Unused_3);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?USER: Process Data record

   // PAR.OD Quantity Inv Sched = DB1.OD Quantity Inv Sched + PAR.Quantity Allocated U
   PAR.OD_Quantity_Inv_Sched = DB1.OD_Quantity_Inv_Sched + PAR.Quantity_Allocated_USR;

   // PAR.OD Weight Inv Sched = DB1.OD Weight Inv Sched + PAR.Weight Allocated USR
   PAR.OD_Weight_Inv_Sched = DB1.OD_Weight_Inv_Sched + PAR.Weight_Allocated_USR;

   CASE;

   // IF PAR.OD Quantity Inv Sched is LE Zero
   IF PAR.OD_Quantity_Inv_Sched <= *ZERO;

   EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg Qty/Wgt Inv Alc) TYPE(CHGOBJ) FILE(PDKNCPP)                AC1453898;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.OD_Quantity_Inv_Sched);
   PARAMETER(PAR.OD_Weight_Inv_Sched);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  //?** UPDATE INVENTORY SCHEDULED **
  // PAR.OD Weight Inv Sched = DB1.OD Weight Inv Sched + PAR.Weight Deallocate USR
  PAR.OD_Weight_Inv_Sched = DB1.OD_Weight_Inv_Sched + PAR.Weight_Deallocate_USR;

  // PAR.OD Quantity Inv Sched = DB1.OD Quantity Inv Sched + PAR.Quantity Deallocated USR
  PAR.OD_Quantity_Inv_Sched = DB1.OD_Quantity_Inv_Sched + PAR.Quantity_Deallocated_USR;

  CASE;

  // IF PAR.OD Quantity Inv Sched is LE Zero
  IF PAR.OD_Quantity_Inv_Sched <= *ZERO;

  EXECUTE FUNCTION(Del Ord Dtl Sch-Inv   DL) TYPE(DLTOBJ) FILE(POB5CPP)           AC1647003;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Chg Ord Dtl Sch-Inv   CH) TYPE(CHGOBJ) FILE(POB5CPP)           AC1647005;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  PARAMETER(PAR.Ship_Date_USR);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.OD_Quantity_Inv_Sched);
  PARAMETER(PAR.OD_Weight_Inv_Sched);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

  // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.Weight Deallocate USR
  PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.Weight_Deallocate_USR;

  // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.Quantity Deallocated USR
  PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.Quantity_Deallocated_USR;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
  PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

  // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
  PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 }

}


ENDIF;

//?*************
ENDIF;

