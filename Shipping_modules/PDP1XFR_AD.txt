// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDP1XFR
// ?Date: 14.08.2025 Time: 03:29:21
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?06/18/19 RMC S15134 - chk for prod hold if item is production plan YES
//?FP1054 chg RTV Val/Wgt Shipping   RT to check released by user f/Prod Hold
//?Calculate Order Value and weight total and Order Value Difference
// PAR.USR Order Value = CON.*ZERO
PAR.USR_Order_Value = *ZERO;

// PAR.USR Order Weight = CON.*ZERO
PAR.USR_Order_Weight = *ZERO;

// PAR.USR Financials-Total amt. = CON.*ZERO
PAR.USR_Financials_Total_amt = *ZERO;

// PAR.USR Accrual Total = CON.*ZERO
PAR.USR_Accrual_Total = *ZERO;

//?  Retrieve Values from the order Detail and Allocate Inventory
EXECUTE FUNCTION(RTV Val/Wgt Shipping   RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1318653;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.USR_Order_Value);
PARAMETER(PAR.USR_Order_Weight);
PARAMETER(PAR.USR_Production);
{
 //?USER: Process Data record

 // PAR.USR Order Value = PAR.USR Order Value + DB1.Extended Amount
 PAR.USR_Order_Value = PAR.USR_Order_Value + DB1.Extended_Amount;

 //?Calculate weight according to order status
 CASE;

 // IF DB1.Detail Line Status is Avail/Alloc/Enter/Hold
 IF DB1.Detail_Line_Status = 'L'/'A'/'E'/'H';

 // AND DB1.Event Code is Entered Thru 03 Picked
 AND DB1.Event_Code >= '01';
 AND DB1.Event_Code <= '03';

 //?06/18/19 RMC S15134 - do below Only if item is production plan YES
 // Call program Rtv Plan Prod Sts     XF.
 CALL PROGRAM(Rtv Plan Prod Sts     XF) ('PNHKXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.Plan_Production_Sts);

 CASE;

 // IF LCL.Plan Production Sts is Yes
 IF LCL.Plan_Production_Sts = *BLANK;

 //?Set production hold     - FP1054 chg to check for Released by User
 CASE;

 // IF DB1.Order Secondary Line Seq is EQ 1
 IF DB1.Order_Secondary_Line_Seq = 1;

 //?Only check if line not substituted
 CASE;

 // IF DB1.Quantity Scheduled LT DB1.Quantity Ordered
 IF DB1.Quantity_Scheduled < DB1.Quantity_Ordered;

 // AND DB1.Substituted Flag is No Substitutions Exist
 AND DB1.Substituted_Flag = *BLANK;

 //?FP1054 if not Released By User then do this
 CASE;

 // IF DB1.Released by User Sts Y/N is Not Yes
 IF DB1.Released_by_User_Sts_Y_N = *BLANK/'N';

 // PAR.USR Production = CND.Yes
 PAR.USR_Production = 'Y';

 ENDIF;

 ENDIF;

 //?Set production hold     - FP1054 chg to check for Released by User
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Quantity Scheduled LT DB1.Quantity to Substitute
 IF DB1.Quantity_Scheduled < DB1.Quantity_to_Substitute;

 // PAR.USR Production = CND.Yes
 PAR.USR_Production = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

 //?06/08/09 PKD FP1054 - Post Install Request.  Use Ordered Weight
 //?             instead of Scheduled Weight.
 // PAR.USR Order Weight = PAR.USR Order Weight + DB1.Weight Ordered
 PAR.USR_Order_Weight = PAR.USR_Order_Weight + DB1.Weight_Ordered;

 //?Calculate weight according to order status
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Order Weight = PAR.USR Order Weight + DB1.Weight Shipped Total
 PAR.USR_Order_Weight = PAR.USR_Order_Weight + DB1.Weight_Shipped_Total;

 ENDIF;

 EXECUTE FUNCTION(RTV Sum Dtl Fin Amts   RT) TYPE(RTVOBJ) FILE(OMCRWKP)          AC1342403;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(*ZERO);
 PARAMETER(PAR.USR_Transaction_amount);
 {
  //?USER: Initialize routine

  // PAR.USR Transaction amount = CON.*ZERO
  PAR.USR_Transaction_amount = *ZERO;

  //?USER: Process Data record

  // PAR.USR Transaction amount = PAR.USR Transaction amount + DB1.Transaction Amount
  PAR.USR_Transaction_amount = PAR.USR_Transaction_amount + DB1.Transaction_Amount;

 }

 // PAR.Billing Detail Gross Dol. = DB1.Extended Amount + PAR.USR Transaction amount
 PAR.Billing_Detail_Gross_Dol = DB1.Extended_Amount + PAR.USR_Transaction_amount;

 EXECUTE FUNCTION(CHG Ext. Amt,Billing   CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1339378;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Billing_Detail_Cost_Dol);
 PARAMETER(PAR.Billing_Detail_Gross_Dol);
 PARAMETER(DB1.Extended_Amount);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


EXECUTE FUNCTION(RTV Ship Fin Amounts   RT) TYPE(RTVOBJ) FILE(OMCQWKP)          AC1318654;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(1);
PARAMETER(PAR.USR_Financials_Total_amt);
{
 //?USER: Process Data record

 // PAR.USR Financials-Total amt. = PAR.USR Financials-Total amt. + DB1.Transaction
 PAR.USR_Financials_Total_amt = PAR.USR_Financials_Total_amt + DB1.Transaction_Amount;

}


// PAR.USR Order Value = PAR.USR Financials-Total amt. + PAR.USR Order Value
PAR.USR_Order_Value = PAR.USR_Financials_Total_amt + PAR.USR_Order_Value;

EXECUTE FUNCTION(RTV Ship Dtl Fin. Amt. RT) TYPE(RTVOBJ) FILE(OMCRWKP)          AC1318655;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.USR_Accrual_Total);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Financial Type is Accrual Charge
 IF DB1.Financial_Type = 'A';

 EXECUTE FUNCTION(RTV NonAuto Accru Stat RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1296507;
 PARAMETER(DB1.Accrual_Code);
 PARAMETER(PAR.Error_Status);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  CASE;

  // IF DB1.Automatic Accrual (Y/N) is No
  IF DB1.Automatic_Accrual_Y_N = 'N';

  // PAR.Error Status = CND.no
  PAR.Error_Status = 'N';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Error Status = CND.yes
  PAR.Error_Status = 'Y';

  ENDIF;

 }

 //?Not an Automatic Accrual - Automatic Accruals are not calc.
 CASE;

 // IF PAR.Error Status is no
 IF PAR.Error_Status = 'N';

 // PAR.USR Accrual Total = DB1.Transaction Amount + PAR.USR Accrual Total
 PAR.USR_Accrual_Total = DB1.Transaction_Amount + PAR.USR_Accrual_Total;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Accrual Total = DB1.Transaction Amount + PAR.USR Accrual Total
 PAR.USR_Accrual_Total = DB1.Transaction_Amount + PAR.USR_Accrual_Total;

 ENDIF;

}


// PAR.USR Order Value = PAR.USR Accrual Total + PAR.USR Order Value
PAR.USR_Order_Value = PAR.USR_Accrual_Total + PAR.USR_Order_Value;

