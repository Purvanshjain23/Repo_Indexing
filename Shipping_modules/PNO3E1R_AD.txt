// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNO3E1R
// ?Date: 14.08.2025 Time: 03:45:58
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?***** PA PROCESS - USE REQUESTED SHIP DATE FOR Ship Date USR *****
//?R5947
//?RMC 5/16/16 NLL age days, prodfrom and to, want the ones from above save
//?E2393 RMC 1/09/13  fix exit routine.it was using ord dtl seq 1 instead
//?  of the ord dtl on the screen.
//?E2073 RMC 8/1/12 Dsp whs inv chilling time
// Call program Rtv Plant Co/Org      XF.
CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.Plant_Company_Sts);
PARAMETER(WRK.Company_Organization);

// WRK.Save Data First Time Usr = CND.Yes
WRK.Save_Data_First_Time_Usr = 'Y';

//?USER: Initialize detail screen (existing record)

// WRK.Error Status = CND.blank
WRK.Error_Status = *BLANK;

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(PAR.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// Call program RTV Customer Name     XF.
CALL PROGRAM(RTV Customer Name     XF) ('PPH6XFR');
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(DTL.Customer_Name_DRV);

EXECUTE FUNCTION(Rtv Base Values PA    RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1416510;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(PAR.Description_Line_One);
PARAMETER(PAR.Description_Line_Two);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(PAR.UOM_Pricing);
PARAMETER(PAR.Unit_Weight);
PARAMETER(DTL.Production_Date_Control);
PARAMETER(DTL.Catch_Weight_Status);
PARAMETER(DTL.Fresh_Chilling_Time);
PARAMETER(LCL.Base_Conv_Loss_Item);
PARAMETER(LCL.Piece_Count_Item);
PARAMETER(LCL.Pieces_Per_Bag);
PARAMETER(LCL.Bags_Per_Unit);
PARAMETER(LCL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Item Description DRV = PAR.Description Line One
DTL.Item_Description_DRV = PAR.Description_Line_One;

EXECUTE FUNCTION(RTV SSD/Tm/SpecIns/RDlvRT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1977694;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(LCL.Special_Instructions);
PARAMETER(LCL.Special_Instructions_2);
PARAMETER(LCL.Scheduled_Ship_Date);
PARAMETER(LCL.Requested_Delivery_Date);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Requested Delivery Date = LCL.Requested Delivery Date
DTL.Requested_Delivery_Date = LCL.Requested_Delivery_Date;

// Call program RTV Actv Descr, Ctrl   XF.
CALL PROGRAM(RTV Actv Descr, Ctrl   XF) ('PNH4XFR');
PARAMETER(DB1.Warehouse_Code);
PARAMETER(WRK.Warehouse_Description);
PARAMETER(WRK.Trans_Contol_AS400_Plant);

EXECUTE FUNCTION(RTV Type/Std Chil/Chil RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1501268;
PARAMETER(DB1.Warehouse_Code);
PARAMETER(DTL.Warehouse_Type);
PARAMETER(DTL.Warehouse_Std_Chill_Time);
PARAMETER(DTL.Warehouse_Chill_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Warehous Inv ChillRT) TYPE(RTVOBJ) FILE(CAADREP)           AC2048609;
PARAMETER(DB1.Warehouse_Code);
PARAMETER(DTL.WHS_Inventory_Chill_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Rtv Age Information   XF.
CALL PROGRAM(Rtv Age Information   XF) ('PNQCXFR');
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(DTL.Item_Age_Days_Fresh);
PARAMETER(DTL.Item_Age_Days_Frozen);

// DTL.Chill Time USR = CON.*ZERO
DTL.Chill_Time_USR = *ZERO;

CASE;

// IF DTL.Warehouse Std Chill Time is yes
IF DTL.Warehouse_Std_Chill_Time = 'Y';

// DTL.Chill Time USR = DTL.Warehouse Chill Time
DTL.Chill_Time_USR = DTL.Warehouse_Chill_Time;

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Chill Time USR = DTL.Fresh Chilling Time
DTL.Chill_Time_USR = DTL.Fresh_Chilling_Time;

ENDIF;

// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

EXECUTE FUNCTION(Val Age Information   IF) TYPE(EXCINTFUN)                      AC1984951;
PARAMETER(DB1.Item_Code);
PARAMETER(DB1.Warehouse_Code);
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Scheduled_Ship_Date);
PARAMETER(DTL.Requested_Delivery_Date);
PARAMETER(DB1.Item_Age_Days);
PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
PARAMETER(DB1.Production_Ovr_AgeDte_To);
PARAMETER(DTL.Production_AgeDte_Fr);
PARAMETER(DTL.Production_AgeDte_To);
PARAMETER(WRK.Error_Status);
PARAMETER(WRK.Company_Organization);
PARAMETER('V');
{
 //?Execute internal function

 // WRK.Error Flag            USR = CND.Blank
 WRK.Error_Flag_USR = *BLANK;

 // PAR.Error Status = CND.blank
 PAR.Error_Status = *BLANK;

 // WRK.Error Reason Descript 1 = CON.*BLANK
 WRK.Error_Reason_Descript_1 = *BLANK;

 // WRK.Error Reason Descript 2 = CON.*BLANK
 WRK.Error_Reason_Descript_2 = *BLANK;

 // WRK.Error Reason Descript 3 = CON.*BLANK
 WRK.Error_Reason_Descript_3 = *BLANK;

 // WRK.Error Reason Descript 4 = CON.*BLANK
 WRK.Error_Reason_Descript_4 = *BLANK;

 // WRK.Error Reason Descript 5 = CON.*BLANK
 WRK.Error_Reason_Descript_5 = *BLANK;

 CASE;

 // IF PAR.Company Organization is Seaboard
 IF PAR.Company_Organization = 'S';

 CASE;

 // IF PAR.Requested Delivery Date is not entered
 IF PAR.Requested_Delivery_Date = *ZERO;

 // Send error message - 'Requested Delv Date is required'
 ERROR(USR4329);
 MSGPARM(PAR.Requested_Delivery_Date);

 // IF PAR.Scheduled Ship Date is not entered
 IF PAR.Scheduled_Ship_Date = *ZERO;

 // Send error message - 'Scheduled Ship Date is required when orders are assigned to load.'
 ERROR(USR2230);
 MSGPARM(PAR.Scheduled_Ship_Date);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Val Age information   XF.
 CALL PROGRAM(Val Age information   XF) ('PNQNXFR');
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.Error_Flag_USR);
 PARAMETER(WRK.Error_Reason_Descript_1);
 PARAMETER(WRK.Error_Reason_Descript_2);
 PARAMETER(WRK.Error_Reason_Descript_3);
 PARAMETER(WRK.Error_Reason_Descript_4);
 PARAMETER(WRK.Error_Reason_Descript_5);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(PAR.Item_Age_Days);
 PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
 PARAMETER(PAR.Production_Ovr_AgeDte_To);
 PARAMETER(PAR.Production_AgeDte_Fr);
 PARAMETER(PAR.Production_AgeDte_To);

 //?Verify if message should be sent if validation is required
 CASE;

 // IF WRK.Error Flag            USR is Yes
 IF WRK.Error_Flag_USR = 'Y';

 // AND PAR.Production Dates Sts Usr is Validation routine
 AND PAR.Production_Dates_Sts_Usr = 'V';

 //?message 1 Product is shipped before product is made
 CASE;

 // IF WRK.Error Reason Descript 1 NE WRK.Blank for 30          USR
 IF WRK.Error_Reason_Descript_1 <> WRK.Blank_for_30_USR;

 // Send error message - 'Prd Date is invalid for requested delivery date'
 ERROR(USR4307);
 MSGPARM(PAR.Production_AgeDte_Fr);

 ENDIF;

 //?message 2 Either Days or override date but not both
 CASE;

 // IF WRK.Error Reason Descript 2 NE WRK.Blank for 30          USR
 IF WRK.Error_Reason_Descript_2 <> WRK.Blank_for_30_USR;

 // Send error message - 'Enter Age Days or Dates'
 ERROR(USR4304);
 MSGPARM(PAR.Item_Age_Days);
 MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
 MSGPARM(PAR.Production_Ovr_AgeDte_To);

 ENDIF;

 //?message 3 With Chill Days Either Days or Override Dates required
 CASE;

 // IF WRK.Error Reason Descript 3 NE WRK.Blank for 30          USR
 IF WRK.Error_Reason_Descript_3 <> WRK.Blank_for_30_USR;

 // Send error message - 'Override Dates is after shipped date'
 ERROR(USR4305);
 MSGPARM(PAR.Item_Age_Days);
 MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
 MSGPARM(PAR.Production_Ovr_AgeDte_To);

 ENDIF;

 //?message 4 From date is > then SHIP DATE
 CASE;

 // IF WRK.Error Reason Descript 4 NE WRK.Blank for 30          USR
 IF WRK.Error_Reason_Descript_4 <> WRK.Blank_for_30_USR;

 // Send error message - 'Override Dates is after shipped date'
 ERROR(USR4305);
 MSGPARM(PAR.Item_Age_Days);
 MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
 MSGPARM(PAR.Production_Ovr_AgeDte_To);

 ENDIF;

 //?message 5 To date is > then SHIP DATE
 CASE;

 // IF WRK.Error Reason Descript 5 NE WRK.Blank for 30          USR
 IF WRK.Error_Reason_Descript_5 <> WRK.Blank_for_30_USR;

 // Send error message - 'Override Dates is after shipped date'
 ERROR(USR4305);
 MSGPARM(PAR.Item_Age_Days);
 MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
 MSGPARM(PAR.Production_Ovr_AgeDte_To);

 ENDIF;

 CASE;

 // IF PAR.Production Ovr AgeDte Fr is not entered
 IF PAR.Production_Ovr_AgeDte_Fr = *ZERO;

 // Send error message - 'Invalid Item Age Days'
 ERROR(USR4309);
 MSGPARM(PAR.Item_Age_Days);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send error message - 'Invalid Production Override Age Frm/To Dates'
 ERROR(USR4310);
 MSGPARM(PAR.Production_AgeDte_Fr);
 MSGPARM(PAR.Production_AgeDte_To);

 ENDIF;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

}


CASE;

// IF WRK.Error Status is yes
IF WRK.Error_Status = 'Y';

QUIT;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF WRK.Save Data First Time Usr is Yes
IF WRK.Save_Data_First_Time_Usr = 'Y';

//?these save fields will be used in the exit routine
//?as the before image.  We only need first time in data
// WRK.Item age days usr = DTL.Item Age Days
WRK.Item_age_days_usr = DTL.Item_Age_Days;

// WRK.Prod Ovr AgeDte Fr Usr = DTL.Production Ovr AgeDte Fr
WRK.Prod_Ovr_AgeDte_Fr_Usr = DTL.Production_Ovr_AgeDte_Fr;

// WRK.Prod Ovr AgeDte To Usr = DTL.Production Ovr AgeDte To
WRK.Prod_Ovr_AgeDte_To_Usr = DTL.Production_Ovr_AgeDte_To;

// WRK.Production AgeDte FrPrior = DTL.Production AgeDte Fr
WRK.Production_AgeDte_FrPrior = DTL.Production_AgeDte_Fr;

// WRK.Production AgeDte ToPrior = DTL.Production AgeDte To
WRK.Production_AgeDte_ToPrior = DTL.Production_AgeDte_To;

// WRK.Quantity Ordered PriorUsr = DB1.Quantity Ordered
WRK.Quantity_Ordered_PriorUsr = DB1.Quantity_Ordered;

// WRK.Weight Ordered Prior  Usr = DB1.Weight Ordered
WRK.Weight_Ordered_Prior_Usr = DB1.Weight_Ordered;

// WRK.Quantity Scheduled PrioUs = DB1.Quantity Scheduled
WRK.Quantity_Scheduled_PrioUs = DB1.Quantity_Scheduled;

// WRK.Weight Scheduled PriorUsr = DB1.Weight Scheduled
WRK.Weight_Scheduled_PriorUsr = DB1.Weight_Scheduled;

// WRK.Save Data First Time Usr = CND.NO
WRK.Save_Data_First_Time_Usr = 'N';

// WRK.Order Sequence Number = DB1.Order Sequence Number
WRK.Order_Sequence_Number = DB1.Order_Sequence_Number;

// WRK.Order Secondary Line Seq = DB1.Order Secondary Line Seq
WRK.Order_Secondary_Line_Seq = DB1.Order_Secondary_Line_Seq;

// WRK.Item Code = DB1.Item Code
WRK.Item_Code = DB1.Item_Code;

// WRK.Warehouse Code = DB1.Warehouse Code
WRK.Warehouse_Code = DB1.Warehouse_Code;

// WRK.Scheduled Ship Date = DB1.Scheduled Ship Date
WRK.Scheduled_Ship_Date = DB1.Scheduled_Ship_Date;

ENDIF;

ENDIF;

//?USER: Validate detail screen fields

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// Call program RTV Customer Name     XF.
CALL PROGRAM(RTV Customer Name     XF) ('PPH6XFR');
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Customer_Name_DRV);

// DTL.Item Description DRV = PAR.Description Line One
DTL.Item_Description_DRV = PAR.Description_Line_One;

EXECUTE FUNCTION(Rtv Base Values PA    RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1416510;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(PAR.Description_Line_One);
PARAMETER(PAR.Description_Line_Two);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(PAR.UOM_Pricing);
PARAMETER(PAR.Unit_Weight);
PARAMETER(DTL.Production_Date_Control);
PARAMETER(DTL.Catch_Weight_Status);
PARAMETER(DTL.Fresh_Chilling_Time);
PARAMETER(LCL.Base_Conv_Loss_Item);
PARAMETER(LCL.Piece_Count_Item);
PARAMETER(LCL.Pieces_Per_Bag);
PARAMETER(LCL.Bags_Per_Unit);
PARAMETER(LCL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Type/Std Chil/Chil RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1501268;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Warehouse_Type);
PARAMETER(DTL.Warehouse_Std_Chill_Time);
PARAMETER(DTL.Warehouse_Chill_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Warehous Inv ChillRT) TYPE(RTVOBJ) FILE(CAADREP)           AC2048609;
PARAMETER(DB1.Warehouse_Code);
PARAMETER(DTL.WHS_Inventory_Chill_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Rtv Age Information   XF.
CALL PROGRAM(Rtv Age Information   XF) ('PNQCXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Item_Age_Days_Fresh);
PARAMETER(DTL.Item_Age_Days_Frozen);

// DTL.Chill Time USR = CON.*ZERO
DTL.Chill_Time_USR = *ZERO;

CASE;

// IF DTL.Warehouse Type is Fresh
IF DTL.Warehouse_Type = 'FR';

// DTL.Chill Time USR = DTL.Fresh Chilling Time
DTL.Chill_Time_USR = DTL.Fresh_Chilling_Time;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Warehouse Std Chill Time is yes
IF DTL.Warehouse_Std_Chill_Time = 'Y';

// DTL.Chill Time USR = DTL.Warehouse Chill Time
DTL.Chill_Time_USR = DTL.Warehouse_Chill_Time;

ENDIF;

ENDIF;

EXECUTE FUNCTION(Val Age Information   IF) TYPE(EXCINTFUN)                      AC1984951;
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(DTL.Requested_Delivery_Date);
PARAMETER(DTL.Item_Age_Days);
PARAMETER(DTL.Production_Ovr_AgeDte_Fr);
PARAMETER(DTL.Production_Ovr_AgeDte_To);
PARAMETER(DTL.Production_AgeDte_Fr);
PARAMETER(DTL.Production_AgeDte_To);
PARAMETER(WRK.Error_Status);
PARAMETER(WRK.Company_Organization);
PARAMETER('V');
{
 //?Execute internal function

 // WRK.Error Flag            USR = CND.Blank
 WRK.Error_Flag_USR = *BLANK;

 // PAR.Error Status = CND.blank
 PAR.Error_Status = *BLANK;

 // WRK.Error Reason Descript 1 = CON.*BLANK
 WRK.Error_Reason_Descript_1 = *BLANK;

 // WRK.Error Reason Descript 2 = CON.*BLANK
 WRK.Error_Reason_Descript_2 = *BLANK;

 // WRK.Error Reason Descript 3 = CON.*BLANK
 WRK.Error_Reason_Descript_3 = *BLANK;

 // WRK.Error Reason Descript 4 = CON.*BLANK
 WRK.Error_Reason_Descript_4 = *BLANK;

 // WRK.Error Reason Descript 5 = CON.*BLANK
 WRK.Error_Reason_Descript_5 = *BLANK;

 CASE;

 // IF PAR.Company Organization is Seaboard
 IF PAR.Company_Organization = 'S';

 CASE;

 // IF PAR.Requested Delivery Date is not entered
 IF PAR.Requested_Delivery_Date = *ZERO;

 // Send error message - 'Requested Delv Date is required'
 ERROR(USR4329);
 MSGPARM(PAR.Requested_Delivery_Date);

 // IF PAR.Scheduled Ship Date is not entered
 IF PAR.Scheduled_Ship_Date = *ZERO;

 // Send error message - 'Scheduled Ship Date is required when orders are assigned to load.'
 ERROR(USR2230);
 MSGPARM(PAR.Scheduled_Ship_Date);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Val Age information   XF.
 CALL PROGRAM(Val Age information   XF) ('PNQNXFR');
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.Error_Flag_USR);
 PARAMETER(WRK.Error_Reason_Descript_1);
 PARAMETER(WRK.Error_Reason_Descript_2);
 PARAMETER(WRK.Error_Reason_Descript_3);
 PARAMETER(WRK.Error_Reason_Descript_4);
 PARAMETER(WRK.Error_Reason_Descript_5);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(PAR.Item_Age_Days);
 PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
 PARAMETER(PAR.Production_Ovr_AgeDte_To);
 PARAMETER(PAR.Production_AgeDte_Fr);
 PARAMETER(PAR.Production_AgeDte_To);

 //?Verify if message should be sent if validation is required
 CASE;

 // IF WRK.Error Flag            USR is Yes
 IF WRK.Error_Flag_USR = 'Y';

 // AND PAR.Production Dates Sts Usr is Validation routine
 AND PAR.Production_Dates_Sts_Usr = 'V';

 //?message 1 Product is shipped before product is made
 CASE;

 // IF WRK.Error Reason Descript 1 NE WRK.Blank for 30          USR
 IF WRK.Error_Reason_Descript_1 <> WRK.Blank_for_30_USR;

 // Send error message - 'Prd Date is invalid for requested delivery date'
 ERROR(USR4307);
 MSGPARM(PAR.Production_AgeDte_Fr);

 ENDIF;

 //?message 2 Either Days or override date but not both
 CASE;

 // IF WRK.Error Reason Descript 2 NE WRK.Blank for 30          USR
 IF WRK.Error_Reason_Descript_2 <> WRK.Blank_for_30_USR;

 // Send error message - 'Enter Age Days or Dates'
 ERROR(USR4304);
 MSGPARM(PAR.Item_Age_Days);
 MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
 MSGPARM(PAR.Production_Ovr_AgeDte_To);

 ENDIF;

 //?message 3 With Chill Days Either Days or Override Dates required
 CASE;

 // IF WRK.Error Reason Descript 3 NE WRK.Blank for 30          USR
 IF WRK.Error_Reason_Descript_3 <> WRK.Blank_for_30_USR;

 // Send error message - 'Override Dates is after shipped date'
 ERROR(USR4305);
 MSGPARM(PAR.Item_Age_Days);
 MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
 MSGPARM(PAR.Production_Ovr_AgeDte_To);

 ENDIF;

 //?message 4 From date is > then SHIP DATE
 CASE;

 // IF WRK.Error Reason Descript 4 NE WRK.Blank for 30          USR
 IF WRK.Error_Reason_Descript_4 <> WRK.Blank_for_30_USR;

 // Send error message - 'Override Dates is after shipped date'
 ERROR(USR4305);
 MSGPARM(PAR.Item_Age_Days);
 MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
 MSGPARM(PAR.Production_Ovr_AgeDte_To);

 ENDIF;

 //?message 5 To date is > then SHIP DATE
 CASE;

 // IF WRK.Error Reason Descript 5 NE WRK.Blank for 30          USR
 IF WRK.Error_Reason_Descript_5 <> WRK.Blank_for_30_USR;

 // Send error message - 'Override Dates is after shipped date'
 ERROR(USR4305);
 MSGPARM(PAR.Item_Age_Days);
 MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
 MSGPARM(PAR.Production_Ovr_AgeDte_To);

 ENDIF;

 CASE;

 // IF PAR.Production Ovr AgeDte Fr is not entered
 IF PAR.Production_Ovr_AgeDte_Fr = *ZERO;

 // Send error message - 'Invalid Item Age Days'
 ERROR(USR4309);
 MSGPARM(PAR.Item_Age_Days);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send error message - 'Invalid Production Override Age Frm/To Dates'
 ERROR(USR4310);
 MSGPARM(PAR.Production_AgeDte_Fr);
 MSGPARM(PAR.Production_AgeDte_To);

 ENDIF;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

}


CASE;

// IF WRK.Error Status is yes
IF WRK.Error_Status = 'Y';

QUIT;

ENDIF;

//?CALC: Detail screen function fields

//?Get the Order header
EXECUTE FUNCTION(Val Age Information   IF) TYPE(EXCINTFUN)                      AC1984951;
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(DTL.Requested_Delivery_Date);
PARAMETER(DTL.Item_Age_Days);
PARAMETER(DTL.Production_Ovr_AgeDte_Fr);
PARAMETER(DTL.Production_Ovr_AgeDte_To);
PARAMETER(DTL.Production_AgeDte_Fr);
PARAMETER(DTL.Production_AgeDte_To);
PARAMETER(WRK.Error_Status);
PARAMETER(WRK.Company_Organization);
PARAMETER('V');
{
 //?Execute internal function

 // WRK.Error Flag            USR = CND.Blank
 WRK.Error_Flag_USR = *BLANK;

 // PAR.Error Status = CND.blank
 PAR.Error_Status = *BLANK;

 // WRK.Error Reason Descript 1 = CON.*BLANK
 WRK.Error_Reason_Descript_1 = *BLANK;

 // WRK.Error Reason Descript 2 = CON.*BLANK
 WRK.Error_Reason_Descript_2 = *BLANK;

 // WRK.Error Reason Descript 3 = CON.*BLANK
 WRK.Error_Reason_Descript_3 = *BLANK;

 // WRK.Error Reason Descript 4 = CON.*BLANK
 WRK.Error_Reason_Descript_4 = *BLANK;

 // WRK.Error Reason Descript 5 = CON.*BLANK
 WRK.Error_Reason_Descript_5 = *BLANK;

 CASE;

 // IF PAR.Company Organization is Seaboard
 IF PAR.Company_Organization = 'S';

 CASE;

 // IF PAR.Requested Delivery Date is not entered
 IF PAR.Requested_Delivery_Date = *ZERO;

 // Send error message - 'Requested Delv Date is required'
 ERROR(USR4329);
 MSGPARM(PAR.Requested_Delivery_Date);

 // IF PAR.Scheduled Ship Date is not entered
 IF PAR.Scheduled_Ship_Date = *ZERO;

 // Send error message - 'Scheduled Ship Date is required when orders are assigned to load.'
 ERROR(USR2230);
 MSGPARM(PAR.Scheduled_Ship_Date);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Val Age information   XF.
 CALL PROGRAM(Val Age information   XF) ('PNQNXFR');
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.Error_Flag_USR);
 PARAMETER(WRK.Error_Reason_Descript_1);
 PARAMETER(WRK.Error_Reason_Descript_2);
 PARAMETER(WRK.Error_Reason_Descript_3);
 PARAMETER(WRK.Error_Reason_Descript_4);
 PARAMETER(WRK.Error_Reason_Descript_5);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(PAR.Item_Age_Days);
 PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
 PARAMETER(PAR.Production_Ovr_AgeDte_To);
 PARAMETER(PAR.Production_AgeDte_Fr);
 PARAMETER(PAR.Production_AgeDte_To);

 //?Verify if message should be sent if validation is required
 CASE;

 // IF WRK.Error Flag            USR is Yes
 IF WRK.Error_Flag_USR = 'Y';

 // AND PAR.Production Dates Sts Usr is Validation routine
 AND PAR.Production_Dates_Sts_Usr = 'V';

 //?message 1 Product is shipped before product is made
 CASE;

 // IF WRK.Error Reason Descript 1 NE WRK.Blank for 30          USR
 IF WRK.Error_Reason_Descript_1 <> WRK.Blank_for_30_USR;

 // Send error message - 'Prd Date is invalid for requested delivery date'
 ERROR(USR4307);
 MSGPARM(PAR.Production_AgeDte_Fr);

 ENDIF;

 //?message 2 Either Days or override date but not both
 CASE;

 // IF WRK.Error Reason Descript 2 NE WRK.Blank for 30          USR
 IF WRK.Error_Reason_Descript_2 <> WRK.Blank_for_30_USR;

 // Send error message - 'Enter Age Days or Dates'
 ERROR(USR4304);
 MSGPARM(PAR.Item_Age_Days);
 MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
 MSGPARM(PAR.Production_Ovr_AgeDte_To);

 ENDIF;

 //?message 3 With Chill Days Either Days or Override Dates required
 CASE;

 // IF WRK.Error Reason Descript 3 NE WRK.Blank for 30          USR
 IF WRK.Error_Reason_Descript_3 <> WRK.Blank_for_30_USR;

 // Send error message - 'Override Dates is after shipped date'
 ERROR(USR4305);
 MSGPARM(PAR.Item_Age_Days);
 MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
 MSGPARM(PAR.Production_Ovr_AgeDte_To);

 ENDIF;

 //?message 4 From date is > then SHIP DATE
 CASE;

 // IF WRK.Error Reason Descript 4 NE WRK.Blank for 30          USR
 IF WRK.Error_Reason_Descript_4 <> WRK.Blank_for_30_USR;

 // Send error message - 'Override Dates is after shipped date'
 ERROR(USR4305);
 MSGPARM(PAR.Item_Age_Days);
 MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
 MSGPARM(PAR.Production_Ovr_AgeDte_To);

 ENDIF;

 //?message 5 To date is > then SHIP DATE
 CASE;

 // IF WRK.Error Reason Descript 5 NE WRK.Blank for 30          USR
 IF WRK.Error_Reason_Descript_5 <> WRK.Blank_for_30_USR;

 // Send error message - 'Override Dates is after shipped date'
 ERROR(USR4305);
 MSGPARM(PAR.Item_Age_Days);
 MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
 MSGPARM(PAR.Production_Ovr_AgeDte_To);

 ENDIF;

 CASE;

 // IF PAR.Production Ovr AgeDte Fr is not entered
 IF PAR.Production_Ovr_AgeDte_Fr = *ZERO;

 // Send error message - 'Invalid Item Age Days'
 ERROR(USR4309);
 MSGPARM(PAR.Item_Age_Days);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send error message - 'Invalid Production Override Age Frm/To Dates'
 ERROR(USR4310);
 MSGPARM(PAR.Production_AgeDte_Fr);
 MSGPARM(PAR.Production_AgeDte_To);

 ENDIF;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

}


CASE;

// IF WRK.Error Status is yes
IF WRK.Error_Status = 'Y';

QUIT;

ENDIF;

// LCL.Item Age Days = DTL.Item Age Days
LCL.Item_Age_Days = DTL.Item_Age_Days;

// LCL.Production Ovr AgeDte Fr = DTL.Production Ovr AgeDte Fr
LCL.Production_Ovr_AgeDte_Fr = DTL.Production_Ovr_AgeDte_Fr;

// LCL.Production Ovr AgeDte To = DTL.Production Ovr AgeDte To
LCL.Production_Ovr_AgeDte_To = DTL.Production_Ovr_AgeDte_To;

//?USER: Validate detail screen relations

//?As of this time 4/1/2010 we are not going to insert this
//?this will come later on next release
//?USER: Change DBF record

EXECUTE FUNCTION(Chg Age Information  IF) TYPE(EXCINTFUN) FILE(OPBGWKP)         AC1993069;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Order_Sequence_Number);
PARAMETER(DTL.Order_Secondary_Line_Seq);
PARAMETER(DTL.Item_Age_Days);
PARAMETER(DTL.Production_Ovr_AgeDte_Fr);
PARAMETER(DTL.Production_Ovr_AgeDte_To);
PARAMETER(WRK.Record_Processed_Usr);
{
 //?Execute internal function

 // LCL.Record Processed Usr = CND.Blank
 LCL.Record_Processed_Usr = *BLANK;

 //?testreviewchg
 EXECUTE FUNCTION(Chg Age Information  CH) TYPE(CHGOBJ) FILE(OPBGWKP)            AC1977795;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Item_Age_Days);
 PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
 PARAMETER(PAR.Production_Ovr_AgeDte_To);
 PARAMETER(LCL.Record_Processed_Usr);
 {
  //?USER: Processing before Data read

  // LCL.Item age days usr = PAR.Item Age Days
  LCL.Item_age_days_usr = PAR.Item_Age_Days;

  // LCL.Prod Ovr AgeDte Fr Usr = PAR.Production Ovr AgeDte Fr
  LCL.Prod_Ovr_AgeDte_Fr_Usr = PAR.Production_Ovr_AgeDte_Fr;

  // LCL.Prod Ovr AgeDte To Usr = PAR.Production Ovr AgeDte To
  LCL.Prod_Ovr_AgeDte_To_Usr = PAR.Production_Ovr_AgeDte_To;

  //?USER: Processing after Data read

  // LCL.Item age days usr = PAR.Item Age Days
  LCL.Item_age_days_usr = PAR.Item_Age_Days;

  // LCL.Prod Ovr AgeDte Fr Usr = PAR.Production Ovr AgeDte Fr
  LCL.Prod_Ovr_AgeDte_Fr_Usr = PAR.Production_Ovr_AgeDte_Fr;

  // LCL.Prod Ovr AgeDte To Usr = PAR.Production Ovr AgeDte To
  LCL.Prod_Ovr_AgeDte_To_Usr = PAR.Production_Ovr_AgeDte_To;

  // PAR.Record Processed Usr = CND.No
  PAR.Record_Processed_Usr = 'N';

  CASE;

  // IF DB1.Item Age Days NE LCL.Item age days usr
  IF DB1.Item_Age_Days <> LCL.Item_age_days_usr;

  // PAR.Record Processed Usr = CND.Yes
  PAR.Record_Processed_Usr = 'Y';

  // IF DB1.Production Ovr AgeDte Fr NE LCL.Prod Ovr AgeDte Fr Usr
  IF DB1.Production_Ovr_AgeDte_Fr <> LCL.Prod_Ovr_AgeDte_Fr_Usr;

  // PAR.Record Processed Usr = CND.Yes
  PAR.Record_Processed_Usr = 'Y';

  // IF DB1.Production Ovr AgeDte To NE LCL.Prod Ovr AgeDte To Usr
  IF DB1.Production_Ovr_AgeDte_To <> LCL.Prod_Ovr_AgeDte_To_Usr;

  // PAR.Record Processed Usr = CND.Yes
  PAR.Record_Processed_Usr = 'Y';

  ENDIF;

  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 CASE;

 // IF LCL.Record Processed Usr is Yes
 IF LCL.Record_Processed_Usr = 'Y';

 // PAR.Record Processed Usr = CND.Yes
 PAR.Record_Processed_Usr = 'Y';

 ENDIF;

}


//?USER: Exit program processing

//?FP1309
CASE;

// IF WRK.Record Processed Usr is Yes
IF WRK.Record_Processed_Usr = 'Y';

//?since the data was changed then De/Reallocation routine will
//?be perform in the following section
//?Age Days - Prod Override Age From /To   Dealloc/ReAlloc
DO;

//?Get the most current image of the order header for requested
//?delivery date and Get the most current image of the order detail
//?lcl WILL be the most current image
//?RMC 5/16/16 NLL age days, prodfrom and to, want the ones from above save
// Call program Rtv All Fields/1 line XF.
CALL PROGRAM(Rtv All Fields/1 line XF) ('PNQYXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Credit_Hold);
PARAMETER(LCL.Production_Hold);
PARAMETER(LCL.Header_Status);
PARAMETER(LCL.Order_Type_Sales);
PARAMETER(LCL.Load_ID);
PARAMETER(LCL.Export_Status);
PARAMETER(LCL.Ship_To_City);
PARAMETER(LCL.Ship_To_State_Code);
PARAMETER(LCL.Order_in_Use);
PARAMETER(LCL.Order_Sequence_Number);
PARAMETER(LCL.Order_Secondary_Line_Seq);
PARAMETER(LCL.Item_Code);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(LCL.Order_Group_Code);
PARAMETER(LCL.Detail_Line_Status);
PARAMETER(LCL.Detail_Line_Status_Last);
PARAMETER(LCL.Billing_Detail_Cost_Dol);
PARAMETER(LCL.Billing_Detail_Gross_Dol);
PARAMETER(LCL.Billing_Detail_Net_Dol);
PARAMETER(LCL.Quantity_to_Substitute);
PARAMETER(LCL.Comment_Print_Acknowledge);
PARAMETER(LCL.Comment_Print_Inv_Cr_Memo);
PARAMETER(LCL.Comment_Print_Pick_Slip);
PARAMETER(LCL.Comment_Print_Ship_Doc);
PARAMETER(LCL.Extended_Amount);
PARAMETER(LCL.Market_Pricing_Date);
PARAMETER(LCL.Commodity_Market_Code);
PARAMETER(LCL.Date_Method_Code);
PARAMETER(LCL.Price_Method_Code);
PARAMETER(LCL.Price_Overage_Override);
PARAMETER(LCL.Contract_Number);
PARAMETER(LCL.Price_Status);
PARAMETER(LCL.Pricing_Date_Used);
PARAMETER(LCL.U_M_Base_Price);
PARAMETER(LCL.U_M_Ordered);
PARAMETER(LCL.Work_Confirm_Status);
PARAMETER(LCL.Work_Over_Short_Status);
PARAMETER(LCL.OD_Production_Plan_Sts);
PARAMETER(LCL.Order_Desc_Line_One);
PARAMETER(LCL.Order_Desc_Line_Two);
PARAMETER(LCL.Age_Code);
PARAMETER(LCL.Palletize);
PARAMETER(LCL.Slip_Sheet);
PARAMETER(LCL.Catch_Weight_Status);
PARAMETER(LCL.Price_Audit);
PARAMETER(LCL.Price_Audit_Reason_Code);
PARAMETER(LCL.Production_Date_Control);
PARAMETER(LCL.Rated_Freight);
PARAMETER(LCL.Quantity_Ordered);
PARAMETER(LCL.Weight_Ordered);
PARAMETER(LCL.Quantity_Scheduled);
PARAMETER(LCL.Weight_Scheduled);
PARAMETER(LCL.Quantity_Shipped_Total);
PARAMETER(LCL.Weight_Shipped_Total);
PARAMETER(LCL.Unit_Cost_Pricing_U_M);
PARAMETER(LCL.Unit_Cost_Per_Pound);
PARAMETER(LCL.Unit_Price);
PARAMETER(LCL.Unit_Price_Credit);
PARAMETER(LCL.Unit_Price_Ordered_U_M);
PARAMETER(LCL.Unit_Weight_Ordered_U_M);
PARAMETER(LCL.Tare_Weight_Total);
PARAMETER(LCL.Requested_Ship_Date);
PARAMETER(LCL.Scheduled_Ship_Date);
PARAMETER(LCL.Actual_Shipped_Date);
PARAMETER(LCL.Affect_Inventory_Status);
PARAMETER(LCL.Affect_Sales_Doll_Status);
PARAMETER(LCL.Affect_Sales_Pnds_Status);
PARAMETER(LCL.Item_Structure_Type_Code);
PARAMETER(LCL.Item_Structure_Group_Code);
PARAMETER(LCL.Item_Structure_Class_Code);
PARAMETER(LCL.Item_Level);
PARAMETER(LCL.Quality_Level);
PARAMETER(LCL.Pricing_Product_Class_Rep);
PARAMETER(LCL.Season_Product_Class_Repo);
PARAMETER(LCL.Date_of_Original_Entry);
PARAMETER(LCL.User_Profile_Name);
PARAMETER(LCL.Country_Code);
PARAMETER(LCL.Event_Code);
PARAMETER(LCL.Reason_Code);
PARAMETER(LCL.Sales_Route_Code);
PARAMETER(LCL.Modified_Flag);
PARAMETER(LCL.Substituted_Flag);
PARAMETER(LCL.OD_Schedule_Override_Sts);
PARAMETER(LCL.Invoice_Unit_Price);
PARAMETER(LCL.Invoice_Extended_Amt);
PARAMETER(LCL.Ham_Group_Number);
PARAMETER(LCL.OD_Adj_Type_Override);
PARAMETER(LCL.Affect_Trade_Fund);
PARAMETER(LCL.Affect_Commission);
PARAMETER(LCL.Affect_Pricing);
PARAMETER(LCL.Released_by_User_Sts_Y_N);
PARAMETER(LCL.Ord_TF_Exempt_Code);
PARAMETER(LCL.OD_Pallet_Type);
PARAMETER(LCL.Production_Warehouse);
PARAMETER(LCL.OD_Price_Type);
PARAMETER(LCL.Warehouse_Pallets_Loaded);
PARAMETER(LCL.Consumed_Item_Code);
PARAMETER(LCL.Deadline_Depart_Date_LH);
PARAMETER(LCL.OD_Price_Type_Ref_Num);
PARAMETER(LCL.OD_Firm_Date);
PARAMETER(LCL.Deadline_Depart_Time_LH);
PARAMETER(LCL.Price_Code);
PARAMETER(LCL.Maximum_Net_Weight);
PARAMETER(LCL.Substitution_Line_Number);
PARAMETER(LCL.Max_Qty_to_sched_per_day);
PARAMETER(LCL.Warehouse_Pallet_Tare);
PARAMETER(LCL.Warehouse_Avg_Pallet_Tare);
PARAMETER(LCL.OD_Item_Target_Price);
PARAMETER(LCL.OD_Estimated_Gross_Weight);
PARAMETER(LCL.OD_Maximum_Unit_Weight);
PARAMETER(LCL.Order_Gate_Final_Price);
PARAMETER(LCL.OD_Ceiling_Price);
PARAMETER(LCL.OD_Gate_Final_Price_Adj);
PARAMETER(LCL.OD_Weighted_Avg_Price);
PARAMETER(LCL.OD_Original_Ordered_Qty);
PARAMETER(LCL.OD_Cancel_Date);
PARAMETER(LCL.OD_Unused_Prc_7);
PARAMETER(LCL.OD_Unused_Prc_8);
PARAMETER(LCL.OD_MPR_Sent_to_USDA_Sts);
PARAMETER(LCL.OD_MPR_Prc_Ready_to_Send);
PARAMETER(LCL.OD_UnUsed_Price_Sts_3);
PARAMETER(LCL.Weight_Amount_Entered);
PARAMETER(NLL.Item_Age_Days);
PARAMETER(NLL.Production_Ovr_AgeDte_Fr);
PARAMETER(NLL.Production_Ovr_AgeDte_To);
PARAMETER(LCL.OD_Spot_Buy);
PARAMETER(LCL.OD_Clm_Full_Return_to_Plt);
PARAMETER(LCL.Order_Line_Error_Type);
PARAMETER(LCL.OD_Market_Begin_Date);
PARAMETER(LCL.OD_Market_Ending_Date);
PARAMETER(LCL.OD_Atch_to_Ord_ActShpDte);
PARAMETER(LCL.Requested_Delivery_Date);
PARAMETER(LCL.Requested_Delivery_Time);

// Send status message - 'Processing...'
MESSAGE(USR2303 *STATUS);

//?Deallocate   use before images
// WRK.Quantity Ordered Tot USR = CON.*ZERO
WRK.Quantity_Ordered_Tot_USR = *ZERO;

// WRK.Weight Ordered Tot Usr = CON.*ZERO
WRK.Weight_Ordered_Tot_Usr = *ZERO;

// WRK.Quantity Scheduled TotUsr = WRK.Quantity Scheduled PrioUs
WRK.Quantity_Scheduled_TotUsr = WRK.Quantity_Scheduled_PrioUs;

// WRK.Weight Scheduled TotUsr = WRK.Weight Scheduled PriorUsr
WRK.Weight_Scheduled_TotUsr = WRK.Weight_Scheduled_PriorUsr;

// Call program UPD Avail-To-Sell  ORD XF.
CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(WRK.Order_Sequence_Number);
PARAMETER(WRK.Order_Secondary_Line_Seq);
PARAMETER(WRK.Item_Code);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(LCL.Requested_Ship_Date);
PARAMETER(WRK.Quantity_Ordered_Tot_USR);
PARAMETER(WRK.Weight_Ordered_Tot_Usr);
PARAMETER(WRK.Quantity_Scheduled_TotUsr);
PARAMETER(WRK.Weight_Scheduled_TotUsr);
PARAMETER('OD');
PARAMETER(JOB.*PROGRAM);
PARAMETER(WRK.Item_age_days_usr);
PARAMETER(WRK.Prod_Ovr_AgeDte_Fr_Usr);
PARAMETER(WRK.Prod_Ovr_AgeDte_To_Usr);

EXECUTE FUNCTION(CHG Released by User  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1920658;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(WRK.Order_Sequence_Number);
PARAMETER(WRK.Order_Secondary_Line_Seq);
PARAMETER('N');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(Chg Schedule Override CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1934083;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(WRK.Order_Sequence_Number);
PARAMETER(WRK.Order_Secondary_Line_Seq);
PARAMETER(*BLANK);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?Allocate   use last read information
// WRK.Quantity Ordered Tot USR = WRK.Quantity Ordered PriorUsr
WRK.Quantity_Ordered_Tot_USR = WRK.Quantity_Ordered_PriorUsr;

// WRK.Weight Ordered Tot Usr = WRK.Weight Ordered Prior  Usr
WRK.Weight_Ordered_Tot_Usr = WRK.Weight_Ordered_Prior_Usr;

// WRK.Quantity Scheduled TotUsr = CON.*ZERO
WRK.Quantity_Scheduled_TotUsr = *ZERO;

// WRK.Weight Scheduled TotUsr = CON.*ZERO
WRK.Weight_Scheduled_TotUsr = *ZERO;

// Call program UPD Avail-To-Sell  ORD XF.
CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(WRK.Order_Sequence_Number);
PARAMETER(WRK.Order_Secondary_Line_Seq);
PARAMETER(WRK.Item_Code);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(LCL.Requested_Ship_Date);
PARAMETER(WRK.Quantity_Ordered_Tot_USR);
PARAMETER(WRK.Weight_Ordered_Tot_Usr);
PARAMETER(WRK.Quantity_Scheduled_TotUsr);
PARAMETER(WRK.Weight_Scheduled_TotUsr);
PARAMETER('OA');
PARAMETER(JOB.*PROGRAM);
PARAMETER(LCL.Item_Age_Days);
PARAMETER(LCL.Production_Ovr_AgeDte_Fr);
PARAMETER(LCL.Production_Ovr_AgeDte_To);

EXECUTE FUNCTION(Chg Qty/Wgt Scheduled CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1425232;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(WRK.Order_Sequence_Number);
PARAMETER(WRK.Order_Secondary_Line_Seq);
PARAMETER(WRK.Quantity_Scheduled_TotUsr);
PARAMETER(WRK.Weight_Scheduled_TotUsr);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// LCL.Post Flag USR = CND.Yes
LCL.Post_Flag_USR = 'Y';

//?Change to the Load Order Change log
DO;

// WRK.Chg Log Request Usr = CND.no
WRK.Chg_Log_Request_Usr = 'N';

CASE;

// IF LCL.Load ID is Blank
IF LCL.Load_ID = *ZERO;

//?IF this order is not associated to a load then do not
//?create the load order change log.
// IF *OTHERWISE
IF *OTHERWISE;

//?only if the load id is not = zero
//?create the from and to production date  that was just read
EXECUTE FUNCTION(Val Age Information   IF) TYPE(EXCINTFUN)                      AC1984951;
PARAMETER(WRK.Item_Code);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.Scheduled_Ship_Date);
PARAMETER(LCL.Requested_Delivery_Date);
PARAMETER(LCL.Item_Age_Days);
PARAMETER(LCL.Production_Ovr_AgeDte_Fr);
PARAMETER(LCL.Production_Ovr_AgeDte_To);
PARAMETER(LCL.Production_AgeDte_Fr);
PARAMETER(LCL.Production_AgeDte_To);
PARAMETER(WRK.Error_Status);
PARAMETER(WRK.Company_Organization);
PARAMETER('C');
{
 //?Execute internal function

 // WRK.Error Flag            USR = CND.Blank
 WRK.Error_Flag_USR = *BLANK;

 // PAR.Error Status = CND.blank
 PAR.Error_Status = *BLANK;

 // WRK.Error Reason Descript 1 = CON.*BLANK
 WRK.Error_Reason_Descript_1 = *BLANK;

 // WRK.Error Reason Descript 2 = CON.*BLANK
 WRK.Error_Reason_Descript_2 = *BLANK;

 // WRK.Error Reason Descript 3 = CON.*BLANK
 WRK.Error_Reason_Descript_3 = *BLANK;

 // WRK.Error Reason Descript 4 = CON.*BLANK
 WRK.Error_Reason_Descript_4 = *BLANK;

 // WRK.Error Reason Descript 5 = CON.*BLANK
 WRK.Error_Reason_Descript_5 = *BLANK;

 CASE;

 // IF PAR.Company Organization is Seaboard
 IF PAR.Company_Organization = 'S';

 CASE;

 // IF PAR.Requested Delivery Date is not entered
 IF PAR.Requested_Delivery_Date = *ZERO;

 // Send error message - 'Requested Delv Date is required'
 ERROR(USR4329);
 MSGPARM(PAR.Requested_Delivery_Date);

 // IF PAR.Scheduled Ship Date is not entered
 IF PAR.Scheduled_Ship_Date = *ZERO;

 // Send error message - 'Scheduled Ship Date is required when orders are assigned to load.'
 ERROR(USR2230);
 MSGPARM(PAR.Scheduled_Ship_Date);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Val Age information   XF.
 CALL PROGRAM(Val Age information   XF) ('PNQNXFR');
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.Error_Flag_USR);
 PARAMETER(WRK.Error_Reason_Descript_1);
 PARAMETER(WRK.Error_Reason_Descript_2);
 PARAMETER(WRK.Error_Reason_Descript_3);
 PARAMETER(WRK.Error_Reason_Descript_4);
 PARAMETER(WRK.Error_Reason_Descript_5);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(PAR.Item_Age_Days);
 PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
 PARAMETER(PAR.Production_Ovr_AgeDte_To);
 PARAMETER(PAR.Production_AgeDte_Fr);
 PARAMETER(PAR.Production_AgeDte_To);

 //?Verify if message should be sent if validation is required
 CASE;

 // IF WRK.Error Flag            USR is Yes
 IF WRK.Error_Flag_USR = 'Y';

 // AND PAR.Production Dates Sts Usr is Validation routine
 AND PAR.Production_Dates_Sts_Usr = 'V';

 //?message 1 Product is shipped before product is made
 CASE;

 // IF WRK.Error Reason Descript 1 NE WRK.Blank for 30          USR
 IF WRK.Error_Reason_Descript_1 <> WRK.Blank_for_30_USR;

 // Send error message - 'Prd Date is invalid for requested delivery date'
 ERROR(USR4307);
 MSGPARM(PAR.Production_AgeDte_Fr);

 ENDIF;

 //?message 2 Either Days or override date but not both
 CASE;

 // IF WRK.Error Reason Descript 2 NE WRK.Blank for 30          USR
 IF WRK.Error_Reason_Descript_2 <> WRK.Blank_for_30_USR;

 // Send error message - 'Enter Age Days or Dates'
 ERROR(USR4304);
 MSGPARM(PAR.Item_Age_Days);
 MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
 MSGPARM(PAR.Production_Ovr_AgeDte_To);

 ENDIF;

 //?message 3 With Chill Days Either Days or Override Dates required
 CASE;

 // IF WRK.Error Reason Descript 3 NE WRK.Blank for 30          USR
 IF WRK.Error_Reason_Descript_3 <> WRK.Blank_for_30_USR;

 // Send error message - 'Override Dates is after shipped date'
 ERROR(USR4305);
 MSGPARM(PAR.Item_Age_Days);
 MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
 MSGPARM(PAR.Production_Ovr_AgeDte_To);

 ENDIF;

 //?message 4 From date is > then SHIP DATE
 CASE;

 // IF WRK.Error Reason Descript 4 NE WRK.Blank for 30          USR
 IF WRK.Error_Reason_Descript_4 <> WRK.Blank_for_30_USR;

 // Send error message - 'Override Dates is after shipped date'
 ERROR(USR4305);
 MSGPARM(PAR.Item_Age_Days);
 MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
 MSGPARM(PAR.Production_Ovr_AgeDte_To);

 ENDIF;

 //?message 5 To date is > then SHIP DATE
 CASE;

 // IF WRK.Error Reason Descript 5 NE WRK.Blank for 30          USR
 IF WRK.Error_Reason_Descript_5 <> WRK.Blank_for_30_USR;

 // Send error message - 'Override Dates is after shipped date'
 ERROR(USR4305);
 MSGPARM(PAR.Item_Age_Days);
 MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
 MSGPARM(PAR.Production_Ovr_AgeDte_To);

 ENDIF;

 CASE;

 // IF PAR.Production Ovr AgeDte Fr is not entered
 IF PAR.Production_Ovr_AgeDte_Fr = *ZERO;

 // Send error message - 'Invalid Item Age Days'
 ERROR(USR4309);
 MSGPARM(PAR.Item_Age_Days);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send error message - 'Invalid Production Override Age Frm/To Dates'
 ERROR(USR4310);
 MSGPARM(PAR.Production_AgeDte_Fr);
 MSGPARM(PAR.Production_AgeDte_To);

 ENDIF;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

}


CASE;

// IF LCL.Item Age Days NE WRK.Item age days usr
IF LCL.Item_Age_Days <> WRK.Item_age_days_usr;

// WRK.Chg Log Request Usr = CND.no
WRK.Chg_Log_Request_Usr = 'N';

// LCL.Change Log Prior Value = WRK.Item age days usr
LCL.Change_Log_Prior_Value = WRK.Item_age_days_usr;

// LCL.Change Log New Value = LCL.Item Age Days
LCL.Change_Log_New_Value = LCL.Item_Age_Days;

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(LCL.Load_ID);
PARAMETER(*ZERO);
PARAMETER('AGECDE');
PARAMETER('SLS');
PARAMETER(LCL.Change_Log_Prior_Value);
PARAMETER(LCL.Change_Log_New_Value);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(*BLANK);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);

// IF LCL.Production AgeDte Fr NE WRK.Production AgeDte FrPrior
IF LCL.Production_AgeDte_Fr <> WRK.Production_AgeDte_FrPrior;

// WRK.Chg Log Request Usr = CND.yes
WRK.Chg_Log_Request_Usr = 'Y';

// IF LCL.Production AgeDte To NE WRK.Production AgeDte ToPrior
IF LCL.Production_AgeDte_To <> WRK.Production_AgeDte_ToPrior;

// WRK.Chg Log Request Usr = CND.yes
WRK.Chg_Log_Request_Usr = 'Y';

ENDIF;

CASE;

// IF WRK.Chg Log Request Usr is yes
IF WRK.Chg_Log_Request_Usr = 'Y';

//?Prior from date
CASE;

// IF WRK.Production AgeDte FrPrior NE LCL.Production AgeDte Fr
IF WRK.Production_AgeDte_FrPrior <> LCL.Production_AgeDte_Fr;

// WRK.Date (Char-8) USR = CVTVAR(WRK.Production AgeDte FrPrior)
WRK.Date_Char_8_USR = CVTVAR(WRK.Production_AgeDte_FrPrior);

// LCL.Change Log Prior Value = WRK.Date (Char-8) USR
LCL.Change_Log_Prior_Value = WRK.Date_Char_8_USR;

//?new from date
// WRK.Date (Char-8) USR = CVTVAR(LCL.Production AgeDte Fr)
WRK.Date_Char_8_USR = CVTVAR(LCL.Production_AgeDte_Fr);

// LCL.Change Log New Value = WRK.Date (Char-8) USR
LCL.Change_Log_New_Value = WRK.Date_Char_8_USR;

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(LCL.Load_ID);
PARAMETER(*ZERO);
PARAMETER('AGECDE');
PARAMETER('SLS');
PARAMETER(LCL.Change_Log_Prior_Value);
PARAMETER(LCL.Change_Log_New_Value);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(*BLANK);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);

ENDIF;

//?Prior to date
CASE;

// IF WRK.Production AgeDte ToPrior NE LCL.Production AgeDte To
IF WRK.Production_AgeDte_ToPrior <> LCL.Production_AgeDte_To;

// WRK.Date (Char-8) USR = CVTVAR(WRK.Production AgeDte ToPrior)
WRK.Date_Char_8_USR = CVTVAR(WRK.Production_AgeDte_ToPrior);

// LCL.Change Log Prior Value = WRK.Date (Char-8) USR
LCL.Change_Log_Prior_Value = WRK.Date_Char_8_USR;

//?new to date
// WRK.Date (Char-8) USR = CVTVAR(LCL.Production AgeDte To)
WRK.Date_Char_8_USR = CVTVAR(LCL.Production_AgeDte_To);

// LCL.Change Log New Value = WRK.Date (Char-8) USR
LCL.Change_Log_New_Value = WRK.Date_Char_8_USR;

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(LCL.Load_ID);
PARAMETER(*ZERO);
PARAMETER('AGECDE');
PARAMETER('SLS');
PARAMETER(LCL.Change_Log_Prior_Value);
PARAMETER(LCL.Change_Log_New_Value);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(*BLANK);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);

ENDIF;

ENDIF;

ENDIF;

ENDDO;

ENDDO;

ENDIF;

