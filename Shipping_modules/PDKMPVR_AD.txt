// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDKMPVR
// ?Date: 14.08.2025 Time: 03:34:58
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(Rtv Appl. Default Co   IF) TYPE(EXCINTFUN)                     AC1445576;
PARAMETER(JOB.*USER);
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.User_Code_Model);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Appl. Default Co   RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143068;
 PARAMETER(PAR.User_Code_Model);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

// Call program Rtv User Class        UP.
CALL PROGRAM(Rtv User Class        UP) ('PDKOUPR');
PARAMETER(PAR.User_Class_USR);

CASE;

// IF JOB.*USER is PRKTEST
IF JOB.*USER = 'PRKTEST';

// PAR.User Class USR = CND.Programmer
PAR.User_Class_USR = *PGMR;

ENDIF;

//?USER: Load screen

//?Paper Type message
CASE;

// IF PAR.Paper Type USR is Letter
IF PAR.Paper_Type_USR = '1';

// DTL.Comment Line 1 = CON.*BLANK
DTL.Comment_Line_1 = *BLANK;

//?Paper Type message
// IF PAR.Paper Type USR is Legal
IF PAR.Paper_Type_USR = '2';

// DTL.Comment Line 1 = CON.* LEGAL PAPER REQUIRED *
DTL.Comment_Line_1 = * LEGAL PAPER REQUIRED *;

ENDIF;

CASE;

// IF PAR.PRT Printer Device is Not entered
IF PAR.PRT_Printer_Device = *BLANK;

EXECUTE FUNCTION(Rtv Default Print Opt RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1277460;
PARAMETER(JOB.*USER);
PARAMETER(DTL.PRT_Printer_Device);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.PRT Hold Output Sts = CND.*NO
DTL.PRT_Hold_Output_Sts = *NO;

// DTL.PRT Save Output Sts = CND.*NO
DTL.PRT_Save_Output_Sts = *NO;

// DTL.PRT Number of Copies = CON.01
DTL.PRT_Number_of_Copies = 01;

// DTL.Hold On Jobq = CND.*NO
DTL.Hold_On_Jobq = *NO;

// DTL.Job Log Create = CND.*NO
DTL.Job_Log_Create = *NO;

//?Set Up Night-Q Run Sts
CASE;

// IF PAR.PRT Night Queue Run Sts is yes
IF PAR.PRT_Night_Queue_Run_Sts = 'Y';

// DTL.PRT Night-Q Run Sts USR = CND.*YES
DTL.PRT_Night_Q_Run_Sts_USR = *YES;

//?Set Up Night-Q Run Sts
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.PRT Night-Q Run Sts USR = CND.*NO
DTL.PRT_Night_Q_Run_Sts_USR = *NO;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.PRT Printer Device = PAR.PRT Printer Device
DTL.PRT_Printer_Device = PAR.PRT_Printer_Device;

// DTL.PRT Hold Output Sts = PAR.PRT Hold Output Sts
DTL.PRT_Hold_Output_Sts = PAR.PRT_Hold_Output_Sts;

// DTL.PRT Save Output Sts = PAR.PRT Save Output Sts
DTL.PRT_Save_Output_Sts = PAR.PRT_Save_Output_Sts;

// DTL.PRT Number of Copies = PAR.PRT Number of Copies
DTL.PRT_Number_of_Copies = PAR.PRT_Number_of_Copies;

// DTL.Hold On Jobq = PAR.Hold On Jobq
DTL.Hold_On_Jobq = PAR.Hold_On_Jobq;

// DTL.Job Log Create = PAR.Job Log Create
DTL.Job_Log_Create = PAR.Job_Log_Create;

//?Set Up Night-Q Run Sts
CASE;

// IF PAR.PRT Night Queue Run Sts is yes
IF PAR.PRT_Night_Queue_Run_Sts = 'Y';

// DTL.PRT Night-Q Run Sts USR = CND.*YES
DTL.PRT_Night_Q_Run_Sts_USR = *YES;

//?Set Up Night-Q Run Sts
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.PRT Night-Q Run Sts USR = CND.*NO
DTL.PRT_Night_Q_Run_Sts_USR = *NO;

ENDIF;

ENDIF;

//?USER: Validate fields

//?Validate Printer & Number of Copies.
EXECUTE FUNCTION(VAL Printer Device     IF) TYPE(EXCINTFUN)                     AC1277933;
PARAMETER(DTL.PRT_Printer_Device);
{
 //?Execute internal function

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 // Execute function VAL object existence   US.
 EXECUTE FUNCTION(VAL object existence   US) TYPE(EXCUSRSRC) ('JCOBJR');
 PARAMETER(PAR.PRT_Printer_Device);
 PARAMETER(*OUTQ);
 PARAMETER(PGM.*Return_code);
 {
  C                     CALL 'JCOBJC'                   CL PROGRAM
  C                     PARM #IA8VN    UA8VN  10
  C                     PARM #IOBJT    UOBJT  10
  C           W0RTN     PARM           W0RTN
 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send error message - ''&1' is invalid, please re-enter.'
 ERROR(USR0280);
 MSGPARM(PAR.PRT_Printer_Device);

 ENDIF;

}


CASE;

// IF DTL.PRT Number of Copies is GT 10
IF DTL.PRT_Number_of_Copies > 10;

CASE;

// IF WRK.First Time Flag is NO
IF WRK.First_Time_Flag = 'N';

// OR DTL.PRT Number of Copies NE PAR.PRT Number of Copies
OR DTL.PRT_Number_of_Copies <> PAR.PRT_Number_of_Copies;

// Send error message - 'Warning!! More than 10 copies requested.'
ERROR(USR1823);

// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

ENDIF;

ENDIF;

//?USER: User defined action

//?Nightq
CASE;

// IF DTL.PRT Night-Q Run Sts USR is *YES
IF DTL.PRT_Night_Q_Run_Sts_USR = *YES;

EXECUTE FUNCTION(RTV Night Queue        RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1277761;
PARAMETER(PAR.Company_Number);
PARAMETER(DTL.PRT_Night_Queue);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.PRT Night Queue Run Sts = CND.yes
DTL.PRT_Night_Queue_Run_Sts = 'Y';

//?Nightq
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.PRT Night Queue Run Sts = CND.no
DTL.PRT_Night_Queue_Run_Sts = 'N';

// DTL.PRT Night Queue = CON.*JOBD
DTL.PRT_Night_Queue = *JOBD;

ENDIF;

//?Hold
CASE;

// IF DTL.Hold On Jobq is *YES
IF DTL.Hold_On_Jobq = *YES;

// DTL.Hold = CON.*YES
DTL.Hold = *YES;

//?Hold
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Hold = CON.*JOBD
DTL.Hold = *JOBD;

ENDIF;

//?Log
CASE;

// IF DTL.Job Log Create is *YES
IF DTL.Job_Log_Create = *YES;

// DTL.Log = CON.4 00 *SECLVL
DTL.Log = '4 00 *SECLVL';

//?Log
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Log = CON.*JOBD *JOBD *JOBD
DTL.Log = *JOBD *JOBD *JOBD;

ENDIF;

//?USER: Exit program processing

CASE;

// IF DTL.*CMD key is *Exit
IF DTL.*CMD_key = '03';

PGM.*Return_code = 'Y2U9999';

RETURN;

// IF *OTHERWISE
IF *OTHERWISE;

MOVE *ALL (To: PAR From: DTL);

ENDIF;

