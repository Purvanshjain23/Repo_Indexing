// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMNZXFR
// ?Date: 14.08.2025 Time: 03:43:33
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(Prt Pick Slips DLY    RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1848956;
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Hold);
PARAMETER(PAR.Log);
{
 //?USER: Process Data record

 //?E01342 Added Load plan order condition, and code to do if Not.
 //?If Load Plan = Yes
 CASE;

 // IF DB1.Load Plan Order is yes
 IF DB1.Load_Plan_Order = 'Y';

 EXECUTE FUNCTION(RTV Load Status        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1297640;
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.Load_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Load Status is Lock
 IF LCL.Load_Status = 'L';

 //?Print pick slip
 //?First time or Reprint?
 CASE;

 // IF DB1.Event Code is 02 Load Planned
 IF DB1.Event_Code = '02';

 // LCL.Pick Print Type USR = CND.First Print
 LCL.Pick_Print_Type_USR = 'P';

 //?First time or Reprint?
 // IF DB1.Event Code is 03 Picked
 IF DB1.Event_Code = '03';

 // LCL.Pick Print Type USR = CND.Reprint
 LCL.Pick_Print_Type_USR = 'R';

 ENDIF;

 EXECUTE FUNCTION(Alc Inv/Prt Pick Slip IF) TYPE(EXCINTFUN)                      AC1511000;
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.PRT_Printer_Device);
 PARAMETER(PAR.PRT_Hold_Output_Sts);
 PARAMETER(PAR.PRT_Save_Output_Sts);
 PARAMETER(PAR.PRT_Number_of_Copies);
 PARAMETER(PAR.PRT_Night_Queue);
 PARAMETER(PAR.Hold);
 PARAMETER(PAR.Log);
 PARAMETER(LCL.Pick_Print_Type_USR);
 PARAMETER(DB1.Load_Plan_Order);
 {
  //?Execute internal function

  //?DOC
  DO;

  //?9/18/98 Purva Droge
  //?  This subroutine can be used for picking at the Load Level or
  //?  at the Order Level.  This routine was originally designed for
  //?  picking at the Load Level.  As of 9/15/98, the process have
  //?  changed to pick at the Order Level.  If picking the entire Load,
  //?  the Order Number passed in will be zero.  If picking by the
  //?  Order, the Order Number will be passed in and selected for
  //?  processing in the allocation routine by Order.
  //?10/01/07 Todd Johnson
  //?  This function is currently called from 2 external functions.
  //?  One of them is interactive, the other a submitted job. The Job
  //?  Type is now checked. The Pick Print is only submitted if this is
  //?  an interactive job. That way, the user only gets 1 completion
  //?  message for the Pick Slip Print.
  ENDDO;

  //?Is this first print?
  CASE;

  // IF PAR.Pick Print Type USR is First Print
  IF PAR.Pick_Print_Type_USR = 'P';

  //?NOTE
  DO;

  //?The following routine will go through the allocation
  //?for Warehouses that are not Lot Tracking.  The amount of I/O
  //?for detemining if at least one Warehouse on the Load is
  //?Lot Tracking is equal/greater than performing the following routine
  //?for the entire Load.
  //?.
  //?The Orders are marked as picked also in the following routine.
  ENDDO;

  EXECUTE FUNCTION(Alc Inv/Prt Pick Slip RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1511046;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   // PAR.Record Selected       USR = CND.yes
   PAR.Record_Selected_USR = 'Y';

   //?Select Order
   CASE;

   // IF PAR.Order Number is Not equal to zeros
   IF PAR.Order_Number <> *ZERO;

   // AND PAR.Order Number NE DB1.Order Number
   AND PAR.Order_Number <> DB1.Order_Number;

   // PAR.Record Selected       USR = CND.no
   PAR.Record_Selected_USR = 'N';

   ENDIF;

   //?Process Order
   CASE;

   // IF PAR.Record Selected       USR is yes
   IF PAR.Record_Selected_USR = 'Y';

   EXECUTE FUNCTION(Alc Inv/Prt Pick Slip IF) TYPE(EXCINTFUN)                      AC1511052;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   {
    //?Execute internal function

    //?Delete existing Order Inv Allocation records.
    EXECUTE FUNCTION(Del Order Inv Alloc   RT) TYPE(RTVOBJ) FILE(PDL8CPP)           AC1511054;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Order_Number);
    {
     //?USER: Process Data record

     EXECUTE FUNCTION(Del Order Inv Alloc   DL) TYPE(DLTOBJ) FILE(PDL8CPP)           AC1505797;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(DB1.Order_Sequence_Number);
     PARAMETER(DB1.Order_Secondary_Line_Seq);
     PARAMETER(DB1.Allocation_Seq_#);
    }

    EXECUTE FUNCTION(Alc Inv/Prt Pick Slip RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1511053;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Order_Number);
    {
     //?USER: Process Data record

     CASE;

     // IF DB1.Detail Line Status is Not Comp/Canc/Conf
     IF DB1.Detail_Line_Status = 'L'/'A'/'E'/'H';

     EXECUTE FUNCTION(Alc Inventory         RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC1511064;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Item_Code);
     PARAMETER(DB1.Warehouse_Code);
     PARAMETER(DB1.Order_Number);
     PARAMETER(DB1.Order_Sequence_Number);
     PARAMETER(DB1.Order_Secondary_Line_Seq);
     PARAMETER(DB1.Quantity_Scheduled);
     PARAMETER(DB1.Scheduled_Ship_Date);
     PARAMETER(DB1.Job_Date);
     {
      //?USER: Initialize routine

      MOVE *ALL (To: PAR From: CON);

      // PAR.Quantity Need USR = PAR.Quantity Scheduled
      PAR.Quantity_Need_USR = PAR.Quantity_Scheduled;

      // PAR.OIA Create Sts = CND.Auto
      PAR.OIA_Create_Sts = 'A';

      // PAR.OIA Modified Sts = CND.no
      PAR.OIA_Modified_Sts = 'N';

      // PAR.OIA Allocation Sts = CND.Active
      PAR.OIA_Allocation_Sts = 'A';

      // PAR.OIA Loc Pick Sts = CND.Partial
      PAR.OIA_Loc_Pick_Sts = *BLANK;

      //?USER: Process Data record

      CASE;

      // IF PAR.Quantity Need USR is EQ Zero
      IF PAR.Quantity_Need_USR = *ZERO;

      QUIT;

      // IF *OTHERWISE
      IF *OTHERWISE;

      CASE;

      // IF DB1.ILL Status is Available
      IF DB1.ILL_Status = 'A';

      EXECUTE FUNCTION(Rtv Available Qty     RT) TYPE(RTVOBJ) FILE(PDL8CPP)           AC1505802;
      PARAMETER(DB1.Company_Number);
      PARAMETER(DB1.Item_Code);
      PARAMETER(DB1.Warehouse_Code);
      PARAMETER(DB1.Production_Date);
      PARAMETER(DB1.Lot_Number);
      PARAMETER(DB1.Location_Code);
      PARAMETER(DB1.Location_Level);
      PARAMETER(DB1.ILL_Item_Qty_On_Hand);
      PARAMETER(PAR.Quantity_Avail_USR);
      {
       //?USER: Initialize routine

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       // PAR.Quantity Scheduled = PAR.Quantity Scheduled + DB1.OIA Alloc/Shipped Qty
       PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + DB1.OIA_Alloc_Shipped_Qty;

       //?USER: Exit processing

       // PAR.Quantity Avail USR = PAR.ILL Item Qty On-Hand - PAR.Quantity Scheduled
       PAR.Quantity_Avail_USR = PAR.ILL_Item_Qty_On_Hand - PAR.Quantity_Scheduled;

      }

      //?Quantity Available > 0
      CASE;

      // IF PAR.Quantity Avail USR is GT Zero
      IF PAR.Quantity_Avail_USR > *ZERO;

      //?Create Order Inventory Allocation Record.
      CASE;

      // IF PAR.Quantity Need USR GE PAR.Quantity Avail USR
      IF PAR.Quantity_Need_USR >= PAR.Quantity_Avail_USR;

      // PAR.OIA Loc Pick Sts = CND.Clean Out
      PAR.OIA_Loc_Pick_Sts = 'CO';

      EXECUTE FUNCTION(Crt Order Inv Alloc   IF) TYPE(EXCINTFUN)                      AC1506139;
      PARAMETER(PAR.Company_Number);
      PARAMETER(PAR.Order_Number);
      PARAMETER(PAR.Order_Sequence_Number);
      PARAMETER(PAR.Order_Secondary_Line_Seq);
      PARAMETER(PAR.Quantity_Avail_USR);
      PARAMETER(PAR.OIA_Alloc_Shipped_Wgt);
      PARAMETER(DB1.ILL_Co_Packer_Lot_Num);
      PARAMETER(PAR.OIA_Serial_Number);
      PARAMETER(PAR.OIA_Create_Sts);
      PARAMETER(PAR.OIA_Modified_Sts);
      PARAMETER(PAR.OIA_Allocation_Sts);
      PARAMETER(PAR.OIA_Loc_Pick_Sts);
      PARAMETER(PAR.OIA_Unused_Sts_1);
      PARAMETER(PAR.OIA_Unused_Sts_2);
      PARAMETER(DB1.Item_Code);
      PARAMETER(DB1.Warehouse_Code);
      PARAMETER(DB1.Production_Date);
      PARAMETER(DB1.Lot_Number);
      PARAMETER(DB1.Location_Code);
      PARAMETER(DB1.Location_Level);
      PARAMETER(PAR.EDI_Status_1);
      PARAMETER(PAR.EDI_Status_2);
      PARAMETER(PAR.EDI_Status_3);
      PARAMETER(PAR.Record_Status);
      PARAMETER(PAR.Job_Time);
      PARAMETER(PAR.User_Id);
      PARAMETER(PAR.Job_Name);
      PARAMETER(PAR.Job_Date);
      {
       //?Execute internal function

       EXECUTE FUNCTION(Rtv Next Seq Num      RT) TYPE(RTVOBJ) FILE(PDL8CPP)           AC1506138;
       PARAMETER(PAR.Company_Number);
       PARAMETER(PAR.Order_Number);
       PARAMETER(PAR.Order_Sequence_Number);
       PARAMETER(PAR.Order_Secondary_Line_Seq);
       PARAMETER(PAR.Allocation_Seq_#);
       {
        //?USER: Processing if Data record not found

        // PAR.Allocation Seq # = CON.1
        PAR.Allocation_Seq_# = 1;

        //?USER: Process Data record

        // PAR.Allocation Seq # = DB1.Allocation Seq # + CON.1
        PAR.Allocation_Seq_# = DB1.Allocation_Seq_# + 1;

        QUIT;

       }

       EXECUTE FUNCTION(Crt Order Inv Alloc   CR) TYPE(CRTOBJ) FILE(PDL8CPP)           AC1505795;
       PARAMETER(PAR.Company_Number);
       PARAMETER(PAR.Order_Number);
       PARAMETER(PAR.Order_Sequence_Number);
       PARAMETER(PAR.Order_Secondary_Line_Seq);
       PARAMETER(PAR.Allocation_Seq_#);
       PARAMETER(PAR.OIA_Alloc_Shipped_Qty);
       PARAMETER(PAR.OIA_Alloc_Shipped_Wgt);
       PARAMETER(PAR.OIA_Co_Packer_Lot_Num);
       PARAMETER(PAR.OIA_Serial_Number);
       PARAMETER(PAR.OIA_Create_Sts);
       PARAMETER(PAR.OIA_Modified_Sts);
       PARAMETER(PAR.OIA_Allocation_Sts);
       PARAMETER(PAR.OIA_Loc_Pick_Sts);
       PARAMETER(PAR.OIA_Unused_Sts_1);
       PARAMETER(PAR.OIA_Unused_Sts_2);
       PARAMETER(PAR.Item_Code);
       PARAMETER(PAR.Warehouse_Code);
       PARAMETER(PAR.Production_Date);
       PARAMETER(PAR.Lot_Number);
       PARAMETER(PAR.Location_Code);
       PARAMETER(PAR.Location_Level);
       PARAMETER(PAR.EDI_Status_1);
       PARAMETER(PAR.EDI_Status_2);
       PARAMETER(PAR.EDI_Status_3);
       PARAMETER(PAR.Record_Status);
       PARAMETER(PAR.Job_Time);
       PARAMETER(PAR.User_Id);
       PARAMETER(PAR.Job_Name);
       PARAMETER(PAR.Job_Date);
       {
        //?USER: Processing before Data update

        EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
        PARAMETER(DB1.Record_Status);
        PARAMETER(DB1.Job_Time);
        PARAMETER(DB1.User_Id);
        PARAMETER(DB1.Job_Name);
        PARAMETER(DB1.Job_Date);
        {
         //?Execute internal function

         // PAR.Record Status = CND.Active
         PAR.Record_Status = 'A';

         // PAR.Job Time = JOB.*Job time
         PAR.Job_Time = JOB.*Job_time;

         // PAR.User Id = JOB.*USER
         PAR.User_Id = JOB.*USER;

         // PAR.Job Name = JOB.*PROGRAM
         PAR.Job_Name = JOB.*PROGRAM;

         // PAR.Job Date = JOB.*Job date
         PAR.Job_Date = JOB.*Job_date;

        }

       }

      }

      // PAR.Quantity Need USR = PAR.Quantity Need USR - PAR.Quantity Avail USR
      PAR.Quantity_Need_USR = PAR.Quantity_Need_USR - PAR.Quantity_Avail_USR;

      //?Create Order Inventory Allocation Record.
      // IF PAR.Quantity Need USR LT PAR.Quantity Avail USR
      IF PAR.Quantity_Need_USR < PAR.Quantity_Avail_USR;

      // PAR.OIA Loc Pick Sts = CND.Partial
      PAR.OIA_Loc_Pick_Sts = *BLANK;

      EXECUTE FUNCTION(Crt Order Inv Alloc   IF) TYPE(EXCINTFUN)                      AC1506139;
      PARAMETER(PAR.Company_Number);
      PARAMETER(PAR.Order_Number);
      PARAMETER(PAR.Order_Sequence_Number);
      PARAMETER(PAR.Order_Secondary_Line_Seq);
      PARAMETER(PAR.Quantity_Need_USR);
      PARAMETER(PAR.OIA_Alloc_Shipped_Wgt);
      PARAMETER(DB1.ILL_Co_Packer_Lot_Num);
      PARAMETER(PAR.OIA_Serial_Number);
      PARAMETER(PAR.OIA_Create_Sts);
      PARAMETER(PAR.OIA_Modified_Sts);
      PARAMETER(PAR.OIA_Allocation_Sts);
      PARAMETER(PAR.OIA_Loc_Pick_Sts);
      PARAMETER(PAR.OIA_Unused_Sts_1);
      PARAMETER(PAR.OIA_Unused_Sts_2);
      PARAMETER(DB1.Item_Code);
      PARAMETER(DB1.Warehouse_Code);
      PARAMETER(DB1.Production_Date);
      PARAMETER(DB1.Lot_Number);
      PARAMETER(DB1.Location_Code);
      PARAMETER(DB1.Location_Level);
      PARAMETER(PAR.EDI_Status_1);
      PARAMETER(PAR.EDI_Status_2);
      PARAMETER(PAR.EDI_Status_3);
      PARAMETER(PAR.Record_Status);
      PARAMETER(PAR.Job_Time);
      PARAMETER(PAR.User_Id);
      PARAMETER(PAR.Job_Name);
      PARAMETER(PAR.Job_Date);
      {
       //?Execute internal function

       EXECUTE FUNCTION(Rtv Next Seq Num      RT) TYPE(RTVOBJ) FILE(PDL8CPP)           AC1506138;
       PARAMETER(PAR.Company_Number);
       PARAMETER(PAR.Order_Number);
       PARAMETER(PAR.Order_Sequence_Number);
       PARAMETER(PAR.Order_Secondary_Line_Seq);
       PARAMETER(PAR.Allocation_Seq_#);
       {
        //?USER: Processing if Data record not found

        // PAR.Allocation Seq # = CON.1
        PAR.Allocation_Seq_# = 1;

        //?USER: Process Data record

        // PAR.Allocation Seq # = DB1.Allocation Seq # + CON.1
        PAR.Allocation_Seq_# = DB1.Allocation_Seq_# + 1;

        QUIT;

       }

       EXECUTE FUNCTION(Crt Order Inv Alloc   CR) TYPE(CRTOBJ) FILE(PDL8CPP)           AC1505795;
       PARAMETER(PAR.Company_Number);
       PARAMETER(PAR.Order_Number);
       PARAMETER(PAR.Order_Sequence_Number);
       PARAMETER(PAR.Order_Secondary_Line_Seq);
       PARAMETER(PAR.Allocation_Seq_#);
       PARAMETER(PAR.OIA_Alloc_Shipped_Qty);
       PARAMETER(PAR.OIA_Alloc_Shipped_Wgt);
       PARAMETER(PAR.OIA_Co_Packer_Lot_Num);
       PARAMETER(PAR.OIA_Serial_Number);
       PARAMETER(PAR.OIA_Create_Sts);
       PARAMETER(PAR.OIA_Modified_Sts);
       PARAMETER(PAR.OIA_Allocation_Sts);
       PARAMETER(PAR.OIA_Loc_Pick_Sts);
       PARAMETER(PAR.OIA_Unused_Sts_1);
       PARAMETER(PAR.OIA_Unused_Sts_2);
       PARAMETER(PAR.Item_Code);
       PARAMETER(PAR.Warehouse_Code);
       PARAMETER(PAR.Production_Date);
       PARAMETER(PAR.Lot_Number);
       PARAMETER(PAR.Location_Code);
       PARAMETER(PAR.Location_Level);
       PARAMETER(PAR.EDI_Status_1);
       PARAMETER(PAR.EDI_Status_2);
       PARAMETER(PAR.EDI_Status_3);
       PARAMETER(PAR.Record_Status);
       PARAMETER(PAR.Job_Time);
       PARAMETER(PAR.User_Id);
       PARAMETER(PAR.Job_Name);
       PARAMETER(PAR.Job_Date);
       {
        //?USER: Processing before Data update

        EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
        PARAMETER(DB1.Record_Status);
        PARAMETER(DB1.Job_Time);
        PARAMETER(DB1.User_Id);
        PARAMETER(DB1.Job_Name);
        PARAMETER(DB1.Job_Date);
        {
         //?Execute internal function

         // PAR.Record Status = CND.Active
         PAR.Record_Status = 'A';

         // PAR.Job Time = JOB.*Job time
         PAR.Job_Time = JOB.*Job_time;

         // PAR.User Id = JOB.*USER
         PAR.User_Id = JOB.*USER;

         // PAR.Job Name = JOB.*PROGRAM
         PAR.Job_Name = JOB.*PROGRAM;

         // PAR.Job Date = JOB.*Job date
         PAR.Job_Date = JOB.*Job_date;

        }

       }

      }

      // PAR.Quantity Need USR = CON.*ZERO
      PAR.Quantity_Need_USR = *ZERO;

      ENDIF;

      ENDIF;

      ENDIF;

      ENDIF;

     }

     ENDIF;

    }

   }

   //?P00196 RMC 5/09/14  Chk PFS Interface PFSPCK=Y INSTEAD,SO cat2 will still
   //?  still allow picking
   EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
   PARAMETER(DB1.Company_Number);
   PARAMETER('PFSPCK');
   PARAMETER(LCL.PFS_AccuSort_Active);
   PARAMETER(LCL.PFS_Carlisle_Active);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?S00930 RMC 9/02/09   Update event to 03 if Whse is not live with Carlisle,
   //? because if it is, Carlisle will create the Picked Event "PO" rcd
   //?E8197  DN 12/22/16 - Replaced RTVOBJ with new one to NOT select
   //?  Order Detail lines that are cancelled.
   EXECUTE FUNCTION(RTV 1st Whse Not CancelRT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2130424;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(LCL.Warehouse_Code);
   {
    //?USER: Initialize routine

    // PAR.Warehouse Code = CON.*BLANK
    PAR.Warehouse_Code = *BLANK;

    //?USER: Process Data record

    // PAR.Warehouse Code = DB1.Warehouse Code
    PAR.Warehouse_Code = DB1.Warehouse_Code;

    QUIT;

   }

   EXECUTE FUNCTION(Rtv Live w/CT PFS Int RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1797641;
   PARAMETER(LCL.Warehouse_Code);
   PARAMETER(LCL.WHS_Live_with_Carlisle);
   PARAMETER(LCL.WHS_PFS_Interface);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.WHS Live w/Carlisle is Yes
   IF LCL.WHS_Live_with_Carlisle = 'Y';

   // AND LCL.PFS Carlisle Active is Yes
   AND LCL.PFS_Carlisle_Active = 'Y';

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Upd Pick Event        RT) TYPE(RTVOBJ) FILE(OPEYCPP)           AC1511799;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER('03');
   {
    //?USER: Processing if Data record not found

    EXECUTE FUNCTION(Rtv Last Event        RT) TYPE(RTVOBJ) FILE(OPEYCPP)           AC1511802;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Order_Number);
    PARAMETER(PAR.Event_Number);
    PARAMETER(PAR.Invoice_Memo_Company);
    PARAMETER(PAR.Invoice_Memo_Number);
    PARAMETER(PAR.Invoice_Memo_Suffix);
    PARAMETER(PAR.Event_Date);
    PARAMETER(PAR.Activity_Completion);
    PARAMETER(PAR.Activity_Hold);
    PARAMETER(PAR.Post_Cash_Complete);
    PARAMETER(PAR.Cross_Event_Ref_Comp);
    PARAMETER(PAR.Cross_Event_Ref_Order);
    PARAMETER(PAR.Cross_Event_Ref_Event);
    PARAMETER(PAR.Ship_To_Customer);
    {
     //?USER: Processing if Data record not found

     // PAR.Event Number = CON.1
     PAR.Event_Number = 1;

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

     QUIT;

    }

    // PAR.Event Number = PAR.Event Number + CON.1
    PAR.Event_Number = PAR.Event_Number + 1;

    EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Order_Number);
    PARAMETER(PAR.Event_Number);
    PARAMETER(PAR.Event_Code);
    PARAMETER(PAR.Invoice_Memo_Company);
    PARAMETER(PAR.Invoice_Memo_Number);
    PARAMETER(PAR.Invoice_Memo_Suffix);
    PARAMETER(PAR.Event_Date);
    PARAMETER(PAR.Activity_Completion);
    PARAMETER(PAR.Activity_Hold);
    PARAMETER(PAR.Post_Cash_Complete);
    PARAMETER(PAR.Cross_Event_Ref_Comp);
    PARAMETER(PAR.Cross_Event_Ref_Order);
    PARAMETER(PAR.Cross_Event_Ref_Event);
    PARAMETER(PAR.Ship_To_Customer);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

   }

   EXECUTE FUNCTION(CHG Order Event Code   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1324849;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   {
    //?USER: Process Data record

    CASE;

    // IF DB1.Event Code is Open Orders
    IF DB1.Event_Code < '04';

    EXECUTE FUNCTION(CHG Head Status/Event  CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1314174;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Actual_Shipped_Date);
    PARAMETER(DB1.Header_Status);
    PARAMETER('03');
    PARAMETER(DB1.Modified_Flag);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

     // Call program TRG Order Hdr CHG Trig XT.
     CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(DB1.Order_Type_Sales);
     PARAMETER(DB1.AR_Customer_Number);
     PARAMETER(DB1.Ship_To_Customer);
     PARAMETER(DB1.Ship_To_Name);
     PARAMETER(DB1.Ship_To_Address_Line_1);
     PARAMETER(DB1.Ship_To_Address_Line_2);
     PARAMETER(DB1.Ship_To_Address_Line_3);
     PARAMETER(DB1.Ship_To_City);
     PARAMETER(DB1.Ship_To_State_Code);
     PARAMETER(DB1.Ship_To_Zip_Postal_Code);
     PARAMETER(DB1.Bill_to_Customer);
     PARAMETER(DB1.Bill_to_Name);
     PARAMETER(DB1.Bill_to_Address_Line_1);
     PARAMETER(DB1.Bill_to_Address_Line_2);
     PARAMETER(DB1.Bill_to_Address_Line_3);
     PARAMETER(DB1.Bill_to_City);
     PARAMETER(DB1.Bill_to_State_Code);
     PARAMETER(DB1.Bill_to_Zip_Postal_Code);
     PARAMETER(DB1.Customer_Purchase_Order_#);
     PARAMETER(DB1.Order_Date);
     PARAMETER(DB1.Requested_Ship_Date);
     PARAMETER(DB1.Actual_Shipped_Date);
     PARAMETER(DB1.Cancel_Date);
     PARAMETER(DB1.Terms_Code);
     PARAMETER(DB1.Special_Instructions);
     PARAMETER(DB1.Special_Instructions_2);
     PARAMETER(DB1.Carrier_Code);
     PARAMETER(DB1.Comment_Print_Acknowledge);
     PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
     PARAMETER(DB1.Comment_Print_Pick_Slip);
     PARAMETER(DB1.Comment_Print_Ship_Doc);
     PARAMETER(DB1.Reason_Code);
     PARAMETER(DB1.Order_in_Use);
     PARAMETER(DB1.Header_Status);
     PARAMETER(DB1.Header_Status_Last);
     PARAMETER(DB1.Order_Type_Print_Status);
     PARAMETER(DB1.Scheduled_Ship_Date);
     PARAMETER(DB1.User_Original_Entry);
     PARAMETER(DB1.Date_of_Original_Entry);
     PARAMETER(DB1.Order_Value_Total);
     PARAMETER(DB1.Order_Weight_Total);
     PARAMETER(DB1.Credit_Hold);
     PARAMETER(DB1.Production_Hold);
     PARAMETER(DB1.New_Customer_Hold);
     PARAMETER(DB1.Requested_Delivery_Date);
     PARAMETER(DB1.Requested_Delivery_Time);
     PARAMETER(DB1.Accounts_Receiv_Ent_1);
     PARAMETER(DB1.Accounts_Receiv_Ent_2);
     PARAMETER(DB1.Load_ID);
     PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
     PARAMETER(DB1.Rated_Freight);
     PARAMETER(DB1.LTL_Flag);
     PARAMETER(DB1.Price_Audit);
     PARAMETER(DB1.Price_Status);
     PARAMETER(DB1.Shipping_Method);
     PARAMETER(DB1.Export_Status);
     PARAMETER(DB1.Palletize);
     PARAMETER(DB1.Shrink_Wrap);
     PARAMETER(DB1.Slip_Sheet);
     PARAMETER(DB1.Age_Code);
     PARAMETER(DB1.Reefer_Temperature);
     PARAMETER(DB1.Load_Type);
     PARAMETER(DB1.Attach_to_Invoice_Number);
     PARAMETER(DB1.Load_Plan_Order);
     PARAMETER(DB1.Print_Pick_Slip);
     PARAMETER(DB1.Resell_Reference_Number);
     PARAMETER(DB1.Special_Comment_1);
     PARAMETER(DB1.Special_Comment_2);
     PARAMETER(DB1.Affect_Auto_Accruals);
     PARAMETER(DB1.Sales_Route_Code);
     PARAMETER(DB1.Manager_Level_Code);
     PARAMETER(DB1.VP_Level_Code);
     PARAMETER(DB1.Attach_to_Order_Number);
     PARAMETER(DB1.Reason_for_Price_Audit);
     PARAMETER(DB1.Invoice_Number);
     PARAMETER(DB1.Invoice_Suffix);
     PARAMETER(DB1.Invoice_Date);
     PARAMETER(DB1.Event_Code);
     PARAMETER(DB1.Trans_Contol_AS400_Plant);
     PARAMETER(DB1.Modified_Flag);
     PARAMETER(DB1.A_R_order_Value_Total);
     PARAMETER(DB1.Billing_Activity_Type);
     PARAMETER(DB1.Block_Order_Flag);
     PARAMETER(DB1.Order_Certification_Flag);
     PARAMETER(DB1.Invoice_Order_Value_Tot);
     PARAMETER(DB1.Process_Sts_for_3C);
     PARAMETER(DB1.Order_Conf_Fax_Sts);
     PARAMETER(DB1.Manifest_Fax_Sts);
     PARAMETER(DB1.Invoice_Fax_Sts);
     PARAMETER(DB1.Transfer_in_Storage_Ind);
     PARAMETER(DB1.Email_Cust_On_Order_Ship);
     PARAMETER(DB1.Order_Emailed);
     PARAMETER(DB1.Export_Docs_Go_w_Driver);
     PARAMETER(DB1.Shipping_Temp_Code_C_F);
     PARAMETER(DB1.Broker_Order_Status);
     PARAMETER(DB1.Air_Freight_Order);
     PARAMETER(DB1.Order_Requires_Review);
     PARAMETER(DB1.OH_Load_Plan_Ready);
     PARAMETER(DB1.Export_USDA_Approved);
     PARAMETER(DB1.HPB_Ship_to_Warehouse);
     PARAMETER(DB1.OH_TF_Exempt_Code);
     PARAMETER(DB1.OH_Appt_Confirmation_Dt);
     PARAMETER(DB1.JPN_Invoice_Issuance_Date);
     PARAMETER(DB1.Load_Actual_Shipped_Date);
     PARAMETER(DB1.Load_BOL_Complete_Date);
     PARAMETER(DB1.Load_Truck_Departure_Date);
     PARAMETER(DB1.Maximum_Gross_Weight);
     PARAMETER(DB1.Time_of_Original_Entry);
     PARAMETER(DB1.OH_Appt_Confirmation_Tm);
     PARAMETER(DB1.Load_BOL_Complete_Time);
     PARAMETER(DB1.Load_Truck_Departure_Time);
     PARAMETER(DB1.Act_Frt_Reference_Amount);
     PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
     PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
     PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
     PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
     PARAMETER(DB1.Claim_Number);
     PARAMETER(DB1.EDI_Status_1);
     PARAMETER(DB1.EDI_Status_2);
     PARAMETER(DB1.EDI_Status_3);
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);

    }

    QUIT;

    ENDIF;

   }

   EXECUTE FUNCTION(CHG Event Code ALL     RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1427863;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER('03');
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(CHG Event Code         CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1428750;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Event_Code);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

   }

   ENDIF;

   ENDIF;

  }

  ENDIF;

  EXECUTE FUNCTION(RTV Co Document Dflts  RT) TYPE(RTVOBJ) FILE(PPAQREP)          AC1823355;
  PARAMETER(PAR.Company_Number);
  PARAMETER('PL');
  PARAMETER('ACCTG');
  PARAMETER(NLL.CDD_Name_of_Overlay);
  PARAMETER(LCL.CDD_Program_Name);
  PARAMETER(LCL.CDD_Printer_File_Name);
  PARAMETER(NLL.CDD_Sender_Phone);
  PARAMETER(NLL.CDD_Sender_Fax);
  PARAMETER(NLL.Output_Queue);
  PARAMETER(NLL.Hold_File);
  PARAMETER(NLL.Save_File);
  PARAMETER(NLL.Source_Drawer);
  PARAMETER(NLL.Printer_Device_Type);
  PARAMETER(NLL.Page_Length_2);
  PARAMETER(NLL.Page_Width_2);
  PARAMETER(NLL.Page_LPI);
  PARAMETER(NLL.Page_CPI);
  PARAMETER(NLL.Page_Overflow);
  PARAMETER(NLL.Page_Rotation);
  PARAMETER(NLL.CDD_Comment_1);
  PARAMETER(NLL.CDD_Comment_2);
  PARAMETER(NLL.CDD_Comment_3);
  PARAMETER(NLL.CDD_Comment_4);
  PARAMETER(NLL.CDD_Comment_5);
  {
   //?USER: Initialize routine

   //?** Used by HPE in STR Hog Prcr & Eval Sys-HPE System
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // Call program EUP Get Job Type RTVJOBA.
  CALL PROGRAM(EUP Get Job Type RTVJOBA) ('PMN1UPC');
  PARAMETER(LCL.Job_Type);

  // LCL.Number of Copies Pass USR = PAR.PRT Number of Copies
  LCL.Number_of_Copies_Pass_USR = PAR.PRT_Number_of_Copies;

  //?Submit job to batch?
  CASE;

  // IF LCL.Job Type is Interactive
  IF LCL.Job_Type = '1';

  // Retrieve message - 'JOB(&1) jobq(&2) log(&3) hold(&4)'
  PGM.*Sbmjob_override_string = RTVMSG(USR2684);
  PARAMETER('PRTPIKSLP');
  PARAMETER(PAR.PRT_Night_Queue);
  PARAMETER(PAR.Log);
  PARAMETER(PAR.Hold);

  // Call program PRT Pick Slip         UP.
  SBMJOB;
  CALL PROGRAM(PRT Pick Slip         UP) ('PDKJUPR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.PRT_Printer_Device);
  PARAMETER(PAR.PRT_Hold_Output_Sts);
  PARAMETER(PAR.PRT_Save_Output_Sts);
  PARAMETER(LCL.CDD_Program_Name);
  PARAMETER(LCL.CDD_Printer_File_Name);
  PARAMETER(LCL.Number_of_Copies_Pass_USR);
  SBMJOBEND;

  // Send information message - 'Job &1 has been submitted to job queue &2.'
  MESSAGE(USR2685 *INFO);
  MSGPARM('PRTPIKSLP');
  MSGPARM(PAR.PRT_Night_Queue);

  //?Submit job to batch?
  // IF LCL.Job Type is Batch
  IF LCL.Job_Type = '0';

  // Call program PRT Pick Slip         UP.
  CALL PROGRAM(PRT Pick Slip         UP) ('PDKJUPR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.PRT_Printer_Device);
  PARAMETER(PAR.PRT_Hold_Output_Sts);
  PARAMETER(PAR.PRT_Save_Output_Sts);
  PARAMETER(LCL.CDD_Program_Name);
  PARAMETER(LCL.CDD_Printer_File_Name);
  PARAMETER(LCL.Number_of_Copies_Pass_USR);

  ENDIF;

 }

 ENDIF;

 ENDIF;

 //?If Load Plan = NO, do everything here. dont go to Load Detail
 CASE;

 // IF DB1.Load Plan Order is no
 IF DB1.Load_Plan_Order = 'N';

 //?First time or Reprint?
 CASE;

 // IF DB1.Event Code is 02 Load Planned
 IF DB1.Event_Code = '02';

 // LCL.Pick Print Type USR = CND.First Print
 LCL.Pick_Print_Type_USR = 'P';

 //?First time or Reprint?
 // IF DB1.Event Code is 03 Picked
 IF DB1.Event_Code = '03';

 // LCL.Pick Print Type USR = CND.Reprint
 LCL.Pick_Print_Type_USR = 'R';

 ENDIF;

 // LCL.Record Selected       USR = CND.yes
 LCL.Record_Selected_USR = 'Y';

 //?Process Order
 CASE;

 // IF LCL.Record Selected       USR is yes
 IF LCL.Record_Selected_USR = 'Y';

 EXECUTE FUNCTION(Alc Inv/Prt Pick Slip IF) TYPE(EXCINTFUN)                      AC1511052;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 {
  //?Execute internal function

  //?Delete existing Order Inv Allocation records.
  EXECUTE FUNCTION(Del Order Inv Alloc   RT) TYPE(RTVOBJ) FILE(PDL8CPP)           AC1511054;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Del Order Inv Alloc   DL) TYPE(DLTOBJ) FILE(PDL8CPP)           AC1505797;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.Allocation_Seq_#);
  }

  EXECUTE FUNCTION(Alc Inv/Prt Pick Slip RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1511053;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Detail Line Status is Not Comp/Canc/Conf
   IF DB1.Detail_Line_Status = 'L'/'A'/'E'/'H';

   EXECUTE FUNCTION(Alc Inventory         RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC1511064;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.Quantity_Scheduled);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(DB1.Job_Date);
   {
    //?USER: Initialize routine

    MOVE *ALL (To: PAR From: CON);

    // PAR.Quantity Need USR = PAR.Quantity Scheduled
    PAR.Quantity_Need_USR = PAR.Quantity_Scheduled;

    // PAR.OIA Create Sts = CND.Auto
    PAR.OIA_Create_Sts = 'A';

    // PAR.OIA Modified Sts = CND.no
    PAR.OIA_Modified_Sts = 'N';

    // PAR.OIA Allocation Sts = CND.Active
    PAR.OIA_Allocation_Sts = 'A';

    // PAR.OIA Loc Pick Sts = CND.Partial
    PAR.OIA_Loc_Pick_Sts = *BLANK;

    //?USER: Process Data record

    CASE;

    // IF PAR.Quantity Need USR is EQ Zero
    IF PAR.Quantity_Need_USR = *ZERO;

    QUIT;

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF DB1.ILL Status is Available
    IF DB1.ILL_Status = 'A';

    EXECUTE FUNCTION(Rtv Available Qty     RT) TYPE(RTVOBJ) FILE(PDL8CPP)           AC1505802;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Lot_Number);
    PARAMETER(DB1.Location_Code);
    PARAMETER(DB1.Location_Level);
    PARAMETER(DB1.ILL_Item_Qty_On_Hand);
    PARAMETER(PAR.Quantity_Avail_USR);
    {
     //?USER: Initialize routine

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     // PAR.Quantity Scheduled = PAR.Quantity Scheduled + DB1.OIA Alloc/Shipped Qty
     PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + DB1.OIA_Alloc_Shipped_Qty;

     //?USER: Exit processing

     // PAR.Quantity Avail USR = PAR.ILL Item Qty On-Hand - PAR.Quantity Scheduled
     PAR.Quantity_Avail_USR = PAR.ILL_Item_Qty_On_Hand - PAR.Quantity_Scheduled;

    }

    //?Quantity Available > 0
    CASE;

    // IF PAR.Quantity Avail USR is GT Zero
    IF PAR.Quantity_Avail_USR > *ZERO;

    //?Create Order Inventory Allocation Record.
    CASE;

    // IF PAR.Quantity Need USR GE PAR.Quantity Avail USR
    IF PAR.Quantity_Need_USR >= PAR.Quantity_Avail_USR;

    // PAR.OIA Loc Pick Sts = CND.Clean Out
    PAR.OIA_Loc_Pick_Sts = 'CO';

    EXECUTE FUNCTION(Crt Order Inv Alloc   IF) TYPE(EXCINTFUN)                      AC1506139;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Order_Number);
    PARAMETER(PAR.Order_Sequence_Number);
    PARAMETER(PAR.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Quantity_Avail_USR);
    PARAMETER(PAR.OIA_Alloc_Shipped_Wgt);
    PARAMETER(DB1.ILL_Co_Packer_Lot_Num);
    PARAMETER(PAR.OIA_Serial_Number);
    PARAMETER(PAR.OIA_Create_Sts);
    PARAMETER(PAR.OIA_Modified_Sts);
    PARAMETER(PAR.OIA_Allocation_Sts);
    PARAMETER(PAR.OIA_Loc_Pick_Sts);
    PARAMETER(PAR.OIA_Unused_Sts_1);
    PARAMETER(PAR.OIA_Unused_Sts_2);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Lot_Number);
    PARAMETER(DB1.Location_Code);
    PARAMETER(DB1.Location_Level);
    PARAMETER(PAR.EDI_Status_1);
    PARAMETER(PAR.EDI_Status_2);
    PARAMETER(PAR.EDI_Status_3);
    PARAMETER(PAR.Record_Status);
    PARAMETER(PAR.Job_Time);
    PARAMETER(PAR.User_Id);
    PARAMETER(PAR.Job_Name);
    PARAMETER(PAR.Job_Date);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Next Seq Num      RT) TYPE(RTVOBJ) FILE(PDL8CPP)           AC1506138;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Order_Number);
     PARAMETER(PAR.Order_Sequence_Number);
     PARAMETER(PAR.Order_Secondary_Line_Seq);
     PARAMETER(PAR.Allocation_Seq_#);
     {
      //?USER: Processing if Data record not found

      // PAR.Allocation Seq # = CON.1
      PAR.Allocation_Seq_# = 1;

      //?USER: Process Data record

      // PAR.Allocation Seq # = DB1.Allocation Seq # + CON.1
      PAR.Allocation_Seq_# = DB1.Allocation_Seq_# + 1;

      QUIT;

     }

     EXECUTE FUNCTION(Crt Order Inv Alloc   CR) TYPE(CRTOBJ) FILE(PDL8CPP)           AC1505795;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Order_Number);
     PARAMETER(PAR.Order_Sequence_Number);
     PARAMETER(PAR.Order_Secondary_Line_Seq);
     PARAMETER(PAR.Allocation_Seq_#);
     PARAMETER(PAR.OIA_Alloc_Shipped_Qty);
     PARAMETER(PAR.OIA_Alloc_Shipped_Wgt);
     PARAMETER(PAR.OIA_Co_Packer_Lot_Num);
     PARAMETER(PAR.OIA_Serial_Number);
     PARAMETER(PAR.OIA_Create_Sts);
     PARAMETER(PAR.OIA_Modified_Sts);
     PARAMETER(PAR.OIA_Allocation_Sts);
     PARAMETER(PAR.OIA_Loc_Pick_Sts);
     PARAMETER(PAR.OIA_Unused_Sts_1);
     PARAMETER(PAR.OIA_Unused_Sts_2);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Production_Date);
     PARAMETER(PAR.Lot_Number);
     PARAMETER(PAR.Location_Code);
     PARAMETER(PAR.Location_Level);
     PARAMETER(PAR.EDI_Status_1);
     PARAMETER(PAR.EDI_Status_2);
     PARAMETER(PAR.EDI_Status_3);
     PARAMETER(PAR.Record_Status);
     PARAMETER(PAR.Job_Time);
     PARAMETER(PAR.User_Id);
     PARAMETER(PAR.Job_Name);
     PARAMETER(PAR.Job_Date);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
      PARAMETER(DB1.Record_Status);
      PARAMETER(DB1.Job_Time);
      PARAMETER(DB1.User_Id);
      PARAMETER(DB1.Job_Name);
      PARAMETER(DB1.Job_Date);
      {
       //?Execute internal function

       // PAR.Record Status = CND.Active
       PAR.Record_Status = 'A';

       // PAR.Job Time = JOB.*Job time
       PAR.Job_Time = JOB.*Job_time;

       // PAR.User Id = JOB.*USER
       PAR.User_Id = JOB.*USER;

       // PAR.Job Name = JOB.*PROGRAM
       PAR.Job_Name = JOB.*PROGRAM;

       // PAR.Job Date = JOB.*Job date
       PAR.Job_Date = JOB.*Job_date;

      }

     }

    }

    // PAR.Quantity Need USR = PAR.Quantity Need USR - PAR.Quantity Avail USR
    PAR.Quantity_Need_USR = PAR.Quantity_Need_USR - PAR.Quantity_Avail_USR;

    //?Create Order Inventory Allocation Record.
    // IF PAR.Quantity Need USR LT PAR.Quantity Avail USR
    IF PAR.Quantity_Need_USR < PAR.Quantity_Avail_USR;

    // PAR.OIA Loc Pick Sts = CND.Partial
    PAR.OIA_Loc_Pick_Sts = *BLANK;

    EXECUTE FUNCTION(Crt Order Inv Alloc   IF) TYPE(EXCINTFUN)                      AC1506139;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Order_Number);
    PARAMETER(PAR.Order_Sequence_Number);
    PARAMETER(PAR.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Quantity_Need_USR);
    PARAMETER(PAR.OIA_Alloc_Shipped_Wgt);
    PARAMETER(DB1.ILL_Co_Packer_Lot_Num);
    PARAMETER(PAR.OIA_Serial_Number);
    PARAMETER(PAR.OIA_Create_Sts);
    PARAMETER(PAR.OIA_Modified_Sts);
    PARAMETER(PAR.OIA_Allocation_Sts);
    PARAMETER(PAR.OIA_Loc_Pick_Sts);
    PARAMETER(PAR.OIA_Unused_Sts_1);
    PARAMETER(PAR.OIA_Unused_Sts_2);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Lot_Number);
    PARAMETER(DB1.Location_Code);
    PARAMETER(DB1.Location_Level);
    PARAMETER(PAR.EDI_Status_1);
    PARAMETER(PAR.EDI_Status_2);
    PARAMETER(PAR.EDI_Status_3);
    PARAMETER(PAR.Record_Status);
    PARAMETER(PAR.Job_Time);
    PARAMETER(PAR.User_Id);
    PARAMETER(PAR.Job_Name);
    PARAMETER(PAR.Job_Date);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Next Seq Num      RT) TYPE(RTVOBJ) FILE(PDL8CPP)           AC1506138;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Order_Number);
     PARAMETER(PAR.Order_Sequence_Number);
     PARAMETER(PAR.Order_Secondary_Line_Seq);
     PARAMETER(PAR.Allocation_Seq_#);
     {
      //?USER: Processing if Data record not found

      // PAR.Allocation Seq # = CON.1
      PAR.Allocation_Seq_# = 1;

      //?USER: Process Data record

      // PAR.Allocation Seq # = DB1.Allocation Seq # + CON.1
      PAR.Allocation_Seq_# = DB1.Allocation_Seq_# + 1;

      QUIT;

     }

     EXECUTE FUNCTION(Crt Order Inv Alloc   CR) TYPE(CRTOBJ) FILE(PDL8CPP)           AC1505795;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Order_Number);
     PARAMETER(PAR.Order_Sequence_Number);
     PARAMETER(PAR.Order_Secondary_Line_Seq);
     PARAMETER(PAR.Allocation_Seq_#);
     PARAMETER(PAR.OIA_Alloc_Shipped_Qty);
     PARAMETER(PAR.OIA_Alloc_Shipped_Wgt);
     PARAMETER(PAR.OIA_Co_Packer_Lot_Num);
     PARAMETER(PAR.OIA_Serial_Number);
     PARAMETER(PAR.OIA_Create_Sts);
     PARAMETER(PAR.OIA_Modified_Sts);
     PARAMETER(PAR.OIA_Allocation_Sts);
     PARAMETER(PAR.OIA_Loc_Pick_Sts);
     PARAMETER(PAR.OIA_Unused_Sts_1);
     PARAMETER(PAR.OIA_Unused_Sts_2);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Production_Date);
     PARAMETER(PAR.Lot_Number);
     PARAMETER(PAR.Location_Code);
     PARAMETER(PAR.Location_Level);
     PARAMETER(PAR.EDI_Status_1);
     PARAMETER(PAR.EDI_Status_2);
     PARAMETER(PAR.EDI_Status_3);
     PARAMETER(PAR.Record_Status);
     PARAMETER(PAR.Job_Time);
     PARAMETER(PAR.User_Id);
     PARAMETER(PAR.Job_Name);
     PARAMETER(PAR.Job_Date);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
      PARAMETER(DB1.Record_Status);
      PARAMETER(DB1.Job_Time);
      PARAMETER(DB1.User_Id);
      PARAMETER(DB1.Job_Name);
      PARAMETER(DB1.Job_Date);
      {
       //?Execute internal function

       // PAR.Record Status = CND.Active
       PAR.Record_Status = 'A';

       // PAR.Job Time = JOB.*Job time
       PAR.Job_Time = JOB.*Job_time;

       // PAR.User Id = JOB.*USER
       PAR.User_Id = JOB.*USER;

       // PAR.Job Name = JOB.*PROGRAM
       PAR.Job_Name = JOB.*PROGRAM;

       // PAR.Job Date = JOB.*Job date
       PAR.Job_Date = JOB.*Job_date;

      }

     }

    }

    // PAR.Quantity Need USR = CON.*ZERO
    PAR.Quantity_Need_USR = *ZERO;

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

   }

   ENDIF;

  }

 }

 //?P00196 RMC 5/09/14  Chk PFS Interface PFSPCK=Y INSTEAD,SO cat2 will still
 //?  still allow picking
 EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
 PARAMETER(DB1.Company_Number);
 PARAMETER('PFSPCK');
 PARAMETER(LCL.PFS_AccuSort_Active);
 PARAMETER(LCL.PFS_Carlisle_Active);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?S00930 RMC 9/02/09   Update event to 03 if Whse is not live with Carlisle,
 //? because if it is, Carlisle will create the Picked Event "PO" rcd
 //?E8197  DN 12/22/16 - Replaced RTVOBJ with new one to NOT select
 //?  Order Detail lines that are cancelled.
 EXECUTE FUNCTION(RTV 1st Whse Not CancelRT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2130424;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Warehouse_Code);
 {
  //?USER: Initialize routine

  // PAR.Warehouse Code = CON.*BLANK
  PAR.Warehouse_Code = *BLANK;

  //?USER: Process Data record

  // PAR.Warehouse Code = DB1.Warehouse Code
  PAR.Warehouse_Code = DB1.Warehouse_Code;

  QUIT;

 }

 EXECUTE FUNCTION(Rtv Live w/CT PFS Int RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1797641;
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(LCL.WHS_Live_with_Carlisle);
 PARAMETER(LCL.WHS_PFS_Interface);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.WHS Live w/Carlisle is Yes
 IF LCL.WHS_Live_with_Carlisle = 'Y';

 // AND LCL.PFS Carlisle Active is Yes
 AND LCL.PFS_Carlisle_Active = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Upd Pick Event        RT) TYPE(RTVOBJ) FILE(OPEYCPP)           AC1511799;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('03');
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Rtv Last Event        RT) TYPE(RTVOBJ) FILE(OPEYCPP)           AC1511802;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Event_Number);
  PARAMETER(PAR.Invoice_Memo_Company);
  PARAMETER(PAR.Invoice_Memo_Number);
  PARAMETER(PAR.Invoice_Memo_Suffix);
  PARAMETER(PAR.Event_Date);
  PARAMETER(PAR.Activity_Completion);
  PARAMETER(PAR.Activity_Hold);
  PARAMETER(PAR.Post_Cash_Complete);
  PARAMETER(PAR.Cross_Event_Ref_Comp);
  PARAMETER(PAR.Cross_Event_Ref_Order);
  PARAMETER(PAR.Cross_Event_Ref_Event);
  PARAMETER(PAR.Ship_To_Customer);
  {
   //?USER: Processing if Data record not found

   // PAR.Event Number = CON.1
   PAR.Event_Number = 1;

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  // PAR.Event Number = PAR.Event Number + CON.1
  PAR.Event_Number = PAR.Event_Number + 1;

  EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Event_Number);
  PARAMETER(PAR.Event_Code);
  PARAMETER(PAR.Invoice_Memo_Company);
  PARAMETER(PAR.Invoice_Memo_Number);
  PARAMETER(PAR.Invoice_Memo_Suffix);
  PARAMETER(PAR.Event_Date);
  PARAMETER(PAR.Activity_Completion);
  PARAMETER(PAR.Activity_Hold);
  PARAMETER(PAR.Post_Cash_Complete);
  PARAMETER(PAR.Cross_Event_Ref_Comp);
  PARAMETER(PAR.Cross_Event_Ref_Order);
  PARAMETER(PAR.Cross_Event_Ref_Event);
  PARAMETER(PAR.Ship_To_Customer);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 EXECUTE FUNCTION(CHG Order Event Code   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1324849;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Event Code is Open Orders
  IF DB1.Event_Code < '04';

  EXECUTE FUNCTION(CHG Head Status/Event  CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1314174;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Header_Status);
  PARAMETER('03');
  PARAMETER(DB1.Modified_Flag);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // Call program TRG Order Hdr CHG Trig XT.
   CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Type_Sales);
   PARAMETER(DB1.AR_Customer_Number);
   PARAMETER(DB1.Ship_To_Customer);
   PARAMETER(DB1.Ship_To_Name);
   PARAMETER(DB1.Ship_To_Address_Line_1);
   PARAMETER(DB1.Ship_To_Address_Line_2);
   PARAMETER(DB1.Ship_To_Address_Line_3);
   PARAMETER(DB1.Ship_To_City);
   PARAMETER(DB1.Ship_To_State_Code);
   PARAMETER(DB1.Ship_To_Zip_Postal_Code);
   PARAMETER(DB1.Bill_to_Customer);
   PARAMETER(DB1.Bill_to_Name);
   PARAMETER(DB1.Bill_to_Address_Line_1);
   PARAMETER(DB1.Bill_to_Address_Line_2);
   PARAMETER(DB1.Bill_to_Address_Line_3);
   PARAMETER(DB1.Bill_to_City);
   PARAMETER(DB1.Bill_to_State_Code);
   PARAMETER(DB1.Bill_to_Zip_Postal_Code);
   PARAMETER(DB1.Customer_Purchase_Order_#);
   PARAMETER(DB1.Order_Date);
   PARAMETER(DB1.Requested_Ship_Date);
   PARAMETER(DB1.Actual_Shipped_Date);
   PARAMETER(DB1.Cancel_Date);
   PARAMETER(DB1.Terms_Code);
   PARAMETER(DB1.Special_Instructions);
   PARAMETER(DB1.Special_Instructions_2);
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Comment_Print_Acknowledge);
   PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
   PARAMETER(DB1.Comment_Print_Pick_Slip);
   PARAMETER(DB1.Comment_Print_Ship_Doc);
   PARAMETER(DB1.Reason_Code);
   PARAMETER(DB1.Order_in_Use);
   PARAMETER(DB1.Header_Status);
   PARAMETER(DB1.Header_Status_Last);
   PARAMETER(DB1.Order_Type_Print_Status);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(DB1.User_Original_Entry);
   PARAMETER(DB1.Date_of_Original_Entry);
   PARAMETER(DB1.Order_Value_Total);
   PARAMETER(DB1.Order_Weight_Total);
   PARAMETER(DB1.Credit_Hold);
   PARAMETER(DB1.Production_Hold);
   PARAMETER(DB1.New_Customer_Hold);
   PARAMETER(DB1.Requested_Delivery_Date);
   PARAMETER(DB1.Requested_Delivery_Time);
   PARAMETER(DB1.Accounts_Receiv_Ent_1);
   PARAMETER(DB1.Accounts_Receiv_Ent_2);
   PARAMETER(DB1.Load_ID);
   PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
   PARAMETER(DB1.Rated_Freight);
   PARAMETER(DB1.LTL_Flag);
   PARAMETER(DB1.Price_Audit);
   PARAMETER(DB1.Price_Status);
   PARAMETER(DB1.Shipping_Method);
   PARAMETER(DB1.Export_Status);
   PARAMETER(DB1.Palletize);
   PARAMETER(DB1.Shrink_Wrap);
   PARAMETER(DB1.Slip_Sheet);
   PARAMETER(DB1.Age_Code);
   PARAMETER(DB1.Reefer_Temperature);
   PARAMETER(DB1.Load_Type);
   PARAMETER(DB1.Attach_to_Invoice_Number);
   PARAMETER(DB1.Load_Plan_Order);
   PARAMETER(DB1.Print_Pick_Slip);
   PARAMETER(DB1.Resell_Reference_Number);
   PARAMETER(DB1.Special_Comment_1);
   PARAMETER(DB1.Special_Comment_2);
   PARAMETER(DB1.Affect_Auto_Accruals);
   PARAMETER(DB1.Sales_Route_Code);
   PARAMETER(DB1.Manager_Level_Code);
   PARAMETER(DB1.VP_Level_Code);
   PARAMETER(DB1.Attach_to_Order_Number);
   PARAMETER(DB1.Reason_for_Price_Audit);
   PARAMETER(DB1.Invoice_Number);
   PARAMETER(DB1.Invoice_Suffix);
   PARAMETER(DB1.Invoice_Date);
   PARAMETER(DB1.Event_Code);
   PARAMETER(DB1.Trans_Contol_AS400_Plant);
   PARAMETER(DB1.Modified_Flag);
   PARAMETER(DB1.A_R_order_Value_Total);
   PARAMETER(DB1.Billing_Activity_Type);
   PARAMETER(DB1.Block_Order_Flag);
   PARAMETER(DB1.Order_Certification_Flag);
   PARAMETER(DB1.Invoice_Order_Value_Tot);
   PARAMETER(DB1.Process_Sts_for_3C);
   PARAMETER(DB1.Order_Conf_Fax_Sts);
   PARAMETER(DB1.Manifest_Fax_Sts);
   PARAMETER(DB1.Invoice_Fax_Sts);
   PARAMETER(DB1.Transfer_in_Storage_Ind);
   PARAMETER(DB1.Email_Cust_On_Order_Ship);
   PARAMETER(DB1.Order_Emailed);
   PARAMETER(DB1.Export_Docs_Go_w_Driver);
   PARAMETER(DB1.Shipping_Temp_Code_C_F);
   PARAMETER(DB1.Broker_Order_Status);
   PARAMETER(DB1.Air_Freight_Order);
   PARAMETER(DB1.Order_Requires_Review);
   PARAMETER(DB1.OH_Load_Plan_Ready);
   PARAMETER(DB1.Export_USDA_Approved);
   PARAMETER(DB1.HPB_Ship_to_Warehouse);
   PARAMETER(DB1.OH_TF_Exempt_Code);
   PARAMETER(DB1.OH_Appt_Confirmation_Dt);
   PARAMETER(DB1.JPN_Invoice_Issuance_Date);
   PARAMETER(DB1.Load_Actual_Shipped_Date);
   PARAMETER(DB1.Load_BOL_Complete_Date);
   PARAMETER(DB1.Load_Truck_Departure_Date);
   PARAMETER(DB1.Maximum_Gross_Weight);
   PARAMETER(DB1.Time_of_Original_Entry);
   PARAMETER(DB1.OH_Appt_Confirmation_Tm);
   PARAMETER(DB1.Load_BOL_Complete_Time);
   PARAMETER(DB1.Load_Truck_Departure_Time);
   PARAMETER(DB1.Act_Frt_Reference_Amount);
   PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
   PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
   PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
   PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
   PARAMETER(DB1.Claim_Number);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);

  }

  QUIT;

  ENDIF;

 }

 EXECUTE FUNCTION(CHG Event Code ALL     RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1427863;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('03');
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(CHG Event Code         CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1428750;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Event_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(RTV Co Document Dflts  RT) TYPE(RTVOBJ) FILE(PPAQREP)          AC1823355;
 PARAMETER(DB1.Company_Number);
 PARAMETER('PN');
 PARAMETER('ACCTG');
 PARAMETER(NLL.CDD_Name_of_Overlay);
 PARAMETER(LCL.CDD_Program_Name);
 PARAMETER(LCL.CDD_Printer_File_Name);
 PARAMETER(NLL.CDD_Sender_Phone);
 PARAMETER(NLL.CDD_Sender_Fax);
 PARAMETER(NLL.Output_Queue);
 PARAMETER(NLL.Hold_File);
 PARAMETER(NLL.Save_File);
 PARAMETER(NLL.Source_Drawer);
 PARAMETER(NLL.Printer_Device_Type);
 PARAMETER(NLL.Page_Length_2);
 PARAMETER(NLL.Page_Width_2);
 PARAMETER(NLL.Page_LPI);
 PARAMETER(NLL.Page_CPI);
 PARAMETER(NLL.Page_Overflow);
 PARAMETER(NLL.Page_Rotation);
 PARAMETER(NLL.CDD_Comment_1);
 PARAMETER(NLL.CDD_Comment_2);
 PARAMETER(NLL.CDD_Comment_3);
 PARAMETER(NLL.CDD_Comment_4);
 PARAMETER(NLL.CDD_Comment_5);
 {
  //?USER: Initialize routine

  //?** Used by HPE in STR Hog Prcr & Eval Sys-HPE System
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Call program EUP Get Job Type RTVJOBA.
 CALL PROGRAM(EUP Get Job Type RTVJOBA) ('PMN1UPC');
 PARAMETER(LCL.Job_Type);

 // LCL.Number of Copies Pass USR = PAR.PRT Number of Copies
 LCL.Number_of_Copies_Pass_USR = PAR.PRT_Number_of_Copies;

 //?Submit job to batch?
 CASE;

 // IF LCL.Job Type is Interactive
 IF LCL.Job_Type = '1';

 // Retrieve message - 'JOB(&1) jobq(&2) log(&3) hold(&4)'
 PGM.*Sbmjob_override_string = RTVMSG(USR2684);
 PARAMETER('PRTPIKSLP');
 PARAMETER(PAR.PRT_Night_Queue);
 PARAMETER(PAR.Log);
 PARAMETER(PAR.Hold);

 // Call program PRT Pick Slip         UP.
 SBMJOB;
 CALL PROGRAM(PRT Pick Slip         UP) ('PDKJUPR');
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.PRT_Printer_Device);
 PARAMETER(PAR.PRT_Hold_Output_Sts);
 PARAMETER(PAR.PRT_Save_Output_Sts);
 PARAMETER(LCL.CDD_Program_Name);
 PARAMETER(LCL.CDD_Printer_File_Name);
 PARAMETER(LCL.Number_of_Copies_Pass_USR);
 SBMJOBEND;

 // Send information message - 'Job &1 has been submitted to job queue &2.'
 MESSAGE(USR2685 *INFO);
 MSGPARM('PRTPIKSLP');
 MSGPARM(PAR.PRT_Night_Queue);

 //?Submit job to batch?
 // IF LCL.Job Type is Batch
 IF LCL.Job_Type = '0';

 // Call program PRT Pick Slip         UP.
 CALL PROGRAM(PRT Pick Slip         UP) ('PDKJUPR');
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.PRT_Printer_Device);
 PARAMETER(PAR.PRT_Hold_Output_Sts);
 PARAMETER(PAR.PRT_Save_Output_Sts);
 PARAMETER(LCL.CDD_Program_Name);
 PARAMETER(LCL.CDD_Printer_File_Name);
 PARAMETER(LCL.Number_of_Copies_Pass_USR);

 ENDIF;

 ENDIF;

}


