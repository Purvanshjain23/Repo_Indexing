// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POL2XFR
// ?Date: 14.08.2025 Time: 03:38:03
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(Del Auto Frt Charges  RT) TYPE(RTVOBJ) FILE(POBCCPP)           AC1627541;
PARAMETER(PAR.Load_ID);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.LFC Create Status is Auto
 IF DB1.LFC_Create_Status = 'A';

 EXECUTE FUNCTION(Del Load Freight Chrg DL) TYPE(DLTOBJ) FILE(POBCCPP)           AC1626762;
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.FC_Code);
 PARAMETER(DB1.LFC_Sequence_Number);
 ENDIF;

}


EXECUTE FUNCTION(Clc Freight Charges   RT) TYPE(RTVOBJ) FILE(POA9REP)           AC1627420;
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(PAR.Load_Status);
PARAMETER(PAR.Flat_Amount);
PARAMETER(PAR.Total_Stops);
PARAMETER(PAR.Carrier_Code);
PARAMETER(PAR.Load_Type);
PARAMETER(PAR.Total_Load_Miles);
PARAMETER(PAR.Shipping_Method);
PARAMETER(PAR.Ship_From_Warehouse);
PARAMETER(PAR.Ship_To_State_Code);
PARAMETER(PAR.Export_Status);
PARAMETER(PAR.BOL_Complete_Date);
PARAMETER(PAR.Shipping_Line);
PARAMETER(PAR.Discharge_Port);
PARAMETER(PAR.Load_Shag_Flag);
PARAMETER(PAR.Load_Wash_Flag);
PARAMETER(PAR.Override_Total_Load_Miles);
{
 //?USER: Initialize routine

 //?***** Change Log and Comments
 DO;

 //?** 10/10/2011 LJB E001755
 //?** Transload Terminal Fees was added as a new parm
 //?** Changed Terminal Fees from 5.0 to 11.2 field
 //?** 09/08/2011 Purva
 //?** Added Pier Pass, Port Check, and Terminal fees calcs.
 //?** 08/12/2008 LJB E00207
 //?** Override Total Load Miles was added as a new parm
 //?** Use override in Clc Frt Charge UOM IF, instead of total ld miles
 //?** 08/04/2006 LJB A005-T025
 //?** Retrieve the next seq# for this freight charge code
 //?** 11/06/2006 RMC TRF015
 //?** If FUEL, check carrier for double fuel flag to double the charge
 ENDDO;

 //?USER: Process Data record

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(LCL.Warehouse_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?SEL: Load Type
 CASE;

 // IF DB1.FC Load Type Select is Bulk/Regular
 IF DB1.FC_Load_Type_Select = 'B'/'R';

 CASE;

 // IF PAR.Load Type NE DB1.FC Load Type Select
 IF PAR.Load_Type <> DB1.FC_Load_Type_Select;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?SEL: Export Select
 CASE;

 // IF DB1.FC Export Select is Export
 IF DB1.FC_Export_Select = 'E';

 CASE;

 // IF PAR.Export Status is no
 IF PAR.Export_Status = 'N';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?SEL: Export Select
 // IF DB1.FC Export Select is Domestic
 IF DB1.FC_Export_Select = 'D';

 CASE;

 // IF PAR.Export Status is yes
 IF PAR.Export_Status = 'Y';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?SEL: Export Select
 // IF DB1.FC Export Select is Not International
 IF DB1.FC_Export_Select = 'N';

 CASE;

 // IF PAR.Ship To State Code is International Accounts
 IF PAR.Ship_To_State_Code = '.';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?SEL: Export Select
 // IF DB1.FC Export Select is International
 IF DB1.FC_Export_Select = 'I';

 CASE;

 // IF PAR.Ship To State Code is Not International
 IF PAR.Ship_To_State_Code <> '.';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?SEL: Ship To State
 CASE;

 // IF DB1.FC State Select is Yes
 IF DB1.FC_State_Select = 'Y';

 EXECUTE FUNCTION(Clc State Charge      RT) TYPE(RTVOBJ) FILE(POBAREP)           AC1627447;
 PARAMETER(DB1.FC_Code);
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.Record_Found_USR);
 {
  //?USER: Initialize routine

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  //?05/12/04 SLM PKTR01 Multi-Company - Function was changed
  //?                                    to remove Company RST or Pos
  EXECUTE FUNCTION(Clc State Charge      RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1627443;
  PARAMETER(PAR.Load_ID);
  PARAMETER(DB1.State_Code);
  PARAMETER(PAR.Record_Found_USR);
  {
   //?USER: Initialize routine

   //?05/12/04 SLM PKTR01 Multi-Company - Function was changed
   //?                                    to remove Company RST or Pos
   //?USER: Process Data record

   // PAR.Record Found USR = CND.Record Found
   PAR.Record_Found_USR = 'Y';

  }

  CASE;

  // IF PAR.Record Found USR is Record Found
  IF PAR.Record_Found_USR = 'Y';

  QUIT;

  ENDIF;

 }

 CASE;

 // IF LCL.Record Found USR is Record Not Found
 IF LCL.Record_Found_USR = 'N';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Fuel SurChrg Rate IF) TYPE(EXCINTFUN)                      AC1627433;
 PARAMETER('FUEL');
 PARAMETER(LCL.FC_Rate_Amount);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(PAR.Load_Type);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Prior Sunday      RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1410775;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.FCR_Week_Begin_Date);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   CASE;

   // IF DB1.Day of Week is Sunday
   IF DB1.Day_of_Week = '1';

   // PAR.Date Sun USR = DB1.Post to G/L Date
   PAR.Date_Sun_USR = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  EXECUTE FUNCTION(Rtv Frt Charge Rate   RT) TYPE(RTVOBJ) FILE(POBBCPP)           AC1627437;
  PARAMETER(PAR.FC_Code);
  PARAMETER(PAR.FCR_Week_Begin_Date);
  PARAMETER(PAR.FCR_Rate_Amount);
  PARAMETER(PAR.Load_Type);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PAR.FCR Rate Amount = DB1.FCR Rate Amount
   PAR.FCR_Rate_Amount = DB1.FCR_Rate_Amount;

   CASE;

   // IF PAR.Load Type is Bulk
   IF PAR.Load_Type = 'B';

   // PAR.FCR Rate Amount = DB1.FCR Rate Amount 2
   PAR.FCR_Rate_Amount = DB1.FCR_Rate_Amount_2;

   ENDIF;

  }

 }

 CASE;

 // IF LCL.FC Rate Amount is Not Entered
 IF LCL.FC_Rate_Amount = *ZERO;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

 //?SEL: Shag/Wash Select
 CASE;

 // IF DB1.FC Shag/Wash Select is Yes
 IF DB1.FC_Shag_Wash_Select = 'Y';

 CASE;

 // IF DB1.FC Special Type is Shag
 IF DB1.FC_Special_Type = 'H';

 // AND PAR.Load Shag Flag is Not Yes
 AND PAR.Load_Shag_Flag = *BLANK/'N';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 // IF DB1.FC Special Type is Wash
 IF DB1.FC_Special_Type = 'W';

 // AND PAR.Load Wash Flag is Not Yes
 AND PAR.Load_Wash_Flag = *BLANK/'N';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?SEL: Effective Date
 CASE;

 // IF PAR.Scheduled Ship Date LT DB1.FC Auto Calc Effective
 IF PAR.Scheduled_Ship_Date < DB1.FC_Auto_Calc_Effective;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?SEL: Export Fresh/Frozen Select
 CASE;

 // IF PAR.Export Status is yes
 IF PAR.Export_Status = 'Y';

 // AND PAR.Ship To State Code is International Accounts
 AND PAR.Ship_To_State_Code = '.';

 CASE;

 // IF DB1.FC Fresh/Frozen Select is Fresh
 IF DB1.FC_ExpInt_FR_FZ_Select = '1';

 CASE;

 // IF LCL.Warehouse Type is Frozen
 IF LCL.Warehouse_Type = 'FZ';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 // IF DB1.FC Fresh/Frozen Select is Frozen
 IF DB1.FC_ExpInt_FR_FZ_Select = '2';

 CASE;

 // IF LCL.Warehouse Type is Fresh
 IF LCL.Warehouse_Type = 'FR';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

 //?SEL: Transportation Mode
 CASE;

 // IF DB1.FC Trans Mode Select is Valid Values
 IF DB1.FC_Trans_Mode_Select = 'R'/'T';

 EXECUTE FUNCTION(Transportation Mode DRV) TYPE(DRVFLD)                          AC1889819;
 PARAMETER(LCL.Transportation_Mode_DRV);
 PARAMETER(PAR.Shipping_Method);
 {
  //?Calculate derived field

  // PAR.Transportation Mode DRV = SUBSTRING(PAR.Shipping Method,CON.2,CON.1)
  PAR.Transportation_Mode_DRV = SUBSTRING(PAR.Shipping_Method:2:1);

 }

 CASE;

 // IF LCL.Transportation Mode DRV NE DB1.FC Trans Mode Select
 IF LCL.Transportation_Mode_DRV <> DB1.FC_Trans_Mode_Select;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?SEL: Freight Rate Type Select
 CASE;

 // IF DB1.FC Freight Rate Type is Flat Rate
 IF DB1.FC_Freight_Rate_Type_Sel = 'F';

 CASE;

 // IF PAR.Flat Amount is EQ Zero
 IF PAR.Flat_Amount = 0;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?SEL: Freight Rate Type Select
 // IF DB1.FC Freight Rate Type is Rated by Mile/State
 IF DB1.FC_Freight_Rate_Type_Sel = 'R';

 CASE;

 // IF PAR.Flat Amount is GT Zero
 IF PAR.Flat_Amount > *ZERO;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?SEL: Company
 CASE;

 // IF DB1.FC Company Select is Not All
 IF DB1.FC_Company_Select = 'X'/'S';

 EXECUTE FUNCTION(Sel Company           RT) TYPE(RTVOBJ) FILE(PME4REP)           AC1926413;
 PARAMETER(DB1.FC_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.FC_Company_Select);
 PARAMETER(PGM.*Record_selected);
 {
  //?USER: Initialize routine

  // LCL.Record Found USR = CND.Record Not Found
  LCL.Record_Found_USR = 'N';

  //?USER: Process Data record

  CASE;

  // IF DB1.Record Status is Active/*blanks
  IF DB1.Record_Status = *BLANK/'A';

  CASE;

  // IF PAR.FC Company Select is All Except
  IF PAR.FC_Company_Select = 'X';

  CASE;

  // IF PAR.Company Number EQ DB1.Company Number
  IF PAR.Company_Number = DB1.Company_Number;

  // PAR.*Record selected = CND.*NO
  PAR.*Record_selected = 'N';

  QUIT;

  ENDIF;

  // IF PAR.FC Company Select is Only Selected
  IF PAR.FC_Company_Select = 'S';

  CASE;

  // IF PAR.Company Number EQ DB1.Company Number
  IF PAR.Company_Number = DB1.Company_Number;

  // LCL.Record Found USR = CND.Record Found
  LCL.Record_Found_USR = 'Y';

  ENDIF;

  ENDIF;

  ENDIF;

  //?USER: Exit processing

  CASE;

  // IF PAR.FC Company Select is Only Selected
  IF PAR.FC_Company_Select = 'S';

  CASE;

  // IF LCL.Record Found USR is Record Not Found
  IF LCL.Record_Found_USR = 'N';

  // PAR.*Record selected = CND.*NO
  PAR.*Record_selected = 'N';

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?SEL: Company Carrier
 CASE;

 // IF DB1.FC Company/Carrier Select is Not All
 IF DB1.FC_Company_Carrier_Select = 'X'/'S';

 EXECUTE FUNCTION(Sel Co/Carrier        RT) TYPE(RTVOBJ) FILE(PME5REP)           AC1926421;
 PARAMETER(DB1.FC_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(DB1.FC_Company_Carrier_Select);
 PARAMETER(PGM.*Record_selected);
 {
  //?USER: Initialize routine

  // LCL.Record Found USR = CND.Record Not Found
  LCL.Record_Found_USR = 'N';

  //?USER: Process Data record

  CASE;

  // IF DB1.Record Status is Active/*blanks
  IF DB1.Record_Status = *BLANK/'A';

  CASE;

  // IF PAR.FC Carrier Select is All Except
  IF PAR.FC_Company_Carrier_Select = 'X';

  CASE;

  // IF PAR.Carrier Code EQ DB1.Carrier Code
  IF PAR.Carrier_Code = DB1.Carrier_Code;

  // AND PAR.Company Number EQ DB1.Company Number
  AND PAR.Company_Number = DB1.Company_Number;

  // PAR.*Record selected = CND.*NO
  PAR.*Record_selected = 'N';

  QUIT;

  ENDIF;

  // IF PAR.FC Carrier Select is Only Selected
  IF PAR.FC_Company_Carrier_Select = 'S';

  CASE;

  // IF PAR.Carrier Code EQ DB1.Carrier Code
  IF PAR.Carrier_Code = DB1.Carrier_Code;

  // AND PAR.Company Number EQ DB1.Company Number
  AND PAR.Company_Number = DB1.Company_Number;

  // LCL.Record Found USR = CND.Record Found
  LCL.Record_Found_USR = 'Y';

  ENDIF;

  ENDIF;

  ENDIF;

  //?USER: Exit processing

  CASE;

  // IF PAR.FC Carrier Select is Only Selected
  IF PAR.FC_Company_Carrier_Select = 'S';

  CASE;

  // IF LCL.Record Found USR is Record Not Found
  IF LCL.Record_Found_USR = 'N';

  // PAR.*Record selected = CND.*NO
  PAR.*Record_selected = 'N';

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?Record Selected
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // PAR.LFC Carrier Code = PAR.Carrier Code
 PAR.LFC_Carrier_Code = PAR.Carrier_Code;

 // PAR.Double Fuel Surcharge Sts = CND.No
 PAR.Double_Fuel_Surcharge_Sts = 'N';

 // PAR.Freight Rate USR = DB1.FC Rate Amount
 PAR.Freight_Rate_USR = DB1.FC_Rate_Amount;

 //?Fuel/Freight/Port/Pier/Terminal
 CASE;

 // IF DB1.FC Special Type is Fuel Base
 IF DB1.FC_Special_Type = 'F';

 //?Use BOL Cmplt dt, if not there use Sched Ship Date as it was before. RMC
 CASE;

 // IF PAR.BOL Complete Date is Entered
 IF PAR.BOL_Complete_Date <> *ZERO;

 // WRK.Scheduled Ship Date = PAR.BOL Complete Date
 WRK.Scheduled_Ship_Date = PAR.BOL_Complete_Date;

 //?Use BOL Cmplt dt, if not there use Sched Ship Date as it was before. RMC
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Scheduled Ship Date = PAR.Scheduled Ship Date
 WRK.Scheduled_Ship_Date = PAR.Scheduled_Ship_Date;

 ENDIF;

 EXECUTE FUNCTION(Rtv Fuel SurChrg Rate IF) TYPE(EXCINTFUN)                      AC1627433;
 PARAMETER(DB1.FC_Code);
 PARAMETER(PAR.Freight_Rate_USR);
 PARAMETER(PAR.Company_Number);
 PARAMETER(WRK.Scheduled_Ship_Date);
 PARAMETER(PAR.Load_Type);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Prior Sunday      RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1410775;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.FCR_Week_Begin_Date);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   CASE;

   // IF DB1.Day of Week is Sunday
   IF DB1.Day_of_Week = '1';

   // PAR.Date Sun USR = DB1.Post to G/L Date
   PAR.Date_Sun_USR = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  EXECUTE FUNCTION(Rtv Frt Charge Rate   RT) TYPE(RTVOBJ) FILE(POBBCPP)           AC1627437;
  PARAMETER(PAR.FC_Code);
  PARAMETER(PAR.FCR_Week_Begin_Date);
  PARAMETER(PAR.FCR_Rate_Amount);
  PARAMETER(PAR.Load_Type);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PAR.FCR Rate Amount = DB1.FCR Rate Amount
   PAR.FCR_Rate_Amount = DB1.FCR_Rate_Amount;

   CASE;

   // IF PAR.Load Type is Bulk
   IF PAR.Load_Type = 'B';

   // PAR.FCR Rate Amount = DB1.FCR Rate Amount 2
   PAR.FCR_Rate_Amount = DB1.FCR_Rate_Amount_2;

   ENDIF;

  }

 }

 EXECUTE FUNCTION(RTV Last Stop Info    RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1604222;
 PARAMETER(PAR.Load_ID);
 PARAMETER(NLL.Ship_To_Customer);
 PARAMETER(NLL.Ship_To_Name);
 PARAMETER(NLL.Ship_To_Address_Line_1);
 PARAMETER(NLL.Ship_To_Address_Line_2);
 PARAMETER(NLL.Ship_To_Address_Line_3);
 PARAMETER(PAR.Destination_City);
 PARAMETER(NLL.Ship_To_State_Code);
 PARAMETER(NLL.Ship_To_Zip_Postal_Code);
 PARAMETER(NLL.Salesperson_Name);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Last Stop Info     RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1604224;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Ship_To_Name);
  PARAMETER(PAR.Ship_To_Address_Line_1);
  PARAMETER(PAR.Ship_To_Address_Line_2);
  PARAMETER(PAR.Ship_To_Address_Line_3);
  PARAMETER(PAR.Ship_To_City);
  PARAMETER(PAR.Ship_To_State_Code);
  PARAMETER(PAR.Ship_To_Zip_Postal_Code);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(LCL.Sales_Route_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
  PARAMETER(LCL.Sales_Route_Code);
  PARAMETER(LCL.Salesperson_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV Salesperson Name   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1111501;
  PARAMETER(LCL.Salesperson_Code);
  PARAMETER(PAR.Salesperson_Name);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  QUIT;

 }

 // Execute function CVT Str to Upper Alpha US.
 EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
 PARAMETER(PAR.Destination_City);
 PARAMETER(LCL.Destination_City);
 {
  PDWEUFR:  PGM PARM(&STRIN &STROUT)

  CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
 }

 EXECUTE FUNCTION(Rtv double fuel surch RT) TYPE(RTVOBJ) FILE(PDLECPP)           AC1799279;
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(LCL.Destination_City);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Double_Fuel_Surcharge_Sts);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?Check for double fuel per State / State
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 EXECUTE FUNCTION(Rtv double fuel surch RT) TYPE(RTVOBJ) FILE(PDLECPP)           AC1799279;
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Double_Fuel_Surcharge_Sts);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 ENDIF;

 //?Fuel/Freight/Port/Pier/Terminal
 // IF DB1.FC Special Type is Ocean
 IF DB1.FC_Special_Type = 'O';

 EXECUTE FUNCTION(Rtv Destination Rates RT) TYPE(RTVOBJ) FILE(PDLECPP)           AC1634972;
 PARAMETER(PAR.Shipping_Line);
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(PAR.Discharge_Port);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(NLL.Flat_Rate);
 PARAMETER(NLL.CDR_Unit_of_Measure);
 PARAMETER(NLL.Bulk_Rate);
 PARAMETER(LCL.Export_Fresh_Flat_Amt);
 PARAMETER(LCL.Export_Frozen_Flat_Amt);
 PARAMETER(NLL.Double_Fuel_Surcharge_Sts);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Warehouse Type is Fresh
 IF LCL.Warehouse_Type = 'FR';

 // PAR.Freight Rate USR = LCL.Export Fresh Flat Amt
 PAR.Freight_Rate_USR = LCL.Export_Fresh_Flat_Amt;

 // IF LCL.Warehouse Type is Frozen
 IF LCL.Warehouse_Type = 'FZ';

 // PAR.Freight Rate USR = LCL.Export Frozen Flat Amt
 PAR.Freight_Rate_USR = LCL.Export_Frozen_Flat_Amt;

 ENDIF;

 //?Fuel/Freight/Port/Pier/Terminal
 // IF DB1.FC Special Type is Pier Pass
 IF DB1.FC_Special_Type = 'P';

 EXECUTE FUNCTION(Rtv Pier Pass Fee     RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC2028032;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Freight_Rate_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.OHE Pier Pass Fee Amount = PAR.OHE Pier Pass Fee Amount + DB1.OHE Pier Pass Fee Amount
  PAR.OHE_Pier_Pass_Fee_Amount = PAR.OHE_Pier_Pass_Fee_Amount
  + DB1.OHE_Pier_Pass_Fee_Amount;

 }

 //?Fuel/Freight/Port/Pier/Terminal
 // IF DB1.FC Special Type is Port Check
 IF DB1.FC_Special_Type = 'C';

 EXECUTE FUNCTION(Rtv Port Check        RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC2028034;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Freight_Rate_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.OHE Port Check Fee Amount = PAR.OHE Port Check Fee Amount + DB1.OHE Port Check Fee Amount
  PAR.OHE_Port_Check_Fee_Amount = PAR.OHE_Port_Check_Fee_Amount
  + DB1.OHE_Port_Check_Fee_Amount;

 }

 //?Fuel/Freight/Port/Pier/Terminal
 // IF DB1.FC Special Type is Terminal
 IF DB1.FC_Special_Type = 'T';

 EXECUTE FUNCTION(Rtv Terminal Fee      RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC2028033;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Freight_Rate_USR);
 PARAMETER(PAR.LFC_Carrier_Code);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Transload Terminal Fees = PAR.Transload Terminal Fees + DB1.Transload Terminal Fees
  PAR.Transload_Terminal_Fees = PAR.Transload_Terminal_Fees + DB1.Transload_Terminal_Fees;

  EXECUTE FUNCTION(Rtv Transload Carrier RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC2030285;
  PARAMETER(DB1.Load_ID);
  PARAMETER(PAR.Transloader_Carrier_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

 }

 ENDIF;

 //?** Use Override miles, if entered, else use Total Load Miles
 CASE;

 // IF PAR.Override Total Load Miles is Entered
 IF PAR.Override_Total_Load_Miles <> *ZERO;

 // WRK.Total Load Miles = PAR.Override Total Load Miles
 WRK.Total_Load_Miles = PAR.Override_Total_Load_Miles;

 //?** Use Override miles, if entered, else use Total Load Miles
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Total Load Miles = PAR.Total Load Miles
 WRK.Total_Load_Miles = PAR.Total_Load_Miles;

 ENDIF;

 EXECUTE FUNCTION(Clc Frt Charge UOM    IF) TYPE(EXCINTFUN)                      AC1627439;
 PARAMETER(PAR.FC_Rate_Amount);
 PARAMETER(DB1.FC_Unit_of_Measure);
 PARAMETER(DB1.FC_Frt_Add_Deduct);
 PARAMETER(DB1.FC_Special_Type);
 PARAMETER(WRK.Total_Load_Miles);
 PARAMETER(PAR.Total_Stops);
 PARAMETER(PAR.LFC_Amount);
 PARAMETER(PAR.Freight_Rate_USR);
 PARAMETER(PAR.Carrier_Code);
 {
  //?Execute internal function

  //?** Pass either Override Total Load Miles or Total Load Miles
  //?** in the PAR.Total Load Miles field              E00207
  CASE;

  // IF PAR.FC Unit of Measure is Flat
  IF PAR.FC_Unit_of_Measure = 'FL';

  // Flat Amount
  PAR.LFC_Amount = PAR.Freight_Rate_USR * 1 'H';

  // IF PAR.FC Unit of Measure is Mile
  IF PAR.FC_Unit_of_Measure = 'ML';

  // PAR.LFC Amount = PAR.Freight Rate USR * PAR.Total Load Miles *Rounded
  PAR.LFC_Amount = PAR.Freight_Rate_USR * PAR.Total_Load_Miles 'H';

  // IF PAR.FC Unit of Measure is Stop
  IF PAR.FC_Unit_of_Measure = 'ST';

  EXECUTE FUNCTION(Rtv Stop Charge Amt   RT) TYPE(RTVOBJ) FILE(PMABREP)           AC1799298;
  PARAMETER(PAR.Carrier_Code);
  PARAMETER('STOP');
  PARAMETER(JOB.*Job_date);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Total_Stops);
  PARAMETER(PAR.LFC_Amount);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   //?First time - save effective date to only read those records
   CASE;

   // IF LCL.CFC Effective Date is not entered
   IF LCL.CFC_Effective_Date = *ZERO;

   // LCL.CFC Effective Date = DB1.CFC Effective Date
   LCL.CFC_Effective_Date = DB1.CFC_Effective_Date;

   ENDIF;

   //?Calc if ...
   CASE;

   // IF DB1.CFC Effective Date NE LCL.CFC Effective Date
   IF DB1.CFC_Effective_Date <> LCL.CFC_Effective_Date;

   // OR PAR.Total Stops is One Stop
   OR PAR.Total_Stops = 1;

   //?Calc if ...
   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.CFC Line/Stop Number = DB1.CFC Line/Stop Number + CON.1
   LCL.CFC_Line_Stop_Number = DB1.CFC_Line_Stop_Number + 1;

   CASE;

   // IF LCL.CFC Line/Stop Number LE PAR.Total Stops
   IF LCL.CFC_Line_Stop_Number <= PAR.Total_Stops;

   // PAR.Stop Charge USR = PAR.Stop Charge USR + DB1.CFC Charge Amount
   PAR.Stop_Charge_USR = PAR.Stop_Charge_USR + DB1.CFC_Charge_Amount;

   // LCL.CFC Charge Amount = DB1.CFC Charge Amount
   LCL.CFC_Charge_Amount = DB1.CFC_Charge_Amount;

   ENDIF;

   ENDIF;

   //?USER: Exit processing

   //?If total stops exceeds Tiered stop charges, use the last charge for
   //? the remaining stops
   CASE;

   // IF PAR.Total Stops GT LCL.CFC Line/Stop Number
   IF PAR.Total_Stops > LCL.CFC_Line_Stop_Number;

   // LCL.Total Stops = PAR.Total Stops - LCL.CFC Line/Stop Number
   LCL.Total_Stops = PAR.Total_Stops - LCL.CFC_Line_Stop_Number;

   // WRK.Stop Charge USR = LCL.Total Stops * LCL.CFC Charge Amount *
   WRK.Stop_Charge_USR = LCL.Total_Stops * LCL.CFC_Charge_Amount;

   // PAR.Stop Charge USR = PAR.Stop Charge USR + WRK.Stop Charge USR
   PAR.Stop_Charge_USR = PAR.Stop_Charge_USR + WRK.Stop_Charge_USR;

   ENDIF;

  }

  //?If Tiered stop charges not found
  CASE;

  // IF PAR.LFC Amount is Not Entered
  IF PAR.LFC_Amount = *ZERO;

  // Amount by Stop
  PAR.LFC_Amount = PAR.Freight_Rate_USR * ( PAR.Total_Stops - 1 ) 'H';

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.FC Frt Add/Deduct is Deduct
  IF PAR.FC_Frt_Add_Deduct = 'D';

  // PAR.LFC Amount = PAR.LFC Amount * CON.-1 *Rounded
  PAR.LFC_Amount = PAR.LFC_Amount * -1 'H';

  ENDIF;

 }

 CASE;

 // IF DB1.FC Special Type is Fuel Base
 IF DB1.FC_Special_Type = 'F';

 //?TRF015 11/6/6 RMC Double charge if par.double is Yes
 CASE;

 // IF PAR.Double Fuel Surcharge Sts is Yes
 IF PAR.Double_Fuel_Surcharge_Sts = 'Y';

 // PAR.LFC Amount = PAR.LFC Amount * CON.2 *Rounded
 PAR.LFC_Amount = PAR.LFC_Amount * 2 'H';

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.LFC Amount is Entered
 IF PAR.LFC_Amount <> *ZERO;

 //?02/29/08 PKD Replaced the CR with IF.
 EXECUTE FUNCTION(Crt Load Freight Chrg IF) TYPE(EXCINTFUN)                      AC1869581;
 PARAMETER(PAR.Load_ID);
 PARAMETER(DB1.FC_Code);
 PARAMETER(WRK.LFC_Sequence_Number);
 PARAMETER(PAR.LFC_Amount);
 PARAMETER(DB1.FC_Act_Frt_Include_Sts);
 PARAMETER(PAR.LFC_Carrier_Code);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(DB1.FC_Charge_Category);
 PARAMETER(DB1.FC_Shag_Wash_Comp);
 PARAMETER(DB1.FC_Tot_Freight_Inc_Sts);
 PARAMETER(DB1.FC_Special_Type);
 PARAMETER(WRK.LFC_TFP_Processed);
 PARAMETER(DB1.FC_Reference_Required);
 PARAMETER(WRK.LFC_Unused_Sts_5);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Seq          RT) TYPE(RTVOBJ) FILE(POBCCPP)           AC1869586;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.FC_Code);
  PARAMETER(PAR.LFC_Sequence_Number);
  {
   //?USER: Processing if Data record not found

   // PAR.LFC Sequence Number = CON.1
   PAR.LFC_Sequence_Number = 1;

   //?USER: Process Data record

   // PAR.LFC Sequence Number = DB1.LFC Sequence Number + CON.1
   PAR.LFC_Sequence_Number = DB1.LFC_Sequence_Number + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Load Freight Chrg CR) TYPE(CRTOBJ) FILE(POBCCPP)           AC1626760;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.FC_Code);
  PARAMETER(PAR.LFC_Sequence_Number);
  PARAMETER(PAR.LFC_Amount);
  PARAMETER(PAR.LFC_Act_Frt_Include_Sts);
  PARAMETER(PAR.LFC_Carrier_Code);
  PARAMETER(PAR.LFC_Create_Status);
  PARAMETER(PAR.LFC_Unused_Sts);
  PARAMETER(PAR.LFC_Charge_Category);
  PARAMETER(PAR.LFC_Shag_Wash_Comp);
  PARAMETER(PAR.LFC_Tot_Freight_Inc_Sts);
  PARAMETER(PAR.LFC_Special_Type);
  PARAMETER(PAR.LFC_TFP_Processed);
  PARAMETER(PAR.LFC_Reference_Required);
  PARAMETER(PAR.LFC_Unused_Sts_5);
  PARAMETER(PAR.LFC_TFP_Carrier_Paid_Date);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Create_Date);
  PARAMETER(PAR.Create_Time);
  PARAMETER(PAR.Create_User);
  PARAMETER(PAR.Create_Program);
  PARAMETER(PAR.Change_Date);
  PARAMETER(PAR.Change_Time);
  PARAMETER(PAR.Change_User);
  PARAMETER(PAR.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    //?*** Set RECORD STATUS field. ***
    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    //?*** Set CREATE fields. ***
    // PAR.Create Date = JOB.*Job date
    PAR.Create_Date = JOB.*Job_date;

    // PAR.Create Time = JOB.*Job time
    PAR.Create_Time = JOB.*Job_time;

    // PAR.Create User = JOB.*USER
    PAR.Create_User = JOB.*USER;

    // PAR.Create Program = JOB.*PROGRAM
    PAR.Create_Program = JOB.*PROGRAM;

    //?*** Set CHANGE fields. ***
    // PAR.Change Date = CON.*ZERO
    PAR.Change_Date = *ZERO;

    // PAR.Change Time = CON.*ZERO
    PAR.Change_Time = *ZERO;

    // PAR.Change User = CON.*BLANK
    PAR.Change_User = *BLANK;

    // PAR.Change Program = CON.*BLANK
    PAR.Change_Program = *BLANK;

   }

   //?USER: Processing after Data update

   CASE;

   // IF PAR.LFC Reference Required is Yes
   IF PAR.LFC_Reference_Required = 'Y';

   EXECUTE FUNCTION(Crt Ld Frt Chrg Ref   RT) TYPE(RTVOBJ) FILE(PMDJREP)           AC1869955;
   PARAMETER(DB1.FC_Code);
   PARAMETER(DB1.Load_ID);
   PARAMETER(DB1.LFC_Sequence_Number);
   {
    //?USER: Process Data record

    CASE;

    // IF DB1.Record Status is Active
    IF DB1.Record_Status = 'A';

    EXECUTE FUNCTION(Rtv Charge Info       RT) TYPE(RTVOBJ) FILE(PMDIREP)           AC1866916;
    PARAMETER(DB1.CR_Reference_Code);
    PARAMETER(NLL.CR_Reference_Desc);
    PARAMETER(LCL.CR_Value_Type);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    // LCL.LFCR Numeric Value = CON.*ZERO
    LCL.LFCR_Numeric_Value = *ZERO;

    CASE;

    // IF DB1.CR Reference Code is Company
    IF DB1.CR_Reference_Code = 'COMPNY';

    EXECUTE FUNCTION(Rtv Frt Charge Info   RT) TYPE(RTVOBJ) FILE(POA9REP)           AC1627128;
    PARAMETER(DB1.FC_Code);
    PARAMETER(NLL.FC_Description);
    PARAMETER(NLL.FC_Rate_Amount);
    PARAMETER(NLL.FC_Unit_of_Measure);
    PARAMETER(NLL.FC_Act_Frt_Include_Sts);
    PARAMETER(NLL.FC_Frt_Add_Deduct);
    PARAMETER(NLL.FC_Load_Type_Select);
    PARAMETER(NLL.FC_State_Select);
    PARAMETER(NLL.FC_Export_Select);
    PARAMETER(NLL.FC_Shag_Wash_Select);
    PARAMETER(NLL.FC_Auto_Calc_Sts);
    PARAMETER(NLL.FC_Charge_Category);
    PARAMETER(NLL.FC_Shag_Wash_Comp);
    PARAMETER(NLL.FC_Edit_Sequence);
    PARAMETER(NLL.FC_Tot_Freight_Inc_Sts);
    PARAMETER(NLL.FC_Special_Type);
    PARAMETER(NLL.FC_ExpInt_FR_FZ_Select);
    PARAMETER(NLL.FC_Reference_Required);
    PARAMETER(NLL.FC_Trans_Mode_Select);
    PARAMETER(NLL.FC_Freight_Rate_Type_Sel);
    PARAMETER(NLL.FC_Company_Select);
    PARAMETER(NLL.FC_Company_Carrier_Select);
    PARAMETER(LCL.FC_Shared_Responsibility);
    PARAMETER(NLL.FC_Unused_Sts_10);
    PARAMETER(NLL.FC_Auto_Calc_Effective);
    PARAMETER(NLL.Record_Status);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF LCL.FC Unused Sts 9 is Shared
    IF LCL.FC_Shared_Responsibility = 'S';

    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(Rtv Ld ShpCo/MultiCo  RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1909337;
    PARAMETER(PAR.Load_ID);
    PARAMETER(LCL.Company_Number);
    PARAMETER(LCL.Multi_Company_Load);
    {
     //?USER: Initialize routine

     // PAR.Multi Company Load = CND.no
     PAR.Multi_Company_Load = 'N';

     // PAR.Company Number = CON.*ZERO
     PAR.Company_Number = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF PAR.Company Number is Equal to zero
     IF PAR.Company_Number = *ZERO;

     // PAR.Company Number = DB1.Company Number
     PAR.Company_Number = DB1.Company_Number;

     ENDIF;

     CASE;

     // IF PAR.Company Number NE DB1.Company Number
     IF PAR.Company_Number <> DB1.Company_Number;

     // PAR.Multi Company Load = CND.yes
     PAR.Multi_Company_Load = 'Y';

     QUIT;

     ENDIF;

    }

    CASE;

    // IF LCL.Multi Company Load is no
    IF LCL.Multi_Company_Load = 'N';

    // LCL.LFCR Numeric Value = LCL.Company Number
    LCL.LFCR_Numeric_Value = LCL.Company_Number;

    ENDIF;

    ENDIF;

    ENDIF;

    EXECUTE FUNCTION(Crt Ld Frt Chrg Ref   RT) TYPE(RTVOBJ) FILE(PMDKCPP)           AC1869956;
    PARAMETER(PAR.Load_ID);
    PARAMETER(PAR.FC_Code);
    PARAMETER(PAR.LFC_Sequence_Number);
    PARAMETER(DB1.CR_Reference_Code);
    PARAMETER(LCL.CR_Value_Type);
    PARAMETER(LCL.LFCR_Numeric_Value);
    PARAMETER(DB1.Charge_Reference_Type);
    {
     //?USER: Processing if Data record not found

     EXECUTE FUNCTION(Crt LD Frt Chrg Ref   CR) TYPE(CRTOBJ) FILE(PMDKCPP)           AC1869264;
     PARAMETER(PAR.Load_ID);
     PARAMETER(PAR.FC_Code);
     PARAMETER(PAR.LFC_Sequence_Number);
     PARAMETER(PAR.CR_Reference_Code);
     PARAMETER(PAR.LFCR_Value_Type);
     PARAMETER(PAR.LFCR_Numeric_Value);
     PARAMETER(PAR.LFCR_Alpha_Value);
     PARAMETER(PAR.LFCR_Reference_Type);
     PARAMETER(PAR.Record_Status);
     PARAMETER(PAR.Create_Date);
     PARAMETER(PAR.Create_Time);
     PARAMETER(PAR.Create_User);
     PARAMETER(PAR.Create_Program);
     PARAMETER(PAR.Change_Date);
     PARAMETER(PAR.Change_Time);
     PARAMETER(PAR.Change_User);
     PARAMETER(PAR.Change_Program);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
      PARAMETER(DB1.Record_Status);
      PARAMETER(DB1.Create_Date);
      PARAMETER(DB1.Create_Time);
      PARAMETER(DB1.Create_User);
      PARAMETER(DB1.Create_Program);
      PARAMETER(DB1.Change_Date);
      PARAMETER(DB1.Change_Time);
      PARAMETER(DB1.Change_User);
      PARAMETER(DB1.Change_Program);
      {
       //?Execute internal function

       //?*** Set RECORD STATUS field. ***
       // PAR.Record Status = CND.Active
       PAR.Record_Status = 'A';

       //?*** Set CREATE fields. ***
       // PAR.Create Date = JOB.*Job date
       PAR.Create_Date = JOB.*Job_date;

       // PAR.Create Time = JOB.*Job time
       PAR.Create_Time = JOB.*Job_time;

       // PAR.Create User = JOB.*USER
       PAR.Create_User = JOB.*USER;

       // PAR.Create Program = JOB.*PROGRAM
       PAR.Create_Program = JOB.*PROGRAM;

       //?*** Set CHANGE fields. ***
       // PAR.Change Date = CON.*ZERO
       PAR.Change_Date = *ZERO;

       // PAR.Change Time = CON.*ZERO
       PAR.Change_Time = *ZERO;

       // PAR.Change User = CON.*BLANK
       PAR.Change_User = *BLANK;

       // PAR.Change Program = CON.*BLANK
       PAR.Change_Program = *BLANK;

      }

     }

    }

    ENDIF;

   }

   ENDIF;

  }

 }

 ENDIF;

 ENDIF;

}


