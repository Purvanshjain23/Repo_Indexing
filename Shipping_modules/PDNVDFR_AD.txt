// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDNVDFR
// ?Date: 14.08.2025 Time: 03:28:59
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

//?USER: Initialize subfile control

EXECUTE FUNCTION(RTV Event Date         RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1312203;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER('04');
PARAMETER(CTL.Actual_Ship_Date);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Salesperson Name   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1111501;
PARAMETER(CTL.Salesperson_Code);
PARAMETER(CTL.Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(OPCXREP)          AC1273797;
PARAMETER(PAR.Reason_Code);
PARAMETER(CTL.Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
PARAMETER(CTL.Company_Number);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Abs Frt,PO,Total  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2067291;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Customer_Purchase_Order_#);
PARAMETER(CTL.Order_Value_Total);
PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
PARAMETER(NLL.Shipping_Method);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Gate Price        RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2064251;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(LCL.Order_Gate_Final_Price);
PARAMETER(LCL.OD_Gate_Final_Price_Adj);
PARAMETER(LCL.OD_Weighted_Avg_Price);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Order Gate Price is Not Zeros
 IF DB1.Order_Gate_Final_Price <> *ZERO;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


CASE;

// IF LCL.Order Gate/Final Price is Not Zeros
IF LCL.Order_Gate_Final_Price <> *ZERO;

EXECUTE FUNCTION(CLC Extend Prc f/ovrge RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2068676;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER('PM');
PARAMETER(CTL.Extended_Amount_Last);
{
 //?USER: Initialize routine

 // PAR.Extended Amount = CON.*ZERO
 PAR.Extended_Amount = *ZERO;

 EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
 PARAMETER(PAR.Company_Number);
 PARAMETER(NLL.Plant_Company_Sts);
 PARAMETER(PAR.Company_Organization);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?USER: Process Data record

 //?Load Quantity Shipped Total field.
 CASE;

 // IF DB1.Quantity Shipped Total is Equal to zero
 IF DB1.Quantity_Shipped_Total = *ZERO;

 // WRK.Quantity Shipped Total = CON.1
 WRK.Quantity_Shipped_Total = 1;

 //?Load Quantity Shipped Total field.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Quantity Shipped Total = DB1.Quantity Shipped Total
 WRK.Quantity_Shipped_Total = DB1.Quantity_Shipped_Total;

 ENDIF;

 //?Set quantity and weight according to order status
 CASE;

 // IF DB1.Detail Line Status is Avail/Alloc/Enter/Hold
 IF DB1.Detail_Line_Status = 'L'/'A'/'E'/'H';

 // AND DB1.Event Code is Entered Thru 03 Picked
 AND DB1.Event_Code >= '01';
 AND DB1.Event_Code <= '03';

 //?RMC 6/17/09 FP1054 use qty/wgt ordered instead of sched
 // PAR.USR Quantity = DB1.Quantity Ordered
 PAR.USR_Quantity = DB1.Quantity_Ordered;

 // PAR.USR Weight = DB1.Weight Ordered
 PAR.USR_Weight = DB1.Weight_Ordered;

 //?Set quantity and weight according to order status
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Quantity = WRK.Quantity Shipped Total
 PAR.USR_Quantity = WRK.Quantity_Shipped_Total;

 // PAR.USR Weight = DB1.Weight Shipped Total
 PAR.USR_Weight = DB1.Weight_Shipped_Total;

 ENDIF;

 // Call program RTV For Price Extent   XF.
 CALL PROGRAM(RTV For Price Extent   XF) ('PDXRXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(NLL.UOM_Pricing);
 PARAMETER(NLL.Unit_Weight);
 PARAMETER(NLL.Catch_Weight_Status);
 PARAMETER(PAR.Primal_Group_Code);

 // Call program RTV PrcMthTyp/PrcTyp  XF.
 CALL PROGRAM(RTV PrcMthTyp/PrcTyp  XF) ('PNS7XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Price_Method_Code);
 PARAMETER(LCL.Price_Method_Type);
 PARAMETER(LCL.PMH_Price_Type);

 //?Extend using price before gate price which is the Price overage override
 CASE;

 // IF LCL.Price Method Type is Gate Pricing
 IF LCL.Price_Method_Type = 'G';

 //?Use Price Overage Override
 CASE;

 // IF DB1.U/M - Base Price is Pounds
 IF DB1.U_M_Base_Price = 'LB';

 // PAR.Extended Amount = DB1.Price Overage Override * PAR.USR Weight *Rounded
 PAR.Extended_Amount = DB1.Price_Overage_Override * PAR.USR_Weight 'H';

 //?Use Price Overage Override
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Extended Amount = DB1.Price Overage Override * PAR.USR Quantity *Rounded
 PAR.Extended_Amount = DB1.Price_Overage_Override * PAR.USR_Quantity 'H';

 ENDIF;

 // PAR.Extended Amount Last = PAR.Extended Amount Last + PAR.Extended Amount
 PAR.Extended_Amount_Last = PAR.Extended_Amount_Last + PAR.Extended_Amount;

 //?Extend using price before gate price which is the Price overage override
 // IF *OTHERWISE
 IF *OTHERWISE;

 ENDIF;

}


ENDIF;

//?C2226 HPB display    8/17/12
CASE;

// IF LCL.Company Organization is High Plains Biodiesel
IF LCL.Company_Organization = 'H';

EXECUTE FUNCTION(RTV HPB Equiv only   RT) TYPE(RTVOBJ) FILE(PMAMREP)            AC2031845;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.HPB_Equivalence_Value_USR);
PARAMETER(LCL.OHE_HPB_RIN_Price);
PARAMETER(CTL.OHE_Override_Type_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF CTL.HPB Equivalence Value USR is Not Entered
IF CTL.HPB_Equivalence_Value_USR = *ZERO;

// CTL.HPB Equivalence Value USR = CON.1.5
CTL.HPB_Equivalence_Value_USR = 1.5;

ENDIF;

ENDIF;

//?USER: Initialize subfile record from DBF record

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

//?Exclude cancelled lines
CASE;

// IF DB1.Detail Line Status is Cancelled
IF DB1.Detail_Line_Status = 'X';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?If price sts is "U"npriced then show price as zero.
CASE;

// IF RCD.Price Status is Unpriced
IF RCD.Price_Status = 'U';

// RCD.Unit Price = CON.*ZERO
RCD.Unit_Price = *ZERO;

ENDIF;

//?Substitution
CASE;

// IF DB1.Order Secondary Line Seq is GT 1
IF DB1.Order_Secondary_Line_Seq > 1;

// RCD.Substitution Flag = CND.yes
RCD.Substitution_Flag = 'Y';

//?Substitution
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Substitution Flag = CND.Blanks
RCD.Substitution_Flag = *BLANK;

ENDIF;

//?Save first line seq. numbers
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

// AND PAR.First Time Flag is Yes
AND PAR.First_Time_Flag = 'Y';

// PAR.Seq No 1  PASS        USR = DB1.Order Sequence Number
PAR.Seq_No_1_PASS_USR = DB1.Order_Sequence_Number;

// PAR.Seq No 2  PASS        USR = DB1.Order Secondary Line Seq
PAR.Seq_No_2_PASS_USR = DB1.Order_Secondary_Line_Seq;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

// CTL.Warehouse Code PASS   USR = RCD.Warehouse Code
CTL.Warehouse_Code_PASS_USR = RCD.Warehouse_Code;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

// Call program DSP Ship Price Details DF.
CALL PROGRAM(DSP Ship Price Details DF) ('PDM4DFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(PAR.Order_Type_Sales);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(PAR.Ship_To_Name);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Extended_Amount);
PARAMETER(RCD.Market_Pricing_Date);
PARAMETER(RCD.Commodity_Market_Code);
PARAMETER(RCD.Date_Method_Code);
PARAMETER(RCD.Price_Method_Code);
PARAMETER(RCD.Price_Overage_Override);
PARAMETER(RCD.Contract_Number);
PARAMETER(RCD.Price_Status);
PARAMETER(RCD.Pricing_Date_Used);
PARAMETER(RCD.U_M_Base_Price);
PARAMETER(RCD.U_M_Ordered);
PARAMETER(RCD.Order_Desc_Line_One);
PARAMETER(RCD.Price_Audit);
PARAMETER(RCD.Price_Audit_Reason_Code);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Quantity_Shipped_Total);
PARAMETER(RCD.Unit_Price);
PARAMETER(RCD.Unit_Price_Ordered_U_M);
PARAMETER(RCD.Unit_Weight_Ordered_U_M);
PARAMETER(RCD.Price_Code);
PARAMETER(RCD.OD_Ceiling_Price);
PARAMETER(RCD.OD_Market_Begin_Date);
PARAMETER(RCD.OD_Market_Ending_Date);

// IF RCD.*SFLSEL is *Financial Detail
IF RCD.*SFLSEL = '7'/'7';

// Call program DSP Ship Detail Finan. DF.
CALL PROGRAM(DSP Ship Detail Finan. DF) ('PDWRDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Order_Desc_Line_One);

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

// Call program DSP Price Audit Log    DF.
CALL PROGRAM(DSP Price Audit Log    DF) ('PDP9DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(PAR.Order_Type_Sales);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Ship_To_Name);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(CTL.Actual_Shipped_Date);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(CTL.Credit_Hold);
PARAMETER(CTL.Production_Hold);
PARAMETER(CTL.Requested_Delivery_Date);
PARAMETER(RCD.Price_Audit);
PARAMETER(RCD.Price_Status);
PARAMETER(CTL.Salesperson_Code);
PARAMETER(CTL.Salesperson_Name);
PARAMETER(CTL.Name);

ENDIF;

