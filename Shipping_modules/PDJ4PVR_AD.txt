// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDJ4PVR
// ?Date: 14.08.2025 Time: 03:28:33
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter Acc *ALL IF) TYPE(EXCINTFUN)                     AC1300318;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(PAR.System_Date_Format);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
PARAMETER(WRK.First_Time_Flag);
PARAMETER(WRK.Name);
PARAMETER(WRK.System_Value_Alpha);
PARAMETER(WRK.Access_Denied_Y_N);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.PRT Printer Device = CON.*BLANK
PAR.PRT_Printer_Device = *BLANK;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.Company Number Pass   USR = PAR.Company Number
PAR.Company_Number_Pass_USR = PAR.Company_Number;

EXECUTE FUNCTION(Rtv Allow Multi-Whs   RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1512192;
PARAMETER(JOB.*USER);
PARAMETER(WRK.Allow_Multi_Warehouse);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Appl Whs Restrict  RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1959551;
PARAMETER(JOB.*USER);
PARAMETER(LCL.Application_WHS_Restrict);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Application WHS Restrict is yes
IF LCL.Application_WHS_Restrict = 'Y';

// WRK.Allow Multi Warehouse = CND.no
WRK.Allow_Multi_Warehouse = 'N';

ENDIF;

//?USER: Load screen

CASE;

// IF DTL.Status Flag 8  Y/N is *Blank
IF DTL.Status_Flag_8_Y_N = *BLANK;

// DTL.Status Flag 8  Y/N = CND.No
DTL.Status_Flag_8_Y_N = 'N';

ENDIF;

// DTL.USR Select/Omit Flag = CND.Select
DTL.USR_Select_Omit_Flag = 'S';

//?** Set whse and selct flag, if user is allow multi-whse = No
CASE;

// IF WRK.Allow Multi Warehouse is no
IF WRK.Allow_Multi_Warehouse = 'N';

// DTL.USR Warehouse Code = WRK.Warehouse Code
DTL.USR_Warehouse_Code = WRK.Warehouse_Code;

EXECUTE FUNCTION(RTV Whse Desc,Ship co RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1705650;
PARAMETER(DTL.USR_Warehouse_Code);
PARAMETER(DTL.USR_Warehouse_description);
PARAMETER(WRK.Shipping_Company);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.USR Select/Omit Flag = CND.Select
DTL.USR_Select_Omit_Flag = 'S';

ENDIF;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(PAR.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Company Number = PAR.Company Number
DTL.Company_Number = PAR.Company_Number;

// DTL.Company Number CDE = PAR.Company Number
DTL.Company_Number_CDE = PAR.Company_Number;

//?Fill Program Description
CASE;

// IF PAR.Billing Activity Type EQ WRK.BLANK
IF PAR.Billing_Activity_Type = WRK.BLANK;

// DTL.USR Program Description = CON.*** Memos Only ***
DTL.USR_Program_Description = '*** Memos Only ***';

//?Fill Program Description
// IF PAR.Billing Activity Type is Invoice
IF PAR.Billing_Activity_Type = '1';

// DTL.USR Program Description = CON.*** Orders Only ***
DTL.USR_Program_Description = '*** Orders Only ***';

//?Fill Program Description
// IF PAR.Billing Activity Type is Credit Memo
IF PAR.Billing_Activity_Type = '2';

// DTL.USR Program Description = CON.*** Credit Memos Only ***
DTL.USR_Program_Description = '*** Credit Memos Only ***';

//?Fill Program Description
// IF PAR.Billing Activity Type is Debit Memo
IF PAR.Billing_Activity_Type = '3';

// DTL.USR Program Description = CON.*** Debit Memos Only ***
DTL.USR_Program_Description = '*** Debit Memos Only ***';

ENDIF;

// DTL.Export Sales = CND.All Sales
DTL.Export_Sales = 'A';

// DTL.Condition Desc. 1  USR = Condition name of DTL.Export Sales
DTL.Condition_Desc_1_USR = RTVCND(DTL.Export_Sales);

CASE;

// IF LCL.Application WHS Restrict is yes
IF LCL.Application_WHS_Restrict = 'Y';

EXECUTE FUNCTION(Rtv Ord Ack Whs/Desc  RT) TYPE(RTVOBJ) FILE(PNFOREP)           AC1962362;
PARAMETER(JOB.*USER);
PARAMETER('O/P');
PARAMETER(DTL.USR_Warehouse_Code);
PARAMETER(DTL.USR_CDE_Parm_1);
PARAMETER(DTL.USR_CDE_Parm_2);
PARAMETER(DTL.USR_CDE_Parm_3);
PARAMETER(DTL.USR_CDE_Parm_4);
PARAMETER(DTL.USR_CDE_Parm_5);
PARAMETER(DTL.USR_CDE_Parm_6);
PARAMETER(DTL.USR_CDE_Parm_7);
PARAMETER(DTL.USR_CDE_Parm_8);
PARAMETER(DTL.USR_CDE_Parm_9);
PARAMETER(DTL.USR_Warehouse_description);
PARAMETER(DTL.USR_Comment_1);
PARAMETER(DTL.USR_Comment_2);
PARAMETER(DTL.USR_Comment_3);
PARAMETER(DTL.USR_Comment_4);
PARAMETER(DTL.USR_Description);
PARAMETER(DTL.USR_Description_New);
PARAMETER(DTL.USR_Message_Line_1);
PARAMETER(DTL.USR_Message_Line_2);
PARAMETER(DTL.USR_Message_Line_3);
{
 //?USER: Initialize routine

 // LCL.Count USR = CON.1
 LCL.Count_USR = 1;

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF LCL.Count USR is One
 IF LCL.Count_USR = 1;

 // PAR.USR Warehouse Code = DB1.Warehouse Code
 PAR.USR_Warehouse_Code = DB1.Warehouse_Code;

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.USR_Warehouse_description);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

 // IF LCL.Count USR is Two
 IF LCL.Count_USR = 2;

 // PAR.USR CDE Parm 1 = DB1.Warehouse Code
 PAR.USR_CDE_Parm_1 = DB1.Warehouse_Code;

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.USR_Comment_1);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

 // IF LCL.Count USR is Three
 IF LCL.Count_USR = 3;

 // PAR.USR CDE Parm 2 = DB1.Warehouse Code
 PAR.USR_CDE_Parm_2 = DB1.Warehouse_Code;

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.USR_Comment_2);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

 // IF LCL.Count USR is Four
 IF LCL.Count_USR = 4;

 // PAR.USR CDE Parm 3 = DB1.Warehouse Code
 PAR.USR_CDE_Parm_3 = DB1.Warehouse_Code;

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.USR_Comment_3);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

 // IF LCL.Count USR is Five
 IF LCL.Count_USR = 5;

 // PAR.USR CDE Parm 4 = DB1.Warehouse Code
 PAR.USR_CDE_Parm_4 = DB1.Warehouse_Code;

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.USR_Comment_4);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

 // IF LCL.Count USR is Six
 IF LCL.Count_USR = 6;

 // PAR.USR CDE Parm 5 = DB1.Warehouse Code
 PAR.USR_CDE_Parm_5 = DB1.Warehouse_Code;

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.USR_Description);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

 // IF LCL.Count USR is Seven
 IF LCL.Count_USR = 7;

 // PAR.USR CDE Parm 6 = DB1.Warehouse Code
 PAR.USR_CDE_Parm_6 = DB1.Warehouse_Code;

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.USR_Description_New);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

 // IF LCL.Count USR is Eight
 IF LCL.Count_USR = 8;

 // PAR.USR CDE Parm 7 = DB1.Warehouse Code
 PAR.USR_CDE_Parm_7 = DB1.Warehouse_Code;

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.USR_Message_Line_1);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

 // IF LCL.Count USR is Nine
 IF LCL.Count_USR = 9;

 // PAR.USR CDE Parm 8 = DB1.Warehouse Code
 PAR.USR_CDE_Parm_8 = DB1.Warehouse_Code;

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.USR_Message_Line_2);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

 // IF LCL.Count USR is Ten
 IF LCL.Count_USR = 10;

 // PAR.USR CDE Parm 9 = DB1.Warehouse Code
 PAR.USR_CDE_Parm_9 = DB1.Warehouse_Code;

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.USR_Message_Line_3);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

 QUIT;

 ENDIF;

 // LCL.Count USR = LCL.Count USR + CON.1
 LCL.Count_USR = LCL.Count_USR + 1;

}


ENDIF;

//?USER: Validate fields

CASE;

// IF DTL.Next Order Number is Equal to zeros
IF DTL.Next_Order_Number = *ZERO;

// DTL.Next Order Number = DTL.CD7 Int Numeric Key
DTL.Next_Order_Number = DTL.CD7_Int_Numeric_Key;

ENDIF;

// DTL.Accounting Company Number = DTL.Company Number
DTL.Company_Number = DTL.Company_Number_CDE;

//?Process F4 on Company Number
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Company Number CDE
IF PGM.*Cursor_field = DTL.Company_Number_CDE;

CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// Call program SEL Plant Company      SR.
CALL PROGRAM(SEL Plant Company      SR) ('PPFZSRR');
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.Name);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

ENDIF;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on From Order Number
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.CD7 Int Numeric Key
AND PGM.*Cursor_field = DTL.CD7_Int_Numeric_Key;

// Call program SEL Order for Ack      SR.
CALL PROGRAM(SEL Order for Ack      SR) ('OMG3SRR');
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.CD7_Int_Numeric_Key);
PARAMETER(PAR.Billing_Activity_Type);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on To Order Number
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Next Order Number
AND PGM.*Cursor_field = DTL.Next_Order_Number;

// Call program SEL Order for Ack      SR.
CALL PROGRAM(SEL Order for Ack      SR) ('OMG3SRR');
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.Next_Order_Number);
PARAMETER(PAR.Billing_Activity_Type);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Order Type
CASE;

// IF DTL.*CMD key is *Prompt
IF ( DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Order Type - Sales
AND PGM.*Cursor_field = DTL.Order_Type_Sales );

// OR DTL.Order Type - Sales is Select Order Type
OR DTL.Order_Type_Sales = '?';

//?Select based on where came from
CASE;

// IF PAR.Billing Activity Type is Invoice
IF PAR.Billing_Activity_Type = '1';

// Call program SEL Invc/Xfer Types    SR.
CALL PROGRAM(SEL Invc/Xfer Types    SR) ('PDG5SRR');
PARAMETER(DTL.Order_Type_Sales);

//?Select based on where came from
// IF *OTHERWISE
IF *OTHERWISE;

// Call program SEL Credit/Debit Memo  SR.
CALL PROGRAM(SEL Credit/Debit Memo  SR) ('PDPKSRR');
PARAMETER(DTL.Order_Type_Sales);
PARAMETER(PAR.Billing_Activity_Type);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Warehouse 1
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.USR Warehouse Code
AND PGM.*Cursor_field = DTL.USR_Warehouse_Code;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.USR_Warehouse_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Warehouse 2
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.USR CDE Parm 1
AND PGM.*Cursor_field = DTL.USR_CDE_Parm_1;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.USR_CDE_Parm_1);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Warehouse 3
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.USR CDE Parm 2
AND PGM.*Cursor_field = DTL.USR_CDE_Parm_2;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.USR_CDE_Parm_2);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Warehouse 4
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.USR CDE Parm 3
AND PGM.*Cursor_field = DTL.USR_CDE_Parm_3;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.USR_CDE_Parm_3);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Warehouse 5
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.USR CDE Parm 4
AND PGM.*Cursor_field = DTL.USR_CDE_Parm_4;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.USR_CDE_Parm_4);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Warehouse 6
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.USR CDE Parm 5
AND PGM.*Cursor_field = DTL.USR_CDE_Parm_5;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.USR_CDE_Parm_5);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Warehouse 7
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.USR CDE Parm 6
AND PGM.*Cursor_field = DTL.USR_CDE_Parm_6;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.USR_CDE_Parm_6);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Warehouse 8
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.USR CDE Parm 7
AND PGM.*Cursor_field = DTL.USR_CDE_Parm_7;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.USR_CDE_Parm_7);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Warehouse 9
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.USR CDE Parm 8
AND PGM.*Cursor_field = DTL.USR_CDE_Parm_8;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.USR_CDE_Parm_8);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Warehouse 10
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.USR CDE Parm 9
AND PGM.*Cursor_field = DTL.USR_CDE_Parm_9;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.USR_CDE_Parm_9);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?USER: Validate relations

// DTL.Name = CON.*BLANK
DTL.Name = *BLANK;

//?Validate company if entered
CASE;

// IF DTL.Company Number is not equal to zero
IF DTL.Company_Number_CDE <> *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Company Number not found'
ERROR(USR0163);

ENDIF;

ENDIF;

//?** PF3302 - If order number is not entered, date must be entered
CASE;

// IF DTL.Actual Shipped Date is entered
IF DTL.Actual_Shipped_Date <> *ZERO;

//?** PF3302 - If order number is not entered, date must be entered
// IF *OTHERWISE
IF *OTHERWISE;

//?If order number is not entered, date must be entered
CASE;

// IF DTL.CD7 Int Numeric Key is Equal to zeros
IF DTL.CD7_Int_Numeric_Key = *ZERO;

// AND DTL.Order Date is not entered
AND DTL.Order_Date = *ZERO;

// AND DTL.Scheduled Ship Date is not entered
AND DTL.Scheduled_Ship_Date = *ZERO;

// Send error message - 'Date must be entered if Order Number is Blank.'
ERROR(USR1437);
MSGPARM(DTL.Order_Date);

ENDIF;

ENDIF;

//?Only one date may be entered
CASE;

// IF DTL.Order Date is entered
IF ( DTL.Order_Date <> *ZERO;

// AND DTL.Scheduled Ship Date is entered
AND DTL.Scheduled_Ship_Date <> *ZERO );

// OR DTL.Order Date is entered
OR ( DTL.Order_Date <> *ZERO;

// AND DTL.Actual Shipped Date is entered
AND DTL.Actual_Shipped_Date <> *ZERO );

// OR DTL.Scheduled Ship Date is entered
OR ( DTL.Scheduled_Ship_Date <> *ZERO;

// AND DTL.Actual Shipped Date is entered
AND DTL.Actual_Shipped_Date <> *ZERO );

// Send error message - 'Only one date selection allowed.'
ERROR(USR1904);

ENDIF;

//?Validate Order Number (From)
CASE;

// IF DTL.CD7 Int Numeric Key is not equal zero
IF DTL.CD7_Int_Numeric_Key <> *ZERO;

EXECUTE FUNCTION(RTV Bill Type, Event   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1366339;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.CD7_Int_Numeric_Key);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Billing_Activity_Type);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Validate existence, bill type
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

// DTL.Order Number = DTL.CD7 Int Numeric Key
DTL.Order_Number = DTL.CD7_Int_Numeric_Key;

// Send error message - 'Order not Avail for Acknowledgments.'
ERROR(USR1425);
MSGPARM(DTL.Order_Number);

//?Validate existence, bill type
// IF PAR.Billing Activity Type EQ WRK.BLANK
IF PAR.Billing_Activity_Type = WRK.BLANK;

//?Only Cr/Dr memo OK
CASE;

// IF WRK.Billing Activity Type is Credit or Debit Memo
IF WRK.Billing_Activity_Type = '2'/'3';

//?Only Cr/Dr memo OK
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

// DTL.Order Number = DTL.CD7 Int Numeric Key
DTL.Order_Number = DTL.CD7_Int_Numeric_Key;

// Send error message - 'Order not Avail for Acknowledgments.'
ERROR(USR1425);
MSGPARM(DTL.Order_Number);

ENDIF;

//?Validate existence, bill type
// IF PAR.Billing Activity Type is Invoice
IF PAR.Billing_Activity_Type = '1';

//?Only Invoice or Transfer OK
CASE;

// IF WRK.Billing Activity Type is Invoice or Transfer
IF WRK.Billing_Activity_Type = '1'/'4';

//?Only Invoice or Transfer OK
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

// DTL.Order Number = DTL.CD7 Int Numeric Key
DTL.Order_Number = DTL.CD7_Int_Numeric_Key;

// Send error message - 'Order not Avail for Acknowledgments.'
ERROR(USR1425);
MSGPARM(DTL.Order_Number);

ENDIF;

//?Validate existence, bill type
// IF WRK.Billing Activity Type NE PAR.Billing Activity Type
IF WRK.Billing_Activity_Type <> PAR.Billing_Activity_Type;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

// DTL.Order Number = DTL.CD7 Int Numeric Key
DTL.Order_Number = DTL.CD7_Int_Numeric_Key;

// Send error message - 'Order not Avail for Acknowledgments.'
ERROR(USR1425);
MSGPARM(DTL.Order_Number);

ENDIF;

ENDIF;

//?Validate Order Number (To)
CASE;

// IF DTL.Next Order Number is Not equal to zeros
IF DTL.Next_Order_Number <> *ZERO;

EXECUTE FUNCTION(RTV Bill Type, Event   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1366339;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.Next_Order_Number);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Billing_Activity_Type);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Validate existence, bill type (TO)
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

// DTL.Order Number = DTL.Next Order Number
DTL.Order_Number = DTL.Next_Order_Number;

// Send error message - 'Order not Avail for Acknowledgments.'
ERROR(USR1425);
MSGPARM(DTL.Order_Number);

//?Validate existence, bill type (TO)
// IF PAR.Billing Activity Type EQ WRK.BLANK
IF PAR.Billing_Activity_Type = WRK.BLANK;

//?Only memo OK
CASE;

// IF WRK.Billing Activity Type is Credit or Debit Memo
IF WRK.Billing_Activity_Type = '2'/'3';

//?Only memo OK
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

// DTL.Order Number = DTL.Next Order Number
DTL.Order_Number = DTL.Next_Order_Number;

// Send error message - 'Order not Avail for Acknowledgments.'
ERROR(USR1425);
MSGPARM(DTL.Order_Number);

ENDIF;

//?Validate existence, bill type (TO)
// IF PAR.Billing Activity Type is Invoice
IF PAR.Billing_Activity_Type = '1';

//?Only invoice or transfer OK
CASE;

// IF WRK.Billing Activity Type is Invoice or Transfer
IF WRK.Billing_Activity_Type = '1'/'4';

//?Only invoice or transfer OK
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

// DTL.Order Number = DTL.Next Order Number
DTL.Order_Number = DTL.Next_Order_Number;

// Send error message - 'Order not Avail for Acknowledgments.'
ERROR(USR1425);
MSGPARM(DTL.Order_Number);

ENDIF;

//?Validate existence, bill type (TO)
// IF WRK.Billing Activity Type NE PAR.Billing Activity Type
IF WRK.Billing_Activity_Type <> PAR.Billing_Activity_Type;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

// DTL.Order Number = DTL.Next Order Number
DTL.Order_Number = DTL.Next_Order_Number;

// Send error message - 'Order not Avail for Acknowledgments.'
ERROR(USR1425);
MSGPARM(DTL.Order_Number);

ENDIF;

ENDIF;

//?Validate Order Number Range.
CASE;

// IF DTL.CD7 Int Numeric Key is not equal zero
IF DTL.CD7_Int_Numeric_Key <> *ZERO;

// AND DTL.Next Order Number is Not equal to zeros
AND DTL.Next_Order_Number <> *ZERO;

CASE;

// IF DTL.Next Order Number LT DTL.CD7 Int Numeric Key
IF DTL.Next_Order_Number < DTL.CD7_Int_Numeric_Key;

// Send error message - 'Order No. range invalid'
ERROR(USR1584);

ENDIF;

ENDIF;

//?Validate order type if entered
CASE;

// IF DTL.Order Type - Sales is Entered
IF DTL.Order_Type_Sales <> *BLANK;

EXECUTE FUNCTION(RTV Order Types        RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1168350;
PARAMETER(DTL.Order_Type_Sales);
PARAMETER(DTL.Order_Type_Description);
PARAMETER(WRK.Processing_Cycle_Type);
PARAMETER(WRK.Billing_Activity_Type);
PARAMETER(WRK.Affect_Inventory_Default);
PARAMETER(WRK.Affect_Sales_Doll_Default);
PARAMETER(WRK.Affect_Sales_Pnds_Default);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Edit by billing activity type
CASE;

// IF PAR.Billing Activity Type EQ WRK.BLANK
IF PAR.Billing_Activity_Type = WRK.BLANK;

//?order type must be credit or debit memo
CASE;

// IF WRK.Billing Activity Type is Credit or Debit Memo
IF WRK.Billing_Activity_Type = '2'/'3';

//?order type must be credit or debit memo
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Order type is invalid for &1'
ERROR(USR1895);
MSGPARM('Credit/Debit Memos');
MSGPARM(DTL.Order_Type_Sales);

ENDIF;

//?Edit by billing activity type
// IF PAR.Billing Activity Type is Invoice
IF PAR.Billing_Activity_Type = '1';

//?Order type must be invoice or transfer
CASE;

// IF WRK.Billing Activity Type is Invoice or Transfer
IF WRK.Billing_Activity_Type = '1'/'4';

//?Order type must be invoice or transfer
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Order type is invalid for &1'
ERROR(USR1895);
MSGPARM('Credit/Debit Memos');
MSGPARM(DTL.Order_Type_Sales);

ENDIF;

//?Edit by billing activity type
// IF *OTHERWISE
IF *OTHERWISE;

//?order type must be match billing activity type passed into program
CASE;

// IF WRK.Billing Activity Type EQ PAR.Billing Activity Type
IF WRK.Billing_Activity_Type = PAR.Billing_Activity_Type;

//?order type must be match billing activity type passed into program
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.*Condition name = Condition name of PAR.Billing Activity Type
WRK.*Condition_name = RTVCND(PAR.Billing_Activity_Type);

// Send error message - 'Order type is invalid for &1'
ERROR(USR1895);
MSGPARM(WRK.*Condition_name);
MSGPARM(DTL.Order_Type_Sales);

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Order Types not found.'
ERROR(USR1063);
MSGPARM(DTL.Company_Number_CDE);
MSGPARM(DTL.Order_Type_Sales);

ENDIF;

//?Validate order type if entered
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Order Type Description = CON.*BLANK
DTL.Order_Type_Description = *BLANK;

ENDIF;

//?Validate warehouse 1 if entered
CASE;

// IF DTL.USR Warehouse Code is Warehouse Code not Blank
IF DTL.USR_Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(RTV Whse Desc,Ship co RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1705650;
PARAMETER(DTL.USR_Warehouse_Code);
PARAMETER(DTL.USR_Warehouse_description);
PARAMETER(WRK.Shipping_Company);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

CASE;

// IF LCL.Application WHS Restrict is no
IF LCL.Application_WHS_Restrict = 'N';

CASE;

// IF WRK.Shipping Company NE DTL.Company Number
IF WRK.Shipping_Company <> DTL.Company_Number;

// Send error message - 'Warehouse &1 cannot ship from Company &2'
ERROR(USR3362);
MSGPARM(DTL.USR_Warehouse_Code);
MSGPARM(DTL.Company_Number);

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.USR_Warehouse_Code);

ENDIF;

//?Validate warehouse 1 if entered
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.USR Warehouse description = CND.equal to blank
DTL.USR_Warehouse_description = *BLANK;

ENDIF;

//?Validate warehouse 2 if entered
CASE;

// IF DTL.USR CDE Parm 1 is Warehouse Code not Blank
IF DTL.USR_CDE_Parm_1 <> *BLANK;

EXECUTE FUNCTION(RTV Whse Desc,Ship co RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1705650;
PARAMETER(DTL.USR_CDE_Parm_1);
PARAMETER(DTL.USR_Comment_1);
PARAMETER(WRK.Shipping_Company);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

CASE;

// IF LCL.Application WHS Restrict is no
IF LCL.Application_WHS_Restrict = 'N';

CASE;

// IF WRK.Shipping Company NE DTL.Company Number
IF WRK.Shipping_Company <> DTL.Company_Number;

// Send error message - 'Warehouse &1 cannot ship from Company &2'
ERROR(USR3362);
MSGPARM(DTL.USR_CDE_Parm_1);
MSGPARM(DTL.Company_Number);

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.USR_CDE_Parm_1);

ENDIF;

//?Validate warehouse 2 if entered
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.USR Comment 1 = CND.Eq Blank
DTL.USR_Comment_1 = *BLANK;

ENDIF;

//?Validate warehouse 3 if entered
CASE;

// IF DTL.USR CDE Parm 2 is Warehouse Code not Blank
IF DTL.USR_CDE_Parm_2 <> *BLANK;

EXECUTE FUNCTION(RTV Whse Desc,Ship co RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1705650;
PARAMETER(DTL.USR_CDE_Parm_2);
PARAMETER(DTL.USR_Comment_2);
PARAMETER(WRK.Shipping_Company);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

CASE;

// IF LCL.Application WHS Restrict is no
IF LCL.Application_WHS_Restrict = 'N';

CASE;

// IF WRK.Shipping Company NE DTL.Company Number
IF WRK.Shipping_Company <> DTL.Company_Number;

// Send error message - 'Warehouse &1 cannot ship from Company &2'
ERROR(USR3362);
MSGPARM(DTL.USR_CDE_Parm_2);
MSGPARM(DTL.Company_Number);

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.USR_CDE_Parm_2);

ENDIF;

//?Validate warehouse 3 if entered
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.USR Comment 2 = CND.Eq Blank
DTL.USR_Comment_2 = *BLANK;

ENDIF;

//?Validate warehouse 4 if entered
CASE;

// IF DTL.USR CDE Parm 3 is Warehouse Code not Blank
IF DTL.USR_CDE_Parm_3 <> *BLANK;

EXECUTE FUNCTION(RTV Whse Desc,Ship co RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1705650;
PARAMETER(DTL.USR_CDE_Parm_3);
PARAMETER(DTL.USR_Comment_3);
PARAMETER(WRK.Shipping_Company);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

CASE;

// IF LCL.Application WHS Restrict is no
IF LCL.Application_WHS_Restrict = 'N';

CASE;

// IF WRK.Shipping Company NE DTL.Company Number
IF WRK.Shipping_Company <> DTL.Company_Number;

// Send error message - 'Warehouse &1 cannot ship from Company &2'
ERROR(USR3362);
MSGPARM(DTL.USR_CDE_Parm_3);
MSGPARM(DTL.Company_Number);

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.USR_CDE_Parm_3);

ENDIF;

//?Validate warehouse 4 if entered
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.USR Comment 3 = CND.Eq Blank
DTL.USR_Comment_3 = *BLANK;

ENDIF;

//?Validate warehouse 5 if entered
CASE;

// IF DTL.USR CDE Parm 4 is Warehouse Code not Blank
IF DTL.USR_CDE_Parm_4 <> *BLANK;

EXECUTE FUNCTION(RTV Whse Desc,Ship co RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1705650;
PARAMETER(DTL.USR_CDE_Parm_4);
PARAMETER(DTL.USR_Comment_4);
PARAMETER(WRK.Shipping_Company);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

CASE;

// IF LCL.Application WHS Restrict is no
IF LCL.Application_WHS_Restrict = 'N';

CASE;

// IF WRK.Shipping Company NE DTL.Company Number
IF WRK.Shipping_Company <> DTL.Company_Number;

// Send error message - 'Warehouse &1 cannot ship from Company &2'
ERROR(USR3362);
MSGPARM(DTL.USR_CDE_Parm_4);
MSGPARM(DTL.Company_Number);

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.USR_CDE_Parm_4);

ENDIF;

//?Validate warehouse 5 if entered
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.USR Comment 4 = CND.Eq Blank
DTL.USR_Comment_4 = *BLANK;

ENDIF;

//?Validate warehouse 6 if entered
CASE;

// IF DTL.USR CDE Parm 5 is Warehouse Code not Blank
IF DTL.USR_CDE_Parm_5 <> *BLANK;

EXECUTE FUNCTION(RTV Whse Desc,Ship co RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1705650;
PARAMETER(DTL.USR_CDE_Parm_5);
PARAMETER(DTL.USR_Description);
PARAMETER(WRK.Shipping_Company);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

CASE;

// IF LCL.Application WHS Restrict is no
IF LCL.Application_WHS_Restrict = 'N';

CASE;

// IF WRK.Shipping Company NE DTL.Company Number
IF WRK.Shipping_Company <> DTL.Company_Number;

// Send error message - 'Warehouse &1 cannot ship from Company &2'
ERROR(USR3362);
MSGPARM(DTL.USR_CDE_Parm_5);
MSGPARM(DTL.Company_Number);

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.USR_CDE_Parm_5);

ENDIF;

//?Validate warehouse 6 if entered
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.USR Description = CND.equal to blank
DTL.USR_Description = *BLANK;

ENDIF;

//?Validate warehouse 7 if entered
CASE;

// IF DTL.USR CDE Parm 6 is Warehouse Code not Blank
IF DTL.USR_CDE_Parm_6 <> *BLANK;

EXECUTE FUNCTION(RTV Whse Desc,Ship co RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1705650;
PARAMETER(DTL.USR_CDE_Parm_6);
PARAMETER(DTL.USR_Description_New);
PARAMETER(WRK.Shipping_Company);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

CASE;

// IF LCL.Application WHS Restrict is no
IF LCL.Application_WHS_Restrict = 'N';

CASE;

// IF WRK.Shipping Company NE DTL.Company Number
IF WRK.Shipping_Company <> DTL.Company_Number;

// Send error message - 'Warehouse &1 cannot ship from Company &2'
ERROR(USR3362);
MSGPARM(DTL.USR_CDE_Parm_6);
MSGPARM(DTL.Company_Number);

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.USR_CDE_Parm_6);

ENDIF;

//?Validate warehouse 7 if entered
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.USR Description - New = CND.equal to blank
DTL.USR_Description_New = *BLANK;

ENDIF;

//?Validate warehouse 8 if entered
CASE;

// IF DTL.USR CDE Parm 7 is Warehouse Code not Blank
IF DTL.USR_CDE_Parm_7 <> *BLANK;

EXECUTE FUNCTION(RTV Whse Desc,Ship co RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1705650;
PARAMETER(DTL.USR_CDE_Parm_7);
PARAMETER(DTL.USR_Message_Line_1);
PARAMETER(WRK.Shipping_Company);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

CASE;

// IF LCL.Application WHS Restrict is no
IF LCL.Application_WHS_Restrict = 'N';

CASE;

// IF WRK.Shipping Company NE DTL.Company Number
IF WRK.Shipping_Company <> DTL.Company_Number;

// Send error message - 'Warehouse &1 cannot ship from Company &2'
ERROR(USR3362);
MSGPARM(DTL.USR_CDE_Parm_7);
MSGPARM(DTL.Company_Number);

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.USR_CDE_Parm_7);

ENDIF;

//?Validate warehouse 8 if entered
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.USR Message Line 1 = CND.Eq Blank
DTL.USR_Message_Line_1 = *BLANK;

ENDIF;

//?Validate warehouse 9 if entered
CASE;

// IF DTL.USR CDE Parm 8 is Warehouse Code not Blank
IF DTL.USR_CDE_Parm_8 <> *BLANK;

EXECUTE FUNCTION(RTV Whse Desc,Ship co RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1705650;
PARAMETER(DTL.USR_CDE_Parm_8);
PARAMETER(DTL.USR_Message_Line_2);
PARAMETER(WRK.Shipping_Company);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

CASE;

// IF LCL.Application WHS Restrict is no
IF LCL.Application_WHS_Restrict = 'N';

CASE;

// IF WRK.Shipping Company NE DTL.Company Number
IF WRK.Shipping_Company <> DTL.Company_Number;

// Send error message - 'Warehouse &1 cannot ship from Company &2'
ERROR(USR3362);
MSGPARM(DTL.USR_CDE_Parm_8);
MSGPARM(DTL.Company_Number);

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.USR_CDE_Parm_8);

ENDIF;

//?Validate warehouse 9 if entered
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.USR Message Line 2 = CND.Eq Blank
DTL.USR_Message_Line_2 = *BLANK;

ENDIF;

//?Validate warehouse 10 if entered
CASE;

// IF DTL.USR CDE Parm 9 is Warehouse Code not Blank
IF DTL.USR_CDE_Parm_9 <> *BLANK;

EXECUTE FUNCTION(RTV Whse Desc,Ship co RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1705650;
PARAMETER(DTL.USR_CDE_Parm_9);
PARAMETER(DTL.USR_Message_Line_3);
PARAMETER(WRK.Shipping_Company);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

CASE;

// IF LCL.Application WHS Restrict is no
IF LCL.Application_WHS_Restrict = 'N';

CASE;

// IF WRK.Shipping Company NE DTL.Company Number
IF WRK.Shipping_Company <> DTL.Company_Number;

// Send error message - 'Warehouse &1 cannot ship from Company &2'
ERROR(USR3362);
MSGPARM(DTL.USR_CDE_Parm_9);
MSGPARM(DTL.Company_Number);

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.USR_CDE_Parm_9);

ENDIF;

//?Validate warehouse 10 if entered
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.USR Message Line 3 = CND.Eq Blank
DTL.USR_Message_Line_3 = *BLANK;

ENDIF;

//?If Omit is selected there must be at least 1 warehouse entered
CASE;

// IF DTL.USR Select/Omit Flag is Omit
IF DTL.USR_Select_Omit_Flag = 'O';

CASE;

// IF DTL.USR Warehouse Code is Warehouse Code Blank
IF DTL.USR_Warehouse_Code = *BLANK;

// AND DTL.USR CDE Parm 1 is Warehouse Code Blank
AND DTL.USR_CDE_Parm_1 = *BLANK;

// AND DTL.USR CDE Parm 2 is Warehouse Code Blank
AND DTL.USR_CDE_Parm_2 = *BLANK;

// AND DTL.USR CDE Parm 3 is Warehouse Code Blank
AND DTL.USR_CDE_Parm_3 = *BLANK;

// AND DTL.USR CDE Parm 4 is Warehouse Code Blank
AND DTL.USR_CDE_Parm_4 = *BLANK;

// AND DTL.USR CDE Parm 5 is Warehouse Code Blank
AND DTL.USR_CDE_Parm_5 = *BLANK;

// AND DTL.USR CDE Parm 6 is Warehouse Code Blank
AND DTL.USR_CDE_Parm_6 = *BLANK;

// AND DTL.USR CDE Parm 7 is Warehouse Code Blank
AND DTL.USR_CDE_Parm_7 = *BLANK;

// AND DTL.USR CDE Parm 8 is Warehouse Code Blank
AND DTL.USR_CDE_Parm_8 = *BLANK;

// AND DTL.USR CDE Parm 9 is Warehouse Code Blank
AND DTL.USR_CDE_Parm_9 = *BLANK;

// Send error message - 'Warehouse Code is required.'
ERROR(USR2015);
MSGPARM(DTL.USR_Warehouse_Code);

ENDIF;

ENDIF;

// DTL.Condition Desc. 1  USR = Condition name of DTL.Export Sales
DTL.Condition_Desc_1_USR = RTVCND(DTL.Export_Sales);

// PAR.Number of Orders = DTL.Next Order Number - DTL.CD7 Int Numeric Key
PAR.Number_of_Orders = DTL.Next_Order_Number - DTL.CD7_Int_Numeric_Key;

//?Number of orders to print cannot be greater than 50
CASE;

// IF PAR.Number of Orders is Greater than 50
IF PAR.Number_of_Orders > 50;

// Send error message - 'Number of order acknowledgements to be printed cannot be greater than 50.'
ERROR(USR2564);
MSGPARM(DTL.CD7_Int_Numeric_Key);
MSGPARM(DTL.Next_Order_Number);

ENDIF;

//?If from order number is entered, to order number must be entered
CASE;

// IF DTL.CD7 Int Numeric Key is not equal zero
IF DTL.CD7_Int_Numeric_Key <> *ZERO;

// AND DTL.Next Order Number is Equal to zeros
AND DTL.Next_Order_Number = *ZERO;

// Send error message - 'To order number must be entered.'
ERROR(USR2567);
MSGPARM(DTL.Next_Order_Number);

ENDIF;

//?DFT: To Scheduled Ship Date
CASE;

// IF DTL.Scheduled Ship Date is entered
IF DTL.Scheduled_Ship_Date <> *ZERO;

CASE;

// IF DTL.Date To               USR is Not Entered
IF DTL.Date_To_USR = *ZERO;

// DTL.Date To               USR = DTL.Scheduled Ship Date
DTL.Date_To_USR = DTL.Scheduled_Ship_Date;

ENDIF;

//?DFT: To Scheduled Ship Date
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Date To               USR = CON.*ZERO
DTL.Date_To_USR = *ZERO;

ENDIF;

//?e2176 slm 03/14/2013 Allow Email of Ack if User selects
//?If Sel Email of Ack, Omit not allowed and only 1 warehouse is allowed
CASE;

// IF DTL.Status Flag 8  Y/N is Yes
IF DTL.Status_Flag_8_Y_N = 'Y';

//?Allow email of Ack
//?Select is required
CASE;

// IF DTL.USR Select/Omit Flag is Select
IF DTL.USR_Select_Omit_Flag = 'S';

//?Select is required
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Selection not allowed on output field.'
ERROR(USR2389);

ENDIF;

//?Select of 1st warehouse is required
CASE;

// IF DTL.USR Warehouse Code is Warehouse Code Blank
IF DTL.USR_Warehouse_Code = *BLANK;

// Send error message - 'Warehouse Code is required.'
ERROR(USR2015);
MSGPARM(DTL.USR_Warehouse_Code);

//?Select of 1st warehouse is required
// IF *OTHERWISE
IF *OTHERWISE;

//?Validate that this warehouse has a warehouse dist list
CASE;

// IF DTL.USR Warehouse Code is Warehouse Code not Blank
IF DTL.USR_Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(Rtv Whs Dist Email    RT) TYPE(RTVOBJ) FILE(PNGVREP)           AC2062676;
PARAMETER(DTL.USR_Warehouse_Code);
PARAMETER('SL-ACKNOWL');
PARAMETER(WRK.Email_To_Whs);
{
 //?USER: Initialize routine

 // PAR.Email To Whs = CND.no
 PAR.Email_To_Whs = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 // PAR.Email To Whs = CND.yes
 PAR.Email_To_Whs = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF WRK.Email To Whs is yes
IF WRK.Email_To_Whs = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse has no distribution list for Email.'
ERROR(USR4589);
MSGPARM(DTL.USR_Warehouse_Code);

ENDIF;

ENDIF;

ENDIF;

//?Select of 1 warehouse only on email of ack
CASE;

// IF DTL.USR CDE Parm 1 is Not Blanks
IF DTL.USR_CDE_Parm_1 <> *BLANK;

// OR DTL.USR CDE Parm 2 is Not Blanks
OR DTL.USR_CDE_Parm_2 <> *BLANK;

// OR DTL.USR CDE Parm 3 is Not Blanks
OR DTL.USR_CDE_Parm_3 <> *BLANK;

// OR DTL.USR CDE Parm 4 is Not Blanks
OR DTL.USR_CDE_Parm_4 <> *BLANK;

// OR DTL.USR CDE Parm 5 is Not Blanks
OR DTL.USR_CDE_Parm_5 <> *BLANK;

// OR DTL.USR CDE Parm 6 is Not Blanks
OR DTL.USR_CDE_Parm_6 <> *BLANK;

// OR DTL.USR CDE Parm 7 is Not Blanks
OR DTL.USR_CDE_Parm_7 <> *BLANK;

// OR DTL.USR CDE Parm 8 is Not Blanks
OR DTL.USR_CDE_Parm_8 <> *BLANK;

// OR DTL.USR CDE Parm 9 is Not Blanks
OR DTL.USR_CDE_Parm_9 <> *BLANK;

// Send error message - 'Warehouse Select will only include the first warehouse'
ERROR(USR4585);

ENDIF;

ENDIF;

//?USER: User defined action

MOVE *ALL (To: PAR From: DTL);

//?Submit job for print
// PAR.Company Number Pass   USR = DTL.Company Number CDE
PAR.Company_Number_Pass_USR = DTL.Company_Number_CDE;

// PAR.Order Number 1  PASS  USR = DTL.CD7 Int Numeric Key
PAR.Order_Number_1_PASS_USR = DTL.CD7_Int_Numeric_Key;

// PAR.Order Number 2  PASS  USR = DTL.Next Order Number
PAR.Order_Number_2_PASS_USR = DTL.Next_Order_Number;

// PAR.Date 1          PASS  USR = DTL.Order Date
PAR.Date_1_PASS_USR = DTL.Order_Date;

// PAR.Date 2          PASS  USR = DTL.Scheduled Ship Date
PAR.Date_2_PASS_USR = DTL.Scheduled_Ship_Date;

// PAR.Thru Date Pass        USR = DTL.Date To               USR
PAR.Thru_Date_Pass_USR = DTL.Date_To_USR;

// PAR.Date 3          PASS  USR = DTL.Actual Shipped Date
PAR.Date_3_PASS_USR = DTL.Actual_Shipped_Date;

// Call program PRT Acknowldg. CLP 1   UP.
CALL PROGRAM(PRT Acknowldg. CLP 1   UP) ('PDJ1UPR');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('O/M');
PARAMETER('PDJWPCLP');
PARAMETER('Print Acknowledgements');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Date_1_PASS_USR);
PARAMETER(PAR.Date_2_PASS_USR);
PARAMETER(PAR.Thru_Date_Pass_USR);
PARAMETER(PAR.Order_Number_1_PASS_USR);
PARAMETER(PAR.Order_Number_2_PASS_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(DTL.Export_Sales);
PARAMETER(DTL.Order_Type_Sales);
PARAMETER(DTL.Shipping_Method);
PARAMETER(PAR.Billing_Activity_Type);
PARAMETER(DTL.USR_Warehouse_Code);
PARAMETER(DTL.USR_CDE_Parm_1);
PARAMETER(DTL.USR_CDE_Parm_2);
PARAMETER(DTL.USR_CDE_Parm_3);
PARAMETER(DTL.USR_CDE_Parm_4);
PARAMETER(DTL.USR_CDE_Parm_5);
PARAMETER(DTL.USR_CDE_Parm_6);
PARAMETER(DTL.USR_CDE_Parm_7);
PARAMETER(DTL.USR_CDE_Parm_8);
PARAMETER(DTL.USR_CDE_Parm_9);
PARAMETER(DTL.USR_Select_Omit_Flag);
PARAMETER(PAR.Date_3_PASS_USR);
PARAMETER(DTL.Status_Flag_8_Y_N);
PARAMETER(DTL.USR_Warehouse_Code);
PARAMETER('N');

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

