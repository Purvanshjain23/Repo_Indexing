// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDSJDFR
// ?Date: 14.08.2025 Time: 03:32:16
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?***** Change Log
DO;

//?*****
//?R12926 DN  05/02/18 - Absorbed Freight Rate Override
//?- Use Absorbed Freight Rate (AFR) on an Order for all Order
//?  processing. Do not get AFR from the Company Customer once it is
//?  on the Order.
//?- Commented out AFR from Company Customer. AFR is not displayed.
//?  No logic change.
//?*****
//?** 05/20/2016 RMC E004119 remove live with tpm check
//?** 11/13/2015 LJB E004119
//?*
//?RMC E02625 Cant F17=WW ORd Appts if Live with Tpm=Yes
//?  TPM Frt Sts If PE- go to locked order, no dtl chges allowed
//?  TPM Frt Sts If In Use- go to locked order, allow dtl chges as is
//?  TPM Frt Sts If UN/IN allow all changes
//?RMC E01488 F17=WW ORd Appts and 2 line cmd key header/footer
EXECUTE FUNCTION(E00519 Access by WHS  IF) TYPE(EXCINTFUN)                      AC1960775;
{
 //?Execute internal function

 //?---------- November 2009 PKD ----------
 //?*****  WW Cust/Order Inq O.E.  *****
 //?- Do not allow Transfer Co if Application WHS Restrict = Y.
 //?***** Edit Order Header ***** -TESTED 11/10/09
 //?-  Added validation on Warehouse Code.  If Application WHS Restrict
 //?is Yes, then only the Warehouse Code for O/P Application Code
 //?are allowed.  If the Application WHS Restrict is No, then the
 //?User is allowed access to all Active Warehouses.
 //?-  Changed the F4=Prompt to only display the Warehouses the
 //?User has access to if the Application WHS Restrict is Yes.
 //?***** Edit Order Detail Lines & Copy Order Template ***** TESTED 11/10
 //?-  Added validation for Item Code. For each application and
 //?Warehouse, addtional access control is defined for TF Exempt Code.
 //?Users that are restricted by Warehouse, they may also be restricted
 //?on the Items they are able to sell.
 //?-  Added validation on Order TF Exempt Code.  If the Customer is
 //?is Exempt, then they can only sell Exempt Product. (E00505)
 //?***** Edit Load Plan Order Entry *****
 //?-  Added WHS Code to the Control Context and Record Context.
 //?For Users that are Application WHS Restrict = Yes,
 //?the CTL.Warehouse Code will be restricted to the
 //?Warehouses that they have access to.
 //?-  CTL.Warehouse Code will be required for Users with
 //?Application Warehouse Controlled.
 //?-  Added Delivery State Code (Sail Port State) to the screen.
 //?It will default to the Ship To State Code.  It will be overriden
 //?to the Sail Port State if the Shipping Line and Port Delivery
 //?Terminal are entered in the Order Header Extent.
 //?-  Added subfile select for WHS and Delv ST.
 //?***** Edit Load Plan *****
 //?-  For Users that are Application WHS Restrict = Yes,
 //?the CTL.Warehouse Code will be restricted to the
 //?Warehouses that they have access to.
 //?-  CTL.Warehouse Code will be required for Users with
 //?Application Warehouse Controlled.
 //?-  CTL.USR Load Type---Default from the CTL.USR Warehosue Code
 //?for users that are Application WHS Restrict.
 //?***** Display Change Log/Accept Load (PDAOXFR) *****
 //?-  Deletes will not be accepted by Application WHS Restricted
 //?users because we do not know the Warehouse that was on the Load.
 //?-  If Application WHS Restrict is Yes, then only select the load
 //?for acceptance if at least one order on the load has a warehouse
 //?where the user has access.
 //?-  Reverse imaged Warehouse Code on the Display. The Users with
 //?Application WHS Restrict of No will be able to see all Loads.
 //?***** Edit Load Plan *****
 //?- Added Warehouse Code to the Control and Detail Context with
 //?appropriate validations.
 //?***** Work With Load Confirmation *****
 //?- Added Warehouse Code as a parameter from the Work With Load
 //?Plan All screen for selection of the Loads to Display on the
 //?screen.  Added selection for Warehouse Code if one passed in.
 //?If the Load is not to be selected due to not matching the Whs,
 //?a record is created for the load in the array (exception array).
 //?- Added Warehouse Code to the Subfile.
 //?***** Order Status Report Prompt *****
 //?- Added Warehouse Code restriction on the prompt.
 //?***** Work With Orders Price Audit/Maintenance *****
 //?- Added Warehouse Code restriction.
 //?***** Work With Orders - Edit Ship Date  *****
 //?- Added Warehouse Code restriction.
}


//?RMC PKTR01 - changes for the new plant  7/12/04
//?*****
//?** T075 03/28/2006 LJB
//?** In the routine to change the company number, build and send
//?** an email message to the salesperson for the order that was
//?** changed.
//?*****
//?** T075 04/04/2006 LJB
//?** If F3 was used to cancel out of the transfer company# program
//?** then don't send an email to the salesperson.
//?** Test the Usr co#, quit the routine if it is zeros.
//?*****
//?RMC PFS017 - 6/6/6 If Order has been picked, call same
//?              pgms as if it were Locked.
ENDDO;

// PAR.Application Code = CND.Order Management System
PAR.Application_Code = 'OMS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

EXECUTE FUNCTION(RTV Appl Whs Restrict  RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1959551;
PARAMETER(JOB.*USER);
PARAMETER(LCL.Application_WHS_Restrict);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize subfile control

//?First time processing
CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

CASE;

// IF PAR.Allow Multi-Company is no
IF PAR.Allow_Multi_Company = 'N';

// CTL.Company Number = WRK.Company Number
CTL.Company_Number = WRK.Company_Number;

ENDIF;

// PAR.Company Number = CTL.Company Number
PAR.Company_Number = CTL.Company_Number;

// PAR.USR Customer Number  CD7 = CTL.Ship To Customer
PAR.USR_Customer_Number_CD7 = CTL.Ship_To_Customer;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

CASE;

// IF LCL.Application WHS Restrict is yes
IF LCL.Application_WHS_Restrict = 'Y';

EXECUTE FUNCTION(Rtv 1st Warehouse     RT) TYPE(RTVOBJ) FILE(PNFOREP)           AC1960292;
PARAMETER(JOB.*USER);
PARAMETER('O/P');
PARAMETER(CTL.Warehouse_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

ENDIF;

// LCL.Warehouse Code = CTL.Warehouse Code
LCL.Warehouse_Code = CTL.Warehouse_Code;

SET CURSOR;

//?USER: Initialize subfile record from DBF record

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
PARAMETER(DB1.Order_Type_Sales);
PARAMETER(WRK.Billing_Activity_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Exclude credit/debit memos
CASE;

// IF WRK.Billing Activity Type is Credit or Debit Memo
IF WRK.Billing_Activity_Type = '2'/'3';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Exclude invoiced orders
CASE;

// IF DB1.Event Code is Entered Thru 04 Ship
IF DB1.Event_Code >= '01';
AND DB1.Event_Code <= '04';

//?Exclude invoiced orders
// IF DB1.Event Code EQ WRK.BLANK
IF DB1.Event_Code = WRK.BLANK;

//?Exclude invoiced orders
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

EXECUTE FUNCTION(Rtv Plant Co Status   RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1761084;
PARAMETER(CTL.Company_Number);
PARAMETER(LCL.Plant_Company_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?05/11/07 JRB Removed hard coded companies
//?Include ctl.company
CASE;

// IF LCL.Plant Company Sts is Plant Company
IF LCL.Plant_Company_Sts = 'P';

CASE;

// IF DB1.Company Number NE CTL.Company Number
IF DB1.Company_Number <> CTL.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?RTV: RCD.Warehouse Code
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Trans_Contol_AS400_Plant);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

CASE;

// IF DB1.Header Status EQ WRK.BLANK
IF DB1.Header_Status = WRK.BLANK;

// RCD.Status Description = CON.*BLANK
RCD.Status_Description = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Status Description = Condition name of DB1.Header Status
RCD.Status_Description = RTVCND(DB1.Header_Status);

ENDIF;

ENDIF;

//?SEL: Warehouse Code
CASE;

// IF CTL.Warehouse Code is Not Blanks
IF CTL.Warehouse_Code <> *BLANK;

CASE;

// IF CTL.Warehouse Code NE RCD.Warehouse Code
IF CTL.Warehouse_Code <> RCD.Warehouse_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?CALC: Subfile control function fields

//?F4=Prompt - Warehouse Code
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Warehouse Code
IF PGM.*Cursor_field = CTL.Warehouse_Code;

CASE;

// IF LCL.Application WHS Restrict is yes
IF LCL.Application_WHS_Restrict = 'Y';

// Call program Sel User Appl Whs     SR.
CALL PROGRAM(Sel User Appl Whs     SR) ('PNMMSRR');
PARAMETER(JOB.*USER);
PARAMETER('O/P');
PARAMETER(CTL.Warehouse_Code);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(CTL.Warehouse_Code);

ENDIF;

ENDIF;

ENDIF;

EXECUTE FUNCTION(Val Warehouse         IF) TYPE(EXCINTFUN)                      AC1961537;
PARAMETER(LCL.Application_WHS_Restrict);
PARAMETER(CTL.Warehouse_Code);
PARAMETER('O/P');
{
 //?Execute internal function

 //?VAL: Warehouse Code
 CASE;

 // IF PAR.Application WHS Restrict is yes
 IF PAR.Application_WHS_Restrict = 'Y';

 CASE;

 // IF PAR.Warehouse Code is Blanks
 IF PAR.Warehouse_Code = *BLANK;

 // Send error message - 'Warehouse Code is required.'
 ERROR(USR2015);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Val App Whs Itm Acs   XF.
 CALL PROGRAM(Val App Whs Itm Acs   XF) ('PNMOXFR');
 PARAMETER(JOB.*USER);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(*ZERO);
 PARAMETER(LCL.WHS_Item_Access_Sts_USR);

 CASE;

 // IF LCL.WHS/Item Access Sts USR is Access Denied
 IF LCL.WHS_Item_Access_Sts_USR = 'D';

 // Send error message - 'Access Denied to &1 for Warehouse &2.'
 ERROR(USR2776);
 MSGPARM(JOB.*USER);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 ENDIF;

 ENDIF;

 //?VAL: Warehouse Code
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Warehouse Code is Not Blanks
 IF PAR.Warehouse_Code <> *BLANK;

 EXECUTE FUNCTION(Val Warehouse Exists   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1323885;
 PARAMETER(PAR.Warehouse_Code);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // Send error message - 'Warehouse Codes not found.'
 ERROR(USR0007);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 ENDIF;

 ENDIF;

 ENDIF;

}


//?F13=Order Inquiry
CASE;

// IF CTL.*CMD key is *Order Inquiry
IF CTL.*CMD_key = '13';

// Call program EDT Order Inq. Home    XF.
CALL PROGRAM(EDT Order Inq. Home    XF) ('PDW0XFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(WRK.Order_Type_Sales);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(WRK.Ship_To_Name);
PARAMETER(CTL.Customer_Purchase_Order_#);
PARAMETER(WRK.Order_Date);
PARAMETER(CTL.Header_Status);
PARAMETER(WRK.@Salesperson_Code);
PARAMETER(WRK.Event_Code);
PARAMETER(WRK.Process_Control);

ENDIF;

//?Select by Order Number
CASE;

// IF CTL.USR Order Number is Not equal to zeros
IF CTL.USR_Order_Number <> *ZERO;

// CTL.Order Number = CTL.USR Order Number
CTL.Order_Number = CTL.USR_Order_Number;

EXECUTE FUNCTION(RTV Ship Cust,Bill Tp RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1700188;
PARAMETER(LCL.Order_Company_Cde_Usr);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(WRK.Billing_Activity_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// CTL.Company Number = LCL.Order Company Cde Usr
CTL.Company_Number = LCL.Order_Company_Cde_Usr;

ENDIF;

// CTL.USR Order Number = CND.Equal to zeros
CTL.USR_Order_Number = *ZERO;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?Select company, customer
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Company Number
AND PGM.*Cursor_field = CTL.Company_Number;

CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(CTL.Company_Number);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

ENDIF;

//?Select company, customer
// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Ship To Customer
AND PGM.*Cursor_field = CTL.Ship_To_Customer;

// Call program SEL Cust/ShpTo Flag 'Y'SR.
CALL PROGRAM(SEL Cust/ShpTo Flag 'Y'SR) ('PDYSSRR');
PARAMETER(CTL.Ship_To_Customer);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Select for Ship To Customer
CASE;

// IF CTL.Ship To Customer NE WRK.ZERO
IF CTL.Ship_To_Customer <> WRK.ZERO;

//?7/12/04 RMC This case did check the ctl.company also for being entered
//?R12926 DN 05/02/18-Commented out AFR. If use, use AFR from OH.
EXECUTE FUNCTION(RTV Cust Ord Dft w/cst RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1700244;
PARAMETER(WRK.Company_Number);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Sales_Route_Code);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(CTL.P_O_Required_Flag);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Type_Code);
PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
PARAMETER(CTL.Mileage_To_Customer);
PARAMETER(NLL.Age_Code);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Outside_Warehouse_Flag);
PARAMETER(CTL.Customer_Group_Code);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(RTV OE Hold/ShipTo FlagRT) TYPE(RTVOBJ) FILE(CABBREP)          AC1306629;
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(PAR.Order_Entry_Hold);
PARAMETER(PAR.Ship_To_Customer_Flag);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Activity not allowed if Customer Ship to Flag is 'N'
CASE;

// IF PAR.Ship To Customer Flag is No Use as Ship to Cust
IF PAR.Ship_To_Customer_Flag = 'N';

// Send error message - 'Invalid Ship To entered - Ship to Customer Flag is 'N'o.'
ERROR(USR2482);
MSGPARM(CTL.Ship_To_Customer);

ENDIF;

//?Fill in salesperson
CASE;

// IF WRK.Sales Route Code NE WRK.BLANK
IF WRK.Sales_Route_Code <> WRK.BLANK;

EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
PARAMETER(WRK.Sales_Route_Code);
PARAMETER(CTL.Salesperson_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Fill in salesperson
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Salesperson Code = CON.*BLANK
CTL.Salesperson_Code = *BLANK;

ENDIF;

//?Fill in bill-to/ship-to information
DO;

EXECUTE FUNCTION(RTV Customer A/R Cust  RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1210709;
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Bill_to_Customer);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Cust Name/Addr/Ph  RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1332483;
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(PAR.Customer_Name);
PARAMETER(PAR.Address_Line_1);
PARAMETER(PAR.Address_Line_2);
PARAMETER(PAR.Address_Line_3);
PARAMETER(PAR.City);
PARAMETER(PAR.State_Code);
PARAMETER(PAR.Zip_Postal_Code);
PARAMETER(CTL.Telephone_Number_FF);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.@Code 6A = CON.-
WRK.@Code_6A = '-';

// WRK.@Code 3A = SUBSTRING(PAR.Zip/Postal Code,CON.6,CON.1)
WRK.@Code_3A = SUBSTRING(PAR.Zip_Postal_Code:6:1);

CASE;

// IF WRK.@Code 3A EQ WRK.@Code 6A
IF WRK.@Code_3A = WRK.@Code_6A;

// PAR.Zip/Postal Code = SUBSTRING(PAR.Zip/Postal Code,CON.1,CON.5)
PAR.Zip_Postal_Code = SUBSTRING(PAR.Zip_Postal_Code:1:5);

ENDIF;

// Execute function RTV Compressd Name/Add US.
EXECUTE FUNCTION(RTV Compressd Name/Add US) TYPE(EXCUSRSRC) ('PDRXUFR');
PARAMETER(PAR.Customer_Name);
PARAMETER(PAR.Address_Line_1);
PARAMETER(PAR.Address_Line_2);
PARAMETER(PAR.Address_Line_3);
PARAMETER(PAR.City);
PARAMETER(PAR.State_Code);
PARAMETER(PAR.Zip_Postal_Code);
PARAMETER(CTL.USR_Compressed_Address_1);
PARAMETER(CTL.USR_Compressed_Address_2);
PARAMETER(CTL.USR_Compressed_Address_3);
PARAMETER(CTL.USR_Compressed_Address_4);
PARAMETER(CTL.USR_Compressed_Address_5);
{
 * Use this function to compress name/address information
 *
 E                    UAD         5 34               Name/Address
 *
 C                     MOVEL#IADTX    UUADTX           Name
 C                     MOVEL#IACNA    UUACNA           Address 1
 C                     MOVEL#IADNA    UUADNA           Address 2
 C                     MOVEL#IAENA    UUAENA           Address 3
 C                     MOVEL#IAJNA    UUAJNA           City
 C                     MOVEL#IEINA    UUEINA           State
 C                     MOVEL#IBTTX    UUBTTX           Zip
 C                     EXSR UJ1UF
 C                     MOVELUAD,1     #OEJNA
 C                     MOVELUAD,2     #OEKNA
 C                     MOVELUAD,3     #OELNA
 C                     MOVELUAD,4     #OEMNA
 C                     MOVELUAD,5     #OENNA
 C           UJ1UF     BEGSR
 *=============================================================
 * UJ1UF - COMPRESS NAME/ADDRESS INFORMATION
 *=============================================================
 *
 C           *LIKE     DEFN #IADTX    UUADTX
 C           *LIKE     DEFN #IACNA    UUACNA
 C           *LIKE     DEFN #IADNA    UUADNA
 C           *LIKE     DEFN #IAENA    UUAENA
 C           *LIKE     DEFN #IAJNA    UUAJNA
 C           *LIKE     DEFN #IEINA    UUEINA
 C           *LIKE     DEFN #IBTTX    UUBTTX- 1
 * CLEAR OUTPUT ARRAY
 C                     MOVE *BLANK    UAD
 C                     Z-ADD1         UX      20
 C                     MOVELUUADTX    UAD,UX
 C                     ADD  1         UX
 C           UUACNA    IFNE *BLANK
 C                     MOVELUUACNA    UAD,UX
 C                     ADD  1         UX
 C                     END
 C           UUADNA    IFNE *BLANK
 C                     MOVELUUADNA    UAD,UX
 C                     ADD  1         UX
 C                     END
 C           UUAENA    IFNE *BLANK
 C                     MOVELUUAENA    UAD,UX
 C                     ADD  1         UX
 C                     END
 C                     MOVE *BLANK    UUCSTZ 34
 C                     MOVELUUAJNA    UUCST  23
 C                     MOVE UUEINA    UUCST
 C                     MOVELUUCST     UUCSTZ
 C                     MOVE UUBTTX    UUCSTZ
 C                     MOVELUUCSTZ    UAD,UX
 *============================================================
 C                     ENDSR
}


EXECUTE FUNCTION(RTV Cust Name/Addr     RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1129143;
PARAMETER(CTL.Bill_to_Customer);
PARAMETER(PAR.Customer_Name);
PARAMETER(PAR.Address_Line_1);
PARAMETER(PAR.Address_Line_2);
PARAMETER(PAR.Address_Line_3);
PARAMETER(PAR.City);
PARAMETER(PAR.State_Code);
PARAMETER(PAR.Zip_Postal_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.@Code 3A = SUBSTRING(PAR.Zip/Postal Code,CON.6,CON.1)
WRK.@Code_3A = SUBSTRING(PAR.Zip_Postal_Code:6:1);

CASE;

// IF WRK.@Code 3A EQ WRK.@Code 6A
IF WRK.@Code_3A = WRK.@Code_6A;

// PAR.Zip/Postal Code = SUBSTRING(PAR.Zip/Postal Code,CON.1,CON.5)
PAR.Zip_Postal_Code = SUBSTRING(PAR.Zip_Postal_Code:1:5);

ENDIF;

// Execute function RTV Compressd Name/Add US.
EXECUTE FUNCTION(RTV Compressd Name/Add US) TYPE(EXCUSRSRC) ('PDRXUFR');
PARAMETER(PAR.Customer_Name);
PARAMETER(PAR.Address_Line_1);
PARAMETER(PAR.Address_Line_2);
PARAMETER(PAR.Address_Line_3);
PARAMETER(PAR.City);
PARAMETER(PAR.State_Code);
PARAMETER(PAR.Zip_Postal_Code);
PARAMETER(CTL.USR_Compressed_Address_6);
PARAMETER(CTL.USR_Compressed_Address_7);
PARAMETER(CTL.USR_Compressed_Address_8);
PARAMETER(CTL.USR_Compressed_Address_9);
PARAMETER(CTL.USR_Compressed_Address_10);
{
 * Use this function to compress name/address information
 *
 E                    UAD         5 34               Name/Address
 *
 C                     MOVEL#IADTX    UUADTX           Name
 C                     MOVEL#IACNA    UUACNA           Address 1
 C                     MOVEL#IADNA    UUADNA           Address 2
 C                     MOVEL#IAENA    UUAENA           Address 3
 C                     MOVEL#IAJNA    UUAJNA           City
 C                     MOVEL#IEINA    UUEINA           State
 C                     MOVEL#IBTTX    UUBTTX           Zip
 C                     EXSR UJ1UF
 C                     MOVELUAD,1     #OEJNA
 C                     MOVELUAD,2     #OEKNA
 C                     MOVELUAD,3     #OELNA
 C                     MOVELUAD,4     #OEMNA
 C                     MOVELUAD,5     #OENNA
 C           UJ1UF     BEGSR
 *=============================================================
 * UJ1UF - COMPRESS NAME/ADDRESS INFORMATION
 *=============================================================
 *
 C           *LIKE     DEFN #IADTX    UUADTX
 C           *LIKE     DEFN #IACNA    UUACNA
 C           *LIKE     DEFN #IADNA    UUADNA
 C           *LIKE     DEFN #IAENA    UUAENA
 C           *LIKE     DEFN #IAJNA    UUAJNA
 C           *LIKE     DEFN #IEINA    UUEINA
 C           *LIKE     DEFN #IBTTX    UUBTTX- 1
 * CLEAR OUTPUT ARRAY
 C                     MOVE *BLANK    UAD
 C                     Z-ADD1         UX      20
 C                     MOVELUUADTX    UAD,UX
 C                     ADD  1         UX
 C           UUACNA    IFNE *BLANK
 C                     MOVELUUACNA    UAD,UX
 C                     ADD  1         UX
 C                     END
 C           UUADNA    IFNE *BLANK
 C                     MOVELUUADNA    UAD,UX
 C                     ADD  1         UX
 C                     END
 C           UUAENA    IFNE *BLANK
 C                     MOVELUUAENA    UAD,UX
 C                     ADD  1         UX
 C                     END
 C                     MOVE *BLANK    UUCSTZ 34
 C                     MOVELUUAJNA    UUCST  23
 C                     MOVE UUEINA    UUCST
 C                     MOVELUUCST     UUCSTZ
 C                     MOVE UUBTTX    UUCSTZ
 C                     MOVELUUCSTZ    UAD,UX
 *============================================================
 C                     ENDSR
}


ENDDO;

//?Create not allowed if customer held
CASE;

// IF CTL.*CMD key is *Create
IF CTL.*CMD_key = '06';

//?Customer is held
CASE;

// IF PAR.Order Entry Hold is New Order Hold
IF PAR.Order_Entry_Hold = 'Y';

// Send error message - 'Customer is held for new orders. Cannot process transaction.'
ERROR(USR1025);

ENDIF;

ENDIF;

//?Reload if changed customer
CASE;

// IF PAR.USR Customer Number  CD7 NE CTL.Ship To Customer
IF PAR.USR_Customer_Number_CD7 <> CTL.Ship_To_Customer;

// AND PAR.USR Customer Number  CD7 NE WRK.ZERO
AND PAR.USR_Customer_Number_CD7 <> WRK.ZERO;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

// PAR.USR Customer Number  CD7 = CTL.Ship To Customer
PAR.USR_Customer_Number_CD7 = CTL.Ship_To_Customer;

ENDIF;

//?Reload if warehouse change
CASE;

// IF LCL.Warehouse Code NE CTL.Warehouse Code
IF LCL.Warehouse_Code <> CTL.Warehouse_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

EXECUTE FUNCTION(RTV Order in Use       RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1646052;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_in_Use);
PARAMETER(RCD.Header_Status);
PARAMETER(RCD.Load_ID);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.USR Order Number = CND.Equal to zeros
CTL.USR_Order_Number = *ZERO;

EXECUTE FUNCTION(RTV Load Status        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1297640;
PARAMETER(RCD.Load_ID);
PARAMETER(PAR.Load_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

}


//?RMC PFS017 6/6/6 Get picked sts
//?load - has it been picked?
CASE;

// IF PAR.Load ID is GT Zero
IF PAR.Load_ID > *ZERO;

EXECUTE FUNCTION(PFS Val Order Picked  RT) TYPE(RTVOBJ) FILE(PPBKCPP)           AC1754282;
PARAMETER(PAR.Load_ID);
PARAMETER(LCL.Pick_Status_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Pick Status USR = CND.Not Picked
 PAR.Pick_Status_USR = 'N';

 //?USER: Process Data record

 // PAR.Pick Status USR = CND.Picked
 PAR.Pick_Status_USR = 'Y';

 QUIT;

}


//?load - has it been picked?
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Pick Status USR = CND.Not Picked
LCL.Pick_Status_USR = 'N';

ENDIF;

//?Order - Has it been picked?
CASE;

// IF RCD.Event Code is Picked Thru History
IF RCD.Event_Code >= '03';
AND RCD.Event_Code <= '07';

// LCL.Pick Status USR = CND.Picked
LCL.Pick_Status_USR = 'Y';

ENDIF;

CASE;

// IF RCD.*SFLSEL is *Edit
IF RCD.*SFLSEL = '2'/'2';

//?Edit order header,etc. or issue error message
CASE;

// IF RCD.Order in Use is yes
IF RCD.Order_in_Use = 'Y';

// Send error message - 'Order &1 is in use by another user'
ERROR(USR0508);
MSGPARM(RCD.Order_Number);

//?Edit order header,etc. or issue error message
// IF PAR.Load Status is Locked or Shipped
IF PAR.Load_Status = 'L'/'S';

// Call program EDT Locked Order       E1.
CALL PROGRAM(EDT Locked Order       E1) ('PDUZE1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Warehouse_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Edit order header,etc. or issue error message
// IF LCL.Pick Status USR is Picked
IF LCL.Pick_Status_USR = 'Y';

//?RMC PFS017 6/6/6 added this condition
// Call program EDT Locked Order       E1.
CALL PROGRAM(EDT Locked Order       E1) ('PDUZE1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Warehouse_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Edit order header,etc. or issue error message
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Process Control = CND.Process Both
WRK.Process_Control = *BLANK;

// Call program EDT Order Entry Home   XF.
CALL PROGRAM(EDT Order Entry Home   XF) ('PDSQXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(WRK.Process_Control);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

// IF RCD.*SFLSEL is *Change Details
IF RCD.*SFLSEL = '5'/'5';

EXECUTE FUNCTION(RTV Chk Detail Exists  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1425981;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


//?Edit existing order details, etc. or issue error message
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Order has no products--Edit Order Header.'
ERROR(USR2064);
MSGPARM(RCD.*SFLSEL);

//?Edit existing order details, etc. or issue error message
// IF RCD.Event Code is 04 Shipped
IF RCD.Event_Code = '04';

// Send error message - 'Order &1 has been partially confirmed, no change allowed.'
ERROR(USR1334);
MSGPARM(RCD.Order_Number);
MSGPARM(RCD.*SFLSEL);

//?Edit existing order details, etc. or issue error message
// IF RCD.Order in Use is yes
IF RCD.Order_in_Use = 'Y';

// Send error message - 'Order &1 is in use by another user'
ERROR(USR0508);
MSGPARM(RCD.Order_Number);

//?Edit existing order details, etc. or issue error message
// IF PAR.Load Status is Lock
IF PAR.Load_Status = 'L';

// Send error message - 'Order &2 can't be changed:  on a locked load.'
ERROR(USR1891);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Order_Number);

//?Edit existing order details, etc. or issue error message
// IF LCL.Pick Status USR is Picked
IF LCL.Pick_Status_USR = 'Y';

//?RMC PFS017 6/6/6 added this condition
// Send error message - 'Order &2 can't be changed:  on a locked load.'
ERROR(USR1891);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Order_Number);

//?Edit existing order details, etc. or issue error message
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Process Control = CND.Process Change
WRK.Process_Control = 'C';

// Call program EDT Order Entry Home   XF.
CALL PROGRAM(EDT Order Entry Home   XF) ('PDSQXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(WRK.Process_Control);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

// IF RCD.*SFLSEL is *Add Details
IF RCD.*SFLSEL = '7';

EXECUTE FUNCTION(RTV Chk Detail Exists  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1425981;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


//?Add order details, etc. or issue error message
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Order has no products--Edit Order Header.'
ERROR(USR2064);
MSGPARM(RCD.*SFLSEL);

//?Add order details, etc. or issue error message
// IF RCD.Event Code is 04 Shipped
IF RCD.Event_Code = '04';

// Send error message - 'Order &1 has been partially confirmed, no change allowed.'
ERROR(USR1334);
MSGPARM(RCD.Order_Number);
MSGPARM(RCD.*SFLSEL);

//?Add order details, etc. or issue error message
// IF RCD.Order in Use is yes
IF RCD.Order_in_Use = 'Y';

// Send error message - 'Order &1 is in use by another user'
ERROR(USR0508);
MSGPARM(RCD.Order_Number);

//?Add order details, etc. or issue error message
// IF PAR.Load Status is Lock
IF PAR.Load_Status = 'L';

// Send error message - 'Order &2 can't be changed:  on a locked load.'
ERROR(USR1891);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Order_Number);

//?Add order details, etc. or issue error message
// IF LCL.Pick Status USR is Picked
IF LCL.Pick_Status_USR = 'Y';

//?RMC PFS017 6/6/6 added this cond.
// Send error message - 'Order &2 can't be changed:  on a locked load.'
ERROR(USR1891);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Order_Number);

//?Add order details, etc. or issue error message
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Process Control = CND.Process Add
WRK.Process_Control = 'A';

// Call program EDT Order Entry Home   XF.
CALL PROGRAM(EDT Order Entry Home   XF) ('PDSQXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(WRK.Process_Control);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

// IF RCD.*SFLSEL is *Order Detail
IF RCD.*SFLSEL = '8'/'8';

// WRK.Application Code = CND.Order Management System
WRK.Application_Code = 'OMS';

// Call program DSP Ord Inquiry Detail DF.
CALL PROGRAM(DSP Ord Inquiry Detail DF) ('PDPZDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.Order_Sequence_Number);
PARAMETER(WRK.Order_Secondary_Line_Seq);
PARAMETER(PAR.Application_Code);

// IF RCD.*SFLSEL is *Copy request
IF RCD.*SFLSEL = '3'/'3';

//?3=Transfer Company
CASE;

// IF PAR.Allow Multi-Company is no
IF PAR.Allow_Multi_Company = 'N';

// Send error message - 'Cannot transfer order &1 - not authorized for multiple companies'
ERROR(USR3363);
MSGPARM(RCD.Order_Number);

//?3=Transfer Company
// IF LCL.Application WHS Restrict is yes
IF LCL.Application_WHS_Restrict = 'Y';

// Send error message - 'Cannot transfer order &1 - not authorized for multiple companies'
ERROR(USR3363);
MSGPARM(RCD.Order_Number);

//?3=Transfer Company
// IF LCL.Pick Status USR is Picked
IF LCL.Pick_Status_USR = 'Y';

// Send error message - 'Order has already been Picked.'
ERROR(USR1299);
MSGPARM(RCD.Order_Number);

//?3=Transfer Company
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.Load ID is Blank
IF RCD.Load_ID = *ZERO;

// WRK.USR Hold Company Number = CND.Equal to zero
WRK.USR_Hold_Company_Number = *ZERO;

// Call program Pmt Transfer Co Order PV.
CALL PROGRAM(Pmt Transfer Co Order PV) ('PPF1PVR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(WRK.USR_Hold_Company_Number);
PARAMETER(RCD.Warehouse_Code);

//?** Test the Usr co#, quit if it is zeros       T075 LJB 4/4/26
CASE;

// IF WRK.USR Hold Company Number is Equal to zero
IF WRK.USR_Hold_Company_Number = *ZERO;

//?** Test the Usr co#, quit if it is zeros       T075 LJB 4/4/26
// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

//?** Test the Usr co#, quit if it is zeros       T075 LJB 4/4/26
// IF *OTHERWISE
IF *OTHERWISE;

//?** Build msg and send email to salesperson    T075 03/28/2006 LJB
DO;

//?** Retrieve the salesperson's email address             03/28/2006 LJB
EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
PARAMETER(RCD.Sales_Route_Code);
PARAMETER(WRK.Salesperson_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Email/EDI Sts 3    RT) TYPE(RTVOBJ) FILE(PDNFREP)          AC1644428;
PARAMETER(WRK.Salesperson_Code);
PARAMETER(WRK.Email_Address);
PARAMETER(NLL.EDI_Status_3);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Build the subject line                               03/28/2006 LJB
// WRK.@text 30 = CON.Company No. has changed
WRK.@text_30 = 'Company No. has changed';

//?** Build the subject line                               03/28/2006 LJB
// WRK.@Text 3 = CVTVAR(RCD.Company Number)
WRK.AAText_3 = CVTVAR(RCD.Company_Number);

// WRK.Order Number Alpha = CVTVAR(RCD.Order Number)
WRK.Order_Number_Alpha = CVTVAR(RCD.Order_Number);

// WRK.Company Number Alpha = CVTVAR(WRK.USR Hold Company Number)
WRK.Company_Number_Alpha = CVTVAR(WRK.USR_Hold_Company_Number);

// WRK.Subject Line USR = CONCAT(CON.Company Number,WRK.@Text 3,CON.1)
WRK.Subject_Line_USR = 'Company Number' + WRK.AAText_3 (1);

// WRK.Subject Line USR = CONCAT(WRK.Subject Line USR,CON.has been changed to,CON.1)
WRK.Subject_Line_USR = WRK.Subject_Line_USR + 'has been changed to' (1);

// WRK.Subject Line USR = CONCAT(WRK.Subject Line USR,WRK.Company Number Alpha,CON.1)
WRK.Subject_Line_USR = WRK.Subject_Line_USR + WRK.Company_Number_Alpha (1);

// WRK.Subject Line USR = CONCAT(WRK.Subject Line USR,CON.for Order Number,CON.1)
WRK.Subject_Line_USR = WRK.Subject_Line_USR + 'for Order Number' (1);

// WRK.Subject Line USR = CONCAT(WRK.Subject Line USR,WRK.Order Number Alpha,CON.1)
WRK.Subject_Line_USR = WRK.Subject_Line_USR + WRK.Order_Number_Alpha (1);

//?** Send an email to the Salesperson                     03/28/2006 LJB
// WRK.Pager Msg 256 USR = WRK.Subject Line USR
WRK.Pager_Msg_256_USR = WRK.Subject_Line_USR;

// Call program CLP Exe ESNDMAIL Cmd   UP.
CALL PROGRAM(CLP Exe ESNDMAIL Cmd   UP) ('PPW6UPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(WRK.Email_Address);
PARAMETER(WRK.@text_30);
PARAMETER(WRK.Pager_Msg_256_USR);

ENDDO;

// Send information message - 'Order &1 transferred to Company &2'
MESSAGE(USR3364 *INFO);
MSGPARM(RCD.Order_Number);
MSGPARM(WRK.USR_Hold_Company_Number);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is invalid for order &1 because its on a load.'
ERROR(USR3358);
MSGPARM(RCD.Order_Number);

ENDIF;

ENDIF;

ENDIF;

// CTL.USR Order Number = CND.Equal to zeros
CTL.USR_Order_Number = *ZERO;

//?USER: Process command keys

//?F6=Create / F15=Order Inq / F17=Ord Appts
CASE;

// IF CTL.*CMD key is *Create
IF CTL.*CMD_key = '06';

// CTL.Order Number = CON.*ZERO
CTL.Order_Number = *ZERO;

// WRK.Process Control = CND.Process Both
WRK.Process_Control = *BLANK;

// Call program EDT Order Entry Home   XF.
CALL PROGRAM(EDT Order Entry Home   XF) ('PDSQXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(WRK.Process_Control);

//?Reload if order created
CASE;

// IF CTL.Order Number NE WRK.ZERO
IF CTL.Order_Number <> WRK.ZERO;

// CTL.Order Number = CON.*ZERO
CTL.Order_Number = *ZERO;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?** Display Abs Freight Info in pop-up window
//?F6=Create / F15=Order Inq / F17=Ord Appts
// IF CTL.*CMD key is CF15
IF CTL.*CMD_key = '15';

// Call program WW Co/Cust Frt Info    DF.
CALL PROGRAM(WW Co/Cust Frt Info    DF) ('PPXXDFR');
PARAMETER(CTL.Ship_To_Customer);

//?F6=Create / F15=Order Inq / F17=Ord Appts
// IF CTL.*CMD key is CF17
IF CTL.*CMD_key = '17';

// Call program WW Order Appointments DF.
CALL PROGRAM(WW Order Appointments DF) ('PNXJDFR');

ENDIF;

