// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDKYDFR
// ?Date: 14.08.2025 Time: 03:30:19
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(WRK.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.USR Program name = CON.*BLANK
PAR.USR_Program_name = *BLANK;

// PAR.USR First Line on Screen = CON.*ZERO
PAR.USR_First_Line_on_Screen = *ZERO;

// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// PAR.USR Status (Y/N) = CND.no
PAR.USR_Status_Y_N = 'N';

// PGM.*Scan limit = CND.999999
PGM.*Scan_limit = 999999;

//?USER: Initialize subfile control

//?First time processing
CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

// CTL.Order Number = PAR.Order Number
CTL.Order_Number = PAR.Order_Number;

// CTL.Order Type - Sales = PAR.Order Type - Sales
CTL.Order_Type_Sales = PAR.Order_Type_Sales;

// CTL.Ship To Customer = PAR.Ship To Customer
CTL.Ship_To_Customer = PAR.Ship_To_Customer;

// CTL.Sales Route Code = PAR.Sales Route Code
CTL.Sales_Route_Code = PAR.Sales_Route_Code;

// CTL.USR Cust. P.O. Short = PAR.Customer Purchase Order #
CTL.USR_Cust_P_O_Short = PAR.Customer_Purchase_Order_#;

// CTL.Order Date = PAR.Order Date
CTL.Order_Date = PAR.Order_Date;

// CTL.Header Status = PAR.Header Status
CTL.Header_Status = PAR.Header_Status;

// CTL.Event Code = PAR.Event Code
CTL.Event_Code = PAR.Event_Code;

// CTL.Ship To Name = PAR.Ship To Name
CTL.Ship_To_Name = PAR.Ship_To_Name;

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

ENDIF;

//?USER: Initialize subfile record from DBF record

//?If we are to re-position when returning from this function, need to save
//?    order # to pass back to calling program
//?   (PAR.order number holds the saved order #)
// Execute function Clc Line on Scrn       US.
EXECUTE FUNCTION(Clc Line on Scrn       US) TYPE(EXCUSRSRC) ('PDLCUFR');
PARAMETER(PAR.USR_First_Line_on_Screen);
{
 0110 C*****  ##RR CONTAINS THE 1ST LINE ON SCREEN                    *****
 0124 C*****  ##RRMAX CONTAINS THE LAST LINE ON PRIOR SCREEN          *****
 0124 C*****  IF ##RR - ##RRMAX = 1, THIS IS THE FIRST LINE ON SCREEN *****
 0125 C           ##RR      SUB  ##RRMX    #OPLUF
}


CASE;

// IF PAR.USR First Line on Screen is One
IF PAR.USR_First_Line_on_Screen = 1;

// PAR.Order Number = DB1.Order Number
PAR.Order_Number = DB1.Order_Number;

ENDIF;

//?Select Subfile
CASE;

// IF CTL.Company Number EQ DB1.Company Number
IF CTL.Company_Number = DB1.Company_Number;

// OR CTL.Company Number EQ WRK.ZERO
OR CTL.Company_Number = WRK.ZERO;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

//?Select Subfile
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// RCD.Billing Activity Type = DB1.Billing Activity Type
RCD.Billing_Activity_Type = DB1.Billing_Activity_Type;

//?USER: Process subfile control (Pre-confirm)

//?Prompt on Event Code
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Event Code
AND PGM.*Cursor_field = CTL.Event_Code;

// Call program SEL Event Types Active SR.
CALL PROGRAM(SEL Event Types Active SR) ('PDEQSRR');
PARAMETER(CTL.Event_Code);

ENDIF;

//?Prompt on Company Number
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Company Number
AND PGM.*Cursor_field = CTL.Company_Number;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(CTL.Company_Number);

ENDIF;

//?Sales Route Prompt
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Sales Route Code
AND PGM.*Cursor_field = CTL.Sales_Route_Code;

// Call program SEL PD Sales Route Act SR.
CALL PROGRAM(SEL PD Sales Route Act SR) ('PDFWSRR');
PARAMETER(CTL.Sales_Route_Code);

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?Process request for detail
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

CASE;

// IF RCD.Billing Activity Type is Credit or Debit Memo
IF RCD.Billing_Activity_Type = '2'/'3';

// Call program DSP Credit/Debit Memo  D1.
CALL PROGRAM(DSP Credit/Debit Memo  D1) ('PDIXD1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Date);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.Event Code is Shipped Thru 07 History
IF RCD.Event_Code >= '04';
AND RCD.Event_Code <= '07';

// Call program DSP Ord Inq Ship Dtl   DF.
CALL PROGRAM(DSP Ord Inq Ship Dtl   DF) ('PDP3DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.Order_Sequence_Number);
PARAMETER(PAR.Application_Code);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program DSP Ord Inquiry Detail DF.
CALL PROGRAM(DSP Ord Inquiry Detail DF) ('PDPZDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.Order_Sequence_Number);
PARAMETER(WRK.Order_Secondary_Line_Seq);

ENDIF;

ENDIF;

ENDIF;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?USER: Process command keys

//?View 1
CASE;

// IF CTL.*CMD key is CF14
IF CTL.*CMD_key = '14';

// PAR.Company Number = CTL.Company Number
PAR.Company_Number = CTL.Company_Number;

// PAR.Order Number = CTL.Order Number
PAR.Order_Number = CTL.Order_Number;

// PAR.Order Type - Sales = CTL.Order Type - Sales
PAR.Order_Type_Sales = CTL.Order_Type_Sales;

// PAR.Ship To Customer = CTL.Ship To Customer
PAR.Ship_To_Customer = CTL.Ship_To_Customer;

// PAR.Customer Purchase Order # = CTL.Customer Purchase Order #
PAR.Customer_Purchase_Order_# = CTL.Customer_Purchase_Order_#;

// PAR.Order Date = CTL.Order Date
PAR.Order_Date = CTL.Order_Date;

// PAR.Header Status = CTL.Header Status
PAR.Header_Status = CTL.Header_Status;

// PAR.Sales Route Code = CTL.Sales Route Code
PAR.Sales_Route_Code = CTL.Sales_Route_Code;

// PAR.Event Code = CTL.Event Code
PAR.Event_Code = CTL.Event_Code;

// PAR.USR Program name = CND.Order Inquiry View 1
PAR.USR_Program_name = 'PDWYDFR';

RETURN;

ENDIF;

//?Alternate View 3
CASE;

// IF CTL.*CMD key is CF15
IF CTL.*CMD_key = '15';

// PAR.Company Number = CTL.Company Number
PAR.Company_Number = CTL.Company_Number;

// PAR.Order Number = CTL.Order Number
PAR.Order_Number = CTL.Order_Number;

// PAR.Order Type - Sales = CTL.Order Type - Sales
PAR.Order_Type_Sales = CTL.Order_Type_Sales;

// PAR.Ship To Customer = CTL.Ship To Customer
PAR.Ship_To_Customer = CTL.Ship_To_Customer;

// PAR.Customer Purchase Order # = CTL.Customer Purchase Order #
PAR.Customer_Purchase_Order_# = CTL.Customer_Purchase_Order_#;

// PAR.Order Date = CTL.Order Date
PAR.Order_Date = CTL.Order_Date;

// PAR.Header Status = CTL.Header Status
PAR.Header_Status = CTL.Header_Status;

// PAR.Sales Route Code = CTL.Sales Route Code
PAR.Sales_Route_Code = CTL.Sales_Route_Code;

// PAR.Event Code = CTL.Event Code
PAR.Event_Code = CTL.Event_Code;

// PAR.USR Program name = CND.Order Inquiry View 3
PAR.USR_Program_name = 'PDWZDFR';

RETURN;

ENDIF;

//?USER: Exit program processing

//?CMD 3 Exit
CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

// PAR.USR Program name = CON.*BLANK
PAR.USR_Program_name = *BLANK;

RETURN;

ENDIF;

