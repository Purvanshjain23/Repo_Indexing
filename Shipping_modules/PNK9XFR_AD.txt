// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNK9XFR
// ?Date: 14.08.2025 Time: 03:45:28
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modifications and Comments
DO;

//?** 05/19/16   RMC E4119  remove live with tpm check
//?01/26/16 JJH E4687 - Load Scheduling Positioning with Mercury Gate
//?- If Live with TPM = Yes, do NOT get/update the Load Grade from
//?  the Load Header, because the Load Header file will no longer
//?  exist when we go live with TPM.
//?E01523 RMC 5/6/11 upd load header with load grade only if it changes, so
//?  theres not SO MANY journalled changes for the file
//?After all the inventory is read to create the on hand
//?After all the orders are created and the
//?Inventory file is used in the picked
//?then the following is to sequence the data
//?and load the data into the position files and get the grade
//?read the load sch post key and create the process sequence number
ENDDO;

//?01/20/16 JJH E4687 - Load Scheduling Positioning with Mercury Gate
//?- If Live with TPM = Yes, use the "MG RTV LD Stop/DropNb RT -
//?  Order Header Ext" function to get the Ld Stop/Drop.
// Call program Rtv/Chg LdSchPsProcSeqXF.
CALL PROGRAM(Rtv/Chg LdSchPsProcSeqXF) ('PMCXXFR');

//?************************
//?do not do any missing processing per  alice at this time
//?may not need and this is not completly ready would have to
//?to be test and finished.
//?Alice's instructions
//?Process key file by co/item/rcdtyp/shpdt/ev. Crt Pstn,upd qtys,order grade
//?01/20/16 JJH E4687 - Load Scheduling Positioning with Mercury Gate
//?- Pass in Live with TPM
//?** 05/19/16   RMC E4119  remove live with tpm check
// Call program Rtv/Crt LdSchPosition XF.
CALL PROGRAM(Rtv/Crt LdSchPosition XF) ('PMC1XFR');

//?Process Pstn file by load and update load grade, mult whses sts
//?01/20/16 JJH E4687 - Load Scheduling Positioning with Mercury Gate
EXECUTE FUNCTION(Rtv/Chg Ld Grd,MltWhs  RT) TYPE(RTVOBJ) FILE(PDMHCPP)          AC1515578;
{
 //?USER: Initialize routine

 // PAR.Load Grade = WRK.BLANK
 PAR.Load_Grade = WRK.BLANK;

 //?USER: Process Data record

 //?Load id break --  the highest Order Grade (Desc seq) is the Load Grade
 CASE;

 // IF DB1.Load ID NE PAR.Load ID USR
 IF DB1.Load_ID <> PAR.Load_ID_USR;

 // PAR.Load ID USR = DB1.Load ID
 PAR.Load_ID_USR = DB1.Load_ID;

 // PAR.Load Grade = DB1.Order Grade
 PAR.Load_Grade = DB1.Order_Grade;

 //?Check for Multiple warehouses on the load
 EXECUTE FUNCTION(RTV Load Id Mult Whses RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1515599;
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.Multiple_Warehouses);
 {
  //?USER: Initialize routine

  //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
  // PAR.Multiple Warehouses = WRK.BLANK
  PAR.Multiple_Warehouses = WRK.BLANK;

  // PAR.Warehouse Code = CON.*BLANK
  PAR.Warehouse_Code = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV 1st Warehouse      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1575817;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   // PAR.Warehouse Code = DB1.Warehouse Code
   PAR.Warehouse_Code = DB1.Warehouse_Code;

   QUIT;

  }

  CASE;

  // IF PAR.Warehouse Code is Warehouse Code Blank
  IF PAR.Warehouse_Code = *BLANK;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  // IF PAR.Warehouse Code NE LCL.Warehouse Code
  IF PAR.Warehouse_Code <> LCL.Warehouse_Code;

  // PAR.Multiple Warehouses = CND.Multiple Warehouses f/Ld
  PAR.Multiple_Warehouses = 'M';

  QUIT;

  ENDIF;

 }

 CASE;

 // IF DB1.Load ID is GT Zero
 IF DB1.Load_ID > *ZERO;

 //?RMC E01523 update grade only if it changes so we dont have so much
 //? journaling
 //?01/20/16 JJH E4687 - Load Scheduling Positioning with Mercury Gate
 //?** 05/19/16   RMC E4119  remove live with tpm check
 EXECUTE FUNCTION(Rtv/Chg Ld Sched Grd  RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC2017851;
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.Load_Grade);
 {
  //?USER: Process Data record

  CASE;

  // IF PAR.Load Grade NE DB1.Schedule Pos Load Grade
  IF PAR.Load_Grade <> DB1.Schedule_Pos_Load_Grade;

  EXECUTE FUNCTION(Chg LdH SchPosLdGrd   CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC1917511;
  PARAMETER(DB1.Load_ID);
  PARAMETER(PAR.Load_Grade);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

 }

 ENDIF;

 ENDIF;

 //?Change Load Grade and Mult Whse Sts
 CASE;

 // IF DB1.Load ID is GT Zero
 IF DB1.Load_ID > *ZERO;

 EXECUTE FUNCTION(Chg Load Schdlng Pstn CH) TYPE(CHGOBJ) FILE(PDMHCPP)           AC1514134;
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.LSP_Accounting_Co);
 PARAMETER(DB1.LSP_Prodution_Warehouse);
 PARAMETER(DB1.LSP_Order_Company);
 PARAMETER(DB1.LSP_Order_Warehouse);
 PARAMETER(DB1.Sequence);
 PARAMETER(DB1.Record_Type);
 PARAMETER(DB1.Thru_Scheduled_Ship_Date);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Actual_Inventory);
 PARAMETER(DB1.Picked_Inventory);
 PARAMETER(DB1.Available_Inventory);
 PARAMETER(DB1.Actual_Production);
 PARAMETER(DB1.Scheduled_Production);
 PARAMETER(DB1.Available_Production);
 PARAMETER(DB1.Scheduled_Quantity);
 PARAMETER(DB1.Scheduling_Position);
 PARAMETER(DB1.Deadline_Departure_Date);
 PARAMETER(DB1.Deadline_Departure_Time);
 PARAMETER(DB1.Order_Grade);
 PARAMETER(PAR.Load_Grade);
 PARAMETER(PAR.Multiple_Warehouses);
 PARAMETER(DB1.SSI_Download_Flag);
 PARAMETER(DB1.unused_status_2);
 PARAMETER(DB1.Schedule_Sequence_Number);
 PARAMETER(DB1.Stop_Drop);
 PARAMETER(DB1.LSP_Order_Aged_Code);
 PARAMETER(DB1.LSP_Production_Date);
 PARAMETER(DB1.Process_Sequence);
 PARAMETER(DB1.Item_Age_Days);
 PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
 PARAMETER(DB1.Production_Ovr_AgeDte_To);
 PARAMETER(DB1.Production_AgeDte_Fr);
 PARAMETER(DB1.Production_AgeDte_To);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

}


