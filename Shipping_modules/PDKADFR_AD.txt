// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDKADFR
// ?Date: 14.08.2025 Time: 03:32:04
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// PAR.USR Status (Y/N) = CND.no
PAR.USR_Status_Y_N = 'N';

// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

// Call program RTV Co. Dflt Int All   XF.
CALL PROGRAM(RTV Co. Dflt Int All   XF) ('PDSTXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(PAR.Allow_Mult_Whse_to_Order);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(NLL.Company_Organization);
PARAMETER(NLL.CDI_Valuation_Grouping);
PARAMETER(NLL.CDI_Unused_Sts_3);
PARAMETER(NLL.CDI_Shipper);
PARAMETER(NLL.CDI_Produced_by_co);

//?Set up PAR warehouse and determine if it is input capable
CASE;

// IF PAR.Allow Mult Whse to Order is yes
IF PAR.Allow_Mult_Whse_to_Order = 'Y';

// PAR.Warehouse Code = WRK.Warehouse Code
PAR.Warehouse_Code = WRK.Warehouse_Code;

//?Set up PAR warehouse and determine if it is input capable
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(WRK.Trans_Contol_AS400_Plant);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Trans_Contol_AS400_Plant);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Warehouse Code = WRK.Warehouse Code
PAR.Warehouse_Code = WRK.Warehouse_Code;

ENDIF;

ENDIF;

//?USER: Initialize subfile control

//?First Time Through Program
CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

// CTL.Order Number = PAR.Order Number
CTL.Order_Number = PAR.Order_Number;

// CTL.Warehouse Code = PAR.Warehouse Code
CTL.Warehouse_Code = PAR.Warehouse_Code;

// CTL.Actual Shipped Date = PAR.Actual Shipped Date
CTL.Actual_Shipped_Date = PAR.Actual_Shipped_Date;

EXECUTE FUNCTION(RTV Ship Header        RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1307605;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(CTL.Order_Type_Sales);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(WRK.Ship_To_Name);
PARAMETER(CTL.Customer_Purchase_Order_#);
PARAMETER(PAR.Order_Date);
PARAMETER(PAR.Requested_Ship_Date);
PARAMETER(CTL.Special_Instructions);
PARAMETER(CTL.Special_Instructions_2);
PARAMETER(CTL.Carrier_Code);
PARAMETER(CTL.Order_Type_Print_Status);
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(CTL.Order_Value_Total);
PARAMETER(CTL.Order_Weight_Total);
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Export_Status);
PARAMETER(CTL.Palletize);
PARAMETER(CTL.Shrink_Wrap);
PARAMETER(CTL.Slip_Sheet);
PARAMETER(CTL.Reefer_Temperature);
PARAMETER(PAR.Billing_Activity_Type);
PARAMETER(WRK.Email_Cust_On_Order_Ship);
PARAMETER(WRK.Order_Emailed);
PARAMETER(CTL.Shipping_Temp_Code_C_F);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.USR Status (Y/N) = CND.yes
WRK.USR_Status_Y_N = 'Y';

EXECUTE FUNCTION(RTV Check Ship Confirm RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1306368;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(WRK.USR_Status_Y_N);
{
 //?USER: Initialize routine

 // PAR.USR Status (Y/N) = CND.yes
 PAR.USR_Status_Y_N = 'Y';

 //?USER: Processing if Data record not found

 // PAR.USR Status (Y/N) = CND.no
 PAR.USR_Status_Y_N = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.Work Confirm Status is Open
 IF DB1.Work_Confirm_Status = *BLANK;

 CASE;

 // IF DB1.Detail Line Status is Not closed or cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'R'/'E'/'H';

 // PAR.USR Status (Y/N) = CND.no
 PAR.USR_Status_Y_N = 'N';

 QUIT;

 ENDIF;

 ENDIF;

}


// WRK.USR Status (Y/N) = CND.yes
WRK.USR_Status_Y_N = 'Y';

ENDIF;

//?USER: Initialize subfile record from DBF record

//?Subfile Record Selection
CASE;

// IF DB1.Detail Line Status is Not closed or cancelled
IF DB1.Detail_Line_Status = 'L'/'A'/'R'/'E'/'H';

// WRK.USR Status (Y/N) = CND.yes
WRK.USR_Status_Y_N = 'Y';

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

//?Subfile Record Selection
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Transaction - Ship Date
CASE;

// IF CTL.Actual Shipped Date is not entered
IF CTL.Actual_Shipped_Date = *ZERO;

// CTL.Actual Shipped Date = DB1.Actual Shipped Date
CTL.Actual_Shipped_Date = DB1.Actual_Shipped_Date;

ENDIF;

// RCD.USR Quantity Confirmed = DB1.Quantity Shipped Total
RCD.USR_Quantity_Confirmed = DB1.Quantity_Shipped_Total;

// RCD.USR Weight Confirmed = DB1.Weight Shipped Total
RCD.USR_Weight_Confirmed = DB1.Weight_Shipped_Total;

// RCD.USR Confirm Status = CND.Blank
RCD.USR_Confirm_Status = *BLANK;

// RCD.USR Line Status Desc = CND.Blank
RCD.USR_Line_Status_Desc = *BLANK;

//?Line Status Description
//?Line Status Description
CASE;

// IF DB1.Detail Line Status is Available
IF DB1.Detail_Line_Status = 'A';

// RCD.USR Line Status Desc = CND.Available
RCD.USR_Line_Status_Desc = 'AVAIL';

//?Line Status Description
// IF DB1.Detail Line Status is Complete
IF DB1.Detail_Line_Status = 'C';

// RCD.USR Line Status Desc = CND.Complete
RCD.USR_Line_Status_Desc = 'COMPL';

//?Line Status Description
// IF DB1.Detail Line Status is Confirmed
IF DB1.Detail_Line_Status = 'R';

// RCD.USR Line Status Desc = CND.Confirm
RCD.USR_Line_Status_Desc = 'CONFM';

//?Line Status Description
// IF DB1.Detail Line Status is Entered
IF DB1.Detail_Line_Status = 'E';

// RCD.USR Line Status Desc = CND.Enter
RCD.USR_Line_Status_Desc = 'ENTER';

ENDIF;

//?Confirm Status on screen
//?over status
CASE;

// IF DB1.Work Over/Short Status is Overage
IF DB1.Work_Over_Short_Status = 'O';

// RCD.USR Confirm Status = CON.OVER
RCD.USR_Confirm_Status = 'OVER';

ENDIF;

//?Short status
CASE;

// IF DB1.Work Over/Short Status is Short
IF DB1.Work_Over_Short_Status = 'S';

// RCD.USR Confirm Status = CON.SHORT
RCD.USR_Confirm_Status = 'SHORT';

ENDIF;

//?Substitution
CASE;

// IF DB1.Order Secondary Line Seq is GT 1
IF DB1.Order_Secondary_Line_Seq > 1;

// RCD.USR Confirm Status = CON.SUBST
RCD.USR_Confirm_Status = 'SUBST';

ENDIF;

//?USER: Process subfile control (Pre-confirm)

// WRK.Create Requested = CND.*Blank
WRK.Create_Requested = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?USER: Process subfile record (Pre-confirm)

//?Process Action Selections
//?Substitution
CASE;

// IF RCD.Order Secondary Line Seq is GT 1
IF RCD.Order_Secondary_Line_Seq > 1;

// RCD.USR Confirm Status = CON.SUBST
RCD.USR_Confirm_Status = 'SUBST';

ENDIF;

//?Display Allocated Inventory
CASE;

// IF RCD.*SFLSEL is Option 5
IF RCD.*SFLSEL = '5'/'5';

// Call program Dsp Allocated Inv     DF.
CALL PROGRAM(Dsp Allocated Inv     DF) ('PDKVDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Quantity_Scheduled);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?Comments
CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

// Call program DSP Ord Dtl Comment    DF.
CALL PROGRAM(DSP Ord Dtl Comment    DF) ('PDXODFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(*BLANK);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?USER: Final processing (Pre-confirm)

CASE;

// IF PAR.USR Status (Y/N) is yes
IF PAR.USR_Status_Y_N = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PAR.USR Status (Y/N) = CND.no
PAR.USR_Status_Y_N = 'N';

ENDIF;

