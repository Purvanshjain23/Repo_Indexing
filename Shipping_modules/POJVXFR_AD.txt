// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POJVXFR
// ?Date: 14.08.2025 Time: 03:37:39
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?03/15/16 JJH E4687 - Load Scheduling Position
EXECUTE FUNCTION(RTV Crt Slots f/loads RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1619512;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(PAR.Warehouse_Code);
{
 //?USER: Initialize routine

 //?05/11/04 SLM PKTR01 Multi-Company - Order Header TRG Remove Co
 //?                                    from Logical View
 // Call program Rtv Company Ctl Vals  XF.
 CALL PROGRAM(Rtv Company Ctl Vals  XF) ('PNOQXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
 PARAMETER(LCL.Partial_Load_Max_Lbs_USR);

 EXECUTE FUNCTION(RTV Warehouse Slot Typ RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1619241;
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(LCL.Warehouse_Type);
 PARAMETER(LCL.WHS_Slotting_Limit_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?USER: Process Data record

 // LCL.LSSA Load Slot Type = WRK.BLANK 1               USR
 LCL.LSSA_Load_Slot_Type = WRK.BLANK_1_USR;

 // LCL.LSSA Partial Load Sts = CND.blank
 LCL.LSSA_Partial_Load_Sts = *BLANK;

 //?Priority - CB,EX,BX
 CASE;

 // IF PAR.Scheduled Ship Date is not entered
 IF PAR.Scheduled_Ship_Date = *ZERO;

 // OR DB1.Scheduled Ship Date EQ PAR.Scheduled Ship Date
 OR DB1.Scheduled_Ship_Date = PAR.Scheduled_Ship_Date;

 CASE;

 // IF DB1.Shipping Method is Not Rail
 IF DB1.Shipping_Method = 'CT'/'PT';

 // AND DB1.Load Type is Regular
 AND DB1.Load_Type = 'R';

 //?05/11/04 SLM PKTR01 Multi-Company - Function was changed
 //?   to remove Company RST or Pos
 EXECUTE FUNCTION(RTV UM/Whs Code,BX Qty RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1625242;
 PARAMETER(*ZERO);
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.U_M_Ordered);
 PARAMETER(LCL.Boxes_Total_Quantity);
 {
  //?USER: Initialize routine

  //?05/13/04 SLM PKTR01 Multi-Company - Funt chg to rmv Co RST or Pos
  // PAR.USR Unit of Measure = CON.*BLANK
  PAR.USR_Unit_of_Measure = *BLANK;

  // WRK.First Time Flag = CND.Yes
  WRK.First_Time_Flag = 'Y';

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV UM/Whs Code,BX Qty RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1625244;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(1);
  PARAMETER(PAR.USR_Unit_of_Measure);
  PARAMETER(PAR.Boxes_Total_Quantity);
  {
   //?USER: Initialize routine

   // WRK.First Time Flag = CND.Yes
   WRK.First_Time_Flag = 'Y';

   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   QUIT;

   //?USER: Process Data record

   CASE;

   // IF DB1.Detail Line Status is Cancelled
   IF DB1.Detail_Line_Status = 'X';

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?S17054 DN 04/08/21-Beyond this point, changed all 'U/M - Ordered'
   //?  to reference LCL Context instead of DB1.
   //?S17054 DN 04/08/21-Count Type 'Cases' (CS) as 'Boxes' (BX).
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.U/M - Ordered = DB1.U/M - Ordered
   LCL.U_M_Ordered = DB1.U_M_Ordered;

   CASE;

   // IF LCL.U/M - Ordered is Cases
   IF LCL.U_M_Ordered = 'CS';

   // LCL.U/M - Ordered = CND.EQ Boxes
   LCL.U_M_Ordered = 'BX';

   ENDIF;

   ENDIF;

   //?Accumulate the Box Quantity for slotting consideration  6/12/01
   CASE;

   // IF LCL.U/M - Ordered is EQ Boxes
   IF LCL.U_M_Ordered = 'BX';

   // PAR.Boxes Total Quantity = PAR.Boxes Total Quantity + DB1.Quantity Ordered
   PAR.Boxes_Total_Quantity = PAR.Boxes_Total_Quantity + DB1.Quantity_Ordered;

   ENDIF;

   CASE;

   // IF PAR.USR Unit of Measure is *Blank
   IF PAR.USR_Unit_of_Measure = *BLANK;

   // PAR.USR Unit of Measure = LCL.U/M - Ordered
   PAR.USR_Unit_of_Measure = LCL.U_M_Ordered;

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF LCL.U/M - Ordered EQ PAR.USR Unit of Measure
   IF LCL.U_M_Ordered = PAR.USR_Unit_of_Measure;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.USR Unit of Measure = CND.Mixed
   PAR.USR_Unit_of_Measure = 'MX';

   ENDIF;

   ENDIF;

   ENDIF;

  }

  //?USER: Exit processing

  //?RMC E2709 added here so it wont need to be in every calling pgm
  CASE;

  // IF PAR.USR Unit of Measure is Mixed
  IF PAR.USR_Unit_of_Measure = 'MX';

  EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
  PARAMETER(DB1.Company_Number);
  PARAMETER('BOXLOAD');
  PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
  IF PAR.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

  // PAR.USR Unit of Measure = CND.Combos
  PAR.USR_Unit_of_Measure = 'CB';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.USR Unit of Measure = CND.Boxed
  PAR.USR_Unit_of_Measure = 'BX';

  ENDIF;

  ENDIF;

 }

 // LCL.LSSA Partial Load Sts = CND.blank
 LCL.LSSA_Partial_Load_Sts = *BLANK;

 //?Slot for Loads if Warehouse slot type is Load
 CASE;

 // IF LCL.WHS Slotting Limit Type is By Load
 IF LCL.WHS_Slotting_Limit_Type = 'L';

 //?Slot the load if load wt gt partial load lbs (20000)
 CASE;

 // IF DB1.Total Load Order Weight GT LCL.Partial Load Max Lbs USR
 IF DB1.Total_Load_Order_Weight > LCL.Partial_Load_Max_Lbs_USR;

 CASE;

 // IF LCL.U/M - Ordered is Combos
 IF LCL.U_M_Ordered = 'CB';

 // LCL.LSSA Load Slot Type = CND.Combo
 LCL.LSSA_Load_Slot_Type = 'CB';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Export Status Dft = DB1.Export Status
 LCL.Export_Status_Dft = DB1.Export_Status;

 //?RMC 8/03/07 count as Exp if order from ship from whse is Export
 CASE;

 // IF DB1.Export Status is yes
 IF DB1.Export_Status = 'Y';

 // Call program RTV ExpOrd Whse for LD XF.
 CALL PROGRAM(RTV ExpOrd Whse for LD XF) ('PMK2XFR');
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Ship_From_Warehouse);
 PARAMETER(LCL.Export_Status_Dft);

 ENDIF;

 CASE;

 // IF LCL.Export Status Dft is yes
 IF LCL.Export_Status_Dft = 'Y';

 // LCL.LSSA Load Slot Type = CND.Export
 LCL.LSSA_Load_Slot_Type = 'EX';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.LSSA Load Slot Type = CND.Box
 LCL.LSSA_Load_Slot_Type = 'BX';

 ENDIF;

 ENDIF;

 //?Slot the load if load wt gt partial load lbs (20000)
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.LSSA Partial Load Sts = CND.yes
 LCL.LSSA_Partial_Load_Sts = 'Y';

 ENDIF;

 ENDIF;

 //?Slot for Weights if Warehouse Slot Type is Weight
 CASE;

 // IF LCL.WHS Slotting Limit Type is By Weight
 IF LCL.WHS_Slotting_Limit_Type = 'W';

 CASE;

 // IF LCL.U/M - Ordered is Combos
 IF LCL.U_M_Ordered = 'CB';

 // LCL.LSSA Load Slot Type = CND.Combo
 LCL.LSSA_Load_Slot_Type = 'CB';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Export Status Dft = DB1.Export Status
 LCL.Export_Status_Dft = DB1.Export_Status;

 //?RMC 8/03/07 count as Exp if order from ship from whse is Export
 CASE;

 // IF DB1.Export Status is yes
 IF DB1.Export_Status = 'Y';

 // Call program RTV ExpOrd Whse for LD XF.
 CALL PROGRAM(RTV ExpOrd Whse for LD XF) ('PMK2XFR');
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Ship_From_Warehouse);
 PARAMETER(LCL.Export_Status_Dft);

 ENDIF;

 CASE;

 // IF LCL.Export Status Dft is yes
 IF LCL.Export_Status_Dft = 'Y';

 // LCL.LSSA Load Slot Type = CND.Export
 LCL.LSSA_Load_Slot_Type = 'EX';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.LSSA Load Slot Type = CND.Box
 LCL.LSSA_Load_Slot_Type = 'BX';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 CASE;

 // IF LCL.LSSA Load Slot Type NE WRK.BLANK 1               USR
 IF LCL.LSSA_Load_Slot_Type <> WRK.BLANK_1_USR;

 // OR LCL.LSSA Partial Load Sts is yes
 OR LCL.LSSA_Partial_Load_Sts = 'Y';

 EXECUTE FUNCTION(Rtv/Crt Slot Actvty   RT) TYPE(RTVOBJ) FILE(POA4CPP)           AC1619513;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Ship_From_Warehouse);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(LCL.LSSA_Load_Slot_Type);
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.LSSA_Partial_Load_Sts);
 PARAMETER(DB1.Total_Stops);
 PARAMETER(DB1.Deadline_Departure_Date);
 PARAMETER(DB1.Deadline_Departure_Time);
 {
  //?USER: Processing if Data record not found

  // LCL.LSSA Slot Number = CON.1
  LCL.LSSA_Slot_Number = 1;

  EXECUTE FUNCTION(Crt Load Slotting Sch CR) TYPE(CRTOBJ) FILE(POA4CPP)           AC1619262;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.LSSA_Load_Slot_Type);
  PARAMETER(LCL.LSSA_Slot_Number);
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.LSSA_Partial_Load_Sts);
  PARAMETER(PAR.LSSA_Total_Stops);
  PARAMETER(PAR.Deadline_Departure_Date);
  PARAMETER(PAR.Deadline_Departure_Time);
  PARAMETER(WRK.EDI_Status_1);
  PARAMETER(WRK.EDI_Status_2);
  PARAMETER(WRK.EDI_Status_3);
  PARAMETER(WRK.Record_Status);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // LCL.LSSA Slot Number = DB1.LSSA Slot Number + CON.1
  LCL.LSSA_Slot_Number = DB1.LSSA_Slot_Number + 1;

  EXECUTE FUNCTION(Crt Load Slotting Sch CR) TYPE(CRTOBJ) FILE(POA4CPP)           AC1619262;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.LSSA_Load_Slot_Type);
  PARAMETER(LCL.LSSA_Slot_Number);
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.LSSA_Partial_Load_Sts);
  PARAMETER(PAR.LSSA_Total_Stops);
  PARAMETER(PAR.Deadline_Departure_Date);
  PARAMETER(PAR.Deadline_Departure_Time);
  PARAMETER(WRK.EDI_Status_1);
  PARAMETER(WRK.EDI_Status_2);
  PARAMETER(WRK.EDI_Status_3);
  PARAMETER(WRK.Record_Status);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  QUIT;

 }

 ENDIF;

}


