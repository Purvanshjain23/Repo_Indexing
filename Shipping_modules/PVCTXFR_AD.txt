// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PVCTXFR
// ?Date: 14.08.2025 Time: 03:51:54
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?NOTE: The following JS calls this process every 15 min interval.
//?      From 5AM to 3:00AM.
//?      TEST: WIMUPIVVRT
//?      PROD: WIMUPIVVRF
//?Setup Eradani's Environment Libraries.
// Call program Upd Setup Eradani Libs CL.
CALL PROGRAM(Upd Setup Eradani Libs CL) ('PVBFUPC');

//?Selects Only 'Timeout' Records.
EXECUTE FUNCTION(Exc Verify Timeout TrsnRT) TYPE(RTVOBJ) FILE(PVADCPP)          AC2220916;
{
 //?USER: Initialize routine

 EXECUTE FUNCTION(RTV System Value Alpha RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1530745;
 PARAMETER('WIMAPIFLBS');
 PARAMETER(LCL.Email_Address_f_Bus_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Data Libraries     RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1165753;
 PARAMETER('DTALIB');
 PARAMETER(LCL.Library_List_Code);
 PARAMETER(NLL.@Library_List_Code);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.System Value Code is Data File Library
  IF DB1.System_Value_Code = 'DTALIB';

  // PAR.Library List Code = DB1.System Value Alpha
  PAR.Library_List_Code = DB1.System_Value_Alpha;

  // IF DB1.System Value Code is History File Library
  IF DB1.System_Value_Code = 'HISLIB';

  // PAR.@Library List Code = DB1.System Value Alpha
  PAR.@Library_List_Code = DB1.System_Value_Alpha;

  QUIT;

  ENDIF;

 }

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1510877;
 PARAMETER('APIWAITTM2');
 PARAMETER(LCL.API_Wait_Time_U);
 {
  //?USER: Process Data record

  // PAR.System Value Numeric = DB1.System Value Numeric
  PAR.System_Value_Numeric = DB1.System_Value_Numeric;

  QUIT;

 }

 //?01/30/25 DN IN35950-Get API Timeout Transaction Cutoff Mins.
 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1510877;
 PARAMETER('APITOCUTOF');
 PARAMETER(LCL.API_Timeout_Trsn_Cutoff_U);
 {
  //?USER: Process Data record

  // PAR.System Value Numeric = DB1.System Value Numeric
  PAR.System_Value_Numeric = DB1.System_Value_Numeric;

  QUIT;

 }

 // LCL.API Call Failed USR = CND.Not Entered
 LCL.API_Call_Failed_USR = *BLANK;

 //?Format Email Subject Line.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Email Subject 2 USR = CONCAT(CON.Verify WIM API Call was P,CON.rocess for Timeout Trans,CON.
 LCL.Email_Subject_2_USR = 'Verify WIM API Call was P' + 'rocess for Timeout Trans' (*ZERO);

 //?If Not PROD Then Append 'TEST' to Email Subject Line.
 CASE;

 // IF LCL.Library List Code is Not PRKFLIB
 IF LCL.Library_List_Code <> 'PRKFLIB';

 // LCL.Email Subject 2 USR = CONCAT(LCL.Email Subject 2 USR,CON.- TEST,CON.1)
 LCL.Email_Subject_2_USR = LCL.Email_Subject_2_USR + '- TEST' (1);

 ENDIF;

 ENDIF;

 //?USER: Process Data record

 // LCL.API EccResult-MsgId U = CON.*BLANK
 LCL.API_EccResult_MsgId_U = *BLANK;

 // LCL.API Request Key U = DB1.API Request Key
 LCL.API_Request_Key_U = DB1.API_Request_Key;

 //?Verify Timeout Trsns was Updated in WIM Inventory Transaction Tables.
 //?**************************************************************************
 //?Call API Wrapper Program for wim.ordershipping.inventory API.
 // Call program API WIM Inv Shipping   UP.
 CALL PROGRAM(API WIM Inv Shipping   UP) ('PVAYUPR');
 PARAMETER(LCL.API_Wait_Time_U);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Ship_From_Warehouse);
 PARAMETER(DB1.WIM_Inventory_Trans_ID);
 PARAMETER(DB1.WIM_Inventory_Trans_Type);
 PARAMETER(DB1.Transaction_Date);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Transaction_Source);
 PARAMETER(DB1.Transaction_Description);
 PARAMETER(DB1.Transaction_Reason_Code);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Shift_Number);
 PARAMETER(DB1.Ship_To_Warehouse);
 PARAMETER(DB1.Transaction_Weight);
 PARAMETER(DB1.Transaction_Quantity);
 PARAMETER(DB1.Unship_Flag);
 PARAMETER(DB1.Inter_Plant_Transfer);
 PARAMETER(LCL.API_EccResult_MsgId_U);
 PARAMETER(NLL.API_EccResult_MsgDesc_U);
 PARAMETER(LCL.API_Request_Key_U);
 PARAMETER(*RCVONLY);

 //?**************************************************************************
 //?API Call Successful? Yes, Update Record Processed.
 CASE;

 // IF LCL.API EccResult-MsgId U is Success
 IF LCL.API_EccResult_MsgId_U = 'ECC0000';

 //?It is assumed for 'timeout' again will be very rare. But if timeout
 //?happens again it will be reprocessed on next time job runs.
 //?If 'Success' Then Update Record as 'Processed'.
 CASE;

 // IF LCL.API EccResult-MsgId U is Success
 IF LCL.API_EccResult_MsgId_U = 'ECC0000';

 EXECUTE FUNCTION(Chg Record Processed  CH) TYPE(CHGOBJ) FILE(PVADCPP)           AC2219094;
 PARAMETER(DB1.Surrogate_Nbr);
 PARAMETER('Y');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Time Stamp DDL IF) TYPE(EXCINTFUN)                     AC2212930;
  PARAMETER(DB1.Update_Date_Timestamp);
  PARAMETER(DB1.Update_User_Id);
  PARAMETER(DB1.Update_Program_Name);
  {
   //?Execute internal function

   //?*** Set CHANGE Time Stamp Info.
   // PAR.Update Date Timestamp = JOB.*System timestamp
   PAR.Update_Date_Timestamp = JOB.*System_timestamp;

   // PAR.Update User Id = JOB.*USER
   PAR.Update_User_Id = JOB.*USER;

   // PAR.Update Program Name = JOB.*PROGRAM
   PAR.Update_Program_Name = JOB.*PROGRAM;

  }

 }

 ENDIF;

 //?API Call Successful? Yes, Update Record Processed.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?01/30/25 DN IN35950-Commented Out & Added Addt'l Check for 'TIMEOUT'.
 //?01/30/25 DN IN35950-Check if 'TIMEOUT' & Catch All.
 CASE;

 // IF LCL.API EccResult-MsgId U is Timeout
 IF LCL.API_EccResult_MsgId_U = 'TIMEOUT';

 //?Still 'Timeout'. Check Cutoff Threshold Minutes Have Been Reached?
 //?Format Current/Created Times & Calculate Elapsed Time.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Current System Time.
 // LCL.Create Date Timestamp = JOB.*System timestamp
 LCL.Create_Date_Timestamp = JOB.*System_timestamp;

 // LCL.Date Timestamp Txt U = CVTVAR(LCL.Create Date Timestamp)
 LCL.Date_Timestamp_Txt_U = CVTVAR(LCL.Create_Date_Timestamp);

 // LCL.Hour 2A USR = SUBSTRING(LCL.Date Timestamp Txt U,CON.12,CON.2)
 LCL.Hour_2A_USR = SUBSTRING(LCL.Date_Timestamp_Txt_U:12:2);

 // LCL.Minute 2A USR = SUBSTRING(LCL.Date Timestamp Txt U,CON.15,CON.2)
 LCL.Minute_2A_USR = SUBSTRING(LCL.Date_Timestamp_Txt_U:15:2);

 // LCL.Second 2A USR = SUBSTRING(LCL.Date Timestamp Txt U,CON.18,CON.2)
 LCL.Second_2A_USR = SUBSTRING(LCL.Date_Timestamp_Txt_U:18:2);

 // LCL.Time Alpha usr 6 = CONCAT(LCL.Hour 2A USR,LCL.Minute 2A USR,CON.*ZERO)
 LCL.Time_Alpha_usr_6 = LCL.Hour_2A_USR + LCL.Minute_2A_USR (*ZERO);

 // LCL.Time Alpha usr 6 = CONCAT(LCL.Time Alpha usr 6,LCL.Second 2A USR,CON.*ZERO)
 LCL.Time_Alpha_usr_6 = LCL.Time_Alpha_usr_6 + LCL.Second_2A_USR (*ZERO);

 // LCL.Current Time = CVTVAR(LCL.Time Alpha usr 6)
 LCL.Current_Time = CVTVAR(LCL.Time_Alpha_usr_6);

 //?Created Transaction Timestamp.
 // LCL.Date Timestamp Txt U = CVTVAR(DB1.Create Date Timestamp)
 LCL.Date_Timestamp_Txt_U = CVTVAR(DB1.Create_Date_Timestamp);

 // LCL.Hour 2A USR = SUBSTRING(LCL.Date Timestamp Txt U,CON.12,CON.2)
 LCL.Hour_2A_USR = SUBSTRING(LCL.Date_Timestamp_Txt_U:12:2);

 // LCL.Minute 2A USR = SUBSTRING(LCL.Date Timestamp Txt U,CON.15,CON.2)
 LCL.Minute_2A_USR = SUBSTRING(LCL.Date_Timestamp_Txt_U:15:2);

 // LCL.Second 2A USR = SUBSTRING(LCL.Date Timestamp Txt U,CON.18,CON.2)
 LCL.Second_2A_USR = SUBSTRING(LCL.Date_Timestamp_Txt_U:18:2);

 // LCL.Time Alpha usr 6 = CONCAT(LCL.Hour 2A USR,LCL.Minute 2A USR,CON.*ZERO)
 LCL.Time_Alpha_usr_6 = LCL.Hour_2A_USR + LCL.Minute_2A_USR (*ZERO);

 // LCL.Time Alpha usr 6 = CONCAT(LCL.Time Alpha usr 6,LCL.Second 2A USR,CON.*ZERO)
 LCL.Time_Alpha_usr_6 = LCL.Time_Alpha_usr_6 + LCL.Second_2A_USR (*ZERO);

 // LCL.Create Time = CVTVAR(LCL.Time Alpha usr 6)
 LCL.Create_Time = CVTVAR(LCL.Time_Alpha_usr_6);

 //?Consider Comparing for Previous Day Time.
 CASE;

 // IF LCL.Current Time LT LCL.Create Time
 IF LCL.Current_Time < LCL.Create_Time;

 // LCL.Current Time = LCL.Current Time + CON.240000
 LCL.Current_Time = LCL.Current_Time + 240000;

 ENDIF;

 // LCL.Hours/Mins/Secs Elapsed U = LCL.Current Time - LCL.Create Time *HHMMSS
 LCL.Hours_Mins_Secs_Elapsed_U = TIMELAPSED(LCL.Current_Time LCL.Create_Time 'HS');

 // LCL.Hours/Mins/Secs Text USR = CVTVAR(LCL.Hours/Mins/Secs Elapsed U)
 LCL.Hours_Mins_Secs_Text_USR = CVTVAR(LCL.Hours_Mins_Secs_Elapsed_U);

 // LCL.Hours  2A            USR = SUBSTRING(LCL.Hours/Mins/Secs Text USR,CON.1,CON.2)
 LCL.Hours_2A_USR = SUBSTRING(LCL.Hours_Mins_Secs_Text_USR:1:2);

 // LCL.Minutes  2A          USR = SUBSTRING(LCL.Hours/Mins/Secs Text USR,CON.3,CON.2)
 LCL.Minutes_2A_USR = SUBSTRING(LCL.Hours_Mins_Secs_Text_USR:3:2);

 // LCL.@Hour = CVTVAR(LCL.Hours  2A            USR)
 LCL.@Hour = CVTVAR(LCL.Hours_2A_USR);

 // LCL.@Minutes 3 = CVTVAR(LCL.Minutes  2A          USR)
 LCL.@Minutes_3 = CVTVAR(LCL.Minutes_2A_USR);

 //?Hours Exist, Convert Hours to Minutes & Add It.
 CASE;

 // IF LCL.@Hour is GT 0
 IF LCL.@Hour > *ZERO;

 // WRK.@Minutes 3 = CON.*ZERO
 WRK.@Minutes_3 = *ZERO;

 //?Max Hours we should be having is about 7 or 8 hours elapsed time.
 CASE;

 // IF LCL.@Hour is 1 Hour
 IF LCL.@Hour = 1;

 // WRK.@Minutes 3 = CON.60
 WRK.@Minutes_3 = 60;

 //?Max Hours we should be having is about 7 or 8 hours elapsed time.
 // IF LCL.@Hour is 2 Hours
 IF LCL.@Hour = 2;

 // WRK.@Minutes 3 = CON.120
 WRK.@Minutes_3 = 120;

 //?Max Hours we should be having is about 7 or 8 hours elapsed time.
 // IF LCL.@Hour is 3 Hours
 IF LCL.@Hour = 3;

 // WRK.@Minutes 3 = CON.180
 WRK.@Minutes_3 = 180;

 //?Max Hours we should be having is about 7 or 8 hours elapsed time.
 // IF LCL.@Hour is 4 Hours
 IF LCL.@Hour = 4;

 // WRK.@Minutes 3 = CON.240
 WRK.@Minutes_3 = 240;

 //?Max Hours we should be having is about 7 or 8 hours elapsed time.
 // IF LCL.@Hour is 5 Hours
 IF LCL.@Hour = 5;

 // WRK.@Minutes 3 = CON.300
 WRK.@Minutes_3 = 300;

 //?Max Hours we should be having is about 7 or 8 hours elapsed time.
 // IF LCL.@Hour is 6 Hours
 IF LCL.@Hour = 6;

 // WRK.@Minutes 3 = CON.360
 WRK.@Minutes_3 = 360;

 //?Max Hours we should be having is about 7 or 8 hours elapsed time.
 // IF LCL.@Hour is 7 Hours
 IF LCL.@Hour = 7;

 // WRK.@Minutes 3 = CON.420
 WRK.@Minutes_3 = 420;

 //?Max Hours we should be having is about 7 or 8 hours elapsed time.
 // IF LCL.@Hour is 8 Hours
 IF LCL.@Hour = 8;

 // WRK.@Minutes 3 = CON.480
 WRK.@Minutes_3 = 480;

 //?Max Hours we should be having is about 7 or 8 hours elapsed time.
 // IF LCL.@Hour is 9 Hours
 IF LCL.@Hour = 9;

 // WRK.@Minutes 3 = CON.540
 WRK.@Minutes_3 = 540;

 //?Max Hours we should be having is about 7 or 8 hours elapsed time.
 // IF LCL.@Hour is 10 Hours
 IF LCL.@Hour = 10;

 // WRK.@Minutes 3 = CON.600
 WRK.@Minutes_3 = 600;

 ENDIF;

 // LCL.@Minutes 3 = LCL.@Minutes 3 + WRK.@Minutes 3
 LCL.@Minutes_3 = LCL.@Minutes_3 + WRK.@Minutes_3;

 ENDIF;

 ENDIF;

 //?Elapsed Time Reached Cutoff Minutes? Yes, Check Trans Exist in PUCICPP.
 CASE;

 // IF LCL.@Minutes 3 GE LCL.API Timeout Trsn Cutoff U
 IF LCL.@Minutes_3 >= LCL.API_Timeout_Trsn_Cutoff_U;

 //?Check if Transaction Exist in WIM Item Trans Detail (PUCICPP) Table?
 EXECUTE FUNCTION(Val API Timeout Trsn ExRT) TYPE(RTVOBJ) FILE(PUCICPP)          AC2240396;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Ship_From_Warehouse);
 PARAMETER('FG');
 PARAMETER(DB1.WIM_Inventory_Trans_ID);
 PARAMETER(DB1.WIM_Inventory_Trans_Type);
 PARAMETER(DB1.Transaction_Date);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Transaction_Source);
 PARAMETER(DB1.Transaction_Description);
 PARAMETER(DB1.Transaction_Quantity);
 PARAMETER(DB1.Shift_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Match_Found_USR);
 {
  //?USER: Initialize routine

  // PAR.Match Found USR = CND.No
  PAR.Match_Found_USR = 'N';

  //?USER: Process Data record

  //?Must Also Match.
  CASE;

  // IF DB1.Item Transaction Source EQ PAR.Item Transaction Source
  IF DB1.Item_Transaction_Source = PAR.Item_Transaction_Source;

  // AND DB1.Transaction Description EQ PAR.Transaction Description
  AND DB1.Transaction_Description = PAR.Transaction_Description;

  // AND DB1.Shift Number EQ PAR.Shift Number
  AND DB1.Shift_Number = PAR.Shift_Number;

  // AND DB1.Order Number EQ PAR.Order Number
  AND DB1.Order_Number = PAR.Order_Number;

  // WRK.Transaction Quantity = PAR.Transaction Quantity
  WRK.Transaction_Quantity = PAR.Transaction_Quantity;

  // LCL.Transaction Quantity = DB1.Transaction Quantity
  LCL.Transaction_Quantity = DB1.Transaction_Quantity;

  //?Use Absolute Value if Negative Qty from PAR Context.
  CASE;

  // IF PAR.Transaction Quantity is Less than zero
  IF PAR.Transaction_Quantity < *ZERO;

  // WRK.Transaction Quantity = PAR.Transaction Quantity * CON.-1 *Rounded
  WRK.Transaction_Quantity = PAR.Transaction_Quantity * -1 'H';

  ENDIF;

  //?Use Absolute Value if Negative Qty from DB1 Context.
  CASE;

  // IF DB1.Transaction Quantity is Less than zero
  IF DB1.Transaction_Quantity < *ZERO;

  // LCL.Transaction Quantity = DB1.Transaction Quantity * CON.-1 *Rounded
  LCL.Transaction_Quantity = DB1.Transaction_Quantity * -1 'H';

  ENDIF;

  //?Qty Must Match.
  CASE;

  // IF LCL.Transaction Quantity EQ WRK.Transaction Quantity
  IF LCL.Transaction_Quantity = WRK.Transaction_Quantity;

  // PAR.Match Found USR = CND.Yes
  PAR.Match_Found_USR = 'Y';

  QUIT;

  ENDIF;

  ENDIF;

 }

 //?Match Found Set Record Processed=Y Else 'Error' (E).
 CASE;

 // IF LCL.Match Found USR is Yes
 IF LCL.Match_Found_USR = 'Y';

 EXECUTE FUNCTION(Chg Record Processed  CH) TYPE(CHGOBJ) FILE(PVADCPP)           AC2219094;
 PARAMETER(DB1.Surrogate_Nbr);
 PARAMETER('Y');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Time Stamp DDL IF) TYPE(EXCINTFUN)                     AC2212930;
  PARAMETER(DB1.Update_Date_Timestamp);
  PARAMETER(DB1.Update_User_Id);
  PARAMETER(DB1.Update_Program_Name);
  {
   //?Execute internal function

   //?*** Set CHANGE Time Stamp Info.
   // PAR.Update Date Timestamp = JOB.*System timestamp
   PAR.Update_Date_Timestamp = JOB.*System_timestamp;

   // PAR.Update User Id = JOB.*USER
   PAR.Update_User_Id = JOB.*USER;

   // PAR.Update Program Name = JOB.*PROGRAM
   PAR.Update_Program_Name = JOB.*PROGRAM;

  }

 }

 //?Match Found Set Record Processed=Y Else 'Error' (E).
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Set to 'E' error.
 EXECUTE FUNCTION(Chg Record Processed  CH) TYPE(CHGOBJ) FILE(PVADCPP)           AC2219094;
 PARAMETER(DB1.Surrogate_Nbr);
 PARAMETER('E');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Time Stamp DDL IF) TYPE(EXCINTFUN)                     AC2212930;
  PARAMETER(DB1.Update_Date_Timestamp);
  PARAMETER(DB1.Update_User_Id);
  PARAMETER(DB1.Update_Program_Name);
  {
   //?Execute internal function

   //?*** Set CHANGE Time Stamp Info.
   // PAR.Update Date Timestamp = JOB.*System timestamp
   PAR.Update_Date_Timestamp = JOB.*System_timestamp;

   // PAR.Update User Id = JOB.*USER
   PAR.Update_User_Id = JOB.*USER;

   // PAR.Update Program Name = JOB.*PROGRAM
   PAR.Update_Program_Name = JOB.*PROGRAM;

  }

 }

 ENDIF;

 //?Elapsed Time Reached Cutoff Minutes? Yes, Check Trans Exist in PUCICPP.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Do nothing. Let next JS run process again.
 ENDIF;

 //?01/30/25 DN IN35950-Check if 'TIMEOUT' & Catch All.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?This is a Catch All. P2P Application would be sending 'ECC9100'.
 CASE;

 // IF LCL.API EccResult-MsgId U is Catch All Errors-ECC9100
 IF LCL.API_EccResult_MsgId_U = 'ECC9100';

 //?Transaction has been deleted from storage hence need to update
 //?WIM Inventory files is required.
 //?Update Record Processed='N' (Not Processed) for JS WIMUPIVRET to Process.
 // LCL.API Call Failed USR = CND.Yes
 LCL.API_Call_Failed_USR = 'Y';

 EXECUTE FUNCTION(Chg Record Processed  CH) TYPE(CHGOBJ) FILE(PVADCPP)           AC2219094;
 PARAMETER(DB1.Surrogate_Nbr);
 PARAMETER('N');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Time Stamp DDL IF) TYPE(EXCINTFUN)                     AC2212930;
  PARAMETER(DB1.Update_Date_Timestamp);
  PARAMETER(DB1.Update_User_Id);
  PARAMETER(DB1.Update_Program_Name);
  {
   //?Execute internal function

   //?*** Set CHANGE Time Stamp Info.
   // PAR.Update Date Timestamp = JOB.*System timestamp
   PAR.Update_Date_Timestamp = JOB.*System_timestamp;

   // PAR.Update User Id = JOB.*USER
   PAR.Update_User_Id = JOB.*USER;

   // PAR.Update Program Name = JOB.*PROGRAM
   PAR.Update_Program_Name = JOB.*PROGRAM;

  }

 }

 //?This is a Catch All. P2P Application would be sending 'ECC9100'.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?To Catch All Other Than 'ECC9100'. (Not Aware of This Scenario
 //?but we should ensure PUCICPP exist or not.)
 //?Check if Transaction Exist in WIM Item Trans Detail (PUCICPP) Table?
 EXECUTE FUNCTION(Val API Timeout Trsn ExRT) TYPE(RTVOBJ) FILE(PUCICPP)          AC2240396;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Ship_From_Warehouse);
 PARAMETER('FG');
 PARAMETER(DB1.WIM_Inventory_Trans_ID);
 PARAMETER(DB1.WIM_Inventory_Trans_Type);
 PARAMETER(DB1.Transaction_Date);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Transaction_Source);
 PARAMETER(DB1.Transaction_Description);
 PARAMETER(DB1.Transaction_Quantity);
 PARAMETER(DB1.Shift_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Match_Found_USR);
 {
  //?USER: Initialize routine

  // PAR.Match Found USR = CND.No
  PAR.Match_Found_USR = 'N';

  //?USER: Process Data record

  //?Must Also Match.
  CASE;

  // IF DB1.Item Transaction Source EQ PAR.Item Transaction Source
  IF DB1.Item_Transaction_Source = PAR.Item_Transaction_Source;

  // AND DB1.Transaction Description EQ PAR.Transaction Description
  AND DB1.Transaction_Description = PAR.Transaction_Description;

  // AND DB1.Shift Number EQ PAR.Shift Number
  AND DB1.Shift_Number = PAR.Shift_Number;

  // AND DB1.Order Number EQ PAR.Order Number
  AND DB1.Order_Number = PAR.Order_Number;

  // WRK.Transaction Quantity = PAR.Transaction Quantity
  WRK.Transaction_Quantity = PAR.Transaction_Quantity;

  // LCL.Transaction Quantity = DB1.Transaction Quantity
  LCL.Transaction_Quantity = DB1.Transaction_Quantity;

  //?Use Absolute Value if Negative Qty from PAR Context.
  CASE;

  // IF PAR.Transaction Quantity is Less than zero
  IF PAR.Transaction_Quantity < *ZERO;

  // WRK.Transaction Quantity = PAR.Transaction Quantity * CON.-1 *Rounded
  WRK.Transaction_Quantity = PAR.Transaction_Quantity * -1 'H';

  ENDIF;

  //?Use Absolute Value if Negative Qty from DB1 Context.
  CASE;

  // IF DB1.Transaction Quantity is Less than zero
  IF DB1.Transaction_Quantity < *ZERO;

  // LCL.Transaction Quantity = DB1.Transaction Quantity * CON.-1 *Rounded
  LCL.Transaction_Quantity = DB1.Transaction_Quantity * -1 'H';

  ENDIF;

  //?Qty Must Match.
  CASE;

  // IF LCL.Transaction Quantity EQ WRK.Transaction Quantity
  IF LCL.Transaction_Quantity = WRK.Transaction_Quantity;

  // PAR.Match Found USR = CND.Yes
  PAR.Match_Found_USR = 'Y';

  QUIT;

  ENDIF;

  ENDIF;

 }

 //?Match Found Set Record Processed=Y Else 'Error' (E).
 CASE;

 // IF LCL.Match Found USR is Yes
 IF LCL.Match_Found_USR = 'Y';

 EXECUTE FUNCTION(Chg Record Processed  CH) TYPE(CHGOBJ) FILE(PVADCPP)           AC2219094;
 PARAMETER(DB1.Surrogate_Nbr);
 PARAMETER('Y');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Time Stamp DDL IF) TYPE(EXCINTFUN)                     AC2212930;
  PARAMETER(DB1.Update_Date_Timestamp);
  PARAMETER(DB1.Update_User_Id);
  PARAMETER(DB1.Update_Program_Name);
  {
   //?Execute internal function

   //?*** Set CHANGE Time Stamp Info.
   // PAR.Update Date Timestamp = JOB.*System timestamp
   PAR.Update_Date_Timestamp = JOB.*System_timestamp;

   // PAR.Update User Id = JOB.*USER
   PAR.Update_User_Id = JOB.*USER;

   // PAR.Update Program Name = JOB.*PROGRAM
   PAR.Update_Program_Name = JOB.*PROGRAM;

  }

 }

 //?Match Found Set Record Processed=Y Else 'Error' (E).
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Set to 'E' error.
 EXECUTE FUNCTION(Chg Record Processed  CH) TYPE(CHGOBJ) FILE(PVADCPP)           AC2219094;
 PARAMETER(DB1.Surrogate_Nbr);
 PARAMETER('E');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Time Stamp DDL IF) TYPE(EXCINTFUN)                     AC2212930;
  PARAMETER(DB1.Update_Date_Timestamp);
  PARAMETER(DB1.Update_User_Id);
  PARAMETER(DB1.Update_Program_Name);
  {
   //?Execute internal function

   //?*** Set CHANGE Time Stamp Info.
   // PAR.Update Date Timestamp = JOB.*System timestamp
   PAR.Update_Date_Timestamp = JOB.*System_timestamp;

   // PAR.Update User Id = JOB.*USER
   PAR.Update_User_Id = JOB.*USER;

   // PAR.Update Program Name = JOB.*PROGRAM
   PAR.Update_Program_Name = JOB.*PROGRAM;

  }

 }

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?USER: Exit processing

 //?Send Email to IT Group to Notify Hardstop Error Occur on API.
 CASE;

 // IF LCL.API Call Failed USR is Yes
 IF LCL.API_Call_Failed_USR = 'Y';

 //?Format/Send Email Message.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Email Message 2 USR = CONCAT(CON.WIMUPIVVRF: The Job Sched,CON.ule for the WIM Outbound,CON.
 LCL.Email_Message_2_USR = 'WIMUPIVVRF: The Job Sched' + 'ule for the WIM Outbound' (*ZERO);

 // LCL.Email Message 2 USR = CONCAT(LCL.Email Message 2 USR,CON.API (wim.ordershipping.in,CON.1)
 LCL.Email_Message_2_USR = LCL.Email_Message_2_USR + 'API (wim.ordershipping.in' (1);

 // LCL.Email Message 2 USR = CONCAT(LCL.Email Message 2 USR,CON.ventory) call to verify t,CON.*ZERO
 LCL.Email_Message_2_USR = LCL.Email_Message_2_USR + 'ventory) call to verify t' (*ZERO);

 // LCL.Email Message 2 USR = CONCAT(LCL.Email Message 2 USR,CON.he timeout transactions,CON.*ZERO)
 LCL.Email_Message_2_USR = LCL.Email_Message_2_USR + 'he timeout transactions' (*ZERO);

 // LCL.Email Message 2 USR = CONCAT(LCL.Email Message 2 USR,CON.had a hardstop error on t,CON.1)
 LCL.Email_Message_2_USR = LCL.Email_Message_2_USR + 'had a hardstop error on t' (1);

 // LCL.Email Message 2 USR = CONCAT(LCL.Email Message 2 USR,CON.he API.,CON.*ZERO)
 LCL.Email_Message_2_USR = LCL.Email_Message_2_USR + 'he API.' (*ZERO);

 // LCL.Email Message 2 USR = CONCAT(LCL.Email Message 2 USR,CON.Transaction will be updat,CON.1)
 LCL.Email_Message_2_USR = LCL.Email_Message_2_USR + 'Transaction will be updat' (1);

 // LCL.Email Message 2 USR = CONCAT(LCL.Email Message 2 USR,CON.ed to reprocess in the ne,CON.*ZERO
 LCL.Email_Message_2_USR = LCL.Email_Message_2_USR + 'ed to reprocess in the ne' (*ZERO);

 // LCL.Email Message 2 USR = CONCAT(LCL.Email Message 2 USR,CON.xt run for JS WIMUPIVRET.,CON.*ZERO
 LCL.Email_Message_2_USR = LCL.Email_Message_2_USR + 'xt run for JS WIMUPIVRET.' (*ZERO);

 // Call program Exc ESNDMAIL Generic2 CL.
 CALL PROGRAM(Exc ESNDMAIL Generic2 CL) ('PUX2UPC');
 PARAMETER(LCL.Email_Address_f_Bus_USR);
 PARAMETER(LCL.Email_Subject_2_USR);
 PARAMETER(LCL.Email_Message_2_USR);

 ENDIF;

 ENDIF;

}


