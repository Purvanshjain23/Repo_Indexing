// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDLCEFR
// ?Date: 14.08.2025 Time: 03:35:03
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?02/19/16 JJH E4682 - Load Scheduling Position
// LCL.Status Flag 1  Y/N = CND.No
LCL.Status_Flag_1_Y_N = 'N';

// PGM.*Scan limit = CON.5000
PGM.*Scan_limit = 5000;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.LSP_Order_Company);
PARAMETER(PAR.LSP_Order_Warehouse);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

// WRK.First time flag 2     USR = CND.Yes
WRK.First_time_flag_2_USR = 'Y';

// LCL.First time flag 3 = CND.Yes
LCL.First_time_flag_3 = 'Y';

// Execute function SFL Fold/Drop  RPG    US.
EXECUTE FUNCTION(SFL Fold/Drop  RPG    US) TYPE(EXCUSRSRC) ('POBHUFU');
PARAMETER(8);
{
 ) find text=#SFLCTL
 ) insert
 A                                      SFLDROP(CF07)
 A* 07                                  SFLFOLD(CF07)
}


//?USER: Initialize subfile header

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.LSP_Order_Company);
PARAMETER(CTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.Scheduled Ship Date = CON.*ZERO
WRK.Scheduled_Ship_Date = *ZERO;

// WRK.Load Grade = WRK.BLANK
WRK.Load_Grade = WRK.BLANK;

// WRK.Deadline Departure Date = CON.*ZERO
WRK.Deadline_Departure_Date = *ZERO;

// WRK.Deadline Departure Time = CON.*ZERO
WRK.Deadline_Departure_Time = *ZERO;

// WRK.Load ID = CON.*ZERO
WRK.Load_ID = *ZERO;

//?OMS357
//?First time flag 2
CASE;

// IF WRK.First time flag 2     USR is Yes
IF WRK.First_time_flag_2_USR = 'Y';

EXECUTE FUNCTION(RTV Newest Rcd         RT) TYPE(RTVOBJ) FILE(PDMHCPP)          AC1542212;
PARAMETER(CTL.Job_Time);
PARAMETER(CTL.Job_Date);
PARAMETER(NLL.Thru_Scheduled_Ship_Date);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// WRK.USR Date - ATR = JOB.*Job date
WRK.USR_Date_ATR = JOB.*Job_date;

// WRK.First time flag 2     USR = CND.No
WRK.First_time_flag_2_USR = 'N';

// CTL.Include/Exclude Option = CND.Include
CTL.Include_Exclude_Option = 'INC';

// CTL.Include/Exclude Option 2 = CND.Include
CTL.Include_Exclude_Option_2 = 'INC';

ENDIF;

EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
PARAMETER(CTL.LSP_Order_Warehouse);
PARAMETER(LCL.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Populate Load Limits and other first time functions
DO;

//?First time -- Load CTL fields
CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

EXECUTE FUNCTION(RTV Newest Rcd         RT) TYPE(RTVOBJ) FILE(PDMHCPP)          AC1542212;
PARAMETER(WRK.Job_Time);
PARAMETER(WRK.Job_Date);
PARAMETER(NLL.Thru_Scheduled_Ship_Date);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// CTL.Job Date = WRK.Job Date
CTL.Job_Date = WRK.Job_Date;

// CTL.Job Time = WRK.Job Time
CTL.Job_Time = WRK.Job_Time;

//?dflt scheduled ship date if zeros
CASE;

// IF CTL.Scheduled Ship Date is not entered
IF CTL.Scheduled_Ship_Date = *ZERO;

// CTL.Scheduled Ship Date = WRK.USR Date - ATR
CTL.Scheduled_Ship_Date = WRK.USR_Date_ATR;

ENDIF;

// CTL.Thru Scheduled Ship Date = CTL.Scheduled Ship Date
CTL.Thru_Scheduled_Ship_Date = CTL.Scheduled_Ship_Date;

EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
PARAMETER(CTL.LSP_Order_Company);
PARAMETER(CTL.Thru_Scheduled_Ship_Date);
PARAMETER(LCL.Accounting_Period_Code);
PARAMETER(LCL.Day_of_Week);
PARAMETER(LCL.Week_Number);
{
 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.Day of the Week USR = Condition name of LCL.Day of Week
CTL.Day_of_the_Week_USR = RTVCND(LCL.Day_of_Week);

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

ENDIF;

//?RMC 4/03/01 Read the Load Hdr ... not the Ld Sched Pstn file
//?01/12/16 JJH E4682 - Load Scheduling Position with Mercury Gate
//?05/19/16 RMC E4682 - dont chk mg load stop , live with tpm
EXECUTE FUNCTION(RTV Limit Loads f/Slot RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1619257;
PARAMETER(CTL.LSP_Order_Warehouse);
PARAMETER(WRK.USR_Date_ATR);
PARAMETER(*ZERO);
PARAMETER(CTL.Export_Load_Limit);
PARAMETER(CTL.Combo_Load_Limit);
PARAMETER(CTL.Box_Load_Limit_USR);
PARAMETER(WRK.Record_Found_OrdDtlUSR);
{
 //?USER: Initialize routine

 // PAR.Export Load Limit = CON.*ZERO
 PAR.Export_Load_Limit = *ZERO;

 // PAR.Combo Load Limit = CON.*ZERO
 PAR.Combo_Load_Limit = *ZERO;

 // PAR.Box Load Limit        USR = CON.*ZERO
 PAR.Box_Load_Limit_USR = *ZERO;

 // PAR.Record Found -OrdDtlUSR = CND.Record Not Found
 PAR.Record_Found_OrdDtlUSR = 'N';

 EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(LCL.Shipping_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?** Retrieve needed values from System Values file     E000233
 // Call program Rtv Company Ctl Vals  XF.
 CALL PROGRAM(Rtv Company Ctl Vals  XF) ('PNOQXFR');
 PARAMETER(LCL.Shipping_Company);
 PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
 PARAMETER(LCL.Partial_Load_Max_Lbs_USR);

 //?change log
 DO;

 //?02/03/2010 LJB E000233
 //?   Retrieve needed values from System Values file
 //?08/03/07 RMC dly029 Count Load as Export if export order whse
 //?   matches ShipFrom Whse on the load   -- per jim n, steve b
 //?05/11/04 SLM PKTR01 Multi-Company - Order Header TRG Remove Co
 //?   from Logical View
 //?05/17/04 RMC PKTR01 Multi-Company - Use Shipping Co from Whse
 ENDDO;

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 //?RMC 9/11/13 E2709
 //?Check for Mixed having box qty>BOXLOAD qty, if yes, then BX, else CB
 //?Change Priority 3/14/01    RMC
 //?Check for Mixed having a box qty > 60 to stay BX   6/12/01    RMC
 //?Per Steve Burke - 6/27/01
 //?Dont check just for Prepaid Trucks.  Collect and Prepaid trucks included
 //?If Partial Load (<= 20000 lbs) dont count.
 //?Priority :  Combo , Export, Box
 CASE;

 // IF DB1.Load Type is Regular
 IF DB1.Load_Type = 'R';

 // AND DB1.Total Load Order Weight GT LCL.Partial Load Max Lbs USR
 AND DB1.Total_Load_Order_Weight > LCL.Partial_Load_Max_Lbs_USR;

 // AND DB1.Shipping Method is Not Rail
 AND DB1.Shipping_Method = 'CT'/'PT';

 //?Update load found so this load wont be counted again in the calling pgm.
 CASE;

 // IF DB1.Load ID EQ PAR.Load ID
 IF DB1.Load_ID = PAR.Load_ID;

 // PAR.Record Found -OrdDtlUSR = CND.Record Found
 PAR.Record_Found_OrdDtlUSR = 'Y';

 ENDIF;

 // LCL.Boxes Total Quantity = CON.*ZERO
 LCL.Boxes_Total_Quantity = *ZERO;

 //?05/11/04 SLM PKTR01 Multi-Company - Function chgd-remove Company RST/Pos
 EXECUTE FUNCTION(RTV UM/Whs Code,BX Qty RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1625242;
 PARAMETER(*ZERO);
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.U_M_Ordered);
 PARAMETER(LCL.Boxes_Total_Quantity);
 {
  //?USER: Initialize routine

  //?05/13/04 SLM PKTR01 Multi-Company - Funt chg to rmv Co RST or Pos
  // PAR.USR Unit of Measure = CON.*BLANK
  PAR.USR_Unit_of_Measure = *BLANK;

  // WRK.First Time Flag = CND.Yes
  WRK.First_Time_Flag = 'Y';

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV UM/Whs Code,BX Qty RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1625244;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(1);
  PARAMETER(PAR.USR_Unit_of_Measure);
  PARAMETER(PAR.Boxes_Total_Quantity);
  {
   //?USER: Initialize routine

   // WRK.First Time Flag = CND.Yes
   WRK.First_Time_Flag = 'Y';

   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   QUIT;

   //?USER: Process Data record

   CASE;

   // IF DB1.Detail Line Status is Cancelled
   IF DB1.Detail_Line_Status = 'X';

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?S17054 DN 04/08/21-Beyond this point, changed all 'U/M - Ordered'
   //?  to reference LCL Context instead of DB1.
   //?S17054 DN 04/08/21-Count Type 'Cases' (CS) as 'Boxes' (BX).
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.U/M - Ordered = DB1.U/M - Ordered
   LCL.U_M_Ordered = DB1.U_M_Ordered;

   CASE;

   // IF LCL.U/M - Ordered is Cases
   IF LCL.U_M_Ordered = 'CS';

   // LCL.U/M - Ordered = CND.EQ Boxes
   LCL.U_M_Ordered = 'BX';

   ENDIF;

   ENDIF;

   //?Accumulate the Box Quantity for slotting consideration  6/12/01
   CASE;

   // IF LCL.U/M - Ordered is EQ Boxes
   IF LCL.U_M_Ordered = 'BX';

   // PAR.Boxes Total Quantity = PAR.Boxes Total Quantity + DB1.Quantity Ordered
   PAR.Boxes_Total_Quantity = PAR.Boxes_Total_Quantity + DB1.Quantity_Ordered;

   ENDIF;

   CASE;

   // IF PAR.USR Unit of Measure is *Blank
   IF PAR.USR_Unit_of_Measure = *BLANK;

   // PAR.USR Unit of Measure = LCL.U/M - Ordered
   PAR.USR_Unit_of_Measure = LCL.U_M_Ordered;

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF LCL.U/M - Ordered EQ PAR.USR Unit of Measure
   IF LCL.U_M_Ordered = PAR.USR_Unit_of_Measure;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.USR Unit of Measure = CND.Mixed
   PAR.USR_Unit_of_Measure = 'MX';

   ENDIF;

   ENDIF;

   ENDIF;

  }

  //?USER: Exit processing

  //?RMC E2709 added here so it wont need to be in every calling pgm
  CASE;

  // IF PAR.USR Unit of Measure is Mixed
  IF PAR.USR_Unit_of_Measure = 'MX';

  EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
  PARAMETER(DB1.Company_Number);
  PARAMETER('BOXLOAD');
  PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
  IF PAR.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

  // PAR.USR Unit of Measure = CND.Combos
  PAR.USR_Unit_of_Measure = 'CB';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.USR Unit of Measure = CND.Boxed
  PAR.USR_Unit_of_Measure = 'BX';

  ENDIF;

  ENDIF;

 }

 CASE;

 // IF LCL.U/M - Ordered is Combos
 IF LCL.U_M_Ordered = 'CB';

 // PAR.Combo Load Limit = PAR.Combo Load Limit + CON.1
 PAR.Combo_Load_Limit = PAR.Combo_Load_Limit + 1;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Export Status Dft = DB1.Export Status
 LCL.Export_Status_Dft = DB1.Export_Status;

 //?Count Load as Export if order whse = Ship-From-Whse & Export 8/3/07
 CASE;

 // IF DB1.Export Status is yes
 IF DB1.Export_Status = 'Y';

 //?See if export order whse matches load Shipfrom whse  08/03/07 RMC
 //?For example a load could be export sts=Y and ship from whse is GP1, but
 //?there are multiple orders, and the one that is export is out of CF1
 //? in that case, dont count the load as export- per Steve B and Jim Norris
 // Call program RTV ExpOrd Whse for LD XF.
 CALL PROGRAM(RTV ExpOrd Whse for LD XF) ('PMK2XFR');
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Ship_From_Warehouse);
 PARAMETER(LCL.Export_Status_Dft);

 ENDIF;

 CASE;

 // IF LCL.Export Status Dft is yes
 IF LCL.Export_Status_Dft = 'Y';

 // PAR.Export Load Limit = PAR.Export Load Limit + CON.1
 PAR.Export_Load_Limit = PAR.Export_Load_Limit + 1;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Box Load Limit        USR = PAR.Box Load Limit        USR + CON.1
 PAR.Box_Load_Limit_USR = PAR.Box_Load_Limit_USR + 1;

 ENDIF;

 ENDIF;

 ENDIF;

}


ENDDO;

CASE;

// IF LCL.Warehouse Type is Fresh
IF LCL.Warehouse_Type = 'FR';

//?** RTV DOW data for sched ship date day number        E000233
EXECUTE FUNCTION(Rtv Load Slotting Sch RT) TYPE(RTVOBJ) FILE(POA3REP)           AC1619252;
PARAMETER(CTL.LSP_Order_Company);
PARAMETER(CTL.LSP_Order_Warehouse);
PARAMETER(LCL.Day_of_Week);
PARAMETER(CTL.Number_of_Copies);
PARAMETER(CTL.USR_3_Numeric_USR);
PARAMETER(CTL.Calc_3);
PARAMETER(NLL.Weight_Limit_for_Export);
PARAMETER(NLL.Weight_Limit_for_Combo);
PARAMETER(NLL.Weight_Limit_for_Box_Othr);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Calc 3 = CON.999
CTL.Calc_3 = 999;

// CTL.USR 3 Numeric         USR = CON.999
CTL.USR_3_Numeric_USR = 999;

// CTL.Number of Copies = CON.999
CTL.Number_of_Copies = 999;

ENDIF;

//?Box Load Info Message
CASE;

// IF CTL.Box Load Limit        USR GT CTL.Calc 3
IF CTL.Box_Load_Limit_USR > CTL.Calc_3;

// Send information message - 'The Number of Box Loads sequenced is greater than the number allowed.
MESSAGE(USR2802 *INFO);
MSGPARM(CTL.Box_Load_Limit_USR);
MSGPARM(CTL.Calc_3);

ENDIF;

//?Combo Load Info Message
CASE;

// IF CTL.Combo Load Limit GT CTL.USR 3 Numeric         USR
IF CTL.Combo_Load_Limit > CTL.USR_3_Numeric_USR;

// Send information message - 'The Number of Combo Loads sequenced is greater than the number allowe
MESSAGE(USR2803 *INFO);
MSGPARM(CTL.Combo_Load_Limit);
MSGPARM(CTL.USR_3_Numeric_USR);

ENDIF;

//?Export Load Info Message
CASE;

// IF CTL.Export Load Limit GT CTL.Number of Copies
IF CTL.Export_Load_Limit > CTL.Number_of_Copies;

// Send information message - 'The Number of Export Loads sequenced is greater than the number allow
MESSAGE(USR2863 *INFO);
MSGPARM(CTL.Export_Load_Limit);
MSGPARM(CTL.Number_of_Copies);

ENDIF;

// LCL.LSP Order Warehouse = CTL.LSP Order Warehouse
LCL.LSP_Order_Warehouse = CTL.LSP_Order_Warehouse;

// WRK.USR Unit of Measure = CTL.USR Unit of Measure
WRK.USR_Unit_of_Measure = CTL.USR_Unit_of_Measure;

// WRK.usr txt-2             usr = CTL.usr txt-2             usr
WRK.usr_txt_2_usr = CTL.usr_txt_2_usr;

// LCL.Load Grade = CTL.Load Grade
LCL.Load_Grade = CTL.Load_Grade;

//?USER: Initialize subfile record (existing record)

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

//?SEL:  Warehouse Code
CASE;

// IF CTL.LSP Order Warehouse NE DB1.LSP Order Warehouse
IF CTL.LSP_Order_Warehouse <> DB1.LSP_Order_Warehouse;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL:  Schedule Sequence Number                S16991 DN 11/04/20
CASE;

// IF CTL.Schedule Sequence Number is GT Zero
IF CTL.Schedule_Sequence_Number > *ZERO;

// AND CTL.Schedule Sequence Number NE DB1.Schedule Sequence Number
AND CTL.Schedule_Sequence_Number <> DB1.Schedule_Sequence_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL:  If Multi Warehouse Load, only select Fresh Warehouse.
CASE;

// IF RCD.Multiple Warehouses is Multiple Warehouses f/Ld
IF RCD.Multiple_Warehouses = 'M';

EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
PARAMETER(RCD.LSP_Order_Warehouse);
PARAMETER(LCL.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Warehouse Type is Frozen
IF LCL.Warehouse_Type = 'FZ';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL:  Seq = 0 only      (F9 was pressed)   RMC 03/12/07 new Fkey
CASE;

// IF LCL.Status Flag 1  Y/N is Yes
IF LCL.Status_Flag_1_Y_N = 'Y';

//?01/12/16 JJH E4682 - Load Scheduling Position with Mercury Gate
//?05/19/16 RMC E4119 - dont check live with tpm
EXECUTE FUNCTION(RTV Schd Seq Nbr/ExportRT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1514500;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Schedule_Sequence_Number);
PARAMETER(WRK.Export_Status);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF RCD.Schedule Sequence Number is GT Zero
IF RCD.Schedule_Sequence_Number > *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL:  LOAD GRADE
CASE;

// IF CTL.Load Grade NE DB1.Load Grade
IF CTL.Load_Grade <> DB1.Load_Grade;

// AND CTL.Load Grade is Not Blank
AND CTL.Load_Grade = 'C'/'L'/'X'/'A'/'P';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?Break in Key fields -- select record
CASE;

// IF DB1.Scheduled Ship Date NE WRK.Scheduled Ship Date
IF DB1.Scheduled_Ship_Date <> WRK.Scheduled_Ship_Date;

// OR DB1.Deadline Departure Date NE WRK.Deadline Departure Date
OR DB1.Deadline_Departure_Date <> WRK.Deadline_Departure_Date;

// OR DB1.Deadline Departure Time NE WRK.Deadline Departure Time
OR DB1.Deadline_Departure_Time <> WRK.Deadline_Departure_Time;

// OR DB1.Load ID NE WRK.Load ID
OR DB1.Load_ID <> WRK.Load_ID;

//?SEL:  Load Id
CASE;

// IF CTL.Load ID is GT Zero
IF CTL.Load_ID > *ZERO;

// AND CTL.Load ID NE DB1.Load ID
AND CTL.Load_ID <> DB1.Load_ID;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Record Selected
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

// WRK.Scheduled Ship Date = DB1.Scheduled Ship Date
WRK.Scheduled_Ship_Date = DB1.Scheduled_Ship_Date;

// WRK.Load Grade = DB1.Load Grade
WRK.Load_Grade = DB1.Load_Grade;

// WRK.Deadline Departure Date = DB1.Deadline Departure Date
WRK.Deadline_Departure_Date = DB1.Deadline_Departure_Date;

// WRK.Deadline Departure Time = DB1.Deadline Departure Time
WRK.Deadline_Departure_Time = DB1.Deadline_Departure_Time;

// WRK.Load ID = DB1.Load ID
WRK.Load_ID = DB1.Load_ID;

//?01/14/16 JJH E4682 - Load Scheduling Position with Mercury Gate
//?05/19/16 RMC E4119 - dont check live with tpm
EXECUTE FUNCTION(RTV Schd Seq Nbr/ExportRT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1514500;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Schedule_Sequence_Number);
PARAMETER(WRK.Export_Status);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Export Status Text
CASE;

// IF WRK.Export Status is yes
IF WRK.Export_Status = 'Y';

// RCD.usr txt-2             usr = CON.EX
RCD.usr_txt_2_usr = 'EX';

//?Export Status Text
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.usr txt-2             usr = CON.*BLANK
RCD.usr_txt_2_usr = *BLANK;

ENDIF;

// RCD.Calc 5 = CON.*ZERO
RCD.Calc_5 = *ZERO;

CASE;

// IF RCD.Load Grade is Actual Inventory only
IF RCD.Load_Grade = 'C';

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Cant be filled     RT) TYPE(RTVOBJ) FILE(PDMHCPP)          AC1583395;
PARAMETER(RCD.LSP_Order_Company);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Deadline_Departure_Date);
PARAMETER(RCD.Deadline_Departure_Time);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Calc_5);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Order Grade is Cant be filled
 IF DB1.Order_Grade = 'X';

 // PAR.Calc 5 = PAR.Calc 5 + CON.1
 PAR.Calc_5 = PAR.Calc_5 + 1;

 ENDIF;

}


ENDIF;

//?05/11/04 SLM PKTR01 Multi-Company - remove Company RST or Pos
EXECUTE FUNCTION(RTV UM/Whs Code        RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1541555;
PARAMETER(*ZERO);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.USR_Unit_of_Measure);
{
 //?USER: Initialize routine

 // PAR.USR Unit of Measure = CON.*BLANK
 PAR.USR_Unit_of_Measure = *BLANK;

 // LCL.Boxes Total Quantity = CON.*ZERO
 LCL.Boxes_Total_Quantity = *ZERO;

 // WRK.First Time Flag = CND.Yes
 WRK.First_Time_Flag = 'Y';

 //?USER: Processing if Data record not found

 QUIT;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV UM/Whs Code,BX Qty RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1625244;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(1);
 PARAMETER(PAR.USR_Unit_of_Measure);
 PARAMETER(LCL.Boxes_Total_Quantity);
 {
  //?USER: Initialize routine

  // WRK.First Time Flag = CND.Yes
  WRK.First_Time_Flag = 'Y';

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  QUIT;

  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?S17054 DN 04/08/21-Beyond this point, changed all 'U/M - Ordered'
  //?  to reference LCL Context instead of DB1.
  //?S17054 DN 04/08/21-Count Type 'Cases' (CS) as 'Boxes' (BX).
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.U/M - Ordered = DB1.U/M - Ordered
  LCL.U_M_Ordered = DB1.U_M_Ordered;

  CASE;

  // IF LCL.U/M - Ordered is Cases
  IF LCL.U_M_Ordered = 'CS';

  // LCL.U/M - Ordered = CND.EQ Boxes
  LCL.U_M_Ordered = 'BX';

  ENDIF;

  ENDIF;

  //?Accumulate the Box Quantity for slotting consideration  6/12/01
  CASE;

  // IF LCL.U/M - Ordered is EQ Boxes
  IF LCL.U_M_Ordered = 'BX';

  // PAR.Boxes Total Quantity = PAR.Boxes Total Quantity + DB1.Quantity Ordered
  PAR.Boxes_Total_Quantity = PAR.Boxes_Total_Quantity + DB1.Quantity_Ordered;

  ENDIF;

  CASE;

  // IF PAR.USR Unit of Measure is *Blank
  IF PAR.USR_Unit_of_Measure = *BLANK;

  // PAR.USR Unit of Measure = LCL.U/M - Ordered
  PAR.USR_Unit_of_Measure = LCL.U_M_Ordered;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF LCL.U/M - Ordered EQ PAR.USR Unit of Measure
  IF LCL.U_M_Ordered = PAR.USR_Unit_of_Measure;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.USR Unit of Measure = CND.Mixed
  PAR.USR_Unit_of_Measure = 'MX';

  ENDIF;

  ENDIF;

  ENDIF;

 }

 //?If doing for one Order, because it isnt tied to a load yet
 CASE;

 // IF DB1.Load ID is Blank
 IF DB1.Load_ID = *ZERO;

 CASE;

 // IF PAR.USR Unit of Measure is Mixed
 IF PAR.USR_Unit_of_Measure = 'MX';

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(DB1.Company_Number);
 PARAMETER('BOXLOAD');
 PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
 IF LCL.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

 // PAR.USR Unit of Measure = CND.Combos
 PAR.USR_Unit_of_Measure = 'CB';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Unit of Measure = CND.Boxed
 PAR.USR_Unit_of_Measure = 'BX';

 ENDIF;

 ENDIF;

 QUIT;

 ENDIF;

 //?orig code
 //?USER: Exit processing

 CASE;

 // IF PAR.USR Unit of Measure is Mixed
 IF PAR.USR_Unit_of_Measure = 'MX';

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(DB1.Company_Number);
 PARAMETER('BOXLOAD');
 PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
 IF LCL.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

 // PAR.USR Unit of Measure = CND.Combos
 PAR.USR_Unit_of_Measure = 'CB';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Unit of Measure = CND.Boxed
 PAR.USR_Unit_of_Measure = 'BX';

 ENDIF;

 ENDIF;

}


ENDIF;

//?Break in Key fields -- select record
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?01/12/16 JJH E4682 - Load Scheduling Position
//?05/19/16 RMC E4119 - dont check live with tpm
EXECUTE FUNCTION(RTV Ld Acc/Sts/Wt/LPT RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC2072076;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Load_Status);
PARAMETER(RCD.Total_Load_Order_Weight);
PARAMETER(RCD.Load_Acceptance_Flag);
PARAMETER(RCD.LPT_Load_Plan_Start_Tm);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?01/14/16 JJH E4682 - Load Scheduling Position
//?05/19/16 RMC E4119 - dont check live with tpm
EXECUTE FUNCTION(RTV Chk Ord on Hld-Pr/Cr) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1589113;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.USR_Record_Status);
PARAMETER(LCL.Production_Hold);
PARAMETER(LCL.Credit_Hold);
{
 //?USER: Initialize routine

 // PAR.USR Flag 1 = CND.No
 PAR.USR_Flag_1 = 'N';

 // PAR.Credit Hold = CND.No
 PAR.Credit_Hold = 'N';

 // PAR.Production Hold = CND.No
 PAR.Production_Hold = 'N';

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hold/Status        RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1231784;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Order_Type_Sales);
 PARAMETER(WRK.Header_Status);
 PARAMETER(WRK.Header_Status_Last);
 PARAMETER(LCL.Credit_Hold);
 PARAMETER(LCL.Production_Hold);
 PARAMETER(WRK.New_Customer_Hold);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Production Hold is Yes
 IF LCL.Production_Hold = 'Y';

 // PAR.Production Hold = CND.Yes
 PAR.Production_Hold = 'Y';

 // PAR.USR Flag 1 = CND.Yes
 PAR.USR_Flag_1 = 'Y';

 ENDIF;

 CASE;

 // IF LCL.Credit Hold is Yes
 IF LCL.Credit_Hold = 'Y';

 // PAR.Credit Hold = CND.Yes
 PAR.Credit_Hold = 'Y';

 // PAR.USR Flag 1 = CND.Yes
 PAR.USR_Flag_1 = 'Y';

 ENDIF;

}


// Execute function SFL Fold/Drop  RPG 2  US.
EXECUTE FUNCTION(SFL Fold/Drop  RPG 2  US) TYPE(EXCUSRSRC) ('POBKUFR');
{
 C     MODE          IFEQ      '0'
 C                   SETON                                        89
 C                   ELSE
 C                   SETOFF                                       89
 C                   ENDIF
}


//?01/14/16 JJH E4682 - Load Scheduling Position
//?05/19/16 RMC E4119 - dont check live with tpm
//?Default Load Sequence
CASE;

// IF RCD.Schedule Sequence Number is Zero
IF RCD.Schedule_Sequence_Number = *ZERO;

EXECUTE FUNCTION(RTV Warehouse for Orders) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1591536;
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.LSP_Order_Warehouse);
PARAMETER(PAR.Default_Load_Sequence);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(CHK for warehouse codes) TYPE(RTVOBJ) FILE(OPBGWKP)            AC1591545;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Warehouse_Code);
 PARAMETER(PAR.Default_Load_Sequence);
 {
  //?USER: Initialize routine

  // WRK.USR First Time = CND.Yes
  WRK.USR_First_Time = 'Y';

  // PAR.Warehouse Code = CND.Warehouse Code Blank
  PAR.Warehouse_Code = *BLANK;

  //?USER: Process Data record

  CASE;

  // IF WRK.USR First Time is Yes
  IF WRK.USR_First_Time = 'Y';

  // WRK.USR First Time = CND.No
  WRK.USR_First_Time = 'N';

  // PAR.Warehouse Code = DB1.Warehouse Code
  PAR.Warehouse_Code = DB1.Warehouse_Code;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF PAR.Warehouse Code EQ DB1.Warehouse Code
  IF PAR.Warehouse_Code = DB1.Warehouse_Code;

  // PAR.Default Load Sequence = CND.yes
  PAR.Default_Load_Sequence = 'Y';

  // PAR.Warehouse Code = DB1.Warehouse Code
  PAR.Warehouse_Code = DB1.Warehouse_Code;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Default Load Sequence = CND.no
  PAR.Default_Load_Sequence = 'N';

  QUIT;

  ENDIF;

  ENDIF;

 }

 // PAR.Warehouse Code = WRK.Warehouse Code
 PAR.Warehouse_Code = WRK.Warehouse_Code;

}


EXECUTE FUNCTION(RTV Default Load Seq  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1591587;
PARAMETER(WRK.LSP_Order_Warehouse);
PARAMETER(WRK.Default_Load_Sequence);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.Default Load Sequence is yes
IF PAR.Default_Load_Sequence = 'Y';

// AND WRK.Default Load Sequence is yes
AND WRK.Default_Load_Sequence = 'Y';

// RCD.Schedule Sequence Number = CON.1
RCD.Schedule_Sequence_Number = 1;

ENDIF;

ENDIF;

//?Export
CASE;

// IF CTL.Include/Exclude Option is Include
IF CTL.Include_Exclude_Option = 'INC';

//?SEL:  Export
CASE;

// IF CTL.usr txt-2             usr NE WRK.BLANK
IF CTL.usr_txt_2_usr <> WRK.BLANK;

// AND CTL.usr txt-2             usr NE RCD.usr txt-2             usr
AND CTL.usr_txt_2_usr <> RCD.usr_txt_2_usr;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Export
// IF CTL.Include/Exclude Option is Exclude
IF CTL.Include_Exclude_Option = 'EXC';

CASE;

// IF CTL.usr txt-2             usr is Blank
IF CTL.usr_txt_2_usr = *BLANK;

CASE;

// IF RCD.usr txt-2             usr is NE Blank
IF RCD.usr_txt_2_usr <> *BLANK;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Unit of Measure
CASE;

// IF CTL.Include/Exclude Option 2 is Include
IF CTL.Include_Exclude_Option_2 = 'INC';

//?SEL:  Unit of Measure
CASE;

// IF CTL.USR Unit of Measure EQ RCD.USR Unit of Measure
IF CTL.USR_Unit_of_Measure = RCD.USR_Unit_of_Measure;

// OR CTL.USR Unit of Measure is *Blank
OR CTL.USR_Unit_of_Measure = *BLANK;

//?SEL:  Unit of Measure
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Unit of Measure
// IF CTL.Include/Exclude Option 2 is Exclude
IF CTL.Include_Exclude_Option_2 = 'EXC';

//?EXC:  Unit of Measure
CASE;

// IF CTL.USR Unit of Measure is Entered
IF CTL.USR_Unit_of_Measure <> *BLANK;

// AND CTL.USR Unit of Measure EQ RCD.USR Unit of Measure
AND CTL.USR_Unit_of_Measure = RCD.USR_Unit_of_Measure;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Validate subfile control

// PAR.Reprocess User View = CND.no
PAR.Reprocess_User_View = 'N';

//?F5=Dsp Slot Activity
CASE;

// IF CTL.*CMD key is CF05
IF CTL.*CMD_key = '05';

// Call program Pmt Dsp Load Slot Act PV.
CALL PROGRAM(Pmt Dsp Load Slot Act PV) ('POJXPVR');
PARAMETER(CTL.LSP_Order_Company);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F7=INC/EXC Toggle (Export)
CASE;

// IF CTL.*CMD key is CF07
IF CTL.*CMD_key = '07';

CASE;

// IF CTL.Include/Exclude Option is Include
IF CTL.Include_Exclude_Option = 'INC';

// CTL.Include/Exclude Option = CND.Exclude
CTL.Include_Exclude_Option = 'EXC';

// IF CTL.Include/Exclude Option is Exclude
IF CTL.Include_Exclude_Option = 'EXC';

// CTL.Include/Exclude Option = CND.Include
CTL.Include_Exclude_Option = 'INC';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F8=INC/EXC Toggle (Unit of Measure)
CASE;

// IF CTL.*CMD key is CF08
IF CTL.*CMD_key = '08';

CASE;

// IF CTL.Include/Exclude Option 2 is Include
IF CTL.Include_Exclude_Option_2 = 'INC';

// CTL.Include/Exclude Option 2 = CND.Exclude
CTL.Include_Exclude_Option_2 = 'EXC';

// IF CTL.Include/Exclude Option 2 is Exclude
IF CTL.Include_Exclude_Option_2 = 'EXC';

// CTL.Include/Exclude Option 2 = CND.Include
CTL.Include_Exclude_Option_2 = 'INC';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F9 = Inc/Exc Seq = 0 only - new 03/12/07 RMC FP1090
CASE;

// IF CTL.*CMD key is CF09
IF CTL.*CMD_key = '09';

CASE;

// IF LCL.Status Flag 1  Y/N is Yes
IF LCL.Status_Flag_1_Y_N = 'Y';

// LCL.Status Flag 1  Y/N = CND.No
LCL.Status_Flag_1_Y_N = 'N';

// IF LCL.Status Flag 1  Y/N is No
IF LCL.Status_Flag_1_Y_N = 'N';

// LCL.Status Flag 1  Y/N = CND.Yes
LCL.Status_Flag_1_Y_N = 'Y';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F10 - Refresh
CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

// PAR.Reprocess User View = CND.yes
PAR.Reprocess_User_View = 'Y';

// PGM.*Return code = WRK.BLANK
PGM.*Return_code = WRK.BLANK;

RETURN;

QUIT;

ENDIF;

//?CHG: Warehouse Code
CASE;

// IF CTL.LSP Order Warehouse NE LCL.LSP Order Warehouse
IF CTL.LSP_Order_Warehouse <> LCL.LSP_Order_Warehouse;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?OMS357
//?CHG:  Scheduled Ship Date (if not zeros)
CASE;

// IF CTL.Scheduled Ship Date NE WRK.USR Date - ATR
IF CTL.Scheduled_Ship_Date <> WRK.USR_Date_ATR;

// AND CTL.Scheduled Ship Date is entered
AND CTL.Scheduled_Ship_Date <> *ZERO;

// WRK.USR Date - ATR = CTL.Scheduled Ship Date
WRK.USR_Date_ATR = CTL.Scheduled_Ship_Date;

// CTL.Thru Scheduled Ship Date = CTL.Scheduled Ship Date
CTL.Thru_Scheduled_Ship_Date = CTL.Scheduled_Ship_Date;

EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
PARAMETER(CTL.LSP_Order_Company);
PARAMETER(CTL.Thru_Scheduled_Ship_Date);
PARAMETER(LCL.Accounting_Period_Code);
PARAMETER(LCL.Day_of_Week);
PARAMETER(LCL.Week_Number);
{
 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.Day of the Week USR = Condition name of LCL.Day of Week
CTL.Day_of_the_Week_USR = RTVCND(LCL.Day_of_Week);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?CHG:  Unit of Measure
CASE;

// IF CTL.USR Unit of Measure NE WRK.USR Unit of Measure
IF CTL.USR_Unit_of_Measure <> WRK.USR_Unit_of_Measure;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?CHG:  Export
CASE;

// IF CTL.usr txt-2             usr NE WRK.usr txt-2             usr
IF CTL.usr_txt_2_usr <> WRK.usr_txt_2_usr;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?CHG:  load grade
CASE;

// IF CTL.Load Grade NE LCL.Load Grade
IF CTL.Load_Grade <> LCL.Load_Grade;

// LCL.Load Grade = CTL.Load Grade
LCL.Load_Grade = CTL.Load_Grade;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?CHG:  Schedule Sequence Number                S16991 DN 11/03/20
CASE;

// IF CTL.Schedule Sequence Number NE LCL.Schedule Sequence Number
IF CTL.Schedule_Sequence_Number <> LCL.Schedule_Sequence_Number;

// LCL.Schedule Sequence Number = CTL.Schedule Sequence Number
LCL.Schedule_Sequence_Number = CTL.Schedule_Sequence_Number;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?VAL: Scheduled Ship Date
CASE;

// IF CTL.Scheduled Ship Date is not entered
IF CTL.Scheduled_Ship_Date = *ZERO;

// Send error message - 'Scheduled Ship Date is required when orders are assigned to load.'
ERROR(USR2230);
MSGPARM(CTL.Scheduled_Ship_Date);

ENDIF;

//?VAL: Warehouse Code
CASE;

// IF CTL.LSP Order Warehouse is Warehouse Code Blank
IF CTL.LSP_Order_Warehouse = *BLANK;

// Send error message - 'Warehouse Code is required.'
ERROR(USR2015);
MSGPARM(CTL.LSP_Order_Warehouse);

ENDIF;

//?USER: Validate subfile record fields

CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

// Call program Dsp Load Schdlng Dtl  DF.
CALL PROGRAM(Dsp Load Schdlng Dtl  DF) ('PDLVDFR');
PARAMETER(RCD.LSP_Order_Company);
PARAMETER(RCD.LSP_Order_Warehouse);
PARAMETER(RCD.Thru_Scheduled_Ship_Date);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Deadline_Departure_Date);
PARAMETER(RCD.Deadline_Departure_Time);
PARAMETER(RCD.Job_Time);
PARAMETER(RCD.Job_Date);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Load Hdr Schd Seq IF) TYPE(EXCINTFUN) FILE(PDMHCPP)        AC1514657;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.LSP_Order_Company);
PARAMETER(RCD.Schedule_Sequence_Number);
PARAMETER(RCD.LPT_Load_Plan_Start_Tm);
{
 //?Execute internal function

 //?05/19/16 RMC E4119 - dont chk live w/tpm
 EXECUTE FUNCTION(Rtv/Chg Sched Seq Nbr  RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1514658;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Schedule_Sequence_Number);
 PARAMETER(PAR.LPT_Load_Plan_Start_Tm);
 {
  //?USER: Process Data record

  // PAR.Load Status = DB1.Load Status
  PAR.Load_Status = DB1.Load_Status;

  //?Set load sts to unlock when a seq nbr is entered.
  CASE;

  // IF DB1.Load Status is Entered or Combined
  IF DB1.Load_Status = 'E'/'C';

  // AND PAR.Schedule Sequence Number NE WRK.ZERO
  AND PAR.Schedule_Sequence_Number <> WRK.ZERO;

  // PAR.Load Status = CND.Unlock
  PAR.Load_Status = 'U';

  ENDIF;

  EXECUTE FUNCTION(CHG Sched Seq Nbr      CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1514660;
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Load_Status);
  PARAMETER(PAR.Schedule_Sequence_Number);
  PARAMETER(PAR.LPT_Load_Plan_Start_Tm);
  {
   //?USER: Processing after Data read

   CASE;

   // IF DB1.MG Created Load is Yes
   IF DB1.MG_Created_Load = 'Y';

   //?S14625 03/11/19 DN-Initialize.
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Create TMS Load Trg USR = CND.No
   LCL.Create_TMS_Load_Trg_USR = 'N';

   // LCL.Load Change Type = LCL.Blank 6 USR
   LCL.Load_Change_Type = LCL.Blank_6_USR;

   // LCL.Load Change Type 2 = LCL.Blank 6 USR
   LCL.Load_Change_Type_2 = LCL.Blank_6_USR;

   ENDIF;

   //?If Sched seq changes: Write TMS Load trigger  E4119 6.30.16
   CASE;

   // IF PAR.Schedule Sequence Number NE DB1.Schedule Sequence Number
   IF PAR.Schedule_Sequence_Number <> DB1.Schedule_Sequence_Number;

   CASE;

   // IF PAR.Schedule Sequence Number NE DB1.Schedule Sequence Number
   IF PAR.Schedule_Sequence_Number <> DB1.Schedule_Sequence_Number;

   // LCL.Load Change Type = CND.Scheduled Sequence Number
   LCL.Load_Change_Type = 'SCHSEQ';

   //?S14625 03/11/19 DN-Set Flag to Create TMS Load Trigger.
   // LCL.Create TMS Load Trg USR = CND.Yes
   LCL.Create_TMS_Load_Trg_USR = 'Y';

   ENDIF;

   //?S14625 03/11/19 DN-Commented Out & Execute Below.
   ENDIF;

   //?S14625 03/11/19 DN-Crt TMS Load Trigger for Sched Seq and/or LPS Time Chg.
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.LPT Load Plan Start Tm NE DB1.LPT Load Plan Start Tm
   IF PAR.LPT_Load_Plan_Start_Tm <> DB1.LPT_Load_Plan_Start_Tm;

   // LCL.Create TMS Load Trg USR = CND.Yes
   LCL.Create_TMS_Load_Trg_USR = 'Y';

   //?Set for Both Sched Seq and/or LPS Time Change.
   CASE;

   // IF LCL.Load Change Type EQ LCL.Blank 6 USR
   IF LCL.Load_Change_Type = LCL.Blank_6_USR;

   // LCL.Load Change Type = CND.Load Plan Start Tm Change
   LCL.Load_Change_Type = 'LPTCHG';

   //?Set for Both Sched Seq and/or LPS Time Change.
   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Load Change Type 2 = CND.Load Plan Start Tm Change
   LCL.Load_Change_Type_2 = 'LPTCHG';

   ENDIF;

   ENDIF;

   //?Create TMS Load Trigger.
   CASE;

   // IF LCL.Create TMS Load Trg USR is Yes
   IF LCL.Create_TMS_Load_Trg_USR = 'Y';

   // Call program Exc Crt TMS Load Trg  XF.
   CALL PROGRAM(Exc Crt TMS Load Trg  XF) ('PBXOXFR');
   PARAMETER(JOB.*Job_date);
   PARAMETER(JOB.*Job_time);
   PARAMETER(DB1.Load_ID);
   PARAMETER(PAR.Company_Number);
   PARAMETER(LCL.TMS_LH_Field_Chg_Text);
   PARAMETER('A');
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(LCL.Load_Change_Type);
   PARAMETER(LCL.Load_Change_Type_2);
   PARAMETER(LCL.Load_Change_Type_3);
   PARAMETER(LCL.Load_Change_Type_4);
   PARAMETER(LCL.Load_Change_Type_5);

   ENDIF;

   ENDIF;

   ENDIF;

   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?E2625 RMC 10/29/13 Crt chg log for ld plan start time change
  CASE;

  // IF PAR.LPT Load Plan Start Tm NE DB1.LPT Load Plan Start Tm
  IF PAR.LPT_Load_Plan_Start_Tm <> DB1.LPT_Load_Plan_Start_Tm;

  // AND DB1.LPT Load Plan Start Tm is GT 0
  AND DB1.LPT_Load_Plan_Start_Tm > 0;

  // LCL.Time  6A             USR = CVTVAR(DB1.LPT Load Plan Start Tm)
  LCL.Time_6A_USR = CVTVAR(DB1.LPT_Load_Plan_Start_Tm);

  // LCL.Time Alpha usr 6 = CVTVAR(PAR.LPT Load Plan Start Tm)
  LCL.Time_Alpha_usr_6 = CVTVAR(PAR.LPT_Load_Plan_Start_Tm);

  // Call program CRT Load/Order Chg Log XF.
  CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
  PARAMETER(DB1.Load_ID);
  PARAMETER(*ZERO);
  PARAMETER('LPTCHG');
  PARAMETER('SLS');
  PARAMETER(LCL.Time_6A_USR);
  PARAMETER(LCL.Time_Alpha_usr_6);
  PARAMETER(JOB.*USER);
  PARAMETER(JOB.*PROGRAM);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Company_Number);
  PARAMETER(*ZERO);

  ENDIF;

 }

}


//?USER: Process command keys

//?F11 - DSP Main Ord Inq by Ld DF
CASE;

// IF CTL.*CMD key is CF11
IF CTL.*CMD_key = '11';

// Call program DSP Main Ord Inq by Ld DF.
CALL PROGRAM(DSP Main Ord Inq by Ld DF) ('PDMCDFR');
PARAMETER(CTL.LSP_Order_Company);
PARAMETER(WRK.Order_Number);
PARAMETER(WRK.Order_Type_Sales);
PARAMETER(WRK.Ship_To_Customer);
PARAMETER(WRK.Ship_To_Name);
PARAMETER(WRK.Customer_Purchase_Order_#);
PARAMETER(WRK.Order_Date);
PARAMETER(WRK.Header_Status);
PARAMETER(CTL.Load_ID);
PARAMETER(WRK.Sales_Route_Code);
PARAMETER(WRK.Event_Code);
PARAMETER(WRK.USR_Program_name);

ENDIF;

//?F13= DspSeq  - new 03/12/07 RMC FP1090
CASE;

// IF CTL.*CMD key is CF13
IF CTL.*CMD_key = '13';

// Call program Dsp Load Seq Zones    XF.
CALL PROGRAM(Dsp Load Seq Zones    XF) ('PMEVXFR');
PARAMETER(CTL.LSP_Order_Company);
PARAMETER(CTL.Scheduled_Ship_Date);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Exit program processing

//?Box Load Info Message
CASE;

// IF CTL.Box Load Limit        USR GT CTL.Calc 3
IF CTL.Box_Load_Limit_USR > CTL.Calc_3;

// WRK.Error Flag            USR = CND.Yes
WRK.Error_Flag_USR = 'Y';

// Send information message - 'The Number of Box Loads sequenced is greater than the number allowed.
MESSAGE(USR2802 *INFO);
MSGPARM(CTL.Box_Load_Limit_USR);
MSGPARM(CTL.Calc_3);

ENDIF;

//?Combo Load Info Message
CASE;

// IF CTL.Combo Load Limit GT CTL.USR 3 Numeric         USR
IF CTL.Combo_Load_Limit > CTL.USR_3_Numeric_USR;

// Send information message - 'The Number of Combo Loads sequenced is greater than the number allowe
MESSAGE(USR2803 *INFO);
MSGPARM(CTL.Combo_Load_Limit);
MSGPARM(CTL.USR_3_Numeric_USR);

ENDIF;

