// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPJKD3R
// ?Date: 14.08.2025 Time: 03:40:49
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('C/S');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(Rtv Auto Item Number?  RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1192164;
PARAMETER('AUTITM');
PARAMETER(PAR.Auto_Item_Numbering);
{
 //?USER: Process Data record

 // PAR.Auto Item Numbering? = CVTVAR(DB1.System Value Alpha)
 PAR.Auto_Item_Numbering = CVTVAR(DB1.System_Value_Alpha);

}


//?USER: Initialize key screen

// KEY.Item Code = PAR.Item Code
KEY.Item_Code = PAR.Item_Code;

//?USER: Load detail screen from DBF record

EXECUTE FUNCTION(Rtv TF Class Desc     RT) TYPE(RTVOBJ) FILE(PPAMREP)           AC1707658;
PARAMETER(DTL.Item_TF_Classification);
PARAMETER(DTL.TF_Classification_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.TF Exempt Code Desc Usr = Condition name of DTL.Item TF Exempt Code
DTL.TF_Exempt_Code_Desc_Usr = RTVCND(DTL.Item_TF_Exempt_Code);

//?Default Print on Schedule
CASE;

// IF DB1.Print On Schedule is blank
IF DB1.Print_On_Schedule = *BLANK;

// 2ND.Print On Schedule = CND.yes
2ND.Print_On_Schedule = 'Y';

ENDIF;

//?Default Piece count item
CASE;

// IF DB1.Piece Count Item is blank
IF DB1.Piece_Count_Item = *BLANK;

// 2ND.Piece Count Item = CND.no
2ND.Piece_Count_Item = 'N';

ENDIF;

//?Default Scheduling Grade Position
CASE;

// IF DB1.Scheduling Position Grade is *ALL values
IF DB1.Scheduling_Position_Grade = 'Y'/'N';

//?Default Scheduling Grade Position
// IF *OTHERWISE
IF *OTHERWISE;

// 2ND.Scheduling Position Grade = CND.No
2ND.Scheduling_Position_Grade = 'N';

ENDIF;

CASE;

// IF DB1.Item Structure Type Code is NE 900
IF DB1.Item_Structure_Type_Code <> 900;

//?Seaboard Item
//?Defaults on Fresh Inv Alloc/Fresh as Order/Frozen Order as Order
CASE;

// IF 2ND.Item Type Code is Finished Good/Raw Matrl
IF 2ND.Item_Type_Code = 'FG'/'RM';

//?Default Fresh Inv Allocation to first
CASE;

// IF DB1.Fresh Inv Allocation Seq EQ WRK.BLANK 1               USR
IF DB1.Fresh_Inv_Allocation_Seq = WRK.BLANK_1_USR;

// 2ND.Fresh Inv Allocation Seq = CND.First
2ND.Fresh_Inv_Allocation_Seq = 'F';

ENDIF;

//?Default Fresh Sched as Ordered to No
CASE;

// IF DB1.Fresh Sched As Ordered EQ WRK.BLANK 1               USR
IF DB1.Fresh_Sched_As_Ordered = WRK.BLANK_1_USR;

// 2ND.Fresh Sched As Ordered = CND.no
2ND.Fresh_Sched_As_Ordered = 'N';

ENDIF;

//?Default Frozen Sched as Ordered to No
CASE;

// IF DB1.Frozen Inv Allocation Seq EQ WRK.BLANK 1               USR
IF DB1.Frozen_Inv_Allocation_Seq = WRK.BLANK_1_USR;

// 2ND.Frozen Inv Allocation Seq = CND.First
2ND.Frozen_Inv_Allocation_Seq = 'F';

ENDIF;

ENDIF;

// IF DB1.Item Structure Type Code is EQ 900
IF DB1.Item_Structure_Type_Code = 900;

//?Co-Packer Item
//?Defaults on Fresh Inv Alloc/Fresh as Order/Frozen Order as Order
CASE;

// IF 2ND.Item Type Code is Finished Good/Raw Matrl
IF 2ND.Item_Type_Code = 'FG'/'RM';

//?Default Fresh Inv Allocation to first
CASE;

// IF DB1.Fresh Inv Allocation Seq EQ WRK.BLANK 1               USR
IF DB1.Fresh_Inv_Allocation_Seq = WRK.BLANK_1_USR;

// 2ND.Fresh Inv Allocation Seq = CND.First
2ND.Fresh_Inv_Allocation_Seq = 'F';

ENDIF;

//?Default Fresh Sched as Ordered to yes
CASE;

// IF DB1.Fresh Sched As Ordered EQ WRK.BLANK 1               USR
IF DB1.Fresh_Sched_As_Ordered = WRK.BLANK_1_USR;

// 2ND.Fresh Sched As Ordered = CND.yes
2ND.Fresh_Sched_As_Ordered = 'Y';

ENDIF;

//?Default Frozen Sched as Ordered to yes
CASE;

// IF DB1.Frozen Sched As Ordered EQ WRK.BLANK 1               USR
IF DB1.Frozen_Inv_Allocation_Seq = WRK.BLANK_1_USR;

// 2ND.Frozen Sched As Ordered = CND.yes
2ND.Frozen_Inv_Allocation_Seq = 'Y';

ENDIF;

ENDIF;

ENDIF;

// Call program Rtv Item Sls Prod Typ XF.
CALL PROGRAM(Rtv Item Sls Prod Typ XF) ('PMC8XFR');
PARAMETER(DB1.Item_Code);
PARAMETER(DTL.Product_Type_Code);
PARAMETER(3RD.Item_Report_Group_Code_1);

// LCL.Catch Weight Status = DB1.Catch Weight Status
LCL.Catch_Weight_Status = DB1.Catch_Weight_Status;

EXECUTE FUNCTION(SAV Item Default Flds  IF) TYPE(EXCINTFUN)                     AC1702064;
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Description_Line_One);
PARAMETER(DTL.Description_Line_Two);
PARAMETER(DTL.Item_Label_Line_1);
PARAMETER(DTL.Item_Label_Line_2);
PARAMETER(DTL.Item_Label_Line_3);
PARAMETER(DTL.Item_Label_Line_4);
PARAMETER(DTL.UOM_Primary_Dft);
PARAMETER(DTL.Conversion_Factor_1);
PARAMETER(DTL.Operation_Factor_1);
PARAMETER(DTL.UOM_Second_Dft);
PARAMETER(DTL.Conversion_Factor_2);
PARAMETER(DTL.Operation_Factor_2);
PARAMETER(DTL.UOM_Third_Dft);
PARAMETER(DTL.UOM_Pricing_Dft);
PARAMETER(DTL.Unit_Weight);
PARAMETER(DTL.Quality_Level);
PARAMETER(DTL.Item_Level);
PARAMETER(DTL.Production_Date_Control);
PARAMETER(DTL.Catch_Weight_Status);
PARAMETER(2ND.Minimum_Weight_Per_Case);
PARAMETER(2ND.Maximum_Weight_Per_Case);
PARAMETER(2ND.Number_Cases_On_A_Pallet);
PARAMETER(DTL.Vendor_item_Default_Dft);
PARAMETER(DTL.Item_Structure_Class_Code);
PARAMETER(DTL.Item_Structure_Group_Code);
PARAMETER(DTL.Item_Structure_Type_Code);
PARAMETER(DTL.Default_Commod_Mark_basis);
PARAMETER(DTL.Transportation_Temp);
PARAMETER(DTL.Item_Type_Code);
PARAMETER(2ND.Package_Type_Code);
PARAMETER(2ND.Fresh_Chilling_Time);
PARAMETER(DTL.Base_Conv_Loss_Item);
PARAMETER(2ND.Variety_Rendered_Cut);
PARAMETER(DTL.Frozen_Make_to_Order_Sts);
PARAMETER(DTL.Credit_Item_Status);
PARAMETER(2ND.Std_Weight_Head_Var_Ren);
PARAMETER(2ND.Pieces_Per_Head);
PARAMETER(DTL.Commodity_Price_Group);
PARAMETER(2ND.Pallet_Tare_Weight);
PARAMETER(2ND.Misc_Tare_Weight);
PARAMETER(DTL.Production_Lead_Days);
PARAMETER(DTL.Packaging_Code);
PARAMETER(DTL.Item_Market_Code);
PARAMETER(DTL.Partial_Item_Code);
PARAMETER(DTL.WIP_Item_Code);
PARAMETER(DTL.WIP_Reject_Code);
PARAMETER(DTL.Seconds_Item);
PARAMETER(DTL.Print_on_Realization_Rpt);
PARAMETER(DTL.Unit_Weight_Change_Sts);
PARAMETER(DTL.Maximum_Audit_Value);
PARAMETER(DTL.Minimum_Audit_Value);
PARAMETER(DTL.Market_Overage);
PARAMETER(DTL.Standard_Overage_Underage);
PARAMETER(DTL.Item_Pricing_Operation);
PARAMETER(DTL.Item_Pricing_Constant);
PARAMETER(DTL.Default_Warehouse);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Price_Method_Default);
PARAMETER(2ND.Department_Code);
PARAMETER(DTL.Group_for_Packaging);
PARAMETER(DTL.Item_Category_Number_1);
PARAMETER(DTL.Made_to_Order_Code);
PARAMETER(DTL.Item_Category_Number_2);
PARAMETER(DTL.Transportation_Equip_Type);
PARAMETER(DTL.Item_Category_Number_3);
PARAMETER(DTL.Item_Category_Code_3);
PARAMETER(DTL.Item_Category_Number_4);
PARAMETER(DTL.GL_Sub_Code);
PARAMETER(DTL.Item_Category_Number_6);
PARAMETER(DTL.Item_Primal_Sched_Report);
PARAMETER(DTL.PM_Line_Number);
PARAMETER(DTL.Primal_Group_Code);
PARAMETER(2ND.Piece_Count_Item);
PARAMETER(2ND.Pieces_Per_Bag);
PARAMETER(2ND.Bags_Per_Unit);
PARAMETER(DTL.Export_Domestic);
PARAMETER(2ND.Print_On_Schedule);
PARAMETER(2ND.Fresh_Inv_Allocation_Seq);
PARAMETER(2ND.Fresh_Sched_As_Ordered);
PARAMETER(2ND.Frozen_Inv_Allocation_Seq);
PARAMETER(DTL.Item_Meat_Cost_Group_Code);
PARAMETER(DTL.UPC_Code_2);
PARAMETER(DTL.Item_Target_Price);
PARAMETER(DTL.Minimum_Piece_Weight);
PARAMETER(DTL.Maximum_Piece_Weight);
PARAMETER(DTL.Seaboard_Equivalent_Item);
PARAMETER(DTL.Production_Qty_Per_Shift);
PARAMETER(2ND.Scheduling_Position_Grade);
PARAMETER(DTL.Sold_100_Percent_Frozen);
PARAMETER(DTL.Maximum_Shifts);
PARAMETER(DTL.Value_Added_Sts);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Condition_Desc_1_USR);
PARAMETER(DTL.Item_Category_Type_Desc);
PARAMETER(DTL.USR_Description_New);
PARAMETER(DTL.Item_Structure_Type_Desc);
PARAMETER(DTL.Item_Structure_Group_Desc);
PARAMETER(DTL.Item_Structure_Class_Desc);
PARAMETER(DTL.UOM_Description_1_USR);
PARAMETER(DTL.UOM_Description_2_USR);
PARAMETER(DTL.UOM_Description_3_USR);
PARAMETER(DTL.UOM_Description_4_USR);
PARAMETER(DTL.Commodity_Market_Desc);
PARAMETER(DTL.Commodity_Price_Desc);
PARAMETER(DTL.Condition_Desc_10_USR);
PARAMETER(DTL.Status_Description);
PARAMETER(DTL.Export_Domestic_Desc_USR);
PARAMETER(2ND.Condition_Desc_2_USR);
PARAMETER(2ND.Condition_Desc_3_USR);
PARAMETER(2ND.Condition_Desc_4_USR);
PARAMETER(2ND.Fresh_Inv_Alloc_Desc_USR);
PARAMETER(2ND.USR_Description);
PARAMETER(2ND.Warehouse_Description);
PARAMETER(2ND.Primal_Group_Desc);
PARAMETER(DTL.Price_Method_Description);
PARAMETER(2ND.Department_Description);
PARAMETER(2ND.Text_USR_7);
{
 //?Execute internal function

 //?Move of various fields to screens and get descriptions.
 DO;

 //?Populate descriptions and conditions
 // PAR.Condition Desc. 1  USR = Condition name of PAR.Item Type Code
 PAR.Condition_Desc_1_USR = RTVCND(PAR.Item_Type_Code);

 EXECUTE FUNCTION(RTV Item Category /Itm RT) TYPE(RTVOBJ) FILE(PDJIREP)          AC1701444;
 PARAMETER(4);
 PARAMETER(PAR.GL_Sub_Code);
 PARAMETER(PAR.Item_Category_Type_Desc);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

  // PAR.Description = DB1.Description
  PAR.Description = DB1.Description;

  QUIT;

 }

 EXECUTE FUNCTION(RTV Item Level Descr   RT) TYPE(RTVOBJ) FILE(PDILREP)          AC1287285;
 PARAMETER(PAR.Item_Level);
 PARAMETER(PAR.USR_Description_New);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Type Description   RT) TYPE(RTVOBJ) FILE(OME8REP)          AC1229616;
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Structure_Type_Desc);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Group Desc) TYPE(RTVOBJ) FILE(OME9REP)                     AC1663396;
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Group_Desc);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Item Class Desc    RT) TYPE(RTVOBJ) FILE(OMFAREP)          AC1205440;
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Class_Desc);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Call program Rtv UOM Description   XF.
 CALL PROGRAM(Rtv UOM Description   XF) ('PBJGXFR');
 PARAMETER(PAR.UOM_Pricing_Dft);
 PARAMETER(PAR.UOM_Description_4_USR);

 // Call program Rtv UOM Description   XF.
 CALL PROGRAM(Rtv UOM Description   XF) ('PBJGXFR');
 PARAMETER(PAR.UOM_Primary_Dft);
 PARAMETER(PAR.UOM_Description_1_USR);

 // Call program Rtv UOM Description   XF.
 CALL PROGRAM(Rtv UOM Description   XF) ('PBJGXFR');
 PARAMETER(PAR.UOM_Second_Dft);
 PARAMETER(PAR.UOM_Description_2_USR);

 // Call program Rtv UOM Description   XF.
 CALL PROGRAM(Rtv UOM Description   XF) ('PBJGXFR');
 PARAMETER(PAR.UOM_Third_Dft);
 PARAMETER(PAR.UOM_Description_3_USR);

 EXECUTE FUNCTION(RTV Commod. Mkts Desc  RT) TYPE(RTVOBJ) FILE(OMFYREP)          AC1277934;
 PARAMETER(PAR.Default_Commod_Mark_basis);
 PARAMETER(PAR.Commodity_Market_Desc);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Commod Group Desc  RT) TYPE(RTVOBJ) FILE(OMFZREP)          AC1277945;
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(PAR.Commodity_Price_Desc);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.Condition Desc. 10 USR = Condition name of PAR.Item Pricing Operation
 PAR.Condition_Desc_10_USR = RTVCND(PAR.Item_Pricing_Operation);

 // PAR.Status Description = Condition name of PAR.Record Status
 PAR.Status_Description = RTVCND(PAR.Record_Status);

 // PAR.Export/Domestic Desc  USR = Condition name of PAR.Export/Domestic
 PAR.Export_Domestic_Desc_USR = RTVCND(PAR.Export_Domestic);

 //?2nd -- Screen 2
 // PAR.Condition Desc. 2  USR = Condition name of PAR.Package Type Code
 PAR.Condition_Desc_2_USR = RTVCND(PAR.Package_Type_Code);

 // PAR.Condition Desc. 3  USR = Condition name of PAR.Base/Conv/Loss Item
 PAR.Condition_Desc_3_USR = RTVCND(PAR.Base_Conv_Loss_Item);

 // PAR.Condition Desc. 4  USR = Condition name of PAR.Variety/Rendered/Cut
 PAR.Condition_Desc_4_USR = RTVCND(PAR.Variety_Rendered_Cut);

 // PAR.Fresh Inv Alloc Desc  USR = Condition name of PAR.Fresh Inv Allocation Seq
 PAR.Fresh_Inv_Alloc_Desc_USR = RTVCND(PAR.Fresh_Inv_Allocation_Seq);

 // PAR.Text USR 7 = Condition name of PAR.Frozen Inv Allocation Seq
 PAR.Text_USR_7 = RTVCND(PAR.Frozen_Inv_Allocation_Seq);

 EXECUTE FUNCTION(Rtv Quality Level Desc RT) TYPE(RTVOBJ) FILE(CAAIREP)          AC1124632;
 PARAMETER(PAR.Quality_Level);
 PARAMETER(PAR.USR_Description);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(PAR.Default_Warehouse);
 PARAMETER(PAR.Warehouse_Description);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

 EXECUTE FUNCTION(Rtv Primal Grp Desc   RT) TYPE(RTVOBJ) FILE(PDLLREP)           AC1476186;
 PARAMETER(PAR.Primal_Group_Code);
 PARAMETER(PAR.Primal_Group_Desc);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?Item Default does not have the company, so files that are normally
 //?accessed by Company will be accessed using a new access path/rtvobj
 //?that reads the first record and quits.
 EXECUTE FUNCTION(Rtv Price Mth Dsc Dflt RT) TYPE(RTVOBJ) FILE(PDIHREP)          AC1701083;
 PARAMETER(PAR.Price_Method_Default);
 PARAMETER(PAR.Price_Method_Description);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 EXECUTE FUNCTION(Rtv Prod Dept Nme DfltRT) TYPE(RTVOBJ) FILE(PDI5REP)           AC1701086;
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Department_Description);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?3rd -- Screen 3
 ENDDO;

}


// 2ND.Condition Desc. 1  USR = DTL.Condition Desc. 1  USR
2ND.Condition_Desc_1_USR = DTL.Condition_Desc_1_USR;

// 2ND.Label Type Descr Usr = Condition name of 2ND.Label Type
2ND.Label_Type_Descr_Usr = RTVCND(2ND.Label_Type);

// 3RD.Condition Desc. 1  USR = DTL.Condition Desc. 1  USR
3RD.Condition_Desc_1_USR = DTL.Condition_Desc_1_USR;

// DTL.Condition Name USR = Condition name of DTL.Item Co-Ownership Sts
DTL.Condition_Name_USR = RTVCND(DTL.TF_Co_Ownership_Sts);

//?Unit Weight Rules with Update on Item Default
DO;

//?Set Allow Weight to Yes,
// DTL.Allow Weight Input = CND.yes
DTL.Allow_Weight_Input = 'Y';

//?Test if there are currently any company items.
EXECUTE FUNCTION(RTV Assign Co Flag     RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1701172;
PARAMETER(DTL.Item_Code);
PARAMETER(WRK.Company_Assigned_Usr);
{
 //?USER: Initialize routine

 // LCL.Count Records        USR = CON.*ZERO
 LCL.Count_Records_USR = *ZERO;

 //?USER: Process Data record

 //?01/27/06 PKD Remove hard coding of Guymon & St. Joseph
 // LCL.Count Records        USR = LCL.Count Records        USR + CON.1
 LCL.Count_Records_USR = LCL.Count_Records_USR + 1;

 // PAR.Company Assigned Usr = CVTVAR(DB1.Company Number)
 PAR.Company_Assigned_Usr = CVTVAR(DB1.Company_Number);

 CASE;

 // IF LCL.Count Records        USR is GT 1
 IF LCL.Count_Records_USR > 1;

 // PAR.Company Assigned Usr = CON.All
 PAR.Company_Assigned_Usr = 'All';

 QUIT;

 ENDIF;

}


CASE;

// IF WRK.Company Assigned Usr NE WRK.BLANK
IF WRK.Company_Assigned_Usr <> WRK.BLANK;

CASE;

// IF DTL.Item Type Code is FG/WP
IF DTL.Item_Type_Code = 'FG'/'WP';

//?If Catch Weight Sts = N (Std Weight every time)
//?                        (Unit weight will be maintained at itemlvl
//?If Catch Weight Sts = Y (Unit weight will be maintained at complvl
CASE;

// IF DTL.Catch Weight Status is no
IF DTL.Catch_Weight_Status = 'N';

//?Allow the user to change the Unit Wgt, and on update then
//?also update all the Company Item records for this item with
//?the unit weight from the Item default
// DTL.Allow Weight Input = CND.yes
DTL.Allow_Weight_Input = 'Y';

// IF DTL.Catch Weight Status is yes
IF DTL.Catch_Weight_Status = 'Y';

//?Once a company item has been created then the unit weight will
//?be maintained at the CoItem.  Item default unit's weight
//?will be displayed only.
// DTL.Allow Weight Input = CND.no
DTL.Allow_Weight_Input = 'N';

ENDIF;

// IF DTL.Item Type Code is Packaging and Supplies
IF DTL.Item_Type_Code = 'PS';

//?Once a company item has been created then the unit weight will
//?be maintained at the CoItem.  Item default unit's weight
//?will be displayed only.
// DTL.Allow Weight Input = CND.no
DTL.Allow_Weight_Input = 'N';

// IF DTL.Item Type Code is Raw Material
IF DTL.Item_Type_Code = 'RM';

//?Allow the user to change the Unit Wgt, and on update then
//?also update all the Company Item records for this item with
//?the unit weight from the Item default
// DTL.Allow Weight Input = CND.yes
DTL.Allow_Weight_Input = 'Y';

ENDIF;

ENDIF;

ENDDO;

//?10/25/18 DN R13981-Get Spanish Desc.
//?02/23/21 DN R17040-Get IDE Pallet Tiers & Blocks.
//?06/01/22 DN DO2642-Get Spanish Desc 2.
// Call program Rtv Item Dflt Ext Fld XF.
CALL PROGRAM(Rtv Item Dflt Ext Fld XF) ('PBPAXFR');
PARAMETER(DB1.Item_Code);
PARAMETER(2ND.IDE_Forecast_in_DP);
PARAMETER(LCL.IDE_Pallet_Tiers);
PARAMETER(LCL.IDE_Pallet_Blocks);
PARAMETER(DTL.Spanish_Description);
PARAMETER(DTL.Spanish_Desc_Line_2_USR);

//?02/23/21 DN R17040-Convert IDE Pallet Tiers & Blocks.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// 2ND.IDE Pallet Tiers USR = CVTVAR(LCL.IDE Pallet Tiers)
2ND.IDE_Pallet_Tiers_USR = CVTVAR(LCL.IDE_Pallet_Tiers);

// 2ND.IDE Pallet Blocks USR = CVTVAR(LCL.IDE Pallet Blocks)
2ND.IDE_Pallet_Blocks_USR = CVTVAR(LCL.IDE_Pallet_Blocks);

ENDIF;

//?02/12/18 DN T11041-Display Pallet/Spacer Type if only Packaging & Supplies
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Get Pallet/Spacer Type Desc for Item Category 9.
CASE;

// IF DB1.Item Category Code 9 is Entered
IF DB1.Item_Category_Code_9 > *BLANK;

// 3RD.Item Category Number 9 = DB1.Item Category Number 9
3RD.Item_Category_Number_9 = DB1.Item_Category_Number_9;

// 3RD.Item Category Code 9 = DB1.Item Category Code 9
3RD.Item_Category_Code_9 = DB1.Item_Category_Code_9;

EXECUTE FUNCTION(Rtv Item Ctg Desc     RT) TYPE(RTVOBJ) FILE(PDJIREP)           AC1627391;
PARAMETER(DB1.Company_Number);
PARAMETER(3RD.Item_Category_Number_9);
PARAMETER(3RD.Item_Category_Code_9);
PARAMETER(3RD.Pallet_Spacer_Typ_Dsc_USR);
PARAMETER(NLL.Item_Category_Type_Number);
PARAMETER(NLL.Item_Category_Type_Code);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Set Pallet/Spacer Type Flag to Display it on the Screen or Not.
CASE;

// IF DTL.Item Type Code is Packaging and Supplies
IF DTL.Item_Type_Code = 'PS';

// PAR.Dsp Pallet/Spacer Typ USR = CND.yes
PAR.Dsp_Pallet_Spacer_Typ_USR = 'Y';

//?Set Pallet/Spacer Type Flag to Display it on the Screen or Not.
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Dsp Pallet/Spacer Typ USR = CND.no
PAR.Dsp_Pallet_Spacer_Typ_USR = 'N';

ENDIF;

ENDIF;

//?08/11/2020 ISE 418 Display Manufacturers code from PBBTREP file
EXECUTE FUNCTION(RTV Manufacturer Code) TYPE(RTVOBJ) FILE(PBBTREP)              AC2185838;
PARAMETER(DB1.Item_Code);
PARAMETER(3RD.IDE_Manufacturer_Nbr);
{
 //?USER: Process Data record

 // PAR.IDE Manufacturer Nbr = DB1.IDE Manufacturer Nbr
 PAR.IDE_Manufacturer_Nbr = DB1.IDE_Manufacturer_Nbr;

}


//?05/10/2023 EL WI572 Adding Regulation ID
EXECUTE FUNCTION(RTV Regul Code ID RT) TYPE(RTVOBJ) FILE(PBBTREP)               AC2215136;
PARAMETER(DB1.Item_Code);
PARAMETER(3RD.IDE_Regulation_Code_ID);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Regul Desc RT) TYPE(RTVOBJ) FILE(PUC8REP)                  AC2215175;
PARAMETER(3RD.IDE_Regulation_Code_ID);
PARAMETER(3RD.Regulation_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


