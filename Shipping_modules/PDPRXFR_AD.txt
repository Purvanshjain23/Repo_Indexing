// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDPRXFR
// ?Date: 14.08.2025 Time: 03:29:18
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(CLC Price/Price Audit  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1317373;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Value_Total);
PARAMETER(PAR.Order_Weight_Total);
PARAMETER(PAR.Production_Hold);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.Pricing_Event_Called_From);
PARAMETER(PAR.USR_New_Order);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Allow Man/Qt Flag  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1352435;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(PAR.Type_Code);
 PARAMETER(PAR.Allow_Man_Qt_WO_Approval);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF DB1.Header Status is Not cancelled
 IF DB1.Header_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 //?Order is not Cancelled.
 DO;

 CASE;

 // IF DB1.Billing Activity Type is Invoice
 IF DB1.Billing_Activity_Type = '1';

 //?Invoice.
 DO;

 EXECUTE FUNCTION(Rtv All Prc Sts/Audit  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1433036;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Price_Status);
 PARAMETER(PAR.Price_Audit);
 PARAMETER(PAR.Shipping_Company);
 PARAMETER(PAR.Accounting_Company);
 {
  //?USER: Initialize routine

  //?RMC 3/30/2022 change lf from OPBGWKLJ TO OPBGWKN9 - TO INCLUDE 'R' ODs
  // PAR.Price Status = CND.Priced
  PAR.Price_Status = 'P';

  // PAR.Price Audit = CND.Manually Price Audited
  PAR.Price_Audit = 'M';

  //?USER: Process Data record

  CASE;

  // IF DB1.Price Status is Blank or Unpriced
  IF DB1.Price_Status = *BLANK/'U';

  // PAR.Price Status = DB1.Price Status
  PAR.Price_Status = DB1.Price_Status;

  ENDIF;

  CASE;

  // IF DB1.Price Audit is Not Manually Price Audit
  IF DB1.Price_Audit = 'A'/'N'/*BLANK;

  // PAR.Price Audit = DB1.Price Audit
  PAR.Price_Audit = DB1.Price_Audit;

  ENDIF;

  EXECUTE FUNCTION(RTV OD Whs/ShpCo/AccCo RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1801011;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Shipping_Company);
  PARAMETER(PAR.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

 }

 // PAR.Price Audit USR = PAR.Price Audit
 PAR.Price_Audit_USR = PAR.Price_Audit;

 //?Extend $ if call from OE and Price=P & Audit=M)
 CASE;

 // IF PAR.Pricing Event Called From is Order Entry
 IF ( PAR.Pricing_Event_Called_From = 'OE';

 // AND PAR.Price Audit is Manually Price Audited
 AND PAR.Price_Audit = 'M';

 // AND PAR.Price Status is Priced
 AND PAR.Price_Status = 'P' );

 // PAR.Price Status USR = PAR.Price Status
 PAR.Price_Status_USR = PAR.Price_Status;

 EXECUTE FUNCTION(CLC Extend Price       RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1426148;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Pricing_Event_Called_From);
 PARAMETER(PAR.Type_Code);
 {
  //?USER: Initialize routine

  // PAR.Extended Amount = CON.*ZERO
  PAR.Extended_Amount = *ZERO;

  EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
  PARAMETER(PAR.Company_Number);
  PARAMETER(NLL.Plant_Company_Sts);
  PARAMETER(PAR.Company_Organization);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  //?Load Quantity Shipped Total field.
  CASE;

  // IF DB1.Quantity Shipped Total is Equal to zero
  IF DB1.Quantity_Shipped_Total = *ZERO;

  // WRK.Quantity Shipped Total = CON.1
  WRK.Quantity_Shipped_Total = 1;

  //?Load Quantity Shipped Total field.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Quantity Shipped Total = DB1.Quantity Shipped Total
  WRK.Quantity_Shipped_Total = DB1.Quantity_Shipped_Total;

  ENDIF;

  //?Set quantity and weight according to order status
  CASE;

  // IF DB1.Detail Line Status is Avail/Alloc/Enter/Hold
  IF DB1.Detail_Line_Status = 'L'/'A'/'E'/'H';

  // AND DB1.Event Code is Entered Thru 03 Picked
  AND DB1.Event_Code >= '01';
  AND DB1.Event_Code <= '03';

  //?RMC 6/17/09 FP1054 use qty/wgt ordered instead of sched
  // PAR.USR Quantity = DB1.Quantity Ordered
  PAR.USR_Quantity = DB1.Quantity_Ordered;

  // PAR.USR Weight = DB1.Weight Ordered
  PAR.USR_Weight = DB1.Weight_Ordered;

  //?Set quantity and weight according to order status
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.USR Quantity = WRK.Quantity Shipped Total
  PAR.USR_Quantity = WRK.Quantity_Shipped_Total;

  // PAR.USR Weight = DB1.Weight Shipped Total
  PAR.USR_Weight = DB1.Weight_Shipped_Total;

  ENDIF;

  // Call program RTV For Price Extent   XF.
  CALL PROGRAM(RTV For Price Extent   XF) ('PDXRXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(NLL.UOM_Pricing);
  PARAMETER(NLL.Unit_Weight);
  PARAMETER(NLL.Catch_Weight_Status);
  PARAMETER(PAR.Primal_Group_Code);

  //?06/25/10 PKD P205 Replace to use the Price Method Type & PMP Price Type
  //?                  instead of hard coding Price Method Code
  // Call program RTV PrcMthTyp/PrcTyp  XF.
  CALL PROGRAM(RTV PrcMthTyp/PrcTyp  XF) ('PNS7XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Price_Method_Code);
  PARAMETER(LCL.Price_Method_Type);
  PARAMETER(LCL.PMH_Price_Type);

  //?Extend
  CASE;

  // IF LCL.Price Method Type is Extended Pricing
  IF LCL.Price_Method_Type = 'X';

  // PAR.Extended Amount = DB1.Price Overage Override
  PAR.Extended_Amount = DB1.Price_Overage_Override;

  //?Extend
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?06/25/10 PKD P205 Replace to use the Price Method Type & PMP Price Type
  //?                  instead of hard coding Price Method Code
  //?Extend price with unit price credit if not zeros
  CASE;

  // IF DB1.Detail Line Status is Avail/Alloc/Enter/Hold
  IF ( DB1.Detail_Line_Status = 'L'/'A'/'E'/'H';

  // AND DB1.Event Code is Entered Thru 03 Picked
  AND DB1.Event_Code >= '01';
  AND DB1.Event_Code <= '03';

  // AND DB1.Unit Price - Credit is Not Zeros
  AND DB1.Unit_Price_Credit <> *ZERO;

  // AND DB1.Price Audit is Not Manually Price Audit
  AND DB1.Price_Audit = 'A'/'N'/*BLANK;

  // AND PAR.Pricing Event Called From is No Price With Credit Pric
  AND PAR.Pricing_Event_Called_From = 'OE'/'PS'/'UWC'/'UWT' );

  //?07/07/08 PKD Replaced the following
  //?06/25/10 PKD P205 Replace to use the Price Method Type & PMP Price Type
  //?                  instead of hard coding Price Method Code
  //?Extend Price using Price Overage Override or Unit Price-Credit
  CASE;

  // IF LCL.Price Method Type is Contract Pricing
  IF LCL.Price_Method_Type = 'Q';

  // AND LCL.PMH Price Type is Invoice Price
  AND LCL.PMH_Price_Type = 'I';

  //?----- USE: Price Overage Override
  // Call program Clc OrdDtl Ext Amt    XF.
  CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
  PARAMETER(PAR.Extended_Amount);
  PARAMETER(DB1.U_M_Base_Price);
  PARAMETER(PAR.USR_Quantity);
  PARAMETER(PAR.USR_Weight);
  PARAMETER(DB1.Price_Overage_Override);

  //?Extend Price using Price Overage Override or Unit Price-Credit
  // IF LCL.Price Method Type is Manual Pricing
  IF LCL.Price_Method_Type = 'M';

  // AND PAR.Company Organization is High Plains Biodiesel
  AND PAR.Company_Organization = 'H';

  //?----- USE: Price Overage Override
  // Call program Clc OrdDtl Ext Amt    XF.
  CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
  PARAMETER(PAR.Extended_Amount);
  PARAMETER(DB1.U_M_Base_Price);
  PARAMETER(PAR.USR_Quantity);
  PARAMETER(PAR.USR_Weight);
  PARAMETER(DB1.Price_Overage_Override);

  //?Extend Price using Price Overage Override or Unit Price-Credit
  // IF LCL.Price Method Type is Manual Pricing
  IF LCL.Price_Method_Type = 'M';

  // AND PAR.Company Organization is Not HPB
  AND PAR.Company_Organization = 'D'/'S';

  //?----- USE: Price Overage Override OR Unit Price-Credit
  CASE;

  // IF PAR.Type Code is Inter Company
  IF PAR.Type_Code = 'IC';

  // OR PAR.Type Code is Is Promotional/Samples
  OR PAR.Type_Code = 'PS';

  // OR PAR.Primal Group Code is Samples or Cut Loss
  OR PAR.Primal_Group_Code = 'UNID';

  // OR PAR.Primal Group Code is Other
  OR PAR.Primal_Group_Code = 'OTHER';

  // OR DB1.Price Overage Override is GT .01
  OR DB1.Price_Overage_Override > .01;

  //?----- USE: Price Overage Override
  // Call program Clc OrdDtl Ext Amt    XF.
  CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
  PARAMETER(PAR.Extended_Amount);
  PARAMETER(DB1.U_M_Base_Price);
  PARAMETER(PAR.USR_Quantity);
  PARAMETER(PAR.USR_Weight);
  PARAMETER(DB1.Price_Overage_Override);

  //?----- USE: Price Overage Override OR Unit Price-Credit
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?----- USE: Unit Price-Credit
  // Call program Clc OrdDtl Ext Amt    XF.
  CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
  PARAMETER(PAR.Extended_Amount);
  PARAMETER(DB1.U_M_Base_Price);
  PARAMETER(PAR.USR_Quantity);
  PARAMETER(PAR.USR_Weight);
  PARAMETER(DB1.Unit_Price_Credit);

  ENDIF;

  //?Extend Price using Price Overage Override or Unit Price-Credit
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?---- USE: Unit Price-Credit
  // Call program Clc OrdDtl Ext Amt    XF.
  CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
  PARAMETER(PAR.Extended_Amount);
  PARAMETER(DB1.U_M_Base_Price);
  PARAMETER(PAR.USR_Quantity);
  PARAMETER(PAR.USR_Weight);
  PARAMETER(DB1.Price_Overage_Override);

  ENDIF;

  //?Extend price with unit price credit if not zeros
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?*** Determine Extended Amount
  //?08/28/07 PKD Replaced with Clc OrdDtl Ext Amt    XF
  //?04/28/10 PKD If Unit Price is zero, then use Unit Price-Credit.
  CASE;

  // IF DB1.Unit Price is Not Zeros
  IF DB1.Unit_Price <> *ZERO;

  // Call program Clc OrdDtl Ext Amt    XF.
  CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
  PARAMETER(PAR.Extended_Amount);
  PARAMETER(DB1.U_M_Base_Price);
  PARAMETER(PAR.USR_Quantity);
  PARAMETER(PAR.USR_Weight);
  PARAMETER(DB1.Unit_Price);

  CASE;

  // IF PAR.USR Quantity is not equal zero
  IF PAR.USR_Quantity <> *ZERO;

  // PAR.Unit Price Ordered U/M = PAR.Extended Amount / PAR.USR Quantity *Rounded
  PAR.Unit_Price_Ordered_U_M = PAR.Extended_Amount / PAR.USR_Quantity 'H';

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Call program Clc OrdDtl Ext Amt    XF.
  CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
  PARAMETER(PAR.Extended_Amount);
  PARAMETER(DB1.U_M_Base_Price);
  PARAMETER(PAR.USR_Quantity);
  PARAMETER(PAR.USR_Weight);
  PARAMETER(DB1.Unit_Price_Credit);

  ENDIF;

  ENDIF;

  ENDIF;

  EXECUTE FUNCTION(CHG Dtl Price/Audit    CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1319758;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Extended_Amount);
  PARAMETER(PAR.Extended_Amount);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Pricing_Date_Used);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Audit_Reason_Code);
  PARAMETER(DB1.Unit_Price);
  PARAMETER(DB1.Unit_Price_Credit);
  PARAMETER(PAR.Unit_Price_Ordered_U_M);
  PARAMETER(DB1.Unit_Weight_Ordered_U_M);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.Substituted_Flag);
  PARAMETER(DB1.OD_Schedule_Override_Sts);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 //?Extend $ if call from OE and Price=P & Audit=M)
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Price OR Reprice
 //?C4029:  We won't be using PAR.Price Status USR or PAR.Price Audit USR
 //?        to update order header; re-retrieving it.
 //?R12926 DN 04/23/18-Pass in Absorbed Freight Rate. Use AFR at Order level.
 EXECUTE FUNCTION(CLC Price/Price Audit  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1425830;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(PAR.Price_Status_USR);
 PARAMETER(PAR.Price_Audit_USR);
 PARAMETER(PAR.Type_Code);
 PARAMETER(PAR.Allow_Man_Qt_WO_Approval);
 PARAMETER(PAR.Pricing_Event_Called_From);
 {
  //?USER: Initialize routine

  // PAR.Price Status USR = CND.Priced
  PAR.Price_Status_USR = 'P';

  // PAR.Price Audit = CND.No Audit
  PAR.Price_Audit = *BLANK;

  EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
  PARAMETER(PAR.Company_Number);
  PARAMETER(NLL.Plant_Company_Sts);
  PARAMETER(LCL.Company_Organization);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?USER: Process Data record

  //?If only one line item suposed to be repriced
  CASE;

  // IF PAR.Order Sequence Number is not equal to zero
  IF PAR.Order_Sequence_Number <> *ZERO;

  // AND PAR.Order Sequence Number NE DB1.Order Sequence Number
  AND PAR.Order_Sequence_Number <> DB1.Order_Sequence_Number;

  // AND PAR.Order Secondary Line Seq NE DB1.Order Secondary Line Seq
  AND PAR.Order_Secondary_Line_Seq <> DB1.Order_Secondary_Line_Seq;

  QUIT;

  ENDIF;

  //?Process Shipping Detail record if not cancelled
  CASE;

  // IF DB1.Detail Line Status is Not cancelled
  IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

  //?Set hold fields and call pricing routine
  DO;

  // PAR.Unit Price = DB1.Unit Price
  PAR.Unit_Price = DB1.Unit_Price;

  // PAR.Unit Price - Credit = DB1.Unit Price - Credit
  PAR.Unit_Price_Credit = DB1.Unit_Price_Credit;

  // PAR.Unit Price Ordered U/M = DB1.Unit Price Ordered U/M
  PAR.Unit_Price_Ordered_U_M = DB1.Unit_Price_Ordered_U_M;

  // PAR.Price Status = DB1.Price Status
  PAR.Price_Status = DB1.Price_Status;

  // PAR.Price Audit Reason Code = DB1.Price Audit Reason Code
  PAR.Price_Audit_Reason_Code = DB1.Price_Audit_Reason_Code;

  //?If order is priced and manually price audited then price only
  CASE;

  // IF DB1.Price Status is Priced
  IF ( DB1.Price_Status = 'P';

  // AND DB1.Price Audit is Manually Price Audited
  AND DB1.Price_Audit = 'M' );

  // OR PAR.Pricing Event Called From is Market Group Change
  OR PAR.Pricing_Event_Called_From = 'MGC';

  // OR PAR.Pricing Event Called From is Customer/Item Change
  OR PAR.Pricing_Event_Called_From = 'CIC';

  // OR PAR.Pricing Event Called From is Item Change
  OR PAR.Pricing_Event_Called_From = 'IC';

  // PAR.Event Called From = CND.Price Only
  PAR.Event_Called_From = 99;

  //?If order is priced and manually price audited then price only
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Event Called From = CND.AutoCalc O/E
  PAR.Event_Called_From = 'AO';

  ENDIF;

  // Call program CLC Price Item         XF.
  CALL PROGRAM(CLC Price Item         XF) ('PDG9XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Price_Method_Code);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(PAR.Event_Called_From);
  PARAMETER(DB1.OD_Ceiling_Price);
  PARAMETER(DB1.OD_Market_Begin_Date);
  PARAMETER(DB1.OD_Market_Ending_Date);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Requested_Delivery_Date);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(WRK.Error_Return);
  PARAMETER('S');

  //?RMC 6/17/09 FP1054 pass qty/wgt ordered
  EXECUTE FUNCTION(CLC Price,Ext,U/M1Prc  IF) TYPE(EXCINTFUN)                     AC1356112;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Detail_Line_Status);
  PARAMETER(PAR.Extended_Amount);
  PARAMETER(DB1.Price_Method_Code);
  PARAMETER(DB1.Price_Overage_Override);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Quantity_Ordered);
  PARAMETER(DB1.Weight_Ordered);
  PARAMETER(DB1.Quantity_Scheduled);
  PARAMETER(DB1.Weight_Scheduled);
  PARAMETER(DB1.Quantity_Shipped_Total);
  PARAMETER(DB1.Weight_Shipped_Total);
  PARAMETER(PAR.Unit_Price);
  PARAMETER(DB1.Unit_Price_Credit);
  PARAMETER(PAR.Unit_Price_Ordered_U_M);
  PARAMETER(DB1.Event_Code);
  PARAMETER(PAR.Pricing_Event_Called_From);
  PARAMETER(PAR.Type_Code);
  PARAMETER(LCL.Company_Organization);
  {
   //?Execute internal function

   //?*********************************************************************
   //?Calculate "Price Per Pound", "Extended Amount", "Primary U/M Price"
   //?*********************************************************************
   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   // PAR.U/M - Pricing = CND.Not Entered
   PAR.UOM_Pricing = *BLANK;

   // PAR.Catch Weight Status = CND.blank
   PAR.Catch_Weight_Status = *BLANK;

   //?Load Quantity Shipped Total field. c2742- do -0- shipped from ord
   CASE;

   // IF PAR.Quantity Shipped Total is Equal to zero
   IF PAR.Quantity_Shipped_Total = *ZERO;

   // WRK.Quantity Shipped Total = CON.1
   WRK.Quantity_Shipped_Total = 1;

   //?Load Quantity Shipped Total field. c2742- do -0- shipped from ord
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Quantity Shipped Total = PAR.Quantity Shipped Total
   WRK.Quantity_Shipped_Total = PAR.Quantity_Shipped_Total;

   ENDIF;

   //?Set quantity and weight according to order status  c2742 -0- shped
   CASE;

   // IF PAR.Detail Line Status is Avail/Alloc/Enter/Hold
   IF PAR.Detail_Line_Status = 'L'/'A'/'E'/'H';

   // AND PAR.Event Code is Entered Thru 03 Picked
   AND PAR.Event_Code >= '01';
   AND PAR.Event_Code <= '03';

   //?RMC 6/17/09 FP1054 use qty/wgt ordered instead of sched
   // PAR.USR Quantity = PAR.Quantity Ordered
   PAR.USR_Quantity = PAR.Quantity_Ordered;

   // PAR.USR Weight = PAR.Weight Ordered
   PAR.USR_Weight = PAR.Weight_Ordered;

   //?Set quantity and weight according to order status  c2742 -0- shped
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.USR Quantity = WRK.Quantity Shipped Total
   PAR.USR_Quantity = WRK.Quantity_Shipped_Total;

   // PAR.USR Weight = PAR.Weight Shipped Total
   PAR.USR_Weight = PAR.Weight_Shipped_Total;

   ENDIF;

   // Call program RTV For Price Extent   XF.
   CALL PROGRAM(RTV For Price Extent   XF) ('PDXRXFR');
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.UOM_Pricing);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Catch_Weight_Status);
   PARAMETER(PAR.Primal_Group_Code);

   //?Check retrieve Unit Weight & C/W error
   CASE;

   // IF PGM.*Return code is *Normal
   IF PGM.*Return_code = *BLANK;

   // AND PAR.Catch Weight Status is Y/N Values
   AND PAR.Catch_Weight_Status = 'N'/'Y';

   // AND PAR.Unit Weight is Not equal zero
   AND PAR.Unit_Weight <> *ZERO;

   //?Check retrieve Unit Weight & C/W error
   // IF *OTHERWISE
   IF *OTHERWISE;

   // Execute command - 'Send Price MSG to SEABOARD'
   EXECUTE COMMAND(USR2306);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Catch_Weight_Status);
   PARAMETER(*ZERO);

   ENDIF;

   CASE;

   // IF PAR.Price Method Code is Extended
   IF PAR.Price_Method_Code = 'EXT';

   // PAR.Extended Amount = PAR.Price Overage Override
   PAR.Extended_Amount = PAR.Price_Overage_Override;

   //?Calculate Unit Price for Extended
   CASE;

   // IF PAR.USR Weight is Not equal zero
   IF PAR.USR_Weight <> *ZERO;

   // PAR.Unit Price = PAR.Extended Amount / PAR.USR Weight *Rounded
   PAR.Unit_Price = PAR.Extended_Amount / PAR.USR_Weight 'H';

   ENDIF;

   //?Calculate Pricing U/M Price for Extended
   CASE;

   // IF PAR.USR Quantity is not equal zero
   IF PAR.USR_Quantity <> *ZERO;

   // PAR.Unit Price Ordered U/M = PAR.Extended Amount / PAR.USR Quantity *Rounded
   PAR.Unit_Price_Ordered_U_M = PAR.Extended_Amount / PAR.USR_Quantity 'H';

   ENDIF;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Extend price with unit price credit if not zeros
   CASE;

   // IF PAR.Detail Line Status is Avail/Alloc/Enter/Hold
   IF ( PAR.Detail_Line_Status = 'L'/'A'/'E'/'H';

   // AND PAR.Event Code is Entered Thru 03 Picked
   AND PAR.Event_Code >= '01';
   AND PAR.Event_Code <= '03';

   // AND PAR.Unit Price - Credit is Not Zeros
   AND PAR.Unit_Price_Credit <> *ZERO;

   // AND PAR.Price Audit is Not Manually Price Audit
   AND PAR.Price_Audit = 'A'/'N'/*BLANK;

   // AND PAR.Pricing Event Called From is No Price With Credit Pric
   AND PAR.Pricing_Event_Called_From = 'OE'/'PS'/'UWC'/'UWT' );

   //?07/07/08 PKD Replaced w/consideration for .01 manual price
   //?Extend Price using Price Overage Override or Unit Price-Credit
   CASE;

   // IF PAR.Price Method Code is Deviated
   IF PAR.Price_Method_Code = 'DEV';

   //?----- USE: Price Overage Override
   // Call program Clc OrdDtl Ext Amt    XF.
   CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
   PARAMETER(PAR.Extended_Amount);
   PARAMETER(PAR.UOM_Pricing);
   PARAMETER(PAR.USR_Quantity);
   PARAMETER(PAR.USR_Weight);
   PARAMETER(PAR.Price_Overage_Override);

   //?Extend Price using Price Overage Override or Unit Price-Credit
   // IF PAR.Price Method Code is Manual
   IF PAR.Price_Method_Code = 'MAN';

   // AND PAR.Company Organization is High Plains Biodiesel
   AND PAR.Company_Organization = 'H';

   //?----- USE: Price Overage Override
   // Call program Clc OrdDtl Ext Amt    XF.
   CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
   PARAMETER(PAR.Extended_Amount);
   PARAMETER(PAR.UOM_Pricing);
   PARAMETER(PAR.USR_Quantity);
   PARAMETER(PAR.USR_Weight);
   PARAMETER(PAR.Price_Overage_Override);

   //?Extend Price using Price Overage Override or Unit Price-Credit
   // IF PAR.Price Method Code is Manual
   IF PAR.Price_Method_Code = 'MAN';

   // AND PAR.Company Organization is Not HPB
   AND PAR.Company_Organization = 'D'/'S';

   //?----- USE: Price Overage Override OR Unit Price-Credit
   CASE;

   // IF PAR.Type Code is Inter Company
   IF PAR.Type_Code = 'IC';

   // OR PAR.Type Code is Is Promotional/Samples
   OR PAR.Type_Code = 'PS';

   // OR PAR.Primal Group Code is Samples or Cut Loss
   OR PAR.Primal_Group_Code = 'UNID';

   // OR PAR.Primal Group Code is Other
   OR PAR.Primal_Group_Code = 'OTHER';

   // OR PAR.Price Overage Override is GT .01
   OR PAR.Price_Overage_Override > .01;

   //?----- USE: Price Overage Override
   // Call program Clc OrdDtl Ext Amt    XF.
   CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
   PARAMETER(PAR.Extended_Amount);
   PARAMETER(PAR.UOM_Pricing);
   PARAMETER(PAR.USR_Quantity);
   PARAMETER(PAR.USR_Weight);
   PARAMETER(PAR.Price_Overage_Override);

   //?----- USE: Price Overage Override OR Unit Price-Credit
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?----- USE: Unit Price-Credit
   // Call program Clc OrdDtl Ext Amt    XF.
   CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
   PARAMETER(PAR.Extended_Amount);
   PARAMETER(PAR.UOM_Pricing);
   PARAMETER(PAR.USR_Quantity);
   PARAMETER(PAR.USR_Weight);
   PARAMETER(PAR.Unit_Price_Credit);

   ENDIF;

   //?Extend Price using Price Overage Override or Unit Price-Credit
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?---- USE: Unit Price-Credit
   // Call program Clc OrdDtl Ext Amt    XF.
   CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
   PARAMETER(PAR.Extended_Amount);
   PARAMETER(PAR.UOM_Pricing);
   PARAMETER(PAR.USR_Quantity);
   PARAMETER(PAR.USR_Weight);
   PARAMETER(PAR.Unit_Price_Credit);

   ENDIF;

   //?Extend price with unit price credit if not zeros
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?08/28/07 PKD Replaced with Clc OrdDtl Ext Amt    XF
   //?04/28/10 PKD If Unit Price is zero, then use Unit Price-Credit.
   //?** Added Not .01 to force these orders to use Credit Chk Price.
   CASE;

   // IF PAR.Unit Price is Not Zeros
   IF PAR.Unit_Price <> *ZERO;

   // AND PAR.Unit Price is Not .01
   AND PAR.Unit_Price <> .01;

   // Call program Clc OrdDtl Ext Amt    XF.
   CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
   PARAMETER(PAR.Extended_Amount);
   PARAMETER(PAR.UOM_Pricing);
   PARAMETER(PAR.USR_Quantity);
   PARAMETER(PAR.USR_Weight);
   PARAMETER(PAR.Unit_Price);

   //?Unit Price Ordered U/M
   CASE;

   // IF PAR.USR Quantity is not equal zero
   IF PAR.USR_Quantity <> *ZERO;

   // PAR.Unit Price Ordered U/M = PAR.Extended Amount / PAR.USR Quantity *Rounded
   PAR.Unit_Price_Ordered_U_M = PAR.Extended_Amount / PAR.USR_Quantity 'H';

   ENDIF;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // Call program Clc OrdDtl Ext Amt    XF.
   CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
   PARAMETER(PAR.Extended_Amount);
   PARAMETER(PAR.UOM_Pricing);
   PARAMETER(PAR.USR_Quantity);
   PARAMETER(PAR.USR_Weight);
   PARAMETER(PAR.Unit_Price_Credit);

   ENDIF;

   ENDIF;

   ENDIF;

   //?*********************************************************************
  }

  ENDDO;

  //?Check price audit options
  CASE;

  // IF DB1.Price Status is Priced
  IF ( DB1.Price_Status = 'P';

  // AND DB1.Price Audit is Manually Price Audited
  AND DB1.Price_Audit = 'M' );

  // OR PAR.Pricing Event Called From is Market Group Change
  OR PAR.Pricing_Event_Called_From = 'MGC';

  // OR PAR.Pricing Event Called From is Customer/Item Change
  OR PAR.Pricing_Event_Called_From = 'CIC';

  // OR PAR.Pricing Event Called From is Item Change
  OR PAR.Pricing_Event_Called_From = 'IC';

  CASE;

  // IF PAR.Unit Price NE DB1.Unit Price
  IF PAR.Unit_Price <> DB1.Unit_Price;

  // PAR.Price Audit = CND.Needs Price Audit
  PAR.Price_Audit = 'N';

  //?Set reason code for pricing event called from
  CASE;

  // IF PAR.Pricing Event Called From is Customer/Item Change
  IF PAR.Pricing_Event_Called_From = 'CIC';

  // PAR.Price Audit Reason Code = CND.Customer/Item Change
  PAR.Price_Audit_Reason_Code = 'CIT';

  //?Set reason code for pricing event called from
  // IF PAR.Pricing Event Called From is Market Group Change
  IF PAR.Pricing_Event_Called_From = 'MGC';

  // PAR.Price Audit Reason Code = CND.Commod Price Group Change
  PAR.Price_Audit_Reason_Code = 'CGP';

  //?Set reason code for pricing event called from
  // IF PAR.Pricing Event Called From is Market Price Change
  IF PAR.Pricing_Event_Called_From = 'MPC';

  // PAR.Price Audit Reason Code = CND.Commod. Mkt Price Change
  PAR.Price_Audit_Reason_Code = 'CMP';

  //?Set reason code for pricing event called from
  // IF PAR.Pricing Event Called From is Item Change
  IF PAR.Pricing_Event_Called_From = 'IC';

  // PAR.Price Audit Reason Code = CND.Item Change
  PAR.Price_Audit_Reason_Code = 'ITM';

  //?Set reason code for pricing event called from
  // IF PAR.Pricing Event Called From is Shipping
  IF PAR.Pricing_Event_Called_From = 'SHP';

  //?If ship date change use SDC else use price change PC
  CASE;

  // IF DB1.Scheduled Ship Date NE DB1.Actual Shipped Date
  IF DB1.Scheduled_Ship_Date <> DB1.Actual_Shipped_Date;

  // PAR.Price Audit Reason Code = CND.Ship Date Change
  PAR.Price_Audit_Reason_Code = 'SDC';

  //?If ship date change use SDC else use price change PC
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Price Audit Reason Code = CND.Price Change
  PAR.Price_Audit_Reason_Code = 'PC';

  ENDIF;

  //?Set reason code for pricing event called from
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Price Audit Reason Code = CND.Price Change
  PAR.Price_Audit_Reason_Code = 'PC';

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Price Audit = CND.Manually Price Audited
  PAR.Price_Audit = 'M';

  ENDIF;

  //?Check price audit options
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Retrieve Pricing Method Price Audit Flag to determine price
  //?audit
  EXECUTE FUNCTION(RTV Meth Type/Audit    RT) TYPE(RTVOBJ) FILE(PDIHREP)          AC1319765;
  PARAMETER(PAR.Company_Number);
  PARAMETER(DB1.Price_Method_Code);
  PARAMETER(WRK.Price_Audit);
  PARAMETER(WRK.Price_Method_Type);
  PARAMETER(LCL.Decimal_Places_Rounded);
  PARAMETER(LCL.PMH_Price_Type);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // Call program RTV Price Maint        XF.
  CALL PROGRAM(RTV Price Maint        XF) ('PDP6XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(WRK.Default_Commod_Mark_basis);
  PARAMETER(WRK.Maximum_Audit_Value);
  PARAMETER(WRK.Minimum_Audit_Value);
  PARAMETER(WRK.Commodity_Price_Group);

  //?If price method is audit then audit else check more conditions
  CASE;

  // IF WRK.Price Audit is Needs Price Audit
  IF WRK.Price_Audit = 'N';

  // PAR.Price Audit = WRK.Price Audit
  PAR.Price_Audit = WRK.Price_Audit;

  //?Set reason code for pricing event called from
  CASE;

  // IF PAR.Pricing Event Called From is Market Price Change
  IF PAR.Pricing_Event_Called_From = 'MPC';

  // PAR.Price Audit Reason Code = CND.Commod. Mkt Price Change
  PAR.Price_Audit_Reason_Code = 'CMP';

  //?Set reason code for pricing event called from
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Price Audit Reason Code = CND.Price Method Requirement
  PAR.Price_Audit_Reason_Code = 'MTH';

  ENDIF;

  //?If price method is audit then audit else check more conditions
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?If price falls outside of audit range, then flag for audit
  CASE;

  // IF DB1.Unit Price GT WRK.Maximum Audit Value
  IF DB1.Unit_Price > WRK.Maximum_Audit_Value;

  // OR DB1.Unit Price LT WRK.Minimum Audit Value
  OR DB1.Unit_Price < WRK.Minimum_Audit_Value;

  // PAR.Price Audit = CND.Needs Price Audit
  PAR.Price_Audit = 'N';

  //?Set reason code for pricing event called from
  CASE;

  // IF PAR.Pricing Event Called From is Market Price Change
  IF PAR.Pricing_Event_Called_From = 'MPC';

  // PAR.Price Audit Reason Code = CND.Commod. Mkt Price Change
  PAR.Price_Audit_Reason_Code = 'CMP';

  //?Set reason code for pricing event called from
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Price Audit Reason Code = CND.Not Within Audit Range
  PAR.Price_Audit_Reason_Code = 'RNG';

  ENDIF;

  //?If price falls outside of audit range, then flag for audit
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?If Contract or MAN EXT Pricing, Price Audit if Allow Man/Qt = N
  CASE;

  // IF PAR.Allow Man/Qt WO/Approval is Do Not Allow
  IF PAR.Allow_Man_Qt_WO_Approval = 'N';

  CASE;

  // IF DB1.Price Method Code is Manual
  IF DB1.Price_Method_Code = 'MAN';

  // OR DB1.Price Method Code is Extended
  OR DB1.Price_Method_Code = 'EXT';

  // OR DB1.Contract Number is Not Zeros
  OR DB1.Contract_Number <> *ZERO;

  // PAR.Price Audit = CND.Needs Price Audit
  PAR.Price_Audit = 'N';

  //?Set reason code for pricing event called from
  CASE;

  // IF PAR.Pricing Event Called From is Market Price Change
  IF PAR.Pricing_Event_Called_From = 'MPC';

  // PAR.Price Audit Reason Code = CND.Commod. Mkt Price Change
  PAR.Price_Audit_Reason_Code = 'CMP';

  //?Set reason code for pricing event called from
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Price Audit Reason Code = CND.Man/Contr/Ext Allow=N
  PAR.Price_Audit_Reason_Code = 'MCE';

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  //?If manual pricing and not a transfer order, check price range
  CASE;

  // IF DB1.Price Method Code is Manual
  IF DB1.Price_Method_Code = 'MAN';

  // AND PAR.Billing Activity Type is Not Warehouse Transfer
  AND PAR.Billing_Activity_Type = '2'/'3'/'1';

  EXECUTE FUNCTION(Val Manual Price      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1581694;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(WRK.Description_Line_One);
  PARAMETER(LCL.Default_Commod_Mark_basis);
  PARAMETER(LCL.Market_Overage);
  PARAMETER(LCL.Standard_Overage_Underage);
  PARAMETER(LCL.Commodity_Price_Group);
  PARAMETER(WRK.Std_Weight_Head_Var_Ren);
  PARAMETER(LCL.Primal_Group_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?R12926 DN 04/23/18-Do NOT use AFR from Co Customer, use AFR from Order HDR
  EXECUTE FUNCTION(RTV AbsFrtRt/Type Cde  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1582615;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(LCL.Type_Code);
  PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Val Price
  CASE;

  // IF LCL.Primal Group Code is NE Samples or Cut Loss
  IF LCL.Primal_Group_Code <> 'UNID';

  // AND LCL.Type Code is Not Promotional/Samples
  AND LCL.Type_Code <> 'PS';

  //?RMC chg parm lcl.default commod mark basis to lcl.commodity price group
  //?   on commodity price group parameter         S12258 1/3/2018
  //?RMC chg parm lcl.commodity marke code to lcl.default commod mark basis
  //?   on commodity market code parameter         S11258 1/3/2018
  //?R12926 DN 04/23/18-Do NOT use AFR from Co Customer, use AFR from Order HDR
  EXECUTE FUNCTION(VAL Manual Price Range IF) TYPE(EXCINTFUN)                     AC1414607;
  PARAMETER(DB1.Company_Number);
  PARAMETER(LCL.Default_Commod_Mark_basis);
  PARAMETER(DB1.Price_Overage_Override);
  PARAMETER(LCL.Commodity_Price_Group);
  PARAMETER(WRK.Projected_Market_Price);
  PARAMETER(LCL.Default_Commod_Mark_basis);
  PARAMETER(LCL.Market_Overage);
  PARAMETER(WRK.Error_Status_3);
  PARAMETER(LCL.Minimum_Price_USR);
  PARAMETER(LCL.Maximum_Price_USR);
  PARAMETER(PAR.Absorbed_Freight_Rate_CWT);
  {
   //?Execute internal function

   //?*---------------------------------------------------------------*
   //?Documentation:
   //?This internal function will determine if a manual price entered
   //?on an order detail line is within the Manual Pricing Acceptance
   //?Percentage from the Company Control file. If it does not fall
   //?within the percentage range then the market price will be used.
   //?If no market price is found then it is a manual price error
   //?*---------------------------------------------------------------*
   // PAR.Projected Market Price = CON.*ZERO
   PAR.Projected_Market_Price = *ZERO;

   // PAR.Minimum Price   USR = CON.*ZERO
   PAR.Minimum_Price_USR = *ZERO;

   // PAR.Maximum Price  USR = CON.*ZERO
   PAR.Maximum_Price_USR = *ZERO;

   // PAR.Error Status  3 = CND.Yes
   PAR.Error_Status_3 = 'Y';

   EXECUTE FUNCTION(RTV Manual Price Accpt RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1414604;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Manual_Price_Accept_Prcnt);
   PARAMETER(PAR.CoPk_FdSrv_ManPrc_Acpt_PT);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Food Service and Co-Pack Items
   CASE;

   // IF PAR.Default Commod Mark basis is Food Service
   IF PAR.Default_Commod_Mark_basis = 'FSV';

   // OR PAR.Default Commod Mark basis is Co-Pack
   OR PAR.Default_Commod_Mark_basis = 'CPK';

   // PAR.Manual Price Accept Prcnt = PAR.CoPk/FdSrv ManPrc Acpt%
   PAR.Manual_Price_Accept_Prcnt = PAR.CoPk_FdSrv_ManPrc_Acpt_PT;

   ENDIF;

   EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
   PARAMETER(PAR.Commodity_Market_Code);
   PARAMETER(PAR.Commodity_Price_Group);
   PARAMETER(9999999);
   PARAMETER(PAR.Projected_Market_Price);
   PARAMETER(WRK.USR_Date_Priced);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    // PAR.Commodity Market Price = DB1.Commodity Market Price
    PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

    // PAR.USR Date Priced = DB1.Market Price Date
    PAR.USR_Date_Priced = DB1.Market_Price_Date;

    QUIT;

   }

   // Projected Market Price
   PAR.Projected_Market_Price = ( PAR.Projected_Market_Price
   + PAR.Standard_Overage_Underage ) + ( PAR.Absorbed_Freight_Rate_CWT / 100 'H' );

   //?If a market price is found for co/cust market code default
   CASE;

   // IF PGM.*Return code is *Normal
   IF PGM.*Return_code = *BLANK;

   // Minimum price allowed
   PAR.Minimum_Price_USR = ( 1 - ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) )
   * PAR.Projected_Market_Price 'H';

   // Maximum price allowed
   PAR.Maximum_Price_USR = ( ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) + 1 )
   * PAR.Projected_Market_Price 'H';

   //?If the Price Override is within the range then error status is no
   CASE;

   // IF PAR.Price Overage Override GE PAR.Minimum Price   USR
   IF PAR.Price_Overage_Override >= PAR.Minimum_Price_USR;

   // AND PAR.Price Overage Override LE PAR.Maximum Price  USR
   AND PAR.Price_Overage_Override <= PAR.Maximum_Price_USR;

   // PAR.Error Status  3 = CND.No
   PAR.Error_Status_3 = 'N';

   ENDIF;

   //?If a market price is found for co/cust market code default
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?If no price for co/cust market code then use co/item market code
   EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
   PARAMETER(PAR.Default_Commod_Mark_basis);
   PARAMETER(PAR.Commodity_Price_Group);
   PARAMETER(9999999);
   PARAMETER(PAR.Projected_Market_Price);
   PARAMETER(WRK.USR_Date_Priced);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    // PAR.Commodity Market Price = DB1.Commodity Market Price
    PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

    // PAR.USR Date Priced = DB1.Market Price Date
    PAR.USR_Date_Priced = DB1.Market_Price_Date;

    QUIT;

   }

   CASE;

   // IF PGM.*Return code is *Normal
   IF PGM.*Return_code = *BLANK;

   // Minimum price allowed
   PAR.Minimum_Price_USR = ( PAR.Manual_Price_Accept_Prcnt / 100 'H' )
   * PAR.Projected_Market_Price 'H';

   // Maximum price allowed
   PAR.Maximum_Price_USR = ( ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) + 1 )
   * PAR.Projected_Market_Price 'H';

   //?If the Price Override is within the range then error status is no
   CASE;

   // IF PAR.Price Overage Override GE PAR.Minimum Price   USR
   IF PAR.Price_Overage_Override >= PAR.Minimum_Price_USR;

   // AND PAR.Price Overage Override LE PAR.Maximum Price  USR
   AND PAR.Price_Overage_Override <= PAR.Maximum_Price_USR;

   // PAR.Error Status  3 = CND.No
   PAR.Error_Status_3 = 'N';

   ENDIF;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Projected Market Price = CON.*ZERO
   PAR.Projected_Market_Price = *ZERO;

   ENDIF;

   ENDIF;

  }

  CASE;

  // IF WRK.Error Status  3 is Yes
  IF WRK.Error_Status_3 = 'Y';

  // PAR.Price Audit = CND.Needs Price Audit
  PAR.Price_Audit = 'N';

  // PAR.Price Audit Reason Code = CND.Manual Price Below Market
  PAR.Price_Audit_Reason_Code = 'MPB';

  //?Price Status will be "U" if Called from OE, Prd Sched
  CASE;

  // IF PAR.Pricing Event Called From is No Price With Credit Pric
  IF PAR.Pricing_Event_Called_From = 'OE'/'PS'/'UWC'/'UWT';

  // PAR.Price Status = CND.Unpriced
  PAR.Price_Status = 'U';

  ENDIF;

  ENDIF;

  //?06/27/08 PKD if the items is priced at .01, then the items is unpriced.
  CASE;

  // IF DB1.Unit Price is LE .0100
  IF DB1.Unit_Price <= .0100;

  // AND LCL.Primal Group Code is NE Other
  AND LCL.Primal_Group_Code <> 'OTHER';

  // AND LCL.Company Organization is Not HPB
  AND LCL.Company_Organization = 'D'/'S';

  // PAR.Price Status = CND.Unpriced
  PAR.Price_Status = 'U';

  ENDIF;

  ENDIF;

  ENDIF;

  //?If unpriced order then Audit EQ Blank
  CASE;

  // IF PAR.Price Status is Unpriced
  IF PAR.Price_Status = 'U';

  // PAR.Price Audit = CND.No Audit
  PAR.Price_Audit = *BLANK;

  // PAR.Price Audit USR = CND.No Audit
  PAR.Price_Audit_USR = *BLANK;

  ENDIF;

  //?If price audit is blank and order is priced then make price audit auto
  CASE;

  // IF PAR.Price Audit is No Audit
  IF PAR.Price_Audit = *BLANK;

  // AND PAR.Price Status is Priced
  AND PAR.Price_Status = 'P';

  // PAR.Price Audit = CND.Automatically Price Audit
  PAR.Price_Audit = 'A';

  // PAR.Price Audit Reason Code = CND.Not Entered
  PAR.Price_Audit_Reason_Code = *BLANK;

  ENDIF;

  //?If shipped quantities are zero then Value=0, Prc Sts=P, Audit=' '
  CASE;

  // IF DB1.Quantity Shipped Total is Equal to zero
  IF DB1.Quantity_Shipped_Total = *ZERO;

  // AND DB1.Weight Shipped Total is Equal to zero
  AND DB1.Weight_Shipped_Total = *ZERO;

  // AND DB1.Detail Line Status is Confirmed & Complete
  AND DB1.Detail_Line_Status = 'C'/'R';

  // AND DB1.Event Code is Shipped Thru 07 History
  AND DB1.Event_Code >= '04';
  AND DB1.Event_Code <= '07';

  // PAR.Price Status = CND.Priced
  PAR.Price_Status = 'P';

  CASE;

  // IF WRK.Price Audit is Automatically Price Audit
  IF WRK.Price_Audit = 'A';

  // PAR.Price Audit = WRK.Price Audit
  PAR.Price_Audit = WRK.Price_Audit;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Price Audit = CND.Manually Price Audited
  PAR.Price_Audit = 'M';

  ENDIF;

  ENDIF;

  ENDIF;

  //?If Price Audit Flag is "N"eeds Audit update Header Parm else blank reason
  CASE;

  // IF PAR.Price Audit is Needs Price Audit
  IF PAR.Price_Audit = 'N';

  // PAR.Price Audit USR = PAR.Price Audit
  PAR.Price_Audit_USR = PAR.Price_Audit;

  // PAR.Price Audit Reason USR = PAR.Price Audit Reason Code
  PAR.Price_Audit_Reason_USR = PAR.Price_Audit_Reason_Code;

  //?If Price Audit Flag is "N"eeds Audit update Header Parm else blank reason
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Price Audit Reason Code = CON.*BLANK
  PAR.Price_Audit_Reason_Code = *BLANK;

  ENDIF;

  //?Write to audit file if Price flag, Audit or Price change
  CASE;

  // IF DB1.Price Status NE PAR.Price Status
  IF DB1.Price_Status <> PAR.Price_Status;

  // OR DB1.Price Audit NE PAR.Price Audit
  OR DB1.Price_Audit <> PAR.Price_Audit;

  // OR DB1.Unit Price NE PAR.Unit Price
  OR DB1.Unit_Price <> PAR.Unit_Price;

  EXECUTE FUNCTION(RTV Next Audit Seq #   RT) TYPE(RTVOBJ) FILE(PDK3CPP)          AC1429793;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(999);
  PARAMETER(WRK.USR_Sequence_Num_New_ATR);
  {
   //?USER: Processing if Data record not found

   // PAR.USR Sequence Num. New ATR = CON.1
   PAR.USR_Sequence_Num_New_ATR = 1;

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   // PAR.USR Sequence Num. New ATR = DB1.Audit Sequence Number + CON.1
   PAR.USR_Sequence_Num_New_ATR = DB1.Audit_Sequence_Number + 1;

   QUIT;

  }

  EXECUTE FUNCTION(CRT Price Change Audit CR) TYPE(CRTOBJ) FILE(PDK3CPP)          AC1429780;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(WRK.USR_Sequence_Num_New_ATR);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Detail_Line_Status);
  PARAMETER(DB1.Detail_Line_Status_Last);
  PARAMETER(PAR.Extended_Amount);
  PARAMETER(DB1.Extended_Amount);
  PARAMETER(PAR.Price_Status);
  PARAMETER(DB1.Price_Status);
  PARAMETER(PAR.Price_Audit);
  PARAMETER(PAR.Price_Audit_Reason_Code);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Audit_Reason_Code);
  PARAMETER(PAR.Unit_Price);
  PARAMETER(DB1.Unit_Price);
  PARAMETER(PAR.Unit_Price_Credit);
  PARAMETER(DB1.Unit_Price_Credit);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Event_Code);
  PARAMETER(PAR.Pricing_Event_Called_From);
  PARAMETER(JOB.*PROGRAM);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

  //?If shipped quantities are zero then Value=0, Prc Sts=P, Audit=' '
  CASE;

  // IF DB1.Quantity Shipped Total is Equal to zero
  IF DB1.Quantity_Shipped_Total = *ZERO;

  // AND DB1.Weight Shipped Total is Equal to zero
  AND DB1.Weight_Shipped_Total = *ZERO;

  // AND DB1.Detail Line Status is Confirmed & Complete
  AND DB1.Detail_Line_Status = 'C'/'R';

  // AND DB1.Event Code is Shipped Thru 07 History
  AND DB1.Event_Code >= '04';
  AND DB1.Event_Code <= '07';

  //?If mpr sent or Xcluded, set to "M" else set to "N"
  CASE;

  // IF DB1.OD MPR Sent to USDA Sts is Exclude
  IF DB1.OD_MPR_Sent_to_USDA_Sts = 'X';

  // OR DB1.OD MPR Sent to USDA Sts is yes
  OR DB1.OD_MPR_Sent_to_USDA_Sts = 'Y';

  // LCL.Price Audit = CND.Manually Price Audited
  LCL.Price_Audit = 'M';

  //?If mpr sent or Xcluded, set to "M" else set to "N"
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Price Audit = CND.Needs Price Audit
  LCL.Price_Audit = 'N';

  ENDIF;

  //?9/9/13 upd with par.price instead of db1.price.. we want new price on it
  EXECUTE FUNCTION(CHG Dtl Price/Audit    CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1319758;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('P');
  PARAMETER(DB1.Pricing_Date_Used);
  PARAMETER(LCL.Price_Audit);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Unit_Price);
  PARAMETER(DB1.Unit_Price_Credit);
  PARAMETER(DB1.Unit_Price_Ordered_U_M);
  PARAMETER(DB1.Unit_Weight_Ordered_U_M);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.Substituted_Flag);
  PARAMETER(DB1.OD_Schedule_Override_Sts);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PAR.Price Status = CND.Priced
  PAR.Price_Status = 'P';

  //?If shipped quantities are zero then Value=0, Prc Sts=P, Audit=' '
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?If order detail is priced and manually audited then dont chg pricing
  CASE;

  // IF DB1.Price Status is Priced
  IF ( DB1.Price_Status = 'P';

  // AND DB1.Price Audit is Manually Price Audited
  AND DB1.Price_Audit = 'M' );

  // OR PAR.Pricing Event Called From is Market Group Change
  OR PAR.Pricing_Event_Called_From = 'MGC';

  // OR PAR.Pricing Event Called From is Customer/Item Change
  OR PAR.Pricing_Event_Called_From = 'CIC';

  // OR PAR.Pricing Event Called From is Item Change
  OR PAR.Pricing_Event_Called_From = 'IC';

  CASE;

  // IF PAR.Unit Price NE DB1.Unit Price
  IF PAR.Unit_Price <> DB1.Unit_Price;

  EXECUTE FUNCTION(CHG Dtl Price/Audit    CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1319758;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Billing_Detail_Gross_Dol);
  PARAMETER(DB1.Extended_Amount);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Pricing_Date_Used);
  PARAMETER(PAR.Price_Audit);
  PARAMETER(PAR.Price_Audit_Reason_Code);
  PARAMETER(DB1.Unit_Price);
  PARAMETER(DB1.Unit_Price_Credit);
  PARAMETER(DB1.Unit_Price_Ordered_U_M);
  PARAMETER(DB1.Unit_Weight_Ordered_U_M);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.Substituted_Flag);
  PARAMETER(DB1.OD_Schedule_Override_Sts);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

  //?Extend price incase Shipping Quantities have changed.
  EXECUTE FUNCTION(CLC Extend Price 1 Dtl RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1504392;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Pricing_Event_Called_From);
  PARAMETER(LCL.Company_Organization);
  PARAMETER(PAR.Type_Code);
  {
   //?USER: Initialize routine

   //?RMC 6/17/09 FP1054 use qty/wgt ordered instead of sched
   // PAR.Extended Amount = CON.*ZERO
   PAR.Extended_Amount = *ZERO;

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // Call program RTV For Price Extent   XF.
   CALL PROGRAM(RTV For Price Extent   XF) ('PDXRXFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(NLL.UOM_Pricing);
   PARAMETER(NLL.Unit_Weight);
   PARAMETER(NLL.Catch_Weight_Status);
   PARAMETER(PAR.Primal_Group_Code);

   //?Load Quantity Shipped Total field.
   CASE;

   // IF DB1.Quantity Shipped Total is Equal to zero
   IF DB1.Quantity_Shipped_Total = *ZERO;

   // WRK.Quantity Shipped Total = CON.1
   WRK.Quantity_Shipped_Total = 1;

   //?Load Quantity Shipped Total field.
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Quantity Shipped Total = DB1.Quantity Shipped Total
   WRK.Quantity_Shipped_Total = DB1.Quantity_Shipped_Total;

   ENDIF;

   //?Set quantity and weight according to order status
   CASE;

   // IF DB1.Detail Line Status is Avail/Alloc/Enter/Hold
   IF DB1.Detail_Line_Status = 'L'/'A'/'E'/'H';

   // AND DB1.Event Code is Entered Thru 03 Picked
   AND DB1.Event_Code >= '01';
   AND DB1.Event_Code <= '03';

   // PAR.USR Quantity = DB1.Quantity Ordered
   PAR.USR_Quantity = DB1.Quantity_Ordered;

   // PAR.USR Weight = DB1.Weight Ordered
   PAR.USR_Weight = DB1.Weight_Ordered;

   //?Set quantity and weight according to order status
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.USR Quantity = WRK.Quantity Shipped Total
   PAR.USR_Quantity = WRK.Quantity_Shipped_Total;

   // PAR.USR Weight = DB1.Weight Shipped Total
   PAR.USR_Weight = DB1.Weight_Shipped_Total;

   ENDIF;

   CASE;

   // IF DB1.Price Method Code is Extended
   IF DB1.Price_Method_Code = 'EXT';

   // PAR.Extended Amount = DB1.Price Overage Override
   PAR.Extended_Amount = DB1.Price_Overage_Override;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Extend price with unit price credit if not zeros
   CASE;

   // IF DB1.Detail Line Status is Avail/Alloc/Enter/Hold
   IF ( DB1.Detail_Line_Status = 'L'/'A'/'E'/'H';

   // AND DB1.Event Code is Entered Thru 03 Picked
   AND DB1.Event_Code >= '01';
   AND DB1.Event_Code <= '03';

   // AND DB1.Unit Price - Credit is Not Zeros
   AND DB1.Unit_Price_Credit <> *ZERO;

   // AND DB1.Price Audit is Not Manually Price Audit
   AND DB1.Price_Audit = 'A'/'N'/*BLANK;

   // AND PAR.Pricing Event Called From is No Price With Credit Pric
   AND PAR.Pricing_Event_Called_From = 'OE'/'PS'/'UWC'/'UWT' );

   //?07/08/09 PKD Replaced w/consideration to .01 price or less
   //?Extend Price using Price Overage Override or Unit Price-Credit
   CASE;

   // IF DB1.Price Method Code is Deviated
   IF DB1.Price_Method_Code = 'DEV';

   //?----- USE: Price Overage Override
   // Call program Clc OrdDtl Ext Amt    XF.
   CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
   PARAMETER(PAR.Extended_Amount);
   PARAMETER(DB1.U_M_Base_Price);
   PARAMETER(PAR.USR_Quantity);
   PARAMETER(PAR.USR_Weight);
   PARAMETER(DB1.Price_Overage_Override);

   //?Extend Price using Price Overage Override or Unit Price-Credit
   // IF DB1.Price Method Code is Manual
   IF DB1.Price_Method_Code = 'MAN';

   // AND PAR.Company Organization is High Plains Biodiesel
   AND PAR.Company_Organization = 'H';

   //?----- USE: Price Overage Override
   // Call program Clc OrdDtl Ext Amt    XF.
   CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
   PARAMETER(PAR.Extended_Amount);
   PARAMETER(DB1.U_M_Base_Price);
   PARAMETER(PAR.USR_Quantity);
   PARAMETER(PAR.USR_Weight);
   PARAMETER(DB1.Price_Overage_Override);

   //?Extend Price using Price Overage Override or Unit Price-Credit
   // IF DB1.Price Method Code is Manual
   IF DB1.Price_Method_Code = 'MAN';

   // AND PAR.Company Organization is Not HPB
   AND PAR.Company_Organization = 'D'/'S';

   //?----- USE: Price Overage Override OR Unit Price-Credit
   CASE;

   // IF PAR.Type Code is Inter Company
   IF PAR.Type_Code = 'IC';

   // OR PAR.Type Code is Is Promotional/Samples
   OR PAR.Type_Code = 'PS';

   // OR PAR.Primal Group Code is Samples or Cut Loss
   OR PAR.Primal_Group_Code = 'UNID';

   // OR PAR.Primal Group Code is Other
   OR PAR.Primal_Group_Code = 'OTHER';

   // OR DB1.Price Overage Override is GT .01
   OR DB1.Price_Overage_Override > .01;

   //?----- USE: Price Overage Override
   // Call program Clc OrdDtl Ext Amt    XF.
   CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
   PARAMETER(PAR.Extended_Amount);
   PARAMETER(DB1.U_M_Base_Price);
   PARAMETER(PAR.USR_Quantity);
   PARAMETER(PAR.USR_Weight);
   PARAMETER(DB1.Price_Overage_Override);

   //?----- USE: Price Overage Override OR Unit Price-Credit
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?----- USE: Unit Price-Credit
   // Call program Clc OrdDtl Ext Amt    XF.
   CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
   PARAMETER(PAR.Extended_Amount);
   PARAMETER(DB1.U_M_Base_Price);
   PARAMETER(PAR.USR_Quantity);
   PARAMETER(PAR.USR_Weight);
   PARAMETER(DB1.Unit_Price_Credit);

   ENDIF;

   //?Extend Price using Price Overage Override or Unit Price-Credit
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?---- USE: Unit Price-Credit
   // Call program Clc OrdDtl Ext Amt    XF.
   CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
   PARAMETER(PAR.Extended_Amount);
   PARAMETER(DB1.U_M_Base_Price);
   PARAMETER(PAR.USR_Quantity);
   PARAMETER(PAR.USR_Weight);
   PARAMETER(DB1.Unit_Price_Credit);

   ENDIF;

   //?Extend price with unit price credit if not zeros
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?*** Determine Extended Amount
   //?08/28/07 PKD Replaced with Clc OrdDtl Ext Amt    XF
   // Call program Clc OrdDtl Ext Amt    XF.
   CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
   PARAMETER(PAR.Extended_Amount);
   PARAMETER(DB1.U_M_Base_Price);
   PARAMETER(PAR.USR_Quantity);
   PARAMETER(PAR.USR_Weight);
   PARAMETER(DB1.Unit_Price);

   CASE;

   // IF PAR.USR Quantity is not equal zero
   IF PAR.USR_Quantity <> *ZERO;

   // PAR.Unit Price Ordered U/M = PAR.Extended Amount / PAR.USR Quantity *Rounded
   PAR.Unit_Price_Ordered_U_M = PAR.Extended_Amount / PAR.USR_Quantity 'H';

   ENDIF;

   ENDIF;

   ENDIF;

   EXECUTE FUNCTION(CHG Dtl Price/Audit    CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1319758;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Extended_Amount);
   PARAMETER(PAR.Extended_Amount);
   PARAMETER(DB1.Price_Status);
   PARAMETER(DB1.Pricing_Date_Used);
   PARAMETER(DB1.Price_Audit);
   PARAMETER(DB1.Price_Audit_Reason_Code);
   PARAMETER(DB1.Unit_Price);
   PARAMETER(DB1.Unit_Price_Credit);
   PARAMETER(PAR.Unit_Price_Ordered_U_M);
   PARAMETER(DB1.Unit_Weight_Ordered_U_M);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(DB1.Modified_Flag);
   PARAMETER(DB1.Substituted_Flag);
   PARAMETER(DB1.OD_Schedule_Override_Sts);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  //?If order detail is priced and manually audited then dont chg pricing
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(CHG Dtl Price/Audit    CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1319758;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Extended_Amount);
  PARAMETER(PAR.Extended_Amount);
  PARAMETER(PAR.Price_Status);
  PARAMETER(PAR.Pricing_Date_Used);
  PARAMETER(PAR.Price_Audit);
  PARAMETER(PAR.Price_Audit_Reason_Code);
  PARAMETER(PAR.Unit_Price);
  PARAMETER(DB1.Unit_Price_Credit);
  PARAMETER(PAR.Unit_Price_Ordered_U_M);
  PARAMETER(DB1.Unit_Weight_Ordered_U_M);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.Substituted_Flag);
  PARAMETER(DB1.OD_Schedule_Override_Sts);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

  ENDIF;

  //?Mark Header Price Status Flag as Unpriced if Unpriced
  CASE;

  // IF PAR.Price Status is Unpriced
  IF PAR.Price_Status = 'U';

  // PAR.Price Status USR = CND.Unpriced
  PAR.Price_Status_USR = 'U';

  ENDIF;

  ENDIF;

 }

 ENDIF;

 EXECUTE FUNCTION(RTV Affect Fields      RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1264364;
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(WRK.Affect_Inventory_Default);
 PARAMETER(WRK.Affect_Sales_Doll_Default);
 PARAMETER(WRK.Affect_Sales_Pnds_Default);
 PARAMETER(WRK.Affect_Brokerage_Default);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?If not a new order remove A/R Summary
 CASE;

 // IF PAR.USR New Order is *NO
 IF PAR.USR_New_Order = *NO;

 //?Remove old order value from A/R Summary
 CASE;

 // IF DB1.Block Order Flag is Block Order
 IF DB1.Block_Order_Flag = 'B';

 //?   **OMS203:  Block Orders don't affect A/R Summary
 //?Remove old order value from A/R Summary
 // IF WRK.Affect Sales Doll Default is yes
 IF WRK.Affect_Sales_Doll_Default = 'Y';

 // WRK.Order Value Total = CON.*ZERO - DB1.A/R order Value Total
 WRK.Order_Value_Total = *ZERO - DB1.A_R_order_Value_Total;

 //?08/20/07 RMC PK0040 Use Accounting Company if there, else db1
 CASE;

 // IF PAR.Accounting Company is Equal to zero
 IF PAR.Accounting_Company = *ZERO;

 EXECUTE FUNCTION(UPD Chg Val Open Ord   RT) TYPE(RTVOBJ) FILE(ARBCREP)          AC1349778;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(WRK.Order_Value_Total);
 {
  //?USER: Processing if Data record not found

  //?This shouldn't be used here--A/R Summary is created when an order
  //?is created
  EXECUTE FUNCTION(CRT A/R Summary        CR) TYPE(CRTOBJ) FILE(ARBCREP)          AC1109013;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.AR_Customer_Number);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.A_R_order_Value_Total);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(1);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.Value of Open Orders = DB1.Value of Open Orders + PAR.A/R order Value Total
  PAR.Value_of_Open_Orders = DB1.Value_of_Open_Orders + PAR.A_R_order_Value_Total;

  EXECUTE FUNCTION(CHG Value Open Orders  CH) TYPE(CHGOBJ) FILE(ARBCREP)          AC1351678;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(PAR.Value_of_Open_Orders);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 //?08/20/07 RMC PK0040 Use Accounting Company if there, else db1
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(UPD Chg Val Open Ord   RT) TYPE(RTVOBJ) FILE(ARBCREP)          AC1349778;
 PARAMETER(PAR.Accounting_Company);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(WRK.Order_Value_Total);
 {
  //?USER: Processing if Data record not found

  //?This shouldn't be used here--A/R Summary is created when an order
  //?is created
  EXECUTE FUNCTION(CRT A/R Summary        CR) TYPE(CRTOBJ) FILE(ARBCREP)          AC1109013;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.AR_Customer_Number);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.A_R_order_Value_Total);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(1);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.Value of Open Orders = DB1.Value of Open Orders + PAR.A/R order Value Total
  PAR.Value_of_Open_Orders = DB1.Value_of_Open_Orders + PAR.A_R_order_Value_Total;

  EXECUTE FUNCTION(CHG Value Open Orders  CH) TYPE(CHGOBJ) FILE(ARBCREP)          AC1351678;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(PAR.Value_of_Open_Orders);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 ENDIF;

 ENDIF;

 ENDIF;

 // Call program CLC Tot Ord Val Ship   XF.
 CALL PROGRAM(CLC Tot Ord Val Ship   XF) ('PDP1XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.USR_Order_Value);
 PARAMETER(PAR.USR_Order_Weight);
 PARAMETER(PAR.Production_Hold);
 PARAMETER(WRK.USR_Update_Flag);

 //?A/R Summary updated if order type affect sales $/not block order
 CASE;

 // IF DB1.Block Order Flag is Block Order
 IF DB1.Block_Order_Flag = 'B';

 // PAR.A/R order Value Total = CON.*ZERO
 PAR.A_R_order_Value_Total = *ZERO;

 //?A/R Summary updated if order type affect sales $/not block order
 // IF WRK.Affect Sales Doll Default is yes
 IF WRK.Affect_Sales_Doll_Default = 'Y';

 //?12/07/06 PKD PK0040 Use Accounting Company if there
 CASE;

 // IF PAR.Accounting Company is Equal to zero
 IF PAR.Accounting_Company = *ZERO;

 EXECUTE FUNCTION(UPD Chg Val Open Ord   RT) TYPE(RTVOBJ) FILE(ARBCREP)          AC1349778;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(PAR.USR_Order_Value);
 {
  //?USER: Processing if Data record not found

  //?This shouldn't be used here--A/R Summary is created when an order
  //?is created
  EXECUTE FUNCTION(CRT A/R Summary        CR) TYPE(CRTOBJ) FILE(ARBCREP)          AC1109013;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.AR_Customer_Number);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.A_R_order_Value_Total);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(1);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.Value of Open Orders = DB1.Value of Open Orders + PAR.A/R order Value Total
  PAR.Value_of_Open_Orders = DB1.Value_of_Open_Orders + PAR.A_R_order_Value_Total;

  EXECUTE FUNCTION(CHG Value Open Orders  CH) TYPE(CHGOBJ) FILE(ARBCREP)          AC1351678;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(PAR.Value_of_Open_Orders);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(UPD Chg Val Open Ord   RT) TYPE(RTVOBJ) FILE(ARBCREP)          AC1349778;
 PARAMETER(PAR.Accounting_Company);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(PAR.USR_Order_Value);
 {
  //?USER: Processing if Data record not found

  //?This shouldn't be used here--A/R Summary is created when an order
  //?is created
  EXECUTE FUNCTION(CRT A/R Summary        CR) TYPE(CRTOBJ) FILE(ARBCREP)          AC1109013;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.AR_Customer_Number);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.A_R_order_Value_Total);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(1);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.Value of Open Orders = DB1.Value of Open Orders + PAR.A/R order Value Total
  PAR.Value_of_Open_Orders = DB1.Value_of_Open_Orders + PAR.A_R_order_Value_Total;

  EXECUTE FUNCTION(CHG Value Open Orders  CH) TYPE(CHGOBJ) FILE(ARBCREP)          AC1351678;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(PAR.Value_of_Open_Orders);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 ENDIF;

 // PAR.A/R order Value Total = PAR.USR Order Value
 PAR.A_R_order_Value_Total = PAR.USR_Order_Value;

 //?A/R Summary updated if order type affect sales $/not block order
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.A/R order Value Total = CON.*ZERO
 PAR.A_R_order_Value_Total = *ZERO;

 ENDIF;

 //?Load ID NE *zero
 CASE;

 // IF DB1.Load ID NE WRK.ZERO
 IF DB1.Load_ID <> WRK.ZERO;

 // Call program RTV UPD Ld Abs.Frt/Wgt XF.
 CALL PROGRAM(RTV UPD Ld Abs.Frt/Wgt XF) ('PDE0XFR');
 PARAMETER(DB1.Load_ID);
 PARAMETER(WRK.Total_Load_Order_Weight);
 PARAMETER(WRK.Total_Freight);

 ENDIF;

 //?Update header with Order Value/Weight and Price Status/Audit Values
 //?C4029:  3/20/98 pll  Added code so the header re-gets the price/aud sts
 EXECUTE FUNCTION(Rtv All Prc Sts/Audit  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1433036;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Price_Status_USR);
 PARAMETER(PAR.Price_Audit_USR);
 PARAMETER(PAR.Shipping_Company);
 PARAMETER(PAR.Accounting_Company);
 {
  //?USER: Initialize routine

  //?RMC 3/30/2022 change lf from OPBGWKLJ TO OPBGWKN9 - TO INCLUDE 'R' ODs
  // PAR.Price Status = CND.Priced
  PAR.Price_Status = 'P';

  // PAR.Price Audit = CND.Manually Price Audited
  PAR.Price_Audit = 'M';

  //?USER: Process Data record

  CASE;

  // IF DB1.Price Status is Blank or Unpriced
  IF DB1.Price_Status = *BLANK/'U';

  // PAR.Price Status = DB1.Price Status
  PAR.Price_Status = DB1.Price_Status;

  ENDIF;

  CASE;

  // IF DB1.Price Audit is Not Manually Price Audit
  IF DB1.Price_Audit = 'A'/'N'/*BLANK;

  // PAR.Price Audit = DB1.Price Audit
  PAR.Price_Audit = DB1.Price_Audit;

  ENDIF;

  EXECUTE FUNCTION(RTV OD Whs/ShpCo/AccCo RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1801011;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Shipping_Company);
  PARAMETER(PAR.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

 }

 EXECUTE FUNCTION(CHG Order Price/PrcAud CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1319687;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.USR_Order_Value);
 PARAMETER(PAR.USR_Order_Weight);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(PAR.Price_Audit_USR);
 PARAMETER(PAR.Price_Status_USR);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(PAR.A_R_order_Value_Total);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program TRG Order Hdr CHG Trig XT.
  CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Ship_To_Name);
  PARAMETER(DB1.Ship_To_Address_Line_1);
  PARAMETER(DB1.Ship_To_Address_Line_2);
  PARAMETER(DB1.Ship_To_Address_Line_3);
  PARAMETER(DB1.Ship_To_City);
  PARAMETER(DB1.Ship_To_State_Code);
  PARAMETER(DB1.Ship_To_Zip_Postal_Code);
  PARAMETER(DB1.Bill_to_Customer);
  PARAMETER(DB1.Bill_to_Name);
  PARAMETER(DB1.Bill_to_Address_Line_1);
  PARAMETER(DB1.Bill_to_Address_Line_2);
  PARAMETER(DB1.Bill_to_Address_Line_3);
  PARAMETER(DB1.Bill_to_City);
  PARAMETER(DB1.Bill_to_State_Code);
  PARAMETER(DB1.Bill_to_Zip_Postal_Code);
  PARAMETER(DB1.Customer_Purchase_Order_#);
  PARAMETER(DB1.Order_Date);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Cancel_Date);
  PARAMETER(DB1.Terms_Code);
  PARAMETER(DB1.Special_Instructions);
  PARAMETER(DB1.Special_Instructions_2);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Comment_Print_Acknowledge);
  PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
  PARAMETER(DB1.Comment_Print_Pick_Slip);
  PARAMETER(DB1.Comment_Print_Ship_Doc);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Order_in_Use);
  PARAMETER(DB1.Header_Status);
  PARAMETER(DB1.Header_Status_Last);
  PARAMETER(DB1.Order_Type_Print_Status);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.User_Original_Entry);
  PARAMETER(DB1.Date_of_Original_Entry);
  PARAMETER(DB1.Order_Value_Total);
  PARAMETER(DB1.Order_Weight_Total);
  PARAMETER(DB1.Credit_Hold);
  PARAMETER(DB1.Production_Hold);
  PARAMETER(DB1.New_Customer_Hold);
  PARAMETER(DB1.Requested_Delivery_Date);
  PARAMETER(DB1.Requested_Delivery_Time);
  PARAMETER(DB1.Accounts_Receiv_Ent_1);
  PARAMETER(DB1.Accounts_Receiv_Ent_2);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.LTL_Flag);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Shipping_Method);
  PARAMETER(DB1.Export_Status);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Shrink_Wrap);
  PARAMETER(DB1.Slip_Sheet);
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Reefer_Temperature);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Attach_to_Invoice_Number);
  PARAMETER(DB1.Load_Plan_Order);
  PARAMETER(DB1.Print_Pick_Slip);
  PARAMETER(DB1.Resell_Reference_Number);
  PARAMETER(DB1.Special_Comment_1);
  PARAMETER(DB1.Special_Comment_2);
  PARAMETER(DB1.Affect_Auto_Accruals);
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(DB1.Manager_Level_Code);
  PARAMETER(DB1.VP_Level_Code);
  PARAMETER(DB1.Attach_to_Order_Number);
  PARAMETER(DB1.Reason_for_Price_Audit);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Invoice_Date);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Trans_Contol_AS400_Plant);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.A_R_order_Value_Total);
  PARAMETER(DB1.Billing_Activity_Type);
  PARAMETER(DB1.Block_Order_Flag);
  PARAMETER(DB1.Order_Certification_Flag);
  PARAMETER(DB1.Invoice_Order_Value_Tot);
  PARAMETER(DB1.Process_Sts_for_3C);
  PARAMETER(DB1.Order_Conf_Fax_Sts);
  PARAMETER(DB1.Manifest_Fax_Sts);
  PARAMETER(DB1.Invoice_Fax_Sts);
  PARAMETER(DB1.Transfer_in_Storage_Ind);
  PARAMETER(DB1.Email_Cust_On_Order_Ship);
  PARAMETER(DB1.Order_Emailed);
  PARAMETER(DB1.Export_Docs_Go_w_Driver);
  PARAMETER(DB1.Shipping_Temp_Code_C_F);
  PARAMETER(DB1.Broker_Order_Status);
  PARAMETER(DB1.Air_Freight_Order);
  PARAMETER(DB1.Order_Requires_Review);
  PARAMETER(DB1.OH_Load_Plan_Ready);
  PARAMETER(DB1.Export_USDA_Approved);
  PARAMETER(DB1.HPB_Ship_to_Warehouse);
  PARAMETER(DB1.OH_TF_Exempt_Code);
  PARAMETER(DB1.OH_Appt_Confirmation_Dt);
  PARAMETER(DB1.JPN_Invoice_Issuance_Date);
  PARAMETER(DB1.Load_Actual_Shipped_Date);
  PARAMETER(DB1.Load_BOL_Complete_Date);
  PARAMETER(DB1.Load_Truck_Departure_Date);
  PARAMETER(DB1.Maximum_Gross_Weight);
  PARAMETER(DB1.Time_of_Original_Entry);
  PARAMETER(DB1.OH_Appt_Confirmation_Tm);
  PARAMETER(DB1.Load_BOL_Complete_Time);
  PARAMETER(DB1.Load_Truck_Departure_Time);
  PARAMETER(DB1.Act_Frt_Reference_Amount);
  PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
  PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
  PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
  PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);

 }

 ENDDO;

 // IF DB1.Billing Activity Type is Warehouse Transfer
 IF DB1.Billing_Activity_Type = '4';

 //?Warehouse Transfer.
 DO;

 EXECUTE FUNCTION(Rtv All Prc Sts/Audit  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1433036;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Price_Status);
 PARAMETER(PAR.Price_Audit);
 PARAMETER(PAR.Shipping_Company);
 PARAMETER(PAR.Accounting_Company);
 {
  //?USER: Initialize routine

  //?RMC 3/30/2022 change lf from OPBGWKLJ TO OPBGWKN9 - TO INCLUDE 'R' ODs
  // PAR.Price Status = CND.Priced
  PAR.Price_Status = 'P';

  // PAR.Price Audit = CND.Manually Price Audited
  PAR.Price_Audit = 'M';

  //?USER: Process Data record

  CASE;

  // IF DB1.Price Status is Blank or Unpriced
  IF DB1.Price_Status = *BLANK/'U';

  // PAR.Price Status = DB1.Price Status
  PAR.Price_Status = DB1.Price_Status;

  ENDIF;

  CASE;

  // IF DB1.Price Audit is Not Manually Price Audit
  IF DB1.Price_Audit = 'A'/'N'/*BLANK;

  // PAR.Price Audit = DB1.Price Audit
  PAR.Price_Audit = DB1.Price_Audit;

  ENDIF;

  EXECUTE FUNCTION(RTV OD Whs/ShpCo/AccCo RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1801011;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Shipping_Company);
  PARAMETER(PAR.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

 }

 // Call program CLC Tot Ord Val Ship   XF.
 CALL PROGRAM(CLC Tot Ord Val Ship   XF) ('PDP1XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.USR_Order_Value);
 PARAMETER(PAR.USR_Order_Weight);
 PARAMETER(PAR.Production_Hold);
 PARAMETER(WRK.USR_Update_Flag);

 EXECUTE FUNCTION(CHG Order Price/PrcAud CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1319687;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.USR_Order_Value);
 PARAMETER(PAR.USR_Order_Weight);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(PAR.Price_Status);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(PAR.USR_Order_Value);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program TRG Order Hdr CHG Trig XT.
  CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Ship_To_Name);
  PARAMETER(DB1.Ship_To_Address_Line_1);
  PARAMETER(DB1.Ship_To_Address_Line_2);
  PARAMETER(DB1.Ship_To_Address_Line_3);
  PARAMETER(DB1.Ship_To_City);
  PARAMETER(DB1.Ship_To_State_Code);
  PARAMETER(DB1.Ship_To_Zip_Postal_Code);
  PARAMETER(DB1.Bill_to_Customer);
  PARAMETER(DB1.Bill_to_Name);
  PARAMETER(DB1.Bill_to_Address_Line_1);
  PARAMETER(DB1.Bill_to_Address_Line_2);
  PARAMETER(DB1.Bill_to_Address_Line_3);
  PARAMETER(DB1.Bill_to_City);
  PARAMETER(DB1.Bill_to_State_Code);
  PARAMETER(DB1.Bill_to_Zip_Postal_Code);
  PARAMETER(DB1.Customer_Purchase_Order_#);
  PARAMETER(DB1.Order_Date);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Cancel_Date);
  PARAMETER(DB1.Terms_Code);
  PARAMETER(DB1.Special_Instructions);
  PARAMETER(DB1.Special_Instructions_2);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Comment_Print_Acknowledge);
  PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
  PARAMETER(DB1.Comment_Print_Pick_Slip);
  PARAMETER(DB1.Comment_Print_Ship_Doc);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Order_in_Use);
  PARAMETER(DB1.Header_Status);
  PARAMETER(DB1.Header_Status_Last);
  PARAMETER(DB1.Order_Type_Print_Status);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.User_Original_Entry);
  PARAMETER(DB1.Date_of_Original_Entry);
  PARAMETER(DB1.Order_Value_Total);
  PARAMETER(DB1.Order_Weight_Total);
  PARAMETER(DB1.Credit_Hold);
  PARAMETER(DB1.Production_Hold);
  PARAMETER(DB1.New_Customer_Hold);
  PARAMETER(DB1.Requested_Delivery_Date);
  PARAMETER(DB1.Requested_Delivery_Time);
  PARAMETER(DB1.Accounts_Receiv_Ent_1);
  PARAMETER(DB1.Accounts_Receiv_Ent_2);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.LTL_Flag);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Shipping_Method);
  PARAMETER(DB1.Export_Status);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Shrink_Wrap);
  PARAMETER(DB1.Slip_Sheet);
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Reefer_Temperature);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Attach_to_Invoice_Number);
  PARAMETER(DB1.Load_Plan_Order);
  PARAMETER(DB1.Print_Pick_Slip);
  PARAMETER(DB1.Resell_Reference_Number);
  PARAMETER(DB1.Special_Comment_1);
  PARAMETER(DB1.Special_Comment_2);
  PARAMETER(DB1.Affect_Auto_Accruals);
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(DB1.Manager_Level_Code);
  PARAMETER(DB1.VP_Level_Code);
  PARAMETER(DB1.Attach_to_Order_Number);
  PARAMETER(DB1.Reason_for_Price_Audit);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Invoice_Date);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Trans_Contol_AS400_Plant);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.A_R_order_Value_Total);
  PARAMETER(DB1.Billing_Activity_Type);
  PARAMETER(DB1.Block_Order_Flag);
  PARAMETER(DB1.Order_Certification_Flag);
  PARAMETER(DB1.Invoice_Order_Value_Tot);
  PARAMETER(DB1.Process_Sts_for_3C);
  PARAMETER(DB1.Order_Conf_Fax_Sts);
  PARAMETER(DB1.Manifest_Fax_Sts);
  PARAMETER(DB1.Invoice_Fax_Sts);
  PARAMETER(DB1.Transfer_in_Storage_Ind);
  PARAMETER(DB1.Email_Cust_On_Order_Ship);
  PARAMETER(DB1.Order_Emailed);
  PARAMETER(DB1.Export_Docs_Go_w_Driver);
  PARAMETER(DB1.Shipping_Temp_Code_C_F);
  PARAMETER(DB1.Broker_Order_Status);
  PARAMETER(DB1.Air_Freight_Order);
  PARAMETER(DB1.Order_Requires_Review);
  PARAMETER(DB1.OH_Load_Plan_Ready);
  PARAMETER(DB1.Export_USDA_Approved);
  PARAMETER(DB1.HPB_Ship_to_Warehouse);
  PARAMETER(DB1.OH_TF_Exempt_Code);
  PARAMETER(DB1.OH_Appt_Confirmation_Dt);
  PARAMETER(DB1.JPN_Invoice_Issuance_Date);
  PARAMETER(DB1.Load_Actual_Shipped_Date);
  PARAMETER(DB1.Load_BOL_Complete_Date);
  PARAMETER(DB1.Load_Truck_Departure_Date);
  PARAMETER(DB1.Maximum_Gross_Weight);
  PARAMETER(DB1.Time_of_Original_Entry);
  PARAMETER(DB1.OH_Appt_Confirmation_Tm);
  PARAMETER(DB1.Load_BOL_Complete_Time);
  PARAMETER(DB1.Load_Truck_Departure_Time);
  PARAMETER(DB1.Act_Frt_Reference_Amount);
  PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
  PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
  PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
  PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);

 }

 ENDDO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Credit Memo/Debit Memo
 // PAR.USR Order Value = DB1.Order Value Total
 PAR.USR_Order_Value = DB1.Order_Value_Total;

 // PAR.USR Order Weight = DB1.Order Weight Total
 PAR.USR_Order_Weight = DB1.Order_Weight_Total;

 ENDIF;

 // PAR.Order Value Total = PAR.USR Order Value
 PAR.Order_Value_Total = PAR.USR_Order_Value;

 // PAR.Order Weight Total = PAR.USR Order Weight
 PAR.Order_Weight_Total = PAR.USR_Order_Weight;

 ENDDO;

 ENDIF;

}


EXECUTE FUNCTION(Val for PO Ack        IF) TYPE(EXCINTFUN)                      AC2041958;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Pricing_Event_Called_From);
PARAMETER(LCL.Trans_Type_1_PASS_USR);
{
 //?Execute internal function

 // LCL.EDI Process Flag = CND.Do not process
 LCL.EDI_Process_Flag = 'N';

 //?Retrieve the BT Customer
 EXECUTE FUNCTION(Rtv Order Info ALL    RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1745072;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(NLL.Order_Type_Sales);
 PARAMETER(LCL.AR_Customer_Number);
 PARAMETER(NLL.Ship_To_Customer);
 PARAMETER(NLL.Ship_To_Name);
 PARAMETER(NLL.Ship_To_Address_Line_1);
 PARAMETER(NLL.Ship_To_Address_Line_2);
 PARAMETER(NLL.Ship_To_Address_Line_3);
 PARAMETER(NLL.Ship_To_City);
 PARAMETER(NLL.Ship_To_State_Code);
 PARAMETER(NLL.Ship_To_Zip_Postal_Code);
 PARAMETER(NLL.Bill_to_Customer);
 PARAMETER(NLL.Bill_to_Name);
 PARAMETER(NLL.Bill_to_Address_Line_1);
 PARAMETER(NLL.Bill_to_Address_Line_2);
 PARAMETER(NLL.Bill_to_Address_Line_3);
 PARAMETER(NLL.Bill_to_City);
 PARAMETER(NLL.Bill_to_State_Code);
 PARAMETER(NLL.Bill_to_Zip_Postal_Code);
 PARAMETER(LCL.Customer_Purchase_Order_#);
 PARAMETER(NLL.Order_Date);
 PARAMETER(NLL.Requested_Ship_Date);
 PARAMETER(NLL.Actual_Shipped_Date);
 PARAMETER(NLL.Cancel_Date);
 PARAMETER(NLL.Terms_Code);
 PARAMETER(NLL.Special_Instructions);
 PARAMETER(NLL.Special_Instructions_2);
 PARAMETER(NLL.Carrier_Code);
 PARAMETER(NLL.Comment_Print_Acknowledge);
 PARAMETER(NLL.Comment_Print_Inv_Cr_Memo);
 PARAMETER(NLL.Comment_Print_Pick_Slip);
 PARAMETER(NLL.Comment_Print_Ship_Doc);
 PARAMETER(NLL.Reason_Code);
 PARAMETER(NLL.Order_in_Use);
 PARAMETER(NLL.Header_Status);
 PARAMETER(NLL.Header_Status_Last);
 PARAMETER(NLL.Order_Type_Print_Status);
 PARAMETER(NLL.Scheduled_Ship_Date);
 PARAMETER(NLL.User_Original_Entry);
 PARAMETER(NLL.Date_of_Original_Entry);
 PARAMETER(NLL.Order_Value_Total);
 PARAMETER(NLL.Order_Weight_Total);
 PARAMETER(NLL.Credit_Hold);
 PARAMETER(NLL.Production_Hold);
 PARAMETER(NLL.New_Customer_Hold);
 PARAMETER(NLL.Requested_Delivery_Date);
 PARAMETER(NLL.Requested_Delivery_Time);
 PARAMETER(NLL.Accounts_Receiv_Ent_1);
 PARAMETER(NLL.Accounts_Receiv_Ent_2);
 PARAMETER(NLL.Load_ID);
 PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
 PARAMETER(NLL.Rated_Freight);
 PARAMETER(NLL.LTL_Flag);
 PARAMETER(NLL.Price_Audit);
 PARAMETER(LCL.Price_Status);
 PARAMETER(NLL.Shipping_Method);
 PARAMETER(NLL.Export_Status);
 PARAMETER(NLL.Palletize);
 PARAMETER(NLL.Shrink_Wrap);
 PARAMETER(NLL.Slip_Sheet);
 PARAMETER(NLL.Age_Code);
 PARAMETER(NLL.Reefer_Temperature);
 PARAMETER(NLL.Load_Type);
 PARAMETER(NLL.Attach_to_Invoice_Number);
 PARAMETER(NLL.Load_Plan_Order);
 PARAMETER(NLL.Print_Pick_Slip);
 PARAMETER(NLL.Resell_Reference_Number);
 PARAMETER(NLL.Special_Comment_1);
 PARAMETER(NLL.Special_Comment_2);
 PARAMETER(NLL.Affect_Auto_Accruals);
 PARAMETER(NLL.Sales_Route_Code);
 PARAMETER(NLL.Manager_Level_Code);
 PARAMETER(NLL.VP_Level_Code);
 PARAMETER(NLL.Attach_to_Order_Number);
 PARAMETER(NLL.Reason_for_Price_Audit);
 PARAMETER(NLL.Invoice_Number);
 PARAMETER(NLL.Invoice_Suffix);
 PARAMETER(NLL.Invoice_Date);
 PARAMETER(NLL.Event_Code);
 PARAMETER(NLL.Trans_Contol_AS400_Plant);
 PARAMETER(NLL.Modified_Flag);
 PARAMETER(NLL.A_R_order_Value_Total);
 PARAMETER(NLL.Billing_Activity_Type);
 PARAMETER(NLL.Block_Order_Flag);
 PARAMETER(NLL.Order_Certification_Flag);
 PARAMETER(NLL.Invoice_Order_Value_Tot);
 PARAMETER(NLL.Process_Sts_for_3C);
 PARAMETER(NLL.Order_Conf_Fax_Sts);
 PARAMETER(NLL.Manifest_Fax_Sts);
 PARAMETER(NLL.Invoice_Fax_Sts);
 PARAMETER(NLL.Transfer_in_Storage_Ind);
 PARAMETER(NLL.Email_Cust_On_Order_Ship);
 PARAMETER(NLL.Order_Emailed);
 PARAMETER(NLL.Export_Docs_Go_w_Driver);
 PARAMETER(NLL.Shipping_Temp_Code_C_F);
 PARAMETER(NLL.Broker_Order_Status);
 PARAMETER(NLL.Air_Freight_Order);
 PARAMETER(NLL.Order_Requires_Review);
 PARAMETER(NLL.OH_Load_Plan_Ready);
 PARAMETER(NLL.Export_USDA_Approved);
 PARAMETER(NLL.HPB_Ship_to_Warehouse);
 PARAMETER(NLL.OH_TF_Exempt_Code);
 PARAMETER(NLL.OH_Appt_Confirmation_Dt);
 PARAMETER(NLL.JPN_Invoice_Issuance_Date);
 PARAMETER(NLL.Load_Actual_Shipped_Date);
 PARAMETER(NLL.Load_BOL_Complete_Date);
 PARAMETER(NLL.Load_Truck_Departure_Date);
 PARAMETER(NLL.Maximum_Gross_Weight);
 PARAMETER(NLL.Time_of_Original_Entry);
 PARAMETER(NLL.OH_Appt_Confirmation_Tm);
 PARAMETER(NLL.Load_BOL_Complete_Time);
 PARAMETER(NLL.Load_Truck_Departure_Time);
 PARAMETER(NLL.Act_Frt_Reference_Amount);
 PARAMETER(NLL.Act_Non_Ref_Frt_Amount);
 PARAMETER(NLL.OH_Fuel_Surcharge_Amount);
 PARAMETER(NLL.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(NLL.OH_Total_Ref_Frt_Amt);
 PARAMETER(NLL.Claim_Number);
 PARAMETER(NLL.EDI_Status_1);
 PARAMETER(NLL.EDI_Status_2);
 PARAMETER(NLL.EDI_Status_3);
 PARAMETER(NLL.Job_Time);
 PARAMETER(NLL.User_Id);
 PARAMETER(NLL.Job_Name);
 PARAMETER(NLL.Job_Date);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Check to see it the BT Cust should get a POA/POAC (ack or chgd ack)
 EXECUTE FUNCTION(RTV BT Intrchg BT custRT) TYPE(RTVOBJ) FILE(PNGQREP)           AC2023144;
 PARAMETER(LCL.AR_Customer_Number);
 PARAMETER('POACK');
 PARAMETER(LCL.POC_POCA);
 PARAMETER(LCL.EDI_Trading_Partner_No);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  //?01/24/23 DN W95589-Check Record Status is Active for both 855 & 865.
  CASE;

  // IF DB1.Interchange Code is PO Acknowledgement  855
  IF DB1.Interchange_Code = 'POACK';

  // AND DB1.Record Status is Active
  AND DB1.Record_Status = 'A';

  // PAR.POC/POCA ?? = CND.PO Ack
  PAR.POC_POCA = 'POACK';

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF DB1.Interchange Code is PO Change Ack       865
  IF DB1.Interchange_Code = 'POCACK';

  // AND DB1.Record Status is Active
  AND DB1.Record_Status = 'A';

  // PAR.POC/POCA ?? = CND.PO Change Ack
  PAR.POC_POCA = 'POCACK';

  ENDIF;

  ENDIF;

 }

 //?W95589 DN 01/24/23-Commented Out & Moved Below.
 //?W95589 DN 01/24/23-Only Check if Record Exist to Set EDI POA Flag.
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 //?Chk to see if BT cust requires a EDI PO ACK
 CASE;

 // IF LCL.POC/POCA ?? is PO Ack
 IF LCL.POC_POCA = 'POACK';

 // LCL.EDI POA = CND.Yes
 LCL.EDI_POA = 'Y';

 //?Chk to see if BT cust requires a EDI PO ACK
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.EDI POA = CND.No
 LCL.EDI_POA = 'N';

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(RTV BT Intrchg BT custRT) TYPE(RTVOBJ) FILE(PNGQREP)           AC2023144;
 PARAMETER(LCL.AR_Customer_Number);
 PARAMETER('POCACK');
 PARAMETER(LCL.POC_POCA);
 PARAMETER(LCL.EDI_Trading_Partner_No);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  //?01/24/23 DN W95589-Check Record Status is Active for both 855 & 865.
  CASE;

  // IF DB1.Interchange Code is PO Acknowledgement  855
  IF DB1.Interchange_Code = 'POACK';

  // AND DB1.Record Status is Active
  AND DB1.Record_Status = 'A';

  // PAR.POC/POCA ?? = CND.PO Ack
  PAR.POC_POCA = 'POACK';

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF DB1.Interchange Code is PO Change Ack       865
  IF DB1.Interchange_Code = 'POCACK';

  // AND DB1.Record Status is Active
  AND DB1.Record_Status = 'A';

  // PAR.POC/POCA ?? = CND.PO Change Ack
  PAR.POC_POCA = 'POCACK';

  ENDIF;

  ENDIF;

 }

 //?W95589 DN 01/24/23-Commented Out & Moved Below.
 //?W95589 DN 01/24/23-Only Check if Record Exist to Set EDI POAC Flag.
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 //?Chk to see if BT cust requires a EDI PO Chg ACK
 CASE;

 // IF LCL.POC/POCA ?? is PO Change Ack
 IF LCL.POC_POCA = 'POCACK';

 // LCL.EDI POAC = CND.Yes
 LCL.EDI_POAC = 'Y';

 //?Chk to see if BT cust requires a EDI PO Chg ACK
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.EDI POAC = CND.NO
 LCL.EDI_POAC = 'N';

 ENDIF;

 ENDIF;

 //?See if a rcd has been written to OH ext.
 EXECUTE FUNCTION(RTV EDI PO Flag       RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC2023170;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.OHE_PO_ACK_Flag);
 PARAMETER(LCL.Record_Found_USR);
 {
  //?USER: Initialize routine

  //?3/11/14 SAZ If OHE PO ack flag = Blank, initialize to *NO
  //?3/11/14 SAZ If Record not found, initialize  OHE PO Ack Flag to *NO
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  // PAR.OHE PO ACK Flag = CND.*NO
  PAR.OHE_PO_ACK_Flag = *NO;

  //?USER: Process Data record

  // PAR.OHE PO ACK Flag = DB1.OHE PO ACK Flag
  PAR.OHE_PO_ACK_Flag = DB1.OHE_PO_ACK_Flag;

  CASE;

  // IF DB1.OHE PO ACK Flag is *Blank
  IF DB1.OHE_PO_ACK_Flag = *BLANK;

  // PAR.OHE PO ACK Flag = CND.*NO
  PAR.OHE_PO_ACK_Flag = *NO;

  ENDIF;

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

  QUIT;

 }

 //?Record found in Order header ext
 CASE;

 // IF LCL.Record Found USR is Record Found
 IF LCL.Record_Found_USR = 'Y';

 //?If flag blank, No ack has been sent for this PO yet.
 CASE;

 // IF LCL.OHE PO ACK Flag is *Blank
 IF LCL.OHE_PO_ACK_Flag = *BLANK;

 // OR LCL.OHE PO ACK Flag is *NO
 OR LCL.OHE_PO_ACK_Flag = *NO;

 CASE;

 // IF LCL.EDI POA is Yes
 IF LCL.EDI_POA = 'Y';

 // LCL.EDI Process Flag = CND.Process
 LCL.EDI_Process_Flag = 'Y';

 ENDIF;

 //?If flag blank, No ack has been sent for this PO yet.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?If flag not blank, 855 ack has been sent for this PO. Need to send
 //?another 855(865) if the customer is set up for it.
 CASE;

 // IF LCL.EDI POAC is Yes
 IF LCL.EDI_POAC = 'Y';

 // LCL.EDI Process Flag = CND.Process
 LCL.EDI_Process_Flag = 'Y';

 ENDIF;

 ENDIF;

 //?If record not found and POA is yes, send
 //?Record found in Order header ext
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.EDI POA is Yes
 IF LCL.EDI_POA = 'Y';

 // LCL.EDI Process Flag = CND.Process
 LCL.EDI_Process_Flag = 'Y';

 ENDIF;

 ENDIF;

 //?When all chks are done, need to check to see if the Cust PO
 //?has been entered. If not,do not send to customer.
 //?If Cust PO# not entered
 CASE;

 // IF LCL.Customer Purchase Order # is tba
 IF LCL.Customer_Purchase_Order_# = 'tba';

 // OR LCL.Customer Purchase Order # is TBA(cap)
 OR LCL.Customer_Purchase_Order_# = 'TBA';

 // OR LCL.Customer Purchase Order # is TBD(cap)
 OR LCL.Customer_Purchase_Order_# = 'TBD';

 // OR LCL.Customer Purchase Order # is tbd
 OR LCL.Customer_Purchase_Order_# = 'tbd';

 // OR LCL.Customer Purchase Order # is BLOCK(cap)
 OR LCL.Customer_Purchase_Order_# = 'BLOCK';

 // OR LCL.Customer Purchase Order # is Block
 OR LCL.Customer_Purchase_Order_# = 'Block';

 //?S13599 DN 08/16/18-Added check for 'TBD, tbd, BLOCK & Block'.
 // LCL.EDI Process Flag = CND.Do not process
 LCL.EDI_Process_Flag = 'N';

 // PAR.Trans Type 1 PASS     USR = CND.EDI PO does not exist
 PAR.Trans_Type_1_PASS_USR = 'NP';

 ENDIF;

 //?2014/09/10 PKD/SAZ Check if PO was sent via EDI for SYSCO.  If yes, then
 //?                   Create an 855; otherwise don't do it.
 //?E003964 SLM  02/24/2015 logic for SYSCO & DSYSCO Work the same
 CASE;

 // IF LCL.EDI Trading Partner No. is SYSCO Dailys
 IF LCL.EDI_Trading_Partner_No = 'DSYSCO';

 // OR LCL.EDI Trading Partner No. is SYSCO Foods
 OR LCL.EDI_Trading_Partner_No = 'SYSCO';

 EXECUTE FUNCTION(VAL PO Exists         RT) TYPE(RTVOBJ) FILE(ECP004)            AC2099993;
 PARAMETER(LCL.EDI_Trading_Partner_No);
 PARAMETER(LCL.Customer_Purchase_Order_#);
 PARAMETER(LCL.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

  QUIT;

 }

 //?VAL: Return Code
 CASE;

 // IF LCL.Record Found USR is Record Not Found
 IF LCL.Record_Found_USR = 'N';

 // LCL.EDI Process Flag = CND.Do not process
 LCL.EDI_Process_Flag = 'N';

 // PAR.Trans Type 1 PASS     USR = CND.NO Trade Partner PO
 PAR.Trans_Type_1_PASS_USR = 'TP';

 ENDIF;

 ENDIF;

 //? 7/13/2021 JBB SDD657 - Trading Partner Control
 // Call program Rtv EDI Manual PO Sts XF.
 CALL PROGRAM(Rtv EDI Manual PO Sts XF) ('PUTBXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER('POACK');
 PARAMETER(LCL.Send_EDI_Document_Y_N);

 //?If Send EDI Invoice = N, set EDI Process Flag = N
 CASE;

 // IF LCL.Send EDI Document Y/N is No
 IF LCL.Send_EDI_Document_Y_N = 'N';

 // LCL.EDI Process Flag = CND.Do not process
 LCL.EDI_Process_Flag = 'N';

 ENDIF;

 CASE;

 // IF LCL.EDI Process Flag is Process
 IF LCL.EDI_Process_Flag = 'Y';

 //?2014/09/09 PKD Added Price Audit condition
 //?Do we need to EDI 855/865?
 CASE;

 // IF PAR.Pricing Event Called From is Market Price Change
 IF PAR.Pricing_Event_Called_From = 'MPC';

 // OR PAR.Pricing Event Called From is Order Entry
 OR PAR.Pricing_Event_Called_From = 'OE';

 // OR PAR.Pricing Event Called From is Price Maintenance
 OR PAR.Pricing_Event_Called_From = 'PM';

 // OR PAR.Pricing Event Called From is Price Audit
 OR PAR.Pricing_Event_Called_From = 'PA';

 CASE;

 // IF LCL.Price Status is Priced
 IF LCL.Price_Status = 'P';

 // Call program Rtv/Crt EDI PO Ack    XF.
 CALL PROGRAM(Rtv/Crt EDI PO Ack    XF) ('PNYLXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Trans_Type_1_PASS_USR);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Trans Type 1 PASS     USR = CND.EDI Order is not Priced
 PAR.Trans_Type_1_PASS_USR = 'OP';

 ENDIF;

 ENDIF;

 ENDIF;

}


