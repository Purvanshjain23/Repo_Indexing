// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PUC5XFR
// ?Date: 14.08.2025 Time: 03:49:59
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(RTV All Fields         RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1571206;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Order_Type_Sales);
PARAMETER(NLL.AR_Customer_Number);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(NLL.Ship_To_Name);
PARAMETER(NLL.Ship_To_Address_Line_1);
PARAMETER(NLL.Ship_To_Address_Line_2);
PARAMETER(NLL.Ship_To_Address_Line_3);
PARAMETER(NLL.Ship_To_City);
PARAMETER(NLL.Ship_To_State_Code);
PARAMETER(NLL.Ship_To_Zip_Postal_Code);
PARAMETER(NLL.Bill_to_Customer);
PARAMETER(NLL.Bill_to_Name);
PARAMETER(NLL.Bill_to_Address_Line_1);
PARAMETER(NLL.Bill_to_Address_Line_2);
PARAMETER(NLL.Bill_to_Address_Line_3);
PARAMETER(NLL.Bill_to_City);
PARAMETER(NLL.Bill_to_State_Code);
PARAMETER(NLL.Bill_to_Zip_Postal_Code);
PARAMETER(LCL.Customer_Purchase_Order_#);
PARAMETER(NLL.Order_Date);
PARAMETER(NLL.Requested_Ship_Date);
PARAMETER(LCL.Actual_Shipped_Date);
PARAMETER(NLL.Cancel_Date);
PARAMETER(NLL.Terms_Code);
PARAMETER(NLL.Special_Instructions);
PARAMETER(NLL.Special_Instructions_2);
PARAMETER(NLL.Carrier_Code);
PARAMETER(NLL.Comment_Print_Acknowledge);
PARAMETER(NLL.Comment_Print_Inv_Cr_Memo);
PARAMETER(NLL.Comment_Print_Pick_Slip);
PARAMETER(NLL.Comment_Print_Ship_Doc);
PARAMETER(NLL.Reason_Code);
PARAMETER(NLL.Order_in_Use);
PARAMETER(NLL.Header_Status);
PARAMETER(NLL.Header_Status_Last);
PARAMETER(NLL.Order_Type_Print_Status);
PARAMETER(NLL.Scheduled_Ship_Date);
PARAMETER(NLL.User_Original_Entry);
PARAMETER(NLL.Date_of_Original_Entry);
PARAMETER(NLL.Order_Value_Total);
PARAMETER(NLL.Order_Weight_Total);
PARAMETER(NLL.Credit_Hold);
PARAMETER(NLL.Production_Hold);
PARAMETER(NLL.New_Customer_Hold);
PARAMETER(LCL.Requested_Delivery_Date);
PARAMETER(NLL.Requested_Delivery_Time);
PARAMETER(NLL.Accounts_Receiv_Ent_1);
PARAMETER(NLL.Accounts_Receiv_Ent_2);
PARAMETER(LCL.Load_ID);
PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
PARAMETER(NLL.Rated_Freight);
PARAMETER(NLL.LTL_Flag);
PARAMETER(NLL.Price_Audit);
PARAMETER(NLL.Price_Status);
PARAMETER(NLL.Shipping_Method);
PARAMETER(NLL.Export_Status);
PARAMETER(NLL.Palletize);
PARAMETER(NLL.Shrink_Wrap);
PARAMETER(NLL.Slip_Sheet);
PARAMETER(NLL.Age_Code);
PARAMETER(NLL.Reefer_Temperature);
PARAMETER(NLL.Load_Type);
PARAMETER(NLL.Attach_to_Invoice_Number);
PARAMETER(NLL.Load_Plan_Order);
PARAMETER(NLL.Print_Pick_Slip);
PARAMETER(NLL.Resell_Reference_Number);
PARAMETER(NLL.Special_Comment_1);
PARAMETER(NLL.Special_Comment_2);
PARAMETER(NLL.Affect_Auto_Accruals);
PARAMETER(NLL.Sales_Route_Code);
PARAMETER(NLL.Manager_Level_Code);
PARAMETER(NLL.VP_Level_Code);
PARAMETER(NLL.Attach_to_Order_Number);
PARAMETER(NLL.Reason_for_Price_Audit);
PARAMETER(NLL.Invoice_Number);
PARAMETER(NLL.Invoice_Suffix);
PARAMETER(NLL.Invoice_Date);
PARAMETER(NLL.Event_Code);
PARAMETER(NLL.Trans_Contol_AS400_Plant);
PARAMETER(NLL.Modified_Flag);
PARAMETER(NLL.A_R_order_Value_Total);
PARAMETER(NLL.Billing_Activity_Type);
PARAMETER(NLL.Block_Order_Flag);
PARAMETER(NLL.Order_Certification_Flag);
PARAMETER(NLL.Invoice_Order_Value_Tot);
PARAMETER(NLL.Process_Sts_for_3C);
PARAMETER(NLL.Order_Conf_Fax_Sts);
PARAMETER(NLL.Manifest_Fax_Sts);
PARAMETER(NLL.Invoice_Fax_Sts);
PARAMETER(NLL.Transfer_in_Storage_Ind);
PARAMETER(NLL.Email_Cust_On_Order_Ship);
PARAMETER(NLL.Order_Emailed);
PARAMETER(NLL.Export_Docs_Go_w_Driver);
PARAMETER(NLL.Shipping_Temp_Code_C_F);
PARAMETER(NLL.Broker_Order_Status);
PARAMETER(NLL.Air_Freight_Order);
PARAMETER(NLL.Order_Requires_Review);
PARAMETER(NLL.OH_Load_Plan_Ready);
PARAMETER(NLL.Export_USDA_Approved);
PARAMETER(NLL.HPB_Ship_to_Warehouse);
PARAMETER(NLL.OH_TF_Exempt_Code);
PARAMETER(NLL.OH_Appt_Confirmation_Dt);
PARAMETER(NLL.JPN_Invoice_Issuance_Date);
PARAMETER(NLL.Load_Actual_Shipped_Date);
PARAMETER(NLL.Load_BOL_Complete_Date);
PARAMETER(NLL.Load_Truck_Departure_Date);
PARAMETER(NLL.Maximum_Gross_Weight);
PARAMETER(NLL.Time_of_Original_Entry);
PARAMETER(NLL.OH_Appt_Confirmation_Tm);
PARAMETER(NLL.Load_BOL_Complete_Time);
PARAMETER(NLL.Load_Truck_Departure_Time);
PARAMETER(NLL.Act_Frt_Reference_Amount);
PARAMETER(NLL.Act_Non_Ref_Frt_Amount);
PARAMETER(NLL.OH_Fuel_Surcharge_Amount);
PARAMETER(NLL.OH_Total_Non_Ref_Frt_Amt);
PARAMETER(NLL.OH_Total_Ref_Frt_Amt);
PARAMETER(NLL.Claim_Number);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(NLL.Job_Time);
PARAMETER(NLL.User_Id);
PARAMETER(NLL.Job_Name);
PARAMETER(NLL.Job_Date);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Order Type - Sales is Transfer Order
IF LCL.Order_Type_Sales = 'TR';

EXECUTE FUNCTION(Rtv Default Warehouse  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1323141;
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(LCL.Ship_To_Warehouse);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv WHS Interchg All  RT) TYPE(RTVOBJ) FILE(PNG0REP)           AC2138766;
PARAMETER(LCL.Ship_To_Warehouse);
PARAMETER('WHSTFR');
PARAMETER(NLL.Class_Code);
PARAMETER(LCL.EDI_Trading_Partner_No);
PARAMETER(LCL.EDI_Whs_Duns_Number);
PARAMETER(LCL.Record_Status);
PARAMETER(NLL.Create_Date);
PARAMETER(NLL.Create_Time);
PARAMETER(NLL.Create_User);
PARAMETER(NLL.Create_Program);
PARAMETER(NLL.Change_Date);
PARAMETER(NLL.Change_Time);
PARAMETER(NLL.Change_User);
PARAMETER(NLL.Change_Program);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Record Status is Active
IF LCL.Record_Status = 'A';

EXECUTE FUNCTION(Rtv Warehouse wo/Quit RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1788808;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Warehouse_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Warehouse Code = DB1.Warehouse Code
 PAR.Warehouse_Code = DB1.Warehouse_Code;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Live w/Carlisle   RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1747217;
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.WHS_Live_with_Carlisle);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Validation - Hard Stop. 4/29/21 dont err if CB and pallet=0
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Pallet & Serial # RT) TYPE(RTVOBJ) FILE(OMFNCPP)           AC2143885;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.OHE_EDI_Error_Reasons);
{
 //?USER: Initialize routine

 // PAR.OHE EDI Error Reasons = CND.Blank
 PAR.OHE_EDI_Error_Reasons = *BLANK;

 // LCL.Order Sequence Number USR = CON.*ZERO
 LCL.Order_Sequence_Number_USR = *ZERO;

 //?USER: Process Data record

 //?RMC 4/29/21 dont error if order is a CB order and PAllet = 0,
 //? Plug in 999999999 as the pallet number later
 CASE;

 // IF DB1.Order Sequence Number NE LCL.Order Sequence Number USR
 IF DB1.Order_Sequence_Number <> LCL.Order_Sequence_Number_USR;

 EXECUTE FUNCTION(RTV UM Ordered        RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2122584;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.U_M_Ordered);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.Order Sequence Number USR = DB1.Order Sequence Number
 LCL.Order_Sequence_Number_USR = DB1.Order_Sequence_Number;

 ENDIF;

 CASE;

 // IF DB1.Case Quantity is GT *ZERO
 IF DB1.Case_Quantity > *ZERO;

 CASE;

 // IF DB1.PT Serial Number is Not Entered
 IF DB1.PT_Serial_Number = *ZERO;

 // PAR.OHE EDI Error Reasons = CND.Invalid Serial
 PAR.OHE_EDI_Error_Reasons = 'SERLN';

 QUIT;

 // IF DB1.Manifest Pallet Number is Not Entered
 IF DB1.Manifest_Pallet_Number = *ZERO;

 CASE;

 // IF LCL.U/M - Ordered is Combos
 IF LCL.U_M_Ordered = 'CB';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.OHE EDI Error Reasons = CND.Invalid Pallet
 PAR.OHE_EDI_Error_Reasons = 'PALLT';

 QUIT;

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Error, Update Order Header Extension.
CASE;

// IF NOT PAR.OHE EDI Error Reasons is Blank
IF ! PAR.OHE_EDI_Error_Reasons = *BLANK;

//?Only error if live with Carlisle is Yes         3.22.18
CASE;

// IF LCL.WHS Live w/Carlisle is Yes
IF LCL.WHS_Live_with_Carlisle = 'Y';

EXECUTE FUNCTION(Upd OHE EDI 943 Error  RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2143886;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.OHE_EDI_Error_Reasons);
PARAMETER(LCL.Load_ID);
PARAMETER(LCL.Actual_Shipped_Date);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(CRT OHE EDI 943 Error  CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC2143887;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER(PAR.OHE_EDI_Error_Reasons);
 {
  //?USER: Processing before Data update

  // DB1.Record Status = CND.Active
  DB1.Record_Status = 'A';

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

 }

 //?USER: Process Data record

 EXECUTE FUNCTION(CHG OHE EDI 943 Error  CH) TYPE(CHGOBJ) FILE(PMAMREP)          AC2143888;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.OHE_EDI_Error_Reasons);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

 }

}


//?Format Email Subject & Message and Send Email.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Company Number Alpha = CVTVAR(PAR.Company Number)
LCL.Company_Number_Alpha = CVTVAR(PAR.Company_Number);

// LCL.Load ID Alpha USR = CVTVAR(LCL.Load ID)
LCL.Load_ID_Alpha_USR = CVTVAR(LCL.Load_ID);

// LCL.Order Number Alpha = CVTVAR(PAR.Order Number)
LCL.Order_Number_Alpha = CVTVAR(PAR.Order_Number);

// LCL.Email Subject USR = CONCAT(CON.EDI 943 Error - Co/Load/O,CON.rder:,CON.*ZERO)
LCL.Email_Subject_USR = 'EDI 943 Error - Co/Load/O' + 'rder:' (0);

// LCL.Email Subject USR = CONCAT(LCL.Email Subject USR,LCL.Company Number Alpha,CON.1)
LCL.Email_Subject_USR = LCL.Email_Subject_USR + LCL.Company_Number_Alpha (1);

// LCL.Email Subject USR = CONCAT(LCL.Email Subject USR,CON./,CON.*ZERO)
LCL.Email_Subject_USR = LCL.Email_Subject_USR + '/' (0);

// LCL.Email Subject USR = CONCAT(LCL.Email Subject USR,LCL.Load ID Alpha USR,CON.*ZERO)
LCL.Email_Subject_USR = LCL.Email_Subject_USR + LCL.Load_ID_Alpha_USR (0);

// LCL.Email Subject USR = CONCAT(LCL.Email Subject USR,CON./,CON.*ZERO)
LCL.Email_Subject_USR = LCL.Email_Subject_USR + '/' (0);

// LCL.Email Subject USR = CONCAT(LCL.Email Subject USR,LCL.Order Number Alpha,CON.*ZERO)
LCL.Email_Subject_USR = LCL.Email_Subject_USR + LCL.Order_Number_Alpha (0);

// LCL.Email Message USR = CONCAT(CON.EDI 943 Error - Pallet/Se,CON.rial # cannot be 0.,CON.*ZERO)
LCL.Email_Message_USR = 'EDI 943 Error - Pallet/Se' + 'rial # cannot be 0.' (0);

EXECUTE FUNCTION(RTV Whse/Non Cancelled RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428700;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(1);
PARAMETER(1);
PARAMETER(LCL.Ship_From_Warehouse);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?C2748:  Changed RTV Warehouse Code RT to exclude Cancelled lines.
 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF *OTHERWISE
 IF *OTHERWISE;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


// LCL.Email Message USR = CONCAT(LCL.Email Message USR,CON.Ship from Warehouse:,CON.1)
LCL.Email_Message_USR = LCL.Email_Message_USR + 'Ship from Warehouse:' (1);

// LCL.Email Message USR = CONCAT(LCL.Email Message USR,LCL.Ship From Warehouse,CON.1)
LCL.Email_Message_USR = LCL.Email_Message_USR + LCL.Ship_From_Warehouse (1);

//?E14466 DN 02/08/19-Added 'Resolution' Context to Email Message.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Force New Line.
// LCL.Email Message USR = CONCAT(LCL.Email Message USR,CON.&N,CON.1)
LCL.Email_Message_USR = LCL.Email_Message_USR + '&N' (1);

// LCL.Email Message USR = CONCAT(LCL.Email Message USR,CON.Resolution: Unship the,CON.1)
LCL.Email_Message_USR = LCL.Email_Message_USR + 'Resolution: Unship the' (1);

// LCL.Email Message USR = CONCAT(LCL.Email Message USR,CON.Order, scan all boxes to,CON.1)
LCL.Email_Message_USR = LCL.Email_Message_USR + 'Order, scan all boxes to' (1);

// LCL.Email Message USR = CONCAT(LCL.Email Message USR,CON.a pallet, & reship. The,CON.1)
LCL.Email_Message_USR = LCL.Email_Message_USR + 'a pallet, & reship. The' (1);

// LCL.Email Message USR = CONCAT(LCL.Email Message USR,CON.3PL cannot accept EDI 943,CON.1)
LCL.Email_Message_USR = LCL.Email_Message_USR + '3PL cannot accept EDI 943' (1);

// LCL.Email Message USR = CONCAT(LCL.Email Message USR,CON.without pallet numbers.,CON.1)
LCL.Email_Message_USR = LCL.Email_Message_USR + 'without pallet numbers.' (1);

ENDIF;

EXECUTE FUNCTION(Exc ESNDMAIL Generic  IF) TYPE(EXCINTFUN)                      AC2144041;
PARAMETER(PAR.Company_Number);
PARAMETER('EDI943ERR');
PARAMETER(LCL.Email_Subject_USR);
PARAMETER(LCL.Email_Message_USR);
{
 //?Execute internal function

 //?Execute ESNDMAIL to Send Email Message.
 EXECUTE FUNCTION(RTV Alpha Value 2     RT) TYPE(RTVOBJ) FILE(PDKMREP)           AC2134765;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Value_Code);
 PARAMETER(LCL.Email_Address);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Email Address is Entered
 IF LCL.Email_Address <> *BLANK;

 // Call program Exc ESNDMAIL Generic  CL.
 CALL PROGRAM(Exc ESNDMAIL Generic  CL) ('PUE8UPC');
 PARAMETER(LCL.Email_Address);
 PARAMETER(PAR.Email_Subject_USR);
 PARAMETER(PAR.Email_Message_USR);

 ENDIF;

}


ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?If not live with Carlisle, then set OHE 943 sts to "T" for transit
CASE;

// IF LCL.WHS Live w/Carlisle is *No/Blank
IF LCL.WHS_Live_with_Carlisle = *BLANK/'N';

EXECUTE FUNCTION(Upd OHE EDI 943 ActOnl RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2171349;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Load_ID);
PARAMETER('T');
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(CRT OHE EDI 943 Action CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC2139336;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.OHE_EDI_943_Action);
 {
  //?USER: Processing before Data update

  // DB1.Record Status = CND.Active
  DB1.Record_Status = 'A';

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

 }

 //?USER: Process Data record

 EXECUTE FUNCTION(CHG EDI 943 Sts        CH) TYPE(CHGOBJ) FILE(PMAMREP)          AC2171351;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*BLANK);
 PARAMETER(PAR.OHE_EDI_943_Action);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

 }

}


ENDIF;

//?If Live with Carlisle and no Errors create 943 trans set
CASE;

// IF LCL.WHS Live w/Carlisle is Yes
IF LCL.WHS_Live_with_Carlisle = 'Y';

//?No Error, Update EDI WHS Stock Txfr File Sets: ECP060/61/63/64.
CASE;

// IF PAR.OHE EDI Error Reasons is Blank
IF PAR.OHE_EDI_Error_Reasons = *BLANK;

//?Format/Populate Data.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Format Actual Shipped Date.
// LCL.Actual Shipped Date USR = LCL.Actual Shipped Date
LCL.Actual_Shipped_Date_USR = LCL.Actual_Shipped_Date;

//?Format Requested Delivery Date.
// LCL.Requested Delivery DteUSR = LCL.Requested Delivery Date
LCL.Requested_Delivery_DteUSR = LCL.Requested_Delivery_Date;

//?Format Carrier Code & Shipping Method.
// LCL.W2702 SCAC Carrier Code = CON.*BLANK
LCL.W2702_SCAC_Carrier_Code = *BLANK;

// LCL.W2703 Shipment Method = CON.*BLANK
LCL.W2704_Shipment_Method = *BLANK;

EXECUTE FUNCTION(RTV Carr/ShippingMeth RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC2138787;
PARAMETER(LCL.Load_ID);
PARAMETER(LCL.Carrier_Code);
PARAMETER(LCL.Shipping_Method);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Record Found, Get Carrier Name.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(LCL.Carrier_Code);
PARAMETER(LCL.Name);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Substring 1st 4 Bytes.
CASE;

// IF LCL.Name is Not Blank
IF LCL.Name <> *BLANK;

// LCL.W2702 SCAC Carrier Code = SUBSTRING(LCL.Name,CON.1,CON.4)
LCL.W2702_SCAC_Carrier_Code = SUBSTRING(LCL.Name:1:4);

ENDIF;

// LCL.W2703 Shipment Method = LCL.Shipping Method
LCL.W2704_Shipment_Method = LCL.Shipping_Method;

//?Translate Shipping Method: Prepaid Truck PT->PP; Collect Truck CT->CC.
CASE;

// IF LCL.Shipping Method is Prepaid Truck
IF LCL.Shipping_Method = 'PT';

// LCL.W2703 Shipment Method = CON.PP
LCL.W2704_Shipment_Method = 'PP';

//?Translate Shipping Method: Prepaid Truck PT->PP; Collect Truck CT->CC.
// IF LCL.Shipping Method is Collect Truck
IF LCL.Shipping_Method = 'CT';

// LCL.W2703 Shipment Method = CON.CC
LCL.W2704_Shipment_Method = 'CC';

ENDIF;

ENDIF;

//?Get Ship From Whse & Sum Qty/Wgt Shipped Total.
EXECUTE FUNCTION(Rtv Sum Qty/Wgt ShippedRT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2138945;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Ship_From_Warehouse);
PARAMETER(LCL.Total_Quantity_Ship_USR);
PARAMETER(LCL.Total_Weight_Ship_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Total Quantity Ship  USR = PAR.Total Quantity Ship  USR + DB1.Quantity Shipped Total
 PAR.Total_Quantity_Ship_USR = PAR.Total_Quantity_Ship_USR + DB1.Quantity_Shipped_Total;

 // PAR.Total Weight Ship    USR = PAR.Total Weight Ship    USR + DB1.Weight Shipped Total
 PAR.Total_Weight_Ship_USR = PAR.Total_Weight_Ship_USR + DB1.Weight_Shipped_Total;

 // PAR.Warehouse Code = DB1.Warehouse Code
 PAR.Warehouse_Code = DB1.Warehouse_Code;

}


EXECUTE FUNCTION(Rtv Chk Ord Sent Prev RT) TYPE(RTVOBJ) FILE(ECP060)            AC2158143;
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Surrogate_Number_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Set Action Code Based on 943 already sent  8.21.18
CASE;

// IF LCL.Surrogate Number USR is ENTERED
IF LCL.Surrogate_Number_USR <> *ZERO;

// LCL.W0612 Action Code = CND.Change
LCL.W0612_Action_Code = '2';

//?Set Action Code Based on 943 already sent  8.21.18
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.W0612 Action Code = CND.Add
LCL.W0612_Action_Code = '1';

ENDIF;

ENDIF;

EXECUTE FUNCTION(Crt EDI WHS Stock Txfr IF) TYPE(EXCINTFUN)                     AC2138958;
PARAMETER(LCL.EDI_Trading_Partner_No);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Actual_Shipped_Date_USR);
PARAMETER(LCL.Load_ID);
PARAMETER(LCL.Customer_Purchase_Order_#);
PARAMETER(LCL.W0612_Action_Code);
PARAMETER(LCL.Total_Quantity_Ship_USR);
PARAMETER(LCL.Total_Weight_Ship_USR);
PARAMETER(LCL.Requested_Delivery_DteUSR);
PARAMETER(LCL.W2702_SCAC_Carrier_Code);
PARAMETER(LCL.Name);
PARAMETER(LCL.W2704_Shipment_Method);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Ship_From_Warehouse);
PARAMETER(LCL.Ship_To_Warehouse);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(PAR.USR_Unship_Flag);
PARAMETER(LCL.Load_ID);
PARAMETER(LCL.Actual_Shipped_Date);
PARAMETER(LCL.EDI_Whs_Duns_Number);
{
 //?Execute internal function

 //?Get Next Surrogate #.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.EDI SURROGATE NUMBER = CON.999999999
 PAR.EDI_SURROGATE_NUMBER = 999999999;

 EXECUTE FUNCTION(Rtv Next Surrogate #   RT) TYPE(RTVOBJ) FILE(ECP060)           AC2139228;
 PARAMETER(PAR.EDI_SURROGATE_NUMBER);
 {
  //?USER: Processing if Data record not found

  // PAR.EDI SURROGATE NUMBER = CON.100
  PAR.EDI_SURROGATE_NUMBER = 100;

  //?USER: Process Data record

  // PAR.EDI SURROGATE NUMBER = DB1.EDI SURROGATE NUMBER + CON.1
  PAR.EDI_SURROGATE_NUMBER = DB1.EDI_SURROGATE_NUMBER + 1;

  QUIT;

 }

 ENDIF;

 //?Create EDI WHS Stock Txfr   HDR  (ECP060) & Update Order Hdr Ext.
 EXECUTE FUNCTION(Crt WH Stk Xfr HDR/OHE CR) TYPE(CRTOBJ) FILE(ECP060)           AC2139327;
 PARAMETER(PAR.EDI_SURROGATE_NUMBER);
 PARAMETER(PAR.TRADE_PARTNER_CODE);
 PARAMETER('N');
 PARAMETER('F');
 PARAMETER(PAR.W0602_Depositor_Order_Nbr);
 PARAMETER(PAR.W0603_Shipment_Date);
 PARAMETER(PAR.W0604_Shipment_Num_BOL);
 PARAMETER(PAR.W0606_Customer_PO);
 PARAMETER(*BLANK);
 PARAMETER(PAR.W0612_Action_Code);
 PARAMETER(PAR.W0301_Quantity_Shipped);
 PARAMETER(PAR.W0302_Weight_Shipped);
 PARAMETER('LB');
 PARAMETER(02);
 PARAMETER(PAR.G6202_Req_Delivery_Date);
 PARAMETER('M');
 PARAMETER(PAR.W2702_SCAC_Carrier_Code);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(PAR.W2703_Carrier_Name);
 PARAMETER(PAR.W2704_Shipment_Method);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.USR_Unship_Flag);
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Actual_Shipped_Date);
 {
  //?USER: Processing after Data update

  EXECUTE FUNCTION(Upd OHE EDI 943 Action RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2139328;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.USR_Unship_Flag);
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Actual_Shipped_Date);
  {
   //?USER: Initialize routine

   CASE;

   // IF PAR.USR Unship Flag is yes
   IF PAR.USR_Unship_Flag = 'Y';

   // LCL.OHE EDI 943 Action = CND.Unshipped
   LCL.OHE_EDI_943_Action = 'U';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.OHE EDI 943 Action = CND.Sent
   LCL.OHE_EDI_943_Action = 'S';

   ENDIF;

   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(CRT OHE EDI 943 Action CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC2139336;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Load_ID);
   PARAMETER(LCL.OHE_EDI_943_Action);
   {
    //?USER: Processing before Data update

    // DB1.Record Status = CND.Active
    DB1.Record_Status = 'A';

    // DB1.Job Time = JOB.*Job time
    DB1.Job_Time = JOB.*Job_time;

    // DB1.Job Date = JOB.*Job date
    DB1.Job_Date = JOB.*Job_date;

    // DB1.Job Name = JOB.*PROGRAM
    DB1.Job_Name = JOB.*PROGRAM;

    // DB1.User Id = JOB.*USER
    DB1.User_Id = JOB.*USER;

   }

   //?USER: Process Data record

   //?S14028 DN 11/02/18-Ensure EDI Error Reasons is Cleared for Unshipped.
   EXECUTE FUNCTION(CHG EDI 943 Sts/Err    CH) TYPE(CHGOBJ) FILE(PMAMREP)          AC2160270;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(*BLANK);
   PARAMETER(LCL.OHE_EDI_943_Action);
   {
    //?USER: Processing before Data update

    // DB1.Job Time = JOB.*Job time
    DB1.Job_Time = JOB.*Job_time;

    // DB1.Job Date = JOB.*Job date
    DB1.Job_Date = JOB.*Job_date;

    // DB1.Job Name = JOB.*PROGRAM
    DB1.Job_Name = JOB.*PROGRAM;

    // DB1.User Id = JOB.*USER
    DB1.User_Id = JOB.*USER;

   }

  }

 }

 //?Create EDI WHS Stock Txfr   DTL  (ECP061).
 //?   and EDI WHS Stock Txfr   REF  (ECP064).
 EXECUTE FUNCTION(Crt WHS Stock Txfr DTL RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2138788;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.W0602_Depositor_Order_Nbr);
 PARAMETER(PAR.EDI_SURROGATE_NUMBER);
 {
  //?USER: Initialize routine

  // LCL.Create Record USR = CND.No
  LCL.Create_Record_USR = *BLANK;

  // PAR.LX01 Sequence Number = CON.*ZERO
  PAR.LX01_Sequence_Number = *ZERO;

  //?USER: Process Data record

  //?S13144 DN 06/05/18-Change to read by Co/Order/Item & Break by Item.
  //?Create EDI WHS Stock Txfr DTL/REF Records.
  CASE;

  // IF DB1.Quantity Shipped Total is Greater than zero
  IF DB1.Quantity_Shipped_Total > *ZERO;

  CASE;

  // IF DB1.Item Code NE PAR.Item Code
  IF DB1.Item_Code <> PAR.Item_Code;

  CASE;

  // IF LCL.Create Record USR is Yes
  IF LCL.Create_Record_USR = 'Y';

  //?   CRT EDI WHS Stock Txfr DTL (ECP061) and  REF  (ECP064).
  EXECUTE FUNCTION(Crt WHS Stck Txfr DTL/REF) TYPE(RTVOBJ) FILE(OMFNCPP)          AC2138917;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.EDI_SURROGATE_NUMBER);
  PARAMETER(PAR.LX01_Sequence_Number);
  PARAMETER(LCL.W0402_Unit_of_Measure);
  PARAMETER('VN');
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.Order_Desc_Line_One);
  {
   //?USER: Initialize routine

   // PAR.EDI Ref Sequence Nbr = CON.*ZERO
   PAR.EDI_Ref_Sequence_Nbr = *ZERO;

   //?we want it to break even if -0-
   // PAR.Manifest Pallet Number = CON.999
   PAR.Manifest_Pallet_Number = 999;

   //?USER: Process Data record

   CASE;

   // IF DB1.Case Quantity is GT *ZERO
   IF DB1.Case_Quantity > *ZERO;

   //?S13144 DN 06/05/18-Break by Item/Pallet to Support Same Item/Pallet.
   //?RMC default to 99999999 if it gets to here without a pallet. means CB ordr
   CASE;

   // IF DB1.Manifest Pallet Number is Entered
   IF DB1.Manifest_Pallet_Number <> *ZERO;

   // LCL.Manifest Pallet Number = DB1.Manifest Pallet Number
   LCL.Manifest_Pallet_Number = DB1.Manifest_Pallet_Number;

   //?RMC default to 99999999 if it gets to here without a pallet. means CB ordr
   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Manifest Pallet Number = CON.999999999
   LCL.Manifest_Pallet_Number = 999999999;

   ENDIF;

   //?RMC 4/29/21 use lcl.pallet number below
   //?Create EDI WHS Stock Txfr   DTL at Item/Pallet Break with Box Total.
   CASE;

   // IF LCL.Manifest Pallet Number NE PAR.Manifest Pallet Number
   IF LCL.Manifest_Pallet_Number <> PAR.Manifest_Pallet_Number;

   CASE;

   // IF PAR.Quantity Shipped Total is Greater than zero
   IF PAR.Quantity_Shipped_Total > *ZERO;

   // LCL.Production Date USR D8# = PAR.Production Date
   LCL.Production_Date_USR_D8# = PAR.Production_Date;

   // PAR.N904 Production Date = LCL.Production Date USR D8#
   PAR.N904_Production_Date = LCL.Production_Date_USR_D8#;

   EXECUTE FUNCTION(Crt WHS Stock Txfr DTL CR) TYPE(CRTOBJ) FILE(ECP061)           AC2138751;
   PARAMETER(PAR.EDI_SURROGATE_NUMBER);
   PARAMETER(PAR.LX01_Sequence_Number);
   PARAMETER(PAR.Quantity_Shipped_Total);
   PARAMETER(PAR.W0402_Unit_of_Measure);
   PARAMETER(*BLANK);
   PARAMETER('VN');
   PARAMETER(PAR.Item_Code);
   PARAMETER('SN');
   PARAMETER(PAR.Manifest_Pallet_Number);
   PARAMETER(PAR.Weight_Shipped_Total);
   PARAMETER('G');
   PARAMETER('L');
   PARAMETER(PAR.G6901_Item_Description);
   PARAMETER(PAR.N904_Production_Date);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Manifest_Pallet_Number);
   {
    //?USER: Processing before Data update

    //?T11041 DN 04/19/18-Added Calculated Check Digit Logic to Set Pallet #.
    EXECUTE FUNCTION(Get Calc Check Digit  IF) TYPE(EXCINTFUN)                      AC2149151;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Manifest_Pallet_Number);
    PARAMETER(DB1.W0407_Pallet_Number);
    {
     //?Execute internal function

     // PAR.W0407 Pallet Number = CON.*ZERO
     PAR.W0407_Pallet_Number = *ZERO;

     //?SUM Up Odd & Even # Positions for Federal Tax ID.
     CASE;

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Substring Out Each Digit From Federal Tax ID.
     CASE;

     // IF *OTHERWISE
     IF *OTHERWISE;

     EXECUTE FUNCTION(RTV Federal Tax ID    RT) TYPE(RTVOBJ) FILE(CAABREP)           AC2149185;
     PARAMETER(PAR.Company_Number);
     PARAMETER(LCL.Federal_Tax_Id);
     {
      //?USER: Initialize routine

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     // LCL.Text 7 Alpha Usr = SUBSTRING(LCL.Federal Tax Id.,CON.1,CON.7)
     LCL.Text_7_Alpha_Usr = SUBSTRING(LCL.Federal_Tax_Id:1:7);

     // LCL.Federal Tax ID 8 Byte = CONCAT(CON.1,LCL.Text 7 Alpha Usr,CON.*ZERO)
     LCL.Federal_Tax_ID_8_Byte = '1' + LCL.Text_7_Alpha_Usr (*ZERO);

     //?Position 1 will always be 1.
     // LCL.Position 1 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.1,CON.1)
     LCL.Position_1_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:1:1);

     // LCL.Position 2 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.2,CON.1)
     LCL.Position_2_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:2:1);

     // LCL.Position 3 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.3,CON.1)
     LCL.Position_3_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:3:1);

     // LCL.Position 4 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.4,CON.1)
     LCL.Position_4_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:4:1);

     // LCL.Position 5 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.5,CON.1)
     LCL.Position_5_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:5:1);

     // LCL.Position 6 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.6,CON.1)
     LCL.Position_6_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:6:1);

     // LCL.Position 7 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.7,CON.1)
     LCL.Position_7_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:7:1);

     // LCL.Position 8 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.8,CON.1)
     LCL.Position_8_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:8:1);

     // LCL.Federal Tax ID-Pos1 Nbr = CVTVAR(LCL.Position 1 Text USR)
     LCL.Federal_Tax_ID_Pos1_Nbr = CVTVAR(LCL.Position_1_Text_USR);

     // LCL.Federal Tax ID-Pos2 Nbr = CVTVAR(LCL.Position 2 Text USR)
     LCL.Federal_Tax_ID_Pos2_Nbr = CVTVAR(LCL.Position_2_Text_USR);

     // LCL.Federal Tax ID-Pos3 Nbr = CVTVAR(LCL.Position 3 Text USR)
     LCL.Federal_Tax_ID_Pos3_Nbr = CVTVAR(LCL.Position_3_Text_USR);

     // LCL.Federal Tax ID-Pos4 Nbr = CVTVAR(LCL.Position 4 Text USR)
     LCL.Federal_Tax_ID_Pos4_Nbr = CVTVAR(LCL.Position_4_Text_USR);

     // LCL.Federal Tax ID-Pos5 Nbr = CVTVAR(LCL.Position 5 Text USR)
     LCL.Federal_Tax_ID_Pos5_Nbr = CVTVAR(LCL.Position_5_Text_USR);

     // LCL.Federal Tax ID-Pos6 Nbr = CVTVAR(LCL.Position 6 Text USR)
     LCL.Federal_Tax_ID_Pos6_Nbr = CVTVAR(LCL.Position_6_Text_USR);

     // LCL.Federal Tax ID-Pos7 Nbr = CVTVAR(LCL.Position 7 Text USR)
     LCL.Federal_Tax_ID_Pos7_Nbr = CVTVAR(LCL.Position_7_Text_USR);

     // LCL.Federal Tax ID-Pos8 Nbr = CVTVAR(LCL.Position 8 Text USR)
     LCL.Federal_Tax_ID_Pos8_Nbr = CVTVAR(LCL.Position_8_Text_USR);

     ENDIF;

     // SUM Val for Odd # Pos
     PAR.SUM_Val_for_Odd_#_Pos = ( ( LCL.Federal_Tax_ID_Pos1_Nbr
     + LCL.Federal_Tax_ID_Pos3_Nbr ) + LCL.Federal_Tax_ID_Pos5_Nbr )
     + LCL.Federal_Tax_ID_Pos7_Nbr;

     // SUM Val for Even # Pos
     PAR.SUM_Val_for_Even_#_Pos = ( ( LCL.Federal_Tax_ID_Pos2_Nbr
     + LCL.Federal_Tax_ID_Pos4_Nbr ) + LCL.Federal_Tax_ID_Pos6_Nbr )
     + LCL.Federal_Tax_ID_Pos8_Nbr;

     ENDIF;

     //?SUM Up Odd & Even # Positions for Pallet Number.
     CASE;

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Substring Out Each Digit From Pallet Number.
     CASE;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // LCL.Manifest Pallet# Txt = CVTVAR(PAR.Manifest Pallet Number)
     LCL.Manifest_Pallet#_Txt = CVTVAR(PAR.Manifest_Pallet_Number);

     // LCL.Position 1 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.1,CON.1)
     LCL.Position_1_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:1:1);

     // LCL.Position 2 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.2,CON.1)
     LCL.Position_2_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:2:1);

     // LCL.Position 3 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.3,CON.1)
     LCL.Position_3_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:3:1);

     // LCL.Position 4 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.4,CON.1)
     LCL.Position_4_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:4:1);

     // LCL.Position 5 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.5,CON.1)
     LCL.Position_5_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:5:1);

     // LCL.Position 6 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.6,CON.1)
     LCL.Position_6_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:6:1);

     // LCL.Position 7 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.7,CON.1)
     LCL.Position_7_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:7:1);

     // LCL.Position 8 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.8,CON.1)
     LCL.Position_8_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:8:1);

     // LCL.Position 9 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.9,CON.1)
     LCL.Position_9_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:9:1);

     // LCL.Manifest Pallet#-Pos1 Nbr = CVTVAR(LCL.Position 1 Text USR)
     LCL.Manifest_Pallet#_Pos1_Nbr = CVTVAR(LCL.Position_1_Text_USR);

     // LCL.Manifest Pallet#-Pos2 Nbr = CVTVAR(LCL.Position 2 Text USR)
     LCL.Manifest_Pallet#_Pos2_Nbr = CVTVAR(LCL.Position_2_Text_USR);

     // LCL.Manifest Pallet#-Pos3 Nbr = CVTVAR(LCL.Position 3 Text USR)
     LCL.Manifest_Pallet#_Pos3_Nbr = CVTVAR(LCL.Position_3_Text_USR);

     // LCL.Manifest Pallet#-Pos4 Nbr = CVTVAR(LCL.Position 4 Text USR)
     LCL.Manifest_Pallet#_Pos4_Nbr = CVTVAR(LCL.Position_4_Text_USR);

     // LCL.Manifest Pallet#-Pos5 Nbr = CVTVAR(LCL.Position 5 Text USR)
     LCL.Manifest_Pallet#_Pos5_Nbr = CVTVAR(LCL.Position_5_Text_USR);

     // LCL.Manifest Pallet#-Pos6 Nbr = CVTVAR(LCL.Position 6 Text USR)
     LCL.Manifest_Pallet#_Pos6_Nbr = CVTVAR(LCL.Position_6_Text_USR);

     // LCL.Manifest Pallet#-Pos7 Nbr = CVTVAR(LCL.Position 7 Text USR)
     LCL.Manifest_Pallet#_Pos7_Nbr = CVTVAR(LCL.Position_7_Text_USR);

     // LCL.Manifest Pallet#-Pos8 Nbr = CVTVAR(LCL.Position 8 Text USR)
     LCL.Manifest_Pallet#_Pos8_Nbr = CVTVAR(LCL.Position_8_Text_USR);

     // LCL.Manifest Pallet#-Pos9 Nbr = CVTVAR(LCL.Position 9 Text USR)
     LCL.Manifest_Pallet#_Pos9_Nbr = CVTVAR(LCL.Position_9_Text_USR);

     ENDIF;

     // SUM Val for Odd # Pos
     PAR.SUM_Val_for_Odd_#_Pos = ( ( ( ( PAR.SUM_Val_for_Odd_#_Pos
     + LCL.Manifest_Pallet#_Pos1_Nbr ) + LCL.Manifest_Pallet#_Pos3_Nbr )
     + LCL.Manifest_Pallet#_Pos5_Nbr ) + LCL.Manifest_Pallet#_Pos7_Nbr )
     + LCL.Manifest_Pallet#_Pos9_Nbr;

     // SUM Val for Even # Pos
     PAR.SUM_Val_for_Even_#_Pos = ( ( ( PAR.SUM_Val_for_Even_#_Pos
     + LCL.Manifest_Pallet#_Pos2_Nbr ) + LCL.Manifest_Pallet#_Pos4_Nbr )
     + LCL.Manifest_Pallet#_Pos6_Nbr ) + LCL.Manifest_Pallet#_Pos8_Nbr;

     ENDIF;

     //?Calculated Check Digit Number.
     CASE;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // Calculated Value
     LCL.Calc_Value_USR = ( PAR.SUM_Val_for_Odd_#_Pos * 3 ) + PAR.SUM_Val_for_Even_#_Pos;

     // LCL.Calc Value Last Digit USR = LCL.Calc Value USR
     LCL.Calc_Value_Last_Digit_USR = LCL.Calc_Value_USR;

     // LCL.Calc Check Digit# USR = CON.10 - LCL.Calc Value Last Digit USR
     LCL.Calc_Check_Digit#_USR = 10 - LCL.Calc_Value_Last_Digit_USR;

     ENDIF;

     //?Format W0407 Pallet Number for Output.
     CASE;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // LCL.Calc Check Digit# Txt USR = CVTVAR(LCL.Calc Check Digit# USR)
     LCL.Calc_Check_Digit#_Txt_USR = CVTVAR(LCL.Calc_Check_Digit#_USR);

     // LCL.W0407 Pallet Number Txt U = CONCAT(CON.00,LCL.Federal Tax ID 8 Byte,CON.*ZERO)
     LCL.W0407_Pallet_Number_Txt_U = '00' + LCL.Federal_Tax_ID_8_Byte (*ZERO);

     // LCL.W0407 Pallet Number Txt U = CONCAT(LCL.W0407 Pallet Number Txt U,LCL.Manifest Pallet# Tx
     LCL.W0407_Pallet_Number_Txt_U = LCL.W0407_Pallet_Number_Txt_U + LCL.Manifest_Pallet#_Txt (*ZERO

     // LCL.W0407 Pallet Number Txt U = CONCAT(LCL.W0407 Pallet Number Txt U,LCL.Calc Check Digit# T
     LCL.W0407_Pallet_Number_Txt_U = LCL.W0407_Pallet_Number_Txt_U + LCL.Calc_Check_Digit#_Txt_USR (

     // PAR.W0407 Pallet Number = CVTVAR(LCL.W0407 Pallet Number Txt U)
     PAR.W0407_Pallet_Number = CVTVAR(LCL.W0407_Pallet_Number_Txt_U);

     ENDIF;

    }

   }

   ENDIF;

   //?LI = Line Item
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.N901 Reference ID Qlfr = CND.Line Item
   LCL.N901_Reference_ID_Qlfr = 'LI';

   // PAR.LX01 Sequence Number = PAR.LX01 Sequence Number + CON.1
   PAR.LX01_Sequence_Number = PAR.LX01_Sequence_Number + 1;

   // LCL.Order Sequence Nbr (S)USR = DB1.Order Sequence Number
   LCL.Order_Sequence_Nbr_SUSR = DB1.Order_Sequence_Number;

   // PAR.EDI Ref Sequence Nbr = CON.1
   PAR.EDI_Ref_Sequence_Nbr = 1;

   // LCL.N902 Reference ID Nbr = CVTVAR(LCL.Order Sequence Nbr (S)USR)
   LCL.N902_Reference_ID_Nbr = CVTVAR(LCL.Order_Sequence_Nbr_SUSR);

   EXECUTE FUNCTION(Crt WHS Stock Txfr REF CR) TYPE(CRTOBJ) FILE(ECP064)           AC2139132;
   PARAMETER(PAR.EDI_SURROGATE_NUMBER);
   PARAMETER(PAR.LX01_Sequence_Number);
   PARAMETER(PAR.EDI_Ref_Sequence_Nbr);
   PARAMETER(LCL.N901_Reference_ID_Qlfr);
   PARAMETER(LCL.N902_Reference_ID_Nbr);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   ENDIF;

   //?RMC 4/29/21 use lcl.pallet number below
   // PAR.Manifest Pallet Number = LCL.Manifest Pallet Number
   PAR.Manifest_Pallet_Number = LCL.Manifest_Pallet_Number;

   // PAR.Quantity Shipped Total = CON.*ZERO
   PAR.Quantity_Shipped_Total = *ZERO;

   // PAR.Weight Shipped Total = CON.*ZERO
   PAR.Weight_Shipped_Total = *ZERO;

   // PAR.Production Date = DB1.Production Date
   PAR.Production_Date = DB1.Production_Date;

   ENDIF;

   //?S13144 DN 06/05/18-Commented Out 'LI' & Move Above. Remove Seq/Qty Check.
   //?SE = Serial Number
   CASE;

   // IF DB1.Case Quantity is EQ *ZERO
   IF DB1.Case_Quantity = *ZERO;

   // AND DB1.PT Serial Number is Not Entered
   AND DB1.PT_Serial_Number = *ZERO;

   //?Both Case Qty & Serial# are 0, Do NOT create EDI WHS Stock Txfr   REF.
   //?SE = Serial Number
   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.N901 Reference ID Qlfr = CND.Serial Number
   LCL.N901_Reference_ID_Qlfr = 'SE';

   // LCL.N902 Reference ID Nbr = CON.0
   LCL.N902_Reference_ID_Nbr = 0;

   //?Convert Serial #.
   CASE;

   // IF DB1.PT Serial Number is Entered
   IF DB1.PT_Serial_Number > *ZERO;

   // LCL.PT Serial Number (S) USR = DB1.PT Serial Number
   LCL.PT_Serial_Number_S_USR = DB1.PT_Serial_Number;

   // LCL.N902 Reference ID Nbr = CVTVAR(LCL.PT Serial Number (S) USR)
   LCL.N902_Reference_ID_Nbr = CVTVAR(LCL.PT_Serial_Number_S_USR);

   ENDIF;

   // LCL.N903 Reference ID Wgt = DB1.Case Weight
   LCL.N903_Reference_ID_Wgt = DB1.Case_Weight;

   // PAR.EDI Ref Sequence Nbr = PAR.EDI Ref Sequence Nbr + CON.1
   PAR.EDI_Ref_Sequence_Nbr = PAR.EDI_Ref_Sequence_Nbr + 1;

   //?Set Production Date.
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.N904 Production Date = CON.*ZERO
   LCL.N904_Production_Date = *ZERO;

   CASE;

   // IF DB1.Production Date is entered
   IF DB1.Production_Date <> *ZERO;

   // AND DB1.Case Quantity is GT *ZERO
   AND DB1.Case_Quantity > *ZERO;

   // LCL.Production Date USR D8# = DB1.Production Date
   LCL.Production_Date_USR_D8# = DB1.Production_Date;

   // LCL.N904 Production Date = LCL.Production Date USR D8#
   LCL.N904_Production_Date = LCL.Production_Date_USR_D8#;

   ENDIF;

   ENDIF;

   EXECUTE FUNCTION(Crt WHS Stock Txfr REF CR) TYPE(CRTOBJ) FILE(ECP064)           AC2139132;
   PARAMETER(PAR.EDI_SURROGATE_NUMBER);
   PARAMETER(PAR.LX01_Sequence_Number);
   PARAMETER(PAR.EDI_Ref_Sequence_Nbr);
   PARAMETER(LCL.N901_Reference_ID_Qlfr);
   PARAMETER(LCL.N902_Reference_ID_Nbr);
   PARAMETER(LCL.N903_Reference_ID_Wgt);
   PARAMETER(LCL.N904_Production_Date);
   //?Accum for DTL record
   // PAR.Quantity Shipped Total = PAR.Quantity Shipped Total + DB1.Case Quantity
   PAR.Quantity_Shipped_Total = PAR.Quantity_Shipped_Total + DB1.Case_Quantity;

   // PAR.Weight Shipped Total = PAR.Weight Shipped Total + DB1.Case Weight
   PAR.Weight_Shipped_Total = PAR.Weight_Shipped_Total + DB1.Case_Weight;

   ENDIF;

   //?Save oldest production date 6.22.18 RMC
   CASE;

   // IF DB1.Production Date is entered
   IF ( DB1.Production_Date <> *ZERO;

   // AND DB1.Production Date LT PAR.Production Date
   AND DB1.Production_Date < PAR.Production_Date );

   // OR PAR.Production Date is not entered
   OR ( PAR.Production_Date = *ZERO;

   // AND DB1.Production Date is entered
   AND DB1.Production_Date <> *ZERO );

   // PAR.Production Date = DB1.Production Date
   PAR.Production_Date = DB1.Production_Date;

   ENDIF;

   ENDIF;

   //?USER: Exit processing

   //?LAST RCD: Crt EDI WHS Stock Txfr   DTL
   CASE;

   // IF PAR.Quantity Shipped Total is Greater than zero
   IF PAR.Quantity_Shipped_Total > *ZERO;

   // LCL.Production Date USR D8# = PAR.Production Date
   LCL.Production_Date_USR_D8# = PAR.Production_Date;

   // PAR.N904 Production Date = LCL.Production Date USR D8#
   PAR.N904_Production_Date = LCL.Production_Date_USR_D8#;

   EXECUTE FUNCTION(Crt WHS Stock Txfr DTL CR) TYPE(CRTOBJ) FILE(ECP061)           AC2138751;
   PARAMETER(PAR.EDI_SURROGATE_NUMBER);
   PARAMETER(PAR.LX01_Sequence_Number);
   PARAMETER(PAR.Quantity_Shipped_Total);
   PARAMETER(PAR.W0402_Unit_of_Measure);
   PARAMETER(*BLANK);
   PARAMETER('VN');
   PARAMETER(PAR.Item_Code);
   PARAMETER('SN');
   PARAMETER(PAR.Manifest_Pallet_Number);
   PARAMETER(PAR.Weight_Shipped_Total);
   PARAMETER('G');
   PARAMETER('L');
   PARAMETER(PAR.G6901_Item_Description);
   PARAMETER(PAR.N904_Production_Date);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Manifest_Pallet_Number);
   {
    //?USER: Processing before Data update

    //?T11041 DN 04/19/18-Added Calculated Check Digit Logic to Set Pallet #.
    EXECUTE FUNCTION(Get Calc Check Digit  IF) TYPE(EXCINTFUN)                      AC2149151;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Manifest_Pallet_Number);
    PARAMETER(DB1.W0407_Pallet_Number);
    {
     //?Execute internal function

     // PAR.W0407 Pallet Number = CON.*ZERO
     PAR.W0407_Pallet_Number = *ZERO;

     //?SUM Up Odd & Even # Positions for Federal Tax ID.
     CASE;

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Substring Out Each Digit From Federal Tax ID.
     CASE;

     // IF *OTHERWISE
     IF *OTHERWISE;

     EXECUTE FUNCTION(RTV Federal Tax ID    RT) TYPE(RTVOBJ) FILE(CAABREP)           AC2149185;
     PARAMETER(PAR.Company_Number);
     PARAMETER(LCL.Federal_Tax_Id);
     {
      //?USER: Initialize routine

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     // LCL.Text 7 Alpha Usr = SUBSTRING(LCL.Federal Tax Id.,CON.1,CON.7)
     LCL.Text_7_Alpha_Usr = SUBSTRING(LCL.Federal_Tax_Id:1:7);

     // LCL.Federal Tax ID 8 Byte = CONCAT(CON.1,LCL.Text 7 Alpha Usr,CON.*ZERO)
     LCL.Federal_Tax_ID_8_Byte = '1' + LCL.Text_7_Alpha_Usr (*ZERO);

     //?Position 1 will always be 1.
     // LCL.Position 1 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.1,CON.1)
     LCL.Position_1_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:1:1);

     // LCL.Position 2 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.2,CON.1)
     LCL.Position_2_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:2:1);

     // LCL.Position 3 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.3,CON.1)
     LCL.Position_3_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:3:1);

     // LCL.Position 4 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.4,CON.1)
     LCL.Position_4_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:4:1);

     // LCL.Position 5 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.5,CON.1)
     LCL.Position_5_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:5:1);

     // LCL.Position 6 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.6,CON.1)
     LCL.Position_6_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:6:1);

     // LCL.Position 7 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.7,CON.1)
     LCL.Position_7_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:7:1);

     // LCL.Position 8 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.8,CON.1)
     LCL.Position_8_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:8:1);

     // LCL.Federal Tax ID-Pos1 Nbr = CVTVAR(LCL.Position 1 Text USR)
     LCL.Federal_Tax_ID_Pos1_Nbr = CVTVAR(LCL.Position_1_Text_USR);

     // LCL.Federal Tax ID-Pos2 Nbr = CVTVAR(LCL.Position 2 Text USR)
     LCL.Federal_Tax_ID_Pos2_Nbr = CVTVAR(LCL.Position_2_Text_USR);

     // LCL.Federal Tax ID-Pos3 Nbr = CVTVAR(LCL.Position 3 Text USR)
     LCL.Federal_Tax_ID_Pos3_Nbr = CVTVAR(LCL.Position_3_Text_USR);

     // LCL.Federal Tax ID-Pos4 Nbr = CVTVAR(LCL.Position 4 Text USR)
     LCL.Federal_Tax_ID_Pos4_Nbr = CVTVAR(LCL.Position_4_Text_USR);

     // LCL.Federal Tax ID-Pos5 Nbr = CVTVAR(LCL.Position 5 Text USR)
     LCL.Federal_Tax_ID_Pos5_Nbr = CVTVAR(LCL.Position_5_Text_USR);

     // LCL.Federal Tax ID-Pos6 Nbr = CVTVAR(LCL.Position 6 Text USR)
     LCL.Federal_Tax_ID_Pos6_Nbr = CVTVAR(LCL.Position_6_Text_USR);

     // LCL.Federal Tax ID-Pos7 Nbr = CVTVAR(LCL.Position 7 Text USR)
     LCL.Federal_Tax_ID_Pos7_Nbr = CVTVAR(LCL.Position_7_Text_USR);

     // LCL.Federal Tax ID-Pos8 Nbr = CVTVAR(LCL.Position 8 Text USR)
     LCL.Federal_Tax_ID_Pos8_Nbr = CVTVAR(LCL.Position_8_Text_USR);

     ENDIF;

     // SUM Val for Odd # Pos
     PAR.SUM_Val_for_Odd_#_Pos = ( ( LCL.Federal_Tax_ID_Pos1_Nbr
     + LCL.Federal_Tax_ID_Pos3_Nbr ) + LCL.Federal_Tax_ID_Pos5_Nbr )
     + LCL.Federal_Tax_ID_Pos7_Nbr;

     // SUM Val for Even # Pos
     PAR.SUM_Val_for_Even_#_Pos = ( ( LCL.Federal_Tax_ID_Pos2_Nbr
     + LCL.Federal_Tax_ID_Pos4_Nbr ) + LCL.Federal_Tax_ID_Pos6_Nbr )
     + LCL.Federal_Tax_ID_Pos8_Nbr;

     ENDIF;

     //?SUM Up Odd & Even # Positions for Pallet Number.
     CASE;

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Substring Out Each Digit From Pallet Number.
     CASE;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // LCL.Manifest Pallet# Txt = CVTVAR(PAR.Manifest Pallet Number)
     LCL.Manifest_Pallet#_Txt = CVTVAR(PAR.Manifest_Pallet_Number);

     // LCL.Position 1 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.1,CON.1)
     LCL.Position_1_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:1:1);

     // LCL.Position 2 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.2,CON.1)
     LCL.Position_2_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:2:1);

     // LCL.Position 3 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.3,CON.1)
     LCL.Position_3_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:3:1);

     // LCL.Position 4 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.4,CON.1)
     LCL.Position_4_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:4:1);

     // LCL.Position 5 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.5,CON.1)
     LCL.Position_5_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:5:1);

     // LCL.Position 6 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.6,CON.1)
     LCL.Position_6_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:6:1);

     // LCL.Position 7 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.7,CON.1)
     LCL.Position_7_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:7:1);

     // LCL.Position 8 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.8,CON.1)
     LCL.Position_8_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:8:1);

     // LCL.Position 9 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.9,CON.1)
     LCL.Position_9_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:9:1);

     // LCL.Manifest Pallet#-Pos1 Nbr = CVTVAR(LCL.Position 1 Text USR)
     LCL.Manifest_Pallet#_Pos1_Nbr = CVTVAR(LCL.Position_1_Text_USR);

     // LCL.Manifest Pallet#-Pos2 Nbr = CVTVAR(LCL.Position 2 Text USR)
     LCL.Manifest_Pallet#_Pos2_Nbr = CVTVAR(LCL.Position_2_Text_USR);

     // LCL.Manifest Pallet#-Pos3 Nbr = CVTVAR(LCL.Position 3 Text USR)
     LCL.Manifest_Pallet#_Pos3_Nbr = CVTVAR(LCL.Position_3_Text_USR);

     // LCL.Manifest Pallet#-Pos4 Nbr = CVTVAR(LCL.Position 4 Text USR)
     LCL.Manifest_Pallet#_Pos4_Nbr = CVTVAR(LCL.Position_4_Text_USR);

     // LCL.Manifest Pallet#-Pos5 Nbr = CVTVAR(LCL.Position 5 Text USR)
     LCL.Manifest_Pallet#_Pos5_Nbr = CVTVAR(LCL.Position_5_Text_USR);

     // LCL.Manifest Pallet#-Pos6 Nbr = CVTVAR(LCL.Position 6 Text USR)
     LCL.Manifest_Pallet#_Pos6_Nbr = CVTVAR(LCL.Position_6_Text_USR);

     // LCL.Manifest Pallet#-Pos7 Nbr = CVTVAR(LCL.Position 7 Text USR)
     LCL.Manifest_Pallet#_Pos7_Nbr = CVTVAR(LCL.Position_7_Text_USR);

     // LCL.Manifest Pallet#-Pos8 Nbr = CVTVAR(LCL.Position 8 Text USR)
     LCL.Manifest_Pallet#_Pos8_Nbr = CVTVAR(LCL.Position_8_Text_USR);

     // LCL.Manifest Pallet#-Pos9 Nbr = CVTVAR(LCL.Position 9 Text USR)
     LCL.Manifest_Pallet#_Pos9_Nbr = CVTVAR(LCL.Position_9_Text_USR);

     ENDIF;

     // SUM Val for Odd # Pos
     PAR.SUM_Val_for_Odd_#_Pos = ( ( ( ( PAR.SUM_Val_for_Odd_#_Pos
     + LCL.Manifest_Pallet#_Pos1_Nbr ) + LCL.Manifest_Pallet#_Pos3_Nbr )
     + LCL.Manifest_Pallet#_Pos5_Nbr ) + LCL.Manifest_Pallet#_Pos7_Nbr )
     + LCL.Manifest_Pallet#_Pos9_Nbr;

     // SUM Val for Even # Pos
     PAR.SUM_Val_for_Even_#_Pos = ( ( ( PAR.SUM_Val_for_Even_#_Pos
     + LCL.Manifest_Pallet#_Pos2_Nbr ) + LCL.Manifest_Pallet#_Pos4_Nbr )
     + LCL.Manifest_Pallet#_Pos6_Nbr ) + LCL.Manifest_Pallet#_Pos8_Nbr;

     ENDIF;

     //?Calculated Check Digit Number.
     CASE;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // Calculated Value
     LCL.Calc_Value_USR = ( PAR.SUM_Val_for_Odd_#_Pos * 3 ) + PAR.SUM_Val_for_Even_#_Pos;

     // LCL.Calc Value Last Digit USR = LCL.Calc Value USR
     LCL.Calc_Value_Last_Digit_USR = LCL.Calc_Value_USR;

     // LCL.Calc Check Digit# USR = CON.10 - LCL.Calc Value Last Digit USR
     LCL.Calc_Check_Digit#_USR = 10 - LCL.Calc_Value_Last_Digit_USR;

     ENDIF;

     //?Format W0407 Pallet Number for Output.
     CASE;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // LCL.Calc Check Digit# Txt USR = CVTVAR(LCL.Calc Check Digit# USR)
     LCL.Calc_Check_Digit#_Txt_USR = CVTVAR(LCL.Calc_Check_Digit#_USR);

     // LCL.W0407 Pallet Number Txt U = CONCAT(CON.00,LCL.Federal Tax ID 8 Byte,CON.*ZERO)
     LCL.W0407_Pallet_Number_Txt_U = '00' + LCL.Federal_Tax_ID_8_Byte (*ZERO);

     // LCL.W0407 Pallet Number Txt U = CONCAT(LCL.W0407 Pallet Number Txt U,LCL.Manifest Pallet# Tx
     LCL.W0407_Pallet_Number_Txt_U = LCL.W0407_Pallet_Number_Txt_U + LCL.Manifest_Pallet#_Txt (*ZERO

     // LCL.W0407 Pallet Number Txt U = CONCAT(LCL.W0407 Pallet Number Txt U,LCL.Calc Check Digit# T
     LCL.W0407_Pallet_Number_Txt_U = LCL.W0407_Pallet_Number_Txt_U + LCL.Calc_Check_Digit#_Txt_USR (

     // PAR.W0407 Pallet Number = CVTVAR(LCL.W0407 Pallet Number Txt U)
     PAR.W0407_Pallet_Number = CVTVAR(LCL.W0407_Pallet_Number_Txt_U);

     ENDIF;

    }

   }

   ENDIF;

  }

  ENDIF;

  // LCL.Create Record USR = CND.Yes
  LCL.Create_Record_USR = 'Y';

  // PAR.Item Code = DB1.Item Code
  PAR.Item_Code = DB1.Item_Code;

  // LCL.Order Desc. Line One = DB1.Order Desc. Line One
  LCL.Order_Desc_Line_One = DB1.Order_Desc_Line_One;

  //?Format Unit of Measure.
  CASE;

  // IF DB1.U/M - Ordered is EQ Boxes
  IF DB1.U_M_Ordered = 'BX';

  // LCL.W0402 Unit of Measure = CND.Boxes
  LCL.W0402_Unit_of_Measure = 'CA';

  //?Format Unit of Measure.
  // IF DB1.U/M - Ordered is Combos
  IF DB1.U_M_Ordered = 'CB';

  // LCL.W0402 Unit of Measure = CND.Combos
  LCL.W0402_Unit_of_Measure = 'CZ';

  //?Format Unit of Measure.
  // IF DB1.U/M - Ordered is Each
  IF DB1.U_M_Ordered = 'EA';

  // OR DB1.U/M - Ordered is Pounds
  OR DB1.U_M_Ordered = 'LB';

  // LCL.W0402 Unit of Measure = DB1.U/M - Ordered
  LCL.W0402_Unit_of_Measure = DB1.U_M_Ordered;

  //?Format Unit of Measure.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.W0402 Unit of Measure = CND.Each
  LCL.W0402_Unit_of_Measure = 'EA';

  ENDIF;

  ENDIF;

  ENDIF;

  //?USER: Exit processing

  //?Last Record Processing.
  CASE;

  // IF LCL.Create Record USR is Yes
  IF LCL.Create_Record_USR = 'Y';

  //?   CRT EDI WHS Stock Txfr DTL (ECP061) and  REF  (ECP064).
  EXECUTE FUNCTION(Crt WHS Stck Txfr DTL/REF) TYPE(RTVOBJ) FILE(OMFNCPP)          AC2138917;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.EDI_SURROGATE_NUMBER);
  PARAMETER(PAR.LX01_Sequence_Number);
  PARAMETER(LCL.W0402_Unit_of_Measure);
  PARAMETER('VN');
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.Order_Desc_Line_One);
  {
   //?USER: Initialize routine

   // PAR.EDI Ref Sequence Nbr = CON.*ZERO
   PAR.EDI_Ref_Sequence_Nbr = *ZERO;

   //?we want it to break even if -0-
   // PAR.Manifest Pallet Number = CON.999
   PAR.Manifest_Pallet_Number = 999;

   //?USER: Process Data record

   CASE;

   // IF DB1.Case Quantity is GT *ZERO
   IF DB1.Case_Quantity > *ZERO;

   //?S13144 DN 06/05/18-Break by Item/Pallet to Support Same Item/Pallet.
   //?RMC default to 99999999 if it gets to here without a pallet. means CB ordr
   CASE;

   // IF DB1.Manifest Pallet Number is Entered
   IF DB1.Manifest_Pallet_Number <> *ZERO;

   // LCL.Manifest Pallet Number = DB1.Manifest Pallet Number
   LCL.Manifest_Pallet_Number = DB1.Manifest_Pallet_Number;

   //?RMC default to 99999999 if it gets to here without a pallet. means CB ordr
   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Manifest Pallet Number = CON.999999999
   LCL.Manifest_Pallet_Number = 999999999;

   ENDIF;

   //?RMC 4/29/21 use lcl.pallet number below
   //?Create EDI WHS Stock Txfr   DTL at Item/Pallet Break with Box Total.
   CASE;

   // IF LCL.Manifest Pallet Number NE PAR.Manifest Pallet Number
   IF LCL.Manifest_Pallet_Number <> PAR.Manifest_Pallet_Number;

   CASE;

   // IF PAR.Quantity Shipped Total is Greater than zero
   IF PAR.Quantity_Shipped_Total > *ZERO;

   // LCL.Production Date USR D8# = PAR.Production Date
   LCL.Production_Date_USR_D8# = PAR.Production_Date;

   // PAR.N904 Production Date = LCL.Production Date USR D8#
   PAR.N904_Production_Date = LCL.Production_Date_USR_D8#;

   EXECUTE FUNCTION(Crt WHS Stock Txfr DTL CR) TYPE(CRTOBJ) FILE(ECP061)           AC2138751;
   PARAMETER(PAR.EDI_SURROGATE_NUMBER);
   PARAMETER(PAR.LX01_Sequence_Number);
   PARAMETER(PAR.Quantity_Shipped_Total);
   PARAMETER(PAR.W0402_Unit_of_Measure);
   PARAMETER(*BLANK);
   PARAMETER('VN');
   PARAMETER(PAR.Item_Code);
   PARAMETER('SN');
   PARAMETER(PAR.Manifest_Pallet_Number);
   PARAMETER(PAR.Weight_Shipped_Total);
   PARAMETER('G');
   PARAMETER('L');
   PARAMETER(PAR.G6901_Item_Description);
   PARAMETER(PAR.N904_Production_Date);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Manifest_Pallet_Number);
   {
    //?USER: Processing before Data update

    //?T11041 DN 04/19/18-Added Calculated Check Digit Logic to Set Pallet #.
    EXECUTE FUNCTION(Get Calc Check Digit  IF) TYPE(EXCINTFUN)                      AC2149151;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Manifest_Pallet_Number);
    PARAMETER(DB1.W0407_Pallet_Number);
    {
     //?Execute internal function

     // PAR.W0407 Pallet Number = CON.*ZERO
     PAR.W0407_Pallet_Number = *ZERO;

     //?SUM Up Odd & Even # Positions for Federal Tax ID.
     CASE;

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Substring Out Each Digit From Federal Tax ID.
     CASE;

     // IF *OTHERWISE
     IF *OTHERWISE;

     EXECUTE FUNCTION(RTV Federal Tax ID    RT) TYPE(RTVOBJ) FILE(CAABREP)           AC2149185;
     PARAMETER(PAR.Company_Number);
     PARAMETER(LCL.Federal_Tax_Id);
     {
      //?USER: Initialize routine

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     // LCL.Text 7 Alpha Usr = SUBSTRING(LCL.Federal Tax Id.,CON.1,CON.7)
     LCL.Text_7_Alpha_Usr = SUBSTRING(LCL.Federal_Tax_Id:1:7);

     // LCL.Federal Tax ID 8 Byte = CONCAT(CON.1,LCL.Text 7 Alpha Usr,CON.*ZERO)
     LCL.Federal_Tax_ID_8_Byte = '1' + LCL.Text_7_Alpha_Usr (*ZERO);

     //?Position 1 will always be 1.
     // LCL.Position 1 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.1,CON.1)
     LCL.Position_1_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:1:1);

     // LCL.Position 2 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.2,CON.1)
     LCL.Position_2_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:2:1);

     // LCL.Position 3 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.3,CON.1)
     LCL.Position_3_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:3:1);

     // LCL.Position 4 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.4,CON.1)
     LCL.Position_4_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:4:1);

     // LCL.Position 5 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.5,CON.1)
     LCL.Position_5_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:5:1);

     // LCL.Position 6 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.6,CON.1)
     LCL.Position_6_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:6:1);

     // LCL.Position 7 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.7,CON.1)
     LCL.Position_7_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:7:1);

     // LCL.Position 8 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.8,CON.1)
     LCL.Position_8_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:8:1);

     // LCL.Federal Tax ID-Pos1 Nbr = CVTVAR(LCL.Position 1 Text USR)
     LCL.Federal_Tax_ID_Pos1_Nbr = CVTVAR(LCL.Position_1_Text_USR);

     // LCL.Federal Tax ID-Pos2 Nbr = CVTVAR(LCL.Position 2 Text USR)
     LCL.Federal_Tax_ID_Pos2_Nbr = CVTVAR(LCL.Position_2_Text_USR);

     // LCL.Federal Tax ID-Pos3 Nbr = CVTVAR(LCL.Position 3 Text USR)
     LCL.Federal_Tax_ID_Pos3_Nbr = CVTVAR(LCL.Position_3_Text_USR);

     // LCL.Federal Tax ID-Pos4 Nbr = CVTVAR(LCL.Position 4 Text USR)
     LCL.Federal_Tax_ID_Pos4_Nbr = CVTVAR(LCL.Position_4_Text_USR);

     // LCL.Federal Tax ID-Pos5 Nbr = CVTVAR(LCL.Position 5 Text USR)
     LCL.Federal_Tax_ID_Pos5_Nbr = CVTVAR(LCL.Position_5_Text_USR);

     // LCL.Federal Tax ID-Pos6 Nbr = CVTVAR(LCL.Position 6 Text USR)
     LCL.Federal_Tax_ID_Pos6_Nbr = CVTVAR(LCL.Position_6_Text_USR);

     // LCL.Federal Tax ID-Pos7 Nbr = CVTVAR(LCL.Position 7 Text USR)
     LCL.Federal_Tax_ID_Pos7_Nbr = CVTVAR(LCL.Position_7_Text_USR);

     // LCL.Federal Tax ID-Pos8 Nbr = CVTVAR(LCL.Position 8 Text USR)
     LCL.Federal_Tax_ID_Pos8_Nbr = CVTVAR(LCL.Position_8_Text_USR);

     ENDIF;

     // SUM Val for Odd # Pos
     PAR.SUM_Val_for_Odd_#_Pos = ( ( LCL.Federal_Tax_ID_Pos1_Nbr
     + LCL.Federal_Tax_ID_Pos3_Nbr ) + LCL.Federal_Tax_ID_Pos5_Nbr )
     + LCL.Federal_Tax_ID_Pos7_Nbr;

     // SUM Val for Even # Pos
     PAR.SUM_Val_for_Even_#_Pos = ( ( LCL.Federal_Tax_ID_Pos2_Nbr
     + LCL.Federal_Tax_ID_Pos4_Nbr ) + LCL.Federal_Tax_ID_Pos6_Nbr )
     + LCL.Federal_Tax_ID_Pos8_Nbr;

     ENDIF;

     //?SUM Up Odd & Even # Positions for Pallet Number.
     CASE;

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Substring Out Each Digit From Pallet Number.
     CASE;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // LCL.Manifest Pallet# Txt = CVTVAR(PAR.Manifest Pallet Number)
     LCL.Manifest_Pallet#_Txt = CVTVAR(PAR.Manifest_Pallet_Number);

     // LCL.Position 1 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.1,CON.1)
     LCL.Position_1_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:1:1);

     // LCL.Position 2 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.2,CON.1)
     LCL.Position_2_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:2:1);

     // LCL.Position 3 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.3,CON.1)
     LCL.Position_3_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:3:1);

     // LCL.Position 4 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.4,CON.1)
     LCL.Position_4_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:4:1);

     // LCL.Position 5 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.5,CON.1)
     LCL.Position_5_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:5:1);

     // LCL.Position 6 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.6,CON.1)
     LCL.Position_6_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:6:1);

     // LCL.Position 7 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.7,CON.1)
     LCL.Position_7_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:7:1);

     // LCL.Position 8 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.8,CON.1)
     LCL.Position_8_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:8:1);

     // LCL.Position 9 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.9,CON.1)
     LCL.Position_9_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:9:1);

     // LCL.Manifest Pallet#-Pos1 Nbr = CVTVAR(LCL.Position 1 Text USR)
     LCL.Manifest_Pallet#_Pos1_Nbr = CVTVAR(LCL.Position_1_Text_USR);

     // LCL.Manifest Pallet#-Pos2 Nbr = CVTVAR(LCL.Position 2 Text USR)
     LCL.Manifest_Pallet#_Pos2_Nbr = CVTVAR(LCL.Position_2_Text_USR);

     // LCL.Manifest Pallet#-Pos3 Nbr = CVTVAR(LCL.Position 3 Text USR)
     LCL.Manifest_Pallet#_Pos3_Nbr = CVTVAR(LCL.Position_3_Text_USR);

     // LCL.Manifest Pallet#-Pos4 Nbr = CVTVAR(LCL.Position 4 Text USR)
     LCL.Manifest_Pallet#_Pos4_Nbr = CVTVAR(LCL.Position_4_Text_USR);

     // LCL.Manifest Pallet#-Pos5 Nbr = CVTVAR(LCL.Position 5 Text USR)
     LCL.Manifest_Pallet#_Pos5_Nbr = CVTVAR(LCL.Position_5_Text_USR);

     // LCL.Manifest Pallet#-Pos6 Nbr = CVTVAR(LCL.Position 6 Text USR)
     LCL.Manifest_Pallet#_Pos6_Nbr = CVTVAR(LCL.Position_6_Text_USR);

     // LCL.Manifest Pallet#-Pos7 Nbr = CVTVAR(LCL.Position 7 Text USR)
     LCL.Manifest_Pallet#_Pos7_Nbr = CVTVAR(LCL.Position_7_Text_USR);

     // LCL.Manifest Pallet#-Pos8 Nbr = CVTVAR(LCL.Position 8 Text USR)
     LCL.Manifest_Pallet#_Pos8_Nbr = CVTVAR(LCL.Position_8_Text_USR);

     // LCL.Manifest Pallet#-Pos9 Nbr = CVTVAR(LCL.Position 9 Text USR)
     LCL.Manifest_Pallet#_Pos9_Nbr = CVTVAR(LCL.Position_9_Text_USR);

     ENDIF;

     // SUM Val for Odd # Pos
     PAR.SUM_Val_for_Odd_#_Pos = ( ( ( ( PAR.SUM_Val_for_Odd_#_Pos
     + LCL.Manifest_Pallet#_Pos1_Nbr ) + LCL.Manifest_Pallet#_Pos3_Nbr )
     + LCL.Manifest_Pallet#_Pos5_Nbr ) + LCL.Manifest_Pallet#_Pos7_Nbr )
     + LCL.Manifest_Pallet#_Pos9_Nbr;

     // SUM Val for Even # Pos
     PAR.SUM_Val_for_Even_#_Pos = ( ( ( PAR.SUM_Val_for_Even_#_Pos
     + LCL.Manifest_Pallet#_Pos2_Nbr ) + LCL.Manifest_Pallet#_Pos4_Nbr )
     + LCL.Manifest_Pallet#_Pos6_Nbr ) + LCL.Manifest_Pallet#_Pos8_Nbr;

     ENDIF;

     //?Calculated Check Digit Number.
     CASE;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // Calculated Value
     LCL.Calc_Value_USR = ( PAR.SUM_Val_for_Odd_#_Pos * 3 ) + PAR.SUM_Val_for_Even_#_Pos;

     // LCL.Calc Value Last Digit USR = LCL.Calc Value USR
     LCL.Calc_Value_Last_Digit_USR = LCL.Calc_Value_USR;

     // LCL.Calc Check Digit# USR = CON.10 - LCL.Calc Value Last Digit USR
     LCL.Calc_Check_Digit#_USR = 10 - LCL.Calc_Value_Last_Digit_USR;

     ENDIF;

     //?Format W0407 Pallet Number for Output.
     CASE;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // LCL.Calc Check Digit# Txt USR = CVTVAR(LCL.Calc Check Digit# USR)
     LCL.Calc_Check_Digit#_Txt_USR = CVTVAR(LCL.Calc_Check_Digit#_USR);

     // LCL.W0407 Pallet Number Txt U = CONCAT(CON.00,LCL.Federal Tax ID 8 Byte,CON.*ZERO)
     LCL.W0407_Pallet_Number_Txt_U = '00' + LCL.Federal_Tax_ID_8_Byte (*ZERO);

     // LCL.W0407 Pallet Number Txt U = CONCAT(LCL.W0407 Pallet Number Txt U,LCL.Manifest Pallet# Tx
     LCL.W0407_Pallet_Number_Txt_U = LCL.W0407_Pallet_Number_Txt_U + LCL.Manifest_Pallet#_Txt (*ZERO

     // LCL.W0407 Pallet Number Txt U = CONCAT(LCL.W0407 Pallet Number Txt U,LCL.Calc Check Digit# T
     LCL.W0407_Pallet_Number_Txt_U = LCL.W0407_Pallet_Number_Txt_U + LCL.Calc_Check_Digit#_Txt_USR (

     // PAR.W0407 Pallet Number = CVTVAR(LCL.W0407 Pallet Number Txt U)
     PAR.W0407_Pallet_Number = CVTVAR(LCL.W0407_Pallet_Number_Txt_U);

     ENDIF;

    }

   }

   ENDIF;

   //?LI = Line Item
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.N901 Reference ID Qlfr = CND.Line Item
   LCL.N901_Reference_ID_Qlfr = 'LI';

   // PAR.LX01 Sequence Number = PAR.LX01 Sequence Number + CON.1
   PAR.LX01_Sequence_Number = PAR.LX01_Sequence_Number + 1;

   // LCL.Order Sequence Nbr (S)USR = DB1.Order Sequence Number
   LCL.Order_Sequence_Nbr_SUSR = DB1.Order_Sequence_Number;

   // PAR.EDI Ref Sequence Nbr = CON.1
   PAR.EDI_Ref_Sequence_Nbr = 1;

   // LCL.N902 Reference ID Nbr = CVTVAR(LCL.Order Sequence Nbr (S)USR)
   LCL.N902_Reference_ID_Nbr = CVTVAR(LCL.Order_Sequence_Nbr_SUSR);

   EXECUTE FUNCTION(Crt WHS Stock Txfr REF CR) TYPE(CRTOBJ) FILE(ECP064)           AC2139132;
   PARAMETER(PAR.EDI_SURROGATE_NUMBER);
   PARAMETER(PAR.LX01_Sequence_Number);
   PARAMETER(PAR.EDI_Ref_Sequence_Nbr);
   PARAMETER(LCL.N901_Reference_ID_Qlfr);
   PARAMETER(LCL.N902_Reference_ID_Nbr);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   ENDIF;

   //?RMC 4/29/21 use lcl.pallet number below
   // PAR.Manifest Pallet Number = LCL.Manifest Pallet Number
   PAR.Manifest_Pallet_Number = LCL.Manifest_Pallet_Number;

   // PAR.Quantity Shipped Total = CON.*ZERO
   PAR.Quantity_Shipped_Total = *ZERO;

   // PAR.Weight Shipped Total = CON.*ZERO
   PAR.Weight_Shipped_Total = *ZERO;

   // PAR.Production Date = DB1.Production Date
   PAR.Production_Date = DB1.Production_Date;

   ENDIF;

   //?S13144 DN 06/05/18-Commented Out 'LI' & Move Above. Remove Seq/Qty Check.
   //?SE = Serial Number
   CASE;

   // IF DB1.Case Quantity is EQ *ZERO
   IF DB1.Case_Quantity = *ZERO;

   // AND DB1.PT Serial Number is Not Entered
   AND DB1.PT_Serial_Number = *ZERO;

   //?Both Case Qty & Serial# are 0, Do NOT create EDI WHS Stock Txfr   REF.
   //?SE = Serial Number
   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.N901 Reference ID Qlfr = CND.Serial Number
   LCL.N901_Reference_ID_Qlfr = 'SE';

   // LCL.N902 Reference ID Nbr = CON.0
   LCL.N902_Reference_ID_Nbr = 0;

   //?Convert Serial #.
   CASE;

   // IF DB1.PT Serial Number is Entered
   IF DB1.PT_Serial_Number > *ZERO;

   // LCL.PT Serial Number (S) USR = DB1.PT Serial Number
   LCL.PT_Serial_Number_S_USR = DB1.PT_Serial_Number;

   // LCL.N902 Reference ID Nbr = CVTVAR(LCL.PT Serial Number (S) USR)
   LCL.N902_Reference_ID_Nbr = CVTVAR(LCL.PT_Serial_Number_S_USR);

   ENDIF;

   // LCL.N903 Reference ID Wgt = DB1.Case Weight
   LCL.N903_Reference_ID_Wgt = DB1.Case_Weight;

   // PAR.EDI Ref Sequence Nbr = PAR.EDI Ref Sequence Nbr + CON.1
   PAR.EDI_Ref_Sequence_Nbr = PAR.EDI_Ref_Sequence_Nbr + 1;

   //?Set Production Date.
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.N904 Production Date = CON.*ZERO
   LCL.N904_Production_Date = *ZERO;

   CASE;

   // IF DB1.Production Date is entered
   IF DB1.Production_Date <> *ZERO;

   // AND DB1.Case Quantity is GT *ZERO
   AND DB1.Case_Quantity > *ZERO;

   // LCL.Production Date USR D8# = DB1.Production Date
   LCL.Production_Date_USR_D8# = DB1.Production_Date;

   // LCL.N904 Production Date = LCL.Production Date USR D8#
   LCL.N904_Production_Date = LCL.Production_Date_USR_D8#;

   ENDIF;

   ENDIF;

   EXECUTE FUNCTION(Crt WHS Stock Txfr REF CR) TYPE(CRTOBJ) FILE(ECP064)           AC2139132;
   PARAMETER(PAR.EDI_SURROGATE_NUMBER);
   PARAMETER(PAR.LX01_Sequence_Number);
   PARAMETER(PAR.EDI_Ref_Sequence_Nbr);
   PARAMETER(LCL.N901_Reference_ID_Qlfr);
   PARAMETER(LCL.N902_Reference_ID_Nbr);
   PARAMETER(LCL.N903_Reference_ID_Wgt);
   PARAMETER(LCL.N904_Production_Date);
   //?Accum for DTL record
   // PAR.Quantity Shipped Total = PAR.Quantity Shipped Total + DB1.Case Quantity
   PAR.Quantity_Shipped_Total = PAR.Quantity_Shipped_Total + DB1.Case_Quantity;

   // PAR.Weight Shipped Total = PAR.Weight Shipped Total + DB1.Case Weight
   PAR.Weight_Shipped_Total = PAR.Weight_Shipped_Total + DB1.Case_Weight;

   ENDIF;

   //?Save oldest production date 6.22.18 RMC
   CASE;

   // IF DB1.Production Date is entered
   IF ( DB1.Production_Date <> *ZERO;

   // AND DB1.Production Date LT PAR.Production Date
   AND DB1.Production_Date < PAR.Production_Date );

   // OR PAR.Production Date is not entered
   OR ( PAR.Production_Date = *ZERO;

   // AND DB1.Production Date is entered
   AND DB1.Production_Date <> *ZERO );

   // PAR.Production Date = DB1.Production Date
   PAR.Production_Date = DB1.Production_Date;

   ENDIF;

   ENDIF;

   //?USER: Exit processing

   //?LAST RCD: Crt EDI WHS Stock Txfr   DTL
   CASE;

   // IF PAR.Quantity Shipped Total is Greater than zero
   IF PAR.Quantity_Shipped_Total > *ZERO;

   // LCL.Production Date USR D8# = PAR.Production Date
   LCL.Production_Date_USR_D8# = PAR.Production_Date;

   // PAR.N904 Production Date = LCL.Production Date USR D8#
   PAR.N904_Production_Date = LCL.Production_Date_USR_D8#;

   EXECUTE FUNCTION(Crt WHS Stock Txfr DTL CR) TYPE(CRTOBJ) FILE(ECP061)           AC2138751;
   PARAMETER(PAR.EDI_SURROGATE_NUMBER);
   PARAMETER(PAR.LX01_Sequence_Number);
   PARAMETER(PAR.Quantity_Shipped_Total);
   PARAMETER(PAR.W0402_Unit_of_Measure);
   PARAMETER(*BLANK);
   PARAMETER('VN');
   PARAMETER(PAR.Item_Code);
   PARAMETER('SN');
   PARAMETER(PAR.Manifest_Pallet_Number);
   PARAMETER(PAR.Weight_Shipped_Total);
   PARAMETER('G');
   PARAMETER('L');
   PARAMETER(PAR.G6901_Item_Description);
   PARAMETER(PAR.N904_Production_Date);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Manifest_Pallet_Number);
   {
    //?USER: Processing before Data update

    //?T11041 DN 04/19/18-Added Calculated Check Digit Logic to Set Pallet #.
    EXECUTE FUNCTION(Get Calc Check Digit  IF) TYPE(EXCINTFUN)                      AC2149151;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Manifest_Pallet_Number);
    PARAMETER(DB1.W0407_Pallet_Number);
    {
     //?Execute internal function

     // PAR.W0407 Pallet Number = CON.*ZERO
     PAR.W0407_Pallet_Number = *ZERO;

     //?SUM Up Odd & Even # Positions for Federal Tax ID.
     CASE;

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Substring Out Each Digit From Federal Tax ID.
     CASE;

     // IF *OTHERWISE
     IF *OTHERWISE;

     EXECUTE FUNCTION(RTV Federal Tax ID    RT) TYPE(RTVOBJ) FILE(CAABREP)           AC2149185;
     PARAMETER(PAR.Company_Number);
     PARAMETER(LCL.Federal_Tax_Id);
     {
      //?USER: Initialize routine

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     // LCL.Text 7 Alpha Usr = SUBSTRING(LCL.Federal Tax Id.,CON.1,CON.7)
     LCL.Text_7_Alpha_Usr = SUBSTRING(LCL.Federal_Tax_Id:1:7);

     // LCL.Federal Tax ID 8 Byte = CONCAT(CON.1,LCL.Text 7 Alpha Usr,CON.*ZERO)
     LCL.Federal_Tax_ID_8_Byte = '1' + LCL.Text_7_Alpha_Usr (*ZERO);

     //?Position 1 will always be 1.
     // LCL.Position 1 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.1,CON.1)
     LCL.Position_1_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:1:1);

     // LCL.Position 2 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.2,CON.1)
     LCL.Position_2_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:2:1);

     // LCL.Position 3 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.3,CON.1)
     LCL.Position_3_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:3:1);

     // LCL.Position 4 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.4,CON.1)
     LCL.Position_4_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:4:1);

     // LCL.Position 5 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.5,CON.1)
     LCL.Position_5_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:5:1);

     // LCL.Position 6 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.6,CON.1)
     LCL.Position_6_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:6:1);

     // LCL.Position 7 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.7,CON.1)
     LCL.Position_7_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:7:1);

     // LCL.Position 8 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.8,CON.1)
     LCL.Position_8_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:8:1);

     // LCL.Federal Tax ID-Pos1 Nbr = CVTVAR(LCL.Position 1 Text USR)
     LCL.Federal_Tax_ID_Pos1_Nbr = CVTVAR(LCL.Position_1_Text_USR);

     // LCL.Federal Tax ID-Pos2 Nbr = CVTVAR(LCL.Position 2 Text USR)
     LCL.Federal_Tax_ID_Pos2_Nbr = CVTVAR(LCL.Position_2_Text_USR);

     // LCL.Federal Tax ID-Pos3 Nbr = CVTVAR(LCL.Position 3 Text USR)
     LCL.Federal_Tax_ID_Pos3_Nbr = CVTVAR(LCL.Position_3_Text_USR);

     // LCL.Federal Tax ID-Pos4 Nbr = CVTVAR(LCL.Position 4 Text USR)
     LCL.Federal_Tax_ID_Pos4_Nbr = CVTVAR(LCL.Position_4_Text_USR);

     // LCL.Federal Tax ID-Pos5 Nbr = CVTVAR(LCL.Position 5 Text USR)
     LCL.Federal_Tax_ID_Pos5_Nbr = CVTVAR(LCL.Position_5_Text_USR);

     // LCL.Federal Tax ID-Pos6 Nbr = CVTVAR(LCL.Position 6 Text USR)
     LCL.Federal_Tax_ID_Pos6_Nbr = CVTVAR(LCL.Position_6_Text_USR);

     // LCL.Federal Tax ID-Pos7 Nbr = CVTVAR(LCL.Position 7 Text USR)
     LCL.Federal_Tax_ID_Pos7_Nbr = CVTVAR(LCL.Position_7_Text_USR);

     // LCL.Federal Tax ID-Pos8 Nbr = CVTVAR(LCL.Position 8 Text USR)
     LCL.Federal_Tax_ID_Pos8_Nbr = CVTVAR(LCL.Position_8_Text_USR);

     ENDIF;

     // SUM Val for Odd # Pos
     PAR.SUM_Val_for_Odd_#_Pos = ( ( LCL.Federal_Tax_ID_Pos1_Nbr
     + LCL.Federal_Tax_ID_Pos3_Nbr ) + LCL.Federal_Tax_ID_Pos5_Nbr )
     + LCL.Federal_Tax_ID_Pos7_Nbr;

     // SUM Val for Even # Pos
     PAR.SUM_Val_for_Even_#_Pos = ( ( LCL.Federal_Tax_ID_Pos2_Nbr
     + LCL.Federal_Tax_ID_Pos4_Nbr ) + LCL.Federal_Tax_ID_Pos6_Nbr )
     + LCL.Federal_Tax_ID_Pos8_Nbr;

     ENDIF;

     //?SUM Up Odd & Even # Positions for Pallet Number.
     CASE;

     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Substring Out Each Digit From Pallet Number.
     CASE;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // LCL.Manifest Pallet# Txt = CVTVAR(PAR.Manifest Pallet Number)
     LCL.Manifest_Pallet#_Txt = CVTVAR(PAR.Manifest_Pallet_Number);

     // LCL.Position 1 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.1,CON.1)
     LCL.Position_1_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:1:1);

     // LCL.Position 2 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.2,CON.1)
     LCL.Position_2_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:2:1);

     // LCL.Position 3 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.3,CON.1)
     LCL.Position_3_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:3:1);

     // LCL.Position 4 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.4,CON.1)
     LCL.Position_4_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:4:1);

     // LCL.Position 5 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.5,CON.1)
     LCL.Position_5_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:5:1);

     // LCL.Position 6 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.6,CON.1)
     LCL.Position_6_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:6:1);

     // LCL.Position 7 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.7,CON.1)
     LCL.Position_7_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:7:1);

     // LCL.Position 8 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.8,CON.1)
     LCL.Position_8_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:8:1);

     // LCL.Position 9 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.9,CON.1)
     LCL.Position_9_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:9:1);

     // LCL.Manifest Pallet#-Pos1 Nbr = CVTVAR(LCL.Position 1 Text USR)
     LCL.Manifest_Pallet#_Pos1_Nbr = CVTVAR(LCL.Position_1_Text_USR);

     // LCL.Manifest Pallet#-Pos2 Nbr = CVTVAR(LCL.Position 2 Text USR)
     LCL.Manifest_Pallet#_Pos2_Nbr = CVTVAR(LCL.Position_2_Text_USR);

     // LCL.Manifest Pallet#-Pos3 Nbr = CVTVAR(LCL.Position 3 Text USR)
     LCL.Manifest_Pallet#_Pos3_Nbr = CVTVAR(LCL.Position_3_Text_USR);

     // LCL.Manifest Pallet#-Pos4 Nbr = CVTVAR(LCL.Position 4 Text USR)
     LCL.Manifest_Pallet#_Pos4_Nbr = CVTVAR(LCL.Position_4_Text_USR);

     // LCL.Manifest Pallet#-Pos5 Nbr = CVTVAR(LCL.Position 5 Text USR)
     LCL.Manifest_Pallet#_Pos5_Nbr = CVTVAR(LCL.Position_5_Text_USR);

     // LCL.Manifest Pallet#-Pos6 Nbr = CVTVAR(LCL.Position 6 Text USR)
     LCL.Manifest_Pallet#_Pos6_Nbr = CVTVAR(LCL.Position_6_Text_USR);

     // LCL.Manifest Pallet#-Pos7 Nbr = CVTVAR(LCL.Position 7 Text USR)
     LCL.Manifest_Pallet#_Pos7_Nbr = CVTVAR(LCL.Position_7_Text_USR);

     // LCL.Manifest Pallet#-Pos8 Nbr = CVTVAR(LCL.Position 8 Text USR)
     LCL.Manifest_Pallet#_Pos8_Nbr = CVTVAR(LCL.Position_8_Text_USR);

     // LCL.Manifest Pallet#-Pos9 Nbr = CVTVAR(LCL.Position 9 Text USR)
     LCL.Manifest_Pallet#_Pos9_Nbr = CVTVAR(LCL.Position_9_Text_USR);

     ENDIF;

     // SUM Val for Odd # Pos
     PAR.SUM_Val_for_Odd_#_Pos = ( ( ( ( PAR.SUM_Val_for_Odd_#_Pos
     + LCL.Manifest_Pallet#_Pos1_Nbr ) + LCL.Manifest_Pallet#_Pos3_Nbr )
     + LCL.Manifest_Pallet#_Pos5_Nbr ) + LCL.Manifest_Pallet#_Pos7_Nbr )
     + LCL.Manifest_Pallet#_Pos9_Nbr;

     // SUM Val for Even # Pos
     PAR.SUM_Val_for_Even_#_Pos = ( ( ( PAR.SUM_Val_for_Even_#_Pos
     + LCL.Manifest_Pallet#_Pos2_Nbr ) + LCL.Manifest_Pallet#_Pos4_Nbr )
     + LCL.Manifest_Pallet#_Pos6_Nbr ) + LCL.Manifest_Pallet#_Pos8_Nbr;

     ENDIF;

     //?Calculated Check Digit Number.
     CASE;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // Calculated Value
     LCL.Calc_Value_USR = ( PAR.SUM_Val_for_Odd_#_Pos * 3 ) + PAR.SUM_Val_for_Even_#_Pos;

     // LCL.Calc Value Last Digit USR = LCL.Calc Value USR
     LCL.Calc_Value_Last_Digit_USR = LCL.Calc_Value_USR;

     // LCL.Calc Check Digit# USR = CON.10 - LCL.Calc Value Last Digit USR
     LCL.Calc_Check_Digit#_USR = 10 - LCL.Calc_Value_Last_Digit_USR;

     ENDIF;

     //?Format W0407 Pallet Number for Output.
     CASE;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // LCL.Calc Check Digit# Txt USR = CVTVAR(LCL.Calc Check Digit# USR)
     LCL.Calc_Check_Digit#_Txt_USR = CVTVAR(LCL.Calc_Check_Digit#_USR);

     // LCL.W0407 Pallet Number Txt U = CONCAT(CON.00,LCL.Federal Tax ID 8 Byte,CON.*ZERO)
     LCL.W0407_Pallet_Number_Txt_U = '00' + LCL.Federal_Tax_ID_8_Byte (*ZERO);

     // LCL.W0407 Pallet Number Txt U = CONCAT(LCL.W0407 Pallet Number Txt U,LCL.Manifest Pallet# Tx
     LCL.W0407_Pallet_Number_Txt_U = LCL.W0407_Pallet_Number_Txt_U + LCL.Manifest_Pallet#_Txt (*ZERO

     // LCL.W0407 Pallet Number Txt U = CONCAT(LCL.W0407 Pallet Number Txt U,LCL.Calc Check Digit# T
     LCL.W0407_Pallet_Number_Txt_U = LCL.W0407_Pallet_Number_Txt_U + LCL.Calc_Check_Digit#_Txt_USR (

     // PAR.W0407 Pallet Number = CVTVAR(LCL.W0407 Pallet Number Txt U)
     PAR.W0407_Pallet_Number = CVTVAR(LCL.W0407_Pallet_Number_Txt_U);

     ENDIF;

    }

   }

   ENDIF;

  }

  ENDIF;

 }

 //?Create EDI WHS Stock Txfr   NAME (ECP063).
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Count USR = CON.1
 LCL.Count_USR = 1;

 //?RMC 3/30/21 get whs type too for STJ fresh to CP4
 EXECUTE FUNCTION(Rtv Acct Co/Type     RT) TYPE(RTVOBJ) FILE(CAADREP)            AC2196432;
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(LCL.Warehouse_Type);
 PARAMETER(LCL.Accounting_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Create EDI WHS Stock Txfr   NAME Rcds for 3 Groups: DE, SF & ST.
 // DOW LCL.Count USR is LE 3
 DOW LCL.Count_USR <= 3;

 //?Group 1: Depositor (DE).
 CASE;

 // IF LCL.Count USR is EQ 1
 IF LCL.Count_USR = 1;

 // LCL.N101-NAME TYPE CODE = CND.Depositor
 LCL.N101_NAME_TYPE_CODE = 'DE';

 // LCL.N103-ID CODE QUALIFIER = CND.Duns ID
 LCL.N103_ID_CODE_QUALIFIER = '9';

 EXECUTE FUNCTION(RTV Alpha Value 2     RT) TYPE(RTVOBJ) FILE(PDKMREP)           AC2134765;
 PARAMETER(PAR.Company_Number);
 PARAMETER('DUNSNUM');
 PARAMETER(LCL.EDI_Whs_Duns_Number);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Company Name/Addr RT) TYPE(RTVOBJ) FILE(CAABREP)           AC2139143;
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.N102_NAME);
 PARAMETER(LCL.N301_ADD);
 PARAMETER(LCL.N302_ADDRESS);
 PARAMETER(NLL.Address_Line_3);
 PARAMETER(LCL.N401_CITY);
 PARAMETER(LCL.N403_POSTAL_CODE);
 PARAMETER(LCL.N402_STATE);
 PARAMETER(NLL.Country_Code);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?Group 2: Ship From Warehouse (SF).  modify for cp4,cp5,cp6
 CASE;

 // IF LCL.Count USR is EQ 2
 IF LCL.Count_USR = 2;

 //?W78401 RMC 05/13/21 - on the EDI Whs interchange, if the
 //? N104 id code is entered, then use it on the SF rcd, else use comp dft
 EXECUTE FUNCTION(Rtv N104 id for 943   RT) TYPE(RTVOBJ) FILE(PNG0REP)           AC2197161;
 PARAMETER(PAR.Ship_To_Warehouse);
 PARAMETER('WHSTFR');
 PARAMETER(LCL.EDI_N104_ID_CODE_943);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.N101-NAME TYPE CODE = CND.Ship From
 LCL.N101_NAME_TYPE_CODE = 'SF';

 // LCL.N103-ID CODE QUALIFIER = CND.Plant ID
 LCL.N103_ID_CODE_QUALIFIER = '6';

 //?rmc 4/26/19 USE LCL.ACCOUNTING COMPANY INSTEAD OF PAR.COMPANY
 EXECUTE FUNCTION(RTV Alpha Value 2     RT) TYPE(RTVOBJ) FILE(PDKMREP)           AC2134765;
 PARAMETER(LCL.Accounting_Company);
 PARAMETER('EDIWHSTFR');
 PARAMETER(LCL.EDI_Whs_Duns_Number);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?If entered on EDI WHS Interchange, then use this for the n104 id code
 CASE;

 // IF LCL.EDI N104 ID-CODE  943 is Entered
 IF LCL.EDI_N104_ID_CODE_943 <> *BLANK;

 // LCL.EDI Whs Duns Number = LCL.EDI N104 ID-CODE  943
 LCL.EDI_Whs_Duns_Number = LCL.EDI_N104_ID_CODE_943;

 ENDIF;

 EXECUTE FUNCTION(RTV Whse Address/Loc  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2139140;
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(LCL.N102_NAME);
 PARAMETER(LCL.N301_ADD);
 PARAMETER(LCL.N302_ADDRESS);
 PARAMETER(NLL.Address_Line_3);
 PARAMETER(LCL.N401_CITY);
 PARAMETER(LCL.N403_POSTAL_CODE);
 PARAMETER(LCL.N402_STATE);
 PARAMETER(NLL.Warehouse_Location);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?Group 3: Ship To Warehouse (ST).
 CASE;

 // IF LCL.Count USR is Three
 IF LCL.Count_USR = 3;

 // LCL.N101-NAME TYPE CODE = CND.Ship To
 LCL.N101_NAME_TYPE_CODE = 'ST';

 // LCL.N103-ID CODE QUALIFIER = CND.Duns ID
 LCL.N103_ID_CODE_QUALIFIER = '9';

 // LCL.EDI Whs Duns Number = PAR.EDI Whs Duns Number
 LCL.EDI_Whs_Duns_Number = PAR.EDI_Whs_Duns_Number;

 EXECUTE FUNCTION(RTV Whse Address/Loc  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2139140;
 PARAMETER(PAR.Ship_To_Warehouse);
 PARAMETER(LCL.N102_NAME);
 PARAMETER(LCL.N301_ADD);
 PARAMETER(LCL.N302_ADDRESS);
 PARAMETER(NLL.Address_Line_3);
 PARAMETER(LCL.N401_CITY);
 PARAMETER(LCL.N403_POSTAL_CODE);
 PARAMETER(LCL.N402_STATE);
 PARAMETER(NLL.Warehouse_Location);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 EXECUTE FUNCTION(Crt WHS Stock Txfr NME CR) TYPE(CRTOBJ) FILE(ECP063)           AC2138762;
 PARAMETER(PAR.EDI_SURROGATE_NUMBER);
 PARAMETER(LCL.N101_NAME_TYPE_CODE);
 PARAMETER(LCL.N102_NAME);
 PARAMETER(LCL.N103_ID_CODE_QUALIFIER);
 PARAMETER(LCL.EDI_Whs_Duns_Number);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(LCL.N301_ADD);
 PARAMETER(LCL.N302_ADDRESS);
 PARAMETER(LCL.N401_CITY);
 PARAMETER(LCL.N402_STATE);
 PARAMETER(LCL.N403_POSTAL_CODE);
 // LCL.Count USR = LCL.Count USR + CON.1
 LCL.Count_USR = LCL.Count_USR + 1;

 ENDDO;

 ENDIF;

}


ENDIF;

ENDIF;

ENDIF;

ENDIF;

