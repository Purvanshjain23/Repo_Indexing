// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMNVPVR
// ?Date: 14.08.2025 Time: 03:43:32
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?05/23/16 RMC E4119 remove live with tpm check
//?S00081 RMC  01/24/08  Check plant floor cntlled order - dont allow pick
//?             if yes
EXECUTE FUNCTION(VAL Set Inter Acc *ALL IF) TYPE(EXCINTFUN)                     AC1300318;
PARAMETER('SHP');
PARAMETER(LCL.Company_Number);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(NLL.System_Date_Format);
PARAMETER(NLL.Allow_Multi_Company);
PARAMETER(NLL.Default_Printer);
PARAMETER(NLL.Salesperson_Code);
PARAMETER(NLL.First_Time_Flag);
PARAMETER(NLL.Name);
PARAMETER(NLL.System_Value_Alpha);
PARAMETER(WRK.Access_Denied_Y_N);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Load screen

//?Default company number
CASE;

// IF DTL.Company Number is Equal to zero
IF DTL.Company_Number = *ZERO;

// DTL.Company Number = LCL.Company Number
DTL.Company_Number = LCL.Company_Number;

ENDIF;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Validate fields

//?Process F4 on Company Number
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Company Number
AND PGM.*Cursor_field = DTL.Company_Number;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(DTL.Company_Number);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Order Number
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Order Number
AND PGM.*Cursor_field = DTL.Order_Number;

// Call program SEL Order              SR.
CALL PROGRAM(SEL Order              SR) ('PDPCSRR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?CALC: Screen function fields

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Validate relations

//?How many fields were specified?
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Count USR = CON.*ZERO
LCL.Count_USR = *ZERO;

//?Order number specified?
CASE;

// IF DTL.Order Number is Not equal to zeros
IF DTL.Order_Number <> *ZERO;

// LCL.Count USR = LCL.Count USR + CON.1
LCL.Count_USR = LCL.Count_USR + 1;

ENDIF;

//?Load ID specified?
CASE;

// IF DTL.Load ID is NE Blank
IF DTL.Load_ID <> *ZERO;

// LCL.Count USR = LCL.Count USR + CON.1
LCL.Count_USR = LCL.Count_USR + 1;

ENDIF;

//?Scheduled Ship Date specified?
CASE;

// IF DTL.Scheduled Ship Date is entered
IF DTL.Scheduled_Ship_Date <> *ZERO;

// LCL.Count USR = LCL.Count USR + CON.1
LCL.Count_USR = LCL.Count_USR + 1;

ENDIF;

ENDIF;

//?Only one criterion allowed
CASE;

// IF LCL.Count USR is GT 1
IF LCL.Count_USR > 1;

SET CURSOR;

// Send error message - 'Only one report selection allowed.'
ERROR(USR2314);

QUIT;

//?Only one criterion allowed
// IF LCL.Count USR is Zero
IF LCL.Count_USR = *ZERO;

SET CURSOR;

// Send error message - 'Enter one report selection in addition to Company Number.'
ERROR(USR3812);

QUIT;

ENDIF;

//?Validate company
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Company found?
CASE;

// IF DTL.Name is blanks
IF DTL.Name = *BLANK;

// Send error message - 'Company Number not found'
ERROR(USR0163);

QUIT;

ENDIF;

ENDIF;

//?Validate Order Number
CASE;

// IF DTL.Order Number is Not equal to zeros
IF DTL.Order_Number <> *ZERO;

EXECUTE FUNCTION(RTV All Header Fields  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1326885;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(LCL.Order_Type_Sales);
PARAMETER(NLL.AR_Customer_Number);
PARAMETER(NLL.Ship_To_Customer);
PARAMETER(NLL.Ship_To_Name);
PARAMETER(NLL.Ship_To_Address_Line_1);
PARAMETER(NLL.Ship_To_Address_Line_2);
PARAMETER(NLL.Ship_To_Address_Line_3);
PARAMETER(NLL.Ship_To_City);
PARAMETER(NLL.Ship_To_State_Code);
PARAMETER(NLL.Ship_To_Zip_Postal_Code);
PARAMETER(NLL.Bill_to_Customer);
PARAMETER(NLL.Bill_to_Name);
PARAMETER(NLL.Bill_to_Address_Line_1);
PARAMETER(NLL.Bill_to_Address_Line_2);
PARAMETER(NLL.Bill_to_Address_Line_3);
PARAMETER(NLL.Bill_to_City);
PARAMETER(NLL.Bill_to_State_Code);
PARAMETER(NLL.Bill_to_Zip_Postal_Code);
PARAMETER(NLL.Customer_Purchase_Order_#);
PARAMETER(NLL.Order_Date);
PARAMETER(NLL.Requested_Ship_Date);
PARAMETER(NLL.Actual_Shipped_Date);
PARAMETER(NLL.Cancel_Date);
PARAMETER(NLL.Terms_Code);
PARAMETER(NLL.Special_Instructions);
PARAMETER(NLL.Special_Instructions_2);
PARAMETER(NLL.Carrier_Code);
PARAMETER(NLL.Comment_Print_Acknowledge);
PARAMETER(NLL.Comment_Print_Inv_Cr_Memo);
PARAMETER(NLL.Comment_Print_Pick_Slip);
PARAMETER(NLL.Comment_Print_Ship_Doc);
PARAMETER(NLL.Reason_Code);
PARAMETER(NLL.Order_in_Use);
PARAMETER(NLL.Header_Status);
PARAMETER(NLL.Header_Status_Last);
PARAMETER(NLL.Order_Type_Print_Status);
PARAMETER(NLL.Scheduled_Ship_Date);
PARAMETER(NLL.User_Original_Entry);
PARAMETER(NLL.Date_of_Original_Entry);
PARAMETER(NLL.Order_Value_Total);
PARAMETER(NLL.Order_Weight_Total);
PARAMETER(NLL.Credit_Hold);
PARAMETER(NLL.Production_Hold);
PARAMETER(NLL.New_Customer_Hold);
PARAMETER(NLL.Requested_Delivery_Date);
PARAMETER(NLL.Requested_Delivery_Time);
PARAMETER(NLL.Accounts_Receiv_Ent_1);
PARAMETER(NLL.Accounts_Receiv_Ent_2);
PARAMETER(NLL.Load_ID);
PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
PARAMETER(NLL.Rated_Freight);
PARAMETER(NLL.LTL_Flag);
PARAMETER(NLL.Price_Audit);
PARAMETER(NLL.Price_Status);
PARAMETER(NLL.Shipping_Method);
PARAMETER(NLL.Export_Status);
PARAMETER(NLL.Palletize);
PARAMETER(NLL.Shrink_Wrap);
PARAMETER(NLL.Slip_Sheet);
PARAMETER(NLL.Age_Code);
PARAMETER(NLL.Reefer_Temperature);
PARAMETER(NLL.Load_Type);
PARAMETER(NLL.Attach_to_Invoice_Number);
PARAMETER(NLL.Load_Plan_Order);
PARAMETER(NLL.Print_Pick_Slip);
PARAMETER(NLL.Resell_Reference_Number);
PARAMETER(NLL.Special_Comment_1);
PARAMETER(NLL.Special_Comment_2);
PARAMETER(NLL.Affect_Auto_Accruals);
PARAMETER(NLL.Sales_Route_Code);
PARAMETER(NLL.Manager_Level_Code);
PARAMETER(NLL.VP_Level_Code);
PARAMETER(NLL.Attach_to_Order_Number);
PARAMETER(NLL.Reason_for_Price_Audit);
PARAMETER(NLL.Invoice_Number);
PARAMETER(NLL.Invoice_Suffix);
PARAMETER(NLL.Invoice_Date);
PARAMETER(NLL.Event_Code);
PARAMETER(LCL.Trans_Contol_AS400_Plant);
PARAMETER(NLL.Modified_Flag);
PARAMETER(NLL.A_R_order_Value_Total);
PARAMETER(LCL.Billing_Activity_Type);
PARAMETER(NLL.Block_Order_Flag);
PARAMETER(NLL.Order_Certification_Flag);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Order found?
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Chk plant floor controlled -- dont allow if yes  S00081  1/24/08 RMC
CASE;

// IF LCL.Trans Contol AS400/Plant is Plant
IF LCL.Trans_Contol_AS400_Plant = 'P';

// Send error message - 'Option Invalid.  Order is Plant Floor Controlled.'
ERROR(USR2329);
MSGPARM(*BLANK);

ENDIF;

//?Order found?
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Order is not Found'
ERROR(USR3458);
MSGPARM(DTL.Company_Number);
MSGPARM(DTL.Order_Number);

QUIT;

ENDIF;

ENDIF;

//?Validate Load ID
CASE;

// IF DTL.Load ID is NE Blank
IF DTL.Load_ID <> *ZERO;

//?05/23/16 RMC E4119 remove live with tpm check
EXECUTE FUNCTION(RTV Check Existence    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1485266;
PARAMETER(DTL.Load_ID);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 QUIT;

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 QUIT;

}


//?Load found?
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Load Id is not found'
ERROR(USR2783);
MSGPARM(DTL.Load_ID);

QUIT;

//?Load found?
// IF *OTHERWISE
IF *OTHERWISE;

//?Dont allow if any orders are Plant Floor Controlled.  RMC S00081 01/24/08
EXECUTE FUNCTION(CHK Plant Floor CtlOr RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1864886;
PARAMETER(DTL.Load_ID);
PARAMETER(LCL.Trans_Contol_AS400_Plant);
{
 //?USER: Initialize routine

 //?***** Change Log and Comments
 DO;

 //?** 01/24/2008 S00081 RMC - CHK if any order is plant floor controlled
 //?*****
 ENDDO;

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 //?** Load parms and quit if this is a plant floor controlled order
 CASE;

 // IF DB1.Trans Contol AS400/Plant is Plant
 IF DB1.Trans_Contol_AS400_Plant = 'P';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 //?** Load parms and quit if this is a plant floor controlled order
 // IF *OTHERWISE
 IF *OTHERWISE;

 MOVE *ALL (To: PAR From: DB1);

 ENDIF;

}


//?Chk plant floor controlled -- dont allow if yes  S00081  1/24/08 RMC
CASE;

// IF LCL.Trans Contol AS400/Plant is Plant
IF LCL.Trans_Contol_AS400_Plant = 'P';

// Send error message - 'Option Invalid.  Order is Plant Floor Controlled.'
ERROR(USR2329);
MSGPARM(*BLANK);

ENDIF;

ENDIF;

ENDIF;

//?S00081- if Seaboard org, you must enter an order/or load. cannot pick all
CASE;

// IF DTL.Scheduled Ship Date is entered
IF DTL.Scheduled_Ship_Date <> *ZERO;

// AND DTL.Order Number is Equal to zeros
AND DTL.Order_Number = *ZERO;

// AND DTL.Load ID is Blank
AND DTL.Load_ID = *ZERO;

EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
PARAMETER(DTL.Company_Number);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

// Send error message - 'Please enter an Order or a Load to be picked.'
ERROR(USR3884);
MSGPARM(DTL.Order_Number);
MSGPARM(DTL.Load_ID);

ENDIF;

ENDIF;

//?USER: User defined action

//?Set job submit and print options
// Call program PMT Prt/Sbm Opt    SHR PV.
CALL PROGRAM(PMT Prt/Sbm Opt    SHR PV) ('PDKMPVR');
PARAMETER(''Print Pick Lists'');
PARAMETER(LCL.PRT_Printer_Device);
PARAMETER(LCL.PRT_Hold_Output_Sts);
PARAMETER(LCL.PRT_Save_Output_Sts);
PARAMETER(LCL.PRT_Number_of_Copies);
PARAMETER(LCL.PRT_Night_Queue_Run_Sts);
PARAMETER(LCL.PRT_Night_Queue);
PARAMETER('O/M');
PARAMETER(1);
PARAMETER(LCL.Hold_On_Jobq);
PARAMETER(LCL.Job_Log_Create);
PARAMETER(LCL.Hold);
PARAMETER(LCL.Log);

//?Submit job for print
CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

//?Submit job for print
// IF *OTHERWISE
IF *OTHERWISE;

//?Convert numeric fields for CL
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Company Number Pass   USR = DTL.Company Number
LCL.Company_Number_Pass_USR = DTL.Company_Number;

// LCL.Order Number 1  PASS  USR = DTL.Order Number
LCL.Order_Number_1_PASS_USR = DTL.Order_Number;

// LCL.Load Id Pass = DTL.Load ID
LCL.Load_Id_Pass = DTL.Load_ID;

// LCL.Date 1          PASS  USR = DTL.Scheduled Ship Date
LCL.Date_1_PASS_USR = DTL.Scheduled_Ship_Date;

// LCL.Number of Copies Pass USR = LCL.PRT Number of Copies
LCL.Number_of_Copies_Pass_USR = LCL.PRT_Number_of_Copies;

ENDIF;

EXECUTE FUNCTION(RTV Co Document Dflts  RT) TYPE(RTVOBJ) FILE(PPAQREP)          AC1823355;
PARAMETER(DTL.Company_Number);
PARAMETER('PL');
PARAMETER('ACCTG');
PARAMETER(NLL.CDD_Name_of_Overlay);
PARAMETER(LCL.CDD_Program_Name);
PARAMETER(LCL.CDD_Printer_File_Name);
PARAMETER(NLL.CDD_Sender_Phone);
PARAMETER(NLL.CDD_Sender_Fax);
PARAMETER(NLL.Output_Queue);
PARAMETER(NLL.Hold_File);
PARAMETER(NLL.Save_File);
PARAMETER(NLL.Source_Drawer);
PARAMETER(NLL.Printer_Device_Type);
PARAMETER(NLL.Page_Length_2);
PARAMETER(NLL.Page_Width_2);
PARAMETER(NLL.Page_LPI);
PARAMETER(NLL.Page_CPI);
PARAMETER(NLL.Page_Overflow);
PARAMETER(NLL.Page_Rotation);
PARAMETER(NLL.CDD_Comment_1);
PARAMETER(NLL.CDD_Comment_2);
PARAMETER(NLL.CDD_Comment_3);
PARAMETER(NLL.CDD_Comment_4);
PARAMETER(NLL.CDD_Comment_5);
{
 //?USER: Initialize routine

 //?** Used by HPE in STR Hog Prcr & Eval Sys-HPE System
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Retrieve message - 'JOB(&1) jobq(&2) log(&3) hold(&4)'
PGM.*Sbmjob_override_string = RTVMSG(USR2684);
PARAMETER('PRTPIKSLP');
PARAMETER(LCL.PRT_Night_Queue);
PARAMETER(LCL.Log);
PARAMETER(LCL.Hold);

// Call program Prt Pick Slips DLY    CL.
SBMJOB;
CALL PROGRAM(Prt Pick Slips DLY    CL) ('PMN0UPC');
PARAMETER(LCL.Company_Number_Pass_USR);
PARAMETER(LCL.Order_Number_1_PASS_USR);
PARAMETER(LCL.Load_Id_Pass);
PARAMETER(LCL.Date_1_PASS_USR);
PARAMETER(LCL.PRT_Printer_Device);
PARAMETER(LCL.PRT_Hold_Output_Sts);
PARAMETER(LCL.PRT_Save_Output_Sts);
PARAMETER(LCL.PRT_Night_Queue);
PARAMETER(LCL.Hold);
PARAMETER(LCL.Log);
PARAMETER(JOB.*USER);
PARAMETER(LCL.Number_of_Copies_Pass_USR);
SBMJOBOVR JOB(PRTPIKSLP);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

