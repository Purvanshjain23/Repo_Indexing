// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PUDYDFR
// ?Date: 14.08.2025 Time: 03:50:05
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PAR.Application Code = CND.Order Management System
PAR.Application_Code = 'OMS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

// PGM.*Scan limit = CND.50000
PGM.*Scan_limit = 50000;

//?USER: Initialize subfile control

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

// LCL.Ship From Warehouse = CTL.Ship From Warehouse
LCL.Ship_From_Warehouse = CTL.Ship_From_Warehouse;

// LCL.Header Status = CTL.Header Status
LCL.Header_Status = CTL.Header_Status;

// LCL.Load ID = CTL.Load ID
LCL.Load_ID = CTL.Load_ID;

// LCL.Load Status = CTL.Load Status
LCL.Load_Status = CTL.Load_Status;

// LCL.Scheduled Ship Date = CTL.Scheduled Ship Date
LCL.Scheduled_Ship_Date = CTL.Scheduled_Ship_Date;

// LCL.Actual Shipped Date = CTL.Actual Shipped Date
LCL.Actual_Shipped_Date = CTL.Actual_Shipped_Date;

//?USER: Initialize subfile record from DBF record

//?Select Only Regular Orders 'OR' "TR"
CASE;

// IF DB1.Order Type - Sales is Regular Order
IF DB1.Order_Type_Sales = 'OR';

// OR DB1.Order Type - Sales is Transfer Order
OR DB1.Order_Type_Sales = 'TR';

//?Select Only Regular Orders 'OR' "TR"
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select Ship From Warehouse that are setup for EDI Transaction.
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(RTV Whse/Non Cancelled RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428700;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(1);
PARAMETER(1);
PARAMETER(RCD.Ship_From_Warehouse);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?C2748:  Changed RTV Warehouse Code RT to exclude Cancelled lines.
 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF *OTHERWISE
 IF *OTHERWISE;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


EXECUTE FUNCTION(Rtv WHS Interchg All  RT) TYPE(RTVOBJ) FILE(PNG0REP)           AC2138766;
PARAMETER(RCD.Ship_From_Warehouse);
PARAMETER('WSO');
PARAMETER(NLL.Class_Code);
PARAMETER(NLL.EDI_Trading_Partner_No);
PARAMETER(NLL.EDI_Whs_Duns_Number);
PARAMETER(LCL.Record_Status);
PARAMETER(NLL.Create_Date);
PARAMETER(NLL.Create_Time);
PARAMETER(NLL.Create_User);
PARAMETER(NLL.Create_Program);
PARAMETER(NLL.Change_Date);
PARAMETER(NLL.Change_Time);
PARAMETER(NLL.Change_User);
PARAMETER(NLL.Change_Program);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Record Status is Active
IF LCL.Record_Status = 'A';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Select by User Defined Selectors.
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?Select By Ship From Warehouse.
CASE;

// IF CTL.Ship From Warehouse is Blanks
IF CTL.Ship_From_Warehouse = *BLANK;

// OR CTL.Ship From Warehouse EQ RCD.Ship From Warehouse
OR CTL.Ship_From_Warehouse = RCD.Ship_From_Warehouse;

//?Select By Ship From Warehouse.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select By Header Status.
CASE;

// IF CTL.Header Status is *None
IF CTL.Header_Status = *BLANK;

// OR CTL.Header Status EQ RCD.Header Status
OR CTL.Header_Status = RCD.Header_Status;

//?Select By Header Status.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select By Load ID.
CASE;

// IF CTL.Load ID is Blank
IF CTL.Load_ID = *ZERO;

// OR CTL.Load ID EQ RCD.Load ID
OR CTL.Load_ID = RCD.Load_ID;

//?Select By Load ID.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select By Scheduled Ship Date.
CASE;

// IF CTL.Scheduled Ship Date is not entered
IF CTL.Scheduled_Ship_Date = *ZERO;

// OR CTL.Scheduled Ship Date EQ RCD.Scheduled Ship Date
OR CTL.Scheduled_Ship_Date = RCD.Scheduled_Ship_Date;

//?Select By Scheduled Ship Date.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select By Actual Shipped Date.
CASE;

// IF CTL.Actual Shipped Date is not entered
IF CTL.Actual_Shipped_Date = *ZERO;

// OR CTL.Actual Shipped Date EQ RCD.Actual Shipped Date
OR CTL.Actual_Shipped_Date = RCD.Actual_Shipped_Date;

//?Select By Actual Shipped Date.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select By Load Status.
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(RTV Load Status 2      RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC2141306;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Load_Status);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Select By Load Status.
CASE;

// IF CTL.Load Status is *Blank
IF CTL.Load_Status = *BLANK;

// OR CTL.Load Status EQ RCD.Load Status
OR CTL.Load_Status = RCD.Load_Status;

//?Select By Load Status.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Sum Quantity & Populate Other Screen Data.
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(Rtv Sum Qty Ord/Ship   RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2141352;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Quantity_Ordered_Tot1_USR);
PARAMETER(RCD.Quantity_Shipped_Tot1_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 // PAR.Total Quantity Ordered = PAR.Total Quantity Ordered + DB1.Quantity Ordered
 PAR.Total_Quantity_Ordered = PAR.Total_Quantity_Ordered + DB1.Quantity_Ordered;

 // PAR.Total Quantity Ship  USR = PAR.Total Quantity Ship  USR + DB1.Quantity Shipped Total
 PAR.Total_Quantity_Ship_USR = PAR.Total_Quantity_Ship_USR + DB1.Quantity_Shipped_Total;

 ENDIF;

}


//?Get/Set EDI 940/945 Status Info.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV EDI 940/945 Sts    RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2141241;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.OHE_EDI_Error_Reasons);
PARAMETER(RCD.OHE_EDI_940_Action);
PARAMETER(RCD.OHE_EDI_945_Action);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Departure DT/TM   RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC2062272;
PARAMETER(RCD.Load_ID);
PARAMETER(LCL.Truck_Departure_Date);
PARAMETER(LCL.Truck_Departure_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Set EDI 940 Action Desc.
CASE;

// IF RCD.OHE EDI 940 Action is Blanks
IF RCD.OHE_EDI_940_Action = *BLANK;

// RCD.EDI 940 Action Dsc USR = CON.*BLANK
RCD.EDI_940_Action_Dsc_USR = *BLANK;

//?Set EDI 940 Action Desc.
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.EDI 940 Action Dsc USR = Condition name of RCD.OHE EDI 940 Action
RCD.EDI_940_Action_Dsc_USR = RTVCND(RCD.OHE_EDI_940_Action);

ENDIF;

//?Set EDI 945 Action Desc.
CASE;

// IF RCD.OHE EDI 945 Action is Blanks
IF RCD.OHE_EDI_945_Action = *BLANK;

// RCD.EDI 945 Action Dsc USR = CON.*BLANK
RCD.EDI_945_Action_Dsc_USR = *BLANK;

//?Set EDI 945 Action Desc.
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.EDI 945 Action Dsc USR = Condition name of RCD.OHE EDI 945 Action
RCD.EDI_945_Action_Dsc_USR = RTVCND(RCD.OHE_EDI_945_Action);

CASE;

// IF LCL.Truck Departure Date is Entered
IF LCL.Truck_Departure_Date <> *ZERO;

// OR RCD.Header Status is Complete
OR RCD.Header_Status = 'C';

// RCD.EDI 945 Action Dsc USR = CONCAT(RCD.EDI 945 Action Dsc USR,CON.*,CON.*ZERO)
RCD.EDI_945_Action_Dsc_USR = RCD.EDI_945_Action_Dsc_USR + '*' (0);

ENDIF;

ENDIF;

//?Set EDI Error Reason Desc.
CASE;

// IF RCD.OHE EDI Error Reasons is Blank
IF RCD.OHE_EDI_Error_Reasons = *BLANK;

// RCD.Condition Desc. 2  USR = CND.not entered
RCD.Condition_Desc_2_USR = *BLANK;

//?Set EDI Error Reason Desc.
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Condition Desc. 2  USR = Condition name of RCD.OHE EDI Error Reasons
RCD.Condition_Desc_2_USR = RTVCND(RCD.OHE_EDI_Error_Reasons);

ENDIF;

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

CASE;

// IF CTL.Ship From Warehouse NE LCL.Ship From Warehouse
IF CTL.Ship_From_Warehouse <> LCL.Ship_From_Warehouse;

// OR CTL.Load ID NE LCL.Load ID
OR CTL.Load_ID <> LCL.Load_ID;

// OR CTL.Scheduled Ship Date NE LCL.Scheduled Ship Date
OR CTL.Scheduled_Ship_Date <> LCL.Scheduled_Ship_Date;

// OR CTL.Header Status NE LCL.Header Status
OR CTL.Header_Status <> LCL.Header_Status;

// OR CTL.Load Status NE LCL.Load Status
OR CTL.Load_Status <> LCL.Load_Status;

// OR CTL.Actual Shipped Date NE LCL.Actual Shipped Date
OR CTL.Actual_Shipped_Date <> LCL.Actual_Shipped_Date;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F11=dsp edi 945 errors
CASE;

// IF CTL.*CMD key is CF11
IF CTL.*CMD_key = '11';

// Call program Dsp EDI 945 Processed DF.
CALL PROGRAM(Dsp EDI 945 Processed DF) ('PUI8DFR');

ENDIF;

//?F22=Email Orders not billed
CASE;

// IF CTL.*CMD key is CF22
IF CTL.*CMD_key = '22';

//?Validate Ship From Whs and Email Report via SEQUEL.
CASE;

// IF CTL.Ship From Warehouse is Blanks
IF CTL.Ship_From_Warehouse = *BLANK;

// Send error message - 'Warehouse Code is required.'
ERROR(USR2015);
MSGPARM(CTL.Ship_From_Warehouse);

//?Validate Ship From Whs and Email Report via SEQUEL.
// IF CTL.Ship From Warehouse is Not Blanks
IF CTL.Ship_From_Warehouse <> *BLANK;

EXECUTE FUNCTION(Rtv WHS Interchg All  RT) TYPE(RTVOBJ) FILE(PNG0REP)           AC2138766;
PARAMETER(CTL.Ship_From_Warehouse);
PARAMETER('WSO');
PARAMETER(NLL.Class_Code);
PARAMETER(NLL.EDI_Trading_Partner_No);
PARAMETER(NLL.EDI_Whs_Duns_Number);
PARAMETER(LCL.Record_Status);
PARAMETER(NLL.Create_Date);
PARAMETER(NLL.Create_Time);
PARAMETER(NLL.Create_User);
PARAMETER(NLL.Create_Program);
PARAMETER(NLL.Change_Date);
PARAMETER(NLL.Change_Time);
PARAMETER(NLL.Change_User);
PARAMETER(NLL.Change_Program);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF NOT LCL.Record Status is Active
IF ! LCL.Record_Status = 'A';

// Send error message - 'EDI WHS Interchange not found/active for warehouse &1.'
ERROR(USR5013);
MSGPARM(CTL.Ship_From_Warehouse);

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Email Address = CON.*BLANK
LCL.Email_Address = *BLANK;

// Call program Pmt Enter Email Addr  PV.
CALL PROGRAM(Pmt Enter Email Addr  PV) ('POWGPVR');
PARAMETER(LCL.Email_Address);

//?Export Data to Excel via SEQUEL.
CASE;

// IF LCL.Email Address is Entered
IF LCL.Email_Address <> *BLANK;

// Call program PRT Whs Orders to Ship CL.
SBMJOB;
CALL PROGRAM(PRT Whs Orders to Ship CL) ('PUD1UPC');
PARAMETER(CTL.Ship_From_Warehouse);
PARAMETER(LCL.Email_Address);
SBMJOBOVR JOB(PRTEDIWOTS);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// Send information message - '&1'
MESSAGE(USR4976 *INFO);
MSGPARM('Job submitted.');

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?Subfile Option Processing.
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

//?Display Order Inquiry.
CASE;

// IF RCD.Event Code is Shipped Thru 07 History
IF RCD.Event_Code >= '04';
AND RCD.Event_Code <= '07';

// Call program DSP Ord Inq Ship Dtl   DF.
CALL PROGRAM(DSP Ord Inq Ship Dtl   DF) ('PDP3DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(NLL.Order_Sequence_Number);
PARAMETER(PAR.Application_Code);

//?Display Order Inquiry.
// IF *OTHERWISE
IF *OTHERWISE;

// Call program DSP Ord Inquiry Detail DF.
CALL PROGRAM(DSP Ord Inquiry Detail DF) ('PDPZDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(NLL.Order_Sequence_Number);
PARAMETER(NLL.Order_Secondary_Line_Seq);
PARAMETER(PAR.Application_Code);

ENDIF;

// CTL.Order Number = RCD.Order Number
CTL.Order_Number = RCD.Order_Number;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Subfile Option Processing.
// IF RCD.*SFLSEL is Option 7
IF RCD.*SFLSEL = '7'/'7';

//?Allow for Opt 7=Upd Depart f/Invoice?
CASE;

// IF RCD.OHE EDI 945 Action is Received
IF RCD.OHE_EDI_945_Action = 'R';

EXECUTE FUNCTION(Rtv for EDI 945 Info  RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC2157434;
PARAMETER(RCD.Load_ID);
PARAMETER(LCL.BOL_Complete_Date);
PARAMETER(LCL.BOL_Complete_Time);
PARAMETER(LCL.Truck_Departure_Date);
PARAMETER(LCL.Truck_Departure_Time);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Truck Departure Date is not entered
IF LCL.Truck_Departure_Date = *ZERO;

// AND LCL.Truck Departure Time is Not Entered
AND LCL.Truck_Departure_Time = *ZERO;

EXECUTE FUNCTION(Val Opt7=Mark Rdy 4/InvRT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC2157289;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.Last_Stop_Drop_is_EDI_945);
PARAMETER(LCL.All_Orders_Shipped_2_USR);
{
 //?USER: Initialize routine

 // PAR.Last Stop/Drop is EDI 945 = CND.Yes
 PAR.Last_Stop_Drop_is_EDI_945 = 'Y';

 // PAR.All Orders Shipped 2 USR = CND.Yes
 PAR.All_Orders_Shipped_2_USR = 'Y';

 // LCL.First Time Flag = CND.Yes
 LCL.First_Time_Flag = 'Y';

 //?USER: Process Data record

 //?First Time Thru, Chk If Order from Last Stop/Drop has EDI945 Sts='R'.
 CASE;

 // IF LCL.First Time Flag is Yes
 IF LCL.First_Time_Flag = 'Y';

 // LCL.First Time Flag = CND.NO
 LCL.First_Time_Flag = 'N';

 //?If Order # matches then we know it has an EDI 945 Status of R.
 CASE;

 // IF DB1.Order Number EQ PAR.Order Number
 IF DB1.Order_Number = PAR.Order_Number;

 //?If Order # matches then we know it has an EDI 945 Status of R.
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV EDI 940/945 Sts    RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2141241;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(NLL.OHE_EDI_Error_Reasons);
 PARAMETER(LCL.OHE_EDI_940_Action);
 PARAMETER(LCL.OHE_EDI_945_Action);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.OHE EDI 940 Action is Sent
 IF LCL.OHE_EDI_940_Action = 'S';

 //?RMC only if 940 was sent - dont chk this for not EDI orders
 //?Do NOT allow Opt 7 if NOT in 'R' (Received) status.
 CASE;

 // IF NOT LCL.OHE EDI 945 Action is Received
 IF ! LCL.OHE_EDI_945_Action = 'R';

 // PAR.Last Stop/Drop is EDI 945 = CND.No
 PAR.Last_Stop_Drop_is_EDI_945 = 'N';

 QUIT;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?Check if All Orders for Load has been shipped.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Header Status      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1231329;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Header_Status);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Do NOT allow Opt 7 if NOT in '5' (Shipped) Status.
 CASE;

 // IF LCL.Header Status is Not confirmed
 IF LCL.Header_Status = 'L'/'A'/'X'/'C'/'E'/'H';

 // PAR.All Orders Shipped 2 USR = CND.No
 PAR.All_Orders_Shipped_2_USR = 'N';

 QUIT;

 ENDIF;

 ENDIF;

}


//?Update Truck Departure Dte/Tme or Throw Error Mesasge.
CASE;

// IF LCL.Last Stop/Drop is EDI 945 is No
IF LCL.Last_Stop_Drop_is_EDI_945 = 'N';

// LCL.Generic Message 80 USR = CONCAT(CON.Order from last Stop/Drop,CON.for EDI 945 is not in,CON.1
LCL.Generic_Message_80_USR = 'Order from last Stop/Drop' + 'for EDI 945 is not in' (1);

// LCL.Generic Message 80 USR = CONCAT(LCL.Generic Message 80 USR,CON.'Received' status.,CON.1)
LCL.Generic_Message_80_USR = LCL.Generic_Message_80_USR + ''Received' status.' (1);

// Send error message - '&1'
ERROR(USR5085);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(RCD.*SFLSEL);

QUIT;

//?Update Truck Departure Dte/Tme or Throw Error Mesasge.
// IF LCL.All Orders Shipped 2 USR is No
IF LCL.All_Orders_Shipped_2_USR = 'N';

// LCL.Generic Message 80 USR = CONCAT(CON.Option not allowed. Multi,CON.-Warehouse Load.,CON.*ZERO)
LCL.Generic_Message_80_USR = 'Option not allowed. Multi' + '-Warehouse Load.' (*ZERO);

// Send error message - '&1'
ERROR(USR5085);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(RCD.*SFLSEL);

QUIT;

//?Update Truck Departure Dte/Tme or Throw Error Mesasge.
// IF *OTHERWISE
IF *OTHERWISE;

//?Update Truck Departure Date/Time with BOL Complete Date/Time.
EXECUTE FUNCTION(CHG Truck Depart Dt/Tm CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC2157435;
PARAMETER(RCD.Load_ID);
PARAMETER(LCL.BOL_Complete_Date);
PARAMETER(LCL.BOL_Complete_Time);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// CTL.Order Number = RCD.Order Number
CTL.Order_Number = RCD.Order_Number;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// LCL.Generic Message 80 USR = CONCAT(CON.Truck Departure Date/Time,CON.was updated.,CON.1)
LCL.Generic_Message_80_USR = 'Truck Departure Date/Time' + 'was updated.' (1);

// Send information message - '&1'
MESSAGE(USR4976 *INFO);
MSGPARM(LCL.Generic_Message_80_USR);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Generic Message 80 USR = CONCAT(CON.BOL already completed. Op,CON.tion invalid.,CON.*ZERO)
LCL.Generic_Message_80_USR = 'BOL already completed. Op' + 'tion invalid.' (*ZERO);

// Send error message - '&1'
ERROR(USR5085);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(RCD.*SFLSEL);

QUIT;

ENDIF;

//?Allow for Opt 7=Upd Depart f/Invoice?
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Generic Message 80 USR = CONCAT(CON.EDI 945 is not in 'Receiv,CON.ed' status.,CON.*ZERO)
LCL.Generic_Message_80_USR = 'EDI 945 is not in 'Receiv' + 'ed' status.' (*ZERO);

// Send error message - '&1'
ERROR(USR5085);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(RCD.*SFLSEL);

QUIT;

ENDIF;

//?Subfile Option Processing.
// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

// Call program DSP Order vs. Ship Dtl DF.
CALL PROGRAM(DSP Order vs. Ship Dtl DF) ('PDP7DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Type_Sales);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Ship_To_Name);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER(RCD.Order_Date);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Header_Status);
PARAMETER(RCD.Credit_Hold);
PARAMETER(RCD.Production_Hold);
PARAMETER(RCD.New_Customer_Hold);
PARAMETER(RCD.Sales_Route_Code);
PARAMETER(PAR.Application_Code);

// CTL.Order Number = RCD.Order Number
CTL.Order_Number = RCD.Order_Number;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Subfile Option Processing.
// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

// Call program DSP Dispatch/Tracer    DF.
CALL PROGRAM(DSP Dispatch/Tracer    DF) ('PDT3DFR');
PARAMETER(RCD.Load_ID);

// CTL.Order Number = RCD.Order Number
CTL.Order_Number = RCD.Order_Number;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Subfile Option Processing.
// IF RCD.*SFLSEL is Option 16
IF RCD.*SFLSEL = '16';

// Call program Dsp Order Header       PV.
CALL PROGRAM(Dsp Order Header       PV) ('OMB5PVR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER(RCD.Date_of_Original_Entry);
PARAMETER(RCD.Requested_Delivery_Time);
PARAMETER(PAR.Application_Code);

// CTL.Order Number = RCD.Order Number
CTL.Order_Number = RCD.Order_Number;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Subfile Option Processing.
// IF RCD.*SFLSEL is Option 17
IF RCD.*SFLSEL = '17';

//?Update ECP057 to Unprocessed & Blank Out OHE EDI 945 Error Rsn/Action.
CASE;

// IF RCD.OHE EDI 945 Action is Rcv-Error
IF RCD.OHE_EDI_945_Action = 'E';

EXECUTE FUNCTION(RTV Cr/Pr Hold        RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1920451;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(NLL.Scheduled_Ship_Date);
PARAMETER(RCD.Credit_Hold);
PARAMETER(RCD.Production_Hold);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Check Order HDR Credit/Production Hold Status.
CASE;

// IF RCD.Credit Hold is Yes
IF RCD.Credit_Hold = 'Y';

// AND RCD.OHE EDI Error Reasons is Credit Hold
AND RCD.OHE_EDI_Error_Reasons = 'CRDHD';

// LCL.Generic Message 80 USR = CONCAT(CON.Cannot ship Order due to,CON.Credit Hold.,CON.1)
LCL.Generic_Message_80_USR = 'Cannot ship Order due to' + 'Credit Hold.' (1);

// Send error message - '&1'
ERROR(USR5085);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(RCD.*SFLSEL);

QUIT;

//?Check Order HDR Credit/Production Hold Status.
// IF RCD.Production Hold is Yes
IF RCD.Production_Hold = 'Y';

// AND RCD.OHE EDI Error Reasons is Product'n Hold
AND RCD.OHE_EDI_Error_Reasons = 'PRDHD';

// LCL.Generic Message 80 USR = CONCAT(CON.Cannot ship Order due to,CON.Production Hold.,CON.1)
LCL.Generic_Message_80_USR = 'Cannot ship Order due to' + 'Production Hold.' (1);

// Send error message - '&1'
ERROR(USR5085);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(RCD.*SFLSEL);

QUIT;

ENDIF;

//?Credit Hold cleared? Yes, check Prod Hold=Y to reset 945 Error to PRDHD.
CASE;

// IF RCD.Credit Hold is No
IF RCD.Credit_Hold = 'N';

// AND RCD.OHE EDI Error Reasons is Credit Hold
AND RCD.OHE_EDI_Error_Reasons = 'CRDHD';

// AND RCD.Production Hold is Yes
AND RCD.Production_Hold = 'Y';

//?Update ECP057 & OHE files to show 'PRDHD' error.
EXECUTE FUNCTION(Upd EDI Error Reason  RT) TYPE(RTVOBJ) FILE(ECP057)            AC2157529;
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Company_Number);
PARAMETER('PRDHD');
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Load_ID);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(CHG Rcd Procd/Err Rsn CH) TYPE(CHGOBJ) FILE(ECP057)            AC2157528;
 PARAMETER(DB1.EDI_SURROGATE_NUMBER);
 PARAMETER(DB1.EDI_Record_Processed);
 PARAMETER(PAR.OHE_EDI_Error_Reasons);
 EXECUTE FUNCTION(Upd OHE EDI 945 Action RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2142925;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.W0602_Depositor_Order_Nbr);
 PARAMETER(PAR.OHE_EDI_Error_Reasons);
 PARAMETER('E');
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Actual_Shipped_Date);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(CRT OHE EDI 945 Action CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC2142926;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Actual_Shipped_Date);
  PARAMETER(PAR.OHE_EDI_Error_Reasons);
  PARAMETER(PAR.OHE_EDI_945_Action);
  {
   //?USER: Processing before Data update

   // DB1.Record Status = CND.Active
   DB1.Record_Status = 'A';

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

   // DB1.Job Name = JOB.*PROGRAM
   DB1.Job_Name = JOB.*PROGRAM;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(CHG OHE EDI 945 Action CH) TYPE(CHGOBJ) FILE(PMAMREP)          AC2142924;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.OHE_EDI_Error_Reasons);
  PARAMETER(PAR.OHE_EDI_945_Action);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

   // DB1.Job Name = JOB.*PROGRAM
   DB1.Job_Name = JOB.*PROGRAM;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

  }

 }

}


// CTL.Order Number = RCD.Order Number
CTL.Order_Number = RCD.Order_Number;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// LCL.Generic Message 80 USR = CONCAT(CON.Order cannot be reprocess,CON.ed due to Production Hold,C
LCL.Generic_Message_80_USR = 'Order cannot be reprocess' + 'ed due to Production Hold' (*ZERO);

// LCL.Generic Message 80 USR = CONCAT(LCL.Generic Message 80 USR,CON..,CON.*ZERO)
LCL.Generic_Message_80_USR = LCL.Generic_Message_80_USR + '.' (*ZERO);

// Send information message - '&1'
MESSAGE(USR4976 *INFO);
MSGPARM(LCL.Generic_Message_80_USR);

ENDIF;

//?No Errors, Continue with Update.
CASE;

// IF RCD.Credit Hold is No
IF RCD.Credit_Hold = 'N';

// AND RCD.Production Hold is No
AND RCD.Production_Hold = 'N';

//?Update to 'Unprocessed' so next JS 'IB945AS400' run will process it.
EXECUTE FUNCTION(Upd Reproces f/Hold RlsRT) TYPE(RTVOBJ) FILE(ECP057)           AC2157572;
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Company_Number);
PARAMETER(*BLANK);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Load_ID);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(CHG Rcd Procd/Err Rsn CH) TYPE(CHGOBJ) FILE(ECP057)            AC2157528;
 PARAMETER(DB1.EDI_SURROGATE_NUMBER);
 PARAMETER('N');
 PARAMETER(PAR.OHE_EDI_Error_Reasons);
}


EXECUTE FUNCTION(Upd OHE EDI 945 Action RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2142925;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Actual_Shipped_Date);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(CRT OHE EDI 945 Action CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC2142926;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER(PAR.OHE_EDI_Error_Reasons);
 PARAMETER(PAR.OHE_EDI_945_Action);
 {
  //?USER: Processing before Data update

  // DB1.Record Status = CND.Active
  DB1.Record_Status = 'A';

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

 }

 //?USER: Process Data record

 EXECUTE FUNCTION(CHG OHE EDI 945 Action CH) TYPE(CHGOBJ) FILE(PMAMREP)          AC2142924;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.OHE_EDI_Error_Reasons);
 PARAMETER(PAR.OHE_EDI_945_Action);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

 }

}


// CTL.Order Number = RCD.Order Number
CTL.Order_Number = RCD.Order_Number;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// LCL.Generic Message 80 USR = CONCAT(CON.Order for EDI 945 has bee,CON.n updated to reprocess.,CON
LCL.Generic_Message_80_USR = 'Order for EDI 945 has bee' + 'n updated to reprocess.' (*ZERO);

// Send information message - '&1'
MESSAGE(USR4976 *INFO);
MSGPARM(LCL.Generic_Message_80_USR);

ENDIF;

//?Update ECP057 to Unprocessed & Blank Out OHE EDI 945 Error Rsn/Action.
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Generic Message 80 USR = CONCAT(CON.EDI 945 status is not in,CON.error. Option invalid.,CON.1
LCL.Generic_Message_80_USR = 'EDI 945 status is not in' + 'error. Option invalid.' (1);

// Send error message - '&1'
ERROR(USR5085);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(RCD.*SFLSEL);

QUIT;

ENDIF;

//?Subfile Option Processing.
// IF RCD.*SFLSEL is Option 19
IF RCD.*SFLSEL = '19';

//?Blank Out OHE EDI 945 Error Rsn/Action.
CASE;

// IF RCD.OHE EDI 945 Action is Rcv-Error
IF RCD.OHE_EDI_945_Action = 'E';

//?No Errors, Continue with Update.
CASE;

// IF RCD.OHE EDI Error Reasons is Order Status
IF RCD.OHE_EDI_Error_Reasons = 'ORDST';

EXECUTE FUNCTION(Upd OHE EDI 945 Action RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2142925;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(*BLANK);
PARAMETER('R');
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Actual_Shipped_Date);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(CRT OHE EDI 945 Action CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC2142926;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER(PAR.OHE_EDI_Error_Reasons);
 PARAMETER(PAR.OHE_EDI_945_Action);
 {
  //?USER: Processing before Data update

  // DB1.Record Status = CND.Active
  DB1.Record_Status = 'A';

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

 }

 //?USER: Process Data record

 EXECUTE FUNCTION(CHG OHE EDI 945 Action CH) TYPE(CHGOBJ) FILE(PMAMREP)          AC2142924;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.OHE_EDI_Error_Reasons);
 PARAMETER(PAR.OHE_EDI_945_Action);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

 }

}


// CTL.Order Number = RCD.Order Number
CTL.Order_Number = RCD.Order_Number;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// LCL.Generic Message 80 USR = CONCAT(CON.Error for EDI 945 has bee,CON.n cleared.,CON.*ZERO)
LCL.Generic_Message_80_USR = 'Error for EDI 945 has bee' + 'n cleared.' (*ZERO);

// Send information message - '&1'
MESSAGE(USR4976 *INFO);
MSGPARM(LCL.Generic_Message_80_USR);

ENDIF;

//?No Errors, Continue with Update- clear error, dont reprocess ecp057
CASE;

// IF RCD.OHE EDI Error Reasons is Order Load
IF RCD.OHE_EDI_Error_Reasons = 'ORDLD';

EXECUTE FUNCTION(Upd OHE EDI 945 Action RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2142925;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Actual_Shipped_Date);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(CRT OHE EDI 945 Action CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC2142926;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER(PAR.OHE_EDI_Error_Reasons);
 PARAMETER(PAR.OHE_EDI_945_Action);
 {
  //?USER: Processing before Data update

  // DB1.Record Status = CND.Active
  DB1.Record_Status = 'A';

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

 }

 //?USER: Process Data record

 EXECUTE FUNCTION(CHG OHE EDI 945 Action CH) TYPE(CHGOBJ) FILE(PMAMREP)          AC2142924;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.OHE_EDI_Error_Reasons);
 PARAMETER(PAR.OHE_EDI_945_Action);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

 }

}


// CTL.Order Number = RCD.Order Number
CTL.Order_Number = RCD.Order_Number;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// LCL.Generic Message 80 USR = CONCAT(CON.Error for EDI 945 has bee,CON.n cleared.,CON.*ZERO)
LCL.Generic_Message_80_USR = 'Error for EDI 945 has bee' + 'n cleared.' (*ZERO);

// Send information message - '&1'
MESSAGE(USR4976 *INFO);
MSGPARM(LCL.Generic_Message_80_USR);

ENDIF;

//?Blank Out OHE EDI 945 Error Rsn/Action.
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Generic Message 80 USR = CONCAT(CON.EDI 945 status is not in,CON.error. Option invalid.,CON.1
LCL.Generic_Message_80_USR = 'EDI 945 status is not in' + 'error. Option invalid.' (1);

// Send error message - '&1'
ERROR(USR5085);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(RCD.*SFLSEL);

QUIT;

ENDIF;

//?Subfile Option Processing.
// IF RCD.*SFLSEL is Test
IF RCD.*SFLSEL = 'T';

//?DISPLAY 945
// LCL.W0602 Depositor Order Nbr = RCD.Order Number
LCL.W0602_Depositor_Order_Nbr = RCD.Order_Number;

EXECUTE FUNCTION(Rtv Last EDI 945 f/ord RT) TYPE(RTVOBJ) FILE(ECP057)           AC2157765;
PARAMETER(LCL.W0602_Depositor_Order_Nbr);
PARAMETER(LCL.EDI_SURROGATE_NUMBER);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program DSP EDI WHS 945 HEADER DR.
CALL PROGRAM(DSP EDI WHS 945 HEADER DR) ('PUI0D1R');
PARAMETER(LCL.EDI_SURROGATE_NUMBER);

//?Subfile Option Processing.
// IF RCD.*SFLSEL is Market Price
IF RCD.*SFLSEL = 'M';

//?MAKE EDI 945 AS NEW
// Call program Exc Create EDI f/Lock XF.
CALL PROGRAM(Exc Create EDI f/Lock XF) ('PUDNXFR');
PARAMETER(RCD.Load_ID);

EXECUTE FUNCTION(Rtv Chg STS to NEW    RT) TYPE(RTVOBJ) FILE(ECP050)            AC2177799;
PARAMETER('N');
PARAMETER(RCD.Order_Number);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.EDI-Record Processed is Not Processed
 IF DB1.EDI_Record_Processed = 'N';

 CASE;

 // IF DB1.W0501 Order Status Code is R-Change
 IF DB1.W0501_Order_Status_Code = 'R';

 EXECUTE FUNCTION(Chg EDI WHS Ship Ord  CH) TYPE(CHGOBJ) FILE(ECP050)            AC2022912;
 PARAMETER(DB1.EDI_SURROGATE_NUMBER);
 PARAMETER(DB1.G6202_DELIVERY_DATE_WSO);
 PARAMETER(DB1.TRADE_PARTNER_CODE);
 PARAMETER(DB1.EDI_Record_Processed);
 PARAMETER(PAR.W0501_Order_Status_Code);
 PARAMETER(DB1.W0502_Order_Number);
 PARAMETER(DB1.W0503_Customer_PO);
 PARAMETER(DB1.W0504_Load_Position);
 PARAMETER(DB1.W0505_Shipment_Num_BOL);
 PARAMETER(DB1.W6601_Shipment_Method);
 PARAMETER(DB1.W6602_Transportation_Type);
 PARAMETER(DB1.W6604_Unit_Load_Option);
 PARAMETER(DB1.W7601_Tot_Cases_Ordered);
 PARAMETER(DB1.G6202_Ship_Date_WSO);
 PARAMETER(DB1.N0902_Palletize);
 PARAMETER(DB1.N0902_Pallet_Type);
 PARAMETER(DB1.N0902_Shrink_Wrap);
 PARAMETER(DB1.N0902_Slip_Sheet);
 ENDIF;

 ENDIF;

}


//?Subfile Option Processing.
// IF RCD.*SFLSEL is Usage
IF RCD.*SFLSEL = 'U';

//?DELETE MANIFEST AFTER UNSHIP- SO THEY CAN REBILL IT MANUALLY-RESET OD/OHE
CASE;

// IF RCD.Load Status is Lock
IF RCD.Load_Status = 'L';

// LCL.Order Number Alpha = CVTVAR(RCD.Order Number)
LCL.Order_Number_Alpha = CVTVAR(RCD.Order_Number);

// LCL.Company Number Alpha = CVTVAR(RCD.Company Number)
LCL.Company_Number_Alpha = CVTVAR(RCD.Company_Number);

// Call program Exc Undo EDI 945-unshp UP.
CALL PROGRAM(Exc Undo EDI 945-unshp UP) ('PUO0UPR');
PARAMETER(LCL.Company_Number_Alpha);
PARAMETER(LCL.Order_Number_Alpha);

ENDIF;

ENDIF;

//?USER: Process command keys

CASE;

// IF CTL.*CMD key is *Reload
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF CTL.*CMD key is *Print List
IF CTL.*CMD_key = '21';

// PAR.PRT Hold Output Sts = CND.*NO
PAR.PRT_Hold_Output_Sts = *NO;

// PAR.PRT Save Output Sts = CND.*NO
PAR.PRT_Save_Output_Sts = *NO;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Night Queue = CND.Not entered
PAR.PRT_Night_Queue = *BLANK;

// PAR.System Value Numeric = CON.1
PAR.System_Value_Numeric = 1;

// PAR.PRT Description = CON.Shipped Whs Transfer Rpt
PAR.PRT_Description = 'Shipped Whs Transfer Rpt';

//?!!!We don't need the From / To Date...
//?!!!Resetup Ship From/To Warehouse...
ENDIF;

