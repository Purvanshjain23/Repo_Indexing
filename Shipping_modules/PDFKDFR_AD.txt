// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDFKDFR
// ?Date: 14.08.2025 Time: 03:31:02
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?***** Change Log and Comments
DO;

//?RMC 7/7/16  Init to zero : lcl.scheduled ship date usr ... they
//?   are staying in here tying loads so it needs to be reset to -0-
//?** 03/07/2012 LJB E001859
//?   If Buyers Truck or Rail, Don't require selection to combine, skip
//?   combine altogether and set Load Status to Unlock.
//?   Create Change Log for Collect Load-Unlock Load
//?** 02/12/2012 LJB E001895
//?** Only prompt for ship date change if Seaboard
//?** 01/31/2012 LJB E001514
//?   Pass changed SSD to Load Header update, if it changed
//?** 02/04/2010 LJB E000233  Recompile only
//?** 09/30/2009 LJB E00495  When calculating Deadline Departure Date/Time
//?  first see if there is a carrier appt date/time - use if there is.
//?  In Combine Load option, in Display Sched Loads Confirm Prompt
//?** 08/06/2008 RMC E00180 when Combine is selected, compare ORDERED WEIGHT
//?  to min lbs when determing if load is underweight.  the sched wgt may
//?  still be -0-
//?** 07/07/2008 RMC E00180 when Combine is selected, if checking for
//?  underweight, update the load order weight because if the load
//?  is tied from F16=Load planning within O.E. the weight isnt updated yet
//?  yet
//?** 06/26/2008 RMC E00180 when Combine is selected, if the load is
//?     underweight then use log type "CMBWGT" so load will be unaccepted
//?     do the combine-underweight for Prepaid load only
//?** 01/21/2008 RMC E-     Create Change log for Combine process
//?          for all the orders on the load  -- New log type 'CMBLOD'
//?** 11/16/2007 LJB FP1251 Returned DDD/T will be zeros if there
//?**   is no Miles Between Cities record (mileage = zeros)
//?**   Load Header and Load Detail will be updated with zeros
//?** 10/23/2007  DLY029 Changes made for Daily's by someone
//?** 8/31/06 LJB workin - If a company number is passed in, put in on
//?        the screen in the Load Start company field
//?*****
//?5/17/04 RMC PKTR01 - Co is Load Start Co so dont restrict on CTL
//?7/30/04 RMC PKTR01 - Move load strart company back to the top of screen
//?PK0302    3/8/01
//?Get Company Value to determine if the Max Sched Ship Wt edit is done.
//?OMS169 - 8/26/96 - S. Schertz
//?Change 'Total Weight' to read 'Net Weight'.
//?Add 'Gross Weight' column to this screen before 'Scheduled Ship Date'
//?OMS184 - 9/09/96 - S. Schertz
//?1. Present the loads with Traffic Comments attached to them in
//?   a different color on the screen.
//?2. Add an option to get to the Traffic Comments from the PDFKDFR -
//?   WW Order Entry Loads screen.
ENDDO;

// PGM.*Scan limit = CND.999999
PGM.*Scan_limit = 999999;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(RTV Appl Whs Restrict  RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1959551;
PARAMETER(JOB.*USER);
PARAMETER(LCL.Application_WHS_Restrict);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

//?** Put parm Co# on screen unless it is blank
CASE;

// IF PAR.Company Number is Equal to zero
IF PAR.Company_Number = *ZERO;

// CTL.Company Number = WRK.Company Number
CTL.Company_Number = WRK.Company_Number;

//?** Put parm Co# on screen unless it is blank
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

ENDIF;

//?PK0302
//?Get Company Value to determine if the Max Sched Ship Wt edit is done.
EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(CTL.Company_Number);
PARAMETER('MAXFLAG');
PARAMETER(LCL.Max_Schd_Shp_Wt_Edit_Flg);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Status Flag 4  Y/N = CND.blank
LCL.Status_Flag_4_Y_N = *BLANK;

// Call program EXC Rtv Status        XF.
CALL PROGRAM(EXC Rtv Status        XF) ('PBXNXFR');
PARAMETER(CTL.Company_Number);
PARAMETER('TMSLDP');
PARAMETER(LCL.PFS_Carlisle_Active);

// Call program EXC Rtv Status-AS     XF.
CALL PROGRAM(EXC Rtv Status-AS     XF) ('PBX2XFR');
PARAMETER(CTL.Company_Number);
PARAMETER('TMSLDP');
PARAMETER(LCL.PFS_AccuSort_Active);

CASE;

// IF LCL.PFS Carlisle Active is Yes
IF LCL.PFS_Carlisle_Active = 'Y';

// AND LCL.PFS AccuSort Active is No
AND LCL.PFS_AccuSort_Active = 'N';

// PGM.*Return code = CND.Application access denied
PGM.*Return_code = 'USR0810';

RETURN;

ENDIF;

//?USER: Initialize subfile control

CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

CASE;

// IF LCL.Application WHS Restrict is yes
IF LCL.Application_WHS_Restrict = 'Y';

// CTL.Company Number = WRK.Company Number
CTL.Company_Number = WRK.Company_Number;

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

ENDIF;

// WRK.Company Number = CTL.Company Number
WRK.Company_Number = CTL.Company_Number;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

ENDIF;

//?USER: Initialize subfile record from DBF record

//?If CTL company chosen, RCD must match
CASE;

// IF CTL.Company Number is not equal to zero
IF CTL.Company_Number <> *ZERO;

// AND DB1.Company Number NE CTL.Company Number
AND DB1.Company_Number <> CTL.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Must either match passed in load (for order) or status=entered
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF DB1.Load Status is Entered
IF DB1.Load_Status = 'E';

// RCD.USR Display field = CND.yes
RCD.USR_Display_field = 'Y';

// IF DB1.Load ID EQ PAR.USR Load ID
IF DB1.Load_ID = PAR.USR_Load_ID;

// RCD.USR Display field = CND.no
RCD.USR_Display_field = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?RCD SEL: Rtv Maximum & Minimum pounds from Either Assigned or Dft truck
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF DB1.Truck Size is Not Entered
IF DB1.Truck_Size = *BLANK;

EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(RCD.Company_Number);
PARAMETER('DFTTRUCK');
PARAMETER(WRK.System_Value_Alpha);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.Truck Size = WRK.System Value Alpha
WRK.Truck_Size = WRK.System_Value_Alpha;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Truck Size = DB1.Truck Size
WRK.Truck_Size = DB1.Truck_Size;

ENDIF;

EXECUTE FUNCTION(Rtv Min & Max Pounds  RT) TYPE(RTVOBJ) FILE(OMFKREP)           AC1197715;
PARAMETER(WRK.Truck_Size);
PARAMETER(RCD.Maximum_pounds);
PARAMETER(RCD.Minimum_pounds);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV GrsWgt w/PltTr Ld RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1601442;
PARAMETER(RCD.Load_ID);
PARAMETER(*ZERO);
PARAMETER(RCD.USR_Weight_Accumulated);
PARAMETER(RCD.Load_Status);
{
 //?USER: Initialize routine

 // PAR.USR Weight Accumulated = CON.*ZERO
 PAR.USR_Weight_Accumulated = *ZERO;

 CASE;

 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 EXECUTE FUNCTION(RTV Pallet/Tare        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1585842;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Pallets_Loaded);
 PARAMETER(LCL.Avg_Pallet_Tare);
 PARAMETER(LCL.Tot_Pallet_Tare);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?***** Change log and comments
 DO;

 //?** 01/18/2010 PKD E000261 Pass the Average Pallet Tare
 ENDDO;

 //?USER: Process Data record

 //?01/18/10 PKD E000261 SEND in LCL.Avg Pallet Tare
 // Call program RTV Gross Wgt/Qty     XF.
 CALL PROGRAM(RTV Gross Wgt/Qty     XF) ('PQPQXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.USR_Weight_Accumulated);
 PARAMETER(LCL.Order_Quantity);
 PARAMETER(LCL.Avg_Pallet_Tare);

 //?USER: Exit processing

 CASE;

 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 EXECUTE FUNCTION(RTV Pallet/Tare        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1585842;
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.Pallets_Loaded);
 PARAMETER(LCL.Avg_Pallet_Tare);
 PARAMETER(LCL.Tot_Pallet_Tare);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.USR Weight Accumulated = PAR.USR Weight Accumulated + LCL.Tot Pallet Tare
 PAR.USR_Weight_Accumulated = PAR.USR_Weight_Accumulated + LCL.Tot_Pallet_Tare;

 ENDIF;

}


// RCD.Weight Adjust = RCD.USR Weight Accumulated
RCD.Weight_Adjust = RCD.USR_Weight_Accumulated;

//?Highlight load number if Traffic Comments exist.
EXECUTE FUNCTION(RTV Verify Trffc Cmnts RT) TYPE(RTVOBJ) FILE(PDKECPP)          AC1424786;
PARAMETER(RCD.Load_ID);
{
 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 QUIT;

}


//?Set Highlight Flag
CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// RCD.Include Todays Trans = CND.yes
RCD.Include_Todays_Trans = 'Y';

//?Set Highlight Flag
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Include Todays Trans = CND.no
RCD.Include_Todays_Trans = 'N';

ENDIF;

EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
PARAMETER(RCD.Company_Number);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(RCD.Company_Organization);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?DLY029 change
CASE;

// IF RCD.Company Organization is Daily's
IF RCD.Company_Organization = 'D';

EXECUTE FUNCTION(Rtv 1st Ord Spcl Inst RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1853680;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Special_Instructions);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?DLY029 change
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Special Instructions = CON.*BLANK
RCD.Special_Instructions = *BLANK;

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?F4=Prompt
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Company Number
IF PGM.*Cursor_field = CTL.Company_Number;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(CTL.Company_Number);

ENDIF;

ENDIF;

//?F5=Process Dsp Slot Activity
CASE;

// IF CTL.*CMD key is CF05
IF CTL.*CMD_key = '05';

// Call program Pmt Dsp Load Slot Act PV.
CALL PROGRAM(Pmt Dsp Load Slot Act PV) ('POJXPVR');
PARAMETER(CTL.Company_Number);

ENDIF;

//?F6=Process create load
CASE;

// IF CTL.*CMD key is *Create
IF CTL.*CMD_key = '06';

CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// AND CTL.Company Number is Equal to zero
AND CTL.Company_Number = *ZERO;

// Send error message - 'Company Number is required.'
ERROR(USR2183);
MSGPARM(CTL.Company_Number);

ENDIF;

CASE;

// IF CTL.Company Number is not equal to zero
IF CTL.Company_Number <> *ZERO;

// CTL.Load ID = CON.*ZERO
CTL.Load_ID = *ZERO;

// CTL.Load Status = WRK.BLANK
CTL.Load_Status = WRK.BLANK;

// Call program EDT Load Plan O.E.     DF.
CALL PROGRAM(EDT Load Plan O.E.     DF) ('PDFLDFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Load_Status);
PARAMETER(CTL.Total_Load_Order_Weight);
PARAMETER(PAR.Order_Number);

// Send information message - 'Load ID &1 Assigned.'
MESSAGE(USR2309 *INFO);
MSGPARM(CTL.Load_ID);

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F20=Edit Traffic Comments
CASE;

// IF CTL.*CMD key is CF20
IF CTL.*CMD_key = '20';

// Call program EDT PD Traffic Comment EF.
CALL PROGRAM(EDT PD Traffic Comment EF) ('PDCZEFR');
PARAMETER(CTL.Load_ID);

ENDIF;

EXECUTE FUNCTION(Rtv Plant Co Status   RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1761084;
PARAMETER(CTL.Company_Number);
PARAMETER(LCL.Plant_Company_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Plant Company Sts is Plant Company
IF LCL.Plant_Company_Sts = 'P';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Company not found or Invalid.'
ERROR(USR2270);
MSGPARM(CTL.Company_Number);

ENDIF;

//?Change in CTL company
CASE;

// IF CTL.Company Number NE WRK.Company Number
IF CTL.Company_Number <> WRK.Company_Number;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// WRK.Company Number = CTL.Company Number
WRK.Company_Number = CTL.Company_Number;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?USER: Process subfile record (Pre-confirm)

EXECUTE FUNCTION(RTV WW Screen Fields   RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1384832;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Load_Status);
PARAMETER(RCD.Total_Load_Order_Weight);
PARAMETER(RCD.Flat_Amount);
PARAMETER(RCD.Allocate_Pounds_Miles);
PARAMETER(RCD.Trailer_Id);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Truck_Size);
PARAMETER(RCD.Load_Type);
PARAMETER(RCD.Schedule_Sequence_Number);
PARAMETER(RCD.Total_Load_Miles);
PARAMETER(RCD.Shipping_Method);
PARAMETER(RCD.Ship_From_Warehouse);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(RCD.Load_Acceptance_Flag);
PARAMETER(RCD.Tot_Pallet_Tare);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Collect Loads: Set to Unlock                          E001859
CASE;

// IF RCD.Shipping Method is Collect
IF RCD.Shipping_Method = 'CR'/'CT';

//?Rtv order whse
CASE;

// IF RCD.Ship From Warehouse EQ WRK.BLANK
IF RCD.Ship_From_Warehouse = WRK.BLANK;

EXECUTE FUNCTION(RTV First Order Whse   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1397882;
PARAMETER(RCD.Load_ID);
PARAMETER(*ZERO);
PARAMETER(RCD.Ship_From_Warehouse);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.TXT_field_not_needed);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 QUIT;

}


ENDIF;

//?** Calc Deadline Depart Date here. Also change Load Status here.
// Call program CLC Deadline Date/Time XF.
CALL PROGRAM(CLC Deadline Date/Time XF) ('PMP9XFR');
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.Deadline_Departure_Date);
PARAMETER(WRK.Deadline_Departure_Time);
PARAMETER(NLL.Requested_Delivery_Date);

EXECUTE FUNCTION(CHG Deadline Date/Time RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1496989;
PARAMETER(RCD.Load_ID);
PARAMETER(*ZERO);
PARAMETER(WRK.Deadline_Departure_Date);
PARAMETER(WRK.Deadline_Departure_Time);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 QUIT;

 //?USER: Process Data record

 EXECUTE FUNCTION(CHG Deadline Date/Time CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1496963;
 PARAMETER(PAR.Load_ID);
 PARAMETER(DB1.Stop_Drop_Sequence_Number);
 PARAMETER(PAR.Deadline_Depart_DT_HDR);
 PARAMETER(PAR.Deadline_Depart_Time_HDR);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(Upd Deadline Dte/Tme  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1648968;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Deadline_Depart_DT_HDR);
  PARAMETER(DB1.Deadline_Depart_Time_HDR);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Deadline Dte/Tme  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1648969;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

 }

}


//?** Change load status to "U"nlock
EXECUTE FUNCTION(CHG Ld Sts/Dpt D/T Whs CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1490785;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER('U');
PARAMETER(RCD.Ship_From_Warehouse);
PARAMETER(WRK.Deadline_Departure_Date);
PARAMETER(WRK.Deadline_Departure_Time);
{
 //?USER: Processing before Data update

 // DB1.Job Time = JOB.*Job time
 DB1.Job_Time = JOB.*Job_time;

 // DB1.User Id = JOB.*USER
 DB1.User_Id = JOB.*USER;

 // DB1.Job Name = JOB.*JOB
 DB1.Job_Name = JOB.*JOB;

 // DB1.Job Date = JOB.*Job date
 DB1.Job_Date = JOB.*Job_date;

}


//?03/07/12 LJB  Create Change Log for Collect Load-Unlock Load
// LCL.Load Change Type = CND.Unlock Load
LCL.Load_Change_Type = 'UNLOCK';

// LCL.Department Control Code = CND.Internal Control
LCL.Department_Control_Code = 'INT';

EXECUTE FUNCTION(RTV All Coll Ords-Accp RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC2038649;
PARAMETER(RCD.Load_ID);
PARAMETER(LCL.Load_Change_Type);
PARAMETER(LCL.Department_Control_Code);
{
 //?USER: Process Data record

 //?Use Load CHG Type from PAR. Load Status will be "U"nlock
 // Call program CRT Load/Order Chg Log XF.
 CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Stop_Drop);
 PARAMETER(PAR.Load_Change_Type);
 PARAMETER(PAR.Department_Control_Code);
 PARAMETER('E');
 PARAMETER('U');
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(*BLANK);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);

 QUIT;

}


// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?2=Process change load request
CASE;

// IF RCD.*SFLSEL is *Change
IF RCD.*SFLSEL = '2';

CASE;

// IF RCD.Load Status is Entered
IF RCD.Load_Status = 'E';

// Call program EDT Load Plan O.E.     DF.
CALL PROGRAM(EDT Load Plan O.E.     DF) ('PDFLDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Load_Status);
PARAMETER(RCD.Total_Load_Order_Weight);
PARAMETER(PAR.Order_Number);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Load status has changed for load &1; cannot change load.'
ERROR(USR1875);
MSGPARM(RCD.Load_ID);
MSGPARM(RCD.*SFLSEL);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?7=Combine load option    PK0302  RMC 2/21/01 - Do post confirm here,too
CASE;

// IF RCD.*SFLSEL is *Combine Load
IF RCD.*SFLSEL = '7'/'7';

// LCL.Status - Y or N = CND.no
LCL.Status_Y_or_N = 'N';

//?Load Status = Entered?
CASE;

// IF RCD.Load Status is Entered
IF RCD.Load_Status = 'E';

EXECUTE FUNCTION(RTV Any Ord/Blk  on Ld RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1448300;
PARAMETER(RCD.Load_ID);
PARAMETER(PAR.USR_Check_Y_N_Status);
PARAMETER(PAR.Block_Order_Flag);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 // PAR.USR Check Y/N Status = CND.blank
 PAR.USR_Check_Y_N_Status = *BLANK;

 //?OMS203:  need to know if there are any Block orders on load
 // PAR.Block Order Flag = CND.Firm Order
 PAR.Block_Order_Flag = 'F';

 //?USER: Process Data record

 // PAR.USR Check Y/N Status = CND.yes
 PAR.USR_Check_Y_N_Status = 'Y';

 CASE;

 // IF DB1.Block Order Flag is Block Order
 IF DB1.Block_Order_Flag = 'B';

 // PAR.Block Order Flag = DB1.Block Order Flag
 PAR.Block_Order_Flag = DB1.Block_Order_Flag;

 QUIT;

 ENDIF;

}


//?Block order error/minimum load weight msg
CASE;

// IF PAR.Block Order Flag is Block Order
IF PAR.Block_Order_Flag = 'B';

// Send error message - 'Load &2 has block orders tied to it; cannot be combined'
ERROR(USR2440);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Load_ID);

//?Block order error/minimum load weight msg
// IF PAR.USR Check Y/N Status is yes
IF PAR.USR_Check_Y_N_Status = 'Y';

//?Weight under minimum?
CASE;

// IF RCD.Total Weight LT RCD.Minimum pounds
IF RCD.Total_Load_Order_Weight < RCD.Minimum_pounds;

// AND RCD.Minimum pounds NE WRK.ZERO
AND RCD.Minimum_pounds <> WRK.ZERO;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

// LCL.Status - Y or N = CND.yes
LCL.Status_Y_or_N = 'Y';

//?Weight under minimum?
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

// LCL.Status - Y or N = CND.yes
LCL.Status_Y_or_N = 'Y';

ENDIF;

//?Block order error/minimum load weight msg
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Load &2 has no orders tied to it; cannot be combined'
ERROR(USR2198);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Load_ID);

ENDIF;

//?Load Status = Entered?
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Load status has changed for load &1; cannot change load.'
ERROR(USR1875);
MSGPARM(RCD.Load_ID);
MSGPARM(RCD.*SFLSEL);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?PK0302 Display Sched Loads Confirm Prompt   RMC 2/21/01
CASE;

// IF LCL.Status - Y or N is yes
IF LCL.Status_Y_or_N = 'Y';

//?PK0302 Display Sched Wt/Load Confirm Prompt and do post-conf. proc.
CASE;

// IF LCL.Max Schd Shp Wt Edit Flg is Yes
IF LCL.Max_Schd_Shp_Wt_Edit_Flg = 'Y';

// AND RCD.Shipping Method is Not Rail
AND RCD.Shipping_Method = 'CT'/'PT';

//?RMC 7/7/16  Init to zero
// LCL.Scheduled Ship Date USR = CON.*ZERO
LCL.Scheduled_Ship_Date_USR = *ZERO;

//?* Only prompt for ship date change if Seaboard      E001895
CASE;

// IF RCD.Company Organization is Seaboard
IF RCD.Company_Organization = 'S';

// Call program SEL Sched Loads Cnfrm  PV.
CALL PROGRAM(SEL Sched Loads Cnfrm  PV) ('POJSPVR');
PARAMETER(LCL.Status_Y_or_N);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(*ZERO);
PARAMETER(LCL.USR_Return_Code);
PARAMETER(LCL.Scheduled_Ship_Date_USR);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(LCL.Warehouse_Type_Assigned);
PARAMETER(LCL.Slot_Type_f_New_Ords_USR);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Order_Number);

ENDIF;

//?If confirm was yes, do Post-Confirm processing here.
CASE;

// IF LCL.Status - Y or N is yes
IF LCL.Status_Y_or_N = 'Y';

CASE;

// IF LCL.Scheduled Ship Date USR is Entered
IF LCL.Scheduled_Ship_Date_USR <> *ZERO;

EXECUTE FUNCTION(Rtv/Chg Sched Shp Dt   RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1610740;
PARAMETER(RCD.Load_ID);
PARAMETER(LCL.Scheduled_Ship_Date_USR);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(CHG Schedule Ship Date CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1411293;
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.Scheduled_Ship_Date_USR);
 {
  //?USER: Processing after Data read

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


// WRK.Load Change Type = CND.Scheduled Ship Date
WRK.Load_Change_Type = 'SCHSHP';

// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// WRK.Change Log Prior Value = CVTVAR(RCD.Scheduled Ship Date)
WRK.Change_Log_Prior_Value = CVTVAR(RCD.Scheduled_Ship_Date);

// WRK.Change Log New Value = CVTVAR(LCL.Scheduled Ship Date USR)
WRK.Change_Log_New_Value = CVTVAR(LCL.Scheduled_Ship_Date_USR);

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(*ZERO);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(WRK.Change_Log_Prior_Value);
PARAMETER(WRK.Change_Log_New_Value);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(*ZERO);

EXECUTE FUNCTION(RTV Load for Date Chg  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1610489;
PARAMETER(RCD.Load_ID);
PARAMETER(LCL.Scheduled_Ship_Date_USR);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(WRK.Change_Log_Prior_Value);
PARAMETER(WRK.Change_Log_New_Value);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Carrier_Code);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 //?06/09/2015 PKD/JH E4122 Changed RTV to include Hdr Sts=A|H|L for
 //?                        changing the Requested Ship Date.
 //?USER: Process Data record

 //?06/09/2015 PKD/JH e4122 Save Requested Ship Date for Change Log.
 // LCL.Requested Ship Date = DB1.Requested Ship Date
 LCL.Requested_Ship_Date = DB1.Requested_Ship_Date;

 //?06/09/2015 E4122 Change Req Ship Date for Header Sts=E|A|H|L
 CASE;

 // IF DB1.Header Status is Avail/Alloc/Enter/Hold
 IF DB1.Header_Status = 'L'/'A'/'E'/'H';

 // WRK.Requested Ship Date = PAR.Scheduled Ship Date USR
 WRK.Requested_Ship_Date = PAR.Scheduled_Ship_Date_USR;

 //?06/09/2015 E4122 Change Req Ship Date for Header Sts=E|A|H|L
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Requested Ship Date = DB1.Requested Ship Date
 WRK.Requested_Ship_Date = DB1.Requested_Ship_Date;

 ENDIF;

 //?06/17/2015 Added Deallocate/Allocate process before change to OD.
 EXECUTE FUNCTION(RTV Orders for Dt Chg RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1610490;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(WRK.Requested_Ship_Date);
 PARAMETER(PAR.Scheduled_Ship_Date_USR);
 {
  //?USER: Initialize routine

  //?06/09/2015 PKD/JH E4122 Added Deallocate and Allocate Process
  //?USER: Process Data record

  //?DEALLOCATE
  // LCL.Quantity Scheduled = DB1.Quantity Scheduled
  LCL.Quantity_Scheduled = DB1.Quantity_Scheduled;

  // LCL.Weight Scheduled = DB1.Weight Scheduled
  LCL.Weight_Scheduled = DB1.Weight_Scheduled;

  // Call program UPD Avail-To-Sell  ORD XF.
  CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Quantity_Scheduled);
  PARAMETER(LCL.Weight_Scheduled);
  PARAMETER('OD');
  PARAMETER(JOB.*PROGRAM);
  PARAMETER(DB1.Item_Age_Days);
  PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
  PARAMETER(DB1.Production_Ovr_AgeDte_To);

  //?ALLOCATE
  // LCL.Quantity Scheduled = CON.*ZERO
  LCL.Quantity_Scheduled = *ZERO;

  // LCL.Weight Scheduled = CON.*ZERO
  LCL.Weight_Scheduled = *ZERO;

  // Call program UPD Avail-To-Sell  ORD XF.
  CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Requested_Ship_Date);
  PARAMETER(DB1.Quantity_Ordered);
  PARAMETER(DB1.Weight_Ordered);
  PARAMETER(LCL.Quantity_Scheduled);
  PARAMETER(LCL.Weight_Scheduled);
  PARAMETER('OA');
  PARAMETER(JOB.*PROGRAM);
  PARAMETER(DB1.Item_Age_Days);
  PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
  PARAMETER(DB1.Production_Ovr_AgeDte_To);

  EXECUTE FUNCTION(Chg SchShip/ReqShp Dt CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1702966;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Requested_Ship_Date);
  PARAMETER(PAR.Scheduled_Ship_Date_USR);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 EXECUTE FUNCTION(CHG Sch Shp & Req Shp CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC1702497;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Requested_Ship_Date);
 PARAMETER(PAR.Scheduled_Ship_Date_USR);
 {
  //?USER: Processing after Data read

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program TRG Order Hdr CHG Trig XT.
  CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Ship_To_Name);
  PARAMETER(DB1.Ship_To_Address_Line_1);
  PARAMETER(DB1.Ship_To_Address_Line_2);
  PARAMETER(DB1.Ship_To_Address_Line_3);
  PARAMETER(DB1.Ship_To_City);
  PARAMETER(DB1.Ship_To_State_Code);
  PARAMETER(DB1.Ship_To_Zip_Postal_Code);
  PARAMETER(DB1.Bill_to_Customer);
  PARAMETER(DB1.Bill_to_Name);
  PARAMETER(DB1.Bill_to_Address_Line_1);
  PARAMETER(DB1.Bill_to_Address_Line_2);
  PARAMETER(DB1.Bill_to_Address_Line_3);
  PARAMETER(DB1.Bill_to_City);
  PARAMETER(DB1.Bill_to_State_Code);
  PARAMETER(DB1.Bill_to_Zip_Postal_Code);
  PARAMETER(DB1.Customer_Purchase_Order_#);
  PARAMETER(DB1.Order_Date);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Cancel_Date);
  PARAMETER(DB1.Terms_Code);
  PARAMETER(DB1.Special_Instructions);
  PARAMETER(DB1.Special_Instructions_2);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Comment_Print_Acknowledge);
  PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
  PARAMETER(DB1.Comment_Print_Pick_Slip);
  PARAMETER(DB1.Comment_Print_Ship_Doc);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Order_in_Use);
  PARAMETER(DB1.Header_Status);
  PARAMETER(DB1.Header_Status_Last);
  PARAMETER(DB1.Order_Type_Print_Status);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.User_Original_Entry);
  PARAMETER(DB1.Date_of_Original_Entry);
  PARAMETER(DB1.Order_Value_Total);
  PARAMETER(DB1.Order_Weight_Total);
  PARAMETER(DB1.Credit_Hold);
  PARAMETER(DB1.Production_Hold);
  PARAMETER(DB1.New_Customer_Hold);
  PARAMETER(DB1.Requested_Delivery_Date);
  PARAMETER(DB1.Requested_Delivery_Time);
  PARAMETER(DB1.Accounts_Receiv_Ent_1);
  PARAMETER(DB1.Accounts_Receiv_Ent_2);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.LTL_Flag);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Shipping_Method);
  PARAMETER(DB1.Export_Status);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Shrink_Wrap);
  PARAMETER(DB1.Slip_Sheet);
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Reefer_Temperature);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Attach_to_Invoice_Number);
  PARAMETER(DB1.Load_Plan_Order);
  PARAMETER(DB1.Print_Pick_Slip);
  PARAMETER(DB1.Resell_Reference_Number);
  PARAMETER(DB1.Special_Comment_1);
  PARAMETER(DB1.Special_Comment_2);
  PARAMETER(DB1.Affect_Auto_Accruals);
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(DB1.Manager_Level_Code);
  PARAMETER(DB1.VP_Level_Code);
  PARAMETER(DB1.Attach_to_Order_Number);
  PARAMETER(DB1.Reason_for_Price_Audit);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Invoice_Date);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Trans_Contol_AS400_Plant);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.A_R_order_Value_Total);
  PARAMETER(DB1.Billing_Activity_Type);
  PARAMETER(DB1.Block_Order_Flag);
  PARAMETER(DB1.Order_Certification_Flag);
  PARAMETER(DB1.Invoice_Order_Value_Tot);
  PARAMETER(DB1.Process_Sts_for_3C);
  PARAMETER(DB1.Order_Conf_Fax_Sts);
  PARAMETER(DB1.Manifest_Fax_Sts);
  PARAMETER(DB1.Invoice_Fax_Sts);
  PARAMETER(DB1.Transfer_in_Storage_Ind);
  PARAMETER(DB1.Email_Cust_On_Order_Ship);
  PARAMETER(DB1.Order_Emailed);
  PARAMETER(DB1.Export_Docs_Go_w_Driver);
  PARAMETER(DB1.Shipping_Temp_Code_C_F);
  PARAMETER(DB1.Broker_Order_Status);
  PARAMETER(DB1.Air_Freight_Order);
  PARAMETER(DB1.Order_Requires_Review);
  PARAMETER(DB1.OH_Load_Plan_Ready);
  PARAMETER(DB1.Export_USDA_Approved);
  PARAMETER(DB1.HPB_Ship_to_Warehouse);
  PARAMETER(DB1.OH_TF_Exempt_Code);
  PARAMETER(DB1.OH_Appt_Confirmation_Dt);
  PARAMETER(DB1.JPN_Invoice_Issuance_Date);
  PARAMETER(DB1.Load_Actual_Shipped_Date);
  PARAMETER(DB1.Load_BOL_Complete_Date);
  PARAMETER(DB1.Load_Truck_Departure_Date);
  PARAMETER(DB1.Maximum_Gross_Weight);
  PARAMETER(DB1.Time_of_Original_Entry);
  PARAMETER(DB1.OH_Appt_Confirmation_Tm);
  PARAMETER(DB1.Load_BOL_Complete_Time);
  PARAMETER(DB1.Load_Truck_Departure_Time);
  PARAMETER(DB1.Act_Frt_Reference_Amount);
  PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
  PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
  PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
  PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);

 }

 // Call program CRT Load/Order Chg Log XF.
 CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Load_Change_Type);
 PARAMETER(PAR.Department_Control_Code);
 PARAMETER(PAR.Change_Log_Prior_Value);
 PARAMETER(PAR.Change_Log_New_Value);
 PARAMETER(PAR.*USER);
 PARAMETER(PAR.*PROGRAM);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);

 //?06/09/2015 PKD/JH E4122 Added Change Log for Requested Ship Date
 // LCL.Change Log Prior Value = CVTVAR(LCL.Requested Ship Date)
 LCL.Change_Log_Prior_Value = CVTVAR(LCL.Requested_Ship_Date);

 // LCL.Change Log New Value = CVTVAR(WRK.Requested Ship Date)
 LCL.Change_Log_New_Value = CVTVAR(WRK.Requested_Ship_Date);

 // Call program CRT Load/Order Chg Log XF.
 CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER('RQSSHP');
 PARAMETER(PAR.Department_Control_Code);
 PARAMETER(LCL.Change_Log_Prior_Value);
 PARAMETER(LCL.Change_Log_New_Value);
 PARAMETER(PAR.*USER);
 PARAMETER(PAR.*PROGRAM);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);

}


// WRK.Scheduled Ship Date = LCL.Scheduled Ship Date USR
WRK.Scheduled_Ship_Date = LCL.Scheduled_Ship_Date_USR;

ENDIF;

CASE;

// IF RCD.Ship From Warehouse EQ WRK.BLANK
IF RCD.Ship_From_Warehouse = WRK.BLANK;

EXECUTE FUNCTION(RTV First Order Whse   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1397882;
PARAMETER(RCD.Load_ID);
PARAMETER(*ZERO);
PARAMETER(RCD.Ship_From_Warehouse);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.TXT_field_not_needed);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 QUIT;

}


ENDIF;

//?** 11/16/2007 LJB FP1251 Returned DDD/T will be zeros if there
//?** is no Miles Between Cities record (mileage = zeros)
//?** Also change Load Status here, it changes even if F3 from date chg
// Call program CLC Deadline Date/Time XF.
CALL PROGRAM(CLC Deadline Date/Time XF) ('PMP9XFR');
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.Deadline_Departure_Date);
PARAMETER(WRK.Deadline_Departure_Time);
PARAMETER(NLL.Requested_Delivery_Date);

//?** Pass changed SSD to Load Header, if it changed     E001514
CASE;

// IF LCL.Scheduled Ship Date USR is Entered
IF LCL.Scheduled_Ship_Date_USR <> *ZERO;

EXECUTE FUNCTION(CHG Ld Sts/Dpt D/T Whs CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1490785;
PARAMETER(RCD.Load_ID);
PARAMETER(LCL.Scheduled_Ship_Date_USR);
PARAMETER('C');
PARAMETER(RCD.Ship_From_Warehouse);
PARAMETER(WRK.Deadline_Departure_Date);
PARAMETER(WRK.Deadline_Departure_Time);
{
 //?USER: Processing before Data update

 // DB1.Job Time = JOB.*Job time
 DB1.Job_Time = JOB.*Job_time;

 // DB1.User Id = JOB.*USER
 DB1.User_Id = JOB.*USER;

 // DB1.Job Name = JOB.*JOB
 DB1.Job_Name = JOB.*JOB;

 // DB1.Job Date = JOB.*Job date
 DB1.Job_Date = JOB.*Job_date;

}


//?** Pass changed SSD to Load Header, if it changed     E001514
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(CHG Ld Sts/Dpt D/T Whs CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1490785;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER('C');
PARAMETER(RCD.Ship_From_Warehouse);
PARAMETER(WRK.Deadline_Departure_Date);
PARAMETER(WRK.Deadline_Departure_Time);
{
 //?USER: Processing before Data update

 // DB1.Job Time = JOB.*Job time
 DB1.Job_Time = JOB.*Job_time;

 // DB1.User Id = JOB.*USER
 DB1.User_Id = JOB.*USER;

 // DB1.Job Name = JOB.*JOB
 DB1.Job_Name = JOB.*JOB;

 // DB1.Job Date = JOB.*Job date
 DB1.Job_Date = JOB.*Job_date;

}


ENDIF;

EXECUTE FUNCTION(CHG Deadline Date/Time RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1496989;
PARAMETER(RCD.Load_ID);
PARAMETER(*ZERO);
PARAMETER(WRK.Deadline_Departure_Date);
PARAMETER(WRK.Deadline_Departure_Time);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 QUIT;

 //?USER: Process Data record

 EXECUTE FUNCTION(CHG Deadline Date/Time CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1496963;
 PARAMETER(PAR.Load_ID);
 PARAMETER(DB1.Stop_Drop_Sequence_Number);
 PARAMETER(PAR.Deadline_Depart_DT_HDR);
 PARAMETER(PAR.Deadline_Depart_Time_HDR);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(Upd Deadline Dte/Tme  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1648968;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Deadline_Depart_DT_HDR);
  PARAMETER(DB1.Deadline_Depart_Time_HDR);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Deadline Dte/Tme  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1648969;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

 }

}


//?01/21/08 RMC  Create Change Log for Combine Load Process for all orders
//?06/26/08 RMC  E00180 if underweight use  CMBWGT load chg type
// LCL.Load Change Type = CND.Combine Load
LCL.Load_Change_Type = 'CMBLOD';

// LCL.Department Control Code = CND.Internal Control
LCL.Department_Control_Code = 'INT';

CASE;

// IF RCD.Shipping Method is Prepaid
IF RCD.Shipping_Method = 'PR'/'PT';

//?E00180 RMC 6.26  If Order Min wt msg, then create with diff load chg type
CASE;

// IF PAR.USR Check Y/N Status is yes
IF PAR.USR_Check_Y_N_Status = 'Y';

//?(this is really accum the weight ordered - which is what we want here)
//?(it was comparing to the rcd.total load order weight - before 8/06/08)
EXECUTE FUNCTION(RTV Wgt Schedld Tot    RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1619260;
PARAMETER(RCD.Load_ID);
PARAMETER(LCL.USR_Weight_9_1_3);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 //?USER: Process Data record

 // WRK.USR Weight   9.1  3 = CON.*ZERO
 WRK.USR_Weight_9_1_3 = *ZERO;

 EXECUTE FUNCTION(RTV Weight Schedld Tot RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1619261;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(WRK.USR_Weight_9_1_3);
 {
  //?USER: Initialize routine

  // PAR.USR Weight   9.1  3 = CON.*ZERO
  PAR.USR_Weight_9_1_3 = *ZERO;

  //?USER: Process Data record

  // PAR.USR Weight   9.1  3 = PAR.USR Weight   9.1  3 + DB1.Weight Ordered
  PAR.USR_Weight_9_1_3 = PAR.USR_Weight_9_1_3 + DB1.Weight_Ordered;

 }

 // PAR.USR Weight   9.1  3 = PAR.USR Weight   9.1  3 + WRK.USR Weight   9.1  3
 PAR.USR_Weight_9_1_3 = PAR.USR_Weight_9_1_3 + WRK.USR_Weight_9_1_3;

}


CASE;

// IF LCL.USR Weight   9.1  3 LT RCD.Minimum pounds
IF LCL.USR_Weight_9_1_3 < RCD.Minimum_pounds;

// AND RCD.Minimum pounds NE WRK.ZERO
AND RCD.Minimum_pounds <> WRK.ZERO;

// LCL.Load Change Type = CND.Combine - underweight
LCL.Load_Change_Type = 'CMBWGT';

// LCL.Department Control Code = CND.Internal Control
LCL.Department_Control_Code = 'INT';

ENDIF;

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV All Ords f/CMBLOD RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1864334;
PARAMETER(RCD.Load_ID);
PARAMETER(LCL.Load_Change_Type);
PARAMETER(LCL.Department_Control_Code);
{
 //?USER: Process Data record

 //?01/21/08 RMC  Create Change Log for Combine process- 1st order on load
 //?01/21/08 RMC  Use load chg type from Par instead of 'CMBLOD' always
 // Call program CRT Load/Order Chg Log XF.
 CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Stop_Drop);
 PARAMETER(PAR.Load_Change_Type);
 PARAMETER(PAR.Department_Control_Code);
 PARAMETER('E');
 PARAMETER('C');
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(*BLANK);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);

 QUIT;

}


ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Can Load Arrive On time?       4/26/01 RMC
CASE;

// IF LCL.Scheduled Ship Date USR is Entered
IF LCL.Scheduled_Ship_Date_USR <> *ZERO;

CASE;

// IF LCL.Scheduled Ship Date USR GT WRK.Deadline Departure Date
IF LCL.Scheduled_Ship_Date_USR > WRK.Deadline_Departure_Date;

// Send information message - 'Sched Ship Dt is AFTER Deadline Departure. Load &1 cannot arrive on t
MESSAGE(USR3046 *INFO);
MSGPARM(RCD.Load_ID);

ENDIF;

//?Can Load Arrive On time?       4/26/01 RMC
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.Scheduled Ship Date GT WRK.Deadline Departure Date
IF RCD.Scheduled_Ship_Date > WRK.Deadline_Departure_Date;

// Send information message - 'Sched Ship Dt is AFTER Deadline Departure. Load &1 cannot arrive on t
MESSAGE(USR3046 *INFO);
MSGPARM(RCD.Load_ID);

ENDIF;

ENDIF;

//?Block Order Min wt Info message  - move after preceding msg  4/26/01
CASE;

// IF PAR.USR Check Y/N Status is yes
IF PAR.USR_Check_Y_N_Status = 'Y';

CASE;

// IF RCD.Total Weight LT RCD.Minimum pounds
IF RCD.Total_Load_Order_Weight < RCD.Minimum_pounds;

// AND RCD.Minimum pounds NE WRK.ZERO
AND RCD.Minimum_pounds <> WRK.ZERO;

// Send information message - 'Load weight is less than the minimum weight allowed for load &1.'
MESSAGE(USR1262 *INFO);
MSGPARM(RCD.Load_ID);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?8=Edit Traffic Comments
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

// Call program EDT PD Traffic Comment EF.
CALL PROGRAM(EDT PD Traffic Comment EF) ('PDCZEFR');
PARAMETER(RCD.Load_ID);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Load Header &1 not found.'
ERROR(USR2313);
MSGPARM(RCD.Load_ID);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile control (Post-confirm)

// Send status message - 'Processing...'
MESSAGE(USR2303 *STATUS);

//?USER: Process subfile record (Post-confirm)

//?* Change from "or Collect or Rail" to "Prepaid Rail"
CASE;

// IF LCL.Max Schd Shp Wt Edit Flg is NO
IF LCL.Max_Schd_Shp_Wt_Edit_Flg = 'N';

// OR RCD.Shipping Method is Prepaid Rail
OR RCD.Shipping_Method = 'PR';

//?PK0302 Copy to pre-confirm  RMC 2/21/01
CASE;

// IF RCD.*SFLSEL is *Combine Load
IF RCD.*SFLSEL = '7'/'7';

CASE;

// IF RCD.Ship From Warehouse EQ WRK.BLANK
IF RCD.Ship_From_Warehouse = WRK.BLANK;

EXECUTE FUNCTION(RTV First Order Whse   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1397882;
PARAMETER(RCD.Load_ID);
PARAMETER(*ZERO);
PARAMETER(RCD.Ship_From_Warehouse);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.TXT_field_not_needed);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 QUIT;

}


ENDIF;

//?** DDD/T will be zeros if there is no Miles Between Cities record
// Call program CLC Deadline Date/Time XF.
CALL PROGRAM(CLC Deadline Date/Time XF) ('PMP9XFR');
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.Deadline_Departure_Date);
PARAMETER(WRK.Deadline_Departure_Time);
PARAMETER(NLL.Requested_Delivery_Date);

//?* Change load status to "C"ombined
EXECUTE FUNCTION(CHG Ld Sts/Dpt D/T Whs CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1490785;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER('C');
PARAMETER(RCD.Ship_From_Warehouse);
PARAMETER(WRK.Deadline_Departure_Date);
PARAMETER(WRK.Deadline_Departure_Time);
{
 //?USER: Processing before Data update

 // DB1.Job Time = JOB.*Job time
 DB1.Job_Time = JOB.*Job_time;

 // DB1.User Id = JOB.*USER
 DB1.User_Id = JOB.*USER;

 // DB1.Job Name = JOB.*JOB
 DB1.Job_Name = JOB.*JOB;

 // DB1.Job Date = JOB.*Job date
 DB1.Job_Date = JOB.*Job_date;

}


EXECUTE FUNCTION(CHG Deadline Date/Time RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1496989;
PARAMETER(RCD.Load_ID);
PARAMETER(*ZERO);
PARAMETER(WRK.Deadline_Departure_Date);
PARAMETER(WRK.Deadline_Departure_Time);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 QUIT;

 //?USER: Process Data record

 EXECUTE FUNCTION(CHG Deadline Date/Time CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1496963;
 PARAMETER(PAR.Load_ID);
 PARAMETER(DB1.Stop_Drop_Sequence_Number);
 PARAMETER(PAR.Deadline_Depart_DT_HDR);
 PARAMETER(PAR.Deadline_Depart_Time_HDR);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(Upd Deadline Dte/Tme  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1648968;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Deadline_Depart_DT_HDR);
  PARAMETER(DB1.Deadline_Depart_Time_HDR);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Deadline Dte/Tme  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1648969;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

 }

}


//?01/21/08 RMC  Create Change Log for Combine Load Process for all orders
//?06/26/08 RMC  E00180 if underweight use  CMBWGT load chg type
// LCL.Load Change Type = CND.Combine Load
LCL.Load_Change_Type = 'CMBLOD';

// LCL.Department Control Code = CND.Internal Control
LCL.Department_Control_Code = 'INT';

CASE;

// IF RCD.Shipping Method is Prepaid
IF RCD.Shipping_Method = 'PR'/'PT';

//?E00180 RMC 6.26  If Order Min wt msg, then create with diff load chg type
CASE;

// IF PAR.USR Check Y/N Status is yes
IF PAR.USR_Check_Y_N_Status = 'Y';

//?(this is really accum the weight ordered - which is what we want here)
//?(it was comparing to the ctl.total load order weight - before 8/06/08)
EXECUTE FUNCTION(RTV Wgt Schedld Tot    RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1619260;
PARAMETER(RCD.Load_ID);
PARAMETER(LCL.USR_Weight_9_1_3);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 //?USER: Process Data record

 // WRK.USR Weight   9.1  3 = CON.*ZERO
 WRK.USR_Weight_9_1_3 = *ZERO;

 EXECUTE FUNCTION(RTV Weight Schedld Tot RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1619261;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(WRK.USR_Weight_9_1_3);
 {
  //?USER: Initialize routine

  // PAR.USR Weight   9.1  3 = CON.*ZERO
  PAR.USR_Weight_9_1_3 = *ZERO;

  //?USER: Process Data record

  // PAR.USR Weight   9.1  3 = PAR.USR Weight   9.1  3 + DB1.Weight Ordered
  PAR.USR_Weight_9_1_3 = PAR.USR_Weight_9_1_3 + DB1.Weight_Ordered;

 }

 // PAR.USR Weight   9.1  3 = PAR.USR Weight   9.1  3 + WRK.USR Weight   9.1  3
 PAR.USR_Weight_9_1_3 = PAR.USR_Weight_9_1_3 + WRK.USR_Weight_9_1_3;

}


CASE;

// IF LCL.USR Weight   9.1  3 LT RCD.Minimum pounds
IF LCL.USR_Weight_9_1_3 < RCD.Minimum_pounds;

// AND RCD.Minimum pounds NE WRK.ZERO
AND RCD.Minimum_pounds <> WRK.ZERO;

// LCL.Load Change Type = CND.Combine - underweight
LCL.Load_Change_Type = 'CMBWGT';

// LCL.Department Control Code = CND.Internal Control
LCL.Department_Control_Code = 'INT';

ENDIF;

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV All Ords f/CMBLOD RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1864334;
PARAMETER(RCD.Load_ID);
PARAMETER(LCL.Load_Change_Type);
PARAMETER(LCL.Department_Control_Code);
{
 //?USER: Process Data record

 //?01/21/08 RMC  Create Change Log for Combine process- 1st order on load
 //?01/21/08 RMC  Use load chg type from Par instead of 'CMBLOD' always
 // Call program CRT Load/Order Chg Log XF.
 CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Stop_Drop);
 PARAMETER(PAR.Load_Change_Type);
 PARAMETER(PAR.Department_Control_Code);
 PARAMETER('E');
 PARAMETER('C');
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(*BLANK);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);

 QUIT;

}


ENDIF;

ENDIF;

//?USER: Final processing (Post-confirm)

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

