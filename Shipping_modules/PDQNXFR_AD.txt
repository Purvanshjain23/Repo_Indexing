// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDQNXFR
// ?Date: 14.08.2025 Time: 03:29:27
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modifications and Comments
DO;

//?R11425 RMC 8/8/17 DONT DO the 3 day hard stop on fresh
//? limiting fresh prod to only being made 3 days prior to ship- Per Avi/Team
//?E2073 RMC Per Curt
//?8/21/12 RMC Use Whs Prod Sch MAx days when sched prod to be made- FZ & FR
//?  FZ Prod Sched chill time will still be 7 days, so this make a window
//?  of time -- from 7 days to say 21 days back instead of using the 250 age
//?  days. they can override the max days using the CIE Use Age Days over MAx
//?  to sched it farther back than the Whs Prod Sch Max days.
//?8/01/12 RMC Use Whs Inv Chill from Whs file for Inv calcs. it will be
//?   different than the Warehouse Chilling time used for prod scheduling
//? ie. for FZ whses, prod sched is 14 days, and Inv Chill is 7 days
//?E2073 RMC Per Curt
//?7/11/12 Below, with exceptions, field stored in Comp Item Ext:
//?   Use Age Days over Max
//?6/26/12 dont sched prod to be made more than 3 PROD Days - not calendar
//?4/27/12 dont sched prod to be made more than 3 days prior ship date
//?   and keeping the age in mind.   E2073 RMC Per curt
//?*---------------------------------------------------------------*
//?* FP1309 03/17/09  slm  Pass new fields thru to other functions
//?* Item age days, Production Override age From/To Date
//?*    change rtv on order header to pull other fields
//?*---------------------------------------------------------------*
//?FP1309 Revd with Group ON this go ahead and use the Item Age Days
//?FOR THE LCL. ITEM AGE DAYS
//?*---------------------------------------------------------------*
//?* FP1054 05/26/09  RMC  If ATS Adj Type USR="OA",
//?*    then set ATS Adj Type USR per Company item Inv alloc seq
//?* FP1054 05/26/09  RMC  new type: OL reallocate-alloc inv last (for fresh)
//?*               new type: OI reallocate-alloc inv First(for freezer)
//?* FP1054 04/14/09  RMC  new type: OF reallocate-override fz time
//?* FP1054 01/20/09  RMC
//?2/25/09   Dont do this after all:
//?2/13/09 Get the Order Date and check for CONVERTED items:
//?   If the Order Date<job date, allow allocating current day's BASE
//?   production for the order
//?   If the Order Date=job date, do not allocate current day's production
//?   to the order.  So during order entry, the current day's BASE prod
//?   won't be allocated to a converted item
//?*---------------------------------------------------------------*
//?* 04/24/02 PKD 1) Changed allocation to default Age Code = A
//?*              2) Changed PAR context to LCL context every place
//?*                 PAR.Age Code was used.
//?*---------------------------------------------------------------*
//?* 10/10/02 PKD 1) If Age Code is > D, then make it D
//?*---------------------------------------------------------------*
//?04/10/07 Effective 04/23/07 representation of Age Code changes
//?         will be such that Age Code A will be 0 day for boxes
//?         and combos.  The labels on the cartons will not print
//?         a date that is offset by Sunday or Holiday.  Instead of
//?         Code Date, it will be the Pack Date.
//?E3796 JJH 02/11/15 - Utilize Requested Ship Date for Production
//? Schedule Reports
//? - Modify "RTV Avail-To-Sell RqShpRT - Order Header TRG" to output
//?   Requested Ship Date.
//? - Replace PAR.Ship Date USR with LCL.Requested Ship Date.  This
//?   is performed at 6 places in this program.
ENDDO;

//?FP1054 moved this up here so we have the warehouse type
EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(WRK.Description_Line_One);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(WRK.Item_Structure_Class_Code);
PARAMETER(WRK.Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(WRK.Item_Type_Code);
PARAMETER(WRK.Default_Warehouse);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Base_Conv_Loss_Item);
PARAMETER(WRK.Variety_Rendered_Cut);
PARAMETER(WRK.Credit_Item_Status);
PARAMETER(WRK.Std_Weight_Head_Var_Ren);
PARAMETER(WRK.Pieces_Per_Head);
PARAMETER(PAR.Department_Code);
PARAMETER(WRK.Group_for_Packaging);
PARAMETER(WRK.Seconds_Item);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(PAR.Export_Domestic);
PARAMETER(PAR.Print_On_Schedule);
PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
PARAMETER(PAR.Fresh_Sched_As_Ordered);
PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
PARAMETER(PAR.Primal_Group_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Warehouse_Type);
PARAMETER(PAR.Trans_Contol_AS400_Plant);
PARAMETER(PAR.Warehouse_Location);
PARAMETER(PAR.Warehouse_Std_Chill_Time);
PARAMETER(PAR.Warehouse_Chill_Time);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Description_Line_One);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Type_Code);
 PARAMETER(PAR.Default_Warehouse);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 PARAMETER(PAR.Variety_Rendered_Cut);
 PARAMETER(PAR.Credit_Item_Status);
 PARAMETER(PAR.Std_Weight_Head_Var_Ren);
 PARAMETER(PAR.Pieces_Per_Head);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Group_for_Packaging);
 PARAMETER(PAR.Seconds_Item);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Export_Domestic);
 PARAMETER(PAR.Print_On_Schedule);
 PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
 PARAMETER(PAR.Fresh_Sched_As_Ordered);
 PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
 PARAMETER(PAR.Primal_Group_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.Trans_Contol_AS400_Plant);
 PARAMETER(PAR.Warehouse_Location);
 PARAMETER(PAR.Warehouse_Std_Chill_Time);
 PARAMETER(PAR.Warehouse_Chill_Time);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?E2073 RMC 8/01/12 Get Whs Inventory Chill time
EXECUTE FUNCTION(RTV Warehouse Inv/Max RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2049533;
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.WHS_Sched_Prod_Max_Days);
PARAMETER(PAR.WHS_Inventory_Chill_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv CIE Use Age Day   RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC2047591;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(LCL.CIE_Use_Age_Days_over_Max);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?E2885 RMC 12/4/13 added here
EXECUTE FUNCTION(Rtv CIE Alloc Method  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1946929;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(LCL.Allocation_Method);
PARAMETER(PAR.Order_Number);
{
 //?USER: Initialize routine

 //?E2885 RMC 12/4/13 new alloc method="S"tandard -- if shipping within
 //?  3 days, force Alloc Method to F-ASAP, else use B-JIT
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv SchShpDte         RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2079195;
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.Scheduled_Ship_Date);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF DB1.Allocation Method is Standard or Blank
 IF DB1.Allocation_Method = *BLANK/'S';

 EXECUTE FUNCTION(Rtv PrdDay Dte -Durtn RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369297;
 PARAMETER(DB1.Company_Number);
 PARAMETER(JOB.*Job_date);
 PARAMETER(3);
 PARAMETER(LCL.Date_USR);
 {
  //?USER: Initialize routine

  // WRK.Count USR = CON.*ZERO
  WRK.Count_USR = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF WRK.Count USR EQ PAR.*Duration (factor)
  IF WRK.Count_USR = PAR.*Duration_factor;

  // PAR.*DATE = DB1.Post to G/L Date
  PAR.*DATE = DB1.Post_to_G_L_Date;

  QUIT;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Count USR = WRK.Count USR + CON.1
  WRK.Count_USR = WRK.Count_USR + 1;

  ENDIF;

 }

 CASE;

 // IF LCL.Scheduled Ship Date LE LCL.Date                  USR
 IF LCL.Scheduled_Ship_Date <= LCL.Date_USR;

 // PAR.Allocation Method = CND.Forward - ASAP
 PAR.Allocation_Method = 'F';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Allocation Method = CND.Backwards - JIT
 PAR.Allocation_Method = 'B';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Allocation Method = DB1.Allocation Method
 PAR.Allocation_Method = DB1.Allocation_Method;

 ENDIF;

}


//?FP1054 7/13/09 - go to back age-code number of days for Prod alloc
//?FP1309 Revd with Group ON this go ahead and use the Item Age Days
//?-----
//?08/02/10 PKD Do not override. Need to consider days between
//?             Ship Date and Delivery Date if we need to do something.
//?-----
// LCL.Item Age Days = PAR.Item Age Days
LCL.Item_Age_Days = PAR.Item_Age_Days;

// LCL.Production Ovr AgeDte Fr = PAR.Production Ovr AgeDte Fr
LCL.Production_Ovr_AgeDte_Fr = PAR.Production_Ovr_AgeDte_Fr;

// LCL.Production Ovr AgeDte To = PAR.Production Ovr AgeDte To
LCL.Production_Ovr_AgeDte_To = PAR.Production_Ovr_AgeDte_To;

//?FP1309 - Get order header info needed:   date and type Requested delv
EXECUTE FUNCTION(RTV Avail-To-Sell RqShpRT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1977862;
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Type_Sales);
PARAMETER(PAR.Order_Date);
PARAMETER(NLL.Requested_Ship_Date);
PARAMETER(PAR.Requested_Delivery_Date);
{
 //?USER: Initialize routine

 //?RMC 12/5/18 chg access path to opbgcplo so it will wrk in  copy ord tmplt
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?*---------------------------------------------------------------*
//?8/20/12 dont sched prod to be made more than n days for FZ too
//?4/27/12 dont sched prod to be made more than 3 days prior ship date
//?   and keeping the age in mind.   E2073 RMC Per curt, 7/11 exceptions
//?E3796 JJH 02/11/15 - Replace Ship Date USR with Requested Ship Date
//?FResh override max 3 days to Age Days  IF Alloc Method will be F(ASAP)
CASE;

// IF PAR.Warehouse Type is Fresh
IF PAR.Warehouse_Type = 'FR';

CASE;

// IF PAR.Requested Delivery Date NE PAR.Ship Date USR
IF PAR.Requested_Delivery_Date <> PAR.Ship_Date_USR;

// LCL.Days = PAR.Requested Delivery Date - PAR.Ship Date USR *DAYS
LCL.Days = DURATION(PAR.Requested_Delivery_Date PAR.Ship_Date_USR 'DY' 1111111 'NONE'              +
'N' 1);

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Days = CON.*ZERO
LCL.Days = 0;

ENDIF;

//?R11425 RMC 8/8/17 DONT DO ANY MORE! PER AVI AND TEAM
ENDIF;

//?FZ freezer -  override max N days to Age Days
CASE;

// IF PAR.Warehouse Type is Frozen
IF PAR.Warehouse_Type = 'FZ';

CASE;

// IF PAR.Requested Delivery Date NE PAR.Ship Date USR
IF PAR.Requested_Delivery_Date <> PAR.Ship_Date_USR;

// LCL.Days = PAR.Requested Delivery Date - PAR.Ship Date USR *DAYS
LCL.Days = DURATION(PAR.Requested_Delivery_Date PAR.Ship_Date_USR 'DY' 1111111 'NONE'              +
'N' 1);

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Days = CON.*ZERO
LCL.Days = 0;

ENDIF;

//?Use Max days if Use Age Days over Max is not Y
CASE;

// IF LCL.CIE Use Age Days over Max is Not Yes
IF LCL.CIE_Use_Age_Days_over_Max = *BLANK/'N';

// AND PAR.WHS Sched Prod Max Days is greater than zero
AND PAR.WHS_Sched_Prod_Max_Days > *ZERO;

//?How many days back is N production days before req delivery date?
//?E3796 JJH 02/11/15 - Replace Ship Date USR with Requested Ship Date
//? Replace "I  Post to G/L Date  FLD   PAR Ship Date USR"
//? With    "I  Post to G/L Date  FLD   LCL Requested Ship Date"
// Call program RTV Prior Prod Day    XF.
CALL PROGRAM(RTV Prior Prod Day    XF) ('PBD8XFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.WHS_Sched_Prod_Max_Days);
PARAMETER(LCL.Date_From_USR);
PARAMETER(LCL.Day_1_Production_50_USR);

// LCL.Days = LCL.Days + LCL.Day 1 Production 5,0  USR
LCL.Days = LCL.Days + LCL.Day_1_Production_50_USR;

CASE;

// IF LCL.Days LT PAR.Item Age Days
IF LCL.Days < PAR.Item_Age_Days;

// LCL.Item Age Days = LCL.Days
LCL.Item_Age_Days = LCL.Days;

ENDIF;

ENDIF;

ENDIF;

//?*---------------------------------------------------------------*
// PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

// PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

CASE;

// IF PAR.ATS Weight Need USR is Equal to zero
IF PAR.ATS_Weight_Need_USR = *ZERO;

RETURN;

ENDIF;

//?Update Availability using Production Detail
DO;

// PAR.ATS Adj Type USR 2 = PAR.ATS Adj Type USR
PAR.ATS_Adj_Type_USR_2 = PAR.ATS_Adj_Type_USR;

// LCL.ATS Adj Type USR = PAR.ATS Adj Type USR
LCL.ATS_Adj_Type_USR = PAR.ATS_Adj_Type_USR;

//?Modify Adjust Type for Order Alloc only
CASE;

// IF PAR.ATS Adj Type USR is Order Allocate
IF PAR.ATS_Adj_Type_USR = 'OA';

//?Modify Adj Type based on Company/Item Info.  (NEW)
CASE;

// IF PAR.Warehouse Type is Fresh
IF PAR.Warehouse_Type = 'FR';

CASE;

// IF PAR.Fresh Inv Allocation Seq is First
IF PAR.Fresh_Inv_Allocation_Seq = 'F';

// LCL.ATS Adj Type USR = CND.Order Allocate-Inv First
LCL.ATS_Adj_Type_USR = 'OI';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.ATS Adj Type USR = CND.Order Allocate-Inv Last
LCL.ATS_Adj_Type_USR = 'OL';

ENDIF;

//?Modify Adj Type based on Company/Item Info.  (NEW)
// IF PAR.Warehouse Type is Frozen
IF PAR.Warehouse_Type = 'FZ';

CASE;

// IF PAR.Frozen Inv Allocation Seq is First
IF PAR.Frozen_Inv_Allocation_Seq = 'F';

// LCL.ATS Adj Type USR = CND.Order Allocate-Inv First
LCL.ATS_Adj_Type_USR = 'OI';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.ATS Adj Type USR = CND.Order Allocate-Inv Last
LCL.ATS_Adj_Type_USR = 'OL';

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF LCL.ATS Adj Type USR is Order Allocates -override
IF LCL.ATS_Adj_Type_USR = 'OI'/'OL'/'OF'/'FO';

// PAR.ATS Adj Type USR 2 = CND.Order Allocate
PAR.ATS_Adj_Type_USR_2 = 'OA';

ENDIF;

//?Ship Off Cut
CASE;

// IF PAR.ATS Adj Type USR is Ship Off Cut
IF PAR.ATS_Adj_Type_USR = 'SC';

//?FP1054 UNcomment this  3/30/09
// PAR.ATS Adj Type USR 2 = CND.Sched/Alloc As Ordered
PAR.ATS_Adj_Type_USR_2 = 'AO';

// PAR.Fresh Chilling Time = CON.*ZERO
PAR.Fresh_Chilling_Time = *ZERO;

ENDIF;

//?FP1054 - Get order header info needed:   date and type
//?FP1309 notes
DO;

//?FP1309  slm 03122010
//?FP1309  --- This function will be changed to pass the data
//?elements that are need to calculate a fromto production date
//?or the calculation of number of days aged.
//?Get the Order detail information
//?From the prior programs - Change the Parms for the new fields
//?Get the Order Header from the prv rtv
ENDDO;

//?Process Order Allocate / Order Deallocate / Allocate As Ordered
CASE;

// IF PAR.ATS Adj Type USR 2 is Order Allocate
IF PAR.ATS_Adj_Type_USR_2 = 'OA';

// OR PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
OR PAR.ATS_Adj_Type_USR_2 = 'AO';

//?fp1309 pass in new parms
//?C2073 pass lcl.item age days for both parms. the 2nd one was par.item age
//?C2073 pass lcl.item age days - leave 2nd as par.item age -- used for inv
//?E3796 JJH 02/11/15 - Replace Ship Date USR with Requested Ship Date
//? Replace "I  Ship Date USR     FLD   PAR Ship Date USR"
//? With    "I  Ship Date USR     FLD   LCL Requested Ship Date"
// Call program UPD ATS Order Allocate XF.
CALL PROGRAM(UPD ATS Order Allocate XF) ('PDCNXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.Quantity_Ordered);
PARAMETER(PAR.Weight_Ordered);
PARAMETER(PAR.Quantity_Scheduled);
PARAMETER(PAR.Weight_Scheduled);
PARAMETER(LCL.ATS_Adj_Type_USR);
PARAMETER(PAR.PSAA_Program_Name);
PARAMETER(PAR.ATS_Quantity_Need_USR);
PARAMETER(PAR.ATS_Weight_Need_USR);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.ATS_Adj_Type_USR_2);
PARAMETER(*ZERO);
PARAMETER(PAR.Order_Date);
PARAMETER(PAR.Order_Type_Sales);
PARAMETER(PAR.Requested_Delivery_Date);
PARAMETER(LCL.Item_Age_Days);
PARAMETER(LCL.Production_Ovr_AgeDte_Fr);
PARAMETER(LCL.Production_Ovr_AgeDte_To);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Base_Conv_Loss_Item);
PARAMETER(PAR.Department_Code);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(PAR.Export_Domestic);
PARAMETER(PAR.Print_On_Schedule);
PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
PARAMETER(PAR.Fresh_Sched_As_Ordered);
PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
PARAMETER(PAR.Primal_Group_Code);
PARAMETER(PAR.Warehouse_Type);
PARAMETER(PAR.Warehouse_Std_Chill_Time);
PARAMETER(PAR.Warehouse_Chill_Time);
PARAMETER(PAR.WHS_Inventory_Chill_Time);
PARAMETER(PAR.Item_Age_Days);
PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
PARAMETER(PAR.Production_Ovr_AgeDte_To);

//?Process Order Allocate / Order Deallocate / Allocate As Ordered
// IF PAR.ATS Adj Type USR 2 is Order Deallocate
IF PAR.ATS_Adj_Type_USR_2 = 'OD';

//?E3796 JJH 02/11/15 - Replace Ship Date USR with Requested Ship Date
//? Replace "I  Ship Date USR     FLD   PAR Ship Date USR"
//? With    "I  Ship Date USR     FLD   LCL Requested Ship Date"
// Call program UPD ATS Order DeAlloc  XF.
CALL PROGRAM(UPD ATS Order DeAlloc  XF) ('PDCPXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.Quantity_Ordered);
PARAMETER(PAR.Weight_Ordered);
PARAMETER(PAR.Quantity_Scheduled);
PARAMETER(PAR.Weight_Scheduled);
PARAMETER(PAR.PSAA_Program_Name);
PARAMETER(PAR.ATS_Quantity_Need_USR);
PARAMETER(PAR.ATS_Weight_Need_USR);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.ATS_Adj_Type_USR_2);
PARAMETER(*ZERO);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Base_Conv_Loss_Item);
PARAMETER(PAR.Department_Code);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(PAR.Export_Domestic);
PARAMETER(PAR.Print_On_Schedule);
PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
PARAMETER(PAR.Fresh_Sched_As_Ordered);
PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
PARAMETER(PAR.Primal_Group_Code);
PARAMETER(PAR.Warehouse_Type);
PARAMETER(PAR.Warehouse_Std_Chill_Time);
PARAMETER(PAR.Warehouse_Chill_Time);

ENDIF;

ENDDO;

