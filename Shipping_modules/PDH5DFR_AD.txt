// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDH5DFR
// ?Date: 14.08.2025 Time: 03:34:46
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(LCL.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.Display Prt Opt Pmt USR = CND.*YES
PAR.Display_Prt_Opt_Pmt_USR = *YES;

// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

//?USER: Initialize subfile control

CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

ENDIF;

// CTL.Trailer ID USR = PAR.Trailer Id
CTL.Trailer_ID_USR = PAR.Trailer_Id;

// CTL.Warehouse Code = PAR.Warehouse Code
CTL.Warehouse_Code = PAR.Warehouse_Code;

//?USER: Initialize subfile record from DBF record

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

EXECUTE FUNCTION(Sel Order by Whs      RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1512396;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PGM.*Record_selected);
PARAMETER(WRK.Whs_Ord_Found_STS);
{
 //?USER: Initialize routine

 // PAR.Whs Ord Found STS = CND.no
 PAR.Whs_Ord_Found_STS = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 CASE;

 // IF PAR.Warehouse Code EQ DB1.Warehouse Code
 IF PAR.Warehouse_Code = DB1.Warehouse_Code;

 // PAR.*Record selected = CND.*YES
 PAR.*Record_selected = 'Y';

 // PAR.Whs Ord Found STS = CND.yes
 PAR.Whs_Ord_Found_STS = 'Y';

 QUIT;

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Order Pick Sts    RT) TYPE(RTVOBJ) FILE(OPEYCPP)           AC1517917;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(03);
PARAMETER(RCD.Pick_Status_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Pick Status USR = CND.Not Picked
 PAR.Pick_Status_USR = 'N';

 //?USER: Process Data record

 // PAR.Pick Status USR = CND.Picked
 PAR.Pick_Status_USR = 'Y';

}


//?USER: Process subfile control (Pre-confirm)

//?F4=Prompt
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

//?Ship to Customer
CASE;

// IF PGM.*Cursor field <IS> CTL.Ship To Customer
IF PGM.*Cursor_field = CTL.Ship_To_Customer;

//?033104 SLM ADD SHIPPED TO CUSTOMER POSITION ON CUSTOMER NAME
// Call program SEL Cust/ShpTo Flag 'Y'SR.
CALL PROGRAM(SEL Cust/ShpTo Flag 'Y'SR) ('PDYSSRR');
PARAMETER(CTL.Ship_To_Customer);

ENDIF;

//?Event Code
CASE;

// IF PGM.*Cursor field <IS> CTL.Event Code
IF PGM.*Cursor_field = CTL.Event_Code;

// Call program SEL Event Types Active SR.
CALL PROGRAM(SEL Event Types Active SR) ('PDEQSRR');
PARAMETER(CTL.Event_Code);

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?Display Order Detail
CASE;

// IF RCD.*SFLSEL is Option 5
IF RCD.*SFLSEL = '5'/'5';

// Call program DSP Order vs. Ship Dtl DF.
CALL PROGRAM(DSP Order vs. Ship Dtl DF) ('PDP7DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Type_Sales);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Ship_To_Name);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER(RCD.Order_Date);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Header_Status);
PARAMETER(RCD.Credit_Hold);
PARAMETER(RCD.Production_Hold);
PARAMETER(RCD.New_Customer_Hold);
PARAMETER(RCD.Sales_Route_Code);
PARAMETER(PAR.Application_Code);

ENDIF;

//?Display Shipping Instructions
CASE;

// IF RCD.*SFLSEL is Option 7
IF RCD.*SFLSEL = '7'/'7';

// Call program DSP Shipping Inst.     DF.
CALL PROGRAM(DSP Shipping Inst.     DF) ('PDNADFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

ENDIF;

//?Unpick
CASE;

// IF RCD.*SFLSEL is Option 11
IF RCD.*SFLSEL = '11';

//?Validate Unpick
CASE;

// IF RCD.Event Code is Shipped Thru 07 History
IF RCD.Event_Code >= '04';
AND RCD.Event_Code <= '07';

// Send error message - 'Unpick Invalid.  Order Shipped or Shipping in process.'
ERROR(USR2809);
MSGPARM(RCD.*SFLSEL);

QUIT;

//?Validate Unpick
// IF RCD.Pick Status USR is Not Picked
IF RCD.Pick_Status_USR = 'N';

// Send error message - 'Order not picked.  Order must be picked when Picked flag is yes.'
ERROR(USR1929);
MSGPARM(RCD.Order_Number);
MSGPARM(RCD.*SFLSEL);

QUIT;

//?Validate Unpick
// IF RCD.Trans Contol AS400/Plant is Plant
IF RCD.Trans_Contol_AS400_Plant = 'P';

// Send error message - 'Option Invalid.  Order is Plant Floor Controlled.'
ERROR(USR2329);
MSGPARM(RCD.*SFLSEL);

QUIT;

//?Validate Unpick
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Del Order Inv Alloc   RT) TYPE(RTVOBJ) FILE(PDL8CPP)           AC1511054;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Del Order Inv Alloc   DL) TYPE(DLTOBJ) FILE(PDL8CPP)           AC1505797;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Allocation_Seq_#);
}


// PAR.Event Code = CND.03 Picked
PAR.Event_Code = '03';

EXECUTE FUNCTION(Dlt Event by Event Cde RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1295307;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(PAR.Event_Code);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(DLT OP Order Events    DL) TYPE(DLTOBJ) FILE(OPEYCPP)          AC1170143;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Event_Number);
 QUIT;

}


EXECUTE FUNCTION(RTV Last Event Code    RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1393013;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.Event_Number);
PARAMETER(PAR.Event_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Chg Order Event        CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1536110;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(PAR.Event_Code);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


EXECUTE FUNCTION(CHG Event Code ALL     RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1427863;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(PAR.Event_Code);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(CHG Event Code         CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1428750;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Event_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?Allocate Inventory/Print or Reprint Pick Slip
CASE;

// IF RCD.*SFLSEL is Option 6
IF RCD.*SFLSEL = '6'/'6';

// OR RCD.*SFLSEL is Option 12
OR RCD.*SFLSEL = '12';

//?Validate Print
CASE;

// IF RCD.*SFLSEL is Option 6
IF RCD.*SFLSEL = '6'/'6';

CASE;

// IF RCD.Event Code is Shipped Thru 07 History
IF RCD.Event_Code >= '04';
AND RCD.Event_Code <= '07';

// Send error message - 'Pick Invalid for a Shipped Order.'
ERROR(USR2813);
MSGPARM(RCD.*SFLSEL);

QUIT;

// IF RCD.Trans Contol AS400/Plant is Plant
IF RCD.Trans_Contol_AS400_Plant = 'P';

// Send error message - 'Option Invalid.  Order is Plant Floor Controlled.'
ERROR(USR2329);
MSGPARM(RCD.*SFLSEL);

QUIT;

ENDIF;

ENDIF;

//?Validate Reprint
CASE;

// IF RCD.*SFLSEL is Option 12
IF RCD.*SFLSEL = '12';

CASE;

// IF RCD.Event Code is Entered Thru 02 Load Plan
IF RCD.Event_Code >= '01';
AND RCD.Event_Code <= '02';

// Send error message - 'Order not picked.  Order must be picked when Picked flag is yes.'
ERROR(USR1929);
MSGPARM(RCD.Order_Number);
MSGPARM(RCD.*SFLSEL);

QUIT;

// IF RCD.Trans Contol AS400/Plant is Plant
IF RCD.Trans_Contol_AS400_Plant = 'P';

// Send error message - 'Option Invalid.  Order is Plant Floor Controlled.'
ERROR(USR2329);
MSGPARM(RCD.*SFLSEL);

QUIT;

ENDIF;

ENDIF;

//?Print Option
CASE;

// IF PAR.Display Prt Opt Pmt USR is *YES
IF PAR.Display_Prt_Opt_Pmt_USR = *YES;

// Call program PMT Prt/Sbm Opt    SHR PV.
CALL PROGRAM(PMT Prt/Sbm Opt    SHR PV) ('PDKMPVR');
PARAMETER('Reprint Picks');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('O/M');
PARAMETER(1);
PARAMETER(PAR.Hold_On_Jobq);
PARAMETER(PAR.Job_Log_Create);
PARAMETER(PAR.Hold);
PARAMETER(PAR.Log);

// PAR.Display Prt Opt Pmt USR = CND.*NO
PAR.Display_Prt_Opt_Pmt_USR = *NO;

ENDIF;

//?Allocate Inventory/Print Pick Slip
CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

//?Allocate Inventory/Print Pick Slip
// IF *OTHERWISE
IF *OTHERWISE;

//?Pick Print Type
CASE;

// IF RCD.*SFLSEL is Option 6
IF RCD.*SFLSEL = '6'/'6';

// PAR.Pick Print Type USR = CND.First Print
PAR.Pick_Print_Type_USR = 'P';

//?Pick Print Type
// IF RCD.*SFLSEL is Option 12
IF RCD.*SFLSEL = '12';

// PAR.Pick Print Type USR = CND.Reprint
PAR.Pick_Print_Type_USR = 'R';

ENDIF;

EXECUTE FUNCTION(Alc Inv/Prt Pick Slip IF) TYPE(EXCINTFUN)                      AC1511000;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Hold);
PARAMETER(PAR.Log);
PARAMETER(PAR.Pick_Print_Type_USR);
{
 //?Execute internal function

 //?DOC
 DO;

 //?9/18/98 Purva Droge
 //?  This subroutine can be used for picking at the Load Level or
 //?  at the Order Level.  This routine was originally designed for
 //?  picking at the Load Level.  As of 9/15/98, the process have
 //?  changed to pick at the Order Level.  If picking the entire Load,
 //?  the Order Number passed in will be zero.  If picking by the
 //?  Order, the Order Number will be passed in and selected for
 //?  processing in the allocation routine by Order.
 //?10/01/07 Todd Johnson
 //?  This function is currently called from 2 external functions.
 //?  One of them is interactive, the other a submitted job. The Job
 //?  Type is now checked. The Pick Print is only submitted if this is
 //?  an interactive job. That way, the user only gets 1 completion
 //?  message for the Pick Slip Print.
 ENDDO;

 //?Is this first print?
 CASE;

 // IF PAR.Pick Print Type USR is First Print
 IF PAR.Pick_Print_Type_USR = 'P';

 //?NOTE
 DO;

 //?The following routine will go through the allocation
 //?for Warehouses that are not Lot Tracking.  The amount of I/O
 //?for detemining if at least one Warehouse on the Load is
 //?Lot Tracking is equal/greater than performing the following routine
 //?for the entire Load.
 //?.
 //?The Orders are marked as picked also in the following routine.
 ENDDO;

 EXECUTE FUNCTION(Alc Inv/Prt Pick Slip RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1511046;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Order_Number);
 {
  //?USER: Process Data record

  // PAR.Record Selected       USR = CND.yes
  PAR.Record_Selected_USR = 'Y';

  //?Select Order
  CASE;

  // IF PAR.Order Number is Not equal to zeros
  IF PAR.Order_Number <> *ZERO;

  // AND PAR.Order Number NE DB1.Order Number
  AND PAR.Order_Number <> DB1.Order_Number;

  // PAR.Record Selected       USR = CND.no
  PAR.Record_Selected_USR = 'N';

  ENDIF;

  //?Process Order
  CASE;

  // IF PAR.Record Selected       USR is yes
  IF PAR.Record_Selected_USR = 'Y';

  EXECUTE FUNCTION(Alc Inv/Prt Pick Slip IF) TYPE(EXCINTFUN)                      AC1511052;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  {
   //?Execute internal function

   //?Delete existing Order Inv Allocation records.
   EXECUTE FUNCTION(Del Order Inv Alloc   RT) TYPE(RTVOBJ) FILE(PDL8CPP)           AC1511054;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(Del Order Inv Alloc   DL) TYPE(DLTOBJ) FILE(PDL8CPP)           AC1505797;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(DB1.Allocation_Seq_#);
   }

   EXECUTE FUNCTION(Alc Inv/Prt Pick Slip RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1511053;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   {
    //?USER: Process Data record

    CASE;

    // IF DB1.Detail Line Status is Not Comp/Canc/Conf
    IF DB1.Detail_Line_Status = 'L'/'A'/'E'/'H';

    EXECUTE FUNCTION(Alc Inventory         RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC1511064;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(DB1.Quantity_Scheduled);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(DB1.Job_Date);
    {
     //?USER: Initialize routine

     MOVE *ALL (To: PAR From: CON);

     // PAR.Quantity Need USR = PAR.Quantity Scheduled
     PAR.Quantity_Need_USR = PAR.Quantity_Scheduled;

     // PAR.OIA Create Sts = CND.Auto
     PAR.OIA_Create_Sts = 'A';

     // PAR.OIA Modified Sts = CND.no
     PAR.OIA_Modified_Sts = 'N';

     // PAR.OIA Allocation Sts = CND.Active
     PAR.OIA_Allocation_Sts = 'A';

     // PAR.OIA Loc Pick Sts = CND.Partial
     PAR.OIA_Loc_Pick_Sts = *BLANK;

     //?USER: Process Data record

     CASE;

     // IF PAR.Quantity Need USR is EQ Zero
     IF PAR.Quantity_Need_USR = *ZERO;

     QUIT;

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF DB1.ILL Status is Available
     IF DB1.ILL_Status = 'A';

     EXECUTE FUNCTION(Rtv Available Qty     RT) TYPE(RTVOBJ) FILE(PDL8CPP)           AC1505802;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Item_Code);
     PARAMETER(DB1.Warehouse_Code);
     PARAMETER(DB1.Production_Date);
     PARAMETER(DB1.Lot_Number);
     PARAMETER(DB1.Location_Code);
     PARAMETER(DB1.Location_Level);
     PARAMETER(DB1.ILL_Item_Qty_On_Hand);
     PARAMETER(PAR.Quantity_Avail_USR);
     {
      //?USER: Initialize routine

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      // PAR.Quantity Scheduled = PAR.Quantity Scheduled + DB1.OIA Alloc/Shipped Qty
      PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + DB1.OIA_Alloc_Shipped_Qty;

      //?USER: Exit processing

      // PAR.Quantity Avail USR = PAR.ILL Item Qty On-Hand - PAR.Quantity Scheduled
      PAR.Quantity_Avail_USR = PAR.ILL_Item_Qty_On_Hand - PAR.Quantity_Scheduled;

     }

     //?Quantity Available > 0
     CASE;

     // IF PAR.Quantity Avail USR is GT Zero
     IF PAR.Quantity_Avail_USR > *ZERO;

     //?Create Order Inventory Allocation Record.
     CASE;

     // IF PAR.Quantity Need USR GE PAR.Quantity Avail USR
     IF PAR.Quantity_Need_USR >= PAR.Quantity_Avail_USR;

     // PAR.OIA Loc Pick Sts = CND.Clean Out
     PAR.OIA_Loc_Pick_Sts = 'CO';

     EXECUTE FUNCTION(Crt Order Inv Alloc   IF) TYPE(EXCINTFUN)                      AC1506139;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Order_Number);
     PARAMETER(PAR.Order_Sequence_Number);
     PARAMETER(PAR.Order_Secondary_Line_Seq);
     PARAMETER(PAR.Quantity_Avail_USR);
     PARAMETER(PAR.OIA_Alloc_Shipped_Wgt);
     PARAMETER(DB1.ILL_Co_Packer_Lot_Num);
     PARAMETER(PAR.OIA_Serial_Number);
     PARAMETER(PAR.OIA_Create_Sts);
     PARAMETER(PAR.OIA_Modified_Sts);
     PARAMETER(PAR.OIA_Allocation_Sts);
     PARAMETER(PAR.OIA_Loc_Pick_Sts);
     PARAMETER(PAR.OIA_Unused_Sts_1);
     PARAMETER(PAR.OIA_Unused_Sts_2);
     PARAMETER(DB1.Item_Code);
     PARAMETER(DB1.Warehouse_Code);
     PARAMETER(DB1.Production_Date);
     PARAMETER(DB1.Lot_Number);
     PARAMETER(DB1.Location_Code);
     PARAMETER(DB1.Location_Level);
     PARAMETER(PAR.EDI_Status_1);
     PARAMETER(PAR.EDI_Status_2);
     PARAMETER(PAR.EDI_Status_3);
     PARAMETER(PAR.Record_Status);
     PARAMETER(PAR.Job_Time);
     PARAMETER(PAR.User_Id);
     PARAMETER(PAR.Job_Name);
     PARAMETER(PAR.Job_Date);
     {
      //?Execute internal function

      EXECUTE FUNCTION(Rtv Next Seq Num      RT) TYPE(RTVOBJ) FILE(PDL8CPP)           AC1506138;
      PARAMETER(PAR.Company_Number);
      PARAMETER(PAR.Order_Number);
      PARAMETER(PAR.Order_Sequence_Number);
      PARAMETER(PAR.Order_Secondary_Line_Seq);
      PARAMETER(PAR.Allocation_Seq_#);
      {
       //?USER: Processing if Data record not found

       // PAR.Allocation Seq # = CON.1
       PAR.Allocation_Seq_# = 1;

       //?USER: Process Data record

       // PAR.Allocation Seq # = DB1.Allocation Seq # + CON.1
       PAR.Allocation_Seq_# = DB1.Allocation_Seq_# + 1;

       QUIT;

      }

      EXECUTE FUNCTION(Crt Order Inv Alloc   CR) TYPE(CRTOBJ) FILE(PDL8CPP)           AC1505795;
      PARAMETER(PAR.Company_Number);
      PARAMETER(PAR.Order_Number);
      PARAMETER(PAR.Order_Sequence_Number);
      PARAMETER(PAR.Order_Secondary_Line_Seq);
      PARAMETER(PAR.Allocation_Seq_#);
      PARAMETER(PAR.OIA_Alloc_Shipped_Qty);
      PARAMETER(PAR.OIA_Alloc_Shipped_Wgt);
      PARAMETER(PAR.OIA_Co_Packer_Lot_Num);
      PARAMETER(PAR.OIA_Serial_Number);
      PARAMETER(PAR.OIA_Create_Sts);
      PARAMETER(PAR.OIA_Modified_Sts);
      PARAMETER(PAR.OIA_Allocation_Sts);
      PARAMETER(PAR.OIA_Loc_Pick_Sts);
      PARAMETER(PAR.OIA_Unused_Sts_1);
      PARAMETER(PAR.OIA_Unused_Sts_2);
      PARAMETER(PAR.Item_Code);
      PARAMETER(PAR.Warehouse_Code);
      PARAMETER(PAR.Production_Date);
      PARAMETER(PAR.Lot_Number);
      PARAMETER(PAR.Location_Code);
      PARAMETER(PAR.Location_Level);
      PARAMETER(PAR.EDI_Status_1);
      PARAMETER(PAR.EDI_Status_2);
      PARAMETER(PAR.EDI_Status_3);
      PARAMETER(PAR.Record_Status);
      PARAMETER(PAR.Job_Time);
      PARAMETER(PAR.User_Id);
      PARAMETER(PAR.Job_Name);
      PARAMETER(PAR.Job_Date);
      {
       //?USER: Processing before Data update

       EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
       PARAMETER(DB1.Record_Status);
       PARAMETER(DB1.Job_Time);
       PARAMETER(DB1.User_Id);
       PARAMETER(DB1.Job_Name);
       PARAMETER(DB1.Job_Date);
       {
        //?Execute internal function

        // PAR.Record Status = CND.Active
        PAR.Record_Status = 'A';

        // PAR.Job Time = JOB.*Job time
        PAR.Job_Time = JOB.*Job_time;

        // PAR.User Id = JOB.*USER
        PAR.User_Id = JOB.*USER;

        // PAR.Job Name = JOB.*PROGRAM
        PAR.Job_Name = JOB.*PROGRAM;

        // PAR.Job Date = JOB.*Job date
        PAR.Job_Date = JOB.*Job_date;

       }

      }

     }

     // PAR.Quantity Need USR = PAR.Quantity Need USR - PAR.Quantity Avail USR
     PAR.Quantity_Need_USR = PAR.Quantity_Need_USR - PAR.Quantity_Avail_USR;

     //?Create Order Inventory Allocation Record.
     // IF PAR.Quantity Need USR LT PAR.Quantity Avail USR
     IF PAR.Quantity_Need_USR < PAR.Quantity_Avail_USR;

     // PAR.OIA Loc Pick Sts = CND.Partial
     PAR.OIA_Loc_Pick_Sts = *BLANK;

     EXECUTE FUNCTION(Crt Order Inv Alloc   IF) TYPE(EXCINTFUN)                      AC1506139;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Order_Number);
     PARAMETER(PAR.Order_Sequence_Number);
     PARAMETER(PAR.Order_Secondary_Line_Seq);
     PARAMETER(PAR.Quantity_Need_USR);
     PARAMETER(PAR.OIA_Alloc_Shipped_Wgt);
     PARAMETER(DB1.ILL_Co_Packer_Lot_Num);
     PARAMETER(PAR.OIA_Serial_Number);
     PARAMETER(PAR.OIA_Create_Sts);
     PARAMETER(PAR.OIA_Modified_Sts);
     PARAMETER(PAR.OIA_Allocation_Sts);
     PARAMETER(PAR.OIA_Loc_Pick_Sts);
     PARAMETER(PAR.OIA_Unused_Sts_1);
     PARAMETER(PAR.OIA_Unused_Sts_2);
     PARAMETER(DB1.Item_Code);
     PARAMETER(DB1.Warehouse_Code);
     PARAMETER(DB1.Production_Date);
     PARAMETER(DB1.Lot_Number);
     PARAMETER(DB1.Location_Code);
     PARAMETER(DB1.Location_Level);
     PARAMETER(PAR.EDI_Status_1);
     PARAMETER(PAR.EDI_Status_2);
     PARAMETER(PAR.EDI_Status_3);
     PARAMETER(PAR.Record_Status);
     PARAMETER(PAR.Job_Time);
     PARAMETER(PAR.User_Id);
     PARAMETER(PAR.Job_Name);
     PARAMETER(PAR.Job_Date);
     {
      //?Execute internal function

      EXECUTE FUNCTION(Rtv Next Seq Num      RT) TYPE(RTVOBJ) FILE(PDL8CPP)           AC1506138;
      PARAMETER(PAR.Company_Number);
      PARAMETER(PAR.Order_Number);
      PARAMETER(PAR.Order_Sequence_Number);
      PARAMETER(PAR.Order_Secondary_Line_Seq);
      PARAMETER(PAR.Allocation_Seq_#);
      {
       //?USER: Processing if Data record not found

       // PAR.Allocation Seq # = CON.1
       PAR.Allocation_Seq_# = 1;

       //?USER: Process Data record

       // PAR.Allocation Seq # = DB1.Allocation Seq # + CON.1
       PAR.Allocation_Seq_# = DB1.Allocation_Seq_# + 1;

       QUIT;

      }

      EXECUTE FUNCTION(Crt Order Inv Alloc   CR) TYPE(CRTOBJ) FILE(PDL8CPP)           AC1505795;
      PARAMETER(PAR.Company_Number);
      PARAMETER(PAR.Order_Number);
      PARAMETER(PAR.Order_Sequence_Number);
      PARAMETER(PAR.Order_Secondary_Line_Seq);
      PARAMETER(PAR.Allocation_Seq_#);
      PARAMETER(PAR.OIA_Alloc_Shipped_Qty);
      PARAMETER(PAR.OIA_Alloc_Shipped_Wgt);
      PARAMETER(PAR.OIA_Co_Packer_Lot_Num);
      PARAMETER(PAR.OIA_Serial_Number);
      PARAMETER(PAR.OIA_Create_Sts);
      PARAMETER(PAR.OIA_Modified_Sts);
      PARAMETER(PAR.OIA_Allocation_Sts);
      PARAMETER(PAR.OIA_Loc_Pick_Sts);
      PARAMETER(PAR.OIA_Unused_Sts_1);
      PARAMETER(PAR.OIA_Unused_Sts_2);
      PARAMETER(PAR.Item_Code);
      PARAMETER(PAR.Warehouse_Code);
      PARAMETER(PAR.Production_Date);
      PARAMETER(PAR.Lot_Number);
      PARAMETER(PAR.Location_Code);
      PARAMETER(PAR.Location_Level);
      PARAMETER(PAR.EDI_Status_1);
      PARAMETER(PAR.EDI_Status_2);
      PARAMETER(PAR.EDI_Status_3);
      PARAMETER(PAR.Record_Status);
      PARAMETER(PAR.Job_Time);
      PARAMETER(PAR.User_Id);
      PARAMETER(PAR.Job_Name);
      PARAMETER(PAR.Job_Date);
      {
       //?USER: Processing before Data update

       EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
       PARAMETER(DB1.Record_Status);
       PARAMETER(DB1.Job_Time);
       PARAMETER(DB1.User_Id);
       PARAMETER(DB1.Job_Name);
       PARAMETER(DB1.Job_Date);
       {
        //?Execute internal function

        // PAR.Record Status = CND.Active
        PAR.Record_Status = 'A';

        // PAR.Job Time = JOB.*Job time
        PAR.Job_Time = JOB.*Job_time;

        // PAR.User Id = JOB.*USER
        PAR.User_Id = JOB.*USER;

        // PAR.Job Name = JOB.*PROGRAM
        PAR.Job_Name = JOB.*PROGRAM;

        // PAR.Job Date = JOB.*Job date
        PAR.Job_Date = JOB.*Job_date;

       }

      }

     }

     // PAR.Quantity Need USR = CON.*ZERO
     PAR.Quantity_Need_USR = *ZERO;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

    ENDIF;

   }

  }

  //?P00196 RMC 5/09/14  Chk PFS Interface PFSPCK=Y INSTEAD,SO cat2 will still
  //?  still allow picking
  EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
  PARAMETER(DB1.Company_Number);
  PARAMETER('PFSPCK');
  PARAMETER(LCL.PFS_AccuSort_Active);
  PARAMETER(LCL.PFS_Carlisle_Active);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?S00930 RMC 9/02/09   Update event to 03 if Whse is not live with Carlisle,
  //? because if it is, Carlisle will create the Picked Event "PO" rcd
  //?E8197  DN 12/22/16 - Replaced RTVOBJ with new one to NOT select
  //?  Order Detail lines that are cancelled.
  EXECUTE FUNCTION(RTV 1st Whse Not CancelRT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2130424;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Initialize routine

   // PAR.Warehouse Code = CON.*BLANK
   PAR.Warehouse_Code = *BLANK;

   //?USER: Process Data record

   // PAR.Warehouse Code = DB1.Warehouse Code
   PAR.Warehouse_Code = DB1.Warehouse_Code;

   QUIT;

  }

  EXECUTE FUNCTION(Rtv Live w/CT PFS Int RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1797641;
  PARAMETER(LCL.Warehouse_Code);
  PARAMETER(LCL.WHS_Live_with_Carlisle);
  PARAMETER(LCL.WHS_PFS_Interface);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.WHS Live w/Carlisle is Yes
  IF LCL.WHS_Live_with_Carlisle = 'Y';

  // AND LCL.PFS Carlisle Active is Yes
  AND LCL.PFS_Carlisle_Active = 'Y';

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Upd Pick Event        RT) TYPE(RTVOBJ) FILE(OPEYCPP)           AC1511799;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER('03');
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Rtv Last Event        RT) TYPE(RTVOBJ) FILE(OPEYCPP)           AC1511802;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Event_Number);
   PARAMETER(PAR.Invoice_Memo_Company);
   PARAMETER(PAR.Invoice_Memo_Number);
   PARAMETER(PAR.Invoice_Memo_Suffix);
   PARAMETER(PAR.Event_Date);
   PARAMETER(PAR.Activity_Completion);
   PARAMETER(PAR.Activity_Hold);
   PARAMETER(PAR.Post_Cash_Complete);
   PARAMETER(PAR.Cross_Event_Ref_Comp);
   PARAMETER(PAR.Cross_Event_Ref_Order);
   PARAMETER(PAR.Cross_Event_Ref_Event);
   PARAMETER(PAR.Ship_To_Customer);
   {
    //?USER: Processing if Data record not found

    // PAR.Event Number = CON.1
    PAR.Event_Number = 1;

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   // PAR.Event Number = PAR.Event Number + CON.1
   PAR.Event_Number = PAR.Event_Number + 1;

   EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Event_Number);
   PARAMETER(PAR.Event_Code);
   PARAMETER(PAR.Invoice_Memo_Company);
   PARAMETER(PAR.Invoice_Memo_Number);
   PARAMETER(PAR.Invoice_Memo_Suffix);
   PARAMETER(PAR.Event_Date);
   PARAMETER(PAR.Activity_Completion);
   PARAMETER(PAR.Activity_Hold);
   PARAMETER(PAR.Post_Cash_Complete);
   PARAMETER(PAR.Cross_Event_Ref_Comp);
   PARAMETER(PAR.Cross_Event_Ref_Order);
   PARAMETER(PAR.Cross_Event_Ref_Event);
   PARAMETER(PAR.Ship_To_Customer);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  EXECUTE FUNCTION(CHG Order Event Code   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1324849;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Event Code is Open Orders
   IF DB1.Event_Code < '04';

   EXECUTE FUNCTION(CHG Head Status/Event  CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1314174;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Actual_Shipped_Date);
   PARAMETER(DB1.Header_Status);
   PARAMETER('03');
   PARAMETER(DB1.Modified_Flag);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // Call program TRG Order Hdr CHG Trig XT.
    CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Type_Sales);
    PARAMETER(DB1.AR_Customer_Number);
    PARAMETER(DB1.Ship_To_Customer);
    PARAMETER(DB1.Ship_To_Name);
    PARAMETER(DB1.Ship_To_Address_Line_1);
    PARAMETER(DB1.Ship_To_Address_Line_2);
    PARAMETER(DB1.Ship_To_Address_Line_3);
    PARAMETER(DB1.Ship_To_City);
    PARAMETER(DB1.Ship_To_State_Code);
    PARAMETER(DB1.Ship_To_Zip_Postal_Code);
    PARAMETER(DB1.Bill_to_Customer);
    PARAMETER(DB1.Bill_to_Name);
    PARAMETER(DB1.Bill_to_Address_Line_1);
    PARAMETER(DB1.Bill_to_Address_Line_2);
    PARAMETER(DB1.Bill_to_Address_Line_3);
    PARAMETER(DB1.Bill_to_City);
    PARAMETER(DB1.Bill_to_State_Code);
    PARAMETER(DB1.Bill_to_Zip_Postal_Code);
    PARAMETER(DB1.Customer_Purchase_Order_#);
    PARAMETER(DB1.Order_Date);
    PARAMETER(DB1.Requested_Ship_Date);
    PARAMETER(DB1.Actual_Shipped_Date);
    PARAMETER(DB1.Cancel_Date);
    PARAMETER(DB1.Terms_Code);
    PARAMETER(DB1.Special_Instructions);
    PARAMETER(DB1.Special_Instructions_2);
    PARAMETER(DB1.Carrier_Code);
    PARAMETER(DB1.Comment_Print_Acknowledge);
    PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
    PARAMETER(DB1.Comment_Print_Pick_Slip);
    PARAMETER(DB1.Comment_Print_Ship_Doc);
    PARAMETER(DB1.Reason_Code);
    PARAMETER(DB1.Order_in_Use);
    PARAMETER(DB1.Header_Status);
    PARAMETER(DB1.Header_Status_Last);
    PARAMETER(DB1.Order_Type_Print_Status);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(DB1.User_Original_Entry);
    PARAMETER(DB1.Date_of_Original_Entry);
    PARAMETER(DB1.Order_Value_Total);
    PARAMETER(DB1.Order_Weight_Total);
    PARAMETER(DB1.Credit_Hold);
    PARAMETER(DB1.Production_Hold);
    PARAMETER(DB1.New_Customer_Hold);
    PARAMETER(DB1.Requested_Delivery_Date);
    PARAMETER(DB1.Requested_Delivery_Time);
    PARAMETER(DB1.Accounts_Receiv_Ent_1);
    PARAMETER(DB1.Accounts_Receiv_Ent_2);
    PARAMETER(DB1.Load_ID);
    PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
    PARAMETER(DB1.Rated_Freight);
    PARAMETER(DB1.LTL_Flag);
    PARAMETER(DB1.Price_Audit);
    PARAMETER(DB1.Price_Status);
    PARAMETER(DB1.Shipping_Method);
    PARAMETER(DB1.Export_Status);
    PARAMETER(DB1.Palletize);
    PARAMETER(DB1.Shrink_Wrap);
    PARAMETER(DB1.Slip_Sheet);
    PARAMETER(DB1.Age_Code);
    PARAMETER(DB1.Reefer_Temperature);
    PARAMETER(DB1.Load_Type);
    PARAMETER(DB1.Attach_to_Invoice_Number);
    PARAMETER(DB1.Load_Plan_Order);
    PARAMETER(DB1.Print_Pick_Slip);
    PARAMETER(DB1.Resell_Reference_Number);
    PARAMETER(DB1.Special_Comment_1);
    PARAMETER(DB1.Special_Comment_2);
    PARAMETER(DB1.Affect_Auto_Accruals);
    PARAMETER(DB1.Sales_Route_Code);
    PARAMETER(DB1.Manager_Level_Code);
    PARAMETER(DB1.VP_Level_Code);
    PARAMETER(DB1.Attach_to_Order_Number);
    PARAMETER(DB1.Reason_for_Price_Audit);
    PARAMETER(DB1.Invoice_Number);
    PARAMETER(DB1.Invoice_Suffix);
    PARAMETER(DB1.Invoice_Date);
    PARAMETER(DB1.Event_Code);
    PARAMETER(DB1.Trans_Contol_AS400_Plant);
    PARAMETER(DB1.Modified_Flag);
    PARAMETER(DB1.A_R_order_Value_Total);
    PARAMETER(DB1.Billing_Activity_Type);
    PARAMETER(DB1.Block_Order_Flag);
    PARAMETER(DB1.Order_Certification_Flag);
    PARAMETER(DB1.Invoice_Order_Value_Tot);
    PARAMETER(DB1.Process_Sts_for_3C);
    PARAMETER(DB1.Order_Conf_Fax_Sts);
    PARAMETER(DB1.Manifest_Fax_Sts);
    PARAMETER(DB1.Invoice_Fax_Sts);
    PARAMETER(DB1.Transfer_in_Storage_Ind);
    PARAMETER(DB1.Email_Cust_On_Order_Ship);
    PARAMETER(DB1.Order_Emailed);
    PARAMETER(DB1.Export_Docs_Go_w_Driver);
    PARAMETER(DB1.Shipping_Temp_Code_C_F);
    PARAMETER(DB1.Broker_Order_Status);
    PARAMETER(DB1.Air_Freight_Order);
    PARAMETER(DB1.Order_Requires_Review);
    PARAMETER(DB1.OH_Load_Plan_Ready);
    PARAMETER(DB1.Export_USDA_Approved);
    PARAMETER(DB1.HPB_Ship_to_Warehouse);
    PARAMETER(DB1.OH_TF_Exempt_Code);
    PARAMETER(DB1.OH_Appt_Confirmation_Dt);
    PARAMETER(DB1.JPN_Invoice_Issuance_Date);
    PARAMETER(DB1.Load_Actual_Shipped_Date);
    PARAMETER(DB1.Load_BOL_Complete_Date);
    PARAMETER(DB1.Load_Truck_Departure_Date);
    PARAMETER(DB1.Maximum_Gross_Weight);
    PARAMETER(DB1.Time_of_Original_Entry);
    PARAMETER(DB1.OH_Appt_Confirmation_Tm);
    PARAMETER(DB1.Load_BOL_Complete_Time);
    PARAMETER(DB1.Load_Truck_Departure_Time);
    PARAMETER(DB1.Act_Frt_Reference_Amount);
    PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
    PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
    PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
    PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
    PARAMETER(DB1.Claim_Number);
    PARAMETER(DB1.EDI_Status_1);
    PARAMETER(DB1.EDI_Status_2);
    PARAMETER(DB1.EDI_Status_3);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);

   }

   QUIT;

   ENDIF;

  }

  EXECUTE FUNCTION(CHG Event Code ALL     RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1427863;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER('03');
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(CHG Event Code         CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1428750;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Event_Code);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  ENDIF;

  ENDIF;

 }

 ENDIF;

 EXECUTE FUNCTION(RTV Co Document Dflts  RT) TYPE(RTVOBJ) FILE(PPAQREP)          AC1823355;
 PARAMETER(PAR.Company_Number);
 PARAMETER('PL');
 PARAMETER('ACCTG');
 PARAMETER(NLL.CDD_Name_of_Overlay);
 PARAMETER(LCL.CDD_Program_Name);
 PARAMETER(LCL.CDD_Printer_File_Name);
 PARAMETER(NLL.CDD_Sender_Phone);
 PARAMETER(NLL.CDD_Sender_Fax);
 PARAMETER(NLL.Output_Queue);
 PARAMETER(NLL.Hold_File);
 PARAMETER(NLL.Save_File);
 PARAMETER(NLL.Source_Drawer);
 PARAMETER(NLL.Printer_Device_Type);
 PARAMETER(NLL.Page_Length_2);
 PARAMETER(NLL.Page_Width_2);
 PARAMETER(NLL.Page_LPI);
 PARAMETER(NLL.Page_CPI);
 PARAMETER(NLL.Page_Overflow);
 PARAMETER(NLL.Page_Rotation);
 PARAMETER(NLL.CDD_Comment_1);
 PARAMETER(NLL.CDD_Comment_2);
 PARAMETER(NLL.CDD_Comment_3);
 PARAMETER(NLL.CDD_Comment_4);
 PARAMETER(NLL.CDD_Comment_5);
 {
  //?USER: Initialize routine

  //?** Used by HPE in STR Hog Prcr & Eval Sys-HPE System
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Call program EUP Get Job Type RTVJOBA.
 CALL PROGRAM(EUP Get Job Type RTVJOBA) ('PMN1UPC');
 PARAMETER(LCL.Job_Type);

 // LCL.Number of Copies Pass USR = PAR.PRT Number of Copies
 LCL.Number_of_Copies_Pass_USR = PAR.PRT_Number_of_Copies;

 //?Submit job to batch?
 CASE;

 // IF LCL.Job Type is Interactive
 IF LCL.Job_Type = '1';

 // Retrieve message - 'JOB(&1) jobq(&2) log(&3) hold(&4)'
 PGM.*Sbmjob_override_string = RTVMSG(USR2684);
 PARAMETER('PRTPIKSLP');
 PARAMETER(PAR.PRT_Night_Queue);
 PARAMETER(PAR.Log);
 PARAMETER(PAR.Hold);

 // Call program PRT Pick Slip         UP.
 SBMJOB;
 CALL PROGRAM(PRT Pick Slip         UP) ('PDKJUPR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.PRT_Printer_Device);
 PARAMETER(PAR.PRT_Hold_Output_Sts);
 PARAMETER(PAR.PRT_Save_Output_Sts);
 PARAMETER(LCL.CDD_Program_Name);
 PARAMETER(LCL.CDD_Printer_File_Name);
 PARAMETER(LCL.Number_of_Copies_Pass_USR);
 SBMJOBEND;

 // Send information message - 'Job &1 has been submitted to job queue &2.'
 MESSAGE(USR2685 *INFO);
 MSGPARM('PRTPIKSLP');
 MSGPARM(PAR.PRT_Night_Queue);

 //?Submit job to batch?
 // IF LCL.Job Type is Batch
 IF LCL.Job_Type = '0';

 // Call program PRT Pick Slip         UP.
 CALL PROGRAM(PRT Pick Slip         UP) ('PDKJUPR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.PRT_Printer_Device);
 PARAMETER(PAR.PRT_Hold_Output_Sts);
 PARAMETER(PAR.PRT_Save_Output_Sts);
 PARAMETER(LCL.CDD_Program_Name);
 PARAMETER(LCL.CDD_Printer_File_Name);
 PARAMETER(LCL.Number_of_Copies_Pass_USR);

 ENDIF;

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?USER: Final processing (Pre-confirm)

// PAR.Display Prt Opt Pmt USR = CND.*YES
PAR.Display_Prt_Opt_Pmt_USR = *YES;

