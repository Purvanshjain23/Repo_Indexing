// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDTIDFR
// ?Date: 14.08.2025 Time: 03:29:49
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('P/S');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

//?USER: Initialize subfile control

CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// CTL.Accounting Company Number = PAR.Accounting Company Number
CTL.Company_Number = PAR.Company_Number;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

ENDIF;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize subfile record from DBF record

//?RST:  Company Number
CASE;

// IF CTL.Accounting Company Number is greater than zero
IF CTL.Company_Number > *ZERO;

// AND CTL.Accounting Company Number NE DB1.Accounting Company Number
AND CTL.Company_Number <> DB1.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL:  Production Date => *Job Date
CASE;

// IF DB1.Production Date LT JOB.*Job date
IF DB1.Production_Date < JOB.*Job_date;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// RCD.Condition Name USR = Condition name of RCD.PS Adjustment Status
RCD.Condition_Name_USR = RTVCND(RCD.PS_Adjustment_Status);

EXECUTE FUNCTION(Rtv Descriptions      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1140665;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Description_Line_One);
PARAMETER(WRK.Description_Line_Two);
PARAMETER(WRK.UOM_Primary);
PARAMETER(WRK.UOM_Second);
PARAMETER(WRK.UOM_Third);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Process subfile control (Pre-confirm)

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?Select Item, Warehouse
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Item Code
IF PGM.*Cursor_field = CTL.Item_Code;

// Call program SEL Actv Finished Good SR.
CALL PROGRAM(SEL Actv Finished Good SR) ('PDNHSRR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);

// IF PGM.*Cursor field <IS> CTL.Warehouse Code
IF PGM.*Cursor_field = CTL.Warehouse_Code;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(CTL.Warehouse_Code);

ENDIF;

ENDIF;

//?Create Adjustment
CASE;

// IF CTL.*CMD key is *Create
IF CTL.*CMD_key = '06';

// Call program Edt Adjustment        ER.
CALL PROGRAM(Edt Adjustment        ER) ('PDTPE1R');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.PS_Adjustment_Type);
PARAMETER(CTL.PS_Adjustment_Number);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Print Adjustments
CASE;

// IF CTL.*CMD key is *Print List
IF CTL.*CMD_key = '21';

// LCL.PRT Night Queue Run Sts = CND.no
LCL.PRT_Night_Queue_Run_Sts = 'N';

// Call program PMT Print Option  SHR  PV.
CALL PROGRAM(PMT Print Option  SHR  PV) ('PDG0PVR');
PARAMETER('Production Adjustments');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(LCL.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// Execute command - 'PS Prt Lst W/Company'
EXECUTE COMMAND(USR1860);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('PDJYPFR');
PARAMETER('PDJYPFR$');
PARAMETER('P/S');
PARAMETER(CTL.Company_Number);
PARAMETER('PRTPRDADJ');

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?Edit
CASE;

// IF RCD.*SFLSEL is *Edit
IF RCD.*SFLSEL = '2'/'2';

// Call program Edt Adjustment        ER.
CALL PROGRAM(Edt Adjustment        ER) ('PDTPE1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.PS_Adjustment_Type);
PARAMETER(RCD.PS_Adjustment_Number);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Delete
CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

// AND RCD.PS Adjustment Type is One Time/Production
AND RCD.PS_Adjustment_Type = 'PR'/'OT';

// PAR.Error Status = CND.no
PAR.Error_Status = 'N';

EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(WRK.Description_Line_One);
PARAMETER(WRK.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(WRK.Item_Structure_Class_Code);
PARAMETER(WRK.Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(WRK.Item_Type_Code);
PARAMETER(WRK.Default_Warehouse);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(WRK.Base_Conv_Loss_Item);
PARAMETER(WRK.Variety_Rendered_Cut);
PARAMETER(WRK.Credit_Item_Status);
PARAMETER(WRK.Std_Weight_Head_Var_Ren);
PARAMETER(WRK.Pieces_Per_Head);
PARAMETER(WRK.Department_Code);
PARAMETER(WRK.Group_for_Packaging);
PARAMETER(WRK.Seconds_Item);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(WRK.Export_Domestic);
PARAMETER(WRK.Print_On_Schedule);
PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
PARAMETER(WRK.Fresh_Sched_As_Ordered);
PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
PARAMETER(WRK.Primal_Group_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(WRK.Warehouse_Type);
PARAMETER(WRK.Trans_Contol_AS400_Plant);
PARAMETER(WRK.Warehouse_Location);
PARAMETER(PAR.Warehouse_Std_Chill_Time);
PARAMETER(PAR.Warehouse_Chill_Time);
PARAMETER(WRK.PS_Item_Id);
{
 //?Execute internal function

 EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Description_Line_One);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Type_Code);
 PARAMETER(PAR.Default_Warehouse);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 PARAMETER(PAR.Variety_Rendered_Cut);
 PARAMETER(PAR.Credit_Item_Status);
 PARAMETER(PAR.Std_Weight_Head_Var_Ren);
 PARAMETER(PAR.Pieces_Per_Head);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Group_for_Packaging);
 PARAMETER(PAR.Seconds_Item);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Export_Domestic);
 PARAMETER(PAR.Print_On_Schedule);
 PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
 PARAMETER(PAR.Fresh_Sched_As_Ordered);
 PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
 PARAMETER(PAR.Primal_Group_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.Trans_Contol_AS400_Plant);
 PARAMETER(PAR.Warehouse_Location);
 PARAMETER(PAR.Warehouse_Std_Chill_Time);
 PARAMETER(PAR.Warehouse_Chill_Time);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Description_Line_One);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Type_Code);
  PARAMETER(PAR.Default_Warehouse);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Base_Conv_Loss_Item);
  PARAMETER(PAR.Variety_Rendered_Cut);
  PARAMETER(PAR.Credit_Item_Status);
  PARAMETER(PAR.Std_Weight_Head_Var_Ren);
  PARAMETER(PAR.Pieces_Per_Head);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Group_for_Packaging);
  PARAMETER(PAR.Seconds_Item);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.Export_Domestic);
  PARAMETER(PAR.Print_On_Schedule);
  PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
  PARAMETER(PAR.Fresh_Sched_As_Ordered);
  PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
  PARAMETER(PAR.Primal_Group_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  PARAMETER(PAR.Warehouse_Location);
  PARAMETER(PAR.Warehouse_Std_Chill_Time);
  PARAMETER(PAR.Warehouse_Chill_Time);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

 }

 EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
 PARAMETER(PAR.Item_Type_Code);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 PARAMETER(PAR.Variety_Rendered_Cut);
 PARAMETER(PAR.Credit_Item_Status);
 PARAMETER(PAR.Seconds_Item);
 PARAMETER(PAR.PS_Item_Id);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Item Type Code is Raw Materials
  IF PAR.Item_Type_Code = 'RM';

  // PAR.PS Item Identification = CND.RM Base
  PAR.PS_Item_Id = 'RMB';

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF PAR.Seconds Item is Yes
  IF PAR.Seconds_Item = 'Y';

  // PAR.PS Item Identification = CND.FG Seconds
  PAR.PS_Item_Id = 'FSC';

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF PAR.Variety/Rendered/Cut is Variety
  IF PAR.Variety_Rendered_Cut = 'V';

  // PAR.PS Item Identification = CND.FG Variety
  PAR.PS_Item_Id = 'FVR';

  // IF PAR.Variety/Rendered/Cut is Rendered
  IF PAR.Variety_Rendered_Cut = 'R';

  // PAR.PS Item Identification = CND.FG Rendered
  PAR.PS_Item_Id = 'FRD';

  // IF PAR.Variety/Rendered/Cut is Cut
  IF PAR.Variety_Rendered_Cut = 'C';

  //?Base/Converted/Fabricated
  CASE;

  // IF PAR.Credit Item Status is yes
  IF PAR.Credit_Item_Status = 'Y';

  //?Setup Base/Converted/Fabricated Credit
  CASE;

  // IF PAR.Converted/Base Item is Base
  IF PAR.Base_Conv_Loss_Item = 'B';

  // PAR.PS Item Identification = CND.FG Base Credit
  PAR.PS_Item_Id = 'FBC';

  //?Setup Base/Converted/Fabricated Credit
  // IF PAR.Converted/Base Item is Converted
  IF PAR.Base_Conv_Loss_Item = 'C';

  // PAR.PS Item Identification = CND.FG Converted Credit
  PAR.PS_Item_Id = 'FCC';

  //?Setup Base/Converted/Fabricated Credit
  // IF PAR.Converted/Base Item is Fabricated
  IF PAR.Base_Conv_Loss_Item = 'F';

  // PAR.PS Item Identification = CND.FG Fabricated Credit
  PAR.PS_Item_Id = 'FFC';

  //?Setup Base/Converted/Fabricated Credit
  // IF PAR.Converted/Base Item is Loss
  IF PAR.Base_Conv_Loss_Item = 'L';

  // PAR.PS Item Identification = CND.FG Loss Credit
  PAR.PS_Item_Id = 'FLC';

  ENDIF;

  //?Base/Converted/Fabricated
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Setup Base/Converted/Fabricated
  CASE;

  // IF PAR.Converted/Base Item is Base
  IF PAR.Base_Conv_Loss_Item = 'B';

  // PAR.PS Item Identification = CND.FG Base
  PAR.PS_Item_Id = 'FGB';

  //?Setup Base/Converted/Fabricated
  // IF PAR.Converted/Base Item is Converted
  IF PAR.Base_Conv_Loss_Item = 'C';

  // PAR.PS Item Identification = CND.FG Converted
  PAR.PS_Item_Id = 'FCV';

  //?Setup Base/Converted/Fabricated
  // IF PAR.Converted/Base Item is Fabricated
  IF PAR.Base_Conv_Loss_Item = 'F';

  // PAR.PS Item Identification = CND.FG Fabricated
  PAR.PS_Item_Id = 'FFB';

  //?Setup Base/Converted/Fabricated
  // IF PAR.Converted/Base Item is Loss
  IF PAR.Base_Conv_Loss_Item = 'L';

  // PAR.PS Item Identification = CND.FG Loss
  PAR.PS_Item_Id = 'FLS';

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

 }

}


//?Determine Production Type
CASE;

// IF RCD.Production Date EQ JOB.*Job date
IF RCD.Production_Date = JOB.*Job_date;

// PAR.Production Type = CND.Schedule
PAR.Production_Type = 'S';

EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
PARAMETER(RCD.Company_Number);
PARAMETER(PAR.Production_Type);
PARAMETER(RCD.Production_Date);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


//?Set to Plan if record not found
CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// PAR.Production Type = CND.Plan
PAR.Production_Type = 'P';

ENDIF;

//?Determine Production Type
// IF RCD.Production Date GT JOB.*Job date
IF RCD.Production_Date > JOB.*Job_date;

// PAR.Production Type = CND.Plan
PAR.Production_Type = 'P';

ENDIF;

EXECUTE FUNCTION(Rtv AvgPcWgt/Prd/PrdAl RT) TYPE(RTVOBJ) FILE(PDI8CPP)          AC1484812;
PARAMETER(RCD.Company_Number);
PARAMETER(PAR.Production_Type);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(PAR.PS_Weight_Production_Need);
PARAMETER(PAR.PS_Pieces_Production_Need);
PARAMETER(WRK.PS_Avg_Piece_Wgt);
PARAMETER(WRK.PS_Weight_Prod_Allocated);
PARAMETER(WRK.PS_Pieces_Prod_Allocated);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // Total Production Weight
 PAR.PS_Weight_Planned_Prod = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
 - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

 // Total Production Pieces
 PAR.PS_Pieces_Planned_Prod = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
 - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

}


CASE;

// IF PAR.Piece Count Item is yes
IF PAR.Piece_Count_Item = 'Y';

// Pieces Prod after delete
PAR.ATS_Pieces_Available_USR = PAR.PS_Pieces_Production_Need - ( (                                 +
RCD.PS_Adjustment_Quantity * PAR.Pieces_Per_Bag ) * PAR.Bags_Per_Unit );

//?If pieces available is LT zero then error
CASE;

// IF PAR.ATS Pieces Available USR is LT Zeros
IF PAR.ATS_Pieces_Available_USR < *ZERO;

// PAR.Error Status = CND.yes
PAR.Error_Status = 'Y';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Weight Prod after delete
PAR.ATS_Weight_Available_USR = PAR.PS_Weight_Production_Need - (                                   +
RCD.PS_Adjustment_Quantity * PAR.Unit_Weight );

//?If weight available is LT zero then error
CASE;

// IF PAR.ATS Weight Available USR is Less than zero
IF PAR.ATS_Weight_Available_USR < *ZERO;

// PAR.Error Status = CND.yes
PAR.Error_Status = 'Y';

ENDIF;

ENDIF;

//?If error then send messge else proceed to confirm
CASE;

// IF PAR.Error Status is yes
IF PAR.Error_Status = 'Y';

// Send error message - 'Production will go negative delete not allowed.'
ERROR(USR2570);
MSGPARM(RCD.*SFLSEL);

//?If error then send messge else proceed to confirm
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

QUIT;

ENDIF;

//?Delete
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

QUIT;

ENDIF;

//?USER: Process subfile record (Post-confirm)

// Send status message - 'Processing...'
MESSAGE(USR2303 *STATUS);

//?Delete
CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

//?Determine Production Type
CASE;

// IF RCD.Production Date EQ JOB.*Job date
IF RCD.Production_Date = JOB.*Job_date;

// PAR.Production Type = CND.Schedule
PAR.Production_Type = 'S';

EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
PARAMETER(RCD.Company_Number);
PARAMETER(PAR.Production_Type);
PARAMETER(RCD.Production_Date);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


//?Set to Plan if record not found
CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// PAR.Production Type = CND.Plan
PAR.Production_Type = 'P';

ENDIF;

//?Determine Production Type
// IF RCD.Production Date GT JOB.*Job date
IF RCD.Production_Date > JOB.*Job_date;

// PAR.Production Type = CND.Plan
PAR.Production_Type = 'P';

ENDIF;

//?Update Production
CASE;

// IF RCD.PS Adjustment Type is One Time/Production
IF RCD.PS_Adjustment_Type = 'PR'/'OT';

// RCD.PS Adjustment Quantity = RCD.PS Adjustment Quantity * CON.-1 *
RCD.PS_Adjustment_Quantity = RCD.PS_Adjustment_Quantity * -1;

// Call program UPD Avail-To-Sell  SCH XF.
CALL PROGRAM(UPD Avail-To-Sell  SCH XF) ('PDTRXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.PS_Adjustment_Quantity);
PARAMETER('SA');
PARAMETER(PAR.Production_Type);
PARAMETER(WRK.Return_Code_ATS_USR);
PARAMETER(RCD.PS_Adjustment_Number);

CASE;

// IF WRK.Return Code ATS USR is BOM Not Found
IF WRK.Return_Code_ATS_USR = 'BNF';

// Send error message - 'Bill of Material for Item &1 does not exist.'
ERROR(USR2057);
MSGPARM(RCD.Item_Code);

ENDIF;

//?Update Production
// IF RCD.PS Adjustment Type is Forecast
IF RCD.PS_Adjustment_Type = 'FC';

//?Setup chill time
CASE;

// IF PAR.Warehouse Std Chill Time is yes
IF PAR.Warehouse_Std_Chill_Time = 'Y';

// PAR.Fresh Chilling Time = PAR.Warehouse Chill Time
PAR.Fresh_Chilling_Time = PAR.Warehouse_Chill_Time;

ENDIF;

EXECUTE FUNCTION(CLC In/Dc Dte Mon-Sat IF) TYPE(EXCINTFUN)                      AC1462310;
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Production_Date);
PARAMETER(PAR.Fresh_Chilling_Time);
{
 //?Execute internal function

 CASE;

 // IF PAR.*Duration (factor) is LT Zero
 IF PAR.*Duration_factor < *ZERO;

 // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
 WRK.*Duration_factor = PAR.*Duration_factor * -1;

 EXECUTE FUNCTION(CLC Date(d) Mon-Sat   RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1462308;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.*Date2_beginning);
 PARAMETER(PAR.*Date1_ending);
 PARAMETER(PAR.*Date2_beginning);
 PARAMETER(WRK.*Duration_factor);
 {
  //?USER: Initialize routine

  // WRK.Count USR = CON.*ZERO
  WRK.Count_USR = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
  IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF DB1.Day of Week is Mon - Sat
  IF DB1.Day_of_Week = '6'/'2'/'7'/'5'/'3'/'4';

  // WRK.Count USR = WRK.Count USR + CON.1
  WRK.Count_USR = WRK.Count_USR + 1;

  ENDIF;

  ENDIF;

  CASE;

  // IF WRK.Count USR EQ PAR.*Duration (factor)
  IF WRK.Count_USR = PAR.*Duration_factor;

  // PAR.*Date1 (ending) = DB1.Post to G/L Date
  PAR.*Date1_ending = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

 }

 // IF PAR.*Duration (factor) is GT Zero
 IF PAR.*Duration_factor > *ZERO;

 EXECUTE FUNCTION(CLC Date(a) Mon-Sat   RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1462309;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.*Date2_beginning);
 PARAMETER(PAR.*Date1_ending);
 PARAMETER(PAR.*Date2_beginning);
 PARAMETER(PAR.*Duration_factor);
 {
  //?USER: Initialize routine

  // WRK.Count USR = CON.*ZERO
  WRK.Count_USR = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
  IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF DB1.Day of Week is Mon - Sat
  IF DB1.Day_of_Week = '6'/'2'/'7'/'5'/'3'/'4';

  // WRK.Count USR = WRK.Count USR + CON.1
  WRK.Count_USR = WRK.Count_USR + 1;

  ENDIF;

  ENDIF;

  CASE;

  // IF WRK.Count USR EQ PAR.*Duration (factor)
  IF WRK.Count_USR = PAR.*Duration_factor;

  // PAR.*Date1 (ending) = DB1.Post to G/L Date
  PAR.*Date1_ending = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

 }

 // IF PAR.*Duration (factor) is EQ Zero
 IF PAR.*Duration_factor = *ZERO;

 // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
 PAR.*Date1_ending = PAR.*Date2_beginning;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(WRK.Weight_Scheduled_SUM);
PARAMETER(PAR.Quantity_Scheduled_SUM);
PARAMETER('S');
{
 //?USER: Initialize routine

 // PAR.Weight Scheduled SUM = CON.*ZERO
 PAR.Weight_Scheduled_SUM = *ZERO;

 // PAR.Quantity Scheduled SUM = CON.*ZERO
 PAR.Quantity_Scheduled_SUM = *ZERO;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Header_Status);
 PARAMETER(WRK.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.Header Status is Not Comp/Canc/Conf
 IF WRK.Header_Status = 'L'/'A'/'E'/'H';

 // AND WRK.Billing Activity Type is Invoice or Transfer
 AND WRK.Billing_Activity_Type = '1'/'4';

 CASE;

 // IF PAR.Ord/Sch Sts USR is Scheduled
 IF PAR.Ord_Sch_Sts_USR = 'S';

 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

 // IF PAR.Ord/Sch Sts USR is Ordered
 IF PAR.Ord_Sch_Sts_USR = 'O';

 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

 ENDIF;

 ENDIF;

}


// WRK.PS Adjustment Quantity = RCD.PS Adjustment Quantity - PAR.Quantity Scheduled
WRK.PS_Adjustment_Quantity = RCD.PS_Adjustment_Quantity - PAR.Quantity_Scheduled_SUM;

//?If adjustment quantity is greater than ordered delete difference
CASE;

// IF WRK.PS Adjustment Quantity is GT Zero
IF WRK.PS_Adjustment_Quantity > *ZERO;

// WRK.PS Adjustment Quantity = WRK.PS Adjustment Quantity * CON.-1 *
WRK.PS_Adjustment_Quantity = WRK.PS_Adjustment_Quantity * -1;

// Call program UPD Avail-To-Sell  SCH XF.
CALL PROGRAM(UPD Avail-To-Sell  SCH XF) ('PDTRXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(WRK.PS_Adjustment_Quantity);
PARAMETER('SF');
PARAMETER(PAR.Production_Type);
PARAMETER(WRK.Return_Code_ATS_USR);
PARAMETER(RCD.PS_Adjustment_Number);

ENDIF;

CASE;

// IF WRK.Return Code ATS USR is BOM Not Found
IF WRK.Return_Code_ATS_USR = 'BNF';

// Send error message - 'Bill of Material for Item &1 does not exist.'
ERROR(USR2057);
MSGPARM(RCD.Item_Code);

ENDIF;

//?Update Production
// IF RCD.PS Adjustment Type is Ship Cut
IF RCD.PS_Adjustment_Type = 'SC';

// RCD.PS Adjustment Quantity = RCD.PS Adjustment Quantity * CON.-1 *
RCD.PS_Adjustment_Quantity = RCD.PS_Adjustment_Quantity * -1;

CASE;

// IF PAR.Piece Count Item is yes
IF PAR.Piece_Count_Item = 'Y';

EXECUTE FUNCTION(Rtv Avg Piece Wgt     RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478092;
PARAMETER(RCD.Company_Number);
PARAMETER(PAR.Production_Type);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(WRK.PS_Avg_Piece_Wgt);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.PS Weight Ship Cut Adj = RCD.PS Adjustment Quantity * WRK.PS Avg Piece Wgt *
PAR.PS_Weight_Ship_Cut_Adj = RCD.PS_Adjustment_Quantity * WRK.PS_Avg_Piece_Wgt 'H';

// Pieces
PAR.PS_Pieces_Ship_Cut_Adj = ( RCD.PS_Adjustment_Quantity * PAR.Pieces_Per_Bag 'H' )               +
* PAR.Bags_Per_Unit 'H';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.PS Weight Ship Cut Adj = RCD.PS Adjustment Quantity * PAR.Unit Weight *Round
PAR.PS_Weight_Ship_Cut_Adj = RCD.PS_Adjustment_Quantity * PAR.Unit_Weight 'H';

// PAR.PS Pieces Ship Cut Adj = CON.*ZERO
PAR.PS_Pieces_Ship_Cut_Adj = *ZERO;

ENDIF;

EXECUTE FUNCTION(Upd Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461650;
PARAMETER(RCD.Company_Number);
PARAMETER(PAR.Production_Type);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Available_Ship_Date);
 PARAMETER(PAR.PS_Weight_Planned_Prod);
 PARAMETER(PAR.PS_Pieces_Planned_Prod);
 PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.PS_Weight_Inv_On_Hand);
 PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
 PARAMETER(PAR.PS_Weight_Standard);
 PARAMETER(PAR.PS_Pieces_Standard);
 PARAMETER(PAR.PS_Weight_Converted);
 PARAMETER(PAR.PS_Pieces_Converted);
 PARAMETER(PAR.PS_Weight_Shipping_Adj);
 PARAMETER(PAR.PS_Pieces_Shipping_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Adj);
 PARAMETER(PAR.PS_Pieces_Prod_Adj);
 PARAMETER(PAR.PS_Weight_Inv_Adj);
 PARAMETER(PAR.PS_Pieces_Inv_Adj);
 PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Allocated);
 PARAMETER(PAR.PS_Pieces_Prod_Allocated);
 PARAMETER(PAR.PS_Weight_Inv_Allocated);
 PARAMETER(PAR.PS_Pieces_Inv_Allocated);
 PARAMETER(PAR.PS_Unit_Weight);
 PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(PAR.PS_Pieces_Unused_2);
 PARAMETER(PAR.PS_Weight_Unused_3);
 PARAMETER(PAR.PS_Pieces_Unused_3);
 PARAMETER(PAR.PS_Weight_Unused_4);
 PARAMETER(PAR.PS_Pieces_Unused_4);
 PARAMETER(PAR.PS_Weight_Unused_5);
 PARAMETER(PAR.PS_Pieces_Unused_5);
 PARAMETER(PAR.PS_Weight_Unused_6);
 PARAMETER(PAR.PS_Pieces_Unused_6);
 PARAMETER(PAR.PS_Item_Id);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.PS_Lock_Status);
 PARAMETER(PAR.PS_Export_Domestic);
 PARAMETER(PAR.PS_Print_On_Schedule);
 PARAMETER(PAR.PS_Piece_Count_Item);
 PARAMETER(PAR.PS_Unused_Sts_1);
 PARAMETER(PAR.PS_Unused_Sts_2);
 PARAMETER(PAR.PS_Unused_Sts_3);
 PARAMETER(PAR.PS_Unused_Sts_4);
 PARAMETER(PAR.PS_Item_Sched_Need_Sts);
 PARAMETER(PAR.PS_Production_Warehouse);
 PARAMETER(PAR.PS_Weight_Ordered);
 PARAMETER(PAR.PS_Pieces_Ordered);
 PARAMETER(PAR.PS_Weight_FC_Adjusted);
 PARAMETER(PAR.PS_Pieces_FC_Adjusted);
 PARAMETER(PAR.PS_Weight_FX_Adjusted);
 PARAMETER(PAR.PS_Pieces_FX_Adjusted);
 PARAMETER(PAR.PS_Weight_Sched_Shipment);
 PARAMETER(PAR.PS_Pieces_Sched_Shipment);
 PARAMETER(PAR.PS_Weight_Available_Prod);
 PARAMETER(PAR.PS_Pieces_Available_Prod);
 PARAMETER(PAR.PS_Weight_Production_Need);
 PARAMETER(PAR.PS_Pieces_Production_Need);
 PARAMETER(PAR.PS_Weight_Fab_Needs);
 PARAMETER(PAR.PS_Pieces_Fab_Needs);
 PARAMETER(PAR.PS_Weight_Sched_Prod);
 PARAMETER(PAR.PS_Pieces_Sched_Prod);
 PARAMETER(PAR.PS_Weight_Sched_Need);
 PARAMETER(PAR.PS_Pieces_Sched_Need);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Primal_Group_Code);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Job_Time);
 PARAMETER(PAR.User_Id);
 PARAMETER(PAR.Job_Name);
 PARAMETER(PAR.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(WRK.Description_Line_One);
  PARAMETER(WRK.UOM_Primary);
  PARAMETER(WRK.Unit_Weight);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(WRK.Item_Type_Code);
  PARAMETER(WRK.Default_Warehouse);
  PARAMETER(WRK.Fresh_Chilling_Time);
  PARAMETER(WRK.Base_Conv_Loss_Item);
  PARAMETER(WRK.Variety_Rendered_Cut);
  PARAMETER(WRK.Credit_Item_Status);
  PARAMETER(WRK.Std_Weight_Head_Var_Ren);
  PARAMETER(WRK.Pieces_Per_Head);
  PARAMETER(DB1.Department_Code);
  PARAMETER(WRK.Group_for_Packaging);
  PARAMETER(WRK.Seconds_Item);
  PARAMETER(DB1.PS_Piece_Count_Item);
  PARAMETER(WRK.Pieces_Per_Bag);
  PARAMETER(WRK.Bags_Per_Unit);
  PARAMETER(DB1.PS_Export_Domestic);
  PARAMETER(DB1.PS_Print_On_Schedule);
  PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
  PARAMETER(WRK.Fresh_Sched_As_Ordered);
  PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
  PARAMETER(DB1.Primal_Group_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Warehouse_Type);
  PARAMETER(WRK.Trans_Contol_AS400_Plant);
  PARAMETER(WRK.Warehouse_Location);
  PARAMETER(WRK.Warehouse_Std_Chill_Time);
  PARAMETER(WRK.Warehouse_Chill_Time);
  PARAMETER(DB1.PS_Item_Id);
  {
   //?Execute internal function

   EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Description_Line_One);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Default_Warehouse);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Std_Weight_Head_Var_Ren);
   PARAMETER(PAR.Pieces_Per_Head);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Group_for_Packaging);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Export_Domestic);
   PARAMETER(PAR.Print_On_Schedule);
   PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
   PARAMETER(PAR.Fresh_Sched_As_Ordered);
   PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
   PARAMETER(PAR.Primal_Group_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.Trans_Contol_AS400_Plant);
   PARAMETER(PAR.Warehouse_Location);
   PARAMETER(PAR.Warehouse_Std_Chill_Time);
   PARAMETER(PAR.Warehouse_Chill_Time);
   {
    //?Execute internal function

    EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

   }

   EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.PS_Item_Id);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Item Type Code is Raw Materials
    IF PAR.Item_Type_Code = 'RM';

    // PAR.PS Item Identification = CND.RM Base
    PAR.PS_Item_Id = 'RMB';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF PAR.Seconds Item is Yes
    IF PAR.Seconds_Item = 'Y';

    // PAR.PS Item Identification = CND.FG Seconds
    PAR.PS_Item_Id = 'FSC';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF PAR.Variety/Rendered/Cut is Variety
    IF PAR.Variety_Rendered_Cut = 'V';

    // PAR.PS Item Identification = CND.FG Variety
    PAR.PS_Item_Id = 'FVR';

    // IF PAR.Variety/Rendered/Cut is Rendered
    IF PAR.Variety_Rendered_Cut = 'R';

    // PAR.PS Item Identification = CND.FG Rendered
    PAR.PS_Item_Id = 'FRD';

    // IF PAR.Variety/Rendered/Cut is Cut
    IF PAR.Variety_Rendered_Cut = 'C';

    //?Base/Converted/Fabricated
    CASE;

    // IF PAR.Credit Item Status is yes
    IF PAR.Credit_Item_Status = 'Y';

    //?Setup Base/Converted/Fabricated Credit
    CASE;

    // IF PAR.Converted/Base Item is Base
    IF PAR.Base_Conv_Loss_Item = 'B';

    // PAR.PS Item Identification = CND.FG Base Credit
    PAR.PS_Item_Id = 'FBC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Converted
    IF PAR.Base_Conv_Loss_Item = 'C';

    // PAR.PS Item Identification = CND.FG Converted Credit
    PAR.PS_Item_Id = 'FCC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Fabricated
    IF PAR.Base_Conv_Loss_Item = 'F';

    // PAR.PS Item Identification = CND.FG Fabricated Credit
    PAR.PS_Item_Id = 'FFC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Loss
    IF PAR.Base_Conv_Loss_Item = 'L';

    // PAR.PS Item Identification = CND.FG Loss Credit
    PAR.PS_Item_Id = 'FLC';

    ENDIF;

    //?Base/Converted/Fabricated
    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Setup Base/Converted/Fabricated
    CASE;

    // IF PAR.Converted/Base Item is Base
    IF PAR.Base_Conv_Loss_Item = 'B';

    // PAR.PS Item Identification = CND.FG Base
    PAR.PS_Item_Id = 'FGB';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Converted
    IF PAR.Base_Conv_Loss_Item = 'C';

    // PAR.PS Item Identification = CND.FG Converted
    PAR.PS_Item_Id = 'FCV';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Fabricated
    IF PAR.Base_Conv_Loss_Item = 'F';

    // PAR.PS Item Identification = CND.FG Fabricated
    PAR.PS_Item_Id = 'FFB';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Loss
    IF PAR.Base_Conv_Loss_Item = 'L';

    // PAR.PS Item Identification = CND.FG Loss
    PAR.PS_Item_Id = 'FLS';

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

   }

  }

  //?FP1054 Output PS Prod Warehouse
  EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Production_Warehouse);
  PARAMETER(LCL.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Available Ship Date
  CASE;

  // IF WRK.Warehouse Std Chill Time is yes
  IF WRK.Warehouse_Std_Chill_Time = 'Y';

  EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(WRK.Warehouse_Chill_Time);
  PARAMETER(DB1.PS_Available_Ship_Date);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.Chilling Time
   IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

   // PAR.PS Available Ship Date = DB1.Post to G/L Date
   PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

   //?Skip Saturday
   CASE;

   // IF DB1.Day of Week is Saturday
   IF DB1.Day_of_Week = '7';

   //?Skip Saturday
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  //?Available Ship Date
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(WRK.Fresh_Chilling_Time);
  PARAMETER(DB1.PS_Available_Ship_Date);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.Chilling Time
   IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

   // PAR.PS Available Ship Date = DB1.Post to G/L Date
   PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

   //?Skip Saturday
   CASE;

   // IF DB1.Day of Week is Saturday
   IF DB1.Day_of_Week = '7';

   //?Skip Saturday
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  ENDIF;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Planned Prod is GT Zero
  IF PAR.PS_Pieces_Planned_Prod > *ZERO;

  // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
  DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

  ENDIF;

  EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // DB1.PS Lock Status = CND.NOT LOCKED
  DB1.PS_Lock_Status = 'N';

 }

 //?USER: Process Data record

 // WRK.PS Weight Ship Cut Adjust = DB1.PS Weight Ship Cut Adjust + PAR.PS Weight Sh
 WRK.PS_Weight_Ship_Cut_Adj = DB1.PS_Weight_Ship_Cut_Adj + PAR.PS_Weight_Ship_Cut_Adj;

 // WRK.PS Pieces Ship Cut Adj = DB1.PS Pieces Ship Cut Adj + PAR.PS Pieces Ship Cut
 WRK.PS_Pieces_Ship_Cut_Adj = DB1.PS_Pieces_Ship_Cut_Adj + PAR.PS_Pieces_Ship_Cut_Adj;

 EXECUTE FUNCTION(Chg Ship Cut Adjust   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1461651;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.PS_Weight_Ship_Cut_Adj);
 PARAMETER(WRK.PS_Pieces_Ship_Cut_Adj);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


ENDIF;

EXECUTE FUNCTION(DLT Prod. Adjustment   DL) TYPE(DLTOBJ) FILE(PDI9CPP)          AC1261450;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.PS_Adjustment_Type);
PARAMETER(RCD.PS_Adjustment_Number);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

