// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POAYXFR
// ?Date: 14.08.2025 Time: 03:36:38
// ?------------------------------------------------------------------------------------------------

//?Execute user function

// Call program Zzz Lock/Unlock HDR ID XF.
CALL PROGRAM(Zzz Lock/Unlock HDR ID XF) ('POAVXFR');
PARAMETER('L');

// PAR.GAF Order Type = CND.Delete
PAR.GAF_Order_Type = 'D';

EXECUTE FUNCTION(Rtv Batch Control No.  RT) TYPE(RTVOBJ) FILE(PONMREP)          AC1579594;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.GAF_Order_Batch_No);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(CRT GFP Order Header   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1579565;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.GAF_Customer_Number);
PARAMETER(PAR.GAF_Order_Type);
PARAMETER(PAR.GAF_Order_Batch_No);
{
 //?USER: Process Data record

 //?If order not cancelled add to GAF Files
 CASE;

 // IF DB1.Header Status is Cancelled
 IF DB1.Header_Status = 'X';

 //?If order not cancelled add to GAF Files
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Load GAF file fields
 DO;

 // LCL.GAF Load Id = CVTVAR(PAR.Load ID)
 LCL.GAF_Load_Id = CVTVAR(PAR.Load_ID);

 // PAR.GAF Order Number = CVTVAR(DB1.Order Number)
 PAR.GAF_Order_Number = CVTVAR(DB1.Order_Number);

 // LCL.GAF Customer PO No. = DB1.Customer Purchase Order #
 LCL.GAF_Customer_PO_No = DB1.Customer_Purchase_Order_#;

 // LCL.GAF Shipto Name = DB1.Ship To Name
 LCL.GAF_Shipto_Name = DB1.Ship_To_Name;

 // LCL.GAF Shipto Address 1 = DB1.Ship To Address Line 1
 LCL.GAF_Shipto_Address_1 = DB1.Ship_To_Address_Line_1;

 // LCL.GAF Shipto Address 2 = DB1.Ship To Address Line 2
 LCL.GAF_Shipto_Address_2 = DB1.Ship_To_Address_Line_2;

 // LCL.GAF Shipto City = DB1.Ship To City
 LCL.GAF_Shipto_City = DB1.Ship_To_City;

 // LCL.GAF Shipto State = DB1.Ship To State Code
 LCL.GAF_Shipto_State = DB1.Ship_To_State_Code;

 // LCL.GAF Shipto Zip = DB1.Ship To Zip/Postal Code
 LCL.GAF_Shipto_Zip = DB1.Ship_To_Zip_Postal_Code;

 // LCL.GAF Shipto Address 3 = DB1.Ship To Address Line 3
 LCL.GAF_Shipto_Address_3 = DB1.Ship_To_Address_Line_3;

 EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(LCL.GAF_Mail_Name_Carrier);
 PARAMETER(NLL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

 //?Setup ship date
 // PAR.Year Code = DB1.Scheduled Ship Date *YEAR
 PAR.Year_Code = DATEDTLS(DB1.Scheduled_Ship_Date 'YR' 1111111 'NONE' 'N' 1);

 // PAR.Month                 USR = DB1.Scheduled Ship Date *MONTH
 PAR.Month_USR = DATEDTLS(DB1.Scheduled_Ship_Date 'MO' 1111111 'NONE' 'N' 1);

 // PAR.Day of Month USR = DB1.Scheduled Ship Date *DAY OF MONTH
 PAR.Day_of_Month_USR = DATEDTLS(DB1.Scheduled_Ship_Date 'DM' 1111111 'NONE' 'N' 1);

 // PAR.Year Alpha (YYYY) USR = CVTVAR(PAR.Year Code)
 PAR.Year_Alpha_YYYY_USR = CVTVAR(PAR.Year_Code);

 // PAR.Month (Char) USR = CVTVAR(PAR.Month                 USR)
 PAR.Month_Char_USR = CVTVAR(PAR.Month_USR);

 // PAR.Day   (Char) USR = CVTVAR(PAR.Day of Month USR)
 PAR.Day_Char_USR = CVTVAR(PAR.Day_of_Month_USR);

 // LCL.GAF Ship Date = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZERO)
 LCL.GAF_Ship_Date = PAR.Month_Char_USR + PAR.Day_Char_USR (0);

 // LCL.GAF Ship Date = CONCAT(LCL.GAF Ship Date,PAR.Year Alpha (YYYY) USR,CON.*ZERO)
 LCL.GAF_Ship_Date = LCL.GAF_Ship_Date + PAR.Year_Alpha_YYYY_USR (0);

 //?Retrieve shipping comments
 // LCL.GAF Shipping Comments = CONCAT(DB1.Special Instructions,DB1.Special Instructions 2,CON.1)
 LCL.GAF_Shipping_Comments = DB1.Special_Instructions + DB1.Special_Instructions_2 (1);

 ENDDO;

 EXECUTE FUNCTION(Val/Rtv Last Order     RT) TYPE(RTVOBJ) FILE(POABCPP)          AC1579581;
 PARAMETER(PAR.GAF_Customer_Number);
 PARAMETER(PAR.GAF_Load_Id);
 PARAMETER(PAR.GAF_Order_Number);
 PARAMETER(999999);
 PARAMETER(PAR.GAF_Customer_PO_No);
 PARAMETER(PAR.GAF_Shipto_Name);
 PARAMETER(PAR.GAF_Shipto_Address_1);
 PARAMETER(PAR.GAF_Shipto_Address_2);
 PARAMETER(PAR.GAF_Shipto_City);
 PARAMETER(PAR.GAF_Shipto_State);
 PARAMETER(PAR.GAF_Shipto_Zip);
 PARAMETER(PAR.GAF_Mail_Name_Carrier);
 PARAMETER(PAR.GAF_Ship_Date);
 PARAMETER(PAR.GAF_Shipping_Comments);
 PARAMETER(LCL.GAF_Order_Type);
 PARAMETER(PAR.GAF_Stop_Drop);
 PARAMETER(PAR.GAF_Shipto_Address_3);
 PARAMETER(PAR.GAF_Order_Batch_No_USR);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF PAR.GAF Customer Number EQ DB1.GAF Customer Number
  IF PAR.GAF_Customer_Number = DB1.GAF_Customer_Number;

  // AND PAR.GAF Order Number EQ DB1.GAF Order Number
  AND PAR.GAF_Order_Number = DB1.GAF_Order_Number;

  MOVE *ALL (To: PAR From: DB1);

  // PAR.GAF Order Batch No. USR = DB1.GAF Order Batch No.
  PAR.GAF_Order_Batch_No_USR = DB1.GAF_Order_Batch_No;

  QUIT;

  ENDIF;

 }

 CASE;

 // IF PAR.GAF Order Type is Blanks
 IF PAR.GAF_Order_Type = *BLANK;

 //?Set add/change flag
 CASE;

 // IF LCL.GAF Order Type is Delete
 IF LCL.GAF_Order_Type = 'D';

 // OR PGM.*Return code is *Record does not exist
 OR PGM.*Return_code = 'Y2U0005';

 // PAR.GAF Order Type = CND.Add
 PAR.GAF_Order_Type = 'A';

 //?Set add/change flag
 // IF PAR.GAF Load Id NE LCL.GAF Load Id
 IF PAR.GAF_Load_Id <> LCL.GAF_Load_Id;

 // OR PAR.GAF Customer PO No. NE LCL.GAF Customer PO No.
 OR PAR.GAF_Customer_PO_No <> LCL.GAF_Customer_PO_No;

 // OR PAR.GAF Shipto Name NE LCL.GAF Shipto Name
 OR PAR.GAF_Shipto_Name <> LCL.GAF_Shipto_Name;

 // OR PAR.GAF Shipto Address 1 NE LCL.GAF Shipto Address 1
 OR PAR.GAF_Shipto_Address_1 <> LCL.GAF_Shipto_Address_1;

 // OR PAR.GAF Shipto Address 2 NE LCL.GAF Shipto Address 2
 OR PAR.GAF_Shipto_Address_2 <> LCL.GAF_Shipto_Address_2;

 // OR PAR.GAF Shipto City NE LCL.GAF Shipto City
 OR PAR.GAF_Shipto_City <> LCL.GAF_Shipto_City;

 // OR PAR.GAF Shipto State NE LCL.GAF Shipto State
 OR PAR.GAF_Shipto_State <> LCL.GAF_Shipto_State;

 // OR PAR.GAF Shipto Zip NE LCL.GAF Shipto Zip
 OR PAR.GAF_Shipto_Zip <> LCL.GAF_Shipto_Zip;

 // OR PAR.GAF Mail Name Carrier NE LCL.GAF Mail Name Carrier
 OR PAR.GAF_Mail_Name_Carrier <> LCL.GAF_Mail_Name_Carrier;

 // OR PAR.GAF Ship Date NE LCL.GAF Ship Date
 OR PAR.GAF_Ship_Date <> LCL.GAF_Ship_Date;

 // OR PAR.GAF Shipping Comments NE LCL.GAF Shipping Comments
 OR PAR.GAF_Shipping_Comments <> LCL.GAF_Shipping_Comments;

 // OR PAR.GAF Shipto Address 3 NE LCL.GAF Shipto Address 3
 OR PAR.GAF_Shipto_Address_3 <> LCL.GAF_Shipto_Address_3;

 // PAR.GAF Order Type = CND.Change
 PAR.GAF_Order_Type = 'C';

 ENDIF;

 //?If order is not an add or a change then check order detail.
 CASE;

 // IF PAR.GAF Order Type is Blanks
 IF PAR.GAF_Order_Type = *BLANK;

 EXECUTE FUNCTION(Rtv GFP Or Dtl Add/Chg RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1579646;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.GAF_Order_Batch_No_USR);
 PARAMETER(PAR.GAF_Order_Type);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  EXECUTE FUNCTION(Rtv Order Dtl Hist     RT) TYPE(RTVOBJ) FILE(POAACPP)          AC1579667;
  PARAMETER(PAR.GAF_Order_Number);
  PARAMETER(PAR.GAF_Product_Code);
  PARAMETER(PAR.GAF_Order_Batch_No_USR);
  PARAMETER(PAR.GAF_Quantity_Needed);
  PARAMETER(PAR.GAF_Product_Description);
  PARAMETER(PAR.GAF_Box_Weight);
  PARAMETER(PAR.GAF_Tare_Weight);
  PARAMETER(PAR.GAF_Catchweight);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // PAR.GAF Order Type = CND.Change
  PAR.GAF_Order_Type = 'C';

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Load GAF file fields
  DO;

  // PAR.GAF Order Number = CVTVAR(DB1.Order Number)
  PAR.GAF_Order_Number = CVTVAR(DB1.Order_Number);

  // PAR.GAF Product Code = CVTVAR(DB1.Item Code)
  PAR.GAF_Product_Code = CVTVAR(DB1.Item_Code);

  EXECUTE FUNCTION(RTV Desc,U/Ms,CWT,PrcM RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1315777;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.GAF_Product_Description);
  PARAMETER(NLL.Description_Line_Two);
  PARAMETER(NLL.UOM_Primary);
  PARAMETER(NLL.Conversion_Factor_1);
  PARAMETER(NLL.Operation_Factor_1);
  PARAMETER(NLL.UOM_Second);
  PARAMETER(NLL.Conversion_Factor_2);
  PARAMETER(NLL.Operation_Factor_2);
  PARAMETER(NLL.UOM_Third);
  PARAMETER(NLL.UOM_Pricing);
  PARAMETER(LCL.GAF_Box_Weight);
  PARAMETER(NLL.Production_Date_Control);
  PARAMETER(PAR.Catch_Weight_Status);
  PARAMETER(NLL.Default_Commod_Mark_basis);
  PARAMETER(NLL.Price_Method_Default);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Set catch weight status
  CASE;

  // IF PAR.Catch Weight Status is yes
  IF PAR.Catch_Weight_Status = 'Y';

  // LCL.GAF Catchweight = CND.Catchweight
  LCL.GAF_Catchweight = 1;

  //?Set catch weight status
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.GAF Catchweight = CND.Not Catchweight
  LCL.GAF_Catchweight = 0;

  ENDIF;

  ENDDO;

  EXECUTE FUNCTION(Rtv Order Dtl Hist     RT) TYPE(RTVOBJ) FILE(POAACPP)          AC1579667;
  PARAMETER(PAR.GAF_Order_Number);
  PARAMETER(PAR.GAF_Product_Code);
  PARAMETER(PAR.GAF_Order_Batch_No_USR);
  PARAMETER(PAR.GAF_Quantity_Needed);
  PARAMETER(PAR.GAF_Product_Description);
  PARAMETER(PAR.GAF_Box_Weight);
  PARAMETER(PAR.GAF_Tare_Weight);
  PARAMETER(PAR.GAF_Catchweight);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?If detail line was added or changed then order will be flagged as changed
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // OR PAR.GAF Quantity Needed NE DB1.Quantity Scheduled
  OR PAR.GAF_Quantity_Needed <> DB1.Quantity_Scheduled;

  // OR PAR.GAF Product Description NE LCL.GAF Product Description
  OR PAR.GAF_Product_Description <> LCL.GAF_Product_Description;

  // OR PAR.GAF Box Weight NE LCL.GAF Box Weight
  OR PAR.GAF_Box_Weight <> LCL.GAF_Box_Weight;

  // OR PAR.GAF Catchweight NE LCL.GAF Catchweight
  OR PAR.GAF_Catchweight <> LCL.GAF_Catchweight;

  // OR PAR.GAF Tare Weight NE LCL.GAF Tare Weight
  OR PAR.GAF_Tare_Weight <> LCL.GAF_Tare_Weight;

  // PAR.GAF Order Type = CND.Change
  PAR.GAF_Order_Type = 'C';

  ENDIF;

  ENDIF;

 }

 ENDIF;

 ENDIF;

 //?If order has been added, changed or deleted then add to GAF files
 CASE;

 // IF PAR.GAF Order Type is Add/Change/Delete
 IF PAR.GAF_Order_Type = 'A'/'C'/'D';

 //?Delete the existing log
 EXECUTE FUNCTION(Del SNDACC Entry/Ord   RT) TYPE(RTVOBJ) FILE(PDLHCPP)          AC1481967;
 PARAMETER(DB1.Load_ID);
 PARAMETER('SNDGAF');
 PARAMETER(DB1.Order_Number);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  CASE;

  // IF DB1.Order Number EQ PAR.Order Number
  IF DB1.Order_Number = PAR.Order_Number;

  EXECUTE FUNCTION(DEL Load/Order Chg Log DR) TYPE(DLTOBJ) FILE(PDLHCPP)          AC1465746;
  PARAMETER(DB1.Created_Date);
  PARAMETER(DB1.Created_Time);
  PARAMETER(DB1.Sequence_Number);
  ENDIF;

 }

 //?Delete any Existing records prior to creating new
 EXECUTE FUNCTION(Dlt GAF Order Header   RT) TYPE(RTVOBJ) FILE(PONKCPP)          AC1579626;
 PARAMETER(PAR.GAF_Customer_Number);
 PARAMETER(PAR.GAF_Order_Number);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Dlt GAF Order Header   DL) TYPE(DLTOBJ) FILE(PONKCPP)          AC1579571;
  PARAMETER(DB1.GAF_Customer_Number);
  PARAMETER(DB1.GAF_Load_Id);
  PARAMETER(DB1.GAF_Order_Number);
 }

 //?*** Retrieve Stop Number for PK----
 EXECUTE FUNCTION(RTV Stop Number       RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1197795;
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.GAF_Stop_Drop);
 PARAMETER(DB1.Order_Number);
 PARAMETER(NLL.Appointment_Confirm_Date);
 PARAMETER(NLL.Appointment_Confirm_Time);
 {
  //?USER: Initialize routine

  // PAR.Stop/Drop = CON.*ZERO
  PAR.Stop_Drop = *ZERO;

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?If order number is found, retrieve stop number
  CASE;

  // IF PAR.Order Number EQ DB1.Order Number
  IF PAR.Order_Number = DB1.Order_Number;

  // PAR.Stop/Drop = DB1.Stop/Drop
  PAR.Stop_Drop = DB1.Stop_Drop;

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

  ENDIF;

 }

 EXECUTE FUNCTION(Crt GAF Order Header   CR) TYPE(CRTOBJ) FILE(PONKCPP)          AC1579569;
 PARAMETER(PAR.GAF_Customer_Number);
 PARAMETER(LCL.GAF_Load_Id);
 PARAMETER(PAR.GAF_Order_Number);
 PARAMETER(LCL.GAF_Customer_PO_No);
 PARAMETER(LCL.GAF_Shipto_Name);
 PARAMETER(LCL.GAF_Shipto_Address_1);
 PARAMETER(LCL.GAF_Shipto_Address_2);
 PARAMETER(LCL.GAF_Shipto_City);
 PARAMETER(LCL.GAF_Shipto_State);
 PARAMETER(LCL.GAF_Shipto_Zip);
 PARAMETER(LCL.GAF_Mail_Name_Carrier);
 PARAMETER(LCL.GAF_Ship_Date);
 PARAMETER(LCL.GAF_Shipping_Comments);
 PARAMETER(PAR.GAF_Order_Type);
 PARAMETER(PAR.GAF_Stop_Drop);
 PARAMETER(LCL.GAF_Shipto_Address_3);
 //?If order/batch # already exists in hist, change else add
 CASE;

 // IF PAR.GAF Order Batch No. EQ PAR.GAF Order Batch No. USR
 IF PAR.GAF_Order_Batch_No = PAR.GAF_Order_Batch_No_USR;

 EXECUTE FUNCTION(Chg GAF Order Hdr Hist CH) TYPE(CHGOBJ) FILE(POABCPP)          AC1579574;
 PARAMETER(PAR.GAF_Customer_Number);
 PARAMETER(LCL.GAF_Load_Id);
 PARAMETER(PAR.GAF_Order_Number);
 PARAMETER(PAR.GAF_Order_Batch_No);
 PARAMETER(LCL.GAF_Customer_PO_No);
 PARAMETER(LCL.GAF_Shipto_Name);
 PARAMETER(LCL.GAF_Shipto_Address_1);
 PARAMETER(LCL.GAF_Shipto_Address_2);
 PARAMETER(LCL.GAF_Shipto_City);
 PARAMETER(LCL.GAF_Shipto_State);
 PARAMETER(LCL.GAF_Shipto_Zip);
 PARAMETER(LCL.GAF_Mail_Name_Carrier);
 PARAMETER(LCL.GAF_Ship_Date);
 PARAMETER(LCL.GAF_Shipping_Comments);
 PARAMETER(PAR.GAF_Order_Type);
 PARAMETER(PAR.GAF_Stop_Drop);
 PARAMETER(LCL.GAF_Shipto_Address_3);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?If order/batch # already exists in hist, change else add
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Crt GAF Order Hdr Hist CR) TYPE(CRTOBJ) FILE(POABCPP)          AC1579573;
 PARAMETER(PAR.GAF_Customer_Number);
 PARAMETER(LCL.GAF_Load_Id);
 PARAMETER(PAR.GAF_Order_Number);
 PARAMETER(PAR.GAF_Order_Batch_No);
 PARAMETER(LCL.GAF_Customer_PO_No);
 PARAMETER(LCL.GAF_Shipto_Name);
 PARAMETER(LCL.GAF_Shipto_Address_1);
 PARAMETER(LCL.GAF_Shipto_Address_2);
 PARAMETER(LCL.GAF_Shipto_City);
 PARAMETER(LCL.GAF_Shipto_State);
 PARAMETER(LCL.GAF_Shipto_Zip);
 PARAMETER(LCL.GAF_Mail_Name_Carrier);
 PARAMETER(LCL.GAF_Ship_Date);
 PARAMETER(LCL.GAF_Shipping_Comments);
 PARAMETER(PAR.GAF_Order_Type);
 PARAMETER(PAR.GAF_Stop_Drop);
 PARAMETER(LCL.GAF_Shipto_Address_3);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 ENDIF;

 ENDIF;

}


CASE;

// IF PAR.GAF Order Type is Add/Change/Delete
IF PAR.GAF_Order_Type = 'A'/'C'/'D';

EXECUTE FUNCTION(CRT GFP Order Detail   RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1579595;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.GAF_Order_Batch_No);
{
 //?USER: Initialize routine

 //?Delete existing detail records prior to create
 // PAR.GAF Order Number = CVTVAR(PAR.Order Number)
 PAR.GAF_Order_Number = CVTVAR(PAR.Order_Number);

 EXECUTE FUNCTION(Dlt GAF Order Detail   RT) TYPE(RTVOBJ) FILE(PONLCPP)          AC1579596;
 PARAMETER(PAR.GAF_Order_Number);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Dlt GAF Order Detail   DL) TYPE(DLTOBJ) FILE(PONLCPP)          AC1579477;
  PARAMETER(DB1.GAF_Order_Number);
  PARAMETER(DB1.GAF_Product_Code);
 }

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Load GAF file fields
 DO;

 // PAR.GAF Order Number = CVTVAR(DB1.Order Number)
 PAR.GAF_Order_Number = CVTVAR(DB1.Order_Number);

 // PAR.GAF Product Code = CVTVAR(DB1.Item Code)
 PAR.GAF_Product_Code = CVTVAR(DB1.Item_Code);

 EXECUTE FUNCTION(RTV Desc,U/Ms,CWT,PrcM RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1315777;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.GAF_Product_Description);
 PARAMETER(NLL.Description_Line_Two);
 PARAMETER(NLL.UOM_Primary);
 PARAMETER(NLL.Conversion_Factor_1);
 PARAMETER(NLL.Operation_Factor_1);
 PARAMETER(NLL.UOM_Second);
 PARAMETER(NLL.Conversion_Factor_2);
 PARAMETER(NLL.Operation_Factor_2);
 PARAMETER(NLL.UOM_Third);
 PARAMETER(NLL.UOM_Pricing);
 PARAMETER(PAR.GAF_Box_Weight);
 PARAMETER(NLL.Production_Date_Control);
 PARAMETER(PAR.Catch_Weight_Status);
 PARAMETER(NLL.Default_Commod_Mark_basis);
 PARAMETER(NLL.Price_Method_Default);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Catch Weight Status is yes
 IF PAR.Catch_Weight_Status = 'Y';

 // PAR.GAF Catchweight = CND.Catchweight
 PAR.GAF_Catchweight = 1;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.GAF Catchweight = CND.Not Catchweight
 PAR.GAF_Catchweight = 0;

 ENDIF;

 ENDDO;

 EXECUTE FUNCTION(Crt GAF Order Detail   CR) TYPE(CRTOBJ) FILE(PONLCPP)          AC1579475;
 PARAMETER(PAR.GAF_Order_Number);
 PARAMETER(PAR.GAF_Product_Code);
 PARAMETER(DB1.Quantity_Scheduled);
 PARAMETER(PAR.GAF_Product_Description);
 PARAMETER(PAR.GAF_Box_Weight);
 PARAMETER(PAR.GAF_Tare_Weight);
 PARAMETER(PAR.GAF_Catchweight);
 //?Create History File
 EXECUTE FUNCTION(Val Order Dtl Hist     RT) TYPE(RTVOBJ) FILE(POAACPP)          AC1579687;
 PARAMETER(PAR.GAF_Order_Number);
 PARAMETER(PAR.GAF_Product_Code);
 PARAMETER(PAR.GAF_Order_Batch_No);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 EXECUTE FUNCTION(Crt GAF Order Dtl Hist CR) TYPE(CRTOBJ) FILE(POAACPP)          AC1579576;
 PARAMETER(PAR.GAF_Order_Number);
 PARAMETER(PAR.GAF_Product_Code);
 PARAMETER(PAR.GAF_Order_Batch_No);
 PARAMETER(DB1.Quantity_Scheduled);
 PARAMETER(PAR.GAF_Product_Description);
 PARAMETER(PAR.GAF_Box_Weight);
 PARAMETER(PAR.GAF_Tare_Weight);
 PARAMETER(PAR.GAF_Catchweight);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Chg GAF Order Dtl Hist CH) TYPE(CHGOBJ) FILE(POAACPP)          AC1579577;
 PARAMETER(PAR.GAF_Order_Number);
 PARAMETER(PAR.GAF_Product_Code);
 PARAMETER(PAR.GAF_Order_Batch_No);
 PARAMETER(DB1.Quantity_Scheduled);
 PARAMETER(PAR.GAF_Product_Description);
 PARAMETER(PAR.GAF_Box_Weight);
 PARAMETER(PAR.GAF_Tare_Weight);
 PARAMETER(PAR.GAF_Catchweight);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 ENDIF;

}


ENDIF;

// Call program Zzz Lock/Unlock HDR ID XF.
CALL PROGRAM(Zzz Lock/Unlock HDR ID XF) ('POAVXFR');
PARAMETER('U');

