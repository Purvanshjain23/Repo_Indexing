// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMDQPVR
// ?Date: 14.08.2025 Time: 03:42:45
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('TRF');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(LCL.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?***** Change Log and Comments
DO;

//?** 04/15/2009 LJB E00384
//?** Add processing for Multiple Warehouse Selection options
//?** This will be for the screen and for the selected reports
//?**
//?** 08/18/2008 LJB E00207
//?** Use Override miles if they exist, else use total load miles
//?**
//?** 11/12/2007 LJB FP1225
//?** Add new program to print Excessive Freight by Customer. Add
//?** Ship To Customer as a parameter to pass to called program
ENDDO;

//?USER: Load screen

//?** Company Name
CASE;

// IF DTL.Company Number is Equal to zero
IF DTL.Company_Number = *ZERO;

// DTL.Company Name = CON.*ALL
DTL.Company_Name = *ALL;

//?** Company Name
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Company Name Only  RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1100959;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Company_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// DTL.Invoice Date = JOB.*Job date
DTL.Invoice_Date = JOB.*Job_date;

// DTL.Thru Date             USR = JOB.*Job date
DTL.Thru_Date_USR = JOB.*Job_date;

// DTL.Select Option = CND.Option 1
DTL.Select_Option = 1;

//?USER: Validate fields

//?** F4 to prompt
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

//?** F4 on Company Number
CASE;

// IF PGM.*Cursor field <IS> DTL.Company Number
IF PGM.*Cursor_field = DTL.Company_Number;

CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// Call program SEL Company by Number  SR.
CALL PROGRAM(SEL Company by Number  SR) ('CAAJSRR');
PARAMETER(DTL.Company_Number);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

ENDIF;

ENDIF;

//?** F4 on Freight Group
CASE;

// IF PGM.*Cursor field <IS> DTL.FCG Group Code
IF PGM.*Cursor_field = DTL.FCG_Group_Code;

// Call program Sel Frt Group         SR.
CALL PROGRAM(Sel Frt Group         SR) ('PMXKSRR');
PARAMETER(DTL.FCG_Group_Code);

ENDIF;

//?** F4 on Salesperson
CASE;

// IF PGM.*Cursor field <IS> DTL.Salesperson Code
IF PGM.*Cursor_field = DTL.Salesperson_Code;

// Call program SEL Salesperson All    SR.
CALL PROGRAM(SEL Salesperson All    SR) ('PDFASRR');
PARAMETER(DTL.Salesperson_Code);

EXECUTE FUNCTION(RTV Name, status       RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1260515;
PARAMETER(DTL.Salesperson_Code);
PARAMETER(DTL.Salesperson_Name);
PARAMETER(LCL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Record Status is Inactive
IF LCL.Record_Status = 'I';

// DTL.Salesperson Name = CON.*Inactive Salesperson
DTL.Salesperson_Name = *Inactive Salesperson;

ENDIF;

ENDIF;

//?** F4 on Carrier Code
CASE;

// IF PGM.*Cursor field <IS> DTL.Carrier Code
IF PGM.*Cursor_field = DTL.Carrier_Code;

// Call program SEL Active Carrier     SR.
CALL PROGRAM(SEL Active Carrier     SR) ('OMY6SRR');
PARAMETER(DTL.Carrier_Code);

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Carrier_Name_DRV);
PARAMETER(LCL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


ENDIF;

//?** F4 on Freight Code
CASE;

// IF PGM.*Cursor field <IS> DTL.FC Code
IF PGM.*Cursor_field = DTL.FC_Code;

//?** Get miles from the load header             E00207 8/18/2008
EXECUTE FUNCTION(RTV Total Ld Mi/Sts    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1496186;
PARAMETER(DTL.Load_ID);
PARAMETER(NLL.Load_Status);
PARAMETER(WRK.Total_Load_Miles);
PARAMETER(WRK.Override_Total_Load_Miles);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Use Override miles if they exist           E00207 8/18/2008
CASE;

// IF WRK.Override Total Load Miles is Entered
IF WRK.Override_Total_Load_Miles <> *ZERO;

// LCL.Total Load Miles = WRK.Override Total Load Miles
LCL.Total_Load_Miles = WRK.Override_Total_Load_Miles;

//?** Use Override miles if they exist           E00207 8/18/2008
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Total Load Miles = WRK.Total Load Miles
LCL.Total_Load_Miles = WRK.Total_Load_Miles;

ENDIF;

// Call program Sel Manual Charge     SL.
CALL PROGRAM(Sel Manual Charge     SL) ('POLNSRR');
PARAMETER(DTL.FC_Code);
PARAMETER(LCL.FC_Description);
PARAMETER(LCL.FC_Rate_Amount);
PARAMETER(LCL.FC_Unit_of_Measure);
PARAMETER(LCL.FC_Act_Frt_Include_Sts);
PARAMETER(LCL.FC_Frt_Add_Deduct);
PARAMETER(LCL.FC_Load_Type_Select);
PARAMETER(LCL.FC_State_Select);
PARAMETER(LCL.FC_Export_Select);
PARAMETER(LCL.FC_Shag_Wash_Select);
PARAMETER(LCL.FC_Auto_Calc_Sts);
PARAMETER(LCL.FC_Charge_Category);
PARAMETER(LCL.FC_Shag_Wash_Comp);
PARAMETER(LCL.FC_Edit_Sequence);
PARAMETER(LCL.FC_Tot_Freight_Inc_Sts);
PARAMETER(LCL.FC_Special_Type);
PARAMETER(LCL.FC_ExpInt_FR_FZ_Select);
PARAMETER(LCL.FC_Reference_Required);
PARAMETER(LCL.FC_Trans_Mode_Select);
PARAMETER(LCL.FC_Freight_Rate_Type_Sel);
PARAMETER(LCL.FC_Company_Select);
PARAMETER(LCL.FC_Company_Carrier_Select);
PARAMETER(LCL.FC_Shared_Responsibility);
PARAMETER(LCL.FC_Unused_Sts_10);
PARAMETER(LCL.Total_Load_Miles);
PARAMETER(LCL.LFC_Amount);
PARAMETER(LCL.Total_Stops);
PARAMETER(LCL.Carrier_Code);

ENDIF;

//?** F4 on Customer Number                 FP1225 11/13/2007
CASE;

// IF PGM.*Cursor field <IS> DTL.Ship To Customer
IF PGM.*Cursor_field = DTL.Ship_To_Customer;

// Call program SEL Ship To Customer   SR.
CALL PROGRAM(SEL Ship To Customer   SR) ('PDR5SRR');
PARAMETER(DTL.Ship_To_Customer);

ENDIF;

//?** F4 on Warehouse 1
CASE;

// IF PGM.*Cursor field <IS> DTL.Warehouse Code
IF PGM.*Cursor_field = DTL.Warehouse_Code;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.Warehouse_Code);

ENDIF;

//?** F4 on Warehouse 2
CASE;

// IF PGM.*Cursor field <IS> DTL.USR CDE Parm 1
IF PGM.*Cursor_field = DTL.USR_CDE_Parm_1;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.USR_CDE_Parm_1);

ENDIF;

//?** F4 on Warehouse 3
CASE;

// IF PGM.*Cursor field <IS> DTL.USR CDE Parm 2
IF PGM.*Cursor_field = DTL.USR_CDE_Parm_2;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.USR_CDE_Parm_2);

ENDIF;

//?** F4 on Warehouse 4
CASE;

// IF PGM.*Cursor field <IS> DTL.USR CDE Parm 3
IF PGM.*Cursor_field = DTL.USR_CDE_Parm_3;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.USR_CDE_Parm_3);

ENDIF;

//?** F4 on Warehouse 5
CASE;

// IF PGM.*Cursor field <IS> DTL.USR CDE Parm 4
IF PGM.*Cursor_field = DTL.USR_CDE_Parm_4;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.USR_CDE_Parm_4);

ENDIF;

//?** F4 on Warehouse 6
CASE;

// IF PGM.*Cursor field <IS> DTL.USR CDE Parm 5
IF PGM.*Cursor_field = DTL.USR_CDE_Parm_5;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.USR_CDE_Parm_5);

ENDIF;

//?** F4 on Warehouse 7
CASE;

// IF PGM.*Cursor field <IS> DTL.USR CDE Parm 6
IF PGM.*Cursor_field = DTL.USR_CDE_Parm_6;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.USR_CDE_Parm_6);

ENDIF;

//?** F4 on Warehouse 8
CASE;

// IF PGM.*Cursor field <IS> DTL.USR CDE Parm 7
IF PGM.*Cursor_field = DTL.USR_CDE_Parm_7;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.USR_CDE_Parm_7);

ENDIF;

//?** F4 on Warehouse 9
CASE;

// IF PGM.*Cursor field <IS> DTL.USR CDE Parm 8
IF PGM.*Cursor_field = DTL.USR_CDE_Parm_8;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.USR_CDE_Parm_8);

ENDIF;

//?** F4 on Warehouse 10
CASE;

// IF PGM.*Cursor field <IS> DTL.USR CDE Parm 9
IF PGM.*Cursor_field = DTL.USR_CDE_Parm_9;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.USR_CDE_Parm_9);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?CALC: Screen function fields

EXECUTE FUNCTION(Carrier Name DRV) TYPE(DRVFLD)                                 AC1582201;
PARAMETER(DTL.Carrier_Name_DRV);
PARAMETER(DTL.Carrier_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Carrier_Name_DRV);
 PARAMETER(NLL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

}


EXECUTE FUNCTION(Ship To Name          DRV) TYPE(DRVFLD)                        AC1573561;
PARAMETER(DTL.Ship_To_Name_DRV);
PARAMETER(DTL.Ship_To_Customer);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(FC Description DRV) TYPE(DRVFLD)                               AC1866911;
PARAMETER(DTL.FC_Description_DRV);
PARAMETER(DTL.FC_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Frt Charge Info   RT) TYPE(RTVOBJ) FILE(POA9REP)           AC1627128;
 PARAMETER(PAR.FC_Code);
 PARAMETER(PAR.FC_Description_DRV);
 PARAMETER(NLL.FC_Rate_Amount);
 PARAMETER(NLL.FC_Unit_of_Measure);
 PARAMETER(NLL.FC_Act_Frt_Include_Sts);
 PARAMETER(NLL.FC_Frt_Add_Deduct);
 PARAMETER(NLL.FC_Load_Type_Select);
 PARAMETER(NLL.FC_State_Select);
 PARAMETER(NLL.FC_Export_Select);
 PARAMETER(NLL.FC_Shag_Wash_Select);
 PARAMETER(NLL.FC_Auto_Calc_Sts);
 PARAMETER(NLL.FC_Charge_Category);
 PARAMETER(NLL.FC_Shag_Wash_Comp);
 PARAMETER(NLL.FC_Edit_Sequence);
 PARAMETER(NLL.FC_Tot_Freight_Inc_Sts);
 PARAMETER(NLL.FC_Special_Type);
 PARAMETER(NLL.FC_ExpInt_FR_FZ_Select);
 PARAMETER(NLL.FC_Reference_Required);
 PARAMETER(NLL.FC_Trans_Mode_Select);
 PARAMETER(NLL.FC_Freight_Rate_Type_Sel);
 PARAMETER(NLL.FC_Company_Select);
 PARAMETER(NLL.FC_Company_Carrier_Select);
 PARAMETER(NLL.FC_Shared_Responsibility);
 PARAMETER(NLL.FC_Unused_Sts_10);
 PARAMETER(NLL.FC_Auto_Calc_Effective);
 PARAMETER(NLL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(FCG Group Desc DRV) TYPE(DRVFLD)                               AC1896648;
PARAMETER(DTL.FCG_Group_Desc_DRV);
PARAMETER(DTL.FCG_Group_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Frt Group Info    RT) TYPE(RTVOBJ) FILE(PMD9REP)           AC1896649;
 PARAMETER(PAR.FCG_Group_Code);
 PARAMETER(PAR.FCG_Group_Desc_DRV);
 PARAMETER(NLL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Validate relations

//?** Error if from date is after thru date
CASE;

// IF DTL.Invoice Date GT DTL.Thru Date             USR
IF DTL.Invoice_Date > DTL.Thru_Date_USR;

// Send error message - 'From date exceeds to date.  Please re-enter.'
ERROR(USR0319);
MSGPARM(DTL.Invoice_Date);

ENDIF;

//?** Error email Format is required if email is entered
CASE;

// IF DTL.Email Address is Entered
IF DTL.Email_Address <> *BLANK;

CASE;

// IF DTL.Email Format is Not Entered
IF DTL.Email_Format = *BLANK;

// Send error message - 'Email format is required when email address is entered.'
ERROR(USR3676);
MSGPARM(DTL.Email_Format);

ENDIF;

ENDIF;

//?** Retrieve company name
CASE;

// IF DTL.Company Number is not equal to zero
IF DTL.Company_Number <> *ZERO;

EXECUTE FUNCTION(RTV Company Name Only  RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1100959;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Company_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Retrieve company name
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// DTL.Company Name = CON.*ALL
DTL.Company_Name = *ALL;

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Company Number = PAR.Company Number
DTL.Company_Number = PAR.Company_Number;

ENDIF;

ENDIF;

//?** Salesperson code
CASE;

// IF DTL.Salesperson Code is entered
IF DTL.Salesperson_Code <> *BLANK;

EXECUTE FUNCTION(RTV Salesperson Name   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1111501;
PARAMETER(DTL.Salesperson_Code);
PARAMETER(DTL.Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Salesperson not found.'
ERROR(USR0039);
MSGPARM(DTL.Salesperson_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?** Carrier code
CASE;

// IF DTL.Carrier Code is entered
IF DTL.Carrier_Code <> *BLANK;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Carrier_Name_DRV);
PARAMETER(LCL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Carrier doesn't exist'
ERROR(USR1252);
MSGPARM(DTL.Carrier_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?** Customer Number               FP1225 11/13/2007
CASE;

// IF DTL.Ship To Customer is not equal to zero
IF DTL.Ship_To_Customer <> *ZERO;

EXECUTE FUNCTION(RTV Name RT) TYPE(RTVOBJ) FILE(CABBREP)                        AC1546878;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Ship_To_Name_DRV);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Customer is not found.'
ERROR(USR0525);
MSGPARM(DTL.Ship_To_Customer);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?** Email format required if email address is entered
CASE;

// IF DTL.Email Address is Entered
IF DTL.Email_Address <> *BLANK;

CASE;

// IF DTL.Email Format is Not Entered
IF DTL.Email_Format = *BLANK;

// Send error message - 'Email format is required when email address is entered.'
ERROR(USR3676);
MSGPARM(DTL.Email_Format);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?** Additional changes for task # E00384:
//?** At least one warehouse required if Select/Omit flag entered
CASE;

// IF DTL.USR Select/Omit Flag is *Entered
IF DTL.USR_Select_Omit_Flag = 'O'/'S';

// AND DTL.Warehouse Code is Blanks
AND DTL.Warehouse_Code = *BLANK;

// AND DTL.USR CDE Parm 1 is Blanks
AND DTL.USR_CDE_Parm_1 = *BLANK;

// AND DTL.USR CDE Parm 2 is Blanks
AND DTL.USR_CDE_Parm_2 = *BLANK;

// AND DTL.USR CDE Parm 3 is Blanks
AND DTL.USR_CDE_Parm_3 = *BLANK;

// AND DTL.USR CDE Parm 4 is Blanks
AND DTL.USR_CDE_Parm_4 = *BLANK;

// AND DTL.USR CDE Parm 5 is Blanks
AND DTL.USR_CDE_Parm_5 = *BLANK;

// AND DTL.USR CDE Parm 6 is Blanks
AND DTL.USR_CDE_Parm_6 = *BLANK;

// AND DTL.USR CDE Parm 7 is Blanks
AND DTL.USR_CDE_Parm_7 = *BLANK;

// AND DTL.USR CDE Parm 8 is Blanks
AND DTL.USR_CDE_Parm_8 = *BLANK;

// AND DTL.USR CDE Parm 9 is Blanks
AND DTL.USR_CDE_Parm_9 = *BLANK;

// Send error message - 'One or more warehouse entries required if Select/Omit entered.'
ERROR(USR4144);
MSGPARM(DTL.Warehouse_Code);

ENDIF;

//?** Select/Omit flag required if one or more warehouses enterd
CASE;

// IF DTL.USR Select/Omit Flag is Blanks
IF DTL.USR_Select_Omit_Flag = *BLANK;

// AND DTL.Warehouse Code is Not Blanks
AND ( DTL.Warehouse_Code <> *BLANK;

// OR DTL.USR CDE Parm 1 is Not Blanks
OR DTL.USR_CDE_Parm_1 <> *BLANK;

// OR DTL.USR CDE Parm 2 is Not Blanks
OR DTL.USR_CDE_Parm_2 <> *BLANK;

// OR DTL.USR CDE Parm 3 is Not Blanks
OR DTL.USR_CDE_Parm_3 <> *BLANK;

// OR DTL.USR CDE Parm 4 is Not Blanks
OR DTL.USR_CDE_Parm_4 <> *BLANK;

// OR DTL.USR CDE Parm 5 is Not Blanks
OR DTL.USR_CDE_Parm_5 <> *BLANK;

// OR DTL.USR CDE Parm 6 is Not Blanks
OR DTL.USR_CDE_Parm_6 <> *BLANK;

// OR DTL.USR CDE Parm 7 is Not Blanks
OR DTL.USR_CDE_Parm_7 <> *BLANK;

// OR DTL.USR CDE Parm 8 is Not Blanks
OR DTL.USR_CDE_Parm_8 <> *BLANK;

// OR DTL.USR CDE Parm 9 is Not Blanks
OR DTL.USR_CDE_Parm_9 <> *BLANK );

// Send error message - 'Select/Omit flag must be entered if Warehouse entered.'
ERROR(USR4145);
MSGPARM(DTL.USR_Select_Omit_Flag);

ENDIF;

//?** Validate warehouse 1 if entered
CASE;

// IF DTL.Warehouse Code is Warehouse Code not Blank
IF DTL.Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(NLL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.Warehouse_Code);

ENDIF;

ENDIF;

//?** Validate warehouse 2 if entered
CASE;

// IF DTL.USR CDE Parm 1 is Warehouse Code not Blank
IF DTL.USR_CDE_Parm_1 <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.USR_CDE_Parm_1);
PARAMETER(NLL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.USR_CDE_Parm_1);

ENDIF;

ENDIF;

//?** Validate warehouse 3 if entered
CASE;

// IF DTL.USR CDE Parm 2 is Warehouse Code not Blank
IF DTL.USR_CDE_Parm_2 <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.USR_CDE_Parm_2);
PARAMETER(NLL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.USR_CDE_Parm_2);

ENDIF;

ENDIF;

//?** Validate warehouse 4 if entered
CASE;

// IF DTL.USR CDE Parm 3 is Warehouse Code not Blank
IF DTL.USR_CDE_Parm_3 <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.USR_CDE_Parm_3);
PARAMETER(NLL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.USR_CDE_Parm_3);

ENDIF;

ENDIF;

//?** Validate warehouse 5 if entered
CASE;

// IF DTL.USR CDE Parm 4 is Warehouse Code not Blank
IF DTL.USR_CDE_Parm_4 <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.USR_CDE_Parm_4);
PARAMETER(NLL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.USR_CDE_Parm_4);

ENDIF;

ENDIF;

//?** Validate warehouse 6 if entered
CASE;

// IF DTL.USR CDE Parm 5 is Warehouse Code not Blank
IF DTL.USR_CDE_Parm_5 <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.USR_CDE_Parm_5);
PARAMETER(NLL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.USR_CDE_Parm_5);

ENDIF;

ENDIF;

//?** Validate warehouse 7 if entered
CASE;

// IF DTL.USR CDE Parm 6 is Warehouse Code not Blank
IF DTL.USR_CDE_Parm_6 <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.USR_CDE_Parm_6);
PARAMETER(NLL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.USR_CDE_Parm_6);

ENDIF;

ENDIF;

//?** Validate warehouse 8 if entered
CASE;

// IF DTL.USR CDE Parm 7 is Warehouse Code not Blank
IF DTL.USR_CDE_Parm_7 <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.USR_CDE_Parm_7);
PARAMETER(NLL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.USR_CDE_Parm_7);

ENDIF;

ENDIF;

//?** Validate warehouse 9 if entered
CASE;

// IF DTL.USR CDE Parm 8 is Warehouse Code not Blank
IF DTL.USR_CDE_Parm_8 <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.USR_CDE_Parm_8);
PARAMETER(NLL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.USR_CDE_Parm_8);

ENDIF;

ENDIF;

//?** Validate warehouse 10 if entered
CASE;

// IF DTL.USR CDE Parm 9 is Warehouse Code not Blank
IF DTL.USR_CDE_Parm_9 <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.USR_CDE_Parm_9);
PARAMETER(NLL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.USR_CDE_Parm_9);

ENDIF;

ENDIF;

//?If Omit is selected there must be at least 1 warehouse entered
CASE;

// IF DTL.USR Select/Omit Flag is Omit
IF DTL.USR_Select_Omit_Flag = 'O';

CASE;

// IF DTL.Warehouse Code is Warehouse Code Blank
IF DTL.Warehouse_Code = *BLANK;

// AND DTL.USR CDE Parm 1 is Warehouse Code Blank
AND DTL.USR_CDE_Parm_1 = *BLANK;

// AND DTL.USR CDE Parm 2 is Warehouse Code Blank
AND DTL.USR_CDE_Parm_2 = *BLANK;

// AND DTL.USR CDE Parm 3 is Warehouse Code Blank
AND DTL.USR_CDE_Parm_3 = *BLANK;

// AND DTL.USR CDE Parm 4 is Warehouse Code Blank
AND DTL.USR_CDE_Parm_4 = *BLANK;

// AND DTL.USR CDE Parm 5 is Warehouse Code Blank
AND DTL.USR_CDE_Parm_5 = *BLANK;

// AND DTL.USR CDE Parm 6 is Warehouse Code Blank
AND DTL.USR_CDE_Parm_6 = *BLANK;

// AND DTL.USR CDE Parm 7 is Warehouse Code Blank
AND DTL.USR_CDE_Parm_7 = *BLANK;

// AND DTL.USR CDE Parm 8 is Warehouse Code Blank
AND DTL.USR_CDE_Parm_8 = *BLANK;

// AND DTL.USR CDE Parm 9 is Warehouse Code Blank
AND DTL.USR_CDE_Parm_9 = *BLANK;

// Send error message - 'Warehouse Code is required.'
ERROR(USR2015);
MSGPARM(DTL.Warehouse_Code);

ENDIF;

ENDIF;

//?USER: User defined action

MOVE *ALL (To: PAR From: DTL);

//?** Add Ship To Customer to passed parms     11/12/2007 LJB FP1225
// PAR.Ship to Customer Pass USR = DTL.Ship To Customer
PAR.Ship_to_Customer_Pass_USR = DTL.Ship_To_Customer;

// PAR.Customer Number Pass  USR = DTL.Parent Customer
PAR.Customer_Number_Pass_USR = DTL.Parent_Customer;

// PAR.Company Number Pass   USR = DTL.Company Number
PAR.Company_Number_Pass_USR = DTL.Company_Number;

// PAR.From Date Pass        USR = DTL.Invoice Date
PAR.From_Date_Pass_USR = DTL.Invoice_Date;

// PAR.Thru Date Pass        USR = DTL.Thru Date             USR
PAR.Thru_Date_Pass_USR = DTL.Thru_Date_USR;

// PAR.System Value Numeric = CON.1
PAR.System_Value_Numeric = 1;

//?** Pass the Select/Omit flag and the Warehouse Codes if entered E00384
CASE;

// IF DTL.Select Option is Option 1
IF DTL.Select_Option = '1';

//?** Report by Salesperson Code
// PAR.PRT Description = CON.Excessive Frt by Salesman
PAR.PRT_Description = 'Excessive Frt by Salesman';

// WRK.Program name USR = CON.PMDVPFR
WRK.Program_name_USR = 'PMDVPFR';

//?** Pass the Select/Omit flag and the Warehouse Codes if entered E00384
// IF DTL.Select Option is Option 2
IF DTL.Select_Option = '2';

//?** Report by Carrier Code
// PAR.PRT Description = CON.Excessive Frt by Carrier
PAR.PRT_Description = 'Excessive Frt by Carrier';

// WRK.Program name USR = CON.PMDZPFR
WRK.Program_name_USR = 'PMDZPFR';

//?** Pass the Select/Omit flag and the Warehouse Codes if entered E00384
// IF DTL.Select Option is Option 3
IF DTL.Select_Option = '3';

//?** Report by Customer
// PAR.PRT Description = CON.Excessive Frt by Customer
PAR.PRT_Description = 'Excessive Frt by Customer';

// WRK.Program name USR = CON.PMPHPFR
WRK.Program_name_USR = 'PMPHPFR';

ENDIF;

// Call program PRT Excess Frt Chg Rpt CL.
CALL PROGRAM(PRT Excess Frt Chg Rpt CL) ('PMDSUPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(PAR.PRT_Description);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Customer_Number_Pass_USR);
PARAMETER(PAR.From_Date_Pass_USR);
PARAMETER(PAR.Thru_Date_Pass_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(PAR.Ship_to_Customer_Pass_USR);
PARAMETER(DTL.FC_Code);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Salesperson_Code);
PARAMETER(DTL.FCG_Group_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.USR_CDE_Parm_1);
PARAMETER(DTL.USR_CDE_Parm_2);
PARAMETER(DTL.USR_CDE_Parm_3);
PARAMETER(DTL.USR_CDE_Parm_4);
PARAMETER(DTL.USR_CDE_Parm_5);
PARAMETER(DTL.USR_CDE_Parm_6);
PARAMETER(DTL.USR_CDE_Parm_7);
PARAMETER(DTL.USR_CDE_Parm_8);
PARAMETER(DTL.USR_CDE_Parm_9);
PARAMETER(DTL.USR_Select_Omit_Flag);
PARAMETER(DTL.Select_Option);
PARAMETER(DTL.Email_Format);
PARAMETER(DTL.Email_Address);

//?** Send "Report Submitted" message to the screen
CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'The report has been submitted.'
MESSAGE(USR2720 *INFO);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?USER: Exit program processing

CASE;

// IF DTL.*CMD key is *Exit
IF DTL.*CMD_key = '03';

PGM.*Return_code = 'Y2U9999';

RETURN;

ENDIF;

