// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBEYXFR
// ?Date: 14.08.2025 Time: 03:47:41
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?****************************
//?Get Next PFS Sequence No         -- copied from reg carlisle lh dwnld
DO;

//?Create all records for this order/load with same sequence.
EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
PARAMETER(PAR.Company_Number);
PARAMETER('PFSSEQNO');
PARAMETER(LCL.PFS_Sequence_No);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.PFS Sequence No. = LCL.PFS Sequence No. + CON.1
LCL.PFS_Sequence_No = LCL.PFS_Sequence_No + 1;

//?Skip 0
CASE;

// IF LCL.PFS Sequence No. is eq 0
IF LCL.PFS_Sequence_No = *ZERO;

// LCL.PFS Sequence No. = LCL.PFS Sequence No. + CON.1
LCL.PFS_Sequence_No = LCL.PFS_Sequence_No + 1;

ENDIF;

// Call program Rtv Chg Comp Val Num   XF.
CALL PROGRAM(Rtv Chg Comp Val Num   XF) ('PPW2XFR');
PARAMETER(PAR.Company_Number);
PARAMETER('PFSSEQNO');
PARAMETER(LCL.PFS_Sequence_No);

ENDDO;

//?****************************
//?**** UPDATE ORDER HEADER
EXECUTE FUNCTION(RTV 1st Warehouse      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1575817;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.Warehouse_Code);
{
 //?USER: Process Data record

 // PAR.Warehouse Code = DB1.Warehouse Code
 PAR.Warehouse_Code = DB1.Warehouse_Code;

 QUIT;

}


EXECUTE FUNCTION(Rtv Live w/CT PFS Int RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1797641;
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.WHS_Live_with_Carlisle);
PARAMETER(LCL.WHS_PFS_Interface);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.WHS Live w/Carlisle is Yes
IF LCL.WHS_Live_with_Carlisle = 'Y';

CASE;

// IF LCL.WHS PFS Interface is Download/Both
IF LCL.WHS_PFS_Interface = 'D'/'B';

// LCL.WHS Live w/Carlisle = CND.Yes
LCL.WHS_Live_with_Carlisle = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.WHS Live w/Carlisle = CND.No
LCL.WHS_Live_with_Carlisle = 'N';

ENDIF;

ENDIF;

//?** Create PFS Order Header
CASE;

// IF LCL.WHS Live w/Carlisle is Yes
IF LCL.WHS_Live_with_Carlisle = 'Y';

// LCL.Load Status = PAR.Load Status
LCL.Load_Status = PAR.Load_Status;

// LCL.Stop/Drop = CND.EQ Zero
LCL.Stop_Drop = *ZERO;

EXECUTE FUNCTION(PFS Order Header      RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1732928;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Load_ID);
PARAMETER(LCL.Stop_Drop);
PARAMETER(LCL.PFS_Loading_Sequence);
PARAMETER(LCL.PFS_Sequence_No);
PARAMETER(LCL.Number_Pallets_Loaded);
PARAMETER(LCL.Weight_1_USR);
PARAMETER(WRK.Header_Status);
PARAMETER(*BLANK);
PARAMETER(LCL.Port_Delv_Terminal);
PARAMETER(LCL.Load_Status);
PARAMETER('N');
{
 //?USER: Process Data record

 EXECUTE FUNCTION(FP1309 Inventory Age  IF) TYPE(EXCINTFUN)                      AC1981251;
 {
  //?Execute internal function

  //?FP1309 Inventory Age Code Description
 }

 //?** CREATE ORDER DETAIL
 //?WI572:Update PFS order detail with IDE Regulation Code ID
 //?      Also pass IDE Regulation Code ID back to the current function
 EXECUTE FUNCTION(PFS Order Detail      RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1732929;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(PAR.PFS_Sequence_No);
 PARAMETER(LCL.Number_Pallets_Loaded);
 PARAMETER(LCL.Weight_1_USR);
 PARAMETER(PAR.Load_Status);
 PARAMETER(PAR.PFS_Order_Detail_Count);
 PARAMETER(LCL.IDE_Regulation_Code_ID);
 {
  //?USER: Initialize routine

  //?EL  04/28/23 Adding Regulation ID logic (WI572 - CA Prop 12)
  //?RMC 12/19/17 output par.pfs pallet type
  //?RMC R5207 02/16/16 DLY - output sched ship date-1prod date for newest poss
  //?RMC 03/13/07 output par.sequence no.
  EXECUTE FUNCTION(FP1309 Inventory Age  IF) TYPE(EXCINTFUN)                      AC1981251;
  {
   //?Execute internal function

   //?FP1309 Inventory Age Code Description
  }

  // PAR.Number Pallets Loaded = CON.*ZERO
  PAR.Number_Pallets_Loaded = *ZERO;

  // PAR.Weight 1 USR = CON.*ZERO
  PAR.Weight_1_USR = *ZERO;

  // PAR.PFS Order Detail Count = CON.*ZERO
  PAR.PFS_Order_Detail_Count = *ZERO;

  // Call program Rtv Plant Co/Org      XF.
  CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(WRK.Plant_Company_Sts);
  PARAMETER(WRK.Company_Organization);

  //?USER: Process Data record

  //?fp1309 calculate the date for the newest and oldest
  // PAR.PFS Company Number = DB1.Company Number
  PAR.PFS_Company_Number = DB1.Company_Number;

  // PAR.PFS Order Number = DB1.Order Number
  PAR.PFS_Order_Number = DB1.Order_Number;

  // PAR.PFS Order Line Item # = DB1.Order Sequence Number
  PAR.PFS_Order_Line_Item_Nbr = DB1.Order_Sequence_Number;

  // PAR.PFS Substitution Line # = DB1.Substitution Line Number
  PAR.PFS_Substitution_Line_Nbr = DB1.Substitution_Line_Number;

  EXECUTE FUNCTION(RTV Item Ref Sts      RT) TYPE(RTVOBJ) FILE(CABBREP)           AC2049128;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(LCL.Item_Reference_Status);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  // PAR.PFS Item Code = DB1.Item Code
  PAR.PFS_Item_Code = DB1.Item_Code;

  CASE;

  // IF LCL.Item Reference Status is Both
  IF LCL.Item_Reference_Status = 'B';

  EXECUTE FUNCTION(Rtv Cust Item Ref     RT) TYPE(RTVOBJ) FILE(POBIREP)           AC1631725;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.PFS_Customer_Item_Ref);
  PARAMETER(NLL.CIR_Item_No);
  PARAMETER(NLL.CIR_Description_Line_1);
  PARAMETER(NLL.CIR_Description_Line_2);
  PARAMETER(NLL.CIR_Description_Line_3);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.PFS Customer Item Ref = CON.*BLANK
  PAR.PFS_Customer_Item_Ref = *BLANK;

  ENDIF;

  // PAR.PFS Item Description 1 = DB1.Order Desc. Line One
  PAR.PFS_Item_Description_1 = DB1.Order_Desc_Line_One;

  // PAR.PFS Item Description 2 = DB1.Order Desc. Line Two
  PAR.PFS_Item_Description_2 = DB1.Order_Desc_Line_Two;

  // PAR.PFS Slip Sheet = DB1.Slip Sheet
  PAR.PFS_Slip_Sheet = DB1.Slip_Sheet;

  // PAR.PFS Shrink Wrap = PAR.Shrink Wrap
  PAR.PFS_Shrink_Wrap = PAR.Shrink_Wrap;

  // PAR.PFS Palletize = DB1.Palletize
  PAR.PFS_Palletize = DB1.Palletize;

  // PAR.PFS Pallet Type = DB1.OD Pallet Type
  PAR.PFS_Pallet_Type = DB1.OD_Pallet_Type;

  // PAR.PFS Ship From Warehouse = DB1.Warehouse Code
  PAR.PFS_Ship_From_Warehouse = DB1.Warehouse_Code;

  CASE;

  // IF PAR.PFS Ship From Warehouse is CFH
  IF PAR.PFS_Ship_From_Warehouse = 'CFH';

  // PAR.PFS Ship From Warehouse = CON.CF1
  PAR.PFS_Ship_From_Warehouse = 'CF1';

  ENDIF;

  EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
  PARAMETER(PAR.PFS_Ship_From_Warehouse);
  PARAMETER(PAR.PFS_Ship_From_Whs_Type);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?PFS Ship To Warehouse
  CASE;

  // IF PAR.Order Type - Sales is Transfer Order
  IF PAR.Order_Type_Sales = 'TR';

  EXECUTE FUNCTION(Rtv Default Warehouse  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1323141;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(PAR.PFS_Ship_To_Warehouse);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?FP1309 Calculate Oldest Allowed & Newest Allowed Dates
  DO;

  //?FP1309 Calculate Oldest Allowed & Newest Allowed Dates
  // PAR.PFS Age Code = WRK.BLANK 1               USR
  PAR.PFS_Age_Code = WRK.BLANK_1_USR;

  // PAR.PFS Oldest Date Allowed = CON.*ZERO
  PAR.PFS_Oldest_Date_Allowed = *ZERO;

  // PAR.PFS Newest Date Allowed = CON.*ZERO
  PAR.PFS_Newest_Date_Allowed = *ZERO;

  //?**** Calculate both dates ****
  //?The oldest allowed date is either the Override From date or
  //?Requested Delivery Date - Item Age Days.
  EXECUTE FUNCTION(Val Age Information   IF) TYPE(EXCINTFUN)                      AC1984951;
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(PAR.Requested_Delivery_Date);
  PARAMETER(DB1.Item_Age_Days);
  PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
  PARAMETER(DB1.Production_Ovr_AgeDte_To);
  PARAMETER(PAR.PFS_Oldest_Date_Allowed);
  PARAMETER(PAR.PFS_Newest_Date_Allowed);
  PARAMETER(LCL.Error_Status);
  PARAMETER(WRK.Company_Organization);
  PARAMETER('C');
  {
   //?Execute internal function

   // WRK.Error Flag            USR = CND.Blank
   WRK.Error_Flag_USR = *BLANK;

   // PAR.Error Status = CND.blank
   PAR.Error_Status = *BLANK;

   // WRK.Error Reason Descript 1 = CON.*BLANK
   WRK.Error_Reason_Descript_1 = *BLANK;

   // WRK.Error Reason Descript 2 = CON.*BLANK
   WRK.Error_Reason_Descript_2 = *BLANK;

   // WRK.Error Reason Descript 3 = CON.*BLANK
   WRK.Error_Reason_Descript_3 = *BLANK;

   // WRK.Error Reason Descript 4 = CON.*BLANK
   WRK.Error_Reason_Descript_4 = *BLANK;

   // WRK.Error Reason Descript 5 = CON.*BLANK
   WRK.Error_Reason_Descript_5 = *BLANK;

   CASE;

   // IF PAR.Company Organization is Seaboard
   IF PAR.Company_Organization = 'S';

   CASE;

   // IF PAR.Requested Delivery Date is not entered
   IF PAR.Requested_Delivery_Date = *ZERO;

   // Send error message - 'Requested Delv Date is required'
   ERROR(USR4329);
   MSGPARM(PAR.Requested_Delivery_Date);

   // IF PAR.Scheduled Ship Date is not entered
   IF PAR.Scheduled_Ship_Date = *ZERO;

   // Send error message - 'Scheduled Ship Date is required when orders are assigned to load.'
   ERROR(USR2230);
   MSGPARM(PAR.Scheduled_Ship_Date);

   // IF *OTHERWISE
   IF *OTHERWISE;

   // Call program Val Age information   XF.
   CALL PROGRAM(Val Age information   XF) ('PNQNXFR');
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(WRK.Error_Flag_USR);
   PARAMETER(WRK.Error_Reason_Descript_1);
   PARAMETER(WRK.Error_Reason_Descript_2);
   PARAMETER(WRK.Error_Reason_Descript_3);
   PARAMETER(WRK.Error_Reason_Descript_4);
   PARAMETER(WRK.Error_Reason_Descript_5);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Requested_Delivery_Date);
   PARAMETER(PAR.Item_Age_Days);
   PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
   PARAMETER(PAR.Production_Ovr_AgeDte_To);
   PARAMETER(PAR.Production_AgeDte_Fr);
   PARAMETER(PAR.Production_AgeDte_To);

   //?Verify if message should be sent if validation is required
   CASE;

   // IF WRK.Error Flag            USR is Yes
   IF WRK.Error_Flag_USR = 'Y';

   // AND PAR.Production Dates Sts Usr is Validation routine
   AND PAR.Production_Dates_Sts_Usr = 'V';

   //?message 1 Product is shipped before product is made
   CASE;

   // IF WRK.Error Reason Descript 1 NE WRK.Blank for 30          USR
   IF WRK.Error_Reason_Descript_1 <> WRK.Blank_for_30_USR;

   // Send error message - 'Prd Date is invalid for requested delivery date'
   ERROR(USR4307);
   MSGPARM(PAR.Production_AgeDte_Fr);

   ENDIF;

   //?message 2 Either Days or override date but not both
   CASE;

   // IF WRK.Error Reason Descript 2 NE WRK.Blank for 30          USR
   IF WRK.Error_Reason_Descript_2 <> WRK.Blank_for_30_USR;

   // Send error message - 'Enter Age Days or Dates'
   ERROR(USR4304);
   MSGPARM(PAR.Item_Age_Days);
   MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
   MSGPARM(PAR.Production_Ovr_AgeDte_To);

   ENDIF;

   //?message 3 With Chill Days Either Days or Override Dates required
   CASE;

   // IF WRK.Error Reason Descript 3 NE WRK.Blank for 30          USR
   IF WRK.Error_Reason_Descript_3 <> WRK.Blank_for_30_USR;

   // Send error message - 'Override Dates is after shipped date'
   ERROR(USR4305);
   MSGPARM(PAR.Item_Age_Days);
   MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
   MSGPARM(PAR.Production_Ovr_AgeDte_To);

   ENDIF;

   //?message 4 From date is > then SHIP DATE
   CASE;

   // IF WRK.Error Reason Descript 4 NE WRK.Blank for 30          USR
   IF WRK.Error_Reason_Descript_4 <> WRK.Blank_for_30_USR;

   // Send error message - 'Override Dates is after shipped date'
   ERROR(USR4305);
   MSGPARM(PAR.Item_Age_Days);
   MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
   MSGPARM(PAR.Production_Ovr_AgeDte_To);

   ENDIF;

   //?message 5 To date is > then SHIP DATE
   CASE;

   // IF WRK.Error Reason Descript 5 NE WRK.Blank for 30          USR
   IF WRK.Error_Reason_Descript_5 <> WRK.Blank_for_30_USR;

   // Send error message - 'Override Dates is after shipped date'
   ERROR(USR4305);
   MSGPARM(PAR.Item_Age_Days);
   MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
   MSGPARM(PAR.Production_Ovr_AgeDte_To);

   ENDIF;

   CASE;

   // IF PAR.Production Ovr AgeDte Fr is not entered
   IF PAR.Production_Ovr_AgeDte_Fr = *ZERO;

   // Send error message - 'Invalid Item Age Days'
   ERROR(USR4309);
   MSGPARM(PAR.Item_Age_Days);

   // IF *OTHERWISE
   IF *OTHERWISE;

   // Send error message - 'Invalid Production Override Age Frm/To Dates'
   ERROR(USR4310);
   MSGPARM(PAR.Production_AgeDte_Fr);
   MSGPARM(PAR.Production_AgeDte_To);

   ENDIF;

   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   ENDIF;

   ENDIF;

   ENDIF;

  }

  //?Newest date is from the Schedule Ship Date unless User OvrR
  CASE;

  // IF DB1.Production Ovr AgeDte To is GT Zero
  IF DB1.Production_Ovr_AgeDte_To > *ZERO;

  //?The newest allowed date: If entered - Override To date will be used
  //?Newest date is from the Schedule Ship Date unless User OvrR
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?The newest allowed date: If there is no override then
  //?the newest allowed date = Schedule Ship Date
  //?Carlisle application adds the chill time in their process
  //?Requested from John Z during technical review.  FP1309
  // PAR.PFS Newest Date Allowed = DB1.Scheduled Ship Date
  PAR.PFS_Newest_Date_Allowed = DB1.Scheduled_Ship_Date;

  ENDIF;

  //?R5207 2/16/16  Dailys  Only  - newest prod date
  CASE;

  // IF WRK.Company Organization is Daily's
  IF WRK.Company_Organization = 'D';

  EXECUTE FUNCTION(Rtv Prev Prd Dte      RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1309910;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(LCL.Production_Date_Prev_USR);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Plant Date of Last Order EQ PAR.Plant Date of Last Order
   IF DB1.Post_to_G_L_Date = PAR.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF DB1.Production Day Status is yes
   IF DB1.Production_Day_Status = 'Y';

   // PAR.Production Date Prev USR = DB1.Plant Date of Last Order
   PAR.Production_Date_Prev_USR = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

   ENDIF;

  }

  // WRK.Date (Alpha) USR = CVTVAR(LCL.Production Date Prev USR)
  WRK.Date_Alpha_USR = CVTVAR(LCL.Production_Date_Prev_USR);

  // WRK.Date (Char-6) USR = SUBSTRING(WRK.Date (Alpha) USR,CON.2,CON.6)
  WRK.Date_Char_6_USR = SUBSTRING(WRK.Date_Alpha_USR:2:6);

  // LCL.Date (Char-8) USR = CONCAT(CON.20,WRK.Date (Char-6) USR,CON.*ZERO)
  LCL.Date_Char_8_USR = '20' + WRK.Date_Char_6_USR (*ZERO);

  // PAR.PFS Newest Date Allowed = CVTVAR(LCL.Date (Char-8) USR)
  PAR.PFS_Newest_Date_Allowed = CVTVAR(LCL.Date_Char_8_USR);

  ENDIF;

  ENDDO;

  //?RMC 10/14/13 E2824 Output Ordered a lieu sched - because sched changes
  //?  unless User Release is Yes, then they want to short ship the sched qty
  CASE;

  // IF DB1.Released by User Sts Y/N is yes
  IF DB1.Released_by_User_Sts_Y_N = 'Y';

  // PAR.PFS Scheduled Quantity = DB1.Quantity Scheduled
  PAR.PFS_Scheduled_Quantity = DB1.Quantity_Scheduled;

  // PAR.PFS Scheduled Weight = DB1.Weight Scheduled
  PAR.PFS_Scheduled_Weight = DB1.Weight_Scheduled;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.PFS Scheduled Quantity = DB1.Quantity Ordered
  PAR.PFS_Scheduled_Quantity = DB1.Quantity_Ordered;

  // PAR.PFS Scheduled Weight = DB1.Weight Ordered
  PAR.PFS_Scheduled_Weight = DB1.Weight_Ordered;

  ENDIF;

  // PAR.PFS Maximum Net Weight = DB1.Maximum Net Weight
  PAR.PFS_Maximum_Net_Weight = DB1.Maximum_Net_Weight;

  //?PFS Estimated Pallets, PFS Average Pallet Tare
  CASE;

  // IF PAR.Palletize is yes
  IF PAR.Palletize = 'Y';

  EXECUTE FUNCTION(Rtv Pallet Tare/Cases RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1601730;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Number_Cases_On_A_Pallet);
  PARAMETER(LCL.Pallet_Tare_Weight);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.BOM Type is Supplies
   IF DB1.BOM_Type = 'S';

   EXECUTE FUNCTION(Rtv Pallet Tare/Cases RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1601446;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Component_Item_Code);
   PARAMETER(PAR.Number_Cases_On_A_Pallet);
   PARAMETER(PAR.Pallet_Tare_Weight);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   QUIT;

   ENDIF;

  }

  CASE;

  // IF LCL.Number Cases On A Pallet is GT Zero
  IF LCL.Number_Cases_On_A_Pallet > *ZERO;

  // PFS Estimated Pallets
  PAR.PFS_Estimated_Pallets = DB1.Quantity_Ordered / LCL.Number_Cases_On_A_Pallet;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.PFS Estimated Pallets = CON.*ZERO
  PAR.PFS_Estimated_Pallets = *ZERO;

  ENDIF;

  CASE;

  // IF PAR.PFS Estimated Pallets is GT Zero
  IF PAR.PFS_Estimated_Pallets > *ZERO;

  // PAR.PFS Average Pallet Tare = LCL.Pallet Tare Weight
  PAR.PFS_Average_Pallet_Tare = LCL.Pallet_Tare_Weight;

  ENDIF;

  //?PFS Estimated Pallets, PFS Average Pallet Tare
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.PFS Estimated Pallets = CON.*ZERO
  PAR.PFS_Estimated_Pallets = *ZERO;

  // PAR.PFS Average Pallet Tare = CON.*ZERO
  PAR.PFS_Average_Pallet_Tare = *ZERO;

  ENDIF;

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // OR PAR.Load Status is Unlock
  OR PAR.Load_Status = 'U';

  // PAR.PFS Record Status = CND.Delete
  PAR.PFS_Record_Status = 'D';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.PFS Record Status = CND.Change
  PAR.PFS_Record_Status = 'C';

  ENDIF;

  //?- WI572 (CA Prop 12) - RTV Regulation ID
  EXECUTE FUNCTION(RTV Regul Code ID RT) TYPE(RTVOBJ) FILE(PBBTREP)               AC2215136;
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.IDE_Regulation_Code_ID);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?If Regul Code is populated
  CASE;

  // IF LCL.IDE Regulation Code ID is Blank
  IF LCL.IDE_Regulation_Code_ID = *BLANK;

  // PAR.PFS Regulation Code ID = LCL.IDE Regulation Code ID
  PAR.PFS_Regulation_Code_ID = LCL.IDE_Regulation_Code_ID;

  //?If Regul Code is populated
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.PFS Regulation Code ID = LCL.IDE Regulation Code ID
  PAR.PFS_Regulation_Code_ID = LCL.IDE_Regulation_Code_ID;

  //?Send back to calling function to Update PFS Order Header
  // PAR.IDE Regulation Code ID = LCL.IDE Regulation Code ID
  PAR.IDE_Regulation_Code_ID = LCL.IDE_Regulation_Code_ID;

  ENDIF;

  EXECUTE FUNCTION(Upd Order Detail      RT) TYPE(RTVOBJ) FILE(PPBCCPP)           AC1732967;
  PARAMETER(PAR.PFS_Company_Number);
  PARAMETER(PAR.PFS_Order_Number);
  PARAMETER(PAR.PFS_Order_Line_Item_Nbr);
  PARAMETER(PAR.PFS_Substitution_Line_Nbr);
  PARAMETER(PAR.PFS_Item_Code);
  PARAMETER(PAR.PFS_Customer_Item_Ref);
  PARAMETER(PAR.PFS_Item_Description_1);
  PARAMETER(PAR.PFS_Item_Description_2);
  PARAMETER(PAR.PFS_Age_Code);
  PARAMETER(PAR.PFS_Slip_Sheet);
  PARAMETER(PAR.PFS_Shrink_Wrap);
  PARAMETER(PAR.PFS_Palletize);
  PARAMETER(PAR.PFS_Ship_From_Warehouse);
  PARAMETER(PAR.PFS_Ship_From_Whs_Type);
  PARAMETER(PAR.PFS_Ship_To_Warehouse);
  PARAMETER(PAR.PFS_Scheduled_Quantity);
  PARAMETER(PAR.PFS_Scheduled_Weight);
  PARAMETER(PAR.PFS_Maximum_Net_Weight);
  PARAMETER(PAR.PFS_Minimum_Unit_Weight);
  PARAMETER(PAR.PFS_Maximum_Unit_Weight);
  PARAMETER(PAR.PFS_Estimated_Pallets);
  PARAMETER(PAR.PFS_Average_Pallet_Tare);
  PARAMETER(PAR.PFS_Oldest_Date_Allowed);
  PARAMETER(PAR.PFS_Newest_Date_Allowed);
  PARAMETER(PAR.PFS_Sequence_No);
  PARAMETER(PAR.PFS_Ord_Dtl_Unused_Sts_1);
  PARAMETER(PAR.PFS_Ord_Dtl_Unused_Sts_2);
  PARAMETER(PAR.PFS_Ord_Dtl_Unused_Sts_3);
  PARAMETER(PAR.PFS_Pallet_Type);
  PARAMETER(PAR.PFS_Regulation_Code_ID);
  PARAMETER(PAR.PFS_Record_Status);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Crt PFS Order Detail  CR) TYPE(CRTOBJ) FILE(PPBCCPP)           AC1732846;
   PARAMETER(PAR.PFS_Company_Number);
   PARAMETER(PAR.PFS_Order_Number);
   PARAMETER(PAR.PFS_Order_Line_Item_Nbr);
   PARAMETER(PAR.PFS_Substitution_Line_Nbr);
   PARAMETER(PAR.PFS_Item_Code);
   PARAMETER(PAR.PFS_Customer_Item_Ref);
   PARAMETER(PAR.PFS_Item_Description_1);
   PARAMETER(PAR.PFS_Item_Description_2);
   PARAMETER(PAR.PFS_Age_Code);
   PARAMETER(PAR.PFS_Slip_Sheet);
   PARAMETER(PAR.PFS_Shrink_Wrap);
   PARAMETER(PAR.PFS_Palletize);
   PARAMETER(PAR.PFS_Ship_From_Warehouse);
   PARAMETER(PAR.PFS_Ship_From_Whs_Type);
   PARAMETER(PAR.PFS_Ship_To_Warehouse);
   PARAMETER(PAR.PFS_Scheduled_Quantity);
   PARAMETER(PAR.PFS_Scheduled_Weight);
   PARAMETER(PAR.PFS_Maximum_Net_Weight);
   PARAMETER(PAR.PFS_Minimum_Unit_Weight);
   PARAMETER(PAR.PFS_Maximum_Unit_Weight);
   PARAMETER(PAR.PFS_Estimated_Pallets);
   PARAMETER(PAR.PFS_Average_Pallet_Tare);
   PARAMETER(PAR.PFS_Oldest_Date_Allowed);
   PARAMETER(PAR.PFS_Newest_Date_Allowed);
   PARAMETER(PAR.PFS_Sequence_No);
   PARAMETER(PAR.PFS_Ord_Dtl_Unused_Sts_1);
   PARAMETER(PAR.PFS_Ord_Dtl_Unused_Sts_2);
   PARAMETER(PAR.PFS_Ord_Dtl_Unused_Sts_3);
   PARAMETER(PAR.PFS_Pallet_Type);
   PARAMETER(PAR.PFS_Regulation_Code_ID);
   PARAMETER(PAR.PFS_Record_Status);
   PARAMETER(PAR.PFS_Process_Status);
   PARAMETER(PAR.PFS_Error_Reason);
   PARAMETER(PAR.PFS_Create_Date);
   PARAMETER(PAR.PFS_Create_Time);
   PARAMETER(PAR.PFS_Change_Date);
   PARAMETER(PAR.PFS_Change_Time);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Create Stamp      IF) TYPE(EXCINTFUN)                      AC1732162;
    PARAMETER(DB1.PFS_Process_Status);
    PARAMETER(DB1.PFS_Create_Date);
    PARAMETER(DB1.PFS_Create_Time);
    {
     //?Execute internal function

     // PAR.PFS Process Status = CND.Not Processed
     PAR.PFS_Process_Status = *ZERO;

     // PAR.PFS Create Date = JOB.*Job date
     PAR.PFS_Create_Date = JOB.*Job_date;

     // PAR.PFS Create Time = JOB.*Job time
     PAR.PFS_Create_Time = JOB.*Job_time;

    }

   }

   //?USER: Process Data record

   EXECUTE FUNCTION(Chg PFS Order Detail  CH) TYPE(CHGOBJ) FILE(PPBCCPP)           AC1732847;
   PARAMETER(PAR.PFS_Company_Number);
   PARAMETER(PAR.PFS_Order_Number);
   PARAMETER(PAR.PFS_Order_Line_Item_Nbr);
   PARAMETER(PAR.PFS_Substitution_Line_Nbr);
   PARAMETER(PAR.PFS_Item_Code);
   PARAMETER(PAR.PFS_Customer_Item_Ref);
   PARAMETER(PAR.PFS_Item_Description_1);
   PARAMETER(PAR.PFS_Item_Description_2);
   PARAMETER(PAR.PFS_Age_Code);
   PARAMETER(PAR.PFS_Slip_Sheet);
   PARAMETER(PAR.PFS_Shrink_Wrap);
   PARAMETER(PAR.PFS_Palletize);
   PARAMETER(PAR.PFS_Ship_From_Warehouse);
   PARAMETER(PAR.PFS_Ship_From_Whs_Type);
   PARAMETER(PAR.PFS_Ship_To_Warehouse);
   PARAMETER(PAR.PFS_Scheduled_Quantity);
   PARAMETER(PAR.PFS_Scheduled_Weight);
   PARAMETER(PAR.PFS_Maximum_Net_Weight);
   PARAMETER(PAR.PFS_Minimum_Unit_Weight);
   PARAMETER(PAR.PFS_Maximum_Unit_Weight);
   PARAMETER(PAR.PFS_Estimated_Pallets);
   PARAMETER(PAR.PFS_Average_Pallet_Tare);
   PARAMETER(PAR.PFS_Oldest_Date_Allowed);
   PARAMETER(PAR.PFS_Newest_Date_Allowed);
   PARAMETER(PAR.PFS_Sequence_No);
   PARAMETER(PAR.PFS_Ord_Dtl_Unused_Sts_1);
   PARAMETER(PAR.PFS_Ord_Dtl_Unused_Sts_2);
   PARAMETER(PAR.PFS_Ord_Dtl_Unused_Sts_3);
   PARAMETER(PAR.PFS_Pallet_Type);
   PARAMETER(PAR.PFS_Regulation_Code_ID);
   PARAMETER(PAR.PFS_Record_Status);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Change Stamp      IF) TYPE(EXCINTFUN)                      AC1732163;
    PARAMETER(DB1.PFS_Change_Date);
    PARAMETER(DB1.PFS_Change_Time);
    {
     //?Execute internal function

     // PAR.PFS Change Date = JOB.*Job date
     PAR.PFS_Change_Date = JOB.*Job_date;

     // PAR.PFS Change time = JOB.*Job time
     PAR.PFS_Change_Time = JOB.*Job_time;

    }

   }

  }

  //?** Accumulate Number of Pallets & Total Pallet Weight **
  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  //?** Do not add if Cancelled.
  //?** Accumulate Number of Pallets & Total Pallet Weight **
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?** Accumulate Number of Pallets & Total Pallet Weight **
  // PAR.Number Pallets Loaded = PAR.Number Pallets Loaded + PAR.PFS Estimated Pallets
  PAR.Number_Pallets_Loaded = PAR.Number_Pallets_Loaded + PAR.PFS_Estimated_Pallets;

  // PAR.Weight 1 USR
  PAR.Weight_1_USR = PAR.Weight_1_USR + ( PAR.PFS_Average_Pallet_Tare
  * PAR.PFS_Estimated_Pallets 'H' );

  ENDIF;

  // PAR.PFS Order Detail Count = PAR.PFS Order Detail Count + CON.1
  PAR.PFS_Order_Detail_Count = PAR.PFS_Order_Detail_Count + 1;

 }

 //?** E0657 RMC 4/05/2010   UPDATE ORDER BOL Comment from Country comment fl
 //?**   Was outputting shipping instructions prior to 4/05/10 - but they
 //?**   Werent picked up by carisle in ppu1upc - file was commented
 EXECUTE FUNCTION(RTV OHE Intend for Exp RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC1952288;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.OHE_Intended_for_ExportCC);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
 PARAMETER(DB1.Company_Number);
 PARAMETER(LCL.Plant_Company_Sts);
 PARAMETER(LCL.Company_Organization);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?For Daily CAT = put all comments in Order Comments
 CASE;

 // IF LCL.Company Organization is Daily's
 IF LCL.Company_Organization = 'D';

 EXECUTE FUNCTION(Rtv Del Ord Comment   RT) TYPE(RTVOBJ) FILE(PPBDCPP)           AC2076040;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('BL');
 PARAMETER(*ZERO);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Del PFS BOL Comment   DL) TYPE(DLTOBJ) FILE(PPBDCPP)           AC1732853;
  PARAMETER(DB1.PFS_Company_Number);
  PARAMETER(DB1.PFS_Order_Number);
  PARAMETER(DB1.PFS_BOL_Comment_Type);
  PARAMETER(DB1.PFS_Sequence_Number);
 }

 CASE;

 // IF PAR.Load Status is Lock
 IF PAR.Load_Status = 'L';

 EXECUTE FUNCTION(RTV PFS Ord Comment   RT) TYPE(RTVOBJ) FILE(OPCOCPP)           AC2076038;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('BL');
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Last Seq for Order) TYPE(RTVOBJ) FILE(PPBDCPP)             AC2076001;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Comment_Type);
  PARAMETER(LCL.PFS_Sequence_Number);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.PFS Sequence Number = DB1.PFS Sequence Number
   PAR.PFS_Sequence_Number = DB1.PFS_Sequence_Number;

  }

  // LCL.PFS Sequence Number = LCL.PFS Sequence Number + CON.1
  LCL.PFS_Sequence_Number = LCL.PFS_Sequence_Number + 1;

  EXECUTE FUNCTION(Upd PFS BOL Comment   RT) TYPE(RTVOBJ) FILE(PPBDCPP)           AC1732973;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Comment_Type);
  PARAMETER(LCL.PFS_Sequence_Number);
  PARAMETER(DB1.Comment_Text);
  PARAMETER('A');
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Crt PFS BOL Comment   CR) TYPE(CRTOBJ) FILE(PPBDCPP)           AC1732851;
   PARAMETER(PAR.PFS_Company_Number);
   PARAMETER(PAR.PFS_Order_Number);
   PARAMETER(PAR.PFS_BOL_Comment_Type);
   PARAMETER(PAR.PFS_Sequence_Number);
   PARAMETER(PAR.PFS_BOL_Comment_Line);
   PARAMETER(PAR.PFS_Record_Status);
   PARAMETER(PAR.PFS_Process_Status);
   PARAMETER(PAR.PFS_Error_Reason);
   PARAMETER(PAR.PFS_Create_Date);
   PARAMETER(PAR.PFS_Create_Time);
   PARAMETER(PAR.PFS_Change_Date);
   PARAMETER(PAR.PFS_Change_Time);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Create Stamp      IF) TYPE(EXCINTFUN)                      AC1732162;
    PARAMETER(DB1.PFS_Process_Status);
    PARAMETER(DB1.PFS_Create_Date);
    PARAMETER(DB1.PFS_Create_Time);
    {
     //?Execute internal function

     // PAR.PFS Process Status = CND.Not Processed
     PAR.PFS_Process_Status = *ZERO;

     // PAR.PFS Create Date = JOB.*Job date
     PAR.PFS_Create_Date = JOB.*Job_date;

     // PAR.PFS Create Time = JOB.*Job time
     PAR.PFS_Create_Time = JOB.*Job_time;

    }

   }

   //?USER: Process Data record

   EXECUTE FUNCTION(Chg PFS BOL Comment   CH) TYPE(CHGOBJ) FILE(PPBDCPP)           AC1732852;
   PARAMETER(PAR.PFS_Company_Number);
   PARAMETER(PAR.PFS_Order_Number);
   PARAMETER(PAR.PFS_BOL_Comment_Type);
   PARAMETER(PAR.PFS_Sequence_Number);
   PARAMETER(PAR.PFS_BOL_Comment_Line);
   PARAMETER(PAR.PFS_Record_Status);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Change Stamp      IF) TYPE(EXCINTFUN)                      AC1732163;
    PARAMETER(DB1.PFS_Change_Date);
    PARAMETER(DB1.PFS_Change_Time);
    {
     //?Execute internal function

     // PAR.PFS Change Date = JOB.*Job date
     PAR.PFS_Change_Date = JOB.*Job_date;

     // PAR.PFS Change time = JOB.*Job time
     PAR.PFS_Change_Time = JOB.*Job_time;

    }

   }

  }

 }

 EXECUTE FUNCTION(RTV Country Code only  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1531787;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Country_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Not cancelled
  IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

  ENDIF;

 }

 CASE;

 // IF LCL.OHE Intended for ExportCC is Entered
 IF LCL.OHE_Intended_for_ExportCC <> *BLANK;

 EXECUTE FUNCTION(Rtv PFS BL Cmnt f/CAT RT) TYPE(RTVOBJ) FILE(PPB1REP)           AC2076253;
 PARAMETER(LCL.OHE_Intended_for_ExportCC);
 PARAMETER('BI');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Load_Status);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Comment is Not Entered
  IF DB1.Comment = *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Last Seq for Order) TYPE(RTVOBJ) FILE(PPBDCPP)             AC2076001;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER('BL');
  PARAMETER(LCL.PFS_Sequence_Number);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.PFS Sequence Number = DB1.PFS Sequence Number
   PAR.PFS_Sequence_Number = DB1.PFS_Sequence_Number;

  }

  // LCL.PFS Sequence Number = LCL.PFS Sequence Number + CON.1
  LCL.PFS_Sequence_Number = LCL.PFS_Sequence_Number + 1;

  EXECUTE FUNCTION(Upd PFS BOL Comment   RT) TYPE(RTVOBJ) FILE(PPBDCPP)           AC1732973;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER('BL');
  PARAMETER(LCL.PFS_Sequence_Number);
  PARAMETER(DB1.Comment);
  PARAMETER('A');
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Crt PFS BOL Comment   CR) TYPE(CRTOBJ) FILE(PPBDCPP)           AC1732851;
   PARAMETER(PAR.PFS_Company_Number);
   PARAMETER(PAR.PFS_Order_Number);
   PARAMETER(PAR.PFS_BOL_Comment_Type);
   PARAMETER(PAR.PFS_Sequence_Number);
   PARAMETER(PAR.PFS_BOL_Comment_Line);
   PARAMETER(PAR.PFS_Record_Status);
   PARAMETER(PAR.PFS_Process_Status);
   PARAMETER(PAR.PFS_Error_Reason);
   PARAMETER(PAR.PFS_Create_Date);
   PARAMETER(PAR.PFS_Create_Time);
   PARAMETER(PAR.PFS_Change_Date);
   PARAMETER(PAR.PFS_Change_Time);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Create Stamp      IF) TYPE(EXCINTFUN)                      AC1732162;
    PARAMETER(DB1.PFS_Process_Status);
    PARAMETER(DB1.PFS_Create_Date);
    PARAMETER(DB1.PFS_Create_Time);
    {
     //?Execute internal function

     // PAR.PFS Process Status = CND.Not Processed
     PAR.PFS_Process_Status = *ZERO;

     // PAR.PFS Create Date = JOB.*Job date
     PAR.PFS_Create_Date = JOB.*Job_date;

     // PAR.PFS Create Time = JOB.*Job time
     PAR.PFS_Create_Time = JOB.*Job_time;

    }

   }

   //?USER: Process Data record

   EXECUTE FUNCTION(Chg PFS BOL Comment   CH) TYPE(CHGOBJ) FILE(PPBDCPP)           AC1732852;
   PARAMETER(PAR.PFS_Company_Number);
   PARAMETER(PAR.PFS_Order_Number);
   PARAMETER(PAR.PFS_BOL_Comment_Type);
   PARAMETER(PAR.PFS_Sequence_Number);
   PARAMETER(PAR.PFS_BOL_Comment_Line);
   PARAMETER(PAR.PFS_Record_Status);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Change Stamp      IF) TYPE(EXCINTFUN)                      AC1732163;
    PARAMETER(DB1.PFS_Change_Date);
    PARAMETER(DB1.PFS_Change_Time);
    {
     //?Execute internal function

     // PAR.PFS Change Date = JOB.*Job date
     PAR.PFS_Change_Date = JOB.*Job_date;

     // PAR.PFS Change time = JOB.*Job time
     PAR.PFS_Change_Time = JOB.*Job_time;

    }

   }

  }

  ENDIF;

 }

 // IF LCL.Country Code is Entered
 IF LCL.Country_Code <> *BLANK;

 EXECUTE FUNCTION(Rtv PFS BL Cmnt f/CAT RT) TYPE(RTVOBJ) FILE(PPB1REP)           AC2076253;
 PARAMETER(LCL.Country_Code);
 PARAMETER('BL');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Load_Status);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Comment is Not Entered
  IF DB1.Comment = *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Last Seq for Order) TYPE(RTVOBJ) FILE(PPBDCPP)             AC2076001;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER('BL');
  PARAMETER(LCL.PFS_Sequence_Number);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.PFS Sequence Number = DB1.PFS Sequence Number
   PAR.PFS_Sequence_Number = DB1.PFS_Sequence_Number;

  }

  // LCL.PFS Sequence Number = LCL.PFS Sequence Number + CON.1
  LCL.PFS_Sequence_Number = LCL.PFS_Sequence_Number + 1;

  EXECUTE FUNCTION(Upd PFS BOL Comment   RT) TYPE(RTVOBJ) FILE(PPBDCPP)           AC1732973;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER('BL');
  PARAMETER(LCL.PFS_Sequence_Number);
  PARAMETER(DB1.Comment);
  PARAMETER('A');
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Crt PFS BOL Comment   CR) TYPE(CRTOBJ) FILE(PPBDCPP)           AC1732851;
   PARAMETER(PAR.PFS_Company_Number);
   PARAMETER(PAR.PFS_Order_Number);
   PARAMETER(PAR.PFS_BOL_Comment_Type);
   PARAMETER(PAR.PFS_Sequence_Number);
   PARAMETER(PAR.PFS_BOL_Comment_Line);
   PARAMETER(PAR.PFS_Record_Status);
   PARAMETER(PAR.PFS_Process_Status);
   PARAMETER(PAR.PFS_Error_Reason);
   PARAMETER(PAR.PFS_Create_Date);
   PARAMETER(PAR.PFS_Create_Time);
   PARAMETER(PAR.PFS_Change_Date);
   PARAMETER(PAR.PFS_Change_Time);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Create Stamp      IF) TYPE(EXCINTFUN)                      AC1732162;
    PARAMETER(DB1.PFS_Process_Status);
    PARAMETER(DB1.PFS_Create_Date);
    PARAMETER(DB1.PFS_Create_Time);
    {
     //?Execute internal function

     // PAR.PFS Process Status = CND.Not Processed
     PAR.PFS_Process_Status = *ZERO;

     // PAR.PFS Create Date = JOB.*Job date
     PAR.PFS_Create_Date = JOB.*Job_date;

     // PAR.PFS Create Time = JOB.*Job time
     PAR.PFS_Create_Time = JOB.*Job_time;

    }

   }

   //?USER: Process Data record

   EXECUTE FUNCTION(Chg PFS BOL Comment   CH) TYPE(CHGOBJ) FILE(PPBDCPP)           AC1732852;
   PARAMETER(PAR.PFS_Company_Number);
   PARAMETER(PAR.PFS_Order_Number);
   PARAMETER(PAR.PFS_BOL_Comment_Type);
   PARAMETER(PAR.PFS_Sequence_Number);
   PARAMETER(PAR.PFS_BOL_Comment_Line);
   PARAMETER(PAR.PFS_Record_Status);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Change Stamp      IF) TYPE(EXCINTFUN)                      AC1732163;
    PARAMETER(DB1.PFS_Change_Date);
    PARAMETER(DB1.PFS_Change_Time);
    {
     //?Execute internal function

     // PAR.PFS Change Date = JOB.*Job date
     PAR.PFS_Change_Date = JOB.*Job_date;

     // PAR.PFS Change time = JOB.*Job time
     PAR.PFS_Change_Time = JOB.*Job_time;

    }

   }

  }

  ENDIF;

 }

 ENDIF;

 EXECUTE FUNCTION(PFS Cust Comment Tp BL RT) TYPE(RTVOBJ) FILE(POAVCPP)          AC2075995;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER('BL');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Last Seq for Order) TYPE(RTVOBJ) FILE(PPBDCPP)             AC2076001;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER('BL');
  PARAMETER(PAR.PFS_Sequence_Number);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.PFS Sequence Number = DB1.PFS Sequence Number
   PAR.PFS_Sequence_Number = DB1.PFS_Sequence_Number;

  }

  // PAR.PFS Sequence Number = PAR.PFS Sequence Number + CON.1
  PAR.PFS_Sequence_Number = PAR.PFS_Sequence_Number + 1;

  EXECUTE FUNCTION(Upd PFS BOL Comment   RT) TYPE(RTVOBJ) FILE(PPBDCPP)           AC1732973;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER('BL');
  PARAMETER(PAR.PFS_Sequence_Number);
  PARAMETER(DB1.Customer_Comment_Line);
  PARAMETER('A');
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Crt PFS BOL Comment   CR) TYPE(CRTOBJ) FILE(PPBDCPP)           AC1732851;
   PARAMETER(PAR.PFS_Company_Number);
   PARAMETER(PAR.PFS_Order_Number);
   PARAMETER(PAR.PFS_BOL_Comment_Type);
   PARAMETER(PAR.PFS_Sequence_Number);
   PARAMETER(PAR.PFS_BOL_Comment_Line);
   PARAMETER(PAR.PFS_Record_Status);
   PARAMETER(PAR.PFS_Process_Status);
   PARAMETER(PAR.PFS_Error_Reason);
   PARAMETER(PAR.PFS_Create_Date);
   PARAMETER(PAR.PFS_Create_Time);
   PARAMETER(PAR.PFS_Change_Date);
   PARAMETER(PAR.PFS_Change_Time);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Create Stamp      IF) TYPE(EXCINTFUN)                      AC1732162;
    PARAMETER(DB1.PFS_Process_Status);
    PARAMETER(DB1.PFS_Create_Date);
    PARAMETER(DB1.PFS_Create_Time);
    {
     //?Execute internal function

     // PAR.PFS Process Status = CND.Not Processed
     PAR.PFS_Process_Status = *ZERO;

     // PAR.PFS Create Date = JOB.*Job date
     PAR.PFS_Create_Date = JOB.*Job_date;

     // PAR.PFS Create Time = JOB.*Job time
     PAR.PFS_Create_Time = JOB.*Job_time;

    }

   }

   //?USER: Process Data record

   EXECUTE FUNCTION(Chg PFS BOL Comment   CH) TYPE(CHGOBJ) FILE(PPBDCPP)           AC1732852;
   PARAMETER(PAR.PFS_Company_Number);
   PARAMETER(PAR.PFS_Order_Number);
   PARAMETER(PAR.PFS_BOL_Comment_Type);
   PARAMETER(PAR.PFS_Sequence_Number);
   PARAMETER(PAR.PFS_BOL_Comment_Line);
   PARAMETER(PAR.PFS_Record_Status);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Change Stamp      IF) TYPE(EXCINTFUN)                      AC1732163;
    PARAMETER(DB1.PFS_Change_Date);
    PARAMETER(DB1.PFS_Change_Time);
    {
     //?Execute internal function

     // PAR.PFS Change Date = JOB.*Job date
     PAR.PFS_Change_Date = JOB.*Job_date;

     // PAR.PFS Change time = JOB.*Job time
     PAR.PFS_Change_Time = JOB.*Job_time;

    }

   }

  }

 }

 ENDIF;

 ENDIF;

 //?Not Dailys output these comments -  orig code before p000196
 CASE;

 // IF LCL.Company Organization is Not Daily's
 IF LCL.Company_Organization = 'H'/'S';

 EXECUTE FUNCTION(RTV Country Code only  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1531787;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Country_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Not cancelled
  IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

  ENDIF;

 }

 CASE;

 // IF LCL.OHE Intended for ExportCC is Entered
 IF LCL.OHE_Intended_for_ExportCC <> *BLANK;

 EXECUTE FUNCTION(Rtv Crt PFS BOL CommntRT) TYPE(RTVOBJ) FILE(PPB1REP)           AC1984173;
 PARAMETER(LCL.OHE_Intended_for_ExportCC);
 PARAMETER('BI');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Load_Status);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Comment is Not Entered
  IF DB1.Comment = *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF PAR.Load Status is Unlock
  IF PAR.Load_Status = 'U';

  // LCL.PFS Record Status = CND.Delete
  LCL.PFS_Record_Status = 'D';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.PFS Record Status = CND.Change
  LCL.PFS_Record_Status = 'C';

  ENDIF;

  EXECUTE FUNCTION(Upd PFS BOL Comment   RT) TYPE(RTVOBJ) FILE(PPBDCPP)           AC1732973;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(DB1.Comment_Type);
  PARAMETER(DB1.Comment_Sequence_Number);
  PARAMETER(DB1.Comment);
  PARAMETER(LCL.PFS_Record_Status);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Crt PFS BOL Comment   CR) TYPE(CRTOBJ) FILE(PPBDCPP)           AC1732851;
   PARAMETER(PAR.PFS_Company_Number);
   PARAMETER(PAR.PFS_Order_Number);
   PARAMETER(PAR.PFS_BOL_Comment_Type);
   PARAMETER(PAR.PFS_Sequence_Number);
   PARAMETER(PAR.PFS_BOL_Comment_Line);
   PARAMETER(PAR.PFS_Record_Status);
   PARAMETER(PAR.PFS_Process_Status);
   PARAMETER(PAR.PFS_Error_Reason);
   PARAMETER(PAR.PFS_Create_Date);
   PARAMETER(PAR.PFS_Create_Time);
   PARAMETER(PAR.PFS_Change_Date);
   PARAMETER(PAR.PFS_Change_Time);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Create Stamp      IF) TYPE(EXCINTFUN)                      AC1732162;
    PARAMETER(DB1.PFS_Process_Status);
    PARAMETER(DB1.PFS_Create_Date);
    PARAMETER(DB1.PFS_Create_Time);
    {
     //?Execute internal function

     // PAR.PFS Process Status = CND.Not Processed
     PAR.PFS_Process_Status = *ZERO;

     // PAR.PFS Create Date = JOB.*Job date
     PAR.PFS_Create_Date = JOB.*Job_date;

     // PAR.PFS Create Time = JOB.*Job time
     PAR.PFS_Create_Time = JOB.*Job_time;

    }

   }

   //?USER: Process Data record

   EXECUTE FUNCTION(Chg PFS BOL Comment   CH) TYPE(CHGOBJ) FILE(PPBDCPP)           AC1732852;
   PARAMETER(PAR.PFS_Company_Number);
   PARAMETER(PAR.PFS_Order_Number);
   PARAMETER(PAR.PFS_BOL_Comment_Type);
   PARAMETER(PAR.PFS_Sequence_Number);
   PARAMETER(PAR.PFS_BOL_Comment_Line);
   PARAMETER(PAR.PFS_Record_Status);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Change Stamp      IF) TYPE(EXCINTFUN)                      AC1732163;
    PARAMETER(DB1.PFS_Change_Date);
    PARAMETER(DB1.PFS_Change_Time);
    {
     //?Execute internal function

     // PAR.PFS Change Date = JOB.*Job date
     PAR.PFS_Change_Date = JOB.*Job_date;

     // PAR.PFS Change time = JOB.*Job time
     PAR.PFS_Change_Time = JOB.*Job_time;

    }

   }

  }

  ENDIF;

 }

 // IF LCL.Country Code is Entered
 IF LCL.Country_Code <> *BLANK;

 EXECUTE FUNCTION(Rtv Crt PFS BOL CommntRT) TYPE(RTVOBJ) FILE(PPB1REP)           AC1984173;
 PARAMETER(LCL.Country_Code);
 PARAMETER('BL');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Load_Status);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Comment is Not Entered
  IF DB1.Comment = *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF PAR.Load Status is Unlock
  IF PAR.Load_Status = 'U';

  // LCL.PFS Record Status = CND.Delete
  LCL.PFS_Record_Status = 'D';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.PFS Record Status = CND.Change
  LCL.PFS_Record_Status = 'C';

  ENDIF;

  EXECUTE FUNCTION(Upd PFS BOL Comment   RT) TYPE(RTVOBJ) FILE(PPBDCPP)           AC1732973;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(DB1.Comment_Type);
  PARAMETER(DB1.Comment_Sequence_Number);
  PARAMETER(DB1.Comment);
  PARAMETER(LCL.PFS_Record_Status);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Crt PFS BOL Comment   CR) TYPE(CRTOBJ) FILE(PPBDCPP)           AC1732851;
   PARAMETER(PAR.PFS_Company_Number);
   PARAMETER(PAR.PFS_Order_Number);
   PARAMETER(PAR.PFS_BOL_Comment_Type);
   PARAMETER(PAR.PFS_Sequence_Number);
   PARAMETER(PAR.PFS_BOL_Comment_Line);
   PARAMETER(PAR.PFS_Record_Status);
   PARAMETER(PAR.PFS_Process_Status);
   PARAMETER(PAR.PFS_Error_Reason);
   PARAMETER(PAR.PFS_Create_Date);
   PARAMETER(PAR.PFS_Create_Time);
   PARAMETER(PAR.PFS_Change_Date);
   PARAMETER(PAR.PFS_Change_Time);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Create Stamp      IF) TYPE(EXCINTFUN)                      AC1732162;
    PARAMETER(DB1.PFS_Process_Status);
    PARAMETER(DB1.PFS_Create_Date);
    PARAMETER(DB1.PFS_Create_Time);
    {
     //?Execute internal function

     // PAR.PFS Process Status = CND.Not Processed
     PAR.PFS_Process_Status = *ZERO;

     // PAR.PFS Create Date = JOB.*Job date
     PAR.PFS_Create_Date = JOB.*Job_date;

     // PAR.PFS Create Time = JOB.*Job time
     PAR.PFS_Create_Time = JOB.*Job_time;

    }

   }

   //?USER: Process Data record

   EXECUTE FUNCTION(Chg PFS BOL Comment   CH) TYPE(CHGOBJ) FILE(PPBDCPP)           AC1732852;
   PARAMETER(PAR.PFS_Company_Number);
   PARAMETER(PAR.PFS_Order_Number);
   PARAMETER(PAR.PFS_BOL_Comment_Type);
   PARAMETER(PAR.PFS_Sequence_Number);
   PARAMETER(PAR.PFS_BOL_Comment_Line);
   PARAMETER(PAR.PFS_Record_Status);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Change Stamp      IF) TYPE(EXCINTFUN)                      AC1732163;
    PARAMETER(DB1.PFS_Change_Date);
    PARAMETER(DB1.PFS_Change_Time);
    {
     //?Execute internal function

     // PAR.PFS Change Date = JOB.*Job date
     PAR.PFS_Change_Date = JOB.*Job_date;

     // PAR.PFS Change time = JOB.*Job time
     PAR.PFS_Change_Time = JOB.*Job_time;

    }

   }

  }

  ENDIF;

 }

 ENDIF;

 ENDIF;

 //?WI572 - Regulation ID logic
 DO;

 EXECUTE FUNCTION(RTV *ALL Reg Code RT) TYPE(RTVOBJ) FILE(PUC8REP)               AC2215490;
 PARAMETER(LCL.IDE_Regulation_Code_ID);
 PARAMETER(NLL.Regulation_Code);
 PARAMETER(LCL.Regulation_ID);
 PARAMETER(NLL.Regulation_Origin);
 PARAMETER(NLL.Regulation_Desc);
 PARAMETER(LCL.ShipTo_Est_Stm_Stop_Tot);
 PARAMETER(LCL.Ship_To_Cust_Type);
 PARAMETER(NLL.Default_Regulation);
 PARAMETER(NLL.NonComp_Stm1_StopTot);
 PARAMETER(NLL.NonComp_Stm2_StopTot);
 PARAMETER(NLL.Compliancy_Stm1_Item);
 PARAMETER(NLL.Compliancy_Stm2_Item);
 PARAMETER(NLL.Record_Status);
 PARAMETER(NLL.Create_Date);
 PARAMETER(NLL.Create_Time);
 PARAMETER(NLL.Create_User);
 PARAMETER(NLL.Create_Program);
 PARAMETER(NLL.Change_Date);
 PARAMETER(NLL.Change_Time);
 PARAMETER(NLL.Change_User);
 PARAMETER(NLL.Change_Program);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv All) TYPE(RTVOBJ) FILE(PUAAREP)                            AC2149720;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(NLL.M3_Supplier_ID);
 PARAMETER(NLL.Dft_Mode_of_Transportaton);
 PARAMETER(NLL.Buying_Group);
 PARAMETER(NLL.Buying_Group_Opt_In_Out);
 PARAMETER(LCL.Ship_To_Establishment_nbr);
 PARAMETER(NLL.PM_Pallet_Type);
 PARAMETER(NLL.Cust_Dft_Price_Type);
 PARAMETER(NLL.Cust_Dft_Age_Days);
 PARAMETER(NLL.Cust_Dft_Delivery_Time);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Ship To Establishment nbr is Entered
 IF LCL.Ship_To_Establishment_nbr <> *BLANK;

 EXECUTE FUNCTION(RTV Type Code by Cust  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1625687;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(LCL.Type_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.IDE Regulation Code ID is Blank
 IF LCL.IDE_Regulation_Code_ID = *BLANK;

 EXECUTE FUNCTION(RTV *ALL Reg Code RT) TYPE(RTVOBJ) FILE(PUC8REP)               AC2215490;
 PARAMETER(LCL.IDE_Regulation_Code_ID);
 PARAMETER(NLL.Regulation_Code);
 PARAMETER(NLL.Regulation_ID);
 PARAMETER(NLL.Regulation_Origin);
 PARAMETER(NLL.Regulation_Desc);
 PARAMETER(LCL.ShipTo_Est_Stm_Stop_Tot);
 PARAMETER(LCL.Ship_To_Cust_Type);
 PARAMETER(NLL.Default_Regulation);
 PARAMETER(NLL.NonComp_Stm1_StopTot);
 PARAMETER(NLL.NonComp_Stm2_StopTot);
 PARAMETER(NLL.Compliancy_Stm1_Item);
 PARAMETER(NLL.Compliancy_Stm2_Item);
 PARAMETER(LCL.Record_Status);
 PARAMETER(NLL.Create_Date);
 PARAMETER(NLL.Create_Time);
 PARAMETER(NLL.Create_User);
 PARAMETER(NLL.Create_Program);
 PARAMETER(NLL.Change_Date);
 PARAMETER(NLL.Change_Time);
 PARAMETER(NLL.Change_User);
 PARAMETER(NLL.Change_Program);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // AND LCL.Record Status is Active
 AND LCL.Record_Status = 'A';

 //?To update PFS OH
 // PAR.PFS Ship To Est Nbr = LCL.Ship To Establishment nbr
 PAR.PFS_Ship_To_Est_Nbr = LCL.Ship_To_Establishment_nbr;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 //?Per the business we print the EST# regardless of customer type.
 //?update the PFS Ship to Est Nbr
 //?To update PFS OH
 // PAR.PFS Ship To Est Nbr = LCL.Ship To Establishment nbr
 PAR.PFS_Ship_To_Est_Nbr = LCL.Ship_To_Establishment_nbr;

 ENDIF;

 ENDIF;

 ENDIF;

 //?Update of PFS Order Header (PPBBCPP) field = BBZHSX (Regulation ID)
 //?If the Regulation Id from the OD is entered, then use it
 // LCL.Continue (Yes/No) USR = CND.Yes
 LCL.Continue_Yes_No_USR = 'Y';

 //?Use Reg ID from the Order Detail if entered
 CASE;

 // IF LCL.IDE Regulation Code ID is Blank
 IF LCL.IDE_Regulation_Code_ID = *BLANK;

 //?Use Reg ID from the Order Detail if entered
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?To update PFS OH
 // PAR.PFS Regul Code ID = LCL.Regulation ID
 PAR.PFS_Regul_Code_ID = LCL.Regulation_ID;

 // LCL.Continue (Yes/No) USR = CND.No
 LCL.Continue_Yes_No_USR = 'N';

 ENDIF;

 //?If the regulation id from the ShipTo above is entered, then use it
 CASE;

 // IF LCL.Continue (Yes/No) USR is Yes
 IF LCL.Continue_Yes_No_USR = 'Y';

 //?Use Reg ID from the Ship To if entered
 CASE;

 // IF LCL.Regulation ID is Entered
 IF LCL.Regulation_ID <> *BLANK;

 //?To update PFS OH
 // PAR.PFS Regul Code ID = LCL.Regulation ID
 PAR.PFS_Regul_Code_ID = LCL.Regulation_ID;

 // LCL.Continue (Yes/No) USR = CND.No
 LCL.Continue_Yes_No_USR = 'N';

 ENDIF;

 ENDIF;

 //?Else Read the Regulation Code Mst for the one with Default Regulation
 //?set to "Y" and update the Regulation ID with its Regulation ID.
 CASE;

 // IF LCL.Continue (Yes/No) USR is Yes
 IF LCL.Continue_Yes_No_USR = 'Y';

 EXECUTE FUNCTION(RTV Default Reg Code RT) TYPE(RTVOBJ) FILE(PUC8REP)            AC2215512;
 PARAMETER(*BLANK);
 PARAMETER(LCL.Regulation_ID);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  CASE;

  // IF DB1.Default Regulation is Yes
  IF DB1.Default_Regulation = 'Y';

  // PAR.Regulation ID = DB1.Regulation ID
  PAR.Regulation_ID = DB1.Regulation_ID;

  QUIT;

  ENDIF;

 }

 //?To update PFS OH
 // PAR.PFS Regul Code ID = LCL.Regulation ID
 PAR.PFS_Regul_Code_ID = LCL.Regulation_ID;

 ENDIF;

 ENDDO;

 //?** PFS Order Header now includes the export shipping instructions
 //?** CREATE ORDER HEADER
 DO;

 // PAR.PFS Company Number = DB1.Company Number
 PAR.PFS_Company_Number = DB1.Company_Number;

 // PAR.PFS Order Number = DB1.Order Number
 PAR.PFS_Order_Number = DB1.Order_Number;

 // PAR.PFS Load ID = PAR.Load ID
 PAR.PFS_Load_ID = PAR.Load_ID;

 // PAR.PFS Load Stop Number = PAR.Stop/Drop
 PAR.PFS_Load_Stop_Number = PAR.Stop_Drop;

 // PAR.PFS Order Type = DB1.Order Type - Sales
 PAR.PFS_Order_Type = DB1.Order_Type_Sales;

 // PAR.PFS Ship To Cust Number = DB1.Ship To Customer
 PAR.PFS_Ship_To_Cust_Number = DB1.Ship_To_Customer;

 // PAR.PFS Ship To Cust Name = DB1.Ship To Name
 PAR.PFS_Ship_To_Cust_Name = DB1.Ship_To_Name;

 // PAR.PFS Ship To Cust Addr 1 = DB1.Ship To Address Line 1
 PAR.PFS_Ship_To_Cust_Addr_1 = DB1.Ship_To_Address_Line_1;

 // PAR.PFS Ship To Cust Addr 2 = DB1.Ship To Address Line 2
 PAR.PFS_Ship_To_Cust_Addr_2 = DB1.Ship_To_Address_Line_2;

 // PAR.PFS Ship To Cust Addr 3 = DB1.Ship To Address Line 3
 PAR.PFS_Ship_To_Cust_Addr_3 = DB1.Ship_To_Address_Line_3;

 // PAR.PFS Ship To Cust City = DB1.Ship To City
 PAR.PFS_Ship_To_Cust_City = DB1.Ship_To_City;

 // PAR.PFS Ship To Cust State = DB1.Ship To State Code
 PAR.PFS_Ship_To_Cust_State = DB1.Ship_To_State_Code;

 // PAR.PFS Ship To Cust Zip = DB1.Ship To Zip/Postal Code
 PAR.PFS_Ship_To_Cust_Zip = DB1.Ship_To_Zip_Postal_Code;

 EXECUTE FUNCTION(Rtv All Values        RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1569834;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(NLL.Internet_Password);
 PARAMETER(PAR.PFS_Ship_To_Email);
 PARAMETER(NLL.Email_User_ID);
 PARAMETER(NLL.EDI_Trading_Partner_No);
 PARAMETER(NLL.EDI_Cust_Duns_Number);
 PARAMETER(NLL.EDI_Warehouse_Store_No);
 PARAMETER(NLL.State_Tax_ID);
 PARAMETER(NLL.Cust_Shipping_Temp_C_F);
 PARAMETER(NLL.One_Invoice_Per_PO);
 PARAMETER(NLL.EDI_Advanced_Ship_Notice);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Customer Telephone RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1216241;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(PAR.PFS_Ship_To_Phone);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.PFS Bill To Cust Number = DB1.Bill to Customer
 PAR.PFS_Bill_To_Cust_Number = DB1.Bill_to_Customer;

 // PAR.PFS Bill To Cust Name = DB1.Bill to Name
 PAR.PFS_Bill_To_Cust_Name = DB1.Bill_to_Name;

 // PAR.PFS Bill To Cust Addr 1 = DB1.Bill to Address Line 1
 PAR.PFS_Bill_To_Cust_Addr_1 = DB1.Bill_to_Address_Line_1;

 // PAR.PFS Bill To Cust Addr 2 = DB1.Bill to Address Line 2
 PAR.PFS_Bill_To_Cust_Addr_2 = DB1.Bill_to_Address_Line_2;

 // PAR.PFS Bill To Cust Addr 3 = DB1.Bill to Address Line 3
 PAR.PFS_Bill_To_Cust_Addr_3 = DB1.Bill_to_Address_Line_3;

 // PAR.PFS Bill To Cust City = DB1.Bill to City
 PAR.PFS_Bill_To_Cust_City = DB1.Bill_to_City;

 // PAR.PFS Bill To Cust State = DB1.Bill to State Code
 PAR.PFS_Bill_To_Cust_State = DB1.Bill_to_State_Code;

 // PAR.PFS Bill To Cust Zip = DB1.Bill to Zip/Postal Code
 PAR.PFS_Bill_To_Cust_Zip = DB1.Bill_to_Zip_Postal_Code;

 // PAR.PFS Customer PO Number = DB1.Customer Purchase Order #
 PAR.PFS_Customer_PO_Number = DB1.Customer_Purchase_Order_#;

 EXECUTE FUNCTION(CNV cyymmdd to yyyymmdd) TYPE(EXCINTFUN)                       AC1732965;
 PARAMETER(DB1.Order_Date);
 PARAMETER(PAR.PFS_Order_Date);
 {
  //?Execute internal function

  // LCL.Year Code = PAR.Date In  (7,0) USR *YEAR
  LCL.Year_Code = DATEDTLS(PAR.Date_In_70_USR 'YR' 1111111 'NONE' 'N' 1);

  // LCL.Month NBR USR = PAR.Date In  (7,0) USR *MONTH
  LCL.Month_NBR_USR = DATEDTLS(PAR.Date_In_70_USR 'MO' 1111111 'NONE' 'N' 1);

  // LCL.Day of Month USR = PAR.Date In  (7,0) USR *DAY OF MONTH
  LCL.Day_of_Month_USR = DATEDTLS(PAR.Date_In_70_USR 'DM' 1111111 'NONE' 'N' 1);

  // PAR.Year Alpha (YYYY) USR = CVTVAR(LCL.Year Code)
  PAR.Year_Alpha_YYYY_USR = CVTVAR(LCL.Year_Code);

  // PAR.Month (Char) USR = CVTVAR(LCL.Month NBR USR)
  PAR.Month_Char_USR = CVTVAR(LCL.Month_NBR_USR);

  // PAR.Day   (Char) USR = CVTVAR(LCL.Day of Month USR)
  PAR.Day_Char_USR = CVTVAR(LCL.Day_of_Month_USR);

  // PAR.Date (Char-8) USR = CONCAT(PAR.Year Alpha (YYYY) USR,PAR.Month (Char) USR,CON.*ZERO)
  PAR.Date_Char_8_USR = PAR.Year_Alpha_YYYY_USR + PAR.Month_Char_USR (*ZERO);

  // PAR.Date (Char-8) USR = CONCAT(PAR.Date (Char-8) USR,PAR.Day   (Char) USR,CON.*ZERO)
  PAR.Date_Char_8_USR = PAR.Date_Char_8_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date Out (8,0) USR = CVTVAR(PAR.Date (Char-8) USR)
  PAR.Date_Out_80_USR = CVTVAR(PAR.Date_Char_8_USR);

 }

 EXECUTE FUNCTION(CNV cyymmdd to yyyymmdd) TYPE(EXCINTFUN)                       AC1732965;
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(PAR.PFS_Scheduled_Ship_Date);
 {
  //?Execute internal function

  // LCL.Year Code = PAR.Date In  (7,0) USR *YEAR
  LCL.Year_Code = DATEDTLS(PAR.Date_In_70_USR 'YR' 1111111 'NONE' 'N' 1);

  // LCL.Month NBR USR = PAR.Date In  (7,0) USR *MONTH
  LCL.Month_NBR_USR = DATEDTLS(PAR.Date_In_70_USR 'MO' 1111111 'NONE' 'N' 1);

  // LCL.Day of Month USR = PAR.Date In  (7,0) USR *DAY OF MONTH
  LCL.Day_of_Month_USR = DATEDTLS(PAR.Date_In_70_USR 'DM' 1111111 'NONE' 'N' 1);

  // PAR.Year Alpha (YYYY) USR = CVTVAR(LCL.Year Code)
  PAR.Year_Alpha_YYYY_USR = CVTVAR(LCL.Year_Code);

  // PAR.Month (Char) USR = CVTVAR(LCL.Month NBR USR)
  PAR.Month_Char_USR = CVTVAR(LCL.Month_NBR_USR);

  // PAR.Day   (Char) USR = CVTVAR(LCL.Day of Month USR)
  PAR.Day_Char_USR = CVTVAR(LCL.Day_of_Month_USR);

  // PAR.Date (Char-8) USR = CONCAT(PAR.Year Alpha (YYYY) USR,PAR.Month (Char) USR,CON.*ZERO)
  PAR.Date_Char_8_USR = PAR.Year_Alpha_YYYY_USR + PAR.Month_Char_USR (*ZERO);

  // PAR.Date (Char-8) USR = CONCAT(PAR.Date (Char-8) USR,PAR.Day   (Char) USR,CON.*ZERO)
  PAR.Date_Char_8_USR = PAR.Date_Char_8_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date Out (8,0) USR = CVTVAR(PAR.Date (Char-8) USR)
  PAR.Date_Out_80_USR = CVTVAR(PAR.Date_Char_8_USR);

 }

 // LCL.LD Carrier Appt Date = CON.*ZERO
 LCL.LD_Carrier_Appt_Date = *ZERO;

 // LCL.LD Carrier Appt Time = CON.*ZERO
 LCL.LD_Carrier_Appt_Time = *ZERO;

 //?E4119 RMC 9/2/16 TMS Use appt date/time if there, else use req delivery
 CASE;

 // IF DB1.OH Load Plan Ready is Yes
 IF DB1.OH_Load_Plan_Ready = 'Y';

 EXECUTE FUNCTION(RTV Carr Appt Dt/Tm   RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1677570;
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.LD_Carrier_Appt_Date);
 PARAMETER(LCL.LD_Carrier_Appt_Time);
 {
  //?USER: Process Data record

  // PAR.Appointment Confirm Date = DB1.LD Carrier Appt Date
  PAR.Appointment_Confirm_Date = DB1.LD_Carrier_Appt_Date;

  // PAR.Appointment Confirm Time = DB1.LD Carrier Appt Time
  PAR.Appointment_Confirm_Time = DB1.LD_Carrier_Appt_Time;

  QUIT;

 }

 ENDIF;

 CASE;

 // IF LCL.LD Carrier Appt Date is Entered
 IF LCL.LD_Carrier_Appt_Date > 0;

 EXECUTE FUNCTION(CNV cyymmdd to yyyymmdd) TYPE(EXCINTFUN)                       AC1732965;
 PARAMETER(LCL.LD_Carrier_Appt_Date);
 PARAMETER(PAR.PFS_Requested_Delv_Date);
 {
  //?Execute internal function

  // LCL.Year Code = PAR.Date In  (7,0) USR *YEAR
  LCL.Year_Code = DATEDTLS(PAR.Date_In_70_USR 'YR' 1111111 'NONE' 'N' 1);

  // LCL.Month NBR USR = PAR.Date In  (7,0) USR *MONTH
  LCL.Month_NBR_USR = DATEDTLS(PAR.Date_In_70_USR 'MO' 1111111 'NONE' 'N' 1);

  // LCL.Day of Month USR = PAR.Date In  (7,0) USR *DAY OF MONTH
  LCL.Day_of_Month_USR = DATEDTLS(PAR.Date_In_70_USR 'DM' 1111111 'NONE' 'N' 1);

  // PAR.Year Alpha (YYYY) USR = CVTVAR(LCL.Year Code)
  PAR.Year_Alpha_YYYY_USR = CVTVAR(LCL.Year_Code);

  // PAR.Month (Char) USR = CVTVAR(LCL.Month NBR USR)
  PAR.Month_Char_USR = CVTVAR(LCL.Month_NBR_USR);

  // PAR.Day   (Char) USR = CVTVAR(LCL.Day of Month USR)
  PAR.Day_Char_USR = CVTVAR(LCL.Day_of_Month_USR);

  // PAR.Date (Char-8) USR = CONCAT(PAR.Year Alpha (YYYY) USR,PAR.Month (Char) USR,CON.*ZERO)
  PAR.Date_Char_8_USR = PAR.Year_Alpha_YYYY_USR + PAR.Month_Char_USR (*ZERO);

  // PAR.Date (Char-8) USR = CONCAT(PAR.Date (Char-8) USR,PAR.Day   (Char) USR,CON.*ZERO)
  PAR.Date_Char_8_USR = PAR.Date_Char_8_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date Out (8,0) USR = CVTVAR(PAR.Date (Char-8) USR)
  PAR.Date_Out_80_USR = CVTVAR(PAR.Date_Char_8_USR);

 }

 // PAR.PFS Requested Delv Time = LCL.LD Carrier Appt Time
 PAR.PFS_Requested_Delv_Time = LCL.LD_Carrier_Appt_Time;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(CNV cyymmdd to yyyymmdd) TYPE(EXCINTFUN)                       AC1732965;
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(PAR.PFS_Requested_Delv_Date);
 {
  //?Execute internal function

  // LCL.Year Code = PAR.Date In  (7,0) USR *YEAR
  LCL.Year_Code = DATEDTLS(PAR.Date_In_70_USR 'YR' 1111111 'NONE' 'N' 1);

  // LCL.Month NBR USR = PAR.Date In  (7,0) USR *MONTH
  LCL.Month_NBR_USR = DATEDTLS(PAR.Date_In_70_USR 'MO' 1111111 'NONE' 'N' 1);

  // LCL.Day of Month USR = PAR.Date In  (7,0) USR *DAY OF MONTH
  LCL.Day_of_Month_USR = DATEDTLS(PAR.Date_In_70_USR 'DM' 1111111 'NONE' 'N' 1);

  // PAR.Year Alpha (YYYY) USR = CVTVAR(LCL.Year Code)
  PAR.Year_Alpha_YYYY_USR = CVTVAR(LCL.Year_Code);

  // PAR.Month (Char) USR = CVTVAR(LCL.Month NBR USR)
  PAR.Month_Char_USR = CVTVAR(LCL.Month_NBR_USR);

  // PAR.Day   (Char) USR = CVTVAR(LCL.Day of Month USR)
  PAR.Day_Char_USR = CVTVAR(LCL.Day_of_Month_USR);

  // PAR.Date (Char-8) USR = CONCAT(PAR.Year Alpha (YYYY) USR,PAR.Month (Char) USR,CON.*ZERO)
  PAR.Date_Char_8_USR = PAR.Year_Alpha_YYYY_USR + PAR.Month_Char_USR (*ZERO);

  // PAR.Date (Char-8) USR = CONCAT(PAR.Date (Char-8) USR,PAR.Day   (Char) USR,CON.*ZERO)
  PAR.Date_Char_8_USR = PAR.Date_Char_8_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date Out (8,0) USR = CVTVAR(PAR.Date (Char-8) USR)
  PAR.Date_Out_80_USR = CVTVAR(PAR.Date_Char_8_USR);

 }

 // PAR.PFS Requested Delv Time = CON.100 * DB1.Requested Delivery Time *
 PAR.PFS_Requested_Delv_Time = 100 * DB1.Requested_Delivery_Time;

 ENDIF;

 // PAR.PFS Export Status = DB1.Export Status
 PAR.PFS_Export_Status = DB1.Export_Status;

 EXECUTE FUNCTION(RTV Country Code only  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1531787;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.PFS_Country_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Not cancelled
  IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

  ENDIF;

 }

 //?** 01/14/2009 LJB FP1303 Retrieve new delivery p.o.number
 EXECUTE FUNCTION(RTV OHE for Ord Entry RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC1914702;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.PFS_Delivery_P_O_Number);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 CASE;

 // IF PAR.PFS Country Code is Not Entered
 IF PAR.PFS_Country_Code = *BLANK;

 // PAR.PFS Country Code = CND.United States
 PAR.PFS_Country_Code = 'USA';

 ENDIF;

 // PAR.PFS Special Instruct 1 = DB1.Special Instructions
 PAR.PFS_Special_Instruct_1 = DB1.Special_Instructions;

 // PAR.PFS Special Instruct 2 = DB1.Special Instructions 2
 PAR.PFS_Special_Instruct_2 = DB1.Special_Instructions_2;

 // PAR.PFS Maximum Gross Weight = DB1.Maximum Gross Weight
 PAR.PFS_Maximum_Gross_Weight = DB1.Maximum_Gross_Weight;

 // PAR.PFS Estimated Pallets = LCL.Number Pallets Loaded
 PAR.PFS_Estimated_Pallets = LCL.Number_Pallets_Loaded;

 //?avg pallet tare
 CASE;

 // IF LCL.Number Pallets Loaded is Not zero
 IF LCL.Number_Pallets_Loaded <> *ZERO;

 // PAR.PFS Average Pallet Tare = LCL.Weight 1 USR / LCL.Number Pallets Loaded *Rounded
 PAR.PFS_Average_Pallet_Tare = LCL.Weight_1_USR / LCL.Number_Pallets_Loaded 'H';

 //?avg pallet tare
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.PFS Average Pallet Tare = CON.*ZERO
 PAR.PFS_Average_Pallet_Tare = *ZERO;

 ENDIF;

 EXECUTE FUNCTION(RTV From/To WHS   PFS RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1743500;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.PFS_Ship_From_Warehouse);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?C2748:  Changed RTV Warehouse Code RT to exclude Cancelled lines.
  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

  ENDIF;

 }

 //?Warehouse CFH to CF1
 CASE;

 // IF PAR.PFS Ship From Warehouse is CFH
 IF PAR.PFS_Ship_From_Warehouse = 'CFH';

 // PAR.PFS Ship From Warehouse = CON.CF1
 PAR.PFS_Ship_From_Warehouse = 'CF1';

 ENDIF;

 //?PFS Ship To Warehouse for Transfers
 CASE;

 // IF DB1.Order Type - Sales is Transfer Order
 IF DB1.Order_Type_Sales = 'TR';

 EXECUTE FUNCTION(Rtv Default Warehouse  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1323141;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(PAR.PFS_Ship_To_Warehouse);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?invoiced status
 CASE;

 // IF DB1.Invoice Number is GT Zero
 IF DB1.Invoice_Number > *ZERO;

 // PAR.PFS Order Status = CND.Completed (Invoiced)
 PAR.PFS_Order_Status = 'C';

 //?invoiced status
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.PFS Order Status = DB1.Header Status
 PAR.PFS_Order_Status = DB1.Header_Status;

 ENDIF;

 //?--------
 //?load status
 CASE;

 // IF PAR.Load Status is Unlock
 IF PAR.Load_Status = 'U';

 // PAR.PFS Record Status = CND.Delete
 PAR.PFS_Record_Status = 'D';

 //?load status
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.PFS Record Status = CND.Change
 PAR.PFS_Record_Status = 'C';

 ENDIF;

 //?PFS015 RMC 8/14/06
 CASE;

 // IF PAR.Receipt Order Sts USR is yes
 IF PAR.Receipt_Order_Sts_USR = 'Y';

 // PAR.PFS Order Type = CND.Receipt Order
 PAR.PFS_Order_Type = 'RO';

 ENDIF;

 //?**************************************************************
 //?** FP1101-4 LJB 04/06/2007
 //?** Get Customer Order Export Instructions from OHE
 CASE;

 // IF DB1.Export Status is yes
 IF DB1.Export_Status = 'Y';

 //?** FP1101
 // PAR.PFS Export Status = DB1.Export Status
 PAR.PFS_Export_Status = DB1.Export_Status;

 EXECUTE FUNCTION(RTV PFS Export Inst    RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC1814730;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.Stop_Drop);
 PARAMETER(PAR.PFS_Shipping_Line);
 PARAMETER(PAR.Port_Delv_Terminal);
 PARAMETER(PAR.PFS_Shipping_Line_City);
 PARAMETER(PAR.PFS_Vessel_Name);
 PARAMETER(PAR.PFS_Voyage);
 PARAMETER(PAR.PFS_Booking_Number);
 PARAMETER(PAR.PFS_Discharge_Port);
 PARAMETER(LCL.OHE_Sail_Flight_Date);
 PARAMETER(LCL.OHE_Port_Cut_Date);
 PARAMETER(LCL.OHE_Arrival_Date);
 PARAMETER(LCL.OHE_Late_Delivery_Code);
 PARAMETER(LCL.OHE_Ship_Status);
 PARAMETER(LCL.OHE_Container_Number);
 PARAMETER(LCL.OHE_Comment_1);
 PARAMETER(LCL.OHE_Comment_2);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?** Shipping line and port terminal info
 CASE;

 // IF PAR.PFS Shipping Line is Entered
 IF PAR.PFS_Shipping_Line <> *BLANK;

 // AND PAR.Port Delv Terminal is Entered
 AND PAR.Port_Delv_Terminal <> *BLANK;

 EXECUTE FUNCTION(RTV Shipping Line/PortsRT) TYPE(RTVOBJ) FILE(PDLCREP)          AC1447742;
 PARAMETER(PAR.PFS_Shipping_Line);
 PARAMETER(PAR.Port_Delv_Terminal);
 PARAMETER(PAR.PFS_Shipping_Line_City);
 PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
 PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
 PARAMETER(PAR.PFS_Shipping_Line_State);
 PARAMETER(PAR.PFS_Shipping_LIne_Zip);
 PARAMETER(LCL.Port_Phone_Number);
 PARAMETER(NLL.Port_Fax_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

 }

 // PAR.PFS Shipping Line Name = PAR.Port Delv Terminal
 PAR.PFS_Shipping_Line_Name = PAR.Port_Delv_Terminal;

 // PAR.PFS Ship To Phone = CVTVAR(LCL.Port Phone Number)
 PAR.PFS_Ship_To_Phone = CVTVAR(LCL.Port_Phone_Number);

 ENDIF;

 ENDIF;

 //?** Update includes new Order Header Extension file export data
 //?07/12/19 DN R15161-Sent in PAR.PFS Load Unused Text 1.
 EXECUTE FUNCTION(Upd Order Header      RT) TYPE(RTVOBJ) FILE(PPBBCPP)           AC1732935;
 PARAMETER(PAR.PFS_Company_Number);
 PARAMETER(PAR.PFS_Order_Number);
 PARAMETER(PAR.PFS_Load_ID);
 PARAMETER(PAR.PFS_Loading_Sequence);
 PARAMETER(PAR.PFS_Load_Stop_Number);
 PARAMETER(PAR.PFS_Order_Type);
 PARAMETER(PAR.PFS_Ship_To_Cust_Number);
 PARAMETER(PAR.PFS_Ship_To_Cust_Name);
 PARAMETER(PAR.PFS_Ship_To_Cust_Addr_1);
 PARAMETER(PAR.PFS_Ship_To_Cust_Addr_2);
 PARAMETER(PAR.PFS_Ship_To_Cust_Addr_3);
 PARAMETER(PAR.PFS_Ship_To_Cust_City);
 PARAMETER(PAR.PFS_Ship_To_Cust_State);
 PARAMETER(PAR.PFS_Ship_To_Cust_Zip);
 PARAMETER(PAR.PFS_Ship_To_Email);
 PARAMETER(PAR.PFS_Ship_To_Phone);
 PARAMETER(PAR.PFS_Bill_To_Cust_Number);
 PARAMETER(PAR.PFS_Bill_To_Cust_Name);
 PARAMETER(PAR.PFS_Bill_To_Cust_Addr_1);
 PARAMETER(PAR.PFS_Bill_To_Cust_Addr_2);
 PARAMETER(PAR.PFS_Bill_To_Cust_Addr_3);
 PARAMETER(PAR.PFS_Bill_To_Cust_City);
 PARAMETER(PAR.PFS_Bill_To_Cust_State);
 PARAMETER(PAR.PFS_Bill_To_Cust_Zip);
 PARAMETER(PAR.PFS_Customer_PO_Number);
 PARAMETER(PAR.PFS_Order_Date);
 PARAMETER(PAR.PFS_Scheduled_Ship_Date);
 PARAMETER(PAR.PFS_Requested_Delv_Date);
 PARAMETER(PAR.PFS_Requested_Delv_Time);
 PARAMETER(PAR.PFS_Export_Status);
 PARAMETER(PAR.PFS_Country_Code);
 PARAMETER(PAR.PFS_Special_Instruct_1);
 PARAMETER(PAR.PFS_Special_Instruct_2);
 PARAMETER(PAR.PFS_Maximum_Gross_Weight);
 PARAMETER(PAR.PFS_Estimated_Pallets);
 PARAMETER(PAR.PFS_Average_Pallet_Tare);
 PARAMETER(PAR.PFS_Order_Status);
 PARAMETER(PAR.PFS_Ship_From_Warehouse);
 PARAMETER(PAR.PFS_Ship_To_Warehouse);
 PARAMETER(PAR.PFS_Order_Detail_Count);
 PARAMETER(PAR.PFS_Sequence_No);
 PARAMETER(PAR.PFS_Shipping_Line);
 PARAMETER(PAR.PFS_Shipping_Line_Name);
 PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
 PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
 PARAMETER(PAR.PFS_Shipping_Line_City);
 PARAMETER(PAR.PFS_Shipping_Line_State);
 PARAMETER(PAR.PFS_Shipping_LIne_Zip);
 PARAMETER(PAR.PFS_Vessel_Name);
 PARAMETER(PAR.PFS_Voyage);
 PARAMETER(PAR.PFS_Discharge_Port);
 PARAMETER(PAR.PFS_Booking_Number);
 PARAMETER(PAR.PFS_Delivery_P_O_Number);
 PARAMETER(PAR.PFS_Order_Unused_Sts_1);
 PARAMETER(PAR.PFS_Order_Unused_Sts_2);
 PARAMETER(PAR.PFS_Order_Unused_Sts_3);
 PARAMETER(PAR.PFS_Order_Unused_Sts_4);
 PARAMETER(PAR.PFS_Regul_Code_ID);
 PARAMETER(PAR.PFS_Ship_To_Est_Nbr);
 PARAMETER(PAR.PFS_Record_Status);
 {
  //?USER: Initialize routine

  //?LJB 1/14/09 FP1303 Add PFS Delivery P.O. Number (new field)
  //?RMC 03/13/07 output par.sequence no
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt PFS Order Header  CR) TYPE(CRTOBJ) FILE(PPBBCPP)           AC1732843;
  PARAMETER(PAR.PFS_Company_Number);
  PARAMETER(PAR.PFS_Order_Number);
  PARAMETER(PAR.PFS_Load_ID);
  PARAMETER(PAR.PFS_Loading_Sequence);
  PARAMETER(PAR.PFS_Load_Stop_Number);
  PARAMETER(PAR.PFS_Order_Type);
  PARAMETER(PAR.PFS_Ship_To_Cust_Number);
  PARAMETER(PAR.PFS_Ship_To_Cust_Name);
  PARAMETER(PAR.PFS_Ship_To_Cust_Addr_1);
  PARAMETER(PAR.PFS_Ship_To_Cust_Addr_2);
  PARAMETER(PAR.PFS_Ship_To_Cust_Addr_3);
  PARAMETER(PAR.PFS_Ship_To_Cust_City);
  PARAMETER(PAR.PFS_Ship_To_Cust_State);
  PARAMETER(PAR.PFS_Ship_To_Cust_Zip);
  PARAMETER(PAR.PFS_Ship_To_Email);
  PARAMETER(PAR.PFS_Ship_To_Phone);
  PARAMETER(PAR.PFS_Bill_To_Cust_Number);
  PARAMETER(PAR.PFS_Bill_To_Cust_Name);
  PARAMETER(PAR.PFS_Bill_To_Cust_Addr_1);
  PARAMETER(PAR.PFS_Bill_To_Cust_Addr_2);
  PARAMETER(PAR.PFS_Bill_To_Cust_Addr_3);
  PARAMETER(PAR.PFS_Bill_To_Cust_City);
  PARAMETER(PAR.PFS_Bill_To_Cust_State);
  PARAMETER(PAR.PFS_Bill_To_Cust_Zip);
  PARAMETER(PAR.PFS_Customer_PO_Number);
  PARAMETER(PAR.PFS_Order_Date);
  PARAMETER(PAR.PFS_Scheduled_Ship_Date);
  PARAMETER(PAR.PFS_Requested_Delv_Date);
  PARAMETER(PAR.PFS_Requested_Delv_Time);
  PARAMETER(PAR.PFS_Export_Status);
  PARAMETER(PAR.PFS_Country_Code);
  PARAMETER(PAR.PFS_Special_Instruct_1);
  PARAMETER(PAR.PFS_Special_Instruct_2);
  PARAMETER(PAR.PFS_Maximum_Gross_Weight);
  PARAMETER(PAR.PFS_Estimated_Pallets);
  PARAMETER(PAR.PFS_Average_Pallet_Tare);
  PARAMETER(PAR.PFS_Order_Status);
  PARAMETER(PAR.PFS_Ship_From_Warehouse);
  PARAMETER(PAR.PFS_Ship_To_Warehouse);
  PARAMETER(PAR.PFS_Order_Detail_Count);
  PARAMETER(PAR.PFS_Sequence_No);
  PARAMETER(PAR.PFS_Shipping_Line);
  PARAMETER(PAR.PFS_Shipping_Line_Name);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
  PARAMETER(PAR.PFS_Shipping_Line_City);
  PARAMETER(PAR.PFS_Shipping_Line_State);
  PARAMETER(PAR.PFS_Shipping_LIne_Zip);
  PARAMETER(PAR.PFS_Vessel_Name);
  PARAMETER(PAR.PFS_Voyage);
  PARAMETER(PAR.PFS_Discharge_Port);
  PARAMETER(PAR.PFS_Booking_Number);
  PARAMETER(PAR.PFS_Delivery_P_O_Number);
  PARAMETER(PAR.PFS_Order_Unused_Sts_1);
  PARAMETER(PAR.PFS_Order_Unused_Sts_2);
  PARAMETER(PAR.PFS_Order_Unused_Sts_3);
  PARAMETER(PAR.PFS_Order_Unused_Sts_4);
  PARAMETER(PAR.PFS_Regul_Code_ID);
  PARAMETER(PAR.PFS_Ship_To_Est_Nbr);
  PARAMETER(PAR.PFS_Record_Status);
  PARAMETER(PAR.PFS_Process_Status);
  PARAMETER(PAR.PFS_Error_Reason);
  PARAMETER(PAR.PFS_Create_Date);
  PARAMETER(PAR.PFS_Create_Time);
  PARAMETER(PAR.PFS_Change_Date);
  PARAMETER(PAR.PFS_Change_Time);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Create Stamp      IF) TYPE(EXCINTFUN)                      AC1732162;
   PARAMETER(DB1.PFS_Process_Status);
   PARAMETER(DB1.PFS_Create_Date);
   PARAMETER(DB1.PFS_Create_Time);
   {
    //?Execute internal function

    // PAR.PFS Process Status = CND.Not Processed
    PAR.PFS_Process_Status = *ZERO;

    // PAR.PFS Create Date = JOB.*Job date
    PAR.PFS_Create_Date = JOB.*Job_date;

    // PAR.PFS Create Time = JOB.*Job time
    PAR.PFS_Create_Time = JOB.*Job_time;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg PFS Order Header  CH) TYPE(CHGOBJ) FILE(PPBBCPP)           AC1732844;
  PARAMETER(PAR.PFS_Company_Number);
  PARAMETER(PAR.PFS_Order_Number);
  PARAMETER(PAR.PFS_Load_ID);
  PARAMETER(PAR.PFS_Loading_Sequence);
  PARAMETER(PAR.PFS_Load_Stop_Number);
  PARAMETER(PAR.PFS_Order_Type);
  PARAMETER(PAR.PFS_Ship_To_Cust_Number);
  PARAMETER(PAR.PFS_Ship_To_Cust_Name);
  PARAMETER(PAR.PFS_Ship_To_Cust_Addr_1);
  PARAMETER(PAR.PFS_Ship_To_Cust_Addr_2);
  PARAMETER(PAR.PFS_Ship_To_Cust_Addr_3);
  PARAMETER(PAR.PFS_Ship_To_Cust_City);
  PARAMETER(PAR.PFS_Ship_To_Cust_State);
  PARAMETER(PAR.PFS_Ship_To_Cust_Zip);
  PARAMETER(PAR.PFS_Ship_To_Email);
  PARAMETER(PAR.PFS_Ship_To_Phone);
  PARAMETER(PAR.PFS_Bill_To_Cust_Number);
  PARAMETER(PAR.PFS_Bill_To_Cust_Name);
  PARAMETER(PAR.PFS_Bill_To_Cust_Addr_1);
  PARAMETER(PAR.PFS_Bill_To_Cust_Addr_2);
  PARAMETER(PAR.PFS_Bill_To_Cust_Addr_3);
  PARAMETER(PAR.PFS_Bill_To_Cust_City);
  PARAMETER(PAR.PFS_Bill_To_Cust_State);
  PARAMETER(PAR.PFS_Bill_To_Cust_Zip);
  PARAMETER(PAR.PFS_Customer_PO_Number);
  PARAMETER(PAR.PFS_Order_Date);
  PARAMETER(PAR.PFS_Scheduled_Ship_Date);
  PARAMETER(PAR.PFS_Requested_Delv_Date);
  PARAMETER(PAR.PFS_Requested_Delv_Time);
  PARAMETER(PAR.PFS_Export_Status);
  PARAMETER(PAR.PFS_Country_Code);
  PARAMETER(PAR.PFS_Special_Instruct_1);
  PARAMETER(PAR.PFS_Special_Instruct_2);
  PARAMETER(PAR.PFS_Maximum_Gross_Weight);
  PARAMETER(PAR.PFS_Estimated_Pallets);
  PARAMETER(PAR.PFS_Average_Pallet_Tare);
  PARAMETER(PAR.PFS_Order_Status);
  PARAMETER(PAR.PFS_Ship_From_Warehouse);
  PARAMETER(PAR.PFS_Ship_To_Warehouse);
  PARAMETER(PAR.PFS_Order_Detail_Count);
  PARAMETER(PAR.PFS_Sequence_No);
  PARAMETER(PAR.PFS_Shipping_Line);
  PARAMETER(PAR.PFS_Shipping_Line_Name);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_1);
  PARAMETER(PAR.PFS_Shipping_Line_Addr_2);
  PARAMETER(PAR.PFS_Shipping_Line_City);
  PARAMETER(PAR.PFS_Shipping_Line_State);
  PARAMETER(PAR.PFS_Shipping_LIne_Zip);
  PARAMETER(PAR.PFS_Vessel_Name);
  PARAMETER(PAR.PFS_Voyage);
  PARAMETER(PAR.PFS_Discharge_Port);
  PARAMETER(PAR.PFS_Booking_Number);
  PARAMETER(PAR.PFS_Delivery_P_O_Number);
  PARAMETER(PAR.PFS_Order_Unused_Sts_1);
  PARAMETER(PAR.PFS_Order_Unused_Sts_2);
  PARAMETER(PAR.PFS_Order_Unused_Sts_3);
  PARAMETER(PAR.PFS_Order_Unused_Sts_4);
  PARAMETER(PAR.PFS_Regul_Code_ID);
  PARAMETER(PAR.PFS_Ship_To_Est_Nbr);
  PARAMETER(PAR.PFS_Record_Status);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Change Stamp      IF) TYPE(EXCINTFUN)                      AC1732163;
   PARAMETER(DB1.PFS_Change_Date);
   PARAMETER(DB1.PFS_Change_Time);
   {
    //?Execute internal function

    // PAR.PFS Change Date = JOB.*Job date
    PAR.PFS_Change_Date = JOB.*Job_date;

    // PAR.PFS Change time = JOB.*Job time
    PAR.PFS_Change_Time = JOB.*Job_time;

   }

  }

 }

 ENDDO;

 //?** Accumulate Number of Pallets Loaded & Total Pallet Weight **
 //?Do not add if Header Status is Cancelled.
 CASE;

 // IF DB1.Header Status is Cancelled
 IF DB1.Header_Status = 'X';

 //?Do not add if Header Status is Cancelled.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Number Pallets Loaded = PAR.Number Pallets Loaded + LCL.Number Pallets Loaded
 PAR.Number_Pallets_Loaded = PAR.Number_Pallets_Loaded + LCL.Number_Pallets_Loaded;

 ENDIF;

 // PAR.Weight 1 USR = PAR.Weight 1 USR + LCL.Weight 1 USR
 PAR.Weight_1_USR = PAR.Weight_1_USR + LCL.Weight_1_USR;

}


// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(LCL.Load_ID);
PARAMETER(LCL.Stop_Drop);
PARAMETER('SNDPFS');
PARAMETER('INT');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*JOB);
PARAMETER(PAR.Carrier_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);

ENDIF;

