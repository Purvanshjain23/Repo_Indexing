// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNYLXFR
// ?Date: 14.08.2025 Time: 03:47:06
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?It has already been established that an 855 needs to be sent.
//?Because we do not keep our chged rcds, we cannot send all the info that
//?the customer wants in an 865. So we are sending them another 855 with
//?the flag saying it is a changed PO.
//?Add/default transaction flag                          E004140
// PAR.Trans Type 1 PASS     USR = CND.not entered
PAR.Trans_Type_1_PASS_USR = *BLANK;

//?Retrieve the PO Ack process flag
EXECUTE FUNCTION(RTV EDI PO Flag       RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC2023170;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.OHE_PO_ACK_Flag);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Initialize routine

 //?3/11/14 SAZ If OHE PO ack flag = Blank, initialize to *NO
 //?3/11/14 SAZ If Record not found, initialize  OHE PO Ack Flag to *NO
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 // PAR.OHE PO ACK Flag = CND.*NO
 PAR.OHE_PO_ACK_Flag = *NO;

 //?USER: Process Data record

 // PAR.OHE PO ACK Flag = DB1.OHE PO ACK Flag
 PAR.OHE_PO_ACK_Flag = DB1.OHE_PO_ACK_Flag;

 CASE;

 // IF DB1.OHE PO ACK Flag is *Blank
 IF DB1.OHE_PO_ACK_Flag = *BLANK;

 // PAR.OHE PO ACK Flag = CND.*NO
 PAR.OHE_PO_ACK_Flag = *NO;

 ENDIF;

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


//?If rcd not found in OH ext, and Cust req 855, build records.
CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

//?07/31/19 DN R15161-Replaced OHE CRTOBJ.
EXECUTE FUNCTION(CRT Order Header Extsn CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC2173922;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER('O');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.OHE_HPB_RIN_Equiv_Value);
PARAMETER(LCL.OHE_HPB_RIN_Price);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.OHE_Carrier_SCAC_Code);
PARAMETER(LCL.OHE_Spot_Buy);
PARAMETER(*YES);
PARAMETER(LCL.OHE_Override_Type_Code);
PARAMETER(LCL.OHE_Backhaul_Status);
PARAMETER(LCL.OHE_Backhaul_ETA_AM_PM);
PARAMETER(LCL.OHE_Load_Haul_Type);
PARAMETER(LCL.OHE_Backhaul_Carrier_Code);
PARAMETER(LCL.OHE_Bookings_Confirmed);
PARAMETER(LCL.OHE_EDI_Error_Reasons);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(LCL.OHE_Intended_for_ExportCC);
PARAMETER(LCL.OHE_EDI_943_Action);
PARAMETER(LCL.OHE_EDI_944_Action);
PARAMETER(LCL.OHE_EDI_940_Action);
PARAMETER(LCL.OHE_EDI_945_Action);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(LCL.OHE_Appt_Confirmation_#);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.EDI_Status_1);
PARAMETER(LCL.EDI_Status_2);
PARAMETER(LCL.EDI_Status_3);
PARAMETER('A');
PARAMETER(LCL.Job_Time);
PARAMETER(LCL.User_Id);
PARAMETER(LCL.Job_Name);
PARAMETER(LCL.Job_Date);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp 2 IF) TYPE(EXCINTFUN)                      AC2165057;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?USER: Processing if Data update error

 RETURN;

}


// LCL.BAK02-Ack Type = CND.Ack-Prod Replenishment
LCL.BAK02_Ack_Type = 'AP';

// Call program RTV OH/Crt EDI PO Ack XF.
CALL PROGRAM(RTV OH/Crt EDI PO Ack XF) ('PMXJXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.BAK02_Ack_Type);

//?If rcd not found in OH ext, and Cust req 855, build records.
// IF *OTHERWISE
IF *OTHERWISE;

//?Record found, then crt Cust Ext and POA Hdr/Dtl/Nm if POA flag = NO
CASE;

// IF LCL.OHE PO ACK Flag is *NO
IF LCL.OHE_PO_ACK_Flag = *NO;

// OR LCL.OHE PO ACK Flag is *Blank
OR LCL.OHE_PO_ACK_Flag = *BLANK;

// LCL.BAK02-Ack Type = CND.Ack-Prod Replenishment
LCL.BAK02_Ack_Type = 'AP';

// Call program RTV OH/Crt EDI PO Ack XF.
CALL PROGRAM(RTV OH/Crt EDI PO Ack XF) ('PMXJXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.BAK02_Ack_Type);

EXECUTE FUNCTION(Rtv EDI Detail        RT) TYPE(RTVOBJ) FILE(ECP033)            AC1897664;
PARAMETER(PAR.Order_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?RMC 10/4/18 Mark EDI PO *YES if details were created  10/4/18
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

//?If NO Details were written,( the order was unpriced by the time it got
//?   here), then delete all the files and dont change the OHE sts
// Call program Rtv/Dlt EDI PO Ack RcdXF.
CALL PROGRAM(Rtv/Dlt EDI PO Ack RcdXF) ('PNY9XFR');
PARAMETER(PAR.Order_Number);

//?RMC 10/4/18 Mark EDI PO *YES if details were created  10/4/18
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(CHG EDI PO ACK Flag   CH) TYPE(CHGOBJ) FILE(PMAMREP)           AC1965422;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(*YES);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp 2 IF) TYPE(EXCINTFUN)                      AC2165057;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//?Create the PO Chg Ack (865). We will send an 855 with the chgs
//?instead of the 865 mapping.
CASE;

// IF LCL.OHE PO ACK Flag is *YES
IF LCL.OHE_PO_ACK_Flag = *YES;

//?Get inv proc and ACK type before delete    S14192 RMC 12.4.18
EXECUTE FUNCTION(Rtv EDI INV PROC/Ack  RT) TYPE(RTVOBJ) FILE(ECP032)            AC2161376;
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.D_EDI_INV_PROC_FLAG);
PARAMETER(LCL.BAK02_Ack_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Delete the existing 855 and write one with the changes.
// Call program Rtv/Dlt EDI PO Ack RcdXF.
CALL PROGRAM(Rtv/Dlt EDI PO Ack RcdXF) ('PNY9XFR');
PARAMETER(PAR.Order_Number);

//?If AP and not processed, then leave as AP, else AC    S14192
CASE;

// IF LCL.D-EDI INV PROC FLAG is *No
IF LCL.D_EDI_INV_PROC_FLAG = 'N';

// AND LCL.BAK02-Ack Type is Ack-Prod Replenishment
AND LCL.BAK02_Ack_Type = 'AP';

// LCL.BAK02-Ack Type = CND.Ack-Prod Replenishment
LCL.BAK02_Ack_Type = 'AP';

//?If AP and not processed, then leave as AP, else AC    S14192
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.BAK02-Ack Type = CND.Ack with Dtl & Chg
LCL.BAK02_Ack_Type = 'AC';

ENDIF;

// Call program RTV OH/Crt EDI PO Ack XF.
CALL PROGRAM(RTV OH/Crt EDI PO Ack XF) ('PMXJXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.BAK02_Ack_Type);

EXECUTE FUNCTION(Rtv EDI Detail        RT) TYPE(RTVOBJ) FILE(ECP033)            AC1897664;
PARAMETER(PAR.Order_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?RMC 10/4/18 Mark EDI PO *YES if details were created  10/4/18
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

//?If NO Details were written,( the order was unpriced by the time it got
//?   here), then delete all the files and Change the OHE sts to Blank
// Call program Rtv/Dlt EDI PO Ack RcdXF.
CALL PROGRAM(Rtv/Dlt EDI PO Ack RcdXF) ('PNY9XFR');
PARAMETER(PAR.Order_Number);

EXECUTE FUNCTION(CHG EDI PO ACK Flag   CH) TYPE(CHGOBJ) FILE(PMAMREP)           AC1965422;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(*BLANK);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp 2 IF) TYPE(EXCINTFUN)                      AC2165057;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

ENDIF;

ENDIF;

ENDIF;

