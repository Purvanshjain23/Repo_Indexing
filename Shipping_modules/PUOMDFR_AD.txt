// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PUOMDFR
// ?Date: 14.08.2025 Time: 03:50:57
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?History - Modification
DO;

//?This program has been created for the usage of the
//?Document of the new selection screen for the wi359 multiple whse
//?Understand this is just the start of the changes for this process
//?All of the warehouse should be passed, and the decession was
//?made by the business that the selection of only 4 warehouse at
//?time.  So either use a work file, or arrays will be elected by
//?the developer and review with the BSA
//?10/17/2019 JBB E15650 - Multi-Stop Seaboard Warehouse Report
//?     WI359     1. Default Load Start Company based on user ID.
//?               2. Make Load Start Company a required field.
//?               3. Add 6 warehouse fields for selectors.
//?               4. Display valid subfile records for the Company.
//?               5. Warehouse validations:
//?                  a. Warehouse must be valid for the Company Number.
//?                  b. The first two warehouse fields are required.
//?                  c. No blank warehouses between non-blank values.
//?                  d. No duplicate warehouses selected.
//?               6. From and To Date validations:
//?                  a. From Date and To Date are required fields.
//?                  b. From Date cannot be after To Date.
//?               7. Pass entered warehouse values to submitted CLP.
ENDDO;

//?Insert logic to get the shipping company for a restrict
//?Add the selection based on user has authorization of company
//?Only allow multiple company if the user has authorization for such
EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?If Allow Multi-Company flag is not 'Y', protect Load Company field
CASE;

// IF NOT PAR.Allow Multi-Company is yes
IF ! PAR.Allow_Multi_Company = 'Y';

// LCL.Protect Screen Field = CND.Yes
LCL.Protect_Screen_Field = 'Y';

ENDIF;

// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

//?USER: Initialize subfile control

//?On first pass, load user's company number and name
CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

// CTL.Shipping Company = PAR.Company Number
CTL.Shipping_Company = PAR.Company_Number;

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(CTL.Company_Name_DRV);
PARAMETER(CTL.Shipping_Company);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

ENDIF;

//?USER: Initialize subfile record from DBF record

//?Select records for Load Start Company only
CASE;

// IF NOT DB1.Record Status is Active
IF ! DB1.Record_Status = 'A';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?Select records for Load Start Company only
// IF CTL.Shipping Company NE DB1.Shipping Company
IF CTL.Shipping_Company <> DB1.Shipping_Company;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?Select records for Load Start Company only
// IF CTL.State Code is State code not Blanks
IF CTL.State_Code <> *BLANK;

// AND CTL.State Code NE DB1.State Code
AND CTL.State_Code <> DB1.State_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?CALC: Subfile control function fields

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(CTL.Company_Name_DRV);
PARAMETER(CTL.Shipping_Company);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Process subfile control (Pre-confirm)

//?Company Number validations
CASE;

// IF CTL.Shipping Company is Equal to zero
IF CTL.Shipping_Company = *ZERO;

// Send error message - 'Company Number is required.'
ERROR(USR2183);
MSGPARM(CTL.Shipping_Company);

//?Company Number validations
// IF CTL.Shipping Company is not equal to zero
IF CTL.Shipping_Company <> *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Shipping_Company);
PARAMETER(CTL.Company_Name_DRV);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If record not found, send error message
CASE;

// IF PGM.*Return code is Company not found
IF PGM.*Return_code = 'USR0003';

// Send error message - 'Invalid Company Number'
ERROR(USR1783);
MSGPARM(CTL.Shipping_Company);

ENDIF;

ENDIF;

//?Date validations
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?From Date required
CASE;

// IF CTL.Date From             USR is Not Entered
IF CTL.Date_From_USR = *ZERO;

// Send error message - 'Value Required'
ERROR(USR1962);
MSGPARM(CTL.Date_From_USR);

ENDIF;

//?To Date required
CASE;

// IF CTL.Date To               USR is Not Entered
IF CTL.Date_To_USR = *ZERO;

// Send error message - 'Value Required'
ERROR(USR1962);
MSGPARM(CTL.Date_To_USR);

ENDIF;

//?Validate From date and To date relationship
CASE;

// IF CTL.Date From             USR GT CTL.Date To               USR
IF CTL.Date_From_USR > CTL.Date_To_USR;

// Send error message - 'From date exceeds to date.  Please re-enter.'
ERROR(USR0319);
MSGPARM(CTL.Date_From_USR);

ENDIF;

ENDIF;

//?Warehouse field validations
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Warehouse 1 required, exists, and active
CASE;

// IF CTL.Warehouse 1 USR is Not Entered
IF CTL.Warehouse_1_USR = *BLANK;

// Send error message - 'Value Required (Whse)'
ERROR(USR2791);
MSGPARM(CTL.Warehouse_1_USR);

// LCL.Error Flag            USR = CND.Yes
LCL.Error_Flag_USR = 'Y';

//?Warehouse 1 required, exists, and active
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Chk Warehouse Exists  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2178308;
PARAMETER(CTL.Warehouse_1_USR);

//?If record does not exists - Error; ELSE check Warehouse Rcd Status
CASE;

// IF NOT PGM.*Return code is *Normal
IF ! PGM.*Return_code = *BLANK;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(CTL.Warehouse_1_USR);

// LCL.Error Flag            USR = CND.Yes
LCL.Error_Flag_USR = 'Y';

//?If record does not exists - Error; ELSE check Warehouse Rcd Status
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Warehouse Info     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1910512;
PARAMETER(CTL.Warehouse_1_USR);
PARAMETER(NLL.Warehouse_Description);
PARAMETER(NLL.Address_Line_1);
PARAMETER(NLL.Address_Line_2);
PARAMETER(NLL.Address_Line_3);
PARAMETER(NLL.City);
PARAMETER(NLL.Zip_Postal_Code);
PARAMETER(NLL.Production_Warehouse_Code);
PARAMETER(NLL.State_Code);
PARAMETER(NLL.Lot_Tracking_Flag);
PARAMETER(NLL.Default_Printer);
PARAMETER(NLL.Warehouse_Type);
PARAMETER(NLL.Trans_Contol_AS400_Plant);
PARAMETER(NLL.Warehouse_Location);
PARAMETER(NLL.Warehouse_Std_Chill_Time);
PARAMETER(NLL.Warehouse_Chill_Time);
PARAMETER(NLL.Include_in_Auto_Pre_Pick);
PARAMETER(NLL.Default_Manifest_Copies);
PARAMETER(NLL.Default_Load_Sequence);
PARAMETER(NLL.WHS_Slotting_Limit_Type);
PARAMETER(NLL.Shipping_Company);
PARAMETER(NLL.Accounting_Company);
PARAMETER(NLL.WHS_Sched_Prod_Max_Days);
PARAMETER(NLL.WHS_Inventory_Chill_Time);
PARAMETER(NLL.Parent_Warehouse);
PARAMETER(NLL.Default_Shipping_Whs);
PARAMETER(NLL.WHS_Live_with_Carlisle);
PARAMETER(NLL.WHS_PFS_Interface);
PARAMETER(NLL.WHS_Req_Meter_Reading_Shp);
PARAMETER(NLL.WHS_Default_Load_Type);
PARAMETER(NLL.WHS_TMS_Planning_Region);
PARAMETER(NLL.Default_Carrier_Code);
PARAMETER(NLL.Inventory_Logic_Version);
PARAMETER(NLL.WHS_Auto_Inv_Restoration);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(LCL.Record_Status);
PARAMETER(NLL.Job_Time);
PARAMETER(NLL.User_Id);
PARAMETER(NLL.Job_Name);
PARAMETER(NLL.Job_Date);
{
 //?USER: Initialize routine

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

}


//?If Warehouse record status not active - Error; ELSE check Co/Whs
CASE;

// IF NOT LCL.Record Status is Active
IF ! LCL.Record_Status = 'A';

// Send error message - 'Warehouse &1 Inactive.'
ERROR(USR5157);
MSGPARM(CTL.Warehouse_1_USR);

// LCL.Error Flag            USR = CND.Yes
LCL.Error_Flag_USR = 'Y';

//?If Warehouse record status not active - Error; ELSE check Co/Whs
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Chk Rcd Exists for Co RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2177549;
PARAMETER(CTL.Shipping_Company);
PARAMETER(CTL.Warehouse_1_USR);

//?If Co/Warehouse relationship not found - Error
CASE;

// IF NOT PGM.*Return code is *Normal
IF ! PGM.*Return_code = *BLANK;

// Send error message - 'Warehouse &1 Invalid for Co &2.'
ERROR(USR3404);
MSGPARM(CTL.Warehouse_1_USR);
MSGPARM(CTL.Shipping_Company);

// LCL.Error Flag            USR = CND.Yes
LCL.Error_Flag_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Warehouse 2 required, exists, and active
CASE;

// IF CTL.Warehouse 2 USR is Not Entered
IF CTL.Warehouse_2_USR = *BLANK;

// Send error message - 'Value Required (Whse)'
ERROR(USR2791);
MSGPARM(CTL.Warehouse_2_USR);

// LCL.Error Flag            USR = CND.Yes
LCL.Error_Flag_USR = 'Y';

//?Warehouse 2 required, exists, and active
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Chk Warehouse Exists  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2178308;
PARAMETER(CTL.Warehouse_2_USR);

//?If record does not exists - Error; ELSE check Warehouse Rcd Status
CASE;

// IF NOT PGM.*Return code is *Normal
IF ! PGM.*Return_code = *BLANK;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(CTL.Warehouse_2_USR);

// LCL.Error Flag            USR = CND.Yes
LCL.Error_Flag_USR = 'Y';

//?If record does not exists - Error; ELSE check Warehouse Rcd Status
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Warehouse Info     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1910512;
PARAMETER(CTL.Warehouse_2_USR);
PARAMETER(NLL.Warehouse_Description);
PARAMETER(NLL.Address_Line_1);
PARAMETER(NLL.Address_Line_2);
PARAMETER(NLL.Address_Line_3);
PARAMETER(NLL.City);
PARAMETER(NLL.Zip_Postal_Code);
PARAMETER(NLL.Production_Warehouse_Code);
PARAMETER(NLL.State_Code);
PARAMETER(NLL.Lot_Tracking_Flag);
PARAMETER(NLL.Default_Printer);
PARAMETER(NLL.Warehouse_Type);
PARAMETER(NLL.Trans_Contol_AS400_Plant);
PARAMETER(NLL.Warehouse_Location);
PARAMETER(NLL.Warehouse_Std_Chill_Time);
PARAMETER(NLL.Warehouse_Chill_Time);
PARAMETER(NLL.Include_in_Auto_Pre_Pick);
PARAMETER(NLL.Default_Manifest_Copies);
PARAMETER(NLL.Default_Load_Sequence);
PARAMETER(NLL.WHS_Slotting_Limit_Type);
PARAMETER(NLL.Shipping_Company);
PARAMETER(NLL.Accounting_Company);
PARAMETER(NLL.WHS_Sched_Prod_Max_Days);
PARAMETER(NLL.WHS_Inventory_Chill_Time);
PARAMETER(NLL.Parent_Warehouse);
PARAMETER(NLL.Default_Shipping_Whs);
PARAMETER(NLL.WHS_Live_with_Carlisle);
PARAMETER(NLL.WHS_PFS_Interface);
PARAMETER(NLL.WHS_Req_Meter_Reading_Shp);
PARAMETER(NLL.WHS_Default_Load_Type);
PARAMETER(NLL.WHS_TMS_Planning_Region);
PARAMETER(NLL.Default_Carrier_Code);
PARAMETER(NLL.Inventory_Logic_Version);
PARAMETER(NLL.WHS_Auto_Inv_Restoration);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(LCL.Record_Status);
PARAMETER(NLL.Job_Time);
PARAMETER(NLL.User_Id);
PARAMETER(NLL.Job_Name);
PARAMETER(NLL.Job_Date);
{
 //?USER: Initialize routine

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

}


//?If Warehouse record status not active - Error; ELSE check Co/Whs
CASE;

// IF NOT LCL.Record Status is Active
IF ! LCL.Record_Status = 'A';

// Send error message - 'Warehouse &1 Inactive.'
ERROR(USR5157);
MSGPARM(CTL.Warehouse_2_USR);

// LCL.Error Flag            USR = CND.Yes
LCL.Error_Flag_USR = 'Y';

//?If Warehouse record status not active - Error; ELSE check Co/Whs
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Chk Rcd Exists for Co RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2177549;
PARAMETER(CTL.Shipping_Company);
PARAMETER(CTL.Warehouse_2_USR);

//?If Co/Warehouse relationship not found - Error
CASE;

// IF NOT PGM.*Return code is *Normal
IF ! PGM.*Return_code = *BLANK;

// Send error message - 'Warehouse &1 Invalid for Co &2.'
ERROR(USR3404);
MSGPARM(CTL.Warehouse_2_USR);
MSGPARM(CTL.Shipping_Company);

// LCL.Error Flag            USR = CND.Yes
LCL.Error_Flag_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?If Warehouse 3 entered, check if exists and active
CASE;

// IF CTL.Warehouse 3 USR is Entered
IF CTL.Warehouse_3_USR <> *BLANK;

EXECUTE FUNCTION(Chk Warehouse Exists  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2178308;
PARAMETER(CTL.Warehouse_3_USR);

//?If record does not exists - Error; ELSE check Warehouse Rcd Status
CASE;

// IF NOT PGM.*Return code is *Normal
IF ! PGM.*Return_code = *BLANK;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(CTL.Warehouse_3_USR);

// LCL.Error Flag            USR = CND.Yes
LCL.Error_Flag_USR = 'Y';

//?If record does not exists - Error; ELSE check Warehouse Rcd Status
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Warehouse Info     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1910512;
PARAMETER(CTL.Warehouse_3_USR);
PARAMETER(NLL.Warehouse_Description);
PARAMETER(NLL.Address_Line_1);
PARAMETER(NLL.Address_Line_2);
PARAMETER(NLL.Address_Line_3);
PARAMETER(NLL.City);
PARAMETER(NLL.Zip_Postal_Code);
PARAMETER(NLL.Production_Warehouse_Code);
PARAMETER(NLL.State_Code);
PARAMETER(NLL.Lot_Tracking_Flag);
PARAMETER(NLL.Default_Printer);
PARAMETER(NLL.Warehouse_Type);
PARAMETER(NLL.Trans_Contol_AS400_Plant);
PARAMETER(NLL.Warehouse_Location);
PARAMETER(NLL.Warehouse_Std_Chill_Time);
PARAMETER(NLL.Warehouse_Chill_Time);
PARAMETER(NLL.Include_in_Auto_Pre_Pick);
PARAMETER(NLL.Default_Manifest_Copies);
PARAMETER(NLL.Default_Load_Sequence);
PARAMETER(NLL.WHS_Slotting_Limit_Type);
PARAMETER(NLL.Shipping_Company);
PARAMETER(NLL.Accounting_Company);
PARAMETER(NLL.WHS_Sched_Prod_Max_Days);
PARAMETER(NLL.WHS_Inventory_Chill_Time);
PARAMETER(NLL.Parent_Warehouse);
PARAMETER(NLL.Default_Shipping_Whs);
PARAMETER(NLL.WHS_Live_with_Carlisle);
PARAMETER(NLL.WHS_PFS_Interface);
PARAMETER(NLL.WHS_Req_Meter_Reading_Shp);
PARAMETER(NLL.WHS_Default_Load_Type);
PARAMETER(NLL.WHS_TMS_Planning_Region);
PARAMETER(NLL.Default_Carrier_Code);
PARAMETER(NLL.Inventory_Logic_Version);
PARAMETER(NLL.WHS_Auto_Inv_Restoration);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(LCL.Record_Status);
PARAMETER(NLL.Job_Time);
PARAMETER(NLL.User_Id);
PARAMETER(NLL.Job_Name);
PARAMETER(NLL.Job_Date);
{
 //?USER: Initialize routine

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

}


//?If Warehouse record status not active - Error; ELSE check Co/Whs
CASE;

// IF NOT LCL.Record Status is Active
IF ! LCL.Record_Status = 'A';

// Send error message - 'Warehouse &1 Inactive.'
ERROR(USR5157);
MSGPARM(CTL.Warehouse_3_USR);

// LCL.Error Flag            USR = CND.Yes
LCL.Error_Flag_USR = 'Y';

//?If Warehouse record status not active - Error; ELSE check Co/Whs
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Chk Rcd Exists for Co RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2177549;
PARAMETER(CTL.Shipping_Company);
PARAMETER(CTL.Warehouse_3_USR);

//?If Co/Warehouse relationship not found - Error
CASE;

// IF NOT PGM.*Return code is *Normal
IF ! PGM.*Return_code = *BLANK;

// Send error message - 'Warehouse &1 Invalid for Co &2.'
ERROR(USR3404);
MSGPARM(CTL.Warehouse_3_USR);
MSGPARM(CTL.Shipping_Company);

// LCL.Error Flag            USR = CND.Yes
LCL.Error_Flag_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?If Warehouse 3 entered, check if exists and active
// IF CTL.Warehouse 4 USR is Entered
IF CTL.Warehouse_4_USR <> *BLANK;

// OR CTL.Warehouse 5 USR is Entered
OR CTL.Warehouse_5_USR <> *BLANK;

// OR CTL.Warehouse 6 USR is Entered
OR CTL.Warehouse_6_USR <> *BLANK;

// Send error message - 'Warehouse &2 field cannot be blank.'
ERROR(USR5152);
MSGPARM(CTL.Warehouse_3_USR);
MSGPARM(3);

ENDIF;

//?If Warehouse 4 entered, check if exists and active
CASE;

// IF CTL.Warehouse 4 USR is Entered
IF CTL.Warehouse_4_USR <> *BLANK;

EXECUTE FUNCTION(Chk Warehouse Exists  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2178308;
PARAMETER(CTL.Warehouse_4_USR);

//?If record does not exists - Error; ELSE check Warehouse Rcd Status
CASE;

// IF NOT PGM.*Return code is *Normal
IF ! PGM.*Return_code = *BLANK;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(CTL.Warehouse_4_USR);

// LCL.Error Flag            USR = CND.Yes
LCL.Error_Flag_USR = 'Y';

//?If record does not exists - Error; ELSE check Warehouse Rcd Status
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Warehouse Info     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1910512;
PARAMETER(CTL.Warehouse_4_USR);
PARAMETER(NLL.Warehouse_Description);
PARAMETER(NLL.Address_Line_1);
PARAMETER(NLL.Address_Line_2);
PARAMETER(NLL.Address_Line_3);
PARAMETER(NLL.City);
PARAMETER(NLL.Zip_Postal_Code);
PARAMETER(NLL.Production_Warehouse_Code);
PARAMETER(NLL.State_Code);
PARAMETER(NLL.Lot_Tracking_Flag);
PARAMETER(NLL.Default_Printer);
PARAMETER(NLL.Warehouse_Type);
PARAMETER(NLL.Trans_Contol_AS400_Plant);
PARAMETER(NLL.Warehouse_Location);
PARAMETER(NLL.Warehouse_Std_Chill_Time);
PARAMETER(NLL.Warehouse_Chill_Time);
PARAMETER(NLL.Include_in_Auto_Pre_Pick);
PARAMETER(NLL.Default_Manifest_Copies);
PARAMETER(NLL.Default_Load_Sequence);
PARAMETER(NLL.WHS_Slotting_Limit_Type);
PARAMETER(NLL.Shipping_Company);
PARAMETER(NLL.Accounting_Company);
PARAMETER(NLL.WHS_Sched_Prod_Max_Days);
PARAMETER(NLL.WHS_Inventory_Chill_Time);
PARAMETER(NLL.Parent_Warehouse);
PARAMETER(NLL.Default_Shipping_Whs);
PARAMETER(NLL.WHS_Live_with_Carlisle);
PARAMETER(NLL.WHS_PFS_Interface);
PARAMETER(NLL.WHS_Req_Meter_Reading_Shp);
PARAMETER(NLL.WHS_Default_Load_Type);
PARAMETER(NLL.WHS_TMS_Planning_Region);
PARAMETER(NLL.Default_Carrier_Code);
PARAMETER(NLL.Inventory_Logic_Version);
PARAMETER(NLL.WHS_Auto_Inv_Restoration);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(LCL.Record_Status);
PARAMETER(NLL.Job_Time);
PARAMETER(NLL.User_Id);
PARAMETER(NLL.Job_Name);
PARAMETER(NLL.Job_Date);
{
 //?USER: Initialize routine

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

}


//?If Warehouse record status not active - Error; ELSE check Co/Whs
CASE;

// IF NOT LCL.Record Status is Active
IF ! LCL.Record_Status = 'A';

// Send error message - 'Warehouse &1 Inactive.'
ERROR(USR5157);
MSGPARM(CTL.Warehouse_4_USR);

// LCL.Error Flag            USR = CND.Yes
LCL.Error_Flag_USR = 'Y';

//?If Warehouse record status not active - Error; ELSE check Co/Whs
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Chk Rcd Exists for Co RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2177549;
PARAMETER(CTL.Shipping_Company);
PARAMETER(CTL.Warehouse_4_USR);

//?If Co/Warehouse relationship not found - Error
CASE;

// IF NOT PGM.*Return code is *Normal
IF ! PGM.*Return_code = *BLANK;

// Send error message - 'Warehouse &1 Invalid for Co &2.'
ERROR(USR3404);
MSGPARM(CTL.Warehouse_4_USR);
MSGPARM(CTL.Shipping_Company);

// LCL.Error Flag            USR = CND.Yes
LCL.Error_Flag_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?If Warehouse 4 entered, check if exists and active
// IF CTL.Warehouse 5 USR is Entered
IF CTL.Warehouse_5_USR <> *BLANK;

// OR CTL.Warehouse 6 USR is Entered
OR CTL.Warehouse_6_USR <> *BLANK;

// Send error message - 'Warehouse &2 field cannot be blank.'
ERROR(USR5152);
MSGPARM(CTL.Warehouse_4_USR);
MSGPARM(4);

ENDIF;

//?If Warehouse 5 entered, check if exists and active
CASE;

// IF CTL.Warehouse 5 USR is Entered
IF CTL.Warehouse_5_USR <> *BLANK;

EXECUTE FUNCTION(Chk Warehouse Exists  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2178308;
PARAMETER(CTL.Warehouse_5_USR);

//?If record does not exists - Error; ELSE check Warehouse Rcd Status
CASE;

// IF NOT PGM.*Return code is *Normal
IF ! PGM.*Return_code = *BLANK;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(CTL.Warehouse_5_USR);

// LCL.Error Flag            USR = CND.Yes
LCL.Error_Flag_USR = 'Y';

//?If record does not exists - Error; ELSE check Warehouse Rcd Status
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Warehouse Info     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1910512;
PARAMETER(CTL.Warehouse_5_USR);
PARAMETER(NLL.Warehouse_Description);
PARAMETER(NLL.Address_Line_1);
PARAMETER(NLL.Address_Line_2);
PARAMETER(NLL.Address_Line_3);
PARAMETER(NLL.City);
PARAMETER(NLL.Zip_Postal_Code);
PARAMETER(NLL.Production_Warehouse_Code);
PARAMETER(NLL.State_Code);
PARAMETER(NLL.Lot_Tracking_Flag);
PARAMETER(NLL.Default_Printer);
PARAMETER(NLL.Warehouse_Type);
PARAMETER(NLL.Trans_Contol_AS400_Plant);
PARAMETER(NLL.Warehouse_Location);
PARAMETER(NLL.Warehouse_Std_Chill_Time);
PARAMETER(NLL.Warehouse_Chill_Time);
PARAMETER(NLL.Include_in_Auto_Pre_Pick);
PARAMETER(NLL.Default_Manifest_Copies);
PARAMETER(NLL.Default_Load_Sequence);
PARAMETER(NLL.WHS_Slotting_Limit_Type);
PARAMETER(NLL.Shipping_Company);
PARAMETER(NLL.Accounting_Company);
PARAMETER(NLL.WHS_Sched_Prod_Max_Days);
PARAMETER(NLL.WHS_Inventory_Chill_Time);
PARAMETER(NLL.Parent_Warehouse);
PARAMETER(NLL.Default_Shipping_Whs);
PARAMETER(NLL.WHS_Live_with_Carlisle);
PARAMETER(NLL.WHS_PFS_Interface);
PARAMETER(NLL.WHS_Req_Meter_Reading_Shp);
PARAMETER(NLL.WHS_Default_Load_Type);
PARAMETER(NLL.WHS_TMS_Planning_Region);
PARAMETER(NLL.Default_Carrier_Code);
PARAMETER(NLL.Inventory_Logic_Version);
PARAMETER(NLL.WHS_Auto_Inv_Restoration);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(LCL.Record_Status);
PARAMETER(NLL.Job_Time);
PARAMETER(NLL.User_Id);
PARAMETER(NLL.Job_Name);
PARAMETER(NLL.Job_Date);
{
 //?USER: Initialize routine

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

}


//?If Warehouse record status not active - Error; ELSE check Co/Whs
CASE;

// IF NOT LCL.Record Status is Active
IF ! LCL.Record_Status = 'A';

// Send error message - 'Warehouse &1 Inactive.'
ERROR(USR5157);
MSGPARM(CTL.Warehouse_5_USR);

// LCL.Error Flag            USR = CND.Yes
LCL.Error_Flag_USR = 'Y';

//?If Warehouse record status not active - Error; ELSE check Co/Whs
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Chk Rcd Exists for Co RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2177549;
PARAMETER(CTL.Shipping_Company);
PARAMETER(CTL.Warehouse_5_USR);

//?If Co/Warehouse relationship not found - Error
CASE;

// IF NOT PGM.*Return code is *Normal
IF ! PGM.*Return_code = *BLANK;

// Send error message - 'Warehouse &1 Invalid for Co &2.'
ERROR(USR3404);
MSGPARM(CTL.Warehouse_5_USR);
MSGPARM(CTL.Shipping_Company);

// LCL.Error Flag            USR = CND.Yes
LCL.Error_Flag_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?If Warehouse 5 entered, check if exists and active
// IF CTL.Warehouse 6 USR is Entered
IF CTL.Warehouse_6_USR <> *BLANK;

// Send error message - 'Warehouse &2 field cannot be blank.'
ERROR(USR5152);
MSGPARM(CTL.Warehouse_5_USR);
MSGPARM(5);

ENDIF;

//?If Warehouse 6 entered, check if exists and active
CASE;

// IF CTL.Warehouse 6 USR is Entered
IF CTL.Warehouse_6_USR <> *BLANK;

EXECUTE FUNCTION(Chk Warehouse Exists  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2178308;
PARAMETER(CTL.Warehouse_6_USR);

//?If record does not exists - Error; ELSE check Warehouse Rcd Status
CASE;

// IF NOT PGM.*Return code is *Normal
IF ! PGM.*Return_code = *BLANK;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(CTL.Warehouse_6_USR);

// LCL.Error Flag            USR = CND.Yes
LCL.Error_Flag_USR = 'Y';

//?If record does not exists - Error; ELSE check Warehouse Rcd Status
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Warehouse Info     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1910512;
PARAMETER(CTL.Warehouse_6_USR);
PARAMETER(NLL.Warehouse_Description);
PARAMETER(NLL.Address_Line_1);
PARAMETER(NLL.Address_Line_2);
PARAMETER(NLL.Address_Line_3);
PARAMETER(NLL.City);
PARAMETER(NLL.Zip_Postal_Code);
PARAMETER(NLL.Production_Warehouse_Code);
PARAMETER(NLL.State_Code);
PARAMETER(NLL.Lot_Tracking_Flag);
PARAMETER(NLL.Default_Printer);
PARAMETER(NLL.Warehouse_Type);
PARAMETER(NLL.Trans_Contol_AS400_Plant);
PARAMETER(NLL.Warehouse_Location);
PARAMETER(NLL.Warehouse_Std_Chill_Time);
PARAMETER(NLL.Warehouse_Chill_Time);
PARAMETER(NLL.Include_in_Auto_Pre_Pick);
PARAMETER(NLL.Default_Manifest_Copies);
PARAMETER(NLL.Default_Load_Sequence);
PARAMETER(NLL.WHS_Slotting_Limit_Type);
PARAMETER(NLL.Shipping_Company);
PARAMETER(NLL.Accounting_Company);
PARAMETER(NLL.WHS_Sched_Prod_Max_Days);
PARAMETER(NLL.WHS_Inventory_Chill_Time);
PARAMETER(NLL.Parent_Warehouse);
PARAMETER(NLL.Default_Shipping_Whs);
PARAMETER(NLL.WHS_Live_with_Carlisle);
PARAMETER(NLL.WHS_PFS_Interface);
PARAMETER(NLL.WHS_Req_Meter_Reading_Shp);
PARAMETER(NLL.WHS_Default_Load_Type);
PARAMETER(NLL.WHS_TMS_Planning_Region);
PARAMETER(NLL.Default_Carrier_Code);
PARAMETER(NLL.Inventory_Logic_Version);
PARAMETER(NLL.WHS_Auto_Inv_Restoration);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(LCL.Record_Status);
PARAMETER(NLL.Job_Time);
PARAMETER(NLL.User_Id);
PARAMETER(NLL.Job_Name);
PARAMETER(NLL.Job_Date);
{
 //?USER: Initialize routine

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

}


//?If Warehouse record status not active - Error; ELSE check Co/Whs
CASE;

// IF NOT LCL.Record Status is Active
IF ! LCL.Record_Status = 'A';

// Send error message - 'Warehouse &1 Inactive.'
ERROR(USR5157);
MSGPARM(CTL.Warehouse_6_USR);

// LCL.Error Flag            USR = CND.Yes
LCL.Error_Flag_USR = 'Y';

//?If Warehouse record status not active - Error; ELSE check Co/Whs
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Chk Rcd Exists for Co RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2177549;
PARAMETER(CTL.Shipping_Company);
PARAMETER(CTL.Warehouse_6_USR);

//?If Co/Warehouse relationship not found - Error
CASE;

// IF NOT PGM.*Return code is *Normal
IF ! PGM.*Return_code = *BLANK;

// Send error message - 'Warehouse &1 Invalid for Co &2.'
ERROR(USR3404);
MSGPARM(CTL.Warehouse_6_USR);
MSGPARM(CTL.Shipping_Company);

// LCL.Error Flag            USR = CND.Yes
LCL.Error_Flag_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Check warehouses 1 thru 6 duplicate entries validation
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Load Multi-Stop Whses IF) TYPE(EXCINTFUN)                      AC2177645;
PARAMETER(CTL.Warehouse_1_USR);
PARAMETER(CTL.Warehouse_2_USR);
PARAMETER(CTL.Warehouse_3_USR);
PARAMETER(CTL.Warehouse_4_USR);
PARAMETER(CTL.Warehouse_5_USR);
PARAMETER(CTL.Warehouse_6_USR);
PARAMETER(LCL.Text_18_USR);
{
 //?Execute internal function

 // PAR.Text-18               USR = CON.*BLANK
 PAR.Text_18_USR = *BLANK;

 // LCL.Text-18               USR = CONCAT(PAR.Warehouse 1 USR,PAR.Warehouse 2 USR,CND.*None)
 LCL.Text_18_USR = PAR.Warehouse_1_USR + PAR.Warehouse_2_USR (*ZERO);

 // LCL.Text-18               USR = CONCAT(LCL.Text-18               USR,PAR.Warehouse 3 USR,CND.*No
 LCL.Text_18_USR = LCL.Text_18_USR + PAR.Warehouse_3_USR (*ZERO);

 // LCL.Text-18               USR = CONCAT(LCL.Text-18               USR,PAR.Warehouse 4 USR,CND.*No
 LCL.Text_18_USR = LCL.Text_18_USR + PAR.Warehouse_4_USR (*ZERO);

 // LCL.Text-18               USR = CONCAT(LCL.Text-18               USR,PAR.Warehouse 5 USR,CND.*No
 LCL.Text_18_USR = LCL.Text_18_USR + PAR.Warehouse_5_USR (*ZERO);

 // PAR.Text-18               USR = CONCAT(LCL.Text-18               USR,PAR.Warehouse 6 USR,CND.*No
 PAR.Text_18_USR = LCL.Text_18_USR + PAR.Warehouse_6_USR (*ZERO);

}


//?Check Warehouse 1 for duplicates
CASE;

// IF CTL.Warehouse 1 USR is Entered
IF CTL.Warehouse_1_USR <> *BLANK;

// LCL.Index = CON.1
LCL.Index = 1;

// LCL.Counter = CON.*ZERO
LCL.Counter = *ZERO;

//?Loop through warehouses 1 thru 6 to check for duplicates
// DOW LCL.Index is LE 18
DOW LCL.Index <= 18;

// LCL.Warehouse Code = SUBSTRING(LCL.Text-18               USR,LCL.Index,CON.3)
LCL.Warehouse_Code = SUBSTRING(LCL.Text_18_USR:LCL.Index:3);

//?If substringed warehouse code = Warehouse 1, increment counter
CASE;

// IF LCL.Warehouse Code is Blanks
IF LCL.Warehouse_Code = *BLANK;

//?Do not check blank warehouse codes
//?If substringed warehouse code = Warehouse 1, increment counter
// IF LCL.Warehouse Code EQ CTL.Warehouse 1 USR
IF LCL.Warehouse_Code = CTL.Warehouse_1_USR;

// LCL.Counter = LCL.Counter + CON.1
LCL.Counter = LCL.Counter + 1;

ENDIF;

// LCL.Index = LCL.Index + CON.3
LCL.Index = LCL.Index + 3;

ENDDO;

//?Error if more than 1 entry with the same warehouse code
CASE;

// IF LCL.Counter is GE 2
IF LCL.Counter >= 2;

// Send error message - 'Warehouse &1 entered more than once.  Remove duplicate warehouse.'
ERROR(USR5154);
MSGPARM(CTL.Warehouse_1_USR);

ENDIF;

ENDIF;

//?Check Warehouse 2 for duplicates
CASE;

// IF CTL.Warehouse 2 USR is Entered
IF CTL.Warehouse_2_USR <> *BLANK;

// LCL.Index = CON.1
LCL.Index = 1;

// LCL.Counter = CON.*ZERO
LCL.Counter = *ZERO;

//?Loop through warehouses 1 thru 6 to check for duplicates
// DOW LCL.Index is LE 18
DOW LCL.Index <= 18;

// LCL.Warehouse Code = SUBSTRING(LCL.Text-18               USR,LCL.Index,CON.3)
LCL.Warehouse_Code = SUBSTRING(LCL.Text_18_USR:LCL.Index:3);

//?If substringed warehouse code = Warehouse 2, increment counter
CASE;

// IF LCL.Warehouse Code is Blanks
IF LCL.Warehouse_Code = *BLANK;

//?Do not check blank warehouse codes
//?If substringed warehouse code = Warehouse 2, increment counter
// IF LCL.Warehouse Code EQ CTL.Warehouse 2 USR
IF LCL.Warehouse_Code = CTL.Warehouse_2_USR;

// LCL.Counter = LCL.Counter + CON.1
LCL.Counter = LCL.Counter + 1;

ENDIF;

// LCL.Index = LCL.Index + CON.3
LCL.Index = LCL.Index + 3;

ENDDO;

//?Error if more than 1 entry with the same warehouse code
CASE;

// IF LCL.Counter is GE 2
IF LCL.Counter >= 2;

// Send error message - 'Warehouse &1 entered more than once.  Remove duplicate warehouse.'
ERROR(USR5154);
MSGPARM(CTL.Warehouse_2_USR);

ENDIF;

ENDIF;

//?Check Warehouse 3 for duplicates
CASE;

// IF CTL.Warehouse 3 USR is Entered
IF CTL.Warehouse_3_USR <> *BLANK;

// LCL.Index = CON.1
LCL.Index = 1;

// LCL.Counter = CON.*ZERO
LCL.Counter = *ZERO;

//?Loop through warehouses 1 thru 6 to check for duplicates
// DOW LCL.Index is LE 18
DOW LCL.Index <= 18;

// LCL.Warehouse Code = SUBSTRING(LCL.Text-18               USR,LCL.Index,CON.3)
LCL.Warehouse_Code = SUBSTRING(LCL.Text_18_USR:LCL.Index:3);

//?If substringed warehouse code = Warehouse 1, increment counter
CASE;

// IF LCL.Warehouse Code is Blanks
IF LCL.Warehouse_Code = *BLANK;

//?Do not check blank warehouse codes
//?If substringed warehouse code = Warehouse 1, increment counter
// IF LCL.Warehouse Code EQ CTL.Warehouse 3 USR
IF LCL.Warehouse_Code = CTL.Warehouse_3_USR;

// LCL.Counter = LCL.Counter + CON.1
LCL.Counter = LCL.Counter + 1;

ENDIF;

// LCL.Index = LCL.Index + CON.3
LCL.Index = LCL.Index + 3;

ENDDO;

//?Error if more than 1 entry with the same warehouse code
CASE;

// IF LCL.Counter is GE 2
IF LCL.Counter >= 2;

// Send error message - 'Warehouse &1 entered more than once.  Remove duplicate warehouse.'
ERROR(USR5154);
MSGPARM(CTL.Warehouse_3_USR);

ENDIF;

ENDIF;

//?Check Warehouse 4 for duplicates
CASE;

// IF CTL.Warehouse 4 USR is Entered
IF CTL.Warehouse_4_USR <> *BLANK;

// LCL.Index = CON.1
LCL.Index = 1;

// LCL.Counter = CON.*ZERO
LCL.Counter = *ZERO;

//?Loop through warehouses 1 thru 6 to check for duplicates
// DOW LCL.Index is LE 18
DOW LCL.Index <= 18;

// LCL.Warehouse Code = SUBSTRING(LCL.Text-18               USR,LCL.Index,CON.3)
LCL.Warehouse_Code = SUBSTRING(LCL.Text_18_USR:LCL.Index:3);

//?If substringed warehouse code = Warehouse 1, increment counter
CASE;

// IF LCL.Warehouse Code is Blanks
IF LCL.Warehouse_Code = *BLANK;

//?Do not check blank warehouse codes
//?If substringed warehouse code = Warehouse 1, increment counter
// IF LCL.Warehouse Code EQ CTL.Warehouse 4 USR
IF LCL.Warehouse_Code = CTL.Warehouse_4_USR;

// LCL.Counter = LCL.Counter + CON.1
LCL.Counter = LCL.Counter + 1;

ENDIF;

// LCL.Index = LCL.Index + CON.3
LCL.Index = LCL.Index + 3;

ENDDO;

//?Error if more than 1 entry with the same warehouse code
CASE;

// IF LCL.Counter is GE 2
IF LCL.Counter >= 2;

// Send error message - 'Warehouse &1 entered more than once.  Remove duplicate warehouse.'
ERROR(USR5154);
MSGPARM(CTL.Warehouse_4_USR);

ENDIF;

ENDIF;

//?Check Warehouse 5 for duplicates
CASE;

// IF CTL.Warehouse 5 USR is Entered
IF CTL.Warehouse_5_USR <> *BLANK;

// LCL.Index = CON.1
LCL.Index = 1;

// LCL.Counter = CON.*ZERO
LCL.Counter = *ZERO;

//?Loop through warehouses 1 thru 6 to check for duplicates
// DOW LCL.Index is LE 18
DOW LCL.Index <= 18;

// LCL.Warehouse Code = SUBSTRING(LCL.Text-18               USR,LCL.Index,CON.3)
LCL.Warehouse_Code = SUBSTRING(LCL.Text_18_USR:LCL.Index:3);

//?If substringed warehouse code = Warehouse 1, increment counter
CASE;

// IF LCL.Warehouse Code is Blanks
IF LCL.Warehouse_Code = *BLANK;

//?Do not check blank warehouse codes
//?If substringed warehouse code = Warehouse 1, increment counter
// IF LCL.Warehouse Code EQ CTL.Warehouse Code
IF LCL.Warehouse_Code = CTL.Warehouse_Code;

// LCL.Counter = LCL.Counter + CON.1
LCL.Counter = LCL.Counter + 1;

ENDIF;

// LCL.Index = LCL.Index + CON.3
LCL.Index = LCL.Index + 3;

ENDDO;

//?Error if more than 1 entry with the same warehouse code
CASE;

// IF LCL.Counter is GE 2
IF LCL.Counter >= 2;

// Send error message - 'Warehouse &1 entered more than once.  Remove duplicate warehouse.'
ERROR(USR5154);
MSGPARM(CTL.Warehouse_5_USR);

ENDIF;

ENDIF;

//?Check Warehouse 6 for duplicates
CASE;

// IF CTL.Warehouse 6 USR is Entered
IF CTL.Warehouse_6_USR <> *BLANK;

// LCL.Index = CON.1
LCL.Index = 1;

// LCL.Counter = CON.*ZERO
LCL.Counter = *ZERO;

//?Loop through warehouses 1 thru 6 to check for duplicates
// DOW LCL.Index is LE 18
DOW LCL.Index <= 18;

// LCL.Warehouse Code = SUBSTRING(LCL.Text-18               USR,LCL.Index,CON.3)
LCL.Warehouse_Code = SUBSTRING(LCL.Text_18_USR:LCL.Index:3);

//?If substringed warehouse code = Warehouse 1, increment counter
CASE;

// IF LCL.Warehouse Code is Blanks
IF LCL.Warehouse_Code = *BLANK;

//?Do not check blank warehouse codes
//?If substringed warehouse code = Warehouse 1, increment counter
// IF LCL.Warehouse Code EQ CTL.Warehouse 6 USR
IF LCL.Warehouse_Code = CTL.Warehouse_6_USR;

// LCL.Counter = LCL.Counter + CON.1
LCL.Counter = LCL.Counter + 1;

ENDIF;

// LCL.Index = LCL.Index + CON.3
LCL.Index = LCL.Index + 3;

ENDDO;

//?Error if more than 1 entry with the same warehouse code
CASE;

// IF LCL.Counter is GE 2
IF LCL.Counter >= 2;

// Send error message - 'Warehouse &1 entered more than once.  Remove duplicate warehouse.'
ERROR(USR5154);
MSGPARM(CTL.Warehouse_6_USR);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?State Code validation
CASE;

// IF CTL.State Code is State code not Blanks
IF CTL.State_Code <> *BLANK;

EXECUTE FUNCTION(RTV Validate State Cd  RT) TYPE(RTVOBJ) FILE(CAACREP)          AC1201475;
PARAMETER(CTL.State_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


//?If record not found, send error message
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Invalid State &1'
ERROR(USR3299);
MSGPARM(CTL.State_Code);

ENDIF;

ENDIF;

//?USER: Process subfile control (Post-confirm)

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Multi-Stop Seaboard Whs');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);
PARAMETER(*MISSING);
PARAMETER(1);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

//?Submit job for Print
// Call program Prt Multi-Stop SbdWhs CL.
SBMJOB;
CALL PROGRAM(Prt Multi-Stop SbdWhs CL) ('PPDNUPR');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(CTL.Shipping_Company);
PARAMETER(CTL.Date_From_USR);
PARAMETER(CTL.Date_To_USR);
PARAMETER(CTL.Warehouse_1_USR);
PARAMETER(CTL.Warehouse_2_USR);
PARAMETER(CTL.Warehouse_3_USR);
PARAMETER(CTL.Warehouse_4_USR);
PARAMETER(CTL.Warehouse_5_USR);
PARAMETER(CTL.Warehouse_6_USR);
SBMJOBOVR JOB(MULTISTOPS);
SBMJOBEND;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

