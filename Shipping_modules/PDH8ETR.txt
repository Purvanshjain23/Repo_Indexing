// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDH8ETR
// ?Date: 14.08.2025 Time: 03:34:47
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);

//?USER: Load existing header

EXECUTE FUNCTION(RTV Desc,U/Ms,CWT,PrcM RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1315777;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Description_Line_One);
PARAMETER(WRK.Description_Line_Two);
PARAMETER(WRK.UOM_Primary);
PARAMETER(WRK.Conversion_Factor_1);
PARAMETER(WRK.Operation_Factor_1);
PARAMETER(WRK.UOM_Second);
PARAMETER(WRK.Conversion_Factor_2);
PARAMETER(WRK.Operation_Factor_2);
PARAMETER(WRK.UOM_Third);
PARAMETER(WRK.UOM_Pricing);
PARAMETER(PAR.Unit_Weight);
PARAMETER(WRK.Production_Date_Control);
PARAMETER(PAR.Catch_Weight_Status);
PARAMETER(WRK.Default_Commod_Mark_basis);
PARAMETER(WRK.Price_Method_Default);

//?USER: Initialize subfile record (old record)

EXECUTE FUNCTION(Rtv Lot/Loc/Lvl Qty   RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC1510089;
PARAMETER(DB2.Company_Number);
PARAMETER(DB2.Item_Code);
PARAMETER(DB2.Warehouse_Code);
PARAMETER(DB2.Production_Date);
PARAMETER(DB2.Lot_Number);
PARAMETER(DB2.Location_Code);
PARAMETER(DB2.Location_Level);
PARAMETER(RCD.ILL_Item_Qty_On_Hand);
PARAMETER(WRK.ILL_Avail_Ship_Date);
PARAMETER(WRK.ILL_Unused_Date_1);
PARAMETER(WRK.ILL_Status);
PARAMETER(WRK.Inv_Hold_Reason_Code);
PARAMETER(WRK.Record_Found_USR);

CASE;

// IF DB2.OIA Alloc/Shipped Wgt is Equal to zero
IF DB2.OIA_Alloc_Shipped_Wgt = *ZERO;

//?Calculate Shipped Weight for Standard Weight Items.
CASE;

// IF PAR.Catch Weight Status is Not Yes
IF PAR.Catch_Weight_Status = *BLANK/'N';

// RCD.OIA Alloc/Shipped Wgt = RCD.OIA Alloc/Shipped Qty * PAR.Unit Weight *Rounded
RCD.OIA_Alloc_Shipped_Wgt = RCD.OIA_Alloc_Shipped_Qty * PAR.Unit_Weight 'H';

ENDIF;

ENDIF;

// RCD.Display Flag = CND.No
RCD.Display_Flag = 'N';

// RCD.Condition Name 10 USR = Condition name of RCD.OIA Allocation Sts
RCD.Condition_Name_10_USR = RTVCND(RCD.OIA_Allocation_Sts);

//?USER: Initialize subfile record (new record)

// RCD.Display Flag = CND.Yes
RCD.Display_Flag = 'Y';

// RCD.OIA Allocation Sts = CND.Allocated
RCD.OIA_Allocation_Sts = 'A';

// RCD.OIA Modified Sts = CND.no
RCD.OIA_Modified_Sts = 'N';

// RCD.OIA Create Sts = CND.Manual
RCD.OIA_Create_Sts = 'M';

// RCD.Company Number = CTL.Company Number
RCD.Company_Number = CTL.Company_Number;

// RCD.Item Code = CTL.Item Code
RCD.Item_Code = CTL.Item_Code;

// RCD.Warehouse Code = CTL.Warehouse Code
RCD.Warehouse_Code = CTL.Warehouse_Code;

//?USER: Validate header non-key relations

EXECUTE FUNCTION(Clr Shp Item Lot Loc  DL) TYPE(DLTOBJ) ARRAY(ARY_Shp_Item_Lot_LAC1540055;

//?USER: Validate subfile record fields

// PAR.Process Post USR = CND.no
PAR.Process_Post_USR = 'N';

//?Validate Shipped Quantity.
CASE;

// IF RCD.OIA Alloc/Shipped Qty is EQ Zero
IF RCD.OIA_Alloc_Shipped_Qty = *ZERO;

// Send error message - 'Quantity is required.'
ERROR(USR0394);
MSGPARM(RCD.OIA_Alloc_Shipped_Qty);

//?Validate Shipped Quantity.
// IF RCD.OIA Alloc/Shipped Qty is LT Zero
IF RCD.OIA_Alloc_Shipped_Qty < *ZERO;

// Send error message - 'Quantity cannot be negative.'
ERROR(USR0416);
MSGPARM(RCD.OIA_Alloc_Shipped_Qty);

ENDIF;

//?Calculate Shipped Weight for Standard Weight Items.
CASE;

// IF PAR.Catch Weight Status is Not Yes
IF PAR.Catch_Weight_Status = *BLANK/'N';

// RCD.OIA Alloc/Shipped Wgt = RCD.OIA Alloc/Shipped Qty * PAR.Unit Weight *Rounded
RCD.OIA_Alloc_Shipped_Wgt = RCD.OIA_Alloc_Shipped_Qty * PAR.Unit_Weight 'H';

ENDIF;

//?Select Lot/Location
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> RCD.Production Date
IF PGM.*Cursor_field = RCD.Production_Date;

// OR PGM.*Cursor field <IS> RCD.Lot Number
OR PGM.*Cursor_field = RCD.Lot_Number;

// OR PGM.*Cursor field <IS> RCD.Location Code
OR PGM.*Cursor_field = RCD.Location_Code;

// OR PGM.*Cursor field <IS> RCD.Location Level
OR PGM.*Cursor_field = RCD.Location_Level;

// Call program Sel Item Lot/Location SR.
CALL PROGRAM(Sel Item Lot/Location SR) ('PDKUSRR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Lot_Number);
PARAMETER(RCD.Location_Code);
PARAMETER(RCD.Location_Level);

ENDIF;

ENDIF;

CASE;

// IF RCD.Production Date is not entered
IF RCD.Production_Date = *ZERO;

EXECUTE FUNCTION(Rtv Prod Date         RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC1515398;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Lot_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Location_Code);
PARAMETER(RCD.Production_Date);

ENDIF;

EXECUTE FUNCTION(Upd Shp Item Lot Loc  RT) TYPE(RTVOBJ) ARRAY(ARY_Shp_Item_Lot_LAC1540056;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Lot_Number);
PARAMETER(RCD.Location_Code);
PARAMETER(RCD.Location_Level);

//?Error if already exist.
CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// Send error message - 'Item Lot Location already exists.'
ERROR(USR2795);
MSGPARM(RCD.Lot_Number);
MSGPARM(RCD.Location_Code);
MSGPARM(RCD.Location_Level);

QUIT;

ENDIF;

EXECUTE FUNCTION(Val Lot/Loc Lvl Exist RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC1510098;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Lot_Number);
PARAMETER(RCD.Location_Code);
PARAMETER(RCD.Location_Level);
PARAMETER(RCD.ILL_Item_Qty_On_Hand);
PARAMETER(WRK.Record_Found_USR);

CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// Send error message - 'Item Lot Location does not exist.'
ERROR(USR2703);
MSGPARM(RCD.Production_Date);
MSGPARM(RCD.Lot_Number);
MSGPARM(RCD.Location_Code);
MSGPARM(RCD.ILL_Location_Level);

// IF RCD.OIA Alloc/Shipped Qty GT RCD.ILL Item Qty On-Hand
IF RCD.OIA_Alloc_Shipped_Qty > RCD.ILL_Item_Qty_On_Hand;

// Send error message - 'Shipped Quantity is greater than On-Hand Quantity.'
ERROR(USR2794);
MSGPARM(RCD.OIA_Alloc_Shipped_Qty);
MSGPARM(RCD.ILL_Item_Qty_On_Hand);

ENDIF;

//?CALC: Subfile record function fields

CTL.Weight_Scheduled_SUM = SUM(RCD.OIA_Alloc_Shipped_Wgt);

CTL.Quantity_Loc_On_Hand_SUM = SUM(RCD.OIA_Alloc_Shipped_Qty);

//?USER: Change header DBF record

EXECUTE FUNCTION(Chg Order Detail NULL IF) TYPE(EXCINTFUN) FILE(OPBGWKP)        AC1506118;

//?USER: Delete detail DBF record

EXECUTE FUNCTION(Del Order Inv Alloc   DL) TYPE(DLTOBJ) FILE(PDL8CPP)           AC1505797;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Allocation_Seq_#);

//?USER: Change detail DBF record

EXECUTE FUNCTION(Chg Order Inv Alloc   CH) TYPE(CHGOBJ) FILE(PDL8CPP)           AC1505796;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Allocation_Seq_#);
PARAMETER(RCD.OIA_Alloc_Shipped_Qty);
PARAMETER(RCD.OIA_Alloc_Shipped_Wgt);
PARAMETER(RCD.OIA_Co_Packer_Lot_Num);
PARAMETER(RCD.OIA_Serial_Number);
PARAMETER(RCD.OIA_Create_Sts);
PARAMETER(RCD.OIA_Modified_Sts);
PARAMETER(RCD.OIA_Allocation_Sts);
PARAMETER(RCD.OIA_Loc_Pick_Sts);
PARAMETER(RCD.OIA_Unused_Sts_1);
PARAMETER(RCD.OIA_Unused_Sts_2);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Lot_Number);
PARAMETER(RCD.Location_Code);
PARAMETER(RCD.Location_Level);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Job_Time);
PARAMETER(RCD.User_Id);
PARAMETER(RCD.Job_Name);
PARAMETER(RCD.Job_Date);

//?USER: Create detail DBF record

EXECUTE FUNCTION(Crt Order Inv Alloc   IF) TYPE(EXCINTFUN) FILE(PDL8CPP)        AC1506139;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.OIA_Alloc_Shipped_Qty);
PARAMETER(RCD.OIA_Alloc_Shipped_Wgt);
PARAMETER(RCD.OIA_Co_Packer_Lot_Num);
PARAMETER(RCD.OIA_Serial_Number);
PARAMETER(RCD.OIA_Create_Sts);
PARAMETER(RCD.OIA_Modified_Sts);
PARAMETER(RCD.OIA_Allocation_Sts);
PARAMETER(RCD.OIA_Loc_Pick_Sts);
PARAMETER(RCD.OIA_Unused_Sts_1);
PARAMETER(RCD.OIA_Unused_Sts_2);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Lot_Number);
PARAMETER(RCD.Location_Code);
PARAMETER(RCD.Location_Level);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Job_Time);
PARAMETER(RCD.User_Id);
PARAMETER(RCD.Job_Name);
PARAMETER(RCD.Job_Date);

//?USER: Process detail record

// PAR.Process Post USR = CND.yes
PAR.Process_Post_USR = 'Y';

//?USER: Process command keys

//?Zero Qty Toggle
CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

//?Delete Manifest Detail
EXECUTE FUNCTION(Del Manifest Detail   RT) TYPE(RTVOBJ) FILE(OMFNCPP)           AC1513179;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);

EXECUTE FUNCTION(Del OrdDtl Inv Alloc  RT) TYPE(RTVOBJ) FILE(PDL8CPP)           AC1513139;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);

//?R11974 DN 10/31/17-Allow to Update 'Manifest Net Weight - Kg'.
EXECUTE FUNCTION(Crt Manifest Detail   IF) TYPE(EXCINTFUN)                      AC1513153;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(*ZERO);

// PAR.USR Case Quantity = CTL.Quantity Loc On-Hand SUM
PAR.USR_Case_Quantity = CTL.Quantity_Loc_On_Hand_SUM;

// PAR.USR Case Weight = CTL.Weight Scheduled SUM
PAR.USR_Case_Weight = CTL.Weight_Scheduled_SUM;

// WRK.Detail Line Status Last = CTL.Detail Line Status
WRK.Detail_Line_Status_Last = CTL.Detail_Line_Status;

EXECUTE FUNCTION(Upd Confirm Qty       RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1513192;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);
PARAMETER('R');
PARAMETER(WRK.Detail_Line_Status_Last);
PARAMETER('P');
PARAMETER('S');
PARAMETER(*ZERO);
PARAMETER(*ZERO);

RETURN;

ENDIF;

//?USER: Exit program processing

CASE;

// IF PAR.Process Post USR is yes
IF PAR.Process_Post_USR = 'Y';

EXECUTE FUNCTION(Crt Manifest Detail   IF) TYPE(EXCINTFUN)                      AC1513180;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);
PARAMETER(CTL.Detail_Line_Status);
PARAMETER(CTL.Quantity_Scheduled);
PARAMETER(CTL.Weight_Scheduled);
PARAMETER(CTL.Quantity_Loc_On_Hand_SUM);
PARAMETER(CTL.Weight_Scheduled_SUM);

ENDIF;

