// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNYHXFR
// ?Date: 14.08.2025 Time: 03:47:05
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?*********************
//?EDI Interchange:  WSO Warehouse Shipping Order
//?EDI Message Class:  940 Warehouse Shipping Order
//?   Advise warehouse of a shipment that they will make for SBD
//?   Trading partner passed in is the warehouse's such as COLDPT/MILLRD
//?*********************
//?Retrieve the Order Header
EXECUTE FUNCTION(RTV All Fields         RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1571206;
PARAMETER(PAR.Company);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Order_Type_Sales);
PARAMETER(LCL.AR_Customer_Number);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(LCL.Ship_To_Name);
PARAMETER(LCL.Ship_To_Address_Line_1);
PARAMETER(LCL.Ship_To_Address_Line_2);
PARAMETER(LCL.Ship_To_Address_Line_3);
PARAMETER(LCL.Ship_To_City);
PARAMETER(LCL.Ship_To_State_Code);
PARAMETER(LCL.Ship_To_Zip_Postal_Code);
PARAMETER(LCL.Bill_to_Customer);
PARAMETER(LCL.Bill_to_Name);
PARAMETER(LCL.Bill_to_Address_Line_1);
PARAMETER(LCL.Bill_to_Address_Line_2);
PARAMETER(LCL.Bill_to_Address_Line_3);
PARAMETER(LCL.Bill_to_City);
PARAMETER(LCL.Bill_to_State_Code);
PARAMETER(LCL.Bill_to_Zip_Postal_Code);
PARAMETER(LCL.Customer_Purchase_Order_#);
PARAMETER(LCL.Order_Date);
PARAMETER(LCL.Requested_Ship_Date);
PARAMETER(LCL.Actual_Shipped_Date);
PARAMETER(LCL.Cancel_Date);
PARAMETER(LCL.Terms_Code);
PARAMETER(LCL.Special_Instructions);
PARAMETER(LCL.Special_Instructions_2);
PARAMETER(LCL.Carrier_Code);
PARAMETER(LCL.Comment_Print_Acknowledge);
PARAMETER(LCL.Comment_Print_Inv_Cr_Memo);
PARAMETER(LCL.Comment_Print_Pick_Slip);
PARAMETER(LCL.Comment_Print_Ship_Doc);
PARAMETER(LCL.Reason_Code);
PARAMETER(LCL.Order_in_Use);
PARAMETER(LCL.Header_Status);
PARAMETER(LCL.Header_Status_Last);
PARAMETER(LCL.Order_Type_Print_Status);
PARAMETER(LCL.Scheduled_Ship_Date);
PARAMETER(LCL.User_Original_Entry);
PARAMETER(LCL.Date_of_Original_Entry);
PARAMETER(LCL.Order_Value_Total);
PARAMETER(LCL.Order_Weight_Total);
PARAMETER(LCL.Credit_Hold);
PARAMETER(LCL.Production_Hold);
PARAMETER(LCL.New_Customer_Hold);
PARAMETER(LCL.Requested_Delivery_Date);
PARAMETER(LCL.Requested_Delivery_Time);
PARAMETER(LCL.Accounts_Receiv_Ent_1);
PARAMETER(LCL.Accounts_Receiv_Ent_2);
PARAMETER(LCL.Load_ID);
PARAMETER(LCL.Absorbed_Freight_Rate_CWT);
PARAMETER(LCL.Rated_Freight);
PARAMETER(LCL.LTL_Flag);
PARAMETER(LCL.Price_Audit);
PARAMETER(LCL.Price_Status);
PARAMETER(LCL.Shipping_Method);
PARAMETER(LCL.Export_Status);
PARAMETER(LCL.Palletize);
PARAMETER(LCL.Shrink_Wrap);
PARAMETER(LCL.Slip_Sheet);
PARAMETER(LCL.Age_Code);
PARAMETER(LCL.Reefer_Temperature);
PARAMETER(LCL.Load_Type);
PARAMETER(LCL.Attach_to_Invoice_Number);
PARAMETER(LCL.Load_Plan_Order);
PARAMETER(LCL.Print_Pick_Slip);
PARAMETER(LCL.Resell_Reference_Number);
PARAMETER(LCL.Special_Comment_1);
PARAMETER(LCL.Special_Comment_2);
PARAMETER(LCL.Affect_Auto_Accruals);
PARAMETER(LCL.Sales_Route_Code);
PARAMETER(LCL.Manager_Level_Code);
PARAMETER(LCL.VP_Level_Code);
PARAMETER(LCL.Attach_to_Order_Number);
PARAMETER(LCL.Reason_for_Price_Audit);
PARAMETER(LCL.Invoice_Number);
PARAMETER(LCL.Invoice_Suffix);
PARAMETER(LCL.Invoice_Date);
PARAMETER(LCL.Event_Code);
PARAMETER(LCL.Trans_Contol_AS400_Plant);
PARAMETER(LCL.Modified_Flag);
PARAMETER(LCL.A_R_order_Value_Total);
PARAMETER(LCL.Billing_Activity_Type);
PARAMETER(LCL.Block_Order_Flag);
PARAMETER(LCL.Order_Certification_Flag);
PARAMETER(LCL.Invoice_Order_Value_Tot);
PARAMETER(LCL.Process_Sts_for_3C);
PARAMETER(LCL.Order_Conf_Fax_Sts);
PARAMETER(LCL.Manifest_Fax_Sts);
PARAMETER(LCL.Invoice_Fax_Sts);
PARAMETER(LCL.Transfer_in_Storage_Ind);
PARAMETER(LCL.Email_Cust_On_Order_Ship);
PARAMETER(LCL.Order_Emailed);
PARAMETER(LCL.Export_Docs_Go_w_Driver);
PARAMETER(LCL.Shipping_Temp_Code_C_F);
PARAMETER(LCL.Broker_Order_Status);
PARAMETER(LCL.Air_Freight_Order);
PARAMETER(LCL.Order_Requires_Review);
PARAMETER(LCL.OH_Load_Plan_Ready);
PARAMETER(LCL.Export_USDA_Approved);
PARAMETER(LCL.HPB_Ship_to_Warehouse);
PARAMETER(LCL.OH_TF_Exempt_Code);
PARAMETER(LCL.OH_Appt_Confirmation_Dt);
PARAMETER(LCL.JPN_Invoice_Issuance_Date);
PARAMETER(LCL.Load_Actual_Shipped_Date);
PARAMETER(LCL.Load_BOL_Complete_Date);
PARAMETER(LCL.Load_Truck_Departure_Date);
PARAMETER(LCL.Maximum_Gross_Weight);
PARAMETER(LCL.Time_of_Original_Entry);
PARAMETER(LCL.OH_Appt_Confirmation_Tm);
PARAMETER(LCL.Load_BOL_Complete_Time);
PARAMETER(LCL.Load_Truck_Departure_Time);
PARAMETER(LCL.Act_Frt_Reference_Amount);
PARAMETER(LCL.Act_Non_Ref_Frt_Amount);
PARAMETER(LCL.OH_Fuel_Surcharge_Amount);
PARAMETER(LCL.OH_Total_Non_Ref_Frt_Amt);
PARAMETER(LCL.OH_Total_Ref_Frt_Amt);
PARAMETER(LCL.Claim_Number);
PARAMETER(LCL.EDI_Status_1);
PARAMETER(LCL.EDI_Status_2);
PARAMETER(LCL.EDI_Status_3);
PARAMETER(LCL.Job_Time);
PARAMETER(LCL.User_Id);
PARAMETER(LCL.Job_Name);
PARAMETER(LCL.Job_Date);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?RMC dont upd lcl.ship to state code! 12/11/19
EXECUTE FUNCTION(RTV Load Header All    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1451097;
PARAMETER(LCL.Load_ID);
PARAMETER(LCL.Scheduled_Ship_Date);
PARAMETER(LCL.LTL_Flag);
PARAMETER(LCL.Load_Status);
PARAMETER(LCL.Reefer_Temperature);
PARAMETER(LCL.Seal_1);
PARAMETER(LCL.Seal_2);
PARAMETER(LCL.Seal_3);
PARAMETER(LCL.Total_Load_Order_Weight);
PARAMETER(LCL.Flat_Amount);
PARAMETER(LCL.Allocate_Pounds_Miles);
PARAMETER(LCL.Total_Stops);
PARAMETER(LCL.Trailer_Id);
PARAMETER(LCL.Transloader_Carrier_Code);
PARAMETER(LCL.BOL_Time);
PARAMETER(LCL.Carrier_Code);
PARAMETER(LCL.Truck_Size);
PARAMETER(LCL.Ld_Hdr_Ld_Dtl_Unused);
PARAMETER(LCL.Rated_Freight);
PARAMETER(LCL.Ship_Status);
PARAMETER(LCL.Load_Type);
PARAMETER(LCL.Number_Pallets_Received);
PARAMETER(LCL.Number_Pallets_Loaded);
PARAMETER(LCL.Load_Carrier_Pay_Amt);
PARAMETER(LCL.Estimated_Arrival_Time);
PARAMETER(LCL.Actual_Arrival_Date);
PARAMETER(LCL.Actual_Arrival_Time);
PARAMETER(LCL.Trailer_IN_Weight);
PARAMETER(LCL.Trailer_OUT_Weight);
PARAMETER(LCL.Actual_Departure_Date);
PARAMETER(LCL.Departure_Time);
PARAMETER(LCL.Schedule_Sequence_Number);
PARAMETER(LCL.Product_Temperature);
PARAMETER(LCL.Number_Spacers_Loaded);
PARAMETER(LCL.Car_Veh_Initials);
PARAMETER(LCL.Total_Load_Miles);
PARAMETER(LCL.Recorder_ID);
PARAMETER(LCL.Shipping_Method);
PARAMETER(LCL.Ship_From_Warehouse);
PARAMETER(NLL.Ship_To_State_Code);
PARAMETER(LCL.Gross_Weight);
PARAMETER(LCL.Carrier_Broker);
PARAMETER(LCL.Export_Status);
PARAMETER(LCL.Actual_Ship_Date);
PARAMETER(LCL.On_Time_Y_N);
PARAMETER(LCL.Truck_Ready_Date);
PARAMETER(LCL.Truck_Ready_Time);
PARAMETER(LCL.Spotted_Date);
PARAMETER(LCL.Spotted_Time);
PARAMETER(LCL.Load_Finished_Date);
PARAMETER(LCL.Load_Finished_Time);
PARAMETER(LCL.BOL_Complete_Date);
PARAMETER(LCL.BOL_Complete_Time);
PARAMETER(LCL.BOL_Received_Date);
PARAMETER(LCL.BOL_Received_Time);
PARAMETER(LCL.Truck_Departure_Date);
PARAMETER(LCL.Truck_Departure_Time);
PARAMETER(LCL.Adjusted_Departure_Date);
PARAMETER(LCL.Adjusted_Departure_Time);
PARAMETER(LCL.Shipping_Line);
PARAMETER(LCL.Port_Delv_Terminal);
PARAMETER(LCL.Vessel_Name);
PARAMETER(LCL.Voyage);
PARAMETER(LCL.Sail_Date);
PARAMETER(LCL.Booking_Number);
PARAMETER(LCL.Discharge_Port);
PARAMETER(LCL.Arrival_Date);
PARAMETER(LCL.Container_Number);
PARAMETER(LCL.Date_In);
PARAMETER(LCL.Time_In);
PARAMETER(LCL.Date_Out);
PARAMETER(LCL.Time_Out);
PARAMETER(LCL.Load_Total_Freight);
PARAMETER(LCL.Scheduled_Delivery_Date);
PARAMETER(LCL.Scheduled_Delivery_Time);
PARAMETER(LCL.LH_Unused_Sts);
PARAMETER(LCL.On_Yard_Date);
PARAMETER(LCL.On_Yard_Time);
PARAMETER(LCL.Deadline_Departure_Date);
PARAMETER(LCL.Deadline_Departure_Time);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(RTV 1st Warehouse 2    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2158777;
PARAMETER(PAR.Company);
PARAMETER(PAR.Order_Number);
PARAMETER(1);
PARAMETER(1);
PARAMETER(LCL.Warehouse_Code);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(RTV TotOrdQty & Weight RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2140129;
PARAMETER(PAR.Company);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.USR_Quantity_9_0);
PARAMETER(LCL.USR_Weight_9_1);
{
 //?USER: Initialize routine

 // WRK.Quantity Allocated = CON.*ZERO
 WRK.Quantity_Scheduled = *ZERO;

 // WRK.Weight Allocated = CON.*ZERO
 WRK.Weight_Scheduled = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 // WRK.Quantity Scheduled = WRK.Quantity Scheduled + DB1.Quantity Ordered
 WRK.Quantity_Scheduled = WRK.Quantity_Scheduled + DB1.Quantity_Ordered;

 // WRK.Weight Scheduled = WRK.Weight Scheduled + DB1.Weight Ordered
 WRK.Weight_Scheduled = WRK.Weight_Scheduled + DB1.Weight_Ordered;

 // WRK.Weight Shipped Total = WRK.Weight Shipped Total + DB1.Weight Shipped Total
 WRK.Weight_Shipped_Total = WRK.Weight_Shipped_Total + DB1.Weight_Shipped_Total;

 // WRK.Tare Weight Total = WRK.Tare Weight Total + DB1.Tare Weight Total
 WRK.Tare_Weight_Total = WRK.Tare_Weight_Total + DB1.Tare_Weight_Total;

 ENDIF;

 //?USER: Exit processing

 // PAR.USR Quantity, 9.0 = WRK.Quantity Scheduled * CON.1 *Rounded
 PAR.USR_Quantity_9_0 = WRK.Quantity_Scheduled * 1 'H';

 // PAR.USR Weight   9.1 = WRK.Weight Scheduled * CON.1 *Rounded
 PAR.USR_Weight_9_1 = WRK.Weight_Scheduled * 1 'H';

 // PAR.USR Weight   9.1  2 = WRK.Weight Shipped Total * CON.1 *Rounded
 PAR.USR_Weight_9_1_2 = WRK.Weight_Shipped_Total * 1 'H';

}


//?R11331 DN 01/24/18-Get Pallet Type/country code
EXECUTE FUNCTION(Rtv Pallet Type       RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2146941;
PARAMETER(PAR.Company);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Country_Code);
PARAMETER(LCL.OD_Pallet_Type);
{
 //?USER: Initialize routine

 // PAR.OD Pallet Type = CND.None
 PAR.OD_Pallet_Type = *BLANK;

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 // PAR.OD Pallet Type = DB1.OD Pallet Type
 PAR.OD_Pallet_Type = DB1.OD_Pallet_Type;

 // PAR.Country Code = DB1.Country Code
 PAR.Country_Code = DB1.Country_Code;

 QUIT;

 ENDIF;

}


//?RMC added new field 5/13/21
//?R15305 DN 07/08/21-Added Parm 'Hold til ship within #day'.
EXECUTE FUNCTION(RTV Warehouse Duns    RT) TYPE(RTVOBJ) FILE(PNG0REP)           AC2023518;
PARAMETER(LCL.Warehouse_Code);
PARAMETER('WSO');
PARAMETER(LCL.EDI_Trading_Partner_No);
PARAMETER(LCL.EDI_Whs_Duns_Number);
PARAMETER(LCL.EDI_Company_#_940_846_947);
PARAMETER(NLL.Hold_til_ship_within_#day);
PARAMETER(LCL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Get next surrogate number
// PAR.EDI SURROGATE NUMBER = CND.999999999
PAR.EDI_SURROGATE_NUMBER = 999999999;

EXECUTE FUNCTION(Rtv Last Surrogate    RT) TYPE(RTVOBJ) FILE(ECP050)            AC2140104;
PARAMETER(PAR.EDI_SURROGATE_NUMBER);
{
 //?USER: Processing if Data record not found

 // PAR.EDI SURROGATE NUMBER = CON.999
 PAR.EDI_SURROGATE_NUMBER = 999;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// PAR.EDI SURROGATE NUMBER = PAR.EDI SURROGATE NUMBER + CON.1
PAR.EDI_SURROGATE_NUMBER = PAR.EDI_SURROGATE_NUMBER + 1;

//?Write Header Record
// WRK.Order Alpha = CVTVAR(PAR.Order Number)
WRK.Order_Alpha = CVTVAR(PAR.Order_Number);

// WRK.Load Alpha = CVTVAR(LCL.Load ID)
WRK.Load_Alpha = CVTVAR(LCL.Load_ID);

// WRK.Description 14A      USR = CONCAT(WRK.Order Alpha,WRK.Load Alpha,CON.*ZERO)
WRK.Description_14A_USR = WRK.Order_Alpha + WRK.Load_Alpha (*ZERO);

// LCL.BSN02-Shipmt ID-Load/Ord = CVTVAR(WRK.Description 14A      USR)
LCL.BSN02_Shipmt_ID_Load_Ord = CVTVAR(WRK.Description_14A_USR);

//?Chk to see if the ORD 940 already exists,  write CHANGE IF YES
EXECUTE FUNCTION(Rtv LastLoad f/Ord    RT) TYPE(RTVOBJ) FILE(ECP050)            AC2158009;
PARAMETER(LCL.Surrogate_Number_USR);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.W0505_Shipment_Num_BOL);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Set ORDER sts per record existing
CASE;

// IF LCL.Surrogate Number USR is ENTERED
IF LCL.Surrogate_Number_USR <> *ZERO;

// LCL.W0501 Order Status Code = CND.R-Change
LCL.W0501_Order_Status_Code = 'R';

//?Set ORDER sts per record existing
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.W0501 Order Status Code = CND.N-Original
LCL.W0501_Order_Status_Code = 'N';

ENDIF;

//?W6601 Shipping Method
CASE;

// IF LCL.Shipping Method is Collect
IF LCL.Shipping_Method = 'CR'/'CT';

// LCL.W6601 Shipment Method = CND.Collect
LCL.W6601_Shipment_Method = 'CC';

//?W6601 Shipping Method
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.W6601 Shipment Method = CND.Prepaid (by Seller)
LCL.W6601_Shipment_Method = 'PP';

ENDIF;

//?W6602 Transportation type
CASE;

// IF LCL.Shipping Method is Collect
IF LCL.Shipping_Method = 'CR'/'CT';

// OR LCL.Order Type - Sales is Transfer Order
OR LCL.Order_Type_Sales = 'TR';

// OR LCL.Carrier Code is NE MTS
OR LCL.Carrier_Code <> 'MTS';

//?if customer pickup, or sbd is transferring out/shipping out to ext cst
// LCL.W6602 Transportation Type = CND.Customer Pickup
LCL.W6602_Transportation_Type = 'H';

//?W6602 Transportation type
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.W6602 Transportation Type = CND.Motor (Common Carrier)
LCL.W6602_Transportation_Type = 'M';

ENDIF;

//?W6604 Unit Load Option
CASE;

// IF LCL.Palletize is yes
IF LCL.Palletize = 'Y';

// LCL.W6604 Unit Load Option = CND.Palletized
LCL.W6604_Unit_Load_Option = 01;

//?W6604 Unit Load Option
// IF LCL.Slip Sheet is yes
IF LCL.Slip_Sheet = 'Y';

// LCL.W6604 Unit Load Option = CND.Slip Sheet
LCL.W6604_Unit_Load_Option = 04;

//?W6604 Unit Load Option
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.W6604 Unit Load Option = CND.Other
LCL.W6604_Unit_Load_Option = 'ZZ';

ENDIF;

// LCL.W0504 Load Position = CON.100000
LCL.W0504_Load_Position = 100000;

//?Req delivery date   & scheduled ship date
// LCL.Production Date USR D8# = LCL.Requested Delivery Date
LCL.Production_Date_USR_D8# = LCL.Requested_Delivery_Date;

// LCL.Production Date USR D8S = LCL.Production Date USR D8#
LCL.Production_Date_USR_D8S = LCL.Production_Date_USR_D8#;

// LCL.G6202-DELIVERY DATE WSO = CVTVAR(LCL.Production Date USR D8S)
LCL.G6202_DELIVERY_DATE_WSO = CVTVAR(LCL.Production_Date_USR_D8S);

// LCL.Production Date USR D8# = LCL.Scheduled Ship Date
LCL.Production_Date_USR_D8# = LCL.Scheduled_Ship_Date;

// LCL.Production Date USR D8S = LCL.Production Date USR D8#
LCL.Production_Date_USR_D8S = LCL.Production_Date_USR_D8#;

// LCL.G6202 Ship Date WSO = CVTVAR(LCL.Production Date USR D8S)
LCL.G6202_Ship_Date_WSO = CVTVAR(LCL.Production_Date_USR_D8S);

//?R11331 DN 01/24/18-Set Palletize, Pallet Type, Shrink Wrap & Slip Sheet.
EXECUTE FUNCTION(Crt EDI WHS Ship Ord  CR) TYPE(CRTOBJ) FILE(ECP050)            AC2022911;
PARAMETER(PAR.EDI_SURROGATE_NUMBER);
PARAMETER(LCL.G6202_DELIVERY_DATE_WSO);
PARAMETER(LCL.EDI_Trading_Partner_No);
PARAMETER('N');
PARAMETER(LCL.W0501_Order_Status_Code);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Customer_Purchase_Order_#);
PARAMETER(LCL.W0504_Load_Position);
PARAMETER(LCL.Load_ID);
PARAMETER(LCL.W6601_Shipment_Method);
PARAMETER(LCL.W6602_Transportation_Type);
PARAMETER(LCL.W6604_Unit_Load_Option);
PARAMETER(LCL.USR_Quantity_9_0);
PARAMETER(LCL.G6202_Ship_Date_WSO);
PARAMETER(LCL.Palletize);
PARAMETER(LCL.OD_Pallet_Type);
PARAMETER(LCL.Shrink_Wrap);
PARAMETER(LCL.Slip_Sheet);

//?Create Name Records:  1)Depositor      2)Ship To  3) ship from whse 4)cnsg
//?1) Depositor        - 4/15/19 Use acctng co for whse-know whose prod itIs
EXECUTE FUNCTION(Rtv Acct Co          RT) TYPE(RTVOBJ) FILE(CAADREP)            AC1802492;
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?4/15/19 RMC use lcl.account company instead of par.company  - all 3 below
EXECUTE FUNCTION(RTV Company Address    RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1113470;
PARAMETER(LCL.Accounting_Company);
PARAMETER(LCL.Name);
PARAMETER(LCL.Address_Line_1);
PARAMETER(LCL.Address_Line_2);
PARAMETER(LCL.Address_Line_3);
PARAMETER(LCL.City);
PARAMETER(LCL.Zip_Postal_Code);
PARAMETER(LCL.State_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(LCL.Accounting_Company);
PARAMETER('DUNSNUM');
PARAMETER(LCL.D_N104_DUNS_NBR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Move company to a 4 position numeric
// LCL.Calc 4 = LCL.Accounting Company
LCL.Calc_4 = LCL.Accounting_Company;

//?Move company to a 4 position numeric to a alpha 4 field
// LCL.Amount Right 4 position = LCL.Calc 4
LCL.Amount_Right_4_position = LCL.Calc_4;

//?if EDI WHS Interhange has EDI Company # 940 846 947>0, use it , else dft
CASE;

// IF LCL.EDI Company # 940 846 947 is Entered
IF LCL.EDI_Company_#_940_846_947 > 0;

// LCL.Calc 4 = LCL.EDI Company # 940 846 947
LCL.Calc_4 = LCL.EDI_Company_#_940_846_947;

// LCL.Amount Right 4 position = LCL.Calc 4
LCL.Amount_Right_4_position = LCL.Calc_4;

ENDIF;

// LCL.Text USR 9 = LCL.D-N104-DUNS NBR
LCL.Text_USR_9 = LCL.D_N104_DUNS_NBR;

// LCL.N104-ID CODE = CONCAT(LCL.Text USR 9,LCL.Amount Right 4 position,CON.*ZERO)
LCL.N104_ID_CODE = LCL.Text_USR_9 + LCL.Amount_Right_4_position (*ZERO);

// LCL.N404-COUNTRY CODE = CON.*BLANK
LCL.N404_COUNTRY_CODE = *BLANK;

//?suppress .
CASE;

// IF LCL.State Code is International Accounts
IF LCL.State_Code = '.';

// LCL.State Code = CON.*BLANK
LCL.State_Code = *BLANK;

ENDIF;

//?suppress .
CASE;

// IF LCL.Zip/Postal Code is International
IF LCL.Zip_Postal_Code = '.';

// LCL.Zip/Postal Code = CON.*BLANK
LCL.Zip_Postal_Code = *BLANK;

ENDIF;

//?R16637 DN 10/01/20-Set Flds ADD 63A, N302-ADDRESS 63A & N403-POSTAL CODE20
EXECUTE FUNCTION(Crt EDI WHS Ship Ord  CR) TYPE(CRTOBJ) FILE(ECP052)            AC2023127;
PARAMETER(PAR.EDI_SURROGATE_NUMBER);
PARAMETER('DE');
PARAMETER(LCL.Name);
PARAMETER(9);
PARAMETER(LCL.N104_ID_CODE);
PARAMETER(LCL.Address_Line_1);
PARAMETER(*BLANK);
PARAMETER(LCL.City);
PARAMETER(LCL.State_Code);
PARAMETER(LCL.Zip_Postal_Code);
PARAMETER(LCL.N404_COUNTRY_CODE);
PARAMETER(LCL.Name);
PARAMETER(LCL.Address_Line_1);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(LCL.Zip_Postal_Code);

//?2) Ship To record
//?Use address on OH
EXECUTE FUNCTION(Rtv All Values        RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1569834;
PARAMETER(LCL.AR_Customer_Number);
PARAMETER(NLL.Internet_Password);
PARAMETER(NLL.Email_Address);
PARAMETER(NLL.Email_User_ID);
PARAMETER(LCL.EDI_Trading_Partner_No);
PARAMETER(LCL.EDI_Cust_Duns_Number);
PARAMETER(NLL.EDI_Warehouse_Store_No);
PARAMETER(NLL.State_Tax_ID);
PARAMETER(NLL.Cust_Shipping_Temp_C_F);
PARAMETER(NLL.One_Invoice_Per_PO);
PARAMETER(NLL.EDI_Advanced_Ship_Notice);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.EDI Cust Duns Number is NE Blank
IF LCL.EDI_Cust_Duns_Number <> *BLANK;

// LCL.N103-ID CODE QUALIFIER = CON.9
LCL.N103_ID_CODE_QUALIFIER = 9;

// LCL.N104-ID CODE = LCL.EDI Cust Duns Number
LCL.N104_ID_CODE = LCL.EDI_Cust_Duns_Number;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.N103-ID CODE QUALIFIER = CON.ZZ
LCL.N103_ID_CODE_QUALIFIER = 'ZZ';

// LCL.N104-ID CODE = CVTVAR(LCL.Ship To Customer)
LCL.N104_ID_CODE = CVTVAR(LCL.Ship_To_Customer);

ENDIF;

CASE;

// IF LCL.Ship To State Code is International Accounts
IF LCL.Ship_To_State_Code = '.';

// LCL.N404-COUNTRY CODE = LCL.Country Code
LCL.N404_COUNTRY_CODE = LCL.Country_Code;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.N404-COUNTRY CODE = CON.*BLANK
LCL.N404_COUNTRY_CODE = *BLANK;

ENDIF;

//?suppress .
CASE;

// IF LCL.Ship To State Code is International Accounts
IF LCL.Ship_To_State_Code = '.';

// LCL.Ship To State Code = CON.*BLANK
LCL.Ship_To_State_Code = *BLANK;

ENDIF;

//?suppress .
CASE;

// IF LCL.Ship To Zip/Postal Code is International
IF LCL.Ship_To_Zip_Postal_Code = '.';

// LCL.Ship To Zip/Postal Code = CON.*BLANK
LCL.Ship_To_Zip_Postal_Code = *BLANK;

ENDIF;

//?R11331 DN 09/11/18-Replace Special Charc with blank for Ship To Line.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.String Text-Old USR = LCL.Ship To Name
LCL.String_Text_Old_USR = LCL.Ship_To_Name;

// Call program Exc Repl SpcChar 2 BlnkXF.
CALL PROGRAM(Exc Repl SpcChar 2 BlnkXF) ('PUGPXFR');
PARAMETER(LCL.String_Text_Old_USR);
PARAMETER(LCL.String_Text_New_USR);

// LCL.Ship To Name = LCL.String Text-New USR
LCL.Ship_To_Name = LCL.String_Text_New_USR;

// LCL.String Text-Old USR = LCL.Ship To Address Line 1
LCL.String_Text_Old_USR = LCL.Ship_To_Address_Line_1;

// Call program Exc Repl SpcChar 2 BlnkXF.
CALL PROGRAM(Exc Repl SpcChar 2 BlnkXF) ('PUGPXFR');
PARAMETER(LCL.String_Text_Old_USR);
PARAMETER(LCL.String_Text_New_USR);

// LCL.Ship To Address Line 1 = LCL.String Text-New USR
LCL.Ship_To_Address_Line_1 = LCL.String_Text_New_USR;

CASE;

// IF LCL.Ship To Address Line 2 is NE Blank
IF LCL.Ship_To_Address_Line_2 <> *BLANK;

// LCL.String Text-Old USR = LCL.Ship To Address Line 2
LCL.String_Text_Old_USR = LCL.Ship_To_Address_Line_2;

// Call program Exc Repl SpcChar 2 BlnkXF.
CALL PROGRAM(Exc Repl SpcChar 2 BlnkXF) ('PUGPXFR');
PARAMETER(LCL.String_Text_Old_USR);
PARAMETER(LCL.String_Text_New_USR);

// LCL.Ship To Address Line 2 = LCL.String Text-New USR
LCL.Ship_To_Address_Line_2 = LCL.String_Text_New_USR;

ENDIF;

ENDIF;

//?R16637 DN 10/01/20-Set Flds ADD 63A, N302-ADDRESS 63A & N403-POSTAL CODE20
EXECUTE FUNCTION(Crt EDI WHS Ship Ord  CR) TYPE(CRTOBJ) FILE(ECP052)            AC2023127;
PARAMETER(PAR.EDI_SURROGATE_NUMBER);
PARAMETER('ST');
PARAMETER(LCL.Ship_To_Name);
PARAMETER(LCL.N103_ID_CODE_QUALIFIER);
PARAMETER(LCL.N104_ID_CODE);
PARAMETER(LCL.Ship_To_Address_Line_1);
PARAMETER(LCL.Ship_To_Address_Line_2);
PARAMETER(LCL.Ship_To_City);
PARAMETER(LCL.Ship_To_State_Code);
PARAMETER(LCL.Ship_To_Zip_Postal_Code);
PARAMETER(LCL.N404_COUNTRY_CODE);
PARAMETER(LCL.Ship_To_Name);
PARAMETER(LCL.Ship_To_Address_Line_1);
PARAMETER(LCL.Ship_To_Address_Line_2);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(LCL.Ship_To_Zip_Postal_Code);

//?3) Ship From Warehouse
EXECUTE FUNCTION(RTV Warehouse Address  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1211418;
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.Warehouse_Description);
PARAMETER(LCL.Address_Line_1);
PARAMETER(LCL.Address_Line_2);
PARAMETER(LCL.Address_Line_3);
PARAMETER(LCL.City);
PARAMETER(LCL.Zip_Postal_Code);
PARAMETER(LCL.State_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.EDI Whs Duns Number is Not Entered
IF LCL.EDI_Whs_Duns_Number = *BLANK;

// LCL.N103-ID CODE QUALIFIER = CON.ZZ
LCL.N103_ID_CODE_QUALIFIER = 'ZZ';

// LCL.N104-ID CODE = CON.*BLANK
LCL.N104_ID_CODE = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.N103-ID CODE QUALIFIER = CON.9
LCL.N103_ID_CODE_QUALIFIER = 9;

// LCL.N104-ID CODE = LCL.EDI Whs Duns Number
LCL.N104_ID_CODE = LCL.EDI_Whs_Duns_Number;

ENDIF;

// LCL.N404-COUNTRY CODE = CON.*BLANK
LCL.N404_COUNTRY_CODE = *BLANK;

//?R11331 DN 09/11/18-Replace Special Charc with blank for Ship From Line.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.String Text-Old USR = LCL.Address Line 1
LCL.String_Text_Old_USR = LCL.Address_Line_1;

// Call program Exc Repl SpcChar 2 BlnkXF.
CALL PROGRAM(Exc Repl SpcChar 2 BlnkXF) ('PUGPXFR');
PARAMETER(LCL.String_Text_Old_USR);
PARAMETER(LCL.String_Text_New_USR);

// LCL.Address Line 1 = LCL.String Text-New USR
LCL.Address_Line_1 = LCL.String_Text_New_USR;

CASE;

// IF LCL.Address Line 2 is NE Blank
IF LCL.Address_Line_2 <> *BLANK;

// LCL.String Text-Old USR = LCL.Address Line 2
LCL.String_Text_Old_USR = LCL.Address_Line_2;

// Call program Exc Repl SpcChar 2 BlnkXF.
CALL PROGRAM(Exc Repl SpcChar 2 BlnkXF) ('PUGPXFR');
PARAMETER(LCL.String_Text_Old_USR);
PARAMETER(LCL.String_Text_New_USR);

// LCL.Address Line 2 = LCL.String Text-New USR
LCL.Address_Line_2 = LCL.String_Text_New_USR;

ENDIF;

ENDIF;

//?R16637 DN 10/01/20-Set Flds ADD 63A, N302-ADDRESS 63A & N403-POSTAL CODE20
EXECUTE FUNCTION(Crt EDI WHS Ship Ord  CR) TYPE(CRTOBJ) FILE(ECP052)            AC2023127;
PARAMETER(PAR.EDI_SURROGATE_NUMBER);
PARAMETER('WH');
PARAMETER(LCL.Warehouse_Description);
PARAMETER(LCL.N103_ID_CODE_QUALIFIER);
PARAMETER(LCL.N104_ID_CODE);
PARAMETER(LCL.Address_Line_1);
PARAMETER(LCL.Address_Line_2);
PARAMETER(LCL.City);
PARAMETER(LCL.State_Code);
PARAMETER(LCL.Zip_Postal_Code);
PARAMETER(LCL.N404_COUNTRY_CODE);
PARAMETER(LCL.Warehouse_Description);
PARAMETER(LCL.Address_Line_1);
PARAMETER(LCL.Address_Line_2);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(LCL.Zip_Postal_Code);

//?4) Consignee if export  - RMC 3.9.20 use address lines that are 40 chars
//?W60964 RMC 4/3/2020 added longer name, 2 more addr lines,longer wrkflds
CASE;

// IF LCL.Export Status is yes
IF LCL.Export_Status = 'Y';

//?R16637 DN 10/14/20-Added Consignee Postal.
EXECUTE FUNCTION(Rtv Consignee/country RT) TYPE(RTVOBJ) FILE(PDMRREP)           AC2149984;
PARAMETER(PAR.Company);
PARAMETER(PAR.Order_Number);
PARAMETER('H');
PARAMETER(LCL.N404_COUNTRY_CODE);
PARAMETER(LCL.ED_Consignee_Name);
PARAMETER(LCL.ED_Consignee_Addr_1);
PARAMETER(LCL.ED_Consignee_Addr_2);
PARAMETER(LCL.ED_Consignee_Addr_3);
PARAMETER(LCL.ED_Consignee_Addr_4);
PARAMETER(LCL.ED_Consignee_Postal);
PARAMETER(LCL.ED_MPR_Canadian_Province);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF LCL.ED Consignee Name is Not Blank
IF LCL.ED_Consignee_Name <> *BLANK;

// AND LCL.ED Consignee Name is NE TBA
AND LCL.ED_Consignee_Name <> 'TBA';

//?R11331 DN 06/22/18-Set Ship To Customer.
// LCL.N103-ID CODE QUALIFIER = CON.ZZ
LCL.N103_ID_CODE_QUALIFIER = 'ZZ';

// LCL.N104-ID CODE = CVTVAR(LCL.Ship To Customer)
LCL.N104_ID_CODE = CVTVAR(LCL.Ship_To_Customer);

//?R11331 DN 09/11/18-Replace Special Charc with blank for Consignee Line.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.String Text-Old USR = LCL.ED Consignee Name
LCL.String_Text_Old_USR = LCL.ED_Consignee_Name;

// Call program Exc Repl SpcChar 2 BlnkXF.
CALL PROGRAM(Exc Repl SpcChar 2 BlnkXF) ('PUGPXFR');
PARAMETER(LCL.String_Text_Old_USR);
PARAMETER(LCL.String_Text_New_USR);

// LCL.ED Consignee Name = LCL.String Text-New USR
LCL.ED_Consignee_Name = LCL.String_Text_New_USR;

// LCL.String Text-Old USR = LCL.ED Consignee Addr 1
LCL.String_Text_Old_USR = LCL.ED_Consignee_Addr_1;

// Call program Exc Repl SpcChar 2 BlnkXF.
CALL PROGRAM(Exc Repl SpcChar 2 BlnkXF) ('PUGPXFR');
PARAMETER(LCL.String_Text_Old_USR);
PARAMETER(LCL.String_Text_New_USR);

// LCL.ED Consignee Addr 1 = LCL.String Text-New USR
LCL.ED_Consignee_Addr_1 = LCL.String_Text_New_USR;

//?Consignee addr 2
CASE;

// IF LCL.ED Consignee Addr 2 is Not Blank
IF LCL.ED_Consignee_Addr_2 <> *BLANK;

// LCL.String Text-Old USR = LCL.ED Consignee Addr 2
LCL.String_Text_Old_USR = LCL.ED_Consignee_Addr_2;

// Call program Exc Repl SpcChar 2 BlnkXF.
CALL PROGRAM(Exc Repl SpcChar 2 BlnkXF) ('PUGPXFR');
PARAMETER(LCL.String_Text_Old_USR);
PARAMETER(LCL.String_Text_New_USR);

// LCL.ED Consignee Addr 2 = LCL.String Text-New USR
LCL.ED_Consignee_Addr_2 = LCL.String_Text_New_USR;

ENDIF;

//?Consignee addr 3
CASE;

// IF LCL.ED Consignee Addr 3 is Not Blank
IF LCL.ED_Consignee_Addr_3 <> *BLANK;

// LCL.String Text-Old USR = LCL.ED Consignee Addr 3
LCL.String_Text_Old_USR = LCL.ED_Consignee_Addr_3;

// Call program Exc Repl SpcChar 2 BlnkXF.
CALL PROGRAM(Exc Repl SpcChar 2 BlnkXF) ('PUGPXFR');
PARAMETER(LCL.String_Text_Old_USR);
PARAMETER(LCL.String_Text_New_USR);

// LCL.ED Consignee Addr 3 = LCL.String Text-New USR
LCL.ED_Consignee_Addr_3 = LCL.String_Text_New_USR;

ENDIF;

//?Consignee addr 4
CASE;

// IF LCL.ED Consignee Addr 4 is Not Blank
IF LCL.ED_Consignee_Addr_4 <> *BLANK;

// LCL.String Text-Old USR = LCL.ED Consignee Addr 4
LCL.String_Text_Old_USR = LCL.ED_Consignee_Addr_4;

// Call program Exc Repl SpcChar 2 BlnkXF.
CALL PROGRAM(Exc Repl SpcChar 2 BlnkXF) ('PUGPXFR');
PARAMETER(LCL.String_Text_Old_USR);
PARAMETER(LCL.String_Text_New_USR);

// LCL.ED Consignee Addr 4 = LCL.String Text-New USR
LCL.ED_Consignee_Addr_4 = LCL.String_Text_New_USR;

ENDIF;

ENDIF;

//?R16637 DN 10/01/20-Set Flds ADD 63A, N302-ADDRESS 63A & N403-POSTAL CODE20
EXECUTE FUNCTION(Crt EDI WHS Ship Ord  CR) TYPE(CRTOBJ) FILE(ECP052)            AC2023127;
PARAMETER(PAR.EDI_SURROGATE_NUMBER);
PARAMETER('CN');
PARAMETER(LCL.ED_Consignee_Name);
PARAMETER(LCL.N103_ID_CODE_QUALIFIER);
PARAMETER(LCL.N104_ID_CODE);
PARAMETER(LCL.ED_Consignee_Addr_1);
PARAMETER(LCL.ED_Consignee_Addr_2);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(LCL.N404_COUNTRY_CODE);
PARAMETER(LCL.ED_Consignee_Name);
PARAMETER(LCL.ED_Consignee_Addr_1);
PARAMETER(LCL.ED_Consignee_Addr_2);
PARAMETER(LCL.ED_Consignee_Addr_3);
PARAMETER(LCL.ED_Consignee_Addr_4);
PARAMETER(LCL.ED_Consignee_Postal);

ENDIF;

ENDIF;

//?Write detail record
// Call program Rtv & Crt WSO details XF.
CALL PROGRAM(Rtv & Crt WSO details XF) ('PNYKXFR');
PARAMETER(PAR.Company);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Requested_Delivery_Date);
PARAMETER(PAR.EDI_SURROGATE_NUMBER);

//?Write note record(s)
// LCL.NTE01 Note Line Number = CON.*ZERO
LCL.NTE01_Note_Line_Number = *ZERO;

//?Special Instructions
CASE;

// IF LCL.Special Instructions is Not equal to Blank
IF LCL.Special_Instructions <> *BLANK;

// OR LCL.Special Instructions 2 is Not equal to Blank
OR LCL.Special_Instructions_2 <> *BLANK;

//?R11331 DN 03/22/18-Replace Special Characters with a Blank Space.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.String Text-Old USR = CON.*BLANK
LCL.String_Text_Old_USR = *BLANK;

CASE;

// IF LCL.Special Instructions is Not equal to Blank
IF LCL.Special_Instructions <> *BLANK;

// LCL.String Text-Old USR = LCL.Special Instructions
LCL.String_Text_Old_USR = LCL.Special_Instructions;

// Call program Exc Repl SpcChar 2 BlnkXF.
CALL PROGRAM(Exc Repl SpcChar 2 BlnkXF) ('PUGPXFR');
PARAMETER(LCL.String_Text_Old_USR);
PARAMETER(LCL.String_Text_New_USR);

// LCL.Special Instructions = LCL.String Text-New USR
LCL.Special_Instructions = LCL.String_Text_New_USR;

ENDIF;

CASE;

// IF LCL.Special Instructions 2 is Not equal to Blank
IF LCL.Special_Instructions_2 <> *BLANK;

// LCL.String Text-Old USR = LCL.Special Instructions 2
LCL.String_Text_Old_USR = LCL.Special_Instructions_2;

// Call program Exc Repl SpcChar 2 BlnkXF.
CALL PROGRAM(Exc Repl SpcChar 2 BlnkXF) ('PUGPXFR');
PARAMETER(LCL.String_Text_Old_USR);
PARAMETER(LCL.String_Text_New_USR);

// LCL.Special Instructions 2 = LCL.String Text-New USR
LCL.Special_Instructions_2 = LCL.String_Text_New_USR;

ENDIF;

ENDIF;

// LCL.NTE02 Note = CONCAT(LCL.Special Instructions,LCL.Special Instructions 2,CON.*ZERO)
LCL.NTE02_Note = LCL.Special_Instructions + LCL.Special_Instructions_2 (*ZERO);

// LCL.NTE01 Note Line Number = CON.1
LCL.NTE01_Note_Line_Number = 1;

EXECUTE FUNCTION(Crt EDI WHS Ship Ord  CR) TYPE(CRTOBJ) FILE(ECP053)            AC2023130;
PARAMETER(PAR.EDI_SURROGATE_NUMBER);
PARAMETER(LCL.NTE01_Note_Line_Number);
PARAMETER('WHI');
PARAMETER(LCL.NTE02_Note);

ENDIF;

EXECUTE FUNCTION(RTV EDI Ord Comment   RT) TYPE(RTVOBJ) FILE(OPCOCPP)           AC2023654;
PARAMETER(PAR.Company);
PARAMETER(PAR.Order_Number);
PARAMETER('BL');
PARAMETER(LCL.NTE01_Note_Line_Number);
PARAMETER(PAR.EDI_SURROGATE_NUMBER);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Comment Text is not equal to blank
 IF DB1.Comment_Text <> *BLANK;

 // PAR.NTE01 Note Line Number = PAR.NTE01 Note Line Number + CON.1
 PAR.NTE01_Note_Line_Number = PAR.NTE01_Note_Line_Number + 1;

 EXECUTE FUNCTION(Crt EDI WHS Ship Ord2 CR) TYPE(CRTOBJ) FILE(ECP053)            AC2155563;
 PARAMETER(PAR.EDI_SURROGATE_NUMBER);
 PARAMETER(PAR.NTE01_Note_Line_Number);
 PARAMETER('DEL');
 PARAMETER(DB1.Comment_Text);
 {
  //?USER: Processing before Data update

  //?R11331 DN 06/27/18-Replace Special Characters with a Blank Space.
  CASE;

  // IF PAR.NTE02 Note is Entered
  IF PAR.NTE02_Note <> *BLANK;

  // LCL.String Text-Old USR = PAR.NTE02 Note
  LCL.String_Text_Old_USR = PAR.NTE02_Note;

  // Call program Exc Repl SpcChar 2 BlnkXF.
  CALL PROGRAM(Exc Repl SpcChar 2 BlnkXF) ('PUGPXFR');
  PARAMETER(LCL.String_Text_Old_USR);
  PARAMETER(LCL.String_Text_New_USR);

  // DB1.NTE02 Note = LCL.String Text-New USR
  DB1.NTE02_Note = LCL.String_Text_New_USR;

  ENDIF;

 }

 ENDIF;

}


EXECUTE FUNCTION(RTV EDI 940 Shp Inst  RT) TYPE(RTVOBJ) FILE(PDIECPP)           AC2150001;
PARAMETER(PAR.Company);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.NTE01_Note_Line_Number);
PARAMETER(PAR.EDI_SURROGATE_NUMBER);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Shipping Instructions is Not Blank
 IF DB1.Shipping_Instructions <> *BLANK;

 // PAR.NTE01 Note Line Number = PAR.NTE01 Note Line Number + CON.1
 PAR.NTE01_Note_Line_Number = PAR.NTE01_Note_Line_Number + 1;

 EXECUTE FUNCTION(Crt EDI WHS Ship Ord2 CR) TYPE(CRTOBJ) FILE(ECP053)            AC2155563;
 PARAMETER(PAR.EDI_SURROGATE_NUMBER);
 PARAMETER(PAR.NTE01_Note_Line_Number);
 PARAMETER('DEL');
 PARAMETER(DB1.Shipping_Instructions);
 {
  //?USER: Processing before Data update

  //?R11331 DN 06/27/18-Replace Special Characters with a Blank Space.
  CASE;

  // IF PAR.NTE02 Note is Entered
  IF PAR.NTE02_Note <> *BLANK;

  // LCL.String Text-Old USR = PAR.NTE02 Note
  LCL.String_Text_Old_USR = PAR.NTE02_Note;

  // Call program Exc Repl SpcChar 2 BlnkXF.
  CALL PROGRAM(Exc Repl SpcChar 2 BlnkXF) ('PUGPXFR');
  PARAMETER(LCL.String_Text_Old_USR);
  PARAMETER(LCL.String_Text_New_USR);

  // DB1.NTE02 Note = LCL.String Text-New USR
  DB1.NTE02_Note = LCL.String_Text_New_USR;

  ENDIF;

 }

 ENDIF;

}


// LCL.NTE01 Note Line Number = CON.*ZERO
LCL.NTE01_Note_Line_Number = *ZERO;

EXECUTE FUNCTION(Rtv EDI Cust Comm BL  RT) TYPE(RTVOBJ) FILE(POAVCPP)           AC2023652;
PARAMETER(LCL.Ship_To_Customer);
PARAMETER('BL');
PARAMETER(*ZERO);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.NTE01_Note_Line_Number);
PARAMETER(PAR.EDI_SURROGATE_NUMBER);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Customer Comment Line is Not Entered
 IF DB1.Customer_Comment_Line = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.NTE01 Note Line Number = PAR.NTE01 Note Line Number + CON.1
 PAR.NTE01_Note_Line_Number = PAR.NTE01_Note_Line_Number + 1;

 EXECUTE FUNCTION(Crt EDI WHS Ship Ord2 CR) TYPE(CRTOBJ) FILE(ECP053)            AC2155563;
 PARAMETER(PAR.EDI_SURROGATE_NUMBER);
 PARAMETER(PAR.NTE01_Note_Line_Number);
 PARAMETER('ZZZ');
 PARAMETER(DB1.Customer_Comment_Line);
 {
  //?USER: Processing before Data update

  //?R11331 DN 06/27/18-Replace Special Characters with a Blank Space.
  CASE;

  // IF PAR.NTE02 Note is Entered
  IF PAR.NTE02_Note <> *BLANK;

  // LCL.String Text-Old USR = PAR.NTE02 Note
  LCL.String_Text_Old_USR = PAR.NTE02_Note;

  // Call program Exc Repl SpcChar 2 BlnkXF.
  CALL PROGRAM(Exc Repl SpcChar 2 BlnkXF) ('PUGPXFR');
  PARAMETER(LCL.String_Text_Old_USR);
  PARAMETER(LCL.String_Text_New_USR);

  // DB1.NTE02 Note = LCL.String Text-New USR
  DB1.NTE02_Note = LCL.String_Text_New_USR;

  ENDIF;

 }

 ENDIF;

}


//?Change OHE 940 Action to Sent
EXECUTE FUNCTION(CHG OHE EDI 940 Action CH) TYPE(CHGOBJ) FILE(PMAMREP)          AC2141606;
PARAMETER(PAR.Company);
PARAMETER(PAR.Order_Number);
PARAMETER('S');
{
 //?USER: Processing before Data update

 // DB1.Job Time = JOB.*Job time
 DB1.Job_Time = JOB.*Job_time;

 // DB1.Job Date = JOB.*Job date
 DB1.Job_Date = JOB.*Job_date;

 // DB1.Job Name = JOB.*PROGRAM
 DB1.Job_Name = JOB.*PROGRAM;

 // DB1.User Id = JOB.*USER
 DB1.User_Id = JOB.*USER;

}


