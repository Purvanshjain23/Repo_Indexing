// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDM4DFR
// ?Date: 14.08.2025 Time: 03:28:50
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?E2494 RMC 6/04/2013 Dsp Cust PO
//?E2494 RMC 4/03/2013 Dsp Gate Price (will be on jpn orders only)
EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize subfile control

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(PDIRREP)          AC1311996;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Price_Audit_Reason_Code);
PARAMETER(CTL.Description);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Req Delv/Hdr Sts  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1598298;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(WRK.Header_Status);
PARAMETER(CTL.Requested_Delivery_Date);
PARAMETER(LCL.Requested_Delivery_Time);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Purchase Order     RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1355939;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Customer_Purchase_Order_#);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If order has been shipped, show qty shipped, otherwise show qty scheduled
CASE;

// IF WRK.Header Status is Confirmed & Complete
IF WRK.Header_Status = 'C'/'R';

// CTL.Field Description = CON.Qty Shipped  . :
CTL.Field_Description = 'Qty Shipped  . :';

// CTL.Quantity Scheduled = PAR.Quantity Shipped Total
CTL.Quantity_Scheduled = PAR.Quantity_Shipped_Total;

//?If order has been shipped, show qty shipped, otherwise show qty scheduled
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Field Description = CON.Qty Scheduled  :
CTL.Field_Description = 'Qty Scheduled  :';

// CTL.Quantity Scheduled = PAR.Quantity Scheduled
CTL.Quantity_Scheduled = PAR.Quantity_Scheduled;

ENDIF;

//?USER: Initialize subfile record from DBF record

//?Skip TCRDVY
CASE;

// IF DB1.Price Method Componant is TCRDVY
IF DB1.Price_Method_Componant = 'TCRDVY';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?Skip TCRDVY
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(PDIJREP)          AC1251625;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Price_Method_Componant);
PARAMETER(RCD.Price_Componant_Desc);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Skip components not part of Formula Pricing
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(VAL Check Existence    RT) TYPE(RTVOBJ) FILE(PDIKREP)          AC1314692;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Price_Method_Code);
PARAMETER(DB1.Price_Method_Componant);

//?Don't select components which are not part of Formula processing
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Don't select components which are not part of Formula processing
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Fill Description
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(PDIJREP)          AC1251625;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Price_Method_Componant);
PARAMETER(RCD.Price_Componant_Desc);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

EXECUTE FUNCTION(Rtv Gate Price        RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2064251;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(CTL.Order_Gate_Final_Price);
PARAMETER(NLL.OD_Gate_Final_Price_Adj);
PARAMETER(CTL.OD_Weighted_Avg_Price);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Order Gate Price is Not Zeros
 IF DB1.Order_Gate_Final_Price <> *ZERO;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


//?USER: Process command keys

CASE;

// IF CTL.*CMD key is *Display Formula Details
IF CTL.*CMD_key = '22';

EXECUTE FUNCTION(RTV Price Meth Type    RT) TYPE(RTVOBJ) FILE(PDIHREP)          AC1268519;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Price_Method_Code);
PARAMETER(WRK.Price_Method_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?error if not formula pricing
CASE;

// IF WRK.Price Method Type is Formula Pricing
IF WRK.Price_Method_Type = 'F';

// Call program RTV Ship Pricing Totl  XF.
CALL PROGRAM(RTV Ship Pricing Totl  XF) ('PDOMXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);
PARAMETER(PAR.USR_Total_Consumed_Items);
PARAMETER(PAR.USR_Muscle_Yield_Amt);
PARAMETER(PAR.Total_Credit_Dollars);
PARAMETER(PAR.USR_Formula_Overages);
PARAMETER(PAR.USR_Differential);
PARAMETER(PAR.Starting_Product_Price);
PARAMETER(PAR.Credit_Value);
PARAMETER(PAR.Muscle_Yield_Price);
PARAMETER(PAR.Standard_Overage_Underage);
PARAMETER(PAR.USR_Cust_Item_Differentl);
PARAMETER(02);

// Call program DSP Ship Dtl Form Dtls DF.
CALL PROGRAM(DSP Ship Dtl Form Dtls DF) ('PDM6DFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Market_Pricing_Date);
PARAMETER(CTL.Date_Method_Code);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Requested_Ship_Date);
PARAMETER(CTL.Company_Name);
PARAMETER(PAR.USR_Total_Consumed_Items);
PARAMETER(PAR.USR_Muscle_Yield_Amt);
PARAMETER(PAR.Total_Credit_Dollars);
PARAMETER(PAR.USR_Formula_Overages);
PARAMETER(PAR.USR_Differential);

//?error if not formula pricing
// IF *OTHERWISE
IF *OTHERWISE;

//?Cmd key not allowed except for Formula pricing
// Send error message - 'Function not available for this entry'
ERROR(USR1942);

ENDIF;

ENDIF;

