// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POL4PFR
// ?Date: 14.08.2025 Time: 12:06:15
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('C/S');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


//?USER: Record selection processing

CASE;

// IF DB1.Seaboard Equivalent Item is Not Entered
IF DB1.Seaboard_Equivalent_Item = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process top of page

MOVE *ALL (To: TOP From: PAR);

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(TOP_Company_Name_DRV);
PARAMETER(TOP_Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?Category Desc
CASE;

// IF PAR.Item Category Code is Entered
IF PAR.Item_Category_Code > *BLANK;

EXECUTE FUNCTION(Rtv Item Ctg Desc     RT) TYPE(RTVOBJ) FILE(PDJIREP)           AC1627391;
PARAMETER(TOP_Company_Number);
PARAMETER(1);
PARAMETER(TOP_Item_Category_Code);
PARAMETER(TOP_Description);
PARAMETER(NLL.Item_Category_Type_Number);
PARAMETER(NLL.Item_Category_Type_Code);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Category Desc
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Description = CON.*All
TOP_Description = *All;

ENDIF;

//?Category Type
CASE;

// IF PAR.Item Category Type Code is Entered
IF PAR.Item_Category_Type_Code <> *BLANK;

EXECUTE FUNCTION(Rtv Description       RT) TYPE(RTVOBJ) FILE(POBHREP)           AC1631475;
PARAMETER(1);
PARAMETER(TOP_Item_Category_Type_Code);
PARAMETER(TOP_Item_Category_Type_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Category Type
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Item Category Type Desc = CON.*All
TOP_Item_Category_Type_Desc = *All;

ENDIF;

//?Record Status
CASE;

// IF TOP.Record Status is Valid Entries
IF TOP_Record_Status = 'A'/'D'/'I';

// TOP.Condition Desc. 1  USR = Condition name of TOP.Record Status
TOP_Condition_Desc_1_USR = RTVCND(TOP_Record_Status);

//?Record Status
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Condition Desc. 1  USR = CON.*All
TOP_Condition_Desc_1_USR = *All;

ENDIF;

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
// Print Company Number header format
PRINT Company Number header format;

ENDIF;

CASE;

IF NEW Seaboard_Equivalent_Item;
EXECUTE FUNCTION(Rtv Descriptions      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1140665;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Seaboard_Equivalent_Item);
PARAMETER(CUR.Description);
PARAMETER(NLL.Description_Line_Two);
PARAMETER(NLL.UOM_Primary);
PARAMETER(NLL.UOM_Second);
PARAMETER(NLL.UOM_Third);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Print Seaboard Equivalent Item header format
PRINT Seaboard Equivalent Item header format;

ENDIF;

// SUPPRESSED PRINT Item Category Number 1 header format

CASE;

IF NEW Made_to_Order_Code;
// LCL.Print (Yes/No) USR = CND.Yes
LCL.Print_Yes_No_USR = 'Y';

EXECUTE FUNCTION(Rtv Item Ctg Desc     RT) TYPE(RTVOBJ) FILE(PDJIREP)           AC1627391;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Category_Number_1);
PARAMETER(CUR.Made_to_Order_Code);
PARAMETER(CUR.Description);
PARAMETER(WRK.Item_Category_Type_Number);
PARAMETER(CUR.Item_Category_Type_Code);
PARAMETER(CUR.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?SEL:  Category Code for the MTO Code
CASE;

// IF PAR.Item Category Code is Entered
IF PAR.Item_Category_Code > *BLANK;

CASE;

// IF CUR.Item Category Code 1 NE PAR.Item Category Code
IF CUR.Made_to_Order_Code <> PAR.Item_Category_Code;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

// LCL.Print (Yes/No) USR = CND.No
LCL.Print_Yes_No_USR = 'N';

ENDIF;

ENDIF;

//?SEL:  Category Type for the MTO Code
CASE;

// IF PAR.Item Category Type Code is Entered
IF PAR.Item_Category_Type_Code <> *BLANK;

CASE;

// IF CUR.Item Category Type Code NE PAR.Item Category Type Code
IF CUR.Item_Category_Type_Code <> PAR.Item_Category_Type_Code;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

// LCL.Print (Yes/No) USR = CND.No
LCL.Print_Yes_No_USR = 'N';

ENDIF;

ENDIF;

//?SEL:  Record Status for the MTO Code
CASE;

// IF PAR.Record Status is Valid Entries
IF PAR.Record_Status = 'A'/'D'/'I';

CASE;

// IF CUR.Record Status NE PAR.Record Status
IF CUR.Record_Status <> PAR.Record_Status;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

// LCL.Print (Yes/No) USR = CND.No
LCL.Print_Yes_No_USR = 'N';

ENDIF;

ENDIF;

// Print Item Category Code 1 header format
PRINT Item Category Code 1 header format;

ENDIF;

// SUPPRESSED PRINT Item Code header format

//?USER: On print of detail format

CASE;

// IF LCL.Print (Yes/No) USR is No
IF LCL.Print_Yes_No_USR = 'N';

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

//?USER: Print required level totals

// SUPPRESSED PRINT Item Code totals format

// SUPPRESSED PRINT Item Category Code 1 totals format

// SUPPRESSED PRINT Item Category Number 1 totals format

// SUPPRESSED PRINT Seaboard Equivalent Item totals format

// SUPPRESSED PRINT Company Number totals format

