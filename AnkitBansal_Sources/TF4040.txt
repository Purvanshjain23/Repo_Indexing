      *****************  RPG PROGRAM HEADING  ************************
      * SYSTEM:      Triumph Foods
      * PROGRAM:     TF4040
      * TITLE:       Cash: Specify Cash Distribution Balance Adjustment Listing Options
      * PROGRAMMER:  LeAnne Ramsey
      * CREATED:     11/-6/06
      *
      * FUNCTION: Allows user to enter listing options and submit job.
      *
      * NOTE:    This is a pop-up window program.  Please note that in window
      *          programs the record format containing the window definition
      *          must be written first.  So, we write the error message subfile
      *          control record first followed by the command line record format.
      *          This is opposite of the non-window programs.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 12/01/06  LeAnne Ramsey
      *           Added "period" parm to call to generic calendar program
      *           TF811.
      *
      * 04/17/09  LeAnne Ramsey
      *           Added a selection: Extract on WeekEnding Date or Adjustment Date
      *
      * 05/07/09  LeAnne Ramsey
      *           Changed the Print logic to match Meat Costing.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Ftfd4040   cf   e             workstn infds(iofeed)
      *
      *
     Ftfl023b   if   e           k disk
      *   Cash distribution balance adjustments
      *
      *
     Ftfl023c   if   e           k disk    rename(barec:barecc)
      *   Cash distribution balance adjustments
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  Compile time array for SBMJOB used in QCMDEXC
      *---------------------------------------------------------------
     D cmd             s              1    dim(80) ctdata perrcd(80)
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D rtncd           s              2
     D maxmsg          s              2  0  inz(20)
      *
      *
      * Workfields for date manipulation
      *
     D wkcymdiso       s               d   datfmt(*iso)
     D wkmdydt         s               d   datfmt(*mdy)
     D wkdt            s              8  0
     D wkmdy           s              6  0
      *
      *
      * Parms
      *
     D xxynfl          s                   like(d1rcexfl)
      *
     D xxsatdt         s              8  0
     D xxdt            s              8  0
     D xxyr            s              4  0
     D xxpe            s              2  0
     D xxwk            s              2  0
      *
     D xxfmdy          s              6  0
     D xxfcymd         s              8  0
      *
     D xxtmdy          s              6  0
     D xxtcymd         s              8  0
      *
      *
      *  Parms for use with QCMDEXC.  'LENGTH' is the length of the
      *  command that will be issued with QCMDEXC.  QCMDEXC requires
      *  the field containing length to be defined as 15 with 5 decimal
      *  positions.  The field 'CMDSBM' will hold the values of the
      *  submit job command when passed as a parm on the call to
      *  QCMDEXC.
      *
     D length          s             15  5 inz(80)
     D cmdsbm          s             80
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      *  LDA
      *---------------------------------------------------------------
      *
      * We generate this from the Margin Close function as well as on-demand from this
      * program. So, don't screw up the  LDAs.
      *
     Dlda             uds                  dtaara(*lda)
     D  ldyr                   1      4  0
     D  ldwk                   5      6  0
      *
     D  ldfdt                  7     14  0
     D  ldfmdy                15     20  0
      *
     D  ldtdt                 21     28  0
     D  ldtmdy                29     34  0
      *
     D  ldrcexfl              35     35
     D  lddtfl                36     36
      *
     D  ldoutq               401    410
     D  ldhold               411    414
     D  ldsave               415    418
     D  ldcopy               419    419  0
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /eject
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo
      /eject
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      *  Set routine to display screen
      *
     C                   move      scrn1         routne
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to CRT.
      *
     C                   write     tf4040ec
     C                   write     tf4040k1
     C                   exfmt     tf4040r1
      *
      * Clear messages
     C                   exsr      $clmsg
      *
      * Get user's input and set routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      rtncd = '03'
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
      *
     C                   when      *in08 = *on                                  F8-submit
     C                   exsr      $edit1
     C                   if        error = 0
     C                   exsr      $proc1
     C                   endif
      *
     C                   when      *in17 = *on                                  F17-print opt
     C                   call      'RO890'
     C                   eval      routne = scrn1
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                       API
     C                   eval      routne = scrn1
     C                   other
      *
     C                   exsr      $edit1
     C                   eval      routne = scrn1
     C                   endsl
      *
      * Bring in the LDA to pick up any printer changes the user may
      * have made from called programs
      *
     C                   in        lda
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Edit screen 1
      *---------------------------------------------------------------
      *
      * Validate:
      *  1) Extract data on which date (weekEnding or Adjustment)
      *  2) From date
      *  3) To date
      *  4) Record exempt  flag
      *
     C     $edit1        begsr
      *
     C                   exsr      $dtfl
     C                   exsr      $fmdy
     C                   exsr      $tmdy
     C                   exsr      $rcexfl
      *
      * If the user did not enter From/To dates, retrieve dates.
      *
     C                   if        d1fmdy = 0 and d1tmdy = 0                    If all dates
      *
     C                   select
     C                   when      d1dtfl = 'W'
     C                   exsr      $weekalldt
      *
     C                   when      d1dtfl = 'A'
     C                   exsr      $adjalldt
     C                   endsl
     C                   endif                                                  If all dates
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate the Date Flag
      *----------------------------------------------------------------
      *
      * The user must elect whether to extract data based on:
      *   1) Adjustment date
      *   2) WeekEnding date
      *
     C     $dtfl         begsr
      *
     C                   select
     C                   when      d1dtfl = 'A'
     C                   setoff                                       87
      *
     C                   when      d1dtfl = 'W'
     C                   seton                                        87
     C                   other
      *
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09234'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate From Date
      *----------------------------------------------------------------
      *
     C     $fmdy         begsr
      *
     C                   z-add     0             xxfcymd
     C                   z-add     0             ldfdt
      *
     C                   select
     C                   when      d1tmdy = 0 and d1fmdy = 0
      *
     C                   when      d1tmdy <> 0 and d1fmdy = 0
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09088'     mgid(e)
     C                   endif
      *
     C                   when      d1fmdy < 0
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   other
      *
     C     *mdy          test(d)                 d1fmdy                 92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      * Flip the date from MMDDYY to CCYYMMDD
      *
     C     *mdy          move      d1fmdy        wkcymdiso
     C                   move      wkcymdiso     wkdt
     C                   z-add     wkdt          xxfcymd
     C                   z-add     wkdt          ldfdt
      *
      * If user selected data extraction by WeekEnding date, retrieve the
      * Saturday associated with this date.
      *
     C                   if        d1dtfl = 'W'                                 If weekEnding
     C                   exsr      $wedt
     C                   if        *in92 = *on                                  If bad Saturday
     C                   seton                                        30
     C                   else
     C                   z-add     wkmdy         d1fwemdy
     C                   z-add     xxsatdt       ldfdt
     C                   endif                                                  If bad Saturday
     C                   endif                                                  If weekEnding
      *
     C                   endif                                                  If bad date
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate To Week-ending Date
      *----------------------------------------------------------------
      *
     C     $tmdy         begsr
      *
     C                   z-add     0             xxtcymd
     C                   z-add     0             ldtdt
      *
     C                   select
     C                   when      d1tmdy = 0 and d1fmdy = 0
      *
     C                   when      d1fmdy <> 0 and d1tmdy = 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09089'     mgid(e)
     C                   endif
      *
     C                   when      d1tmdy < 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   other
      *
     C     *mdy          test(d)                 d1tmdy                 92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      * Flip the date from MMDDYY to CCYYMMDD
      *
     C     *mdy          move      d1tmdy        wkcymdiso
     C                   move      wkcymdiso     wkdt
     C                   z-add     wkdt          xxtcymd
     C                   z-add     wkdt          ldtdt
      *
      * If user selected data extraction by WeekEnding date, retrieve the
      * Saturday associated with this date.
      *
     C                   if        d1dtfl = 'W'                                 If weekEnding
     C                   exsr      $wedt
     C                   if        *in92 = *on                                  If bad Saturday
     C                   seton                                        31
     C                   else
     C                   z-add     wkmdy         d1twemdy
     C                   z-add     xxsatdt       ldtdt
     C                   endif                                                  If bad Saturday
     C                   endif                                                  If weekEnding
      *
     C                   endif                                                  If bad date
     C                   endsl
      *
      * To date cannot be earlier than from date.
      *
     C                   if        *in30 = *off and
     C                             *in31 = *off and
     C                             xxtcymd < xxfcymd
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09009'
     C                   endif
     C                   endif
      *
     C                   endsr
      /eject
      *--------------------------------------------------------------------------------------------
      * Retrieve Adjustment Dates when the user has elected "all" dates and Adjustment Extraction
      *--------------------------------------------------------------------------------------------
      *
     C     $adjalldt     begsr
      *
      * Retrieve 'first' Adjustment record
      *
     C     *loval        setll     tfl023c
     C                   read      tfl023c                                92
     C                   if        *in92 = *off
     C                   z-add     baajdt        wkdt
     C                   else
     C                   z-add     20060101      wkdt
     C                   endif
      *
      * Flip to MMDDYY
      *
     C     *iso          test(d)                 wkdt                   92
     C                   if        *in92 = *off                                 If OK date
     C                   z-add     wkdt          ldfdt
     C                   move      wkdt          wkcymdiso
     C     *mdy          move      wkcymdiso     d1fmdy
     C                   else
     C                   z-add     0             d1fmdy
     C                   endif                                                  If OK date
      *
      *
      * Retrieve 'last' Product Exception record
      *
     C     *hival        setll     tfl023c
     C                   readp     tfl023c                                92
     C                   if        *in92 = *off
     C                   z-add     baajdt        wkdt
     C                   else
     C                   z-add     20060101      wkdt
     C                   endif
      *
     C                   z-add     xxsatdt       ldtdt
      *
      * Flip to MMDDYY
      *
     C     *iso          test(d)                 wkdt                   92
     C                   if        *in92 = *off                                 If OK date
     C                   z-add     wkdt          ldtdt
     C                   move      wkdt          wkcymdiso
     C     *mdy          move      wkcymdiso     d1tmdy
     C                   else
     C                   z-add     0             d1tmdy
     C                   endif                                                  If OK date
      *
     C                   endsr
      /eject
      *--------------------------------------------------------------------------------------------
      * Retrieve WeekEnding Dates when the user has elected "all" dates and WeekEnding Extraction
      *--------------------------------------------------------------------------------------------
      *
     C     $weekalldt    begsr
      *
      * Retrieve 'first' Adjustment record
      *
     C     *loval        setll     tfl023b
     C                   read      tfl023b                                92
     C                   if        *in92 = *off
     C                   z-add     bawedt        wkdt
     C                   else
     C                   z-add     20060101      wkdt
     C                   endif
      *
     C                   exsr      $wedt
     C                   z-add     xxsatdt       ldfdt
      *
      * Flip to MMDDYY
      *
     C     *iso          test(d)                 wkdt                   92
     C                   if        *in92 = *off                                 If OK date
     C                   move      wkdt          wkcymdiso
     C     *mdy          move      wkcymdiso     d1fwemdy
     C                   else
     C                   z-add     0             d1fwemdy
     C                   endif                                                  If OK date
      *
      *
      * Retrieve 'last' Product Exception record
      *
     C     *hival        setll     tfl023b
     C                   readp     tfl023b                                92
     C                   if        *in92 = *off
     C                   z-add     bawedt        wkdt
     C                   else
     C                   z-add     20060101      wkdt
     C                   endif
      *
     C                   exsr      $wedt
     C                   z-add     xxsatdt       ldtdt
      *
      * Flip to MMDDYY
      *
     C     *iso          test(d)                 wkdt                   92
     C                   if        *in92 = *off                                 If OK date
     C                   move      wkdt          wkcymdiso
     C     *mdy          move      wkcymdiso     d1twemdy
     C                   else
     C                   z-add     0             d1twemdy
     C                   endif                                                  If OK date
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Retrieve Week-ending date
      *----------------------------------------------------------------
      *
     C     $wedt         begsr
      *
     C                   call      'TF811'
     C                   parm      wkdt          xxdt
     C                   parm      0             xxsatdt
     C                   parm      0             xxyr
     C                   parm      0             xxpe
     C                   parm      0             xxwk
      *
      *
      * Get returned 'week-ending date' into MMDDYY format.
      *
     C     *iso          test(d)                 xxsatdt                92
     C                   if        *in92 = *on                                  If bad Saturday
     C                   z-add     0             wkmdy
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09229'
     C                   endif
     C                   else
      *
     C     *iso          move      xxsatdt       wkmdydt
     C                   move      wkmdydt       wkmdy
     C                   endif                                                  If bad Saturday
      *
     C                   endsr
      /eject
      *------------------------------------------------------------------------------------
      * Validate Recrod Exempt Flag
      *------------------------------------------------------------------------------------
      *
     C     $rcexfl       begsr
      *
     C                   if        d1rcexfl <> yes and
     C                             d1rcexfl <> no  and
     C                             d1rcexfl <> *blank
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09106'
     C                   endif
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Process user's request
      *---------------------------------------------------------------
      *
     C     $proc1        begsr
      *
      * Populate LDA fields.
      *
     C                   z-add     0             ldyr
     C                   z-add     0             ldwk
      *
     C                   select
     C                   when      d1dtfl = 'W'
     C                   z-add     d1fwemdy      ldfmdy
     C                   z-add     d1twemdy      ldtmdy
      *
     C                   when      d1dtfl = 'A'
     C                   z-add     d1fmdy        ldfmdy
     C                   z-add     d1tmdy        ldtmdy
     C                   endsl
      *
     C                   move      d1dtfl        lddtfl
     C                   move      d1rcexfl      ldrcexfl
     C                   out       lda
      *
      * Move the 80-character compile time array 'CMD' to an
      * 80-character field for passing as a parm with QCMDEXC.
      *
     C                   movea     cmd           cmdsbm
     C                   call      'QCMDEXC'
     C                   parm                    cmdsbm
     C                   parm                    length
      *
      * Issue the standard request submission message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09003'
     C                   endif
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command key record will be set on. So, redispaly the screen to the user.
      *
     C                   if        *in43 = *on
     C                   movel     set1          routne
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command key record will be set on. So, redispaly the screen to the user.
      *
     C                   if        *in43 = *on
     C                   movel     set1          routne
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Set on last record indicator and end job
      *----------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * F4 prompt on screen 1
      *---------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      * Record Exempt Flag
      *
     C                   select
     C                   when      fld = 'D1RCEXFL'
     C                   seton                                        52
     C                   call      'HP522'
     C                   parm      *blank        xxynfl
      *
     C                   if        xxynfl <> *blank
     C                   move      xxynfl        d1rcexfl
     C                   endif
     C                   other
      *
      * F4 not valid for this field...issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error                                        013
     C                   movel     'HS09011'     mgid(e)
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *
     C     *entry        plist
     C     d1fmdy        parm                    xxfmdy
     C     d1tmdy        parm                    xxtmdy
     C                   parm                    d1rcexfl
     C                   parm                    rtncd
      *
      *
      * Key lists
      *   None
      *
      * Retrieve/initialize "printer" fields in the LDA
      *
     C                   call      'RO891CL'
     C                   in        lda
      *
      * Initialize LDA fields
      *
     C                   z-add     0             ldyr
     C                   z-add     0             ldwk
     C                   z-add     0             ldfdt
     C                   z-add     0             ldfmdy
     C                   z-add     0             ldtdt
     C                   z-add     0             ldtmdy
     C                   out       lda
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
      * This window logic keeps the screen in the calling program from being
      * cleared.
      *
     C                   write     assume
      *
     C                   endsr
      /eject
      *****************************************************************
      * COMPILE TIME ARRAY 'CMD' USED IN QCMDEXC
      *****************************************************************
** CMD table 'CMD' submits listing
SBMJOB CMD(CALL PGM(TF4040CL)) JOB(ADJUSTMENT) JOBQ(*JOBD)
