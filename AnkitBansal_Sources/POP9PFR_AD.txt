// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POP9PFR
// ?Date: 14.08.2025 Time: 12:06:20
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?DLY029R 05/24/07 JRB Use default company number
EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('I/C');
PARAMETER(LCL.Company_Number);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(NLL.Allow_Multi_Company);
PARAMETER(NLL.Default_Printer);
PARAMETER(NLL.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('I/C');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// PAR.USR Display 1 = CND.No
PAR.USR_Display_1 = 'N';

// LCL.Text USR 6 = CON.DUMMY
LCL.Text_USR_6 = 'DUMMY';

// WRK.Year Code = PAR.Date From             USR *YEAR
WRK.Year_Code = DATEDTLS(PAR.Date_From_USR 'YR' 1111111 'NONE' 'N' 1);

// LCL.Year Alpha (YYYY) USR = WRK.Year Code
LCL.Year_Alpha_YYYY_USR = WRK.Year_Code;

// LCL.Month/Year NBR        USR = PAR.Date From             USR
LCL.Month_Year_NBR_USR = PAR.Date_From_USR;

// LCL.Text USR 4 = LCL.Month/Year NBR        USR
LCL.Text_USR_4 = LCL.Month_Year_NBR_USR;

// LCL.AS Prod Date YYYYMMDD = CONCAT(LCL.Year Alpha (YYYY) USR,LCL.Text USR 4,CON.*ZERO)
LCL.AS_Prod_Date_YYYYMMDD = LCL.Year_Alpha_YYYY_USR + LCL.Text_USR_4 (*ZERO);

// LCL.From Prod Date YYYYMMDD = CVTVAR(LCL.AS Prod Date YYYYMMDD)
LCL.From_Prod_Date_YYYYMMDD = CVTVAR(LCL.AS_Prod_Date_YYYYMMDD);

// WRK.Year Code = PAR.Date To               USR *YEAR
WRK.Year_Code = DATEDTLS(PAR.Date_To_USR 'YR' 1111111 'NONE' 'N' 1);

// LCL.Year Alpha (YYYY) USR = WRK.Year Code
LCL.Year_Alpha_YYYY_USR = WRK.Year_Code;

// LCL.Month/Year NBR        USR = PAR.Date To               USR
LCL.Month_Year_NBR_USR = PAR.Date_To_USR;

// LCL.Text USR 4 = LCL.Month/Year NBR        USR
LCL.Text_USR_4 = LCL.Month_Year_NBR_USR;

// LCL.AS Prod Date YYYYMMDD = CONCAT(LCL.Year Alpha (YYYY) USR,LCL.Text USR 4,CON.*ZERO)
LCL.AS_Prod_Date_YYYYMMDD = LCL.Year_Alpha_YYYY_USR + LCL.Text_USR_4 (*ZERO);

// LCL.To Prod Date YYYYMMDD = CVTVAR(LCL.AS Prod Date YYYYMMDD)
LCL.To_Prod_Date_YYYYMMDD = CVTVAR(LCL.AS_Prod_Date_YYYYMMDD);

//?USER: Record selection processing

CASE;

// IF DB1.PT Prod Date YYYYMMDD LT LCL.From Prod Date YYYYMMDD
IF DB1.PT_Prod_Date_YYYYMMDD < LCL.From_Prod_Date_YYYYMMDD;

// OR DB1.PT Prod Date YYYYMMDD GT LCL.To Prod Date YYYYMMDD
OR DB1.PT_Prod_Date_YYYYMMDD > LCL.To_Prod_Date_YYYYMMDD;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF PAR.PT Shift Number NE WRK.Blank for 4           USR
IF PAR.PT_Shift_Number <> WRK.Blank_for_4_USR;

CASE;

// IF DB1.PT Shift Number NE PAR.PT Shift Number
IF DB1.PT_Shift_Number <> PAR.PT_Shift_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Process top of page

// TOP.Date From             USR = PAR.Date From             USR
TOP_Date_From_USR = PAR.Date_From_USR;

// TOP.Date To               USR = PAR.Date To               USR
TOP_Date_To_USR = PAR.Date_To_USR;

// TOP.PT Shift Number = PAR.PT Shift Number
TOP_PT_Shift_Number = PAR.PT_Shift_Number;

//?USER: Print required level headings

// SUPPRESSED PRINT Company Number header format

// SUPPRESSED PRINT PT Prod Date YYYYMMDD header format

// SUPPRESSED PRINT PT Product Code header format

// SUPPRESSED PRINT PT Shift Number header format

//?USER: On print of detail format

//?Dont accum Dummy record.
CASE;

// IF DB1.PT Producer/Farm Code NE LCL.Text USR 6
IF DB1.PT_Producer_Farm_Code <> LCL.Text_USR_6;

// LCL.Case Dtl total 1 = LCL.Case Dtl total 1 + CON.1
LCL.Case_Dtl_total_1 = LCL.Case_Dtl_total_1 + 1;

ENDIF;

//?USER: Print required level totals

CASE;

IF NEW PT_Shift_Number;
// LCL.Production Date = CUR.PT Prod Date YYYYMMDD
LCL.Production_Date = CUR.PT_Prod_Date_YYYYMMDD;

//?Set Century.
CASE;

// IF LCL.Production Date is < 410101
IF LCL.Production_Date < 410101;

// LCL.Production Date = LCL.Production Date + CON.1000000
LCL.Production_Date = LCL.Production_Date + 1000000;

ENDIF;

EXECUTE FUNCTION(RTV U/M Primary        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1647610;
PARAMETER(LCL.Company_Number);
PARAMETER(CUR.PT_Product_Code);
PARAMETER(CUR.UOM_Primary);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CUR.Case Dtl total 1 = LCL.Case Dtl total 1
CUR.Case_Dtl_total_1 = LCL.Case_Dtl_total_1;

// LCL.Qty Produced          USR = CON.*ZERO
LCL.Qty_Produced_USR = *ZERO;

// LCL.Rework Quantity  7.0  USR = CON.*ZERO
LCL.Rework_Quantity_7_0_USR = *ZERO;

EXECUTE FUNCTION(Rtv Trans qty,rework  RT) TYPE(RTVOBJ) FILE(CAB7CPP)           AC1647517;
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Production_Date);
PARAMETER(CUR.PT_Shift_Number);
PARAMETER(CUR.PT_Product_Code);
PARAMETER('RR');
PARAMETER(LCL.Qty_Produced_USR);
PARAMETER(LCL.Rework_Quantity_7_0_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Qty Produced          USR = CON.*ZERO
 PAR.Qty_Produced_USR = *ZERO;

 // PAR.Rework Quantity  7.0  USR = CON.*ZERO
 PAR.Rework_Quantity_7_0_USR = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.Transaction Quantity is Greater than zero
 IF DB1.Transaction_Quantity > *ZERO;

 // PAR.Qty Produced          USR = PAR.Qty Produced          USR + DB1.Transaction Quantity
 PAR.Qty_Produced_USR = PAR.Qty_Produced_USR + DB1.Transaction_Quantity;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Rework Quantity  7.0  USR = PAR.Rework Quantity  7.0  USR + DB1.Transaction Quantity
 PAR.Rework_Quantity_7_0_USR = PAR.Rework_Quantity_7_0_USR + DB1.Transaction_Quantity;

 ENDIF;

}


// CUR.Trans Qty plus 1 = LCL.Qty Produced          USR
CUR.Trans_Qty_plus_1 = LCL.Qty_Produced_USR;

// CUR.Trans qty minus 1 = LCL.Rework Quantity  7.0  USR
CUR.Trans_qty_minus_1 = LCL.Rework_Quantity_7_0_USR;

// CUR.Variance Qty 1 = CUR.Case Dtl total 1 - CUR.Trans Qty plus 1
CUR.Variance_Qty_1 = CUR.Case_Dtl_total_1 - CUR.Trans_Qty_plus_1;

// CUR.Trans Qty Total 1 = CUR.Trans Qty plus 1 + CUR.Trans qty minus 1
CUR.Trans_Qty_Total_1 = CUR.Trans_Qty_plus_1 + CUR.Trans_qty_minus_1;

// CUR.Variance Total 1 = CUR.Case Dtl total 1 - CUR.Trans Qty Total 1
CUR.Variance_Total_1 = CUR.Case_Dtl_total_1 - CUR.Trans_Qty_Total_1;

// LCL.Case Dtl total 1 = CON.*ZERO
LCL.Case_Dtl_total_1 = *ZERO;

// Print PT Shift Number totals format
PRINT PT Shift Number totals format;

CASE;

// IF CUR.PT Shift Number is Shift 1
IF CUR.PT_Shift_Number = '1';

// NXT.Case Dtl total 1 = NXT.Case Dtl total 1 + CUR.Case Dtl total 1
NXT.Case_Dtl_total_1 = NXT.Case_Dtl_total_1 + CUR.Case_Dtl_total_1;

// NXT.Trans Qty plus 1 = NXT.Trans Qty plus 1 + CUR.Trans Qty plus 1
NXT.Trans_Qty_plus_1 = NXT.Trans_Qty_plus_1 + CUR.Trans_Qty_plus_1;

// NXT.Variance Qty 1 = NXT.Variance Qty 1 + CUR.Variance Qty 1
NXT.Variance_Qty_1 = NXT.Variance_Qty_1 + CUR.Variance_Qty_1;

// NXT.Trans qty minus 1 = NXT.Trans qty minus 1 + CUR.Trans qty minus 1
NXT.Trans_qty_minus_1 = NXT.Trans_qty_minus_1 + CUR.Trans_qty_minus_1;

// NXT.Trans Qty Total 1 = NXT.Trans Qty Total 1 + CUR.Trans Qty Total 1
NXT.Trans_Qty_Total_1 = NXT.Trans_Qty_Total_1 + CUR.Trans_Qty_Total_1;

// NXT.Variance Total 1 = NXT.Variance Total 1 + CUR.Variance Total 1
NXT.Variance_Total_1 = NXT.Variance_Total_1 + CUR.Variance_Total_1;

// IF *OTHERWISE
IF *OTHERWISE;

// NXT.Case Dtl total 2 = NXT.Case Dtl total 2 + CUR.Case Dtl total 1
NXT.Case_Dtl_total_2 = NXT.Case_Dtl_total_2 + CUR.Case_Dtl_total_1;

// NXT.Trans Qty plus 2 = NXT.Trans Qty plus 2 + CUR.Trans Qty plus 1
NXT.Trans_Qty_plus_2 = NXT.Trans_Qty_plus_2 + CUR.Trans_Qty_plus_1;

// NXT.Variance Qty 2 = NXT.Variance Qty 2 + CUR.Variance Qty 1
NXT.Variance_Qty_2 = NXT.Variance_Qty_2 + CUR.Variance_Qty_1;

// NXT.Trans qty minus 2 = NXT.Trans qty minus 2 + CUR.Trans qty minus 1
NXT.Trans_qty_minus_2 = NXT.Trans_qty_minus_2 + CUR.Trans_qty_minus_1;

// NXT.Trans Qty Total 2 = NXT.Trans Qty Total 2 + CUR.Trans Qty Total 1
NXT.Trans_Qty_Total_2 = NXT.Trans_Qty_Total_2 + CUR.Trans_Qty_Total_1;

// NXT.Variance Total 2 = NXT.Variance Total 2 + CUR.Variance Total 1
NXT.Variance_Total_2 = NXT.Variance_Total_2 + CUR.Variance_Total_1;

ENDIF;

ENDIF;

// SUPPRESSED PRINT PT Product Code totals format

CASE;

IF NEW PT_Prod_Date_YYYYMMDD;
// CUR.Shift Number UPL = CON.1
CUR.Shift_Number_UPL = 1;

// CUR.Shift Number = CON.2
CUR.Shift_Number = 2;

// Print PT Prod Date YYYYMMDD totals format
PRINT PT Prod Date YYYYMMDD totals format;

// NXT.Case Dtl Final Tot =       *
NXT.Case_Dtl_Final_Tot = ( NXT.Case_Dtl_Final_Tot + CUR.Case_Dtl_total_1 )                         +
+ CUR.Case_Dtl_total_2;

// NXT.Variance Final tot =       *
NXT.Variance_Final_tot = ( NXT.Variance_Final_tot + CUR.Trans_Qty_Total_1 )                        +
+ CUR.Trans_Qty_Total_2;

// NXT.USR Difference Amount =       *
NXT.USR_Difference_Amount = ( NXT.USR_Difference_Amount + CUR.Variance_Total_1 )                   +
+ CUR.Variance_Total_2;

// NXT.Trans qty + Final Tot =       *
NXT.Trans_qty_+_Final_Tot = ( NXT.Trans_qty_+_Final_Tot + CUR.Trans_Qty_plus_1 )                   +
+ CUR.Trans_Qty_plus_2;

// NXT.Trans qty - Final Tot =       *
NXT.Trans_qty_Final_Tot = ( NXT.Trans_qty_Final_Tot + CUR.Trans_qty_minus_1 )                      +
+ CUR.Trans_qty_minus_2;

// NXT.Variance qty final tot =       *
NXT.Variance_qty_final_tot = ( NXT.Variance_qty_final_tot + CUR.Variance_Qty_1 )                   +
+ CUR.Variance_Qty_2;

// CUR.Case Dtl total 1 = CON.*ZERO
CUR.Case_Dtl_total_1 = 0;

// CUR.Trans Qty plus 1 = CON.*ZERO
CUR.Trans_Qty_plus_1 = *ZERO;

// CUR.Variance Qty 1 = CON.*ZERO
CUR.Variance_Qty_1 = *ZERO;

// CUR.Trans qty minus 1 = CON.*ZERO
CUR.Trans_qty_minus_1 = 0;

// CUR.Trans Qty Total 1 = CON.*ZERO
CUR.Trans_Qty_Total_1 = 0;

// CUR.Variance Total 1 = CON.*ZERO
CUR.Variance_Total_1 = *ZERO;

// CUR.Case Dtl total 2 = CON.*ZERO
CUR.Case_Dtl_total_2 = 0;

// CUR.Trans Qty plus 2 = CON.*ZERO
CUR.Trans_Qty_plus_2 = *ZERO;

// CUR.Variance Qty 2 = CON.*ZERO
CUR.Variance_Qty_2 = *ZERO;

// CUR.Trans qty minus 2 = CON.*ZERO
CUR.Trans_qty_minus_2 = 0;

// CUR.Trans Qty Total 2 = CON.*ZERO
CUR.Trans_Qty_Total_2 = 0;

// CUR.Variance Total 2 = CON.*ZERO
CUR.Variance_Total_2 = 0;

ENDIF;

// SUPPRESSED PRINT Company Number totals format

