// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKBWPVR
// ?Date: 14.08.2025 Time: 02:51:09
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?rmc added price type to screen and pass to cl      11/23/07
EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

//?USER: Load screen

CASE;

// IF WRK.First Time Flag Usr EQ WRK.Blank USR
IF WRK.First_Time_Flag_Usr = WRK.Blank_USR;

// *MO.VE             1183529*Bu = ilt. in functions
DTL.BOH_Company_Number = WRK.CC_Company_Number;

// *MO.VE             1183529*Bu = ilt. in functions
WRK.Display_Print_Prompt_Usr = 'Y';

// *MO.VE             1183529*Bu = ilt. in functions
WRK.First_Time_Flag_Usr = 'Y';

// *MO.VE             1183529*Bu = ilt. in functions
DTL.CT_Source_Type = 'E';

// *RT.VCND           1182898*Bu = Condition name of ilt. in functions
DTL.SR_Type_Desc = RTVCND(DTL.CT_Source_Type);

ENDIF;

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(WRK.Oms_Name);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


// *MO.VE             1183529*Bu = ilt. in functions
DTL.Oms_Name = WRK.Oms_Name;

//?CALC: Screen function fields

EXECUTE FUNCTION(Rtv Target Var        RT) TYPE(RTVOBJ) FILE(PKDPREP)           AB1179603;
PARAMETER(DTL.FZ_Code);
PARAMETER(DTL.FZ_Description);
PARAMETER(WRK.FZ_Target_Var_Live_CWT);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Producer Name         DRV) TYPE(DRVFLD)                        AB1100361;
PARAMETER(DTL.Producer_Name_DRV);
PARAMETER(DTL.PD_Producer_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.Producer_Name_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// *RT.VCND           1182898*Bu = Condition name of ilt. in functions
DTL.SR_Type_Desc = RTVCND(DTL.CT_Source_Type);

EXECUTE FUNCTION(Rtv Source Desc       RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1124642;
PARAMETER(DTL.SR_Source_Code);
PARAMETER(DTL.SR_Description);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: User defined action

// Call program Pmt Print Options Size XF.
CALL PROGRAM(Pmt Print Options Size XF) ('PDV8PVR');
PARAMETER('Freight Zone Performance');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER('N');
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('P/S');
PARAMETER(1);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// WRK.Date Alpha USR = CVTVAR(DTL.TH Kill Date)
WRK.Date_Alpha_USR = CVTVAR(DTL.TH_Kill_Date);

// WRK.Date Alpha Usr 2 = CVTVAR(DTL.Kill Date Usr)
WRK.Date_Alpha_Usr_2 = CVTVAR(DTL.Kill_Date_Usr);

// Execute command - 'SBM Prt Freight Zone Performance Report'
EXECUTE COMMAND(PRK0655);
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.CT_Source_Type);
PARAMETER(DTL.SR_Source_Code);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.FZ_Code);
PARAMETER(WRK.Date_Alpha_USR);
PARAMETER(WRK.Date_Alpha_Usr_2);
PARAMETER(DTL.Oms_System_Value_Alpha);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(DTL.Price_Type_USR);

ENDIF;

