// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POXJDFR
// ?Date: 14.08.2025 Time: 03:39:28
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('YR');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.Production Line Code = CON.*BLANK
LCL.Production_Line_Code = *BLANK;

// LCL.Select Options USR = CON.5=Display Detail
LCL.Select_Options_USR = '5=Display Detail';

// LCL.Select Options USR = CONCAT(LCL.Select Options USR,CON.7=Production Review,CON.1)
LCL.Select_Options_USR = LCL.Select_Options_USR + '7=Production Review' (1);

// LCL.Select Options USR = CONCAT(LCL.Select Options USR,CON.9=Inventory Reconcile,CON.1)
LCL.Select_Options_USR = LCL.Select_Options_USR + '9=Inventory Reconcile' (1);

//?USER: Initialize subfile control

EXECUTE FUNCTION(Rtv Dept Info         RT) TYPE(RTVOBJ) FILE(POCRCPP)           AC1671635;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER(CTL.Head_Cut);
PARAMETER(CTL.Cold_Weight);
PARAMETER(CTL.Avg_Cold_Weight);
PARAMETER(CTL.Production_Standard_Yld);
PARAMETER(CTL.Actual_Yield);
PARAMETER(CTL.Yield_Variance);
PARAMETER(CTL.Weight_Variance);
PARAMETER(CTL.Total_Line_Weight);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 EXECUTE FUNCTION(Rtv Dept Total Wgt    RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1671636;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(PAR.Total_Line_Weight);
 {
  //?USER: Process Data record

  // PAR.Total Line Weight = PAR.Total Line Weight + DB1.Total Line Weight
  PAR.Total_Line_Weight = PAR.Total_Line_Weight + DB1.Total_Line_Weight;

 }

}


// LCL.Display Flag = CND.No
LCL.Display_Flag = 'N';

//?USER: Initialize subfile record from DBF record

EXECUTE FUNCTION(Rtv Comp Desc         RT) TYPE(RTVOBJ) FILE(POCYREP)           AC1670001;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Yld_Component_Code);
PARAMETER(RCD.Yld_Component_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Production Line Code NE DB1.Production Line Code
IF LCL.Production_Line_Code <> DB1.Production_Line_Code;

EXECUTE FUNCTION(Rtv Line Yld Info     RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1670640;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Production_Line_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Production_Shift);
PARAMETER(WRK.Start_Weight);
PARAMETER(WRK.Start_Pieces);
PARAMETER(WRK.Pct_Pieces_Converted);
PARAMETER(RCD.Total_Line_Weight);
PARAMETER(RCD.Production_Standard_Yld);
PARAMETER(RCD.Actual_Yield);
PARAMETER(RCD.Yield_Variance);
PARAMETER(RCD.Weight_Variance);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Production Line Code = DB1.Production Line Code
LCL.Production_Line_Code = DB1.Production_Line_Code;

// RCD.Change Code = CND.Yes
RCD.Change_Code = 'Y';

CASE;

// IF LCL.Display Flag is No
IF LCL.Display_Flag = 'N';

// LCL.Display Flag = CND.Yes
LCL.Display_Flag = 'Y';

// IF LCL.Display Flag is Yes
IF LCL.Display_Flag = 'Y';

// LCL.Display Flag = CND.No
LCL.Display_Flag = 'N';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Total Line Weight = CON.*ZERO
RCD.Total_Line_Weight = *ZERO;

// RCD.Production Standard Yld% = CON.*ZERO
RCD.Production_Standard_Yld = *ZERO;

// RCD.Actual Yield = CON.*ZERO
RCD.Actual_Yield = *ZERO;

// RCD.Yield Variance = CON.*ZERO
RCD.Yield_Variance = *ZERO;

// RCD.Weight Variance = CON.*ZERO
RCD.Weight_Variance = *ZERO;

// RCD.Production Line Code = CON.*BLANK
RCD.Production_Line_Code = *BLANK;

// RCD.Change Code = CND.No
RCD.Change_Code = 'N';

ENDIF;

// RCD.Display Flag = LCL.Display Flag
RCD.Display_Flag = LCL.Display_Flag;

//?USER: Process subfile record (Pre-confirm)

EXECUTE FUNCTION(Rtv Yld Profile Dft   RT) TYPE(RTVOBJ) FILE(POCXREP)           AC1665295;
PARAMETER(JOB.*USER);
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Department_Code);
PARAMETER(LCL.Production_Line_Code);
PARAMETER(LCL.User_Department);
PARAMETER(LCL.User_Access);
PARAMETER(LCL.Count_USR);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 // AND DB1.User Line In Process is yes
 AND DB1.User_Line_In_Process = 'Y';

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Count USR = PAR.Count USR + CON.1
 PAR.Count_USR = PAR.Count_USR + 1;

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 ENDIF;

}


EXECUTE FUNCTION(Rtv Dte/Shft/PrcSts 2 RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1672066;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Production_Line_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Production_Shift);
PARAMETER(LCL.YDL_Post_Status);
PARAMETER(LCL.YDL_Process_Status);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


//?2=Reopen Line
CASE;

// IF RCD.*SFLSEL is Option 2
IF RCD.*SFLSEL = '2'/'2';

EXECUTE FUNCTION(Rtv Yld Profile Line  RT) TYPE(RTVOBJ) FILE(POCXREP)           AC2007708;
PARAMETER(JOB.*USER);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Production_Line_Code);
PARAMETER(WRK.User_Department);
PARAMETER(WRK.User_Access);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Change Post and Process Status
CASE;

// IF WRK.User Department is Accounting
IF WRK.User_Department = 'AC';

// OR JOB.*USER is Rose/Purva
OR JOB.*USER = 'ISPURVAP'/'ISRCENT';

EXECUTE FUNCTION(Rtv Process Sts       RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1688096;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Production_Shift);
PARAMETER(RCD.Production_Line_Code);
PARAMETER(LCL.YDL_Post_Status);
PARAMETER(LCL.YDL_Process_Status);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Process Status = 04 and Post Status = O
CASE;

// IF LCL.YDL Process Status is 04=Yield Approved AC
IF LCL.YDL_Process_Status = '04';

// AND LCL.YDL Post Status is Posted
AND LCL.YDL_Post_Status = 'P';

EXECUTE FUNCTION(Val Reopen Line       RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC2007691;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Production_Line_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.Production Date GT PAR.Production Date
 IF DB1.Production_Date > PAR.Production_Date;

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

 ENDIF;

}


//?Next days record does not exist.
CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

EXECUTE FUNCTION(Chg Process/Post Sts  CH) TYPE(CHGOBJ) FILE(POCSCPP)           AC1686723;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Production_Line_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Production_Shift);
PARAMETER('O');
PARAMETER(03);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?Next days record does not exist.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

//?Process Status = 04 and Post Status = O
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

//?Change Post and Process Status
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?5=Display Detail
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

// Call program Dsp Yld Approval II   DF.
CALL PROGRAM(Dsp Yld Approval II   DF) ('PPEKDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Production_Shift);
PARAMETER(RCD.Production_Line_Code);
PARAMETER(LCL.YDL_Post_Status);
PARAMETER(LCL.YDL_Process_Status);
PARAMETER(LCL.Record_Found_USR);
PARAMETER(WRK.Yld_Program_USR);
PARAMETER('PM');
PARAMETER(LCL.User_Access);

ENDIF;

//?7=Production Review
CASE;

// IF RCD.*SFLSEL is Option 7
IF RCD.*SFLSEL = '7'/'7';

// Call program Zzz Production Review DF.
CALL PROGRAM(Zzz Production Review DF) ('POVTDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Production_Line_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Production_Shift);
PARAMETER(LCL.YDL_Post_Status);
PARAMETER(LCL.YDL_Process_Status);
PARAMETER(LCL.Record_Found_USR);
PARAMETER(WRK.Yld_Program_USR);
PARAMETER('PM');
PARAMETER(LCL.User_Access);

ENDIF;

//?8=Display Loin Boning Worksheet
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

// Call program Zzz YDLD Worksheet    DF.
CALL PROGRAM(Zzz YDLD Worksheet    DF) ('PPEODFR');
PARAMETER(RCD.Company_Number);
PARAMETER('LOINS');
PARAMETER('BONING');
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Production_Shift);
PARAMETER(LCL.Yld_Program_USR);
PARAMETER('PM');
PARAMETER('R');

ENDIF;

//?9=Inventory Reconcile
CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

// Call program Dsp Inv Reconcile     DF.
CALL PROGRAM(Dsp Inv Reconcile     DF) ('POVVDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Production_Line_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Production_Shift);
PARAMETER(LCL.YDL_Post_Status);
PARAMETER(LCL.YDL_Process_Status);
PARAMETER(LCL.Record_Found_USR);
PARAMETER(WRK.Yld_Program_USR);
PARAMETER('PM');
PARAMETER(LCL.User_Access);

ENDIF;

//?C=Recalculate Yields
CASE;

// IF RCD.*SFLSEL is *Customer Summary Inquiry
IF RCD.*SFLSEL = 'C';

// Call program Rtv User Code Model   XF.
CALL PROGRAM(Rtv User Code Model   XF) ('POYBXFR');
PARAMETER(JOB.*USER);
PARAMETER(LCL.User_Code_Model);

CASE;

// IF LCL.User Code Model is IS
IF LCL.User_Code_Model = 'ISBGUTI';

// OR LCL.User Code Model is Production Scheduling
OR LCL.User_Code_Model = 'PORKSCHE';

// OR LCL.User Code Model is Accounting
OR LCL.User_Code_Model = 'PORKACCT6';

EXECUTE FUNCTION(Rtv Dte/Shft/PrcSts 2 RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1672066;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Production_Line_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Production_Shift);
PARAMETER(LCL.YDL_Post_Status);
PARAMETER(LCL.YDL_Process_Status);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF RCD.Department Code is Loin Boning
IF RCD.Department_Code = 'LOINS';

EXECUTE FUNCTION(Rtv to Upd Dly Ln Hdr RT) TYPE(RTVOBJ) FILE(PPAICPP)           AC1687792;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Production_Line_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Production_Shift);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.YDLD Zone Sts is Bone Less Zones
 IF DB1.YDLD_Zone_Sts = '3'/'4'/'5'/'6';

 // PAR.Bone Ls Zone Start Wgt = PAR.Bone Ls Zone Start Wgt + DB1.YDLD Weight
 PAR.Bone_Ls_Zone_Start_Wgt = PAR.Bone_Ls_Zone_Start_Wgt + DB1.YDLD_Weight;

 // PAR.Bone Ls Zone Piece Count = PAR.Bone Ls Zone Piece Count + DB1.YDLD Pieces
 PAR.Bone_Ls_Zone_Piece_Count = PAR.Bone_Ls_Zone_Piece_Count + DB1.YDLD_Pieces;

 // IF DB1.YDLD Zone Sts is Bone In Zones
 IF DB1.YDLD_Zone_Sts = '1'/'2';

 // WRK.Weight Prod 1 USR = WRK.Weight Prod 1 USR + DB1.YDLD Weight
 WRK.Weight_Prod_1_USR = WRK.Weight_Prod_1_USR + DB1.YDLD_Weight;

 // WRK.Pieces Prod 1 USR = WRK.Pieces Prod 1 USR + DB1.YDLD Pieces
 WRK.Pieces_Prod_1_USR = WRK.Pieces_Prod_1_USR + DB1.YDLD_Pieces;

 ENDIF;

 //?USER: Exit processing

 CASE;

 // IF WRK.Pieces Prod 1 USR is GT Zero
 IF WRK.Pieces_Prod_1_USR > *ZERO;

 // PAR.Bone In Zone Avg Loin Wgt = WRK.Weight Prod 1 USR / WRK.Pieces Prod 1 USR *Rounded
 PAR.Bone_In_Zone_Avg_Loin_Wgt = WRK.Weight_Prod_1_USR / WRK.Pieces_Prod_1_USR 'H';

 ENDIF;

 CASE;

 // IF PAR.Bone Ls Zone Piece Count is GT Zero
 IF PAR.Bone_Ls_Zone_Piece_Count > *ZERO;

 //?Finished Pieces = sum (pieces for non-credit items)
 EXECUTE FUNCTION(Rtv Finish Pce Count  RT) TYPE(RTVOBJ) FILE(POCPCPP)           AC1687844;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(PAR.Conv_Finished_Pc_Count);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?SEL:  Non Credit Items
  CASE;

  // IF DB1.Credit Item Status is Not Yes
  IF DB1.Credit_Item_Status = *BLANK/'N';

  // PAR.Conv: Finished Pc Count = PAR.Conv: Finished Pc Count + DB1.Yld Transaction Pieces
  PAR.Conv_Finished_Pc_Count = PAR.Conv_Finished_Pc_Count + DB1.Yld_Transaction_Pieces;

  ENDIF;

 }

 //?06/10/04 Adjust for Parial Combo pieces (8/17/04 non credit items)
 EXECUTE FUNCTION(Rtv Partial Tots      RT) TYPE(RTVOBJ) FILE(POCOCPP)           AC1697620;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(LCL.Pieces_Adjusted);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?8/17/04 Dont do for Credit Items
  CASE;

  // IF DB1.Credit Item Status is Not Yes
  IF DB1.Credit_Item_Status = *BLANK/'N';

  CASE;

  // IF DB1.Yld Inv Balance Type is Finished Good
  IF DB1.Yld_Inv_Balance_Type = 'FG';

  // OR DB1.Yld Inv Balance Type is Partial
  OR DB1.Yld_Inv_Balance_Type = 'PT';

  // OR DB1.Yld Inv Balance Type is WIP Reject
  OR DB1.Yld_Inv_Balance_Type = 'RJ';

  //?FG
  CASE;

  // IF DB1.Yld Inv Balance Type is Finished Good
  IF DB1.Yld_Inv_Balance_Type = 'FG';

  //?Reduce by delete pend wgt so reverse the sign
  // WRK.Wgt Ending Inv USR = CON.*ZERO - DB1.Delete Pending Wgt
  WRK.Wgt_Ending_Inv_USR = 0 - DB1.Delete_Pending_Wgt;

  ENDIF;

  //?11/29/04 PKD Should not get credit for Beginning Inv that is
  //?             not used.
  //?11/30/04 PKD Added Delete Pending to the calculation.
  //?Partial
  CASE;

  // IF DB1.Yld Inv Balance Type is Partial
  IF DB1.Yld_Inv_Balance_Type = 'PT';

  // WRK.Wgt Ending Inv USR = DB1.Partial Produced Wgt - DB1.Delete Pending Wgt
  WRK.Wgt_Ending_Inv_USR = DB1.Partial_Produced_Wgt - DB1.Delete_Pending_Wgt;

  ENDIF;

  //?11/09/04 PKD Should not get credit for used rejected wip when
  //?             calculating Finished Bone Less pieces.
  //?Reject
  CASE;

  // IF DB1.Yld Inv Balance Type is WIP Reject
  IF DB1.Yld_Inv_Balance_Type = 'RJ';

  // WRK.Wgt Ending Inv USR = CON.*ZERO - DB1.Delete Pending Wgt
  WRK.Wgt_Ending_Inv_USR = 0 - DB1.Delete_Pending_Wgt;

  ENDIF;

  EXECUTE FUNCTION(RTV Pces/Bag,Bag/Unit  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1480428;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(WRK.Description_Line_One);
  PARAMETER(WRK.Unit_Weight);
  PARAMETER(WRK.Piece_Count_Item);
  PARAMETER(WRK.Pieces_Per_Bag);
  PARAMETER(WRK.Bags_Per_Unit);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // WRK.Weight Rate 1 = WRK.Wgt Ending Inv USR / WRK.Unit Weight *
  WRK.Unused_Weight_Rate_1 = WRK.Wgt_Ending_Inv_USR / WRK.Unit_Weight;

  // Pieces Adjusted
  WRK.Pieces_Adjusted = ( WRK.Unused_Weight_Rate_1 * WRK.Pieces_Per_Bag )
  * WRK.Bags_Per_Unit;

  // PAR.Pieces Adjusted = PAR.Pieces Adjusted + WRK.Pieces Adjusted
  PAR.Pieces_Adjusted = PAR.Pieces_Adjusted + WRK.Pieces_Adjusted;

  ENDIF;

  ENDIF;

 }

 // PAR.Conv: Finished Pc Count = PAR.Conv: Finished Pc Count + LCL.Pieces Adjusted
 PAR.Conv_Finished_Pc_Count = PAR.Conv_Finished_Pc_Count + LCL.Pieces_Adjusted;

 //?Loins returned from Cut= finished pieces - zones 3-6 pieces
 // PAR.Loins Returned From Cut = PAR.Conv: Finished Pc Count - PAR.Bone Ls Zone Piece Count
 PAR.Loins_Returned_From_Cut = PAR.Conv_Finished_Pc_Count - PAR.Bone_Ls_Zone_Piece_Count;

 //?Total Start weight Loins Returned from cut = avg loin wgt * loins rtrnd
 // PAR.Start Wgt Returned f/Cut = PAR.Bone In Zone Avg Loin Wgt * PAR.Loins Returned From Cut *
 PAR.Start_Wgt_Returned_f_Cut = PAR.Bone_In_Zone_Avg_Loin_Wgt
 * PAR.Loins_Returned_From_Cut;

 //?Tot Start weight= (SW Loins Returned from cut + SW Bone Ls ) * 1.02
 // Compute: Start Wgt
 PAR.Start_Weight = PAR.Bone_Ls_Zone_Start_Wgt + PAR.Start_Wgt_Returned_f_Cut;

 //?02/22/05 PKD Do not add 1.02
 //?Hogs Cut = CUT dept head cut
 EXECUTE FUNCTION(Rtv Head Cut/Cold Wgt RT) TYPE(RTVOBJ) FILE(POCRCPP)           AC1665520;
 PARAMETER(DB1.Company_Number);
 PARAMETER('CUT');
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(PAR.Hogs_Cut);
 PARAMETER(NLL.Cold_Weight);
 PARAMETER(NLL.Avg_Cold_Weight);
 PARAMETER(NLL.Start_Weight);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Chg Worksheet Fld RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1688092;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(PAR.Start_Weight);
 PARAMETER(PAR.Hogs_Cut);
 PARAMETER(PAR.Bone_In_Zone_Avg_Loin_Wgt);
 PARAMETER(PAR.Bone_Ls_Zone_Start_Wgt);
 PARAMETER(PAR.Bone_Ls_Zone_Piece_Count);
 PARAMETER(PAR.Conv_Finished_Pc_Count);
 PARAMETER(PAR.Loins_Returned_From_Cut);
 PARAMETER(PAR.Start_Wgt_Returned_f_Cut);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Daily Line Header CH) TYPE(CHGOBJ) FILE(POCSCPP)           AC1664740;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Department_Code);
  PARAMETER(DB1.Production_Line_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Production_Shift);
  PARAMETER(PAR.Start_Weight);
  PARAMETER(DB1.Start_Pieces);
  PARAMETER(DB1.Ending_Weight);
  PARAMETER(DB1.Converting_Start_Weight);
  PARAMETER(DB1.Converting_End_Weight);
  PARAMETER(DB1.Pct_Pieces_Converted);
  PARAMETER(DB1.Total_Line_Weight);
  PARAMETER(DB1.Production_Standard_Yld);
  PARAMETER(DB1.Actual_Yield);
  PARAMETER(DB1.Yield_Variance);
  PARAMETER(DB1.Weight_Variance);
  PARAMETER(DB1.YDL_Comment);
  PARAMETER(DB1.YDL_Post_Status);
  PARAMETER(DB1.YDL_Process_Status);
  PARAMETER(PAR.Hogs_Cut);
  PARAMETER(PAR.Bone_In_Zone_Avg_Loin_Wgt);
  PARAMETER(PAR.Bone_Ls_Zone_Start_Wgt);
  PARAMETER(PAR.Bone_Ls_Zone_Piece_Count);
  PARAMETER(PAR.Conv_Finished_Pc_Count);
  PARAMETER(PAR.Loins_Returned_From_Cut);
  PARAMETER(PAR.Start_Wgt_Returned_f_Cut);
  PARAMETER(DB1.YDLH_Unused_Wgt);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 //?Upd Start Wt for Cut Biloin Loincnv with Loins Boning SW
 EXECUTE FUNCTION(Rtv Upd Comp Start Wt RT) TYPE(RTVOBJ) FILE(POCYREP)           AC1684735;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Production_Line_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Production_Shift);
 PARAMETER(PAR.Start_Weight);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Start Weight      RT) TYPE(RTVOBJ) FILE(POCZREP)           AC1669973;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Yld_Component_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(PAR.Start_Weight);
  PARAMETER('AC');
  {
   //?USER: Process Data record

   CASE;

   // IF PAR.PLYC Type EQ DB1.PLYC Type
   IF PAR.PLYC_Type = DB1.PLYC_Type;

   EXECUTE FUNCTION(Chg Yld Daily Wgt     RT) TYPE(RTVOBJ) FILE(POC0CPP)           AC1669642;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Department_Code);
   PARAMETER(DB1.Production_Line_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Production_Shift);
   PARAMETER(DB1.Yld_Component_Code);
   PARAMETER(PAR.YDL_Yld_Comp_Weight);
   {
    //?USER: Processing if Data record not found

    EXECUTE FUNCTION(Crt Yld Daily Yld Cmp CR) TYPE(CRTOBJ) FILE(POC0CPP)           AC1669587;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Production_Line_Code);
    PARAMETER(PAR.Production_Date);
    PARAMETER(PAR.Production_Shift);
    PARAMETER(PAR.Yld_Component_Code);
    PARAMETER(PAR.YDL_Yld_Comp_Weight);
    PARAMETER(PAR.YDL_Yld_Mix_Percent);
    PARAMETER(PAR.YDL_Yld_Standard_Pct);
    PARAMETER(PAR.YDL_Yld_Weight_Diff);
    PARAMETER(WRK.YDL_Component_Group);
    PARAMETER(WRK.YDL_Unused_Sts_1);
    PARAMETER(WRK.YDL_Unused_Sts_2);
    PARAMETER(PAR.EDI_Status_1);
    PARAMETER(PAR.EDI_Status_2);
    PARAMETER(PAR.EDI_Status_3);
    PARAMETER(PAR.Record_Status);
    PARAMETER(PAR.Job_Time);
    PARAMETER(PAR.User_Id);
    PARAMETER(PAR.Job_Name);
    PARAMETER(PAR.Job_Date);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
     PARAMETER(DB1.Record_Status);
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Record Status = CND.Active
      PAR.Record_Status = 'A';

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    //?USER: Process Data record

    EXECUTE FUNCTION(Rtv Component Info    RT) TYPE(RTVOBJ) FILE(POCZREP)           AC1669682;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Department_Code);
    PARAMETER(DB1.Production_Line_Code);
    PARAMETER(DB1.Yld_Component_Code);
    PARAMETER(WRK.PLYC_Type);
    PARAMETER(LCL.PLYC_Percent_of_Weight);
    PARAMETER(WRK.PLYC_Comment);
    PARAMETER(WRK.Credit_Item_Inc_Exc_Sts);
    PARAMETER(WRK.Type_Inc_Exc_Sts);
    PARAMETER(WRK.Item_Structure_Type_Code);
    PARAMETER(WRK.Group_Inc_Exc_Sts);
    PARAMETER(WRK.Item_Structure_Group_Code);
    PARAMETER(WRK.Class_Inc_Exc_Sts);
    PARAMETER(WRK.Item_Structure_Class_Code);
    PARAMETER(WRK.YC_Required_Sts);
    PARAMETER(WRK.YC_Component_Group);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF LCL.PLYC Percent of Weight is Greater than zero
    IF LCL.PLYC_Percent_of_Weight > *ZERO;

    // LCL.YDL Yld Comp Weight
    LCL.YDL_Yld_Comp_Weight = PAR.YDL_Yld_Comp_Weight * ( LCL.PLYC_Percent_of_Weight / 100
    'H' ) 'H';

    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.YDL Yld Comp Weight = PAR.YDL Yld Comp Weight
    LCL.YDL_Yld_Comp_Weight = PAR.YDL_Yld_Comp_Weight;

    ENDIF;

    EXECUTE FUNCTION(Chg Yld Daily Wgt     CH) TYPE(CHGOBJ) FILE(POC0CPP)           AC1669643;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Department_Code);
    PARAMETER(DB1.Production_Line_Code);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Production_Shift);
    PARAMETER(DB1.Yld_Component_Code);
    PARAMETER(LCL.YDL_Yld_Comp_Weight);
    PARAMETER(DB1.YDL_Component_Group);
    PARAMETER(DB1.YDL_Unused_Sts_1);
    PARAMETER(DB1.YDL_Unused_Sts_2);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

   }

   ENDIF;

  }

 }

 ENDIF;

}


ENDIF;

// Call program Zzz Calculate Yield   XF.
CALL PROGRAM(Zzz Calculate Yield   XF) ('POWEXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Production_Line_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Production_Shift);
PARAMETER(LCL.YDL_Post_Status);
PARAMETER(LCL.YDL_Process_Status);
PARAMETER(LCL.Record_Found_USR);
PARAMETER(WRK.Yld_Program_USR);
PARAMETER(WRK.User_Department);
PARAMETER(WRK.User_Access);

EXECUTE FUNCTION(Upd Process Status    RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1665841;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Production_Line_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Production_Shift);
PARAMETER(LCL.YDL_Process_Status);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Process Status    CH) TYPE(CHGOBJ) FILE(POCSCPP)           AC1665842;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(DB1.YDL_Post_Status);
 PARAMETER(PAR.YDL_Process_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

ENDIF;

