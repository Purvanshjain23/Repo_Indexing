// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PULJDFR
// ?Date: 14.08.2025 Time: 03:50:43
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('P/S');
PARAMETER(LCL.Company_Number);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(LCL.Allow_Multi_Company);
PARAMETER(NLL.Default_Printer);
PARAMETER(NLL.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

//?USER: Initialize subfile control

//?Populate Company Number & Prod Date.
CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

// CTL.PFS Company Number = LCL.Company Number
CTL.PFS_Company_Number = LCL.Company_Number;

// LCL.Production Date USR D8# = JOB.*Job date
LCL.Production_Date_USR_D8# = JOB.*Job_date;

// CTL.PFS Production Date = LCL.Production Date USR D8#
CTL.PFS_Production_Date = LCL.Production_Date_USR_D8#;

//?Populate Company Number & Prod Date.
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.PFS Company Number is Not Entered
IF CTL.PFS_Company_Number = *ZERO;

// CTL.PFS Company Number = LCL.Company Number
CTL.PFS_Company_Number = LCL.Company_Number;

ENDIF;

ENDIF;

// LCL.PFS Balance Flag USR = CTL.PFS Balance Flag USR
LCL.PFS_Balance_Flag_USR = CTL.PFS_Balance_Flag_USR;

// LCL.PFS Fallout Flag USR = CTL.PFS Fallout Flag USR
LCL.PFS_Fallout_Flag_USR = CTL.PFS_Fallout_Flag_USR;

//?USER: Initialize subfile record from DBF record

// RCD.PFS Balance Flag USR = DB1.PFS Balance Flag
RCD.PFS_Balance_Flag_USR = DB1.PFS_Balance_Flag;

// RCD.PFS Fallout Flag USR = DB1.PFS Fallout Flag
RCD.PFS_Fallout_Flag_USR = DB1.PFS_Fallout_Flag;

// RCD.PFS Notes USR = DB1.PFS Notes
RCD.PFS_Notes_USR = DB1.PFS_Notes;

EXECUTE FUNCTION(Rtv Desc Line 1&2      RT) TYPE(RTVOBJ) FILE(CABZREP)          AC2139542;
PARAMETER(RCD.PFS_Company_Number);
PARAMETER(RCD.PFS_Item_Code);
PARAMETER(RCD.Description_Line_One);
PARAMETER(NLL.Description_Line_Two);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Restrict by Company if User Not Allow for Multi Company.
CASE;

// IF LCL.Allow Multi-Company is Not Yes
IF LCL.Allow_Multi_Company = *BLANK/'N';

// AND CTL.PFS Company Number NE RCD.PFS Company Number
AND CTL.PFS_Company_Number <> RCD.PFS_Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select By Balance Flag.
CASE;

// IF CTL.PFS Balance Flag USR is Not Entered
IF CTL.PFS_Balance_Flag_USR = *BLANK;

// OR CTL.PFS Balance Flag USR EQ RCD.PFS Balance Flag USR
OR CTL.PFS_Balance_Flag_USR = RCD.PFS_Balance_Flag_USR;

//?Select By Balance Flag.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select By Fallout Flag.
CASE;

// IF CTL.PFS Fallout Flag USR is Not Entered
IF CTL.PFS_Fallout_Flag_USR = *BLANK;

// OR CTL.PFS Fallout Flag USR EQ RCD.PFS Fallout Flag USR
OR CTL.PFS_Fallout_Flag_USR = RCD.PFS_Fallout_Flag_USR;

//?Select By Fallout Flag.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?Reload Subfile When User Control Positioners Changes.
CASE;

// IF CTL.PFS Balance Flag USR NE LCL.PFS Balance Flag USR
IF CTL.PFS_Balance_Flag_USR <> LCL.PFS_Balance_Flag_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload Subfile When User Control Positioners Changes.
// IF CTL.PFS Fallout Flag USR NE LCL.PFS Fallout Flag USR
IF CTL.PFS_Fallout_Flag_USR <> LCL.PFS_Fallout_Flag_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Validate Company.
CASE;

// IF CTL.PFS Company Number is Entered
IF CTL.PFS_Company_Number <> *ZERO;

EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
PARAMETER(CTL.PFS_Company_Number);
PARAMETER(LCL.Plant_Company_Sts);
PARAMETER(NLL.Company_Organization);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Plant Company Sts is Plant Company
IF LCL.Plant_Company_Sts = 'P';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Company Number must be a Plant company.'
ERROR(USR3706);
MSGPARM(CTL.PFS_Company_Number);

ENDIF;

ENDIF;

//?F4=Prompt.
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?Select by Company Item.
CASE;

// IF PGM.*Cursor field <IS> CTL.PFS Item Code
IF PGM.*Cursor_field = CTL.PFS_Item_Code;

// Call program SEL Actv Finished Good SR.
CALL PROGRAM(SEL Actv Finished Good SR) ('PDNHSRR');
PARAMETER(CTL.PFS_Company_Number);
PARAMETER(CTL.PFS_Item_Code);

ENDIF;

ENDIF;

//?F5=Refresh.
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F7=Copy From/To Date.
CASE;

// IF CTL.*CMD key is CF07
IF CTL.*CMD_key = '07';

//?Validations.
CASE;

// IF CTL.PFS Company Number is Not Entered
IF CTL.PFS_Company_Number = *ZERO;

// LCL.USR Company Number = CTL.PFS Company Number
LCL.USR_Company_Number = CTL.PFS_Company_Number;

// Send error message - 'Company number must be entered.'
ERROR(USR2384);
MSGPARM(LCL.USR_Company_Number);

QUIT;

//?Validations.
// IF CTL.PFS Production Date is Not Entered
IF CTL.PFS_Production_Date = *ZERO;

// Send error message - 'Value Required'
ERROR(USR1962);
MSGPARM(CTL.PFS_Production_Date);

QUIT;

//?Validations.
// IF CTL.PFS Production Date is Entered
IF CTL.PFS_Production_Date <> *ZERO;

//?Format Date.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Production Date USR D8# = CTL.PFS Production Date
LCL.Production_Date_USR_D8# = CTL.PFS_Production_Date;

// LCL.Post to G/L Date = LCL.Production Date USR D8#
LCL.Post_to_G_L_Date = LCL.Production_Date_USR_D8#;

ENDIF;

EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
PARAMETER(CTL.PFS_Company_Number);
PARAMETER(LCL.Post_to_G_L_Date);
PARAMETER(LCL.Production_Day_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Don't Allow Add if Production Day Sts Not Yes.
CASE;

// IF LCL.Production Day Status is yes
IF LCL.Production_Day_Status = 'Y';

//?Don't Allow Add if Production Day Sts Not Yes.
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Generic Message 80 USR = CONCAT(CON.Date not allowed. Not a,CON.production day in the,CON.1)
LCL.Generic_Message_80_USR = 'Date not allowed. Not a' + 'production day in the' (1);

// LCL.Generic Message 80 USR = CONCAT(LCL.Generic Message 80 USR,CON.Calendar file.,CON.1)
LCL.Generic_Message_80_USR = LCL.Generic_Message_80_USR + 'Calendar file.' (1);

// Send error message - '&1'
ERROR(USR5117);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(CTL.PFS_Production_Date);

QUIT;

ENDIF;

//?Ensure Copy From Co/Date Already Exist.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Co/ProdDte Exist   RT) TYPE(RTVOBJ) FILE(PUBBCPP)          AC2166656;
PARAMETER(CTL.PFS_Company_Number);
PARAMETER(CTL.PFS_Production_Date);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - '&1 not allowed. Co &2 Prod Date &3 not found in PFS Balance Fallout Code fi
ERROR(USR5116);
MSGPARM(CTL.PFS_Company_Number);
MSGPARM(CTL.PFS_Production_Date);
MSGPARM('F7');

QUIT;

ENDIF;

ENDIF;

ENDIF;

// Call program Pmt Copy Fr/To Co Date PV.
CALL PROGRAM(Pmt Copy Fr/To Co Date PV) ('PULLPVR');
PARAMETER(CTL.PFS_Company_Number);
PARAMETER(CTL.PFS_Production_Date);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F9=Add.
CASE;

// IF CTL.*CMD key is *Add
IF CTL.*CMD_key = '09';

//?Validations.
CASE;

// IF CTL.PFS Company Number is Not Entered
IF CTL.PFS_Company_Number = *ZERO;

// LCL.USR Company Number = CTL.PFS Company Number
LCL.USR_Company_Number = CTL.PFS_Company_Number;

// Send error message - 'Company number must be entered.'
ERROR(USR2384);
MSGPARM(LCL.USR_Company_Number);

QUIT;

//?Validations.
// IF CTL.PFS Production Date is Not Entered
IF CTL.PFS_Production_Date = *ZERO;

// Send error message - 'Value Required'
ERROR(USR1962);
MSGPARM(CTL.PFS_Production_Date);

QUIT;

//?Validations.
// IF CTL.PFS Production Date is Entered
IF CTL.PFS_Production_Date <> *ZERO;

//?Format Date.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Production Date USR D8# = CTL.PFS Production Date
LCL.Production_Date_USR_D8# = CTL.PFS_Production_Date;

// LCL.Post to G/L Date = LCL.Production Date USR D8#
LCL.Post_to_G_L_Date = LCL.Production_Date_USR_D8#;

ENDIF;

EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
PARAMETER(CTL.PFS_Company_Number);
PARAMETER(LCL.Post_to_G_L_Date);
PARAMETER(LCL.Production_Day_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Don't Allow Add if Production Day Sts Not Yes.
CASE;

// IF LCL.Production Day Status is yes
IF LCL.Production_Day_Status = 'Y';

//?Don't Allow Add if Production Day Sts Not Yes.
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Generic Message 80 USR = CONCAT(CON.Date not allowed. Not a,CON.production day in the,CON.1)
LCL.Generic_Message_80_USR = 'Date not allowed. Not a' + 'production day in the' (1);

// LCL.Generic Message 80 USR = CONCAT(LCL.Generic Message 80 USR,CON.Calendar file.,CON.1)
LCL.Generic_Message_80_USR = LCL.Generic_Message_80_USR + 'Calendar file.' (1);

// Send error message - '&1'
ERROR(USR5117);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(CTL.PFS_Production_Date);

QUIT;

ENDIF;

ENDIF;

// Call program Edt PFS Balance FalloutET.
CALL PROGRAM(Edt PFS Balance FalloutET) ('PULKEFR');
PARAMETER(CTL.PFS_Company_Number);
PARAMETER(CTL.PFS_Production_Date);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F10=Send to Carlisle.
CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

// Execute function Get System Date 2     US.
EXECUTE FUNCTION(Get System Date 2     US) TYPE(EXCUSRSRC) ('PULQUFR');
PARAMETER(LCL.System_Date_Nbr_USR);
{
 * Get System Date - CCYYMMDD
 C                     MOVE *DATE     #OC0NZ
}


//?Validations.
CASE;

// IF CTL.PFS Company Number is Not Entered
IF CTL.PFS_Company_Number = *ZERO;

// LCL.USR Company Number = CTL.PFS Company Number
LCL.USR_Company_Number = CTL.PFS_Company_Number;

// Send error message - 'Company number must be entered.'
ERROR(USR2384);
MSGPARM(LCL.USR_Company_Number);

QUIT;

//?Validations.
// IF CTL.PFS Production Date is Not Entered
IF CTL.PFS_Production_Date = *ZERO;

// Send error message - 'Value Required'
ERROR(USR1962);
MSGPARM(CTL.PFS_Production_Date);

QUIT;

//?Validations.
// IF CTL.PFS Production Date is Entered
IF CTL.PFS_Production_Date <> *ZERO;

// AND CTL.PFS Production Date NE LCL.System Date Nbr USR
AND CTL.PFS_Production_Date <> LCL.System_Date_Nbr_USR;

// LCL.Production Date USR D8# = LCL.System Date Nbr USR
LCL.Production_Date_USR_D8# = LCL.System_Date_Nbr_USR;

// LCL.@Date - ATR = LCL.Production Date USR D8#
LCL.@Date_ATR = LCL.Production_Date_USR_D8#;

EXECUTE FUNCTION(Convert DTE to mm/dd/yyyy) TYPE(EXCINTFUN)                     AC1561339;
PARAMETER(LCL.@Date_ATR);
PARAMETER(LCL.Date_mm_dd_yyyy_USR);
{
 //?Execute internal function

 //?Break apart date.
 // PAR.YYYY numeric USR = PAR.@Date - ATR *YEAR
 PAR.YYYY_numeric_USR = DATEDTLS(PAR.@Date_ATR 'YR' 1111111 'NONE' 'N' 1);

 // PAR.MM   numeric USR = PAR.@Date - ATR *MONTH
 PAR.MM_numeric_USR = DATEDTLS(PAR.@Date_ATR 'MO' 1111111 'NONE' 'N' 1);

 // PAR.DD   numeric USR = PAR.@Date - ATR *DAY OF MONTH
 PAR.DD_numeric_USR = DATEDTLS(PAR.@Date_ATR 'DM' 1111111 'NONE' 'N' 1);

 //?Convert to alpha.
 // PAR.YYYY alpha   USR = CVTVAR(PAR.YYYY numeric USR)
 PAR.YYYY_alpha_USR = CVTVAR(PAR.YYYY_numeric_USR);

 // PAR.MM   alpha   USR = CVTVAR(PAR.MM   numeric USR)
 PAR.MM_alpha_USR = CVTVAR(PAR.MM_numeric_USR);

 // PAR.DD   alpha   USR = CVTVAR(PAR.DD   numeric USR)
 PAR.DD_alpha_USR = CVTVAR(PAR.DD_numeric_USR);

 //?Put back together.
 // PAR.Date mm/dd/yyyy USR = CONCAT(PAR.MM   alpha   USR,CON./,CON.*ZERO)
 PAR.Date_mm_dd_yyyy_USR = PAR.MM_alpha_USR + '/' (*ZERO);

 // PAR.Date mm/dd/yyyy USR = CONCAT(PAR.Date mm/dd/yyyy USR,PAR.DD   alpha   USR,CO
 PAR.Date_mm_dd_yyyy_USR = PAR.Date_mm_dd_yyyy_USR + PAR.DD_alpha_USR (*ZERO);

 // PAR.Date mm/dd/yyyy USR = CONCAT(PAR.Date mm/dd/yyyy USR,CON./,CON.*ZERO)
 PAR.Date_mm_dd_yyyy_USR = PAR.Date_mm_dd_yyyy_USR + '/' (*ZERO);

 // PAR.Date mm/dd/yyyy USR = CONCAT(PAR.Date mm/dd/yyyy USR,PAR.YYYY alpha   USR,CO
 PAR.Date_mm_dd_yyyy_USR = PAR.Date_mm_dd_yyyy_USR + PAR.YYYY_alpha_USR (*ZERO);

}


// LCL.Generic Message 80 USR = CONCAT(CON.F10 only allowed for curr,CON.ent Production date,CON.*ZE
LCL.Generic_Message_80_USR = 'F10 only allowed for curr' + 'ent Production date' (*ZERO);

// LCL.Generic Message 80 USR = CONCAT(LCL.Generic Message 80 USR,LCL.Date mm/dd/yyyy USR,CON.1)
LCL.Generic_Message_80_USR = LCL.Generic_Message_80_USR + LCL.Date_mm_dd_yyyy_USR (1);

// LCL.Generic Message 80 USR = CONCAT(LCL.Generic Message 80 USR,CON..,CON.*ZERO)
LCL.Generic_Message_80_USR = LCL.Generic_Message_80_USR + '.' (*ZERO);

// Send error message - '&1'
ERROR(USR5117);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(CTL.PFS_Production_Date);

QUIT;

//?Validations.
// IF *OTHERWISE
IF *OTHERWISE;

//?Ensure Co/Date Already Exist.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Co/ProdDte Exist   RT) TYPE(RTVOBJ) FILE(PUBBCPP)          AC2166656;
PARAMETER(CTL.PFS_Company_Number);
PARAMETER(CTL.PFS_Production_Date);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - '&1 not allowed. Co &2 Prod Date &3 not found in PFS Balance Fallout Code fi
ERROR(USR5116);
MSGPARM(CTL.PFS_Company_Number);
MSGPARM(CTL.PFS_Production_Date);
MSGPARM('F10');

QUIT;

ENDIF;

ENDIF;

//?Are There Any Records with Fallout Flag=Y? If Not, Send Error Msg.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Any Balance Flag=Y RT) TYPE(RTVOBJ) FILE(PUBBCPP)          AC2167371;
PARAMETER(CTL.PFS_Company_Number);
PARAMETER(CTL.PFS_Production_Date);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.PFS Balance Flag is Yes
 IF DB1.PFS_Balance_Flag = 'Y';

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// LCL.Company Number Alpha = CVTVAR(CTL.PFS Company Number)
LCL.Company_Number_Alpha = CVTVAR(CTL.PFS_Company_Number);

// LCL.Production Date USR D8# = CTL.PFS Production Date
LCL.Production_Date_USR_D8# = CTL.PFS_Production_Date;

// LCL.@Date - ATR = LCL.Production Date USR D8#
LCL.@Date_ATR = LCL.Production_Date_USR_D8#;

EXECUTE FUNCTION(Convert DTE to mm/dd/yyyy) TYPE(EXCINTFUN)                     AC1561339;
PARAMETER(LCL.@Date_ATR);
PARAMETER(LCL.Date_mm_dd_yyyy_USR);
{
 //?Execute internal function

 //?Break apart date.
 // PAR.YYYY numeric USR = PAR.@Date - ATR *YEAR
 PAR.YYYY_numeric_USR = DATEDTLS(PAR.@Date_ATR 'YR' 1111111 'NONE' 'N' 1);

 // PAR.MM   numeric USR = PAR.@Date - ATR *MONTH
 PAR.MM_numeric_USR = DATEDTLS(PAR.@Date_ATR 'MO' 1111111 'NONE' 'N' 1);

 // PAR.DD   numeric USR = PAR.@Date - ATR *DAY OF MONTH
 PAR.DD_numeric_USR = DATEDTLS(PAR.@Date_ATR 'DM' 1111111 'NONE' 'N' 1);

 //?Convert to alpha.
 // PAR.YYYY alpha   USR = CVTVAR(PAR.YYYY numeric USR)
 PAR.YYYY_alpha_USR = CVTVAR(PAR.YYYY_numeric_USR);

 // PAR.MM   alpha   USR = CVTVAR(PAR.MM   numeric USR)
 PAR.MM_alpha_USR = CVTVAR(PAR.MM_numeric_USR);

 // PAR.DD   alpha   USR = CVTVAR(PAR.DD   numeric USR)
 PAR.DD_alpha_USR = CVTVAR(PAR.DD_numeric_USR);

 //?Put back together.
 // PAR.Date mm/dd/yyyy USR = CONCAT(PAR.MM   alpha   USR,CON./,CON.*ZERO)
 PAR.Date_mm_dd_yyyy_USR = PAR.MM_alpha_USR + '/' (*ZERO);

 // PAR.Date mm/dd/yyyy USR = CONCAT(PAR.Date mm/dd/yyyy USR,PAR.DD   alpha   USR,CO
 PAR.Date_mm_dd_yyyy_USR = PAR.Date_mm_dd_yyyy_USR + PAR.DD_alpha_USR (*ZERO);

 // PAR.Date mm/dd/yyyy USR = CONCAT(PAR.Date mm/dd/yyyy USR,CON./,CON.*ZERO)
 PAR.Date_mm_dd_yyyy_USR = PAR.Date_mm_dd_yyyy_USR + '/' (*ZERO);

 // PAR.Date mm/dd/yyyy USR = CONCAT(PAR.Date mm/dd/yyyy USR,PAR.YYYY alpha   USR,CO
 PAR.Date_mm_dd_yyyy_USR = PAR.Date_mm_dd_yyyy_USR + PAR.YYYY_alpha_USR (*ZERO);

}


// LCL.Generic Message 80 USR = CONCAT(CON.PFS Balance Codes missing,CON.for Plant,CON.1)
LCL.Generic_Message_80_USR = 'PFS Balance Codes missing' + 'for Plant' (1);

// LCL.Generic Message 80 USR = CONCAT(LCL.Generic Message 80 USR,LCL.Company Number Alpha,CON.1)
LCL.Generic_Message_80_USR = LCL.Generic_Message_80_USR + LCL.Company_Number_Alpha (1);

// LCL.Generic Message 80 USR = CONCAT(LCL.Generic Message 80 USR,CON.for Production Date,CON.1)
LCL.Generic_Message_80_USR = LCL.Generic_Message_80_USR + 'for Production Date' (1);

// LCL.Generic Message 80 USR = CONCAT(LCL.Generic Message 80 USR,LCL.Date mm/dd/yyyy USR,CON.1)
LCL.Generic_Message_80_USR = LCL.Generic_Message_80_USR + LCL.Date_mm_dd_yyyy_USR (1);

// LCL.Generic Message 80 USR = CONCAT(LCL.Generic Message 80 USR,CON..,CON.*ZERO)
LCL.Generic_Message_80_USR = LCL.Generic_Message_80_USR + '.' (*ZERO);

// Send error message - '&1'
ERROR(USR5117);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(CTL.PFS_Production_Date);

QUIT;

ENDIF;

ENDIF;

ENDIF;

//?Build PFS Balance Fallout Hdr/Dtl File & Send to Carlisle.
// Call program Crt Bal Fallout Hdr/DtlXF.
CALL PROGRAM(Crt Bal Fallout Hdr/DtlXF) ('PULRXFR');
PARAMETER(CTL.PFS_Company_Number);
PARAMETER('N');

//?Send Info Msg.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Company Number Alpha = CVTVAR(CTL.PFS Company Number)
LCL.Company_Number_Alpha = CVTVAR(CTL.PFS_Company_Number);

// LCL.Generic Message 80 USR = CONCAT(CON.Balance Fallout codes sen,CON.t to Carlisle - Co,CON.*ZER
LCL.Generic_Message_80_USR = 'Balance Fallout codes sen' + 't to Carlisle - Co' (0);

// LCL.Generic Message 80 USR = CONCAT(LCL.Generic Message 80 USR,LCL.Company Number Alpha,CON.1)
LCL.Generic_Message_80_USR = LCL.Generic_Message_80_USR + LCL.Company_Number_Alpha (1);

// LCL.Generic Message 80 USR = CONCAT(LCL.Generic Message 80 USR,CON..,CON.*ZERO)
LCL.Generic_Message_80_USR = LCL.Generic_Message_80_USR + '.' (*ZERO);

// Send information message - '&1'
MESSAGE(USR4976 *INFO);
MSGPARM(LCL.Generic_Message_80_USR);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?F11=Send to Data Whse.
CASE;

// IF CTL.*CMD key is CF11
IF CTL.*CMD_key = '11';

// Call program Exc QSH & Send to DW   CL.
CALL PROGRAM(Exc QSH & Send to DW   CL) ('PUL8UPC');
PARAMETER('N');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F14=Dsp Bal/Fallout Batches.
CASE;

// IF CTL.*CMD key is CF14
IF CTL.*CMD_key = '14';

//?Validations.
CASE;

// IF CTL.PFS Company Number is Not Entered
IF CTL.PFS_Company_Number = *ZERO;

// LCL.USR Company Number = CTL.PFS Company Number
LCL.USR_Company_Number = CTL.PFS_Company_Number;

// Send error message - 'Company number must be entered.'
ERROR(USR2384);
MSGPARM(LCL.USR_Company_Number);

QUIT;

ENDIF;

// Call program Dsp Bal Fall Batch Hdr DF.
CALL PROGRAM(Dsp Bal Fall Batch Hdr DF) ('PULODFR');
PARAMETER(CTL.PFS_Company_Number);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F21=Email List.
CASE;

// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

//?Validations.
CASE;

// IF CTL.PFS Company Number is Not Entered
IF CTL.PFS_Company_Number = *ZERO;

// LCL.USR Company Number = CTL.PFS Company Number
LCL.USR_Company_Number = CTL.PFS_Company_Number;

// Send error message - 'Company number must be entered.'
ERROR(USR2384);
MSGPARM(LCL.USR_Company_Number);

QUIT;

//?Validations.
// IF CTL.PFS Production Date is Not Entered
IF CTL.PFS_Production_Date = *ZERO;

// Send error message - 'Value Required'
ERROR(USR1962);
MSGPARM(CTL.PFS_Production_Date);

QUIT;

ENDIF;

//?Export Data to Excel via SEQUEL 'PRBALFALLO'.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// LCL.Email Address = CON.*BLANK
LCL.Email_Address = *BLANK;

// Call program Pmt Enter Email Addr  PV.
CALL PROGRAM(Pmt Enter Email Addr  PV) ('POWGPVR');
PARAMETER(LCL.Email_Address);

CASE;

// IF LCL.Email Address is Entered
IF LCL.Email_Address <> *BLANK;

// LCL.Company Number Alpha = CVTVAR(CTL.PFS Company Number)
LCL.Company_Number_Alpha = CVTVAR(CTL.PFS_Company_Number);

// LCL.Date (Char-8) USR = CVTVAR(CTL.PFS Production Date)
LCL.Date_Char_8_USR = CVTVAR(CTL.PFS_Production_Date);

// Call program Prt PFS Balance FalloutCL.
SBMJOB;
CALL PROGRAM(Prt PFS Balance FalloutCL) ('PULNUPC');
PARAMETER(LCL.Company_Number_Alpha);
PARAMETER(LCL.Date_Char_8_USR);
PARAMETER(LCL.Email_Address);
SBMJOBOVR JOB(PRBALFALLO);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

// Send information message - '&1'
MESSAGE(USR4976 *INFO);
MSGPARM('Job submitted.');

ENDIF;

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?Balance Status Must Be Entered.
CASE;

// IF RCD.PFS Balance Flag USR is Not Entered
IF RCD.PFS_Balance_Flag_USR = *BLANK;

// Send error message - 'Value Required.'
ERROR(USR2808);
MSGPARM(RCD.PFS_Balance_Flag_USR);

ENDIF;

//?Fallout Status Must Be Entered.
CASE;

// IF RCD.PFS Fallout Flag USR is Not Entered
IF RCD.PFS_Fallout_Flag_USR = *BLANK;

// Send error message - 'Value Required.'
ERROR(USR2808);
MSGPARM(RCD.PFS_Fallout_Flag_USR);

ENDIF;

//?USER: Process subfile record (Post-confirm)

//?Update Only When Balance Sts, Fallout Sts & Notes Changes.
CASE;

// IF RCD.PFS Balance Flag USR NE RCD.PFS Balance Flag
IF RCD.PFS_Balance_Flag_USR <> RCD.PFS_Balance_Flag;

// OR RCD.PFS Fallout Flag USR NE RCD.PFS Fallout Flag
OR RCD.PFS_Fallout_Flag_USR <> RCD.PFS_Fallout_Flag;

// OR RCD.PFS Notes USR NE RCD.PFS Notes
OR RCD.PFS_Notes_USR <> RCD.PFS_Notes;

EXECUTE FUNCTION(Chg PFS Bal Fallout CdeCH) TYPE(CHGOBJ) FILE(PUBBCPP)          AC2166128;
PARAMETER(RCD.PFS_Company_Number);
PARAMETER(RCD.PFS_Production_Date);
PARAMETER(RCD.PFS_Item_Code);
PARAMETER(RCD.PFS_Balance_Flag_USR);
PARAMETER(RCD.PFS_Fallout_Flag_USR);
PARAMETER(RCD.PFS_Notes_USR);
PARAMETER('C');
PARAMETER(RCD.PFS_Process_Status);
PARAMETER(RCD.PFS_Error_Reason);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Change Stamp 2    IF) TYPE(EXCINTFUN)                      AC2166251;
 PARAMETER(DB1.PFS_Change_Date);
 PARAMETER(DB1.PFS_Change_Time);
 {
  //?Execute internal function

  // LCL.USR Internal D8# YYYYMMDD = JOB.*Job date
  LCL.USR_Internal_D8#_YYYYMMDD = JOB.*Job_date;

  // PAR.PFS Change Date = LCL.USR Internal D8# YYYYMMDD
  PAR.PFS_Change_Date = LCL.USR_Internal_D8#_YYYYMMDD;

  // PAR.PFS Change time = JOB.*Job time
  PAR.PFS_Change_Time = JOB.*Job_time;

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

