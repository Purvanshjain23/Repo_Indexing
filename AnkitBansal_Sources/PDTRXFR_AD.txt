// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDTRXFR
// ?Date: 14.08.2025 Time: 03:29:54
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?***** Change Log and comments
DO;

//?FP1054 Created new condition to override whats in pdi8cpp
//?        ATS Adj Type USR:   CND Schedule Override  = SV
//?** 06/24/2014 JJH E3160
//?** Changed the definition of the "Average if WPA" field to "Upd
//?** Standard Production".  This field is used to NOT increase
//?** by-product production if Upd Standard Production = N(no).
//?** Initially added logic to NOT process 61210 and 64210.
ENDDO;

EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(WRK.Description_Line_One);
PARAMETER(WRK.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(WRK.Item_Structure_Class_Code);
PARAMETER(WRK.Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(WRK.Item_Type_Code);
PARAMETER(WRK.Default_Warehouse);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(WRK.Base_Conv_Loss_Item);
PARAMETER(WRK.Variety_Rendered_Cut);
PARAMETER(WRK.Credit_Item_Status);
PARAMETER(WRK.Std_Weight_Head_Var_Ren);
PARAMETER(WRK.Pieces_Per_Head);
PARAMETER(WRK.Department_Code);
PARAMETER(WRK.Group_for_Packaging);
PARAMETER(WRK.Seconds_Item);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(WRK.Export_Domestic);
PARAMETER(WRK.Print_On_Schedule);
PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
PARAMETER(WRK.Fresh_Sched_As_Ordered);
PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
PARAMETER(WRK.Primal_Group_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(WRK.Warehouse_Type);
PARAMETER(WRK.Trans_Contol_AS400_Plant);
PARAMETER(WRK.Warehouse_Location);
PARAMETER(PAR.Warehouse_Std_Chill_Time);
PARAMETER(PAR.Warehouse_Chill_Time);
PARAMETER(WRK.PS_Item_Id);
{
 //?Execute internal function

 EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Description_Line_One);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Type_Code);
 PARAMETER(PAR.Default_Warehouse);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 PARAMETER(PAR.Variety_Rendered_Cut);
 PARAMETER(PAR.Credit_Item_Status);
 PARAMETER(PAR.Std_Weight_Head_Var_Ren);
 PARAMETER(PAR.Pieces_Per_Head);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Group_for_Packaging);
 PARAMETER(PAR.Seconds_Item);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Export_Domestic);
 PARAMETER(PAR.Print_On_Schedule);
 PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
 PARAMETER(PAR.Fresh_Sched_As_Ordered);
 PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
 PARAMETER(PAR.Primal_Group_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.Trans_Contol_AS400_Plant);
 PARAMETER(PAR.Warehouse_Location);
 PARAMETER(PAR.Warehouse_Std_Chill_Time);
 PARAMETER(PAR.Warehouse_Chill_Time);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Description_Line_One);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Type_Code);
  PARAMETER(PAR.Default_Warehouse);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Base_Conv_Loss_Item);
  PARAMETER(PAR.Variety_Rendered_Cut);
  PARAMETER(PAR.Credit_Item_Status);
  PARAMETER(PAR.Std_Weight_Head_Var_Ren);
  PARAMETER(PAR.Pieces_Per_Head);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Group_for_Packaging);
  PARAMETER(PAR.Seconds_Item);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.Export_Domestic);
  PARAMETER(PAR.Print_On_Schedule);
  PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
  PARAMETER(PAR.Fresh_Sched_As_Ordered);
  PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
  PARAMETER(PAR.Primal_Group_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  PARAMETER(PAR.Warehouse_Location);
  PARAMETER(PAR.Warehouse_Std_Chill_Time);
  PARAMETER(PAR.Warehouse_Chill_Time);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

 }

 EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
 PARAMETER(PAR.Item_Type_Code);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 PARAMETER(PAR.Variety_Rendered_Cut);
 PARAMETER(PAR.Credit_Item_Status);
 PARAMETER(PAR.Seconds_Item);
 PARAMETER(PAR.PS_Item_Id);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Item Type Code is Raw Materials
  IF PAR.Item_Type_Code = 'RM';

  // PAR.PS Item Identification = CND.RM Base
  PAR.PS_Item_Id = 'RMB';

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF PAR.Seconds Item is Yes
  IF PAR.Seconds_Item = 'Y';

  // PAR.PS Item Identification = CND.FG Seconds
  PAR.PS_Item_Id = 'FSC';

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF PAR.Variety/Rendered/Cut is Variety
  IF PAR.Variety_Rendered_Cut = 'V';

  // PAR.PS Item Identification = CND.FG Variety
  PAR.PS_Item_Id = 'FVR';

  // IF PAR.Variety/Rendered/Cut is Rendered
  IF PAR.Variety_Rendered_Cut = 'R';

  // PAR.PS Item Identification = CND.FG Rendered
  PAR.PS_Item_Id = 'FRD';

  // IF PAR.Variety/Rendered/Cut is Cut
  IF PAR.Variety_Rendered_Cut = 'C';

  //?Base/Converted/Fabricated
  CASE;

  // IF PAR.Credit Item Status is yes
  IF PAR.Credit_Item_Status = 'Y';

  //?Setup Base/Converted/Fabricated Credit
  CASE;

  // IF PAR.Converted/Base Item is Base
  IF PAR.Base_Conv_Loss_Item = 'B';

  // PAR.PS Item Identification = CND.FG Base Credit
  PAR.PS_Item_Id = 'FBC';

  //?Setup Base/Converted/Fabricated Credit
  // IF PAR.Converted/Base Item is Converted
  IF PAR.Base_Conv_Loss_Item = 'C';

  // PAR.PS Item Identification = CND.FG Converted Credit
  PAR.PS_Item_Id = 'FCC';

  //?Setup Base/Converted/Fabricated Credit
  // IF PAR.Converted/Base Item is Fabricated
  IF PAR.Base_Conv_Loss_Item = 'F';

  // PAR.PS Item Identification = CND.FG Fabricated Credit
  PAR.PS_Item_Id = 'FFC';

  //?Setup Base/Converted/Fabricated Credit
  // IF PAR.Converted/Base Item is Loss
  IF PAR.Base_Conv_Loss_Item = 'L';

  // PAR.PS Item Identification = CND.FG Loss Credit
  PAR.PS_Item_Id = 'FLC';

  ENDIF;

  //?Base/Converted/Fabricated
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Setup Base/Converted/Fabricated
  CASE;

  // IF PAR.Converted/Base Item is Base
  IF PAR.Base_Conv_Loss_Item = 'B';

  // PAR.PS Item Identification = CND.FG Base
  PAR.PS_Item_Id = 'FGB';

  //?Setup Base/Converted/Fabricated
  // IF PAR.Converted/Base Item is Converted
  IF PAR.Base_Conv_Loss_Item = 'C';

  // PAR.PS Item Identification = CND.FG Converted
  PAR.PS_Item_Id = 'FCV';

  //?Setup Base/Converted/Fabricated
  // IF PAR.Converted/Base Item is Fabricated
  IF PAR.Base_Conv_Loss_Item = 'F';

  // PAR.PS Item Identification = CND.FG Fabricated
  PAR.PS_Item_Id = 'FFB';

  //?Setup Base/Converted/Fabricated
  // IF PAR.Converted/Base Item is Loss
  IF PAR.Base_Conv_Loss_Item = 'L';

  // PAR.PS Item Identification = CND.FG Loss
  PAR.PS_Item_Id = 'FLS';

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

 }

}


// PAR.PSAA Quantity Adjusted = PAR.PS Adjustment Quantity
PAR.PSAA_Quantity_Adjusted = PAR.PS_Adjustment_Quantity;

// PAR.PSAA Weight Adjusted = PAR.PS Adjustment Quantity * PAR.Unit Weight *Rounded
PAR.PSAA_Weight_Adjusted = PAR.PS_Adjustment_Quantity * PAR.Unit_Weight 'H';

//?Pieces Adjusted
CASE;

// IF PAR.Piece Count Item is yes
IF PAR.Piece_Count_Item = 'Y';

// Pieces Adjusted
PAR.Pieces_Adjusted = ( PAR.PSAA_Quantity_Adjusted * PAR.Pieces_Per_Bag 'H' )                      +
* PAR.Bags_Per_Unit 'H';

//?Pieces Adjusted
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Pieces Adjusted = CON.*ZERO
PAR.Pieces_Adjusted = *ZERO;

ENDIF;

EXECUTE FUNCTION(Rtv Item Prd Yld SWYG RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1930659;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Production_Yield);
PARAMETER(PAR.Record_Found_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Production Yield = PAR.Production Yield + DB1.Production Yield
 PAR.Production_Yield = PAR.Production_Yield + DB1.Production_Yield;

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF PAR.ATS Adj Type USR is Schedule Adjust No BOM
IF PAR.ATS_Adj_Type_USR = 'SB';

//?04/08/08 PKD This is only applicable when the Production
//?             is adjusted on the Order Detail Schedule
EXECUTE FUNCTION(UPD Schedule Adj      RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478187;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Production_Type);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.PSAA_Weight_Adjusted);
PARAMETER(PAR.Pieces_Adjusted);
PARAMETER(PAR.ATS_Adj_Type_USR);
{
 //?USER: Processing if Data record not found

 //?04/09/08 PKD Added condition for Freezer Transfer to update
 //?             new bucket
 //?02/05/09 RMC FP1054 Added condition for Schedule override to update
 //?             standard weight and pieces
 //?If forecast adjustment type do not allow negatives
 CASE;

 // IF PAR.ATS Adj Type USR is Schedule Adjust Forecast
 IF PAR.ATS_Adj_Type_USR = 'SF';

 CASE;

 // IF PAR.PS Weight Prod Adj is GT Zero
 IF PAR.PS_Weight_Prod_Adj > *ZERO;

 // OR PAR.PS Pieces Prod Adj is GT Zero
 OR PAR.PS_Pieces_Prod_Adj > *ZERO;

 EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Available_Ship_Date);
 PARAMETER(PAR.PS_Weight_Planned_Prod);
 PARAMETER(PAR.PS_Pieces_Planned_Prod);
 PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.PS_Weight_Inv_On_Hand);
 PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
 PARAMETER(PAR.PS_Weight_Standard);
 PARAMETER(PAR.PS_Pieces_Standard);
 PARAMETER(PAR.PS_Weight_Converted);
 PARAMETER(PAR.PS_Pieces_Converted);
 PARAMETER(PAR.PS_Weight_Shipping_Adj);
 PARAMETER(PAR.PS_Pieces_Shipping_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Adj);
 PARAMETER(PAR.PS_Pieces_Prod_Adj);
 PARAMETER(PAR.PS_Weight_Inv_Adj);
 PARAMETER(PAR.PS_Pieces_Inv_Adj);
 PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Allocated);
 PARAMETER(PAR.PS_Pieces_Prod_Allocated);
 PARAMETER(PAR.PS_Weight_Inv_Allocated);
 PARAMETER(PAR.PS_Pieces_Inv_Allocated);
 PARAMETER(PAR.PS_Unit_Weight);
 PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(PAR.PS_Pieces_Unused_2);
 PARAMETER(PAR.PS_Weight_Unused_3);
 PARAMETER(PAR.PS_Pieces_Unused_3);
 PARAMETER(PAR.PS_Weight_Unused_4);
 PARAMETER(PAR.PS_Pieces_Unused_4);
 PARAMETER(PAR.PS_Weight_Unused_5);
 PARAMETER(PAR.PS_Pieces_Unused_5);
 PARAMETER(PAR.PS_Weight_Unused_6);
 PARAMETER(PAR.PS_Pieces_Unused_6);
 PARAMETER(PAR.PS_Item_Id);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.PS_Lock_Status);
 PARAMETER(PAR.PS_Export_Domestic);
 PARAMETER(PAR.PS_Print_On_Schedule);
 PARAMETER(PAR.PS_Piece_Count_Item);
 PARAMETER(PAR.PS_Unused_Sts_1);
 PARAMETER(PAR.PS_Unused_Sts_2);
 PARAMETER(PAR.PS_Unused_Sts_3);
 PARAMETER(PAR.PS_Unused_Sts_4);
 PARAMETER(PAR.PS_Item_Sched_Need_Sts);
 PARAMETER(PAR.PS_Production_Warehouse);
 PARAMETER(PAR.PS_Weight_Ordered);
 PARAMETER(PAR.PS_Pieces_Ordered);
 PARAMETER(PAR.PS_Weight_FC_Adjusted);
 PARAMETER(PAR.PS_Pieces_FC_Adjusted);
 PARAMETER(PAR.PS_Weight_FX_Adjusted);
 PARAMETER(PAR.PS_Pieces_FX_Adjusted);
 PARAMETER(PAR.PS_Weight_Sched_Shipment);
 PARAMETER(PAR.PS_Pieces_Sched_Shipment);
 PARAMETER(PAR.PS_Weight_Available_Prod);
 PARAMETER(PAR.PS_Pieces_Available_Prod);
 PARAMETER(PAR.PS_Weight_Production_Need);
 PARAMETER(PAR.PS_Pieces_Production_Need);
 PARAMETER(PAR.PS_Weight_Fab_Needs);
 PARAMETER(PAR.PS_Pieces_Fab_Needs);
 PARAMETER(PAR.PS_Weight_Sched_Prod);
 PARAMETER(PAR.PS_Pieces_Sched_Prod);
 PARAMETER(PAR.PS_Weight_Sched_Need);
 PARAMETER(PAR.PS_Pieces_Sched_Need);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Primal_Group_Code);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Job_Time);
 PARAMETER(PAR.User_Id);
 PARAMETER(PAR.Job_Name);
 PARAMETER(PAR.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(WRK.Description_Line_One);
  PARAMETER(WRK.UOM_Primary);
  PARAMETER(WRK.Unit_Weight);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(WRK.Item_Type_Code);
  PARAMETER(WRK.Default_Warehouse);
  PARAMETER(WRK.Fresh_Chilling_Time);
  PARAMETER(WRK.Base_Conv_Loss_Item);
  PARAMETER(WRK.Variety_Rendered_Cut);
  PARAMETER(WRK.Credit_Item_Status);
  PARAMETER(WRK.Std_Weight_Head_Var_Ren);
  PARAMETER(WRK.Pieces_Per_Head);
  PARAMETER(DB1.Department_Code);
  PARAMETER(WRK.Group_for_Packaging);
  PARAMETER(WRK.Seconds_Item);
  PARAMETER(DB1.PS_Piece_Count_Item);
  PARAMETER(WRK.Pieces_Per_Bag);
  PARAMETER(WRK.Bags_Per_Unit);
  PARAMETER(DB1.PS_Export_Domestic);
  PARAMETER(DB1.PS_Print_On_Schedule);
  PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
  PARAMETER(WRK.Fresh_Sched_As_Ordered);
  PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
  PARAMETER(DB1.Primal_Group_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Warehouse_Type);
  PARAMETER(WRK.Trans_Contol_AS400_Plant);
  PARAMETER(WRK.Warehouse_Location);
  PARAMETER(WRK.Warehouse_Std_Chill_Time);
  PARAMETER(WRK.Warehouse_Chill_Time);
  PARAMETER(DB1.PS_Item_Id);
  {
   //?Execute internal function

   EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Description_Line_One);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Default_Warehouse);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Std_Weight_Head_Var_Ren);
   PARAMETER(PAR.Pieces_Per_Head);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Group_for_Packaging);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Export_Domestic);
   PARAMETER(PAR.Print_On_Schedule);
   PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
   PARAMETER(PAR.Fresh_Sched_As_Ordered);
   PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
   PARAMETER(PAR.Primal_Group_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.Trans_Contol_AS400_Plant);
   PARAMETER(PAR.Warehouse_Location);
   PARAMETER(PAR.Warehouse_Std_Chill_Time);
   PARAMETER(PAR.Warehouse_Chill_Time);
   {
    //?Execute internal function

    EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

   }

   EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.PS_Item_Id);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Item Type Code is Raw Materials
    IF PAR.Item_Type_Code = 'RM';

    // PAR.PS Item Identification = CND.RM Base
    PAR.PS_Item_Id = 'RMB';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF PAR.Seconds Item is Yes
    IF PAR.Seconds_Item = 'Y';

    // PAR.PS Item Identification = CND.FG Seconds
    PAR.PS_Item_Id = 'FSC';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF PAR.Variety/Rendered/Cut is Variety
    IF PAR.Variety_Rendered_Cut = 'V';

    // PAR.PS Item Identification = CND.FG Variety
    PAR.PS_Item_Id = 'FVR';

    // IF PAR.Variety/Rendered/Cut is Rendered
    IF PAR.Variety_Rendered_Cut = 'R';

    // PAR.PS Item Identification = CND.FG Rendered
    PAR.PS_Item_Id = 'FRD';

    // IF PAR.Variety/Rendered/Cut is Cut
    IF PAR.Variety_Rendered_Cut = 'C';

    //?Base/Converted/Fabricated
    CASE;

    // IF PAR.Credit Item Status is yes
    IF PAR.Credit_Item_Status = 'Y';

    //?Setup Base/Converted/Fabricated Credit
    CASE;

    // IF PAR.Converted/Base Item is Base
    IF PAR.Base_Conv_Loss_Item = 'B';

    // PAR.PS Item Identification = CND.FG Base Credit
    PAR.PS_Item_Id = 'FBC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Converted
    IF PAR.Base_Conv_Loss_Item = 'C';

    // PAR.PS Item Identification = CND.FG Converted Credit
    PAR.PS_Item_Id = 'FCC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Fabricated
    IF PAR.Base_Conv_Loss_Item = 'F';

    // PAR.PS Item Identification = CND.FG Fabricated Credit
    PAR.PS_Item_Id = 'FFC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Loss
    IF PAR.Base_Conv_Loss_Item = 'L';

    // PAR.PS Item Identification = CND.FG Loss Credit
    PAR.PS_Item_Id = 'FLC';

    ENDIF;

    //?Base/Converted/Fabricated
    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Setup Base/Converted/Fabricated
    CASE;

    // IF PAR.Converted/Base Item is Base
    IF PAR.Base_Conv_Loss_Item = 'B';

    // PAR.PS Item Identification = CND.FG Base
    PAR.PS_Item_Id = 'FGB';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Converted
    IF PAR.Base_Conv_Loss_Item = 'C';

    // PAR.PS Item Identification = CND.FG Converted
    PAR.PS_Item_Id = 'FCV';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Fabricated
    IF PAR.Base_Conv_Loss_Item = 'F';

    // PAR.PS Item Identification = CND.FG Fabricated
    PAR.PS_Item_Id = 'FFB';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Loss
    IF PAR.Base_Conv_Loss_Item = 'L';

    // PAR.PS Item Identification = CND.FG Loss
    PAR.PS_Item_Id = 'FLS';

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

   }

  }

  //?FP1054 Output PS Prod Warehouse
  EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Production_Warehouse);
  PARAMETER(LCL.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Available Ship Date
  CASE;

  // IF WRK.Warehouse Std Chill Time is yes
  IF WRK.Warehouse_Std_Chill_Time = 'Y';

  EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(WRK.Warehouse_Chill_Time);
  PARAMETER(DB1.PS_Available_Ship_Date);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.Chilling Time
   IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

   // PAR.PS Available Ship Date = DB1.Post to G/L Date
   PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

   //?Skip Saturday
   CASE;

   // IF DB1.Day of Week is Saturday
   IF DB1.Day_of_Week = '7';

   //?Skip Saturday
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  //?Available Ship Date
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(WRK.Fresh_Chilling_Time);
  PARAMETER(DB1.PS_Available_Ship_Date);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.Chilling Time
   IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

   // PAR.PS Available Ship Date = DB1.Post to G/L Date
   PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

   //?Skip Saturday
   CASE;

   // IF DB1.Day of Week is Saturday
   IF DB1.Day_of_Week = '7';

   //?Skip Saturday
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  ENDIF;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Planned Prod is GT Zero
  IF PAR.PS_Pieces_Planned_Prod > *ZERO;

  // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
  DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

  ENDIF;

  EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // DB1.PS Lock Status = CND.NOT LOCKED
  DB1.PS_Lock_Status = 'N';

 }

 ENDIF;

 //?If forecast adjustment type do not allow negatives
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.ATS Adj Type USR is Freezer Transfer
 IF PAR.ATS_Adj_Type_USR = 'FT';

 EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Available_Ship_Date);
 PARAMETER(PAR.PS_Weight_Planned_Prod);
 PARAMETER(PAR.PS_Pieces_Planned_Prod);
 PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.PS_Weight_Inv_On_Hand);
 PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
 PARAMETER(PAR.PS_Weight_Standard);
 PARAMETER(PAR.PS_Pieces_Standard);
 PARAMETER(PAR.PS_Weight_Converted);
 PARAMETER(PAR.PS_Pieces_Converted);
 PARAMETER(PAR.PS_Weight_Shipping_Adj);
 PARAMETER(PAR.PS_Pieces_Shipping_Adj);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.PS_Weight_Inv_Adj);
 PARAMETER(PAR.PS_Pieces_Inv_Adj);
 PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Allocated);
 PARAMETER(PAR.PS_Pieces_Prod_Allocated);
 PARAMETER(PAR.PS_Weight_Inv_Allocated);
 PARAMETER(PAR.PS_Pieces_Inv_Allocated);
 PARAMETER(PAR.PS_Unit_Weight);
 PARAMETER(PAR.PS_Pieces_Prod_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Adj);
 PARAMETER(PAR.PS_Pieces_Unused_2);
 PARAMETER(PAR.PS_Weight_Unused_3);
 PARAMETER(PAR.PS_Pieces_Unused_3);
 PARAMETER(PAR.PS_Weight_Unused_4);
 PARAMETER(PAR.PS_Pieces_Unused_4);
 PARAMETER(PAR.PS_Weight_Unused_5);
 PARAMETER(PAR.PS_Pieces_Unused_5);
 PARAMETER(PAR.PS_Weight_Unused_6);
 PARAMETER(PAR.PS_Pieces_Unused_6);
 PARAMETER(PAR.PS_Item_Id);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.PS_Lock_Status);
 PARAMETER(PAR.PS_Export_Domestic);
 PARAMETER(PAR.PS_Print_On_Schedule);
 PARAMETER(PAR.PS_Piece_Count_Item);
 PARAMETER(PAR.PS_Unused_Sts_1);
 PARAMETER(PAR.PS_Unused_Sts_2);
 PARAMETER(PAR.PS_Unused_Sts_3);
 PARAMETER(PAR.PS_Unused_Sts_4);
 PARAMETER(PAR.PS_Item_Sched_Need_Sts);
 PARAMETER(PAR.PS_Production_Warehouse);
 PARAMETER(PAR.PS_Weight_Ordered);
 PARAMETER(PAR.PS_Pieces_Ordered);
 PARAMETER(PAR.PS_Weight_FC_Adjusted);
 PARAMETER(PAR.PS_Pieces_FC_Adjusted);
 PARAMETER(PAR.PS_Weight_FX_Adjusted);
 PARAMETER(PAR.PS_Pieces_FX_Adjusted);
 PARAMETER(PAR.PS_Weight_Sched_Shipment);
 PARAMETER(PAR.PS_Pieces_Sched_Shipment);
 PARAMETER(PAR.PS_Weight_Available_Prod);
 PARAMETER(PAR.PS_Pieces_Available_Prod);
 PARAMETER(PAR.PS_Weight_Production_Need);
 PARAMETER(PAR.PS_Pieces_Production_Need);
 PARAMETER(PAR.PS_Weight_Fab_Needs);
 PARAMETER(PAR.PS_Pieces_Fab_Needs);
 PARAMETER(PAR.PS_Weight_Sched_Prod);
 PARAMETER(PAR.PS_Pieces_Sched_Prod);
 PARAMETER(PAR.PS_Weight_Sched_Need);
 PARAMETER(PAR.PS_Pieces_Sched_Need);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Primal_Group_Code);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Job_Time);
 PARAMETER(PAR.User_Id);
 PARAMETER(PAR.Job_Name);
 PARAMETER(PAR.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(WRK.Description_Line_One);
  PARAMETER(WRK.UOM_Primary);
  PARAMETER(WRK.Unit_Weight);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(WRK.Item_Type_Code);
  PARAMETER(WRK.Default_Warehouse);
  PARAMETER(WRK.Fresh_Chilling_Time);
  PARAMETER(WRK.Base_Conv_Loss_Item);
  PARAMETER(WRK.Variety_Rendered_Cut);
  PARAMETER(WRK.Credit_Item_Status);
  PARAMETER(WRK.Std_Weight_Head_Var_Ren);
  PARAMETER(WRK.Pieces_Per_Head);
  PARAMETER(DB1.Department_Code);
  PARAMETER(WRK.Group_for_Packaging);
  PARAMETER(WRK.Seconds_Item);
  PARAMETER(DB1.PS_Piece_Count_Item);
  PARAMETER(WRK.Pieces_Per_Bag);
  PARAMETER(WRK.Bags_Per_Unit);
  PARAMETER(DB1.PS_Export_Domestic);
  PARAMETER(DB1.PS_Print_On_Schedule);
  PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
  PARAMETER(WRK.Fresh_Sched_As_Ordered);
  PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
  PARAMETER(DB1.Primal_Group_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Warehouse_Type);
  PARAMETER(WRK.Trans_Contol_AS400_Plant);
  PARAMETER(WRK.Warehouse_Location);
  PARAMETER(WRK.Warehouse_Std_Chill_Time);
  PARAMETER(WRK.Warehouse_Chill_Time);
  PARAMETER(DB1.PS_Item_Id);
  {
   //?Execute internal function

   EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Description_Line_One);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Default_Warehouse);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Std_Weight_Head_Var_Ren);
   PARAMETER(PAR.Pieces_Per_Head);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Group_for_Packaging);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Export_Domestic);
   PARAMETER(PAR.Print_On_Schedule);
   PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
   PARAMETER(PAR.Fresh_Sched_As_Ordered);
   PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
   PARAMETER(PAR.Primal_Group_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.Trans_Contol_AS400_Plant);
   PARAMETER(PAR.Warehouse_Location);
   PARAMETER(PAR.Warehouse_Std_Chill_Time);
   PARAMETER(PAR.Warehouse_Chill_Time);
   {
    //?Execute internal function

    EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

   }

   EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.PS_Item_Id);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Item Type Code is Raw Materials
    IF PAR.Item_Type_Code = 'RM';

    // PAR.PS Item Identification = CND.RM Base
    PAR.PS_Item_Id = 'RMB';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF PAR.Seconds Item is Yes
    IF PAR.Seconds_Item = 'Y';

    // PAR.PS Item Identification = CND.FG Seconds
    PAR.PS_Item_Id = 'FSC';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF PAR.Variety/Rendered/Cut is Variety
    IF PAR.Variety_Rendered_Cut = 'V';

    // PAR.PS Item Identification = CND.FG Variety
    PAR.PS_Item_Id = 'FVR';

    // IF PAR.Variety/Rendered/Cut is Rendered
    IF PAR.Variety_Rendered_Cut = 'R';

    // PAR.PS Item Identification = CND.FG Rendered
    PAR.PS_Item_Id = 'FRD';

    // IF PAR.Variety/Rendered/Cut is Cut
    IF PAR.Variety_Rendered_Cut = 'C';

    //?Base/Converted/Fabricated
    CASE;

    // IF PAR.Credit Item Status is yes
    IF PAR.Credit_Item_Status = 'Y';

    //?Setup Base/Converted/Fabricated Credit
    CASE;

    // IF PAR.Converted/Base Item is Base
    IF PAR.Base_Conv_Loss_Item = 'B';

    // PAR.PS Item Identification = CND.FG Base Credit
    PAR.PS_Item_Id = 'FBC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Converted
    IF PAR.Base_Conv_Loss_Item = 'C';

    // PAR.PS Item Identification = CND.FG Converted Credit
    PAR.PS_Item_Id = 'FCC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Fabricated
    IF PAR.Base_Conv_Loss_Item = 'F';

    // PAR.PS Item Identification = CND.FG Fabricated Credit
    PAR.PS_Item_Id = 'FFC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Loss
    IF PAR.Base_Conv_Loss_Item = 'L';

    // PAR.PS Item Identification = CND.FG Loss Credit
    PAR.PS_Item_Id = 'FLC';

    ENDIF;

    //?Base/Converted/Fabricated
    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Setup Base/Converted/Fabricated
    CASE;

    // IF PAR.Converted/Base Item is Base
    IF PAR.Base_Conv_Loss_Item = 'B';

    // PAR.PS Item Identification = CND.FG Base
    PAR.PS_Item_Id = 'FGB';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Converted
    IF PAR.Base_Conv_Loss_Item = 'C';

    // PAR.PS Item Identification = CND.FG Converted
    PAR.PS_Item_Id = 'FCV';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Fabricated
    IF PAR.Base_Conv_Loss_Item = 'F';

    // PAR.PS Item Identification = CND.FG Fabricated
    PAR.PS_Item_Id = 'FFB';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Loss
    IF PAR.Base_Conv_Loss_Item = 'L';

    // PAR.PS Item Identification = CND.FG Loss
    PAR.PS_Item_Id = 'FLS';

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

   }

  }

  //?FP1054 Output PS Prod Warehouse
  EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Production_Warehouse);
  PARAMETER(LCL.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Available Ship Date
  CASE;

  // IF WRK.Warehouse Std Chill Time is yes
  IF WRK.Warehouse_Std_Chill_Time = 'Y';

  EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(WRK.Warehouse_Chill_Time);
  PARAMETER(DB1.PS_Available_Ship_Date);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.Chilling Time
   IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

   // PAR.PS Available Ship Date = DB1.Post to G/L Date
   PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

   //?Skip Saturday
   CASE;

   // IF DB1.Day of Week is Saturday
   IF DB1.Day_of_Week = '7';

   //?Skip Saturday
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  //?Available Ship Date
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(WRK.Fresh_Chilling_Time);
  PARAMETER(DB1.PS_Available_Ship_Date);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.Chilling Time
   IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

   // PAR.PS Available Ship Date = DB1.Post to G/L Date
   PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

   //?Skip Saturday
   CASE;

   // IF DB1.Day of Week is Saturday
   IF DB1.Day_of_Week = '7';

   //?Skip Saturday
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  ENDIF;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Planned Prod is GT Zero
  IF PAR.PS_Pieces_Planned_Prod > *ZERO;

  // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
  DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

  ENDIF;

  EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // DB1.PS Lock Status = CND.NOT LOCKED
  DB1.PS_Lock_Status = 'N';

 }

 // IF PAR.ATS Adj Type USR is Schedule Override
 IF PAR.ATS_Adj_Type_USR = 'SV';

 //?output par.adj weight and pieces as standard weight and pieces
 EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Available_Ship_Date);
 PARAMETER(PAR.PS_Weight_Planned_Prod);
 PARAMETER(PAR.PS_Pieces_Planned_Prod);
 PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.PS_Weight_Inv_On_Hand);
 PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
 PARAMETER(PAR.PS_Weight_Prod_Adj);
 PARAMETER(PAR.PS_Pieces_Prod_Adj);
 PARAMETER(PAR.PS_Weight_Converted);
 PARAMETER(PAR.PS_Pieces_Converted);
 PARAMETER(PAR.PS_Weight_Shipping_Adj);
 PARAMETER(PAR.PS_Pieces_Shipping_Adj);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.PS_Weight_Inv_Adj);
 PARAMETER(PAR.PS_Pieces_Inv_Adj);
 PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Allocated);
 PARAMETER(PAR.PS_Pieces_Prod_Allocated);
 PARAMETER(PAR.PS_Weight_Inv_Allocated);
 PARAMETER(PAR.PS_Pieces_Inv_Allocated);
 PARAMETER(PAR.PS_Unit_Weight);
 PARAMETER(PAR.PS_Pieces_Prod_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Adj);
 PARAMETER(PAR.PS_Pieces_Unused_2);
 PARAMETER(PAR.PS_Weight_Unused_3);
 PARAMETER(PAR.PS_Pieces_Unused_3);
 PARAMETER(PAR.PS_Weight_Unused_4);
 PARAMETER(PAR.PS_Pieces_Unused_4);
 PARAMETER(PAR.PS_Weight_Unused_5);
 PARAMETER(PAR.PS_Pieces_Unused_5);
 PARAMETER(PAR.PS_Weight_Unused_6);
 PARAMETER(PAR.PS_Pieces_Unused_6);
 PARAMETER(PAR.PS_Item_Id);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.PS_Lock_Status);
 PARAMETER(PAR.PS_Export_Domestic);
 PARAMETER(PAR.PS_Print_On_Schedule);
 PARAMETER(PAR.PS_Piece_Count_Item);
 PARAMETER(PAR.PS_Unused_Sts_1);
 PARAMETER(PAR.PS_Unused_Sts_2);
 PARAMETER(PAR.PS_Unused_Sts_3);
 PARAMETER(PAR.PS_Unused_Sts_4);
 PARAMETER(PAR.PS_Item_Sched_Need_Sts);
 PARAMETER(PAR.PS_Production_Warehouse);
 PARAMETER(PAR.PS_Weight_Ordered);
 PARAMETER(PAR.PS_Pieces_Ordered);
 PARAMETER(PAR.PS_Weight_FC_Adjusted);
 PARAMETER(PAR.PS_Pieces_FC_Adjusted);
 PARAMETER(PAR.PS_Weight_FX_Adjusted);
 PARAMETER(PAR.PS_Pieces_FX_Adjusted);
 PARAMETER(PAR.PS_Weight_Sched_Shipment);
 PARAMETER(PAR.PS_Pieces_Sched_Shipment);
 PARAMETER(PAR.PS_Weight_Available_Prod);
 PARAMETER(PAR.PS_Pieces_Available_Prod);
 PARAMETER(PAR.PS_Weight_Production_Need);
 PARAMETER(PAR.PS_Pieces_Production_Need);
 PARAMETER(PAR.PS_Weight_Fab_Needs);
 PARAMETER(PAR.PS_Pieces_Fab_Needs);
 PARAMETER(PAR.PS_Weight_Sched_Prod);
 PARAMETER(PAR.PS_Pieces_Sched_Prod);
 PARAMETER(PAR.PS_Weight_Sched_Need);
 PARAMETER(PAR.PS_Pieces_Sched_Need);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Primal_Group_Code);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Job_Time);
 PARAMETER(PAR.User_Id);
 PARAMETER(PAR.Job_Name);
 PARAMETER(PAR.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(WRK.Description_Line_One);
  PARAMETER(WRK.UOM_Primary);
  PARAMETER(WRK.Unit_Weight);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(WRK.Item_Type_Code);
  PARAMETER(WRK.Default_Warehouse);
  PARAMETER(WRK.Fresh_Chilling_Time);
  PARAMETER(WRK.Base_Conv_Loss_Item);
  PARAMETER(WRK.Variety_Rendered_Cut);
  PARAMETER(WRK.Credit_Item_Status);
  PARAMETER(WRK.Std_Weight_Head_Var_Ren);
  PARAMETER(WRK.Pieces_Per_Head);
  PARAMETER(DB1.Department_Code);
  PARAMETER(WRK.Group_for_Packaging);
  PARAMETER(WRK.Seconds_Item);
  PARAMETER(DB1.PS_Piece_Count_Item);
  PARAMETER(WRK.Pieces_Per_Bag);
  PARAMETER(WRK.Bags_Per_Unit);
  PARAMETER(DB1.PS_Export_Domestic);
  PARAMETER(DB1.PS_Print_On_Schedule);
  PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
  PARAMETER(WRK.Fresh_Sched_As_Ordered);
  PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
  PARAMETER(DB1.Primal_Group_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Warehouse_Type);
  PARAMETER(WRK.Trans_Contol_AS400_Plant);
  PARAMETER(WRK.Warehouse_Location);
  PARAMETER(WRK.Warehouse_Std_Chill_Time);
  PARAMETER(WRK.Warehouse_Chill_Time);
  PARAMETER(DB1.PS_Item_Id);
  {
   //?Execute internal function

   EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Description_Line_One);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Default_Warehouse);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Std_Weight_Head_Var_Ren);
   PARAMETER(PAR.Pieces_Per_Head);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Group_for_Packaging);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Export_Domestic);
   PARAMETER(PAR.Print_On_Schedule);
   PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
   PARAMETER(PAR.Fresh_Sched_As_Ordered);
   PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
   PARAMETER(PAR.Primal_Group_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.Trans_Contol_AS400_Plant);
   PARAMETER(PAR.Warehouse_Location);
   PARAMETER(PAR.Warehouse_Std_Chill_Time);
   PARAMETER(PAR.Warehouse_Chill_Time);
   {
    //?Execute internal function

    EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

   }

   EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.PS_Item_Id);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Item Type Code is Raw Materials
    IF PAR.Item_Type_Code = 'RM';

    // PAR.PS Item Identification = CND.RM Base
    PAR.PS_Item_Id = 'RMB';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF PAR.Seconds Item is Yes
    IF PAR.Seconds_Item = 'Y';

    // PAR.PS Item Identification = CND.FG Seconds
    PAR.PS_Item_Id = 'FSC';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF PAR.Variety/Rendered/Cut is Variety
    IF PAR.Variety_Rendered_Cut = 'V';

    // PAR.PS Item Identification = CND.FG Variety
    PAR.PS_Item_Id = 'FVR';

    // IF PAR.Variety/Rendered/Cut is Rendered
    IF PAR.Variety_Rendered_Cut = 'R';

    // PAR.PS Item Identification = CND.FG Rendered
    PAR.PS_Item_Id = 'FRD';

    // IF PAR.Variety/Rendered/Cut is Cut
    IF PAR.Variety_Rendered_Cut = 'C';

    //?Base/Converted/Fabricated
    CASE;

    // IF PAR.Credit Item Status is yes
    IF PAR.Credit_Item_Status = 'Y';

    //?Setup Base/Converted/Fabricated Credit
    CASE;

    // IF PAR.Converted/Base Item is Base
    IF PAR.Base_Conv_Loss_Item = 'B';

    // PAR.PS Item Identification = CND.FG Base Credit
    PAR.PS_Item_Id = 'FBC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Converted
    IF PAR.Base_Conv_Loss_Item = 'C';

    // PAR.PS Item Identification = CND.FG Converted Credit
    PAR.PS_Item_Id = 'FCC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Fabricated
    IF PAR.Base_Conv_Loss_Item = 'F';

    // PAR.PS Item Identification = CND.FG Fabricated Credit
    PAR.PS_Item_Id = 'FFC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Loss
    IF PAR.Base_Conv_Loss_Item = 'L';

    // PAR.PS Item Identification = CND.FG Loss Credit
    PAR.PS_Item_Id = 'FLC';

    ENDIF;

    //?Base/Converted/Fabricated
    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Setup Base/Converted/Fabricated
    CASE;

    // IF PAR.Converted/Base Item is Base
    IF PAR.Base_Conv_Loss_Item = 'B';

    // PAR.PS Item Identification = CND.FG Base
    PAR.PS_Item_Id = 'FGB';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Converted
    IF PAR.Base_Conv_Loss_Item = 'C';

    // PAR.PS Item Identification = CND.FG Converted
    PAR.PS_Item_Id = 'FCV';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Fabricated
    IF PAR.Base_Conv_Loss_Item = 'F';

    // PAR.PS Item Identification = CND.FG Fabricated
    PAR.PS_Item_Id = 'FFB';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Loss
    IF PAR.Base_Conv_Loss_Item = 'L';

    // PAR.PS Item Identification = CND.FG Loss
    PAR.PS_Item_Id = 'FLS';

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

   }

  }

  //?FP1054 Output PS Prod Warehouse
  EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Production_Warehouse);
  PARAMETER(LCL.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Available Ship Date
  CASE;

  // IF WRK.Warehouse Std Chill Time is yes
  IF WRK.Warehouse_Std_Chill_Time = 'Y';

  EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(WRK.Warehouse_Chill_Time);
  PARAMETER(DB1.PS_Available_Ship_Date);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.Chilling Time
   IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

   // PAR.PS Available Ship Date = DB1.Post to G/L Date
   PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

   //?Skip Saturday
   CASE;

   // IF DB1.Day of Week is Saturday
   IF DB1.Day_of_Week = '7';

   //?Skip Saturday
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  //?Available Ship Date
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(WRK.Fresh_Chilling_Time);
  PARAMETER(DB1.PS_Available_Ship_Date);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.Chilling Time
   IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

   // PAR.PS Available Ship Date = DB1.Post to G/L Date
   PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

   //?Skip Saturday
   CASE;

   // IF DB1.Day of Week is Saturday
   IF DB1.Day_of_Week = '7';

   //?Skip Saturday
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  ENDIF;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Planned Prod is GT Zero
  IF PAR.PS_Pieces_Planned_Prod > *ZERO;

  // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
  DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

  ENDIF;

  EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // DB1.PS Lock Status = CND.NOT LOCKED
  DB1.PS_Lock_Status = 'N';

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Available_Ship_Date);
 PARAMETER(PAR.PS_Weight_Planned_Prod);
 PARAMETER(PAR.PS_Pieces_Planned_Prod);
 PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.PS_Weight_Inv_On_Hand);
 PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
 PARAMETER(PAR.PS_Weight_Standard);
 PARAMETER(PAR.PS_Pieces_Standard);
 PARAMETER(PAR.PS_Weight_Converted);
 PARAMETER(PAR.PS_Pieces_Converted);
 PARAMETER(PAR.PS_Weight_Shipping_Adj);
 PARAMETER(PAR.PS_Pieces_Shipping_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Adj);
 PARAMETER(PAR.PS_Pieces_Prod_Adj);
 PARAMETER(PAR.PS_Weight_Inv_Adj);
 PARAMETER(PAR.PS_Pieces_Inv_Adj);
 PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Allocated);
 PARAMETER(PAR.PS_Pieces_Prod_Allocated);
 PARAMETER(PAR.PS_Weight_Inv_Allocated);
 PARAMETER(PAR.PS_Pieces_Inv_Allocated);
 PARAMETER(PAR.PS_Unit_Weight);
 PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(PAR.PS_Pieces_Unused_2);
 PARAMETER(PAR.PS_Weight_Unused_3);
 PARAMETER(PAR.PS_Pieces_Unused_3);
 PARAMETER(PAR.PS_Weight_Unused_4);
 PARAMETER(PAR.PS_Pieces_Unused_4);
 PARAMETER(PAR.PS_Weight_Unused_5);
 PARAMETER(PAR.PS_Pieces_Unused_5);
 PARAMETER(PAR.PS_Weight_Unused_6);
 PARAMETER(PAR.PS_Pieces_Unused_6);
 PARAMETER(PAR.PS_Item_Id);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.PS_Lock_Status);
 PARAMETER(PAR.PS_Export_Domestic);
 PARAMETER(PAR.PS_Print_On_Schedule);
 PARAMETER(PAR.PS_Piece_Count_Item);
 PARAMETER(PAR.PS_Unused_Sts_1);
 PARAMETER(PAR.PS_Unused_Sts_2);
 PARAMETER(PAR.PS_Unused_Sts_3);
 PARAMETER(PAR.PS_Unused_Sts_4);
 PARAMETER(PAR.PS_Item_Sched_Need_Sts);
 PARAMETER(PAR.PS_Production_Warehouse);
 PARAMETER(PAR.PS_Weight_Ordered);
 PARAMETER(PAR.PS_Pieces_Ordered);
 PARAMETER(PAR.PS_Weight_FC_Adjusted);
 PARAMETER(PAR.PS_Pieces_FC_Adjusted);
 PARAMETER(PAR.PS_Weight_FX_Adjusted);
 PARAMETER(PAR.PS_Pieces_FX_Adjusted);
 PARAMETER(PAR.PS_Weight_Sched_Shipment);
 PARAMETER(PAR.PS_Pieces_Sched_Shipment);
 PARAMETER(PAR.PS_Weight_Available_Prod);
 PARAMETER(PAR.PS_Pieces_Available_Prod);
 PARAMETER(PAR.PS_Weight_Production_Need);
 PARAMETER(PAR.PS_Pieces_Production_Need);
 PARAMETER(PAR.PS_Weight_Fab_Needs);
 PARAMETER(PAR.PS_Pieces_Fab_Needs);
 PARAMETER(PAR.PS_Weight_Sched_Prod);
 PARAMETER(PAR.PS_Pieces_Sched_Prod);
 PARAMETER(PAR.PS_Weight_Sched_Need);
 PARAMETER(PAR.PS_Pieces_Sched_Need);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Primal_Group_Code);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Job_Time);
 PARAMETER(PAR.User_Id);
 PARAMETER(PAR.Job_Name);
 PARAMETER(PAR.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(WRK.Description_Line_One);
  PARAMETER(WRK.UOM_Primary);
  PARAMETER(WRK.Unit_Weight);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(WRK.Item_Type_Code);
  PARAMETER(WRK.Default_Warehouse);
  PARAMETER(WRK.Fresh_Chilling_Time);
  PARAMETER(WRK.Base_Conv_Loss_Item);
  PARAMETER(WRK.Variety_Rendered_Cut);
  PARAMETER(WRK.Credit_Item_Status);
  PARAMETER(WRK.Std_Weight_Head_Var_Ren);
  PARAMETER(WRK.Pieces_Per_Head);
  PARAMETER(DB1.Department_Code);
  PARAMETER(WRK.Group_for_Packaging);
  PARAMETER(WRK.Seconds_Item);
  PARAMETER(DB1.PS_Piece_Count_Item);
  PARAMETER(WRK.Pieces_Per_Bag);
  PARAMETER(WRK.Bags_Per_Unit);
  PARAMETER(DB1.PS_Export_Domestic);
  PARAMETER(DB1.PS_Print_On_Schedule);
  PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
  PARAMETER(WRK.Fresh_Sched_As_Ordered);
  PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
  PARAMETER(DB1.Primal_Group_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Warehouse_Type);
  PARAMETER(WRK.Trans_Contol_AS400_Plant);
  PARAMETER(WRK.Warehouse_Location);
  PARAMETER(WRK.Warehouse_Std_Chill_Time);
  PARAMETER(WRK.Warehouse_Chill_Time);
  PARAMETER(DB1.PS_Item_Id);
  {
   //?Execute internal function

   EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Description_Line_One);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Default_Warehouse);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Std_Weight_Head_Var_Ren);
   PARAMETER(PAR.Pieces_Per_Head);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Group_for_Packaging);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Export_Domestic);
   PARAMETER(PAR.Print_On_Schedule);
   PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
   PARAMETER(PAR.Fresh_Sched_As_Ordered);
   PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
   PARAMETER(PAR.Primal_Group_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.Trans_Contol_AS400_Plant);
   PARAMETER(PAR.Warehouse_Location);
   PARAMETER(PAR.Warehouse_Std_Chill_Time);
   PARAMETER(PAR.Warehouse_Chill_Time);
   {
    //?Execute internal function

    EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

   }

   EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.PS_Item_Id);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Item Type Code is Raw Materials
    IF PAR.Item_Type_Code = 'RM';

    // PAR.PS Item Identification = CND.RM Base
    PAR.PS_Item_Id = 'RMB';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF PAR.Seconds Item is Yes
    IF PAR.Seconds_Item = 'Y';

    // PAR.PS Item Identification = CND.FG Seconds
    PAR.PS_Item_Id = 'FSC';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF PAR.Variety/Rendered/Cut is Variety
    IF PAR.Variety_Rendered_Cut = 'V';

    // PAR.PS Item Identification = CND.FG Variety
    PAR.PS_Item_Id = 'FVR';

    // IF PAR.Variety/Rendered/Cut is Rendered
    IF PAR.Variety_Rendered_Cut = 'R';

    // PAR.PS Item Identification = CND.FG Rendered
    PAR.PS_Item_Id = 'FRD';

    // IF PAR.Variety/Rendered/Cut is Cut
    IF PAR.Variety_Rendered_Cut = 'C';

    //?Base/Converted/Fabricated
    CASE;

    // IF PAR.Credit Item Status is yes
    IF PAR.Credit_Item_Status = 'Y';

    //?Setup Base/Converted/Fabricated Credit
    CASE;

    // IF PAR.Converted/Base Item is Base
    IF PAR.Base_Conv_Loss_Item = 'B';

    // PAR.PS Item Identification = CND.FG Base Credit
    PAR.PS_Item_Id = 'FBC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Converted
    IF PAR.Base_Conv_Loss_Item = 'C';

    // PAR.PS Item Identification = CND.FG Converted Credit
    PAR.PS_Item_Id = 'FCC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Fabricated
    IF PAR.Base_Conv_Loss_Item = 'F';

    // PAR.PS Item Identification = CND.FG Fabricated Credit
    PAR.PS_Item_Id = 'FFC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Loss
    IF PAR.Base_Conv_Loss_Item = 'L';

    // PAR.PS Item Identification = CND.FG Loss Credit
    PAR.PS_Item_Id = 'FLC';

    ENDIF;

    //?Base/Converted/Fabricated
    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Setup Base/Converted/Fabricated
    CASE;

    // IF PAR.Converted/Base Item is Base
    IF PAR.Base_Conv_Loss_Item = 'B';

    // PAR.PS Item Identification = CND.FG Base
    PAR.PS_Item_Id = 'FGB';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Converted
    IF PAR.Base_Conv_Loss_Item = 'C';

    // PAR.PS Item Identification = CND.FG Converted
    PAR.PS_Item_Id = 'FCV';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Fabricated
    IF PAR.Base_Conv_Loss_Item = 'F';

    // PAR.PS Item Identification = CND.FG Fabricated
    PAR.PS_Item_Id = 'FFB';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Loss
    IF PAR.Base_Conv_Loss_Item = 'L';

    // PAR.PS Item Identification = CND.FG Loss
    PAR.PS_Item_Id = 'FLS';

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

   }

  }

  //?FP1054 Output PS Prod Warehouse
  EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Production_Warehouse);
  PARAMETER(LCL.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Available Ship Date
  CASE;

  // IF WRK.Warehouse Std Chill Time is yes
  IF WRK.Warehouse_Std_Chill_Time = 'Y';

  EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(WRK.Warehouse_Chill_Time);
  PARAMETER(DB1.PS_Available_Ship_Date);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.Chilling Time
   IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

   // PAR.PS Available Ship Date = DB1.Post to G/L Date
   PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

   //?Skip Saturday
   CASE;

   // IF DB1.Day of Week is Saturday
   IF DB1.Day_of_Week = '7';

   //?Skip Saturday
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  //?Available Ship Date
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(WRK.Fresh_Chilling_Time);
  PARAMETER(DB1.PS_Available_Ship_Date);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.Chilling Time
   IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

   // PAR.PS Available Ship Date = DB1.Post to G/L Date
   PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

   //?Skip Saturday
   CASE;

   // IF DB1.Day of Week is Saturday
   IF DB1.Day_of_Week = '7';

   //?Skip Saturday
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  ENDIF;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Planned Prod is GT Zero
  IF PAR.PS_Pieces_Planned_Prod > *ZERO;

  // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
  DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

  ENDIF;

  EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // DB1.PS Lock Status = CND.NOT LOCKED
  DB1.PS_Lock_Status = 'N';

 }

 ENDIF;

 ENDIF;

 //?USER: Process Data record

 //?02/05/09 FP1054 RMC Added Schedule Override adj-> type = SV
 //?04/09/08 PKD Added Freezer Transfer update
 CASE;

 // IF PAR.ATS Adj Type USR is Schedule Override
 IF PAR.ATS_Adj_Type_USR = 'SV';

 CASE;

 // IF PAR.PS Pieces Prod Adj is NE Zeros
 IF PAR.PS_Pieces_Prod_Adj <> *ZERO;

 // LCL.PS Avg Piece Wgt = PAR.PS Weight Prod Adj / PAR.PS Pieces Prod Adj *
 LCL.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Adj / PAR.PS_Pieces_Prod_Adj;

 CASE;

 // IF LCL.PS Avg Piece Wgt is LT Zero
 IF LCL.PS_Avg_Piece_Wgt < *ZERO;

 // LCL.PS Avg Piece Wgt = LCL.PS Avg Piece Wgt * CON.-1 *
 LCL.PS_Avg_Piece_Wgt = LCL.PS_Avg_Piece_Wgt * -1;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.PS Avg Piece Wgt = CON.*ZERO
 LCL.PS_Avg_Piece_Wgt = *ZERO;

 ENDIF;

 EXECUTE FUNCTION(Chg Schedule Prd      CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1919708;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(LCL.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.PS_Weight_Prod_Adj);
 PARAMETER(PAR.PS_Pieces_Prod_Adj);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.PS Weight Prod Adj = DB1.PS Weight Prod Adj + PAR.PS Weight Prod Adj
 LCL.PS_Weight_Prod_Adj = DB1.PS_Weight_Prod_Adj + PAR.PS_Weight_Prod_Adj;

 // LCL.PS Pieces Prod Adj = DB1.PS Pieces Prod Adj + PAR.PS Pieces Prod Adj
 LCL.PS_Pieces_Prod_Adj = DB1.PS_Pieces_Prod_Adj + PAR.PS_Pieces_Prod_Adj;

 //?If forecast adjustment type do not allow negatives
 CASE;

 // IF PAR.ATS Adj Type USR is Schedule Adjust Forecast
 IF PAR.ATS_Adj_Type_USR = 'SF';

 CASE;

 // IF LCL.PS Weight Prod Adj is LT Zero
 IF LCL.PS_Weight_Prod_Adj < *ZERO;

 // OR LCL.PS Pieces Prod Adj is LT Zeros
 OR LCL.PS_Pieces_Prod_Adj < *ZERO;

 // LCL.PS Weight Prod Adj = CON.*ZERO
 LCL.PS_Weight_Prod_Adj = *ZERO;

 // LCL.PS Pieces Prod Adj = CON.*ZERO
 LCL.PS_Pieces_Prod_Adj = *ZERO;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Chg Schedule Adj      CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478190;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(LCL.PS_Weight_Prod_Adj);
 PARAMETER(LCL.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

 }

 ENDIF;

}


// IF PAR.ATS Adj Type USR is Schedule Override
IF PAR.ATS_Adj_Type_USR = 'SV';

EXECUTE FUNCTION(UPD Schedule Adj      RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478187;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Production_Type);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.PSAA_Weight_Adjusted);
PARAMETER(PAR.Pieces_Adjusted);
PARAMETER(PAR.ATS_Adj_Type_USR);
{
 //?USER: Processing if Data record not found

 //?04/09/08 PKD Added condition for Freezer Transfer to update
 //?             new bucket
 //?02/05/09 RMC FP1054 Added condition for Schedule override to update
 //?             standard weight and pieces
 //?If forecast adjustment type do not allow negatives
 CASE;

 // IF PAR.ATS Adj Type USR is Schedule Adjust Forecast
 IF PAR.ATS_Adj_Type_USR = 'SF';

 CASE;

 // IF PAR.PS Weight Prod Adj is GT Zero
 IF PAR.PS_Weight_Prod_Adj > *ZERO;

 // OR PAR.PS Pieces Prod Adj is GT Zero
 OR PAR.PS_Pieces_Prod_Adj > *ZERO;

 EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Available_Ship_Date);
 PARAMETER(PAR.PS_Weight_Planned_Prod);
 PARAMETER(PAR.PS_Pieces_Planned_Prod);
 PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.PS_Weight_Inv_On_Hand);
 PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
 PARAMETER(PAR.PS_Weight_Standard);
 PARAMETER(PAR.PS_Pieces_Standard);
 PARAMETER(PAR.PS_Weight_Converted);
 PARAMETER(PAR.PS_Pieces_Converted);
 PARAMETER(PAR.PS_Weight_Shipping_Adj);
 PARAMETER(PAR.PS_Pieces_Shipping_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Adj);
 PARAMETER(PAR.PS_Pieces_Prod_Adj);
 PARAMETER(PAR.PS_Weight_Inv_Adj);
 PARAMETER(PAR.PS_Pieces_Inv_Adj);
 PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Allocated);
 PARAMETER(PAR.PS_Pieces_Prod_Allocated);
 PARAMETER(PAR.PS_Weight_Inv_Allocated);
 PARAMETER(PAR.PS_Pieces_Inv_Allocated);
 PARAMETER(PAR.PS_Unit_Weight);
 PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(PAR.PS_Pieces_Unused_2);
 PARAMETER(PAR.PS_Weight_Unused_3);
 PARAMETER(PAR.PS_Pieces_Unused_3);
 PARAMETER(PAR.PS_Weight_Unused_4);
 PARAMETER(PAR.PS_Pieces_Unused_4);
 PARAMETER(PAR.PS_Weight_Unused_5);
 PARAMETER(PAR.PS_Pieces_Unused_5);
 PARAMETER(PAR.PS_Weight_Unused_6);
 PARAMETER(PAR.PS_Pieces_Unused_6);
 PARAMETER(PAR.PS_Item_Id);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.PS_Lock_Status);
 PARAMETER(PAR.PS_Export_Domestic);
 PARAMETER(PAR.PS_Print_On_Schedule);
 PARAMETER(PAR.PS_Piece_Count_Item);
 PARAMETER(PAR.PS_Unused_Sts_1);
 PARAMETER(PAR.PS_Unused_Sts_2);
 PARAMETER(PAR.PS_Unused_Sts_3);
 PARAMETER(PAR.PS_Unused_Sts_4);
 PARAMETER(PAR.PS_Item_Sched_Need_Sts);
 PARAMETER(PAR.PS_Production_Warehouse);
 PARAMETER(PAR.PS_Weight_Ordered);
 PARAMETER(PAR.PS_Pieces_Ordered);
 PARAMETER(PAR.PS_Weight_FC_Adjusted);
 PARAMETER(PAR.PS_Pieces_FC_Adjusted);
 PARAMETER(PAR.PS_Weight_FX_Adjusted);
 PARAMETER(PAR.PS_Pieces_FX_Adjusted);
 PARAMETER(PAR.PS_Weight_Sched_Shipment);
 PARAMETER(PAR.PS_Pieces_Sched_Shipment);
 PARAMETER(PAR.PS_Weight_Available_Prod);
 PARAMETER(PAR.PS_Pieces_Available_Prod);
 PARAMETER(PAR.PS_Weight_Production_Need);
 PARAMETER(PAR.PS_Pieces_Production_Need);
 PARAMETER(PAR.PS_Weight_Fab_Needs);
 PARAMETER(PAR.PS_Pieces_Fab_Needs);
 PARAMETER(PAR.PS_Weight_Sched_Prod);
 PARAMETER(PAR.PS_Pieces_Sched_Prod);
 PARAMETER(PAR.PS_Weight_Sched_Need);
 PARAMETER(PAR.PS_Pieces_Sched_Need);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Primal_Group_Code);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Job_Time);
 PARAMETER(PAR.User_Id);
 PARAMETER(PAR.Job_Name);
 PARAMETER(PAR.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(WRK.Description_Line_One);
  PARAMETER(WRK.UOM_Primary);
  PARAMETER(WRK.Unit_Weight);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(WRK.Item_Type_Code);
  PARAMETER(WRK.Default_Warehouse);
  PARAMETER(WRK.Fresh_Chilling_Time);
  PARAMETER(WRK.Base_Conv_Loss_Item);
  PARAMETER(WRK.Variety_Rendered_Cut);
  PARAMETER(WRK.Credit_Item_Status);
  PARAMETER(WRK.Std_Weight_Head_Var_Ren);
  PARAMETER(WRK.Pieces_Per_Head);
  PARAMETER(DB1.Department_Code);
  PARAMETER(WRK.Group_for_Packaging);
  PARAMETER(WRK.Seconds_Item);
  PARAMETER(DB1.PS_Piece_Count_Item);
  PARAMETER(WRK.Pieces_Per_Bag);
  PARAMETER(WRK.Bags_Per_Unit);
  PARAMETER(DB1.PS_Export_Domestic);
  PARAMETER(DB1.PS_Print_On_Schedule);
  PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
  PARAMETER(WRK.Fresh_Sched_As_Ordered);
  PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
  PARAMETER(DB1.Primal_Group_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Warehouse_Type);
  PARAMETER(WRK.Trans_Contol_AS400_Plant);
  PARAMETER(WRK.Warehouse_Location);
  PARAMETER(WRK.Warehouse_Std_Chill_Time);
  PARAMETER(WRK.Warehouse_Chill_Time);
  PARAMETER(DB1.PS_Item_Id);
  {
   //?Execute internal function

   EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Description_Line_One);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Default_Warehouse);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Std_Weight_Head_Var_Ren);
   PARAMETER(PAR.Pieces_Per_Head);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Group_for_Packaging);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Export_Domestic);
   PARAMETER(PAR.Print_On_Schedule);
   PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
   PARAMETER(PAR.Fresh_Sched_As_Ordered);
   PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
   PARAMETER(PAR.Primal_Group_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.Trans_Contol_AS400_Plant);
   PARAMETER(PAR.Warehouse_Location);
   PARAMETER(PAR.Warehouse_Std_Chill_Time);
   PARAMETER(PAR.Warehouse_Chill_Time);
   {
    //?Execute internal function

    EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

   }

   EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.PS_Item_Id);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Item Type Code is Raw Materials
    IF PAR.Item_Type_Code = 'RM';

    // PAR.PS Item Identification = CND.RM Base
    PAR.PS_Item_Id = 'RMB';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF PAR.Seconds Item is Yes
    IF PAR.Seconds_Item = 'Y';

    // PAR.PS Item Identification = CND.FG Seconds
    PAR.PS_Item_Id = 'FSC';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF PAR.Variety/Rendered/Cut is Variety
    IF PAR.Variety_Rendered_Cut = 'V';

    // PAR.PS Item Identification = CND.FG Variety
    PAR.PS_Item_Id = 'FVR';

    // IF PAR.Variety/Rendered/Cut is Rendered
    IF PAR.Variety_Rendered_Cut = 'R';

    // PAR.PS Item Identification = CND.FG Rendered
    PAR.PS_Item_Id = 'FRD';

    // IF PAR.Variety/Rendered/Cut is Cut
    IF PAR.Variety_Rendered_Cut = 'C';

    //?Base/Converted/Fabricated
    CASE;

    // IF PAR.Credit Item Status is yes
    IF PAR.Credit_Item_Status = 'Y';

    //?Setup Base/Converted/Fabricated Credit
    CASE;

    // IF PAR.Converted/Base Item is Base
    IF PAR.Base_Conv_Loss_Item = 'B';

    // PAR.PS Item Identification = CND.FG Base Credit
    PAR.PS_Item_Id = 'FBC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Converted
    IF PAR.Base_Conv_Loss_Item = 'C';

    // PAR.PS Item Identification = CND.FG Converted Credit
    PAR.PS_Item_Id = 'FCC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Fabricated
    IF PAR.Base_Conv_Loss_Item = 'F';

    // PAR.PS Item Identification = CND.FG Fabricated Credit
    PAR.PS_Item_Id = 'FFC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Loss
    IF PAR.Base_Conv_Loss_Item = 'L';

    // PAR.PS Item Identification = CND.FG Loss Credit
    PAR.PS_Item_Id = 'FLC';

    ENDIF;

    //?Base/Converted/Fabricated
    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Setup Base/Converted/Fabricated
    CASE;

    // IF PAR.Converted/Base Item is Base
    IF PAR.Base_Conv_Loss_Item = 'B';

    // PAR.PS Item Identification = CND.FG Base
    PAR.PS_Item_Id = 'FGB';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Converted
    IF PAR.Base_Conv_Loss_Item = 'C';

    // PAR.PS Item Identification = CND.FG Converted
    PAR.PS_Item_Id = 'FCV';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Fabricated
    IF PAR.Base_Conv_Loss_Item = 'F';

    // PAR.PS Item Identification = CND.FG Fabricated
    PAR.PS_Item_Id = 'FFB';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Loss
    IF PAR.Base_Conv_Loss_Item = 'L';

    // PAR.PS Item Identification = CND.FG Loss
    PAR.PS_Item_Id = 'FLS';

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

   }

  }

  //?FP1054 Output PS Prod Warehouse
  EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Production_Warehouse);
  PARAMETER(LCL.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Available Ship Date
  CASE;

  // IF WRK.Warehouse Std Chill Time is yes
  IF WRK.Warehouse_Std_Chill_Time = 'Y';

  EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(WRK.Warehouse_Chill_Time);
  PARAMETER(DB1.PS_Available_Ship_Date);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.Chilling Time
   IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

   // PAR.PS Available Ship Date = DB1.Post to G/L Date
   PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

   //?Skip Saturday
   CASE;

   // IF DB1.Day of Week is Saturday
   IF DB1.Day_of_Week = '7';

   //?Skip Saturday
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  //?Available Ship Date
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(WRK.Fresh_Chilling_Time);
  PARAMETER(DB1.PS_Available_Ship_Date);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.Chilling Time
   IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

   // PAR.PS Available Ship Date = DB1.Post to G/L Date
   PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

   //?Skip Saturday
   CASE;

   // IF DB1.Day of Week is Saturday
   IF DB1.Day_of_Week = '7';

   //?Skip Saturday
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  ENDIF;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Planned Prod is GT Zero
  IF PAR.PS_Pieces_Planned_Prod > *ZERO;

  // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
  DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

  ENDIF;

  EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // DB1.PS Lock Status = CND.NOT LOCKED
  DB1.PS_Lock_Status = 'N';

 }

 ENDIF;

 //?If forecast adjustment type do not allow negatives
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.ATS Adj Type USR is Freezer Transfer
 IF PAR.ATS_Adj_Type_USR = 'FT';

 EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Available_Ship_Date);
 PARAMETER(PAR.PS_Weight_Planned_Prod);
 PARAMETER(PAR.PS_Pieces_Planned_Prod);
 PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.PS_Weight_Inv_On_Hand);
 PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
 PARAMETER(PAR.PS_Weight_Standard);
 PARAMETER(PAR.PS_Pieces_Standard);
 PARAMETER(PAR.PS_Weight_Converted);
 PARAMETER(PAR.PS_Pieces_Converted);
 PARAMETER(PAR.PS_Weight_Shipping_Adj);
 PARAMETER(PAR.PS_Pieces_Shipping_Adj);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.PS_Weight_Inv_Adj);
 PARAMETER(PAR.PS_Pieces_Inv_Adj);
 PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Allocated);
 PARAMETER(PAR.PS_Pieces_Prod_Allocated);
 PARAMETER(PAR.PS_Weight_Inv_Allocated);
 PARAMETER(PAR.PS_Pieces_Inv_Allocated);
 PARAMETER(PAR.PS_Unit_Weight);
 PARAMETER(PAR.PS_Pieces_Prod_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Adj);
 PARAMETER(PAR.PS_Pieces_Unused_2);
 PARAMETER(PAR.PS_Weight_Unused_3);
 PARAMETER(PAR.PS_Pieces_Unused_3);
 PARAMETER(PAR.PS_Weight_Unused_4);
 PARAMETER(PAR.PS_Pieces_Unused_4);
 PARAMETER(PAR.PS_Weight_Unused_5);
 PARAMETER(PAR.PS_Pieces_Unused_5);
 PARAMETER(PAR.PS_Weight_Unused_6);
 PARAMETER(PAR.PS_Pieces_Unused_6);
 PARAMETER(PAR.PS_Item_Id);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.PS_Lock_Status);
 PARAMETER(PAR.PS_Export_Domestic);
 PARAMETER(PAR.PS_Print_On_Schedule);
 PARAMETER(PAR.PS_Piece_Count_Item);
 PARAMETER(PAR.PS_Unused_Sts_1);
 PARAMETER(PAR.PS_Unused_Sts_2);
 PARAMETER(PAR.PS_Unused_Sts_3);
 PARAMETER(PAR.PS_Unused_Sts_4);
 PARAMETER(PAR.PS_Item_Sched_Need_Sts);
 PARAMETER(PAR.PS_Production_Warehouse);
 PARAMETER(PAR.PS_Weight_Ordered);
 PARAMETER(PAR.PS_Pieces_Ordered);
 PARAMETER(PAR.PS_Weight_FC_Adjusted);
 PARAMETER(PAR.PS_Pieces_FC_Adjusted);
 PARAMETER(PAR.PS_Weight_FX_Adjusted);
 PARAMETER(PAR.PS_Pieces_FX_Adjusted);
 PARAMETER(PAR.PS_Weight_Sched_Shipment);
 PARAMETER(PAR.PS_Pieces_Sched_Shipment);
 PARAMETER(PAR.PS_Weight_Available_Prod);
 PARAMETER(PAR.PS_Pieces_Available_Prod);
 PARAMETER(PAR.PS_Weight_Production_Need);
 PARAMETER(PAR.PS_Pieces_Production_Need);
 PARAMETER(PAR.PS_Weight_Fab_Needs);
 PARAMETER(PAR.PS_Pieces_Fab_Needs);
 PARAMETER(PAR.PS_Weight_Sched_Prod);
 PARAMETER(PAR.PS_Pieces_Sched_Prod);
 PARAMETER(PAR.PS_Weight_Sched_Need);
 PARAMETER(PAR.PS_Pieces_Sched_Need);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Primal_Group_Code);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Job_Time);
 PARAMETER(PAR.User_Id);
 PARAMETER(PAR.Job_Name);
 PARAMETER(PAR.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(WRK.Description_Line_One);
  PARAMETER(WRK.UOM_Primary);
  PARAMETER(WRK.Unit_Weight);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(WRK.Item_Type_Code);
  PARAMETER(WRK.Default_Warehouse);
  PARAMETER(WRK.Fresh_Chilling_Time);
  PARAMETER(WRK.Base_Conv_Loss_Item);
  PARAMETER(WRK.Variety_Rendered_Cut);
  PARAMETER(WRK.Credit_Item_Status);
  PARAMETER(WRK.Std_Weight_Head_Var_Ren);
  PARAMETER(WRK.Pieces_Per_Head);
  PARAMETER(DB1.Department_Code);
  PARAMETER(WRK.Group_for_Packaging);
  PARAMETER(WRK.Seconds_Item);
  PARAMETER(DB1.PS_Piece_Count_Item);
  PARAMETER(WRK.Pieces_Per_Bag);
  PARAMETER(WRK.Bags_Per_Unit);
  PARAMETER(DB1.PS_Export_Domestic);
  PARAMETER(DB1.PS_Print_On_Schedule);
  PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
  PARAMETER(WRK.Fresh_Sched_As_Ordered);
  PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
  PARAMETER(DB1.Primal_Group_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Warehouse_Type);
  PARAMETER(WRK.Trans_Contol_AS400_Plant);
  PARAMETER(WRK.Warehouse_Location);
  PARAMETER(WRK.Warehouse_Std_Chill_Time);
  PARAMETER(WRK.Warehouse_Chill_Time);
  PARAMETER(DB1.PS_Item_Id);
  {
   //?Execute internal function

   EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Description_Line_One);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Default_Warehouse);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Std_Weight_Head_Var_Ren);
   PARAMETER(PAR.Pieces_Per_Head);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Group_for_Packaging);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Export_Domestic);
   PARAMETER(PAR.Print_On_Schedule);
   PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
   PARAMETER(PAR.Fresh_Sched_As_Ordered);
   PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
   PARAMETER(PAR.Primal_Group_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.Trans_Contol_AS400_Plant);
   PARAMETER(PAR.Warehouse_Location);
   PARAMETER(PAR.Warehouse_Std_Chill_Time);
   PARAMETER(PAR.Warehouse_Chill_Time);
   {
    //?Execute internal function

    EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

   }

   EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.PS_Item_Id);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Item Type Code is Raw Materials
    IF PAR.Item_Type_Code = 'RM';

    // PAR.PS Item Identification = CND.RM Base
    PAR.PS_Item_Id = 'RMB';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF PAR.Seconds Item is Yes
    IF PAR.Seconds_Item = 'Y';

    // PAR.PS Item Identification = CND.FG Seconds
    PAR.PS_Item_Id = 'FSC';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF PAR.Variety/Rendered/Cut is Variety
    IF PAR.Variety_Rendered_Cut = 'V';

    // PAR.PS Item Identification = CND.FG Variety
    PAR.PS_Item_Id = 'FVR';

    // IF PAR.Variety/Rendered/Cut is Rendered
    IF PAR.Variety_Rendered_Cut = 'R';

    // PAR.PS Item Identification = CND.FG Rendered
    PAR.PS_Item_Id = 'FRD';

    // IF PAR.Variety/Rendered/Cut is Cut
    IF PAR.Variety_Rendered_Cut = 'C';

    //?Base/Converted/Fabricated
    CASE;

    // IF PAR.Credit Item Status is yes
    IF PAR.Credit_Item_Status = 'Y';

    //?Setup Base/Converted/Fabricated Credit
    CASE;

    // IF PAR.Converted/Base Item is Base
    IF PAR.Base_Conv_Loss_Item = 'B';

    // PAR.PS Item Identification = CND.FG Base Credit
    PAR.PS_Item_Id = 'FBC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Converted
    IF PAR.Base_Conv_Loss_Item = 'C';

    // PAR.PS Item Identification = CND.FG Converted Credit
    PAR.PS_Item_Id = 'FCC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Fabricated
    IF PAR.Base_Conv_Loss_Item = 'F';

    // PAR.PS Item Identification = CND.FG Fabricated Credit
    PAR.PS_Item_Id = 'FFC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Loss
    IF PAR.Base_Conv_Loss_Item = 'L';

    // PAR.PS Item Identification = CND.FG Loss Credit
    PAR.PS_Item_Id = 'FLC';

    ENDIF;

    //?Base/Converted/Fabricated
    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Setup Base/Converted/Fabricated
    CASE;

    // IF PAR.Converted/Base Item is Base
    IF PAR.Base_Conv_Loss_Item = 'B';

    // PAR.PS Item Identification = CND.FG Base
    PAR.PS_Item_Id = 'FGB';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Converted
    IF PAR.Base_Conv_Loss_Item = 'C';

    // PAR.PS Item Identification = CND.FG Converted
    PAR.PS_Item_Id = 'FCV';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Fabricated
    IF PAR.Base_Conv_Loss_Item = 'F';

    // PAR.PS Item Identification = CND.FG Fabricated
    PAR.PS_Item_Id = 'FFB';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Loss
    IF PAR.Base_Conv_Loss_Item = 'L';

    // PAR.PS Item Identification = CND.FG Loss
    PAR.PS_Item_Id = 'FLS';

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

   }

  }

  //?FP1054 Output PS Prod Warehouse
  EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Production_Warehouse);
  PARAMETER(LCL.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Available Ship Date
  CASE;

  // IF WRK.Warehouse Std Chill Time is yes
  IF WRK.Warehouse_Std_Chill_Time = 'Y';

  EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(WRK.Warehouse_Chill_Time);
  PARAMETER(DB1.PS_Available_Ship_Date);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.Chilling Time
   IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

   // PAR.PS Available Ship Date = DB1.Post to G/L Date
   PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

   //?Skip Saturday
   CASE;

   // IF DB1.Day of Week is Saturday
   IF DB1.Day_of_Week = '7';

   //?Skip Saturday
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  //?Available Ship Date
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(WRK.Fresh_Chilling_Time);
  PARAMETER(DB1.PS_Available_Ship_Date);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.Chilling Time
   IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

   // PAR.PS Available Ship Date = DB1.Post to G/L Date
   PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

   //?Skip Saturday
   CASE;

   // IF DB1.Day of Week is Saturday
   IF DB1.Day_of_Week = '7';

   //?Skip Saturday
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  ENDIF;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Planned Prod is GT Zero
  IF PAR.PS_Pieces_Planned_Prod > *ZERO;

  // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
  DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

  ENDIF;

  EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // DB1.PS Lock Status = CND.NOT LOCKED
  DB1.PS_Lock_Status = 'N';

 }

 // IF PAR.ATS Adj Type USR is Schedule Override
 IF PAR.ATS_Adj_Type_USR = 'SV';

 //?output par.adj weight and pieces as standard weight and pieces
 EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Available_Ship_Date);
 PARAMETER(PAR.PS_Weight_Planned_Prod);
 PARAMETER(PAR.PS_Pieces_Planned_Prod);
 PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.PS_Weight_Inv_On_Hand);
 PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
 PARAMETER(PAR.PS_Weight_Prod_Adj);
 PARAMETER(PAR.PS_Pieces_Prod_Adj);
 PARAMETER(PAR.PS_Weight_Converted);
 PARAMETER(PAR.PS_Pieces_Converted);
 PARAMETER(PAR.PS_Weight_Shipping_Adj);
 PARAMETER(PAR.PS_Pieces_Shipping_Adj);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.PS_Weight_Inv_Adj);
 PARAMETER(PAR.PS_Pieces_Inv_Adj);
 PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Allocated);
 PARAMETER(PAR.PS_Pieces_Prod_Allocated);
 PARAMETER(PAR.PS_Weight_Inv_Allocated);
 PARAMETER(PAR.PS_Pieces_Inv_Allocated);
 PARAMETER(PAR.PS_Unit_Weight);
 PARAMETER(PAR.PS_Pieces_Prod_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Adj);
 PARAMETER(PAR.PS_Pieces_Unused_2);
 PARAMETER(PAR.PS_Weight_Unused_3);
 PARAMETER(PAR.PS_Pieces_Unused_3);
 PARAMETER(PAR.PS_Weight_Unused_4);
 PARAMETER(PAR.PS_Pieces_Unused_4);
 PARAMETER(PAR.PS_Weight_Unused_5);
 PARAMETER(PAR.PS_Pieces_Unused_5);
 PARAMETER(PAR.PS_Weight_Unused_6);
 PARAMETER(PAR.PS_Pieces_Unused_6);
 PARAMETER(PAR.PS_Item_Id);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.PS_Lock_Status);
 PARAMETER(PAR.PS_Export_Domestic);
 PARAMETER(PAR.PS_Print_On_Schedule);
 PARAMETER(PAR.PS_Piece_Count_Item);
 PARAMETER(PAR.PS_Unused_Sts_1);
 PARAMETER(PAR.PS_Unused_Sts_2);
 PARAMETER(PAR.PS_Unused_Sts_3);
 PARAMETER(PAR.PS_Unused_Sts_4);
 PARAMETER(PAR.PS_Item_Sched_Need_Sts);
 PARAMETER(PAR.PS_Production_Warehouse);
 PARAMETER(PAR.PS_Weight_Ordered);
 PARAMETER(PAR.PS_Pieces_Ordered);
 PARAMETER(PAR.PS_Weight_FC_Adjusted);
 PARAMETER(PAR.PS_Pieces_FC_Adjusted);
 PARAMETER(PAR.PS_Weight_FX_Adjusted);
 PARAMETER(PAR.PS_Pieces_FX_Adjusted);
 PARAMETER(PAR.PS_Weight_Sched_Shipment);
 PARAMETER(PAR.PS_Pieces_Sched_Shipment);
 PARAMETER(PAR.PS_Weight_Available_Prod);
 PARAMETER(PAR.PS_Pieces_Available_Prod);
 PARAMETER(PAR.PS_Weight_Production_Need);
 PARAMETER(PAR.PS_Pieces_Production_Need);
 PARAMETER(PAR.PS_Weight_Fab_Needs);
 PARAMETER(PAR.PS_Pieces_Fab_Needs);
 PARAMETER(PAR.PS_Weight_Sched_Prod);
 PARAMETER(PAR.PS_Pieces_Sched_Prod);
 PARAMETER(PAR.PS_Weight_Sched_Need);
 PARAMETER(PAR.PS_Pieces_Sched_Need);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Primal_Group_Code);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Job_Time);
 PARAMETER(PAR.User_Id);
 PARAMETER(PAR.Job_Name);
 PARAMETER(PAR.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(WRK.Description_Line_One);
  PARAMETER(WRK.UOM_Primary);
  PARAMETER(WRK.Unit_Weight);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(WRK.Item_Type_Code);
  PARAMETER(WRK.Default_Warehouse);
  PARAMETER(WRK.Fresh_Chilling_Time);
  PARAMETER(WRK.Base_Conv_Loss_Item);
  PARAMETER(WRK.Variety_Rendered_Cut);
  PARAMETER(WRK.Credit_Item_Status);
  PARAMETER(WRK.Std_Weight_Head_Var_Ren);
  PARAMETER(WRK.Pieces_Per_Head);
  PARAMETER(DB1.Department_Code);
  PARAMETER(WRK.Group_for_Packaging);
  PARAMETER(WRK.Seconds_Item);
  PARAMETER(DB1.PS_Piece_Count_Item);
  PARAMETER(WRK.Pieces_Per_Bag);
  PARAMETER(WRK.Bags_Per_Unit);
  PARAMETER(DB1.PS_Export_Domestic);
  PARAMETER(DB1.PS_Print_On_Schedule);
  PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
  PARAMETER(WRK.Fresh_Sched_As_Ordered);
  PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
  PARAMETER(DB1.Primal_Group_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Warehouse_Type);
  PARAMETER(WRK.Trans_Contol_AS400_Plant);
  PARAMETER(WRK.Warehouse_Location);
  PARAMETER(WRK.Warehouse_Std_Chill_Time);
  PARAMETER(WRK.Warehouse_Chill_Time);
  PARAMETER(DB1.PS_Item_Id);
  {
   //?Execute internal function

   EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Description_Line_One);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Default_Warehouse);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Std_Weight_Head_Var_Ren);
   PARAMETER(PAR.Pieces_Per_Head);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Group_for_Packaging);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Export_Domestic);
   PARAMETER(PAR.Print_On_Schedule);
   PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
   PARAMETER(PAR.Fresh_Sched_As_Ordered);
   PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
   PARAMETER(PAR.Primal_Group_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.Trans_Contol_AS400_Plant);
   PARAMETER(PAR.Warehouse_Location);
   PARAMETER(PAR.Warehouse_Std_Chill_Time);
   PARAMETER(PAR.Warehouse_Chill_Time);
   {
    //?Execute internal function

    EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

   }

   EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.PS_Item_Id);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Item Type Code is Raw Materials
    IF PAR.Item_Type_Code = 'RM';

    // PAR.PS Item Identification = CND.RM Base
    PAR.PS_Item_Id = 'RMB';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF PAR.Seconds Item is Yes
    IF PAR.Seconds_Item = 'Y';

    // PAR.PS Item Identification = CND.FG Seconds
    PAR.PS_Item_Id = 'FSC';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF PAR.Variety/Rendered/Cut is Variety
    IF PAR.Variety_Rendered_Cut = 'V';

    // PAR.PS Item Identification = CND.FG Variety
    PAR.PS_Item_Id = 'FVR';

    // IF PAR.Variety/Rendered/Cut is Rendered
    IF PAR.Variety_Rendered_Cut = 'R';

    // PAR.PS Item Identification = CND.FG Rendered
    PAR.PS_Item_Id = 'FRD';

    // IF PAR.Variety/Rendered/Cut is Cut
    IF PAR.Variety_Rendered_Cut = 'C';

    //?Base/Converted/Fabricated
    CASE;

    // IF PAR.Credit Item Status is yes
    IF PAR.Credit_Item_Status = 'Y';

    //?Setup Base/Converted/Fabricated Credit
    CASE;

    // IF PAR.Converted/Base Item is Base
    IF PAR.Base_Conv_Loss_Item = 'B';

    // PAR.PS Item Identification = CND.FG Base Credit
    PAR.PS_Item_Id = 'FBC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Converted
    IF PAR.Base_Conv_Loss_Item = 'C';

    // PAR.PS Item Identification = CND.FG Converted Credit
    PAR.PS_Item_Id = 'FCC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Fabricated
    IF PAR.Base_Conv_Loss_Item = 'F';

    // PAR.PS Item Identification = CND.FG Fabricated Credit
    PAR.PS_Item_Id = 'FFC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Loss
    IF PAR.Base_Conv_Loss_Item = 'L';

    // PAR.PS Item Identification = CND.FG Loss Credit
    PAR.PS_Item_Id = 'FLC';

    ENDIF;

    //?Base/Converted/Fabricated
    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Setup Base/Converted/Fabricated
    CASE;

    // IF PAR.Converted/Base Item is Base
    IF PAR.Base_Conv_Loss_Item = 'B';

    // PAR.PS Item Identification = CND.FG Base
    PAR.PS_Item_Id = 'FGB';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Converted
    IF PAR.Base_Conv_Loss_Item = 'C';

    // PAR.PS Item Identification = CND.FG Converted
    PAR.PS_Item_Id = 'FCV';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Fabricated
    IF PAR.Base_Conv_Loss_Item = 'F';

    // PAR.PS Item Identification = CND.FG Fabricated
    PAR.PS_Item_Id = 'FFB';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Loss
    IF PAR.Base_Conv_Loss_Item = 'L';

    // PAR.PS Item Identification = CND.FG Loss
    PAR.PS_Item_Id = 'FLS';

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

   }

  }

  //?FP1054 Output PS Prod Warehouse
  EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Production_Warehouse);
  PARAMETER(LCL.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Available Ship Date
  CASE;

  // IF WRK.Warehouse Std Chill Time is yes
  IF WRK.Warehouse_Std_Chill_Time = 'Y';

  EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(WRK.Warehouse_Chill_Time);
  PARAMETER(DB1.PS_Available_Ship_Date);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.Chilling Time
   IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

   // PAR.PS Available Ship Date = DB1.Post to G/L Date
   PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

   //?Skip Saturday
   CASE;

   // IF DB1.Day of Week is Saturday
   IF DB1.Day_of_Week = '7';

   //?Skip Saturday
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  //?Available Ship Date
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(WRK.Fresh_Chilling_Time);
  PARAMETER(DB1.PS_Available_Ship_Date);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.Chilling Time
   IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

   // PAR.PS Available Ship Date = DB1.Post to G/L Date
   PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

   //?Skip Saturday
   CASE;

   // IF DB1.Day of Week is Saturday
   IF DB1.Day_of_Week = '7';

   //?Skip Saturday
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  ENDIF;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Planned Prod is GT Zero
  IF PAR.PS_Pieces_Planned_Prod > *ZERO;

  // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
  DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

  ENDIF;

  EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // DB1.PS Lock Status = CND.NOT LOCKED
  DB1.PS_Lock_Status = 'N';

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Available_Ship_Date);
 PARAMETER(PAR.PS_Weight_Planned_Prod);
 PARAMETER(PAR.PS_Pieces_Planned_Prod);
 PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.PS_Weight_Inv_On_Hand);
 PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
 PARAMETER(PAR.PS_Weight_Standard);
 PARAMETER(PAR.PS_Pieces_Standard);
 PARAMETER(PAR.PS_Weight_Converted);
 PARAMETER(PAR.PS_Pieces_Converted);
 PARAMETER(PAR.PS_Weight_Shipping_Adj);
 PARAMETER(PAR.PS_Pieces_Shipping_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Adj);
 PARAMETER(PAR.PS_Pieces_Prod_Adj);
 PARAMETER(PAR.PS_Weight_Inv_Adj);
 PARAMETER(PAR.PS_Pieces_Inv_Adj);
 PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Allocated);
 PARAMETER(PAR.PS_Pieces_Prod_Allocated);
 PARAMETER(PAR.PS_Weight_Inv_Allocated);
 PARAMETER(PAR.PS_Pieces_Inv_Allocated);
 PARAMETER(PAR.PS_Unit_Weight);
 PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(PAR.PS_Pieces_Unused_2);
 PARAMETER(PAR.PS_Weight_Unused_3);
 PARAMETER(PAR.PS_Pieces_Unused_3);
 PARAMETER(PAR.PS_Weight_Unused_4);
 PARAMETER(PAR.PS_Pieces_Unused_4);
 PARAMETER(PAR.PS_Weight_Unused_5);
 PARAMETER(PAR.PS_Pieces_Unused_5);
 PARAMETER(PAR.PS_Weight_Unused_6);
 PARAMETER(PAR.PS_Pieces_Unused_6);
 PARAMETER(PAR.PS_Item_Id);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.PS_Lock_Status);
 PARAMETER(PAR.PS_Export_Domestic);
 PARAMETER(PAR.PS_Print_On_Schedule);
 PARAMETER(PAR.PS_Piece_Count_Item);
 PARAMETER(PAR.PS_Unused_Sts_1);
 PARAMETER(PAR.PS_Unused_Sts_2);
 PARAMETER(PAR.PS_Unused_Sts_3);
 PARAMETER(PAR.PS_Unused_Sts_4);
 PARAMETER(PAR.PS_Item_Sched_Need_Sts);
 PARAMETER(PAR.PS_Production_Warehouse);
 PARAMETER(PAR.PS_Weight_Ordered);
 PARAMETER(PAR.PS_Pieces_Ordered);
 PARAMETER(PAR.PS_Weight_FC_Adjusted);
 PARAMETER(PAR.PS_Pieces_FC_Adjusted);
 PARAMETER(PAR.PS_Weight_FX_Adjusted);
 PARAMETER(PAR.PS_Pieces_FX_Adjusted);
 PARAMETER(PAR.PS_Weight_Sched_Shipment);
 PARAMETER(PAR.PS_Pieces_Sched_Shipment);
 PARAMETER(PAR.PS_Weight_Available_Prod);
 PARAMETER(PAR.PS_Pieces_Available_Prod);
 PARAMETER(PAR.PS_Weight_Production_Need);
 PARAMETER(PAR.PS_Pieces_Production_Need);
 PARAMETER(PAR.PS_Weight_Fab_Needs);
 PARAMETER(PAR.PS_Pieces_Fab_Needs);
 PARAMETER(PAR.PS_Weight_Sched_Prod);
 PARAMETER(PAR.PS_Pieces_Sched_Prod);
 PARAMETER(PAR.PS_Weight_Sched_Need);
 PARAMETER(PAR.PS_Pieces_Sched_Need);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Primal_Group_Code);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Job_Time);
 PARAMETER(PAR.User_Id);
 PARAMETER(PAR.Job_Name);
 PARAMETER(PAR.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(WRK.Description_Line_One);
  PARAMETER(WRK.UOM_Primary);
  PARAMETER(WRK.Unit_Weight);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(WRK.Item_Type_Code);
  PARAMETER(WRK.Default_Warehouse);
  PARAMETER(WRK.Fresh_Chilling_Time);
  PARAMETER(WRK.Base_Conv_Loss_Item);
  PARAMETER(WRK.Variety_Rendered_Cut);
  PARAMETER(WRK.Credit_Item_Status);
  PARAMETER(WRK.Std_Weight_Head_Var_Ren);
  PARAMETER(WRK.Pieces_Per_Head);
  PARAMETER(DB1.Department_Code);
  PARAMETER(WRK.Group_for_Packaging);
  PARAMETER(WRK.Seconds_Item);
  PARAMETER(DB1.PS_Piece_Count_Item);
  PARAMETER(WRK.Pieces_Per_Bag);
  PARAMETER(WRK.Bags_Per_Unit);
  PARAMETER(DB1.PS_Export_Domestic);
  PARAMETER(DB1.PS_Print_On_Schedule);
  PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
  PARAMETER(WRK.Fresh_Sched_As_Ordered);
  PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
  PARAMETER(DB1.Primal_Group_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Warehouse_Type);
  PARAMETER(WRK.Trans_Contol_AS400_Plant);
  PARAMETER(WRK.Warehouse_Location);
  PARAMETER(WRK.Warehouse_Std_Chill_Time);
  PARAMETER(WRK.Warehouse_Chill_Time);
  PARAMETER(DB1.PS_Item_Id);
  {
   //?Execute internal function

   EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Description_Line_One);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Default_Warehouse);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Std_Weight_Head_Var_Ren);
   PARAMETER(PAR.Pieces_Per_Head);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Group_for_Packaging);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Export_Domestic);
   PARAMETER(PAR.Print_On_Schedule);
   PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
   PARAMETER(PAR.Fresh_Sched_As_Ordered);
   PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
   PARAMETER(PAR.Primal_Group_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.Trans_Contol_AS400_Plant);
   PARAMETER(PAR.Warehouse_Location);
   PARAMETER(PAR.Warehouse_Std_Chill_Time);
   PARAMETER(PAR.Warehouse_Chill_Time);
   {
    //?Execute internal function

    EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

   }

   EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.PS_Item_Id);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Item Type Code is Raw Materials
    IF PAR.Item_Type_Code = 'RM';

    // PAR.PS Item Identification = CND.RM Base
    PAR.PS_Item_Id = 'RMB';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF PAR.Seconds Item is Yes
    IF PAR.Seconds_Item = 'Y';

    // PAR.PS Item Identification = CND.FG Seconds
    PAR.PS_Item_Id = 'FSC';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF PAR.Variety/Rendered/Cut is Variety
    IF PAR.Variety_Rendered_Cut = 'V';

    // PAR.PS Item Identification = CND.FG Variety
    PAR.PS_Item_Id = 'FVR';

    // IF PAR.Variety/Rendered/Cut is Rendered
    IF PAR.Variety_Rendered_Cut = 'R';

    // PAR.PS Item Identification = CND.FG Rendered
    PAR.PS_Item_Id = 'FRD';

    // IF PAR.Variety/Rendered/Cut is Cut
    IF PAR.Variety_Rendered_Cut = 'C';

    //?Base/Converted/Fabricated
    CASE;

    // IF PAR.Credit Item Status is yes
    IF PAR.Credit_Item_Status = 'Y';

    //?Setup Base/Converted/Fabricated Credit
    CASE;

    // IF PAR.Converted/Base Item is Base
    IF PAR.Base_Conv_Loss_Item = 'B';

    // PAR.PS Item Identification = CND.FG Base Credit
    PAR.PS_Item_Id = 'FBC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Converted
    IF PAR.Base_Conv_Loss_Item = 'C';

    // PAR.PS Item Identification = CND.FG Converted Credit
    PAR.PS_Item_Id = 'FCC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Fabricated
    IF PAR.Base_Conv_Loss_Item = 'F';

    // PAR.PS Item Identification = CND.FG Fabricated Credit
    PAR.PS_Item_Id = 'FFC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Loss
    IF PAR.Base_Conv_Loss_Item = 'L';

    // PAR.PS Item Identification = CND.FG Loss Credit
    PAR.PS_Item_Id = 'FLC';

    ENDIF;

    //?Base/Converted/Fabricated
    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Setup Base/Converted/Fabricated
    CASE;

    // IF PAR.Converted/Base Item is Base
    IF PAR.Base_Conv_Loss_Item = 'B';

    // PAR.PS Item Identification = CND.FG Base
    PAR.PS_Item_Id = 'FGB';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Converted
    IF PAR.Base_Conv_Loss_Item = 'C';

    // PAR.PS Item Identification = CND.FG Converted
    PAR.PS_Item_Id = 'FCV';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Fabricated
    IF PAR.Base_Conv_Loss_Item = 'F';

    // PAR.PS Item Identification = CND.FG Fabricated
    PAR.PS_Item_Id = 'FFB';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Loss
    IF PAR.Base_Conv_Loss_Item = 'L';

    // PAR.PS Item Identification = CND.FG Loss
    PAR.PS_Item_Id = 'FLS';

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

   }

  }

  //?FP1054 Output PS Prod Warehouse
  EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Production_Warehouse);
  PARAMETER(LCL.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Available Ship Date
  CASE;

  // IF WRK.Warehouse Std Chill Time is yes
  IF WRK.Warehouse_Std_Chill_Time = 'Y';

  EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(WRK.Warehouse_Chill_Time);
  PARAMETER(DB1.PS_Available_Ship_Date);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.Chilling Time
   IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

   // PAR.PS Available Ship Date = DB1.Post to G/L Date
   PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

   //?Skip Saturday
   CASE;

   // IF DB1.Day of Week is Saturday
   IF DB1.Day_of_Week = '7';

   //?Skip Saturday
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  //?Available Ship Date
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(WRK.Fresh_Chilling_Time);
  PARAMETER(DB1.PS_Available_Ship_Date);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.Chilling Time
   IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

   // PAR.PS Available Ship Date = DB1.Post to G/L Date
   PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

   //?Skip Saturday
   CASE;

   // IF DB1.Day of Week is Saturday
   IF DB1.Day_of_Week = '7';

   //?Skip Saturday
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  ENDIF;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Planned Prod is GT Zero
  IF PAR.PS_Pieces_Planned_Prod > *ZERO;

  // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
  DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

  ENDIF;

  EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // DB1.PS Lock Status = CND.NOT LOCKED
  DB1.PS_Lock_Status = 'N';

 }

 ENDIF;

 ENDIF;

 //?USER: Process Data record

 //?02/05/09 FP1054 RMC Added Schedule Override adj-> type = SV
 //?04/09/08 PKD Added Freezer Transfer update
 CASE;

 // IF PAR.ATS Adj Type USR is Schedule Override
 IF PAR.ATS_Adj_Type_USR = 'SV';

 CASE;

 // IF PAR.PS Pieces Prod Adj is NE Zeros
 IF PAR.PS_Pieces_Prod_Adj <> *ZERO;

 // LCL.PS Avg Piece Wgt = PAR.PS Weight Prod Adj / PAR.PS Pieces Prod Adj *
 LCL.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Adj / PAR.PS_Pieces_Prod_Adj;

 CASE;

 // IF LCL.PS Avg Piece Wgt is LT Zero
 IF LCL.PS_Avg_Piece_Wgt < *ZERO;

 // LCL.PS Avg Piece Wgt = LCL.PS Avg Piece Wgt * CON.-1 *
 LCL.PS_Avg_Piece_Wgt = LCL.PS_Avg_Piece_Wgt * -1;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.PS Avg Piece Wgt = CON.*ZERO
 LCL.PS_Avg_Piece_Wgt = *ZERO;

 ENDIF;

 EXECUTE FUNCTION(Chg Schedule Prd      CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1919708;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(LCL.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.PS_Weight_Prod_Adj);
 PARAMETER(PAR.PS_Pieces_Prod_Adj);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.PS Weight Prod Adj = DB1.PS Weight Prod Adj + PAR.PS Weight Prod Adj
 LCL.PS_Weight_Prod_Adj = DB1.PS_Weight_Prod_Adj + PAR.PS_Weight_Prod_Adj;

 // LCL.PS Pieces Prod Adj = DB1.PS Pieces Prod Adj + PAR.PS Pieces Prod Adj
 LCL.PS_Pieces_Prod_Adj = DB1.PS_Pieces_Prod_Adj + PAR.PS_Pieces_Prod_Adj;

 //?If forecast adjustment type do not allow negatives
 CASE;

 // IF PAR.ATS Adj Type USR is Schedule Adjust Forecast
 IF PAR.ATS_Adj_Type_USR = 'SF';

 CASE;

 // IF LCL.PS Weight Prod Adj is LT Zero
 IF LCL.PS_Weight_Prod_Adj < *ZERO;

 // OR LCL.PS Pieces Prod Adj is LT Zeros
 OR LCL.PS_Pieces_Prod_Adj < *ZERO;

 // LCL.PS Weight Prod Adj = CON.*ZERO
 LCL.PS_Weight_Prod_Adj = *ZERO;

 // LCL.PS Pieces Prod Adj = CON.*ZERO
 LCL.PS_Pieces_Prod_Adj = *ZERO;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Chg Schedule Adj      CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478190;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(LCL.PS_Weight_Prod_Adj);
 PARAMETER(LCL.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

 }

 ENDIF;

}


// IF *OTHERWISE
IF *OTHERWISE;

//?Allocate standard and add adjustment to item
CASE;

// IF PAR.Record Found USR is Record Not Found
IF PAR.Record_Found_USR = 'N';

// OR PAR.Production Yield is LE Zero
OR PAR.Production_Yield <= *ZERO;

EXECUTE FUNCTION(UPD Schedule Adj      RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478187;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Production_Type);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.PSAA_Weight_Adjusted);
PARAMETER(PAR.Pieces_Adjusted);
PARAMETER(PAR.ATS_Adj_Type_USR);
{
 //?USER: Processing if Data record not found

 //?04/09/08 PKD Added condition for Freezer Transfer to update
 //?             new bucket
 //?02/05/09 RMC FP1054 Added condition for Schedule override to update
 //?             standard weight and pieces
 //?If forecast adjustment type do not allow negatives
 CASE;

 // IF PAR.ATS Adj Type USR is Schedule Adjust Forecast
 IF PAR.ATS_Adj_Type_USR = 'SF';

 CASE;

 // IF PAR.PS Weight Prod Adj is GT Zero
 IF PAR.PS_Weight_Prod_Adj > *ZERO;

 // OR PAR.PS Pieces Prod Adj is GT Zero
 OR PAR.PS_Pieces_Prod_Adj > *ZERO;

 EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Available_Ship_Date);
 PARAMETER(PAR.PS_Weight_Planned_Prod);
 PARAMETER(PAR.PS_Pieces_Planned_Prod);
 PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.PS_Weight_Inv_On_Hand);
 PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
 PARAMETER(PAR.PS_Weight_Standard);
 PARAMETER(PAR.PS_Pieces_Standard);
 PARAMETER(PAR.PS_Weight_Converted);
 PARAMETER(PAR.PS_Pieces_Converted);
 PARAMETER(PAR.PS_Weight_Shipping_Adj);
 PARAMETER(PAR.PS_Pieces_Shipping_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Adj);
 PARAMETER(PAR.PS_Pieces_Prod_Adj);
 PARAMETER(PAR.PS_Weight_Inv_Adj);
 PARAMETER(PAR.PS_Pieces_Inv_Adj);
 PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Allocated);
 PARAMETER(PAR.PS_Pieces_Prod_Allocated);
 PARAMETER(PAR.PS_Weight_Inv_Allocated);
 PARAMETER(PAR.PS_Pieces_Inv_Allocated);
 PARAMETER(PAR.PS_Unit_Weight);
 PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(PAR.PS_Pieces_Unused_2);
 PARAMETER(PAR.PS_Weight_Unused_3);
 PARAMETER(PAR.PS_Pieces_Unused_3);
 PARAMETER(PAR.PS_Weight_Unused_4);
 PARAMETER(PAR.PS_Pieces_Unused_4);
 PARAMETER(PAR.PS_Weight_Unused_5);
 PARAMETER(PAR.PS_Pieces_Unused_5);
 PARAMETER(PAR.PS_Weight_Unused_6);
 PARAMETER(PAR.PS_Pieces_Unused_6);
 PARAMETER(PAR.PS_Item_Id);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.PS_Lock_Status);
 PARAMETER(PAR.PS_Export_Domestic);
 PARAMETER(PAR.PS_Print_On_Schedule);
 PARAMETER(PAR.PS_Piece_Count_Item);
 PARAMETER(PAR.PS_Unused_Sts_1);
 PARAMETER(PAR.PS_Unused_Sts_2);
 PARAMETER(PAR.PS_Unused_Sts_3);
 PARAMETER(PAR.PS_Unused_Sts_4);
 PARAMETER(PAR.PS_Item_Sched_Need_Sts);
 PARAMETER(PAR.PS_Production_Warehouse);
 PARAMETER(PAR.PS_Weight_Ordered);
 PARAMETER(PAR.PS_Pieces_Ordered);
 PARAMETER(PAR.PS_Weight_FC_Adjusted);
 PARAMETER(PAR.PS_Pieces_FC_Adjusted);
 PARAMETER(PAR.PS_Weight_FX_Adjusted);
 PARAMETER(PAR.PS_Pieces_FX_Adjusted);
 PARAMETER(PAR.PS_Weight_Sched_Shipment);
 PARAMETER(PAR.PS_Pieces_Sched_Shipment);
 PARAMETER(PAR.PS_Weight_Available_Prod);
 PARAMETER(PAR.PS_Pieces_Available_Prod);
 PARAMETER(PAR.PS_Weight_Production_Need);
 PARAMETER(PAR.PS_Pieces_Production_Need);
 PARAMETER(PAR.PS_Weight_Fab_Needs);
 PARAMETER(PAR.PS_Pieces_Fab_Needs);
 PARAMETER(PAR.PS_Weight_Sched_Prod);
 PARAMETER(PAR.PS_Pieces_Sched_Prod);
 PARAMETER(PAR.PS_Weight_Sched_Need);
 PARAMETER(PAR.PS_Pieces_Sched_Need);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Primal_Group_Code);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Job_Time);
 PARAMETER(PAR.User_Id);
 PARAMETER(PAR.Job_Name);
 PARAMETER(PAR.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(WRK.Description_Line_One);
  PARAMETER(WRK.UOM_Primary);
  PARAMETER(WRK.Unit_Weight);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(WRK.Item_Type_Code);
  PARAMETER(WRK.Default_Warehouse);
  PARAMETER(WRK.Fresh_Chilling_Time);
  PARAMETER(WRK.Base_Conv_Loss_Item);
  PARAMETER(WRK.Variety_Rendered_Cut);
  PARAMETER(WRK.Credit_Item_Status);
  PARAMETER(WRK.Std_Weight_Head_Var_Ren);
  PARAMETER(WRK.Pieces_Per_Head);
  PARAMETER(DB1.Department_Code);
  PARAMETER(WRK.Group_for_Packaging);
  PARAMETER(WRK.Seconds_Item);
  PARAMETER(DB1.PS_Piece_Count_Item);
  PARAMETER(WRK.Pieces_Per_Bag);
  PARAMETER(WRK.Bags_Per_Unit);
  PARAMETER(DB1.PS_Export_Domestic);
  PARAMETER(DB1.PS_Print_On_Schedule);
  PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
  PARAMETER(WRK.Fresh_Sched_As_Ordered);
  PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
  PARAMETER(DB1.Primal_Group_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Warehouse_Type);
  PARAMETER(WRK.Trans_Contol_AS400_Plant);
  PARAMETER(WRK.Warehouse_Location);
  PARAMETER(WRK.Warehouse_Std_Chill_Time);
  PARAMETER(WRK.Warehouse_Chill_Time);
  PARAMETER(DB1.PS_Item_Id);
  {
   //?Execute internal function

   EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Description_Line_One);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Default_Warehouse);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Std_Weight_Head_Var_Ren);
   PARAMETER(PAR.Pieces_Per_Head);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Group_for_Packaging);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Export_Domestic);
   PARAMETER(PAR.Print_On_Schedule);
   PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
   PARAMETER(PAR.Fresh_Sched_As_Ordered);
   PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
   PARAMETER(PAR.Primal_Group_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.Trans_Contol_AS400_Plant);
   PARAMETER(PAR.Warehouse_Location);
   PARAMETER(PAR.Warehouse_Std_Chill_Time);
   PARAMETER(PAR.Warehouse_Chill_Time);
   {
    //?Execute internal function

    EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

   }

   EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.PS_Item_Id);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Item Type Code is Raw Materials
    IF PAR.Item_Type_Code = 'RM';

    // PAR.PS Item Identification = CND.RM Base
    PAR.PS_Item_Id = 'RMB';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF PAR.Seconds Item is Yes
    IF PAR.Seconds_Item = 'Y';

    // PAR.PS Item Identification = CND.FG Seconds
    PAR.PS_Item_Id = 'FSC';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF PAR.Variety/Rendered/Cut is Variety
    IF PAR.Variety_Rendered_Cut = 'V';

    // PAR.PS Item Identification = CND.FG Variety
    PAR.PS_Item_Id = 'FVR';

    // IF PAR.Variety/Rendered/Cut is Rendered
    IF PAR.Variety_Rendered_Cut = 'R';

    // PAR.PS Item Identification = CND.FG Rendered
    PAR.PS_Item_Id = 'FRD';

    // IF PAR.Variety/Rendered/Cut is Cut
    IF PAR.Variety_Rendered_Cut = 'C';

    //?Base/Converted/Fabricated
    CASE;

    // IF PAR.Credit Item Status is yes
    IF PAR.Credit_Item_Status = 'Y';

    //?Setup Base/Converted/Fabricated Credit
    CASE;

    // IF PAR.Converted/Base Item is Base
    IF PAR.Base_Conv_Loss_Item = 'B';

    // PAR.PS Item Identification = CND.FG Base Credit
    PAR.PS_Item_Id = 'FBC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Converted
    IF PAR.Base_Conv_Loss_Item = 'C';

    // PAR.PS Item Identification = CND.FG Converted Credit
    PAR.PS_Item_Id = 'FCC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Fabricated
    IF PAR.Base_Conv_Loss_Item = 'F';

    // PAR.PS Item Identification = CND.FG Fabricated Credit
    PAR.PS_Item_Id = 'FFC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Loss
    IF PAR.Base_Conv_Loss_Item = 'L';

    // PAR.PS Item Identification = CND.FG Loss Credit
    PAR.PS_Item_Id = 'FLC';

    ENDIF;

    //?Base/Converted/Fabricated
    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Setup Base/Converted/Fabricated
    CASE;

    // IF PAR.Converted/Base Item is Base
    IF PAR.Base_Conv_Loss_Item = 'B';

    // PAR.PS Item Identification = CND.FG Base
    PAR.PS_Item_Id = 'FGB';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Converted
    IF PAR.Base_Conv_Loss_Item = 'C';

    // PAR.PS Item Identification = CND.FG Converted
    PAR.PS_Item_Id = 'FCV';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Fabricated
    IF PAR.Base_Conv_Loss_Item = 'F';

    // PAR.PS Item Identification = CND.FG Fabricated
    PAR.PS_Item_Id = 'FFB';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Loss
    IF PAR.Base_Conv_Loss_Item = 'L';

    // PAR.PS Item Identification = CND.FG Loss
    PAR.PS_Item_Id = 'FLS';

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

   }

  }

  //?FP1054 Output PS Prod Warehouse
  EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Production_Warehouse);
  PARAMETER(LCL.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Available Ship Date
  CASE;

  // IF WRK.Warehouse Std Chill Time is yes
  IF WRK.Warehouse_Std_Chill_Time = 'Y';

  EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(WRK.Warehouse_Chill_Time);
  PARAMETER(DB1.PS_Available_Ship_Date);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.Chilling Time
   IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

   // PAR.PS Available Ship Date = DB1.Post to G/L Date
   PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

   //?Skip Saturday
   CASE;

   // IF DB1.Day of Week is Saturday
   IF DB1.Day_of_Week = '7';

   //?Skip Saturday
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  //?Available Ship Date
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(WRK.Fresh_Chilling_Time);
  PARAMETER(DB1.PS_Available_Ship_Date);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.Chilling Time
   IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

   // PAR.PS Available Ship Date = DB1.Post to G/L Date
   PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

   //?Skip Saturday
   CASE;

   // IF DB1.Day of Week is Saturday
   IF DB1.Day_of_Week = '7';

   //?Skip Saturday
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  ENDIF;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Planned Prod is GT Zero
  IF PAR.PS_Pieces_Planned_Prod > *ZERO;

  // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
  DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

  ENDIF;

  EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // DB1.PS Lock Status = CND.NOT LOCKED
  DB1.PS_Lock_Status = 'N';

 }

 ENDIF;

 //?If forecast adjustment type do not allow negatives
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.ATS Adj Type USR is Freezer Transfer
 IF PAR.ATS_Adj_Type_USR = 'FT';

 EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Available_Ship_Date);
 PARAMETER(PAR.PS_Weight_Planned_Prod);
 PARAMETER(PAR.PS_Pieces_Planned_Prod);
 PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.PS_Weight_Inv_On_Hand);
 PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
 PARAMETER(PAR.PS_Weight_Standard);
 PARAMETER(PAR.PS_Pieces_Standard);
 PARAMETER(PAR.PS_Weight_Converted);
 PARAMETER(PAR.PS_Pieces_Converted);
 PARAMETER(PAR.PS_Weight_Shipping_Adj);
 PARAMETER(PAR.PS_Pieces_Shipping_Adj);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.PS_Weight_Inv_Adj);
 PARAMETER(PAR.PS_Pieces_Inv_Adj);
 PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Allocated);
 PARAMETER(PAR.PS_Pieces_Prod_Allocated);
 PARAMETER(PAR.PS_Weight_Inv_Allocated);
 PARAMETER(PAR.PS_Pieces_Inv_Allocated);
 PARAMETER(PAR.PS_Unit_Weight);
 PARAMETER(PAR.PS_Pieces_Prod_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Adj);
 PARAMETER(PAR.PS_Pieces_Unused_2);
 PARAMETER(PAR.PS_Weight_Unused_3);
 PARAMETER(PAR.PS_Pieces_Unused_3);
 PARAMETER(PAR.PS_Weight_Unused_4);
 PARAMETER(PAR.PS_Pieces_Unused_4);
 PARAMETER(PAR.PS_Weight_Unused_5);
 PARAMETER(PAR.PS_Pieces_Unused_5);
 PARAMETER(PAR.PS_Weight_Unused_6);
 PARAMETER(PAR.PS_Pieces_Unused_6);
 PARAMETER(PAR.PS_Item_Id);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.PS_Lock_Status);
 PARAMETER(PAR.PS_Export_Domestic);
 PARAMETER(PAR.PS_Print_On_Schedule);
 PARAMETER(PAR.PS_Piece_Count_Item);
 PARAMETER(PAR.PS_Unused_Sts_1);
 PARAMETER(PAR.PS_Unused_Sts_2);
 PARAMETER(PAR.PS_Unused_Sts_3);
 PARAMETER(PAR.PS_Unused_Sts_4);
 PARAMETER(PAR.PS_Item_Sched_Need_Sts);
 PARAMETER(PAR.PS_Production_Warehouse);
 PARAMETER(PAR.PS_Weight_Ordered);
 PARAMETER(PAR.PS_Pieces_Ordered);
 PARAMETER(PAR.PS_Weight_FC_Adjusted);
 PARAMETER(PAR.PS_Pieces_FC_Adjusted);
 PARAMETER(PAR.PS_Weight_FX_Adjusted);
 PARAMETER(PAR.PS_Pieces_FX_Adjusted);
 PARAMETER(PAR.PS_Weight_Sched_Shipment);
 PARAMETER(PAR.PS_Pieces_Sched_Shipment);
 PARAMETER(PAR.PS_Weight_Available_Prod);
 PARAMETER(PAR.PS_Pieces_Available_Prod);
 PARAMETER(PAR.PS_Weight_Production_Need);
 PARAMETER(PAR.PS_Pieces_Production_Need);
 PARAMETER(PAR.PS_Weight_Fab_Needs);
 PARAMETER(PAR.PS_Pieces_Fab_Needs);
 PARAMETER(PAR.PS_Weight_Sched_Prod);
 PARAMETER(PAR.PS_Pieces_Sched_Prod);
 PARAMETER(PAR.PS_Weight_Sched_Need);
 PARAMETER(PAR.PS_Pieces_Sched_Need);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Primal_Group_Code);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Job_Time);
 PARAMETER(PAR.User_Id);
 PARAMETER(PAR.Job_Name);
 PARAMETER(PAR.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(WRK.Description_Line_One);
  PARAMETER(WRK.UOM_Primary);
  PARAMETER(WRK.Unit_Weight);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(WRK.Item_Type_Code);
  PARAMETER(WRK.Default_Warehouse);
  PARAMETER(WRK.Fresh_Chilling_Time);
  PARAMETER(WRK.Base_Conv_Loss_Item);
  PARAMETER(WRK.Variety_Rendered_Cut);
  PARAMETER(WRK.Credit_Item_Status);
  PARAMETER(WRK.Std_Weight_Head_Var_Ren);
  PARAMETER(WRK.Pieces_Per_Head);
  PARAMETER(DB1.Department_Code);
  PARAMETER(WRK.Group_for_Packaging);
  PARAMETER(WRK.Seconds_Item);
  PARAMETER(DB1.PS_Piece_Count_Item);
  PARAMETER(WRK.Pieces_Per_Bag);
  PARAMETER(WRK.Bags_Per_Unit);
  PARAMETER(DB1.PS_Export_Domestic);
  PARAMETER(DB1.PS_Print_On_Schedule);
  PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
  PARAMETER(WRK.Fresh_Sched_As_Ordered);
  PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
  PARAMETER(DB1.Primal_Group_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Warehouse_Type);
  PARAMETER(WRK.Trans_Contol_AS400_Plant);
  PARAMETER(WRK.Warehouse_Location);
  PARAMETER(WRK.Warehouse_Std_Chill_Time);
  PARAMETER(WRK.Warehouse_Chill_Time);
  PARAMETER(DB1.PS_Item_Id);
  {
   //?Execute internal function

   EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Description_Line_One);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Default_Warehouse);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Std_Weight_Head_Var_Ren);
   PARAMETER(PAR.Pieces_Per_Head);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Group_for_Packaging);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Export_Domestic);
   PARAMETER(PAR.Print_On_Schedule);
   PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
   PARAMETER(PAR.Fresh_Sched_As_Ordered);
   PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
   PARAMETER(PAR.Primal_Group_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.Trans_Contol_AS400_Plant);
   PARAMETER(PAR.Warehouse_Location);
   PARAMETER(PAR.Warehouse_Std_Chill_Time);
   PARAMETER(PAR.Warehouse_Chill_Time);
   {
    //?Execute internal function

    EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

   }

   EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.PS_Item_Id);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Item Type Code is Raw Materials
    IF PAR.Item_Type_Code = 'RM';

    // PAR.PS Item Identification = CND.RM Base
    PAR.PS_Item_Id = 'RMB';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF PAR.Seconds Item is Yes
    IF PAR.Seconds_Item = 'Y';

    // PAR.PS Item Identification = CND.FG Seconds
    PAR.PS_Item_Id = 'FSC';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF PAR.Variety/Rendered/Cut is Variety
    IF PAR.Variety_Rendered_Cut = 'V';

    // PAR.PS Item Identification = CND.FG Variety
    PAR.PS_Item_Id = 'FVR';

    // IF PAR.Variety/Rendered/Cut is Rendered
    IF PAR.Variety_Rendered_Cut = 'R';

    // PAR.PS Item Identification = CND.FG Rendered
    PAR.PS_Item_Id = 'FRD';

    // IF PAR.Variety/Rendered/Cut is Cut
    IF PAR.Variety_Rendered_Cut = 'C';

    //?Base/Converted/Fabricated
    CASE;

    // IF PAR.Credit Item Status is yes
    IF PAR.Credit_Item_Status = 'Y';

    //?Setup Base/Converted/Fabricated Credit
    CASE;

    // IF PAR.Converted/Base Item is Base
    IF PAR.Base_Conv_Loss_Item = 'B';

    // PAR.PS Item Identification = CND.FG Base Credit
    PAR.PS_Item_Id = 'FBC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Converted
    IF PAR.Base_Conv_Loss_Item = 'C';

    // PAR.PS Item Identification = CND.FG Converted Credit
    PAR.PS_Item_Id = 'FCC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Fabricated
    IF PAR.Base_Conv_Loss_Item = 'F';

    // PAR.PS Item Identification = CND.FG Fabricated Credit
    PAR.PS_Item_Id = 'FFC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Loss
    IF PAR.Base_Conv_Loss_Item = 'L';

    // PAR.PS Item Identification = CND.FG Loss Credit
    PAR.PS_Item_Id = 'FLC';

    ENDIF;

    //?Base/Converted/Fabricated
    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Setup Base/Converted/Fabricated
    CASE;

    // IF PAR.Converted/Base Item is Base
    IF PAR.Base_Conv_Loss_Item = 'B';

    // PAR.PS Item Identification = CND.FG Base
    PAR.PS_Item_Id = 'FGB';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Converted
    IF PAR.Base_Conv_Loss_Item = 'C';

    // PAR.PS Item Identification = CND.FG Converted
    PAR.PS_Item_Id = 'FCV';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Fabricated
    IF PAR.Base_Conv_Loss_Item = 'F';

    // PAR.PS Item Identification = CND.FG Fabricated
    PAR.PS_Item_Id = 'FFB';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Loss
    IF PAR.Base_Conv_Loss_Item = 'L';

    // PAR.PS Item Identification = CND.FG Loss
    PAR.PS_Item_Id = 'FLS';

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

   }

  }

  //?FP1054 Output PS Prod Warehouse
  EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Production_Warehouse);
  PARAMETER(LCL.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Available Ship Date
  CASE;

  // IF WRK.Warehouse Std Chill Time is yes
  IF WRK.Warehouse_Std_Chill_Time = 'Y';

  EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(WRK.Warehouse_Chill_Time);
  PARAMETER(DB1.PS_Available_Ship_Date);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.Chilling Time
   IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

   // PAR.PS Available Ship Date = DB1.Post to G/L Date
   PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

   //?Skip Saturday
   CASE;

   // IF DB1.Day of Week is Saturday
   IF DB1.Day_of_Week = '7';

   //?Skip Saturday
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  //?Available Ship Date
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(WRK.Fresh_Chilling_Time);
  PARAMETER(DB1.PS_Available_Ship_Date);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.Chilling Time
   IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

   // PAR.PS Available Ship Date = DB1.Post to G/L Date
   PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

   //?Skip Saturday
   CASE;

   // IF DB1.Day of Week is Saturday
   IF DB1.Day_of_Week = '7';

   //?Skip Saturday
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  ENDIF;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Planned Prod is GT Zero
  IF PAR.PS_Pieces_Planned_Prod > *ZERO;

  // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
  DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

  ENDIF;

  EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // DB1.PS Lock Status = CND.NOT LOCKED
  DB1.PS_Lock_Status = 'N';

 }

 // IF PAR.ATS Adj Type USR is Schedule Override
 IF PAR.ATS_Adj_Type_USR = 'SV';

 //?output par.adj weight and pieces as standard weight and pieces
 EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Available_Ship_Date);
 PARAMETER(PAR.PS_Weight_Planned_Prod);
 PARAMETER(PAR.PS_Pieces_Planned_Prod);
 PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.PS_Weight_Inv_On_Hand);
 PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
 PARAMETER(PAR.PS_Weight_Prod_Adj);
 PARAMETER(PAR.PS_Pieces_Prod_Adj);
 PARAMETER(PAR.PS_Weight_Converted);
 PARAMETER(PAR.PS_Pieces_Converted);
 PARAMETER(PAR.PS_Weight_Shipping_Adj);
 PARAMETER(PAR.PS_Pieces_Shipping_Adj);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.PS_Weight_Inv_Adj);
 PARAMETER(PAR.PS_Pieces_Inv_Adj);
 PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Allocated);
 PARAMETER(PAR.PS_Pieces_Prod_Allocated);
 PARAMETER(PAR.PS_Weight_Inv_Allocated);
 PARAMETER(PAR.PS_Pieces_Inv_Allocated);
 PARAMETER(PAR.PS_Unit_Weight);
 PARAMETER(PAR.PS_Pieces_Prod_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Adj);
 PARAMETER(PAR.PS_Pieces_Unused_2);
 PARAMETER(PAR.PS_Weight_Unused_3);
 PARAMETER(PAR.PS_Pieces_Unused_3);
 PARAMETER(PAR.PS_Weight_Unused_4);
 PARAMETER(PAR.PS_Pieces_Unused_4);
 PARAMETER(PAR.PS_Weight_Unused_5);
 PARAMETER(PAR.PS_Pieces_Unused_5);
 PARAMETER(PAR.PS_Weight_Unused_6);
 PARAMETER(PAR.PS_Pieces_Unused_6);
 PARAMETER(PAR.PS_Item_Id);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.PS_Lock_Status);
 PARAMETER(PAR.PS_Export_Domestic);
 PARAMETER(PAR.PS_Print_On_Schedule);
 PARAMETER(PAR.PS_Piece_Count_Item);
 PARAMETER(PAR.PS_Unused_Sts_1);
 PARAMETER(PAR.PS_Unused_Sts_2);
 PARAMETER(PAR.PS_Unused_Sts_3);
 PARAMETER(PAR.PS_Unused_Sts_4);
 PARAMETER(PAR.PS_Item_Sched_Need_Sts);
 PARAMETER(PAR.PS_Production_Warehouse);
 PARAMETER(PAR.PS_Weight_Ordered);
 PARAMETER(PAR.PS_Pieces_Ordered);
 PARAMETER(PAR.PS_Weight_FC_Adjusted);
 PARAMETER(PAR.PS_Pieces_FC_Adjusted);
 PARAMETER(PAR.PS_Weight_FX_Adjusted);
 PARAMETER(PAR.PS_Pieces_FX_Adjusted);
 PARAMETER(PAR.PS_Weight_Sched_Shipment);
 PARAMETER(PAR.PS_Pieces_Sched_Shipment);
 PARAMETER(PAR.PS_Weight_Available_Prod);
 PARAMETER(PAR.PS_Pieces_Available_Prod);
 PARAMETER(PAR.PS_Weight_Production_Need);
 PARAMETER(PAR.PS_Pieces_Production_Need);
 PARAMETER(PAR.PS_Weight_Fab_Needs);
 PARAMETER(PAR.PS_Pieces_Fab_Needs);
 PARAMETER(PAR.PS_Weight_Sched_Prod);
 PARAMETER(PAR.PS_Pieces_Sched_Prod);
 PARAMETER(PAR.PS_Weight_Sched_Need);
 PARAMETER(PAR.PS_Pieces_Sched_Need);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Primal_Group_Code);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Job_Time);
 PARAMETER(PAR.User_Id);
 PARAMETER(PAR.Job_Name);
 PARAMETER(PAR.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(WRK.Description_Line_One);
  PARAMETER(WRK.UOM_Primary);
  PARAMETER(WRK.Unit_Weight);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(WRK.Item_Type_Code);
  PARAMETER(WRK.Default_Warehouse);
  PARAMETER(WRK.Fresh_Chilling_Time);
  PARAMETER(WRK.Base_Conv_Loss_Item);
  PARAMETER(WRK.Variety_Rendered_Cut);
  PARAMETER(WRK.Credit_Item_Status);
  PARAMETER(WRK.Std_Weight_Head_Var_Ren);
  PARAMETER(WRK.Pieces_Per_Head);
  PARAMETER(DB1.Department_Code);
  PARAMETER(WRK.Group_for_Packaging);
  PARAMETER(WRK.Seconds_Item);
  PARAMETER(DB1.PS_Piece_Count_Item);
  PARAMETER(WRK.Pieces_Per_Bag);
  PARAMETER(WRK.Bags_Per_Unit);
  PARAMETER(DB1.PS_Export_Domestic);
  PARAMETER(DB1.PS_Print_On_Schedule);
  PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
  PARAMETER(WRK.Fresh_Sched_As_Ordered);
  PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
  PARAMETER(DB1.Primal_Group_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Warehouse_Type);
  PARAMETER(WRK.Trans_Contol_AS400_Plant);
  PARAMETER(WRK.Warehouse_Location);
  PARAMETER(WRK.Warehouse_Std_Chill_Time);
  PARAMETER(WRK.Warehouse_Chill_Time);
  PARAMETER(DB1.PS_Item_Id);
  {
   //?Execute internal function

   EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Description_Line_One);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Default_Warehouse);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Std_Weight_Head_Var_Ren);
   PARAMETER(PAR.Pieces_Per_Head);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Group_for_Packaging);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Export_Domestic);
   PARAMETER(PAR.Print_On_Schedule);
   PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
   PARAMETER(PAR.Fresh_Sched_As_Ordered);
   PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
   PARAMETER(PAR.Primal_Group_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.Trans_Contol_AS400_Plant);
   PARAMETER(PAR.Warehouse_Location);
   PARAMETER(PAR.Warehouse_Std_Chill_Time);
   PARAMETER(PAR.Warehouse_Chill_Time);
   {
    //?Execute internal function

    EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

   }

   EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.PS_Item_Id);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Item Type Code is Raw Materials
    IF PAR.Item_Type_Code = 'RM';

    // PAR.PS Item Identification = CND.RM Base
    PAR.PS_Item_Id = 'RMB';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF PAR.Seconds Item is Yes
    IF PAR.Seconds_Item = 'Y';

    // PAR.PS Item Identification = CND.FG Seconds
    PAR.PS_Item_Id = 'FSC';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF PAR.Variety/Rendered/Cut is Variety
    IF PAR.Variety_Rendered_Cut = 'V';

    // PAR.PS Item Identification = CND.FG Variety
    PAR.PS_Item_Id = 'FVR';

    // IF PAR.Variety/Rendered/Cut is Rendered
    IF PAR.Variety_Rendered_Cut = 'R';

    // PAR.PS Item Identification = CND.FG Rendered
    PAR.PS_Item_Id = 'FRD';

    // IF PAR.Variety/Rendered/Cut is Cut
    IF PAR.Variety_Rendered_Cut = 'C';

    //?Base/Converted/Fabricated
    CASE;

    // IF PAR.Credit Item Status is yes
    IF PAR.Credit_Item_Status = 'Y';

    //?Setup Base/Converted/Fabricated Credit
    CASE;

    // IF PAR.Converted/Base Item is Base
    IF PAR.Base_Conv_Loss_Item = 'B';

    // PAR.PS Item Identification = CND.FG Base Credit
    PAR.PS_Item_Id = 'FBC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Converted
    IF PAR.Base_Conv_Loss_Item = 'C';

    // PAR.PS Item Identification = CND.FG Converted Credit
    PAR.PS_Item_Id = 'FCC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Fabricated
    IF PAR.Base_Conv_Loss_Item = 'F';

    // PAR.PS Item Identification = CND.FG Fabricated Credit
    PAR.PS_Item_Id = 'FFC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Loss
    IF PAR.Base_Conv_Loss_Item = 'L';

    // PAR.PS Item Identification = CND.FG Loss Credit
    PAR.PS_Item_Id = 'FLC';

    ENDIF;

    //?Base/Converted/Fabricated
    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Setup Base/Converted/Fabricated
    CASE;

    // IF PAR.Converted/Base Item is Base
    IF PAR.Base_Conv_Loss_Item = 'B';

    // PAR.PS Item Identification = CND.FG Base
    PAR.PS_Item_Id = 'FGB';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Converted
    IF PAR.Base_Conv_Loss_Item = 'C';

    // PAR.PS Item Identification = CND.FG Converted
    PAR.PS_Item_Id = 'FCV';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Fabricated
    IF PAR.Base_Conv_Loss_Item = 'F';

    // PAR.PS Item Identification = CND.FG Fabricated
    PAR.PS_Item_Id = 'FFB';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Loss
    IF PAR.Base_Conv_Loss_Item = 'L';

    // PAR.PS Item Identification = CND.FG Loss
    PAR.PS_Item_Id = 'FLS';

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

   }

  }

  //?FP1054 Output PS Prod Warehouse
  EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Production_Warehouse);
  PARAMETER(LCL.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Available Ship Date
  CASE;

  // IF WRK.Warehouse Std Chill Time is yes
  IF WRK.Warehouse_Std_Chill_Time = 'Y';

  EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(WRK.Warehouse_Chill_Time);
  PARAMETER(DB1.PS_Available_Ship_Date);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.Chilling Time
   IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

   // PAR.PS Available Ship Date = DB1.Post to G/L Date
   PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

   //?Skip Saturday
   CASE;

   // IF DB1.Day of Week is Saturday
   IF DB1.Day_of_Week = '7';

   //?Skip Saturday
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  //?Available Ship Date
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(WRK.Fresh_Chilling_Time);
  PARAMETER(DB1.PS_Available_Ship_Date);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.Chilling Time
   IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

   // PAR.PS Available Ship Date = DB1.Post to G/L Date
   PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

   //?Skip Saturday
   CASE;

   // IF DB1.Day of Week is Saturday
   IF DB1.Day_of_Week = '7';

   //?Skip Saturday
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  ENDIF;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Planned Prod is GT Zero
  IF PAR.PS_Pieces_Planned_Prod > *ZERO;

  // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
  DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

  ENDIF;

  EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // DB1.PS Lock Status = CND.NOT LOCKED
  DB1.PS_Lock_Status = 'N';

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Available_Ship_Date);
 PARAMETER(PAR.PS_Weight_Planned_Prod);
 PARAMETER(PAR.PS_Pieces_Planned_Prod);
 PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.PS_Weight_Inv_On_Hand);
 PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
 PARAMETER(PAR.PS_Weight_Standard);
 PARAMETER(PAR.PS_Pieces_Standard);
 PARAMETER(PAR.PS_Weight_Converted);
 PARAMETER(PAR.PS_Pieces_Converted);
 PARAMETER(PAR.PS_Weight_Shipping_Adj);
 PARAMETER(PAR.PS_Pieces_Shipping_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Adj);
 PARAMETER(PAR.PS_Pieces_Prod_Adj);
 PARAMETER(PAR.PS_Weight_Inv_Adj);
 PARAMETER(PAR.PS_Pieces_Inv_Adj);
 PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Allocated);
 PARAMETER(PAR.PS_Pieces_Prod_Allocated);
 PARAMETER(PAR.PS_Weight_Inv_Allocated);
 PARAMETER(PAR.PS_Pieces_Inv_Allocated);
 PARAMETER(PAR.PS_Unit_Weight);
 PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(PAR.PS_Pieces_Unused_2);
 PARAMETER(PAR.PS_Weight_Unused_3);
 PARAMETER(PAR.PS_Pieces_Unused_3);
 PARAMETER(PAR.PS_Weight_Unused_4);
 PARAMETER(PAR.PS_Pieces_Unused_4);
 PARAMETER(PAR.PS_Weight_Unused_5);
 PARAMETER(PAR.PS_Pieces_Unused_5);
 PARAMETER(PAR.PS_Weight_Unused_6);
 PARAMETER(PAR.PS_Pieces_Unused_6);
 PARAMETER(PAR.PS_Item_Id);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.PS_Lock_Status);
 PARAMETER(PAR.PS_Export_Domestic);
 PARAMETER(PAR.PS_Print_On_Schedule);
 PARAMETER(PAR.PS_Piece_Count_Item);
 PARAMETER(PAR.PS_Unused_Sts_1);
 PARAMETER(PAR.PS_Unused_Sts_2);
 PARAMETER(PAR.PS_Unused_Sts_3);
 PARAMETER(PAR.PS_Unused_Sts_4);
 PARAMETER(PAR.PS_Item_Sched_Need_Sts);
 PARAMETER(PAR.PS_Production_Warehouse);
 PARAMETER(PAR.PS_Weight_Ordered);
 PARAMETER(PAR.PS_Pieces_Ordered);
 PARAMETER(PAR.PS_Weight_FC_Adjusted);
 PARAMETER(PAR.PS_Pieces_FC_Adjusted);
 PARAMETER(PAR.PS_Weight_FX_Adjusted);
 PARAMETER(PAR.PS_Pieces_FX_Adjusted);
 PARAMETER(PAR.PS_Weight_Sched_Shipment);
 PARAMETER(PAR.PS_Pieces_Sched_Shipment);
 PARAMETER(PAR.PS_Weight_Available_Prod);
 PARAMETER(PAR.PS_Pieces_Available_Prod);
 PARAMETER(PAR.PS_Weight_Production_Need);
 PARAMETER(PAR.PS_Pieces_Production_Need);
 PARAMETER(PAR.PS_Weight_Fab_Needs);
 PARAMETER(PAR.PS_Pieces_Fab_Needs);
 PARAMETER(PAR.PS_Weight_Sched_Prod);
 PARAMETER(PAR.PS_Pieces_Sched_Prod);
 PARAMETER(PAR.PS_Weight_Sched_Need);
 PARAMETER(PAR.PS_Pieces_Sched_Need);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Primal_Group_Code);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Job_Time);
 PARAMETER(PAR.User_Id);
 PARAMETER(PAR.Job_Name);
 PARAMETER(PAR.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(WRK.Description_Line_One);
  PARAMETER(WRK.UOM_Primary);
  PARAMETER(WRK.Unit_Weight);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(WRK.Item_Type_Code);
  PARAMETER(WRK.Default_Warehouse);
  PARAMETER(WRK.Fresh_Chilling_Time);
  PARAMETER(WRK.Base_Conv_Loss_Item);
  PARAMETER(WRK.Variety_Rendered_Cut);
  PARAMETER(WRK.Credit_Item_Status);
  PARAMETER(WRK.Std_Weight_Head_Var_Ren);
  PARAMETER(WRK.Pieces_Per_Head);
  PARAMETER(DB1.Department_Code);
  PARAMETER(WRK.Group_for_Packaging);
  PARAMETER(WRK.Seconds_Item);
  PARAMETER(DB1.PS_Piece_Count_Item);
  PARAMETER(WRK.Pieces_Per_Bag);
  PARAMETER(WRK.Bags_Per_Unit);
  PARAMETER(DB1.PS_Export_Domestic);
  PARAMETER(DB1.PS_Print_On_Schedule);
  PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
  PARAMETER(WRK.Fresh_Sched_As_Ordered);
  PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
  PARAMETER(DB1.Primal_Group_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Warehouse_Type);
  PARAMETER(WRK.Trans_Contol_AS400_Plant);
  PARAMETER(WRK.Warehouse_Location);
  PARAMETER(WRK.Warehouse_Std_Chill_Time);
  PARAMETER(WRK.Warehouse_Chill_Time);
  PARAMETER(DB1.PS_Item_Id);
  {
   //?Execute internal function

   EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Description_Line_One);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Default_Warehouse);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Std_Weight_Head_Var_Ren);
   PARAMETER(PAR.Pieces_Per_Head);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Group_for_Packaging);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Export_Domestic);
   PARAMETER(PAR.Print_On_Schedule);
   PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
   PARAMETER(PAR.Fresh_Sched_As_Ordered);
   PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
   PARAMETER(PAR.Primal_Group_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.Trans_Contol_AS400_Plant);
   PARAMETER(PAR.Warehouse_Location);
   PARAMETER(PAR.Warehouse_Std_Chill_Time);
   PARAMETER(PAR.Warehouse_Chill_Time);
   {
    //?Execute internal function

    EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

   }

   EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.PS_Item_Id);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Item Type Code is Raw Materials
    IF PAR.Item_Type_Code = 'RM';

    // PAR.PS Item Identification = CND.RM Base
    PAR.PS_Item_Id = 'RMB';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF PAR.Seconds Item is Yes
    IF PAR.Seconds_Item = 'Y';

    // PAR.PS Item Identification = CND.FG Seconds
    PAR.PS_Item_Id = 'FSC';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF PAR.Variety/Rendered/Cut is Variety
    IF PAR.Variety_Rendered_Cut = 'V';

    // PAR.PS Item Identification = CND.FG Variety
    PAR.PS_Item_Id = 'FVR';

    // IF PAR.Variety/Rendered/Cut is Rendered
    IF PAR.Variety_Rendered_Cut = 'R';

    // PAR.PS Item Identification = CND.FG Rendered
    PAR.PS_Item_Id = 'FRD';

    // IF PAR.Variety/Rendered/Cut is Cut
    IF PAR.Variety_Rendered_Cut = 'C';

    //?Base/Converted/Fabricated
    CASE;

    // IF PAR.Credit Item Status is yes
    IF PAR.Credit_Item_Status = 'Y';

    //?Setup Base/Converted/Fabricated Credit
    CASE;

    // IF PAR.Converted/Base Item is Base
    IF PAR.Base_Conv_Loss_Item = 'B';

    // PAR.PS Item Identification = CND.FG Base Credit
    PAR.PS_Item_Id = 'FBC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Converted
    IF PAR.Base_Conv_Loss_Item = 'C';

    // PAR.PS Item Identification = CND.FG Converted Credit
    PAR.PS_Item_Id = 'FCC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Fabricated
    IF PAR.Base_Conv_Loss_Item = 'F';

    // PAR.PS Item Identification = CND.FG Fabricated Credit
    PAR.PS_Item_Id = 'FFC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Loss
    IF PAR.Base_Conv_Loss_Item = 'L';

    // PAR.PS Item Identification = CND.FG Loss Credit
    PAR.PS_Item_Id = 'FLC';

    ENDIF;

    //?Base/Converted/Fabricated
    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Setup Base/Converted/Fabricated
    CASE;

    // IF PAR.Converted/Base Item is Base
    IF PAR.Base_Conv_Loss_Item = 'B';

    // PAR.PS Item Identification = CND.FG Base
    PAR.PS_Item_Id = 'FGB';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Converted
    IF PAR.Base_Conv_Loss_Item = 'C';

    // PAR.PS Item Identification = CND.FG Converted
    PAR.PS_Item_Id = 'FCV';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Fabricated
    IF PAR.Base_Conv_Loss_Item = 'F';

    // PAR.PS Item Identification = CND.FG Fabricated
    PAR.PS_Item_Id = 'FFB';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Loss
    IF PAR.Base_Conv_Loss_Item = 'L';

    // PAR.PS Item Identification = CND.FG Loss
    PAR.PS_Item_Id = 'FLS';

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

   }

  }

  //?FP1054 Output PS Prod Warehouse
  EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Production_Warehouse);
  PARAMETER(LCL.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Available Ship Date
  CASE;

  // IF WRK.Warehouse Std Chill Time is yes
  IF WRK.Warehouse_Std_Chill_Time = 'Y';

  EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(WRK.Warehouse_Chill_Time);
  PARAMETER(DB1.PS_Available_Ship_Date);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.Chilling Time
   IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

   // PAR.PS Available Ship Date = DB1.Post to G/L Date
   PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

   //?Skip Saturday
   CASE;

   // IF DB1.Day of Week is Saturday
   IF DB1.Day_of_Week = '7';

   //?Skip Saturday
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  //?Available Ship Date
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(WRK.Fresh_Chilling_Time);
  PARAMETER(DB1.PS_Available_Ship_Date);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.Chilling Time
   IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

   // PAR.PS Available Ship Date = DB1.Post to G/L Date
   PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

   //?Skip Saturday
   CASE;

   // IF DB1.Day of Week is Saturday
   IF DB1.Day_of_Week = '7';

   //?Skip Saturday
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  ENDIF;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Planned Prod is GT Zero
  IF PAR.PS_Pieces_Planned_Prod > *ZERO;

  // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
  DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

  ENDIF;

  EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // DB1.PS Lock Status = CND.NOT LOCKED
  DB1.PS_Lock_Status = 'N';

 }

 ENDIF;

 ENDIF;

 //?USER: Process Data record

 //?02/05/09 FP1054 RMC Added Schedule Override adj-> type = SV
 //?04/09/08 PKD Added Freezer Transfer update
 CASE;

 // IF PAR.ATS Adj Type USR is Schedule Override
 IF PAR.ATS_Adj_Type_USR = 'SV';

 CASE;

 // IF PAR.PS Pieces Prod Adj is NE Zeros
 IF PAR.PS_Pieces_Prod_Adj <> *ZERO;

 // LCL.PS Avg Piece Wgt = PAR.PS Weight Prod Adj / PAR.PS Pieces Prod Adj *
 LCL.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Adj / PAR.PS_Pieces_Prod_Adj;

 CASE;

 // IF LCL.PS Avg Piece Wgt is LT Zero
 IF LCL.PS_Avg_Piece_Wgt < *ZERO;

 // LCL.PS Avg Piece Wgt = LCL.PS Avg Piece Wgt * CON.-1 *
 LCL.PS_Avg_Piece_Wgt = LCL.PS_Avg_Piece_Wgt * -1;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.PS Avg Piece Wgt = CON.*ZERO
 LCL.PS_Avg_Piece_Wgt = *ZERO;

 ENDIF;

 EXECUTE FUNCTION(Chg Schedule Prd      CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1919708;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(LCL.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.PS_Weight_Prod_Adj);
 PARAMETER(PAR.PS_Pieces_Prod_Adj);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.PS Weight Prod Adj = DB1.PS Weight Prod Adj + PAR.PS Weight Prod Adj
 LCL.PS_Weight_Prod_Adj = DB1.PS_Weight_Prod_Adj + PAR.PS_Weight_Prod_Adj;

 // LCL.PS Pieces Prod Adj = DB1.PS Pieces Prod Adj + PAR.PS Pieces Prod Adj
 LCL.PS_Pieces_Prod_Adj = DB1.PS_Pieces_Prod_Adj + PAR.PS_Pieces_Prod_Adj;

 //?If forecast adjustment type do not allow negatives
 CASE;

 // IF PAR.ATS Adj Type USR is Schedule Adjust Forecast
 IF PAR.ATS_Adj_Type_USR = 'SF';

 CASE;

 // IF LCL.PS Weight Prod Adj is LT Zero
 IF LCL.PS_Weight_Prod_Adj < *ZERO;

 // OR LCL.PS Pieces Prod Adj is LT Zeros
 OR LCL.PS_Pieces_Prod_Adj < *ZERO;

 // LCL.PS Weight Prod Adj = CON.*ZERO
 LCL.PS_Weight_Prod_Adj = *ZERO;

 // LCL.PS Pieces Prod Adj = CON.*ZERO
 LCL.PS_Pieces_Prod_Adj = *ZERO;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Chg Schedule Adj      CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478190;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(LCL.PS_Weight_Prod_Adj);
 PARAMETER(LCL.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

 }

 ENDIF;

}


// PAR.Return Code ATS USR = CND.BOM Not Found
PAR.Return_Code_ATS_USR = 'BNF';

//?Allocate standard and add adjustment to item
// IF *OTHERWISE
IF *OTHERWISE;

// Weight Need
PAR.Weight_UPS_USR = PAR.PSAA_Weight_Adjusted / ( PAR.Production_Yield / 100 'H' ) 'H';

//?If piece count item check piece deallocate/allocate, else weight
CASE;

// IF PAR.Piece Count Item is yes
IF PAR.Piece_Count_Item = 'Y';

//?Setup allocate or deallocate for item.
CASE;

// IF PAR.Pieces Adjusted is GT Zero
IF PAR.Pieces_Adjusted > *ZERO;

// PAR.ATS Adj Type USR 2 = CND.Order Allocate
PAR.ATS_Adj_Type_USR_2 = 'OA';

//?Setup allocate or deallocate for item.
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.ATS Adj Type USR 2 = CND.Order Deallocate
PAR.ATS_Adj_Type_USR_2 = 'OD';

// WRK.Pieces Adjusted = PAR.Pieces Adjusted * CON.-1 *
WRK.Pieces_Adjusted = PAR.Pieces_Adjusted * -1;

//?Chilling Time
CASE;

// IF PAR.Warehouse Std Chill Time is yes
IF PAR.Warehouse_Std_Chill_Time = 'Y';

// PAR.Chilling Time USR = PAR.Warehouse Chill Time
PAR.Chilling_Time_USR = PAR.Warehouse_Chill_Time;

//?Chilling Time
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Chilling Time USR = PAR.Fresh Chilling Time
PAR.Chilling_Time_USR = PAR.Fresh_Chilling_Time;

ENDIF;

EXECUTE FUNCTION(Rtv AvgPcWgt/Prd/PrdAl RT) TYPE(RTVOBJ) FILE(PDI8CPP)          AC1484812;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Production_Type);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.ATS_Weight_Available_USR);
PARAMETER(PAR.ATS_Pieces_Available_USR);
PARAMETER(PAR.PS_Avg_Piece_Wgt);
PARAMETER(WRK.PS_Weight_Prod_Allocated);
PARAMETER(WRK.PS_Pieces_Prod_Allocated);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // Total Production Weight
 PAR.PS_Weight_Planned_Prod = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
 - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

 // Total Production Pieces
 PAR.PS_Pieces_Planned_Prod = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
 - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

}


CASE;

// IF PAR.ATS Pieces Available USR LT WRK.Pieces Adjusted
IF PAR.ATS_Pieces_Available_USR < WRK.Pieces_Adjusted;

// AND PAR.ATS Pieces Available USR is GT Zero
AND PAR.ATS_Pieces_Available_USR > *ZERO;

// PAR.Pieces Adjusted = PAR.ATS Pieces Available USR * CON.-1 *
PAR.Pieces_Adjusted = PAR.ATS_Pieces_Available_USR * -1;

// PAR.Weight UPS USR = PAR.Pieces Adjusted * PAR.PS Avg Piece Wgt *
PAR.Weight_UPS_USR = PAR.Pieces_Adjusted * PAR.PS_Avg_Piece_Wgt;

ENDIF;

ENDIF;

//?If piece count item check piece deallocate/allocate, else weight
// IF *OTHERWISE
IF *OTHERWISE;

//?Setup allocate or deallocate for item.
CASE;

// IF PAR.Weight UPS USR is GT Zero
IF PAR.Weight_UPS_USR > *ZERO;

// PAR.ATS Adj Type USR 2 = CND.Order Allocate
PAR.ATS_Adj_Type_USR_2 = 'OA';

//?Setup allocate or deallocate for item.
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.ATS Adj Type USR 2 = CND.Order Deallocate
PAR.ATS_Adj_Type_USR_2 = 'OD';

ENDIF;

ENDIF;

//?If Deallocate and no production then don't deallocate
CASE;

// IF PAR.ATS Adj Type USR 2 is Order Deallocate
IF PAR.ATS_Adj_Type_USR_2 = 'OD';

// AND PAR.ATS Pieces Available USR is LE Zero
AND PAR.ATS_Pieces_Available_USR <= *ZERO;

// AND PAR.Piece Count Item is yes
AND PAR.Piece_Count_Item = 'Y';

//?If Deallocate and no production then don't deallocate
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Pieces Adjusted  USR = PAR.Pieces Adjusted
PAR.Pieces_Adjusted_USR = PAR.Pieces_Adjusted;

//?** 06/24/2014 JJH E3160 - Logic changed in this function to
//?** only process Item Bill of Material records with Upd Standard
//?** Production = Blank(Yes).
EXECUTE FUNCTION(Upd Alloc Std for Adj  RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC1485728;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Production_Type);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Warehouse_Type);
PARAMETER(PAR.Warehouse_Std_Chill_Time);
PARAMETER(PAR.Warehouse_Chill_Time);
PARAMETER(PAR.ATS_Adj_Type_USR);
PARAMETER(PAR.ATS_Adj_Type_USR_2);
PARAMETER(PAR.Pieces_Adjusted);
PARAMETER(PAR.Weight_UPS_USR);
{
 //?USER: Initialize routine

 // PAR.Pieces Consumed USR = CON.*ZERO
 PAR.Pieces_Consumed_USR = *ZERO;

 // PAR.Weight Consumed USR = CON.*ZERO
 PAR.Weight_Consumed_USR = *ZERO;

 //?If order is allocate then check export pass rate
 CASE;

 // IF PAR.ATS Adj Type USR 2 is Order Allocate
 IF PAR.ATS_Adj_Type_USR_2 = 'OA';

 EXECUTE FUNCTION(Rtv Export/Department RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1504627;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Export_Domestic);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Export Pass Rate  RT) TYPE(RTVOBJ) FILE(PDI7CPP)           AC1504628;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Department_Code);
 PARAMETER(9999999);
 PARAMETER(PAR.Export_Pass_Rate);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?Export Item & Department Pass Rate NE 0 then calc Export Availability.
 CASE;

 // IF PAR.Export Pass Rate is not equal to zeros
 IF PAR.Export_Pass_Rate <> *ZERO;

 // AND PAR.Export/Domestic is Export
 AND PAR.Export_Domestic = 'E';

 EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(WRK.RM_Weight_Avail_USR);
 PARAMETER(WRK.RM_Pieces_Avail_USR);
 PARAMETER(PAR.Chilling_Time_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
  //? instead of:
  //?Production = Standard + Prod Adj - Converted
  //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
  CASE;

  // IF DB1.PS Lock Status is NOT LOCKED
  IF DB1.PS_Lock_Status = 'N';

  //?Ship Cut Adjust
  CASE;

  // IF PAR.Chilling Time USR is GT Zero
  IF PAR.Chilling_Time_USR > *ZERO;

  // AND DB1.Production Date EQ JOB.*Job date
  AND DB1.Production_Date = JOB.*Job_date;

  EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
  PARAMETER(DB1.Company_Number);
  PARAMETER('P');
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  // Weight Production
  PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
  + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
  + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // Weight Available
  PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
  + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
  - DB1.PS_Weight_Prod_Allocated;

  // Pieces Available
  PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
  + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
  - DB1.PS_Pieces_Prod_Allocated;

  //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
  CASE;

  // IF PAR.ATS Weight Available USR is Less than zero
  IF PAR.ATS_Weight_Available_USR < *ZERO;

  CASE;

  // IF PAR.ATS Pieces Available USR is LE Zero
  IF PAR.ATS_Pieces_Available_USR <= *ZERO;

  // PAR.ATS Weight Available USR = CON.*ZERO
  PAR.ATS_Weight_Available_USR = *ZERO;

  // PAR.ATS Pieces Available USR = CON.*ZERO
  PAR.ATS_Pieces_Available_USR = *ZERO;

  ENDIF;

  ENDIF;

  // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
  PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

  ENDIF;

 }

 EXECUTE FUNCTION(RTV Conv Dept Total   RT) TYPE(RTVOBJ) FILE(PDLMCPP)           AC1504679;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.CDS_CV_Pieces_Available);
 PARAMETER(PAR.CDS_CV_Weight_Available);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Clc Dept Pass Weight Aval
 PAR.ATS_Weight_Available_USR = PAR.CDS_CV_Weight_Available * ( PAR.Export_Pass_Rate
 / 100 );

 // Clc Dept Pass Pieces Aval
 PAR.ATS_Pieces_Available_USR = PAR.CDS_CV_Pieces_Available * ( PAR.Export_Pass_Rate
 / 100 );

 EXECUTE FUNCTION(Rtv Total Prod Dpt/Exp RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1504730;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Export_Domestic);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Pieces_Scheduled);
 PARAMETER(PAR.Weight_Scheduled);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?Retrieve total production for a department for export items.
  EXECUTE FUNCTION(Rtv Production        RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1459979;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Weight_Production_USR);
  PARAMETER(PAR.Pieces_Production_USR);
  PARAMETER(PAR.PS_Production_Warehouse);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // Weight Production
   PAR.Weight_Production_USR = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
   - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

   // Pieces Production
   PAR.Pieces_Production_USR = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
   - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

   // PAR.PS Shift/Priority = DB1.PS Shift/Priority
   PAR.PS_Production_Warehouse = DB1.PS_Production_Warehouse;

  }

  // PAR.Pieces Scheduled = PAR.Pieces Scheduled + PAR.Pieces Production USR
  PAR.Pieces_Scheduled = PAR.Pieces_Scheduled + PAR.Pieces_Production_USR;

  // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.Weight Production USR
  PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.Weight_Production_USR;

 }

 // PAR.SM Pieces Remain USR = PAR.ATS Pieces Available USR - PAR.Pieces Scheduled
 PAR.SM_Pieces_Remain_USR = PAR.ATS_Pieces_Available_USR - PAR.Pieces_Scheduled;

 // PAR.SM Weight Remain USR = PAR.ATS Weight Available USR - PAR.Weight Scheduled
 PAR.SM_Weight_Remain_USR = PAR.ATS_Weight_Available_USR - PAR.Weight_Scheduled;

 //?If piece count item, test pieces else test weight
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 //?If Pieces Remain LT 0, then Pieces Need = 0, Else test againts need
 CASE;

 // IF PAR.SM Pieces Remain USR is LT Zeros
 IF PAR.SM_Pieces_Remain_USR < *ZERO;

 // PAR.SM Pieces Need USR = CON.*ZERO
 PAR.SM_Pieces_Need_USR = *ZERO;

 // PAR.SM Weight Need USR = CON.*ZERO
 PAR.SM_Weight_Need_USR = *ZERO;

 //?If Pieces Remain LT 0, then Pieces Need = 0, Else test againts need
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.SM Pieces Need USR GT PAR.SM Pieces Remain USR
 IF PAR.SM_Pieces_Need_USR > PAR.SM_Pieces_Remain_USR;

 // PAR.SM Pieces Need USR = PAR.SM Pieces Remain USR
 PAR.SM_Pieces_Need_USR = PAR.SM_Pieces_Remain_USR;

 // Weight Need
 PAR.SM_Weight_Need_USR = PAR.SM_Pieces_Need_USR * PAR.PS_Avg_Piece_Wgt 'H';

 ENDIF;

 ENDIF;

 //?If piece count item, test pieces else test weight
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?If Weight Remain LT 0, Then Weight Need = 0, Else test against need
 CASE;

 // IF PAR.SM Weight Remain USR is Less than zero
 IF PAR.SM_Weight_Remain_USR < *ZERO;

 // PAR.SM Weight Need USR = CON.*ZERO
 PAR.SM_Weight_Need_USR = *ZERO;

 // PAR.SM Pieces Need USR = CON.*ZERO
 PAR.SM_Pieces_Need_USR = *ZERO;

 //?If Weight Remain LT 0, Then Weight Need = 0, Else test against need
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.SM Weight Need USR GT PAR.SM Weight Remain USR
 IF PAR.SM_Weight_Need_USR > PAR.SM_Weight_Remain_USR;

 // PAR.SM Weight Need USR = PAR.SM Weight Remain USR
 PAR.SM_Weight_Need_USR = PAR.SM_Weight_Remain_USR;

 // PAR.SM Pieces Need USR = CON.*ZERO
 PAR.SM_Pieces_Need_USR = *ZERO;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 // PAR.RM Weight Need USR = PAR.SM Weight Need USR
 PAR.RM_Weight_Need_USR = PAR.SM_Weight_Need_USR;

 // PAR.RM Pieces Need USR = PAR.SM Pieces Need USR
 PAR.RM_Pieces_Need_USR = PAR.SM_Pieces_Need_USR;

 // PAR.RM Weight Alloc USR = PAR.SM Weight Need USR
 PAR.RM_Weight_Alloc_USR = PAR.SM_Weight_Need_USR;

 // PAR.RM Pieces Alloc USR = PAR.SM Pieces Need USR
 PAR.RM_Pieces_Alloc_USR = PAR.SM_Pieces_Need_USR;

 //?USER: Process Data record

 //?Consumed Items
 CASE;

 // IF DB1.BOM Type is Consumed - Meat
 IF DB1.BOM_Type = 'C';

 EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Component_Item_Code);
 PARAMETER(WRK.Description_Line_One);
 PARAMETER(WRK.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(WRK.Item_Structure_Class_Code);
 PARAMETER(WRK.Item_Structure_Group_Code);
 PARAMETER(WRK.Item_Structure_Type_Code);
 PARAMETER(WRK.Item_Type_Code);
 PARAMETER(WRK.Default_Warehouse);
 PARAMETER(WRK.Fresh_Chilling_Time);
 PARAMETER(WRK.Base_Conv_Loss_Item);
 PARAMETER(WRK.Variety_Rendered_Cut);
 PARAMETER(WRK.Credit_Item_Status);
 PARAMETER(WRK.Std_Weight_Head_Var_Ren);
 PARAMETER(PAR.Pieces_Per_Head);
 PARAMETER(WRK.Department_Code);
 PARAMETER(WRK.Group_for_Packaging);
 PARAMETER(WRK.Seconds_Item);
 PARAMETER(PAR.Piece_Count_Item_USR);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(WRK.Export_Domestic);
 PARAMETER(WRK.Print_On_Schedule);
 PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
 PARAMETER(WRK.Fresh_Sched_As_Ordered);
 PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
 PARAMETER(WRK.Primal_Group_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.Warehouse_Type);
 PARAMETER(WRK.Trans_Contol_AS400_Plant);
 PARAMETER(WRK.Warehouse_Location);
 PARAMETER(WRK.Warehouse_Std_Chill_Time);
 PARAMETER(WRK.Warehouse_Chill_Time);
 PARAMETER(WRK.PS_Item_Id);
 {
  //?Execute internal function

  EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Description_Line_One);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Type_Code);
  PARAMETER(PAR.Default_Warehouse);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Base_Conv_Loss_Item);
  PARAMETER(PAR.Variety_Rendered_Cut);
  PARAMETER(PAR.Credit_Item_Status);
  PARAMETER(PAR.Std_Weight_Head_Var_Ren);
  PARAMETER(PAR.Pieces_Per_Head);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Group_for_Packaging);
  PARAMETER(PAR.Seconds_Item);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.Export_Domestic);
  PARAMETER(PAR.Print_On_Schedule);
  PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
  PARAMETER(PAR.Fresh_Sched_As_Ordered);
  PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  PARAMETER(PAR.Warehouse_Location);
  PARAMETER(PAR.Warehouse_Std_Chill_Time);
  PARAMETER(PAR.Warehouse_Chill_Time);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Description_Line_One);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Default_Warehouse);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Std_Weight_Head_Var_Ren);
   PARAMETER(PAR.Pieces_Per_Head);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Group_for_Packaging);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Export_Domestic);
   PARAMETER(PAR.Print_On_Schedule);
   PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
   PARAMETER(PAR.Fresh_Sched_As_Ordered);
   PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
   PARAMETER(PAR.Primal_Group_Code);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.Trans_Contol_AS400_Plant);
   PARAMETER(PAR.Warehouse_Location);
   PARAMETER(PAR.Warehouse_Std_Chill_Time);
   PARAMETER(PAR.Warehouse_Chill_Time);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

  }

  EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
  PARAMETER(PAR.Item_Type_Code);
  PARAMETER(PAR.Base_Conv_Loss_Item);
  PARAMETER(PAR.Variety_Rendered_Cut);
  PARAMETER(PAR.Credit_Item_Status);
  PARAMETER(PAR.Seconds_Item);
  PARAMETER(PAR.PS_Item_Id);
  {
   //?Execute internal function

   CASE;

   // IF PAR.Item Type Code is Raw Materials
   IF PAR.Item_Type_Code = 'RM';

   // PAR.PS Item Identification = CND.RM Base
   PAR.PS_Item_Id = 'RMB';

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Seconds Item is Yes
   IF PAR.Seconds_Item = 'Y';

   // PAR.PS Item Identification = CND.FG Seconds
   PAR.PS_Item_Id = 'FSC';

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Variety/Rendered/Cut is Variety
   IF PAR.Variety_Rendered_Cut = 'V';

   // PAR.PS Item Identification = CND.FG Variety
   PAR.PS_Item_Id = 'FVR';

   // IF PAR.Variety/Rendered/Cut is Rendered
   IF PAR.Variety_Rendered_Cut = 'R';

   // PAR.PS Item Identification = CND.FG Rendered
   PAR.PS_Item_Id = 'FRD';

   // IF PAR.Variety/Rendered/Cut is Cut
   IF PAR.Variety_Rendered_Cut = 'C';

   //?Base/Converted/Fabricated
   CASE;

   // IF PAR.Credit Item Status is yes
   IF PAR.Credit_Item_Status = 'Y';

   //?Setup Base/Converted/Fabricated Credit
   CASE;

   // IF PAR.Converted/Base Item is Base
   IF PAR.Base_Conv_Loss_Item = 'B';

   // PAR.PS Item Identification = CND.FG Base Credit
   PAR.PS_Item_Id = 'FBC';

   //?Setup Base/Converted/Fabricated Credit
   // IF PAR.Converted/Base Item is Converted
   IF PAR.Base_Conv_Loss_Item = 'C';

   // PAR.PS Item Identification = CND.FG Converted Credit
   PAR.PS_Item_Id = 'FCC';

   //?Setup Base/Converted/Fabricated Credit
   // IF PAR.Converted/Base Item is Fabricated
   IF PAR.Base_Conv_Loss_Item = 'F';

   // PAR.PS Item Identification = CND.FG Fabricated Credit
   PAR.PS_Item_Id = 'FFC';

   //?Setup Base/Converted/Fabricated Credit
   // IF PAR.Converted/Base Item is Loss
   IF PAR.Base_Conv_Loss_Item = 'L';

   // PAR.PS Item Identification = CND.FG Loss Credit
   PAR.PS_Item_Id = 'FLC';

   ENDIF;

   //?Base/Converted/Fabricated
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Setup Base/Converted/Fabricated
   CASE;

   // IF PAR.Converted/Base Item is Base
   IF PAR.Base_Conv_Loss_Item = 'B';

   // PAR.PS Item Identification = CND.FG Base
   PAR.PS_Item_Id = 'FGB';

   //?Setup Base/Converted/Fabricated
   // IF PAR.Converted/Base Item is Converted
   IF PAR.Base_Conv_Loss_Item = 'C';

   // PAR.PS Item Identification = CND.FG Converted
   PAR.PS_Item_Id = 'FCV';

   //?Setup Base/Converted/Fabricated
   // IF PAR.Converted/Base Item is Fabricated
   IF PAR.Base_Conv_Loss_Item = 'F';

   // PAR.PS Item Identification = CND.FG Fabricated
   PAR.PS_Item_Id = 'FFB';

   //?Setup Base/Converted/Fabricated
   // IF PAR.Converted/Base Item is Loss
   IF PAR.Base_Conv_Loss_Item = 'L';

   // PAR.PS Item Identification = CND.FG Loss
   PAR.PS_Item_Id = 'FLS';

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

  }

 }

 //?Chilling Time
 CASE;

 // IF WRK.Warehouse Std Chill Time is yes
 IF WRK.Warehouse_Std_Chill_Time = 'Y';

 // PAR.Chilling Time USR = WRK.Warehouse Chill Time
 PAR.Chilling_Time_USR = WRK.Warehouse_Chill_Time;

 //?Chilling Time
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Chilling Time USR = WRK.Fresh Chilling Time
 PAR.Chilling_Time_USR = WRK.Fresh_Chilling_Time;

 ENDIF;

 EXECUTE FUNCTION(Rtv Avail Prod/Convert RT) TYPE(RTVOBJ) FILE(PDI8CPP)          AC1546527;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(DB1.Component_Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.PS_Weight_Converted);
 PARAMETER(PAR.PS_Pieces_Converted);
 PARAMETER(WRK.RM_Weight_Avail_USR);
 PARAMETER(WRK.RM_Pieces_Avail_USR);
 PARAMETER(PAR.Chilling_Time_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?Production = Standard + Prod Adj - Converted
  //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
  CASE;

  // IF DB1.PS Lock Status is NOT LOCKED
  IF DB1.PS_Lock_Status = 'N';

  //?Ship Cut Adjust
  CASE;

  // IF PAR.Chilling Time USR is GT Zero
  IF PAR.Chilling_Time_USR > *ZERO;

  // AND DB1.Production Date EQ JOB.*Job date
  AND DB1.Production_Date = JOB.*Job_date;

  EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
  PARAMETER(DB1.Company_Number);
  PARAMETER('P');
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // Weight Production
  PAR.Weight_Production_USR = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
  - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
  - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // Weight Available
  PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
  + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
  - DB1.PS_Weight_Prod_Allocated;

  // Pieces Available
  PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
  + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
  - DB1.PS_Pieces_Prod_Allocated;

  //?Weight Avail
  CASE;

  // IF PAR.ATS Weight Available USR is Less than zero
  IF PAR.ATS_Weight_Available_USR < *ZERO;

  // PAR.ATS Weight Available USR = CON.*ZERO
  PAR.ATS_Weight_Available_USR = *ZERO;

  // PAR.ATS Pieces Available USR = CON.*ZERO
  PAR.ATS_Pieces_Available_USR = *ZERO;

  ENDIF;

  // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
  PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

  // PAR.PS Weight Converted = DB1.PS Weight Converted
  PAR.PS_Weight_Converted = DB1.PS_Weight_Converted;

  // PAR.PS Pieces Converted = DB1.PS Pieces Converted
  PAR.PS_Pieces_Converted = DB1.PS_Pieces_Converted;

  ENDIF;

 }

 // PAR.PS Weight Converted = PAR.PS Weight Converted * CON.-1 *
 PAR.PS_Weight_Converted = PAR.PS_Weight_Converted * -1;

 // PAR.PS Pieces Converted = PAR.PS Pieces Converted * CON.-1 *
 PAR.PS_Pieces_Converted = PAR.PS_Pieces_Converted * -1;

 //?Setup PA Array & retrieve available for production date
 EXECUTE FUNCTION(Upd Alloc Order/Prod  IF) TYPE(EXCINTFUN)                      AC1561144;
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.Component_Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(JOB.*Job_date);
 PARAMETER(WRK.Order_From_Warehouse);
 PARAMETER('PROD');
 PARAMETER(WRK.ATS_Weight_Need_USR);
 PARAMETER(WRK.ATS_Quantity_Need_USR);
 PARAMETER(WRK.Order_Number);
 PARAMETER(WRK.Order_Sequence_Number);
 PARAMETER(WRK.Order_Secondary_Line_Seq);
 PARAMETER(WRK.Age_Code);
 PARAMETER(WRK.Quantity_Scheduled);
 PARAMETER(WRK.Weight_Scheduled);
 PARAMETER(WRK.Scheduled_Ship_Date);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Mon-Sat Dates      IF) TYPE(EXCINTFUN)                     AC1386891;
  PARAMETER(PAR.Company_Number);
  PARAMETER(JOB.*Job_date);
  PARAMETER(WRK.Accounting_Year_Code);
  PARAMETER(WRK.Week_Number);
  PARAMETER(PAR.Date_Mon_USR);
  PARAMETER(WRK.Date_Tue_USR);
  PARAMETER(WRK.Date_Wed_USR);
  PARAMETER(WRK.Date_Thu_USR);
  PARAMETER(WRK.Date_Fri_USR);
  PARAMETER(WRK.Date_Sat_USR);
  PARAMETER(WRK.Date_Sun_USR);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Week Number       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1386894;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Post_to_G_L_Date);
   PARAMETER(PAR.Accounting_Year_Code);
   PARAMETER(PAR.Week_Number);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(RTV Mon-Sat w/Wk#      RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1386902;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Accounting_Year_Code);
   PARAMETER(PAR.Week_Number);
   PARAMETER(PAR.Date_Mon_USR);
   PARAMETER(PAR.Date_Tue_USR);
   PARAMETER(PAR.Date_Wed_USR);
   PARAMETER(PAR.Date_Thu_USR);
   PARAMETER(PAR.Date_Fri_USR);
   PARAMETER(PAR.Date_Sat_USR);
   PARAMETER(PAR.Date_Sun_USR);
   PARAMETER('Y');
   {
    //?USER: Initialize routine

    CASE;

    // IF PAR.First Time Flag is Yes
    IF PAR.First_Time_Flag = 'Y';

    MOVE *ALL (To: PAR From: CON);

    ENDIF;

    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    CASE;

    // IF DB1.Day of Week is Sunday
    IF DB1.Day_of_Week = '1';

    // PAR.Date Sun USR = DB1.Post to G/L Date
    PAR.Date_Sun_USR = DB1.Post_to_G_L_Date;

    // IF DB1.Day of Week is Monday
    IF DB1.Day_of_Week = '2';

    // PAR.Date Mon USR = DB1.Post to G/L Date
    PAR.Date_Mon_USR = DB1.Post_to_G_L_Date;

    // IF DB1.Day of Week is Tuesday
    IF DB1.Day_of_Week = '3';

    // PAR.Date Tue USR = DB1.Post to G/L Date
    PAR.Date_Tue_USR = DB1.Post_to_G_L_Date;

    // IF DB1.Day of Week is Wednesday
    IF DB1.Day_of_Week = '4';

    // PAR.Date Wed USR = DB1.Post to G/L Date
    PAR.Date_Wed_USR = DB1.Post_to_G_L_Date;

    // IF DB1.Day of Week is Thursday
    IF DB1.Day_of_Week = '5';

    // PAR.Date Thu USR = DB1.Post to G/L Date
    PAR.Date_Thu_USR = DB1.Post_to_G_L_Date;

    // IF DB1.Day of Week is Friday
    IF DB1.Day_of_Week = '6';

    // PAR.Date Fri USR = DB1.Post to G/L Date
    PAR.Date_Fri_USR = DB1.Post_to_G_L_Date;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    // PAR.Date Sat USR = DB1.Post to G/L Date
    PAR.Date_Sat_USR = DB1.Post_to_G_L_Date;

    ENDIF;

   }

   CASE;

   // IF PAR.Date Mon USR EQ WRK.ZERO
   IF PAR.Date_Mon_USR = WRK.ZERO;

   // OR PAR.Date Tue USR EQ WRK.ZERO
   OR PAR.Date_Tue_USR = WRK.ZERO;

   // OR PAR.Date Wed USR EQ WRK.ZERO
   OR PAR.Date_Wed_USR = WRK.ZERO;

   // OR PAR.Date Thu USR EQ WRK.ZERO
   OR PAR.Date_Thu_USR = WRK.ZERO;

   // OR PAR.Date Fri USR EQ WRK.ZERO
   OR PAR.Date_Fri_USR = WRK.ZERO;

   // OR PAR.Date Sat USR EQ WRK.ZERO
   OR PAR.Date_Sat_USR = WRK.ZERO;

   //?And the Week is 52 or 53
   CASE;

   // IF PAR.Week Number is Year End
   IF PAR.Week_Number >= 52;
   AND PAR.Week_Number <= 53;

   // PAR.Accounting Year Code = PAR.Accounting Year Code + CON.1
   PAR.Accounting_Year_Code = PAR.Accounting_Year_Code + 1;

   EXECUTE FUNCTION(RTV Mon-Sat w/Wk#      RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1386902;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Accounting_Year_Code);
   PARAMETER(1);
   PARAMETER(PAR.Date_Mon_USR);
   PARAMETER(PAR.Date_Tue_USR);
   PARAMETER(PAR.Date_Wed_USR);
   PARAMETER(PAR.Date_Thu_USR);
   PARAMETER(PAR.Date_Fri_USR);
   PARAMETER(PAR.Date_Sat_USR);
   PARAMETER(PAR.Date_Sun_USR);
   PARAMETER('N');
   {
    //?USER: Initialize routine

    CASE;

    // IF PAR.First Time Flag is Yes
    IF PAR.First_Time_Flag = 'Y';

    MOVE *ALL (To: PAR From: CON);

    ENDIF;

    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    CASE;

    // IF DB1.Day of Week is Sunday
    IF DB1.Day_of_Week = '1';

    // PAR.Date Sun USR = DB1.Post to G/L Date
    PAR.Date_Sun_USR = DB1.Post_to_G_L_Date;

    // IF DB1.Day of Week is Monday
    IF DB1.Day_of_Week = '2';

    // PAR.Date Mon USR = DB1.Post to G/L Date
    PAR.Date_Mon_USR = DB1.Post_to_G_L_Date;

    // IF DB1.Day of Week is Tuesday
    IF DB1.Day_of_Week = '3';

    // PAR.Date Tue USR = DB1.Post to G/L Date
    PAR.Date_Tue_USR = DB1.Post_to_G_L_Date;

    // IF DB1.Day of Week is Wednesday
    IF DB1.Day_of_Week = '4';

    // PAR.Date Wed USR = DB1.Post to G/L Date
    PAR.Date_Wed_USR = DB1.Post_to_G_L_Date;

    // IF DB1.Day of Week is Thursday
    IF DB1.Day_of_Week = '5';

    // PAR.Date Thu USR = DB1.Post to G/L Date
    PAR.Date_Thu_USR = DB1.Post_to_G_L_Date;

    // IF DB1.Day of Week is Friday
    IF DB1.Day_of_Week = '6';

    // PAR.Date Fri USR = DB1.Post to G/L Date
    PAR.Date_Fri_USR = DB1.Post_to_G_L_Date;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    // PAR.Date Sat USR = DB1.Post to G/L Date
    PAR.Date_Sat_USR = DB1.Post_to_G_L_Date;

    ENDIF;

   }

   //?And the Week is 52 or 53
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Accounting Year Code = PAR.Accounting Year Code + CON.-1
   PAR.Accounting_Year_Code = PAR.Accounting_Year_Code + -1;

   EXECUTE FUNCTION(RTV Mon-Sat w/Wk#      RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1386902;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Accounting_Year_Code);
   PARAMETER(53);
   PARAMETER(PAR.Date_Mon_USR);
   PARAMETER(PAR.Date_Tue_USR);
   PARAMETER(PAR.Date_Wed_USR);
   PARAMETER(PAR.Date_Thu_USR);
   PARAMETER(PAR.Date_Fri_USR);
   PARAMETER(PAR.Date_Sat_USR);
   PARAMETER(PAR.Date_Sun_USR);
   PARAMETER('N');
   {
    //?USER: Initialize routine

    CASE;

    // IF PAR.First Time Flag is Yes
    IF PAR.First_Time_Flag = 'Y';

    MOVE *ALL (To: PAR From: CON);

    ENDIF;

    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    CASE;

    // IF DB1.Day of Week is Sunday
    IF DB1.Day_of_Week = '1';

    // PAR.Date Sun USR = DB1.Post to G/L Date
    PAR.Date_Sun_USR = DB1.Post_to_G_L_Date;

    // IF DB1.Day of Week is Monday
    IF DB1.Day_of_Week = '2';

    // PAR.Date Mon USR = DB1.Post to G/L Date
    PAR.Date_Mon_USR = DB1.Post_to_G_L_Date;

    // IF DB1.Day of Week is Tuesday
    IF DB1.Day_of_Week = '3';

    // PAR.Date Tue USR = DB1.Post to G/L Date
    PAR.Date_Tue_USR = DB1.Post_to_G_L_Date;

    // IF DB1.Day of Week is Wednesday
    IF DB1.Day_of_Week = '4';

    // PAR.Date Wed USR = DB1.Post to G/L Date
    PAR.Date_Wed_USR = DB1.Post_to_G_L_Date;

    // IF DB1.Day of Week is Thursday
    IF DB1.Day_of_Week = '5';

    // PAR.Date Thu USR = DB1.Post to G/L Date
    PAR.Date_Thu_USR = DB1.Post_to_G_L_Date;

    // IF DB1.Day of Week is Friday
    IF DB1.Day_of_Week = '6';

    // PAR.Date Fri USR = DB1.Post to G/L Date
    PAR.Date_Fri_USR = DB1.Post_to_G_L_Date;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    // PAR.Date Sat USR = DB1.Post to G/L Date
    PAR.Date_Sat_USR = DB1.Post_to_G_L_Date;

    ENDIF;

   }

   ENDIF;

   ENDIF;

  }

  EXECUTE FUNCTION(Rtv PA Shipdate-21+SunRT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1621622;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Date_Mon_USR);
  PARAMETER(WRK.Generic_Heading_1);
  PARAMETER(WRK.Generic_Heading_2);
  PARAMETER(WRK.Generic_Heading_3);
  PARAMETER(WRK.Generic_Heading_4);
  PARAMETER(WRK.Generic_Heading_5);
  PARAMETER(WRK.Generic_Heading_6);
  PARAMETER(WRK.Generic_Heading_7);
  PARAMETER(WRK.Generic_Heading_8);
  PARAMETER(WRK.Generic_Heading_9);
  PARAMETER(WRK.Generic_Heading_10);
  PARAMETER(WRK.Generic_Heading_11);
  PARAMETER(WRK.Generic_Heading_12);
  PARAMETER(WRK.Generic_Heading_13);
  PARAMETER(WRK.Generic_Heading_14);
  PARAMETER(WRK.Generic_Heading_15);
  PARAMETER(WRK.Generic_Heading_16);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.Avail_Ship_Date_8_USR);
  PARAMETER(PAR.Avail_Ship_Date_9_USR);
  PARAMETER(PAR.Avail_Ship_Date_10_USR);
  PARAMETER(PAR.Avail_Ship_Date_11_USR);
  PARAMETER(PAR.Avail_Ship_Date_12_USR);
  PARAMETER(PAR.Avail_Ship_Date_13_USR);
  PARAMETER(PAR.Avail_Ship_Date_14_USR);
  PARAMETER(PAR.Avail_Ship_Date_15_USR);
  PARAMETER(PAR.Avail_Ship_Date_16_USR);
  PARAMETER(PAR.Avail_Ship_Date_17_USR);
  PARAMETER(PAR.Avail_Ship_Date_18_USR);
  PARAMETER(PAR.Avail_Ship_Date_19_USR);
  PARAMETER(PAR.Avail_Ship_Date_20_USR);
  PARAMETER(PAR.Avail_Ship_Date_21_USR);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.1
   WRK.Count_USR = 1;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR is GT 21
   IF WRK.Count_USR > 21;

   QUIT;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Move Date
   CASE;

   // IF WRK.Count USR is One
   IF WRK.Count_USR = 1;

   EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
   PARAMETER(DB1.Post_to_G_L_Date);
   PARAMETER(WRK.@Calc_60);
   {
    //?Execute internal function

    //?convert numeric date to character date.
    // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
    PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

    //?extract month, day, and year.
    // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
    PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

    // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
    PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

    // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
    PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

    //?reconstruct date in mmddyy format.
    // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
    PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

    // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
    PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

    //?convert character date to numeric date.
    // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
    PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

   }

   // PAR.Generic Heading 1 = CVTVAR(WRK.@Calc 6,0)
   PAR.Generic_Heading_1 = CVTVAR(WRK.@Calc_60);

   // PAR.Avail Ship Date 1 USR = DB1.Post to G/L Date
   PAR.Avail_Ship_Date_1_USR = DB1.Post_to_G_L_Date;

   CASE;

   // IF DB1.Day of Week is Sunday
   IF DB1.Day_of_Week = '1';

   // PAR.Generic Heading 2 = CON.Total
   PAR.Generic_Heading_2 = 'Total';

   // PAR.Avail Ship Date 2 USR = CON.*ZERO
   PAR.Avail_Ship_Date_2_USR = *ZERO;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   //?Move Date
   // IF WRK.Count USR is Two
   IF WRK.Count_USR = 2;

   EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
   PARAMETER(DB1.Post_to_G_L_Date);
   PARAMETER(WRK.@Calc_60);
   {
    //?Execute internal function

    //?convert numeric date to character date.
    // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
    PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

    //?extract month, day, and year.
    // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
    PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

    // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
    PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

    // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
    PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

    //?reconstruct date in mmddyy format.
    // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
    PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

    // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
    PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

    //?convert character date to numeric date.
    // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
    PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

   }

   // PAR.Generic Heading 2 = CVTVAR(WRK.@Calc 6,0)
   PAR.Generic_Heading_2 = CVTVAR(WRK.@Calc_60);

   // PAR.Avail Ship Date 2 USR = DB1.Post to G/L Date
   PAR.Avail_Ship_Date_2_USR = DB1.Post_to_G_L_Date;

   CASE;

   // IF DB1.Day of Week is Sunday
   IF DB1.Day_of_Week = '1';

   // PAR.Generic Heading 3 = CON.Total
   PAR.Generic_Heading_3 = 'Total';

   // PAR.Avail Ship Date 3 USR = CON.*ZERO
   PAR.Avail_Ship_Date_3_USR = *ZERO;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   //?Move Date
   // IF WRK.Count USR is Three
   IF WRK.Count_USR = 3;

   EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
   PARAMETER(DB1.Post_to_G_L_Date);
   PARAMETER(WRK.@Calc_60);
   {
    //?Execute internal function

    //?convert numeric date to character date.
    // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
    PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

    //?extract month, day, and year.
    // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
    PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

    // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
    PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

    // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
    PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

    //?reconstruct date in mmddyy format.
    // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
    PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

    // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
    PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

    //?convert character date to numeric date.
    // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
    PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

   }

   // PAR.Generic Heading 3 = CVTVAR(WRK.@Calc 6,0)
   PAR.Generic_Heading_3 = CVTVAR(WRK.@Calc_60);

   // PAR.Avail Ship Date 3 USR = DB1.Post to G/L Date
   PAR.Avail_Ship_Date_3_USR = DB1.Post_to_G_L_Date;

   CASE;

   // IF DB1.Day of Week is Sunday
   IF DB1.Day_of_Week = '1';

   // PAR.Generic Heading 4 = CON.Total
   PAR.Generic_Heading_4 = 'Total';

   // PAR.Avail Ship Date 4 USR = CON.*ZERO
   PAR.Avail_Ship_Date_4_USR = *ZERO;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   //?Move Date
   // IF WRK.Count USR is Four
   IF WRK.Count_USR = 4;

   EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
   PARAMETER(DB1.Post_to_G_L_Date);
   PARAMETER(WRK.@Calc_60);
   {
    //?Execute internal function

    //?convert numeric date to character date.
    // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
    PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

    //?extract month, day, and year.
    // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
    PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

    // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
    PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

    // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
    PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

    //?reconstruct date in mmddyy format.
    // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
    PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

    // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
    PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

    //?convert character date to numeric date.
    // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
    PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

   }

   // PAR.Generic Heading 4 = CVTVAR(WRK.@Calc 6,0)
   PAR.Generic_Heading_4 = CVTVAR(WRK.@Calc_60);

   // PAR.Avail Ship Date 4 USR = DB1.Post to G/L Date
   PAR.Avail_Ship_Date_4_USR = DB1.Post_to_G_L_Date;

   CASE;

   // IF DB1.Day of Week is Sunday
   IF DB1.Day_of_Week = '1';

   // PAR.Generic Heading 5 = CON.Total
   PAR.Generic_Heading_5 = 'Total';

   // PAR.Avail Ship Date 5 USR = CON.*ZERO
   PAR.Avail_Ship_Date_5_USR = *ZERO;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   //?Move Date
   // IF WRK.Count USR is Five
   IF WRK.Count_USR = 5;

   EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
   PARAMETER(DB1.Post_to_G_L_Date);
   PARAMETER(WRK.@Calc_60);
   {
    //?Execute internal function

    //?convert numeric date to character date.
    // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
    PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

    //?extract month, day, and year.
    // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
    PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

    // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
    PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

    // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
    PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

    //?reconstruct date in mmddyy format.
    // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
    PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

    // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
    PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

    //?convert character date to numeric date.
    // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
    PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

   }

   // PAR.Generic Heading 5 = CVTVAR(WRK.@Calc 6,0)
   PAR.Generic_Heading_5 = CVTVAR(WRK.@Calc_60);

   // PAR.Avail Ship Date 5 USR = DB1.Post to G/L Date
   PAR.Avail_Ship_Date_5_USR = DB1.Post_to_G_L_Date;

   CASE;

   // IF DB1.Day of Week is Sunday
   IF DB1.Day_of_Week = '1';

   // PAR.Generic Heading 6 = CON.Total
   PAR.Generic_Heading_6 = 'Total';

   // PAR.Avail Ship Date 6 USR = CON.*ZERO
   PAR.Avail_Ship_Date_6_USR = *ZERO;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   //?Move Date
   // IF WRK.Count USR is Six
   IF WRK.Count_USR = 6;

   EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
   PARAMETER(DB1.Post_to_G_L_Date);
   PARAMETER(WRK.@Calc_60);
   {
    //?Execute internal function

    //?convert numeric date to character date.
    // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
    PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

    //?extract month, day, and year.
    // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
    PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

    // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
    PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

    // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
    PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

    //?reconstruct date in mmddyy format.
    // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
    PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

    // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
    PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

    //?convert character date to numeric date.
    // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
    PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

   }

   // PAR.Generic Heading 6 = CVTVAR(WRK.@Calc 6,0)
   PAR.Generic_Heading_6 = CVTVAR(WRK.@Calc_60);

   // PAR.Avail Ship Date 6 USR = DB1.Post to G/L Date
   PAR.Avail_Ship_Date_6_USR = DB1.Post_to_G_L_Date;

   CASE;

   // IF DB1.Day of Week is Sunday
   IF DB1.Day_of_Week = '1';

   // PAR.Generic Heading 7 = CON.Total
   PAR.Generic_Heading_7 = 'Total';

   // PAR.Avail Ship Date 7 USR = CON.*ZERO
   PAR.Avail_Ship_Date_7_USR = *ZERO;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   //?Move Date
   // IF WRK.Count USR is Seven
   IF WRK.Count_USR = 7;

   EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
   PARAMETER(DB1.Post_to_G_L_Date);
   PARAMETER(WRK.@Calc_60);
   {
    //?Execute internal function

    //?convert numeric date to character date.
    // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
    PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

    //?extract month, day, and year.
    // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
    PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

    // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
    PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

    // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
    PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

    //?reconstruct date in mmddyy format.
    // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
    PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

    // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
    PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

    //?convert character date to numeric date.
    // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
    PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

   }

   // PAR.Generic Heading 7 = CVTVAR(WRK.@Calc 6,0)
   PAR.Generic_Heading_7 = CVTVAR(WRK.@Calc_60);

   // PAR.Avail Ship Date 7 USR = DB1.Post to G/L Date
   PAR.Avail_Ship_Date_7_USR = DB1.Post_to_G_L_Date;

   CASE;

   // IF DB1.Day of Week is Sunday
   IF DB1.Day_of_Week = '1';

   // PAR.Generic Heading 8 = CON.Total
   PAR.Generic_Heading_8 = 'Total';

   // PAR.Avail Ship Date 8 USR = CON.*ZERO
   PAR.Avail_Ship_Date_8_USR = *ZERO;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   //?Move Date
   // IF WRK.Count USR is Eight
   IF WRK.Count_USR = 8;

   EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
   PARAMETER(DB1.Post_to_G_L_Date);
   PARAMETER(WRK.@Calc_60);
   {
    //?Execute internal function

    //?convert numeric date to character date.
    // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
    PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

    //?extract month, day, and year.
    // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
    PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

    // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
    PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

    // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
    PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

    //?reconstruct date in mmddyy format.
    // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
    PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

    // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
    PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

    //?convert character date to numeric date.
    // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
    PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

   }

   // PAR.Generic Heading 8 = CVTVAR(WRK.@Calc 6,0)
   PAR.Generic_Heading_8 = CVTVAR(WRK.@Calc_60);

   // PAR.Avail Ship Date 8 USR = DB1.Post to G/L Date
   PAR.Avail_Ship_Date_8_USR = DB1.Post_to_G_L_Date;

   CASE;

   // IF DB1.Day of Week is Sunday
   IF DB1.Day_of_Week = '1';

   // PAR.Generic Heading 9 = CON.Total
   PAR.Generic_Heading_9 = 'Total';

   // PAR.Avail Ship Date 9 USR = CON.*ZERO
   PAR.Avail_Ship_Date_9_USR = *ZERO;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   //?Move Date
   // IF WRK.Count USR is Nine
   IF WRK.Count_USR = 9;

   EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
   PARAMETER(DB1.Post_to_G_L_Date);
   PARAMETER(WRK.@Calc_60);
   {
    //?Execute internal function

    //?convert numeric date to character date.
    // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
    PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

    //?extract month, day, and year.
    // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
    PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

    // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
    PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

    // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
    PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

    //?reconstruct date in mmddyy format.
    // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
    PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

    // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
    PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

    //?convert character date to numeric date.
    // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
    PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

   }

   // PAR.Generic Heading 9 = CVTVAR(WRK.@Calc 6,0)
   PAR.Generic_Heading_9 = CVTVAR(WRK.@Calc_60);

   // PAR.Avail Ship Date 9 USR = DB1.Post to G/L Date
   PAR.Avail_Ship_Date_9_USR = DB1.Post_to_G_L_Date;

   CASE;

   // IF DB1.Day of Week is Sunday
   IF DB1.Day_of_Week = '1';

   // PAR.Generic Heading 10 = CON.Total
   PAR.Generic_Heading_10 = 'Total';

   // PAR.Avail Ship Date 10 USR = CON.*ZERO
   PAR.Avail_Ship_Date_10_USR = *ZERO;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   //?Move Date
   // IF WRK.Count USR is Ten
   IF WRK.Count_USR = 10;

   EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
   PARAMETER(DB1.Post_to_G_L_Date);
   PARAMETER(WRK.@Calc_60);
   {
    //?Execute internal function

    //?convert numeric date to character date.
    // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
    PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

    //?extract month, day, and year.
    // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
    PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

    // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
    PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

    // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
    PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

    //?reconstruct date in mmddyy format.
    // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
    PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

    // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
    PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

    //?convert character date to numeric date.
    // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
    PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

   }

   // PAR.Generic Heading 10 = CVTVAR(WRK.@Calc 6,0)
   PAR.Generic_Heading_10 = CVTVAR(WRK.@Calc_60);

   // PAR.Avail Ship Date 10 USR = DB1.Post to G/L Date
   PAR.Avail_Ship_Date_10_USR = DB1.Post_to_G_L_Date;

   CASE;

   // IF DB1.Day of Week is Sunday
   IF DB1.Day_of_Week = '1';

   // PAR.Generic Heading 11 = CON.Total
   PAR.Generic_Heading_11 = 'Total';

   // PAR.Avail Ship Date 11 USR = CON.*ZERO
   PAR.Avail_Ship_Date_11_USR = *ZERO;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   //?Move Date
   // IF WRK.Count USR is Eleven
   IF WRK.Count_USR = 11;

   EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
   PARAMETER(DB1.Post_to_G_L_Date);
   PARAMETER(WRK.@Calc_60);
   {
    //?Execute internal function

    //?convert numeric date to character date.
    // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
    PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

    //?extract month, day, and year.
    // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
    PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

    // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
    PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

    // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
    PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

    //?reconstruct date in mmddyy format.
    // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
    PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

    // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
    PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

    //?convert character date to numeric date.
    // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
    PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

   }

   // PAR.Generic Heading 11 = CVTVAR(WRK.@Calc 6,0)
   PAR.Generic_Heading_11 = CVTVAR(WRK.@Calc_60);

   // PAR.Avail Ship Date 11 USR = DB1.Post to G/L Date
   PAR.Avail_Ship_Date_11_USR = DB1.Post_to_G_L_Date;

   CASE;

   // IF DB1.Day of Week is Sunday
   IF DB1.Day_of_Week = '1';

   // PAR.Generic Heading 12 = CON.Total
   PAR.Generic_Heading_12 = 'Total';

   // PAR.Avail Ship Date 12 USR = CON.*ZERO
   PAR.Avail_Ship_Date_12_USR = *ZERO;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   //?Move Date
   // IF WRK.Count USR is Twelve
   IF WRK.Count_USR = 12;

   EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
   PARAMETER(DB1.Post_to_G_L_Date);
   PARAMETER(WRK.@Calc_60);
   {
    //?Execute internal function

    //?convert numeric date to character date.
    // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
    PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

    //?extract month, day, and year.
    // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
    PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

    // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
    PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

    // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
    PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

    //?reconstruct date in mmddyy format.
    // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
    PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

    // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
    PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

    //?convert character date to numeric date.
    // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
    PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

   }

   // PAR.Generic Heading 12 = CVTVAR(WRK.@Calc 6,0)
   PAR.Generic_Heading_12 = CVTVAR(WRK.@Calc_60);

   // PAR.Avail Ship Date 12 USR = DB1.Post to G/L Date
   PAR.Avail_Ship_Date_12_USR = DB1.Post_to_G_L_Date;

   CASE;

   // IF DB1.Day of Week is Sunday
   IF DB1.Day_of_Week = '1';

   // PAR.Generic Heading 13 = CON.Total
   PAR.Generic_Heading_13 = 'Total';

   // PAR.Avail Ship Date 13 USR = CON.*ZERO
   PAR.Avail_Ship_Date_13_USR = *ZERO;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   //?Move Date
   // IF WRK.Count USR is Thirteen
   IF WRK.Count_USR = 13;

   EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
   PARAMETER(DB1.Post_to_G_L_Date);
   PARAMETER(WRK.@Calc_60);
   {
    //?Execute internal function

    //?convert numeric date to character date.
    // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
    PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

    //?extract month, day, and year.
    // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
    PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

    // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
    PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

    // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
    PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

    //?reconstruct date in mmddyy format.
    // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
    PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

    // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
    PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

    //?convert character date to numeric date.
    // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
    PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

   }

   // PAR.Generic Heading 13 = CVTVAR(WRK.@Calc 6,0)
   PAR.Generic_Heading_13 = CVTVAR(WRK.@Calc_60);

   // PAR.Avail Ship Date 13 USR = DB1.Post to G/L Date
   PAR.Avail_Ship_Date_13_USR = DB1.Post_to_G_L_Date;

   CASE;

   // IF DB1.Day of Week is Sunday
   IF DB1.Day_of_Week = '1';

   // PAR.Generic Heading 14 = CON.Total
   PAR.Generic_Heading_14 = 'Total';

   // PAR.Avail Ship Date 14 USR = CON.*ZERO
   PAR.Avail_Ship_Date_14_USR = *ZERO;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   //?Move Date
   // IF WRK.Count USR is Fourteen
   IF WRK.Count_USR = 14;

   EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
   PARAMETER(DB1.Post_to_G_L_Date);
   PARAMETER(WRK.@Calc_60);
   {
    //?Execute internal function

    //?convert numeric date to character date.
    // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
    PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

    //?extract month, day, and year.
    // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
    PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

    // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
    PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

    // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
    PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

    //?reconstruct date in mmddyy format.
    // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
    PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

    // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
    PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

    //?convert character date to numeric date.
    // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
    PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

   }

   // PAR.Generic Heading 14 = CVTVAR(WRK.@Calc 6,0)
   PAR.Generic_Heading_14 = CVTVAR(WRK.@Calc_60);

   // PAR.Avail Ship Date 14 USR = DB1.Post to G/L Date
   PAR.Avail_Ship_Date_14_USR = DB1.Post_to_G_L_Date;

   CASE;

   // IF DB1.Day of Week is Sunday
   IF DB1.Day_of_Week = '1';

   // PAR.Generic Heading 15 = CON.Total
   PAR.Generic_Heading_15 = 'Total';

   // PAR.Avail Ship Date 15 USR = CON.*ZERO
   PAR.Avail_Ship_Date_15_USR = *ZERO;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   //?Move Date
   // IF WRK.Count USR is Fifteen
   IF WRK.Count_USR = 15;

   EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
   PARAMETER(DB1.Post_to_G_L_Date);
   PARAMETER(WRK.@Calc_60);
   {
    //?Execute internal function

    //?convert numeric date to character date.
    // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
    PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

    //?extract month, day, and year.
    // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
    PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

    // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
    PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

    // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
    PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

    //?reconstruct date in mmddyy format.
    // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
    PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

    // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
    PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

    //?convert character date to numeric date.
    // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
    PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

   }

   // PAR.Generic Heading 15 = CVTVAR(WRK.@Calc 6,0)
   PAR.Generic_Heading_15 = CVTVAR(WRK.@Calc_60);

   // PAR.Avail Ship Date 15 USR = DB1.Post to G/L Date
   PAR.Avail_Ship_Date_15_USR = DB1.Post_to_G_L_Date;

   CASE;

   // IF DB1.Day of Week is Sunday
   IF DB1.Day_of_Week = '1';

   // PAR.Generic Heading 16 = CON.Total
   PAR.Generic_Heading_16 = 'Total';

   // PAR.Avail Ship Date 16 USR = CON.*ZERO
   PAR.Avail_Ship_Date_16_USR = *ZERO;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   //?Move Date
   // IF WRK.Count USR is Sixteen
   IF WRK.Count_USR = 16;

   EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
   PARAMETER(DB1.Post_to_G_L_Date);
   PARAMETER(WRK.@Calc_60);
   {
    //?Execute internal function

    //?convert numeric date to character date.
    // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
    PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

    //?extract month, day, and year.
    // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
    PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

    // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
    PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

    // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
    PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

    //?reconstruct date in mmddyy format.
    // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
    PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

    // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
    PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

    //?convert character date to numeric date.
    // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
    PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

   }

   // PAR.Generic Heading 16 = CVTVAR(WRK.@Calc 6,0)
   PAR.Generic_Heading_16 = CVTVAR(WRK.@Calc_60);

   // PAR.Avail Ship Date 16 USR = DB1.Post to G/L Date
   PAR.Avail_Ship_Date_16_USR = DB1.Post_to_G_L_Date;

   //?Move Date
   // IF WRK.Count USR is Seventeen
   IF WRK.Count_USR = 17;

   // PAR.Avail Ship Date 17 USR = DB1.Post to G/L Date
   PAR.Avail_Ship_Date_17_USR = DB1.Post_to_G_L_Date;

   //?Move Date
   // IF WRK.Count USR is Eighteen
   IF WRK.Count_USR = 18;

   // PAR.Avail Ship Date 18 USR = DB1.Post to G/L Date
   PAR.Avail_Ship_Date_18_USR = DB1.Post_to_G_L_Date;

   //?Move Date
   // IF WRK.Count USR is Nineteen
   IF WRK.Count_USR = 19;

   // PAR.Avail Ship Date 19 USR = DB1.Post to G/L Date
   PAR.Avail_Ship_Date_19_USR = DB1.Post_to_G_L_Date;

   //?Move Date
   // IF WRK.Count USR is Twenty
   IF WRK.Count_USR = 20;

   // PAR.Avail Ship Date 20 USR = DB1.Post to G/L Date
   PAR.Avail_Ship_Date_20_USR = DB1.Post_to_G_L_Date;

   //?Move Date
   // IF WRK.Count USR is Twenty One
   IF WRK.Count_USR = 21;

   // PAR.Avail Ship Date 21 USR = DB1.Post to G/L Date
   PAR.Avail_Ship_Date_21_USR = DB1.Post_to_G_L_Date;

   ENDIF;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(WRK.Description_Line_One);
  PARAMETER(WRK.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(WRK.Item_Structure_Class_Code);
  PARAMETER(WRK.Item_Structure_Group_Code);
  PARAMETER(WRK.Item_Structure_Type_Code);
  PARAMETER(WRK.Item_Type_Code);
  PARAMETER(WRK.Default_Warehouse);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(LCL.Base_Conv_Loss_Item);
  PARAMETER(WRK.Variety_Rendered_Cut);
  PARAMETER(WRK.Credit_Item_Status);
  PARAMETER(WRK.Std_Weight_Head_Var_Ren);
  PARAMETER(WRK.Pieces_Per_Head);
  PARAMETER(WRK.Department_Code);
  PARAMETER(WRK.Group_for_Packaging);
  PARAMETER(WRK.Seconds_Item);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(WRK.Export_Domestic);
  PARAMETER(WRK.Print_On_Schedule);
  PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
  PARAMETER(WRK.Fresh_Sched_As_Ordered);
  PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
  PARAMETER(WRK.Primal_Group_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(WRK.Warehouse_Type);
  PARAMETER(WRK.Trans_Contol_AS400_Plant);
  PARAMETER(WRK.Warehouse_Location);
  PARAMETER(PAR.Warehouse_Std_Chill_Time);
  PARAMETER(PAR.Warehouse_Chill_Time);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Description_Line_One);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Default_Warehouse);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Std_Weight_Head_Var_Ren);
   PARAMETER(PAR.Pieces_Per_Head);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Group_for_Packaging);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Export_Domestic);
   PARAMETER(PAR.Print_On_Schedule);
   PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
   PARAMETER(PAR.Fresh_Sched_As_Ordered);
   PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
   PARAMETER(PAR.Primal_Group_Code);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.Trans_Contol_AS400_Plant);
   PARAMETER(PAR.Warehouse_Location);
   PARAMETER(PAR.Warehouse_Std_Chill_Time);
   PARAMETER(PAR.Warehouse_Chill_Time);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

  }

  // Call program Rtv First Consumed Itm XF.
  CALL PROGRAM(Rtv First Consumed Itm XF) ('POP1XFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.Component_Item_Code);

  //?Chilling Time
  CASE;

  // IF PAR.Warehouse Std Chill Time is yes
  IF PAR.Warehouse_Std_Chill_Time = 'Y';

  // PAR.Fresh Chilling Time = PAR.Warehouse Chill Time
  PAR.Fresh_Chilling_Time = PAR.Warehouse_Chill_Time;

  ENDIF;

  EXECUTE FUNCTION(Rtv Prod Whse/Lot Trck RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1560479;
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Production_Warehouse_Code);
  PARAMETER(PAR.Lot_Tracking_Flag);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // Call program Rtv PA Inv/Hold Overs XF.
  CALL PROGRAM(Rtv PA Inv/Hold Overs XF) ('PDS0XFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.Avail_Ship_Date_8_USR);
  PARAMETER(PAR.Avail_Ship_Date_9_USR);
  PARAMETER(PAR.Avail_Ship_Date_10_USR);
  PARAMETER(PAR.Avail_Ship_Date_11_USR);
  PARAMETER(PAR.Avail_Ship_Date_12_USR);
  PARAMETER(PAR.Avail_Ship_Date_13_USR);
  PARAMETER(PAR.Avail_Ship_Date_14_USR);
  PARAMETER(PAR.Day_1_Inventory_USR);
  PARAMETER(PAR.Day_2_Inventory_USR);
  PARAMETER(PAR.Day_3_Inventory_USR);
  PARAMETER(PAR.Day_4_Inventory_USR);
  PARAMETER(PAR.Day_5_Inventory_USR);
  PARAMETER(PAR.Day_6_Inventory_USR);
  PARAMETER(PAR.Day_7_Inventory_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Order_Hold_Over_USR);
  PARAMETER(PAR.Order_Hold_Over_Alloc_USR);
  PARAMETER(PAR.Day_8_Inventory_USR);
  PARAMETER(PAR.Day_9_Inventory_USR);
  PARAMETER(PAR.Day_10_Inventory_USR);
  PARAMETER(PAR.Day_11_Inventory_USR);
  PARAMETER(PAR.Day_12_Inventory_USR);
  PARAMETER(PAR.Day_13_Inventory_USR);
  PARAMETER(PAR.Day_14_Inventory_USR);
  PARAMETER(PAR.Lot_Tracking_Flag);

  EXECUTE FUNCTION(Rtv PA Production     RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1543287;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.Avail_Ship_Date_8_USR);
  PARAMETER(PAR.Avail_Ship_Date_9_USR);
  PARAMETER(PAR.Avail_Ship_Date_10_USR);
  PARAMETER(PAR.Avail_Ship_Date_11_USR);
  PARAMETER(PAR.Avail_Ship_Date_12_USR);
  PARAMETER(PAR.Avail_Ship_Date_13_USR);
  PARAMETER(PAR.Avail_Ship_Date_14_USR);
  PARAMETER(PAR.Avail_Ship_Date_15_USR);
  PARAMETER(PAR.Avail_Ship_Date_16_USR);
  PARAMETER(PAR.Avail_Ship_Date_17_USR);
  PARAMETER(PAR.Avail_Ship_Date_18_USR);
  PARAMETER(PAR.Avail_Ship_Date_19_USR);
  PARAMETER(PAR.Avail_Ship_Date_20_USR);
  PARAMETER(PAR.Avail_Ship_Date_21_USR);
  PARAMETER(PAR.USR_Day_1);
  PARAMETER(PAR.USR_Day_2);
  PARAMETER(PAR.USR_Day_3);
  PARAMETER(PAR.USR_Day_4);
  PARAMETER(PAR.USR_Day_5);
  PARAMETER(PAR.USR_Day_6);
  PARAMETER(PAR.USR_Day_7);
  PARAMETER(PAR.USR_Day_8);
  PARAMETER(PAR.USR_Day_9);
  PARAMETER(PAR.USR_Day_10);
  PARAMETER(PAR.USR_Day_11);
  PARAMETER(PAR.USR_Day_12);
  PARAMETER(PAR.USR_Day_13);
  PARAMETER(PAR.USR_Day_14);
  PARAMETER(PAR.USR_Day_15);
  PARAMETER(PAR.USR_Day_16);
  PARAMETER(PAR.USR_Day_17);
  PARAMETER(PAR.USR_Day_18);
  PARAMETER(PAR.USR_Day_19);
  PARAMETER(PAR.USR_Day_20);
  PARAMETER(PAR.USR_Day_21);
  PARAMETER(PAR.Day_1_Production_USR);
  PARAMETER(PAR.Day_2_Production_USR);
  PARAMETER(PAR.Day_3_Production_USR);
  PARAMETER(PAR.Day_4_Production_USR);
  PARAMETER(PAR.Day_5_Production_USR);
  PARAMETER(PAR.Day_6_Production_USR);
  PARAMETER(PAR.Day_7_Production_USR);
  PARAMETER(PAR.Day_8_Production_USR);
  PARAMETER(PAR.Day_9_Production_USR);
  PARAMETER(PAR.Day_10_Production_USR);
  PARAMETER(PAR.Day_11_Production_USR);
  PARAMETER(PAR.Day_12_Production_USR);
  PARAMETER(PAR.Day_13_Production_USR);
  PARAMETER(PAR.Day_14_Production_USR);
  PARAMETER(PAR.Day_15_Production_USR);
  PARAMETER(PAR.Day_16_Production_USR);
  PARAMETER(PAR.Day_17_Production_USR);
  PARAMETER(PAR.Day_18_Production_USR);
  PARAMETER(PAR.Day_19_Production_USR);
  PARAMETER(PAR.Day_20_Production_USR);
  PARAMETER(PAR.Day_21_Production_USR);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  {
   //?USER: Process Data record

   //?Is it time to Quit ??
   CASE;

   // IF DB1.PS Available Ship Date GT PAR.Avail Ship Date 21 USR
   IF DB1.PS_Available_Ship_Date > PAR.Avail_Ship_Date_21_USR;

   QUIT;

   ENDIF;

   CASE;

   // IF DB1.PA Available Ship Date GE JOB.*Job date
   IF DB1.PS_Available_Ship_Date >= JOB.*Job_date;

   //?Calculate Production based on Unit Weight or Pieces
   CASE;

   // IF PAR.Unit Weight is Greater than zero
   IF PAR.Unit_Weight > *ZERO;

   // OR PAR.Piece Count Item is yes
   OR PAR.Piece_Count_Item = 'Y';

   //?Retrieve production according to day
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_1_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.USR_Day_1);
   PARAMETER(PAR.Day_1_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 2 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_2_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.USR_Day_2);
   PARAMETER(PAR.Day_2_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 3 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_3_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.USR_Day_3);
   PARAMETER(PAR.Day_3_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 4 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_4_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.USR_Day_4);
   PARAMETER(PAR.Day_4_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 5 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_5_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.USR_Day_5);
   PARAMETER(PAR.Day_5_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 6 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_6_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.USR_Day_6);
   PARAMETER(PAR.Day_6_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 7 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_7_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.USR_Day_7);
   PARAMETER(PAR.Day_7_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 8 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_8_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.USR_Day_8);
   PARAMETER(PAR.Day_8_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 9 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_9_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.USR_Day_9);
   PARAMETER(PAR.Day_9_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 10 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_10_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.USR_Day_10);
   PARAMETER(PAR.Day_10_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 11 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_11_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.USR_Day_11);
   PARAMETER(PAR.Day_11_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 12 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_12_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.USR_Day_12);
   PARAMETER(PAR.Day_12_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 13 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_13_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.USR_Day_13);
   PARAMETER(PAR.Day_13_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 14 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_14_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.USR_Day_14);
   PARAMETER(PAR.Day_14_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 15 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_15_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.USR_Day_15);
   PARAMETER(PAR.Day_15_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 16 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_16_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.USR_Day_16);
   PARAMETER(PAR.Day_16_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 17 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_17_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.USR_Day_17);
   PARAMETER(PAR.Day_17_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 18 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_18_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.USR_Day_18);
   PARAMETER(PAR.Day_18_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 19 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_19_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.USR_Day_19);
   PARAMETER(PAR.Day_19_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 20 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_20_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.USR_Day_20);
   PARAMETER(PAR.Day_20_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 21 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_21_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.USR_Day_21);
   PARAMETER(PAR.Day_21_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   ENDIF;

   ENDIF;

   ENDIF;

  }

  //?Create array to be used for PA Calc when orders are processed.
  CASE;

  // IF WRK.BLANK EQ WRK.BLANK
  IF WRK.BLANK = WRK.BLANK;

  //?Clear PA Array
  EXECUTE FUNCTION(Del PA Work Array Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1543710;
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Del PA Work Array Roll DL) TYPE(DLTOBJ) ARRAY(PA_Work_Array_forAC1543711;
   PARAMETER(DB1.Avail_Ship_Date_USR);
  }

  // Day 1 Available
  PAR.Day_1_Availability_USR = ( ( PAR.Day_1_Inventory_USR + PAR.Day_1_Production_USR )
  - PAR.Day_1_Sched_Shipments_USR ) - PAR.Day_1_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.USR_Day_1);
  PARAMETER(PAR.Day_1_Inventory_USR);
  PARAMETER(PAR.Day_1_Production_USR);
  PARAMETER(PAR.Day_1_Sched_Shipments_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_1_Availability_USR);
  PARAMETER('N');
  // Day 2 Available
  PAR.Day_2_Availability_USR = ( ( PAR.Day_2_Inventory_USR + PAR.Day_2_Production_USR )
  - PAR.Day_2_Sched_Shipments_USR ) - PAR.Day_2_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.USR_Day_2);
  PARAMETER(PAR.Day_2_Inventory_USR);
  PARAMETER(PAR.Day_2_Production_USR);
  PARAMETER(PAR.Day_2_Sched_Shipments_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_2_Availability_USR);
  PARAMETER('N');
  // Day 3 Available
  PAR.Day_3_Availability_USR = ( ( PAR.Day_3_Inventory_USR + PAR.Day_3_Production_USR )
  - PAR.Day_3_Sched_Shipments_USR ) - PAR.Day_3_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.USR_Day_3);
  PARAMETER(PAR.Day_3_Inventory_USR);
  PARAMETER(PAR.Day_3_Production_USR);
  PARAMETER(PAR.Day_3_Sched_Shipments_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_3_Availability_USR);
  PARAMETER('N');
  // Day 4 Available
  PAR.Day_4_Availability_USR = ( ( PAR.Day_4_Inventory_USR + PAR.Day_4_Production_USR )
  - PAR.Day_4_Sched_Shipments_USR ) - PAR.Day_4_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.USR_Day_4);
  PARAMETER(PAR.Day_4_Inventory_USR);
  PARAMETER(PAR.Day_4_Production_USR);
  PARAMETER(PAR.Day_4_Sched_Shipments_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_4_Availability_USR);
  PARAMETER('N');
  // Day 5 Available
  PAR.Day_5_Availability_USR = ( ( PAR.Day_5_Inventory_USR + PAR.Day_5_Production_USR )
  - PAR.Day_5_Sched_Shipments_USR ) - PAR.Day_5_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.USR_Day_5);
  PARAMETER(PAR.Day_5_Inventory_USR);
  PARAMETER(PAR.Day_5_Production_USR);
  PARAMETER(PAR.Day_5_Sched_Shipments_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Day_5_Availability_USR);
  PARAMETER('N');
  // Day 6 Available
  PAR.Day_6_Availability_USR = ( ( PAR.Day_6_Inventory_USR + PAR.Day_6_Production_USR )
  - PAR.Day_6_Sched_Shipments_USR ) - PAR.Day_6_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.USR_Day_6);
  PARAMETER(PAR.Day_6_Inventory_USR);
  PARAMETER(PAR.Day_6_Production_USR);
  PARAMETER(PAR.Day_6_Sched_Shipments_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_6_Availability_USR);
  PARAMETER('N');
  // Day 7 Available
  PAR.Day_7_Availability_USR = ( ( PAR.Day_7_Inventory_USR + PAR.Day_7_Production_USR )
  - PAR.Day_7_Sched_Shipments_USR ) - PAR.Day_7_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.USR_Day_7);
  PARAMETER(PAR.Day_7_Inventory_USR);
  PARAMETER(PAR.Day_7_Production_USR);
  PARAMETER(PAR.Day_7_Sched_Shipments_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_7_Availability_USR);
  PARAMETER('N');
  // Day 8 Available
  PAR.Day_8_Availability_USR = ( PAR.Day_8_Production_USR - PAR.Day_8_Sched_Shipments_USR )
  - PAR.Day_8_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_8_USR);
  PARAMETER(PAR.USR_Day_8);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_8_Production_USR);
  PARAMETER(PAR.Day_8_Sched_Shipments_USR);
  PARAMETER(PAR.Day_8_Sales_USR);
  PARAMETER(PAR.Day_8_Availability_USR);
  PARAMETER('N');
  // Day 9 Available
  PAR.Day_9_Availability_USR = ( PAR.Day_9_Production_USR - PAR.Day_9_Sched_Shipments_USR )
  - PAR.Day_9_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_9_USR);
  PARAMETER(PAR.USR_Day_9);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_9_Production_USR);
  PARAMETER(PAR.Day_9_Sched_Shipments_USR);
  PARAMETER(PAR.Day_9_Sales_USR);
  PARAMETER(PAR.Day_9_Availability_USR);
  PARAMETER('N');
  // Day 10 Available
  PAR.Day_10_Availability_USR = ( PAR.Day_10_Production_USR
  - PAR.Day_10_Sched_Shipment_USR ) - PAR.Day_10_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_10_USR);
  PARAMETER(PAR.USR_Day_10);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_10_Production_USR);
  PARAMETER(PAR.Day_10_Sched_Shipment_USR);
  PARAMETER(PAR.Day_10_Sales_USR);
  PARAMETER(PAR.Day_10_Availability_USR);
  PARAMETER('N');
  // Day 11 Available
  PAR.Day_11_Availability_USR = ( PAR.Day_11_Production_USR
  - PAR.Day_11_Sched_Shipment_USR ) - PAR.Day_11_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_11_USR);
  PARAMETER(PAR.USR_Day_11);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_11_Production_USR);
  PARAMETER(PAR.Day_11_Sched_Shipment_USR);
  PARAMETER(PAR.Day_11_Sales_USR);
  PARAMETER(PAR.Day_11_Availability_USR);
  PARAMETER('N');
  // Day 12 Available
  PAR.Day_12_Availability_USR = ( PAR.Day_12_Production_USR
  - PAR.Day_12_Sched_Shipment_USR ) - PAR.Day_12_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_12_USR);
  PARAMETER(PAR.USR_Day_12);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_12_Production_USR);
  PARAMETER(PAR.Day_12_Sched_Shipment_USR);
  PARAMETER(PAR.Day_12_Sales_USR);
  PARAMETER(PAR.Day_12_Availability_USR);
  PARAMETER('N');
  // Day 13 Available
  PAR.Day_13_Availability_USR = ( PAR.Day_13_Production_USR
  - PAR.Day_13_Sched_Shipment_USR ) - PAR.Day_13_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_13_USR);
  PARAMETER(PAR.USR_Day_13);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_13_Production_USR);
  PARAMETER(PAR.Day_13_Sched_Shipment_USR);
  PARAMETER(PAR.Day_13_Sales_USR);
  PARAMETER(PAR.Day_13_Availability_USR);
  PARAMETER('N');
  // Day 14 Available
  PAR.Day_14_Availability_USR = ( PAR.Day_14_Production_USR
  - PAR.Day_14_Sched_Shipment_USR ) - PAR.Day_14_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_14_USR);
  PARAMETER(PAR.USR_Day_14);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_14_Production_USR);
  PARAMETER(PAR.Day_14_Sched_Shipment_USR);
  PARAMETER(PAR.Day_14_Sales_USR);
  PARAMETER(PAR.Day_14_Availability_USR);
  PARAMETER('N');
  // Day 15 Available
  PAR.Day_15_Availability_USR = ( PAR.Day_15_Production_USR
  - PAR.Day_15_Sched_Shipment_USR ) - PAR.Day_15_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_15_USR);
  PARAMETER(PAR.USR_Day_15);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_15_Production_USR);
  PARAMETER(PAR.Day_15_Sched_Shipment_USR);
  PARAMETER(PAR.Day_15_Sales_USR);
  PARAMETER(PAR.Day_15_Availability_USR);
  PARAMETER('N');
  // Day 16 Available
  PAR.Day_16_Availability_USR = ( PAR.Day_16_Production_USR
  - PAR.Day_16_Sched_Shipment_USR ) - PAR.Day_16_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_16_USR);
  PARAMETER(PAR.USR_Day_16);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_16_Production_USR);
  PARAMETER(PAR.Day_16_Sched_Shipment_USR);
  PARAMETER(PAR.Day_16_Sales_USR);
  PARAMETER(PAR.Day_16_Availability_USR);
  PARAMETER('N');
  // Day 17 Available
  PAR.Day_17_Availability_USR = ( PAR.Day_17_Production_USR
  - PAR.Day_17_Sched_Shipment_USR ) - PAR.Day_17_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_17_USR);
  PARAMETER(PAR.USR_Day_17);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_17_Production_USR);
  PARAMETER(PAR.Day_17_Sched_Shipment_USR);
  PARAMETER(PAR.Day_17_Sales_USR);
  PARAMETER(PAR.Day_17_Availability_USR);
  PARAMETER('N');
  // Day 18 Available
  PAR.Day_18_Availability_USR = ( PAR.Day_18_Production_USR
  - PAR.Day_18_Sched_Shipment_USR ) - PAR.Day_18_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_18_USR);
  PARAMETER(PAR.USR_Day_18);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_18_Production_USR);
  PARAMETER(PAR.Day_18_Sched_Shipment_USR);
  PARAMETER(PAR.Day_18_Sales_USR);
  PARAMETER(PAR.Day_18_Availability_USR);
  PARAMETER('N');
  // Day 19 Available
  PAR.Day_19_Availability_USR = ( PAR.Day_19_Production_USR
  - PAR.Day_19_Sched_Shipment_USR ) - PAR.Day_19_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_19_USR);
  PARAMETER(PAR.USR_Day_19);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_19_Production_USR);
  PARAMETER(PAR.Day_19_Sched_Shipment_USR);
  PARAMETER(PAR.Day_19_Sales_USR);
  PARAMETER(PAR.Day_19_Availability_USR);
  PARAMETER('N');
  // Day 20 Available
  PAR.Day_20_Availability_USR = ( PAR.Day_20_Production_USR
  - PAR.Day_20_Sched_Shipment_USR ) - PAR.Day_20_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_20_USR);
  PARAMETER(PAR.USR_Day_20);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_20_Production_USR);
  PARAMETER(PAR.Day_20_Sched_Shipment_USR);
  PARAMETER(PAR.Day_20_Sales_USR);
  PARAMETER(PAR.Day_20_Availability_USR);
  PARAMETER('N');
  // Day 21 Available
  PAR.Day_21_Availability_USR = ( PAR.Day_21_Production_USR
  - PAR.Day_21_Sched_Shipment_USR ) - PAR.Day_21_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_21_USR);
  PARAMETER(PAR.USR_Day_21);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_21_Production_USR);
  PARAMETER(PAR.Day_21_Sched_Shipment_USR);
  PARAMETER(PAR.Day_21_Sales_USR);
  PARAMETER(PAR.Day_21_Availability_USR);
  PARAMETER('N');
  ENDIF;

  EXECUTE FUNCTION(Rtv Sched Ship/Clc PA RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1543296;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.Avail_Ship_Date_21_USR);
  PARAMETER(PAR.Production_Warehouse_Code);
  PARAMETER(PAR.Lot_Tracking_Flag);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(PAR.Header_Status);
   PARAMETER(LCL.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF PAR.Header Status is Not Comp/Canc/Conf
   IF PAR.Header_Status = 'L'/'A'/'E'/'H';

   // AND PAR.Order Number NE DB1.Order Number
   AND PAR.Order_Number <> DB1.Order_Number;

   // AND LCL.Billing Activity Type is Invoice or Transfer
   AND LCL.Billing_Activity_Type = '1'/'4';

   //?Is it time to Quit ??
   CASE;

   // IF DB1.Scheduled Ship Date GT PAR.Avail Ship Date 21 USR
   IF DB1.Scheduled_Ship_Date > PAR.Avail_Ship_Date_21_USR;

   QUIT;

   ENDIF;

   //?Retrieve Week End date for *JOB DATE
   //?Determine production type
   CASE;

   // IF DB1.Scheduled Ship Date EQ JOB.*Job date
   IF DB1.Scheduled_Ship_Date = JOB.*Job_date;

   // PAR.Production Type = CND.Schedule
   PAR.Production_Type = 'S';

   //?Determine production type
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Production Type = CND.Plan
   PAR.Production_Type = 'P';

   ENDIF;

   EXECUTE FUNCTION(Rtv Production Date   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1583635;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Type);
   PARAMETER(LCL.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Scheduled_Ship_Date);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   EXECUTE FUNCTION(RTV Day/Wk/Prd/Yr     RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369048;
   PARAMETER(PAR.Company_Number);
   PARAMETER(JOB.*Job_date);
   PARAMETER(WRK.Julian_Date);
   PARAMETER(PAR.Accounting_Year_Code);
   PARAMETER(PAR.Accounting_Period_Code);
   PARAMETER(WRK.OM_Week);
   PARAMETER(WRK.Day_of_Week);
   PARAMETER(PAR.Week_Number);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   EXECUTE FUNCTION(RTV Bgn/End Dts Prd/Yr RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1470471;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Week_End_Date_USR);
   PARAMETER(PAR.Accounting_Year_Code);
   PARAMETER(PAR.Accounting_Period_Code);
   PARAMETER(7);
   PARAMETER(PAR.Week_Number);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?DOC: 04/11/07 Change Log
   DO;

   //?04/10/07 Effective 04/23/07 representation of Age Code changes
   //?         will be such that Age Code A will be 0 day for boxes
   //?         and combos.  The labels on the cartons will not print
   //?         a date that is offset by Sunday or Holiday.  Instead of
   //?         Code Date, it will be the Pack Date.
   ENDDO;

   //?Set age code to specific day by number
   CASE;

   // IF DB1.Age Code is A: 0 Day
   IF DB1.Age_Code = 'A';

   // PAR.Aging Day = CON.*ZERO
   PAR.Aging_Day = 0;

   //?Set age code to specific day by number
   // IF DB1.Age Code is B: 1 Day
   IF DB1.Age_Code = 'B';

   // PAR.Aging Day = CON.1
   PAR.Aging_Day = 1;

   //?Set age code to specific day by number
   // IF DB1.Age Code is C: 2 Day
   IF DB1.Age_Code = 'C';

   // PAR.Aging Day = CON.2
   PAR.Aging_Day = 2;

   //?Set age code to specific day by number
   // IF DB1.Age Code is D: 3 Day
   IF DB1.Age_Code = 'D';

   // PAR.Aging Day = CON.3
   PAR.Aging_Day = 3;

   //?Set age code to specific day by number
   // IF DB1.Age Code is E: 4 Day
   IF DB1.Age_Code = 'E';

   // PAR.Aging Day = CON.4
   PAR.Aging_Day = 4;

   //?Set age code to specific day by number
   // IF DB1.Age Code is F: 5 Day
   IF DB1.Age_Code = 'F';

   // PAR.Aging Day = CON.5
   PAR.Aging_Day = 5;

   //?Set age code to specific day by number
   // IF DB1.Age Code is G: 6 Day
   IF DB1.Age_Code = 'G';

   // PAR.Aging Day = CON.6
   PAR.Aging_Day = 6;

   //?Set age code to specific day by number
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Aging Day = CON.999
   PAR.Aging_Day = 999;

   ENDIF;

   //?If warehouse is not a production whse, rtv sched qty from prod whse
   CASE;

   // IF DB1.Warehouse Code NE PAR.Production Warehouse Code
   IF DB1.Warehouse_Code <> PAR.Production_Warehouse_Code;

   EXECUTE FUNCTION(Rtv Qty for Prod Whse  RT) TYPE(RTVOBJ) FILE(PDKNCPP)          AC1560628;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
   {
    //?USER: Initialize routine

    // PAR.OD Quantity Scheduled = CON.*ZERO
    PAR.OD_Qty_Cnsmd_Pieces_Sched = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF DB1.Warehouse Code NE DB1.Order From Warehouse
    IF DB1.Warehouse_Code <> DB1.Order_From_Warehouse;

    // PAR.OD Quantity Scheduled = PAR.OD Quantity Scheduled + DB1.OD Quantity Schedule
    PAR.OD_Qty_Cnsmd_Pieces_Sched = PAR.OD_Qty_Cnsmd_Pieces_Sched
    + DB1.OD_Qty_Cnsmd_Pieces_Sched;

    ENDIF;

   }

   // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled - PAR.Qty Not Alloc on Ship D
   PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled - PAR.Qty_Not_Alloc_on_Ship_Dt;

   //?If warehouse is not a production whse, rtv sched qty from prod whse
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Qty Not Alloc on Ship Dt = CON.*ZERO
   PAR.Qty_Not_Alloc_on_Ship_Dt = *ZERO;

   // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled
   PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled;

   ENDIF;

   EXECUTE FUNCTION(Clc Alloc Inv for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_RAC1543462;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Aging_Day);
   PARAMETER(PAR.Week_End_Date_USR);
   PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
   PARAMETER(PAR.ATS_Quantity_Need_USR);
   PARAMETER(DB1.Quantity_Scheduled);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Lot_Tracking_Flag);
   PARAMETER(LCL.Production_Date);
   PARAMETER(LCL.Order_Scheduled_Today_USR);
   {
    //?USER: Initialize routine

    // PAR.First Time Flag = CND.Yes
    PAR.First_Time_Flag = 'Y';

    // PAR.Order Scheduled Today USR = CND.no
    PAR.Order_Scheduled_Today_USR = 'N';

    // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
    PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

    //?USER: Process Data record

    // PAR.Quantity Allocated USR = CON.*ZERO
    PAR.Quantity_Allocated_USR = *ZERO;

    //?If age day is zero or order has been allocated, then QUIT
    CASE;

    // IF PAR.Aging Day is equal to zero
    IF PAR.Aging_Day = *ZERO;

    // OR PAR.Quantity Sched 1 USR is LE Zero
    OR PAR.Quantity_Sched_1_USR <= *ZERO;

    // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
    PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

    CASE;

    // IF PAR.First Time Flag is Yes
    IF PAR.First_Time_Flag = 'Y';

    //?If ord ship is this day, updt Sched Ship/Avail
    CASE;

    // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
    IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

    // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
    PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
    - DB1.Quantity_Sales_USR;

    EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Sched_Shipments_USR);
    PARAMETER(PAR.Total_Availability_USR);
    // PAR.First Time Flag = CND.NO
    PAR.First_Time_Flag = 'N';

    // PAR.Order Scheduled Today USR = CND.yes
    PAR.Order_Scheduled_Today_USR = 'Y';

    ENDIF;

    ENDIF;

    QUIT;

    ENDIF;

    //?Calc new avail with inv if current week, else calc with no inv
    CASE;

    // IF PAR.Production Date LE PAR.Week End Date        USR
    IF PAR.Production_Date <= PAR.Week_End_Date_USR;

    // OR PAR.Lot Tracking Flag is yes
    OR PAR.Lot_Tracking_Flag = 'Y';

    // Avail with inventory
    PAR.Quantity_Available_SUM = ( DB1.Quantity_Inventory_USR - DB1.Quantity_Sched_Ship_USR )
    - DB1.Quantity_Sales_USR;

    //?Calc new avail with inv if current week, else calc with no inv
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Quantity Available    SUM = CON.*ZERO
    PAR.Quantity_Available_SUM = *ZERO;

    ENDIF;

    //?Allocate Order
    CASE;

    // IF PAR.Quantity Available    SUM is GT Zero
    IF PAR.Quantity_Available_SUM > *ZERO;

    CASE;

    // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
    IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

    // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
    PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

    // PAR.Quantity Sched 1 USR = CON.*ZERO
    PAR.Quantity_Sched_1_USR = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
    PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

    // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
    PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

    ENDIF;

    //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
    CASE;

    // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
    IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

    // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR
    PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR;

    // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
    PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
    - PAR.Total_Quantity_Alloc_USR;

    EXECUTE FUNCTION(Chg SchdShp/Allc/Avail CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1543494;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Sched_Shipments_USR);
    PARAMETER(PAR.Total_Quantity_Alloc_USR);
    PARAMETER(PAR.Total_Availability_USR);
    PARAMETER(DB1.Reserved_for_Other_Whse);
    // PAR.Order Scheduled Today USR = CND.yes
    PAR.Order_Scheduled_Today_USR = 'Y';

    //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
    PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
    - PAR.Total_Quantity_Alloc_USR;

    EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Quantity_Alloc_USR);
    PARAMETER(PAR.Total_Availability_USR);
    // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
    PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

    ENDIF;

    ENDIF;

    // PAR.Aging Day = PAR.Aging Day - CON.1
    PAR.Aging_Day = PAR.Aging_Day - 1;

    // PAR.First Time Flag = CND.NO
    PAR.First_Time_Flag = 'N';

    //?USER: Exit processing

    // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
    PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

   }

   //?If order was not scheduled, then schedule
   CASE;

   // IF LCL.Order Scheduled Today USR is no
   IF LCL.Order_Scheduled_Today_USR = 'N';

   EXECUTE FUNCTION(Rtv Change Sched Ship  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1584958;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(DB1.Quantity_Scheduled);
   {
    //?USER: Process Data record

    // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched 1 USR
    PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Sched_1_USR;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
    - DB1.Quantity_Sales_USR;

    EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Sched_Shipments_USR);
    PARAMETER(PAR.Total_Availability_USR);
   }

   ENDIF;

   //?DOC: 04/11/07 Change Log
   DO;

   //?04/10/07 Effective 04/23/07 representation of Age Code changes
   //?         will be such that Age Code A will be 0 day for boxes
   //?         and combos.  The labels on the cartons will not print
   //?         a date that is offset by Sunday or Holiday.  Instead of
   //?         Code Date, it will be the Pack Date.
   ENDDO;

   //?Set age code to specific day by number
   CASE;

   // IF DB1.Age Code is A: 0 Day
   IF DB1.Age_Code = 'A';

   // PAR.Aging Day = CON.*ZERO
   PAR.Aging_Day = 0;

   //?Set age code to specific day by number
   // IF DB1.Age Code is B: 1 Day
   IF DB1.Age_Code = 'B';

   // PAR.Aging Day = CON.1
   PAR.Aging_Day = 1;

   //?Set age code to specific day by number
   // IF DB1.Age Code is C: 2 Day
   IF DB1.Age_Code = 'C';

   // PAR.Aging Day = CON.2
   PAR.Aging_Day = 2;

   //?Set age code to specific day by number
   // IF DB1.Age Code is D: 3 Day
   IF DB1.Age_Code = 'D';

   // PAR.Aging Day = CON.3
   PAR.Aging_Day = 3;

   //?Set age code to specific day by number
   // IF DB1.Age Code is E: 4 Day
   IF DB1.Age_Code = 'E';

   // PAR.Aging Day = CON.4
   PAR.Aging_Day = 4;

   //?Set age code to specific day by number
   // IF DB1.Age Code is F: 5 Day
   IF DB1.Age_Code = 'F';

   // PAR.Aging Day = CON.5
   PAR.Aging_Day = 5;

   //?Set age code to specific day by number
   // IF DB1.Age Code is G: 6 Day
   IF DB1.Age_Code = 'G';

   // PAR.Aging Day = CON.6
   PAR.Aging_Day = 6;

   //?Set age code to specific day by number
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Aging Day = CON.999
   PAR.Aging_Day = 999;

   ENDIF;

   EXECUTE FUNCTION(Clc Alloc Prod for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1583300;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Aging_Day);
   PARAMETER(PAR.Week_End_Date_USR);
   PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
   PARAMETER(PAR.ATS_Quantity_Need_USR);
   PARAMETER(DB1.Quantity_Scheduled);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Lot_Tracking_Flag);
   {
    //?USER: Initialize routine

    // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
    PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

    //?USER: Process Data record

    // PAR.Quantity Allocated USR = CON.*ZERO
    PAR.Quantity_Allocated_USR = *ZERO;

    //?If age day is zero or order has been allocated, then QUIT
    CASE;

    // IF PAR.Aging Day is equal to zero
    IF PAR.Aging_Day = *ZERO;

    // OR PAR.Quantity Sched 1 USR is LE Zero
    OR PAR.Quantity_Sched_1_USR <= *ZERO;

    QUIT;

    ENDIF;

    // Avail with no inventory
    PAR.Quantity_Available_SUM = ( DB1.Quantity_Production_USR - DB1.Quantity_Sched_Ship_USR )
    - DB1.Quantity_Sales_USR;

    //?Allocate Order
    CASE;

    // IF PAR.Quantity Available    SUM is GT Zero
    IF PAR.Quantity_Available_SUM > *ZERO;

    CASE;

    // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
    IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

    // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
    PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

    // PAR.Quantity Sched 1 USR = CON.*ZERO
    PAR.Quantity_Sched_1_USR = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
    PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

    // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
    PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

    ENDIF;

    //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
    CASE;

    // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
    IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

    //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
    PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
    - PAR.Total_Quantity_Alloc_USR;

    EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Quantity_Alloc_USR);
    PARAMETER(PAR.Total_Availability_USR);
    PARAMETER(DB1.Reserved_for_Other_Whse);
    // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
    PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

    ENDIF;

    ENDIF;

    // PAR.Aging Day = PAR.Aging Day - CON.1
    PAR.Aging_Day = PAR.Aging_Day - 1;

    // PAR.First Time Flag = CND.NO
    PAR.First_Time_Flag = 'N';

   }

   //?Change allocation for schedule shipments not scheduled on ship date
   CASE;

   // IF PAR.Qty Not Alloc on Ship Dt is Greater than zero
   IF PAR.Qty_Not_Alloc_on_Ship_Dt > *ZERO;

   EXECUTE FUNCTION(Rtv Change Allocation  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1543505;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
   {
    //?USER: Process Data record

    // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR - PAR.Qty Not Alloc on Shi
    PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR - PAR.Qty_Not_Alloc_on_Ship_Dt;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
    - PAR.Total_Quantity_Alloc_USR;

    EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Quantity_Alloc_USR);
    PARAMETER(PAR.Total_Availability_USR);
    PARAMETER(DB1.Reserved_for_Other_Whse);
   }

   ENDIF;

   ENDIF;

   //?USER: Exit processing

   //?Retrieve Week End date for *JOB DATE
   //?Determine production type
   CASE;

   // IF DB1.Scheduled Ship Date EQ JOB.*Job date
   IF DB1.Scheduled_Ship_Date = JOB.*Job_date;

   // PAR.Production Type = CND.Schedule
   PAR.Production_Type = 'S';

   //?Determine production type
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Production Type = CND.Plan
   PAR.Production_Type = 'P';

   ENDIF;

   EXECUTE FUNCTION(Rtv Production Date   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1583635;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Type);
   PARAMETER(LCL.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Scheduled_Ship_Date);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   EXECUTE FUNCTION(RTV Day/Wk/Prd/Yr     RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369048;
   PARAMETER(PAR.Company_Number);
   PARAMETER(JOB.*Job_date);
   PARAMETER(WRK.Julian_Date);
   PARAMETER(PAR.Accounting_Year_Code);
   PARAMETER(PAR.Accounting_Period_Code);
   PARAMETER(WRK.OM_Week);
   PARAMETER(WRK.Day_of_Week);
   PARAMETER(PAR.Week_Number);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   EXECUTE FUNCTION(RTV Bgn/End Dts Prd/Yr RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1470471;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Week_End_Date_USR);
   PARAMETER(PAR.Accounting_Year_Code);
   PARAMETER(PAR.Accounting_Period_Code);
   PARAMETER(7);
   PARAMETER(PAR.Week_Number);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?DOC: 04/11/07 Change Log
   DO;

   //?04/10/07 Effective 04/23/07 representation of Age Code changes
   //?         will be such that Age Code A will be 0 day for boxes
   //?         and combos.  The labels on the cartons will not print
   //?         a date that is offset by Sunday or Holiday.  Instead of
   //?         Code Date, it will be the Pack Date.
   ENDDO;

   //?Set age code to specific day by number
   CASE;

   // IF DB1.Age Code is A: 0 Day
   IF DB1.Age_Code = 'A';

   // PAR.Aging Day = CON.*ZERO
   PAR.Aging_Day = 0;

   //?Set age code to specific day by number
   // IF DB1.Age Code is B: 1 Day
   IF DB1.Age_Code = 'B';

   // PAR.Aging Day = CON.1
   PAR.Aging_Day = 1;

   //?Set age code to specific day by number
   // IF DB1.Age Code is C: 2 Day
   IF DB1.Age_Code = 'C';

   // PAR.Aging Day = CON.2
   PAR.Aging_Day = 2;

   //?Set age code to specific day by number
   // IF DB1.Age Code is D: 3 Day
   IF DB1.Age_Code = 'D';

   // PAR.Aging Day = CON.3
   PAR.Aging_Day = 3;

   //?Set age code to specific day by number
   // IF DB1.Age Code is E: 4 Day
   IF DB1.Age_Code = 'E';

   // PAR.Aging Day = CON.4
   PAR.Aging_Day = 4;

   //?Set age code to specific day by number
   // IF DB1.Age Code is F: 5 Day
   IF DB1.Age_Code = 'F';

   // PAR.Aging Day = CON.5
   PAR.Aging_Day = 5;

   //?Set age code to specific day by number
   // IF DB1.Age Code is G: 6 Day
   IF DB1.Age_Code = 'G';

   // PAR.Aging Day = CON.6
   PAR.Aging_Day = 6;

   //?Set age code to specific day by number
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Aging Day = CON.999
   PAR.Aging_Day = 999;

   ENDIF;

   //?If warehouse is not a production whse, rtv sched qty from prod whse
   CASE;

   // IF DB1.Warehouse Code NE PAR.Production Warehouse Code
   IF DB1.Warehouse_Code <> PAR.Production_Warehouse_Code;

   EXECUTE FUNCTION(Rtv Qty for Prod Whse  RT) TYPE(RTVOBJ) FILE(PDKNCPP)          AC1560628;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
   {
    //?USER: Initialize routine

    // PAR.OD Quantity Scheduled = CON.*ZERO
    PAR.OD_Qty_Cnsmd_Pieces_Sched = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF DB1.Warehouse Code NE DB1.Order From Warehouse
    IF DB1.Warehouse_Code <> DB1.Order_From_Warehouse;

    // PAR.OD Quantity Scheduled = PAR.OD Quantity Scheduled + DB1.OD Quantity Schedule
    PAR.OD_Qty_Cnsmd_Pieces_Sched = PAR.OD_Qty_Cnsmd_Pieces_Sched
    + DB1.OD_Qty_Cnsmd_Pieces_Sched;

    ENDIF;

   }

   // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled - PAR.Qty Not Alloc on Ship Dt
   PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled - PAR.Qty_Not_Alloc_on_Ship_Dt;

   //?If warehouse is not a production whse, rtv sched qty from prod whse
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Qty Not Alloc on Ship Dt = CON.*ZERO
   PAR.Qty_Not_Alloc_on_Ship_Dt = *ZERO;

   // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled
   PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled;

   ENDIF;

   EXECUTE FUNCTION(Clc Alloc Inv for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_RAC1543462;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Aging_Day);
   PARAMETER(PAR.Week_End_Date_USR);
   PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
   PARAMETER(PAR.ATS_Quantity_Need_USR);
   PARAMETER(DB1.Quantity_Scheduled);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Lot_Tracking_Flag);
   PARAMETER(LCL.Production_Date);
   PARAMETER(LCL.Order_Scheduled_Today_USR);
   {
    //?USER: Initialize routine

    // PAR.First Time Flag = CND.Yes
    PAR.First_Time_Flag = 'Y';

    // PAR.Order Scheduled Today USR = CND.no
    PAR.Order_Scheduled_Today_USR = 'N';

    // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
    PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

    //?USER: Process Data record

    // PAR.Quantity Allocated USR = CON.*ZERO
    PAR.Quantity_Allocated_USR = *ZERO;

    //?If age day is zero or order has been allocated, then QUIT
    CASE;

    // IF PAR.Aging Day is equal to zero
    IF PAR.Aging_Day = *ZERO;

    // OR PAR.Quantity Sched 1 USR is LE Zero
    OR PAR.Quantity_Sched_1_USR <= *ZERO;

    // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
    PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

    CASE;

    // IF PAR.First Time Flag is Yes
    IF PAR.First_Time_Flag = 'Y';

    //?If ord ship is this day, updt Sched Ship/Avail
    CASE;

    // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
    IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

    // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
    PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
    - DB1.Quantity_Sales_USR;

    EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Sched_Shipments_USR);
    PARAMETER(PAR.Total_Availability_USR);
    // PAR.First Time Flag = CND.NO
    PAR.First_Time_Flag = 'N';

    // PAR.Order Scheduled Today USR = CND.yes
    PAR.Order_Scheduled_Today_USR = 'Y';

    ENDIF;

    ENDIF;

    QUIT;

    ENDIF;

    //?Calc new avail with inv if current week, else calc with no inv
    CASE;

    // IF PAR.Production Date LE PAR.Week End Date        USR
    IF PAR.Production_Date <= PAR.Week_End_Date_USR;

    // OR PAR.Lot Tracking Flag is yes
    OR PAR.Lot_Tracking_Flag = 'Y';

    // Avail with inventory
    PAR.Quantity_Available_SUM = ( DB1.Quantity_Inventory_USR - DB1.Quantity_Sched_Ship_USR )
    - DB1.Quantity_Sales_USR;

    //?Calc new avail with inv if current week, else calc with no inv
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Quantity Available    SUM = CON.*ZERO
    PAR.Quantity_Available_SUM = *ZERO;

    ENDIF;

    //?Allocate Order
    CASE;

    // IF PAR.Quantity Available    SUM is GT Zero
    IF PAR.Quantity_Available_SUM > *ZERO;

    CASE;

    // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
    IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

    // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
    PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

    // PAR.Quantity Sched 1 USR = CON.*ZERO
    PAR.Quantity_Sched_1_USR = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
    PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

    // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
    PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

    ENDIF;

    //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
    CASE;

    // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
    IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

    // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR
    PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR;

    // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
    PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
    - PAR.Total_Quantity_Alloc_USR;

    EXECUTE FUNCTION(Chg SchdShp/Allc/Avail CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1543494;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Sched_Shipments_USR);
    PARAMETER(PAR.Total_Quantity_Alloc_USR);
    PARAMETER(PAR.Total_Availability_USR);
    PARAMETER(DB1.Reserved_for_Other_Whse);
    // PAR.Order Scheduled Today USR = CND.yes
    PAR.Order_Scheduled_Today_USR = 'Y';

    //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
    PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
    - PAR.Total_Quantity_Alloc_USR;

    EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Quantity_Alloc_USR);
    PARAMETER(PAR.Total_Availability_USR);
    // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
    PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

    ENDIF;

    ENDIF;

    // PAR.Aging Day = PAR.Aging Day - CON.1
    PAR.Aging_Day = PAR.Aging_Day - 1;

    // PAR.First Time Flag = CND.NO
    PAR.First_Time_Flag = 'N';

    //?USER: Exit processing

    // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
    PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

   }

   //?If order was not scheduled, then schedule
   CASE;

   // IF LCL.Order Scheduled Today USR is no
   IF LCL.Order_Scheduled_Today_USR = 'N';

   EXECUTE FUNCTION(Rtv Change Sched Ship  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1584958;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(DB1.Quantity_Scheduled);
   {
    //?USER: Process Data record

    // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched 1 USR
    PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Sched_1_USR;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
    - DB1.Quantity_Sales_USR;

    EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Sched_Shipments_USR);
    PARAMETER(PAR.Total_Availability_USR);
   }

   ENDIF;

   //?DOC: 04/11/07 Change Log
   DO;

   //?04/10/07 Effective 04/23/07 representation of Age Code changes
   //?         will be such that Age Code A will be 0 day for boxes
   //?         and combos.  The labels on the cartons will not print
   //?         a date that is offset by Sunday or Holiday.  Instead of
   //?         Code Date, it will be the Pack Date.
   ENDDO;

   //?Set age code to specific day by number
   CASE;

   // IF DB1.Age Code is A: 0 Day
   IF DB1.Age_Code = 'A';

   // PAR.Aging Day = CON.*ZERO
   PAR.Aging_Day = 0;

   //?Set age code to specific day by number
   // IF DB1.Age Code is B: 1 Day
   IF DB1.Age_Code = 'B';

   // PAR.Aging Day = CON.1
   PAR.Aging_Day = 1;

   //?Set age code to specific day by number
   // IF DB1.Age Code is C: 2 Day
   IF DB1.Age_Code = 'C';

   // PAR.Aging Day = CON.2
   PAR.Aging_Day = 2;

   //?Set age code to specific day by number
   // IF DB1.Age Code is D: 3 Day
   IF DB1.Age_Code = 'D';

   // PAR.Aging Day = CON.3
   PAR.Aging_Day = 3;

   //?Set age code to specific day by number
   // IF DB1.Age Code is E: 4 Day
   IF DB1.Age_Code = 'E';

   // PAR.Aging Day = CON.4
   PAR.Aging_Day = 4;

   //?Set age code to specific day by number
   // IF DB1.Age Code is F: 5 Day
   IF DB1.Age_Code = 'F';

   // PAR.Aging Day = CON.5
   PAR.Aging_Day = 5;

   //?Set age code to specific day by number
   // IF DB1.Age Code is G: 6 Day
   IF DB1.Age_Code = 'G';

   // PAR.Aging Day = CON.6
   PAR.Aging_Day = 6;

   //?Set age code to specific day by number
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Aging Day = CON.999
   PAR.Aging_Day = 999;

   ENDIF;

   EXECUTE FUNCTION(Clc Alloc Prod for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1583300;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Aging_Day);
   PARAMETER(PAR.Week_End_Date_USR);
   PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
   PARAMETER(PAR.ATS_Quantity_Need_USR);
   PARAMETER(DB1.Quantity_Scheduled);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Lot_Tracking_Flag);
   {
    //?USER: Initialize routine

    // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
    PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

    //?USER: Process Data record

    // PAR.Quantity Allocated USR = CON.*ZERO
    PAR.Quantity_Allocated_USR = *ZERO;

    //?If age day is zero or order has been allocated, then QUIT
    CASE;

    // IF PAR.Aging Day is equal to zero
    IF PAR.Aging_Day = *ZERO;

    // OR PAR.Quantity Sched 1 USR is LE Zero
    OR PAR.Quantity_Sched_1_USR <= *ZERO;

    QUIT;

    ENDIF;

    // Avail with no inventory
    PAR.Quantity_Available_SUM = ( DB1.Quantity_Production_USR - DB1.Quantity_Sched_Ship_USR )
    - DB1.Quantity_Sales_USR;

    //?Allocate Order
    CASE;

    // IF PAR.Quantity Available    SUM is GT Zero
    IF PAR.Quantity_Available_SUM > *ZERO;

    CASE;

    // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
    IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

    // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
    PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

    // PAR.Quantity Sched 1 USR = CON.*ZERO
    PAR.Quantity_Sched_1_USR = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
    PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

    // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
    PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

    ENDIF;

    //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
    CASE;

    // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
    IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

    //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
    PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
    - PAR.Total_Quantity_Alloc_USR;

    EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Quantity_Alloc_USR);
    PARAMETER(PAR.Total_Availability_USR);
    PARAMETER(DB1.Reserved_for_Other_Whse);
    // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
    PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

    ENDIF;

    ENDIF;

    // PAR.Aging Day = PAR.Aging Day - CON.1
    PAR.Aging_Day = PAR.Aging_Day - 1;

    // PAR.First Time Flag = CND.NO
    PAR.First_Time_Flag = 'N';

   }

   //?Change allocation for schedule shipments not scheduled on ship date
   CASE;

   // IF PAR.Qty Not Alloc on Ship Dt is Greater than zero
   IF PAR.Qty_Not_Alloc_on_Ship_Dt > *ZERO;

   EXECUTE FUNCTION(Rtv Change Allocation  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1543505;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
   {
    //?USER: Process Data record

    // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR - PAR.Qty Not Alloc on Shi
    PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR - PAR.Qty_Not_Alloc_on_Ship_Dt;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
    - PAR.Total_Quantity_Alloc_USR;

    EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Quantity_Alloc_USR);
    PARAMETER(PAR.Total_Availability_USR);
    PARAMETER(DB1.Reserved_for_Other_Whse);
   }

   ENDIF;

  }

  //?If this is a production whse, then reserve other whse orders.
  CASE;

  // IF PAR.Production Warehouse Code EQ PAR.Warehouse Code
  IF PAR.Production_Warehouse_Code = PAR.Warehouse_Code;

  // OR PAR.Production Warehouse Code is Warehouse Code Blank
  OR PAR.Production_Warehouse_Code = *BLANK;

  EXECUTE FUNCTION(Rtv Rsrvd Other Whse  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1560700;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.Avail_Ship_Date_21_USR);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Header Status      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1231329;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(PAR.Header_Status);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF PAR.Header Status is Not Comp/Canc/Conf
   IF PAR.Header_Status = 'L'/'A'/'E'/'H';

   //?Is it time to Quit ??
   CASE;

   // IF DB1.Scheduled Ship Date GT PAR.Avail Ship Date 21 USR
   IF DB1.Scheduled_Ship_Date > PAR.Avail_Ship_Date_21_USR;

   QUIT;

   ENDIF;

   //?If warehouse ordered not equal to warehouse scheduled, then reserve
   CASE;

   // IF DB1.Warehouse Code NE DB1.Order From Warehouse
   IF DB1.Warehouse_Code <> DB1.Order_From_Warehouse;

   EXECUTE FUNCTION(Rtv Add to Allocation  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1560732;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(DB1.OD_Qty_Cnsmd_Pieces_Sched);
   {
    //?USER: Process Data record

    // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Qty Not Alloc on Shi
    PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Qty_Not_Alloc_on_Ship_Dt;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
    - PAR.Total_Quantity_Alloc_USR;

    EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Quantity_Alloc_USR);
    PARAMETER(PAR.Total_Availability_USR);
    PARAMETER('Y');
   }

   ENDIF;

   ENDIF;

  }

  ENDIF;

  //?Once PA has been calculated, allocate order if called from allocate order
  CASE;

  // IF PAR.Allocate Order/Prod Sts is Allocate Order
  IF PAR.Allocate_Order_Prod_Sts = 'ALLOC';

  //?Retrieve Week End date for *JOB DATE
  //?Determine production type
  CASE;

  // IF PAR.Scheduled Ship Date EQ JOB.*Job date
  IF PAR.Scheduled_Ship_Date = JOB.*Job_date;

  // PAR.Production Type = CND.Schedule
  PAR.Production_Type = 'S';

  //?Determine production type
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Production Type = CND.Plan
  PAR.Production_Type = 'P';

  ENDIF;

  EXECUTE FUNCTION(Rtv Production Date   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1583635;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(LCL.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Scheduled_Ship_Date);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  EXECUTE FUNCTION(RTV Day/Wk/Prd/Yr     RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369048;
  PARAMETER(PAR.Company_Number);
  PARAMETER(JOB.*Job_date);
  PARAMETER(WRK.Julian_Date);
  PARAMETER(PAR.Accounting_Year_Code);
  PARAMETER(PAR.Accounting_Period_Code);
  PARAMETER(WRK.OM_Week);
  PARAMETER(WRK.Day_of_Week);
  PARAMETER(PAR.Week_Number);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  EXECUTE FUNCTION(RTV Bgn/End Dts Prd/Yr RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1470471;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Week_End_Date_USR);
  PARAMETER(PAR.Accounting_Year_Code);
  PARAMETER(PAR.Accounting_Period_Code);
  PARAMETER(7);
  PARAMETER(PAR.Week_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?DOC: 04/11/07 Change Log
  DO;

  //?04/10/07 Effective 04/23/07 representation of Age Code changes
  //?         will be such that Age Code A will be 0 day for boxes
  //?         and combos.  The labels on the cartons will not print
  //?         a date that is offset by Sunday or Holiday.  Instead of
  //?         Code Date, it will be the Pack Date.
  ENDDO;

  //?Set age code to specific day by number
  CASE;

  // IF PAR.Age Code is A: 0 Day
  IF PAR.Age_Code = 'A';

  // PAR.Aging Day = CON.*ZERO
  PAR.Aging_Day = 0;

  //?Set age code to specific day by number
  // IF PAR.Age Code is B: 1 Day
  IF PAR.Age_Code = 'B';

  // PAR.Aging Day = CON.1
  PAR.Aging_Day = 1;

  //?Set age code to specific day by number
  // IF PAR.Age Code is C: 2 Day
  IF PAR.Age_Code = 'C';

  // PAR.Aging Day = CON.2
  PAR.Aging_Day = 2;

  //?Set age code to specific day by number
  // IF PAR.Age Code is D: 3 Day
  IF PAR.Age_Code = 'D';

  // PAR.Aging Day = CON.3
  PAR.Aging_Day = 3;

  //?Set age code to specific day by number
  // IF PAR.Age Code is E: 4 Day
  IF PAR.Age_Code = 'E';

  // PAR.Aging Day = CON.4
  PAR.Aging_Day = 4;

  //?Set age code to specific day by number
  // IF PAR.Age Code is F: 5 Day
  IF PAR.Age_Code = 'F';

  // PAR.Aging Day = CON.5
  PAR.Aging_Day = 5;

  //?Set age code to specific day by number
  // IF PAR.Age Code is G: 6 Day
  IF PAR.Age_Code = 'G';

  // PAR.Aging Day = CON.6
  PAR.Aging_Day = 6;

  //?Set age code to specific day by number
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Aging Day = CON.999
  PAR.Aging_Day = 999;

  ENDIF;

  EXECUTE FUNCTION(Clc Allocate Order INV RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1561212;
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Aging_Day);
  PARAMETER(PAR.Week_End_Date_USR);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Order_From_Warehouse);
  PARAMETER(PAR.ATS_Quantity_Need_USR);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Quantity_Scheduled);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Lot_Tracking_Flag);
  PARAMETER(LCL.Production_Date);
  PARAMETER(LCL.Base_Conv_Loss_Item);
  {
   //?USER: Initialize routine

   // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
   PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

   //?USER: Process Data record

   // PAR.Quantity Allocated USR = CON.*ZERO
   PAR.Quantity_Allocated_USR = *ZERO;

   //?If age day is zero or order has been allocated, then QUIT
   CASE;

   // IF PAR.Aging Day is equal to zero
   IF PAR.Aging_Day = *ZERO;

   // OR PAR.Quantity Sched 1 USR is Equal to Zero
   OR PAR.Quantity_Sched_1_USR = *ZERO;

   // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
   PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

   QUIT;

   ENDIF;

   //?Calc new avail with inv if current week, else calc with no inv
   CASE;

   // IF PAR.Production Date LE PAR.Week End Date        USR
   IF PAR.Production_Date <= PAR.Week_End_Date_USR;

   // OR PAR.Lot Tracking Flag is yes
   OR PAR.Lot_Tracking_Flag = 'Y';

   // Avail with inventory
   PAR.Quantity_Available_SUM = ( ( DB1.Quantity_Inventory_USR
   + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR ) - DB1.Quantity_Sales_USR;

   //?Calc new avail with inv if current week, else calc with no inv
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Quantity Available    SUM = CON.*ZERO
   PAR.Quantity_Available_SUM = *ZERO;

   ENDIF;

   //?Allocate Order
   CASE;

   // IF PAR.Quantity Available    SUM is GT Zero
   IF PAR.Quantity_Available_SUM > *ZERO;

   CASE;

   // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
   IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

   // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
   PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

   // PAR.Quantity Sched 1 USR = CON.*ZERO
   PAR.Quantity_Sched_1_USR = *ZERO;

   // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.Quantity Allocated USR
   PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.Quantity_Allocated_USR;

   // PAR.Weight Allocated USR = PAR.Quantity Allocated USR * PAR.Unit Weight *
   PAR.Weight_Allocated_USR = PAR.Quantity_Allocated_USR * PAR.Unit_Weight;

   EXECUTE FUNCTION(Upd Ord Detail Sched  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1386019;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(DB1.Production_Date_USR);
   PARAMETER(DB1.Avail_Ship_Date_USR);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Order_From_Warehouse);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Weight_Allocated_USR);
   PARAMETER(PAR.Quantity_Allocated_USR);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   {
    //?USER: Processing if Data record not found

    EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Order_Number);
    PARAMETER(PAR.Order_Sequence_Number);
    PARAMETER(PAR.Order_Secondary_Line_Seq);
    PARAMETER(PAR.OD_Production_Date);
    PARAMETER(PAR.Scheduled_Ship_Date);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Order_From_Warehouse);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Quantity_Allocated_USR);
    PARAMETER(PAR.Weight_Allocated_USR);
    PARAMETER(PAR.OD_Quantity_Inv_Sched);
    PARAMETER(PAR.OD_Weight_Inv_Sched);
    PARAMETER(PAR.OD_Quantity_Unused_1);
    PARAMETER(PAR.OD_Unused_weight_1);
    PARAMETER(PAR.OD_Added_to_Sched_Today);
    PARAMETER(PAR.OD_Reallocate_Sts);
    PARAMETER(PAR.OD_Status_Unused_3);
    PARAMETER(PAR.EDI_Status_1);
    PARAMETER(PAR.EDI_Status_2);
    PARAMETER(PAR.EDI_Status_3);
    PARAMETER(PAR.Record_Status);
    PARAMETER(PAR.Job_Time);
    PARAMETER(PAR.User_Id);
    PARAMETER(PAR.Job_Name);
    PARAMETER(PAR.Job_Date);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
     PARAMETER(DB1.Record_Status);
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Record Status = CND.Active
      PAR.Record_Status = 'A';

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    //?USER: Process Data record

    // PAR.OD Quantity Scheduled = DB1.OD Quantity Scheduled + PAR.Quantity Allocated U
    PAR.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
    + PAR.Quantity_Allocated_USR;

    // PAR.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.Weight Allocated USR
    PAR.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.Weight_Allocated_USR;

    // LCL.OD Added to Sched Today = DB1.OD Added to Sched Today
    LCL.OD_Added_to_Sched_Today = DB1.OD_Added_to_Sched_Today;

    CASE;

    // IF PAR.Base/Conv/Loss Item is Converted/Fabricated
    IF PAR.Base_Conv_Loss_Item = 'C'/'F';

    CASE;

    // IF PAR.OD Production Date EQ JOB.*Job date
    IF PAR.OD_Production_Date = JOB.*Job_date;

    // LCL.OD Added to Sched Today = CND.Yes
    LCL.OD_Added_to_Sched_Today = 'Y';

    ENDIF;

    ENDIF;

    CASE;

    // IF PAR.OD Quantity Scheduled is Greater than zero
    IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

    EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(DB1.OD_Production_Date);
    PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
    PARAMETER(PAR.OD_Weight_Scheduled);
    PARAMETER(DB1.OD_Quantity_Inv_Sched);
    PARAMETER(DB1.OD_Weight_Inv_Sched);
    PARAMETER(LCL.OD_Added_to_Sched_Today);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(DB1.OD_Production_Date);
    ENDIF;

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
   PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

   // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
   PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

   // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.Quantity Allocated USR
   PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.Quantity_Allocated_USR;

   // PAR.Weight Allocated USR = PAR.Quantity Allocated USR * PAR.Unit Weight *
   PAR.Weight_Allocated_USR = PAR.Quantity_Allocated_USR * PAR.Unit_Weight;

   EXECUTE FUNCTION(Upd Ord Detail Sched  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1386019;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(DB1.Production_Date_USR);
   PARAMETER(DB1.Avail_Ship_Date_USR);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Order_From_Warehouse);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Weight_Allocated_USR);
   PARAMETER(PAR.Quantity_Allocated_USR);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   {
    //?USER: Processing if Data record not found

    EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Order_Number);
    PARAMETER(PAR.Order_Sequence_Number);
    PARAMETER(PAR.Order_Secondary_Line_Seq);
    PARAMETER(PAR.OD_Production_Date);
    PARAMETER(PAR.Scheduled_Ship_Date);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Order_From_Warehouse);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Quantity_Allocated_USR);
    PARAMETER(PAR.Weight_Allocated_USR);
    PARAMETER(PAR.OD_Quantity_Inv_Sched);
    PARAMETER(PAR.OD_Weight_Inv_Sched);
    PARAMETER(PAR.OD_Quantity_Unused_1);
    PARAMETER(PAR.OD_Unused_weight_1);
    PARAMETER(PAR.OD_Added_to_Sched_Today);
    PARAMETER(PAR.OD_Reallocate_Sts);
    PARAMETER(PAR.OD_Status_Unused_3);
    PARAMETER(PAR.EDI_Status_1);
    PARAMETER(PAR.EDI_Status_2);
    PARAMETER(PAR.EDI_Status_3);
    PARAMETER(PAR.Record_Status);
    PARAMETER(PAR.Job_Time);
    PARAMETER(PAR.User_Id);
    PARAMETER(PAR.Job_Name);
    PARAMETER(PAR.Job_Date);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
     PARAMETER(DB1.Record_Status);
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Record Status = CND.Active
      PAR.Record_Status = 'A';

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    //?USER: Process Data record

    // PAR.OD Quantity Scheduled = DB1.OD Quantity Scheduled + PAR.Quantity Allocated U
    PAR.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
    + PAR.Quantity_Allocated_USR;

    // PAR.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.Weight Allocated USR
    PAR.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.Weight_Allocated_USR;

    // LCL.OD Added to Sched Today = DB1.OD Added to Sched Today
    LCL.OD_Added_to_Sched_Today = DB1.OD_Added_to_Sched_Today;

    CASE;

    // IF PAR.Base/Conv/Loss Item is Converted/Fabricated
    IF PAR.Base_Conv_Loss_Item = 'C'/'F';

    CASE;

    // IF PAR.OD Production Date EQ JOB.*Job date
    IF PAR.OD_Production_Date = JOB.*Job_date;

    // LCL.OD Added to Sched Today = CND.Yes
    LCL.OD_Added_to_Sched_Today = 'Y';

    ENDIF;

    ENDIF;

    CASE;

    // IF PAR.OD Quantity Scheduled is Greater than zero
    IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

    EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(DB1.OD_Production_Date);
    PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
    PARAMETER(PAR.OD_Weight_Scheduled);
    PARAMETER(DB1.OD_Quantity_Inv_Sched);
    PARAMETER(DB1.OD_Weight_Inv_Sched);
    PARAMETER(LCL.OD_Added_to_Sched_Today);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(DB1.OD_Production_Date);
    ENDIF;

   }

   ENDIF;

   //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
   CASE;

   // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
   IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

   // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR
   PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR;

   // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Allocated USR
   PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Allocated_USR;

   // New Available
   PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
   + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
   - PAR.Total_Quantity_Alloc_USR;

   EXECUTE FUNCTION(Chg SchdShp/Allc/Avail CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1543494;
   PARAMETER(DB1.Avail_Ship_Date_USR);
   PARAMETER(PAR.Total_Sched_Shipments_USR);
   PARAMETER(PAR.Total_Quantity_Alloc_USR);
   PARAMETER(PAR.Total_Availability_USR);
   PARAMETER(DB1.Reserved_for_Other_Whse);
   //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated USR
   PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

   // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Allocated USR
   PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Allocated_USR;

   // New Available
   PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
   + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
   - PAR.Total_Quantity_Alloc_USR;

   EXECUTE FUNCTION(Chg SchdShp/Allc/Avail CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1543494;
   PARAMETER(DB1.Avail_Ship_Date_USR);
   PARAMETER(PAR.Total_Sched_Shipments_USR);
   PARAMETER(PAR.Total_Quantity_Alloc_USR);
   PARAMETER(PAR.Total_Availability_USR);
   PARAMETER(DB1.Reserved_for_Other_Whse);
   ENDIF;

   ENDIF;

   // PAR.Aging Day = PAR.Aging Day - CON.1
   PAR.Aging_Day = PAR.Aging_Day - 1;

   //?USER: Exit processing

   // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
   PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

  }

  //?Set age code to specific day by number
  CASE;

  // IF PAR.Age Code is A: 0 Day
  IF PAR.Age_Code = 'A';

  // PAR.Aging Day = CON.*ZERO
  PAR.Aging_Day = 0;

  //?Set age code to specific day by number
  // IF PAR.Age Code is B: 1 Day
  IF PAR.Age_Code = 'B';

  // PAR.Aging Day = CON.1
  PAR.Aging_Day = 1;

  //?Set age code to specific day by number
  // IF PAR.Age Code is C: 2 Day
  IF PAR.Age_Code = 'C';

  // PAR.Aging Day = CON.2
  PAR.Aging_Day = 2;

  //?Set age code to specific day by number
  // IF PAR.Age Code is D: 3 Day
  IF PAR.Age_Code = 'D';

  // PAR.Aging Day = CON.3
  PAR.Aging_Day = 3;

  //?Set age code to specific day by number
  // IF PAR.Age Code is E: 4 Day
  IF PAR.Age_Code = 'E';

  // PAR.Aging Day = CON.4
  PAR.Aging_Day = 4;

  //?Set age code to specific day by number
  // IF PAR.Age Code is F: 5 Day
  IF PAR.Age_Code = 'F';

  // PAR.Aging Day = CON.5
  PAR.Aging_Day = 5;

  //?Set age code to specific day by number
  // IF PAR.Age Code is G: 6 Day
  IF PAR.Age_Code = 'G';

  // PAR.Aging Day = CON.6
  PAR.Aging_Day = 6;

  //?Set age code to specific day by number
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Aging Day = CON.999
  PAR.Aging_Day = 999;

  ENDIF;

  EXECUTE FUNCTION(Clc Allocate Order PRD RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1583688;
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Aging_Day);
  PARAMETER(PAR.Week_End_Date_USR);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Order_From_Warehouse);
  PARAMETER(PAR.ATS_Quantity_Need_USR);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Quantity_Scheduled);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Lot_Tracking_Flag);
  PARAMETER(LCL.Base_Conv_Loss_Item);
  {
   //?USER: Initialize routine

   // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
   PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

   //?USER: Process Data record

   // PAR.Quantity Allocated USR = CON.*ZERO
   PAR.Quantity_Allocated_USR = *ZERO;

   //?If age day is zero or order has been allocated, then QUIT
   CASE;

   // IF PAR.Aging Day is equal to zero
   IF PAR.Aging_Day = *ZERO;

   // OR PAR.Quantity Sched 1 USR is Equal to Zero
   OR PAR.Quantity_Sched_1_USR = *ZERO;

   // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
   PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

   QUIT;

   ENDIF;

   // Avail with no inventory
   PAR.Quantity_Available_SUM = ( DB1.Quantity_Production_USR - DB1.Quantity_Sched_Ship_USR )
   - DB1.Quantity_Sales_USR;

   //?Allocate Order
   CASE;

   // IF PAR.Quantity Available    SUM is GT Zero
   IF PAR.Quantity_Available_SUM > *ZERO;

   CASE;

   // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
   IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

   // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
   PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

   // PAR.Quantity Sched 1 USR = CON.*ZERO
   PAR.Quantity_Sched_1_USR = *ZERO;

   // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.Quantity Allocated USR
   PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.Quantity_Allocated_USR;

   // PAR.Weight Allocated USR = PAR.Quantity Allocated USR * PAR.Unit Weight *
   PAR.Weight_Allocated_USR = PAR.Quantity_Allocated_USR * PAR.Unit_Weight;

   EXECUTE FUNCTION(Upd Ord Detail Sched  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1386019;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(DB1.Production_Date_USR);
   PARAMETER(DB1.Avail_Ship_Date_USR);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Order_From_Warehouse);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Weight_Allocated_USR);
   PARAMETER(PAR.Quantity_Allocated_USR);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   {
    //?USER: Processing if Data record not found

    EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Order_Number);
    PARAMETER(PAR.Order_Sequence_Number);
    PARAMETER(PAR.Order_Secondary_Line_Seq);
    PARAMETER(PAR.OD_Production_Date);
    PARAMETER(PAR.Scheduled_Ship_Date);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Order_From_Warehouse);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Quantity_Allocated_USR);
    PARAMETER(PAR.Weight_Allocated_USR);
    PARAMETER(PAR.OD_Quantity_Inv_Sched);
    PARAMETER(PAR.OD_Weight_Inv_Sched);
    PARAMETER(PAR.OD_Quantity_Unused_1);
    PARAMETER(PAR.OD_Unused_weight_1);
    PARAMETER(PAR.OD_Added_to_Sched_Today);
    PARAMETER(PAR.OD_Reallocate_Sts);
    PARAMETER(PAR.OD_Status_Unused_3);
    PARAMETER(PAR.EDI_Status_1);
    PARAMETER(PAR.EDI_Status_2);
    PARAMETER(PAR.EDI_Status_3);
    PARAMETER(PAR.Record_Status);
    PARAMETER(PAR.Job_Time);
    PARAMETER(PAR.User_Id);
    PARAMETER(PAR.Job_Name);
    PARAMETER(PAR.Job_Date);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
     PARAMETER(DB1.Record_Status);
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Record Status = CND.Active
      PAR.Record_Status = 'A';

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    //?USER: Process Data record

    // PAR.OD Quantity Scheduled = DB1.OD Quantity Scheduled + PAR.Quantity Allocated U
    PAR.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
    + PAR.Quantity_Allocated_USR;

    // PAR.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.Weight Allocated USR
    PAR.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.Weight_Allocated_USR;

    // LCL.OD Added to Sched Today = DB1.OD Added to Sched Today
    LCL.OD_Added_to_Sched_Today = DB1.OD_Added_to_Sched_Today;

    CASE;

    // IF PAR.Base/Conv/Loss Item is Converted/Fabricated
    IF PAR.Base_Conv_Loss_Item = 'C'/'F';

    CASE;

    // IF PAR.OD Production Date EQ JOB.*Job date
    IF PAR.OD_Production_Date = JOB.*Job_date;

    // LCL.OD Added to Sched Today = CND.Yes
    LCL.OD_Added_to_Sched_Today = 'Y';

    ENDIF;

    ENDIF;

    CASE;

    // IF PAR.OD Quantity Scheduled is Greater than zero
    IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

    EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(DB1.OD_Production_Date);
    PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
    PARAMETER(PAR.OD_Weight_Scheduled);
    PARAMETER(DB1.OD_Quantity_Inv_Sched);
    PARAMETER(DB1.OD_Weight_Inv_Sched);
    PARAMETER(LCL.OD_Added_to_Sched_Today);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(DB1.OD_Production_Date);
    ENDIF;

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
   PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

   // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
   PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

   // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.Quantity Allocated USR
   PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.Quantity_Allocated_USR;

   // PAR.Weight Allocated USR = PAR.Quantity Allocated USR * PAR.Unit Weight *
   PAR.Weight_Allocated_USR = PAR.Quantity_Allocated_USR * PAR.Unit_Weight;

   EXECUTE FUNCTION(Upd Ord Detail Sched  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1386019;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(DB1.Production_Date_USR);
   PARAMETER(DB1.Avail_Ship_Date_USR);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Order_From_Warehouse);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Weight_Allocated_USR);
   PARAMETER(PAR.Quantity_Allocated_USR);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   {
    //?USER: Processing if Data record not found

    EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Order_Number);
    PARAMETER(PAR.Order_Sequence_Number);
    PARAMETER(PAR.Order_Secondary_Line_Seq);
    PARAMETER(PAR.OD_Production_Date);
    PARAMETER(PAR.Scheduled_Ship_Date);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Order_From_Warehouse);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Quantity_Allocated_USR);
    PARAMETER(PAR.Weight_Allocated_USR);
    PARAMETER(PAR.OD_Quantity_Inv_Sched);
    PARAMETER(PAR.OD_Weight_Inv_Sched);
    PARAMETER(PAR.OD_Quantity_Unused_1);
    PARAMETER(PAR.OD_Unused_weight_1);
    PARAMETER(PAR.OD_Added_to_Sched_Today);
    PARAMETER(PAR.OD_Reallocate_Sts);
    PARAMETER(PAR.OD_Status_Unused_3);
    PARAMETER(PAR.EDI_Status_1);
    PARAMETER(PAR.EDI_Status_2);
    PARAMETER(PAR.EDI_Status_3);
    PARAMETER(PAR.Record_Status);
    PARAMETER(PAR.Job_Time);
    PARAMETER(PAR.User_Id);
    PARAMETER(PAR.Job_Name);
    PARAMETER(PAR.Job_Date);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
     PARAMETER(DB1.Record_Status);
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Record Status = CND.Active
      PAR.Record_Status = 'A';

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    //?USER: Process Data record

    // PAR.OD Quantity Scheduled = DB1.OD Quantity Scheduled + PAR.Quantity Allocated U
    PAR.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
    + PAR.Quantity_Allocated_USR;

    // PAR.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.Weight Allocated USR
    PAR.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.Weight_Allocated_USR;

    // LCL.OD Added to Sched Today = DB1.OD Added to Sched Today
    LCL.OD_Added_to_Sched_Today = DB1.OD_Added_to_Sched_Today;

    CASE;

    // IF PAR.Base/Conv/Loss Item is Converted/Fabricated
    IF PAR.Base_Conv_Loss_Item = 'C'/'F';

    CASE;

    // IF PAR.OD Production Date EQ JOB.*Job date
    IF PAR.OD_Production_Date = JOB.*Job_date;

    // LCL.OD Added to Sched Today = CND.Yes
    LCL.OD_Added_to_Sched_Today = 'Y';

    ENDIF;

    ENDIF;

    CASE;

    // IF PAR.OD Quantity Scheduled is Greater than zero
    IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

    EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(DB1.OD_Production_Date);
    PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
    PARAMETER(PAR.OD_Weight_Scheduled);
    PARAMETER(DB1.OD_Quantity_Inv_Sched);
    PARAMETER(DB1.OD_Weight_Inv_Sched);
    PARAMETER(LCL.OD_Added_to_Sched_Today);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(DB1.OD_Production_Date);
    ENDIF;

   }

   ENDIF;

   //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
   CASE;

   // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
   IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

   // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR
   PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR;

   // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Allocated USR
   PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Allocated_USR;

   // New Available
   PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
   + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
   - PAR.Total_Quantity_Alloc_USR;

   EXECUTE FUNCTION(Chg SchdShp/Allc/Avail CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1543494;
   PARAMETER(DB1.Avail_Ship_Date_USR);
   PARAMETER(PAR.Total_Sched_Shipments_USR);
   PARAMETER(PAR.Total_Quantity_Alloc_USR);
   PARAMETER(PAR.Total_Availability_USR);
   PARAMETER(DB1.Reserved_for_Other_Whse);
   //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
   PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

   // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Allocated USR
   PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Allocated_USR;

   // New Available
   PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
   + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
   - PAR.Total_Quantity_Alloc_USR;

   EXECUTE FUNCTION(Chg SchdShp/Allc/Avail CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1543494;
   PARAMETER(DB1.Avail_Ship_Date_USR);
   PARAMETER(PAR.Total_Sched_Shipments_USR);
   PARAMETER(PAR.Total_Quantity_Alloc_USR);
   PARAMETER(PAR.Total_Availability_USR);
   PARAMETER(DB1.Reserved_for_Other_Whse);
   ENDIF;

   ENDIF;

   // PAR.Aging Day = PAR.Aging Day - CON.1
   PAR.Aging_Day = PAR.Aging_Day - 1;

   //?USER: Exit processing

   // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
   PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

  }

  //?Calculate weight scheduled and need.
  // PAR.Weight Scheduled = PAR.Quantity Scheduled * PAR.Unit Weight *
  PAR.Weight_Scheduled = PAR.Quantity_Scheduled * PAR.Unit_Weight;

  // PAR.ATS Weight Need USR = PAR.ATS Quantity Need USR * PAR.Unit Weight *
  PAR.ATS_Weight_Need_USR = PAR.ATS_Quantity_Need_USR * PAR.Unit_Weight;

  ENDIF;

 }

 EXECUTE FUNCTION(Rtv Avail for Prod Dt RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1561257;
 PARAMETER(WRK.Avail_Ship_Date_USR);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.ATS_Quantity_Avail_USR);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Production Date USR EQ PAR.Production Date USR
  IF DB1.Production_Date_USR = PAR.Production_Date_USR;

  // Cacl Qty Available
  PAR.Quantity_Available_USR = ( DB1.Quantity_Production_USR - DB1.Quantity_Sched_Ship_USR )
  - DB1.Quantity_Sales_USR;

  // PAR.Avail Ship Date USR = DB1.Avail Ship Date USR
  PAR.Avail_Ship_Date_USR = DB1.Avail_Ship_Date_USR;

  QUIT;

  ENDIF;

 }

 // Peices Available
 PAR.RM_Pieces_Avail_USR = ( PAR.ATS_Quantity_Avail_USR * PAR.Pieces_Per_Bag )
 * PAR.Bags_Per_Unit;

 // Weight Available
 PAR.RM_Weight_Avail_USR = PAR.ATS_Quantity_Avail_USR * PAR.Unit_Weight;

 //?Allocate consumed items or Deallocate consumed items.
 CASE;

 // IF PAR.ATS Adj Type USR 2 is Order Allocate
 IF PAR.ATS_Adj_Type_USR_2 = 'OA';

 // PAR.Pieces Scheduled USR = CON.*ZERO
 PAR.Pieces_Scheduled_USR = *ZERO;

 // PAR.Weight Scheduled USR = CON.*ZERO
 PAR.Weight_Scheduled_USR = *ZERO;

 //?Changed to process the Consumption based on Pieces Per Head of
 //?the Component Item Code.  Mark Arensberg  9/11/97
 //?Process by Pieces Per Head from Component Item
 CASE;

 // IF PAR.Pieces Per Head is GT Zero
 IF PAR.Pieces_Per_Head > *ZERO;

 // OR PAR.Piece Count Item USR is yes
 OR PAR.Piece_Count_Item_USR = 'Y';

 CASE;

 // IF PAR.RM Pieces Need USR is GT Zero
 IF PAR.RM_Pieces_Need_USR > *ZERO;

 //?Process by Consume Priority % using Pieces
 CASE;

 // IF DB1.Consume Priority % is Equal to 100 Pct
 IF DB1.Consume_Priority_Percent = 100;

 //?Consume item by total weight needed if priority is 99999
 CASE;

 // IF DB1.Consume Priority is 99999
 IF DB1.Consume_Priority = 99999;

 // PAR.Pieces Need USR = PAR.SM Pieces Need USR
 PAR.Pieces_Need_USR = PAR.SM_Pieces_Need_USR;

 // Weight Need
 PAR.Weight_Need_USR = PAR.Pieces_Need_USR * PAR.PS_Avg_Piece_Wgt 'H';

 //?Pieces/Weight Scheduled
 CASE;

 // IF PAR.Pieces Need USR GT PAR.RM Pieces Avail USR
 IF PAR.Pieces_Need_USR > PAR.RM_Pieces_Avail_USR;

 // PAR.Pieces Scheduled USR = PAR.RM Pieces Avail USR
 PAR.Pieces_Scheduled_USR = PAR.RM_Pieces_Avail_USR;

 // PAR.Weight Scheduled USR = PAR.RM Weight Avail USR
 PAR.Weight_Scheduled_USR = PAR.RM_Weight_Avail_USR;

 // PAR.RM Pieces Need USR = PAR.RM Pieces Avail USR
 PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Avail_USR;

 // PAR.RM Weight Need USR = PAR.RM Weight Avail USR
 PAR.RM_Weight_Need_USR = PAR.RM_Weight_Avail_USR;

 //?Pieces/Weight Scheduled
 // IF PAR.Pieces Need USR LE PAR.RM Pieces Avail USR
 IF PAR.Pieces_Need_USR <= PAR.RM_Pieces_Avail_USR;

 // PAR.Pieces Scheduled USR = PAR.Pieces Need USR
 PAR.Pieces_Scheduled_USR = PAR.Pieces_Need_USR;

 // PAR.Weight Scheduled USR = PAR.Weight Need USR
 PAR.Weight_Scheduled_USR = PAR.Weight_Need_USR;

 ENDIF;

 //?Consume item by total weight needed if priority is 99999
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Pieces Need USR = PAR.RM Pieces Need USR
 PAR.Pieces_Need_USR = PAR.RM_Pieces_Need_USR;

 // Weight Need
 PAR.Weight_Need_USR = PAR.Pieces_Need_USR * PAR.PS_Avg_Piece_Wgt 'H';

 //?Pieces/Weight Scheduled
 CASE;

 // IF PAR.Pieces Need USR GT PAR.RM Pieces Avail USR
 IF PAR.Pieces_Need_USR > PAR.RM_Pieces_Avail_USR;

 // PAR.Pieces Scheduled USR = PAR.RM Pieces Avail USR
 PAR.Pieces_Scheduled_USR = PAR.RM_Pieces_Avail_USR;

 // PAR.Weight Scheduled USR = PAR.RM Weight Avail USR
 PAR.Weight_Scheduled_USR = PAR.RM_Weight_Avail_USR;

 // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.RM Pieces Avail USR
 PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.RM_Pieces_Avail_USR;

 // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.RM Weight Avail USR
 PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.RM_Weight_Avail_USR;

 // PAR.RM Pieces Alloc USR = PAR.RM Pieces Alloc USR - PAR.RM Pieces Avail USR
 PAR.RM_Pieces_Alloc_USR = PAR.RM_Pieces_Alloc_USR - PAR.RM_Pieces_Avail_USR;

 // PAR.RM Weight Alloc USR = PAR.RM Weight Alloc USR - PAR.RM Weight Avail USR
 PAR.RM_Weight_Alloc_USR = PAR.RM_Weight_Alloc_USR - PAR.RM_Weight_Avail_USR;

 //?Pieces/Weight Scheduled
 // IF PAR.Pieces Need USR LE PAR.RM Pieces Avail USR
 IF PAR.Pieces_Need_USR <= PAR.RM_Pieces_Avail_USR;

 // PAR.Pieces Scheduled USR = PAR.Pieces Need USR
 PAR.Pieces_Scheduled_USR = PAR.Pieces_Need_USR;

 // PAR.Weight Scheduled USR = PAR.Weight Need USR
 PAR.Weight_Scheduled_USR = PAR.Weight_Need_USR;

 // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.Pieces Need USR
 PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.Pieces_Need_USR;

 // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.Weight Need USR
 PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.Weight_Need_USR;

 // PAR.RM Pieces Alloc USR = PAR.RM Pieces Alloc USR - PAR.Pieces Need USR
 PAR.RM_Pieces_Alloc_USR = PAR.RM_Pieces_Alloc_USR - PAR.Pieces_Need_USR;

 // PAR.RM Weight Alloc USR = PAR.RM Weight Alloc USR - PAR.Weight Need USR
 PAR.RM_Weight_Alloc_USR = PAR.RM_Weight_Alloc_USR - PAR.Weight_Need_USR;

 ENDIF;

 ENDIF;

 //?Process by Consume Priority % using Pieces
 // IF DB1.Consume Priority % is Not Equal to 100 PCt
 IF DB1.Consume_Priority_Percent <> 100;

 //?Consume item by total weight needed if priority is 99999
 CASE;

 // IF DB1.Consume Priority is 99999
 IF DB1.Consume_Priority = 99999;

 // Pieces Need
 PAR.Pieces_Need_USR = PAR.RM_Pieces_Need_USR * ( DB1.Consume_Priority_Percent / 100 'H' )
 'H';

 // Weight Need
 PAR.Weight_Need_USR = PAR.Pieces_Need_USR * PAR.PS_Avg_Piece_Wgt 'H';

 //?Pieces/Weight Scheduled
 CASE;

 // IF PAR.Pieces Need USR GT PAR.RM Pieces Avail USR
 IF PAR.Pieces_Need_USR > PAR.RM_Pieces_Avail_USR;

 // PAR.Pieces Scheduled USR = PAR.RM Pieces Avail USR
 PAR.Pieces_Scheduled_USR = PAR.RM_Pieces_Avail_USR;

 // PAR.Weight Scheduled USR = PAR.RM Weight Avail USR
 PAR.Weight_Scheduled_USR = PAR.RM_Weight_Avail_USR;

 //?Pieces/Weight Scheduled
 // IF PAR.Pieces Need USR LE PAR.RM Pieces Avail USR
 IF PAR.Pieces_Need_USR <= PAR.RM_Pieces_Avail_USR;

 // PAR.Pieces Scheduled USR = PAR.Pieces Need USR
 PAR.Pieces_Scheduled_USR = PAR.Pieces_Need_USR;

 // PAR.Weight Scheduled USR = PAR.Weight Need USR
 PAR.Weight_Scheduled_USR = PAR.Weight_Need_USR;

 ENDIF;

 //?Consume item by total weight needed if priority is 99999
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Pieces Need
 PAR.Pieces_Need_USR = PAR.RM_Pieces_Alloc_USR * ( DB1.Consume_Priority_Percent / 100 'H' )
 'H';

 // Weight Need
 PAR.Weight_Need_USR = PAR.Pieces_Need_USR * PAR.PS_Avg_Piece_Wgt 'H';

 //?Pieces/Weight Scheduled
 CASE;

 // IF PAR.Pieces Need USR GT PAR.RM Pieces Avail USR
 IF PAR.Pieces_Need_USR > PAR.RM_Pieces_Avail_USR;

 // PAR.Pieces Scheduled USR = PAR.RM Pieces Avail USR
 PAR.Pieces_Scheduled_USR = PAR.RM_Pieces_Avail_USR;

 // PAR.Weight Scheduled USR = PAR.RM Weight Avail USR
 PAR.Weight_Scheduled_USR = PAR.RM_Weight_Avail_USR;

 // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.RM Pieces Avail USR
 PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.RM_Pieces_Avail_USR;

 // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.RM Weight Avail USR
 PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.RM_Weight_Avail_USR;

 //?Pieces/Weight Scheduled
 // IF PAR.Pieces Need USR LE PAR.RM Pieces Avail USR
 IF PAR.Pieces_Need_USR <= PAR.RM_Pieces_Avail_USR;

 // PAR.Pieces Scheduled USR = PAR.Pieces Need USR
 PAR.Pieces_Scheduled_USR = PAR.Pieces_Need_USR;

 // PAR.Weight Scheduled USR = PAR.Weight Need USR
 PAR.Weight_Scheduled_USR = PAR.Weight_Need_USR;

 // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.Pieces Need USR
 PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.Pieces_Need_USR;

 // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.Weight Need USR
 PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.Weight_Need_USR;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?Process by Pieces Per Head from Component Item
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.RM Weight Need USR is Greater than zero
 IF PAR.RM_Weight_Need_USR > *ZERO;

 //?Process by Consume Priority % using Weight
 CASE;

 // IF DB1.Consume Priority % is Equal to 100 Pct
 IF DB1.Consume_Priority_Percent = 100;

 //?Consume item by total weight needed if priority is 99999
 CASE;

 // IF DB1.Consume Priority is 99999
 IF DB1.Consume_Priority = 99999;

 // PAR.Weight Need USR = PAR.SM Weight Need USR
 PAR.Weight_Need_USR = PAR.SM_Weight_Need_USR;

 //?Pieces Need
 CASE;

 // IF PAR.PS Avg Piece Wgt is GT Zero
 IF PAR.PS_Avg_Piece_Wgt > *ZERO;

 // Pieces Need USR
 PAR.Pieces_Need_USR = PAR.Weight_Need_USR / PAR.PS_Avg_Piece_Wgt 'H';

 ENDIF;

 //?Pieces/Weight Scheduled
 CASE;

 // IF PAR.Pieces Need USR GT PAR.RM Pieces Avail USR
 IF PAR.Pieces_Need_USR > PAR.RM_Pieces_Avail_USR;

 // PAR.Pieces Scheduled USR = PAR.RM Pieces Avail USR
 PAR.Pieces_Scheduled_USR = PAR.RM_Pieces_Avail_USR;

 // PAR.Weight Scheduled USR = PAR.RM Weight Avail USR
 PAR.Weight_Scheduled_USR = PAR.RM_Weight_Avail_USR;

 // PAR.RM Pieces Need USR = PAR.RM Pieces Avail USR
 PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Avail_USR;

 // PAR.RM Weight Need USR = PAR.RM Weight Avail USR
 PAR.RM_Weight_Need_USR = PAR.RM_Weight_Avail_USR;

 //?Pieces/Weight Scheduled
 // IF PAR.Pieces Need USR LE PAR.RM Pieces Avail USR
 IF PAR.Pieces_Need_USR <= PAR.RM_Pieces_Avail_USR;

 // PAR.Pieces Scheduled USR = PAR.Pieces Need USR
 PAR.Pieces_Scheduled_USR = PAR.Pieces_Need_USR;

 // PAR.Weight Scheduled USR = PAR.Weight Need USR
 PAR.Weight_Scheduled_USR = PAR.Weight_Need_USR;

 ENDIF;

 //?Consume item by total weight needed if priority is 99999
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Weight Need USR = PAR.RM Weight Need USR
 PAR.Weight_Need_USR = PAR.RM_Weight_Need_USR;

 //?Pieces Need
 CASE;

 // IF PAR.PS Avg Piece Wgt is GT Zero
 IF PAR.PS_Avg_Piece_Wgt > *ZERO;

 // Pieces Need USR
 PAR.Pieces_Need_USR = PAR.Weight_Need_USR / PAR.PS_Avg_Piece_Wgt 'H';

 ENDIF;

 //?Pieces/Weight Scheduled
 CASE;

 // IF PAR.Weight Need USR GT PAR.RM Weight Avail USR
 IF PAR.Weight_Need_USR > PAR.RM_Weight_Avail_USR;

 // PAR.Pieces Scheduled USR = PAR.RM Pieces Avail USR
 PAR.Pieces_Scheduled_USR = PAR.RM_Pieces_Avail_USR;

 // PAR.Weight Scheduled USR = PAR.RM Weight Avail USR
 PAR.Weight_Scheduled_USR = PAR.RM_Weight_Avail_USR;

 // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.RM Pieces Avail USR
 PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.RM_Pieces_Avail_USR;

 // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.RM Weight Avail USR
 PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.RM_Weight_Avail_USR;

 // PAR.RM Pieces Alloc USR = PAR.RM Pieces Alloc USR - PAR.RM Pieces Avail USR
 PAR.RM_Pieces_Alloc_USR = PAR.RM_Pieces_Alloc_USR - PAR.RM_Pieces_Avail_USR;

 // PAR.RM Weight Alloc USR = PAR.RM Weight Alloc USR - PAR.RM Weight Avail USR
 PAR.RM_Weight_Alloc_USR = PAR.RM_Weight_Alloc_USR - PAR.RM_Weight_Avail_USR;

 //?Pieces/Weight Scheduled
 // IF PAR.Weight Need USR LE PAR.RM Weight Avail USR
 IF PAR.Weight_Need_USR <= PAR.RM_Weight_Avail_USR;

 // PAR.Pieces Scheduled USR = PAR.Pieces Need USR
 PAR.Pieces_Scheduled_USR = PAR.Pieces_Need_USR;

 // PAR.Weight Scheduled USR = PAR.Weight Need USR
 PAR.Weight_Scheduled_USR = PAR.Weight_Need_USR;

 // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.Pieces Need USR
 PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.Pieces_Need_USR;

 // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.Weight Need USR
 PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.Weight_Need_USR;

 // PAR.RM Pieces Alloc USR = PAR.RM Pieces Alloc USR - PAR.Pieces Need USR
 PAR.RM_Pieces_Alloc_USR = PAR.RM_Pieces_Alloc_USR - PAR.Pieces_Need_USR;

 // PAR.RM Weight Alloc USR = PAR.RM Weight Alloc USR - PAR.Weight Need USR
 PAR.RM_Weight_Alloc_USR = PAR.RM_Weight_Alloc_USR - PAR.Weight_Need_USR;

 ENDIF;

 ENDIF;

 //?Process by Consume Priority % using Weight
 // IF DB1.Consume Priority % is Not Equal to 100 PCt
 IF DB1.Consume_Priority_Percent <> 100;

 //?Consume item by total weight needed if priority is 99999
 CASE;

 // IF DB1.Consume Priority is 99999
 IF DB1.Consume_Priority = 99999;

 // Weight Need
 PAR.Weight_Need_USR = PAR.RM_Weight_Need_USR * ( DB1.Consume_Priority_Percent / 100 'H' )
 'H';

 //?Pieces Need
 CASE;

 // IF PAR.PS Avg Piece Wgt is GT Zero
 IF PAR.PS_Avg_Piece_Wgt > *ZERO;

 // Pieces Need
 PAR.Pieces_Need_USR = PAR.Weight_Need_USR / PAR.PS_Avg_Piece_Wgt 'H';

 ENDIF;

 //?Pieces/Weight Scheduled
 CASE;

 // IF PAR.Pieces Need USR GT PAR.RM Pieces Avail USR
 IF PAR.Pieces_Need_USR > PAR.RM_Pieces_Avail_USR;

 // PAR.Pieces Scheduled USR = PAR.RM Pieces Avail USR
 PAR.Pieces_Scheduled_USR = PAR.RM_Pieces_Avail_USR;

 // PAR.Weight Scheduled USR = PAR.RM Weight Avail USR
 PAR.Weight_Scheduled_USR = PAR.RM_Weight_Avail_USR;

 //?Pieces/Weight Scheduled
 // IF PAR.Pieces Need USR LE PAR.RM Pieces Avail USR
 IF PAR.Pieces_Need_USR <= PAR.RM_Pieces_Avail_USR;

 // PAR.Pieces Scheduled USR = PAR.Pieces Need USR
 PAR.Pieces_Scheduled_USR = PAR.Pieces_Need_USR;

 // PAR.Weight Scheduled USR = PAR.Weight Need USR
 PAR.Weight_Scheduled_USR = PAR.Weight_Need_USR;

 ENDIF;

 //?Consume item by total weight needed if priority is 99999
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Weight Need
 PAR.Weight_Need_USR = PAR.RM_Weight_Alloc_USR * ( DB1.Consume_Priority_Percent / 100 'H' )
 'H';

 //?Pieces Need
 CASE;

 // IF PAR.PS Avg Piece Wgt is GT Zero
 IF PAR.PS_Avg_Piece_Wgt > *ZERO;

 // Pieces Need
 PAR.Pieces_Need_USR = PAR.Weight_Need_USR / PAR.PS_Avg_Piece_Wgt 'H';

 ENDIF;

 //?Pieces/Weight Scheduled
 CASE;

 // IF PAR.Weight Need USR GT PAR.RM Weight Avail USR
 IF PAR.Weight_Need_USR > PAR.RM_Weight_Avail_USR;

 // PAR.Pieces Scheduled USR = PAR.RM Pieces Avail USR
 PAR.Pieces_Scheduled_USR = PAR.RM_Pieces_Avail_USR;

 // PAR.Weight Scheduled USR = PAR.RM Weight Avail USR
 PAR.Weight_Scheduled_USR = PAR.RM_Weight_Avail_USR;

 // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.RM Pieces Avail USR
 PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.RM_Pieces_Avail_USR;

 // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.RM Weight Avail USR
 PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.RM_Weight_Avail_USR;

 //?Pieces/Weight Scheduled
 // IF PAR.Weight Need USR LE PAR.RM Weight Avail USR
 IF PAR.Weight_Need_USR <= PAR.RM_Weight_Avail_USR;

 // PAR.Pieces Scheduled USR = PAR.Pieces Need USR
 PAR.Pieces_Scheduled_USR = PAR.Pieces_Need_USR;

 // PAR.Weight Scheduled USR = PAR.Weight Need USR
 PAR.Weight_Scheduled_USR = PAR.Weight_Need_USR;

 // PAR.RM Pieces Need USR = PAR.RM Pieces Need USR - PAR.Pieces Need USR
 PAR.RM_Pieces_Need_USR = PAR.RM_Pieces_Need_USR - PAR.Pieces_Need_USR;

 // PAR.RM Weight Need USR = PAR.RM Weight Need USR - PAR.Weight Need USR
 PAR.RM_Weight_Need_USR = PAR.RM_Weight_Need_USR - PAR.Weight_Need_USR;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?Add up consumed for (100% & priority 99999) or priority not 99999
 CASE;

 // IF DB1.Consume Priority % is Equal to 100 Pct
 IF ( DB1.Consume_Priority_Percent = 100;

 // AND DB1.Consume Priority is 99999
 AND DB1.Consume_Priority = 99999 );

 // OR DB1.Consume Priority is NE 99999
 OR DB1.Consume_Priority <> 99999;

 // PAR.Pieces Consumed USR = PAR.Pieces Consumed USR + PAR.Pieces Scheduled USR
 PAR.Pieces_Consumed_USR = PAR.Pieces_Consumed_USR + PAR.Pieces_Scheduled_USR;

 // PAR.Weight Consumed USR = PAR.Weight Consumed USR + PAR.Weight Scheduled USR
 PAR.Weight_Consumed_USR = PAR.Weight_Consumed_USR + PAR.Weight_Scheduled_USR;

 ENDIF;

 //?**UPDATE**
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Conv  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476182;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(DB1.Component_Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Pieces_Scheduled_USR);
 PARAMETER(PAR.Weight_Scheduled_USR);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Process Data record

  // PAR.PS Pieces Converted = DB1.PS Pieces Converted + PAR.Pieces Scheduled
  PAR.PS_Pieces_Converted = DB1.PS_Pieces_Converted + PAR.Pieces_Scheduled;

  // PAR.PS Weight Converted = DB1.PS Weight Converted + PAR.Weight Scheduled
  PAR.PS_Weight_Converted = DB1.PS_Weight_Converted + PAR.Weight_Scheduled;

  //?If weight OR pieces converted is LT 0 then make zero
  CASE;

  // IF PAR.PS Weight Converted is LT Zero
  IF PAR.PS_Weight_Converted < *ZERO;

  // OR PAR.PS Pieces Converted is LT Zeros
  OR PAR.PS_Pieces_Converted < *ZERO;

  // PAR.PS Weight Converted = CON.*ZERO
  PAR.PS_Weight_Converted = *ZERO;

  // PAR.PS Pieces Converted = CON.*ZERO
  PAR.PS_Pieces_Converted = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Conv  CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476183;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create consumed records   -- 10/05/2020 WITH SHIPP CO ON ORDER
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?WAS UPD WITH PAR.COMPANY NUMBER WHICH IS THE ACCTNG CO 10-05-2020
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code_USR);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code_USR);
  PARAMETER(PAR.Pieces_Scheduled);
  PARAMETER(PAR.Weight_Scheduled);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

 }

 //?Allocate consumed items or Deallocate consumed items.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Pieces Scheduled USR = CON.*ZERO
 PAR.Pieces_Scheduled_USR = *ZERO;

 // PAR.Weight Scheduled USR = CON.*ZERO
 PAR.Weight_Scheduled_USR = *ZERO;

 //?Changed to process the Consumption based on Pieces Per Head of
 //?the Component Item Code.  Mark Arensberg  9/11/97
 //?Process by Pieces Per Head from Component Item
 CASE;

 // IF PAR.Pieces Per Head is GT Zero
 IF PAR.Pieces_Per_Head > *ZERO;

 // OR PAR.Piece Count Item USR is yes
 OR PAR.Piece_Count_Item_USR = 'Y';

 CASE;

 // IF PAR.RM Pieces Need USR is LT Zeros
 IF PAR.RM_Pieces_Need_USR < *ZERO;

 //?Process by Consume Priority % using Pieces
 CASE;

 // IF DB1.Consume Priority % is Equal to 100 Pct
 IF DB1.Consume_Priority_Percent = 100;

 // AND PAR.RM Pieces Alloc USR is LT Zeros
 AND ( PAR.RM_Pieces_Alloc_USR < *ZERO;

 // OR PAR.RM Weight Alloc USR is Less than zero
 OR PAR.RM_Weight_Alloc_USR < *ZERO );

 //?Deallocate all of the converted item or what can be deallocated
 CASE;

 // IF PAR.PS Pieces Converted LE PAR.RM Pieces Alloc USR
 IF PAR.PS_Pieces_Converted <= PAR.RM_Pieces_Alloc_USR;

 // PAR.Pieces Scheduled USR = PAR.RM Pieces Alloc USR
 PAR.Pieces_Scheduled_USR = PAR.RM_Pieces_Alloc_USR;

 // Weight Need
 PAR.Weight_Scheduled_USR = PAR.Pieces_Scheduled_USR * PAR.PS_Avg_Piece_Wgt 'H';

 // PAR.RM Pieces Alloc USR = CON.*ZERO
 PAR.RM_Pieces_Alloc_USR = *ZERO;

 // PAR.RM Weight Alloc USR = CON.*ZERO
 PAR.RM_Weight_Alloc_USR = *ZERO;

 //?Deallocate all of the converted item or what can be deallocated
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Pieces Scheduled USR = PAR.PS Pieces Converted
 PAR.Pieces_Scheduled_USR = PAR.PS_Pieces_Converted;

 // Weight Need
 PAR.Weight_Scheduled_USR = PAR.Pieces_Scheduled_USR * PAR.PS_Avg_Piece_Wgt 'H';

 // PAR.RM Pieces Alloc USR = PAR.RM Pieces Alloc USR - PAR.Pieces Scheduled USR
 PAR.RM_Pieces_Alloc_USR = PAR.RM_Pieces_Alloc_USR - PAR.Pieces_Scheduled_USR;

 // PAR.RM Weight Alloc USR = PAR.RM Weight Alloc USR - PAR.Weight Scheduled USR
 PAR.RM_Weight_Alloc_USR = PAR.RM_Weight_Alloc_USR - PAR.Weight_Scheduled_USR;

 ENDIF;

 //?Process by Consume Priority % using Pieces
 // IF DB1.Consume Priority % is Not Equal to 100 PCt
 IF DB1.Consume_Priority_Percent <> 100;

 //?Consume the total pieces or weight needed for priority 99999
 CASE;

 // IF DB1.Consume Priority is 99999
 IF DB1.Consume_Priority = 99999;

 // Pieces Need
 PAR.Pieces_Scheduled_USR = PAR.RM_Pieces_Need_USR * ( DB1.Consume_Priority_Percent / 100
 'H' ) 'H';

 // Weight Need
 PAR.Weight_Scheduled_USR = PAR.Pieces_Scheduled_USR * PAR.PS_Avg_Piece_Wgt 'H';

 //?Consume the total pieces or weight needed for priority 99999
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Pieces Need
 PAR.Pieces_Scheduled_USR = PAR.RM_Pieces_Alloc_USR * ( DB1.Consume_Priority_Percent
 / 100 'H' ) 'H';

 // Weight Need
 PAR.Weight_Scheduled_USR = PAR.Pieces_Scheduled_USR * PAR.PS_Avg_Piece_Wgt 'H';

 ENDIF;

 ENDIF;

 ENDIF;

 //?Process by Pieces Per Head from Component Item
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.RM Weight Need USR is Less than zero
 IF PAR.RM_Weight_Need_USR < *ZERO;

 //?Process by Consume Priority % using Weight
 CASE;

 // IF DB1.Consume Priority % is Equal to 100 Pct
 IF DB1.Consume_Priority_Percent = 100;

 // AND PAR.RM Weight Alloc USR is Less than zero
 AND ( PAR.RM_Weight_Alloc_USR < *ZERO;

 // OR PAR.RM Pieces Alloc USR is LT Zeros
 OR PAR.RM_Pieces_Alloc_USR < *ZERO );

 //?Deallocate all of the converted item or what can be deallocated
 CASE;

 // IF PAR.PS Weight Converted LE PAR.RM Weight Alloc USR
 IF PAR.PS_Weight_Converted <= PAR.RM_Weight_Alloc_USR;

 // PAR.Weight Scheduled USR = PAR.RM Weight Alloc USR
 PAR.Weight_Scheduled_USR = PAR.RM_Weight_Alloc_USR;

 //?Pieces Need
 CASE;

 // IF PAR.PS Avg Piece Wgt is GT Zero
 IF PAR.PS_Avg_Piece_Wgt > *ZERO;

 // Pieces Need USR
 PAR.Pieces_Scheduled_USR = PAR.Weight_Scheduled_USR / PAR.PS_Avg_Piece_Wgt 'H';

 ENDIF;

 // PAR.RM Pieces Alloc USR = CON.*ZERO
 PAR.RM_Pieces_Alloc_USR = *ZERO;

 // PAR.RM Weight Alloc USR = CON.*ZERO
 PAR.RM_Weight_Alloc_USR = *ZERO;

 //?Deallocate all of the converted item or what can be deallocated
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Weight Scheduled USR = PAR.PS Weight Converted
 PAR.Weight_Scheduled_USR = PAR.PS_Weight_Converted;

 //?Pieces Need
 CASE;

 // IF PAR.PS Avg Piece Wgt is GT Zero
 IF PAR.PS_Avg_Piece_Wgt > *ZERO;

 // Pieces Need USR
 PAR.Pieces_Scheduled_USR = PAR.Weight_Scheduled_USR / PAR.PS_Avg_Piece_Wgt 'H';

 ENDIF;

 // PAR.RM Pieces Alloc USR = PAR.RM Pieces Alloc USR - PAR.Pieces Scheduled USR
 PAR.RM_Pieces_Alloc_USR = PAR.RM_Pieces_Alloc_USR - PAR.Pieces_Scheduled_USR;

 // PAR.RM Weight Alloc USR = PAR.RM Weight Alloc USR - PAR.Weight Scheduled USR
 PAR.RM_Weight_Alloc_USR = PAR.RM_Weight_Alloc_USR - PAR.Weight_Scheduled_USR;

 ENDIF;

 //?Process by Consume Priority % using Weight
 // IF DB1.Consume Priority % is Not Equal to 100 PCt
 IF DB1.Consume_Priority_Percent <> 100;

 //?Consume the total pieces or weight needed for priority 99999
 CASE;

 // IF DB1.Consume Priority is 99999
 IF DB1.Consume_Priority = 99999;

 // Weight Need
 PAR.Weight_Scheduled_USR = PAR.RM_Weight_Need_USR * ( DB1.Consume_Priority_Percent / 100
 'H' ) 'H';

 //?Pieces Need
 CASE;

 // IF PAR.PS Avg Piece Wgt is GT Zero
 IF PAR.PS_Avg_Piece_Wgt > *ZERO;

 // Pieces Need
 PAR.Pieces_Scheduled_USR = PAR.Weight_Scheduled_USR / PAR.PS_Avg_Piece_Wgt 'H';

 ENDIF;

 //?Consume the total pieces or weight needed for priority 99999
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Weight Need
 PAR.Weight_Scheduled_USR = PAR.RM_Weight_Alloc_USR * ( DB1.Consume_Priority_Percent
 / 100 'H' ) 'H';

 //?Pieces Need
 CASE;

 // IF PAR.PS Avg Piece Wgt is GT Zero
 IF PAR.PS_Avg_Piece_Wgt > *ZERO;

 // Pieces Need
 PAR.Pieces_Scheduled_USR = PAR.Weight_Scheduled_USR / PAR.PS_Avg_Piece_Wgt 'H';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?Add up consumed for (100% & priority 99999) or priority not 99999
 CASE;

 // IF DB1.Consume Priority % is Equal to 100 Pct
 IF ( DB1.Consume_Priority_Percent = 100;

 // AND DB1.Consume Priority is 99999
 AND DB1.Consume_Priority = 99999 );

 // OR DB1.Consume Priority is NE 99999
 OR DB1.Consume_Priority <> 99999;

 // PAR.Pieces Consumed USR = PAR.Pieces Consumed USR + PAR.Pieces Scheduled USR
 PAR.Pieces_Consumed_USR = PAR.Pieces_Consumed_USR + PAR.Pieces_Scheduled_USR;

 // PAR.Weight Consumed USR = PAR.Weight Consumed USR + PAR.Weight Scheduled USR
 PAR.Weight_Consumed_USR = PAR.Weight_Consumed_USR + PAR.Weight_Scheduled_USR;

 ENDIF;

 //?**UPDATE**
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Conv  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476182;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(DB1.Component_Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Pieces_Scheduled_USR);
 PARAMETER(PAR.Weight_Scheduled_USR);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Process Data record

  // PAR.PS Pieces Converted = DB1.PS Pieces Converted + PAR.Pieces Scheduled
  PAR.PS_Pieces_Converted = DB1.PS_Pieces_Converted + PAR.Pieces_Scheduled;

  // PAR.PS Weight Converted = DB1.PS Weight Converted + PAR.Weight Scheduled
  PAR.PS_Weight_Converted = DB1.PS_Weight_Converted + PAR.Weight_Scheduled;

  //?If weight OR pieces converted is LT 0 then make zero
  CASE;

  // IF PAR.PS Weight Converted is LT Zero
  IF PAR.PS_Weight_Converted < *ZERO;

  // OR PAR.PS Pieces Converted is LT Zeros
  OR PAR.PS_Pieces_Converted < *ZERO;

  // PAR.PS Weight Converted = CON.*ZERO
  PAR.PS_Weight_Converted = *ZERO;

  // PAR.PS Pieces Converted = CON.*ZERO
  PAR.PS_Pieces_Converted = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Conv  CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476183;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create consumed records   -- 10/05/2020 WITH SHIPP CO ON ORDER
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?WAS UPD WITH PAR.COMPANY NUMBER WHICH IS THE ACCTNG CO 10-05-2020
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code_USR);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code_USR);
  PARAMETER(PAR.Pieces_Scheduled);
  PARAMETER(PAR.Weight_Scheduled);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

 }

 ENDIF;

 ENDIF;

 //?** 06/24/2014 JJH E3160
 //?** Changed the definition of the "Average if WPA" field to "Upd
 //?** Standard Production".  Include Item Bill of Material records
 //?** with Upd Standard Production = Blank(yes).
 //?Produced Item
 CASE;

 // IF DB1.BOM Type is Produced - Meat
 IF DB1.BOM_Type = 'P';

 // AND DB1.Production Yield is not equal to zeros
 AND DB1.Production_Yield <> *ZERO;

 // AND DB1.Upd Standard Production is blank
 AND DB1.Upd_Standard_Production = *BLANK;

 //?FP1054 RMC 5/14/09 chg above CASE to ne 0, it was GT 0
 //?If adjustment type is not forecast then allocate total need
 CASE;

 // IF PAR.ATS Adj Type USR is Schedule Adjust Forecast
 IF PAR.ATS_Adj_Type_USR = 'SF';

 //?If adjustment type is not forecast then allocate total need
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Weight Consumed USR = PAR.SM Weight Need USR
 PAR.Weight_Consumed_USR = PAR.SM_Weight_Need_USR;

 // PAR.Pieces Consumed USR = PAR.SM Pieces Need USR
 PAR.Pieces_Consumed_USR = PAR.SM_Pieces_Need_USR;

 ENDIF;

 // Weight Scheduled
 PAR.Weight_Scheduled_USR = PAR.Weight_Consumed_USR * ( DB1.Production_Yield / 100 'H' )
 'H';

 //?The number of Pieces Scheduled for a Produced Item is based
 //?on the Piece Count Item sts of the Component Item Code.
 //?Pieces Scheduled
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // PAR.Pieces Scheduled USR = PAR.Pieces Consumed USR
 PAR.Pieces_Scheduled_USR = PAR.Pieces_Consumed_USR;

 //?Pieces Scheduled
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Pieces Scheduled USR = CON.*ZERO
 PAR.Pieces_Scheduled_USR = *ZERO;

 ENDIF;

 //?**UPDATE**
 EXECUTE FUNCTION(UPD Schedule Adj      RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478187;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(DB1.Component_Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Scheduled_USR);
 PARAMETER(PAR.Pieces_Scheduled_USR);
 PARAMETER(PAR.ATS_Adj_Type_USR);
 {
  //?USER: Processing if Data record not found

  //?04/09/08 PKD Added condition for Freezer Transfer to update
  //?             new bucket
  //?02/05/09 RMC FP1054 Added condition for Schedule override to update
  //?             standard weight and pieces
  //?If forecast adjustment type do not allow negatives
  CASE;

  // IF PAR.ATS Adj Type USR is Schedule Adjust Forecast
  IF PAR.ATS_Adj_Type_USR = 'SF';

  CASE;

  // IF PAR.PS Weight Prod Adj is GT Zero
  IF PAR.PS_Weight_Prod_Adj > *ZERO;

  // OR PAR.PS Pieces Prod Adj is GT Zero
  OR PAR.PS_Pieces_Prod_Adj > *ZERO;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  //?If forecast adjustment type do not allow negatives
  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF PAR.ATS Adj Type USR is Freezer Transfer
  IF PAR.ATS_Adj_Type_USR = 'FT';

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  // IF PAR.ATS Adj Type USR is Schedule Override
  IF PAR.ATS_Adj_Type_USR = 'SV';

  //?output par.adj weight and pieces as standard weight and pieces
  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  ENDIF;

  //?USER: Process Data record

  //?02/05/09 FP1054 RMC Added Schedule Override adj-> type = SV
  //?04/09/08 PKD Added Freezer Transfer update
  CASE;

  // IF PAR.ATS Adj Type USR is Schedule Override
  IF PAR.ATS_Adj_Type_USR = 'SV';

  CASE;

  // IF PAR.PS Pieces Prod Adj is NE Zeros
  IF PAR.PS_Pieces_Prod_Adj <> *ZERO;

  // LCL.PS Avg Piece Wgt = PAR.PS Weight Prod Adj / PAR.PS Pieces Prod Adj *
  LCL.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Adj / PAR.PS_Pieces_Prod_Adj;

  CASE;

  // IF LCL.PS Avg Piece Wgt is LT Zero
  IF LCL.PS_Avg_Piece_Wgt < *ZERO;

  // LCL.PS Avg Piece Wgt = LCL.PS Avg Piece Wgt * CON.-1 *
  LCL.PS_Avg_Piece_Wgt = LCL.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.PS Avg Piece Wgt = CON.*ZERO
  LCL.PS_Avg_Piece_Wgt = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(Chg Schedule Prd      CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1919708;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(LCL.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.Job Name = JOB.*PROGRAM
   DB1.Job_Name = JOB.*PROGRAM;

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.PS Weight Prod Adj = DB1.PS Weight Prod Adj + PAR.PS Weight Prod Adj
  LCL.PS_Weight_Prod_Adj = DB1.PS_Weight_Prod_Adj + PAR.PS_Weight_Prod_Adj;

  // LCL.PS Pieces Prod Adj = DB1.PS Pieces Prod Adj + PAR.PS Pieces Prod Adj
  LCL.PS_Pieces_Prod_Adj = DB1.PS_Pieces_Prod_Adj + PAR.PS_Pieces_Prod_Adj;

  //?If forecast adjustment type do not allow negatives
  CASE;

  // IF PAR.ATS Adj Type USR is Schedule Adjust Forecast
  IF PAR.ATS_Adj_Type_USR = 'SF';

  CASE;

  // IF LCL.PS Weight Prod Adj is LT Zero
  IF LCL.PS_Weight_Prod_Adj < *ZERO;

  // OR LCL.PS Pieces Prod Adj is LT Zeros
  OR LCL.PS_Pieces_Prod_Adj < *ZERO;

  // LCL.PS Weight Prod Adj = CON.*ZERO
  LCL.PS_Weight_Prod_Adj = *ZERO;

  // LCL.PS Pieces Prod Adj = CON.*ZERO
  LCL.PS_Pieces_Prod_Adj = *ZERO;

  ENDIF;

  ENDIF;

  EXECUTE FUNCTION(Chg Schedule Adj      CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478190;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(LCL.PS_Weight_Prod_Adj);
  PARAMETER(LCL.PS_Pieces_Prod_Adj);
  PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.Job Name = JOB.*PROGRAM
   DB1.Job_Name = JOB.*PROGRAM;

  }

  ENDIF;

 }

 ENDIF;

}


ENDIF;

ENDIF;

ENDIF;

