// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKMUXFR
// ?Date: 14.08.2025 Time: 02:52:12
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modifications and Comments
DO;

//?H16853 ISE 11/02/20 - Increased the Buy Order Number field
//? length from 5 to 7.
ENDDO;

EXECUTE FUNCTION(Bld Hst Cmp Dtl       RT) TYPE(RTVOBJ) FILE(PKD5CPP)           AB1204331;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.PCS_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.PCS From Kill Date = CON.0980101
 PAR.PCS_From_Kill_Date = 0980101;

 // PAR.PCS To Kill Date = CON.0980101
 PAR.PCS_To_Kill_Date = 0980101;

 // PAR.Date USR = CON.0980930
 PAR.Date_USR = 0980930;

 // DOW PAR.PCS From Kill Date LE PAR.Date USR
 DOW PAR.PCS_From_Kill_Date <= PAR.Date_USR;

 EXECUTE FUNCTION(Bld Prd Comp Dtl      RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1202233;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(PAR.PCS_From_Kill_Date);
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.PCS_Code);
 PARAMETER(DB1.PCS_Comp_Selection_Type);
 PARAMETER(PAR.PCS_From_Kill_Date);
 PARAMETER(PAR.PCS_To_Kill_Date);
 PARAMETER(DB1.PCS_Comm_Market);
 PARAMETER(DB1.PCS_Comm_Price_Group);
 PARAMETER(DB1.PCS_Market_Add_Deduct);
 PARAMETER(DB1.PCS_Market_Price);
 PARAMETER(DB1.PCS_Market_Date_Method);
 PARAMETER(DB1.PCS_Pricing_Option);
 PARAMETER(DB1.PCS_Carcass_Merit_Pgm);
 PARAMETER(DB1.PCS_Payment_Type);
 PARAMETER(DB1.PCS_Live_As_Carc_Sts);
 PARAMETER(DB1.PCS_Replacement_Cost_Sts);
 PARAMETER(DB1.PCS_Comp_Process_Sts);
 PARAMETER(DB1.PCS_Gross_+_Head);
 PARAMETER(DB1.PCS_Damage_Contract);
 PARAMETER(DB1.PCS_Mkt+_B4_Aftr_CUTOUT);
 PARAMETER(DB1.SR_Source_Code);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(*ZERO);
 PARAMETER('N');
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  // Call program Bld Prd Comp Dtl K/RV XF.
  CALL PROGRAM(Bld Prd Comp Dtl K/RV XF) ('PDCXXFR');
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.PCS_From_Kill_Date);
  PARAMETER(PAR.PCS_To_Kill_Date);
  PARAMETER(PAR.TH_Kill_Product_Value);
  PARAMETER(PAR.TH_Render_Product_Value);

  //?USER: Process Data record

  CASE;

  // IF DB1.TH Kill Date GT PAR.PCS To Kill Date
  IF DB1.TH_Kill_Date > PAR.PCS_To_Kill_Date;

  QUIT;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF DB1.TH Hog Class Type is Resale
  IF DB1.TH_Hog_Class_Type = 'R';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PGM.*Record selected = CND.*YES
  PGM.*Record_selected = 'Y';

  //?SEL:  Source Code
  CASE;

  // IF PAR.SR Source Code NE WRK.Blank USR
  IF PAR.SR_Source_Code <> WRK.Blank_USR;

  // AND PAR.SR Source Code NE DB1.TH Source Code
  AND PAR.SR_Source_Code <> DB1.TH_Source_Code;

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  //?SEL:  Payment Type
  CASE;

  // IF PAR.PCS Payment Type NE WRK.Blank USR
  IF PAR.PCS_Payment_Type <> WRK.Blank_USR;

  // AND PAR.PCS Payment Type NE DB1.TH Payment Type
  AND PAR.PCS_Payment_Type <> DB1.TH_Payment_Type;

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  //?SEL:  Producer Code
  CASE;

  // IF PAR.PD Producer Code NE WRK.Blank USR
  IF PAR.PD_Producer_Code <> WRK.Blank_USR;

  // AND PAR.PD Producer Code NE DB1.PD Producer Code
  AND PAR.PD_Producer_Code <> DB1.PD_Producer_Code;

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  //?SEL:  Tattoo
  CASE;

  // IF PAR.TH Tattoo Number NE WRK.Zero USR
  IF PAR.TH_Tattoo_Number <> WRK.Zero_USR;

  // AND PAR.TH Tattoo Number NE DB1.TH Tattoo Number
  AND PAR.TH_Tattoo_Number <> DB1.TH_Tattoo_Number;

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  //?Record Selected
  CASE;

  // IF PGM.*Record selected is *YES
  IF PGM.*Record_selected = 'Y';

  //?Calculate Base Price
  CASE;

  // IF PAR.PCS Market Price is Not Zeros
  IF PAR.PCS_Market_Price <> *ZERO;

  // PAR.TH CM Base Mkt Price = PAR.PCS Market Price
  PAR.TH_CM_Base_Mkt_Price = PAR.PCS_Market_Price;

  //?-------------------------------------------------------------------
  //?05/30/00 PKD If the Market Price is entered, then the UOM of
  //?             the price is Carcass Hundred Weight (Meat Price).
  // PAR.Pricing UOM USR = CND.Carcass Hundred Weight
  PAR.Pricing_UOM_USR = 'CW';

  //?-------------------------------------------------------------------
  // PAR.BOH Market Add/Deduct = CON.*ZERO
  PAR.BOH_Market_Add_Deduct = *ZERO;

  //?Calculate Base Price
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv PrchPrc Clc Info  RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1116661;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOH_Market_Add_Deduct);
  PARAMETER(PAR.BOH_Quote_Price_Type);
  PARAMETER(PAR.BOH_Quoted_Base_Mkt_Price);
  PARAMETER(PAR.BOH_Commodity_Market_Code);
  PARAMETER(PAR.BOH_Commodity_Price_Group);
  PARAMETER(PAR.BOH_Market_Date_Method);
  PARAMETER(PAR.PC_Contract_Code);
  PARAMETER(PAR.PSC_Sub_Contract_Code);
  PARAMETER(PAR.PO_Option_Code);
  PARAMETER(PAR.CMP_Program_Code);
  {
   //?USER: Processing if Data record not found

   //?1/28/08 SLM LEFT OVER INFORMATION MAY HAVE CAUSED ISSUES
   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.PSC Commodity Market Code = PAR.BOH Commodity Market Code
  PAR.PSC_Commodity_Market_Code = PAR.BOH_Commodity_Market_Code;

  // PAR.PSC Commodity Price Group = PAR.BOH Commodity Price Group
  PAR.PSC_Commodity_Price_Group = PAR.BOH_Commodity_Price_Group;

  //?Market +/- for Live Purchases
  CASE;

  // IF PAR.PCS Comp Selection Type is Comparsion
  IF PAR.PCS_Comp_Selection_Type = 'DC'/'KC';

  CASE;

  // IF PAR.PCS Live As Carc Sts is No
  IF PAR.PCS_Live_As_Carc_Sts = 'N';

  // AND DB1.TH Payment Type is Live
  AND DB1.TH_Payment_Type = 'L';

  // Call program RTV Market Price      XF.
  CALL PROGRAM(RTV Market Price      XF) ('PDMWXFR');
  PARAMETER(PAR.*Return_code);
  PARAMETER(PAR.PSC_Commodity_Market_Code);
  PARAMETER(PAR.PSC_Commodity_Price_Group);
  PARAMETER(DB1.TH_Purchase_Date);
  PARAMETER(*ZERO);
  PARAMETER(WRK.OMS_Market_Price_Amt_Usr);
  PARAMETER(LCL.Pricing_Date_USR);
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER('CUR');
  PARAMETER('H');
  PARAMETER(PAR.OMS_Error_Return_Usr);

  CASE;

  // IF WRK.OMS Market Price Amt Usr EQ WRK.Zero USR
  IF WRK.OMS_Market_Price_Amt_Usr = WRK.Zero_USR;

  // Call program RTV Market Price      XF.
  CALL PROGRAM(RTV Market Price      XF) ('PDMWXFR');
  PARAMETER(PAR.*Return_code);
  PARAMETER(PAR.PSC_Commodity_Market_Code);
  PARAMETER(PAR.PSC_Commodity_Price_Group);
  PARAMETER(DB1.TH_Purchase_Date);
  PARAMETER(*ZERO);
  PARAMETER(WRK.OMS_Market_Price_Amt_Usr);
  PARAMETER(LCL.Pricing_Date_USR);
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER('DPD');
  PARAMETER('H');
  PARAMETER(PAR.OMS_Error_Return_Usr);

  ENDIF;

  // BOH Market Add/Deduct
  PAR.BOH_Market_Add_Deduct = DB1.TH_Live_Purchase_Price - WRK.OMS_Market_Price_Amt_Usr;

  ENDIF;

  ENDIF;

  //?Selection Commodity Market
  CASE;

  // IF PAR.PCS Comm Market NE WRK.Blank USR
  IF PAR.PCS_Comm_Market <> WRK.Blank_USR;

  CASE;

  // IF PAR.BOH Commodity Price Group is Net Revenue
  IF PAR.BOH_Commodity_Price_Group = 'NETREV';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.PSC Commodity Market Code = PAR.PCS Comm Market
  PAR.PSC_Commodity_Market_Code = PAR.PCS_Comm_Market;

  ENDIF;

  ENDIF;

  //?Selection Commodity Market Group
  CASE;

  // IF PAR.PCS Comm Market NE WRK.Blank USR
  IF PAR.PCS_Comm_Market <> WRK.Blank_USR;

  CASE;

  // IF PAR.BOH Commodity Price Group is Net Revenue
  IF PAR.BOH_Commodity_Price_Group = 'NETREV';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.PSC Commodity Price Group = PAR.PCS Comm Price Group
  PAR.PSC_Commodity_Price_Group = PAR.PCS_Comm_Price_Group;

  ENDIF;

  ENDIF;

  //?From/To Market Date
  CASE;

  // IF PAR.PCS Comp Selection Type is Daily
  IF PAR.PCS_Comp_Selection_Type = 'DC'/'DD';

  // PAR.TH Purchase Date = DB1.TH Purchase Date
  PAR.TH_Purchase_Date = DB1.TH_Purchase_Date;

  // PAR.Date To   USR = DB1.TH Purchase Date
  PAR.Date_To_USR = DB1.TH_Purchase_Date;

  //?From/To Market Date
  // IF PAR.PCS Market Date Method is Not Date Range Avg
  IF PAR.PCS_Market_Date_Method <> 'DRA';

  // PAR.TH Purchase Date = DB1.TH Purchase Date
  PAR.TH_Purchase_Date = DB1.TH_Purchase_Date;

  // PAR.Date To   USR = DB1.TH Purchase Date
  PAR.Date_To_USR = DB1.TH_Purchase_Date;

  //?From/To Market Date
  //?From/To Market Date
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.TH Purchase Date = PAR.PCS From Kill Date
  PAR.TH_Purchase_Date = PAR.PCS_From_Kill_Date;

  // PAR.Date To   USR = PAR.PCS To Kill Date
  PAR.Date_To_USR = PAR.PCS_To_Kill_Date;

  ENDIF;

  //?Market Date Method
  CASE;

  // IF PAR.PCS Market Date Method NE WRK.Blank USR
  IF PAR.PCS_Market_Date_Method <> WRK.Blank_USR;

  CASE;

  // IF PAR.BOH Commodity Price Group is Net Revenue
  IF PAR.BOH_Commodity_Price_Group = 'NETREV';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.BOH Market Date Method = PAR.PCS Market Date Method
  PAR.BOH_Market_Date_Method = PAR.PCS_Market_Date_Method;

  ENDIF;

  ENDIF;

  // Call program RTV Market Price      XF.
  CALL PROGRAM(RTV Market Price      XF) ('PDMWXFR');
  PARAMETER(PAR.*Return_code);
  PARAMETER(PAR.PSC_Commodity_Market_Code);
  PARAMETER(PAR.PSC_Commodity_Price_Group);
  PARAMETER(PAR.TH_Purchase_Date);
  PARAMETER(PAR.Date_To_USR);
  PARAMETER(PAR.OMS_Market_Price_Amt_Usr);
  PARAMETER(LCL.Pricing_Date_USR);
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(PAR.BOH_Market_Date_Method);
  PARAMETER('H');
  PARAMETER(PAR.OMS_Error_Return_Usr);

  // PAR.TH CM Base Mkt Price = PAR.OMS Market Price Amt Usr
  PAR.TH_CM_Base_Mkt_Price = PAR.OMS_Market_Price_Amt_Usr;

  CASE;

  // IF PAR.PCS Mkt +/- B4/Aftr Base is Apply Mkt+/- B4/CUTOUT
  IF PAR.PCS_Mkt+_B4_Aftr_CUTOUT = 'B';

  // Market +/- B4 Cutout Adj
  PAR.TH_CM_Base_Mkt_Price = PAR.TH_CM_Base_Mkt_Price + PAR.PCS_Market_Add_Deduct;

  ENDIF;

  // Call program Rtv Commod Group U/M  XF.
  CALL PROGRAM(Rtv Commod Group U/M  XF) ('PDUVXFR');
  PARAMETER(PAR.PSC_Commodity_Price_Group);
  PARAMETER(PAR.Pricing_UOM_USR);

  //?Process special HOG CUTOUT price group
  CASE;

  // IF PAR.PSC Commodity Price Group is CUTOUT
  IF PAR.PSC_Commodity_Price_Group = 'CUTOUT';

  // AND PAR.PSC Commodity Market Code is Hog Purchasing
  AND PAR.PSC_Commodity_Market_Code = 'HOG';

  //?E02521  Hard code for cutout add hog cutout only
  // Call program Rtv Company Value Nbr XF.
  CALL PROGRAM(Rtv Company Value Nbr XF) ('PDHGXFR');
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER('CUTOUT');
  PARAMETER(LCL.System_Value_Numeric_USR);

  CASE;

  // IF LCL.System Value Numeric  USR GT WRK.Zero USR
  IF LCL.System_Value_Numeric_USR > WRK.Zero_USR;

  // LCL.Percent Decimal       USR = LCL.System Value Numeric  USR / CON.100 *
  LCL.Percent_Decimal_USR = LCL.System_Value_Numeric_USR / 100;

  // PAR.TH CM Base Mkt Price = LCL.Percent Decimal       USR * PAR.TH CM Base Mkt Price *
  PAR.TH_CM_Base_Mkt_Price = LCL.Percent_Decimal_USR * PAR.TH_CM_Base_Mkt_Price;

  ENDIF;

  ENDIF;

  // LCL.Days USR = PAR.PCS To Kill Date - PAR.PCS From Kill Date *DAYS
  LCL.Days_USR = DURATION(PAR.PCS_To_Kill_Date PAR.PCS_From_Kill_Date 'DY' 1111111 'NONE'
  'N' 1);

  CASE;

  // IF PAR.BOH Commodity Price Group is Net Revenue
  IF PAR.BOH_Commodity_Price_Group = 'NETREV';

  // AND LCL.Days USR is GT 7
  AND LCL.Days_USR > 7;

  //?02/04/02 PKD For Hitch use the Base Quote on the Buy Order per
  //?             Jancie/Mel.
  // PAR.TH CM Base Mkt Price = PAR.BOH Quoted Base Mkt Price
  PAR.TH_CM_Base_Mkt_Price = PAR.BOH_Quoted_Base_Mkt_Price;

  ENDIF;

  ENDIF;

  //?Base Market Price +/-
  CASE;

  // IF PAR.PCS Market Add/Deduct is Not Zeros
  IF PAR.PCS_Market_Add_Deduct <> *ZERO;

  CASE;

  // IF PAR.PCS Mkt +/- B4/Aftr Base is Apply Mkt+/- After/CUTOUT
  IF PAR.PCS_Mkt+_B4_Aftr_CUTOUT = 'A';

  // Market +/-
  PAR.TH_CM_Base_Mkt_Price = PAR.TH_CM_Base_Mkt_Price + PAR.PCS_Market_Add_Deduct;

  ENDIF;

  //?Base Market Price +/-
  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF PAR.PCS Comp Selection Type is Comparsion
  IF PAR.PCS_Comp_Selection_Type = 'DC'/'KC';

  // Market +/-
  PAR.TH_CM_Base_Mkt_Price = PAR.TH_CM_Base_Mkt_Price + PAR.BOH_Market_Add_Deduct;

  ENDIF;

  ENDIF;

  //?Calculate Gross
  CASE;

  // IF PAR.PCS Live As Carc Sts is No
  IF PAR.PCS_Live_As_Carc_Sts = 'N';

  // AND DB1.TH Payment Type is Live
  AND DB1.TH_Payment_Type = 'L';

  EXECUTE FUNCTION(Clc UOM Extension     IF) TYPE(EXCINTFUN)                      AB1143053;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.TH_Purchase_Date);
  PARAMETER(DB1.TH_Dead_On_Arrival);
  PARAMETER(DB1.TH_Head_Received);
  PARAMETER(DB1.TH_Yard_Deads);
  PARAMETER(DB1.TH_Held_Over);
  PARAMETER(DB1.TH_Head_Condemned);
  PARAMETER(DB1.TH_Head_Killed);
  PARAMETER(DB1.TH_Live_Wgt);
  PARAMETER(DB1.TH_Hot_Wgt);
  PARAMETER(DB1.TH_Avg_Live_Wgt);
  PARAMETER(DB1.TH_CM_Base_Mkt_Price_Amt);
  PARAMETER(DB1.TH_Payment_Gross);
  PARAMETER(DB1.TH_Shipped_Weight);
  PARAMETER(DB1.TH_Head_EUT_KOA);
  PARAMETER(DB1.TH_Live_Purchase_UOM);
  PARAMETER(PAR.TH_CM_Base_Mkt_Price);
  PARAMETER(WRK.Trans_Extended_Amt_Usr);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  {
   //?Execute internal function

   //?Extension
   CASE;

   // IF PAR.Trans UOM USR is Flat
   IF PAR.Trans_UOM_USR = 'FL';

   //?* * * * *   FLAT    * * * * *
   //?FLAT
   CASE;

   // IF PAR.Trans UOM USR is Flat
   IF PAR.Trans_UOM_USR = 'FL';

   // PAR.Trans Extended Amt Usr = PAR.Trans Unit Amt Usr * CON.1 *Rounded
   PAR.Trans_Extended_Amt_Usr = PAR.Trans_Unit_Amt_Usr * 1 'H';

   ENDIF;

   //?Extension
   // IF PAR.Trans UOM USR is Head UOM
   IF PAR.Trans_UOM_USR = 'DH'/'RH'/'YH'/'CH'/'KH'/'NH'/'DY'/'RX'/'HM'/'DE';

   //?* * * * *    HEAD   * * * * *
   //?HEAD
   CASE;

   // IF PAR.Trans UOM USR is Received Head
   IF PAR.Trans_UOM_USR = 'RH';

   // PAR.Trans Extended Amt Usr = PAR.TH Head Received * PAR.Trans Unit Amt Usr *Roun
   PAR.Trans_Extended_Amt_Usr = PAR.TH_Head_Received * PAR.Trans_Unit_Amt_Usr 'H';

   //?HEAD
   // IF PAR.Trans UOM USR is Received Hd less Yard Dd
   IF PAR.Trans_UOM_USR = 'RX';

   // WRK.Net Head Usr = PAR.TH Head Received - PAR.TH Yard Deads
   WRK.Net_Head_Usr = PAR.TH_Head_Received - PAR.TH_Yard_Deads;

   // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
   PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

   //?HEAD
   // IF PAR.Trans UOM USR is Killed Head
   IF PAR.Trans_UOM_USR = 'KH';

   // PAR.Trans Extended Amt Usr = PAR.TH Head Killed * PAR.Trans Unit Amt Usr *Rounde
   PAR.Trans_Extended_Amt_Usr = PAR.TH_Head_Killed * PAR.Trans_Unit_Amt_Usr 'H';

   //?HEAD
   // IF PAR.Trans UOM USR is Condemned Head
   IF PAR.Trans_UOM_USR = 'CH';

   // PAR.Trans Extended Amt Usr = PAR.TH Head Condemned * PAR.Trans Unit Amt Usr *Rou
   PAR.Trans_Extended_Amt_Usr = PAR.TH_Head_Condemned * PAR.Trans_Unit_Amt_Usr 'H';

   //?HEAD
   // IF PAR.Trans UOM USR is Yard Deads Head
   IF PAR.Trans_UOM_USR = 'YH';

   // PAR.Trans Extended Amt Usr = PAR.TH Yard Deads * PAR.Trans Unit Amt Usr *Rounded
   PAR.Trans_Extended_Amt_Usr = PAR.TH_Yard_Deads * PAR.Trans_Unit_Amt_Usr 'H';

   //?HEAD
   // IF PAR.Trans UOM USR is DOA Head
   IF PAR.Trans_UOM_USR = 'DH';

   // PAR.Trans Extended Amt Usr = PAR.TH Dead On Arrival * PAR.Trans Unit Amt Usr *Ro
   PAR.Trans_Extended_Amt_Usr = PAR.TH_Dead_On_Arrival * PAR.Trans_Unit_Amt_Usr 'H';

   //?HEAD
   // IF PAR.Trans UOM USR is Net Head
   IF PAR.Trans_UOM_USR = 'NH';

   // WRK.Net Head Usr = PAR.TH Head Received
   WRK.Net_Head_Usr = PAR.TH_Head_Received;

   // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Yard Deads
   WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Yard_Deads;

   // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Head Condemned
   WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Head_Condemned;

   // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
   PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

   //?HEAD
   // IF PAR.Trans UOM USR is DOA Head + Yard Dead Head
   IF PAR.Trans_UOM_USR = 'DY';

   // WRK.Net Head Usr = PAR.TH Dead On Arrival + PAR.TH Yard Deads
   WRK.Net_Head_Usr = PAR.TH_Dead_On_Arrival + PAR.TH_Yard_Deads;

   // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
   PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

   //?HEAD
   // IF PAR.Trans UOM USR is DOA HD + Yard Dead + EUT
   IF PAR.Trans_UOM_USR = 'DE';

   // WRK.Net Head Usr = PAR.TH Dead On Arrival + PAR.TH Yard Deads
   WRK.Net_Head_Usr = PAR.TH_Dead_On_Arrival + PAR.TH_Yard_Deads;

   // WRK.Net Head Usr = WRK.Net Head Usr + PAR.TH Head EUT/KOA
   WRK.Net_Head_Usr = WRK.Net_Head_Usr + PAR.TH_Head_EUT_KOA;

   // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
   PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

   //?HEAD
   // IF PAR.Trans UOM USR is Received Head /100 Miles
   IF PAR.Trans_UOM_USR = 'HM';

   // PAR.Trans Extended Amt Usr =       *
   PAR.Trans_Extended_Amt_Usr = ( PAR.PSM_Miles_to_Company * PAR.TH_Head_Killed 'H' ) * (
   PAR.Trans_Unit_Amt_Usr / 100 'H' ) 'H';

   ENDIF;

   //?Extension
   // IF PAR.Trans UOM USR is Weight UOM
   IF PAR.Trans_UOM_USR = 'CW'/'LW'/'NL'/'SW'/'LX'/'SX';

   //?* * * * *    WEIGHT   * * * * *
   //?WEIGHT
   CASE;

   // IF PAR.Trans UOM USR is Live Hundred Weight
   IF PAR.Trans_UOM_USR = 'LW';

   // Live hundred wgt
   PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Live_Wgt / 100 'H' ) * PAR.Trans_Unit_Amt_Usr 'H';

   //?WEIGHT
   // IF PAR.Trans UOM USR is LW less Yard Dead Wgt
   IF PAR.Trans_UOM_USR = 'LX';

   //? Calc wgt of yard dead based on Th avg live wgt
   // WRK.Yard dead weight      USR = PAR.TH Avg Live Wgt * PAR.TH Yard Deads *
   WRK.Yard_dead_weight_USR = PAR.TH_Avg_Live_Wgt * PAR.TH_Yard_Deads;

   //?  Subtract Yard Dead wgt from Live Wgt
   // WRK.Live Weight           USR = PAR.TH Live Wgt - WRK.Yard dead weight      USR
   WRK.Live_Weight_USR = PAR.TH_Live_Wgt - WRK.Yard_dead_weight_USR;

   // Live hundred wgt less Yd
   PAR.Trans_Extended_Amt_Usr = ( WRK.Live_Weight_USR / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
   'H';

   //?WEIGHT
   // IF PAR.Trans UOM USR is Carcass Hundred Weight
   IF PAR.Trans_UOM_USR = 'CW';

   // Carcass Hundred Wgt
   PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Hot_Wgt / 100 'H' ) * PAR.Trans_Unit_Amt_Usr 'H';

   //?WEIGHT
   // IF PAR.Trans UOM USR is Net Live Weight
   IF PAR.Trans_UOM_USR = 'NL';

   // WRK.Net Head Usr = PAR.TH Head Received
   WRK.Net_Head_Usr = PAR.TH_Head_Received;

   // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Yard Deads
   WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Yard_Deads;

   // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Head Condemned
   WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Head_Condemned;

   //?* Insert avg live weight
   // WRK.Net Live Weight Usr = WRK.Net Head Usr * PAR.TH Avg Live Wgt *
   WRK.Net_Live_Weight_Usr = WRK.Net_Head_Usr * PAR.TH_Avg_Live_Wgt;

   // Net Live Weight
   PAR.Trans_Extended_Amt_Usr = ( WRK.Net_Live_Weight_Usr / 100 'H' )
   * PAR.Trans_Unit_Amt_Usr 'H';

   //?WEIGHT
   // IF PAR.Trans UOM USR is Shipped Weight - Doa's
   IF PAR.Trans_UOM_USR = 'SW';

   //?  Calc Avg shipped wgt, then calc wgt of DOA'S
   //?This rule was defined on 01/14/97
   //?The Calculations for Avg Shipped Weights are
   //?Head Received should be the live hogs that walk across the scale
   //?Doa's should be the hogs that died either after we collected
   //?      or before we weighed them
   //?Avg Shipped Weight : Shipped Weight /(Head Received + Doa's)
   // WRK.Hd Cnt Org Ship Usr = PAR.TH Head Received + PAR.TH Dead On Arrival
   WRK.Hd_Cnt_Org_Ship_Usr = PAR.TH_Head_Received + PAR.TH_Dead_On_Arrival;

   CASE;

   // IF WRK.Hd Cnt Org Ship Usr is *Zeros
   IF WRK.Hd_Cnt_Org_Ship_Usr = *ZERO;

   // WRK.Avg Weight USR = CON.*ZERO
   WRK.Avg_Weight_USR = *ZERO;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Avg Weight USR = PAR.TH Shipped Weight / WRK.Hd Cnt Org Ship Usr *
   WRK.Avg_Weight_USR = PAR.TH_Shipped_Weight / WRK.Hd_Cnt_Org_Ship_Usr;

   ENDIF;

   // WRK.Doa's Avg Weight Usr = WRK.Avg Weight USR * PAR.TH Dead On Arrival *
   WRK.Doa_s_Avg_Weight_Usr = WRK.Avg_Weight_USR * PAR.TH_Dead_On_Arrival;

   //?  Subtract doa's from Shipped Wgt
   // WRK.Ship Wgt Tot Usr = PAR.TH Shipped Weight - WRK.Doa's Avg Weight Usr
   WRK.Ship_Wgt_Tot_Usr = PAR.TH_Shipped_Weight - WRK.Doa_s_Avg_Weight_Usr;

   // Shipped Weight Total Ext
   PAR.Trans_Extended_Amt_Usr = ( WRK.Ship_Wgt_Tot_Usr / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
   'H';

   //?WEIGHT
   // IF PAR.Trans UOM USR is SW - Doa's WT - Yrd Dd WT
   IF PAR.Trans_UOM_USR = 'SX';

   //?  Calc Avg shipped wgt, then calc wgt of DOA'S and Yard Deads
   //?This rule was defined on 01/14/97
   //?The Calculations for Avg Shipped Weights are
   //?Head Received should be the live hogs that walk across the scale
   //?Doa's should be the hogs that died either after we collected
   //?      or before we weighed them
   //?Avg Shipped Weight : Shipped Weight /(Head Received + Doa's)
   // WRK.Hd Cnt Org Ship Usr = PAR.TH Head Received + PAR.TH Dead On Arrival
   WRK.Hd_Cnt_Org_Ship_Usr = PAR.TH_Head_Received + PAR.TH_Dead_On_Arrival;

   CASE;

   // IF WRK.Hd Cnt Org Ship Usr is *Zeros
   IF WRK.Hd_Cnt_Org_Ship_Usr = *ZERO;

   // WRK.Avg Weight USR = CON.*ZERO
   WRK.Avg_Weight_USR = *ZERO;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Avg Weight USR = PAR.TH Shipped Weight / WRK.Hd Cnt Org Ship Usr *
   WRK.Avg_Weight_USR = PAR.TH_Shipped_Weight / WRK.Hd_Cnt_Org_Ship_Usr;

   ENDIF;

   // WRK.Yard dead weight      USR = WRK.Avg Weight USR * PAR.TH Yard Deads *
   WRK.Yard_dead_weight_USR = WRK.Avg_Weight_USR * PAR.TH_Yard_Deads;

   // WRK.Doa's Avg Weight Usr = WRK.Avg Weight USR * PAR.TH Dead On Arrival *
   WRK.Doa_s_Avg_Weight_Usr = WRK.Avg_Weight_USR * PAR.TH_Dead_On_Arrival;

   //?  Subtract Doa's and Subtract Yard Dead wgt from Shipped Wgt
   // WRK.Ship Wgt Tot Usr = PAR.TH Shipped Weight - WRK.Doa's Avg Weight Usr
   WRK.Ship_Wgt_Tot_Usr = PAR.TH_Shipped_Weight - WRK.Doa_s_Avg_Weight_Usr;

   // WRK.Ship Wgt Tot Usr = WRK.Ship Wgt Tot Usr - WRK.Yard dead weight      USR
   WRK.Ship_Wgt_Tot_Usr = WRK.Ship_Wgt_Tot_Usr - WRK.Yard_dead_weight_USR;

   // Shipped wgt less Yd
   PAR.Trans_Extended_Amt_Usr = ( WRK.Ship_Wgt_Tot_Usr / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
   'H';

   ENDIF;

   //?Extension
   // IF PAR.Trans UOM USR is Value UOM
   IF PAR.Trans_UOM_USR = 'GV'/'BD';

   //?* * * * *    VALUE    * * * * *
   //?VALUE
   CASE;

   // IF PAR.Trans UOM USR is Gross Hundred Value
   IF PAR.Trans_UOM_USR = 'GV';

   // Gross Hundred Value
   PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Payment_Gross / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
   'H';

   //?VALUE
   // IF PAR.Trans UOM USR is Carcass Hundred Weight
   IF PAR.Trans_UOM_USR = 'CW';

   // Carcass Hundred Value
   PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Hot_Wgt / 100 'H' ) * PAR.Trans_Unit_Amt_Usr 'H';

   //?VALUE
   // IF PAR.Trans UOM USR is Base Market Dollars
   IF PAR.Trans_UOM_USR = 'BD';

   // Call program Clc Base Mkt Dollars  XF.
   CALL PROGRAM(Clc Base Mkt Dollars  XF) ('PKBSE01');
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.TH_Purchase_Date);
   PARAMETER(PAR.TH_Live_Wgt);
   PARAMETER(PAR.DED_D_A_Code);
   PARAMETER(WRK.Base_Mkt_Prc_Amt_Tot_USR);

   CASE;

   // IF WRK.Base Mkt Prc Amt Tot USR GE WRK.Zero USR
   IF WRK.Base_Mkt_Prc_Amt_Tot_USR >= WRK.Zero_USR;

   // Base Market Dollars
   PAR.Trans_Extended_Amt_Usr = ( WRK.Base_Mkt_Prc_Amt_Tot_USR / 100 'H' )
   * PAR.Trans_Unit_Amt_Usr 'H';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Trans Extended Amt Usr = CON.*ZERO
   PAR.Trans_Extended_Amt_Usr = *ZERO;

   ENDIF;

   ENDIF;

   //?Extension
   // IF PAR.Trans UOM USR is Percent UOM
   IF PAR.Trans_UOM_USR = *BLANK;

   //?* * * * *    PERCENT   * * * * *
   //?PERCENT
   CASE;

   // IF PAR.Trans UOM USR is Percent of Gross Value
   IF PAR.Trans_UOM_USR = *BLANK;

   // Percent of Gross Value
   PAR.Trans_Extended_Amt_Usr = ( PAR.Trans_Unit_Amt_Usr / 100 'H' ) * PAR.TH_Payment_Gross
   'H';

   ENDIF;

   ENDIF;

  }

  // PAR.Total Carc Val Tot USR = WRK.Trans Extended Amt Usr
  PAR.Total_Carc_Val_Tot_USR = WRK.Trans_Extended_Amt_Usr;

  //?Calculate Gross
  // IF PAR.PCS Live As Carc Sts is Yes
  IF PAR.PCS_Live_As_Carc_Sts = 'Y';

  // OR DB1.TH Payment Type is Carcass Merit
  OR DB1.TH_Payment_Type = 'C';

  //?Carcass Merit Program
  CASE;

  // IF PAR.PCS Carcass Merit Pgm is *Blank
  IF PAR.PCS_Carcass_Merit_Pgm = *BLANK;

  //?Carcass Merit Program
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.CMP Program Code = PAR.PCS Carcass Merit Pgm
  PAR.CMP_Program_Code = PAR.PCS_Carcass_Merit_Pgm;

  ENDIF;

  //?E2521 03/27/13  slm mpr cutout or hog cutout. hard code remove in next
  EXECUTE FUNCTION(Clc Crc Mrt Activ Crc RT) TYPE(RTVOBJ) FILE(PKB1CPP)           AB1116758;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.TH_Source_Type);
  PARAMETER(DB1.TH_Payment_Type);
  PARAMETER(PAR.BOH_Quote_Price_Type);
  PARAMETER(PAR.CMP_Program_Code);
  PARAMETER(DB1.TH_Purchase_Date);
  PARAMETER(PAR.TH_CM_Base_Mkt_Price);
  PARAMETER('PAY');
  PARAMETER(PAR.Pricing_UOM_USR);
  PARAMETER(PAR.Head_Total_USR);
  PARAMETER(PAR.Sort_Loss_Tot_USR);
  PARAMETER(PAR.Std_Yield_Tot_USR);
  PARAMETER(PAR.Weight_Tot_USR);
  PARAMETER(PAR.Adj_Base_Carc_Val_Tot_USR);
  PARAMETER(PAR.Lean_Percent_Tot_USR);
  PARAMETER(PAR.Lean_Add_Ded_Val_Tot_USR);
  PARAMETER(PAR.Total_Carc_Val_Tot_USR);
  PARAMETER(PAR.Base_Carc_Val_Tot_USR);
  PARAMETER('P');
  PARAMETER('Y');
  PARAMETER(DB1.TH_PHA_Lean_Prm_Crc_CWT);
  PARAMETER(DB1.TH_PHA_Sort_Disc_Fctr);
  PARAMETER(PAR.TH_Meat_Value_Factor_Amt);
  PARAMETER(PAR.TH_Fixed_Cost_Amount);
  PARAMETER(PAR.Gross_Before_Sort_HD_Usr);
  PARAMETER(WRK.Cmp_Base_Carc);
  PARAMETER(WRK.Cmp_Lean_Premium_Carc);
  PARAMETER(WRK.Cmp_Yield_Gain_Loss_Carc);
  PARAMETER(WRK.Cmp_Carc_Val_Carc);
  PARAMETER(WRK.Cmp_Sort_Dsc_Carc);
  PARAMETER(WRK.Cmp_Std_Yield);
  PARAMETER(WRK.Cmp_Base_Mkt_Price);
  PARAMETER(WRK.Cmp_Base_Live);
  PARAMETER(WRK.Cmp_Lean_Premium_Live);
  PARAMETER(WRK.Cmp_Yield_Gain_Loss_Live);
  PARAMETER(WRK.Cmp_Carc_Val_Live);
  PARAMETER(WRK.Cmp_Sort_Dsc_Live);
  PARAMETER('N');
  PARAMETER(PAR.Print_Comp_Sum_Dtl_STS);
  PARAMETER(WRK.TH_MPR_Sort_Loss);
  {
   //?USER: Initialize routine

   //?10/11/17 Calc MPR Sort Loss -- change on otherwise stmt
   //?5/23/03  Calc MPR Sort Loss in Carcass Analysis Detail section
   //?Initialize Total Fields
   DO;

   // PAR.Head Total USR = CON.*ZERO
   PAR.Head_Total_USR = *ZERO;

   // PAR.Sort Loss Tot USR = CON.*ZERO
   PAR.Sort_Loss_Tot_USR = *ZERO;

   // PAR.Std Yield % Tot USR = CON.*ZERO
   PAR.Std_Yield_Tot_USR = *ZERO;

   // PAR.Weight Tot USR = CON.*ZERO
   PAR.Weight_Tot_USR = *ZERO;

   // PAR.Base Carc Val Tot USR = CON.*ZERO
   PAR.Base_Carc_Val_Tot_USR = *ZERO;

   // PAR.Adj Base Carc Val Tot USR = CON.*ZERO
   PAR.Adj_Base_Carc_Val_Tot_USR = *ZERO;

   // PAR.Lean Percent Tot USR = CON.*ZERO
   PAR.Lean_Percent_Tot_USR = *ZERO;

   // PAR.Lean Add/Ded Val Tot USR = CON.*ZERO
   PAR.Lean_Add_Ded_Val_Tot_USR = *ZERO;

   // PAR.Total Carc Val Tot USR = CON.*ZERO
   PAR.Total_Carc_Val_Tot_USR = *ZERO;

   // PAR.TH MPR Sort Loss = CON.*ZERO
   PAR.TH_MPR_Sort_Loss = *ZERO;

   // PAR.Gross Before Sort /HD Usr = CON.*ZERO
   PAR.Gross_Before_Sort_HD_Usr = *ZERO;

   ENDDO;

   //?10/23/2007 CMP Grade Type Adj to store the adj for backfat
   EXECUTE FUNCTION(Rtv CMP Payment Info3 RT) TYPE(RTVOBJ) FILE(PKARREP)           AB1281177;
   PARAMETER(PAR.CMP_Program_Code);
   PARAMETER(WRK.#Txt_USR);
   PARAMETER(PAR.CMP_Grading_Type);
   PARAMETER(PAR.CMP_Sort_Basis);
   PARAMETER(PAR.CMP_Carc_Wgt_Type);
   PARAMETER(PAR.CMP_Std_Lean_Percent);
   PARAMETER(PAR.CMP_Lean_Factor);
   PARAMETER(PAR.CMP_Optimal_Row_Nbr_f_srt);
   PARAMETER(PAR.CMP_Type);
   PARAMETER(WRK.CMP_Market_Add_Deduct);
   PARAMETER(PAR.CMP_of_Carcass_Cutout);
   PARAMETER(PAR.CMP_Fixed_Cost_Per_Head);
   PARAMETER(PAR.CMP_Grade_Type_Adj);
   PARAMETER(WRK.CMP_CLC_Premium_First);
   PARAMETER(WRK.RS_Record_Status);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?comments
   DO;

   //?12/15/06 PKD If Grading Type is Meat Value, then retrieve the
   //?             USDA Pork Cutout Price for the Meav Value Factor.
   //?11/12/13 slm chnges per TF
   //?             pull the mrk and the group from the Cmp mkt/grp
   //?             need this for Triumph Foods  - Meat Value
   //?             created nw file to hold this data
   ENDDO;

   // LCL.CMP Effect Kill Date = PAR.TH Purchase Date
   LCL.CMP_Effect_Purchase_Date = PAR.TH_Purchase_Date;

   EXECUTE FUNCTION(Rtv Carcass Merit Prog RT) TYPE(RTVOBJ) FILE(PLBPCPP)          AB1316570;
   PARAMETER(PAR.CMP_Program_Code);
   PARAMETER(LCL.CMP_Effect_Purchase_Date);
   PARAMETER(LCL.CMP_Commodity_Market);
   PARAMETER(LCL.CMP_Commodity_Group);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    CASE;

    // IF PAR.CMP Effect Kill Date GE DB1.CMP Effect Kill Date
    IF PAR.CMP_Effect_Purchase_Date >= DB1.CMP_Effect_Purchase_Date;

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

    // IF PAR.CMP Effect Kill Date LT DB1.CMP Effect Kill Date
    IF PAR.CMP_Effect_Purchase_Date < DB1.CMP_Effect_Purchase_Date;

    ENDIF;

   }

   CASE;

   // IF PAR.CMP Grading Type is Meat Value
   IF PAR.CMP_Grading_Type = 'M';

   // Call program RTV Market Price      XF.
   CALL PROGRAM(RTV Market Price      XF) ('PDMWXFR');
   PARAMETER(WRK.*Return_code);
   PARAMETER(LCL.CMP_Commodity_Market);
   PARAMETER(LCL.CMP_Commodity_Group);
   PARAMETER(PAR.TH_Purchase_Date);
   PARAMETER(*ZERO);
   PARAMETER(LCL.OMS_Market_Price_Amt_Usr);
   PARAMETER(LCL.Pricing_Date_USR);
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER('CUR');
   PARAMETER('H');
   PARAMETER(WRK.OMS_Error_Return_Usr);

   //?FIXED COST
   //?if LCL.OMS Market Price Amt Usr is zero, then send a message
   //?to some distribution list Market Price not available for Fixed Cost
   //?Calculation.
   // Market Prc Hog/Cutout USR
   LCL.Market_Prc_Hog_Cutout_USR = LCL.OMS_Market_Price_Amt_Usr * (
   PAR.CMP_of_Carcass_Cutout / 100 'H' ) 'H';

   ENDIF;

   //?USER: Process Data record

   CASE;

   // IF PAR.Competitors Processing is Yes
   IF ( PAR.Competitors_Processing = 'Y';

   // AND PAR.CM Processing Type Usr is Payment
   AND PAR.CM_Processing_Type_Usr = 'P';

   // AND DB1.CD Record Add/Del Sts is Delete
   AND DB1.CD_Record_Add_Del_Sts = 'D' );

   // OR PAR.Competitors Processing is No
   OR ( PAR.Competitors_Processing = 'N';

   // AND PAR.CM Processing Type Usr is Analysis
   AND PAR.CM_Processing_Type_Usr = 'A';

   // AND DB1.CD Record Add/Del Sts is Delete
   AND DB1.CD_Record_Add_Del_Sts = 'D' );

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF DB1.CD Adjust/Add Type is Not Add w/Average Value
   IF DB1.CD_Adjust_Add_Type = 'HST'/'AVG'/'2WK'/'4WK'/'LN%'/*BLANK/'LOT';

   // OR PAR.Competitors Processing is Yes
   OR PAR.Competitors_Processing = 'Y';

   //?move db1 ca fields to par ca fields
   DO;

   // PAR.CD CA Sort Loss = DB1.CD CA Sort Loss
   PAR.CD_CA_Sort_Loss = DB1.CD_CA_Sort_Loss;

   // PAR.CD CA Std Yield = DB1.CD CA Std Yield
   PAR.CD_CA_Std_Yield = DB1.CD_CA_Std_Yield;

   // PAR.CD CA Base Carcass CWT = DB1.CD CA Base Carcass CWT
   PAR.CD_CA_Base_Carcass_CWT = DB1.CD_CA_Base_Carcass_CWT;

   // PAR.CD CA Crc Value Per CWT = DB1.CD CA Crc Value Per CWT
   PAR.CD_CA_Crc_Value_Per_CWT = DB1.CD_CA_Crc_Value_Per_CWT;

   // PAR.CD CA Base Carc Value = DB1.CD CA Base Carc Value
   PAR.CD_CA_Base_Carc_Value = DB1.CD_CA_Base_Carc_Value;

   // PAR.CD CA Crc Value $ Per Hd = DB1.CD CA Crc Value $ Per Hd
   PAR.CD_CA_Crc_Value_$_Per_Hd = DB1.CD_CA_Crc_Value_$_Per_Hd;

   // PAR.CD CA Lean Premium CWT = DB1.CD CA Lean Premium CWT
   PAR.CD_CA_Lean_Premium_CWT = DB1.CD_CA_Lean_Premium_CWT;

   // PAR.CD CA Lean Premium $ P Hd = DB1.CD CA Lean Premium $ P Hd
   PAR.CD_CA_Lean_Premium_$_P_Hd = DB1.CD_CA_Lean_Premium_$_P_Hd;

   // PAR.CD CA Gross Value Per CWT = DB1.CD CA Gross Value Per CWT
   PAR.CD_CA_Gross_Value_Per_CWT = DB1.CD_CA_Gross_Value_Per_CWT;

   // PAR.CD CA Gross Value $ P Hd = DB1.CD CA Gross Value $ P Hd
   PAR.CD_CA_Gross_Value_$_P_Hd = DB1.CD_CA_Gross_Value_$_P_Hd;

   ENDDO;

   //?move db1 CD fields to par CD fields
   DO;

   // PAR.CD Sort Loss = DB1.CD Sort Loss
   PAR.CD_Sort_Loss = DB1.CD_Sort_Loss;

   // PAR.CD STD Yield = PAR.CMMR Std Dressing Yield%
   PAR.CD_STD_Yield = PAR.CMMR_Std_Dressing_Yield;

   // PAR.CD Base Carcass CWT = DB1.CD Base Carcass CWT
   PAR.CD_Base_Carcass_CWT = DB1.CD_Base_Carcass_CWT;

   // PAR.CD Crc Value Per CWT = DB1.CD Crc Value Per CWT
   PAR.CD_Crc_Value_Per_CWT = DB1.CD_Crc_Value_Per_CWT;

   // PAR.CD Base Carc Value = DB1.CD Base Carc Value
   PAR.CD_Base_Carc_Value = DB1.CD_Base_Carc_Value;

   // PAR.CD Crc Value $ Per Hd = DB1.CD Crc Value $ Per Hd
   PAR.CD_Crc_Value_$_Per_Hd = DB1.CD_Crc_Value_$_Per_Hd;

   // PAR.CD Lean Premium CWT = DB1.CD Lean Premium CWT
   PAR.CD_Lean_Premium_CWT = DB1.CD_Lean_Premium_CWT;

   // PAR.CD Lean Premium $ Per Hd = DB1.CD Lean Premium $ Per Hd
   PAR.CD_Lean_Premium_$_Per_Hd = DB1.CD_Lean_Premium_$_Per_Hd;

   // PAR.CD Gross Value Per CWT = DB1.CD Gross Value Per CWT
   PAR.CD_Gross_Value_Per_CWT = DB1.CD_Gross_Value_Per_CWT;

   // PAR.CD Gross Value $ Per HD = DB1.CD Gross Value $ Per HD
   PAR.CD_Gross_Value_$_Per_HD = DB1.CD_Gross_Value_$_Per_HD;

   // PAR.CD Gross Before Sort CWT = DB1.CD Gross Before Sort CWT
   PAR.CD_Gross_Before_Sort_CWT = DB1.CD_Gross_Before_Sort_CWT;

   // PAR.CD Gross Before Sort /HD = DB1.CD Gross Before Sort /HD
   PAR.CD_Gross_Before_Sort_HD = DB1.CD_Gross_Before_Sort_HD;

   ENDDO;

   //?Use competitors Averages or regular carcass analysis
   CASE;

   // IF PAR.Average Pay Sts Usr is Yes
   IF PAR.Average_Pay_Sts_Usr = 'Y';

   //?Move Averages to Cd fields before extension or totals are accum
   DO;

   // PAR.CD Sort Loss = WRK.Cmp Sort Dsc Carc
   PAR.CD_Sort_Loss = WRK.Cmp_Sort_Dsc_Carc;

   // PAR.CD STD Yield = WRK.Cmp Std Yield
   PAR.CD_STD_Yield = WRK.Cmp_Std_Yield;

   // PAR.CD Base Carcass CWT = WRK.Cmp Base Carc
   PAR.CD_Base_Carcass_CWT = WRK.Cmp_Base_Carc;

   // PAR.CD Crc Value Per CWT = WRK.Cmp Carc Val Carc
   PAR.CD_Crc_Value_Per_CWT = WRK.Cmp_Carc_Val_Carc;

   // PAR.CD Lean Premium CWT = WRK.Cmp Lean Premium Carc
   PAR.CD_Lean_Premium_CWT = WRK.Cmp_Lean_Premium_Carc;

   // PAR.CD Gross Value Per CWT = WRK.Cmp Gross Carc
   PAR.CD_Gross_Value_Per_CWT = WRK.Cmp_Gross_Carc;

   //?RE EXTENDED
   // CD Base Carc Value
   PAR.CD_Base_Carc_Value = PAR.CD_Base_Carcass_CWT * ( DB1.CD_Carcass_Hot_Weight / 100 'H' )
   'H';

   // CD Crc Value $ Per Hd
   PAR.CD_Crc_Value_$_Per_Hd = PAR.CD_Crc_Value_Per_CWT * ( DB1.CD_Carcass_Hot_Weight / 100
   'H' ) 'H';

   // CD LEAN PREM $ Per Hd
   PAR.CD_Lean_Premium_$_Per_Hd = PAR.CD_Lean_Premium_CWT * ( DB1.CD_Carcass_Hot_Weight
   / 100 'H' ) 'H';

   // PAR.CD Gross Value $ Per HD = PAR.CD Crc Value $ Per Hd + PAR.CD Lean Premium $
   PAR.CD_Gross_Value_$_Per_HD = PAR.CD_Crc_Value_$_Per_Hd + PAR.CD_Lean_Premium_$_Per_Hd;

   // PAR.CD Gross Value Per CWT = PAR.CD Crc Value Per CWT + PAR.CD Lean Premium CWT
   PAR.CD_Gross_Value_Per_CWT = PAR.CD_Crc_Value_Per_CWT + PAR.CD_Lean_Premium_CWT;

   ENDDO;

   //?Use competitors Averages or regular carcass analysis
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Carcass Analysis Detail
   DO;

   EXECUTE FUNCTION(Rtv StdYl/SrtDsc/MdPt RT) TYPE(RTVOBJ) FILE(PKBYREP)           AB1263783;
   PARAMETER(PAR.CMP_Program_Code);
   PARAMETER(PAR.CMMR_Row_Number);
   PARAMETER(DB1.CD_Carcass_Hot_Weight);
   PARAMETER(PAR.CMMR_Std_Dressing_Yield);
   PARAMETER(PAR.CMMR_Midpoint);
   PARAMETER(PAR.CD_Sort_Loss);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PAR.CD Sort Loss = DB1.CMMR Sort Discount
    PAR.CD_Sort_Loss = DB1.CMMR_Sort_Discount;

    QUIT;

   }

   //?Commented out 12/16/98 PKD.
   //?CD Base Carcass CWT  12/16/98 PKD
   CASE;

   // IF PAR.Pricing UOM USR is Live Hundred Weight
   IF PAR.Pricing_UOM_USR = 'LW';

   CASE;

   // IF PAR.CMMR Std Dressing Yield% is ne 0
   IF PAR.CMMR_Std_Dressing_Yield <> *ZERO;

   // CD Base Carcass CWT
   PAR.CD_Base_Carcass_CWT = PAR.TH_CM_Base_Mkt_Price / ( PAR.CMMR_Std_Dressing_Yield / 100
   'H' ) 'H';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.CD Base Carcass CWT = CON.*ZERO
   PAR.CD_Base_Carcass_CWT = *ZERO;

   ENDIF;

   //?CD Base Carcass CWT  12/16/98 PKD
   // IF PAR.Pricing UOM USR is Carcass Hundred Weight
   IF PAR.Pricing_UOM_USR = 'CW';

   // PAR.CD Base Carcass CWT = PAR.TH CM Base Mkt Price
   PAR.CD_Base_Carcass_CWT = PAR.TH_CM_Base_Mkt_Price;

   ENDIF;

   // CD Base Carc Value
   PAR.CD_Base_Carc_Value = PAR.CD_Base_Carcass_CWT * ( DB1.CD_Carcass_Hot_Weight / 100 'H' )
   'H';

   //?Commented out 12/16/98 PKD.
   CASE;

   // IF WRK.CMP CLC Premium First is Sort First
   IF WRK.CMP_CLC_Premium_First = *BLANK;

   //?CAS: Calc CD Crc Value Per CWT w/ Quote Type.   08/03/95 PKP
   CASE;

   // IF PAR.CMP Sort Basis is Live
   IF PAR.CMP_Sort_Basis = 'L';

   CASE;

   // IF PAR.Pricing UOM USR is Live Hundred Weight
   IF PAR.Pricing_UOM_USR = 'LW';

   // CD Crc Value Per CWT
   PAR.CD_Crc_Value_Per_CWT = ( PAR.TH_CM_Base_Mkt_Price + PAR.CD_Sort_Loss ) / (
   PAR.CMMR_Std_Dressing_Yield / 100 'H' ) 'H';

   // IF PAR.Pricing UOM USR is Carcass Hundred Weight
   IF PAR.Pricing_UOM_USR = 'CW';

   // CD Crc Value Per CWT
   PAR.CD_Crc_Value_Per_CWT = PAR.CD_Base_Carcass_CWT + ( PAR.CD_Sort_Loss / (
   PAR.CMMR_Std_Dressing_Yield / 100 'H' ) 'H' );

   ENDIF;

   //?CAS: Calc CD Crc Value Per CWT w/ Quote Type.   08/03/95 PKP
   // IF PAR.CMP Sort Basis is Meat
   IF PAR.CMP_Sort_Basis = 'M';

   CASE;

   // IF PAR.Pricing UOM USR is Live Hundred Weight
   IF PAR.Pricing_UOM_USR = 'LW';

   // CD Crc Value Per CWT NEW
   PAR.CD_Crc_Value_Per_CWT = ( PAR.TH_CM_Base_Mkt_Price + ( PAR.CD_Sort_Loss * (
   PAR.CMMR_Std_Dressing_Yield / 100 'H' ) 'H' ) ) / ( PAR.CMMR_Std_Dressing_Yield / 100
   'H' ) 'H';

   // IF PAR.Pricing UOM USR is Carcass Hundred Weight
   IF PAR.Pricing_UOM_USR = 'CW';

   // CD Crc Value Per CWT
   PAR.CD_Crc_Value_Per_CWT = PAR.CD_Base_Carcass_CWT + PAR.CD_Sort_Loss;

   ENDIF;

   //?CAS: Calc CD Crc Value Per CWT w/ Quote Type.   08/03/95 PKP
   // IF PAR.CMP Sort Basis is % of Base Price
   IF PAR.CMP_Sort_Basis = 'P';

   //?06/20/05 PKD HPE011 Add calculation for Sort Loss based on
   //?             percent of base.
   // Synon (15,5) work field =       * CD Crc Value Per CWT
   LCL.*Synon_155_work_field = PAR.CD_Base_Carcass_CWT * ( PAR.CD_Sort_Loss / 100 'H' ) 'H';

   // PAR.CD Crc Value Per CWT = LCL.*Synon (15,5) work field * CON.1 *Rounded
   PAR.CD_Crc_Value_Per_CWT = LCL.*Synon_155_work_field * 1 'H';

   //?CAS: Calc CD Crc Value Per CWT w/ Quote Type.   08/03/95 PKP
   // IF PAR.CMP Sort Basis is None
   IF PAR.CMP_Sort_Basis = *BLANK;

   // PAR.CD Crc Value Per CWT = PAR.CD Base Carcass CWT
   PAR.CD_Crc_Value_Per_CWT = PAR.CD_Base_Carcass_CWT;

   ENDIF;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?A = TH CM Base Market Price or CD Base Carcass CWT
   // PAR.CD Crc Value Per CWT = PAR.CD Base Carcass CWT
   PAR.CD_Crc_Value_Per_CWT = PAR.CD_Base_Carcass_CWT;

   ENDIF;

   // CD Crc Value $ Per Hd
   PAR.CD_Crc_Value_$_Per_Hd = PAR.CD_Crc_Value_Per_CWT * ( DB1.CD_Carcass_Hot_Weight / 100
   'H' ) 'H';

   //?10/23/2007 CMP Grade Type Adj will be used on the Back Fat
   //?Grade/Premium
   CASE;

   // IF PAR.CMP Grading Type is Ln%N/SrtDscF/FltCrc/MtVal
   IF PAR.CMP_Grading_Type = 'C'/'D'/'L'/'S'/'M';

   //?06/20/05 PKD HPE011 Added Meat Value to Conditoin
   //?LEAN PERCENT NPPC or SORT DISCOUNT FACTOR or FLAT CARCASS WEIGHT
   DO;

   //?031606 slm added the meat value for TF Changes on Prd Avgs
   CASE;

   // IF DB1.CD Adjust/Add Type is Producer Historical Avg
   IF DB1.CD_Adjust_Add_Type = 'HST'/'2WK'/'4WK'/'LOT';

   // AND PAR.Competitors Processing is No
   AND PAR.Competitors_Processing = 'N';

   // AND PAR.CM Processing Type Usr is Payment
   AND PAR.CM_Processing_Type_Usr = 'P';

   // AND PAR.CMP Grading Type is Not Meat Value
   AND PAR.CMP_Grading_Type = 'B'/'C'/'G'/'F'/'P'/'D'/'L'/'S';

   //?** PAID WITH HISTORY **
   CASE;

   // IF PAR.CMP Grading Type is Lean Percent NPPC
   IF PAR.CMP_Grading_Type = 'D'/'L';

   // OR PAR.CMP Grading Type is Meat Value
   OR PAR.CMP_Grading_Type = 'M';

   //?06/20/05 PKD HPE011 Added Meat Value to the condition.
   // PAR.CD Lean Premium CWT = PAR.TH PHA Lean Prm /Crc CWT
   PAR.CD_Lean_Premium_CWT = PAR.TH_PHA_Lean_Prm_Crc_CWT;

   // Lean Premium Value
   PAR.CD_Lean_Premium_$_Per_Hd = PAR.CD_Lean_Premium_CWT * ( DB1.CD_Carcass_Hot_Weight
   / 100 );

   // PAR.CD Gross Value Per CWT = PAR.CD Crc Value Per CWT + PAR.CD Lean Premium CWT
   PAR.CD_Gross_Value_Per_CWT = PAR.CD_Crc_Value_Per_CWT + PAR.CD_Lean_Premium_CWT;

   // PAR.CD Gross Value $ Per HD = PAR.CD Crc Value $ Per Hd + PAR.CD Lean Premium $ Per Hd
   PAR.CD_Gross_Value_$_Per_HD = PAR.CD_Crc_Value_$_Per_Hd + PAR.CD_Lean_Premium_$_Per_Hd;

   //?** PAID WITH HISTORY **
   // IF PAR.CMP Grading Type is Flat Carcass Weight
   IF PAR.CMP_Grading_Type = 'C';

   // PAR.CD Lean Premium CWT = CON.*ZERO
   PAR.CD_Lean_Premium_CWT = *ZERO;

   // PAR.CD Lean Premium $ Per Hd = CON.*ZERO
   PAR.CD_Lean_Premium_$_Per_Hd = *ZERO;

   // PAR.CD Gross Value Per CWT = PAR.CD Crc Value Per CWT + PAR.CD Lean Premium CWT
   PAR.CD_Gross_Value_Per_CWT = PAR.CD_Crc_Value_Per_CWT + PAR.CD_Lean_Premium_CWT;

   // Total Carcass Value
   PAR.CD_Gross_Value_$_Per_HD = PAR.CD_Gross_Value_Per_CWT * ( DB1.CD_Carcass_Hot_Weight
   / 100 'H' ) 'H';

   //?** PAID WITH HISTORY **
   // IF PAR.CMP Grading Type is Sort Discount Factor
   IF PAR.CMP_Grading_Type = 'S';

   //?**** Pay by Factory.  ****
   // PAR.CMMC Premium Value = PAR.TH PHA Sort Disc Fctr % / CON.100 *Rounded
   PAR.CMMC_Premium_Value = PAR.TH_PHA_Sort_Disc_Fctr / 100 'H';

   // Total Carcss Per CWT MULT
   PAR.CD_Gross_Value_Per_CWT = PAR.CD_Crc_Value_Per_CWT * PAR.CMMC_Premium_Value 'H';

   // Total Carcass Value
   PAR.CD_Gross_Value_$_Per_HD = PAR.CD_Gross_Value_Per_CWT * ( DB1.CD_Carcass_Hot_Weight
   / 100 'H' ) 'H';

   // Lean Premium Per CWT
   PAR.CD_Lean_Premium_CWT = PAR.CD_Gross_Value_Per_CWT - PAR.CD_Crc_Value_Per_CWT;

   // Lean Premium Value
   PAR.CD_Lean_Premium_$_Per_Hd = PAR.CD_Gross_Value_$_Per_HD - PAR.CD_Crc_Value_$_Per_Hd;

   ENDIF;

   // IF DB1.CD Adjust/Add Type is Add w/Average Value
   IF DB1.CD_Adjust_Add_Type = 'ADD';

   // AND PAR.Competitors Processing is No
   AND PAR.Competitors_Processing = 'N';

   // AND PAR.CM Processing Type Usr is Payment
   AND PAR.CM_Processing_Type_Usr = 'P';

   //?** ADDED AT AVERAGE VALUE OF THE LOT **
   // PAR.CD Lean Premium CWT = CON.*ZERO
   PAR.CD_Lean_Premium_CWT = *ZERO;

   // PAR.CD Lean Premium $ Per Hd = CON.*ZERO
   PAR.CD_Lean_Premium_$_Per_Hd = *ZERO;

   // PAR.CD Gross Value Per CWT = CON.*ZERO
   PAR.CD_Gross_Value_Per_CWT = *ZERO;

   // PAR.CD Gross Value $ Per HD = CON.*ZERO
   PAR.CD_Gross_Value_$_Per_HD = *ZERO;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?** CALCULATE LEAN PREMIUM **
   EXECUTE FUNCTION(Rtv Lean Premium %    RT) TYPE(RTVOBJ) FILE(PKBZREP)           AB1116832;
   PARAMETER(PAR.CMP_Program_Code);
   PARAMETER(PAR.CMMR_Row_Number);
   PARAMETER(DB1.CD_Lean_Percent);
   PARAMETER(PAR.CMMC_Premium_Value);
   PARAMETER(WRK.Record_Found_CMMC_USR);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.Record_Found_CMMC_USR = 'N';

    //?USER: Process Data record

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.Record_Found_CMMC_USR = 'Y';

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   //?Rtv Lean% Premium if not found in table, then use lowest
   CASE;

   // IF WRK.Record Found CMMC USR is No
   IF WRK.Record_Found_CMMC_USR = 'N';

   EXECUTE FUNCTION(Rtv Lean Premium % Frc RT) TYPE(RTVOBJ) FILE(PKBZREP)          AB1147944;
   PARAMETER(PAR.CMP_Program_Code);
   PARAMETER(PAR.CMMR_Row_Number);
   PARAMETER(PAR.CMMC_Premium_Value);
   PARAMETER(WRK.Record_Found_CMMC_USR);
   {
    //?USER: Processing if Data record not found

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.Record_Found_CMMC_USR = 'N';

    //?USER: Process Data record

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.Record_Found_CMMC_USR = 'Y';

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   ENDIF;

   //?Lean Percent NPPC $Prem OR Meat Value *OTHERWISE
   CASE;

   // IF PAR.CMP Grading Type is Lean Percent NPPC $Prem
   IF PAR.CMP_Grading_Type = 'D';

   // PAR.CD Lean Premium CWT = PAR.CMMC Premium Value
   PAR.CD_Lean_Premium_CWT = PAR.CMMC_Premium_Value;

   // CD Lean Premium $ Per Hd
   PAR.CD_Lean_Premium_$_Per_Hd = PAR.CD_Lean_Premium_CWT * ( DB1.CD_Carcass_Hot_Weight
   / 100 'H' ) 'H';

   // Total Carcass Value
   PAR.CD_Gross_Value_$_Per_HD = PAR.CD_Crc_Value_$_Per_Hd + PAR.CD_Lean_Premium_$_Per_Hd;

   // Total Carcass Per CWT
   PAR.CD_Gross_Value_Per_CWT = PAR.CD_Crc_Value_Per_CWT + PAR.CD_Lean_Premium_CWT;

   //?Lean Percent NPPC $Prem OR Meat Value *OTHERWISE
   // IF PAR.CMP Grading Type is Meat Value
   IF PAR.CMP_Grading_Type = 'M';

   //?Meat Value Calculation
   DO;

   //?06/20/05 PKD HPE011 Added Meat Value calculation
   //?DOC:  Lean Premium Percent
   DO;

   //?Lean Prem% = ((A * (B/100)) + (((C/D) - (C/E)) / F) + (G/100))
   //?WHERE:
   //?A = Starting Point (100)
   //?B = Sort Loss Percent
   //?C = Fixed Cost Per Head
   //?D = Optimal Weight Range Midpoint
   //?E = Weight Range Midpoint
   //?F = Base Market Price
   //?G = Lean Premium & Discount Percent
   //?12/15/06 PKD Current:  F=Base Market Price
   //?                 New:  F=USDA Pork Cutout
   ENDDO;

   // LCL.CMMR Row Number = CVTVAR(PAR.CMP Optimal Row Nbr f/srt)
   LCL.CMMR_Row_Number = CVTVAR(PAR.CMP_Optimal_Row_Nbr_f_srt);

   EXECUTE FUNCTION(Rtv Optimal Midpoint  RT) TYPE(RTVOBJ) FILE(PKBYREP)           AB1263803;
   PARAMETER(PAR.CMP_Program_Code);
   PARAMETER(LCL.CMMR_Row_Number);
   PARAMETER(LCL.CMMR_Midpoint);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?08/23/05 PKD Checking Midpoint to make sure they are entered.
   // PAR.CD Lean Prem/Disc Factor = PAR.CMMC Premium Value
   PAR.CD_Lean_Prem_Disc_Factor = PAR.CMMC_Premium_Value;

   // CD Lean Premium $ Per Hd
   PAR.CD_Lean_Premium_$_Per_Hd = ( PAR.CD_Base_Carcass_CWT * (
   PAR.CD_Lean_Prem_Disc_Factor / 100 'H' ) 'H' ) * ( DB1.CD_Carcass_Hot_Weight / 100 'H' )
   'H';

   // CD Lean Premuim CWT
   PAR.CD_Lean_Premium_CWT = PAR.CD_Lean_Premium_$_Per_Hd / ( DB1.CD_Carcass_Hot_Weight
   / 100 'H' ) 'H';

   //?12/15/06 PKD Below calculation uses the Base Price.
   //?12/15/06 PKD Use USDA Pork Cutout instead of the Base Price.
   //?             USDA Pork Cutout = LCL.Market Prc Hog/Cutout USR
   //?             pull the mrk and goup from the cmp market/group see Init
   //?CD Fixed Cost Factor %
   CASE;

   // IF LCL.CMMR Midpoint is Entered
   IF LCL.CMMR_Midpoint > *ZERO;

   // AND PAR.CMMR Midpoint is Entered
   AND PAR.CMMR_Midpoint > *ZERO;

   //?FIXED COST
   // CD Fixed Cost Factor %
   PAR.CD_Fixed_Cost_Factor = ( ( ( PAR.CMP_Fixed_Cost_Per_Head / LCL.CMMR_Midpoint 'H' ) - (
   PAR.CMP_Fixed_Cost_Per_Head / PAR.CMMR_Midpoint 'H' ) ) / LCL.Market_Prc_Hog_Cutout_USR
   'H' ) * 100 'H';

   //?CD Fixed Cost Factor %
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.CD Fixed Cost Factor % = CON.*ZERO
   PAR.CD_Fixed_Cost_Factor = *ZERO;

   ENDIF;

   // CD Fixed Cost Factor Amt
   PAR.CD_Fixed_Cost_Factor_Amt = PAR.CD_Base_Carcass_CWT * ( ( PAR.CD_Fixed_Cost_Factor
   / 100 'H' ) * ( DB1.CD_Carcass_Hot_Weight / 100 'H' ) 'H' ) 'H';

   // CD Meat Value Factor %
   PAR.CD_Meat_Value_Factor = ( PAR.CD_Sort_Loss + PAR.CD_Fixed_Cost_Factor )
   + PAR.CD_Lean_Prem_Disc_Factor;

   // CD Meat Value Factor Amt
   PAR.CD_Meat_Value_Factor_Amt = ( ( PAR.CD_Base_Carcass_CWT * ( (
   PAR.CD_Meat_Value_Factor / 100 'H' ) - 1 ) 'H' ) * ( DB1.CD_Carcass_Hot_Weight / 100
   'H' ) 'H' ) * 1 'H';

   // CD Gross Value $ Per HD
   PAR.CD_Gross_Value_$_Per_HD = ( PAR.CD_Base_Carcass_CWT * ( PAR.CD_Meat_Value_Factor
   / 100 'H' ) 'H' ) * ( DB1.CD_Carcass_Hot_Weight / 100 'H' ) 'H';

   // CD Gross Value Per CWT
   PAR.CD_Gross_Value_Per_CWT = PAR.CD_Gross_Value_$_Per_HD / ( DB1.CD_Carcass_Hot_Weight
   / 100 'H' ) 'H';

   //?****************
   ENDDO;

   //?Lean Percent NPPC $Prem OR Meat Value *OTHERWISE
   // IF *OTHERWISE
   IF *OTHERWISE;

   // Total Carcss Per CWT MULT
   PAR.CD_Gross_Value_Per_CWT = PAR.CD_Crc_Value_Per_CWT * PAR.CMMC_Premium_Value 'H';

   // Total Carcass Value
   PAR.CD_Gross_Value_$_Per_HD = PAR.CD_Gross_Value_Per_CWT * ( DB1.CD_Carcass_Hot_Weight
   / 100 'H' ) 'H';

   // Lean Premium Per CWT
   PAR.CD_Lean_Premium_CWT = PAR.CD_Gross_Value_Per_CWT - PAR.CD_Crc_Value_Per_CWT;

   // Lean Premium Value
   PAR.CD_Lean_Premium_$_Per_Hd = PAR.CD_Gross_Value_$_Per_HD - PAR.CD_Crc_Value_$_Per_Hd;

   ENDIF;

   ENDIF;

   ENDDO;

   //?Grade/Premium
   // IF PAR.CMP Grading Type is Lean Percent FOM
   IF PAR.CMP_Grading_Type = 'P';

   //?LEAN PERCENT  FAT O METER
   DO;

   //?---------------------------------------------------------------
   //?Added 6/11/99 by Purva for C0007557.
   //?Add Lean Factor/Lean % +/- to Lean Percent MM
   CASE;

   // IF PAR.CMP Lean Factor is Greater than 0
   IF PAR.CMP_Lean_Factor > *ZERO;

   // PAR.CMMC Lean Percent = DB1.CD Lean Percent MM + PAR.CMP Lean Factor
   PAR.CMMC_Lean_Percent = DB1.CD_Lean_Percent_MM + PAR.CMP_Lean_Factor;

   //?Add Lean Factor/Lean % +/- to Lean Percent MM
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.CMMC Lean Percent = DB1.CD Lean Percent MM
   PAR.CMMC_Lean_Percent = DB1.CD_Lean_Percent_MM;

   ENDIF;

   //?---------------------------------------------------------------
   // PAR.CMMC Premium Value = CON.*ZERO
   PAR.CMMC_Premium_Value = *ZERO;

   EXECUTE FUNCTION(Rtv Lean Premium %    RT) TYPE(RTVOBJ) FILE(PKBZREP)           AB1116832;
   PARAMETER(PAR.CMP_Program_Code);
   PARAMETER(PAR.CMMR_Row_Number);
   PARAMETER(PAR.CMMC_Lean_Percent);
   PARAMETER(PAR.CMMC_Premium_Value);
   PARAMETER(WRK.Record_Found_CMMC_USR);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.Record_Found_CMMC_USR = 'N';

    //?USER: Process Data record

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.Record_Found_CMMC_USR = 'Y';

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   //?Rtv Lean% Premium if not found in table, then use lowest
   CASE;

   // IF WRK.Record Found CMMC USR is No
   IF WRK.Record_Found_CMMC_USR = 'N';

   EXECUTE FUNCTION(Rtv Lean Premium % Frc RT) TYPE(RTVOBJ) FILE(PKBZREP)          AB1147944;
   PARAMETER(PAR.CMP_Program_Code);
   PARAMETER(PAR.CMMR_Row_Number);
   PARAMETER(PAR.CMMC_Premium_Value);
   PARAMETER(WRK.Record_Found_CMMC_USR);
   {
    //?USER: Processing if Data record not found

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.Record_Found_CMMC_USR = 'N';

    //?USER: Process Data record

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.Record_Found_CMMC_USR = 'Y';

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   ENDIF;

   //?Add the meat premium
   // Total Carcass Per CWT add
   PAR.CD_Gross_Value_Per_CWT = PAR.CD_Crc_Value_Per_CWT + PAR.CMMC_Premium_Value;

   // Total Carcass Value
   PAR.CD_Gross_Value_$_Per_HD = PAR.CD_Gross_Value_Per_CWT * ( DB1.CD_Carcass_Hot_Weight
   / 100 'H' ) 'H';

   // Lean Premium Per CWT
   PAR.CD_Lean_Premium_CWT = PAR.CD_Gross_Value_Per_CWT - PAR.CD_Crc_Value_Per_CWT;

   // Lean Premium Value
   PAR.CD_Lean_Premium_$_Per_Hd = PAR.CD_Gross_Value_$_Per_HD - PAR.CD_Crc_Value_$_Per_Hd;

   ENDDO;

   //?Grade/Premium
   // IF PAR.CMP Grading Type is Backfat
   IF PAR.CMP_Grading_Type = 'B';

   //?Backfat
   DO;

   //?10/23/2007 * out the hard code CMP Grade Type Adj
   //?             and replace with value form the CMP Grade Backfat
   // WRK.Backfat USR = DB1.CD Backfat Thickness Inch + PAR.CMP Grade Type Adj
   WRK.Backfat_USR = DB1.CD_Backfat_Thickness_Inch + PAR.CMP_Grade_Type_Adj;

   EXECUTE FUNCTION(Rtv BckF Premium       RT) TYPE(RTVOBJ) FILE(PKBZREP)          AB1166485;
   PARAMETER(PAR.CMP_Program_Code);
   PARAMETER(PAR.CMMR_Row_Number);
   PARAMETER(WRK.Backfat_USR);
   PARAMETER(PAR.CMMC_Premium_Value);
   PARAMETER(WRK.Record_Found_CMMC_USR);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.Record_Found_CMMC_USR = 'N';

    //?USER: Process Data record

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.Record_Found_CMMC_USR = 'Y';

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   //?Rtv Bckf Premium if not found in table, then use lowest
   CASE;

   // IF WRK.Record Found CMMC USR is No
   IF WRK.Record_Found_CMMC_USR = 'N';

   EXECUTE FUNCTION(Rtv BckF Premium % Frc RT) TYPE(RTVOBJ) FILE(PKBZREP)          AB1166486;
   PARAMETER(PAR.CMP_Program_Code);
   PARAMETER(PAR.CMMR_Row_Number);
   PARAMETER(PAR.CMMC_Premium_Value);
   PARAMETER(WRK.Record_Found_CMMC_USR);
   {
    //?USER: Processing if Data record not found

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.Record_Found_CMMC_USR = 'N';

    //?USER: Process Data record

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.Record_Found_CMMC_USR = 'Y';

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   ENDIF;

   //?*---------------------------------------------------------------*
   //?* 05/15/02 PKD Commented out.  The Backfat calculation needs
   //?               to work similar to Lean Percent.
   //?Lean Premium Value
   //?Lean Premium Per Cwt
   //?Gross Value Per cwt
   //?Gross Value $
   //?*---------------------------------------------------------------*
   // Total Carcss Per CWT MULT
   PAR.CD_Gross_Value_Per_CWT = PAR.CD_Crc_Value_Per_CWT * PAR.CMMC_Premium_Value 'H';

   // Total Carcass Value
   PAR.CD_Gross_Value_$_Per_HD = PAR.CD_Gross_Value_Per_CWT * ( DB1.CD_Carcass_Hot_Weight
   / 100 'H' ) 'H';

   // Lean Premium Per CWT
   PAR.CD_Lean_Premium_CWT = PAR.CD_Gross_Value_Per_CWT - PAR.CD_Crc_Value_Per_CWT;

   // Lean Premium Value
   PAR.CD_Lean_Premium_$_Per_Hd = PAR.CD_Gross_Value_$_Per_HD - PAR.CD_Crc_Value_$_Per_Hd;

   ENDDO;

   //?Grade/Premium
   // IF PAR.CMP Grading Type is Lean Factor
   IF PAR.CMP_Grading_Type = 'F';

   //?Lean Factor
   DO;

   // Diff actual/Std Lean%
   PAR.CMMC_Premium_Value = ( DB1.CD_Lean_Percent - PAR.CMP_Std_Lean_Percent ) / 100 'H';

   // multiple by lean factor
   PAR.CMMC_Premium_Value = ( PAR.CMMC_Premium_Value * PAR.CMP_Lean_Factor 'H' ) / 100 'H';

   //?Lean Premium Per Cwt
   // PAR.CD Lean Premium CWT = PAR.CMMC Premium Value * PAR.TH CM Base Mkt Price *Rou
   PAR.CD_Lean_Premium_CWT = PAR.CMMC_Premium_Value * PAR.TH_CM_Base_Mkt_Price 'H';

   //?Lean Premium Value
   // Lean Premium Value
   PAR.CD_Lean_Premium_$_Per_Hd = PAR.CD_Lean_Premium_CWT * ( DB1.CD_Carcass_Hot_Weight
   / 100 'H' ) 'H';

   //?Gross Value Per cwt
   // Total Carcass Per CWT
   PAR.CD_Gross_Value_Per_CWT = PAR.CD_Crc_Value_Per_CWT + PAR.CD_Lean_Premium_CWT;

   //?Gross Value $
   // Total Carcass Value
   PAR.CD_Gross_Value_$_Per_HD = PAR.CD_Crc_Value_$_Per_Hd + PAR.CD_Lean_Premium_$_Per_Hd;

   ENDDO;

   ENDIF;

   //?Sort after premium.  re-calc gross
   CASE;

   // IF WRK.CMP CLC Premium First is Premium First
   IF WRK.CMP_CLC_Premium_First = 'P';

   // PAR.CD Gross Before Sort CWT = PAR.CD Gross Value Per CWT
   PAR.CD_Gross_Before_Sort_CWT = PAR.CD_Gross_Value_Per_CWT;

   // PAR.CD Gross Before Sort /HD = PAR.CD Gross Value $ Per HD
   PAR.CD_Gross_Before_Sort_HD = PAR.CD_Gross_Value_$_Per_HD;

   CASE;

   // IF PAR.CD Sort Loss is 100%
   IF PAR.CD_Sort_Loss = 100;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?New Gross after Sort
   // Synon (15,5) work field =       * Gross After Sort
   LCL.*Synon_155_work_field = PAR.CD_Gross_Before_Sort_CWT * ( PAR.CD_Sort_Loss / 100 'H' )
   'H';

   // PAR.CD Gross Value Per CWT = LCL.*Synon (15,5) work field * CON.1 *Rounded
   PAR.CD_Gross_Value_Per_CWT = LCL.*Synon_155_work_field * 1 'H';

   // Total Gross Carcass Value
   PAR.CD_Gross_Value_$_Per_HD = PAR.CD_Gross_Value_Per_CWT * ( DB1.CD_Carcass_Hot_Weight
   / 100 'H' ) 'H';

   ENDIF;

   //?New Carcas Value
   // CD Crc Value Per CWT
   PAR.CD_Crc_Value_Per_CWT = PAR.CD_Base_Carcass_CWT + ( PAR.CD_Gross_Value_Per_CWT
   - PAR.CD_Gross_Before_Sort_CWT );

   // CD Crc Value $ Per Hd
   PAR.CD_Crc_Value_$_Per_Hd = PAR.CD_Base_Carc_Value + ( PAR.CD_Gross_Value_$_Per_HD
   - PAR.CD_Gross_Before_Sort_HD );

   ENDIF;

   // PAR.CD STD Yield = PAR.CMMR Std Dressing Yield%
   PAR.CD_STD_Yield = PAR.CMMR_Std_Dressing_Yield;

   //?Calc MPR Sort Loss            5/23/03    -- Change 10/11/17 S11862
   //?Calc MPR Sort Loss   5/23/03   - chg 01/15/07 for "M" cmp grading type
   CASE;

   // IF PAR.CMP Optimal Row Nbr f/srt NE WRK.Blank Usr 1 fld Usr
   IF PAR.CMP_Optimal_Row_Nbr_f_srt <> WRK.Blank_Usr_1_fld_Usr;

   // LCL.Num NU USR = CVTVAR(PAR.CMP Optimal Row Nbr f/srt)
   LCL.Num_NU_USR = CVTVAR(PAR.CMP_Optimal_Row_Nbr_f_srt);

   // LCL.CMMR Row Number = LCL.Num NU USR
   LCL.CMMR_Row_Number = LCL.Num_NU_USR;

   EXECUTE FUNCTION(Rtv Lean Premium %    RT) TYPE(RTVOBJ) FILE(PKBZREP)           AB1116832;
   PARAMETER(PAR.CMP_Program_Code);
   PARAMETER(LCL.CMMR_Row_Number);
   PARAMETER(DB1.CD_Lean_Percent);
   PARAMETER(LCL.Optimal_Lean_Percent_USR);
   PARAMETER(WRK.Record_Found_CMMC_USR);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.Record_Found_CMMC_USR = 'N';

    //?USER: Process Data record

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.Record_Found_CMMC_USR = 'Y';

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   EXECUTE FUNCTION(Rtv StdYld/SortDisc   RT) TYPE(RTVOBJ) FILE(PKBYREP)           AB1116828;
   PARAMETER(PAR.CMP_Program_Code);
   PARAMETER(LCL.CMMR_Row_Number);
   PARAMETER(DB1.CD_Carcass_Hot_Weight);
   PARAMETER(LCL.CMMR_Std_Dressing_Yield);
   PARAMETER(LCL.CD_Sort_Loss);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PAR.CD Sort Loss = DB1.CMMR Sort Discount
    PAR.CD_Sort_Loss = DB1.CMMR_Sort_Discount;

    QUIT;

   }

   EXECUTE FUNCTION(Rtv Lean Premium %    RT) TYPE(RTVOBJ) FILE(PKBZREP)           AB1116832;
   PARAMETER(PAR.CMP_Program_Code);
   PARAMETER(LCL.CMMR_Row_Number);
   PARAMETER(DB1.CD_Lean_Percent);
   PARAMETER(LCL.CMMC_Premium_Value);
   PARAMETER(WRK.Record_Found_CMMC_USR);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.Record_Found_CMMC_USR = 'N';

    //?USER: Process Data record

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.Record_Found_CMMC_USR = 'Y';

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   // LCL.Sort Total % = LCL.CMMC Premium Value - LCL.Optimal Lean Percent USR
   LCL.Sort_Total = LCL.CMMC_Premium_Value - LCL.Optimal_Lean_Percent_USR;

   CASE;

   // IF PAR.CMP Grading Type is Lean Percent NPPC $Prem
   IF PAR.CMP_Grading_Type = 'D';

   //?If grading type is D , the lean premium values are dollars $
   // Comp: CD Mpr Sort Loss-D
   PAR.CD_MPR_Sort_Loss = ( LCL.CMMC_Premium_Value - LCL.Optimal_Lean_Percent_USR ) (
   DB1.CD_Carcass_Hot_Weight / 100 );

   // IF PAR.CMP Grading Type is Meat Value
   IF PAR.CMP_Grading_Type = 'M';

   //?If grading type is M , take diff cac value $hd - base value   01/15/07 RMC
   // PAR.CD MPR Sort Loss = PAR.CD Crc Value $ Per Hd - PAR.CD Base Carc Value
   PAR.CD_MPR_Sort_Loss = PAR.CD_Crc_Value_$_Per_Hd - PAR.CD_Base_Carc_Value;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Original Calc done for all grading types         06/28/04
   // Comp: CD Mpr Sort Loss
   PAR.CD_MPR_Sort_Loss = ( LCL.Sort_Total * PAR.CD_Base_Carcass_CWT ) (
   DB1.CD_Carcass_Hot_Weight / 100 );

   ENDIF;

   // PAR.TH MPR Sort Loss = PAR.TH MPR Sort Loss + PAR.CD MPR Sort Loss
   PAR.TH_MPR_Sort_Loss = PAR.TH_MPR_Sort_Loss + PAR.CD_MPR_Sort_Loss;

   //?(note--sort loss s/be negative.)
   //?Calc MPR Sort Loss   5/23/03   - chg 01/15/07 for "M" cmp grading type
   // IF *OTHERWISE
   IF *OTHERWISE;

   // Comp: CD Mpr Sort Loss
   PAR.CD_MPR_Sort_Loss = PAR.CD_Crc_Value_$_Per_Hd - PAR.CD_Base_Carc_Value;

   // PAR.TH MPR Sort Loss = PAR.TH MPR Sort Loss + PAR.CD MPR Sort Loss
   PAR.TH_MPR_Sort_Loss = PAR.TH_MPR_Sort_Loss + PAR.CD_MPR_Sort_Loss;

   ENDIF;

   ENDDO;

   ENDIF;

   //?Totals
   DO;

   // PAR.Head Total USR = PAR.Head Total USR + CON.1
   PAR.Head_Total_USR = PAR.Head_Total_USR + 1;

   // PAR.Sort Loss Tot USR = PAR.Sort Loss Tot USR + PAR.CD Sort Loss
   PAR.Sort_Loss_Tot_USR = PAR.Sort_Loss_Tot_USR + PAR.CD_Sort_Loss;

   // PAR.Std Yield % Tot USR = PAR.Std Yield % Tot USR + PAR.CD STD Yield
   PAR.Std_Yield_Tot_USR = PAR.Std_Yield_Tot_USR + PAR.CD_STD_Yield;

   // PAR.Weight Tot USR = PAR.Weight Tot USR + DB1.CD Carcass/Hot Weight
   PAR.Weight_Tot_USR = PAR.Weight_Tot_USR + DB1.CD_Carcass_Hot_Weight;

   // PAR.Base Carc Val Tot USR = PAR.Base Carc Val Tot USR + PAR.CD Base Carc Value
   PAR.Base_Carc_Val_Tot_USR = PAR.Base_Carc_Val_Tot_USR + PAR.CD_Base_Carc_Value;

   // PAR.Adj Base Carc Val Tot USR = PAR.Adj Base Carc Val Tot USR + PAR.CD Crc Value
   PAR.Adj_Base_Carc_Val_Tot_USR = PAR.Adj_Base_Carc_Val_Tot_USR
   + PAR.CD_Crc_Value_$_Per_Hd;

   // PAR.Lean Percent Tot USR = PAR.Lean Percent Tot USR + DB1.CD Lean Percent
   PAR.Lean_Percent_Tot_USR = PAR.Lean_Percent_Tot_USR + DB1.CD_Lean_Percent;

   // PAR.Lean Add/Ded Val Tot USR = PAR.Lean Add/Ded Val Tot USR + PAR.CD Lean Premiu
   PAR.Lean_Add_Ded_Val_Tot_USR = PAR.Lean_Add_Ded_Val_Tot_USR
   + PAR.CD_Lean_Premium_$_Per_Hd;

   // PAR.Total Carc Val Tot USR = PAR.Total Carc Val Tot USR + PAR.CD Gross Value $ Per HD
   PAR.Total_Carc_Val_Tot_USR = PAR.Total_Carc_Val_Tot_USR + PAR.CD_Gross_Value_$_Per_HD;

   // PAR.TH Meat Value Factor Amt = PAR.TH Meat Value Factor Amt + PAR.CD Meat Value Factor Amt
   PAR.TH_Meat_Value_Factor_Amt = PAR.TH_Meat_Value_Factor_Amt
   + PAR.CD_Meat_Value_Factor_Amt;

   // PAR.TH Fixed Cost Amount = PAR.TH Fixed Cost Amount + PAR.CD Fixed Cost Factor Amt
   PAR.TH_Fixed_Cost_Amount = PAR.TH_Fixed_Cost_Amount + PAR.CD_Fixed_Cost_Factor_Amt;

   // PAR.Gross Before Sort /HD Usr = PAR.Gross Before Sort /HD Usr + PAR.CD Gross Before Sort /HD
   PAR.Gross_Before_Sort_HD_Usr = PAR.Gross_Before_Sort_HD_Usr
   + PAR.CD_Gross_Before_Sort_HD;

   ENDDO;

   //?Move cd fields to ca fields, and or zero out cd fields
   CASE;

   // IF PAR.Competitors Processing is Yes
   IF PAR.Competitors_Processing = 'Y';

   //?zero out cd ca fields
   DO;

   // PAR.CD CA Sort Loss = CON.*ZERO
   PAR.CD_CA_Sort_Loss = *ZERO;

   // PAR.CD CA Std Yield = CON.*ZERO
   PAR.CD_CA_Std_Yield = *ZERO;

   // PAR.CD CA Base Carcass CWT = CON.*ZERO
   PAR.CD_CA_Base_Carcass_CWT = *ZERO;

   // PAR.CD CA Crc Value Per CWT = CON.*ZERO
   PAR.CD_CA_Crc_Value_Per_CWT = *ZERO;

   // PAR.CD CA Base Carc Value = CON.*ZERO
   PAR.CD_CA_Base_Carc_Value = *ZERO;

   // PAR.CD CA Crc Value $ Per Hd = CON.*ZERO
   PAR.CD_CA_Crc_Value_$_Per_Hd = *ZERO;

   // PAR.CD CA Lean Premium CWT = CON.*ZERO
   PAR.CD_CA_Lean_Premium_CWT = *ZERO;

   // PAR.CD CA Lean Premium $ P Hd = CON.*ZERO
   PAR.CD_CA_Lean_Premium_$_P_Hd = *ZERO;

   // PAR.CD CA Gross Value Per CWT = CON.*ZERO
   PAR.CD_CA_Gross_Value_Per_CWT = *ZERO;

   // PAR.CD CA Gross Value $ P Hd = CON.*ZERO
   PAR.CD_CA_Gross_Value_$_P_Hd = *ZERO;

   ENDDO;

   //?Move cd fields to ca fields, and or zero out cd fields
   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.CD Payment Type is Live
   IF PAR.CD_Payment_Type = 'L';

   //?move cd fields to cd ca fields
   DO;

   // PAR.CD CA Sort Loss = PAR.CD Sort Loss
   PAR.CD_CA_Sort_Loss = PAR.CD_Sort_Loss;

   // PAR.CD CA Std Yield = PAR.CD STD Yield
   PAR.CD_CA_Std_Yield = PAR.CD_STD_Yield;

   // PAR.CD CA Base Carcass CWT = PAR.CD Base Carcass CWT
   PAR.CD_CA_Base_Carcass_CWT = PAR.CD_Base_Carcass_CWT;

   // PAR.CD CA Crc Value Per CWT = PAR.CD Crc Value Per CWT
   PAR.CD_CA_Crc_Value_Per_CWT = PAR.CD_Crc_Value_Per_CWT;

   // PAR.CD CA Base Carc Value = PAR.CD Base Carc Value
   PAR.CD_CA_Base_Carc_Value = PAR.CD_Base_Carc_Value;

   // PAR.CD CA Crc Value $ Per Hd = PAR.CD Crc Value $ Per Hd
   PAR.CD_CA_Crc_Value_$_Per_Hd = PAR.CD_Crc_Value_$_Per_Hd;

   // PAR.CD CA Lean Premium CWT = PAR.CD Lean Premium CWT
   PAR.CD_CA_Lean_Premium_CWT = PAR.CD_Lean_Premium_CWT;

   // PAR.CD CA Lean Premium $ P Hd = PAR.CD Lean Premium $ Per Hd
   PAR.CD_CA_Lean_Premium_$_P_Hd = PAR.CD_Lean_Premium_$_Per_Hd;

   // PAR.CD CA Gross Value Per CWT = PAR.CD Gross Value Per CWT
   PAR.CD_CA_Gross_Value_Per_CWT = PAR.CD_Gross_Value_Per_CWT;

   // PAR.CD CA Gross Value $ P Hd = PAR.CD Gross Value $ Per HD
   PAR.CD_CA_Gross_Value_$_P_Hd = PAR.CD_Gross_Value_$_Per_HD;

   ENDDO;

   //?zero out cd fields
   DO;

   // PAR.CD Sort Loss = CON.*ZERO
   PAR.CD_Sort_Loss = *ZERO;

   // PAR.CD STD Yield = CON.*ZERO
   PAR.CD_STD_Yield = *ZERO;

   // PAR.CD Base Carcass CWT = CON.*ZERO
   PAR.CD_Base_Carcass_CWT = *ZERO;

   // PAR.CD Crc Value Per CWT = CON.*ZERO
   PAR.CD_Crc_Value_Per_CWT = *ZERO;

   // PAR.CD Base Carc Value = CON.*ZERO
   PAR.CD_Base_Carc_Value = *ZERO;

   // PAR.CD Crc Value $ Per Hd = CON.*ZERO
   PAR.CD_Crc_Value_$_Per_Hd = *ZERO;

   // PAR.CD Lean Premium CWT = CON.*ZERO
   PAR.CD_Lean_Premium_CWT = *ZERO;

   // PAR.CD Lean Premium $ Per Hd = CON.*ZERO
   PAR.CD_Lean_Premium_$_Per_Hd = *ZERO;

   // PAR.CD Gross Value Per CWT = CON.*ZERO
   PAR.CD_Gross_Value_Per_CWT = *ZERO;

   // PAR.CD Gross Value $ Per HD = CON.*ZERO
   PAR.CD_Gross_Value_$_Per_HD = *ZERO;

   ENDDO;

   // IF PAR.CD Payment Type is Carcass Merit
   IF PAR.CD_Payment_Type = 'C';

   CASE;

   // IF PAR.CD Source Type is External
   IF PAR.CD_Source_Type = 'E';

   //?zero out cd ca fields
   DO;

   // PAR.CD CA Sort Loss = CON.*ZERO
   PAR.CD_CA_Sort_Loss = *ZERO;

   // PAR.CD CA Std Yield = CON.*ZERO
   PAR.CD_CA_Std_Yield = *ZERO;

   // PAR.CD CA Base Carcass CWT = CON.*ZERO
   PAR.CD_CA_Base_Carcass_CWT = *ZERO;

   // PAR.CD CA Crc Value Per CWT = CON.*ZERO
   PAR.CD_CA_Crc_Value_Per_CWT = *ZERO;

   // PAR.CD CA Base Carc Value = CON.*ZERO
   PAR.CD_CA_Base_Carc_Value = *ZERO;

   // PAR.CD CA Crc Value $ Per Hd = CON.*ZERO
   PAR.CD_CA_Crc_Value_$_Per_Hd = *ZERO;

   // PAR.CD CA Lean Premium CWT = CON.*ZERO
   PAR.CD_CA_Lean_Premium_CWT = *ZERO;

   // PAR.CD CA Lean Premium $ P Hd = CON.*ZERO
   PAR.CD_CA_Lean_Premium_$_P_Hd = *ZERO;

   // PAR.CD CA Gross Value Per CWT = CON.*ZERO
   PAR.CD_CA_Gross_Value_Per_CWT = *ZERO;

   // PAR.CD CA Gross Value $ P Hd = CON.*ZERO
   PAR.CD_CA_Gross_Value_$_P_Hd = *ZERO;

   ENDDO;

   //?Leave payment information in the CD fields
   // IF PAR.CD Source Type is Internal
   IF PAR.CD_Source_Type = 'I';

   CASE;

   // IF PAR.CM Processing Type Usr is Analysis
   IF PAR.CM_Processing_Type_Usr = 'A';

   //?move cd fields to cd ca fields
   DO;

   // PAR.CD CA Sort Loss = PAR.CD Sort Loss
   PAR.CD_CA_Sort_Loss = PAR.CD_Sort_Loss;

   // PAR.CD CA Std Yield = PAR.CD STD Yield
   PAR.CD_CA_Std_Yield = PAR.CD_STD_Yield;

   // PAR.CD CA Base Carcass CWT = PAR.CD Base Carcass CWT
   PAR.CD_CA_Base_Carcass_CWT = PAR.CD_Base_Carcass_CWT;

   // PAR.CD CA Crc Value Per CWT = PAR.CD Crc Value Per CWT
   PAR.CD_CA_Crc_Value_Per_CWT = PAR.CD_Crc_Value_Per_CWT;

   // PAR.CD CA Base Carc Value = PAR.CD Base Carc Value
   PAR.CD_CA_Base_Carc_Value = PAR.CD_Base_Carc_Value;

   // PAR.CD CA Crc Value $ Per Hd = PAR.CD Crc Value $ Per Hd
   PAR.CD_CA_Crc_Value_$_Per_Hd = PAR.CD_Crc_Value_$_Per_Hd;

   // PAR.CD CA Lean Premium CWT = PAR.CD Lean Premium CWT
   PAR.CD_CA_Lean_Premium_CWT = PAR.CD_Lean_Premium_CWT;

   // PAR.CD CA Lean Premium $ P Hd = PAR.CD Lean Premium $ Per Hd
   PAR.CD_CA_Lean_Premium_$_P_Hd = PAR.CD_Lean_Premium_$_Per_Hd;

   // PAR.CD CA Gross Value Per CWT = PAR.CD Gross Value Per CWT
   PAR.CD_CA_Gross_Value_Per_CWT = PAR.CD_Gross_Value_Per_CWT;

   // PAR.CD CA Gross Value $ P Hd = PAR.CD Gross Value $ Per HD
   PAR.CD_CA_Gross_Value_$_P_Hd = PAR.CD_Gross_Value_$_Per_HD;

   ENDDO;

   //?zero out cd fields
   DO;

   // PAR.CD Sort Loss = CON.*ZERO
   PAR.CD_Sort_Loss = *ZERO;

   // PAR.CD STD Yield = CON.*ZERO
   PAR.CD_STD_Yield = *ZERO;

   // PAR.CD Base Carcass CWT = CON.*ZERO
   PAR.CD_Base_Carcass_CWT = *ZERO;

   // PAR.CD Crc Value Per CWT = CON.*ZERO
   PAR.CD_Crc_Value_Per_CWT = *ZERO;

   // PAR.CD Base Carc Value = CON.*ZERO
   PAR.CD_Base_Carc_Value = *ZERO;

   // PAR.CD Crc Value $ Per Hd = CON.*ZERO
   PAR.CD_Crc_Value_$_Per_Hd = *ZERO;

   // PAR.CD Lean Premium CWT = CON.*ZERO
   PAR.CD_Lean_Premium_CWT = *ZERO;

   // PAR.CD Lean Premium $ Per Hd = CON.*ZERO
   PAR.CD_Lean_Premium_$_Per_Hd = *ZERO;

   // PAR.CD Gross Value Per CWT = CON.*ZERO
   PAR.CD_Gross_Value_Per_CWT = *ZERO;

   // PAR.CD Gross Value $ Per HD = CON.*ZERO
   PAR.CD_Gross_Value_$_Per_HD = *ZERO;

   ENDDO;

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

   //?Update Production Library
   CASE;

   // IF PAR.Competitors Processing is No
   IF PAR.Competitors_Processing = 'N';

   EXECUTE FUNCTION(Chg Carcass Detail 2  CH) TYPE(CHGOBJ) FILE(PKB1CPP)           AB1254096;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(DB1.CD_Scale_Sequence_Number);
   PARAMETER(DB1.CD_Carcass_Number);
   PARAMETER(DB1.CD_Carcass_Number_Insert);
   PARAMETER(DB1.CD_Record_Add_Del_Sts);
   PARAMETER(PAR.CD_Sort_Loss);
   PARAMETER(PAR.CD_STD_Yield);
   PARAMETER(PAR.CD_Base_Carcass_CWT);
   PARAMETER(PAR.CD_Crc_Value_Per_CWT);
   PARAMETER(PAR.CD_Base_Carc_Value);
   PARAMETER(PAR.CD_Crc_Value_$_Per_Hd);
   PARAMETER(PAR.CD_Lean_Premium_CWT);
   PARAMETER(PAR.CD_Lean_Premium_$_Per_Hd);
   PARAMETER(PAR.CD_Gross_Value_Per_CWT);
   PARAMETER(PAR.CD_Gross_Value_$_Per_HD);
   PARAMETER(DB1.CD_Kill_Date);
   PARAMETER(DB1.CD_Shift);
   PARAMETER(DB1.CD_FFLI);
   PARAMETER(DB1.CD_Record_Created_W_Avg);
   PARAMETER(DB1.CD_Record_Created_Status);
   PARAMETER(DB1.CD_LOT);
   PARAMETER(DB1.CD_User_Error_Override);
   PARAMETER(PAR.CD_Source_Type);
   PARAMETER(PAR.CD_Payment_Type);
   PARAMETER(PAR.CD_CA_Sort_Loss);
   PARAMETER(PAR.CD_CA_Std_Yield);
   PARAMETER(PAR.CD_CA_Base_Carcass_CWT);
   PARAMETER(PAR.CD_CA_Crc_Value_Per_CWT);
   PARAMETER(PAR.CD_CA_Base_Carc_Value);
   PARAMETER(PAR.CD_CA_Crc_Value_$_Per_Hd);
   PARAMETER(PAR.CD_CA_Lean_Premium_CWT);
   PARAMETER(PAR.CD_CA_Lean_Premium_$_P_Hd);
   PARAMETER(PAR.CD_CA_Gross_Value_Per_CWT);
   PARAMETER(PAR.CD_CA_Gross_Value_$_P_Hd);
   PARAMETER(PAR.CD_Meat_Value_Factor);
   PARAMETER(PAR.CD_Lean_Prem_Disc_Factor);
   PARAMETER(PAR.CD_Fixed_Cost_Factor);
   PARAMETER(PAR.CD_MPR_Sort_Loss);
   PARAMETER(PAR.CD_Meat_Value_Factor_Amt);
   PARAMETER(PAR.CD_Fixed_Cost_Factor_Amt);
   PARAMETER(PAR.CD_Gross_Before_Sort_CWT);
   PARAMETER(PAR.CD_Gross_Before_Sort_HD);
   PARAMETER(DB1.PD_Producer_Code);
   PARAMETER(DB1.SR_Source_Code);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

   ENDIF;

   //?Create a record in QTEMP
   CASE;

   // IF PAR.Print Comp Sum/Dtl STS is Yes
   IF PAR.Print_Comp_Sum_Dtl_STS = 'Y';

   EXECUTE FUNCTION(Crt Carcass Dtl QTEMP CR) TYPE(CRTOBJ) FILE(PKB1CPP)           AB1217517;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(DB1.CD_Scale_Sequence_Number);
   PARAMETER(DB1.CD_Carcass_Number);
   PARAMETER(DB1.CD_Carcass_Number_Insert);
   PARAMETER(DB1.CD_Record_Add_Del_Sts);
   PARAMETER(PAR.CD_Sort_Loss);
   PARAMETER(PAR.CD_STD_Yield);
   PARAMETER(DB1.CD_Carcass_Hot_Weight);
   PARAMETER(PAR.CD_Base_Carcass_CWT);
   PARAMETER(PAR.CD_Crc_Value_Per_CWT);
   PARAMETER(PAR.CD_Base_Carc_Value);
   PARAMETER(PAR.CD_Crc_Value_$_Per_Hd);
   PARAMETER(DB1.CD_Lean_Percent);
   PARAMETER(PAR.CD_Lean_Premium_CWT);
   PARAMETER(PAR.CD_Lean_Premium_$_Per_Hd);
   PARAMETER(PAR.CD_Gross_Value_Per_CWT);
   PARAMETER(PAR.CD_Gross_Value_$_Per_HD);
   PARAMETER(DB1.CD_Kill_Date);
   PARAMETER(DB1.CD_Kill_Time);
   PARAMETER(DB1.CD_Shift);
   PARAMETER(DB1.CD_Carcass_Activity_Sts);
   PARAMETER(DB1.CD_Backfat_Thickness_Inch);
   PARAMETER(DB1.CD_Loin_Eye_Depth_Inch);
   PARAMETER(DB1.CD_Light_Reflectance);
   PARAMETER(DB1.CD_Trim_Area);
   PARAMETER(DB1.CD_Carcass_Sex);
   PARAMETER(DB1.CD_FFLI);
   PARAMETER(DB1.CD_Record_Created_W_Avg);
   PARAMETER(DB1.CD_Record_Created_Status);
   PARAMETER(DB1.CD_LOT);
   PARAMETER(DB1.CD_User_Error_Override);
   PARAMETER(DB1.CD_Backfat_Thickness_MM);
   PARAMETER(DB1.CD_Loin_Eye_Depth_MM);
   PARAMETER(DB1.CD_Light_Reflectance_MM);
   PARAMETER(DB1.CD_Lean_Percent_MM);
   PARAMETER(PAR.CD_Source_Type);
   PARAMETER(DB1.CD_Payment_Type);
   PARAMETER(PAR.CD_CA_Sort_Loss);
   PARAMETER(PAR.CD_CA_Std_Yield);
   PARAMETER(PAR.CD_CA_Base_Carcass_CWT);
   PARAMETER(PAR.CD_CA_Crc_Value_Per_CWT);
   PARAMETER(PAR.CD_CA_Base_Carc_Value);
   PARAMETER(PAR.CD_CA_Crc_Value_$_Per_Hd);
   PARAMETER(PAR.CD_CA_Lean_Premium_CWT);
   PARAMETER(PAR.CD_CA_Lean_Premium_$_P_Hd);
   PARAMETER(PAR.CD_CA_Gross_Value_Per_CWT);
   PARAMETER(PAR.CD_CA_Gross_Value_$_P_Hd);
   PARAMETER(DB1.CD_Adjust_Add_Type);
   PARAMETER(DB1.CD_Producer_Loc_Farm);
   PARAMETER(DB1.CD_Loin_Eye_Inch_2_dec);
   PARAMETER(DB1.CD_Backfat_Inch_2_dec);
   PARAMETER(DB1.CD_Meat_Value_Factor);
   PARAMETER(DB1.CD_Lean_Prem_Disc_Factor);
   PARAMETER(DB1.CD_Fixed_Cost_Factor);
   PARAMETER(DB1.CD_MPR_Sort_Loss);
   PARAMETER(DB1.CD_Meat_Value_Factor_Amt);
   PARAMETER(DB1.CD_Fixed_Cost_Factor_Amt);
   PARAMETER(DB1.CD_Gross_Before_Sort_CWT);
   PARAMETER(DB1.CD_Gross_Before_Sort_HD);
   PARAMETER(DB1.CD_Broken_Back_Sts);
   PARAMETER(DB1.CD_Adjust_Add_Source);
   PARAMETER(DB1.CD_Unused_Sts_3);
   PARAMETER(DB1.CD_Unused_Sts_4);
   PARAMETER(DB1.CD_Unused_Sts_5);
   PARAMETER(DB1.PD_Producer_Code);
   PARAMETER(DB1.SR_Source_Code);
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?Execute internal function

     // PAR.RS Record Status = CND.Active
     PAR.RS_Record_Status = 'A';

     // PAR.RS User Added = JOB.*USER
     PAR.RS_User_Added = JOB.*USER;

     // PAR.RS Date Added = JOB.*Job date
     PAR.RS_Date_Added = JOB.*Job_date;

     // PAR.RS Time Added = JOB.*Job time
     PAR.RS_Time_Added = JOB.*Job_time;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

    }

   }

   ENDIF;

   ENDIF;

   ENDIF;

  }

  ENDIF;

  //?Update Producer Comparison Detail.
  DO;

  //?*** ACTUAL     ***
  DO;

  //?Actual Base Price
  CASE;

  // IF DB1.TH Payment Type is Live
  IF DB1.TH_Payment_Type = 'L';

  // PAR.PCD Actual Base Price = DB1.TH Live Purchase Price
  PAR.PCD_Actual_Base_Price = DB1.TH_Live_Purchase_Price;

  //?Actual Base Price
  // IF DB1.TH Payment Type is Carcass Merit
  IF DB1.TH_Payment_Type = 'C';

  // PAR.PCD Actual Base Price = DB1.TH CM Base Mkt Price
  PAR.PCD_Actual_Base_Price = DB1.TH_CM_Base_Mkt_Price;

  ENDIF;

  //?Base/Sort/Yield/Lean Premium
  DO;

  // PAR.PCD Act Base Amt = DB1.TH CM Base Mkt Price Amt
  PAR.PCD_Act_Base_Amt = DB1.TH_CM_Base_Mkt_Price_Amt;

  // PAR.PCD Act Base /Live CWT = DB1.TH CM Bse Mkt Live /CWT
  PAR.PCD_Act_Base_Live_CWT = DB1.TH_CM_Bse_Mkt_Live_CWT;

  // PAR.PCD Act Base /Carc CWT = DB1.TH CM Bse Mkt Carc /CWT
  PAR.PCD_Act_Base_Carc_CWT = DB1.TH_CM_Bse_Mkt_Carc_CWT;

  // PAR.PCD Act Sort Amt = DB1.TH CM Sort Discount Amt
  PAR.PCD_Act_Sort_Amt = DB1.TH_CM_Sort_Discount_Amt;

  // PAR.PCD Act Sort /Live CWT = DB1.TH CM Srt Dsc Live /CWT
  PAR.PCD_Act_Sort_Live_CWT = DB1.TH_CM_Srt_Dsc_Live_CWT;

  // PAR.PCD Act Sort /Carc CWT = DB1.TH CM Srt Dsc Carc /CWT
  PAR.PCD_Act_Sort_Carc_CWT = DB1.TH_CM_Srt_Dsc_Carc_CWT;

  // PAR.PCD Act Yld Amt = DB1.TH CM Yield Gain/Loss Amt
  PAR.PCD_Act_Yld_Amt = DB1.TH_CM_Yield_Gain_Loss_Amt;

  // PAR.PCD Act Yld /Live CWT = DB1.TH CM Yld G/L Live /CWT
  PAR.PCD_Act_Yld_Live_CWT = DB1.TH_CM_Yld_G_L_Live_CWT;

  // PAR.PCD Act Yld /Carc CWT = DB1.TH CM Yld G/L Carc /CWT
  PAR.PCD_Act_Yld_Carc_CWT = DB1.TH_CM_Yld_G_L_Carc_CWT;

  // PAR.PCD Act Lean Amt = DB1.TH CM LN AddOn/Deduct Amt
  PAR.PCD_Act_Lean_Amt = DB1.TH_CM_LN_AddOn_Deduct_Amt;

  // PAR.PCD Act Lean /Live CWT = DB1.TH CM Lean Prem Live /CWT
  PAR.PCD_Act_Lean_Live_CWT = DB1.TH_CM_Lean_Prem_Live_CWT;

  // PAR.PCD Act Lean /Carc CWT = DB1.TH CM Lean Prem Carc /CWT
  PAR.PCD_Act_Lean_Carc_CWT = DB1.TH_CM_Lean_Prem_Carc_CWT;

  ENDDO;

  //?Calendar Year/Quarter
  CASE;

  // IF PAR.PCS Comp Selection Type is Comparsion
  IF PAR.PCS_Comp_Selection_Type = 'DC'/'KC';

  EXECUTE FUNCTION(Rtv Year/Quarter      RT) TYPE(RTVOBJ) FILE(PKD0CPP)           AB1199074;
  PARAMETER(PAR.PC_Contract_Code);
  PARAMETER(PAR.PCD_Calendar_Year);
  PARAMETER(PAR.PCD_Calendar_Quarter);
  PARAMETER(DB1.TH_Kill_Date);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   CASE;

   // IF PAR.TH Kill Date GE DB1.Calendar Quarter Start
   IF PAR.TH_Kill_Date >= DB1.Calendar_Quarter_Start;

   // AND PAR.TH Kill Date LE DB1.Calendar Quarter End
   AND PAR.TH_Kill_Date <= DB1.Calendar_Quarter_End;

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

   ENDIF;

  }

  //?Calendar Year/Quarter
  // IF PAR.PCS Comp Selection Type is Daily Damage
  IF PAR.PCS_Comp_Selection_Type = 'DD';

  EXECUTE FUNCTION(Rtv Year/Quarter      RT) TYPE(RTVOBJ) FILE(PKD0CPP)           AB1199074;
  PARAMETER(PAR.PCS_Damage_Contract);
  PARAMETER(PAR.PCD_Calendar_Year);
  PARAMETER(PAR.PCD_Calendar_Quarter);
  PARAMETER(DB1.TH_Kill_Date);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   CASE;

   // IF PAR.TH Kill Date GE DB1.Calendar Quarter Start
   IF PAR.TH_Kill_Date >= DB1.Calendar_Quarter_Start;

   // AND PAR.TH Kill Date LE DB1.Calendar Quarter End
   AND PAR.TH_Kill_Date <= DB1.Calendar_Quarter_End;

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

   ENDIF;

  }

  ENDIF;

  //?Head Analyzed %
  CASE;

  // IF DB1.TH Head Killed is Not Zero
  IF DB1.TH_Head_Killed <> *ZERO;

  // Head Analyzed %
  PAR.PCD_Head_Analyzed = ( DB1.TH_Head_Accepted / DB1.TH_Head_Killed 'H' ) * 100 'H';

  ENDIF;

  EXECUTE FUNCTION(Rtv Exp Paid By Who) TYPE(RTVOBJ) FILE(PKAXCPP)                AB1193261;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(WRK.BOL_Freight_Exp_Paid_By);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Seaboard Freight
  CASE;

  // IF WRK.BOL Freight Exp Paid By is Seaboard
  IF WRK.BOL_Freight_Exp_Paid_By = 'S';

  // PAR.PCD Act Add Cost Amt = DB1.TH Freight Amount
  PAR.PCD_Act_Add_Cost_Amt = DB1.TH_Freight_Amount;

  //?Seaboard Freight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.PCD Act Add Cost Amt = CON.*ZERO
  PAR.PCD_Act_Add_Cost_Amt = *ZERO;

  ENDIF;

  // PAR.PCD Act Add Cost Amt = PAR.PCD Act Add Cost Amt + DB1.TH Accrual Amount
  PAR.PCD_Act_Add_Cost_Amt = PAR.PCD_Act_Add_Cost_Amt + DB1.TH_Accrual_Amount;

  //?Actual Additional Cost
  CASE;

  // IF PAR.PCS Replacement Cost Sts is Yes
  IF PAR.PCS_Replacement_Cost_Sts = 'Y';

  EXECUTE FUNCTION(Rtv Prdcr Rplcmnt Cst RT) TYPE(RTVOBJ) FILE(PKD2CPP)           AB1200620;
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(PAR.PRC_Replacement_Cost);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?Actual Additional Cost
  CASE;

  // IF PAR.PRC Replacement Cost is Not Zeros
  IF PAR.PRC_Replacement_Cost <> *ZERO;

  // Actual Add Rep Cost
  PAR.PCD_Act_Add_Cost_Amt = PAR.PCD_Act_Add_Cost_Amt + ( DB1.TH_Head_Killed
  * PAR.PRC_Replacement_Cost 'H' );

  ENDIF;

  ENDIF;

  // Actual Cost Amount
  PAR.PCD_Act_Cost_Amt = DB1.TH_Payment_Gross + PAR.PCD_Act_Add_Cost_Amt;

  //?Actual Cost /Head
  CASE;

  // IF DB1.TH Head Killed is Not Zero
  IF DB1.TH_Head_Killed <> *ZERO;

  // Actual Cost /Head
  PAR.PCD_Act_Cost_Hd = PAR.PCD_Act_Cost_Amt / DB1.TH_Head_Killed 'H';

  ENDIF;

  //?Actual Cost /Live CWT
  CASE;

  // IF DB1.TH Live Wgt is Greater then Zero
  IF DB1.TH_Live_Wgt > *ZERO;

  // Actual Cost /Live CWT
  PAR.PCD_Act_Cost_Live_CWT = PAR.PCD_Act_Cost_Amt / ( DB1.TH_Live_Wgt / 100 'H' ) 'H';

  ENDIF;

  //?Actual Cost /Carc CWT
  CASE;

  // IF DB1.TH Hot Wgt is Greater then Zero
  IF DB1.TH_Hot_Wgt > *ZERO;

  // Actual Cost /Carc CWT
  PAR.PCD_Act_Cost_Carc_CWT = PAR.PCD_Act_Cost_Amt / ( DB1.TH_Hot_Wgt / 100 'H' ) 'H';

  ENDIF;

  //?Actual Cutout Value /CWT
  CASE;

  // IF DB1.TH Hot Wgt is Greater then Zero
  IF DB1.TH_Hot_Wgt > *ZERO;

  // Actual Cutout /Carc CWT
  PAR.PCD_Act_Cutout_Carc_CWT = ( ( DB1.TH_Kill_Product_Value
  + DB1.TH_Render_Product_Value ) + DB1.TH_Cut_Product_Value ) / ( DB1.TH_Hot_Wgt / 100
  'H' ) 'H';

  ENDIF;

  //?Act Gross Margin /Head
  CASE;

  // IF DB1.TH Head Killed is Not Zero
  IF DB1.TH_Head_Killed <> *ZERO;

  // Actual Gross Margin /Hd
  PAR.PCD_Act_Gross_Margin_Hd = ( ( ( DB1.TH_Kill_Product_Value
  + DB1.TH_Render_Product_Value ) + DB1.TH_Cut_Product_Value ) - PAR.PCD_Act_Cost_Amt )
  / DB1.TH_Head_Killed 'H';

  ENDIF;

  ENDDO;

  //?*** COMPARISON ***
  DO;

  //?Base/Sort/Yield/Lean Premium
  CASE;

  // IF PAR.PCS Live As Carc Sts is Yes
  IF PAR.PCS_Live_As_Carc_Sts = 'Y';

  // OR DB1.TH Payment Type is Carcass Merit
  OR DB1.TH_Payment_Type = 'C';

  //?CAS: PCD Comp Base Amt
  CASE;

  // IF PAR.Pricing UOM USR is Live Hundred Weight
  IF PAR.Pricing_UOM_USR = 'LW';

  // PCD Comp Base Amt
  PAR.PCD_Comp_Base_Amt = PAR.TH_CM_Base_Mkt_Price * ( DB1.TH_Live_Wgt / 100 'H' ) 'H';

  //?CAS: PCD Comp Base Amt
  // IF PAR.Pricing UOM USR is Carcass Hundred Weight
  IF PAR.Pricing_UOM_USR = 'CW';

  // PCD Comp Base Amt
  PAR.PCD_Comp_Base_Amt = PAR.TH_CM_Base_Mkt_Price * ( PAR.Weight_Tot_USR / 100 'H' ) 'H';

  ENDIF;

  // PAR.PCD Comp Sort Amt = PAR.Adj Base Carc Val Tot USR - PAR.Base Carc Val Tot US
  PAR.PCD_Comp_Sort_Amt = PAR.Adj_Base_Carc_Val_Tot_USR - PAR.Base_Carc_Val_Tot_USR;

  // Yield Gain/Loss
  PAR.PCD_Comp_Yld_Amt = PAR.Adj_Base_Carc_Val_Tot_USR - ( PAR.PCD_Comp_Base_Amt
  + PAR.PCD_Comp_Sort_Amt );

  // PAR.PCD Comp Lean Amt = PAR.Lean Add/Ded Val Tot USR
  PAR.PCD_Comp_Lean_Amt = PAR.Lean_Add_Ded_Val_Tot_USR;

  //?Calc Per Live CWT
  CASE;

  // IF DB1.TH Live Wgt NE WRK.Zero USR
  IF DB1.TH_Live_Wgt <> WRK.Zero_USR;

  //?PCD Comp Base Live /CWT
  CASE;

  // IF PAR.Pricing UOM USR is Live Hundred Weight
  IF PAR.Pricing_UOM_USR = 'LW';

  // PAR.PCD Comp Base /Live CWT = PAR.TH CM Base Mkt Price
  PAR.PCD_Comp_Base_Live_CWT = PAR.TH_CM_Base_Mkt_Price;

  //?PCD Comp Base Live /CWT
  // IF PAR.Pricing UOM USR is Carcass Hundred Weight
  IF PAR.Pricing_UOM_USR = 'CW';

  // PCD Comp Base /Live CWT
  PAR.PCD_Comp_Base_Live_CWT = PAR.PCD_Comp_Base_Amt / ( DB1.TH_Live_Wgt / 100 'H' ) 'H';

  ENDIF;

  // PCD Comp Sort /Live CWT
  PAR.PCD_Comp_Sort_Live_CWT = PAR.PCD_Comp_Sort_Amt / ( DB1.TH_Live_Wgt / 100 'H' ) 'H';

  // PCD Comp Yld /Live CWT
  PAR.PCD_Comp_Yld_Live_CWT = PAR.PCD_Comp_Yld_Amt / ( DB1.TH_Live_Wgt / 100 'H' ) 'H';

  // PCD Comp Lean /Live CWT
  PAR.PCD_Comp_Lean_Live_CWT = PAR.PCD_Comp_Lean_Amt / ( DB1.TH_Live_Wgt / 100 'H' ) 'H';

  //?Calc Per Live CWT
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?PCD Comp Base /Live CWT
  CASE;

  // IF PAR.Pricing UOM USR is Live Hundred Weight
  IF PAR.Pricing_UOM_USR = 'LW';

  // PAR.PCD Comp Base /Live CWT = PAR.TH CM Base Mkt Price
  PAR.PCD_Comp_Base_Live_CWT = PAR.TH_CM_Base_Mkt_Price;

  //?PCD Comp Base /Live CWT
  // IF PAR.Pricing UOM USR is Carcass Hundred Weight
  IF PAR.Pricing_UOM_USR = 'CW';

  // PAR.PCD Comp Base /Live CWT = CON.*ZERO
  PAR.PCD_Comp_Base_Live_CWT = *ZERO;

  ENDIF;

  // PAR.PCD Comp Sort /Live CWT = CON.*ZERO
  PAR.PCD_Comp_Sort_Live_CWT = *ZERO;

  // PAR.PCD Comp Yld /Live CWT = CON.*ZERO
  PAR.PCD_Comp_Yld_Live_CWT = *ZERO;

  // PAR.PCD Comp Lean /Live CWT = CON.*ZERO
  PAR.PCD_Comp_Lean_Live_CWT = *ZERO;

  ENDIF;

  //?Calc Per Carc CWT
  CASE;

  // IF PAR.Weight Tot USR NE WRK.Zero USR
  IF PAR.Weight_Tot_USR <> WRK.Zero_USR;

  //?PCD Comp Base Carc /CWT
  CASE;

  // IF PAR.Pricing UOM USR is Live Hundred Weight
  IF PAR.Pricing_UOM_USR = 'LW';

  // PCD Comp Base /Carc CWT
  PAR.PCD_Comp_Base_Carc_CWT = PAR.PCD_Comp_Base_Amt / ( PAR.Weight_Tot_USR / 100 'H' )
  'H';

  //?PCD Comp Base Carc /CWT
  // IF PAR.Pricing UOM USR is Carcass Hundred Weight
  IF PAR.Pricing_UOM_USR = 'CW';

  // PAR.PCD Comp Base /Carc CWT = PAR.TH CM Base Mkt Price
  PAR.PCD_Comp_Base_Carc_CWT = PAR.TH_CM_Base_Mkt_Price;

  ENDIF;

  // PCD Comp Sort /Carc CWT
  PAR.PCD_Comp_Sort_Carc_CWT = PAR.PCD_Comp_Sort_Amt / ( PAR.Weight_Tot_USR / 100 'H' )
  'H';

  // PCD Comp Yld /Carc CWT
  PAR.PCD_Comp_Yld_Carc_CWT = PAR.PCD_Comp_Yld_Amt / ( PAR.Weight_Tot_USR / 100 'H' ) 'H';

  // PCD Comp Lean /Carc CWT
  PAR.PCD_Comp_Lean_Carc_CWT = PAR.PCD_Comp_Lean_Amt / ( PAR.Weight_Tot_USR / 100 'H' )
  'H';

  //?Calc Per Carc CWT
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?PCD Comp Base /Carc CWT
  CASE;

  // IF PAR.Pricing UOM USR is Live Hundred Weight
  IF PAR.Pricing_UOM_USR = 'LW';

  // PAR.PCD Comp Base /Carc CWT = CON.*ZERO
  PAR.PCD_Comp_Base_Carc_CWT = *ZERO;

  //?PCD Comp Base /Carc CWT
  // IF PAR.Pricing UOM USR is Carcass Hundred Weight
  IF PAR.Pricing_UOM_USR = 'CW';

  // PAR.PCD Comp Base /Carc CWT = PAR.TH CM Base Mkt Price
  PAR.PCD_Comp_Base_Carc_CWT = PAR.TH_CM_Base_Mkt_Price;

  ENDIF;

  // PAR.PCD Comp Sort /Carc CWT = CON.*ZERO
  PAR.PCD_Comp_Sort_Carc_CWT = *ZERO;

  // PAR.PCD Comp Yld /Carc CWT = CON.*ZERO
  PAR.PCD_Comp_Yld_Carc_CWT = *ZERO;

  // PAR.PCD Comp Lean /Carc CWT = CON.*ZERO
  PAR.PCD_Comp_Lean_Carc_CWT = *ZERO;

  ENDIF;

  ENDIF;

  // PAR.PCD Comp Add Cost Amt = CON.*ZERO
  PAR.PCD_Comp_Add_Cost_Amt = *ZERO;

  // PAR.PCD Comp Gross Amt = PAR.Total Carc Val Tot USR
  PAR.PCD_Comp_Gross_Amt = PAR.Total_Carc_Val_Tot_USR;

  //?Seaboard Freight
  CASE;

  // IF PAR.PCS Comp Selection Type is Comparsion
  IF PAR.PCS_Comp_Selection_Type = 'DC'/'KC';

  //?Seaboard Freight
  CASE;

  // IF WRK.BOL Freight Exp Paid By is Seaboard
  IF WRK.BOL_Freight_Exp_Paid_By = 'S';

  // PAR.PCD Comp Add Cost Amt = DB1.TH Freight Amount
  PAR.PCD_Comp_Add_Cost_Amt = DB1.TH_Freight_Amount;

  //?Seaboard Freight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.PCD Comp Add Cost Amt = CON.*ZERO
  PAR.PCD_Comp_Add_Cost_Amt = *ZERO;

  ENDIF;

  ENDIF;

  //?Accrual
  CASE;

  // IF PAR.PCS Comp Selection Type is Comparsion
  IF PAR.PCS_Comp_Selection_Type = 'DC'/'KC';

  // PAR.PCD Comp Add Cost Amt = PAR.PCD Comp Add Cost Amt + DB1.TH Accrual Amount
  PAR.PCD_Comp_Add_Cost_Amt = PAR.PCD_Comp_Add_Cost_Amt + DB1.TH_Accrual_Amount;

  ENDIF;

  //?Comparison Additional Cost Amount
  CASE;

  // IF PAR.PCS Gross +/- /Head is Not Zeros
  IF PAR.PCS_Gross_+_Head <> *ZERO;

  // Comp Add Cost Amt
  PAR.PCD_Comp_Add_Cost_Amt = PAR.PCD_Comp_Add_Cost_Amt + ( PAR.PCS_Gross_+_Head
  * DB1.TH_Head_Killed 'H' );

  ENDIF;

  // Comparison Cost Amount
  PAR.PCD_Comp_Cost_Amt = PAR.PCD_Comp_Gross_Amt + PAR.PCD_Comp_Add_Cost_Amt;

  //?Comparison Cost /Head
  CASE;

  // IF DB1.TH Head Killed is Not Zero
  IF DB1.TH_Head_Killed <> *ZERO;

  // Comparison Cost /Head
  PAR.PCD_Comp_Cost_Hd = PAR.PCD_Comp_Cost_Amt / DB1.TH_Head_Killed 'H';

  ENDIF;

  //?Comparison Cost /Live CWT
  CASE;

  // IF DB1.TH Live Wgt is Greater then Zero
  IF DB1.TH_Live_Wgt > *ZERO;

  // Comparison Cost /Live CWT
  PAR.PCD_Comp_Cost_Live_CWT = PAR.PCD_Comp_Cost_Amt / ( DB1.TH_Live_Wgt / 100 'H' ) 'H';

  ENDIF;

  //?Comparison Cost /Carc CWT
  CASE;

  // IF DB1.TH Hot Wgt is Greater then Zero
  IF DB1.TH_Hot_Wgt > *ZERO;

  // Comparison Cost /Carc CWT
  PAR.PCD_Comp_Cost_Carc_CWT = PAR.PCD_Comp_Cost_Amt / ( DB1.TH_Hot_Wgt / 100 'H' ) 'H';

  ENDIF;

  // Call program Bld Prd Comp Dtl CV   XF.
  CALL PROGRAM(Bld Prd Comp Dtl CV   XF) ('PDCWXFR');
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(PAR.PCD_Comp_Cut_Val);
  PARAMETER(PAR.TH_Purchase_Date);
  PARAMETER(PAR.Date_To_USR);

  // Comp Kill Value
  PAR.PCD_Comp_Kill_Val = DB1.TH_Head_Killed * PAR.TH_Kill_Product_Value 'H';

  // Comp Rend Value
  PAR.PCD_Comp_Rend_Val = DB1.TH_Head_Killed * PAR.TH_Render_Product_Value 'H';

  //?Comp Cutout Value /CWT
  CASE;

  // IF DB1.TH Hot Wgt is Greater then Zero
  IF DB1.TH_Hot_Wgt > *ZERO;

  // Comp Cutout /Carc CWT
  PAR.PCD_Comp_Cutout_Carc_CWT = ( ( PAR.PCD_Comp_Kill_Val + PAR.PCD_Comp_Rend_Val )
  + PAR.PCD_Comp_Cut_Val ) / ( DB1.TH_Hot_Wgt / 100 'H' ) 'H';

  ENDIF;

  //?Comp Gross Margin /Head
  CASE;

  // IF DB1.TH Head Killed is Not Zero
  IF DB1.TH_Head_Killed <> *ZERO;

  // Comp Gross Margin /Hd
  PAR.PCD_Comp_Gross_Margin_Hd = ( ( ( PAR.PCD_Comp_Kill_Val + PAR.PCD_Comp_Rend_Val )
  + PAR.PCD_Comp_Cut_Val ) - PAR.PCD_Comp_Cost_Amt ) / DB1.TH_Head_Killed 'H';

  ENDIF;

  ENDDO;

  // PAR.PCD Act-Comp /Hd = PAR.PCD Act Cost /Hd - PAR.PCD Comp Cost /Hd
  PAR.PCD_Act_Comp_Hd = PAR.PCD_Act_Cost_Hd - PAR.PCD_Comp_Cost_Hd;

  // PAR.PCD Act-Comp /Lv CWT = PAR.PCD Act Cost /Live CWT - PAR.PCD Comp Cost /Live
  PAR.PCD_Act_Comp_Lv_CWT = PAR.PCD_Act_Cost_Live_CWT - PAR.PCD_Comp_Cost_Live_CWT;

  // PAR.PCD Act-Comp /Crc CWT = PAR.PCD Act Cost /Carc CWT - PAR.PCD Comp Cost /Carc
  PAR.PCD_Act_Comp_Crc_CWT = PAR.PCD_Act_Cost_Carc_CWT - PAR.PCD_Comp_Cost_Carc_CWT;

  //?PCD Farm Site
  CASE;

  // IF DB1.TH Source Type is External
  IF DB1.TH_Source_Type = 'E';

  // PAR.PCD Farm Site = DB1.PL Location Code
  PAR.PCD_Farm_Site = DB1.PL_Location_Code;

  //?PCD Farm Site
  // IF DB1.TH Source Type is Internal
  IF DB1.TH_Source_Type = 'I';

  // WRK.Farm Site 6.0 USR = DB1.TH HPS Farm Site
  WRK.Farm_Site_6_0_USR = DB1.TH_HPS_Farm_Site;

  // PAR.PCD Farm Site = CVTVAR(WRK.Farm Site 6.0 USR)
  PAR.PCD_Farm_Site = CVTVAR(WRK.Farm_Site_6_0_USR);

  ENDIF;

  // PAR.PCD Tattoo Group Ref = DB1.TH Tattoo Reference
  PAR.PCD_Tattoo_Group_Ref = DB1.TH_Group_Reference;

  EXECUTE FUNCTION(Upd Prod Comp Dtl     RT) TYPE(RTVOBJ) FILE(PKD6CPP)           AB1202264;
  PARAMETER(PAR.CC_Company_Number);
  PARAMETER(PAR.PCS_Code);
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.TH_Head_Received);
  PARAMETER(DB1.TH_Head_Killed);
  PARAMETER(DB1.TH_Head_Accepted);
  PARAMETER(DB1.TH_Live_Wgt);
  PARAMETER(DB1.TH_Adj_Live_Wgt);
  PARAMETER(DB1.TH_Hot_Wgt);
  PARAMETER(DB1.TH_Avg_Live_Wgt);
  PARAMETER(DB1.TH_Avg_Hot_Wgt);
  PARAMETER(DB1.TH_Actual_Yield);
  PARAMETER(DB1.TH_Avg_Backfat);
  PARAMETER(DB1.TH_Avg_Loin_Eye_Depth);
  PARAMETER(DB1.TH_Avg_Lean_Percent);
  PARAMETER(PAR.PCD_Head_Analyzed);
  PARAMETER(PAR.PCD_Actual_Base_Price);
  PARAMETER(PAR.PCD_Act_Base_Amt);
  PARAMETER(PAR.PCD_Act_Base_Live_CWT);
  PARAMETER(PAR.PCD_Act_Base_Carc_CWT);
  PARAMETER(PAR.PCD_Act_Sort_Amt);
  PARAMETER(PAR.PCD_Act_Sort_Live_CWT);
  PARAMETER(PAR.PCD_Act_Sort_Carc_CWT);
  PARAMETER(PAR.PCD_Act_Yld_Amt);
  PARAMETER(PAR.PCD_Act_Yld_Live_CWT);
  PARAMETER(PAR.PCD_Act_Yld_Carc_CWT);
  PARAMETER(PAR.PCD_Act_Lean_Amt);
  PARAMETER(PAR.PCD_Act_Lean_Live_CWT);
  PARAMETER(PAR.PCD_Act_Lean_Carc_CWT);
  PARAMETER(DB1.TH_Payment_Gross);
  PARAMETER(PAR.PCD_Act_Add_Cost_Amt);
  PARAMETER(PAR.PCD_Act_Cost_Amt);
  PARAMETER(PAR.PCD_Act_Cost_Hd);
  PARAMETER(PAR.PCD_Act_Cost_Live_CWT);
  PARAMETER(PAR.PCD_Act_Cost_Carc_CWT);
  PARAMETER(DB1.TH_Kill_Product_Value);
  PARAMETER(DB1.TH_Render_Product_Value);
  PARAMETER(DB1.TH_Cut_Product_Value);
  PARAMETER(PAR.PCD_Act_Cutout_Carc_CWT);
  PARAMETER(PAR.PCD_Act_Gross_Margin_Hd);
  PARAMETER(PAR.TH_CM_Base_Mkt_Price);
  PARAMETER(PAR.PCD_Comp_Base_Amt);
  PARAMETER(PAR.PCD_Comp_Base_Live_CWT);
  PARAMETER(PAR.PCD_Comp_Base_Carc_CWT);
  PARAMETER(PAR.PCD_Comp_Sort_Amt);
  PARAMETER(PAR.PCD_Comp_Sort_Live_CWT);
  PARAMETER(PAR.PCD_Comp_Sort_Carc_CWT);
  PARAMETER(PAR.PCD_Comp_Yld_Amt);
  PARAMETER(PAR.PCD_Comp_Yld_Live_CWT);
  PARAMETER(PAR.PCD_Comp_Yld_Carc_CWT);
  PARAMETER(PAR.PCD_Comp_Lean_Amt);
  PARAMETER(PAR.PCD_Comp_Lean_Live_CWT);
  PARAMETER(PAR.PCD_Comp_Lean_Carc_CWT);
  PARAMETER(PAR.Total_Carc_Val_Tot_USR);
  PARAMETER(PAR.PCD_Comp_Add_Cost_Amt);
  PARAMETER(PAR.PCD_Comp_Cost_Amt);
  PARAMETER(PAR.PCD_Comp_Cost_Hd);
  PARAMETER(PAR.PCD_Comp_Cost_Live_CWT);
  PARAMETER(PAR.PCD_Comp_Cost_Carc_CWT);
  PARAMETER(PAR.PCD_Comp_Kill_Val);
  PARAMETER(PAR.PCD_Comp_Rend_Val);
  PARAMETER(PAR.PCD_Comp_Cut_Val);
  PARAMETER(PAR.PCD_Comp_Cutout_Carc_CWT);
  PARAMETER(PAR.PCD_Comp_Gross_Margin_Hd);
  PARAMETER(PAR.PCD_Act_Comp_Hd);
  PARAMETER(PAR.PCD_Act_Comp_Lv_CWT);
  PARAMETER(PAR.PCD_Act_Comp_Crc_CWT);
  PARAMETER(DB1.TH_Source_Type);
  PARAMETER(DB1.TH_Payment_Type);
  PARAMETER(PAR.PCD_Calendar_Year);
  PARAMETER(PAR.PCD_Calendar_Quarter);
  PARAMETER(PAR.PSC_Commodity_Market_Code);
  PARAMETER(PAR.PSC_Commodity_Price_Group);
  PARAMETER(PAR.PCD_Farm_Site);
  PARAMETER(PAR.PCD_Tattoo_Group_Ref);
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(DB1.PL_Location_Code);
  PARAMETER(DB1.TH_Source_Code);
  PARAMETER(DB1.HB_Buyer_Code);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Crt Prd Comp Dtl      CR) TYPE(CRTOBJ) FILE(PKD6CPP)           AB1202261;
   PARAMETER(PAR.CC_Company_Number);
   PARAMETER(PAR.PCS_Code);
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.BOH_Buy_Order_Number);
   PARAMETER(PAR.BOL_Load_Number);
   PARAMETER(PAR.TH_Tattoo_Number);
   PARAMETER(PAR.TH_Kill_Date);
   PARAMETER(PAR.PCD_Head_Received);
   PARAMETER(PAR.PCD_Head_Killed);
   PARAMETER(PAR.PCD_Head_Analyzed);
   PARAMETER(PAR.PCD_Live_Wgt);
   PARAMETER(PAR.PCD_Adj_Live_Wgt);
   PARAMETER(PAR.PCD_Hot_Wgt);
   PARAMETER(PAR.PCD_Avg_Live_Wgt);
   PARAMETER(PAR.PCD_Avg_Hot_Wgt);
   PARAMETER(PAR.PCD_Actual_Yield);
   PARAMETER(PAR.PCD_Avg_Backfat);
   PARAMETER(PAR.PCD_Avg_Loin_Eye);
   PARAMETER(PAR.PCD_Avg_Lean);
   PARAMETER(PAR.PCD_Head_Analyzed);
   PARAMETER(PAR.PCD_Actual_Base_Price);
   PARAMETER(PAR.PCD_Act_Base_Amt);
   PARAMETER(PAR.PCD_Act_Base_Live_CWT);
   PARAMETER(PAR.PCD_Act_Base_Carc_CWT);
   PARAMETER(PAR.PCD_Act_Sort_Amt);
   PARAMETER(PAR.PCD_Act_Sort_Live_CWT);
   PARAMETER(PAR.PCD_Act_Sort_Carc_CWT);
   PARAMETER(PAR.PCD_Act_Yld_Amt);
   PARAMETER(PAR.PCD_Act_Yld_Live_CWT);
   PARAMETER(PAR.PCD_Act_Yld_Carc_CWT);
   PARAMETER(PAR.PCD_Act_Lean_Amt);
   PARAMETER(PAR.PCD_Act_Lean_Live_CWT);
   PARAMETER(PAR.PCD_Act_Lean_Carc_CWT);
   PARAMETER(PAR.PCD_Act_Gross_Amt);
   PARAMETER(PAR.PCD_Act_Add_Cost_Amt);
   PARAMETER(PAR.PCD_Act_Cost_Amt);
   PARAMETER(PAR.PCD_Act_Cost_Hd);
   PARAMETER(PAR.PCD_Act_Cost_Live_CWT);
   PARAMETER(PAR.PCD_Act_Cost_Carc_CWT);
   PARAMETER(PAR.PCD_Act_Kill_Val);
   PARAMETER(PAR.PCD_Act_Rend_Val);
   PARAMETER(PAR.PCD_Act_Cut_Val);
   PARAMETER(PAR.PCD_Act_Cutout_Carc_CWT);
   PARAMETER(PAR.PCD_Act_Gross_Margin_Hd);
   PARAMETER(PAR.PCD_Comp_Base_Price);
   PARAMETER(PAR.PCD_Comp_Base_Amt);
   PARAMETER(PAR.PCD_Comp_Base_Live_CWT);
   PARAMETER(PAR.PCD_Comp_Base_Carc_CWT);
   PARAMETER(PAR.PCD_Comp_Sort_Amt);
   PARAMETER(PAR.PCD_Comp_Sort_Live_CWT);
   PARAMETER(PAR.PCD_Comp_Sort_Carc_CWT);
   PARAMETER(PAR.PCD_Comp_Yld_Amt);
   PARAMETER(PAR.PCD_Comp_Yld_Live_CWT);
   PARAMETER(PAR.PCD_Comp_Yld_Carc_CWT);
   PARAMETER(PAR.PCD_Comp_Lean_Amt);
   PARAMETER(PAR.PCD_Comp_Lean_Live_CWT);
   PARAMETER(PAR.PCD_Comp_Lean_Carc_CWT);
   PARAMETER(PAR.PCD_Comp_Gross_Amt);
   PARAMETER(PAR.PCD_Comp_Add_Cost_Amt);
   PARAMETER(PAR.PCD_Comp_Cost_Amt);
   PARAMETER(PAR.PCD_Comp_Cost_Hd);
   PARAMETER(PAR.PCD_Comp_Cost_Live_CWT);
   PARAMETER(PAR.PCD_Comp_Cost_Carc_CWT);
   PARAMETER(PAR.PCD_Comp_Kill_Val);
   PARAMETER(PAR.PCD_Comp_Rend_Val);
   PARAMETER(PAR.PCD_Comp_Cut_Val);
   PARAMETER(PAR.PCD_Comp_Cutout_Carc_CWT);
   PARAMETER(PAR.PCD_Comp_Gross_Margin_Hd);
   PARAMETER(PAR.PCD_Act_Comp_Hd);
   PARAMETER(PAR.PCD_Act_Comp_Lv_CWT);
   PARAMETER(PAR.PCD_Act_Comp_Crc_CWT);
   PARAMETER(PAR.PCD_Source_Type);
   PARAMETER(PAR.PCD_Payment_Type);
   PARAMETER(PAR.PCD_Calendar_Year);
   PARAMETER(PAR.PCD_Calendar_Quarter);
   PARAMETER(PAR.PCD_Commodity_Market);
   PARAMETER(PAR.PCD_Commodity_Group);
   PARAMETER(PAR.PCD_Unused_Sts_1);
   PARAMETER(PAR.PCD_Unused_Sts_2);
   PARAMETER(PAR.PCD_Unused_Sts_3);
   PARAMETER(PAR.PCD_Unused_Sts_4);
   PARAMETER(PAR.PCD_Unused_Sts_5);
   PARAMETER(PAR.PCD_Farm_Site);
   PARAMETER(PAR.PCD_Tattoo_Group_Ref);
   PARAMETER(PAR.PD_Producer_Code);
   PARAMETER(PAR.PL_Location_Code);
   PARAMETER(PAR.SR_Source_Code);
   PARAMETER(PAR.HB_Buyer_Code);
   PARAMETER(PAR.RS_User_Changed);
   PARAMETER(PAR.RS_Date_Changed);
   PARAMETER(PAR.RS_Time_Changed);
   PARAMETER(PAR.RS_Record_Status);
   PARAMETER(PAR.RS_Job);
   PARAMETER(PAR.RS_Program);
   PARAMETER(PAR.RS_User_Added);
   PARAMETER(PAR.RS_Date_Added);
   PARAMETER(PAR.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?Execute internal function

     // PAR.RS Record Status = CND.Active
     PAR.RS_Record_Status = 'A';

     // PAR.RS User Added = JOB.*USER
     PAR.RS_User_Added = JOB.*USER;

     // PAR.RS Date Added = JOB.*Job date
     PAR.RS_Date_Added = JOB.*Job_date;

     // PAR.RS Time Added = JOB.*Job time
     PAR.RS_Time_Added = JOB.*Job_time;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

    }

   }

   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Prd Comp Dtl      CH) TYPE(CHGOBJ) FILE(PKD6CPP)           AB1202262;
   PARAMETER(PAR.CC_Company_Number);
   PARAMETER(PAR.PCS_Code);
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.BOH_Buy_Order_Number);
   PARAMETER(PAR.BOL_Load_Number);
   PARAMETER(PAR.TH_Tattoo_Number);
   PARAMETER(PAR.TH_Kill_Date);
   PARAMETER(PAR.PCD_Head_Received);
   PARAMETER(PAR.PCD_Head_Killed);
   PARAMETER(PAR.PCD_Head_Analyzed);
   PARAMETER(PAR.PCD_Live_Wgt);
   PARAMETER(PAR.PCD_Adj_Live_Wgt);
   PARAMETER(PAR.PCD_Hot_Wgt);
   PARAMETER(PAR.PCD_Avg_Live_Wgt);
   PARAMETER(PAR.PCD_Avg_Hot_Wgt);
   PARAMETER(PAR.PCD_Actual_Yield);
   PARAMETER(PAR.PCD_Avg_Backfat);
   PARAMETER(PAR.PCD_Avg_Loin_Eye);
   PARAMETER(PAR.PCD_Avg_Lean);
   PARAMETER(PAR.PCD_Head_Analyzed);
   PARAMETER(PAR.PCD_Actual_Base_Price);
   PARAMETER(PAR.PCD_Act_Base_Amt);
   PARAMETER(PAR.PCD_Act_Base_Live_CWT);
   PARAMETER(PAR.PCD_Act_Base_Carc_CWT);
   PARAMETER(PAR.PCD_Act_Sort_Amt);
   PARAMETER(PAR.PCD_Act_Sort_Live_CWT);
   PARAMETER(PAR.PCD_Act_Sort_Carc_CWT);
   PARAMETER(PAR.PCD_Act_Yld_Amt);
   PARAMETER(PAR.PCD_Act_Yld_Live_CWT);
   PARAMETER(PAR.PCD_Act_Yld_Carc_CWT);
   PARAMETER(PAR.PCD_Act_Lean_Amt);
   PARAMETER(PAR.PCD_Act_Lean_Live_CWT);
   PARAMETER(PAR.PCD_Act_Lean_Carc_CWT);
   PARAMETER(PAR.PCD_Act_Gross_Amt);
   PARAMETER(PAR.PCD_Act_Add_Cost_Amt);
   PARAMETER(PAR.PCD_Act_Cost_Amt);
   PARAMETER(PAR.PCD_Act_Cost_Hd);
   PARAMETER(PAR.PCD_Act_Cost_Live_CWT);
   PARAMETER(PAR.PCD_Act_Cost_Carc_CWT);
   PARAMETER(PAR.PCD_Act_Kill_Val);
   PARAMETER(PAR.PCD_Act_Rend_Val);
   PARAMETER(PAR.PCD_Act_Cut_Val);
   PARAMETER(PAR.PCD_Act_Cutout_Carc_CWT);
   PARAMETER(PAR.PCD_Act_Gross_Margin_Hd);
   PARAMETER(PAR.PCD_Comp_Base_Price);
   PARAMETER(PAR.PCD_Comp_Base_Amt);
   PARAMETER(PAR.PCD_Comp_Base_Live_CWT);
   PARAMETER(PAR.PCD_Comp_Base_Carc_CWT);
   PARAMETER(PAR.PCD_Comp_Sort_Amt);
   PARAMETER(PAR.PCD_Comp_Sort_Live_CWT);
   PARAMETER(PAR.PCD_Comp_Sort_Carc_CWT);
   PARAMETER(PAR.PCD_Comp_Yld_Amt);
   PARAMETER(PAR.PCD_Comp_Yld_Live_CWT);
   PARAMETER(PAR.PCD_Comp_Yld_Carc_CWT);
   PARAMETER(PAR.PCD_Comp_Lean_Amt);
   PARAMETER(PAR.PCD_Comp_Lean_Live_CWT);
   PARAMETER(PAR.PCD_Comp_Lean_Carc_CWT);
   PARAMETER(PAR.PCD_Comp_Gross_Amt);
   PARAMETER(PAR.PCD_Comp_Add_Cost_Amt);
   PARAMETER(PAR.PCD_Comp_Cost_Amt);
   PARAMETER(PAR.PCD_Comp_Cost_Hd);
   PARAMETER(PAR.PCD_Comp_Cost_Live_CWT);
   PARAMETER(PAR.PCD_Comp_Cost_Carc_CWT);
   PARAMETER(PAR.PCD_Comp_Kill_Val);
   PARAMETER(PAR.PCD_Comp_Rend_Val);
   PARAMETER(PAR.PCD_Comp_Cut_Val);
   PARAMETER(PAR.PCD_Comp_Cutout_Carc_CWT);
   PARAMETER(PAR.PCD_Comp_Gross_Margin_Hd);
   PARAMETER(PAR.PCD_Act_Comp_Hd);
   PARAMETER(PAR.PCD_Act_Comp_Lv_CWT);
   PARAMETER(PAR.PCD_Act_Comp_Crc_CWT);
   PARAMETER(PAR.PCD_Source_Type);
   PARAMETER(PAR.PCD_Payment_Type);
   PARAMETER(PAR.PCD_Calendar_Year);
   PARAMETER(PAR.PCD_Calendar_Quarter);
   PARAMETER(PAR.PCD_Commodity_Market);
   PARAMETER(PAR.PCD_Commodity_Group);
   PARAMETER(PAR.PCD_Farm_Site);
   PARAMETER(PAR.PCD_Tattoo_Group_Ref);
   PARAMETER(PAR.PD_Producer_Code);
   PARAMETER(PAR.PL_Location_Code);
   PARAMETER(PAR.SR_Source_Code);
   PARAMETER(PAR.HB_Buyer_Code);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

  ENDDO;

  EXECUTE FUNCTION(Rtv CMP Payment Info2 RT) TYPE(RTVOBJ) FILE(PKARREP)           AB1272616;
  PARAMETER(PAR.CMP_Program_Code);
  PARAMETER(NLL.CMP_Description);
  PARAMETER(NLL.CMP_Grading_Type);
  PARAMETER(NLL.CMP_Sort_Basis);
  PARAMETER(NLL.CMP_Carc_Wgt_Type);
  PARAMETER(NLL.CMP_Std_Lean_Percent);
  PARAMETER(NLL.CMP_Lean_Factor);
  PARAMETER(NLL.CMP_Optimal_Row_Nbr_f_srt);
  PARAMETER(NLL.CMP_Type);
  PARAMETER(NLL.CMP_Market_Add_Deduct);
  PARAMETER(NLL.CMP_of_Carcass_Cutout);
  PARAMETER(NLL.CMP_Fixed_Cost_Per_Head);
  PARAMETER(LCL.CMP_CLC_Premium_First);
  PARAMETER(NLL.RS_Record_Status);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.CMP CLC Premium First is Sort First
  IF LCL.CMP_CLC_Premium_First = *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Premium is create first and sort is last
  // WRK.TH CM Sort Discount Amt = PAR.Gross Before Sort /HD Usr
  WRK.TH_CM_Sort_Discount_Amt = PAR.Gross_Before_Sort_HD_Usr;

  ENDIF;

  //?Create Tattoo Header in QTEMP
  CASE;

  // IF PAR.Print Comp Sum/Dtl STS is Yes
  IF PAR.Print_Comp_Sum_Dtl_STS = 'Y';

  //?Calc Amounts
  DO;

  //?CAS: TH CM Base Mkt Price Amt w/ Qoute Type.  12/16/98 PKP
  CASE;

  // IF PAR.Pricing UOM USR is Live Hundred Weight
  IF PAR.Pricing_UOM_USR = 'LW';

  // TH CM Base Mkt Price Amt
  WRK.TH_CM_Base_Mkt_Price_Amt = PAR.TH_CM_Base_Mkt_Price * ( DB1.TH_Live_Wgt / 100 'H' )
  'H';

  //?CAS: TH CM Base Mkt Price Amt w/ Qoute Type.  12/16/98 PKP
  // IF PAR.Pricing UOM USR is Carcass Hundred Weight
  IF PAR.Pricing_UOM_USR = 'CW';

  // TH CM Base Mkt Price Amt
  WRK.TH_CM_Base_Mkt_Price_Amt = PAR.TH_CM_Base_Mkt_Price * ( PAR.Weight_Tot_USR / 100 'H' )
  'H';

  ENDIF;

  // WRK.TH CM Sort Discount Amt = PAR.Adj Base Carc Val Tot USR - PAR.Base Carc Val
  WRK.TH_CM_Sort_Discount_Amt = PAR.Adj_Base_Carc_Val_Tot_USR - PAR.Base_Carc_Val_Tot_USR;

  // WRK.TH CM Base Carcass Value = PAR.Adj Base Carc Val Tot USR
  WRK.TH_CM_Base_Carcass_Value = PAR.Adj_Base_Carc_Val_Tot_USR;

  // Yield Gain/Loss
  WRK.TH_CM_Yield_Gain_Loss_Amt = WRK.TH_CM_Base_Carcass_Value - (
  WRK.TH_CM_Base_Mkt_Price_Amt + WRK.TH_CM_Sort_Discount_Amt );

  // WRK.TH CM LN AddOn/Deduct Amt = PAR.Lean Add/Ded Val Tot USR
  WRK.TH_CM_LN_AddOn_Deduct_Amt = PAR.Lean_Add_Ded_Val_Tot_USR;

  // WRK.TH CM Carcass Gross Amt = WRK.TH CM Base Carcass Value + WRK.TH CM LN AddOn/
  WRK.TH_CM_Carcass_Gross_Amt = WRK.TH_CM_Base_Carcass_Value
  + WRK.TH_CM_LN_AddOn_Deduct_Amt;

  ENDDO;

  //?Calc Per Live CWT
  DO;

  CASE;

  // IF DB1.TH Live Wgt NE WRK.Zero USR
  IF DB1.TH_Live_Wgt <> WRK.Zero_USR;

  //?TH CM Bse Mkt Live /CWT w/ Quote Type.  12/16/98 PKD
  CASE;

  // IF PAR.Pricing UOM USR is Live Hundred Weight
  IF PAR.Pricing_UOM_USR = 'LW';

  // WRK.TH CM Bse Mkt Live /CWT = WRK.TH CM Base Mkt Price
  WRK.TH_CM_Bse_Mkt_Live_CWT = WRK.TH_CM_Base_Mkt_Price;

  //?TH CM Bse Mkt Live /CWT w/ Quote Type.  12/16/98 PKD
  // IF PAR.Pricing UOM USR is Carcass Hundred Weight
  IF PAR.Pricing_UOM_USR = 'CW';

  // TH CM Bse Mkt Live /CWT
  WRK.TH_CM_Bse_Mkt_Live_CWT = WRK.TH_CM_Base_Mkt_Price_Amt / ( DB1.TH_Live_Wgt / 100 'H' )
  'H';

  ENDIF;

  // TH CM Srt Dsc Live /CWT
  WRK.TH_CM_Srt_Dsc_Live_CWT = WRK.TH_CM_Sort_Discount_Amt / ( DB1.TH_Live_Wgt / 100 'H' )
  'H';

  // TH CM Yld G/L Live /CWT
  WRK.TH_CM_Yld_G_L_Live_CWT = WRK.TH_CM_Yield_Gain_Loss_Amt / ( DB1.TH_Live_Wgt / 100 'H' )
  'H';

  // TH CM Crc Val Live /CWT
  WRK.TH_CM_Crc_Val_Live_CWT = WRK.TH_CM_Base_Carcass_Value / ( DB1.TH_Live_Wgt / 100 'H' )
  'H';

  // TH CM Lean Prem Live /CWT
  WRK.TH_CM_Lean_Prem_Live_CWT = WRK.TH_CM_LN_AddOn_Deduct_Amt / ( DB1.TH_Live_Wgt / 100
  'H' ) 'H';

  //?recalculate gross
  // WRK.TH CM Gross Live /CWT = WRK.TH CM Bse Mkt Live /CWT + WRK.TH CM Srt Dsc Live
  WRK.TH_CM_Gross_Live_CWT = WRK.TH_CM_Bse_Mkt_Live_CWT + WRK.TH_CM_Srt_Dsc_Live_CWT;

  // WRK.TH CM Gross Live /CWT = WRK.TH CM Gross Live /CWT + WRK.TH CM Yld G/L Live /
  WRK.TH_CM_Gross_Live_CWT = WRK.TH_CM_Gross_Live_CWT + WRK.TH_CM_Yld_G_L_Live_CWT;

  // WRK.TH CM Gross Live /CWT = WRK.TH CM Gross Live /CWT + WRK.TH CM Lean Prem Live
  WRK.TH_CM_Gross_Live_CWT = WRK.TH_CM_Gross_Live_CWT + WRK.TH_CM_Lean_Prem_Live_CWT;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?TH CM Bse Mkt Live /CWT w/ Quote Type.  12/16/98 PKD
  CASE;

  // IF PAR.Pricing UOM USR is Live Hundred Weight
  IF PAR.Pricing_UOM_USR = 'LW';

  // WRK.TH CM Bse Mkt Live /CWT = PAR.TH CM Base Mkt Price
  WRK.TH_CM_Bse_Mkt_Live_CWT = PAR.TH_CM_Base_Mkt_Price;

  //?TH CM Bse Mkt Live /CWT w/ Quote Type.  12/16/98 PKD
  // IF PAR.Pricing UOM USR is Carcass Hundred Weight
  IF PAR.Pricing_UOM_USR = 'CW';

  // WRK.TH CM Bse Mkt Live /CWT = CON.*ZERO
  WRK.TH_CM_Bse_Mkt_Live_CWT = *ZERO;

  ENDIF;

  // WRK.TH CM Srt Dsc Live /CWT = CON.*ZERO
  WRK.TH_CM_Srt_Dsc_Live_CWT = *ZERO;

  // WRK.TH CM Yld G/L Live /CWT = CON.*ZERO
  WRK.TH_CM_Yld_G_L_Live_CWT = *ZERO;

  // WRK.TH CM Crc Val Live /CWT = CON.*ZERO
  WRK.TH_CM_Crc_Val_Live_CWT = *ZERO;

  // WRK.TH CM Lean Prem Live /CWT = CON.*ZERO
  WRK.TH_CM_Lean_Prem_Live_CWT = *ZERO;

  // WRK.TH CM Gross Live /CWT = CON.*ZERO
  WRK.TH_CM_Gross_Live_CWT = *ZERO;

  ENDIF;

  ENDDO;

  //?Calc Per Carc CWT
  DO;

  CASE;

  // IF PAR.Weight Tot USR NE WRK.Zero USR
  IF PAR.Weight_Tot_USR <> WRK.Zero_USR;

  //?TH CM Bse Mkt Carc /CWT w/ Quote Type.  12/16/98 PKD
  CASE;

  // IF PAR.Pricing UOM USR is Live Hundred Weight
  IF PAR.Pricing_UOM_USR = 'LW';

  // TH CM Bse Mkt Carc /CWT
  WRK.TH_CM_Bse_Mkt_Carc_CWT = WRK.TH_CM_Base_Mkt_Price_Amt / ( PAR.Weight_Tot_USR / 100
  'H' ) 'H';

  //?TH CM Bse Mkt Carc /CWT w/ Quote Type.  12/16/98 PKD
  // IF PAR.Pricing UOM USR is Carcass Hundred Weight
  IF PAR.Pricing_UOM_USR = 'CW';

  // WRK.TH CM Bse Mkt Carc /CWT = PAR.TH CM Base Mkt Price
  WRK.TH_CM_Bse_Mkt_Carc_CWT = PAR.TH_CM_Base_Mkt_Price;

  ENDIF;

  // TH CM Srt Dsc Carc /CWT
  WRK.TH_CM_Srt_Dsc_Carc_CWT = WRK.TH_CM_Sort_Discount_Amt / ( PAR.Weight_Tot_USR / 100
  'H' ) 'H';

  // TH CM Yld G/L Carc /CWT
  WRK.TH_CM_Yld_G_L_Carc_CWT = WRK.TH_CM_Yield_Gain_Loss_Amt / ( PAR.Weight_Tot_USR / 100
  'H' ) 'H';

  // TH CM Crc Val Carc /CWT
  WRK.TH_CM_Crc_Val_Carc_CWT = WRK.TH_CM_Base_Carcass_Value / ( PAR.Weight_Tot_USR / 100
  'H' ) 'H';

  // TH CM Lean Prem Carc /CWT
  WRK.TH_CM_Lean_Prem_Carc_CWT = WRK.TH_CM_LN_AddOn_Deduct_Amt / ( PAR.Weight_Tot_USR
  / 100 'H' ) 'H';

  //?recalculate gross
  // WRK.TH CM Gross Carc /CWT = WRK.TH CM Bse Mkt Carc /CWT + WRK.TH CM Srt Dsc Carc
  WRK.TH_CM_Gross_Carc_CWT = WRK.TH_CM_Bse_Mkt_Carc_CWT + WRK.TH_CM_Srt_Dsc_Carc_CWT;

  // WRK.TH CM Gross Carc /CWT = WRK.TH CM Gross Carc /CWT + WRK.TH CM Yld G/L Carc /
  WRK.TH_CM_Gross_Carc_CWT = WRK.TH_CM_Gross_Carc_CWT + WRK.TH_CM_Yld_G_L_Carc_CWT;

  // WRK.TH CM Gross Carc /CWT = WRK.TH CM Gross Carc /CWT + WRK.TH CM Lean Prem Carc
  WRK.TH_CM_Gross_Carc_CWT = WRK.TH_CM_Gross_Carc_CWT + WRK.TH_CM_Lean_Prem_Carc_CWT;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?TH CM Bse Mkt Carc /CWT w/ Quote Type.  12/16/98 PKP
  CASE;

  // IF PAR.Pricing UOM USR is Live Hundred Weight
  IF PAR.Pricing_UOM_USR = 'LW';

  // WRK.TH CM Bse Mkt Carc /CWT = CON.*ZERO
  WRK.TH_CM_Bse_Mkt_Carc_CWT = *ZERO;

  //?TH CM Bse Mkt Carc /CWT w/ Quote Type.  12/16/98 PKP
  // IF PAR.Pricing UOM USR is Carcass Hundred Weight
  IF PAR.Pricing_UOM_USR = 'CW';

  // WRK.TH CM Bse Mkt Carc /CWT = PAR.TH CM Base Mkt Price
  WRK.TH_CM_Bse_Mkt_Carc_CWT = PAR.TH_CM_Base_Mkt_Price;

  ENDIF;

  // WRK.TH CM Srt Dsc Carc /CWT = CON.*ZERO
  WRK.TH_CM_Srt_Dsc_Carc_CWT = *ZERO;

  // WRK.TH CM Yld G/L Carc /CWT = CON.*ZERO
  WRK.TH_CM_Yld_G_L_Carc_CWT = *ZERO;

  // WRK.TH CM Crc Val Carc /CWT = CON.*ZERO
  WRK.TH_CM_Crc_Val_Carc_CWT = *ZERO;

  // WRK.TH CM Lean Prem Carc /CWT = CON.*ZERO
  WRK.TH_CM_Lean_Prem_Carc_CWT = *ZERO;

  // WRK.TH CM Gross Carc /CWT = CON.*ZERO
  WRK.TH_CM_Gross_Carc_CWT = *ZERO;

  ENDIF;

  ENDDO;

  //?Re Calculate Base Carc/Cwt Per Carl Calculation DIFF OF .01-
  DO;

  // WRK.TH CM Bse Mkt Carc /CWT = WRK.TH CM Crc Val Carc /CWT - WRK.TH CM Srt Dsc Ca
  WRK.TH_CM_Bse_Mkt_Carc_CWT = WRK.TH_CM_Crc_Val_Carc_CWT - WRK.TH_CM_Srt_Dsc_Carc_CWT;

  // WRK.TH CM Yld G/L Carc /CWT = CON.*ZERO
  WRK.TH_CM_Yld_G_L_Carc_CWT = *ZERO;

  ENDDO;

  EXECUTE FUNCTION(Crt Tattoo Sum QTEMP  CR) TYPE(CRTOBJ) FILE(PKA1CPP)           AB1217520;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.TH_Purchase_Date);
  PARAMETER(DB1.TH_Group_Reference);
  PARAMETER(DB1.TH_Live_Purchase_UOM);
  PARAMETER(DB1.TH_Live_Purchase_Price);
  PARAMETER(DB1.TH_Live_Gross_Amt);
  PARAMETER(DB1.TH_LIve_Net_Amt);
  PARAMETER(DB1.TH_Resale_UOM);
  PARAMETER(DB1.TH_Recalc_Live_Wgt_Yld);
  PARAMETER(DB1.TH_Pricing_Date);
  PARAMETER(DB1.TH_Resale_Spread_Sts);
  PARAMETER(DB1.TH_Dead_On_Arrival);
  PARAMETER(DB1.TH_Head_Received);
  PARAMETER(DB1.TH_Yard_Deads);
  PARAMETER(DB1.TH_Held_Over);
  PARAMETER(DB1.TH_Head_Condemned);
  PARAMETER(DB1.TH_Head_Killed);
  PARAMETER(DB1.TH_Head_Adds);
  PARAMETER(DB1.TH_Head_Accepted);
  PARAMETER(DB1.TH_Live_Wgt);
  PARAMETER(DB1.TH_Adj_Live_Wgt);
  PARAMETER(DB1.TH_Hot_Wgt);
  PARAMETER(DB1.TH_Tot_Loin_Eye_Depth);
  PARAMETER(DB1.TH_Tot_Backfat_Inches);
  PARAMETER(DB1.TH_Tot_Light_Reflectance);
  PARAMETER(DB1.TH_Avg_Live_Wgt);
  PARAMETER(DB1.TH_Avg_Hot_Wgt);
  PARAMETER(DB1.TH_Avg_Light_Reflectance);
  PARAMETER(DB1.TH_Avg_Lean_Percent);
  PARAMETER(DB1.TH_Avg_Loin_Eye_Depth);
  PARAMETER(DB1.TH_Avg_Backfat);
  PARAMETER(DB1.TH_Std_Yield_Percent);
  PARAMETER(DB1.TH_Actual_Yield);
  PARAMETER(DB1.TH_Adj_Actual_Yield);
  PARAMETER(DB1.TH_Yield_Difference);
  PARAMETER(DB1.TH_Recalc_Live_Wgt);
  PARAMETER(DB1.TH_CM_Market_Price);
  PARAMETER(PAR.TH_CM_Base_Mkt_Price);
  PARAMETER(WRK.TH_CM_Base_Mkt_Price_Amt);
  PARAMETER(WRK.TH_CM_Sort_Discount_Amt);
  PARAMETER(WRK.TH_CM_Yield_Gain_Loss_Amt);
  PARAMETER(WRK.TH_CM_Base_Carcass_Value);
  PARAMETER(WRK.TH_CM_LN_AddOn_Deduct_Amt);
  PARAMETER(WRK.TH_CM_Carcass_Gross_Amt);
  PARAMETER(DB1.TH_Deduction_Amt);
  PARAMETER(DB1.TH_Total_Net_WO_Adds);
  PARAMETER(DB1.TH_Carcass_Net_Amt);
  PARAMETER(DB1.TH_Additions_Amt);
  PARAMETER(DB1.TH_Payment_Gross);
  PARAMETER(DB1.Th_Payment_Net_Amt);
  PARAMETER(DB1.TH_AP_Voucher_Document#);
  PARAMETER(DB1.TH_Freight_Amount);
  PARAMETER(DB1.TH_Accrual_Amount);
  PARAMETER(DB1.TH_Fixed_Cost_Amount);
  PARAMETER(DB1.TH_Calc_Net_Sts);
  PARAMETER(DB1.TH_Payment_Sts);
  PARAMETER(DB1.TH_Header_Error_Sts);
  PARAMETER(DB1.TH_Detail_Error_Sts);
  PARAMETER(DB1.TH_Kill_Balancing_Sts);
  PARAMETER(DB1.TH_Bal_to_Kill_Gen);
  PARAMETER(DB1.TH_Commission_A_P_Voucher);
  PARAMETER(DB1.TH_Voucher_Payment_Date);
  PARAMETER(DB1.TH_User_Error_Override);
  PARAMETER(DB1.TH_Held_Over_Record);
  PARAMETER(DB1.TH_Sex);
  PARAMETER(DB1.TH_Held_Ovr_Completed_Dte);
  PARAMETER(DB1.TH_Commission_Paid_Date);
  PARAMETER(DB1.TH_Actual_Check_Date);
  PARAMETER(DB1.TH_Shipped_Weight);
  PARAMETER(DB1.TH_Avg_Hot_Wgt_EXC_ADD);
  PARAMETER(DB1.TH_FFLI);
  PARAMETER(DB1.TH_Kill_Product_Value);
  PARAMETER(DB1.TH_Cut_Product_Value);
  PARAMETER(DB1.TH_Render_Product_Value);
  PARAMETER(DB1.TH_Head_Excluded);
  PARAMETER(WRK.TH_CM_Bse_Mkt_Live_CWT);
  PARAMETER(WRK.TH_CM_Bse_Mkt_Carc_CWT);
  PARAMETER(WRK.TH_CM_Srt_Dsc_Live_CWT);
  PARAMETER(WRK.TH_CM_Srt_Dsc_Carc_CWT);
  PARAMETER(WRK.TH_CM_Yld_G_L_Live_CWT);
  PARAMETER(WRK.TH_CM_Yld_G_L_Carc_CWT);
  PARAMETER(WRK.TH_CM_Crc_Val_Live_CWT);
  PARAMETER(WRK.TH_CM_Crc_Val_Carc_CWT);
  PARAMETER(WRK.TH_CM_Lean_Prem_Live_CWT);
  PARAMETER(WRK.TH_CM_Lean_Prem_Carc_CWT);
  PARAMETER(WRK.TH_CM_Gross_Live_CWT);
  PARAMETER(WRK.TH_CM_Gross_Carc_CWT);
  PARAMETER(DB1.TH_Source_Type);
  PARAMETER(DB1.TH_Scale_Ticket_Sts);
  PARAMETER(DB1.TH_Payment_Type);
  PARAMETER(DB1.TH_HPS_Movement_Ref_#);
  PARAMETER(DB1.TH_Source_Code);
  PARAMETER(DB1.TH_Hog_Class_Type);
  PARAMETER(DB1.TH_Posted_to_HPS_Flag);
  PARAMETER(DB1.TH_Schedule_Kill_Shift);
  PARAMETER(DB1.TH_Shift_Held_Over);
  PARAMETER(DB1.TH_State);
  PARAMETER(DB1.TH_Unused_Code);
  PARAMETER(DB1.TH_Unused_Sts_2_Pos);
  PARAMETER(DB1.TH_Commission_Status);
  PARAMETER(DB1.TH_Paid_2_Week_Avg_Y_N);
  PARAMETER(DB1.TH_Unused_Sts_1_Pos_3);
  PARAMETER(DB1.TH_DOA_Weight);
  PARAMETER(DB1.TH_Avg_Lean_EXC_ADD);
  PARAMETER(DB1.TH_HPS_Farm_Site);
  PARAMETER(DB1.TH_Shift_Held_Over_Head);
  PARAMETER(DB1.TH_Sorting_Amount);
  PARAMETER(DB1.TH_Head_Identified);
  PARAMETER(DB1.TH_Percent_Identified);
  PARAMETER(DB1.TH_Percent_Accepted);
  PARAMETER(DB1.TH_Head_Adjusted_LN);
  PARAMETER(DB1.TH_PHA_Head_Adds);
  PARAMETER(DB1.TH_PHA_Add_Type);
  PARAMETER(DB1.TH_PHA_Average_Type);
  PARAMETER(DB1.TH_PHA_Add_Reason);
  PARAMETER(DB1.TH_PHA_Yield_Percent);
  PARAMETER(DB1.TH_PHA_Lean_Prm_Crc_CWT);
  PARAMETER(DB1.TH_VC_Gross_Value_HD);
  PARAMETER(DB1.TH_Excluded_Gross_Value);
  PARAMETER(DB1.TH_Avg_Lean);
  PARAMETER(DB1.TH_Broken_Back_Hd_Count);
  PARAMETER(DB1.TH_Hot_Scl_Upload_Time);
  PARAMETER(DB1.TH_Unused_Nbr_4);
  PARAMETER(DB1.TH_Excluded_Carc_Val);
  PARAMETER(DB1.TH_Excluded_Premium);
  PARAMETER(DB1.TH_Unused_Nbr_7);
  PARAMETER(DB1.TH_Unused_Nbr_8);
  PARAMETER(DB1.TH_Unused_Nbr_9);
  PARAMETER(DB1.TH_Unused_Nbr_10);
  PARAMETER(DB1.TH_Break_Even_Price_CWT);
  PARAMETER(DB1.TH_Meat_Value_Factor_Amt);
  PARAMETER(DB1.TH_Yld_Parm_Adj_Yield);
  PARAMETER(DB1.TH_PHA_Sort_Disc_Fctr);
  PARAMETER(DB1.TH_Avg_Loin_Eye_2_dec);
  PARAMETER(DB1.TH_Avg_Backfat_2_Dec);
  PARAMETER(DB1.TH_HITCH_Old_Pay_Net_Amt);
  PARAMETER(DB1.TH_MPR_Sort_Loss);
  PARAMETER(DB1.TH_Unused_Nbr_19);
  PARAMETER(DB1.TH_Unused_Nbr_20);
  PARAMETER(DB1.TH_Cold_Scl_Upload_Date);
  PARAMETER(DB1.TH_Cold_Scl_Upload_Time);
  PARAMETER(DB1.TH_Head_LFT);
  PARAMETER(DB1.TH_Head_EUT_KOA);
  PARAMETER(DB1.TH_Unused_Date_5);
  PARAMETER(DB1.TH_Unused_Sts_1);
  PARAMETER(DB1.TH_Unused_Sts_2);
  PARAMETER(DB1.TH_Unused_Sts_3);
  PARAMETER(DB1.TH_Unused_Sts_4);
  PARAMETER(DB1.TH_Unused_Sts_5);
  PARAMETER(DB1.TH_Unused_Sts_6);
  PARAMETER(DB1.TH_Unused_Sts_7);
  PARAMETER(DB1.TH_Unused_Sts_8);
  PARAMETER(DB1.DF_Defect_Code);
  PARAMETER(DB1.THP_Process_Code);
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(DB1.PL_Location_Code);
  PARAMETER(DB1.HB_Buyer_Code);
  PARAMETER(DB1.GN_Genetic_Code);
  PARAMETER(DB1.HC_Class_Code);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

 }

 // PAR.PCS From Kill Date = PAR.PCS From Kill Date + CON.1 *DAYS
 PAR.PCS_From_Kill_Date = DATEINCR(PAR.PCS_From_Kill_Date 1 'DY' 1111111 'NONE' 'N' 1);

 // PAR.PCS To Kill Date = PAR.PCS From Kill Date
 PAR.PCS_To_Kill_Date = PAR.PCS_From_Kill_Date;

 ENDDO;

}


