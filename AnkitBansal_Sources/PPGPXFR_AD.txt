// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPGPXFR
// ?Date: 14.08.2025 Time: 03:40:24
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Compare prior fields if chg occurs then perform the Plant Floor
EXECUTE FUNCTION(Cmp Co Item/Co Item    IF) TYPE(EXCINTFUN)                     AC1703290;
PARAMETER(PR1.Description_Line_One);
PARAMETER(PR1.Description_Line_Two);
PARAMETER(PR1.Item_Label_Line_1);
PARAMETER(PR1.Item_Label_Line_2);
PARAMETER(PR1.Item_Label_Line_3);
PARAMETER(PR1.Item_Label_Line_4);
PARAMETER(PR1.UOM_Primary);
PARAMETER(PR1.Conversion_Factor_1);
PARAMETER(PR1.Operation_Factor_1);
PARAMETER(PR1.UOM_Second);
PARAMETER(PR1.Conversion_Factor_2);
PARAMETER(PR1.Operation_Factor_2);
PARAMETER(PR1.UOM_Third);
PARAMETER(PR1.UOM_Pricing);
PARAMETER(PR1.Unit_Weight);
PARAMETER(PR1.Quality_Level);
PARAMETER(PR1.Item_Level);
PARAMETER(PR1.Production_Date_Control);
PARAMETER(PR1.Catch_Weight_Status);
PARAMETER(PR1.Minimum_Weight_Per_Case);
PARAMETER(PR1.Maximum_Weight_Per_Case);
PARAMETER(PR1.Number_Cases_On_A_Pallet);
PARAMETER(PR1.Vendor_Item_Default);
PARAMETER(PR1.Item_Structure_Class_Code);
PARAMETER(PR1.Item_Structure_Group_Code);
PARAMETER(PR1.Item_Structure_Type_Code);
PARAMETER(PR1.Default_Commod_Mark_basis);
PARAMETER(PR1.Transportation_Temp);
PARAMETER(PR1.Item_Type_Code);
PARAMETER(PR1.Package_Type_Code);
PARAMETER(PR1.Maximum_Audit_Value);
PARAMETER(PR1.Minimum_Audit_Value);
PARAMETER(PR1.Market_Overage);
PARAMETER(PR1.Standard_Overage_Underage);
PARAMETER(PR1.Commodity_Price_Group);
PARAMETER(PR1.Item_Pricing_Operation);
PARAMETER(PR1.Item_Pricing_Constant);
PARAMETER(PR1.Default_Warehouse);
PARAMETER(PR1.Price_Method_Default);
PARAMETER(PR1.Fresh_Chilling_Time);
PARAMETER(PR1.Base_Conv_Loss_Item);
PARAMETER(PR1.Variety_Rendered_Cut);
PARAMETER(PR1.Frozen_Make_to_Order_Sts);
PARAMETER(PR1.Credit_Item_Status);
PARAMETER(PR1.Std_Weight_Head_Var_Ren);
PARAMETER(PR1.Pieces_Per_Head);
PARAMETER(PR1.Department_Code);
PARAMETER(PR1.Group_for_Packaging);
PARAMETER(PR1.Item_Category_Number_1);
PARAMETER(PR1.Made_to_Order_Code);
PARAMETER(PR1.Item_Category_Number_2);
PARAMETER(PR1.Transportation_Equip_Type);
PARAMETER(PR1.Item_Category_Number_3);
PARAMETER(PR1.Item_Category_Code_3);
PARAMETER(PR1.Item_Category_Number_4);
PARAMETER(PR1.GL_Sub_Code);
PARAMETER(PR1.Pallet_Tare_Weight);
PARAMETER(PR1.Misc_Tare_Weight);
PARAMETER(PR1.Production_Lead_Days);
PARAMETER(PR1.Packaging_Code);
PARAMETER(PR1.Item_Market_Code);
PARAMETER(PR1.Use_Freeze_Sell_By_Days);
PARAMETER(PR1.Partial_Item_Code);
PARAMETER(PR1.WIP_Item_Code);
PARAMETER(PR1.WIP_Reject_Code);
PARAMETER(PR1.PM_Line_Number);
PARAMETER(PR1.Seconds_Item);
PARAMETER(PR1.Print_on_Realization_Rpt);
PARAMETER(PR1.Unit_Weight_Change_Sts);
PARAMETER(PR1.Piece_Count_Item);
PARAMETER(PR1.Pieces_Per_Bag);
PARAMETER(PR1.Bags_Per_Unit);
PARAMETER(PR1.Export_Domestic);
PARAMETER(PR1.Print_On_Schedule);
PARAMETER(PR1.Fresh_Inv_Allocation_Seq);
PARAMETER(PR1.Fresh_Sched_As_Ordered);
PARAMETER(PR1.Frozen_Inv_Allocation_Seq);
PARAMETER(PR1.Primal_Group_Code);
PARAMETER(PR1.Item_Target_Price);
PARAMETER(PR1.Minimum_Piece_Weight);
PARAMETER(PR1.Maximum_Piece_Weight);
PARAMETER(PR1.Seaboard_Equivalent_Item);
PARAMETER(PR1.Production_Qty_Per_Shift);
PARAMETER(PR1.Scheduling_Position_Grade);
PARAMETER(PR1.Sold_100_Percent_Frozen);
PARAMETER(PR1.Maximum_Shifts);
PARAMETER(PR1.Value_Added_Sts);
PARAMETER(PR1.Label_Type);
PARAMETER(PR1.Default_Workcenter);
PARAMETER(PR1.Record_Status);
PARAMETER(PR2.Description_Line_One);
PARAMETER(PR2.Description_Line_Two);
PARAMETER(PR2.Item_Label_Line_1);
PARAMETER(PR2.Item_Label_Line_2);
PARAMETER(PR2.Item_Label_Line_3);
PARAMETER(PR2.Item_Label_Line_4);
PARAMETER(PR2.UOM_Primary);
PARAMETER(PR2.Conversion_Factor_1);
PARAMETER(PR2.Operation_Factor_1);
PARAMETER(PR2.UOM_Second);
PARAMETER(PR2.Conversion_Factor_2);
PARAMETER(PR2.Operation_Factor_2);
PARAMETER(PR2.UOM_Third);
PARAMETER(PR2.UOM_Pricing);
PARAMETER(PR2.Unit_Weight);
PARAMETER(PR2.Quality_Level);
PARAMETER(PR2.Item_Level);
PARAMETER(PR2.Production_Date_Control);
PARAMETER(PR2.Catch_Weight_Status);
PARAMETER(PR2.Minimum_Weight_Per_Case);
PARAMETER(PR2.Maximum_Weight_Per_Case);
PARAMETER(PR2.Number_Cases_On_A_Pallet);
PARAMETER(PR2.Vendor_Item_Default);
PARAMETER(PR2.Item_Structure_Class_Code);
PARAMETER(PR2.Item_Structure_Group_Code);
PARAMETER(PR2.Item_Structure_Type_Code);
PARAMETER(PR2.Default_Commod_Mark_basis);
PARAMETER(PR2.Transportation_Temp);
PARAMETER(PR2.Item_Type_Code);
PARAMETER(PR2.Package_Type_Code);
PARAMETER(PR2.Maximum_Audit_Value);
PARAMETER(PR2.Minimum_Audit_Value);
PARAMETER(PR2.Market_Overage);
PARAMETER(PR2.Standard_Overage_Underage);
PARAMETER(PR2.Commodity_Price_Group);
PARAMETER(PR2.Item_Pricing_Operation);
PARAMETER(PR2.Item_Pricing_Constant);
PARAMETER(PR2.Default_Warehouse);
PARAMETER(PR2.Price_Method_Default);
PARAMETER(PR2.Fresh_Chilling_Time);
PARAMETER(PR2.Base_Conv_Loss_Item);
PARAMETER(PR2.Variety_Rendered_Cut);
PARAMETER(PR2.Frozen_Make_to_Order_Sts);
PARAMETER(PR2.Credit_Item_Status);
PARAMETER(PR2.Std_Weight_Head_Var_Ren);
PARAMETER(PR2.Pieces_Per_Head);
PARAMETER(PR2.Department_Code);
PARAMETER(PR2.Group_for_Packaging);
PARAMETER(PR2.Item_Category_Number_1);
PARAMETER(PR2.Made_to_Order_Code);
PARAMETER(PR2.Item_Category_Number_2);
PARAMETER(PR2.Transportation_Equip_Type);
PARAMETER(PR2.Item_Category_Number_3);
PARAMETER(PR2.Item_Category_Code_3);
PARAMETER(PR2.Item_Category_Number_4);
PARAMETER(PR2.GL_Sub_Code);
PARAMETER(PR2.Pallet_Tare_Weight);
PARAMETER(PR2.Misc_Tare_Weight);
PARAMETER(PR2.Production_Lead_Days);
PARAMETER(PR2.Packaging_Code);
PARAMETER(PR2.Item_Market_Code);
PARAMETER(PR2.Use_Freeze_Sell_By_Days);
PARAMETER(PR2.Partial_Item_Code);
PARAMETER(PR2.WIP_Item_Code);
PARAMETER(PR2.WIP_Reject_Code);
PARAMETER(PR2.PM_Line_Number);
PARAMETER(PR2.Seconds_Item);
PARAMETER(PR2.Print_on_Realization_Rpt);
PARAMETER(PR2.Unit_Weight_Change_Sts);
PARAMETER(PR2.Piece_Count_Item);
PARAMETER(PR2.Pieces_Per_Bag);
PARAMETER(PR2.Bags_Per_Unit);
PARAMETER(PR2.Export_Domestic);
PARAMETER(PR2.Print_On_Schedule);
PARAMETER(PR2.Fresh_Inv_Allocation_Seq);
PARAMETER(PR2.Fresh_Sched_As_Ordered);
PARAMETER(PR2.Frozen_Inv_Allocation_Seq);
PARAMETER(PR2.Primal_Group_Code);
PARAMETER(PR2.Item_Target_Price);
PARAMETER(PR2.Minimum_Piece_Weight);
PARAMETER(PR2.Maximum_Piece_Weight);
PARAMETER(PR2.Seaboard_Equivalent_Item);
PARAMETER(PR2.Production_Qty_Per_Shift);
PARAMETER(PR2.Scheduling_Position_Grade);
PARAMETER(PR2.Sold_100_Percent_Frozen);
PARAMETER(PR2.Maximum_Shifts);
PARAMETER(PR2.Value_Added_Sts);
PARAMETER(PR2.Label_Type);
PARAMETER(PR2.Default_Workcenter);
PARAMETER(PR2.Record_Status);
PARAMETER(LCL.Change_Flag_USR);
PARAMETER(LCL.Number_50_USR);
PARAMETER('PLF');
PARAMETER(PR3.Box_iD);
PARAMETER(PR4.Box_iD);
PARAMETER(LCL.USR_Formula_Meth_Type_Sts);
PARAMETER(LCL.USR_Market_Meth_Type_Sts);
PARAMETER(LCL.USR_Manual_Meth_Type_Sts);
PARAMETER(LCL.USR_Extend_Meth_Type_Sts);
{
 //?Execute internal function

 // PR3.Change Flag USR = CND.Blank
 PR3.Change_Flag_USR = *BLANK;

 // PR4.Number 5,0            USR = CON.*ZERO
 PR4.Number_50_USR = 00000;

 // PR8.USR Formula Meth Type Sts = CND.no
 PR8.USR_Formula_Meth_Type_Sts = 'N';

 // PR8.USR Market Meth Type Sts = CND.no
 PR8.USR_Market_Meth_Type_Sts = 'N';

 // PR8.USR Manual Meth Type Sts = CND.no
 PR8.USR_Manual_Meth_Type_Sts = 'N';

 // PR8.USR Extend Meth Type Sts = CND.no
 PR8.USR_Extend_Meth_Type_Sts = 'N';

 //?Verify plant floor fields only
 CASE;

 // IF PR5.Cmp Co/Item Fields Usr is Plant Floor
 IF PR5.Cmp_Co_Item_Fields_Usr = 'PLF';

 //?  1. Description Line One
 CASE;

 // IF PR1.Description Line One NE PR2.Description Line One
 IF PR1.Description_Line_One <> PR2.Description_Line_One;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00001
 PR4.Number_50_USR = 00001;

 QUIT;

 ENDIF;

 //?  2. Description Line Two
 CASE;

 // IF PR1.Description Line Two NE PR2.Description Line Two
 IF PR1.Description_Line_Two <> PR2.Description_Line_Two;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00002
 PR4.Number_50_USR = 00002;

 QUIT;

 ENDIF;

 //?  3. Item Label Line 1
 CASE;

 // IF PR1.Item Label Line 1 NE PR2.Item Label Line 1
 IF PR1.Item_Label_Line_1 <> PR2.Item_Label_Line_1;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00003
 PR4.Number_50_USR = 00003;

 QUIT;

 ENDIF;

 //?  4. Item Label Line 2
 CASE;

 // IF PR1.Item Label Line 2 NE PR2.Item Label Line 2
 IF PR1.Item_Label_Line_2 <> PR2.Item_Label_Line_2;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00004
 PR4.Number_50_USR = 00004;

 QUIT;

 ENDIF;

 //?  5. Item Label Line 3
 CASE;

 // IF PR1.Item Label Line 3 NE PR2.Item Label Line 3
 IF PR1.Item_Label_Line_3 <> PR2.Item_Label_Line_3;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00005
 PR4.Number_50_USR = 00005;

 QUIT;

 ENDIF;

 //?  7. U/M - Primary
 CASE;

 // IF PR1.U/M - Primary NE PR2.U/M - Primary
 IF PR1.UOM_Primary <> PR2.UOM_Primary;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00007
 PR4.Number_50_USR = 00007;

 QUIT;

 ENDIF;

 //? 15. Unit Weight
 CASE;

 // IF PR1.Unit Weight NE PR2.Unit Weight
 IF PR1.Unit_Weight <> PR2.Unit_Weight;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00015
 PR4.Number_50_USR = 00015;

 QUIT;

 ENDIF;

 //? 19. Catch Weight Status
 CASE;

 // IF PR1.Catch Weight Status NE PR2.Catch Weight Status
 IF PR1.Catch_Weight_Status <> PR2.Catch_Weight_Status;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00019
 PR4.Number_50_USR = 00019;

 QUIT;

 ENDIF;

 //? 20. Minimum Weight Per Case
 CASE;

 // IF PR1.Minimum Weight Per Case NE PR2.Minimum Weight Per Case
 IF PR1.Minimum_Weight_Per_Case <> PR2.Minimum_Weight_Per_Case;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00020
 PR4.Number_50_USR = 00020;

 QUIT;

 ENDIF;

 //? 21. Maximum Weight Per Case
 CASE;

 // IF PR1.Maximum Weight Per Case NE PR2.Maximum Weight Per Case
 IF PR1.Maximum_Weight_Per_Case <> PR2.Maximum_Weight_Per_Case;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00021
 PR4.Number_50_USR = 00021;

 QUIT;

 ENDIF;

 //? 22. Number Cases On A Pallet
 CASE;

 // IF PR1.Number Cases On A Pallet NE PR2.Number Cases On A Pallet
 IF PR1.Number_Cases_On_A_Pallet <> PR2.Number_Cases_On_A_Pallet;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00022
 PR4.Number_50_USR = 00022;

 QUIT;

 ENDIF;

 //? 24. Item Structure Class Code
 CASE;

 // IF PR1.Item Structure Class Code NE PR2.Item Structure Class Code
 IF PR1.Item_Structure_Class_Code <> PR2.Item_Structure_Class_Code;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00024
 PR4.Number_50_USR = 00024;

 QUIT;

 ENDIF;

 //? 25. Item Structure Group Code
 CASE;

 // IF PR1.Item Structure Group Code NE PR2.Item Structure Group Code
 IF PR1.Item_Structure_Group_Code <> PR2.Item_Structure_Group_Code;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00025
 PR4.Number_50_USR = 00025;

 QUIT;

 ENDIF;

 //? 26. Item Structure Type Code
 CASE;

 // IF PR1.Item Structure Type Code NE PR2.Item Structure Type Code
 IF PR1.Item_Structure_Type_Code <> PR2.Item_Structure_Type_Code;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00026
 PR4.Number_50_USR = 00026;

 QUIT;

 ENDIF;

 //? 31. Fresh Chilling Time
 CASE;

 // IF PR1.Fresh Chilling Time NE PR2.Fresh Chilling Time
 IF PR1.Fresh_Chilling_Time <> PR2.Fresh_Chilling_Time;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00031
 PR4.Number_50_USR = 00031;

 QUIT;

 ENDIF;

 //? 40. Misc Tare Weight
 CASE;

 // IF PR1.Misc Tare Weight NE PR2.Misc Tare Weight
 IF PR1.Misc_Tare_Weight <> PR2.Misc_Tare_Weight;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00040
 PR4.Number_50_USR = 00040;

 QUIT;

 ENDIF;

 //? 52. Number Cases On A Pallet
 CASE;

 // IF PR1.Number Cases On A Pallet NE PR2.Number Cases On A Pallet
 IF PR1.Number_Cases_On_A_Pallet <> PR2.Number_Cases_On_A_Pallet;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00052
 PR4.Number_50_USR = 00052;

 QUIT;

 ENDIF;

 //? 57. Default Warehouse
 CASE;

 // IF PR1.Default Warehouse NE PR2.Default Warehouse
 IF PR1.Default_Warehouse <> PR2.Default_Warehouse;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00057
 PR4.Number_50_USR = 00057;

 QUIT;

 ENDIF;

 //? 81. Piece Count Item
 CASE;

 // IF PR1.Piece Count Item NE PR2.Piece Count Item
 IF PR1.Piece_Count_Item <> PR2.Piece_Count_Item;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00081
 PR4.Number_50_USR = 00081;

 QUIT;

 ENDIF;

 //? 82. Pieces Per Bag
 CASE;

 // IF PR1.Pieces Per Bag NE PR2.Pieces Per Bag
 IF PR1.Pieces_Per_Bag <> PR2.Pieces_Per_Bag;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00082
 PR4.Number_50_USR = 00082;

 QUIT;

 ENDIF;

 //? 83. Bags Per Unit
 CASE;

 // IF PR1.Bags Per Unit NE PR2.Bags Per Unit
 IF PR1.Bags_Per_Unit <> PR2.Bags_Per_Unit;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00083
 PR4.Number_50_USR = 00083;

 QUIT;

 ENDIF;

 //? 95. Sold 100% Frozen
 CASE;

 // IF PR1.Sold 100% Frozen NE PR2.Sold 100% Frozen
 IF PR1.Sold_100_Percent_Frozen <> PR2.Sold_100_Percent_Frozen;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00095
 PR4.Number_50_USR = 00095;

 QUIT;

 ENDIF;

 //? 99. Record Status
 CASE;

 // IF PR1.Record Status NE PR2.Record Status
 IF PR1.Record_Status <> PR2.Record_Status;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00099
 PR4.Number_50_USR = 00099;

 QUIT;

 ENDIF;

 //?100. Box Id from the Bill of Material
 CASE;

 // IF PR6.Box iD NE PR7.Box iD
 IF PR6.Box_iD <> PR7.Box_iD;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00100
 PR4.Number_50_USR = 00100;

 QUIT;

 ENDIF;

 //?101. Label Type
 CASE;

 // IF PR1.Label Type NE PR2.Label Type
 IF PR1.Label_Type <> PR2.Label_Type;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00101
 PR4.Number_50_USR = 00101;

 QUIT;

 ENDIF;

 //?102. Default Workcenter
 CASE;

 // IF PR1.Default Workcenter NE PR2.Default Workcenter
 IF PR1.Default_Workcenter <> PR2.Default_Workcenter;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00102
 PR4.Number_50_USR = 00102;

 QUIT;

 ENDIF;

 //?103. Use/Sell/Freeze By Days
 CASE;

 // IF PR1.Use/Freeze/Sell By Days NE PR2.Use/Freeze/Sell By Days
 IF PR1.Use_Freeze_Sell_By_Days <> PR2.Use_Freeze_Sell_By_Days;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00103
 PR4.Number_50_USR = 00103;

 QUIT;

 ENDIF;

 ENDIF;

 //?Verify Item Structure fields only
 CASE;

 // IF PR5.Cmp Co/Item Fields Usr is Item Structure Flds
 IF PR5.Cmp_Co_Item_Fields_Usr = 'IST';

 //? 24. Item Structure Class Code
 CASE;

 // IF PR1.Item Structure Class Code NE PR2.Item Structure Class Code
 IF PR1.Item_Structure_Class_Code <> PR2.Item_Structure_Class_Code;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00024
 PR4.Number_50_USR = 00024;

 QUIT;

 ENDIF;

 ENDIF;

 //?Verify Price Audit fields
 CASE;

 // IF PR5.Cmp Co/Item Fields Usr is Price Audit Update
 IF PR5.Cmp_Co_Item_Fields_Usr = 'PAU';

 //? 99. Record Status
 CASE;

 // IF PR1.Record Status NE PR2.Record Status
 IF PR1.Record_Status <> PR2.Record_Status;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00099
 PR4.Number_50_USR = 00099;

 // PR8.USR Formula Meth Type Sts = CND.yes
 PR8.USR_Formula_Meth_Type_Sts = 'Y';

 // PR8.USR Market Meth Type Sts = CND.yes
 PR8.USR_Market_Meth_Type_Sts = 'Y';

 // PR8.USR Manual Meth Type Sts = CND.yes
 PR8.USR_Manual_Meth_Type_Sts = 'Y';

 // PR8.USR Extend Meth Type Sts = CND.yes
 PR8.USR_Extend_Meth_Type_Sts = 'Y';

 QUIT;

 ENDIF;

 //? 14. U/M - Pricing
 CASE;

 // IF PR1.U/M - Pricing NE PR2.U/M - Pricing
 IF PR1.UOM_Pricing <> PR2.UOM_Pricing;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00014
 PR4.Number_50_USR = 00014;

 // PR8.USR Formula Meth Type Sts = CND.yes
 PR8.USR_Formula_Meth_Type_Sts = 'Y';

 // PR8.USR Market Meth Type Sts = CND.yes
 PR8.USR_Market_Meth_Type_Sts = 'Y';

 // PR8.USR Manual Meth Type Sts = CND.yes
 PR8.USR_Manual_Meth_Type_Sts = 'Y';

 QUIT;

 ENDIF;

 //? 38. Commodity Price Group
 CASE;

 // IF PR1.Commodity Price Group NE PR2.Commodity Price Group
 IF PR1.Commodity_Price_Group <> PR2.Commodity_Price_Group;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00038
 PR4.Number_50_USR = 00038;

 // PR8.USR Formula Meth Type Sts = CND.yes
 PR8.USR_Formula_Meth_Type_Sts = 'Y';

 // PR8.USR Market Meth Type Sts = CND.yes
 PR8.USR_Market_Meth_Type_Sts = 'Y';

 QUIT;

 ENDIF;

 //? 53. Market Overage
 CASE;

 // IF PR1.Market Overage NE PR2.Market Overage
 IF PR1.Market_Overage <> PR2.Market_Overage;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00053
 PR4.Number_50_USR = 00053;

 // PR8.USR Market Meth Type Sts = CND.yes
 PR8.USR_Market_Meth_Type_Sts = 'Y';

 QUIT;

 ENDIF;

 //? 27. Default Commod Mark basis
 CASE;

 // IF PR1.Default Commod Mark basis NE PR2.Default Commod Mark basis
 IF PR1.Default_Commod_Mark_basis <> PR2.Default_Commod_Mark_basis;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00027
 PR4.Number_50_USR = 00027;

 // PR8.USR Formula Meth Type Sts = CND.yes
 PR8.USR_Formula_Meth_Type_Sts = 'Y';

 QUIT;

 ENDIF;

 //? 55. Item Pricing Operation
 CASE;

 // IF PR1.Item Pricing Operation NE PR2.Item Pricing Operation
 IF PR1.Item_Pricing_Operation <> PR2.Item_Pricing_Operation;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00055
 PR4.Number_50_USR = 00055;

 // PR8.USR Formula Meth Type Sts = CND.yes
 PR8.USR_Formula_Meth_Type_Sts = 'Y';

 QUIT;

 ENDIF;

 //? 56. Item Pricing Constant
 CASE;

 // IF PR1.Item Pricing Constant NE PR2.Item Pricing Constant
 IF PR1.Item_Pricing_Constant <> PR2.Item_Pricing_Constant;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00056
 PR4.Number_50_USR = 00056;

 // PR8.USR Formula Meth Type Sts = CND.yes
 PR8.USR_Formula_Meth_Type_Sts = 'Y';

 QUIT;

 ENDIF;

 //? 54. Standard Overage/Underage
 CASE;

 // IF PR1.Standard Overage/Underage NE PR2.Standard Overage/Underage
 IF PR1.Standard_Overage_Underage <> PR2.Standard_Overage_Underage;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00054
 PR4.Number_50_USR = 00054;

 // PR8.USR Formula Meth Type Sts = CND.yes
 PR8.USR_Formula_Meth_Type_Sts = 'Y';

 QUIT;

 ENDIF;

 //?100. Box Id from the Bill of Material
 CASE;

 // IF PR6.Box iD NE PR7.Box iD
 IF PR6.Box_iD <> PR7.Box_iD;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00100
 PR4.Number_50_USR = 00100;

 QUIT;

 ENDIF;

 ENDIF;

 //?Verify if BOX ID is changing
 CASE;

 // IF PR5.Cmp Co/Item Fields Usr is BoxId - BOM
 IF PR5.Cmp_Co_Item_Fields_Usr = 'BOX';

 //?100. Box Id from the Bill of Material
 CASE;

 // IF PR6.Box iD NE PR7.Box iD
 IF PR6.Box_iD <> PR7.Box_iD;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00100
 PR4.Number_50_USR = 00100;

 QUIT;

 ENDIF;

 ENDIF;

}


//?PKD:  Call change program no matter what
//?If Item status is not Active then send Accusort Delete Code
CASE;

// IF PR1.Record Status is Active
IF PR1.Record_Status = 'A';

// LCL.AS Add/Change/Delete = CND.Add
LCL.AS_Add_Change_Delete = 'A';

//?If Item status is not Active then send Accusort Delete Code
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.AS Add/Change/Delete = CND.Delete
LCL.AS_Add_Change_Delete = 'D';

ENDIF;

// Call program PFS One Prod/Box Rec  XF.
CALL PROGRAM(PFS One Prod/Box Rec  XF) ('PDK1XFR');
PARAMETER(PR1.Company_Number);
PARAMETER(PR1.Item_Code);
PARAMETER(PR1.Description_Line_One);
PARAMETER(PR1.Item_Label_Line_1);
PARAMETER(PR1.Item_Label_Line_2);
PARAMETER(PR1.Item_Label_Line_3);
PARAMETER(PR1.Unit_Weight);
PARAMETER(PR1.Catch_Weight_Status);
PARAMETER(PR1.Minimum_Weight_Per_Case);
PARAMETER(PR1.Maximum_Weight_Per_Case);
PARAMETER(PR1.Number_Cases_On_A_Pallet);
PARAMETER(PR1.Item_Type_Code);
PARAMETER(PR1.Package_Type_Code);
PARAMETER(PR1.Default_Warehouse);
PARAMETER(PR1.Fresh_Chilling_Time);
PARAMETER(PR1.Misc_Tare_Weight);
PARAMETER(LCL.AS_Add_Change_Delete);

//?Compare prior fields if chg occurs then perform the item str
EXECUTE FUNCTION(Cmp Co Item/Co Item    IF) TYPE(EXCINTFUN)                     AC1703290;
PARAMETER(PR1.Description_Line_One);
PARAMETER(PR1.Description_Line_Two);
PARAMETER(PR1.Item_Label_Line_1);
PARAMETER(PR1.Item_Label_Line_2);
PARAMETER(PR1.Item_Label_Line_3);
PARAMETER(PR1.Item_Label_Line_4);
PARAMETER(PR1.UOM_Primary);
PARAMETER(PR1.Conversion_Factor_1);
PARAMETER(PR1.Operation_Factor_1);
PARAMETER(PR1.UOM_Second);
PARAMETER(PR1.Conversion_Factor_2);
PARAMETER(PR1.Operation_Factor_2);
PARAMETER(PR1.UOM_Third);
PARAMETER(PR1.UOM_Pricing);
PARAMETER(PR1.Unit_Weight);
PARAMETER(PR1.Quality_Level);
PARAMETER(PR1.Item_Level);
PARAMETER(PR1.Production_Date_Control);
PARAMETER(PR1.Catch_Weight_Status);
PARAMETER(PR1.Minimum_Weight_Per_Case);
PARAMETER(PR1.Maximum_Weight_Per_Case);
PARAMETER(PR1.Number_Cases_On_A_Pallet);
PARAMETER(PR1.Vendor_Item_Default);
PARAMETER(PR1.Item_Structure_Class_Code);
PARAMETER(PR1.Item_Structure_Group_Code);
PARAMETER(PR1.Item_Structure_Type_Code);
PARAMETER(PR1.Default_Commod_Mark_basis);
PARAMETER(PR1.Transportation_Temp);
PARAMETER(PR1.Item_Type_Code);
PARAMETER(PR1.Package_Type_Code);
PARAMETER(PR1.Maximum_Audit_Value);
PARAMETER(PR1.Minimum_Audit_Value);
PARAMETER(PR1.Market_Overage);
PARAMETER(PR1.Standard_Overage_Underage);
PARAMETER(PR1.Commodity_Price_Group);
PARAMETER(PR1.Item_Pricing_Operation);
PARAMETER(PR1.Item_Pricing_Constant);
PARAMETER(PR1.Default_Warehouse);
PARAMETER(PR1.Price_Method_Default);
PARAMETER(PR1.Fresh_Chilling_Time);
PARAMETER(PR1.Base_Conv_Loss_Item);
PARAMETER(PR1.Variety_Rendered_Cut);
PARAMETER(PR1.Frozen_Make_to_Order_Sts);
PARAMETER(PR1.Credit_Item_Status);
PARAMETER(PR1.Std_Weight_Head_Var_Ren);
PARAMETER(PR1.Pieces_Per_Head);
PARAMETER(PR1.Department_Code);
PARAMETER(PR1.Group_for_Packaging);
PARAMETER(PR1.Item_Category_Number_1);
PARAMETER(PR1.Made_to_Order_Code);
PARAMETER(PR1.Item_Category_Number_2);
PARAMETER(PR1.Transportation_Equip_Type);
PARAMETER(PR1.Item_Category_Number_3);
PARAMETER(PR1.Item_Category_Code_3);
PARAMETER(PR1.Item_Category_Number_4);
PARAMETER(PR1.GL_Sub_Code);
PARAMETER(PR1.Pallet_Tare_Weight);
PARAMETER(PR1.Misc_Tare_Weight);
PARAMETER(PR1.Production_Lead_Days);
PARAMETER(PR1.Packaging_Code);
PARAMETER(PR1.Item_Market_Code);
PARAMETER(PR1.Use_Freeze_Sell_By_Days);
PARAMETER(PR1.Partial_Item_Code);
PARAMETER(PR1.WIP_Item_Code);
PARAMETER(PR1.WIP_Reject_Code);
PARAMETER(PR1.PM_Line_Number);
PARAMETER(PR1.Seconds_Item);
PARAMETER(PR1.Print_on_Realization_Rpt);
PARAMETER(PR1.Unit_Weight_Change_Sts);
PARAMETER(PR1.Piece_Count_Item);
PARAMETER(PR1.Pieces_Per_Bag);
PARAMETER(PR1.Bags_Per_Unit);
PARAMETER(PR1.Export_Domestic);
PARAMETER(PR1.Print_On_Schedule);
PARAMETER(PR1.Fresh_Inv_Allocation_Seq);
PARAMETER(PR1.Fresh_Sched_As_Ordered);
PARAMETER(PR1.Frozen_Inv_Allocation_Seq);
PARAMETER(PR1.Primal_Group_Code);
PARAMETER(PR1.Item_Target_Price);
PARAMETER(PR1.Minimum_Piece_Weight);
PARAMETER(PR1.Maximum_Piece_Weight);
PARAMETER(PR1.Seaboard_Equivalent_Item);
PARAMETER(PR1.Production_Qty_Per_Shift);
PARAMETER(PR1.Scheduling_Position_Grade);
PARAMETER(PR1.Sold_100_Percent_Frozen);
PARAMETER(PR1.Maximum_Shifts);
PARAMETER(PR1.Value_Added_Sts);
PARAMETER(PR1.Label_Type);
PARAMETER(PR1.Default_Workcenter);
PARAMETER(PR1.Record_Status);
PARAMETER(PR2.Description_Line_One);
PARAMETER(PR2.Description_Line_Two);
PARAMETER(PR2.Item_Label_Line_1);
PARAMETER(PR2.Item_Label_Line_2);
PARAMETER(PR2.Item_Label_Line_3);
PARAMETER(PR2.Item_Label_Line_4);
PARAMETER(PR2.UOM_Primary);
PARAMETER(PR2.Conversion_Factor_1);
PARAMETER(PR2.Operation_Factor_1);
PARAMETER(PR2.UOM_Second);
PARAMETER(PR2.Conversion_Factor_2);
PARAMETER(PR2.Operation_Factor_2);
PARAMETER(PR2.UOM_Third);
PARAMETER(PR2.UOM_Pricing);
PARAMETER(PR2.Unit_Weight);
PARAMETER(PR2.Quality_Level);
PARAMETER(PR2.Item_Level);
PARAMETER(PR2.Production_Date_Control);
PARAMETER(PR2.Catch_Weight_Status);
PARAMETER(PR2.Minimum_Weight_Per_Case);
PARAMETER(PR2.Maximum_Weight_Per_Case);
PARAMETER(PR2.Number_Cases_On_A_Pallet);
PARAMETER(PR2.Vendor_Item_Default);
PARAMETER(PR2.Item_Structure_Class_Code);
PARAMETER(PR2.Item_Structure_Group_Code);
PARAMETER(PR2.Item_Structure_Type_Code);
PARAMETER(PR2.Default_Commod_Mark_basis);
PARAMETER(PR2.Transportation_Temp);
PARAMETER(PR2.Item_Type_Code);
PARAMETER(PR2.Package_Type_Code);
PARAMETER(PR2.Maximum_Audit_Value);
PARAMETER(PR2.Minimum_Audit_Value);
PARAMETER(PR2.Market_Overage);
PARAMETER(PR2.Standard_Overage_Underage);
PARAMETER(PR2.Commodity_Price_Group);
PARAMETER(PR2.Item_Pricing_Operation);
PARAMETER(PR2.Item_Pricing_Constant);
PARAMETER(PR2.Default_Warehouse);
PARAMETER(PR2.Price_Method_Default);
PARAMETER(PR2.Fresh_Chilling_Time);
PARAMETER(PR2.Base_Conv_Loss_Item);
PARAMETER(PR2.Variety_Rendered_Cut);
PARAMETER(PR2.Frozen_Make_to_Order_Sts);
PARAMETER(PR2.Credit_Item_Status);
PARAMETER(PR2.Std_Weight_Head_Var_Ren);
PARAMETER(PR2.Pieces_Per_Head);
PARAMETER(PR2.Department_Code);
PARAMETER(PR2.Group_for_Packaging);
PARAMETER(PR2.Item_Category_Number_1);
PARAMETER(PR2.Made_to_Order_Code);
PARAMETER(PR2.Item_Category_Number_2);
PARAMETER(PR2.Transportation_Equip_Type);
PARAMETER(PR2.Item_Category_Number_3);
PARAMETER(PR2.Item_Category_Code_3);
PARAMETER(PR2.Item_Category_Number_4);
PARAMETER(PR2.GL_Sub_Code);
PARAMETER(PR2.Pallet_Tare_Weight);
PARAMETER(PR2.Misc_Tare_Weight);
PARAMETER(PR2.Production_Lead_Days);
PARAMETER(PR2.Packaging_Code);
PARAMETER(PR2.Item_Market_Code);
PARAMETER(PR1.Use_Freeze_Sell_By_Days);
PARAMETER(PR2.Partial_Item_Code);
PARAMETER(PR2.WIP_Item_Code);
PARAMETER(PR2.WIP_Reject_Code);
PARAMETER(PR2.PM_Line_Number);
PARAMETER(PR2.Seconds_Item);
PARAMETER(PR2.Print_on_Realization_Rpt);
PARAMETER(PR2.Unit_Weight_Change_Sts);
PARAMETER(PR2.Piece_Count_Item);
PARAMETER(PR2.Pieces_Per_Bag);
PARAMETER(PR2.Bags_Per_Unit);
PARAMETER(PR2.Export_Domestic);
PARAMETER(PR2.Print_On_Schedule);
PARAMETER(PR2.Fresh_Inv_Allocation_Seq);
PARAMETER(PR2.Fresh_Sched_As_Ordered);
PARAMETER(PR2.Frozen_Inv_Allocation_Seq);
PARAMETER(PR2.Primal_Group_Code);
PARAMETER(PR2.Item_Target_Price);
PARAMETER(PR2.Minimum_Piece_Weight);
PARAMETER(PR2.Maximum_Piece_Weight);
PARAMETER(PR2.Seaboard_Equivalent_Item);
PARAMETER(PR2.Production_Qty_Per_Shift);
PARAMETER(PR2.Scheduling_Position_Grade);
PARAMETER(PR2.Sold_100_Percent_Frozen);
PARAMETER(PR2.Maximum_Shifts);
PARAMETER(PR2.Value_Added_Sts);
PARAMETER(PR1.Label_Type);
PARAMETER(PR1.Default_Workcenter);
PARAMETER(PR2.Record_Status);
PARAMETER(LCL.Change_Flag_USR);
PARAMETER(LCL.Number_50_USR);
PARAMETER('IST');
PARAMETER(PR3.Box_iD);
PARAMETER(PR3.Box_iD);
PARAMETER(LCL.USR_Formula_Meth_Type_Sts);
PARAMETER(LCL.USR_Market_Meth_Type_Sts);
PARAMETER(LCL.USR_Manual_Meth_Type_Sts);
PARAMETER(LCL.USR_Extend_Meth_Type_Sts);
{
 //?Execute internal function

 // PR3.Change Flag USR = CND.Blank
 PR3.Change_Flag_USR = *BLANK;

 // PR4.Number 5,0            USR = CON.*ZERO
 PR4.Number_50_USR = 00000;

 // PR8.USR Formula Meth Type Sts = CND.no
 PR8.USR_Formula_Meth_Type_Sts = 'N';

 // PR8.USR Market Meth Type Sts = CND.no
 PR8.USR_Market_Meth_Type_Sts = 'N';

 // PR8.USR Manual Meth Type Sts = CND.no
 PR8.USR_Manual_Meth_Type_Sts = 'N';

 // PR8.USR Extend Meth Type Sts = CND.no
 PR8.USR_Extend_Meth_Type_Sts = 'N';

 //?Verify plant floor fields only
 CASE;

 // IF PR5.Cmp Co/Item Fields Usr is Plant Floor
 IF PR5.Cmp_Co_Item_Fields_Usr = 'PLF';

 //?  1. Description Line One
 CASE;

 // IF PR1.Description Line One NE PR2.Description Line One
 IF PR1.Description_Line_One <> PR2.Description_Line_One;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00001
 PR4.Number_50_USR = 00001;

 QUIT;

 ENDIF;

 //?  2. Description Line Two
 CASE;

 // IF PR1.Description Line Two NE PR2.Description Line Two
 IF PR1.Description_Line_Two <> PR2.Description_Line_Two;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00002
 PR4.Number_50_USR = 00002;

 QUIT;

 ENDIF;

 //?  3. Item Label Line 1
 CASE;

 // IF PR1.Item Label Line 1 NE PR2.Item Label Line 1
 IF PR1.Item_Label_Line_1 <> PR2.Item_Label_Line_1;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00003
 PR4.Number_50_USR = 00003;

 QUIT;

 ENDIF;

 //?  4. Item Label Line 2
 CASE;

 // IF PR1.Item Label Line 2 NE PR2.Item Label Line 2
 IF PR1.Item_Label_Line_2 <> PR2.Item_Label_Line_2;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00004
 PR4.Number_50_USR = 00004;

 QUIT;

 ENDIF;

 //?  5. Item Label Line 3
 CASE;

 // IF PR1.Item Label Line 3 NE PR2.Item Label Line 3
 IF PR1.Item_Label_Line_3 <> PR2.Item_Label_Line_3;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00005
 PR4.Number_50_USR = 00005;

 QUIT;

 ENDIF;

 //?  7. U/M - Primary
 CASE;

 // IF PR1.U/M - Primary NE PR2.U/M - Primary
 IF PR1.UOM_Primary <> PR2.UOM_Primary;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00007
 PR4.Number_50_USR = 00007;

 QUIT;

 ENDIF;

 //? 15. Unit Weight
 CASE;

 // IF PR1.Unit Weight NE PR2.Unit Weight
 IF PR1.Unit_Weight <> PR2.Unit_Weight;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00015
 PR4.Number_50_USR = 00015;

 QUIT;

 ENDIF;

 //? 19. Catch Weight Status
 CASE;

 // IF PR1.Catch Weight Status NE PR2.Catch Weight Status
 IF PR1.Catch_Weight_Status <> PR2.Catch_Weight_Status;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00019
 PR4.Number_50_USR = 00019;

 QUIT;

 ENDIF;

 //? 20. Minimum Weight Per Case
 CASE;

 // IF PR1.Minimum Weight Per Case NE PR2.Minimum Weight Per Case
 IF PR1.Minimum_Weight_Per_Case <> PR2.Minimum_Weight_Per_Case;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00020
 PR4.Number_50_USR = 00020;

 QUIT;

 ENDIF;

 //? 21. Maximum Weight Per Case
 CASE;

 // IF PR1.Maximum Weight Per Case NE PR2.Maximum Weight Per Case
 IF PR1.Maximum_Weight_Per_Case <> PR2.Maximum_Weight_Per_Case;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00021
 PR4.Number_50_USR = 00021;

 QUIT;

 ENDIF;

 //? 22. Number Cases On A Pallet
 CASE;

 // IF PR1.Number Cases On A Pallet NE PR2.Number Cases On A Pallet
 IF PR1.Number_Cases_On_A_Pallet <> PR2.Number_Cases_On_A_Pallet;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00022
 PR4.Number_50_USR = 00022;

 QUIT;

 ENDIF;

 //? 24. Item Structure Class Code
 CASE;

 // IF PR1.Item Structure Class Code NE PR2.Item Structure Class Code
 IF PR1.Item_Structure_Class_Code <> PR2.Item_Structure_Class_Code;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00024
 PR4.Number_50_USR = 00024;

 QUIT;

 ENDIF;

 //? 25. Item Structure Group Code
 CASE;

 // IF PR1.Item Structure Group Code NE PR2.Item Structure Group Code
 IF PR1.Item_Structure_Group_Code <> PR2.Item_Structure_Group_Code;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00025
 PR4.Number_50_USR = 00025;

 QUIT;

 ENDIF;

 //? 26. Item Structure Type Code
 CASE;

 // IF PR1.Item Structure Type Code NE PR2.Item Structure Type Code
 IF PR1.Item_Structure_Type_Code <> PR2.Item_Structure_Type_Code;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00026
 PR4.Number_50_USR = 00026;

 QUIT;

 ENDIF;

 //? 31. Fresh Chilling Time
 CASE;

 // IF PR1.Fresh Chilling Time NE PR2.Fresh Chilling Time
 IF PR1.Fresh_Chilling_Time <> PR2.Fresh_Chilling_Time;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00031
 PR4.Number_50_USR = 00031;

 QUIT;

 ENDIF;

 //? 40. Misc Tare Weight
 CASE;

 // IF PR1.Misc Tare Weight NE PR2.Misc Tare Weight
 IF PR1.Misc_Tare_Weight <> PR2.Misc_Tare_Weight;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00040
 PR4.Number_50_USR = 00040;

 QUIT;

 ENDIF;

 //? 52. Number Cases On A Pallet
 CASE;

 // IF PR1.Number Cases On A Pallet NE PR2.Number Cases On A Pallet
 IF PR1.Number_Cases_On_A_Pallet <> PR2.Number_Cases_On_A_Pallet;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00052
 PR4.Number_50_USR = 00052;

 QUIT;

 ENDIF;

 //? 57. Default Warehouse
 CASE;

 // IF PR1.Default Warehouse NE PR2.Default Warehouse
 IF PR1.Default_Warehouse <> PR2.Default_Warehouse;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00057
 PR4.Number_50_USR = 00057;

 QUIT;

 ENDIF;

 //? 81. Piece Count Item
 CASE;

 // IF PR1.Piece Count Item NE PR2.Piece Count Item
 IF PR1.Piece_Count_Item <> PR2.Piece_Count_Item;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00081
 PR4.Number_50_USR = 00081;

 QUIT;

 ENDIF;

 //? 82. Pieces Per Bag
 CASE;

 // IF PR1.Pieces Per Bag NE PR2.Pieces Per Bag
 IF PR1.Pieces_Per_Bag <> PR2.Pieces_Per_Bag;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00082
 PR4.Number_50_USR = 00082;

 QUIT;

 ENDIF;

 //? 83. Bags Per Unit
 CASE;

 // IF PR1.Bags Per Unit NE PR2.Bags Per Unit
 IF PR1.Bags_Per_Unit <> PR2.Bags_Per_Unit;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00083
 PR4.Number_50_USR = 00083;

 QUIT;

 ENDIF;

 //? 95. Sold 100% Frozen
 CASE;

 // IF PR1.Sold 100% Frozen NE PR2.Sold 100% Frozen
 IF PR1.Sold_100_Percent_Frozen <> PR2.Sold_100_Percent_Frozen;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00095
 PR4.Number_50_USR = 00095;

 QUIT;

 ENDIF;

 //? 99. Record Status
 CASE;

 // IF PR1.Record Status NE PR2.Record Status
 IF PR1.Record_Status <> PR2.Record_Status;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00099
 PR4.Number_50_USR = 00099;

 QUIT;

 ENDIF;

 //?100. Box Id from the Bill of Material
 CASE;

 // IF PR6.Box iD NE PR7.Box iD
 IF PR6.Box_iD <> PR7.Box_iD;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00100
 PR4.Number_50_USR = 00100;

 QUIT;

 ENDIF;

 //?101. Label Type
 CASE;

 // IF PR1.Label Type NE PR2.Label Type
 IF PR1.Label_Type <> PR2.Label_Type;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00101
 PR4.Number_50_USR = 00101;

 QUIT;

 ENDIF;

 //?102. Default Workcenter
 CASE;

 // IF PR1.Default Workcenter NE PR2.Default Workcenter
 IF PR1.Default_Workcenter <> PR2.Default_Workcenter;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00102
 PR4.Number_50_USR = 00102;

 QUIT;

 ENDIF;

 //?103. Use/Sell/Freeze By Days
 CASE;

 // IF PR1.Use/Freeze/Sell By Days NE PR2.Use/Freeze/Sell By Days
 IF PR1.Use_Freeze_Sell_By_Days <> PR2.Use_Freeze_Sell_By_Days;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00103
 PR4.Number_50_USR = 00103;

 QUIT;

 ENDIF;

 ENDIF;

 //?Verify Item Structure fields only
 CASE;

 // IF PR5.Cmp Co/Item Fields Usr is Item Structure Flds
 IF PR5.Cmp_Co_Item_Fields_Usr = 'IST';

 //? 24. Item Structure Class Code
 CASE;

 // IF PR1.Item Structure Class Code NE PR2.Item Structure Class Code
 IF PR1.Item_Structure_Class_Code <> PR2.Item_Structure_Class_Code;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00024
 PR4.Number_50_USR = 00024;

 QUIT;

 ENDIF;

 ENDIF;

 //?Verify Price Audit fields
 CASE;

 // IF PR5.Cmp Co/Item Fields Usr is Price Audit Update
 IF PR5.Cmp_Co_Item_Fields_Usr = 'PAU';

 //? 99. Record Status
 CASE;

 // IF PR1.Record Status NE PR2.Record Status
 IF PR1.Record_Status <> PR2.Record_Status;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00099
 PR4.Number_50_USR = 00099;

 // PR8.USR Formula Meth Type Sts = CND.yes
 PR8.USR_Formula_Meth_Type_Sts = 'Y';

 // PR8.USR Market Meth Type Sts = CND.yes
 PR8.USR_Market_Meth_Type_Sts = 'Y';

 // PR8.USR Manual Meth Type Sts = CND.yes
 PR8.USR_Manual_Meth_Type_Sts = 'Y';

 // PR8.USR Extend Meth Type Sts = CND.yes
 PR8.USR_Extend_Meth_Type_Sts = 'Y';

 QUIT;

 ENDIF;

 //? 14. U/M - Pricing
 CASE;

 // IF PR1.U/M - Pricing NE PR2.U/M - Pricing
 IF PR1.UOM_Pricing <> PR2.UOM_Pricing;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00014
 PR4.Number_50_USR = 00014;

 // PR8.USR Formula Meth Type Sts = CND.yes
 PR8.USR_Formula_Meth_Type_Sts = 'Y';

 // PR8.USR Market Meth Type Sts = CND.yes
 PR8.USR_Market_Meth_Type_Sts = 'Y';

 // PR8.USR Manual Meth Type Sts = CND.yes
 PR8.USR_Manual_Meth_Type_Sts = 'Y';

 QUIT;

 ENDIF;

 //? 38. Commodity Price Group
 CASE;

 // IF PR1.Commodity Price Group NE PR2.Commodity Price Group
 IF PR1.Commodity_Price_Group <> PR2.Commodity_Price_Group;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00038
 PR4.Number_50_USR = 00038;

 // PR8.USR Formula Meth Type Sts = CND.yes
 PR8.USR_Formula_Meth_Type_Sts = 'Y';

 // PR8.USR Market Meth Type Sts = CND.yes
 PR8.USR_Market_Meth_Type_Sts = 'Y';

 QUIT;

 ENDIF;

 //? 53. Market Overage
 CASE;

 // IF PR1.Market Overage NE PR2.Market Overage
 IF PR1.Market_Overage <> PR2.Market_Overage;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00053
 PR4.Number_50_USR = 00053;

 // PR8.USR Market Meth Type Sts = CND.yes
 PR8.USR_Market_Meth_Type_Sts = 'Y';

 QUIT;

 ENDIF;

 //? 27. Default Commod Mark basis
 CASE;

 // IF PR1.Default Commod Mark basis NE PR2.Default Commod Mark basis
 IF PR1.Default_Commod_Mark_basis <> PR2.Default_Commod_Mark_basis;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00027
 PR4.Number_50_USR = 00027;

 // PR8.USR Formula Meth Type Sts = CND.yes
 PR8.USR_Formula_Meth_Type_Sts = 'Y';

 QUIT;

 ENDIF;

 //? 55. Item Pricing Operation
 CASE;

 // IF PR1.Item Pricing Operation NE PR2.Item Pricing Operation
 IF PR1.Item_Pricing_Operation <> PR2.Item_Pricing_Operation;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00055
 PR4.Number_50_USR = 00055;

 // PR8.USR Formula Meth Type Sts = CND.yes
 PR8.USR_Formula_Meth_Type_Sts = 'Y';

 QUIT;

 ENDIF;

 //? 56. Item Pricing Constant
 CASE;

 // IF PR1.Item Pricing Constant NE PR2.Item Pricing Constant
 IF PR1.Item_Pricing_Constant <> PR2.Item_Pricing_Constant;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00056
 PR4.Number_50_USR = 00056;

 // PR8.USR Formula Meth Type Sts = CND.yes
 PR8.USR_Formula_Meth_Type_Sts = 'Y';

 QUIT;

 ENDIF;

 //? 54. Standard Overage/Underage
 CASE;

 // IF PR1.Standard Overage/Underage NE PR2.Standard Overage/Underage
 IF PR1.Standard_Overage_Underage <> PR2.Standard_Overage_Underage;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00054
 PR4.Number_50_USR = 00054;

 // PR8.USR Formula Meth Type Sts = CND.yes
 PR8.USR_Formula_Meth_Type_Sts = 'Y';

 QUIT;

 ENDIF;

 //?100. Box Id from the Bill of Material
 CASE;

 // IF PR6.Box iD NE PR7.Box iD
 IF PR6.Box_iD <> PR7.Box_iD;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00100
 PR4.Number_50_USR = 00100;

 QUIT;

 ENDIF;

 ENDIF;

 //?Verify if BOX ID is changing
 CASE;

 // IF PR5.Cmp Co/Item Fields Usr is BoxId - BOM
 IF PR5.Cmp_Co_Item_Fields_Usr = 'BOX';

 //?100. Box Id from the Bill of Material
 CASE;

 // IF PR6.Box iD NE PR7.Box iD
 IF PR6.Box_iD <> PR7.Box_iD;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00100
 PR4.Number_50_USR = 00100;

 QUIT;

 ENDIF;

 ENDIF;

}


//?Change item structure in inventory if item structure class changes
CASE;

// IF LCL.Change Flag USR is Yes
IF LCL.Change_Flag_USR = 'Y';

//?W020617 MD  05/24/24 - Added code to retrieve Module Release Status
//?and then use it to update Legacy and/or WIM tables accordingly
EXECUTE FUNCTION(Rtv Module Release Sts RT) TYPE(RTVOBJ) FILE(PUC6REP)          AC2212908;
PARAMETER('WIM');
PARAMETER(1);
PARAMETER(LCL.Module_Release_Status);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 MOVE *ALL (To: PAR From: DB1);

 ENDIF;

}


//?W020617 MD 05/24/24 Update Legacy Tables Item Structure details
CASE;

// IF LCL.Module Release Status is Not Live
IF LCL.Module_Release_Status = 'N';

// OR LCL.Module Release Status is Parallel
OR LCL.Module_Release_Status = 'P';

EXECUTE FUNCTION(Chg Item Structure     RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC1349788;
PARAMETER(PR1.Company_Number);
PARAMETER(PR1.Item_Code);
PARAMETER(PR1.Item_Structure_Class_Code);
PARAMETER(PR1.Item_Structure_Group_Code);
PARAMETER(PR1.Item_Structure_Type_Code);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Item Balance       CH) TYPE(CHGOBJ) FILE(CAB0REP)          AC1119977;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Unit_Cost_Per_Pound);
 PARAMETER(DB1.Last_Cost);
 PARAMETER(DB1.Cost_per_Primary_UOM);
 PARAMETER(DB1.Cost_per_Pricing_UOM);
 PARAMETER(DB1.Revaluation_Cost);
 PARAMETER(DB1.Revaluation_Eff_Date);
 PARAMETER(DB1.Revaluation_Cost_Type);
 PARAMETER(DB1.Last_Revaluation_Cost);
 PARAMETER(DB1.Last_Revaluation_Eff_Date);
 PARAMETER(DB1.On_Hand_Weight_Summary);
 PARAMETER(DB1.On_Hand_UOM1_Summary);
 PARAMETER(DB1.On_Hand_UOM2_Summary);
 PARAMETER(DB1.On_Hand_UOM3_Summary);
 PARAMETER(DB1.Quantity_In_Chill);
 PARAMETER(DB1.Weight_In_Chill);
 PARAMETER(DB1.Quantity_Scheduled_UOM1);
 PARAMETER(DB1.Quantity_on_Sales_Order);
 PARAMETER(DB1.Quantity_on_Purch_Order);
 PARAMETER(DB1.Quantity_on_Transfer);
 PARAMETER(DB1.Quantity_Avail_To_Sell);
 PARAMETER(DB1.Cycle_Count_Code_IB);
 PARAMETER(DB1.Date_of_Last_Order);
 PARAMETER(DB1.Date_of_Last_Shipment);
 PARAMETER(DB1.Value_of_On_Hand_Inventor);
 PARAMETER(DB1.Inventory_Planning_Type);
 PARAMETER(DB1.Safety_Allowance_Percent);
 PARAMETER(DB1.Safety_Allowance_Quantity);
 PARAMETER(DB1.Stock_Out_Date);
 PARAMETER(DB1.Buyer_Code);
 PARAMETER(DB1.Lead_Time_Last);
 PARAMETER(DB1.Lead_Time_Date_Last);
 PARAMETER(DB1.Lead_Time_Next_to_Last);
 PARAMETER(DB1.Lead_Time_Date_Next_Lst);
 PARAMETER(DB1.Lead_Time_Exception);
 PARAMETER(DB1.Usage_Qty_per_Cycle);
 PARAMETER(DB1.Usage_Weight_per_Cycle);
 PARAMETER(DB1.Inventory_Management);
 PARAMETER(DB1.Minimum_Quantity);
 PARAMETER(DB1.Maximum_Quantity);
 PARAMETER(DB1.Last_Physical_Count);
 PARAMETER(DB1.Requisition_Mode);
 PARAMETER(DB1.Cost_Update_Pending);
 PARAMETER(DB1.Post_GL_Status);
 PARAMETER(DB1.Vendor_Item_Whse_Default);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Record_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


EXECUTE FUNCTION(Chg Item Structure     RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1349789;
PARAMETER(PR1.Company_Number);
PARAMETER(PR1.Item_Code);
PARAMETER(PR1.Item_Structure_Class_Code);
PARAMETER(PR1.Item_Structure_Group_Code);
PARAMETER(PR1.Item_Structure_Type_Code);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Item Bal. Detail   CH) TYPE(CHGOBJ) FILE(CAB1REP)          AC1120963;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Physical_Count_Weight);
 PARAMETER(DB1.Physical_Count_Qty_UOM1);
 PARAMETER(DB1.Physical_Count_Qty_UOM2);
 PARAMETER(DB1.Physical_Count_Qty_UOM3);
 PARAMETER(DB1.Physical_Count_Status);
 PARAMETER(DB1.Quantity_on_Hand_Weight);
 PARAMETER(DB1.Quantity_on_Hand_UOM1);
 PARAMETER(DB1.Quantity_on_Hand_UOM2);
 PARAMETER(DB1.Quantity_on_Hand_UOM3);
 PARAMETER(DB1.Quantity_In_Chill);
 PARAMETER(DB1.Weight_In_Chill);
 PARAMETER(DB1.Update_Exception_Status);
 PARAMETER(DB1.Physical_Start_Weight);
 PARAMETER(DB1.Physical_Start_UOM1);
 PARAMETER(DB1.Physical_Start_UOM2);
 PARAMETER(DB1.Physical_Start_UOM3);
 PARAMETER(DB1.Physical_Start_Date);
 PARAMETER(DB1.Unit_Cost_Per_Pound);
 PARAMETER(DB1.Last_Cost);
 PARAMETER(DB1.Value_of_On_Hand_Inventor);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

 }

}


EXECUTE FUNCTION(Chg Item Structure     RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1349796;
PARAMETER(PR1.Company_Number);
PARAMETER(PR1.Item_Code);
PARAMETER(PR1.Item_Structure_Class_Code);
PARAMETER(PR1.Item_Structure_Group_Code);
PARAMETER(PR1.Item_Structure_Type_Code);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(CHG IC Trans. Detail   CH) TYPE(CHGOBJ) FILE(CAB7CPP)          AC1122299;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Inventory_Trans_ID);
 PARAMETER(DB1.Inventory_Trans_Type);
 PARAMETER(DB1.Transaction_Date_Code);
 PARAMETER(DB1.ITD_Sequence_Number);
 PARAMETER(DB1.Sequence_Number);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.UOM_Transaction);
 PARAMETER(DB1.Item_Transaction_Source);
 PARAMETER(DB1.Description);
 PARAMETER(DB1.Transaction_Quantity);
 PARAMETER(DB1.Transaction_Weight);
 PARAMETER(DB1.USR_Transaction_Unit_Cost);
 PARAMETER(DB1.UOM_Cost);
 PARAMETER(DB1.Extended_Amount);
 PARAMETER(DB1.Ticket_Number);
 PARAMETER(DB1.GL_Document_Number);
 PARAMETER(DB1.GL_Update_Status);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Reference_Number_Code);
 PARAMETER(DB1.Lot_ID);
 PARAMETER(DB1.Transfer_Batch_Number);
 PARAMETER(DB1.Transfer_Batch_Sequence);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(DB1.Employee_Badge_Number);
 PARAMETER(DB1.Production_Time);
 PARAMETER(DB1.Shift_Number);
 PARAMETER(DB1.Label_Date);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Record_Status);
 {
  //?USER: Processing before Data update

  //?01/29/02 PKD Do not change the Record Stamp per Tom Dye. This
  //?             causes inaccurate reporting on the Item Transaction
  //?             Journal.
 }

}


ENDIF;

//?W020617 MD 05/24/24 Update WIM Tables Item Structure details
CASE;

// IF LCL.Module Release Status is Is Live
IF LCL.Module_Release_Status = 'Y';

// OR LCL.Module Release Status is Parallel
OR LCL.Module_Release_Status = 'P';

EXECUTE FUNCTION(Chg Item Structure     RT) TYPE(RTVOBJ) FILE(PUCGCPP)          AC2227758;
PARAMETER(PR1.Company_Number);
PARAMETER(PR1.Item_Code);
PARAMETER(PR1.Item_Structure_Class_Code);
PARAMETER(PR1.Item_Structure_Group_Code);
PARAMETER(PR1.Item_Structure_Type_Code);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg WIM Item Balance  CH) TYPE(CHGOBJ) FILE(PUCGCPP)           AC2209098;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Inventory_Item_Type);
 PARAMETER(DB1.On_Hand_Weight_Summary);
 PARAMETER(DB1.On_Hand_UOM1_Summary);
 PARAMETER(DB1.In_Transit_Weight_Summary);
 PARAMETER(DB1.In_Transit_UOM1_Summary);
 PARAMETER(DB1.Qty_Available_to_Sell);
 PARAMETER(DB1.On_Hold_Weight_Summary);
 PARAMETER(DB1.On_Hold_UOM1_Summary);
 PARAMETER(DB1.Available_Weight_Summary);
 PARAMETER(DB1.Available_UOM1_Summary);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(DB1.Record_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Time Stamp DDL IF) TYPE(EXCINTFUN)                     AC2212930;
  PARAMETER(DB1.Update_Date_Timestamp);
  PARAMETER(DB1.Update_User_Id);
  PARAMETER(DB1.Update_Program_Name);
  {
   //?Execute internal function

   //?*** Set CHANGE Time Stamp Info.
   // PAR.Update Date Timestamp = JOB.*System timestamp
   PAR.Update_Date_Timestamp = JOB.*System_timestamp;

   // PAR.Update User Id = JOB.*USER
   PAR.Update_User_Id = JOB.*USER;

   // PAR.Update Program Name = JOB.*PROGRAM
   PAR.Update_Program_Name = JOB.*PROGRAM;

  }

 }

}


EXECUTE FUNCTION(Chg Item Structure     RT) TYPE(RTVOBJ) FILE(PUCHCPP)          AC2227759;
PARAMETER(PR1.Company_Number);
PARAMETER(PR1.Item_Code);
PARAMETER(PR1.Item_Structure_Class_Code);
PARAMETER(PR1.Item_Structure_Group_Code);
PARAMETER(PR1.Item_Structure_Type_Code);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg WIM Item Bal Dtl  CH) TYPE(CHGOBJ) FILE(PUCHCPP)           AC2209118;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Inventory_Item_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Physical_Count_Weight);
 PARAMETER(DB1.Physical_Count_Qty_UOM1);
 PARAMETER(DB1.Physical_Count_Status);
 PARAMETER(DB1.On_Hand_Weight);
 PARAMETER(DB1.On_Hand_UOM1_Quantity);
 PARAMETER(DB1.In_Transit_Weight);
 PARAMETER(DB1.In_Transit_UOM1_Quantity);
 PARAMETER(DB1.On_Hold_Weight);
 PARAMETER(DB1.On_Hold_UOM1_Quantity);
 PARAMETER(DB1.Available_Weight);
 PARAMETER(DB1.Available_UOM1_Quantity);
 PARAMETER(DB1.Physical_Start_Weight);
 PARAMETER(DB1.Physical_Start_UOM1);
 PARAMETER(DB1.Physical_Start_Date);
 PARAMETER(DB1.Physical_Start_Timestamp);
 PARAMETER(DB1.Production_Date_YYYYMMDD);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(DB1.Record_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Time Stamp DDL IF) TYPE(EXCINTFUN)                     AC2212930;
  PARAMETER(DB1.Update_Date_Timestamp);
  PARAMETER(DB1.Update_User_Id);
  PARAMETER(DB1.Update_Program_Name);
  {
   //?Execute internal function

   //?*** Set CHANGE Time Stamp Info.
   // PAR.Update Date Timestamp = JOB.*System timestamp
   PAR.Update_Date_Timestamp = JOB.*System_timestamp;

   // PAR.Update User Id = JOB.*USER
   PAR.Update_User_Id = JOB.*USER;

   // PAR.Update Program Name = JOB.*PROGRAM
   PAR.Update_Program_Name = JOB.*PROGRAM;

  }

 }

}


EXECUTE FUNCTION(Chg Item Structure     RT) TYPE(RTVOBJ) FILE(PUCICPP)          AC2227760;
PARAMETER(PR1.Company_Number);
PARAMETER(PR1.Item_Code);
PARAMETER(PR1.Item_Structure_Class_Code);
PARAMETER(PR1.Item_Structure_Group_Code);
PARAMETER(PR1.Item_Structure_Type_Code);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg WIM Item Trans Dtl CH) TYPE(CHGOBJ) FILE(PUCICPP)          AC2209168;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Inventory_Item_Type);
 PARAMETER(DB1.WIM_Inventory_Trans_ID);
 PARAMETER(DB1.WIM_Inventory_Trans_Type);
 PARAMETER(DB1.Transaction_Date);
 PARAMETER(DB1.ITD_Sequence_Number);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Date_Timestamp);
 PARAMETER(DB1.Transaction_Dt_Timestamp);
 PARAMETER(DB1.Transaction_UOM);
 PARAMETER(DB1.Item_Transaction_Source);
 PARAMETER(DB1.Transaction_Description);
 PARAMETER(DB1.Transaction_Quantity);
 PARAMETER(DB1.Transaction_Weight);
 PARAMETER(DB1.Cost_UOM);
 PARAMETER(DB1.Transaction_Reason_Code);
 PARAMETER(DB1.Shift_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(DB1.Record_Status);
}


ENDIF;

ENDIF;

//?Compare prior fields if chg occurs then perform the pricing audit
EXECUTE FUNCTION(Cmp Co Item/Co Item    IF) TYPE(EXCINTFUN)                     AC1703290;
PARAMETER(PR1.Description_Line_One);
PARAMETER(PR1.Description_Line_Two);
PARAMETER(PR1.Item_Label_Line_1);
PARAMETER(PR1.Item_Label_Line_2);
PARAMETER(PR1.Item_Label_Line_3);
PARAMETER(PR1.Item_Label_Line_4);
PARAMETER(PR1.UOM_Primary);
PARAMETER(PR1.Conversion_Factor_1);
PARAMETER(PR1.Operation_Factor_1);
PARAMETER(PR1.UOM_Second);
PARAMETER(PR1.Conversion_Factor_2);
PARAMETER(PR1.Operation_Factor_2);
PARAMETER(PR1.UOM_Third);
PARAMETER(PR1.UOM_Pricing);
PARAMETER(PR1.Unit_Weight);
PARAMETER(PR1.Quality_Level);
PARAMETER(PR1.Item_Level);
PARAMETER(PR1.Production_Date_Control);
PARAMETER(PR1.Catch_Weight_Status);
PARAMETER(PR1.Minimum_Weight_Per_Case);
PARAMETER(PR1.Maximum_Weight_Per_Case);
PARAMETER(PR1.Number_Cases_On_A_Pallet);
PARAMETER(PR1.Vendor_Item_Default);
PARAMETER(PR1.Item_Structure_Class_Code);
PARAMETER(PR1.Item_Structure_Group_Code);
PARAMETER(PR1.Item_Structure_Type_Code);
PARAMETER(PR1.Default_Commod_Mark_basis);
PARAMETER(PR1.Transportation_Temp);
PARAMETER(PR1.Item_Type_Code);
PARAMETER(PR1.Package_Type_Code);
PARAMETER(PR1.Maximum_Audit_Value);
PARAMETER(PR1.Minimum_Audit_Value);
PARAMETER(PR1.Market_Overage);
PARAMETER(PR1.Standard_Overage_Underage);
PARAMETER(PR1.Commodity_Price_Group);
PARAMETER(PR1.Item_Pricing_Operation);
PARAMETER(PR1.Item_Pricing_Constant);
PARAMETER(PR1.Default_Warehouse);
PARAMETER(PR1.Price_Method_Default);
PARAMETER(PR1.Fresh_Chilling_Time);
PARAMETER(PR1.Base_Conv_Loss_Item);
PARAMETER(PR1.Variety_Rendered_Cut);
PARAMETER(PR1.Frozen_Make_to_Order_Sts);
PARAMETER(PR1.Credit_Item_Status);
PARAMETER(PR1.Std_Weight_Head_Var_Ren);
PARAMETER(PR1.Pieces_Per_Head);
PARAMETER(PR1.Department_Code);
PARAMETER(PR1.Group_for_Packaging);
PARAMETER(PR1.Item_Category_Number_1);
PARAMETER(PR1.Made_to_Order_Code);
PARAMETER(PR1.Item_Category_Number_2);
PARAMETER(PR1.Transportation_Equip_Type);
PARAMETER(PR1.Item_Category_Number_3);
PARAMETER(PR1.Item_Category_Code_3);
PARAMETER(PR1.Item_Category_Number_4);
PARAMETER(PR1.GL_Sub_Code);
PARAMETER(PR1.Pallet_Tare_Weight);
PARAMETER(PR1.Misc_Tare_Weight);
PARAMETER(PR1.Production_Lead_Days);
PARAMETER(PR1.Packaging_Code);
PARAMETER(PR1.Item_Market_Code);
PARAMETER(PR1.Use_Freeze_Sell_By_Days);
PARAMETER(PR1.Partial_Item_Code);
PARAMETER(PR1.WIP_Item_Code);
PARAMETER(PR1.WIP_Reject_Code);
PARAMETER(PR1.PM_Line_Number);
PARAMETER(PR1.Seconds_Item);
PARAMETER(PR1.Print_on_Realization_Rpt);
PARAMETER(PR1.Unit_Weight_Change_Sts);
PARAMETER(PR1.Piece_Count_Item);
PARAMETER(PR1.Pieces_Per_Bag);
PARAMETER(PR1.Bags_Per_Unit);
PARAMETER(PR1.Export_Domestic);
PARAMETER(PR1.Print_On_Schedule);
PARAMETER(PR1.Fresh_Inv_Allocation_Seq);
PARAMETER(PR1.Fresh_Sched_As_Ordered);
PARAMETER(PR1.Frozen_Inv_Allocation_Seq);
PARAMETER(PR1.Primal_Group_Code);
PARAMETER(PR1.Item_Target_Price);
PARAMETER(PR1.Minimum_Piece_Weight);
PARAMETER(PR1.Maximum_Piece_Weight);
PARAMETER(PR1.Seaboard_Equivalent_Item);
PARAMETER(PR1.Production_Qty_Per_Shift);
PARAMETER(PR1.Scheduling_Position_Grade);
PARAMETER(PR1.Sold_100_Percent_Frozen);
PARAMETER(PR1.Maximum_Shifts);
PARAMETER(PR1.Value_Added_Sts);
PARAMETER(PR1.Label_Type);
PARAMETER(PR1.Default_Workcenter);
PARAMETER(PR1.Record_Status);
PARAMETER(PR2.Description_Line_One);
PARAMETER(PR2.Description_Line_Two);
PARAMETER(PR2.Item_Label_Line_1);
PARAMETER(PR2.Item_Label_Line_2);
PARAMETER(PR2.Item_Label_Line_3);
PARAMETER(PR2.Item_Label_Line_4);
PARAMETER(PR2.UOM_Primary);
PARAMETER(PR2.Conversion_Factor_1);
PARAMETER(PR2.Operation_Factor_1);
PARAMETER(PR2.UOM_Second);
PARAMETER(PR2.Conversion_Factor_2);
PARAMETER(PR2.Operation_Factor_2);
PARAMETER(PR2.UOM_Third);
PARAMETER(PR2.UOM_Pricing);
PARAMETER(PR2.Unit_Weight);
PARAMETER(PR2.Quality_Level);
PARAMETER(PR2.Item_Level);
PARAMETER(PR2.Production_Date_Control);
PARAMETER(PR2.Catch_Weight_Status);
PARAMETER(PR2.Minimum_Weight_Per_Case);
PARAMETER(PR2.Maximum_Weight_Per_Case);
PARAMETER(PR2.Number_Cases_On_A_Pallet);
PARAMETER(PR2.Vendor_Item_Default);
PARAMETER(PR2.Item_Structure_Class_Code);
PARAMETER(PR2.Item_Structure_Group_Code);
PARAMETER(PR2.Item_Structure_Type_Code);
PARAMETER(PR2.Default_Commod_Mark_basis);
PARAMETER(PR2.Transportation_Temp);
PARAMETER(PR2.Item_Type_Code);
PARAMETER(PR2.Package_Type_Code);
PARAMETER(PR2.Maximum_Audit_Value);
PARAMETER(PR2.Minimum_Audit_Value);
PARAMETER(PR2.Market_Overage);
PARAMETER(PR2.Standard_Overage_Underage);
PARAMETER(PR2.Commodity_Price_Group);
PARAMETER(PR2.Item_Pricing_Operation);
PARAMETER(PR2.Item_Pricing_Constant);
PARAMETER(PR2.Default_Warehouse);
PARAMETER(PR2.Price_Method_Default);
PARAMETER(PR2.Fresh_Chilling_Time);
PARAMETER(PR2.Base_Conv_Loss_Item);
PARAMETER(PR2.Variety_Rendered_Cut);
PARAMETER(PR2.Frozen_Make_to_Order_Sts);
PARAMETER(PR2.Credit_Item_Status);
PARAMETER(PR2.Std_Weight_Head_Var_Ren);
PARAMETER(PR2.Pieces_Per_Head);
PARAMETER(PR2.Department_Code);
PARAMETER(PR2.Group_for_Packaging);
PARAMETER(PR2.Item_Category_Number_1);
PARAMETER(PR2.Made_to_Order_Code);
PARAMETER(PR2.Item_Category_Number_2);
PARAMETER(PR2.Transportation_Equip_Type);
PARAMETER(PR2.Item_Category_Number_3);
PARAMETER(PR2.Item_Category_Code_3);
PARAMETER(PR2.Item_Category_Number_4);
PARAMETER(PR2.GL_Sub_Code);
PARAMETER(PR2.Pallet_Tare_Weight);
PARAMETER(PR2.Misc_Tare_Weight);
PARAMETER(PR2.Production_Lead_Days);
PARAMETER(PR2.Packaging_Code);
PARAMETER(PR2.Item_Market_Code);
PARAMETER(PR1.Use_Freeze_Sell_By_Days);
PARAMETER(PR2.Partial_Item_Code);
PARAMETER(PR2.WIP_Item_Code);
PARAMETER(PR2.WIP_Reject_Code);
PARAMETER(PR2.PM_Line_Number);
PARAMETER(PR2.Seconds_Item);
PARAMETER(PR2.Print_on_Realization_Rpt);
PARAMETER(PR2.Unit_Weight_Change_Sts);
PARAMETER(PR2.Piece_Count_Item);
PARAMETER(PR2.Pieces_Per_Bag);
PARAMETER(PR2.Bags_Per_Unit);
PARAMETER(PR2.Export_Domestic);
PARAMETER(PR2.Print_On_Schedule);
PARAMETER(PR2.Fresh_Inv_Allocation_Seq);
PARAMETER(PR2.Fresh_Sched_As_Ordered);
PARAMETER(PR2.Frozen_Inv_Allocation_Seq);
PARAMETER(PR2.Primal_Group_Code);
PARAMETER(PR2.Item_Target_Price);
PARAMETER(PR2.Minimum_Piece_Weight);
PARAMETER(PR2.Maximum_Piece_Weight);
PARAMETER(PR2.Seaboard_Equivalent_Item);
PARAMETER(PR2.Production_Qty_Per_Shift);
PARAMETER(PR2.Scheduling_Position_Grade);
PARAMETER(PR2.Sold_100_Percent_Frozen);
PARAMETER(PR2.Maximum_Shifts);
PARAMETER(PR2.Value_Added_Sts);
PARAMETER(PR1.Label_Type);
PARAMETER(PR1.Default_Workcenter);
PARAMETER(PR2.Record_Status);
PARAMETER(LCL.Change_Flag_USR);
PARAMETER(LCL.Number_50_USR);
PARAMETER('PAU');
PARAMETER(PR3.Box_iD);
PARAMETER(PR3.Box_iD);
PARAMETER(LCL.USR_Formula_Meth_Type_Sts);
PARAMETER(LCL.USR_Market_Meth_Type_Sts);
PARAMETER(LCL.USR_Manual_Meth_Type_Sts);
PARAMETER(LCL.USR_Extend_Meth_Type_Sts);
{
 //?Execute internal function

 // PR3.Change Flag USR = CND.Blank
 PR3.Change_Flag_USR = *BLANK;

 // PR4.Number 5,0            USR = CON.*ZERO
 PR4.Number_50_USR = 00000;

 // PR8.USR Formula Meth Type Sts = CND.no
 PR8.USR_Formula_Meth_Type_Sts = 'N';

 // PR8.USR Market Meth Type Sts = CND.no
 PR8.USR_Market_Meth_Type_Sts = 'N';

 // PR8.USR Manual Meth Type Sts = CND.no
 PR8.USR_Manual_Meth_Type_Sts = 'N';

 // PR8.USR Extend Meth Type Sts = CND.no
 PR8.USR_Extend_Meth_Type_Sts = 'N';

 //?Verify plant floor fields only
 CASE;

 // IF PR5.Cmp Co/Item Fields Usr is Plant Floor
 IF PR5.Cmp_Co_Item_Fields_Usr = 'PLF';

 //?  1. Description Line One
 CASE;

 // IF PR1.Description Line One NE PR2.Description Line One
 IF PR1.Description_Line_One <> PR2.Description_Line_One;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00001
 PR4.Number_50_USR = 00001;

 QUIT;

 ENDIF;

 //?  2. Description Line Two
 CASE;

 // IF PR1.Description Line Two NE PR2.Description Line Two
 IF PR1.Description_Line_Two <> PR2.Description_Line_Two;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00002
 PR4.Number_50_USR = 00002;

 QUIT;

 ENDIF;

 //?  3. Item Label Line 1
 CASE;

 // IF PR1.Item Label Line 1 NE PR2.Item Label Line 1
 IF PR1.Item_Label_Line_1 <> PR2.Item_Label_Line_1;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00003
 PR4.Number_50_USR = 00003;

 QUIT;

 ENDIF;

 //?  4. Item Label Line 2
 CASE;

 // IF PR1.Item Label Line 2 NE PR2.Item Label Line 2
 IF PR1.Item_Label_Line_2 <> PR2.Item_Label_Line_2;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00004
 PR4.Number_50_USR = 00004;

 QUIT;

 ENDIF;

 //?  5. Item Label Line 3
 CASE;

 // IF PR1.Item Label Line 3 NE PR2.Item Label Line 3
 IF PR1.Item_Label_Line_3 <> PR2.Item_Label_Line_3;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00005
 PR4.Number_50_USR = 00005;

 QUIT;

 ENDIF;

 //?  7. U/M - Primary
 CASE;

 // IF PR1.U/M - Primary NE PR2.U/M - Primary
 IF PR1.UOM_Primary <> PR2.UOM_Primary;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00007
 PR4.Number_50_USR = 00007;

 QUIT;

 ENDIF;

 //? 15. Unit Weight
 CASE;

 // IF PR1.Unit Weight NE PR2.Unit Weight
 IF PR1.Unit_Weight <> PR2.Unit_Weight;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00015
 PR4.Number_50_USR = 00015;

 QUIT;

 ENDIF;

 //? 19. Catch Weight Status
 CASE;

 // IF PR1.Catch Weight Status NE PR2.Catch Weight Status
 IF PR1.Catch_Weight_Status <> PR2.Catch_Weight_Status;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00019
 PR4.Number_50_USR = 00019;

 QUIT;

 ENDIF;

 //? 20. Minimum Weight Per Case
 CASE;

 // IF PR1.Minimum Weight Per Case NE PR2.Minimum Weight Per Case
 IF PR1.Minimum_Weight_Per_Case <> PR2.Minimum_Weight_Per_Case;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00020
 PR4.Number_50_USR = 00020;

 QUIT;

 ENDIF;

 //? 21. Maximum Weight Per Case
 CASE;

 // IF PR1.Maximum Weight Per Case NE PR2.Maximum Weight Per Case
 IF PR1.Maximum_Weight_Per_Case <> PR2.Maximum_Weight_Per_Case;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00021
 PR4.Number_50_USR = 00021;

 QUIT;

 ENDIF;

 //? 22. Number Cases On A Pallet
 CASE;

 // IF PR1.Number Cases On A Pallet NE PR2.Number Cases On A Pallet
 IF PR1.Number_Cases_On_A_Pallet <> PR2.Number_Cases_On_A_Pallet;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00022
 PR4.Number_50_USR = 00022;

 QUIT;

 ENDIF;

 //? 24. Item Structure Class Code
 CASE;

 // IF PR1.Item Structure Class Code NE PR2.Item Structure Class Code
 IF PR1.Item_Structure_Class_Code <> PR2.Item_Structure_Class_Code;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00024
 PR4.Number_50_USR = 00024;

 QUIT;

 ENDIF;

 //? 25. Item Structure Group Code
 CASE;

 // IF PR1.Item Structure Group Code NE PR2.Item Structure Group Code
 IF PR1.Item_Structure_Group_Code <> PR2.Item_Structure_Group_Code;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00025
 PR4.Number_50_USR = 00025;

 QUIT;

 ENDIF;

 //? 26. Item Structure Type Code
 CASE;

 // IF PR1.Item Structure Type Code NE PR2.Item Structure Type Code
 IF PR1.Item_Structure_Type_Code <> PR2.Item_Structure_Type_Code;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00026
 PR4.Number_50_USR = 00026;

 QUIT;

 ENDIF;

 //? 31. Fresh Chilling Time
 CASE;

 // IF PR1.Fresh Chilling Time NE PR2.Fresh Chilling Time
 IF PR1.Fresh_Chilling_Time <> PR2.Fresh_Chilling_Time;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00031
 PR4.Number_50_USR = 00031;

 QUIT;

 ENDIF;

 //? 40. Misc Tare Weight
 CASE;

 // IF PR1.Misc Tare Weight NE PR2.Misc Tare Weight
 IF PR1.Misc_Tare_Weight <> PR2.Misc_Tare_Weight;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00040
 PR4.Number_50_USR = 00040;

 QUIT;

 ENDIF;

 //? 52. Number Cases On A Pallet
 CASE;

 // IF PR1.Number Cases On A Pallet NE PR2.Number Cases On A Pallet
 IF PR1.Number_Cases_On_A_Pallet <> PR2.Number_Cases_On_A_Pallet;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00052
 PR4.Number_50_USR = 00052;

 QUIT;

 ENDIF;

 //? 57. Default Warehouse
 CASE;

 // IF PR1.Default Warehouse NE PR2.Default Warehouse
 IF PR1.Default_Warehouse <> PR2.Default_Warehouse;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00057
 PR4.Number_50_USR = 00057;

 QUIT;

 ENDIF;

 //? 81. Piece Count Item
 CASE;

 // IF PR1.Piece Count Item NE PR2.Piece Count Item
 IF PR1.Piece_Count_Item <> PR2.Piece_Count_Item;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00081
 PR4.Number_50_USR = 00081;

 QUIT;

 ENDIF;

 //? 82. Pieces Per Bag
 CASE;

 // IF PR1.Pieces Per Bag NE PR2.Pieces Per Bag
 IF PR1.Pieces_Per_Bag <> PR2.Pieces_Per_Bag;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00082
 PR4.Number_50_USR = 00082;

 QUIT;

 ENDIF;

 //? 83. Bags Per Unit
 CASE;

 // IF PR1.Bags Per Unit NE PR2.Bags Per Unit
 IF PR1.Bags_Per_Unit <> PR2.Bags_Per_Unit;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00083
 PR4.Number_50_USR = 00083;

 QUIT;

 ENDIF;

 //? 95. Sold 100% Frozen
 CASE;

 // IF PR1.Sold 100% Frozen NE PR2.Sold 100% Frozen
 IF PR1.Sold_100_Percent_Frozen <> PR2.Sold_100_Percent_Frozen;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00095
 PR4.Number_50_USR = 00095;

 QUIT;

 ENDIF;

 //? 99. Record Status
 CASE;

 // IF PR1.Record Status NE PR2.Record Status
 IF PR1.Record_Status <> PR2.Record_Status;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00099
 PR4.Number_50_USR = 00099;

 QUIT;

 ENDIF;

 //?100. Box Id from the Bill of Material
 CASE;

 // IF PR6.Box iD NE PR7.Box iD
 IF PR6.Box_iD <> PR7.Box_iD;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00100
 PR4.Number_50_USR = 00100;

 QUIT;

 ENDIF;

 //?101. Label Type
 CASE;

 // IF PR1.Label Type NE PR2.Label Type
 IF PR1.Label_Type <> PR2.Label_Type;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00101
 PR4.Number_50_USR = 00101;

 QUIT;

 ENDIF;

 //?102. Default Workcenter
 CASE;

 // IF PR1.Default Workcenter NE PR2.Default Workcenter
 IF PR1.Default_Workcenter <> PR2.Default_Workcenter;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00102
 PR4.Number_50_USR = 00102;

 QUIT;

 ENDIF;

 //?103. Use/Sell/Freeze By Days
 CASE;

 // IF PR1.Use/Freeze/Sell By Days NE PR2.Use/Freeze/Sell By Days
 IF PR1.Use_Freeze_Sell_By_Days <> PR2.Use_Freeze_Sell_By_Days;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00103
 PR4.Number_50_USR = 00103;

 QUIT;

 ENDIF;

 ENDIF;

 //?Verify Item Structure fields only
 CASE;

 // IF PR5.Cmp Co/Item Fields Usr is Item Structure Flds
 IF PR5.Cmp_Co_Item_Fields_Usr = 'IST';

 //? 24. Item Structure Class Code
 CASE;

 // IF PR1.Item Structure Class Code NE PR2.Item Structure Class Code
 IF PR1.Item_Structure_Class_Code <> PR2.Item_Structure_Class_Code;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00024
 PR4.Number_50_USR = 00024;

 QUIT;

 ENDIF;

 ENDIF;

 //?Verify Price Audit fields
 CASE;

 // IF PR5.Cmp Co/Item Fields Usr is Price Audit Update
 IF PR5.Cmp_Co_Item_Fields_Usr = 'PAU';

 //? 99. Record Status
 CASE;

 // IF PR1.Record Status NE PR2.Record Status
 IF PR1.Record_Status <> PR2.Record_Status;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00099
 PR4.Number_50_USR = 00099;

 // PR8.USR Formula Meth Type Sts = CND.yes
 PR8.USR_Formula_Meth_Type_Sts = 'Y';

 // PR8.USR Market Meth Type Sts = CND.yes
 PR8.USR_Market_Meth_Type_Sts = 'Y';

 // PR8.USR Manual Meth Type Sts = CND.yes
 PR8.USR_Manual_Meth_Type_Sts = 'Y';

 // PR8.USR Extend Meth Type Sts = CND.yes
 PR8.USR_Extend_Meth_Type_Sts = 'Y';

 QUIT;

 ENDIF;

 //? 14. U/M - Pricing
 CASE;

 // IF PR1.U/M - Pricing NE PR2.U/M - Pricing
 IF PR1.UOM_Pricing <> PR2.UOM_Pricing;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00014
 PR4.Number_50_USR = 00014;

 // PR8.USR Formula Meth Type Sts = CND.yes
 PR8.USR_Formula_Meth_Type_Sts = 'Y';

 // PR8.USR Market Meth Type Sts = CND.yes
 PR8.USR_Market_Meth_Type_Sts = 'Y';

 // PR8.USR Manual Meth Type Sts = CND.yes
 PR8.USR_Manual_Meth_Type_Sts = 'Y';

 QUIT;

 ENDIF;

 //? 38. Commodity Price Group
 CASE;

 // IF PR1.Commodity Price Group NE PR2.Commodity Price Group
 IF PR1.Commodity_Price_Group <> PR2.Commodity_Price_Group;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00038
 PR4.Number_50_USR = 00038;

 // PR8.USR Formula Meth Type Sts = CND.yes
 PR8.USR_Formula_Meth_Type_Sts = 'Y';

 // PR8.USR Market Meth Type Sts = CND.yes
 PR8.USR_Market_Meth_Type_Sts = 'Y';

 QUIT;

 ENDIF;

 //? 53. Market Overage
 CASE;

 // IF PR1.Market Overage NE PR2.Market Overage
 IF PR1.Market_Overage <> PR2.Market_Overage;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00053
 PR4.Number_50_USR = 00053;

 // PR8.USR Market Meth Type Sts = CND.yes
 PR8.USR_Market_Meth_Type_Sts = 'Y';

 QUIT;

 ENDIF;

 //? 27. Default Commod Mark basis
 CASE;

 // IF PR1.Default Commod Mark basis NE PR2.Default Commod Mark basis
 IF PR1.Default_Commod_Mark_basis <> PR2.Default_Commod_Mark_basis;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00027
 PR4.Number_50_USR = 00027;

 // PR8.USR Formula Meth Type Sts = CND.yes
 PR8.USR_Formula_Meth_Type_Sts = 'Y';

 QUIT;

 ENDIF;

 //? 55. Item Pricing Operation
 CASE;

 // IF PR1.Item Pricing Operation NE PR2.Item Pricing Operation
 IF PR1.Item_Pricing_Operation <> PR2.Item_Pricing_Operation;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00055
 PR4.Number_50_USR = 00055;

 // PR8.USR Formula Meth Type Sts = CND.yes
 PR8.USR_Formula_Meth_Type_Sts = 'Y';

 QUIT;

 ENDIF;

 //? 56. Item Pricing Constant
 CASE;

 // IF PR1.Item Pricing Constant NE PR2.Item Pricing Constant
 IF PR1.Item_Pricing_Constant <> PR2.Item_Pricing_Constant;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00056
 PR4.Number_50_USR = 00056;

 // PR8.USR Formula Meth Type Sts = CND.yes
 PR8.USR_Formula_Meth_Type_Sts = 'Y';

 QUIT;

 ENDIF;

 //? 54. Standard Overage/Underage
 CASE;

 // IF PR1.Standard Overage/Underage NE PR2.Standard Overage/Underage
 IF PR1.Standard_Overage_Underage <> PR2.Standard_Overage_Underage;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00054
 PR4.Number_50_USR = 00054;

 // PR8.USR Formula Meth Type Sts = CND.yes
 PR8.USR_Formula_Meth_Type_Sts = 'Y';

 QUIT;

 ENDIF;

 //?100. Box Id from the Bill of Material
 CASE;

 // IF PR6.Box iD NE PR7.Box iD
 IF PR6.Box_iD <> PR7.Box_iD;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00100
 PR4.Number_50_USR = 00100;

 QUIT;

 ENDIF;

 ENDIF;

 //?Verify if BOX ID is changing
 CASE;

 // IF PR5.Cmp Co/Item Fields Usr is BoxId - BOM
 IF PR5.Cmp_Co_Item_Fields_Usr = 'BOX';

 //?100. Box Id from the Bill of Material
 CASE;

 // IF PR6.Box iD NE PR7.Box iD
 IF PR6.Box_iD <> PR7.Box_iD;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00100
 PR4.Number_50_USR = 00100;

 QUIT;

 ENDIF;

 ENDIF;

}


//?Price Audit Update XF
CASE;

// IF LCL.USR Formula Meth Type Sts is yes
IF LCL.USR_Formula_Meth_Type_Sts = 'Y';

// OR LCL.USR Market Meth Type Sts is yes
OR LCL.USR_Market_Meth_Type_Sts = 'Y';

// OR LCL.USR Manual Meth Type Sts is yes
OR LCL.USR_Manual_Meth_Type_Sts = 'Y';

// OR LCL.USR Extend Meth Type Sts is yes
OR LCL.USR_Extend_Meth_Type_Sts = 'Y';

// Call program UPD Price Audit Update XF.
CALL PROGRAM(UPD Price Audit Update XF) ('PDMOXFR');
PARAMETER('CABZREP');
PARAMETER(PR1.Company_Number);
PARAMETER(*ZERO);
PARAMETER(PR1.Item_Code);
PARAMETER(PR1.Default_Commod_Mark_basis);
PARAMETER(PR1.Commodity_Price_Group);
PARAMETER(*ZERO);
PARAMETER(LCL.USR_Formula_Meth_Type_Sts);
PARAMETER(LCL.USR_Market_Meth_Type_Sts);
PARAMETER(LCL.USR_Manual_Meth_Type_Sts);
PARAMETER(LCL.USR_Extend_Meth_Type_Sts);

ENDIF;

//?Compare prior fields if chg occurs then perform the BOXID BOM
//?Handle the box in the bom, if this is not a co-packer nor PS
CASE;

//?Handle the box in the bom, if this is not a co-packer nor PS
// IF PR2.Item Type Code is Not Packaging & Supplies
IF PR2.Item_Type_Code = *BLANK/'FG'/'RM'/'WP';

EXECUTE FUNCTION(Cmp Co Item/Co Item    IF) TYPE(EXCINTFUN)                     AC1703290;
PARAMETER(PR1.Description_Line_One);
PARAMETER(PR1.Description_Line_Two);
PARAMETER(PR1.Item_Label_Line_1);
PARAMETER(PR1.Item_Label_Line_2);
PARAMETER(PR1.Item_Label_Line_3);
PARAMETER(PR1.Item_Label_Line_4);
PARAMETER(PR1.UOM_Primary);
PARAMETER(PR1.Conversion_Factor_1);
PARAMETER(PR1.Operation_Factor_1);
PARAMETER(PR1.UOM_Second);
PARAMETER(PR1.Conversion_Factor_2);
PARAMETER(PR1.Operation_Factor_2);
PARAMETER(PR1.UOM_Third);
PARAMETER(PR1.UOM_Pricing);
PARAMETER(PR1.Unit_Weight);
PARAMETER(PR1.Quality_Level);
PARAMETER(PR1.Item_Level);
PARAMETER(PR1.Production_Date_Control);
PARAMETER(PR1.Catch_Weight_Status);
PARAMETER(PR1.Minimum_Weight_Per_Case);
PARAMETER(PR1.Maximum_Weight_Per_Case);
PARAMETER(PR1.Number_Cases_On_A_Pallet);
PARAMETER(PR1.Vendor_Item_Default);
PARAMETER(PR1.Item_Structure_Class_Code);
PARAMETER(PR1.Item_Structure_Group_Code);
PARAMETER(PR1.Item_Structure_Type_Code);
PARAMETER(PR1.Default_Commod_Mark_basis);
PARAMETER(PR1.Transportation_Temp);
PARAMETER(PR1.Item_Type_Code);
PARAMETER(PR1.Package_Type_Code);
PARAMETER(PR1.Maximum_Audit_Value);
PARAMETER(PR1.Minimum_Audit_Value);
PARAMETER(PR1.Market_Overage);
PARAMETER(PR1.Standard_Overage_Underage);
PARAMETER(PR1.Commodity_Price_Group);
PARAMETER(PR1.Item_Pricing_Operation);
PARAMETER(PR1.Item_Pricing_Constant);
PARAMETER(PR1.Default_Warehouse);
PARAMETER(PR1.Price_Method_Default);
PARAMETER(PR1.Fresh_Chilling_Time);
PARAMETER(PR1.Base_Conv_Loss_Item);
PARAMETER(PR1.Variety_Rendered_Cut);
PARAMETER(PR1.Frozen_Make_to_Order_Sts);
PARAMETER(PR1.Credit_Item_Status);
PARAMETER(PR1.Std_Weight_Head_Var_Ren);
PARAMETER(PR1.Pieces_Per_Head);
PARAMETER(PR1.Department_Code);
PARAMETER(PR1.Group_for_Packaging);
PARAMETER(PR1.Item_Category_Number_1);
PARAMETER(PR1.Made_to_Order_Code);
PARAMETER(PR1.Item_Category_Number_2);
PARAMETER(PR1.Transportation_Equip_Type);
PARAMETER(PR1.Item_Category_Number_3);
PARAMETER(PR1.Item_Category_Code_3);
PARAMETER(PR1.Item_Category_Number_4);
PARAMETER(PR1.GL_Sub_Code);
PARAMETER(PR1.Pallet_Tare_Weight);
PARAMETER(PR1.Misc_Tare_Weight);
PARAMETER(PR1.Production_Lead_Days);
PARAMETER(PR1.Packaging_Code);
PARAMETER(PR1.Item_Market_Code);
PARAMETER(PR1.Use_Freeze_Sell_By_Days);
PARAMETER(PR1.Partial_Item_Code);
PARAMETER(PR1.WIP_Item_Code);
PARAMETER(PR1.WIP_Reject_Code);
PARAMETER(PR1.PM_Line_Number);
PARAMETER(PR1.Seconds_Item);
PARAMETER(PR1.Print_on_Realization_Rpt);
PARAMETER(PR1.Unit_Weight_Change_Sts);
PARAMETER(PR1.Piece_Count_Item);
PARAMETER(PR1.Pieces_Per_Bag);
PARAMETER(PR1.Bags_Per_Unit);
PARAMETER(PR1.Export_Domestic);
PARAMETER(PR1.Print_On_Schedule);
PARAMETER(PR1.Fresh_Inv_Allocation_Seq);
PARAMETER(PR1.Fresh_Sched_As_Ordered);
PARAMETER(PR1.Frozen_Inv_Allocation_Seq);
PARAMETER(PR1.Primal_Group_Code);
PARAMETER(PR1.Item_Target_Price);
PARAMETER(PR1.Minimum_Piece_Weight);
PARAMETER(PR1.Maximum_Piece_Weight);
PARAMETER(PR1.Seaboard_Equivalent_Item);
PARAMETER(PR1.Production_Qty_Per_Shift);
PARAMETER(PR1.Scheduling_Position_Grade);
PARAMETER(PR1.Sold_100_Percent_Frozen);
PARAMETER(PR1.Maximum_Shifts);
PARAMETER(PR1.Value_Added_Sts);
PARAMETER(PR1.Label_Type);
PARAMETER(PR1.Default_Workcenter);
PARAMETER(PR1.Record_Status);
PARAMETER(PR2.Description_Line_One);
PARAMETER(PR2.Description_Line_Two);
PARAMETER(PR2.Item_Label_Line_1);
PARAMETER(PR2.Item_Label_Line_2);
PARAMETER(PR2.Item_Label_Line_3);
PARAMETER(PR2.Item_Label_Line_4);
PARAMETER(PR2.UOM_Primary);
PARAMETER(PR2.Conversion_Factor_1);
PARAMETER(PR2.Operation_Factor_1);
PARAMETER(PR2.UOM_Second);
PARAMETER(PR2.Conversion_Factor_2);
PARAMETER(PR2.Operation_Factor_2);
PARAMETER(PR2.UOM_Third);
PARAMETER(PR2.UOM_Pricing);
PARAMETER(PR2.Unit_Weight);
PARAMETER(PR2.Quality_Level);
PARAMETER(PR2.Item_Level);
PARAMETER(PR2.Production_Date_Control);
PARAMETER(PR2.Catch_Weight_Status);
PARAMETER(PR2.Minimum_Weight_Per_Case);
PARAMETER(PR2.Maximum_Weight_Per_Case);
PARAMETER(PR2.Number_Cases_On_A_Pallet);
PARAMETER(PR2.Vendor_Item_Default);
PARAMETER(PR2.Item_Structure_Class_Code);
PARAMETER(PR2.Item_Structure_Group_Code);
PARAMETER(PR2.Item_Structure_Type_Code);
PARAMETER(PR2.Default_Commod_Mark_basis);
PARAMETER(PR2.Transportation_Temp);
PARAMETER(PR2.Item_Type_Code);
PARAMETER(PR2.Package_Type_Code);
PARAMETER(PR2.Maximum_Audit_Value);
PARAMETER(PR2.Minimum_Audit_Value);
PARAMETER(PR2.Market_Overage);
PARAMETER(PR2.Standard_Overage_Underage);
PARAMETER(PR2.Commodity_Price_Group);
PARAMETER(PR2.Item_Pricing_Operation);
PARAMETER(PR2.Item_Pricing_Constant);
PARAMETER(PR2.Default_Warehouse);
PARAMETER(PR2.Price_Method_Default);
PARAMETER(PR2.Fresh_Chilling_Time);
PARAMETER(PR2.Base_Conv_Loss_Item);
PARAMETER(PR2.Variety_Rendered_Cut);
PARAMETER(PR2.Frozen_Make_to_Order_Sts);
PARAMETER(PR2.Credit_Item_Status);
PARAMETER(PR2.Std_Weight_Head_Var_Ren);
PARAMETER(PR2.Pieces_Per_Head);
PARAMETER(PR2.Department_Code);
PARAMETER(PR2.Group_for_Packaging);
PARAMETER(PR2.Item_Category_Number_1);
PARAMETER(PR2.Made_to_Order_Code);
PARAMETER(PR2.Item_Category_Number_2);
PARAMETER(PR2.Transportation_Equip_Type);
PARAMETER(PR2.Item_Category_Number_3);
PARAMETER(PR2.Item_Category_Code_3);
PARAMETER(PR2.Item_Category_Number_4);
PARAMETER(PR2.GL_Sub_Code);
PARAMETER(PR2.Pallet_Tare_Weight);
PARAMETER(PR2.Misc_Tare_Weight);
PARAMETER(PR2.Production_Lead_Days);
PARAMETER(PR2.Packaging_Code);
PARAMETER(PR2.Item_Market_Code);
PARAMETER(PR1.Use_Freeze_Sell_By_Days);
PARAMETER(PR2.Partial_Item_Code);
PARAMETER(PR2.WIP_Item_Code);
PARAMETER(PR2.WIP_Reject_Code);
PARAMETER(PR2.PM_Line_Number);
PARAMETER(PR2.Seconds_Item);
PARAMETER(PR2.Print_on_Realization_Rpt);
PARAMETER(PR2.Unit_Weight_Change_Sts);
PARAMETER(PR2.Piece_Count_Item);
PARAMETER(PR2.Pieces_Per_Bag);
PARAMETER(PR2.Bags_Per_Unit);
PARAMETER(PR2.Export_Domestic);
PARAMETER(PR2.Print_On_Schedule);
PARAMETER(PR2.Fresh_Inv_Allocation_Seq);
PARAMETER(PR2.Fresh_Sched_As_Ordered);
PARAMETER(PR2.Frozen_Inv_Allocation_Seq);
PARAMETER(PR2.Primal_Group_Code);
PARAMETER(PR2.Item_Target_Price);
PARAMETER(PR2.Minimum_Piece_Weight);
PARAMETER(PR2.Maximum_Piece_Weight);
PARAMETER(PR2.Seaboard_Equivalent_Item);
PARAMETER(PR2.Production_Qty_Per_Shift);
PARAMETER(PR2.Scheduling_Position_Grade);
PARAMETER(PR2.Sold_100_Percent_Frozen);
PARAMETER(PR2.Maximum_Shifts);
PARAMETER(PR2.Value_Added_Sts);
PARAMETER(PR1.Label_Type);
PARAMETER(PR1.Default_Workcenter);
PARAMETER(PR2.Record_Status);
PARAMETER(LCL.Change_Flag_USR);
PARAMETER(LCL.Number_50_USR);
PARAMETER('BOX');
PARAMETER(PR3.Box_iD);
PARAMETER(PR4.Box_iD);
PARAMETER(LCL.USR_Formula_Meth_Type_Sts);
PARAMETER(LCL.USR_Market_Meth_Type_Sts);
PARAMETER(LCL.USR_Manual_Meth_Type_Sts);
PARAMETER(LCL.USR_Extend_Meth_Type_Sts);
{
 //?Execute internal function

 // PR3.Change Flag USR = CND.Blank
 PR3.Change_Flag_USR = *BLANK;

 // PR4.Number 5,0            USR = CON.*ZERO
 PR4.Number_50_USR = 00000;

 // PR8.USR Formula Meth Type Sts = CND.no
 PR8.USR_Formula_Meth_Type_Sts = 'N';

 // PR8.USR Market Meth Type Sts = CND.no
 PR8.USR_Market_Meth_Type_Sts = 'N';

 // PR8.USR Manual Meth Type Sts = CND.no
 PR8.USR_Manual_Meth_Type_Sts = 'N';

 // PR8.USR Extend Meth Type Sts = CND.no
 PR8.USR_Extend_Meth_Type_Sts = 'N';

 //?Verify plant floor fields only
 CASE;

 // IF PR5.Cmp Co/Item Fields Usr is Plant Floor
 IF PR5.Cmp_Co_Item_Fields_Usr = 'PLF';

 //?  1. Description Line One
 CASE;

 // IF PR1.Description Line One NE PR2.Description Line One
 IF PR1.Description_Line_One <> PR2.Description_Line_One;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00001
 PR4.Number_50_USR = 00001;

 QUIT;

 ENDIF;

 //?  2. Description Line Two
 CASE;

 // IF PR1.Description Line Two NE PR2.Description Line Two
 IF PR1.Description_Line_Two <> PR2.Description_Line_Two;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00002
 PR4.Number_50_USR = 00002;

 QUIT;

 ENDIF;

 //?  3. Item Label Line 1
 CASE;

 // IF PR1.Item Label Line 1 NE PR2.Item Label Line 1
 IF PR1.Item_Label_Line_1 <> PR2.Item_Label_Line_1;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00003
 PR4.Number_50_USR = 00003;

 QUIT;

 ENDIF;

 //?  4. Item Label Line 2
 CASE;

 // IF PR1.Item Label Line 2 NE PR2.Item Label Line 2
 IF PR1.Item_Label_Line_2 <> PR2.Item_Label_Line_2;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00004
 PR4.Number_50_USR = 00004;

 QUIT;

 ENDIF;

 //?  5. Item Label Line 3
 CASE;

 // IF PR1.Item Label Line 3 NE PR2.Item Label Line 3
 IF PR1.Item_Label_Line_3 <> PR2.Item_Label_Line_3;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00005
 PR4.Number_50_USR = 00005;

 QUIT;

 ENDIF;

 //?  7. U/M - Primary
 CASE;

 // IF PR1.U/M - Primary NE PR2.U/M - Primary
 IF PR1.UOM_Primary <> PR2.UOM_Primary;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00007
 PR4.Number_50_USR = 00007;

 QUIT;

 ENDIF;

 //? 15. Unit Weight
 CASE;

 // IF PR1.Unit Weight NE PR2.Unit Weight
 IF PR1.Unit_Weight <> PR2.Unit_Weight;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00015
 PR4.Number_50_USR = 00015;

 QUIT;

 ENDIF;

 //? 19. Catch Weight Status
 CASE;

 // IF PR1.Catch Weight Status NE PR2.Catch Weight Status
 IF PR1.Catch_Weight_Status <> PR2.Catch_Weight_Status;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00019
 PR4.Number_50_USR = 00019;

 QUIT;

 ENDIF;

 //? 20. Minimum Weight Per Case
 CASE;

 // IF PR1.Minimum Weight Per Case NE PR2.Minimum Weight Per Case
 IF PR1.Minimum_Weight_Per_Case <> PR2.Minimum_Weight_Per_Case;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00020
 PR4.Number_50_USR = 00020;

 QUIT;

 ENDIF;

 //? 21. Maximum Weight Per Case
 CASE;

 // IF PR1.Maximum Weight Per Case NE PR2.Maximum Weight Per Case
 IF PR1.Maximum_Weight_Per_Case <> PR2.Maximum_Weight_Per_Case;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00021
 PR4.Number_50_USR = 00021;

 QUIT;

 ENDIF;

 //? 22. Number Cases On A Pallet
 CASE;

 // IF PR1.Number Cases On A Pallet NE PR2.Number Cases On A Pallet
 IF PR1.Number_Cases_On_A_Pallet <> PR2.Number_Cases_On_A_Pallet;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00022
 PR4.Number_50_USR = 00022;

 QUIT;

 ENDIF;

 //? 24. Item Structure Class Code
 CASE;

 // IF PR1.Item Structure Class Code NE PR2.Item Structure Class Code
 IF PR1.Item_Structure_Class_Code <> PR2.Item_Structure_Class_Code;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00024
 PR4.Number_50_USR = 00024;

 QUIT;

 ENDIF;

 //? 25. Item Structure Group Code
 CASE;

 // IF PR1.Item Structure Group Code NE PR2.Item Structure Group Code
 IF PR1.Item_Structure_Group_Code <> PR2.Item_Structure_Group_Code;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00025
 PR4.Number_50_USR = 00025;

 QUIT;

 ENDIF;

 //? 26. Item Structure Type Code
 CASE;

 // IF PR1.Item Structure Type Code NE PR2.Item Structure Type Code
 IF PR1.Item_Structure_Type_Code <> PR2.Item_Structure_Type_Code;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00026
 PR4.Number_50_USR = 00026;

 QUIT;

 ENDIF;

 //? 31. Fresh Chilling Time
 CASE;

 // IF PR1.Fresh Chilling Time NE PR2.Fresh Chilling Time
 IF PR1.Fresh_Chilling_Time <> PR2.Fresh_Chilling_Time;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00031
 PR4.Number_50_USR = 00031;

 QUIT;

 ENDIF;

 //? 40. Misc Tare Weight
 CASE;

 // IF PR1.Misc Tare Weight NE PR2.Misc Tare Weight
 IF PR1.Misc_Tare_Weight <> PR2.Misc_Tare_Weight;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00040
 PR4.Number_50_USR = 00040;

 QUIT;

 ENDIF;

 //? 52. Number Cases On A Pallet
 CASE;

 // IF PR1.Number Cases On A Pallet NE PR2.Number Cases On A Pallet
 IF PR1.Number_Cases_On_A_Pallet <> PR2.Number_Cases_On_A_Pallet;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00052
 PR4.Number_50_USR = 00052;

 QUIT;

 ENDIF;

 //? 57. Default Warehouse
 CASE;

 // IF PR1.Default Warehouse NE PR2.Default Warehouse
 IF PR1.Default_Warehouse <> PR2.Default_Warehouse;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00057
 PR4.Number_50_USR = 00057;

 QUIT;

 ENDIF;

 //? 81. Piece Count Item
 CASE;

 // IF PR1.Piece Count Item NE PR2.Piece Count Item
 IF PR1.Piece_Count_Item <> PR2.Piece_Count_Item;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00081
 PR4.Number_50_USR = 00081;

 QUIT;

 ENDIF;

 //? 82. Pieces Per Bag
 CASE;

 // IF PR1.Pieces Per Bag NE PR2.Pieces Per Bag
 IF PR1.Pieces_Per_Bag <> PR2.Pieces_Per_Bag;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00082
 PR4.Number_50_USR = 00082;

 QUIT;

 ENDIF;

 //? 83. Bags Per Unit
 CASE;

 // IF PR1.Bags Per Unit NE PR2.Bags Per Unit
 IF PR1.Bags_Per_Unit <> PR2.Bags_Per_Unit;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00083
 PR4.Number_50_USR = 00083;

 QUIT;

 ENDIF;

 //? 95. Sold 100% Frozen
 CASE;

 // IF PR1.Sold 100% Frozen NE PR2.Sold 100% Frozen
 IF PR1.Sold_100_Percent_Frozen <> PR2.Sold_100_Percent_Frozen;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00095
 PR4.Number_50_USR = 00095;

 QUIT;

 ENDIF;

 //? 99. Record Status
 CASE;

 // IF PR1.Record Status NE PR2.Record Status
 IF PR1.Record_Status <> PR2.Record_Status;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00099
 PR4.Number_50_USR = 00099;

 QUIT;

 ENDIF;

 //?100. Box Id from the Bill of Material
 CASE;

 // IF PR6.Box iD NE PR7.Box iD
 IF PR6.Box_iD <> PR7.Box_iD;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00100
 PR4.Number_50_USR = 00100;

 QUIT;

 ENDIF;

 //?101. Label Type
 CASE;

 // IF PR1.Label Type NE PR2.Label Type
 IF PR1.Label_Type <> PR2.Label_Type;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00101
 PR4.Number_50_USR = 00101;

 QUIT;

 ENDIF;

 //?102. Default Workcenter
 CASE;

 // IF PR1.Default Workcenter NE PR2.Default Workcenter
 IF PR1.Default_Workcenter <> PR2.Default_Workcenter;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00102
 PR4.Number_50_USR = 00102;

 QUIT;

 ENDIF;

 //?103. Use/Sell/Freeze By Days
 CASE;

 // IF PR1.Use/Freeze/Sell By Days NE PR2.Use/Freeze/Sell By Days
 IF PR1.Use_Freeze_Sell_By_Days <> PR2.Use_Freeze_Sell_By_Days;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00103
 PR4.Number_50_USR = 00103;

 QUIT;

 ENDIF;

 ENDIF;

 //?Verify Item Structure fields only
 CASE;

 // IF PR5.Cmp Co/Item Fields Usr is Item Structure Flds
 IF PR5.Cmp_Co_Item_Fields_Usr = 'IST';

 //? 24. Item Structure Class Code
 CASE;

 // IF PR1.Item Structure Class Code NE PR2.Item Structure Class Code
 IF PR1.Item_Structure_Class_Code <> PR2.Item_Structure_Class_Code;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00024
 PR4.Number_50_USR = 00024;

 QUIT;

 ENDIF;

 ENDIF;

 //?Verify Price Audit fields
 CASE;

 // IF PR5.Cmp Co/Item Fields Usr is Price Audit Update
 IF PR5.Cmp_Co_Item_Fields_Usr = 'PAU';

 //? 99. Record Status
 CASE;

 // IF PR1.Record Status NE PR2.Record Status
 IF PR1.Record_Status <> PR2.Record_Status;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00099
 PR4.Number_50_USR = 00099;

 // PR8.USR Formula Meth Type Sts = CND.yes
 PR8.USR_Formula_Meth_Type_Sts = 'Y';

 // PR8.USR Market Meth Type Sts = CND.yes
 PR8.USR_Market_Meth_Type_Sts = 'Y';

 // PR8.USR Manual Meth Type Sts = CND.yes
 PR8.USR_Manual_Meth_Type_Sts = 'Y';

 // PR8.USR Extend Meth Type Sts = CND.yes
 PR8.USR_Extend_Meth_Type_Sts = 'Y';

 QUIT;

 ENDIF;

 //? 14. U/M - Pricing
 CASE;

 // IF PR1.U/M - Pricing NE PR2.U/M - Pricing
 IF PR1.UOM_Pricing <> PR2.UOM_Pricing;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00014
 PR4.Number_50_USR = 00014;

 // PR8.USR Formula Meth Type Sts = CND.yes
 PR8.USR_Formula_Meth_Type_Sts = 'Y';

 // PR8.USR Market Meth Type Sts = CND.yes
 PR8.USR_Market_Meth_Type_Sts = 'Y';

 // PR8.USR Manual Meth Type Sts = CND.yes
 PR8.USR_Manual_Meth_Type_Sts = 'Y';

 QUIT;

 ENDIF;

 //? 38. Commodity Price Group
 CASE;

 // IF PR1.Commodity Price Group NE PR2.Commodity Price Group
 IF PR1.Commodity_Price_Group <> PR2.Commodity_Price_Group;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00038
 PR4.Number_50_USR = 00038;

 // PR8.USR Formula Meth Type Sts = CND.yes
 PR8.USR_Formula_Meth_Type_Sts = 'Y';

 // PR8.USR Market Meth Type Sts = CND.yes
 PR8.USR_Market_Meth_Type_Sts = 'Y';

 QUIT;

 ENDIF;

 //? 53. Market Overage
 CASE;

 // IF PR1.Market Overage NE PR2.Market Overage
 IF PR1.Market_Overage <> PR2.Market_Overage;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00053
 PR4.Number_50_USR = 00053;

 // PR8.USR Market Meth Type Sts = CND.yes
 PR8.USR_Market_Meth_Type_Sts = 'Y';

 QUIT;

 ENDIF;

 //? 27. Default Commod Mark basis
 CASE;

 // IF PR1.Default Commod Mark basis NE PR2.Default Commod Mark basis
 IF PR1.Default_Commod_Mark_basis <> PR2.Default_Commod_Mark_basis;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00027
 PR4.Number_50_USR = 00027;

 // PR8.USR Formula Meth Type Sts = CND.yes
 PR8.USR_Formula_Meth_Type_Sts = 'Y';

 QUIT;

 ENDIF;

 //? 55. Item Pricing Operation
 CASE;

 // IF PR1.Item Pricing Operation NE PR2.Item Pricing Operation
 IF PR1.Item_Pricing_Operation <> PR2.Item_Pricing_Operation;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00055
 PR4.Number_50_USR = 00055;

 // PR8.USR Formula Meth Type Sts = CND.yes
 PR8.USR_Formula_Meth_Type_Sts = 'Y';

 QUIT;

 ENDIF;

 //? 56. Item Pricing Constant
 CASE;

 // IF PR1.Item Pricing Constant NE PR2.Item Pricing Constant
 IF PR1.Item_Pricing_Constant <> PR2.Item_Pricing_Constant;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00056
 PR4.Number_50_USR = 00056;

 // PR8.USR Formula Meth Type Sts = CND.yes
 PR8.USR_Formula_Meth_Type_Sts = 'Y';

 QUIT;

 ENDIF;

 //? 54. Standard Overage/Underage
 CASE;

 // IF PR1.Standard Overage/Underage NE PR2.Standard Overage/Underage
 IF PR1.Standard_Overage_Underage <> PR2.Standard_Overage_Underage;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00054
 PR4.Number_50_USR = 00054;

 // PR8.USR Formula Meth Type Sts = CND.yes
 PR8.USR_Formula_Meth_Type_Sts = 'Y';

 QUIT;

 ENDIF;

 //?100. Box Id from the Bill of Material
 CASE;

 // IF PR6.Box iD NE PR7.Box iD
 IF PR6.Box_iD <> PR7.Box_iD;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00100
 PR4.Number_50_USR = 00100;

 QUIT;

 ENDIF;

 ENDIF;

 //?Verify if BOX ID is changing
 CASE;

 // IF PR5.Cmp Co/Item Fields Usr is BoxId - BOM
 IF PR5.Cmp_Co_Item_Fields_Usr = 'BOX';

 //?100. Box Id from the Bill of Material
 CASE;

 // IF PR6.Box iD NE PR7.Box iD
 IF PR6.Box_iD <> PR7.Box_iD;

 // PR3.Change Flag USR = CND.Yes
 PR3.Change_Flag_USR = 'Y';

 // PR4.Number 5,0            USR = CON.00100
 PR4.Number_50_USR = 00100;

 QUIT;

 ENDIF;

 ENDIF;

}


//?Change to box id, so BOM will also be maintained.
CASE;

// IF LCL.Change Flag USR is Yes
IF LCL.Change_Flag_USR = 'Y';

//?Verify that the box id before is not blank
//?if there was a box before this change then delete the box
//?Delete old box
CASE;

// IF PR4.Box iD is Entered
IF PR4.Box_iD <> *ZERO;

EXECUTE FUNCTION(DLT Item BOM           DL) TYPE(DLTOBJ) FILE(PDIOREP)          AC1261543;
PARAMETER(PR1.Company_Number);
PARAMETER(PR1.Item_Code);
PARAMETER(PR4.Box_iD);

ENDIF;

//?Add new box
CASE;

// IF PR3.Box iD is Entered
IF PR3.Box_iD <> *ZERO;

EXECUTE FUNCTION(CRT Item BOM           CR) TYPE(CRTOBJ) FILE(PDIOREP)          AC1261541;
PARAMETER(PR1.Company_Number);
PARAMETER(PR1.Item_Code);
PARAMETER(PR3.Box_iD);
PARAMETER('S');
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(1);
PARAMETER('EA');
PARAMETER('N');
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.BOM_Multi_RM_Option);
PARAMETER(LCL.BOM_Group_Prod_Yield);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(PR1.Record_Status);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

ENDIF;

ENDIF;

//?SEND: Plant Floor System
//?Change AS Product code if change status is yes = Accu-Sort
CASE;

// IF LCL.Change Flag USR is Yes
IF LCL.Change_Flag_USR = 'Y';

//?If Item status is not Active then send Accusort Delete Code
CASE;

// IF PR1.Record Status is Active
IF PR1.Record_Status = 'A';

// LCL.AS Add/Change/Delete = CND.Add
LCL.AS_Add_Change_Delete = 'A';

//?If Item status is not Active then send Accusort Delete Code
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.AS Add/Change/Delete = CND.Delete
LCL.AS_Add_Change_Delete = 'D';

ENDIF;

// Call program PFS One Prod/Box Rec  XF.
CALL PROGRAM(PFS One Prod/Box Rec  XF) ('PDK1XFR');
PARAMETER(PR1.Company_Number);
PARAMETER(PR1.Item_Code);
PARAMETER(PR1.Description_Line_One);
PARAMETER(PR1.Item_Label_Line_1);
PARAMETER(PR1.Item_Label_Line_2);
PARAMETER(PR1.Item_Label_Line_3);
PARAMETER(PR1.Unit_Weight);
PARAMETER(PR1.Catch_Weight_Status);
PARAMETER(PR1.Minimum_Weight_Per_Case);
PARAMETER(PR1.Maximum_Weight_Per_Case);
PARAMETER(PR1.Number_Cases_On_A_Pallet);
PARAMETER(PR1.Item_Type_Code);
PARAMETER(PR1.Package_Type_Code);
PARAMETER(PR1.Default_Warehouse);
PARAMETER(PR1.Fresh_Chilling_Time);
PARAMETER(PR1.Misc_Tare_Weight);
PARAMETER(LCL.AS_Add_Change_Delete);

ENDIF;

