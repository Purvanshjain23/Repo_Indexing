// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKL8E1R
// ?Date: 14.08.2025 Time: 02:49:57
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);

CASE;

// IF PAR.TW Sequence number EQ WRK.Zero USR
IF PAR.TW_Sequence_number = WRK.Zero_USR;

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Program_mode = 'ADD';

// IF *OTHERWISE
IF *OTHERWISE;

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Program_mode = 'CHG';

ENDIF;

//?USER: Initialize key screen

EXECUTE FUNCTION(Rtv Last Seq Nbr      RT) TYPE(RTVOBJ) FILE(PKB3CPP)           AB1128234;
PARAMETER(KEY.BOH_Company_Number);
PARAMETER(KEY.BOH_Buy_Order_Number);
PARAMETER(KEY.BOL_Load_Number);
PARAMETER(KEY.TH_Tattoo_Number);
PARAMETER(KEY.TH_Kill_Date);
PARAMETER(KEY.TW_Sequence_number);

// KEY.TW Sequence number = KEY.TW Sequence number + CON.1
KEY.TW_Sequence_number = KEY.TW_Sequence_number + 1;

//?USER: Initialize detail screen (new record)

// *MO.VE             1183529*Bu = ilt. in functions
DTL.Pen_Company_Number = DTL.BOH_Company_Number;

// *MO.VE             1183529*Bu = ilt. in functions
WRK.SF_PC_WIP_Flag = 0;

EXECUTE FUNCTION(Rtv Hog Class Desc    RT) TYPE(RTVOBJ) FILE(PKA8REP)           AB1127790;
PARAMETER(DTL.HC_Class_Code);
PARAMETER(DTL.HC_Description);

EXECUTE FUNCTION(Rtv Hog Defect Desc   RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1127787;
PARAMETER(DTL.DF_Defect_Code);
PARAMETER(DTL.DF_Description);

//?USER: Initialize detail screen (existing record)

EXECUTE FUNCTION(RTV SF WIP Flag       RT) TYPE(RTVOBJ) FILE(PKCOCPP)           AB1134207;
PARAMETER(1);
PARAMETER(WRK.SF_Cancel_Get_Weight_Flag);
PARAMETER(WRK.SF_PC_WIP_Flag);

CASE;

// IF WRK.SF Cancel Get Weight Flag is Status is on
IF WRK.SF_Cancel_Get_Weight_Flag = '1';

// *MO.VE             1183529*Bu = ilt. in functions
DTL.@Status_Yes_No = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// *MO.VE             1183529*Bu = ilt. in functions
DTL.@Status_Yes_No = 'N';

ENDIF;

EXECUTE FUNCTION(Rtv Hog Class Desc    RT) TYPE(RTVOBJ) FILE(PKA8REP)           AB1127790;
PARAMETER(DTL.HC_Class_Code);
PARAMETER(DTL.HC_Description);

EXECUTE FUNCTION(Rtv Hog Defect Desc   RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1127787;
PARAMETER(DTL.DF_Defect_Code);
PARAMETER(DTL.DF_Description);

//?USER: Validate detail screen fields

EXECUTE FUNCTION(Rtv Hog Class         RT) TYPE(RTVOBJ) FILE(PKA8REP)           AB1127629;
PARAMETER(DTL.HC_Class_Code);
PARAMETER(DTL.HC_Description);
PARAMETER(WRK.HC_Defect_Required);
PARAMETER(WRK.HC_Price_Required);
PARAMETER(WRK.HC_Resolution);
PARAMETER(WRK.HC_Qualification);
PARAMETER(WRK.HC_Class_Type);

EXECUTE FUNCTION(Rtv Hog Defect Desc   RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1127787;
PARAMETER(DTL.DF_Defect_Code);
PARAMETER(DTL.DF_Description);

CASE;

// IF DTL.*CMD key is WW Pen Availability
IF DTL.*CMD_key = '16';

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Defer_confirm = 'Y';

// Call program WW Pen Availability   DF.
CALL PROGRAM(WW Pen Availability   DF) ('PKGGDFR');

ENDIF;

EXECUTE FUNCTION(Rtv Val Pen,Type      RT) TYPE(RTVOBJ) FILE(PKA3REP)           AB1170306;
PARAMETER(DTL.Pen_Company_Number);
PARAMETER(DTL.Pen_Number);
PARAMETER(WRK.Pen_Type);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Pen &1 must have an Open status.'
ERROR(PRK0361);
MSGPARM(DTL.Pen_Number);

ENDIF;

CASE;

// IF WRK.HC Class Type NE WRK.Pen Type
IF WRK.HC_Class_Type <> WRK.Pen_Type;

// Send error message - 'Pen &1 type &3 not the same as the tattoo class type &2.'
ERROR(PRK0606);
MSGPARM(DTL.Pen_Number);
MSGPARM(WRK.HC_Class_Type);
MSGPARM(WRK.Pen_Type);

ENDIF;

CASE;

// IF DTL.@Status (Yes/No) is Yes
IF DTL.@Status_Yes_No = 'Y';

// *MO.VE             1183529*Bu = ilt. in functions
WRK.SF_Cancel_Get_Weight_Flag = 1;

// IF *OTHERWISE
IF *OTHERWISE;

// *MO.VE             1183529*Bu = ilt. in functions
WRK.SF_Cancel_Get_Weight_Flag = 0;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Tattoo Wt,Flags   IF) TYPE(EXCINTFUN) FILE(PKCNCPP)        AB1134214;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(DTL.TW_Sequence_number);
PARAMETER(DTL.TW_Head_Count);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
PARAMETER(DTL.Pen_Company_Number);
PARAMETER(DTL.Pen_Number);
PARAMETER(DTL.HC_Class_Code);
PARAMETER(DTL.DF_Defect_Code);

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Tattoo Weight     CH) TYPE(CHGOBJ) FILE(PKCNCPP)           AB1127973;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(DTL.TW_Sequence_number);
PARAMETER(DTL.TW_Head_Count);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
PARAMETER(DTL.Pen_Company_Number);
PARAMETER(DTL.Pen_Number);
PARAMETER(DTL.HC_Class_Code);
PARAMETER(DTL.DF_Defect_Code);

//?USER: Process command keys

EXECUTE FUNCTION(Rtv/Chg Cancel Flag   RT) TYPE(RTVOBJ) FILE(PKCOCPP)           AB1136939;
PARAMETER(1);
PARAMETER(WRK.SF_Cancel_Get_Weight_Flag);

//?Simulate Weighing in Process     (For Test until PC comm. done)
CASE;

// IF DTL.*CMD key is CF23
IF DTL.*CMD_key = '23';

// WRK.SF PC WIP Flag = CND.Status is on
WRK.SF_PC_WIP_Flag = 1;

// WRK.SF New Tattoo Group Flag = CND.Status is off
WRK.SF_New_Tattoo_Group_Flag = 0;

// WRK.SF Cancel Get Weight Flag = CND.Status is off
WRK.SF_Cancel_Get_Weight_Flag = 0;

EXECUTE FUNCTION(Rtv/Chg Scale Flags   RT) TYPE(RTVOBJ) FILE(PKCOCPP)           AB1136430;
PARAMETER(1);
PARAMETER(WRK.SF_New_Tattoo_Group_Flag);
PARAMETER(WRK.SF_Cancel_Get_Weight_Flag);
PARAMETER(WRK.SF_PC_WIP_Flag);

ENDIF;

//?Simulate Weighing Complete       (For Test until PC comm. done.)
CASE;

// IF DTL.*CMD key is CF24
IF DTL.*CMD_key = '24';

// WRK.SF PC WIP Flag = CND.Status is off
WRK.SF_PC_WIP_Flag = 0;

// WRK.SF New Tattoo Group Flag = CND.Status is off
WRK.SF_New_Tattoo_Group_Flag = 0;

// WRK.SF Cancel Get Weight Flag = CND.Status is off
WRK.SF_Cancel_Get_Weight_Flag = 0;

EXECUTE FUNCTION(Rtv/Chg Scale Flags   RT) TYPE(RTVOBJ) FILE(PKCOCPP)           AB1136430;
PARAMETER(1);
PARAMETER(WRK.SF_New_Tattoo_Group_Flag);
PARAMETER(WRK.SF_Cancel_Get_Weight_Flag);
PARAMETER(WRK.SF_PC_WIP_Flag);

EXECUTE FUNCTION(Rtv Last Seq Nbr      RT) TYPE(RTVOBJ) FILE(PKB3CPP)           AB1128234;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(WRK.TST_Sequence_Number);

// WRK.TST Sequence Number = WRK.TST Sequence Number + CON.1
WRK.TST_Sequence_Number = WRK.TST_Sequence_Number + 1;

// WRK.TST Wgt = DTL.TW Head Count * CON.250 *
WRK.TST_Wgt = DTL.TW_Head_Count * 250;

EXECUTE FUNCTION(Crt Tattoo Scale Tkt  CR) TYPE(CRTOBJ) FILE(PKB3CPP)           AB1113769;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(WRK.TST_Sequence_Number);
PARAMETER(DTL.TW_Head_Count);
PARAMETER(WRK.TST_Wgt);
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
PARAMETER(*MISSING);
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
PARAMETER('P');
PARAMETER(DTL.Pen_Company_Number);
PARAMETER(DTL.Pen_Number);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);

// PAR.Simulate Weight Cmplt Usr = CND.Simulate Weight Complete
PAR.Simulate_Weight_Cmplt_Usr = 'Y';

ENDIF;

