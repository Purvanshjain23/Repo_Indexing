// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPBLDFR
// ?Date: 14.08.2025 Time: 03:39:51
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Printer Device = CND.Not entered
PAR.PRT_Printer_Device = *BLANK;

//?USER: Initialize subfile record from DBF record

EXECUTE FUNCTION(RTV Accrual Descript   RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1285204;
PARAMETER(RCD.Accrual_Code);
PARAMETER(RCD.Accrual_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Process subfile control (Pre-confirm)

//?F21=Print Broker performance
CASE;

// IF CTL.*CMD key is *Print List
IF CTL.*CMD_key = '21';

// Call program PMT Broker Perf Rpt    PV.
CALL PROGRAM(PMT Broker Perf Rpt    PV) ('PPBGPVR');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?3=Calc commission
CASE;

// IF RCD.*SFLSEL is *Copy request
IF RCD.*SFLSEL = '3'/'3';

EXECUTE FUNCTION(RTV Default Co No App IF) TYPE(EXCINTFUN)                      AC1628378;
PARAMETER(LCL.Company_Number);
{
 //?Execute internal function

 EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
 PARAMETER(JOB.*USER);
 PARAMETER(NLL.Allow_Multi_Company);
 PARAMETER(NLL.Default_Printer);
 PARAMETER(NLL.Salesperson_Code);
 PARAMETER(LCL.Company_Number);
 PARAMETER(PAR.User_Code_Model);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Company Number is Equal to zero
 IF LCL.Company_Number = *ZERO;

 CASE;

 // IF PAR.User Code Model is equal to blank
 IF PAR.User_Code_Model = *BLANK;

 EXECUTE FUNCTION(RTV First Default Co  RT) TYPE(RTVOBJ) FILE(CADTREP)           AC1628379;
 PARAMETER(JOB.*USER);
 PARAMETER(PAR.Company_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV First Default Co  RT) TYPE(RTVOBJ) FILE(CADTREP)           AC1628379;
 PARAMETER(PAR.User_Code_Model);
 PARAMETER(PAR.Company_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Company Number = LCL.Company Number
 PAR.Company_Number = LCL.Company_Number;

 ENDIF;

}


// Call program Zzz Input Cal Per/Mo   Pv.
CALL PROGRAM(Zzz Input Cal Per/Mo   Pv) ('PPBMPVR');
PARAMETER(LCL.Company_Number);
PARAMETER(RCD.Comm_Threshold_Period);
PARAMETER(LCL.Period_Beginning_Date);
PARAMETER(LCL.Period_Ending_Date);
PARAMETER(LCL.Accounting_Period);
PARAMETER(LCL.Accounting_Year);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Tot Acc p/Per ALL RT) TYPE(RTVOBJ) FILE(OMHRCPP)           AC1710804;
PARAMETER(RCD.Accrual_Code);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(LCL.Period_Beginning_Date);
PARAMETER(LCL.Period_Beginning_Date);
PARAMETER(LCL.Period_Ending_Date);
PARAMETER(LCL.Item_Accrual_Amt);
PARAMETER(LCL.Extended_Amount);
{
 //?USER: Initialize routine

 // PAR.Item Accrual Amt = CON.*ZERO
 PAR.Item_Accrual_Amt = *ZERO;

 // PAR.Extended Amount = CON.*ZERO
 PAR.Extended_Amount = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.SDA Actual Ship Date GE PAR.Period Beginning Date
 IF DB1.SDA_Actual_Ship_Date >= PAR.Period_Beginning_Date;

 // AND DB1.SDA Actual Ship Date LE PAR.Period Ending Date
 AND DB1.SDA_Actual_Ship_Date <= PAR.Period_Ending_Date;

 // PAR.Item Accrual Amt = PAR.Item Accrual Amt + DB1.Item Accrual Amt
 PAR.Item_Accrual_Amt = PAR.Item_Accrual_Amt + DB1.Item_Accrual_Amt;

 // PAR.Extended Amount = PAR.Extended Amount + DB1.Extended Amount
 PAR.Extended_Amount = PAR.Extended_Amount + DB1.Extended_Amount;

 // IF *OTHERWISE
 IF *OTHERWISE;

 QUIT;

 ENDIF;

}


//?Ext Amt = 0 if EOP was already run.
CASE;

// IF LCL.Extended Amount is not equal to zeros
IF LCL.Extended_Amount <> *ZERO;

// AND LCL.Item Accrual Amt is Not Zero
AND LCL.Item_Accrual_Amt <> *ZERO;

//?Min Amt met, no adjustment needed
CASE;

// IF LCL.Item Accrual Amt GE RCD.Comm Min Amt /Period
IF LCL.Item_Accrual_Amt >= RCD.Comm_Min_Amt_Period;

EXECUTE FUNCTION(Rtv EOP Upd Retro ALL RT) TYPE(RTVOBJ) FILE(OMHRCPP)           AC1710808;
PARAMETER(RCD.Accrual_Code);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(LCL.Period_Beginning_Date);
PARAMETER(LCL.Period_Beginning_Date);
PARAMETER(LCL.Period_Ending_Date);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.SDA Actual Ship Date GE PAR.Period Beginning Date
 IF DB1.SDA_Actual_Ship_Date >= PAR.Period_Beginning_Date;

 // AND DB1.SDA Actual Ship Date LE PAR.Period Ending Date
 AND DB1.SDA_Actual_Ship_Date <= PAR.Period_Ending_Date;

 EXECUTE FUNCTION(Chg Extended Amt      CH) TYPE(CHGOBJ) FILE(OMHRCPP)           AC1679690;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Sequence_Number);
 PARAMETER(DB1.Extended_Amount);
 PARAMETER('Y');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

}


// Send information message - 'Minimum commission met for Cust &1 &2 &3 . No adjustment needed.'
MESSAGE(USR3327 *INFO);
MSGPARM(RCD.Ship_To_Customer);
MSGPARM(LCL.Accounting_Period);
MSGPARM(LCL.Accounting_Year);

//?Min Amt met, no adjustment needed
// IF *OTHERWISE
IF *OTHERWISE;

//?Prompt for update and print
// Call program Zzz Broker Perf/EOP   PV.
CALL PROGRAM(Zzz Broker Perf/EOP   PV) ('PPBNPVR');
PARAMETER(LCL.Item_Accrual_Amt);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Accrual_Code);
PARAMETER(LCL.Period_Beginning_Date);
PARAMETER(LCL.Period_Ending_Date);

ENDIF;

//?Ext Amt = 0 if EOP was already run.
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF LCL.Item Accrual Amt is Zero
IF LCL.Item_Accrual_Amt = *ZERO;

// Send error message - 'Commission is .00 for &1 &2 &3'
ERROR(USR3329);
MSGPARM(LCL.Accounting_Period);
MSGPARM(LCL.Accounting_Year);
MSGPARM(RCD.Ship_To_Customer);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'End of Period already processed for &1 &2 &3'
ERROR(USR3330);
MSGPARM(RCD.Ship_To_Customer);
MSGPARM(LCL.Accounting_Period);
MSGPARM(LCL.Accounting_Year);

ENDIF;

ENDIF;

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

