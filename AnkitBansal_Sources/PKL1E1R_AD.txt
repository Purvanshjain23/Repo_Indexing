// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKL1E1R
// ?Date: 14.08.2025 Time: 02:49:56
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?H16853 ISE 11/02/20 - Increased the Buy Order Number field
//?  length from 5 to 7.
ENDDO;

EXECUTE FUNCTION(Rtv Validation Rules  RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126427;
PARAMETER(WRK.Carcass_Dbw_Min);
PARAMETER(WRK.Carcass_Dbw_Max);
PARAMETER(WRK.Carcass_Lgt_Min);
PARAMETER(WRK.Carcass_Lgt_Max);
PARAMETER(WRK.Lean_High_Min);
PARAMETER(WRK.Lean_High_Max);
PARAMETER(WRK.Lean_Low_Min);
PARAMETER(WRK.Lean_Low_Max);
PARAMETER(WRK.High_Yield_Min);
PARAMETER(WRK.High_Yield_Max);
PARAMETER(WRK.Low_Yield_Min);
PARAMETER(WRK.Low_Yield_Max);
PARAMETER(WRK.Head_Percent_Min);
PARAMETER(WRK.Head_Percent_Max);
PARAMETER(WRK.Head_Percent_Min);
PARAMETER(WRK.Head_Percent_Max);
PARAMETER(WRK.BackFat_High_Min);
PARAMETER(WRK.BackFat_High_Max);
PARAMETER(WRK.BackFat_Low_Min);
PARAMETER(WRK.Backfat_Low_Max);
PARAMETER(WRK.LoinEye_High_Min);
PARAMETER(WRK.LoinEye_High_Max);
PARAMETER(WRK.LoinEye_Low_Min);
PARAMETER(WRK.LoinEye_Low_Max);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.EV Validation Code is Carcass has Double Weight
 IF DB1.EV_Validation_Code = 'CDB';

 //?Carcass double weight
 // PAR.Carcass Dbw Min = DB1.EV Minimum
 PAR.Carcass_Dbw_Min = DB1.EV_Minimum;

 // PAR.Carcass Dbw Max = DB1.EV Maximum
 PAR.Carcass_Dbw_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Carcass is Light Weight
 IF DB1.EV_Validation_Code = 'CLT';

 //?Carcass light weight
 // PAR.Carcass Lgt Min = DB1.EV Minimum
 PAR.Carcass_Lgt_Min = DB1.EV_Minimum;

 // PAR.Carcass Lgt Max = DB1.EV Maximum
 PAR.Carcass_Lgt_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Backfat is high
 IF DB1.EV_Validation_Code = 'BHI';

 //?backfat is high
 // PAR.BackFat High Min = DB1.EV Minimum
 PAR.BackFat_High_Min = DB1.EV_Minimum;

 // PAR.BackFat High Max = DB1.EV Maximum
 PAR.BackFat_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Backfat is Low
 IF DB1.EV_Validation_Code = 'BLW';

 //?Backfat is low
 // PAR.BackFat Low Min = DB1.EV Minimum
 PAR.BackFat_Low_Min = DB1.EV_Minimum;

 // PAR.Backfat Low Max = DB1.EV Maximum
 PAR.Backfat_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Loineye is High
 IF DB1.EV_Validation_Code = 'LHI';

 //?loineye is high
 // PAR.LoinEye High Min = DB1.EV Minimum
 PAR.LoinEye_High_Min = DB1.EV_Minimum;

 // PAR.LoinEye High Max = DB1.EV Maximum
 PAR.LoinEye_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Loineye is Low
 IF DB1.EV_Validation_Code = 'LLW';

 //?loineye is low
 // PAR.LoinEye Low Min = DB1.EV Minimum
 PAR.LoinEye_Low_Min = DB1.EV_Minimum;

 // PAR.LoinEye Low Max = DB1.EV Maximum
 PAR.LoinEye_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Percent Lean is high
 IF DB1.EV_Validation_Code = 'PLH';

 //?% Lean High
 // PAR.%Lean High Min = DB1.EV Minimum
 PAR.Lean_High_Min = DB1.EV_Minimum;

 // PAR.%Lean High Max = DB1.EV Maximum
 PAR.Lean_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Percent Lean is Low
 IF DB1.EV_Validation_Code = 'PLL';

 //?% Lean Low
 // PAR.%Lean Low Min = DB1.EV Minimum
 PAR.Lean_Low_Min = DB1.EV_Minimum;

 // PAR.%Lean Low Max = DB1.EV Maximum
 PAR.Lean_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is #Head is < % Allowed
 IF DB1.EV_Validation_Code = 'HLP';

 //?Head < Percent
 // PAR.Head < Percent Min = DB1.EV Minimum
 PAR.Head_Percent_Min = DB1.EV_Minimum;

 // PAR.Head < Percent Max = DB1.EV Maximum
 PAR.Head_Percent_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is #Head is > % Allowed
 IF DB1.EV_Validation_Code = 'HHP';

 //?Head > Percent
 // PAR.Head > Percent Min = DB1.EV Minimum
 PAR.Head_Percent_Min = DB1.EV_Minimum;

 // PAR.Head > Percent Max = DB1.EV Maximum
 PAR.Head_Percent_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Yield Amount is High
 IF DB1.EV_Validation_Code = 'YHI';

 //?Yield High
 // PAR.High Yield Min = DB1.EV Minimum
 PAR.High_Yield_Min = DB1.EV_Minimum;

 // PAR.High Yield Max = DB1.EV Maximum
 PAR.High_Yield_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Yield Amount is Low
 IF DB1.EV_Validation_Code = 'YLW';

 //?Yield Low
 // PAR.Low Yield Min = DB1.EV Minimum
 PAR.Low_Yield_Min = DB1.EV_Minimum;

 // PAR.Low Yield Max = DB1.EV Maximum
 PAR.Low_Yield_Max = DB1.EV_Maximum;

 ENDIF;

}


//?USER: Initialize detail screen (existing record)

// DTL.Hot Wgt Usr = DTL.ET Hot Wgt
DTL.Hot_Wgt_Usr = DTL.ET_Hot_Wgt;

// Call program Zzz Inches to MM      XF.
CALL PROGRAM(Zzz Inches to MM      XF) ('PKQQXFR');
PARAMETER(DTL.TH_Avg_Backfat);
PARAMETER(DTL.TH_Avg_Loin_Eye_Depth);
PARAMETER(DTL.Backfat_USR);
PARAMETER(DTL.Loin_Eye_USR);

//?USER: Validate detail screen relations

// WRK.Record Change Usr = CND.Blank
WRK.Record_Change_Usr = *BLANK;

//?Check if fields changed
CASE;

// IF DTL.Hot Wgt Usr NE DTL.ET Hot Wgt
IF DTL.Hot_Wgt_Usr <> DTL.ET_Hot_Wgt;

// WRK.Record Change Usr = CND.Yes
WRK.Record_Change_Usr = 'Y';

//?Check if fields changed
// IF DTL.Backfat USR NE DTL.ET Backfat Thickness MM
IF DTL.Backfat_USR <> DTL.ET_Backfat_Thickness_MM;

// WRK.Record Change Usr = CND.Yes
WRK.Record_Change_Usr = 'Y';

//?Check if fields changed
// IF DTL.Loin-Eye USR NE DTL.ET Loineye Depth MM
IF DTL.Loin_Eye_USR <> DTL.ET_Loineye_Depth_MM;

// WRK.Record Change Usr = CND.Yes
WRK.Record_Change_Usr = 'Y';

ENDIF;

CASE;

// IF WRK.Record Change Usr is Yes
IF WRK.Record_Change_Usr = 'Y';

// Call program CLC MM to Inches      XF.
CALL PROGRAM(CLC MM to Inches      XF) ('PKMMINCH');
PARAMETER(DTL.ET_Backfat_Thickness_Inch);
PARAMETER(DTL.ET_Loin_Eye_Depth_Inches);
PARAMETER(DTL.ET_Lean_Percent_NPPC);
PARAMETER(DTL.Backfat_USR);
PARAMETER(DTL.Loin_Eye_USR);
PARAMETER(DTL.ET_Light_Reflectance_MM);
PARAMETER(DTL.ET_Lean_Percent_FOM);
PARAMETER(DTL.ET_Light_Reflectance);

//?Compute Lean % nppc
CASE;

// IF DTL.Hot Wgt Usr NE WRK.Zero USR
IF DTL.Hot_Wgt_Usr <> WRK.Zero_USR;

//?COMPUTE LEAN % Morrison Hot Scale NPPC
DO;

//?Calculate Lean % per Pork Rules
//?Backfat/loin are in inches
//?2.827
//?+ (0.469 * Carcass Weight)
//?- (0.7271657 * Backfat MM)
//?+ (0.3867718 * Loin Eye MM)
//?-----------------------------
//?/ Carcass Weight
//?* 100
// WRK.Lean % Fld 1 Usr = CON.1 * CON.2.827 *
WRK.Lean_Fld_1_Usr = 1 * 2.827;

// WRK.Lean % Fld 2 Usr = CON.1 * CON.0.469 *
WRK.Lean_Fld_2_Usr = 1 * 0.469;

// *MO.VE             1183529*Bu = ilt. in functions
WRK.Lean_Fld_3_Usr = 0.7271657;

// *MO.VE             1183529*Bu = ilt. in functions
WRK.Lean_Fld_4_Usr = 0.3867718;

CASE;

// IF DTL.Hot Wgt Usr NE WRK.Zero USR
IF DTL.Hot_Wgt_Usr <> WRK.Zero_USR;

// LEAN % COMPUTE
WRK.Lean_Fld_5_Usr = ( ( ( ( WRK.Lean_Fld_1_Usr + ( WRK.Lean_Fld_2_Usr * DTL.Hot_Wgt_Usr )         +
) - ( WRK.Lean_Fld_3_Usr * DTL.Backfat_USR ) ) + ( WRK.Lean_Fld_4_Usr                             +
* DTL.Loin_Eye_USR ) ) / DTL.Hot_Wgt_Usr ) * 100;

ENDIF;

// DTL.ET Lean Percent NPPC = WRK.Lean % Fld 5 Usr * CON.1 *Rounded
DTL.ET_Lean_Percent_NPPC = WRK.Lean_Fld_5_Usr * 1 'H';

ENDDO;

//?Compute Lean % nppc
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Hot Weight is required'
ERROR(PRK0372);
MSGPARM(DTL.ET_Hot_Wgt);

ENDIF;

//?Validate transaction for min max rules
DO;

//?Validate Hot Weight
CASE;

// IF DTL.Hot Wgt Usr LE WRK.Carcass Lgt Max
IF DTL.Hot_Wgt_Usr <= WRK.Carcass_Lgt_Max;

//?Carcass Light Weight Error
// Send error message - 'Carcass Weight is to High or to Low'
ERROR(PRK0288);
MSGPARM(DTL.ET_Hot_Wgt);

//?Validate Hot Weight
// IF DTL.Hot Wgt Usr GE WRK.Carcass Dbw Min
IF DTL.Hot_Wgt_Usr >= WRK.Carcass_Dbw_Min;

//?Carcass Double Weight Error
// Send error message - 'Carcass Weight is to High or to Low'
ERROR(PRK0288);
MSGPARM(DTL.ET_Hot_Wgt);

ENDIF;

//?Validate Backfat
CASE;

// IF DTL.ET Backfat Thickness Inch LE WRK.Backfat Low Max
IF DTL.ET_Backfat_Thickness_Inch <= WRK.Backfat_Low_Max;

//?backfat to high Error
// Send error message - 'Backfat Thickness is to High or to Low'
ERROR(PRK0384);
MSGPARM(DTL.ET_Backfat_Thickness_Inch);

//?Validate Backfat
// IF DTL.ET Backfat Thickness Inch GE WRK.BackFat High Min
IF DTL.ET_Backfat_Thickness_Inch >= WRK.BackFat_High_Min;

//?Carcass Double Weight Error
// Send error message - 'Backfat Thickness is to High or to Low'
ERROR(PRK0384);
MSGPARM(DTL.ET_Backfat_Thickness_Inch);

ENDIF;

//?Validate Loineye
CASE;

// IF DTL.ET Loin-Eye Depth Inches LE WRK.LoinEye Low Max
IF DTL.ET_Loin_Eye_Depth_Inches <= WRK.LoinEye_Low_Max;

//?Loin eye  Light Weight Error
// Send error message - 'Loin Eye is to High or to Low'
ERROR(PRK0385);
MSGPARM(DTL.ET_Loin_Eye_Depth_Inches);

//?Validate Loineye
// IF DTL.ET Loin-Eye Depth Inches GE WRK.LoinEye High Min
IF DTL.ET_Loin_Eye_Depth_Inches >= WRK.LoinEye_High_Min;

//?Loin eye  High Weight Error
// Send error message - 'Loin Eye is to High or to Low'
ERROR(PRK0385);
MSGPARM(DTL.ET_Loin_Eye_Depth_Inches);

ENDIF;

//?Validate  % Lean
CASE;

// IF DTL.ET Lean Percent LE WRK.%Lean Low Max
IF DTL.ET_Lean_Percent_NPPC <= WRK.Lean_Low_Max;

//?% Lean low  Error
// Send error message - 'Lean Percent High/Low'
ERROR(PRK0289);
MSGPARM(DTL.ET_Lean_Percent_NPPC);

//?Validate  % Lean
// IF DTL.ET Lean Percent GE WRK.%Lean High Min
IF DTL.ET_Lean_Percent_NPPC >= WRK.Lean_High_Min;

//?% Lean High Error
// Send error message - 'Lean Percent High/Low'
ERROR(PRK0289);
MSGPARM(DTL.ET_Lean_Percent_NPPC);

ENDIF;

ENDDO;

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Eval Trans W/Avg IF) TYPE(EXCINTFUN) FILE(PKBVCPP)         AB1135014;
PARAMETER(DTL.ET_Company_Number);
PARAMETER(DTL.ET_Kill_Date);
PARAMETER(DTL.ET_Scale_Sequence_Number);
PARAMETER(DTL.ET_Carcass_Number);
PARAMETER(DTL.ET_Carcass_Number_Insert);
PARAMETER(DTL.ET_Tattoo_Number);
PARAMETER(DTL.ET_Lot);
PARAMETER(DTL.ET_Shift);
PARAMETER(DTL.Hot_Wgt_Usr);
PARAMETER(DTL.ET_Backfat_Thickness_Inch);
PARAMETER(DTL.ET_Loin_Eye_Depth_Inches);
PARAMETER(DTL.ET_Lean_Percent_NPPC);
PARAMETER(DTL.Backfat_USR);
PARAMETER(DTL.Loin_Eye_USR);
PARAMETER(DTL.ET_Light_Reflectance_MM);
PARAMETER(DTL.ET_Lean_Percent_FOM);
PARAMETER(DTL.ET_Light_Reflectance);
PARAMETER(DTL.ET_Trim_Area);
PARAMETER(DTL.ET_Carcass_Sex);
PARAMETER(DTL.ET_Error_Sts);
PARAMETER(DTL.ET_Record_Add_Del_Sts);
PARAMETER(DTL.ET_Record_Created_W_Avg);
PARAMETER(DTL.ET_Record_Created_Status);
PARAMETER(DTL.ET_User_Error_Override);
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
PARAMETER(DTL.RU_Date);
PARAMETER(DTL.RU_Time);
PARAMETER(WRK.@Status_Yes_No);
{
 //?Execute internal function

 CASE;

 // IF PAR.ET Carcass Number is 700000 - 799999
 IF PAR.ET_Carcass_Number >= 700000;
 AND PAR.ET_Carcass_Number <= 799999;

 //?Record has alread been changed do not assign new carcass #
 //?Perform regular change
 EXECUTE FUNCTION(Chg Evaluation Trans  CH) TYPE(CHGOBJ) FILE(PKBVCPP)           AB1127890;
 PARAMETER(PAR.ET_Company_Number);
 PARAMETER(PAR.ET_Kill_Date);
 PARAMETER(PAR.ET_Scale_Sequence_Number);
 PARAMETER(PAR.ET_Carcass_Number);
 PARAMETER(PAR.ET_Carcass_Number_Insert);
 PARAMETER(PAR.ET_Tattoo_Number);
 PARAMETER(PAR.ET_Lot);
 PARAMETER(PAR.ET_Shift);
 PARAMETER(PAR.ET_Hot_Wgt);
 PARAMETER(PAR.ET_Backfat_Thickness_Inch);
 PARAMETER(PAR.ET_Loin_Eye_Depth_Inches);
 PARAMETER(PAR.ET_Lean_Percent_NPPC);
 PARAMETER(PAR.ET_Backfat_Thickness_MM);
 PARAMETER(PAR.ET_Loineye_Depth_MM);
 PARAMETER(PAR.ET_Light_Reflectance_MM);
 PARAMETER(PAR.ET_Lean_Percent_FOM);
 PARAMETER(PAR.ET_Light_Reflectance);
 PARAMETER(PAR.ET_Trim_Area);
 PARAMETER(PAR.ET_Carcass_Sex);
 PARAMETER(PAR.ET_Error_Sts);
 PARAMETER(PAR.ET_Record_Add_Del_Sts);
 PARAMETER(PAR.ET_Record_Created_W_Avg);
 PARAMETER(PAR.ET_Record_Created_Status);
 PARAMETER(PAR.ET_User_Error_Override);
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 PARAMETER(PAR.RU_Date);
 PARAMETER(PAR.RU_Time);
 PARAMETER(PAR.@Status_Yes_No);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

  //?Record is changed
  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.@Status_Yes_No = 'Y';

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.ET Record Created W/Avg is Not Created With Average
 IF PAR.ET_Record_Created_W_Avg = *BLANK;

 //?Create a copy of orginal only 1 time
 //?Save orginal records but change status
 // Call program Zzz Eval Trans Rec    XF.
 CALL PROGRAM(Zzz Eval Trans Rec    XF) ('PKO4XFR');
 PARAMETER(PAR.ET_Company_Number);
 PARAMETER(PAR.ET_Kill_Date);
 PARAMETER(PAR.ET_Scale_Sequence_Number);
 PARAMETER(PAR.ET_Carcass_Number);
 PARAMETER(PAR.ET_Carcass_Number_Insert);

 //?Create new carcass with averages key by user and override carcass number
 // WRK.ET Scale Sequence Number = CON.700000 + PAR.ET Scale Sequence Number
 WRK.ET_Scale_Sequence_Number = 700000 + PAR.ET_Scale_Sequence_Number;

 // WRK.ET Carcass Number Usr = CON.700000 + PAR.ET Carcass Number
 WRK.ET_Carcass_Number_Usr = 700000 + PAR.ET_Carcass_Number;

 EXECUTE FUNCTION(Create Evaluation Transac) TYPE(CRTOBJ) FILE(PKBVCPP)          AB1102931;
 PARAMETER(PAR.ET_Company_Number);
 PARAMETER(PAR.ET_Kill_Date);
 PARAMETER(WRK.ET_Scale_Sequence_Number);
 PARAMETER(WRK.ET_Carcass_Number_Usr);
 PARAMETER(PAR.ET_Carcass_Number_Insert);
 PARAMETER(PAR.ET_Tattoo_Number);
 PARAMETER(PAR.ET_Lot);
 PARAMETER(PAR.ET_Shift);
 PARAMETER(PAR.ET_Hot_Wgt);
 PARAMETER(PAR.ET_Backfat_Thickness_Inch);
 PARAMETER(PAR.ET_Loin_Eye_Depth_Inches);
 PARAMETER(PAR.ET_Lean_Percent_NPPC);
 PARAMETER(PAR.ET_Backfat_Thickness_MM);
 PARAMETER(PAR.ET_Loineye_Depth_MM);
 PARAMETER(PAR.ET_Light_Reflectance_MM);
 PARAMETER(PAR.ET_Lean_Percent_FOM);
 PARAMETER(PAR.ET_Light_Reflectance);
 PARAMETER(PAR.ET_Trim_Area);
 PARAMETER(PAR.ET_Carcass_Sex);
 PARAMETER('B');
 PARAMETER(PAR.ET_Record_Add_Del_Sts);
 PARAMETER('C');
 PARAMETER(PAR.ET_Record_Created_Status);
 PARAMETER(PAR.ET_User_Error_Override);
 PARAMETER(PAR.ET_Adjust_Add_Type);
 PARAMETER(PAR.ET_Broken_Back_Sts);
 PARAMETER(PAR.ET_Unused_Sts_2);
 PARAMETER(PAR.ET_Adjust_Add_Source);
 PARAMETER(PAR.ET_Unused_Sts_4);
 PARAMETER(PAR.ET_Unused_Sts_5);
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER('A');
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 PARAMETER(PAR.RU_Date);
 PARAMETER(PAR.RU_Time);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 // PAR.@Status (Yes/No) = CND.Yes
 PAR.@Status_Yes_No = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Chg Evaluation Trans  CH) TYPE(CHGOBJ) FILE(PKBVCPP)           AB1127890;
 PARAMETER(PAR.ET_Company_Number);
 PARAMETER(PAR.ET_Kill_Date);
 PARAMETER(PAR.ET_Scale_Sequence_Number);
 PARAMETER(PAR.ET_Carcass_Number);
 PARAMETER(PAR.ET_Carcass_Number_Insert);
 PARAMETER(PAR.ET_Tattoo_Number);
 PARAMETER(PAR.ET_Lot);
 PARAMETER(PAR.ET_Shift);
 PARAMETER(PAR.ET_Hot_Wgt);
 PARAMETER(PAR.ET_Backfat_Thickness_Inch);
 PARAMETER(PAR.ET_Loin_Eye_Depth_Inches);
 PARAMETER(PAR.ET_Lean_Percent_NPPC);
 PARAMETER(PAR.ET_Backfat_Thickness_MM);
 PARAMETER(PAR.ET_Loineye_Depth_MM);
 PARAMETER(PAR.ET_Light_Reflectance_MM);
 PARAMETER(PAR.ET_Lean_Percent_FOM);
 PARAMETER(PAR.ET_Light_Reflectance);
 PARAMETER(PAR.ET_Trim_Area);
 PARAMETER(PAR.ET_Carcass_Sex);
 PARAMETER('B');
 PARAMETER(PAR.ET_Record_Add_Del_Sts);
 PARAMETER('C');
 PARAMETER(PAR.ET_Record_Created_Status);
 PARAMETER(PAR.ET_User_Error_Override);
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER('A');
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 PARAMETER(PAR.RU_Date);
 PARAMETER(PAR.RU_Time);
 PARAMETER(PAR.@Status_Yes_No);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

  //?Record is changed
  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.@Status_Yes_No = 'Y';

 }

 ENDIF;

 ENDIF;

}


//?USER: Exit program processing

CASE;

// IF WRK.@Status (Yes/No) is Yes
IF WRK.@Status_Yes_No = 'Y';

// Call program Bal Tattoo W/Kill Edt  XF.
CALL PROGRAM(Bal Tattoo W/Kill Edt  XF) ('PKLHXFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER('E');
PARAMETER(PAR.TH_Schedule_Kill_Shift);
PARAMETER('N');
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(*BLANK);

ENDIF;

