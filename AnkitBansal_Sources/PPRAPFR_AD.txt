// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPRAPFR
// ?Date: 14.08.2025 Time: 12:06:38
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('I/C');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


//?USER: On print of first page format

//?R9083 02/20/17 DN-Move All PAR to 1PG Format.
MOVE *ALL (To: 1PG From: PAR);

CASE;

// IF 1PG.ISC Warehouse Company is not equal to zero
IF X1PG_ISC_Warehouse_Company <> *ZERO;

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(X1PG_Company_Name_DRV);
PARAMETER(X1PG_ISC_Warehouse_Company);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Company Name DRV = CON.All
X1PG_Company_Name_DRV = 'All';

ENDIF;

CASE;

// IF 1PG.ISC Warehouse Code is Warehouse Code not Blank
IF X1PG_ISC_Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(Warehouse Desc DRV) TYPE(DRVFLD)                               AC1532477;
PARAMETER(X1PG_Warehouse_Desc_DRV);
PARAMETER(X1PG_ISC_Warehouse_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

}


// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Warehouse Desc DRV = CON.All
X1PG_Warehouse_Desc_DRV = 'All';

ENDIF;

//?USER: Print required level headings

// SUPPRESSED PRINT IVF Valuation Grouping header format

CASE;

IF NEW IVF_Week_Ending_Date;
// Print IVF Week Ending Date header format
PRINT IVF Week Ending Date header format;

ENDIF;

// SUPPRESSED PRINT IVF Item G/L Sub Code header format

// SUPPRESSED PRINT IVF Item Code header format

//?USER: On print of detail format

EXECUTE FUNCTION(Item Desc DRV) TYPE(DRVFLD)                                    AC1505592;
PARAMETER(CUR.Item_Desc_DRV);
PARAMETER(CUR.IVF_Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Desc_DRV);
 PARAMETER(WRK.Description_Line_Two);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?R9083 02/20/17 DN-Modified to Also RST by Grouping.
EXECUTE FUNCTION(Rtv Item Weights Sum  RT) TYPE(RTVOBJ) FILE(PPBSCPP)           AC1743738;
PARAMETER(CUR.IVF_Week_Ending_Date);
PARAMETER(PAR.ISC_Warehouse_Company);
PARAMETER(PAR.ISC_Warehouse_Code);
PARAMETER(CUR.IVF_Item_Code);
PARAMETER(CUR.IVF_Valuation_Grouping);
PARAMETER(CUR.Weight_Sales_usr);
PARAMETER(CUR.Weight_End_Inv_usr);
PARAMETER(CUR.Weight_Prod_usr);
PARAMETER(CUR.Weight_Beg_Inv_usr);
PARAMETER(PAR.WF_Beginning_Inv_Weight);
PARAMETER(PAR.WF_Sales_Weight);
PARAMETER(PAR.WF_Prod_Weight);
PARAMETER(PAR.WF_Ending_Inv_Weight);
PARAMETER(PAR.Status_Y_or_N);
{
 //?USER: Initialize routine

 //?Added Company and Whse selection. Blank is ALL             1/12/06
 //?Added WF accumulators with decimal places.                 1/23/06
 // PAR.WF Beginning Inv Weight = CON.*ZERO
 PAR.WF_Beginning_Inv_Weight = *ZERO;

 // PAR.WF Sales Weight = CON.*ZERO
 PAR.WF_Sales_Weight = *ZERO;

 // PAR.WF Prod Weight = CON.*ZERO
 PAR.WF_Prod_Weight = *ZERO;

 // PAR.WF Ending Inv Weight = CON.*ZERO
 PAR.WF_Ending_Inv_Weight = *ZERO;

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // WRK.Record Selected       USR = CND.yes
 WRK.Record_Selected_USR = 'Y';

 //?Sel Company
 CASE;

 // IF PAR.ISC Warehouse Company is not equal to zero
 IF PAR.ISC_Warehouse_Company <> *ZERO;

 // AND PAR.ISC Warehouse Company NE DB1.ISC Warehouse Company
 AND PAR.ISC_Warehouse_Company <> DB1.ISC_Warehouse_Company;

 // WRK.Record Selected       USR = CND.no
 WRK.Record_Selected_USR = 'N';

 ENDIF;

 //?Sel Whse
 CASE;

 // IF PAR.ISC Warehouse Code is Warehouse Code not Blank
 IF PAR.ISC_Warehouse_Code <> *BLANK;

 // AND PAR.ISC Warehouse Code NE DB1.ISC Warehouse Code
 AND PAR.ISC_Warehouse_Code <> DB1.ISC_Warehouse_Code;

 // WRK.Record Selected       USR = CND.no
 WRK.Record_Selected_USR = 'N';

 ENDIF;

 CASE;

 // IF WRK.Record Selected       USR is yes
 IF WRK.Record_Selected_USR = 'Y';

 CASE;

 // IF DB1.ISC Item U/M - Pricing is Head Set
 IF DB1.ISC_Item_UOM_Pricing = 'HS';

 // OR DB1.ISC Item U/M - Pricing is Each
 OR DB1.ISC_Item_UOM_Pricing = 'EA';

 //?For Casings -- use qty
 // Compute: qty    sales usr
 PAR.Weight_Sales_usr = PAR.Weight_Sales_usr + ( DB1.ISC_Shipment_Final_Qty * 1 'H' );

 // Compute: qty    End inv
 PAR.Weight_End_Inv_usr = ( DB1.ISC_Ending_Inv_Final_Qty * 1 'H' ) + PAR.Weight_End_Inv_usr;

 // Compute: Qty    prod usr
 PAR.Weight_Prod_usr = PAR.Weight_Prod_usr + ( ( DB1.ISC_Floor_Production_Qty
 + DB1.ISC_Floor_Prod_Adj_Qty ) * 1 'H' );

 // Compute: Qty   beg inv us
 PAR.Weight_Beg_Inv_usr = PAR.Weight_Beg_Inv_usr + ( DB1.ISC_Begin_Inv_Final_Qty * 1 'H' );

 //?Create workf if Yes        1/23/06
 CASE;

 // IF PAR.Status - Y or N is yes
 IF PAR.Status_Y_or_N = 'Y';

 // Compute: qty    sales usr
 PAR.WF_Sales_Weight = PAR.WF_Sales_Weight + DB1.ISC_Shipment_Final_Qty;

 // Compute: qty    End inv
 PAR.WF_Ending_Inv_Weight = PAR.WF_Ending_Inv_Weight + DB1.ISC_Ending_Inv_Final_Qty;

 // Compute: Qty    prod usr
 PAR.WF_Prod_Weight = PAR.WF_Prod_Weight + ( DB1.ISC_Floor_Production_Qty
 + DB1.ISC_Floor_Prod_Adj_Qty );

 // Compute: Qty   beg inv us
 PAR.WF_Beginning_Inv_Weight = PAR.WF_Beginning_Inv_Weight + DB1.ISC_Begin_Inv_Final_Qty;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Compute: weight sales usr
 PAR.Weight_Sales_usr = PAR.Weight_Sales_usr + ( DB1.ISC_Shipment_Final_Lbs * 1 'H' );

 // Compute: weight End inv
 PAR.Weight_End_Inv_usr = ( DB1.ISC_Ending_Inv_Final_Lbs * 1 'H' ) + PAR.Weight_End_Inv_usr;

 // Compute: Weight prod usr
 PAR.Weight_Prod_usr = PAR.Weight_Prod_usr + ( ( DB1.ISC_Floor_Production_Lbs
 + DB1.ISC_Floor_Prod_Adj_Lbs ) * 1 'H' );

 // Compute weight beg inv us
 PAR.Weight_Beg_Inv_usr = PAR.Weight_Beg_Inv_usr + ( DB1.ISC_Begin_Inv_Final_Lbs * 1 'H' );

 //?Create Workf if Yes     1/23/06
 CASE;

 // IF PAR.Status - Y or N is yes
 IF PAR.Status_Y_or_N = 'Y';

 // Compute: weight sales usr
 PAR.WF_Sales_Weight = PAR.WF_Sales_Weight + DB1.ISC_Shipment_Final_Lbs;

 // Compute: weight End inv
 PAR.WF_Ending_Inv_Weight = PAR.WF_Ending_Inv_Weight + DB1.ISC_Ending_Inv_Final_Lbs;

 // Compute: Weight prod usr
 PAR.WF_Prod_Weight = PAR.WF_Prod_Weight + ( DB1.ISC_Floor_Production_Lbs
 + DB1.ISC_Floor_Prod_Adj_Lbs );

 // Compute weight beg inv us
 PAR.WF_Beginning_Inv_Weight = PAR.WF_Beginning_Inv_Weight + DB1.ISC_Begin_Inv_Final_Lbs;

 ENDIF;

 ENDIF;

 ENDIF;

}


CASE;

// IF PAR.Print Zeros USR is no
IF PAR.Print_Zeros_USR = 'N';

CASE;

// IF CUR.Weight Sales usr is Not Entered
IF CUR.Weight_Sales_usr = *ZERO;

// AND CUR.Weight End Inv usr is Not Entered
AND CUR.Weight_End_Inv_usr = *ZERO;

// AND CUR.Weight Prod usr is Not Entered
AND CUR.Weight_Prod_usr = *ZERO;

// AND CUR.Weight Beg Inv usr is Not Entered
AND CUR.Weight_Beg_Inv_usr = *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

ENDIF;

// CUR.Sales Price CWT = CUR.IVF Sales Price/CWT
CUR.Sales_Price_CWT = CUR.IVF_Sales_Price_Per_CWT;

// PAR.IVF Sales Price/CWT = CUR.IVF Sales Price/CWT
PAR.IVF_Sales_Price_Per_CWT = CUR.IVF_Sales_Price_Per_CWT;

// Compute: Amt sales usr
CUR.Amount_Sales_usr = ( DB1.IVF_Sales_Price_Per_CWT / 100 ) * CUR.Weight_Sales_usr 'H';

CASE;

// IF CUR.Weight End Inv usr is Not Equal to Zero
IF CUR.Weight_End_Inv_usr <> *ZERO;

//?End Inv Price CWT
CASE;

// IF DB1.IVF Ovrrde Inv Val Prc/CW is Entered
IF DB1.IVF_Ovrrde_Inv_Val_Prc_CW <> *ZERO;

// Compute: Amt end inv usr
CUR.Amount_End_Inv_usr = ( CUR.IVF_Ovrrde_Inv_Val_Prc_CW / 100 ) * CUR.Weight_End_Inv_usr          +
'H';

// CUR.End Inv Price CWT = DB1.IVF Ovrrde Inv Val Prc/CW
CUR.End_Inv_Price_CWT = DB1.IVF_Ovrrde_Inv_Val_Prc_CW;

// PAR.IVF Cur Wk Inv Val Prc/CW = DB1.IVF Ovrrde Inv Val Prc/CW
PAR.IVF_Cur_Wk_Inv_Val_Prc_CW = DB1.IVF_Ovrrde_Inv_Val_Prc_CW;

//?End Inv Price CWT
// IF *OTHERWISE
IF *OTHERWISE;

// Compute: Amt end inv usr
CUR.Amount_End_Inv_usr = ( CUR.IVF_Cur_Wk_Inv_Val_Prc_CW / 100 ) * CUR.Weight_End_Inv_usr          +
'H';

// CUR.End Inv Price CWT = DB1.IVF Cur Wk Inv Val Prc/CW
CUR.End_Inv_Price_CWT = DB1.IVF_Cur_Wk_Inv_Val_Prc_CW;

// PAR.IVF Cur Wk Inv Val Prc/CW = DB1.IVF Cur Wk Inv Val Prc/CW
PAR.IVF_Cur_Wk_Inv_Val_Prc_CW = DB1.IVF_Cur_Wk_Inv_Val_Prc_CW;

ENDIF;

ENDIF;

CASE;

// IF CUR.Weight Prod usr is Not Equal to Zero
IF CUR.Weight_Prod_usr <> *ZERO;

//?Prod Price CWT
CASE;

// IF DB1.IVF Ovrrde Prod Price/CWT is Entered
IF DB1.IVF_Ovrrde_Prod_Price_CWT <> *ZERO;

// CUR.Prod Price CWT = DB1.IVF Ovrrde Prod Price/CWT
CUR.Prod_Price_CWT = DB1.IVF_Ovrrde_Prod_Price_CWT;

// Compute: Amt prod usr
CUR.Amount_Prod_Usr = ( CUR.IVF_Ovrrde_Prod_Price_CWT / 100 ) * CUR.Weight_Prod_usr 'H';

// PAR.IVF Curr Wk Prod Price/CW = DB1.IVF Ovrrde Prod Price/CWT
PAR.IVF_Curr_Wk_Prod_Price_CW = DB1.IVF_Ovrrde_Prod_Price_CWT;

//?Prod Price CWT
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Prod Price CWT = DB1.IVF Curr Wk Prod Price/CW
CUR.Prod_Price_CWT = DB1.IVF_Curr_Wk_Prod_Price_CW;

// Compute: Amt prod usr
CUR.Amount_Prod_Usr = ( CUR.IVF_Curr_Wk_Prod_Price_CW / 100 ) * CUR.Weight_Prod_usr 'H';

// PAR.IVF Curr Wk Prod Price/CW = DB1.IVF Curr Wk Prod Price/CW
PAR.IVF_Curr_Wk_Prod_Price_CW = DB1.IVF_Curr_Wk_Prod_Price_CW;

ENDIF;

ENDIF;

//?Beg Inv Price CWT
CASE;

// IF CUR.Weight Beg Inv usr is Not Equal to Zero
IF CUR.Weight_Beg_Inv_usr <> *ZERO;

// CUR.Beg Inv Price CWT = DB1.IVF Beg Inv Price/CWT
CUR.Beg_Inv_Price_CWT = DB1.IVF_Beg_Inv_Price_Per_CWT;

// Compute:Amt beg inv usr
CUR.Amount_Beg_Inv_usr = ( CUR.IVF_Beg_Inv_Price_Per_CWT / 100 ) * CUR.Weight_Beg_Inv_usr          +
'H';

// PAR.IVF Beg Inv Price/CWT = DB1.IVF Beg Inv Price/CWT
PAR.IVF_Beg_Inv_Price_Per_CWT = DB1.IVF_Beg_Inv_Price_Per_CWT;

ENDIF;

// Compute:Profit loss wgt
CUR.Weight_Profit_loss_usr = ( ( CUR.Weight_Sales_usr + CUR.Weight_End_Inv_usr )                   +
- CUR.Weight_Prod_usr ) - CUR.Weight_Beg_Inv_usr;

// Compute:Profit loss Amt
CUR.Amount_Profit_Loss_usr = ( ( CUR.Amount_Sales_usr + CUR.Amount_End_Inv_usr )                   +
- CUR.Amount_Prod_Usr ) - CUR.Amount_Beg_Inv_usr;

//?Gain Shrink $ Calc
CASE;

// IF CUR.Weight Prod usr is Not Equal to Zero
IF CUR.Weight_Prod_usr <> *ZERO;

// CUR.Weight Gain Usr =       *
CUR.Weight_Gain_Usr = CUR.Weight_Profit_loss_usr * ( CUR.Prod_Price_CWT / 100 ) 'H';

//?Gain Shrink $ Calc
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Weight Gain Usr =       *
CUR.Weight_Gain_Usr = CUR.Weight_Profit_loss_usr * ( CUR.Beg_Inv_Price_CWT / 100 ) 'H';

ENDIF;

// CUR.Weight sales v. Inv Usr = CUR.Amount Profit/Loss usr - CUR.Weight Gain Usr
CUR.Weight_sales_v_Inv_Usr = CUR.Amount_Profit_Loss_usr - CUR.Weight_Gain_Usr;

CASE;

// IF PGM.*Print format is Print format
IF PGM.*Print_format = 'Y';

//?Create outfile for download if Status is Y           01/23/06
CASE;

// IF PAR.Status - Y or N is yes
IF PAR.Status_Y_or_N = 'Y';

// Compute: WF End Inv Amt
PAR.WF_Ending_Inv_Amount = ( PAR.IVF_Cur_Wk_Inv_Val_Prc_CW / 100 )                                 +
* PAR.WF_Ending_Inv_Weight 'H';

// Compute:WF Beg Inv Amt
PAR.WF_Beginning_Inv_Amount = ( PAR.IVF_Beg_Inv_Price_Per_CWT / 100 )                              +
* PAR.WF_Beginning_Inv_Weight 'H';

// Compute: WF Sales Amt
PAR.WF_Sales_Amount = ( PAR.IVF_Sales_Price_Per_CWT / 100 ) * PAR.WF_Sales_Weight 'H';

// Compute: Prod Amt
PAR.WF_Prod_Amount = ( PAR.IVF_Curr_Wk_Prod_Price_CW / 100 ) * PAR.WF_Prod_Weight 'H';

// Compute:WF Profit Weight
PAR.WF_Weight_Profit_Loss = ( ( PAR.WF_Sales_Weight + PAR.WF_Ending_Inv_Weight )                   +
- PAR.WF_Prod_Weight ) - PAR.WF_Beginning_Inv_Weight;

// Compute:WF Profit Amt
PAR.WF_Amount_Profit_Loss = ( ( PAR.WF_Sales_Amount + PAR.WF_Ending_Inv_Amount )                   +
- PAR.WF_Prod_Amount ) - PAR.WF_Beginning_Inv_Amount;

//?R9083 02/20/17 DN-Modified to Set Grouping.
EXECUTE FUNCTION(Crt WF Inv Value      CR) TYPE(CRTOBJ) FILE(PPB3CPP)           AC1770551;
PARAMETER(CUR.IVF_Valuation_Grouping);
PARAMETER(CUR.IVF_Week_Ending_Date);
PARAMETER(CUR.IVF_Item_Code);
PARAMETER(CUR.IVF_Item_GL_Sub_Code);
PARAMETER(CUR.IVF_Item_UOM_Pricing);
PARAMETER(CUR.IVF_Inventory_Value_Mthd);
PARAMETER(CUR.IVF_Production_Value_Mthd);
PARAMETER(PAR.IVF_Beg_Inv_Price_Per_CWT);
PARAMETER(PAR.WF_Beginning_Inv_Weight);
PARAMETER(PAR.WF_Beginning_Inv_Amount);
PARAMETER(PAR.IVF_Sales_Price_Per_CWT);
PARAMETER(PAR.WF_Sales_Weight);
PARAMETER(PAR.WF_Sales_Amount);
PARAMETER(PAR.IVF_Curr_Wk_Prod_Price_CW);
PARAMETER(PAR.WF_Prod_Weight);
PARAMETER(PAR.WF_Prod_Amount);
PARAMETER(PAR.IVF_Cur_Wk_Inv_Val_Prc_CW);
PARAMETER(PAR.WF_Ending_Inv_Weight);
PARAMETER(PAR.WF_Ending_Inv_Amount);
PARAMETER(PAR.WF_Weight_Profit_Loss);
PARAMETER(PAR.WF_Amount_Profit_Loss);

// PAR.IVF Beg Inv Price/CWT = CON.*ZERO
PAR.IVF_Beg_Inv_Price_Per_CWT = *ZERO;

// PAR.IVF Sales Price/CWT = CON.*ZERO
PAR.IVF_Sales_Price_Per_CWT = *ZERO;

// PAR.IVF Curr Wk Prod Price/CW = CON.*ZERO
PAR.IVF_Curr_Wk_Prod_Price_CW = *ZERO;

// PAR.IVF Cur Wk Inv Val Prc/CW = CON.*ZERO
PAR.IVF_Cur_Wk_Inv_Val_Prc_CW = *ZERO;

ENDIF;

ENDIF;

//?USER: Process after print of detail format

NXT.Weight_Sales_SUM = SUM(CUR.Weight_Sales_usr);

NXT.Weight_End_Inv_SUM = SUM(CUR.Weight_End_Inv_usr);

NXT.Weight_Prod_SUM = SUM(CUR.Weight_Prod_usr);

NXT.Weight_Beg_Inv_SUM = SUM(CUR.Weight_Beg_Inv_usr);

NXT.Weight_Profit_loss_SUM = SUM(CUR.Weight_Profit_loss_usr);

NXT.Amount_Sales_SUM = SUM(CUR.Amount_Sales_usr);

NXT.Amount_End_Inv_SUM = SUM(CUR.Amount_End_Inv_usr);

NXT.Amount_Prod_SUM = SUM(CUR.Amount_Prod_Usr);

NXT.Amount_Beg_Inv_SUM = SUM(CUR.Amount_Beg_Inv_usr);

NXT.Amount_Profit_Loss_SUM = SUM(CUR.Amount_Profit_Loss_usr);

NXT.Weight_Gain_SUM = SUM(CUR.Weight_Gain_Usr);

NXT.Weight_Sales_v_Inv_SUM = SUM(CUR.Weight_sales_v_Inv_Usr);

NXT.Weight_Appr_Depr_SUM = SUM(CUR.Weight_Appr_Depr_Usr);

//?USER: Print required level totals

// SUPPRESSED PRINT IVF Item Code totals format

CASE;

IF NEW IVF_Item_GL_Sub_Code;
//?Dont print zero weights      1/13/06
CASE;

// IF PAR.Print Zeros USR is no
IF PAR.Print_Zeros_USR = 'N';

CASE;

// IF CUR.Weight Sales SUM is Not Entered
IF CUR.Weight_Sales_SUM = *ZERO;

// AND CUR.Weight End Inv SUM is Not Entered
AND CUR.Weight_End_Inv_SUM = *ZERO;

// AND CUR.Weight Prod SUM is Not Entered
AND CUR.Weight_Prod_SUM = *ZERO;

// AND CUR.Weight Beg Inv SUM is Not Entered
AND CUR.Weight_Beg_Inv_SUM = *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

ENDIF;

EXECUTE FUNCTION(G/L Sub Code Desc DRV) TYPE(DRVFLD)                            AC1705176;
PARAMETER(CUR.G_L_Sub_Code_Desc_DRV);
PARAMETER(PAR.Company_Number);
PARAMETER(4);
PARAMETER(CUR.IVF_Item_GL_Sub_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Ctg Desc     RT) TYPE(RTVOBJ) FILE(PDJIREP)           AC1627391;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Category_Number);
 PARAMETER(PAR.Item_Category_Code);
 PARAMETER(PAR.G_L_Sub_Code_Desc_DRV);
 PARAMETER(NLL.Item_Category_Type_Number);
 PARAMETER(NLL.Item_Category_Type_Code);
 PARAMETER(NLL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


CASE;

// IF CUR.Weight Sales SUM is Entered
IF CUR.Weight_Sales_SUM <> 0;

// Compute: Sales CWT
CUR.Sales_Price_CWT = ( CUR.Amount_Sales_SUM / CUR.Weight_Sales_SUM 'H' ) * 100 'H';

ENDIF;

CASE;

// IF CUR.Weight End Inv SUM is Entered
IF CUR.Weight_End_Inv_SUM <> 0;

// Compute: End Inv CWT
CUR.End_Inv_Price_CWT = ( CUR.Amount_End_Inv_SUM / CUR.Weight_End_Inv_SUM 'H' ) * 100              +
'H';

ENDIF;

CASE;

// IF CUR.Weight Prod SUM is Entered
IF CUR.Weight_Prod_SUM <> 0;

// Compute: Prod Price CWT
CUR.Prod_Price_CWT = ( CUR.Amount_Prod_SUM / CUR.Weight_Prod_SUM 'H' ) * 100 'H';

ENDIF;

CASE;

// IF CUR.Weight Beg Inv SUM is Entered
IF CUR.Weight_Beg_Inv_SUM <> 0;

// Compute: Beg Inv prc cwt
CUR.Beg_Inv_Price_CWT = ( CUR.Amount_Beg_Inv_SUM / CUR.Weight_Beg_Inv_SUM 'H' ) * 100              +
'H';

ENDIF;

// Print IVF Item G/L Sub Code totals format
PRINT IVF Item G/L Sub Code totals format;

NXT.Weight_Sales_SUM = SUM(CUR.Weight_Sales_SUM);

NXT.Amount_Sales_SUM = SUM(CUR.Amount_Sales_SUM);

NXT.Weight_End_Inv_SUM = SUM(CUR.Weight_End_Inv_SUM);

NXT.Amount_End_Inv_SUM = SUM(CUR.Amount_End_Inv_SUM);

NXT.Weight_Prod_SUM = SUM(CUR.Weight_Prod_SUM);

NXT.Amount_Prod_SUM = SUM(CUR.Amount_Prod_SUM);

NXT.Weight_Beg_Inv_SUM = SUM(CUR.Weight_Beg_Inv_SUM);

NXT.Amount_Beg_Inv_SUM = SUM(CUR.Amount_Beg_Inv_SUM);

NXT.Weight_Profit_loss_SUM = SUM(CUR.Weight_Profit_loss_SUM);

NXT.Amount_Profit_Loss_SUM = SUM(CUR.Amount_Profit_Loss_SUM);

NXT.Weight_Gain_SUM = SUM(CUR.Weight_Gain_SUM);

NXT.Weight_Sales_v_Inv_SUM = SUM(CUR.Weight_Sales_v_Inv_SUM);

NXT.Weight_Appr_Depr_SUM = SUM(CUR.Weight_Appr_Depr_SUM);

ENDIF;

CASE;

IF NEW IVF_Week_Ending_Date;
CASE;

// IF CUR.Weight Sales SUM is Entered
IF CUR.Weight_Sales_SUM <> 0;

// Compute: Sales CWT
CUR.Sales_Price_CWT = ( CUR.Amount_Sales_SUM / CUR.Weight_Sales_SUM 'H' ) * 100 'H';

ENDIF;

CASE;

// IF CUR.Weight End Inv SUM is Entered
IF CUR.Weight_End_Inv_SUM <> 0;

// Compute: End Inv CWT
CUR.End_Inv_Price_CWT = ( CUR.Amount_End_Inv_SUM / CUR.Weight_End_Inv_SUM 'H' ) * 100              +
'H';

ENDIF;

CASE;

// IF CUR.Weight Prod SUM is Entered
IF CUR.Weight_Prod_SUM <> 0;

// Compute: Prod Price CWT
CUR.Prod_Price_CWT = ( CUR.Amount_Prod_SUM / CUR.Weight_Prod_SUM 'H' ) * 100 'H';

ENDIF;

CASE;

// IF CUR.Weight Beg Inv SUM is Entered
IF CUR.Weight_Beg_Inv_SUM <> 0;

// Compute: Beg Inv prc cwt
CUR.Beg_Inv_Price_CWT = ( CUR.Amount_Beg_Inv_SUM / CUR.Weight_Beg_Inv_SUM 'H' ) * 100              +
'H';

ENDIF;

// Print IVF Week Ending Date totals format
PRINT IVF Week Ending Date totals format;

ENDIF;

// SUPPRESSED PRINT IVF Valuation Grouping totals format

