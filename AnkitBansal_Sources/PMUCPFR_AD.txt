// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMUCPFR
// ?Date: 14.08.2025 Time: 12:05:45
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Calculate the number of pages the report will need.
EXECUTE FUNCTION(RTV calc BOL pages req RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1854536;
PARAMETER(PAR.Load_ID);
PARAMETER(LCL.Page_Nbr_Total_2_0USR);
PARAMETER(4);
PARAMETER(LCL.Manifest_Dtl_Record_Count);
{
 //?USER: Initialize routine

 // LCL.USR Counter = CON.*ZERO
 LCL.USR_Counter = *ZERO;

 //?USER: Process Data record

 // LCL.USR Counter = CON.1 + LCL.USR Counter
 LCL.USR_Counter = 1 + LCL.USR_Counter;

 //?Drill down to the Manifest detail to see if there will be overflow
 EXECUTE FUNCTION(RTV calc pages for BOL RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1854543;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Page_Overflow);
 PARAMETER(PAR.ED_Nbr_of_prods_on_1st_pg);
 PARAMETER(PAR.Manifest_Dtl_Record_Count);
 {
  //?USER: Initialize routine

  // PAR.Page Overflow = CON.*ZERO
  PAR.Page_Overflow = *ZERO;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV calc pages for BOL RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1854544;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Page_Overflow);
  PARAMETER(PAR.ED_Nbr_of_prods_on_1st_pg);
  PARAMETER(DB1.Load_ID);
  PARAMETER(PAR.Manifest_Dtl_Record_Count);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(RTV calc pages for BOL RT) TYPE(RTVOBJ) FILE(OMFNCPP)          AC1854545;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Page_Overflow);
   PARAMETER(PAR.ED_Nbr_of_prods_on_1st_pg);
   PARAMETER(PAR.Load_ID);
   PARAMETER(PAR.Manifest_Dtl_Record_Count);
   {
    //?USER: Process Data record

    // LCL.USR Count = CON.1 + LCL.USR Count
    LCL.USR_Count = 1 + LCL.USR_Count;

    // PAR.Manfist Dtl Record Count = CON.1 + PAR.Manfist Dtl Record Count
    PAR.Manifest_Dtl_Record_Count = 1 + PAR.Manifest_Dtl_Record_Count;

    //?USER: Exit processing

    CASE;

    // IF LCL.USR Count GT PAR.ED Nbr of prods on 1st pg
    IF LCL.USR_Count > PAR.ED_Nbr_of_prods_on_1st_pg;

    // LCL.USR Page Number 3.0 = LCL.USR Count / PAR.ED Nbr of prods on 1st pg Remaining Bal 8.2 USR
    LCL.USR_Page_Number_3_0 = LCL.USR_Count / PAR.ED_Nbr_of_prods_on_1st_pg ,REMAINDER:
    LCL.Remaining_Bal_8_2_USR;

    CASE;

    // IF LCL.Remaining Bal 8.2 USR is Zero
    IF LCL.Remaining_Bal_8_2_USR = *ZERO;

    // PAR.Page Overflow = LCL.USR Page Number 3.0 - CON.1
    PAR.Page_Overflow = LCL.USR_Page_Number_3_0 - 1;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Page Overflow = LCL.USR Page Number 3.0
    PAR.Page_Overflow = LCL.USR_Page_Number_3_0;

    ENDIF;

    ENDIF;

   }

  }

 }

 EXECUTE FUNCTION(Rtv Count for BOL Rin RT) TYPE(RTVOBJ) FILE(PMDACPP)           AC2004379;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.ED_Nbr_of_prods_on_1st_pg);
 PARAMETER(LCL.Page_Overflow);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.RFS Transaction Type is Sold or Delivered
  IF DB1.RFS_Transaction_Type = 'SEL';

  //?W104274 DN 08/08/22-Added Co 376 Hugoton SE Marketing.
  CASE;

  // IF DB1.Company Number is HPB Biodiesel
  IF DB1.Company_Number = 369;

  // OR DB1.Company Number is St Joseph HPB Marketing
  OR DB1.Company_Number = 374;

  // OR DB1.Company Number is Hugoton SE Marketing
  OR DB1.Company_Number = 376;

  // LCL.USR Count = LCL.USR Count + CON.1
  LCL.USR_Count = LCL.USR_Count + 1;

  ENDIF;

  ENDIF;

  //?USER: Exit processing

  CASE;

  // IF LCL.USR Count GT PAR.ED Nbr of prods on 1st pg
  IF LCL.USR_Count > PAR.ED_Nbr_of_prods_on_1st_pg;

  // LCL.USR Page Number 3.0 = LCL.USR Count / PAR.ED Nbr of prods on 1st pg Remaining Bal 8.2 USR
  LCL.USR_Page_Number_3_0 = LCL.USR_Count / PAR.ED_Nbr_of_prods_on_1st_pg ,REMAINDER:
  LCL.Remaining_Bal_8_2_USR;

  CASE;

  // IF LCL.Remaining Bal 8.2 USR is Zero
  IF LCL.Remaining_Bal_8_2_USR = *ZERO;

  // PAR.Page Overflow = LCL.USR Page Number 3.0 - CON.1
  PAR.Page_Overflow = LCL.USR_Page_Number_3_0 - 1;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Page Overflow = LCL.USR Page Number 3.0
  PAR.Page_Overflow = LCL.USR_Page_Number_3_0;

  ENDIF;

  ENDIF;

 }

 // LCL.USR Counter = LCL.Page Overflow + LCL.USR Counter
 LCL.USR_Counter = LCL.Page_Overflow + LCL.USR_Counter;

 //?USER: Exit processing

 //?Double the pages to count the new TERMS page (back overlay)  T15460
 // PAR.Page Nbr - Total (2.0)USR = CON.2 * LCL.USR Counter *
 PAR.Page_Nbr_Total_2_0USR = 2 * LCL.USR_Counter;

}


//?USER: Print required level headings

// SUPPRESSED PRINT Load ID header format

//?USER: Process before print of detail format

//?Load header line and get data for other fields
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Trailer Nbr,Pr Tmp RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1877072;
PARAMETER(DB1.Load_ID);
PARAMETER(LCL.Trailer_Id);
PARAMETER(LCL.Product_Temperature);
PARAMETER(NLL.Actual_Ship_Date);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.COA Temperature Loadout = LCL.Product Temperature
LCL.COA_Temperature_Loadout = LCL.Product_Temperature;

EXECUTE FUNCTION(RTV All Fields         RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1571206;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(NLL.Order_Type_Sales);
PARAMETER(NLL.AR_Customer_Number);
PARAMETER(CUR.Ship_To_Customer);
PARAMETER(LCL.Ship_To_Name);
PARAMETER(LCL.Ship_To_Address_Line_1);
PARAMETER(LCL.Ship_To_Address_Line_2);
PARAMETER(LCL.Ship_To_Address_Line_3);
PARAMETER(LCL.Ship_To_City);
PARAMETER(LCL.Ship_To_State_Code);
PARAMETER(LCL.Ship_To_Zip_Postal_Code);
PARAMETER(LCL.Bill_to_Customer);
PARAMETER(LCL.Bill_to_Name);
PARAMETER(LCL.Bill_to_Address_Line_1);
PARAMETER(LCL.Bill_to_Address_Line_2);
PARAMETER(LCL.Bill_to_Address_Line_3);
PARAMETER(LCL.Bill_to_City);
PARAMETER(LCL.Bill_to_State_Code);
PARAMETER(LCL.Bill_to_Zip_Postal_Code);
PARAMETER(CUR.Customer_Purchase_Order_#);
PARAMETER(NLL.Order_Date);
PARAMETER(NLL.Requested_Ship_Date);
PARAMETER(CUR.USR_Date_ATR);
PARAMETER(NLL.Cancel_Date);
PARAMETER(LCL.Terms_Code);
PARAMETER(NLL.Special_Instructions);
PARAMETER(NLL.Special_Instructions_2);
PARAMETER(NLL.Carrier_Code);
PARAMETER(NLL.Comment_Print_Acknowledge);
PARAMETER(NLL.Comment_Print_Inv_Cr_Memo);
PARAMETER(NLL.Comment_Print_Pick_Slip);
PARAMETER(NLL.Comment_Print_Ship_Doc);
PARAMETER(NLL.Reason_Code);
PARAMETER(NLL.Order_in_Use);
PARAMETER(NLL.Header_Status);
PARAMETER(NLL.Header_Status_Last);
PARAMETER(NLL.Order_Type_Print_Status);
PARAMETER(NLL.Scheduled_Ship_Date);
PARAMETER(NLL.User_Original_Entry);
PARAMETER(NLL.Date_of_Original_Entry);
PARAMETER(NLL.Order_Value_Total);
PARAMETER(NLL.Order_Weight_Total);
PARAMETER(NLL.Credit_Hold);
PARAMETER(NLL.Production_Hold);
PARAMETER(NLL.New_Customer_Hold);
PARAMETER(NLL.Requested_Delivery_Date);
PARAMETER(NLL.Requested_Delivery_Time);
PARAMETER(NLL.Accounts_Receiv_Ent_1);
PARAMETER(NLL.Accounts_Receiv_Ent_2);
PARAMETER(NLL.Load_ID);
PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
PARAMETER(NLL.Rated_Freight);
PARAMETER(NLL.LTL_Flag);
PARAMETER(NLL.Price_Audit);
PARAMETER(NLL.Price_Status);
PARAMETER(NLL.Shipping_Method);
PARAMETER(NLL.Export_Status);
PARAMETER(NLL.Palletize);
PARAMETER(NLL.Shrink_Wrap);
PARAMETER(NLL.Slip_Sheet);
PARAMETER(NLL.Age_Code);
PARAMETER(NLL.Reefer_Temperature);
PARAMETER(NLL.Load_Type);
PARAMETER(NLL.Attach_to_Invoice_Number);
PARAMETER(NLL.Load_Plan_Order);
PARAMETER(NLL.Print_Pick_Slip);
PARAMETER(NLL.Resell_Reference_Number);
PARAMETER(NLL.Special_Comment_1);
PARAMETER(NLL.Special_Comment_2);
PARAMETER(NLL.Affect_Auto_Accruals);
PARAMETER(NLL.Sales_Route_Code);
PARAMETER(NLL.Manager_Level_Code);
PARAMETER(NLL.VP_Level_Code);
PARAMETER(NLL.Attach_to_Order_Number);
PARAMETER(NLL.Reason_for_Price_Audit);
PARAMETER(NLL.Invoice_Number);
PARAMETER(NLL.Invoice_Suffix);
PARAMETER(CUR.Invoice_Date);
PARAMETER(NLL.Event_Code);
PARAMETER(NLL.Trans_Contol_AS400_Plant);
PARAMETER(NLL.Modified_Flag);
PARAMETER(NLL.A_R_order_Value_Total);
PARAMETER(NLL.Billing_Activity_Type);
PARAMETER(NLL.Block_Order_Flag);
PARAMETER(NLL.Order_Certification_Flag);
PARAMETER(NLL.Invoice_Order_Value_Tot);
PARAMETER(NLL.Process_Sts_for_3C);
PARAMETER(NLL.Order_Conf_Fax_Sts);
PARAMETER(NLL.Manifest_Fax_Sts);
PARAMETER(NLL.Invoice_Fax_Sts);
PARAMETER(NLL.Transfer_in_Storage_Ind);
PARAMETER(NLL.Email_Cust_On_Order_Ship);
PARAMETER(NLL.Order_Emailed);
PARAMETER(NLL.Export_Docs_Go_w_Driver);
PARAMETER(NLL.Shipping_Temp_Code_C_F);
PARAMETER(NLL.Broker_Order_Status);
PARAMETER(NLL.Air_Freight_Order);
PARAMETER(NLL.Order_Requires_Review);
PARAMETER(NLL.OH_Load_Plan_Ready);
PARAMETER(NLL.Export_USDA_Approved);
PARAMETER(NLL.HPB_Ship_to_Warehouse);
PARAMETER(NLL.OH_TF_Exempt_Code);
PARAMETER(NLL.OH_Appt_Confirmation_Dt);
PARAMETER(NLL.JPN_Invoice_Issuance_Date);
PARAMETER(NLL.Load_Actual_Shipped_Date);
PARAMETER(NLL.Load_BOL_Complete_Date);
PARAMETER(NLL.Load_Truck_Departure_Date);
PARAMETER(NLL.Maximum_Gross_Weight);
PARAMETER(NLL.Time_of_Original_Entry);
PARAMETER(NLL.OH_Appt_Confirmation_Tm);
PARAMETER(NLL.Load_BOL_Complete_Time);
PARAMETER(NLL.Load_Truck_Departure_Time);
PARAMETER(NLL.Act_Frt_Reference_Amount);
PARAMETER(NLL.Act_Non_Ref_Frt_Amount);
PARAMETER(NLL.OH_Fuel_Surcharge_Amount);
PARAMETER(NLL.OH_Total_Non_Ref_Frt_Amt);
PARAMETER(NLL.OH_Total_Ref_Frt_Amt);
PARAMETER(NLL.Claim_Number);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(NLL.Job_Time);
PARAMETER(NLL.User_Id);
PARAMETER(NLL.Job_Name);
PARAMETER(NLL.Job_Date);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?E2013 RMC 3/22/12 Trans date is Act ship date now- print if invcd
CASE;

// IF CUR.Invoice Date is entered
IF CUR.Invoice_Date <> *ZERO;

// CUR.Invoice Date = CUR.USR Date - ATR
CUR.Invoice_Date = CUR.USR_Date_ATR;

ENDIF;

// CUR.Text USR 8 = CON.Ship Dt:
CUR.Text_USR_8 = 'Ship Dt:';

// CUR.Text USR 9 = CON.Trans Dt:
CUR.Text_USR_9 = 'Trans Dt:';

EXECUTE FUNCTION(RTV Ship To Whse-HPB  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1962118;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(LCL.Customer_Purchase_Order_#);
PARAMETER(LCL.HPB_Ship_to_Warehouse);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Desc, status       RT) TYPE(RTVOBJ) FILE(CAAOREP)          AC1260512;
PARAMETER(DB1.Company_Number);
PARAMETER(LCL.Terms_Code);
PARAMETER(CUR.Description);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV 1st Item Code     RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1632757;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.Item_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(1);
PARAMETER(1);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.Trans_Contol_AS400_Plant);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Trans_Contol_AS400_Plant);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// WRK.Item Code 5.0 = LCL.Item Code
WRK.Item_Code_5_0 = LCL.Item_Code;

// WRK.Text USR 5 = CVTVAR(WRK.Item Code 5.0)
WRK.Text_USR_5 = CVTVAR(WRK.Item_Code_5_0);

// LCL.COA OMS Item Code = WRK.Text USR 5
LCL.COA_OMS_Item_Code = WRK.Text_USR_5;

EXECUTE FUNCTION(RTV HPB fields/dlv po RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC1973857;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(LCL.OHE_Override_Type_Code);
PARAMETER(LCL.HPB_COA_Batch_Number);
PARAMETER(CUR.Delivery_P_O_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv HPB fields,type   RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2179818;
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.Production_Warehouse_Code);
PARAMETER(LCL.Warehouse_Type);
PARAMETER(LCL.Warehouse_Location);
PARAMETER(LCL.WHS_Req_Meter_Reading_Shp);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Production Warehouse Code is Not Blanks
IF LCL.Production_Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(Rtv Acct Co          RT) TYPE(RTVOBJ) FILE(CAADREP)            AC1802492;
PARAMETER(LCL.Production_Warehouse_Code);
PARAMETER(LCL.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Acct Co          RT) TYPE(RTVOBJ) FILE(CAADREP)            AC1802492;
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

CASE;

// IF LCL.HPB Ship to Warehouse is not entered
IF LCL.HPB_Ship_to_Warehouse = *BLANK;

EXECUTE FUNCTION(RTV all used fields 2  RT) TYPE(RTVOBJ) FILE(PMCAREP)          AC1933793;
PARAMETER(DB1.Company_Number);
PARAMETER(LCL.COA_Bio_diesel_Fuel_Code);
PARAMETER(LCL.COA_Bio_dsl_Fuel_Cd_Descr);
PARAMETER(CUR.COA_Producer_Regist_Nbr);
PARAMETER(CUR.COA_Employer_ID);
PARAMETER(NLL.COA_Sold_From_Address);
PARAMETER(LCL.COA_Sold_From_Name);
PARAMETER(CUR.COA_ULSD_Company_#);
PARAMETER(CUR.COA_ULSD_Facility_#);
PARAMETER(LCL.COA_RIN_Equivalence_Valu);
PARAMETER(LCL.COA_RIN_Renewable_Enrgy);
PARAMETER(LCL.COA_RIN_Type_Flag);
PARAMETER(NLL.COA_Density_Loadout);
PARAMETER(NLL.COA_Density_Reference);
PARAMETER(NLL.COA_Temperature_Loadout);
PARAMETER(LCL.COA_Temperature_Ref);
PARAMETER(LCL.COA_BOL_Percent);
PARAMETER(NLL.COA_Sale_Location);
PARAMETER(NLL.COA_Active_Whse_Tank_1);
PARAMETER(NLL.COA_Active_Whse_Tank_2);
PARAMETER(NLL.COA_Active_Whse_Tank_3);
PARAMETER(NLL.COA_Active_Whse_Tank_4);
PARAMETER(NLL.COA_Active_Whse_Tank_5);
PARAMETER(NLL.COA_Active_Whse_Tank_6);
PARAMETER(LCL.COA_Temp_Conv_Factor_1);
PARAMETER(LCL.Operation_Factor_1);
PARAMETER(LCL.COA_Temp_Conv_Factor_2);
PARAMETER(LCL.Operation_Factor_2);
PARAMETER(NLL.COA_RFS_Renew_Fuel_Code);
PARAMETER(NLL.COA_RFS_Rnwbl_Feedstock);
PARAMETER(LCL.COA_OMS_Item_Code);
PARAMETER(LCL.COA_Fuel_Desc2_Prop_Value);
PARAMETER(NLL.Record_Status);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?print blank line so everything prints down 1 line  9-16-22
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV all used fields 2  RT) TYPE(RTVOBJ) FILE(PMCAREP)          AC1933793;
PARAMETER(LCL.Accounting_Company);
PARAMETER(LCL.COA_Bio_diesel_Fuel_Code);
PARAMETER(LCL.COA_Bio_dsl_Fuel_Cd_Descr);
PARAMETER(CUR.COA_Producer_Regist_Nbr);
PARAMETER(CUR.COA_Employer_ID);
PARAMETER(NLL.COA_Sold_From_Address);
PARAMETER(LCL.COA_Sold_From_Name);
PARAMETER(CUR.COA_ULSD_Company_#);
PARAMETER(CUR.COA_ULSD_Facility_#);
PARAMETER(LCL.COA_RIN_Equivalence_Valu);
PARAMETER(LCL.COA_RIN_Renewable_Enrgy);
PARAMETER(LCL.COA_RIN_Type_Flag);
PARAMETER(NLL.COA_Density_Loadout);
PARAMETER(NLL.COA_Density_Reference);
PARAMETER(NLL.COA_Temperature_Loadout);
PARAMETER(LCL.COA_Temperature_Ref);
PARAMETER(LCL.COA_BOL_Percent);
PARAMETER(NLL.COA_Sale_Location);
PARAMETER(NLL.COA_Active_Whse_Tank_1);
PARAMETER(NLL.COA_Active_Whse_Tank_2);
PARAMETER(NLL.COA_Active_Whse_Tank_3);
PARAMETER(NLL.COA_Active_Whse_Tank_4);
PARAMETER(NLL.COA_Active_Whse_Tank_5);
PARAMETER(NLL.COA_Active_Whse_Tank_6);
PARAMETER(LCL.COA_Temp_Conv_Factor_1);
PARAMETER(LCL.Operation_Factor_1);
PARAMETER(LCL.COA_Temp_Conv_Factor_2);
PARAMETER(LCL.Operation_Factor_2);
PARAMETER(NLL.COA_RFS_Renew_Fuel_Code);
PARAMETER(NLL.COA_RFS_Rnwbl_Feedstock);
PARAMETER(LCL.COA_OMS_Item_Code);
PARAMETER(LCL.COA_Fuel_Desc2_Prop_Value);
PARAMETER(NLL.Record_Status);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

CASE;

// IF LCL.Warehouse Type is Blended
IF LCL.Warehouse_Type = 'BL';

EXECUTE FUNCTION(RTV ULSD Facility     RT) TYPE(RTVOBJ) FILE(PMCAREP)           AC2183653;
PARAMETER(0);
PARAMETER(CUR.COA_ULSD_Facility_#);
PARAMETER(LCL.COA_OMS_Item_Code);
PARAMETER(CUR.HPB_ULSD_Facility_ID);
{
 //?USER: Process Data record

 //?RMC - get the other facility number
 CASE;

 // IF DB1.COA ULSD Facility # NE PAR.COA ULSD Facility #
 IF DB1.COA_ULSD_Facility_# <> PAR.COA_ULSD_Facility_#;

 // PAR.HPB ULSD Facility ID = DB1.COA ULSD Facility #
 PAR.HPB_ULSD_Facility_ID = DB1.COA_ULSD_Facility_#;

 QUIT;

 ENDIF;

}


// CUR.Text 3 Length USR = CON.And
CUR.Text_3_Length_USR = 'And';

ENDIF;

ENDIF;

//?Load producer address and other details
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Name = LCL.COA Sold From Name
CUR.Name = LCL.COA_Sold_From_Name;

// CUR.@Blank for 6 = CON.Phone:
CUR.@Blank_for_6 = 'Phone:';

// CUR.USR 15 Text           USR = CON.Employer ID#:
CUR.USR_15_Text_USR = 'Employer ID#:';

// CUR.Description 21A Usr = CON.EPA RFS Company ID #:
CUR.Description_21A_Usr = 'EPA RFS Company ID #:';

EXECUTE FUNCTION(RTV Co Addr & Phone FaxRT) TYPE(RTVOBJ) FILE(CAABREP)          AC1833051;
PARAMETER(DB1.Company_Number);
PARAMETER(NLL.Name);
PARAMETER(CUR.USR_Compressed_Address_1);
PARAMETER(LCL.Address_Line_2);
PARAMETER(LCL.Address_Line_3);
PARAMETER(LCL.City);
PARAMETER(LCL.Zip_Postal_Code);
PARAMETER(LCL.Telephone_Number_FF);
PARAMETER(LCL.Fax_Number_FF);
PARAMETER(LCL.State_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.USR Compressed Address 2 = CONCAT(LCL.City,LCL.State Code,CON.1)
LCL.USR_Compressed_Address_2 = LCL.City + LCL.State_Code (1);

// CUR.USR Compressed Address 2 = CONCAT(LCL.USR Compressed Address 2,LCL.Zip/Postal Code,CON.1)
CUR.USR_Compressed_Address_2 = LCL.USR_Compressed_Address_2 + LCL.Zip_Postal_Code (1);

// CUR.USR Compressed Address 3 = LCL.Telephone Number FF
CUR.USR_Compressed_Address_3 = LCL.Telephone_Number_FF;

// CUR.Condition Desc. 2  USR = CON.EPA RFS Facility ID #:
CUR.Condition_Desc_2_USR = 'EPA RFS Facility ID #:';

ENDIF;

//?Load Bill-to and Ship-to addresses
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?If not Transload BOL -- fill in Bill To data
CASE;

// IF PAR.Export Status is Not Yes
IF PAR.Export_Status = *BLANK/'N';

// CUR.Bill to Name = LCL.Bill to Name
CUR.Bill_to_Name = LCL.Bill_to_Name;

// CUR.Bill to Address Line 1 = LCL.Bill to Address Line 1
CUR.Bill_to_Address_Line_1 = LCL.Bill_to_Address_Line_1;

//?Squash out blank line if address line 2 is blank
CASE;

// IF LCL.Bill to Address Line 2 is Blank
IF LCL.Bill_to_Address_Line_2 = *BLANK;

// LCL.Bill to Address Line 2 = CONCAT(LCL.Bill to City,LCL.Bill to State Code,CON.1)
LCL.Bill_to_Address_Line_2 = LCL.Bill_to_City + LCL.Bill_to_State_Code (1);

// CUR.Bill to Address Line 2 = CONCAT(LCL.Bill to Address Line 2,LCL.Bill to Zip/Postal Code,CON.1)
CUR.Bill_to_Address_Line_2 = LCL.Bill_to_Address_Line_2 + LCL.Bill_to_Zip_Postal_Code (1);

//?Squash out blank line if address line 2 is blank
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Bill to Address Line 2 = LCL.Bill to Address Line 2
CUR.Bill_to_Address_Line_2 = LCL.Bill_to_Address_Line_2;

// LCL.Bill to Address Line 3 = CONCAT(LCL.Bill to City,LCL.Bill to State Code,CON.1)
LCL.Bill_to_Address_Line_3 = LCL.Bill_to_City + LCL.Bill_to_State_Code (1);

// CUR.Bill to Address Line 3 = CONCAT(LCL.Bill to Address Line 3,LCL.Bill to Zip/Postal Code,CON.1)
CUR.Bill_to_Address_Line_3 = LCL.Bill_to_Address_Line_3 + LCL.Bill_to_Zip_Postal_Code (1);

ENDIF;

EXECUTE FUNCTION(RTV Customer A/R Cust  RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1210709;
PARAMETER(CUR.Ship_To_Customer);
PARAMETER(LCL.AR_Customer_Number);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv HPB Cust Fields   RT) TYPE(RTVOBJ) FILE(PDNIREP)           AC1858717;
PARAMETER(DB1.Company_Number);
PARAMETER(LCL.AR_Customer_Number);
PARAMETER(LCL.HPB_Employer_ID_#);
PARAMETER(LCL.HPB_ULSD_Company_#);
PARAMETER(LCL.HPB_ULSD_Facility_ID);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CUR.Employer ID bill to # = LCL.HPB Employer ID #
CUR.Employer_ID_bill_to_# = LCL.HPB_Employer_ID_#;

// CUR.ULSD Comp bill to # = LCL.HPB ULSD Company #
CUR.ULSD_Comp_bill_to_# = LCL.HPB_ULSD_Company_#;

// CUR.ULSD Facility bill # = LCL.HPB ULSD Facility ID
CUR.ULSD_Facility_bill_# = LCL.HPB_ULSD_Facility_ID;

// CUR.Employer ID bill to hdg = CON.Employer ID#:
CUR.Employer_ID_bill_to_hdg = 'Employer ID#:';

// CUR.ULSD Comp bill to hdg = CON.EPA RFS Company ID #:
CUR.ULSD_Comp_bill_to_hdg = 'EPA RFS Company ID #:';

//?If Transload Sts entered, then Print "Via"  transload station name/address
CASE;

// IF DB1.HPB Transload Station NE WRK.Blank for 4           USR
IF DB1.HPB_Transload_Station <> WRK.Blank_for_4_USR;

// CUR.Text USR 4 = CON.Via:
CUR.Text_USR_4 = 'Via:';

EXECUTE FUNCTION(Rtv Transload Stn All RT) TYPE(RTVOBJ) FILE(PMDLREP)           AC1869856;
PARAMETER(DB1.HPB_Transload_Station);
PARAMETER(CUR.COA_Station_Name);
PARAMETER(CUR.Address_1);
PARAMETER(LCL.Address_2);
PARAMETER(LCL.Address_3);
PARAMETER(LCL.City);
PARAMETER(LCL.State_Code);
PARAMETER(LCL.Zip_Postal_Code);
PARAMETER(NLL.COA_ULSD_Company_#);
PARAMETER(NLL.COA_ULSD_Facility_#);
PARAMETER(NLL.COA_Employer_ID);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Squash out blank line if address line 2 is blank
CASE;

// IF LCL.Address 2 is blank
IF LCL.Address_2 = *BLANK;

// LCL.Address 2 = CONCAT(LCL.City,LCL.State Code,CON.1)
LCL.Address_2 = LCL.City + LCL.State_Code (1);

// CUR.Address 2 = CONCAT(LCL.Address 2,LCL.Zip/Postal Code,CON.1)
CUR.Address_2 = LCL.Address_2 + LCL.Zip_Postal_Code (1);

//?Squash out blank line if address line 2 is blank
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Address 2 = LCL.Address 2
CUR.Address_2 = LCL.Address_2;

// LCL.Address 3 = CONCAT(LCL.City,LCL.State Code,CON.1)
LCL.Address_3 = LCL.City + LCL.State_Code (1);

// CUR.Address 3 = CONCAT(LCL.Address 3,LCL.Zip/Postal Code,CON.1)
CUR.Address_3 = LCL.Address_3 + LCL.Zip_Postal_Code (1);

ENDIF;

//?If Transload Sts entered, then Print "Via"  transload station name/address
// IF *OTHERWISE
IF *OTHERWISE;

//?C2265 9/24/12 RMC print whse addr if transload=' '
// CUR.Text USR 4 = CON.Via:
CUR.Text_USR_4 = 'Via:';

EXECUTE FUNCTION(RTV Warehouse Address  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1211418;
PARAMETER(LCL.Warehouse_Code);
PARAMETER(CUR.COA_Station_Name);
PARAMETER(NLL.Address_Line_1);
PARAMETER(NLL.Address_Line_2);
PARAMETER(NLL.Address_Line_3);
PARAMETER(LCL.City);
PARAMETER(LCL.Zip_Postal_Code);
PARAMETER(LCL.State_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Address 1 = CONCAT(LCL.City,LCL.State Code,CON.1)
LCL.Address_1 = LCL.City + LCL.State_Code (1);

// CUR.Address 1 = CONCAT(LCL.Address 1,LCL.Zip/Postal Code,CON.1)
CUR.Address_1 = LCL.Address_1 + LCL.Zip_Postal_Code (1);

ENDIF;

EXECUTE FUNCTION(RTV Type Code          RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1441836;
PARAMETER(DB1.Company_Number);
PARAMETER(LCL.AR_Customer_Number);
PARAMETER(LCL.Type_Code);
PARAMETER(NLL.Customer_Group_Code);
PARAMETER(NLL.Customer_Group_Code_2);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?E1762 9/30/11 use type code override from ohe
CASE;

// IF LCL.OHE Override Type Code is No
IF LCL.OHE_Override_Type_Code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Type Code = LCL.OHE Override Type Code
LCL.Type_Code = LCL.OHE_Override_Type_Code;

ENDIF;

//?If not Transload BOL -- fill in Bill To data
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Type Code          RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1441836;
PARAMETER(DB1.Company_Number);
PARAMETER(CUR.Ship_To_Customer);
PARAMETER(LCL.Type_Code);
PARAMETER(NLL.Customer_Group_Code);
PARAMETER(NLL.Customer_Group_Code_2);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// CUR.Employer ID ship to hdg = CON.Employer ID#:
CUR.Employer_ID_ship_to_hdg = 'Employer ID#:';

// CUR.ULSD Comp ship to hdg = CON.EPA RFS Company ID #:
CUR.ULSD_Comp_ship_to_hdg = 'EPA RFS Company ID #:';

//?If Not transload Bol, print cust ship to, else print Transload Stn
CASE;

// IF PAR.Export Status is Not Yes
IF PAR.Export_Status = *BLANK/'N';

// CUR.Ship To Name = LCL.Ship To Name
CUR.Ship_To_Name = LCL.Ship_To_Name;

// CUR.Ship To Address Line 1 = LCL.Ship To Address Line 1
CUR.Ship_To_Address_Line_1 = LCL.Ship_To_Address_Line_1;

//?Squash out blank line if address line 2 is blank
CASE;

// IF LCL.Ship To Address Line 2 is Blank
IF LCL.Ship_To_Address_Line_2 = *BLANK;

// LCL.Ship To Address Line 2 = CONCAT(LCL.Ship To City,LCL.Ship To State Code,CON.1)
LCL.Ship_To_Address_Line_2 = LCL.Ship_To_City + LCL.Ship_To_State_Code (1);

// CUR.Ship To Address Line 2 = CONCAT(LCL.Ship To Address Line 2,LCL.Ship To Zip/Postal Code,CON.1)
CUR.Ship_To_Address_Line_2 = LCL.Ship_To_Address_Line_2 + LCL.Ship_To_Zip_Postal_Code (1);

//?Squash out blank line if address line 2 is blank
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Ship To Address Line 2 = LCL.Ship To Address Line 2
CUR.Ship_To_Address_Line_2 = LCL.Ship_To_Address_Line_2;

// LCL.Ship To Address Line 3 = CONCAT(LCL.Ship To City,LCL.Ship To State Code,CON.1)
LCL.Ship_To_Address_Line_3 = LCL.Ship_To_City + LCL.Ship_To_State_Code (1);

// CUR.Ship To Address Line 3 = CONCAT(LCL.Ship To Address Line 3,LCL.Ship To Zip/Postal Code,CON.1)
CUR.Ship_To_Address_Line_3 = LCL.Ship_To_Address_Line_3 + LCL.Ship_To_Zip_Postal_Code (1);

ENDIF;

EXECUTE FUNCTION(Rtv HPB Cust Fields   RT) TYPE(RTVOBJ) FILE(PDNIREP)           AC1858717;
PARAMETER(DB1.Company_Number);
PARAMETER(CUR.Ship_To_Customer);
PARAMETER(LCL.HPB_Employer_ID_#);
PARAMETER(LCL.HPB_ULSD_Company_#);
PARAMETER(LCL.HPB_ULSD_Facility_ID);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CUR.Employer ID ship to # = LCL.HPB Employer ID #
CUR.Employer_ID_ship_to_# = LCL.HPB_Employer_ID_#;

// CUR.ULSD Comp ship to # = LCL.HPB ULSD Company #
CUR.ULSD_Comp_ship_to_# = LCL.HPB_ULSD_Company_#;

// CUR.ULSD Facility ship # = LCL.HPB ULSD Facility ID
CUR.ULSD_Facility_ship_# = LCL.HPB_ULSD_Facility_ID;

//?If Not transload Bol, print cust ship to, else print Transload Stn
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Transload Stn All RT) TYPE(RTVOBJ) FILE(PMDLREP)           AC1869856;
PARAMETER(DB1.HPB_Transload_Station);
PARAMETER(CUR.Ship_To_Name);
PARAMETER(CUR.Ship_To_Address_Line_1);
PARAMETER(LCL.Ship_To_Address_Line_2);
PARAMETER(LCL.Ship_To_Address_Line_3);
PARAMETER(LCL.Ship_To_City);
PARAMETER(LCL.Ship_To_State_Code);
PARAMETER(LCL.Ship_To_Zip_Postal_Code);
PARAMETER(CUR.ULSD_Comp_ship_to_#);
PARAMETER(CUR.ULSD_Facility_ship_#);
PARAMETER(CUR.Employer_ID_ship_to_#);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Squash out blank line if address line 2 is blank
CASE;

// IF LCL.Ship To Address Line 2 is Blank
IF LCL.Ship_To_Address_Line_2 = *BLANK;

// LCL.Ship To Address Line 2 = CONCAT(LCL.Ship To City,LCL.Ship To State Code,CON.1)
LCL.Ship_To_Address_Line_2 = LCL.Ship_To_City + LCL.Ship_To_State_Code (1);

// CUR.Ship To Address Line 2 = CONCAT(LCL.Ship To Address Line 2,LCL.Ship To Zip/Postal Code,CON.1)
CUR.Ship_To_Address_Line_2 = LCL.Ship_To_Address_Line_2 + LCL.Ship_To_Zip_Postal_Code (1);

//?Squash out blank line if address line 2 is blank
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Ship To Address Line 2 = LCL.Ship To Address Line 2
CUR.Ship_To_Address_Line_2 = LCL.Ship_To_Address_Line_2;

// LCL.Ship To Address Line 3 = CONCAT(LCL.Ship To City,LCL.Ship To State Code,CON.1)
LCL.Ship_To_Address_Line_3 = LCL.Ship_To_City + LCL.Ship_To_State_Code (1);

// CUR.Ship To Address Line 3 = CONCAT(LCL.Ship To Address Line 3,LCL.Ship To Zip/Postal Code,CON.1)
CUR.Ship_To_Address_Line_3 = LCL.Ship_To_Address_Line_3 + LCL.Ship_To_Zip_Postal_Code (1);

ENDIF;

ENDIF;

//?If BLender, count Manif Dtl -- print nbr RINS on last manif dtl line
CASE;

// IF LCL.Type Code is Blender for Biodiesel
IF LCL.Type_Code = 'BL';

// LCL.Count USR = CON.*ZERO
LCL.Count_USR = *ZERO;

EXECUTE FUNCTION(RTV Count for BOL     RT) TYPE(RTVOBJ) FILE(OMFNCPP)           AC2003791;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.Count_USR);
{
 //?USER: Process Data record

 // PAR.Count USR = CON.1 + PAR.Count USR
 PAR.Count_USR = 1 + PAR.Count_USR;

}


ENDIF;

ENDIF;

//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : PRT HPB BOL Info-fax   PO
EXECUTE FUNCTION(PRT HPB BOL Info-fax   PO) TYPE(PRTOBJ);
PARAMETER(DB1.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(LCL.COA_Bio_diesel_Fuel_Code);
PARAMETER(LCL.COA_Bio_dsl_Fuel_Cd_Descr);
PARAMETER(LCL.COA_ULSD_Company_#);
PARAMETER(CUR.COA_ULSD_Facility_#);
PARAMETER(LCL.COA_RIN_Equivalence_Valu);
PARAMETER(LCL.COA_RIN_Renewable_Enrgy);
PARAMETER(LCL.COA_RIN_Type_Flag);
PARAMETER(LCL.COA_Density_Loadout);
PARAMETER(LCL.COA_Density_Reference);
PARAMETER(LCL.COA_Temperature_Loadout);
PARAMETER(LCL.COA_Temperature_Ref);
PARAMETER(LCL.COA_BOL_Percent);
PARAMETER(LCL.Page_Nbr_of_2_0_USR);
PARAMETER(LCL.Page_Nbr_Total_2_0USR);
PARAMETER(LCL.COA_Fuel_Desc2_Prop_Value);
PARAMETER(LCL.Accounting_Company);
PARAMETER(LCL.Type_Code);
PARAMETER(LCL.Count_USR);
PARAMETER(LCL.Manifest_Dtl_Record_Count);
{
 //?USER: Process Data record

 // PAR.Count USR = CON.1 + PAR.Count USR
 PAR.Count_USR = 1 + PAR.Count_USR;

}


//?USER: Print required level totals

// SUPPRESSED PRINT Load ID totals format

