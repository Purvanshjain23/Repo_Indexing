// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNM8XFR
// ?Date: 14.08.2025 Time: 03:45:45
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?FP1322- Allow user to select the rin, then create the manifest dtl &
//?manifest dtl SEL RIN rcds
//? this brings back the order from the BUY rin thats now being sold (SEL)
// LCL.Company Number = PAR.Company Number
LCL.Company_Number = PAR.Company_Number;

// LCL.Warehouse Code = PAR.Warehouse Code
LCL.Warehouse_Code = PAR.Warehouse_Code;

// PAR.Status - Y or N = CND.no
PAR.Status_Y_or_N = 'N';

// Call program Zzz RIN for Shipmnt   SL.
CALL PROGRAM(Zzz RIN for Shipmnt   SL) ('PNM7SRR');
PARAMETER(LCL.Company_Number);
PARAMETER(PAR.COA_ULSD_Company_#);
PARAMETER(PAR.COA_Batch_Number);
PARAMETER(PAR.COA_Batch_Header_RIN_Seq);
PARAMETER(PAR.COA_Batch_Hdr_RIN_Seq_Sec);
PARAMETER(PAR.COA_Batch_Header_RIN);
PARAMETER(PAR.COA_RIN_SSSSSSSS);
PARAMETER(PAR.COA_RIN_EEEEEEEE);
PARAMETER(PAR.COA_RIN_Volume_in_Gallons);
PARAMETER(LCL.Order_Number);
PARAMETER(LCL.Order_Sequence_Number);
PARAMETER(LCL.Order_Secondary_Line_Seq);
PARAMETER(LCL.Case_Sequence_Number);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.COA_RIN_Type_Flag);
PARAMETER(LCL.COA_Shipping_Company);

//?Create Manifest & manifest rin sell rcd from order selected
CASE;

// IF PAR.COA ULSD Company # is Entered
IF PAR.COA_ULSD_Company_# <> *BLANK;

CASE;

// IF LCL.Order Number is Greater then zero
IF LCL.Order_Number > *ZERO;

//?----- Retrieve from selected order -----
EXECUTE FUNCTION(RTV HPB to Gen SEL RINRT) TYPE(RTVOBJ) FILE(OMFNCPP)           AC1962017;
PARAMETER(LCL.COA_Shipping_Company);
PARAMETER(LCL.Order_Number);
PARAMETER(LCL.Order_Sequence_Number);
PARAMETER(LCL.Order_Secondary_Line_Seq);
PARAMETER(LCL.Case_Sequence_Number);
PARAMETER(LCL.Case_Quantity);
PARAMETER(LCL.Case_Weight);
PARAMETER(LCL.HPB_Meter_Net_Gallon);
PARAMETER(LCL.HPB_COA_Batch_Number);
PARAMETER(LCL.HPB_Meter_Start_Gallon);
PARAMETER(LCL.HPB_Meter_Ending_Gallon);
PARAMETER(LCL.HPB_Meter_Total_Gallon);
PARAMETER(LCL.HPB_Meter_Net_Weight);
PARAMETER(LCL.HPB_Density_Ref_Gravity);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Load ID            RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1384375;
PARAMETER(LCL.COA_Shipping_Company);
PARAMETER(LCL.Order_Number);
PARAMETER(LCL.Load_ID);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV HPB fields         RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC1853458;
PARAMETER(LCL.COA_Shipping_Company);
PARAMETER(LCL.Order_Number);
PARAMETER(LCL.HPB_COA_Batch_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV HPB-temp,CarrBrk  RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1897587;
PARAMETER(LCL.Load_ID);
PARAMETER(LCL.Product_Temperature);
PARAMETER(NLL.Carrier_Broker);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?----- Create/ Update HPB data for the order that is being shipped
EXECUTE FUNCTION(Crt Manifest Detl-HPB IF) TYPE(EXCINTFUN)                      AC1962015;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(LCL.Case_Quantity);
PARAMETER(LCL.Case_Weight);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(*ZERO);
PARAMETER(LCL.HPB_Meter_Net_Gallon);
PARAMETER(LCL.HPB_COA_Batch_Number);
PARAMETER(LCL.HPB_Meter_Start_Gallon);
PARAMETER(LCL.HPB_Meter_Ending_Gallon);
PARAMETER(LCL.HPB_Meter_Total_Gallon);
PARAMETER(LCL.HPB_Meter_Net_Weight);
PARAMETER(LCL.HPB_Density_Ref_Gravity);
PARAMETER(PAR.COA_ULSD_Company_#);
PARAMETER(PAR.COA_Batch_Number);
PARAMETER(PAR.COA_Batch_Header_RIN_Seq);
PARAMETER(PAR.COA_Batch_Hdr_RIN_Seq_Sec);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Next Case Seq#    RT) TYPE(RTVOBJ) FILE(OMFNCPP)           AC1513160;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Case_Sequence_Number);
 {
  //?USER: Processing if Data record not found

  // PAR.Case Sequence Number = CON.1
  PAR.Case_Sequence_Number = 1;

  //?USER: Process Data record

  // PAR.Case Sequence Number = DB1.Case Sequence Number + CON.1
  PAR.Case_Sequence_Number = DB1.Case_Sequence_Number + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Manifest Detail   CR) TYPE(CRTOBJ) FILE(OMFNCPP)           AC1513165;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Case_Sequence_Number);
 PARAMETER(PAR.Case_Quantity);
 PARAMETER(PAR.Case_Weight);
 PARAMETER(PAR.Inventory_Updated_Flag);
 PARAMETER(PAR.Label_Date);
 PARAMETER(PAR.PT_Serial_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Manifest_Shift);
 PARAMETER(PAR.HPB_Meter_Net_Gallon);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Manifest_Unused_Status_1A);
 PARAMETER(WRK.Manifest_Unused_Status_2A);
 PARAMETER(*ZERO);
 PARAMETER(PAR.HPB_COA_Batch_Number);
 PARAMETER(PAR.HPB_Meter_Start_Gallon);
 PARAMETER(PAR.HPB_Meter_Ending_Gallon);
 PARAMETER(PAR.HPB_Meter_Total_Gallon);
 PARAMETER(PAR.HPB_Meter_Net_Weight);
 PARAMETER(PAR.HPB_Density_Ref_Gravity);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Job_Time);
 PARAMETER(PAR.User_Id);
 PARAMETER(PAR.Job_Name);
 PARAMETER(PAR.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?batch's company is in par.Company number 041405
 EXECUTE FUNCTION(Crt Manifest Dtl RIN  CR) TYPE(CRTOBJ) FILE(PNFPCPP)           AC1962249;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Case_Sequence_Number);
 PARAMETER(PAR.COA_ULSD_Company_#);
 PARAMETER(PAR.COA_Batch_Number);
 PARAMETER(PAR.COA_Batch_Header_RIN_Seq);
 PARAMETER(PAR.COA_Batch_Hdr_RIN_Seq_Sec);
 PARAMETER(PAR.HPB_Meter_Net_Gallon);
 PARAMETER(PAR.Company_Number_041405);
 PARAMETER(LCL.MDRS_Unused_sts);
 PARAMETER(PAR.Record_Status);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

 }

}


EXECUTE FUNCTION(CHG Prod Temp-HPB     CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC1877057;
PARAMETER(PAR.Load_ID);
PARAMETER(LCL.Product_Temperature);
PARAMETER(PAR.Carrier_Broker);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(CHG HPB Batch/Load    CH) TYPE(CHGOBJ) FILE(PMAMREP)           AC1855750;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Load_ID);
PARAMETER(*ZERO);
PARAMETER(LCL.HPB_COA_Batch_Number);
{
 //?USER: Processing before Data update

 // DB1.Job Time = JOB.*Job time
 DB1.Job_Time = JOB.*Job_time;

 // DB1.Job Date = JOB.*Job date
 DB1.Job_Date = JOB.*Job_date;

 // DB1.Job Name = JOB.*PROGRAM
 DB1.Job_Name = JOB.*PROGRAM;

 // DB1.User Id = JOB.*USER
 DB1.User_Id = JOB.*USER;

}


// PAR.Status - Y or N = CND.yes
PAR.Status_Y_or_N = 'Y';

ENDIF;

//?Update selected RIN with sold sts and gallons sold
EXECUTE FUNCTION(Rtv Upd Ref Ord f/BUY RT) TYPE(RTVOBJ) FILE(PMDACPP)           AC1962198;
PARAMETER(LCL.Company_Number);
PARAMETER(PAR.COA_ULSD_Company_#);
PARAMETER(PAR.COA_Batch_Number);
PARAMETER(PAR.COA_Batch_Header_RIN_Seq);
PARAMETER(PAR.COA_Batch_Hdr_RIN_Seq_Sec);
PARAMETER('F');
PARAMETER(PAR.COA_RIN_Volume_in_Gallons);
PARAMETER(LCL.COA_BHR_Loadout_Temp);
{
 //?USER: Process Data record

 CASE;

 // IF PAR.COA RIN Gallons Sold is eq 0
 IF PAR.COA_RIN_Gallons_Sold = *ZERO;

 // LCL.COA RIN Gallons Sold = DB1.COA RIN Volume in Gallons
 LCL.COA_RIN_Gallons_Sold = DB1.COA_RIN_Volume_in_Gallons;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.COA RIN Gallons Sold = PAR.COA RIN Gallons Sold
 LCL.COA_RIN_Gallons_Sold = PAR.COA_RIN_Gallons_Sold;

 ENDIF;

 CASE;

 // IF DB1.COA BHR Net Galls to Sell is Not Entered
 IF DB1.COA_BHR_Net_Galls_to_Sell = *ZERO;

 // LCL.COA RIN SoldFull/Splt Sts = CND.Fully Sold
 LCL.COA_RIN_SoldFull_Splt_Sts = 'F';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.COA RIN SoldFull/Splt Sts = CND.Split
 LCL.COA_RIN_SoldFull_Splt_Sts = 'S';

 ENDIF;

 EXECUTE FUNCTION(Chg COA Batch Hdr RIN CH) TYPE(CHGOBJ) FILE(PMDACPP)           AC1858627;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.COA_ULSD_Company_#);
 PARAMETER(DB1.COA_Batch_Number);
 PARAMETER(DB1.COA_Batch_Header_RIN_Seq);
 PARAMETER(DB1.COA_Batch_Hdr_RIN_Seq_Sec);
 PARAMETER(DB1.COA_Batch_Header_RIN);
 PARAMETER(DB1.COA_RIN_SSSSSSSS);
 PARAMETER(DB1.COA_RIN_EEEEEEEE);
 PARAMETER(DB1.COA_RIN_Volume_in_Gallons);
 PARAMETER(DB1.COA_RIN_Transaction_Date);
 PARAMETER(DB1.COA_RIN_Transaction_Time);
 PARAMETER(DB1.COA_RIN_Trans_Partner_Nm);
 PARAMETER(DB1.COA_RIN_Trans_Partner_Id);
 PARAMETER(DB1.COA_Retired_RIN_Reason_Cd);
 PARAMETER(DB1.COA_Retired_RIN_Date);
 PARAMETER(DB1.COA_Retired_RIN_Time);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Case_Sequence_Number);
 PARAMETER(DB1.COA_Rail_Car);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.COA_Date_of_1st_Load);
 PARAMETER(DB1.COA_RIN_Unused_Time);
 PARAMETER(DB1.COA_RIN_Modified_Sts);
 PARAMETER(DB1.COA_RIN_Unused_Text);
 PARAMETER(LCL.COA_RIN_SoldFull_Splt_Sts);
 PARAMETER(LCL.COA_RIN_Gallons_Sold);
 PARAMETER(DB1.COA_Ship_To_Warehouse);
 PARAMETER(DB1.COA_RIN_Type_Flag);
 PARAMETER(DB1.COA_RIN_Customer_PO#);
 PARAMETER(DB1.COA_Shipping_Company);
 PARAMETER(DB1.COA_Ref_Load_Id);
 PARAMETER(DB1.COA_Reference_Batch_NbrNU);
 PARAMETER(DB1.COA_Reference_Btch_Seq_NU);
 PARAMETER(DB1.RFS_Compliance_Period);
 PARAMETER(DB1.RFS_Report_Year);
 PARAMETER(DB1.COA_RIN_Int_Ext_Company);
 PARAMETER(DB1.COA_BHR_Unused_Sts_2);
 PARAMETER(DB1.COA_BHR_Net_Galls_to_Sell);
 PARAMETER(DB1.COA_BHR_Unused_Date_2);
 PARAMETER(DB1.COA_BHR_Unused_Text);
 PARAMETER(DB1.COA_BHR_Loadout_Temp);
 PARAMETER(DB1.COA_ULSD_Facility_#);
 PARAMETER(DB1.COA_Batch_RIN_Volume);
 PARAMETER(DB1.COA_RIN_Quantity);
 PARAMETER(DB1.RFS_Transaction_Type);
 PARAMETER(DB1.RFS_Trans_Reason_Code);
 PARAMETER(DB1.RFS_Fuel_Code);
 PARAMETER(DB1.COA_BHR_RIN_Gen_Year);
 PARAMETER(DB1.COA_BHR_RIN_Price);
 PARAMETER(DB1.COA_BHR_Gallon_Price);
 PARAMETER(DB1.COA_Transaction_Comment);
 PARAMETER(DB1.COA_RIN_Supporting_Text_1);
 PARAMETER(DB1.COA_RIN_Supporting_Nbr_1);
 PARAMETER(DB1.COA_RIN_Supporting_Text_2);
 PARAMETER(DB1.COA_RIN_Supporting_Nbr_2);
 PARAMETER(DB1.COA_BHR_RFS_Version_Nbr);
 PARAMETER(DB1.COA_GEN_EMTS_Sts);
 PARAMETER(DB1.COA_GEN_EMTS_Date_Sent);
 PARAMETER(DB1.COA_GEN_EMTS_Time_Sent);
 PARAMETER(DB1.COA_RIN_EMTS_Sts);
 PARAMETER(DB1.COA_RIN_EMTS_Date_Sent);
 PARAMETER(DB1.COA_RIN_EMTS_Time_Sent);
 PARAMETER(DB1.COA_EMTS_PTD_Nbr);
 PARAMETER(DB1.COA_EMTS_Batch_Nbr);
 PARAMETER(DB1.COA_BHR_Unused_Sts_3);
 PARAMETER(DB1.COA_BHR_Unused_Nbr);
 PARAMETER(DB1.COA_EMTS_Trans_Id);
 PARAMETER(DB1.COA_EMTS_Return_Code);
 PARAMETER(DB1.COA_BHR_Unused_Date_3);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

 // PAR.COA BHR Loadout Temp = DB1.COA BHR Loadout Temp
 PAR.COA_BHR_Loadout_Temp = DB1.COA_BHR_Loadout_Temp;

}


EXECUTE FUNCTION(RTV Chg for Confirm    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1310188;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.Item_Code);
PARAMETER(LCL.Case_Quantity);
PARAMETER(LCL.Case_Weight);
PARAMETER(LCL.USR_Under_Min);
PARAMETER(LCL.USR_Over_Max);
PARAMETER(LCL.USR_Exit_Program);
{
 //?USER: Initialize routine

 // PAR.USR Exit Program = CND.yes
 PAR.USR_Exit_Program = 'Y';

 // PAR.USR Over Max = CND.no
 PAR.USR_Over_Max = 'N';

 // PAR.USR Under Min = CND.no
 PAR.USR_Under_Min = 'N';

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Total Confirmed    RT) TYPE(RTVOBJ) FILE(OMFNCPP)          AC1310317;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(*ZERO);
 PARAMETER(PAR.USR_Case_Quantity);
 PARAMETER(PAR.USR_Case_Weight);
 PARAMETER(PAR.HPB_Meter_Net_Gallon);
 PARAMETER(PAR.HPB_Meter_Net_Weight);
 {
  //?USER: Initialize routine

  // PAR.USR Case Quantity = CND.EQ *ZERO
  PAR.USR_Case_Quantity = *ZERO;

  // PAR.USR Case Weight = CND.EQ *ZERO
  PAR.USR_Case_Weight = *ZERO;

  // PAR.HPB Meter Net Gallon = CND.Equal to zero
  PAR.HPB_Meter_Net_Gallon = *ZERO;

  // PAR.HPB Meter Net Weight = CND.Not Entered
  PAR.HPB_Meter_Net_Weight = *ZERO;

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PAR.USR Case Quantity = DB1.Case Quantity + PAR.USR Case Quantity
  PAR.USR_Case_Quantity = DB1.Case_Quantity + PAR.USR_Case_Quantity;

  // PAR.USR Case Weight = DB1.Case Weight + PAR.USR Case Weight
  PAR.USR_Case_Weight = DB1.Case_Weight + PAR.USR_Case_Weight;

  //?Only HPB will have these   4/14/08
  // PAR.HPB Meter Net Gallon = DB1.HPB Meter Net Gallon + PAR.HPB Meter Net Gallon
  PAR.HPB_Meter_Net_Gallon = DB1.HPB_Meter_Net_Gallon + PAR.HPB_Meter_Net_Gallon;

  // PAR.HPB Meter Net Weight = DB1.HPB Meter Net Weight + PAR.HPB Meter Net Weight
  PAR.HPB_Meter_Net_Weight = DB1.HPB_Meter_Net_Weight + PAR.HPB_Meter_Net_Weight;

 }

 //?Check min/max from the item master
 // PAR.USR Min Weight = CND.Not Entered
 PAR.USR_Min_Weight = *ZERO;

 // PAR.USR Max Weight = CND.Not Entered
 PAR.USR_Max_Weight = *ZERO;

 EXECUTE FUNCTION(RTV Qty Min/Max        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1402211;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Minimum_Weight_Per_Case);
 PARAMETER(PAR.Maximum_Weight_Per_Case);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.USR Min Weight = PAR.Minimum Weight Per Case * PAR.USR Case Quantity *Rounde
 PAR.USR_Min_Weight = PAR.Minimum_Weight_Per_Case * PAR.USR_Case_Quantity 'H';

 // PAR.USR Max Weight = PAR.Maximum Weight Per Case * PAR.USR Case Quantity *Rounde
 PAR.USR_Max_Weight = PAR.Maximum_Weight_Per_Case * PAR.USR_Case_Quantity 'H';

 //?Weight entered as shipped is less than Minimum
 CASE;

 // IF PAR.USR Case Weight LT PAR.USR Min Weight
 IF PAR.USR_Case_Weight < PAR.USR_Min_Weight;

 // PAR.USR Under Min = CND.yes
 PAR.USR_Under_Min = 'Y';

 // PAR.USR Exit Program = CND.no
 PAR.USR_Exit_Program = 'N';

 //?Exit Prog. No  will set the program back to beginning
 ENDIF;

 //?Weight entered is greater than the maxiumum
 CASE;

 // IF PAR.USR Case Weight GT PAR.USR Max Weight
 IF PAR.USR_Case_Weight > PAR.USR_Max_Weight;

 // PAR.USR Over Max = CND.yes
 PAR.USR_Over_Max = 'Y';

 // PAR.USR Exit Program = CND.no
 PAR.USR_Exit_Program = 'N';

 //?Exit prog. no will set program back to beginning
 ENDIF;

 CASE;

 // IF PAR.USR Case Quantity GT DB1.Quantity Allocated
 IF PAR.USR_Case_Quantity > DB1.Quantity_Scheduled;

 // WRK.Work Over/Short Status = CND.Overage
 WRK.Work_Over_Short_Status = 'O';

 ENDIF;

 CASE;

 // IF PAR.USR Case Quantity LT DB1.Quantity Allocated
 IF PAR.USR_Case_Quantity < DB1.Quantity_Scheduled;

 // WRK.Work Over/Short Status = CND.Short
 WRK.Work_Over_Short_Status = 'S';

 ENDIF;

 // WRK.Detail Line Status = CND.Confirmed
 WRK.Detail_Line_Status = 'R';

 // WRK.Detail Line Status Last = DB1.Detail Line Status
 WRK.Detail_Line_Status_Last = DB1.Detail_Line_Status;

 //?FP1110 HPB ONLY 4/14/08 Output net gallons and net weight to Ord Dtl
 //?  if Warehouse is Req Meter Readings is YES.
 //?  Every other warehouse puts out the gross from manifest dtl
 EXECUTE FUNCTION(Rtv HPB fields        RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1855470;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(LCL.Production_Warehouse_Code);
 PARAMETER(LCL.Warehouse_Location);
 PARAMETER(LCL.WHS_Req_Meter_Reading_Shp);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.WHS Req Meter Reading Shp is Yes
 IF LCL.WHS_Req_Meter_Reading_Shp = 'Y';

 EXECUTE FUNCTION(CHG Confirmed Qty      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1314641;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(WRK.Detail_Line_Status);
 PARAMETER(WRK.Detail_Line_Status_Last);
 PARAMETER('P');
 PARAMETER(WRK.Work_Over_Short_Status);
 PARAMETER(PAR.HPB_Meter_Net_Gallon);
 PARAMETER(PAR.HPB_Meter_Net_Weight);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.Substituted_Flag);
 PARAMETER(DB1.OD_Schedule_Override_Sts);
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(CHG Confirmed Qty      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1314641;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(WRK.Detail_Line_Status);
 PARAMETER(WRK.Detail_Line_Status_Last);
 PARAMETER('P');
 PARAMETER(WRK.Work_Over_Short_Status);
 PARAMETER(PAR.USR_Case_Quantity);
 PARAMETER(PAR.USR_Case_Weight);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.Substituted_Flag);
 PARAMETER(DB1.OD_Schedule_Override_Sts);
 ENDIF;

}


EXECUTE FUNCTION(RTV Crt/Chg HPB Batch RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC1855749;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(*ZERO);
PARAMETER(LCL.HPB_COA_Batch_Number);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(RTV Stop Drop Seq     RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1855766;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Stop_Drop_Sequence_Number);
 PARAMETER(PAR.Order_Number);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(CRT Existing OHE       CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC1816936;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Stop_Drop_Sequence_Number);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER('R');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.OHE_Carrier_SCAC_Code);
 PARAMETER(LCL.OHE_Spot_Buy);
 PARAMETER(LCL.OHE_PO_ACK_Flag);
 PARAMETER(LCL.OHE_Override_Type_Code);
 PARAMETER(LCL.OHE_Backhaul_Status);
 PARAMETER(LCL.OHE_Backhaul_ETA_AM_PM);
 PARAMETER(LCL.OHE_Load_Haul_Type);
 PARAMETER(LCL.OHE_Backhaul_Carrier_Code);
 PARAMETER(LCL.OHE_Bookings_Confirmed);
 PARAMETER(LCL.OHE_EDI_Error_Reasons);
 PARAMETER(LCL.OHE_EDI_Error_Reasons_2);
 PARAMETER(PAR.HPB_COA_Batch_Number);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(LCL.OHE_EDI_943_Action);
 PARAMETER(LCL.OHE_EDI_944_Action);
 PARAMETER(LCL.OHE_EDI_940_Action);
 PARAMETER(LCL.OHE_EDI_945_Action);
 PARAMETER(LCL.OHE_EDI_856_Action);
 PARAMETER(LCL.OHE_EDI_824_Action);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(LCL.OHE_Email_BOL_Sent);
 PARAMETER(LCL.OHE_EDI_Order_Automated);
 PARAMETER(LCL.OHE_EDI_601_Action);
 PARAMETER(LCL.OHE_Unused_Status_4);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.EDI_Status_1);
 PARAMETER(LCL.EDI_Status_2);
 PARAMETER(LCL.EDI_Status_3);
 PARAMETER('A');
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

 }

 //?USER: Process Data record

 CASE;

 // IF DB1.Load ID is Blank
 IF DB1.Load_ID = *ZERO;

 // LCL.Load ID = PAR.Load ID
 LCL.Load_ID = PAR.Load_ID;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Load ID = DB1.Load ID
 LCL.Load_ID = DB1.Load_ID;

 ENDIF;

 CASE;

 // IF DB1.Stop/Drop Sequence Number is Not Entered
 IF DB1.Stop_Drop_Sequence_Number = *ZERO;

 EXECUTE FUNCTION(RTV Stop Drop Seq     RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1855766;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Stop_Drop_Sequence_Number);
 PARAMETER(PAR.Order_Number);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Stop/Drop Sequence Number = DB1.Stop/Drop Sequence Number
 LCL.Stop_Drop_Sequence_Number = DB1.Stop_Drop_Sequence_Number;

 ENDIF;

 EXECUTE FUNCTION(CHG HPB Batch/Load    CH) TYPE(CHGOBJ) FILE(PMAMREP)           AC1855750;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.Load_ID);
 PARAMETER(LCL.Stop_Drop_Sequence_Number);
 PARAMETER(PAR.HPB_COA_Batch_Number);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

 }

}


ENDIF;

