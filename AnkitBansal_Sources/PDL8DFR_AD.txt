// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDL8DFR
// ?Date: 14.08.2025 Time: 03:28:42
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PAR.Status Flag 1  Y/N = CND.No
PAR.Status_Flag_1_Y_N = 'N';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// PAR.USR Status (Y/N) = CND.no
PAR.USR_Status_Y_N = 'N';

// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

// Call program RTV Co. Dflt Int All,O XF.
CALL PROGRAM(RTV Co. Dflt Int All,O XF) ('PMRMXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(PAR.Allow_Mult_Whse_to_Order);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(PAR.Company_Organization);

EXECUTE FUNCTION(Rtv Allow Multi-Whs   RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1512192;
PARAMETER(JOB.*USER);
PARAMETER(PAR.Allow_Multi_Warehouse);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Set Access Limited parm                         W288
// PAR.Access Limited Sts USR = CND.yes
PAR.Access_Limited_Sts_USR = 'Y';

//?USER: Initialize subfile control

//?First Time Through Program
CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

// CTL.Accounting Company Number = PAR.Accounting Company Number
CTL.Company_Number = PAR.Company_Number;

// CTL.Order Number = PAR.Order Number
CTL.Order_Number = PAR.Order_Number;

// CTL.Warehouse Code = PAR.Warehouse Code
CTL.Warehouse_Code = PAR.Warehouse_Code;

// CTL.Actual Shipped Date = PAR.Actual Shipped Date
CTL.Actual_Shipped_Date = PAR.Actual_Shipped_Date;

EXECUTE FUNCTION(RTV Ship Header        RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1307605;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(CTL.Order_Type_Sales);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Ship_To_Name);
PARAMETER(CTL.Customer_Purchase_Order_#);
PARAMETER(PAR.Order_Date);
PARAMETER(PAR.Requested_Ship_Date);
PARAMETER(CTL.Special_Instructions);
PARAMETER(CTL.Special_Instructions_2);
PARAMETER(CTL.Carrier_Code);
PARAMETER(CTL.Order_Type_Print_Status);
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(CTL.Order_Value_Total);
PARAMETER(CTL.Order_Weight_Total);
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Export_Status);
PARAMETER(CTL.Palletize);
PARAMETER(CTL.Shrink_Wrap);
PARAMETER(CTL.Slip_Sheet);
PARAMETER(CTL.Reefer_Temperature);
PARAMETER(PAR.Billing_Activity_Type);
PARAMETER(PAR.Email_Cust_On_Order_Ship);
PARAMETER(PAR.Order_Emailed);
PARAMETER(CTL.Shipping_Temp_Code_C_F);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.USR Status (Y/N) = CND.yes
WRK.USR_Status_Y_N = 'Y';

EXECUTE FUNCTION(RTV Check Ship Confirm RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1306368;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(WRK.USR_Status_Y_N);
{
 //?USER: Initialize routine

 // PAR.USR Status (Y/N) = CND.yes
 PAR.USR_Status_Y_N = 'Y';

 //?USER: Processing if Data record not found

 // PAR.USR Status (Y/N) = CND.no
 PAR.USR_Status_Y_N = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.Work Confirm Status is Open
 IF DB1.Work_Confirm_Status = *BLANK;

 CASE;

 // IF DB1.Detail Line Status is Not closed or cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'R'/'E'/'H';

 // PAR.USR Status (Y/N) = CND.no
 PAR.USR_Status_Y_N = 'N';

 QUIT;

 ENDIF;

 ENDIF;

}


// WRK.USR Status (Y/N) = CND.yes
WRK.USR_Status_Y_N = 'Y';

EXECUTE FUNCTION(RTV Deadln DepartDT/TM RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1497302;
PARAMETER(CTL.Load_ID);
PARAMETER(LCL.Deadline_Departure_Date);
PARAMETER(LCL.Deadline_Departure_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// LCL.WHS Req Meter Reading Shp = CND.No
LCL.WHS_Req_Meter_Reading_Shp = 'N';

//?FP1110 RMC 4/11/08 HPB only get prod temp which is loadout temp
CASE;

// IF PAR.Company Organization is High Plains Biodiesel
IF PAR.Company_Organization = 'H';

//?RMC force to NO for hpb so they cant change the ctl warehouse.
// PAR.Allow Multi Warehouse = CND.no
PAR.Allow_Multi_Warehouse = 'N';

EXECUTE FUNCTION(Rtv HPB fields        RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1855470;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.Production_Warehouse_Code);
PARAMETER(LCL.Warehouse_Location);
PARAMETER(LCL.WHS_Req_Meter_Reading_Shp);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.WHS Req Meter Reading Shp is Yes
IF LCL.WHS_Req_Meter_Reading_Shp = 'Y';

EXECUTE FUNCTION(RTV HPB-temp,CarrBrk  RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1897587;
PARAMETER(CTL.Load_ID);
PARAMETER(WRK.Product_Temperature);
PARAMETER(CTL.Carrier_Broker);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF CTL.Carrier Broker is not entered
IF CTL.Carrier_Broker = *BLANK;

CASE;

// IF CTL.Carrier Code is Not Buyer's Truck
IF CTL.Carrier_Code <> 'BUY';

// CTL.Carrier Broker = CTL.Carrier Code
CTL.Carrier_Broker = CTL.Carrier_Code;

ENDIF;

ENDIF;

SET CURSOR;

CASE;

// IF CTL.Carrier Code is Buyer's Truck
IF CTL.Carrier_Code = 'BUY';

// PAR.Status Flag 1  Y/N = CND.Yes
PAR.Status_Flag_1_Y_N = 'Y';

SET CURSOR;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Status Flag 1  Y/N = CND.No
PAR.Status_Flag_1_Y_N = 'N';

ENDIF;

EXECUTE FUNCTION(RTV HPB fields         RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC1853458;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(LCL.HPB_COA_Batch_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.HPB COA Batch Number is Not entered
IF LCL.HPB_COA_Batch_Number = *ZERO;

// AND LCL.Warehouse Location is Internal (Plant)
AND LCL.Warehouse_Location = 'I';

//?FP1322 chk for an open tank per prod whse on the order's whse
EXECUTE FUNCTION(Rtv Acct Co          RT) TYPE(RTVOBJ) FILE(CAADREP)            AC1802492;
PARAMETER(LCL.Production_Warehouse_Code);
PARAMETER(LCL.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Get Open Batch    RT) TYPE(RTVOBJ) FILE(PMCCCPP)           AC1901095;
PARAMETER(LCL.Accounting_Company);
PARAMETER(LCL.HPB_COA_Batch_Number);
PARAMETER(LCL.Production_Warehouse_Code);
PARAMETER('O');
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 //?There should only ever be one record found, but quit just in case
 QUIT;

}


ENDIF;

// CTL.COA Batch Number = LCL.HPB COA Batch Number
CTL.COA_Batch_Number = LCL.HPB_COA_Batch_Number;

// CTL.COA Temperature Loadout = WRK.Product Temperature
CTL.COA_Temperature_Loadout = WRK.Product_Temperature;

// WRK.COA Temperature Loadout = CTL.COA Temperature Loadout
WRK.COA_Temperature_Loadout = CTL.COA_Temperature_Loadout;

// LCL.Carrier Broker = CTL.Carrier Broker
LCL.Carrier_Broker = CTL.Carrier_Broker;

ENDIF;

ENDIF;

ENDIF;

//?USER: Initialize subfile record from DBF record

//?Subfile Record Selection
CASE;

// IF DB1.Detail Line Status is Not closed or cancelled
IF DB1.Detail_Line_Status = 'L'/'A'/'R'/'E'/'H';

// WRK.USR Status (Y/N) = CND.yes
WRK.USR_Status_Y_N = 'Y';

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

//?Subfile Record Selection
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Transaction - Ship Date
CASE;

// IF CTL.Actual Shipped Date is not entered
IF CTL.Actual_Shipped_Date = *ZERO;

// CTL.Actual Shipped Date = DB1.Actual Shipped Date
CTL.Actual_Shipped_Date = DB1.Actual_Shipped_Date;

ENDIF;

EXECUTE FUNCTION(Rtv Lot Tracking Flag RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1506123;
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Lot_Tracking_Flag);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF RCD.Lot Tracking Flag is yes
IF RCD.Lot_Tracking_Flag = 'Y';

EXECUTE FUNCTION(Rtv Item Alloc Qty    RT) TYPE(RTVOBJ) FILE(PDL8CPP)           AC1517366;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.USR_Quantity_Confirmed);
PARAMETER(RCD.USR_Weight_Confirmed);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.OIA Alloc/Shipped Qty = PAR.OIA Alloc/Shipped Qty + DB1.OIA Alloc/Shipped Qt
 PAR.OIA_Alloc_Shipped_Qty = PAR.OIA_Alloc_Shipped_Qty + DB1.OIA_Alloc_Shipped_Qty;

 // PAR.OIA Alloc/Shipped Wgt = PAR.OIA Alloc/Shipped Wgt + DB1.OIA Alloc/Shipped Wg
 PAR.OIA_Alloc_Shipped_Wgt = PAR.OIA_Alloc_Shipped_Wgt + DB1.OIA_Alloc_Shipped_Wgt;

}


// IF *OTHERWISE
IF *OTHERWISE;

// RCD.USR Quantity Confirmed = DB1.Quantity Shipped Total
RCD.USR_Quantity_Confirmed = DB1.Quantity_Shipped_Total;

// RCD.USR Weight Confirmed = DB1.Weight Shipped Total
RCD.USR_Weight_Confirmed = DB1.Weight_Shipped_Total;

ENDIF;

// RCD.USR Confirm Status = CND.Blank
RCD.USR_Confirm_Status = *BLANK;

// RCD.USR Line Status Desc = CND.Blank
RCD.USR_Line_Status_Desc = *BLANK;

//?Line Status Description
//?Line Status Description
CASE;

// IF DB1.Detail Line Status is Available
IF DB1.Detail_Line_Status = 'A';

// RCD.USR Line Status Desc = CND.Available
RCD.USR_Line_Status_Desc = 'AVAIL';

//?Line Status Description
// IF DB1.Detail Line Status is Complete
IF DB1.Detail_Line_Status = 'C';

// RCD.USR Line Status Desc = CND.Complete
RCD.USR_Line_Status_Desc = 'COMPL';

//?Line Status Description
// IF DB1.Detail Line Status is Confirmed
IF DB1.Detail_Line_Status = 'R';

// RCD.USR Line Status Desc = CND.Confirm
RCD.USR_Line_Status_Desc = 'CONFM';

//?Line Status Description
// IF DB1.Detail Line Status is Entered
IF DB1.Detail_Line_Status = 'E';

// RCD.USR Line Status Desc = CND.Enter
RCD.USR_Line_Status_Desc = 'ENTER';

ENDIF;

//?Confirm Status on screen
//?over status
CASE;

// IF DB1.Work Over/Short Status is Overage
IF DB1.Work_Over_Short_Status = 'O';

// RCD.USR Confirm Status = CON.OVER
RCD.USR_Confirm_Status = 'OVER';

ENDIF;

//?Short status
CASE;

// IF DB1.Work Over/Short Status is Short
IF DB1.Work_Over_Short_Status = 'S';

// RCD.USR Confirm Status = CON.SHORT
RCD.USR_Confirm_Status = 'SHORT';

ENDIF;

//?Substitution
CASE;

// IF DB1.Order Secondary Line Seq is GT 1
IF DB1.Order_Secondary_Line_Seq > 1;

// RCD.USR Confirm Status = CON.SUBST
RCD.USR_Confirm_Status = 'SUBST';

ENDIF;

//?USER: Process subfile control (Pre-confirm)

// WRK.Create Requested = CND.*Blank
WRK.Create_Requested = *BLANK;

//?HPB ONLY          9/17/08
CASE;

// IF PAR.Company Organization is High Plains Biodiesel
IF PAR.Company_Organization = 'H';

// AND CTL.COA Batch Number NE LCL.HPB COA Batch Number
AND ( CTL.COA_Batch_Number <> LCL.HPB_COA_Batch_Number;

// OR CTL.Warehouse Code NE PAR.Warehouse Code
OR CTL.Warehouse_Code <> PAR.Warehouse_Code;

// OR CTL.Carrier Broker is Buyer's Truck
OR CTL.Carrier_Broker = 'BUY';

// OR CTL.Carrier Broker NE LCL.Carrier Broker
OR CTL.Carrier_Broker <> LCL.Carrier_Broker;

// OR CTL.Carrier Broker is not entered
OR CTL.Carrier_Broker = *BLANK );

EXECUTE FUNCTION(Rtv HPB fields        RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1855470;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.Production_Warehouse_Code);
PARAMETER(LCL.Warehouse_Location);
PARAMETER(LCL.WHS_Req_Meter_Reading_Shp);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?FP1322 chk for an open tank per prod whse on the order's whse
EXECUTE FUNCTION(Rtv Acct Co          RT) TYPE(RTVOBJ) FILE(CAADREP)            AC1802492;
PARAMETER(LCL.Production_Warehouse_Code);
PARAMETER(LCL.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Warehouse Location is Internal (Plant)
IF LCL.Warehouse_Location = 'I';

//?if whse was chgd from a non-meter reading to a meter reading -> error
CASE;

// IF LCL.WHS Req Meter Reading Shp is Yes
IF LCL.WHS_Req_Meter_Reading_Shp = 'Y';

CASE;

// IF CTL.COA Batch Number is Equal zero
IF CTL.COA_Batch_Number = *ZERO;

// AND LCL.COA Batch Number is Equal zero
AND LCL.COA_Batch_Number = *ZERO;

// Send error message - 'Warehouse not allowed for this order.'
ERROR(USR4093);
MSGPARM(CTL.Warehouse_Code);

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF LCL.HPB COA Batch Number is Entered
IF LCL.HPB_COA_Batch_Number > *ZERO;

CASE;

// IF LCL.Warehouse Location is Internal (Plant)
IF LCL.Warehouse_Location = 'I';

EXECUTE FUNCTION(RTV Chk for Batch Opn RT) TYPE(RTVOBJ) FILE(PMCCCPP)           AC1901137;
PARAMETER(LCL.Accounting_Company);
PARAMETER(CTL.COA_Batch_Number);
PARAMETER(LCL.Warehouse_Code_Assigned);
PARAMETER(LCL.COA_Batch_Header_Sts);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 //?There should only ever be one record found, but quit just in case
 QUIT;

}


//?validate batch for warehouse
CASE;

// IF LCL.COA Batch Header Sts is Open for shipping
IF LCL.COA_Batch_Header_Sts = 'O';

CASE;

// IF LCL.Warehouse Code Assigned NE LCL.Production Warehouse Code
IF LCL.Warehouse_Code_Assigned <> LCL.Production_Warehouse_Code;

// Send error message - 'COA Batch &1 is not from the same warehouse/tank.'
ERROR(USR4024);
MSGPARM(CTL.COA_Batch_Number);

ENDIF;

//?validate batch for warehouse
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'COA Batch &1 is Closed or not found.'
ERROR(USR4023);
MSGPARM(CTL.COA_Batch_Number);

ENDIF;

ENDIF;

ENDIF;

//?Carrier broker req
CASE;

// IF LCL.WHS Req Meter Reading Shp is Yes
IF LCL.WHS_Req_Meter_Reading_Shp = 'Y';

EXECUTE FUNCTION(Val Carrier Active     RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1418093;
PARAMETER(CTL.Carrier_Broker);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// OR CTL.Carrier Broker is Buyer's Truck
OR CTL.Carrier_Broker = 'BUY';

// Send error message - 'Carrier broker not found.'
ERROR(USR2428);
MSGPARM(CTL.Carrier_Broker);

ENDIF;

ENDIF;

ENDIF;

//?F4 on Carrier broker - new FP1110 8/28/08 RMC
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Carrier Broker
IF PGM.*Cursor_field = CTL.Carrier_Broker;

// Call program SEL Active Carrier     SR.
CALL PROGRAM(SEL Active Carrier     SR) ('OMY6SRR');
PARAMETER(CTL.Carrier_Broker);

ENDIF;

ENDIF;

//?Process Command Key Actions
CASE;

// IF CTL.*CMD key is *Comments
IF CTL.*CMD_key = '18';

// Call program EDT OP Order Comment   EF.
CALL PROGRAM(EDT OP Order Comment   EF) ('PDAGEFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);

QUIT;

//?==============================================================
//?Process Command Key Actions
// IF CTL.*CMD key is *Create
IF CTL.*CMD_key = '06';

// Call program ADD Ship Line Item     E1.
CALL PROGRAM(ADD Ship Line Item     E1) ('PDN6E1R');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.Actual_Shipped_Date);
PARAMETER(LCL.Deadline_Departure_Date);
PARAMETER(LCL.Deadline_Departure_Time);
PARAMETER(PAR.Allow_Mult_Whse_to_Order);

//?Reset allow update to warehouse
CASE;

// IF PAR.Allow Mult Whse to Order is yes
IF PAR.Allow_Mult_Whse_to_Order = 'Y';

// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?Reset allow update to warehouse
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(WRK.Trans_Contol_AS400_Plant);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Trans_Contol_AS400_Plant);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

ENDIF;

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

//?==============================================================
//?Process Command Key Actions
// IF CTL.*CMD key is CF20
IF CTL.*CMD_key = '20';

//?FP1110 - RMC 4/11/08 HPB Only - and if whs requires meter readings
CASE;

// IF PAR.Company Organization is High Plains Biodiesel
IF PAR.Company_Organization = 'H';

// AND LCL.WHS Req Meter Reading Shp is Yes
AND LCL.WHS_Req_Meter_Reading_Shp = 'Y';

CASE;

// IF LCL.Warehouse Location is Internal (Plant)
IF LCL.Warehouse_Location = 'I';

// LCL.RFS Loadout Temperature = CTL.COA Temperature Loadout
LCL.RFS_Loadout_Temperature = CTL.COA_Temperature_Loadout;

EXECUTE FUNCTION(Rtv API Vol Cor Fctor RT) TYPE(RTVOBJ) FILE(PNGJREP)           AC1999417;
PARAMETER(30);
PARAMETER(LCL.RFS_Loadout_Temperature);
PARAMETER(WRK.RFS_API_Vol_Corr_Factor);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?hpb updates for internal warehouse order
CASE;

// IF WRK.RFS API Vol Corr Factor is Not Found
IF WRK.RFS_API_Vol_Corr_Factor = *ZERO;

// Send error message - 'Temperature Loadout invalid'
ERROR(USR3925);
MSGPARM(CTL.COA_Temperature_Loadout);

QUIT;

//?hpb updates for internal warehouse order
// IF *OTHERWISE
IF *OTHERWISE;

//?Upd Load Header and Manif Dtl and Ord dtl if there
CASE;

// IF CTL.COA Temperature Loadout NE WRK.COA Temperature Loadout
IF CTL.COA_Temperature_Loadout <> WRK.COA_Temperature_Loadout;

// OR CTL.COA Batch Number NE LCL.HPB COA Batch Number
OR CTL.COA_Batch_Number <> LCL.HPB_COA_Batch_Number;

// OR CTL.Carrier Broker NE LCL.Carrier Broker
OR CTL.Carrier_Broker <> LCL.Carrier_Broker;

EXECUTE FUNCTION(RTV HPB Recalc Nt/Upd RT) TYPE(RTVOBJ) FILE(OMFNCPP)           AC1880517;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(1);
PARAMETER(1);
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.COA_Temperature_Loadout);
PARAMETER(CTL.Carrier_Broker);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.COA_Batch_Number);
{
 //?USER: Initialize routine

 //?***** Change Log and Comments
 DO;

 //?P000579 RMC 07/12/2010 HPB - get API Temp corr factor from file,
 //?          instead of calculating it
 //?P000579 RMC 06/24/2010 HPB diff formula
 //?E00157 LJB 08/26/2009-Prompt OHE for newly added parms
 //?FP1110 RMC 5/1/08 output Density REf Gravity to MAnifest detail
 //?FP1110 RMC 8/28/08 update carrier broker in load header
 //?S00464 RMC 9/17/08 update batch. it may be diff
 ENDDO;

 // LCL.Order Sequence Number = CON.*ZERO
 LCL.Order_Sequence_Number = *ZERO;

 // LCL.Order Secondary Line Seq = CON.*ZERO
 LCL.Order_Secondary_Line_Seq = 0;

 // PAR.RFS Volume Corr Mthd  USR = CND.API Volume Corr Table
 PAR.RFS_Volume_Corr_Mthd_USR = 'A';

 //?USER: Process Data record

 //?Chg Order Detail at Seq Level Break
 CASE;

 // IF DB1.Order Sequence Number NE LCL.Order Sequence Number
 IF DB1.Order_Sequence_Number <> LCL.Order_Sequence_Number;

 // OR DB1.Order Secondary Line Seq NE LCL.Order Secondary Line Seq
 OR DB1.Order_Secondary_Line_Seq <> LCL.Order_Secondary_Line_Seq;

 CASE;

 // IF LCL.Order Sequence Number is not equal to zero
 IF LCL.Order_Sequence_Number <> *ZERO;

 //?CHG ORDER DETAIL NET WEIGHT AND QTY -->WEIGHT SHIPPED AND QTY SHIPPED
 // WRK.Case Sequence Number = CON.*ZERO
 WRK.Case_Sequence_Number = *ZERO;

 EXECUTE FUNCTION(RTV Total Confirmed    RT) TYPE(RTVOBJ) FILE(OMFNCPP)          AC1310317;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Order_Sequence_Number);
 PARAMETER(LCL.Order_Secondary_Line_Seq);
 PARAMETER(WRK.Case_Sequence_Number);
 PARAMETER(WRK.USR_Case_Quantity);
 PARAMETER(WRK.USR_Case_Weight);
 PARAMETER(LCL.HPB_Meter_Net_Gallon);
 PARAMETER(LCL.HPB_Meter_Net_Weight);
 {
  //?USER: Initialize routine

  // PAR.USR Case Quantity = CND.EQ *ZERO
  PAR.USR_Case_Quantity = *ZERO;

  // PAR.USR Case Weight = CND.EQ *ZERO
  PAR.USR_Case_Weight = *ZERO;

  // PAR.HPB Meter Net Gallon = CND.Equal to zero
  PAR.HPB_Meter_Net_Gallon = *ZERO;

  // PAR.HPB Meter Net Weight = CND.Not Entered
  PAR.HPB_Meter_Net_Weight = *ZERO;

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PAR.USR Case Quantity = DB1.Case Quantity + PAR.USR Case Quantity
  PAR.USR_Case_Quantity = DB1.Case_Quantity + PAR.USR_Case_Quantity;

  // PAR.USR Case Weight = DB1.Case Weight + PAR.USR Case Weight
  PAR.USR_Case_Weight = DB1.Case_Weight + PAR.USR_Case_Weight;

  //?Only HPB will have these   4/14/08
  // PAR.HPB Meter Net Gallon = DB1.HPB Meter Net Gallon + PAR.HPB Meter Net Gallon
  PAR.HPB_Meter_Net_Gallon = DB1.HPB_Meter_Net_Gallon + PAR.HPB_Meter_Net_Gallon;

  // PAR.HPB Meter Net Weight = DB1.HPB Meter Net Weight + PAR.HPB Meter Net Weight
  PAR.HPB_Meter_Net_Weight = DB1.HPB_Meter_Net_Weight + PAR.HPB_Meter_Net_Weight;

 }

 EXECUTE FUNCTION(Rtv Chg Ship Qty      RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1880525;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Order_Sequence_Number);
 PARAMETER(LCL.Order_Secondary_Line_Seq);
 PARAMETER(LCL.HPB_Meter_Net_Gallon);
 PARAMETER(LCL.HPB_Meter_Net_Weight);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Quantity Scheduled LT PAR.Quantity Shipped Total
  IF DB1.Quantity_Scheduled < PAR.Quantity_Shipped_Total;

  //?Work Over/Short Flag as Overage
  EXECUTE FUNCTION(Chg Ship Qty & Weight  CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1367749;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER('P');
  PARAMETER('O');
  PARAMETER(PAR.Quantity_Shipped_Total);
  PARAMETER(PAR.Weight_Shipped_Total);
  PARAMETER(DB1.Actual_Shipped_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF DB1.Quantity Scheduled GT PAR.Quantity Shipped Total
  IF DB1.Quantity_Scheduled > PAR.Quantity_Shipped_Total;

  //?Work Over/Short Flag as Short
  EXECUTE FUNCTION(Chg Ship Qty & Weight  CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1367749;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER('P');
  PARAMETER('S');
  PARAMETER(PAR.Quantity_Shipped_Total);
  PARAMETER(PAR.Weight_Shipped_Total);
  PARAMETER(DB1.Actual_Shipped_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF DB1.Quantity Scheduled EQ PAR.Quantity Shipped Total
  IF DB1.Quantity_Scheduled = PAR.Quantity_Shipped_Total;

  //?Work Over/Short Flag as Blank
  EXECUTE FUNCTION(Chg Ship Qty & Weight  CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1367749;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER('P');
  PARAMETER(*BLANK);
  PARAMETER(PAR.Quantity_Shipped_Total);
  PARAMETER(PAR.Weight_Shipped_Total);
  PARAMETER(DB1.Actual_Shipped_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

 }

 ENDIF;

 // LCL.Order Sequence Number = DB1.Order Sequence Number
 LCL.Order_Sequence_Number = DB1.Order_Sequence_Number;

 // LCL.Order Secondary Line Seq = DB1.Order Secondary Line Seq
 LCL.Order_Secondary_Line_Seq = DB1.Order_Secondary_Line_Seq;

 ENDIF;

 EXECUTE FUNCTION(CHG Prod Temp-HPB     CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC1877057;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.COA_Temperature_Loadout);
 PARAMETER(PAR.Carrier_Broker);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 EXECUTE FUNCTION(RTV HPB fields         RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC1853458;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.HPB_COA_Batch_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.HPB COA Batch Number NE PAR.COA Batch Number
 IF LCL.HPB_COA_Batch_Number <> PAR.COA_Batch_Number;

 EXECUTE FUNCTION(CHG HPB Batch only    CH) TYPE(CHGOBJ) FILE(PMAMREP)           AC1916596;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.COA_Batch_Number);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

 }

 ENDIF;

 //?Net Gallons = Meter Total Gallon * (-.000436 * (Loadout Temp-60F) +1)
 //?R6965 RMC New hpb plant 8/22/16
 EXECUTE FUNCTION(Rtv HPB fields        RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1855470;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(LCL.Production_Warehouse_Code);
 PARAMETER(LCL.Warehouse_Location);
 PARAMETER(LCL.WHS_Req_Meter_Reading_Shp);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Acct Co          RT) TYPE(RTVOBJ) FILE(CAADREP)            AC1802492;
 PARAMETER(LCL.Production_Warehouse_Code);
 PARAMETER(LCL.Accounting_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv FuelCd,Dnst f/bt  RT) TYPE(RTVOBJ) FILE(PMCCCPP)           AC2126972;
 PARAMETER(LCL.Accounting_Company);
 PARAMETER(PAR.COA_Batch_Number);
 PARAMETER(LCL.COA_Bio_diesel_Fuel_Code);
 PARAMETER(LCL.COA_Density_Loadout);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Temp Reference    RT) TYPE(RTVOBJ) FILE(PMCAREP)           AC1876036;
 PARAMETER(LCL.Accounting_Company);
 PARAMETER(LCL.COA_Bio_diesel_Fuel_Code);
 PARAMETER(LCL.COA_Temperature_Ref);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?New formula - after 6/27/10 -  goes in with RFS2/EMTS    P000579
 CASE;

 // IF PAR.RFS Volume Corr Mthd  USR is Calculate factor per Prop
 IF PAR.RFS_Volume_Corr_Mthd_USR = 'C';

 // WRK.COA Temp Conv Factor 1 = CON.-.00045767
 WRK.COA_Temp_Conv_Factor_1 = -.00045767;

 // WRK.COA Temp Conv Factor 2 = CON.1.02746025
 WRK.COA_Temp_Conv_Factor_2 = 1.02746025;

 // Compute: temp adj
 WRK.HPB_Temperature_Adjustmnt = ( ( WRK.COA_Temp_Conv_Factor_1
 * PAR.COA_Temperature_Loadout 'H' ) + WRK.COA_Temp_Conv_Factor_2 ) * 1 'H';

 // IF PAR.RFS Volume Corr Mthd  USR is API Volume Corr Table
 IF PAR.RFS_Volume_Corr_Mthd_USR = 'A';

 // LCL.RFS Loadout Temperature = PAR.COA Temperature Loadout
 LCL.RFS_Loadout_Temperature = PAR.COA_Temperature_Loadout;

 EXECUTE FUNCTION(Rtv API Vol Cor Fctor RT) TYPE(RTVOBJ) FILE(PNGJREP)           AC1999417;
 PARAMETER(30);
 PARAMETER(LCL.RFS_Loadout_Temperature);
 PARAMETER(LCL.RFS_API_Vol_Corr_Factor);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // WRK.HPB Temperature Adjustmnt = LCL.RFS API Vol Corr Factor
 WRK.HPB_Temperature_Adjustmnt = LCL.RFS_API_Vol_Corr_Factor;

 ENDIF;

 // Compute: Net gallons
 WRK.Quantity_7_0_USR = DB1.HPB_Meter_Total_Gallon * WRK.HPB_Temperature_Adjustmnt 'H';

 // LCL.HPB Meter Net Gallon = WRK.Quantity 7.0 USR
 LCL.HPB_Meter_Net_Gallon = WRK.Quantity_7_0_USR;

 // Compute: density ref NEW
 WRK.COA_Density_Ref_Adj_4_dec = WRK.HPB_Temperature_Adjustmnt * LCL.COA_Density_Loadout
 'H';

 // LCL.HPB Density Ref Gravity = WRK.COA Density Ref Adj 4 dec
 LCL.HPB_Density_Ref_Gravity = WRK.COA_Density_Ref_Adj_4_dec;

 //?Calc Net weight from density loadout and other factor
 // Compute: Net Fuel Weight
 LCL.HPB_Meter_Net_Weight = ( LCL.HPB_Meter_Net_Gallon * LCL.COA_Density_Loadout ) * 8.33;

 EXECUTE FUNCTION(CHG Manifest for HPB  CH) TYPE(CHGOBJ) FILE(OMFNCPP)           AC1880522;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Case_Sequence_Number);
 PARAMETER(LCL.HPB_Meter_Net_Gallon);
 PARAMETER(PAR.COA_Batch_Number);
 PARAMETER(LCL.HPB_Meter_Net_Weight);
 PARAMETER(LCL.HPB_Density_Ref_Gravity);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?USER: Exit processing

 //?LAst record
 CASE;

 // IF LCL.Order Sequence Number is not equal to zero
 IF LCL.Order_Sequence_Number <> *ZERO;

 EXECUTE FUNCTION(RTV Total Confirmed    RT) TYPE(RTVOBJ) FILE(OMFNCPP)          AC1310317;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Order_Sequence_Number);
 PARAMETER(LCL.Order_Secondary_Line_Seq);
 PARAMETER(*ZERO);
 PARAMETER(WRK.USR_Case_Quantity);
 PARAMETER(WRK.USR_Case_Weight);
 PARAMETER(LCL.HPB_Meter_Net_Gallon);
 PARAMETER(LCL.HPB_Meter_Net_Weight);
 {
  //?USER: Initialize routine

  // PAR.USR Case Quantity = CND.EQ *ZERO
  PAR.USR_Case_Quantity = *ZERO;

  // PAR.USR Case Weight = CND.EQ *ZERO
  PAR.USR_Case_Weight = *ZERO;

  // PAR.HPB Meter Net Gallon = CND.Equal to zero
  PAR.HPB_Meter_Net_Gallon = *ZERO;

  // PAR.HPB Meter Net Weight = CND.Not Entered
  PAR.HPB_Meter_Net_Weight = *ZERO;

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PAR.USR Case Quantity = DB1.Case Quantity + PAR.USR Case Quantity
  PAR.USR_Case_Quantity = DB1.Case_Quantity + PAR.USR_Case_Quantity;

  // PAR.USR Case Weight = DB1.Case Weight + PAR.USR Case Weight
  PAR.USR_Case_Weight = DB1.Case_Weight + PAR.USR_Case_Weight;

  //?Only HPB will have these   4/14/08
  // PAR.HPB Meter Net Gallon = DB1.HPB Meter Net Gallon + PAR.HPB Meter Net Gallon
  PAR.HPB_Meter_Net_Gallon = DB1.HPB_Meter_Net_Gallon + PAR.HPB_Meter_Net_Gallon;

  // PAR.HPB Meter Net Weight = DB1.HPB Meter Net Weight + PAR.HPB Meter Net Weight
  PAR.HPB_Meter_Net_Weight = DB1.HPB_Meter_Net_Weight + PAR.HPB_Meter_Net_Weight;

 }

 EXECUTE FUNCTION(Rtv Chg Ship Qty      RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1880525;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Order_Sequence_Number);
 PARAMETER(LCL.Order_Secondary_Line_Seq);
 PARAMETER(LCL.HPB_Meter_Net_Gallon);
 PARAMETER(LCL.HPB_Meter_Net_Weight);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Quantity Scheduled LT PAR.Quantity Shipped Total
  IF DB1.Quantity_Scheduled < PAR.Quantity_Shipped_Total;

  //?Work Over/Short Flag as Overage
  EXECUTE FUNCTION(Chg Ship Qty & Weight  CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1367749;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER('P');
  PARAMETER('O');
  PARAMETER(PAR.Quantity_Shipped_Total);
  PARAMETER(PAR.Weight_Shipped_Total);
  PARAMETER(DB1.Actual_Shipped_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF DB1.Quantity Scheduled GT PAR.Quantity Shipped Total
  IF DB1.Quantity_Scheduled > PAR.Quantity_Shipped_Total;

  //?Work Over/Short Flag as Short
  EXECUTE FUNCTION(Chg Ship Qty & Weight  CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1367749;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER('P');
  PARAMETER('S');
  PARAMETER(PAR.Quantity_Shipped_Total);
  PARAMETER(PAR.Weight_Shipped_Total);
  PARAMETER(DB1.Actual_Shipped_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF DB1.Quantity Scheduled EQ PAR.Quantity Shipped Total
  IF DB1.Quantity_Scheduled = PAR.Quantity_Shipped_Total;

  //?Work Over/Short Flag as Blank
  EXECUTE FUNCTION(Chg Ship Qty & Weight  CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1367749;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER('P');
  PARAMETER(*BLANK);
  PARAMETER(PAR.Quantity_Shipped_Total);
  PARAMETER(PAR.Weight_Shipped_Total);
  PARAMETER(DB1.Actual_Shipped_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

 }

 ENDIF;

}


ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//?data is updated thru selection of rin process.
EXECUTE FUNCTION(RTV Chg Batch if 0    RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC1971044;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.HPB COA Batch Number is Not entered
 IF DB1.HPB_COA_Batch_Number = *ZERO;

 EXECUTE FUNCTION(RTV HPB 1st batch#    RT) TYPE(RTVOBJ) FILE(OMFNCPP)           AC1971050;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.COA_Batch_Number);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.HPB COA Batch Number is Entered
  IF DB1.HPB_COA_Batch_Number > *ZERO;

  // PAR.COA Batch Number = DB1.HPB COA Batch Number
  PAR.COA_Batch_Number = DB1.HPB_COA_Batch_Number;

  QUIT;

  ENDIF;

  //?USER: Exit processing

  //?LAst record
  CASE;

  // IF LCL.Order Sequence Number is not equal to zero
  IF LCL.Order_Sequence_Number <> *ZERO;

  EXECUTE FUNCTION(RTV Total Confirmed    RT) TYPE(RTVOBJ) FILE(OMFNCPP)          AC1310317;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(LCL.Order_Sequence_Number);
  PARAMETER(LCL.Order_Secondary_Line_Seq);
  PARAMETER(*ZERO);
  PARAMETER(WRK.USR_Case_Quantity);
  PARAMETER(WRK.USR_Case_Weight);
  PARAMETER(LCL.HPB_Meter_Net_Gallon);
  PARAMETER(LCL.HPB_Meter_Net_Weight);
  {
   //?USER: Initialize routine

   // PAR.USR Case Quantity = CND.EQ *ZERO
   PAR.USR_Case_Quantity = *ZERO;

   // PAR.USR Case Weight = CND.EQ *ZERO
   PAR.USR_Case_Weight = *ZERO;

   // PAR.HPB Meter Net Gallon = CND.Equal to zero
   PAR.HPB_Meter_Net_Gallon = *ZERO;

   // PAR.HPB Meter Net Weight = CND.Not Entered
   PAR.HPB_Meter_Net_Weight = *ZERO;

   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   // PAR.USR Case Quantity = DB1.Case Quantity + PAR.USR Case Quantity
   PAR.USR_Case_Quantity = DB1.Case_Quantity + PAR.USR_Case_Quantity;

   // PAR.USR Case Weight = DB1.Case Weight + PAR.USR Case Weight
   PAR.USR_Case_Weight = DB1.Case_Weight + PAR.USR_Case_Weight;

   //?Only HPB will have these   4/14/08
   // PAR.HPB Meter Net Gallon = DB1.HPB Meter Net Gallon + PAR.HPB Meter Net Gallon
   PAR.HPB_Meter_Net_Gallon = DB1.HPB_Meter_Net_Gallon + PAR.HPB_Meter_Net_Gallon;

   // PAR.HPB Meter Net Weight = DB1.HPB Meter Net Weight + PAR.HPB Meter Net Weight
   PAR.HPB_Meter_Net_Weight = DB1.HPB_Meter_Net_Weight + PAR.HPB_Meter_Net_Weight;

  }

  EXECUTE FUNCTION(Rtv Chg Ship Qty      RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1880525;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(LCL.Order_Sequence_Number);
  PARAMETER(LCL.Order_Secondary_Line_Seq);
  PARAMETER(LCL.HPB_Meter_Net_Gallon);
  PARAMETER(LCL.HPB_Meter_Net_Weight);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Quantity Scheduled LT PAR.Quantity Shipped Total
   IF DB1.Quantity_Scheduled < PAR.Quantity_Shipped_Total;

   //?Work Over/Short Flag as Overage
   EXECUTE FUNCTION(Chg Ship Qty & Weight  CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1367749;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER('P');
   PARAMETER('O');
   PARAMETER(PAR.Quantity_Shipped_Total);
   PARAMETER(PAR.Weight_Shipped_Total);
   PARAMETER(DB1.Actual_Shipped_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   // IF DB1.Quantity Scheduled GT PAR.Quantity Shipped Total
   IF DB1.Quantity_Scheduled > PAR.Quantity_Shipped_Total;

   //?Work Over/Short Flag as Short
   EXECUTE FUNCTION(Chg Ship Qty & Weight  CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1367749;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER('P');
   PARAMETER('S');
   PARAMETER(PAR.Quantity_Shipped_Total);
   PARAMETER(PAR.Weight_Shipped_Total);
   PARAMETER(DB1.Actual_Shipped_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   // IF DB1.Quantity Scheduled EQ PAR.Quantity Shipped Total
   IF DB1.Quantity_Scheduled = PAR.Quantity_Shipped_Total;

   //?Work Over/Short Flag as Blank
   EXECUTE FUNCTION(Chg Ship Qty & Weight  CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1367749;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER('P');
   PARAMETER(*BLANK);
   PARAMETER(PAR.Quantity_Shipped_Total);
   PARAMETER(PAR.Weight_Shipped_Total);
   PARAMETER(DB1.Actual_Shipped_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

 }

 EXECUTE FUNCTION(CHG HPB Batch only    CH) TYPE(CHGOBJ) FILE(PMAMREP)           AC1916596;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.COA_Batch_Number);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

 }

 ENDIF;

}


ENDIF;

ENDIF;

//?WI517 DN 10/12/23-Setup Eradani's Environment Libraries.
// Call program Upd Setup Eradani Libs CL.
CALL PROGRAM(Upd Setup Eradani Libs CL) ('PVBFUPC');

//?WI517 DN 10/04/23-Initialize 'Send Email f/Failed API U'.
// LCL.Send Email f/Failed API U = CND.No
LCL.Send_Email_f_Failed_API_U = 'N';

//?WI517 DN 10/04/23-Added 'Called From Program' Input Parm.
//?- Added 'Send Email f/Failed API U' Output Parm.
// Call program ADD Ready to Confirm   XF.
CALL PROGRAM(ADD Ready to Confirm   XF) ('PDN2XFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(PAR.Actual_Shipped_Date);
PARAMETER(PAR.Access_Denied_Y_N);
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER('PDL8DFR');
PARAMETER(LCL.Send_Email_f_Failed_API_U);
PARAMETER(*BLANK);

//?WI517 DN 10/04/23-If 'Send Email f/Failed API U=Yes' Then Send Email.
CASE;

// IF LCL.Send Email f/Failed API U is Yes
IF LCL.Send_Email_f_Failed_API_U = 'Y';

// Call program Prc Eml Shipping & IT  XF.
CALL PROGRAM(Prc Eml Shipping & IT  XF) ('PVA9XFR');
PARAMETER('PDL8DFR');

ENDIF;

//?If order not shipped display message, else display shipped message
CASE;

// IF PAR.Access Denied (Y/N) is yes
IF PAR.Access_Denied_Y_N = 'Y';

// Send error message - 'Order is Not Shipped.'
ERROR(USR1363);
MSGPARM(CTL.Order_Number);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

//?If order not shipped display message, else display shipped message
// IF *OTHERWISE
IF *OTHERWISE;

// Send completion message - 'Order is Confirmed for Shipping'
MESSAGE(USR1960 *COMPLETION);
MSGPARM(CTL.Order_Number);

RETURN;

ENDIF;

ENDIF;

//?View Shipping Instructions
CASE;

// IF CTL.*CMD key is CF19
IF CTL.*CMD_key = '19';

// Call program DSP Shipping Inst.     DF.
CALL PROGRAM(DSP Shipping Inst.     DF) ('PDNADFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?USER: Process subfile record (Pre-confirm)

//?Process Action Selections
//?Change Warehouse  - chg for HPB 09/05/08
CASE;

// IF RCD.*SFLSEL is *Change
IF RCD.*SFLSEL = '2';

CASE;

// IF PAR.Company Organization is Not HPB
IF PAR.Company_Organization = 'D'/'S';

//?Option not allowed if company has 1 whse per order
CASE;

// IF PAR.Allow Mult Whse to Order is Not Yes
IF PAR.Allow_Mult_Whse_to_Order = *BLANK/'N';

// Send error message - 'Cannot Change Warehouse; only one warehouse allowed per order.'
ERROR(USR2148);
MSGPARM(RCD.*SFLSEL);

//?Option not allowed if company has 1 whse per order
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Zzz Change Whse Code   E1.
CALL PROGRAM(Zzz Change Whse Code   E1) ('PDMTE1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(PAR.Actual_Shipped_Date);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//?HPB ONLY-allow whse change  RMC 09/05/08
EXECUTE FUNCTION(CHG Order in Use       CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1316259;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('N');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


//?** Access Limited parm added                     W288
// Call program EDT Schd Shp Dte/Whse  E1.
CALL PROGRAM(EDT Schd Shp Dte/Whse  E1) ('PDLQE1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(PAR.Access_Limited_Sts_USR);

EXECUTE FUNCTION(RTV Whse/Non Cancelled RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428700;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Warehouse_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?C2748:  Changed RTV Warehouse Code RT to exclude Cancelled lines.
 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF *OTHERWISE
 IF *OTHERWISE;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


// CTL.Warehouse Code = RCD.Warehouse Code
CTL.Warehouse_Code = RCD.Warehouse_Code;

EXECUTE FUNCTION(CHG Order in Use       CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1316259;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('Y');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?Substitution
CASE;

// IF RCD.*SFLSEL is Opt 7
IF RCD.*SFLSEL = '7'/'7';

CASE;

// IF RCD.Detail Line Status is Confirmed
IF RCD.Detail_Line_Status = 'R';

// Send error message - 'Item is Confirmed and can not be substitued.'
ERROR(USR1961);
MSGPARM(RCD.Item_Code);

// IF RCD.Order Secondary Line Seq is GT 1
IF RCD.Order_Secondary_Line_Seq > 1;

// Send error message - 'Cannot substitute a substition.'
ERROR(USR2407);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

//?used to call PDN7E1R, EDT Subst. Ship Item E1;parms=RCD,
//?   except Allow Mult Whse=PAR
// Call program WW Order Substitutions EF.
CALL PROGRAM(WW Order Substitutions EF) ('PDR7EFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Substitution
CASE;

// IF RCD.Order Secondary Line Seq is GT 1
IF RCD.Order_Secondary_Line_Seq > 1;

// RCD.USR Confirm Status = CON.SUBST
RCD.USR_Confirm_Status = 'SUBST';

ENDIF;

ENDIF;

//?8=WW Manifest OR Edit Lot/Location Shipping Detail (process line)
CASE;

// IF RCD.*SFLSEL is *8
IF RCD.*SFLSEL = '8';

EXECUTE FUNCTION(Rtv Lot Tracking Flag RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1506123;
PARAMETER(RCD.Warehouse_Code);
PARAMETER(PAR.Lot_Tracking_Flag);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.Lot Tracking Flag is yes
IF PAR.Lot_Tracking_Flag = 'Y';

CASE;

// IF JOB.*USER is All IS DEV/PRD & Prktest
IF JOB.*USER = 'ALICEB'/'ISALICEB'/'PRKTEST'/'ISPURVAP'/'ISPPATE'/'ISROSEM'/'ISRCENT'              +
/'ISSMASO'/'ISSUSANM'/'ISLBUSE'/'ISLARAB'/'ISWGAUS'/'ISELOUC';

// Call program Edt Lot/Loc Ship Dtl  ET.
CALL PROGRAM(Edt Lot/Loc Ship Dtl  ET) ('PDH8ETR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(PAR.USR_Case_Quantity);
PARAMETER(PAR.USR_Case_Weight);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Item Typ/Grp/Cls  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1298334;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(LCL.Item_Structure_Class_Code);
PARAMETER(LCL.Item_Structure_Group_Code);
PARAMETER(LCL.Item_Structure_Type_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?VAL: Co-Pack
CASE;

// IF RCD.Warehouse Code is Cloverleaf Freezer
IF RCD.Warehouse_Code = 'CF1';

// AND LCL.Item Structure Type Code is NE 900
AND LCL.Item_Structure_Type_Code <> 900;

// Send error message - 'Item &1 is not Co-Pack'
ERROR(USR3592);
MSGPARM(RCD.Item_Code);

//?VAL: Co-Pack
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Edt Lot/Loc Ship Dtl  ET.
CALL PROGRAM(Edt Lot/Loc Ship Dtl  ET) ('PDH8ETR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(PAR.USR_Case_Quantity);
PARAMETER(PAR.USR_Case_Weight);

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Company Organization is Not HPB
IF PAR.Company_Organization = 'D'/'S';

// Call program WW Manifest Detail     EF.
CALL PROGRAM(WW Manifest Detail     EF) ('PDMYEFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(CTL.COA_Batch_Number);
PARAMETER(RCD.Order_Desc_Line_One);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);
PARAMETER(PAR.USR_Case_Quantity);
PARAMETER(PAR.USR_Case_Weight);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Ship_To_Name);
PARAMETER(CTL.Customer_Purchase_Order_#);
PARAMETER(CTL.Load_ID);

ENDIF;

//?FP1322 HPB Processing only
CASE;

// IF PAR.Company Organization is High Plains Biodiesel
IF PAR.Company_Organization = 'H';

//?HPB Only - Loadout temp required  - if warehouse loc is Internal
CASE;

// IF LCL.WHS Req Meter Reading Shp is Yes
IF LCL.WHS_Req_Meter_Reading_Shp = 'Y';

// AND LCL.Warehouse Location is Internal (Plant)
AND LCL.Warehouse_Location = 'I';

// LCL.RFS Loadout Temperature = CTL.COA Temperature Loadout
LCL.RFS_Loadout_Temperature = CTL.COA_Temperature_Loadout;

EXECUTE FUNCTION(Rtv API Vol Cor Fctor RT) TYPE(RTVOBJ) FILE(PNGJREP)           AC1999417;
PARAMETER(30);
PARAMETER(LCL.RFS_Loadout_Temperature);
PARAMETER(WRK.RFS_API_Vol_Corr_Factor);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.RFS API Vol Corr Factor is Not Found
IF WRK.RFS_API_Vol_Corr_Factor = *ZERO;

// Send error message - 'Temperature Loadout invalid'
ERROR(USR3925);
MSGPARM(CTL.COA_Temperature_Loadout);

QUIT;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(CHG Prod Temp-HPB     CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC1877057;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.COA_Temperature_Loadout);
PARAMETER(CTL.Carrier_Broker);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

ENDIF;

CASE;

// IF LCL.Warehouse Location is Internal (Plant)
IF LCL.Warehouse_Location = 'I';

// Call program WW Manifest Detail     EF.
CALL PROGRAM(WW Manifest Detail     EF) ('PDMYEFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(CTL.COA_Batch_Number);
PARAMETER(RCD.Order_Desc_Line_One);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);
PARAMETER(PAR.USR_Case_Quantity);
PARAMETER(PAR.USR_Case_Weight);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Ship_To_Name);
PARAMETER(CTL.Customer_Purchase_Order_#);
PARAMETER(CTL.Load_ID);

// IF *OTHERWISE
IF *OTHERWISE;

//?User selects RIN to SEL from external warehouses
// Call program WW Manifest Detail-HPB EF.
CALL PROGRAM(WW Manifest Detail-HPB EF) ('PNM9EFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Order_Desc_Line_One);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);
PARAMETER(PAR.USR_Case_Quantity);
PARAMETER(PAR.USR_Case_Weight);
PARAMETER(CTL.Carrier_Broker);
PARAMETER(CTL.COA_Temperature_Loadout);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(CTL.Ship_To_Name);
PARAMETER(CTL.Customer_Purchase_Order_#);
PARAMETER(CTL.Load_ID);

EXECUTE FUNCTION(RTV Prod Temp-HPB     RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1877050;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.COA_Temperature_Loadout);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV HPB fields         RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC1853458;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.COA_Batch_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

ENDIF;

ENDIF;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PAR.USR Status (Y/N) = CND.yes
PAR.USR_Status_Y_N = 'Y';

ENDIF;

//?Delete Request
CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

//?Open Line Item
CASE;

// IF RCD.Detail Line Status is Open Types
IF RCD.Detail_Line_Status = 'L'/'A'/'E';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

//?Open Line Item
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Can't Delete Confirmed   or Completed Item.'
ERROR(USR1937);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?Comments
CASE;

// IF RCD.*SFLSEL is Opt 9
IF RCD.*SFLSEL = '9'/'9';

// Call program EDT Detail Comments    EF.
CALL PROGRAM(EDT Detail Comments    EF) ('PDDWEFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(PAR.Ship_To_Name);
PARAMETER(RCD.Requested_Ship_Date);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?USER: Final processing (Pre-confirm)

CASE;

// IF PAR.USR Status (Y/N) is yes
IF PAR.USR_Status_Y_N = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PAR.USR Status (Y/N) = CND.no
PAR.USR_Status_Y_N = 'N';

ENDIF;

//?USER: Process subfile record (Post-confirm)

//?Delete Request
CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

//?Open Line Item
CASE;

// IF RCD.Detail Line Status is Open Types
IF RCD.Detail_Line_Status = 'L'/'A'/'E';

EXECUTE FUNCTION(RTV Delete NonConfirm  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1309050;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(CTL.Export_Status);
PARAMETER(PAR.Company_Organization);
{
 //?USER: Initialize routine

 //?allow high plains delete after unship  2/16/10 rmc
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 //?Delete if Not Confirmed
 CASE;

 // IF DB1.Work Confirm Status is Open
 IF DB1.Work_Confirm_Status = *BLANK;

 // OR PAR.Company Organization is High Plains Biodiesel
 OR PAR.Company_Organization = 'H';

 EXECUTE FUNCTION(DEL Ship Detail Pricng RT) TYPE(RTVOBJ) FILE(PDIMCPP)          AC1299816;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(DLT Ship Detail Pricng DL) TYPE(DLTOBJ) FILE(PDIMCPP)          AC1299817;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Price_Method_Componant);
 }

 EXECUTE FUNCTION(DEL Unship Dtl Formula RT) TYPE(RTVOBJ) FILE(PDJKCPP)          AC1310367;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(DLT Ship Dtl Formula   DL) TYPE(DLTOBJ) FILE(PDJKCPP)          AC1300025;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Price_Method_Componant);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Pricing_Sequence_Number);
 }

 EXECUTE FUNCTION(RTV Delete Indiv Man.  RT) TYPE(RTVOBJ) FILE(OMFNCPP)          AC1308943;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  EXECUTE FUNCTION(DLT OM Manifest Detail DL) TYPE(DLTOBJ) FILE(OMFNCPP)          AC1183251;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Case_Sequence_Number);
 }

 EXECUTE FUNCTION(DLT Shipping Fin       RT) TYPE(RTVOBJ) FILE(OMCRWKP)          AC1306738;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(*ZERO);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  EXECUTE FUNCTION(DLT Shipping Detail    DL) TYPE(DLTOBJ) FILE(OMCRWKP)          AC1306739;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Sequence_Number);
 }

 EXECUTE FUNCTION(Rtv Lot Tracking Flag RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1506123;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Lot_Tracking_Flag);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Delect Order Inv Allocation
 CASE;

 // IF PAR.Lot Tracking Flag is yes
 IF PAR.Lot_Tracking_Flag = 'Y';

 EXECUTE FUNCTION(Del OrdDtl Inv Alloc  RT) TYPE(RTVOBJ) FILE(PDL8CPP)           AC1513139;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Del Order Inv Alloc   DL) TYPE(DLTOBJ) FILE(PDL8CPP)           AC1505797;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Allocation_Seq_#);
 }

 ENDIF;

 // WRK.Detail Line Status Last = DB1.Detail Line Status
 WRK.Detail_Line_Status_Last = DB1.Detail_Line_Status;

 EXECUTE FUNCTION(CHG DtlSts/Cancel Item CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1583933;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER('X');
 PARAMETER(DB1.Detail_Line_Status_Last);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 CASE;

 // IF PAR.Export Status is yes
 IF PAR.Export_Status = 'Y';

 EXECUTE FUNCTION(Rtv & Dlt for Cncl DtlRT) TYPE(RTVOBJ) FILE(PDMSREP)           AC1612172;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Del Exp Doc Order Dtl  DL) TYPE(DLTOBJ) FILE(PDMSREP)          AC1524037;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.ED_Export_Document_Type);
  PARAMETER(DB1.Country_Code);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
 }

 ENDIF;

 ENDIF;

}


ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Exit program processing

//?Disable *Exit key
CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

//?HPB only  4/23/08
CASE;

// IF CTL.COA Temperature Loadout NE WRK.COA Temperature Loadout
IF CTL.COA_Temperature_Loadout <> WRK.COA_Temperature_Loadout;

// Send error message - 'Exit is not allowed.  You must F20=Post after a temperature change.'
ERROR(USR3935);

QUIT;

ENDIF;

ENDIF;

