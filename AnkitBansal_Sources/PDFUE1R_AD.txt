// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDFUE1R
// ?Date: 14.08.2025 Time: 03:31:45
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('C/S');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?If key not sent program is put in add mode
CASE;

// IF PAR.Commodity Market Code is Not Entered
IF PAR.Commodity_Market_Code = *BLANK;

// OR PAR.Commodity Price Group is Not entered
OR PAR.Commodity_Price_Group = *BLANK;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

//?If key not sent program is put in add mode
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Program mode = CND.*CHANGE
PGM.*Program_mode = 'CHG';

ENDIF;

//?USER: Validate key screen

CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

//?Select commodity market
CASE;

// IF KEY.*CMD key is *Prompt
IF KEY.*CMD_key = '04';

// AND PGM.*Cursor field <IS> KEY.Commodity Market Code USR
AND PGM.*Cursor_field = KEY.Commodity_Market_Code_USR;

// Call program SEL Commod. Mkts Actve SR.
CALL PROGRAM(SEL Commod. Mkts Actve SR) ('PDEDSRR');
PARAMETER(KEY.Commodity_Market_Code_USR);

ENDIF;

//?Select commodity price group
CASE;

// IF KEY.*CMD key is *Prompt
IF KEY.*CMD_key = '04';

// AND PGM.*Cursor field <IS> KEY.@Commodity Price Group
AND PGM.*Cursor_field = KEY.@Commodity_Price_Group;

// Call program SEL Commod Grp Active  SR.
CALL PROGRAM(SEL Commod Grp Active  SR) ('PDECSRR');
PARAMETER(KEY.@Commodity_Price_Group);

ENDIF;

//?Validate market code
CASE;

// IF KEY.Commodity Market Code USR is Entered
IF KEY.Commodity_Market_Code_USR <> *BLANK;

EXECUTE FUNCTION(RTV & VLD Commod. Mkt  RT) TYPE(RTVOBJ) FILE(OMFYREP)          AC1382869;
PARAMETER(KEY.Commodity_Market_Code_USR);
PARAMETER(KEY.Commodity_Market_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Commodity Market not found'
ERROR(USR2162);
MSGPARM(KEY.Commodity_Market_Code_USR);

ENDIF;

//?Validate market code
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Commodity market code is required.'
ERROR(USR2233);
MSGPARM(KEY.Commodity_Market_Code_USR);

ENDIF;

//?Validate commodity group
CASE;

// IF KEY.@Commodity Price Group is Not Blank
IF KEY.@Commodity_Price_Group <> *BLANK;

EXECUTE FUNCTION(RTV & VLD Commod Group RT) TYPE(RTVOBJ) FILE(OMFZREP)          AC1382870;
PARAMETER(KEY.@Commodity_Price_Group);
PARAMETER(KEY.Commodity_Price_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Commodity Price Group not found'
ERROR(USR2232);
MSGPARM(KEY.@Commodity_Price_Group);

ENDIF;

//?Validate commodity group
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Commodity price group is required.'
ERROR(USR2234);
MSGPARM(KEY.@Commodity_Price_Group);

ENDIF;

ENDIF;

//?USER: Initialize detail screen (new record)

// DTL.Record Status = CND.Active
DTL.Record_Status = 'A';

// DTL.Status Description = Condition name of DTL.Record Status
DTL.Status_Description = RTVCND(DTL.Record_Status);

// DTL.Commodity Market Code = KEY.Commodity Market Code USR
DTL.Commodity_Market_Code = KEY.Commodity_Market_Code_USR;

// DTL.Commodity Price Group = KEY.@Commodity Price Group
DTL.Commodity_Price_Group = KEY.@Commodity_Price_Group;

//?USER: Initialize detail screen (existing record)

// DTL.Commodity Market Code = PAR.Commodity Market Code
DTL.Commodity_Market_Code = PAR.Commodity_Market_Code;

// DTL.Commodity Price Group = PAR.Commodity Price Group
DTL.Commodity_Price_Group = PAR.Commodity_Price_Group;

// DTL.Market Price Date = PAR.Market Price Date
DTL.Market_Price_Date = PAR.Market_Price_Date;

// DTL.Record Status = DB1.Record Status
DTL.Record_Status = DB1.Record_Status;

// DTL.Status Description = Condition name of DB1.Record Status
DTL.Status_Description = RTVCND(DB1.Record_Status);

//?USER: Validate detail screen fields

// DTL.Status Description = Condition name of DTL.Record Status
DTL.Status_Description = RTVCND(DTL.Record_Status);

//?USER: Create DBF record

EXECUTE FUNCTION(CRT PD Prdctd Mrkt Prc CR) TYPE(CRTOBJ) FILE(PDKOREP)          AC1387094;
PARAMETER(DTL.Commodity_Market_Code);
PARAMETER(DTL.Commodity_Price_Group);
PARAMETER(DTL.Market_Price_Date);
PARAMETER(DTL.Projected_Market_Price);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Job_Time);
PARAMETER(DTL.User_Id);
PARAMETER(DTL.Job_Name);
PARAMETER(DTL.Job_Date);

//?USER: Change DBF record

EXECUTE FUNCTION(CHG PD Prdctd Mrkt Prc CH) TYPE(CHGOBJ) FILE(PDKOREP)          AC1387095;
PARAMETER(DTL.Commodity_Market_Code);
PARAMETER(DTL.Commodity_Price_Group);
PARAMETER(DTL.Market_Price_Date);
PARAMETER(DTL.Projected_Market_Price);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Job_Time);
PARAMETER(DTL.User_Id);
PARAMETER(DTL.Job_Name);
PARAMETER(DTL.Job_Date);

//?USER: Process command keys

CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

RETURN;

ENDIF;

