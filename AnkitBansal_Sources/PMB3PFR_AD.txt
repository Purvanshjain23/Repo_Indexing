// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMB3PFR
// ?Date: 14.08.2025 Time: 12:05:26
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?** If Fiscal Period: move fiscal period and year to work fields
CASE;

// IF PAR.Date 1          PASS  USR is Not equal to zero
IF PAR.Date_1_PASS_USR <> *ZERO;

// WRK.From Month            USR = PAR.Date 1          PASS  USR
WRK.From_Month_USR = PAR.Date_1_PASS_USR;

// WRK.YEAR 2 USR = PAR.From Date Pass        USR
WRK.YEAR_2_USR = PAR.From_Date_Pass_USR;

// WRK.To Month              USR = PAR.Date 2          PASS  USR
WRK.To_Month_USR = PAR.Date_2_PASS_USR;

// WRK.YEAR 3 USR = PAR.Thru Date Pass        USR
WRK.YEAR_3_USR = PAR.Thru_Date_Pass_USR;

// WRK.YEAR 1 USR = CON.*ZERO
WRK.YEAR_1_USR = *ZERO;

ENDIF;

// WRK.@System Value Numeric = CON.*ZERO
WRK.@System_Value_Numeric = *ZERO;

//?** If Fiscal Year, move to work field & clear the period/year fields,
CASE;

// IF PAR.Customer Number Pass  USR NE WRK.@System Value Numeric
IF PAR.Customer_Number_Pass_USR <> WRK.@System_Value_Numeric;

// WRK.YEAR 1 USR = PAR.Customer Number Pass  USR
WRK.YEAR_1_USR = PAR.Customer_Number_Pass_USR;

// WRK.From Month            USR = CON.*ZERO
WRK.From_Month_USR = *ZERO;

// WRK.YEAR 2 USR = CON.*ZERO
WRK.YEAR_2_USR = *ZERO;

// WRK.To Month              USR = CON.*ZERO
WRK.To_Month_USR = *ZERO;

// WRK.YEAR 3 USR = CON.*ZERO
WRK.YEAR_3_USR = *ZERO;

ENDIF;

// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Record selection processing

// WRK.USR number = CON.*ZERO
WRK.USR_number = *ZERO;

//?** Skip record if not the correct bank code
CASE;

// IF DB1.Bank Code NE PAR.Bank Code
IF DB1.Bank_Code <> PAR.Bank_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?** Request is by Fiscal Year if not zeros
CASE;

// IF WRK.YEAR 1 USR GT WRK.USR number
IF WRK.YEAR_1_USR > WRK.USR_number;

//?** Skip record if not within the requested year
CASE;

// IF DB1.Accounting Year LT WRK.YEAR 1 USR
IF DB1.Accounting_Year < WRK.YEAR_1_USR;

// OR DB1.Accounting Year GT WRK.YEAR 1 USR
OR DB1.Accounting_Year > WRK.YEAR_1_USR;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?** Request is by Fiscal Year if not zeros
// IF *OTHERWISE
IF *OTHERWISE;

//?** Skip record if not within the requested period/year
CASE;

// IF DB1.Accounting Year LT WRK.YEAR 2 USR
IF ( DB1.Accounting_Year < WRK.YEAR_2_USR;

// AND DB1.Accounting Period LT WRK.From Month            USR
AND DB1.Accounting_Period < WRK.From_Month_USR );

// OR DB1.Accounting Year GT WRK.YEAR 3 USR
OR ( DB1.Accounting_Year > WRK.YEAR_3_USR;

// AND DB1.Accounting Period GT WRK.To Month              USR
AND DB1.Accounting_Period > WRK.To_Month_USR );

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** Skip if not a check
CASE;

// IF DB1.A/R Check Number is Equal to blanks
IF DB1.A_R_Check_Number = *BLANK;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process top of page

// TOP.Bank Code = PAR.Bank Code
TOP_Bank_Code = PAR.Bank_Code;

EXECUTE FUNCTION(RTV Bank Description   RT) TYPE(RTVOBJ) FILE(CAEBREP)          AC1333216;
PARAMETER(TOP_Bank_Code);
PARAMETER(TOP_Name);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// TOP.Detail/Summary Report Usr = PAR.Detail/Summary Report Usr
TOP_Detail_Summary_Report_Usr = PAR.Detail_Summary_Report_Usr;

// TOP.Condition Name 10 USR = Condition name of TOP.Detail/Summary Report Usr
TOP_Condition_Name_10_USR = RTVCND(TOP_Detail_Summary_Report_Usr);

// TOP.YEAR 1 USR = WRK.YEAR 1 USR
TOP_YEAR_1_USR = WRK.YEAR_1_USR;

// TOP.From Month            USR = WRK.From Month            USR
TOP_From_Month_USR = WRK.From_Month_USR;

// TOP.YEAR 2 USR = WRK.YEAR 2 USR
TOP_YEAR_2_USR = WRK.YEAR_2_USR;

// TOP.To Month              USR = WRK.To Month              USR
TOP_To_Month_USR = WRK.To_Month_USR;

// TOP.YEAR 3 USR = WRK.YEAR 3 USR
TOP_YEAR_3_USR = WRK.YEAR_3_USR;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

// SUPPRESSED PRINT Bank Code header format

// SUPPRESSED PRINT Accounting Year header format

// SUPPRESSED PRINT Accounting Period header format

// SUPPRESSED PRINT A/R Check Number header format

// SUPPRESSED PRINT Adjustment Type Code header format

//?USER: Process before print of detail format

// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

//?USER: On print of detail format

//?** Don't print
// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

//?USER: Process after print of detail format

//?** Net Credit Amount: Accumulate all payments
CASE;

// IF DB1.Adjustment Type Code is Regular Pay
IF DB1.Adjustment_Type_Code = 'PAY';

NXT.Deposit_CB_Total_$_SUM = SUM(CUR.Transaction_Amount);

//?** Count the checks by counting the principle records
// NXT.Count USR = NXT.Count USR + CON.1
NXT.Count_USR = NXT.Count_USR + 1;

ENDIF;

//?** Principle Amount: Accumulate all bank fees and payments
CASE;

// IF DB1.Adjustment Type Code is Bank Fee
IF DB1.Adjustment_Type_Code = 'FEE';

// OR DB1.Adjustment Type Code is Regular Pay
OR DB1.Adjustment_Type_Code = 'PAY';

NXT.Extended_amount_SUM = SUM(DB1.Transaction_Amount);

ENDIF;

//?** Fees: Accumulate all bank fees
CASE;

// IF DB1.Adjustment Type Code is Bank Fee
IF DB1.Adjustment_Type_Code = 'FEE';

//?** Reverse the sign of the Fees
// CUR.Transaction Amount = DB1.Transaction Amount * CON.-1 *
CUR.Transaction_Amount = DB1.Transaction_Amount * -1;

NXT.Net_Loss_SUM = SUM(CUR.Transaction_Amount);

ENDIF;

//?USER: Print required level totals

// SUPPRESSED PRINT Adjustment Type Code totals format

CASE;

IF NEW A_R_Check_Number;
// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

EXECUTE FUNCTION(RTV Cust. by Inv.      RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1345722;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Invoice_Number);
PARAMETER(CUR.Invoice_Suffix);
PARAMETER(CUR.AR_Customer_Number);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Cust Name/Addr     RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1129143;
PARAMETER(CUR.AR_Customer_Number);
PARAMETER(CUR.AR_Customer_Name);
PARAMETER(WRK.Address_Line_1);
PARAMETER(WRK.Address_Line_2);
PARAMETER(WRK.Address_Line_3);
PARAMETER(WRK.City);
PARAMETER(WRK.State_Code);
PARAMETER(WRK.Zip_Postal_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.Detail/Summary Report Usr is Summary
IF PAR.Detail_Summary_Report_Usr = 'S';

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

// Print A/R Check Number totals format
PRINT A/R Check Number totals format;

// NXT.Count USR = NXT.Count USR + CUR.Count USR
NXT.Count_USR = NXT.Count_USR + CUR.Count_USR;

NXT.Extended_amount_SUM = SUM(CUR.Extended_amount_SUM);

NXT.Net_Loss_SUM = SUM(CUR.Net_Loss_SUM);

NXT.Deposit_CB_Total_$_SUM = SUM(CUR.Deposit_CB_Total_$_SUM);

ENDIF;

CASE;

IF NEW Accounting_Period;
// CUR.Date Range = CON.*BLANK
CUR.Date_Range = *BLANK;

// WRK.Month (Char) USR = CVTVAR(CUR.Accounting Period)
WRK.Month_Char_USR = CVTVAR(CUR.Accounting_Period);

// WRK.Year Alpha (YYYY) USR = CVTVAR(CUR.Accounting Year)
WRK.Year_Alpha_YYYY_USR = CVTVAR(CUR.Accounting_Year);

// CUR.Date Range = CONCAT(CON.Period,WRK.Month (Char) USR,CON.1)
CUR.Date_Range = 'Period' + WRK.Month_Char_USR (1);

// CUR.Date Range = CONCAT(CUR.Date Range,WRK.Year Alpha (YYYY) USR,CON.1)
CUR.Date_Range = CUR.Date_Range + WRK.Year_Alpha_YYYY_USR (1);

//?** Calc Average Number of Drafts per deposit
CASE;

// IF CUR.Count USR is GT 0
IF CUR.Count_USR > *ZERO;

// CUR.Average Net Sales = CUR.Extended amount       SUM / CUR.Count USR *Rounded
CUR.Average_Net_Sales = CUR.Extended_amount_SUM / CUR.Count_USR 'H';

ENDIF;

//?** Calc Fees as a % of Drafts
CASE;

// IF CUR.Extended amount       SUM is Not *Zeros
IF CUR.Extended_amount_SUM <> *ZERO;

// WRK.@Average Weight = CUR.Net Loss SUM / CUR.Extended amount       SUM *Rounded
WRK.@Average_Weight = CUR.Net_Loss_SUM / CUR.Extended_amount_SUM 'H';

// CUR.Percent of Pieces = WRK.@Average Weight * CON.100 *Rounded
CUR.Percent_of_Pieces = WRK.@Average_Weight * 100 'H';

ENDIF;

// Print Accounting Period totals format
PRINT Accounting Period totals format;

// NXT.Count USR = NXT.Count USR + CUR.Count USR
NXT.Count_USR = NXT.Count_USR + CUR.Count_USR;

NXT.Extended_amount_SUM = SUM(CUR.Extended_amount_SUM);

NXT.Net_Loss_SUM = SUM(CUR.Net_Loss_SUM);

NXT.Deposit_CB_Total_$_SUM = SUM(CUR.Deposit_CB_Total_$_SUM);

ENDIF;

// SUPPRESSED PRINT Accounting Year totals format

CASE;

IF NEW Bank_Code;
//?** Calc Average Number of Drafts per deposit
CASE;

// IF CUR.Count USR is GT 0
IF CUR.Count_USR > *ZERO;

// CUR.Average Net Sales = CUR.Extended amount       SUM / CUR.Count USR *Rounded
CUR.Average_Net_Sales = CUR.Extended_amount_SUM / CUR.Count_USR 'H';

ENDIF;

//?** Calc Fees as a % of Drafts
CASE;

// IF CUR.Extended amount       SUM is Not *Zeros
IF CUR.Extended_amount_SUM <> *ZERO;

// WRK.@Average Weight = CUR.Net Loss SUM / CUR.Extended amount       SUM *Rounded
WRK.@Average_Weight = CUR.Net_Loss_SUM / CUR.Extended_amount_SUM 'H';

// CUR.Percent of Pieces = WRK.@Average Weight * CON.100 *Rounded
CUR.Percent_of_Pieces = WRK.@Average_Weight * 100 'H';

ENDIF;

// Print Bank Code totals format
PRINT Bank Code totals format;

ENDIF;

