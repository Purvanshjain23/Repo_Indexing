// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKLZDFR
// ?Date: 14.08.2025 Time: 02:52:06
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?H16853 ISE 01/23/21 - Increased the length from 5 to 7 and corrected the
//?                      alignment of Buy Order Number field.
ENDDO;

// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


// WRK.First Time Flag Usr = CND.Yes
WRK.First_Time_Flag_Usr = 'Y';

//?USER: Initialize subfile control

//?First time
CASE;

// IF WRK.First Time Flag Usr is Yes
IF WRK.First_Time_Flag_Usr = 'Y';

//?Head Selected
// WRK.First Time Flag Usr = CND.No
WRK.First_Time_Flag_Usr = 'N';

CASE;

// IF CTL.Head Total USR is Not 0
IF CTL.Head_Total_USR <> *ZERO;

// CTL.Avg Live Wgt Usr Rep = CTL.TST Wgt / CTL.Head Total USR *
CTL.Avg_Live_Wgt_Usr_Rep = CTL.TST_Wgt / CTL.Head_Total_USR;

ENDIF;

ENDIF;

// CTL.Head Total Usr 2 = CND.Equals 0
CTL.Head_Total_Usr_2 = *ZERO;

// CTL.Head Total (5.0) USR = CON.*ZERO
CTL.Head_Total_5_0_USR = *ZERO;

// CTL.Yard Dead             USR = CON.*ZERO
CTL.Yard_Dead_USR = *ZERO;

// CTL.Live Weight           USR = CON.*ZERO
CTL.Live_Weight_USR = *ZERO;

// Call program Zzz Int/Rsl Hd Select XF.
CALL PROGRAM(Zzz Int/Rsl Hd Select XF) ('PKMNXFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER(CTL.Head_Total_Usr_2);
PARAMETER(CTL.Head_Total_5_0_USR);
PARAMETER(CTL.Yard_Dead_USR);
PARAMETER(CTL.Live_Weight_USR);
PARAMETER(CTL.Avg_Live_Wgt_Usr_Rep);

//?USER: Initialize subfile record from DBF record

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

//?Record Selection
CASE;

// IF DB1.TH Resale Spread Sts is Select/Mark for Future
IF DB1.TH_Resale_Spread_Sts = 'M'/'S';

//?Record Selection
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

// RCD.TH Live Wgt = CTL.Avg Live Wgt Usr Rep * RCD.TH Head Received *
RCD.TH_Live_Wgt = CTL.Avg_Live_Wgt_Usr_Rep * RCD.TH_Head_Received;

// WRK.Defect User  3 = WRK.Blank USR
WRK.Defect_User_3 = WRK.Blank_USR;

EXECUTE FUNCTION(Rtv Tattoo Def-10     RT) TYPE(RTVOBJ) FILE(PKDZREP)           AB1199885;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.Defect_User_1);
PARAMETER(RCD.Defect_User_2);
PARAMETER(WRK.Defect_User_3);
PARAMETER(WRK.Defect_User_4);
PARAMETER(WRK.Defect_User_5);
PARAMETER(WRK.Defect_User_6);
PARAMETER(WRK.Defect_User_7);
PARAMETER(WRK.Defect_User_8);
PARAMETER(WRK.Defect_User_9);
PARAMETER(WRK.Defect_User_10);
PARAMETER(WRK.Defect_HD_user_1);
PARAMETER(WRK.Defect_HD_user_2);
PARAMETER(WRK.Defect_HD_user_3);
PARAMETER(WRK.Defect_HD_user_4);
PARAMETER(WRK.Defect_HD_user_5);
PARAMETER(WRK.Defect_HD_user_6);
PARAMETER(WRK.Defect_HD_user_7);
PARAMETER(WRK.Defect_HD_user_8);
PARAMETER(WRK.Defect_HD_user_9);
PARAMETER(WRK.Defect_HD_user_10);
{
 //?USER: Initialize routine

 // WRK.Defect Count Usr = CND.One
 WRK.Defect_Count_Usr = 1;

 //?USER: Process Data record

 CASE;

 // IF WRK.Defect Count Usr is One
 IF WRK.Defect_Count_Usr = 1;

 // PAR.Defect User  1 = DB1.DF Defect Code
 PAR.Defect_User_1 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 1 = DB1.TDF Head Defect
 PAR.Defect_HD_user_1 = DB1.TDF_Head_Defect;

 // WRK.Defect Count Usr = CND.Two
 WRK.Defect_Count_Usr = 2;

 // IF WRK.Defect Count Usr is Two
 IF WRK.Defect_Count_Usr = 2;

 // PAR.Defect User  2 = DB1.DF Defect Code
 PAR.Defect_User_2 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 2 = DB1.TDF Head Defect
 PAR.Defect_HD_user_2 = DB1.TDF_Head_Defect;

 // WRK.Defect Count Usr = CND.Three
 WRK.Defect_Count_Usr = 3;

 // IF WRK.Defect Count Usr is Three
 IF WRK.Defect_Count_Usr = 3;

 // PAR.Defect User  3 = DB1.DF Defect Code
 PAR.Defect_User_3 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 3 = DB1.TDF Head Defect
 PAR.Defect_HD_user_3 = DB1.TDF_Head_Defect;

 // WRK.Defect Count Usr = CND.Four
 WRK.Defect_Count_Usr = 4;

 // IF WRK.Defect Count Usr is Four
 IF WRK.Defect_Count_Usr = 4;

 // PAR.Defect User  4 = DB1.DF Defect Code
 PAR.Defect_User_4 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 4 = DB1.TDF Head Defect
 PAR.Defect_HD_user_4 = DB1.TDF_Head_Defect;

 // WRK.Defect Count Usr = CND.Five
 WRK.Defect_Count_Usr = 5;

 // IF WRK.Defect Count Usr is Five
 IF WRK.Defect_Count_Usr = 5;

 // PAR.Defect User  5 = DB1.DF Defect Code
 PAR.Defect_User_5 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 5 = DB1.TDF Head Defect
 PAR.Defect_HD_user_5 = DB1.TDF_Head_Defect;

 // WRK.Defect Count Usr = CND.Six
 WRK.Defect_Count_Usr = 6;

 // IF WRK.Defect Count Usr is Six
 IF WRK.Defect_Count_Usr = 6;

 // PAR.Defect User  6 = DB1.DF Defect Code
 PAR.Defect_User_6 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 6 = DB1.TDF Head Defect
 PAR.Defect_HD_user_6 = DB1.TDF_Head_Defect;

 // WRK.Defect Count Usr = CND.Seven
 WRK.Defect_Count_Usr = 7;

 // IF WRK.Defect Count Usr is Seven
 IF WRK.Defect_Count_Usr = 7;

 // PAR.Defect User  7 = DB1.DF Defect Code
 PAR.Defect_User_7 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 7 = DB1.TDF Head Defect
 PAR.Defect_HD_user_7 = DB1.TDF_Head_Defect;

 // WRK.Defect Count Usr = CND.Eight
 WRK.Defect_Count_Usr = 8;

 // IF WRK.Defect Count Usr is Eight
 IF WRK.Defect_Count_Usr = 8;

 // PAR.Defect User  8 = DB1.DF Defect Code
 PAR.Defect_User_8 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 8 = DB1.TDF Head Defect
 PAR.Defect_HD_user_8 = DB1.TDF_Head_Defect;

 // WRK.Defect Count Usr = CND.Nine
 WRK.Defect_Count_Usr = 9;

 // IF WRK.Defect Count Usr is Nine
 IF WRK.Defect_Count_Usr = 9;

 // PAR.Defect User  9 = DB1.DF Defect Code
 PAR.Defect_User_9 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 9 = DB1.TDF Head Defect
 PAR.Defect_HD_user_9 = DB1.TDF_Head_Defect;

 // WRK.Defect Count Usr = CND.Ten
 WRK.Defect_Count_Usr = 10;

 // IF WRK.Defect Count Usr is Ten
 IF WRK.Defect_Count_Usr = 10;

 // PAR.Defect User 10 = DB1.DF Defect Code
 PAR.Defect_User_10 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 10 = DB1.TDF Head Defect
 PAR.Defect_HD_user_10 = DB1.TDF_Head_Defect;

 // WRK.Defect Count Usr = CND.Eleven
 WRK.Defect_Count_Usr = 11;

 QUIT;

 ENDIF;

}


//?if more than 2 defects exist display "+"
CASE;

// IF WRK.Defect User  3 NE WRK.Blank USR
IF WRK.Defect_User_3 <> WRK.Blank_USR;

// RCD.@Status +/- = CND.Add
RCD.@Status_+ = '+';

//?if more than 2 defects exist display "+"
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.@Status +/- = WRK.Blank USR
RCD.@Status_+ = WRK.Blank_USR;

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?F13 = Spread Weight
CASE;

// IF CTL.*CMD key is CF13
IF CTL.*CMD_key = '13';

CASE;

// IF CTL.Head Total USR NE CTL.Head Total Usr 2
IF CTL.Head_Total_USR <> CTL.Head_Total_Usr_2;

// Send error message - 'Head Selected to be spread must equal the Head Weighed.'
ERROR(PRK0768);

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?1= Sel tattoo for weight
CASE;

// IF RCD.*SFLSEL is *Select#1
IF RCD.*SFLSEL = '1';

CASE;

// IF RCD.TH Resale Spread Sts is Mark for Future Sprd Wgt
IF RCD.TH_Resale_Spread_Sts = 'M';

// RCD.TH Resale Spread Sts = CND.Select for Spread
RCD.TH_Resale_Spread_Sts = 'S';

EXECUTE FUNCTION(Chg Rsl Spread Sts    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1202524;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER('S');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


ENDIF;

ENDIF;

//?2= Edit Tattoo
CASE;

// IF RCD.*SFLSEL is Edit
IF RCD.*SFLSEL = '2'/'2';

// Call program Zzz Tattoo Hdr Rsl    E1.
CALL PROGRAM(Zzz Tattoo Hdr Rsl    E1) ('PKL2E1R');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(WRK.Name_USR);
PARAMETER('Y');

ENDIF;

//?7= UnSelect tattoo for weight
CASE;

// IF RCD.*SFLSEL is Select Option 7
IF RCD.*SFLSEL = '7'/'7';

CASE;

// IF RCD.TH Resale Spread Sts is Select for Spread
IF RCD.TH_Resale_Spread_Sts = 'S';

EXECUTE FUNCTION(Chg Rsl Spread Sts    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1202524;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER('M');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


ENDIF;

// RCD.TH Resale Spread Sts = CND.Mark for Future Sprd Wgt
RCD.TH_Resale_Spread_Sts = 'M';

ENDIF;

//?8= Display Defects
CASE;

// IF RCD.*SFLSEL is *Option 8 request
IF RCD.*SFLSEL = '8'/'8';

// Call program Dsp Tattoo Defect     DF.
CALL PROGRAM(Dsp Tattoo Defect     DF) ('PKJ6DFR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);

ENDIF;

//?USER: Process command keys

CASE;

// IF CTL.*CMD key is CF12
IF CTL.*CMD_key = '12';

// OR CTL.*CMD key is CF13
OR CTL.*CMD_key = '13';

// OR CTL.*CMD key is Refresh
OR CTL.*CMD_key = '05';

CASE;

// IF CTL.*CMD key is CF12
IF CTL.*CMD_key = '12';

EXECUTE FUNCTION(Rtv/Chg RslSprd Unsel RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1202523;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.TH_Kill_Date);
{
 //?USER: Process Data record

 //?If tattoo was previously selected, Unselect it now.
 CASE;

 // IF DB1.TH Resale Spread Sts is Select for Spread
 IF DB1.TH_Resale_Spread_Sts = 'S';

 EXECUTE FUNCTION(Chg Rsl Spread Sts    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1202524;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER('M');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

}


// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

// PAR.Return Code USR = CND.Re-Weigh
PAR.Return_Code_USR = 'REWEIGH';

RETURN;

// IF CTL.*CMD key is CF13
IF CTL.*CMD_key = '13';

// Call program Zzz/Chg Rsl Spread WgtXF.
CALL PROGRAM(Zzz/Chg Rsl Spread WgtXF) ('PKMCXFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER(CTL.TST_Wgt);
PARAMETER(CTL.Avg_Live_Wgt_Usr_Rep);
PARAMETER(CTL.Head_Total_Usr_2);
PARAMETER(CTL.Pen_Number);

// PAR.Return Code USR = CND.Create Spread
PAR.Return_Code_USR = 'CRTSPRD';

RETURN;

// IF CTL.*CMD key is Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?USER: Exit program processing

CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

EXECUTE FUNCTION(Rtv/Chg RslSprd Unsel RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1202523;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.TH_Kill_Date);
{
 //?USER: Process Data record

 //?If tattoo was previously selected, Unselect it now.
 CASE;

 // IF DB1.TH Resale Spread Sts is Select for Spread
 IF DB1.TH_Resale_Spread_Sts = 'S';

 EXECUTE FUNCTION(Chg Rsl Spread Sts    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1202524;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER('M');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

}


// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

// PAR.Return Code USR = CND.Re-Weigh
PAR.Return_Code_USR = 'REWEIGH';

RETURN;

ENDIF;

