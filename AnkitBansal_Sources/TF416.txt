      *
      * SYSTEM:      Triumph Foods
      * PROGRAM:     TF416
      * TITLE:       Margin: Specify Margin Adjustment Reports
      * PROGRAMMER:  LeAnne Ramsey
      * CREATED:     09/26/05
      *
      * FUNCTION: This Specify uses an edit record format to allow the user
      *           to specify options for generating the report(s).
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 11/16/06  LeAnne Ramsey
      *           Since we are now closing MIX weekly and Volume by "period",
      *           we added a Week/Period selection.
      *
      * 11/30/06  LeAnne Ramsey
      *           Changed logic to accommodate the new Datamart Calendar file.
      *
      * 03/15/07  LeAnne Ramsey
      *           The users now want MIX to be based on "production" data instead of
      *           "sales" data. In case they decide to revert back to "sales" data in
      *           the future, we have kept all the Mix "sales" logic intact and added
      *           new logic/fields in our processing for "production" data. To control
      *           processing/reporting, we are adding an LDA field that will hold the
      *           value to indicate Sales vs Production. So, when reports are generated
      *           from the 'Margin Close' it will be over Production Data. But, for the
      *           on-demand version we will let them select Sales or Production.
      *
      * 05/02/07  LeAnne Ramsey
      *           Recompile only. Synon file PPAMREP was changed.
      *
      * 01/21/08  LeAnne Ramsey
      *           Added a parm of P=Production on the call to generic program TF815.
      *           A "P" will continue to return the HPS Year/Period/Week to us.
      *           (The JDE programs that call TF815 will now send in A=Accounting to
      *           return Accounting Year/Period.)
      *
      * 08/27/08  LeAnne Ramsey
      *           Removed the on-screen selection of Sales/Production data.
      *           Removed LDSPCD-Sales/Production from LDA. "Sales" is no longer a
      *           choice. All logic is now based only on Produced values.
      *
      * 11/21/08  LeAnne Ramsey
      *           As part of synchronizing the LDAs between the TFS Margin Adjustment Close
      *           and the Meat Costing, we changed the LDA positions.
      *
      * 05/07/09  LeAnne Ramsey
      *           Changed the Print logic to match Meat Costing.
      * 05/07/24  Santosh Patil P310149 - Field length is increased
      *           in TFP015, TFP115. Function is recompiled only.
      *‚06/14/24  Jagdish Mistry JM-P310149 - Populate LDA begin date
      *‚                         Requirement 3 & 4:
      *‚                         Begin date is populated in work file TFP318(TF218)
      *‚                         & Volume summary extension TFP331(TF231)
      *‚                         Added paramter to TF416CL
      *‚11/25/24  Jagdish Mistry JM-P310149 - Populate LDA START date
      *‚                         Opt 2 will calculate amounts similar to opt 1.
      *‚                         1. Margin Adjustment Close
      *‚                         2. Margin Adjustment Reports
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Ftfd416    cf   e             workstn infds(iofeed)
      *
      *
     Fome8rel0  if   e           k disk
      *    Product type
      *
      *
     Fppamrel1  if   e           k disk
      *    TF Classification
      *
      *
     Ftfl015a   if   e           k disk
      *    Mix Summary - Weekly
      *
      *
     Ftfl115a   if   e           k disk
      *    Mix Summary - Period
      *
      *
     Ftfl018a   if   e           k disk
      *    Volume Summary - Weekly
      *
      *
     Ftfl118a   if   e           k disk
      *    Volume Summary - Period
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  Compile time array for SBMJOB used in QCMDEXC
      *---------------------------------------------------------------
     D cmd             s              1    dim(80) ctdata perrcd(80)
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D maxmsg          s              2  0  inz(20)
      *
      *
      * Workfields for date manipulation
      *
     D wkisodate       s               d   datfmt(*iso)
     D wkmdydt         s               d   datfmt(*mdy)
     D wkdt            s              8  0
     D wkmdy           s              6  0
      *
      *
      * Parm fields
      *
     D xxrpt           s                   like(d1rpt)
     D xxrptds         s                   like(d1rptds)
      *
      *
     D xxwpfl          s                   like(d1wpfl)
     D xxwpds          s                   like(d1wpds)
      *
     D xxtfclcd        s                   like(d1tfclcd)
     D xxtfclds        s                   like(d1tfclds)
      *
     D xxtfcgcd        s                   like(d1tfcgcd)
     D xxtfcgds        s                   like(d1tfcgds)
      *
     D xxistycd        s                   like(d1istycd)
     D xxistyds        s                   like(d1istyds)
     D xxalphtycd      s              3
      *
     D xxsatdt         s              8  0
     D xxdt            s              8  0
     D xxyr            s              4  0
     D xxpe            s              2  0
     D xxwk            s              2  0
     d xxapfl          s              1
      *
     D xxpbdt          s              8  0
     D xxpbsyndt       s              7  0
     D xxpbmdy         s              6  0
      *
     D xxpedt          s              8  0
     D xxpesyndt       s              7  0
     D xxpemdy         s              6  0
     ‚* JM-P310149-START
     D wkEndDate       s              8  0
     D wkBegDate       s              8  0 Inz(*Zeros)
     D wkacyr          s              4  0 Inz(*Zeros)
     D wkacpe          s              2  0 Inz(*Zeros)
     D wkacqtr         s              1  0 Inz(*Zeros)
     D wkacwk          s              2  0 Inz(*Zeros)
     D wkhpspicdt      s              5  0 Inz(*Zeros)
     D wkhpscdyr       s              4  0 Inz(*Zeros)
     D wkhpscdwk       s              2  0 Inz(*Zeros)
     D wkisodateEnd    s               d   datfmt(*iso)
     ‚* JM-P310149-END
      *
      *
      *  Parms for use with QCMDEXC.  'LENGTH' is the length of the
      *  command that will be issued with QCMDEXC.  QCMDEXC requires
      *  the field containing length to be defined as 15 with 5 decimal
      *  positions.  The field 'CMDSBM' will hold the values of the
      *  submit job command when passed as a parm on the call to
      *  QCMDEXC.
      *
     D length          s             15  5 inz(80)
     D cmdsbm          s             80
      *
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      * Data areas
      *---------------------------------------------------------------
      *
      *---------------------------------------------------------------
      * Local data area.
      *---------------------------------------------------------------
      *
     Dlda             uds                  dtaara(*lda)
     D  ldpfcd                 1      1
     D  ldyr                   2      5  0
     D  ldwk                   6      7  0
      *
     ‚* JM-P310149-START
     D  ldwbdt                 8     15  0
     D  ldwedt                29     36  0
     ‚* JM-P310149-11/25/24
     ‚* JM-P310149-This is CYYMMDD format for Week End Date
     D  ldwesyn               37     43  0
     ‚* JM-P310149-END
     D  ldwemdy               44     49  0
      *
     D  ldpe                  51     52  0
     D  ldpbdt                53     60  0
     D  ldpbmdy               61     66  0
     D  ldpedt                67     74  0
     D  ldpemdy               75     80  0
      *
     D  ldrpt                113    113
     D  ldrptds              114    133
      *
     D  ldwpfl               134    134
      *
     D  ldtfcgcd             139    140
     D  ldtfcgds             141    155
      *
     D  ldtfclcd             156    158
     D  ldtfclds             159    188
      *
     D  ldistycd             189    191  0
     D  ldistyds             192    221
      *
     D  ldoutq               401    410
     D  ldhold               411    414
     D  ldsave               415    418
     D  ldcopy               419    419  0
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
     C
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the error
      * message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to CRT.
      *
     C                   write     tf416k1
     C                   write     tf416ec
     C                   exfmt     tf416r1
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
      *
     C                   when      *in17 = *on                                  F17-print options
     C                   call      'RO890'
     C                   eval      routne = scrn1
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                       API
     C                   eval      routne = scrn1
     C                   other
      *
     C                   eval      routne = edit1
     C                   endsl
      *
      * Bring in the LDA to pick up any printer changes the user may
      * have made from called programs
      *
     C                   in        lda
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Edit screen 1 input fields
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * Validate required fields:
      *   1) date
      *   2) report
      *   3) week/period flag
      *   4) check that data exists for users selections
      *
     C                   exsr      $mdy
     C                   exsr      $rpt
     C                   exsr      $wpfl
      *
     C                   if        *in30 = *off
     C                   exsr      $data
     C                   endif
      *
      *
      * Validate optional fields:
      *   1) TF class group code
      *   2) TF classification code
      *   3) Item structure type
      *
     C                   exsr      $tfcgcd
     C                   exsr      $tfclcd
     C                   exsr      $istycd
      *
      * If there are no errors, execute the subroutine to submit the report.
      *
     C                   if        error = 0 and *in08 = *on                    If no error
     C                   exsr      $proc1
     C                   endif                                                  If no error
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Date
      *----------------------------------------------------------------
      *
      * Validations:
      *  1) required
      *  2) cannot be negative
      *  3) must be a valid date
      *
      *
     C     $mdy          begsr
      *
     C                   z-add     0             d1wemdy
     C                   z-add     0             d1yr
     C                   z-add     0             d1wk
     C                   z-add     0             d1pe
      *
     C                   select
     C                   when      d1mdy = 0
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
      *
     C                   when      d1mdy < 0
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   other
      *
     C     *mdy          test(d)                 d1mdy                  92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      * Flip the date from MMDDYY to CCYYMMDD and go find:
      *  1) the week-ending date for this date
      *  2) the year/period/week for this week-ending date
      *  3) the beginning/ending period dates
      *
     C     *mdy          move      d1mdy         wkisodate
     C                   move      wkisodate     wkdt
     C                   exsr      $wedt
     C                   endif                                                  If bad date
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate Report
      *----------------------------------------------------------------
      *
     C     $rpt          begsr
      *
     C                   move      *blank        d1rptds
      *
     C                   select
     C                   when      d1rpt = 'M'
     C                   eval      d1rptds = 'Mix only'
      *
     C                   when      d1rpt = 'V'
     C                   eval      d1rptds = 'Volume only'
      *
     C                   when      d1rpt = 'B'
     C                   eval      d1rptds = 'Both Mix and Volume'
     C                   other
      *
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08082'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Week/Period Flag
      *----------------------------------------------------------------
      *
     C     $wpfl         begsr
      *
     C                   move      *blank        d1wpds
      *
     C                   select
     C                   when      d1wpfl = 'W'
     C                   eval      d1wpds = 'Weekly Reports'
      *
     C                   when      d1wpfl = 'P'
     C                   eval      d1wpds = 'Period Reports'
     C                   other
      *
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08087'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Check that Data exists
      *----------------------------------------------------------------
      *
      * In August 2008 we stopped creating data in the "period" files since
      * the users were doing all processing by "week". We kept the existing
      * "period" data in the files so they could run historical reports.
      * So, now we will make sure that data exists before they submit it.
      *
     C     $data         begsr
      *
      * Period data
     C                   select
     C                   when      d1wpfl = 'P'
      *
     C                   if        d1rpt = 'B' or d1rpt = 'M'
     C     key02         chain     tfl115a                            92
     C                   if        *in92 = *on
     C                   seton                                        37
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08149'
     C                   endif
     C                   endif
     C                   endif
      *
     C                   if        d1rpt = 'B' or d1rpt = 'V'
     C     key02         chain     tfl118a                            92
     C                   if        *in92 = *on
     C                   seton                                        37
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08150'
     C                   endif
     C                   endif
     C                   endif
      *
      * Weekly
     C                   when      d1wpfl = 'W'
      *
     C                   if        d1rpt = 'B' or d1rpt = 'M'
     C     key01         chain     tfl015a                            92
     C                   if        *in92 = *on
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08151'
     C                   endif
     C                   endif
     C                   endif
      *
     C                   if        d1rpt = 'B' or d1rpt = 'V'
     C     key01         chain     tfl018a                            92
     C                   if        *in92 = *on
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08152'
     C                   endif
     C                   endif
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Retrieve Week-ending date
      *----------------------------------------------------------------
      *
     C     $wedt         begsr
      *
     C                   call      'TF811'
     C                   parm      wkdt          xxdt
     C                   parm      0             xxsatdt
     C                   parm      0             xxyr
     C                   parm      0             xxpe
     C                   parm      0             xxwk
      *
      * Get returned 'week-ending date' into MMDDYY format.
      *
     C     *iso          test(d)                 xxsatdt                92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09229'
     C                   endif
     C                   else
      *
     C     *iso          move      xxsatdt       wkmdydt
     C                   move      wkmdydt       wkmdy
     C                   z-add     wkmdy         d1wemdy
     C                   z-add     xxsatdt       ldwedt
     C                   exsr      $period
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Retrieve Period info
      *----------------------------------------------------------------
      *
     C     $period       begsr
      *
      * Retrieve the Production Year/Period/Week for the Week-ending Date.
      *
     C                   call      'TF815'
     C                   parm                    xxsatdt
     C                   parm      'P'           xxapfl
     C     d1yr          parm      0             xxyr
     C     d1pe          parm      0             xxpe
     C     d1wk          parm      0             xxwk
      *
      * Retrieve the Beginning/Ending Period Dates for this Year/Period
      *
     C                   call      'TF816'
     C                   parm                    xxyr
     C                   parm                    xxpe
     C     ldpbdt        parm      0             xxpbdt
     C                   parm      0             xxpbsyndt
     C     ldpbmdy       parm      0             xxpbmdy
     C     ldpedt        parm      0             xxpedt
     C                   parm      0             xxpesyndt
     C     ldpemdy       parm      0             xxpemdy
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate TF Class Group Code
      *----------------------------------------------------------------
      *
     C     $tfcgcd       begsr
      *
     C                   move      *blank        d1tfcgds
      *
     C                   select
     C                   when      d1tfcgcd = *blank
     C                   other
      *
     C                   call      'TF804'
     C                   parm      d1tfcgcd      xxtfcgcd
     C                   parm      *blank        xxtfcgds
      *
     C                   if        xxtfcgds = *blank                            If bad
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08013'     mgid(e)
     C                   endif
     C                   else
      *
     C                   eval      d1tfcgds = xxtfcgds
     C                   endif                                                  If bad
     C                   endsl
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate TF Classification
      *----------------------------------------------------------------
      *
     C     $tfclcd       begsr
      *
     C                   move      *blank        d1tfclds
      *
     C                   select
     C                   when      d1tfclcd = *blank
     C                   other
      *
     C     d1tfclcd      chain     ppamrel1                           92
     C                   if        *in92 = *off                                 If ok
     C                   eval      d1tfclds = amq0na
     C                   else
      *
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08012'     mgid(e)
     C                   clear                   mgw
     C                   movea     d1tfclcd      mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If ok
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate Item Structure Type Code
      *----------------------------------------------------------------
      *
     C     $istycd       begsr
      *
     C                   move      *blank        d1istyds
      *
     C                   select
     C                   when      d1istycd = 0
      *
     C                   when      d1istycd < 0
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   endif
     C                   other
      *
     C     d1istycd      chain     ome8rel0                           92
     C                   if        *in92 = *off                                 If ok
     C                   move(p)   e8dctx        d1istyds
     C                   else
      *
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08003'     mgid(e)
     C                   clear                   mgw
     C                   move      d1istycd      xxalphtycd
     C                   movea     xxalphtycd    mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If ok
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * F4 prompt on screen 1
      *----------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
     C                   select
      * Report
     C                   when      fld = 'D1RPT'
     C                   call      'TF516'
     C                   parm      *blank        xxrpt
     C                   parm      *blank        xxrptds
     C                   seton                                        51
     C                   if        xxrpt <> *blank
     C                   move      xxrpt         d1rpt
     C                   move      xxrptds       d1rptds
     C                   endif
      *
      * Weekly or Period
     C                   when      fld = 'D1WPFL'
     C                   call      'TF523'
     C                   parm      *blank        xxwpfl
     C                   parm      *blank        xxwpds
     C                   seton                                        55
     C                   if        xxwpfl <> *blank
     C                   move      xxwpfl        d1wpfl
     C                   move      xxwpds        d1wpds
     C                   endif
      *
      * TF Class Group Code
     C                   when      fld = 'D1TFCGCD'
     C                   call      'TF506'
     C                   parm      *blank        xxtfcgcd
     C                   parm      *blank        xxtfcgds
     C                   seton                                        52
     C                   if        xxtfcgcd <> *blank
     C                   move      xxtfcgcd      d1tfcgcd
     C                   move      xxtfcgds      d1tfcgds
     C                   endif
      *
      * TF Classification Code
     C                   when      fld = 'D1TFCLCD'
     C                   call      'TF505'
     C                   parm      *blank        xxtfclcd
     C                   parm      *blank        xxtfclds
     C                   seton                                        53
     C                   if        xxtfclcd <> *blank
     C                   movel     xxtfclcd      d1tfclcd
     C                   movel     xxtfclds      d1tfclds
     C                   endif
      *
      * Item Structure Type
      *
     C                   when      fld = 'D1ISTYCD'
     C                   call      'TF501'
     C                   parm      0             xxistycd
     C                   parm      *blank        xxistyds
     C                   seton                                        52
     C                   if        xxistycd <> 0
     C                   z-add     xxistycd      d1istycd
     C                   movel(p)  xxistyds      d1istyds
     C                   endif
     C                   other
      *
      * F4 not valid for this field, so issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09011'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Process user's request
      *---------------------------------------------------------------
      *
      * This subroutine is only executed if the user submits the listing
      *
     C     $proc1        begsr
      *
      * Move submission values into LDA
      *
     ‚* JM-P310149-START
     ‚*
     C     *mdy          move      D1MDY         wkisodate
     C                   move      wkisodate     wkEndDate
     C                   Call      'HP8017'
     C                   Parm                    wkEndDate
     C                   Parm                    wkacyr
     C                   Parm                    wkacpe
     C                   Parm                    wkacqtr
     C                   Parm                    wkacwk
     C                   Parm                    wkhpspicdt
     C                   Parm                    wkhpscdyr
     C                   Parm                    wkhpscdwk
     ‚*
     C                   Call      'HP8016'
     C                   Parm                    wkhpscdyr
     C                   Parm                    wkhpscdwk
     C                   Parm                    wkBegDate
     C                   Parm                    wkEndDate
     C                   z-add     wkBegDate     ldwbdt
     ‚* JM-P310149-END
     C                   move      'D'           ldpfcd
      *
     C                   z-add     d1wemdy       ldwemdy
     C                   z-add     d1yr          ldyr
     C                   z-add     d1wk          ldwk
     C                   z-add     d1pe          ldpe
      *
     C                   move      d1wpfl        ldwpfl
      *
     C                   move      d1tfclcd      ldtfclcd
     C                   move      d1tfclds      ldtfclds
      *
     C                   move      d1tfcgcd      ldtfcgcd
     C                   move      d1tfcgds      ldtfcgds
      *
     C                   z-add     d1istycd      ldistycd
     C                   move      d1istyds      ldistyds
      *
     C                   move      d1rpt         ldrpt
     C                   move      d1rptds       ldrptds
     ‚* JM-P310149-START-11/25/24
     C                   Eval      wkisodateEnd = %date(wkEndDate)
     C                   Eval      ldwesyn= %dec(%Char(wkisodateEnd:*cymd0):7:0)
     ‚* JM-P310149-END-11/25/24
     C                   out       lda
      *
      * Move the 80-character compile time array 'CMD' to an
      * 80-character field for passing as a parm with QCMDEXC.
      *
     C                   movea     cmd           cmdsbm
     C                   call      'QCMDEXC'
     C                   parm                    cmdsbm
     C                   parm                    length
      *
      * Issue the standard request submission message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09003'
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Seton last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *   none
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    d1yr
     C                   kfld                    d1wk
      *
     C     key02         klist
     C                   kfld                    d1yr
     C                   kfld                    d1pe
      *
      * Retrieve/initialize "printer" fields in the LDA
      *
     C                   call      'RO891CL'
     C                   in        lda
      *
      * Initialize LDA fields
      *
     C                   z-add     0             ldyr
     C                   z-add     0             ldwk
     C                   z-add     0             ldwedt
     C                   z-add     0             ldwemdy
      *
     C                   z-add     0             ldpe
     C                   z-add     0             ldpbdt
     C                   z-add     0             ldpbmdy
     C                   z-add     0             ldpedt
     C                   z-add     0             ldpemdy
      *
     C                   z-add     0             ldistycd
     C                   out       lda
      *
      * Set screen defaults.
      *
     C                   move      'W'           d1wpfl
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
      *****************************************************************
      * COMPILE TIME ARRAY 'CMD' USED IN QCMDEXC
      *****************************************************************
     ‚* JM-P310149-Added parameter
      ***** CMD table 'CMD' submits listing when F8 selected
      ***SBMJOB CMD(CALL PGM(TF416CL))  JOB(MARGRPTS) JOBQ(*JOBD)
** CMD table 'CMD' submits listing when F8 selected
SBMJOB CMD(CALL PGM(TF416CL) PARM(('Y'))) JOB(MARGRPTS) JOBQ(*JOBD)
