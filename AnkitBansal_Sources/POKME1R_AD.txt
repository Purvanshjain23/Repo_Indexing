// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POKME1R
// ?Date: 14.08.2025 Time: 03:37:43
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// KEY.Company Number = PAR.Company Number
KEY.Company_Number = PAR.Company_Number;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

//?Changes Documentation
//?*****
//?* 11/22/2005 LJB - added restriction by co#
//?* 12/15/2005 LJB - Added tests:
//?* 1. First time in, display prompt screen.
//?* 2. If key screen order number is blank, send error message.
//?* 3. If key screen item number is blank, send error message.
//?* 4. Restrict company number if Allow Multi-Company is No (11/22/2005)
//?* 5. Change parms to Val Co/Ord/Item/Seq to send wrk not lcl
//?* 6. Added: if either sequence number is zeros, retrieve them
//?* 7. If all required parms are entered, go directly to detail screen
//?* 8. After update is made, display prompt screen instead of key screen
//?* 9. Added Exception Code to file and to program. This is to
//?*    accommodate using this file for Average Weight exceptions
//?* 10. Added programming for Average Weight exceptions.
//?*****
//?USER: Validate key screen

//?** If F4, Prompt for order info
CASE;

// IF KEY.*CMD key is *Prompt
IF KEY.*CMD_key = '04';

// AND PGM.*Cursor field <IS> KEY.Order Number
AND ( PGM.*Cursor_field = KEY.Order_Number;

// OR PGM.*Cursor field <IS> KEY.Order Sequence Number
OR PGM.*Cursor_field = KEY.Order_Sequence_Number;

// OR PGM.*Cursor field <IS> KEY.Order Secondary Line Seq
OR PGM.*Cursor_field = KEY.Order_Secondary_Line_Seq;

// OR PGM.*Cursor field <IS> KEY.Item Code
OR PGM.*Cursor_field = KEY.Item_Code );

// Call program Sel Item f/Price ExcptSL.
CALL PROGRAM(Sel Item f/Price ExcptSL) ('POKJSRR');
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Order_Number);
PARAMETER(KEY.Order_Sequence_Number);
PARAMETER(KEY.Order_Secondary_Line_Seq);
PARAMETER(KEY.Item_Code);
PARAMETER(PAR.Price_Overage_Override);
PARAMETER(WRK.Record_Selected_USR);

ENDIF;

//?** Error if no order was selected
CASE;

// IF KEY.Company Number is Equal to zero
IF KEY.Company_Number = *ZERO;

// Send error message - 'Company Number is required.'
ERROR(USR2183);
MSGPARM(KEY.Company_Number);

QUIT;

ENDIF;

//?** Error if no order was selected
CASE;

// IF KEY.Order Number is Equal to zeros
IF KEY.Order_Number = *ZERO;

// Send error message - 'Order Number must be entered.'
ERROR(USR1936);
MSGPARM(KEY.Order_Number);

QUIT;

ENDIF;

//?** Error if no item code was selected
CASE;

// IF KEY.Item Code is Not Entered
IF KEY.Item_Code = *ZERO;

// Send information message - 'Warning: Item is not on the Order.'
MESSAGE(USR2766 *INFO);
MSGPARM(KEY.Company_Number);
MSGPARM(PAR.Item_Code);

QUIT;

ENDIF;

//?** Error if no order sequence number is entered
CASE;

// IF KEY.Order Sequence Number is Equal to zero
IF KEY.Order_Sequence_Number = *ZERO;

// Send error message - 'Fields not found.'
ERROR(USR2408);

QUIT;

ENDIF;

//?** Error if no secondary sequence number is entered
CASE;

// IF KEY.Order Secondary Line Seq is ZERO
IF KEY.Order_Secondary_Line_Seq = *ZERO;

// Send error message - 'Fields not found.'
ERROR(USR2408);

QUIT;

ENDIF;

EXECUTE FUNCTION(Rtv Order Dtl Prc Exc RT) TYPE(RTVOBJ) FILE(POA8REP)           AC1622537;
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Order_Number);
PARAMETER(KEY.Order_Sequence_Number);
PARAMETER(KEY.Order_Secondary_Line_Seq);
PARAMETER(KEY.Exception_Code);
PARAMETER(KEY.Item_Code);
PARAMETER(PAR.Initials_of_Salesperson);
PARAMETER(PAR.Price_Exception_Comment);
{
 //?USER: Processing if Data record not found

 // PAR.Initials of Salesperson = CON.*BLANK
 PAR.Initials_of_Salesperson = *BLANK;

 // PAR.Price Exception Comment = CON.*BLANK
 PAR.Price_Exception_Comment = *BLANK;

 // PGM.*Return code = CND.Item not found
 PGM.*Return_code = 'USR0374';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?** Change Add/Change modes
CASE;

// IF PAR.Initials of Salesperson NE WRK.Blank 6 USR
IF PAR.Initials_of_Salesperson <> WRK.Blank_6_USR;

// PGM.*Program mode = CND.*CHANGE
PGM.*Program_mode = 'CHG';

//?** Change Add/Change modes
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

ENDIF;

//?USER: Initialize detail screen (new record)

//?** Change Add/Change modes
CASE;

// IF PAR.Initials of Salesperson NE WRK.Blank 6 USR
IF PAR.Initials_of_Salesperson <> WRK.Blank_6_USR;

// PGM.*Program mode = CND.*CHANGE
PGM.*Program_mode = 'CHG';

//?** Change Add/Change modes
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

ENDIF;

// DTL.Company Number = KEY.Company Number
DTL.Company_Number = KEY.Company_Number;

// DTL.Order Number = KEY.Order Number
DTL.Order_Number = KEY.Order_Number;

// DTL.Order Sequence Number = KEY.Order Sequence Number
DTL.Order_Sequence_Number = KEY.Order_Sequence_Number;

// DTL.Order Secondary Line Seq = KEY.Order Secondary Line Seq
DTL.Order_Secondary_Line_Seq = KEY.Order_Secondary_Line_Seq;

// DTL.Exception Code = KEY.Exception Code
DTL.Exception_Code = KEY.Exception_Code;

// DTL.Item Code = KEY.Item Code
DTL.Item_Code = KEY.Item_Code;

// DTL.Initials of Salesperson = PAR.Initials of Salesperson
DTL.Initials_of_Salesperson = PAR.Initials_of_Salesperson;

// DTL.Price Exception Comment = PAR.Price Exception Comment
DTL.Price_Exception_Comment = PAR.Price_Exception_Comment;

//?** Update price field with price from selected record-new   3/07/06 LJB
EXECUTE FUNCTION(RTV All Fields/1 Line  Rt) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1438734;
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Order_Number);
PARAMETER(KEY.Order_Sequence_Number);
PARAMETER(KEY.Order_Secondary_Line_Seq);
PARAMETER(NLL.Item_Code);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(NLL.Ship_To_Customer);
PARAMETER(NLL.Order_Group_Code);
PARAMETER(NLL.Detail_Line_Status);
PARAMETER(NLL.Detail_Line_Status_Last);
PARAMETER(NLL.Billing_Detail_Cost_Dol);
PARAMETER(NLL.Billing_Detail_Gross_Dol);
PARAMETER(NLL.Billing_Detail_Net_Dol);
PARAMETER(NLL.Quantity_to_Substitute);
PARAMETER(NLL.Comment_Print_Acknowledge);
PARAMETER(NLL.Comment_Print_Inv_Cr_Memo);
PARAMETER(NLL.Comment_Print_Pick_Slip);
PARAMETER(NLL.Comment_Print_Ship_Doc);
PARAMETER(NLL.Extended_Amount);
PARAMETER(NLL.Market_Pricing_Date);
PARAMETER(NLL.Commodity_Market_Code);
PARAMETER(NLL.Date_Method_Code);
PARAMETER(NLL.Price_Method_Code);
PARAMETER(DTL.Price_Overage_Override);
PARAMETER(NLL.Contract_Number);
PARAMETER(NLL.Price_Status);
PARAMETER(NLL.Pricing_Date_Used);
PARAMETER(NLL.U_M_Base_Price);
PARAMETER(NLL.U_M_Ordered);
PARAMETER(NLL.Work_Confirm_Status);
PARAMETER(NLL.Work_Over_Short_Status);
PARAMETER(NLL.OD_Production_Plan_Sts);
PARAMETER(NLL.Order_Desc_Line_One);
PARAMETER(NLL.Order_Desc_Line_Two);
PARAMETER(NLL.Age_Code);
PARAMETER(NLL.Palletize);
PARAMETER(NLL.Slip_Sheet);
PARAMETER(NLL.Catch_Weight_Status);
PARAMETER(NLL.Price_Audit);
PARAMETER(NLL.Price_Audit_Reason_Code);
PARAMETER(NLL.Production_Date_Control);
PARAMETER(NLL.Rated_Freight);
PARAMETER(NLL.Quantity_Ordered);
PARAMETER(NLL.Weight_Ordered);
PARAMETER(NLL.Quantity_Scheduled);
PARAMETER(NLL.Weight_Scheduled);
PARAMETER(NLL.Quantity_Shipped_Total);
PARAMETER(NLL.Weight_Shipped_Total);
PARAMETER(NLL.Unit_Cost_Pricing_U_M);
PARAMETER(NLL.Unit_Cost_Per_Pound);
PARAMETER(NLL.Unit_Price);
PARAMETER(NLL.Unit_Price_Credit);
PARAMETER(NLL.Unit_Price_Ordered_U_M);
PARAMETER(NLL.Unit_Weight_Ordered_U_M);
PARAMETER(NLL.Tare_Weight_Total);
PARAMETER(NLL.Requested_Ship_Date);
PARAMETER(NLL.Scheduled_Ship_Date);
PARAMETER(NLL.Actual_Shipped_Date);
PARAMETER(NLL.Affect_Inventory_Status);
PARAMETER(NLL.Affect_Sales_Doll_Status);
PARAMETER(NLL.Affect_Sales_Pnds_Status);
PARAMETER(NLL.Item_Structure_Type_Code);
PARAMETER(NLL.Item_Structure_Group_Code);
PARAMETER(NLL.Item_Structure_Class_Code);
PARAMETER(NLL.Item_Level);
PARAMETER(NLL.Quality_Level);
PARAMETER(NLL.Pricing_Product_Class_Rep);
PARAMETER(NLL.Season_Product_Class_Repo);
PARAMETER(NLL.Date_of_Original_Entry);
PARAMETER(NLL.User_Profile_Name);
PARAMETER(NLL.Country_Code);
PARAMETER(NLL.Event_Code);
PARAMETER(NLL.Reason_Code);
PARAMETER(NLL.Sales_Route_Code);
PARAMETER(NLL.Modified_Flag);
PARAMETER(NLL.Substituted_Flag);
PARAMETER(NLL.OD_Schedule_Override_Sts);
PARAMETER(NLL.Affect_Trade_Fund);
PARAMETER(NLL.Affect_Commission);
PARAMETER(NLL.Affect_Pricing);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV UM Price,Ext Amt  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2171237;
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Order_Number);
PARAMETER(KEY.Item_Code);
PARAMETER(DTL.Extended_Amount);
PARAMETER(DTL.UOM_Pricing);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize detail screen (existing record)

//?** Change Add/Change modes
CASE;

// IF PAR.Initials of Salesperson NE WRK.Blank 6 USR
IF PAR.Initials_of_Salesperson <> WRK.Blank_6_USR;

// PGM.*Program mode = CND.*CHANGE
PGM.*Program_mode = 'CHG';

//?** Change Add/Change modes
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

ENDIF;

// DTL.Company Number = KEY.Company Number
DTL.Company_Number = KEY.Company_Number;

// DTL.Order Number = KEY.Order Number
DTL.Order_Number = KEY.Order_Number;

// DTL.Order Sequence Number = KEY.Order Sequence Number
DTL.Order_Sequence_Number = KEY.Order_Sequence_Number;

// DTL.Order Secondary Line Seq = KEY.Order Secondary Line Seq
DTL.Order_Secondary_Line_Seq = KEY.Order_Secondary_Line_Seq;

// DTL.Exception Code = KEY.Exception Code
DTL.Exception_Code = KEY.Exception_Code;

// DTL.Item Code = KEY.Item Code
DTL.Item_Code = KEY.Item_Code;

// DTL.Initials of Salesperson = PAR.Initials of Salesperson
DTL.Initials_of_Salesperson = PAR.Initials_of_Salesperson;

// DTL.Price Exception Comment = PAR.Price Exception Comment
DTL.Price_Exception_Comment = PAR.Price_Exception_Comment;

//?** Update price field with price from selected record-chg   3/07/06 LJB
EXECUTE FUNCTION(RTV All Fields/1 Line  Rt) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1438734;
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Order_Number);
PARAMETER(KEY.Order_Sequence_Number);
PARAMETER(KEY.Order_Secondary_Line_Seq);
PARAMETER(NLL.Item_Code);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(NLL.Ship_To_Customer);
PARAMETER(NLL.Order_Group_Code);
PARAMETER(NLL.Detail_Line_Status);
PARAMETER(NLL.Detail_Line_Status_Last);
PARAMETER(NLL.Billing_Detail_Cost_Dol);
PARAMETER(NLL.Billing_Detail_Gross_Dol);
PARAMETER(NLL.Billing_Detail_Net_Dol);
PARAMETER(NLL.Quantity_to_Substitute);
PARAMETER(NLL.Comment_Print_Acknowledge);
PARAMETER(NLL.Comment_Print_Inv_Cr_Memo);
PARAMETER(NLL.Comment_Print_Pick_Slip);
PARAMETER(NLL.Comment_Print_Ship_Doc);
PARAMETER(NLL.Extended_Amount);
PARAMETER(NLL.Market_Pricing_Date);
PARAMETER(NLL.Commodity_Market_Code);
PARAMETER(NLL.Date_Method_Code);
PARAMETER(NLL.Price_Method_Code);
PARAMETER(DTL.Price_Overage_Override);
PARAMETER(NLL.Contract_Number);
PARAMETER(NLL.Price_Status);
PARAMETER(NLL.Pricing_Date_Used);
PARAMETER(NLL.U_M_Base_Price);
PARAMETER(NLL.U_M_Ordered);
PARAMETER(NLL.Work_Confirm_Status);
PARAMETER(NLL.Work_Over_Short_Status);
PARAMETER(NLL.OD_Production_Plan_Sts);
PARAMETER(NLL.Order_Desc_Line_One);
PARAMETER(NLL.Order_Desc_Line_Two);
PARAMETER(NLL.Age_Code);
PARAMETER(NLL.Palletize);
PARAMETER(NLL.Slip_Sheet);
PARAMETER(NLL.Catch_Weight_Status);
PARAMETER(NLL.Price_Audit);
PARAMETER(NLL.Price_Audit_Reason_Code);
PARAMETER(NLL.Production_Date_Control);
PARAMETER(NLL.Rated_Freight);
PARAMETER(NLL.Quantity_Ordered);
PARAMETER(NLL.Weight_Ordered);
PARAMETER(NLL.Quantity_Scheduled);
PARAMETER(NLL.Weight_Scheduled);
PARAMETER(NLL.Quantity_Shipped_Total);
PARAMETER(NLL.Weight_Shipped_Total);
PARAMETER(NLL.Unit_Cost_Pricing_U_M);
PARAMETER(NLL.Unit_Cost_Per_Pound);
PARAMETER(NLL.Unit_Price);
PARAMETER(NLL.Unit_Price_Credit);
PARAMETER(NLL.Unit_Price_Ordered_U_M);
PARAMETER(NLL.Unit_Weight_Ordered_U_M);
PARAMETER(NLL.Tare_Weight_Total);
PARAMETER(NLL.Requested_Ship_Date);
PARAMETER(NLL.Scheduled_Ship_Date);
PARAMETER(NLL.Actual_Shipped_Date);
PARAMETER(NLL.Affect_Inventory_Status);
PARAMETER(NLL.Affect_Sales_Doll_Status);
PARAMETER(NLL.Affect_Sales_Pnds_Status);
PARAMETER(NLL.Item_Structure_Type_Code);
PARAMETER(NLL.Item_Structure_Group_Code);
PARAMETER(NLL.Item_Structure_Class_Code);
PARAMETER(NLL.Item_Level);
PARAMETER(NLL.Quality_Level);
PARAMETER(NLL.Pricing_Product_Class_Rep);
PARAMETER(NLL.Season_Product_Class_Repo);
PARAMETER(NLL.Date_of_Original_Entry);
PARAMETER(NLL.User_Profile_Name);
PARAMETER(NLL.Country_Code);
PARAMETER(NLL.Event_Code);
PARAMETER(NLL.Reason_Code);
PARAMETER(NLL.Sales_Route_Code);
PARAMETER(NLL.Modified_Flag);
PARAMETER(NLL.Substituted_Flag);
PARAMETER(NLL.OD_Schedule_Override_Sts);
PARAMETER(NLL.Affect_Trade_Fund);
PARAMETER(NLL.Affect_Commission);
PARAMETER(NLL.Affect_Pricing);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV UM Price,Ext Amt  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2171237;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(DTL.Extended_Amount);
PARAMETER(DTL.UOM_Pricing);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Delete DBF record

EXECUTE FUNCTION(Del Order Dtl Pric Ex DO) TYPE(DLTOBJ) FILE(POA8REP)           AC1622410;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Order_Sequence_Number);
PARAMETER(DTL.Order_Secondary_Line_Seq);
PARAMETER(DTL.Exception_Code);

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Order Dtl Pric Ex CR) TYPE(CRTOBJ) FILE(POA8REP)           AC1622408;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Order_Sequence_Number);
PARAMETER(DTL.Order_Secondary_Line_Seq);
PARAMETER(DTL.Exception_Code);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Initials_of_Salesperson);
PARAMETER(DTL.Price_Exception_Comment);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Job_Time);
PARAMETER(DTL.User_Id);
PARAMETER(DTL.Job_Name);
PARAMETER(DTL.Job_Date);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Order Dtl Pric Ex CH) TYPE(CHGOBJ) FILE(POA8REP)           AC1622409;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Order_Sequence_Number);
PARAMETER(DTL.Order_Secondary_Line_Seq);
PARAMETER(DTL.Exception_Code);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Initials_of_Salesperson);
PARAMETER(DTL.Price_Exception_Comment);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Job_Time);
PARAMETER(DTL.User_Id);
PARAMETER(DTL.Job_Name);
PARAMETER(DTL.Job_Date);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


