      *****************  RPG PROGRAM HEADING  ************************
     h option(*SRCSTMT:*NODEBUGIO)
      ****************************************************************
      *
      * SYSTEM:      Triump Foods
      * PROGRAM:     TF104
      * TITLE:       Create Cash Distribution Balance Adjustment
      * PROGRAMMER:  LeAnne Ramsey
      * CREATED:     11/01/06
      *
      *
      * FUNCTION: Uses an edit record format to create records.
      *
      *           There is no revising/deleting of these Adjustment records. If
      *           the user screws up an adjustment entry, he must create another
      *           adjustment record to fix the screw-up.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 09/15/09  LeAnne Ramsey
      *           Recompile only. Fields added to TFP011-Cash Distribution Balance.
      /eject
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Ftfd104    cf   e             workstn infds(iofeed)
      *
      *
     Ftfp011    uf   e           k disk
      *   Cash distribution balance
      *
      *
     Ftfp023    uf a e           k disk
      *   Cash distribution balance adjustments
      *
      *
      /eject
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D create          c                   'CREATE'
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
     D update          c                   'UPDATE'
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D rtncd           s              2
     D maxmsg          s              2  0  inz(20)
      *
      *
      * Workfields for date manipulation
      *
     D wkisodate       s               d   datfmt(*iso)
     D wkmdydt         s               d   datfmt(*mdy)
      *
     D wkwedt          s              8  0
     D wkajdt          s              8  0
     D wkdt            s              8  0
     D wkmdy           s              6  0
      *
      *
      * Parms
      *
     D xxynfl          s                   like(d1rcexfl)
     D xxsatdt         s              8  0
     D xxdt            s              8  0
     D xxyr            s              4  0
     D xxpe            s              2  0
     D xxwk            s              2  0
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *---------------------------------------------------------------
      * Data areas
      *---------------------------------------------------------------
      * Definition for external data area 'DATFADSN' for assigning the next
      * Adjustment Number.
      *
     Dnextajsn         s              7  0 dtaara(datfajsn)
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /eject
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     update        $upd1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /eject
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      *
     C                   z-add     0             d1wemdy
     C                   z-add     0             d1yr
     C                   z-add     0             d1wk
     C                   move      *blank        d1ajrsn
      *
     C                   z-add     0             d1scdbaam
     C                   z-add     0             d1tcdbaam
     C                   z-add     0             d1acdbaam
     C                   exsr      $clear
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to CRT
      *
     C                   write     tf104k1
     C                   write     tf104ec
     C                   exfmt     tf104r1
      *
      * Clear messages
     C                   exsr      $clmsg
      *
      * Get user's input and set routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      rtncd = '03'
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4=prompt
     C                   exsr      $f4s1
      *
     C                   when      *in09 = *on                                  F9-accept
     C                   exsr      $edit1
     C                   if        error = 0
     C                   exsr      $upd1
     C                   endif
      *
     C                   when      *in12 = *on                                  F12-previous
     C                   eval      rtncd = '12'
     C                   eval      routne = exit
     C                   other
      *
      * User has pressed enter
      *
     C                   eval      routne = edit1
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Edit input fields for screen 1
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * Validate:
      *   1) Week-ending date
      *   2) Record exempt flag
      *   3) Adjustment reason
      *   4) Adjustment amount (edit if Date/Record Exempt Flag are OK)
      *
     C                   exsr      $mdy
     C                   exsr      $rcexfl
     C                   exsr      $ajrsn
      *
      *
     C                   if        *in30 = *off and *in35 = *off
     C                   exsr      $aam
     C                   endif
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *------------------------------------------------------------------------------------
      * Validate Date
      *------------------------------------------------------------------------------------
      *
     C     $mdy          begsr
      *
     C                   z-add     0             d1wemdy
     C                   z-add     0             d1yr
     C                   z-add     0             d1wk
      *
     C                   select
     C                   when      d1mdy = 0
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
      *
     C                   when      d1mdy < 0
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   other
      *
     C     *mdy          test(d)                 d1mdy                  92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      * Flip the date from MMDDYY to CCYYMMDD and go find the 'week-ending date'
      * assocated with this date.
      *
     C     *mdy          move      d1mdy         wkisodate
     C                   move      wkisodate     wkdt
     C                   exsr      $wedt
     C                   endif                                                  If bad date
     C                   endsl
      *
      * If you have a valid Week-Ending Date, make sure a Cash Distribution
      * Balance record exists for this date.
      *
     C                   if        *in30 = *off                                 If OK so far
     C     wkwedt        chain(n)  tfp011                             92
     C                   if        *in92 = *on                                  If not found
     C                   seton                                        30
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08105'
     C                   endif
      *
     C                   endif                                                  If not found
     C                   endif                                                  If OK so far
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Retrieve Week-ending date
      *----------------------------------------------------------------
      *
     C     $wedt         begsr
      *
     C                   call      'TF811'
     C                   parm      wkdt          xxdt
     C                   parm      0             xxsatdt
     C                   parm      0             xxyr
     C                   parm      0             xxpe
     C                   parm      0             xxwk
      *
      * Get returned 'week-ending date' into MMDDYY format.
      *
     C     *iso          test(d)                 xxsatdt                92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09229'
     C                   endif
     C                   else
      *
     C                   z-add     xxsatdt       wkwedt
     C     *iso          move      xxsatdt       wkmdydt
     C                   move      wkmdydt       wkmdy
     C                   z-add     wkmdy         d1wemdy
     C                   z-add     xxyr          d1yr
     C                   z-add     xxwk          d1wk
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Record Exempt Flag
      *---------------------------------------------------------------
      *
     C     $rcexfl       begsr
      *
     C                   select
     C                   when      d1rcexfl <> yes and d1rcexfl <> no
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09106'
     C                   endif
     C                   other
      *
      * Verify that you have a Cash Distribution Balance record for the Week-ending Date
      * and Record Exempt Flag value.
      *
     C                   if        *in30 = *off                                 If date was OK
     C     key01         chain(n)  tfp011                             92
      *
     C                   select
     C                   when      *in92 = *on
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08104'
     C                   endif
     C                   exsr      $clear
      *
     C                   when      cbccdt <> 0
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08108'
     C                   endif
     C                   exsr      $clear
     C                   other
      *
     C                   exsr      $clear
     C                   z-add     cbabalam      d1abalam
     C                   z-add     cbsbalam      d1sbalam
     C                   z-add     cbtbalam      d1tbalam
     C                   endsl
     C                   endif                                                  If date was OK
      *
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Adjustment Reason
      *---------------------------------------------------------------
      *
     C     $ajrsn        begsr
      *
     C                   if        d1ajrsn = *blank
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Adjustment Amounts
      *---------------------------------------------------------------
      *
     C     $aam          begsr
      *
     C     d1sbalam      add       d1scdbaam     d1snewam
     C     d1tbalam      add       d1tcdbaam     d1tnewam
      *
     C     d1scdbaam     add       d1tcdbaam     d1acdbaam
     C     d1snewam      add       d1tnewam      d1anewam
      *
      * You cannot enter an SBF Adjustment Amount if SBF's remaining balance is
      * already zero.
     C                   if        d1sbalam = 0 and
     C                             d1scdbaam <> 0
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08109'
     C                   endif
     C                   endif
      *
      * You cannot enter a TF Adjustment Amount if TF's remaining balance is
      * already zero.
     C                   if        d1tbalam = 0 and
     C                             d1tcdbaam <> 0
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08110'
     C                   endif
     C                   endif
      *
      * New 'remaining' balances cannot be zero.
      *
     C                   if        d1snewam < 0
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08106'
     C                   endif
     C                   endif
      *
     C                   if        d1tnewam < 0
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08107'
     C                   endif
     C                   endif
      *
      *
      * The user has to have entered an Adjustment Amount.
      *
     C                   if        *in32 = *off and                             If no entry
     C                             *in33 = *off and
     C                             d1scdbaam = 0 and
     C                             d1tcdbaam = 0
      *
     C                   if        d1sbalam <> 0
     C                   seton                                        32
     C                   endif
      *
     C                   if        d1tbalam <> 0
     C                   seton                                        33
     C                   endif
      *
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08103'
     C                   endif
     C                   endif                                                  If no entry
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Clear some screen fields
      *---------------------------------------------------------------
      *
     C     $clear        begsr
      *
     C                   z-add     0             d1abalam
     C                   z-add     0             d1sbalam
     C                   z-add     0             d1tbalam
      *
     C                   z-add     0             d1anewam
     C                   z-add     0             d1snewam
     C                   z-add     0             d1tnewam
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * F4 prompt on screen 1
      *---------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      * Record exempt flag
      *
     C                   select
     C                   when      fld = 'D1RCEXFL'
     C                   call      'HP522'
     C                   parm      *blank        xxynfl
     C                   seton                                        55
      *
     C                   if        xxynfl <> *blank
     C                   movel     xxynfl        d1rcexfl
     C                   endif
     C                   other
      *
      * F4 not valid for this field...issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error                                        013
     C                   movel     'HS09011'     mgid(e)
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Write/update/delete record in database file
      *----------------------------------------------------------------
      *
     C     $upd1         begsr
      *
      * Update the Cash Distribution Balance record
      *
     C                   exsr      $upd011
      *
      * Move DSPF fields to database file fields
      *
     C                   z-add     wkajdt        baajdt
     C                   z-add     wkwedt        bawedt
     C                   move      d1rcexfl      barcexfl
     C                   move      d1ajrsn       baajrsn
     C                   z-add     d1scdbaam     bascdbaam
     C                   z-add     d1tcdbaam     batcdbaam
      *
      * Populate date/time stamp
      *
     C                   move      sdusr         bacrusr
     C                   time                    bacrtm
     C     *mdy          move      udate         wkisodate
     C                   move      wkisodate     bacrdt
      *
      * Get the next system-assigned 'Invoice Number' from the Data Area
      *
     C     *lock         in        nextajsn
     C                   add       1             nextajsn
     C                   eval      baajsn = nextajsn
     C                   out       nextajsn
      *
     C                   write     barec
      *
      * Always redisplay the screen:
      *
     C                   select
     C                   when      error > 0
     C                   movel     scrn1         routne
      *
     C                   when      mode = create
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09040'
     C                   eval      routne = set1
     C                   z-add     0             d1mdy
     C                   move      *blank        d1rcexfl
     C                   endsl
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------------------------------
      * Update the Cash Distribution Balance record
      *-------------------------------------------------------------------------------------
      *
     C     $upd011       begsr
      *
     C     key01         chain     tfp011                             92
     C                   if        *in92 = *off                                 If hit
     C                   add       d1scdbaam     cbscdbaam
     C                   add       d1scdbaam     cbsbalam
      *
     C                   add       d1tcdbaam     cbtcdbaam
     C                   add       d1tcdbaam     cbtbalam
      *
     C                   add       d1acdbaam     cbacdbaam
     C                   add       d1acdbaam     cbabalam
      *
      * Populate the Collection Completed Date if all Remaining Balances are zero:
      *
     C                   if        cbabalam = 0 and
     C                             cbsbalam = 0 and
     C                             cbtbalam = 0
     C                   z-add     wkajdt        cbccdt
     C                   endif
      *
     C                   update    cbrec
     C                   endif                                                  If hit
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------------------------------
      * Write error messages
      *-------------------------------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Set on last record indicator and end job
      *----------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        lr
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm Lists
      *
     C     *entry        plist
     C     d1mode        parm                    mode
     C                   parm                    d1mdy
     C                   parm                    d1rcexfl
     C                   parm                    rtncd
      *
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    wkwedt
     C                   kfld                    d1rcexfl
      *
      *
      * Save system date to use as Adjustment Date when writing records.
      *
     C                   move      udate         d1ajmdy
     C     *mdy          move      udate         wkisodate
     C                   move      wkisodate     wkajdt
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /eject
