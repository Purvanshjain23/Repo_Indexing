// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBYAPFR
// ?Date: 14.08.2025 Time: 12:03:33
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification history
//?SDN440 - RMC - 8-05-21 CHANGE COMP VALUE FROM M3ARMSC TO M3LIVE
//?E5262    JBB 8/30/16 - Chargeback and Rebill project
//?         Copied from function PRT CM, OA, & CB ap M3 PF (PBSKPFR).
//?         This function will only print RB records ready to post.
EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('A/R');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

//?USER: Record selection processing

//?Select record for  Post Adj equal to yes.
CASE;

// IF DB1.Adjustment Type Code is Rebill
IF DB1.Adjustment_Type_Code = 'RB';

// AND DB1.Post Adjustments is Yes
AND DB1.Post_Adjustments = 'Y';

// LCL.Invoice Number - CB = DB1.Invoice Number
LCL.Invoice_Number_CB = DB1.Invoice_Number;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

//?Select record for  Post Adj equal to yes.
// IF LCL.Invoice Number - CB EQ DB1.Invoice Number
IF LCL.Invoice_Number_CB = DB1.Invoice_Number;

// AND DB1.Post Adjustments is Yes
AND DB1.Post_Adjustments = 'Y';

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

//?Select record for  Post Adj equal to yes.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
CASE;

// IF CUR.Company Number is greater than zero
IF CUR.Company_Number > *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?SDN440 - RMC - 8-05-21 CHANGE COMP VALUE FROM M3ARMSC TO M3LIVE
// Call program Rtv Alpha Value       XF.
CALL PROGRAM(Rtv Alpha Value       XF) ('POMTXFR');
PARAMETER(CUR.Company_Number);
PARAMETER('M3LIVE');
PARAMETER(LCL.Live_with_M3);

EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
PARAMETER(CUR.Company_Number);
PARAMETER('M3COMPANY');
PARAMETER(CUR.M3_COMPANY_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Rtv Alpha Value       XF.
CALL PROGRAM(Rtv Alpha Value       XF) ('POMTXFR');
PARAMETER(CUR.Company_Number);
PARAMETER('M3DIVISION');
PARAMETER(CUR.M3_Division_USR);

// LCL.M3 COMPANY USR = CUR.M3 COMPANY USR
LCL.M3_COMPANY_USR = CUR.M3_COMPANY_USR;

// LCL.M3 Division USR = CUR.M3 Division USR
LCL.M3_Division_USR = CUR.M3_Division_USR;

ENDIF;

// Print Company Number header format
PRINT Company Number header format;

ENDIF;

// SUPPRESSED PRINT Invoice Number header format

//?USER: On print of detail format

EXECUTE FUNCTION(RTV Cust. by InvSfx/Co RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1928623;
PARAMETER(CUR.Invoice_Number);
PARAMETER(CUR.Invoice_Suffix);
PARAMETER(PAR.AR_Customer_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(CUR.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Exc Rtv DIM/Dsc f/GlIdXF.
CALL PROGRAM(Exc Rtv DIM/Dsc f/GlIdXF) ('PLXZXFR');
PARAMETER(LCL.Return_Code_Usr);
PARAMETER(CUR.G_L_ID_Code_JDE);
PARAMETER(CUR.MCR_M3_Dimension_1);
PARAMETER(CUR.MCR_M3_Dimension_2);
PARAMETER(CUR.MCR_M3_Dimension_3);
PARAMETER(CUR.MCR_M3_Dimension_4);
PARAMETER(CUR.MCR_M3_Dimension_5);
PARAMETER(CUR.MCR_M3_Dimension_6);
PARAMETER(CUR.MCR_M3_Dimension_7);
PARAMETER(CUR.Description);

CASE;

// IF PAR.Live with M3 is No or Parallel
IF PAR.Live_with_M3 = 'N'/'P';

//?comment when really Live Parallel...or ??
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Chg A/R Proc. Code RT) TYPE(RTVOBJ) FILE(ARBECPP)          AC1345743;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Invoice_Number);
PARAMETER(CUR.Invoice_Suffix);
PARAMETER(CUR.Sequence_Number);
PARAMETER('R');
{
 //?USER: Process Data record

 EXECUTE FUNCTION(CHG A/R Proc. Code     CH) TYPE(CHGOBJ) FILE(ARBECPP)          AC1345746;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Sequence_Number);
 PARAMETER(DB1.Deposit_Time);
 PARAMETER(PAR.A_R_Processing_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


ENDIF;

CASE;

// IF CUR.G/L Sub-Ledger Code is equal to zero
IF CUR.G_L_Sub_Ledger_Code = *ZERO;

// CUR.MCR M3 Dimension 7 = CON.*BLANK
CUR.MCR_M3_Dimension_7 = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.MCR M3 Dimension 7 = CVTVAR(CUR.G/L Sub-Ledger Code)
CUR.MCR_M3_Dimension_7 = CVTVAR(CUR.G_L_Sub_Ledger_Code);

ENDIF;

//?USER: Process after print of detail format

NXT.Transaction_Qty_SUM = SUM(CUR.Transaction_Amount);

//?USER: Print required level totals

// SUPPRESSED PRINT Invoice Number totals format

CASE;

IF NEW Company_Number;
// CUR.M3 COMPANY USR = LCL.M3 COMPANY USR
CUR.M3_COMPANY_USR = LCL.M3_COMPANY_USR;

// CUR.M3 Division USR = LCL.M3 Division USR
CUR.M3_Division_USR = LCL.M3_Division_USR;

// Print Company Number totals format
PRINT Company Number totals format;

NXT.Transaction_Qty_SUM = SUM(CUR.Transaction_Qty_SUM);

ENDIF;

