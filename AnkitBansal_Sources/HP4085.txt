      *****************  RPG PROGRAM HEADING  ************************
      * SYSTEM:      Hog Production System
      * PROGRAM:     HP4085
      * TITLE:       Specify for Group Sire Line/Sow Source Inquiry
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     09/29/99
      *
      * FUNCTION: This program is called from a menu. It allows the user
      *           to specify the values for drilling into groups for ultimately viewing
      *           a group's sire lines and sow sources.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 07/02/09  LeAnne Ramsey
      *           Recompile only. Added new field 'Continuous Flow Flag' to Hog Group file.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     fhpd4085   cf   e             workstn
     f                                     infds(iofeed)
      *
      *
     Fhsp034    if   e           k disk
      *    Hog group
      *
      *
     Fhsl034d   if   e           k disk    rename(hgrec:hgrecd)
      *    Hog group
      *
      *
     fhsl064d   if   e           k disk
      *    Check detail
      *
      *
     fhsl064e   if   e           k disk    rename(cdrec:cdrece)
      *    Check detail
      *
      *
     fhsp084    if   e           k disk
      *    Sales movement header
      *
      *
     fhsp085    if   e           k disk
      *    Sales movement detail
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D rtncd           s              2
     D maxmsg          s              2  0  inz(20)
      *
      *
      * Control fields
      *
     D termfl          s              1
     D svhgsn          s                   like(hghgsn)
     D count           s              2  0
      *
      *
      * Workfields
      *
     D wkfncd          s                   like(sdpgm)
     D wkhgsn          s                   like(hghgsn)
      *
      *
      * Workfields for date manipulation
      *
     D wkcymdiso       s               D   datfmt(*iso)
      *
      *
      * Parm fields
      *
     D xxfsbo          s              5
     D xxfscd          s              5  0
     D xxppcd          s              5
     D xxcvno          s              8  0
     D xxstcd          s              5
     D xxalphmvsn      s              7
     D xxalphtano      s              5
      *
     D xxkldt          s              8  0
     D xxtano          s                   like(d1tano)
     D xxmvsn          s                   like(d1mvsn)
     D xxhgcd          s                   like(d1hgcd)
     D xxkmdy          s                   like(d1kmdy)
      *
     D infncd          s             10
     D inbobo          s              5
     D indvfl          s              1
     D inbofl          s              1
     D oubobo          s              5
     D oubods          s             30
     D oudvcd          s              5
     D secfl           s              1
     D oubofl          s              1
     D ourmfl          s              1
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * If the user failed the initial security checks, set on 99 to protect
      * fields and invalidate function keys.
      *
     C                   if        termfl = yes
     C                   seton                                        99
     C                   endif
      *
      * Write the error messages from the error arrays to the error
      * message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to CRT.
      *
     C                   write     hp4085k1
     C                   write     hp4085ec
     C                   exfmt     hp4085r1
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on or termfl = yes                  F3-exit
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                       API
     C                   eval      routne = scrn1
     C                   other
      *
      * User has pressed enter
      *
     C                   eval      routne = edit1
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Screen 1 input fields
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * First, check that the user has entered at least 1 piece of info.
      *
     C                   select
     C                   when      d1tano = 0 and
     C                             d1kmdy = 0 and
     C                             d1mvsn = 0 and
     C                             d1hgcd = *blank
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS01177'     mgid(e)
     C                   endif
      *
      * Now, check that they haven't entered more than 1 set of criteria.
      *
     C                   when      (d1tano <> 0 and
     C                             (d1mvsn <> 0 or d1hgcd <> *blank)) or
      *
     C                             (d1kmdy <> 0 and
     C                             (d1mvsn <> 0 or d1hgcd <> *blank)) or
      *
     C                             (d1mvsn <> 0 and
     C                             (d1tano <> 0 or d1kmdy <> 0 or
     C                              d1hgcd <> *blank)) or
      *
     C                             (d1hgcd <> *blank and
     C                             (d1tano <> 0 or d1kmdy <> 0 or d1mvsn <> 0))
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS01177'     mgid(e)
     C                   endif
     C                   other
      *
      * Now, perform individual field edits:
      *  1) tattoo number
      *  2) kill date
      *  3) sales movement
      *  4) hog group
      *
     C                   exsr      $tano
     C                   exsr      $kmdy
     C                   exsr      $mvsn
     C                   exsr      $hgcd
     C                   endsl
      *
      *
      * If there are no errors, call the next program
      *
     C                   if        error = 0                                    If no error
      *
      * User entered hog group, so go directly to the sire line/sow source screen
      *
     C                   select
     C                   when      d1hgcd <> *blank
     C                   move      d1hgcd        xxhgcd
     C                   exsr      $1group
      *
      * User entered sales movement, so determine the program to call based on
      * whether there is A) 1 or B) more than 1 group on the movement.
      *
     C                   when      d1mvsn <> 0
     C                   exsr      $movement
      *
      * User entered tattoo/kill date, so determine the program to call based on
      * whether there is a) 1 or b) more than 1 group for the tattoo/kill date
      *
     C                   when      d1tano <> 0
     C                   exsr      $tattoo
     C                   endsl
      *
      * Clear the selection fields
      *
     C                   z-add     0             d1tano
     C                   z-add     0             d1kmdy
     C                   z-add     0             d1mvsn
     C                   move      *blank        d1hgcd
     C                   endif                                                  If no error
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Validate tattoo number
      *----------------------------------------------------------------
      *
      * Validations:
      *  1) cannot be zero if a kill date is entered
      *  2) cannot be negative
      *  3) must exist in the check detail file
      *
     C     $tano         begsr
      *
     C                   select
     C                   when      d1tano = 0
     C                   if        d1kmdy <> 0
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS01181'
     C                   endif
     C                   endif
      *
     C                   when      d1tano < 0
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   endif
     C                   other
      *
     C     d1tano        chain     hsl064d                            92
     C                   if        *in92 = *on                                  If no hit
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS01178'     mgid(e)
     C                   clear                   mgw
     C                   move      d1tano        xxalphtano
     C                   movea     xxalphtano    mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If no hit
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Validate kill date
      *----------------------------------------------------------------
      *
      * Validations:
      *  1) required if tattoo is entered
      *  2) cannot be negative
      *  3) must be a valid date
      *  4) must have at least 1 check detail record for this date
      *  5) must have at least 1 check detail for tattoo/date combination
      *
     C     $kmdy         begsr
      *
     C                   eval      xxkldt  = 0
      *
     C                   select
     C                   when      d1kmdy = 0
     C                   if        d1tano <> 0
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS01180'
     C                   endif
     C                   endif
      *
     C                   when      d1kmdy < 0                                   Wh negative cutoff
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
      *
     C                   when      d1kmdy > 0                                   Wh date entered
     C     *mdy          test(d)                 d1kmdy                 92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      * Flip date from mmddyy to ccyymmdd using the 'date format' field
      * to add the century value
      *
     C     *mdy          move      d1kmdy        wkcymdiso
     C                   move      wkcymdiso     xxkldt
      *
      * See if we have any Check Detail records for this kill date.
      *
     C     xxkldt        chain     hsl064e                            92
     C                   if        *in92 = *on                                  If no hit
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS01179'     mgid(e)
     C                   endif
     C                   endif                                                  If no hit
      *
     C                   endif                                                  If bad date
     C                   endsl
      *
      * If the tattoo and the date are both entered/valid, check if there is
      * any check detail data for this tattoo/date.
      *
     C                   if        d1tano <> 0 and d1kmdy <> 0
     C                             and *in32 = *off and *in33 = *off
     C     key01         chain     hsl064d                            92
     C                   if        *in92 = *on                                  If no hit
     C                   seton                                        3233
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS01182'     mgid(e)
     C                   endif
     C                   endif                                                  If no hit
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Validate movement number
      *----------------------------------------------------------------
      *
      * Validations:
      *  1) cannot be negative
      *  2) must be a valid sales movement
      *  3) cannot be a sale out of a BGF group
      *
      *
     C     $mvsn         begsr
      *
     C                   select
     C                   when      d1mvsn = 0
      *
     C                   when      d1mvsn < 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   endif
     C                   other
      *
     C     d1mvsn        chain     hsp084                             92
     C                   if        *in92 = *on                                  If bad move
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00660'     mgid(e)
     C                   clear                   mgw
     C                   move      d1mvsn        xxalphmvsn
     C                   movea     xxalphmvsn    mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If bad move
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Validate hog group
      *---------------------------------------------------------------
      *
      * Validations:
      *  1) must be a valid group
      *  2) cannot be a BGF group
      *  3) cannot have a voided or created status
      *
     C     $hgcd         begsr
      *
     C                   z-add     0             wkhgsn
      *
     C                   select
     C                   when      d1hgcd = *blank
     C                   other
      *
     C     d1hgcd        chain     hsp034                             92
     C                   if        *in92 = *on                                  If not found
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00261'     mgid(e)
     C                   clear                   mgw
     C                   movea     d1hgcd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   else
      *
     C                   z-add     hghgsn        wkhgsn
      *
     C                   if        hgppcd = 'BGF  '                             If BGF
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09093'     mgid(e)
     C                   endif
     C                   endif                                                  If BGF
      *
     C                   if        hggscd = 'VD'                                If voided
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09096'     mgid(e)
     C                   endif
     C                   endif                                                  If voided
      *
     C                   if        hggscd = 'CR'                                If created
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS01183'     mgid(e)
     C                   endif
     C                   endif                                                  If created
      *
     C                   endif                                                  If not found
     C                   endsl
      *
     C                   endsr
      /EJECT
      *-------------------------------------------------------------------------
      * Determine which program to call when user has entered tattoo/kill date
      *-------------------------------------------------------------------------
      *
      * If there is only 1 group for the user's specified tattoo/kill date,
      * we ultimately want to go directly to the sire line/sow source screen.
      *
      * If there is more than 1 group, we will call a progarm to bring up all the
      * groups for the tattoo/kill date and let the user elect which ones to view.
      *
     C     $tattoo       begsr
      *
     C                   z-add     0             count
     C                   z-add     0             svhgsn
      *
      * Determine if there is only 1 group for this tattoo/kill date in the
      * check detail file.
      *
     C     key01         setll     hsl064d
      *
     C                   dou       *in91 = *on or count > 1
     C     key01         reade     hsl064d                                91
     C                   if        *in91 = *off and cdhgsn <> svhgsn
     C                   add       1             count
     C                   z-add     cdhgsn        svhgsn
     C                   endif
     C                   enddo
      *
      * Retrieve Hog Group code to use on program call
      *
     C                   if        count = 1
     C                   exsr      $hgsn
     C                   endif
      *
      * Call a program
      *
     C                   select
     C                   when      count = 1
     C                   exsr      $1group
     C                   other
      *
     C                   call      'HP7051'
     C                   parm                    xxkldt
     C                   parm      d1tano        xxtano
     C                   parm      d1kmdy        xxkmdy
     C                   endsl
      *
     C                   endsr
      /EJECT
      *-------------------------------------------------------------------------
      * Determine which program to call when user has entered a sales movement
      *-------------------------------------------------------------------------
      *
      * If there is only 1 group on the user's specified sales movement,
      * we ultimately want to go directly to the sire line/sow source screen.
      *
      * If there is more than 1 group, we will call a progarm to bring up all the
      * groups for the sales movement and let the user elect which ones to view.
      *
     C     $movement     begsr
      *
     C                   z-add     0             count
     C                   z-add     0             svhgsn
      *
      * Determine if there is only 1 group on this sales movement
      *
     C     d1mvsn        setll     hsp085
      *
     C                   dou       *in91 = *on or count > 1
     C     d1mvsn        reade     hsp085                                 91
     C                   if        *in91 = *off and sghgsn <> svhgsn
     C                   add       1             count
     C                   z-add     sghgsn        svhgsn
     C                   endif
     C                   enddo
      *
      * Retrieve Hog Group code to use on program call
      *
     C                   if        count = 1
     C                   exsr      $hgsn
     C                   endif
      *
      * Call a program
      *
     C                   select
     C                   when      count = 1
     C                   exsr      $1group
     C                   other
      *
     C                   call      'HP7053'
     C                   parm      d1mvsn        xxmvsn
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------------------------
      * Retrieve Hog Group code associated with system-assigned hog group number
      *----------------------------------------------------------------------------------
      *
     C     $hgsn         begsr
      *
     C     svhgsn        chain     hsl034d                            92
     C                   if        *in92 = *off
     C                   move      hghgcd        xxhgcd
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------------------------
      * Call the program to display the sire line/sow source data when you have 1 group
      *----------------------------------------------------------------------------------
      *
     C     $1group       begsr
      *
     C                   call      'HP7085'
     C                   parm                    xxhgcd
     C                   parm      *blank        rtncd
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Call security program
      *---------------------------------------------------------------
      *
     C     $sec          begsr
      *
      * Setup the fields to send into the security program
      *
     C                   movel     wkfncd        infncd                         Pgm name
     C                   move      *blank        inbobo                         Screen b.o.
      *
     C                   move      *blank        oubobo                         BO code
     C                   move      *blank        oubods                         BO desc
     C                   move      *blank        oudvcd                         Function div
     C                   movel     no            termfl                         Terminal flag
     C                   movel     no            indvfl
     C                   movel     no            inbofl
      *
     C                   call      'HPSEC  '
      *  Input
     C                   parm                    mgid                           MSGID Array
     C                   parm                    mgdt                           MSGDTA data
     C                   parm                    error                          # Of errors
     C                   parm                    infncd                         Func code
     C                   parm                    inbobo                         BO code
     C                   parm                    indvfl                         Check div?
     C                   parm                    inbofl                         Check B.O.?
      * Output
     C                   parm                    oubobo                         BO code
     C                   parm                    oubods                         BO desc.
     C                   parm                    oudvcd                         Div code
     C                   parm                    secfl                          Sec flag
     C                   parm                    oubofl                         BO errflg
     C                   parm                    ourmfl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * F4 prompt on screen 1
      *----------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      * Sales movement
      *  (default the 'sales type' parm to 'market sale'....which is probably
      *   where almost everyone will want to be.)
      *
     C                   select
     C                   when      fld = 'D1MVSN'
     C                   call      'HP567'
     C                   parm      0             xxmvsn
     C                   parm      0             xxcvno
     C                   parm      'MRKTS'       xxstcd
     C                   if        xxmvsn <> 0
     C                   z-add     xxmvsn        d1mvsn
     C                   endif
      *
      * Tattoo
     C                   when      fld = 'D1TANO'
     C                   call      'HP5022'
     C                   parm      0             xxtano
     C                   parm      0             xxkmdy
     C                   seton                                        52
     C                   if        xxtano <> 0
     C                   z-add     xxtano        d1tano
     C                   z-add     xxkmdy        d1kmdy
     C                   endif
      *
      * Kill date
     C                   when      fld = 'D1KMDY'
     C                   call      'HP5022'
     C                   parm      0             xxtano
     C                   parm      0             xxkmdy
     C                   seton                                        53
     C                   if        xxtano <> 0
     C                   z-add     xxtano        d1tano
     C                   z-add     xxkmdy        d1kmdy
     C                   endif
      * Hog group
     C                   when      fld = 'D1HGCD'
     C                   call      'HP5002'
     C                   parm      *blank        xxfsbo
     C                   parm      0             xxfscd
     C                   parm      *blank        xxppcd
     C                   parm      *blank        xxhgcd
     C                   seton                                        54
     C                   if        xxhgcd <> *blank
     C                   move      xxhgcd        d1hgcd
     C                   endif
     C                   other
      *
      * F4 not valid for this field, so issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09011'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Seton last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        lr
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *   none
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    d1tano
     C                   kfld                    xxkldt
      *
      * Execute the security subroutine to determine the user authorizations
      * If there are errors on the initial call, set the term flag to yes.
      *
     C                   eval      wkfncd = sdpgm
     C                   exsr      $sec
      *
     C                   if        secfl = yes
     C                   movel     yes           termfl
     C                   endif
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
