// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PWMTPVR
// ?Date: 14.08.2025 Time: 02:56:57
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification history
DO;

//? 8/30/2021 JBB HD83251 - Do not backup files when user is *PGMR.
//?                         Also do not allow a Repayment Date that is
//?                         greater than or equal to current job date.
//? 5/04/2021 JBB F17058 - Tattoo Repayments by Business User
//?                        Function created.
ENDDO;

// Call program Rtv User Class        UP.
CALL PROGRAM(Rtv User Class        UP) ('PKU3UPR');
PARAMETER(LCL.User_Class_f_usrprf_USR);

//?Check if backup already run for current date
CASE;

// IF LCL.User Class f/usrprf   USR is *PGMR
IF LCL.User_Class_f_usrprf_USR = *PGMR;

// LCL.Display Warning on Screen = CND.No
LCL.Display_Warning_on_Screen = 'N';

// LCL.Date Alpha USR = CVTVAR(JOB.*Job date)
LCL.Date_Alpha_USR = CVTVAR(JOB.*Job_date);

// LCL.System Value Alpha    USR = CONCAT(CON.C,LCL.Date Alpha USR,CND.*None)
LCL.System_Value_Alpha_USR = 'C' + LCL.Date_Alpha_USR (*ZERO);

// Call program Upd Repayment Backup  XF.
CALL PROGRAM(Upd Repayment Backup  XF) ('PUKMXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPEREPAYBU');
PARAMETER(LCL.System_Value_Alpha_USR);

//?Check if backup already run for current date
// IF *OTHERWISE
IF *OTHERWISE;

//?Process file backups if not already done
DO;

//?Retrieve current Company Value for backup status and date
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPEREPAYBU');
PARAMETER(LCL.System_Value_Alpha_USR);

//?Breakout Repayment Backup values
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?1. Backup Status (position 1)
// LCL.File Backup Status USR = SUBSTRING(LCL.System Value Alpha    USR,CON.1,CON.1)
LCL.File_Backup_Status_USR = SUBSTRING(LCL.System_Value_Alpha_USR:1:1);

//?2. Date of Backup (positions 2-8)
// LCL.Date Alpha USR = SUBSTRING(LCL.System Value Alpha    USR,CON.2,CON.7)
LCL.Date_Alpha_USR = SUBSTRING(LCL.System_Value_Alpha_USR:2:7);

// LCL.Last Run Date = CVTVAR(LCL.Date Alpha USR)
LCL.Last_Run_Date = CVTVAR(LCL.Date_Alpha_USR);

// LCL.Date From Convert USR = CVTVAR(LCL.Last Run Date)
LCL.Date_From_Convert_USR = CVTVAR(LCL.Last_Run_Date);

//?3. Last file backed up (positions 9 - 18)
// LCL.File = SUBSTRING(LCL.System Value Alpha    USR,CON.9,CON.10)
LCL.File = SUBSTRING(LCL.System_Value_Alpha_USR:9:10);

ENDIF;

//?Retrieve From and To library names for backup files and Co# Abbrev
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPEREPAYLB');
PARAMETER(LCL.Libraries_From_To);

//?If From and To libraries found, break them out; build prefix
CASE;

// IF LCL.Libraries: From/To is Entered
IF LCL.Libraries_From_To <> *BLANK;

// LCL.Library From USR = SUBSTRING(LCL.Libraries: From/To,CON.1,CON.10)
LCL.Library_From_USR = SUBSTRING(LCL.Libraries_From_To:1:10);

// LCL.Library To USR = SUBSTRING(LCL.Libraries: From/To,CON.11,CON.10)
LCL.Library_To_USR = SUBSTRING(LCL.Libraries_From_To:11:10);

//?Build backup file prefix
DO;

//?The files will be named as follows: LLMMDDFFFF    ex: GU0505PKAW
//?LL   = Location abreviation:  GU, ST, TF, or T2
//?MM   = Month
//?DD   = Day
//?FFFF = first four characters of the file name
//?Breakout date and make it MMDD alpha
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Month USR = JOB.*Job date *MONTH
LCL.Month_USR = DATEDTLS(JOB.*Job_date 'MO' 1111111 'NONE' 'N' 1);

// LCL.Day of Month USR = JOB.*Job date *DAY OF MONTH
LCL.Day_of_Month_USR = DATEDTLS(JOB.*Job_date 'DM' 1111111 'NONE' 'N' 1);

// Month and Day combined
LCL.Month_and_Day_4_0 = ( LCL.Month_USR * 100 ) + LCL.Day_of_Month_USR;

// LCL.@Text 4 = CVTVAR(LCL.Month and Day 4.0)
LCL.@Text_4 = CVTVAR(LCL.Month_and_Day_4_0);

ENDIF;

//?Build file prefix: Company abbreviation + MMDD
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Build file suffix for specific companies
CASE;

// IF PAR.CC Company Number is SBD Farms of Guymon, Ok
IF PAR.CC_Company_Number = 360;

// LCL.Backup File Prefix = CONCAT(CON.GU,LCL.@Text 4,CND.*None)
LCL.Backup_File_Prefix = 'GU' + LCL.@Text_4 (*ZERO);

//?Build file suffix for specific companies
// IF PAR.CC Company Number is Sioux City
IF PAR.CC_Company_Number = 440;

// LCL.Backup File Prefix = CONCAT(CON.ST,LCL.@Text 4,CND.*None)
LCL.Backup_File_Prefix = 'ST' + LCL.@Text_4 (*ZERO);

//?Build file suffix for specific companies
// IF PAR.CC Company Number is Triumph Foods Market
IF PAR.CC_Company_Number = 960;

// OR PAR.CC Company Number is Triumph Foods-2
OR PAR.CC_Company_Number = 961;

// LCL.Backup File Prefix = CONCAT(CON.TF,LCL.@Text 4,CND.*None)
LCL.Backup_File_Prefix = 'TF' + LCL.@Text_4 (*ZERO);

ENDIF;

ENDIF;

ENDDO;

//?If From and To libraries found, break them out; build prefix
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'From and To library names are blank.  Contact I/T.'
ERROR(PRK1573);

ENDIF;

//?Check if backup already run for current date
CASE;

// IF LCL.Last Run Date EQ JOB.*Job date
IF LCL.Last_Run_Date = JOB.*Job_date;

// AND LCL.File Backup Status USR is Backup completed
AND LCL.File_Backup_Status_USR = 'C';

//?If backup already run today, do not display text regarding file
//?backups.
// LCL.Display Warning on Screen = CND.No
LCL.Display_Warning_on_Screen = 'N';

//?Check if backup already run for current date
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Display Warning on Screen = CND.Yes
LCL.Display_Warning_on_Screen = 'Y';

ENDIF;

ENDDO;

ENDIF;

// Call program Rtv Next Repay ID     XF.
CALL PROGRAM(Rtv Next Repay ID     XF) ('PWMVXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(LCL.TRH_Repayment_ID);

//?USER: Load screen

// DTL.CC Company Number = PAR.CC Company Number
DTL.CC_Company_Number = PAR.CC_Company_Number;

// DTL.TRH Repayment ID = LCL.TRH Repayment ID
DTL.TRH_Repayment_ID = LCL.TRH_Repayment_ID;

//?USER: Validate fields

//?Date for Repayment must be less than the current date
CASE;

// IF DTL.TRH Payment Date GE JOB.*Job date
IF DTL.TRH_Payment_Date >= JOB.*Job_date;

// Send error message - 'Repayment Date must be less than the current date.'
ERROR(PRK1616);

ENDIF;

//?USER: User defined action

//?Run file backup for Kill Date +/- 5 Days
CASE;

// IF LCL.Display Warning on Screen is Yes
IF LCL.Display_Warning_on_Screen = 'Y';

// LCL.Back Up Date From = DTL.TRH Payment Date + CON.-5 *DAYS
LCL.Back_Up_Date_From = DATEINCR(DTL.TRH_Payment_Date '-5' 'DY' 1111111 'NONE' 'N' 1);

// LCL.Back Up Date To = DTL.TRH Payment Date + CON.5 *DAYS
LCL.Back_Up_Date_To = DATEINCR(DTL.TRH_Payment_Date 5 'DY' 1111111 'NONE' 'N' 1);

// LCL.Error flag = CND.No error
LCL.Error_flag = *BLANK;

// Call program Exc Repay File Backup CL.
SBMJOB;
CALL PROGRAM(Exc Repay File Backup CL) ('PWMWUPC');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(LCL.Library_From_USR);
PARAMETER(LCL.Library_To_USR);
PARAMETER(LCL.Backup_File_Prefix);
PARAMETER(JOB.*Job_date);
PARAMETER(LCL.Back_Up_Date_From);
PARAMETER(LCL.Back_Up_Date_To);
SBMJOBOVR JOB(REPAYBKUP);
SBMJOBOVR LOG(4;
SBMJOBOVR 00;
SBMJOBOVR *SECLVL);
SBMJOBEND;

ENDIF;

//?Create Tattoo Repayment Header record and a comment
// LCL.TRC Comment = CON.Repayment Header Created.
LCL.TRC_Comment = 'Repayment Header Created.';

EXECUTE FUNCTION(Crt Tattoo Repay Hdr  CR) TYPE(CRTOBJ) FILE(PWAWCPP)           AB1364804;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.TRH_Repayment_ID);
PARAMETER('C');
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(DTL.TRH_Payment_Date);
PARAMETER(1);
PARAMETER(LCL.Backup_File_Prefix);
PARAMETER(LCL.TRC_Comment);
PARAMETER('S');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

 //?USER: Processing after Data update

 //?Create a System Generated message
 EXECUTE FUNCTION(Rtv Next Comment Seq# RT) TYPE(RTVOBJ) FILE(PWAYCPP)           AB1366735;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.TRH_Repayment_ID);
 PARAMETER(LCL.TRC_Sequence);
 {
  //?USER: Processing if Data record not found

  // PAR.TRC Sequence = CON.1
  PAR.TRC_Sequence = 1;

  //?USER: Process Data record

  // PAR.TRC Sequence = DB1.TRC Sequence + CON.1
  PAR.TRC_Sequence = DB1.TRC_Sequence + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Tattoo Repay Cmnt CR) TYPE(CRTOBJ) FILE(PWAYCPP)           AB1364775;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.TRH_Repayment_ID);
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.TRC_Comment);
 PARAMETER(PAR.TRC_Comment_Type);
 {
  //?USER: Processing before Data update

  //?Make sure BOH Company Number is populated
  CASE;

  // IF PAR.BOH Company Number is *ZERO
  IF PAR.BOH_Company_Number = *ZERO;

  // DB1.BOH Company Number = PAR.CC Company Number
  DB1.BOH_Company_Number = PAR.CC_Company_Number;

  ENDIF;

  EXECUTE FUNCTION(Rtv Next Comment Seq# RT) TYPE(RTVOBJ) FILE(PWAYCPP)           AB1366735;
  PARAMETER(PAR.CC_Company_Number);
  PARAMETER(PAR.TRH_Repayment_ID);
  PARAMETER(DB1.TRC_Sequence);
  {
   //?USER: Processing if Data record not found

   // PAR.TRC Sequence = CON.1
   PAR.TRC_Sequence = 1;

   //?USER: Process Data record

   // PAR.TRC Sequence = DB1.TRC Sequence + CON.1
   PAR.TRC_Sequence = DB1.TRC_Sequence + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


