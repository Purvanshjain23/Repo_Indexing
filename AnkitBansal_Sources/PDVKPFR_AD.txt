// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDVKPFR
// ?Date: 14.08.2025 Time: 12:04:39
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('A/R');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


EXECUTE FUNCTION(VAL Set Int.Acc No Hdg IF) TYPE(EXCINTFUN)                     AC1460523;
PARAMETER('A/R');
PARAMETER(LCL.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
PARAMETER(WRK.Name);
PARAMETER(WRK.System_Value_Alpha);
PARAMETER(WRK.Access_Denied_Y_N);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Appl No Exit  IF) TYPE(EXCINTFUN)                     AC1460535;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(WRK.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 PARAMETER(WRK.Access_Denied_Y_N);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // PAR.Access Denied (Y/N) = CND.yes
  PAR.Access_Denied_Y_N = 'Y';

  //?User Profile Record Not found
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Access Denied (Y/N) = CND.no
  PAR.Access_Denied_Y_N = 'N';

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // PAR.Access Denied (Y/N) = CND.no
  PAR.Access_Denied_Y_N = 'N';

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Access Denied (Y/N) = CND.yes
  PAR.Access_Denied_Y_N = 'Y';

  ENDIF;

  CASE;

  // IF LCL.Company Number is greater than zero
  IF LCL.Company_Number > *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  EXECUTE FUNCTION(RTV Prod Whse for Co  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1757887;
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Shipping_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   CASE;

   // IF DB1.Record Status is Active
   IF DB1.Record_Status = 'A';

   CASE;

   // IF DB1.Production Warehouse Code is Warehouse Code not Blank
   IF DB1.Production_Warehouse_Code <> *BLANK;

   // PAR.Warehouse Code = DB1.Production Warehouse Code
   PAR.Warehouse_Code = DB1.Production_Warehouse_Code;

   QUIT;

   ENDIF;

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 // PAR.Company Number = WRK.Company Number
 PAR.Company_Number = WRK.Company_Number;

 // PAR.Access Denied (Y/N) = WRK.Access Denied (Y/N)
 PAR.Access_Denied_Y_N = WRK.Access_Denied_Y_N;

 //?If access denied is no, rtv co. name
 CASE;

 // IF WRK.Access Denied (Y/N) is no
 IF WRK.Access_Denied_Y_N = 'N';

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(WRK.Company_Number);
 PARAMETER(PAR.Name);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

}


// PAR.USR Cash Appl Amount = CND.Zero
PAR.USR_Cash_Appl_Amount = *ZERO;

// PAR.USR Adjustments Total = CND.equal to zero
PAR.USR_Adjustments_Total = *ZERO;

EXECUTE FUNCTION(Dlt Adjustment Totals DL) TYPE(DLTOBJ) ARRAY(ARR_Adjustment_TotAC1733483;
PARAMETER(*BLANK);
PARAMETER(0);

EXECUTE FUNCTION(Dlt Adjustment Tot ALLDL) TYPE(DLTOBJ) ARRAY(ARR_Adjust_Typ_AmtAC1733484;
PARAMETER(*BLANK);
PARAMETER(0);

//?***** Change Log and Comments
//?RMC R11913  10/18/17 Added PAY total and OA Totals to company & final
//?02/23/2010 LJB E000512  New parm added to ARACTRET & ARACTEDT.
//?RMC OMS036 4/15/05 Deposit Time is part of the key, allow print
//?           posted deposits. so dont update if it has beeen posted
//?RMC OMS036 4/15/05 Added array processing to print adj totals
//?** LJB ARS011 02/01/2006 - Add co# to the arrays. Pass co# into
//?** the array retrieval functions and add to the proper cell.
//?** Print the co# adjustments after the co# level breaks.
//?RMC TFS010 2/27/06 If multi-co is NO, print user's company trans only
//?RMC TFS010 3/02/06 Page break on final totals
//?----------------------------------
//?USER: Record selection processing

//?RST on multi-company      RMC  2/27/06
CASE;

// IF PAR.Allow Multi-Company is no
IF PAR.Allow_Multi_Company = 'N';

// AND LCL.Company Number NE DB1.Company Number
AND LCL.Company_Number <> DB1.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?RST on multi-company      RMC  2/27/06
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Bank Code EQ DB1.Bank Code
IF PAR.Bank_Code = DB1.Bank_Code;

// AND PAR.Deposit Date EQ DB1.Deposit Date
AND PAR.Deposit_Date = DB1.Deposit_Date;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Process top of page

EXECUTE FUNCTION(RTV Bank Description   RT) TYPE(RTVOBJ) FILE(CAEBREP)          AC1333216;
PARAMETER(PAR.Bank_Code);
PARAMETER(TOP_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// TOP.Bank Code = PAR.Bank Code
TOP_Bank_Code = PAR.Bank_Code;

// TOP.Deposit Date = PAR.Deposit Date
TOP_Deposit_Date = PAR.Deposit_Date;

// TOP.Deposit Time = PAR.Deposit Time
TOP_Deposit_Time = PAR.Deposit_Time;

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Print Accounting Company Number header format
PRINT Accounting Company Number header format;

ENDIF;

// SUPPRESSED PRINT Bank Code header format

// SUPPRESSED PRINT Deposit Date header format

CASE;

IF NEW AR_Customer_Number;
EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(DB1.AR_Customer_Number);
PARAMETER(CUR.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Print A/R Customer Number header format
PRINT A/R Customer Number header format;

ENDIF;

// SUPPRESSED PRINT A/R Check Number header format

//?USER: On print of detail format

// NXT.USR Transaction amount = NXT.USR Transaction amount + CUR.Transaction Amount
NXT.USR_Transaction_amount = NXT.USR_Transaction_amount + CUR.Transaction_Amount;

//?Explanation Field
CASE;

// IF DB1.Explanation is Blank
IF DB1.Explanation = *BLANK;

// CUR.USR Description = DB1.Reference Field
CUR.USR_Description = DB1.Reference_Field;

//?Explanation Field
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Description = DB1.Explanation
CUR.USR_Description = DB1.Explanation;

ENDIF;

// Call program VAL Acct ID JDE-8 dgt  UP.
CALL PROGRAM(VAL Acct ID JDE-8 dgt  UP) ('ARACTRET');
PARAMETER(DB1.G_L_ID_Code_JDE);
PARAMETER(CUR.Cost_Center);
PARAMETER(CUR.Object_Account);
PARAMETER(CUR.Subsidiary);
PARAMETER(CUR.USR_G_L_Account_Desc);
PARAMETER(CUR.G_L_Posting_Company);
PARAMETER(WRK.JDE_Posting_Edit_Code_USR);
PARAMETER(WRK.Error_Return_text);

EXECUTE FUNCTION(RTV Adj Limits         RT) TYPE(RTVOBJ) FILE(PDJ3CPP)          AC1334715;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Adjustment_Type_Code);
PARAMETER(PAR.Adjustment_Description);
PARAMETER(PAR.Effect_on_Account);
PARAMETER(WRK.G_L_ID_Code_JDE);
PARAMETER(PAR.Adjustment_Limit_Amount);
PARAMETER(PAR.Cash_Adj);
PARAMETER(PAR.User_Enter_G_L_Status);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Cash Amounts
CASE;

// IF PAR.Cash/Adj is Cash Adjustment
IF PAR.Cash_Adj = 'CSH';

// AND DB1.Invoice Number is Not equal to zero
AND DB1.Invoice_Number <> *ZERO;

// NXT.USR Cust Cash = CUR.Transaction Amount + NXT.USR Cust Cash
NXT.USR_Cust_Cash = CUR.Transaction_Amount + NXT.USR_Cust_Cash;

ENDIF;

//?Adjustment Amount
CASE;

// IF PAR.Cash/Adj is Adjustment Amount
IF PAR.Cash_Adj = 'ADJ';

// AND DB1.Invoice Number is Not equal to zero
AND DB1.Invoice_Number <> *ZERO;

// NXT.USR Cust Adju = CUR.Transaction Amount + NXT.USR Cust Adju
NXT.USR_Cust_Adju = CUR.Transaction_Amount + NXT.USR_Cust_Adju;

ENDIF;

//?Non-A/R Cash
CASE;

// IF DB1.Invoice Suffix is Non-A/R Cash
IF DB1.Invoice_Suffix = 'NA';

// CUR.Invoice Number = CND.Equal to zero
CUR.Invoice_Number = *ZERO;

ENDIF;

//?OMS036 RMC 4/15/05 Accum/Count by Adj Type
CASE;

// IF PAR.Cash/Adj is Adjustment Amount
IF PAR.Cash_Adj = 'ADJ';

CASE;

// IF CUR.Adjustment Type Code is Not Accounts Receivable
IF CUR.Adjustment_Type_Code <> 'ARC';

//?Adj Type
CASE;

// IF CUR.Adjustment Type Code is Accrual Chargeback
IF CUR.Adjustment_Type_Code = 'ACB';

// WRK.Adjustment Type Code = CND.Chargeback
WRK.Adjustment_Type_Code = 'CB';

//?Adj Type
// IF CUR.Adjustment Type Code is Write Off Under $50
IF CUR.Adjustment_Type_Code = ' WO';

// WRK.Adjustment Type Code = CND.Write Off Under $100
WRK.Adjustment_Type_Code = 'WO';

//?Adj Type
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Adjustment Type Code = CUR.Adjustment Type Code
WRK.Adjustment_Type_Code = CUR.Adjustment_Type_Code;

ENDIF;

EXECUTE FUNCTION(Rtv Arr Adjustment Tot RT) TYPE(RTVOBJ) ARRAY(ARR_Adjustment_ToAC1733440;
PARAMETER(WRK.Adjustment_Type_Code);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Transaction_Amount);
PARAMETER(1);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(Crt ARR Adjustment Tot CR) TYPE(CRTOBJ) ARRAY(ARR_Adjustment_ToAC1733438;
 PARAMETER(PAR.Adjustment_Type_Code);
 PARAMETER(PAR.USR_Company_Number);
 PARAMETER(PAR.USR_amount_1_11_2);
 PARAMETER(PAR.USR_Adjustment_Count_1);
 //?USER: Process Data record

 // WRK.USR amount 1  11.2 = DB1.USR amount 1  11.2 + PAR.USR amount 1  11.2
 WRK.USR_amount_1_11_2 = DB1.USR_amount_1_11_2 + PAR.USR_amount_1_11_2;

 // WRK.USR Adjustment Count 1 = DB1.USR Adjustment Count 1 + PAR.USR Adjustment Count 1
 WRK.USR_Adjustment_Count_1 = DB1.USR_Adjustment_Count_1 + PAR.USR_Adjustment_Count_1;

 EXECUTE FUNCTION(Chg Arr Adjustment Tot CH) TYPE(CHGOBJ) ARRAY(ARR_Adjustment_ToAC1733439;
 PARAMETER(PAR.Adjustment_Type_Code);
 PARAMETER(PAR.USR_Company_Number);
 PARAMETER(WRK.USR_amount_1_11_2);
 PARAMETER(WRK.USR_Adjustment_Count_1);
}


ENDIF;

ENDIF;

CASE;

// IF CUR.Adjustment Type Code is Regular Pay
IF CUR.Adjustment_Type_Code = 'PAY';

// LCL.USR Cash Appl Amt Total = LCL.USR Cash Appl Amt Total + DB1.Transaction Amount
LCL.USR_Cash_Appl_Amt_Total = LCL.USR_Cash_Appl_Amt_Total + DB1.Transaction_Amount;

// IF CUR.Adjustment Type Code is OA On Account Cash
IF CUR.Adjustment_Type_Code = 'OA';

// LCL.USR On Account Total = LCL.USR On Account Total + DB1.Transaction Amount
LCL.USR_On_Account_Total = LCL.USR_On_Account_Total + DB1.Transaction_Amount;

ENDIF;

// CUR.G/L Sub Ledger DRV = DB1.G/L Sub-Ledger Code
CUR.G_L_Sub_Ledger_DRV = DB1.G_L_Sub_Ledger_Code;

//?USER: Process after print of detail format

EXECUTE FUNCTION(DLT Post/Report Record DL) TYPE(DLTOBJ) FILE(PDJ5CPP)          AC1346482;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Bank_Code);
PARAMETER(CUR.Deposit_Date);
PARAMETER(CUR.AR_Customer_Number);
PARAMETER(CUR.Invoice_Number);
PARAMETER(CUR.Invoice_Suffix);
PARAMETER(CUR.Sequence_Number);

//?*** PK0333 ***
CASE;

// IF CUR.Adjustment Type Code is Chargeback
IF CUR.Adjustment_Type_Code = 'CB';

// OR CUR.Adjustment Type Code is Accrual Chargeback
OR CUR.Adjustment_Type_Code = 'ACB';

// IF CUR.Adjustment Type Code is Write Off Under $50
IF CUR.Adjustment_Type_Code = ' WO';

ENDIF;

//?USER: Print required level totals

// SUPPRESSED PRINT A/R Check Number totals format

CASE;

IF NEW AR_Customer_Number;
EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(CUR.AR_Customer_Number);
PARAMETER(CUR.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?RMC 12/21/05 Company number totals
// NXT.USR Final Total = NXT.USR Final Total + CUR.USR Transaction amount
NXT.USR_Final_Total = NXT.USR_Final_Total + CUR.USR_Transaction_amount;

// NXT.USR Cash Appl Amount = CUR.USR Cust Cash + NXT.USR Cash Appl Amount
NXT.USR_Cash_Appl_Amount = CUR.USR_Cust_Cash + NXT.USR_Cash_Appl_Amount;

// NXT.USR Adjustments Total = CUR.USR Cust Adju + NXT.USR Adjustments Total
NXT.USR_Adjustments_Total = CUR.USR_Cust_Adju + NXT.USR_Adjustments_Total;

// Print A/R Customer Number totals format
PRINT A/R Customer Number totals format;

// CUR.USR Transaction amount = CND.equal to zero
CUR.USR_Transaction_amount = *ZERO;

ENDIF;

// SUPPRESSED PRINT Deposit Date totals format

// SUPPRESSED PRINT Bank Code totals format

CASE;

IF NEW Company_Number;
// NXT.USR Final Total = NXT.USR Final Total + CUR.USR Final Total
NXT.USR_Final_Total = NXT.USR_Final_Total + CUR.USR_Final_Total;

// NXT.USR Cash Appl Amount = NXT.USR Cash Appl Amount + CUR.USR Cash Appl Amount
NXT.USR_Cash_Appl_Amount = NXT.USR_Cash_Appl_Amount + CUR.USR_Cash_Appl_Amount;

// NXT.USR Adjustments Total = NXT.USR Adjustments Total + CUR.USR Adjustments Total
NXT.USR_Adjustments_Total = NXT.USR_Adjustments_Total + CUR.USR_Adjustments_Total;

// WRK.USR Company Number = CUR.Company Number
WRK.USR_Company_Number = CUR.Company_Number;

EXECUTE FUNCTION(Rtv Arr Adjust Tot ALL RT) TYPE(RTVOBJ) ARRAY(ARR_Adjustment_ToAC1733457;
PARAMETER(WRK.USR_Company_Number);
PARAMETER(CUR.USR_Adjustment_Type_1);
PARAMETER(CUR.USR_Adjustment_Type_2);
PARAMETER(CUR.USR_Adjustment_Type_3);
PARAMETER(CUR.USR_Adjustment_Type_4);
PARAMETER(CUR.USR_Adjustment_Type_5);
PARAMETER(CUR.USR_Adjustment_Type_6);
PARAMETER(CUR.USR_Adjustment_Type_7);
PARAMETER(CUR.USR_Adjustment_Type_8);
PARAMETER(CUR.USR_Adjustment_Type_9);
PARAMETER(CUR.USR_Adjustment_Type_10);
PARAMETER(WRK.USR_Company_Number_1);
PARAMETER(WRK.USR_Company_Number_2);
PARAMETER(WRK.USR_Company_Number_3);
PARAMETER(WRK.USR_Company_Number_4);
PARAMETER(WRK.USR_Company_Number_5);
PARAMETER(WRK.USR_Company_Number_6);
PARAMETER(WRK.USR_Company_Number_7);
PARAMETER(WRK.USR_Company_Number_8);
PARAMETER(WRK.USR_Company_Number_9);
PARAMETER(WRK.USR_Company_Number_10);
PARAMETER(CUR.USR_Adjustment_Amt_1);
PARAMETER(CUR.USR_Adjustment_Amt_2);
PARAMETER(CUR.USR_Adjustment_Amt_3);
PARAMETER(CUR.USR_Adjustment_Amt_4);
PARAMETER(CUR.USR_Adjustment_Amt_5);
PARAMETER(CUR.USR_Adjustment_Amt_6);
PARAMETER(CUR.USR_Adjustment_Amt_7);
PARAMETER(CUR.USR_Adjustment_Amt_8);
PARAMETER(CUR.USR_Adjustment_Amt_9);
PARAMETER(CUR.USR_Adjustment_Amt_10);
PARAMETER(CUR.USR_Adjustment_Count_1);
PARAMETER(CUR.USR_Adjustment_Count_2);
PARAMETER(CUR.USR_Adjustment_Count_3);
PARAMETER(CUR.USR_Adjustment_Count_4);
PARAMETER(CUR.USR_Adjustment_Count_5);
PARAMETER(CUR.USR_Adjustment_Count_6);
PARAMETER(CUR.USR_Adjustment_Count_7);
PARAMETER(CUR.USR_Adjustment_Count_8);
PARAMETER(CUR.USR_Adjustment_Count_9);
PARAMETER(CUR.USR_Adjustment_Count_10);
{
 //?USER: Initialize routine

 //?** Save PAR Company Number before fields are cleared   2/2/06 LJB
 // WRK.USR Company Number = PAR.USR Company Number
 WRK.USR_Company_Number = PAR.USR_Company_Number;

 MOVE *ALL (To: PAR From: CON);

 //?** Replace PAR Company Number after fields are cleared   2/2/06 LJB
 // PAR.USR Company Number = WRK.USR Company Number
 PAR.USR_Company_Number = WRK.USR_Company_Number;

 //?***** Change Log
 //?** 02/01/06 LJB
 //?** Add Company number to the array elements
 //?** Save company number before all parms are cleared so it can be
 //?**   replaced. The PAR context is used to populate the array cell.
 //?*****
 //?USER: Process Data record

 //?** Change adjustment totals to accumulate so this array can
 //?** be used for company totals and for final totals.   2/1/06 LJB
 //?** If a company number is passed in, accumulate for that company
 //?** only so company break totals will print.
 //?** Otherwise, accumulate for all companies. If a type is already
 //?** in the array then add to that bucket, if it is not then
 //?** add to the next empty bucket.
 //?** Test PAR Co #, if blank include all, else, select matching Co# -LJB
 CASE;

 // IF PAR.USR Company Number is not equal to zero
 IF ( PAR.USR_Company_Number <> *ZERO;

 // AND DB1.USR Company Number EQ PAR.USR Company Number
 AND DB1.USR_Company_Number = PAR.USR_Company_Number );

 // OR PAR.USR Company Number is Equal to zero
 OR PAR.USR_Company_Number = *ZERO;

 //?** Accumulate into the correct available bucket
 CASE;

 // IF PAR.USR Adjustment Type 1 is Not Entered
 IF PAR.USR_Adjustment_Type_1 = *BLANK;

 // OR PAR.USR Adjustment Type 1 EQ DB1.Adjustment Type Code
 OR PAR.USR_Adjustment_Type_1 = DB1.Adjustment_Type_Code;

 // PAR.USR Company Number 1 = DB1.USR Company Number
 PAR.USR_Company_Number_1 = DB1.USR_Company_Number;

 // PAR.USR Adjustment Type 1 = DB1.Adjustment Type Code
 PAR.USR_Adjustment_Type_1 = DB1.Adjustment_Type_Code;

 // PAR.USR Adjustment Amt 1 = DB1.USR amount 1  11.2 + PAR.USR Adjustment Amt 1
 PAR.USR_Adjustment_Amt_1 = DB1.USR_amount_1_11_2 + PAR.USR_Adjustment_Amt_1;

 // PAR.USR Adjustment Count 1 = DB1.USR Adjustment Count 1 + PAR.USR Adjustment Count 1
 PAR.USR_Adjustment_Count_1 = DB1.USR_Adjustment_Count_1 + PAR.USR_Adjustment_Count_1;

 //?** Accumulate into the correct available bucket
 // IF PAR.USR Adjustment Type 2 is Not Entered
 IF PAR.USR_Adjustment_Type_2 = *BLANK;

 // OR PAR.USR Adjustment Type 2 EQ DB1.Adjustment Type Code
 OR PAR.USR_Adjustment_Type_2 = DB1.Adjustment_Type_Code;

 // PAR.USR Company Number 2 = DB1.USR Company Number
 PAR.USR_Company_Number_2 = DB1.USR_Company_Number;

 // PAR.USR Adjustment Type 2 = DB1.Adjustment Type Code
 PAR.USR_Adjustment_Type_2 = DB1.Adjustment_Type_Code;

 // PAR.USR Adjustment Amt 2 = DB1.USR amount 1  11.2 + PAR.USR Adjustment Amt 2
 PAR.USR_Adjustment_Amt_2 = DB1.USR_amount_1_11_2 + PAR.USR_Adjustment_Amt_2;

 // PAR.USR Adjustment Count 2 = DB1.USR Adjustment Count 1 + PAR.USR Adjustment Count 2
 PAR.USR_Adjustment_Count_2 = DB1.USR_Adjustment_Count_1 + PAR.USR_Adjustment_Count_2;

 //?** Accumulate into the correct available bucket
 // IF PAR.USR Adjustment Type 3 is Not Entered
 IF PAR.USR_Adjustment_Type_3 = *BLANK;

 // OR PAR.USR Adjustment Type 3 EQ DB1.Adjustment Type Code
 OR PAR.USR_Adjustment_Type_3 = DB1.Adjustment_Type_Code;

 // PAR.USR Company Number 3 = DB1.USR Company Number
 PAR.USR_Company_Number_3 = DB1.USR_Company_Number;

 // PAR.USR Adjustment Type 3 = DB1.Adjustment Type Code
 PAR.USR_Adjustment_Type_3 = DB1.Adjustment_Type_Code;

 // PAR.USR Adjustment Amt 3 = DB1.USR amount 1  11.2 + PAR.USR Adjustment Amt 3
 PAR.USR_Adjustment_Amt_3 = DB1.USR_amount_1_11_2 + PAR.USR_Adjustment_Amt_3;

 // PAR.USR Adjustment Count 3 = DB1.USR Adjustment Count 1 + PAR.USR Adjustment Count 3
 PAR.USR_Adjustment_Count_3 = DB1.USR_Adjustment_Count_1 + PAR.USR_Adjustment_Count_3;

 //?** Accumulate into the correct available bucket
 // IF PAR.USR Adjustment Type 4 is Not Entered
 IF PAR.USR_Adjustment_Type_4 = *BLANK;

 // OR PAR.USR Adjustment Type 4 EQ DB1.Adjustment Type Code
 OR PAR.USR_Adjustment_Type_4 = DB1.Adjustment_Type_Code;

 // PAR.USR Company Number 4 = DB1.USR Company Number
 PAR.USR_Company_Number_4 = DB1.USR_Company_Number;

 // PAR.USR Adjustment Type 4 = DB1.Adjustment Type Code
 PAR.USR_Adjustment_Type_4 = DB1.Adjustment_Type_Code;

 // PAR.USR Adjustment Amt 4 = DB1.USR amount 1  11.2 + PAR.USR Adjustment Amt 4
 PAR.USR_Adjustment_Amt_4 = DB1.USR_amount_1_11_2 + PAR.USR_Adjustment_Amt_4;

 // PAR.USR Adjustment Count 4 = DB1.USR Adjustment Count 1 + PAR.USR Adjustment Count 4
 PAR.USR_Adjustment_Count_4 = DB1.USR_Adjustment_Count_1 + PAR.USR_Adjustment_Count_4;

 //?** Accumulate into the correct available bucket
 // IF PAR.USR Adjustment Type 5 is Not Entered
 IF PAR.USR_Adjustment_Type_5 = *BLANK;

 // OR PAR.USR Adjustment Type 5 EQ DB1.Adjustment Type Code
 OR PAR.USR_Adjustment_Type_5 = DB1.Adjustment_Type_Code;

 // PAR.USR Company Number 5 = DB1.USR Company Number
 PAR.USR_Company_Number_5 = DB1.USR_Company_Number;

 // PAR.USR Adjustment Type 5 = DB1.Adjustment Type Code
 PAR.USR_Adjustment_Type_5 = DB1.Adjustment_Type_Code;

 // PAR.USR Adjustment Amt 5 = DB1.USR amount 1  11.2 + PAR.USR Adjustment Amt 5
 PAR.USR_Adjustment_Amt_5 = DB1.USR_amount_1_11_2 + PAR.USR_Adjustment_Amt_5;

 // PAR.USR Adjustment Count 5 = DB1.USR Adjustment Count 1 + PAR.USR Adjustment Count 5
 PAR.USR_Adjustment_Count_5 = DB1.USR_Adjustment_Count_1 + PAR.USR_Adjustment_Count_5;

 //?** Accumulate into the correct available bucket
 // IF PAR.USR Adjustment Type 6 is Not Entered
 IF PAR.USR_Adjustment_Type_6 = *BLANK;

 // OR PAR.USR Adjustment Type 6 EQ DB1.Adjustment Type Code
 OR PAR.USR_Adjustment_Type_6 = DB1.Adjustment_Type_Code;

 // PAR.USR Company Number 6 = DB1.USR Company Number
 PAR.USR_Company_Number_6 = DB1.USR_Company_Number;

 // PAR.USR Adjustment Type 6 = DB1.Adjustment Type Code
 PAR.USR_Adjustment_Type_6 = DB1.Adjustment_Type_Code;

 // PAR.USR Adjustment Amt 6 = DB1.USR amount 1  11.2 + PAR.USR Adjustment Amt 6
 PAR.USR_Adjustment_Amt_6 = DB1.USR_amount_1_11_2 + PAR.USR_Adjustment_Amt_6;

 // PAR.USR Adjustment Count 6 = DB1.USR Adjustment Count 1 + PAR.USR Adjustment Count 6
 PAR.USR_Adjustment_Count_6 = DB1.USR_Adjustment_Count_1 + PAR.USR_Adjustment_Count_6;

 //?** Accumulate into the correct available bucket
 // IF PAR.USR Adjustment Type 7 is Not Entered
 IF PAR.USR_Adjustment_Type_7 = *BLANK;

 // OR PAR.USR Adjustment Type 7 EQ DB1.Adjustment Type Code
 OR PAR.USR_Adjustment_Type_7 = DB1.Adjustment_Type_Code;

 // PAR.USR Company Number 7 = DB1.USR Company Number
 PAR.USR_Company_Number_7 = DB1.USR_Company_Number;

 // PAR.USR Adjustment Type 7 = DB1.Adjustment Type Code
 PAR.USR_Adjustment_Type_7 = DB1.Adjustment_Type_Code;

 // PAR.USR Adjustment Amt 7 = DB1.USR amount 1  11.2 + PAR.USR Adjustment Amt 7
 PAR.USR_Adjustment_Amt_7 = DB1.USR_amount_1_11_2 + PAR.USR_Adjustment_Amt_7;

 // PAR.USR Adjustment Count 7 = DB1.USR Adjustment Count 1 + PAR.USR Adjustment Count 7
 PAR.USR_Adjustment_Count_7 = DB1.USR_Adjustment_Count_1 + PAR.USR_Adjustment_Count_7;

 //?** Accumulate into the correct available bucket
 // IF PAR.USR Adjustment Type 8 is Not Entered
 IF PAR.USR_Adjustment_Type_8 = *BLANK;

 // OR PAR.USR Adjustment Type 8 EQ DB1.Adjustment Type Code
 OR PAR.USR_Adjustment_Type_8 = DB1.Adjustment_Type_Code;

 // PAR.USR Company Number 8 = DB1.USR Company Number
 PAR.USR_Company_Number_8 = DB1.USR_Company_Number;

 // PAR.USR Adjustment Type 8 = DB1.Adjustment Type Code
 PAR.USR_Adjustment_Type_8 = DB1.Adjustment_Type_Code;

 // PAR.USR Adjustment Amt 8 = DB1.USR amount 1  11.2 + PAR.USR Adjustment Amt 8
 PAR.USR_Adjustment_Amt_8 = DB1.USR_amount_1_11_2 + PAR.USR_Adjustment_Amt_8;

 // PAR.USR Adjustment Count 8 = DB1.USR Adjustment Count 1 + PAR.USR Adjustment Count 8
 PAR.USR_Adjustment_Count_8 = DB1.USR_Adjustment_Count_1 + PAR.USR_Adjustment_Count_8;

 //?** Accumulate into the correct available bucket
 // IF PAR.USR Adjustment Type 9 is Not Entered
 IF PAR.USR_Adjustment_Type_9 = *BLANK;

 // OR PAR.USR Adjustment Type 9 EQ DB1.Adjustment Type Code
 OR PAR.USR_Adjustment_Type_9 = DB1.Adjustment_Type_Code;

 // PAR.USR Company Number 9 = DB1.USR Company Number
 PAR.USR_Company_Number_9 = DB1.USR_Company_Number;

 // PAR.USR Adjustment Type 9 = DB1.Adjustment Type Code
 PAR.USR_Adjustment_Type_9 = DB1.Adjustment_Type_Code;

 // PAR.USR Adjustment Amt 9 = DB1.USR amount 1  11.2 + PAR.USR Adjustment Amt 9
 PAR.USR_Adjustment_Amt_9 = DB1.USR_amount_1_11_2 + PAR.USR_Adjustment_Amt_9;

 // PAR.USR Adjustment Count 9 = DB1.USR Adjustment Count 1 + PAR.USR Adjustment Count 9
 PAR.USR_Adjustment_Count_9 = DB1.USR_Adjustment_Count_1 + PAR.USR_Adjustment_Count_9;

 //?** Accumulate into the correct available bucket
 // IF PAR.USR Adjustment Type 10 is Not Entered
 IF PAR.USR_Adjustment_Type_10 = *BLANK;

 // OR PAR.USR Adjustment Type 10 EQ DB1.Adjustment Type Code
 OR PAR.USR_Adjustment_Type_10 = DB1.Adjustment_Type_Code;

 // PAR.USR Company Number 10 = DB1.USR Company Number
 PAR.USR_Company_Number_10 = DB1.USR_Company_Number;

 // PAR.USR Adjustment Type 10 = DB1.Adjustment Type Code
 PAR.USR_Adjustment_Type_10 = DB1.Adjustment_Type_Code;

 // PAR.USR Adjustment Amt 10 = DB1.USR amount 1  11.2 + PAR.USR Adjustment Amt 10
 PAR.USR_Adjustment_Amt_10 = DB1.USR_amount_1_11_2 + PAR.USR_Adjustment_Amt_10;

 // PAR.USR Adjustment Count 10 = DB1.USR Adjustment Count 1 + PAR.USR Adjustment Count 10
 PAR.USR_Adjustment_Count_10 = DB1.USR_Adjustment_Count_1 + PAR.USR_Adjustment_Count_10;

 //?** Accumulate into the correct available bucket
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?add any remaining here.
 // PAR.USR Adjustment Amt 10 = PAR.USR Adjustment Amt 10 + DB1.USR amount 1  11.2
 PAR.USR_Adjustment_Amt_10 = PAR.USR_Adjustment_Amt_10 + DB1.USR_amount_1_11_2;

 // PAR.USR Adjustment Count 10 = PAR.USR Adjustment Count 10 + DB1.USR Adjustment Count 1
 PAR.USR_Adjustment_Count_10 = PAR.USR_Adjustment_Count_10 + DB1.USR_Adjustment_Count_1;

 ENDIF;

 ENDIF;

}


// CUR.USR On Account Total = LCL.USR On Account Total
CUR.USR_On_Account_Total = LCL.USR_On_Account_Total;

// CUR.USR Cash Appl Amt Total = LCL.USR Cash Appl Amt Total
CUR.USR_Cash_Appl_Amt_Total = LCL.USR_Cash_Appl_Amt_Total;

// NXT.USR On Account Total = NXT.USR On Account Total + LCL.USR On Account Total
NXT.USR_On_Account_Total = NXT.USR_On_Account_Total + LCL.USR_On_Account_Total;

// NXT.USR Cash Appl Amt Total = NXT.USR Cash Appl Amt Total + LCL.USR Cash Appl Amt Total
NXT.USR_Cash_Appl_Amt_Total = NXT.USR_Cash_Appl_Amt_Total + LCL.USR_Cash_Appl_Amt_Total;

// Print Accounting Company Number totals format
PRINT Accounting Company Number totals format;

// LCL.USR On Account Total = CON.*ZERO
LCL.USR_On_Account_Total = *ZERO;

// LCL.USR Cash Appl Amt Total = CON.*ZERO
LCL.USR_Cash_Appl_Amt_Total = *ZERO;

ENDIF;

//?USER: On print of final totals format

// WRK.USR Company Number = CON.*ZERO
WRK.USR_Company_Number = 0;

EXECUTE FUNCTION(Rtv Arr Adjust Tot ALL RT) TYPE(RTVOBJ) ARRAY(ARR_Adjustment_ToAC1733457;
PARAMETER(WRK.USR_Company_Number);
PARAMETER(CUR.USR_Adjustment_Type_1);
PARAMETER(CUR.USR_Adjustment_Type_2);
PARAMETER(CUR.USR_Adjustment_Type_3);
PARAMETER(CUR.USR_Adjustment_Type_4);
PARAMETER(CUR.USR_Adjustment_Type_5);
PARAMETER(CUR.USR_Adjustment_Type_6);
PARAMETER(CUR.USR_Adjustment_Type_7);
PARAMETER(CUR.USR_Adjustment_Type_8);
PARAMETER(CUR.USR_Adjustment_Type_9);
PARAMETER(CUR.USR_Adjustment_Type_10);
PARAMETER(WRK.USR_Company_Number_1);
PARAMETER(WRK.USR_Company_Number_2);
PARAMETER(WRK.USR_Company_Number_3);
PARAMETER(WRK.USR_Company_Number_4);
PARAMETER(WRK.USR_Company_Number_5);
PARAMETER(WRK.USR_Company_Number_6);
PARAMETER(WRK.USR_Company_Number_7);
PARAMETER(WRK.USR_Company_Number_8);
PARAMETER(WRK.USR_Company_Number_9);
PARAMETER(WRK.USR_Company_Number_10);
PARAMETER(CUR.USR_Adjustment_Amt_1);
PARAMETER(CUR.USR_Adjustment_Amt_2);
PARAMETER(CUR.USR_Adjustment_Amt_3);
PARAMETER(CUR.USR_Adjustment_Amt_4);
PARAMETER(CUR.USR_Adjustment_Amt_5);
PARAMETER(CUR.USR_Adjustment_Amt_6);
PARAMETER(CUR.USR_Adjustment_Amt_7);
PARAMETER(CUR.USR_Adjustment_Amt_8);
PARAMETER(CUR.USR_Adjustment_Amt_9);
PARAMETER(CUR.USR_Adjustment_Amt_10);
PARAMETER(CUR.USR_Adjustment_Count_1);
PARAMETER(CUR.USR_Adjustment_Count_2);
PARAMETER(CUR.USR_Adjustment_Count_3);
PARAMETER(CUR.USR_Adjustment_Count_4);
PARAMETER(CUR.USR_Adjustment_Count_5);
PARAMETER(CUR.USR_Adjustment_Count_6);
PARAMETER(CUR.USR_Adjustment_Count_7);
PARAMETER(CUR.USR_Adjustment_Count_8);
PARAMETER(CUR.USR_Adjustment_Count_9);
PARAMETER(CUR.USR_Adjustment_Count_10);
{
 //?USER: Initialize routine

 //?** Save PAR Company Number before fields are cleared   2/2/06 LJB
 // WRK.USR Company Number = PAR.USR Company Number
 WRK.USR_Company_Number = PAR.USR_Company_Number;

 MOVE *ALL (To: PAR From: CON);

 //?** Replace PAR Company Number after fields are cleared   2/2/06 LJB
 // PAR.USR Company Number = WRK.USR Company Number
 PAR.USR_Company_Number = WRK.USR_Company_Number;

 //?***** Change Log
 //?** 02/01/06 LJB
 //?** Add Company number to the array elements
 //?** Save company number before all parms are cleared so it can be
 //?**   replaced. The PAR context is used to populate the array cell.
 //?*****
 //?USER: Process Data record

 //?** Change adjustment totals to accumulate so this array can
 //?** be used for company totals and for final totals.   2/1/06 LJB
 //?** If a company number is passed in, accumulate for that company
 //?** only so company break totals will print.
 //?** Otherwise, accumulate for all companies. If a type is already
 //?** in the array then add to that bucket, if it is not then
 //?** add to the next empty bucket.
 //?** Test PAR Co #, if blank include all, else, select matching Co# -LJB
 CASE;

 // IF PAR.USR Company Number is not equal to zero
 IF ( PAR.USR_Company_Number <> *ZERO;

 // AND DB1.USR Company Number EQ PAR.USR Company Number
 AND DB1.USR_Company_Number = PAR.USR_Company_Number );

 // OR PAR.USR Company Number is Equal to zero
 OR PAR.USR_Company_Number = *ZERO;

 //?** Accumulate into the correct available bucket
 CASE;

 // IF PAR.USR Adjustment Type 1 is Not Entered
 IF PAR.USR_Adjustment_Type_1 = *BLANK;

 // OR PAR.USR Adjustment Type 1 EQ DB1.Adjustment Type Code
 OR PAR.USR_Adjustment_Type_1 = DB1.Adjustment_Type_Code;

 // PAR.USR Company Number 1 = DB1.USR Company Number
 PAR.USR_Company_Number_1 = DB1.USR_Company_Number;

 // PAR.USR Adjustment Type 1 = DB1.Adjustment Type Code
 PAR.USR_Adjustment_Type_1 = DB1.Adjustment_Type_Code;

 // PAR.USR Adjustment Amt 1 = DB1.USR amount 1  11.2 + PAR.USR Adjustment Amt 1
 PAR.USR_Adjustment_Amt_1 = DB1.USR_amount_1_11_2 + PAR.USR_Adjustment_Amt_1;

 // PAR.USR Adjustment Count 1 = DB1.USR Adjustment Count 1 + PAR.USR Adjustment Count 1
 PAR.USR_Adjustment_Count_1 = DB1.USR_Adjustment_Count_1 + PAR.USR_Adjustment_Count_1;

 //?** Accumulate into the correct available bucket
 // IF PAR.USR Adjustment Type 2 is Not Entered
 IF PAR.USR_Adjustment_Type_2 = *BLANK;

 // OR PAR.USR Adjustment Type 2 EQ DB1.Adjustment Type Code
 OR PAR.USR_Adjustment_Type_2 = DB1.Adjustment_Type_Code;

 // PAR.USR Company Number 2 = DB1.USR Company Number
 PAR.USR_Company_Number_2 = DB1.USR_Company_Number;

 // PAR.USR Adjustment Type 2 = DB1.Adjustment Type Code
 PAR.USR_Adjustment_Type_2 = DB1.Adjustment_Type_Code;

 // PAR.USR Adjustment Amt 2 = DB1.USR amount 1  11.2 + PAR.USR Adjustment Amt 2
 PAR.USR_Adjustment_Amt_2 = DB1.USR_amount_1_11_2 + PAR.USR_Adjustment_Amt_2;

 // PAR.USR Adjustment Count 2 = DB1.USR Adjustment Count 1 + PAR.USR Adjustment Count 2
 PAR.USR_Adjustment_Count_2 = DB1.USR_Adjustment_Count_1 + PAR.USR_Adjustment_Count_2;

 //?** Accumulate into the correct available bucket
 // IF PAR.USR Adjustment Type 3 is Not Entered
 IF PAR.USR_Adjustment_Type_3 = *BLANK;

 // OR PAR.USR Adjustment Type 3 EQ DB1.Adjustment Type Code
 OR PAR.USR_Adjustment_Type_3 = DB1.Adjustment_Type_Code;

 // PAR.USR Company Number 3 = DB1.USR Company Number
 PAR.USR_Company_Number_3 = DB1.USR_Company_Number;

 // PAR.USR Adjustment Type 3 = DB1.Adjustment Type Code
 PAR.USR_Adjustment_Type_3 = DB1.Adjustment_Type_Code;

 // PAR.USR Adjustment Amt 3 = DB1.USR amount 1  11.2 + PAR.USR Adjustment Amt 3
 PAR.USR_Adjustment_Amt_3 = DB1.USR_amount_1_11_2 + PAR.USR_Adjustment_Amt_3;

 // PAR.USR Adjustment Count 3 = DB1.USR Adjustment Count 1 + PAR.USR Adjustment Count 3
 PAR.USR_Adjustment_Count_3 = DB1.USR_Adjustment_Count_1 + PAR.USR_Adjustment_Count_3;

 //?** Accumulate into the correct available bucket
 // IF PAR.USR Adjustment Type 4 is Not Entered
 IF PAR.USR_Adjustment_Type_4 = *BLANK;

 // OR PAR.USR Adjustment Type 4 EQ DB1.Adjustment Type Code
 OR PAR.USR_Adjustment_Type_4 = DB1.Adjustment_Type_Code;

 // PAR.USR Company Number 4 = DB1.USR Company Number
 PAR.USR_Company_Number_4 = DB1.USR_Company_Number;

 // PAR.USR Adjustment Type 4 = DB1.Adjustment Type Code
 PAR.USR_Adjustment_Type_4 = DB1.Adjustment_Type_Code;

 // PAR.USR Adjustment Amt 4 = DB1.USR amount 1  11.2 + PAR.USR Adjustment Amt 4
 PAR.USR_Adjustment_Amt_4 = DB1.USR_amount_1_11_2 + PAR.USR_Adjustment_Amt_4;

 // PAR.USR Adjustment Count 4 = DB1.USR Adjustment Count 1 + PAR.USR Adjustment Count 4
 PAR.USR_Adjustment_Count_4 = DB1.USR_Adjustment_Count_1 + PAR.USR_Adjustment_Count_4;

 //?** Accumulate into the correct available bucket
 // IF PAR.USR Adjustment Type 5 is Not Entered
 IF PAR.USR_Adjustment_Type_5 = *BLANK;

 // OR PAR.USR Adjustment Type 5 EQ DB1.Adjustment Type Code
 OR PAR.USR_Adjustment_Type_5 = DB1.Adjustment_Type_Code;

 // PAR.USR Company Number 5 = DB1.USR Company Number
 PAR.USR_Company_Number_5 = DB1.USR_Company_Number;

 // PAR.USR Adjustment Type 5 = DB1.Adjustment Type Code
 PAR.USR_Adjustment_Type_5 = DB1.Adjustment_Type_Code;

 // PAR.USR Adjustment Amt 5 = DB1.USR amount 1  11.2 + PAR.USR Adjustment Amt 5
 PAR.USR_Adjustment_Amt_5 = DB1.USR_amount_1_11_2 + PAR.USR_Adjustment_Amt_5;

 // PAR.USR Adjustment Count 5 = DB1.USR Adjustment Count 1 + PAR.USR Adjustment Count 5
 PAR.USR_Adjustment_Count_5 = DB1.USR_Adjustment_Count_1 + PAR.USR_Adjustment_Count_5;

 //?** Accumulate into the correct available bucket
 // IF PAR.USR Adjustment Type 6 is Not Entered
 IF PAR.USR_Adjustment_Type_6 = *BLANK;

 // OR PAR.USR Adjustment Type 6 EQ DB1.Adjustment Type Code
 OR PAR.USR_Adjustment_Type_6 = DB1.Adjustment_Type_Code;

 // PAR.USR Company Number 6 = DB1.USR Company Number
 PAR.USR_Company_Number_6 = DB1.USR_Company_Number;

 // PAR.USR Adjustment Type 6 = DB1.Adjustment Type Code
 PAR.USR_Adjustment_Type_6 = DB1.Adjustment_Type_Code;

 // PAR.USR Adjustment Amt 6 = DB1.USR amount 1  11.2 + PAR.USR Adjustment Amt 6
 PAR.USR_Adjustment_Amt_6 = DB1.USR_amount_1_11_2 + PAR.USR_Adjustment_Amt_6;

 // PAR.USR Adjustment Count 6 = DB1.USR Adjustment Count 1 + PAR.USR Adjustment Count 6
 PAR.USR_Adjustment_Count_6 = DB1.USR_Adjustment_Count_1 + PAR.USR_Adjustment_Count_6;

 //?** Accumulate into the correct available bucket
 // IF PAR.USR Adjustment Type 7 is Not Entered
 IF PAR.USR_Adjustment_Type_7 = *BLANK;

 // OR PAR.USR Adjustment Type 7 EQ DB1.Adjustment Type Code
 OR PAR.USR_Adjustment_Type_7 = DB1.Adjustment_Type_Code;

 // PAR.USR Company Number 7 = DB1.USR Company Number
 PAR.USR_Company_Number_7 = DB1.USR_Company_Number;

 // PAR.USR Adjustment Type 7 = DB1.Adjustment Type Code
 PAR.USR_Adjustment_Type_7 = DB1.Adjustment_Type_Code;

 // PAR.USR Adjustment Amt 7 = DB1.USR amount 1  11.2 + PAR.USR Adjustment Amt 7
 PAR.USR_Adjustment_Amt_7 = DB1.USR_amount_1_11_2 + PAR.USR_Adjustment_Amt_7;

 // PAR.USR Adjustment Count 7 = DB1.USR Adjustment Count 1 + PAR.USR Adjustment Count 7
 PAR.USR_Adjustment_Count_7 = DB1.USR_Adjustment_Count_1 + PAR.USR_Adjustment_Count_7;

 //?** Accumulate into the correct available bucket
 // IF PAR.USR Adjustment Type 8 is Not Entered
 IF PAR.USR_Adjustment_Type_8 = *BLANK;

 // OR PAR.USR Adjustment Type 8 EQ DB1.Adjustment Type Code
 OR PAR.USR_Adjustment_Type_8 = DB1.Adjustment_Type_Code;

 // PAR.USR Company Number 8 = DB1.USR Company Number
 PAR.USR_Company_Number_8 = DB1.USR_Company_Number;

 // PAR.USR Adjustment Type 8 = DB1.Adjustment Type Code
 PAR.USR_Adjustment_Type_8 = DB1.Adjustment_Type_Code;

 // PAR.USR Adjustment Amt 8 = DB1.USR amount 1  11.2 + PAR.USR Adjustment Amt 8
 PAR.USR_Adjustment_Amt_8 = DB1.USR_amount_1_11_2 + PAR.USR_Adjustment_Amt_8;

 // PAR.USR Adjustment Count 8 = DB1.USR Adjustment Count 1 + PAR.USR Adjustment Count 8
 PAR.USR_Adjustment_Count_8 = DB1.USR_Adjustment_Count_1 + PAR.USR_Adjustment_Count_8;

 //?** Accumulate into the correct available bucket
 // IF PAR.USR Adjustment Type 9 is Not Entered
 IF PAR.USR_Adjustment_Type_9 = *BLANK;

 // OR PAR.USR Adjustment Type 9 EQ DB1.Adjustment Type Code
 OR PAR.USR_Adjustment_Type_9 = DB1.Adjustment_Type_Code;

 // PAR.USR Company Number 9 = DB1.USR Company Number
 PAR.USR_Company_Number_9 = DB1.USR_Company_Number;

 // PAR.USR Adjustment Type 9 = DB1.Adjustment Type Code
 PAR.USR_Adjustment_Type_9 = DB1.Adjustment_Type_Code;

 // PAR.USR Adjustment Amt 9 = DB1.USR amount 1  11.2 + PAR.USR Adjustment Amt 9
 PAR.USR_Adjustment_Amt_9 = DB1.USR_amount_1_11_2 + PAR.USR_Adjustment_Amt_9;

 // PAR.USR Adjustment Count 9 = DB1.USR Adjustment Count 1 + PAR.USR Adjustment Count 9
 PAR.USR_Adjustment_Count_9 = DB1.USR_Adjustment_Count_1 + PAR.USR_Adjustment_Count_9;

 //?** Accumulate into the correct available bucket
 // IF PAR.USR Adjustment Type 10 is Not Entered
 IF PAR.USR_Adjustment_Type_10 = *BLANK;

 // OR PAR.USR Adjustment Type 10 EQ DB1.Adjustment Type Code
 OR PAR.USR_Adjustment_Type_10 = DB1.Adjustment_Type_Code;

 // PAR.USR Company Number 10 = DB1.USR Company Number
 PAR.USR_Company_Number_10 = DB1.USR_Company_Number;

 // PAR.USR Adjustment Type 10 = DB1.Adjustment Type Code
 PAR.USR_Adjustment_Type_10 = DB1.Adjustment_Type_Code;

 // PAR.USR Adjustment Amt 10 = DB1.USR amount 1  11.2 + PAR.USR Adjustment Amt 10
 PAR.USR_Adjustment_Amt_10 = DB1.USR_amount_1_11_2 + PAR.USR_Adjustment_Amt_10;

 // PAR.USR Adjustment Count 10 = DB1.USR Adjustment Count 1 + PAR.USR Adjustment Count 10
 PAR.USR_Adjustment_Count_10 = DB1.USR_Adjustment_Count_1 + PAR.USR_Adjustment_Count_10;

 //?** Accumulate into the correct available bucket
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?add any remaining here.
 // PAR.USR Adjustment Amt 10 = PAR.USR Adjustment Amt 10 + DB1.USR amount 1  11.2
 PAR.USR_Adjustment_Amt_10 = PAR.USR_Adjustment_Amt_10 + DB1.USR_amount_1_11_2;

 // PAR.USR Adjustment Count 10 = PAR.USR Adjustment Count 10 + DB1.USR Adjustment Count 1
 PAR.USR_Adjustment_Count_10 = PAR.USR_Adjustment_Count_10 + DB1.USR_Adjustment_Count_1;

 ENDIF;

 ENDIF;

}


