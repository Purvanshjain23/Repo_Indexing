// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLO5E1R
// ?Date: 14.08.2025 Time: 02:54:58
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


//?USER: Validate detail screen fields

//?F4 select alt producer payee
CASE;

// IF DTL.*CMD key is CF04
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Alt Producer Payee
AND PGM.*Cursor_field = DTL.Alt_Producer_Payee;

// Call program Sel Producer          SR.
CALL PROGRAM(Sel Producer          SR) ('PKA1SRR');
PARAMETER(DTL.Alt_Producer_Payee);

EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
PARAMETER(DTL.Alt_Producer_Payee);
PARAMETER(DTL.Alt_Prod_Payee_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Validation
CASE;

// IF DTL.PD Producer Code EQ DTL.Alt Producer Payee
IF DTL.PD_Producer_Code = DTL.Alt_Producer_Payee;

// Send error message - 'Alt Producer Payee must not equal the producer'
ERROR(PRK1236);

//?Validation
// IF DTL.PD Producer Code NE DTL.Alt Producer Payee
IF DTL.PD_Producer_Code <> DTL.Alt_Producer_Payee;

CASE;

// IF DTL.Alt Producer Payee is Not Entered
IF DTL.Alt_Producer_Payee = *BLANK;

//?not required
//?user may want to blank out the alt producer  payment
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Prod Existance    RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1176016;
PARAMETER(DTL.Alt_Producer_Payee);
PARAMETER(DTL.Alt_Prod_Payee_Name);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF WRK.Record Found USR is Record Found
IF WRK.Record_Found_USR = 'Y';

//?ok if found
// IF *OTHERWISE
IF *OTHERWISE;

//?not found tell user the  alt producer payee must be a producer
// Send error message - 'Alternate Producer must be a Producer'
ERROR(PRK1235);
MSGPARM(DTL.Alt_Producer_Payee);

ENDIF;

ENDIF;

ENDIF;

//?CALC: Detail screen function fields

EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PD_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
PARAMETER(DTL.Alt_Producer_Payee);
PARAMETER(DTL.Alt_Prod_Payee_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Create DBF record

EXECUTE FUNCTION(Crt Alt Producer PayeeCR) TYPE(CRTOBJ) FILE(PLAOREP)           AB1298063;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(WRK.Web_User_ID);
PARAMETER(WRK.Web_Payment_Pswd);
PARAMETER(WRK.Web_Delivery_Eval_Pswd);
PARAMETER(WRK.HPS_Automation_Y_N);
PARAMETER(WRK.Live_Repayment);
PARAMETER(WRK.Web_Unused_Pswd_3);
PARAMETER(WRK.Web_Unused_Pswd_4);
PARAMETER(WRK.Web_Unused_Pswd_5);
PARAMETER(WRK.Email_Address_1);
PARAMETER(WRK.Email_Address_2);
PARAMETER(WRK.Email_Address_3);
PARAMETER(WRK.Email_Address_4);
PARAMETER(WRK.Email_Address_5);
PARAMETER(DTL.Alt_Producer_Payee);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Add Stamp-Sys Dt  IF) TYPE(EXCINTFUN)                      AB1237005;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // Call program Rtv System Date & Tim UP.
  CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Alt Producer PayeeCH) TYPE(CHGOBJ) FILE(PLAOREP)           AB1298062;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.Alt_Producer_Payee);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // Call program Rtv System Date & Tim UP.
  CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


//?USER: Process command keys

CASE;

// IF DTL.*CMD key is CF05
IF DTL.*CMD_key = '05';

// Call program Dsp Alternate Producer DR.
CALL PROGRAM(Dsp Alternate Producer DR) ('PLO4D1R');
PARAMETER(DTL.Alt_Producer_Payee);
PARAMETER(LCL.Oms_System_Value_Alpha);

// PGM.*Continue transaction = CND.*YES
PGM.*Continue_transaction = 'Y';

// IF DTL.*CMD key is CF03
IF DTL.*CMD_key = '03';

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

RETURN;

ENDIF;

