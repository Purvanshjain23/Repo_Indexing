     h option(*SRCSTMT:*NODEBUGIO)
      *
      * ENVIRONMENT: Pork Division
      * SYSTEM:      Resource Optimization
      * PROGRAM:     RO221
      * TITLE:       Byproduct---Detail (FG only)
      * PROGRAMMER:  LeAnne Ramsey
      * CREATED:     10/25/06
      *
      * FUNCTION:    This program creates the Byproduct Detail records for a Week for
      *              the Meat Cost and the TF Fees & Payments System.
      *
      *              The Open Query in RO410CL selects only TF Class Groups
      *              that have a Meat Cost Group Code (AOHFAA in PPAOREL1 not blank)
      *
      *              Only Finished Goods are processed in this program.
      *
      ***************************************************************************************
      * MODIFICATIONS:
      ***************************************************************************************
      * DATE      PROGRAMMER
      *
      * 07/09/07  LeAnne Ramsey
      *           Added code to temporarily exclude 'Work in Process' items.
      *           Once the users figure out what they want to do with WP items,
      *           we will remove this 'exclude WP' code.
      *
      * 08/03/07  LeAnne Ramsey
      *           Added Item Type Code (FG vs WP) to Mix Summary/Detail files.
      *
      * 11/08/07  LeAnne Ramsey
      *           The calc of Sales Yield Percent was abending with
      *           "arithmetic operation resulted in a value that is too large to fit in
      *           the target". The value, which should fit in a 999.9999 field was
      *           13,600%!!
      *           To prevent abends due to data, we will calc into a 15,4 field
      *           and only move it to Yield Percent if it is 999% or less.
      *
      * 11/28/07  Alice Brownfield
      *           Added new fields to files when we combined this with the Credit Item Meat Costs
      *           1.  Produced Start Weight fields
      *           2.  Meat Cost Sub Group code
      *           3.  Pump Yield
      *           4.  Include in MIX Flag
      *
      *           Also changed the selection in the program to process ALL codes that have a
      *           Meat Cost Group specified rather than just processing the BP's that have
      *           the "Include in MIX Flag" = 'Y'.  So we have to make sure that we only
      *           include the ones we need in the MIX Summary file.
      *
      * 03/18/08  LeAnne Ramsey
      *           Recompile only. Synon file POAXCPP was recompiled.
      *
      * 06/04/08  LeAnne Ramsey
      *           Removed all logic for ROP121-TF Byproduct Mix Summary. We will now build
      *           the "summary" file in program RO225.
      *           New fields (Ingredient and Other Cost) added to multiple files.
      *
      * 06/12/08  Alice Brownfield
      *           Added logic to populate the new Summary Level field and
      *           Exception fields.
      *
      * 11/20/08  LeAnne Ramsey
      *           As a prep for synchronizing the TFS and Meat Cost LDAs, we
      *           removed the unused LDA fields.
      *
      * 11/21/08  LeAnne Ramsey
      *           As part of synchronizing the LDAs between the TFS Margin Adjustment Close
      *           and the Meat Costing, we changed the LDA positions.
      *
      * 04/02/09  LeAnne Ramsey
      *           Recompile only. Field 'Producing Company' added to Byproduct Detail.
      *
      * 11/04/09  LeAnne Ramsey
      *           E00523: Triumph is now going to sell their own CWG-Choice White Grease.
      *           So, for TFS Margins, that Item will become "exempt". But, we need it to
      *           flow thru this program...which excludes Exempt items. So, Alice had Damon G.
      *           change the Item Structure of some items so that we can now include the
      *           Exempt Items in this logic.
      *
      * 08/19/10  LeAnne Ramsey  (E940)
      *           Per Damon Ginther, retrieve the ProductionYield% instead of the SalesYield%
      *           from the BOM file for Items: 12721, 12730, 12740, 79810
      *           Damon is changing the SalesYield% to be more accurate for these 4 Items.
      *           BUT, he does not want the split calcs for the Items (RO229) to use the new %'s.
      *           He wants the split calcs in RO229 to now use the ProductionYield% for these
      *           Items..(Note: The ProdYield%s are the same as the old SalesYield%.)
      *
      *           Note: We will still store this % in our SalesYield% field in ROP122-ByProduct
      *                 Detail; the benefits of adding ProductionYield% as a new field were
      *                 insignificant when compared to the problems that it would cause.
      *
      *           We intend that this change ONLY affect the split calcs; Damon wants all other
      *           Meat Costing logic to continue to use the SalesYield% for these 4 Items.
      *
      * 01/13/11  LeAnne Ramsey  (E1274)
      *           Per Damon Ginther, retrieve the ProductionYield% instead of the SalesYield%
      *           from the BOM file for Item 28063.
      *           We will treat this the same way as we did the change above for E940.
      *           The actual splits will be in new program RO228.
      *
      * 02/07/11  LeAnne Ramsey  (E1298)
      *           Damon G. is having us use a different formula when calc'ing Start Weight
      *           for Items where the Yield% is not 100%. (See $start)
      *           (Note: Companion code was added to RO222.)
      *
      * 09/19/11  LeAnne Ramsey (E1748)
      *           Damon G. had us remove all hardcoded logic for Items 12721, 12730, 12740 and
      *           79810. He has changed the SalesYld% for these in the BOM; so, they flow thru
      *           MeatCosting without any special processing.
      *
      * 10/04/19  Rose Centonze WHD 52709- TFS R15570
      *           Dont output Other Cost to ROP122 per Damon Ginther - OMIT FROM BYPRODUCT CALCS
      *
      * 11/05/24  Santosh Patil INC1030380  S130380
      *           1. Logic to set values for fields YDSPUSLB and YDTPUSLB to be changed.
      *           2. Both pump_rate and yield_rate to be considered for Produced Start Wgt.
      ***************************************************************************************
      * FILE SPECIFICATION
      ***************************************************************************************
      *
     fombyrelc  if   e           k disk
      *  Item default
      *
      *
     fomfarel1  if   e           k disk
      *  Product class
      *
      *
     fpdiorel4  if   e           k disk
      *  Item bill of material
      *  (LF selects Active/Produced Items)
      *
      *
     Fpoaxcpl1  if   e           k disk
      *  Item standard cost
      *
      *
     Fppaorel1  if   e           k disk
      *  TF margin adjustment group detail
      *  (records selected with Open Query)
      *
      *
     frop122    o    e           k disk
      *  Byproduct Detail
      *
      /eject
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Workfields
      *
     D wkrate          s              9  6
     D wkpump          s              9  6
      *
      * Parms
      *
     d xxmurt          s              9  6
     d xxmupc          s              7  4
     D xxwedt          s              8  0
     D xxitcd          s              7  0
     D xxfzfl          s              1
     D xxcredit        s              1    inz(yes)
      *
     D xxspuam         s             15  6
     D xxspulb         s             15  4
      *
     D xxtpuam         s             15  6
     D xxtpulb         s             15  4
      *
     D xxaslam         s             15  6
     D xxapuam         s             15  6
     D xxasllb         s             15  4
     D xxapulb         s             15  4
      *
     D xxcgcd          s                   like(ydcgcd)
     D xxtfclcd        s                   like(ydtfclcd)
     D xxmixgrp        s                   like(ydmixgrp)
     D xxistycd        s                   like(ydistycd)
     D xxisgrcd        s                   like(ydisgrcd)
     D xxisclcd        s                   like(ydisclcd)
     D xxsumlev        s                   like(ydsumlev)
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *---------------------------------------------------------------
      * Local data area
      *---------------------------------------------------------------
      *
     Dlda             uds                  dtaara(*lda)
      *
     D  ldwedt                29     36  0
     D  ldwesyn               37     43  0
      *
     D  ldfzfl                81     81
     D  ldcono                82     84  0
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      **********************************************************************************
      * Mainline
      **********************************************************************************
      *
      * Process each record in the TF Margin Adjustment Group Detail file selected
      * by the open query (only records with a Meat Cost Group are selected).
      *
     C                   dou       *in90 = *on                                  Main do
     C                   read      ppaorel1                               90
     C                   if        *in90 = *off                                 If not EOF
      *
      * Detail processing:
      *    1) Retrieve all Active FG Items for this:
      *         TF Classification/IS Type/IS Group/IS Class
      *    2) Write a Byproduct Detail record for each FG Item
      *
     C     key03         setll     ombyrelc
      *
     C                   dou       *in91 = *on                                  Do items
     C     key03         reade     ombyrelc                               91
     C                   if        *in91 = *off and
     C                             byvsst = 'A' and
     C                             byn0cd = 'FG '
     C                   exsr      $wrt122
     C                   endif
     C                   enddo                                                  Do items
      *
     C                   endif                                                  If not EOF
     C                   enddo                                                  Main do
      *
     C                   seton                                        lr
      /eject
      *-----------------------------------------------------------------------------------
      * Write an Item record to the Byproduct Detail file
      *-----------------------------------------------------------------------------------
      *
     C     $wrt122       begsr
      *
      * LDA
     C                   z-add     ldwedt        ydwedt
      * Hardcoded
     C                   move      yes           ydsafl
     C                   move      no            ydexfl
      *
      * TF Margin Adjustment Group Detail
     C                   move      aosvsx        ydtfcgcd
     C                   move      aohfaa        ydcgcd
     C                   move      aoi1t1        ydmixgrp
      *
      *      Mix Flag override
     C                   if        aosvsx = 'BP'
     C                   move      aoswsx        ydmixfl
     C                   else
     C                   move      no            ydmixfl
     C                   endif
      * Item Default
     C                   move      bytcst        ydtfclcd
     C                   z-add     byrgnb        ydistycd
     C                   z-add     byrhnb        ydisgrcd
     C                   z-add     byrinb        ydisclcd
     C                   z-add     byhgcd        yditcd
     C                   movel     byn0cd        ydittycd
      *
      * Retrieve Description for Item Structure Class Code.
      *
     C     ydisclcd      chain     omfarel1                           92
     C                   if        *in92 = *off
     C                   eval      ydisclds = fadetx
     C                   endif
      *
      * Populate the Meat Cost Sub-Group code.  All items will have the same
      * Sub-Group code as the MC Group Code---except the SRLN items.
      * We use the Sub-Group code to designate if the SRLN is BNIN or BNLS.
      * If the IS Structure Class is 850 it is considered BNIN, otherwise
      * it is BNLS.
      *
     C                   eval      ydsgcd = ydcgcd
      *
     C                   if        ydcgcd = 'SRLN'
     C                   if        ydisclcd = 850
     C                   eval      ydsgcd = 'BNIN'
     C                   else
     C                   eval      ydsgcd = 'BNLS'
     C                   endif
     C                   endif
      *
      * Retrieve Item Standard Cost and flip to "per pound" values.
      * Key: 1) company
      *      2) item code
      *      3) synon week-ending date
      *
     C     key01         chain     poaxcpl1                           92
     C                   if        *in92 = *off
     C                   eval(h)   ydpco = axedpr/100
     C                   eval(h)   ydlco = axeepr/100
     C                   eval(h)   ydico = axefpr/100
     C* r15570           eval(h)   ydoco = axegpr/100
     C                   eval      ydoco = 0
     C                   endif
      *
      * Retrieve Values for the Item/Week and calculate Amounts
      *
     C                   exsr      $values
      *
      * Calc Start Weight
     C                   exsr      $start
      *
      * Call generic program to retrieve the Summary Level
      *
     C                   call      'RO801'
     C                   parm      ydcgcd        xxcgcd
     C                   parm      ydtfclcd      xxtfclcd
     C                   parm      ydistycd      xxistycd
     C                   parm      ydisgrcd      xxisgrcd
     C                   parm      ydisclcd      xxisclcd
     C                   parm      ydmixgrp      xxmixgrp
     C     ydsumlev      parm      *blank        xxsumlev
      *
      *
      * Write a Byproduct Detail record for this Item.
      *
     c                   write     ydrec
     C                   clear                   ydrec
      *
     C                   endsr
      /eject
      *-----------------------------------------------------------------------------------
      * Calc Start Weight
      *-----------------------------------------------------------------------------------
      *
      * Retrieve Sales Yield and Pump Percent from BOM file and calc Start Weight.
      *
      *
     C     $start        begsr
      *
      * Key values: Company
      *     Item
      *     Item
      *
     C     key02         chain     pdiorel4                           92
     C                   if        *in92 = *off                                 If BOM
      *
      * Note: As of January 2011, Damon is having us retrieve ProductionYield%
      *       instead of SalesYield% for Item 28063
      *
      * SalesYld or ProdYld%
      *
     C                   if        yditcd = 28063
     C                   z-add     iobppr        ydsypc
     C                   eval      wkrate = iobppr / 100
     C                   else
     C                   z-add     iobopr        ydsypc
     C                   eval      wkrate = iobopr / 100
     C                   endif
      * Pump%
     C                   z-add     iobmy2        ydpumppc
     C                   eval      wkpump = (iobmy2 / 100) + 1
      *
      * Calc Start Weight
      * Note: As of February 2011, Damon is having us use 2 different calcs for
      *       StartWgt. We will use the old way when SalesYld%=100% or Pump%=0.
      *       Otherwise, we will use the 'new' way.
      *       (Companion changes were made in RO222.)
      *
     C                   if        wkrate <> 0 and wkpump <> 0                  If Yld/Pump
      *
      * S130380 - Changes Begin  - Old logic is commented. Both pump_rate and
      *           yield_rate is considered for Produced Start Weight.
     C*                  select
      *         Old way
     C*                  when      wkrate = 1 or wkpump = 1
     C*                  eval(h)   ydspuslb = ((ydspulb / wkrate) / wkpump)
     C*                  eval(h)   ydtpuslb = ((ydtpulb / wkrate) / wkpump)
     C*                  eval(h)   ydapuslb = ydspuslb + ydtpuslb
     C*                  other
      *         New way
     C*                  eval(h)   ydspuslb = (ydspulb / wkpump)
     C*                  eval(h)   ydtpuslb = (ydtpulb / wkpump)
     c*                  eval(h)   ydapuslb = ydspuslb + ydtpuslb
     C*                  endsl
      *
             /free
                    ydspuslb = ((ydspulb / wkpump) / wkrate) ;
                    ydtpuslb = ((ydtpulb / wkpump) / wkrate) ;
                    ydapuslb = ydspuslb + ydtpuslb   ;
             /end-free

      * S130380 Changes End
     C                   endif                                                  If Yld/Pump
     C                   endif                                                  If BOM
      *
     C                   endsr
      /eject
      *-----------------------------------------------------------------------------------
      * Retrieve/accumulate Pounds and Dollars
      *-----------------------------------------------------------------------------------
      *
     C     $values       begsr
      *
      * Call generic program to retrieve/accumulate values for Item/Week.
      *
     C                   call      'RO800'
     C                   parm      xxcredit      xxcredit
     C                   parm      ldwedt        xxwedt
     C                   parm      yditcd        xxitcd
     C                   parm      ldfzfl        xxfzfl
     C                   parm      0             xxmurt
     C     ydmupc        parm      0             xxmupc
     C     ydspulb       parm      0             xxspulb
     C     ydspuam       parm      0             xxspuam
     C     ydtpulb       parm      0             xxtpulb
     C     ydtpuam       parm      0             xxtpuam
     C                   parm      0             xxasllb
     C                   parm      0             xxaslam
     C     ydapulb       parm      0             xxapulb
     C     ydapuam       parm      0             xxapuam
      *
      * Calculate cost amounts: Packaging, Labor, Ingredient, Other
      *    R15570 exclude other cost from all calcs
      *             AGG:
     C                   eval(h)   ydapcoam = ydpco * ydapulb
     C                   eval(h)   ydalcoam = ydlco * ydapulb
     C                   eval(h)   ydaicoam = ydico * ydapulb
     C* R15570           eval(h)   ydaocoam = ydoco * ydapulb
     C                   eval      ydaocoam = 0
      *             SBD:
     C                   eval(h)   ydspcoam = ydpco * ydspulb
     C                   eval(h)   ydslcoam = ydlco * ydspulb
     C                   eval(h)   ydsicoam = ydico * ydspulb
     C* R15570           eval(h)   ydsocoam = ydoco * ydspulb
     C                   eval      ydsocoam = 0
      *             TF:
     C                   eval(h)   ydtpcoam = ydpco * ydtpulb
     C                   eval(h)   ydtlcoam = ydlco * ydtpulb
     C                   eval(h)   ydticoam = ydico * ydtpulb
     C* R15570           eval      ydtocoam = ydoco * ydtpulb
     C                   eval(h)   ydtocoam = 0
      *
      *
      * If Produced Pounds are not zero, calculate:
      *   1) Produced Price/LB
      *   2) Net Produced Price/LB
      *
     C                   if        ydapulb <> 0
     C     ydapuam       div(h)    ydapulb       ydpupr
     C                   eval(h)   ydnpupr = (((ydapuam - ydapcoam - ydalcoam
     C                                                   - ydaicoam - ydaocoam)
     C                                        * xxmurt) / ydapulb)
     C                   endif
      *
      * Calculate Net Produced Amounts
      *
     C                   eval(h)   ydsnpuam = ydnpupr * ydspulb
     C                   eval(h)   ydtnpuam = ydnpupr * ydtpulb
     C                   eval(h)   ydanpuam = ydnpupr * ydapulb
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    ldcono
     C                   kfld                    yditcd
     C                   kfld                    ldwesyn
      *
     C     key02         klist
     C                   kfld                    ldcono
     C                   kfld                    yditcd
     C                   kfld                    yditcd
      *
     C     key03         klist
     C                   kfld                    aoflaa
     C                   kfld                    aorgnb
     C                   kfld                    aorhnb
     C                   kfld                    aorinb
      *
     C                   endsr
      /eject
