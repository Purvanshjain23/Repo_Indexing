// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLKSPVR
// ?Date: 14.08.2025 Time: 02:54:33
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// LCL.Record Found USR = CND.Record Not Found
LCL.Record_Found_USR = 'N';

EXECUTE FUNCTION(Vry BO Exists         RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1282090;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// LCL.Record Found USR = CND.Record Found
LCL.Record_Found_USR = 'Y';

ENDIF;

//?USER: Load screen

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.Oms_Name);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


EXECUTE FUNCTION(Rtv Buy Ord InfoAllPrLRT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1282046;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOH_Buy_Order_Date);
PARAMETER(DTL.BOH_Kill_Date);
PARAMETER(DTL.BOH_Payment_Type);
PARAMETER(DTL.BOH_Buy_Order_Type);
PARAMETER(DTL.BOH_Market_Add_Deduct);
PARAMETER(DTL.BOH_Status);
PARAMETER(DTL.BOH_Delv_Plan_Printed);
PARAMETER(DTL.BOH_Quote_Price_Type);
PARAMETER(DTL.BOH_Quoted_Base_Mkt_Price);
PARAMETER(DTL.BOH_Commodity_Market_Code);
PARAMETER(DTL.BOH_Commodity_Price_Group);
PARAMETER(DTL.BOH_Market_Date_Method);
PARAMETER(DTL.PPWS_Company_Number);
PARAMETER(DTL.CW_Year);
PARAMETER(DTL.CW_Week_Number);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.PC_Contract_Code);
PARAMETER(DTL.PSC_Sub_Contract_Code);
PARAMETER(DTL.GN_Genetic_Code);
PARAMETER(DTL.PO_Option_Code);
PARAMETER(DTL.CMP_Program_Code);
PARAMETER(DTL.HB_Buyer_Code);
PARAMETER(DTL.RS_Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PD_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.PL_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Validation Rules
DO;

//?Buy Order Load Weight can not exists
EXECUTE FUNCTION(Val Buy Oder *all     RT) TYPE(RTVOBJ) FILE(PKEJCPP)           AB1282278;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prd/Loc can not be changed due to a Truck has arrived - Buy Order Load Weig
ERROR(PRK1189);
MSGPARM(DTL.BOH_Company_Number);
MSGPARM(DTL.BOH_Buy_Order_Number);

// LCL.Error Type Found = CND.Critical Error
LCL.Error_Type_Found = 'Y';

ENDIF;

//?Tattoo Header validate
EXECUTE FUNCTION(Vry Tattoo for this BO RT) TYPE(RTVOBJ) FILE(PKA1CPP)          AB1282071;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 QUIT;

}


//?Do not allow a producer/location to be change if there
//?are any tattoo number in the system
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prd/Loc can not be changed due to a Tattoo is found'
ERROR(PRK1187);
MSGPARM(DTL.BOH_Company_Number);
MSGPARM(DTL.BOH_Buy_Order_Number);

// LCL.Error Type Found = CND.Critical Error
LCL.Error_Type_Found = 'Y';

ENDIF;

//?No Buy Order is found
CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'This delivery schedule slot does not have a buy order.  Clear the slot and
ERROR(PRK1190);

ENDIF;

ENDDO;

//?USER: Validate fields

// LCL.Error Type Found = CND.No
LCL.Error_Type_Found = 'N';

CASE;

// IF DTL.*CMD key is CF04
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Producer Code         USR
IF PGM.*Cursor_field = DTL.Producer_Code_USR;

// OR PGM.*Cursor field <IS> DTL.Location Code USR
OR PGM.*Cursor_field = DTL.Location_Code_USR;

// Call program Sel Producer Loc      SR.
CALL PROGRAM(Sel Producer Loc      SR) ('PKKMSRR');
PARAMETER(DTL.Producer_Code_USR);
PARAMETER(DTL.Location_Code_USR);

ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
PARAMETER(DTL.Producer_Code_USR);
PARAMETER(DTL.Name_USR);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Location Name DRV) TYPE(DRVFLD)                                AB1233128;
PARAMETER(DTL.Location_Name_DRV);
PARAMETER(DTL.Producer_Code_USR);
PARAMETER(DTL.Location_Code_USR);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PL_Location_Code);
 PARAMETER(PAR.Location_Name_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?Validation Rules
DO;

//?03/06/24 SP S309639-START
EXECUTE FUNCTION(Rtv Chk for Deliv Trackin) TYPE(RTVOBJ) FILE(PLAFCPP)          AB1372089;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(LCL.STS_Deliv_Tracking_Exist);
{
 //?USER: Initialize routine

 // PAR.STS: Deliv Tracking Exist = CND.No
 PAR.STS_Deliv_Tracking_Exist = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.DT Farm Site Code is Entered
 IF DB1.DT_Farm_Site_Code > *ZERO;

 // OR DB1.DT Building is Entered
 OR DB1.DT_Building <> *BLANK;

 // OR DB1.DT Room is Entered
 OR DB1.DT_Room <> *BLANK;

 // OR DB1.DT Loading Crew is Entered
 OR DB1.DT_Loading_Crew <> *BLANK;

 // OR DB1.DT Trucker Code HPS is Entered
 OR DB1.DT_Trucker_Code_HPS <> *BLANK;

 // OR DB1.DT Driver is Entered
 OR DB1.DT_Driver <> *BLANK;

 // OR DB1.DT Truck ID is Entered
 OR DB1.DT_Truck_ID <> *BLANK;

 // OR DB1.DT Trailer ID is Entered
 OR DB1.DT_Trailer_ID <> *BLANK;

 // OR NOT DB1.CHR Code is Not Entered
 OR ! DB1.CHR_Code = *BLANK;

 // OR NOT DB1.DT Transportation Office is *blank
 OR ! DB1.DT_Transportation_Office = *BLANK;

 // OR DB1.DT Route Start Time is Entered
 OR DB1.DT_Route_Start_Time > *ZERO;

 // OR DB1.DT Route Start Date is Entered
 OR DB1.DT_Route_Start_Date <> *ZERO;

 // OR DB1.DT Arrive @ Farm Time is Entered
 OR DB1.DT_Arrive_@_Farm_Time > *ZERO;

 // OR DB1.DT Arrive @ Farm Date is Entered
 OR DB1.DT_Arrive_@_Farm_Date <> *ZERO;

 // OR DB1.DT Start Loading Time is Entered
 OR DB1.DT_Start_Loading_Time > *ZERO;

 // OR DB1.DT Start Loading Date is Entered
 OR DB1.DT_Start_Loading_Date <> *ZERO;

 // OR DB1.DT Leave Farm Time is Entered
 OR DB1.DT_Leave_Farm_Time > 0;

 // OR DB1.DT Leave Farm Date is Entered
 OR DB1.DT_Leave_Farm_Date <> 0;

 // OR DB1.DT Arrive @ Plant Time is Entered
 OR DB1.DT_Arrive_@_Plant_Time > *ZERO;

 // OR DB1.DT Arrive @ Plant Date is Entered
 OR DB1.DT_Arrive_@_Plant_Date <> *ZERO;

 // OR DB1.DT TrkScl Weigh-In Time is Entered
 OR DB1.DT_TrkScl_Weigh_In_Time > *ZERO;

 // OR DB1.DT TrkScl Weigh-In Date is Entered
 OR DB1.DT_TrkScl_Weigh_In_Date <> *ZERO;

 // OR DB1.DT To Recv Dock Time is Entered
 OR DB1.DT_To_Recv_Dock_Time > *ZERO;

 // OR DB1.DT To Recv Dock Date is Entered
 OR DB1.DT_To_Recv_Dock_Date <> *ZERO;

 // OR DB1.DT Start Unloading Time is Entered
 OR DB1.DT_Start_Unloading_Time > *ZERO;

 // OR DB1.DT Start Unloading Date is Entered
 OR DB1.DT_Start_Unloading_Date <> *ZERO;

 // OR DB1.DT TrkScl Weigh-Out Time is Entered
 OR DB1.DT_TrkScl_Weigh_Out_Time > *ZERO;

 // OR DB1.DT TrkScl Weigh-Out Date is Entered
 OR DB1.DT_TrkScl_Weigh_Out_Date <> *ZERO;

 // PAR.STS: Deliv Tracking Exist = CND.Yes
 PAR.STS_Deliv_Tracking_Exist = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF LCL.STS: Deliv Tracking Exist is Yes
IF LCL.STS_Deliv_Tracking_Exist = 'Y';

// Send error message - 'Prd/Loc can not be changed due to a Truck has arrived - Delivery Tracking''
ERROR(PRK1188);
MSGPARM(DTL.BOH_Company_Number);
MSGPARM(DTL.BOH_Buy_Order_Number);

// LCL.Error Type Found = CND.Critical Error
LCL.Error_Type_Found = 'Y';

ENDIF;

//?03/06/24 SP S309639-END
//?Buy Order Load Weight can not exists
EXECUTE FUNCTION(Val Buy Oder *all     RT) TYPE(RTVOBJ) FILE(PKEJCPP)           AB1282278;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prd/Loc can not be changed due to a Truck has arrived - Buy Order Load Weig
ERROR(PRK1189);
MSGPARM(DTL.BOH_Company_Number);
MSGPARM(DTL.BOH_Buy_Order_Number);

// LCL.Error Type Found = CND.Critical Error
LCL.Error_Type_Found = 'Y';

ENDIF;

//?Tattoo Header validate
EXECUTE FUNCTION(Vry Tattoo for this BO RT) TYPE(RTVOBJ) FILE(PKA1CPP)          AB1282071;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 QUIT;

}


//?Do not allow a producer/location to be change if there
//?are any tattoo number in the system
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prd/Loc can not be changed due to a Tattoo is found'
ERROR(PRK1187);
MSGPARM(DTL.BOH_Company_Number);
MSGPARM(DTL.BOH_Buy_Order_Number);

// LCL.Error Type Found = CND.Critical Error
LCL.Error_Type_Found = 'Y';

ENDIF;

//?No Buy Order is found
CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'This delivery schedule slot does not have a buy order.  Clear the slot and
ERROR(PRK1190);

ENDIF;

ENDDO;

//?CALC: Screen function fields

//?Get TO Producer Name
EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
PARAMETER(DTL.Producer_Code_USR);
PARAMETER(DTL.Name_USR);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Get TO Location name
EXECUTE FUNCTION(Location Name DRV) TYPE(DRVFLD)                                AB1233128;
PARAMETER(DTL.Location_Name_DRV);
PARAMETER(DTL.Producer_Code_USR);
PARAMETER(DTL.Location_Code_USR);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PL_Location_Code);
 PARAMETER(PAR.Location_Name_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: User defined action

// LCL.Error Type Found = CND.No
LCL.Error_Type_Found = 'N';

//?Perform routine that will get the contract and sub contract informaiton
//?based on the information using the new producer and location code
//?then pass this into the edit function and allos the edit function
//?perform the updating and and the valadation for the buy order header
//?Repeat this validation to make sure timming that a
//?tattoo does not exists
//?Validation Rules
DO;

//?Delivery Tracking can not exists
//?Buy Order Load Weight can not exists
EXECUTE FUNCTION(Val Buy Oder *all     RT) TYPE(RTVOBJ) FILE(PKEJCPP)           AB1282278;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prd/Loc can not be changed due to a Truck has arrived - Buy Order Load Weig
ERROR(PRK1189);
MSGPARM(DTL.BOH_Company_Number);
MSGPARM(DTL.BOH_Buy_Order_Number);

// LCL.Error Type Found = CND.Critical Error
LCL.Error_Type_Found = 'Y';

ENDIF;

//?Tattoo Header validate
//?Repeat this validation to make sure timming that a
//?tattoo does not exists
EXECUTE FUNCTION(Vry Tattoo for this BO RT) TYPE(RTVOBJ) FILE(PKA1CPP)          AB1282071;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 QUIT;

}


//?Do not allow a producer/location to be change if there
//?are any tattoo number in the system
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prd/Loc can not be changed due to a Tattoo is found'
ERROR(PRK1187);
MSGPARM(DTL.BOH_Company_Number);
MSGPARM(DTL.BOH_Buy_Order_Number);

// LCL.Error Type Found = CND.Critical Error
LCL.Error_Type_Found = 'Y';

ENDIF;

ENDDO;

//?Do not allow a producer/location to be change if there
//?are any tattoo number in the system
CASE;

// IF LCL.Error Type Found is Not Critical Error
IF LCL.Error_Type_Found = 'N'/'W';

//?There are no delivery tracking
//?There are no buy order load weight
//?There are no tattoo numbers for this buy order
//?If a Buy Order record is found then allow the next
//?screen to appear, if not then change the delivery schedule only
CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// Call program Chg BOH/BOL f/DelvSch XF.
CALL PROGRAM(Chg BOH/BOL f/DelvSch XF) ('PLKTXFR');
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOH_Buy_Order_Date);
PARAMETER(DTL.BOH_Kill_Date);
PARAMETER(DTL.Producer_Code_USR);
PARAMETER(DTL.Location_Code_USR);

// Call program Edt Buy Order and Load ET.
CALL PROGRAM(Edt Buy Order and Load ET) ('PKAOETR');
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(LCL.Head_Total_USR);
PARAMETER(DTL.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'This delivery schedule slot does not have a buy order.  Clear the slot and
ERROR(PRK1190);

ENDIF;

ENDIF;

