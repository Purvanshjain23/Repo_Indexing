// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POSVPVR
// ?Date: 14.08.2025 Time: 03:38:56
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?RMC 7/28/16 default Hold to Yes
EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('C/S');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.PRT Printer Device = CND.Not entered
PAR.PRT_Printer_Device = *BLANK;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

//?USER: Load screen

CASE;

// IF DTL.Company Number CDE is Equal to zero
IF DTL.Company_Number_CDE = *ZERO;

// DTL.Company Number CDE = PAR.Company Number
DTL.Company_Number_CDE = PAR.Company_Number;

ENDIF;

EXECUTE FUNCTION(RTV Company Name Only  RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1100959;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.Company_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Validate fields

//?F4=Prompt
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Company Number CDE
IF PGM.*Cursor_field = DTL.Company_Number_CDE;

// AND PAR.Allow Multi-Company is yes
AND PAR.Allow_Multi_Company = 'Y';

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(DTL.Company_Number_CDE);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> DTL.Pckg Group Category
IF PGM.*Cursor_field = DTL.Pckg_Group_Category;

// Call program Zzz Pckgng Grp Ctgry  SL.
CALL PROGRAM(Zzz Pckgng Grp Ctgry  SL) ('PORUSRR');
PARAMETER(DTL.Pckg_Group_Category);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> DTL.Pckg Reporting Group
IF PGM.*Cursor_field = DTL.Pckg_Reporting_Group;

// Call program Sel Pckg Reporting GrpSL.
CALL PROGRAM(Sel Pckg Reporting GrpSL) ('PORSSRR');
PARAMETER(DTL.Pckg_Reporting_Group);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> DTL.Packaging Item Code
IF PGM.*Cursor_field = DTL.Packaging_Item_Code;

// Call program Sel Packaging Item    SR.
CALL PROGRAM(Sel Packaging Item    SR) ('POFRSRR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Packaging_Item_Code);

ENDIF;

ENDIF;

CASE;

// IF DTL.Date From             USR GT DTL.Date To               USR
IF DTL.Date_From_USR > DTL.Date_To_USR;

// Send error message - 'From date exceeds to date.  Please re-enter.'
ERROR(USR0319);
MSGPARM(DTL.Date_From_USR);

ENDIF;

CASE;

// IF DTL.Date To               USR GT JOB.*Job date
IF DTL.Date_To_USR > JOB.*Job_date;

// Send error message - 'To Date cannot exceed today's date. Please reenter.'
ERROR(USR2223);

ENDIF;

//?Val Group Category
CASE;

// IF DTL.Pckg Group Category NE WRK.Blank 6 USR
IF DTL.Pckg_Group_Category <> WRK.Blank_6_USR;

EXECUTE FUNCTION(Rtv Pckgng Grp Desc   RT) TYPE(RTVOBJ) FILE(POCCREP)           AC1652185;
PARAMETER(DTL.Pckg_Group_Category);
PARAMETER(DTL.Pckg_Group_Category_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF DTL.Pckg Group Category Desc EQ WRK.Blank for 30          USR
IF DTL.Pckg_Group_Category_Desc = WRK.Blank_for_30_USR;

// Send error message - 'Packaging Group Category not found.'
ERROR(USR3173);
MSGPARM(DTL.Pckg_Group_Category);

ENDIF;

ENDIF;

//?Val Reporting Group
CASE;

// IF DTL.Pckg Reporting Group NE WRK.Blank 6 USR
IF DTL.Pckg_Reporting_Group <> WRK.Blank_6_USR;

EXECUTE FUNCTION(Rtv Pckng Reprtng Grp RT) TYPE(RTVOBJ) FILE(POCBREP)           AC1652186;
PARAMETER(DTL.Pckg_Reporting_Group);
PARAMETER(DTL.Pckg_Group_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF DTL.Pckg Group Description EQ WRK.Blank for 30          USR
IF DTL.Pckg_Group_Description = WRK.Blank_for_30_USR;

// Send error message - 'Packaging Reporting Group not found.'
ERROR(USR3171);
MSGPARM(DTL.Pckg_Reporting_Group);

ENDIF;

ENDIF;

//?Val Packaging Item
CASE;

// IF DTL.Packaging Item Code NE WRK.Blank for 30          USR
IF DTL.Packaging_Item_Code <> WRK.Blank_for_30_USR;

EXECUTE FUNCTION(RTV Packaging Item    RT) TYPE(RTVOBJ) FILE(POARREP)           AC1602514;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Packaging_Item_Code);
PARAMETER(DTL.Pckg_Item_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.Pckg Item Description EQ WRK.Blank for 30          USR
IF DTL.Pckg_Item_Description = WRK.Blank_for_30_USR;

// Send error message - 'Packaging Item not found.'
ERROR(USR2982);
MSGPARM(DTL.Packaging_Item_Code);

ENDIF;

ENDIF;

//?CALC: Screen function fields

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Condition Desc. 1  USR = Condition name of DTL.Pckg Type Class
DTL.Condition_Desc_1_USR = RTVCND(DTL.Pckg_Type_Class);

//?USER: User defined action

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Hold Output Sts = CND.*YES
PAR.PRT_Hold_Output_Sts = *YES;

// PAR.PRT Save Output Sts = CND.*YES
PAR.PRT_Save_Output_Sts = *YES;

// PAR.PRT Number of Copies = CND.One
PAR.PRT_Number_of_Copies = 1;

// PAR.PRT Printer Device = CON.QPRINT2
PAR.PRT_Printer_Device = 'QPRINT2';

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Packaging Variance w/FG');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);
PARAMETER(*MISSING);
PARAMETER(1);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// LCL.Company Number Alpha = CVTVAR(DTL.Company Number CDE)
LCL.Company_Number_Alpha = CVTVAR(DTL.Company_Number_CDE);

// WRK.Date From Alpha       USR = CVTVAR(DTL.Date From             USR)
WRK.Date_From_Alpha_USR = CVTVAR(DTL.Date_From_USR);

// WRK.Date To Alpha         USR = CVTVAR(DTL.Date To               USR)
WRK.Date_To_Alpha_USR = CVTVAR(DTL.Date_To_USR);

CASE;

// IF DTL.Report Type f/Pkg     USR is Sum FG Daily Prod
IF DTL.Report_Type_f_Pkg_USR = '1';

// LCL.Program name USR = CON.POSRPFR
LCL.Program_name_USR = 'POSRPFR';

// LCL.Program Name$ USR = CON.POSRPFR$
LCL.Program_Name$_USR = 'POSRPFR$';

// IF DTL.Report Type f/Pkg     USR is Detail FG Daily Prod
IF DTL.Report_Type_f_Pkg_USR = '2';

// LCL.Program name USR = CON.POTOPFR
LCL.Program_name_USR = 'POTOPFR';

// LCL.Program Name$ USR = CON.POTOPFR$
LCL.Program_Name$_USR = 'POTOPFR$';

ENDIF;

// WRK.Email addr 1 = DTL.Email Address
WRK.Email_addr_1 = DTL.Email_Address;

// Execute function *Move-Right.
EXECUTE FUNCTION(*Move-Right) TYPE(EXCUSRSRC) ('PDUIUFR');
PARAMETER(WRK.Email_Addr_2);
PARAMETER(DTL.Email_Address);
{
 C                     MOVE #IPANA    #OO9NA
}


// Execute command - 'Submit Pkging Variance'
EXECUTE COMMAND(USR3189);
PARAMETER(WRK.Date_From_Alpha_USR);
PARAMETER(WRK.Date_To_Alpha_USR);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(DTL.Report_Type);
PARAMETER(DTL.Packaging_Item_Code);
PARAMETER(DTL.Pckg_Reporting_Group);
PARAMETER(DTL.Pckg_Group_Category);
PARAMETER(DTL.Pckg_Type_Class);
PARAMETER(LCL.Program_name_USR);
PARAMETER(LCL.Company_Number_Alpha);
PARAMETER(WRK.Email_addr_1);
PARAMETER(WRK.Email_Addr_2);

ENDIF;

// DTL.Pckg Group Category Desc = CON.*BLANK
DTL.Pckg_Group_Category_Desc = *BLANK;

// DTL.Pckg Group Description = CON.*BLANK
DTL.Pckg_Group_Description = *BLANK;

// DTL.Pckg Item Description = CON.*BLANK
DTL.Pckg_Item_Description = *BLANK;

// DTL.Condition Desc. 1  USR = CON.*BLANK
DTL.Condition_Desc_1_USR = *BLANK;

