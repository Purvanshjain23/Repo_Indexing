// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PONMPFR
// ?Date: 14.08.2025 Time: 12:06:16
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?** NOTE: When recompiling, ovrprtf to OVERLAY(prkplib/prkexp)
//?USER: Print required level headings

CASE;

IF NEW Company_Number;
CASE;

// IF CUR.ED Export Certificate Nbr NE WRK.ZERO
IF CUR.ED_Export_Certificate_Nbr <> WRK.ZERO;

// WRK.ED Export Certificate Nbr = DB1.ED Export Certificate Nbr
WRK.ED_Export_Certificate_Nbr = DB1.ED_Export_Certificate_Nbr;

// CUR.Text USR 4 = DB1.ED USDA Cert Nbr US
CUR.Text_USR_4 = DB1.ED_USDA_Cert_Nbr_US;

CASE;

// IF CUR.Text USR 4 is Not Entered
IF CUR.Text_USR_4 = *BLANK;

//?S00591 RMC 12/10/08 get form letters from company value
EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(0);
PARAMETER(0);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(NLL.Trans_Contol_AS400_Plant);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Trans_Contol_AS400_Plant);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Get Fresh /frozen to get which form name to use    RMC 12/10/08
CASE;

// IF LCL.Warehouse Type is Fresh
IF LCL.Warehouse_Type = 'FR';

// WRK.Company Value Code = CON.MPGFRLTR
WRK.Company_Value_Code = 'MPGFRLTR';

//?Get Fresh /frozen to get which form name to use    RMC 12/10/08
// IF LCL.Warehouse Type is Frozen
IF LCL.Warehouse_Type = 'FZ';

// WRK.Company Value Code = CON.MPGFZLTR
WRK.Company_Value_Code = 'MPGFZLTR';

//?Get Fresh /frozen to get which form name to use    RMC 12/10/08
// IF *OTHERWISE
IF *OTHERWISE;

//?default to something
// WRK.Company Value Code = CON.MPGFRLTR
WRK.Company_Value_Code = 'MPGFRLTR';

ENDIF;

EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(DB1.Company_Number);
PARAMETER(WRK.Company_Value_Code);
PARAMETER(WRK.USR_Old_New_prtf_designtn);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CUR.Text USR 4 = CONCAT(WRK.USR Old/New prtf designtn,CON.-,CON.*ZERO)
CUR.Text_USR_4 = WRK.USR_Old_New_prtf_designtn + '-' (*ZERO);

ENDIF;

ENDIF;

// WRK.ED Shipping Marks Txt = CUR.ED Shipping Marks Txt
WRK.ED_Shipping_Marks_Txt = CUR.ED_Shipping_Marks_Txt;

//?New 7/9/03
CASE;

// IF DB1.ED Document Date is Not entered
IF DB1.ED_Document_Date = *ZERO;

// LCL.Date From Alpha       USR = CVTVAR(JOB.*Job date)
LCL.Date_From_Alpha_USR = CVTVAR(JOB.*Job_date);

//?New 7/9/03
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Date From Alpha       USR = CVTVAR(DB1.ED Document Date)
LCL.Date_From_Alpha_USR = CVTVAR(DB1.ED_Document_Date);

ENDIF;

// LCL.Year 2A USR = SUBSTRING(LCL.Date From Alpha       USR,CON.2,CON.2)
LCL.Year_2A_USR = SUBSTRING(LCL.Date_From_Alpha_USR:2:2);

//?Setup up 19nn or 20nn
CASE;

// IF LCL.Year 2A USR is >=40
IF LCL.Year_2A_USR >= '40';

// LCL.Year USR = CONCAT(CON.19,LCL.Year 2A USR,CON.*ZERO)
LCL.Year_USR = '19' + LCL.Year_2A_USR (*ZERO);

//?Setup up 19nn or 20nn
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Year USR = CONCAT(CON.20,LCL.Year 2A USR,CON.*ZERO)
LCL.Year_USR = '20' + LCL.Year_2A_USR (*ZERO);

ENDIF;

// LCL.Month MM/  3A = SUBSTRING(LCL.Date From Alpha       USR,CON.4,CON.2)
LCL.Month_MM_3A = SUBSTRING(LCL.Date_From_Alpha_USR:4:2);

// LCL.Day DD/  3A = SUBSTRING(LCL.Date From Alpha       USR,CON.6,CON.2)
LCL.Day_DD_3A = SUBSTRING(LCL.Date_From_Alpha_USR:6:2);

// LCL.Month MM/  3A = CONCAT(LCL.Month MM/  3A,CON./,CON.*ZERO)
LCL.Month_MM_3A = LCL.Month_MM_3A + '/' (*ZERO);

// LCL.Day DD/  3A = CONCAT(LCL.Day DD/  3A,CON./,CON.*ZERO)
LCL.Day_DD_3A = LCL.Day_DD_3A + '/' (*ZERO);

// LCL.Month/Day MM/DD/ = CONCAT(LCL.Month MM/  3A,LCL.Day DD/  3A,CON.*ZERO)
LCL.Month_Day_MM_DD = LCL.Month_MM_3A + LCL.Day_DD_3A (*ZERO);

// CUR.Date mm/dd/yyyy USR = CONCAT(LCL.Month/Day MM/DD/,LCL.Year USR,CON.*ZERO)
CUR.Date_mm_dd_yyyy_USR = LCL.Month_Day_MM_DD + LCL.Year_USR (*ZERO);

CASE;

// IF DB1.ED Modified Text is original
IF DB1.ED_Modified_Text = 'original';

// CUR.Toggle Text 1         USR = CON.XXX
CUR.Toggle_Text_1_USR = 'XXX';

// IF DB1.ED Modified Text is inlieu
IF DB1.ED_Modified_Text = 'inlieu';

// CUR.Toggle Text 2         USR = CON.XXX
CUR.Toggle_Text_2_USR = 'XXX';

ENDIF;

// Print Company Number header format
PRINT Company Number header format;

ENDIF;

CASE;

IF NEW Order_Number;
// SUPPRESSED PRINT Order Number header format

ENDIF;

CASE;

IF NEW ED_Export_Document_Type;
// SUPPRESSED PRINT ED Export Document Type header format

ENDIF;

//?USER: On print of detail format

EXECUTE FUNCTION(Rtv Count No Dtls Cmb RT) TYPE(RTVOBJ) FILE(PDMSREP)           AC1755257;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(CUR.ED_Export_Document_Type);
PARAMETER(CUR.Country_Code);
PARAMETER(LCL.Count_2_USR);
{
 //?USER: Initialize routine

 // PAR.Count 2 USR = CON.*ZERO
 PAR.Count_2_USR = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.ED Item Code NE LCL.ED Item Code
 IF DB1.ED_Item_Code <> LCL.ED_Item_Code;

 // PAR.Count 2 USR = PAR.Count 2 USR + CON.1
 PAR.Count_2_USR = PAR.Count_2_USR + 1;

 // LCL.ED Item Code = DB1.ED Item Code
 LCL.ED_Item_Code = DB1.ED_Item_Code;

 ENDIF;

}


//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : Prt Appl f/Export Cmb  PO
EXECUTE FUNCTION(Prt Appl f/Export Cmb  PO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(CUR.ED_Export_Document_Type);
PARAMETER(CUR.Country_Code);
PARAMETER(CUR.ED_Shipping_Marks_Txt);
PARAMETER(CUR.ED_Nbr_of_prods_on_1st_pg);
PARAMETER(PAR.USR_Overflow);
PARAMETER(LCL.Count_2_USR);
PARAMETER(PAR.Print_On_Form);
{
 //?USER: Initialize routine

 // PAR.Count 2 USR = CON.*ZERO
 PAR.Count_2_USR = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.ED Item Code NE LCL.ED Item Code
 IF DB1.ED_Item_Code <> LCL.ED_Item_Code;

 // PAR.Count 2 USR = PAR.Count 2 USR + CON.1
 PAR.Count_2_USR = PAR.Count_2_USR + 1;

 // LCL.ED Item Code = DB1.ED Item Code
 LCL.ED_Item_Code = DB1.ED_Item_Code;

 ENDIF;

}


//?USER: Print required level totals

// SUPPRESSED PRINT ED Export Document Type totals format

CASE;

IF NEW Order_Number;
EXECUTE FUNCTION(Rtv Consignor Nm      RT) TYPE(RTVOBJ) FILE(PDMMREP)           AC1705146;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.ED_Export_Document_Type);
PARAMETER(CUR.Country_Code);
PARAMETER(WRK.ED_Consignor_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF CUR.Company Number is St. Joseph
IF CUR.Company_Number = 960;

// CUR.Text USR 40 = CONCAT(CON.Export Coordinator;,WRK.ED Consignor Name,CON.*ZERO)
CUR.Text_USR_40 = 'Export Coordinator;' + WRK.ED_Consignor_Name (0);

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Text USR 40 = CONCAT(CON.Billing Clerk-,WRK.ED Consignor Name,CON.1)
CUR.Text_USR_40 = 'Billing Clerk-' + WRK.ED_Consignor_Name (1);

ENDIF;

//?dont print date for STF
CASE;

// IF CUR.Company Number is NE Seaboard Triumph
IF CUR.Company_Number <> 440;

// CUR.Date MM/DD/YYYY     USR = CONCAT(LCL.Month/Day MM/DD/,LCL.Year USR,CON.*ZERO)
CUR.Date_MM_DD_YYYY_USR = LCL.Month_Day_MM_DD + LCL.Year_USR (*ZERO);

ENDIF;

// Print Order Number totals format
PRINT Order Number totals format;

ENDIF;

// SUPPRESSED PRINT Company Number totals format

