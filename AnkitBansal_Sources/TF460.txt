     h option(*SRCSTMT:*NODEBUGIO)
      ****************************************************************
      *
      * SYSTEM:      Triumph Foods
      * PROGRAM:     TF460
      * TITLE:       Revenue: Specify Listing of Adjustments from the
      *              Accounts Receivable System
      * PROGRAMMER:  LeAnne Ramsey
      * CREATED:     05/22/08
      *
      * FUNCTION: This Specify uses an edit record format to allow the user
      *           to specify options for generating the listing.
      *
      *           This report was created as a result of the prolonged and excruciating
      *           reconcilation that went on in 2007-2009 between the TFS Cash Distribution
      *           data and the Accounts Receivable System data.
      *
      *           The listing is entirely over Synon files; so, it could have been created
      *           in the ARS model. But, to make it consistant with other TFS reports, we
      *           wrote this in TFS.
      *
      ***************************************************************************************
      * MODIFICATIONS:
      ***************************************************************************************
      * DATE      PROGRAMMER
      *
      * 05/06/09  LeAnne Ramsey
      *           Changed the Print logic to match Meat Costing.
      *
      * 09/15/09  LeAnne Ramsey
      *           Added a selection on AR Customer.
      /EJECT
      ***************************************************************************************
      * FILE SPECIFICATIONS
      ***************************************************************************************
      *
     Fcabbrel0  if   e           k disk
      *  Customer
      *
      *
     Ftfd460    cf   e             workstn infds(iofeed)
      *
      *
     Ftfp095    if   e           k disk
      *    Include/exclude options
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  Compile time array for SBMJOB used in QCMDEXC
      *---------------------------------------------------------------
     D cmd             s              1    dim(80) ctdata perrcd(80)
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D maxmsg          s              2  0  inz(20)
      *
      *
      * Workfields for date manipulation
      *
     D wkisodate       s               d   datfmt(*iso)
      *
      *
      * Parm fields
      *
     D xxiecd          s                   like(d1iecd)
     D xxieds          s                   like(d1ieds)
     d xxcuno          s                   like(d1cuno)
     d xxcunm          s             30
     D xxajact         s                   like(d1ajact)
     D xxajactds       s                   like(d1ajactds)
     D xxdtffl         s                   like(d1dtffl)
     D xxdtfds         s                   like(d1dtfds)
      *
      *
      *  Parms for use with QCMDEXC.  'LENGTH' is the length of the
      *  command that will be issued with QCMDEXC.  QCMDEXC requires
      *  the field containing length to be defined as 15 with 5 decimal
      *  positions.  The field 'CMDSBM' will hold the values of the
      *  submit job command when passed as a parm on the call to
      *  QCMDEXC.
      *
     D length          s             15  5 inz(80)
     D cmdsbm          s             80
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      * Data areas
      *---------------------------------------------------------------
      *
      *---------------------------------------------------------------
      * Local data area.
      *---------------------------------------------------------------
      *
     Dlda             uds                  dtaara(*lda)
     D  ldfdt                  1      8  0
     D  ldtdt                  9     16  0
     D  ldfmdy                17     22  0
     D  ldtmdy                23     28  0
     D  ldfsyndt              29     35  0
     D  ldtsyndt              36     42  0
      *
     D  ldiecd                43     43
     D  ldieds                44     69
      *
     D  ldcono                70     72  0
      *
     D  ldajty                73     75
     D  ldajact               76     76
     D  ldajactds             77    106
      *
     D  ldcuno               107    113  0
     D  ldcunm               114    143
      *
     D  lddtffl              144    144
     D  lddtfds              145    151
      *
     D  ldoutq               401    410
     D  ldhold               411    414
     D  ldsave               415    418
     D  ldcopy               419    419  0
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
     C
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the error
      * message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to CRT.
      *
     C                   write     tf460k1
     C                   write     tf460ec
     C                   exfmt     tf460r1
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
      *
     C                   when      *in17 = *on                                  F17-print options
     C                   call      'RO890'
     C                   eval      routne = scrn1
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                       API
     C                   eval      routne = scrn1
     C                   other
      *
     C                   eval      routne = edit1
     C                   endsl
      *
      *
      * Bring in the LDA to pick up any printer changes the user may
      * have made from called programs
      *
     C                   in        lda
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Edit screen 1 input fields
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * Validate:
      *   1) from date
      *   2) to date
      *   3) exempt/non-exempt/both
      *   4) company
      *   5) adjustment type action (conditionally)
      *   6) DTF (DueTo/DueFrom)
      *   7) AR customer number
      *   8) we have no validations for the remaining fields...the master
      *      files are not in this system (Alice did not want prompts/validations.)
      *
     C                   exsr      $fmdy
     C                   exsr      $tmdy
     C                   exsr      $iecd
     C                   exsr      $cono
     C                   exsr      $ajact
     C                   exsr      $dtffl
     C                   exsr      $cuno
      *
      * If there are no errors, execute the subroutine to submit the report.
      *
     C                   if        error = 0 and *in08 = *on
     C                   exsr      $proc1
     C                   endif
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * From Date
      *----------------------------------------------------------------
      *
     C     $fmdy         begsr
      *
     C                   z-add     0             ldfdt
      *
     C                   select
     C                   when      d1fmdy = 0
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
      *
     C                   when      d1fmdy < 0
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   other
      *
     C     *mdy          test(d)                 d1fmdy                 92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      * Flip the date from MMDDYY to CCYYMMDD.
      *
     C     *mdy          move      d1fmdy        wkisodate
     C                   move      wkisodate     ldfdt
      *
     C                   endif                                                  If bad date
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * To Date
      *----------------------------------------------------------------
      *
     C     $tmdy         begsr
      *
     C                   z-add     0             ldtdt
      *
     C                   select
     C                   when      d1tmdy = 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
      *
     C                   when      d1tmdy < 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   other
      *
     C     *mdy          test(d)                 d1tmdy                 92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      * Flip the date from MMDDYY to CCYYMMDD.
      *
     C     *mdy          move      d1tmdy        wkisodate
     C                   move      wkisodate     ldtdt
      *
     C                   endif                                                  If bad date
     C                   endsl
      *
      * Make the "TO date cannot be earlier than FROM date" check.
      *
     C                   if        *in30 = *off and                             If OK
     C                             *in31 = *off and
     C                             ldtdt < ldfdt
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09009'
     C                   endif
     C                   endif                                                  If OK
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate Exempt Records Option
      *----------------------------------------------------------------
      *
     C     $iecd         begsr
      *
     C                   move      *blank        d1ieds
      *
     C                   select
     C                   when      d1iecd = *blank
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09001'     mgid(e)
     C                   endif
     C                   other
      *
     C     d1iecd        chain     tfp095                             92
     C                   if        *in92 = *off                                 If ok
     C                   move      ieieds        d1ieds
     C                   else
      *
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08045'     mgid(e)
     C                   clear                   mgw
     C                   movea     d1iecd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If ok
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Company Number
      *---------------------------------------------------------------
      *
     C     $cono         begsr
      *
     C                   select
     C                   when      d1cono = 0
      *
     C                   when      d1cono < 0
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   endif
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Validate A/R Customer Number
      *---------------------------------------------------------------
      *
     C     $cuno         begsr
      *
     C                   move      *blank        d1cunm
     C                   move      *blank        ldcunm
      *
     C                   select
     C                   when      d1cuno = 0
      *
     C                   when      d1cuno < 0
     c                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   other
      *
     C     d1cuno        chain     cabbrel0                           92
     C                   if        *in92 = *off and                             If hit
     C                             bbbkc7 = bbanc7
     C                   eval      d1cunm = bbaytx
     C                   eval      ldcunm = bbaytx
     C                   else
     c                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08158'
     C                   endif
     C                   endif                                                  If hit
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Validate Adjustment Type Action
      *----------------------------------------------------------------
      *
      * If the user entered an Adjustment Type, they have to tell us the corresponding
      * action: E = Exclude this Type from the Listing
      *         O = Only print this Type on the Listing
      *
     C     $ajact        begsr
      *
     C                   eval      d1ajactds = *blank
      *
     C                   select
     C                   when      d1ajty = *blank
     C                   move      *blank        d1ajact
     C                   move      *blank        d1ajactds
      *
     C                   when      d1ajact <> 'O' and
     C                             d1ajact <> 'E'
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08145'     mgid(e)
     C                   endif
      *
     C                   when      d1ajact = 'E'
     C                   eval      d1ajactds = 'Exclude from Listing'
      *
     C                   when      d1ajact = 'O'
     C                   eval      d1ajactds = 'Only Print These on Listing'
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Validate DTF (DueTo/DueFrom)
      *--------------- ------------------------------------------------
      * Valid actions:
      *         I = Include
      *         E = Exclude from the Listing
      *         O = Only print these on the Listing
      *
     C     $dtffl        begsr
      *
     C                   eval      d1dtfds = *blank
      *
     C                   select
     C                   when      d1dtffl <> 'I' and
     C                             d1dtffl <> 'E' and
     C                             d1dtffl <> 'O'
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08144'     mgid(e)
     C                   endif
      *
     C                   when      d1dtffl = 'I'
     C                   eval      d1dtfds = 'Include'
      *
     C                   when      d1dtffl = 'E'
     C                   eval      d1dtfds = 'Exclude'
      *
     C                   when      d1dtffl = 'O'
     C                   eval      d1dtfds = 'Only'
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * F4 prompt on screen 1
      *----------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
     C                   select
      *
      * Exempt/non-exempt/both
      *
     C                   when      fld = 'D1IECD'
     C                   call      'TF518'
     C                   parm      *blank        xxiecd
     C                   parm      *blank        xxieds
     C                   seton                                        53
     C                   if        xxiecd <> *blank
     C                   move      xxiecd        d1iecd
     C                   move      xxieds        d1ieds
     C                   endif
      *
      * AR Customer
     C                   when      fld = 'D1CUNO'
     C                   call      'TF533'
     C                   parm      0             xxcuno
     C                   parm      *blank        xxcunm
     C                   seton                                        55
     C                   if        xxcuno <> 0
     C                   z-add     xxcuno        d1cuno
     C                   eval      d1cunm = xxcunm
     C                   endif
      *
      * Adjustment Type Action (exclude/only print)
      *
     C                   when      fld = 'D1AJACT'
     C                   call      'TF530'
     C                   parm      *blank        xxajact
     C                   parm      *blank        xxajactds
     C                   seton                                        54
     C                   if        xxajact <> *blank
     C                   move      xxajact       d1ajact
     C                   move      xxajactds     d1ajactds
     C                   endif
      *
      * For DTFs (DueTo/DueFrom)
      *
     C                   when      fld = 'D1DTFFL'
     C                   call      'TF536'
     C                   parm      *blank        xxdtffl
     C                   parm      *blank        xxdtfds
     C                   seton                                        54
     C                   if        xxdtffl <> *blank
     C                   move      xxdtffl       d1dtffl
     C                   move      xxdtfds       d1dtfds
     C                   endif
     C                   other
      *
      * F4 not valid for this field, so issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09011'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Process user's request
      *---------------------------------------------------------------
      *
      * This subroutine is only executed if the user submits the listing
      *
     C     $proc1        begsr
      *
      * Move submission values into LDA
      *
     C                   z-add     d1fmdy        ldfmdy
     C                   z-add     d1tmdy        ldtmdy
      *
      * Flip the From Date to Synon format of CYYMMDD.
      *
     C     *iso          test(d)                 ldfdt                  92
     C                   if        *in92 = *off                                 If good date
     C     *iso          move      ldfdt         wkisodate
     C     *cymd         move      wkisodate     ldfsyndt
     C                   endif                                                  If good date
      *
      * Flip the To Date to Synon format of CYYMMDD.
      *
     C     *iso          test(d)                 ldtdt                  92
     C                   if        *in92 = *off                                 If good date
     C     *iso          move      ldtdt         wkisodate
     C     *cymd         move      wkisodate     ldtsyndt
     C                   endif                                                  If good date
      *
     C                   z-add     d1cono        ldcono
     C                   z-add     d1cuno        ldcuno
     C                   move      d1iecd        ldiecd
     C                   move      d1ieds        ldieds
     C                   move      d1ajty        ldajty
     C                   move      d1ajact       ldajact
     C                   move      d1ajactds     ldajactds
     C                   move      d1dtffl       lddtffl
     C                   move      d1dtfds       lddtfds
      *
     C                   out       lda
      *
      * Move the 80-character compile time array 'CMD' to an
      * 80-character field for passing as a parm with QCMDEXC.
      *
     C                   movea     cmd           cmdsbm
     C                   call      'QCMDEXC'
     C                   parm                    cmdsbm
     C                   parm                    length
      *
      * Issue the standard request submission message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09003'
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Seton last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *   none
      *
      * Key lists
      *    None
      *
      * Retrieve/initialize "printer" fields in the LDA
      *
     C                   call      'RO891CL'
     C                   in        lda
      *
      * Initialize LDA fields
      *
     C                   z-add     0             ldfdt
     C                   z-add     0             ldfmdy
     C                   z-add     0             ldfsyndt
      *
     C                   z-add     0             ldtdt
     C                   z-add     0             ldtmdy
     C                   z-add     0             ldtsyndt
     C                   z-add     0             ldcono
     C                   z-add     0             ldcuno
     C                   out       lda
      *
      * Set screen defaults.
      *
     C                   move      'B'           d1iecd
     C                   move      'E'           d1dtffl
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
      *****************************************************************
      * COMPILE TIME ARRAY 'CMD' USED IN QCMDEXC
      *****************************************************************
** CMD table 'CMD' submits listing when F8 selected
SBMJOB CMD(CALL PGM(TF460CL))  JOB(TFARSADJ) JOBQ(*JOBD)
