// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDF6PFR
// ?Date: 14.08.2025 Time: 12:03:51
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

// WRK.Gross Weight = CON.20000
WRK.Gross_Weight = 20000;

//?Setup the dates for the week
// WRK.Date Sun USR = PAR.USR From Date
WRK.Date_Sun_USR = PAR.USR_From_Date;

// WRK.Date Mon USR = PAR.USR From Date + CON.1 *DAYS
WRK.Date_Mon_USR = DATEINCR(PAR.USR_From_Date 1 'DY' 1111111 'NONE' 'N' 1);

// WRK.Date Tue USR = PAR.USR From Date + CON.2 *DAYS
WRK.Date_Tue_USR = DATEINCR(PAR.USR_From_Date 2 'DY' 1111111 'NONE' 'N' 1);

// WRK.Date Wed USR = PAR.USR From Date + CON.3 *DAYS
WRK.Date_Wed_USR = DATEINCR(PAR.USR_From_Date 3 'DY' 1111111 'NONE' 'N' 1);

// WRK.Date Thu USR = PAR.USR From Date + CON.4 *DAYS
WRK.Date_Thu_USR = DATEINCR(PAR.USR_From_Date 4 'DY' 1111111 'NONE' 'N' 1);

// WRK.Date Fri USR = PAR.USR From Date + CON.5 *DAYS
WRK.Date_Fri_USR = DATEINCR(PAR.USR_From_Date 5 'DY' 1111111 'NONE' 'N' 1);

// WRK.Date Sat USR = PAR.USR From Date + CON.6 *DAYS
WRK.Date_Sat_USR = DATEINCR(PAR.USR_From_Date 6 'DY' 1111111 'NONE' 'N' 1);

// LCL.Print Selections = CND.Yes
LCL.Print_Selections = 'Y';

//?***** Change Log and Comments
//?*****
//?** LJB 02/15/2010 E000528
//?** Add up to 10 warehouses selected from the prompt (optional)
//?*****
//?** LJB 11/10/2008 E00076
//?** Add option 3 to print by Actual Shipped Date
//?** Change weight to compare to Total Order Load Weight (not gross)
//?*****
//?** LJB 10/30/2006 L61017B Add "Year" to the selections
//?** Also, pass in January 1 as the from date
//?** Put month end date on page if year is blanks
//?*****
//?5/16/01 Include Sunday in the printing
//?USER: Record selection processing

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

//?Select by Company
CASE;

// IF PAR.Company Number is greater than zero
IF PAR.Company_Number > *ZERO;

// AND PAR.Company Number NE DB1.Company Number
AND PAR.Company_Number <> DB1.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?** LJB 11/01/2006 L61017B
//?** Test for year will be the same since the from and to
//?** dates are filled in with the beginning and ending year dates
//?Omit records not in requested date range
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?** 1 = By Scheduled Ship Date
CASE;

// IF PAR.Report Type -Sch or Deadl is By Schedule Ship Date
IF PAR.Report_Type_Sch_or_Deadl = '1';

//?Compare Scheduled Ship Date to date range requested
CASE;

// IF DB1.Scheduled Ship Date GE PAR.USR From Date
IF DB1.Scheduled_Ship_Date >= PAR.USR_From_Date;

// AND DB1.Scheduled Ship Date LE PAR.Scheduled Ship Date
AND DB1.Scheduled_Ship_Date <= PAR.Scheduled_Ship_Date;

//?Compare Scheduled Ship Date to date range requested
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** 2 = By Deadline Departure Date
CASE;

// IF PAR.Report Type -Sch or Deadl is By Deadline Departure Dt
IF PAR.Report_Type_Sch_or_Deadl = '2';

//?Compare Deadline Depart Date to date range requested
CASE;

// IF DB1.Deadline Departure Date GE PAR.USR From Date
IF DB1.Deadline_Departure_Date >= PAR.USR_From_Date;

// AND DB1.Deadline Departure Date LE PAR.Scheduled Ship Date
AND DB1.Deadline_Departure_Date <= PAR.Scheduled_Ship_Date;

//?Compare Deadline Depart Date to date range requested
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** 3 = By Actual Shipped Date
CASE;

// IF PAR.Report Type -Sch or Deadl is By Actual Ship Date
IF PAR.Report_Type_Sch_or_Deadl = '3';

//?Compare Actual Shipped Date to date range requested
CASE;

// IF DB1.Actual Ship Date GE PAR.USR From Date
IF DB1.Actual_Ship_Date >= PAR.USR_From_Date;

// AND DB1.Actual Ship Date LE PAR.Scheduled Ship Date
AND DB1.Actual_Ship_Date <= PAR.Scheduled_Ship_Date;

//?Compare Actual Shipped Date to date range requested
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Select Shipping method Prepaid, and Buyer Trucks if gr wgt > 20000
CASE;

// IF DB1.Shipping Method is Prepaid
IF DB1.Shipping_Method = 'PR'/'PT';

//?Select Shipping method Prepaid, and Buyer Trucks if gr wgt > 20000
// IF DB1.Shipping Method is Buyers Truck
IF DB1.Shipping_Method = 'CR'/'CT';

//?Select if gross wgt > 20000
CASE;

// IF DB1.Total Load Order Weight GT WRK.Gross Weight
IF DB1.Total_Load_Order_Weight > WRK.Gross_Weight;

//?Select if gross wgt > 20000
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Select by Carrier
CASE;

// IF PAR.Carrier Code is entered
IF PAR.Carrier_Code <> *BLANK;

// AND PAR.Carrier Code NE DB1.Carrier Code
AND PAR.Carrier_Code <> DB1.Carrier_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select by Load Type
CASE;

// IF PAR.Load Type is Bulk or Regular
IF PAR.Load_Type = 'B'/'R';

// AND PAR.Load Type NE DB1.Load Type
AND PAR.Load_Type <> DB1.Load_Type;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select by State Code
CASE;

// IF PAR.Ship To State Code is State code not Blanks
IF PAR.Ship_To_State_Code <> *BLANK;

EXECUTE FUNCTION(RTV Last Stop Consign  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1377331;
PARAMETER(DB1.Load_ID);
PARAMETER(WRK.Ship_To_Customer);
PARAMETER(WRK.Ship_To_Name);
PARAMETER(WRK.Ship_To_Address_Line_1);
PARAMETER(WRK.Ship_To_Address_Line_2);
PARAMETER(WRK.Ship_To_Address_Line_3);
PARAMETER(WRK.USR_Load_Stop_10_Alpha);
PARAMETER(LCL.Ship_To_State_Code);
PARAMETER(WRK.Ship_To_Zip_Postal_Code);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV for B.O.L. Print   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1377319;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name);
 PARAMETER(PAR.Ship_To_Address_Line_1);
 PARAMETER(PAR.Ship_To_Address_Line_2);
 PARAMETER(PAR.Ship_To_Address_Line_3);
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Ship_To_Zip_Postal_Code);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 QUIT;

}


CASE;

// IF PAR.Ship To State Code NE LCL.Ship To State Code
IF PAR.Ship_To_State_Code <> LCL.Ship_To_State_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Select warehouses if requested at the prompt          E000528
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

// WRK.Select Status = CND.no
WRK.Select_Status = 'N';

//?Select warehouses if requested at the prompt          E000528
CASE;

// IF PAR.Warehouse 1 USR is Entered
IF PAR.Warehouse_1_USR <> *BLANK;

// OR PAR.Warehouse 2 USR is Entered
OR PAR.Warehouse_2_USR <> *BLANK;

// OR PAR.Warehouse 3 USR is Entered
OR PAR.Warehouse_3_USR <> *BLANK;

// OR PAR.Warehouse 4 USR is Entered
OR PAR.Warehouse_4_USR <> *BLANK;

// OR PAR.Warehouse 5 USR is Entered
OR PAR.Warehouse_5_USR <> *BLANK;

// OR PAR.Warehouse 6 USR is Entered
OR PAR.Warehouse_6_USR <> *BLANK;

// OR PAR.Warehouse 7 USR is Entered
OR PAR.Warehouse_7_USR <> *BLANK;

// OR PAR.Warehouse 8 USR is Entered
OR PAR.Warehouse_8_USR <> *BLANK;

// OR PAR.Warehouse 9 USR is Entered
OR PAR.Warehouse_9_USR <> *BLANK;

// OR PAR.Warehouse 10 USR is Entered
OR PAR.Warehouse_10_USR <> *BLANK;

//?Warehouse specific selects
// PAR.Status Flag 1  Y/N = CND.No
PAR.Status_Flag_1_Y_N = 'N';

// PAR.Status Flag 2  Y/N = CND.No
PAR.Status_Flag_2_Y_N = 'N';

// PAR.Status Flag 3  Y/N = CND.No
PAR.Status_Flag_3_Y_N = 'N';

// PAR.Status Flag 4  Y/N = CND.no
PAR.Status_Flag_4_Y_N = 'N';

// PAR.Status Flag 5  Y/N = CND.No
PAR.Status_Flag_5_Y_N = 'N';

// PAR.Status Flag 6  Y/N = CND.No
PAR.Status_Flag_6_Y_N = 'N';

// PAR.Status Flag 7  Y/N = CND.No
PAR.Status_Flag_7_Y_N = 'N';

// PAR.Status Flag 8  Y/N = CND.No
PAR.Status_Flag_8_Y_N = 'N';

// PAR.Status Flag 9  Y/N = CND.No
PAR.Status_Flag_9_Y_N = 'N';

// PAR.Status Flag 10 Y/N = CND.No
PAR.Status_Flag_10_Y_N = 'N';

//?Select warehouse 1
CASE;

// IF PAR.Warehouse 1 USR is Entered
IF PAR.Warehouse_1_USR <> *BLANK;

// AND PAR.Warehouse 1 USR EQ DB1.Ship From Warehouse
AND PAR.Warehouse_1_USR = DB1.Ship_From_Warehouse;

// PAR.Status Flag 1  Y/N = CND.Yes
PAR.Status_Flag_1_Y_N = 'Y';

ENDIF;

//?Select warehouse 2
CASE;

// IF PAR.Warehouse 2 USR is Entered
IF PAR.Warehouse_2_USR <> *BLANK;

// AND PAR.Warehouse 2 USR EQ DB1.Ship From Warehouse
AND PAR.Warehouse_2_USR = DB1.Ship_From_Warehouse;

// PAR.Status Flag 2  Y/N = CND.Yes
PAR.Status_Flag_2_Y_N = 'Y';

ENDIF;

//?Select warehouse 3
CASE;

// IF PAR.Warehouse 3 USR is Entered
IF PAR.Warehouse_3_USR <> *BLANK;

// AND PAR.Warehouse 3 USR EQ DB1.Ship From Warehouse
AND PAR.Warehouse_3_USR = DB1.Ship_From_Warehouse;

// PAR.Status Flag 3  Y/N = CND.Yes
PAR.Status_Flag_3_Y_N = 'Y';

ENDIF;

//?Select warehouse 4
CASE;

// IF PAR.Warehouse 4 USR is Entered
IF PAR.Warehouse_4_USR <> *BLANK;

// AND PAR.Warehouse 4 USR EQ DB1.Ship From Warehouse
AND PAR.Warehouse_4_USR = DB1.Ship_From_Warehouse;

// PAR.Status Flag 4  Y/N = CND.yes
PAR.Status_Flag_4_Y_N = 'Y';

ENDIF;

//?Select warehouse 5
CASE;

// IF PAR.Warehouse 5 USR is Entered
IF PAR.Warehouse_5_USR <> *BLANK;

// AND PAR.Warehouse 5 USR EQ DB1.Ship From Warehouse
AND PAR.Warehouse_5_USR = DB1.Ship_From_Warehouse;

// PAR.Status Flag 5  Y/N = CND.Yes
PAR.Status_Flag_5_Y_N = 'Y';

ENDIF;

//?Select warehouse 6
CASE;

// IF PAR.Warehouse 6 USR is Entered
IF PAR.Warehouse_6_USR <> *BLANK;

// AND PAR.Warehouse 6 USR EQ DB1.Ship From Warehouse
AND PAR.Warehouse_6_USR = DB1.Ship_From_Warehouse;

// PAR.Status Flag 6  Y/N = CND.Yes
PAR.Status_Flag_6_Y_N = 'Y';

ENDIF;

//?Select warehouse 7
CASE;

// IF PAR.Warehouse 7 USR is Entered
IF PAR.Warehouse_7_USR <> *BLANK;

// AND PAR.Warehouse 7 USR EQ DB1.Ship From Warehouse
AND PAR.Warehouse_7_USR = DB1.Ship_From_Warehouse;

// PAR.Status Flag 7  Y/N = CND.Yes
PAR.Status_Flag_7_Y_N = 'Y';

ENDIF;

//?Select warehouse 8
CASE;

// IF PAR.Warehouse 8 USR is Entered
IF PAR.Warehouse_8_USR <> *BLANK;

// AND PAR.Warehouse 8 USR EQ DB1.Ship From Warehouse
AND PAR.Warehouse_8_USR = DB1.Ship_From_Warehouse;

// PAR.Status Flag 8  Y/N = CND.Yes
PAR.Status_Flag_8_Y_N = 'Y';

ENDIF;

//?Select warehouse 9
CASE;

// IF PAR.Warehouse 9 USR is Entered
IF PAR.Warehouse_9_USR <> *BLANK;

// AND PAR.Warehouse 9 USR EQ DB1.Ship From Warehouse
AND PAR.Warehouse_9_USR = DB1.Ship_From_Warehouse;

// PAR.Status Flag 9  Y/N = CND.Yes
PAR.Status_Flag_9_Y_N = 'Y';

ENDIF;

//?Select warehouse 10
CASE;

// IF PAR.Warehouse 10 USR is Entered
IF PAR.Warehouse_10_USR <> *BLANK;

// AND PAR.Warehouse 10 USR EQ DB1.Ship From Warehouse
AND PAR.Warehouse_10_USR = DB1.Ship_From_Warehouse;

// PAR.Status Flag 10 Y/N = CND.Yes
PAR.Status_Flag_10_Y_N = 'Y';

ENDIF;

//?If any select status is yes then select record
CASE;

// IF PAR.Status Flag 1  Y/N is Yes
IF PAR.Status_Flag_1_Y_N = 'Y';

// OR PAR.Status Flag 2  Y/N is Yes
OR PAR.Status_Flag_2_Y_N = 'Y';

// OR PAR.Status Flag 3  Y/N is Yes
OR PAR.Status_Flag_3_Y_N = 'Y';

// OR PAR.Status Flag 4  Y/N is yes
OR PAR.Status_Flag_4_Y_N = 'Y';

// OR PAR.Status Flag 5  Y/N is Yes
OR PAR.Status_Flag_5_Y_N = 'Y';

// OR PAR.Status Flag 6  Y/N is Yes
OR PAR.Status_Flag_6_Y_N = 'Y';

// OR PAR.Status Flag 7  Y/N is Yes
OR PAR.Status_Flag_7_Y_N = 'Y';

// OR PAR.Status Flag 8  Y/N is Yes
OR PAR.Status_Flag_8_Y_N = 'Y';

// OR PAR.Status Flag 9  Y/N is Yes
OR PAR.Status_Flag_9_Y_N = 'Y';

// OR PAR.Status Flag 10 Y/N is Yes
OR PAR.Status_Flag_10_Y_N = 'Y';

// WRK.Select Status = CND.yes
WRK.Select_Status = 'Y';

ENDIF;

//?Deselect if no matching warehouses
CASE;

// IF WRK.Select Status is no
IF WRK.Select_Status = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?USER: Process top of page

MOVE *ALL (To: TOP From: PAR);

// TOP.Company Number = PAR.Company Number
TOP_Company_Number = PAR.Company_Number;

CASE;

// IF PAR.Company Number is greater than zero
IF PAR.Company_Number > *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(TOP_Company_Number);
PARAMETER(TOP_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Company Name = CON.*ALL
TOP_Company_Name = *ALL;

ENDIF;

CASE;

// IF PAR.Status - Y or N is yes
IF PAR.Status_Y_or_N = 'Y';

// TOP.Scheduled Ship Date = PAR.Scheduled Ship Date
TOP_Scheduled_Ship_Date = PAR.Scheduled_Ship_Date;

// IF *OTHERWISE
IF *OTHERWISE;

//?** Put month end date on page if year is blanks   11/06/2006
CASE;

// IF PAR.YEAR 1 USR is equal to zero
IF PAR.YEAR_1_USR = *ZERO;

// TOP.Date To               USR = PAR.Scheduled Ship Date
TOP_Date_To_USR = PAR.Scheduled_Ship_Date;

ENDIF;

ENDIF;

// TOP.YEAR 1 USR = PAR.YEAR 1 USR
TOP_YEAR_1_USR = PAR.YEAR_1_USR;

// TOP.Load Type = PAR.Load Type
TOP_Load_Type = PAR.Load_Type;

// TOP.USR State Code = PAR.Ship To State Code
TOP_USR_State_Code = PAR.Ship_To_State_Code;

CASE;

// IF PAR.Load Type is Blank
IF PAR.Load_Type = *BLANK;

// TOP.Load Type Desc = CON.*ALL
TOP_Load_Type_Desc = *ALL;

// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Load Type Desc = Condition name of TOP.Load Type
TOP_Load_Type_Desc = RTVCND(TOP_Load_Type);

ENDIF;

// TOP.Carrier Code = PAR.Carrier Code
TOP_Carrier_Code = PAR.Carrier_Code;

//?Carrier description
CASE;

// IF PAR.Carrier Code is entered
IF PAR.Carrier_Code <> *BLANK;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(TOP_Carrier_Code);
PARAMETER(TOP_Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Carrier description
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Name = CON.*ALL
TOP_Name = *ALL;

ENDIF;

//?State Desc
CASE;

// IF PAR.Ship To State Code is *Blanks
IF PAR.Ship_To_State_Code = *BLANK;

// TOP.State Description = CON.*ALL
TOP_State_Description = *ALL;

//?State Desc
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV State Description  RT) TYPE(RTVOBJ) FILE(CAACREP)          AC1227485;
PARAMETER(TOP_USR_State_Code);
PARAMETER(TOP_State_Description);
PARAMETER(LCL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// TOP.Report Type -Sch or Deadl = PAR.Report Type -Sch or Deadl
TOP_Report_Type_Sch_or_Deadl = PAR.Report_Type_Sch_or_Deadl;

// TOP.Condition Desc. 1  USR = Condition name of TOP.Report Type -Sch or Deadl
TOP_Condition_Desc_1_USR = RTVCND(TOP_Report_Type_Sch_or_Deadl);

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

CASE;

IF NEW Carrier_Code;
// SUPPRESSED PRINT Carrier Code header format

ENDIF;

CASE;

IF NEW Scheduled_Ship_Date;
// SUPPRESSED PRINT Scheduled Ship Date header format

ENDIF;

//?USER: On print of detail format

// LCL.Print Selections = CND.No
LCL.Print_Selections = 'N';

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF DB1.Shipping Method is Buyers Truck
IF DB1.Shipping_Method = 'CR'/'CT';

// PAR.Load Tally Tot Buyer  USR = PAR.Load Tally Tot Buyer  USR + CON.1
PAR.Load_Tally_Tot_Buyer_USR = PAR.Load_Tally_Tot_Buyer_USR + 1;

//?** Add selection for Actual Ship Date        11/10/2008 E00076
CASE;

// IF PAR.Report Type -Sch or Deadl is By Schedule Ship Date
IF PAR.Report_Type_Sch_or_Deadl = '1';

EXECUTE FUNCTION(RTV Day of Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1658821;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Scheduled_Ship_Date);
PARAMETER(WRK.Day_of_Week);
{
 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


// IF PAR.Report Type -Sch or Deadl is By Actual Ship Date
IF PAR.Report_Type_Sch_or_Deadl = '3';

EXECUTE FUNCTION(RTV Day of Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1658821;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Actual_Ship_Date);
PARAMETER(WRK.Day_of_Week);
{
 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Day of Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1658821;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Deadline_Departure_Date);
PARAMETER(WRK.Day_of_Week);
{
 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Increment Load count if Buyer's truck or rail   (CT,CR)
CASE;

// IF WRK.Day of Week is Monday
IF WRK.Day_of_Week = '2';

// PAR.Load Tally Mon Buyer  USR = PAR.Load Tally Mon Buyer  USR + CON.1
PAR.Load_Tally_Mon_Buyer_USR = PAR.Load_Tally_Mon_Buyer_USR + 1;

//?Increment Load count if Buyer's truck or rail   (CT,CR)
// IF WRK.Day of Week is Tuesday
IF WRK.Day_of_Week = '3';

// PAR.Load Tally Tue Buyer  USR = PAR.Load Tally Tue Buyer  USR + CON.1
PAR.Load_Tally_Tue_Buyer_USR = PAR.Load_Tally_Tue_Buyer_USR + 1;

//?Increment Load count if Buyer's truck or rail   (CT,CR)
// IF WRK.Day of Week is Wednesday
IF WRK.Day_of_Week = '4';

// PAR.Load Tally Wed Buyer  USR = PAR.Load Tally Wed Buyer  USR + CON.1
PAR.Load_Tally_Wed_Buyer_USR = PAR.Load_Tally_Wed_Buyer_USR + 1;

//?Increment Load count if Buyer's truck or rail   (CT,CR)
// IF WRK.Day of Week is Thursday
IF WRK.Day_of_Week = '5';

// PAR.Load Tally Thu Buyer  USR = PAR.Load Tally Thu Buyer  USR + CON.1
PAR.Load_Tally_Thu_Buyer_USR = PAR.Load_Tally_Thu_Buyer_USR + 1;

//?Increment Load count if Buyer's truck or rail   (CT,CR)
// IF WRK.Day of Week is Friday
IF WRK.Day_of_Week = '6';

// PAR.Load Tally Fri Buyer  USR = PAR.Load Tally Fri Buyer  USR + CON.1
PAR.Load_Tally_Fri_Buyer_USR = PAR.Load_Tally_Fri_Buyer_USR + 1;

//?Increment Load count if Buyer's truck or rail   (CT,CR)
// IF WRK.Day of Week is Saturday
IF WRK.Day_of_Week = '7';

// PAR.Load Tally Sat Buyer  USR = PAR.Load Tally Sat Buyer  USR + CON.1
PAR.Load_Tally_Sat_Buyer_USR = PAR.Load_Tally_Sat_Buyer_USR + 1;

//?Increment Load count if Buyer's truck or rail   (CT,CR)
// IF WRK.Day of Week is Sunday
IF WRK.Day_of_Week = '1';

// PAR.Load Tally Sun Buyer  USR = PAR.Load Tally Sun Buyer  USR + CON.1
PAR.Load_Tally_Sun_Buyer_USR = PAR.Load_Tally_Sun_Buyer_USR + 1;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Load Tally Total Carr USR = CUR.Load Tally Total Carr USR + CON.1
CUR.Load_Tally_Total_Carr_USR = CUR.Load_Tally_Total_Carr_USR + 1;

//?** Add selection for Actual Ship Date        11/10/2008 E00076
CASE;

// IF PAR.Report Type -Sch or Deadl is By Schedule Ship Date
IF PAR.Report_Type_Sch_or_Deadl = '1';

EXECUTE FUNCTION(RTV Day of Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1658821;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Scheduled_Ship_Date);
PARAMETER(WRK.Day_of_Week);
{
 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


// IF PAR.Report Type -Sch or Deadl is By Actual Ship Date
IF PAR.Report_Type_Sch_or_Deadl = '3';

EXECUTE FUNCTION(RTV Day of Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1658821;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Actual_Ship_Date);
PARAMETER(WRK.Day_of_Week);
{
 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Day of Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1658821;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Deadline_Departure_Date);
PARAMETER(WRK.Day_of_Week);
{
 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Increment Load count if Prepaid truck or rail   (PT,PR)
CASE;

// IF WRK.Day of Week is Monday
IF WRK.Day_of_Week = '2';

// CUR.Load Tally Monday     USR = CUR.Load Tally Monday     USR + CON.1
CUR.Load_Tally_Monday_USR = CUR.Load_Tally_Monday_USR + 1;

//?Increment Load count if Prepaid truck or rail   (PT,PR)
// IF WRK.Day of Week is Tuesday
IF WRK.Day_of_Week = '3';

// CUR.Load Tally Tuesday    USR = CUR.Load Tally Tuesday    USR + CON.1
CUR.Load_Tally_Tuesday_USR = CUR.Load_Tally_Tuesday_USR + 1;

//?Increment Load count if Prepaid truck or rail   (PT,PR)
// IF WRK.Day of Week is Wednesday
IF WRK.Day_of_Week = '4';

// CUR.Load Tally Wednesday  USR = CUR.Load Tally Wednesday  USR + CON.1
CUR.Load_Tally_Wednesday_USR = CUR.Load_Tally_Wednesday_USR + 1;

//?Increment Load count if Prepaid truck or rail   (PT,PR)
// IF WRK.Day of Week is Thursday
IF WRK.Day_of_Week = '5';

// CUR.Load Tally Thursday   USR = CUR.Load Tally Thursday   USR + CON.1
CUR.Load_Tally_Thursday_USR = CUR.Load_Tally_Thursday_USR + 1;

//?Increment Load count if Prepaid truck or rail   (PT,PR)
// IF WRK.Day of Week is Friday
IF WRK.Day_of_Week = '6';

// CUR.Load Tally Friday     USR = CUR.Load Tally Friday     USR + CON.1
CUR.Load_Tally_Friday_USR = CUR.Load_Tally_Friday_USR + 1;

//?Increment Load count if Prepaid truck or rail   (PT,PR)
// IF WRK.Day of Week is Saturday
IF WRK.Day_of_Week = '7';

// CUR.Load Tally Saturday   USR = CUR.Load Tally Saturday   USR + CON.1
CUR.Load_Tally_Saturday_USR = CUR.Load_Tally_Saturday_USR + 1;

//?Increment Load count if Prepaid truck or rail   (PT,PR)
// IF WRK.Day of Week is Sunday
IF WRK.Day_of_Week = '1';

// CUR.Load Tally Sunday     USR = CUR.Load Tally Sunday     USR + CON.1
CUR.Load_Tally_Sunday_USR = CUR.Load_Tally_Sunday_USR + 1;

ENDIF;

ENDIF;

ENDIF;

//?USER: Process after print of detail format

NXT.Load_Tally_Total_USR = SUM(CUR.Load_Tally_Total_Carr_USR);

NXT.Load_Tally_Fri_Total_SUM = SUM(CUR.Load_Tally_Friday_USR);

NXT.Load_Tally_Thur_Total_SUM = SUM(CUR.Load_Tally_Thursday_USR);

NXT.Load_Tally_Wed_Total_SUM = SUM(CUR.Load_Tally_Wednesday_USR);

NXT.Load_Tally_Tues_Total_SUM = SUM(CUR.Load_Tally_Tuesday_USR);

NXT.Load_Tally_Mon_Total_SUM = SUM(CUR.Load_Tally_Monday_USR);

NXT.Load_Tally_Sat_Total_SUM = SUM(CUR.Load_Tally_Saturday_USR);

NXT.Load_Tally_Sun_Total_SUM = SUM(CUR.Load_Tally_Sunday_USR);

//?USER: Print required level totals

// SUPPRESSED PRINT Scheduled Ship Date totals format

CASE;

IF NEW Carrier_Code;
EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(CUR.Carrier_Code);
PARAMETER(CUR.USR_Carrier_Name_4);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


CASE;

// IF CUR.Load Tally Total      USR EQ WRK.ZERO
IF CUR.Load_Tally_Total_USR = WRK.ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

// Print Carrier Code totals format
PRINT Carrier Code totals format;

NXT.Load_Tally_Total_USR = SUM(CUR.Load_Tally_Total_USR);

NXT.Load_Tally_Sat_Total_SUM = SUM(CUR.Load_Tally_Sat_Total_SUM);

NXT.Load_Tally_Fri_Total_SUM = SUM(CUR.Load_Tally_Fri_Total_SUM);

NXT.Load_Tally_Thur_Total_SUM = SUM(CUR.Load_Tally_Thur_Total_SUM);

NXT.Load_Tally_Wed_Total_SUM = SUM(CUR.Load_Tally_Wed_Total_SUM);

NXT.Load_Tally_Tues_Total_SUM = SUM(CUR.Load_Tally_Tues_Total_SUM);

NXT.Load_Tally_Mon_Total_SUM = SUM(CUR.Load_Tally_Mon_Total_SUM);

NXT.Load_Tally_Sun_Total_SUM = SUM(CUR.Load_Tally_Sun_Total_SUM);

ENDIF;

//?USER: On print of final totals format

// CUR.Load Tally Mon Buyer  USR = PAR.Load Tally Mon Buyer  USR
CUR.Load_Tally_Mon_Buyer_USR = PAR.Load_Tally_Mon_Buyer_USR;

// CUR.Load Tally Tue Buyer  USR = PAR.Load Tally Tue Buyer  USR
CUR.Load_Tally_Tue_Buyer_USR = PAR.Load_Tally_Tue_Buyer_USR;

// CUR.Load Tally Wed Buyer  USR = PAR.Load Tally Wed Buyer  USR
CUR.Load_Tally_Wed_Buyer_USR = PAR.Load_Tally_Wed_Buyer_USR;

// CUR.Load Tally Thu Buyer  USR = PAR.Load Tally Thu Buyer  USR
CUR.Load_Tally_Thu_Buyer_USR = PAR.Load_Tally_Thu_Buyer_USR;

// CUR.Load Tally Fri Buyer  USR = PAR.Load Tally Fri Buyer  USR
CUR.Load_Tally_Fri_Buyer_USR = PAR.Load_Tally_Fri_Buyer_USR;

// CUR.Load Tally Sat Buyer  USR = PAR.Load Tally Sat Buyer  USR
CUR.Load_Tally_Sat_Buyer_USR = PAR.Load_Tally_Sat_Buyer_USR;

// CUR.Load Tally Tot Buyer  USR = PAR.Load Tally Tot Buyer  USR
CUR.Load_Tally_Tot_Buyer_USR = PAR.Load_Tally_Tot_Buyer_USR;

// CUR.Load Tally Sun Buyer  USR = PAR.Load Tally Sun Buyer  USR
CUR.Load_Tally_Sun_Buyer_USR = PAR.Load_Tally_Sun_Buyer_USR;

//?Add Buyer's totals to Final Totals
// CUR.Load Tally Mon Total  SUM = CUR.Load Tally Mon Total  SUM + CUR.Load Tally M
CUR.Load_Tally_Mon_Total_SUM = CUR.Load_Tally_Mon_Total_SUM                                        +
+ CUR.Load_Tally_Mon_Buyer_USR;

// CUR.Load Tally Tues Total SUM = CUR.Load Tally Tues Total SUM + CUR.Load Tally T
CUR.Load_Tally_Tues_Total_SUM = CUR.Load_Tally_Tues_Total_SUM                                      +
+ CUR.Load_Tally_Tue_Buyer_USR;

// CUR.Load Tally Wed Total  SUM = CUR.Load Tally Wed Total  SUM + CUR.Load Tally W
CUR.Load_Tally_Wed_Total_SUM = CUR.Load_Tally_Wed_Total_SUM                                        +
+ CUR.Load_Tally_Wed_Buyer_USR;

// CUR.Load Tally Thur Total SUM = CUR.Load Tally Thur Total SUM + CUR.Load Tally T
CUR.Load_Tally_Thur_Total_SUM = CUR.Load_Tally_Thur_Total_SUM                                      +
+ CUR.Load_Tally_Thu_Buyer_USR;

// CUR.Load Tally Fri Total  SUM = CUR.Load Tally Fri Total  SUM + CUR.Load Tally F
CUR.Load_Tally_Fri_Total_SUM = CUR.Load_Tally_Fri_Total_SUM                                        +
+ CUR.Load_Tally_Fri_Buyer_USR;

// CUR.Load Tally Sat Total  SUM = CUR.Load Tally Sat Total  SUM + CUR.Load Tally S
CUR.Load_Tally_Sat_Total_SUM = CUR.Load_Tally_Sat_Total_SUM                                        +
+ CUR.Load_Tally_Sat_Buyer_USR;

// CUR.Load Tally Total      USR = CUR.Load Tally Total      USR + CUR.Load Tally Tot Buyer  USR
CUR.Load_Tally_Total_USR = CUR.Load_Tally_Total_USR + CUR.Load_Tally_Tot_Buyer_USR;

// CUR.Load Tally Sun Total  SUM = CUR.Load Tally Sun Total  SUM + CUR.Load Tally Sun Buyer  USR
CUR.Load_Tally_Sun_Total_SUM = CUR.Load_Tally_Sun_Total_SUM                                        +
+ CUR.Load_Tally_Sun_Buyer_USR;

