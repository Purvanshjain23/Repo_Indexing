// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPHWPFR
// ?Date: 14.08.2025 Time: 12:06:32
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?***** Change Log and Comments
//?*****
//?** 05/04/2007 LJB OMS011
//?** Add Meat Cost Group selection and Record Status Selection.
//?** Add both fields to Top of Page. If Meat Cost is passed in then
//?** select only matching. If Record Status is passed in then
//?** 032108 slm add addition selection e00124
//?** 081508 slm Update the Item Default with co-own from TF Margin
//?** group detail -
//?** Need to get with Alice.
//?*****
EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('C/S');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

// WRK.Print Yes/No          USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

CASE;

// IF PAR.Change Flag USR is Yes
IF PAR.Change_Flag_USR = 'Y';

// AND PAR.Print Information USR is Selected Items
AND PAR.Print_Information_USR = 'S';

//?Initialize to Blank
EXECUTE FUNCTION(Upd Init TF Class     RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC1746481;
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg TF Classification CH) TYPE(CHGOBJ) FILE(OMBYREP)           AC1719945;
 PARAMETER(DB1.Item_Code);
 PARAMETER('N');
 PARAMETER(*BLANK);
 {
  //?USER: Processing after Data update

  EXECUTE FUNCTION(Upd TF Classification RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1719947;
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.TF_Co_Ownership_Sts);
  PARAMETER(PAR.Item_TF_Classification);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Chg TF Classification CH) TYPE(CHGOBJ) FILE(CABZREP)           AC1719948;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(PAR.TF_Co_Ownership_Sts);
   PARAMETER(PAR.Item_TF_Classification);
  }

 }

}


ENDIF;

// PAR.Print On Form = CND.Do Not Print on Form
PAR.Print_On_Form = 0;

//?USER: Record selection processing

//?SEL:  TF Classification
CASE;

// IF PAR.TF Classification Code is Entered
IF PAR.TF_Classification_Code <> *BLANK;

// AND PAR.TF Classification Code NE DB1.TF Classification Code
AND PAR.TF_Classification_Code <> DB1.TF_Classification_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?032108 slm e00124 additional seletion
//?SEL:  TF Class Group
CASE;

// IF PAR.TF Class Group is Not Entered
IF PAR.TF_Class_Group = *BLANK;

//?03/18/28 Slm Add new selection on class group
//?SEL:  TF Class Group
// IF PAR.TF Class Group NE DB1.TF Class Group
IF PAR.TF_Class_Group <> DB1.TF_Class_Group;

//?03/18/28 Slm Add new selection on class group
//?Par is selecting now see if equal to db1
// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL:  Item Structure Type
CASE;

// IF PAR.Item Structure Type Code is Entered
IF PAR.Item_Structure_Type_Code <> *ZERO;

// AND PAR.Item Structure Type Code NE DB1.Item Structure Type Code
AND PAR.Item_Structure_Type_Code <> DB1.Item_Structure_Type_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL:  Item Structure Group
CASE;

// IF PAR.Item Structure Group Code is Entered
IF PAR.Item_Structure_Group_Code <> *ZERO;

// AND PAR.Item Structure Group Code NE DB1.Item Structure Group Code
AND PAR.Item_Structure_Group_Code <> DB1.Item_Structure_Group_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL:  Item Structure Class
CASE;

// IF PAR.Item Structure Class Code is Entered
IF PAR.Item_Structure_Class_Code <> *ZERO;

// AND PAR.Item Structure Class Code NE DB1.Item Structure Class Code
AND PAR.Item_Structure_Class_Code <> DB1.Item_Structure_Class_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL:  TF Meat Cost Group
CASE;

// IF PAR.TFMC Group Code is Entered
IF PAR.TFMC_Group_Code <> *BLANK;

// AND PAR.TFMC Group Code NE DB1.TFMC Group Code
AND PAR.TFMC_Group_Code <> DB1.TFMC_Group_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process top of page

MOVE *ALL (To: TOP From: PAR);

EXECUTE FUNCTION(Report Type Desc DRV) TYPE(DRVFLD)                             AC1713261;
PARAMETER(TOP_Report_Type_Desc_DRV);
PARAMETER(TOP_Report_Type);
{
 //?Calculate derived field

 // PAR.Report Type Desc DRV = Condition name of PAR.Report Type
 PAR.Report_Type_Desc_DRV = RTVCND(PAR.Report_Type);

}


EXECUTE FUNCTION(Print Info Desc DRV) TYPE(DRVFLD)                              AC1713262;
PARAMETER(TOP_Print_Info_Desc_DRV);
PARAMETER(TOP_Print_Information_USR);
{
 //?Calculate derived field

 // PAR.All/Select/Omit Desc DRV = Condition name of PAR.All/Select/Omit Sts USR
 PAR.Print_Info_Desc_DRV = RTVCND(PAR.Print_Information_USR);

}


//?TF Classification
CASE;

// IF TOP.TF Classification Code is Entered
IF TOP_TF_Classification_Code <> *BLANK;

EXECUTE FUNCTION(TF Class Desc DRV) TYPE(DRVFLD)                                AC1707607;
PARAMETER(TOP_TF_Class_Desc_DRV);
PARAMETER(TOP_TF_Classification_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv TF Class Desc     RT) TYPE(RTVOBJ) FILE(PPAMREP)           AC1707658;
 PARAMETER(PAR.TF_Classification_Code);
 PARAMETER(PAR.TF_Class_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?TF Classification
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.TF Class Desc DRV = CON.*ALL
TOP_TF_Class_Desc_DRV = *ALL;

ENDIF;

//?Item Structure Type
CASE;

// IF TOP.Item Structure Type Code is Entered
IF TOP_Item_Structure_Type_Code <> *ZERO;

EXECUTE FUNCTION(Item Str Type Desc DRV) TYPE(DRVFLD)                           AC1705175;
PARAMETER(TOP_Item_Str_Type_Desc_DRV);
PARAMETER(TOP_Item_Structure_Type_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Type Description   RT) TYPE(RTVOBJ) FILE(OME8REP)          AC1229616;
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Str_Type_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?Item Structure Type
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Item Str Type Desc DRV = CON.*ALL
TOP_Item_Str_Type_Desc_DRV = *ALL;

ENDIF;

//?Item Structure Group
CASE;

// IF TOP.Item Structure Group Code is Entered
IF TOP_Item_Structure_Group_Code <> *ZERO;

EXECUTE FUNCTION(Item Str Group Desc DRV) TYPE(DRVFLD)                          AC1705174;
PARAMETER(TOP_Item_Str_Group_Desc_DRV);
PARAMETER(TOP_Item_Structure_Group_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Group Desc) TYPE(RTVOBJ) FILE(OME9REP)                     AC1663396;
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Str_Group_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?Item Structure Group
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Item Str Group Desc DRV = CON.*ALL
TOP_Item_Str_Group_Desc_DRV = *ALL;

ENDIF;

//?Item Structure Class
CASE;

// IF TOP.Item Structure Class Code is Entered
IF TOP_Item_Structure_Class_Code <> *ZERO;

EXECUTE FUNCTION(Item Str Class Desc DRV) TYPE(DRVFLD)                          AC1705173;
PARAMETER(TOP_Item_Str_Class_Desc_DRV);
PARAMETER(TOP_Item_Structure_Class_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Class Desc    RT) TYPE(RTVOBJ) FILE(OMFAREP)          AC1205440;
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Str_Class_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?Item Structure Class
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Item Str Class Desc DRV = CON.*ALL
TOP_Item_Str_Class_Desc_DRV = *ALL;

ENDIF;

//?Item type code
CASE;

// IF TOP.Item Type Code is Entered
IF TOP_Item_Type_Code <> *BLANK;

// TOP.Item Type Desc Usr = Condition name of TOP.Item Type Code
TOP_Item_Type_Desc_Usr = RTVCND(TOP_Item_Type_Code);

//?Item type code
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Item Type Desc Usr = CON.Both FG/WIP
TOP_Item_Type_Desc_Usr = 'Both FG/WIP';

ENDIF;

//?Meat Cost Group                              05/03/2007 LJB OMS011
CASE;

// IF TOP.TFMC Group Code is Entered
IF TOP_TFMC_Group_Code <> *BLANK;

EXECUTE FUNCTION(RTV TF Meat Cost Desc  RT) TYPE(RTVOBJ) FILE(PMAPREP)          AC1818482;
PARAMETER(TOP_TFMC_Group_Code);
PARAMETER(TOP_TFMC_Group_Description);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Meat Cost Group                              05/03/2007 LJB OMS011
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.TFMC Group Description = CON.*ALL
TOP_TFMC_Group_Description = *ALL;

ENDIF;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

// SUPPRESSED PRINT Sequence Number header format

// SUPPRESSED PRINT TF Classification Code header format

// SUPPRESSED PRINT Item Structure Type Code header format

// SUPPRESSED PRINT Item Structure Group Code header format

// SUPPRESSED PRINT Item Structure Class Code header format

//?USER: On print of detail format

EXECUTE FUNCTION(Rtv TF Class Info     RT) TYPE(RTVOBJ) FILE(PPAMREP)           AC1719727;
PARAMETER(CUR.TF_Classification_Code);
PARAMETER(NLL.Sequence_Number);
PARAMETER(NLL.TF_Class_Group);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv TF Margin Adj Hdr RT) TYPE(RTVOBJ) FILE(PPANREP)           AC1719728;
PARAMETER(CUR.TF_Classification_Code);
PARAMETER(CUR.Item_Structure_Type_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CUR.Status Flag 6  Y/N = DB1.Include In Mix
CUR.Status_Flag_6_Y_N = DB1.Include_In_Mix;

// CUR.Status Flag 7  Y/N = DB1.Include In Vol Margins
CUR.Status_Flag_7_Y_N = DB1.Include_In_Vol_Margins;

// CUR.Status Flag 8  Y/N = DB1.Include In Inventory
CUR.Status_Flag_8_Y_N = DB1.Include_In_Inventory;

// WRK.Print Yes/No          USR = CND.No
WRK.Print_Yes_No_USR = 'N';

EXECUTE FUNCTION(Item Str Type Desc DRV) TYPE(DRVFLD)                           AC1705175;
PARAMETER(CUR.Item_Str_Type_Desc_DRV);
PARAMETER(CUR.Item_Structure_Type_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Type Description   RT) TYPE(RTVOBJ) FILE(OME8REP)          AC1229616;
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Str_Type_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Item Str Group Desc DRV) TYPE(DRVFLD)                          AC1705174;
PARAMETER(CUR.Item_Str_Group_Desc_DRV);
PARAMETER(CUR.Item_Structure_Group_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Group Desc) TYPE(RTVOBJ) FILE(OME9REP)                     AC1663396;
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Str_Group_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Item Str Class Desc DRV) TYPE(DRVFLD)                          AC1705173;
PARAMETER(CUR.Item_Str_Class_Desc_DRV);
PARAMETER(CUR.Item_Structure_Class_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Class Desc    RT) TYPE(RTVOBJ) FILE(OMFAREP)          AC1205440;
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Str_Class_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// CUR.TF Class Group = DB1.TF Class Group
CUR.TF_Class_Group = DB1.TF_Class_Group;

// CUR.TFMC Group Code = DB1.TFMC Group Code
CUR.TFMC_Group_Code = DB1.TFMC_Group_Code;

// CUR.TF % Owned = DB1.TF % Owned
CUR.TF_Pct_Owned = DB1.TF_Pct_Owned;

//?Converted Raw Material Description
CASE;

// IF CUR.Converted Raw Material is Converted
IF CUR.Converted_Raw_Material = 'C';

// CUR.Condition Desc. 1  USR = Condition name of CUR.Converted Raw Material
CUR.Condition_Desc_1_USR = RTVCND(CUR.Converted_Raw_Material);

// LCL.Display Flag = CND.Yes
LCL.Display_Flag = 'Y';

//?Converted Raw Material Description
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Condition Desc. 1  USR = CON.*BLANK
CUR.Condition_Desc_1_USR = *BLANK;

// LCL.Display Flag = CND.No
LCL.Display_Flag = 'N';

ENDIF;

//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : Prt TF Class ItmsAdSelPO
CASE;

// IF PAR.Report Type is Summary
IF PAR.Report_Type = 'S';

QUIT;

ENDIF;

EXECUTE FUNCTION(Prt TF Class ItmsAdSelPO) TYPE(PRTOBJ);
PARAMETER(CUR.Item_Structure_Type_Code);
PARAMETER(CUR.Item_Structure_Group_Code);
PARAMETER(CUR.Item_Structure_Class_Code);
PARAMETER(CUR.TF_Classification_Code);
PARAMETER(CUR.Include_Sts);
PARAMETER(CUR.TF_Pct_Owned);
PARAMETER(PAR.Print_Information_USR);
PARAMETER(PAR.Active_Status_Flag);
PARAMETER(PAR.Include_Credit_Items_USR);
PARAMETER(PAR.Change_Flag_USR);
PARAMETER(PAR.Item_Type_Code);
PARAMETER(CUR.Co_Own_Producing_Co_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Print required level totals

// SUPPRESSED PRINT Item Structure Class Code totals format

// SUPPRESSED PRINT Item Structure Group Code totals format

CASE;

IF NEW Item_Structure_Type_Code;
// Print Item Structure Type Code totals format
PRINT Item Structure Type Code totals format;

ENDIF;

CASE;

IF NEW TF_Classification_Code;
// Print TF Classification Code totals format
PRINT TF Classification Code totals format;

ENDIF;

// SUPPRESSED PRINT Sequence Number totals format

