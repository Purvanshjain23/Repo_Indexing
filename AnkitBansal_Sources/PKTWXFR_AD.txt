// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKTWXFR
// ?Date: 14.08.2025 Time: 02:50:28
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?MODIFICATIONS
//?11/02/2020 ISE H16853 - CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
EXECUTE FUNCTION(Rtv/Chg Ttt's Rsl,Lv  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1149985;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Live_Purchase_UOM);
PARAMETER(PAR.TH_Live_Purchase_Price);
PARAMETER(PAR.TH_Resale_UOM);
PARAMETER(PAR.TH_Recalc_Live_Wgt_Yld);
PARAMETER(PAR.TH_Resale_Spread_Sts);
PARAMETER(PAR.TH_Calc_Net_Sts);
PARAMETER(PAR.TH_Payment_Sts);
{
 //?USER: Process Data record

 //?** OLD:  Chg Tattoo Header   CH * Tattoo Header ** (PKP)
 EXECUTE FUNCTION(Chg Ttt's Rsl,Lv      CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1190727;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(PAR.TH_Live_Purchase_UOM);
 PARAMETER(PAR.TH_Live_Purchase_Price);
 PARAMETER(PAR.TH_Resale_UOM);
 PARAMETER(PAR.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(PAR.TH_Resale_Spread_Sts);
 PARAMETER(PAR.TH_Calc_Net_Sts);
 PARAMETER(PAR.TH_Payment_Sts);
 {
  //?USER: Processing before Data read

  EXECUTE FUNCTION(HPE056 Payment Type) TYPE(EXCINTFUN)                           AB1189849;
  {
   //?Execute internal function

   //?1/10/96  HPE056   Allow payment type to be update based on
   //?                  what the payment status is at the time this
   //?                  tattoo is being updated
  }

  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

  EXECUTE FUNCTION(Chg/Crt Tatto/Spc Flds IF) TYPE(EXCINTFUN)                     AB1189848;
  PARAMETER(DB1.TH_Payment_Sts);
  PARAMETER(DB1.TH_Payment_Type);
  {
   //?Execute internal function

   EXECUTE FUNCTION(HPE056 Payment Type) TYPE(EXCINTFUN)                           AB1189849;
   {
    //?Execute internal function

    //?1/10/96  HPE056   Allow payment type to be update based on
    //?                  what the payment status is at the time this
    //?                  tattoo is being updated
   }

   //?Function Description:  If there are any fields that need to be
   //?Changed/Created during the Change functions or Create function
   //?Presently: Payment Type
   //?Add this routine to all of the change objects and create object
   //?that update the Payment Type
   CASE;

   // IF PAR.TH Payment Sts is Live anything
   IF PAR.TH_Payment_Sts = 'ML'/'PL'/'NL'/'SL'/'IL';

   // PAR.TH Payment Type = CND.Live
   PAR.TH_Payment_Type = 'L';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.TH Payment Type = CND.Carcass Merit
   PAR.TH_Payment_Type = 'C';

   ENDIF;

  }

 }

}


//?The records are already being changed inside the above retrieve.
//?* OLD:  Chg Tattoo Header   CH * Tattoo Header ** (PKP)
EXECUTE FUNCTION(Chg Tattoo Hdr        CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1190872;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TH_Purchase_Date);
PARAMETER(PAR.TH_Group_Reference);
PARAMETER(PAR.TH_Live_Purchase_UOM);
PARAMETER(PAR.TH_Live_Purchase_Price);
PARAMETER(PAR.TH_Live_Gross_Amt);
PARAMETER(PAR.TH_LIve_Net_Amt);
PARAMETER(PAR.TH_Resale_UOM);
PARAMETER(PAR.TH_Recalc_Live_Wgt_Yld);
PARAMETER(PAR.TH_Pricing_Date);
PARAMETER(PAR.TH_Resale_Spread_Sts);
PARAMETER(PAR.TH_Dead_On_Arrival);
PARAMETER(PAR.TH_Head_Received);
PARAMETER(PAR.TH_Yard_Deads);
PARAMETER(PAR.TH_Held_Over);
PARAMETER(PAR.TH_Head_Condemned);
PARAMETER(PAR.TH_Head_Killed);
PARAMETER(PAR.TH_Head_Adds);
PARAMETER(PAR.TH_Head_Accepted);
PARAMETER(PAR.TH_Live_Wgt);
PARAMETER(PAR.TH_Adj_Live_Wgt);
PARAMETER(PAR.TH_Hot_Wgt);
PARAMETER(PAR.TH_Tot_Loin_Eye_Depth);
PARAMETER(PAR.TH_Tot_Backfat_Inches);
PARAMETER(PAR.TH_Tot_Light_Reflectance);
PARAMETER(PAR.TH_Avg_Live_Wgt);
PARAMETER(PAR.TH_Avg_Hot_Wgt);
PARAMETER(PAR.TH_Avg_Light_Reflectance);
PARAMETER(PAR.TH_Avg_Lean_Percent);
PARAMETER(PAR.TH_Avg_Loin_Eye_Depth);
PARAMETER(PAR.TH_Avg_Backfat);
PARAMETER(PAR.TH_Std_Yield_Percent);
PARAMETER(PAR.TH_Actual_Yield);
PARAMETER(PAR.TH_Adj_Actual_Yield);
PARAMETER(PAR.TH_Yield_Difference);
PARAMETER(PAR.TH_Recalc_Live_Wgt);
PARAMETER(PAR.TH_CM_Market_Price);
PARAMETER(PAR.TH_CM_Base_Mkt_Price);
PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(PAR.TH_CM_Sort_Discount_Amt);
PARAMETER(PAR.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(PAR.TH_CM_Base_Carcass_Value);
PARAMETER(PAR.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(PAR.TH_CM_Carcass_Gross_Amt);
PARAMETER(PAR.TH_Deduction_Amt);
PARAMETER(PAR.TH_Total_Net_WO_Adds);
PARAMETER(PAR.TH_Carcass_Net_Amt);
PARAMETER(PAR.TH_Additions_Amt);
PARAMETER(PAR.TH_Payment_Gross);
PARAMETER(PAR.Th_Payment_Net_Amt);
PARAMETER(PAR.TH_AP_Voucher_Document#);
PARAMETER(PAR.TH_Freight_Amount);
PARAMETER(PAR.TH_Accrual_Amount);
PARAMETER(PAR.TH_Fixed_Cost_Amount);
PARAMETER(PAR.TH_Calc_Net_Sts);
PARAMETER(PAR.TH_Payment_Sts);
PARAMETER(PAR.TH_Header_Error_Sts);
PARAMETER(PAR.TH_Detail_Error_Sts);
PARAMETER(PAR.TH_Kill_Balancing_Sts);
PARAMETER(PAR.TH_Bal_to_Kill_Gen);
PARAMETER(PAR.TH_Commission_A_P_Voucher);
PARAMETER(PAR.TH_Voucher_Payment_Date);
PARAMETER(PAR.TH_User_Error_Override);
PARAMETER(PAR.TH_Held_Over_Record);
PARAMETER(PAR.TH_Sex);
PARAMETER(PAR.TH_Held_Ovr_Completed_Dte);
PARAMETER(PAR.TH_Commission_Paid_Date);
PARAMETER(PAR.TH_Actual_Check_Date);
PARAMETER(PAR.TH_Shipped_Weight);
PARAMETER(PAR.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(PAR.TH_FFLI);
PARAMETER(PAR.TH_Kill_Product_Value);
PARAMETER(PAR.TH_Cut_Product_Value);
PARAMETER(PAR.TH_Render_Product_Value);
PARAMETER(PAR.TH_Head_Excluded);
PARAMETER(PAR.TH_CM_Bse_Mkt_Live_CWT);
PARAMETER(PAR.TH_CM_Bse_Mkt_Carc_CWT);
PARAMETER(PAR.TH_CM_Srt_Dsc_Live_CWT);
PARAMETER(PAR.TH_CM_Srt_Dsc_Carc_CWT);
PARAMETER(PAR.TH_CM_Yld_G_L_Live_CWT);
PARAMETER(PAR.TH_CM_Yld_G_L_Carc_CWT);
PARAMETER(PAR.TH_CM_Crc_Val_Live_CWT);
PARAMETER(PAR.TH_CM_Crc_Val_Carc_CWT);
PARAMETER(PAR.TH_CM_Lean_Prem_Live_CWT);
PARAMETER(PAR.TH_CM_Lean_Prem_Carc_CWT);
PARAMETER(PAR.TH_CM_Gross_Live_CWT);
PARAMETER(PAR.TH_CM_Gross_Carc_CWT);
PARAMETER(PAR.TH_Source_Type);
PARAMETER(PAR.TH_Scale_Ticket_Sts);
PARAMETER(PAR.TH_Payment_Type);
PARAMETER(PAR.TH_HPS_Movement_Ref_#);
PARAMETER(PAR.TH_Source_Code);
PARAMETER(PAR.TH_Hog_Class_Type);
PARAMETER(PAR.TH_Posted_to_HPS_Flag);
PARAMETER(PAR.TH_Schedule_Kill_Shift);
PARAMETER(PAR.TH_Shift_Held_Over);
PARAMETER(PAR.TH_Shift_Held_Over_Head);
PARAMETER(PAR.DF_Defect_Code);
PARAMETER(PAR.THP_Process_Code);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.PL_Location_Code);
PARAMETER(PAR.HB_Buyer_Code);
PARAMETER(PAR.GN_Genetic_Code);
PARAMETER(PAR.HC_Class_Code);
PARAMETER(PAR.RS_User_Changed);
PARAMETER(PAR.RS_Date_Changed);
PARAMETER(PAR.RS_Time_Changed);
PARAMETER(PAR.RS_Record_Status);
PARAMETER(PAR.RS_Job);
PARAMETER(PAR.RS_Program);
PARAMETER(PAR.RS_User_Added);
PARAMETER(PAR.RS_Date_Added);
PARAMETER(PAR.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

 EXECUTE FUNCTION(Chg/Crt Tatto/Spc Flds IF) TYPE(EXCINTFUN)                     AB1189848;
 PARAMETER(DB1.TH_Payment_Sts);
 PARAMETER(DB1.TH_Payment_Type);
 {
  //?Execute internal function

  EXECUTE FUNCTION(HPE056 Payment Type) TYPE(EXCINTFUN)                           AB1189849;
  {
   //?Execute internal function

   //?1/10/96  HPE056   Allow payment type to be update based on
   //?                  what the payment status is at the time this
   //?                  tattoo is being updated
  }

  //?Function Description:  If there are any fields that need to be
  //?Changed/Created during the Change functions or Create function
  //?Presently: Payment Type
  //?Add this routine to all of the change objects and create object
  //?that update the Payment Type
  CASE;

  // IF PAR.TH Payment Sts is Live anything
  IF PAR.TH_Payment_Sts = 'ML'/'PL'/'NL'/'SL'/'IL';

  // PAR.TH Payment Type = CND.Live
  PAR.TH_Payment_Type = 'L';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.TH Payment Type = CND.Carcass Merit
  PAR.TH_Payment_Type = 'C';

  ENDIF;

 }

}


