// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPYMPFR
// ?Date: 14.08.2025 Time: 12:06:46
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('TRF');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


//?** Initialize the flag for null report processing
// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

//?** Initialize flag to print top of page info on first page only
// WRK.Print (Yes/No) USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

//?** Load top of page variables from passed in parms
// WRK.USR From Date = PAR.From Date Pass        USR
WRK.USR_From_Date = PAR.From_Date_Pass_USR;

// WRK.USR To Date = PAR.Thru Date Pass        USR
WRK.USR_To_Date = PAR.Thru_Date_Pass_USR;

// TOP.USR From Date = WRK.USR From Date
TOP_USR_From_Date = WRK.USR_From_Date;

// TOP.USR To Date = WRK.USR To Date
TOP_USR_To_Date = WRK.USR_To_Date;

// TOP.USR Quarter = PAR.USR Quarter
TOP_USR_Quarter = PAR.USR_Quarter;

// WRK.USR Quarter = PAR.USR Quarter
WRK.USR_Quarter = PAR.USR_Quarter;

// TOP.USR Year = PAR.Date 1          PASS  USR
TOP_USR_Year = PAR.Date_1_PASS_USR;

// PAR.Ship To Customer = PAR.Ship to Customer Pass USR
PAR.Ship_To_Customer = PAR.Ship_to_Customer_Pass_USR;

//?USER: Record selection processing

//?** Omit records not in Actual Ship Date Range.
CASE;

// IF DB1.Actual Ship Date LT WRK.USR From Date
IF DB1.Actual_Ship_Date < WRK.USR_From_Date;

// OR DB1.Actual Ship Date GT WRK.USR To Date
OR DB1.Actual_Ship_Date > WRK.USR_To_Date;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

QUIT;

ENDIF;

//?** Select Prepaid only - Shipping method = PR or PT
CASE;

// IF DB1.Shipping Method is Not Prepaid
IF DB1.Shipping_Method = 'CR'/'CT';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?** Select by load start company if requested
CASE;

// IF PAR.Company Number is greater than zero
IF PAR.Company_Number > *ZERO;

// AND PAR.Company Number NE DB1.Company Number
AND PAR.Company_Number <> DB1.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?** Select by Carrier if requested
CASE;

// IF PAR.Carrier Code is entered
IF PAR.Carrier_Code <> *BLANK;

// AND PAR.Carrier Code NE DB1.Carrier Code
AND PAR.Carrier_Code <> DB1.Carrier_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?** Select by ship to if requested
CASE;

// IF PAR.Ship To Customer is not equal to zero
IF PAR.Ship_To_Customer <> *ZERO;

EXECUTE FUNCTION(VAL Ship to on Load    RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1471167;
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(DB1.Load_ID);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF DB1.Ship To Customer EQ PAR.Ship To Customer
 IF DB1.Ship_To_Customer = PAR.Ship_To_Customer;

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

 ENDIF;

}


//?E7402 - Corrected Return Code. Record NF do NOT select record.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?E7402 - Corrected Return Code. Record NF do NOT select record.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** Select by Load ID if requested
CASE;

// IF PAR.Load ID is GT Zero
IF PAR.Load_ID > *ZERO;

// AND PAR.Load ID NE DB1.Load ID
AND PAR.Load_ID <> DB1.Load_ID;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?** Select by Load Type if requested and lt=regular or bulk
CASE;

// IF PAR.Load Type is Bulk or Regular
IF PAR.Load_Type = 'B'/'R';

// AND PAR.Load Type NE DB1.Load Type
AND PAR.Load_Type <> DB1.Load_Type;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?** Select by salesperson if requested
CASE;

// IF PAR.Salesperson Code is entered
IF PAR.Salesperson_Code <> *BLANK;

EXECUTE FUNCTION(RTV Chk Slsprsn on Ord RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1457946;
PARAMETER(DB1.Load_ID);
PARAMETER(PAR.Salesperson_Code);
PARAMETER(LCL.Record_Found_OrdDtlUSR);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(PAR.Salesperson_Code_1);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Salesperson Code EQ PAR.Salesperson Code 1
 IF PAR.Salesperson_Code = PAR.Salesperson_Code_1;

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF LCL.Record Found -OrdDtlUSR is Record Not Found
IF LCL.Record_Found_OrdDtlUSR = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** Select by Unit of Measure if requested
CASE;

// IF PAR.Load U/M is entered
IF PAR.Load_U_M = 'BX'/'CB'/'MX';

// AND DB1.Load U/M NE PAR.Load U/M
AND DB1.Load_U_M <> PAR.Load_U_M;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?** Multiple On Time Reason selections added        08/25/2006
//?** Select by OTR Group, Dept, or Reason if requested
CASE;

// IF PAR.OTR Group Code is entered
IF PAR.OTR_Group_Code <> *BLANK;

// OR PAR.OTR Department Code is entered
OR PAR.OTR_Department_Code <> *BLANK;

// OR PAR.On Time Reason Code is entered
OR PAR.On_Time_Reason_Code <> *BLANK;

//?** Select by OTR Group Code if requested
CASE;

// IF PAR.OTR Group Code is entered
IF PAR.OTR_Group_Code <> *BLANK;

EXECUTE FUNCTION(RTV OTR Reason All InfoRT) TYPE(RTVOBJ) FILE(PPB5REP)          AC1783809;
PARAMETER(DB1.LH_On_Time_Reason_Code);
PARAMETER(NLL.OTR_Description);
PARAMETER(NLL.OTR_Department_Code);
PARAMETER(NLL.OTR_Dept_Description);
PARAMETER(WRK.OTR_Group_Code);
PARAMETER(NLL.OTR_Group_Description);
PARAMETER(NLL.Record_Status);
PARAMETER(NLL.Create_Date);
PARAMETER(NLL.Create_Time);
PARAMETER(NLL.Create_User);
PARAMETER(NLL.Create_Program);
PARAMETER(NLL.Change_Date);
PARAMETER(NLL.Change_Time);
PARAMETER(NLL.Change_User);
PARAMETER(NLL.Change_Program);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?E7402 - Corrected Return Code. Record NF do NOT select record.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?E7402 - Corrected Return Code. Record NF do NOT select record.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF WRK.OTR Group Code NE PAR.OTR Group Code
IF WRK.OTR_Group_Code <> PAR.OTR_Group_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** Select by OTR Dept Code if requested
CASE;

// IF PAR.OTR Department Code is entered
IF PAR.OTR_Department_Code <> *BLANK;

EXECUTE FUNCTION(RTV OTR Dept/Reas      RT) TYPE(RTVOBJ) FILE(PPB5REP)          AC1791871;
PARAMETER(DB1.LH_On_Time_Reason_Code);
PARAMETER(NLL.OTR_Description);
PARAMETER(PAR.OTR_Department_Code);
PARAMETER(NLL.OTR_Dept_Description);
PARAMETER(NLL.OTR_Group_Code);
PARAMETER(NLL.OTR_Group_Description);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?E7402 - Corrected Return Code. Record NF do NOT select record.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?E7402 - Corrected Return Code. Record NF do NOT select record.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** Select by OTR reason Code if requested
CASE;

// IF PAR.On Time Reason Code is entered
IF PAR.On_Time_Reason_Code <> *BLANK;

CASE;

// IF DB1.LH On-Time Reason Code NE PAR.On Time Reason Code
IF DB1.LH_On_Time_Reason_Code <> PAR.On_Time_Reason_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?** Exclude Export, Include only if requested
CASE;

// IF PAR.Status - Y or N is yes
IF PAR.Status_Y_or_N = 'Y';

// AND DB1.Export Status is yes
AND DB1.Export_Status = 'Y';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process top of page

//?** Put requested parms in the top of page parms
// TOP.Company Number = PAR.Company Number
TOP_Company_Number = PAR.Company_Number;

//?** par Actual Ship Date contains the week end date
//?** If quarter passed in, zero out week end date on report
CASE;

// IF PAR.USR Quarter is Valid Values
IF PAR.USR_Quarter = '1'/'2'/'3'/'4';

// TOP.Scheduled Ship Date = CON.*ZERO
TOP_Scheduled_Ship_Date = *ZERO;

//?** If quarter passed in, zero out week end date on report
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Scheduled Ship Date = PAR.Actual Ship Date
TOP_Scheduled_Ship_Date = PAR.Actual_Ship_Date;

ENDIF;

// TOP.Load ID = PAR.Load ID
TOP_Load_ID = PAR.Load_ID;

// TOP.Load Type = PAR.Load Type
TOP_Load_Type = PAR.Load_Type;

// TOP.Load Type Desc = Condition name of TOP.Load Type
TOP_Load_Type_Desc = RTVCND(TOP_Load_Type);

// TOP.Carrier Code = PAR.Carrier Code
TOP_Carrier_Code = PAR.Carrier_Code;

//?** Currently (6/06) salesperson is not used, but this may change
//?** so code is being left in but the field on the report is hidden
//?** Well, this is finally activated, after 9 years.  E003965
// TOP.Salesperson Code = PAR.Salesperson Code
TOP_Salesperson_Code = PAR.Salesperson_Code;

// TOP.Load U/M = PAR.Load U/M
TOP_Load_U_M = PAR.Load_U_M;

// TOP.Export Status Dft = PAR.Status - Y or N
TOP_Export_Status_Dft = PAR.Status_Y_or_N;

// TOP.OTR Group Code = PAR.OTR Group Code
TOP_OTR_Group_Code = PAR.OTR_Group_Code;

// TOP.OTR Department Code = PAR.OTR Department Code
TOP_OTR_Department_Code = PAR.OTR_Department_Code;

// TOP.On Time Reason Code = PAR.On Time Reason Code
TOP_On_Time_Reason_Code = PAR.On_Time_Reason_Code;

//?** Put *ALL in the description if nothing is requested
//?** Print *ALL if no On Time Reason, Group or Department
CASE;

// IF PAR.OTR Group Code is not entered
IF PAR.OTR_Group_Code = *BLANK;

// AND PAR.OTR Department Code is not entered
AND PAR.OTR_Department_Code = *BLANK;

// AND PAR.On Time Reason Code is not entered
AND PAR.On_Time_Reason_Code = *BLANK;

// TOP.Text USR 4 = CON.*ALL
TOP_Text_USR_4 = *ALL;

//?** Print *ALL if no On Time Reason, Group or Department
// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

//?** Retrieve Company Name or default to *All
CASE;

// IF TOP.Company Number is greater than zero
IF TOP_Company_Number > *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(TOP_Company_Number);
PARAMETER(TOP_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Retrieve Company Name or default to *All
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Company Name = CON.*ALL
TOP_Company_Name = *ALL;

ENDIF;

//?** Retrieve Carrier description or default to *All
CASE;

// IF PAR.Carrier Code is entered
IF PAR.Carrier_Code <> *BLANK;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(TOP_Carrier_Code);
PARAMETER(TOP_Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?** Retrieve Carrier description or default to *All
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Name = CON.*ALL
TOP_Name = *ALL;

ENDIF;

//?** Currently (6/06) salesperson is not used, but this may change
//?** so code is being left in but the field on the report is hidden
//?** Retrieve Salesperson name or default to *All
CASE;

// IF PAR.Salesperson Code is entered
IF PAR.Salesperson_Code <> *BLANK;

EXECUTE FUNCTION(RTV Salesperson Name   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1111501;
PARAMETER(TOP_Salesperson_Code);
PARAMETER(TOP_Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Retrieve Salesperson name or default to *All
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Salesperson Name = CON.*ALL
TOP_Salesperson_Name = *ALL;

ENDIF;

//?** Boxes, Combos or *All
CASE;

// IF TOP.Load U/M is Box
IF TOP_Load_U_M = 'BX';

// TOP.Condition Desc. 1  USR = CON.Boxes
TOP_Condition_Desc_1_USR = 'Boxes';

//?** Boxes, Combos or *All
// IF TOP.Load U/M is Combo
IF TOP_Load_U_M = 'CB';

// TOP.Condition Desc. 1  USR = CON.Combos
TOP_Condition_Desc_1_USR = 'Combos';

//?** Boxes, Combos or *All
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Condition Desc. 1  USR = CON.*ALL
TOP_Condition_Desc_1_USR = *ALL;

ENDIF;

//?** Default text field to *ALL if no Load ID passed in
CASE;

// IF PAR.Load ID is Blank
IF PAR.Load_ID = *ZERO;

// TOP.Blank 6 USR = CON.*ALL
TOP_Blank_6_USR = *ALL;

ENDIF;

//?** Default text field to *ALL if no Unit of Measure is passed in
CASE;

// IF PAR.Load U/M is not entered
IF PAR.Load_U_M = *BLANK;

// TOP.Condition Desc. 1  USR = CON.*ALL
TOP_Condition_Desc_1_USR = *ALL;

ENDIF;

//?** Retrieve condition name of the quarter if passed in
CASE;

// IF PAR.USR Quarter is Valid Values
IF PAR.USR_Quarter = '1'/'2'/'3'/'4';

// TOP.USR Description 18 = Condition name of TOP.USR Quarter
TOP_USR_Description_18 = RTVCND(TOP_USR_Quarter);

ENDIF;

// TOP.Ship To Customer = PAR.Ship To Customer
TOP_Ship_To_Customer = PAR.Ship_To_Customer;

//?Cust name or all
CASE;

// IF TOP.Ship To Customer is not equal to zero
IF TOP_Ship_To_Customer <> *ZERO;

EXECUTE FUNCTION(Customer Name DRV) TYPE(DRVFLD)                                AC1631131;
PARAMETER(TOP_Customer_Name_DRV);
PARAMETER(TOP_Ship_To_Customer);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Customer_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?Cust name or all
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Customer Name DRV = CON.*ALL
TOP_Customer_Name_DRV = *ALL;

ENDIF;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

// SUPPRESSED PRINT Actual Ship Date header format

CASE;

IF NEW Carrier_Code;
// SUPPRESSED PRINT Carrier Code header format

ENDIF;

//?USER: On print of detail format

//?** Count number of records that made it to this point, that is,
//?** all records that meet the record selection criteria entered
//?** on the prompt screen
// PAR.USR Total Number Records = PAR.USR Total Number Records + CON.1
PAR.USR_Total_Number_Records = PAR.USR_Total_Number_Records + 1;

// WRK.Print (Yes/No) USR = CND.No
WRK.Print_Yes_No_USR = 'N';

//?** Fill the load header line fields
EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DB1.Carrier_Code);
PARAMETER(CUR.USR_Carrier_Name_4);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


// CUR.Load U/M = DB1.Load U/M
CUR.Load_U_M = DB1.Load_U_M;

// CUR.LH On-Time Reason Code = DB1.LH On-Time Reason Code
CUR.LH_On_Time_Reason_Code = DB1.LH_On_Time_Reason_Code;

//?** Put On Time Reason code description into print field
CASE;

// IF CUR.LH On-Time Reason Code is Blank
IF CUR.LH_On_Time_Reason_Code = *BLANK;

// CUR.USR 15 Text           USR = CON.*BLANK
CUR.USR_15_Text_USR = *BLANK;

// CUR.LH On-Time Reason Code = CND.Blank
CUR.LH_On_Time_Reason_Code = *BLANK;

//?** Put On Time Reason code description into print field
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV OTR Reason All InfoRT) TYPE(RTVOBJ) FILE(PPB5REP)          AC1783809;
PARAMETER(CUR.LH_On_Time_Reason_Code);
PARAMETER(CUR.USR_15_Text_USR);
PARAMETER(WRK.OTR_Department_Code);
PARAMETER(WRK.OTR_Dept_Description);
PARAMETER(WRK.OTR_Group_Code);
PARAMETER(WRK.OTR_Group_Description);
PARAMETER(WRK.Record_Status);
PARAMETER(WRK.Create_Date);
PARAMETER(WRK.Create_Time);
PARAMETER(WRK.Create_User);
PARAMETER(WRK.Create_Program);
PARAMETER(WRK.Change_Date);
PARAMETER(WRK.Change_Time);
PARAMETER(WRK.Change_User);
PARAMETER(WRK.Change_Program);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// CUR.Trailer ID USR = CUR.Trailer Id
CUR.Trailer_ID_USR = CUR.Trailer_Id;

// CUR.Export Status = DB1.Export Status
CUR.Export_Status = DB1.Export_Status;

// CUR.Actual Ship Date = DB1.Actual Ship Date
CUR.Actual_Ship_Date = DB1.Actual_Ship_Date;

// CUR.Scheduled Ship Date = DB1.Scheduled Ship Date
CUR.Scheduled_Ship_Date = DB1.Scheduled_Ship_Date;

//?** Fill in Held Over Reason in the header line
CASE;

// IF CUR.Load Held Over Reason is *blank
IF CUR.Load_Held_Over_Reason = *BLANK;

// CUR.USR Text 7            USR = CON.*BLANK
CUR.USR_Text_7_USR = *BLANK;

//?** Fill in Held Over Reason in the header line
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Text 7            USR = Condition name of CUR.Load Held Over Reason
CUR.USR_Text_7_USR = RTVCND(CUR.Load_Held_Over_Reason);

ENDIF;

//?** Format time fields to fit on the report
// CUR.BOL Complete Time,4.0 USR = DB1.BOL Complete Time / CON.100 *
CUR.BOL_Complete_Time4_0_USR = DB1.BOL_Complete_Time / 100;

// CUR.USR Picked Up Time = DB1.Truck Departure Time / CON.100 *
CUR.USR_Picked_Up_Time = DB1.Truck_Departure_Time / 100;

// CUR.Deadline Depart Time 4,0 = DB1.Deadline Departure Time / CON.100 *
CUR.Deadline_Depart_Time_40 = DB1.Deadline_Departure_Time / 100;

// CUR.BOL Time = DB1.BOL Received Time / CON.100 *
CUR.BOL_Time = DB1.BOL_Received_Time / 100;

//?** Format date fields to fit on the report
// CUR.BOL Complete Date MMDD = DB1.BOL Complete Date
CUR.BOL_Complete_Date_MMDD = DB1.BOL_Complete_Date;

// CUR.Deadline Departure MM/DD = DB1.Deadline Departure Date
CUR.Deadline_Departure_MM_DD = DB1.Deadline_Departure_Date;

// CUR.Truck Departure MM/DD = DB1.Truck Departure Date
CUR.Truck_Departure_MM_DD = DB1.Truck_Departure_Date;

// CUR.BOL Date mm/dd = DB1.BOL Received Date
CUR.BOL_Date_mm_dd = DB1.BOL_Received_Date;

// PAR.Record Selected       USR = CND.yes
PAR.Record_Selected_USR = 'Y';

//?** Get the On Time Reason Group code
//?**************************************************************************
//?** Accumulate counts into Final Totals
// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

//?** If Actual Ship Date is within date range, then add to totals
CASE;

// IF CUR.Actual Ship Date GE WRK.USR From Date
IF CUR.Actual_Ship_Date >= WRK.USR_From_Date;

// AND CUR.Actual Ship Date LE WRK.USR To Date
AND CUR.Actual_Ship_Date <= WRK.USR_To_Date;

//?** Accumulate Loads Checked on in Quantity Ordered 1 USR
CASE;

// IF DB1.On Time - (Y/N) is Y/N Values
IF DB1.On_Time_Y_N = 'N'/'Y';

// PAR.Quantity Ordered 1 USR = PAR.Quantity Ordered 1 USR + CON.1
PAR.Quantity_Ordered_1_USR = PAR.Quantity_Ordered_1_USR + 1;

ENDIF;

//?** Process all loads that are late  & Crt XLS workfile if selected
CASE;

// IF DB1.On Time - (Y/N) is no
IF DB1.On_Time_Y_N = 'N';

//?** Accumulate Late Loads Shipped in Quantity Ordered 2 USR
// PAR.Quantity Ordered 2 USR = PAR.Quantity Ordered 2 USR + CON.1
PAR.Quantity_Ordered_2_USR = PAR.Quantity_Ordered_2_USR + 1;

//?** Count this record in the OTR Work file.
EXECUTE FUNCTION(RTV OTR Reason All InfoRT) TYPE(RTVOBJ) FILE(PPB5REP)          AC1783809;
PARAMETER(DB1.LH_On_Time_Reason_Code);
PARAMETER(WRK.OTR_Description);
PARAMETER(WRK.OTR_Department_Code);
PARAMETER(WRK.OTR_Dept_Description);
PARAMETER(WRK.OTR_Group_Code);
PARAMETER(WRK.OTR_Group_Description);
PARAMETER(WRK.Record_Status);
PARAMETER(WRK.Create_Date);
PARAMETER(WRK.Create_Time);
PARAMETER(WRK.Create_User);
PARAMETER(WRK.Create_Program);
PARAMETER(WRK.Change_Date);
PARAMETER(WRK.Change_Time);
PARAMETER(WRK.Change_User);
PARAMETER(WRK.Change_Program);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV/Chg OTR Work       RT) TYPE(RTVOBJ) FILE(PPB6CPP)          AC1784874;
PARAMETER(DB1.LH_On_Time_Reason_Code);
PARAMETER(WRK.OTR_Group_Code);
PARAMETER(WRK.OTR_Department_Code);
{
 //?USER: Processing if Data record not found

 //?** Default quantity to 1 when creating a new record
 EXECUTE FUNCTION(CRT OTR Work           CR) TYPE(CRTOBJ) FILE(PPB6CPP)          AC1784875;
 PARAMETER(PAR.On_Time_Reason_Code);
 PARAMETER(PAR.OTR_Group_Code);
 PARAMETER(PAR.OTR_Department_Code);
 PARAMETER(1);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(RTV OTR Reason All InfoRT) TYPE(RTVOBJ) FILE(PPB5REP)          AC1783809;
  PARAMETER(DB1.On_Time_Reason_Code);
  PARAMETER(WRK.OTR_Description);
  PARAMETER(DB1.OTR_Department_Code);
  PARAMETER(WRK.OTR_Dept_Description);
  PARAMETER(DB1.OTR_Group_Code);
  PARAMETER(WRK.OTR_Group_Description);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // DB1.OTR Quantity = CON.1
  DB1.OTR_Quantity = 1;

 }

 //?USER: Process Data record

 //?** Add 1 to the number of records counter
 // PAR.OTR Quantity = DB1.OTR Quantity + CON.1
 PAR.OTR_Quantity = DB1.OTR_Quantity + 1;

 EXECUTE FUNCTION(CHG OTR Work           CH) TYPE(CHGOBJ) FILE(PPB6CPP)          AC1784894;
 PARAMETER(DB1.On_Time_Reason_Code);
 PARAMETER(DB1.OTR_Group_Code);
 PARAMETER(DB1.OTR_Department_Code);
 PARAMETER(PAR.OTR_Quantity);
 PARAMETER(DB1.CTL_Number_of_Times);
 PARAMETER(DB1.Extra_Number_1);
 PARAMETER(DB1.Extra_Number_2);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
}


// PGM.*Print format = CND.Print format
PGM.*Print_format = 'Y';

//?RMC 2/13/20 create workfile if xls parm is Yes
CASE;

// IF PAR.USR Confirm Status (Y/N) is Yes
IF PAR.USR_Confirm_Status_Y_N = 'Y';

EXECUTE FUNCTION(RTV 1st Ord Rqs DlvDTm RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC2181520;
PARAMETER(LCL.Requested_Delivery_Date);
PARAMETER(LCL.Requested_Delivery_Time);
PARAMETER(CUR.Load_ID);
{
 //?USER: Initialize routine

 // LCL.First Time Flag = CND.Yes
 LCL.First_Time_Flag = 'Y';

 //?USER: Process Data record

 CASE;

 // IF LCL.First Time Flag is Yes
 IF LCL.First_Time_Flag = 'Y';

 // LCL.First Time Flag = CND.NO
 LCL.First_Time_Flag = 'N';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


EXECUTE FUNCTION(Crt Late Delv XLS    CR) TYPE(CRTOBJ) FILE(PDM7CPP)            AC1560362;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Load_ID);
PARAMETER(CUR.Scheduled_Ship_Date);
PARAMETER(CUR.LTL_Flag);
PARAMETER(CUR.Load_Status);
PARAMETER(CUR.Total_Load_Order_Weight);
PARAMETER(CUR.Flat_Amount);
PARAMETER(CUR.Allocate_Pounds_Miles);
PARAMETER(CUR.Total_Stops);
PARAMETER(CUR.Trailer_Id);
PARAMETER(CUR.Carrier_Code);
PARAMETER(CUR.Truck_Size);
PARAMETER(CUR.Ship_Status);
PARAMETER(CUR.Load_Type);
PARAMETER(CUR.Number_Pallets_Loaded);
PARAMETER(CUR.Actual_Departure_Date);
PARAMETER(CUR.Departure_Time);
PARAMETER(CUR.Schedule_Sequence_Number);
PARAMETER(CUR.Total_Load_Miles);
PARAMETER(CUR.Shipping_Method);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(CUR.Ship_To_State_Code);
PARAMETER(CUR.Carrier_Code);
PARAMETER(CUR.Export_Status);
PARAMETER(CUR.Actual_Ship_Date);
PARAMETER(CUR.On_Time_Y_N);
PARAMETER(CUR.Truck_Ready_Date);
PARAMETER(CUR.Truck_Ready_Time);
PARAMETER(CUR.Spotted_Date);
PARAMETER(CUR.Spotted_Time);
PARAMETER(CUR.Load_Finished_Date);
PARAMETER(CUR.Load_Finished_Time);
PARAMETER(CUR.BOL_Complete_Date);
PARAMETER(CUR.BOL_Complete_Time);
PARAMETER(CUR.BOL_Complete_Date);
PARAMETER(CUR.BOL_Received_Time);
PARAMETER(CUR.Truck_Departure_Date);
PARAMETER(CUR.Truck_Departure_Time);
PARAMETER(CUR.Adjusted_Departure_Date);
PARAMETER(CUR.Adjusted_Departure_Time);
PARAMETER(CUR.Shipping_Line);
PARAMETER(CUR.Port_Delv_Terminal);
PARAMETER(CUR.Vessel_Name);
PARAMETER(CUR.Voyage);
PARAMETER(CUR.Sail_Date);
PARAMETER(CUR.Booking_Number);
PARAMETER(CUR.Discharge_Port);
PARAMETER(CUR.Arrival_Date);
PARAMETER(CUR.Container_Number);
PARAMETER(CUR.Load_Total_Freight);
PARAMETER(CUR.Scheduled_Delivery_Date);
PARAMETER(CUR.Scheduled_Delivery_Time);
PARAMETER(CUR.LH_Unused_Sts);
PARAMETER(LCL.On_Time_Date);
PARAMETER(CUR.Load_Acceptance_Flag);
PARAMETER(CUR.On_Yard_Date);
PARAMETER(CUR.On_Yard_Time);
PARAMETER(CUR.Deadline_Departure_Date);
PARAMETER(DB1.Deadline_Departure_Time);
PARAMETER(CUR.Load_Held_Over);
PARAMETER(CUR.Load_Held_Over_Reason);
PARAMETER(CUR.Load_Shag_Flag);
PARAMETER(CUR.Load_Wash_Flag);
PARAMETER(CUR.EDI_Status_1);
PARAMETER(CUR.Job_Time);
PARAMETER(CUR.User_Id);
PARAMETER(DB1.Load_U_M);
PARAMETER(CUR.Job_Name);
PARAMETER(JOB.*Job_date);
PARAMETER(LCL.Requested_Delivery_Date);
PARAMETER(LCL.Requested_Delivery_Time);
PARAMETER(CUR.Actual_Delivery_Date);
PARAMETER(CUR.Actual_Delivery_time);
PARAMETER(CUR.LH_On_Time_Reason_Code);
PARAMETER(CUR.USR_15_Text_USR);
PARAMETER(CUR.USR_Carrier_Name_4);
PARAMETER(CUR.LPT_Load_Plan_Start_Tm);

ENDIF;

ENDIF;

ENDIF;

//?** Document which quantity fields are used for which load counts
//?Quantity Ordered 1 USR = Total Checked On Loads
//?     That is, total count of On Time-Y/N with either Y or N but
//?     not blanks.
//?Quantity Ordered 2 USR = Total Late Loads
//?     That is, total count of On Time-Y/N = Y
//?USR Total Number Records = Total Loads Requested
//?     That is, total count of Load Header records read and reach
//?     this point without being filtered out.
//?Quantity 7.0 USR = Count of records for OTR Group (S, T, W right now)
//?     Currently there is only Carrier, Seaboard, and Weather (C,S,W)
//?USR Percent Work, 7.2 = Percent On Time for final total loads
//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : PRT Late Deliv Rpt-2   PO
CASE;

// IF PGM.*Print format is Do not print format
IF PGM.*Print_format = 'N';

QUIT;

ENDIF;

EXECUTE FUNCTION(PRT Late Deliv Rpt-2   PO) TYPE(PRTOBJ);
PARAMETER(CUR.Load_ID);
PARAMETER(1);
PARAMETER(2);

//?USER: Print required level totals

// SUPPRESSED PRINT Carrier Code totals format

// SUPPRESSED PRINT Actual Ship Date totals format

//?PRTOBJ calls before print of final totals format

//?Embedded PRTOBJ : PRT Group/Dept Totals  PO
//?** Print the totals for the On Time Reason Departments and Groups
// WRK.OTR Department Code = CON.*BLANK
WRK.OTR_Department_Code = *BLANK;

// WRK.OTR Group Code = CON.*BLANK
WRK.OTR_Group_Code = *BLANK;

EXECUTE FUNCTION(PRT Group/Dept Totals  PO) TYPE(PRTOBJ);
PARAMETER(PAR.USR_Total_Number_Records);
PARAMETER(WRK.OTR_Group_Code);
PARAMETER(WRK.OTR_Department_Code);
PARAMETER(PAR.Quantity_Ordered_2_USR);

//?USER: On print of final totals format

//?** Calculate On Time Final Totals and Percentages
//?** Total Records in the Date Range and/or filter
// CUR.USR Total Number Records = PAR.USR Total Number Records
CUR.USR_Total_Number_Records = PAR.USR_Total_Number_Records;

//?** Total Number of Late Loads
// CUR.Quantity Ordered 2 USR = PAR.Quantity Ordered 2 USR
CUR.Quantity_Ordered_2_USR = PAR.Quantity_Ordered_2_USR;

//?** Total Loads checked on by someone
// CUR.Quantity Ordered 1 USR = PAR.Quantity Ordered 1 USR
CUR.Quantity_Ordered_1_USR = PAR.Quantity_Ordered_1_USR;

//?Calculate final totals 'Percent On Time'
CASE;

// IF CUR.USR Total Number Records NE WRK.ZERO
IF CUR.USR_Total_Number_Records <> WRK.ZERO;

// Calc "Total Late"
CUR.USR_Percent_Work_7_2_2 = ( CUR.Quantity_Ordered_2_USR / CUR.USR_Total_Number_Records           +
'H' ) * 100 'H';

ENDIF;

// CUR.USR Percent Work, 7.2 = CON.100 - CUR.USR Percent Work, 7.2  2
CUR.USR_Percent_Work_7_2 = 100 - CUR.USR_Percent_Work_7_2_2;

