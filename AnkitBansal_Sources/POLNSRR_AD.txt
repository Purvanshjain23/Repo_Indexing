// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POLNSRR
// ?Date: 14.08.2025 Time: 03:37:55
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?** Pass either Override Total Load Miles or Total Load Miles
//?** in the PAR.Total Load Miles field         E00207
EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Load subfile record from DBF record

//?OMIT: Record Status = Deleted or Inactive
CASE;

// IF RCD.Record Status is Deleted & Inactive
IF RCD.Record_Status = 'D'/'I';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process selected line

MOVE *ALL (To: PAR From: RCD);

//?** Pass Override miles or Total miles          E00207
EXECUTE FUNCTION(Clc Frt Charge UOM    IF) TYPE(EXCINTFUN)                      AC1627439;
PARAMETER(RCD.FC_Rate_Amount);
PARAMETER(RCD.FC_Unit_of_Measure);
PARAMETER(RCD.FC_Frt_Add_Deduct);
PARAMETER(RCD.FC_Special_Type);
PARAMETER(PAR.Total_Load_Miles);
PARAMETER(PAR.Total_Stops);
PARAMETER(PAR.LFC_Amount);
PARAMETER(RCD.FC_Rate_Amount);
PARAMETER(PAR.Carrier_Code);
{
 //?Execute internal function

 //?** Pass either Override Total Load Miles or Total Load Miles
 //?** in the PAR.Total Load Miles field              E00207
 CASE;

 // IF PAR.FC Unit of Measure is Flat
 IF PAR.FC_Unit_of_Measure = 'FL';

 // Flat Amount
 PAR.LFC_Amount = PAR.Freight_Rate_USR * 1 'H';

 // IF PAR.FC Unit of Measure is Mile
 IF PAR.FC_Unit_of_Measure = 'ML';

 // PAR.LFC Amount = PAR.Freight Rate USR * PAR.Total Load Miles *Rounded
 PAR.LFC_Amount = PAR.Freight_Rate_USR * PAR.Total_Load_Miles 'H';

 // IF PAR.FC Unit of Measure is Stop
 IF PAR.FC_Unit_of_Measure = 'ST';

 EXECUTE FUNCTION(Rtv Stop Charge Amt   RT) TYPE(RTVOBJ) FILE(PMABREP)           AC1799298;
 PARAMETER(PAR.Carrier_Code);
 PARAMETER('STOP');
 PARAMETER(JOB.*Job_date);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Total_Stops);
 PARAMETER(PAR.LFC_Amount);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?First time - save effective date to only read those records
  CASE;

  // IF LCL.CFC Effective Date is not entered
  IF LCL.CFC_Effective_Date = *ZERO;

  // LCL.CFC Effective Date = DB1.CFC Effective Date
  LCL.CFC_Effective_Date = DB1.CFC_Effective_Date;

  ENDIF;

  //?Calc if ...
  CASE;

  // IF DB1.CFC Effective Date NE LCL.CFC Effective Date
  IF DB1.CFC_Effective_Date <> LCL.CFC_Effective_Date;

  // OR PAR.Total Stops is One Stop
  OR PAR.Total_Stops = 1;

  //?Calc if ...
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.CFC Line/Stop Number = DB1.CFC Line/Stop Number + CON.1
  LCL.CFC_Line_Stop_Number = DB1.CFC_Line_Stop_Number + 1;

  CASE;

  // IF LCL.CFC Line/Stop Number LE PAR.Total Stops
  IF LCL.CFC_Line_Stop_Number <= PAR.Total_Stops;

  // PAR.Stop Charge USR = PAR.Stop Charge USR + DB1.CFC Charge Amount
  PAR.Stop_Charge_USR = PAR.Stop_Charge_USR + DB1.CFC_Charge_Amount;

  // LCL.CFC Charge Amount = DB1.CFC Charge Amount
  LCL.CFC_Charge_Amount = DB1.CFC_Charge_Amount;

  ENDIF;

  ENDIF;

  //?USER: Exit processing

  //?If total stops exceeds Tiered stop charges, use the last charge for
  //? the remaining stops
  CASE;

  // IF PAR.Total Stops GT LCL.CFC Line/Stop Number
  IF PAR.Total_Stops > LCL.CFC_Line_Stop_Number;

  // LCL.Total Stops = PAR.Total Stops - LCL.CFC Line/Stop Number
  LCL.Total_Stops = PAR.Total_Stops - LCL.CFC_Line_Stop_Number;

  // WRK.Stop Charge USR = LCL.Total Stops * LCL.CFC Charge Amount *
  WRK.Stop_Charge_USR = LCL.Total_Stops * LCL.CFC_Charge_Amount;

  // PAR.Stop Charge USR = PAR.Stop Charge USR + WRK.Stop Charge USR
  PAR.Stop_Charge_USR = PAR.Stop_Charge_USR + WRK.Stop_Charge_USR;

  ENDIF;

 }

 //?If Tiered stop charges not found
 CASE;

 // IF PAR.LFC Amount is Not Entered
 IF PAR.LFC_Amount = *ZERO;

 // Amount by Stop
 PAR.LFC_Amount = PAR.Freight_Rate_USR * ( PAR.Total_Stops - 1 ) 'H';

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.FC Frt Add/Deduct is Deduct
 IF PAR.FC_Frt_Add_Deduct = 'D';

 // PAR.LFC Amount = PAR.LFC Amount * CON.-1 *Rounded
 PAR.LFC_Amount = PAR.LFC_Amount * -1 'H';

 ENDIF;

}


