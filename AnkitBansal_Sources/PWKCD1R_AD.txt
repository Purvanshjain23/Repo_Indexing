// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PWKCD1R
// ?Date: 14.08.2025 Time: 02:56:41
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification history
DO;

//? 1/30/2020 JBB E16108 - [ME] Delivery Tracking Split for HPS
//?                        This screen is for HPS to view a Delivery
//?                        Screen for a Sales Movement in the HPS
//?                        System.  This function was copied from the
//?                        Edt Delivery Tracking ER function.
//?01/23/2021 ISE H16853 - Increased the length from 5 to 7 and corrected
//?                        the alignment for Buy Order Number field
ENDDO;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


//?USER: Load detail screen from DBF record

// LCL.DT Driver = DB1.DT Driver
LCL.DT_Driver = DB1.DT_Driver;

// LCL.DT Farm Site Code = DB1.DT Farm Site Code
LCL.DT_Farm_Site_Code = DB1.DT_Farm_Site_Code;

// LCL.DT Building = DB1.DT Building
LCL.DT_Building = DB1.DT_Building;

// LCL.DT Room = DB1.DT Room
LCL.DT_Room = DB1.DT_Room;

// LCL.DT Trucker Code HPS Prior = DB1.DT Trucker Code HPS
LCL.DT_Trucker_Code_HPS_Prior = DB1.DT_Trucker_Code_HPS;

//?Get BOL Head shipped -- in case it changed
EXECUTE FUNCTION(Rtv Avg Live Wgt      RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1252631;
PARAMETER(DB1.BOH_Company_Number);
PARAMETER(DB1.BOH_Buy_Order_Number);
PARAMETER(DB1.BOL_Load_Number);
PARAMETER(LCL.TH_Avg_Live_Wgt);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.TH Hog Class Type is Market
 IF DB1.TH_Hog_Class_Type = 'M';

 // AND PAR.TH Avg Live Wgt is EQ Zero
 AND PAR.TH_Avg_Live_Wgt = *ZERO;

 MOVE *ALL (To: PAR From: DB1);

 ENDIF;

}


EXECUTE FUNCTION(Rtv Shipped Head/Spr  RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1303684;
PARAMETER(DB1.BOH_Company_Number);
PARAMETER(DB1.BOH_Buy_Order_Number);
PARAMETER(DB1.BOL_Load_Number);
PARAMETER(WRK.BOL_Truck_Scale_Weigh_Sts);
PARAMETER(DTL.DT_Delivered_Head);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.DT Delivered Weight lbs = DTL.DT Delivered Head * LCL.TH Avg Live Wgt *
DTL.DT_Delivered_Weight_lbs = DTL.DT_Delivered_Head * LCL.TH_Avg_Live_Wgt;

// WRK.Display Output Only Usr = CND.Blank
WRK.Display_Output_Only_Usr = *BLANK;

// DTL.Text description = CON.*BLANK
DTL.Text_description = *BLANK;

//?If Source Type is Internal...
CASE;

// IF DTL.DT Source Type is Internal
IF DTL.DT_Source_Type = 'I';

//?3/4/2014 correct to use the trucker from the drivere
// Call program Val HPS Driver ActOnlyUP.
CALL PROGRAM(Val HPS Driver ActOnlyUP) ('HP292');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(DTL.DT_Driver);
PARAMETER(NLL.HPS_Driver_Name);
PARAMETER(NLL.DT_Transportation_Office);
PARAMETER(NLL.RS_Record_Status);
PARAMETER(NLL.DT_Truck_ID);
PARAMETER(NLL.DT_Trailer_ID);
PARAMETER(DTL.DT_Trucker_Code_HPS);
PARAMETER(NLL.DT_Trucker_Name_Usr_25);
PARAMETER(NLL.MTech_Trucker_Ref);
PARAMETER(NLL.MTech_Driver_Ref);

CASE;

// IF DTL.DT Trucker Code HPS NE LCL.DT Trucker Code HPS Prior
IF DTL.DT_Trucker_Code_HPS <> LCL.DT_Trucker_Code_HPS_Prior;

CASE;

// IF DB1.DT Trucker Code HPS is Entered
IF DB1.DT_Trucker_Code_HPS <> *BLANK;

// DTL.Text description = CONCAT(CON.Prior Trucker,LCL.DT Trucker Code HPS Prior,CON.1)
DTL.Text_description = 'Prior Trucker' + LCL.DT_Trucker_Code_HPS_Prior (1);

// DTL.Text description = CONCAT(DTL.Text description,CON.User must update,CON.1)
DTL.Text_description = DTL.Text_description + 'User must update' (1);

ENDIF;

ENDIF;

// Call program Val HPS Loading Crew  UP.
CALL PROGRAM(Val HPS Loading Crew  UP) ('HP273');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(DB1.DT_Loading_Crew);
PARAMETER(NLL.HPS_Loading_Crew_Desc);
PARAMETER(DTL.DT_Transportation_Office);
PARAMETER(NLL.RS_Record_Status);
PARAMETER(NLL.MTech_Load_Crew_Ref);

ENDIF;

//?If Gate Update flag is Yes, load description
CASE;

// IF DB1.DT GATE UPDATE *YES is *Yes
IF DB1.DT_GATE_UPDATE_YES = *YES;

// DTL.Text of 35 size  Usr = CON.Gate Update this record
DTL.Text_of_35_size_Usr = 'Gate Update this record';

//?If Gate Update flag is Yes, load description
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Text of 35 size  Usr = CON.*BLANK
DTL.Text_of_35_size_Usr = *BLANK;

ENDIF;

//?USER: Process command keys

//?F5=Comments  F8=Splits
CASE;

// IF DTL.*CMD key is CF05
IF DTL.*CMD_key = '05';

EXECUTE FUNCTION(Chk Comments Exist    RT) TYPE(RTVOBJ) FILE(PLAHCPP)           AB1353487;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.DSH_Kill_Date);
PARAMETER(DTL.DT_Delivery_Date);
PARAMETER(DTL.DT_Delivery_Time);
PARAMETER(DTL.DT_Delivery_Time_Seq);

//?If record found, call program; ELSE send error message
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Call program Zzz Delv Track Cmnt   DF.
CALL PROGRAM(Zzz Delv Track Cmnt   DF) ('PWKEDFR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.DSH_Kill_Date);
PARAMETER(DTL.DT_Delivery_Date);
PARAMETER(DTL.DT_Delivery_Time);
PARAMETER(DTL.DT_Delivery_Time_Seq);

QUIT;

//?If record found, call program; ELSE send error message
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Delivery Tracking Comment not found.'
ERROR(PRK1034);

ENDIF;

//?F5=Comments  F8=Splits
// IF DTL.*CMD key is CF08
IF DTL.*CMD_key = '08';

//?Display Splits
CASE;

// IF DTL.DT Full/Split Load is Split
IF DTL.DT_Full_Split_Load = 'S';

// Call program Zzz Delv Trckng Split DF.
CALL PROGRAM(Zzz Delv Trckng Split DF) ('PWKDDFR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.DSH_Kill_Date);
PARAMETER(DTL.DT_Delivery_Date);
PARAMETER(DTL.DT_Delivery_Time);
PARAMETER(DTL.DT_Delivery_Time_Seq);
PARAMETER(DTL.DT_Farm_Site_Code);
PARAMETER(DTL.DT_Delivered_Head);
PARAMETER(DTL.DT_Delivered_Weight_lbs);
PARAMETER(DTL.DT_Movement_Number);
PARAMETER(DTL.DT_Source_Type);

//?Display Splits
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'F8 not valid for Full Load.'
ERROR(PRK1062);
MSGPARM(LCL.DT_Full_Split_Load);

ENDIF;

QUIT;

ENDIF;

