// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PWL3PVR
// ?Date: 14.08.2025 Time: 02:56:53
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification history
DO;

//? 6/03/2021 JBB SDD619 - Repayments by Business Users
//?                        Funtion created.  This screen allows the
//?                        business users to select what field needs
//?                        to be edited for the repayment.
ENDDO;

//?This flag is used to determine where the BOLW Movement# value is
//?retrieved from.
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER('NOGATE');
PARAMETER(LCL.No_Gate_Flag);

//?Retrieve BOLW Movement Number
CASE;

// IF LCL.No Gate Flag is Yes
IF LCL.No_Gate_Flag = 'Y';

EXECUTE FUNCTION(Rtv BOL Movment NumberRT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1343294;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(LCL.BOLW_Movement_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Retrieve BOLW Movement Number
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Movement Number   RT) TYPE(RTVOBJ) FILE(PKEJCPP)           AB1213938;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(LCL.BOLW_Movement_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

//?USER: Load screen

MOVE *ALL (To: DTL From: PAR);

// DTL.TRD Repayment Status = PAR.TRD Repayment Status
DTL.TRD_Repayment_Status = PAR.TRD_Repayment_Status;

//?Determine Status text
CASE;

// IF PAR.TRD Repayment Status is Created
IF PAR.TRD_Repayment_Status = 'C';

// DTL.Status Desc USR = CON.Created
DTL.Status_Desc_USR = 'Created';

//?Determine Status text
// IF PAR.TRD Repayment Status is Unpaid
IF PAR.TRD_Repayment_Status = 'U';

// DTL.Status Desc USR = CON.Unpaid
DTL.Status_Desc_USR = 'Unpaid';

//?Determine Status text
// IF PAR.TRD Repayment Status is Edited
IF PAR.TRD_Repayment_Status = 'E';

// DTL.Status Desc USR = CON.Edited
DTL.Status_Desc_USR = 'Edited';

//?Determine Status text
// IF PAR.TRD Repayment Status is Payment Edit Complete
IF PAR.TRD_Repayment_Status = 'P';

// DTL.Status Desc USR = CON.Pymt Edit Complete
DTL.Status_Desc_USR = 'Pymt Edit Complete';

//?Determine Status text
// IF PAR.TRD Repayment Status is Payment Edit Error
IF PAR.TRD_Repayment_Status = 'Q';

// DTL.Status Desc USR = CON.Pymt Edit Error
DTL.Status_Desc_USR = 'Pymt Edit Error';

//?Determine Status text
// IF PAR.TRD Repayment Status is Payment Edit Executed
IF PAR.TRD_Repayment_Status = 'X';

// DTL.Status Desc USR = CON.Pymt Edit Executed
DTL.Status_Desc_USR = 'Pymt Edit Executed';

//?Determine Status text
// IF PAR.TRD Repayment Status is Payment Edit Incomplete
IF PAR.TRD_Repayment_Status = 'I';

// DTL.Status Desc USR = CON.Pymt Edit Incomplete
DTL.Status_Desc_USR = 'Pymt Edit Incomplete';

//?Determine Status text
// IF PAR.TRD Repayment Status is Repaid
IF PAR.TRD_Repayment_Status = 'R';

// DTL.Status Desc USR = CON.Repaid
DTL.Status_Desc_USR = 'Repaid';

ENDIF;

//?USER: Validate fields

//?Validate only 1 edit is selected
DO;

// LCL.Count USR = CON.*ZERO
LCL.Count_USR = *ZERO;

//?Check Head Received selected
CASE;

// IF DTL.Repay Edit Head Received is Select
IF DTL.Repay_Edit_Head_Received = '1';

// LCL.Count USR = LCL.Count USR + CON.1
LCL.Count_USR = LCL.Count_USR + 1;

ENDIF;

//?Check Producer/Location or Site selected
CASE;

// IF DTL.Repay Edit Producer/Loc is Select
IF DTL.Repay_Edit_Producer_Loc = '1';

// LCL.Count USR = LCL.Count USR + CON.1
LCL.Count_USR = LCL.Count_USR + 1;

ENDIF;

//?Check Transfer selected
CASE;

// IF DTL.Repay Edit Transfer Tatt is Select
IF DTL.Repay_Edit_Transfer_Tatt = '1';

// LCL.Count USR = LCL.Count USR + CON.1
LCL.Count_USR = LCL.Count_USR + 1;

ENDIF;

//?Check Work With Balance to Kill selected
CASE;

// IF DTL.Repay Edit WW Bal to Kill is Select
IF DTL.Repay_Edit_WW_Bal_to_Kill = '1';

// LCL.Count USR = LCL.Count USR + CON.1
LCL.Count_USR = LCL.Count_USR + 1;

ENDIF;

//?If Count > 1, send error message
CASE;

// IF LCL.Count USR is Greater than 1
IF LCL.Count_USR > 1;

//?Send messages for Head Received if selected
CASE;

// IF DTL.Repay Edit Head Received is Select
IF DTL.Repay_Edit_Head_Received = '1';

// Send error message - 'Only select one Tattoo for editing.'
ERROR(PRK1587);
MSGPARM(DTL.Repay_Edit_Head_Received);

ENDIF;

//?Send messages for Producer/Location if selected
CASE;

// IF DTL.Repay Edit Producer/Loc is Select
IF DTL.Repay_Edit_Producer_Loc = '1';

// Send error message - 'Only select one Tattoo for editing.'
ERROR(PRK1587);
MSGPARM(DTL.Repay_Edit_Producer_Loc);

ENDIF;

//?Send messages for Transfer if selected
CASE;

// IF DTL.Repay Edit Transfer Tatt is Select
IF DTL.Repay_Edit_Transfer_Tatt = '1';

// Send error message - 'Only select one Tattoo for editing.'
ERROR(PRK1587);
MSGPARM(DTL.Repay_Edit_Transfer_Tatt);

ENDIF;

//?Send messages for Work With Balance to Kill if selected
CASE;

// IF DTL.Repay Edit WW Bal to Kill is Select
IF DTL.Repay_Edit_WW_Bal_to_Kill = '1';

// Send error message - 'Only select one Tattoo for editing.'
ERROR(PRK1587);
MSGPARM(DTL.Repay_Edit_WW_Bal_to_Kill);

ENDIF;

ENDIF;

ENDDO;

//?USER: Validate relations

//?Process selected edit request
CASE;

// IF DTL.Repay Edit Head Received is Select
IF DTL.Repay_Edit_Head_Received = '1';

//?Edit Head Received
DO;

//?RMC change to RST Kill date too
// Call program Chg Hd Rcvd for Repay EF.
CALL PROGRAM(Chg Hd Rcvd for Repay EF) ('PWNBEFR');
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.TRH_Repayment_ID);
PARAMETER(PAR.TRD_Pen_Head);

//?If Company = 360, respread the weight
CASE;

// IF DTL.CC Company Number is SBD Farms of Guymon, Ok
IF DTL.CC_Company_Number = 360;

//?If BOLW Movement# <> 0, call function to respread the weight
CASE;

// IF LCL.BOLW Movement Number is Entered
IF LCL.BOLW_Movement_Number <> *ZERO;

// Call program WW Buy Order Load Wt  DF.
CALL PROGRAM(WW Buy Order Load Wt  DF) ('PKPWDFR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(LCL.BOLW_Movement_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(LCL.Oms_System_Value_Alpha);

//?If BOLW Movement# <> 0, call function to respread the weight
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Use HPE Receiving menu option 5 to WW Weight so that Weight can be respread
ERROR(PRK1591);

ENDIF;

ENDIF;

// Call program WW Bal To Kill-Repay  DF.
CALL PROGRAM(WW Bal To Kill-Repay  DF) ('PWNHDFR');
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(DTL.TRH_Repayment_ID);
PARAMETER(LCL.Bal_to_Kill_Executed_Y_N);

//?If repayment record existed and re-balanced
CASE;

// IF LCL.Bal to Kill Executed Y/N is Yes
IF LCL.Bal_to_Kill_Executed_Y_N = 'Y';

// Call program Chg Tatt Repay Dtl Sts XF.
CALL PROGRAM(Chg Tatt Repay Dtl Sts XF) ('PWNQXFR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.TRH_Repayment_ID);
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER('E');

// LCL.TRC Comment = CONCAT(CON.Tattoo Balance/Validation,CON.process executed,CND.*One)
LCL.TRC_Comment = 'Tattoo Balance/Validation' + 'process executed' (1);

EXECUTE FUNCTION(Crt Tattoo Repay Cmnt CR) TYPE(CRTOBJ) FILE(PWAYCPP)           AB1364775;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.TRH_Repayment_ID);
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(LCL.TRC_Comment);
PARAMETER('S');
{
 //?USER: Processing before Data update

 //?Make sure BOH Company Number is populated
 CASE;

 // IF PAR.BOH Company Number is *ZERO
 IF PAR.BOH_Company_Number = *ZERO;

 // DB1.BOH Company Number = PAR.CC Company Number
 DB1.BOH_Company_Number = PAR.CC_Company_Number;

 ENDIF;

 EXECUTE FUNCTION(Rtv Next Comment Seq# RT) TYPE(RTVOBJ) FILE(PWAYCPP)           AB1366735;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.TRH_Repayment_ID);
 PARAMETER(DB1.TRC_Sequence);
 {
  //?USER: Processing if Data record not found

  // PAR.TRC Sequence = CON.1
  PAR.TRC_Sequence = 1;

  //?USER: Process Data record

  // PAR.TRC Sequence = DB1.TRC Sequence + CON.1
  PAR.TRC_Sequence = DB1.TRC_Sequence + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


ENDIF;

// DTL.Repay Edit Head Received = CND.Blank
DTL.Repay_Edit_Head_Received = *BLANK;

ENDDO;

//?Process selected edit request
// IF DTL.Repay Edit Producer/Loc is Select
IF DTL.Repay_Edit_Producer_Loc = '1';

//?Edit Producer/Location/Contract/Sub-Contract/Site ID
DO;

// Call program Chg Prdcr/Loc/Site/CAK PV.
CALL PROGRAM(Chg Prdcr/Loc/Site/CAK PV) ('PWNFPVR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.TRH_Repayment_ID);
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(DTL.TRD_Pen_Head);
PARAMETER(PAR.TRD_Payment_Sts);
PARAMETER(PAR.TRD_Process_Code);
PARAMETER(PAR.SR_Source_Code);

// Call program WW Bal To Kill-Repay  DF.
CALL PROGRAM(WW Bal To Kill-Repay  DF) ('PWNHDFR');
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(DTL.TRH_Repayment_ID);
PARAMETER(LCL.Bal_to_Kill_Executed_Y_N);

//?If repayment record existed and re-balanced
CASE;

// IF LCL.Bal to Kill Executed Y/N is Yes
IF LCL.Bal_to_Kill_Executed_Y_N = 'Y';

// Call program Chg Tatt Repay Dtl Sts XF.
CALL PROGRAM(Chg Tatt Repay Dtl Sts XF) ('PWNQXFR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.TRH_Repayment_ID);
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER('E');

// LCL.TRC Comment = CONCAT(CON.Tattoo Balance/Validation,CON.process executed,CND.*One)
LCL.TRC_Comment = 'Tattoo Balance/Validation' + 'process executed' (1);

EXECUTE FUNCTION(Crt Tattoo Repay Cmnt CR) TYPE(CRTOBJ) FILE(PWAYCPP)           AB1364775;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.TRH_Repayment_ID);
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(LCL.TRC_Comment);
PARAMETER('S');
{
 //?USER: Processing before Data update

 //?Make sure BOH Company Number is populated
 CASE;

 // IF PAR.BOH Company Number is *ZERO
 IF PAR.BOH_Company_Number = *ZERO;

 // DB1.BOH Company Number = PAR.CC Company Number
 DB1.BOH_Company_Number = PAR.CC_Company_Number;

 ENDIF;

 EXECUTE FUNCTION(Rtv Next Comment Seq# RT) TYPE(RTVOBJ) FILE(PWAYCPP)           AB1366735;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.TRH_Repayment_ID);
 PARAMETER(DB1.TRC_Sequence);
 {
  //?USER: Processing if Data record not found

  // PAR.TRC Sequence = CON.1
  PAR.TRC_Sequence = 1;

  //?USER: Process Data record

  // PAR.TRC Sequence = DB1.TRC Sequence + CON.1
  PAR.TRC_Sequence = DB1.TRC_Sequence + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


ENDIF;

// DTL.Repay Edit Producer/Loc = CND.Blank
DTL.Repay_Edit_Producer_Loc = *BLANK;

ENDDO;

//?Process selected edit request
// IF DTL.Repay Edit Transfer Tatt is Select
IF DTL.Repay_Edit_Transfer_Tatt = '1';

// Send error message - 'Use standard process to transfer tattoo.  Then return to Repayment to compl
ERROR(PRK1607);
MSGPARM(DTL.Repay_Edit_Transfer_Tatt);

//?Process selected edit request
// IF DTL.Repay Edit WW Bal to Kill is Select
IF DTL.Repay_Edit_WW_Bal_to_Kill = '1';

//?Perform Balance to Kill
DO;

// Call program WW Bal To Kill-Repay  DF.
CALL PROGRAM(WW Bal To Kill-Repay  DF) ('PWNHDFR');
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(DTL.TRH_Repayment_ID);
PARAMETER(LCL.Bal_to_Kill_Executed_Y_N);

//?If repayment record existed and re-balanced
CASE;

// IF LCL.Bal to Kill Executed Y/N is Yes
IF LCL.Bal_to_Kill_Executed_Y_N = 'Y';

// Call program Chg Tatt Repay Dtl Sts XF.
CALL PROGRAM(Chg Tatt Repay Dtl Sts XF) ('PWNQXFR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.TRH_Repayment_ID);
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER('E');

// LCL.TRC Comment = CONCAT(CON.Tattoo Balance/Validation,CON.process executed,CND.*One)
LCL.TRC_Comment = 'Tattoo Balance/Validation' + 'process executed' (1);

EXECUTE FUNCTION(Crt Tattoo Repay Cmnt CR) TYPE(CRTOBJ) FILE(PWAYCPP)           AB1364775;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.TRH_Repayment_ID);
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(LCL.TRC_Comment);
PARAMETER('S');
{
 //?USER: Processing before Data update

 //?Make sure BOH Company Number is populated
 CASE;

 // IF PAR.BOH Company Number is *ZERO
 IF PAR.BOH_Company_Number = *ZERO;

 // DB1.BOH Company Number = PAR.CC Company Number
 DB1.BOH_Company_Number = PAR.CC_Company_Number;

 ENDIF;

 EXECUTE FUNCTION(Rtv Next Comment Seq# RT) TYPE(RTVOBJ) FILE(PWAYCPP)           AB1366735;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.TRH_Repayment_ID);
 PARAMETER(DB1.TRC_Sequence);
 {
  //?USER: Processing if Data record not found

  // PAR.TRC Sequence = CON.1
  PAR.TRC_Sequence = 1;

  //?USER: Process Data record

  // PAR.TRC Sequence = DB1.TRC Sequence + CON.1
  PAR.TRC_Sequence = DB1.TRC_Sequence + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


ENDIF;

// DTL.Repay Edit WW Bal to Kill = CND.Blank
DTL.Repay_Edit_WW_Bal_to_Kill = *BLANK;

ENDDO;

ENDIF;

