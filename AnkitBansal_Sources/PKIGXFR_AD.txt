// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKIGXFR
// ?Date: 14.08.2025 Time: 02:51:46
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modifications and Comments
DO;

//?H16853 ISE 11/09/2020 - Recompiled due to change in Buy Order Number
ENDDO;

EXECUTE FUNCTION(Rtv/Crt Ttt D/A Work2 RT) TYPE(RTVOBJ) FILE(PKCDCPP)           AB1194386;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.Date_From_USR);
PARAMETER(PAR.Date_From_USR);
PARAMETER(PAR.Date_To_USR);
PARAMETER(PAR.Print_All_Prod_Sts_USR);
{
 //?USER: Initialize routine

 //?Retrieve possible Insurance Deduction Codes from master D/A code file
 EXECUTE FUNCTION(Rtv Valid InsDed Cdes RT) TYPE(RTVOBJ) FILE(PKBBREP)           AB1194396;
 PARAMETER(WRK.Ded_D_A_Code_1_USR);
 PARAMETER(WRK.Ded_D_A_Code_2_USR);
 PARAMETER(WRK.Ded_D_A_Code_3_USR);
 PARAMETER(WRK.Ded_D_A_Code_4_USR);
 PARAMETER(WRK.Ded_D_A_Code_5_USR);
 {
  //?USER: Initialize routine

  // PAR.Ded D/A Code 1 USR = WRK.Blank USR
  PAR.Ded_D_A_Code_1_USR = WRK.Blank_USR;

  // PAR.Ded D/A Code 2 USR = WRK.Blank USR
  PAR.Ded_D_A_Code_2_USR = WRK.Blank_USR;

  // PAR.Ded D/A Code 3 USR = WRK.Blank USR
  PAR.Ded_D_A_Code_3_USR = WRK.Blank_USR;

  // PAR.Ded D/A Code 4 USR = WRK.Blank USR
  PAR.Ded_D_A_Code_4_USR = WRK.Blank_USR;

  // PAR.Ded D/A Code 5 USR = WRK.Blank USR
  PAR.Ded_D_A_Code_5_USR = WRK.Blank_USR;

  //?USER: Processing if Data record not found

  QUIT;

  //?USER: Process Data record

  CASE;

  // IF PAR.Ded D/A Code 1 USR EQ WRK.Blank USR
  IF PAR.Ded_D_A_Code_1_USR = WRK.Blank_USR;

  // PAR.Ded D/A Code 1 USR = DB1.DED D/A Code
  PAR.Ded_D_A_Code_1_USR = DB1.DED_D_A_Code;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF PAR.Ded D/A Code 2 USR EQ WRK.Blank USR
  IF PAR.Ded_D_A_Code_2_USR = WRK.Blank_USR;

  // PAR.Ded D/A Code 2 USR = DB1.DED D/A Code
  PAR.Ded_D_A_Code_2_USR = DB1.DED_D_A_Code;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF PAR.Ded D/A Code 3 USR EQ WRK.Blank USR
  IF PAR.Ded_D_A_Code_3_USR = WRK.Blank_USR;

  // PAR.Ded D/A Code 3 USR = DB1.DED D/A Code
  PAR.Ded_D_A_Code_3_USR = DB1.DED_D_A_Code;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF PAR.Ded D/A Code 4 USR EQ WRK.Blank USR
  IF PAR.Ded_D_A_Code_4_USR = WRK.Blank_USR;

  // PAR.Ded D/A Code 4 USR = DB1.DED D/A Code
  PAR.Ded_D_A_Code_4_USR = DB1.DED_D_A_Code;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF PAR.Ded D/A Code 5 USR EQ WRK.Blank USR
  IF PAR.Ded_D_A_Code_5_USR = WRK.Blank_USR;

  // PAR.Ded D/A Code 5 USR = DB1.DED D/A Code
  PAR.Ded_D_A_Code_5_USR = DB1.DED_D_A_Code;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

 }

 //?USER: Process Data record

 //?Check kill date range and Insurance Deduction Code
 CASE;

 // IF DB1.TH Kill Date GE PAR.Date From USR
 IF DB1.TH_Kill_Date >= PAR.Date_From_USR;

 // AND DB1.TH Kill Date LE PAR.Date To   USR
 AND DB1.TH_Kill_Date <= PAR.Date_To_USR;

 CASE;

 // IF PAR.Print All Prod Sts USR is No
 IF PAR.Print_All_Prod_Sts_USR = 'N';

 CASE;

 // IF DB1.DED D/A Code EQ WRK.Ded D/A Code 1 USR
 IF DB1.DED_D_A_Code = WRK.Ded_D_A_Code_1_USR;

 // OR DB1.DED D/A Code EQ WRK.Ded D/A Code 2 USR
 OR DB1.DED_D_A_Code = WRK.Ded_D_A_Code_2_USR;

 // OR DB1.DED D/A Code EQ WRK.Ded D/A Code 3 USR
 OR DB1.DED_D_A_Code = WRK.Ded_D_A_Code_3_USR;

 // OR DB1.DED D/A Code EQ WRK.Ded D/A Code 4 USR
 OR DB1.DED_D_A_Code = WRK.Ded_D_A_Code_4_USR;

 // OR DB1.DED D/A Code EQ WRK.Ded D/A Code 5 USR
 OR DB1.DED_D_A_Code = WRK.Ded_D_A_Code_5_USR;

 EXECUTE FUNCTION(RTV Tattoo Record     RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1111223;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.TH_Purchase_Date);
 PARAMETER(WRK.TH_Group_Reference);
 PARAMETER(WRK.TH_Live_Purchase_UOM);
 PARAMETER(WRK.TH_Live_Purchase_Price);
 PARAMETER(WRK.TH_Resale_UOM);
 PARAMETER(WRK.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(WRK.TH_Pricing_Date);
 PARAMETER(WRK.TH_Resale_Spread_Sts);
 PARAMETER(WRK.TH_Dead_On_Arrival);
 PARAMETER(WRK.TH_Head_Received);
 PARAMETER(WRK.TH_Yard_Deads);
 PARAMETER(WRK.TH_Held_Over);
 PARAMETER(WRK.TH_Head_Condemned);
 PARAMETER(WRK.TH_Head_Killed);
 PARAMETER(WRK.TH_Head_Adds);
 PARAMETER(WRK.TH_Head_Accepted);
 PARAMETER(WRK.TH_Live_Wgt);
 PARAMETER(WRK.TH_Hot_Wgt);
 PARAMETER(WRK.TH_Tot_Loin_Eye_Depth);
 PARAMETER(WRK.TH_Tot_Backfat_Inches);
 PARAMETER(WRK.TH_Tot_Light_Reflectance);
 PARAMETER(WRK.TH_Avg_Live_Wgt);
 PARAMETER(WRK.TH_Avg_Hot_Wgt);
 PARAMETER(WRK.TH_Avg_Light_Reflectance);
 PARAMETER(WRK.TH_Avg_Lean_Percent);
 PARAMETER(WRK.TH_Avg_Loin_Eye_Depth);
 PARAMETER(WRK.TH_Avg_Backfat);
 PARAMETER(WRK.TH_Std_Yield_Percent);
 PARAMETER(WRK.TH_Actual_Yield);
 PARAMETER(WRK.TH_Yield_Difference);
 PARAMETER(WRK.TH_Recalc_Live_Wgt);
 PARAMETER(WRK.TH_CM_Base_Mkt_Price);
 PARAMETER(WRK.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(WRK.TH_CM_Sort_Discount_Amt);
 PARAMETER(WRK.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(WRK.TH_CM_Base_Carcass_Value);
 PARAMETER(WRK.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(WRK.TH_CM_Carcass_Gross_Amt);
 PARAMETER(WRK.TH_Deduction_Amt);
 PARAMETER(WRK.TH_Total_Net_WO_Adds);
 PARAMETER(WRK.TH_Carcass_Net_Amt);
 PARAMETER(WRK.TH_Additions_Amt);
 PARAMETER(WRK.TH_Accrual_Amount);
 PARAMETER(WRK.TH_Fixed_Cost_Amount);
 PARAMETER(WRK.TH_Payment_Sts);
 PARAMETER(WRK.TH_Header_Error_Sts);
 PARAMETER(WRK.TH_Detail_Error_Sts);
 PARAMETER(WRK.TH_Kill_Balancing_Sts);
 PARAMETER(WRK.TH_Bal_to_Kill_Gen);
 PARAMETER(WRK.TH_Commission_A_P_Voucher);
 PARAMETER(WRK.TH_Voucher_Payment_Date);
 PARAMETER(WRK.TH_User_Error_Override);
 PARAMETER(WRK.TH_Held_Over_Record);
 PARAMETER(WRK.TH_Sex);
 PARAMETER(WRK.TH_Held_Ovr_Completed_Dte);
 PARAMETER(WRK.TH_Commission_Paid_Date);
 PARAMETER(WRK.TH_Actual_Check_Date);
 PARAMETER(WRK.TH_Shipped_Weight);
 PARAMETER(WRK.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(WRK.TH_FFLI);
 PARAMETER(WRK.TH_Kill_Product_Value);
 PARAMETER(WRK.TH_Cut_Product_Value);
 PARAMETER(WRK.TH_Render_Product_Value);
 PARAMETER(WRK.TH_Shift_Held_Over_Head);
 PARAMETER(WRK.DF_Defect_Code);
 PARAMETER(WRK.THP_Process_Code);
 PARAMETER(WRK.HB_Buyer_Code);
 PARAMETER(WRK.GN_Genetic_Code);
 PARAMETER(WRK.HC_Class_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // WRK.THDW2 Purchase Dt YYMM = WRK.TH Purchase Date / CON.100 *
 WRK.THDW2_Purchase_Dt_YYMM = WRK.TH_Purchase_Date / 100;

 EXECUTE FUNCTION(Crt Ttt Ded/Add Wrk 2 CR) TYPE(CRTOBJ) FILE(PKDTCPP)           AB1194273;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(WRK.TH_Dead_On_Arrival);
 PARAMETER(WRK.TH_Head_Received);
 PARAMETER(WRK.TH_Yard_Deads);
 PARAMETER(WRK.TH_Head_Condemned);
 PARAMETER(WRK.TH_Purchase_Date);
 PARAMETER(WRK.THDW2_Purchase_Dt_YYMM);
 PARAMETER(WRK.PD_Producer_Code);
 PARAMETER(WRK.PL_Location_Code);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDIF;

 // IF PAR.Print All Prod Sts USR is Yes
 IF PAR.Print_All_Prod_Sts_USR = 'Y';

 EXECUTE FUNCTION(RTV Tattoo Record     RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1111223;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.TH_Purchase_Date);
 PARAMETER(WRK.TH_Group_Reference);
 PARAMETER(WRK.TH_Live_Purchase_UOM);
 PARAMETER(WRK.TH_Live_Purchase_Price);
 PARAMETER(WRK.TH_Resale_UOM);
 PARAMETER(WRK.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(WRK.TH_Pricing_Date);
 PARAMETER(WRK.TH_Resale_Spread_Sts);
 PARAMETER(WRK.TH_Dead_On_Arrival);
 PARAMETER(WRK.TH_Head_Received);
 PARAMETER(WRK.TH_Yard_Deads);
 PARAMETER(WRK.TH_Held_Over);
 PARAMETER(WRK.TH_Head_Condemned);
 PARAMETER(WRK.TH_Head_Killed);
 PARAMETER(WRK.TH_Head_Adds);
 PARAMETER(WRK.TH_Head_Accepted);
 PARAMETER(WRK.TH_Live_Wgt);
 PARAMETER(WRK.TH_Hot_Wgt);
 PARAMETER(WRK.TH_Tot_Loin_Eye_Depth);
 PARAMETER(WRK.TH_Tot_Backfat_Inches);
 PARAMETER(WRK.TH_Tot_Light_Reflectance);
 PARAMETER(WRK.TH_Avg_Live_Wgt);
 PARAMETER(WRK.TH_Avg_Hot_Wgt);
 PARAMETER(WRK.TH_Avg_Light_Reflectance);
 PARAMETER(WRK.TH_Avg_Lean_Percent);
 PARAMETER(WRK.TH_Avg_Loin_Eye_Depth);
 PARAMETER(WRK.TH_Avg_Backfat);
 PARAMETER(WRK.TH_Std_Yield_Percent);
 PARAMETER(WRK.TH_Actual_Yield);
 PARAMETER(WRK.TH_Yield_Difference);
 PARAMETER(WRK.TH_Recalc_Live_Wgt);
 PARAMETER(WRK.TH_CM_Base_Mkt_Price);
 PARAMETER(WRK.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(WRK.TH_CM_Sort_Discount_Amt);
 PARAMETER(WRK.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(WRK.TH_CM_Base_Carcass_Value);
 PARAMETER(WRK.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(WRK.TH_CM_Carcass_Gross_Amt);
 PARAMETER(WRK.TH_Deduction_Amt);
 PARAMETER(WRK.TH_Total_Net_WO_Adds);
 PARAMETER(WRK.TH_Carcass_Net_Amt);
 PARAMETER(WRK.TH_Additions_Amt);
 PARAMETER(WRK.TH_Accrual_Amount);
 PARAMETER(WRK.TH_Fixed_Cost_Amount);
 PARAMETER(WRK.TH_Payment_Sts);
 PARAMETER(WRK.TH_Header_Error_Sts);
 PARAMETER(WRK.TH_Detail_Error_Sts);
 PARAMETER(WRK.TH_Kill_Balancing_Sts);
 PARAMETER(WRK.TH_Bal_to_Kill_Gen);
 PARAMETER(WRK.TH_Commission_A_P_Voucher);
 PARAMETER(WRK.TH_Voucher_Payment_Date);
 PARAMETER(WRK.TH_User_Error_Override);
 PARAMETER(WRK.TH_Held_Over_Record);
 PARAMETER(WRK.TH_Sex);
 PARAMETER(WRK.TH_Held_Ovr_Completed_Dte);
 PARAMETER(WRK.TH_Commission_Paid_Date);
 PARAMETER(WRK.TH_Actual_Check_Date);
 PARAMETER(WRK.TH_Shipped_Weight);
 PARAMETER(WRK.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(WRK.TH_FFLI);
 PARAMETER(WRK.TH_Kill_Product_Value);
 PARAMETER(WRK.TH_Cut_Product_Value);
 PARAMETER(WRK.TH_Render_Product_Value);
 PARAMETER(WRK.TH_Shift_Held_Over_Head);
 PARAMETER(WRK.DF_Defect_Code);
 PARAMETER(WRK.THP_Process_Code);
 PARAMETER(WRK.HB_Buyer_Code);
 PARAMETER(WRK.GN_Genetic_Code);
 PARAMETER(WRK.HC_Class_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // WRK.THDW2 Purchase Dt YYMM = WRK.TH Purchase Date / CON.100 *
 WRK.THDW2_Purchase_Dt_YYMM = WRK.TH_Purchase_Date / 100;

 EXECUTE FUNCTION(Crt Ttt Ded/Add Wrk 2 CR) TYPE(CRTOBJ) FILE(PKDTCPP)           AB1194273;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(WRK.TH_Dead_On_Arrival);
 PARAMETER(WRK.TH_Head_Received);
 PARAMETER(WRK.TH_Yard_Deads);
 PARAMETER(WRK.TH_Head_Condemned);
 PARAMETER(WRK.TH_Purchase_Date);
 PARAMETER(WRK.THDW2_Purchase_Dt_YYMM);
 PARAMETER(WRK.PD_Producer_Code);
 PARAMETER(WRK.PL_Location_Code);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDIF;

 //?Check kill date range and Insurance Deduction Code
 // IF *OTHERWISE
 IF *OTHERWISE;

 QUIT;

 ENDIF;

}


