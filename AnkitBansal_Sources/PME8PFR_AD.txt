// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PME8PFR
// ?Date: 14.08.2025 Time: 12:05:32
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?03/29/07     Build ISC Trans Detail Workfile for download
//?FP1100 - This captures the inventory trans dtl - all trans types,
//?   Crt/update the workfile to be downloaded ;
//?   Run for each plant per week ending date
//?Status Y - N :  Y means combine transactions for all whses together
//?                N means accum transactions by warehouse
//?USER: Record selection processing

CASE;

// IF DB1.Inventory Trans. Type is Transfer types
IF DB1.Inventory_Trans_Type = 'TW'/'T';

// IF DB1.Inventory Trans. Type is Misc Adj types
IF DB1.Inventory_Trans_Type = 'RC'/'R'/'RP'/'S';

// IF DB1.Inventory Trans. Type is Issue types
IF DB1.Inventory_Trans_Type = 'I'/'IO'/'RW';

// IF DB1.Inventory Trans. Type is Adjustment Type-A,AP,AW
IF DB1.Inventory_Trans_Type = 'AP'/'A'/'AW';

// IF DB1.Inventory Trans. Type is Receipt Production
IF DB1.Inventory_Trans_Type = 'RR';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

EXECUTE FUNCTION(Rtv Acct Co          RT) TYPE(RTVOBJ) FILE(CAADREP)            AC1802492;
PARAMETER(DB1.Warehouse_Code);
PARAMETER(LCL.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Accounting Company NE PAR.ISC Warehouse Company
IF LCL.Accounting_Company <> PAR.ISC_Warehouse_Company;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Print required level headings

// SUPPRESSED PRINT Company Number header format

// SUPPRESSED PRINT Item Code header format

// SUPPRESSED PRINT Warehouse Code header format

// SUPPRESSED PRINT Inventory Trans. Type header format

// SUPPRESSED PRINT Production Date header format

//?USER: On print of detail format

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

//?USER: Process after print of detail format

NXT.Transaction_Qty_SUM = SUM(CUR.Transaction_Quantity);

NXT.Transaction_Wgt_Ttl_SUM = SUM(CUR.Transaction_Weight);

//?USER: Print required level totals

// SUPPRESSED PRINT Production Date totals format

CASE;

IF NEW Inventory_Trans_Type;
CASE;

// IF CUR.Transaction Qty       SUM is Entered
IF CUR.Transaction_Qty_SUM <> *ZERO;

// OR CUR.Transaction Wgt. Ttl SUM is Entered
OR CUR.Transaction_Wgt_Ttl_SUM <> *ZERO;

EXECUTE FUNCTION(Rtv Acct Co          RT) TYPE(RTVOBJ) FILE(CAADREP)            AC1802492;
PARAMETER(CUR.Warehouse_Code);
PARAMETER(LCL.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Warehouse:  Combine or accum separately
CASE;

// IF PAR.ISC Warehouse Code is Warehouse Code Blank
IF PAR.ISC_Warehouse_Code = *BLANK;

CASE;

// IF PAR.Status - Y or N is yes
IF PAR.Status_Y_or_N = 'Y';

//?Y=Combine all whses' trans into one
// LCL.Warehouse Code = CON.*BLANK
LCL.Warehouse_Code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Warehouse Code = CUR.Warehouse Code
LCL.Warehouse_Code = CUR.Warehouse_Code;

ENDIF;

//?Warehouse:  Combine or accum separately
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Warehouse Code = CUR.Warehouse Code
LCL.Warehouse_Code = CUR.Warehouse_Code;

ENDIF;

EXECUTE FUNCTION(Rtv Upd ISC Trans Dtl RT) TYPE(RTVOBJ) FILE(PMAKCPP)           AC1813651;
PARAMETER(PAR.ISC_Week_Ending_Date);
PARAMETER(LCL.Accounting_Company);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Inventory_Trans_Type);
PARAMETER(CUR.Transaction_Qty_SUM);
PARAMETER(CUR.Transaction_Wgt_Ttl_SUM);
PARAMETER(PAR.From_Date_USR);
PARAMETER(PAR.To_Date_USR);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(Rtv Base Values PA    RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1416510;
 PARAMETER(PAR.ISC_Warehouse_Company);
 PARAMETER(PAR.ISC_Item_Code);
 PARAMETER(PAR.Description_Line_One);
 PARAMETER(WRK.Description_Line_Two);
 PARAMETER(PAR.UOM_Primary_Dft);
 PARAMETER(PAR.Conversion_Factor_1);
 PARAMETER(WRK.Operation_Factor_1);
 PARAMETER(WRK.UOM_Second);
 PARAMETER(WRK.Conversion_Factor_2);
 PARAMETER(WRK.Operation_Factor_2);
 PARAMETER(WRK.UOM_Third);
 PARAMETER(WRK.UOM_Pricing);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(WRK.Production_Date_Control);
 PARAMETER(WRK.Catch_Weight_Status);
 PARAMETER(WRK.Fresh_Chilling_Time);
 PARAMETER(WRK.Base_Conv_Loss_Item);
 PARAMETER(WRK.Piece_Count_Item);
 PARAMETER(WRK.Pieces_Per_Bag);
 PARAMETER(WRK.Bags_Per_Unit);
 PARAMETER(WRK.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.Piece Count Item is yes
 IF WRK.Piece_Count_Item = 'Y';

 // PAR.Transaction Pieces = PAR.Transaction Quantity * WRK.Pieces Per Bag *
 PAR.Transaction_Pieces = PAR.Transaction_Quantity * WRK.Pieces_Per_Bag;

 ENDIF;

 CASE;

 // IF PAR.Transaction Quantity is not equal zero
 IF PAR.Transaction_Quantity <> *ZERO;

 // PAR.ISC Production Avg Wgt = PAR.Transaction Weight / PAR.Transaction Quantity *
 PAR.ISC_Production_Avg_Wgt = PAR.Transaction_Weight / PAR.Transaction_Quantity;

 // PAR.ISC Weight Difference = PAR.ISC Production Avg Wgt - PAR.Unit Weight
 PAR.ISC_Weight_Difference = PAR.ISC_Production_Avg_Wgt - PAR.Unit_Weight;

 ENDIF;

 EXECUTE FUNCTION(RTV Commod Price Group RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1308159;
 PARAMETER(PAR.ISC_Warehouse_Company);
 PARAMETER(PAR.ISC_Item_Code);
 PARAMETER(WRK.Commodity_Price_Group);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Commodity Market   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1386042;
 PARAMETER(PAR.ISC_Warehouse_Company);
 PARAMETER(PAR.ISC_Item_Code);
 PARAMETER(WRK.Default_Commod_Mark_basis);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Week Prior Avg Prc RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1293094;
 PARAMETER(WRK.Default_Commod_Mark_basis);
 PARAMETER(WRK.Commodity_Price_Group);
 PARAMETER(PAR.To_Date_USR);
 PARAMETER(PAR.From_Date_USR);
 PARAMETER(PAR.To_Date_USR);
 PARAMETER(PAR.Commodity_Market_Price);
 PARAMETER(WRK.Date_Error_Returned);
 {
  //?USER: Initialize routine

  // PAR.USR Counter = CON.*ZERO
  PAR.USR_Counter = *ZERO;

  // WRK.Pricing Retrieved Amount = CON.*ZERO
  WRK.Pricing_Retrieved_Amount = *ZERO;

  // LCL.First Time Flag = CND.Yes
  LCL.First_Time_Flag = 'Y';

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  CASE;

  // IF LCL.First Time Flag is Yes
  IF LCL.First_Time_Flag = 'Y';

  // PAR.Pricing Date Used = DB1.Market Price Date
  PAR.Pricing_Date_Used = DB1.Market_Price_Date;

  // LCL.First Time Flag = CND.NO
  LCL.First_Time_Flag = 'N';

  ENDIF;

  CASE;

  // IF DB1.Market Price Date GE PAR.Period Beginning Date
  IF DB1.Market_Price_Date >= PAR.Period_Beginning_Date;

  // AND DB1.Market Price Date LE PAR.Period Ending Date
  AND DB1.Market_Price_Date <= PAR.Period_Ending_Date;

  // PAR.USR Counter = PAR.USR Counter + CON.1
  PAR.USR_Counter = PAR.USR_Counter + 1;

  // WRK.Pricing Retrieved Amount = WRK.Pricing Retrieved Amount + DB1.Price per Pric
  WRK.Pricing_Retrieved_Amount = WRK.Pricing_Retrieved_Amount + DB1.Commodity_Market_Price;

  //?Calculate Average (Divide Total Price by Counter)
  CASE;

  // IF PAR.USR Counter is GE 1
  IF PAR.USR_Counter >= 1;

  // PAR.Pricing Retrieved Amount = WRK.Pricing Retrieved Amount / PAR.USR Counter *
  PAR.Pricing_Retrieved_Amount = WRK.Pricing_Retrieved_Amount / PAR.USR_Counter;

  //?Calculate Average (Divide Total Price by Counter)
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date Error Returned = CND.Week Prior Avg Error
  PAR.Date_Error_Returned = 'WPA';

  ENDIF;

  ENDIF;

 }

 CASE;

 // IF PAR.Commodity Market Price is Not Entered
 IF PAR.Commodity_Market_Price = *ZERO;

 EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
 PARAMETER(WRK.Default_Commod_Mark_basis);
 PARAMETER(WRK.Commodity_Price_Group);
 PARAMETER(PAR.To_Date_USR);
 PARAMETER(PAR.Commodity_Market_Price);
 PARAMETER(WRK.USR_Date_Priced);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Commodity Market Price = DB1.Commodity Market Price
  PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

 ENDIF;

 CASE;

 // IF PAR.U/M - Primary Dft is Each
 IF PAR.UOM_Primary_Dft = 'EA';

 // OR PAR.U/M - Primary Dft is NE Headset
 OR PAR.UOM_Primary_Dft <> 'HS';

 // PAR.Extended Amount = PAR.Commodity Market Price * PAR.Transaction Quantity *
 PAR.Extended_Amount = PAR.Commodity_Market_Price * PAR.Transaction_Quantity;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Extended Amount = PAR.Commodity Market Price * PAR.Transaction Weight *
 PAR.Extended_Amount = PAR.Commodity_Market_Price * PAR.Transaction_Weight;

 ENDIF;

 EXECUTE FUNCTION(Crt WF ISC Trans Dtl  CR) TYPE(CRTOBJ) FILE(PMAKCPP)           AC1813106;
 PARAMETER(PAR.ISC_Week_Ending_Date);
 PARAMETER(PAR.ISC_Warehouse_Company);
 PARAMETER(PAR.ISC_Warehouse_Code);
 PARAMETER(PAR.ISC_Item_Code);
 PARAMETER(PAR.Inventory_Trans_Type);
 PARAMETER(PAR.Transaction_Quantity);
 PARAMETER(PAR.Transaction_Weight);
 PARAMETER(PAR.Transaction_Pieces);
 PARAMETER(PAR.Conversion_Factor_1);
 PARAMETER(PAR.UOM_Primary_Dft);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.ISC_Production_Avg_Wgt);
 PARAMETER(PAR.ISC_Weight_Difference);
 PARAMETER(PAR.Commodity_Market_Price);
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.Description_Line_One);
 //?USER: Process Data record

 // WRK.Transaction Quantity = PAR.Transaction Quantity + DB1.Transaction Quantity
 WRK.Transaction_Quantity = PAR.Transaction_Quantity + DB1.Transaction_Quantity;

 // WRK.Transaction Weight = PAR.Transaction Weight + DB1.Transaction Weight
 WRK.Transaction_Weight = PAR.Transaction_Weight + DB1.Transaction_Weight;

 EXECUTE FUNCTION(Rtv Base Values PA    RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1416510;
 PARAMETER(PAR.ISC_Warehouse_Company);
 PARAMETER(PAR.ISC_Item_Code);
 PARAMETER(PAR.Description_Line_One);
 PARAMETER(WRK.Description_Line_Two);
 PARAMETER(PAR.UOM_Primary_Dft);
 PARAMETER(PAR.Conversion_Factor_1);
 PARAMETER(WRK.Operation_Factor_1);
 PARAMETER(WRK.UOM_Second);
 PARAMETER(WRK.Conversion_Factor_2);
 PARAMETER(WRK.Operation_Factor_2);
 PARAMETER(WRK.UOM_Third);
 PARAMETER(WRK.UOM_Pricing);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(WRK.Production_Date_Control);
 PARAMETER(WRK.Catch_Weight_Status);
 PARAMETER(WRK.Fresh_Chilling_Time);
 PARAMETER(WRK.Base_Conv_Loss_Item);
 PARAMETER(WRK.Piece_Count_Item);
 PARAMETER(WRK.Pieces_Per_Bag);
 PARAMETER(WRK.Bags_Per_Unit);
 PARAMETER(WRK.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.Piece Count Item is yes
 IF WRK.Piece_Count_Item = 'Y';

 // WRK.Transaction Pieces = WRK.Transaction Quantity * WRK.Pieces Per Bag *
 WRK.Transaction_Pieces = WRK.Transaction_Quantity * WRK.Pieces_Per_Bag;

 ENDIF;

 CASE;

 // IF WRK.Transaction Quantity is not equal zero
 IF WRK.Transaction_Quantity <> *ZERO;

 // PAR.ISC Production Avg Wgt = WRK.Transaction Weight / WRK.Transaction Quantity *
 PAR.ISC_Production_Avg_Wgt = WRK.Transaction_Weight / WRK.Transaction_Quantity;

 // PAR.ISC Weight Difference = PAR.ISC Production Avg Wgt - DB1.Unit Weight
 PAR.ISC_Weight_Difference = PAR.ISC_Production_Avg_Wgt - DB1.Unit_Weight;

 ENDIF;

 CASE;

 // IF PAR.U/M - Primary Dft is Each
 IF PAR.UOM_Primary_Dft = 'EA';

 // OR PAR.U/M - Primary Dft is NE Headset
 OR PAR.UOM_Primary_Dft <> 'HS';

 // PAR.Extended Amount = DB1.Commodity Market Price * WRK.Transaction Quantity *
 PAR.Extended_Amount = DB1.Commodity_Market_Price * WRK.Transaction_Quantity;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Extended Amount = DB1.Commodity Market Price * WRK.Transaction Weight *
 PAR.Extended_Amount = DB1.Commodity_Market_Price * WRK.Transaction_Weight;

 ENDIF;

 EXECUTE FUNCTION(Chg WF ISC Trans Dtl  CH) TYPE(CHGOBJ) FILE(PMAKCPP)           AC1813107;
 PARAMETER(DB1.ISC_Week_Ending_Date);
 PARAMETER(DB1.ISC_Warehouse_Company);
 PARAMETER(DB1.ISC_Warehouse_Code);
 PARAMETER(DB1.ISC_Item_Code);
 PARAMETER(DB1.Inventory_Trans_Type);
 PARAMETER(WRK.Transaction_Quantity);
 PARAMETER(WRK.Transaction_Weight);
 PARAMETER(WRK.Transaction_Pieces);
 PARAMETER(PAR.ISC_Production_Avg_Wgt);
 PARAMETER(PAR.ISC_Weight_Difference);
 PARAMETER(PAR.Extended_Amount);
}


ENDIF;

// Print Inventory Trans. Type totals format
PRINT Inventory Trans. Type totals format;

ENDIF;

CASE;

IF NEW Warehouse_Code;
// Print Warehouse Code totals format
PRINT Warehouse Code totals format;

ENDIF;

// SUPPRESSED PRINT Item Code totals format

// SUPPRESSED PRINT Company Number totals format

