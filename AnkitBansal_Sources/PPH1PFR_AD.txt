// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPH1PFR
// ?Date: 14.08.2025 Time: 12:06:33
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PAR.Record Found USR = CND.Blanks
PAR.Record_Found_USR = *BLANK;

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('C/S');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

// WRK.Print (Yes/No) USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

// LCL.Item Structure Type Code = CON.*ZERO
LCL.Item_Structure_Type_Code = *ZERO;

// LCL.Item Structure Group Code = CON.*ZERO
LCL.Item_Structure_Group_Code = *ZERO;

// LCL.Item Structure Class Code = CON.*ZERO
LCL.Item_Structure_Class_Code = *ZERO;

//?Modification history
//?03/27/2009 slm E00366 Exclude specific items
//?Send back parm, if a record was printed.
//?USER: Record selection processing

//?SEL:  Finished Goods
CASE;

// IF DB1.Item Type Code is Not Finished Good
IF DB1.Item_Type_Code <> 'FG';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL:  Active Record
CASE;

// IF PAR.Active Status Flag is Yes
IF PAR.Active_Status_Flag = 'Y';

CASE;

// IF DB1.Record Status is Not Active
IF DB1.Record_Status = *BLANK/'D'/'I';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL:  Include Credit Items
CASE;

// IF PAR.Include Credit Items USR is no
IF PAR.Include_Credit_Items_USR = 'N';

CASE;

// IF DB1.Credit Item Status is yes
IF DB1.Credit_Item_Status = 'Y';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL:  Item Structure Type
CASE;

// IF PAR.Item Structure Type Code is Entered
IF PAR.Item_Structure_Type_Code <> *ZERO;

CASE;

// IF DB1.Item Structure Type Code NE PAR.Item Structure Type Code
IF DB1.Item_Structure_Type_Code <> PAR.Item_Structure_Type_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL:  Item Structure Group
CASE;

// IF PAR.Item Structure Group Code is Entered
IF PAR.Item_Structure_Group_Code <> *ZERO;

CASE;

// IF DB1.Item Structure Group Code NE PAR.Item Structure Group Code
IF DB1.Item_Structure_Group_Code <> PAR.Item_Structure_Group_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL:  Item Structure Class
CASE;

// IF PAR.Item Structure Class Code is Entered
IF PAR.Item_Structure_Class_Code <> *ZERO;

CASE;

// IF DB1.Item Structure Class Code NE PAR.Item Structure Class Code
IF DB1.Item_Structure_Class_Code <> PAR.Item_Structure_Class_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Exclude Item codes
CASE;

// IF DB1.Item Code is 99000
IF DB1.Item_Code = 99000;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process top of page

MOVE *ALL (To: TOP From: PAR);

//?TF Classification
CASE;

// IF TOP.TF Classification Code is Entered
IF TOP_TF_Classification_Code <> *BLANK;

EXECUTE FUNCTION(TF Class Desc DRV) TYPE(DRVFLD)                                AC1707607;
PARAMETER(TOP_TF_Class_Desc_DRV);
PARAMETER(TOP_TF_Classification_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv TF Class Desc     RT) TYPE(RTVOBJ) FILE(PPAMREP)           AC1707658;
 PARAMETER(PAR.TF_Classification_Code);
 PARAMETER(PAR.TF_Class_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?TF Classification
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.TF Class Desc DRV = CON.*ALL
TOP_TF_Class_Desc_DRV = *ALL;

ENDIF;

//?Item Structure Type
CASE;

// IF TOP.Item Structure Type Code is Entered
IF TOP_Item_Structure_Type_Code <> *ZERO;

EXECUTE FUNCTION(Item Str Type Desc DRV) TYPE(DRVFLD)                           AC1705175;
PARAMETER(TOP_Item_Str_Type_Desc_DRV);
PARAMETER(TOP_Item_Structure_Type_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Type Description   RT) TYPE(RTVOBJ) FILE(OME8REP)          AC1229616;
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Str_Type_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?Item Structure Type
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Item Str Type Desc DRV = CON.*ALL
TOP_Item_Str_Type_Desc_DRV = *ALL;

ENDIF;

//?Item Structure Group
CASE;

// IF TOP.Item Structure Group Code is Entered
IF TOP_Item_Structure_Group_Code <> *ZERO;

EXECUTE FUNCTION(Item Str Group Desc DRV) TYPE(DRVFLD)                          AC1705174;
PARAMETER(TOP_Item_Str_Group_Desc_DRV);
PARAMETER(TOP_Item_Structure_Group_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Group Desc) TYPE(RTVOBJ) FILE(OME9REP)                     AC1663396;
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Str_Group_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?Item Structure Group
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Item Str Group Desc DRV = CON.*ALL
TOP_Item_Str_Group_Desc_DRV = *ALL;

ENDIF;

//?Item Structure Class
CASE;

// IF TOP.Item Structure Class Code is Entered
IF TOP_Item_Structure_Class_Code <> *ZERO;

EXECUTE FUNCTION(Item Str Class Desc DRV) TYPE(DRVFLD)                          AC1705173;
PARAMETER(TOP_Item_Str_Class_Desc_DRV);
PARAMETER(TOP_Item_Structure_Class_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Class Desc    RT) TYPE(RTVOBJ) FILE(OMFAREP)          AC1205440;
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Str_Class_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?Item Structure Class
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Item Str Class Desc DRV = CON.*ALL
TOP_Item_Str_Class_Desc_DRV = *ALL;

ENDIF;

EXECUTE FUNCTION(Assigned Status Desc DRV) TYPE(DRVFLD)                         AC1713741;
PARAMETER(TOP_Assigned_Status_Desc_DRV);
PARAMETER(TOP_Assigned_Status);
{
 //?Calculate derived field

 CASE;

 // IF PAR.Assigned Status is yes
 IF PAR.Assigned_Status = 'Y';

 // PAR.Assigned Status Desc DRV = CON.Assigned
 PAR.Assigned_Status_Desc_DRV = 'Assigned';

 // IF PAR.Assigned Status is no
 IF PAR.Assigned_Status = 'N';

 // PAR.Assigned Status Desc DRV = CON.Unassigned
 PAR.Assigned_Status_Desc_DRV = 'Unassigned';

 // IF PAR.Assigned Status is blank
 IF PAR.Assigned_Status = *BLANK;

 // PAR.Assigned Status Desc DRV = CON.*ALL
 PAR.Assigned_Status_Desc_DRV = *ALL;

 ENDIF;

}


//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

// SUPPRESSED PRINT Item Structure Type Code header format

// SUPPRESSED PRINT Item Structure Group Code header format

// SUPPRESSED PRINT Item Structure Class Code header format

// SUPPRESSED PRINT Item Code header format

//?USER: On print of detail format

//?*** Do Not Print the Selection Criteria ***
// WRK.Print (Yes/No) USR = CND.No
WRK.Print_Yes_No_USR = 'N';

//?*** Retrieve TF Classification ***
EXECUTE FUNCTION(Prt TF Class Excep    RT) TYPE(RTVOBJ) FILE(PPAOREP)           AC1713674;
PARAMETER(CUR.Item_Structure_Type_Code);
PARAMETER(CUR.Item_Structure_Group_Code);
PARAMETER(CUR.Item_Structure_Class_Code);
PARAMETER(CUR.TF_Classification_Code);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Text_1_Length_USR);
{
 //?USER: Initialize routine

 // LCL.Count USR = CON.*ZERO
 LCL.Count_USR = 0;

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?All Item Except Listed
 CASE;

 // IF DB1.Include Sts is All Items Except Listed
 IF DB1.Include_Sts = 'E';

 EXECUTE FUNCTION(Val Existance         RT) TYPE(RTVOBJ) FILE(PPAPREP)           AC1713240;
 PARAMETER(DB1.TF_Classification_Code);
 PARAMETER(DB1.Item_Structure_Type_Code);
 PARAMETER(DB1.Item_Structure_Group_Code);
 PARAMETER(DB1.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 CASE;

 // IF LCL.Record Found USR is Record Found
 IF LCL.Record_Found_USR = 'Y';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Only Items Listed
 CASE;

 // IF DB1.Include Sts is Only Items Listed
 IF DB1.Include_Sts = 'O';

 EXECUTE FUNCTION(Val Existance         RT) TYPE(RTVOBJ) FILE(PPAPREP)           AC1713240;
 PARAMETER(DB1.TF_Classification_Code);
 PARAMETER(DB1.Item_Structure_Type_Code);
 PARAMETER(DB1.Item_Structure_Group_Code);
 PARAMETER(DB1.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 CASE;

 // IF LCL.Record Found USR is Record Not Found
 IF LCL.Record_Found_USR = 'N';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Record Selected
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // LCL.Count USR = LCL.Count USR + CON.1
 LCL.Count_USR = LCL.Count_USR + 1;

 CASE;

 // IF LCL.Count USR is One
 IF LCL.Count_USR = 1;

 // PAR.TF Classification Code = DB1.TF Classification Code
 PAR.TF_Classification_Code = DB1.TF_Classification_Code;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Text 1 Length USR = CON.*
 PAR.Text_1_Length_USR = *;

 ENDIF;

 ENDIF;

}


//?*** Print Item Structure Codes and Descriptions ***
//?PRT:  Item Structure Codes & Descriptions
CASE;

// IF DB1.Item Structure Type Code NE LCL.Item Structure Type Code
IF DB1.Item_Structure_Type_Code <> LCL.Item_Structure_Type_Code;

// OR DB1.Item Structure Group Code NE LCL.Item Structure Group Code
OR DB1.Item_Structure_Group_Code <> LCL.Item_Structure_Group_Code;

// OR DB1.Item Structure Class Code NE LCL.Item Structure Class Code
OR DB1.Item_Structure_Class_Code <> LCL.Item_Structure_Class_Code;

// OR PGM.*new page flag is *Yes
OR PGM.*new_page_flag = 'Y';

// CUR.Item Structure Type Code = DB1.Item Structure Type Code
CUR.Item_Structure_Type_Code = DB1.Item_Structure_Type_Code;

// CUR.Item Structure Group Code = DB1.Item Structure Group Code
CUR.Item_Structure_Group_Code = DB1.Item_Structure_Group_Code;

// CUR.Item Structure Class Code = DB1.Item Structure Class Code
CUR.Item_Structure_Class_Code = DB1.Item_Structure_Class_Code;

// LCL.Item Structure Type Code = DB1.Item Structure Type Code
LCL.Item_Structure_Type_Code = DB1.Item_Structure_Type_Code;

// LCL.Item Structure Group Code = DB1.Item Structure Group Code
LCL.Item_Structure_Group_Code = DB1.Item_Structure_Group_Code;

// LCL.Item Structure Class Code = DB1.Item Structure Class Code
LCL.Item_Structure_Class_Code = DB1.Item_Structure_Class_Code;

EXECUTE FUNCTION(Item Str Type Desc DRV) TYPE(DRVFLD)                           AC1705175;
PARAMETER(CUR.Item_Str_Type_Desc_DRV);
PARAMETER(CUR.Item_Structure_Type_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Type Description   RT) TYPE(RTVOBJ) FILE(OME8REP)          AC1229616;
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Str_Type_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Item Str Group Desc DRV) TYPE(DRVFLD)                          AC1705174;
PARAMETER(CUR.Item_Str_Group_Desc_DRV);
PARAMETER(CUR.Item_Structure_Group_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Group Desc) TYPE(RTVOBJ) FILE(OME9REP)                     AC1663396;
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Str_Group_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Item Str Class Desc DRV) TYPE(DRVFLD)                          AC1705173;
PARAMETER(CUR.Item_Str_Class_Desc_DRV);
PARAMETER(CUR.Item_Structure_Class_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Class Desc    RT) TYPE(RTVOBJ) FILE(OMFAREP)          AC1205440;
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Str_Class_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?PRT:  Item Structure Codes & Descriptions
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Item Structure Type Code = CON.*ZERO
CUR.Item_Structure_Type_Code = *ZERO;

// CUR.Item Structure Group Code = CON.*ZERO
CUR.Item_Structure_Group_Code = *ZERO;

// CUR.Item Structure Class Code = CON.*ZERO
CUR.Item_Structure_Class_Code = *ZERO;

// CUR.Item Str Type Desc DRV = CON.*BLANK
CUR.Item_Str_Type_Desc_DRV = *BLANK;

// CUR.Item Str Group Desc DRV = CON.*BLANK
CUR.Item_Str_Group_Desc_DRV = *BLANK;

// CUR.Item Str Class Desc DRV = CON.*BLANK
CUR.Item_Str_Class_Desc_DRV = *BLANK;

ENDIF;

//?SEL:  TF Classfication
CASE;

// IF PAR.TF Classification Code is Entered
IF PAR.TF_Classification_Code <> *BLANK;

CASE;

// IF PAR.TF Classification Code NE CUR.TF Classification Code
IF PAR.TF_Classification_Code <> CUR.TF_Classification_Code;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

ENDIF;

//?SEL:  Assigned Status
CASE;

// IF PAR.Assigned Status is yes
IF PAR.Assigned_Status = 'Y';

CASE;

// IF CUR.TF Classification Code is Not Entered
IF CUR.TF_Classification_Code = *BLANK;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

//?SEL:  Assigned Status
// IF PAR.Assigned Status is no
IF PAR.Assigned_Status = 'N';

CASE;

// IF CUR.TF Classification Code is Entered
IF CUR.TF_Classification_Code <> *BLANK;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

ENDIF;

CASE;

// IF PGM.*Print format is Print format
IF PGM.*Print_format = 'Y';

// PAR.Record Found USR = CND.Record Found
PAR.Record_Found_USR = 'Y';

ENDIF;

//?USER: Print required level totals

// SUPPRESSED PRINT Item Code totals format

// SUPPRESSED PRINT Item Structure Class Code totals format

// SUPPRESSED PRINT Item Structure Group Code totals format

// SUPPRESSED PRINT Item Structure Type Code totals format

