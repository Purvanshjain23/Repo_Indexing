// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDS8E1R
// ?Date: 14.08.2025 Time: 03:29:44
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?OMS036 RMC 4/5/04 Added Deposit Time as key field
EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize key screen

// KEY.Bank Code = PAR.Bank Code
KEY.Bank_Code = PAR.Bank_Code;

// KEY.Deposit Date = PAR.Deposit Date
KEY.Deposit_Date = PAR.Deposit_Date;

// KEY.Deposit Time = PAR.Deposit Time
KEY.Deposit_Time = PAR.Deposit_Time;

CASE;

// IF KEY.Bank Code is Not Entered
IF KEY.Bank_Code = *BLANK;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Program mode = CND.*CHANGE
PGM.*Program_mode = 'CHG';

ENDIF;

//?USER: Validate key screen

//?Select on Bank Code
CASE;

// IF KEY.*CMD key is CF04
IF KEY.*CMD_key = '04';

// AND PGM.*Cursor field <IS> KEY.Bank Code
AND PGM.*Cursor_field = KEY.Bank_Code;

// Call program SEL Bank Master Active SR.
CALL PROGRAM(SEL Bank Master Active SR) ('PDD8SRR');
PARAMETER(KEY.Bank_Code);

ENDIF;

EXECUTE FUNCTION(RTV Bank Description   RT) TYPE(RTVOBJ) FILE(CAEBREP)          AC1333216;
PARAMETER(KEY.Bank_Code);
PARAMETER(WRK.Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Bank Master not found.'
ERROR(USR0850);
MSGPARM(KEY.Bank_Code);

ENDIF;

//?USER: Initialize detail screen (new record)

//?   Edit Deposit date
// PAR.Number of Days = CON.7
PAR.Number_of_Days = 7;

// PAR.USR Deposit Date in Past = JOB.*Job date - KEY.Deposit Date *DAYS
PAR.USR_Deposit_Date_in_Past = DURATION(JOB.*Job_date KEY.Deposit_Date 'DY' 1111111                +
'NONE' 'N' 1);

//?Date more that week in past
CASE;

// IF PAR.USR Deposit Date in Past GT PAR.Number of Days
IF PAR.USR_Deposit_Date_in_Past > PAR.Number_of_Days;

// Send error message - 'Deposit date more than 7 days in the past.'
ERROR(USR2045);
MSGPARM(KEY.Deposit_Date);

ENDIF;

//?Deposit date is a future date
CASE;

// IF KEY.Deposit Date GT JOB.*Job date
IF KEY.Deposit_Date > JOB.*Job_date;

// Send error message - 'Deposit Date can not be a future date.'
ERROR(USR2044);
MSGPARM(KEY.Deposit_Date);

ENDIF;

EXECUTE FUNCTION(RTV Bank Description   RT) TYPE(RTVOBJ) FILE(CAEBREP)          AC1333216;
PARAMETER(KEY.Bank_Code);
PARAMETER(DTL.Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Record Status = CND.Active
DTL.Record_Status = 'A';

// DTL.A/R Processing Status = CND.Open- no Activity
DTL.A_R_Processing_Status = 'O';

//?USER: Initialize detail screen (existing record)

//?   Edit Deposit date
//?Deposit date in the future
CASE;

// IF KEY.Deposit Date GT JOB.*Job date
IF KEY.Deposit_Date > JOB.*Job_date;

// Send error message - 'Deposit Date can not be a future date.'
ERROR(USR2044);
MSGPARM(KEY.Deposit_Date);

ENDIF;

EXECUTE FUNCTION(RTV Bank Description   RT) TYPE(RTVOBJ) FILE(CAEBREP)          AC1333216;
PARAMETER(KEY.Bank_Code);
PARAMETER(DTL.Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Remaining Balance Due = DB1.Deposit Amount - DB1.Total Cash Applied
DTL.Remaining_Balance_Due = DB1.Deposit_Amount - DB1.Total_Cash_Applied;

CASE;

// IF DB1.A/R Processing Status is Posted transaction
IF DB1.A_R_Processing_Status = 'P';

// Send error message - 'Deposit can not be changed.'
ERROR(USR2092);
MSGPARM(DB1.A_R_Processing_Status);

ENDIF;

//?USER: Validate detail screen fields

// DTL.Remaining Balance Due = DTL.Deposit Amount - DTL.Total Cash Applied
DTL.Remaining_Balance_Due = DTL.Deposit_Amount - DTL.Total_Cash_Applied;

//?USER: Create DBF record

EXECUTE FUNCTION(CRT AR A/R Bank DepositCR) TYPE(CRTOBJ) FILE(PDJ2CPP)          AC1333048;
PARAMETER(DTL.Bank_Code);
PARAMETER(DTL.Deposit_Date);
PARAMETER(DTL.Deposit_Time);
PARAMETER(DTL.Deposit_Amount);
PARAMETER(DTL.Total_Cash_Applied);
PARAMETER('O');
PARAMETER(DTL.GL_Document_Number);
PARAMETER(DTL.Number_of_Deposit_Checks);
PARAMETER(DTL.Number_of_Applied_Checks);
PARAMETER(DTL.CD_TF_Internal_Batch_Nbr);
PARAMETER(DTL.CD_TF_Immediate_Fund_Amt);
PARAMETER(DTL.CD_TF_1_Day_Fund_Amt);
PARAMETER(DTL.CD_TF_2_Day_Fund_Amt);
PARAMETER(DTL.CD_SB_Exempt_Immed_Amt);
PARAMETER(DTL.CD_SB_1_Day_Exempt_Immed);
PARAMETER(DTL.CD_SB_2_Day_Exempt_Immed);
PARAMETER(DTL.SBD_Exempt_Total_Amount);
PARAMETER(DTL.ARBD_Unused_Amt_2);
PARAMETER(DTL.ARBD_Unused_Amt_3);
PARAMETER(DTL.ARBD_Unused_Amt_4);
PARAMETER(DTL.ARBD_Unused_Amt_5);
PARAMETER(DTL.G_L_Post_Date);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER('A');
PARAMETER(DTL.Job_Time);
PARAMETER(DTL.User_Id);
PARAMETER(DTL.Job_Name);
PARAMETER(DTL.Job_Date);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG AR A/R Bank DepositCH) TYPE(CHGOBJ) FILE(PDJ2CPP)          AC1333049;
PARAMETER(DTL.Bank_Code);
PARAMETER(DTL.Deposit_Date);
PARAMETER(DTL.Deposit_Time);
PARAMETER(DTL.Deposit_Amount);
PARAMETER(DTL.Total_Cash_Applied);
PARAMETER(DTL.A_R_Processing_Status);
PARAMETER(DTL.GL_Document_Number);
PARAMETER(DTL.Number_of_Deposit_Checks);
PARAMETER(DTL.Number_of_Applied_Checks);
PARAMETER(DTL.CD_TF_Internal_Batch_Nbr);
PARAMETER(DTL.CD_TF_Immediate_Fund_Amt);
PARAMETER(DTL.CD_TF_1_Day_Fund_Amt);
PARAMETER(DTL.CD_TF_2_Day_Fund_Amt);
PARAMETER(DTL.CD_SB_Exempt_Immed_Amt);
PARAMETER(DTL.CD_SB_1_Day_Exempt_Immed);
PARAMETER(DTL.CD_SB_2_Day_Exempt_Immed);
PARAMETER(DTL.SBD_Exempt_Total_Amount);
PARAMETER(DTL.ARBD_Unused_Amt_2);
PARAMETER(DTL.ARBD_Unused_Amt_3);
PARAMETER(DTL.ARBD_Unused_Amt_4);
PARAMETER(DTL.ARBD_Unused_Amt_5);
PARAMETER(DTL.G_L_Post_Date);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Job_Time);
PARAMETER(DTL.User_Id);
PARAMETER(DTL.Job_Name);
PARAMETER(DTL.Job_Date);

