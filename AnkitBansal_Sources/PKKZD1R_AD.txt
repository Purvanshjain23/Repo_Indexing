// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKKZD1R
// ?Date: 14.08.2025 Time: 02:49:49
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?E16021 JJH 01/05/20 - PSC Mkt (+/-)
ENDDO;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(WRK.Oms_Warehouse_Code);
PARAMETER(WRK.Company_Number_USR);
PARAMETER('HPE');
PARAMETER(WRK.Oms_SalesPerson_Code);
PARAMETER(WRK.Oms_Allow_Multi_Company);
PARAMETER(WRK.Oms_Default_Printer);
PARAMETER(WRK.Oms_Name);
PARAMETER(WRK.Oms_System_Value_Alpha);
PARAMETER(WRK.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


CASE;

// IF WRK.Oms Access Denied (Y/N) is Yes
IF WRK.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

// WRK.PRT Night Queue Run Sts = CND.No
WRK.PRT_Night_Queue_Run_Sts = 'N';

//?CALC: Detail screen function fields

EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PD_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.PL_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Genetic Record    RT) TYPE(RTVOBJ) FILE(PKAIREP)           AB1107738;
PARAMETER(DTL.GN_Genetic_Code);
PARAMETER(DTL.GN_Description);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.GN_Description = *BLANK;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Price Option Info RT) TYPE(RTVOBJ) FILE(PKAKREP)           AB1116516;
PARAMETER(DTL.PO_Option_Code);
PARAMETER(DTL.PO_Description);
PARAMETER(WRK.PO_Unused_Code_1);
PARAMETER(WRK.PO_Unused_Code_2);
PARAMETER(WRK.PO_Floor_Price_Req);
PARAMETER(WRK.PO_Ceiling_Price_Req);
PARAMETER(WRK.PO_Market_Req);
PARAMETER(WRK.PO_Base_Prch_Prc_Req);
PARAMETER(WRK.PO_Comp_Price_Adj_Req);
PARAMETER(WRK.PO_Rsrv_Acct_Bal_Sts_Req);
PARAMETER(WRK.PO_Mkt_Crc_Prc_Adj_Req);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv CMP Info          RT) TYPE(RTVOBJ) FILE(PKARREP)           AB1116767;
PARAMETER(DTL.CMP_Program_Code);
PARAMETER(DTL.CMP_Description);
PARAMETER(WRK.#Txt_USR);
PARAMETER(WRK.#Txt_USR);
PARAMETER(WRK.#Txt_USR);
PARAMETER(WRK.#Num_USR);
PARAMETER(WRK.#Num_USR);
PARAMETER(WRK.#Txt_USR);
PARAMETER(WRK.#Txt_USR);
PARAMETER(WRK.CMP_Market_Add_Deduct);
PARAMETER(DTL.RS_Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Record Status Desc Usr = Condition name of DTL.RS Record Status
DTL.Record_Status_Desc_Usr = RTVCND(DTL.RS_Record_Status);

// Call program Val Commodity Group   XF.
CALL PROGRAM(Val Commodity Group   XF) ('PDG2XFR');
PARAMETER(DTL.PSC_Commodity_Price_Group);
PARAMETER(DTL.Market_Group_Desc_USR);
PARAMETER(WRK.Invalid_Y_N_USR);

CASE;

// IF WRK.Invalid Y/N USR is Yes
IF WRK.Invalid_Y_N_USR = 'Y';

// DTL.Market Group Desc USR = CONCAT(CON.Invalid Price Group,CON.*BLANK,CND.*None)
DTL.Market_Group_Desc_USR = 'Invalid Price Group' + *BLANK (*ZERO);

ENDIF;

// Call program Val Commodity Market  XF.
CALL PROGRAM(Val Commodity Market  XF) ('PDG1XFR');
PARAMETER(DTL.PSC_Commodity_Market_Code);
PARAMETER(DTL.Market_Code_Desc_USR);
PARAMETER(WRK.Invalid_Y_N_USR);

CASE;

// IF WRK.Invalid Y/N USR is Yes
IF WRK.Invalid_Y_N_USR = 'Y';

// DTL.Market Code Desc USR = CONCAT(CON.Invalid Market Code,CON.*BLANK,CND.*None)
DTL.Market_Code_Desc_USR = 'Invalid Market Code' + *BLANK (*ZERO);

ENDIF;

// Call program Val Market Date Method UP.
CALL PROGRAM(Val Market Date Method UP) ('PDZUXFR');
PARAMETER(WRK.*Return_code);
PARAMETER(WRK.Company_Number_USR);
PARAMETER(DTL.PSC_Market_Date_Method);
PARAMETER(DTL.Market_Date_Method_Desc);
PARAMETER('H');

CASE;

// IF DTL.Market Date Method Desc EQ WRK.Blank USR
IF DTL.Market_Date_Method_Desc = WRK.Blank_USR;

// DTL.Market Date Method Desc = CONCAT(CON.Invalid Market Date Metho,CON.d,CND.*No
DTL.Market_Date_Method_Desc = 'Invalid Market Date Metho' + 'd' (*ZERO);

ENDIF;

// DTL.Condition Name USR = Condition name of DTL.PSC Sub-Contract Type
DTL.Condition_Name_USR = RTVCND(DTL.PSC_Sub_Contract_Type);

