// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBEAPVR
// ?Date: 14.08.2025 Time: 03:47:35
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Process command keys

CASE;

// IF DTL.*CMD key is *Exit
IF DTL.*CMD_key = '03';

// PAR.Return Code Usr = CND.Submit Cancelled
PAR.Return_Code_Usr = 'USR3649';

// PGM.*Return code = CND.*User QUIT requested
PGM.*Return_code = 'Y2U9999';

ENDIF;

//?USER: Validate fields

//?F4=Prompt
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Company Number
IF PGM.*Cursor_field = DTL.Company_Number;

//?** Prompt for Start Date
// Call program SEL Co By Number       SR.
CALL PROGRAM(SEL Co By Number       SR) ('PDMESRR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Company_Name_DRV);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF PGM.*Cursor field <IS> DTL.Price Start Date
IF PGM.*Cursor_field = DTL.Price_Start_Date;

//?** Prompt for Start Date
// Call program Zzz CPH Start Date    SL.
CALL PROGRAM(Zzz CPH Start Date    SL) ('PMVUSRR');
PARAMETER(DTL.Price_Start_Date);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF PGM.*Cursor field <IS> DTL.Price End Date
IF PGM.*Cursor_field = DTL.Price_End_Date;

//?** Prompt for End Date
// Call program Zzz CPH Start Date    SL.
CALL PROGRAM(Zzz CPH Start Date    SL) ('PMVUSRR');
PARAMETER(DTL.Price_End_Date);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF PGM.*Cursor field <IS> DTL.Entered by User
IF PGM.*Cursor_field = DTL.Entered_by_User;

// Call program Zzz CPH Entered By    SL.
CALL PROGRAM(Zzz CPH Entered By    SL) ('PMVXSRR');
PARAMETER(LCL.Price_Start_Date);
PARAMETER(LCL.Price_End_Date);
PARAMETER(DTL.Entered_by_User);

// IF PGM.*Cursor field <IS> DTL.Entered by User 2
IF PGM.*Cursor_field = DTL.Entered_by_User_2;

// Call program Zzz CPH Entered By    SL.
CALL PROGRAM(Zzz CPH Entered By    SL) ('PMVXSRR');
PARAMETER(LCL.Price_Start_Date);
PARAMETER(LCL.Price_End_Date);
PARAMETER(DTL.Entered_by_User_2);

// IF PGM.*Cursor field <IS> DTL.Entered by User 3
IF PGM.*Cursor_field = DTL.Entered_by_User_3;

// Call program Zzz CPH Entered By    SL.
CALL PROGRAM(Zzz CPH Entered By    SL) ('PMVXSRR');
PARAMETER(LCL.Price_Start_Date);
PARAMETER(LCL.Price_End_Date);
PARAMETER(DTL.Entered_by_User_3);

// IF PGM.*Cursor field <IS> DTL.Entered by User 4
IF PGM.*Cursor_field = DTL.Entered_by_User_4;

// Call program Zzz CPH Entered By    SL.
CALL PROGRAM(Zzz CPH Entered By    SL) ('PMVXSRR');
PARAMETER(LCL.Price_Start_Date);
PARAMETER(LCL.Price_End_Date);
PARAMETER(DTL.Entered_by_User_4);

// IF PGM.*Cursor field <IS> DTL.Entered by User 5
IF PGM.*Cursor_field = DTL.Entered_by_User_5;

// Call program Zzz CPH Entered By    SL.
CALL PROGRAM(Zzz CPH Entered By    SL) ('PMVXSRR');
PARAMETER(LCL.Price_Start_Date);
PARAMETER(LCL.Price_End_Date);
PARAMETER(DTL.Entered_by_User_5);

ENDIF;

ENDIF;

//?Email Address required if Spreadsheet is selected
CASE;

// IF DTL.Email Selection usr is Spreadsheet Format
IF DTL.Email_Selection_usr = 'S';

CASE;

// IF DTL.Email Address is Blank
IF DTL.Email_Address = *BLANK;

// Send error message - 'Email address cannot be left blank. Enter a valid email address.'
ERROR(USR3670);
MSGPARM(DTL.Email_Address);

ENDIF;

ENDIF;

//?CALC: Screen function fields

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Validate relations

//?** Verify date range is in correct order
CASE;

// IF DTL.Price Start Date GT DTL.Price End Date
IF DTL.Price_Start_Date > DTL.Price_End_Date;

// Send error message - 'From date exceeds to date.  Please re-enter.'
ERROR(USR0319);
MSGPARM(DTL.Price_Start_Date);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

CASE;

// IF DTL.Company Number is greater than zero
IF DTL.Company_Number > *ZERO;

EXECUTE FUNCTION(Val Company Number    RT) TYPE(RTVOBJ) FILE(CAABREP)           AC1343408;
PARAMETER(DTL.Company_Number);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


//?** Error if Company is entered but not found
CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send error message - 'Company not found.'
ERROR(USR2831);
MSGPARM(DTL.Company_Number);

ENDIF;

ENDIF;

//?USER: User defined action

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Night Queue = CND.Not entered
PAR.PRT_Night_Queue = *BLANK;

// PAR.System Value Numeric = CON.1
PAR.System_Value_Numeric = 1;

// PAR.PRT Description = CON.Montly Contract Pricing
PAR.PRT_Description = 'Montly Contract Pricing';

// PAR.PRT Hold Output Sts = CND.*NO
PAR.PRT_Hold_Output_Sts = *NO;

// PAR.PRT Save Output Sts = CND.*NO
PAR.PRT_Save_Output_Sts = *NO;

// PAR.Company Number Pass   USR = DTL.Company Number
PAR.Company_Number_Pass_USR = DTL.Company_Number;

// PAR.From Date Pass        USR = DTL.Price Start Date
PAR.From_Date_Pass_USR = DTL.Price_Start_Date;

// PAR.Thru Date Pass        USR = DTL.Price End Date
PAR.Thru_Date_Pass_USR = DTL.Price_End_Date;

// Call program PRT Mthly Cntr Prc Rpt CL.
CALL PROGRAM(PRT Mthly Cntr Prc Rpt CL) ('PBDEUPC');
PARAMETER('OMS');
PARAMETER(PAR.PRT_Description);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.From_Date_Pass_USR);
PARAMETER(PAR.Thru_Date_Pass_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(DTL.Entered_by_User);
PARAMETER(DTL.Entered_by_User_2);
PARAMETER(DTL.Entered_by_User_3);
PARAMETER(DTL.Entered_by_User_4);
PARAMETER(DTL.Entered_by_User_5);
PARAMETER(DTL.Email_Selection_usr);
PARAMETER(DTL.Email_Address);

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

// PAR.Return Code Usr = CND.*Blank
PAR.Return_Code_Usr = *BLANK;

//?USER: Exit program processing

CASE;

// IF DTL.*CMD key is *Exit
IF DTL.*CMD_key = '03';

// PAR.Return Code Usr = CND.Submit Cancelled
PAR.Return_Code_Usr = 'USR3649';

ENDIF;

