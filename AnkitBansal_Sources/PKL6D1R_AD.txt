// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKL6D1R
// ?Date: 14.08.2025 Time: 02:52:09
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?R7522 JJH 12/22/16 - Scheduling Modificaitons
//?- Recompile program so that it will display the Source Description
//?  from "Val Source RT - DBF Source".
//?H16853 ISE 11/09/2020 - Recompiled due to change in Buy Order Number
ENDDO;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


//?USER: Load detail screen from DBF record

// DTL.Condition Name 1 USR = Condition name of DTL.PCS Comp Selection Type
DTL.Condition_Name_1_USR = RTVCND(DTL.PCS_Comp_Selection_Type);

//?Val:  Commodity Market
CASE;

// IF DTL.PCS Comm Market NE WRK.Blank USR
IF DTL.PCS_Comm_Market <> WRK.Blank_USR;

// Call program Val Commodity Market  XF.
CALL PROGRAM(Val Commodity Market  XF) ('PDG1XFR');
PARAMETER(DTL.PCS_Comm_Market);
PARAMETER(DTL.Market_Code_Desc_USR);
PARAMETER(WRK.Invalid_Y_N_USR);

//?Commodity Market
CASE;

// IF WRK.Invalid Y/N USR is Yes
IF WRK.Invalid_Y_N_USR = 'Y';

// Send error message - 'Commodity Market &1 is invalid.'
ERROR(PRK0482);
MSGPARM(DTL.PCS_Comm_Market);

ENDIF;

ENDIF;

//?Val:  Commodity Price Group
CASE;

// IF DTL.PCS Comm Price Group NE WRK.Blank USR
IF DTL.PCS_Comm_Price_Group <> WRK.Blank_USR;

// Call program Val Commodity Group   XF.
CALL PROGRAM(Val Commodity Group   XF) ('PDG2XFR');
PARAMETER(DTL.PCS_Comm_Price_Group);
PARAMETER(DTL.Market_Group_Desc_USR);
PARAMETER(WRK.Invalid_Y_N_USR);

//?Commodity Group
CASE;

// IF WRK.Invalid Y/N USR is Yes
IF WRK.Invalid_Y_N_USR = 'Y';

// Send error message - 'Commodity Group &1 is invalid.'
ERROR(PRK0483);
MSGPARM(DTL.PCS_Comm_Price_Group);

ENDIF;

ENDIF;

//?Val:  Pricing Option
CASE;

// IF DTL.PCS Pricing Option NE WRK.Blank USR
IF DTL.PCS_Pricing_Option <> WRK.Blank_USR;

EXECUTE FUNCTION(Val Pricing Option) TYPE(RTVOBJ) FILE(PKAKREP)                 AB1202034;
PARAMETER(DTL.PCS_Pricing_Option);
PARAMETER(DTL.PO_Description);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


//?Pricing Option
CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// Send error message - 'Pricing Option not found.'
ERROR(PRK0025);

ENDIF;

ENDIF;

//?Val:  Carcass Merit Program
CASE;

// IF DTL.PCS Carcass Merit Pgm NE WRK.Blank USR
IF DTL.PCS_Carcass_Merit_Pgm <> WRK.Blank_USR;

EXECUTE FUNCTION(Val Carc Merit Pgm    RT) TYPE(RTVOBJ) FILE(PKARREP)           AB1202035;
PARAMETER(DTL.PCS_Carcass_Merit_Pgm);
PARAMETER(DTL.CMP_Description);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


//?Carcass Merit Program
CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// Send error message - 'Carcass Merit Program not found.'
ERROR(PRK0039);

ENDIF;

ENDIF;

//?Val:  Source Code
CASE;

// IF DTL.SR Source Code NE WRK.Blank USR
IF DTL.SR_Source_Code <> WRK.Blank_USR;

EXECUTE FUNCTION(Val Source            RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1202234;
PARAMETER(DB1.SR_Source_Code);
PARAMETER(DTL.SR_Description);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// Send error message - 'Source not found.'
ERROR(PRK0005);

ENDIF;

ENDIF;

// DTL.Condition Name 2 USR = Condition name of DTL.PCS Payment Type
DTL.Condition_Name_2_USR = RTVCND(DTL.PCS_Payment_Type);

// DTL.Condition Name 3 USR = Condition name of DTL.PCS Live As Carc Sts
DTL.Condition_Name_3_USR = RTVCND(DTL.PCS_Live_As_Carc_Sts);

// DTL.Condition Name 4 USR = Condition name of DTL.PCS Replacement Cost Sts
DTL.Condition_Name_4_USR = RTVCND(DTL.PCS_Replacement_Cost_Sts);

// DTL.Condition Name USR = Condition name of DTL.PCS Comp Process Sts
DTL.Condition_Name_USR = RTVCND(DTL.PCS_Comp_Process_Sts);

// DTL.Condition Name 5 USR = Condition name of DTL.PCS Mkt+/- B4/Aftr CUTOUT
DTL.Condition_Name_5_USR = RTVCND(DTL.PCS_Mkt+_B4_Aftr_CUTOUT);

