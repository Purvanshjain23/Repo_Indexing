// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPNVD1R
// ?Date: 14.08.2025 Time: 03:41:16
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?*** Setup Security & Company Title ***
// PAR.Application Code = CND.Order Management System
PAR.Application_Code = 'OMS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

//?USER: Load key screen

CASE;

// IF PAR.Claim Number is Zero
IF PAR.Claim_Number = *ZERO;

// KEY.Claim Number = CON.1000
KEY.Claim_Number = 1000;

ENDIF;

//?USER: Load detail screen from DBF record

//?T10560 DN 05/18/17 - Display FPR ID USR on screen.
// DTL.FPR ID USR = DB1.FPR ID
DTL.FPR_ID_USR = DB1.FPR_ID;

// DTL.Claim Status Desc     USR = Condition name of DTL.Claim Status
DTL.Claim_Status_Desc_USR = RTVCND(DTL.Claim_Status);

CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

// DTL.Claim Company Number = PAR.Claim Company Number
DTL.Claim_Company_Number = PAR.Claim_Company_Number;

// DTL.Claim Order Number = PAR.Claim Order Number
DTL.Claim_Order_Number = PAR.Claim_Order_Number;

// DTL.Load ID = PAR.Load ID
DTL.Load_ID = PAR.Load_ID;

EXECUTE FUNCTION(RTV Salesperson Name   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1111501;
PARAMETER(DTL.Salesperson_to_Rvw_Claim);
PARAMETER(DTL.Description_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

//?If Company/Order changed, reload Company,Order.
CASE;

// IF DB1.Claim Company Number EQ PAR.Claim Company Number
IF DB1.Claim_Company_Number = PAR.Claim_Company_Number;

// AND DB1.Claim Order Number EQ PAR.Claim Order Number
AND DB1.Claim_Order_Number = PAR.Claim_Order_Number;

// DTL.Claim Company Number = PAR.Claim Company Number
DTL.Claim_Company_Number = PAR.Claim_Company_Number;

// DTL.Claim Order Number = PAR.Claim Order Number
DTL.Claim_Order_Number = PAR.Claim_Order_Number;

// DTL.Load ID = PAR.Load ID
DTL.Load_ID = PAR.Load_ID;

EXECUTE FUNCTION(RTV Salesperson Name   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1111501;
PARAMETER(DTL.Salesperson_to_Rvw_Claim);
PARAMETER(DTL.Description_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If Company/Order changed, reload Company,Order.
// IF *OTHERWISE
IF *OTHERWISE;

//?Get Order Information.
DO;

EXECUTE FUNCTION(RTV Claim Order Info   RT) TYPE(RTVOBJ) FILE(OMHSTPP)          AC1524891;
PARAMETER(DTL.Claim_Company_Number);
PARAMETER(DTL.Claim_Order_Number);
PARAMETER(DTL.Claim_Ship_to_Customer);
PARAMETER(DTL.Claim_Customer_Name);
PARAMETER(DTL.Customer_Purchase_Order_#);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(WRK.Unused_Parm_Date_USR);
PARAMETER(WRK.Unused_Parm_CD7_USR);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(WRK.Unused_Parm_Date_USR);
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Salesperson_to_Rvw_Claim);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(PAR.Salesperson_to_Rvw_Claim);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Claim Order Info   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1525060;
PARAMETER(DTL.Claim_Company_Number);
PARAMETER(DTL.Claim_Order_Number);
PARAMETER(DTL.Claim_Ship_to_Customer);
PARAMETER(DTL.Claim_Customer_Name);
PARAMETER(DTL.Customer_Purchase_Order_#);
PARAMETER(WRK.Unused_Parm_Date_USR);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(DTL.Load_ID);
PARAMETER(WRK.Unused_Parm_CD7_USR);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(WRK.Unused_Parm_Date_USR);
PARAMETER(DTL.Salesperson_to_Rvw_Claim);
PARAMETER(PAR.Warehouse_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 EXECUTE FUNCTION(RTV Whse/Non Cancelled RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428700;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?C2748:  Changed RTV Warehouse Code RT to exclude Cancelled lines.
  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

  ENDIF;

 }

 EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(PAR.Salesperson_to_Rvw_Claim);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


ENDIF;

EXECUTE FUNCTION(RTV Salesperson Name   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1111501;
PARAMETER(DTL.Salesperson_to_Rvw_Claim);
PARAMETER(DTL.Description_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDDO;

//?Get Actual Delivery Date.
DO;

EXECUTE FUNCTION(RTV Requested Dlvry dt RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1506764;
PARAMETER(DTL.Claim_Company_Number);
PARAMETER(DTL.Claim_Order_Number);
PARAMETER(DTL.Actual_Delivery_Date);
PARAMETER(WRK.Unused_Parm_CD70_USR);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDDO;

// PAR.Load ID = DTL.Load ID
PAR.Load_ID = DTL.Load_ID;

ENDIF;

ENDIF;

//?WI592 DN 06/07/23-Get Warehouse & Accounting Company.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV 1st Warehouse 2    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2158777;
PARAMETER(DTL.Claim_Company_Number);
PARAMETER(DTL.Claim_Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(DTL.Warehouse_Code);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(Rtv Acct Co          RT) TYPE(RTVOBJ) FILE(CAADREP)            AC1802492;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?CALC: Detail screen function fields

CASE;

// IF DTL.Claim Called in by is Customer
IF DTL.Claim_Called_in_by = 'C';

// AND DTL.Claim Called in by Desc is Blank
AND DTL.Claim_Called_in_by_Desc = *BLANK;

// DTL.Claim Called in by Desc = DTL.Claim Contact Name
DTL.Claim_Called_in_by_Desc = DTL.Claim_Contact_Name;

// IF DTL.Claim Called in by is Plant
IF DTL.Claim_Called_in_by = 'P';

// AND DTL.Claim Called in by Desc is Blank
AND DTL.Claim_Called_in_by_Desc = *BLANK;

// DTL.Claim Called in by Desc = CND.Accounting
DTL.Claim_Called_in_by_Desc = 'Accounting';

ENDIF;

EXECUTE FUNCTION(ACR Shipping Method DRV) TYPE(DRVFLD)                          AC2098708;
PARAMETER(DTL.ACR_Shipping_Method_DRV);
PARAMETER(DTL.AC_Shipping_Method);
{
 //?Calculate derived field

 // PAR.ACR Shipping Method DRV = Condition name of PAR.ACR Shipping Method
 PAR.ACR_Shipping_Method_DRV = RTVCND(PAR.ACR_Shipping_Method);

}


//?USER: Validate detail screen

CASE;

// IF DTL.*CMD key is CF21
IF DTL.*CMD_key = '21';

//?F21=Display Claim Explanation.
DO;

// Call program DSP Claim Explanation  DF.
CALL PROGRAM(DSP Claim Explanation  DF) ('PDN0DFR');
PARAMETER(DTL.Claim_Number);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDDO;

// IF DTL.*CMD key is CF22
IF DTL.*CMD_key = '22';

//?F22=Display Claim Products.
DO;

// Call program Dsp Claim Products ItemDF.
CALL PROGRAM(Dsp Claim Products ItemDF) ('PPNWDFR');
PARAMETER(DTL.Claim_Number);
PARAMETER(DTL.Claim_Company_Number);
PARAMETER(DTL.Claim_Order_Number);
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Claim_Ship_to_Customer);
PARAMETER(DTL.Claim_Customer_Name);
PARAMETER(DTL.Claim_Type);
PARAMETER(DTL.Claim_Amount);
PARAMETER(DTL.Claim_Net_Loss);
PARAMETER(PAR.Clm_Program_USR);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDDO;

// IF DTL.*CMD key is CF23
IF DTL.*CMD_key = '23';

//?F23=Display Claim Resale Products.
DO;

// Call program Dsp Claim Resale       DF.
CALL PROGRAM(Dsp Claim Resale       DF) ('PLBFDFR');
PARAMETER(DTL.Claim_Number);
PARAMETER(DTL.Claim_Company_Number);
PARAMETER(DTL.Claim_Order_Number);
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Claim_Ship_to_Customer);
PARAMETER(DTL.Claim_Customer_Name);
PARAMETER(DTL.Claim_Type);
PARAMETER(DTL.Claim_Amount);
PARAMETER(DTL.Claim_Net_Loss);
PARAMETER(PAR.Clm_Program_USR);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDDO;

// IF DTL.*CMD key is CF24
IF DTL.*CMD_key = '24';

//?F24=Display Claim Expense
DO;

// Call program DSP Claim Expense     DF.
CALL PROGRAM(DSP Claim Expense     DF) ('PPVNDFR');
PARAMETER(DTL.Claim_Number);
PARAMETER(WRK.Expense_Code);
PARAMETER(WRK.Sequence_Number);
PARAMETER(DTL.Claim_Company_Number);
PARAMETER(DTL.Claim_Order_Number);
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Claim_Ship_to_Customer);
PARAMETER(DTL.Claim_Customer_Name);
PARAMETER(DTL.Claim_Status);
PARAMETER(PAR.Clm_Program_USR);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDDO;

ENDIF;

//?USER: Exit program processing

CASE;

// IF KEY.*CMD key is CF03
IF KEY.*CMD_key = '03';

// PAR.Clm Program USR = CND.Exit
PAR.Clm_Program_USR = 'EXT';

RETURN;

ENDIF;

