     *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      Hog Production
      * PROGRAM:     HP7033
      * TITLE:       View HPS-To-JDE Upload Status Changes
      * PROGRAMMER:  LeAnne Ramsey
      * CREATED:     11/11/08
      *
      *
      * FUNCTION: This is a View that displays the records in the HPS-To-JDE Uploads:
      *           Status Changes file.
      *
      *           Restrictors:
      *                Upload code
      *                Accounting year
      *                Accounting period
      *
      *           Positioners:
      *               None
      *
      *           Selectors:
      *               None
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 04/28/09  LeAnne Ramsey
      *           Added Beginning/Ending Period Dates as output in Control Record.
      *           For FD and FP: Added Messages regarding Uncosted Feed Tickets
      *                          Added Costed Time Stamp
      *
      * 09/21/09  LeAnne Ramsey
      *           Recompile only. Added new field 'Upload Date' to Feed Ticket Header.
      *
      * 10/05/18  Danny Nguyen - S13682
      *           Added Company Code to entry parm list, screen & to key01 list.
      *           Changed subfile page from 9 to 8.
      *
      * 05/10/22 Eric L SDN736 Recompiled ticket nbr increase (TKNO & RTNO 7.0 TO 9.0)
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhpd7033   cf   e             workstn sfile(hp7033s1:hdrrn1)
     F                                     infds(iofeed)
      *
      *
     Fhsp035    if   e           k disk
      *    HPS to JDE upload codes
      *
      *
     Fhsl037n   if   e           k disk
      *   Feed ticket header  (selects EN, RC produced Delivery tickets)
      *
      *
     Fhsl037r   if   e           k disk    rename(fhrec:fhrecr)
      *   Feed ticket header
      *   (selects EN, RC produced Pickup tickets with No To Farm or Different From/To Farms)
      *
      *
     Fhsl037q   if   e           k disk    rename(fhrec:fhrecq)
      *   Feed ticket header  (selects produced Delivery tickets with a costed time)
      *
      *
     Fhsl037o   if   e           k disk    rename(fhrec:fhreco)
      *   Feed ticket header
      *   (selects produced Pickup tickets with No To Farm or Different From/To Farms
      *    that have a costed time)
      *
      *
     Fhsp116    if   e           k disk    infds(dbfeed)
      *   HPS-To-JDE Uploads: Status changes
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D maxmsg          s              2  0  inz(20)
     D routne          s              6
     D maxrrn          s              4  0
     D reset           s              1    inz('N')
     D norecs          s              1    inz('N')
     D count           s              2  0
     D wkflow          s                   like(idflow)
     D rtncd           s              2
     D svrrn1          s                   like(hdrrn1)
      *
      * Control/save fields
      *
     D first           s              1
     D svuplscd        s                   like(scuplscd)
     D svupldt         s                   like(sccrdt)
     D svupltm         s                   like(sccrtm)
      *
      *
      * Workfields
      *
     D wktrcd          s                   like(fhtrcd)
     D wkdt            s                   like(fhepdt)
      *
      *
      * Workfields for date manipulation
      *
     D wkisodate       s               D   datfmt(*iso)
      *
      *
      * Parm fields
      *
     D xxbpdt          s              8  0
     D xxepdt          s              8  0
      *
      *
      * Workfields required for subfile paging--see initialization
      * subroutine.
      *
     D wkplin          s              2  0
     D wkrlin          s              2  0
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      *  Definition for external data area 'DAAPER'
      *---------------------------------------------------------------
     D
     D daaper          ds                  dtaara(daaper)
     D  daccyy                 1      4  0
     D  daper                  5      6  0
     D  dabpdt                 7     14  0
     D  daepdt                15     22  0
     D  dapgfl                23     23
     D  dappfl                24     24
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * Clear and fill the subfile
      *
     C                   exsr      $clr1
     C                   exsr      $frsh1
      *
      * Set routine to display screen
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * If this is Feed Delivery or Feed Pickup stuff, check to see if you need
      * to display any message alerts about costing/costed feed tickets.
      * NOTE: We only put the data in place to make this check in May 2009.
      *       So, only execute the logic if you have a value in the entry parm for
      *       Beginning Period Date.
      *
     C                   if        xxbpdt <> 0 and
     C                             (c1hucd = 'FD' or c1hucd = 'FP')
     C                   exsr      $feed
     C                   endif
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to crt
      *
     C                   write     hp7033k1
     C                   write     hp7033ec
     C                   exfmt     hp7033c1
      *
      * Save the value of the lowest subfile rrn on the screen for
      * later repositioning of the subfile
      *
     C                   eval      wkflow = idflow
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-Exit
     c                   eval      rtncd = '03'
     C                   eval      routne = exit
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   movel     yes           reset
     C                   eval      routne = set1
      *
     C                   when      *in25 = *on                                  F25-Rollup
     C                   exsr      $load1
     C                   other
      *
      * User has pressed enter
      *
     C                   eval      rtncd = '00'
     C                   movel     exit          routne
     C                   endsl
      *
     C                   endsr
      /EJECT
      *------------------------------------------------------------------------------
      * Check for Feed Ticket Costing Times and display messages if appropriate
      *------------------------------------------------------------------------------
      *
     C     $feed         begsr
      *
      * Set the key value to be either Delivery or Pickup tickets.
      *
     C                   select
     C                   when      c1hucd = 'FD'
     C                   move      'D'           wktrcd
      *
     C                   when      c1hucd = 'FP'
     C                   move      'P'           wktrcd
     C                   endsl
      *
      *------------------
      * UNCOSTED TICKETS
      *------------------
      * If there are any Uncosted Feed Tickets for this Period, we want to
      * set on Indicator 88 to display a message in the Control Record.
      *
     C                   setoff                                       88
     C                   move      *blank        c1msg1
      *
      * Check for uncosted tickets in the Period
      *
     C                   select
     C                   when      wktrcd = 'D'
     C     key02         setll     hsl037n
     C     wktrcd        reade     hsl037n                                92
      *
     C                   when      wktrcd = 'P'
     C     key02         setll     hsl037r
     C     wktrcd        reade     hsl037r                                92
     C                   endsl
      *
     C                   if        *in92 = *off and fhtkdt <= xxepdt            If uncosted
     C                   seton                                        88
      *
     C                   select
     C                   when      c1hucd = 'FD'
     C                   eval      c1msg1 = 'There are uncosted Feed Delivery +
     C                                       Tickets for this Period.'
      *
     C                   when      c1hucd = 'FP'
     C                   eval      c1msg1 = 'There are uncosted Feed Pickup +
     C                                       Tickets for this Period.'
     C                   endsl
     C                   endif                                                  If uncosted
      *
      *--------------------------------------------
      * ARE THERE TICKETS COSTED AFTER JDE UPLOAD
      *--------------------------------------------
      *
     C                   setoff                                       89
     C                   move      *blank        c1msg2
     C                   z-add     0             c1comdy
     C                   z-add     0             c1cotm
     C                   move      *blank        c1cousr
      *
      * If the status is Rerun, we don't need to do this check now. Only do the
      * check if the current upload status is "uploaded".
      *
     C                   if        svuplscd = 'U'                               If already up
      *
      * Are you looking at data for the current accounting period or not...set your
      * key value for date accordingly.
      *
     C                   in        daaper
     C                   if        daccyy = c1acyr and daper = c1acpe
     C                   z-add     0             wkdt
     C                   else
     C                   z-add     xxepdt        wkdt
     C                   endif
      *
     C                   select
     C                   when      wktrcd = 'D'
     C     key03         chain     hsl037q                            92
      *
     C                   when      wktrcd = 'P'
     C     key03         chain     hsl037o                            92
     C                   endsl
      *
     C                   if        *in92 = *off and                             If need msg2
     C                             (svupldt < fhcodt or
     C                             (svupldt = fhcodt and svupltm < fhcotm))
     C                   seton                                        89
      *
     C                   z-add     fhcotm        c1cotm
     C                   move      fhcousr       c1cousr
      *
     C                   if        fhcodt <> 0
     C     *iso          test(d)                 fhcodt                 92
     C                   if        *in92 = *off
     C                   move      fhcodt        wkisodate
     C     *mdy          move      wkisodate     c1comdy
     C                   endif
     C                   endif
      *
     C                   select
     C                   when      c1hucd = 'FD'
     C                   eval      c1msg2 = 'Some Feed Delivery Tickets were +
     C                                       costed after the upload.'
      *
     C                   when      c1hucd = 'FP'
     C                   eval      c1msg2 = 'Some Feed Pickup Tickets were +
     C                                       costed after the upload.'
     C                   endsl
      *
     C                   endif                                                  If need msg2
     C                   endif                                                  If already up
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Clear subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $clr1         begsr
      *
     C                   z-add     0             svrrn1
      *
     C                   clear                   hp7033s1
     C                   seton                                        83        sflclr
     C                   write     hp7033c1
     C                   setoff                                       818283
      *                                                    81=sfldsp
      *                                                    82=sflend
      *                                                    83=sflclr
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Refresh/fill the subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $frsh1        begsr
      *
      * Set position in file
      *
     C     key01         setll     hsp116
     C                   move      yes           first
      *
      * The field 'reset' is a flag field to indicate whether you are
      * attempting to reposition the user close to where he was in the
      * subfile.
      * The lowest subfile RRN on the screen from the DSPF feedback
      * area (IDFLOW) was retrieved earlier and put in WKFLOW.
      * Add to WKFLOW the number of lines on your subfile page or the
      * number less 1 to determine a subfile RRN to reposition to.
      *
     C                   if        reset = yes
     C                   eval      maxrrn = wkflow + wkrlin
     C                   else
      *
      * Don't try to reposition the user, just start the subfile over
      *
     C                   eval      maxrrn = wkplin
     C                   endif
      *
      * Load the subfile until you have the required number of records.
      * The number will depend on whether uou are repositioning the
      * subfile or not. Stop if you get to the end of the subfile.
      *
     C                   dou       svrrn1 >= maxrrn or *in82 = *on
     C                   exsr      $load1
     C                   enddo
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Load subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $load1        begsr
      *
     C                   z-add     svrrn1        hdrrn1
      *
      * Set the count of records on the subfile page to zero.
      *
     C                   z-add     0             count
      *
      * Fill the subfile until the end of the database file or
      * you have filled all the lines on the subfile page.
      *
     C                   setoff                                       82
     C                   dou       *in82 = *on or count >= wkplin               Do fill
     C     key01         reade     hsp116                                 82
     C                   if        *in82 = *off                                 If read
      *
      * Save the Time Stamp from the most recent Status Change record.
      *
     C                   if        first = yes
     C                   move      scuplscd      svuplscd
     C                   z-add     sccrdt        svupldt
     C                   z-add     sccrtm        svupltm
     C                   move      no            first
     C                   endif
      *
     C                   add       1             count
     C                   add       1             hdrrn1
      *
     C     *iso          test(d)                 sccrdt                 92
     C                   if        *in92 = *off                                 If OK date
     C                   move      sccrdt        wkisodate
     C     *mdy          move      wkisodate     d1crdtmdy
     C                   endif                                                  If OK date
      *
     C                   z-add     sccrtm        d1crtm
     C                   move      scuplscd      d1uplscd
     C                   move      sccrusr       d1crusr
     C                   move      scpgm         d1pgm
     C                   write     hp7033s1
     C                   seton                                        81
      *
      * For positioning, place the subfile relative record number into
      * the sflrcdnbr field (hdpag1)
      *
     C                   eval      hdpag1 = hdrrn1
      *
     C                   endif                                                  If read
     C                   enddo                                                  Do fill loop
      *
      * If no records were written to the subfile, then issue
      * the standard message 'No data to Display'.
      *
     C                   if        hdrrn1 = 0                                   If no recs
     C                   movel     yes           norecs
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09002'
     C                   endif
      *
     C                   else
     C                   movel     no            norecs
     C                   endif                                                  If no recs
      *
     C                   z-add     hdrrn1        svrrn1
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Seton last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      *
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *
     C     *entry        plist
13682C                   parm                    c1cocd
     C                   parm                    c1hucd
     C                   parm                    c1acyr
     C                   parm                    c1acpe
     C                   parm                    xxbpdt
     C                   parm                    xxepdt
     C                   parm                    rtncd
      *
      * Key lists
      *
     C     key01         klist
13682C                   kfld                    c1cocd
     C                   kfld                    c1acyr
     C                   kfld                    c1acpe
     C                   kfld                    c1hucd
      *
     C     key02         klist
     C                   kfld                    wktrcd
     C                   kfld                    xxbpdt
      *
     C     key03         klist
     C                   kfld                    wktrcd
     C                   kfld                    wkdt
      *
      * Retrieve upload descripton
      *
     C     c1hucd        chain     hsp035                             92
     C                   if        *in92 = *off
     C                   eval      c1huds = huhuds
     C                   else
     C                   eval      c1huds = 'Unknown'
     C                   endif
      *
      * Flip Beginning/Ending Period Dates to MMDDYY format.
      * (NOTE: We did keep Beginning/Ending Period Dates until May 2009. So, we will
      *        use *in87 to control printing the word "TO".
      *
     C     *iso          test(d)                 xxbpdt                 92
     C                   if        *in92 = *off
     C                   seton                                        87
     C                   move      xxbpdt        wkisodate
     C     *mdy          move      wkisodate     c1bpmdy
     C                   endif
      *
     C     *iso          test(d)                 xxepdt                 92
     C                   if        *in92 = *off
     C                   move      xxepdt        wkisodate
     C     *mdy          move      wkisodate     c1epmdy
     C                   endif
      *
      *
      *
      * To support F5-Refresh, logic requires the number of lines on
      * the subfile page and also the number of lines less 1.  By
      * setting these values up as constant work fields, the processing
      * logic can be standardized between programs.
      *
13682C**                 z-add     9             wkplin                         sflpag
13682C                   z-add     8             wkplin                         sflpag
     C     wkplin        sub       1             wkrlin                         sflpag - 1
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /eject
