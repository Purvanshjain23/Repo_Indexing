// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKY0DFR
// ?Date: 14.08.2025 Time: 02:53:21
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?H16853 ISE 01/23/2021 - Increased the length from 5 to 7 and
//?                        corrected the alignment of Buy Order Number field
EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.BOH_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


// LCL.First Time Flag Usr = CND.Yes
LCL.First_Time_Flag_Usr = 'Y';

//?USER: Initialize subfile control

CASE;

// IF LCL.First Time Flag Usr is Yes
IF LCL.First_Time_Flag_Usr = 'Y';

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(WRK.BOH_Company_Number);
PARAMETER('PLTESTNO');
PARAMETER(CTL.MPR_Identification_Num);

// CTL.MPR Reporting Date = JOB.*Job date
CTL.MPR_Reporting_Date = JOB.*Job_date;

// CTL.MPR Reporting Time = CND.Not Applicable
CTL.MPR_Reporting_Time = 3;

// LCL.First Time Flag Usr = CND.No
LCL.First_Time_Flag_Usr = 'N';

ENDIF;

// CTL.Head Total USR = CON.*ZERO
CTL.Head_Total_USR = *ZERO;

CASE;

// IF CTL.BOL Kill Date NE WRK.Zero USR
IF CTL.BOL_Kill_Date <> WRK.Zero_USR;

// OR CTL.MPR Reporting Time is All
OR CTL.MPR_Reporting_Time >= 1;
AND CTL.MPR_Reporting_Time <= 3;

EXECUTE FUNCTION(Rtv Accum Rpt/Kll Dte RT) TYPE(RTVOBJ) FILE(PKFHCPP)           AB1243381;
PARAMETER(CTL.MPR_Identification_Num);
PARAMETER(CTL.MPR_Reporting_Date);
PARAMETER(CTL.MPR_Reporting_Time);
PARAMETER(CTL.BOL_Kill_Date);
PARAMETER(CTL.Head_Total_USR);
{
 //?USER: Initialize routine

 // PAR.Head Total USR = CON.*ZERO
 PAR.Head_Total_USR = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF PAR.BOL Kill Date EQ WRK.Zero USR
 IF PAR.BOL_Kill_Date = WRK.Zero_USR;

 // OR PAR.BOL Kill Date EQ DB1.BOL Kill Date
 OR PAR.BOL_Kill_Date = DB1.BOL_Kill_Date;

 CASE;

 // IF PAR.MPR Reporting Time EQ WRK.Zero USR
 IF PAR.MPR_Reporting_Time = WRK.Zero_USR;

 // OR PAR.MPR Reporting Time EQ DB1.MPR Reporting Time
 OR PAR.MPR_Reporting_Time = DB1.MPR_Reporting_Time;

 // PAR.Head Total USR = PAR.Head Total USR + DB1.BOL Pln Head Delv
 PAR.Head_Total_USR = PAR.Head_Total_USR + DB1.BOL_Pln_Head_Delv;

 ENDIF;

 ENDIF;

}


ENDIF;

//?USER: Initialize subfile record from DBF record

CASE;

// IF CTL.MPR Reporting Date NE DB1.MPR Reporting Date
IF CTL.MPR_Reporting_Date <> DB1.MPR_Reporting_Date;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF CTL.BOL Kill Date NE WRK.Zero USR
IF CTL.BOL_Kill_Date <> WRK.Zero_USR;

// AND CTL.BOL Kill Date NE DB1.BOL Kill Date
AND CTL.BOL_Kill_Date <> DB1.BOL_Kill_Date;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF CTL.MPR Reporting Time NE WRK.Zero USR
IF CTL.MPR_Reporting_Time <> WRK.Zero_USR;

// AND CTL.MPR Reporting Time NE DB1.MPR Reporting Time
AND CTL.MPR_Reporting_Time <> DB1.MPR_Reporting_Time;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process subfile control (Pre-confirm)

CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

CASE;

// IF CTL.MPR Identification Num is Triumph
IF CTL.MPR_Identification_Num = '31965';

// Call program EDT - Comp Value-MPR  EF.
CALL PROGRAM(EDT - Comp Value-MPR  EF) ('PBKVEFR');

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Function Key is not allowed.'
ERROR(PRK0693);

ENDIF;

ENDIF;

CASE;

// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

// PAR.PRT Night Queue Run Sts = CND.No
PAR.PRT_Night_Queue_Run_Sts = 'N';

// WRK.Date Alpha USR = CVTVAR(CTL.MPR Reporting Date)
WRK.Date_Alpha_USR = CVTVAR(CTL.MPR_Reporting_Date);

// WRK.Date Alpha Usr 2 = CVTVAR(CTL.BOL Kill Date)
WRK.Date_Alpha_Usr_2 = CVTVAR(CTL.BOL_Kill_Date);

// WRK.Report Type Usr = CVTVAR(CTL.MPR Reporting Time)
WRK.Report_Type_Usr = CVTVAR(CTL.MPR_Reporting_Time);

// Call program Pmt Print Options     XF.
CALL PROGRAM(Pmt Print Options     XF) ('PDG0PVR');
PARAMETER('MPR Detail Report');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('HPE');

// Execute command - 'SBM Prt MPR Detail'
EXECUTE COMMAND(PRK1044);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(CTL.MPR_Identification_Num);
PARAMETER(WRK.Date_Alpha_USR);
PARAMETER(WRK.Report_Type_Usr);
PARAMETER(WRK.Date_Alpha_Usr_2);
PARAMETER(PAR.Oms_System_Value_Alpha);

ENDIF;

//?USER: Process subfile record (Pre-confirm)

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

