// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBEXPFR
// ?Date: 14.08.2025 Time: 12:03:26
// ?------------------------------------------------------------------------------------------------

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
// SUPPRESSED PRINT Company Number header format

ENDIF;

CASE;

IF NEW Order_Number;
// SUPPRESSED PRINT Order Number header format

ENDIF;

CASE;

IF NEW ED_Export_Document_Type;
// SUPPRESSED PRINT ED Export Document Type header format

ENDIF;

//?USER: Process before print of detail format

CASE;

// IF DB1.ED Document Date is Not entered
IF DB1.ED_Document_Date = *ZERO;

// LCL.Date                  USR = JOB.*Job date
LCL.Date_USR = JOB.*Job_date;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Date                  USR = DB1.ED Document Date
LCL.Date_USR = DB1.ED_Document_Date;

ENDIF;

// CUR.Text USR 5 = CON.MPG -
CUR.Text_USR_5 = 'MPG -';

// CUR.USR Uom = CON.Lbs
CUR.USR_Uom = 'Lbs';

// WRK.ED Export Certificate Nbr = CUR.ED Export Certificate Nbr
WRK.ED_Export_Certificate_Nbr = CUR.ED_Export_Certificate_Nbr;

// WRK.ED Shipping Marks Txt = CUR.ED Shipping Marks Txt
WRK.ED_Shipping_Marks_Txt = CUR.ED_Shipping_Marks_Txt;

// CUR.Country Code 1 usr = DB1.ED Destination
CUR.Country_Code_1_usr = DB1.ED_Destination;

// CUR.UOM Description 10  USR = CON.Barrels
CUR.UOM_Description_10_USR = 'Barrels';

//?USER: On print of detail format

//?R16637 DN 10/13/20-Suppress Consignee Blank Address Lines.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Live with PHIS    RT) TYPE(RTVOBJ) FILE(PDMMREP)           AC2160999;
PARAMETER(PAR.Company_Number);
PARAMETER('A');
PARAMETER(PAR.Country_Code);
PARAMETER(LCL.ED_Live_with_PHIS);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Fmt Suppress Addr LinesIF) TYPE(EXCINTFUN)                     AC2191192;
PARAMETER(CUR.ED_Consignor_Addr_2);
PARAMETER(CUR.ED_Consignor_Addr_3);
PARAMETER(CUR.ED_Consignor_Addr_4);
PARAMETER(CUR.ED_Consignor_State);
PARAMETER(CUR.ED_Consignor_Postal);
PARAMETER(CUR.ED_Consignor_Country_Code);
PARAMETER(CUR.ED_Consignee_Addr_2);
PARAMETER(CUR.ED_Consignee_Addr_3);
PARAMETER(CUR.ED_Consignee_Addr_4);
PARAMETER(CUR.ED_Consignee_State);
PARAMETER(CUR.ED_Consignee_Postal);
PARAMETER(CUR.ED_Consignee_Country_Code);
PARAMETER(LCL.ED_Live_with_PHIS);
PARAMETER(CUR.Consignor_Country_Desc_U);
PARAMETER(CUR.Consignee_Country_Desc_U);
{
 //?Execute internal function

 //?CONSIGNOR: Format & Suppress Blank Address Lines.
 CASE;

 // IF PAR.ED Consignor Addr 2 is Not Blank
 IF PAR.ED_Consignor_Addr_2 <> *BLANK;

 // AND PAR.ED Consignor Addr 3 is Not Blank
 AND PAR.ED_Consignor_Addr_3 <> *BLANK;

 //?If Addr4/City is Entered then Concat State & Zip.
 CASE;

 // IF PAR.ED Consignor Addr 4 is Not Blank
 IF PAR.ED_Consignor_Addr_4 <> *BLANK;

 // PAR.ED Consignor Addr 4 = CONCAT(PAR.ED Consignor Addr 4,PAR.ED Consignor State,CON.1)
 PAR.ED_Consignor_Addr_4 = PAR.ED_Consignor_Addr_4 + PAR.ED_Consignor_State (1);

 // PAR.ED Consignor Addr 4 = CONCAT(PAR.ED Consignor Addr 4,PAR.ED Consignor Postal,CON.1)
 PAR.ED_Consignor_Addr_4 = PAR.ED_Consignor_Addr_4 + PAR.ED_Consignor_Postal (1);

 ENDIF;

 //?CONSIGNOR: Format & Suppress Blank Address Lines.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Check Blank Address Lines to Suppress.
 CASE;

 // IF PAR.ED Consignor Addr 2 is eq blank
 IF PAR.ED_Consignor_Addr_2 = *BLANK;

 //?Shouldn't have too many scenarios with Addr 2 is blank.
 // PAR.ED Consignor Addr 2 = PAR.ED Consignor Addr 3
 PAR.ED_Consignor_Addr_2 = PAR.ED_Consignor_Addr_3;

 // PAR.ED Consignor Addr 3 = CON.*BLANK
 PAR.ED_Consignor_Addr_3 = *BLANK;

 ENDIF;

 //?Check Addr 4/City & Suppress Blank Address Line.
 CASE;

 // IF PAR.ED Consignor Addr 4 is eq blank
 IF PAR.ED_Consignor_Addr_4 = *BLANK;

 //?Check Addr 4/City & Suppress Blank Address Line.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Addr4/City is Entered, Concat State & Zip.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ED Consignor Addr 4 = CONCAT(PAR.ED Consignor Addr 4,PAR.ED Consignor State,CON.1)
 PAR.ED_Consignor_Addr_4 = PAR.ED_Consignor_Addr_4 + PAR.ED_Consignor_State (1);

 // PAR.ED Consignor Addr 4 = CONCAT(PAR.ED Consignor Addr 4,PAR.ED Consignor Postal,CON.1)
 PAR.ED_Consignor_Addr_4 = PAR.ED_Consignor_Addr_4 + PAR.ED_Consignor_Postal (1);

 ENDIF;

 CASE;

 // IF PAR.ED Consignor Addr 2 is Blank
 IF PAR.ED_Consignor_Addr_2 = *BLANK;

 // PAR.ED Consignor Addr 2 = PAR.ED Consignor Addr 4
 PAR.ED_Consignor_Addr_2 = PAR.ED_Consignor_Addr_4;

 // PAR.ED Consignor Addr 4 = CON.*BLANK
 PAR.ED_Consignor_Addr_4 = *BLANK;

 // IF PAR.ED Consignor Addr 3 is Blank
 IF PAR.ED_Consignor_Addr_3 = *BLANK;

 // PAR.ED Consignor Addr 3 = PAR.ED Consignor Addr 4
 PAR.ED_Consignor_Addr_3 = PAR.ED_Consignor_Addr_4;

 // PAR.ED Consignor Addr 4 = CON.*BLANK
 PAR.ED_Consignor_Addr_4 = *BLANK;

 ENDIF;

 ENDIF;

 ENDIF;

 //?CONSIGNEE: Format & Suppress Blank Address Lines.
 CASE;

 // IF PAR.ED Consignee Addr 2 is Not Blank
 IF PAR.ED_Consignee_Addr_2 <> *BLANK;

 // AND PAR.ED Consignee Addr 3 is Not Blank
 AND PAR.ED_Consignee_Addr_3 <> *BLANK;

 //?If Addr4/City is Entered then Concat State & Zip.
 CASE;

 // IF PAR.ED Consignee Addr 4 is Not Blank
 IF PAR.ED_Consignee_Addr_4 <> *BLANK;

 // PAR.ED Consignee Addr 4 = CONCAT(PAR.ED Consignee Addr 4,PAR.ED Consignee State,CON.1)
 PAR.ED_Consignee_Addr_4 = PAR.ED_Consignee_Addr_4 + PAR.ED_Consignee_State (1);

 // PAR.ED Consignee Addr 4 = CONCAT(PAR.ED Consignee Addr 4,PAR.ED Consignee Postal,CON.1)
 PAR.ED_Consignee_Addr_4 = PAR.ED_Consignee_Addr_4 + PAR.ED_Consignee_Postal (1);

 ENDIF;

 //?CONSIGNEE: Format & Suppress Blank Address Lines.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Check Blank Address Lines to Suppress.
 CASE;

 // IF PAR.ED Consignee Addr 2 is eq blank
 IF PAR.ED_Consignee_Addr_2 = *BLANK;

 //?Shouldn't have too many scenarios with Addr 2 is blank.
 // LCL.ED Consignee Addr 3 = PAR.ED Consignee Addr 3
 LCL.ED_Consignee_Addr_3 = PAR.ED_Consignee_Addr_3;

 // PAR.ED Consignee Addr 2 = LCL.ED Consignee Addr 3
 PAR.ED_Consignee_Addr_2 = LCL.ED_Consignee_Addr_3;

 // PAR.ED Consignee Addr 3 = LCL.USR Blank Field
 PAR.ED_Consignee_Addr_3 = LCL.USR_Blank_Field;

 ENDIF;

 //?Check Addr 4/City & Suppress Blank Address Line.
 CASE;

 // IF PAR.ED Consignee Addr 4 is eq blank
 IF PAR.ED_Consignee_Addr_4 = *BLANK;

 //?S17055 DN 04/06/21-Concat Consignee State & Zip if Entered.
 CASE;

 // IF PAR.ED Consignee Postal is Entered
 IF PAR.ED_Consignee_Postal <> *BLANK;

 //?Get State for Domestic Address Else Concat Only Zip Code.
 CASE;

 // IF PAR.ED Consignee State is State code not Blanks
 IF PAR.ED_Consignee_State <> *BLANK;

 // AND PAR.ED Consignee State is Not International
 AND PAR.ED_Consignee_State <> '.';

 // LCL.ED Consignee Addr 4 = PAR.ED Consignee State
 LCL.ED_Consignee_Addr_4 = PAR.ED_Consignee_State;

 // LCL.ED Consignee Addr 4 = CONCAT(LCL.ED Consignee Addr 4,PAR.ED Consignee Postal,CON.1)
 LCL.ED_Consignee_Addr_4 = LCL.ED_Consignee_Addr_4 + PAR.ED_Consignee_Postal (1);

 //?Get State for Domestic Address Else Concat Only Zip Code.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.ED Consignee Addr 4 = PAR.ED Consignee Postal
 LCL.ED_Consignee_Addr_4 = PAR.ED_Consignee_Postal;

 ENDIF;

 //?Concat State/Zip to Last Non Blank Address Line.
 CASE;

 // IF PAR.ED Consignee Addr 3 is Not Blank
 IF PAR.ED_Consignee_Addr_3 <> *BLANK;

 // PAR.ED Consignee Addr 3 = CONCAT(PAR.ED Consignee Addr 3,LCL.ED Consignee Addr 4,CON.1)
 PAR.ED_Consignee_Addr_3 = PAR.ED_Consignee_Addr_3 + LCL.ED_Consignee_Addr_4 (1);

 //?Concat State/Zip to Last Non Blank Address Line.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Must Concat on Address 2 Line.
 // PAR.ED Consignee Addr 2 = CONCAT(PAR.ED Consignee Addr 2,LCL.ED Consignee Addr 4,CON.1)
 PAR.ED_Consignee_Addr_2 = PAR.ED_Consignee_Addr_2 + LCL.ED_Consignee_Addr_4 (1);

 ENDIF;

 ENDIF;

 //?Check Addr 4/City & Suppress Blank Address Line.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Addr4/City is Entered, Concat State & Zip.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.ED Consignee Addr 4 = CONCAT(PAR.ED Consignee Addr 4,PAR.ED Consignee State,CON.1)
 LCL.ED_Consignee_Addr_4 = PAR.ED_Consignee_Addr_4 + PAR.ED_Consignee_State (1);

 // LCL.ED Consignee Addr 4 = CONCAT(LCL.ED Consignee Addr 4,PAR.ED Consignee Postal,CON.1)
 LCL.ED_Consignee_Addr_4 = LCL.ED_Consignee_Addr_4 + PAR.ED_Consignee_Postal (1);

 ENDIF;

 CASE;

 // IF PAR.ED Consignee Addr 2 is Blank
 IF PAR.ED_Consignee_Addr_2 = *BLANK;

 // PAR.ED Consignee Addr 2 = LCL.ED Consignee Addr 4
 PAR.ED_Consignee_Addr_2 = LCL.ED_Consignee_Addr_4;

 // PAR.ED Consignee Addr 4 = LCL.USR Blank Field
 PAR.ED_Consignee_Addr_4 = LCL.USR_Blank_Field;

 // IF PAR.ED Consignee Addr 3 is Blank
 IF PAR.ED_Consignee_Addr_3 = *BLANK;

 // PAR.ED Consignee Addr 3 = LCL.ED Consignee Addr 4
 PAR.ED_Consignee_Addr_3 = LCL.ED_Consignee_Addr_4;

 // PAR.ED Consignee Addr 4 = LCL.USR Blank Field
 PAR.ED_Consignee_Addr_4 = LCL.USR_Blank_Field;

 ENDIF;

 ENDIF;

 ENDIF;

 //?Get Consignor Country Desc.
 CASE;

 // IF PAR.ED Consignor Country Code is Entered
 IF PAR.ED_Consignor_Country_Code <> *BLANK;

 EXECUTE FUNCTION(Rtv Country Desc       RT) TYPE(RTVOBJ) FILE(OME5REP)          AC2188699;
 PARAMETER(PAR.ED_Consignor_Country_Code);
 PARAMETER(PAR.Consignor_Country_Desc_U);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Move Country Desc to Addr 3 or 4 if Blank.
 CASE;

 // IF PAR.ED Consignor Addr 3 is eq blank
 IF PAR.ED_Consignor_Addr_3 = *BLANK;

 // PAR.ED Consignor Addr 3 = PAR.Consignor Country Desc U
 PAR.ED_Consignor_Addr_3 = PAR.Consignor_Country_Desc_U;

 // PAR.Consignor Country Desc U = CON.*BLANK
 PAR.Consignor_Country_Desc_U = *BLANK;

 //?Move Country Desc to Addr 3 or 4 if Blank.
 // IF PAR.ED Consignor Addr 4 is eq blank
 IF PAR.ED_Consignor_Addr_4 = *BLANK;

 // PAR.ED Consignor Addr 4 = PAR.Consignor Country Desc U
 PAR.ED_Consignor_Addr_4 = PAR.Consignor_Country_Desc_U;

 // PAR.Consignor Country Desc U = CON.*BLANK
 PAR.Consignor_Country_Desc_U = *BLANK;

 ENDIF;

 ENDIF;

 //?Get Consignee Country Desc.
 CASE;

 // IF PAR.ED Consignee Country Code is Entered
 IF PAR.ED_Consignee_Country_Code <> *BLANK;

 //?Set 'THE PEOPLE'S REPUBLIC OF CHINA' Else Get Country Desc.
 CASE;

 // IF PAR.ED Consignee Country Code is China
 IF PAR.ED_Consignee_Country_Code = 'CHN';

 // PAR.Consignee Country Desc U = CONCAT(CON.THE PEOPLE'S REPUBLIC OF,CON.CHINA,CON.1)
 PAR.Consignee_Country_Desc_U = 'THE PEOPLE'S REPUBLIC OF' + 'CHINA' (1);

 //?Set 'THE PEOPLE'S REPUBLIC OF CHINA' Else Get Country Desc.
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Country Desc       RT) TYPE(RTVOBJ) FILE(OME5REP)          AC2188699;
 PARAMETER(PAR.ED_Consignee_Country_Code);
 PARAMETER(PAR.Consignee_Country_Desc_U);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?Move Country Desc to Addr 3 or 4 if Blank.
 CASE;

 // IF PAR.ED Consignee Addr 3 is eq blank
 IF PAR.ED_Consignee_Addr_3 = *BLANK;

 // PAR.ED Consignee Addr 3 = PAR.Consignee Country Desc U
 PAR.ED_Consignee_Addr_3 = PAR.Consignee_Country_Desc_U;

 // PAR.Consignee Country Desc U = CON.*BLANK
 PAR.Consignee_Country_Desc_U = *BLANK;

 //?Move Country Desc to Addr 3 or 4 if Blank.
 // IF PAR.ED Consignee Addr 4 is eq blank
 IF PAR.ED_Consignee_Addr_4 = *BLANK;

 // PAR.ED Consignee Addr 4 = PAR.Consignee Country Desc U
 PAR.ED_Consignee_Addr_4 = PAR.Consignee_Country_Desc_U;

 // PAR.Consignee Country Desc U = CON.*BLANK
 PAR.Consignee_Country_Desc_U = *BLANK;

 ENDIF;

 ENDIF;

}


//?Move Left for Consignor & Move Right for Consignee.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Cnsgnr/Cnsgne Name USR = CUR.ED Consignor Name
CUR.Cnsgnr_Cnsgne_Name_USR = CUR.ED_Consignor_Name;

// Execute function *Move-Right.
EXECUTE FUNCTION(*Move-Right) TYPE(EXCUSRSRC) ('PDUIUFR');
PARAMETER(CUR.Cnsgnr_Cnsgne_Name_USR);
PARAMETER(CUR.ED_Consignee_Name);
{
 C                     MOVE #IPANA    #OO9NA
}


// CUR.Cnsgnr/Cnsgne Addr1 USR = CUR.ED Consignor Addr 1
CUR.Cnsgnr_Cnsgne_Addr1_USR = CUR.ED_Consignor_Addr_1;

// Execute function *Move-Right.
EXECUTE FUNCTION(*Move-Right) TYPE(EXCUSRSRC) ('PDUIUFR');
PARAMETER(CUR.Cnsgnr_Cnsgne_Addr1_USR);
PARAMETER(CUR.ED_Consignee_Addr_1);
{
 C                     MOVE #IPANA    #OO9NA
}


// CUR.Cnsgnr/Cnsgne Addr2 USR = CUR.ED Consignor Addr 2
CUR.Cnsgnr_Cnsgne_Addr2_USR = CUR.ED_Consignor_Addr_2;

// Execute function *Move-Right.
EXECUTE FUNCTION(*Move-Right) TYPE(EXCUSRSRC) ('PDUIUFR');
PARAMETER(CUR.Cnsgnr_Cnsgne_Addr2_USR);
PARAMETER(CUR.ED_Consignee_Addr_2);
{
 C                     MOVE #IPANA    #OO9NA
}


// CUR.Cnsgnr/Cnsgne Addr3 USR = CUR.ED Consignor Addr 3
CUR.Cnsgnr_Cnsgne_Addr3_USR = CUR.ED_Consignor_Addr_3;

// Execute function *Move-Right.
EXECUTE FUNCTION(*Move-Right) TYPE(EXCUSRSRC) ('PDUIUFR');
PARAMETER(CUR.Cnsgnr_Cnsgne_Addr3_USR);
PARAMETER(CUR.ED_Consignee_Addr_3);
{
 C                     MOVE #IPANA    #OO9NA
}


// CUR.Cnsgnr/Cnsgne Addr4 USR = CUR.ED Consignor Addr 4
CUR.Cnsgnr_Cnsgne_Addr4_USR = CUR.ED_Consignor_Addr_4;

// Execute function *Move-Right.
EXECUTE FUNCTION(*Move-Right) TYPE(EXCUSRSRC) ('PDUIUFR');
PARAMETER(CUR.Cnsgnr_Cnsgne_Addr4_USR);
PARAMETER(CUR.ED_Consignee_Addr_4);
{
 C                     MOVE #IPANA    #OO9NA
}


ENDIF;

ENDIF;

//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : Prt MEX 9060-7 Dtl    PO
EXECUTE FUNCTION(Prt MEX 9060-7 Dtl    PO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(CUR.ED_Export_Document_Type);
PARAMETER(CUR.Country_Code);
PARAMETER(CUR.ED_Shipping_Marks_Txt);
PARAMETER(DB1.ED_Nbr_of_prods_on_1st_pg);
PARAMETER(PAR.USR_Overflow);
{
 C                     MOVE #IPANA    #OO9NA
}


//?USER: Print required level totals

// SUPPRESSED PRINT ED Export Document Type totals format

CASE;

IF NEW Order_Number;
// WRK.Date (Alpha) USR = CVTVAR(LCL.Date                  USR)
WRK.Date_Alpha_USR = CVTVAR(LCL.Date_USR);

// WRK.Month/Day Alpha MMDD = SUBSTRING(WRK.Date (Alpha) USR,CON.4,CON.4)
WRK.Month_Day_Alpha_MMDD = SUBSTRING(WRK.Date_Alpha_USR:4:4);

// WRK.Year  (Char) USR = SUBSTRING(WRK.Date (Alpha) USR,CON.2,CON.2)
WRK.Year_Char_USR = SUBSTRING(WRK.Date_Alpha_USR:2:2);

// WRK.Year Alpha (YYYY) USR = CONCAT(CON.20,WRK.Year  (Char) USR,CON.*ZERO)
WRK.Year_Alpha_YYYY_USR = '20' + WRK.Year_Char_USR (*ZERO);

// WRK.Date (Char-8) USR = CONCAT(WRK.Month/Day Alpha MMDD,WRK.Year Alpha (YYYY) USR,CON.*ZERO)
WRK.Date_Char_8_USR = WRK.Month_Day_Alpha_MMDD + WRK.Year_Alpha_YYYY_USR (*ZERO);

// CUR.Date 8.0 USR = CVTVAR(WRK.Date (Char-8) USR)
CUR.Date_8_0_USR = CVTVAR(WRK.Date_Char_8_USR);

//?Print EST # and address if company value sent to "Y"
EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(CUR.Company_Number);
PARAMETER('PLTESTNO');
PARAMETER(LCL.ED_Plant_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(CUR.Company_Number);
PARAMETER('MPGMEXEST');
PARAMETER(LCL.Status_Flag_1_Y_N);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Print if status is "Y"  (will be as of 10/01/2011)
CASE;

// IF LCL.Status Flag 1  Y/N is Yes
IF LCL.Status_Flag_1_Y_N = 'Y';

// CUR.Text USR 4 = CON.Est:
CUR.Text_USR_4 = 'Est:';

//?2/16/17 Brad Baden E9064-Process for Co 440 Adresses
CASE;

// IF CUR.Company Number is Guymon
IF CUR.Company_Number = 360;

// CUR.Text 30 USR 1 = LCL.ED Plant Number
CUR.Text_30_USR_1 = LCL.ED_Plant_Number;

CASE;

// IF LCL.ED Plant Number is Guymon 13597
IF LCL.ED_Plant_Number = '13597';

// CUR.Text 30 USR 2 = CON.Seaboard Foods
CUR.Text_30_USR_2 = 'Seaboard Foods';

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Text 30 USR 2 = CON.Guymon Cold Storage
CUR.Text_30_USR_2 = 'Guymon Cold Storage';

ENDIF;

// CUR.Text 30 USR 3 = CON.2700 Cactus Drive
CUR.Text_30_USR_3 = '2700 Cactus Drive';

// CUR.Text 30 USR 4 = CON.Guymon Oklahoma 73942
CUR.Text_30_USR_4 = 'Guymon Oklahoma 73942';

//?2/16/17 Brad Baden E9064-Process for Co 440 Adresses
// IF CUR.Company Number is Seaboard Triumph Foods
IF CUR.Company_Number = 440;

// CUR.Text 30 USR 1 = LCL.ED Plant Number
CUR.Text_30_USR_1 = LCL.ED_Plant_Number;

// CUR.Text 30 USR 2 = CONCAT(CON.Seaboard Triumph Foods,CON.LLC,CND.*One)
CUR.Text_30_USR_2 = 'Seaboard Triumph Foods' + 'LLC' (1);

// CUR.Text 30 USR 3 = CONCAT(CON.5555 Seaboard Triumph,CON.Parkway,CND.*One)
CUR.Text_30_USR_3 = '5555 Seaboard Triumph' + 'Parkway' (1);

// CUR.Text 30 USR 4 = CON.Sioux City, Iowa 51111
CUR.Text_30_USR_4 = 'Sioux City, Iowa 51111';

//?2/16/17 Brad Baden E9064-Process for Co 440 Adresses
// IF CUR.Company Number is St. Joseph
IF CUR.Company_Number = 960;

// CUR.Text 30 USR 1 = LCL.ED Plant Number
CUR.Text_30_USR_1 = LCL.ED_Plant_Number;

// CUR.Text 30 USR 2 = CON.Triumph Foods LLC
CUR.Text_30_USR_2 = 'Triumph Foods LLC';

// CUR.Text 30 USR 3 = CON.5302 Stockyards Expy
CUR.Text_30_USR_3 = '5302 Stockyards Expy';

// CUR.Text 30 USR 4 = CON.St. Joseph Missouri 64504
CUR.Text_30_USR_4 = 'St. Joseph Missouri 64504';

ENDIF;

ENDIF;

// Print Order Number totals format
PRINT Order Number totals format;

ENDIF;

CASE;

IF NEW Company_Number;
// Print Company Number totals format
PRINT Company Number totals format;

ENDIF;

