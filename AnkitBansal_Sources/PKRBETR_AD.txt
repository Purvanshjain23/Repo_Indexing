// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKRBETR
// ?Date: 14.08.2025 Time: 02:50:15
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?H16853 ISE 01/23/2021 - Increased the length from 5 to 7 and
//?                        corrected the alignment of Buy Order Number field
ENDDO;

// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


//?USER: Load existing header

// WRK.Country Code Usr = WRK.Blank USR
WRK.Country_Code_Usr = WRK.Blank_USR;

// Call program Dsp Vndr Addr formttd UP.
CALL PROGRAM(Dsp Vndr Addr formttd UP) ('VENDRETF');
PARAMETER(WRK.Vendor_Return_Code_Usr);
PARAMETER(CTL.VCH_AP_Address_Number);
PARAMETER(CTL.Vendor_Address_1_USR);
PARAMETER(CTL.Vendor_Address_2_USR);
PARAMETER(CTL.Vendor_Address_3_USR);
PARAMETER(CTL.Vendor_Address_4_USR);
PARAMETER(CTL.Vendor_Address_5_USR);
PARAMETER(WRK.Country_Code_Usr);

CASE;

// IF WRK.Vendor Return Code Usr is Vendor Error
IF WRK.Vendor_Return_Code_Usr = 'ERR';

// CTL.Vendor Address 1      USR = CON.NOT FOUND
CTL.Vendor_Address_1_USR = 'NOT FOUND';

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

ENDIF;

//?USER: Validate header non-key fields

//?Change check type to Manual if data is entered.
CASE;

// IF CTL.CKH Manual Check Number is Entered
IF CTL.VCH_Manual_Check_Number > *ZERO;

// OR CTL.CKH Manual Check Date is Entered
OR CTL.VCH_Manual_Check_Date > *ZERO;

CASE;

// IF CTL.CKH Manual Check Number is Not Entered
IF CTL.VCH_Manual_Check_Number = *ZERO;

// OR CTL.CKH Manual Check Date is Not Entered
OR CTL.VCH_Manual_Check_Date = *ZERO;

// Send error message - 'Must enter the manual check # AND check date.'
ERROR(PRK0393);

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.VCH Check Type = CND.Manual Check
CTL.VCH_Check_Type = 'M';

ENDIF;

//?Change check type to Manual if data is entered.
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.VCH Check Type = CND.Regular Check
CTL.VCH_Check_Type = 'R';

ENDIF;

//?USER: Change header DBF record

EXECUTE FUNCTION(Chg Voucher Header    CH) TYPE(CHGOBJ) FILE(PKBKCPP)           AB1102569;
PARAMETER(CTL.VCH_Company_number);
PARAMETER(CTL.VCH_Batch_Number);
PARAMETER(CTL.VCH_Header_Number);
PARAMETER(CTL.VCH_AP_Address_Number);
PARAMETER(CTL.VCH_AP_Voucher_Number);
PARAMETER(CTL.VCH_Payee_Type);
PARAMETER(CTL.VCH_Manual_Check_Number);
PARAMETER(CTL.VCH_Manual_Check_Date);
PARAMETER(CTL.VCH_Base_Mkt_Price_Amt);
PARAMETER(CTL.VCH_Sort_Disc_Amt);
PARAMETER(CTL.VCH_Yield_Gain_Loss_Amt);
PARAMETER(CTL.VCH_Base_Carcass_Value);
PARAMETER(CTL.VCH_LN_Add_on_Deduct_Amt);
PARAMETER(CTL.VCH_Gross_Amt);
PARAMETER(CTL.VCH_Deduction_Amt);
PARAMETER(CTL.VCH_Less_Split_Amount);
PARAMETER(CTL.VCH_Net_Amt);
PARAMETER(CTL.VCH_Split);
PARAMETER(CTL.VCH_Split_Check_Sts);
PARAMETER(CTL.VCH_Process_Status);
PARAMETER(CTL.VCH_G_L_Date);
PARAMETER(CTL.VCH_Check_Type);
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.TRK_Trucker_Code);
PARAMETER(CTL.VR_Reason_Code);
PARAMETER(CTL.RS_User_Changed);
PARAMETER(CTL.RS_Date_Changed);
PARAMETER(CTL.RS_Time_Changed);
PARAMETER(CTL.RS_Record_Status);
PARAMETER(CTL.RS_Job);
PARAMETER(CTL.RS_Program);
PARAMETER(CTL.RS_User_Added);
PARAMETER(CTL.RS_Date_Added);
PARAMETER(CTL.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


//?USER: Change detail DBF record

EXECUTE FUNCTION(Chg Voucher Detail    CH) TYPE(CHGOBJ) FILE(PKBLCPP)           AB1102232;
PARAMETER(RCD.VCH_Company_number);
PARAMETER(RCD.VCH_Batch_Number);
PARAMETER(RCD.VCH_Header_Number);
PARAMETER(RCD.VCD_Line);
PARAMETER(RCD.VCD_Base_Mkt_Price_Amt);
PARAMETER(RCD.VCD_Sort_Disc_Amt);
PARAMETER(RCD.VCD_Yield_Gain_Loss);
PARAMETER(RCD.VCD_Base_Carcass_Value);
PARAMETER(RCD.VCD_LN_Add_on_Deduct_Amt);
PARAMETER(RCD.VCD_Gross_Amt);
PARAMETER(RCD.VCD_Deduction_Amt);
PARAMETER(RCD.VCD_Less_Split_Amount);
PARAMETER(RCD.VCD_Net_Amt);
PARAMETER(RCD.VCD_Split_Percent);
PARAMETER(RCD.VCD_Payment_Type);
PARAMETER(RCD.VCD_Hog_Class_Type);
PARAMETER(RCD.VCD_BO_Type);
PARAMETER(RCD.VCD_Source_Contract_Type);
PARAMETER(RCD.VCD_Source_Code);
PARAMETER(RCD.VCD_Check_Description);
PARAMETER(RCD.VCD_Received_Head);
PARAMETER(RCD.VCD_Head_Killed);
PARAMETER(RCD.VCD_Push_Payment_Status);
PARAMETER(RCD.VCD_Repayment_Flag);
PARAMETER(RCD.VCD_Unused_Status_3);
PARAMETER(RCD.VCD_Unused_Status_4);
PARAMETER(RCD.VCD_Unused_Head_1);
PARAMETER(RCD.VCD_UnUsed_Head_2);
PARAMETER(RCD.VCD_UnUsed_Head_3);
PARAMETER(RCD.MGL_Supplier_Invoice_Nbr);
PARAMETER(RCD.MGL_Voucher_Number);
PARAMETER(RCD.MGL_Invoice_Batch_Number);
PARAMETER(RCD.MGL_Process_to_ERP_Date);
PARAMETER(RCD.MGL_Process_to_ERP_Time);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


//?USER: Process command keys

//?F6=Request check to JDE A/P system
CASE;

// IF CTL.*CMD key is Request check
IF CTL.*CMD_key = '14';

EXECUTE FUNCTION(Rtv/Chg VchProcess Cd RT) TYPE(RTVOBJ) FILE(PKBKCPP)           AB1142819;
PARAMETER(CTL.VCH_Company_number);
PARAMETER(CTL.VCH_Batch_Number);
PARAMETER('C');
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Voucher Header    CH) TYPE(CHGOBJ) FILE(PKBKCPP)           AB1102569;
 PARAMETER(DB1.VCH_Company_number);
 PARAMETER(DB1.VCH_Batch_Number);
 PARAMETER(DB1.VCH_Header_Number);
 PARAMETER(DB1.VCH_AP_Address_Number);
 PARAMETER(DB1.VCH_AP_Voucher_Number);
 PARAMETER(DB1.VCH_Payee_Type);
 PARAMETER(DB1.VCH_Manual_Check_Number);
 PARAMETER(DB1.VCH_Manual_Check_Date);
 PARAMETER(DB1.VCH_Base_Mkt_Price_Amt);
 PARAMETER(DB1.VCH_Sort_Disc_Amt);
 PARAMETER(DB1.VCH_Yield_Gain_Loss_Amt);
 PARAMETER(DB1.VCH_Base_Carcass_Value);
 PARAMETER(DB1.VCH_LN_Add_on_Deduct_Amt);
 PARAMETER(DB1.VCH_Gross_Amt);
 PARAMETER(DB1.VCH_Deduction_Amt);
 PARAMETER(DB1.VCH_Less_Split_Amount);
 PARAMETER(DB1.VCH_Net_Amt);
 PARAMETER(DB1.VCH_Split);
 PARAMETER(DB1.VCH_Split_Check_Sts);
 PARAMETER(PAR.VCH_Process_Status);
 PARAMETER(DB1.VCH_G_L_Date);
 PARAMETER(DB1.VCH_Check_Type);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.TRK_Trucker_Code);
 PARAMETER(DB1.VR_Reason_Code);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


// Call program Natv Crt Vchrs Batch UP.
CALL PROGRAM(Natv Crt Vchrs Batch UP) ('HPEVCHCL');
PARAMETER(PGM.*Return_code);
PARAMETER(CTL.VCH_Company_number);
PARAMETER(CTL.VCH_Batch_Number);
PARAMETER(*BLANK);

//?F6=Request check to JDE A/P system
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Continue transaction = CND.*NO
PGM.*Continue_transaction = 'N';

QUIT;

ENDIF;

//?USER: Exit program processing

CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

EXECUTE FUNCTION(Rtv/Dlt Vch Hdr       RT) TYPE(RTVOBJ) FILE(PKBKCPP)           AB1142820;
PARAMETER(CTL.VCH_Company_number);
PARAMETER(CTL.VCH_Batch_Number);
PARAMETER(CTL.VCH_Header_Number);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Dlt Voucher Header    DL) TYPE(DLTOBJ) FILE(PKBKCPP)           AB1102570;
 PARAMETER(DB1.VCH_Company_number);
 PARAMETER(DB1.VCH_Batch_Number);
 PARAMETER(DB1.VCH_Header_Number);
}


EXECUTE FUNCTION(Rtv/Dlt Vch Detail    RT) TYPE(RTVOBJ) FILE(PKBLCPP)           AB1142821;
PARAMETER(CTL.VCH_Company_number);
PARAMETER(CTL.VCH_Batch_Number);
PARAMETER(CTL.VCH_Header_Number);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Delete Voucher Detail) TYPE(DLTOBJ) FILE(PKBLCPP)              AB1102233;
 PARAMETER(DB1.VCH_Company_number);
 PARAMETER(DB1.VCH_Batch_Number);
 PARAMETER(DB1.VCH_Header_Number);
 PARAMETER(DB1.VCD_Line);
 {
  //?USER: Processing after Data update

  CASE;

  // IF DB1.VCD Split Percent is 100 %
  IF DB1.VCD_Split_Percent = 100;

  // Call program Crt Tattoo Action Comm XF.
  CALL PROGRAM(Crt Tattoo Action Comm XF) ('PKV4XFR');
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('DV');
  PARAMETER(*BLANK);

  ENDIF;

 }

 EXECUTE FUNCTION(Rtv/Dlt Tattoo D/A    RT) TYPE(RTVOBJ) FILE(PKCDCPP)           AB1149138;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.THD Transaction Created is System Created
  IF DB1.THD_Transaction_Created = 'S';

  EXECUTE FUNCTION(Delete Tattoo Deduction) TYPE(DLTOBJ) FILE(PKCDCPP)            AB1107819;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.DED_D_A_Code);
  ENDIF;

 }

 EXECUTE FUNCTION(Rtv/Chg Ttt D,A,Net   RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1149149;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(HPE063 Frt Exp/Accruals) TYPE(EXCINTFUN)                       AB1192166;
  {
   //?Execute internal function

   //?2/26/96  HPE063   Allow the expense for freight to be paid
   //?                  by either Seaboard(us) or the producer
   //?                  Allow the system to process accruals thru
   //?                  the General Ledger.
  }

  //?Set Live Gross/Payment Gross/Accruals to Zeros and all net's to zero
  DO;

  // WRK.TH Live Gross Amt = CON.*ZERO
  WRK.TH_Live_Gross_Amt = *ZERO;

  // WRK.TH Payment Gross = CON.*ZERO
  WRK.TH_Payment_Gross = *ZERO;

  // WRK.Th Payment Net Amt = CON.*ZERO
  WRK.Th_Payment_Net_Amt = *ZERO;

  // WRK.TH LIve Net Amt = CON.*ZERO
  WRK.TH_LIve_Net_Amt = *ZERO;

  // WRK.TH Carcass Net Amt = CON.*ZERO
  WRK.TH_Carcass_Net_Amt = *ZERO;

  // WRK.TH Total Net WO Adds = CON.*ZERO
  WRK.TH_Total_Net_WO_Adds = *ZERO;

  // WRK.TH Accrual Amount = CON.*ZERO
  WRK.TH_Accrual_Amount = *ZERO;

  ENDDO;

  //?HPE053P - Include Dead Head Uom
  EXECUTE FUNCTION(Rtv Tattoo Hdr Totls RT) TYPE(RTVOBJ) FILE(PKCDCPP)            AB1143322;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(WRK.TH_Deduction_Amt);
  PARAMETER(WRK.TH_Additions_Amt);
  PARAMETER(WRK.TH_Accrual_Amount);
  PARAMETER('Y');
  PARAMETER(WRK.Freight_Tot_Ded_Add_Exp);
  {
   //?USER: Initialize routine

   // PAR.TH Deduction Amt = CON.*ZERO
   PAR.TH_Deduction_Amt = *ZERO;

   // PAR.TH Additions Amt = CON.*ZERO
   PAR.TH_Additions_Amt = *ZERO;

   // PAR.TH Accrual Amount = CON.*ZERO
   PAR.TH_Accrual_Amount = *ZERO;

   // PAR.Freight Tot Ded/Add Exp = CON.*ZERO
   PAR.Freight_Tot_Ded_Add_Exp = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.@Status Include Dead Hd is No, dont include Dead Hd
   IF PAR.@Status_Include_Dead_Hd = 'N';

   // AND DB1.THD UOM is Dead Head UOM
   AND DB1.THD_UOM = 'CH'/'DH'/'DY'/'YH'/'KH';

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF DB1.THD Expense Paid by is Producer
   IF DB1.THD_Expense_Paid_by = 'P';

   CASE;

   // IF DB1.THD Unit Amt Sign is Add
   IF DB1.THD_Unit_Amt_Sign = '+';

   // PAR.TH Additions Amt = PAR.TH Additions Amt + DB1.THD Ded/Add Amount
   PAR.TH_Additions_Amt = PAR.TH_Additions_Amt + DB1.THD_Ded_Add_Amount;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.TH Deduction Amt = PAR.TH Deduction Amt + DB1.THD Ded/Add Amount
   PAR.TH_Deduction_Amt = PAR.TH_Deduction_Amt + DB1.THD_Ded_Add_Amount;

   ENDIF;

   // IF DB1.THD Expense Paid by is Seaboard
   IF DB1.THD_Expense_Paid_by = 'S';

   CASE;

   // IF DB1.THD Expense Type is Freight
   IF DB1.THD_Expense_Type = 'F';

   CASE;

   // IF DB1.THD Unit Amt Sign is Add
   IF DB1.THD_Unit_Amt_Sign = '+';

   // PAR.Freight Tot Ded/Add Exp = PAR.Freight Tot Ded/Add Exp + DB1.THD Ded/Add Amou
   PAR.Freight_Tot_Ded_Add_Exp = PAR.Freight_Tot_Ded_Add_Exp + DB1.THD_Ded_Add_Amount;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Freight Tot Ded/Add Exp = PAR.Freight Tot Ded/Add Exp - DB1.THD Ded/Add Amou
   PAR.Freight_Tot_Ded_Add_Exp = PAR.Freight_Tot_Ded_Add_Exp - DB1.THD_Ded_Add_Amount;

   ENDIF;

   // IF DB1.THD Expense Type is Other
   IF DB1.THD_Expense_Type = 'O';

   CASE;

   // IF DB1.THD Unit Amt Sign is Add
   IF DB1.THD_Unit_Amt_Sign = '+';

   // PAR.TH Accrual Amount = PAR.TH Accrual Amount + DB1.THD Ded/Add Amount
   PAR.TH_Accrual_Amount = PAR.TH_Accrual_Amount + DB1.THD_Ded_Add_Amount;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.TH Accrual Amount = PAR.TH Accrual Amount - DB1.THD Ded/Add Amount
   PAR.TH_Accrual_Amount = PAR.TH_Accrual_Amount - DB1.THD_Ded_Add_Amount;

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

  }

  EXECUTE FUNCTION(Chg Tto Ded/Add/Net   CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1143407;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.TH_Live_Purchase_UOM);
  PARAMETER(DB1.TH_Live_Purchase_Price);
  PARAMETER(WRK.TH_Live_Gross_Amt);
  PARAMETER(WRK.TH_LIve_Net_Amt);
  PARAMETER(WRK.TH_Deduction_Amt);
  PARAMETER(WRK.TH_Total_Net_WO_Adds);
  PARAMETER(WRK.TH_Carcass_Net_Amt);
  PARAMETER(WRK.TH_Additions_Amt);
  PARAMETER(WRK.TH_Payment_Gross);
  PARAMETER(WRK.Th_Payment_Net_Amt);
  PARAMETER(WRK.TH_Accrual_Amount);
  PARAMETER('C');
  PARAMETER(DB1.TH_Payment_Type);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

}


ENDIF;

