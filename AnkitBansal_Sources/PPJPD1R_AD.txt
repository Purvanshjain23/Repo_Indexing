// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPJPD1R
// ?Date: 14.08.2025 Time: 03:40:51
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?E11209 JJH 07/18/17 - Display Allocation Method
//?- Changed logic to display Allocation Method if the Item Code is
//?  a Finished Good.
//?- Removed logic that would show Allocation Method if the Item Code
//?  was Converted.
//?FP1054 03/11/09 RMC - Display prod day of week-file comp item ext
//?    used in prod schedule for MTO items to determine what day to produce
//?    4/09/09 and get plan production sts
ENDDO;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('C/S');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Load key screen

// KEY.Company Number = PAR.Company Number
KEY.Company_Number = PAR.Company_Number;

// KEY.Item Code = PAR.Item Code
KEY.Item_Code = PAR.Item_Code;

//?USER: Load detail screen from DBF record

MOVE *ALL (To: PAR From: DB1);

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DB1.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Move of various fields to screens and get descriptions.
DO;

//?Populate descriptions and conditions
// DTL.Condition Desc. 1  USR = Condition name of DTL.Item Type Code
DTL.Condition_Desc_1_USR = RTVCND(DTL.Item_Type_Code);

// DTL.Status Description = Condition name of DTL.Record Status
DTL.Status_Description = RTVCND(DTL.Record_Status);

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.Default_Warehouse);
PARAMETER(DTL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


EXECUTE FUNCTION(RTV Box Item code      RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC1402262;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(DTL.Box_iD);
{
 //?USER: Initialize routine

 // PAR.Component Item Code = CON.*ZERO
 PAR.Component_Item_Code = *ZERO;

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Item Type/Pack Cd  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1302162;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Component_Item_Code);
 PARAMETER(WRK.Item_Type_Code);
 PARAMETER(PAR.Package_Type_Code);
 PARAMETER(WRK.Pallet_Tare_Weight);
 PARAMETER(WRK.Misc_Tare_Weight);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Package Type Code is Box
 IF PAR.Package_Type_Code = 'B';

 // PAR.Component Item Code = DB1.Component Item Code
 PAR.Component_Item_Code = DB1.Component_Item_Code;

 QUIT;

 ENDIF;

}


// PAR.Box iD = DTL.Box iD
PAR.Box_iD = DTL.Box_iD;

ENDDO;

//?allow boxid to be input
CASE;

// IF DTL.Item Type Code is Raw Material
IF DTL.Item_Type_Code = 'RM';

// OR DTL.Item Structure Type Code is EQ 900
OR DTL.Item_Structure_Type_Code = 900;

// LCL.Allow BoxId to Chg Usr = CND.no
LCL.Allow_BoxId_to_Chg_Usr = 'N';

//?allow boxid to be input
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Allow BoxId to Chg Usr = CND.yes
LCL.Allow_BoxId_to_Chg_Usr = 'Y';

ENDIF;

//?Unit Weight Rules with Update on Company Item
DO;

//?Set Allow Weight to Yes,
// WRK.Allow Weight Input = CND.yes
WRK.Allow_Weight_Input = 'Y';

CASE;

// IF DTL.Item Type Code is FG/WP
IF DTL.Item_Type_Code = 'FG'/'WP';

//?If Catch Weight Sts = N (Std Weight every time)
//?                        (Unit weight will be maintained at itemlvl
//?If Catch Weight Sts = Y (Unit weight will be maintained at complvl
CASE;

// IF DTL.Catch Weight Status is no
IF DTL.Catch_Weight_Status = 'N';

//?Unit wgt is updated from the chg of Unit Wgt on the Item Default
// WRK.Allow Weight Input = CND.no
WRK.Allow_Weight_Input = 'N';

// IF DTL.Catch Weight Status is yes
IF DTL.Catch_Weight_Status = 'Y';

//?Once a company item has been created then the unit weight will
//?be maintained at the CoItem.  Item default unit's weight
//?will be displayed only.
// WRK.Allow Weight Input = CND.yes
WRK.Allow_Weight_Input = 'Y';

ENDIF;

// IF DTL.Item Type Code is Packaging and Supplies
IF DTL.Item_Type_Code = 'PS';

//?Once a company item has been created then the unit weight will
//?be maintained at the CoItem.  Item default unit's weight
//?will be displayed only.
// WRK.Allow Weight Input = CND.yes
WRK.Allow_Weight_Input = 'Y';

// IF DTL.Item Type Code is Raw Material
IF DTL.Item_Type_Code = 'RM';

//?Unit wgt is updated from the chg of Unit Wgt on the Item Default
// WRK.Allow Weight Input = CND.no
WRK.Allow_Weight_Input = 'N';

ENDIF;

ENDDO;

CASE;

// IF WRK.Allow Weight Input is yes
IF WRK.Allow_Weight_Input = 'Y';

//?uom second is lb move unt wgt/conv-1
CASE;

// IF DTL.U/M - Second is Pounds
IF DTL.UOM_Second = 'LB';

// DTL.Conversion Factor 1 = DTL.Unit Weight
DTL.Conversion_Factor_1 = DTL.Unit_Weight;

//?uom second is lb move unt wgt/conv-1
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Conversion Factor 1 = DTL.Conversion Factor 1
DTL.Conversion_Factor_1 = DTL.Conversion_Factor_1;

ENDIF;

//?uom third is lb move unt wgt/conv-2
CASE;

// IF DTL.U/M - Third is Pounds
IF DTL.UOM_Third = 'LB';

// DTL.Conversion Factor 2 = DTL.Unit Weight
DTL.Conversion_Factor_2 = DTL.Unit_Weight;

//?uom third is lb move unt wgt/conv-2
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Conversion Factor 2 = DTL.Conversion Factor 2
DTL.Conversion_Factor_2 = DTL.Conversion_Factor_2;

ENDIF;

ENDIF;

//?E11209 JJH 07/18/17 - Display info based on Finsished Good
//?E11209 Display Produce on Day of week if FG
CASE;

// IF DTL.Item Type Code is Finished Good
IF DTL.Item_Type_Code = 'FG';

EXECUTE FUNCTION(Rtv CIE for Item      RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1926238;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Produce_on_Sunday_Sts);
PARAMETER(DTL.Produce_on_Monday_Sts);
PARAMETER(DTL.Produce_on_Tuesday_Sts);
PARAMETER(DTL.Produce_on_Wednesday_Sts);
PARAMETER(DTL.Produce_on_Thursday_Sts);
PARAMETER(DTL.Produce_on_Friday_Sts);
PARAMETER(DTL.Produce_on_Saturday_Sts);
PARAMETER(DTL.Plan_Production_Sts);
PARAMETER(DTL.Allocation_Method);
PARAMETER(DTL.CIE_Use_Age_Days_over_Max);
PARAMETER(DTL.CIE_MPR_Report_to_USDA);
PARAMETER(DTL.CIE_Capacity_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Condition Desc. 2  USR = Condition name of DTL.Allocation Method
DTL.Condition_Desc_2_USR = RTVCND(DTL.Allocation_Method);

// LCL.USR Display 1 = CND.Yes
LCL.USR_Display_1 = 'Y';

//?E11209 Display Produce on Day of week if FG
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.USR Display 1 = CND.No
LCL.USR_Display_1 = 'N';

ENDIF;

// DTL.Condition Desc. 2  USR = Condition name of DTL.Default Workcenter
DTL.Condition_Desc_2_USR = RTVCND(DTL.Default_Workcenter);

// DTL.Condition Desc. 3  USR = Condition name of DTL.Allocation Method
DTL.Condition_Desc_3_USR = RTVCND(DTL.Allocation_Method);

EXECUTE FUNCTION(RTV PS Prod Cap Desc  RT) TYPE(RTVOBJ) FILE(PBBFREP)           AC2079617;
PARAMETER(DTL.CIE_Capacity_Code);
PARAMETER(DTL.PS_Prod_Capacity_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Validate detail screen

//?F4 on Box Id
CASE;

// IF DTL.*CMD key is CF04
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Box iD
AND PGM.*Cursor_field = DTL.Box_iD;

// Call program SEL Box Items only     SR.
CALL PROGRAM(SEL Box Items only     SR) ('POSGSRR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Box_iD);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?USER: Process command keys

// WRK.Alpha Zeros = CON.00
WRK.Alpha_Zeros_2 = 00;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

