// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDW7XFR
// ?Date: 14.08.2025 Time: 03:30:25
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?E00168 RMC 6/05/08,  6/06/08
//?1. Delete Item Lot Loc with 0 qty at end of process
//?2. Update Item Balance in that rtv, rather than after EVERY item bal dtl
//?3. Dont Create Item Trans Dtl if qty and wgt are 0
//?4. Dont Create PDJWCPP (PS Avail Audit) if adj weight is zero
// PAR.Exceptions Exist Sts USR = CND.no
PAR.Exceptions_Exist_Sts_USR = 'N';

EXECUTE FUNCTION(Rtv Post Physcial Cnt  RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC1348977;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Cycle_Count_Code_IB);
PARAMETER(PAR.Transaction_Date_Code);
PARAMETER(PAR.Exceptions_Exist_Sts_USR);
PARAMETER(PAR.Post_Exception_USR);
{
 //?USER: Process Data record

 // PAR.USR Process status = CND.yes
 PAR.USR_Process_status = 'Y';

 //?  Validate warehouse match
 CASE;

 // IF PAR.Warehouse Code is Warehouse Code not Blank
 IF PAR.Warehouse_Code <> *BLANK;

 CASE;

 // IF DB1.Warehouse Code NE PAR.Warehouse Code
 IF DB1.Warehouse_Code <> PAR.Warehouse_Code;

 // PAR.USR Process status = CND.no
 PAR.USR_Process_status = 'N';

 ENDIF;

 ENDIF;

 //?  Validate cycle count code match
 CASE;

 // IF PAR.Cycle Count Code - IB is Entered
 IF PAR.Cycle_Count_Code_IB <> *BLANK;

 CASE;

 // IF DB1.Cycle Count Code - IB NE PAR.Cycle Count Code - IB
 IF DB1.Cycle_Count_Code_IB <> PAR.Cycle_Count_Code_IB;

 // PAR.USR Process status = CND.no
 PAR.USR_Process_status = 'N';

 ENDIF;

 ENDIF;

 //?  O.K. to process physical post (won't print on report)
 CASE;

 // IF PAR.USR Process status is yes
 IF PAR.USR_Process_status = 'Y';

 //?  Create transaction detail records, update/create transaction
 //?  update item balance detail records
 EXECUTE FUNCTION(Rtv Post Physical Cnt  RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1123413;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Transaction_Date_Code);
 PARAMETER(PAR.Post_Exception_USR);
 PARAMETER(PAR.Exceptions_Exist_Sts_USR);
 {
  //?USER: Initialize routine

  // PAR.Shift Number = CON.1
  PAR.Shift_Number = 1;

  //?USER: Process Data record

  CASE;

  // IF DB1.Update Exception Status is no
  IF DB1.Update_Exception_Status = 'N';

  // OR PAR.Post Exception USR is yes
  OR PAR.Post_Exception_USR = 'Y';

  //?Item balance has physical start date?
  CASE;

  // IF DB1.Physical Start Date is entered
  IF DB1.Physical_Start_Date <> *ZERO;

  // OR DB1.Physical Count Status is Physical in progress
  OR DB1.Physical_Count_Status = 'P';

  // PAR.Transaction Quantity = DB1.Physical Count Qty - U/M1 - DB1.Physical Start U/
  PAR.Transaction_Quantity = DB1.Physical_Count_Qty_UOM1 - DB1.Physical_Start_UOM1;

  // PAR.Transaction Weight = DB1.Physical Count Weight - DB1.Physical Start Weight
  PAR.Transaction_Weight = DB1.Physical_Count_Weight - DB1.Physical_Start_Weight;

  EXECUTE FUNCTION(Rtv Base Values        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1125011;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Description_Line_One);
  PARAMETER(PAR.Description_Line_Two);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Conversion_Factor_1);
  PARAMETER(PAR.Operation_Factor_1);
  PARAMETER(PAR.UOM_Second);
  PARAMETER(PAR.Conversion_Factor_2);
  PARAMETER(PAR.Operation_Factor_2);
  PARAMETER(PAR.UOM_Third);
  PARAMETER(PAR.UOM_Pricing);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Production_Date_Control);
  PARAMETER(PAR.Catch_Weight_Status);
  PARAMETER(WRK.Fresh_Chilling_Time);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV Unit Cost          RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC1413522;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Unit_Cost_Per_Pound);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?RMC E00168        6/06/08
  //?call this IF instead - so we dont update the item bal for every
  //? item bal dtl read. update it in the rtv that calls this rtv instead
  EXECUTE FUNCTION(UPD Bal from Phys CountIF) TYPE(EXCINTFUN)                     AC1886044;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER('A');
  PARAMETER('AP');
  PARAMETER(PAR.Transaction_Date_Code);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER('IC');
  PARAMETER('Post physical counts');
  PARAMETER(PAR.Transaction_Quantity);
  PARAMETER(PAR.Transaction_Weight);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Shift_Number);
  PARAMETER(DB1.Label_Date);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Conversion_Factor_1);
  PARAMETER(PAR.Operation_Factor_1);
  PARAMETER(PAR.UOM_Second);
  PARAMETER(PAR.Conversion_Factor_2);
  PARAMETER(PAR.Operation_Factor_2);
  PARAMETER(PAR.UOM_Third);
  PARAMETER(PAR.Production_Date_Control);
  PARAMETER(PAR.Catch_Weight_Status);
  PARAMETER(PAR.Unit_Cost_Per_Pound);
  PARAMETER('N');
  {
   //?Execute internal function

   // PAR.Quantity Total S = PAR.Transaction Quantity
   PAR.Quantity_Total_S = PAR.Transaction_Quantity;

   // PAR.USR Transaction Weight = PAR.Transaction Weight
   PAR.USR_Transaction_Weight = PAR.Transaction_Weight;

   //?Adjust quantity, weight for trans type
   CASE;

   // IF PAR.Inventory Trans. Type is Issue types
   IF PAR.Inventory_Trans_Type = 'I'/'IO'/'RW';

   CASE;

   // IF PAR.USR Unship Flag is yes
   IF PAR.USR_Unship_Flag = 'Y';

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Qty
   CASE;

   // IF PAR.Transaction Quantity GT WRK.ZERO
   IF PAR.Transaction_Quantity > WRK.ZERO;

   // PAR.Quantity Total S = CON.*ZERO - PAR.Transaction Quantity
   PAR.Quantity_Total_S = *ZERO - PAR.Transaction_Quantity;

   ENDIF;

   //?Wgt
   CASE;

   // IF PAR.Transaction Weight GT WRK.ZERO
   IF PAR.Transaction_Weight > WRK.ZERO;

   // PAR.USR Transaction Weight = CON.*ZERO - PAR.Transaction Weight
   PAR.USR_Transaction_Weight = *ZERO - PAR.Transaction_Weight;

   ENDIF;

   ENDIF;

   ENDIF;

   // Send status message - 'Processing...'
   MESSAGE(USR2303 *STATUS);

   EXECUTE FUNCTION(Clc Convert Quantity   IF) TYPE(EXCINTFUN)                     AC1123260;
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Conversion_Factor_1);
   PARAMETER(PAR.Operation_Factor_1);
   PARAMETER(PAR.UOM_Second);
   PARAMETER(PAR.Conversion_Factor_2);
   PARAMETER(PAR.Operation_Factor_2);
   PARAMETER(PAR.UOM_Third);
   PARAMETER(PAR.UOM_Transaction);
   PARAMETER(PAR.Quantity_Total_S);
   PARAMETER(PAR.Quantity_based_on_U_M1_S);
   PARAMETER(PAR.Quantity_based_on_U_M2_S);
   PARAMETER(PAR.Quantity_based_on_U_M3_S);
   {
    //?Execute internal function

    //?Clear output parameters
    // PAR.USR Qty based on U/M1 = CON.*ZERO
    PAR.USR_Qty_based_on_U_M1 = *ZERO;

    // PAR.USR Qty based on U/M2 = CON.*ZERO
    PAR.USR_Qty_based_on_U_M2 = *ZERO;

    // PAR.USR Qty based on U/M3 = CON.*ZERO
    PAR.USR_Qty_based_on_U_M3 = *ZERO;

    //?Process based on transaction U/M
    CASE;

    // IF PAR.U/M - Primary EQ PAR.U/M - Transaction
    IF PAR.UOM_Primary = PAR.UOM_Transaction;

    // PAR.USR Qty based on U/M1 = PAR.Transaction Quantity
    PAR.USR_Qty_based_on_U_M1 = PAR.Transaction_Quantity;

    //?Process entered U/M2
    CASE;

    // IF PAR.U/M - Second is Entered
    IF PAR.UOM_Second <> *BLANK;

    //?Convert based on operation factor
    CASE;

    // IF PAR.Operation Factor 1 is Multiply
    IF PAR.Operation_Factor_1 = 'M';

    // PAR.Quantity based on U/M2 S = PAR.Transaction Quantity * PAR.Conversion Factor
    PAR.Quantity_based_on_U_M2_S = PAR.Transaction_Quantity * PAR.Conversion_Factor_1 'H';

    //?Convert based on operation factor
    // IF PAR.Operation Factor 1 is Divide
    IF PAR.Operation_Factor_1 = 'D';

    CASE;

    // IF PAR.Conversion Factor 1 is Entered
    IF PAR.Conversion_Factor_1 <> *ZERO;

    // PAR.Quantity based on U/M2 S = PAR.Transaction Quantity / PAR.Conversion Factor
    PAR.Quantity_based_on_U_M2_S = PAR.Transaction_Quantity / PAR.Conversion_Factor_1 'H';

    ENDIF;

    ENDIF;

    // PAR.Quantity based on U/M2 = PAR.Quantity based on U/M2 S
    PAR.USR_Qty_based_on_U_M2 = PAR.Quantity_based_on_U_M2_S;

    ENDIF;

    //?Process entered U/M3
    CASE;

    // IF PAR.U/M - Third is Entered
    IF PAR.UOM_Third <> *BLANK;

    //?Convert based on operation factor
    CASE;

    // IF PAR.Operation Factor 2 is Multiply
    IF PAR.Operation_Factor_2 = 'M';

    // PAR.Quantity based on U/M3 S = PAR.Quantity based on U/M2 S * PAR.Multiplier Two
    PAR.Quantity_based_on_U_M3_S = PAR.Quantity_based_on_U_M2_S * PAR.Conversion_Factor_2
    'H';

    //?Convert based on operation factor
    // IF PAR.Operation Factor 2 is Divide
    IF PAR.Operation_Factor_2 = 'D';

    CASE;

    // IF PAR.Conversion Factor 2 is Entered
    IF PAR.Conversion_Factor_2 <> *ZERO;

    // PAR.Quantity based on U/M3 S = PAR.Quantity based on U/M2 S / PAR.Conversion Fac
    PAR.Quantity_based_on_U_M3_S = PAR.Quantity_based_on_U_M2_S / PAR.Conversion_Factor_2
    'H';

    ENDIF;

    ENDIF;

    // PAR.Quantity based on U/M3 = PAR.Quantity based on U/M3 S
    PAR.USR_Qty_based_on_U_M3 = PAR.Quantity_based_on_U_M3_S;

    ENDIF;

    //?Process based on transaction U/M
    // IF PAR.U/M - Second EQ PAR.U/M - Transaction
    IF PAR.UOM_Second = PAR.UOM_Transaction;

    // PAR.Quantity based on U/M2 = PAR.Transaction Quantity
    PAR.USR_Qty_based_on_U_M2 = PAR.Transaction_Quantity;

    //?Convert based on operation factor
    CASE;

    // IF PAR.Operation Factor 1 is Multiply
    IF PAR.Operation_Factor_1 = 'M';

    CASE;

    // IF PAR.Conversion Factor 1 is Entered
    IF PAR.Conversion_Factor_1 <> *ZERO;

    // PAR.Quantity based on U/M1 = PAR.Transaction Quantity / PAR.Conversion Factor 1
    PAR.USR_Qty_based_on_U_M1 = PAR.Transaction_Quantity / PAR.Conversion_Factor_1 'H';

    ENDIF;

    //?Convert based on operation factor
    // IF PAR.Operation Factor 1 is Divide
    IF PAR.Operation_Factor_1 = 'D';

    // PAR.Quantity based on U/M1 = PAR.Transaction Quantity * PAR.Conversion Factor 1
    PAR.USR_Qty_based_on_U_M1 = PAR.Transaction_Quantity * PAR.Conversion_Factor_1 'H';

    ENDIF;

    //?Process entered U/M3
    CASE;

    // IF PAR.U/M - Third is Entered
    IF PAR.UOM_Third <> *BLANK;

    //?Convert based on operation factor
    CASE;

    // IF PAR.Operation Factor 2 is Multiply
    IF PAR.Operation_Factor_2 = 'M';

    // PAR.Quantity based on U/M3 S = PAR.Transaction Quantity * PAR.Conversion Factor
    PAR.Quantity_based_on_U_M3_S = PAR.Transaction_Quantity * PAR.Conversion_Factor_2 'H';

    //?Convert based on operation factor
    // IF PAR.Operation Factor 2 is Divide
    IF PAR.Operation_Factor_2 = 'D';

    CASE;

    // IF PAR.Conversion Factor 2 is Entered
    IF PAR.Conversion_Factor_2 <> *ZERO;

    // PAR.Quantity based on U/M3 S = PAR.Transaction Quantity / PAR.Conversion Factor
    PAR.Quantity_based_on_U_M3_S = PAR.Transaction_Quantity / PAR.Conversion_Factor_2 'H';

    ENDIF;

    ENDIF;

    // PAR.Quantity based on U/M3 = PAR.Quantity based on U/M3 S
    PAR.USR_Qty_based_on_U_M3 = PAR.Quantity_based_on_U_M3_S;

    ENDIF;

    //?Process based on transaction U/M
    // IF PAR.U/M - Third EQ PAR.U/M - Transaction
    IF PAR.UOM_Third = PAR.UOM_Transaction;

    // PAR.Quantity based on U/M3 = PAR.Transaction Quantity
    PAR.USR_Qty_based_on_U_M3 = PAR.Transaction_Quantity;

    //?Convert based on operation factor
    CASE;

    // IF PAR.Operation Factor 2 is Multiply
    IF PAR.Operation_Factor_2 = 'M';

    CASE;

    // IF PAR.Conversion Factor 2 is Entered
    IF PAR.Conversion_Factor_2 <> *ZERO;

    // PAR.Quantity based on U/M2 S = PAR.Transaction Quantity / PAR.Conversion Factor
    PAR.Quantity_based_on_U_M2_S = PAR.Transaction_Quantity / PAR.Conversion_Factor_2 'H';

    ENDIF;

    //?Convert based on operation factor
    // IF PAR.Operation Factor 2 is Divide
    IF PAR.Operation_Factor_2 = 'D';

    // PAR.Quantity based on U/M2 S = PAR.Transaction Quantity * PAR.Conversion Factor
    PAR.Quantity_based_on_U_M2_S = PAR.Transaction_Quantity * PAR.Conversion_Factor_2 'H';

    ENDIF;

    // PAR.Quantity based on U/M2 = PAR.Quantity based on U/M2 S
    PAR.USR_Qty_based_on_U_M2 = PAR.Quantity_based_on_U_M2_S;

    //?Convert based on operation factor
    CASE;

    // IF PAR.Operation Factor 1 is Multiply
    IF PAR.Operation_Factor_1 = 'M';

    CASE;

    // IF PAR.Conversion Factor 1 is Entered
    IF PAR.Conversion_Factor_1 <> *ZERO;

    // PAR.Quantity based on U/M1 = PAR.Quantity based on U/M2 S / PAR.Conversion Facto
    PAR.USR_Qty_based_on_U_M1 = PAR.Quantity_based_on_U_M2_S / PAR.Conversion_Factor_1 'H';

    ENDIF;

    //?Convert based on operation factor
    // IF PAR.Operation Factor 1 is Divide
    IF PAR.Operation_Factor_1 = 'D';

    // PAR.Quantity based on U/M1 = PAR.Quantity based on U/M2 S * PAR.Conversion Facto
    PAR.USR_Qty_based_on_U_M1 = PAR.Quantity_based_on_U_M2_S * PAR.Conversion_Factor_1 'H';

    ENDIF;

    ENDIF;

   }

   EXECUTE FUNCTION(Clc Convert Cost       IF) TYPE(EXCINTFUN)                     AC1122884;
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Conversion_Factor_1);
   PARAMETER(PAR.Operation_Factor_1);
   PARAMETER(PAR.UOM_Second);
   PARAMETER(PAR.Conversion_Factor_2);
   PARAMETER(PAR.Operation_Factor_2);
   PARAMETER(PAR.UOM_Third);
   PARAMETER(PAR.Unit_Cost_Per_Pound);
   PARAMETER(PAR.UOM_Cost);
   PARAMETER(PAR.Cost_based_on_U_M1_S);
   PARAMETER(PAR.Cost_based_on_U_M2_S);
   PARAMETER(PAR.Cost_based_on_U_M3_S);
   {
    //?Execute internal function

    //?Initialize parameter values
    // PAR.Cost based on U/M1 = CON.*ZERO
    PAR.Cost_based_on_U_M1 = *ZERO;

    // PAR.Cost based on U/M2 = CON.*ZERO
    PAR.Cost_based_on_U_M2 = *ZERO;

    // PAR.Cost based on U/M3 = CON.*ZERO
    PAR.Cost_based_on_U_M3 = *ZERO;

    //?Process based on Unit of Measure entered
    CASE;

    // IF PAR.U/M - Primary EQ PAR.U/M - Cost
    IF PAR.UOM_Primary = PAR.UOM_Cost;

    // PAR.Cost based on U/M1 = PAR.USR Transaction-Unit Cost
    PAR.Cost_based_on_U_M1 = PAR.USR_Transaction_Unit_Cost;

    //?Process second U/M if entered
    CASE;

    // IF PAR.U/M - Second is Entered
    IF PAR.UOM_Second <> *BLANK;

    //?Convert based on operation code
    CASE;

    // IF PAR.Operation Factor 1 is Multiply
    IF PAR.Operation_Factor_1 = 'M';

    CASE;

    // IF PAR.Conversion Factor 1 is Entered
    IF PAR.Conversion_Factor_1 <> *ZERO;

    // PAR.Cost based on U/M2 S = PAR.USR Transaction-Unit Cost / PAR.Conversion Factor
    PAR.Cost_based_on_U_M2_S = PAR.USR_Transaction_Unit_Cost / PAR.Conversion_Factor_1 'H';

    ENDIF;

    //?Convert based on operation code
    // IF PAR.Operation Factor 1 is Divide
    IF PAR.Operation_Factor_1 = 'D';

    // PAR.Cost based on U/M2 S = PAR.USR Transaction-Unit Cost * PAR.Conversion Factor
    PAR.Cost_based_on_U_M2_S = PAR.USR_Transaction_Unit_Cost * PAR.Conversion_Factor_1 'H';

    ENDIF;

    // PAR.Cost based on U/M2 = PAR.Cost based on U/M2 S
    PAR.Cost_based_on_U_M2 = PAR.Cost_based_on_U_M2_S;

    ENDIF;

    //?Process third U/M if entered
    CASE;

    // IF PAR.U/M - Third is Entered
    IF PAR.UOM_Third <> *BLANK;

    CASE;

    // IF PAR.Operation Factor 2 is Multiply
    IF PAR.Operation_Factor_2 = 'M';

    CASE;

    // IF PAR.Conversion Factor 2 is Entered
    IF PAR.Conversion_Factor_2 <> *ZERO;

    // PAR.Cost based on U/M3 = PAR.Cost based on U/M2 S / PAR.Conversion Factor 2 *Rou
    PAR.Cost_based_on_U_M3 = PAR.Cost_based_on_U_M2_S / PAR.Conversion_Factor_2 'H';

    ENDIF;

    // IF PAR.Operation Factor 2 is Divide
    IF PAR.Operation_Factor_2 = 'D';

    // PAR.Cost based on U/M3 = PAR.Cost based on U/M2 S * PAR.Conversion Factor 2 *Rou
    PAR.Cost_based_on_U_M3 = PAR.Cost_based_on_U_M2_S * PAR.Conversion_Factor_2 'H';

    ENDIF;

    ENDIF;

    //?Process based on Unit of Measure entered
    // IF PAR.U/M - Second EQ PAR.U/M - Cost
    IF PAR.UOM_Second = PAR.UOM_Cost;

    // PAR.Cost based on U/M2 = PAR.USR Transaction-Unit Cost
    PAR.Cost_based_on_U_M2 = PAR.USR_Transaction_Unit_Cost;

    //?Convert based on operation factor
    CASE;

    // IF PAR.Operation Factor 1 is Multiply
    IF PAR.Operation_Factor_1 = 'M';

    // PAR.Cost based on U/M1 = PAR.USR Transaction-Unit Cost * PAR.Conversion Factor 1
    PAR.Cost_based_on_U_M1 = PAR.USR_Transaction_Unit_Cost * PAR.Conversion_Factor_1 'H';

    //?Convert based on operation factor
    // IF PAR.Operation Factor 1 is Divide
    IF PAR.Operation_Factor_1 = 'D';

    CASE;

    // IF PAR.Conversion Factor 1 is Entered
    IF PAR.Conversion_Factor_1 <> *ZERO;

    // PAR.Cost based on U/M1 = PAR.USR Transaction-Unit Cost / PAR.Conversion Factor 1
    PAR.Cost_based_on_U_M1 = PAR.USR_Transaction_Unit_Cost / PAR.Conversion_Factor_1 'H';

    ENDIF;

    ENDIF;

    //?Process third U/M if entered
    CASE;

    // IF PAR.U/M - Third is Entered
    IF PAR.UOM_Third <> *BLANK;

    CASE;

    // IF PAR.Operation Factor 2 is Multiply
    IF PAR.Operation_Factor_2 = 'M';

    CASE;

    // IF PAR.Conversion Factor 2 is Entered
    IF PAR.Conversion_Factor_2 <> *ZERO;

    // PAR.Cost based on U/M3 = PAR.USR Transaction-Unit Cost / PAR.Conversion Factor 2
    PAR.Cost_based_on_U_M3 = PAR.USR_Transaction_Unit_Cost / PAR.Conversion_Factor_2 'H';

    ENDIF;

    // IF PAR.Operation Factor 2 is Divide
    IF PAR.Operation_Factor_2 = 'D';

    // PAR.Cost based on U/M3 = PAR.USR Transaction-Unit Cost * PAR.Conversion Factor 2
    PAR.Cost_based_on_U_M3 = PAR.USR_Transaction_Unit_Cost * PAR.Conversion_Factor_2 'H';

    ENDIF;

    ENDIF;

    //?Process based on Unit of Measure entered
    // IF PAR.U/M - Third EQ PAR.U/M - Cost
    IF PAR.UOM_Third = PAR.UOM_Cost;

    // PAR.Cost based on U/M3 = PAR.USR Transaction-Unit Cost
    PAR.Cost_based_on_U_M3 = PAR.USR_Transaction_Unit_Cost;

    //?Convert based on operation factor
    CASE;

    // IF PAR.Operation Factor 2 is Multiply
    IF PAR.Operation_Factor_2 = 'M';

    // PAR.Cost based on U/M2 S = PAR.USR Transaction-Unit Cost * PAR.Conversion Factor
    PAR.Cost_based_on_U_M2_S = PAR.USR_Transaction_Unit_Cost * PAR.Conversion_Factor_2 'H';

    //?Convert based on operation factor
    // IF PAR.Operation Factor 2 is Divide
    IF PAR.Operation_Factor_2 = 'D';

    CASE;

    // IF PAR.Conversion Factor 2 is Entered
    IF PAR.Conversion_Factor_2 <> *ZERO;

    // PAR.Cost based on U/M2 S = PAR.USR Transaction-Unit Cost / PAR.Conversion Factor
    PAR.Cost_based_on_U_M2_S = PAR.USR_Transaction_Unit_Cost / PAR.Conversion_Factor_2 'H';

    ENDIF;

    ENDIF;

    // PAR.Cost based on U/M2 = PAR.Cost based on U/M2 S
    PAR.Cost_based_on_U_M2 = PAR.Cost_based_on_U_M2_S;

    //?Convert based on operation factor
    CASE;

    // IF PAR.Operation Factor 1 is Multiply
    IF PAR.Operation_Factor_1 = 'M';

    // PAR.Cost based on U/M1 = PAR.Cost based on U/M2 S * PAR.Conversion Factor 1 *Rou
    PAR.Cost_based_on_U_M1 = PAR.Cost_based_on_U_M2_S * PAR.Conversion_Factor_1 'H';

    //?Convert based on operation factor
    // IF PAR.Operation Factor 1 is Divide
    IF PAR.Operation_Factor_1 = 'D';

    CASE;

    // IF PAR.Conversion Factor 1 is Entered
    IF PAR.Conversion_Factor_1 <> *ZERO;

    // PAR.Cost based on U/M1 = PAR.Cost based on U/M2 S / PAR.Conversion Factor 1 *Rou
    PAR.Cost_based_on_U_M1 = PAR.Cost_based_on_U_M2_S / PAR.Conversion_Factor_1 'H';

    ENDIF;

    ENDIF;

    ENDIF;

   }

   // PAR.Extended Amount = PAR.Unit Cost Per Pound * PAR.USR Transaction Weight *
   PAR.Extended_Amount = PAR.Unit_Cost_Per_Pound * PAR.USR_Transaction_Weight;

   // PAR.USR Reason Code = PAR.Reason Code
   PAR.USR_Reason_Code = PAR.Reason_Code;

   EXECUTE FUNCTION(Rtv Item Typ/Grp/Cls  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1298334;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?RMC E00168  6/06/08 Crt CAB7CPP if adj qty or weight NOT zero.
   CASE;

   // IF PAR.Quantity Total S is not equal zero
   IF PAR.Quantity_Total_S <> *ZERO;

   // OR PAR.USR Transaction Weight is NE 0
   OR PAR.USR_Transaction_Weight <> 0;

   EXECUTE FUNCTION(Rtv Next Sequence No.  RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1304410;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Inventory_Trans_ID);
   PARAMETER(PAR.Inventory_Trans_Type);
   PARAMETER(PAR.Transaction_Date_Code);
   PARAMETER(PAR.ITD_Sequence_Number);
   {
    //?USER: Processing if Data record not found

    // PAR.ITD Sequence Number = CON.1
    PAR.ITD_Sequence_Number = 1;

    //?USER: Process Data record

    // PAR.ITD Sequence Number = DB1.ITD Sequence Number + CON.1
    PAR.ITD_Sequence_Number = DB1.ITD_Sequence_Number + 1;

    QUIT;

   }

   //?Error if unit cost = 0
   CASE;

   // IF PAR.Unit Cost Pricing U/M EQ WRK.ZERO
   IF PAR.Unit_Cost_Per_Pound = WRK.ZERO;

   // PAR.USR Reason Code = CND.Error
   PAR.USR_Reason_Code = 'ERR';

   ENDIF;

   EXECUTE FUNCTION(Crt IC Trans. Detail   CR) TYPE(CRTOBJ) FILE(CAB7CPP)          AC1122298;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Inventory_Trans_ID);
   PARAMETER(PAR.Inventory_Trans_Type);
   PARAMETER(PAR.Transaction_Date_Code);
   PARAMETER(PAR.ITD_Sequence_Number);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.UOM_Transaction);
   PARAMETER(PAR.Item_Transaction_Source);
   PARAMETER(PAR.Description);
   PARAMETER(PAR.Quantity_Total_S);
   PARAMETER(PAR.USR_Transaction_Weight);
   PARAMETER(*ZERO);
   PARAMETER(PAR.UOM_Cost);
   PARAMETER(PAR.Extended_Amount);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(PAR.USR_Reason_Code);
   PARAMETER(*BLANK);
   PARAMETER(PAR.Lot_ID);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Employee_Badge_Number);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Shift_Number);
   PARAMETER(PAR.Label_Date);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER('A');
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    //?USER: Processing after Data update

    // Call program Crt Export Rate Dtl   XF.
    CALL PROGRAM(Crt Export Rate Dtl   XF) ('POO5XFR');
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Inventory_Trans_ID);
    PARAMETER(DB1.Inventory_Trans_Type);
    PARAMETER(DB1.Transaction_Date_Code);
    PARAMETER(DB1.Sequence_Number);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.UOM_Transaction);
    PARAMETER(DB1.Item_Transaction_Source);
    PARAMETER(DB1.Description);
    PARAMETER(DB1.Transaction_Quantity);
    PARAMETER(DB1.Transaction_Weight);
    PARAMETER(DB1.USR_Transaction_Unit_Cost);
    PARAMETER(DB1.UOM_Cost);
    PARAMETER(DB1.Extended_Amount);
    PARAMETER(DB1.Ticket_Number);
    PARAMETER(DB1.GL_Document_Number);
    PARAMETER(DB1.GL_Update_Status);
    PARAMETER(DB1.Reason_Code);
    PARAMETER(DB1.Reference_Number_Code);
    PARAMETER(DB1.Lot_ID);
    PARAMETER(DB1.Transfer_Batch_Number);
    PARAMETER(DB1.Transfer_Batch_Sequence);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Item_Structure_Class_Code);
    PARAMETER(DB1.Item_Structure_Group_Code);
    PARAMETER(DB1.Item_Structure_Type_Code);
    PARAMETER(DB1.Employee_Badge_Number);
    PARAMETER(DB1.Production_Time);
    PARAMETER(DB1.Shift_Number);
    PARAMETER(DB1.Label_Date);
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.Job_Date);

   }

   ENDIF;

   EXECUTE FUNCTION(CHG Value/Qty/Wgt      CH) TYPE(CHGOBJ) FILE(CAB1REP)          AC1413368;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Conversion_Factor_1);
   PARAMETER(PAR.Operation_Factor_1);
   PARAMETER(PAR.UOM_Second);
   PARAMETER(PAR.Conversion_Factor_2);
   PARAMETER(PAR.Operation_Factor_2);
   PARAMETER(PAR.UOM_Third);
   PARAMETER(PAR.Production_Date_Control);
   PARAMETER(PAR.Catch_Weight_Status);
   PARAMETER(PAR.Inventory_Trans_ID);
   PARAMETER(PAR.Inventory_Trans_Type);
   PARAMETER(PAR.Transaction_Date_Code);
   PARAMETER(PAR.UOM_Transaction);
   PARAMETER(PAR.Quantity_based_on_U_M1_S);
   PARAMETER(PAR.USR_Transaction_Weight);
   PARAMETER(PAR.Unit_Cost_Per_Pound);
   PARAMETER(PAR.UOM_Cost);
   PARAMETER(PAR.Extended_Amount);
   PARAMETER(PAR.Label_Date);
   {
    //?USER: Processing before Data read

    // PAR.Shift Number = CON.1
    PAR.Shift_Number = 1;

    //?USER: Processing if Data record not found

    EXECUTE FUNCTION(Crt Item Bal. Detail   CR) TYPE(CRTOBJ) FILE(CAB1REP)          AC1120962;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Production_Date);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*BLANK);
    PARAMETER(PAR.Transaction_Weight);
    PARAMETER(PAR.Transaction_Quantity);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER('N');
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(PAR.Extended_Amount);
    PARAMETER(PAR.Label_Date_USR);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER('A');
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

     // Call program RTV System Date/Time   UP.
     CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
     PARAMETER(DB1.Job_Date);
     PARAMETER(DB1.Job_Time);

    }

    //?USER: Processing before Data update

    // PGM.*Record Data Changed = CND.*YES
    PGM.*Record_Data_Changed = 'Y';

    // DB1.Quantity on Hand - U/M1 = DB1.Quantity on Hand - U/M1 + PAR.Transaction Quan
    DB1.Quantity_on_Hand_UOM1 = DB1.Quantity_on_Hand_UOM1 + PAR.Transaction_Quantity;

    // DB1.Quantity on Hand - Weight = DB1.Quantity on Hand - Weight + PAR.Transaction
    DB1.Quantity_on_Hand_Weight = DB1.Quantity_on_Hand_Weight + PAR.Transaction_Weight;

    // DB1.Value of On Hand Inventor = DB1.Value of On Hand Inventor + PAR.Extended Amo
    DB1.Value_of_On_Hand_Inventor = DB1.Value_of_On_Hand_Inventor + PAR.Extended_Amount;

    //?If quantity is zero, so are weight, value of inventory
    CASE;

    // IF DB1.Quantity on Hand - U/M1 EQ WRK.ZERO
    IF DB1.Quantity_on_Hand_UOM1 = WRK.ZERO;

    // Call program UPD Create Weight Adj. XF.
    CALL PROGRAM(UPD Create Weight Adj. XF) ('PDMYXFR');
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(PAR.Transaction_Date_Code);
    PARAMETER(DB1.Production_Date);
    PARAMETER(PAR.UOM_Transaction);
    PARAMETER(DB1.Quantity_on_Hand_Weight);
    PARAMETER(PAR.USR_Transaction_Unit_Cost);
    PARAMETER(PAR.UOM_Cost);
    PARAMETER(DB1.Item_Structure_Class_Code);
    PARAMETER(DB1.Item_Structure_Group_Code);
    PARAMETER(DB1.Item_Structure_Type_Code);
    PARAMETER(PAR.Shift_Number);
    PARAMETER(DB1.Label_Date);

    // DB1.Quantity on Hand - Weight = CON.*ZERO
    DB1.Quantity_on_Hand_Weight = *ZERO;

    // DB1.Value of On Hand Inventor = CON.*ZERO
    DB1.Value_of_On_Hand_Inventor = *ZERO;

    ENDIF;

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // Call program RTV System Date/Time   UP.
    CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
    PARAMETER(DB1.Job_Date);
    PARAMETER(DB1.Job_Time);

    //?USER: Processing after Data update

    CASE;

    // IF DB1.Quantity on Hand - U/M1 EQ WRK.ZERO
    IF DB1.Quantity_on_Hand_UOM1 = WRK.ZERO;

    EXECUTE FUNCTION(Rtv Lot Tracking Flag RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1506123;
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(PAR.Lot_Tracking_Flag);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF PAR.Lot Tracking Flag is Not Yes
    IF PAR.Lot_Tracking_Flag = *BLANK/'N';

    EXECUTE FUNCTION(DLT Item Bal. Detail   DL) TYPE(DLTOBJ) FILE(CAB1REP)          AC1120964;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Production_Date);
    ENDIF;

    ENDIF;

   }

   //?11/25/09 PKD Comment out until we know what we need to do here.
   //?E00168 6/06/08 Dont do this here for EVERY item bal dtl. do in calling RTV
  }

  EXECUTE FUNCTION(Chg Clear Physical Cnt Ch) TYPE(CHGOBJ) FILE(CAB1REP)          AC1348883;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER('N');
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Exceptions Exist Sts USR = CND.yes
  PAR.Exceptions_Exist_Sts_USR = 'Y';

  ENDIF;

 }

 //?E00168 6/06/08 Do do this here after all item bal dtls have been read.
 EXECUTE FUNCTION(RTV Sum Act Qty,Wgt,ValRT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1402850;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(LCL.On_Hand_Weight_Summary);
 PARAMETER(LCL.On_Hand_UOM1_Summary);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(LCL.Value_of_On_Hand_Inventor);
 {
  //?USER: Initialize routine

  // PAR.Quantity on Hand - Weight = CON.*ZERO
  PAR.Quantity_on_Hand_Weight = *ZERO;

  // PAR.Quantity on Hand - U/M1 = CON.*ZERO
  PAR.Quantity_on_Hand_UOM1 = *ZERO;

  // PAR.Quantity on Hand - U/M2 = CON.*ZERO
  PAR.Quantity_on_Hand_UOM2 = *ZERO;

  // PAR.Quantity on Hand - U/M3 = CON.*ZERO
  PAR.Quantity_on_Hand_UOM3 = *ZERO;

  // PAR.Value of On Hand Inventor = CON.*ZERO
  PAR.Value_of_On_Hand_Inventor = *ZERO;

  //?USER: Process Data record

  // PAR.Quantity on Hand - Weight = PAR.Quantity on Hand - Weight + DB1.Quantity on
  PAR.Quantity_on_Hand_Weight = PAR.Quantity_on_Hand_Weight + DB1.Quantity_on_Hand_Weight;

  // PAR.Quantity on Hand - U/M1 = PAR.Quantity on Hand - U/M1 + DB1.Quantity on Hand
  PAR.Quantity_on_Hand_UOM1 = PAR.Quantity_on_Hand_UOM1 + DB1.Quantity_on_Hand_UOM1;

  // PAR.Quantity on Hand - U/M2 = PAR.Quantity on Hand - U/M2 + DB1.Quantity on Hand
  PAR.Quantity_on_Hand_UOM2 = PAR.Quantity_on_Hand_UOM2 + DB1.Quantity_on_Hand_UOM2;

  // PAR.Quantity on Hand - U/M3 = PAR.Quantity on Hand - U/M3 + DB1.Quantity on Hand
  PAR.Quantity_on_Hand_UOM3 = PAR.Quantity_on_Hand_UOM3 + DB1.Quantity_on_Hand_UOM3;

  // PAR.Value of On Hand Inventor = PAR.Value of On Hand Inventor + DB1.Value of On
  PAR.Value_of_On_Hand_Inventor = PAR.Value_of_On_Hand_Inventor
  + DB1.Value_of_On_Hand_Inventor;

 }

 EXECUTE FUNCTION(Chg Val/Qty/Wgt        Ch) TYPE(CHGOBJ) FILE(CAB0REP)          AC1129181;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(LCL.On_Hand_Weight_Summary);
 PARAMETER(LCL.On_Hand_UOM1_Summary);
 PARAMETER(LCL.Value_of_On_Hand_Inventor);
 {
  //?USER: Processing before Data update

  // PGM.*Record Data Changed = CND.*YES
  PGM.*Record_Data_Changed = 'Y';

  //?Refresh the available to sell quantity
  // DB1.Quantity Avail. to Sell = DB1.On Hand U/M1 Summary
  DB1.Quantity_Avail_To_Sell = DB1.On_Hand_UOM1_Summary;

  // DB1.Quantity Avail. to Sell = DB1.Quantity Avail. to Sell - DB1.Quantity on Sale
  DB1.Quantity_Avail_To_Sell = DB1.Quantity_Avail_To_Sell - DB1.Quantity_on_Sales_Order;

  // DB1.Quantity Avail. to Sell = DB1.Quantity Avail. to Sell - DB1.Quantity on Purc
  DB1.Quantity_Avail_To_Sell = DB1.Quantity_Avail_To_Sell - DB1.Quantity_on_Purch_Order;

  // DB1.Quantity Avail. to Sell = DB1.Quantity Avail. to Sell - DB1.Quantity on Tran
  DB1.Quantity_Avail_To_Sell = DB1.Quantity_Avail_To_Sell - DB1.Quantity_on_Transfer;

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

}


//?Delete Item Lot Loc with -0- qty/wgt    6/05/08 RMC
EXECUTE FUNCTION(Rtv Lot Track,int flg RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1885925;
PARAMETER(PAR.Warehouse_Code);
PARAMETER(LCL.Lot_Tracking_Flag);
PARAMETER(LCL.Warehouse_Location);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Lot Tracking Flag is yes
IF LCL.Lot_Tracking_Flag = 'Y';

// AND LCL.Warehouse Location is Internal (Plant)
AND LCL.Warehouse_Location = 'I';

EXECUTE FUNCTION(Rtv Del Zero qty,Wgt  RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC1885924;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.ILL Item Qty On-Hand is LE Zero
 IF DB1.ILL_Item_Qty_On_Hand <= *ZERO;

 EXECUTE FUNCTION(Del Item Location     DL) TYPE(DLTOBJ) FILE(PDL5CPP)           AC1517026;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Lot_Number);
 PARAMETER(DB1.Location_Code);
 PARAMETER(DB1.Location_Level);
 ENDIF;

}


ENDIF;

