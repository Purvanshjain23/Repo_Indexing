// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDX7E1R
// ?Date: 14.08.2025 Time: 03:36:30
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

//?*****
//?** 12/21/2005 LJB - Added Company Number back to Key Screen.
//?** Restrict Company Number to Security parms if Allow
//?** Multi-Company is No
//?*****
//?USER: Initialize key screen

CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// KEY.Company Number = PAR.Company Number
KEY.Company_Number = PAR.Company_Number;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// KEY.Company Number = WRK.Company Number
KEY.Company_Number = WRK.Company_Number;

ENDIF;

//?USER: Validate key screen

// WRK.Company Number = KEY.Company Number
WRK.Company_Number = KEY.Company_Number;

//?USER: Initialize detail screen (existing record)

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DB1.Product Complete Date is not entered
IF DB1.Product_Complete_Date = *ZERO;

// Call program RTV System Date/Time   UP.
CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
PARAMETER(DTL.Product_Complete_Date);
PARAMETER(WRK.Current_System_Time);

// DTL.USR Time 4.0 = WRK.Current System Time / CON.100 *
DTL.USR_Time_4_0 = WRK.Current_System_Time / 100;

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.USR Time 4.0 = DTL.Product Complete Time / CON.100 *
DTL.USR_Time_4_0 = DTL.Product_Complete_Time / 100;

ENDIF;

//?USER: Validate detail screen fields

// DTL.Product Complete Time = CON.100 * DTL.USR Time 4.0 *
DTL.Product_Complete_Time = 100 * DTL.USR_Time_4_0;

//?CALC: Detail screen function fields

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG Load Header        CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1183330;
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(DTL.LTL_Flag);
PARAMETER(DTL.Load_Status);
PARAMETER(DTL.Reefer_Temperature);
PARAMETER(DTL.Seal_1);
PARAMETER(DTL.Seal_2);
PARAMETER(DTL.Seal_3);
PARAMETER(DTL.Total_Load_Order_Weight);
PARAMETER(DTL.Flat_Amount);
PARAMETER(DTL.Allocate_Pounds_Miles);
PARAMETER(DTL.Total_Stops);
PARAMETER(DTL.Trailer_Id);
PARAMETER(DTL.Transloader_Carrier_Code);
PARAMETER(DTL.BOL_Time);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Truck_Size);
PARAMETER(DTL.Ld_Hdr_Ld_Dtl_Unused);
PARAMETER(DTL.Rated_Freight);
PARAMETER(DTL.Ship_Status);
PARAMETER(DTL.Load_Type);
PARAMETER(DTL.Number_Pallets_Received);
PARAMETER(DTL.Number_Pallets_Loaded);
PARAMETER(DTL.Load_Carrier_Pay_Amt);
PARAMETER(DTL.Estimated_Arrival_Time);
PARAMETER(DTL.Actual_Arrival_Date);
PARAMETER(DTL.Actual_Arrival_Time);
PARAMETER(DTL.Trailer_IN_Weight);
PARAMETER(DTL.Trailer_OUT_Weight);
PARAMETER(DTL.Actual_Departure_Date);
PARAMETER(DTL.Departure_Time);
PARAMETER(DTL.Schedule_Sequence_Number);
PARAMETER(DTL.Product_Temperature);
PARAMETER(DTL.Number_Spacers_Loaded);
PARAMETER(DTL.Car_Veh_Initials);
PARAMETER(DTL.Total_Load_Miles);
PARAMETER(DTL.Recorder_ID);
PARAMETER(DTL.Shipping_Method);
PARAMETER(DTL.Ship_From_Warehouse);
PARAMETER(DTL.Ship_To_State_Code);
PARAMETER(DTL.Gross_Weight);
PARAMETER(DTL.Carrier_Broker);
PARAMETER(DTL.Export_Status);
PARAMETER(DTL.Actual_Ship_Date);
PARAMETER(DTL.On_Time_Y_N);
PARAMETER(DTL.Truck_Ready_Date);
PARAMETER(DTL.Truck_Ready_Time);
PARAMETER(DTL.Spotted_Date);
PARAMETER(DTL.Spotted_Time);
PARAMETER(DTL.Load_Finished_Date);
PARAMETER(DTL.Load_Finished_Time);
PARAMETER(DTL.BOL_Complete_Date);
PARAMETER(DTL.BOL_Complete_Time);
PARAMETER(DTL.BOL_Received_Date);
PARAMETER(DTL.BOL_Received_Time);
PARAMETER(DTL.Truck_Departure_Date);
PARAMETER(DTL.Truck_Departure_Time);
PARAMETER(DTL.Adjusted_Departure_Date);
PARAMETER(DTL.Adjusted_Departure_Time);
PARAMETER(DTL.Shipping_Line);
PARAMETER(DTL.Port_Delv_Terminal);
PARAMETER(DTL.Vessel_Name);
PARAMETER(DTL.Voyage);
PARAMETER(DTL.Sail_Date);
PARAMETER(DTL.Booking_Number);
PARAMETER(DTL.Discharge_Port);
PARAMETER(DTL.Arrival_Date);
PARAMETER(DTL.Container_Number);
PARAMETER(DTL.Date_In);
PARAMETER(DTL.Time_In);
PARAMETER(DTL.Date_Out);
PARAMETER(DTL.Time_Out);
PARAMETER(DTL.Load_Total_Freight);
PARAMETER(DTL.Scheduled_Delivery_Date);
PARAMETER(DTL.LH_Unused_Sts);
PARAMETER(DTL.LH_Carrier_Payment_Sts);
PARAMETER(DTL.Bring_Back_Miles);
PARAMETER(DTL.Requested_Delivery_Date);
PARAMETER(DTL.Load_Acceptance_Flag);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.On_Yard_Date);
PARAMETER(DTL.On_Yard_Time);
PARAMETER(DTL.Deadline_Departure_Date);
PARAMETER(DTL.Deadline_Departure_Time);
PARAMETER(DTL.Load_Held_Over);
PARAMETER(DTL.Load_Held_Over_Reason);
PARAMETER(*MISSING);
PARAMETER(DTL.Ocean_BOL_Number);
PARAMETER(DTL.Express_Mail_Number);
PARAMETER(DTL.Express_Mail_Date);
PARAMETER(DTL.Load_Shag_Flag);
PARAMETER(DTL.Load_Wash_Flag);
PARAMETER(DTL.Product_Complete_Date);
PARAMETER(DTL.Product_Complete_Time);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(DTL.Load_Confirmation_Time);
PARAMETER(DTL.Load_Door_1);
PARAMETER(DTL.Override_Total_Load_Miles);
PARAMETER(DTL.Load_Door_2);
PARAMETER(DTL.Partial_Load);
PARAMETER(DTL.Load_Confirmation_Fax_Sts);
PARAMETER(DTL.Export_Load_USDA_OK);
PARAMETER(DTL.Late_Delivery_Email_Flag);
PARAMETER(DTL.Load_Actual_Freight);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(DTL.LH_On_Time_Reason_Code);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?***** Change Log and Comments
 DO;

 //?06/28/2006 LJB TRF011
 //?** Added 3 char LH On-Time Reason Code as an input parm to
 //?** replace the 1 char On Time Reason parm
 ENDDO;

}


