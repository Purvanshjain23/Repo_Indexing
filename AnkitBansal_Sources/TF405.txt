      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      Triumph Foods
      * PROGRAM:     TF405
      * TITLE:       Work with Cash Distribution Headers
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     05/19/05
      *
      * FUNCTION: This is a Work With that displays the records in the Cash Distribution
      *           Header file.
      *
      *           There is a "View-Only" version of this Work With. Calling the Work With
      *           with a value of "V" in the parm gives you View-Only. Calling with a
      *           parm value of "blank" gives you the Full Version.
      *
      *           Restrictors:
      *               None
      *
      *           Positioners:
      *               Daily date       (descending)
      *
      *           Selectors:
      *               Batch number
      *               Status
      *               Year
      *               Week
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 05/06/08  LeAnne Ramsey
      *           Add F7=Listing to print new Cash Distribution Report.
      *
      * 05/11/09  LeAnne Ramsey
      *           Changed the Print logic to match Meat Costing.
      *
      * 10/14/09  LeAnne Ramsey
      *           Recompile only.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATION
      ****************************************************************
      *
     Ftfd405    cf   e             workstn sfile(tf405s1:hdrrn1)
     F                                     infds(iofeed)
      *
      *
     Ftfp012    uf   e           k disk    prefix(p1)
      *    Cash distribution header
      *
      *
     Ftfl012a   if   e           k disk    rename(chrec:chreca)
      *    Cash distribution header
      *
      *
     Ftfl012c   if   e           k disk    rename(chrec:chrecc) prefix(p2)
      *    Cash distribution header
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D create          c                   'CREATE'
     D revise          c                   'REVISE'
     D delete          c                   'DELETE'
     D view            c                   'VIEW  '
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  Compile time array for SBMJOB used in QCMDEXC
      *---------------------------------------------------------------
     D cmd             s              1    dim(80) ctdata perrcd(80)
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D maxmsg          s              2  0  inz(20)
     D routne          s              6
     D maxrrn          s              4  0
     D reset           s              1    inz('N')
     D norecs          s              1    inz('N')
     D count           s              2  0
     D wkflow          s                   like(idflow)
     D rtncd           s              2    inz('00')
     D svrrn1          s                   like(hdrrn1)
      *
      *
      *  Parms for use with QCMDEXC.  'LENGTH' is the length of the
      *  command that will be issued with QCMDEXC.  QCMDEXC requires
      *  the field containing length to be defined as 15 with 5 decimal
      *  positions.  The field 'CMDSBM' will hold the values of the
      *  submit job command when passed as a parm on the call to
      *  QCMDEXC.
      *
     D length          s             15  5 inz(80)
     D cmdsbm          s             80
      *
      *
      * Workfields required for subfile paging--see initialization
      * subroutine.
      *
     D wkplin          s              2  0
     D wkrlin          s              2  0
      *
      *
      * Control fields
      *
     D version         s              1
      *
      *
      * Save fields for restrictors, positioners and selectors
      *
     D svdmdy          s                   like(c1dmdy)
     D svyr            s                   like(chyr)
     D svwk            s                   like(chwk)
     D svchstcd        s                   like(chchstcd)
     D svbtsn          s                   like(chbtsn)
      *
      *
      * Parm fields
      *
     D xxstcd          s              1
     D xxstds          s             10
      *
      *
      *
      * Workfields for date manipulation
      *
     D wkisodate       s               D   datfmt(*iso)
     D wkddt           s                   like(chddt)
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      * Standard subfile option conversion
      *---------------------------------------------------------------
     D                 ds                  inz
     D d1opt                          2
     D   wkopt1                       1    overlay(d1opt)
     D   wkopt2                       1    overlay(d1opt:2)
      *
      *---------------------------------------------------------------
      *  LDA
      *---------------------------------------------------------------
      *
     Dlda             uds                  dtaara(*lda)
     D  ldbtsn                 1      7  0
     D  ldtask                 8     13
      *
     D  lddsfl                14     14
     D  lddsds                15     21
      *
     D  ldoutq               401    410
     D  ldhold               411    414
     D  ldsave               415    418
     D  ldcopy               419    419  0
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * Clear and fill the subfile
      *
     C                   exsr      $clr1
     C                   exsr      $frsh1
      *
      * Set routine to display screen
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * There is a View-Only version of this function. So, if you aren't
      * in the View Version, set on an indicator to enable keys/etc.
      *
     C                   select
     C                   when      version = 'V'
     C                   other
     C                   seton                                        89
     C                   endsl
      *
      * Write screen 1 to crt
      *
     C                   write     tf405k1
     C                   write     tf405ec
     C                   exfmt     tf405c1
      *
      * Save the value of the lowest subfile rrn on the screen for
      * later repositioning of the subfile
      *
     C                   eval      wkflow = idflow
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
     C                   exsr      $chksv
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   movel     yes           reset
     C                   eval      routne = set1
      *
     C                   when      *in06 = *on                                  F6-create
     C                   exsr      $creat
     C                   z-add     wkflow        hdpag1
     C                   eval      routne = scrn1
      *
     C                   when      *in07 = *on                                  F7-listing
     C                   call      'TF4052'
     C                   parm                    c1dmdy
     C                   parm                    c1dmdy
     C                   parm      *blank        rtncd
      *
     C                   when      *in17 = *on                                  F17-print opt
     C                   call      'RO890'
     C                   eval      routne = scrn1
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                       API
     C                   z-add     wkflow        hdpag1
     C                   eval      routne = scrn1
      *
      * Reposition the subfile if the user has changed any of the positioners
      * or selectors in the control record.
      *
     C                   when      svdmdy  <> c1dmdy  or                         Selections
     C                             svyr    <> c1yr    or
     C                             svwk    <> c1wk    or
     C                             svchstcd <> c1chstcd or
     C                             svbtsn  <> c1btsn
     C                   exsr      $chksv
      *
     C                   when      *in25 = *on                                  F25-rollup
     C                   exsr      $load1
     C                   other
      *
      * User has pressed enter
      *
     C                   if        norecs = yes                                 If empty sfl
     C                   eval      routne = set1
     C                   else
     C                   eval      routne = edit1
     C                   endif                                                  If empty sfl
     C                   endsl
      *
      * Bring in the LDA to pick up any printer changes the user may
      * have made from called programs
      *
     C                   in        lda
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Save the control record positioners/selectors
      *----------------------------------------------------------------
      *
     C     $chksv        begsr
      *
     C                   movel     no            reset
     C                   eval      routne = set1
      *
     C                   move      c1chstcd      svchstcd
     C                   z-add     c1yr          svyr
     C                   z-add     c1wk          svwk
     C                   z-add     c1btsn        svbtsn
      *
     C                   z-add     c1dmdy        svdmdy
      *
      * Flip date selector from mmddyy to ccyymmdd format
      *
     C     *mdy          test(d)                 c1dmdy                 92
     C                   if        *in92 = *on                                  If bad date
     C                   z-add     0             wkddt
     C                   else
     C     *mdy          move      c1dmdy        wkisodate
     C                   move      wkisodate     wkddt
     C                   endif                                                  If bad date
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Edit input fields for screen 1
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * First, edit all the selections entered by the user in the
      * subfile option field to see that valid selections were input
      *
     C                   exsr      $edop1
      *
      * If there are no errors in the subfile option selectors entered
      * by the user, then execute the subroutine to reread and process
      * the records selected by the user.  After completing the
      * subroutine, set the routine to start over.
      *
     C                   if        error = 0                                    If no error
     C                   exsr      $proc1
      *
     C                   if        rtncd = '00'
     C                   eval      routne = set1
     C                   else
     C                   eval      hdpag1 = wkflow
     C                   eval      routne = scrn1
     C                   endif
      *
      * else there were errors in the subfile options entered,
      * so set to redisplay screen with errors to user
      *
     C                   else
     C                   eval      routne = scrn1
     C                   endif                                                  If no error
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Clear subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $clr1         begsr
      *
     C                   z-add     0             svrrn1
      *
     C                   clear                   tf405s1
     C                   seton                                        83        sflclr
     C                   write     tf405c1
     C                   setoff                                       818283
      *                                                    81=sfldsp
      *                                                    82=sflend
      *                                                    83=sflclr
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Refresh/fill the subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $frsh1        begsr
      *
      * Set position in file
      *
     C                   if        c1dmdy = 0
     C     *hival        setll     tfl012a
     C                   else
     C     wkddt         setll     tfl012a
     C                   endif
      *
      *
      * The field 'reset' is a flag field to indicate whether you are
      * attempting to reposition the user close to where he was in the
      * subfile.
      * The lowest subfile RRN on the screen from the DSPF feedback
      * area (IDFLOW) was retrieved earlier and put in WKFLOW.
      * Add to WKFLOW the number of lines on your subfile page or the
      * number less 1 to determine a subfile RRN to reposition to.
      *
      *
     C                   if        reset = yes
     C                   eval      maxrrn = wkflow + wkrlin
     C                   else
      *
      * Don't try to reposition the user, just start the subfile over
      *
     C                   eval      maxrrn = wkplin
     C                   endif
      *
      * Load the subfile until you have the required number of records.
      * The number will depend on whether uou are repositioning the
      * subfile or not. Stop if you get to the end of the subfile.
      *
     C                   dou       svrrn1 >= maxrrn or *in82 = *on
     C                   exsr      $load1
     C                   enddo
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Load subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $load1        begsr
      *
     C                   z-add     svrrn1        hdrrn1
      *
      * Set the count of records on the subfile page to zero.
      *
     C                   z-add     0             count
      *
      * Fill the subfile until the end of the database file or
      * you have filled all the lines on the subfile page.
      *
     C                   setoff                                       82
     C                   dou       *in82 = *on or count >= wkplin               Do fill
     C                   read      tfl012a                                82
     C                   if        *in82 = *off                                 If read
      *
      * Only include records that match the user's selectors
      *
     C                   if        c1yr <> 0 and                                 If year
     C                             c1yr <> chyr
     C                   else
      *
     C                   if        c1wk <> 0 and                                 If week
     C                             c1wk <> chwk
     C                   else
      *
     C                   if        c1chstcd <> *blank and                        If status
     C                             c1chstcd <> chchstcd
     C                   else
      *
     C                   if        c1btsn <> 0 and                               If batch nbr
     C                             c1btsn <> chbtsn
     C                   else
      *
     C                   add       1             count
     C                   add       1             hdrrn1
     C                   move      *blank        d1opt
     C                   z-add     chyr          d1yr
     C                   z-add     chwk          d1wk
     C                   move      chchstcd      d1chstcd
     C                   z-add     chbtsn        d1btsn
     C                   z-add     chcpam        d1cpam
      *
      * Daily date
      *
     C     *iso          test(d)                 chddt                  92
     C                   if        *in92 = *off                                 If OK daily
     C                   move      chddt         wkisodate
     C     *mdy          move      wkisodate     d1dmdy
     C                   endif                                                  If OK daily
      *
      *
      * Week-beginning date
      *
     C     *iso          test(d)                 chwbdt                 92
     C                   if        *in92 = *off                                 If OK begin
     C                   move      chwbdt        wkisodate
     C     *mdy          move      wkisodate     d1wbmdy
     C                   endif                                                  If OK begin
      *
      *
      * Week-ending date
      *
     C     *iso          test(d)                 chwedt                 92
     C                   if        *in92 = *off                                 If OK end
     C                   move      chwedt        wkisodate
     C     *mdy          move      wkisodate     d1wemdy
     C                   endif                                                  If OK end
      *
     C                   write     tf405s1
     C                   seton                                        81
      *
      * For positioning, place the subfile relative record number into
      * the sflrcdnbr field (hdpag1)
      *
     C                   z-add     hdrrn1        hdpag1
      *
     C                   endif                                                  If batch nbr
     C                   endif                                                  If status
     C                   endif                                                  If week
     C                   endif                                                  If year
     C                   endif                                                  If read
     C                   enddo                                                  Do fill loop
      *
      * If no records were written to the subfile, then issue
      * the standard message 'No data to Display'.
      *
     C                   if        hdrrn1 = 0                                   If no recs
     C                   movel     yes           norecs
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09002'
     C                   endif
      *
     C                   else
     C                   movel     no            norecs
     C                   endif                                                  If no recs
      *
     C                   z-add     hdrrn1        svrrn1
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Call the maintenance program when the user takes F6
      *---------------------------------------------------------------
      *
     C     $creat        begsr
      *
     C                   call      'TF105'
     C                   parm      create        mode
     C                   parm      0             d1btsn
     C                   parm      '00'          rtncd
      *
     C                   endsr
      /EJECT
      *-------------------------------------------------------------------------------
      * Read and edit changed subfile records for valid subfile options on Screen 1
      *-------------------------------------------------------------------------------
      *
     C     $edop1        begsr
      *
     C                   z-add     0             error
      *
      * Read all changed subfile records, editing for valid options
      *
     C                   setoff                                       80
     C                   dou       *in80 = *on                                  Do readc
     C                   readc     tf405s1                                80
     C                   if        *in80 = *off                                 If rec read
      *
      * Set off error indicator for subfile option field
      *
     C                   setoff                                       30
      *
      * Convert option user entered to standard format. For example,
      * a ' 1', '01', and '1 ' must be standardized to ' 1'.
      *
     C                   if        wkopt2 = *blank                              If 2 = blank
     C                   eval      wkopt2 = wkopt1
     C                   eval      wkopt1 = *blank
     C                   endif                                                  If 2 = blank
      *
     C                   if        wkopt1 = *zero                               If 1 is zero
     C                   eval      wkopt1 = *blank
     C                   endif                                                  If 1 is zero
      *
      * Test for valid subfile option entry on all changed records
      *
     C                   if        d1opt <> ' 2' and                            If bad opt
     C                             d1opt <> ' 4' and
     C                             d1opt <> ' 5' and
     C                             d1opt <> ' 6' and
     C                             d1opt <> ' 7' and
     C                             d1opt <> '10' and
     C                             d1opt <> '  '
     C                   seton                                        3085
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09006'
     C                   exsr      $err1
     C                   endif
     C                   else
      *
      *
      * Make additional checks for all options except "View" and "Print".
      * (These checks require the latest values for the Header record.)
      *
     C                   select
     C                   when      d1opt = ' 5' or d1opt = ' 6'
      *
     C                   when      d1opt <> *blank
     C     d1btsn        chain(n)  tfp012                             92
     C                   if        *in92 = *off                                 If header hit
      *
     C                   exsr      $opt
      *
     C                   if        d1opt = ' 4'
     C                   exsr      $opt4
     C                   endif
      *
     C                   if        d1opt = '10'
     C                   exsr      $opt10
     C                   endif
     C                   endif                                                  If header hit
     C                   endsl
     C                   endif                                                  If bad opt
      *
      * Rewrite the subfile record with the modified data tag on so it
      * will be reread and processed.
      *
     C                   if        error = 0 and d1opt = *blank
     C                   setoff                                       85
     C                   else
     C                   seton                                        85
     C                   endif
      *
     C                   update    tf405s1
     C                   setoff                                       8530
     C                   endif                                                  If rec read
     C                   enddo                                                  Do readc
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------------------------------
      * More Option edits.
      *---------------------------------------------------------------------------------------
      * You cannot do anything with the record when:
      *   1) the status is Posted
      *   2) it has been submitted for posting
      *
     C     $opt          begsr
      *
     C                   select
      * Posted
     C                   when      p1chchstcd = 'P'
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08056'
     C                   exsr      $err1
     C                   endif
     C                   other
      *
      * Submitted
     C                   if        p1chsbfl <> *blank                           If submitted
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08057'
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If submitted
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------------------------------
      * Option 4 edits
      *---------------------------------------------------------------------------------------
      * If you are deleting:
      *   1) the status cannot be Assigned  (You've already checked for Posted)
      *
     C     $opt4         begsr
      *
     C                   if        p1chchstcd = 'A'
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08058'
     C                   exsr      $err1
     C                   endif
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------------------------------
      * Option 10 edits
      *---------------------------------------------------------------------------------------
      * If you are "posting"
      *   1) the status cannot be Open
      *   2) the bank and deposit dollars must match
      *
     C     $opt10        begsr
      *
      * Cannot be in Open status
      *
     C                   if        p1chchstcd = 'O'
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08059'
     C                   exsr      $err1
     C                   endif
     C                   endif
      *
      * Deposit and Bank Prior Day Cash must be equal
      *
     C                   if        p1chdpdccam <> p1chbpdccam
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08063'
     C                   exsr      $err1
     C                   endif
     C                   endif
      *
      * Deposit and Bank Current Day Cash must be equal
      *
     C                   if        p1chdcdccam <> p1chbcdccam
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08062'
     C                   exsr      $err1
     C                   endif
     C                   endif
      *
      *
      * All headers with prior dates must be already posted.
      *
     C     p1chddt       setll     tfl012c
     C                   readp     tfl012c                                92
     C                   if        *in92 = *off
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08065'
     C                   exsr      $err1
     C                   endif
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Read subfile records and process user selections for Screen 1
      *---------------------------------------------------------------
      *
     C     $proc1        begsr
      *
     C                   z-add     0             error
     C                   movel     '00'          rtncd
      *
      * Read all the changed subfile records processing the subfile
      * selection
      *
     C                   setoff                                       80
     C                   dou       *in80 = *on                                  Do process
     C                   readc     tf405s1                                80
     C                   if        *in80 = *off                                 If rec read
      *
     C                   if        rtncd = '00'                                 If enter
      *
     C                   select
      * Revise
     C                   when      d1opt = ' 2'
     C                   movel     yes           reset
     C                   call      'TF105'
     C                   parm      revise        mode
     C                   parm                    d1btsn
     C                   parm                    rtncd
      *
      * Delete
     C                   when      d1opt = ' 4'
     C                   movel     yes           reset
     C                   call      'TF105'
     C                   parm      delete        mode
     C                   parm                    d1btsn
     C                   parm                    rtncd
      *
      * View
     C                   when      d1opt = ' 5'
     C                   movel     yes           reset
     C                   call      'TF705'
     C                   parm                    d1btsn
     C                   parm                    rtncd
      *
      * Print Cash Distribution Batch Report
      *
     C                   when      d1opt = ' 6'
     C                   movel     yes           reset
     C                   call      'TF4051'
     C     ldbtsn        parm                    d1btsn
     C                   parm      *blank        lddsfl
     C                   parm      *blank        lddsds
     C                   parm      *blank        rtncd
     C                   parm                    ldoutq
     C                   parm                    ldhold
     C                   parm                    ldsave
     C                   parm                    ldcopy
      *
     C                   if        rtncd = '08'
     C                   exsr      $list
     C                   endif
      *
      * Assign/Unassign Deposits
      *
     C                   when      d1opt = ' 7'
     C                   movel     yes           reset
     C                   call      'TF106'
     C                   parm                    d1btsn
     C                   parm                    d1chstcd
     C                   parm                    rtncd
      *
      * Post
     C                   when      d1opt = '10'
     C                   movel     yes           reset
     C                   call      'TF4050'
     C     ldbtsn        parm                    d1btsn
     C                   parm      *blank        rtncd
     C                   parm                    ldoutq
     C                   parm                    ldhold
     C                   parm                    ldsave
     C                   parm                    ldcopy
      *
     C                   if        rtncd = '08'
     C                   exsr      $list
     C                   endif
     C                   endsl
      *
      * Upon returning from the called program,
      * clear the subfile option selected by the user and rewrite
      * the subfile record.
      *
     C                   move      *blank        d1opt
     C                   setoff                                       85
     C                   else
     C                   seton                                        85
     C                   endif                                                  If enter
      *
     C                   update    tf405s1
      *
     C                   endif                                                  If rec read
     C                   enddo                                                  Do process
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Print listing
      *---------------------------------------------------------------
      *
     C     $list         begsr
      *
     C                   move      *blank        ldtask
      *
      *
      * Cash Distribution Batch Report
      *
     C                   select
     C                   when      d1opt = ' 6'
     C                   move      'BATCH '      ldtask
     C                   movea     'CDBATCHRPT'  cmd(35)
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09003'
     C                   endif
      *
      * Post
     C                   when      d1opt = '10'
     C                   move      'POST  '      ldtask
     C                   movea     'CASHPOST  '  cmd(35)
     C     d1btsn        chain     tfp012                             92
     C                   if        *in92 = *off
     C                   move      yes           p1chsbfl
     C                   update    chrec
     C                   endif
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08068'
     C                   endif
     C                   endsl
      *
     C                   out       lda
      *
      * Move the 80-character compile time array 'CMD' to an
      * 80-character field for passing as a parm with QCMDEXC.
      *
     C                   movea     cmd           cmdsbm
     C                   call      'QCMDEXC'
     C                   parm                    cmdsbm
     C                   parm                    length
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * F4 prompt on screen 1
      *---------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      * Status code
     C                   select
     C                   when      fld = 'C1CHSTCD'
     C                   call      'TF512'
     C                   parm      *blank        xxstcd
     C                   parm      *blank        xxstds
     C                   seton                                        52
     C                   if        xxstcd   <> *blank
     C                   move      xxstcd        c1chstcd
     C                   endif
     C                   other
      *
      * F4 not valid for this field...issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error                                        013
     C                   movel     'HS09011'     mgid(e)
     C                   endif
      *
     C                   endsl
      *
     C                   endsr
      /EJECT
      *-------------------------------------------------------------------------------------
      * Set the subfile to redisplay at the first page that has errors on Screen 1
      *-------------------------------------------------------------------------------------
      *
     C     $err1         begsr
      *
     C                   if        error = 1
     C                   eval      hdpag1 = hdrrn1
     C                   endif
      *
     C                   endsr
      *
      *---------------------------------------------------------------
      * Set on last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      *
      /EJECT
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *
     C     *entry        plist
     C                   parm                    version
      *
      * Key lists
      *   none
      *
      * Retrieve/initialize "printer" fields in the LDA
      *
     C                   call      'RO891CL'
     C                   in        lda
      *
      * Initialize LDA fields
      *
     C                   z-add     0             ldbtsn
     C                   out       lda
      *
      *
      * To support F5-Refresh, logic requires the number of lines on
      * the subfile page and also the number of lines less 1.  By
      * setting these values up as constant work fields, the processing
      * logic can be standardized between programs.
      *
     C                   z-add     11            wkplin                         sflpag
     C     wkplin        sub       1             wkrlin                         sflpag - 1
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
      *****************************************************************
      * COMPILE TIME ARRAY 'CMD' USED IN QCMDEXC
      *****************************************************************
** CMD table 'CMD' submits listing
SBMJOB CMD(CALL PGM(TF405CL)) JOB(CASHDISTRI) JOBQ(*JOBD)
