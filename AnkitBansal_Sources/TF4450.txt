      *****************  RPG PROGRAM HEADING  ************************
     h option(*SRCSTMT:*NODEBUGIO)
      ****************************************************************
      *
      * SYSTEM:      Triumph Foods
      * PROGRAM:     TF4450
      * TITLE:       Margin: Specify Product Split Listing Optioins
      * PROGRAMMER:  LeAnne Ramsey
      * CREATED:     10/10/06
      *
      * FUNCTION: Allows user to enter listing options and submit job.
      *
      * NOTE:    This is a pop-up window program.  Please note that in window
      *          programs the record format containing the window definition
      *          must be written first.  So, we write the error message subfile
      *          control record first followed by the command line record format.
      *          This is opposite of the non-window programs.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 12/01/06  LeAnne Ramsey
      *           Added "period" parm to call to generic calendar program
      *           TF811.
      *
      * 05/02/07  LeAnne Ramsey
      *           Recompile only. Synon file PPAMREP was changed.
      *
      * 05/06/09  LeAnne Ramsey
      *           Changed the Print logic to match Meat Costing.
      *
      * 06/04/10  LeAnne Ramsey
      *           Switched from From/To Date selections to a CutOff Effective Date
      *           selection.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Ftfd4450   cf   e             workstn infds(iofeed)
      *
      *
     Ftfl045c   if   e           k disk
      *   Product splits
      *
      *
     Fombyrel0  if   e           k disk
      *    Item default
      *
      *
     Fome8rel0  if   e           k disk
      *    Product type
      *
      *
     Fppamrel1  if   e           k disk
      *    TF Classification
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  Compile time array for SBMJOB used in QCMDEXC
      *---------------------------------------------------------------
     D cmd             s              1    dim(80) ctdata perrcd(80)
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D rtncd           s              2
     D maxmsg          s              2  0  inz(20)
      *
      *
      * Workfields for date manipulation
      *
     D wkcymdiso       s               d   datfmt(*iso)
      *
      *
      * Parms
      *
     D xxalphprcd      s              7
     D xxprcd          s                   like(d1prcd)
     D xxprds          s             30
      *
     D xxistycd        s                   like(d1istycd)
     D xxistyds        s             30
     D xxalphtycd      s              3
      *
     D xxtfclcd        s                   like(d1tfclcd)
     D xxtfclds        s             30
      *
     D xxtfcgcd        s                   like(d1tfcgcd)
     D xxtfcgds        s             15
      *
     D xxaist          s                   like(d1aist)
      *
     D xxcmdy          s              6  0
      *
      *
      *  Parms for use with QCMDEXC.  'LENGTH' is the length of the
      *  command that will be issued with QCMDEXC.  QCMDEXC requires
      *  the field containing length to be defined as 15 with 5 decimal
      *  positions.  The field 'CMDSBM' will hold the values of the
      *  submit job command when passed as a parm on the call to
      *  QCMDEXC.
      *
     D length          s             15  5 inz(80)
     D cmdsbm          s             80
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      *  LDA
      *---------------------------------------------------------------
      *
     Dlda             uds                  dtaara(*lda)
      *
     D  ldccymd               15     22  0
     D  ldcmdy                23     28  0
      *
     D  ldprcd                29     35  0
     D  ldistycd              36     38  0
     D  ldtfcgcd              39     40
     D  ldtfclcd              41     43
      *
     D  ldaist                44     44
      *
     D  ldistyds              50     79
     D  ldtfcgds              80     94
     D  ldtfclds              95    124
     D  ldprds               125    154
      *
     D  ldoutq               401    410
     D  ldhold               411    414
     D  ldsave               415    418
     D  ldcopy               419    419  0
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /eject
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo
      /eject
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      *  Set routine to display screen
      *
     C                   move      scrn1         routne
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to CRT.
      *
     C                   write     tf4450ec
     C                   write     tf4450k1
     C                   exfmt     tf4450r1
      *
      * Clear messages
     C                   exsr      $clmsg
      *
      * Get user's input and set routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      rtncd = '03'
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
      *
     C                   when      *in08 = *on                                  F8-submit
     C                   exsr      $edit1
     C                   if        error = 0
     C                   exsr      $proc1
     C                   endif
      *
     C                   when      *in17 = *on                                  F17-print opt
     C                   call      'RO890'
     C                   eval      routne = scrn1
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                       API
     C                   eval      routne = scrn1
     C                   other
      *
     C                   exsr      $edit1
     C                   eval      routne = scrn1
     C                   endsl
      *
      *
      * Bring in the LDA to pick up any printer changes the user may
      * have made from called programs
      *
     C                   in        lda
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Edit screen 1
      *---------------------------------------------------------------
      *
      * Validate:
      *  1) From date
      *  2) To date
      *  3) Product code
      *  4) Item structure type code
      *  5) TF class group code
      *  6) TF classification code
      *  7) Active/inactive status
      *
     C     $edit1        begsr
      *
     C                   exsr      $cmdy
     C                   exsr      $prcd
     C                   exsr      $istycd
     C                   exsr      $tfcgcd
     C                   exsr      $tfclcd
     C                   exsr      $aist
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate CutOff Effective Date
      *----------------------------------------------------------------
      *
     C     $cmdy         begsr
      *
     C                   z-add     0             ldccymd
      *
     C                   select
     C                   when      d1cmdy = 0
      *
     C                   when      d1cmdy < 0
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   other
      *
     C     *mdy          test(d)                 d1cmdy                 92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
     C     *mdy          move      d1cmdy        wkcymdiso
     C                   move      wkcymdiso     ldccymd
     C                   endif                                                  If bad date
      *
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate Product
      *----------------------------------------------------------------
      *
     C     $prcd         begsr
      *
     C                   move      *blank        ldprds
      *
     C                   select
     C                   when      d1prcd = 0
      *
     C                   when      d1prcd < 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   endif
     C                   other
      *
     C     d1prcd        chain     ombyrel0                           92
     C                   if        *in92 = *off                                 If OK
     C                   move      byavna        ldprds
     C                   else
      *
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08006'     mgid(e)
     C                   clear                   mgw
     C                   move      d1prcd        xxalphprcd
     C                   movea     xxalphprcd    mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If OK
     C                   endsl
      *
     C                   endsr
      /eject
      *------------------------------------------------------------------------------------
      * Validate Item Structure Type code
      *------------------------------------------------------------------------------------
      *
     C     $istycd       begsr
      *
     C                   move      *blank        ldistyds
      *
     C                   select
     C                   when      d1istycd = 0
      *
     C                   when      d1istycd < 0
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   endif
     C                   other
      *
     C     d1istycd      chain     ome8rel0                           92
     C                   if        *in92 = *off                                 If OK
     C                   move      e8dctx        ldistyds
     C                   else
      *
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08003'     mgid(e)
     C                   clear                   mgw
     C                   move      d1istycd      xxalphtycd
     C                   movea     xxalphtycd    mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If OK
     C                   endsl
      *
     C                   endsr
      /eject
      *------------------------------------------------------------------------------------
      * Validate TF Class Group Code
      *------------------------------------------------------------------------------------
      *
     C     $tfcgcd       begsr
      *
     C                   move      *blank        ldtfcgds
      *
     C                   if        d1tfcgcd <> *blank                           If something
      *
     C                   call      'TF804'
     C                   parm      d1tfcgcd      xxtfcgcd
     C     ldtfcgds      parm      *blank        xxtfcgds
      *
     C                   if        xxtfcgds = *blank                            If bad
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08013'     mgid(e)
     C                   endif
     C                   endif                                                  If bad
     C                   endif                                                  If something
      *
     C                   endsr
      /eject
      *------------------------------------------------------------------------------------
      * Validate TF Classification Code
      *------------------------------------------------------------------------------------
      *
     C     $tfclcd       begsr
      *
     C                   move      *blank        ldtfclds
      *
     C                   if        d1tfclcd <> *blank                           If entered
      *
     C     d1tfclcd      chain     ppamrel1                           92
     C                   if        *in92 = *off                                 If hit
     C                   move      amq0na        ldtfclds
     C                   else
      *
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08012'     mgid(e)
     C                   clear                   mgw
     C                   movea     d1tfclcd      mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If invalid
     C                   endif                                                  If hit
      *
     C                   endsr
      /eject
      *------------------------------------------------------------------------------------
      * Validate Active/Inactive Status
      *------------------------------------------------------------------------------------
      *
     C     $aist         begsr
      *
     C                   select
     C                   when      d1aist = *blank or
     C                             d1aist = 'A' or d1aist = 'I'
      *
     C                   other
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09105'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Process user's request
      *---------------------------------------------------------------
      *
     C     $proc1        begsr
      *
      * Populate LDA fields.
      *
     C                   z-add     d1cmdy        ldcmdy
     C                   z-add     d1prcd        ldprcd
     C                   z-add     d1istycd      ldistycd
     C                   move      d1tfcgcd      ldtfcgcd
     C                   move      d1tfclcd      ldtfclcd
     C                   move      d1aist        ldaist
      *
     C                   out       lda
      *
      * Move the 80-character compile time array 'CMD' to an
      * 80-character field for passing as a parm with QCMDEXC.
      *
     C                   movea     cmd           cmdsbm
     C                   call      'QCMDEXC'
     C                   parm                    cmdsbm
     C                   parm                    length
      *
      * Issue the standard request submission message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09003'
     C                   endif
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command key record will be set on. So, redisplay the screen to the user.
      *
     C                   if        *in43 = *on
     C                   movel     set1          routne
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command key record will be set on. So, redispaly the screen to the user.
      *
     C                   if        *in43 = *on
     C                   movel     set1          routne
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Set on last record indicator and end job
      *----------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * F4 prompt on screen 1
      *---------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
     C                   select
      * Product
     C                   when      fld = 'D1PRCD'
     C                   call      'TF504'
     C                   parm      0             xxprcd
     C                   parm      *blank        xxprds
     C                   seton                                        51
     C                   if        xxprcd <> 0
     C                   z-add     xxprcd        d1prcd
     C                   endif
      *
      * Item Structure Type
      *
     C                   when      fld = 'D1ISTYCD'
     C                   call      'TF501'
     C                   parm      0             xxistycd
     C                   parm      *blank        xxistyds
     C                   seton                                        53
     C                   if        xxistycd <> 0
     C                   z-add     xxistycd      d1istycd
     C                   endif
      *
      * TF Class Group
      *
     C                   when      fld = 'D1TFCGCD'
     C                   call      'TF506'
     C                   parm      *blank        xxtfcgcd
     C                   parm      *blank        xxtfcgds
     C                   seton                                        54
     C                   if        xxtfcgcd <> *blank
     C                   move      xxtfcgcd      d1tfcgcd
     C                   endif
      *
      * TF Classification
      *
     C                   when      fld = 'D1TFCLCD'
     C                   call      'TF505'
     C                   parm      *blank        xxtfclcd
     C                   parm      *blank        xxtfclds
     C                   seton                                        55
     C                   if        xxtfclcd <> *blank
     C                   move      xxtfclcd      d1tfclcd
     C                   endif
      *
      * Active/inactive status
      *
     C                   when      fld = 'D1AIST'
     C                   seton                                        56
     C                   call      'HP512'
     C                   parm      *blank        xxaist
      *
     C                   if        xxaist <> *blank
     C                   move      xxaist        d1aist
     C                   endif
     C                   other
      *
      * F4 not valid for this field...issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error                                        013
     C                   movel     'HS09011'     mgid(e)
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *
     C     *entry        plist
     C     d1cmdy        parm                    xxcmdy
     C                   parm                    d1prcd
     C                   parm                    d1istycd
     C                   parm                    d1tfcgcd
     C                   parm                    d1tfclcd
     C                   parm                    d1aist
     C                   parm                    rtncd
      *
      *
      * Key lists
      *   None
      *
      * Retrieve/initialize "printer" fields in the LDA
      *
     C                   call      'RO891CL'
     C                   in        lda
      *
      * Initialize LDA fields
      *
     C                   z-add     0             ldcmdy
     C                   z-add     0             ldccymd
     C                   z-add     0             ldprcd
     C                   z-add     0             ldistycd
     C                   z-add     1             ldcopy
     C                   out       lda
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
      * This window logic keeps the screen in the calling program from being
      * cleared.
      *
     C                   write     assume
      *
     C                   endsr
      /eject
      *****************************************************************
      * COMPILE TIME ARRAY 'CMD' USED IN QCMDEXC
      *****************************************************************
** CMD table 'CMD' submits listing
SBMJOB CMD(CALL PGM(TF4450CL)) JOB(PRODSPLIT ) JOBQ(*JOBD)
