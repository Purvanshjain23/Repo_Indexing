// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDL0PFR
// ?Date: 14.08.2025 Time: 12:04:05
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?05/11/04 SLM PKTR01 Multi-Company - Order Header TRG Remove Co
//?                                    from Logical View
EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

//?05/13/04 RMC PKTR01 Multi-Company - Heading print control
// WRK.Print (Yes/No) USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

//?USER: Record selection processing

CASE;

// IF DB1.Load ID is 24036
IF DB1.Load_ID = 84511;

// WRK.Yes/No Selection      USR = CND.Yes
WRK.Yes_No_Selection_USR = 'Y';

ENDIF;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

//?Omit records not in requested date range
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?Compare Scheduled Ship Date to date range requested
CASE;

// IF DB1.Requested Delivery Date GE PAR.USR From Date
IF DB1.Requested_Delivery_Date >= PAR.USR_From_Date;

// AND DB1.Requested Delivery Date LE PAR.Scheduled Ship Date
AND DB1.Requested_Delivery_Date <= PAR.Scheduled_Ship_Date;

//?Compare Scheduled Ship Date to date range requested
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Select Shipping method Prepaid, and Buyer Trucks if gr wgt > 20000
CASE;

// IF DB1.Shipping Method is Prepaid
IF DB1.Shipping_Method = 'PR'/'PT';

//?Select Shipping method Prepaid, and Buyer Trucks if gr wgt > 20000
// IF DB1.Shipping Method is Buyers Truck
IF DB1.Shipping_Method = 'CR'/'CT';

// WRK.Gross Weight = CON.20000
WRK.Gross_Weight = 20000;

CASE;

// IF DB1.Gross Weight GT WRK.Gross Weight
IF DB1.Gross_Weight > WRK.Gross_Weight;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Select by load start company
CASE;

// IF PAR.Company Number is greater than zero
IF PAR.Company_Number > *ZERO;

// AND PAR.Company Number NE DB1.Company Number
AND PAR.Company_Number <> DB1.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select by Carrier
CASE;

// IF PAR.Carrier Code is entered
IF PAR.Carrier_Code <> *BLANK;

// AND PAR.Carrier Code NE DB1.Carrier Code
AND PAR.Carrier_Code <> DB1.Carrier_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select by Load Type
CASE;

// IF PAR.Load Type is Bulk or Regular
IF PAR.Load_Type = 'B'/'R';

// AND PAR.Load Type NE DB1.Load Type
AND PAR.Load_Type <> DB1.Load_Type;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select by Load Id
CASE;

// IF PAR.Load ID is GT Zero
IF PAR.Load_ID > *ZERO;

// AND PAR.Load ID NE DB1.Load ID
AND PAR.Load_ID <> DB1.Load_ID;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select by salesperson      RMC 1/2/2001
CASE;

// IF PAR.Salesperson Code is entered
IF PAR.Salesperson_Code <> *BLANK;

EXECUTE FUNCTION(RTV Chk Slsprsn on Ord RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1457946;
PARAMETER(DB1.Load_ID);
PARAMETER(PAR.Salesperson_Code);
PARAMETER(LCL.Record_Found_OrdDtlUSR);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(PAR.Salesperson_Code_1);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Salesperson Code EQ PAR.Salesperson Code 1
 IF PAR.Salesperson_Code = PAR.Salesperson_Code_1;

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF LCL.Record Found -OrdDtlUSR is Record Not Found
IF LCL.Record_Found_OrdDtlUSR = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Process top of page

// TOP.Company Number = PAR.Company Number
TOP_Company_Number = PAR.Company_Number;

// TOP.Scheduled Ship Date = PAR.Scheduled Ship Date
TOP_Scheduled_Ship_Date = PAR.Scheduled_Ship_Date;

// TOP.Load ID = PAR.Load ID
TOP_Load_ID = PAR.Load_ID;

// TOP.Load Type = PAR.Load Type
TOP_Load_Type = PAR.Load_Type;

// TOP.Load Type Desc = Condition name of TOP.Load Type
TOP_Load_Type_Desc = RTVCND(TOP_Load_Type);

// TOP.Carrier Code = PAR.Carrier Code
TOP_Carrier_Code = PAR.Carrier_Code;

//?Company Name    5/14/04
CASE;

// IF TOP.Company Number is greater than zero
IF TOP_Company_Number > *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(TOP_Company_Number);
PARAMETER(TOP_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Company Name    5/14/04
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Company Name = CON.*ALL
TOP_Company_Name = *ALL;

ENDIF;

//?Carrier description
CASE;

// IF PAR.Carrier Code is entered
IF PAR.Carrier_Code <> *BLANK;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(TOP_Carrier_Code);
PARAMETER(TOP_Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Carrier description
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Name = CON.*ALL
TOP_Name = *ALL;

ENDIF;

// TOP.Salesperson Code = PAR.Salesperson Code
TOP_Salesperson_Code = PAR.Salesperson_Code;

//?salesperson name
CASE;

// IF PAR.Salesperson Code is entered
IF PAR.Salesperson_Code <> *BLANK;

EXECUTE FUNCTION(RTV Salesperson Name   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1111501;
PARAMETER(TOP_Salesperson_Code);
PARAMETER(TOP_Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?salesperson name
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Salesperson Name = CON.*ALL
TOP_Salesperson_Name = *ALL;

ENDIF;

// TOP.USR U/M 1 = PAR.USR U/M 1
TOP_USR_U_M_1 = PAR.USR_U_M_1;

CASE;

// IF TOP.USR U/M 1 is EQ Boxes
IF TOP_USR_U_M_1 = 'BX';

// TOP.Condition Desc. 1  USR = CON.Boxes
TOP_Condition_Desc_1_USR = 'Boxes';

// IF TOP.USR U/M 1 is Combos
IF TOP_USR_U_M_1 = 'CB';

// TOP.Condition Desc. 1  USR = CON.Combos
TOP_Condition_Desc_1_USR = 'Combos';

// IF TOP.USR U/M 1 is Mixed
IF TOP_USR_U_M_1 = 'MX';

// TOP.Condition Desc. 1  USR = CON.Mixed
TOP_Condition_Desc_1_USR = 'Mixed';

// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Condition Desc. 1  USR = CON.*ALL
TOP_Condition_Desc_1_USR = *ALL;

ENDIF;

CASE;

// IF PAR.Text 1 Length USR is eq T
IF PAR.Text_1_Length_USR = 'T';

// TOP.Text USR 20 = CON.Transportation
TOP_Text_USR_20 = 'Transportation';

// IF PAR.Text 1 Length USR is Shipping
IF PAR.Text_1_Length_USR = 'S';

// TOP.Text USR 20 = CON.Shipping
TOP_Text_USR_20 = 'Shipping';

// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Text USR 20 = CON.All
TOP_Text_USR_20 = 'All';

ENDIF;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

CASE;

IF NEW Requested_Delivery_Date;
// SUPPRESSED PRINT Requested Delivery Date header format

ENDIF;

CASE;

IF NEW Carrier_Code;
// SUPPRESSED PRINT Carrier Code header format

ENDIF;

//?USER: On print of detail format

//?05/11/04 SLM PKTR01 Multi-Company - Function was changed
//?                                    to remove Company RST or Pos
// WRK.Print (Yes/No) USR = CND.No
WRK.Print_Yes_No_USR = 'N';

EXECUTE FUNCTION(RTV UM/Whs Code        RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1541555;
PARAMETER(1);
PARAMETER(CUR.Load_ID);
PARAMETER(CUR.USR_U_M_1);
{
 //?USER: Initialize routine

 // PAR.USR Unit of Measure = CON.*BLANK
 PAR.USR_Unit_of_Measure = *BLANK;

 // LCL.Boxes Total Quantity = CON.*ZERO
 LCL.Boxes_Total_Quantity = *ZERO;

 // WRK.First Time Flag = CND.Yes
 WRK.First_Time_Flag = 'Y';

 //?USER: Processing if Data record not found

 QUIT;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV UM/Whs Code,BX Qty RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1625244;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(1);
 PARAMETER(PAR.USR_Unit_of_Measure);
 PARAMETER(LCL.Boxes_Total_Quantity);
 {
  //?USER: Initialize routine

  // WRK.First Time Flag = CND.Yes
  WRK.First_Time_Flag = 'Y';

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  QUIT;

  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?S17054 DN 04/08/21-Beyond this point, changed all 'U/M - Ordered'
  //?  to reference LCL Context instead of DB1.
  //?S17054 DN 04/08/21-Count Type 'Cases' (CS) as 'Boxes' (BX).
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.U/M - Ordered = DB1.U/M - Ordered
  LCL.U_M_Ordered = DB1.U_M_Ordered;

  CASE;

  // IF LCL.U/M - Ordered is Cases
  IF LCL.U_M_Ordered = 'CS';

  // LCL.U/M - Ordered = CND.EQ Boxes
  LCL.U_M_Ordered = 'BX';

  ENDIF;

  ENDIF;

  //?Accumulate the Box Quantity for slotting consideration  6/12/01
  CASE;

  // IF LCL.U/M - Ordered is EQ Boxes
  IF LCL.U_M_Ordered = 'BX';

  // PAR.Boxes Total Quantity = PAR.Boxes Total Quantity + DB1.Quantity Ordered
  PAR.Boxes_Total_Quantity = PAR.Boxes_Total_Quantity + DB1.Quantity_Ordered;

  ENDIF;

  CASE;

  // IF PAR.USR Unit of Measure is *Blank
  IF PAR.USR_Unit_of_Measure = *BLANK;

  // PAR.USR Unit of Measure = LCL.U/M - Ordered
  PAR.USR_Unit_of_Measure = LCL.U_M_Ordered;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF LCL.U/M - Ordered EQ PAR.USR Unit of Measure
  IF LCL.U_M_Ordered = PAR.USR_Unit_of_Measure;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.USR Unit of Measure = CND.Mixed
  PAR.USR_Unit_of_Measure = 'MX';

  ENDIF;

  ENDIF;

  ENDIF;

 }

 //?If doing for one Order, because it isnt tied to a load yet
 CASE;

 // IF DB1.Load ID is Blank
 IF DB1.Load_ID = *ZERO;

 CASE;

 // IF PAR.USR Unit of Measure is Mixed
 IF PAR.USR_Unit_of_Measure = 'MX';

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(DB1.Company_Number);
 PARAMETER('BOXLOAD');
 PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
 IF LCL.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

 // PAR.USR Unit of Measure = CND.Combos
 PAR.USR_Unit_of_Measure = 'CB';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Unit of Measure = CND.Boxed
 PAR.USR_Unit_of_Measure = 'BX';

 ENDIF;

 ENDIF;

 QUIT;

 ENDIF;

 //?orig code
 //?USER: Exit processing

 CASE;

 // IF PAR.USR Unit of Measure is Mixed
 IF PAR.USR_Unit_of_Measure = 'MX';

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(DB1.Company_Number);
 PARAMETER('BOXLOAD');
 PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
 IF LCL.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

 // PAR.USR Unit of Measure = CND.Combos
 PAR.USR_Unit_of_Measure = 'CB';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Unit of Measure = CND.Boxed
 PAR.USR_Unit_of_Measure = 'BX';

 ENDIF;

 ENDIF;

}


//?SEL:  Unit of Measure
CASE;

// IF PAR.USR U/M 1 is Entered
IF PAR.USR_U_M_1 <> *BLANK;

CASE;

// IF CUR.USR U/M 1 NE PAR.USR U/M 1
IF CUR.USR_U_M_1 <> PAR.USR_U_M_1;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

ENDIF;

CASE;

// IF PGM.*Print format is Print format
IF PGM.*Print_format = 'Y';

//?This is also used in Carrier Performance Report !
EXECUTE FUNCTION(zzt Late Deliv/Perf    IF) TYPE(EXCINTFUN)                     AC1569525;
PARAMETER(CUR.Load_ID);
PARAMETER(CUR.Scheduled_Ship_Date);
PARAMETER(CUR.Load_Status);
PARAMETER(CUR.Carrier_Code);
PARAMETER(CUR.Shipping_Method);
PARAMETER(CUR.On_Time_Y_N);
PARAMETER(CUR.BOL_Complete_Date);
PARAMETER(CUR.BOL_Complete_Time);
PARAMETER(CUR.Truck_Departure_Date);
PARAMETER(CUR.Truck_Departure_Time);
PARAMETER(CUR.LH_Unused_Sts);
PARAMETER(CUR.Requested_Delivery_Date);
PARAMETER(CUR.Deadline_Departure_Date);
PARAMETER(CUR.Deadline_Departure_Time);
PARAMETER(*MISSING);
PARAMETER(PAR.USR_From_Date);
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(PAR.Record_Selected_USR);
PARAMETER(PAR.Number_of_Orders);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(PAR.USR_Counter);
PARAMETER(PAR.USR_Total_Qty_Ship_Ord);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(PAR.Total_Loads_Requested);
PARAMETER(CUR.USR_Blank_Field);
PARAMETER(CUR.USR_Description_18);
PARAMETER(CUR.BOL_Complete_Time4_0_USR);
PARAMETER(CUR.USR_Picked_Up_Time);
PARAMETER(CUR.USR_Carrier_Name_4);
PARAMETER(CUR.BOL_Complete_Date_MMDD);
PARAMETER(CUR.Deadline_Departure_MM_DD);
PARAMETER(CUR.Truck_Departure_MM_DD);
PARAMETER(CUR.Deadline_Depart_Time_40);
PARAMETER(PAR.Total_Loads_USR);
PARAMETER(2);
{
 //?Execute internal function

 //?Used by Late Delivery Report AND Carrier Performance Report
 // PAR.Record Selected       USR = CND.yes
 PAR.Record_Selected_USR = 'Y';

 EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.USR_Carrier_Name_4);
 PARAMETER(WRK.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

 // PAR.USR Blank Field = CON.*BLANK
 PAR.USR_Blank_Field = *BLANK;

 // PAR.USR Description 18 = Condition name of PAR.On Time Reason
 PAR.USR_Description_18 = RTVCND(PAR.LH_Unused_Sts);

 //?Shipping or Transportation Reason
 CASE;

 // IF PAR.On Time Reason is Shipping
 IF PAR.LH_Unused_Sts = 'P'/'O'/'H'/'S'/'K'/'L'/'I';

 // PAR.USR Blank Field = CON.S
 PAR.USR_Blank_Field = 'S';

 //?Shipping or Transportation Reason
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.On Time Reason is Transportation
 IF PAR.LH_Unused_Sts = 'D'/'M'/'R'/'W'/'E'/'T';

 // PAR.USR Blank Field = CON.T
 PAR.USR_Blank_Field = 'T';

 ENDIF;

 ENDIF;

 // PAR.BOL Complete Time,4.0 USR = PAR.BOL Complete Time / CON.100 *
 PAR.BOL_Complete_Time4_0_USR = PAR.BOL_Complete_Time / 100;

 // PAR.USR Picked Up Time = PAR.Truck Departure Time / CON.100 *
 PAR.USR_Picked_Up_Time = PAR.Truck_Departure_Time / 100;

 // PAR.Deadline Depart Time 4,0 = PAR.Deadline Departure Time / CON.100 *
 PAR.Deadline_Depart_Time_40 = PAR.Deadline_Departure_Time / 100;

 // PAR.BOL Complete Date MMDD = PAR.BOL Complete Date
 PAR.BOL_Complete_Date_MMDD = PAR.BOL_Complete_Date;

 // PAR.Deadline Departure MM/DD = PAR.Deadline Departure Date
 PAR.Deadline_Departure_MM_DD = PAR.Deadline_Departure_Date;

 // PAR.Truck Departure MM/DD = PAR.Truck Departure Date
 PAR.Truck_Departure_MM_DD = PAR.Truck_Departure_Date;

 // PAR.Total Loads Requested = PAR.Total Loads Requested + CON.1
 PAR.Total_Loads_Requested = PAR.Total_Loads_Requested + 1;

 //?**************************************************************************
 //?Accumulate Final Totals
 //?If Scheduled Ship Date is within date range, then add to these totals
 CASE;

 // IF PAR.Scheduled Ship Date GE PAR.USR From Date
 IF PAR.Scheduled_Ship_Date >= PAR.USR_From_Date;

 // AND PAR.Scheduled Ship Date LE PAR.USR Through Date
 AND PAR.Scheduled_Ship_Date <= PAR.USR_Through_Date;

 //?Total Loads Shipped
 CASE;

 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 // PAR.Number of Orders = PAR.Number of Orders + CON.1
 PAR.Number_of_Orders = PAR.Number_of_Orders + 1;

 ENDIF;

 //?Prepaid: Total Loads USR
 CASE;

 // IF PAR.Shipping Method is Prepaid
 IF PAR.Shipping_Method = 'PR'/'PT';

 // PAR.Total Loads USR = PAR.Total Loads USR + CON.1
 PAR.Total_Loads_USR = PAR.Total_Loads_USR + 1;

 ENDIF;

 //?Prepaid: Accumulate Loads Checked in USR Counter (not Collect) loads
 CASE;

 // IF PAR.On Time - (Y/N) is Y/N Values
 IF PAR.On_Time_Y_N = 'N'/'Y';

 // AND PAR.Shipping Method is Prepaid
 AND PAR.Shipping_Method = 'PR'/'PT';

 // PAR.USR Counter = PAR.USR Counter + CON.1
 PAR.USR_Counter = PAR.USR_Counter + 1;

 ENDIF;

 //?Buyers Truck: Accumulate Total Buyer Loads in USR Total Qty Shp/Ord.
 CASE;

 // IF PAR.Shipping Method is Buyers Truck
 IF PAR.Shipping_Method = 'CR'/'CT';

 // PAR.USR Total Qty Ship/Ord = PAR.USR Total Qty Ship/Ord + CON.1
 PAR.USR_Total_Qty_Ship_Ord = PAR.USR_Total_Qty_Ship_Ord + 1;

 ENDIF;

 //?Accumulate Reason 'S'hipped Totals
 CASE;

 // IF PAR.On Time Reason is Shipping
 IF PAR.LH_Unused_Sts = 'P'/'O'/'H'/'S'/'K'/'L'/'I';

 //?Accumulate 'Total Late Loads Shipped'
 CASE;

 // IF PAR.On Time - (Y/N) is no
 IF PAR.On_Time_Y_N = 'N';

 // PAR.Quantity Ordered 2 USR = PAR.Quantity Ordered 2 USR + CON.1
 PAR.Quantity_Ordered_2_USR = PAR.Quantity_Ordered_2_USR + 1;

 ENDIF;

 ENDIF;

 //?Accumulate Reason 'T'ransportion Totals
 CASE;

 // IF PAR.On Time Reason is Transportation
 IF PAR.LH_Unused_Sts = 'D'/'M'/'R'/'W'/'E'/'T';

 //?Accumulate 'Total Late Loads Shipped'
 CASE;

 // IF PAR.On Time - (Y/N) is no
 IF PAR.On_Time_Y_N = 'N';

 // PAR.Qty Ordered USR = PAR.Qty Ordered USR + CON.1
 PAR.Qty_Ordered_USR = PAR.Qty_Ordered_USR + 1;

 ENDIF;

 ENDIF;

 //?Accumulate Late Loads Shipped in USR Number
 CASE;

 // IF PAR.On Time - (Y/N) is no
 IF PAR.On_Time_Y_N = 'N';

 // PAR.USR number = PAR.USR number + CON.1
 PAR.USR_number = PAR.USR_number + 1;

 EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.USR_Carrier_Name_4);
 PARAMETER(WRK.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

 //?Accumulate Late Loads Shipped in USR Number
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Record Selected       USR = CND.no
 PAR.Record_Selected_USR = 'N';

 // PAR.USR Carrier Name 4 = CON.*BLANK
 PAR.USR_Carrier_Name_4 = *BLANK;

 EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.USR_Carrier_Name_4);
 PARAMETER(WRK.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

 ENDIF;

 //?If Scheduled Ship Date is within date range, then add to these totals
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Record Selected       USR = CND.no
 PAR.Record_Selected_USR = 'N';

 ENDIF;

}


//?Previous line commented out for call 6237.  The previous IF was added,
//?for the same call.  J. Tremper 3/31/1999
CASE;

// IF PAR.Record Selected       USR is no
IF PAR.Record_Selected_USR = 'N';

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR number = PAR.USR number + CON.1
PAR.USR_number = PAR.USR_number + 1;

ENDIF;

CASE;

// IF PAR.Record Selected       USR is yes
IF PAR.Record_Selected_USR = 'Y';

CASE;

// IF CUR.On Time Reason is Shipping
IF CUR.LH_Unused_Sts = 'P'/'O'/'H'/'S'/'K'/'L'/'I';

// PAR.Quantity Ordered 2 USR = PAR.Quantity Ordered 2 USR + CON.1
PAR.Quantity_Ordered_2_USR = PAR.Quantity_Ordered_2_USR + 1;

ENDIF;

CASE;

// IF CUR.On Time Reason is Transportation
IF CUR.LH_Unused_Sts = 'D'/'M'/'R'/'W'/'E'/'T';

// PAR.Qty Ordered USR = PAR.Qty Ordered USR + CON.1
PAR.Qty_Ordered_USR = PAR.Qty_Ordered_USR + 1;

ENDIF;

ENDIF;

//?**************************************************************************
ENDIF;

//?Select by On Time Reason grouping
CASE;

// IF PAR.Text 1 Length USR is Entered
IF PAR.Text_1_Length_USR <> *BLANK;

//?Transportation reasons
CASE;

// IF PAR.Text 1 Length USR is eq T
IF PAR.Text_1_Length_USR = 'T';

CASE;

// IF DB1.On Time Reason is Transportation
IF DB1.LH_Unused_Sts = 'D'/'M'/'R'/'W'/'E'/'T';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

ENDIF;

//?Shipping reasons
CASE;

// IF PAR.Text 1 Length USR is Shipping
IF PAR.Text_1_Length_USR = 'S';

CASE;

// IF DB1.On Time Reason is Shipping
IF DB1.LH_Unused_Sts = 'P'/'O'/'H'/'S'/'K'/'L'/'I';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

ENDIF;

ENDIF;

//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : PRT Late Delivery Rpt  PO
CASE;

// IF PAR.Record Selected       USR is yes
IF PAR.Record_Selected_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

QUIT;

ENDIF;

CASE;

// IF DB1.On Time - (Y/N) is yes
IF DB1.On_Time_Y_N = 'Y';

QUIT;

ENDIF;

CASE;

// IF PGM.*Print format is Do not print format
IF PGM.*Print_format = 'N';

QUIT;

ENDIF;

EXECUTE FUNCTION(PRT Late Delivery Rpt  PO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Load_ID);
PARAMETER(*ZERO);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?USER: Print required level totals

// SUPPRESSED PRINT Carrier Code totals format

// NXT.Quantity Ordered 2 USR = PAR.Quantity Ordered 2 USR
NXT.Quantity_Ordered_2_USR = PAR.Quantity_Ordered_2_USR;

// NXT.Qty Ordered USR = PAR.Qty Ordered USR
NXT.Qty_Ordered_USR = PAR.Qty_Ordered_USR;

// NXT.Number of Orders = PAR.Number of Orders
NXT.Number_of_Orders = PAR.Number_of_Orders;

// NXT.Total Loads Requested = PAR.Total Loads Requested
NXT.Total_Loads_Requested = PAR.Total_Loads_Requested;

// NXT.USR number = PAR.USR number
NXT.USR_number = PAR.USR_number;

// NXT.USR Counter = PAR.USR Counter
NXT.USR_Counter = PAR.USR_Counter;

// NXT.USR Total Qty Ship/Ord = PAR.USR Total Qty Ship/Ord
NXT.USR_Total_Qty_Ship_Ord = PAR.USR_Total_Qty_Ship_Ord;

// SUPPRESSED PRINT Requested Delivery Date totals format

//?USER: On print of final totals format

//?1/26/98 pll C3594 Changed %s to use Total Loads Requested, not Load Shp'd
//?          also changed to use computes
//?Calculate Reason 'S' Totals 'Percent On Time'
//?Calculate Reason "S" % on time
CASE;

// IF CUR.Total Loads Requested NE WRK.ZERO
IF CUR.Total_Loads_Requested <> WRK.ZERO;

// Calc "S" % On Time
CUR.USR_Percent_Work_7_2_1 = ( ( CUR.Total_Loads_Requested - CUR.Quantity_Ordered_2_USR )          +
/ CUR.Total_Loads_Requested 'H' ) * 100;

ENDIF;

//?Calculate Reason 'T' Totals 'Percent On Time'
//?Calculate Reason "T" % on time
CASE;

// IF CUR.Total Loads Requested NE WRK.ZERO
IF CUR.Total_Loads_Requested <> WRK.ZERO;

// Calc "T" % On Time
CUR.USR_Percent_Work_7_2_2 = ( ( CUR.Total_Loads_Requested - CUR.Qty_Ordered_USR )                 +
/ CUR.Total_Loads_Requested 'H' ) * 100;

ENDIF;

//?Calculate Final Totals 'Percent On Time'
//?3/25/98 call C4055 Changed Total % to be like S% and T%
//?Calculate final totals 'Percent On Time'
CASE;

// IF CUR.Total Loads Requested NE WRK.ZERO
IF CUR.Total_Loads_Requested <> WRK.ZERO;

// Calc "Total On Time"
CUR.USR_Percent_Work_7_2 = ( ( CUR.Total_Loads_Requested - CUR.USR_number )                        +
/ CUR.Total_Loads_Requested 'H' ) * 100;

ENDIF;

