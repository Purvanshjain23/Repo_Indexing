// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POONDFR
// ?Date: 14.08.2025 Time: 03:38:20
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// CTL.A/R Customer Number = PAR.A/R Customer Number
CTL.AR_Customer_Number = PAR.AR_Customer_Number;

EXECUTE FUNCTION(RTV Default Aging Code RT) TYPE(RTVOBJ) FILE(PMADCPP)          AC1801040;
PARAMETER(WRK.A_R_Aging_Code);
PARAMETER(WRK.A_R_Aging_Days_1);
PARAMETER(WRK.A_R_Aging_Days_2);
PARAMETER(WRK.A_R_Aging_Days_3);
PARAMETER(WRK.A_R_Aging_Days_4);
PARAMETER(WRK.Age_by_Trans_or_Due_Date);
PARAMETER(WRK.Default_Y_N);
PARAMETER(WRK.Record_Status);
{
 //?USER: Initialize routine

 // PAR.A/R Aging Code = CND.Not Entered
 PAR.A_R_Aging_Code = *BLANK;

 //?USER: Process Data record

 // PAR.A/R Aging Code = DB1.A/R Aging Code
 PAR.A_R_Aging_Code = DB1.A_R_Aging_Code;

 CASE;

 // IF DB1.Default Y/N is yes
 IF DB1.Default_Y_N = 'Y';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


// WRK.USR Age Heading A = WRK.A/R Aging Days - 1 + CON.1
WRK.USR_Age_Heading_A = WRK.A_R_Aging_Days_1 + 1;

// WRK.USR Age Heading B = WRK.A/R Aging Days - 2 + CON.1
WRK.USR_Age_Heading_B = WRK.A_R_Aging_Days_2 + 1;

// WRK.USR Age Heading C = WRK.A/R Aging Days - 3 + CON.1
WRK.USR_Age_Heading_C = WRK.A_R_Aging_Days_3 + 1;

// WRK.USR Age Heading D = WRK.A/R Aging Days - 4
WRK.USR_Age_Heading_D = WRK.A_R_Aging_Days_4;

// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// LCL.Display Prt Opt Pmt USR = CND.*YES
LCL.Display_Prt_Opt_Pmt_USR = *YES;

//?USER: Initialize subfile control

CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

ENDIF;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(CTL.AR_Customer_Number);
PARAMETER(CTL.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize subfile record from DBF record

//?Select Records
CASE;

// IF DB1.Purge Status is Open
IF DB1.Purge_Status = 'O';

// AND DB1.Remaining Balance Due is not equal to zeros
AND DB1.Remaining_Balance_Due <> *ZERO;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

//?Select Records
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

EXECUTE FUNCTION(Rtv Note Exists       RT) TYPE(RTVOBJ) FILE(PMEDCPP)           AC1899753;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// RCD.USR Asterisk = CND.asterisk
RCD.USR_Asterisk = *;

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.USR Asterisk = CND.blank
RCD.USR_Asterisk = *BLANK;

ENDIF;

//?**
//?** Use the aging code retv'd in initialize   12/01/2006 LJB
EXECUTE FUNCTION(CLC Age Cust Inv.      IF) TYPE(EXCINTFUN)                     AC1640420;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.AR_Customer_Number);
PARAMETER(WRK.Age_Due_Current_CB);
PARAMETER(WRK.Age_Due_Aging_1_CB);
PARAMETER(WRK.Age_Due_Aging_2_CB);
PARAMETER(WRK.Age_Due_Aging_3_CB);
PARAMETER(WRK.Age_Due_Aging_4_CB);
PARAMETER(WRK.Age_Due_Aging_5_CB);
PARAMETER(WRK.Age_Due_Current_W_O_CB);
PARAMETER(WRK.Age_Due_Aging_1_W_O_CB);
PARAMETER(WRK.Age_Due_Aging_2_W_O_CB);
PARAMETER(WRK.Age_Due_Aging_3_W_O_CB);
PARAMETER(WRK.Age_Due_Aging_4_W_O_CB);
PARAMETER(WRK.Age_Due_Aging_5_W_O_CB);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
PARAMETER(RCD.Remaining_Balance_Due);
PARAMETER(RCD.Due_Date);
PARAMETER(WRK.A_R_Aging_Code);
{
 //?Execute internal function

 //?Initialize Neither Parameters.
 DO;

 // PAR.USR Age Current = CND.equal to zero
 PAR.USR_Age_Current = *ZERO;

 // PAR.USR Age Value 1 = CND.equal to zero
 PAR.USR_Age_Value_1 = *ZERO;

 // PAR.USR Age Value 2 = CND.equal to zero
 PAR.USR_Age_Value_2 = *ZERO;

 // PAR.USR Age Value 3 = CND.equal to zero
 PAR.USR_Age_Value_3 = *ZERO;

 // PAR.USR Age Value 4 = CND.equal to zero
 PAR.USR_Age_Value_4 = *ZERO;

 // PAR.USR Age Value 5 = CND.equal to zero
 PAR.USR_Age_Value_5 = *ZERO;

 // PAR.USR Age Current A = CND.equal to zero
 PAR.USR_Age_Current_A = *ZERO;

 // PAR.USR Age Value 1 A = CND.equal to zero
 PAR.USR_Age_Value_1_A = *ZERO;

 // PAR.USR Age Value 2 A = CND.equal to zero
 PAR.USR_Age_Value_2_A = *ZERO;

 // PAR.USR Age Value 3 A = CND.equal to zero
 PAR.USR_Age_Value_3_A = *ZERO;

 // PAR.USR Age Value 4 A = CND.equal to zero
 PAR.USR_Age_Value_4_A = *ZERO;

 // PAR.USR Age Value 5 A = CND.equal to zero
 PAR.USR_Age_Value_5_A = *ZERO;

 // PAR.USR Age Current B = CND.equal to zero
 PAR.USR_Age_Current_B = *ZERO;

 // PAR.USR Age Value 1 B = CND.equal to zero
 PAR.USR_Age_Value_1_B = *ZERO;

 // PAR.USR Age Value 2 B = CND.equal to zero
 PAR.USR_Age_Value_2_B = *ZERO;

 // PAR.USR Age Value 3 B = CND.equal to zero
 PAR.USR_Age_Value_3_B = *ZERO;

 // PAR.USR Age Value 4 B = CND.equal to zero
 PAR.USR_Age_Value_4_B = *ZERO;

 // PAR.USR Age Value 5 B = CND.equal to zero
 PAR.USR_Age_Value_5_B = *ZERO;

 // PAR.USR Total Credit Amount = CND.Zero
 PAR.USR_Total_Credit_Amount = *ZERO;

 ENDDO;

 //?Retrieve Aging Ranges.
 DO;

 //?** A/R aging info is now in a file - retrieve from there  12/01/06 LJB
 EXECUTE FUNCTION(RTV A/R Aging Control  RT) TYPE(RTVOBJ) FILE(PMADCPP)          AC1800594;
 PARAMETER(PAR.A_R_Aging_Code);
 PARAMETER(PAR.A_R_Aging_Days_1);
 PARAMETER(PAR.A_R_Aging_Days_2);
 PARAMETER(PAR.A_R_Aging_Days_3);
 PARAMETER(PAR.A_R_Aging_Days_4);
 PARAMETER(WRK.Age_by_Trans_or_Due_Date);
 PARAMETER(WRK.Default_Y_N);
 PARAMETER(WRK.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDDO;

 CASE;

 // IF PAR.Remaining Balance Due is not equal to zeros
 IF PAR.Remaining_Balance_Due <> *ZERO;

 //?Sum A/R Cust Invoices with a Remaining Bal.(IN,DM)(CB)(CM,OA)
 DO;

 // PAR.Days Past Due  USR = JOB.*Job date - PAR.Due Date *DAYS
 PAR.Days_Past_Due_USR = DURATION(JOB.*Job_date PAR.Due_Date 'DY' 1111111 'NONE' 'N' 1);

 CASE;

 // IF PAR.Days Past Due  USR is <= Zero
 IF PAR.Days_Past_Due_USR <= *ZERO;

 //?Current.
 DO;

 EXECUTE FUNCTION(CLC Aging Bucket       IF) TYPE(EXCINTFUN)                     AC1537845;
 PARAMETER(PAR.Invoice_Suffix);
 PARAMETER(PAR.Remaining_Balance_Due);
 PARAMETER(PAR.USR_Age_Current);
 PARAMETER(PAR.USR_Age_Current_A);
 PARAMETER(PAR.USR_Age_Current_B);
 PARAMETER(PAR.USR_Total_Credit_Amount);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Invoice Suffix is Charge Backs and Rebills
  IF PAR.Invoice_Suffix = 'CB'/'RB';

  //?Age Chargebacks and Rebills.
  DO;

  // PAR.Aging - CB    Amt USR = PAR.Aging - CB    Amt USR + PAR.Remaining Balance Due
  PAR.Aging_CB_Amt_USR = PAR.Aging_CB_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Invoices
  IF PAR.Invoice_Suffix = 'IN';

  // OR PAR.Invoice Suffix is Debit Memos
  OR PAR.Invoice_Suffix = 'DM';

  //?Age Invoices and Debit Memos.
  DO;

  // PAR.Aging - IN/DM Amt USR = PAR.Aging - IN/DM Amt USR + PAR.Remaining Balance Du
  PAR.Aging_IN_DM_Amt_USR = PAR.Aging_IN_DM_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Credit Memos
  IF PAR.Invoice_Suffix = 'CM';

  // OR PAR.Invoice Suffix is On Account Cash
  OR PAR.Invoice_Suffix = 'OA';

  //?Accumulate Credit to Apply.
  DO;

  // PAR.Aging - CM/OA Amt USR = PAR.Aging - CM/OA Amt USR + PAR.Remaining Balance Du
  PAR.Aging_CM_OA_Amt_USR = PAR.Aging_CM_OA_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  ENDIF;

 }

 ENDDO;

 // IF PAR.Days Past Due  USR LE PAR.A/R Aging Days - 1
 IF PAR.Days_Past_Due_USR <= PAR.A_R_Aging_Days_1;

 //?Past Due Period 1.
 DO;

 EXECUTE FUNCTION(CLC Aging Bucket       IF) TYPE(EXCINTFUN)                     AC1537845;
 PARAMETER(PAR.Invoice_Suffix);
 PARAMETER(PAR.Remaining_Balance_Due);
 PARAMETER(PAR.USR_Age_Value_1);
 PARAMETER(PAR.USR_Age_Value_1_A);
 PARAMETER(PAR.USR_Age_Value_1_B);
 PARAMETER(PAR.USR_Total_Credit_Amount);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Invoice Suffix is Charge Backs and Rebills
  IF PAR.Invoice_Suffix = 'CB'/'RB';

  //?Age Chargebacks and Rebills.
  DO;

  // PAR.Aging - CB    Amt USR = PAR.Aging - CB    Amt USR + PAR.Remaining Balance Due
  PAR.Aging_CB_Amt_USR = PAR.Aging_CB_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Invoices
  IF PAR.Invoice_Suffix = 'IN';

  // OR PAR.Invoice Suffix is Debit Memos
  OR PAR.Invoice_Suffix = 'DM';

  //?Age Invoices and Debit Memos.
  DO;

  // PAR.Aging - IN/DM Amt USR = PAR.Aging - IN/DM Amt USR + PAR.Remaining Balance Du
  PAR.Aging_IN_DM_Amt_USR = PAR.Aging_IN_DM_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Credit Memos
  IF PAR.Invoice_Suffix = 'CM';

  // OR PAR.Invoice Suffix is On Account Cash
  OR PAR.Invoice_Suffix = 'OA';

  //?Accumulate Credit to Apply.
  DO;

  // PAR.Aging - CM/OA Amt USR = PAR.Aging - CM/OA Amt USR + PAR.Remaining Balance Du
  PAR.Aging_CM_OA_Amt_USR = PAR.Aging_CM_OA_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  ENDIF;

 }

 ENDDO;

 // IF PAR.Days Past Due  USR LE PAR.A/R Aging Days - 2
 IF PAR.Days_Past_Due_USR <= PAR.A_R_Aging_Days_2;

 //?Past Due Period 2.
 DO;

 EXECUTE FUNCTION(CLC Aging Bucket       IF) TYPE(EXCINTFUN)                     AC1537845;
 PARAMETER(PAR.Invoice_Suffix);
 PARAMETER(PAR.Remaining_Balance_Due);
 PARAMETER(PAR.USR_Age_Value_2);
 PARAMETER(PAR.USR_Age_Value_2_A);
 PARAMETER(PAR.USR_Age_Value_2_B);
 PARAMETER(PAR.USR_Total_Credit_Amount);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Invoice Suffix is Charge Backs and Rebills
  IF PAR.Invoice_Suffix = 'CB'/'RB';

  //?Age Chargebacks and Rebills.
  DO;

  // PAR.Aging - CB    Amt USR = PAR.Aging - CB    Amt USR + PAR.Remaining Balance Due
  PAR.Aging_CB_Amt_USR = PAR.Aging_CB_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Invoices
  IF PAR.Invoice_Suffix = 'IN';

  // OR PAR.Invoice Suffix is Debit Memos
  OR PAR.Invoice_Suffix = 'DM';

  //?Age Invoices and Debit Memos.
  DO;

  // PAR.Aging - IN/DM Amt USR = PAR.Aging - IN/DM Amt USR + PAR.Remaining Balance Du
  PAR.Aging_IN_DM_Amt_USR = PAR.Aging_IN_DM_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Credit Memos
  IF PAR.Invoice_Suffix = 'CM';

  // OR PAR.Invoice Suffix is On Account Cash
  OR PAR.Invoice_Suffix = 'OA';

  //?Accumulate Credit to Apply.
  DO;

  // PAR.Aging - CM/OA Amt USR = PAR.Aging - CM/OA Amt USR + PAR.Remaining Balance Du
  PAR.Aging_CM_OA_Amt_USR = PAR.Aging_CM_OA_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  ENDIF;

 }

 ENDDO;

 // IF PAR.Days Past Due  USR LE PAR.A/R Aging Days - 3
 IF PAR.Days_Past_Due_USR <= PAR.A_R_Aging_Days_3;

 //?Past Due Period 3.
 DO;

 EXECUTE FUNCTION(CLC Aging Bucket       IF) TYPE(EXCINTFUN)                     AC1537845;
 PARAMETER(PAR.Invoice_Suffix);
 PARAMETER(PAR.Remaining_Balance_Due);
 PARAMETER(PAR.USR_Age_Value_3);
 PARAMETER(PAR.USR_Age_Value_3_A);
 PARAMETER(PAR.USR_Age_Value_3_B);
 PARAMETER(PAR.USR_Total_Credit_Amount);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Invoice Suffix is Charge Backs and Rebills
  IF PAR.Invoice_Suffix = 'CB'/'RB';

  //?Age Chargebacks and Rebills.
  DO;

  // PAR.Aging - CB    Amt USR = PAR.Aging - CB    Amt USR + PAR.Remaining Balance Due
  PAR.Aging_CB_Amt_USR = PAR.Aging_CB_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Invoices
  IF PAR.Invoice_Suffix = 'IN';

  // OR PAR.Invoice Suffix is Debit Memos
  OR PAR.Invoice_Suffix = 'DM';

  //?Age Invoices and Debit Memos.
  DO;

  // PAR.Aging - IN/DM Amt USR = PAR.Aging - IN/DM Amt USR + PAR.Remaining Balance Du
  PAR.Aging_IN_DM_Amt_USR = PAR.Aging_IN_DM_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Credit Memos
  IF PAR.Invoice_Suffix = 'CM';

  // OR PAR.Invoice Suffix is On Account Cash
  OR PAR.Invoice_Suffix = 'OA';

  //?Accumulate Credit to Apply.
  DO;

  // PAR.Aging - CM/OA Amt USR = PAR.Aging - CM/OA Amt USR + PAR.Remaining Balance Du
  PAR.Aging_CM_OA_Amt_USR = PAR.Aging_CM_OA_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  ENDIF;

 }

 ENDDO;

 // IF PAR.Days Past Due  USR LE PAR.A/R Aging Days - 4
 IF PAR.Days_Past_Due_USR <= PAR.A_R_Aging_Days_4;

 //?Past Due Period 4.
 DO;

 EXECUTE FUNCTION(CLC Aging Bucket       IF) TYPE(EXCINTFUN)                     AC1537845;
 PARAMETER(PAR.Invoice_Suffix);
 PARAMETER(PAR.Remaining_Balance_Due);
 PARAMETER(PAR.USR_Age_Value_4);
 PARAMETER(PAR.USR_Age_Value_4_A);
 PARAMETER(PAR.USR_Age_Value_4_B);
 PARAMETER(PAR.USR_Total_Credit_Amount);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Invoice Suffix is Charge Backs and Rebills
  IF PAR.Invoice_Suffix = 'CB'/'RB';

  //?Age Chargebacks and Rebills.
  DO;

  // PAR.Aging - CB    Amt USR = PAR.Aging - CB    Amt USR + PAR.Remaining Balance Due
  PAR.Aging_CB_Amt_USR = PAR.Aging_CB_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Invoices
  IF PAR.Invoice_Suffix = 'IN';

  // OR PAR.Invoice Suffix is Debit Memos
  OR PAR.Invoice_Suffix = 'DM';

  //?Age Invoices and Debit Memos.
  DO;

  // PAR.Aging - IN/DM Amt USR = PAR.Aging - IN/DM Amt USR + PAR.Remaining Balance Du
  PAR.Aging_IN_DM_Amt_USR = PAR.Aging_IN_DM_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Credit Memos
  IF PAR.Invoice_Suffix = 'CM';

  // OR PAR.Invoice Suffix is On Account Cash
  OR PAR.Invoice_Suffix = 'OA';

  //?Accumulate Credit to Apply.
  DO;

  // PAR.Aging - CM/OA Amt USR = PAR.Aging - CM/OA Amt USR + PAR.Remaining Balance Du
  PAR.Aging_CM_OA_Amt_USR = PAR.Aging_CM_OA_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  ENDIF;

 }

 ENDDO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Past Due Period 5.
 DO;

 EXECUTE FUNCTION(CLC Aging Bucket       IF) TYPE(EXCINTFUN)                     AC1537845;
 PARAMETER(PAR.Invoice_Suffix);
 PARAMETER(PAR.Remaining_Balance_Due);
 PARAMETER(PAR.USR_Age_Value_5);
 PARAMETER(PAR.USR_Age_Value_5_A);
 PARAMETER(PAR.USR_Age_Value_5_B);
 PARAMETER(PAR.USR_Total_Credit_Amount);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Invoice Suffix is Charge Backs and Rebills
  IF PAR.Invoice_Suffix = 'CB'/'RB';

  //?Age Chargebacks and Rebills.
  DO;

  // PAR.Aging - CB    Amt USR = PAR.Aging - CB    Amt USR + PAR.Remaining Balance Due
  PAR.Aging_CB_Amt_USR = PAR.Aging_CB_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Invoices
  IF PAR.Invoice_Suffix = 'IN';

  // OR PAR.Invoice Suffix is Debit Memos
  OR PAR.Invoice_Suffix = 'DM';

  //?Age Invoices and Debit Memos.
  DO;

  // PAR.Aging - IN/DM Amt USR = PAR.Aging - IN/DM Amt USR + PAR.Remaining Balance Du
  PAR.Aging_IN_DM_Amt_USR = PAR.Aging_IN_DM_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Credit Memos
  IF PAR.Invoice_Suffix = 'CM';

  // OR PAR.Invoice Suffix is On Account Cash
  OR PAR.Invoice_Suffix = 'OA';

  //?Accumulate Credit to Apply.
  DO;

  // PAR.Aging - CM/OA Amt USR = PAR.Aging - CM/OA Amt USR + PAR.Remaining Balance Du
  PAR.Aging_CM_OA_Amt_USR = PAR.Aging_CM_OA_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  ENDIF;

 }

 ENDDO;

 ENDIF;

 ENDDO;

 ENDIF;

 //?Load Output Parameters.
 DO;

 // PAR.Age $ Due - Current - CB = PAR.USR Age Current B
 PAR.Age_Due_Current_CB = PAR.USR_Age_Current_B;

 // PAR.Age $ Due - Aging 1 - CB = PAR.USR Age Value 1 B
 PAR.Age_Due_Aging_1_CB = PAR.USR_Age_Value_1_B;

 // PAR.Age $ Due - Aging 2 - CB = PAR.USR Age Value 2 B
 PAR.Age_Due_Aging_2_CB = PAR.USR_Age_Value_2_B;

 // PAR.Age $ Due - Aging 3 - CB = PAR.USR Age Value 3 B
 PAR.Age_Due_Aging_3_CB = PAR.USR_Age_Value_3_B;

 // PAR.Age $ Due - Aging 4 - CB = PAR.USR Age Value 4 B
 PAR.Age_Due_Aging_4_CB = PAR.USR_Age_Value_4_B;

 // PAR.Age $ Due - Aging 5 - CB = PAR.USR Age Value 5 B
 PAR.Age_Due_Aging_5_CB = PAR.USR_Age_Value_5_B;

 // PAR.Age $ Due-Current-W/O CB = PAR.USR Age Current
 PAR.Age_Due_Current_W_O_CB = PAR.USR_Age_Current;

 // PAR.Age $ Due-Aging 1-W/O CB = PAR.USR Age Value 1
 PAR.Age_Due_Aging_1_W_O_CB = PAR.USR_Age_Value_1;

 // PAR.Age $ Due-Aging 2-W/O CB = PAR.USR Age Value 2
 PAR.Age_Due_Aging_2_W_O_CB = PAR.USR_Age_Value_2;

 // PAR.Age $ Due-Aging 3-W/O CB = PAR.USR Age Value 3
 PAR.Age_Due_Aging_3_W_O_CB = PAR.USR_Age_Value_3;

 // PAR.Age $ Due-Aging 4-W/O CB = PAR.USR Age Value 4
 PAR.Age_Due_Aging_4_W_O_CB = PAR.USR_Age_Value_4;

 // PAR.Age $ Due-Aging 5-W/O CB = PAR.USR Age Value 5
 PAR.Age_Due_Aging_5_W_O_CB = PAR.USR_Age_Value_5;

 ENDDO;

 //?***** Change Log and Comments
 //?** 12/01/2006 LJB PK0039
 //?** A/R aging info is now in a file - retrieve from there
 //?*****
}


CASE;

// IF WRK.Age $ Due - Aging 1 - CB is greater than zero
IF WRK.Age_Due_Aging_1_CB > *ZERO;

// RCD.USR Aging Days 1 = CON.1
RCD.USR_Aging_Days_1 = 1;

// RCD.USR Aging Days 2 = WRK.A/R Aging Days - 1
RCD.USR_Aging_Days_2 = WRK.A_R_Aging_Days_1;

// RCD.USR amount 1  11.2 = WRK.Age $ Due - Aging 1 - CB
RCD.USR_amount_1_11_2 = WRK.Age_Due_Aging_1_CB;

// RCD.USR MT = CON. -
RCD.USR_MT = '-';

// IF WRK.Age $ Due - Aging 2 - CB is greater than zero
IF WRK.Age_Due_Aging_2_CB > *ZERO;

// RCD.USR Aging Days 1 = WRK.USR Age Heading A
RCD.USR_Aging_Days_1 = WRK.USR_Age_Heading_A;

// RCD.USR Aging Days 2 = WRK.A/R Aging Days - 2
RCD.USR_Aging_Days_2 = WRK.A_R_Aging_Days_2;

// RCD.USR amount 1  11.2 = WRK.Age $ Due - Aging 2 - CB
RCD.USR_amount_1_11_2 = WRK.Age_Due_Aging_2_CB;

// RCD.USR MT = CON. -
RCD.USR_MT = '-';

// IF WRK.Age $ Due - Aging 3 - CB is greater than zero
IF WRK.Age_Due_Aging_3_CB > *ZERO;

// RCD.USR Aging Days 1 = WRK.USR Age Heading B
RCD.USR_Aging_Days_1 = WRK.USR_Age_Heading_B;

// RCD.USR Aging Days 2 = WRK.A/R Aging Days - 3
RCD.USR_Aging_Days_2 = WRK.A_R_Aging_Days_3;

// RCD.USR amount 1  11.2 = WRK.Age $ Due - Aging 3 - CB
RCD.USR_amount_1_11_2 = WRK.Age_Due_Aging_3_CB;

// RCD.USR MT = CON. -
RCD.USR_MT = '-';

// IF WRK.Age $ Due - Aging 4 - CB is greater than zero
IF WRK.Age_Due_Aging_4_CB > *ZERO;

// RCD.USR Aging Days 1 = WRK.USR Age Heading C
RCD.USR_Aging_Days_1 = WRK.USR_Age_Heading_C;

// RCD.USR Aging Days 2 = WRK.A/R Aging Days - 4
RCD.USR_Aging_Days_2 = WRK.A_R_Aging_Days_4;

// RCD.USR amount 1  11.2 = WRK.Age $ Due - Aging 4 - CB
RCD.USR_amount_1_11_2 = WRK.Age_Due_Aging_4_CB;

// RCD.USR MT = CON. -
RCD.USR_MT = '-';

// IF WRK.Age $ Due - Aging 5 - CB is greater than zero
IF WRK.Age_Due_Aging_5_CB > *ZERO;

// RCD.USR Aging Days 2 = WRK.USR Age Heading D
RCD.USR_Aging_Days_2 = WRK.USR_Age_Heading_D;

// RCD.USR amount 1  11.2 = WRK.Age $ Due - Aging 5 - CB
RCD.USR_amount_1_11_2 = WRK.Age_Due_Aging_5_CB;

// RCD.USR MT = CON.Ovr
RCD.USR_MT = 'Ovr';

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?F23=Print Notes
CASE;

// IF CTL.*CMD key is CF23
IF CTL.*CMD_key = '23';

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Collection Notes');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('OMS');
PARAMETER(*MISSING);
PARAMETER(1);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// Retrieve message - 'JOB(&1) jobq(&2) log(&3) hold(&4)'
PGM.*Sbmjob_override_string = RTVMSG(USR2684);
PARAMETER('CLCTNNOTES');
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(*JOBD_JOBD_JOBD);
PARAMETER(*JOBD);

// LCL.Copies NBR USR = CVTVAR(PAR.PRT Number of Copies)
LCL.Copies_NBR_USR = CVTVAR(PAR.PRT_Number_of_Copies);

// Call program Prt Collection Notes  CL.
SBMJOB;
CALL PROGRAM(Prt Collection Notes  CL) ('PMYFUPC');
PARAMETER(CTL.Company_Number);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(CTL.AR_Customer_Number);
PARAMETER(*BLANK);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(LCL.Copies_NBR_USR);
SBMJOBEND;

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?5=Work With Invoice Notes
CASE;

// IF RCD.*SFLSEL is Option 5
IF RCD.*SFLSEL = '5'/'5';

// Call program WW Invoice Notes      DF.
CALL PROGRAM(WW Invoice Notes      DF) ('PMX6DFR');
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Invoice_Suffix);
PARAMETER(RCD.AR_Customer_Number);
PARAMETER(RCD.Sales_Route_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?6=Print Note
CASE;

// IF RCD.*SFLSEL is *Print
IF RCD.*SFLSEL = '6'/'6';

CASE;

// IF LCL.Display Prt Opt Pmt USR is *YES
IF LCL.Display_Prt_Opt_Pmt_USR = *YES;

// LCL.Display Prt Opt Pmt USR = CND.*NO
LCL.Display_Prt_Opt_Pmt_USR = *NO;

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Collection Notes');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('OMS');
PARAMETER(*MISSING);
PARAMETER(1);

ENDIF;

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// Retrieve message - 'JOB(&1) jobq(&2) log(&3) hold(&4)'
PGM.*Sbmjob_override_string = RTVMSG(USR2684);
PARAMETER('CLCTNNOTES');
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(*JOBD_JOBD_JOBD);
PARAMETER(*JOBD);

// LCL.Copies NBR USR = CVTVAR(PAR.PRT Number of Copies)
LCL.Copies_NBR_USR = CVTVAR(PAR.PRT_Number_of_Copies);

// Call program Prt Collection Notes  CL.
SBMJOB;
CALL PROGRAM(Prt Collection Notes  CL) ('PMYFUPC');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(RCD.AR_Customer_Number);
PARAMETER(RCD.Sales_Route_Code);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(LCL.Copies_NBR_USR);
SBMJOBEND;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

ENDIF;

//?USER: Final processing (Pre-confirm)

// LCL.Display Prt Opt Pmt USR = CND.*YES
LCL.Display_Prt_Opt_Pmt_USR = *YES;

