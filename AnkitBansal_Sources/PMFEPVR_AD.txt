// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMFEPVR
// ?Date: 14.08.2025 Time: 03:42:55
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('I/C');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(WRK.Allow_Multi_Company);
PARAMETER(WRK.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

//?R9083 02/10/17 DN-Get Default Inventory Valuation Grouping.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Desc & Val Alpha  RT) TYPE(RTVOBJ) FILE(PDKMREP)           AC2131892;
PARAMETER(WRK.Company_Number);
PARAMETER('IVFGROUP');
PARAMETER(NLL.Description);
PARAMETER(LCL.ISC_Valuation_Grouping);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?USER: Load screen

CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

// DTL.ISC Warehouse Company = WRK.Company Number
DTL.ISC_Warehouse_Company = WRK.Company_Number;

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

// DTL.Download Wgt or Qty usr = CND.Weight
DTL.Download_Wgt_or_Qty_usr = 'W';

// DTL.ISC Week Ending Date = CND.eq 20991231
DTL.ISC_Week_Ending_Date = 20991231;

//?R9083 02/10/17 DN-Added RST by ISC Valuation Grouping.
EXECUTE FUNCTION(Rtv Last Week in file RT) TYPE(RTVOBJ) FILE(PPBSCPP)           AC1742385;
PARAMETER(LCL.ISC_Valuation_Grouping);
PARAMETER(DTL.ISC_Week_Ending_Date);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?Get the latest week ending date in the file
 // PAR.ISC Week Ending Date = DB1.ISC Week Ending Date
 PAR.ISC_Week_Ending_Date = DB1.ISC_Week_Ending_Date;

 QUIT;

}


//?Status means to combine all whse values or output each whse separately
//?N = dont combine
// DTL.Status - Y or N = CND.no
DTL.Status_Y_or_N = 'N';

ENDIF;

//?USER: Validate fields

//?F4=Prompt
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.ISC Warehouse Company
IF PGM.*Cursor_field = DTL.ISC_Warehouse_Company;

CASE;

// IF WRK.Allow Multi-Company is yes
IF WRK.Allow_Multi_Company = 'Y';

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(DTL.ISC_Warehouse_Company);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

ENDIF;

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> DTL.ISC Warehouse Code
IF PGM.*Cursor_field = DTL.ISC_Warehouse_Code;

// Call program SEL AcctCo/Warehouse   SR.
CALL PROGRAM(SEL AcctCo/Warehouse   SR) ('PMCQSRR');
PARAMETER(DTL.ISC_Warehouse_Code);
PARAMETER(DTL.ISC_Warehouse_Company);

ENDIF;

ENDIF;

CASE;

// IF DTL.ISC Week Ending Date is Not Entered
IF DTL.ISC_Week_Ending_Date = *ZERO;

// Send error message - 'Date must be entered.'
ERROR(USR0231);
MSGPARM(WRK.@Date_ATR);

ENDIF;

CASE;

// IF DTL.ISC Warehouse Company is Equal to zero
IF DTL.ISC_Warehouse_Company = *ZERO;

// Send error message - 'Company Number required.'
ERROR(USR1744);

ENDIF;

CASE;

// IF DTL.ISC Warehouse Code is Warehouse Code not Blank
IF DTL.ISC_Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(Rtv Acct Co          RT) TYPE(RTVOBJ) FILE(CAADREP)            AC1802492;
PARAMETER(DTL.ISC_Warehouse_Code);
PARAMETER(LCL.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Accounting Company NE DTL.ISC Warehouse Company
IF LCL.Accounting_Company <> DTL.ISC_Warehouse_Company;

// Send error message - 'Warehouse &1 and Acctng Company &2 combo invalid.'
ERROR(USR3675);
MSGPARM(DTL.ISC_Warehouse_Code);
MSGPARM(DTL.ISC_Warehouse_Company);

ENDIF;

ENDIF;

//?USER: User defined action

EXECUTE FUNCTION(Rtv Acct&Ship Co      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1814475;
PARAMETER(DTL.ISC_Warehouse_Code);
PARAMETER(WRK.Shipping_Company);
PARAMETER(WRK.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Set sts field to see if qry can select on company.
CASE;

// IF WRK.Accounting Company NE WRK.Shipping Company
IF WRK.Accounting_Company <> WRK.Shipping_Company;

// OR DTL.ISC Warehouse Code is Warehouse Code Blank
OR DTL.ISC_Warehouse_Code = *BLANK;

// WRK.Status Flag 1  Y/N = CND.No
WRK.Status_Flag_1_Y_N = 'N';

//?Set sts field to see if qry can select on company.
// IF *OTHERWISE
IF *OTHERWISE;

//?yes =  qry sel on company to speed up processing
// WRK.Status Flag 1  Y/N = CND.Yes
WRK.Status_Flag_1_Y_N = 'Y';

ENDIF;

//?R9083 06/26/17 DN-Update date conversion due to Synon version difference.
// LCL.Date Out (8,0) USR = DTL.ISC Week Ending Date
LCL.Date_Out_80_USR = DTL.ISC_Week_Ending_Date;

// WRK.Date (Char-8) USR = CVTVAR(LCL.Date Out (8,0) USR)
WRK.Date_Char_8_USR = CVTVAR(LCL.Date_Out_80_USR);

// WRK.Date (Char-6) USR = SUBSTRING(WRK.Date (Char-8) USR,CON.3,CON.6)
WRK.Date_Char_6_USR = SUBSTRING(WRK.Date_Char_8_USR:3:6);

// WRK.Date (Alpha) USR = CONCAT(CON.1,WRK.Date (Char-6) USR,CND.*None)
WRK.Date_Alpha_USR = '1' + WRK.Date_Char_6_USR (*ZERO);

// WRK.To Date               USR = CVTVAR(WRK.Date (Alpha) USR)
WRK.To_Date_USR = CVTVAR(WRK.Date_Alpha_USR);

EXECUTE FUNCTION(Rtv Date/Time         RT) TYPE(RTVOBJ) FILE(PMA5REP)           AC1831861;
PARAMETER(DTL.ISC_Warehouse_Company);
PARAMETER('RR');
PARAMETER(LCL.ISC_From_Time);
PARAMETER(LCL.ISC_To_Time);
PARAMETER(WRK.To_Date_USR);
PARAMETER(LCL.From_Date_USR);
PARAMETER(LCL.Thru_Date_USR);
{
 //?USER: Process Data record

 // PAR.ISC From Time = DB1.ISC From Time
 PAR.ISC_From_Time = DB1.ISC_From_Time;

 // PAR.ISC To Time = DB1.ISC To Time
 PAR.ISC_To_Time = DB1.ISC_To_Time;

 EXECUTE FUNCTION(Rtv Prior Day per par RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1831878;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Date_USR);
 PARAMETER(DB1.ISC_From_Day_of_week);
 PARAMETER(PAR.From_Date_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Day of Week EQ PAR.Day of Week
  IF DB1.Day_of_Week = PAR.Day_of_Week;

  // PAR.Date Mon USR = DB1.Post to G/L Date
  PAR.Date_Mon_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

 }

 EXECUTE FUNCTION(RTV Next Day per par  RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1831883;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Date_USR);
 PARAMETER(DB1.ISC_To_Day_of_Week);
 PARAMETER(PAR.Thru_Date_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Day of Week EQ PAR.Day of Week
  IF DB1.Day_of_Week = PAR.Day_of_Week;

  // PAR.Scheduled Ship Date = DB1.Post to G/L Date
  PAR.Scheduled_Ship_Date = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

 }

}


// Call program Exc Bld Workf Dwnld   XF.
SBMJOB;
CALL PROGRAM(Exc Bld Workf Dwnld   XF) ('PME6XFR');
PARAMETER(DTL.ISC_Warehouse_Company);
PARAMETER(DTL.ISC_Warehouse_Code);
PARAMETER(LCL.From_Date_USR);
PARAMETER(LCL.Thru_Date_USR);
PARAMETER(DTL.ISC_Week_Ending_Date);
PARAMETER(DTL.Status_Y_or_N);
PARAMETER(DTL.Download_Wgt_or_Qty_usr);
PARAMETER(WRK.Status_Flag_1_Y_N);
PARAMETER(DTL.Email_Address);
PARAMETER(DTL.@Email_Address);
PARAMETER(LCL.ISC_From_Time);
PARAMETER(LCL.ISC_To_Time);
SBMJOBOVR JOB(ISCWORKSHT);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

// Send information message - 'The report has been submitted.'
MESSAGE(USR2720 *INFO);

