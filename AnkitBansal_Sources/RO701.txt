      *
      * ENVIRONMENT: Pork Division
      * SYSTEM:      Resource Optimization
      * PROGRAM:     RO701
      * TITLE:       View Resource Optimization Header
      * PROGRAMMER:  LeAnne Ramsey
      * CREATED:     01/16/07
      *
      * FUNCTION: This View displays a specific record from the Resource Optimization
      *           Header file.
      *
      *           Restrictors:
      *              1) Company
      *              2) Week-ending date
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 02/26/09  LeAnne Ramsey
      *           Added new field: Smoker Yield Percent from BoneIn Picnic
      *           Removed from file: Labor Fringe %, Average Lean %, Average Carcass Weight
      *
      * 02/17/10  LeAnne Ramsey
      *           Added 2 fields to file/screen:
      *                Cap&Blade Allocation % for Special Trim
      *                Cap&Blade Allocation % for Regular Trim
      *
      * 02/25/10  LeAnne Ramsey
      *           Added 8 Cap&Blade Yield Percent fields to file for Damon G. to maintain.
      *           Damon uses 2 specific items for the percents.
      *           Item 89999              Item 89998
      *           ----------              ----------
      *           Cap meat %              Cap Meat %
      *           Blade meat %            Blade Meat %
      *           Reg trim %              Reg Trim %
      *           Cut Loss %              Cut Loss %
      *
      * 08/15/11  LeAnne Ramsey (E1699)
      *           Recompile only.
      *           Damin Ginther has added a new Cap Item: 89997. It will have the same
      *           percentages as existing Item 89999. So, we did not need new entry fields.
      *           I just added the new Item into the column heading.
      *
      * 03/08/12  LeAnne Ramsey (E1984)
      *           Added 6 new Skirt Meat Allocation Flag fields to ROP100. These will let Damon
      *           designate which "categories" program RO232 will allocate Skirt Meat to. These
      *           are Yes/No flags:
      *                             Skirt Meat Allocation   SBF   TF
      *                             ---------------------   ---   --
      *                                   Small commodity    Y    N
      *                                  Medium commodity    N    N
      *                                 Converted Brisket    Y    Y
      *
      * 05/01/12  LeAnne Ramsey (E2078)
      *           Recompile only.
      *           Changed Cap/Blade Yield % heading.
      *           What was '89997/89999' is now '89990/89997/89999'.
      *           Item 89990 is new and per Damon G. is to be handled
      *           just like 89997/89999.
      *
      * 01/20/14  LeAnne Ramsey (E2985)
      *           Recompile only.
      *           Damin Ginther has added 8 new Cap&Blade Items. There are now too many
      *           items to plop them over the Cap&Blade Yield% columns. So, I added a section
      *           on the lower right of the screen to list them.
      /eject
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Frod701    cf   e             workstn infds(iofeed)
      *
      *
     fcaabrel1  if   e           k disk
      * Company name and address
      *
      *
     Frop100    if   e           k disk
      *    Resource optimization header
      *
      /eject
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D rtncd           s              2
     D maxmsg          s              2  0  inz(20)
      *
      *
      * Parm fields
      *
     D xxcono          s                   like(d1cono)
     D xxwemdy         s                   like(d1wemdy)
     D xxwedt          s                   like(ohwedt)
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('ROMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /eject
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /eject
      *----------------------------------------------------------------
      * Set environment for Screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
     C     key01         chain     rop100                             92
     C                   if        *in92 = *on                                  If not found
     C                   add       1             error
     C                   movel     'RO09008'     mgid(e)
     C                   else
      *
     C                   move      ohrcstcd      d1rcstcd
     C                   z-add     ohbicrvl      d1bicrvl
     C                   z-add     ohsmokypc     d1smokypc
     C                   z-add     ohbitrpc      d1bitrpc
     C                   z-add     ohaltrpc      d1altrpc
     C                   z-add     ohbicapc      d1bicapc
     C                   z-add     ohblcapc      d1blcapc
     C                   z-add     ohbibypc      d1bibypc
     C                   z-add     ohblbypc      d1blbypc
      *
     C                   z-add     ohcbstpc      d1cbstpc
     C                   z-add     ohcbrtpc      d1cbrtpc
      *
     C                   z-add     ohcbcm1pc     d1cbcm1pc
     C                   z-add     ohcbbm1pc     d1cbbm1pc
     C                   z-add     ohcbrt1pc     d1cbrt1pc
     C                   z-add     ohcbcl1pc     d1cbcl1pc
      *
     C                   z-add     ohcbcm2pc     d1cbcm2pc
     C                   z-add     ohcbbm2pc     d1cbbm2pc
     C                   z-add     ohcbrt2pc     d1cbrt2pc
     C                   z-add     ohcbcl2pc     d1cbcl2pc
      *
     C                   move      ohsscfl       d1sscfl
     C                   move      ohsmcfl       d1smcfl
     C                   move      ohscbfl       d1scbfl
     C                   move      ohtscfl       d1tscfl
     C                   move      ohtmcfl       d1tmcfl
     C                   move      ohtcbfl       d1tcbfl
     C                   endif                                                  If not found
      *
      * Display screen 1
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Perform operator I/O for screen 1
      *---------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to CRT
      *
     C                   write     ro701k1
     C                   write     ro701ec
     C                   exfmt     ro701r1
      *
      * Clear all messages
      *
     C                   exsr      $clmsg
      *
      *
      * Process user's entry and set routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   move      '03'          rtncd
     C                   eval      routne = exit
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   eval      routne = set1
     C                   other
      *
     C                   eval      routne = exit
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command key record will be set on. So, redispaly the screen to the user.
      *
     C                   if        *in43 = *on
     C                   movel     set1          routne
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command key record will be set on. So, redispaly the screen to the user.
      *
     C                   if        *in43 = *on
     C                   movel     set1          routne
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * End job
      *----------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        lr
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *
     C     *entry        plist
     C     d1cono        parm                    xxcono
     C     d1wemdy       parm                    xxwemdy
     C                   parm                    xxwedt
     C                   parm                    rtncd
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    xxcono
     C                   kfld                    xxwedt
      *
      * Retrieve Company name.
      *
     C     d1cono        chain     caabrel1                           92
     C                   if        *in92 = *off
     C                   move      abadtx        d1conm
     C                   endif
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /eject
