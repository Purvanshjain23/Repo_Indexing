      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      Triumph Foods
      * PROGRAM:     TF432
      * TITLE:       Work with Invoice Charges
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     03/07/05
      *
      *
      * FUNCTION: This Work With displays the records in the Invoice Charges file.
      *
      *           Restrictors:
      *                Include posted charges flag
      *
      *           Positioners:
      *                Invoice charge date
      *
      *           Selectors:
      *                Invoice charge number
      *                Invoice status code
      *                Invoice number
      *                Charge code
      *                Charge frequency code
      *                User-controlled flag
      *                System module code
      *                Include in invoice total flag
      *
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 05/07/09  LeAnne Ramsey
      *           Changed print logic to match Meat Costing.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Ftfd432    cf   e             workstn sfile(tf432s1:hdrrn1)
     F                                     infds(iofeed)
      *
      *
     Ftfj021g   if   e           k disk    infds(dbfeed)
      *    Invoice charges + charge codes
      *
      /eject
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D create          c                   'CREATE'
     D revise          c                   'REVISE'
     D delete          c                   'DELETE'
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
     D update          c                   'UPDATE'
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * Compile time array for SBMJOB used in QCMDEXC
      *---------------------------------------------------------------
     D cmd             s              1    dim(80) ctdata perrcd(80)
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D maxmsg          s              2  0  inz(20)
     D routne          s              6
     D maxrrn          s              4  0
     D reset           s              1    inz('N')
     D norecs          s              1    inz('N')
     D count           s              2  0
     D wkflow          s                   like(idflow)
     D rtncd           s              2    inz('00')
     D svrrn1          s                   like(hdrrn1)
      *
      *
      *  Parms for use with QCMDEXC.  'LENGTH' is the length of the
      *  command that will be issued with QCMDEXC.  QCMDEXC requires
      *  the field containing length to be defined as 15 with 5 decimal
      *  positions.  The field 'CMDSBM' will hold the values of the
      *  submit job command when passed as a parm on the call to
      *  QCMDEXC.
      *
     D length          s             15  5 inz(80)
     D cmdsbm          s             80
      *
      *
      * Workfields required for subfile paging--see initialization
      * subroutine.
      *
     D wkplin          s              2  0
     D wkrlin          s              2  0
      *
      *
      * Save fields for restrictors/positioners/selectors
      *
     D svynfl          s                   like(c1ynfl)
     D svicdtmdy       s                   like(c1icdtmdy)
     D svicdt          s                   like(icicdt)
     D svicsn          s                   like(c1icsn)
     D svinstcd        s                   like(c1instcd)
     D svinsn          s                   like(c1insn)
     D svcccd          s                   like(c1cccd)
     D svcfqcd         s                   like(c1cfqcd)
     D svucfl          s                   like(c1ucfl)
     D svsmcd          s                   like(c1smcd)
     D svinfl          s                   like(c1infl)
      *
      *
      * Workfields for date manipulation
      *
     D wkisodate       s               D   datfmt(*iso)
      *
      *
      * Parms
      *
     D xxaist          s              1
     D xxucfl          s                   like(c1ucfl)
     D xxinfl          s                   like(c1infl)
     D xxynfl          s                   like(c1ynfl)
      *
     D xxfmdy          s                   like(d1icdtmdy)
     D xxtmdy          s                   like(d1icdtmdy)
      *
     D xxfcymd         s                   like(icicdt)
     D xxtcymd         s                   like(icicdt)
      *
     D xxicsn          s                   like(c1icsn)
     D xxinsn          s                   like(c1insn)
     D xxinstcd        s                   like(c1instcd)
     D xxinstds        s             10
      *
     D xxcccd          s                   like(c1cccd)
     D xxccds          s                   like(ccccds)
      *
     D xxsmcd          s                   like(c1smcd)
     D xxsmds          s             20
      *
     D xxcfqcd         s                   like(c1cfqcd)
     D xxcfqds         s             10
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      * Standard subfile option conversion
      *---------------------------------------------------------------
     D                 ds                  inz
     D d1opt                          2
     D   wkopt1                       1    overlay(d1opt)
     D   wkopt2                       1    overlay(d1opt:2)
      *
      *---------------------------------------------------------------
      * Data areas
      *---------------------------------------------------------------
      *
      * Local data area.
      *
     Dlda             uds                  dtaara(*lda)
     D  ldynfl                 1      1
     D  ldfmdy                 2      7  0
     D  ldfcymd                8     15  0
     D  ldtmdy                16     21  0
     D  ldtcymd               22     29  0
     D  ldinstcd              30     30
     D  ldcfqcd               31     31
     D  lducfl                32     32
     D  ldsmcd                33     34
     D  ldinfl                35     35
     D  ldcccd                36     45
     D  ldinsn                46     52  0
     D  ldicsn                53     59  0
      *
     D  ldoutq               401    410
     D  ldhold               411    414
     D  ldsave               415    418
     D  ldcopy               419    419  0
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * Clear and fill the subfile
      *
     C                   exsr      $clr1
     C                   exsr      $frsh1
      *
      * Set routine to display screen
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the error message subfile.
      *
     C                   exsr      $wrmsg
      *
      *
      * This subfile has Fold/Unfold capabilities.  The DDS uses the keywords
      * (SFLDROP, SFLFOLD) to determine whether the user is folded or unfolded
      * and to redisplay the screen in the same mode as when he last saw it.
      * Indicators 78 and 79 are assigned in the DDS to the keywords.
      *
     C                   setoff                                       7879
     C                   if        fold = '0'
     C                   seton                                        78
     C                   else
     C                   seton                                        79
     C                   endif
      *
      * Write screen 1 to crt
      *
     C                   write     tf432k1
     C                   write     tf432ec
     C                   exfmt     tf432c1
      *
      * Save the value of the lowest subfile rrn on the screen for
      * later repositioning of the subfile
      *
     C                   eval      wkflow = idflow
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-EXIT
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
      *
     C                   if        fld = 'C1YNFL' and
     C                             c1ynfl <> svynfl
     C                   exsr      $ynfl
     C                   endif
      *
     C                   if        error = 0
     C                   exsr      $chksv
     C                   else
     C                   eval      routne = scrn1
     C                   endif
      *
     C                   when      *in05 = *on and                              F5-refresh
     C                             (c1ynfl = yes or c1ynfl = no)
     C                   eval      reset = yes
     C                   eval      routne = set1
      *
     C                   when      *in06 = *on                                  F6-create
     C                   exsr      $creat
     C                   eval      hdpag1 = wkflow
     C                   eval      reset = yes
     C                   eval      routne = set1
      *
     C                   when      *in07 = *on                                  F7-listing
     C                   exsr      $listopts
     C                   z-add     wkflow        hdpag1
     C                   eval      routne = scrn1
      *
     C                   when      *in17 = *on                                  F17-print options
     C                   call      'RO890'
     C                   eval      routne = scrn1
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                     API
     C                   eval      hdpag1 = wkflow
     C                   eval      routne = scrn1
      *
      * Reposition the subfile if the user has changed any of the
      * restrictors or positioners or selectors in the control record.
      *
     C                   when      c1ynfl <> svynfl or                          Positioners,etc
     C                             c1icsn <> svicsn or
     C                             c1insn <> svinsn or
     C                             c1icdtmdy <> svicdtmdy or
     C                             c1instcd <> svinstcd or
     C                             c1cccd <> svcccd or
     C                             c1cfqcd <> svcfqcd or
     C                             c1ucfl <> svucfl or
     C                             c1smcd  <> svsmcd or
     C                             c1infl  <> svinfl
      *
     C                   if        c1ynfl <> svynfl                                              nge
     C                   exsr      $ynfl
     C                   endif                                                                   nge
      *
     C                   if        error = 0
     C                   exsr      $chksv
     C                   else
     C                   eval      routne = scrn1
     C                   endif
      *
     C                   when      *in25 = *on                                  F25-rollup
     C                   exsr      $load1
     C                   other
      *
      * User has pressed enter
      *
     C                   if        norecs = yes                                 If empty sfl
     C                   eval      routne = set1
     C                   else
     C                   eval      routne = edit1
     C                   endif                                                  If empty sfl
     C                   endsl
      *
      * Bring in the LDA to pick up any printer changes the user may
      * have made from called programs
      *
     C                   in        lda
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Save the control record positioners/selectors
      *----------------------------------------------------------------
      *
     C     $chksv        begsr
      *
     C                   eval      reset = no
     C                   eval      routne = set1
      *
     C                   move      c1ynfl        svynfl
     C                   z-add     c1icsn        svicsn
     C                   z-add     c1insn        svinsn
     C                   z-add     c1icdtmdy     svicdtmdy
     C                   move      c1instcd      svinstcd
     C                   move      c1cccd        svcccd
     C                   move      c1cfqcd       svcfqcd
     C                   move      c1ucfl        svucfl
     C                   move      c1smcd        svsmcd
     C                   move      c1infl        svinfl
      *
      * Save Invoice Charge Date in CCYYMMDD format for positioning in the database file.
      *
     C                   z-add     0             svicdt
     C                   if        svicdtmdy <> 0                               If date
     C     *mdy          test(d)                 c1icdtmdy              92
     C                   if        *in92 = *off                                 If OK date
     C     *mdy          move      c1icdtmdy     wkisodate
     C     *iso          move      wkisodate     svicdt
     C                   endif                                                  If OK date
     C                   endif                                                  If date
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Validate 'include posted charges' flag
      *---------------------------------------------------------------
      *
     C     $ynfl         begsr
      *
     C                   if        c1ynfl <> yes and
     C                             c1ynfl <> no
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09106'
     C                   endif
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Edit input fields for screen 1
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * First, edit all the selections entered by the user in the
      * subfile option field to see that valid selections were input
      *
     C                   exsr      $edop1
      *
      * If there are no errors in the subfile option selectors entered
      * by the user, then execute the subroutine to reread and process
      * the records selected by the user.  After completing the
      * subroutine, set the routine to start over.
      *
     C                   if        error = 0                                    If no error
     C                   exsr      $proc1
      *
     C                   if        rtncd = '00'
     C                   eval      routne = set1
     C                   else
     C                   eval      hdpag1 = wkflow
     C                   eval      routne = scrn1
     C                   endif
      *
      * else there were errors in the subfile options entered,
      * so set to redisplay screen with errors to user
      *
     C                   else
     C                   eval      routne = scrn1
     C                   endif                                                  If no error
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      *  Logic for F7-Listing
      *---------------------------------------------------------------
      *
     C     $listopts     begsr
      *
      * Call the pop-up window to allow user to enter listing options.
      * (Pass in the restrictors/selectors from this W/W)
      *
     C                   call      'TF4320'
     C                   parm      c1ynfl        xxynfl
     C                   parm      c1icdtmdy     xxfmdy
     C                   parm      0             xxfcymd
     C                   parm      c1icdtmdy     xxtmdy
     C                   parm      0             xxtcymd
     C                   parm      c1instcd      xxinstcd
     C                   parm      c1cfqcd       xxcfqcd
     C                   parm      c1ucfl        xxucfl
     C                   parm      c1smcd        xxsmcd
     C                   parm      c1infl        xxinfl
     C                   parm      c1cccd        xxcccd
     C                   parm      c1insn        xxinsn
     C                   parm      c1icsn        xxicsn
     C                   parm      *blank        rtncd
      *
      * If the user took the function key in the pop-up window to submit
      * the listing.
      *
     C                   if        rtncd = '08'
     C                   exsr      $list
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Listing logic
      *---------------------------------------------------------------
      *
     C     $list         begsr
      *
     C                   move      xxynfl        ldynfl
     C                   z-add     xxfmdy        ldfmdy
     C                   z-add     xxfcymd       ldfcymd
     C                   z-add     xxtmdy        ldtmdy
     C                   z-add     xxtcymd       ldtcymd
     C                   move      xxinstcd      ldinstcd
     C                   move      xxcfqcd       ldcfqcd
     C                   move      xxucfl        lducfl
     C                   move      xxsmcd        ldsmcd
     C                   move      xxinfl        ldinfl
     C                   move      xxcccd        ldcccd
     C                   z-add     xxinsn        ldinsn
     C                   z-add     xxicsn        ldicsn
      *
     C                   out       lda
      *
      * Move the 80-character compile time array 'CMD' to an
      * 80-character field for passing as a parm with QCMDEXC.
      *
     C                   movea     cmd           cmdsbm
     C                   call      'QCMDEXC'
     C                   parm                    cmdsbm
     C                   parm                    length
      *
      * Issue the standard request submission message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09003'
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Clear subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $clr1         begsr
      *
     C                   eval      svrrn1 = 0
      *
     C                   clear                   tf432s1
     C                   seton                                        83        sflclr
     C                   write     tf432c1
     C                   setoff                                       818283
      *                                                    81=sfldsp
      *                                                    82=sflend
      *                                                    83=sflclr
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Refresh/fill the subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $frsh1        begsr
      *
      * Set position in file
      *
     C                   if        c1icdtmdy = 0
     C     *hival        setll     tfj021g
     C                   else
     C     svicdt        setll     tfj021g
     C                   endif
      *
      *
      * The field 'reset' is a flag field to indicate whether you are
      * attempting to reposition the user close to where he was in the
      * subfile.
      * The lowest subfile RRN on the screen from the DSPF feedback
      * area (IDFLOW) was retrieved earlier and put in WKFLOW.
      * Add to WKFLOW the number of lines on your subfile page or the
      * number less 1 to determine a subfile RRN to reposition to.
      *
     C                   if        reset = yes
     C                   eval      maxrrn = wkflow + wkrlin
     C                   else
      *
      * Don't try to reposition the user, just start the subfile over
      *
     C                   eval      maxrrn = wkplin
     C                   endif
      *
      * Load the subfile until you have the required number of records.
      * The number will depend on whether uou are repositioning the
      * subfile or not. Stop if you get to the end of the subfile.
      *
     C                   dou       svrrn1 >= maxrrn or *in82 = *on
     C                   exsr      $load1
     C                   enddo
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Load subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $load1        begsr
      *
     C                   eval      hdrrn1 = svrrn1
      *
      * Set the count of records on the subfile page to zero.
      *
     C                   z-add     0             count
      *
      * Fill the subfile until the end of the database file or
      * you have filled all the lines on the subfile page.
      *
     C                   setoff                                       82
     C                   dou       *in82 = *on or count >= wkplin               Do fill
     C                   read      tfj021g                                82
     C                   if        *in82 = *off                                 If read
      *
     C                   if        c1ynfl = yes or                              If process
     C                             (c1ynfl = no and icinstcd <> 'P')
      *
     C                   z-add     icicsn        d1icsn
     C                   move      icinstcd      d1instcd
     C                   move      iccccd        d1cccd
     C                   move      icsmcd        d1smcd
     C                   move      icinfl        d1infl
     C                   z-add     icinsn        d1insn
     C                   z-add     icicam        d1icam
     C                   move      iciccom       d1iccom
      *
     C                   move      cccfqcd       d1cfqcd
     C                   move      ccucfl        d1ucfl
     C                   move      ccsmcd        d1smcd
      *
      * If there is a "comment" move the text "COM:" to a subfile field.
      * (I was just trying to make the screen look better; so, tried this
      * instead of hardcoding the 'text' in the DSPF.
      *
     C                   if        d1iccom <> *blank
     C                   eval      d1comtext = 'Comment:'
     C                   else
     C                   move      *blank        d1comtext
     C                   endif
      *
      * Flip Invoice Charge Date from CCYYMMDD to MMDDYY for display
      *
     C     *iso          test(d)                 icicdt                 92
     C                   if        *in92 = *off                                 If OK date
     C                   move      icicdt        wkisodate
     C     *mdy          move      wkisodate     d1icdtmdy
     C                   endif                                                  If OK date
      *
      *
      * Only include records that match the user's selectors
      *
     C                   if        c1icsn <> 0 and                              If charge nbr
     C                             c1icsn <> d1icsn
     C                   else
      *
     C                   if        c1insn <> 0 and                              If inv nbr
     C                             c1insn <> d1insn
     C                   else
      *
     C                   if        c1instcd <> *blank and                       If status
     C                             c1instcd <> d1instcd
     C                   else
      *
     C                   if        c1cccd <> *blank and                         If charge code
     C                             c1cccd <> d1cccd
     C                   else
      *
     C                   if        c1ucfl <> *blank and                         If user control
     C                             c1ucfl <> d1ucfl
     C                   else
      *
     C                   if        c1cfqcd <> *blank and                        If frequency
     C                             c1cfqcd <> d1cfqcd
     C                   else
      *
     C                   if        c1smcd <> *blank and                         If system module
     C                             c1smcd <> d1smcd
     C                   else
      *
     C                   if        c1infl <> *blank and                         If include
     C                             c1infl <> d1infl
     C                   else
      *
     C                   add       1             count
     C                   add       1             hdrrn1
     C                   move      *blank        d1opt
     C                   write     tf432s1
     C                   seton                                        81
      *
      * For positioning, place the subfile relative record number into
      * the sflrcdnbr field (hdpag1)
      *
     C                   eval      hdpag1 = hdrrn1
      *
     C                   endif                                                  If include
     C                   endif                                                  If system module
     C                   endif                                                  If frequency
     C                   endif                                                  If user control
     C                   endif                                                  If charge code
     C                   endif                                                  If status
     C                   endif                                                  If inv nbr
     C                   endif                                                  If charge nbr
     C                   endif                                                  If process
     C                   endif                                                  If read
     C                   enddo                                                  Do fill
      *
      * If no records were written to the subfile, then issue
      * the standard message 'No data to Display'.
      *
     C                   if        hdrrn1 = 0                                   If no recs
     C                   eval      norecs = yes
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09002'
     C                   endif
      *
     C                   else
     C                   eval      norecs = no
     C                   endif                                                  If no recs
      *
     C                   eval      svrrn1 = hdrrn1
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Call the create program when the user takes F6
      *---------------------------------------------------------------
      *
     C     $creat        begsr
      *
     C                   call      'TF132'
     C                   parm      create        mode
     C                   parm      0             d1icsn
     C                   parm      '00'          rtncd
      *
     C                   endsr
      /EJECT
      *--------------------------------------------------------------------------------------
      * Read/edit changed subfile records for valid subfile options on screen 1
      *--------------------------------------------------------------------------------------
      *
     C     $edop1        begsr
      *
     C                   eval      error = 0
      *
      * Read all changed subfile records, editing for valid options
      *
     C                   setoff                                       80
     C                   dou       *in80 = *on                                  Do readc
     C                   readc     tf432s1                                80
     C                   if        *in80 = *off                                 If rec read
      *
      * Set off error indicator for subfile option field
      *
     C                   setoff                                       30
      *
      * Convert option user entered to standard format. For example,
      * a ' 1', '01', and '1 ' must be standardized to ' 1'.
      *
     C                   if        wkopt2 = *blank                              If 2 = blank
     C                   eval      wkopt2 = wkopt1
     C                   eval      wkopt1 = *blank
     C                   endif                                                  If 2 = blank
      *
     C                   if        wkopt1 = *zero                               If 1 is zero
     C                   eval      wkopt1 = *blank
     C                   endif                                                  If 1 is zero
      *
      * Test for valid subfile option entry on all changed records
      *
     C                   if        d1opt <> ' 2' and                            If bad opt
     C                             d1opt <> ' 4' and
     C                             d1opt <> ' 5' and
     C                             d1opt <> ' 7' and
     C                             d1opt <> '  '
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09006'
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If bad opt
      *
      *
      * Make additional checks
      *
      * Revising
     C                   select
     C                   when      d1opt = ' 2'
     C                   exsr      $opt2
      * Deleting
     C                   when      d1opt = ' 4'
     C                   exsr      $opt4
      * Viewing Invoice
     C                   when      d1opt = ' 7'
     C                   exsr      $opt7
     C                   endsl
      *
      * Rewrite the subfile record with the modified data tag on so it
      * will be reread and processed.
      *
     C                   if        error = 0 and d1opt = *blank
     C                   setoff                                       85
     C                   else
     C                   seton                                        85
     C                   endif
      *
     C                   update    tf432s1
     C                   setoff                                       8530
     C                   endif                                                  If rec read
     C                   enddo                                                  Do readc
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------------------------------
      * Edits for Option 2=Revise
      *---------------------------------------------------------------------------------------
      * You cannot revise an Invoice Charge when:
      *   1) the status is Posted
      *
     C     $opt2         begsr
      *
      * Charge has a status of Posted
      *
     C                   if        d1instcd = 'P'                               If posted
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08028'
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If posted
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------------------------------
      * Edits for Option 4=Delete
      *---------------------------------------------------------------------------------------
      * You cannot delete an Invoice Charge when:
      *   1) the status is Posted
      *   2) the User-Control Flag for the 'Charge Code' is NO
      *
     C     $opt4         begsr
      *
      * Charge has a status of Posted
      *
     C                   if        d1instcd = 'P'                               If posted
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08027'
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If posted
      *
      * Charge has a Charge Code that is not User-Controlled
      *
     C                   if        d1ucfl <> yes
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08026'
     C                   exsr      $err1
     C                   endif
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------------------------------
      * Edits for Option 7=View Invoice
      *---------------------------------------------------------------------------------------
      *
      * You cannot View the Invoice if no Invoice has been assigned to this
      * Invoice Charge.
      *
     C     $opt7         begsr
      *
     C                   if        d1insn = 0                                   If no invoice
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08041'
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If no invoice
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------------------------------
      * Read subfile records and process user selections for screen 1
      *---------------------------------------------------------------------------------------
      *
     C     $proc1        begsr
      *
     C                   z-add     0             error
     C                   move      '00'          rtncd
      *
      * Read all the changed subfile records processing the subfile selection.
      *
     C                   setoff                                       80
     C                   dou       *in80 = *on                                  Do process
     C                   readc     tf432s1                                80
     C                   if        *in80 = *off                                 If rec read
     C                   if        rtncd = '00'                                 If enter
      *
      * Option: Revise
     C                   select
     C                   when      d1opt = ' 2'
     C                   eval      reset = yes
     C                   call      'TF132'
     C                   parm      revise        mode
     C                   parm                    d1icsn
     C                   parm                    rtncd
      *
      * Option: Delete
     C                   when      d1opt = ' 4'
     C                   eval      reset = yes
     C                   call      'TF132'
     C                   parm      delete        mode
     C                   parm                    d1icsn
     C                   parm                    rtncd
      *
      * Option: View
     C                   when      d1opt = ' 5'
     C                   eval      reset = yes
     C                   call      'TF732'
     C                   parm                    d1icsn
     C                   parm                    rtncd
      *
      * Option: View Invoice
     C                   when      d1opt = ' 7'
     C                   eval      reset = yes
     C                   call      'TF733'
     C                   parm                    d1insn
     C                   parm                    rtncd
     C                   endsl
      *
      * Upon returning from the called program,
      * clear the subfile option selected by the user and rewrite
      * the subfile record.
      *
     C                   eval      d1opt = *blank
     C                   setoff                                       85
     C                   else
     C                   seton                                        85
     C                   endif                                                  If enter
      *
     C                   update    tf432s1
     C                   endif                                                  If rec read
     C                   enddo                                                  Do process
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * F4 prompt on screen 1
      *---------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      * Include posted Invoice Charges
      *
     C                   select
     C                   when      fld = 'C1YNFL'
     C                   call      'HP522'
     C                   parm                    xxynfl
     C                   seton                                        51
     C                   if        xxynfl <> *blank
     C                   movel     xxynfl        c1ynfl
     C                   endif
      *
      * Invoice status code
      *
     C                   when      fld = 'C1INSTCD'
     C                   call      'TF512'
     C                   parm      *blank        xxinstcd
     C                   parm      *blank        xxinstds
     C                   seton                                        52
     C                   if        xxinstcd <> *blank
     C                   move      xxinstcd      c1instcd
     C                   endif
      *
      * Invoice Number
      *
     C                   when      fld = 'C1INSN'
      *
     C                   if        c1ynfl = no
     C                   move      'X'           xxinstcd
     C                   else
     C                   move      *blank        xxinstcd
     C                   endif
      *
     C                   call      'TF514'
     C                   parm                    xxinstcd
     C                   parm      0             xxinsn
     C                   seton                                        56
     C                   if        xxinsn <> 0
     C                   z-add     xxinsn        c1insn
     C                   endif
      *
      * Charge code
     C                   when      fld = 'C1CCCD'
     C                   call      'TF513'
     C                   parm      ' '           xxaist
     C                   parm      ' '           xxucfl
     C                   parm      *blank        xxcccd
     C                   parm      *blank        xxccds
     C                   seton                                        53
     C                   if        xxcccd <> *blank
     C                   move      xxcccd        c1cccd
     C                   endif
      *
      * Charge frequency code
      *
     C                   when      fld = 'C1CFQCD'
     C                   call      'TF508'
     C                   parm      *blank        xxcfqcd
     C                   parm      *blank        xxcfqds
     C                   seton                                        54
     C                   if        xxcfqcd <> *blank
     C                   movel     xxcfqcd       c1cfqcd
     C                   endif
      *
      * User-controlled flag
      *
     C                   when      fld = 'C1UCFL'
     C                   call      'HP522'
     C                   parm                    xxynfl
     C                   seton                                        57
     C                   if        xxynfl <> *blank
     C                   movel     xxynfl        c1ucfl
     C                   endif
      *
      * System module
     C                   when      fld = 'C1SMCD'
     C                   call      'TF509'
     C                   parm      *blank        xxsmcd
     C                   parm      *blank        xxsmds
     C                   seton                                        55
     C                   if        xxsmcd <> *blank
     C                   movel     xxsmcd        c1smcd
     C                   endif
      *
      * Include in invoice total flag
      *
     C                   when      fld = 'C1INFL'
     C                   call      'HP522'
     C                   parm      *blank        xxynfl
     C                   seton                                        58
     C                   if        xxynfl <> *blank
     C                   movel     xxynfl        c1infl
     C                   endif
     C                   other
      *
      * F4 not valid for this field...issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error                                        013
     C                   movel     'HS09011'     mgid(e)
     C                   endif
     C                   endsl
      *
     C                   endsr
      /EJECT
      *-----------------------------------------------------------------------------------
      * Set the subfile to redisplay at the first page that has errors on screen 1
      *-----------------------------------------------------------------------------------
      *
     C     $err1         begsr
      *
     C                   if        error = 1
     C                   eval      hdpag1 = hdrrn1
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Seton last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        lr
     C                   endsr
      *
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *   None
      *
      * Key lists
      *   None
      *
      * Retrieve/initialize "printer" fields in the LDA
      *
     C                   call      'RO891CL'
     C                   in        lda
      *
      * Initialize LDA fields
      *
     C                   move      *blank        ldynfl
     C                   z-add     0             ldfmdy
     C                   z-add     0             ldfcymd
     C                   z-add     0             ldtmdy
     C                   z-add     0             ldtcymd
     C                   move      *blank        ldinstcd
     C                   move      *blank        ldcfqcd
     C                   move      *blank        lducfl
     C                   move      *blank        ldsmcd
     C                   move      *blank        ldinfl
     C                   move      *blank        ldcccd
     C                   z-add     0             ldicsn
     C                   z-add     0             ldinsn
     C                   out       lda
      *
      * Default to 'no' the value for control field 'include posted charges'
      *
     C                   move      no            c1ynfl
     C                   move      no            svynfl
      *
      * To support F5-Refresh, logic requires the number of lines on
      * the subfile page and also the number of lines less 1.  By
      * setting these values up as constant work fields, the processing
      * logic can be standardized between programs.
      * (Note: Since the subfile has fold/drop, we double the SFLPAG number.)
      *
     C                   z-add     10            wkplin
     C     wkplin        sub       1             wkrlin
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
      *****************************************************************
      * COMPILE TIME ARRAY 'CMD' USED IN QCMDEXC
      *****************************************************************
** CMD table 'CMD' submits listing when F7 selected
SBMJOB CMD(CALL PGM(TF432CL )) JOB(INVCHGLST) JOBQ(*JOBD)
