      *These two lines here to aid in debugging when needed***************
     H debug(*yes)
     H option(*srcstmt:*nodebugio)
      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      HPS Data Mart
      * PROGRAM:     HP201 - Build DataMart BGF Weekly Production from HPS
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     06/05/00
      *
      * FUNCTION:    This file in the Data Mart is 1) cleared/built for a 'history' run or
      *              2) records are deleted/written for a 'current' run.
      *
      *              Only BGF farms have weekly production data.
      *
      * Please Note: Week of Quarter may not correspond to an accting qtr
      *  (01/01/02-03/31/02).  For Example 3/31/02 is week 14 in the Calendar file
      *  which is the first day of week 14.  3/31/02 is technically qtr 1
      *  according to an accting calendar.  But we are looking at this
      *  according to the life cycle of a hog. In which case 3/31 should be
      *  the first day of quarter 2.
      *
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 02/04/03  LeAnne Fedor
      *           Added more hardcoded 'population code' logic for when code is 'Acclimated'.
      *
      * 10/22/03  LeAnne Fedor
      *           Added fields:
      *               gilt total stillborns
      *               gilt total mummies
      *               15-16 day weaned sows
      *               17+ day weaned sows
      *               euthanized gilts
      *               euthanized sows
      *           Changed text on fields:
      *               from: gilts dead     to:  gilts dead naturally
      *               from: sows dead      to:  sows dead naturally
      *           Changed the calculation of Datamart field called 'Sows Weaned' to include
      *            all 3 'wean' fields: early, 15-16 days, 17+ days.
      *
      * 03/24/04  LeAnne Fedor
      *           Added fields:
      *               received head transferred in from grow finish
      *               received pounds transferred in from grow finish
      *
      * 06/30/04  LeAnne Fedor
      *           Added 1 new field: Number of Gilts Bred with Passed Dates
      *           Removed 10 fields: number of good piglets farrowed
      *                              number of dome heads
      *                              number of splays
      *                              number of weak and lethargic
      *                              number of scours
      *                              number of good piglets weaning next
      *                              number of lame
      *                              number of under 7 pounds
      *                              number of rough hair coat
      *                              number of swollen joints
      *
      * 12/28/04  LeAnne Fedor
      *           Recompile only. New field 'Farm Size' added to Datamart Farm Site
      *           file.
      *
      * 02/01/05  LeAnne Fedor
      *           Added Sire Line Company and Prime Line to Datamart file. SO,
      *           added logic to populate these new fields.
      *
      * 02/07/05  LeAnne Fedor
      *           File and logic changes:
      *                BGF Weekly Production file:
      *                       Removed: Average Lactation Pounds
      *                         Added: Transferred In Open Gilts
      *
      *                Datamart BGF Weekly Production file:
      *                       Removed: Total Lactation Pounds
      *                         Added: Transferred In Open Gilts
      *
      * 06/06/05  LeAnne Fedor
      *           Recompile only. Received Date was added as a key field on
      *           HSL084C.
      *
      * 07/06/05  LeAnne Fedor
      *           Added 1 new field and logic to the Datamart BGF Weekly Production file.
      *                Field: Average Daily Beginning Piglet Inventory
      *
      * 08/17/05  LeAnne Fedor
      *           The workfield used to accumulate head for the calc of
      *           Average Daily Beginning Piglet Inventory was too small. Increased it
      *           from 5,0 to 7,0.
      *
      * 08/23/05  LeAnne Fedor
      *           Added 1 new field to the Datamart BGF Daily and Weekly Production files:
      *                Field: Man hours
      *
      * 03/22/06  LeAnne Fedor
      *           Added 3 new fields to the Datamart BGF Weekly Production file:
      *                Field:  Weaning sire line code
      *                        Weaning sire line company
      *                        Weaning prime line
      *
      * 04/14/06  LeAnne Fedor
      *           Changed the logic for populating all four "sire line code" fields.
      *           See the $sire subroutine.
      *
      * 04/24/06  LeAnne Fedor
      *           Four new fields/logic were added to Datamart BGF Weekly Production file.
      *                 Cognos Report Grouping
      *                 Weaning Cognos Report Grouping
      *                 Report PCP Cognos Report Grouping
      *                 Report Farrowed Cognos Report Grouping
      *
      * 04/27/06  LeAnne Fedor
      *           Changed the "NC" (not-complete sales movement) logic. We
      *           now handle NC like "FP" (fully paid) instead of like
      *           "SH" (shipped).
      *
      * 06/15/06  LeAnne Ramsey
      *           Added logic for new field "Total Gilt Weight @ 28 Weeks". This field
      *           is calculated using the new field "Avg Gilt Weight @ 28 Weeks" which
      *           was added to the HPS BGF Weekly Production file.
      *
      * 05/25/07  Sharon Zurn
      *          -Added new target fields to HPPB092 and logic to populate them.
      *          -Added routine to calculate the quarter for key to retrieve
      *           the target from HSP096.
      *          -Removed routine $Workaround
      *          -Removed old comments in heading.
      *
      * 07/26/07  Barb Gutierrez
      *          -Per Sami, they do not want the Female weekly inventory target averaged
      *           over the 13 weeks.
      *
      * 09/10/07  LeAnne Ramsey
      *           Renamed fields:
      *            CAQTR   to CAHPSQT
      *            CAWKQTR to CAHPSWKQT
      *
      * 09/26/07  LeAnne Ramsey
      *           Cleaned up code.
      *
      * 08/04/08  LeAnne Ramsey
      *           Deleted fields: BPPSGLSV - Nbr Gilts Bred w/Passed Date
      *                           BPWSLB   - Weekly Ending Lbs Supplement Used
      *                           BPP2LT   - Total P2 Litters Farrowed
      *                           BPTDGB   - Total Days Gilt Breeding Age
      *                           BPIOGLHD - Transferred in Open Gilts
      *                           BPOOGLHD - Gilts Transferred Out Open
      *                           BP17WNLT - 17+ Day Weaned Sows
      *                           BPTGLLB  - Total Gilt Weight @ 28 Weeks
      *
      * 10/08/08  LeAnne Ramsey
      *           File HSP094-BGF Weaned Piglet Cost is obsolete. There has
      *           been no data entered in this file since 02/2001.
      *           The users have agreed that we can delete it.
      *
      * 11/06/08  LeAnne Ramsey
      *           Added 3 new fields to: HSP096-BGF Yearly Targets
      *                                  HPPB092-Datamart BGF: Weekly Production
      *            1) open gilt pool eligible
      *            2) litters farrowed/mated female/year
      *            3) pigs weaned/mated female/year
      *
      * 05/28/09  LeAnne Ramsey
      *           Added new field "Farrowing Crates" to:
      *                HSP096-BGF Yearly Targets
      *                HPPB092-Datamart BGF: Weekly Production
      *
      * 07/06/09  LeAnne Ramsey
      *           Recompile only. Added new field 'Continuous Flow Flag' to Hog Group file.
      *
      * 09/01/09  LeAnne Ramsey
      *           Added new field "Report Total Litters Farrowed" to:
      *                HPPB092-Datamart BGF: Weekly Production
      *
      * 01/14/10  LeAnne Ramsey
      *           Recompile only. Changed text on BPLVHD and BPLVLB in:
      *                HPPB092-Datamart BGF: Weekly Production
      *
      * 01/26/10  LeAnne Ramsey
      *           Tweaked logic for retriving the "target table" when it is Week 53.
      *
      * 10/14/10  LeAnne Ramsey  (E1079)
      *           Recompile only. Sire Line Company is now 2-characters instead
      *           of one in file HSP098-Sire Lines.
      *
      * 11/10/10  LeAnne Ramsey (E1151)
      *           Recompile only. Increased some head fields from 5,0 to 6,0 in HSP096.
      *
      * 01/10/11  LeAnne Ramsey (C1258)
      *           Week 52 of 2010 has a WeekEnding Date of 20110101. Our logic in $table
      *           retrieves a 2011 Target Table...when we want the 2010 Target Table.
      *           Since we hope we are on MTech by next YearEnd..and nothing seems to
      *           work for every situation the user comes up with...I hardcoded 2010 Week 52
      *           in $table.
      *
      * 01/13/11  LeAnne Ramsey (C1272)
      *           When we increased head fields to 6,0 (11/10/10), I failed to increase the
      *           size of workfield WKQTRVAL to 6,0.
      *
      * 08/24/12  LeAnne Ramsey (C2237)
      *           The change I put in on 1/13/11 (C1272) is causing 'targets' to appear for
      *           new Farms 18 and 19...which do not have 'targets'.   So, I added
      *           a check of *in92 after the READPE in $table.
      *
      * 10/15/13  LeAnne Ramsey (E2831)
      *           Recompile only. Added field 'MTech Reference'.
      *
      * 03/25/20  Danny Nguyen - P405 - Farm Number Increase
      *           Recompile only. Increased Bin Code (@@BNCD) in HSPREF file from 5A to 6A.
      *
      * 05/10/22 Eric L SDN736 Recompiled ticket nbr increase (TKNO & RTNO 7.0 TO 9.0)
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhsp018    if   e           k disk    rename(fsrec:fsrec4) prefix(p4)
      *  Farm site
      *
      *
     Fhsl034d   if   e           k disk
      *  Hog group
      *
      *
     Fhsl038b   if   e           k disk
      *  Feed ticket detail
      *
      *
     Fhsl064c   if   e           k disk
      *   Check detail
      *
      *
     Fhsl065c   if   e           k disk
      *    Check adjustments
      *
      *
     Fhsp071    if   e           k disk
      *  Ration
      *
      *
     Fhsl081d   if   e           k disk
      *    Weekly sire line doses
      *
      *
     Fhsl074d   if   e           k disk    rename(mhrec:mhrecd)
      *  Transfer movement header
      *
      *
     Fhsl074h   if   e           k disk
      *  Transfer movement header  (key fields overridden in CLP)
      *
      *
     Fhsl074j   if   e           k disk    rename(mhrec:mhrecj)
      *  Transfer movement header
      *
      *
     Fhsp075    if   e           k disk
      *  Transfer movement detail
      *
      *
     Fhsl084c   if   e           k disk
      *  Sales movement header
      *
      *
     Fhsp085    if   e           k disk
      *  Sales movement detail
      *
      *
     Fhsl092c   if   e           k disk
      *  BGF weekly production  (records selected with open query)
      *
      *
     Fhsl092a   if   e           k disk    rename(bprec:bpreca) prefix(p2)
      *  BGF weekly production
      *
      *
     Fhsl092b   if   e           k disk    rename(bprec:bprecb) prefix(p3)
      *  BGF weekly production
      *
      *
     Fhsp093    if   e           k disk
      *    BGF farrowing and pregnancy check events
      *
      *
     Fhsl093a   if   e           k disk    rename(berec:bereca)
      *    BGF farrowing and pregnancy check events
      *
      *
     Fhsp096    if   e           k disk
      *    BGF yearly targets
      *
      *
     Fhsl097c   if   e           k disk
      *    BGF target table/farm links
      *
      *
     Fhsp098    if   e           k disk
      *   Sire Lines
      *
      *
     Fhppb082   if   e           k disk
      *  DataMart BGF: Daily Production
      *
      *
     Fcalcalb   if   e           k disk
      *  Calendar file
      *
      *
     Fhppb092   o    e             disk    rename(bprec:bprec1) prefix(p1)
      *    DataMart BGF: Weekly Production
      *
      /eject
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
     D arsicd          s              5    dim(500)
     D arsdono         s              7  0 dim(500)
      *
     D arcog           s              5    dim(500)
     D arcdono         s              7  0 dim(500)
      *
      * Array indexes
      *
     D w               s              3  0
     D x               s              3  0
      *
     D y               s              3  0
     D z               s              3  0
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Control fields
      *
     D count           s              3  0
      *
      *
      * Workfields for Date Manipulation
      *
     D wkisodate       s               d   datfmt(*iso)
      *
      *
      * Workfields
      *
     D wkttbcd         s                   like(bfttbcd)
     D wkcdyr          s                   like(bpcdyr)
     D wkrem           s              2  0
     D wkqtrval        s              6  0
     D wkvalue         s              5  0
      *
     D wkfwinhd        s                   like(byfwinhd)
     D wkswinhd        s                   like(byfwinhd)
      *
     D wkcog           s                   like(sigg0)
     D wkgg0           s                   like(sigg0)
     D wksicd          s                   like(swsicd)
      *
     D wkdono          s                   like(swdono)
     D wksdono         s                   like(swdono)
     D wkcdono         s                   like(swdono)
      *
     D wksicomp        s                   like(sisicomp)
     D wkprime         s                   like(siprime)
     D wkhd            s              7  0
     D wkavlb          s              7  2
      *
     D wkevfl          s              1
     D wkbegdt         s                   like(bpwedt)
     D wkenddt         s                   like(bpwedt)
     D wkwedt          s                   like(bpwedt)
     D wkcymdiso       s               D   datfmt(*iso)
      *
      *
      * Parms
      *
     D xxperiod        s                   like(bpacpe)
     D xxquarter       s                   like(p1bpacqr)
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
      * Read each record in the HPS BGF Weekly Production file.
      * (records were selected in an open query for 'history' or 'current')
      *
     C                   dou       *in90 = *on                                  Main do
     C                   read      hsl092c                                90
     C                   if        *in90 = *off and bpcdyr > 2003               If not EOF
      *
      * Move CCYYMMDD field to:
      * a) ISO date field
      * b) 8,0 date field
      *
     C                   move      bpwedt        p1bpwedt
     C                   z-add     bpwedt        p1bp80wedt
      *
      *
      * Populate fields that map directly file-to-file.
      *
     C                   exsr      $directmap
      *
      * Retrieve production type associated with the farm site.
      *
     C                   exsr      $ptcd
      *
      *
      * Retrieve/calculate:
      *   a) retrieve prior week's record to get:
      *              beginning gilt/sow inventory
      *   b) preg checked positive info
      *   c) farrowing info
      *   d) abortion info
      *
     C                   exsr      $prior
     C                   exsr      $preg
     C                   exsr      $farr
     C                   exsr      $abort
      *
      * Retrieve the head received on transfer movements and sales out of this
      * farm for this week.
      *
     C                   exsr      $daterange
     C                   exsr      $tranout
     C                   exsr      $sales
      *
      *
      * Retrieve the head scheduled out on transfer movements into wean-to-finish
      * groups for this week on scheduled transfers.
      *
     C                   exsr      $schedtran
      *
      * Retrieve the head/lbs received on transfer movements into this farm from
      * Grow Finish groups for this week.
      *
     C                   exsr      $tranin
      *
      * Retrieve feed pounds
      *
     C                   exsr      $feed
      *
      * Populate Sire Line (Services) info
      *
     C                   seton                                        88
     C                   exsr      $sire
     C                   z-add     wkdono        p1bpdono
     C                   move      wksicd        p1bpsicd
     C                   move      wksicomp      p1bpsicomp
     C                   z-add     wkprime       p1bpprime
     C                   move      wkgg0         p1bpgg0
     C                   setoff                                       88
      *
      * Populate Sire Line (Weaning) info
      *
     C                   seton                                        87
     C     p1bpwedt      subdur    133:*days     wkcymdiso
     C                   move      wkcymdiso     wkwedt
     C                   exsr      $sire
     C                   move      wksicd        p1bpwsicd
     C                   move      wksicomp      p1bpwsicomp
     C                   z-add     wkprime       p1bpwprime
     C                   move      wkgg0         p1bpwgg0
     C                   setoff                                       87
      *
      * Retrieve Targets
     C                   exsr      $targets
      *
      * Populate weekly inventory fields based on population code value.
      * (NOTE: You need target values retrieved in the subroutine above
      * before you populate the Weekly Inventory fields.)
      *
     C                   exsr      $weeklyinv
      *
      *
      * We have to hard-code special 'production type' logic for Farm 30.
      * If the data is on/before 8/31/02, we will use GEN. For records after this
      * date, we will use 'COM'.
      *
     C                   if        p1bpfscd = 30                                If Farm 30
     C                   if        p1bp80wedt <= 20020831
     C                   movel(p)  'GEN'         p1bpptcd
     C                   else
     C                   movel(p)  'COM'         p1bpptcd
     C                   endif
     C                   endif                                                  If Farm 30
      *
      * Retrieve/calc the Average Daily Beginning Piglet Inventory
      *
     C                   exsr      $piglet
      *
      * Write record
     C                   write     bprec1
     C                   clear                   bprec1
      *
     C                   endif                                                  If not EOF
     C                   enddo                                                  Main do
      *
     C                   seton                                        lr
      /eject
      *-----------------------------------------------------------------------------------------
      * Setup fields that are a direct map from the HPS file
      *-----------------------------------------------------------------------------------------
      *
     C     $directmap    begsr
      *
     C                   move      bpfsbo        p1bpfsbo
     C                   z-add     bpfscd        p1bpfscd
      *
     C                   move      bppocd        p1bpdpfl
      *
     C                   z-add     bpcdyr        p1bpcdyr
     C                   z-add     bpcdwk        p1bpcdwk
     C                   z-add     bppicdt       p1bppicdt
     C                   z-add     bpacyr        p1bpacyr
     C                   z-add     bpacpe        p1bpacpe
     C                   z-add     bpacwk        p1bpacwk
      *
      * Call the generic program to retrieve the quarter associated with the
      * accounting period.
      *
     C                   call      'HP8006'
     C                   parm      p1bpacpe      xxperiod
     C     p1bpacqr      parm      0             xxquarter
      *
     C                   z-add     bpwnsv        p1bpwnsv
     C                   z-add     bplwnsv       p1bplwnsv
     C                   z-add     bprtsv        p1bprtsv
     C                   z-add     bpglsv        p1bpglsv
      *
     C                   z-add     bpbredpr      p1bpbredpr
      *
     C                   z-add     bpopglhd      p1bpopglhd
     C                   z-add     bpopsohd      p1bpopsohd
      *
     C                   z-add     bpabhd        p1bpabhd
     C                   z-add     bpglabhd      p1bpglabhd
     C                   z-add     bpnipqt       p1bpnipqt
      *
     C                   z-add     bpgllt        p1bpgllt
     C                   z-add     bpglbahd      p1bpglbahd
     C                   z-add     bpglsbhd      p1bpglsbhd
     C                   z-add     bpglmmhd      p1bpglmmhd
     C                   z-add     bptolt        p1bptolt
     C                   z-add     bpbahd        p1bpbahd
     C                   z-add     bpsbhd        p1bpsbhd
     C                   z-add     bpmmhd        p1bpmmhd
      *
     C                   z-add     bptolshd      p1bptolshd
      *
     C                   z-add     bpewnlt       p1bpewnlt
     C                   z-add     bpwnlt        p1bpwnlt
     C                   eval      p1bptownlt = bpewnlt + bpwnlt
      *
     C                   z-add     bptownhd      p1bptownhd
     C                   z-add     bpadwn        p1bpadwn
      *
     C                   z-add     bpenplhd      p1bpenplhd
      *
     C                   z-add     bparglhd      p1bparglhd
     C                   z-add     bpibglhd      p1bptiglhd
     C                   z-add     bpslglhd      p1bpslglhd
     C                   z-add     bpddglhd      p1bpddglhd
     C                   z-add     bpeuglhd      p1bpeuglhd
     C                   z-add     bpobglhd      p1bptoglhd
      *
     C                   z-add     bparsohd      p1bparsohd
     C                   z-add     bpibsohd      p1bptisohd
     C                   z-add     bpslsohd      p1bpslsohd
     C                   z-add     bpddsohd      p1bpddsohd
     C                   z-add     bpeusohd      p1bpeusohd
     C                   z-add     bpobsohd      p1bptosohd
     C                   z-add     bpoosohd      p1bpoosohd
      *
     C                   z-add     bpglsohd      p1bpengshd
      *
     C                   z-add     bparbohd      p1bparbohd
     C                   z-add     bpslbohd      p1bpslbohd
     C                   z-add     bpddbohd      p1bpddbohd
     C                   z-add     bpbohd        p1bpbohd
     C                   z-add     bpmanhr       p1bpmanhr
      *
     C                   endsr
      /eject
      *-----------------------------------------------------------------------------------------
      * Populate Some Weekly Inventory Head fields based on the value of Population Code
      *-----------------------------------------------------------------------------------------
      *
      * (Note: You have to have executed the 'Targets' subroutine prior to executing
      * this subroutine.)
      *
     C     $weeklyinv    begsr
      *
      * When the Population Code is 'Fully Populated'
      * 1) Set Female Weekly Inventory Head equal to Gilt and Sow Ending Inventory
      * 2) Set Sow Weekly Inventory Head equal to:
      *        Gilt and Sow Ending Inventory - Open Gilt Pool Eligible
      *
     C                   select
     C                   when      p1bpdpfl = 'F'
     C                   eval      p1bpfwinhd = p1bpengshd
     C                   eval      p1bpswinhd = p1bpengshd - p1bpopglhd
      *
      * When the Population Code is 'Acclimated'
      * 1) Set Female Weekly Inventory Head to zero
      * 2) Set Sow Weekly Inventory Head to zero
      *
     C                   when      p1bpdpfl = 'A'
     C                   z-add     0             p1bpfwinhd
     C                   z-add     0             p1bpswinhd
     C                   other
      *
      * When the Population Code is 'Re-pop' or 'De-pop', use Target values to populate:
      * 1) Set Female Weekly Inventory Head
      * 2) Set Sow Weekly Inventory Head
      *
      * We will no longer keep targets for Sow, so using Female target to
      * populate the female and sow fields.
      *
     C                   z-add     wkfwinhd      p1bpfwinhd
     C                   z-add     wkfwinhd      p1bpswinhd
     C                   endsl
      *
     C                   endsr
      /eject
      *-----------------------------------------------------------------------------------------
      * Populate production type
      *-----------------------------------------------------------------------------------------
      *
     C     $ptcd         begsr
      *
     C     p1bpfscd      chain     hsp018                             92
     C                   if        *in92 = *off
     C                   move      p4fsptcd      p1bpptcd
     C                   endif
      *
     C                   endsr
      /eject
      *-----------------------------------------------------------------------------------------
      * Retrieve prior week's record to get inventories
      *-----------------------------------------------------------------------------------------
      *
      * Populate the 'beginning inventory' fields with the 'ending' value from last week's record
      *
     C     $prior        begsr
      *
     C     key04         setll     hsl092a
     C     p1bpfscd      readpe    hsl092a                                92
     C                   if        *in92= *off
     C                   z-add     p2bpglsohd    p1bpbggshd
     C                   z-add     p2bpenplhd    p1bpbgplhd
     C                   endif
      *
     C                   endsr
      /eject
      *-----------------------------------------------------------------------------------------
      * Retrieve the pregnancy checked positive info
      *-----------------------------------------------------------------------------------------
      *
     C     $preg         begsr
      *
      *
      * You will be retrieving two unrelated and distinct sets of pregnancy data
      * for this weekly record:
      *  1) The number of sows that ultimately conceived from the services performed
      *     this week.
      *  2) The number of sows that were 'preg checked positive' this week along with
      *     the associated total number of sows serviced.  (When the users enter the
      *     pregnancy head into the system, they also enter the year/week that the
      *     sows were serviced.)
      *
      *
      *------------------
      * Set 1 Data:
      *------------------
      *
      * The Datamart record that we are writing contains the number of sows
      * that were serviced this year/week. We want to retrieve the 'preg checked
      * positive' head associated with these 'services' and store them in this record.
      *
      * The 'pregnancy' test happens 5 weeks after servicing...so we won't be able to
      * retrieve the data until 5 weeks have passed. But, when the data is available
      * and has been entered by the user, we store the number of pregnant sows in a
      * separate record in the 'farrowing and preg checked positive events' file. In this same
      * record we store both a) the year/week the sows were tested and b) the year/week the
      * sows were serviced.
      *
      * So, first, retrieve the 'preg checked positive' head associated with these 'services'
      * by retrieving the 'Events' record that has a serviced week/date that is equal to the
      * calendar year/week of the record you are processing.
      *
     C                   move      'P'           wkevfl
     C     key01         chain     hsl093a                            92
     C                   if        *in92 = *off
     C                   z-add     beevhd        p1bppgrhd
     C                   z-add     beglevhd      p1bppglhd
     C                   endif
      *
      *
      *------------------
      * Set 2 Data:
      *------------------
      *
      * We also want to store in this Datamart record, the number of sows that
      * were checked for pregnancy this week (these sows would have been serviced
      * 4-5 weeks earlier).
      *
      * So, retrieve the 'preg checked positive' record that has an 'event year/week'
      * equal to the calender year/week of the record you are going to write.
      *
      *
     C     key01         chain     hsp093                             92
     C                   if        *in92 = *off                                 If hit
     C                   z-add     beevhd        p1bprpgrhd
     C                   z-add     beglevhd      p1bprpglhd
      *
      * If you get a hit, use the serviced year/week to retrieve the weekly
      * production record for calculating the 'total services' that were
      * performed to achieve these pregnancies. Accumulate for 'all' and
      * for 'gilts only'.
      *
     C     key05         chain     hsl092a                            92
     C                   if        *in92 = *off
     C                   eval      p1bprsgrsv =
     C                             p2bpwnsv + p2bplwnsv + p2bprtsv + p2bpglsv
     C                   eval      p1bprsglsv = p2bpglsv
      *
      * Populate the 'sire line' associated with these services.
      * (The indicators and workfield allow us to use the Sire subroutine
      *  multiple places.)
      *
     C                   seton                                        89
     C                   exsr      $sire
     C                   move      wksicd        p1bprpsicd
     C                   move      wksicomp      p1bprpsicomp
     C                   z-add     wkprime       p1bprpprime
     C                   move      wkgg0         p1bprpgg0
     C                   setoff                                       89
      *
     C                   endif
     C                   endif                                                  If hit
      *
     C                   endsr
      /eject
      *-----------------------------------------------------------------------------------------
      * Retrieve the farrowing info
      *-----------------------------------------------------------------------------------------
      *
     C     $farr         begsr
      *
      * First, retrieve the Total Litters Farrowed 3 weeks ago.
      *
     C     p1bpwedt      subdur    21:*days      wkcymdiso
     C                   move      wkcymdiso     wkwedt
     C     key09         chain     hsl092b                            92
     C                   if        *in92 = *off
     C                   add       p3bptolt      p1bprtolt
     C                   endif
      *
      *
      * Next, you will be retrieving two unrelated and distinct sets of farrowing data
      * for this weekly record:
      *  1) The number of sows that ultimately farrow from the services performed
      *     this week.
      *  2) The number of sows who farrowed this week and:
      *     a) The associated total number of sows serviced.
      *        (When the users enter the farrowed head into the
      *        system, they also enter the year/week of the associated services.)
      *     b) The number of sows from the associated services that preg checked
      *        positive. (Retrieving this value will let you determine how many
      *        sows aborted between having a positive pregnancy test and farrowing.)
      *     c) The associated head in the 'open gilt pool eligible' for calculating
      *        the 'farrowing index'.
      *     d) The associated head in the 'gilt and sow inventory' for calculating
      *        the 'farrowing index'.
      *
      *------------------
      * Set 1 Data:
      *------------------
      *
      * The Datamart record that we are writing contains the number of sows
      * that were serviced this year/week. We want to retrieve the number of
      * sows that ultimately farrowed from these 'services' and store it in this record.
      *
      * Sows 'farrow' approximately 17 weeks after servicing. We store the 'farrowed'
      * head in a separate 'farrowing and preg checked positive events' file.  In the
      * events file record we also store both a) the year/week the sows farrowed and
      * b) the year/week the sows were serviced.
      *
      * So, retrieve the 'farrowed' head associated with these 'services'
      * by retrieving the farrowing 'Events' record that has a serviced year/week that is
      * equal to the calendar year/week of the record you are writing.
      *
     C                   move      'F'           wkevfl
     C     key01         chain     hsl093a                            92
     C                   if        *in92 = *off
     C                   z-add     beevhd        p1bpfgrhd
     C                   z-add     beglevhd      p1bpfglhd
     C                   endif
      *
      *
      *------------------
      * Set 2 Data:
      *------------------
      *
      * We also want to store in this Datamart record, the number of sows that
      * farrowed this week. (These sows would have been serviced 17 weeks earlier.)
      *
      * So, retrieve the 'farrowed' record that has an 'event year/week'
      * equal to the calender year/week of the record you are going to write.
      *
     C     key01         chain     hsp093                             92
     C                   if        *in92 = *off                                 If hit
     C                   z-add     beevhd        p1bprfgrhd
     C                   z-add     beglevhd      p1bprfglhd
      *
      * If you get a hit, use the 'serviced year/week' values to retrieve the
      * weekly production record to:
      * a) retrieve the 'born alive' associated with the farrowings
      * b) calculate the 'total services' associated with the farrowings
      * c) retrieve the 1) open gilt pool eligible and 2) the gilt/sow inventory
      *
     C     key05         chain     hsl092a                            92
     C                   if        *in92 = *off                                 If hit
      * All animals
     C                   eval      p1bpfsgrhd =
     C                             p2bpwnsv + p2bplwnsv + p2bprtsv + p2bpglsv
     C                   z-add     p2bpopglhd    p1bprfgphd
     C                   z-add     p2bpglsohd    p1bprfgshd
      * Gilts only
     C                   eval      p1bpfsglhd = p2bpglsv
      *
      *
      * Now, populate the 'sire line' associated with these services.
      * (The indicators and workfield allow us to use the Sire subroutine
      *  multiple places.)
     C                   seton                                        89
     C                   exsr      $sire
     C                   move      wksicd        p1bprfsicd
     C                   move      wksicomp      p1bprfsicomp
     C                   z-add     wkprime       p1bprfprime
     C                   move      wkgg0         p1bprfgg0
     C                   setoff                                       89
      *
     C                   endif                                                  If hit
      *
      * And, for these 'serviced' hogs, turn around and go back to the
      * Events file to get the head that were 'preg checked positive' from
      * these services.
     C                   move      'P'           wkevfl
     C     key06         chain     hsl093a                            92
     C                   if        *in92 = *off
     C                   z-add     beevhd        p1bpfpgrhd
     C                   z-add     beglevhd      p1bpfpglhd
     C                   endif
      *
     C                   endif                                                  If hit
      *
     C                   endsr
      /eject
      *-----------------------------------------------------------------------------------------
      * Retrieve abortion info
      *-----------------------------------------------------------------------------------------
      *
      * Retrieve total services for 114 days in the past.
      *
     C     $abort        begsr
      *
      * Calculate week-ending date for 114 days ago.
      *
     C     p1bpwedt      subdur    114:*days     wkcymdiso
     C                   move      wkcymdiso     wkwedt
      *
      * Starting 16 weeks ago, read weekly production records for this farm
      * through the week that is currently being processed...accumulate both
      * total services and gilt services.
      *
     C     key09         setll     hsl092b
      *
     C                   dou       *in93 = *on or                               Do 16
     C                             p3bpwedt > bpwedt
     C     bpfscd        reade     hsl092b                                93
     C                   if        *in93 = *off and                             If not EOF
     C                             p3bpwedt <= bpwedt
     C                   add       p3bpwnsv      p1bp16sv
     C                   add       p3bplwnsv     p1bp16sv
     C                   add       p3bprtsv      p1bp16sv
     C                   add       p3bpglsv      p1bp16sv
     C                   add       p3bpglsv      p1bpgl16sv
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do 16
      *
     C                   endsr
      /eject
      *-----------------------------------------------------------------------------------------
      * Retrieve the head received on transfers out of this farm this week
      *-----------------------------------------------------------------------------------------
      *
     C     $tranout      begsr
      *
      * Read all transfer movement headers out of this farm for this week.
      * Read the detail records.    Accumulate values when:
      *       a) the origin group IS NOT a GDU group and
      *       b) the destination phase is 'nursery' or
      *       c) the destination phase is 'grow finish' or 'BGF' and
      *          the 'average received pounds' is 20 pounds or less
      *
      * NOTE: The header file is truly keyed with 'shipped date'; but, we override
      *       the key list with 'received date' in the CL.
      *
     C     key03         setll     hsl074h
      *
     C                   dou       *in91 = *on or mhrcdt > wkenddt              Do header
     C     bpfscd        reade     hsl074h                                91
     C                   if        *in91 = *off and mhrcdt <= wkenddt           If not EOF
      *
     C     mhmvsn        setll     hsp075
     C                   dou       *in93 = *on                                  Do detail
     C     mhmvsn        reade     hsp075                                 93
     C                   if        *in93 = *off                                 If record
      *
      * Determine if origin group is GDU.
      *
     C     mdorsn        chain     hsl034d                            92
     C                   if        *in92 = *off and hggtcd <> 'G'               If not GDU
      *
      * Calculate average received pounds when the destination phase is
      * Grow Finish or BGF.
      *
     C                   z-add     0             wkavlb
     C                   if        mhdnpp = 'GF   ' or mhdnpp = 'BGF  '         If grow finish
     C     mdrjhd        add       mdqlhd        wkhd
     C                   if        wkhd <> 0
     C                   eval(h)   wkavlb = (mdqllb + mdrjlb) / wkhd
     C                   endif
     C                   endif                                                  If grow finish
      *
     C                   if        (mhdnpp = 'GF   ' and wkavlb <= 20) or       If OK
     C                             (mhdnpp = 'BGF  ' and wkavlb <= 20) or
     C                              mhdnpp = 'NUR  '
     C                   add       mdqlhd        p1bpqlhd
     C                   add       mdrjhd        p1bprjhd
     C                   add       mddohd        p1bpdohd
     C                   add       mddoahd       p1bpdoahd
     C                   add       mdkoahd       p1bpkoahd
     C                   add       mdqllb        p1bprclb
     C                   add       mdrjlb        p1bprclb
     C                   endif                                                  If OK
      *
     C                   endif                                                  If not GDU
     C                   endif                                                  If record
     C                   enddo                                                  Do detail
      *
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do header
      *
     C                   endsr
      /eject
      *-----------------------------------------------------------------------------------------
      * Retrieve the head scheduled out on transfers into wean-to-finish groups for this week
      *-----------------------------------------------------------------------------------------
      *
     C     $schedtran    begsr
      *
      * Read all scheduled transfer movement headers out of this farm for this week.
      * Read the detail records.    Accumulate values when:
      *       a) the destination group is a 'wean-to-finish' group
      *
     C     key03         setll     hsl074j
      *
     C                   dou       *in91 = *on or mhscdt > wkenddt              Do header
     C     bpfscd        reade     hsl074j                                91
     C                   if        *in91 = *off and mhscdt <= wkenddt           If not EOF
      *
     C     mhmvsn        setll     hsp075
     C                   dou       *in93 = *on                                  Do detail
     C     mhmvsn        reade     hsp075                                 93
     C                   if        *in93 = *off                                 If record
      *
      * Determine if destination group is a wean-to-finish group
      *
     C     mddnsn        chain     hsl034d                            92
     C                   if        *in92 = *off and hggtcd = 'W'                If wean-to-finish
     C                   add       mdschd        p1bpschd
     C                   endif                                                  If wean-to-finish
      *
     C                   endif                                                  If record
     C                   enddo                                                  Do detail
      *
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do header
      *
     C                   endsr
      /eject
      *-----------------------------------------------------------------------------------------
      * Retrieve the head on sales out of this farm this week
      *-----------------------------------------------------------------------------------------
      *
     C     $sales        begsr
      *
      * Read all sales movement header records out of this farm.
      * If the movement is in the week being processed, process it.
      * The logic for cull sales is different than the logic for market or feeder pig sales.
      *
     C     bpfscd        setll     hsl084c
      *
     C                   dou       *in91 = *on                                  Do header
     C     bpfscd        reade     hsl084c                                91
     C                   if        *in91 = *off and                             If not EOF
     C                             shrcdt >= wkbegdt and
     C                             shrcdt <= wkenddt
      *
     C                   select
     C                   when      shstcd = 'CULLS'
     C                   exsr      $culls
     C                   other
     C                   exsr      $market
     C                   endsl
      *
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do header
      *
     C                   endsr
      /eject
      *-----------------------------------------------------------------------------------------
      * Cull sales
      *-----------------------------------------------------------------------------------------
      *
     C     $culls        begsr
      *
      * Read sales detail for the movement
      *
     C     shmvsn        setll     hsp085
      *
     C                   dou       *in93 = *on                                  Do cull detail
     C     shmvsn        reade     hsp085                                 93
     C                   if        *in93 = *off                                 If record
      *
     C                   select
     C                   when      shmscd = 'SH'
     C                   add       sgshhd        p1bpcuhd
     C                   add       sgshlb        p1bpculb
     C                   other
     C                   add       sglvhd        p1bpcuhd
     C                   add       sglvlb        p1bpculb
     C                   endsl
      *
      * Accumulate dollars if the movement is 'partially' or 'fully' paid.
      *
     C                   if        shmscd = 'FP' or shmscd = 'PP' or
     C                             shmscd = 'PG' or shmscd = 'NC'
     C                   exsr      $cullam
     C                   endif
     C                   endif                                                  If record
     C                   enddo                                                  Do cull detail
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------------
      * Retrieve cull amount (dollars) for a movement
      *--------------------------------------------------------------------
      *
     C     $cullam       begsr
      *
      * Read all Check Detail records for this movement accumulating gross dollars
      * and retrieving/accumulating adjustment dollars.
      *
     C     shmvsn        setll     hsl064c
      *
     C                   dou       *in93 = *on                                  Do check detail
     C     shmvsn        reade     hsl064c                                93
     C                   if        *in93 = *off                                 If more detail
      *
      *  Accumulate gross dollars
      *
     C                   add       cdgram        p1bpcuam
      *
      *  Retrieve/accumulate check adjustments
      *
     C     key10         setll     hsl065c
      *
     C                   dou       *in94 = *on                                  Do adjustments
     C     key10         reade     hsl065c                                94
     C                   if        *in94 = *off                                 If more adjusts
     C                   add       cjcjam        p1bpcuam
     C                   endif                                                  If more adjusts
     C                   enddo                                                  Do adjustments
      *
     C                   endif                                                  If more detail
     C                   enddo                                                  Do check detail
      *
     C                   endsr
      /eject
      *-----------------------------------------------------------------------------------------
      * Market and Feeder Pig sales
      *-----------------------------------------------------------------------------------------
      *
      * Accumulate values when the average weight is 20 pounds or less and the origin
      * group is not a GDU group.
      *
      *
     C     $market       begsr
      *
      * Read sales detail for the movement
      *
     C     shmvsn        setll     hsp085
     C                   dou       *in93 = *on                                  Do detail
     C     shmvsn        reade     hsp085                                 93
     C                   if        *in93 = *off                                 If record
      *
      * Determine if origin group is GDU.
      *
     C     sghgsn        chain     hsl034d                            92
     C                   if        *in92 = *off and hggtcd <> 'G'               If not GDU
      *
     C                   z-add     0             wkavlb
      *
      * Calculate average live pounds (use received or shipped values
      * depending on whether the movement is shipped or partially/fully
      * paid.)
      *
     C                   select
     C                   when      (shmscd = 'NC' or
     C                             shmscd = 'FP' or shmscd = 'PP') and
     C                             sglvhd <> 0
     C                   eval(h)   wkavlb = sglvlb / sglvhd
      *
     C                   when      sgshhd <> 0
     C                   eval(h)   wkavlb = sgshlb / sgshhd
     C                   endsl
      *
      * If we think this is a piglet...based on average pounds, accumulate
      * values.
      *
     C                   if        wkavlb <= 20                                 If piglets
      *
     C                   select
     C                   when      shmscd = 'NC' or
     C                             shmscd = 'FP' or shmscd = 'PP'
     C                   add       sglvhd        p1bplvhd
     C                   add       sglvlb        p1bplvlb
     C                   add       sgdohd        p1bpdohd
     C                   other
     C                   add       sgshhd        p1bplvhd
     C                   add       sgshlb        p1bplvlb
     C                   endsl
      *
     C                   endif                                                  If piglets
      *
     C                   endif                                                  If not GDU
     C                   endif                                                  If record
     C                   enddo                                                  Do detail
      *
     C                   endsr
      /eject
      *-----------------------------------------------------------------------------------------
      * Retrieve the head/lbs received on transfers into this farm this week from GF
      *-----------------------------------------------------------------------------------------
      *
     C     $tranin       begsr
      *
     C     key03         setll     hsl074d
      *
     C                   dou       *in91 = *on or mhrcdt > wkenddt              Do header
     C     bpfscd        reade     hsl074d                                91
     C                   if        *in91 = *off and                             If not EOF
     C                             mhrcdt <= wkenddt and
     C                             mhorpp = 'GF   '
      *
     C     mhmvsn        setll     hsp075
     C                   dou       *in93 = *on                                  Do detail
     C     mhmvsn        reade     hsp075                                 93
     C                   if        *in93 = *off                                 If record
     C                   add       mdqlhd        p1bpinrchd
     C                   add       mdrjhd        p1bpinrchd
     C                   add       mdqllb        p1bpinrclb
     C                   add       mdrjlb        p1bpinrclb
     C                   endif                                                  If record
     C                   enddo                                                  Do detail
      *
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do header
      *
     C                   endsr
      /eject
      *-----------------------------------------------------------------------------------------
      * Retrieve the feed consumed on the farm this week
      *-----------------------------------------------------------------------------------------
      *
      * Read all feed detail records for the farm for this week.
      * Hard-coded logic is used to accumulate feed pounds into one of three
      * fields. The 'accumulation' scheme used will depend on the date of the ticket.
      * Scheme 1 is used for tickets dated before 8/01/01; scheme 2 is used
      * for tickets on or after this arbitrary date.
      *
      *
     C     $feed         begsr
      *
     C     key03         setll     hsl038b
      *
     C                   dou       *in91 = *on or fdtkdt > wkenddt              Do feed
     C     p1bpfscd      reade     hsl038b                                91
     C                   if        *in91 = *off and fdtkdt <= wkenddt           If not EOF
      *
     C                   select
     C                   when      fdtkdt < 20010801
     C                   exsr      $oldfeed
     C                   other
     C                   exsr      $newfeed
     C                   endsl

     C                   endif                                                  If not EOF
     C                   enddo                                                  Do feed
      *
     C                   endsr
      /eject
      *------------------------------------------------------------------------------------
      * Populate feed pounds fields using the 'old' feed logic.
      *------------------------------------------------------------------------------------
      *
      * You are in this subroutine when the feed ticket date is prior to 8/01/01.
      * Feed pounds are accumulated as follows:
      *
      *           field 1   accumulates feed that has a ration type of 'GEST'
      *
      *           field 2   accumulates feed that has a ration type of 'LACT'
      *
      *           field 3   accumulates feed that has a ration type other than
      *                     'GEST' or 'LACT'
      *
      *
     C     $oldfeed      begsr
      *
      * Retrieve the 'ration type' for the ration.
      *
     C     fdrncd        chain     hsp071                             92
      *
     C                   select
     C                   when      *in92 = *off and rnrtcd = 'GEST '
     C                   add       fdfdlb        p1bp1fdlb
      *
     C                   when      *in92 = *off and rnrtcd = 'LACT '
     C                   add       fdfdlb        p1bp2fdlb
     C                   other
      *
     C                   add       fdfdlb        p1bp3fdlb
     C                   endsl
      *
     C                   endsr
      /eject
      *------------------------------------------------------------------------------------
      * Populate feed pounds fields using the 'new' feed logic.
      *------------------------------------------------------------------------------------
      *
      * You are in this subroutine when the feed ticket date is on or after 8/01/01.
      * Feed pounds are accumulated as follows:
      *
      *           field 1   accumulates feed delivered to groups that have been set up
      *                     with a 'feed group' value of G=gestation
      *
      *           field 2   accumulates feed delivered to groups that have been set up
      *                     with a 'feed group' value of F=farrowing
      *
      *           field 3   accumulates feed on tickets that have no group (the ticket
      *                     is not direct and has not yet been allocated)
      *
     C     $newfeed      begsr
      *
      * Retrieve the 'feed type' for the group.
      *
     C     fdhgsn        chain     hsl034d                            92
      *
     C                   select
     C                   when      *in92 = *off and hgfgcd = 'G'
     C                   add       fdfdlb        p1bp1fdlb
      *
     C                   when      *in92 = *off and hgfgcd = 'F'
     C                   add       fdfdlb        p1bp2fdlb
     C                   other
      *
     C                   add       fdfdlb        p1bp3fdlb
     C                   endsl
      *
     C                   endsr
      /eject
      *------------------------------------------------------------------------------------
      * Calculate a date range for the week being processed.
      *------------------------------------------------------------------------------------
      *
     C     $daterange    begsr
      *
     C                   z-add     0             wkbegdt
     C                   z-add     0             wkenddt
      *
     C     *iso          test(d)                 bpwedt                 92
     C                   if        *in92 = *off                                 If OK ending
     C                   z-add     bpwedt        wkenddt
     C                   move      bpwedt        wkcymdiso
     C                   subdur    6:*days       wkcymdiso
     C                   move      wkcymdiso     wkbegdt
     C                   endif                                                  If OK ending
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------------------------------
      * Populate sire line and accumulate doses
      *----------------------------------------------------------------------------------------
      *
      * Sire line will be set to one of the following:
      *  1) the sire line when a) there is only 1 for the week or b) there are multiple
      *     sire lines but 1 line represents 85% or more of the doses
      *  2) the Cognos Grouping associated with a Sire Line when a) all the Sire Lines for
      *     the week have the same Cognos Grouping or b) 1 grouping represents 85% or more
      *     of the doses for the week
      *  3) the value UNK?? if there are NO sire line doses for the farm/week
      *  4) the value MIXED if there are multiple Sire Lines/Cognos Groupings and
      *     no single entry represents 85% or more of the doses
      *
     C     $sire         begsr
      *
      * Initialize arrays and indexes
      *
     C                   move      *blank        arsicd
     C                   z-add     0             arsdono
     C                   z-add     0             w
     C                   z-add     0             x
      *
     C                   move      *blank        arcog
     C                   z-add     0             arcdono
     C                   z-add     0             y
     C                   z-add     0             z
      *
      * Initialize "dose" accumulator
      *
     C                   z-add     0             wkdono
      *
      * Position in Weekly Sire Line Doses file on farm/week-ending date
      * (Indicators control the key list fields...they come from different
      *  files depending on where you are in the logic.)
      *
     C   87key09         setll     hsl081d
     C   88key07         setll     hsl081d
     C   89key11         setll     hsl081d
      *
      * Read all dose records for the farm/week-ending date building arrays
      * for:
      *       Sire lines/number of doses
      *       Cognos groupings/number of doses
      *
     C                   dou       *in93 = *on                                  Do loop
     C   87key09         reade     hsl081d                                93
     C   88key07         reade     hsl081d                                93
     C   89key11         reade     hsl081d                                93
     C                   if        *in93 = *off                                 If not EOF
      *
      * Accumulate doses
     C                   add       swdono        wkdono
      *
      * Retrieve "Cognos Grouping" associated with the Sire Line Code.
      *
     C     swsicd        chain     hsp098                             92
     C                   if        *in92 = *off
     C                   move      sigg0         wkcog
     C                   else
     C                   move      *blank        wkcog
     C                   endif
      *
      * Sire line arrays
      *
     C                   z-add     1             w
     C     swsicd        lookup    arsicd(w)                              92
     C                   if        *in92 = *on
     C                   add       swdono        arsdono(w)
     C                   else
     C                   add       1             x
     C                   move      swsicd        arsicd (x)
     C                   z-add     swdono        arsdono(x)
     C                   endif
      *
      * Cognos arrays
     C                   z-add     1             y
     C     wkcog         lookup    arcog (y)                              92
     C                   if        *in92 = *on
     C                   add       swdono        arcdono(y)
     C                   else
     C                   add       1             z
     C                   move      wkcog         arcog  (z)
     C                   z-add     swdono        arcdono(z)
     C                   endif
      *
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do loop
      *
      *
      * If Total Doses for the week was zero, set the "Sire Line" value to
      * 'Unknown'; otherwise, try to figure out some value.
      *
     C                   If        wkdono = 0                                   If 0 doses
     C                   move      'UNK??'       wksicd
     C                   else
      *
      * Process the arrays trying to find either:
      *      1) a Sire Line Code or
      *      2) a Cognos Grouping
      * that represents 85% or more of the doses on the Farm this Week.
      *
     C                   move      *blank        wksicd
      * Sire lines
     C                   xfoot     arsdono       wksdono
      *
     C                   if        wksdono <> 0                                 If doses
     C                   do        x             w
     C                   if        (arsdono(w) / wksdono) >= .85
     C                   move      arsicd (w)    wksicd
     C                   endif
     C                   enddo
     C                   endif                                                  If doses
      *
      * Cognos Grouping
      *
     C                   if        wksicd = *blank                              If still blank
     C                   xfoot     arcdono       wkcdono
      *
     C                   if        wkcdono <> 0                                 If dose not 0
     C                   do        z             y
     C                   if        (arcdono(y) / wkcdono) >= .85
     C                   move      arcog(y)      wksicd
     C                   endif
     C                   enddo
     C                   endif                                                  If dose not 0
     C                   endif                                                  If still blank
      *
      *
      * At this point, you have covered every scenario except "Mixed".
      * So, if Sire Line Code is still blank, set it to "Mixed".
      *
     C                   if        wksicd = *blank
     C                   move      'MIXED'       wksicd
     C                   endif                                                  If nothing yet
      *
     C                   endif                                                  If 0 doses
      *
      *
      * Retrieve Sire Line Company and Prime Line associated with Sire Line.
      * (Obviously, if our "sire line workfield" holds a Cognos Grouping or
      * a hardcoded value, we will NOT get a hit below; and the
      * Sire Line Company, Prime, Cognos Report Grouping will not be valued
      * in the record we write.)
      *
     C     wksicd        chain     hsp098                             92
     C                   if        *in92 = *off
     C                   move      sisicomp      wksicomp
     C                   z-add     siprime       wkprime
     C                   move      sigg0         wkgg0
     C                   else
     C                   move      *blank        wksicomp
     C                   z-add     0             wkprime
     C                   move      *blank        wkgg0
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Retrieve targets
      *---------------------------------------------------------------
      *
     C     $targets      begsr
      *
     C                   z-add     0             wkfwinhd
     C                   z-add     0             wkswinhd
      *
      * Find the 'target table' that is in effect for the Farm/WeekEnding Date
      * EXCEPT when it is Week 53, find the table for the prior Year!!
      *
     C                   exsr      $table
      *
      * If you found a farm/table link, retrieve:
      *  1) the quarter associated with the week-ending date
      *  2) the target values for the table/year/quarter
      *
     C                   if        wkttbcd <> *blank                            If table
      *
     C     bpwedt        chain     calcalb                            92
     C                   if        *in92 = *off                                 If qtr
      *
     C     key08         chain     hsp096                             92
     C                   if        *in92 = *off                                 If targets
      *
     C                   z-add     bycrpr        p1bpcrpr
     C                   z-add     byfrpr        p1bpfrpr
     C                   z-add     byltbahd      p1bpltbahd
     C                   z-add     bysbpr        p1bpsbpr
     C                   z-add     bytolspr      p1bptolspr
     C                   z-add     byfmddpr      p1bpfmddpr
     C                   z-add     byaborpr      p1bpaborpr
      *
      * Since the amounts are stored by quarter, need to calculate them into
      * a 13 week value.
      *
     C                   z-add     byfwinhd      wkqtrval
     C                   exsr      $calculate
     C                   z-add     wkvalue       wkfwinhd
      *
     C                   z-add     bytownhd      wkqtrval
     C                   exsr      $calculate
     C                   z-add     wkvalue       p1bpwnhd
      *
     C                   z-add     bytosv        wkqtrval
     C                   exsr      $calculate
     C                   z-add     wkvalue       p1bptosv
      *
     C                   z-add     bytosv        wkqtrval
     C                   exsr      $calculate
     C                   z-add     wkvalue       p1bpttosv
      *
     C                   z-add     byglsv        wkqtrval
     C                   exsr      $calculate
     C                   z-add     wkvalue       p1bptglsv
      *
     C                   z-add     byprhd        wkqtrval
     C                   exsr      $calculate
     C                   z-add     wkvalue       p1bptprhd
      *
     C                   z-add     bytolt        wkqtrval
     C                   exsr      $calculate
     C                   z-add     wkvalue       p1bpttolt
      *
     C                   z-add     bygllt        wkqtrval
     C                   exsr      $calculate
     C                   z-add     wkvalue       p1bptgllt
      *
     C                   z-add     bytbhd        wkqtrval
     C                   exsr      $calculate
     C                   z-add     wkvalue       p1bptbhd
      *
     C                   z-add     bytbglhd      wkqtrval
     C                   exsr      $calculate
     C                   z-add     wkvalue       p1bptbglhd
      *
     C                   z-add     bybahd        wkqtrval
     C                   exsr      $calculate
     C                   z-add     wkvalue       p1bptbahd
      *
     C                   z-add     bytownhd      wkqtrval
     C                   exsr      $calculate
     C                   z-add     wkvalue       p1bpttpwn
      *
     C                   z-add     bynurrchd     wkqtrval
     C                   exsr      $calculate
     C                   z-add     wkvalue       p1bptnurrchd
      *
     C                   z-add     byfwinhd      p1bptfwinhd
     C                   z-add     byopglhd      p1bptopglhd
     C                   z-add     byavwn        p1bptwfy
     C                   z-add     byavwnmt      p1bptwmfy
     C                   z-add     byavlt        p1bptlfy
     C                   z-add     byavltmt      p1bptlmfy
     C                   z-add     byltwnhd      p1bptltwnhd
     C                   z-add     byavsv        p1bptbfy
     C                   z-add     byltbaghd     p1bptltbaghd
     C                   z-add     bylttbghd     p1bptlttbghd
     C                   z-add     byltbahd      p1bptltbahd
     C                   z-add     bylttbhd      p1bptlttbhd
     C                   z-add     byglfart      p1bptglfart
     C                   z-add     bycrpr        p1bptcrpr
     C                   z-add     byfrpr        p1bptfrpr
     C                   z-add     bysbpr        p1bptsbpr
     C                   z-add     byfmddpr      p1bptfmddpr
     C                   z-add     byaborpr      p1bptaborpr
     C                   z-add     byfopr        p1bptfopr
     C                   z-add     bytolspr      p1bptpwmt
     C                   z-add     byvarpr       p1bptmwnvar
     C                   z-add     bycrates      p1bptcrates
     C                   endif                                                  If targets
     C                   endif                                                  If qtr
     C                   endif                                                  If table
      *
     C                   endsr
      /eject
      *-----------------------------------------------------------------------------------
      * Find the Target Table to use for the Farm
      *-----------------------------------------------------------------------------------
      *
     C     $table        begsr
      *
     C                   z-add     0             wkcdyr
     C                   move      *blank        wkttbcd
      *
      * In 2009, we had terrible problems with Week 53!! So, we have tweaked
      * our Target Table retrieval logic in an attempt to address Week 53s!
      *
     C                   select
     C                   when      bpcdwk = 53 and bpcdyr < bpacyr
      *
     C     bpfscd        setll     hsl097c
     C                   dou       *in93 = *on or bpcdyr = wkcdyr
     C     bpfscd        reade     hsl097c                                93
     C                   if        *in93 = *off and bpcdyr <> wkcdyr
     C     *iso          movel     bfefdt        wkisodate
     C                   extrct    wkisodate:*y  wkcdyr
     C                   if        wkcdyr = bpcdyr
     C                   move      bfttbcd       wkttbcd
     C                   endif
     C                   endif
     C                   enddo
      *
      * It is NOT Week 53
      *
     C                   other
     C     key07         chain     hsl097c                            92
     C                   if        *in92 = *on or                               If not exact
     C                             (bpcdyr = 2010 and bpcdwk = 52)
     C     key07         setll     hsl097c
     C     bpfscd        readpe    hsl097c                                92
     C                   if        *in92 = *off
     C                   move      bfttbcd       wkttbcd
     C                   endif
     C                   endif                                                  If not exact
     C                   endsl
      *
     C                   endsr
      /eject
      *-----------------------------------------------------------------------------------
      * Retrieve/calculate the Average Daily Beginning Piglet Inventory
      *-----------------------------------------------------------------------------------
      *
      *  Read all the corresponding records for this year/week/farm from the
      *  Datamart BGF: Daily Production file summing up the Beginning Piglet Inventory.
      *  Then, divide this summed value by the number of records that you read.
      *
     C     $piglet       begsr
      *
     C                   z-add     0             count
     C                   z-add     0             wkhd
      *
     C     key12         setll     hppb082
      *
     C                   dou       *in91 = *on                                  Do daily
     C     key12         reade     hppb082                                91
     C                   if        *in91 = *off                                 If not EOF
     C                   add       bdbgplhd      wkhd
     C                   add       1             count
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do daily
      *
     C                   if        count <> 0
     C     wkhd          div       count         p1bpadbgplhd
     C                   endif
      *
     C                   endsr
      /eject
      *-----------------------------------------------------------------------------------
      *  Calculate number of weeks to add one extra head to, so that the
      *  weekly count will equal back to the quarter count.
      *-----------------------------------------------------------------------------------
      *
     C     $calculate    begsr
      *
     C     wkqtrval      div       13            wkvalue
     C                   mvr                     wkrem
      *
     C                   if        cahpswkqt <= wkrem
     C                   add       1             wkvalue
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    p1bpfscd
     C                   kfld                    p1bpcdyr
     C                   kfld                    p1bpcdwk
     C                   kfld                    wkevfl
      *
     C     key03         klist
     C                   kfld                    p1bpfscd
     C                   kfld                    wkbegdt
      *
     C     key04         klist
     C                   kfld                    p1bpfscd
     C                   kfld                    p1bpcdyr
     C                   kfld                    p1bpcdwk
      *
     C     key05         klist
     C                   kfld                    befscd
     C                   kfld                    besvyr
     C                   kfld                    besvwk
      *
     C     key06         klist
     C                   kfld                    befscd
     C                   kfld                    besvyr
     C                   kfld                    besvwk
     C                   kfld                    wkevfl
      *
     C     key07         klist
     C                   kfld                    bpfscd
     C                   kfld                    bpwedt
      *
     C     key08         klist
     C                   kfld                    wkttbcd
     C                   kfld                    bpcdyr
     C                   kfld                    cahpsqt
      *
     C     key09         klist
     C                   kfld                    bpfscd
     C                   kfld                    wkwedt
      *
     C     key10         klist
     C                   kfld                    cdchdt
     C                   kfld                    cdcvno
     C                   kfld                    cdchno
     C                   kfld                    cdlnno
      *
     C     key11         klist
     C                   kfld                    p2bpfscd
     C                   kfld                    p2bpwedt
      *
     C     key12         klist
     C                   kfld                    p1bpcdyr
     C                   kfld                    p1bpcdwk
     C                   kfld                    p1bpfscd
      *
     C                   endsr
      /eject
