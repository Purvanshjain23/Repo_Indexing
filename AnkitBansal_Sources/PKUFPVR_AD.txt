// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKUFPVR
// ?Date: 14.08.2025 Time: 02:52:55
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification history
DO;

//? 2/19/2019 JBB E14234 - Repayment Enhancements Phase 2
//?                        Add logic to prevent business users from
//?                        using this function when the Repayment
//?                        Status in the Payment Processing Parms file
//?                        is 'Y'.  If the user has a user class of
//?                        *PGMR, then the screen is displayed with a
//?                        warning.
//?11/04/20 ISE H16853 - Recompiled due to change in Buy Order Number
//?03/09/23 Eric L 122948 Execute a new RTV after the pmt step validation
//?                       using Co/kill date as RST
//?                       SENDERRMSG if Process code = 'PAYMNT'
ENDDO;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


//?2/19/2019 JBB E14234 - Repayment Enhancements Phase 2
// Call program Rtv User Class        UP.
CALL PROGRAM(Rtv User Class        UP) ('PKU3UPR');
PARAMETER(LCL.User_Class_f_usrprf_USR);

EXECUTE FUNCTION(Rtv Payment Processing RT) TYPE(RTVOBJ) FILE(PKC4REP)          AB1147409;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(NLL.Pmt_Current_Payment_Date);
PARAMETER(NLL.Pmt_Current_Payment_Step);
PARAMETER(NLL.PP_Commission_Paym_Error);
PARAMETER(NLL.PP_Payment_Error);
PARAMETER(NLL.PP_Unused_Nbr_1);
PARAMETER(LCL.PP_Repayment_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If Repayment flag is Yes, check user class
CASE;

// IF LCL.Pmt Repayment Status is Yes
IF LCL.PP_Repayment_Status = 'Y';

//?If user has a user class of *USER, exit program
CASE;

// IF LCL.User Class f/usrprf   USR is *USER
IF LCL.User_Class_f_usrprf_USR = *USER;

// Send error message - 'This option is not available when in a repayment.  Contact I/T department.'
ERROR(PRK1535);

RETURN;

//?If user has a user class of *USER, exit program
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Display Warning on Screen = CND.Yes
LCL.Display_Warning_on_Screen = 'Y';

ENDIF;

ENDIF;

//?USER: Load screen

// DTL.ET Company Number = PAR.CC Company Number
DTL.ET_Company_Number = PAR.CC_Company_Number;

EXECUTE FUNCTION(Rtv Payment Processing RT) TYPE(RTVOBJ) FILE(PKC4REP)          AB1147409;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(DTL.Kill_Date_Usr);
PARAMETER(LCL.Pmt_Current_Payment_Step);
PARAMETER(LCL.PP_Commission_Paym_Error);
PARAMETER(LCL.PP_Payment_Error);
PARAMETER(LCL.PP_Unused_Nbr_1);
PARAMETER(LCL.PP_Repayment_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Validate fields

CASE;

// IF DTL.Kill Date Usr GE JOB.*Job date
IF DTL.Kill_Date_Usr >= JOB.*Job_date;

// Send error message - 'Kill Date must be less than todays date.'
ERROR(PRK0922);
MSGPARM(DTL.ET_Kill_Date);

ENDIF;

//?Stop TF from selecting the balance to kill and
//?if the payment process is not at step 1
// Call program Rtv Paym Proc Pms/StpsXF.
CALL PROGRAM(Rtv Paym Proc Pms/StpsXF) ('PLLPXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(LCL.Pmt_Current_Payment_Date);
PARAMETER(LCL.Pmt_Current_Payment_Step);

CASE;

// IF LCL.Pmt Current Payment Step is Payment in process
IF LCL.Pmt_Current_Payment_Step <> 1;

// Send error message - 'Sel of Bal N/Allowed due to Pymnts. Not at STEP 1 Date &1 and Step &2'
ERROR(PRK1193);
MSGPARM(LCL.Pmt_Current_Payment_Date);
MSGPARM(LCL.Pmt_Current_Payment_Step);

//?Stop TF from selecting the balance to kill and
//?if the payment process is not at step 1
ENDIF;

//?122948 - Check if any Tattoos for the day have THP Process Code = PAYMNT
EXECUTE FUNCTION(RTV Process Code) TYPE(RTVOBJ) FILE(PKA1CPP)                   AB1371767;
PARAMETER(DTL.ET_Company_Number);
PARAMETER(DTL.Kill_Date_Usr);
PARAMETER(LCL.THP_Process_Code);
{
 //?USER: Initialize routine

 // PAR.THP Process Code = CON.*BLANK
 PAR.THP_Process_Code = *BLANK;

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF DB1.THP Process Code is Payment
 IF DB1.THP_Process_Code = 'PAYMNT';

 // PAR.THP Process Code = DB1.THP Process Code
 PAR.THP_Process_Code = DB1.THP_Process_Code;

 QUIT;

 ENDIF;

}


CASE;

// IF LCL.THP Process Code is Payment
IF LCL.THP_Process_Code = 'PAYMNT';

// Send error message - 'Invalid Option. A Payment Edit has been run for the day.'
ERROR(PRK1619);

ENDIF;

//?Do not all user selection if Eval Trans Upl Comment
//?has any records that are not completed
//?The un-completed records will need to be completed prior to select
//?this function
EXECUTE FUNCTION(Val EvalTrnUplComProc RT) TYPE(RTVOBJ) FILE(PLBAREP)           AB1300185;
PARAMETER(DTL.ET_Company_Number);
PARAMETER(DTL.ET_Kill_Date);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.EV Event Process is Completed
 IF DB1.EV_Event_Process = 'C';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// Send error message - 'Eval Trans Upload Comment records found.  These records should becompleted
ERROR(PRK1243);

ENDIF;

//?USER: User defined action

// LCL.MPR Job               USR = CND.No
LCL.MPR_Job_USR = 'N';

// Call program Bal Kill Day          XF.
SBMJOB;
CALL PROGRAM(Bal Kill Day          XF) ('PKS6XFR');
PARAMETER(DTL.ET_Company_Number);
PARAMETER(LCL.MPR_Job_USR);
SBMJOBEND;

