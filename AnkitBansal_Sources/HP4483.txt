      *****************  RPG PROGRAM HEADING  ************************
      * SYSTEM:      Hog Production
      * PROGRAM:     HP4483
      * TITLE:       Specify Quarterly Prediction Values Listing Options
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     01/31/02
      *
      * FUNCTION: Allows the user to enter listing options and submit job.
      *
      *           This program is the first one that I've done this way.  The logic varies
      *           depending on whether the user came into this print program thru 6=print or
      *           thru F7-listing. We actually submit from this pop-up window.
      *
      *
      * NOTE: This is a pop-up window program. Please note that in Window programs
      *       the record format containing the window definition must be written first.
      *       So, we write the Error Message Subfile Control reocrd first followed by
      *       the Command line record format. This is opposite of the non-window programs.
      *
      ****************************************************************
      * MODIFICATIONS:
      ** *************************************************************
      * DATE      PROGRAMMER
      *
      * 10/16/13  LeAnne Ramsey (E2831)
      *           Recompile only. Added field 'MTech Reference'.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhpd4483   cf   e             workstn
     F                                     infds(iofeed)
      *
      *
     Fhsp002    if   e           k disk
      *    Functions
      *
      *
     Fhsl018j   if   e           k disk
      *    Farm site
      *
      *
     Fhsp025    if   e           k disk
      *    Group type
      *
      *
     Fhsp083    if   e           k disk
      *    Quarterly prediction values
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D scrn1           c                   'SCRN1 '
     D scrn2           c                   'SCRN2 '
     D exit            c                   'EXIT  '
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *
      *---------------------------------------------------------------
      *  Compile time array for SBMJOB used in QCMDEXC
      *---------------------------------------------------------------
     D cmd             s              1    dim(80) ctdata perrcd(80)
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D maxmsg          s              2  0  inz(20)
      *
      *
      * Parms
      *
     D xxjobq          s             10     inz('*JOBD     ')
     D xxnite          s              1     inz('N')
     D xxcopy          s              1  0
      *
     D xxoption        s              5
      *
     D xxalphcell      s              2a
     D xxcdyr          s                   like(d1cdyr)
     D xxcdqr          s                   like(d1cdqr)
     D xxgtcd          s                   like(d1gtcd)
     D xxgtds          s                   like(gtgtds)
     D xxcell          s                   like(d1cell)
      *
      *
      *  Parms for use with QCMDEXC.  'LENGTH' is the length of the
      *  command that will be issued with QCMDEXC.  QCMDEXC requires
      *  the field containing length to be defined as 15 with 5 decimal
      *  positions.  The field 'CMDSBM' will hold the values of the
      *  submit job command when passed as a parm on the call to
      *  QCMDEXC.
      *
     D length          s             15  5 inz(80)
     D cmdsbm          s             80
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      * Data areas
      *---------------------------------------------------------------
      *
      * Local data area.
      *
     Dlda             uds                  dtaara(*lda)
     D  ldcdyr                 1      4  0
     D  ldcdqr                 5      5  0
     D  ldcell                 6      7  0
     D  ldgtcd                 8      8
      *
     D  ldoutu               401    410
     D  ldhold               411    411
     D  ldcopy               412    412  0
     D  ldoutq               413    422
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /eject
      ****************************************************************
      * MAINLINEE
      ****************************************************************
      *
      * This program is the first one that I've done this way.  If the user
      * has taken 6=print from the calling program, I just submit the listing.
      * If the user has taken F7-Listing from the calling program, I display
      * the screen for his entries.
      *
     C                   select
     C                   when      xxoption = 'List '
     C                   eval      routne = set1
     C                   when      xxoption = 'Print'
     C                   exsr      $proc1
     C                   endsl
      *
      * You are here when the user came into this program using F7=Listing...not
      * when he came in using 6=print a single record.
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /eject
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      *  Set routine to display screen
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      *
      * Write screen 1 to CRT.
      *
     C                   write     hp4483ec
     C                   write     hp4483k1
     C                   exfmt     hp4483r1
      *
      * Clear messages
      *
     C                   exsr      $clmsg
      *
      *
      * Get user's input and set routine
      *
     C                   select
      *
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
      *
     C                   when      *in08 = *on                                  F8-submit
     C                   exsr      $edit1
     C                   if        error = 0
     C                   exsr      $proc1
     C                   else
     C                   eval      routne = scrn1
     C                   endif
      *
     C                   when      *in17 = *on                                  F17-print options
     C                   eval      routne = scrn1
     C                   call      'HP451'
     C                   parm                    sdpgm
     C     ldcopy        parm      ldcopy        xxcopy
     C                   parm                    ldhold
     C                   parm                    ldoutq
     C                   parm                    xxnite
     C                   parm                    xxjobq
      *
     C                   other
      *
     C                   exsr      $edit1
     C                   eval      routne = scrn1
      *
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Edit screen 1
      *---------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * Validate:
      *    1) year
      *    2) quarter
      *    3) cell
      *    4) group type
      *
     C                   exsr      $cdyr
     C                   exsr      $cdqr
     C                   exsr      $cell
     C                   exsr      $gtcd
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Calendar Year
      *---------------------------------------------------------------
      *
     C     $cdyr         begsr
      *
     C                   select
     C                   when      d1cdyr = 0
      *
     C                   when      d1cdyr < 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   other
      *
      * If there are no errors, make sure that data exists for this
      * calendar year.
      *
     C     d1cdyr        chain     hsp083                             92
     C                   if        *in92 = *on                                  If nothing
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS01165'
     C                   endif
     C                   endif                                                  If nothing
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Calendar Quarter
      *---------------------------------------------------------------
      *
     C     $cdqr         begsr
      *
     C                   select
     C                   when      d1cdqr  >= 1 and d1cdqr  <= 4
      *
     C                   when      d1cdqr  < 0
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
      *
     C                   when      d1cdqr  > 4
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09172'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Cell
      *---------------------------------------------------------------
      *
     C     $cell         begsr
      *
     C                   select
     C                   when      d1cell = 0
      *
     C                   when      d1cell < 0
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   endif
     C                   other
      *
      * We don't have a "CELL" master. So, just check that the cell is
      * on any record in the Farm Master file.
      *
     C     d1cell        chain     hsl018j                            92
     C                   if        *in92 = *on                                  If not assigned
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS01163'     mgid(e)
     C                   clear                   mgw
     C                   move      d1cell        xxalphcell
     C                   movea     xxalphcell    mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If not assigned
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate Group Type
      *----------------------------------------------------------------
      *
     C     $gtcd         begsr
      *
     C                   select
     C                   when      d1gtcd  <> *blank
     C     d1gtcd        chain     hsp025                             92
     C                   if        *in92 = *on                                  If invalid
     C                   seton                                        37
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00137'     mgid(e)
     C                   clear                   mgw
     C                   movea     d1gtcd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If valid
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command key record will be set on. So, redispaly the screen to the user.
      *
     C                   if        *in43 = *on
     C                   movel     set1          routne
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command key record will be set on. So, redispaly the screen to the user.
      *
     C                   if        *in43 = *on
     C                   movel     set1          routne
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Set on last record indicator and end job
      *----------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * F4 prompt on screen 1
      *---------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      *
      * Group type
     C                   select
     C                   when      fld = 'D1GTCD'
     C                   call      'HP531'
     C                   parm      *blank        xxgtcd
     C                   parm      *blank        xxgtds
     C                   seton                                        57
     C                   if        xxgtcd <> *blank
     C                   move      xxgtcd        d1gtcd
     C                   endif
     C                   other
      *
      * F4 not valid for this field...issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error                                        013
     C                   movel     'HS09011'     mgid(e)
     C                   endif
      *
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Process user's request
      *---------------------------------------------------------------
      *
      * This subroutine submits the listing.
      *
     C     $proc1        begsr
      *
      * Move submission values into LDA
      *
     C                   z-add     d1cdyr        ldcdyr
     C                   z-add     d1cdqr        ldcdqr
     C                   z-add     d1cell        ldcell
     C                   move      d1gtcd        ldgtcd
      *
      * Move the 80-character compile time array 'CMD' to an
      * 80-character field for passing as a parm with QCMDEXC.
      *
     C                   out       lda
     C                   movea     xxjobq        cmd(51)
     C                   movea     cmd           cmdsbm
     C                   call      'QCMDEXC'
     C                   parm                    cmdsbm
     C                   parm                    length
      *
      *
      * If the user came into this program by taking F7-Listing from the calling program,
      * issue the standard request submission message and redisplay the screen for
      * more entries. The user must do his own exit out of the function
      *
     C                   select
     C                   when      xxoption = 'List '
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09003'
     C                   endif
      *
      * If the user got here by taking 6=print from the calling program, just get out.
      *
     C                   when      xxoption = 'Print'
     C                   move      exit          routne
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *
     C     *entry        plist
     C     d1cdyr        parm                    xxcdyr
     C     d1cdqr        parm                    xxcdqr
     C     d1cell        parm                    xxcell
     C     d1gtcd        parm                    xxgtcd
     C                   parm                    xxoption
      *
      *
      * Initialize LDA fields
      *
     C                   z-add     0             ldcdyr
     C                   z-add     0             ldcdqr
     C                   z-add     0             ldcell
     C                   move      *blank        ldgtcd
      *
     C                   move      *blank        ldhold
     C                   z-add     0             ldcopy
     C                   movel     ldoutu        ldoutq
      *
      * Get this functions' number of copies, etc.
      *
     C     sdpgm         chain     hsp002                             92
     C                   if        *in92 = *off
     C                   z-add     fncopy        ldcopy
     C                   movel     fnhold        ldhold
     C                   endif
      *
     C                   if        ldcopy = 0
     C                   z-add     1             ldcopy
     C                   endif
      *
     C                   if        ldhold = *blank
     C                   movel     no            ldhold
     C                   endif
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
      * This window logic keeps the screen in the calling program from being
      * cleared.
      *
     C                   write     assume
      *
     C                   endsr
      /eject
      *****************************************************************
      * COMPILE TIME ARRAY 'CMD' USED IN QCMDEXC
      *****************************************************************
** CMD table 'CMD' submits listing when F8 selected
SBMJOB CMD(CALL PGM(HP4483CL)) JOB(PRTQUART) JOBQ(__________)
