// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDJTPFR
// ?Date: 14.08.2025 Time: 12:03:57
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('I/C');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


//?USER: Record selection processing

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

//?SEL:  Company Number
CASE;

// IF PAR.Company Number is not equal to zero
IF PAR.Company_Number <> *ZERO;

// AND PAR.Company Number NE DB1.Company Number
AND PAR.Company_Number <> DB1.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL:  Warehouse Code
CASE;

// IF PAR.Warehouse Code is Warehouse Code not Blank
IF PAR.Warehouse_Code <> *BLANK;

// AND PAR.Warehouse Code NE DB1.Warehouse Code
AND PAR.Warehouse_Code <> DB1.Warehouse_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL:  Item Code
CASE;

// IF PAR.Item Code is Entered
IF PAR.Item_Code <> *ZERO;

// AND PAR.Item Code NE DB1.Item Code
AND PAR.Item_Code <> DB1.Item_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL:  Production Date
CASE;

// IF PAR.Production Date is entered
IF PAR.Production_Date <> *ZERO;

// AND PAR.Production Date NE DB1.Production Date
AND PAR.Production_Date <> DB1.Production_Date;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: On print of first page format

MOVE *ALL (To: 1PG From: PAR);

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(X1PG_Warehouse_Code);
PARAMETER(X1PG_Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


// 1PG.Condition Desc. 1  USR = Condition name of PAR.Variance USR
X1PG_Condition_Desc_1_USR = RTVCND(PAR.Variance_USR);

// 1PG.Condition Desc. 2  USR = Condition name of PAR.Status Flag 1  Y/N
X1PG_Condition_Desc_2_USR = RTVCND(PAR.Status_Flag_1_Y_N);

// 1PG.Condition Desc. 3  USR = Condition name of PAR.Status Flag 2  Y/N
X1PG_Condition_Desc_3_USR = RTVCND(PAR.Status_Flag_2_Y_N);

// 1PG.Condition Name 10 USR = Condition name of PAR.Report Type USR
X1PG_Condition_Name_10_USR = RTVCND(PAR.Report_Type_USR);

// 1PG.Condition Name USR = Condition name of 1PG.Report Type Inv USR
X1PG_Condition_Name_USR = RTVCND(X1PG_Report_Type_Inv_USR);

//?Item Description
CASE;

// IF PAR.Item Code is Not Entered
IF PAR.Item_Code = *ZERO;

// 1PG.Item Desc DRV = CON.*ALL
X1PG_Item_Desc_DRV = *ALL;

//?Item Description
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Item Desc DRV) TYPE(DRVFLD)                                    AC1505592;
PARAMETER(X1PG_Item_Desc_DRV);
PARAMETER(X1PG_Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Desc_DRV);
 PARAMETER(WRK.Description_Line_Two);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


ENDIF;

//?Production Date
CASE;

// IF PAR.Production Date is not entered
IF PAR.Production_Date = *ZERO;

// 1PG.Text USR = CON.*All
X1PG_Text_USR = *All;

//?Production Date
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Text USR = CON.*BLANK
X1PG_Text_USR = *BLANK;

ENDIF;

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
// Print Company Number header format
PRINT Company Number header format;

ENDIF;

// SUPPRESSED PRINT Warehouse Code header format

// SUPPRESSED PRINT Item Code header format

// SUPPRESSED PRINT Production Date header format

//?USER: On print of detail format

// CUR.Quantity On-Hand USR = CUR.Quantity on Hand - U/M1
CUR.Quantity_On_Hand_USR = CUR.Quantity_on_Hand_UOM1;

EXECUTE FUNCTION(Item Desc DRV) TYPE(DRVFLD)                                    AC1505592;
PARAMETER(CUR.Item_Desc_DRV);
PARAMETER(CUR.Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Desc_DRV);
 PARAMETER(WRK.Description_Line_Two);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Rtv Lot/Loc Qty Total RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC1505784;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(CUR.Production_Date);
PARAMETER(CUR.Quantity_Loc_On_Hand_USR);
PARAMETER(CUR.Lot_Number);
PARAMETER(CUR.Multi_Lot_Sts_USR);
PARAMETER(CUR.Weight_11_2_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 // PAR.Multi Lot Sts USR = CND.no
 PAR.Multi_Lot_Sts_USR = 'N';

 //?USER: Process Data record

 // PAR.Quantity Loc On-Hand USR = PAR.Quantity Loc On-Hand USR + DB1.Item Qty On-Ha
 PAR.Quantity_Loc_On_Hand_USR = PAR.Quantity_Loc_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

 CASE;

 // IF DB1.ILL Unit Weight is Equal to zero
 IF DB1.ILL_Unit_Weight = *ZERO;

 EXECUTE FUNCTION(RTV Unit Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1298772;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.ILL_Unit_Weight);
 PARAMETER(NLL.Quality_Level);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.ILL Unit Weight = DB1.ILL Unit Weight
 LCL.ILL_Unit_Weight = DB1.ILL_Unit_Weight;

 ENDIF;

 // Weight
 PAR.Weight_11_2_USR = PAR.Weight_11_2_USR + ( DB1.ILL_Item_Qty_On_Hand
 * LCL.ILL_Unit_Weight 'H' );

 CASE;

 // IF PAR.Lot Number EQ WRK.ZERO
 IF PAR.Lot_Number = WRK.ZERO;

 // PAR.Lot Number = DB1.Lot Number
 PAR.Lot_Number = DB1.Lot_Number;

 ENDIF;

 CASE;

 // IF PAR.Lot Number NE DB1.Lot Number
 IF PAR.Lot_Number <> DB1.Lot_Number;

 // PAR.Multi Lot Sts USR = CND.yes
 PAR.Multi_Lot_Sts_USR = 'Y';

 ENDIF;

}


// CUR.Quantity Loc Var USR = CUR.Quantity On-Hand USR - CUR.Quantity Loc On-Hand U
CUR.Quantity_Loc_Var_USR = CUR.Quantity_On_Hand_USR - CUR.Quantity_Loc_On_Hand_USR;

EXECUTE FUNCTION(Rtv Actual Production RT) TYPE(RTVOBJ) FILE(CAB7CPP)           AC1377968;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER('GP1');
PARAMETER(CUR.Production_Date);
PARAMETER(WRK.Production_Weight_USR);
PARAMETER(CUR.Production_Quantity_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Production Weight USR = PAR.Production Weight USR + DB1.Transaction Weight
 PAR.Production_Weight_USR = PAR.Production_Weight_USR + DB1.Transaction_Weight;

 // PAR.Production Quantity USR = PAR.Production Quantity USR + DB1.Transaction Quantity
 PAR.Production_Quantity_USR = PAR.Production_Quantity_USR + DB1.Transaction_Quantity;

}


//?Print Format:  Variance
CASE;

// IF PAR.Report Type Inv USR is VARIANCE
IF PAR.Report_Type_Inv_USR = 'V';

//?SEL:  Variance
CASE;

// IF PAR.Variance USR is Not Blank
IF PAR.Variance_USR = 'NE';

CASE;

// IF PAR.Variance USR is Not Equal Zero
IF PAR.Variance_USR = 'NE';

CASE;

// IF CUR.Quantity Loc Var USR is Equal to Zero
IF CUR.Quantity_Loc_Var_USR = *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Print Format:  RECEIVED
CASE;

// IF PAR.Report Type USR is Summary
IF ( PAR.Report_Type_USR = 'S';

// OR CUR.Quantity Loc On-Hand USR is Equal to Zero
OR CUR.Quantity_Loc_On_Hand_USR = *ZERO );

// AND PAR.Report Type Inv USR is RECEIVED
AND PAR.Report_Type_Inv_USR = 'R';

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : Prt Lot/Loc Variance  PO
CASE;

// IF PAR.Status Flag 1  Y/N is No
IF PAR.Status_Flag_1_Y_N = 'N';

// OR PGM.*Print format is Do not print format
OR PGM.*Print_format = 'N';

QUIT;

ENDIF;

EXECUTE FUNCTION(Prt Lot/Loc Variance  PO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(CUR.Production_Date);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Production Weight USR = PAR.Production Weight USR + DB1.Transaction Weight
 PAR.Production_Weight_USR = PAR.Production_Weight_USR + DB1.Transaction_Weight;

 // PAR.Production Quantity USR = PAR.Production Quantity USR + DB1.Transaction Quantity
 PAR.Production_Quantity_USR = PAR.Production_Quantity_USR + DB1.Transaction_Quantity;

}


//?Embedded PRTOBJ : Prt Lot/Loc Variance  PO
CASE;

// IF PAR.Status Flag 2  Y/N is No
IF PAR.Status_Flag_2_Y_N = 'N';

// OR PGM.*Print format is Do not print format
OR PGM.*Print_format = 'N';

QUIT;

ENDIF;

EXECUTE FUNCTION(Prt Lot/Loc Variance  PO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(CUR.Production_Date);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Production Weight USR = PAR.Production Weight USR + DB1.Transaction Weight
 PAR.Production_Weight_USR = PAR.Production_Weight_USR + DB1.Transaction_Weight;

 // PAR.Production Quantity USR = PAR.Production Quantity USR + DB1.Transaction Quantity
 PAR.Production_Quantity_USR = PAR.Production_Quantity_USR + DB1.Transaction_Quantity;

}


//?USER: Process after print of detail format

NXT.Qty_Produced_SUM = SUM(CUR.Quantity_On_Hand_USR);

NXT.Weight_1_1_SUM = SUM(CUR.Quantity_on_Hand_Weight);

NXT.Quantity_Loc_On_Hand_SUM = SUM(CUR.Quantity_Loc_On_Hand_USR);

NXT.Weight_11_2_SUM = SUM(CUR.Weight_11_2_USR);

//?USER: Print required level totals

// SUPPRESSED PRINT Production Date totals format

CASE;

IF NEW Item_Code;
EXECUTE FUNCTION(Item Desc DRV) TYPE(DRVFLD)                                    AC1505592;
PARAMETER(CUR.Item_Desc_DRV);
PARAMETER(CUR.Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Desc_DRV);
 PARAMETER(WRK.Description_Line_Two);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(RTV Unit Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1298772;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(WRK.Unit_Weight);
PARAMETER(WRK.Quality_Level);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Print Format
CASE;

// IF PAR.Report Type Inv USR is VARIANCE
IF PAR.Report_Type_Inv_USR = 'V';

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

//?Print Format
// IF PAR.Report Type Inv USR is RECEIVED
IF PAR.Report_Type_Inv_USR = 'R';

// AND CUR.Quantity Loc On-Hand SUM is Equal to Zero
AND CUR.Quantity_Loc_On_Hand_SUM = *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

// Print Item Code totals format
PRINT Item Code totals format;

NXT.Qty_Produced_SUM = SUM(CUR.Qty_Produced_SUM);

NXT.Quantity_Loc_On_Hand_SUM = SUM(CUR.Quantity_Loc_On_Hand_SUM);

NXT.Weight_1_1_SUM = SUM(CUR.Weight_1_1_SUM);

NXT.Weight_11_2_SUM = SUM(CUR.Weight_11_2_SUM);

ENDIF;

// SUPPRESSED PRINT Warehouse Code totals format

// SUPPRESSED PRINT Company Number totals format

//?USER: On print of final totals format

// CUR.Quantity Loc Var USR = CUR.Qty Produced SUM - CUR.Quantity Loc On-Hand SUM
CUR.Quantity_Loc_Var_USR = CUR.Qty_Produced_SUM - CUR.Quantity_Loc_On_Hand_SUM;

CASE;

// IF PAR.Status Flag 1  Y/N is Yes
IF PAR.Status_Flag_1_Y_N = 'Y';

// OR PAR.Status Flag 2  Y/N is Yes
OR PAR.Status_Flag_2_Y_N = 'Y';

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

