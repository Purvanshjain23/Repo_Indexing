// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POIDPVR
// ?Date: 14.08.2025 Time: 03:37:25
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PAR.USR Return Code = CND.Returned
PAR.USR_Return_Code = 'R';

// PAR.Status Flag 4  Y/N = CND.no
PAR.Status_Flag_4_Y_N = 'N';

//?S17054 DN 04/07/21-Count Cases as Boxes. Replaced function with
//?  'RTV UM/Whs Code-Add CS RT'.
EXECUTE FUNCTION(RTV UM/Whs Code-Add CS RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2196569;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(1);
PARAMETER(1);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.U_M_Ordered);
{
 //?USER: Initialize routine

 // WRK.First Time Flag = CND.Yes
 WRK.First_Time_Flag = 'Y';

 // LCL.Boxes Total Quantity = CON.*ZERO
 LCL.Boxes_Total_Quantity = *ZERO;

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 //?PF3280 -- add "Cases" to the case-stmt
 // PAR.Warehouse Code = DB1.Warehouse Code
 PAR.Warehouse_Code = DB1.Warehouse_Code;

 CASE;

 // IF DB1.U/M - Ordered is Combos
 IF DB1.U_M_Ordered = 'CB';

 // OR DB1.U/M - Ordered is EQ Boxes
 OR DB1.U_M_Ordered = 'BX';

 // OR DB1.U/M - Ordered is Mixed
 OR DB1.U_M_Ordered = 'MX';

 // OR DB1.U/M - Ordered is Cases
 OR DB1.U_M_Ordered = 'CS';

 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?S17054 DN 04/06/21-Beyond this point, changed all 'U/M - Ordered'
 //?  to reference LCL Context instead of DB1.
 //?S17054 DN 04/06/21-Count Type 'Cases' (CS) as 'Boxes' (BX).
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.U/M - Ordered = DB1.U/M - Ordered
 LCL.U_M_Ordered = DB1.U_M_Ordered;

 CASE;

 // IF LCL.U/M - Ordered is Cases
 IF LCL.U_M_Ordered = 'CS';

 // LCL.U/M - Ordered = CND.EQ Boxes
 LCL.U_M_Ordered = 'BX';

 ENDIF;

 ENDIF;

 //?Sum for later check
 CASE;

 // IF LCL.U/M - Ordered is EQ Boxes
 IF LCL.U_M_Ordered = 'BX';

 // LCL.Boxes Total Quantity = LCL.Boxes Total Quantity + DB1.Quantity Ordered
 LCL.Boxes_Total_Quantity = LCL.Boxes_Total_Quantity + DB1.Quantity_Ordered;

 ENDIF;

 CASE;

 // IF PAR.USR Unit of Measure is *Blank
 IF PAR.USR_Unit_of_Measure = *BLANK;

 // PAR.USR Unit of Measure = LCL.U/M - Ordered
 PAR.USR_Unit_of_Measure = LCL.U_M_Ordered;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.U/M - Ordered EQ PAR.USR Unit of Measure
 IF LCL.U_M_Ordered = PAR.USR_Unit_of_Measure;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.U/M - Ordered = CND.Mixed
 WRK.U_M_Ordered = 'MX';

 // PAR.USR Unit of Measure = WRK.U/M - Ordered
 PAR.USR_Unit_of_Measure = WRK.U_M_Ordered;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?USER: Exit processing

 //?E2709 RMC 9/12/13  Classify as BX/CB - never MX
 CASE;

 // IF PAR.USR Unit of Measure is Mixed
 IF PAR.USR_Unit_of_Measure = 'MX';

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(DB1.Company_Number);
 PARAMETER('BOXLOAD');
 PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
 IF LCL.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

 // PAR.USR Unit of Measure = CND.Combos
 PAR.USR_Unit_of_Measure = 'CB';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Unit of Measure = CND.Boxed
 PAR.USR_Unit_of_Measure = 'BX';

 ENDIF;

 ENDIF;

}


//?Set the Company Value per the Whse,U/M, or Export Sts
CASE;

// IF LCL.Warehouse Code is Guymon Fresh
IF LCL.Warehouse_Code = 'GP1';

CASE;

// IF PAR.Export Status is yes
IF PAR.Export_Status = 'Y';

// LCL.Company Value Code = CON.MAXGP1EX
LCL.Company_Value_Code = 'MAXGP1EX';

// IF LCL.U/M - Ordered is Combos
IF LCL.U_M_Ordered = 'CB';

// LCL.Company Value Code = CON.MAXGP1CB
LCL.Company_Value_Code = 'MAXGP1CB';

// IF LCL.U/M - Ordered is EQ Boxes
IF LCL.U_M_Ordered = 'BX';

// OR LCL.U/M - Ordered is Mixed
OR LCL.U_M_Ordered = 'MX';

// LCL.Company Value Code = CON.MAXGP1BXMX
LCL.Company_Value_Code = 'MAXGP1BXMX';

ENDIF;

//?Set the Company Value per the Whse,U/M, or Export Sts
// IF LCL.Warehouse Code is Cloverleaf Freezer
IF LCL.Warehouse_Code = 'CF1';

// LCL.Company Value Code = CON.MAXCF1ALL
LCL.Company_Value_Code = 'MAXCF1ALL';

ENDIF;

CASE;

// IF LCL.Company Value Code NE WRK.BLANK
IF LCL.Company_Value_Code <> WRK.BLANK;

EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Company_Value_Code);
PARAMETER(LCL.System_Value_Numeric);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Continue with the prompt if the Max is exceeded, else fall out.
CASE;

// IF LCL.System Value Numeric is Not equal to zero
IF LCL.System_Value_Numeric <> *ZERO;

EXECUTE FUNCTION(Rtv OrderWt f/ShpDate RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1610091;
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.U_M_Ordered);
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(LCL.Weight_Scheduled_USR);
PARAMETER(PAR.Export_Status);
PARAMETER(WRK.LSSA_Load_Slot_Type);
PARAMETER(WRK.Record_Found_OrdDtlUSR);
PARAMETER(PAR.Load_ID);
{
 //?USER: Initialize routine

 //?RMC 10/02/07 set return code to *normal if no rcd found- not an error
 // PAR.Record Found -OrdDtlUSR = CND.Record Not Found
 PAR.Record_Found_OrdDtlUSR = 'N';

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 // LCL.Record Selected       USR = CND.yes
 LCL.Record_Selected_USR = 'Y';

 CASE;

 // IF DB1.Order Number NE WRK.Order Number Saved USR
 IF DB1.Order_Number <> WRK.Order_Number_Saved_USR;

 EXECUTE FUNCTION(RTV Load ID,shp mth   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1620457;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Load_ID);
 PARAMETER(LCL.Shipping_Method);
 PARAMETER(LCL.Export_Status);
 PARAMETER(LCL.Load_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?S17054 DN 04/07/21-Count Cases as Boxes. Replaced function with
 //?  'RTV UM/Whs Code-Add CS RT'.
 EXECUTE FUNCTION(RTV UM/Whs Code-Add CS RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2196569;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(LCL.USR_Warehouse_Code);
 PARAMETER(LCL.USR_Unit_of_Measure);
 {
  //?USER: Initialize routine

  // WRK.First Time Flag = CND.Yes
  WRK.First_Time_Flag = 'Y';

  // LCL.Boxes Total Quantity = CON.*ZERO
  LCL.Boxes_Total_Quantity = *ZERO;

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  MOVE *ALL (To: PAR From: CON);

  QUIT;

  //?USER: Process Data record

  //?PF3280 -- add "Cases" to the case-stmt
  // PAR.Warehouse Code = DB1.Warehouse Code
  PAR.Warehouse_Code = DB1.Warehouse_Code;

  CASE;

  // IF DB1.U/M - Ordered is Combos
  IF DB1.U_M_Ordered = 'CB';

  // OR DB1.U/M - Ordered is EQ Boxes
  OR DB1.U_M_Ordered = 'BX';

  // OR DB1.U/M - Ordered is Mixed
  OR DB1.U_M_Ordered = 'MX';

  // OR DB1.U/M - Ordered is Cases
  OR DB1.U_M_Ordered = 'CS';

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?S17054 DN 04/06/21-Beyond this point, changed all 'U/M - Ordered'
  //?  to reference LCL Context instead of DB1.
  //?S17054 DN 04/06/21-Count Type 'Cases' (CS) as 'Boxes' (BX).
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.U/M - Ordered = DB1.U/M - Ordered
  LCL.U_M_Ordered = DB1.U_M_Ordered;

  CASE;

  // IF LCL.U/M - Ordered is Cases
  IF LCL.U_M_Ordered = 'CS';

  // LCL.U/M - Ordered = CND.EQ Boxes
  LCL.U_M_Ordered = 'BX';

  ENDIF;

  ENDIF;

  //?Sum for later check
  CASE;

  // IF LCL.U/M - Ordered is EQ Boxes
  IF LCL.U_M_Ordered = 'BX';

  // LCL.Boxes Total Quantity = LCL.Boxes Total Quantity + DB1.Quantity Ordered
  LCL.Boxes_Total_Quantity = LCL.Boxes_Total_Quantity + DB1.Quantity_Ordered;

  ENDIF;

  CASE;

  // IF PAR.USR Unit of Measure is *Blank
  IF PAR.USR_Unit_of_Measure = *BLANK;

  // PAR.USR Unit of Measure = LCL.U/M - Ordered
  PAR.USR_Unit_of_Measure = LCL.U_M_Ordered;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF LCL.U/M - Ordered EQ PAR.USR Unit of Measure
  IF LCL.U_M_Ordered = PAR.USR_Unit_of_Measure;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.U/M - Ordered = CND.Mixed
  WRK.U_M_Ordered = 'MX';

  // PAR.USR Unit of Measure = WRK.U/M - Ordered
  PAR.USR_Unit_of_Measure = WRK.U_M_Ordered;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  //?USER: Exit processing

  //?E2709 RMC 9/12/13  Classify as BX/CB - never MX
  CASE;

  // IF PAR.USR Unit of Measure is Mixed
  IF PAR.USR_Unit_of_Measure = 'MX';

  EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
  PARAMETER(DB1.Company_Number);
  PARAMETER('BOXLOAD');
  PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
  IF LCL.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

  // PAR.USR Unit of Measure = CND.Combos
  PAR.USR_Unit_of_Measure = 'CB';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.USR Unit of Measure = CND.Boxed
  PAR.USR_Unit_of_Measure = 'BX';

  ENDIF;

  ENDIF;

 }

 // WRK.Order Number Saved USR = DB1.Order Number
 WRK.Order_Number_Saved_USR = DB1.Order_Number;

 ENDIF;

 CASE;

 // IF LCL.Load ID is Blank
 IF LCL.Load_ID = *ZERO;

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 CASE;

 // IF LCL.Shipping Method is Rail
 IF LCL.Shipping_Method = 'CR'/'PR';

 // OR LCL.Load Type is Not Regular
 OR LCL.Load_Type = *BLANK/'B';

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 //?Priority: CB,EX,BX
 CASE;

 // IF LCL.Record Selected       USR is yes
 IF LCL.Record_Selected_USR = 'Y';

 CASE;

 // IF PAR.LSSA Load Slot Type is Combo
 IF PAR.LSSA_Load_Slot_Type = 'CB';

 CASE;

 // IF LCL.USR Unit of Measure is Combos
 IF LCL.USR_Unit_of_Measure = 'CB';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.LSSA Load Slot Type is Export
 IF PAR.LSSA_Load_Slot_Type = 'EX';

 CASE;

 // IF LCL.Export Status is Not Yes
 IF LCL.Export_Status = *BLANK/'N';

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 CASE;

 // IF PAR.LSSA Load Slot Type is Box
 IF PAR.LSSA_Load_Slot_Type = 'BX';

 CASE;

 // IF LCL.USR Unit of Measure is Boxed
 IF LCL.USR_Unit_of_Measure = 'BX';

 // OR LCL.USR Unit of Measure is Mixed
 OR LCL.USR_Unit_of_Measure = 'MX';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 CASE;

 // IF LCL.Record Selected       USR is yes
 IF LCL.Record_Selected_USR = 'Y';

 // PAR.Weight Scheduled USR = PAR.Weight Scheduled USR + DB1.Weight Scheduled
 PAR.Weight_Scheduled_USR = PAR.Weight_Scheduled_USR + DB1.Weight_Scheduled;

 //?Update load found so this load wont be counted again in the calling pgm.
 CASE;

 // IF PAR.Load ID EQ LCL.Load ID
 IF PAR.Load_ID = LCL.Load_ID;

 // PAR.Record Found -OrdDtlUSR = CND.Record Found
 PAR.Record_Found_OrdDtlUSR = 'Y';

 ENDIF;

 ENDIF;

}


// LCL.Weight Scheduled USR = LCL.Weight Scheduled USR + PAR.Order Weight Total
LCL.Weight_Scheduled_USR = LCL.Weight_Scheduled_USR + PAR.Order_Weight_Total;

CASE;

// IF LCL.Weight Scheduled USR GT LCL.System Value Numeric
IF LCL.Weight_Scheduled_USR > LCL.System_Value_Numeric;

//?Continue with prompt allowing Date change to be made.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

// PAR.USR Return Code = CND.Returned
PAR.USR_Return_Code = 'R';

RETURN;

ENDIF;

//?Continue with the prompt if the Max is exceeded, else fall out.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

// PAR.USR Return Code = CND.Returned
PAR.USR_Return_Code = 'R';

RETURN;

ENDIF;

//?USER: Load screen

EXECUTE FUNCTION(RTV Next Ship Date     RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1417256;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(DTL.Scheduled_Ship_Date_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Post to G/L Date EQ PAR.Post to G/L Date
 IF DB1.Post_to_G_L_Date = PAR.Post_to_G_L_Date;

 // OR DB1.Day of Week is Sunday
 OR DB1.Day_of_Week = '1';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Scheduled Ship Date = DB1.Post to G/L Date
 PAR.Scheduled_Ship_Date = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

}


// LCL.Scheduled Ship Date USR = DTL.Scheduled Ship Date USR
LCL.Scheduled_Ship_Date_USR = DTL.Scheduled_Ship_Date_USR;

//?USER: Validate fields

CASE;

// IF DTL.Scheduled Ship Date USR LE JOB.*Job date
IF DTL.Scheduled_Ship_Date_USR <= JOB.*Job_date;

// Send error message - 'Sched Ship Date must be in the future.'
ERROR(USR3022);
MSGPARM(DTL.Scheduled_Ship_Date_USR);

ENDIF;

// LCL.Weight Scheduled USR = CON.*ZERO
LCL.Weight_Scheduled_USR = *ZERO;

EXECUTE FUNCTION(Rtv OrderWt f/ShpDate RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1610091;
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.U_M_Ordered);
PARAMETER(DTL.Scheduled_Ship_Date_USR);
PARAMETER(LCL.Weight_Scheduled_USR);
PARAMETER(PAR.Export_Status);
PARAMETER(WRK.LSSA_Load_Slot_Type);
PARAMETER(WRK.Record_Found_OrdDtlUSR);
PARAMETER(DTL.Load_ID);
{
 //?USER: Initialize routine

 //?RMC 10/02/07 set return code to *normal if no rcd found- not an error
 // PAR.Record Found -OrdDtlUSR = CND.Record Not Found
 PAR.Record_Found_OrdDtlUSR = 'N';

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 // LCL.Record Selected       USR = CND.yes
 LCL.Record_Selected_USR = 'Y';

 CASE;

 // IF DB1.Order Number NE WRK.Order Number Saved USR
 IF DB1.Order_Number <> WRK.Order_Number_Saved_USR;

 EXECUTE FUNCTION(RTV Load ID,shp mth   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1620457;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Load_ID);
 PARAMETER(LCL.Shipping_Method);
 PARAMETER(LCL.Export_Status);
 PARAMETER(LCL.Load_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?S17054 DN 04/07/21-Count Cases as Boxes. Replaced function with
 //?  'RTV UM/Whs Code-Add CS RT'.
 EXECUTE FUNCTION(RTV UM/Whs Code-Add CS RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2196569;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(LCL.USR_Warehouse_Code);
 PARAMETER(LCL.USR_Unit_of_Measure);
 {
  //?USER: Initialize routine

  // WRK.First Time Flag = CND.Yes
  WRK.First_Time_Flag = 'Y';

  // LCL.Boxes Total Quantity = CON.*ZERO
  LCL.Boxes_Total_Quantity = *ZERO;

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  MOVE *ALL (To: PAR From: CON);

  QUIT;

  //?USER: Process Data record

  //?PF3280 -- add "Cases" to the case-stmt
  // PAR.Warehouse Code = DB1.Warehouse Code
  PAR.Warehouse_Code = DB1.Warehouse_Code;

  CASE;

  // IF DB1.U/M - Ordered is Combos
  IF DB1.U_M_Ordered = 'CB';

  // OR DB1.U/M - Ordered is EQ Boxes
  OR DB1.U_M_Ordered = 'BX';

  // OR DB1.U/M - Ordered is Mixed
  OR DB1.U_M_Ordered = 'MX';

  // OR DB1.U/M - Ordered is Cases
  OR DB1.U_M_Ordered = 'CS';

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?S17054 DN 04/06/21-Beyond this point, changed all 'U/M - Ordered'
  //?  to reference LCL Context instead of DB1.
  //?S17054 DN 04/06/21-Count Type 'Cases' (CS) as 'Boxes' (BX).
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.U/M - Ordered = DB1.U/M - Ordered
  LCL.U_M_Ordered = DB1.U_M_Ordered;

  CASE;

  // IF LCL.U/M - Ordered is Cases
  IF LCL.U_M_Ordered = 'CS';

  // LCL.U/M - Ordered = CND.EQ Boxes
  LCL.U_M_Ordered = 'BX';

  ENDIF;

  ENDIF;

  //?Sum for later check
  CASE;

  // IF LCL.U/M - Ordered is EQ Boxes
  IF LCL.U_M_Ordered = 'BX';

  // LCL.Boxes Total Quantity = LCL.Boxes Total Quantity + DB1.Quantity Ordered
  LCL.Boxes_Total_Quantity = LCL.Boxes_Total_Quantity + DB1.Quantity_Ordered;

  ENDIF;

  CASE;

  // IF PAR.USR Unit of Measure is *Blank
  IF PAR.USR_Unit_of_Measure = *BLANK;

  // PAR.USR Unit of Measure = LCL.U/M - Ordered
  PAR.USR_Unit_of_Measure = LCL.U_M_Ordered;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF LCL.U/M - Ordered EQ PAR.USR Unit of Measure
  IF LCL.U_M_Ordered = PAR.USR_Unit_of_Measure;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.U/M - Ordered = CND.Mixed
  WRK.U_M_Ordered = 'MX';

  // PAR.USR Unit of Measure = WRK.U/M - Ordered
  PAR.USR_Unit_of_Measure = WRK.U_M_Ordered;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  //?USER: Exit processing

  //?E2709 RMC 9/12/13  Classify as BX/CB - never MX
  CASE;

  // IF PAR.USR Unit of Measure is Mixed
  IF PAR.USR_Unit_of_Measure = 'MX';

  EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
  PARAMETER(DB1.Company_Number);
  PARAMETER('BOXLOAD');
  PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
  IF LCL.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

  // PAR.USR Unit of Measure = CND.Combos
  PAR.USR_Unit_of_Measure = 'CB';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.USR Unit of Measure = CND.Boxed
  PAR.USR_Unit_of_Measure = 'BX';

  ENDIF;

  ENDIF;

 }

 // WRK.Order Number Saved USR = DB1.Order Number
 WRK.Order_Number_Saved_USR = DB1.Order_Number;

 ENDIF;

 CASE;

 // IF LCL.Load ID is Blank
 IF LCL.Load_ID = *ZERO;

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 CASE;

 // IF LCL.Shipping Method is Rail
 IF LCL.Shipping_Method = 'CR'/'PR';

 // OR LCL.Load Type is Not Regular
 OR LCL.Load_Type = *BLANK/'B';

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 //?Priority: CB,EX,BX
 CASE;

 // IF LCL.Record Selected       USR is yes
 IF LCL.Record_Selected_USR = 'Y';

 CASE;

 // IF PAR.LSSA Load Slot Type is Combo
 IF PAR.LSSA_Load_Slot_Type = 'CB';

 CASE;

 // IF LCL.USR Unit of Measure is Combos
 IF LCL.USR_Unit_of_Measure = 'CB';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.LSSA Load Slot Type is Export
 IF PAR.LSSA_Load_Slot_Type = 'EX';

 CASE;

 // IF LCL.Export Status is Not Yes
 IF LCL.Export_Status = *BLANK/'N';

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 CASE;

 // IF PAR.LSSA Load Slot Type is Box
 IF PAR.LSSA_Load_Slot_Type = 'BX';

 CASE;

 // IF LCL.USR Unit of Measure is Boxed
 IF LCL.USR_Unit_of_Measure = 'BX';

 // OR LCL.USR Unit of Measure is Mixed
 OR LCL.USR_Unit_of_Measure = 'MX';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 CASE;

 // IF LCL.Record Selected       USR is yes
 IF LCL.Record_Selected_USR = 'Y';

 // PAR.Weight Scheduled USR = PAR.Weight Scheduled USR + DB1.Weight Scheduled
 PAR.Weight_Scheduled_USR = PAR.Weight_Scheduled_USR + DB1.Weight_Scheduled;

 //?Update load found so this load wont be counted again in the calling pgm.
 CASE;

 // IF PAR.Load ID EQ LCL.Load ID
 IF PAR.Load_ID = LCL.Load_ID;

 // PAR.Record Found -OrdDtlUSR = CND.Record Found
 PAR.Record_Found_OrdDtlUSR = 'Y';

 ENDIF;

 ENDIF;

}


// LCL.Weight Scheduled USR = LCL.Weight Scheduled USR + PAR.Order Weight Total
LCL.Weight_Scheduled_USR = LCL.Weight_Scheduled_USR + PAR.Order_Weight_Total;

CASE;

// IF LCL.Weight Scheduled USR LT LCL.System Value Numeric
IF LCL.Weight_Scheduled_USR < LCL.System_Value_Numeric;

//?Set sts to change the Sched Ship Dt on all orders on the load then Exit
// PAR.USR Return Code = CND.Returned
PAR.USR_Return_Code = 'R';

// PAR.Status Flag 4  Y/N = CND.yes
PAR.Status_Flag_4_Y_N = 'Y';

// PAR.Scheduled Ship Date USR = DTL.Scheduled Ship Date USR
PAR.Scheduled_Ship_Date_USR = DTL.Scheduled_Ship_Date_USR;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Sched Ship Wt exceeded for the Sched Ship Date.'
ERROR(USR3021);
MSGPARM(DTL.Scheduled_Ship_Date_USR);

ENDIF;

//?USER: Exit program processing

CASE;

// IF DTL.*CMD key is CF03
IF DTL.*CMD_key = '03';

// PAR.Status Flag 4  Y/N = CND.no
PAR.Status_Flag_4_Y_N = 'N';

// PAR.USR Return Code = CND.Exists
PAR.USR_Return_Code = 'E';

ENDIF;

