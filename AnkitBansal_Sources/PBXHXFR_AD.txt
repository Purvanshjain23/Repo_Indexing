// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBXHXFR
// ?Date: 14.08.2025 Time: 03:49:40
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?** Chk for ord detail errors still pending  9.20.2011 P001251 LJB
//?** Chg lock option override sts to *job date chk   8.23.09 E00495
//?** Add lock option override sts for sched ship date chk  7.24.09 FP1054
//?** Add Override Total Load Miles - WRK context     E00207 8/13/08
EXECUTE FUNCTION(RTV Load for Load Plan RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1264653;
PARAMETER(PAR.Load_ID);
PARAMETER(WRK.Scheduled_Ship_Date);
PARAMETER(PAR.Load_Status);
PARAMETER(WRK.Reefer_Temperature);
PARAMETER(PAR.Total_Load_Order_Weight);
PARAMETER(WRK.Flat_Amount);
PARAMETER(WRK.Allocate_Pounds_Miles);
PARAMETER(PAR.Carrier_Code);
PARAMETER(PAR.Truck_Size);
PARAMETER(WRK.Rated_Freight);
PARAMETER(WRK.Load_Type);
PARAMETER(WRK.Schedule_Sequence_Number);
PARAMETER(WRK.Total_Load_Miles);
PARAMETER(PAR.Shipping_Method);
PARAMETER(WRK.Ship_From_Warehouse);
PARAMETER(WRK.Ship_To_State_Code);
PARAMETER(WRK.Carrier_Broker);
PARAMETER(PAR.Load_Acceptance_Flag);
PARAMETER(WRK.Override_Total_Load_Miles);
PARAMETER(WRK.Shipping_Temp_C_F_txt);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Any Ord/Blk  on Ld RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1448300;
PARAMETER(PAR.Load_ID);
PARAMETER(WRK.USR_Check_Y_N_Status);
PARAMETER(PAR.Block_Order_Flag);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 // PAR.USR Check Y/N Status = CND.blank
 PAR.USR_Check_Y_N_Status = *BLANK;

 //?OMS203:  need to know if there are any Block orders on load
 // PAR.Block Order Flag = CND.Firm Order
 PAR.Block_Order_Flag = 'F';

 //?USER: Process Data record

 // PAR.USR Check Y/N Status = CND.yes
 PAR.USR_Check_Y_N_Status = 'Y';

 CASE;

 // IF DB1.Block Order Flag is Block Order
 IF DB1.Block_Order_Flag = 'B';

 // PAR.Block Order Flag = DB1.Block Order Flag
 PAR.Block_Order_Flag = DB1.Block_Order_Flag;

 QUIT;

 ENDIF;

}


EXECUTE FUNCTION(EDT Lock Load Edits-INFIF) TYPE(EXCINTFUN)                     AC1481297;
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.Scheduled_Ship_Date);
PARAMETER(PAR.Load_Status);
PARAMETER(PAR.Total_Load_Order_Weight);
PARAMETER(PAR.Carrier_Code);
PARAMETER(PAR.Truck_Size);
PARAMETER(PAR.Shipping_Method);
PARAMETER(PAR.Load_Acceptance_Flag);
PARAMETER(PAR.*SFLSEL);
PARAMETER(PAR.Error_Status);
PARAMETER(PAR.Block_Order_Flag);
PARAMETER(PAR.STATUS);
PARAMETER(PAR.Lock_option_override_sts);
{
 //?Execute internal function

 //?assume will have error
 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 EXECUTE FUNCTION(VAL Set Int.Acc No Hdg IF) TYPE(EXCINTFUN)                     AC1460523;
 PARAMETER('LOCKLD');
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(PAR.Access_Denied_Y_N);
 {
  //?Execute internal function

  // PAR.User Profile Name = JOB.*USER
  PAR.User_Profile_Name = JOB.*USER;

  EXECUTE FUNCTION(VAL User/Appl No Exit  IF) TYPE(EXCINTFUN)                     AC1460535;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Company_Number);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(WRK.Access_Denied_Y_N);
  {
   //?Execute internal function

   //?RMC 5/11/09 Rtv default company from user profile --
   //?  Override user code model company if it exists
   EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
   PARAMETER(PAR.User_Profile_Name);
   PARAMETER(PAR.Allow_Multi_Company);
   PARAMETER(PAR.Default_Printer);
   PARAMETER(PAR.Salesperson_Code);
   PARAMETER(LCL.Company_Number);
   PARAMETER(PAR.User_Code_Model);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?User Profile Record Not found
   CASE;

   // IF PGM.*Return code is *Record does not exist
   IF PGM.*Return_code = 'Y2U0005';

   // PAR.Access Denied (Y/N) = CND.yes
   PAR.Access_Denied_Y_N = 'Y';

   //?User Profile Record Not found
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Access Denied (Y/N) = CND.no
   PAR.Access_Denied_Y_N = 'N';

   ENDIF;

   CASE;

   // IF PAR.User Code Model is equal to blank
   IF PAR.User_Code_Model = *BLANK;

   EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
   PARAMETER(PAR.User_Profile_Name);
   PARAMETER(PAR.Application_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(LCL.Warehouse_Code);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
   PARAMETER(PAR.User_Code_Model);
   PARAMETER(PAR.Application_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(LCL.Warehouse_Code);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

   // PAR.Warehouse Code = LCL.Warehouse Code
   PAR.Warehouse_Code = LCL.Warehouse_Code;

   //?Return code when not normal for Application Profile
   CASE;

   // IF PGM.*Return code is *Normal
   IF PGM.*Return_code = *BLANK;

   // PAR.Access Denied (Y/N) = CND.no
   PAR.Access_Denied_Y_N = 'N';

   //?Return code when not normal for Application Profile
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Access Denied (Y/N) = CND.yes
   PAR.Access_Denied_Y_N = 'Y';

   ENDIF;

   CASE;

   // IF LCL.Company Number is greater than zero
   IF LCL.Company_Number > *ZERO;

   // PAR.Company Number = LCL.Company Number
   PAR.Company_Number = LCL.Company_Number;

   CASE;

   // IF LCL.Warehouse Code is Not Blanks
   IF LCL.Warehouse_Code <> *BLANK;

   EXECUTE FUNCTION(RTV Prod Whse for Co  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1757887;
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(LCL.Shipping_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    CASE;

    // IF DB1.Record Status is Active
    IF DB1.Record_Status = 'A';

    CASE;

    // IF DB1.Production Warehouse Code is Warehouse Code not Blank
    IF DB1.Production_Warehouse_Code <> *BLANK;

    // PAR.Warehouse Code = DB1.Production Warehouse Code
    PAR.Warehouse_Code = DB1.Production_Warehouse_Code;

    QUIT;

    ENDIF;

    ENDIF;

   }

   ENDIF;

   ENDIF;

  }

  // PAR.Company Number = WRK.Company Number
  PAR.Company_Number = WRK.Company_Number;

  // PAR.Access Denied (Y/N) = WRK.Access Denied (Y/N)
  PAR.Access_Denied_Y_N = WRK.Access_Denied_Y_N;

  //?If access denied is no, rtv co. name
  CASE;

  // IF WRK.Access Denied (Y/N) is no
  IF WRK.Access_Denied_Y_N = 'N';

  EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
  PARAMETER(WRK.Company_Number);
  PARAMETER(PAR.Name);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

 }

 CASE;

 // IF PAR.Access Denied (Y/N) is yes
 IF PAR.Access_Denied_Y_N = 'Y';

 // Send information message - 'User not allowed to  Lock/Unlock Loads.'
 MESSAGE(USR2543 *INFO);

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(VAL no Stop Entered    RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1295710;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.USR_Orders_on_Load);
 {
  //?USER: Initialize routine

  // PAR.Status - Y or N = CND.no
  PAR.Status_Y_or_N = 'N';

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  CASE;

  // IF DB1.Stop/Drop is EQ Zero
  IF DB1.Stop_Drop = *ZERO;

  // PAR.Status - Y or N = CND.yes
  PAR.Status_Y_or_N = 'Y';

  QUIT;

  ENDIF;

 }

 //?Validate lock request
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // Send information message - 'No orders assigned to load &1; Can't lock'
 MESSAGE(USR2544 *INFO);
 MSGPARM(PAR.Load_ID);
 MSGPARM(PAR.*SFLSEL);

 //?Validate lock request
 // IF PAR.Block Order Flag is Block Order
 IF PAR.Block_Order_Flag = 'B';

 // Send information message - 'Load &2 contains Block Orders--no update allowed.'
 MESSAGE(USR2545 *INFO);
 MSGPARM(PAR.*SFLSEL);
 MSGPARM(PAR.Load_ID);

 //?Validate lock request
 // IF PAR.Load Status is Locked thru Invoiced
 IF PAR.Load_Status = 'I'/'L'/'S';

 // Send information message - 'Load &2 cannot be locked due to load status'
 MESSAGE(USR2546 *INFO);
 MSGPARM(PAR.*SFLSEL);
 MSGPARM(PAR.Load_ID);

 //?Validate lock request
 // IF PAR.Carrier Code EQ WRK.BLANK
 IF PAR.Carrier_Code = WRK.BLANK;

 // AND PAR.STATUS is No
 AND PAR.STATUS = 'N';

 // Send information message - 'Carrier must be entered for load &2'
 MESSAGE(USR2547 *INFO);
 MSGPARM(PAR.Carrier_Code);
 MSGPARM(PAR.Load_ID);

 //?Validate lock request
 // IF PAR.Truck Size EQ WRK.BLANK
 IF PAR.Truck_Size = WRK.BLANK;

 // Send information message - 'Truck size must be entered for load &2'
 MESSAGE(USR2548 *INFO);
 MSGPARM(PAR.Truck_Size);
 MSGPARM(PAR.Load_ID);

 //?Validate lock request
 // IF PAR.Shipping Method EQ WRK.BLANK
 IF PAR.Shipping_Method = WRK.BLANK;

 // Send information message - 'Shipping Method required to lock load.'
 MESSAGE(USR2549 *INFO);
 MSGPARM(PAR.Shipping_Method);

 //?Validate lock request
 // IF PAR.USR Orders on Load is yes
 IF PAR.USR_Orders_on_Load = 'Y';

 // Send information message - 'Function not allowed; Load &1 has orders tied to it which are not as
 MESSAGE(USR2550 *INFO);
 MSGPARM(PAR.Load_ID);

 //?Validate lock request
 // IF PAR.Load Acceptance Flag is Load not Accepted
 IF PAR.Load_Acceptance_Flag = 'U';

 // Send information message - 'Load cannot be locked, it is unaccepted.'
 MESSAGE(USR2551 *INFO);
 MSGPARM(PAR.Load_ID);

 //?Validate lock request
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Hold, Use-by load  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1304327;
 PARAMETER(PAR.Order_in_Use);
 PARAMETER(PAR.Header_Status);
 PARAMETER(PAR.Load_ID);
 {
  //?USER: Initialize routine

  //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?If find 1 order on load which is held/cancelled, set par flag and exit
  CASE;

  // IF DB1.Header Status is Hold
  IF DB1.Header_Status = 'H';

  // PAR.Header Status = DB1.Header Status
  PAR.Header_Status = DB1.Header_Status;

  QUIT;

  //?If find 1 order on load which is held/cancelled, set par flag and exit
  // IF DB1.Header Status is Cancelled
  IF DB1.Header_Status = 'X';

  // PAR.Header Status = DB1.Header Status
  PAR.Header_Status = DB1.Header_Status;

  QUIT;

  //?If find 1 order on load which is held/cancelled, set par flag and exit
  // IF DB1.Order in Use is yes
  IF DB1.Order_in_Use = 'Y';

  // PAR.Order in Use = DB1.Order in Use
  PAR.Order_in_Use = DB1.Order_in_Use;

  QUIT;

  ENDIF;

 }

 //?Error if held/cancelled/in use order(s) on load
 CASE;

 // IF PAR.Header Status is Hold
 IF PAR.Header_Status = 'H';

 // Send information message - 'Load &1 contains orders on Hold.  Load cannot be Locked.'
 MESSAGE(USR2552 *INFO);
 MSGPARM(PAR.Load_ID);
 MSGPARM(PAR.*SFLSEL);

 //?Error if held/cancelled/in use order(s) on load
 // IF PAR.Header Status is Cancelled
 IF PAR.Header_Status = 'X';

 // Send information message - 'Load &1 contains cancelled order(s).  Load cannot be Locked.'
 MESSAGE(USR2553 *INFO);
 MSGPARM(PAR.Load_ID);
 MSGPARM(PAR.*SFLSEL);

 //?Error if held/cancelled/in use order(s) on load
 // IF PAR.Order in Use is yes
 IF PAR.Order_in_Use = 'Y';

 // Send information message - 'Load &2 has order(s) in use; Load cannot be locked.'
 MESSAGE(USR2554 *INFO);
 MSGPARM(PAR.*SFLSEL);
 MSGPARM(PAR.Load_ID);

 //?Error if held/cancelled/in use order(s) on load
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Ord Requires Revw RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2027682;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Order_Requires_Review);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?** Check for errors in Export Order Automation Upload   P001251
 CASE;

 // IF LCL.Order Requires Review is Yes
 IF LCL.Order_Requires_Review = 'Y';

 //?** Cannot lock load if errors in Order Detail         P001251
 // Send error message - 'Order has detail lines that require review'
 ERROR(USR4464);
 MSGPARM(PAR.*SFLSEL);
 MSGPARM(PAR.Load_ID);

 //?** Check for errors in Export Order Automation Upload   P001251
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Min & Max Pounds  RT) TYPE(RTVOBJ) FILE(OMFKREP)           AC1197715;
 PARAMETER(PAR.Truck_Size);
 PARAMETER(PAR.Maximum_pounds);
 PARAMETER(PAR.Minimum_pounds);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Do not want to lock the load if the Load Weight is not
 //?within range.  -Purva 5/5/99 C0007042
 //?Check minimum and maximum pounds
 CASE;

 // IF PAR.Total Weight LT PAR.Minimum pounds
 IF PAR.Total_Load_Order_Weight < PAR.Minimum_pounds;

 // Send information message - 'Load weight is less than the minimum weight allowed for load &1.'
 MESSAGE(USR1262 *INFO);
 MSGPARM(PAR.Load_ID);

 // PAR.Error Status = CND.no
 PAR.Error_Status = 'N';

 //?Check minimum and maximum pounds
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Total Weight GT PAR.Maximum pounds
 IF PAR.Total_Load_Order_Weight > PAR.Maximum_pounds;

 // Send information message - 'Load weight is greater than maximum allowed for truck size.'
 MESSAGE(USR2231 *INFO);

 // PAR.Error Status = CND.no
 PAR.Error_Status = 'N';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Check Sched ship date if not called from a LOCK option  FP1054 7/24/09
 CASE;

 // IF PAR.Lock option override sts is No
 IF PAR.Lock_option_override_sts = 'N';

 // AND PAR.Scheduled Ship Date GT JOB.*Job date
 AND PAR.Scheduled_Ship_Date > JOB.*Job_date;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 //?Check Sched ship date if not called from a LOCK option  FP1054 7/24/09
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send information message - 'Locking load pending'
 MESSAGE(USR1273 *INFO);

 // PAR.Error Status = CND.no
 PAR.Error_Status = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?***** Change Log and Comments
 DO;

 //?*****
 //?** 09/20/2011 LJB P001251  Export Order Automation Upload
 //?** Cannot lock load if there are errors still pending in the
 //?** Order Detail record
 //?*****
 //?** Auto lock if shipping today & no errors            E00495
 ENDDO;

}


