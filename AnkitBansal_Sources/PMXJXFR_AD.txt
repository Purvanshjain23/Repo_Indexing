// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMXJXFR
// ?Date: 14.08.2025 Time: 03:44:25
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(RTV All Header Fields  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1326885;
PARAMETER(PAR.Company);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Order_Type_Sales);
PARAMETER(LCL.AR_Customer_Number);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(LCL.Ship_To_Name);
PARAMETER(LCL.Ship_To_Address_Line_1);
PARAMETER(LCL.Ship_To_Address_Line_2);
PARAMETER(LCL.Ship_To_Address_Line_3);
PARAMETER(LCL.Ship_To_City);
PARAMETER(LCL.Ship_To_State_Code);
PARAMETER(LCL.Ship_To_Zip_Postal_Code);
PARAMETER(LCL.Bill_to_Customer);
PARAMETER(LCL.Bill_to_Name);
PARAMETER(LCL.Bill_to_Address_Line_1);
PARAMETER(LCL.Bill_to_Address_Line_2);
PARAMETER(LCL.Bill_to_Address_Line_3);
PARAMETER(LCL.Bill_to_City);
PARAMETER(LCL.Bill_to_State_Code);
PARAMETER(LCL.Bill_to_Zip_Postal_Code);
PARAMETER(LCL.Customer_Purchase_Order_#);
PARAMETER(LCL.Order_Date);
PARAMETER(LCL.Requested_Ship_Date);
PARAMETER(LCL.Actual_Shipped_Date);
PARAMETER(NLL.Cancel_Date);
PARAMETER(NLL.Terms_Code);
PARAMETER(NLL.Special_Instructions);
PARAMETER(NLL.Special_Instructions_2);
PARAMETER(LCL.Carrier_Code);
PARAMETER(NLL.Comment_Print_Acknowledge);
PARAMETER(NLL.Comment_Print_Inv_Cr_Memo);
PARAMETER(NLL.Comment_Print_Pick_Slip);
PARAMETER(NLL.Comment_Print_Ship_Doc);
PARAMETER(NLL.Reason_Code);
PARAMETER(NLL.Order_in_Use);
PARAMETER(NLL.Header_Status);
PARAMETER(NLL.Header_Status_Last);
PARAMETER(NLL.Order_Type_Print_Status);
PARAMETER(LCL.Scheduled_Ship_Date);
PARAMETER(NLL.User_Original_Entry);
PARAMETER(NLL.Date_of_Original_Entry);
PARAMETER(NLL.Order_Value_Total);
PARAMETER(NLL.Order_Weight_Total);
PARAMETER(NLL.Credit_Hold);
PARAMETER(NLL.Production_Hold);
PARAMETER(NLL.New_Customer_Hold);
PARAMETER(LCL.Requested_Delivery_Date);
PARAMETER(NLL.Requested_Delivery_Time);
PARAMETER(NLL.Accounts_Receiv_Ent_1);
PARAMETER(NLL.Accounts_Receiv_Ent_2);
PARAMETER(LCL.Load_ID);
PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
PARAMETER(NLL.Rated_Freight);
PARAMETER(NLL.LTL_Flag);
PARAMETER(LCL.Price_Audit);
PARAMETER(NLL.Price_Status);
PARAMETER(LCL.Shipping_Method);
PARAMETER(NLL.Export_Status);
PARAMETER(NLL.Palletize);
PARAMETER(NLL.Shrink_Wrap);
PARAMETER(NLL.Slip_Sheet);
PARAMETER(NLL.Age_Code);
PARAMETER(NLL.Reefer_Temperature);
PARAMETER(NLL.Load_Type);
PARAMETER(NLL.Attach_to_Invoice_Number);
PARAMETER(NLL.Load_Plan_Order);
PARAMETER(NLL.Print_Pick_Slip);
PARAMETER(NLL.Resell_Reference_Number);
PARAMETER(NLL.Special_Comment_1);
PARAMETER(NLL.Special_Comment_2);
PARAMETER(NLL.Affect_Auto_Accruals);
PARAMETER(NLL.Sales_Route_Code);
PARAMETER(NLL.Manager_Level_Code);
PARAMETER(NLL.VP_Level_Code);
PARAMETER(NLL.Attach_to_Order_Number);
PARAMETER(NLL.Reason_for_Price_Audit);
PARAMETER(NLL.Invoice_Number);
PARAMETER(NLL.Invoice_Suffix);
PARAMETER(NLL.Invoice_Date);
PARAMETER(NLL.Event_Code);
PARAMETER(NLL.Trans_Contol_AS400_Plant);
PARAMETER(NLL.Modified_Flag);
PARAMETER(NLL.A_R_order_Value_Total);
PARAMETER(NLL.Billing_Activity_Type);
PARAMETER(NLL.Block_Order_Flag);
PARAMETER(NLL.Order_Certification_Flag);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Ship To Customer SavUsr = LCL.Ship To Customer
LCL.Ship_To_Customer_SavUsr = LCL.Ship_To_Customer;

//?** Retrieve the Bill to & Duns # to get the Trade Partner
EXECUTE FUNCTION(Rtv Bill To TP & DUNS RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC2024373;
PARAMETER(LCL.AR_Customer_Number);
PARAMETER(LCL.TRADE_PARTNER_CODE);
PARAMETER(LCL.EDI_Billto_Duns_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv All REF Info      RT) TYPE(RTVOBJ) FILE(ECP004)            AC2122180;
PARAMETER(LCL.TRADE_PARTNER_CODE);
PARAMETER(LCL.Customer_Purchase_Order_#);
PARAMETER(LCL.ST02_TRANS_SET_CONTROL_NU);
PARAMETER(LCL.G5001_ORDER_STATUS_CODE);
PARAMETER(LCL.Customer_Ref_ID_Qualifier);
PARAMETER(LCL.Customer_Ref_ID);
PARAMETER(LCL.Internal_Ord_ID_Qualifier);
PARAMETER(LCL.Internal_Order_number);
PARAMETER(LCL.Buyer_ID_Qualifier);
PARAMETER(LCL.Buyer_Identification);
PARAMETER(LCL.Reference_Vs_Nbr_ID_Qual);
PARAMETER(LCL.Ref_Version_Nbr);
PARAMETER(LCL.Revision_Nbr_ID_Qualifier);
PARAMETER(LCL.Revision_Nbr);
PARAMETER(LCL.Ref_ID_Qualifier_01);
PARAMETER(LCL.Reference_01);
PARAMETER(LCL.Ref_ID_Qualifier_02);
PARAMETER(LCL.OH_Order_Number);
PARAMETER(LCL.POH_PO_Purpose_cde_OO);
PARAMETER(LCL.EDI_Trading_Partner_No);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Order Number Alpha = CVTVAR(PAR.Order Number)
LCL.Order_Number_Alpha = CVTVAR(PAR.Order_Number);

// LCL.D-EDI INV PROC FLAG = CND.*No
LCL.D_EDI_INV_PROC_FLAG = 'N';

EXECUTE FUNCTION(RTV Trade Partner Ctrl RT) TYPE(RTVOBJ) FILE(PBB8REP)          AC2111434;
PARAMETER(LCL.TRADE_PARTNER_CODE);
PARAMETER(LCL.Extol_Control_Flag);
PARAMETER(LCL.Live_with_ERP);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


CASE;

// IF PAR.BAK02-Ack Type is Ack with Dtl & Chg
IF PAR.BAK02_Ack_Type = 'AC';

// LCL.POH PO Purpose cde-OO = CND.Replaced PO
LCL.POH_PO_Purpose_cde_OO = 05;

ENDIF;

EXECUTE FUNCTION(RTV OHE Delv PO,HPB fldRT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2003965;
PARAMETER(PAR.Company);
PARAMETER(PAR.Order_Number);
PARAMETER(NLL.OHE_HPB_RIN_Equiv_Value);
PARAMETER(NLL.OHE_HPB_RIN_Price);
PARAMETER(NLL.OHE_Spot_Buy);
PARAMETER(NLL.OHE_Override_Type_Code);
PARAMETER(LCL.Delivery_P_O_Number);
PARAMETER(NLL.OHE_Intended_for_ExportCC);
PARAMETER(NLL.OHE_Appt_Confirmation_#);
PARAMETER(NLL.OHE_Appt_Confirmation_Nm);
PARAMETER(NLL.Letter_of_Credit_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(Crt EDI PO Ack        CR) TYPE(CRTOBJ) FILE(ECP032)            AC1895061;
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.D_EDI_INV_PROC_FLAG);
PARAMETER(LCL.TRADE_PARTNER_CODE);
PARAMETER(PAR.BAK02_Ack_Type);
PARAMETER(LCL.Customer_Purchase_Order_#);
PARAMETER(LCL.Order_Date);
PARAMETER('068');
PARAMETER(LCL.Scheduled_Ship_Date);
PARAMETER('067');
PARAMETER(LCL.Requested_Delivery_Date);
PARAMETER(LCL.Shipping_Method);
PARAMETER('BM');
PARAMETER(LCL.REF03_Ref_Notes);
PARAMETER(LCL.Load_ID);
PARAMETER(LCL.POH_PO_Purpose_cde_OO);
PARAMETER(LCL.Extol_Control_Flag);
PARAMETER(LCL.Customer_Ref_ID_Qualifier);
PARAMETER(LCL.Customer_Ref_ID);
PARAMETER(LCL.Internal_Ord_ID_Qualifier);
PARAMETER(LCL.Internal_Order_number);
PARAMETER(LCL.Buyer_ID_Qualifier);
PARAMETER(LCL.Buyer_Identification);
PARAMETER(LCL.Reference_Vs_Nbr_ID_Qual);
PARAMETER(LCL.Ref_Version_Nbr);
PARAMETER(LCL.Revision_Nbr_ID_Qualifier);
PARAMETER(LCL.Revision_Nbr);
PARAMETER('VN');
PARAMETER(LCL.Order_Number_Alpha);
PARAMETER(LCL.Ref_ID_Qualifier_02);
PARAMETER(LCL.Delivery_P_O_Number);

//?6/28/16  E003964 build accruals and write to 855 SAC file
//?Create the SAC Header rcds, if any exist.
// Call program UPD Auto Accruals 855  XF.
CALL PROGRAM(UPD Auto Accruals 855  XF) ('PBXLXFR');
PARAMETER(PAR.Company);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.AR_Customer_Number);
PARAMETER(LCL.Scheduled_Ship_Date);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(1);

//?Create program to read PBXLXFR and write records to SAC
// Call program Bld SAC/G72 Rcds/855  XF.
CALL PROGRAM(Bld SAC/G72 Rcds/855  XF) ('PBXKXFR');
PARAMETER(PAR.Company);
PARAMETER(PAR.Order_Number);

//?BUYER(BY): TYSON foods Buyer record
CASE;

// IF LCL.TRADE PARTNER CODE is Tyson Foods Prepared
IF LCL.TRADE_PARTNER_CODE = 'TYSNFD';

// OR LCL.TRADE PARTNER CODE is Tyson Foods Fresh
OR LCL.TRADE_PARTNER_CODE = 'TYSNFS';

EXECUTE FUNCTION(Rtv Ship To Name      RT) TYPE(RTVOBJ) FILE(ECP006)            AC1678789;
PARAMETER(LCL.ST02_TRANS_SET_CONTROL_NU);
PARAMETER('BY');
PARAMETER(LCL.N102_NAME);
PARAMETER(LCL.N104_ID_CODE);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(Crt EDI Purch Ord Ack CR) TYPE(CRTOBJ) FILE(ECP034)            AC2024249;
PARAMETER(PAR.Order_Number);
PARAMETER('BY');
PARAMETER(LCL.N102_NAME);
PARAMETER(92);
PARAMETER(LCL.N104_ID_CODE);
PARAMETER(LCL.Blank_for_30_USR);
PARAMETER(LCL.Blank_for_30_USR);
PARAMETER(LCL.Blank_for_30_USR);
PARAMETER(LCL.Blank_for_30_USR);
PARAMETER(LCL.Blank_for_30_USR);

ENDIF;

//?08/24/18 DN S13598-Removed Dailys SYSCO & Added 'FRSHMK' as valid Bill To.
//?03/26/19 DN S13893-Added 'GORDON' as valid Bill To.
//?03/04/22 RMC W82935-Added 'KROGER' FOR BT AND SF NAME SEGMENTS
//?Bill To Record Only required for Daily's Sysco
CASE;

// IF LCL.TRADE PARTNER CODE is Fresh Mark
IF LCL.TRADE_PARTNER_CODE = 'FRSHMK';

// OR LCL.TRADE PARTNER CODE is Foods SYSCO
OR LCL.TRADE_PARTNER_CODE = 'SYSCO';

// OR LCL.TRADE PARTNER CODE is Gordon
OR LCL.TRADE_PARTNER_CODE = 'GORDON';

// OR LCL.TRADE PARTNER CODE is Kroger
OR LCL.TRADE_PARTNER_CODE = 'KROGER';

EXECUTE FUNCTION(RTV Cust Name/Addr     RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1129143;
PARAMETER(LCL.AR_Customer_Number);
PARAMETER(LCL.Bill_to_Name);
PARAMETER(LCL.Bill_to_Address_Line_1);
PARAMETER(LCL.Bill_to_Address_Line_2);
PARAMETER(LCL.Bill_to_Address_Line_3);
PARAMETER(LCL.Bill_to_City);
PARAMETER(LCL.Bill_to_State_Code);
PARAMETER(LCL.Bill_to_Zip_Postal_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Crt EDI Purch Ord Ack CR) TYPE(CRTOBJ) FILE(ECP034)            AC2024249;
PARAMETER(PAR.Order_Number);
PARAMETER('BT');
PARAMETER(LCL.Bill_to_Name);
PARAMETER(9);
PARAMETER(LCL.EDI_Billto_Duns_Number);
PARAMETER(LCL.Bill_to_Address_Line_1);
PARAMETER(LCL.Bill_to_Address_Line_2);
PARAMETER(LCL.Bill_to_City);
PARAMETER(LCL.Bill_to_State_Code);
PARAMETER(LCL.Bill_to_Zip_Postal_Code);

ENDIF;

//?SHIP TO:  Create the Ship to name record
EXECUTE FUNCTION(Rtv All Values        RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1569834;
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(NLL.Internet_Password);
PARAMETER(NLL.Email_Address);
PARAMETER(NLL.Email_User_ID);
PARAMETER(NLL.EDI_Trading_Partner_No);
PARAMETER(LCL.EDI_Cust_Duns_Number);
PARAMETER(NLL.EDI_Warehouse_Store_No);
PARAMETER(NLL.State_Tax_ID);
PARAMETER(NLL.Cust_Shipping_Temp_C_F);
PARAMETER(NLL.One_Invoice_Per_PO);
PARAMETER(NLL.EDI_Advanced_Ship_Notice);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Crt EDI Purch Ord Ack CR) TYPE(CRTOBJ) FILE(ECP034)            AC2024249;
PARAMETER(PAR.Order_Number);
PARAMETER('ST');
PARAMETER(LCL.Ship_To_Name);
PARAMETER(9);
PARAMETER(LCL.EDI_Cust_Duns_Number);
PARAMETER(LCL.Ship_To_Address_Line_1);
PARAMETER(LCL.Ship_To_Address_Line_2);
PARAMETER(LCL.Ship_To_City);
PARAMETER(LCL.Ship_To_State_Code);
PARAMETER(LCL.Ship_To_Zip_Postal_Code);

//?VENDOR (us): Create the Vendor name record
EXECUTE FUNCTION(RTV Company Address    RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1113470;
PARAMETER(PAR.Company);
PARAMETER(LCL.Name);
PARAMETER(LCL.Address_Line_1);
PARAMETER(LCL.Address_Line_2);
PARAMETER(LCL.Address_Line_3);
PARAMETER(LCL.City);
PARAMETER(LCL.Zip_Postal_Code);
PARAMETER(LCL.State_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(PAR.Company);
PARAMETER('DUNSNUM');
PARAMETER(LCL.System_Value_Alpha);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Crt EDI Purch Ord Ack CR) TYPE(CRTOBJ) FILE(ECP034)            AC2024249;
PARAMETER(PAR.Order_Number);
PARAMETER('VN');
PARAMETER(LCL.Name);
PARAMETER(9);
PARAMETER(LCL.System_Value_Alpha);
PARAMETER(LCL.Address_Line_1);
PARAMETER(LCL.Address_Line_2);
PARAMETER(LCL.City);
PARAMETER(LCL.State_Code);
PARAMETER(LCL.Zip_Postal_Code);

//?08/24/18 DN S13598-Removed Dailys SYSCO from 'Ship From'.
//?03/04/22 RMC W82935-Added 'KROGER' FOR BT AND SF NAME SEGMENTS
//?SHIP FROM:  Create the Ship From record for SYSCO
CASE;

// IF LCL.TRADE PARTNER CODE is Foods SYSCO
IF LCL.TRADE_PARTNER_CODE = 'SYSCO';

// OR LCL.TRADE PARTNER CODE is Kroger
OR LCL.TRADE_PARTNER_CODE = 'KROGER';

EXECUTE FUNCTION(Crt EDI Purch Ord Ack CR) TYPE(CRTOBJ) FILE(ECP034)            AC2024249;
PARAMETER(PAR.Order_Number);
PARAMETER('SF');
PARAMETER(LCL.Name);
PARAMETER(9);
PARAMETER(LCL.System_Value_Alpha);
PARAMETER(LCL.Address_Line_1);
PARAMETER(LCL.Address_Line_2);
PARAMETER(LCL.City);
PARAMETER(LCL.State_Code);
PARAMETER(LCL.Zip_Postal_Code);

ENDIF;

//?REMIT TO:  Create the Remit to name record
EXECUTE FUNCTION(RTV Alt Remittance Flg RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1348485;
PARAMETER(PAR.Company);
PARAMETER(LCL.Ship_To_Customer_SavUsr);
PARAMETER(LCL.Alt_Remittance_Flag);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv A/R Remit Add All RT) TYPE(RTVOBJ) FILE(POA7REP)           AC2024317;
PARAMETER(LCL.Alt_Remittance_Flag);
PARAMETER(LCL.A_R_Remittance_Name);
PARAMETER(LCL.Remittance_Address_1);
PARAMETER(LCL.Remittance_Address_2);
PARAMETER(LCL.Remittance_Address_3);
PARAMETER(LCL.Remittance_City);
PARAMETER(LCL.Remittance_State);
PARAMETER(LCL.Remittance_Zip);
PARAMETER(LCL.EDI_Remit_Duns_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Crt EDI Purch Ord Ack CR) TYPE(CRTOBJ) FILE(ECP034)            AC2024249;
PARAMETER(PAR.Order_Number);
PARAMETER('RE');
PARAMETER(LCL.A_R_Remittance_Name);
PARAMETER(9);
PARAMETER(LCL.EDI_Remit_Duns_Number);
PARAMETER(LCL.Remittance_Address_1);
PARAMETER(LCL.Remittance_Address_2);
PARAMETER(LCL.Remittance_City);
PARAMETER(LCL.Remittance_State);
PARAMETER(LCL.Remittance_Zip);

EXECUTE FUNCTION(Rtv GTIN Req Status   RT) TYPE(RTVOBJ) FILE(PNGQREP)           AC2099785;
PARAMETER(LCL.AR_Customer_Number);
PARAMETER('POACK');
PARAMETER(LCL.EDI_BTI_GTIN_Required);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?BUILD THE DETAIL RECORDS
EXECUTE FUNCTION(Rtv Dtl & Crt POA Dtl RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1896402;
PARAMETER(PAR.Company);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.U_M_Ordered);
PARAMETER(LCL.Order_Desc_Line_One);
PARAMETER(LCL.Quantity_Scheduled);
PARAMETER(LCL.Unit_Price);
PARAMETER(LCL.BAK02_Ack_Type);
PARAMETER(LCL.Price_Audit);
PARAMETER(LCL.D_EDI_INV_PROC_FLAG);
PARAMETER(LCL.EDI_BTI_GTIN_Required);
{
 //?USER: Initialize routine

 //?12/03/2015 sz Added some comments for Enhancement E004140 and moved
 //?              some of the code validating the x-ref code to
 //?              make more sense.
 //?              Added check for SYSCO on the x-ref item code because not
 //?              not all TP have x-ref items and not all TP request 855.
 //?              Left Trans Type 1 PASS     USR commented out, the parms
 //?              was removed to compile for something else and we didn't
 //?              add it back in.   Install 12/09/2015
 //?11/11/2015 LJB E004140  Installed
 //?09/08/2015 sz E004140  Commented out Trans Type 1 PASS     USR so I could
 //?       compile.
 //?07/31/2015 LJB E004140  If there is an error that will prevent the
 //?        PO Ack being created, return an error code
 //?4/30/15 SAZ added CIR Resource No. field moved to PO117 in POACK detail.
 //?        until SYSCO changes installed.
 //?8/18/14 SAZ added code to calculate the Unit price based on the Base unit
 //?uom.This is basically for SYSCO, the pgm falls out to the end for everyone
 //?else, because their UOM will be blank in POBIREP.
 //?7/30/14 SAZ added code to capture the Unit wgt in ECP033 POA Unused Value
 //?         from Item default, this will later be used to calculate the
 //?         unit price to send.  This is basically for SYSCO.
 //?6/16/14 SAZ commented out the check for pricing type for USFood until
 //?        until SYSCO changes installed.
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 //?*** If creating 855/855 chgd PO, then send all active line items.
 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 EXECUTE FUNCTION(Rtv Cust Item Ref POA RT) TYPE(RTVOBJ) FILE(POBIREP)           AC2035428;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.CIR_Resource_No);
 PARAMETER(LCL.CIR_Item_No);
 PARAMETER(LCL.CIR_Description_Line_1);
 PARAMETER(LCL.CIR_UM_Base_Price);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?*** Val x-ref item code is populated  SYSCO  (Some cust do not have xref)
 CASE;

 // IF LCL.EDI Trading Partner No. is SYSCO Dailys
 IF LCL.EDI_Trading_Partner_No = 'DSYSCO';

 // OR LCL.EDI Trading Partner No. is SYSCO Foods
 OR LCL.EDI_Trading_Partner_No = 'SYSCO';

 //?*This code added for SYSCO to make sure that the x-ref item code is
 //?*set up for the item code. if not, do not let the POACK be created.
 //?Check for customer Item X-Ref - error if missing      E004140
 CASE;

 // IF LCL.CIR Resource No is Not Entered
 IF LCL.CIR_Resource_No = *BLANK;

 // PAR.D-EDI INV PROC FLAG = CND.ERROR
 PAR.D_EDI_INV_PROC_FLAG = 'X';

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Rtv GTIN              RT) TYPE(RTVOBJ) FILE(PBBTREP)           AC2099107;
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.IDE_GTIN);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?*** Validate the GTIN   error if missing or invalid
 CASE;

 // IF LCL.IDE GTIN is Blank
 IF LCL.IDE_GTIN = *BLANK;

 // AND PAR.EDI BTI GTIN Required is Yes
 AND PAR.EDI_BTI_GTIN_Required = 'Y';

 // PAR.D-EDI INV PROC FLAG = CND.ERROR
 PAR.D_EDI_INV_PROC_FLAG = 'X';

 ENDIF;

 //?  ***  Retrieve the Catch Wgt flag to use in a formula in the map
 EXECUTE FUNCTION(Rtv Item Defaults      RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1371761;
 PARAMETER(DB1.Item_Code);
 PARAMETER(NLL.Description_Line_One);
 PARAMETER(NLL.Description_Line_Two);
 PARAMETER(NLL.UOM_Primary_Dft);
 PARAMETER(NLL.Conversion_Factor_1);
 PARAMETER(NLL.Operation_Factor_1);
 PARAMETER(NLL.UOM_Second_Dft);
 PARAMETER(NLL.Conversion_Factor_2);
 PARAMETER(NLL.Operation_Factor_2);
 PARAMETER(NLL.UOM_Third_Dft);
 PARAMETER(NLL.UOM_Pricing_Dft);
 PARAMETER(LCL.Unit_Weight);
 PARAMETER(LCL.Catch_Weight_Status);
 PARAMETER(NLL.Item_Structure_Class_Code);
 PARAMETER(NLL.Item_Structure_Group_Code);
 PARAMETER(NLL.Item_Structure_Type_Code);
 PARAMETER(NLL.Item_Type_Code);
 PARAMETER(NLL.Package_Type_Code);
 PARAMETER(NLL.Base_Conv_Loss_Item);
 PARAMETER(NLL.Variety_Rendered_Cut);
 PARAMETER(NLL.Frozen_Make_to_Order_Sts);
 PARAMETER(NLL.Credit_Item_Status);
 PARAMETER(NLL.Seconds_Item);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.Item Code Txt = CVTVAR(DB1.Item Code)
 LCL.Item_Code_Txt = CVTVAR(DB1.Item_Code);

 // WRK.USR Hold Description = CVTVAR(LCL.Item Code Txt)
 WRK.USR_Hold_Description = CVTVAR(LCL.Item_Code_Txt);

 // Execute function CLC Remove LeadZeros 30US.
 EXECUTE FUNCTION(CLC Remove LeadZeros 30US) TYPE(EXCUSRSRC) ('OMNHUFR');
 PARAMETER(WRK.USR_Hold_Description);
 PARAMETER(WRK.USR_Description);
 {
  E                    AR1        30  1               ARRAY 1
  E                    AR2        30  1               ARRAY 2
  C                     MOVEAWUCUNA    AR1              LOAD ARRAY
  C                     Z-ADD1         X       20       SET COUNTER
  C                     Z-ADD1         Y       20       SET COUNTER
  C                     MOVE 'N'       STOP    1        FLAG
  C           X         DOWLT31
  C           AR1,X     IFEQ '0'
  C           STOP      ANDEQ'N'
  C                     ADD  1         X
  C                     ELSE
  C                     MOVE AR1,X     AR2,Y
  C                     ADD  1         Y
  C                     ADD  1         X
  C                     MOVE 'Y'       STOP
  C                     END
  C                     END
  C                     MOVEAAR2       WUJNNA           LOAD OUTPUT
 }

 //?*** If UOM is PP
 CASE;

 // IF LCL.CIR UM Base Price is Price Per Pound
 IF LCL.CIR_UM_Base_Price = 'PP';

 // LCL.PO105-Basis Unit Pr Cde = LCL.CIR UM Base Price
 LCL.PO105_Basis_Unit_Pr_Cde = LCL.CIR_UM_Base_Price;

 // LCL.PO306-Quantity Shipped = DB1.Quantity Ordered
 LCL.PO306_Quantity_Shipped = DB1.Quantity_Ordered;

 // LCL.PO307-UOM Basis for Meas = DB1.U/M - Ordered
 LCL.PO307_UOM_Basis_for_Meas = DB1.U_M_Ordered;

 //?If U/M -Base Price = CW
 CASE;

 // IF DB1.U/M - Base Price is Carcass Hundred Weight
 IF DB1.U_M_Base_Price = 'CW';

 // LCL.PO104-Unit Price = DB1.Unit Price / CON.100 *
 LCL.PO104_Unit_Price = DB1.Unit_Price / 100;

 //?If U/M -Base Price = CW
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?If U/M-Base Price = Cases
 CASE;

 // IF DB1.U/M - Base Price is Cases
 IF DB1.U_M_Base_Price = 'CS';

 // LCL.PO104-Unit Price = DB1.Unit Price / DB1.Unit Weight Ordered U/M *
 LCL.PO104_Unit_Price = DB1.Unit_Price / DB1.Unit_Weight_Ordered_U_M;

 //?If U/M-Base Price = Cases
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.PO104-Unit Price = DB1.Unit Price
 LCL.PO104_Unit_Price = DB1.Unit_Price;

 ENDIF;

 ENDIF;

 ENDIF;

 //?*** If UOM is PE
 CASE;

 // IF LCL.CIR UM Base Price is Price Per Each
 IF LCL.CIR_UM_Base_Price = 'PE';

 // LCL.PO105-Basis Unit Pr Cde = LCL.CIR UM Base Price
 LCL.PO105_Basis_Unit_Pr_Cde = LCL.CIR_UM_Base_Price;

 // LCL.PO306-Quantity Shipped = DB1.Quantity Ordered
 LCL.PO306_Quantity_Shipped = DB1.Quantity_Ordered;

 // LCL.PO307-UOM Basis for Meas = DB1.U/M - Ordered
 LCL.PO307_UOM_Basis_for_Meas = DB1.U_M_Ordered;

 //?If U/M -Base Price = CW
 CASE;

 // IF DB1.U/M - Base Price is Carcass Hundred Weight
 IF DB1.U_M_Base_Price = 'CW';

 // LCL.Price 11.4 USR = DB1.Unit Price / CON.100 *
 LCL.Price_11_4_USR = DB1.Unit_Price / 100;

 // LCL.PO104-Unit Price = LCL.Price 11.4 USR * DB1.Unit Weight Ordered U/M *
 LCL.PO104_Unit_Price = LCL.Price_11_4_USR * DB1.Unit_Weight_Ordered_U_M;

 //?If U/M -Base Price = CW
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?If U/M-Base Price = Cases
 CASE;

 // IF DB1.U/M - Base Price is Cases
 IF DB1.U_M_Base_Price = 'CS';

 // LCL.PO104-Unit Price = DB1.Unit Price
 LCL.PO104_Unit_Price = DB1.Unit_Price;

 //?If U/M-Base Price = Cases
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.PO104-Unit Price = DB1.Unit Price * DB1.Unit Weight Ordered U/M *
 LCL.PO104_Unit_Price = DB1.Unit_Price * DB1.Unit_Weight_Ordered_U_M;

 ENDIF;

 ENDIF;

 ENDIF;

 //?*** If UOM is Blank
 CASE;

 // IF LCL.CIR UM Base Price is Blank
 IF LCL.CIR_UM_Base_Price = *BLANK;

 //?** Base Price is Carcass Hundred Weight
 CASE;

 // IF DB1.U/M - Base Price is Carcass Hundred Weight
 IF DB1.U_M_Base_Price = 'CW';

 // LCL.PO105-Basis Unit Pr Cde = CON.LB
 LCL.PO105_Basis_Unit_Pr_Cde = 'LB';

 // LCL.PO104-Unit Price = DB1.Unit Price / CON.100 *
 LCL.PO104_Unit_Price = DB1.Unit_Price / 100;

 //?** Base Price is Carcass Hundred Weight
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.PO105-Basis Unit Pr Cde = DB1.U/M - Base Price
 LCL.PO105_Basis_Unit_Pr_Cde = DB1.U_M_Base_Price;

 // LCL.PO104-Unit Price = DB1.Unit Price
 LCL.PO104_Unit_Price = DB1.Unit_Price;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Crt EDI PO Ack Dtl    CR) TYPE(CRTOBJ) FILE(ECP033)            AC1895043;
 PARAMETER(PAR.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(LCL.IDE_GTIN);
 PARAMETER(DB1.Quantity_Ordered);
 PARAMETER(DB1.U_M_Ordered);
 PARAMETER(LCL.PO104_Unit_Price);
 PARAMETER(LCL.PO105_Basis_Unit_Pr_Cde);
 PARAMETER('VN');
 PARAMETER(WRK.USR_Description);
 PARAMETER(LCL.BLANK);
 PARAMETER(LCL.CIR_Resource_No);
 PARAMETER('F');
 PARAMETER(DB1.Order_Desc_Line_One);
 PARAMETER(LCL.Catch_Weight_Status);
 PARAMETER(LCL.BLANK);
 PARAMETER(LCL.Blank_Date_USR);
 PARAMETER(LCL.Unit_Weight);
 PARAMETER(LCL.BLANK);
 PARAMETER(LCL.BLANK);
 PARAMETER(LCL.BLANK);
 PARAMETER(LCL.CIR_Resource_No);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(LCL.PO306_Quantity_Shipped);
 PARAMETER(LCL.PO307_UOM_Basis_for_Meas);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(DB1.Weight_Ordered);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 //?*** If creating 855/855 chgd PO, then send all active line items.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?*** If creating 855 chgd PO then send cancelled & active line items.
 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // AND PAR.BAK02-Ack Type is Ack with Dtl & Chg
 AND PAR.BAK02_Ack_Type = 'AC';

 EXECUTE FUNCTION(Rtv Cust Item Ref POA RT) TYPE(RTVOBJ) FILE(POBIREP)           AC2035428;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.CIR_Resource_No);
 PARAMETER(LCL.CIR_Item_No);
 PARAMETER(LCL.CIR_Description_Line_1);
 PARAMETER(LCL.CIR_UM_Base_Price);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?*** Val x-ref item code is populated SYSCO   (Some cust do not have xref)
 CASE;

 // IF LCL.EDI Trading Partner No. is SYSCO Dailys
 IF LCL.EDI_Trading_Partner_No = 'DSYSCO';

 // OR LCL.EDI Trading Partner No. is SYSCO Foods
 OR LCL.EDI_Trading_Partner_No = 'SYSCO';

 //?*This code added for SYSCO to make sure that the x-ref item code is
 //?*set up for the item code. if not, do not let the POACK be created.
 //?Check for customer Item X-Ref - error if missing      E004140
 CASE;

 // IF LCL.CIR Resource No is Not Entered
 IF LCL.CIR_Resource_No = *BLANK;

 // PAR.D-EDI INV PROC FLAG = CND.ERROR
 PAR.D_EDI_INV_PROC_FLAG = 'X';

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Rtv GTIN              RT) TYPE(RTVOBJ) FILE(PBBTREP)           AC2099107;
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.IDE_GTIN);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?*** Validate the GTIN   error if missing or invalid
 CASE;

 // IF LCL.IDE GTIN is Blank
 IF LCL.IDE_GTIN = *BLANK;

 // AND PAR.EDI BTI GTIN Required is Yes
 AND PAR.EDI_BTI_GTIN_Required = 'Y';

 // PAR.D-EDI INV PROC FLAG = CND.ERROR
 PAR.D_EDI_INV_PROC_FLAG = 'X';

 ENDIF;

 //?*** Retrieve the Catch Wgt flag to use in a formula in the map
 EXECUTE FUNCTION(Rtv Item Defaults      RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1371761;
 PARAMETER(DB1.Item_Code);
 PARAMETER(NLL.Description_Line_One);
 PARAMETER(NLL.Description_Line_Two);
 PARAMETER(NLL.UOM_Primary_Dft);
 PARAMETER(NLL.Conversion_Factor_1);
 PARAMETER(NLL.Operation_Factor_1);
 PARAMETER(NLL.UOM_Second_Dft);
 PARAMETER(NLL.Conversion_Factor_2);
 PARAMETER(NLL.Operation_Factor_2);
 PARAMETER(NLL.UOM_Third_Dft);
 PARAMETER(NLL.UOM_Pricing_Dft);
 PARAMETER(LCL.Unit_Weight);
 PARAMETER(LCL.Catch_Weight_Status);
 PARAMETER(NLL.Item_Structure_Class_Code);
 PARAMETER(NLL.Item_Structure_Group_Code);
 PARAMETER(NLL.Item_Structure_Type_Code);
 PARAMETER(NLL.Item_Type_Code);
 PARAMETER(NLL.Package_Type_Code);
 PARAMETER(NLL.Base_Conv_Loss_Item);
 PARAMETER(NLL.Variety_Rendered_Cut);
 PARAMETER(NLL.Frozen_Make_to_Order_Sts);
 PARAMETER(NLL.Credit_Item_Status);
 PARAMETER(NLL.Seconds_Item);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.Item Code Txt = CVTVAR(DB1.Item Code)
 LCL.Item_Code_Txt = CVTVAR(DB1.Item_Code);

 // WRK.USR Hold Description = CVTVAR(LCL.Item Code Txt)
 WRK.USR_Hold_Description = CVTVAR(LCL.Item_Code_Txt);

 // Execute function CLC Remove LeadZeros 30US.
 EXECUTE FUNCTION(CLC Remove LeadZeros 30US) TYPE(EXCUSRSRC) ('OMNHUFR');
 PARAMETER(WRK.USR_Hold_Description);
 PARAMETER(WRK.USR_Description);
 {
  E                    AR1        30  1               ARRAY 1
  E                    AR2        30  1               ARRAY 2
  C                     MOVEAWUCUNA    AR1              LOAD ARRAY
  C                     Z-ADD1         X       20       SET COUNTER
  C                     Z-ADD1         Y       20       SET COUNTER
  C                     MOVE 'N'       STOP    1        FLAG
  C           X         DOWLT31
  C           AR1,X     IFEQ '0'
  C           STOP      ANDEQ'N'
  C                     ADD  1         X
  C                     ELSE
  C                     MOVE AR1,X     AR2,Y
  C                     ADD  1         Y
  C                     ADD  1         X
  C                     MOVE 'Y'       STOP
  C                     END
  C                     END
  C                     MOVEAAR2       WUJNNA           LOAD OUTPUT
 }

 //?*** If UOM is PP
 CASE;

 // IF LCL.CIR UM Base Price is Price Per Pound
 IF LCL.CIR_UM_Base_Price = 'PP';

 // LCL.PO105-Basis Unit Pr Cde = LCL.CIR UM Base Price
 LCL.PO105_Basis_Unit_Pr_Cde = LCL.CIR_UM_Base_Price;

 // LCL.PO306-Quantity Shipped = DB1.Quantity Ordered
 LCL.PO306_Quantity_Shipped = DB1.Quantity_Ordered;

 // LCL.PO307-UOM Basis for Meas = DB1.U/M - Ordered
 LCL.PO307_UOM_Basis_for_Meas = DB1.U_M_Ordered;

 //?If U/M -Base Price = CW
 CASE;

 // IF DB1.U/M - Base Price is Carcass Hundred Weight
 IF DB1.U_M_Base_Price = 'CW';

 // LCL.PO104-Unit Price = DB1.Unit Price / CON.100 *
 LCL.PO104_Unit_Price = DB1.Unit_Price / 100;

 //?If U/M -Base Price = CW
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?If U/M-Base Price = Cases
 CASE;

 // IF DB1.U/M - Base Price is Cases
 IF DB1.U_M_Base_Price = 'CS';

 // LCL.PO104-Unit Price = DB1.Unit Price / DB1.Unit Weight Ordered U/M *
 LCL.PO104_Unit_Price = DB1.Unit_Price / DB1.Unit_Weight_Ordered_U_M;

 //?If U/M-Base Price = Cases
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.PO104-Unit Price = DB1.Unit Price
 LCL.PO104_Unit_Price = DB1.Unit_Price;

 ENDIF;

 ENDIF;

 ENDIF;

 //?*** If UOM is PE
 CASE;

 // IF LCL.CIR UM Base Price is Price Per Each
 IF LCL.CIR_UM_Base_Price = 'PE';

 // LCL.PO105-Basis Unit Pr Cde = LCL.CIR UM Base Price
 LCL.PO105_Basis_Unit_Pr_Cde = LCL.CIR_UM_Base_Price;

 // LCL.PO306-Quantity Shipped = DB1.Quantity Ordered
 LCL.PO306_Quantity_Shipped = DB1.Quantity_Ordered;

 // LCL.PO307-UOM Basis for Meas = DB1.U/M - Ordered
 LCL.PO307_UOM_Basis_for_Meas = DB1.U_M_Ordered;

 //?If U/M -Base Price = CW
 CASE;

 // IF DB1.U/M - Base Price is Carcass Hundred Weight
 IF DB1.U_M_Base_Price = 'CW';

 // LCL.Price 11.4 USR = DB1.Unit Price / CON.100 *
 LCL.Price_11_4_USR = DB1.Unit_Price / 100;

 // LCL.PO104-Unit Price = LCL.Price 11.4 USR * DB1.Unit Weight Ordered U/M *
 LCL.PO104_Unit_Price = LCL.Price_11_4_USR * DB1.Unit_Weight_Ordered_U_M;

 //?If U/M -Base Price = CW
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?If U/M-Base Price = Cases
 CASE;

 // IF DB1.U/M - Base Price is Cases
 IF DB1.U_M_Base_Price = 'CS';

 // LCL.PO104-Unit Price = DB1.Unit Price
 LCL.PO104_Unit_Price = DB1.Unit_Price;

 //?If U/M-Base Price = Cases
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.PO104-Unit Price = DB1.Unit Price * DB1.Unit Weight Ordered U/M *
 LCL.PO104_Unit_Price = DB1.Unit_Price * DB1.Unit_Weight_Ordered_U_M;

 ENDIF;

 ENDIF;

 ENDIF;

 //?*** If UOM is Blank
 CASE;

 // IF LCL.CIR UM Base Price is Blank
 IF LCL.CIR_UM_Base_Price = *BLANK;

 CASE;

 // IF DB1.U/M - Base Price is Carcass Hundred Weight
 IF DB1.U_M_Base_Price = 'CW';

 // LCL.PO105-Basis Unit Pr Cde = CON.LB
 LCL.PO105_Basis_Unit_Pr_Cde = 'LB';

 // LCL.PO104-Unit Price = DB1.Unit Price / CON.100 *
 LCL.PO104_Unit_Price = DB1.Unit_Price / 100;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.PO105-Basis Unit Pr Cde = DB1.U/M - Base Price
 LCL.PO105_Basis_Unit_Pr_Cde = DB1.U_M_Base_Price;

 // LCL.PO104-Unit Price = DB1.Unit Price
 LCL.PO104_Unit_Price = DB1.Unit_Price;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Crt EDI PO Ack Dtl    CR) TYPE(CRTOBJ) FILE(ECP033)            AC1895043;
 PARAMETER(PAR.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(LCL.IDE_GTIN);
 PARAMETER(*ZERO);
 PARAMETER(DB1.U_M_Ordered);
 PARAMETER(LCL.PO104_Unit_Price);
 PARAMETER(LCL.PO105_Basis_Unit_Pr_Cde);
 PARAMETER('VN');
 PARAMETER(WRK.USR_Description);
 PARAMETER(LCL.BLANK);
 PARAMETER(LCL.CIR_Resource_No);
 PARAMETER('F');
 PARAMETER(DB1.Order_Desc_Line_One);
 PARAMETER(LCL.Catch_Weight_Status);
 PARAMETER(LCL.BLANK);
 PARAMETER(LCL.Blank_Date_USR);
 PARAMETER(LCL.Unit_Weight);
 PARAMETER(LCL.BLANK);
 PARAMETER(LCL.BLANK);
 PARAMETER(*BLANK);
 PARAMETER(LCL.CIR_Resource_No);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(LCL.PO306_Quantity_Shipped);
 PARAMETER(LCL.PO307_UOM_Basis_for_Meas);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 ENDIF;

 ENDIF;

}


//?*** Update PO Ack Header D-EDI INV PROC FLAG if ERROR ****
CASE;

// IF LCL.D-EDI INV PROC FLAG is ERROR
IF LCL.D_EDI_INV_PROC_FLAG = 'X';

EXECUTE FUNCTION(Upd EDI INV PROC FLAG RT) TYPE(RTVOBJ) FILE(ECP032)            AC2100036;
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.D_EDI_INV_PROC_FLAG);
PARAMETER(LCL.Delivery_P_O_Number);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg EDI INV PROC FLAG CH) TYPE(CHGOBJ) FILE(ECP032)            AC2099786;
 PARAMETER(PAR.EDI_SURROGATE_NUMBER);
 PARAMETER(PAR.D_EDI_INV_PROC_FLAG);
 PARAMETER(PAR.POAH_DELIVERY_PO);
}


ENDIF;

