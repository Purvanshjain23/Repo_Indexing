// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDTME1R
// ?Date: 14.08.2025 Time: 03:29:51
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


CASE;

// IF PAR.Company Number is Equal to zero
IF PAR.Company_Number = *ZERO;

// KEY.Company Number = WRK.Company Number
KEY.Company_Number = WRK.Company_Number;

// IF *OTHERWISE
IF *OTHERWISE;

// KEY.Company Number = PAR.Company Number
KEY.Company_Number = PAR.Company_Number;

ENDIF;

// KEY.A/R Customer Number = PAR.A/R Customer Number
KEY.AR_Customer_Number = PAR.AR_Customer_Number;

// KEY.USR Customer Number = PAR.A/R Customer Number
KEY.USR_Customer_Number = PAR.AR_Customer_Number;

// KEY.Invoice Number = PAR.Invoice Number
KEY.Invoice_Number = PAR.Invoice_Number;

// PAR.Access Denied (Y/N) = CND.yes
PAR.Access_Denied_Y_N = 'Y';

//?USER: Initialize key screen

CASE;

// IF PAR.Company Number is Equal to zero
IF PAR.Company_Number = *ZERO;

// KEY.Company Number = WRK.Company Number
KEY.Company_Number = WRK.Company_Number;

// IF *OTHERWISE
IF *OTHERWISE;

// KEY.Company Number = PAR.Company Number
KEY.Company_Number = PAR.Company_Number;

ENDIF;

//?E6933 DN  04/09/17-Default Company Based on A/R OA As of Date.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1510877;
PARAMETER('ARDFTOADT');
PARAMETER(LCL.As_of_Date);
{
 //?USER: Process Data record

 // PAR.System Value Numeric = DB1.System Value Numeric
 PAR.System_Value_Numeric = DB1.System_Value_Numeric;

 QUIT;

}


CASE;

// IF LCL.As of Date is not equal zero
IF LCL.As_of_Date <> *ZERO;

// AND JOB.*Job date GE LCL.As of Date
AND JOB.*Job_date >= LCL.As_of_Date;

EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1510877;
PARAMETER('ARDFTOACO');
PARAMETER(KEY.Company_Number);
{
 //?USER: Process Data record

 // PAR.System Value Numeric = DB1.System Value Numeric
 PAR.System_Value_Numeric = DB1.System_Value_Numeric;

 QUIT;

}


ENDIF;

ENDIF;

// KEY.A/R Customer Number = PAR.A/R Customer Number
KEY.AR_Customer_Number = PAR.AR_Customer_Number;

// KEY.USR Customer Number = PAR.A/R Customer Number
KEY.USR_Customer_Number = PAR.AR_Customer_Number;

// KEY.Invoice Number = PAR.Invoice Number
KEY.Invoice_Number = PAR.Invoice_Number;

//?New code to get next OA Invoice Number   6/04/2018 JBB E13125
CASE;

// IF PAR.Invoice Number is Equal to zero
IF PAR.Invoice_Number = *ZERO;

//?RMC 4/18/22 USES SAME NUMBER SERIES AS CB/RB
EXECUTE FUNCTION(RTV Next CB Number     RT) TYPE(RTVOBJ) FILE(CAASREP)          AC2082405;
PARAMETER(*ZERO);
PARAMETER(PAR.Next_On_Acct_Cash_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.Next On Acct Cash Number = PAR.Next On Acct Cash Number + CON.1
PAR.Next_On_Acct_Cash_Number = PAR.Next_On_Acct_Cash_Number + 1;

EXECUTE FUNCTION(RTV Check invc exists  RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1263564;
PARAMETER(PAR.Next_On_Acct_Cash_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


// DOW PGM.*Return code is *Record already exists
DOW PGM.*Return_code = 'Y2U0003';

// PAR.Next On Acct Cash Number = PAR.Next On Acct Cash Number + CON.1
PAR.Next_On_Acct_Cash_Number = PAR.Next_On_Acct_Cash_Number + 1;

EXECUTE FUNCTION(RTV Check invc exists  RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1263564;
PARAMETER(PAR.Next_On_Acct_Cash_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


ENDDO;

//?RMC this update was commented  on 6/6/18 -- i uncommentd it on 4/14/22
//?RMC 4/18/22 USES SAME NUMBER SERIES AS CB/RB
EXECUTE FUNCTION(RTV Next Charge Back# CH) TYPE(CHGOBJ) FILE(CAASREP)           AC2082404;
PARAMETER(*ZERO);
PARAMETER(PAR.Next_On_Acct_Cash_Number);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// KEY.Invoice Number = PAR.Next On Acct Cash Number
KEY.Invoice_Number = PAR.Next_On_Acct_Cash_Number;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

ENDIF;

//?USER: Validate key screen

//?Prompt company
CASE;

// IF KEY.*CMD key is CF04
IF KEY.*CMD_key = '04';

// AND PGM.*Cursor field <IS> KEY.Company Number
AND PGM.*Cursor_field = KEY.Company_Number;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(KEY.Company_Number);

ENDIF;

//?Prompt customer
CASE;

// IF KEY.*CMD key is CF04
IF KEY.*CMD_key = '04';

// AND PGM.*Cursor field <IS> KEY.USR Customer Number
AND PGM.*Cursor_field = KEY.USR_Customer_Number;

// Call program SEL A/R Customer       SR.
CALL PROGRAM(SEL A/R Customer       SR) ('PDXESRR');
PARAMETER(KEY.USR_Customer_Number);

ENDIF;

EXECUTE FUNCTION(Rtv Plant Co Status   RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1761084;
PARAMETER(KEY.Company_Number);
PARAMETER(LCL.Plant_Company_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?05/11/07 JRB Removed hard coded companies
//?Check for plant company
CASE;

// IF LCL.Plant Company Sts is Plant Company
IF LCL.Plant_Company_Sts = 'P';

//?Check for plant company
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Company not found or Invalid.'
ERROR(USR2270);
MSGPARM(KEY.Company_Number);

ENDIF;

// KEY.A/R Customer Number = KEY.USR Customer Number
KEY.AR_Customer_Number = KEY.USR_Customer_Number;

//?Validate A/R customer
EXECUTE FUNCTION(VAL A/R Customer       RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1452402;
PARAMETER(KEY.AR_Customer_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 QUIT;

}


//?Invalid A/R number
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'A/R Customer is invalid.'
ERROR(USR2110);
MSGPARM(KEY.AR_Customer_Number);

ENDIF;

//?USER: Initialize detail screen (new record)

//?New code to get next OA Invoice Number   6/04/2018 JBB E13125
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?RMC 4/18/22 USES SAME NUMBER SERIES AS CB/RB
EXECUTE FUNCTION(RTV Next CB Number     RT) TYPE(RTVOBJ) FILE(CAASREP)          AC2082405;
PARAMETER(*ZERO);
PARAMETER(PAR.Next_On_Acct_Cash_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.Next On Acct Cash Number = PAR.Next On Acct Cash Number + CON.1
PAR.Next_On_Acct_Cash_Number = PAR.Next_On_Acct_Cash_Number + 1;

EXECUTE FUNCTION(RTV Check invc exists  RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1263564;
PARAMETER(PAR.Next_On_Acct_Cash_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


// DOW PGM.*Return code is *Record already exists
DOW PGM.*Return_code = 'Y2U0003';

// PAR.Next On Acct Cash Number = PAR.Next On Acct Cash Number + CON.1
PAR.Next_On_Acct_Cash_Number = PAR.Next_On_Acct_Cash_Number + 1;

EXECUTE FUNCTION(RTV Check invc exists  RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1263564;
PARAMETER(PAR.Next_On_Acct_Cash_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


ENDDO;

//?RMC this update was commented  on 6/5/18 -- i uncommentd it on 4/14/22
//?RMC 4/18/22 USES SAME NUMBER SERIES AS CB/RB
EXECUTE FUNCTION(RTV Next Charge Back# CH) TYPE(CHGOBJ) FILE(CAASREP)           AC2082404;
PARAMETER(*ZERO);
PARAMETER(PAR.Next_On_Acct_Cash_Number);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// KEY.Invoice Number = PAR.Next On Acct Cash Number
KEY.Invoice_Number = PAR.Next_On_Acct_Cash_Number;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

ENDIF;

// DTL.Invoice Number = PAR.Next On Acct Cash Number
DTL.Invoice_Number = PAR.Next_On_Acct_Cash_Number;

// DTL.Invoice Suffix = CND.On Account Cash
DTL.Invoice_Suffix = 'OA';

// DTL.A/R Processing Status = CND.Entered transaction
DTL.A_R_Processing_Status = 'E';

// DTL.Purge Status = CND.Open
DTL.Purge_Status = 'O';

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(KEY.Company_Number);
PARAMETER(DTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Bank Description   RT) TYPE(RTVOBJ) FILE(CAEBREP)          AC1333216;
PARAMETER(PAR.Bank_Code);
PARAMETER(DTL.Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(KEY.AR_Customer_Number);
PARAMETER(DTL.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Deposit Amounts    RT) TYPE(RTVOBJ) FILE(PDJ2CPP)          AC1334003;
PARAMETER(PAR.Bank_Code);
PARAMETER(PAR.Deposit_Date);
PARAMETER(PAR.Deposit_Time);
PARAMETER(PAR.Deposit_Amount);
PARAMETER(PAR.Total_Cash_Applied);
PARAMETER(PAR.Number_of_Deposit_Checks);
PARAMETER(PAR.Number_of_Applied_Checks);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Bank Code = PAR.Bank Code
DTL.Bank_Code = PAR.Bank_Code;

// DTL.Deposit Amount = PAR.Deposit Amount
DTL.Deposit_Amount = PAR.Deposit_Amount;

// DTL.Total Cash Applied = PAR.Total Cash Applied
DTL.Total_Cash_Applied = PAR.Total_Cash_Applied;

// DTL.Deposit Date = PAR.Deposit Date
DTL.Deposit_Date = PAR.Deposit_Date;

// DTL.Deposit Time = PAR.Deposit Time
DTL.Deposit_Time = PAR.Deposit_Time;

// DTL.Remaining to Apply = DTL.Deposit Amount - DTL.Total Cash Applied
DTL.Remaining_to_Apply = DTL.Deposit_Amount - DTL.Total_Cash_Applied;

// PAR.USR Cash Appl Amount = CON.*ZERO
PAR.USR_Cash_Appl_Amount = *ZERO;

// DTL.Transaction Amount = PAR.Transaction Amount
DTL.Transaction_Amount = PAR.Transaction_Amount;

// DTL.Check $ Remaining = PAR.Transaction Amount
DTL.Check_$_Remaining = PAR.Transaction_Amount;

// WRK.USR Transaction amount = CON.*ZERO
WRK.USR_Transaction_amount = *ZERO;

// PAR.Access Denied (Y/N) = CND.yes
PAR.Access_Denied_Y_N = 'Y';

//?USER: Initialize detail screen (existing record)

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(KEY.Company_Number);
PARAMETER(DTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Bank Description   RT) TYPE(RTVOBJ) FILE(CAEBREP)          AC1333216;
PARAMETER(PAR.Bank_Code);
PARAMETER(DTL.Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(KEY.AR_Customer_Number);
PARAMETER(DTL.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Deposit Amounts    RT) TYPE(RTVOBJ) FILE(PDJ2CPP)          AC1334003;
PARAMETER(PAR.Bank_Code);
PARAMETER(PAR.Deposit_Date);
PARAMETER(PAR.Deposit_Time);
PARAMETER(PAR.Deposit_Amount);
PARAMETER(PAR.Total_Cash_Applied);
PARAMETER(PAR.Number_of_Deposit_Checks);
PARAMETER(PAR.Number_of_Applied_Checks);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Deposit Amount = PAR.Deposit Amount
DTL.Deposit_Amount = PAR.Deposit_Amount;

// DTL.Bank Code = PAR.Bank Code
DTL.Bank_Code = PAR.Bank_Code;

// DTL.Total Cash Applied = PAR.Total Cash Applied
DTL.Total_Cash_Applied = PAR.Total_Cash_Applied;

// DTL.Deposit Date = PAR.Deposit Date
DTL.Deposit_Date = PAR.Deposit_Date;

// DTL.Deposit Time = PAR.Deposit Time
DTL.Deposit_Time = PAR.Deposit_Time;

// DTL.Remaining to Apply = DTL.Deposit Amount - DTL.Total Cash Applied
DTL.Remaining_to_Apply = DTL.Deposit_Amount - DTL.Total_Cash_Applied;

// PAR.USR Cash Appl Amount = DB1.Transaction Amount
PAR.USR_Cash_Appl_Amount = DB1.Transaction_Amount;

// WRK.Transaction Amount = DB1.Transaction Amount
WRK.Transaction_Amount = DB1.Transaction_Amount;

// WRK.USR Transaction amount = DB1.Transaction Amount
WRK.USR_Transaction_amount = DB1.Transaction_Amount;

// PAR.Access Denied (Y/N) = CND.yes
PAR.Access_Denied_Y_N = 'Y';

// DTL.Check $ Remaining = PAR.Transaction Amount
DTL.Check_$_Remaining = PAR.Transaction_Amount;

//?USER: Validate detail screen fields

SET CURSOR;

// PAR.USR Invoice Suffix = CND.On Account Cash
PAR.USR_Invoice_Suffix = 'OA';

CASE;

// IF DTL.Transaction Amount GT DTL.Check $ Remaining
IF DTL.Transaction_Amount > DTL.Check_$_Remaining;

// Send error message - 'Trans Amount greater than Check $ Remaining.'
ERROR(USR3468);
MSGPARM(DTL.Transaction_Amount);

ENDIF;

//?12/28/07 PKD Do not allow negative On-Account.
CASE;

// IF DTL.Transaction Amount is less than zero
IF DTL.Transaction_Amount < *ZERO;

// Send error message - 'Transactions Amount must be positive.'
ERROR(USR3870);
MSGPARM(DTL.Transaction_Amount);

ENDIF;

//?Amounts have been applied to this record and trans can't be changed
CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

CASE;

// IF DTL.Adjustment Amount is not equal to zeros
IF DTL.Adjustment_Amount <> *ZERO;

// OR DTL.Amount Paid is not equal to zeros
OR DTL.Amount_Paid <> *ZERO;

CASE;

// IF DTL.Transaction Amount NE WRK.Transaction Amount
IF DTL.Transaction_Amount <> WRK.Transaction_Amount;

// Send error message - 'Trans. Amt. can't be changed because amounts have been applied to this tran
ERROR(USR2080);
MSGPARM(DTL.Transaction_Amount);

QUIT;

ENDIF;

ENDIF;

ENDIF;

//?Create -- check for A/R Header existance
CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

EXECUTE FUNCTION(VAL Invoice            RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1509004;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Invoice_Number);
PARAMETER(DTL.Invoice_Suffix);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// Send error message - 'AR Header New already exists.'
ERROR(USR0175);

QUIT;

ENDIF;

ENDIF;

//?USER: Validate detail screen relations

//?11/23/01 Perform if Transaction amount was changed
CASE;

// IF DTL.Transaction Amount NE WRK.USR Transaction amount
IF DTL.Transaction_Amount <> WRK.USR_Transaction_amount;

CASE;

// IF PAR.USR Cash Appl Amount is Entered
IF PAR.USR_Cash_Appl_Amount > *ZERO;

// PAR.USR Cash Appl Amt Total = DTL.Transaction Amount - PAR.USR Cash Appl Amount
PAR.USR_Cash_Appl_Amt_Total = DTL.Transaction_Amount - PAR.USR_Cash_Appl_Amount;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Cash Appl Amt Total = DTL.Transaction Amount
PAR.USR_Cash_Appl_Amt_Total = DTL.Transaction_Amount;

ENDIF;

// PAR.USR Amount Applied = DTL.Adjustment Amount + DTL.Amount Paid
PAR.USR_Amount_Applied = DTL.Adjustment_Amount + DTL.Amount_Paid;

// DTL.Remaining Balance Due = DTL.Transaction Amount - PAR.USR Amount Applied
DTL.Remaining_Balance_Due = DTL.Transaction_Amount - PAR.USR_Amount_Applied;

//?RMC dont know why its doing this ->its getting updated to 0  since 6/6/18
// WRK.Transaction Amount = DTL.Transaction Amount
WRK.Transaction_Amount = DTL.Transaction_Amount;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(CRT A/R Header OA      CR) TYPE(CRTOBJ) FILE(ARBDCPP)          AC1398836;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Invoice_Number);
PARAMETER(DTL.Invoice_Suffix);
PARAMETER('OA');
PARAMETER(DTL.Transaction_Amount);
PARAMETER(DTL.Adjustment_Amount);
PARAMETER(DTL.Amount_Paid);
PARAMETER(DTL.Remaining_Balance_Due);
PARAMETER('E');
PARAMETER('O');
PARAMETER(PAR.Bank_Code);
PARAMETER(DTL.GL_Document_Number);
PARAMETER(DTL.Order_Number_Ref);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Salesperson_Code);
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(JOB.*Job_date);
PARAMETER(PAR.Deposit_Date);
PARAMETER(PAR.Deposit_Date);
PARAMETER(DTL.Original_Inv_for_CB);
PARAMETER(DTL.Paid_in_Full_Date);
PARAMETER(DTL.Last_G_L_Post_Date);
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.A_R_Check_Number);
PARAMETER(DTL.Days_to_Pay);
PARAMETER(PAR.Access_Denied_Y_N);
PARAMETER(DTL.Deposit_Date);
PARAMETER(DTL.Deposit_Time);
{
 //?USER: Processing before Data update

 //?Set trans. type to Invoice
 CASE;

 // IF DB1.Invoice Suffix is Invoices
 IF DB1.Invoice_Suffix = 'IN';

 // DB1.Adjustment Type Code = CND.INV Invoice
 DB1.Adjustment_Type_Code = 'INV';

 ENDIF;

 //?Set trans. type to Credit Memo
 CASE;

 // IF DB1.Invoice Suffix is Credit Memos
 IF DB1.Invoice_Suffix = 'CM';

 // DB1.Adjustment Type Code = CND.CRM Credit Memo
 DB1.Adjustment_Type_Code = 'CRM';

 ENDIF;

 //?Set trans. type to Debit Memo
 CASE;

 // IF DB1.Invoice Suffix is Debit Memos
 IF DB1.Invoice_Suffix = 'DM';

 // DB1.Adjustment Type Code = CND.DBM Debit Memo
 DB1.Adjustment_Type_Code = 'DBM';

 ENDIF;

 //?Set trans. type to On Account Cash   -- Crt A/R Header OA 3/30/05
 CASE;

 // IF DB1.Invoice Suffix is On Account Cash
 IF DB1.Invoice_Suffix = 'OA';

 // DB1.Adjustment Type Code = CND.OA On Account Cash
 DB1.Adjustment_Type_Code = 'OA';

 EXECUTE FUNCTION(Crt A/R Header OA     CR) TYPE(CRTOBJ) FILE(PPA4CPP)           AC1728721;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Bank_Code);
 PARAMETER(PAR.Deposit_Date);
 PARAMETER(PAR.Deposit_Time);
 PARAMETER(*BLANK);
 ENDIF;

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // DB1.Job Name = JOB.*PROGRAM
 DB1.Job_Name = JOB.*PROGRAM;

 // PAR.Access Denied (Y/N) = CND.no
 PAR.Access_Denied_Y_N = 'N';

 //?USER: Processing after Data update

 //?E6933 DN  08/12/16 - Create A/R Header Ext record.
 // Call program Crt A/R Header Ext    XF.
 CALL PROGRAM(Crt A/R Header Ext    XF) ('PBX3XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Remaining_Balance_Due);
 PARAMETER(DB1.Order_Number_Ref);
 PARAMETER(DB1.Original_Inv_for_CB);

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG A/R Header for OA  CH) TYPE(CHGOBJ) FILE(ARBDCPP)          AC1398835;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Invoice_Number);
PARAMETER(DTL.Invoice_Suffix);
PARAMETER(DTL.Adjustment_Type_Code);
PARAMETER(DTL.Transaction_Amount);
PARAMETER(DTL.Adjustment_Amount);
PARAMETER(DTL.Amount_Paid);
PARAMETER(DTL.Remaining_Balance_Due);
PARAMETER(DTL.A_R_Processing_Status);
PARAMETER(DTL.Purge_Status);
PARAMETER(DTL.Bank_Code);
PARAMETER(DTL.GL_Document_Number);
PARAMETER(DTL.Order_Number_Ref);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Salesperson_Code);
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(DTL.Transaction_Date_Code);
PARAMETER(DTL.Due_Date);
PARAMETER(DTL.Last_Payment_Date);
PARAMETER(DTL.Original_Inv_for_CB);
PARAMETER(DTL.Paid_in_Full_Date);
PARAMETER(DTL.Last_G_L_Post_Date);
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.A_R_Check_Number);
PARAMETER(DTL.Days_to_Pay);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(PAR.Access_Denied_Y_N);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // PAR.Access Denied (Y/N) = CND.no
 PAR.Access_Denied_Y_N = 'N';

}


//?USER: Exit program processing

//?New 12/17/01
CASE;

// IF DTL.*CMD key is *Exit
IF DTL.*CMD_key = '03';

// PAR.Access Denied (Y/N) = CND.yes
PAR.Access_Denied_Y_N = 'Y';

ENDIF;

CASE;

// IF PAR.Access Denied (Y/N) is no
IF PAR.Access_Denied_Y_N = 'N';

CASE;

// IF WRK.USR Transaction amount NE WRK.Transaction Amount
IF WRK.USR_Transaction_amount <> WRK.Transaction_Amount;

// PAR.USR Cust Apply = PAR.USR Cust Apply + WRK.Transaction Amount
PAR.USR_Cust_Apply = PAR.USR_Cust_Apply + WRK.Transaction_Amount;

//?RMC 5/23/06 adj deposit by the diff in the trans amt
// WRK.USR Differential = WRK.Transaction Amount - WRK.USR Transaction amount
WRK.USR_Differential = WRK.Transaction_Amount - WRK.USR_Transaction_amount;

EXECUTE FUNCTION(CHG Cash Applied       RT) TYPE(RTVOBJ) FILE(PDJ2CPP)          AC1334014;
PARAMETER(PAR.Bank_Code);
PARAMETER(PAR.Deposit_Date);
PARAMETER(PAR.Deposit_Time);
PARAMETER(WRK.USR_Differential);
{
 //?USER: Process Data record

 // WRK.Total Cash Applied = PAR.USR Cash Appl Amt Total + DB1.Total Cash Applied
 WRK.Total_Cash_Applied = PAR.USR_Cash_Appl_Amt_Total + DB1.Total_Cash_Applied;

 EXECUTE FUNCTION(CHG Cash Applied Field CH) TYPE(CHGOBJ) FILE(PDJ2CPP)          AC1334031;
 PARAMETER(DB1.Bank_Code);
 PARAMETER(DB1.Deposit_Date);
 PARAMETER(DB1.Deposit_Time);
 PARAMETER(WRK.Total_Cash_Applied);
 PARAMETER('E');
 PARAMETER(DB1.CD_TF_Internal_Batch_Nbr);
 PARAMETER(DB1.CD_TF_Immediate_Fund_Amt);
 PARAMETER(DB1.CD_TF_1_Day_Fund_Amt);
 PARAMETER(DB1.CD_TF_2_Day_Fund_Amt);
 PARAMETER(DB1.CD_SB_Exempt_Immed_Amt);
 PARAMETER(DB1.CD_SB_1_Day_Exempt_Immed);
 PARAMETER(DB1.CD_SB_2_Day_Exempt_Immed);
 PARAMETER(DB1.SBD_Exempt_Total_Amount);
 PARAMETER(DB1.ARBD_Unused_Amt_2);
 PARAMETER(DB1.ARBD_Unused_Amt_3);
 PARAMETER(DB1.ARBD_Unused_Amt_4);
 PARAMETER(DB1.ARBD_Unused_Amt_5);
}


ENDIF;

ENDIF;

