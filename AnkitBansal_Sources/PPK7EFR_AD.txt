// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPK7EFR
// ?Date: 14.08.2025 Time: 03:41:03
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?*** Setup Security & Company Title ***
// PAR.Application Code = CND.Order Management System
PAR.Application_Code = 'OMS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.Display Flag = CND.No
PAR.Display_Flag = 'N';

// PAR.Clm Program USR = CND.Edit Claim Comment
PAR.Clm_Program_USR = 'ECC';

//?***** Change Log and Comments
DO;

//?** 03/03/2008 LJB E00094
//?** Don't prompt if parm status flag = Yes (new claim)
//?** 02/27/2008 LJB E00094
//?** Prompt to email changed claim with text to St Joe. Email if
//?** response is "Yes".
ENDDO;

//?USER: Validate subfile control

// PAR.Change Modes          USR = CND.No
PAR.Change_Modes_USR = 'N';

CASE;

// IF CTL.*CMD key is CF13
IF CTL.*CMD_key = '13';

//?Toggle Display of Options.
DO;

CASE;

// IF PAR.Display Flag is Yes
IF PAR.Display_Flag = 'Y';

// PAR.Display Flag = CND.No
PAR.Display_Flag = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Display Flag = CND.Yes
PAR.Display_Flag = 'Y';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDDO;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(CRT A/R Claim ExplUsrEnIF) TYPE(EXCINTFUN) FILE(PDMNCPP)       AC1874751;
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Claim_Explanation_Line_No);
PARAMETER(RCD.Claim_Explanation_Text);
PARAMETER(RCD.Claim_Exp_Usr_Seq_Number);
PARAMETER(RCD.Claim_Expl_Note_Date);
PARAMETER('E');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('CAR');
PARAMETER(PAR.Claim_Audit_Selection_Usr);
PARAMETER(PAR.Claim_Audit_Co_Value_Usr);
PARAMETER(PAR.Approval_Claim_Audit_Eml);
{
 //?Execute internal function

 EXECUTE FUNCTION(RTV Lst Expln Lne No   RT) TYPE(RTVOBJ) FILE(PDMNCPP)          AC1874769;
 PARAMETER(PAR.Claim_Number);
 PARAMETER(LCL.Claim_Explanation_Line_No);
 {
  //?USER: Initialize routine

  //?Template version identifier - Edit to reflect current version.
  //?Template version identifier - Edit to reflect current version.
  EXECUTE FUNCTION(@Template Version) TYPE(EXCINTFUN)                             AC1523909;
  PARAMETER('1');
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Claim Explanation Line No = CON.001
  PAR.Claim_Explanation_Line_No = 001;

  //?USER: Process Data record

  // PAR.Claim Explanation Line No = DB1.Claim Explanation Line No + CON.1
  PAR.Claim_Explanation_Line_No = DB1.Claim_Explanation_Line_No + 1;

  QUIT;

 }

 EXECUTE FUNCTION(CRT A/R Claim ExplanSA CR) TYPE(CRTOBJ) FILE(PDMNCPP)          AC1877643;
 PARAMETER(PAR.Claim_Number);
 PARAMETER(LCL.Claim_Explanation_Line_No);
 PARAMETER(PAR.Claim_Explanation_Text);
 PARAMETER(PAR.Claim_Expl_Type_of_Note);
 PARAMETER(PAR.Claim_Expl_Action);
 PARAMETER(PAR.Claim_Audit_Selection_Usr);
 PARAMETER(PAR.Claim_Audit_Co_Value_Usr);
 PARAMETER(PAR.Approval_Claim_Audit_Eml);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

  //?USER: Processing after Data update

  CASE;

  // IF PAR.Claim Audit Selection Usr is yes
  IF PAR.Claim_Audit_Selection_Usr = 'Y';

  //?System generated action notes
  //?Comment Explanation Created
  // Call program Crt A/R Claim ExpComSG XF.
  CALL PROGRAM(Crt A/R Claim ExpComSG XF) ('PMTNXFR');
  PARAMETER(PAR.Claim_Number);
  PARAMETER('Explanation Created');
  PARAMETER('S');
  PARAMETER('CLMCHANGE');
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('CAR');

  ENDIF;

 }

 // PAR.Claim Explanation Line No = LCL.Claim Explanation Line No
 PAR.Claim_Explanation_Line_No = LCL.Claim_Explanation_Line_No;

}


//?USER: Delete DBF record

EXECUTE FUNCTION(DLT A/R Claim ExplUsrEnIF) TYPE(EXCINTFUN) FILE(PDMNCPP)       AC1875303;
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Claim_Explanation_Line_No);
PARAMETER(PAR.Claim_Audit_Selection_Usr);
PARAMETER(PAR.Claim_Audit_Co_Value_Usr);
PARAMETER(PAR.Approval_Claim_Audit_Eml);
{
 //?Execute internal function

 EXECUTE FUNCTION(DLT A/R Claim ExplUsrEnDL) TYPE(DLTOBJ) FILE(PDMNCPP)          AC1875311;
 PARAMETER(PAR.Claim_Number);
 PARAMETER(PAR.Claim_Explanation_Line_No);
 PARAMETER(PAR.Claim_Audit_Selection_Usr);
 PARAMETER(PAR.Claim_Audit_Co_Value_Usr);
 PARAMETER(PAR.Approval_Claim_Audit_Eml);
 {
  //?USER: Processing after Data update

  CASE;

  // IF DB1.Claim Expl Type of Note is Explanation Notes
  IF DB1.Claim_Expl_Type_of_Note = 'E';

  CASE;

  // IF PAR.Claim Audit Selection Usr is yes
  IF PAR.Claim_Audit_Selection_Usr = 'Y';

  //?delete a/r claim exp record
  // Call program Crt A/R Claim ExpComSG XF.
  CALL PROGRAM(Crt A/R Claim ExpComSG XF) ('PMTNXFR');
  PARAMETER(DB1.Claim_Number);
  PARAMETER('Explanation Deleted');
  PARAMETER('S');
  PARAMETER('CLMCHANGE');
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.Claim_Department_Group);

  ENDIF;

  ENDIF;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg A/R Claim ExplUsrEnIF) TYPE(EXCINTFUN) FILE(PDMNCPP)       AC1875231;
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Claim_Explanation_Line_No);
PARAMETER(RCD.Claim_Explanation_Text);
PARAMETER(RCD.Claim_Exp_Usr_Seq_Number);
PARAMETER(RCD.Claim_Expl_Note_Date);
PARAMETER('E');
PARAMETER(RCD.Claim_Expl_Action);
PARAMETER(RCD.Claim_Expl_Action_Cmp_Dte);
PARAMETER(RCD.Claim_Expl_Action_Cmp_Tme);
PARAMETER(RCD.Claim_Department_Group);
PARAMETER(RCD.Record_Status);
PARAMETER(PAR.Claim_Audit_Selection_Usr);
PARAMETER(PAR.Claim_Audit_Co_Value_Usr);
PARAMETER(PAR.Approval_Claim_Audit_Eml);
{
 //?Execute internal function

 EXECUTE FUNCTION(CHG A/R Claim ExplUsrEnCH) TYPE(CHGOBJ) FILE(PDMNCPP)          AC1875308;
 PARAMETER(PAR.Claim_Number);
 PARAMETER(PAR.Claim_Explanation_Line_No);
 PARAMETER(PAR.Claim_Explanation_Text);
 PARAMETER(PAR.Claim_Exp_Usr_Seq_Number);
 PARAMETER(PAR.Claim_Expl_Note_Date);
 PARAMETER(PAR.Claim_Expl_Type_of_Note);
 PARAMETER(PAR.Claim_Expl_Action);
 PARAMETER(PAR.Claim_Expl_Action_Cmp_Dte);
 PARAMETER(PAR.Claim_Expl_Action_Cmp_Tme);
 PARAMETER(PAR.Claim_Department_Group);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Claim_Audit_Selection_Usr);
 PARAMETER(PAR.Claim_Audit_Co_Value_Usr);
 PARAMETER(PAR.Approval_Claim_Audit_Eml);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

  //?USER: Processing after Data update

  CASE;

  // IF DB1.Claim Expl Type of Note is Explanation Notes
  IF DB1.Claim_Expl_Type_of_Note = 'E';

  CASE;

  // IF PAR.Claim Audit Selection Usr is yes
  IF PAR.Claim_Audit_Selection_Usr = 'Y';

  // Call program Crt A/R Claim ExpComSG XF.
  CALL PROGRAM(Crt A/R Claim ExpComSG XF) ('PMTNXFR');
  PARAMETER(DB1.Claim_Number);
  PARAMETER('Explanation Changed');
  PARAMETER('S');
  PARAMETER('CLMCHANGE');
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.Claim_Department_Group);

  ENDIF;

  ENDIF;

 }

}


//?USER: Extra processing after DBF update

CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

// PAR.Change Modes          USR = CND.Yes
PAR.Change_Modes_USR = 'Y';

ENDIF;

//?USER: Process command keys

CASE;

// IF CTL.*CMD key is CF13
IF CTL.*CMD_key = '13';

//?F13=Toggle Options.
DO;

CASE;

// IF PAR.Display Flag is No
IF PAR.Display_Flag = 'N';

// PAR.Display Flag = CND.Yes
PAR.Display_Flag = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Display Flag = CND.No
PAR.Display_Flag = 'N';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDDO;

// IF CTL.*CMD key is CF09
IF CTL.*CMD_key = '09';

// IF CTL.*CMD key is CF12
IF CTL.*CMD_key = '12';

//?F12=Previous.
DO;

// PAR.Return Command USR = CND.F12
PAR.Return_Command_USR = 'F12';

RETURN;

ENDDO;

// IF PAR.Change Modes          USR is Yes
IF PAR.Change_Modes_USR = 'Y';

//?Change Program Mode from "Add" to "Change".
DO;

// PGM.*Program mode = CND.*CHANGE
PGM.*Program_mode = 'CHG';

ENDDO;

// IF CTL.*CMD key is SUBMIT/NEXT
IF CTL.*CMD_key = '08';

// PAR.Clm Program USR = CND.Work With Resale
PAR.Clm_Program_USR = 'WWR';

RETURN;

// IF CTL.*CMD key is BACK
IF CTL.*CMD_key = '07';

// PAR.Clm Program USR = CND.Edit Claim Product
PAR.Clm_Program_USR = 'ECP';

RETURN;

// IF *OTHERWISE
IF *OTHERWISE;

//?Enter=Continue.
DO;

EXECUTE FUNCTION(VAL Exist Claim Explan RT) TYPE(RTVOBJ) FILE(PDMNCPP)          AC1525545;
PARAMETER(CTL.Claim_Number);
{
 //?USER: Initialize routine

 //?Template version identifier - Edit to reflect current version.
 //?Template version identifier - Edit to reflect current version.
 EXECUTE FUNCTION(@Template Version) TYPE(EXCINTFUN)                             AC1523909;
 PARAMETER('1');
 //?USER: Process Data record

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// PAR.Return Command USR = CND.Continue
PAR.Return_Command_USR = 'F20';

RETURN;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Claim Explanation is required.'
ERROR(USR2758);

ENDIF;

ENDDO;

ENDIF;

//?USER: Exit program processing

//?F3=Exit
CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

// PAR.Clm Program USR = CND.Exit
PAR.Clm_Program_USR = 'EXT';

RETURN;

ENDIF;

