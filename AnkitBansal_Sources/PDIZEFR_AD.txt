// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDIZEFR
// ?Date: 14.08.2025 Time: 03:28:28
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('C/A');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.USR Display field = CND.no
PAR.USR_Display_field = 'N';

// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

//?USER: Initialize subfile header

CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// CTL.Accounting Company Number = PAR.Accounting Company Number
CTL.Company_Number = PAR.Company_Number;

//?wrk.accounting company number is used to determine when CTL has changed.
// WRK.Accounting Company Number = PAR.Accounting Company Number
WRK.Company_Number = PAR.Company_Number;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

ENDIF;

//?USER: Initialize subfile record (existing record)

//?Select on Company
CASE;

// IF CTL.Accounting Company Number is greater than zero
IF CTL.Company_Number > *ZERO;

CASE;

// IF CTL.Accounting Company Number NE DB1.Accounting Company Number
IF CTL.Company_Number <> DB1.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Initialize subfile record (new record)

// PAR.USR Display field = CND.no
PAR.USR_Display_field = 'N';

//?USER: Validate subfile control

CASE;

// IF CTL.Accounting Company Number NE WRK.Accounting Company Number
IF CTL.Company_Number <> WRK.Company_Number;

// WRK.Accounting Company Number = CTL.Accounting Company Number
WRK.Company_Number = CTL.Company_Number;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Process enable/disable
CASE;

// IF CTL.*CMD key is *Enable/Disable Options
IF CTL.*CMD_key = '08';

CASE;

// IF PAR.USR Display field is no
IF PAR.USR_Display_field = 'N';

// PAR.USR Display field = CND.yes
PAR.USR_Display_field = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Display field = CND.no
PAR.USR_Display_field = 'N';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?USER: Validate subfile record fields

//?Edit for add mode:  ensure company # is allowed
CASE;

// IF PAR.Allow Multi-Company is no
IF PAR.Allow_Multi_Company = 'N';

CASE;

// IF RCD.Accounting Company Number NE PAR.Accounting Company Number
IF RCD.Company_Number <> PAR.Company_Number;

// Send error message - 'Invalid Company Number'
ERROR(USR1783);
MSGPARM(RCD.Company_Number);

ENDIF;

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Item Balance       CR) TYPE(CRTOBJ) FILE(CAB0REP)          AC1119976;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Unit_Cost_Per_Pound);
PARAMETER(RCD.Last_Cost);
PARAMETER(RCD.Cost_per_Primary_UOM);
PARAMETER(RCD.Cost_per_Pricing_UOM);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(RCD.On_Hand_Weight_Summary);
PARAMETER(RCD.On_Hand_UOM1_Summary);
PARAMETER(RCD.On_Hand_UOM2_Summary);
PARAMETER(RCD.On_Hand_UOM3_Summary);
PARAMETER(RCD.Quantity_In_Chill);
PARAMETER(RCD.Weight_In_Chill);
PARAMETER(RCD.Quantity_Scheduled_UOM1);
PARAMETER(RCD.Quantity_on_Sales_Order);
PARAMETER(RCD.Quantity_on_Purch_Order);
PARAMETER(RCD.Quantity_on_Transfer);
PARAMETER(RCD.Quantity_Avail_To_Sell);
PARAMETER(RCD.Cycle_Count_Code_IB);
PARAMETER(RCD.Date_of_Last_Order);
PARAMETER(RCD.Date_of_Last_Shipment);
PARAMETER(RCD.Value_of_On_Hand_Inventor);
PARAMETER(RCD.Inventory_Planning_Type);
PARAMETER(RCD.Safety_Allowance_Percent);
PARAMETER(RCD.Safety_Allowance_Quantity);
PARAMETER(RCD.Stock_Out_Date);
PARAMETER(RCD.Buyer_Code);
PARAMETER(RCD.Lead_Time_Last);
PARAMETER(RCD.Lead_Time_Date_Last);
PARAMETER(RCD.Lead_Time_Next_to_Last);
PARAMETER(RCD.Lead_Time_Date_Next_Lst);
PARAMETER(RCD.Lead_Time_Exception);
PARAMETER(RCD.Usage_Qty_per_Cycle);
PARAMETER(RCD.Usage_Weight_per_Cycle);
PARAMETER(RCD.Inventory_Management);
PARAMETER(RCD.Minimum_Quantity);
PARAMETER(RCD.Maximum_Quantity);
PARAMETER(RCD.Last_Physical_Count);
PARAMETER(RCD.Requisition_Mode);
PARAMETER(RCD.Cost_Update_Pending);
PARAMETER(RCD.Post_GL_Status);
PARAMETER(RCD.Vendor_Item_Whse_Default);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Delete DBF record

EXECUTE FUNCTION(DLT Item Balance       DL) TYPE(DLTOBJ) FILE(CAB0REP)          AC1119978;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Item Balance       CH) TYPE(CHGOBJ) FILE(CAB0REP)          AC1119977;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Unit_Cost_Per_Pound);
PARAMETER(RCD.Last_Cost);
PARAMETER(RCD.Cost_per_Primary_UOM);
PARAMETER(RCD.Cost_per_Pricing_UOM);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(RCD.On_Hand_Weight_Summary);
PARAMETER(RCD.On_Hand_UOM1_Summary);
PARAMETER(RCD.On_Hand_UOM2_Summary);
PARAMETER(RCD.On_Hand_UOM3_Summary);
PARAMETER(RCD.Quantity_In_Chill);
PARAMETER(RCD.Weight_In_Chill);
PARAMETER(RCD.Quantity_Scheduled_UOM1);
PARAMETER(RCD.Quantity_on_Sales_Order);
PARAMETER(RCD.Quantity_on_Purch_Order);
PARAMETER(RCD.Quantity_on_Transfer);
PARAMETER(RCD.Quantity_Avail_To_Sell);
PARAMETER(RCD.Cycle_Count_Code_IB);
PARAMETER(RCD.Date_of_Last_Order);
PARAMETER(RCD.Date_of_Last_Shipment);
PARAMETER(RCD.Value_of_On_Hand_Inventor);
PARAMETER(RCD.Inventory_Planning_Type);
PARAMETER(RCD.Safety_Allowance_Percent);
PARAMETER(RCD.Safety_Allowance_Quantity);
PARAMETER(RCD.Stock_Out_Date);
PARAMETER(RCD.Buyer_Code);
PARAMETER(RCD.Lead_Time_Last);
PARAMETER(RCD.Lead_Time_Date_Last);
PARAMETER(RCD.Lead_Time_Next_to_Last);
PARAMETER(RCD.Lead_Time_Date_Next_Lst);
PARAMETER(RCD.Lead_Time_Exception);
PARAMETER(RCD.Usage_Qty_per_Cycle);
PARAMETER(RCD.Usage_Weight_per_Cycle);
PARAMETER(RCD.Inventory_Management);
PARAMETER(RCD.Minimum_Quantity);
PARAMETER(RCD.Maximum_Quantity);
PARAMETER(RCD.Last_Physical_Count);
PARAMETER(RCD.Requisition_Mode);
PARAMETER(RCD.Cost_Update_Pending);
PARAMETER(RCD.Post_GL_Status);
PARAMETER(RCD.Vendor_Item_Whse_Default);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Extra processing after DBF update

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

