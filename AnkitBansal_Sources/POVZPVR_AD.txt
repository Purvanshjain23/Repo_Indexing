// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POVZPVR
// ?Date: 14.08.2025 Time: 03:39:15
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('YR');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(Set Access            IF) TYPE(EXCINTFUN)                      AC1667888;
PARAMETER(PAR.User_Department);
PARAMETER(PAR.User_Access);
PARAMETER(PAR.Output_Production_USR);
PARAMETER(PAR.Output_Begin_Inv_USR);
PARAMETER(PAR.Output_Not_Used_USR);
PARAMETER(PAR.Output_Partial_Prod_USR);
PARAMETER(PAR.Output_Head_Cut_Wgt_USR);
PARAMETER(PAR.Output_Conv_Start_Wgt);
PARAMETER(PAR.Output_Comment_USR);
PARAMETER(PAR.Add_Partial_USR);
PARAMETER(PAR.Calculate_Yield_USR);
PARAMETER(PAR.Publish_Yield_USR);
{
 //?Execute internal function

 //?** Accounting has all access **
 // PAR.Output Production USR = CND.no
 PAR.Output_Production_USR = 'N';

 // PAR.Output Begin Inv USR = CND.no
 PAR.Output_Begin_Inv_USR = 'N';

 // PAR.Output Not Used USR = CND.no
 PAR.Output_Not_Used_USR = 'N';

 // PAR.Output Partial Prod USR = CND.no
 PAR.Output_Partial_Prod_USR = 'N';

 // PAR.Output Head Cut/Wgt USR = CND.no
 PAR.Output_Head_Cut_Wgt_USR = 'N';

 // PAR.Output Conv Start Wgt = CND.no
 PAR.Output_Conv_Start_Wgt = 'N';

 // PAR.Output Comment USR = CND.no
 PAR.Output_Comment_USR = 'N';

 // PAR.Add Partial USR = CND.yes
 PAR.Add_Partial_USR = 'Y';

 // PAR.Calculate Yield USR = CND.yes
 PAR.Calculate_Yield_USR = 'Y';

 // PAR.Publish Yield USR = CND.yes
 PAR.Publish_Yield_USR = 'Y';

 CASE;

 // IF PAR.User Department is Production
 IF PAR.User_Department = 'PR';

 // PAR.Output Production USR = CND.yes
 PAR.Output_Production_USR = 'Y';

 // PAR.Output Begin Inv USR = CND.yes
 PAR.Output_Begin_Inv_USR = 'Y';

 // PAR.Output Partial Prod USR = CND.yes
 PAR.Output_Partial_Prod_USR = 'Y';

 // PAR.Output Conv Start Wgt = CND.yes
 PAR.Output_Conv_Start_Wgt = 'Y';

 //?* Cannot enter Head Cut/Cold Weight *
 // PAR.Output Head Cut/Wgt USR = CND.yes
 PAR.Output_Head_Cut_Wgt_USR = 'Y';

 // IF PAR.User Department is Main Break
 IF PAR.User_Department = 'MB';

 // PAR.Output Production USR = CND.yes
 PAR.Output_Production_USR = 'Y';

 // PAR.Output Begin Inv USR = CND.yes
 PAR.Output_Begin_Inv_USR = 'Y';

 // PAR.Output Partial Prod USR = CND.yes
 PAR.Output_Partial_Prod_USR = 'Y';

 // PAR.Output Conv Start Wgt = CND.yes
 PAR.Output_Conv_Start_Wgt = 'Y';

 // IF PAR.User Department is Converting
 IF PAR.User_Department = 'CV';

 // PAR.Output Production USR = CND.yes
 PAR.Output_Production_USR = 'Y';

 // PAR.Output Begin Inv USR = CND.yes
 PAR.Output_Begin_Inv_USR = 'Y';

 // PAR.Output Not Used USR = CND.yes
 PAR.Output_Not_Used_USR = 'Y';

 // PAR.Output Partial Prod USR = CND.yes
 PAR.Output_Partial_Prod_USR = 'Y';

 // PAR.Output Head Cut/Wgt USR = CND.yes
 PAR.Output_Head_Cut_Wgt_USR = 'Y';

 // PAR.Output Comment USR = CND.yes
 PAR.Output_Comment_USR = 'Y';

 // PAR.Add Partial USR = CND.no
 PAR.Add_Partial_USR = 'N';

 // PAR.Calculate Yield USR = CND.no
 PAR.Calculate_Yield_USR = 'N';

 // PAR.Publish Yield USR = CND.no
 PAR.Publish_Yield_USR = 'N';

 // IF PAR.User Department is Product Manager
 IF PAR.User_Department = 'PM';

 // PAR.Output Production USR = CND.yes
 PAR.Output_Production_USR = 'Y';

 // PAR.Output Begin Inv USR = CND.yes
 PAR.Output_Begin_Inv_USR = 'Y';

 // PAR.Output Not Used USR = CND.yes
 PAR.Output_Not_Used_USR = 'Y';

 // PAR.Output Partial Prod USR = CND.yes
 PAR.Output_Partial_Prod_USR = 'Y';

 // PAR.Output Head Cut/Wgt USR = CND.yes
 PAR.Output_Head_Cut_Wgt_USR = 'Y';

 // PAR.Output Conv Start Wgt = CND.yes
 PAR.Output_Conv_Start_Wgt = 'Y';

 // PAR.Output Comment USR = CND.yes
 PAR.Output_Comment_USR = 'Y';

 // PAR.Add Partial USR = CND.no
 PAR.Add_Partial_USR = 'N';

 // PAR.Calculate Yield USR = CND.no
 PAR.Calculate_Yield_USR = 'N';

 // PAR.Publish Yield USR = CND.no
 PAR.Publish_Yield_USR = 'N';

 ENDIF;

}


//?USER: Load screen

MOVE *ALL (To: DTL From: PAR);

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Department Desc DRV) TYPE(DRVFLD)                              AC1666904;
PARAMETER(DTL.Department_Desc_DRV);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Department_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Prod Dept Name    RT) TYPE(RTVOBJ) FILE(PDI5REP)           AC1286709;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Department_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Production Line Desc DRV) TYPE(DRVFLD)                         AC1666905;
PARAMETER(DTL.Production_Line_Desc_DRV);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Department_Code);
PARAMETER(DTL.Production_Line_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Prod Line Desc    RT) TYPE(RTVOBJ) FILE(POCMREP)           AC1666906;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Production_Line_Code);
 PARAMETER(PAR.Production_Line_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// DTL.Condition Desc. 1  USR = Condition name of DTL.Yld Inv Balance Type
DTL.Condition_Desc_1_USR = RTVCND(DTL.Yld_Inv_Balance_Type);

//?Finished Goods/Work In Process
CASE;

// IF PAR.Yld Inv Balance Type is Finished Good
IF PAR.Yld_Inv_Balance_Type = 'FG';

// OR PAR.Yld Inv Balance Type is Work In Process
OR PAR.Yld_Inv_Balance_Type = 'WP';

// PAR.Output Begin Inv USR = CND.yes
PAR.Output_Begin_Inv_USR = 'Y';

// PAR.Output Partial Prod USR = CND.yes
PAR.Output_Partial_Prod_USR = 'Y';

// LCL.Display Flag = CND.No
LCL.Display_Flag = 'N';

ENDIF;

//?WIP Reject
CASE;

// IF PAR.Yld Inv Balance Type is WIP Reject
IF PAR.Yld_Inv_Balance_Type = 'RJ';

// PAR.Output Partial Prod USR = CND.yes
PAR.Output_Partial_Prod_USR = 'Y';

ENDIF;

EXECUTE FUNCTION(Rtv Typ/Grp/Cls/PrtlC RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1672883;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Item_Structure_Class_Code);
PARAMETER(DTL.Item_Structure_Group_Code);
PARAMETER(DTL.Item_Structure_Type_Code);
PARAMETER(DTL.Partial_Item_Code);
PARAMETER(DTL.WIP_Reject_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Reconcile Item    RT) TYPE(RTVOBJ) FILE(POCOCPP)           AC1679525;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Department_Code);
PARAMETER(DTL.Production_Line_Code);
PARAMETER(DTL.Production_Date);
PARAMETER(DTL.Production_Shift);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Partial_Item_Code);
PARAMETER(DTL.Yld_Inv_Balance_Type);
PARAMETER(DTL.Partial_Produced_Wgt);
PARAMETER(DTL.Beginning_Inv_Wgt);
PARAMETER(DTL.Not_Used_Wgt);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Validate fields

CASE;

// IF DTL.Item Code NE PAR.Item Code
IF DTL.Item_Code <> PAR.Item_Code;

// DTL.Item Code = PAR.Item Code
DTL.Item_Code = PAR.Item_Code;

ENDIF;

EXECUTE FUNCTION(Rtv Dept/Line         RT) TYPE(RTVOBJ) FILE(POCNREP)           AC1664090;
PARAMETER(DTL.Item_Structure_Type_Code);
PARAMETER(DTL.Item_Structure_Group_Code);
PARAMETER(DTL.Item_Structure_Class_Code);
PARAMETER(LCL.Department_Code);
PARAMETER(LCL.Production_Line_Code);
PARAMETER(WRK.WIP_Usage_Dept_Code);
PARAMETER(WRK.WIP_Usage_Prod_Line_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Department Code NE DTL.Department Code
IF LCL.Department_Code <> DTL.Department_Code;

// OR LCL.Production Line Code NE DTL.Production Line Code
OR LCL.Production_Line_Code <> DTL.Production_Line_Code;

// Send error message - 'Item is invalid for the &2 department and the &3 line.'
ERROR(USR3274);
MSGPARM(DTL.Item_Code);
MSGPARM(DTL.Department_Code);
MSGPARM(DTL.Production_Line_Code);

ENDIF;

CASE;

// IF DTL.Yld Inv Balance Type is WIP Reject
IF DTL.Yld_Inv_Balance_Type = 'RJ';

// DTL.Partial Item Code = DTL.WIP Reject Code
DTL.Partial_Item_Code = DTL.WIP_Reject_Code;

ENDIF;

//?CALC: Screen function fields

EXECUTE FUNCTION(Item Desc DRV) TYPE(DRVFLD)                                    AC1505592;
PARAMETER(DTL.Item_Desc_DRV);
PARAMETER(DTL.Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Desc_DRV);
 PARAMETER(WRK.Description_Line_Two);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: User defined action

CASE;

// IF DTL.*CMD key is SUBMIT
IF DTL.*CMD_key = '08';

EXECUTE FUNCTION(Add Reconcile Item    RT) TYPE(RTVOBJ) FILE(POCOCPP)           AC1668721;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Department_Code);
PARAMETER(DTL.Production_Line_Code);
PARAMETER(DTL.Production_Date);
PARAMETER(DTL.Production_Shift);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Partial_Item_Code);
PARAMETER(DTL.Yld_Inv_Balance_Type);
PARAMETER(DTL.Partial_Produced_Wgt);
PARAMETER(DTL.Beginning_Inv_Wgt);
PARAMETER(DTL.Not_Used_Wgt);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(Rtv Typ/Grp/Cls, Type RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1664670;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(LCL.Item_Type_Code);
 PARAMETER(PAR.Credit_Item_Status);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Crt Yld Inventory Bal CR) TYPE(CRTOBJ) FILE(POCOCPP)           AC1664073;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Production_Line_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Production_Shift);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Partial_Item_Code);
 PARAMETER(PAR.Yld_Inv_Balance_Type);
 PARAMETER(PAR.WIP_Usage_Company_Num);
 PARAMETER(PAR.WIP_Usage_Dept_Code);
 PARAMETER(PAR.WIP_Usage_Prod_Line_Code);
 PARAMETER(PAR.Partial_Produced_Qty);
 PARAMETER(PAR.Partial_Produced_Wgt);
 PARAMETER(PAR.Beginning_Inv_Qty);
 PARAMETER(PAR.Beginning_Inv_Wgt);
 PARAMETER(PAR.Delete_Pending_Qty);
 PARAMETER(PAR.Delete_Pending_Wgt);
 PARAMETER(PAR.Used_Qty);
 PARAMETER(PAR.Used_Wgt);
 PARAMETER(PAR.Not_Used_Qty);
 PARAMETER(PAR.Not_Used_Wgt);
 PARAMETER(PAR.WIP_Rejected_Qty);
 PARAMETER(PAR.WIP_Rejected_Wgt);
 PARAMETER(PAR.Yld_Balance_Comment);
 PARAMETER(PAR.Yld_Balance_Post_Sts);
 PARAMETER(PAR.Credit_Item_Status);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Job_Time);
 PARAMETER(PAR.User_Id);
 PARAMETER(PAR.Job_Name);
 PARAMETER(PAR.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?USER: Process Data record

 EXECUTE FUNCTION(Chg WIP Recncle Data  IF) TYPE(EXCINTFUN)                      AC1667927;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Partial_Item_Code);
 PARAMETER(DB1.Yld_Inv_Balance_Type);
 PARAMETER(DB1.WIP_Usage_Company_Num);
 PARAMETER(DB1.WIP_Usage_Dept_Code);
 PARAMETER(DB1.WIP_Usage_Prod_Line_Code);
 PARAMETER(DB1.Partial_Produced_Qty);
 PARAMETER(DB1.Partial_Produced_Wgt);
 PARAMETER(DB1.Beginning_Inv_Qty);
 PARAMETER(DB1.Beginning_Inv_Wgt);
 PARAMETER(DB1.Delete_Pending_Qty);
 PARAMETER(DB1.Delete_Pending_Wgt);
 PARAMETER(DB1.Used_Qty);
 PARAMETER(DB1.Used_Wgt);
 PARAMETER(DB1.Not_Used_Qty);
 PARAMETER(DB1.Not_Used_Wgt);
 PARAMETER(DB1.WIP_Rejected_Qty);
 PARAMETER(DB1.WIP_Rejected_Wgt);
 PARAMETER(DB1.Yld_Balance_Comment);
 PARAMETER(DB1.Yld_Balance_Post_Sts);
 PARAMETER(DB1.Credit_Item_Status);
 PARAMETER(DB1.Item_Structure_Type_Code);
 PARAMETER(DB1.Item_Structure_Group_Code);
 PARAMETER(DB1.Item_Structure_Class_Code);
 PARAMETER(PAR.Beginning_Inv_Wgt);
 PARAMETER(PAR.Not_Used_Wgt);
 PARAMETER(PAR.Partial_Produced_Wgt);
 PARAMETER(DB1.Yld_Balance_Comment);
 {
  //?Execute internal function

  // PAR.Transaction Quantity = CON.*ZERO
  PAR.Transaction_Quantity = *ZERO;

  CASE;

  // IF PAR.Beginning Inv Wgt NE PAR.Wgt Begin Inv USR
  IF PAR.Beginning_Inv_Wgt <> PAR.Wgt_Begin_Inv_USR;

  // PAR.Transaction Weight = PAR.Wgt Begin Inv USR - PAR.Beginning Inv Wgt
  PAR.Transaction_Weight = PAR.Wgt_Begin_Inv_USR - PAR.Beginning_Inv_Wgt;

  EXECUTE FUNCTION(Crt Yld Adjustment    IF) TYPE(EXCINTFUN)                      AC1667868;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Partial_Item_Code);
  PARAMETER('BI');
  PARAMETER(PAR.Transaction_Quantity);
  PARAMETER(PAR.Transaction_Weight);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Next Seq Num      RT) TYPE(RTVOBJ) FILE(POCUCPP)           AC1667873;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Production_Line_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Production_Shift);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Partial_Item_Code);
   PARAMETER(PAR.Yld_Transaction_Code);
   PARAMETER(PAR.Yld_Transaction_Seq);
   {
    //?USER: Processing if Data record not found

    // PAR.Yld Transaction Seq = CON.1
    PAR.Yld_Transaction_Seq = 1;

    //?USER: Process Data record

    // PAR.Yld Transaction Seq = DB1.Yld Transaction Seq + CON.1
    PAR.Yld_Transaction_Seq = DB1.Yld_Transaction_Seq + 1;

    QUIT;

   }

   EXECUTE FUNCTION(Crt Yld Adjustment    CR) TYPE(CRTOBJ) FILE(POCUCPP)           AC1664350;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Production_Line_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Production_Shift);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Partial_Item_Code);
   PARAMETER(PAR.Yld_Transaction_Code);
   PARAMETER(PAR.Yld_Transaction_Seq);
   PARAMETER(PAR.Transaction_Quantity);
   PARAMETER(PAR.Transaction_Weight);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  // IF PAR.Not Used Wgt NE PAR.Wgt Not Used USR
  IF PAR.Not_Used_Wgt <> PAR.Wgt_Not_Used_USR;

  // PAR.Transaction Weight = PAR.Wgt Not Used USR - PAR.Not Used Wgt
  PAR.Transaction_Weight = PAR.Wgt_Not_Used_USR - PAR.Not_Used_Wgt;

  EXECUTE FUNCTION(Crt Yld Adjustment    IF) TYPE(EXCINTFUN)                      AC1667868;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Partial_Item_Code);
  PARAMETER('NU');
  PARAMETER(PAR.Transaction_Quantity);
  PARAMETER(PAR.Transaction_Weight);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Next Seq Num      RT) TYPE(RTVOBJ) FILE(POCUCPP)           AC1667873;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Production_Line_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Production_Shift);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Partial_Item_Code);
   PARAMETER(PAR.Yld_Transaction_Code);
   PARAMETER(PAR.Yld_Transaction_Seq);
   {
    //?USER: Processing if Data record not found

    // PAR.Yld Transaction Seq = CON.1
    PAR.Yld_Transaction_Seq = 1;

    //?USER: Process Data record

    // PAR.Yld Transaction Seq = DB1.Yld Transaction Seq + CON.1
    PAR.Yld_Transaction_Seq = DB1.Yld_Transaction_Seq + 1;

    QUIT;

   }

   EXECUTE FUNCTION(Crt Yld Adjustment    CR) TYPE(CRTOBJ) FILE(POCUCPP)           AC1664350;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Production_Line_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Production_Shift);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Partial_Item_Code);
   PARAMETER(PAR.Yld_Transaction_Code);
   PARAMETER(PAR.Yld_Transaction_Seq);
   PARAMETER(PAR.Transaction_Quantity);
   PARAMETER(PAR.Transaction_Weight);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  // IF PAR.Partial Produced Wgt NE PAR.Wgt Produced USR
  IF PAR.Partial_Produced_Wgt <> PAR.Wgt_Produced_USR;

  // PAR.Transaction Weight = PAR.Wgt Produced USR - PAR.Partial Produced Wgt
  PAR.Transaction_Weight = PAR.Wgt_Produced_USR - PAR.Partial_Produced_Wgt;

  EXECUTE FUNCTION(Crt Yld Adjustment    IF) TYPE(EXCINTFUN)                      AC1667868;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Partial_Item_Code);
  PARAMETER('PP');
  PARAMETER(PAR.Transaction_Quantity);
  PARAMETER(PAR.Transaction_Weight);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Next Seq Num      RT) TYPE(RTVOBJ) FILE(POCUCPP)           AC1667873;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Production_Line_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Production_Shift);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Partial_Item_Code);
   PARAMETER(PAR.Yld_Transaction_Code);
   PARAMETER(PAR.Yld_Transaction_Seq);
   {
    //?USER: Processing if Data record not found

    // PAR.Yld Transaction Seq = CON.1
    PAR.Yld_Transaction_Seq = 1;

    //?USER: Process Data record

    // PAR.Yld Transaction Seq = DB1.Yld Transaction Seq + CON.1
    PAR.Yld_Transaction_Seq = DB1.Yld_Transaction_Seq + 1;

    QUIT;

   }

   EXECUTE FUNCTION(Crt Yld Adjustment    CR) TYPE(CRTOBJ) FILE(POCUCPP)           AC1664350;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Production_Line_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Production_Shift);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Partial_Item_Code);
   PARAMETER(PAR.Yld_Transaction_Code);
   PARAMETER(PAR.Yld_Transaction_Seq);
   PARAMETER(PAR.Transaction_Quantity);
   PARAMETER(PAR.Transaction_Weight);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  ENDIF;

  EXECUTE FUNCTION(Chg WIP Recncle Data  CH) TYPE(CHGOBJ) FILE(POCOCPP)           AC1665507;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Partial_Item_Code);
  PARAMETER(PAR.Yld_Inv_Balance_Type);
  PARAMETER(PAR.Wgt_Produced_USR);
  PARAMETER(PAR.Wgt_Begin_Inv_USR);
  PARAMETER(PAR.Wgt_Not_Used_USR);
  PARAMETER(PAR.Text_USR_40);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

}


RETURN;

ENDIF;

