// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PSPSDFR
// ?Date: 14.08.2025 Time: 03:47:09
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// PGM.*Scan limit = CND.9999999
PGM.*Scan_limit = 9999999;

//?USER: Initialize subfile control

//?First time processing
CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

//?** Set flag to view all except internal   08/22/2006 LJB TRF022
// PAR.USR View Option = CND.View New
PAR.USR_View_Option = 'N';

// CTL.Toggle Text 1         USR = CON.Exc
CTL.Toggle_Text_1_USR = 'Exc';

// CTL.Load ID = PAR.Load ID
CTL.Load_ID = PAR.Load_ID;

//?Find out if this user is Traffic
DO;

// LCL.*Return code = CND.*Normal
LCL.*Return_code = *BLANK;

//?SUSANREVIEW1
EXECUTE FUNCTION(Rtv User/Application   IF) TYPE(EXCINTFUN)                     AC1920426;
PARAMETER(JOB.*USER);
PARAMETER('TRF');
PARAMETER(LCL.Return_Code_Usr);
{
 //?Execute internal function

 // PAR.Return Code Usr = CND.*Blank
 PAR.Return_Code_Usr = *BLANK;

 EXECUTE FUNCTION(RTV Program Setup      RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1250561;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(NLL.Allow_Multi_Company);
 PARAMETER(NLL.Default_Printer);
 PARAMETER(NLL.Salesperson_Code);
 PARAMETER(LCL.User_Code_Model);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.User Code Model is equal to blank
 IF LCL.User_Code_Model = *BLANK;

 EXECUTE FUNCTION(RTV Appl Allowed       RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1920437;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Return_Code_Usr);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Return Code Usr = CND.*Record does not exist
  PAR.Return_Code_Usr = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Return Code Usr = CND.*Blank
  PAR.Return_Code_Usr = *BLANK;

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Appl Allowed       RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1920437;
 PARAMETER(LCL.User_Code_Model);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Return_Code_Usr);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Return Code Usr = CND.*Record does not exist
  PAR.Return_Code_Usr = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Return Code Usr = CND.*Blank
  PAR.Return_Code_Usr = *BLANK;

 }

 ENDIF;

}


CASE;

// IF LCL.Return Code Usr is *Blank
IF LCL.Return_Code_Usr = *BLANK;

// WRK.Process Function As Usr = CND.Traffic
WRK.Process_Function_As_Usr = 'TRF';

// CTL.Select Type of List Usr = CON.*---- T R A F F I C ----*
CTL.Select_Type_of_List_Usr = *---- T R A F F I C ----*;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Process Function As Usr = CON.*BLANK
WRK.Process_Function_As_Usr = *BLANK;

// CTL.Select Type of List Usr = CON.*----- S A L E S  -----*
CTL.Select_Type_of_List_Usr = *----- S A L E S  -----*;

ENDIF;

ENDDO;

//?E1714 only display this type
// CTL.Load Change Type = CND.Requested Delivery Date
CTL.Load_Change_Type = 'RQSDLV';

ENDIF;

//?Multi-Company?
CASE;

// IF PAR.Allow Multi-Company is no
IF PAR.Allow_Multi_Company = 'N';

//?Dont default company IF ALLOW MULTI IS YES
CASE;

// IF CTL.Company Number is Equal to zero
IF CTL.Company_Number = *ZERO;

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

ENDIF;

ENDIF;

//?USER: Initialize subfile record from DBF record

//?** Only display records that match the control record company
CASE;

// IF DB1.Company Number NE CTL.Company Number
IF DB1.Company_Number <> CTL.Company_Number;

// AND CTL.Company Number is not equal to zero
AND CTL.Company_Number <> *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

QUIT;

ENDIF;

//?Load ID match?
CASE;

// IF DB1.Load ID NE CTL.Load ID
IF DB1.Load_ID <> CTL.Load_ID;

// AND CTL.Load ID is NE Blank
AND CTL.Load_ID <> *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

QUIT;

ENDIF;

//?** Exclude Internal if View Option is not *All  08/22/2006 LJB TRF022
CASE;

// IF PAR.USR View Option is View New
IF PAR.USR_View_Option = 'N';

CASE;

// IF DB1.Department Control Code is Internal Control
IF DB1.Department_Control_Code = 'INT';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?63/8/2009 slm Support Call
//?Come back to this after for list
//?Get this back running so people can see
//?will get with Rose and see what we can do about the list
//?ADD for during testing we see all
CASE;

// IF JOB.*USER is All IS DEV/PRD & Prktest
IF JOB.*USER = 'ALICEB'/'ISALICEB'/'PRKTEST'/'ISPURVAP'/'ISPPATE'/'ISROSEM'/'ISRCENT'              +
/'ISSMASO'/'ISSUSANM'/'ISLBUSE'/'ISLARAB'/'ISWGAUS'/'ISELOUC';

// IF *OTHERWISE
IF *OTHERWISE;

//?Select on Traffic
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?Select Traffic do not show what is on the Sales List
CASE;

// IF WRK.Process Function As Usr is Traffic
IF WRK.Process_Function_As_Usr = 'TRF';

//?Go for only types that are NOT in the Sales list
CASE;

// IF DB1.Load Change Type is Sales Changes
IF DB1.Load_Change_Type = 'AGECDE'/'DLCORD'/'RLCORD'/'RLSORD'/'HLDORD'/'RLSLIN';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

// RCD.Condition Desc. 1  USR = Condition name of DB1.Load Change Type
RCD.Condition_Desc_1_USR = RTVCND(DB1.Load_Change_Type);

//?3.06.02  If Date Change Type, reverse the values
CASE;

// IF DB1.Load Change Type is Date changes
IF DB1.Load_Change_Type = 'RQSDLV'/'RQSSHP'/'SCHSHP';

//?save last 4 pos incase the time is there
// WRK.Time  4A             USR = SUBSTRING(DB1.Change Log Prior Value,CON.9,CON.4)
WRK.Time_4A_USR = SUBSTRING(DB1.Change_Log_Prior_Value:9:4);

// WRK.USR Work Field 3A = SUBSTRING(DB1.Change Log Prior Value,CON.2,CON.2)
WRK.USR_Work_Field_3A = SUBSTRING(DB1.Change_Log_Prior_Value:2:2);

// WRK.Month (Char) USR = SUBSTRING(DB1.Change Log Prior Value,CON.4,CON.2)
WRK.Month_Char_USR = SUBSTRING(DB1.Change_Log_Prior_Value:4:2);

// WRK.Day   (Char) USR = SUBSTRING(DB1.Change Log Prior Value,CON.6,CON.2)
WRK.Day_Char_USR = SUBSTRING(DB1.Change_Log_Prior_Value:6:2);

// WRK.Text USR 4 = CONCAT(WRK.Month (Char) USR,WRK.Day   (Char) USR,CON.*ZERO)
WRK.Text_USR_4 = WRK.Month_Char_USR + WRK.Day_Char_USR (*ZERO);

// RCD.Change Log Prior Value = CONCAT(WRK.Text USR 4,WRK.USR Work Field 3A,CON.*ZERO)
RCD.Change_Log_Prior_Value = WRK.Text_USR_4 + WRK.USR_Work_Field_3A (*ZERO);

//?move saved last 4 pos back incase the time is there
// Execute function *Move-Right.
EXECUTE FUNCTION(*Move-Right) TYPE(EXCUSRSRC) ('PDUIUFR');
PARAMETER(RCD.Change_Log_Prior_Value);
PARAMETER(WRK.Time_4A_USR);
{
 C                     MOVE #IPANA    #OO9NA
}


//?save last 4 pos incase the time is there
// WRK.Time  4A             USR = SUBSTRING(DB1.Change Log New Value,CON.9,CON.4)
WRK.Time_4A_USR = SUBSTRING(DB1.Change_Log_New_Value:9:4);

// WRK.USR Work Field 3A = SUBSTRING(DB1.Change Log New Value,CON.2,CON.2)
WRK.USR_Work_Field_3A = SUBSTRING(DB1.Change_Log_New_Value:2:2);

// WRK.Month (Char) USR = SUBSTRING(DB1.Change Log New Value,CON.4,CON.2)
WRK.Month_Char_USR = SUBSTRING(DB1.Change_Log_New_Value:4:2);

// WRK.Day   (Char) USR = SUBSTRING(DB1.Change Log New Value,CON.6,CON.2)
WRK.Day_Char_USR = SUBSTRING(DB1.Change_Log_New_Value:6:2);

// WRK.Text USR 4 = CONCAT(WRK.Month (Char) USR,WRK.Day   (Char) USR,CON.*ZERO)
WRK.Text_USR_4 = WRK.Month_Char_USR + WRK.Day_Char_USR (*ZERO);

// RCD.Change Log New Value = CONCAT(WRK.Text USR 4,WRK.USR Work Field 3A,CON.*ZERO)
RCD.Change_Log_New_Value = WRK.Text_USR_4 + WRK.USR_Work_Field_3A (*ZERO);

//?move saved last 4 pos back incase the time is there
// Execute function *Move-Right.
EXECUTE FUNCTION(*Move-Right) TYPE(EXCUSRSRC) ('PDUIUFR');
PARAMETER(RCD.Change_Log_New_Value);
PARAMETER(WRK.Time_4A_USR);
{
 C                     MOVE #IPANA    #OO9NA
}


ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?** Toggle between all and all but internal    8/22/2006 TRF021
CASE;

// IF CTL.*CMD key is *View All/New
IF CTL.*CMD_key = '19';

//?** If View New then display all except Internal change types
CASE;

// IF PAR.USR View Option is View New
IF PAR.USR_View_Option = 'N';

// PAR.USR View Option = CND.View All
PAR.USR_View_Option = 'A';

// CTL.Toggle Text 1         USR = CON.Inc
CTL.Toggle_Text_1_USR = 'Inc';

//?** If View New then display all except Internal change types
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR View Option = CND.View New
PAR.USR_View_Option = 'N';

// CTL.Toggle Text 1         USR = CON.Exc
CTL.Toggle_Text_1_USR = 'Exc';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Display Load Order Change-Ord
CASE;

// IF CTL.*CMD key is CF20
IF CTL.*CMD_key = '20';

CASE;

// IF CTL.Order Number is Greater then zero
IF CTL.Order_Number > *ZERO;

// LCL.Order Number = CTL.Order Number
LCL.Order_Number = CTL.Order_Number;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Order Number = CON.*ZERO
LCL.Order_Number = *ZERO;

ENDIF;

// Call program DSP Chg Log Entries-OrdDF.
CALL PROGRAM(DSP Chg Log Entries-OrdDF) ('PMEIDFR');
PARAMETER(LCL.Order_Number);

ENDIF;

//?Display Export Orders
CASE;

// IF CTL.*CMD key is CF22
IF CTL.*CMD_key = '22';

// LCL.Company Number = CON.*ZERO
LCL.Company_Number = *ZERO;

// LCL.Order Number = CON.*ZERO
LCL.Order_Number = *ZERO;

CASE;

// IF CTL.Order Number is Greater then zero
IF CTL.Order_Number > *ZERO;

// LCL.Order Number = CTL.Order Number
LCL.Order_Number = CTL.Order_Number;

ENDIF;

CASE;

// IF CTL.Company Number is greater than zero
IF CTL.Company_Number > *ZERO;

// LCL.Company Number = CTL.Company Number
LCL.Company_Number = CTL.Company_Number;

// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

// Call program Dsp Export ChangesLog DF.
CALL PROGRAM(Dsp Export ChangesLog DF) ('PNVMDFR');
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Order_Number);

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?Subfile options
CASE;

// IF RCD.*SFLSEL is Option 5
IF RCD.*SFLSEL = '5'/'5';

CASE;

// IF RCD.Order Number is Not equal to zeros
IF RCD.Order_Number <> *ZERO;

// Call program Dsp Order Header       PV.
CALL PROGRAM(Dsp Order Header       PV) ('OMB5PVR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);

ENDIF;

ENDIF;

