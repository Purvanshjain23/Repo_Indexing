// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PWEDE1R
// ?Date: 14.08.2025 Time: 02:56:10
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?E10812 JJH 01/22/18 - Market Hog Order to Cash
//?- Update the Movement Number in the Buy Order Load, If
//?  - Producer's HSP Autamation Flag = Y, and
//?  - External Hog
//?E11288 JJH 07/24/17 - Tattoo Header Modifications
//?- Copied from Edt Tattoo Hdr/Defect  ER (PKKIE1R)
//?- PKKIE1R is to be reinstated to its original code.
//?- This program is to be specifically used by Company 961
//?- Company 961 is only allowed to Edit the Producer Site
//?- Use Company Value TATTOOEDT to determine if the Company allows
//?  input fields to be Edited.
//?- If TATTOOEDT = N, the Input fields are made Output Only, except
//?  for Producer Site
//?E10370 JJH 06/27/17 - Producer Site Mileage for Source Type = TO
//?- Do not perform logic for TH Hog Class Type = Not Resale, if the
//?  Source Type = TO.
//?- This will prevent of error with a Missing State because Producer
//?  Site Mileage is not required with Source Type = TO.
//?E10370 JJH 06/22/17 - Select Record logic for Producer Site
//?- If SR Source Code = TO - Triumph Member (Owner), call SELRCD
//?    PLGKSRR - Without Company Code, otherwise
//?- Call SELRCD PLFQSRR (with Company Code)
//?05/16/17 Add company to the Producer Std Ded/add and also
//?to the Producer location Std Ded/add and also
//?E3814 JJH 10/07/15 - Display PS Premises ID when the PS Site ID
//?  exists.
ENDDO;

EXECUTE FUNCTION(E00150 Prod/Subsidiary) TYPE(EXCINTFUN)                        AB1291893;
{
 //?Execute internal function

 //?09/19/08 SLM E00150 Add the Producer Subsidiary to the
 //?Tattoo Header Ext  -- Only on non Resale hogs
 //?Allow the user to inter the Producer Subsidiary for this
 //?tattoo if the Producer Subsidiary has records for any subsidiary
 //?then the Producer Subsidiary code will be required for this tattoo
}


//?H16853 - 12/17/20 Commented the below modification log as number of
//?               subroutines exceeeds in the generated source.
// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


// WRK.First Time Flag Usr = CND.No
WRK.First_Time_Flag_Usr = 'N';

// LCL.Record Added Usr = CND.No
LCL.Record_Added_Usr = 'N';

// LCL.Record Change Usr = CND.No
LCL.Record_Change_Usr = 'N';

//?E2423 Mtech Live or Not Live *** Interfaces to HPS ***
//?Get the MTech Live Yes or No
DO;

//?Mtech Live Yes or no
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER('MTECHLIVE');
PARAMETER(WRK.System_Value_Alpha_USR);

// LCL.MTech Live Yes or No = WRK.System Value Alpha    USR
LCL.MTech_Live_Yes_or_No = WRK.System_Value_Alpha_USR;

ENDDO;

//?Producer work for remainder of program
DO;

CASE;

// IF PAR.TH Hog Class Type is Market
IF PAR.TH_Hog_Class_Type = 'M';

EXECUTE FUNCTION(Rtv ProdSubsidiaryPrc RT) TYPE(RTVOBJ) FILE(PLA8REP)           AB1291791;
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(WRK.Producer_Subsidiary_SUSR);
{
 //?USER: Initialize routine

 //?RMC R9771  3/24/17 check for active only
 // PAR.Producer Subsidiary SUSR = CND.No Producer Subsidiary
 PAR.Producer_Subsidiary_SUSR = 'N';

 //?USER: Processing if Data record not found

 // PAR.Producer Subsidiary SUSR = CND.No Producer Subsidiary
 PAR.Producer_Subsidiary_SUSR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.RS Record Status is Active
 IF DB1.RS_Record_Status = 'A';

 // PAR.Producer Subsidiary SUSR = CND.Allow Producer Subsidiary
 PAR.Producer_Subsidiary_SUSR = 'Y';

 QUIT;

 ENDIF;

}


// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Producer Subsidiary SUSR = CND.No Producer Subsidiary
WRK.Producer_Subsidiary_SUSR = 'N';

ENDIF;

//?E11288 JJH 07/25/17 - Set Display Output Only 5 usr
//?Set Display Output Only 5 USR
CASE;

// IF WRK.Producer Subsidiary SUSR is No Producer Subsidiary
IF WRK.Producer_Subsidiary_SUSR = 'N';

// OR LCL.Allow Tattoo to be Edited is No
OR LCL.Allow_Tattoo_to_be_Edited = 'N';

//?Use with Producer Subsidiary Code
// LCL.Display Output Only 5 USR = CND.Yes
LCL.Display_Output_Only_5_USR = 'Y';

//?Set Display Output Only 5 USR
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Display Output Only 5 USR = CND.No
LCL.Display_Output_Only_5_USR = 'N';

ENDIF;

EXECUTE FUNCTION(Rtv Prdcr Vendor#,Src RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1143363;
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(WRK.PD_VND_Address_Number);
PARAMETER(PAR.SR_Source_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 CASE;

 // IF DB1.PD VND Address Number is Zero
 IF DB1.PD_VND_Address_Number = *ZERO;

 EXECUTE FUNCTION(Rtv Producer EXT2     RT) TYPE(RTVOBJ) FILE(PLB4REP)           AB1322079;
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(WRK.M3_Supplier_ID);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.Text 7 USR = SUBSTRING(WRK.M3 Supplier ID,CON.4,CON.7)
 LCL.Text_7_USR = SUBSTRING(WRK.M3_Supplier_ID:4:7);

 // LCL.Amount USR = CVTVAR(LCL.Text 7 USR)
 LCL.Amount_USR = CVTVAR(LCL.Text_7_USR);

 // PAR.PD VND Address Number = LCL.Amount USR
 PAR.PD_VND_Address_Number = LCL.Amount_USR;

 ENDIF;

 QUIT;

}


EXECUTE FUNCTION(Rtv Source Type       RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1141829;
PARAMETER(PAR.SR_Source_Code);
PARAMETER(PAR.SR_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.SR Type Desc = Condition name of PAR.SR Type
PAR.SR_Type_Desc = RTVCND(PAR.SR_Type);

EXECUTE FUNCTION(Rtv PL Vnd Nbr, state RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1207995;
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.PL_Location_Code);
PARAMETER(PAR.PL_Name);
PARAMETER(WRK.Pl_VND_Address_Number);
PARAMETER(PAR.PL_State_Code);
PARAMETER(PAR.PL_Site_ID_Required);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.TH Hog Class Type is Resale
IF PAR.TH_Hog_Class_Type = 'R';

// WRK.Allow User to Enter Usr = CND.Allow User to Enter
WRK.Allow_User_to_Enter_Usr = 'A';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.PL Site ID Required is Yes
IF PAR.PL_Site_ID_Required = 'Y';

//?used on the state code
// WRK.Allow User to Enter Usr = CND.Do not allow entery
WRK.Allow_User_to_Enter_Usr = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Allow User to Enter Usr = CND.Allow User to Enter
WRK.Allow_User_to_Enter_Usr = 'A';

CASE;

// IF PAR.SR Type is Internal
IF PAR.SR_Type = 'I';

// WRK.Allow User to Enter Usr = CND.Do not allow entery
WRK.Allow_User_to_Enter_Usr = *BLANK;

ENDIF;

ENDIF;

ENDIF;

ENDDO;

//?E11288 JJH 07/25/17 - Get Company Value TATTOOEDT
//?H16853 ISE 11/02/2020 CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER('HPETATEDT');
PARAMETER(LCL.Allow_Tattoo_to_be_Edited);

CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

//?Get Hps movement and hps farm site - Add mode only
DO;

CASE;

// IF PAR.SR Type is Internal
IF PAR.SR_Type = 'I';

// AND LCL.MTech Live Yes or No is Yes MTech is Live
AND LCL.MTech_Live_Yes_or_No = 'Y';

EXECUTE FUNCTION(Rtv Mvmnt,Farm f/BOL  RT) TYPE(RTVOBJ) FILE(PLAECPP)           AB1245116;
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TH_HPS_Farm_Site);
PARAMETER(WRK.TH_HPS_Movement_Ref_#);
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?If TH HPS Movement Ref # is zeros, retrieve value  DLV TRACK
CASE;

// IF WRK.TH HPS Movement Ref # EQ WRK.Zero USR
IF WRK.TH_HPS_Movement_Ref_# = WRK.Zero_USR;

//?movement and farm site
EXECUTE FUNCTION(Rtv Movement NumbMtechRT) TYPE(RTVOBJ) FILE(PLAFCPP)           AB1312453;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_HPS_Farm_Site);
PARAMETER(WRK.TH_HPS_Movement_Ref_#);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?If TH HPS Movement Ref # is zeros, retrieve value  BOLW
CASE;

// IF WRK.TH HPS Movement Ref # EQ WRK.Zero USR
IF WRK.TH_HPS_Movement_Ref_# = WRK.Zero_USR;

//?movement and farm site
EXECUTE FUNCTION(Rtv Movement Number   RT) TYPE(RTVOBJ) FILE(PKEJCPP)           AB1213938;
PARAMETER(PAR.TH_HPS_Movement_Ref_#);
PARAMETER(WRK.TH_HPS_Movement_Ref_#);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// PAR.TH HPS Farm Site = CON.*ZERO
PAR.TH_HPS_Farm_Site = *ZERO;

ENDIF;

//?If TH HPS Movement Ref # is still zeros - load default value
CASE;

// IF WRK.TH HPS Movement Ref # EQ WRK.Zero USR
IF WRK.TH_HPS_Movement_Ref_# = WRK.Zero_USR;

//?movement and farm site
// WRK.TH HPS Movement Ref # = PAR.TH HPS Movement Ref #
WRK.TH_HPS_Movement_Ref_# = PAR.TH_HPS_Movement_Ref_#;

ENDIF;

ENDIF;

ENDDO;

ENDIF;

//?Rules: Screen with Mtech Live and Internal Producer
CASE;

// IF LCL.MTech Live Yes or No is Yes MTech is Live
IF LCL.MTech_Live_Yes_or_No = 'Y';

// WRK.Display Output Only 4 USR = CND.No
WRK.Display_Output_Only_4_USR = 'N';

CASE;

// IF PAR.SR Type is Internal
IF PAR.SR_Type = 'I';

// WRK.Display Output Only 4 USR = CND.Yes
WRK.Display_Output_Only_4_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Display Output Only 4 USR = CND.No
WRK.Display_Output_Only_4_USR = 'N';

ENDIF;

//?The following field will now be opened to allow entry on internal
//?hogs, movement, farm site, and farm site will go get the
//?the state code
//?Rules: Screen with Mtech Live and Internal Producer
// IF LCL.MTech Live Yes or No is No MTech not Live
IF LCL.MTech_Live_Yes_or_No = 'N';

//?Internal farm site
// WRK.Display Output Only 4 USR = CND.No
WRK.Display_Output_Only_4_USR = 'N';

ENDIF;

//?E11288 JJH 07/25/17 - Set Display Output Only
CASE;

// IF LCL.Allow Tattoo to be Edited is No
IF LCL.Allow_Tattoo_to_be_Edited = 'N';

// WRK.Display Output Only 3 USR = CND.No
WRK.Display_Output_Only_3_USR = 'N';

// WRK.Allow User to Enter Usr = CND.Do not allow entery
WRK.Allow_User_to_Enter_Usr = *BLANK;

// WRK.Display Output Only 4 USR = CND.No
WRK.Display_Output_Only_4_USR = 'N';

// WRK.Display Output Only 2 USR = CND.Yes
WRK.Display_Output_Only_2_USR = 'Y';

ENDIF;

//?USER: Initialize detail screen (new record)

// DTL.Prior Movement # = CON.*ZERO
DTL.Prior_Movement_# = *ZERO;

// DTL.PL Site ID Required = PAR.PL Site ID Required
DTL.PL_Site_ID_Required = PAR.PL_Site_ID_Required;

// DTL.TH Hog Class Type = PAR.TH Hog Class Type
DTL.TH_Hog_Class_Type = PAR.TH_Hog_Class_Type;

// DTL.PS Site ID = CON.*BLANK
DTL.PS_Site_ID = *BLANK;

// DTL.Producer Subsidary Code = CON.*BLANK
DTL.Producer_Subsidiary_Code = *BLANK;

//?** Retrieve Site ID & Producer Subsidiary from Tattoo Header EXT
//?8/25/2010 Susan changes S000923
//?Market or subject should go get the site id
//?Not Resale get TtoHdrExt - Resale Hog Blank out the site id, & Prod Subs
CASE;

// IF DTL.TH Hog Class Type is Not Resale
IF DTL.TH_Hog_Class_Type = 'M'/'S';

//?ON A ADD THE TATTOO HEADER EXT WILL NOT BE THERE
EXECUTE FUNCTION(Rtv Site ID/Prod Subs RT) TYPE(RTVOBJ) FILE(PKDNCPP)           AB1291789;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(NLL.PD_Producer_Code);
PARAMETER(DTL.PS_Site_ID);
PARAMETER(DTL.Producer_Subsidiary_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Not Resale get TtoHdrExt - Resale Hog Blank out the site id, & Prod Subs
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.PL Site ID Required = CND.No
DTL.PL_Site_ID_Required = 'N';

// DTL.PS Site ID = CON.*BLANK
DTL.PS_Site_ID = *BLANK;

// DTL.Producer Subsidiary Code = CON.*BLANK
DTL.Producer_Subsidiary_Code = *BLANK;

ENDIF;

// LCL.TattooPend Set to Pending = CND.No
LCL.TattooPend_Set_to_Pending = 'N';

EXECUTE FUNCTION(Rtv Sch Shift/Shp Hd  RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1195798;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(LCL.BOL_Pln_Head_Delv);
PARAMETER(DTL.TH_Schedule_Kill_Shift);
PARAMETER(DTL.BOL_Shipped_Head);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?9/22/2008 slm
//?do to adding fields to screen set cursor on new rules
//?Set Cursor
CASE;

// IF PAR.TH Hog Class Type is Market
IF PAR.TH_Hog_Class_Type = 'M';

//?set cursor  --- rules on when to position to Producer subsidary
CASE;

// IF DTL.BOL Shipped Head is *Zeros
IF DTL.BOL_Shipped_Head = *ZERO;

SET CURSOR;

//?set cursor  --- rules on when to position to Producer subsidary
// IF DTL.BOL Load Shipped Head is Not Zero
IF DTL.BOL_Shipped_Head <> *ZERO;

// AND WRK.Producer Subsidiary SUSR is Allow Producer Subsidiary
AND WRK.Producer_Subsidiary_SUSR = 'Y';

// AND LCL.Allow Tattoo to be Edited is Yes
AND LCL.Allow_Tattoo_to_be_Edited = 'Y';

SET CURSOR;

//?set cursor  --- rules on when to position to Producer subsidary
// IF DTL.BOL Load Shipped Head is Not Zero
IF DTL.BOL_Shipped_Head <> *ZERO;

// AND DTL.PL Site ID Required is Yes
AND DTL.PL_Site_ID_Required = 'Y';

SET CURSOR;

//?set cursor  --- rules on when to position to Producer subsidary
// IF DTL.BOL Load Shipped Head is Not Zero
IF DTL.BOL_Shipped_Head <> *ZERO;

SET CURSOR;

//?set cursor  --- rules on when to position to Producer subsidary
// IF *OTHERWISE
IF *OTHERWISE;

SET CURSOR;

ENDIF;

//?Set Cursor
// IF *OTHERWISE
IF *OTHERWISE;

//?set cursor  --- rules on when to position to Class Code
CASE;

// IF DTL.BOL Load Shipped Head is Not Zero
IF DTL.BOL_Shipped_Head <> *ZERO;

SET CURSOR;

//?set cursor  --- rules on when to position to Class Code
// IF *OTHERWISE
IF *OTHERWISE;

SET CURSOR;

ENDIF;

ENDIF;

// DTL.TH Source Code = PAR.SR Source Code
DTL.TH_Source_Code = PAR.SR_Source_Code;

// DTL.TH Source Type = PAR.SR Type
DTL.TH_Source_Type = PAR.SR_Type;

// DTL.SR Type Desc = Condition name of PAR.SR Type
DTL.SR_Type_Desc = RTVCND(PAR.SR_Type);

//?External get state
CASE;

// IF DTL.TH Source Type is External
IF DTL.TH_Source_Type = 'E';

// DTL.TH State = PAR.PL State Code
DTL.TH_State = PAR.PL_State_Code;

//?Get the State Code if Producer site id is still required
CASE;

// IF DTL.PL Site ID Required is Yes
IF DTL.PL_Site_ID_Required = 'Y';

//?get th state
//?E3814 JJH 10/07/15 - Display PS Premises ID from Producer Site
//?test susan 1
EXECUTE FUNCTION(Rtv Site State/PremiseRT) TYPE(RTVOBJ) FILE(PLATREP)           AB1327101;
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(DTL.PS_Site_ID);
PARAMETER(DTL.TH_State);
PARAMETER(DTL.PS_Premises_ID);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.RS Record Status is Active
 IF DB1.RS_Record_Status = 'A';

 MOVE *ALL (To: PAR From: DB1);

 // IF *OTHERWISE
 IF *OTHERWISE;

 MOVE *ALL (To: PAR From: CON);

 ENDIF;

}


ENDIF;

ENDIF;

//?External - movement number
CASE;

// IF DTL.TH Source Type is External
IF DTL.TH_Source_Type = 'E';

// DTL.TH HPS Movement Ref # = PAR.TH HPS Movement Ref #
DTL.TH_HPS_Movement_Ref_# = PAR.TH_HPS_Movement_Ref_#;

ENDIF;

//?Not live Int Get farm site, state - otherwise par movement
CASE;

// IF LCL.MTech Live Yes or No is No MTech not Live
IF LCL.MTech_Live_Yes_or_No = 'N';

// AND DTL.TH Source Type is Internal
AND DTL.TH_Source_Type = 'I';

//?Internal and not live
// DTL.TH HPS Movement Ref # = PAR.TH HPS Movement Ref #
DTL.TH_HPS_Movement_Ref_# = PAR.TH_HPS_Movement_Ref_#;

CASE;

// IF DTL.TH HPS Movement Ref # is Not entered
IF DTL.TH_HPS_Movement_Ref_# = *ZERO;

EXECUTE FUNCTION(Rtv Movement Number   RT) TYPE(RTVOBJ) FILE(PKEJCPP)           AB1213938;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.TH_HPS_Movement_Ref_#);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

// DTL.GN Genetic Code = CND.PIC
DTL.GN_Genetic_Code = 'PIC';

// Call program Z1v HPS Farm Info     UP.
CALL PROGRAM(Z1v HPS Farm Info     UP) ('HP249');
PARAMETER(PGM.*Return_code);
PARAMETER(DTL.TH_HPS_Movement_Ref_#);
PARAMETER(WRK.Farm_site_Name_f_HPS_USR);
PARAMETER(DTL.TH_HPS_Farm_Site);
PARAMETER(WRK.HPS_FS_Comp_Relation_USR);
PARAMETER(DTL.TH_State);

// LCL.State = DTL.TH State
LCL.State = DTL.TH_State;

ENDIF;

//?live Int Get farm site, state - otherwise par movement
CASE;

// IF LCL.MTech Live Yes or No is Yes MTech is Live
IF LCL.MTech_Live_Yes_or_No = 'Y';

// AND DTL.TH Source Type is Internal
AND DTL.TH_Source_Type = 'I';

//?Internal and live
// DTL.TH HPS Movement Ref # = PAR.TH HPS Movement Ref #
DTL.TH_HPS_Movement_Ref_# = PAR.TH_HPS_Movement_Ref_#;

CASE;

// IF DTL.TH HPS Movement Ref # is Not entered
IF DTL.TH_HPS_Movement_Ref_# = *ZERO;

EXECUTE FUNCTION(Rtv Movement Number   RT) TYPE(RTVOBJ) FILE(PKEJCPP)           AB1213938;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.TH_HPS_Movement_Ref_#);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

// DTL.TH HPS Farm Site = PAR.TH HPS Farm Site
DTL.TH_HPS_Farm_Site = PAR.TH_HPS_Farm_Site;

// Call program Rtv HPS Farm Inf-Mtech UP.
CALL PROGRAM(Rtv HPS Farm Inf-Mtech UP) ('HP293');
PARAMETER(PGM.*Return_code);
PARAMETER(NLL.Farm_site_Name_f_HPS_USR);
PARAMETER(DTL.TH_HPS_Farm_Site);
PARAMETER(WRK.HPS_FS_Comp_Relation_USR);
PARAMETER(LCL.State);
PARAMETER(NLL.HPS_Farm_County);
PARAMETER(NLL.HPS_Cell_Manager_Code_USR);
PARAMETER(NLL.HPS_Cell_Manager_Nm_USR);
PARAMETER(NLL.MTech_Farm_Site_Ref);
PARAMETER(NLL.MTech_Cell_Manager_Ref);

// DTL.TH State = LCL.State
DTL.TH_State = LCL.State;

ENDIF;

// DTL.TH Group Reference = PAR.TH Group Reference
DTL.TH_Group_Reference = PAR.TH_Group_Reference;

// DTL.TH Sex = PAR.TH Sex
DTL.TH_Sex = PAR.TH_Sex;

// DTL.GN Genetic Code = PAR.GN Genetic Code
DTL.GN_Genetic_Code = PAR.GN_Genetic_Code;

// DTL.Name USR = PAR.Name USR
DTL.Name_USR = PAR.Name_USR;

// DTL.TH Purchase Date = DTL.TH Kill Date
DTL.TH_Purchase_Date = DTL.TH_Kill_Date;

// DTL.PD Name = PAR.PD Name
DTL.PD_Name = PAR.PD_Name;

// DTL.Description 30 USR = Condition name of DTL.TH Hog Class Type
DTL.Description_30_USR = RTVCND(DTL.TH_Hog_Class_Type);

// LCL.Return Code USR = WRK.Blank USR
LCL.Return_Code_USR = WRK.Blank_USR;

CASE;

// IF DTL.TH Source Type is Internal
IF DTL.TH_Source_Type = 'I';

CASE;

// IF DTL.TH HPS Movement Ref # is Entered
IF DTL.TH_HPS_Movement_Ref_# <> *ZERO;

// Call program Rtv State Description UP.
CALL PROGRAM(Rtv State Description UP) ('STATERET');
PARAMETER(LCL.Return_Code_USR);
PARAMETER(DTL.TH_State);
PARAMETER(DTL.State_Desc_15_USR);

//?Invalid state code send message
CASE;

// IF LCL.Return Code USR is *Normal
IF LCL.Return_Code_USR = *BLANK;

//?Invalid state code send message
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'State Code is Invalid'
ERROR(PRK0308);
MSGPARM(DTL.TH_State);

ENDIF;

ENDIF;

// IF DTL.TH Source Type is External
IF DTL.TH_Source_Type = 'E';

// Call program Rtv State Description UP.
CALL PROGRAM(Rtv State Description UP) ('STATERET');
PARAMETER(LCL.Return_Code_USR);
PARAMETER(DTL.TH_State);
PARAMETER(DTL.State_Desc_15_USR);

//?Invalid state code send message
CASE;

// IF LCL.Return Code USR is *Normal
IF LCL.Return_Code_USR = *BLANK;

//?Invalid state code send message
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'State Code is Invalid'
ERROR(PRK0308);
MSGPARM(DTL.TH_State);

ENDIF;

ENDIF;

// WRK.Display Output Only Usr = CND.No
WRK.Display_Output_Only_Usr = 'N';

// WRK.Display Output Only 2 USR = CND.No
WRK.Display_Output_Only_2_USR = 'N';

//?get defects/hd
DO;

// WRK.Display Output Only Usr = CND.Yes
WRK.Display_Output_Only_Usr = 'Y';

// WRK.Display Output Only 2 USR = CND.Yes
WRK.Display_Output_Only_2_USR = 'Y';

// DTL.Defect User  1 = CON.*BLANK
DTL.Defect_User_1 = *BLANK;

// DTL.Defect User  2 = CON.*BLANK
DTL.Defect_User_2 = *BLANK;

// DTL.Defect User  3 = CON.*BLANK
DTL.Defect_User_3 = *BLANK;

// DTL.Defect User  4 = CON.*BLANK
DTL.Defect_User_4 = *BLANK;

// DTL.Defect User  5 = CON.*BLANK
DTL.Defect_User_5 = *BLANK;

// DTL.Defect User  6 = CON.*BLANK
DTL.Defect_User_6 = *BLANK;

// DTL.Defect User  7 = CON.*BLANK
DTL.Defect_User_7 = *BLANK;

// DTL.Defect User  8 = CON.*BLANK
DTL.Defect_User_8 = *BLANK;

// DTL.Defect User  9 = CON.*BLANK
DTL.Defect_User_9 = *BLANK;

// DTL.Defect User 10 = CON.*BLANK
DTL.Defect_User_10 = *BLANK;

// DTL.Defect HD user 1 = CON.*ZERO
DTL.Defect_HD_user_1 = *ZERO;

// DTL.Defect HD user 2 = CON.*ZERO
DTL.Defect_HD_user_2 = *ZERO;

// DTL.Defect HD user 3 = CON.*ZERO
DTL.Defect_HD_user_3 = *ZERO;

// DTL.Defect HD user 4 = CON.*ZERO
DTL.Defect_HD_user_4 = *ZERO;

// DTL.Defect HD user 5 = CON.*ZERO
DTL.Defect_HD_user_5 = *ZERO;

// DTL.Defect HD user 6 = CON.*ZERO
DTL.Defect_HD_user_6 = *ZERO;

// DTL.Defect HD user 7 = CON.*ZERO
DTL.Defect_HD_user_7 = *ZERO;

// DTL.Defect HD user 8 = CON.*ZERO
DTL.Defect_HD_user_8 = *ZERO;

// DTL.Defect HD user 9 = CON.*ZERO
DTL.Defect_HD_user_9 = *ZERO;

// DTL.Defect HD user 10 = CON.*ZERO
DTL.Defect_HD_user_10 = *ZERO;

EXECUTE FUNCTION(Rtv Tattoo Def-10&Cls RT) TYPE(RTVOBJ) FILE(PKDZREP)           AB1287114;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(DTL.Defect_User_1);
PARAMETER(DTL.Defect_User_2);
PARAMETER(DTL.Defect_User_3);
PARAMETER(DTL.Defect_User_4);
PARAMETER(DTL.Defect_User_5);
PARAMETER(DTL.Defect_User_6);
PARAMETER(DTL.Defect_User_7);
PARAMETER(DTL.Defect_User_8);
PARAMETER(DTL.Defect_User_9);
PARAMETER(DTL.Defect_User_10);
PARAMETER(DTL.Defect_HD_user_1);
PARAMETER(DTL.Defect_HD_user_2);
PARAMETER(DTL.Defect_HD_user_3);
PARAMETER(DTL.Defect_HD_user_4);
PARAMETER(DTL.Defect_HD_user_5);
PARAMETER(DTL.Defect_HD_user_6);
PARAMETER(DTL.Defect_HD_user_7);
PARAMETER(DTL.Defect_HD_user_8);
PARAMETER(DTL.Defect_HD_user_9);
PARAMETER(DTL.Defect_HD_user_10);
PARAMETER(DTL.Class_Df_1_Usr);
PARAMETER(DTL.Class_Df_2_Usr);
PARAMETER(DTL.Class_Df_3_Usr);
PARAMETER(DTL.Class_Df_4_Usr);
PARAMETER(DTL.Class_Df_5_Usr);
PARAMETER(DTL.Class_Df_6_Usr);
PARAMETER(DTL.Class_Df_7_Usr);
PARAMETER(DTL.Class_Df_8_Usr);
PARAMETER(DTL.Class_Df_9_Usr);
PARAMETER(DTL.Class_Df_10_Usr);
{
 //?USER: Initialize routine

 // WRK.Defect Count Usr = CND.One
 WRK.Defect_Count_Usr = 1;

 //?USER: Process Data record

 CASE;

 // IF WRK.Defect Count Usr is One
 IF WRK.Defect_Count_Usr = 1;

 // PAR.Defect User  1 = DB1.DF Defect Code
 PAR.Defect_User_1 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 1 = DB1.TDF Head Defect
 PAR.Defect_HD_user_1 = DB1.TDF_Head_Defect;

 // PAR.Defect Cls User 1 = DB1.TDF Classification Defs
 PAR.Defect_Cls_User_1 = DB1.TDF_Classification_Defs;

 // WRK.Defect Count Usr = CND.Two
 WRK.Defect_Count_Usr = 2;

 // IF WRK.Defect Count Usr is Two
 IF WRK.Defect_Count_Usr = 2;

 // PAR.Defect User  2 = DB1.DF Defect Code
 PAR.Defect_User_2 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 2 = DB1.TDF Head Defect
 PAR.Defect_HD_user_2 = DB1.TDF_Head_Defect;

 // PAR.Defect Cls User 2 = DB1.TDF Classification Defs
 PAR.Defect_Cls_User_2 = DB1.TDF_Classification_Defs;

 // WRK.Defect Count Usr = CND.Three
 WRK.Defect_Count_Usr = 3;

 // IF WRK.Defect Count Usr is Three
 IF WRK.Defect_Count_Usr = 3;

 // PAR.Defect User  3 = DB1.DF Defect Code
 PAR.Defect_User_3 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 3 = DB1.TDF Head Defect
 PAR.Defect_HD_user_3 = DB1.TDF_Head_Defect;

 // PAR.Defect Cls User 3 = DB1.TDF Classification Defs
 PAR.Defect_Cls_User_3 = DB1.TDF_Classification_Defs;

 // WRK.Defect Count Usr = CND.Four
 WRK.Defect_Count_Usr = 4;

 // IF WRK.Defect Count Usr is Four
 IF WRK.Defect_Count_Usr = 4;

 // PAR.Defect User  4 = DB1.DF Defect Code
 PAR.Defect_User_4 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 4 = DB1.TDF Head Defect
 PAR.Defect_HD_user_4 = DB1.TDF_Head_Defect;

 // PAR.Defect Cls User 4 = DB1.TDF Classification Defs
 PAR.Defect_Cls_User_4 = DB1.TDF_Classification_Defs;

 // WRK.Defect Count Usr = CND.Five
 WRK.Defect_Count_Usr = 5;

 // IF WRK.Defect Count Usr is Five
 IF WRK.Defect_Count_Usr = 5;

 // PAR.Defect User  5 = DB1.DF Defect Code
 PAR.Defect_User_5 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 5 = DB1.TDF Head Defect
 PAR.Defect_HD_user_5 = DB1.TDF_Head_Defect;

 // PAR.Defect Cls User 5 = DB1.TDF Classification Defs
 PAR.Defect_Cls_User_5 = DB1.TDF_Classification_Defs;

 // WRK.Defect Count Usr = CND.Six
 WRK.Defect_Count_Usr = 6;

 // IF WRK.Defect Count Usr is Six
 IF WRK.Defect_Count_Usr = 6;

 // PAR.Defect User  6 = DB1.DF Defect Code
 PAR.Defect_User_6 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 6 = DB1.TDF Head Defect
 PAR.Defect_HD_user_6 = DB1.TDF_Head_Defect;

 // PAR.Defect Cls User 6 = DB1.TDF Classification Defs
 PAR.Defect_Cls_User_6 = DB1.TDF_Classification_Defs;

 // WRK.Defect Count Usr = CND.Seven
 WRK.Defect_Count_Usr = 7;

 // IF WRK.Defect Count Usr is Seven
 IF WRK.Defect_Count_Usr = 7;

 // PAR.Defect User  7 = DB1.DF Defect Code
 PAR.Defect_User_7 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 7 = DB1.TDF Head Defect
 PAR.Defect_HD_user_7 = DB1.TDF_Head_Defect;

 // PAR.Defect Cls User 7 = DB1.TDF Classification Defs
 PAR.Defect_Cls_User_7 = DB1.TDF_Classification_Defs;

 // WRK.Defect Count Usr = CND.Eight
 WRK.Defect_Count_Usr = 8;

 // IF WRK.Defect Count Usr is Eight
 IF WRK.Defect_Count_Usr = 8;

 // PAR.Defect User  8 = DB1.DF Defect Code
 PAR.Defect_User_8 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 8 = DB1.TDF Head Defect
 PAR.Defect_HD_user_8 = DB1.TDF_Head_Defect;

 // PAR.Defect Cls User 8 = DB1.TDF Classification Defs
 PAR.Defect_Cls_User_8 = DB1.TDF_Classification_Defs;

 // WRK.Defect Count Usr = CND.Nine
 WRK.Defect_Count_Usr = 9;

 // IF WRK.Defect Count Usr is Nine
 IF WRK.Defect_Count_Usr = 9;

 // PAR.Defect User  9 = DB1.DF Defect Code
 PAR.Defect_User_9 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 9 = DB1.TDF Head Defect
 PAR.Defect_HD_user_9 = DB1.TDF_Head_Defect;

 // PAR.Defect Cls User 9 = DB1.TDF Classification Defs
 PAR.Defect_Cls_User_9 = DB1.TDF_Classification_Defs;

 // WRK.Defect Count Usr = CND.Ten
 WRK.Defect_Count_Usr = 10;

 // IF WRK.Defect Count Usr is Ten
 IF WRK.Defect_Count_Usr = 10;

 // PAR.Defect User 10 = DB1.DF Defect Code
 PAR.Defect_User_10 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 10 = DB1.TDF Head Defect
 PAR.Defect_HD_user_10 = DB1.TDF_Head_Defect;

 // PAR.Defect Cls User 10 = DB1.TDF Classification Defs
 PAR.Defect_Cls_User_10 = DB1.TDF_Classification_Defs;

 // WRK.Defect Count Usr = CND.Eleven
 WRK.Defect_Count_Usr = 11;

 QUIT;

 ENDIF;

}


CASE;

// IF DTL.TH Hog Class Type is Subject
IF DTL.TH_Hog_Class_Type = 'S';

// OR DTL.TH Source Type is External
OR DTL.TH_Source_Type = 'E';

// WRK.Display Output Only 2 USR = CND.Yes
WRK.Display_Output_Only_2_USR = 'Y';

ENDIF;

ENDDO;

// DTL.TH Scale Ticket Sts = CND.Not Printed
DTL.TH_Scale_Ticket_Sts = 'N';

// DTL.TH Resale Spread Sts = CND.Not Spread
DTL.TH_Resale_Spread_Sts = *BLANK;

// WRK.@Status Internal (Y/N) = CND.No
WRK.@Status_Internal_Y_N = *BLANK;

//?Retrieve hog classification
CASE;

// IF DTL.TH Hog Class Type is Resale
IF DTL.TH_Hog_Class_Type = 'R';

EXECUTE FUNCTION(Rtv Hog Class Resale  RT) TYPE(RTVOBJ) FILE(PKA8REP)           AB1169517;
PARAMETER(DTL.HC_Class_Code);
PARAMETER(DTL.HC_Description);
PARAMETER(DTL.TH_Hog_Class_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF DTL.TH Source Type is Internal
IF DTL.TH_Source_Type = 'I';

// WRK.@Status Internal (Y/N) = CND.Yes
WRK.@Status_Internal_Y_N = 'Y';

ENDIF;

//?Retrieve hog classification
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Hog Class Qualify RT) TYPE(RTVOBJ) FILE(PKA8REP)           AB1161899;
PARAMETER(DTL.HC_Class_Code);
PARAMETER(DTL.HC_Description);
PARAMETER(DTL.TH_Hog_Class_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

// DTL.HC Class Type Desc Usr = Condition name of DTL.TH Hog Class Type
DTL.HC_Class_Type_Desc_Usr = RTVCND(DTL.TH_Hog_Class_Type);

//?******************************
//?Load description of pars passed in when a subj,rsl is created for
//?an existing tattoo.
CASE;

// IF LCL.MTech Live Yes or No is No MTech not Live
IF LCL.MTech_Live_Yes_or_No = 'N';

//?Retrieve Group Reference Code (alpha) from HPS  Internal
CASE;

// IF DTL.TH Source Type is Internal
IF DTL.TH_Source_Type = 'I';

// AND PAR.TH Group Reference NE WRK.Blank USR
AND PAR.TH_Group_Reference <> WRK.Blank_USR;

// Call program Z1v HPS Grp from Mvmt UP.
CALL PROGRAM(Z1v HPS Grp from Mvmt UP) ('HP258');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(DTL.TH_HPS_Movement_Ref_#);
PARAMETER(DTL.Group_Reference_Code_USR);

ENDIF;

// IF LCL.MTech Live Yes or No is Yes MTech is Live
IF LCL.MTech_Live_Yes_or_No = 'Y';

ENDIF;

//?Get Sex name
CASE;

// IF DTL.TH Sex NE WRK.Blank USR
IF DTL.TH_Sex <> WRK.Blank_USR;

// DTL.Sex Desc Usr = Condition name of PAR.TH Sex
DTL.Sex_Desc_Usr = RTVCND(PAR.TH_Sex);

ENDIF;

//?Check producer for Insured, to diplay on screen
//?5/16/2017 PASS in company number for STD D/a
// Call program Rtv/Chk Prdcr for Ins XF.
CALL PROGRAM(Rtv/Chk Prdcr for Ins XF) ('PKGDXFR');
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(WRK.@Status_Yes_No);
PARAMETER(PAR.BOH_Company_Number);

//?Insured
CASE;

// IF WRK.@Status (Yes/No) is Yes
IF WRK.@Status_Yes_No = 'Y';

// DTL.Text 9 USR = CON.*INSURED*
DTL.Text_9_USR = *INSURED*;

//?Insured
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Text 9 USR = CON.*BLANK
DTL.Text_9_USR = *BLANK;

ENDIF;

// DTL.TH Shift Held Over = CND.No
DTL.TH_Shift_Held_Over = 'N';

//?*----------------------------------------------------------*
//?* 01/23/03 PKD Retrieve the Movement Reference from Delivery
//?               Schedule to default.  If not in the Schedule
//?               Then retrieve it from the Tracking.
CASE;

// IF LCL.MTech Live Yes or No is No MTech not Live
IF LCL.MTech_Live_Yes_or_No = 'N';

//?Externals and internals
EXECUTE FUNCTION(Rtv Mvmnt,Farm f/BOL  RT) TYPE(RTVOBJ) FILE(PLAECPP)           AB1245116;
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.DSD_Farm_Site_Code);
PARAMETER(DTL.TH_HPS_Movement_Ref_#);
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?If TH HPS Movement Ref # is zeros, retrieve value
CASE;

// IF DTL.TH HPS Movement Ref # EQ WRK.Zero USR
IF DTL.TH_HPS_Movement_Ref_# = WRK.Zero_USR;

EXECUTE FUNCTION(Rtv Movement Number   RT) TYPE(RTVOBJ) FILE(PLAFCPP)           AB1247975;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(DTL.TH_HPS_Movement_Ref_#);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?If TH HPS Movement Ref # is still zeros - load default value
CASE;

// IF DTL.TH HPS Movement Ref # EQ WRK.Zero USR
IF DTL.TH_HPS_Movement_Ref_# = WRK.Zero_USR;

// DTL.TH HPS Movement Ref # = PAR.TH HPS Movement Ref #
DTL.TH_HPS_Movement_Ref_# = PAR.TH_HPS_Movement_Ref_#;

ENDIF;

ENDIF;

//?*----------------------------------------------------------*
//?*----------------------------------------------------------*
// Call program Rtv Delivery TrackInf XF.
CALL PROGRAM(Rtv Delivery TrackInf XF) ('PLS3XFR');
PARAMETER(NLL.DT_Farm_Site_Code);
PARAMETER(DTL.DT_Building);
PARAMETER(DTL.DT_Room);
PARAMETER(DTL.DT_Sire_Line_Code);
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);

//?USER: Initialize detail screen (existing record)

// DTL.Prior Movement # = DB1.TH HPS Movement Ref #
DTL.Prior_Movement_# = DB1.TH_HPS_Movement_Ref_#;

// DTL.TH Hog Class Type = PAR.TH Hog Class Type
DTL.TH_Hog_Class_Type = PAR.TH_Hog_Class_Type;

// DTL.PL Site ID Required = PAR.PL Site ID Required
DTL.PL_Site_ID_Required = PAR.PL_Site_ID_Required;

// DTL.PS Site ID = CON.*BLANK
DTL.PS_Site_ID = *BLANK;

// DTL.Producer Subsidary Code = CON.*BLANK
DTL.Producer_Subsidiary_Code = *BLANK;

//?** Retrieve Site ID & Producer Subsidiary from Tattoo Header EXT
//?NOT Resale get Tattoo hdr ext , Rsl hogs set to blks site id & prd Subs
CASE;

// IF DB1.TH Hog Class Type is Not Resale
IF DB1.TH_Hog_Class_Type = 'M'/'S';

EXECUTE FUNCTION(Rtv Site ID/Prod Subs RT) TYPE(RTVOBJ) FILE(PKDNCPP)           AB1291789;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(NLL.PD_Producer_Code);
PARAMETER(DTL.PS_Site_ID);
PARAMETER(DTL.Producer_Subsidiary_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?NOT Resale get Tattoo hdr ext , Rsl hogs set to blks site id & prd Subs
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.PL Site ID Required = CND.No
DTL.PL_Site_ID_Required = 'N';

// DTL.PS Site ID = CON.*BLANK
DTL.PS_Site_ID = *BLANK;

// DTL.Producer Subsidary Code = CON.*BLANK
DTL.Producer_Subsidiary_Code = *BLANK;

ENDIF;

//?The Bol Shipped Head is maintain in this program at the Tattoo Level
//?so regardless this field represents the shipped head for the load
EXECUTE FUNCTION(Rtv Shipped Head      RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1226281;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(DTL.BOL_Shipped_Head);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?9/22/2008 slm
//?move set cursor to lower part of processing
//?do to adding fields to screen set cursor on new rules
//?Set Cursor
CASE;

// IF PAR.TH Hog Class Type is Market
IF PAR.TH_Hog_Class_Type = 'M';

//?set cursor  --- rules on when to position to Producer subsidary
CASE;

// IF DTL.BOL Shipped Head is *Zeros
IF DTL.BOL_Shipped_Head = *ZERO;

SET CURSOR;

//?set cursor  --- rules on when to position to Producer subsidary
// IF DTL.BOL Load Shipped Head is Not Zero
IF DTL.BOL_Shipped_Head <> *ZERO;

// AND WRK.Producer Subsidiary SUSR is Allow Producer Subsidiary
AND WRK.Producer_Subsidiary_SUSR = 'Y';

// AND LCL.Allow Tattoo to be Edited is Yes
AND LCL.Allow_Tattoo_to_be_Edited = 'Y';

SET CURSOR;

//?set cursor  --- rules on when to position to Producer subsidary
// IF DTL.BOL Load Shipped Head is Not Zero
IF DTL.BOL_Shipped_Head <> *ZERO;

// AND DTL.PL Site ID Required is Yes
AND DTL.PL_Site_ID_Required = 'Y';

SET CURSOR;

//?set cursor  --- rules on when to position to Producer subsidary
// IF DTL.BOL Load Shipped Head is Not Zero
IF DTL.BOL_Shipped_Head <> *ZERO;

SET CURSOR;

//?set cursor  --- rules on when to position to Producer subsidary
// IF *OTHERWISE
IF *OTHERWISE;

SET CURSOR;

ENDIF;

//?Set Cursor
// IF *OTHERWISE
IF *OTHERWISE;

//?set cursor  --- rules on when to position to Class Code
CASE;

// IF DTL.BOL Load Shipped Head is Not Zero
IF DTL.BOL_Shipped_Head <> *ZERO;

SET CURSOR;

//?set cursor  --- rules on when to position to Class Code
// IF *OTHERWISE
IF *OTHERWISE;

SET CURSOR;

ENDIF;

ENDIF;

// LCL.Record Change Usr = CND.Yes
LCL.Record_Change_Usr = 'Y';

// DTL.Description 30 USR = Condition name of DTL.TH Hog Class Type
DTL.Description_30_USR = RTVCND(DTL.TH_Hog_Class_Type);

// DTL.PD Name = PAR.PD Name
DTL.PD_Name = PAR.PD_Name;

// DTL.PL Name = PAR.PL Name
DTL.PL_Name = PAR.PL_Name;

// DTL.TH Live Purch UOM  Usr = Condition name of DB1.TH Live Purchase UOM
DTL.TH_Live_Purch_UOM_Usr = RTVCND(DB1.TH_Live_Purchase_UOM);

// DTL.Sex Desc Usr = Condition name of DB1.TH Sex
DTL.Sex_Desc_Usr = RTVCND(DB1.TH_Sex);

EXECUTE FUNCTION(Rtv Hog Class Desc    RT) TYPE(RTVOBJ) FILE(PKA8REP)           AB1127790;
PARAMETER(DB1.HC_Class_Code);
PARAMETER(DTL.HC_Description);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.HC_Description = WRK.Blank_USR;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Name USR = PAR.Name USR
DTL.Name_USR = PAR.Name_USR;

// DTL.TH Source Code = PAR.SR Source Code
DTL.TH_Source_Code = PAR.SR_Source_Code;

// DTL.TH Source Type = PAR.SR Type
DTL.TH_Source_Type = PAR.SR_Type;

// DTL.SR Type Desc = Condition name of PAR.SR Type
DTL.SR_Type_Desc = RTVCND(PAR.SR_Type);

//?State code - Prod, or producer site, or external
CASE;

// IF PAR.SR Type is External
IF PAR.SR_Type = 'E';

//?Placed TH STATE CODE on the screen, def either prd loc, or site id
//?Rtv vendor info & site information from the producer
CASE;

// IF DTL.TH State EQ WRK.Blank USR
IF DTL.TH_State = WRK.Blank_USR;

// DTL.TH State = PAR.PL State Code
DTL.TH_State = PAR.PL_State_Code;

CASE;

// IF DTL.PL Site ID Required is Yes
IF DTL.PL_Site_ID_Required = 'Y';

//?get th state
//?E3814 JJH 10/07/15 - Display PS Premises ID from Producer Site
//?test susan 2
EXECUTE FUNCTION(Rtv Site State/PremiseRT) TYPE(RTVOBJ) FILE(PLATREP)           AB1327101;
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(DTL.PS_Site_ID);
PARAMETER(DTL.TH_State);
PARAMETER(DTL.PS_Premises_ID);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.RS Record Status is Active
 IF DB1.RS_Record_Status = 'A';

 MOVE *ALL (To: PAR From: DB1);

 // IF *OTHERWISE
 IF *OTHERWISE;

 MOVE *ALL (To: PAR From: CON);

 ENDIF;

}


ENDIF;

//?Rtv vendor info & site information from the producer
// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

ENDIF;

//?State code - mtech live and internals only
CASE;

// IF LCL.MTech Live Yes or No is Yes MTech is Live
IF LCL.MTech_Live_Yes_or_No = 'Y';

// AND PAR.SR Type is Internal
AND PAR.SR_Type = 'I';

//?Get the State Code from the Farm Site
// Call program Rtv HPS Farm Inf-Mtech UP.
CALL PROGRAM(Rtv HPS Farm Inf-Mtech UP) ('HP293');
PARAMETER(PGM.*Return_code);
PARAMETER(NLL.Farm_site_Name_f_HPS_USR);
PARAMETER(DTL.TH_HPS_Farm_Site);
PARAMETER(WRK.HPS_FS_Comp_Relation_USR);
PARAMETER(DTL.TH_State);
PARAMETER(WRK.HPS_Farm_County);
PARAMETER(WRK.HPS_Cell_Manager_Code_USR);
PARAMETER(WRK.HPS_Cell_Manager_Nm_USR);
PARAMETER(NLL.MTech_Farm_Site_Ref);
PARAMETER(NLL.MTech_Cell_Manager_Ref);

ENDIF;

//?State code - mtech NOT live and internals only
CASE;

// IF LCL.MTech Live Yes or No is No MTech not Live
IF LCL.MTech_Live_Yes_or_No = 'N';

// AND PAR.SR Type is Internal
AND PAR.SR_Type = 'I';

//?Placed TH STATE on the screen, FROM the farm site get the state
// DTL.TH HPS Movement Ref # = PAR.TH HPS Movement Ref #
DTL.TH_HPS_Movement_Ref_# = PAR.TH_HPS_Movement_Ref_#;

// Call program Z1v HPS Farm Info     UP.
CALL PROGRAM(Z1v HPS Farm Info     UP) ('HP249');
PARAMETER(PGM.*Return_code);
PARAMETER(DTL.TH_HPS_Movement_Ref_#);
PARAMETER(WRK.Farm_site_Name_f_HPS_USR);
PARAMETER(DTL.TH_HPS_Farm_Site);
PARAMETER(WRK.HPS_FS_Comp_Relation_USR);
PARAMETER(DTL.TH_State);

// LCL.State = DTL.TH State
LCL.State = DTL.TH_State;

ENDIF;

// LCL.Return Code USR = WRK.Blank USR
LCL.Return_Code_USR = WRK.Blank_USR;

// Call program Rtv State Description UP.
CALL PROGRAM(Rtv State Description UP) ('STATERET');
PARAMETER(LCL.Return_Code_USR);
PARAMETER(DTL.TH_State);
PARAMETER(DTL.State_Desc_15_USR);

//?Invalid state code send message
CASE;

// IF LCL.Return Code USR is *Normal
IF LCL.Return_Code_USR = *BLANK;

//?Invalid state code send message
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'State Code is Invalid'
ERROR(PRK0308);
MSGPARM(DTL.TH_State);

ENDIF;

//?The Bol Shipped Head is maintain in this program at the Tattoo Level
//?so regardless this field represents the shipped head for the load
EXECUTE FUNCTION(Rtv Shipped Head      RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1226281;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(DTL.BOL_Shipped_Head);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.HC Class Type Desc Usr = Condition name of DTL.TH Hog Class Type
DTL.HC_Class_Type_Desc_Usr = RTVCND(DTL.TH_Hog_Class_Type);

// DTL.TH Resale Spread Sts = DB1.TH Resale Spread Sts
DTL.TH_Resale_Spread_Sts = DB1.TH_Resale_Spread_Sts;

// WRK.@Status Internal (Y/N) = CND.No
WRK.@Status_Internal_Y_N = *BLANK;

// WRK.Display Output Only Usr = CND.No
WRK.Display_Output_Only_Usr = 'N';

// WRK.Display Output Only 2 USR = CND.No
WRK.Display_Output_Only_2_USR = 'N';

//?MKT: Hide defect/head fields  and pen/hd recvd
CASE;

// IF DTL.TH Hog Class Type is Market
IF DTL.TH_Hog_Class_Type = 'M';

// WRK.Display Output Only Usr = CND.Yes
WRK.Display_Output_Only_Usr = 'Y';

// WRK.Display Output Only 2 USR = CND.Yes
WRK.Display_Output_Only_2_USR = 'Y';

//?MKT: Hide defect/head fields  and pen/hd recvd
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.TH Hog Class Type is Subject
IF DTL.TH_Hog_Class_Type = 'S';

// OR DTL.TH Source Type is External
OR DTL.TH_Source_Type = 'E';

// WRK.Display Output Only 2 USR = CND.Yes
WRK.Display_Output_Only_2_USR = 'Y';

ENDIF;

ENDIF;

//?Set flag to display unweighed resale pen & received hd, get pen
CASE;

// IF DTL.TH Source Type is Internal
IF DTL.TH_Source_Type = 'I';

// AND DTL.TH Hog Class Type is Resale
AND DTL.TH_Hog_Class_Type = 'R';

// WRK.@Status Internal (Y/N) = CND.Yes
WRK.@Status_Internal_Y_N = 'Y';

//?Protect the defect/head/pen fields if tattoo has been weighed.
CASE;

// IF DTL.TH Resale Spread Sts is Spread
IF DTL.TH_Resale_Spread_Sts = 'P';

// WRK.Display Output Only Usr = CND.Yes
WRK.Display_Output_Only_Usr = 'Y';

// WRK.Display Output Only 2 USR = CND.Yes
WRK.Display_Output_Only_2_USR = 'Y';

ENDIF;

ENDIF;

//?Get Defect/Hd
DO;

// DTL.Defect User  1 = CON.*BLANK
DTL.Defect_User_1 = *BLANK;

// DTL.Defect User  2 = CON.*BLANK
DTL.Defect_User_2 = *BLANK;

// DTL.Defect User  3 = CON.*BLANK
DTL.Defect_User_3 = *BLANK;

// DTL.Defect User  4 = CON.*BLANK
DTL.Defect_User_4 = *BLANK;

// DTL.Defect User  5 = CON.*BLANK
DTL.Defect_User_5 = *BLANK;

// DTL.Defect User  6 = CON.*BLANK
DTL.Defect_User_6 = *BLANK;

// DTL.Defect User  7 = CON.*BLANK
DTL.Defect_User_7 = *BLANK;

// DTL.Defect User  8 = CON.*BLANK
DTL.Defect_User_8 = *BLANK;

// DTL.Defect User  9 = CON.*BLANK
DTL.Defect_User_9 = *BLANK;

// DTL.Defect User 10 = CON.*BLANK
DTL.Defect_User_10 = *BLANK;

// DTL.Defect HD user 1 = CON.*ZERO
DTL.Defect_HD_user_1 = *ZERO;

// DTL.Defect HD user 2 = CON.*ZERO
DTL.Defect_HD_user_2 = *ZERO;

// DTL.Defect HD user 3 = CON.*ZERO
DTL.Defect_HD_user_3 = *ZERO;

// DTL.Defect HD user 4 = CON.*ZERO
DTL.Defect_HD_user_4 = *ZERO;

// DTL.Defect HD user 5 = CON.*ZERO
DTL.Defect_HD_user_5 = *ZERO;

// DTL.Defect HD user 6 = CON.*ZERO
DTL.Defect_HD_user_6 = *ZERO;

// DTL.Defect HD user 7 = CON.*ZERO
DTL.Defect_HD_user_7 = *ZERO;

// DTL.Defect HD user 8 = CON.*ZERO
DTL.Defect_HD_user_8 = *ZERO;

// DTL.Defect HD user 9 = CON.*ZERO
DTL.Defect_HD_user_9 = *ZERO;

// DTL.Defect HD user 10 = CON.*ZERO
DTL.Defect_HD_user_10 = *ZERO;

EXECUTE FUNCTION(Rtv Tattoo Def-10&Cls RT) TYPE(RTVOBJ) FILE(PKDZREP)           AB1287114;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(DTL.Defect_User_1);
PARAMETER(DTL.Defect_User_2);
PARAMETER(DTL.Defect_User_3);
PARAMETER(DTL.Defect_User_4);
PARAMETER(DTL.Defect_User_5);
PARAMETER(DTL.Defect_User_6);
PARAMETER(DTL.Defect_User_7);
PARAMETER(DTL.Defect_User_8);
PARAMETER(DTL.Defect_User_9);
PARAMETER(DTL.Defect_User_10);
PARAMETER(DTL.Defect_HD_user_1);
PARAMETER(DTL.Defect_HD_user_2);
PARAMETER(DTL.Defect_HD_user_3);
PARAMETER(DTL.Defect_HD_user_4);
PARAMETER(DTL.Defect_HD_user_5);
PARAMETER(DTL.Defect_HD_user_6);
PARAMETER(DTL.Defect_HD_user_7);
PARAMETER(DTL.Defect_HD_user_8);
PARAMETER(DTL.Defect_HD_user_9);
PARAMETER(DTL.Defect_HD_user_10);
PARAMETER(DTL.Class_Df_1_Usr);
PARAMETER(DTL.Class_Df_2_Usr);
PARAMETER(DTL.Class_Df_3_Usr);
PARAMETER(DTL.Class_Df_4_Usr);
PARAMETER(DTL.Class_Df_5_Usr);
PARAMETER(DTL.Class_Df_6_Usr);
PARAMETER(DTL.Class_Df_7_Usr);
PARAMETER(DTL.Class_Df_8_Usr);
PARAMETER(DTL.Class_Df_9_Usr);
PARAMETER(DTL.Class_Df_10_Usr);
{
 //?USER: Initialize routine

 // WRK.Defect Count Usr = CND.One
 WRK.Defect_Count_Usr = 1;

 //?USER: Process Data record

 CASE;

 // IF WRK.Defect Count Usr is One
 IF WRK.Defect_Count_Usr = 1;

 // PAR.Defect User  1 = DB1.DF Defect Code
 PAR.Defect_User_1 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 1 = DB1.TDF Head Defect
 PAR.Defect_HD_user_1 = DB1.TDF_Head_Defect;

 // PAR.Defect Cls User 1 = DB1.TDF Classification Defs
 PAR.Defect_Cls_User_1 = DB1.TDF_Classification_Defs;

 // WRK.Defect Count Usr = CND.Two
 WRK.Defect_Count_Usr = 2;

 // IF WRK.Defect Count Usr is Two
 IF WRK.Defect_Count_Usr = 2;

 // PAR.Defect User  2 = DB1.DF Defect Code
 PAR.Defect_User_2 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 2 = DB1.TDF Head Defect
 PAR.Defect_HD_user_2 = DB1.TDF_Head_Defect;

 // PAR.Defect Cls User 2 = DB1.TDF Classification Defs
 PAR.Defect_Cls_User_2 = DB1.TDF_Classification_Defs;

 // WRK.Defect Count Usr = CND.Three
 WRK.Defect_Count_Usr = 3;

 // IF WRK.Defect Count Usr is Three
 IF WRK.Defect_Count_Usr = 3;

 // PAR.Defect User  3 = DB1.DF Defect Code
 PAR.Defect_User_3 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 3 = DB1.TDF Head Defect
 PAR.Defect_HD_user_3 = DB1.TDF_Head_Defect;

 // PAR.Defect Cls User 3 = DB1.TDF Classification Defs
 PAR.Defect_Cls_User_3 = DB1.TDF_Classification_Defs;

 // WRK.Defect Count Usr = CND.Four
 WRK.Defect_Count_Usr = 4;

 // IF WRK.Defect Count Usr is Four
 IF WRK.Defect_Count_Usr = 4;

 // PAR.Defect User  4 = DB1.DF Defect Code
 PAR.Defect_User_4 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 4 = DB1.TDF Head Defect
 PAR.Defect_HD_user_4 = DB1.TDF_Head_Defect;

 // PAR.Defect Cls User 4 = DB1.TDF Classification Defs
 PAR.Defect_Cls_User_4 = DB1.TDF_Classification_Defs;

 // WRK.Defect Count Usr = CND.Five
 WRK.Defect_Count_Usr = 5;

 // IF WRK.Defect Count Usr is Five
 IF WRK.Defect_Count_Usr = 5;

 // PAR.Defect User  5 = DB1.DF Defect Code
 PAR.Defect_User_5 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 5 = DB1.TDF Head Defect
 PAR.Defect_HD_user_5 = DB1.TDF_Head_Defect;

 // PAR.Defect Cls User 5 = DB1.TDF Classification Defs
 PAR.Defect_Cls_User_5 = DB1.TDF_Classification_Defs;

 // WRK.Defect Count Usr = CND.Six
 WRK.Defect_Count_Usr = 6;

 // IF WRK.Defect Count Usr is Six
 IF WRK.Defect_Count_Usr = 6;

 // PAR.Defect User  6 = DB1.DF Defect Code
 PAR.Defect_User_6 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 6 = DB1.TDF Head Defect
 PAR.Defect_HD_user_6 = DB1.TDF_Head_Defect;

 // PAR.Defect Cls User 6 = DB1.TDF Classification Defs
 PAR.Defect_Cls_User_6 = DB1.TDF_Classification_Defs;

 // WRK.Defect Count Usr = CND.Seven
 WRK.Defect_Count_Usr = 7;

 // IF WRK.Defect Count Usr is Seven
 IF WRK.Defect_Count_Usr = 7;

 // PAR.Defect User  7 = DB1.DF Defect Code
 PAR.Defect_User_7 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 7 = DB1.TDF Head Defect
 PAR.Defect_HD_user_7 = DB1.TDF_Head_Defect;

 // PAR.Defect Cls User 7 = DB1.TDF Classification Defs
 PAR.Defect_Cls_User_7 = DB1.TDF_Classification_Defs;

 // WRK.Defect Count Usr = CND.Eight
 WRK.Defect_Count_Usr = 8;

 // IF WRK.Defect Count Usr is Eight
 IF WRK.Defect_Count_Usr = 8;

 // PAR.Defect User  8 = DB1.DF Defect Code
 PAR.Defect_User_8 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 8 = DB1.TDF Head Defect
 PAR.Defect_HD_user_8 = DB1.TDF_Head_Defect;

 // PAR.Defect Cls User 8 = DB1.TDF Classification Defs
 PAR.Defect_Cls_User_8 = DB1.TDF_Classification_Defs;

 // WRK.Defect Count Usr = CND.Nine
 WRK.Defect_Count_Usr = 9;

 // IF WRK.Defect Count Usr is Nine
 IF WRK.Defect_Count_Usr = 9;

 // PAR.Defect User  9 = DB1.DF Defect Code
 PAR.Defect_User_9 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 9 = DB1.TDF Head Defect
 PAR.Defect_HD_user_9 = DB1.TDF_Head_Defect;

 // PAR.Defect Cls User 9 = DB1.TDF Classification Defs
 PAR.Defect_Cls_User_9 = DB1.TDF_Classification_Defs;

 // WRK.Defect Count Usr = CND.Ten
 WRK.Defect_Count_Usr = 10;

 // IF WRK.Defect Count Usr is Ten
 IF WRK.Defect_Count_Usr = 10;

 // PAR.Defect User 10 = DB1.DF Defect Code
 PAR.Defect_User_10 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 10 = DB1.TDF Head Defect
 PAR.Defect_HD_user_10 = DB1.TDF_Head_Defect;

 // PAR.Defect Cls User 10 = DB1.TDF Classification Defs
 PAR.Defect_Cls_User_10 = DB1.TDF_Classification_Defs;

 // WRK.Defect Count Usr = CND.Eleven
 WRK.Defect_Count_Usr = 11;

 QUIT;

 ENDIF;

}


CASE;

// IF DTL.TH Hog Class Type is Not Market
IF DTL.TH_Hog_Class_Type = 'R'/'S';

//?If Resale/internal
CASE;

// IF WRK.@Status Internal (Y/N) is Yes
IF WRK.@Status_Internal_Y_N = 'Y';

EXECUTE FUNCTION(Chk Def Scale Wt Req  IF) TYPE(EXCINTFUN)                      AB1205985;
PARAMETER(DTL.Defect_User_1);
PARAMETER(DTL.Defect_User_2);
PARAMETER(DTL.Defect_User_3);
PARAMETER(DTL.Defect_User_4);
PARAMETER(DTL.Defect_User_5);
PARAMETER(DTL.Defect_User_6);
PARAMETER(DTL.Defect_User_7);
PARAMETER(DTL.Defect_User_8);
PARAMETER(DTL.Defect_User_9);
PARAMETER(DTL.Defect_User_10);
PARAMETER(WRK.Scale_Wt_Required_USR);
{
 //?Execute internal function

 //?If any defect has scale weight required, quit checking the defects.
 // PAR.Scale Wt Required     USR = CND.No
 PAR.Scale_Wt_Required_USR = 'N';

 CASE;

 // IF PAR.Defect User  1 NE WRK.Blank USR
 IF PAR.Defect_User_1 <> WRK.Blank_USR;

 EXECUTE FUNCTION(Rtv Scale Wt Req      RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1205986;
 PARAMETER(PAR.Defect_User_1);
 PARAMETER(WRK.DF_Scale_Weight_Required);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.DF Scale Weight Required is Yes
 IF WRK.DF_Scale_Weight_Required = 'Y';

 // PAR.Scale Wt Required     USR = CND.Yes
 PAR.Scale_Wt_Required_USR = 'Y';

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Defect User  2 NE WRK.Blank USR
 IF PAR.Defect_User_2 <> WRK.Blank_USR;

 EXECUTE FUNCTION(Rtv Scale Wt Req      RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1205986;
 PARAMETER(PAR.Defect_User_2);
 PARAMETER(WRK.DF_Scale_Weight_Required);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.DF Scale Weight Required is Yes
 IF WRK.DF_Scale_Weight_Required = 'Y';

 // PAR.Scale Wt Required     USR = CND.Yes
 PAR.Scale_Wt_Required_USR = 'Y';

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Defect User  3 NE WRK.Blank USR
 IF PAR.Defect_User_3 <> WRK.Blank_USR;

 EXECUTE FUNCTION(Rtv Scale Wt Req      RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1205986;
 PARAMETER(PAR.Defect_User_3);
 PARAMETER(WRK.DF_Scale_Weight_Required);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.DF Scale Weight Required is Yes
 IF WRK.DF_Scale_Weight_Required = 'Y';

 // PAR.Scale Wt Required     USR = CND.Yes
 PAR.Scale_Wt_Required_USR = 'Y';

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Defect User  4 NE WRK.Blank USR
 IF PAR.Defect_User_4 <> WRK.Blank_USR;

 EXECUTE FUNCTION(Rtv Scale Wt Req      RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1205986;
 PARAMETER(PAR.Defect_User_4);
 PARAMETER(WRK.DF_Scale_Weight_Required);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.DF Scale Weight Required is Yes
 IF WRK.DF_Scale_Weight_Required = 'Y';

 // PAR.Scale Wt Required     USR = CND.Yes
 PAR.Scale_Wt_Required_USR = 'Y';

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Defect User  5 NE WRK.Blank USR
 IF PAR.Defect_User_5 <> WRK.Blank_USR;

 EXECUTE FUNCTION(Rtv Scale Wt Req      RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1205986;
 PARAMETER(PAR.Defect_User_5);
 PARAMETER(WRK.DF_Scale_Weight_Required);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.DF Scale Weight Required is Yes
 IF WRK.DF_Scale_Weight_Required = 'Y';

 // PAR.Scale Wt Required     USR = CND.Yes
 PAR.Scale_Wt_Required_USR = 'Y';

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Defect User  6 NE WRK.Blank USR
 IF PAR.Defect_User_6 <> WRK.Blank_USR;

 EXECUTE FUNCTION(Rtv Scale Wt Req      RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1205986;
 PARAMETER(PAR.Defect_User_6);
 PARAMETER(WRK.DF_Scale_Weight_Required);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.DF Scale Weight Required is Yes
 IF WRK.DF_Scale_Weight_Required = 'Y';

 // PAR.Scale Wt Required     USR = CND.Yes
 PAR.Scale_Wt_Required_USR = 'Y';

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Defect User  7 NE WRK.Blank USR
 IF PAR.Defect_User_7 <> WRK.Blank_USR;

 EXECUTE FUNCTION(Rtv Scale Wt Req      RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1205986;
 PARAMETER(PAR.Defect_User_7);
 PARAMETER(WRK.DF_Scale_Weight_Required);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.DF Scale Weight Required is Yes
 IF WRK.DF_Scale_Weight_Required = 'Y';

 // PAR.Scale Wt Required     USR = CND.Yes
 PAR.Scale_Wt_Required_USR = 'Y';

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Defect User  8 NE WRK.Blank USR
 IF PAR.Defect_User_8 <> WRK.Blank_USR;

 EXECUTE FUNCTION(Rtv Scale Wt Req      RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1205986;
 PARAMETER(PAR.Defect_User_8);
 PARAMETER(WRK.DF_Scale_Weight_Required);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.DF Scale Weight Required is Yes
 IF WRK.DF_Scale_Weight_Required = 'Y';

 // PAR.Scale Wt Required     USR = CND.Yes
 PAR.Scale_Wt_Required_USR = 'Y';

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Defect User  9 NE WRK.Blank USR
 IF PAR.Defect_User_9 <> WRK.Blank_USR;

 EXECUTE FUNCTION(Rtv Scale Wt Req      RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1205986;
 PARAMETER(PAR.Defect_User_9);
 PARAMETER(WRK.DF_Scale_Weight_Required);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.DF Scale Weight Required is Yes
 IF WRK.DF_Scale_Weight_Required = 'Y';

 // PAR.Scale Wt Required     USR = CND.Yes
 PAR.Scale_Wt_Required_USR = 'Y';

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Defect User 10 NE WRK.Blank USR
 IF PAR.Defect_User_10 <> WRK.Blank_USR;

 EXECUTE FUNCTION(Rtv Scale Wt Req      RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1205986;
 PARAMETER(PAR.Defect_User_10);
 PARAMETER(WRK.DF_Scale_Weight_Required);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.DF Scale Weight Required is Yes
 IF WRK.DF_Scale_Weight_Required = 'Y';

 // PAR.Scale Wt Required     USR = CND.Yes
 PAR.Scale_Wt_Required_USR = 'Y';

 ENDIF;

 ENDIF;

}


//?If Defect Scale Wgt Req dont calc TH Head Received
CASE;

// IF WRK.Scale Wt Required     USR is Yes
IF WRK.Scale_Wt_Required_USR = 'Y';

// DTL.Head Total USR = CON.*ZERO
DTL.Head_Total_USR = *ZERO;

// DTL.Pen Number = CND.Pen Number is Empty
DTL.Pen_Number = *BLANK;

// WRK.Pen Usr = CND.Pen Number is Empty
WRK.Pen_Usr = *BLANK;

//?If Defect Scale Wgt Req dont calc TH Head Received
// IF *OTHERWISE
IF *OTHERWISE;

// Rsl/Int-- Sum Defect head
DTL.Head_Total_USR = ( ( ( ( ( ( ( ( DTL.Defect_HD_user_1 + DTL.Defect_HD_user_2 )                 +
+ DTL.Defect_HD_user_3 ) + DTL.Defect_HD_user_4 ) + DTL.Defect_HD_user_5 )                        +
+ DTL.Defect_HD_user_6 ) + DTL.Defect_HD_user_7 ) + DTL.Defect_HD_user_8 )                        +
+ DTL.Defect_HD_user_9 ) + DTL.Defect_HD_user_10;

//?Rtv Pen
EXECUTE FUNCTION(Rtv Tattoo Detail     RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1202268;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(1);
PARAMETER(WRK.Pen_Company_Number);
PARAMETER(DTL.Pen_Number);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.Pen Usr = DTL.Pen Number
WRK.Pen_Usr = DTL.Pen_Number;

ENDIF;

ENDIF;

ENDIF;

ENDDO;

//?Save input fields to check for changes later
// WRK.TH Live Purchase UOM = DTL.TH Live Purchase UOM
WRK.TH_Live_Purchase_UOM = DTL.TH_Live_Purchase_UOM;

// WRK.TH Live Purchase Price = DTL.TH Live Purchase Price
WRK.TH_Live_Purchase_Price = DTL.TH_Live_Purchase_Price;

// WRK.GN Genetic Code = DTL.GN Genetic Code
WRK.GN_Genetic_Code = DTL.GN_Genetic_Code;

// WRK.TH Shipped Weight = DTL.TH Shipped Weight
WRK.TH_Shipped_Weight = DTL.TH_Shipped_Weight;

//?Check producer for Insured, to diplay on screen
// Call program Rtv/Chk Prdcr for Ins XF.
CALL PROGRAM(Rtv/Chk Prdcr for Ins XF) ('PKGDXFR');
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(WRK.@Status_Yes_No);
PARAMETER(PAR.BOH_Company_Number);

//?Insured
CASE;

// IF WRK.@Status (Yes/No) is Yes
IF WRK.@Status_Yes_No = 'Y';

// DTL.Text 9 USR = CON.*INSURED*
DTL.Text_9_USR = *INSURED*;

//?Insured
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Text 9 USR = CON.*BLANK
DTL.Text_9_USR = *BLANK;

ENDIF;

// Call program Rtv Delivery TrackInf XF.
CALL PROGRAM(Rtv Delivery TrackInf XF) ('PLS3XFR');
PARAMETER(NLL.DT_Farm_Site_Code);
PARAMETER(DTL.DT_Building);
PARAMETER(DTL.DT_Room);
PARAMETER(DTL.DT_Sire_Line_Code);
PARAMETER(DB1.BOH_Company_Number);
PARAMETER(DB1.BOH_Buy_Order_Number);
PARAMETER(DB1.BOL_Load_Number);

//?E11288 JJH 07/25/17 - Set Display Output Only
CASE;

// IF DTL.TH Payment Sts is Paid Producer
IF DTL.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

// OR LCL.Allow Tattoo to be Edited is No
OR LCL.Allow_Tattoo_to_be_Edited = 'N';

// LCL.Display Output Only 6 USR = CND.Yes
LCL.Display_Output_Only_6_USR = 'Y';

ENDIF;

//?USER: Validate detail screen fields

EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(DTL.PD_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.PL_Location_Code);
PARAMETER(DTL.PL_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Hog Class         RT) TYPE(RTVOBJ) FILE(PKA8REP)           AB1127629;
PARAMETER(DTL.HC_Class_Code);
PARAMETER(DTL.HC_Description);
PARAMETER(WRK.HC_Defect_Required);
PARAMETER(WRK.HC_Price_Required);
PARAMETER(WRK.HC_Resolution);
PARAMETER(WRK.HC_Qualification);
PARAMETER(WRK.TH_Hog_Class_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.SR Type Desc = Condition name of DTL.TH Source Type
DTL.SR_Type_Desc = RTVCND(DTL.TH_Source_Type);

CASE;

// IF DTL.PL Site ID Required is Yes
IF DTL.PL_Site_ID_Required = 'Y';

//?E10370 JJH 06/22/17 - Select Record Logic for Producer Site
//?** F4 = Select Producer Site ID to get mileage and or state code
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.PS Site ID
AND PGM.*Cursor_field = DTL.PS_Site_ID;

CASE;

// IF PAR.SR Source Code is Triumph Member (Owner)
IF PAR.SR_Source_Code = 'TO';

// Call program Sel Producer Site     SR.
CALL PROGRAM(Sel Producer Site     SR) ('PLGKSRR');
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PS_Site_ID);
PARAMETER(PAR.Oms_System_Value_Alpha);

EXECUTE FUNCTION(Rtv Site State ActOnlyRT) TYPE(RTVOBJ) FILE(PLATREP)           AB1273369;
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(DTL.PS_Site_ID);
PARAMETER(DTL.TH_State);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.RS Record Status is Active
 IF DB1.RS_Record_Status = 'A';

 MOVE *ALL (To: PAR From: DB1);

 // IF *OTHERWISE
 IF *OTHERWISE;

 MOVE *ALL (To: PAR From: CON);

 ENDIF;

}


// IF *OTHERWISE
IF *OTHERWISE;

// Call program Sel Prod Site Mileage SR.
CALL PROGRAM(Sel Prod Site Mileage SR) ('PLFQSRR');
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(DTL.PS_Site_ID);
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(LCL.PSM_Miles_to_Company);

EXECUTE FUNCTION(Rtv Site State ActOnlyRT) TYPE(RTVOBJ) FILE(PLATREP)           AB1273369;
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(DTL.PS_Site_ID);
PARAMETER(DTL.TH_State);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.RS Record Status is Active
 IF DB1.RS_Record_Status = 'A';

 MOVE *ALL (To: PAR From: DB1);

 // IF *OTHERWISE
 IF *OTHERWISE;

 MOVE *ALL (To: PAR From: CON);

 ENDIF;

}


ENDIF;

ENDIF;

//?E10370 JJH 06/26/17 - Do not perform this logic if Source Code=TO
//?Not a Contract, No Rsl Hogs, then Site Id is req, pull th state
CASE;

// IF PAR.SR Source Code is Triumph Member (Owner)
IF PAR.SR_Source_Code = 'TO';

//?Do not perform this logic
//?Not a Contract, No Rsl Hogs, then Site Id is req, pull th state
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.TH Hog Class Type is Not Resale
IF DTL.TH_Hog_Class_Type = 'M'/'S';

//?Site ID will not be required on Resale Hogs
//?E00151 5/16/2008 SLM -- VALIDATE IF REQUIRED REGARDLESS OF CONTRACT
//?* do not want to validate on contract
//?validate producer site id if required regardless of contract
//?** Error if Site ID is blank
CASE;

// IF DTL.PS Site ID is *Blank
IF DTL.PS_Site_ID = *BLANK;

// Send error message - 'Producer Site ID Required'
ERROR(PRK1140);
MSGPARM(DTL.PS_Site_ID);

ENDIF;

//?** 1/4/06 LJB - If Site ID is entered, there must first
//?**   be a record in the Producer Site Mileage file.
//?**   Error if there is not.
EXECUTE FUNCTION(Rtv PrdSiteMil CoMilStRT) TYPE(RTVOBJ) FILE(PLASREP)           AB1273532;
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(DTL.PS_Site_ID);
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(LCL.PSM_Miles_to_Company);
PARAMETER(DTL.TH_State);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Site State ActOnlyRT) TYPE(RTVOBJ) FILE(PLATREP)           AB1273369;
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PS_Site_ID);
 PARAMETER(PAR.PS_State);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.RS Record Status is Active
  IF DB1.RS_Record_Status = 'A';

  MOVE *ALL (To: PAR From: DB1);

  // IF *OTHERWISE
  IF *OTHERWISE;

  MOVE *ALL (To: PAR From: CON);

  ENDIF;

 }

 MOVE *ALL (To: PAR From: DB1);

}


//?** Error if no matching record in Producer Site Mileage
CASE;

// IF LCL.PSM Miles to Company is No Miles
IF LCL.PSM_Miles_to_Company = *ZERO;

// Send error message - 'Producer Site/Mileage NF'
ERROR(PRK1153);
MSGPARM(DTL.PS_Site_ID);

//?** Error if no matching record in Producer Site Mileage
// IF DTL.TH State EQ WRK.Blank USR
IF DTL.TH_State = WRK.Blank_USR;

// Send error message - 'State Code is Invalid'
ERROR(PRK0308);
MSGPARM(DTL.TH_State);

ENDIF;

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

//?Select on Producer Subsidiary
CASE;

// IF WRK.Producer Subsidiary SUSR is Allow Producer Subsidiary
IF WRK.Producer_Subsidiary_SUSR = 'Y';

//?** F4 = Select Producer subsidiary
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Producer Subsidary Code
AND PGM.*Cursor_field = DTL.Producer_Subsidiary_Code;

// AND LCL.Allow Tattoo to be Edited is Yes
AND LCL.Allow_Tattoo_to_be_Edited = 'Y';

// Call program Zzz ProdSubsidiary    SR.
CALL PROGRAM(Zzz ProdSubsidiary    SR) ('PLM2SRR');
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(DTL.Producer_Subsidiary_Code);

ENDIF;

ENDIF;

//?Validation on Producer subsidiary
CASE;

// IF DTL.Producer Subsidary Code is Blank
IF DTL.Producer_Subsidiary_Code = *BLANK;

// AND WRK.Producer Subsidiary SUSR is Allow Producer Subsidiary
AND WRK.Producer_Subsidiary_SUSR = 'Y';

// Send error message - 'Producer Subsidiary is required'
ERROR(PRK1215);
MSGPARM(DTL.Producer_Subsidiary_Code);

//?Validation on Producer subsidiary
// IF DTL.Producer Subsidary Code is Entered
IF DTL.Producer_Subsidiary_Code <> *BLANK;

// AND WRK.Producer Subsidiary SUSR is Allow Producer Subsidiary
AND WRK.Producer_Subsidiary_SUSR = 'Y';

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

EXECUTE FUNCTION(Val ProdSubsidiary    RT) TYPE(RTVOBJ) FILE(PLA8REP)           AB1291790;
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(DTL.Producer_Subsidiary_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF DB1.RS Record Status is Active
 IF DB1.RS_Record_Status = 'A';

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 ENDIF;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Producer Subsidiary NotFn'
ERROR(PRK1216);
MSGPARM(DTL.Producer_Subsidiary_Code);

ENDIF;

ENDIF;

//?F4  on Defects
DO;

CASE;

// IF PGM.*Cursor field <IS> DTL.Defect User  1
IF PGM.*Cursor_field = DTL.Defect_User_1;

// AND DTL.*CMD key is *Prompt
AND DTL.*CMD_key = '04';

// Call program Sel Hog Defect        SR.
CALL PROGRAM(Sel Hog Defect        SR) ('PKCWSRR');
PARAMETER(DTL.Defect_User_1);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF PGM.*Cursor field <IS> DTL.Defect User  2
IF PGM.*Cursor_field = DTL.Defect_User_2;

// AND DTL.*CMD key is *Prompt
AND DTL.*CMD_key = '04';

// Call program Sel Hog Defect        SR.
CALL PROGRAM(Sel Hog Defect        SR) ('PKCWSRR');
PARAMETER(DTL.Defect_User_2);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF PGM.*Cursor field <IS> DTL.Defect User  3
IF PGM.*Cursor_field = DTL.Defect_User_3;

// AND DTL.*CMD key is *Prompt
AND DTL.*CMD_key = '04';

// Call program Sel Hog Defect        SR.
CALL PROGRAM(Sel Hog Defect        SR) ('PKCWSRR');
PARAMETER(DTL.Defect_User_3);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF PGM.*Cursor field <IS> DTL.Defect User  4
IF PGM.*Cursor_field = DTL.Defect_User_4;

// AND DTL.*CMD key is *Prompt
AND DTL.*CMD_key = '04';

// Call program Sel Hog Defect        SR.
CALL PROGRAM(Sel Hog Defect        SR) ('PKCWSRR');
PARAMETER(DTL.Defect_User_4);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF PGM.*Cursor field <IS> DTL.Defect User  5
IF PGM.*Cursor_field = DTL.Defect_User_5;

// AND DTL.*CMD key is *Prompt
AND DTL.*CMD_key = '04';

// Call program Sel Hog Defect        SR.
CALL PROGRAM(Sel Hog Defect        SR) ('PKCWSRR');
PARAMETER(DTL.Defect_User_5);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF PGM.*Cursor field <IS> DTL.Defect User  6
IF PGM.*Cursor_field = DTL.Defect_User_6;

// AND DTL.*CMD key is *Prompt
AND DTL.*CMD_key = '04';

// Call program Sel Hog Defect        SR.
CALL PROGRAM(Sel Hog Defect        SR) ('PKCWSRR');
PARAMETER(DTL.Defect_User_6);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF PGM.*Cursor field <IS> DTL.Defect User  7
IF PGM.*Cursor_field = DTL.Defect_User_7;

// AND DTL.*CMD key is *Prompt
AND DTL.*CMD_key = '04';

// Call program Sel Hog Defect        SR.
CALL PROGRAM(Sel Hog Defect        SR) ('PKCWSRR');
PARAMETER(DTL.Defect_User_7);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF PGM.*Cursor field <IS> DTL.Defect User  8
IF PGM.*Cursor_field = DTL.Defect_User_8;

// AND DTL.*CMD key is *Prompt
AND DTL.*CMD_key = '04';

// Call program Sel Hog Defect        SR.
CALL PROGRAM(Sel Hog Defect        SR) ('PKCWSRR');
PARAMETER(DTL.Defect_User_8);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF PGM.*Cursor field <IS> DTL.Defect User  9
IF PGM.*Cursor_field = DTL.Defect_User_9;

// AND DTL.*CMD key is *Prompt
AND DTL.*CMD_key = '04';

// Call program Sel Hog Defect        SR.
CALL PROGRAM(Sel Hog Defect        SR) ('PKCWSRR');
PARAMETER(DTL.Defect_User_9);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF PGM.*Cursor field <IS> DTL.Defect User 10
IF PGM.*Cursor_field = DTL.Defect_User_10;

// AND DTL.*CMD key is *Prompt
AND DTL.*CMD_key = '04';

// Call program Sel Hog Defect        SR.
CALL PROGRAM(Sel Hog Defect        SR) ('PKCWSRR');
PARAMETER(DTL.Defect_User_10);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDDO;

//?Validate Defects & bring back classification
CASE;

// IF WRK.HC Defect Required is Yes
IF WRK.HC_Defect_Required = 'Y';

// OR DTL.Defect User  1 is Entered
OR DTL.Defect_User_1 <> *BLANK;

// OR DTL.Defect User  2 is Entered
OR DTL.Defect_User_2 <> *BLANK;

// OR DTL.Defect User  3 is Entered
OR DTL.Defect_User_3 <> *BLANK;

// OR DTL.Defect User  4 is Entered
OR DTL.Defect_User_4 <> *BLANK;

// OR DTL.Defect User  5 is Entered
OR DTL.Defect_User_5 <> *BLANK;

// OR DTL.Defect User  6 is Entered
OR DTL.Defect_User_6 <> *BLANK;

// OR DTL.Defect User  7 is Entered
OR DTL.Defect_User_7 <> *BLANK;

// OR DTL.Defect User  8 is Entered
OR DTL.Defect_User_8 <> *BLANK;

// OR DTL.Defect User  9 is Entered
OR DTL.Defect_User_9 <> *BLANK;

// OR DTL.Defect User 10 is Entered
OR DTL.Defect_User_10 <> *BLANK;

//?Val def 1
CASE;

// IF DTL.Defect User  1 NE WRK.Blank Usr 1 fld Usr
IF DTL.Defect_User_1 <> WRK.Blank_Usr_1_fld_Usr;

EXECUTE FUNCTION(Val Hog Defect&CLS    RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1287270;
PARAMETER(DTL.Defect_User_1);
PARAMETER(DTL.Class_Df_1_Usr);
PARAMETER(WRK.*Return_code);
{
 //?USER: Processing if Data record not found

 // PAR.*Return code = CND.*Record does not exist
 PAR.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.*Return code = CND.Record Found
 PAR.*Return_code = 999;

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.*Return code is Record Found
IF WRK.*Return_code = '999';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Tattoo Defect Not Found'
ERROR(PRK0752);
MSGPARM(DTL.Defect_User_1);

ENDIF;

ENDIF;

//?Val def 2
CASE;

// IF DTL.Defect User  2 NE WRK.Blank Usr 1 fld Usr
IF DTL.Defect_User_2 <> WRK.Blank_Usr_1_fld_Usr;

EXECUTE FUNCTION(Val Hog Defect&CLS    RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1287270;
PARAMETER(DTL.Defect_User_2);
PARAMETER(DTL.Class_Df_2_Usr);
PARAMETER(WRK.*Return_code);
{
 //?USER: Processing if Data record not found

 // PAR.*Return code = CND.*Record does not exist
 PAR.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.*Return code = CND.Record Found
 PAR.*Return_code = 999;

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.*Return code is Record Found
IF WRK.*Return_code = '999';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Tattoo Defect Not Found'
ERROR(PRK0752);
MSGPARM(DTL.Defect_User_2);

ENDIF;

ENDIF;

//?Val def 3
CASE;

// IF DTL.Defect User  3 NE WRK.Blank Usr 1 fld Usr
IF DTL.Defect_User_3 <> WRK.Blank_Usr_1_fld_Usr;

EXECUTE FUNCTION(Val Hog Defect&CLS    RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1287270;
PARAMETER(DTL.Defect_User_3);
PARAMETER(DTL.Class_Df_3_Usr);
PARAMETER(WRK.*Return_code);
{
 //?USER: Processing if Data record not found

 // PAR.*Return code = CND.*Record does not exist
 PAR.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.*Return code = CND.Record Found
 PAR.*Return_code = 999;

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.*Return code is Record Found
IF WRK.*Return_code = '999';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Tattoo Defect Not Found'
ERROR(PRK0752);
MSGPARM(DTL.Defect_User_3);

ENDIF;

ENDIF;

//?Val def 4
CASE;

// IF DTL.Defect User  4 NE WRK.Blank Usr 1 fld Usr
IF DTL.Defect_User_4 <> WRK.Blank_Usr_1_fld_Usr;

EXECUTE FUNCTION(Val Hog Defect&CLS    RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1287270;
PARAMETER(DTL.Defect_User_4);
PARAMETER(DTL.Class_Df_4_Usr);
PARAMETER(WRK.*Return_code);
{
 //?USER: Processing if Data record not found

 // PAR.*Return code = CND.*Record does not exist
 PAR.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.*Return code = CND.Record Found
 PAR.*Return_code = 999;

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.*Return code is Record Found
IF WRK.*Return_code = '999';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Tattoo Defect Not Found'
ERROR(PRK0752);
MSGPARM(DTL.Defect_User_4);

ENDIF;

ENDIF;

//?Val def 5
CASE;

// IF DTL.Defect User  5 NE WRK.Blank Usr 1 fld Usr
IF DTL.Defect_User_5 <> WRK.Blank_Usr_1_fld_Usr;

EXECUTE FUNCTION(Val Hog Defect&CLS    RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1287270;
PARAMETER(DTL.Defect_User_5);
PARAMETER(DTL.Class_Df_5_Usr);
PARAMETER(WRK.*Return_code);
{
 //?USER: Processing if Data record not found

 // PAR.*Return code = CND.*Record does not exist
 PAR.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.*Return code = CND.Record Found
 PAR.*Return_code = 999;

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.*Return code is Record Found
IF WRK.*Return_code = '999';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Tattoo Defect Not Found'
ERROR(PRK0752);
MSGPARM(DTL.Defect_User_5);

ENDIF;

ENDIF;

//?Val def 6
CASE;

// IF DTL.Defect User  6 NE WRK.Blank Usr 1 fld Usr
IF DTL.Defect_User_6 <> WRK.Blank_Usr_1_fld_Usr;

EXECUTE FUNCTION(Val Hog Defect&CLS    RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1287270;
PARAMETER(DTL.Defect_User_6);
PARAMETER(DTL.Class_Df_6_Usr);
PARAMETER(WRK.*Return_code);
{
 //?USER: Processing if Data record not found

 // PAR.*Return code = CND.*Record does not exist
 PAR.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.*Return code = CND.Record Found
 PAR.*Return_code = 999;

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.*Return code is Record Found
IF WRK.*Return_code = '999';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Tattoo Defect Not Found'
ERROR(PRK0752);
MSGPARM(DTL.Defect_User_6);

ENDIF;

ENDIF;

//?Val def 7
CASE;

// IF DTL.Defect User  7 NE WRK.Blank Usr 1 fld Usr
IF DTL.Defect_User_7 <> WRK.Blank_Usr_1_fld_Usr;

EXECUTE FUNCTION(Val Hog Defect&CLS    RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1287270;
PARAMETER(DTL.Defect_User_7);
PARAMETER(DTL.Class_Df_7_Usr);
PARAMETER(WRK.*Return_code);
{
 //?USER: Processing if Data record not found

 // PAR.*Return code = CND.*Record does not exist
 PAR.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.*Return code = CND.Record Found
 PAR.*Return_code = 999;

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.*Return code is Record Found
IF WRK.*Return_code = '999';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Tattoo Defect Not Found'
ERROR(PRK0752);
MSGPARM(DTL.Defect_User_7);

ENDIF;

ENDIF;

//?Val def 8
CASE;

// IF DTL.Defect User  8 NE WRK.Blank Usr 1 fld Usr
IF DTL.Defect_User_8 <> WRK.Blank_Usr_1_fld_Usr;

EXECUTE FUNCTION(Val Hog Defect&CLS    RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1287270;
PARAMETER(DTL.Defect_User_8);
PARAMETER(DTL.Class_Df_8_Usr);
PARAMETER(WRK.*Return_code);
{
 //?USER: Processing if Data record not found

 // PAR.*Return code = CND.*Record does not exist
 PAR.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.*Return code = CND.Record Found
 PAR.*Return_code = 999;

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.*Return code is Record Found
IF WRK.*Return_code = '999';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Tattoo Defect Not Found'
ERROR(PRK0752);
MSGPARM(DTL.Defect_User_8);

ENDIF;

ENDIF;

//?Val def 9
CASE;

// IF DTL.Defect User  9 NE WRK.Blank Usr 1 fld Usr
IF DTL.Defect_User_9 <> WRK.Blank_Usr_1_fld_Usr;

EXECUTE FUNCTION(Val Hog Defect&CLS    RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1287270;
PARAMETER(DTL.Defect_User_9);
PARAMETER(DTL.Class_Df_9_Usr);
PARAMETER(WRK.*Return_code);
{
 //?USER: Processing if Data record not found

 // PAR.*Return code = CND.*Record does not exist
 PAR.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.*Return code = CND.Record Found
 PAR.*Return_code = 999;

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.*Return code is Record Found
IF WRK.*Return_code = '999';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Tattoo Defect Not Found'
ERROR(PRK0752);
MSGPARM(DTL.Defect_User_9);

ENDIF;

ENDIF;

//?Val def 10
CASE;

// IF DTL.Defect User 10 NE WRK.Blank Usr 1 fld Usr
IF DTL.Defect_User_10 <> WRK.Blank_Usr_1_fld_Usr;

EXECUTE FUNCTION(Val Hog Defect&CLS    RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1287270;
PARAMETER(DTL.Defect_User_10);
PARAMETER(DTL.Class_Df_10_Usr);
PARAMETER(WRK.*Return_code);
{
 //?USER: Processing if Data record not found

 // PAR.*Return code = CND.*Record does not exist
 PAR.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.*Return code = CND.Record Found
 PAR.*Return_code = 999;

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.*Return code is Record Found
IF WRK.*Return_code = '999';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Tattoo Defect Not Found'
ERROR(PRK0752);
MSGPARM(DTL.Defect_User_10);

ENDIF;

ENDIF;

CASE;

// IF WRK.HC Defect Required is Yes
IF WRK.HC_Defect_Required = 'Y';

//?Validation of defects
CASE;

// IF DTL.Defect User  1 NE WRK.Blank Usr 1 fld Usr
IF DTL.Defect_User_1 <> WRK.Blank_Usr_1_fld_Usr;

//?Validation of defects
// IF DTL.Defect User  2 NE WRK.Blank Usr 1 fld Usr
IF DTL.Defect_User_2 <> WRK.Blank_Usr_1_fld_Usr;

//?Validation of defects
// IF DTL.Defect User  3 NE WRK.Blank Usr 1 fld Usr
IF DTL.Defect_User_3 <> WRK.Blank_Usr_1_fld_Usr;

//?Validation of defects
// IF DTL.Defect User  4 NE WRK.Blank Usr 1 fld Usr
IF DTL.Defect_User_4 <> WRK.Blank_Usr_1_fld_Usr;

//?Validation of defects
// IF DTL.Defect User  5 NE WRK.Blank Usr 1 fld Usr
IF DTL.Defect_User_5 <> WRK.Blank_Usr_1_fld_Usr;

//?Validation of defects
// IF DTL.Defect User  6 NE WRK.Blank Usr 1 fld Usr
IF DTL.Defect_User_6 <> WRK.Blank_Usr_1_fld_Usr;

//?Validation of defects
// IF DTL.Defect User  7 NE WRK.Blank Usr 1 fld Usr
IF DTL.Defect_User_7 <> WRK.Blank_Usr_1_fld_Usr;

//?Validation of defects
// IF DTL.Defect User  8 NE WRK.Blank Usr 1 fld Usr
IF DTL.Defect_User_8 <> WRK.Blank_Usr_1_fld_Usr;

//?Validation of defects
// IF DTL.Defect User  9 NE WRK.Blank Usr 1 fld Usr
IF DTL.Defect_User_9 <> WRK.Blank_Usr_1_fld_Usr;

//?Validation of defects
// IF DTL.Defect User 10 NE WRK.Blank Usr 1 fld Usr
IF DTL.Defect_User_10 <> WRK.Blank_Usr_1_fld_Usr;

//?Validation of defects
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Defect required for Class Code.'
ERROR(PRK0357);

ENDIF;

ENDIF;

ENDIF;

//?Validate class code against class type.
CASE;

// IF WRK.TH Hog Class Type NE DTL.TH Hog Class Type
IF WRK.TH_Hog_Class_Type <> DTL.TH_Hog_Class_Type;

// Send error message - 'Class code &2 invalid for class type &1'
ERROR(PRK0601);
MSGPARM(DTL.TH_Hog_Class_Type);
MSGPARM(DTL.HC_Class_Code);

ENDIF;

//?Prompt on Pen
CASE;

// IF WRK.Display Output Only 2 USR is No
IF WRK.Display_Output_Only_2_USR = 'N';

//?F4  on Pen
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Pen Number
IF PGM.*Cursor_field = DTL.Pen_Number;

// Call program Sel Pen Open/Hc Type  SR.
CALL PROGRAM(Sel Pen Open/Hc Type  SR) ('PKJWSRR');
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.Pen_Number);
PARAMETER(DTL.TH_Hog_Class_Type);

ENDIF;

ENDIF;

ENDIF;

//?Validate Load Shipped head   *
CASE;

// IF DTL.BOL Load Shipped Head is *Zeros
IF DTL.BOL_Shipped_Head = *ZERO;

// Send error message - 'Enter Head On BOL'
ERROR(PRK0911);
MSGPARM(DTL.BOL_Shipped_Head);

//?Validate Load Shipped head   *
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.BOL Shipped Head is GT 250
IF DTL.BOL_Shipped_Head > 265;

// Send error message - 'Head cannot exceed 250.'
ERROR(PRK0774);

ENDIF;

ENDIF;

//?Rtv EDI Trading Prt#
CASE;

// IF DTL.TH Source Type is External
IF DTL.TH_Source_Type = 'E';

EXECUTE FUNCTION(Rtv EDI Trading Prt#  RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1200949;
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(WRK.PD_EDI_Trading_Partner_#);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?** Don't exchange the screen field and the hidden state field
//?** Just use the screen state field.      03/07/2006 LJB
// LCL.Return Code USR = WRK.Blank USR
LCL.Return_Code_USR = WRK.Blank_USR;

CASE;

// IF DTL.TH Source Type is Internal
IF DTL.TH_Source_Type = 'I';

// AND DTL.TH HPS Movement Ref # is Not entered
AND DTL.TH_HPS_Movement_Ref_# = *ZERO;

// DTL.State Desc 15 USR = CON.*BLANK
DTL.State_Desc_15_USR = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Rtv State Description UP.
CALL PROGRAM(Rtv State Description UP) ('STATERET');
PARAMETER(LCL.Return_Code_USR);
PARAMETER(DTL.TH_State);
PARAMETER(DTL.State_Desc_15_USR);

//?Invalid state code send message
CASE;

// IF LCL.Return Code USR is *Normal
IF LCL.Return_Code_USR = *BLANK;

//?Invalid state code send message
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'State Code is Invalid'
ERROR(PRK0308);
MSGPARM(DTL.TH_State);

ENDIF;

//?Invalid state code send message if state code is blank
CASE;

// IF DTL.TH State is Entered
IF DTL.TH_State <> *BLANK;

//?Invalid state code send message if state code is blank
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'State Code is Invalid'
ERROR(PRK0308);
MSGPARM(DTL.TH_State);

ENDIF;

ENDIF;

//?Validate live price and UOM
CASE;

// IF DTL.TH Payment Sts is Paid Producer
IF DTL.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

//?Validate live price and UOM
// IF *OTHERWISE
IF *OTHERWISE;

//?Validate live price and live price UOM
CASE;

// IF DTL.TH Live Purchase Price is Not Zeros
IF DTL.TH_Live_Purchase_Price <> *ZERO;

// OR DTL.TH Live Purchase UOM NE WRK.Blank USR
OR DTL.TH_Live_Purchase_UOM <> WRK.Blank_USR;

CASE;

// IF DTL.TH Live Purchase UOM EQ WRK.Blank USR
IF DTL.TH_Live_Purchase_UOM = WRK.Blank_USR;

// Send error message - 'Live Price UOM is required if Live Price is entered.'
ERROR(PRK0382);

ENDIF;

ENDIF;

ENDIF;

//?Rsl/Int -- Sum Defect hd for Head Total Usr
CASE;

// IF WRK.@Status Internal (Y/N) is Yes
IF WRK.@Status_Internal_Y_N = 'Y';

//? Sum head up to HD RCVD if there arent any Scale Wgt Req defects
EXECUTE FUNCTION(Chk Def Scale Wt Req  IF) TYPE(EXCINTFUN)                      AB1205985;
PARAMETER(DTL.Defect_User_1);
PARAMETER(DTL.Defect_User_2);
PARAMETER(DTL.Defect_User_3);
PARAMETER(DTL.Defect_User_4);
PARAMETER(DTL.Defect_User_5);
PARAMETER(DTL.Defect_User_6);
PARAMETER(DTL.Defect_User_7);
PARAMETER(DTL.Defect_User_8);
PARAMETER(DTL.Defect_User_9);
PARAMETER(DTL.Defect_User_10);
PARAMETER(WRK.Scale_Wt_Required_USR);
{
 //?Execute internal function

 //?If any defect has scale weight required, quit checking the defects.
 // PAR.Scale Wt Required     USR = CND.No
 PAR.Scale_Wt_Required_USR = 'N';

 CASE;

 // IF PAR.Defect User  1 NE WRK.Blank USR
 IF PAR.Defect_User_1 <> WRK.Blank_USR;

 EXECUTE FUNCTION(Rtv Scale Wt Req      RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1205986;
 PARAMETER(PAR.Defect_User_1);
 PARAMETER(WRK.DF_Scale_Weight_Required);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.DF Scale Weight Required is Yes
 IF WRK.DF_Scale_Weight_Required = 'Y';

 // PAR.Scale Wt Required     USR = CND.Yes
 PAR.Scale_Wt_Required_USR = 'Y';

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Defect User  2 NE WRK.Blank USR
 IF PAR.Defect_User_2 <> WRK.Blank_USR;

 EXECUTE FUNCTION(Rtv Scale Wt Req      RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1205986;
 PARAMETER(PAR.Defect_User_2);
 PARAMETER(WRK.DF_Scale_Weight_Required);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.DF Scale Weight Required is Yes
 IF WRK.DF_Scale_Weight_Required = 'Y';

 // PAR.Scale Wt Required     USR = CND.Yes
 PAR.Scale_Wt_Required_USR = 'Y';

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Defect User  3 NE WRK.Blank USR
 IF PAR.Defect_User_3 <> WRK.Blank_USR;

 EXECUTE FUNCTION(Rtv Scale Wt Req      RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1205986;
 PARAMETER(PAR.Defect_User_3);
 PARAMETER(WRK.DF_Scale_Weight_Required);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.DF Scale Weight Required is Yes
 IF WRK.DF_Scale_Weight_Required = 'Y';

 // PAR.Scale Wt Required     USR = CND.Yes
 PAR.Scale_Wt_Required_USR = 'Y';

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Defect User  4 NE WRK.Blank USR
 IF PAR.Defect_User_4 <> WRK.Blank_USR;

 EXECUTE FUNCTION(Rtv Scale Wt Req      RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1205986;
 PARAMETER(PAR.Defect_User_4);
 PARAMETER(WRK.DF_Scale_Weight_Required);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.DF Scale Weight Required is Yes
 IF WRK.DF_Scale_Weight_Required = 'Y';

 // PAR.Scale Wt Required     USR = CND.Yes
 PAR.Scale_Wt_Required_USR = 'Y';

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Defect User  5 NE WRK.Blank USR
 IF PAR.Defect_User_5 <> WRK.Blank_USR;

 EXECUTE FUNCTION(Rtv Scale Wt Req      RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1205986;
 PARAMETER(PAR.Defect_User_5);
 PARAMETER(WRK.DF_Scale_Weight_Required);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.DF Scale Weight Required is Yes
 IF WRK.DF_Scale_Weight_Required = 'Y';

 // PAR.Scale Wt Required     USR = CND.Yes
 PAR.Scale_Wt_Required_USR = 'Y';

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Defect User  6 NE WRK.Blank USR
 IF PAR.Defect_User_6 <> WRK.Blank_USR;

 EXECUTE FUNCTION(Rtv Scale Wt Req      RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1205986;
 PARAMETER(PAR.Defect_User_6);
 PARAMETER(WRK.DF_Scale_Weight_Required);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.DF Scale Weight Required is Yes
 IF WRK.DF_Scale_Weight_Required = 'Y';

 // PAR.Scale Wt Required     USR = CND.Yes
 PAR.Scale_Wt_Required_USR = 'Y';

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Defect User  7 NE WRK.Blank USR
 IF PAR.Defect_User_7 <> WRK.Blank_USR;

 EXECUTE FUNCTION(Rtv Scale Wt Req      RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1205986;
 PARAMETER(PAR.Defect_User_7);
 PARAMETER(WRK.DF_Scale_Weight_Required);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.DF Scale Weight Required is Yes
 IF WRK.DF_Scale_Weight_Required = 'Y';

 // PAR.Scale Wt Required     USR = CND.Yes
 PAR.Scale_Wt_Required_USR = 'Y';

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Defect User  8 NE WRK.Blank USR
 IF PAR.Defect_User_8 <> WRK.Blank_USR;

 EXECUTE FUNCTION(Rtv Scale Wt Req      RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1205986;
 PARAMETER(PAR.Defect_User_8);
 PARAMETER(WRK.DF_Scale_Weight_Required);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.DF Scale Weight Required is Yes
 IF WRK.DF_Scale_Weight_Required = 'Y';

 // PAR.Scale Wt Required     USR = CND.Yes
 PAR.Scale_Wt_Required_USR = 'Y';

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Defect User  9 NE WRK.Blank USR
 IF PAR.Defect_User_9 <> WRK.Blank_USR;

 EXECUTE FUNCTION(Rtv Scale Wt Req      RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1205986;
 PARAMETER(PAR.Defect_User_9);
 PARAMETER(WRK.DF_Scale_Weight_Required);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.DF Scale Weight Required is Yes
 IF WRK.DF_Scale_Weight_Required = 'Y';

 // PAR.Scale Wt Required     USR = CND.Yes
 PAR.Scale_Wt_Required_USR = 'Y';

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Defect User 10 NE WRK.Blank USR
 IF PAR.Defect_User_10 <> WRK.Blank_USR;

 EXECUTE FUNCTION(Rtv Scale Wt Req      RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1205986;
 PARAMETER(PAR.Defect_User_10);
 PARAMETER(WRK.DF_Scale_Weight_Required);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.DF Scale Weight Required is Yes
 IF WRK.DF_Scale_Weight_Required = 'Y';

 // PAR.Scale Wt Required     USR = CND.Yes
 PAR.Scale_Wt_Required_USR = 'Y';

 ENDIF;

 ENDIF;

}


//?If Defect Scale Weight is Required or Sts is Spread dont calc head total
CASE;

// IF WRK.Scale Wt Required     USR is Yes
IF WRK.Scale_Wt_Required_USR = 'Y';

//?In CHANGE mode, a "M"ark for future spread cant be changed to lite/hvy
CASE;

// IF DTL.TH Resale Spread Sts is Mark for Future Sprd Wgt
IF DTL.TH_Resale_Spread_Sts = 'M';

// AND PGM.*Program mode is *CHANGE
AND PGM.*Program_mode = 'CHG';

// Send error message - 'Scale Wgt Required defect not allowed on tattoo CREATED wo/ them. Press Hel
ERROR(PRK0779);

//?In CHANGE mode, a "M"ark for future spread cant be changed to lite/hvy
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Head Total USR = CON.*ZERO
DTL.Head_Total_USR = *ZERO;

// DTL.Pen Number = CND.Pen Number is Empty
DTL.Pen_Number = *BLANK;

// WRK.Display Output Only 2 USR = CND.Yes
WRK.Display_Output_Only_2_USR = 'Y';

ENDIF;

//?If Defect Scale Weight is Required or Sts is Spread dont calc head total
// IF *OTHERWISE
IF *OTHERWISE;

//?Check Resale Spread Status
CASE;

// IF DTL.TH Resale Spread Sts is Spread
IF DTL.TH_Resale_Spread_Sts = 'P';

//?Check Resale Spread Status
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.TH Resale Spread Sts = CND.Mark for Future Sprd Wgt
DTL.TH_Resale_Spread_Sts = 'M';

// WRK.Display Output Only 2 USR = CND.No
WRK.Display_Output_Only_2_USR = 'N';

// Rsl/Int-- Sum Defect head
DTL.Head_Total_USR = ( ( ( ( ( ( ( ( DTL.Defect_HD_user_1 + DTL.Defect_HD_user_2 )                 +
+ DTL.Defect_HD_user_3 ) + DTL.Defect_HD_user_4 ) + DTL.Defect_HD_user_5 )                        +
+ DTL.Defect_HD_user_6 ) + DTL.Defect_HD_user_7 ) + DTL.Defect_HD_user_8 )                        +
+ DTL.Defect_HD_user_9 ) + DTL.Defect_HD_user_10;

ENDIF;

//?Validate Pen
CASE;

// IF DTL.Pen Number is Pen Number is Empty
IF DTL.Pen_Number = *BLANK;

// AND DTL.TH Resale Spread Sts is Mark for Future Sprd Wgt
AND DTL.TH_Resale_Spread_Sts = 'M';

// Send error message - 'Pen is required for internal resale tattoo with no scale wgt required defec
ERROR(PRK0780);
MSGPARM(DTL.Pen_Number);

// IF *OTHERWISE
IF *OTHERWISE;

//?Validate Pen if not Empty.
CASE;

// IF DTL.Pen Number is Pen Number not Empty
IF DTL.Pen_Number > *BLANK;

// WRK.Pen Type = WRK.Blank USR
WRK.Pen_Type = WRK.Blank_USR;

EXECUTE FUNCTION(Rtv Val Pen,Type      RT) TYPE(RTVOBJ) FILE(PKA3REP)           AB1170306;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.Pen_Number);
PARAMETER(WRK.Pen_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.Pen Type is Resale
IF WRK.Pen_Type = 'R';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF WRK.Pen Type EQ WRK.Blank USR
IF WRK.Pen_Type = WRK.Blank_USR;

// Send error message - 'Pen not found.'
ERROR(PRK0065);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Pen &1 type &3 not the same as the tattoo class type &2.'
ERROR(PRK0606);
MSGPARM(DTL.Pen_Number);
MSGPARM(DTL.TH_Hog_Class_Type);
MSGPARM(WRK.Pen_Type);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Int -- Val Movement & Grp Refs If Not Mtech,If Mtech No validation
CASE;

// IF DTL.TH Source Type is Internal
IF DTL.TH_Source_Type = 'I';

// AND LCL.MTech Live Yes or No is No MTech not Live
AND LCL.MTech_Live_Yes_or_No = 'N';

//?Validate Movement Reference Number
CASE;

// IF DTL.TH HPS Movement Ref # EQ WRK.Zero USR
IF DTL.TH_HPS_Movement_Ref_# = WRK.Zero_USR;

// Send information message - 'Movement Reference is invalid.  Press enter to override.'
MESSAGE(PRK0535 *INFO);

//?Validate Movement Reference Number
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Z1l HPS Movement Rfrn UP.
CALL PROGRAM(Z1l HPS Movement Rfrn UP) ('HP251');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(DTL.TH_HPS_Movement_Ref_#);
PARAMETER(WRK.Scheduled_Kill_Dt_8_0_USR);
PARAMETER(WRK.BOL_Shipped_Head);

CASE;

// IF DTL.BOL Shipped Head is *Zeros
IF DTL.BOL_Shipped_Head = *ZERO;

// LCL.BOL Shipped Head = WRK.BOL Shipped Head
LCL.BOL_Shipped_Head = WRK.BOL_Shipped_Head;

ENDIF;

CASE;

// IF WRK.Return Code USR is HPS Movement Rfrnc Err 1
IF WRK.Return_Code_USR = 'HPSM1';

// Send information message - 'Movement Reference is invalid.  Press enter to override.'
MESSAGE(PRK0535 *INFO);

ENDIF;

ENDIF;

CASE;

// IF DTL.TH HPS Movement Ref # NE WRK.TH HPS Movement Ref #
IF DTL.TH_HPS_Movement_Ref_# <> WRK.TH_HPS_Movement_Ref_#;

// WRK.TH HPS Movement Ref # = DTL.TH HPS Movement Ref #
WRK.TH_HPS_Movement_Ref_# = DTL.TH_HPS_Movement_Ref_#;

ENDIF;

//?Int -- Val Movement & Grp Refs If Not Mtech,If Mtech No validation
// IF DTL.TH Source Type is Internal
IF DTL.TH_Source_Type = 'I';

// AND LCL.MTech Live Yes or No is Yes MTech is Live
AND LCL.MTech_Live_Yes_or_No = 'Y';

CASE;

// IF DTL.TH HPS Movement Ref # NE WRK.TH HPS Movement Ref #
IF DTL.TH_HPS_Movement_Ref_# <> WRK.TH_HPS_Movement_Ref_#;

// WRK.TH HPS Movement Ref # = DTL.TH HPS Movement Ref #
WRK.TH_HPS_Movement_Ref_# = DTL.TH_HPS_Movement_Ref_#;

ENDIF;

ENDIF;

//?If Tattoo not already paid, set up payment sts
CASE;

// IF DTL.TH Payment Sts is Paid Producer
IF DTL.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

//?If Tattoo not already paid, set up payment sts
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv BOH Pay Type      RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1134737;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(WRK.BOH_Payment_Type);
PARAMETER(WRK.BOH_Buy_Order_Type);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.BOH_Payment_Type = 'L';

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.BOH_Buy_Order_Type = 'O';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Set Payment Status
CASE;

// IF DTL.TH Live Purchase UOM is Live Payment
IF DTL.TH_Live_Purchase_UOM = 'FL'/'LW'/'NH'/'NL'/'SW'/'LX'/'SX';

//?Internal or External Live
CASE;

// IF WRK.BOH Buy Order Type is Internal
IF WRK.BOH_Buy_Order_Type = 'I';

// DTL.TH Payment Sts = CND.Sl Int Live
DTL.TH_Payment_Sts = 'IL';

//?Internal or External Live
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.TH Payment Sts = CND.Select Live
DTL.TH_Payment_Sts = 'SL';

ENDIF;

//?Set Payment Status
// IF DTL.TH Hog Class Type is Not Market
IF DTL.TH_Hog_Class_Type = 'R'/'S';

//?Live - Internal or External
CASE;

// IF WRK.BOH Buy Order Type is Internal
IF WRK.BOH_Buy_Order_Type = 'I';

// DTL.TH Payment Sts = CND.Sl Int Live
DTL.TH_Payment_Sts = 'IL';

//?Live - Internal or External
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.TH Payment Sts = CND.Select Live
DTL.TH_Payment_Sts = 'SL';

ENDIF;

//?Set Payment Status
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF WRK.BOH Payment Type is Carcass Merit
IF WRK.BOH_Payment_Type = 'C';

//?Carcass Merit - Internal or External
CASE;

// IF WRK.BOH Buy Order Type is Internal
IF WRK.BOH_Buy_Order_Type = 'I';

// DTL.TH Payment Sts = CND.Sl Int Carc
DTL.TH_Payment_Sts = 'IC';

//?Carcass Merit - Internal or External
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.TH Payment Sts = CND.Sl Carcass Merit
DTL.TH_Payment_Sts = 'SC';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//?Live - Internal or External
CASE;

// IF WRK.BOH Buy Order Type is Internal
IF WRK.BOH_Buy_Order_Type = 'I';

// DTL.TH Payment Sts = CND.Sl Int Live
DTL.TH_Payment_Sts = 'IL';

//?Live - Internal or External
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.TH Payment Sts = CND.Select Live
DTL.TH_Payment_Sts = 'SL';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

EXECUTE FUNCTION(Rtv Std Time,buyer    RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1122902;
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(WRK.PD_Std_Delv_Time);
PARAMETER(WRK.PD_Std_Truck_Size);
PARAMETER(WRK.PD_Freight_Exp_Paid_By);
PARAMETER(WRK.SR_Source_Code);
PARAMETER(DTL.HB_Buyer_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?CALC: Detail screen function fields

// DTL.TH Live Purch UOM  Usr = Condition name of DTL.TH Live Purchase UOM
DTL.TH_Live_Purch_UOM_Usr = RTVCND(DTL.TH_Live_Purchase_UOM);

// DTL.Sex Desc Usr = Condition name of DTL.TH Sex
DTL.Sex_Desc_Usr = RTVCND(DTL.TH_Sex);

EXECUTE FUNCTION(Rtv Hog Defect Desc   RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1127787;
PARAMETER(DTL.DF_Defect_Code);
PARAMETER(DTL.DF_Description);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.DF_Description = WRK.Blank_USR;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.Ship Wgt Allow Ent Usr = CND.Yes
WRK.Ship_Wgt_Allow_Ent_Usr = 'Y';

//?Test of allow ship weight to be input/output
CASE;

// IF DTL.TH Payment Sts is Paid Anything
IF DTL.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

// WRK.Ship Wgt Allow Ent Usr = CND.No
WRK.Ship_Wgt_Allow_Ent_Usr = 'N';

//?Test of allow ship weight to be input/output
// IF DTL.TH Held Over is greater than 0
IF DTL.TH_Held_Over > *ZERO;

// WRK.Ship Wgt Allow Ent Usr = CND.No
WRK.Ship_Wgt_Allow_Ent_Usr = 'N';

//?Test of allow ship weight to be input/output
// IF DTL.TH Held Over Record is Yes
IF DTL.TH_Held_Over_Record = 'Y';

// WRK.Ship Wgt Allow Ent Usr = CND.No
WRK.Ship_Wgt_Allow_Ent_Usr = 'N';

// WRK.Held Over Records Y/N = CND.Yes
WRK.Held_Over_Records_Y_N = 'Y';

ENDIF;

//?Test of held over quanity
CASE;

// IF DTL.TH Held Over is greater than 0
IF DTL.TH_Held_Over > *ZERO;

// WRK.Held Over Records Y/N = CND.Yes
WRK.Held_Over_Records_Y_N = 'Y';

ENDIF;

//?E11288 JJH 07/25/17 - Display Output Only 7 USR for Shipped Weight
//?Set Display Output Only 7 USR
CASE;

// IF WRK.Ship Wgt Allow Ent Usr is No
IF WRK.Ship_Wgt_Allow_Ent_Usr = 'N';

// OR LCL.Allow Tattoo to be Edited is No
OR LCL.Allow_Tattoo_to_be_Edited = 'N';

// LCL.Display Output Only 7 USR = CND.Yes
LCL.Display_Output_Only_7_USR = 'Y';

ENDIF;

//?USER: Validate detail screen relations

CASE;

// IF DTL.*CMD key is CF03
IF DTL.*CMD_key = '03';

// AND DTL.*CMD key is *Add
AND DTL.*CMD_key = '09';

EXECUTE FUNCTION(Rtv and UnAssigned    RT) TYPE(RTVOBJ) FILE(PKFJCPP)           AB1272920;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Tattoo UnAssigned CH) TYPE(CHGOBJ) FILE(PKFJCPP)           AB1272910;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.TP_Tattoo_Date);
 PARAMETER(DB1.TP_Tattoo_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('P');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // Call program Rtv System Date & Tim UP.
   CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
   PARAMETER(PAR.RS_Date_Changed);
   PARAMETER(PAR.RS_Time_Changed);

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


QUIT;

ENDIF;

//?Shipped Weight Validation
CASE;

// IF DTL.TH Live Purchase UOM is Shipped Weight List
IF DTL.TH_Live_Purchase_UOM = 'SW'/'SX';

CASE;

// IF WRK.Held Over Records Y/N is Yes
IF WRK.Held_Over_Records_Y_N = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.TH Shipped Weight is Greater then Zero
IF DTL.TH_Shipped_Weight > *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Shipped Weight is Required for this unit of measure'
ERROR(PRK0653);
MSGPARM(DTL.TH_Shipped_Weight);

ENDIF;

ENDIF;

ENDIF;

//?Status
CASE;

// IF DTL.TH Payment Sts is Paid Producer
IF DTL.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

//?Status
// IF *OTHERWISE
IF *OTHERWISE;

//?If UOM or price changes, set Status to Recalulate net
CASE;

// IF DTL.TH Live Purchase UOM NE WRK.TH Live Purchase UOM
IF DTL.TH_Live_Purchase_UOM <> WRK.TH_Live_Purchase_UOM;

// OR DTL.TH Live Purchase Price NE WRK.TH Live Purchase Price
OR DTL.TH_Live_Purchase_Price <> WRK.TH_Live_Purchase_Price;

// DTL.TH Calc Net Sts = CND.Re-Calculate
DTL.TH_Calc_Net_Sts = 'R';

// DTL.TH Payment Type = WRK.Blank USR
DTL.TH_Payment_Type = WRK.Blank_USR;

ENDIF;

ENDIF;

//?Changes in ship information to require reprint of scale ticket
CASE;

// IF DTL.TH Shipped Weight NE WRK.TH Shipped Weight
IF DTL.TH_Shipped_Weight <> WRK.TH_Shipped_Weight;

// AND DTL.TH Live Purchase UOM is Shipped Weight List
AND DTL.TH_Live_Purchase_UOM = 'SW'/'SX';

// WRK.@Print Status = CND.Select for Print
WRK.@Print_Status = 'S';

ENDIF;

//?validation of Defects
DO;

//?Validate Class Type
DO;

//?val 1
CASE;

// IF DTL.Defect User  1 is Entered
IF DTL.Defect_User_1 <> *BLANK;

// Call program Val Market Defect     XF.
CALL PROGRAM(Val Market Defect     XF) ('PLL6XFR');
PARAMETER(DTL.Defect_User_1);
PARAMETER(DTL.Class_Df_1_Usr);
PARAMETER(DTL.TH_Hog_Class_Type);
PARAMETER(LCL.*Return_code);

CASE;

// IF LCL.*Return code is Error Found
IF LCL.*Return_code = 'ERROR';

// Send error message - 'Defect &2 Def Class &3 Not allow on Hog Type'
ERROR(PRK1197);
MSGPARM(PAR.TH_Hog_Class_Type);
MSGPARM(DTL.Defect_User_1);
MSGPARM(DTL.Class_Df_1_Usr);

ENDIF;

ENDIF;

//?val 2
CASE;

// IF DTL.Defect User  2 is Entered
IF DTL.Defect_User_2 <> *BLANK;

// Call program Val Market Defect     XF.
CALL PROGRAM(Val Market Defect     XF) ('PLL6XFR');
PARAMETER(DTL.Defect_User_2);
PARAMETER(DTL.Class_Df_2_Usr);
PARAMETER(DTL.TH_Hog_Class_Type);
PARAMETER(LCL.*Return_code);

CASE;

// IF LCL.*Return code is Error Found
IF LCL.*Return_code = 'ERROR';

// Send error message - 'Defect &2 Def Class &3 Not allow on Hog Type'
ERROR(PRK1197);
MSGPARM(PAR.TH_Hog_Class_Type);
MSGPARM(DTL.Defect_User_2);
MSGPARM(DTL.Class_Df_2_Usr);

ENDIF;

ENDIF;

//?val 3
CASE;

// IF DTL.Defect User  3 is Entered
IF DTL.Defect_User_3 <> *BLANK;

// Call program Val Market Defect     XF.
CALL PROGRAM(Val Market Defect     XF) ('PLL6XFR');
PARAMETER(DTL.Defect_User_3);
PARAMETER(DTL.Class_Df_3_Usr);
PARAMETER(DTL.TH_Hog_Class_Type);
PARAMETER(LCL.*Return_code);

CASE;

// IF LCL.*Return code is Error Found
IF LCL.*Return_code = 'ERROR';

// Send error message - 'Defect &2 Def Class &3 Not allow on Hog Type'
ERROR(PRK1197);
MSGPARM(PAR.TH_Hog_Class_Type);
MSGPARM(DTL.Defect_User_3);
MSGPARM(DTL.Class_Df_3_Usr);

ENDIF;

ENDIF;

//?val 4
CASE;

// IF DTL.Defect User  4 is Entered
IF DTL.Defect_User_4 <> *BLANK;

// Call program Val Market Defect     XF.
CALL PROGRAM(Val Market Defect     XF) ('PLL6XFR');
PARAMETER(DTL.Defect_User_4);
PARAMETER(DTL.Class_Df_4_Usr);
PARAMETER(DTL.TH_Hog_Class_Type);
PARAMETER(LCL.*Return_code);

CASE;

// IF LCL.*Return code is Error Found
IF LCL.*Return_code = 'ERROR';

// Send error message - 'Defect &2 Def Class &3 Not allow on Hog Type'
ERROR(PRK1197);
MSGPARM(PAR.TH_Hog_Class_Type);
MSGPARM(DTL.Defect_User_4);
MSGPARM(DTL.Class_Df_4_Usr);

ENDIF;

ENDIF;

//?val 5
CASE;

// IF DTL.Defect User  5 is Entered
IF DTL.Defect_User_5 <> *BLANK;

// Call program Val Market Defect     XF.
CALL PROGRAM(Val Market Defect     XF) ('PLL6XFR');
PARAMETER(DTL.Defect_User_5);
PARAMETER(DTL.Class_Df_5_Usr);
PARAMETER(DTL.TH_Hog_Class_Type);
PARAMETER(LCL.*Return_code);

CASE;

// IF LCL.*Return code is Error Found
IF LCL.*Return_code = 'ERROR';

// Send error message - 'Defect &2 Def Class &3 Not allow on Hog Type'
ERROR(PRK1197);
MSGPARM(PAR.TH_Hog_Class_Type);
MSGPARM(DTL.Defect_User_5);
MSGPARM(DTL.Class_Df_5_Usr);

ENDIF;

ENDIF;

//?val 6
CASE;

// IF DTL.Defect User  6 is Entered
IF DTL.Defect_User_6 <> *BLANK;

// Call program Val Market Defect     XF.
CALL PROGRAM(Val Market Defect     XF) ('PLL6XFR');
PARAMETER(DTL.Defect_User_6);
PARAMETER(DTL.Class_Df_6_Usr);
PARAMETER(DTL.TH_Hog_Class_Type);
PARAMETER(LCL.*Return_code);

CASE;

// IF LCL.*Return code is Error Found
IF LCL.*Return_code = 'ERROR';

// Send error message - 'Defect &2 Def Class &3 Not allow on Hog Type'
ERROR(PRK1197);
MSGPARM(PAR.TH_Hog_Class_Type);
MSGPARM(DTL.Defect_User_6);
MSGPARM(DTL.Class_Df_6_Usr);

ENDIF;

ENDIF;

//?val 7
CASE;

// IF DTL.Defect User  7 is Entered
IF DTL.Defect_User_7 <> *BLANK;

// Call program Val Market Defect     XF.
CALL PROGRAM(Val Market Defect     XF) ('PLL6XFR');
PARAMETER(DTL.Defect_User_7);
PARAMETER(DTL.Class_Df_7_Usr);
PARAMETER(DTL.TH_Hog_Class_Type);
PARAMETER(LCL.*Return_code);

CASE;

// IF LCL.*Return code is Error Found
IF LCL.*Return_code = 'ERROR';

// Send error message - 'Defect &2 Def Class &3 Not allow on Hog Type'
ERROR(PRK1197);
MSGPARM(PAR.TH_Hog_Class_Type);
MSGPARM(DTL.Defect_User_7);
MSGPARM(DTL.Class_Df_7_Usr);

ENDIF;

ENDIF;

//?val 8
CASE;

// IF DTL.Defect User  8 is Entered
IF DTL.Defect_User_8 <> *BLANK;

// Call program Val Market Defect     XF.
CALL PROGRAM(Val Market Defect     XF) ('PLL6XFR');
PARAMETER(DTL.Defect_User_8);
PARAMETER(DTL.Class_Df_8_Usr);
PARAMETER(DTL.TH_Hog_Class_Type);
PARAMETER(LCL.*Return_code);

CASE;

// IF LCL.*Return code is Error Found
IF LCL.*Return_code = 'ERROR';

// Send error message - 'Defect &2 Def Class &3 Not allow on Hog Type'
ERROR(PRK1197);
MSGPARM(PAR.TH_Hog_Class_Type);
MSGPARM(DTL.Defect_User_8);
MSGPARM(DTL.Class_Df_8_Usr);

ENDIF;

ENDIF;

//?val 9
CASE;

// IF DTL.Defect User  9 is Entered
IF DTL.Defect_User_9 <> *BLANK;

// Call program Val Market Defect     XF.
CALL PROGRAM(Val Market Defect     XF) ('PLL6XFR');
PARAMETER(DTL.Defect_User_9);
PARAMETER(DTL.Class_Df_9_Usr);
PARAMETER(DTL.TH_Hog_Class_Type);
PARAMETER(LCL.*Return_code);

CASE;

// IF LCL.*Return code is Error Found
IF LCL.*Return_code = 'ERROR';

// Send error message - 'Defect &2 Def Class &3 Not allow on Hog Type'
ERROR(PRK1197);
MSGPARM(PAR.TH_Hog_Class_Type);
MSGPARM(DTL.Defect_User_9);
MSGPARM(DTL.Class_Df_9_Usr);

ENDIF;

ENDIF;

//?val 10
CASE;

// IF DTL.Defect User 10 is Entered
IF DTL.Defect_User_10 <> *BLANK;

// Call program Val Market Defect     XF.
CALL PROGRAM(Val Market Defect     XF) ('PLL6XFR');
PARAMETER(DTL.Defect_User_10);
PARAMETER(DTL.Class_Df_10_Usr);
PARAMETER(DTL.TH_Hog_Class_Type);
PARAMETER(LCL.*Return_code);

CASE;

// IF LCL.*Return code is Error Found
IF LCL.*Return_code = 'ERROR';

// Send error message - 'Defect &2 Def Class &3 Not allow on Hog Type'
ERROR(PRK1197);
MSGPARM(PAR.TH_Hog_Class_Type);
MSGPARM(DTL.Defect_User_10);
MSGPARM(DTL.Class_Df_10_Usr);

ENDIF;

ENDIF;

ENDDO;

ENDDO;

//?Internal farm site and state MTech NOTLive & MtechLive
CASE;

// IF DTL.TH Source Type is Internal
IF DTL.TH_Source_Type = 'I';

// AND LCL.MTech Live Yes or No is No MTech not Live
AND LCL.MTech_Live_Yes_or_No = 'N';

//?get farm site by movement
// Call program Z1v HPS Farm Info     UP.
CALL PROGRAM(Z1v HPS Farm Info     UP) ('HP249');
PARAMETER(WRK.*Return_code);
PARAMETER(DTL.TH_HPS_Movement_Ref_#);
PARAMETER(WRK.Farm_site_Name_f_HPS_USR);
PARAMETER(WRK.Farm_Site_USR);
PARAMETER(WRK.HPS_FS_Comp_Relation_USR);
PARAMETER(PAR.State);

// DTL.TH HPS Farm Site = WRK.Farm Site USR
DTL.TH_HPS_Farm_Site = WRK.Farm_Site_USR;

CASE;

// IF WRK.Farm Site USR NE WRK.Zero USR
IF WRK.Farm_Site_USR <> WRK.Zero_USR;

// DTL.TH State = PAR.State
DTL.TH_State = PAR.State;

ENDIF;

//?Internal farm site and state MTech NOTLive & MtechLive
// IF DTL.TH Source Type is Internal
IF DTL.TH_Source_Type = 'I';

// AND LCL.MTech Live Yes or No is Yes MTech is Live
AND LCL.MTech_Live_Yes_or_No = 'Y';

//?have farm site on screen now get state
// Call program Rtv HPS Farm Inf-Mtech UP.
CALL PROGRAM(Rtv HPS Farm Inf-Mtech UP) ('HP293');
PARAMETER(WRK.*Return_code);
PARAMETER(NLL.Farm_site_Name_f_HPS_USR);
PARAMETER(DTL.TH_HPS_Farm_Site);
PARAMETER(WRK.HPS_FS_Comp_Relation_USR);
PARAMETER(DTL.TH_State);
PARAMETER(WRK.HPS_Farm_County);
PARAMETER(WRK.HPS_Cell_Manager_Code_USR);
PARAMETER(WRK.HPS_Cell_Manager_Nm_USR);
PARAMETER(NLL.MTech_Farm_Site_Ref);
PARAMETER(NLL.MTech_Cell_Manager_Ref);

CASE;

// IF DTL.TH HPS Farm Site NE WRK.Zero USR
IF DTL.TH_HPS_Farm_Site <> WRK.Zero_USR;

// DTL.TH State = PAR.State
DTL.TH_State = PAR.State;

ENDIF;

ENDIF;

//?Validate the state code regardless
// LCL.Return Code USR = WRK.Blank USR
LCL.Return_Code_USR = WRK.Blank_USR;

// Call program Rtv State Description UP.
CALL PROGRAM(Rtv State Description UP) ('STATERET');
PARAMETER(LCL.Return_Code_USR);
PARAMETER(DTL.TH_State);
PARAMETER(DTL.State_Desc_15_USR);

//?Invalid state code send message
CASE;

// IF LCL.Return Code USR is *Normal
IF LCL.Return_Code_USR = *BLANK;

//?Invalid state code send message
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'State Code is Invalid'
ERROR(PRK0308);
MSGPARM(DTL.TH_State);

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Ttt Hdr-chg retrn IF) TYPE(EXCINTFUN) FILE(PKA1CPP)        AB1134948;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(DTL.TH_Purchase_Date);
PARAMETER(DTL.TH_Group_Reference);
PARAMETER(DTL.TH_Live_Purchase_UOM);
PARAMETER(DTL.TH_Live_Purchase_Price);
PARAMETER(DTL.TH_Live_Gross_Amt);
PARAMETER(DTL.TH_LIve_Net_Amt);
PARAMETER(DTL.TH_Resale_UOM);
PARAMETER(DTL.TH_Recalc_Live_Wgt_Yld);
PARAMETER(DTL.TH_Pricing_Date);
PARAMETER(DTL.TH_Resale_Spread_Sts);
PARAMETER(DTL.TH_Dead_On_Arrival);
PARAMETER(DTL.TH_Head_Received);
PARAMETER(DTL.TH_Yard_Deads);
PARAMETER(DTL.TH_Held_Over);
PARAMETER(DTL.TH_Head_Condemned);
PARAMETER(DTL.TH_Head_Killed);
PARAMETER(DTL.TH_Head_Adds);
PARAMETER(DTL.TH_Head_Accepted);
PARAMETER(DTL.TH_Live_Wgt);
PARAMETER(DTL.TH_Adj_Live_Wgt);
PARAMETER(DTL.TH_Hot_Wgt);
PARAMETER(DTL.TH_Tot_Loin_Eye_Depth);
PARAMETER(DTL.TH_Tot_Backfat_Inches);
PARAMETER(DTL.TH_Tot_Light_Reflectance);
PARAMETER(DTL.TH_Avg_Live_Wgt);
PARAMETER(DTL.TH_Avg_Hot_Wgt);
PARAMETER(DTL.TH_Avg_Light_Reflectance);
PARAMETER(DTL.TH_Avg_Lean_Percent);
PARAMETER(DTL.TH_Avg_Loin_Eye_Depth);
PARAMETER(DTL.TH_Avg_Backfat);
PARAMETER(DTL.TH_Std_Yield_Percent);
PARAMETER(DTL.TH_Actual_Yield);
PARAMETER(DTL.TH_Adj_Actual_Yield);
PARAMETER(DTL.TH_Yield_Difference);
PARAMETER(DTL.TH_Recalc_Live_Wgt);
PARAMETER(DTL.TH_CM_Market_Price);
PARAMETER(DTL.TH_CM_Base_Mkt_Price);
PARAMETER(DTL.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(DTL.TH_CM_Sort_Discount_Amt);
PARAMETER(DTL.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(DTL.TH_CM_Base_Carcass_Value);
PARAMETER(DTL.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(DTL.TH_CM_Carcass_Gross_Amt);
PARAMETER(DTL.TH_Deduction_Amt);
PARAMETER(DTL.TH_Total_Net_WO_Adds);
PARAMETER(DTL.TH_Carcass_Net_Amt);
PARAMETER(DTL.TH_Additions_Amt);
PARAMETER(DTL.TH_Payment_Gross);
PARAMETER(DTL.Th_Payment_Net_Amt);
PARAMETER(DTL.TH_AP_Voucher_Document#);
PARAMETER(DTL.TH_Freight_Amount);
PARAMETER(DTL.TH_Accrual_Amount);
PARAMETER(DTL.TH_Fixed_Cost_Amount);
PARAMETER(DTL.TH_Calc_Net_Sts);
PARAMETER(DTL.TH_Payment_Sts);
PARAMETER(DTL.TH_Header_Error_Sts);
PARAMETER(DTL.TH_Detail_Error_Sts);
PARAMETER(DTL.TH_Kill_Balancing_Sts);
PARAMETER(DTL.TH_Bal_to_Kill_Gen);
PARAMETER(DTL.TH_Commission_A_P_Voucher);
PARAMETER(DTL.TH_Voucher_Payment_Date);
PARAMETER(DTL.TH_User_Error_Override);
PARAMETER(DTL.TH_Held_Over_Record);
PARAMETER(DTL.TH_Sex);
PARAMETER(DTL.TH_Held_Ovr_Completed_Dte);
PARAMETER(DTL.TH_Commission_Paid_Date);
PARAMETER(DTL.TH_Actual_Check_Date);
PARAMETER(DTL.TH_Shipped_Weight);
PARAMETER(DTL.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(DTL.TH_FFLI);
PARAMETER(DTL.TH_Kill_Product_Value);
PARAMETER(DTL.TH_Cut_Product_Value);
PARAMETER(DTL.TH_Render_Product_Value);
PARAMETER(DTL.TH_Head_Excluded);
PARAMETER(DTL.TH_CM_Bse_Mkt_Live_CWT);
PARAMETER(DTL.TH_CM_Bse_Mkt_Carc_CWT);
PARAMETER(DTL.TH_CM_Srt_Dsc_Live_CWT);
PARAMETER(DTL.TH_CM_Srt_Dsc_Carc_CWT);
PARAMETER(DTL.TH_CM_Yld_G_L_Live_CWT);
PARAMETER(DTL.TH_CM_Yld_G_L_Carc_CWT);
PARAMETER(DTL.TH_CM_Crc_Val_Live_CWT);
PARAMETER(DTL.TH_CM_Crc_Val_Carc_CWT);
PARAMETER(DTL.TH_CM_Lean_Prem_Live_CWT);
PARAMETER(DTL.TH_CM_Lean_Prem_Carc_CWT);
PARAMETER(DTL.TH_CM_Gross_Live_CWT);
PARAMETER(DTL.TH_CM_Gross_Carc_CWT);
PARAMETER(DTL.TH_Source_Type);
PARAMETER(DTL.TH_Scale_Ticket_Sts);
PARAMETER(DTL.TH_Payment_Type);
PARAMETER(DTL.TH_HPS_Movement_Ref_#);
PARAMETER(DTL.TH_Source_Code);
PARAMETER(DTL.TH_Hog_Class_Type);
PARAMETER(DTL.TH_Posted_to_HPS_Flag);
PARAMETER(DTL.TH_Schedule_Kill_Shift);
PARAMETER(DTL.TH_Shift_Held_Over);
PARAMETER(DTL.TH_State);
PARAMETER(DTL.TH_Unused_Code);
PARAMETER(DTL.TH_Unused_Sts_2_Pos);
PARAMETER(DTL.TH_Commission_Status);
PARAMETER(DTL.TH_Paid_2_Week_Avg_Y_N);
PARAMETER(DTL.TH_Unused_Sts_1_Pos_3);
PARAMETER(DTL.TH_DOA_Weight);
PARAMETER(DTL.TH_Avg_Lean_EXC_ADD);
PARAMETER(DTL.TH_HPS_Farm_Site);
PARAMETER(DTL.TH_Shift_Held_Over_Head);
PARAMETER(DTL.TH_Sorting_Amount);
PARAMETER(DTL.TH_Head_Identified);
PARAMETER(DTL.TH_Percent_Identified);
PARAMETER(DTL.TH_Percent_Accepted);
PARAMETER(DTL.TH_Head_Adjusted_LN);
PARAMETER(DTL.TH_PHA_Head_Adds);
PARAMETER(DTL.TH_PHA_Add_Type);
PARAMETER(DTL.TH_PHA_Average_Type);
PARAMETER(DTL.TH_PHA_Add_Reason);
PARAMETER(DTL.TH_PHA_Yield_Percent);
PARAMETER(DTL.TH_PHA_Lean_Prm_Crc_CWT);
PARAMETER(DTL.TH_VC_Gross_Value_HD);
PARAMETER(DTL.TH_Excluded_Gross_Value);
PARAMETER(DTL.TH_Avg_Lean);
PARAMETER(DTL.TH_Broken_Back_Hd_Count);
PARAMETER(DTL.TH_Hot_Scl_Upload_Time);
PARAMETER(DTL.TH_Unused_Nbr_4);
PARAMETER(DTL.TH_Excluded_Carc_Val);
PARAMETER(DTL.TH_Excluded_Premium);
PARAMETER(DTL.TH_Unused_Nbr_7);
PARAMETER(DTL.TH_Unused_Nbr_8);
PARAMETER(DTL.TH_Unused_Nbr_9);
PARAMETER(DTL.TH_Unused_Nbr_10);
PARAMETER(DTL.TH_Break_Even_Price_CWT);
PARAMETER(DTL.TH_Meat_Value_Factor_Amt);
PARAMETER(DTL.TH_Yld_Parm_Adj_Yield);
PARAMETER(DTL.TH_PHA_Sort_Disc_Fctr);
PARAMETER(DTL.TH_Avg_Loin_Eye_2_dec);
PARAMETER(DTL.TH_Avg_Backfat_2_Dec);
PARAMETER(DTL.TH_HITCH_Old_Pay_Net_Amt);
PARAMETER(DTL.TH_MPR_Sort_Loss);
PARAMETER(DTL.TH_Unused_Nbr_19);
PARAMETER(DTL.TH_Unused_Nbr_20);
PARAMETER(DTL.TH_Cold_Scl_Upload_Date);
PARAMETER(DTL.TH_Cold_Scl_Upload_Time);
PARAMETER(DTL.TH_Head_LFT);
PARAMETER(DTL.TH_Head_EUT_KOA);
PARAMETER(DTL.TH_Unused_Date_5);
PARAMETER(DTL.TH_Unused_Sts_1);
PARAMETER(DTL.TH_Unused_Sts_2);
PARAMETER(DTL.TH_Unused_Sts_3);
PARAMETER(DTL.TH_Unused_Sts_4);
PARAMETER(DTL.TH_Unused_Sts_5);
PARAMETER(DTL.TH_Unused_Sts_6);
PARAMETER(DTL.TH_Unused_Sts_7);
PARAMETER(DTL.TH_Unused_Sts_8);
PARAMETER(DTL.DF_Defect_Code);
PARAMETER('RECV');
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.PL_Location_Code);
PARAMETER(DTL.HB_Buyer_Code);
PARAMETER(DTL.GN_Genetic_Code);
PARAMETER(DTL.HC_Class_Code);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
PARAMETER(LCL.Record_Added_Usr);
PARAMETER(PAR.User_modified_0_not_modi);
PARAMETER(PAR.Company_Value_Code_USR);
PARAMETER(PAR.SBD_Top_Load_Sts);
PARAMETER(DTL.PS_Site_ID);
PARAMETER(DTL.Pen_Number);
PARAMETER(DTL.Producer_Subsidiary_Code);
PARAMETER(DTL.Defect_User_1);
PARAMETER(DTL.Defect_User_2);
PARAMETER(DTL.Defect_User_3);
PARAMETER(DTL.Defect_User_4);
PARAMETER(DTL.Defect_User_5);
PARAMETER(DTL.Defect_User_6);
PARAMETER(DTL.Defect_User_7);
PARAMETER(DTL.Defect_User_8);
PARAMETER(DTL.Defect_User_9);
PARAMETER(DTL.Defect_User_10);
PARAMETER(WRK.Defect_Add_Chg_Usr);
PARAMETER(DTL.Defect_HD_user_1);
PARAMETER(DTL.Defect_HD_user_2);
PARAMETER(DTL.Defect_HD_user_3);
PARAMETER(DTL.Defect_HD_user_4);
PARAMETER(DTL.Defect_HD_user_5);
PARAMETER(DTL.Defect_HD_user_6);
PARAMETER(DTL.Defect_HD_user_7);
PARAMETER(DTL.Defect_HD_user_8);
PARAMETER(DTL.Defect_HD_user_9);
PARAMETER(DTL.Defect_HD_user_10);
PARAMETER(DTL.Head_Total_USR);
PARAMETER(WRK.@Status_Internal_Y_N);
PARAMETER(DTL.BOL_Shipped_Head);
PARAMETER(DTL.Class_Df_1_Usr);
PARAMETER(DTL.Class_Df_2_Usr);
PARAMETER(DTL.Class_Df_3_Usr);
PARAMETER(DTL.Class_Df_4_Usr);
PARAMETER(DTL.Class_Df_5_Usr);
PARAMETER(DTL.Class_Df_6_Usr);
PARAMETER(DTL.Class_Df_7_Usr);
PARAMETER(DTL.Class_Df_8_Usr);
PARAMETER(DTL.Class_Df_9_Usr);
PARAMETER(DTL.Class_Df_10_Usr);
{
 //?Execute internal function

 //?Mtech
 DO;

 //?Mtech Live Yes or no
 //?E2423 Update the Buy Order Load movement if internal
 //?and the tattoo has a movement number but the buy order load does not
 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER('MTECHLIVE');
 PARAMETER(WRK.System_Value_Alpha_USR);

 // LCL.MTech Live Yes or No = WRK.System Value Alpha    USR
 LCL.MTech_Live_Yes_or_No = WRK.System_Value_Alpha_USR;

 ENDDO;

 //?022106 slm Site id must be updated when a record is created
 //?       also make sure that the producer is on the record
 // LCL.Random Tattoo Sts USR = CND.Yes
 LCL.Random_Tattoo_Sts_USR = 'Y';

 //?HPE076 --
 CASE;

 // IF PAR.Company Value Code    USR is Last Tattoo - Research
 IF PAR.Company_Value_Code_USR = 'LSTTTTRSC';

 // LCL.Tattoo Type USR = CND.Research
 LCL.Tattoo_Type_USR = 'R';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Tattoo Type USR = CND.*NONE
 LCL.Tattoo_Type_USR = *BLANK;

 ENDIF;

 //?Make sure tattoo is STILL unused, if not, get the next unused nbr.
 CASE;

 // IF PAR.User modified: 0-not modi is Not modified
 IF PAR.User_modified_0_not_modi = '0';

 CASE;

 // IF PAR.Company Value Code    USR is Last Tattoo - Market
 IF PAR.Company_Value_Code_USR = 'LSTTTTMKT';

 // OR PAR.Company Value Code    USR is Last Tattoo - SBD Top
 OR PAR.Company_Value_Code_USR = 'LSTTTTTOP';

 // OR LCL.Random Tattoo Sts USR is Yes
 OR LCL.Random_Tattoo_Sts_USR = 'Y';

 // OR PAR.Company Value Code    USR is Last Tattoo - Research
 OR PAR.Company_Value_Code_USR = 'LSTTTTRSC';

 EXECUTE FUNCTION(Rtv Val Ttt,Kll Dt    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1154371;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TH_Tattoo_Number);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // Call program RTV Next Tattoo Nbrs  XF.
 CALL PROGRAM(RTV Next Tattoo Nbrs  XF) ('PKY4XFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.TH_Hog_Class_Type);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(WRK.Company_Value_Code_USR);
 PARAMETER('R');
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(WRK.Return_Code_USR);
 PARAMETER(PAR.TH_Source_Type);
 PARAMETER(PAR.SBD_Top_Load_Sts);
 PARAMETER(LCL.Tattoo_Type_USR);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Rtv Prev Kill Date    XF.
 CALL PROGRAM(Rtv Prev Kill Date    XF) ('PDRUXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(LCL.TH_Kill_Date);

 EXECUTE FUNCTION(Rtv Val Ttt,Kll Dt    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1154371;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(LCL.TH_Kill_Date);
 PARAMETER(PAR.TH_Tattoo_Number);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // Call program RTV Next Tattoo Nbrs  XF.
 CALL PROGRAM(RTV Next Tattoo Nbrs  XF) ('PKY4XFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.TH_Hog_Class_Type);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(WRK.Company_Value_Code_USR);
 PARAMETER('R');
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(WRK.Return_Code_USR);
 PARAMETER(PAR.TH_Source_Type);
 PARAMETER(PAR.SBD_Top_Load_Sts);
 PARAMETER(LCL.Tattoo_Type_USR);

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?** Check next kill date **
 // Call program Rtv Nxt Kill Dt 2 OMS XF.
 CALL PROGRAM(Rtv Nxt Kill Dt 2 OMS XF) ('PDUXXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(LCL.Next_Kill_Date);

 EXECUTE FUNCTION(Rtv Val Ttt,Kll Dt    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1154371;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(LCL.Next_Kill_Date);
 PARAMETER(PAR.TH_Tattoo_Number);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // Call program RTV Next Tattoo Nbrs  XF.
 CALL PROGRAM(RTV Next Tattoo Nbrs  XF) ('PKY4XFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.TH_Hog_Class_Type);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(WRK.Company_Value_Code_USR);
 PARAMETER('R');
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(WRK.Return_Code_USR);
 PARAMETER(PAR.TH_Source_Type);
 PARAMETER(PAR.SBD_Top_Load_Sts);
 PARAMETER(LCL.Tattoo_Type_USR);

 ENDIF;

 ENDIF;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program RTV Next Tattoo Nbrs  XF.
 CALL PROGRAM(RTV Next Tattoo Nbrs  XF) ('PKY4XFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.TH_Hog_Class_Type);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(WRK.Company_Value_Code_USR);
 PARAMETER('R');
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(WRK.Return_Code_USR);
 PARAMETER(PAR.TH_Source_Type);
 PARAMETER(PAR.SBD_Top_Load_Sts);
 PARAMETER(LCL.Tattoo_Type_USR);

 ENDIF;

 ENDIF;

 //?If internal output head rcvd and create tattoo detail,upd pen
 CASE;

 // IF PAR.@Status Internal (Y/N) is No
 IF PAR.@Status_Internal_Y_N = *BLANK;

 // OR PAR.TH Resale Spread Sts is Not Spread/Spread
 OR PAR.TH_Resale_Spread_Sts = *BLANK/'P';

 // WRK.TH Head Received = PAR.TH Head Received
 WRK.TH_Head_Received = PAR.TH_Head_Received;

 // WRK.BOL Live Wgt Received = CON.*ZERO
 WRK.BOL_Live_Wgt_Received = *ZERO;

 //?If internal output head rcvd and create tattoo detail,upd pen
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.TH Head Received = PAR.Head Total USR
 WRK.TH_Head_Received = PAR.Head_Total_USR;

 // Call program Crt Tattoo Dtl        XF.
 CALL PROGRAM(Crt Tattoo Dtl        XF) ('PKZXXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER('N');
 PARAMETER('N');
 PARAMETER('N');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Head_Total_USR);
 PARAMETER(PAR.Pen_Number);

 EXECUTE FUNCTION(Rtv Dtl hd/Chg Pen    RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1110385;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.Pen_Number);
 {
  //?USER: Initialize routine

  EXECUTE FUNCTION(Set Pen Totals to Zeros) TYPE(RTVOBJ) FILE(PKA3REP)            AB1110376;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.Pen_Number);
  PARAMETER(*ZERO);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Pen               CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1102758;
   PARAMETER(DB1.Pen_Company_Number);
   PARAMETER(DB1.Pen_Number);
   PARAMETER(WRK.Blank_USR);
   PARAMETER(DB1.Pen_Maximun_Capacity);
   PARAMETER(*ZERO);
   PARAMETER(DB1.Pen_Current_Drive_Card_No);
   PARAMETER(DB1.Pen_Sts);
   PARAMETER(DB1.Pen_Drive_Sequence);
   PARAMETER(DB1.Pen_Type);
   PARAMETER(DB1.Pen_Adjustment);
   PARAMETER(WRK.Blank_USR);
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

  //?USER: Processing if Data record not found

  // WRK.Pen Description = CON.*BLANK
  WRK.Pen_Description = *BLANK;

  // WRK.GN Genetic Code = CON.*BLANK
  WRK.GN_Genetic_Code = *BLANK;

  EXECUTE FUNCTION(Chg Pen Genetics      CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1119678;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.Pen_Number);
  PARAMETER(WRK.Pen_Description);
  PARAMETER(WRK.GN_Genetic_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv/Chg Pen Totals    RT) TYPE(RTVOBJ) FILE(PKA3REP)           AB1110372;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(DB1.TD_Pen_Head);
  PARAMETER(DB1.TD_Yard_Dead);
  {
   //?USER: Process Data record

   // WRK.Pen Current Head = PAR.TD Pen Head + DB1.Pen Current Head
   WRK.Pen_Current_Head = PAR.TD_Pen_Head + DB1.Pen_Current_Head;

   // WRK.Pen Current Head = WRK.Pen Current Head - PAR.TD Yard Dead
   WRK.Pen_Current_Head = WRK.Pen_Current_Head - PAR.TD_Yard_Dead;

   EXECUTE FUNCTION(Chg Pen               CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1102758;
   PARAMETER(DB1.Pen_Company_Number);
   PARAMETER(DB1.Pen_Number);
   PARAMETER(DB1.Pen_Description);
   PARAMETER(DB1.Pen_Maximun_Capacity);
   PARAMETER(WRK.Pen_Current_Head);
   PARAMETER(DB1.Pen_Current_Drive_Card_No);
   PARAMETER(DB1.Pen_Sts);
   PARAMETER(DB1.Pen_Drive_Sequence);
   PARAMETER(DB1.Pen_Type);
   PARAMETER(DB1.Pen_Adjustment);
   PARAMETER(DB1.GN_Genetic_Code);
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

  //?USER: Exit processing

  // WRK.Pen Description = CON.*BLANK
  WRK.Pen_Description = *BLANK;

  // WRK.GN Genetic Code = CON.*BLANK
  WRK.GN_Genetic_Code = *BLANK;

  EXECUTE FUNCTION(Rtv Pen GENETICS      RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1107816;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(WRK.Pen_Description);
  PARAMETER(WRK.GN_Genetic_Code);
  {
   //?USER: Processing if Data record not found

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Pen_Description = *BLANK;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.GN_Genetic_Code = *BLANK;

   //?USER: Process Data record

   CASE;

   // IF DB1.TDP Process Code is Drive Card Printed
   IF DB1.TDP_Process_Code = 'D';

   // OR DB1.TDP Process Code is Open
   OR DB1.TDP_Process_Code = 'O';

   EXECUTE FUNCTION(Rtv Tattoo GENETICS) TYPE(RTVOBJ) FILE(PKA1CPP)                AB1107783;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(WRK.Genetic_Code_USR);
   PARAMETER(WRK.Pen_Desc_USR);
   {
    //?USER: Processing if Data record not found

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.GN_Genetic_Code = *BLANK;

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.Pen_Description = *BLANK;

    //?USER: Process Data record

    // PAR.GN Genetic Code = DB1.GN Genetic Code
    PAR.GN_Genetic_Code = DB1.GN_Genetic_Code;

    EXECUTE FUNCTION(Rtv Genetic Record    RT) TYPE(RTVOBJ) FILE(PKAIREP)           AB1107738;
    PARAMETER(DB1.GN_Genetic_Code);
    PARAMETER(PAR.Pen_Description);
    {
     //?USER: Processing if Data record not found

     // *MO.VE             1183529*Bu = ilt. in functions
     PAR.GN_Description = *BLANK;

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

   }

   CASE;

   // IF PAR.GN Genetic Code is BLANKS
   IF PAR.GN_Genetic_Code = *BLANK;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.GN_Genetic_Code = WRK.Genetic_Code_USR;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Pen_Description = WRK.Pen_Desc_USR;

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF WRK.Genetic Code USR NE PAR.GN Genetic Code
   IF WRK.Genetic_Code_USR <> PAR.GN_Genetic_Code;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Pen_Description = 'MIXED';

   ENDIF;

   ENDIF;

   ENDIF;

  }

  EXECUTE FUNCTION(Chg Pen Genetics      CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1119678;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.Pen_Number);
  PARAMETER(WRK.Pen_Description);
  PARAMETER(WRK.GN_Genetic_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 // WRK.BOL Live Wgt Received = CON.*ZERO
 WRK.BOL_Live_Wgt_Received = *ZERO;

 EXECUTE FUNCTION(Rtv/Chg Bol Hd rcvd   RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1184135;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(WRK.TH_Head_Received);
 PARAMETER(WRK.BOL_Live_Wgt_Received);
 {
  //?USER: Process Data record

  // WRK.BOL Head Received = DB1.BOL Head Received + PAR.BOL Head Received
  WRK.BOL_Head_Received = DB1.BOL_Head_Received + PAR.BOL_Head_Received;

  // WRK.BOL Live Wgt Received = DB1.BOL Live Wgt Received + PAR.BOL Live Wgt Receive
  WRK.BOL_Live_Wgt_Received = DB1.BOL_Live_Wgt_Received + PAR.BOL_Live_Wgt_Received;

  //?Calculate freight based on the unit of measure
  // WRK.BOL Freight Amt = DB1.BOL Freight Amt
  WRK.BOL_Freight_Amt = DB1.BOL_Freight_Amt;

  EXECUTE FUNCTION(Chk tatto Paid for Bol RT) TYPE(RTVOBJ) FILE(PKA1CPP)          AB1183687;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(WRK.Tattoo_is_paid_Usr);
  PARAMETER(WRK.Held_Over_Records_Y_N);
  PARAMETER(WRK.Tot_Frt_Spdb_aft_pay_Usr);
  {
   //?USER: Initialize routine

   // PAR.Tot Frt Spdb aft pay Usr = CON.*ZERO
   PAR.Tot_Frt_Spdb_aft_pay_Usr = *ZERO;

   // PAR.Held Over Records Y/N = CND.No
   PAR.Held_Over_Records_Y_N = 'N';

   // PAR.Tattoo is paid Usr = CND.No
   PAR.Tattoo_is_paid_Usr = 'N';

   //?USER: Process Data record

   //?If one tattoo is paid but freight was spread then accumulate
   //?what is paid, for held over respread problem
   //?when this probelm goes away, then just flag that there is one paid
   CASE;

   // IF DB1.TH Payment Sts is Paid Anything
   IF DB1.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

   //?CHECK IF FREIGHT AMOUNT IS IN RECORD
   CASE;

   // IF DB1.TH Freight Amount is Not Zeros
   IF DB1.TH_Freight_Amount <> *ZERO;

   // PAR.Tattoo is paid Usr = CND.Yes
   PAR.Tattoo_is_paid_Usr = 'Y';

   ENDIF;

   // PAR.Tot Frt Spdb aft pay Usr = PAR.Tot Frt Spdb aft pay Usr + DB1.TH Freight Amo
   PAR.Tot_Frt_Spdb_aft_pay_Usr = PAR.Tot_Frt_Spdb_aft_pay_Usr + DB1.TH_Freight_Amount;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?CHECK FOR HELD OVER RECORD
   CASE;

   // IF DB1.TH Held Over Record is Yes
   IF DB1.TH_Held_Over_Record = 'Y';

   // OR DB1.TH Held Over is greater than 0
   OR DB1.TH_Held_Over > *ZERO;

   // PAR.Held Over Records Y/N = CND.Yes
   PAR.Held_Over_Records_Y_N = 'Y';

   ENDIF;

   ENDIF;

  }

  CASE;

  // IF DB1.BOL Freight Allocation is Freight is Allocated
  IF DB1.BOL_Freight_Allocation = 'Y';

  // AND WRK.Tattoo is paid Usr is Yes
  AND WRK.Tattoo_is_paid_Usr = 'Y';

  // IF DB1.BOL Trucker Payment Sts is Paid Trucker
  IF DB1.BOL_Trucker_Payment_Sts = 'PT';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Call program Clc Freight Amt       XF.
  CALL PROGRAM(Clc Freight Amt       XF) ('PKQ5XFR');
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.BOL_Freight_UOM);
  PARAMETER(DB1.BOL_Freight_Unit_Amt);
  PARAMETER(WRK.BOL_Freight_Amt);
  PARAMETER(DB1.BOL_Freight_Allocation);
  PARAMETER(WRK.BOL_Head_Received);
  PARAMETER(WRK.BOL_Live_Wgt_Received);

  ENDIF;

  CASE;

  // IF WRK.BOL Freight Amt is Not Zeros
  IF WRK.BOL_Freight_Amt <> *ZERO;

  // AND WRK.BOL Head Received is Greater then Zero
  AND WRK.BOL_Head_Received > *ZERO;

  // AND DB1.BOL Trucker Payment Sts is Blank
  AND DB1.BOL_Trucker_Payment_Sts = *BLANK;

  // WRK.BOL Trucker Payment Sts = CND.Select Trucker
  WRK.BOL_Trucker_Payment_Sts = 'ST';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.BOL Trucker Payment Sts = DB1.BOL Trucker Payment Sts
  WRK.BOL_Trucker_Payment_Sts = DB1.BOL_Trucker_Payment_Sts;

  ENDIF;

  EXECUTE FUNCTION(Chg Buy Order Detail  CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1100531;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.BOL_Kill_Date);
  PARAMETER(DB1.BOL_Pln_Delv_Start_Time);
  PARAMETER(DB1.BOL_Pln_Delv_End_Time);
  PARAMETER(DB1.BOL_Pln_Head_Delv);
  PARAMETER(DB1.BOL_Shipped_Wgt);
  PARAMETER(DB1.BOL_Pln_Delv_Date);
  PARAMETER(DB1.BOL_Freight_UOM);
  PARAMETER(DB1.BOL_Freight_Unit_Amt);
  PARAMETER(WRK.BOL_Freight_Amt);
  PARAMETER(DB1.BOL_Freight_Allocation);
  PARAMETER(WRK.BOL_Head_Received);
  PARAMETER(WRK.BOL_Live_Wgt_Received);
  PARAMETER(WRK.BOL_Trucker_Payment_Sts);
  PARAMETER(DB1.BOL_Trucker_Check_Number);
  PARAMETER(DB1.BOL_Trucker_Check_Date);
  PARAMETER(DB1.BOL_AP_Voucher);
  PARAMETER(DB1.BOL_Trailer);
  PARAMETER(DB1.BOL_Freight_Exp_Paid_By);
  PARAMETER(DB1.BOL_Scheduled_Kill_Shift);
  PARAMETER(DB1.BOL_Truck_Scale_Weigh_Sts);
  PARAMETER(DB1.BOL_Violated_Auth_Tme_Sts);
  PARAMETER(DB1.TRK_Trucker_Code);
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(DB1.PL_Location_Code);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 //?BOH - Change Status to Locked so BOH info may not be changed!
 EXECUTE FUNCTION(Rtv/Chg BOH Status     RT) TYPE(RTVOBJ) FILE(PKAWCPP)          AB1145779;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER('L');
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg BOH Status        CH) TYPE(CHGOBJ) FILE(PKAWCPP)           AB1145821;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOH_Buy_Order_Date);
  PARAMETER(DB1.BOH_Kill_Date);
  PARAMETER(DB1.BOH_Payment_Type);
  PARAMETER(DB1.BOH_Buy_Order_Type);
  PARAMETER(DB1.BOH_Market_Add_Deduct);
  PARAMETER(PAR.BOH_Status);
  PARAMETER(DB1.BOH_Delv_Plan_Printed);
  PARAMETER(DB1.BOH_Quote_Price_Type);
  PARAMETER(DB1.BOH_Quoted_Base_Mkt_Price);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.PPWS_Company_Number);
  PARAMETER(DB1.CW_Year);
  PARAMETER(DB1.CW_Week_Number);
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(DB1.PL_Location_Code);
  PARAMETER(DB1.PC_Contract_Code);
  PARAMETER(DB1.PSC_Sub_Contract_Code);
  PARAMETER(DB1.GN_Genetic_Code);
  PARAMETER(DB1.PO_Option_Code);
  PARAMETER(DB1.CMP_Program_Code);
  PARAMETER(DB1.HB_Buyer_Code);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 EXECUTE FUNCTION(Rtv Chg Lock Sts      RT) TYPE(RTVOBJ) FILE(PLAECPP)           AB1246999;
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER('L');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Delv Sched Dtl    CH) TYPE(CHGOBJ) FILE(PLAECPP)           AB1244728;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(DB1.DSH_Kill_Date);
  PARAMETER(DB1.DSD_Delivery_Date);
  PARAMETER(DB1.DSD_Delivery_Time);
  PARAMETER(DB1.DSD_Delivery_Time_Seq);
  PARAMETER(DB1.DSD_Scheduled_Hour);
  PARAMETER(DB1.DSD_Farm_Site_Code);
  PARAMETER(DB1.DSD_Building);
  PARAMETER(DB1.DSD_Room);
  PARAMETER(DB1.DSD_Sire_Line_Code);
  PARAMETER(DB1.DSD_Hog_Group_Code);
  PARAMETER(DB1.DSD_Unused_Head);
  PARAMETER(DB1.DSD_Scheduled_Delv_Head);
  PARAMETER(DB1.DSD_Scheduled_Kill_Head);
  PARAMETER(DB1.DSD_Transportation_Office);
  PARAMETER(DB1.DSD_Trucker_Code_HPS);
  PARAMETER(DB1.DSD_Driver);
  PARAMETER(DB1.DSD_Loading_Crew);
  PARAMETER(DB1.CHR_Code);
  PARAMETER(DB1.DSD_Load_Type);
  PARAMETER(DB1.DSD_Full_Split_Load);
  PARAMETER(DB1.DSD_Movement_Number);
  PARAMETER(DB1.DSD_Truck_ID);
  PARAMETER(DB1.DSD_Trailer_ID);
  PARAMETER(DB1.DSD_Movement_Printed);
  PARAMETER(DB1.DSD_Sched_Route_Start_Pnt);
  PARAMETER(DB1.DSD_Sched_Route_Start_Dte);
  PARAMETER(DB1.DSD_Sched_Route_Start_Tim);
  PARAMETER(DB1.DSD_Sch_Farm_Arrival_Date);
  PARAMETER(DB1.DSD_Sch_Farm_Arrival_Time);
  PARAMETER(DB1.DSD_Sch_Start_Load_Date);
  PARAMETER(DB1.DSD_Sch_Start_Load_Time);
  PARAMETER(DB1.DSD_Receiving_Shift);
  PARAMETER(DB1.DSD_Kill_Shift);
  PARAMETER(DB1.DSD_BOL_Kill_Shift);
  PARAMETER(DB1.DSD_HPS_Post_Status);
  PARAMETER(DB1.DSD_HPE_Post_Status);
  PARAMETER('L');
  PARAMETER(DB1.DSD_Source_Type);
  PARAMETER(DB1.DSD_Transfer_Sts);
  PARAMETER(DB1.DSD_Unused_Date);
  PARAMETER(DB1.DSD_Unused_Time);
  PARAMETER(DB1.SR_Source_Code);
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(DB1.PL_Location_Code);
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.DSD_PRD_Srv_Batch_ID);
  PARAMETER(DB1.DSD_PRD_Srv_Sched_ID);
  PARAMETER(DB1.DSD_Ref_1);
  PARAMETER(DB1.DSD_Ref_2);
  PARAMETER(DB1.DSD_Ref_Status);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 EXECUTE FUNCTION(Create Tattoo Header) TYPE(CRTOBJ) FILE(PKA1CPP)               AB1101743;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TH_Purchase_Date);
 PARAMETER(PAR.TH_Group_Reference);
 PARAMETER(PAR.TH_Live_Purchase_UOM);
 PARAMETER(PAR.TH_Live_Purchase_Price);
 PARAMETER(PAR.TH_Live_Gross_Amt);
 PARAMETER(PAR.TH_LIve_Net_Amt);
 PARAMETER(PAR.TH_Resale_UOM);
 PARAMETER(PAR.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(PAR.TH_Pricing_Date);
 PARAMETER(PAR.TH_Resale_Spread_Sts);
 PARAMETER(PAR.TH_Dead_On_Arrival);
 PARAMETER(WRK.TH_Head_Received);
 PARAMETER(PAR.TH_Yard_Deads);
 PARAMETER(PAR.TH_Held_Over);
 PARAMETER(PAR.TH_Head_Condemned);
 PARAMETER(PAR.TH_Head_Killed);
 PARAMETER(PAR.TH_Head_Adds);
 PARAMETER(PAR.TH_Head_Accepted);
 PARAMETER(PAR.TH_Live_Wgt);
 PARAMETER(PAR.TH_Adj_Live_Wgt);
 PARAMETER(PAR.TH_Hot_Wgt);
 PARAMETER(PAR.TH_Tot_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Tot_Backfat_Inches);
 PARAMETER(PAR.TH_Tot_Light_Reflectance);
 PARAMETER(PAR.TH_Avg_Live_Wgt);
 PARAMETER(PAR.TH_Avg_Hot_Wgt);
 PARAMETER(PAR.TH_Avg_Light_Reflectance);
 PARAMETER(PAR.TH_Avg_Lean_Percent);
 PARAMETER(PAR.TH_Avg_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Avg_Backfat);
 PARAMETER(PAR.TH_Std_Yield_Percent);
 PARAMETER(PAR.TH_Actual_Yield);
 PARAMETER(PAR.TH_Adj_Actual_Yield);
 PARAMETER(PAR.TH_Yield_Difference);
 PARAMETER(PAR.TH_Recalc_Live_Wgt);
 PARAMETER(PAR.TH_CM_Market_Price);
 PARAMETER(PAR.TH_CM_Base_Mkt_Price);
 PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(PAR.TH_CM_Sort_Discount_Amt);
 PARAMETER(PAR.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(PAR.TH_CM_Base_Carcass_Value);
 PARAMETER(PAR.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(PAR.TH_CM_Carcass_Gross_Amt);
 PARAMETER(PAR.TH_Deduction_Amt);
 PARAMETER(PAR.TH_Total_Net_WO_Adds);
 PARAMETER(PAR.TH_Carcass_Net_Amt);
 PARAMETER(PAR.TH_Additions_Amt);
 PARAMETER(PAR.TH_Payment_Gross);
 PARAMETER(PAR.Th_Payment_Net_Amt);
 PARAMETER(PAR.TH_AP_Voucher_Document#);
 PARAMETER(PAR.TH_Freight_Amount);
 PARAMETER(PAR.TH_Accrual_Amount);
 PARAMETER(PAR.TH_Fixed_Cost_Amount);
 PARAMETER(PAR.TH_Calc_Net_Sts);
 PARAMETER(PAR.TH_Payment_Sts);
 PARAMETER(PAR.TH_Header_Error_Sts);
 PARAMETER(PAR.TH_Detail_Error_Sts);
 PARAMETER(PAR.TH_Kill_Balancing_Sts);
 PARAMETER(PAR.TH_Bal_to_Kill_Gen);
 PARAMETER(PAR.TH_Commission_A_P_Voucher);
 PARAMETER(PAR.TH_Voucher_Payment_Date);
 PARAMETER(PAR.TH_User_Error_Override);
 PARAMETER(PAR.TH_Held_Over_Record);
 PARAMETER(PAR.TH_Sex);
 PARAMETER(PAR.TH_Held_Ovr_Completed_Dte);
 PARAMETER(PAR.TH_Commission_Paid_Date);
 PARAMETER(PAR.TH_Actual_Check_Date);
 PARAMETER(PAR.TH_Shipped_Weight);
 PARAMETER(PAR.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(PAR.TH_FFLI);
 PARAMETER(PAR.TH_Kill_Product_Value);
 PARAMETER(PAR.TH_Cut_Product_Value);
 PARAMETER(PAR.TH_Render_Product_Value);
 PARAMETER(PAR.TH_Head_Excluded);
 PARAMETER(PAR.TH_CM_Bse_Mkt_Live_CWT);
 PARAMETER(PAR.TH_CM_Bse_Mkt_Carc_CWT);
 PARAMETER(PAR.TH_CM_Srt_Dsc_Live_CWT);
 PARAMETER(PAR.TH_CM_Srt_Dsc_Carc_CWT);
 PARAMETER(PAR.TH_CM_Yld_G_L_Live_CWT);
 PARAMETER(PAR.TH_CM_Yld_G_L_Carc_CWT);
 PARAMETER(PAR.TH_CM_Crc_Val_Live_CWT);
 PARAMETER(PAR.TH_CM_Crc_Val_Carc_CWT);
 PARAMETER(PAR.TH_CM_Lean_Prem_Live_CWT);
 PARAMETER(PAR.TH_CM_Lean_Prem_Carc_CWT);
 PARAMETER(PAR.TH_CM_Gross_Live_CWT);
 PARAMETER(PAR.TH_CM_Gross_Carc_CWT);
 PARAMETER(PAR.TH_Source_Type);
 PARAMETER(PAR.TH_Scale_Ticket_Sts);
 PARAMETER(PAR.TH_Payment_Type);
 PARAMETER(PAR.TH_HPS_Movement_Ref_#);
 PARAMETER(PAR.TH_Source_Code);
 PARAMETER(PAR.TH_Hog_Class_Type);
 PARAMETER(PAR.TH_Posted_to_HPS_Flag);
 PARAMETER(PAR.TH_Schedule_Kill_Shift);
 PARAMETER(PAR.TH_Shift_Held_Over);
 PARAMETER(PAR.TH_State);
 PARAMETER(PAR.TH_Unused_Code);
 PARAMETER(PAR.TH_Unused_Sts_2_Pos);
 PARAMETER(PAR.TH_Commission_Status);
 PARAMETER(PAR.TH_Paid_2_Week_Avg_Y_N);
 PARAMETER(PAR.TH_Unused_Sts_1_Pos_3);
 PARAMETER(PAR.TH_DOA_Weight);
 PARAMETER(PAR.TH_Avg_Lean_EXC_ADD);
 PARAMETER(PAR.TH_HPS_Farm_Site);
 PARAMETER(PAR.TH_Shift_Held_Over_Head);
 PARAMETER(PAR.TH_Sorting_Amount);
 PARAMETER(PAR.TH_Head_Identified);
 PARAMETER(PAR.TH_Percent_Identified);
 PARAMETER(PAR.TH_Percent_Accepted);
 PARAMETER(PAR.TH_Head_Adjusted_LN);
 PARAMETER(PAR.TH_PHA_Head_Adds);
 PARAMETER(PAR.TH_PHA_Add_Type);
 PARAMETER(PAR.TH_PHA_Average_Type);
 PARAMETER(PAR.TH_PHA_Add_Reason);
 PARAMETER(PAR.TH_PHA_Yield_Percent);
 PARAMETER(PAR.TH_PHA_Lean_Prm_Crc_CWT);
 PARAMETER(PAR.TH_VC_Gross_Value_HD);
 PARAMETER(PAR.TH_Excluded_Gross_Value);
 PARAMETER(PAR.TH_Avg_Lean);
 PARAMETER(PAR.TH_Broken_Back_Hd_Count);
 PARAMETER(PAR.TH_Hot_Scl_Upload_Time);
 PARAMETER(PAR.TH_Unused_Nbr_4);
 PARAMETER(PAR.TH_Excluded_Carc_Val);
 PARAMETER(PAR.TH_Excluded_Premium);
 PARAMETER(PAR.TH_Unused_Nbr_7);
 PARAMETER(PAR.TH_Unused_Nbr_8);
 PARAMETER(PAR.TH_Unused_Nbr_9);
 PARAMETER(PAR.TH_Unused_Nbr_10);
 PARAMETER(PAR.TH_Break_Even_Price_CWT);
 PARAMETER(PAR.TH_Meat_Value_Factor_Amt);
 PARAMETER(PAR.TH_Yld_Parm_Adj_Yield);
 PARAMETER(PAR.TH_PHA_Sort_Disc_Fctr);
 PARAMETER(PAR.TH_Avg_Loin_Eye_2_dec);
 PARAMETER(PAR.TH_Avg_Backfat_2_Dec);
 PARAMETER(PAR.TH_HITCH_Old_Pay_Net_Amt);
 PARAMETER(PAR.TH_MPR_Sort_Loss);
 PARAMETER(PAR.TH_Unused_Nbr_19);
 PARAMETER(PAR.TH_Unused_Nbr_20);
 PARAMETER(PAR.TH_Cold_Scl_Upload_Date);
 PARAMETER(PAR.TH_Cold_Scl_Upload_Time);
 PARAMETER(PAR.TH_Head_LFT);
 PARAMETER(PAR.TH_Head_EUT_KOA);
 PARAMETER(PAR.TH_Unused_Date_5);
 PARAMETER(PAR.TH_Unused_Sts_1);
 PARAMETER(PAR.TH_Unused_Sts_2);
 PARAMETER(PAR.TH_Unused_Sts_3);
 PARAMETER(PAR.TH_Unused_Sts_4);
 PARAMETER(PAR.TH_Unused_Sts_5);
 PARAMETER(PAR.TH_Unused_Sts_6);
 PARAMETER(PAR.TH_Unused_Sts_7);
 PARAMETER(PAR.TH_Unused_Sts_8);
 PARAMETER(PAR.DF_Defect_Code);
 PARAMETER(PAR.THP_Process_Code);
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PL_Location_Code);
 PARAMETER(PAR.HB_Buyer_Code);
 PARAMETER(PAR.GN_Genetic_Code);
 PARAMETER(PAR.HC_Class_Code);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(HPE056 Payment Type) TYPE(EXCINTFUN)                           AB1189849;
  {
   //?Execute internal function

   //?1/10/96  HPE056   Allow payment type to be update based on
   //?                  what the payment status is at the time this
   //?                  tattoo is being updated
  }

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

  // DB1.TH User Error Override = CND.No
  DB1.TH_User_Error_Override = 'N';

  EXECUTE FUNCTION(Chg/Crt Tatto/Spc Flds IF) TYPE(EXCINTFUN)                     AB1189848;
  PARAMETER(DB1.TH_Payment_Sts);
  PARAMETER(DB1.TH_Payment_Type);
  {
   //?Execute internal function

   EXECUTE FUNCTION(HPE056 Payment Type) TYPE(EXCINTFUN)                           AB1189849;
   {
    //?Execute internal function

    //?1/10/96  HPE056   Allow payment type to be update based on
    //?                  what the payment status is at the time this
    //?                  tattoo is being updated
   }

   //?Function Description:  If there are any fields that need to be
   //?Changed/Created during the Change functions or Create function
   //?Presently: Payment Type
   //?Add this routine to all of the change objects and create object
   //?that update the Payment Type
   CASE;

   // IF PAR.TH Payment Sts is Live anything
   IF PAR.TH_Payment_Sts = 'ML'/'PL'/'NL'/'SL'/'IL';

   // PAR.TH Payment Type = CND.Live
   PAR.TH_Payment_Type = 'L';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.TH Payment Type = CND.Carcass Merit
   PAR.TH_Payment_Type = 'C';

   ENDIF;

  }

 }

 //?New File Created(Buy order load EXT) to load Load SHipped Head
 EXECUTE FUNCTION(Upd Shipped Head      RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1226273;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.BOL_Shipped_Head);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Shipped Head      CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1226274;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.BOL_Shipped_Head);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 //?E00144 slm allow defects on Market and Resale
 //?Market hogs will only be for LFT OR EUT/KOA
 EXECUTE FUNCTION(Crt Tattoo Def-10     IF) TYPE(EXCINTFUN)                      AB1199890;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.Defect_User_1);
 PARAMETER(PAR.Defect_User_2);
 PARAMETER(PAR.Defect_User_3);
 PARAMETER(PAR.Defect_User_4);
 PARAMETER(PAR.Defect_User_5);
 PARAMETER(PAR.Defect_User_6);
 PARAMETER(PAR.Defect_User_7);
 PARAMETER(PAR.Defect_User_8);
 PARAMETER(PAR.Defect_User_9);
 PARAMETER(PAR.Defect_User_10);
 PARAMETER(PAR.Defect_HD_user_1);
 PARAMETER(PAR.Defect_HD_user_2);
 PARAMETER(PAR.Defect_HD_user_3);
 PARAMETER(PAR.Defect_HD_user_4);
 PARAMETER(PAR.Defect_HD_user_5);
 PARAMETER(PAR.Defect_HD_user_6);
 PARAMETER(PAR.Defect_HD_user_7);
 PARAMETER(PAR.Defect_HD_user_8);
 PARAMETER(PAR.Defect_HD_user_9);
 PARAMETER(PAR.Defect_HD_user_10);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Del Tattoo Def    RT) TYPE(RTVOBJ) FILE(PKDZREP)           AB1199889;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Dlt Tattoo Defect     DO) TYPE(DLTOBJ) FILE(PKDZREP)           AB1197900;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(DB1.DF_Defect_Code);
  }

  //?Defect 1
  CASE;

  // IF PAR.Defect User  1 NE WRK.Blank Usr 1 fld Usr
  IF PAR.Defect_User_1 <> WRK.Blank_Usr_1_fld_Usr;

  EXECUTE FUNCTION(Crt Tattoo Defect     CR) TYPE(CRTOBJ) FILE(PKDZREP)           AB1197898;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.Defect_User_1);
  PARAMETER(PAR.Defect_HD_user_1);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Hog Defect Class  RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1286918;
   PARAMETER(DB1.DF_Defect_Code);
   PARAMETER(DB1.TDF_Classification_Defs);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDIF;

  //?Defect 2
  CASE;

  // IF PAR.Defect User  2 NE WRK.Blank Usr 1 fld Usr
  IF PAR.Defect_User_2 <> WRK.Blank_Usr_1_fld_Usr;

  EXECUTE FUNCTION(Crt Tattoo Defect     CR) TYPE(CRTOBJ) FILE(PKDZREP)           AB1197898;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.Defect_User_2);
  PARAMETER(PAR.Defect_HD_user_2);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Hog Defect Class  RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1286918;
   PARAMETER(DB1.DF_Defect_Code);
   PARAMETER(DB1.TDF_Classification_Defs);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDIF;

  //?Defect 3
  CASE;

  // IF PAR.Defect User  3 NE WRK.Blank Usr 1 fld Usr
  IF PAR.Defect_User_3 <> WRK.Blank_Usr_1_fld_Usr;

  EXECUTE FUNCTION(Crt Tattoo Defect     CR) TYPE(CRTOBJ) FILE(PKDZREP)           AB1197898;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.Defect_User_3);
  PARAMETER(PAR.Defect_HD_user_3);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Hog Defect Class  RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1286918;
   PARAMETER(DB1.DF_Defect_Code);
   PARAMETER(DB1.TDF_Classification_Defs);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDIF;

  //?Defect 4
  CASE;

  // IF PAR.Defect User  4 NE WRK.Blank Usr 1 fld Usr
  IF PAR.Defect_User_4 <> WRK.Blank_Usr_1_fld_Usr;

  EXECUTE FUNCTION(Crt Tattoo Defect     CR) TYPE(CRTOBJ) FILE(PKDZREP)           AB1197898;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.Defect_User_4);
  PARAMETER(PAR.Defect_HD_user_4);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Hog Defect Class  RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1286918;
   PARAMETER(DB1.DF_Defect_Code);
   PARAMETER(DB1.TDF_Classification_Defs);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDIF;

  //?Defect 5
  CASE;

  // IF PAR.Defect User  5 NE WRK.Blank Usr 1 fld Usr
  IF PAR.Defect_User_5 <> WRK.Blank_Usr_1_fld_Usr;

  EXECUTE FUNCTION(Crt Tattoo Defect     CR) TYPE(CRTOBJ) FILE(PKDZREP)           AB1197898;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.Defect_User_5);
  PARAMETER(PAR.Defect_HD_user_5);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Hog Defect Class  RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1286918;
   PARAMETER(DB1.DF_Defect_Code);
   PARAMETER(DB1.TDF_Classification_Defs);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDIF;

  //?Defect 6
  CASE;

  // IF PAR.Defect User  6 NE WRK.Blank Usr 1 fld Usr
  IF PAR.Defect_User_6 <> WRK.Blank_Usr_1_fld_Usr;

  EXECUTE FUNCTION(Crt Tattoo Defect     CR) TYPE(CRTOBJ) FILE(PKDZREP)           AB1197898;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.Defect_User_6);
  PARAMETER(PAR.Defect_HD_user_6);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Hog Defect Class  RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1286918;
   PARAMETER(DB1.DF_Defect_Code);
   PARAMETER(DB1.TDF_Classification_Defs);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDIF;

  //?Defect 7
  CASE;

  // IF PAR.Defect User  7 NE WRK.Blank Usr 1 fld Usr
  IF PAR.Defect_User_7 <> WRK.Blank_Usr_1_fld_Usr;

  EXECUTE FUNCTION(Crt Tattoo Defect     CR) TYPE(CRTOBJ) FILE(PKDZREP)           AB1197898;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.Defect_User_7);
  PARAMETER(PAR.Defect_HD_user_7);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Hog Defect Class  RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1286918;
   PARAMETER(DB1.DF_Defect_Code);
   PARAMETER(DB1.TDF_Classification_Defs);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDIF;

  //?Defect 8
  CASE;

  // IF PAR.Defect User  8 NE WRK.Blank Usr 1 fld Usr
  IF PAR.Defect_User_8 <> WRK.Blank_Usr_1_fld_Usr;

  EXECUTE FUNCTION(Crt Tattoo Defect     CR) TYPE(CRTOBJ) FILE(PKDZREP)           AB1197898;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.Defect_User_8);
  PARAMETER(PAR.Defect_HD_user_8);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Hog Defect Class  RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1286918;
   PARAMETER(DB1.DF_Defect_Code);
   PARAMETER(DB1.TDF_Classification_Defs);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDIF;

  //?Defect 9
  CASE;

  // IF PAR.Defect User  9 NE WRK.Blank Usr 1 fld Usr
  IF PAR.Defect_User_9 <> WRK.Blank_Usr_1_fld_Usr;

  EXECUTE FUNCTION(Crt Tattoo Defect     CR) TYPE(CRTOBJ) FILE(PKDZREP)           AB1197898;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.Defect_User_9);
  PARAMETER(PAR.Defect_HD_user_9);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Hog Defect Class  RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1286918;
   PARAMETER(DB1.DF_Defect_Code);
   PARAMETER(DB1.TDF_Classification_Defs);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDIF;

  //?Defect 10
  CASE;

  // IF PAR.Defect User 10 NE WRK.Blank Usr 1 fld Usr
  IF PAR.Defect_User_10 <> WRK.Blank_Usr_1_fld_Usr;

  EXECUTE FUNCTION(Crt Tattoo Defect     CR) TYPE(CRTOBJ) FILE(PKDZREP)           AB1197898;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.Defect_User_10);
  PARAMETER(PAR.Defect_HD_user_10);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Hog Defect Class  RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1286918;
   PARAMETER(DB1.DF_Defect_Code);
   PARAMETER(DB1.TDF_Classification_Defs);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDIF;

 }

 CASE;

 // IF PAR.TH Hog Class Type is Market
 IF PAR.TH_Hog_Class_Type = 'M';

 // Call program Chg TaDefTots THdrBol XF.
 CALL PROGRAM(Chg TaDefTots THdrBol XF) ('PLL2XFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TH_Hog_Class_Type);

 ENDIF;

 //?Movement number to the Buy Order load
 CASE;

 // IF LCL.MTech Live Yes or No is Yes MTech is Live
 IF LCL.MTech_Live_Yes_or_No = 'Y';

 //?Live yes will allow the usr to enter the movment number
 //?in stead of assigning a movement number
 CASE;

 // IF PAR.TH Source Type is Internal
 IF PAR.TH_Source_Type = 'I';

 EXECUTE FUNCTION(Chg Movement# BOL     RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1313521;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_HPS_Movement_Ref_#);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.BOL HPS Movement Number is Not entered
  IF DB1.BOL_HPS_Movement_Number = *ZERO;

  EXECUTE FUNCTION(Chg Movement# Bol     CO) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1313522;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(PAR.TH_HPS_Movement_Ref_#);
  ENDIF;

 }

 ENDIF;

 ENDIF;

 //?4/8/2008 slm Support Issue - Move# and Reference was not
 //?getting updated in the delivery tracking if the tattoo was
 //?added.  This was getting updated on the change only
 //?If External -- change group/movement on Delv Tracking if its there.1/29/04
 CASE;

 // IF PAR.TH Source Type is External
 IF PAR.TH_Source_Type = 'E';

 EXECUTE FUNCTION(Rtv Chg Movemnt/Group RT) TYPE(RTVOBJ) FILE(PLAFCPP)           AB1257256;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Group_Reference);
 PARAMETER(PAR.TH_HPS_Movement_Ref_#);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Movement/Group    CH) TYPE(CHGOBJ) FILE(PLAFCPP)           AB1257255;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(DB1.DSH_Kill_Date);
  PARAMETER(DB1.DT_Delivery_Date);
  PARAMETER(DB1.DT_Delivery_Time);
  PARAMETER(DB1.DT_Delivery_Time_Seq);
  PARAMETER(PAR.DT_Hog_Group_Reference);
  PARAMETER(PAR.DT_Movement_Number);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 //?** 12/28/05 LJB - Create Tattoo hdr ext rec with Producer code and
 //?** site id
 EXECUTE FUNCTION(Crt TatHdrExt WTPrdSitCO) TYPE(CRTOBJ) FILE(PKDNCPP)           AB1270572;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.TE_Unused_Number_1);
 PARAMETER(LCL.TE_UnUsed_Number_2);
 PARAMETER(LCL.TE_Unused_Number_3);
 PARAMETER(LCL.TE_Unused_Status_1);
 PARAMETER(LCL.TE_Unused_Status_2);
 PARAMETER(LCL.TE_Unused_Status_3);
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PS_Site_ID);
 PARAMETER(PAR.Producer_Subsidiary_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

  // DB1.RS User Changed = CON.*BLANK
  DB1.RS_User_Changed = *BLANK;

  // DB1.RS Date Changed = CON.*ZERO
  DB1.RS_Date_Changed = *ZERO;

  // DB1.RS Time Changed = CON.*ZERO
  DB1.RS_Time_Changed = *ZERO;

 }

 //?Send "Tatto has been added" message
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // Send information message - 'Tattoo &1 has been added.'
 MESSAGE(PRK0359 *INFO);
 MSGPARM(PAR.TH_Tattoo_Number);

 // PAR.Record Added Usr = CND.Yes
 PAR.Record_Added_Usr = 'Y';

 QUIT;

 ENDIF;

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Tattoo Header,Pen IF) TYPE(EXCINTFUN) FILE(PKA1CPP)        AB1156233;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(DTL.TH_Purchase_Date);
PARAMETER(DTL.TH_Group_Reference);
PARAMETER(DTL.TH_Live_Purchase_UOM);
PARAMETER(DTL.TH_Live_Purchase_Price);
PARAMETER(DTL.TH_Live_Gross_Amt);
PARAMETER(DTL.TH_LIve_Net_Amt);
PARAMETER(DTL.TH_Resale_UOM);
PARAMETER(DTL.TH_Recalc_Live_Wgt_Yld);
PARAMETER(DTL.TH_Pricing_Date);
PARAMETER(DTL.TH_Resale_Spread_Sts);
PARAMETER(DTL.TH_Dead_On_Arrival);
PARAMETER(DTL.TH_Head_Received);
PARAMETER(DTL.TH_Yard_Deads);
PARAMETER(DTL.TH_Held_Over);
PARAMETER(DTL.TH_Head_Condemned);
PARAMETER(DTL.TH_Head_Killed);
PARAMETER(DTL.TH_Head_Adds);
PARAMETER(DTL.TH_Head_Accepted);
PARAMETER(DTL.TH_Live_Wgt);
PARAMETER(DTL.TH_Adj_Live_Wgt);
PARAMETER(DTL.TH_Hot_Wgt);
PARAMETER(DTL.TH_Tot_Loin_Eye_Depth);
PARAMETER(DTL.TH_Tot_Backfat_Inches);
PARAMETER(DTL.TH_Tot_Light_Reflectance);
PARAMETER(DTL.TH_Avg_Live_Wgt);
PARAMETER(DTL.TH_Avg_Hot_Wgt);
PARAMETER(DTL.TH_Avg_Light_Reflectance);
PARAMETER(DTL.TH_Avg_Lean_Percent);
PARAMETER(DTL.TH_Avg_Loin_Eye_Depth);
PARAMETER(DTL.TH_Avg_Backfat);
PARAMETER(DTL.TH_Std_Yield_Percent);
PARAMETER(DTL.TH_Actual_Yield);
PARAMETER(DTL.TH_Adj_Actual_Yield);
PARAMETER(DTL.TH_Yield_Difference);
PARAMETER(DTL.TH_Recalc_Live_Wgt);
PARAMETER(DTL.TH_CM_Market_Price);
PARAMETER(DTL.TH_CM_Base_Mkt_Price);
PARAMETER(DTL.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(DTL.TH_CM_Sort_Discount_Amt);
PARAMETER(DTL.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(DTL.TH_CM_Base_Carcass_Value);
PARAMETER(DTL.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(DTL.TH_CM_Carcass_Gross_Amt);
PARAMETER(DTL.TH_Deduction_Amt);
PARAMETER(DTL.TH_Total_Net_WO_Adds);
PARAMETER(DTL.TH_Carcass_Net_Amt);
PARAMETER(DTL.TH_Additions_Amt);
PARAMETER(DTL.TH_Payment_Gross);
PARAMETER(DTL.Th_Payment_Net_Amt);
PARAMETER(DTL.TH_AP_Voucher_Document#);
PARAMETER(DTL.TH_Freight_Amount);
PARAMETER(DTL.TH_Accrual_Amount);
PARAMETER(DTL.TH_Fixed_Cost_Amount);
PARAMETER(DTL.TH_Calc_Net_Sts);
PARAMETER(DTL.TH_Payment_Sts);
PARAMETER(DTL.TH_Header_Error_Sts);
PARAMETER(DTL.TH_Detail_Error_Sts);
PARAMETER(DTL.TH_Kill_Balancing_Sts);
PARAMETER(DTL.TH_Bal_to_Kill_Gen);
PARAMETER(DTL.TH_Commission_A_P_Voucher);
PARAMETER(DTL.TH_Voucher_Payment_Date);
PARAMETER(DTL.TH_User_Error_Override);
PARAMETER(DTL.TH_Held_Over_Record);
PARAMETER(DTL.TH_Sex);
PARAMETER(DTL.TH_Held_Ovr_Completed_Dte);
PARAMETER(DTL.TH_Commission_Paid_Date);
PARAMETER(DTL.TH_Actual_Check_Date);
PARAMETER(DTL.TH_Shipped_Weight);
PARAMETER(DTL.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(DTL.TH_FFLI);
PARAMETER(DTL.TH_Kill_Product_Value);
PARAMETER(DTL.TH_Cut_Product_Value);
PARAMETER(DTL.TH_Render_Product_Value);
PARAMETER(DTL.TH_Head_Excluded);
PARAMETER(DTL.TH_CM_Bse_Mkt_Live_CWT);
PARAMETER(DTL.TH_CM_Bse_Mkt_Carc_CWT);
PARAMETER(DTL.TH_CM_Srt_Dsc_Live_CWT);
PARAMETER(DTL.TH_CM_Srt_Dsc_Carc_CWT);
PARAMETER(DTL.TH_CM_Yld_G_L_Live_CWT);
PARAMETER(DTL.TH_CM_Yld_G_L_Carc_CWT);
PARAMETER(DTL.TH_CM_Crc_Val_Live_CWT);
PARAMETER(DTL.TH_CM_Crc_Val_Carc_CWT);
PARAMETER(DTL.TH_CM_Lean_Prem_Live_CWT);
PARAMETER(DTL.TH_CM_Lean_Prem_Carc_CWT);
PARAMETER(DTL.TH_CM_Gross_Live_CWT);
PARAMETER(DTL.TH_CM_Gross_Carc_CWT);
PARAMETER(DTL.TH_Source_Type);
PARAMETER(DTL.TH_Scale_Ticket_Sts);
PARAMETER(DTL.TH_Payment_Type);
PARAMETER(DTL.TH_HPS_Movement_Ref_#);
PARAMETER(DTL.TH_Source_Code);
PARAMETER(DTL.TH_Hog_Class_Type);
PARAMETER(DTL.TH_Posted_to_HPS_Flag);
PARAMETER(DTL.TH_Schedule_Kill_Shift);
PARAMETER(DTL.TH_Shift_Held_Over);
PARAMETER(DTL.TH_State);
PARAMETER(DTL.TH_Unused_Code);
PARAMETER(DTL.TH_Unused_Sts_2_Pos);
PARAMETER(DTL.TH_Commission_Status);
PARAMETER(DTL.TH_Paid_2_Week_Avg_Y_N);
PARAMETER(DTL.TH_Unused_Sts_1_Pos_3);
PARAMETER(DTL.TH_DOA_Weight);
PARAMETER(DTL.TH_Avg_Lean_EXC_ADD);
PARAMETER(DTL.TH_HPS_Farm_Site);
PARAMETER(DTL.TH_Shift_Held_Over_Head);
PARAMETER(DTL.TH_Sorting_Amount);
PARAMETER(DTL.TH_Head_Identified);
PARAMETER(DTL.TH_Percent_Identified);
PARAMETER(DTL.TH_Percent_Accepted);
PARAMETER(DTL.TH_Head_Adjusted_LN);
PARAMETER(DTL.TH_PHA_Head_Adds);
PARAMETER(DTL.TH_PHA_Add_Type);
PARAMETER(DTL.TH_PHA_Average_Type);
PARAMETER(DTL.TH_PHA_Add_Reason);
PARAMETER(DTL.TH_PHA_Yield_Percent);
PARAMETER(DTL.TH_PHA_Lean_Prm_Crc_CWT);
PARAMETER(DTL.TH_VC_Gross_Value_HD);
PARAMETER(DTL.TH_Excluded_Gross_Value);
PARAMETER(DTL.TH_Avg_Lean);
PARAMETER(DTL.TH_Broken_Back_Hd_Count);
PARAMETER(DTL.TH_Hot_Scl_Upload_Time);
PARAMETER(DTL.TH_Unused_Nbr_4);
PARAMETER(DTL.TH_Excluded_Carc_Val);
PARAMETER(DTL.TH_Excluded_Premium);
PARAMETER(DTL.TH_Unused_Nbr_7);
PARAMETER(DTL.TH_Unused_Nbr_8);
PARAMETER(DTL.TH_Unused_Nbr_9);
PARAMETER(DTL.TH_Unused_Nbr_10);
PARAMETER(DTL.TH_Break_Even_Price_CWT);
PARAMETER(DTL.TH_Meat_Value_Factor_Amt);
PARAMETER(DTL.TH_Yld_Parm_Adj_Yield);
PARAMETER(DTL.TH_PHA_Sort_Disc_Fctr);
PARAMETER(DTL.TH_Avg_Loin_Eye_2_dec);
PARAMETER(DTL.TH_Avg_Backfat_2_Dec);
PARAMETER(DTL.TH_HITCH_Old_Pay_Net_Amt);
PARAMETER(DTL.TH_MPR_Sort_Loss);
PARAMETER(DTL.TH_Unused_Nbr_19);
PARAMETER(DTL.TH_Unused_Nbr_20);
PARAMETER(DTL.TH_Cold_Scl_Upload_Date);
PARAMETER(DTL.TH_Cold_Scl_Upload_Time);
PARAMETER(DTL.TH_Head_LFT);
PARAMETER(DTL.TH_Head_EUT_KOA);
PARAMETER(DTL.TH_Unused_Date_5);
PARAMETER(DTL.TH_Unused_Sts_1);
PARAMETER(DTL.TH_Unused_Sts_2);
PARAMETER(DTL.TH_Unused_Sts_3);
PARAMETER(DTL.TH_Unused_Sts_4);
PARAMETER(DTL.TH_Unused_Sts_5);
PARAMETER(DTL.TH_Unused_Sts_6);
PARAMETER(DTL.TH_Unused_Sts_7);
PARAMETER(DTL.TH_Unused_Sts_8);
PARAMETER(DTL.DF_Defect_Code);
PARAMETER(DTL.THP_Process_Code);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.PL_Location_Code);
PARAMETER(DTL.HB_Buyer_Code);
PARAMETER(DTL.GN_Genetic_Code);
PARAMETER(DTL.HC_Class_Code);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
PARAMETER(WRK.GN_Genetic_Code);
PARAMETER(DTL.Defect_User_1);
PARAMETER(DTL.Defect_User_2);
PARAMETER(DTL.Defect_User_3);
PARAMETER(DTL.Defect_User_4);
PARAMETER(DTL.Defect_User_5);
PARAMETER(DTL.Defect_User_6);
PARAMETER(DTL.Defect_User_7);
PARAMETER(DTL.Defect_User_8);
PARAMETER(DTL.Defect_User_9);
PARAMETER(DTL.Defect_User_10);
PARAMETER(DTL.Defect_HD_user_1);
PARAMETER(DTL.Defect_HD_user_2);
PARAMETER(DTL.Defect_HD_user_3);
PARAMETER(DTL.Defect_HD_user_4);
PARAMETER(DTL.Defect_HD_user_5);
PARAMETER(DTL.Defect_HD_user_6);
PARAMETER(DTL.Defect_HD_user_7);
PARAMETER(DTL.Defect_HD_user_8);
PARAMETER(DTL.Defect_HD_user_9);
PARAMETER(DTL.Defect_HD_user_10);
PARAMETER(DTL.PS_Site_ID);
PARAMETER(DTL.Pen_Number);
PARAMETER(DTL.Producer_Subsidiary_Code);
PARAMETER(DTL.Head_Total_USR);
PARAMETER(WRK.@Status_Internal_Y_N);
PARAMETER(WRK.Pen_Usr);
PARAMETER(DTL.BOL_Shipped_Head);
PARAMETER(WRK.Prior_Movement_#);
{
 //?Execute internal function

 //?Modificaitons and Comments
 DO;

 //?E10812 JJH 01/22/18 - Market Hog Order to Cash
 //?- Update the Movement Number in the Buy Order Load, If
 //?  - Producer's HSP Autamation Flag = Y, and
 //?  - External Hog
 ENDDO;

 //?Mtech
 DO;

 //?Mtech Live Yes or no
 //?E2423 Update the Buy Order Load movement if internal
 //?and the tattoo has a movement number find out if the buy ordere load
 //?needs to get updated as well
 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER('MTECHLIVE');
 PARAMETER(WRK.System_Value_Alpha_USR);

 // LCL.MTech Live Yes or No = WRK.System Value Alpha    USR
 LCL.MTech_Live_Yes_or_No = WRK.System_Value_Alpha_USR;

 ENDDO;

 //?IF Internal -- chg td and pen
 CASE;

 // IF PAR.@Status Internal (Y/N) is No
 IF PAR.@Status_Internal_Y_N = *BLANK;

 // OR PAR.TH Resale Spread Sts is Not Spread/Spread
 OR PAR.TH_Resale_Spread_Sts = *BLANK/'P';

 // WRK.TH Head Received = PAR.TH Head Received
 WRK.TH_Head_Received = PAR.TH_Head_Received;

 //?IF Internal -- chg td and pen
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.TH Head Received = PAR.Head Total USR
 WRK.TH_Head_Received = PAR.Head_Total_USR;

 EXECUTE FUNCTION(Rtv Crt/Chg hd, pen  RT) TYPE(RTVOBJ) FILE(PKA2CPP)            AB1203946;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(1);
 PARAMETER(PAR.Head_Total_USR);
 PARAMETER(PAR.Pen_Number);
 {
  //?USER: Processing if Data record not found

  // Call program Zzz Tattoo Dtl Rsl    XF.
  CALL PROGRAM(Zzz Tattoo Dtl Rsl    XF) ('PKMMXFR');
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER('N');
  PARAMETER('N');
  PARAMETER('N');
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.Pen_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.TD_Pen_Head);

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Tattoo Detail     CH) TYPE(CHGOBJ) FILE(PKA2CPP)           AB1101751;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.TD_Sequence_Number);
  PARAMETER(DB1.TD_Live_Wgt);
  PARAMETER(PAR.TD_Pen_Head);
  PARAMETER(DB1.TD_Yard_Dead);
  PARAMETER(DB1.TD_Held_Over);
  PARAMETER(DB1.TD_Held_Over_Status);
  PARAMETER(DB1.TD_Drive_Time);
  PARAMETER(DB1.TD_Drive_Hour);
  PARAMETER(DB1.TD_Drive_Card_Number);
  PARAMETER(DB1.TD_Avg_Live_Wgt);
  PARAMETER(DB1.TD_Gen_Bal_To_Kill);
  PARAMETER(DB1.TD_Recs_Created_for_HO);
  PARAMETER(DB1.TD_User_Status_2);
  PARAMETER(DB1.TD_User_Status_3);
  PARAMETER(DB1.TD_User_Date_1);
  PARAMETER(DB1.TD_User_Date_2);
  PARAMETER(DB1.TD_Drive_Date);
  PARAMETER(DB1.Pen_Company_Number);
  PARAMETER(PAR.Pen_Number);
  PARAMETER(DB1.TDP_Process_Code);
  PARAMETER(DB1.Held_Over_Pen_Company_Num);
  PARAMETER(DB1.Held_Over_Pen_Number);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 //?Update BOL if head received changed with the head diff.
 CASE;

 // IF PAR.Head Total USR NE PAR.TH Head Received
 IF PAR.Head_Total_USR <> PAR.TH_Head_Received;

 // WRK.Head Total Usr 2 = PAR.Head Total USR - PAR.TH Head Received
 WRK.Head_Total_Usr_2 = PAR.Head_Total_USR - PAR.TH_Head_Received;

 // WRK.BOL Live Wgt Received = CON.*ZERO
 WRK.BOL_Live_Wgt_Received = *ZERO;

 EXECUTE FUNCTION(Rtv/Chg Bol Hd rcvd   RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1184135;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(WRK.Head_Total_Usr_2);
 PARAMETER(WRK.BOL_Live_Wgt_Received);
 {
  //?USER: Process Data record

  // WRK.BOL Head Received = DB1.BOL Head Received + PAR.BOL Head Received
  WRK.BOL_Head_Received = DB1.BOL_Head_Received + PAR.BOL_Head_Received;

  // WRK.BOL Live Wgt Received = DB1.BOL Live Wgt Received + PAR.BOL Live Wgt Receive
  WRK.BOL_Live_Wgt_Received = DB1.BOL_Live_Wgt_Received + PAR.BOL_Live_Wgt_Received;

  //?Calculate freight based on the unit of measure
  // WRK.BOL Freight Amt = DB1.BOL Freight Amt
  WRK.BOL_Freight_Amt = DB1.BOL_Freight_Amt;

  EXECUTE FUNCTION(Chk tatto Paid for Bol RT) TYPE(RTVOBJ) FILE(PKA1CPP)          AB1183687;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(WRK.Tattoo_is_paid_Usr);
  PARAMETER(WRK.Held_Over_Records_Y_N);
  PARAMETER(WRK.Tot_Frt_Spdb_aft_pay_Usr);
  {
   //?USER: Initialize routine

   // PAR.Tot Frt Spdb aft pay Usr = CON.*ZERO
   PAR.Tot_Frt_Spdb_aft_pay_Usr = *ZERO;

   // PAR.Held Over Records Y/N = CND.No
   PAR.Held_Over_Records_Y_N = 'N';

   // PAR.Tattoo is paid Usr = CND.No
   PAR.Tattoo_is_paid_Usr = 'N';

   //?USER: Process Data record

   //?If one tattoo is paid but freight was spread then accumulate
   //?what is paid, for held over respread problem
   //?when this probelm goes away, then just flag that there is one paid
   CASE;

   // IF DB1.TH Payment Sts is Paid Anything
   IF DB1.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

   //?CHECK IF FREIGHT AMOUNT IS IN RECORD
   CASE;

   // IF DB1.TH Freight Amount is Not Zeros
   IF DB1.TH_Freight_Amount <> *ZERO;

   // PAR.Tattoo is paid Usr = CND.Yes
   PAR.Tattoo_is_paid_Usr = 'Y';

   ENDIF;

   // PAR.Tot Frt Spdb aft pay Usr = PAR.Tot Frt Spdb aft pay Usr + DB1.TH Freight Amo
   PAR.Tot_Frt_Spdb_aft_pay_Usr = PAR.Tot_Frt_Spdb_aft_pay_Usr + DB1.TH_Freight_Amount;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?CHECK FOR HELD OVER RECORD
   CASE;

   // IF DB1.TH Held Over Record is Yes
   IF DB1.TH_Held_Over_Record = 'Y';

   // OR DB1.TH Held Over is greater than 0
   OR DB1.TH_Held_Over > *ZERO;

   // PAR.Held Over Records Y/N = CND.Yes
   PAR.Held_Over_Records_Y_N = 'Y';

   ENDIF;

   ENDIF;

  }

  CASE;

  // IF DB1.BOL Freight Allocation is Freight is Allocated
  IF DB1.BOL_Freight_Allocation = 'Y';

  // AND WRK.Tattoo is paid Usr is Yes
  AND WRK.Tattoo_is_paid_Usr = 'Y';

  // IF DB1.BOL Trucker Payment Sts is Paid Trucker
  IF DB1.BOL_Trucker_Payment_Sts = 'PT';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Call program Clc Freight Amt       XF.
  CALL PROGRAM(Clc Freight Amt       XF) ('PKQ5XFR');
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.BOL_Freight_UOM);
  PARAMETER(DB1.BOL_Freight_Unit_Amt);
  PARAMETER(WRK.BOL_Freight_Amt);
  PARAMETER(DB1.BOL_Freight_Allocation);
  PARAMETER(WRK.BOL_Head_Received);
  PARAMETER(WRK.BOL_Live_Wgt_Received);

  ENDIF;

  CASE;

  // IF WRK.BOL Freight Amt is Not Zeros
  IF WRK.BOL_Freight_Amt <> *ZERO;

  // AND WRK.BOL Head Received is Greater then Zero
  AND WRK.BOL_Head_Received > *ZERO;

  // AND DB1.BOL Trucker Payment Sts is Blank
  AND DB1.BOL_Trucker_Payment_Sts = *BLANK;

  // WRK.BOL Trucker Payment Sts = CND.Select Trucker
  WRK.BOL_Trucker_Payment_Sts = 'ST';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.BOL Trucker Payment Sts = DB1.BOL Trucker Payment Sts
  WRK.BOL_Trucker_Payment_Sts = DB1.BOL_Trucker_Payment_Sts;

  ENDIF;

  EXECUTE FUNCTION(Chg Buy Order Detail  CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1100531;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.BOL_Kill_Date);
  PARAMETER(DB1.BOL_Pln_Delv_Start_Time);
  PARAMETER(DB1.BOL_Pln_Delv_End_Time);
  PARAMETER(DB1.BOL_Pln_Head_Delv);
  PARAMETER(DB1.BOL_Shipped_Wgt);
  PARAMETER(DB1.BOL_Pln_Delv_Date);
  PARAMETER(DB1.BOL_Freight_UOM);
  PARAMETER(DB1.BOL_Freight_Unit_Amt);
  PARAMETER(WRK.BOL_Freight_Amt);
  PARAMETER(DB1.BOL_Freight_Allocation);
  PARAMETER(WRK.BOL_Head_Received);
  PARAMETER(WRK.BOL_Live_Wgt_Received);
  PARAMETER(WRK.BOL_Trucker_Payment_Sts);
  PARAMETER(DB1.BOL_Trucker_Check_Number);
  PARAMETER(DB1.BOL_Trucker_Check_Date);
  PARAMETER(DB1.BOL_AP_Voucher);
  PARAMETER(DB1.BOL_Trailer);
  PARAMETER(DB1.BOL_Freight_Exp_Paid_By);
  PARAMETER(DB1.BOL_Scheduled_Kill_Shift);
  PARAMETER(DB1.BOL_Truck_Scale_Weigh_Sts);
  PARAMETER(DB1.BOL_Violated_Auth_Tme_Sts);
  PARAMETER(DB1.TRK_Trucker_Code);
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(DB1.PL_Location_Code);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 //?Update pen count  -- if head or pen changed
 CASE;

 // IF PAR.Head Total USR NE PAR.TH Head Received
 IF PAR.Head_Total_USR <> PAR.TH_Head_Received;

 // OR PAR.Pen Number NE PAR.Pen Usr
 OR PAR.Pen_Number <> PAR.Pen_Usr;

 EXECUTE FUNCTION(Rtv Dtl hd/Chg Pen    RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1110385;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.Pen_Number);
 {
  //?USER: Initialize routine

  EXECUTE FUNCTION(Set Pen Totals to Zeros) TYPE(RTVOBJ) FILE(PKA3REP)            AB1110376;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.Pen_Number);
  PARAMETER(*ZERO);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Pen               CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1102758;
   PARAMETER(DB1.Pen_Company_Number);
   PARAMETER(DB1.Pen_Number);
   PARAMETER(WRK.Blank_USR);
   PARAMETER(DB1.Pen_Maximun_Capacity);
   PARAMETER(*ZERO);
   PARAMETER(DB1.Pen_Current_Drive_Card_No);
   PARAMETER(DB1.Pen_Sts);
   PARAMETER(DB1.Pen_Drive_Sequence);
   PARAMETER(DB1.Pen_Type);
   PARAMETER(DB1.Pen_Adjustment);
   PARAMETER(WRK.Blank_USR);
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

  //?USER: Processing if Data record not found

  // WRK.Pen Description = CON.*BLANK
  WRK.Pen_Description = *BLANK;

  // WRK.GN Genetic Code = CON.*BLANK
  WRK.GN_Genetic_Code = *BLANK;

  EXECUTE FUNCTION(Chg Pen Genetics      CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1119678;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.Pen_Number);
  PARAMETER(WRK.Pen_Description);
  PARAMETER(WRK.GN_Genetic_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv/Chg Pen Totals    RT) TYPE(RTVOBJ) FILE(PKA3REP)           AB1110372;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(DB1.TD_Pen_Head);
  PARAMETER(DB1.TD_Yard_Dead);
  {
   //?USER: Process Data record

   // WRK.Pen Current Head = PAR.TD Pen Head + DB1.Pen Current Head
   WRK.Pen_Current_Head = PAR.TD_Pen_Head + DB1.Pen_Current_Head;

   // WRK.Pen Current Head = WRK.Pen Current Head - PAR.TD Yard Dead
   WRK.Pen_Current_Head = WRK.Pen_Current_Head - PAR.TD_Yard_Dead;

   EXECUTE FUNCTION(Chg Pen               CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1102758;
   PARAMETER(DB1.Pen_Company_Number);
   PARAMETER(DB1.Pen_Number);
   PARAMETER(DB1.Pen_Description);
   PARAMETER(DB1.Pen_Maximun_Capacity);
   PARAMETER(WRK.Pen_Current_Head);
   PARAMETER(DB1.Pen_Current_Drive_Card_No);
   PARAMETER(DB1.Pen_Sts);
   PARAMETER(DB1.Pen_Drive_Sequence);
   PARAMETER(DB1.Pen_Type);
   PARAMETER(DB1.Pen_Adjustment);
   PARAMETER(DB1.GN_Genetic_Code);
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

  //?USER: Exit processing

  // WRK.Pen Description = CON.*BLANK
  WRK.Pen_Description = *BLANK;

  // WRK.GN Genetic Code = CON.*BLANK
  WRK.GN_Genetic_Code = *BLANK;

  EXECUTE FUNCTION(Rtv Pen GENETICS      RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1107816;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(WRK.Pen_Description);
  PARAMETER(WRK.GN_Genetic_Code);
  {
   //?USER: Processing if Data record not found

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Pen_Description = *BLANK;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.GN_Genetic_Code = *BLANK;

   //?USER: Process Data record

   CASE;

   // IF DB1.TDP Process Code is Drive Card Printed
   IF DB1.TDP_Process_Code = 'D';

   // OR DB1.TDP Process Code is Open
   OR DB1.TDP_Process_Code = 'O';

   EXECUTE FUNCTION(Rtv Tattoo GENETICS) TYPE(RTVOBJ) FILE(PKA1CPP)                AB1107783;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(WRK.Genetic_Code_USR);
   PARAMETER(WRK.Pen_Desc_USR);
   {
    //?USER: Processing if Data record not found

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.GN_Genetic_Code = *BLANK;

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.Pen_Description = *BLANK;

    //?USER: Process Data record

    // PAR.GN Genetic Code = DB1.GN Genetic Code
    PAR.GN_Genetic_Code = DB1.GN_Genetic_Code;

    EXECUTE FUNCTION(Rtv Genetic Record    RT) TYPE(RTVOBJ) FILE(PKAIREP)           AB1107738;
    PARAMETER(DB1.GN_Genetic_Code);
    PARAMETER(PAR.Pen_Description);
    {
     //?USER: Processing if Data record not found

     // *MO.VE             1183529*Bu = ilt. in functions
     PAR.GN_Description = *BLANK;

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

   }

   CASE;

   // IF PAR.GN Genetic Code is BLANKS
   IF PAR.GN_Genetic_Code = *BLANK;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.GN_Genetic_Code = WRK.Genetic_Code_USR;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Pen_Description = WRK.Pen_Desc_USR;

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF WRK.Genetic Code USR NE PAR.GN Genetic Code
   IF WRK.Genetic_Code_USR <> PAR.GN_Genetic_Code;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Pen_Description = 'MIXED';

   ENDIF;

   ENDIF;

   ENDIF;

  }

  EXECUTE FUNCTION(Chg Pen Genetics      CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1119678;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.Pen_Number);
  PARAMETER(WRK.Pen_Description);
  PARAMETER(WRK.GN_Genetic_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 //?Update pen count -- original pen if pen changed
 CASE;

 // IF PAR.Pen Number NE PAR.Pen Usr
 IF PAR.Pen_Number <> PAR.Pen_Usr;

 // AND PAR.Pen Usr is Pen Number not Empty
 AND PAR.Pen_Usr > *BLANK;

 EXECUTE FUNCTION(Rtv Dtl hd/Chg Pen    RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1110385;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.Pen_Usr);
 {
  //?USER: Initialize routine

  EXECUTE FUNCTION(Set Pen Totals to Zeros) TYPE(RTVOBJ) FILE(PKA3REP)            AB1110376;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.Pen_Number);
  PARAMETER(*ZERO);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Pen               CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1102758;
   PARAMETER(DB1.Pen_Company_Number);
   PARAMETER(DB1.Pen_Number);
   PARAMETER(WRK.Blank_USR);
   PARAMETER(DB1.Pen_Maximun_Capacity);
   PARAMETER(*ZERO);
   PARAMETER(DB1.Pen_Current_Drive_Card_No);
   PARAMETER(DB1.Pen_Sts);
   PARAMETER(DB1.Pen_Drive_Sequence);
   PARAMETER(DB1.Pen_Type);
   PARAMETER(DB1.Pen_Adjustment);
   PARAMETER(WRK.Blank_USR);
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

  //?USER: Processing if Data record not found

  // WRK.Pen Description = CON.*BLANK
  WRK.Pen_Description = *BLANK;

  // WRK.GN Genetic Code = CON.*BLANK
  WRK.GN_Genetic_Code = *BLANK;

  EXECUTE FUNCTION(Chg Pen Genetics      CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1119678;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.Pen_Number);
  PARAMETER(WRK.Pen_Description);
  PARAMETER(WRK.GN_Genetic_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv/Chg Pen Totals    RT) TYPE(RTVOBJ) FILE(PKA3REP)           AB1110372;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(DB1.TD_Pen_Head);
  PARAMETER(DB1.TD_Yard_Dead);
  {
   //?USER: Process Data record

   // WRK.Pen Current Head = PAR.TD Pen Head + DB1.Pen Current Head
   WRK.Pen_Current_Head = PAR.TD_Pen_Head + DB1.Pen_Current_Head;

   // WRK.Pen Current Head = WRK.Pen Current Head - PAR.TD Yard Dead
   WRK.Pen_Current_Head = WRK.Pen_Current_Head - PAR.TD_Yard_Dead;

   EXECUTE FUNCTION(Chg Pen               CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1102758;
   PARAMETER(DB1.Pen_Company_Number);
   PARAMETER(DB1.Pen_Number);
   PARAMETER(DB1.Pen_Description);
   PARAMETER(DB1.Pen_Maximun_Capacity);
   PARAMETER(WRK.Pen_Current_Head);
   PARAMETER(DB1.Pen_Current_Drive_Card_No);
   PARAMETER(DB1.Pen_Sts);
   PARAMETER(DB1.Pen_Drive_Sequence);
   PARAMETER(DB1.Pen_Type);
   PARAMETER(DB1.Pen_Adjustment);
   PARAMETER(DB1.GN_Genetic_Code);
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

  //?USER: Exit processing

  // WRK.Pen Description = CON.*BLANK
  WRK.Pen_Description = *BLANK;

  // WRK.GN Genetic Code = CON.*BLANK
  WRK.GN_Genetic_Code = *BLANK;

  EXECUTE FUNCTION(Rtv Pen GENETICS      RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1107816;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(WRK.Pen_Description);
  PARAMETER(WRK.GN_Genetic_Code);
  {
   //?USER: Processing if Data record not found

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Pen_Description = *BLANK;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.GN_Genetic_Code = *BLANK;

   //?USER: Process Data record

   CASE;

   // IF DB1.TDP Process Code is Drive Card Printed
   IF DB1.TDP_Process_Code = 'D';

   // OR DB1.TDP Process Code is Open
   OR DB1.TDP_Process_Code = 'O';

   EXECUTE FUNCTION(Rtv Tattoo GENETICS) TYPE(RTVOBJ) FILE(PKA1CPP)                AB1107783;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(WRK.Genetic_Code_USR);
   PARAMETER(WRK.Pen_Desc_USR);
   {
    //?USER: Processing if Data record not found

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.GN_Genetic_Code = *BLANK;

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.Pen_Description = *BLANK;

    //?USER: Process Data record

    // PAR.GN Genetic Code = DB1.GN Genetic Code
    PAR.GN_Genetic_Code = DB1.GN_Genetic_Code;

    EXECUTE FUNCTION(Rtv Genetic Record    RT) TYPE(RTVOBJ) FILE(PKAIREP)           AB1107738;
    PARAMETER(DB1.GN_Genetic_Code);
    PARAMETER(PAR.Pen_Description);
    {
     //?USER: Processing if Data record not found

     // *MO.VE             1183529*Bu = ilt. in functions
     PAR.GN_Description = *BLANK;

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

   }

   CASE;

   // IF PAR.GN Genetic Code is BLANKS
   IF PAR.GN_Genetic_Code = *BLANK;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.GN_Genetic_Code = WRK.Genetic_Code_USR;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Pen_Description = WRK.Pen_Desc_USR;

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF WRK.Genetic Code USR NE PAR.GN Genetic Code
   IF WRK.Genetic_Code_USR <> PAR.GN_Genetic_Code;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Pen_Description = 'MIXED';

   ENDIF;

   ENDIF;

   ENDIF;

  }

  EXECUTE FUNCTION(Chg Pen Genetics      CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1119678;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.Pen_Number);
  PARAMETER(WRK.Pen_Description);
  PARAMETER(WRK.GN_Genetic_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 ENDIF;

 //?If External -- change group/movement on Delv Tracking if its there.1/29/04
 CASE;

 // IF PAR.TH Source Type is External
 IF PAR.TH_Source_Type = 'E';

 EXECUTE FUNCTION(Rtv Chg Movemnt/Group RT) TYPE(RTVOBJ) FILE(PLAFCPP)           AB1257256;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Group_Reference);
 PARAMETER(PAR.TH_HPS_Movement_Ref_#);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Movement/Group    CH) TYPE(CHGOBJ) FILE(PLAFCPP)           AB1257255;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(DB1.DSH_Kill_Date);
  PARAMETER(DB1.DT_Delivery_Date);
  PARAMETER(DB1.DT_Delivery_Time);
  PARAMETER(DB1.DT_Delivery_Time_Seq);
  PARAMETER(PAR.DT_Hog_Group_Reference);
  PARAMETER(PAR.DT_Movement_Number);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 EXECUTE FUNCTION(Chg Tattoo Hdr w/new  CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1206984;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TH_Purchase_Date);
 PARAMETER(PAR.TH_Group_Reference);
 PARAMETER(PAR.TH_Live_Purchase_UOM);
 PARAMETER(PAR.TH_Live_Purchase_Price);
 PARAMETER(PAR.TH_Live_Gross_Amt);
 PARAMETER(PAR.TH_LIve_Net_Amt);
 PARAMETER(PAR.TH_Resale_UOM);
 PARAMETER(PAR.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(PAR.TH_Pricing_Date);
 PARAMETER(PAR.TH_Resale_Spread_Sts);
 PARAMETER(PAR.TH_Dead_On_Arrival);
 PARAMETER(PAR.TH_Head_Received);
 PARAMETER(PAR.TH_Yard_Deads);
 PARAMETER(PAR.TH_Held_Over);
 PARAMETER(PAR.TH_Head_Condemned);
 PARAMETER(PAR.TH_Head_Killed);
 PARAMETER(PAR.TH_Head_Adds);
 PARAMETER(PAR.TH_Head_Accepted);
 PARAMETER(PAR.TH_Live_Wgt);
 PARAMETER(PAR.TH_Adj_Live_Wgt);
 PARAMETER(PAR.TH_Hot_Wgt);
 PARAMETER(PAR.TH_Tot_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Tot_Backfat_Inches);
 PARAMETER(PAR.TH_Tot_Light_Reflectance);
 PARAMETER(PAR.TH_Avg_Live_Wgt);
 PARAMETER(PAR.TH_Avg_Hot_Wgt);
 PARAMETER(PAR.TH_Avg_Light_Reflectance);
 PARAMETER(PAR.TH_Avg_Lean_Percent);
 PARAMETER(PAR.TH_Avg_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Avg_Backfat);
 PARAMETER(PAR.TH_Std_Yield_Percent);
 PARAMETER(PAR.TH_Actual_Yield);
 PARAMETER(PAR.TH_Adj_Actual_Yield);
 PARAMETER(PAR.TH_Yield_Difference);
 PARAMETER(PAR.TH_Recalc_Live_Wgt);
 PARAMETER(PAR.TH_CM_Market_Price);
 PARAMETER(PAR.TH_CM_Base_Mkt_Price);
 PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(PAR.TH_CM_Sort_Discount_Amt);
 PARAMETER(PAR.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(PAR.TH_CM_Base_Carcass_Value);
 PARAMETER(PAR.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(PAR.TH_CM_Carcass_Gross_Amt);
 PARAMETER(PAR.TH_Deduction_Amt);
 PARAMETER(PAR.TH_Total_Net_WO_Adds);
 PARAMETER(PAR.TH_Carcass_Net_Amt);
 PARAMETER(PAR.TH_Additions_Amt);
 PARAMETER(PAR.TH_Payment_Gross);
 PARAMETER(PAR.Th_Payment_Net_Amt);
 PARAMETER(PAR.TH_AP_Voucher_Document#);
 PARAMETER(PAR.TH_Freight_Amount);
 PARAMETER(PAR.TH_Accrual_Amount);
 PARAMETER(PAR.TH_Fixed_Cost_Amount);
 PARAMETER(PAR.TH_Calc_Net_Sts);
 PARAMETER(PAR.TH_Payment_Sts);
 PARAMETER(PAR.TH_Header_Error_Sts);
 PARAMETER(PAR.TH_Detail_Error_Sts);
 PARAMETER(PAR.TH_Kill_Balancing_Sts);
 PARAMETER(PAR.TH_Bal_to_Kill_Gen);
 PARAMETER(PAR.TH_Commission_A_P_Voucher);
 PARAMETER(PAR.TH_Voucher_Payment_Date);
 PARAMETER(PAR.TH_User_Error_Override);
 PARAMETER(PAR.TH_Held_Over_Record);
 PARAMETER(PAR.TH_Sex);
 PARAMETER(PAR.TH_Held_Ovr_Completed_Dte);
 PARAMETER(PAR.TH_Commission_Paid_Date);
 PARAMETER(PAR.TH_Actual_Check_Date);
 PARAMETER(PAR.TH_Shipped_Weight);
 PARAMETER(PAR.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(PAR.TH_FFLI);
 PARAMETER(PAR.TH_Kill_Product_Value);
 PARAMETER(PAR.TH_Cut_Product_Value);
 PARAMETER(PAR.TH_Render_Product_Value);
 PARAMETER(PAR.TH_Head_Excluded);
 PARAMETER(PAR.TH_CM_Bse_Mkt_Live_CWT);
 PARAMETER(PAR.TH_CM_Bse_Mkt_Carc_CWT);
 PARAMETER(PAR.TH_CM_Srt_Dsc_Live_CWT);
 PARAMETER(PAR.TH_CM_Srt_Dsc_Carc_CWT);
 PARAMETER(PAR.TH_CM_Yld_G_L_Live_CWT);
 PARAMETER(PAR.TH_CM_Yld_G_L_Carc_CWT);
 PARAMETER(PAR.TH_CM_Crc_Val_Live_CWT);
 PARAMETER(PAR.TH_CM_Crc_Val_Carc_CWT);
 PARAMETER(PAR.TH_CM_Lean_Prem_Live_CWT);
 PARAMETER(PAR.TH_CM_Lean_Prem_Carc_CWT);
 PARAMETER(PAR.TH_CM_Gross_Live_CWT);
 PARAMETER(PAR.TH_CM_Gross_Carc_CWT);
 PARAMETER(PAR.TH_Source_Type);
 PARAMETER(PAR.TH_Scale_Ticket_Sts);
 PARAMETER(PAR.TH_Payment_Type);
 PARAMETER(PAR.TH_HPS_Movement_Ref_#);
 PARAMETER(PAR.TH_Source_Code);
 PARAMETER(PAR.TH_Hog_Class_Type);
 PARAMETER(PAR.TH_Posted_to_HPS_Flag);
 PARAMETER(PAR.TH_Schedule_Kill_Shift);
 PARAMETER(PAR.TH_Shift_Held_Over);
 PARAMETER(PAR.TH_State);
 PARAMETER(PAR.TH_Unused_Code);
 PARAMETER(PAR.TH_Unused_Sts_2_Pos);
 PARAMETER(PAR.TH_Commission_Status);
 PARAMETER(PAR.TH_Paid_2_Week_Avg_Y_N);
 PARAMETER(PAR.TH_Unused_Sts_1_Pos_3);
 PARAMETER(PAR.TH_DOA_Weight);
 PARAMETER(PAR.TH_Avg_Lean_EXC_ADD);
 PARAMETER(PAR.TH_HPS_Farm_Site);
 PARAMETER(PAR.TH_Shift_Held_Over_Head);
 PARAMETER(PAR.TH_Sorting_Amount);
 PARAMETER(PAR.DF_Defect_Code);
 PARAMETER(PAR.THP_Process_Code);
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PL_Location_Code);
 PARAMETER(PAR.HB_Buyer_Code);
 PARAMETER(PAR.GN_Genetic_Code);
 PARAMETER(PAR.HC_Class_Code);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing after Data read

  // LCL.TH Dead On Arrival = DB1.TH Dead On Arrival
  LCL.TH_Dead_On_Arrival = DB1.TH_Dead_On_Arrival;

  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

  EXECUTE FUNCTION(Chg/Crt Tatto/Spc Flds IF) TYPE(EXCINTFUN)                     AB1189848;
  PARAMETER(DB1.TH_Payment_Sts);
  PARAMETER(DB1.TH_Payment_Type);
  {
   //?Execute internal function

   EXECUTE FUNCTION(HPE056 Payment Type) TYPE(EXCINTFUN)                           AB1189849;
   {
    //?Execute internal function

    //?1/10/96  HPE056   Allow payment type to be update based on
    //?                  what the payment status is at the time this
    //?                  tattoo is being updated
   }

   //?Function Description:  If there are any fields that need to be
   //?Changed/Created during the Change functions or Create function
   //?Presently: Payment Type
   //?Add this routine to all of the change objects and create object
   //?that update the Payment Type
   CASE;

   // IF PAR.TH Payment Sts is Live anything
   IF PAR.TH_Payment_Sts = 'ML'/'PL'/'NL'/'SL'/'IL';

   // PAR.TH Payment Type = CND.Live
   PAR.TH_Payment_Type = 'L';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.TH Payment Type = CND.Carcass Merit
   PAR.TH_Payment_Type = 'C';

   ENDIF;

  }

  //?USER: Processing after Data update

  CASE;

  // IF PAR.TH Dead On Arrival NE LCL.TH Dead On Arrival
  IF PAR.TH_Dead_On_Arrival <> LCL.TH_Dead_On_Arrival;

  EXECUTE FUNCTION(Upd Trk Scl Weigh Sts RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1214077;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER('R');
  {
   //?USER: Process Data record

   CASE;

   // IF PAR.BOL Truck Scale Weigh Sts is Respread
   IF PAR.BOL_Truck_Scale_Weigh_Sts = 'R';

   // AND DB1.BOL Truck Scale Weigh Sts is Not Spread
   AND DB1.BOL_Truck_Scale_Weigh_Sts = 'I'/'N'/*BLANK/'O'/'R'/'A'/'C';

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg Trk Scl Weigh Sts CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1214078;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(PAR.BOL_Truck_Scale_Weigh_Sts);
   PARAMETER(DB1.BOL_Shipped_Head);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

   ENDIF;

   CASE;

   // IF PAR.BOL Truck Scale Weigh Sts is Respread
   IF PAR.BOL_Truck_Scale_Weigh_Sts = 'R';

   EXECUTE FUNCTION(Upd Hdr/Bal Status    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1230832;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER('E');
   PARAMETER('E');
   {
    //?USER: Process Data record

    CASE;

    // IF DB1.TH Hog Class Type is Not Resale
    IF DB1.TH_Hog_Class_Type = 'M'/'S';

    EXECUTE FUNCTION(Chg Hdr/Bal Status    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1230833;
    PARAMETER(DB1.BOH_Company_Number);
    PARAMETER(DB1.BOH_Buy_Order_Number);
    PARAMETER(DB1.BOL_Load_Number);
    PARAMETER(DB1.TH_Tattoo_Number);
    PARAMETER(DB1.TH_Kill_Date);
    PARAMETER(PAR.TH_Header_Error_Sts);
    PARAMETER(PAR.TH_Kill_Balancing_Sts);
    ENDIF;

   }

   ENDIF;

  }

  ENDIF;

 }

 // Call program Rtv/Chg Ttt's Lv Prc  XF.
 CALL PROGRAM(Rtv/Chg Ttt's Lv Prc  XF) ('PKR8XFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TH_Purchase_Date);
 PARAMETER(PAR.TH_Group_Reference);
 PARAMETER(PAR.TH_Live_Purchase_UOM);
 PARAMETER(PAR.TH_Live_Purchase_Price);
 PARAMETER(PAR.TH_Live_Gross_Amt);
 PARAMETER(PAR.TH_LIve_Net_Amt);
 PARAMETER(PAR.TH_Resale_UOM);
 PARAMETER(PAR.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(PAR.TH_Pricing_Date);
 PARAMETER(PAR.TH_Resale_Spread_Sts);
 PARAMETER(PAR.TH_Dead_On_Arrival);
 PARAMETER(WRK.TH_Head_Received);
 PARAMETER(PAR.TH_Yard_Deads);
 PARAMETER(PAR.TH_Held_Over);
 PARAMETER(PAR.TH_Head_Condemned);
 PARAMETER(PAR.TH_Head_Killed);
 PARAMETER(PAR.TH_Head_Adds);
 PARAMETER(PAR.TH_Head_Accepted);
 PARAMETER(PAR.TH_Live_Wgt);
 PARAMETER(PAR.TH_Adj_Live_Wgt);
 PARAMETER(PAR.TH_Hot_Wgt);
 PARAMETER(PAR.TH_Tot_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Tot_Backfat_Inches);
 PARAMETER(PAR.TH_Tot_Light_Reflectance);
 PARAMETER(PAR.TH_Avg_Live_Wgt);
 PARAMETER(PAR.TH_Avg_Hot_Wgt);
 PARAMETER(PAR.TH_Avg_Light_Reflectance);
 PARAMETER(PAR.TH_Avg_Lean_Percent);
 PARAMETER(PAR.TH_Avg_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Avg_Backfat);
 PARAMETER(PAR.TH_Std_Yield_Percent);
 PARAMETER(PAR.TH_Actual_Yield);
 PARAMETER(PAR.TH_Adj_Actual_Yield);
 PARAMETER(PAR.TH_Yield_Difference);
 PARAMETER(PAR.TH_Recalc_Live_Wgt);
 PARAMETER(PAR.TH_CM_Market_Price);
 PARAMETER(PAR.TH_CM_Base_Mkt_Price);
 PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(PAR.TH_CM_Sort_Discount_Amt);
 PARAMETER(PAR.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(PAR.TH_CM_Base_Carcass_Value);
 PARAMETER(PAR.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(PAR.TH_CM_Carcass_Gross_Amt);
 PARAMETER(PAR.TH_Deduction_Amt);
 PARAMETER(PAR.TH_Total_Net_WO_Adds);
 PARAMETER(PAR.TH_Carcass_Net_Amt);
 PARAMETER(PAR.TH_Additions_Amt);
 PARAMETER(PAR.TH_Payment_Gross);
 PARAMETER(PAR.Th_Payment_Net_Amt);
 PARAMETER(PAR.TH_AP_Voucher_Document#);
 PARAMETER(PAR.TH_Freight_Amount);
 PARAMETER(PAR.TH_Accrual_Amount);
 PARAMETER(PAR.TH_Fixed_Cost_Amount);
 PARAMETER(PAR.TH_Calc_Net_Sts);
 PARAMETER(PAR.TH_Payment_Sts);
 PARAMETER(PAR.TH_Header_Error_Sts);
 PARAMETER(PAR.TH_Detail_Error_Sts);
 PARAMETER(PAR.TH_Kill_Balancing_Sts);
 PARAMETER(PAR.TH_Bal_to_Kill_Gen);
 PARAMETER(PAR.TH_Commission_A_P_Voucher);
 PARAMETER(PAR.TH_Voucher_Payment_Date);
 PARAMETER(PAR.TH_User_Error_Override);
 PARAMETER(PAR.TH_Held_Over_Record);
 PARAMETER(PAR.TH_Sex);
 PARAMETER(PAR.TH_Held_Ovr_Completed_Dte);
 PARAMETER(PAR.TH_Commission_Paid_Date);
 PARAMETER(PAR.TH_Actual_Check_Date);
 PARAMETER(PAR.TH_Shipped_Weight);
 PARAMETER(PAR.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(PAR.TH_FFLI);
 PARAMETER(PAR.TH_Kill_Product_Value);
 PARAMETER(PAR.TH_Cut_Product_Value);
 PARAMETER(PAR.TH_Render_Product_Value);
 PARAMETER(PAR.TH_Head_Excluded);
 PARAMETER(PAR.TH_CM_Bse_Mkt_Live_CWT);
 PARAMETER(PAR.TH_CM_Bse_Mkt_Carc_CWT);
 PARAMETER(PAR.TH_CM_Srt_Dsc_Live_CWT);
 PARAMETER(PAR.TH_CM_Srt_Dsc_Carc_CWT);
 PARAMETER(PAR.TH_CM_Yld_G_L_Live_CWT);
 PARAMETER(PAR.TH_CM_Yld_G_L_Carc_CWT);
 PARAMETER(PAR.TH_CM_Crc_Val_Live_CWT);
 PARAMETER(PAR.TH_CM_Crc_Val_Carc_CWT);
 PARAMETER(PAR.TH_CM_Lean_Prem_Live_CWT);
 PARAMETER(PAR.TH_CM_Lean_Prem_Carc_CWT);
 PARAMETER(PAR.TH_CM_Gross_Live_CWT);
 PARAMETER(PAR.TH_CM_Gross_Carc_CWT);
 PARAMETER(PAR.TH_Source_Type);
 PARAMETER(PAR.TH_Scale_Ticket_Sts);
 PARAMETER(PAR.TH_Payment_Type);
 PARAMETER(PAR.TH_HPS_Movement_Ref_#);
 PARAMETER(PAR.TH_Source_Code);
 PARAMETER(PAR.TH_Hog_Class_Type);
 PARAMETER(PAR.TH_Posted_to_HPS_Flag);
 PARAMETER(PAR.TH_Schedule_Kill_Shift);
 PARAMETER(PAR.TH_Shift_Held_Over);
 PARAMETER(PAR.TH_State);
 PARAMETER(PAR.TH_Unused_Code);
 PARAMETER(PAR.TH_Unused_Sts_2_Pos);
 PARAMETER(PAR.TH_Commission_Status);
 PARAMETER(PAR.TH_Paid_2_Week_Avg_Y_N);
 PARAMETER(PAR.TH_Unused_Sts_1_Pos_3);
 PARAMETER(PAR.TH_DOA_Weight);
 PARAMETER(PAR.TH_Avg_Lean_EXC_ADD);
 PARAMETER(PAR.TH_HPS_Farm_Site);
 PARAMETER(PAR.TH_Shift_Held_Over_Head);
 PARAMETER(PAR.TH_Sorting_Amount);
 PARAMETER(PAR.DF_Defect_Code);
 PARAMETER(PAR.THP_Process_Code);
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PL_Location_Code);
 PARAMETER(PAR.HB_Buyer_Code);
 PARAMETER(PAR.GN_Genetic_Code);
 PARAMETER(PAR.HC_Class_Code);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);

 //?New File Created(buy order head ext) to load load shipped head
 EXECUTE FUNCTION(Upd Shipped Head      RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1226273;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.BOL_Shipped_Head);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Shipped Head      CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1226274;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.BOL_Shipped_Head);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 EXECUTE FUNCTION(Crt Tattoo Def-10     IF) TYPE(EXCINTFUN)                      AB1199890;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.Defect_User_1);
 PARAMETER(PAR.Defect_User_2);
 PARAMETER(PAR.Defect_User_3);
 PARAMETER(PAR.Defect_User_4);
 PARAMETER(PAR.Defect_User_5);
 PARAMETER(PAR.Defect_User_6);
 PARAMETER(PAR.Defect_User_7);
 PARAMETER(PAR.Defect_User_8);
 PARAMETER(PAR.Defect_User_9);
 PARAMETER(PAR.Defect_User_10);
 PARAMETER(PAR.Defect_HD_user_1);
 PARAMETER(PAR.Defect_HD_user_2);
 PARAMETER(PAR.Defect_HD_user_3);
 PARAMETER(PAR.Defect_HD_user_4);
 PARAMETER(PAR.Defect_HD_user_5);
 PARAMETER(PAR.Defect_HD_user_6);
 PARAMETER(PAR.Defect_HD_user_7);
 PARAMETER(PAR.Defect_HD_user_8);
 PARAMETER(PAR.Defect_HD_user_9);
 PARAMETER(PAR.Defect_HD_user_10);
 PARAMETER(PAR.HC_Class_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Del Tattoo Def    RT) TYPE(RTVOBJ) FILE(PKDZREP)           AB1199889;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Dlt Tattoo Defect     DO) TYPE(DLTOBJ) FILE(PKDZREP)           AB1197900;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(DB1.DF_Defect_Code);
  }

  //?Defect 1
  CASE;

  // IF PAR.Defect User  1 NE WRK.Blank Usr 1 fld Usr
  IF PAR.Defect_User_1 <> WRK.Blank_Usr_1_fld_Usr;

  EXECUTE FUNCTION(Crt Tattoo Defect     CR) TYPE(CRTOBJ) FILE(PKDZREP)           AB1197898;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.Defect_User_1);
  PARAMETER(PAR.Defect_HD_user_1);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Hog Defect Class  RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1286918;
   PARAMETER(DB1.DF_Defect_Code);
   PARAMETER(DB1.TDF_Classification_Defs);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDIF;

  //?Defect 2
  CASE;

  // IF PAR.Defect User  2 NE WRK.Blank Usr 1 fld Usr
  IF PAR.Defect_User_2 <> WRK.Blank_Usr_1_fld_Usr;

  EXECUTE FUNCTION(Crt Tattoo Defect     CR) TYPE(CRTOBJ) FILE(PKDZREP)           AB1197898;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.Defect_User_2);
  PARAMETER(PAR.Defect_HD_user_2);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Hog Defect Class  RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1286918;
   PARAMETER(DB1.DF_Defect_Code);
   PARAMETER(DB1.TDF_Classification_Defs);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDIF;

  //?Defect 3
  CASE;

  // IF PAR.Defect User  3 NE WRK.Blank Usr 1 fld Usr
  IF PAR.Defect_User_3 <> WRK.Blank_Usr_1_fld_Usr;

  EXECUTE FUNCTION(Crt Tattoo Defect     CR) TYPE(CRTOBJ) FILE(PKDZREP)           AB1197898;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.Defect_User_3);
  PARAMETER(PAR.Defect_HD_user_3);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Hog Defect Class  RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1286918;
   PARAMETER(DB1.DF_Defect_Code);
   PARAMETER(DB1.TDF_Classification_Defs);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDIF;

  //?Defect 4
  CASE;

  // IF PAR.Defect User  4 NE WRK.Blank Usr 1 fld Usr
  IF PAR.Defect_User_4 <> WRK.Blank_Usr_1_fld_Usr;

  EXECUTE FUNCTION(Crt Tattoo Defect     CR) TYPE(CRTOBJ) FILE(PKDZREP)           AB1197898;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.Defect_User_4);
  PARAMETER(PAR.Defect_HD_user_4);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Hog Defect Class  RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1286918;
   PARAMETER(DB1.DF_Defect_Code);
   PARAMETER(DB1.TDF_Classification_Defs);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDIF;

  //?Defect 5
  CASE;

  // IF PAR.Defect User  5 NE WRK.Blank Usr 1 fld Usr
  IF PAR.Defect_User_5 <> WRK.Blank_Usr_1_fld_Usr;

  EXECUTE FUNCTION(Crt Tattoo Defect     CR) TYPE(CRTOBJ) FILE(PKDZREP)           AB1197898;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.Defect_User_5);
  PARAMETER(PAR.Defect_HD_user_5);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Hog Defect Class  RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1286918;
   PARAMETER(DB1.DF_Defect_Code);
   PARAMETER(DB1.TDF_Classification_Defs);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDIF;

  //?Defect 6
  CASE;

  // IF PAR.Defect User  6 NE WRK.Blank Usr 1 fld Usr
  IF PAR.Defect_User_6 <> WRK.Blank_Usr_1_fld_Usr;

  EXECUTE FUNCTION(Crt Tattoo Defect     CR) TYPE(CRTOBJ) FILE(PKDZREP)           AB1197898;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.Defect_User_6);
  PARAMETER(PAR.Defect_HD_user_6);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Hog Defect Class  RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1286918;
   PARAMETER(DB1.DF_Defect_Code);
   PARAMETER(DB1.TDF_Classification_Defs);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDIF;

  //?Defect 7
  CASE;

  // IF PAR.Defect User  7 NE WRK.Blank Usr 1 fld Usr
  IF PAR.Defect_User_7 <> WRK.Blank_Usr_1_fld_Usr;

  EXECUTE FUNCTION(Crt Tattoo Defect     CR) TYPE(CRTOBJ) FILE(PKDZREP)           AB1197898;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.Defect_User_7);
  PARAMETER(PAR.Defect_HD_user_7);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Hog Defect Class  RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1286918;
   PARAMETER(DB1.DF_Defect_Code);
   PARAMETER(DB1.TDF_Classification_Defs);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDIF;

  //?Defect 8
  CASE;

  // IF PAR.Defect User  8 NE WRK.Blank Usr 1 fld Usr
  IF PAR.Defect_User_8 <> WRK.Blank_Usr_1_fld_Usr;

  EXECUTE FUNCTION(Crt Tattoo Defect     CR) TYPE(CRTOBJ) FILE(PKDZREP)           AB1197898;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.Defect_User_8);
  PARAMETER(PAR.Defect_HD_user_8);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Hog Defect Class  RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1286918;
   PARAMETER(DB1.DF_Defect_Code);
   PARAMETER(DB1.TDF_Classification_Defs);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDIF;

  //?Defect 9
  CASE;

  // IF PAR.Defect User  9 NE WRK.Blank Usr 1 fld Usr
  IF PAR.Defect_User_9 <> WRK.Blank_Usr_1_fld_Usr;

  EXECUTE FUNCTION(Crt Tattoo Defect     CR) TYPE(CRTOBJ) FILE(PKDZREP)           AB1197898;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.Defect_User_9);
  PARAMETER(PAR.Defect_HD_user_9);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Hog Defect Class  RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1286918;
   PARAMETER(DB1.DF_Defect_Code);
   PARAMETER(DB1.TDF_Classification_Defs);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDIF;

  //?Defect 10
  CASE;

  // IF PAR.Defect User 10 NE WRK.Blank Usr 1 fld Usr
  IF PAR.Defect_User_10 <> WRK.Blank_Usr_1_fld_Usr;

  EXECUTE FUNCTION(Crt Tattoo Defect     CR) TYPE(CRTOBJ) FILE(PKDZREP)           AB1197898;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.Defect_User_10);
  PARAMETER(PAR.Defect_HD_user_10);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Hog Defect Class  RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1286918;
   PARAMETER(DB1.DF_Defect_Code);
   PARAMETER(DB1.TDF_Classification_Defs);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDIF;

 }

 CASE;

 // IF PAR.TH Hog Class Type is Market
 IF PAR.TH_Hog_Class_Type = 'M';

 // Call program Chg TaDefTots THdrBol XF.
 CALL PROGRAM(Chg TaDefTots THdrBol XF) ('PLL2XFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TH_Hog_Class_Type);

 ENDIF;

 //?Change pen desc if the genetics for the tattoo changed
 CASE;

 // IF PAR.GN Genetic Code NE PAR.Genetic Code USR
 IF PAR.GN_Genetic_Code <> PAR.Genetic_Code_USR;

 EXECUTE FUNCTION(Rtv Dtl Pen/Chg PenDscRT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1156235;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 {
  //?USER: Processing if Data record not found

  // *MO.VE             1183529*Bu = ilt. in functions
  PGM.*Return_code = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv/Chg Pen Gntcs,descRT) TYPE(RTVOBJ) FILE(PKA3REP)           AB1156236;
  PARAMETER(DB1.Pen_Company_Number);
  PARAMETER(DB1.Pen_Number);
  {
   //?USER: Process Data record

   // *MO.VE             1183529*Bu = ilt. in functions
   WRK.GN_Genetic_Code = WRK.Blank_USR;

   // *MO.VE             1183529*Bu = ilt. in functions
   WRK.GN_Description = WRK.Blank_USR;

   EXECUTE FUNCTION(Rtv Pen GENETICS      RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1107816;
   PARAMETER(DB1.Pen_Company_Number);
   PARAMETER(DB1.Pen_Number);
   PARAMETER(WRK.Pen_Description);
   PARAMETER(WRK.GN_Genetic_Code);
   {
    //?USER: Processing if Data record not found

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.Pen_Description = *BLANK;

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.GN_Genetic_Code = *BLANK;

    //?USER: Process Data record

    CASE;

    // IF DB1.TDP Process Code is Drive Card Printed
    IF DB1.TDP_Process_Code = 'D';

    // OR DB1.TDP Process Code is Open
    OR DB1.TDP_Process_Code = 'O';

    EXECUTE FUNCTION(Rtv Tattoo GENETICS) TYPE(RTVOBJ) FILE(PKA1CPP)                AB1107783;
    PARAMETER(DB1.BOH_Company_Number);
    PARAMETER(DB1.BOH_Buy_Order_Number);
    PARAMETER(DB1.BOL_Load_Number);
    PARAMETER(DB1.TH_Tattoo_Number);
    PARAMETER(WRK.Genetic_Code_USR);
    PARAMETER(WRK.Pen_Desc_USR);
    {
     //?USER: Processing if Data record not found

     // *MO.VE             1183529*Bu = ilt. in functions
     PAR.GN_Genetic_Code = *BLANK;

     // *MO.VE             1183529*Bu = ilt. in functions
     PAR.Pen_Description = *BLANK;

     //?USER: Process Data record

     // PAR.GN Genetic Code = DB1.GN Genetic Code
     PAR.GN_Genetic_Code = DB1.GN_Genetic_Code;

     EXECUTE FUNCTION(Rtv Genetic Record    RT) TYPE(RTVOBJ) FILE(PKAIREP)           AB1107738;
     PARAMETER(DB1.GN_Genetic_Code);
     PARAMETER(PAR.Pen_Description);
     {
      //?USER: Processing if Data record not found

      // *MO.VE             1183529*Bu = ilt. in functions
      PAR.GN_Description = *BLANK;

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    CASE;

    // IF PAR.GN Genetic Code is BLANKS
    IF PAR.GN_Genetic_Code = *BLANK;

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.GN_Genetic_Code = WRK.Genetic_Code_USR;

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.Pen_Description = WRK.Pen_Desc_USR;

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF WRK.Genetic Code USR NE PAR.GN Genetic Code
    IF WRK.Genetic_Code_USR <> PAR.GN_Genetic_Code;

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.Pen_Description = 'MIXED';

    ENDIF;

    ENDIF;

    ENDIF;

   }

   EXECUTE FUNCTION(Chg Pen Genetics      CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1119678;
   PARAMETER(DB1.Pen_Company_Number);
   PARAMETER(DB1.Pen_Number);
   PARAMETER(WRK.Pen_Description);
   PARAMETER(WRK.GN_Genetic_Code);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

 }

 ENDIF;

 //?** 12/28/05 LJB - include changes in the Tattoo Header Ext file
 //?** 02/22/06 slm - Add the Producer as well as the Site id.
 //?UPDATE only the Producer ID and the Site ID.
 //?for all Tattoo Header Ext records without kill date.
 //?Read by Key first to get record added. by kill date.
 EXECUTE FUNCTION(Chg TatHdrExt by Key  RT) TYPE(RTVOBJ) FILE(PKDNCPP)           AB1271039;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PS_Site_ID);
 PARAMETER(PAR.Producer_Subsidiary_Code);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt TatHdrExt WTPrdSitCO) TYPE(CRTOBJ) FILE(PKDNCPP)           AB1270572;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.TE_Unused_Number_1);
  PARAMETER(LCL.TE_UnUsed_Number_2);
  PARAMETER(LCL.TE_Unused_Number_3);
  PARAMETER(LCL.TE_Unused_Status_1);
  PARAMETER(LCL.TE_Unused_Status_2);
  PARAMETER(LCL.TE_Unused_Status_3);
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.PS_Site_ID);
  PARAMETER(PAR.Producer_Subsidiary_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

   // DB1.RS User Changed = CON.*BLANK
   DB1.RS_User_Changed = *BLANK;

   // DB1.RS Date Changed = CON.*ZERO
   DB1.RS_Date_Changed = *ZERO;

   // DB1.RS Time Changed = CON.*ZERO
   DB1.RS_Time_Changed = *ZERO;

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg TatHdrExtWTOPrdSitCH) TYPE(CHGOBJ) FILE(PKDNCPP)           AB1268474;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.TE_Unused_Number_1);
  PARAMETER(DB1.TE_UnUsed_Number_2);
  PARAMETER(DB1.TE_Unused_Number_3);
  PARAMETER(DB1.TE_Unused_Status_1);
  PARAMETER(DB1.TE_Unused_Status_2);
  PARAMETER(DB1.TE_Unused_Status_3);
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.PS_Site_ID);
  PARAMETER(PAR.Producer_Subsidiary_Code);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Crt TatHdrExt WTPrdSitCO) TYPE(CRTOBJ) FILE(PKDNCPP)           AB1270572;
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.BOH_Buy_Order_Number);
   PARAMETER(PAR.BOL_Load_Number);
   PARAMETER(PAR.TH_Tattoo_Number);
   PARAMETER(PAR.TH_Kill_Date);
   PARAMETER(PAR.TH_CA_Market_Price);
   PARAMETER(PAR.TH_CA_Base_Market_Price);
   PARAMETER(PAR.TH_CA_Base_Mkt_Price_Amt);
   PARAMETER(PAR.TH_CA_Sort_Discount_Amt);
   PARAMETER(PAR.TH_CA_Yield_Gain_Loss_Amt);
   PARAMETER(PAR.TH_CA_Base_Carcass_Value);
   PARAMETER(PAR.TH_CA_Lean_Premium_Amt);
   PARAMETER(PAR.TH_CA_Carcass_Gross_Amt);
   PARAMETER(PAR.TH_CA_Bse_Mkt_Live_CWT);
   PARAMETER(PAR.TH_CA_Bse_Mkt_Carc_CWT);
   PARAMETER(PAR.TH_CA_Srt_Dsc_Live_CWT);
   PARAMETER(PAR.TH_CA_Srt_Dsc_Carc_CWT);
   PARAMETER(PAR.TH_CA_Yld_G_L_Live_CWT);
   PARAMETER(PAR.TH_CA_Yld_G_L_Carc_CWT);
   PARAMETER(PAR.TH_CA_Crc_Val_Live_CWT);
   PARAMETER(PAR.TH_CA_Crc_Val_Carc_CWT);
   PARAMETER(PAR.TH_CA_Lean_Prm_Live_CWT);
   PARAMETER(PAR.TH_CA_Lean_Prm_Carc_CWT);
   PARAMETER(PAR.TH_CA_Gross_Live_CWT);
   PARAMETER(PAR.TH_CA_Gross_Carc_CWT);
   PARAMETER(PAR.TH_Min_LT_Backfat_Inch);
   PARAMETER(PAR.TH_Min_LT_LoinEye_Inch);
   PARAMETER(PAR.TH_Min_LT_Hot_Wt_lb);
   PARAMETER(PAR.TH_Min_LT_Lean_Pct);
   PARAMETER(PAR.TH_Max_GT_Backfat_Inch);
   PARAMETER(PAR.TH_Max_GT_LoinEye_Inch);
   PARAMETER(PAR.TH_Max_GT_Hot_Wt_lb);
   PARAMETER(PAR.TH_Max_GT_Lean_Pct);
   PARAMETER(PAR.TH_Head_LT_Backfat_In_Min);
   PARAMETER(PAR.TH_Head_LT_LoinEye_In_Min);
   PARAMETER(PAR.TH_Head_LT_Hot_Wt_lb_Min);
   PARAMETER(PAR.TH_Head_LT_Lean_Pct_Min);
   PARAMETER(PAR.TH_Head_GT_Backfat_In_Max);
   PARAMETER(PAR.TH_Head_GT_LoinEye_In_Max);
   PARAMETER(PAR.TH_Head_GT_Hot_Wt_lb_Max);
   PARAMETER(PAR.TH_Head_GT_Lean_Pct_Max);
   PARAMETER(*MISSING);
   PARAMETER(*MISSING);
   PARAMETER(*MISSING);
   PARAMETER(*MISSING);
   PARAMETER(*MISSING);
   PARAMETER(*MISSING);
   PARAMETER(PAR.PD_Producer_Code);
   PARAMETER(PAR.PS_Site_ID);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?Execute internal function

     // PAR.RS Record Status = CND.Active
     PAR.RS_Record_Status = 'A';

     // PAR.RS User Added = JOB.*USER
     PAR.RS_User_Added = JOB.*USER;

     // PAR.RS Date Added = JOB.*Job date
     PAR.RS_Date_Added = JOB.*Job_date;

     // PAR.RS Time Added = JOB.*Job time
     PAR.RS_Time_Added = JOB.*Job_time;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

    }

    // DB1.RS User Changed = CON.*BLANK
    DB1.RS_User_Changed = *BLANK;

    // DB1.RS Date Changed = CON.*ZERO
    DB1.RS_Date_Changed = *ZERO;

    // DB1.RS Time Changed = CON.*ZERO
    DB1.RS_Time_Changed = *ZERO;

   }

   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // Call program Rtv System Date & Tim UP.
    CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
    PARAMETER(PAR.RS_Date_Changed);
    PARAMETER(PAR.RS_Time_Changed);

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 //?This read is to change all records.
 EXECUTE FUNCTION(Chg TatHdrExt All TattRT) TYPE(RTVOBJ) FILE(PKDNCPP)           AB1270838;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PS_Site_ID);
 PARAMETER(PAR.Producer_Subsidiary_Code);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg TatHdrExtWTOPrdSitCH) TYPE(CHGOBJ) FILE(PKDNCPP)           AB1268474;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.TE_Unused_Number_1);
  PARAMETER(DB1.TE_UnUsed_Number_2);
  PARAMETER(DB1.TE_Unused_Number_3);
  PARAMETER(DB1.TE_Unused_Status_1);
  PARAMETER(DB1.TE_Unused_Status_2);
  PARAMETER(DB1.TE_Unused_Status_3);
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.PS_Site_ID);
  PARAMETER(PAR.Producer_Subsidiary_Code);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Crt TatHdrExt WTPrdSitCO) TYPE(CRTOBJ) FILE(PKDNCPP)           AB1270572;
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.BOH_Buy_Order_Number);
   PARAMETER(PAR.BOL_Load_Number);
   PARAMETER(PAR.TH_Tattoo_Number);
   PARAMETER(PAR.TH_Kill_Date);
   PARAMETER(PAR.TH_CA_Market_Price);
   PARAMETER(PAR.TH_CA_Base_Market_Price);
   PARAMETER(PAR.TH_CA_Base_Mkt_Price_Amt);
   PARAMETER(PAR.TH_CA_Sort_Discount_Amt);
   PARAMETER(PAR.TH_CA_Yield_Gain_Loss_Amt);
   PARAMETER(PAR.TH_CA_Base_Carcass_Value);
   PARAMETER(PAR.TH_CA_Lean_Premium_Amt);
   PARAMETER(PAR.TH_CA_Carcass_Gross_Amt);
   PARAMETER(PAR.TH_CA_Bse_Mkt_Live_CWT);
   PARAMETER(PAR.TH_CA_Bse_Mkt_Carc_CWT);
   PARAMETER(PAR.TH_CA_Srt_Dsc_Live_CWT);
   PARAMETER(PAR.TH_CA_Srt_Dsc_Carc_CWT);
   PARAMETER(PAR.TH_CA_Yld_G_L_Live_CWT);
   PARAMETER(PAR.TH_CA_Yld_G_L_Carc_CWT);
   PARAMETER(PAR.TH_CA_Crc_Val_Live_CWT);
   PARAMETER(PAR.TH_CA_Crc_Val_Carc_CWT);
   PARAMETER(PAR.TH_CA_Lean_Prm_Live_CWT);
   PARAMETER(PAR.TH_CA_Lean_Prm_Carc_CWT);
   PARAMETER(PAR.TH_CA_Gross_Live_CWT);
   PARAMETER(PAR.TH_CA_Gross_Carc_CWT);
   PARAMETER(PAR.TH_Min_LT_Backfat_Inch);
   PARAMETER(PAR.TH_Min_LT_LoinEye_Inch);
   PARAMETER(PAR.TH_Min_LT_Hot_Wt_lb);
   PARAMETER(PAR.TH_Min_LT_Lean_Pct);
   PARAMETER(PAR.TH_Max_GT_Backfat_Inch);
   PARAMETER(PAR.TH_Max_GT_LoinEye_Inch);
   PARAMETER(PAR.TH_Max_GT_Hot_Wt_lb);
   PARAMETER(PAR.TH_Max_GT_Lean_Pct);
   PARAMETER(PAR.TH_Head_LT_Backfat_In_Min);
   PARAMETER(PAR.TH_Head_LT_LoinEye_In_Min);
   PARAMETER(PAR.TH_Head_LT_Hot_Wt_lb_Min);
   PARAMETER(PAR.TH_Head_LT_Lean_Pct_Min);
   PARAMETER(PAR.TH_Head_GT_Backfat_In_Max);
   PARAMETER(PAR.TH_Head_GT_LoinEye_In_Max);
   PARAMETER(PAR.TH_Head_GT_Hot_Wt_lb_Max);
   PARAMETER(PAR.TH_Head_GT_Lean_Pct_Max);
   PARAMETER(*MISSING);
   PARAMETER(*MISSING);
   PARAMETER(*MISSING);
   PARAMETER(*MISSING);
   PARAMETER(*MISSING);
   PARAMETER(*MISSING);
   PARAMETER(PAR.PD_Producer_Code);
   PARAMETER(PAR.PS_Site_ID);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?Execute internal function

     // PAR.RS Record Status = CND.Active
     PAR.RS_Record_Status = 'A';

     // PAR.RS User Added = JOB.*USER
     PAR.RS_User_Added = JOB.*USER;

     // PAR.RS Date Added = JOB.*Job date
     PAR.RS_Date_Added = JOB.*Job_date;

     // PAR.RS Time Added = JOB.*Job time
     PAR.RS_Time_Added = JOB.*Job_time;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

    }

    // DB1.RS User Changed = CON.*BLANK
    DB1.RS_User_Changed = *BLANK;

    // DB1.RS Date Changed = CON.*ZERO
    DB1.RS_Date_Changed = *ZERO;

    // DB1.RS Time Changed = CON.*ZERO
    DB1.RS_Time_Changed = *ZERO;

   }

   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // Call program Rtv System Date & Tim UP.
    CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
    PARAMETER(PAR.RS_Date_Changed);
    PARAMETER(PAR.RS_Time_Changed);

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 //?Movement number to the buy order load
 CASE;

 // IF LCL.MTech Live Yes or No is Yes MTech is Live
 IF LCL.MTech_Live_Yes_or_No = 'Y';

 //?Live yes will allow the usr to enter the movment number
 //?in stead of assigning a movement number
 CASE;

 // IF PAR.TH Source Type is Internal
 IF PAR.TH_Source_Type = 'I';

 // Call program Upd Movement # BOL    XF.
 CALL PROGRAM(Upd Movement # BOL    XF) ('PLSXXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TH_Purchase_Date);
 PARAMETER(PAR.TH_HPS_Movement_Ref_#);

 ENDIF;

 ENDIF;

 //?E10812 JJH 01/22/18 - Update Movement# in Buy Order Load and
 //?                      Delivery Schedule Detail.
 EXECUTE FUNCTION(Rtv HPS Automation    RT) TYPE(RTVOBJ) FILE(PLAOREP)           AB1342216;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(LCL.HPS_Automation_Y_N);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Update Movement Number in Buy Order Load & Delivery Sched Detail
 CASE;

 // IF LCL.HPS Automation (Y/N) is Yes
 IF LCL.HPS_Automation_Y_N = 'Y';

 // AND PAR.TH Source Type is External
 AND PAR.TH_Source_Type = 'E';

 EXECUTE FUNCTION(Upd Movement Number   RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1343219;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TH_HPS_Movement_Ref_#);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Movement# Bol     CO) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1313522;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.BOL_HPS_Movement_Number);
 }

 EXECUTE FUNCTION(Upd Movement Number   RT) TYPE(RTVOBJ) FILE(PLAECPP)           AB1343246;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TH_HPS_Movement_Ref_#);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Movement Number   CH) TYPE(CHGOBJ) FILE(PLAECPP)           AB1343247;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(DB1.DSH_Kill_Date);
  PARAMETER(DB1.DSD_Delivery_Date);
  PARAMETER(DB1.DSD_Delivery_Time);
  PARAMETER(DB1.DSD_Delivery_Time_Seq);
  PARAMETER(PAR.DSD_Movement_Number);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // Call program Rtv System Date & Tim UP.
    CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
    PARAMETER(PAR.RS_Date_Changed);
    PARAMETER(PAR.RS_Time_Changed);

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 //?E10812 JJH 01/22/18 - Update Movement Number in all Tattoo Header
 //?                      for the Buy Order Load.
 EXECUTE FUNCTION(Upd Movment Number) TYPE(RTVOBJ) FILE(PKA1CPP)                 AB1354099;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TH_HPS_Movement_Ref_#);
 {
  //?USER: Process Data record

  CASE;

  // IF PAR.TH HPS Movement Ref # NE DB1.TH HPS Movement Ref #
  IF PAR.TH_HPS_Movement_Ref_# <> DB1.TH_HPS_Movement_Ref_#;

  EXECUTE FUNCTION(Chg Movement #        CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1251437;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(PAR.TH_HPS_Movement_Ref_#);
  ENDIF;

 }

}


//?USER: Process command keys

CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

RETURN;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

// PAR.TH Tattoo Number = DTL.TH Tattoo Number
PAR.TH_Tattoo_Number = DTL.TH_Tattoo_Number;

ENDIF;

//?USER: Exit program processing

EXECUTE FUNCTION(RTV THDR NF UnAssnPend RT) TYPE(RTVOBJ) FILE(PKA1CPP)          AB1273715;
PARAMETER(KEY.BOH_Company_Number);
PARAMETER(KEY.BOH_Buy_Order_Number);
PARAMETER(KEY.BOL_Load_Number);
PARAMETER(KEY.TH_Tattoo_Number);
PARAMETER(KEY.TH_Kill_Date);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(Rtv and UnAssigned    RT) TYPE(RTVOBJ) FILE(PKFJCPP)           AB1272920;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Tattoo UnAssigned CH) TYPE(CHGOBJ) FILE(PKFJCPP)           AB1272910;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(DB1.TP_Tattoo_Date);
  PARAMETER(DB1.TP_Tattoo_Number);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('P');
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // Call program Rtv System Date & Tim UP.
    CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
    PARAMETER(PAR.RS_Date_Changed);
    PARAMETER(PAR.RS_Time_Changed);

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

}


