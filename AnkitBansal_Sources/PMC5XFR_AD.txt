// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMC5XFR
// ?Date: 14.08.2025 Time: 03:42:41
// ?------------------------------------------------------------------------------------------------

//?Execute user function

// Call program EXC Rtv Status        XF.
CALL PROGRAM(EXC Rtv Status        XF) ('PBXNXFR');
PARAMETER(PAR.Company_Number);
PARAMETER('TMSLDP');
PARAMETER(LCL.Live_with_TPM);

//?** Populate Default Order and Load Fields
DO;

//?** Default par order#s to zeros in case only one is created
// PAR.Order Number 1  PASS  USR = PAR.Order Number
PAR.Order_Number_1_PASS_USR = PAR.Order_Number;

// PAR.Order Number 2  PASS  USR = PAR.Order Number
PAR.Order_Number_2_PASS_USR = PAR.Order_Number;

//?** Retrieve next Load ID
CASE;

// IF LCL.Live with TPM is No
IF LCL.Live_with_TPM = 'N';

EXECUTE FUNCTION(RTV Next Load No.      CH) TYPE(CHGOBJ) FILE(CAASREP)          AC1197433;
PARAMETER(*ZERO);
PARAMETER(PAR.Next_Load_ID);
{
 //?USER: Processing before Data update

 // PGM.*Record Data Changed = CND.*YES
 PGM.*Record_Data_Changed = 'Y';

 // PAR.Load ID = DB1.Next Load ID
 PAR.Load_ID = DB1.Next_Load_ID;

 // DB1.Next Load ID = DB1.Next Load ID + CON.1
 DB1.Next_Load_ID = DB1.Next_Load_ID + 1;

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// PAR.Load ID = PAR.Next Load ID
PAR.Load_ID = PAR.Next_Load_ID;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Load ID = CON.*ZERO
PAR.Load_ID = *ZERO;

ENDIF;

// PAR.Ship To Customer = PAR.A/R Customer Number
PAR.Ship_To_Customer = PAR.AR_Customer_Number;

//?** Populate the Ship To Information
EXECUTE FUNCTION(RTV Cust Addr, A/R Cst RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1263804;
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Ship_To_Name);
PARAMETER(PAR.Ship_To_Address_Line_1);
PARAMETER(PAR.Ship_To_Address_Line_2);
PARAMETER(PAR.Ship_To_Address_Line_3);
PARAMETER(PAR.Ship_To_City);
PARAMETER(PAR.Ship_To_State_Code);
PARAMETER(PAR.Ship_To_Zip_Postal_Code);
PARAMETER(LCL.AR_Customer_Number);
PARAMETER(PAR.Email_Cust_On_Order_Ship);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Populate the Bill To Information
// PAR.Bill to Customer = PAR.A/R Customer Number
PAR.Bill_to_Customer = PAR.AR_Customer_Number;

EXECUTE FUNCTION(RTV Cust Name/Addr     RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1129143;
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.Bill_to_Name);
PARAMETER(PAR.Bill_to_Address_Line_1);
PARAMETER(PAR.Bill_to_Address_Line_2);
PARAMETER(PAR.Bill_to_Address_Line_3);
PARAMETER(PAR.Bill_to_City);
PARAMETER(PAR.Bill_to_State_Code);
PARAMETER(PAR.Bill_to_Zip_Postal_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Populate the Special Instructions fields
EXECUTE FUNCTION(RTV Special Instructs  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1437973;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Special_Instructions_2);
PARAMETER(PAR.Special_Instructions);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Type Code          RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1441836;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(LCL.OHE_Override_Type_Code);
PARAMETER(LCL.Customer_Group_Code);
PARAMETER(LCL.Customer_Group_Code_2);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.Order Type - Sales = CND.Transfer Order
PAR.Order_Type_Sales = 'TR';

// PAR.Load Type = CND.Regular
PAR.Load_Type = 'R';

// PAR.Sales Route Code = CND.Product Transfer
PAR.Sales_Route_Code = '000';

// PAR.Shipping Method = CND.Prepaid Truck
PAR.Shipping_Method = 'PT';

// PAR.Reefer Temperature = CON.*ZERO
PAR.Reefer_Temperature = 0.00;

// PAR.Shipping Temp Code C/F = CND.Fahrenheit
PAR.Shipping_Temp_Code_C_F = 'F';

//?** Update Scheduled Ship Date from passed in parm or job date
CASE;

// IF PAR.Date 1          PASS  USR is Not equal to zero
IF PAR.Date_1_PASS_USR <> *ZERO;

// PAR.Scheduled Ship Date = PAR.Date 1          PASS  USR
PAR.Scheduled_Ship_Date = PAR.Date_1_PASS_USR;

//?** Update Scheduled Ship Date from passed in parm or job date
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Scheduled Ship Date = JOB.*Job date
PAR.Scheduled_Ship_Date = JOB.*Job_date;

ENDIF;

//?** Update Requested Ship Date from passed in parm or job date
CASE;

// IF PAR.Date 2          PASS  USR is Not equal to zero
IF PAR.Date_2_PASS_USR <> *ZERO;

// PAR.Requested Ship Date = PAR.Date 2          PASS  USR
PAR.Requested_Ship_Date = PAR.Date_2_PASS_USR;

//?** Update Requested Ship Date from passed in parm or job date
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Requested Ship Date = JOB.*Job date
PAR.Requested_Ship_Date = JOB.*Job_date;

ENDIF;

//?** Update Req Deliv Date from passed in parm or job date
CASE;

// IF PAR.From Date Pass        USR is Not equal to zero
IF PAR.From_Date_Pass_USR <> *ZERO;

// PAR.Requested Delivery Date = PAR.From Date Pass        USR
PAR.Requested_Delivery_Date = PAR.From_Date_Pass_USR;

//?** Update Req Deliv Date from passed in parm or job date
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Requested Delivery Date = JOB.*Job date
PAR.Requested_Delivery_Date = JOB.*Job_date;

ENDIF;

//?** If Requested Delivery Date is job date and
//?** If time is after 2pm, add 2 hours. If after midnight, change
//?** requested deliv date to tomorrow and make time 2pm.
//?** If before midnight, add 2 hrs to job time.
//?** Calc Req Deliv Date & Time
CASE;

// IF PAR.Requested Delivery Date EQ JOB.*Job date
IF PAR.Requested_Delivery_Date = JOB.*Job_date;

//?** Calculate requested delivery time
CASE;

// IF JOB.*Job time is Between 2pm and midnight
IF JOB.*Job_time >= 140001;
AND JOB.*Job_time <= 235900;

//?** add 2 hours
//?** If requested deliv time = 0, put in job time, cvt to 4.0
CASE;

// IF PAR.Requested Delivery Time is Zero
IF PAR.Requested_Delivery_Time = *ZERO;

// WRK.USR Substitution Field = CVTVAR(JOB.*Job time)
WRK.USR_Substitution_Field = CVTVAR(JOB.*Job_time);

// WRK.USR Work Field 4A     USR = SUBSTRING(WRK.USR Substitution Field,CON.1,CON.4)
WRK.USR_Work_Field_4A_USR = SUBSTRING(WRK.USR_Substitution_Field:1:4);

// PAR.Requested Delivery Time = CVTVAR(WRK.USR Work Field 4A     USR)
PAR.Requested_Delivery_Time = CVTVAR(WRK.USR_Work_Field_4A_USR);

ENDIF;

// Call program Clc Dt/Tm + nn hours  XF.
CALL PROGRAM(Clc Dt/Tm + nn hours  XF) ('POIUXFR');
PARAMETER(PAR.Requested_Delivery_Date);
PARAMETER(PAR.Requested_Delivery_Time);
PARAMETER(WRK.USR_To_Date);
PARAMETER(WRK.USR_Time);
PARAMETER(2);

//?** If calc'd time puts date = or after midnight, add 1 to deliv date
CASE;

// IF WRK.USR Time is Midnight
IF WRK.USR_Time = 240000;

// OR WRK.USR Time is Between Midnight and 2pm
OR WRK.USR_Time >= 000001;
AND WRK.USR_Time <= 140000;

// PAR.Requested Delivery Time = CON.1400
PAR.Requested_Delivery_Time = 1400;

// Call program CLC Add/Sub Any Date   XF.
CALL PROGRAM(CLC Add/Sub Any Date   XF) ('PDX8XFR');
PARAMETER(PAR.Requested_Delivery_Date);
PARAMETER(PAR.Requested_Delivery_Date);
PARAMETER(1);

//?** If calc'd time puts date = or after midnight, add 1 to deliv date
// IF *OTHERWISE
IF *OTHERWISE;

//?** Change time to 4 digits
// WRK.USR Substitution Field = CVTVAR(WRK.USR Time)
WRK.USR_Substitution_Field = CVTVAR(WRK.USR_Time);

// WRK.USR Work Field 4A     USR = SUBSTRING(WRK.USR Substitution Field,CON.1,CON.4)
WRK.USR_Work_Field_4A_USR = SUBSTRING(WRK.USR_Substitution_Field:1:4);

// PAR.Requested Delivery Time = CVTVAR(WRK.USR Work Field 4A     USR)
PAR.Requested_Delivery_Time = CVTVAR(WRK.USR_Work_Field_4A_USR);

ENDIF;

ENDIF;

ENDIF;

//?** If requested deliv time still zeros, set to 8:00
CASE;

// IF PAR.Requested Delivery Time is Zero
IF PAR.Requested_Delivery_Time = *ZERO;

// WRK.USR Substitution Field = CVTVAR(CON.0800)
WRK.USR_Substitution_Field = CVTVAR(0800);

// WRK.USR Work Field 4A     USR = SUBSTRING(WRK.USR Substitution Field,CON.1,CON.4)
WRK.USR_Work_Field_4A_USR = SUBSTRING(WRK.USR_Substitution_Field:1:4);

// PAR.Requested Delivery Time = CVTVAR(WRK.USR Work Field 4A     USR)
PAR.Requested_Delivery_Time = CVTVAR(WRK.USR_Work_Field_4A_USR);

ENDIF;

// PAR.Header Status = CND.Available
PAR.Header_Status = 'A';

// PAR.Header Status Last = CND.Entered
PAR.Header_Status_Last = 'E';

// PAR.Load Plan Order = CND.yes
PAR.Load_Plan_Order = 'Y';

// PAR.Print Pick Slip = CND.yes
PAR.Print_Pick_Slip = 'Y';

// PAR.Affect Auto Accruals = CND.Affect Auto Accruals
PAR.Affect_Auto_Accruals = 'Y';

CASE;

// IF LCL.Live with TPM is No
IF LCL.Live_with_TPM = 'N';

// PAR.Event Code = CND.02 Load Planned
PAR.Event_Code = '02';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Event Code = CND.01 Order Entry
PAR.Event_Code = '01';

ENDIF;

// PAR.Export Status = CND.no
PAR.Export_Status = 'N';

// PAR.Order Date = JOB.*Job date
PAR.Order_Date = JOB.*Job_date;

// PAR.Date of Original Entry = JOB.*Job date
PAR.Date_of_Original_Entry = JOB.*Job_date;

// PAR.Time of Original Entry = JOB.*Job time
PAR.Time_of_Original_Entry = JOB.*Job_time;

// PAR.User Original Entry = JOB.*USER
PAR.User_Original_Entry = JOB.*USER;

// PAR.Billing Activity Type = CND.Warehouse Transfer
PAR.Billing_Activity_Type = 4;

// PAR.LTL Flag = CND.Yes
PAR.LTL_Flag = 'Y';

// PAR.Slip Sheet = CND.no
PAR.Slip_Sheet = 'N';

// PAR.Palletize = CND.no
PAR.Palletize = 'N';

// PAR.Shrink Wrap = CND.no
PAR.Shrink_Wrap = 'N';

// PAR.Email Cust On Order Ship = CND.No
PAR.Email_Cust_On_Order_Ship = 'N';

// PAR.Commodity Market Code = CON.*BLANK
PAR.Commodity_Market_Code = *BLANK;

// PAR.Terms Code = CON.01
PAR.Terms_Code = 01;

// PAR.Order in Use = CND.no
PAR.Order_in_Use = 'N';

// PAR.Order Type Print Status = CND.no
PAR.Order_Type_Print_Status = 'N';

// PAR.Absorbed Freight Rate = CON.1
PAR.Absorbed_Freight_Rate_CWT = 1;

// PAR.Age Code = CND.H: 7 Days to 119 Days
PAR.Age_Code = 'H';

// PAR.Manager Level Code = CON.VP
PAR.Manager_Level_Code = 'VP';

// PAR.VP Level Code = CON.100
PAR.VP_Level_Code = 100;

// PAR.Block Order Flag = CND.Firm Order
PAR.Block_Order_Flag = 'F';

// PAR.Trans Contol AS400/Plant = CND.Plant
PAR.Trans_Contol_AS400_Plant = 'P';

// PAR.Order Certification Flag = CND.No
PAR.Order_Certification_Flag = 'N';

// PAR.Transfer in Storage Ind = CND.No
PAR.Transfer_in_Storage_Ind = 'N';

// PAR.Price Status = CND.Priced
PAR.Price_Status = 'P';

// PAR.Affect Trade Fund = CND.yes
PAR.Affect_Trade_Fund = 'Y';

// PAR.Affect Pricing = CND.yes
PAR.Affect_Pricing = 'Y';

// PAR.Affect Commission = CND.no
PAR.Affect_Commission = 'N';

// PAR.Price Method Code = CND.Manual
PAR.Price_Method_Code = 'MAN';

// PAR.Date Method Code = CON.*BLANK
PAR.Date_Method_Code = *BLANK;

// PAR.Market Pricing Date = CON.*ZERO
PAR.Market_Pricing_Date = *ZERO;

// PAR.Item Structure Type Code = CON.*ZERO
PAR.Item_Structure_Type_Code = *ZERO;

// PAR.Item Structure Class Code = CON.*ZERO
PAR.Item_Structure_Class_Code = *ZERO;

// WRK.Catch Weight Status = CND.no
WRK.Catch_Weight_Status = 'N';

// PAR.Detail Line Status = CND.Entered
PAR.Detail_Line_Status = 'E';

//?** 09/25/2008 LJB E00224 default stop/drop to zeros
// PAR.Stop/Drop Sequence Number = CON.*ZERO
PAR.Stop_Drop_Sequence_Number = *ZERO;

// PAR.Order Sequence Number = CON.1
PAR.Order_Sequence_Number = 1;

// PAR.Order Secondary Line Seq = CON.1
PAR.Order_Secondary_Line_Seq = 1;

// PAR.Quantity Ordered = CON.1
PAR.Quantity_Ordered = 1;

//?** 05/22/2008 LJB E00161 Change TF Exempt code to match Order Entry
EXECUTE FUNCTION(Rtv Customer TFEx     RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1747887;
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.OH_TF_Exempt_Code);
{
 //?USER: Initialize routine

 // PAR.Customer TF Exempt Code = WRK.BLANK
 PAR.Customer_TF_Exempt_Code = WRK.BLANK;

 //?USER: Processing if Data record not found

 // PAR.Customer TF Exempt Code = WRK.BLANK
 PAR.Customer_TF_Exempt_Code = WRK.BLANK;

 //?USER: Process Data record

 // PAR.Customer TF Exempt Code = DB1.Customer TF Exempt Code
 PAR.Customer_TF_Exempt_Code = DB1.Customer_TF_Exempt_Code;

}


//?06/13/08 PKD FP1269
// PAR.OD Pallet Type = CND.None
PAR.OD_Pallet_Type = *BLANK;

// PAR.OD SD Price Method = CND.*NONE
PAR.OD_Price_Type = *BLANK;

// PAR.OD Hedged Price Sts = CND.blank
PAR.Released_by_User_Sts_Y_N = *BLANK;

ENDDO;

EXECUTE FUNCTION(Rtv Tmplt ShpCo FR Whs RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1848259;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Warehouse Type is Fresh
 IF DB1.Warehouse_Type = 'FR';

 // AND DB1.Warehouse Location is Internal (Plant)
 AND DB1.Warehouse_Location = 'I';

 // AND DB1.Production Warehouse Code EQ DB1.Warehouse Code
 AND DB1.Production_Warehouse_Code = DB1.Warehouse_Code;

 // AND DB1.Shipping Company EQ DB1.Accounting Company
 AND DB1.Shipping_Company = DB1.Accounting_Company;

 //?RMC Changed c3 to cmp Prod whse=Whse instead of Prod whse=Blanks
 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


// WRK.Production Warehouse Code = PAR.Warehouse Code
WRK.Production_Warehouse_Code = PAR.Warehouse_Code;

//?** If FRESH or Blank-Build Fresh Order, Detail and Load Detail  E00224
CASE;

// IF PAR.Trans Type 1 PASS     USR is Fresh
IF PAR.Trans_Type_1_PASS_USR = 'FR';

// OR PAR.Trans Type 1 PASS     USR is not entered
OR PAR.Trans_Type_1_PASS_USR = *BLANK;

//?** Build/create the Fresh Order, Detail and Load Detail records
DO;

//?** Populate Default Order Header Fields for Fresh order
DO;

//?** Retrieve next Order Number for Fresh
EXECUTE FUNCTION(CHG Next Order Number  CH) TYPE(CHGOBJ) FILE(CAASREP)          AC1263775;
PARAMETER(*ZERO);
PARAMETER(PAR.Next_Order_Number);
{
 //?USER: Processing before Data update

 //?Assumes Credit memo numbers always automatically assigned
 // PGM.*Record Data Changed = CND.*YES
 PGM.*Record_Data_Changed = 'Y';

 // PAR.USR Next Order Number = DB1.Next Order Number
 PAR.USR_Next_Order_Number = DB1.Next_Order_Number;

 // DB1.Next Order Number = DB1.Next Order Number + CON.1
 DB1.Next_Order_Number = DB1.Next_Order_Number + 1;

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// PAR.Order Number = PAR.Next Order Number
PAR.Order_Number = PAR.Next_Order_Number;

//?** Concatonate "Fresh", Day, Time to get a unique P.O.#
//?** Format *job date and time to concatonate to purchase order
// WRK.Day   (Char) USR = CVTVAR(JOB.*Job day)
WRK.Day_Char_USR = CVTVAR(JOB.*Job_day);

// PAR.Customer Purchase Order # = CONCAT(CON.Fresh,WRK.Day   (Char) USR,CON.*ZERO)
PAR.Customer_Purchase_Order_# = 'Fresh' + WRK.Day_Char_USR (*ZERO);

// WRK.Time  HH:MM:SS      USR = CVTVAR(JOB.*Job time)
WRK.Time_HHMMSS_USR = CVTVAR(JOB.*Job_time);

// PAR.Customer Purchase Order # = CONCAT(PAR.Customer Purchase Order #,WRK.Time  HH:MM:SS      USR,
PAR.Customer_Purchase_Order_# = PAR.Customer_Purchase_Order_# + WRK.Time_HHMMSS_USR (0);

//?Move up above this case
ENDDO;

//?** Populate Order Detail Fields for Fresh order & create OD record
DO;

// PAR.Order Sequence Number = CON.1
PAR.Order_Sequence_Number = 1;

// PAR.Order Secondary Line Seq = CON.1
PAR.Order_Secondary_Line_Seq = 1;

// PAR.Quantity Ordered = CON.1
PAR.Quantity_Ordered = 1;

// PAR.Warehouse Type = CND.Fresh
PAR.Warehouse_Type = 'FR';

// PAR.Item Age Days = CON.7
PAR.Item_Age_Days = 7;

EXECUTE FUNCTION(RTV Items by Type      RT) TYPE(RTVOBJ) FILE(PMAGREP)          AC1804696;
PARAMETER(PAR.Company_Number);
PARAMETER('FR');
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.Item_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program RTV for Ord.Detail     XF.
CALL PROGRAM(RTV for Ord.Detail     XF) ('PDC3XFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Order_Desc_Line_One);
PARAMETER(PAR.Order_Desc_Line_Two);
PARAMETER(PAR.U_M_Ordered);
PARAMETER(PAR.U_M_Base_Price);
PARAMETER(PAR.Unit_Weight_Ordered_U_M);
PARAMETER(PAR.Item_Level);
PARAMETER(LCL.Production_Date_Control);
PARAMETER(LCL.Catch_Weight_Status);
PARAMETER(PAR.Item_Structure_Class_Code);
PARAMETER(PAR.Item_Structure_Group_Code);
PARAMETER(PAR.Item_Structure_Type_Code);
PARAMETER(LCL.Default_Commod_Mark_basis);
PARAMETER(LCL.Transportation_Temp);
PARAMETER(LCL.Item_Type_Code);
PARAMETER(LCL.Commodity_Price_Group);
PARAMETER(LCL.Default_Warehouse);
PARAMETER(WRK.Price_Method_Code);
PARAMETER(LCL.Fresh_Chilling_Time);
PARAMETER(LCL.Variety_Rendered_Cut);
PARAMETER(PAR.OD_Item_Target_Price);
PARAMETER(LCL.Error_Status);

//?** 05/22/2008 LJB E00161 Change the calculation for TF Exempt code
//?** to use the same calcs as Order Entry
//?If not Pre-Commencement, set Tf exempt code
CASE;

// IF PAR.OH TF Exempt Code is Not Pre-Commencement
IF PAR.OH_TF_Exempt_Code = 'EC'/'EP'/'NE';

CASE;

// IF PAR.OH TF Exempt Code is Exempt Customer
IF PAR.OH_TF_Exempt_Code = 'EC';

CASE;

// IF PAR.Ord TF Exempt Code is Not Exempt
IF PAR.Ord_TF_Exempt_Code = 'NE';

// OR PAR.Ord TF Exempt Code is Exempt Customer
OR PAR.Ord_TF_Exempt_Code = 'EC';

// PAR.Ord TF Exempt Code = CND.Exempt Customer
PAR.Ord_TF_Exempt_Code = 'EC';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Ord TF Exempt Code = CND.Exempt Product
PAR.Ord_TF_Exempt_Code = 'EP';

ENDIF;

ENDIF;

CASE;

// IF PAR.OH TF Exempt Code is Not Exempt
IF PAR.OH_TF_Exempt_Code = 'NE';

// AND PAR.Ord TF Exempt Code is Exempt Product
AND PAR.Ord_TF_Exempt_Code = 'EP';

// PAR.OH TF Exempt Code = CND.Exempt Product
PAR.OH_TF_Exempt_Code = 'EP';

ENDIF;

//?If not Pre-Commencement, set Tf exempt code
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Ord TF Exempt Code = CND.Pre Commencement
PAR.Ord_TF_Exempt_Code = 'PC';

ENDIF;

// Call program Val ItmBal.Unit Cst    XF.
CALL PROGRAM(Val ItmBal.Unit Cst    XF) ('PDMCXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Unit_Cost_Per_Pound);
PARAMETER(WRK.Error_Status);

//?** Create Order Detail record for Fresh
EXECUTE FUNCTION(CRT Ord Dtl for TT ItmsRT) TYPE(RTVOBJ) FILE(PMAGREP)          AC1805052;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Type);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Order_Group_Code);
PARAMETER(PAR.Detail_Line_Status);
PARAMETER(PAR.Detail_Line_Status_Last);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.Comment_Print_Acknowledge);
PARAMETER(LCL.Comment_Print_Inv_Cr_Memo);
PARAMETER(LCL.Comment_Print_Pick_Slip);
PARAMETER(LCL.Comment_Print_Ship_Doc);
PARAMETER(PAR.Extended_Amount);
PARAMETER(PAR.Market_Pricing_Date);
PARAMETER(PAR.Commodity_Market_Code);
PARAMETER(PAR.Date_Method_Code);
PARAMETER(PAR.Price_Method_Code);
PARAMETER(PAR.Price_Overage_Override);
PARAMETER(*ZERO);
PARAMETER(PAR.Price_Status);
PARAMETER(*ZERO);
PARAMETER(PAR.U_M_Base_Price);
PARAMETER(PAR.U_M_Ordered);
PARAMETER(LCL.Work_Confirm_Status);
PARAMETER(LCL.Work_Over_Short_Status);
PARAMETER(LCL.OD_Production_Plan_Sts);
PARAMETER(PAR.Order_Desc_Line_One);
PARAMETER(PAR.Order_Desc_Line_Two);
PARAMETER(PAR.Age_Code);
PARAMETER(PAR.Palletize);
PARAMETER(PAR.Slip_Sheet);
PARAMETER(WRK.Catch_Weight_Status);
PARAMETER(PAR.Price_Audit);
PARAMETER(*BLANK);
PARAMETER(LCL.Production_Date_Control);
PARAMETER(PAR.Rated_Freight);
PARAMETER(PAR.Quantity_Ordered);
PARAMETER(PAR.Weight_Ordered);
PARAMETER(PAR.Quantity_Ordered);
PARAMETER(PAR.Weight_Ordered);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Unit_Cost_Pricing_U_M);
PARAMETER(PAR.Unit_Cost_Per_Pound);
PARAMETER(PAR.Unit_Price);
PARAMETER(*ZERO);
PARAMETER(PAR.Unit_Price_Ordered_U_M);
PARAMETER(PAR.Unit_Weight_Ordered_U_M);
PARAMETER(*ZERO);
PARAMETER(PAR.Requested_Ship_Date);
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(PAR.Actual_Shipped_Date);
PARAMETER('Y');
PARAMETER('Y');
PARAMETER(LCL.Affect_Sales_Pnds_Status);
PARAMETER(PAR.Item_Structure_Type_Code);
PARAMETER(PAR.Item_Structure_Group_Code);
PARAMETER(PAR.Item_Structure_Class_Code);
PARAMETER(PAR.Item_Level);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(PAR.Date_of_Original_Entry);
PARAMETER(PAR.User_Profile_Name);
PARAMETER(*BLANK);
PARAMETER(PAR.Event_Code);
PARAMETER(*BLANK);
PARAMETER(PAR.Sales_Route_Code);
PARAMETER(LCL.Modified_Flag);
PARAMETER(*BLANK);
PARAMETER(LCL.OD_Schedule_Override_Sts);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.OD_Adj_Type_Override);
PARAMETER(PAR.Affect_Trade_Fund);
PARAMETER(PAR.Affect_Commission);
PARAMETER(PAR.Affect_Pricing);
PARAMETER(PAR.Released_by_User_Sts_Y_N);
PARAMETER(PAR.Ord_TF_Exempt_Code);
PARAMETER(PAR.OD_Pallet_Type);
PARAMETER(LCL.Production_Warehouse);
PARAMETER(PAR.OD_Price_Type);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Price_Code);
PARAMETER(PAR.Maximum_Net_Weight);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.OD_Item_Target_Price);
PARAMETER(*ZERO);
PARAMETER(PAR.OD_Maximum_Unit_Weight);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Item_Age_Days);
PARAMETER(LCL.EDI_Status_1);
PARAMETER(LCL.EDI_Status_2);
PARAMETER(LCL.EDI_Status_3);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(WRK.Total_Weight_Ordered_USR);
{
 //?USER: Initialize routine

 // PAR.Order Sequence Number = CON.*ZERO
 PAR.Order_Sequence_Number = *ZERO;

 // PAR.Total Weight Ordered USR = CON.*ZERO
 PAR.Total_Weight_Ordered_USR = *ZERO;

 //?USER: Process Data record

 //?** Populate Order Detail Fields & create OD record
 DO;

 // PAR.Order Sequence Number = PAR.Order Sequence Number + CON.1
 PAR.Order_Sequence_Number = PAR.Order_Sequence_Number + 1;

 EXECUTE FUNCTION(RTV Dsc,U/M,PrcInf,Str RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1418320;
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.Order_Desc_Line_One);
 PARAMETER(PAR.Order_Desc_Line_Two);
 PARAMETER(LCL.UOM_Primary);
 PARAMETER(LCL.Conversion_Factor_1);
 PARAMETER(LCL.Operation_Factor_1);
 PARAMETER(LCL.UOM_Second);
 PARAMETER(LCL.Conversion_Factor_2);
 PARAMETER(LCL.Operation_Factor_2);
 PARAMETER(LCL.UOM_Third);
 PARAMETER(LCL.UOM_Pricing);
 PARAMETER(PAR.Unit_Weight_Ordered_U_M);
 PARAMETER(PAR.Production_Date_Control);
 PARAMETER(PAR.Catch_Weight_Status);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(LCL.Default_Commod_Mark_basis);
 PARAMETER(LCL.Price_Method_Default);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Item Def/TFExp    RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC1747888;
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.Ord_TF_Exempt_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Call program Val ItmBal.Unit Cst    XF.
 CALL PROGRAM(Val ItmBal.Unit Cst    XF) ('PDMCXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Unit_Cost_Per_Pound);
 PARAMETER(WRK.Error_Status);

 //?** Create Order Detail record for Frozen
 // PAR.Weight Ordered = PAR.Quantity Ordered * PAR.Unit Weight Ordered U/M *Rounded
 PAR.Weight_Ordered = PAR.Quantity_Ordered * PAR.Unit_Weight_Ordered_U_M 'H';

 //?FP1309 - Age Code place as blanks and Item Age Days as 120 days
 //?item age days was passing in con. 120  -> chg to par  E2621 RMC
 //?01/18/21 DN R17029-Set OD Spot Buy from 'blank' to 'N'.
 //?09/14/21 DN W77844-Set OD Spot Buy from 'N' to 'T'urn.
 EXECUTE FUNCTION(CRT PD Order Detail    CR) TYPE(CRTOBJ) FILE(OPBGWKP)          AC1425283;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Detail_Line_Status);
 PARAMETER(PAR.Detail_Line_Status_Last);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Comment_Print_Acknowledge);
 PARAMETER(LCL.Comment_Print_Inv_Cr_Memo);
 PARAMETER(LCL.Comment_Print_Pick_Slip);
 PARAMETER(LCL.Comment_Print_Ship_Doc);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Market_Pricing_Date);
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(PAR.Date_Method_Code);
 PARAMETER(PAR.Price_Method_Code);
 PARAMETER(PAR.Price_Overage_Override);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Price_Status);
 PARAMETER(*ZERO);
 PARAMETER(PAR.U_M_Base_Price);
 PARAMETER(PAR.U_M_Ordered);
 PARAMETER(LCL.Work_Confirm_Status);
 PARAMETER(LCL.Work_Over_Short_Status);
 PARAMETER(LCL.OD_Production_Plan_Sts);
 PARAMETER(PAR.Order_Desc_Line_One);
 PARAMETER(PAR.Order_Desc_Line_Two);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Palletize);
 PARAMETER('N');
 PARAMETER('N');
 PARAMETER(PAR.Price_Audit);
 PARAMETER(*BLANK);
 PARAMETER(LCL.Production_Date_Control);
 PARAMETER(PAR.Rated_Freight);
 PARAMETER(PAR.Quantity_Ordered);
 PARAMETER(PAR.Weight_Ordered);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Unit_Cost_Pricing_U_M);
 PARAMETER(PAR.Unit_Cost_Per_Pound);
 PARAMETER(PAR.Unit_Price);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Unit_Price_Ordered_U_M);
 PARAMETER(PAR.Unit_Weight_Ordered_U_M);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Requested_Ship_Date);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER('Y');
 PARAMETER('Y');
 PARAMETER(LCL.Affect_Sales_Pnds_Status);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Level);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Date_of_Original_Entry);
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Event_Code);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Sales_Route_Code);
 PARAMETER(LCL.Modified_Flag);
 PARAMETER(*BLANK);
 PARAMETER(LCL.OD_Schedule_Override_Sts);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.OD_Adj_Type_Override);
 PARAMETER(PAR.Affect_Trade_Fund);
 PARAMETER(PAR.Affect_Commission);
 PARAMETER(PAR.Affect_Pricing);
 PARAMETER(PAR.Released_by_User_Sts_Y_N);
 PARAMETER(PAR.Ord_TF_Exempt_Code);
 PARAMETER(PAR.OD_Pallet_Type);
 PARAMETER(LCL.Production_Warehouse);
 PARAMETER(PAR.OD_Price_Type);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Price_Code);
 PARAMETER(PAR.Maximum_Net_Weight);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.OD_Item_Target_Price);
 PARAMETER(*ZERO);
 PARAMETER(PAR.OD_Maximum_Unit_Weight);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Item_Age_Days);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('T');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.EDI_Status_1);
 PARAMETER(LCL.EDI_Status_2);
 PARAMETER(LCL.EDI_Status_3);
 {
  //?USER: Processing before Data update

  // DB1.Age Code = CND.Blank
  DB1.Age_Code = *BLANK;

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program Rtv First Consumed Itm XF.
  CALL PROGRAM(Rtv First Consumed Itm XF) ('POP1XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Consumed_Item_Code);

  EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Production_Warehouse);
  PARAMETER(NLL.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Calc Gross Weight from tares...    copied from Dsp Gross Wgt function
  DO;

  // Call program Rtv Tare Weight        XF.
  CALL PROGRAM(Rtv Tare Weight        XF) ('PBI3XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Misc_Tare_Weight);

  //?wi464
  // Call program RTV Itm BxID & Tares  XF.
  CALL PROGRAM(RTV Itm BxID & Tares  XF) ('PBI4XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Box_Weight);
  PARAMETER(LCL.Number_Cases_On_A_Pallet);
  PARAMETER(LCL.Pallet_Tare_Weight);
  PARAMETER(LCL.Box_iD);
  PARAMETER(DB1.OD_Pallet_Type);

  // LCL.Total Tare USR = LCL.Box Weight + LCL.Misc Tare Weight
  LCL.Total_Tare_USR = LCL.Box_Weight + LCL.Misc_Tare_Weight;

  // Box + Misc Tare
  LCL.Weight_1_1_U = ( LCL.Box_Weight + LCL.Misc_Tare_Weight ) * DB1.Quantity_Ordered 'H';

  //?Pallet Tare
  CASE;

  // IF DB1.Palletize is yes
  IF DB1.Palletize = 'Y';

  CASE;

  // IF LCL.Number Cases On A Pallet is GT Zero
  IF LCL.Number_Cases_On_A_Pallet > *ZERO;

  // Pallet Weight
  LCL.Weight_1_2_U = ( DB1.Quantity_Ordered / LCL.Number_Cases_On_A_Pallet 'H' )
  * LCL.Pallet_Tare_Weight 'H';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Weight 1.2             .U = CON.*ZERO
  LCL.Weight_1_2_U = *ZERO;

  ENDIF;

  //?Pallet Tare
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Weight 1.2             .U = CON.*ZERO
  LCL.Weight_1_2_U = *ZERO;

  ENDIF;

  // Estimated Gross
  DB1.OD_Estimated_Gross_Weight = ( DB1.Weight_Ordered + LCL.Weight_1_1_U )
  + LCL.Weight_1_2_U;

  //?E00196 RMC 8/24/12 chk pfs interface SHPTRN too
  ENDDO;

  //?USER: Processing after Data update

  //?WI642   JM-02/19/25-Add load order change log on new items.
  //?WI642   JM-02/19/25-Crt chg log if dtl has been sent to MPR USDA
  CASE;

  // IF DB1.OD MPR Prc Ready to Send is yes
  IF DB1.OD_MPR_Prc_Ready_to_Send = 'Y';

  //?Always create price type log ORDPRT
  // LCL.Text 3 Length USR = DB1.Order Sequence Number
  LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

  // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,CND.Not Entered,CON.1)
  LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + *BLANK (1);

  // LCL.Change Log New Value = PAR.OD Price Type
  LCL.Change_Log_New_Value = PAR.OD_Price_Type;

  // Call program CRT Load/OrderChg n/ld XF.
  CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
  PARAMETER(*ZERO);
  PARAMETER('ORDPRT');
  PARAMETER('SLS');
  PARAMETER(LCL.Change_Log_Prior_Value);
  PARAMETER(LCL.Change_Log_New_Value);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);

  ENDIF;

  //?WI642   JM-02/19/25-If not the transfer order nbr 9999999->crt chg logs
  CASE;

  // IF DB1.Order Number is ne 9999999
  IF DB1.Order_Number <> 9999999;

  // LCL.Text 3 Length USR = DB1.Order Sequence Number
  LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

  // LCL.Weight Beg Inv usr = CND.Not Entered
  LCL.Weight_Beg_Inv_usr = *ZERO;

  // LCL.Text USR 7 = LCL.Weight Beg Inv usr
  LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

  // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
  LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

  // LCL.Weight Beg Inv usr = PAR.Weight Ordered
  LCL.Weight_Beg_Inv_usr = PAR.Weight_Ordered;

  // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
  LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

  // Call program CRT Load/OrderChg n/ld XF.
  CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
  PARAMETER(*ZERO);
  PARAMETER('ORDWGT');
  PARAMETER('SLS');
  PARAMETER(LCL.Change_Log_Prior_Value);
  PARAMETER(LCL.Change_Log_New_Value);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);

  // LCL.Weight Beg Inv usr = CND.Not Entered
  LCL.Weight_Beg_Inv_usr = *ZERO;

  // LCL.Text USR 7 = LCL.Weight Beg Inv usr
  LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

  // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
  LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

  // LCL.Weight Beg Inv usr = PAR.Quantity Ordered
  LCL.Weight_Beg_Inv_usr = PAR.Quantity_Ordered;

  // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
  LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

  // Call program CRT Load/OrderChg n/ld XF.
  CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
  PARAMETER(*ZERO);
  PARAMETER('ORDQTY');
  PARAMETER('SLS');
  PARAMETER(LCL.Change_Log_Prior_Value);
  PARAMETER(LCL.Change_Log_New_Value);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);

  ENDIF;

 }

 // PAR.Total Weight Ordered USR = PAR.Total Weight Ordered USR + PAR.Weight Ordered
 PAR.Total_Weight_Ordered_USR = PAR.Total_Weight_Ordered_USR + PAR.Weight_Ordered;

 ENDDO;

}


//?** Put OD weight ordered into the OH total weight
// PAR.Order Weight Total = WRK.Total Weight Ordered USR
PAR.Order_Weight_Total = WRK.Total_Weight_Ordered_USR;

ENDDO;

//?** 09/25/2008 LJB E00224 increment stop/drop sequence
CASE;

// IF LCL.Live with TPM is No
IF LCL.Live_with_TPM = 'N';

// PAR.Stop/Drop Sequence Number = PAR.Stop/Drop Sequence Number + CON.1
PAR.Stop_Drop_Sequence_Number = PAR.Stop_Drop_Sequence_Number + 1;

ENDIF;

//?** For Fresh: Create the Order Header Record, Load Detail record
//?**            Load Plan Record, and Load Order Change Log record
EXECUTE FUNCTION(CRT Order Header       CR) TYPE(CRTOBJ) FILE(OPBFCPP)          AC1113750;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Type_Sales);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Ship_To_Name);
PARAMETER(PAR.Ship_To_Address_Line_1);
PARAMETER(PAR.Ship_To_Address_Line_2);
PARAMETER(PAR.Ship_To_Address_Line_3);
PARAMETER(PAR.Ship_To_City);
PARAMETER(PAR.Ship_To_State_Code);
PARAMETER(PAR.Ship_To_Zip_Postal_Code);
PARAMETER(PAR.Bill_to_Customer);
PARAMETER(PAR.Bill_to_Name);
PARAMETER(PAR.Bill_to_Address_Line_1);
PARAMETER(PAR.Bill_to_Address_Line_2);
PARAMETER(PAR.Bill_to_Address_Line_3);
PARAMETER(PAR.Bill_to_City);
PARAMETER(PAR.Bill_to_State_Code);
PARAMETER(PAR.Bill_to_Zip_Postal_Code);
PARAMETER(PAR.Customer_Purchase_Order_#);
PARAMETER(PAR.Order_Date);
PARAMETER(PAR.Requested_Ship_Date);
PARAMETER(PAR.Actual_Shipped_Date);
PARAMETER(*ZERO);
PARAMETER(PAR.Terms_Code);
PARAMETER(PAR.Special_Instructions);
PARAMETER(PAR.Special_Instructions_2);
PARAMETER(*BLANK);
PARAMETER(LCL.Comment_Print_Acknowledge);
PARAMETER(LCL.Comment_Print_Inv_Cr_Memo);
PARAMETER(LCL.Comment_Print_Pick_Slip);
PARAMETER(LCL.Comment_Print_Ship_Doc);
PARAMETER(*BLANK);
PARAMETER(PAR.Order_in_Use);
PARAMETER(PAR.Header_Status);
PARAMETER(PAR.Header_Status_Last);
PARAMETER(PAR.Order_Type_Print_Status);
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(PAR.User_Original_Entry);
PARAMETER(PAR.Date_of_Original_Entry);
PARAMETER(PAR.Order_Value_Total);
PARAMETER(PAR.Order_Weight_Total);
PARAMETER('N');
PARAMETER('N');
PARAMETER(LCL.New_Customer_Hold);
PARAMETER(PAR.Requested_Delivery_Date);
PARAMETER(PAR.Requested_Delivery_Time);
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Absorbed_Freight_Rate_CWT);
PARAMETER(PAR.Rated_Freight);
PARAMETER(PAR.LTL_Flag);
PARAMETER(PAR.Price_Audit);
PARAMETER(PAR.Price_Status);
PARAMETER(PAR.Shipping_Method);
PARAMETER(PAR.Export_Status);
PARAMETER(PAR.Palletize);
PARAMETER(PAR.Shrink_Wrap);
PARAMETER(PAR.Slip_Sheet);
PARAMETER(PAR.Age_Code);
PARAMETER(PAR.Reefer_Temperature);
PARAMETER(PAR.Load_Type);
PARAMETER(*ZERO);
PARAMETER(PAR.Load_Plan_Order);
PARAMETER(PAR.Print_Pick_Slip);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(PAR.Affect_Auto_Accruals);
PARAMETER(PAR.Sales_Route_Code);
PARAMETER(PAR.Manager_Level_Code);
PARAMETER(PAR.VP_Level_Code);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(PAR.Event_Code);
PARAMETER(PAR.Trans_Contol_AS400_Plant);
PARAMETER(LCL.Modified_Flag);
PARAMETER(*ZERO);
PARAMETER(PAR.Billing_Activity_Type);
PARAMETER(PAR.Block_Order_Flag);
PARAMETER(PAR.Order_Certification_Flag);
PARAMETER(*ZERO);
PARAMETER(LCL.Process_Sts_for_3C);
PARAMETER(LCL.Order_Conf_Fax_Sts);
PARAMETER(LCL.Manifest_Fax_Sts);
PARAMETER(LCL.Invoice_Fax_Sts);
PARAMETER(PAR.Transfer_in_Storage_Ind);
PARAMETER(PAR.Email_Cust_On_Order_Ship);
PARAMETER(LCL.Order_Emailed);
PARAMETER(LCL.Export_Docs_Go_w_Driver);
PARAMETER(PAR.Shipping_Temp_Code_C_F);
PARAMETER('N');
PARAMETER('N');
PARAMETER(LCL.Order_Requires_Review);
PARAMETER(*BLANK);
PARAMETER(LCL.Export_USDA_Approved);
PARAMETER(*BLANK);
PARAMETER(PAR.OH_TF_Exempt_Code);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Time_of_Original_Entry);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 // DB1.Age Code = CND.Blank
 DB1.Age_Code = *BLANK;

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program RTV System Date/Time   UP.
 CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Time_of_Original_Entry);

 //?USER: Processing if Data record already exists

 //?** Set flag so it can be tested on the return    T075 03/28/2006 LJB
 PGM.*Return_code = 'Y2U0003';

 RETURN;

}


//?07/31/19 DN R15161-Set New OHE Fields & Commented Out CHGOBJ in OHE CRTOBJ
//?09/20/21 DN W77844-Set OD Spot Buy from 'N' to 'T'urn.
EXECUTE FUNCTION(CRT Order Header Exten CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC1814351;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Stop_Drop_Sequence_Number);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER('O');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER('T');
PARAMETER(*BLANK);
PARAMETER(LCL.OHE_Override_Type_Code);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.EDI_Status_1);
PARAMETER(LCL.EDI_Status_2);
PARAMETER(LCL.EDI_Status_3);
PARAMETER('A');
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 // DB1.Job Time = JOB.*Job time
 DB1.Job_Time = JOB.*Job_time;

 // DB1.Job Date = JOB.*Job date
 DB1.Job_Date = JOB.*Job_date;

 // DB1.Job Name = JOB.*PROGRAM
 DB1.Job_Name = JOB.*PROGRAM;

 // DB1.User Id = JOB.*USER
 DB1.User_Id = JOB.*USER;

 //?USER: Processing if Data record already exists

 //?R15161 DN 07/31/19-Commented Out.
 //?USER: Processing if Data update error

 RETURN;

}


EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(1);
PARAMETER('01');
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(JOB.*Job_date);
PARAMETER('Y');
PARAMETER('N');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Ship_To_Customer);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


CASE;

// IF LCL.Live with TPM is No
IF LCL.Live_with_TPM = 'N';

EXECUTE FUNCTION(CRT Load Detail        CR) TYPE(CRTOBJ) FILE(OMFLCPP)          AC1183326;
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Stop_Drop_Sequence_Number);
PARAMETER(1);
PARAMETER(*BLANK);
PARAMETER(1);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER('O');
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.Load_Dtl_On_Time_Flag);
PARAMETER(WRK.On_Time_Addl_Rsn_Unused);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(LCL.LD_Unused_Sts_2);
PARAMETER(LCL.HPB_Transload_Station);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(Crt Load Plan Event    RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1295306;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Ship_To_Customer);
{
 //?USER: Initialize routine

 // PAR.Event Number = CON.*ZERO
 PAR.Event_Number = *ZERO;

 EXECUTE FUNCTION(RTV Latest Event/Date  RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1280294;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Event_Number);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?USER: Processing if Data record not found

 // WRK.Event Number = WRK.Event Number + CON.1
 WRK.Event_Number = WRK.Event_Number + 1;

 EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(WRK.Event_Number);
 PARAMETER('01');
 PARAMETER(PAR.Company_Number);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(JOB.*Job_date);
 PARAMETER('Y');
 PARAMETER('N');
 PARAMETER('Y');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 // WRK.Event Number = WRK.Event Number + CON.1
 WRK.Event_Number = WRK.Event_Number + 1;

 EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(WRK.Event_Number);
 PARAMETER('02');
 PARAMETER(PAR.Company_Number);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(JOB.*Job_date);
 PARAMETER('Y');
 PARAMETER('N');
 PARAMETER('Y');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?USER: Process Data record

 // PAR.Event Number = PAR.Event Number + CON.1
 PAR.Event_Number = PAR.Event_Number + 1;

 EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Event_Number);
 PARAMETER('02');
 PARAMETER(DB1.Invoice_Memo_Company);
 PARAMETER(DB1.Invoice_Memo_Number);
 PARAMETER(DB1.Invoice_Memo_Suffix);
 PARAMETER(JOB.*Job_date);
 PARAMETER(DB1.Activity_Completion);
 PARAMETER(DB1.Activity_Hold);
 PARAMETER(DB1.Post_Cash_Complete);
 PARAMETER(DB1.Cross_Event_Ref_Comp);
 PARAMETER(DB1.Cross_Event_Ref_Order);
 PARAMETER(DB1.Cross_Event_Ref_Event);
 PARAMETER(DB1.Ship_To_Customer);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 QUIT;

}


// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(PAR.Load_ID);
PARAMETER(1);
PARAMETER('ADDORD');
PARAMETER('SLS');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(*BLANK);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);

//?** Save Load ID & order #-fresh to pass back to the prompt screen
// PAR.System Value Numeric = PAR.Next Load ID
PAR.System_Value_Numeric = PAR.Next_Load_ID;

ENDIF;

//?** Put the Fresh order weight into the Load Header weight field
// PAR.Total Load Order Weight = PAR.Order Weight Total
PAR.Total_Load_Order_Weight = PAR.Order_Weight_Total;

// PAR.Order Number 1  PASS  USR = PAR.Order Number
PAR.Order_Number_1_PASS_USR = PAR.Order_Number;

ENDDO;

ENDIF;

//?** If FROZEN or Blank-Build FROZEN Order, Detail and Load Detail  E00224
CASE;

// IF PAR.Trans Type 1 PASS     USR is Frozen
IF PAR.Trans_Type_1_PASS_USR = 'FZ';

// OR PAR.Trans Type 1 PASS     USR is not entered
OR PAR.Trans_Type_1_PASS_USR = *BLANK;

//?** Build/create the Frozen Order, Detail and Load Detail records
DO;

//?** Populate Default Order Header Fields for Frozen order
DO;

//?** Retrieve next Order Number for Frozen
EXECUTE FUNCTION(CHG Next Order Number  CH) TYPE(CHGOBJ) FILE(CAASREP)          AC1263775;
PARAMETER(*ZERO);
PARAMETER(PAR.Next_Order_Number);
{
 //?USER: Processing before Data update

 //?Assumes Credit memo numbers always automatically assigned
 // PGM.*Record Data Changed = CND.*YES
 PGM.*Record_Data_Changed = 'Y';

 // PAR.USR Next Order Number = DB1.Next Order Number
 PAR.USR_Next_Order_Number = DB1.Next_Order_Number;

 // DB1.Next Order Number = DB1.Next Order Number + CON.1
 DB1.Next_Order_Number = DB1.Next_Order_Number + 1;

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// PAR.Order Number = PAR.Next Order Number
PAR.Order_Number = PAR.Next_Order_Number;

//?** Concatonate "Frozen", Day, Time to get a unique P.O.#
//?** Format *job date and time to concatonate to purchase order
// WRK.Day   (Char) USR = CVTVAR(JOB.*Job day)
WRK.Day_Char_USR = CVTVAR(JOB.*Job_day);

// PAR.Customer Purchase Order # = CONCAT(CON.Frozen,WRK.Day   (Char) USR,CON.*ZERO)
PAR.Customer_Purchase_Order_# = 'Frozen' + WRK.Day_Char_USR (*ZERO);

// WRK.Time  HH:MM:SS      USR = CVTVAR(JOB.*Job time)
WRK.Time_HHMMSS_USR = CVTVAR(JOB.*Job_time);

// PAR.Customer Purchase Order # = CONCAT(PAR.Customer Purchase Order #,WRK.Time  HH:MM:SS      USR,
PAR.Customer_Purchase_Order_# = PAR.Customer_Purchase_Order_# + WRK.Time_HHMMSS_USR (0);

//?** Default prod whse code to St Joe if it is blanks
CASE;

// IF WRK.Production Warehouse Code is Warehouse Code Blank
IF WRK.Production_Warehouse_Code = *BLANK;

// WRK.Production Warehouse Code = CND.St. Joseph
WRK.Production_Warehouse_Code = 'SJ1';

ENDIF;

EXECUTE FUNCTION(Rtv Tmplt ShpCo FZ Whs RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1848260;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(WRK.Production_Warehouse_Code);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Warehouse Type is Frozen
 IF DB1.Warehouse_Type = 'FZ';

 // AND DB1.Warehouse Location is Internal (Plant)
 AND DB1.Warehouse_Location = 'I';

 // AND DB1.Production Warehouse Code EQ PAR.Production Warehouse Code
 AND DB1.Production_Warehouse_Code = PAR.Production_Warehouse_Code;

 // AND PAR.Shipping Company EQ DB1.Accounting Company
 AND PAR.Shipping_Company = DB1.Accounting_Company;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


ENDDO;

//?** Populate Default Order Detail Fields for Frozen order
DO;

//?** Initialize the TF Exempt Code for detail items
//?If not Pre-Commencement, set Tf exempt code
CASE;

// IF PAR.OH TF Exempt Code is Not Pre-Commencement
IF PAR.OH_TF_Exempt_Code = 'EC'/'EP'/'NE';

CASE;

// IF PAR.OH TF Exempt Code is Exempt Customer
IF PAR.OH_TF_Exempt_Code = 'EC';

CASE;

// IF PAR.Ord TF Exempt Code is Not Exempt
IF PAR.Ord_TF_Exempt_Code = 'NE';

// OR PAR.Ord TF Exempt Code is Exempt Customer
OR PAR.Ord_TF_Exempt_Code = 'EC';

// PAR.Ord TF Exempt Code = CND.Exempt Customer
PAR.Ord_TF_Exempt_Code = 'EC';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Ord TF Exempt Code = CND.Exempt Product
PAR.Ord_TF_Exempt_Code = 'EP';

ENDIF;

ENDIF;

CASE;

// IF PAR.OH TF Exempt Code is Not Exempt
IF PAR.OH_TF_Exempt_Code = 'NE';

// AND PAR.Ord TF Exempt Code is Exempt Product
AND PAR.Ord_TF_Exempt_Code = 'EP';

// PAR.OH TF Exempt Code = CND.Exempt Product
PAR.OH_TF_Exempt_Code = 'EP';

ENDIF;

ENDIF;

// PAR.Warehouse Type = CND.Frozen
PAR.Warehouse_Type = 'FZ';

// PAR.Item Age Days = CON.120
PAR.Item_Age_Days = 120;

//?____________________________________________
//?RMC 10/14/13 COPIED FROM FRESH SECTION
EXECUTE FUNCTION(RTV Items by Type      RT) TYPE(RTVOBJ) FILE(PMAGREP)          AC1804696;
PARAMETER(PAR.Company_Number);
PARAMETER('FZ');
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.Item_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program RTV for Ord.Detail     XF.
CALL PROGRAM(RTV for Ord.Detail     XF) ('PDC3XFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Order_Desc_Line_One);
PARAMETER(PAR.Order_Desc_Line_Two);
PARAMETER(PAR.U_M_Ordered);
PARAMETER(PAR.U_M_Base_Price);
PARAMETER(PAR.Unit_Weight_Ordered_U_M);
PARAMETER(PAR.Item_Level);
PARAMETER(LCL.Production_Date_Control);
PARAMETER(LCL.Catch_Weight_Status);
PARAMETER(PAR.Item_Structure_Class_Code);
PARAMETER(PAR.Item_Structure_Group_Code);
PARAMETER(PAR.Item_Structure_Type_Code);
PARAMETER(LCL.Default_Commod_Mark_basis);
PARAMETER(LCL.Transportation_Temp);
PARAMETER(LCL.Item_Type_Code);
PARAMETER(LCL.Commodity_Price_Group);
PARAMETER(LCL.Default_Warehouse);
PARAMETER(WRK.Price_Method_Code);
PARAMETER(LCL.Fresh_Chilling_Time);
PARAMETER(LCL.Variety_Rendered_Cut);
PARAMETER(PAR.OD_Item_Target_Price);
PARAMETER(LCL.Error_Status);

//?____________________________________________
EXECUTE FUNCTION(CRT Ord Dtl for TT ItmsRT) TYPE(RTVOBJ) FILE(PMAGREP)          AC1805052;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Type);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Order_Group_Code);
PARAMETER(PAR.Detail_Line_Status);
PARAMETER(PAR.Detail_Line_Status_Last);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.Comment_Print_Acknowledge);
PARAMETER(LCL.Comment_Print_Inv_Cr_Memo);
PARAMETER(LCL.Comment_Print_Pick_Slip);
PARAMETER(LCL.Comment_Print_Ship_Doc);
PARAMETER(PAR.Extended_Amount);
PARAMETER(PAR.Market_Pricing_Date);
PARAMETER(PAR.Commodity_Market_Code);
PARAMETER(PAR.Date_Method_Code);
PARAMETER(PAR.Price_Method_Code);
PARAMETER(PAR.Price_Overage_Override);
PARAMETER(*ZERO);
PARAMETER(PAR.Price_Status);
PARAMETER(*ZERO);
PARAMETER(PAR.U_M_Base_Price);
PARAMETER(PAR.U_M_Ordered);
PARAMETER(LCL.Work_Confirm_Status);
PARAMETER(LCL.Work_Over_Short_Status);
PARAMETER(LCL.OD_Production_Plan_Sts);
PARAMETER(PAR.Order_Desc_Line_One);
PARAMETER(PAR.Order_Desc_Line_Two);
PARAMETER(PAR.Age_Code);
PARAMETER(PAR.Palletize);
PARAMETER(PAR.Slip_Sheet);
PARAMETER(WRK.Catch_Weight_Status);
PARAMETER(PAR.Price_Audit);
PARAMETER(*BLANK);
PARAMETER(LCL.Production_Date_Control);
PARAMETER(PAR.Rated_Freight);
PARAMETER(PAR.Quantity_Ordered);
PARAMETER(PAR.Weight_Ordered);
PARAMETER(PAR.Quantity_Ordered);
PARAMETER(PAR.Weight_Ordered);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Unit_Cost_Pricing_U_M);
PARAMETER(PAR.Unit_Cost_Per_Pound);
PARAMETER(PAR.Unit_Price);
PARAMETER(*ZERO);
PARAMETER(PAR.Unit_Price_Ordered_U_M);
PARAMETER(PAR.Unit_Weight_Ordered_U_M);
PARAMETER(*ZERO);
PARAMETER(PAR.Requested_Ship_Date);
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(PAR.Actual_Shipped_Date);
PARAMETER('Y');
PARAMETER('Y');
PARAMETER(LCL.Affect_Sales_Pnds_Status);
PARAMETER(PAR.Item_Structure_Type_Code);
PARAMETER(PAR.Item_Structure_Group_Code);
PARAMETER(PAR.Item_Structure_Class_Code);
PARAMETER(PAR.Item_Level);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(PAR.Date_of_Original_Entry);
PARAMETER(PAR.User_Profile_Name);
PARAMETER(*BLANK);
PARAMETER(PAR.Event_Code);
PARAMETER(*BLANK);
PARAMETER(PAR.Sales_Route_Code);
PARAMETER(LCL.Modified_Flag);
PARAMETER(*BLANK);
PARAMETER(LCL.OD_Schedule_Override_Sts);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.OD_Adj_Type_Override);
PARAMETER(PAR.Affect_Trade_Fund);
PARAMETER(PAR.Affect_Commission);
PARAMETER(PAR.Affect_Pricing);
PARAMETER(PAR.Released_by_User_Sts_Y_N);
PARAMETER(PAR.Ord_TF_Exempt_Code);
PARAMETER(PAR.OD_Pallet_Type);
PARAMETER(LCL.Production_Warehouse);
PARAMETER(PAR.OD_Price_Type);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Price_Code);
PARAMETER(PAR.Maximum_Net_Weight);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.OD_Item_Target_Price);
PARAMETER(*ZERO);
PARAMETER(PAR.OD_Maximum_Unit_Weight);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Item_Age_Days);
PARAMETER(LCL.EDI_Status_1);
PARAMETER(LCL.EDI_Status_2);
PARAMETER(LCL.EDI_Status_3);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(WRK.Total_Weight_Ordered_USR);
{
 //?USER: Initialize routine

 // PAR.Order Sequence Number = CON.*ZERO
 PAR.Order_Sequence_Number = *ZERO;

 // PAR.Total Weight Ordered USR = CON.*ZERO
 PAR.Total_Weight_Ordered_USR = *ZERO;

 //?USER: Process Data record

 //?** Populate Order Detail Fields & create OD record
 DO;

 // PAR.Order Sequence Number = PAR.Order Sequence Number + CON.1
 PAR.Order_Sequence_Number = PAR.Order_Sequence_Number + 1;

 EXECUTE FUNCTION(RTV Dsc,U/M,PrcInf,Str RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1418320;
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.Order_Desc_Line_One);
 PARAMETER(PAR.Order_Desc_Line_Two);
 PARAMETER(LCL.UOM_Primary);
 PARAMETER(LCL.Conversion_Factor_1);
 PARAMETER(LCL.Operation_Factor_1);
 PARAMETER(LCL.UOM_Second);
 PARAMETER(LCL.Conversion_Factor_2);
 PARAMETER(LCL.Operation_Factor_2);
 PARAMETER(LCL.UOM_Third);
 PARAMETER(LCL.UOM_Pricing);
 PARAMETER(PAR.Unit_Weight_Ordered_U_M);
 PARAMETER(PAR.Production_Date_Control);
 PARAMETER(PAR.Catch_Weight_Status);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(LCL.Default_Commod_Mark_basis);
 PARAMETER(LCL.Price_Method_Default);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Item Def/TFExp    RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC1747888;
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.Ord_TF_Exempt_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Call program Val ItmBal.Unit Cst    XF.
 CALL PROGRAM(Val ItmBal.Unit Cst    XF) ('PDMCXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Unit_Cost_Per_Pound);
 PARAMETER(WRK.Error_Status);

 //?** Create Order Detail record for Frozen
 // PAR.Weight Ordered = PAR.Quantity Ordered * PAR.Unit Weight Ordered U/M *Rounded
 PAR.Weight_Ordered = PAR.Quantity_Ordered * PAR.Unit_Weight_Ordered_U_M 'H';

 //?FP1309 - Age Code place as blanks and Item Age Days as 120 days
 //?item age days was passing in con. 120  -> chg to par  E2621 RMC
 //?01/18/21 DN R17029-Set OD Spot Buy from 'blank' to 'N'.
 //?09/14/21 DN W77844-Set OD Spot Buy from 'N' to 'T'urn.
 EXECUTE FUNCTION(CRT PD Order Detail    CR) TYPE(CRTOBJ) FILE(OPBGWKP)          AC1425283;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Detail_Line_Status);
 PARAMETER(PAR.Detail_Line_Status_Last);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Comment_Print_Acknowledge);
 PARAMETER(LCL.Comment_Print_Inv_Cr_Memo);
 PARAMETER(LCL.Comment_Print_Pick_Slip);
 PARAMETER(LCL.Comment_Print_Ship_Doc);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Market_Pricing_Date);
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(PAR.Date_Method_Code);
 PARAMETER(PAR.Price_Method_Code);
 PARAMETER(PAR.Price_Overage_Override);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Price_Status);
 PARAMETER(*ZERO);
 PARAMETER(PAR.U_M_Base_Price);
 PARAMETER(PAR.U_M_Ordered);
 PARAMETER(LCL.Work_Confirm_Status);
 PARAMETER(LCL.Work_Over_Short_Status);
 PARAMETER(LCL.OD_Production_Plan_Sts);
 PARAMETER(PAR.Order_Desc_Line_One);
 PARAMETER(PAR.Order_Desc_Line_Two);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Palletize);
 PARAMETER('N');
 PARAMETER('N');
 PARAMETER(PAR.Price_Audit);
 PARAMETER(*BLANK);
 PARAMETER(LCL.Production_Date_Control);
 PARAMETER(PAR.Rated_Freight);
 PARAMETER(PAR.Quantity_Ordered);
 PARAMETER(PAR.Weight_Ordered);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Unit_Cost_Pricing_U_M);
 PARAMETER(PAR.Unit_Cost_Per_Pound);
 PARAMETER(PAR.Unit_Price);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Unit_Price_Ordered_U_M);
 PARAMETER(PAR.Unit_Weight_Ordered_U_M);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Requested_Ship_Date);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER('Y');
 PARAMETER('Y');
 PARAMETER(LCL.Affect_Sales_Pnds_Status);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Level);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Date_of_Original_Entry);
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Event_Code);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Sales_Route_Code);
 PARAMETER(LCL.Modified_Flag);
 PARAMETER(*BLANK);
 PARAMETER(LCL.OD_Schedule_Override_Sts);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.OD_Adj_Type_Override);
 PARAMETER(PAR.Affect_Trade_Fund);
 PARAMETER(PAR.Affect_Commission);
 PARAMETER(PAR.Affect_Pricing);
 PARAMETER(PAR.Released_by_User_Sts_Y_N);
 PARAMETER(PAR.Ord_TF_Exempt_Code);
 PARAMETER(PAR.OD_Pallet_Type);
 PARAMETER(LCL.Production_Warehouse);
 PARAMETER(PAR.OD_Price_Type);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Price_Code);
 PARAMETER(PAR.Maximum_Net_Weight);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.OD_Item_Target_Price);
 PARAMETER(*ZERO);
 PARAMETER(PAR.OD_Maximum_Unit_Weight);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Item_Age_Days);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('T');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.EDI_Status_1);
 PARAMETER(LCL.EDI_Status_2);
 PARAMETER(LCL.EDI_Status_3);
 {
  //?USER: Processing before Data update

  // DB1.Age Code = CND.Blank
  DB1.Age_Code = *BLANK;

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program Rtv First Consumed Itm XF.
  CALL PROGRAM(Rtv First Consumed Itm XF) ('POP1XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Consumed_Item_Code);

  EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Production_Warehouse);
  PARAMETER(NLL.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Calc Gross Weight from tares...    copied from Dsp Gross Wgt function
  DO;

  // Call program Rtv Tare Weight        XF.
  CALL PROGRAM(Rtv Tare Weight        XF) ('PBI3XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Misc_Tare_Weight);

  //?wi464
  // Call program RTV Itm BxID & Tares  XF.
  CALL PROGRAM(RTV Itm BxID & Tares  XF) ('PBI4XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Box_Weight);
  PARAMETER(LCL.Number_Cases_On_A_Pallet);
  PARAMETER(LCL.Pallet_Tare_Weight);
  PARAMETER(LCL.Box_iD);
  PARAMETER(DB1.OD_Pallet_Type);

  // LCL.Total Tare USR = LCL.Box Weight + LCL.Misc Tare Weight
  LCL.Total_Tare_USR = LCL.Box_Weight + LCL.Misc_Tare_Weight;

  // Box + Misc Tare
  LCL.Weight_1_1_U = ( LCL.Box_Weight + LCL.Misc_Tare_Weight ) * DB1.Quantity_Ordered 'H';

  //?Pallet Tare
  CASE;

  // IF DB1.Palletize is yes
  IF DB1.Palletize = 'Y';

  CASE;

  // IF LCL.Number Cases On A Pallet is GT Zero
  IF LCL.Number_Cases_On_A_Pallet > *ZERO;

  // Pallet Weight
  LCL.Weight_1_2_U = ( DB1.Quantity_Ordered / LCL.Number_Cases_On_A_Pallet 'H' )
  * LCL.Pallet_Tare_Weight 'H';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Weight 1.2             .U = CON.*ZERO
  LCL.Weight_1_2_U = *ZERO;

  ENDIF;

  //?Pallet Tare
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Weight 1.2             .U = CON.*ZERO
  LCL.Weight_1_2_U = *ZERO;

  ENDIF;

  // Estimated Gross
  DB1.OD_Estimated_Gross_Weight = ( DB1.Weight_Ordered + LCL.Weight_1_1_U )
  + LCL.Weight_1_2_U;

  //?E00196 RMC 8/24/12 chk pfs interface SHPTRN too
  ENDDO;

  //?USER: Processing after Data update

  //?WI642   JM-02/19/25-Add load order change log on new items.
  //?WI642   JM-02/19/25-Crt chg log if dtl has been sent to MPR USDA
  CASE;

  // IF DB1.OD MPR Prc Ready to Send is yes
  IF DB1.OD_MPR_Prc_Ready_to_Send = 'Y';

  //?Always create price type log ORDPRT
  // LCL.Text 3 Length USR = DB1.Order Sequence Number
  LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

  // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,CND.Not Entered,CON.1)
  LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + *BLANK (1);

  // LCL.Change Log New Value = PAR.OD Price Type
  LCL.Change_Log_New_Value = PAR.OD_Price_Type;

  // Call program CRT Load/OrderChg n/ld XF.
  CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
  PARAMETER(*ZERO);
  PARAMETER('ORDPRT');
  PARAMETER('SLS');
  PARAMETER(LCL.Change_Log_Prior_Value);
  PARAMETER(LCL.Change_Log_New_Value);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);

  ENDIF;

  //?WI642   JM-02/19/25-If not the transfer order nbr 9999999->crt chg logs
  CASE;

  // IF DB1.Order Number is ne 9999999
  IF DB1.Order_Number <> 9999999;

  // LCL.Text 3 Length USR = DB1.Order Sequence Number
  LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

  // LCL.Weight Beg Inv usr = CND.Not Entered
  LCL.Weight_Beg_Inv_usr = *ZERO;

  // LCL.Text USR 7 = LCL.Weight Beg Inv usr
  LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

  // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
  LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

  // LCL.Weight Beg Inv usr = PAR.Weight Ordered
  LCL.Weight_Beg_Inv_usr = PAR.Weight_Ordered;

  // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
  LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

  // Call program CRT Load/OrderChg n/ld XF.
  CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
  PARAMETER(*ZERO);
  PARAMETER('ORDWGT');
  PARAMETER('SLS');
  PARAMETER(LCL.Change_Log_Prior_Value);
  PARAMETER(LCL.Change_Log_New_Value);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);

  // LCL.Weight Beg Inv usr = CND.Not Entered
  LCL.Weight_Beg_Inv_usr = *ZERO;

  // LCL.Text USR 7 = LCL.Weight Beg Inv usr
  LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

  // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
  LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

  // LCL.Weight Beg Inv usr = PAR.Quantity Ordered
  LCL.Weight_Beg_Inv_usr = PAR.Quantity_Ordered;

  // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
  LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

  // Call program CRT Load/OrderChg n/ld XF.
  CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
  PARAMETER(*ZERO);
  PARAMETER('ORDQTY');
  PARAMETER('SLS');
  PARAMETER(LCL.Change_Log_Prior_Value);
  PARAMETER(LCL.Change_Log_New_Value);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);

  ENDIF;

 }

 // PAR.Total Weight Ordered USR = PAR.Total Weight Ordered USR + PAR.Weight Ordered
 PAR.Total_Weight_Ordered_USR = PAR.Total_Weight_Ordered_USR + PAR.Weight_Ordered;

 ENDDO;

}


//?** Put the total weight for order detail frozen to the order header
EXECUTE FUNCTION(RTV For Fin Accruals   RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1347567;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(LCL.Item_Code);
PARAMETER(LCL.U_M_Ordered);
PARAMETER(PAR.Quantity_Ordered);
PARAMETER(LCL.Unit_Price);
PARAMETER(LCL.Unit_Price_Credit);
PARAMETER(LCL.Unit_Price_Ordered_U_M);
PARAMETER(PAR.Unit_Weight_Ordered_U_M);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.Weight Ordered = PAR.Quantity Ordered * PAR.Unit Weight Ordered U/M *Rounded
PAR.Weight_Ordered = PAR.Quantity_Ordered * PAR.Unit_Weight_Ordered_U_M 'H';

//?** Put OD weight ordered into the OH total weight
// PAR.Order Weight Total = WRK.Total Weight Ordered USR
PAR.Order_Weight_Total = WRK.Total_Weight_Ordered_USR;

ENDDO;

//?** 09/25/2008 LJB E00224 increment stop/drop sequence
CASE;

// IF LCL.Live with TPM is No
IF LCL.Live_with_TPM = 'N';

// PAR.Stop/Drop Sequence Number = PAR.Stop/Drop Sequence Number + CON.1
PAR.Stop_Drop_Sequence_Number = PAR.Stop_Drop_Sequence_Number + 1;

ENDIF;

//?** For Frozen: Create the Order Header Record, Load Detail record
//?**             Load Plan Record, and Load Order Change Log record
EXECUTE FUNCTION(CRT Order Header       CR) TYPE(CRTOBJ) FILE(OPBFCPP)          AC1113750;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Type_Sales);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Ship_To_Name);
PARAMETER(PAR.Ship_To_Address_Line_1);
PARAMETER(PAR.Ship_To_Address_Line_2);
PARAMETER(PAR.Ship_To_Address_Line_3);
PARAMETER(PAR.Ship_To_City);
PARAMETER(PAR.Ship_To_State_Code);
PARAMETER(PAR.Ship_To_Zip_Postal_Code);
PARAMETER(PAR.Bill_to_Customer);
PARAMETER(PAR.Bill_to_Name);
PARAMETER(PAR.Bill_to_Address_Line_1);
PARAMETER(PAR.Bill_to_Address_Line_2);
PARAMETER(PAR.Bill_to_Address_Line_3);
PARAMETER(PAR.Bill_to_City);
PARAMETER(PAR.Bill_to_State_Code);
PARAMETER(PAR.Bill_to_Zip_Postal_Code);
PARAMETER(PAR.Customer_Purchase_Order_#);
PARAMETER(PAR.Order_Date);
PARAMETER(PAR.Requested_Ship_Date);
PARAMETER(PAR.Actual_Shipped_Date);
PARAMETER(*ZERO);
PARAMETER(PAR.Terms_Code);
PARAMETER(PAR.Special_Instructions);
PARAMETER(PAR.Special_Instructions_2);
PARAMETER(*BLANK);
PARAMETER(LCL.Comment_Print_Acknowledge);
PARAMETER(LCL.Comment_Print_Inv_Cr_Memo);
PARAMETER(LCL.Comment_Print_Pick_Slip);
PARAMETER(LCL.Comment_Print_Ship_Doc);
PARAMETER(*BLANK);
PARAMETER(PAR.Order_in_Use);
PARAMETER(PAR.Header_Status);
PARAMETER(PAR.Header_Status_Last);
PARAMETER(PAR.Order_Type_Print_Status);
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(PAR.User_Original_Entry);
PARAMETER(PAR.Date_of_Original_Entry);
PARAMETER(PAR.Order_Value_Total);
PARAMETER(PAR.Order_Weight_Total);
PARAMETER('N');
PARAMETER('N');
PARAMETER(LCL.New_Customer_Hold);
PARAMETER(PAR.Requested_Delivery_Date);
PARAMETER(PAR.Requested_Delivery_Time);
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Absorbed_Freight_Rate_CWT);
PARAMETER(PAR.Rated_Freight);
PARAMETER(PAR.LTL_Flag);
PARAMETER(PAR.Price_Audit);
PARAMETER(PAR.Price_Status);
PARAMETER(PAR.Shipping_Method);
PARAMETER(PAR.Export_Status);
PARAMETER(PAR.Palletize);
PARAMETER(PAR.Shrink_Wrap);
PARAMETER(PAR.Slip_Sheet);
PARAMETER(PAR.Age_Code);
PARAMETER(PAR.Reefer_Temperature);
PARAMETER(PAR.Load_Type);
PARAMETER(*ZERO);
PARAMETER(PAR.Load_Plan_Order);
PARAMETER(PAR.Print_Pick_Slip);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(PAR.Affect_Auto_Accruals);
PARAMETER(PAR.Sales_Route_Code);
PARAMETER(PAR.Manager_Level_Code);
PARAMETER(PAR.VP_Level_Code);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(PAR.Event_Code);
PARAMETER(PAR.Trans_Contol_AS400_Plant);
PARAMETER(LCL.Modified_Flag);
PARAMETER(*ZERO);
PARAMETER(PAR.Billing_Activity_Type);
PARAMETER(PAR.Block_Order_Flag);
PARAMETER(PAR.Order_Certification_Flag);
PARAMETER(*ZERO);
PARAMETER(LCL.Process_Sts_for_3C);
PARAMETER(LCL.Order_Conf_Fax_Sts);
PARAMETER(LCL.Manifest_Fax_Sts);
PARAMETER(LCL.Invoice_Fax_Sts);
PARAMETER(PAR.Transfer_in_Storage_Ind);
PARAMETER(PAR.Email_Cust_On_Order_Ship);
PARAMETER(LCL.Order_Emailed);
PARAMETER(LCL.Export_Docs_Go_w_Driver);
PARAMETER(PAR.Shipping_Temp_Code_C_F);
PARAMETER('N');
PARAMETER('N');
PARAMETER(LCL.Order_Requires_Review);
PARAMETER(*BLANK);
PARAMETER(LCL.Export_USDA_Approved);
PARAMETER(*BLANK);
PARAMETER(PAR.OH_TF_Exempt_Code);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Time_of_Original_Entry);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 // DB1.Age Code = CND.Blank
 DB1.Age_Code = *BLANK;

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program RTV System Date/Time   UP.
 CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Time_of_Original_Entry);

 //?USER: Processing if Data record already exists

 //?** Set flag so it can be tested on the return    T075 03/28/2006 LJB
 PGM.*Return_code = 'Y2U0003';

 RETURN;

}


//?06/13/18 DN R12926-Pass in Absorbed Freight Rate.
//?07/31/19 DN R15161-Set New OHE Fields & Commented Out CHGOBJ in OHE CRTOBJ
//?09/20/21 DN W77844-Set OD Spot Buy from 'N' to 'T'urn.
EXECUTE FUNCTION(CRT Order Header Exten CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC1814351;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Stop_Drop_Sequence_Number);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER('O');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER('T');
PARAMETER(*BLANK);
PARAMETER(LCL.OHE_Override_Type_Code);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Absorbed_Freight_Rate_CWT);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.EDI_Status_1);
PARAMETER(LCL.EDI_Status_2);
PARAMETER(LCL.EDI_Status_3);
PARAMETER('A');
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 // DB1.Job Time = JOB.*Job time
 DB1.Job_Time = JOB.*Job_time;

 // DB1.Job Date = JOB.*Job date
 DB1.Job_Date = JOB.*Job_date;

 // DB1.Job Name = JOB.*PROGRAM
 DB1.Job_Name = JOB.*PROGRAM;

 // DB1.User Id = JOB.*USER
 DB1.User_Id = JOB.*USER;

 //?USER: Processing if Data record already exists

 //?R15161 DN 07/31/19-Commented Out.
 //?USER: Processing if Data update error

 RETURN;

}


EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(1);
PARAMETER('01');
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(JOB.*Job_date);
PARAMETER('Y');
PARAMETER('N');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Ship_To_Customer);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


CASE;

// IF LCL.Live with TPM is No
IF LCL.Live_with_TPM = 'N';

EXECUTE FUNCTION(CRT Load Detail        CR) TYPE(CRTOBJ) FILE(OMFLCPP)          AC1183326;
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Stop_Drop_Sequence_Number);
PARAMETER(1);
PARAMETER(*ZERO);
PARAMETER(1);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER('O');
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.Load_Dtl_On_Time_Flag);
PARAMETER(WRK.On_Time_Addl_Rsn_Unused);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(LCL.LD_Unused_Sts_2);
PARAMETER(LCL.HPB_Transload_Station);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Stop_Drop);
PARAMETER('ADDORD');
PARAMETER('SLS');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(*BLANK);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);

EXECUTE FUNCTION(Crt Load Plan Event    RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1295306;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Ship_To_Customer);
{
 //?USER: Initialize routine

 // PAR.Event Number = CON.*ZERO
 PAR.Event_Number = *ZERO;

 EXECUTE FUNCTION(RTV Latest Event/Date  RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1280294;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Event_Number);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?USER: Processing if Data record not found

 // WRK.Event Number = WRK.Event Number + CON.1
 WRK.Event_Number = WRK.Event_Number + 1;

 EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(WRK.Event_Number);
 PARAMETER('01');
 PARAMETER(PAR.Company_Number);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(JOB.*Job_date);
 PARAMETER('Y');
 PARAMETER('N');
 PARAMETER('Y');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 // WRK.Event Number = WRK.Event Number + CON.1
 WRK.Event_Number = WRK.Event_Number + 1;

 EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(WRK.Event_Number);
 PARAMETER('02');
 PARAMETER(PAR.Company_Number);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(JOB.*Job_date);
 PARAMETER('Y');
 PARAMETER('N');
 PARAMETER('Y');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?USER: Process Data record

 // PAR.Event Number = PAR.Event Number + CON.1
 PAR.Event_Number = PAR.Event_Number + 1;

 EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Event_Number);
 PARAMETER('02');
 PARAMETER(DB1.Invoice_Memo_Company);
 PARAMETER(DB1.Invoice_Memo_Number);
 PARAMETER(DB1.Invoice_Memo_Suffix);
 PARAMETER(JOB.*Job_date);
 PARAMETER(DB1.Activity_Completion);
 PARAMETER(DB1.Activity_Hold);
 PARAMETER(DB1.Post_Cash_Complete);
 PARAMETER(DB1.Cross_Event_Ref_Comp);
 PARAMETER(DB1.Cross_Event_Ref_Order);
 PARAMETER(DB1.Cross_Event_Ref_Event);
 PARAMETER(DB1.Ship_To_Customer);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 QUIT;

}


ENDIF;

//?** Save order #-frozen to pass back to the prompt screen
// PAR.Order Number 2  PASS  USR = PAR.Order Number
PAR.Order_Number_2_PASS_USR = PAR.Order_Number;

ENDDO;

ENDIF;

//?** Build and create the Load Header record
DO;

CASE;

// IF LCL.Live with TPM is No
IF LCL.Live_with_TPM = 'N';

//?** Populate the total load order weight            E00224 9/25/08
CASE;

// IF PAR.Trans Type 1 PASS     USR is Fresh
IF PAR.Trans_Type_1_PASS_USR = 'FR';

//?**   This is already done in the Fresh calcs
//?** Populate the total load order weight            E00224 9/25/08
// IF PAR.Trans Type 1 PASS     USR is Frozen
IF PAR.Trans_Type_1_PASS_USR = 'FZ';

// PAR.Total Load Order Weight = PAR.Order Weight Total
PAR.Total_Load_Order_Weight = PAR.Order_Weight_Total;

//?** Populate the total load order weight            E00224 9/25/08
// IF *OTHERWISE
IF *OTHERWISE;

//?** If Trans Type 1 PASS parm is blanks, combine fresh and frozen
//?** Add Frozen ord weight to Fresh ord weight in Load Header field
// PAR.Total Load Order Weight = PAR.Total Load Order Weight + PAR.Order Weight Total
PAR.Total_Load_Order_Weight = PAR.Total_Load_Order_Weight + PAR.Order_Weight_Total;

ENDIF;

// PAR.Total Stops = CON.1
PAR.Total_Stops = 1;

// PAR.Total Load Miles = CON.1
PAR.Total_Load_Miles = 1;

// PAR.Override Total Load Miles = CON.*ZERO
PAR.Override_Total_Load_Miles = *ZERO;

// PAR.Schedule Sequence Number = CON.1
PAR.Schedule_Sequence_Number = 1;

// PAR.Ship Status = CND.Open
PAR.Ship_Status = 'O';

// PAR.Load Status = CND.Entered
PAR.Load_Status = 'E';

// PAR.Load Type = CND.Regular
PAR.Load_Type = 'R';

// PAR.Load Confirmed Sts = CND.no
PAR.Load_Confirmed_Sts = 'N';

// PAR.Export Load USDA-OK = CND.No
PAR.Export_Load_USDA_OK = 'N';

// PAR.Allocate Pounds/Miles = CND.Miles
PAR.Allocate_Pounds_Miles = 'M';

// PAR.Shipping Temp C/F txt = CND.EQ Fahrenheit
PAR.Shipping_Temp_C_F_txt = 'F';

//?** S00164 Default shag and wash flags to "Y"
// LCL.Load Shag Flag = CND.yes
LCL.Load_Shag_Flag = 'Y';

// LCL.Load Wash Flag = CND.yes
LCL.Load_Wash_Flag = 'Y';

// PAR.System Value Numeric = PAR.Next Load ID
PAR.System_Value_Numeric = PAR.Next_Load_ID;

EXECUTE FUNCTION(CRT Load Header        CR) TYPE(CRTOBJ) FILE(OMFJCPP)          AC1183329;
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(PAR.LTL_Flag);
PARAMETER(PAR.Load_Status);
PARAMETER(PAR.Reefer_Temperature);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(PAR.Total_Load_Order_Weight);
PARAMETER(*ZERO);
PARAMETER(PAR.Allocate_Pounds_Miles);
PARAMETER(PAR.Total_Stops);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(PAR.Rated_Freight);
PARAMETER(PAR.Ship_Status);
PARAMETER(PAR.Load_Type);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(PAR.Total_Load_Miles);
PARAMETER(*BLANK);
PARAMETER(PAR.Shipping_Method);
PARAMETER(PAR.Ship_From_Warehouse);
PARAMETER(PAR.Ship_To_State_Code);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(PAR.Export_Status);
PARAMETER(*ZERO);
PARAMETER(LCL.On_Time_Y_N);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.LH_Unused_Sts);
PARAMETER(LCL.LH_Carrier_Payment_Sts);
PARAMETER(*ZERO);
PARAMETER(PAR.Requested_Delivery_Date);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.Load_Held_Over);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(LCL.Load_Shag_Flag);
PARAMETER(LCL.Load_Wash_Flag);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Load_Confirmed_Sts);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Override_Total_Load_Miles);
PARAMETER(*ZERO);
PARAMETER(LCL.Partial_Load);
PARAMETER(LCL.Load_Confirmation_Fax_Sts);
PARAMETER(PAR.Export_Load_USDA_OK);
PARAMETER(LCL.Late_Delivery_Email_Flag);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(PAR.Shipping_Temp_C_F_txt);
PARAMETER(*BLANK);
PARAMETER(LCL.Multi_Company_Load);
PARAMETER(WRK.Blank_for_4_USR);
PARAMETER(LCL.LH_On_Time_Reason_Code);
PARAMETER(LCL.LH_Held_Over_Reason);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?***** Change Log and Comments
 DO;

 //?** 06/28/2006 LJB TRF011
 //?** Added 3 char LH On-Time Reason Code as an input parm to
 //?** replace the 1 char On Time Reason parm
 //?*****
 //?** 09/19/2006 LJB PK0036
 //?** Added 3 char LH Heldover Reason Code as an input parm to
 //?** replace the 1 char Held Over Reason parm
 //?*****
 ENDDO;

}


//?Calc Load U/M           -- RMC 4/17/14 e3067
DO;

//?** All boxes=BX, All combos=CB, Any mix of the two=MX   E00239 11/12/08
// Call program RTV UM/Whs Code,BX Qty XF.
CALL PROGRAM(RTV UM/Whs Code,BX Qty XF) ('PPYXXFR');
PARAMETER(PAR.Load_ID);
PARAMETER(LCL.Load_U_M);

ENDDO;

EXECUTE FUNCTION(CHG Load U/M          CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC1783988;
PARAMETER(PAR.Load_ID);
PARAMETER(LCL.Load_U_M);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?** FP1127
// Call program CLC Total Load Miles   XF.
CALL PROGRAM(CLC Total Load Miles   XF) ('PDW3XFR');
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Total_Load_Miles);
PARAMETER(PAR.Override_Total_Load_Miles);

// Call program CHG Total Load Miles   XF.
CALL PROGRAM(CHG Total Load Miles   XF) ('PMFSXFR');
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Total_Load_Miles);
PARAMETER(PAR.Override_Total_Load_Miles);

ENDIF;

ENDDO;

