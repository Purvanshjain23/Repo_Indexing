      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      Hog Production
      * PROGRAM:     HP492
      * TITLE:       Specify Closed Period to Reopen
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     09/02/03
      *
      * FUNCTION: Submits a reopen of the period and all groups closed in the period.
      *           This is an I.S. function. It does not have security logic. It is NOT
      *           to be given to users.
      *
      ****************************************************************
      * MODIFICATIONS
      ****************************************************************
      * DATE      PROGRAMMER
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhpd492    cf   e             workstn
     F                                     infds(iofeed)
      *
     Fhsp002    if   e           k disk
      *    Functions
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  Compile time array for SBMJOB used in QCMDEXC
      *---------------------------------------------------------------
     D cmd             s              1    dim(80) ctdata perrcd(80)
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D pgm             s             10
     D msgfl           s             10
     D maxmsg          s              2  0  inz(20)
     D routne          s              6
      *
      *
      * Workfields for date manipulation
      *
     D wkisodate       s               D   datfmt(*iso)
      *
      *
      * Parm fields
      *
     D xxbpdt          s              8  0
     D xxepdt          s              8  0
      *
     D xxjobq          s             10     inz('*JOBD     ')
     D xxnite          s              1     inz('N')
     D xxcopy          s              1  0
      *
      *
      *  Parms for use with QCMDEXC.  'LENGTH' is the length of the
      *  command that will be issued with QCMDEXC.  QCMDEXC requires
      *  the field containing length to be defined as 15 with 5 decimal
      *  positions.  The field 'CMDSBM' will hold the values of the
      *  submit job command when passed as a parm on the call to
      *  QCMDEXC.
      *
     D length          s             15  5 inz(80)
     D cmdsbm          s             80
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      *  Local data area
      *---------------------------------------------------------------
      *
     d lda            uds                  dtaara(*lda)
     d  ldbpdt                 1     08  0
     d  ldepdt                 9     16  0
     d  ldper                 17     18  0
     d  ldeffl                19     19
     d  ldccyy                20     23  0
     d  ldbmdy                60     66  0
     d  ldemdy                70     76  0
      *
     d  ldoutu               401    410
     d  ldhold               411    411
     d  ldcopy               412    412  0
     d  ldoutq               413    422
      *
      *---------------------------------------------------------------
      * Definition for external data area 'DAAPER-Current Accounting Period'
      *---------------------------------------------------------------
     D
     D daaper          ds                  dtaara(daaper)
     D  daccyy                 1      4  0
     D  daper                  5      6  0
     D  dabpdt                 7     14  0
     D  daepdt                15     22  0
     D  dapgfl                23     23
     D  dappfl                24     24
      *
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * Mainline
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
     C                   movel     scrn1         routne
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to crt
      *
     C                   write     hp492k1
     C                   write     hp492ec
     C                   exfmt     hp492r1
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-EXIT
     C                   eval      routne = exit
      *
     C                   when      *in17 = *on                                  F17-print options
     C                   eval      routne = scrn1
     C                   call      'HP451'
     C                   parm                    sdpgm
     C     ldcopy        parm      ldcopy        xxcopy
     C                   parm                    ldhold
     C                   parm                    ldoutq
     C                   parm                    xxnite
     C                   parm                    xxjobq
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                       API
     C                   eval      routne = scrn1
     C                   other
      *
     C                   movel     edit1         routne
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Edit input fields for screen 1
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * Validate that the current period is not being closed.
      *
     C                   in        daaper
      *
     C                   if        dappfl <> *blank
     C                   add       1             error
     C                   if        error < maxmsg
     C                   movel     'HS09016'     mgid(e)
     C                   endif
     C                   endif
      *
      * If there are no errors, process the user's request
      *
     C                   if        error = 0 and *in08 = *on
     C                   exsr      $proc1
     C                   endif
      *
     C                   movel     scrn1         routne
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Process the user's request
      *---------------------------------------------------------------
      *
     C     $proc1        begsr
      *
      * If the user submitted the job
      *
     C                   if        *in08 = *on                                  If F8
      *
      * Set the 'current period data area' equal to the 'last' closed period.
      *
     C     *lock         in        daaper
     C                   z-add     d1ccyy        daccyy
     C                   z-add     d1per         daper
     C                   z-add     xxbpdt        dabpdt
     C                   z-add     xxepdt        daepdt
     C                   move      *blank        dapgfl
     C                   move      *blank        dappfl
     C                   out       daaper
      *
      * Set up LDA
     C                   z-add     daccyy        ldccyy
     C                   z-add     daper         ldper
     C                   z-add     dabpdt        ldbpdt
     C                   z-add     daepdt        ldepdt
     C                   z-add     d1bpmdy       ldbmdy
     C                   z-add     d1epmdy       ldemdy
     C                   out       lda
      *
      * Move the 80-character compile time array 'CMD' to an
      * 80-character field for passing as a parm with QCMDEXC.
      *
     C                   movea     xxjobq        cmd(51)
     C                   movea     cmd           cmdsbm
     C                   call      'QCMDEXC'
     C                   parm                    cmdsbm
     C                   parm                    length
      *
      * Issue the standard request submission message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09003'
     C                   endif
     C                   endif                                                  If F8
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *---------------------------------------------------------------
      * Set last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        lr
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
     C                   in        daaper
     C                   in        lda
      *
      * Calculate the year/period of the 'last closed period'.
      *
     C                   if        daper > 1
     C                   z-add     daccyy        d1ccyy
     C     daper         sub       1             d1per
     C                   else
      *
     C     daccyy        sub       1             d1ccyy
     C                   z-add     12            d1per
     C                   endif
      *
      * Retrieve the beginning/ending dates for this year period.
      *
     C                   call      'HP8014'
     C                   parm                    d1ccyy
     C                   parm                    d1per
     C                   parm      0             xxbpdt
     C                   parm      0             xxepdt
      *
      * Flip the retrieved beginning/ending dates to MMDDYY format for the screen.
      *
     C                   move      xxbpdt        wkisodate
     C     *mdy          move      wkisodate     d1bpmdy
      *
     C                   move      xxepdt        wkisodate
     C     *mdy          move      wkisodate     d1epmdy
      *
      *
     C                   z-add     0             ldbpdt
     C                   z-add     0             ldepdt
     C                   z-add     0             ldbmdy
     C                   z-add     0             ldemdy
     C                   z-add     0             ldccyy
     C                   z-add     0             ldper
      *
      *
      * Initialize LDA fields for printing
      *
     C                   move      *blank        ldhold
     C                   z-add     0             ldcopy
     C                   movel     ldoutu        ldoutq
     C                   movel     '*JOBD'       xxjobq
     C                   movel     no            xxnite
     C                   z-add     0             xxcopy
      *
      * Get the function's number of copies, etc.
      *
     C     sdpgm         chain     hsp002                             92
     C                   if        *in92 = *off
     C                   z-add     fncopy        ldcopy
     C                   movel     fnhold        ldhold
     C                   endif
      *
     C                   if        ldcopy = 0
     C                   z-add     1             ldcopy
     C                   endif
      *
     C                   if        ldhold = *blank
     C                   movel     no            ldhold
     C                   endif
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
      *****************************************************************
      * COMPILE TIME ARRAY NAMED 'CMD' USED IN QCMDEXC
      *****************************************************************
** QCMD TABLE
SBMJOB CMD(CALL PGM(HP492CL)) JOB(REOPENPER) JOBQ(__________)
