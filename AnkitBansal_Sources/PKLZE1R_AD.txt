// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKLZE1R
// ?Date: 14.08.2025 Time: 02:51:23
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?History changes
DO;

//?E15107 JJB  6/10/19 - Inactive Trucker records
//?- Validate the Trucker Code the user enters is Active.  Send error
//?  message if the record is inactive.
//?E10812 JJH 01/29/18 - Market Hog Order To Cash (OTC)
//?- At this date, Sioux City does not have a Gate for the Truckers
//?  to enter Plant. Therfore, there is no Buy Order Load Weight
//?  PKEJCPP file for 440 and 961.
//?- Therefore, the current logic which gets the Movment Number from
//?  from the Buy Order Load Weight file will not work for 440 and 961.
//?- Add new Company Value = NOGATE with values of Y or N
//?- If Company Value NOGATE = Y, then get the Movement Number from
//?  the Buy Order Load (PKAXCPP) file.
//?- Allow entry for Buy Order Load Ref1, Ref2, and Ref Status at
//?  all times.
//?- Add logic to display and update the Buy Order Load Refernce file
//?  for the Buy Order Load Ref 1, Ref 2 and Ref Status fields.
//?e2473 slm 02202013
//?e2473 slm Mtech check new field internal load type
//?also review all of hps interfaces
//?Make changes to Trucker validation per Alice HPE046
//?     Trucker is only required on Freight
//?     slm 100496
//?H16853 ISE 01/23/21 - Increased the length from 5 to 7 and corrected the
//?                      alignment of Buy Order Number field.
EXECUTE FUNCTION(HPE063 Frt Exp/Accruals) TYPE(EXCINTFUN)                       AB1192166;
{
 //?Execute internal function

 //?2/26/96  HPE063   Allow the expense for freight to be paid
 //?                  by either Seaboard(us) or the producer
 //?                  Allow the system to process accruals thru
 //?                  the General Ledger.
}


ENDDO;

// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


//?E2423 Mtech Live or Not Live *** Interfaces to HPS ***
//?Get the MTech Live Yes or No
DO;

//?Mtech Live Yes or no
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER('MTECHLIVE');
PARAMETER(WRK.System_Value_Alpha_USR);

// LCL.MTech Live Yes or No = WRK.System Value Alpha    USR
LCL.MTech_Live_Yes_or_No = WRK.System_Value_Alpha_USR;

ENDDO;

//?E10812 - Get Company Value NOGATE
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER('NOGATE');
PARAMETER(LCL.No_Gate_Flag);

EXECUTE FUNCTION(Rtv Prdcr Vendor#,Src RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1143363;
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(WRK.PD_VND_Address_Number);
PARAMETER(WRK.SR_Source_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 CASE;

 // IF DB1.PD VND Address Number is Zero
 IF DB1.PD_VND_Address_Number = *ZERO;

 EXECUTE FUNCTION(Rtv Producer EXT2     RT) TYPE(RTVOBJ) FILE(PLB4REP)           AB1322079;
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(WRK.M3_Supplier_ID);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.Text 7 USR = SUBSTRING(WRK.M3 Supplier ID,CON.4,CON.7)
 LCL.Text_7_USR = SUBSTRING(WRK.M3_Supplier_ID:4:7);

 // LCL.Amount USR = CVTVAR(LCL.Text 7 USR)
 LCL.Amount_USR = CVTVAR(LCL.Text_7_USR);

 // PAR.PD VND Address Number = LCL.Amount USR
 PAR.PD_VND_Address_Number = LCL.Amount_USR;

 ENDIF;

 QUIT;

}


EXECUTE FUNCTION(Rtv Source Type       RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1141829;
PARAMETER(WRK.SR_Source_Code);
PARAMETER(PAR.SR_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize detail screen (new record)

// WRK.Payments Processed  USR = CND.NO
WRK.Payments_Processed_USR = 'N';

EXECUTE FUNCTION(Rtv Producer TrkSz,Src RT) TYPE(RTVOBJ) FILE(PKACREP)          AB1121114;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(WRK.PD_Std_Truck_Size);
PARAMETER(DTL.BOL_Freight_Exp_Paid_By);
PARAMETER(WRK.SR_Source_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.Protect Movement Nbr  usr = CND.Yes
WRK.Protect_Movement_Nbr_usr = 'Y';

//?04/13/17 JBB C9426 - Condition Ref fields input capable
// LCL.Protect Ref fields = CND.No
LCL.Protect_Ref_fields = 'N';

//?USER: Initialize detail screen (existing record)

// DTL.Frt Exp Pay By Desc Usr = Condition name of DB1.BOL Freight Exp Paid By
DTL.Frt_Exp_Pay_By_Desc_Usr = RTVCND(DB1.BOL_Freight_Exp_Paid_By);

// DTL.BOL Freight UOM  Usr = Condition name of DB1.BOL Freight UOM
DTL.BOL_Freight_UOM_Usr = RTVCND(DB1.BOL_Freight_UOM);

EXECUTE FUNCTION(Rtv Trucker Name) TYPE(RTVOBJ) FILE(PKBAREP)                   AB1113396;
PARAMETER(DB1.TRK_Trucker_Code);
PARAMETER(DTL.TRK_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Name USR = PAR.Name USR
DTL.Name_USR = PAR.Name_USR;

EXECUTE FUNCTION(Chk tatto Paid for Bol RT) TYPE(RTVOBJ) FILE(PKA1CPP)          AB1183687;
PARAMETER(DB1.BOH_Company_Number);
PARAMETER(DB1.BOH_Buy_Order_Number);
PARAMETER(DB1.BOL_Load_Number);
PARAMETER(WRK.Tattoo_is_paid_Usr);
PARAMETER(WRK.Held_Over_Records_Y_N);
PARAMETER(WRK.Tot_Frt_Spdb_aft_pay_Usr);
{
 //?USER: Initialize routine

 // PAR.Tot Frt Spdb aft pay Usr = CON.*ZERO
 PAR.Tot_Frt_Spdb_aft_pay_Usr = *ZERO;

 // PAR.Held Over Records Y/N = CND.No
 PAR.Held_Over_Records_Y_N = 'N';

 // PAR.Tattoo is paid Usr = CND.No
 PAR.Tattoo_is_paid_Usr = 'N';

 //?USER: Process Data record

 //?If one tattoo is paid but freight was spread then accumulate
 //?what is paid, for held over respread problem
 //?when this probelm goes away, then just flag that there is one paid
 CASE;

 // IF DB1.TH Payment Sts is Paid Anything
 IF DB1.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

 //?CHECK IF FREIGHT AMOUNT IS IN RECORD
 CASE;

 // IF DB1.TH Freight Amount is Not Zeros
 IF DB1.TH_Freight_Amount <> *ZERO;

 // PAR.Tattoo is paid Usr = CND.Yes
 PAR.Tattoo_is_paid_Usr = 'Y';

 ENDIF;

 // PAR.Tot Frt Spdb aft pay Usr = PAR.Tot Frt Spdb aft pay Usr + DB1.TH Freight Amo
 PAR.Tot_Frt_Spdb_aft_pay_Usr = PAR.Tot_Frt_Spdb_aft_pay_Usr + DB1.TH_Freight_Amount;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?CHECK FOR HELD OVER RECORD
 CASE;

 // IF DB1.TH Held Over Record is Yes
 IF DB1.TH_Held_Over_Record = 'Y';

 // OR DB1.TH Held Over is greater than 0
 OR DB1.TH_Held_Over > *ZERO;

 // PAR.Held Over Records Y/N = CND.Yes
 PAR.Held_Over_Records_Y_N = 'Y';

 ENDIF;

 ENDIF;

}


//?No fields may be changed if frt has been allocated or paid.
CASE;

// IF DTL.BOL Freight Allocation is Freight is Allocated
IF DTL.BOL_Freight_Allocation = 'Y';

// AND WRK.Tattoo is paid Usr is Yes
AND WRK.Tattoo_is_paid_Usr = 'Y';

// WRK.Payments Processed  USR = CND.Yes
WRK.Payments_Processed_USR = 'Y';

//?No fields may be changed if frt has been allocated or paid.
// IF DTL.BOL Trucker Payment Sts is Paid Trucker
IF DTL.BOL_Trucker_Payment_Sts = 'PT';

// WRK.Payments Processed  USR = CND.Yes
WRK.Payments_Processed_USR = 'Y';

//?No fields may be changed if frt has been allocated or paid.
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Payments Processed  USR = CND.NO
WRK.Payments_Processed_USR = 'N';

ENDIF;

//?E10812 - If No Gate, Get Movement Number from Buy Order Load
CASE;

// IF LCL.No Gate Flag is Yes
IF LCL.No_Gate_Flag = 'Y';

EXECUTE FUNCTION(Rtv BOL Movment NumberRT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1343294;
PARAMETER(DB1.BOH_Company_Number);
PARAMETER(DB1.BOH_Buy_Order_Number);
PARAMETER(DB1.BOL_Load_Number);
PARAMETER(DTL.BOLW_Movement_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.Payments Processed  USR is Yes
IF WRK.Payments_Processed_USR = 'Y';

// WRK.Protect Movement Nbr  usr = CND.Yes
WRK.Protect_Movement_Nbr_usr = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Protect Movement Nbr  usr = CND.No
WRK.Protect_Movement_Nbr_usr = 'N';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Movement Number   RT) TYPE(RTVOBJ) FILE(PKEJCPP)           AB1213938;
PARAMETER(DB1.BOH_Company_Number);
PARAMETER(DTL.BOLW_Movement_Number);
PARAMETER(DB1.BOH_Buy_Order_Number);
PARAMETER(DB1.BOL_Load_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Protect Movement Number because of bolw sts
CASE;

// IF DB1.BOL Truck Scale Weigh Sts is In
IF DB1.BOL_Truck_Scale_Weigh_Sts = 'I';

// OR DB1.BOL Truck Scale Weigh Sts is Out
OR DB1.BOL_Truck_Scale_Weigh_Sts = 'O';

// OR DB1.BOL Truck Scale Weigh Sts is No Spread
OR DB1.BOL_Truck_Scale_Weigh_Sts = 'N';

// WRK.@Status (Yes/No) = CND.No
WRK.@Status_Yes_No = 'N';

//?Protect Movement Number because of bolw sts
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.@Status (Yes/No) = CND.Yes
WRK.@Status_Yes_No = 'Y';

ENDIF;

//?Protect Movement Number because of payment or bolw sts or it's 0
CASE;

// IF WRK.Payments Processed  USR is Yes
IF WRK.Payments_Processed_USR = 'Y';

// OR WRK.@Status (Yes/No) is Yes
OR WRK.@Status_Yes_No = 'Y';

// OR DTL.BOLW Movement Number EQ WRK.Zero USR
OR DTL.BOLW_Movement_Number = WRK.Zero_USR;

// WRK.Protect Movement Nbr  usr = CND.Yes
WRK.Protect_Movement_Nbr_usr = 'Y';

//?Protect Movement Number because of payment or bolw sts or it's 0
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Protect Movement Nbr  usr = CND.No
WRK.Protect_Movement_Nbr_usr = 'N';

ENDIF;

ENDIF;

//?E10812 - Move Protected field Logic for Movement Number in Case
//?         Statement above.
//?see if this should be wrk.movement number old
// WRK.Movement number old  USR = DTL.BOLW Movement Number
WRK.Movement_number_old_USR = DTL.BOLW_Movement_Number;

//?E10812 - Save intial values of Ref 1, Ref 2. Ref Status
// LCL.BOL Ref 1 Old = DTL.BOL Ref 1
LCL.BOL_Ref_1_Old = DTL.BOL_Ref_1;

// LCL.BOL Ref 2 Old = DTL.BOL Ref 2
LCL.BOL_Ref_2_Old = DTL.BOL_Ref_2;

// LCL.BOL Ref Status Old = DTL.BOL Ref Status
LCL.BOL_Ref_Status_Old = DTL.BOL_Ref_Status;

//?E10812 - Retreive and display Ref1, Ref2, Ref Status from Buy Order
//?         Load Reference
EXECUTE FUNCTION(Rtv Buy Order Load Ref RT) TYPE(RTVOBJ) FILE(PWACCPP)          AB1333104;
PARAMETER(DB1.BOH_Company_Number);
PARAMETER(DB1.BOH_Buy_Order_Number);
PARAMETER(DB1.BOL_Load_Number);
PARAMETER(DTL.BOL_Ref_1);
PARAMETER(DTL.BOL_Ref_2);
PARAMETER(DTL.BOL_Ref_Status);
PARAMETER(NLL.RS_Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Validate detail screen fields

//?Validate truck in relationship to freight
CASE;

// IF DTL.TRK Trucker Code EQ WRK.Blank USR
IF DTL.TRK_Trucker_Code = WRK.Blank_USR;

CASE;

// IF DTL.BOL Freight Unit Amt NE WRK.Zero USR
IF DTL.BOL_Freight_Unit_Amt <> WRK.Zero_USR;

// Send error message - 'Trucker Is Required'
ERROR(PRK0665);
MSGPARM(DTL.TRK_Trucker_Code);

ENDIF;

//?Validate truck in relationship to freight
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Trucker Record    RT) TYPE(RTVOBJ) FILE(PKBAREP)           AB1352086;
PARAMETER(DTL.TRK_Trucker_Code);
PARAMETER(NLL.TRK_Name);
PARAMETER(NLL.TRK_Sts);
PARAMETER(NLL.TRK_VND_Address_Number);
PARAMETER(NLL.TRK_M3_Supplier_Id);
PARAMETER(LCL.RS_Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If Trucker status is not Active, send error message
CASE;

// IF NOT LCL.RS Record Status is Active
IF ! LCL.RS_Record_Status = 'A';

// Send error message - 'Trucker status is inactive.'
ERROR(PRK1543);
MSGPARM(DTL.TRK_Trucker_Code);

ENDIF;

ENDIF;

CASE;

// IF WRK.Payments Processed  USR is Yes
IF WRK.Payments_Processed_USR = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

ENDIF;

//?Validate frt unit amt and freight uom
CASE;

// IF DTL.BOL Freight UOM NE WRK.Blank USR
IF DTL.BOL_Freight_UOM <> WRK.Blank_USR;

// OR DTL.BOL Freight Unit Amt NE WRK.Zero USR
OR DTL.BOL_Freight_Unit_Amt <> WRK.Zero_USR;

CASE;

// IF DTL.BOL Freight Unit Amt EQ WRK.Zero USR
IF DTL.BOL_Freight_Unit_Amt = WRK.Zero_USR;

// Send error message - 'Frt unit amt is required if Freight UOM is entered.'
ERROR(PRK0500);

// IF *OTHERWISE
IF *OTHERWISE;

//?Validate Trucker
CASE;

// IF DTL.TRK Trucker Code EQ WRK.Blank USR
IF DTL.TRK_Trucker_Code = WRK.Blank_USR;

// Send error message - 'Trucker Is Required'
ERROR(PRK0665);
MSGPARM(DTL.TRK_Trucker_Code);

ENDIF;

ENDIF;

CASE;

// IF DTL.BOL Freight UOM EQ WRK.Blank USR
IF DTL.BOL_Freight_UOM = WRK.Blank_USR;

// Send error message - 'Freight UOM is required if Frt Unit Amt is entered.'
ERROR(PRK0501);

// IF *OTHERWISE
IF *OTHERWISE;

//?Validate Trucker
CASE;

// IF DTL.TRK Trucker Code EQ WRK.Blank USR
IF DTL.TRK_Trucker_Code = WRK.Blank_USR;

// Send error message - 'Trucker Is Required'
ERROR(PRK0665);
MSGPARM(DTL.TRK_Trucker_Code);

ENDIF;

ENDIF;

ENDIF;

//?E10812 - Validation of Movment Number with NOGATE logic
CASE;

// IF LCL.No Gate Flag is Yes
IF LCL.No_Gate_Flag = 'Y';

//?No validation is required, because validation will be performed
//?on the Work With Delivery Receiving
// IF *OTHERWISE
IF *OTHERWISE;

//?VAL - MOVEMENT - MTECH not live with HPS and Live witho HPS
CASE;

// IF DTL.BOLW Movement Number NE WRK.Zero USR
IF DTL.BOLW_Movement_Number <> WRK.Zero_USR;

CASE;

// IF DTL.BOLW Movement Number NE WRK.Movement number old  USR
IF DTL.BOLW_Movement_Number <> WRK.Movement_number_old_USR;

//?Not Live with Mtech Validate, and Live Nothing
CASE;

// IF LCL.MTech Live Yes or No is No MTech not Live
IF LCL.MTech_Live_Yes_or_No = 'N';

// AND WRK.SR Type is Internal
AND WRK.SR_Type = 'I';

// Call program Z1l HPS Movement Rfrn UP.
CALL PROGRAM(Z1l HPS Movement Rfrn UP) ('HP251');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(DTL.BOLW_Movement_Number);
PARAMETER(WRK.Scheduled_Kill_Dt_8_0_USR);
PARAMETER(LCL.Scheduled_Head_USR);

//?Movement not found in the HPS System.
CASE;

// IF WRK.Return Code USR is HPS Movement Rfrnc Err 1
IF WRK.Return_Code_USR = 'HPSM1';

// Send error message - 'Movement # &1 is not valid.'
ERROR(PRK0868);
MSGPARM(DTL.BOLW_Movement_Number);

ENDIF;

EXECUTE FUNCTION(Val Movement Number   RT) TYPE(RTVOBJ) FILE(PKEJCPP)           AB1213906;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.BOLW_Movement_Number);
PARAMETER('I');
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF WRK.Record Found USR is Record Found
IF WRK.Record_Found_USR = 'Y';

// Send error message - 'Buy Order Load Weight already exists.'
ERROR(PRK0842);

ENDIF;

//?Not Live with Mtech Validate, and Live Nothing
// IF LCL.MTech Live Yes or No is Yes MTech is Live
IF LCL.MTech_Live_Yes_or_No = 'Y';

// AND WRK.SR Type is Internal
AND WRK.SR_Type = 'I';

//?E2423 Mtech Live will not use this HPS program
//?There will be no validation on movement due to the movement
//?is in the MTech application
ENDIF;

ENDIF;

//?VAL - MOVEMENT - MTECH not live with HPS and Live witho HPS
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF WRK.Movement number old  USR NE WRK.Zero USR
IF WRK.Movement_number_old_USR <> WRK.Zero_USR;

// DTL.BOLW Movement Number = WRK.Movement number old  USR
DTL.BOLW_Movement_Number = WRK.Movement_number_old_USR;

// Send error message - 'Cannot remove movement # here.'
ERROR(PRK0869);

ENDIF;

ENDIF;

ENDIF;

//?e2423 Movement Number is now on the Buy Order Load.
// DTL.BOL HPS Movement Number = DTL.BOLW Movement Number
DTL.BOL_HPS_Movement_Number = DTL.BOLW_Movement_Number;

//?CALC: Detail screen function fields

// DTL.BOL Freight UOM  Usr = Condition name of DTL.BOL Freight UOM
DTL.BOL_Freight_UOM_Usr = RTVCND(DTL.BOL_Freight_UOM);

EXECUTE FUNCTION(Chk tatto Paid for Bol RT) TYPE(RTVOBJ) FILE(PKA1CPP)          AB1183687;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(WRK.Tattoo_is_paid_Usr);
PARAMETER(WRK.Held_Over_Records_Y_N);
PARAMETER(WRK.Tot_Frt_Spdb_aft_pay_Usr);
{
 //?USER: Initialize routine

 // PAR.Tot Frt Spdb aft pay Usr = CON.*ZERO
 PAR.Tot_Frt_Spdb_aft_pay_Usr = *ZERO;

 // PAR.Held Over Records Y/N = CND.No
 PAR.Held_Over_Records_Y_N = 'N';

 // PAR.Tattoo is paid Usr = CND.No
 PAR.Tattoo_is_paid_Usr = 'N';

 //?USER: Process Data record

 //?If one tattoo is paid but freight was spread then accumulate
 //?what is paid, for held over respread problem
 //?when this probelm goes away, then just flag that there is one paid
 CASE;

 // IF DB1.TH Payment Sts is Paid Anything
 IF DB1.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

 //?CHECK IF FREIGHT AMOUNT IS IN RECORD
 CASE;

 // IF DB1.TH Freight Amount is Not Zeros
 IF DB1.TH_Freight_Amount <> *ZERO;

 // PAR.Tattoo is paid Usr = CND.Yes
 PAR.Tattoo_is_paid_Usr = 'Y';

 ENDIF;

 // PAR.Tot Frt Spdb aft pay Usr = PAR.Tot Frt Spdb aft pay Usr + DB1.TH Freight Amo
 PAR.Tot_Frt_Spdb_aft_pay_Usr = PAR.Tot_Frt_Spdb_aft_pay_Usr + DB1.TH_Freight_Amount;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?CHECK FOR HELD OVER RECORD
 CASE;

 // IF DB1.TH Held Over Record is Yes
 IF DB1.TH_Held_Over_Record = 'Y';

 // OR DB1.TH Held Over is greater than 0
 OR DB1.TH_Held_Over > *ZERO;

 // PAR.Held Over Records Y/N = CND.Yes
 PAR.Held_Over_Records_Y_N = 'Y';

 ENDIF;

 ENDIF;

}


CASE;

// IF DTL.BOL Trucker Payment Sts is Paid Trucker
IF DTL.BOL_Trucker_Payment_Sts = 'PT';

// IF DTL.BOL Freight Allocation is Freight is Allocated
IF DTL.BOL_Freight_Allocation = 'Y';

// AND WRK.Tattoo is paid Usr is Yes
AND WRK.Tattoo_is_paid_Usr = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Clc Freight Amt       XF.
CALL PROGRAM(Clc Freight Amt       XF) ('PKQ5XFR');
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.BOL_Freight_UOM);
PARAMETER(DTL.BOL_Freight_Unit_Amt);
PARAMETER(DTL.BOL_Freight_Amt);
PARAMETER(DTL.BOL_Freight_Allocation);
PARAMETER(DTL.BOL_Head_Received);
PARAMETER(DTL.BOL_Live_Wgt_Received);

ENDIF;

CASE;

// IF DTL.BOL Freight Amt is Not Zeros
IF DTL.BOL_Freight_Amt <> *ZERO;

// AND DTL.BOL Trucker Payment Sts is Blank
AND DTL.BOL_Trucker_Payment_Sts = *BLANK;

// WRK.BOL Trucker Payment Sts = CND.Select Trucker
WRK.BOL_Trucker_Payment_Sts = 'ST';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.BOL Trucker Payment Sts = DTL.BOL Trucker Payment Sts
WRK.BOL_Trucker_Payment_Sts = DTL.BOL_Trucker_Payment_Sts;

//?Reset status to blanks if freight was zeroed out.
CASE;

// IF DTL.BOL Freight Amt is Zeros
IF DTL.BOL_Freight_Amt = *ZERO;

// WRK.BOL Trucker Payment Sts = CND.Blank
WRK.BOL_Trucker_Payment_Sts = *BLANK;

ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv Trucker Record    RT) TYPE(RTVOBJ) FILE(PKBAREP)           AB1352086;
PARAMETER(DTL.TRK_Trucker_Code);
PARAMETER(DTL.TRK_Name);
PARAMETER(NLL.TRK_Sts);
PARAMETER(NLL.TRK_VND_Address_Number);
PARAMETER(NLL.TRK_M3_Supplier_Id);
PARAMETER(LCL.RS_Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Producer Name         DRV) TYPE(DRVFLD)                        AB1100361;
PARAMETER(DTL.Producer_Name_DRV);
PARAMETER(DTL.PD_Producer_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.Producer_Name_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Pdctn Loc Name DRV) TYPE(DRVFLD)                               AB1100402;
PARAMETER(DTL.Pdctn_Loc_Name_DRV);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PL_Location_Code);
 PARAMETER(PAR.Pdctn_Loc_Name_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Create DBF record

EXECUTE FUNCTION(Crt Buy Order/BOL Ref IF) TYPE(EXCINTFUN) FILE(PKAXCPP)        AB1343325;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.BOL_Kill_Date);
PARAMETER(DTL.BOL_Pln_Delv_Start_Time);
PARAMETER(DTL.BOL_Pln_Delv_End_Time);
PARAMETER(DTL.BOL_Pln_Head_Delv);
PARAMETER(DTL.BOL_Shipped_Wgt);
PARAMETER(DTL.BOL_Pln_Delv_Date);
PARAMETER(DTL.BOL_Freight_UOM);
PARAMETER(DTL.BOL_Freight_Unit_Amt);
PARAMETER(DTL.BOL_Freight_Amt);
PARAMETER(DTL.BOL_Freight_Allocation);
PARAMETER(DTL.BOL_Head_Received);
PARAMETER(DTL.BOL_Live_Wgt_Received);
PARAMETER(DTL.BOL_Trucker_Payment_Sts);
PARAMETER(DTL.BOL_Trucker_Check_Number);
PARAMETER(DTL.BOL_Trucker_Check_Date);
PARAMETER(DTL.BOL_AP_Voucher);
PARAMETER(DTL.BOL_Trailer);
PARAMETER(DTL.BOL_Freight_Exp_Paid_By);
PARAMETER(DTL.BOL_Scheduled_Kill_Shift);
PARAMETER(DTL.BOL_Truck_Scale_Weigh_Sts);
PARAMETER(DTL.BOL_Shipped_Head);
PARAMETER(DTL.Reported_to_USDA);
PARAMETER(DTL.BOL_MPR_Prior_Day_Prch);
PARAMETER(DTL.BOL_Violated_Auth_Tme_Sts);
PARAMETER(DTL.BOL_Status_5);
PARAMETER(DTL.BOL_Status_6);
PARAMETER(DTL.BOL_Status_7);
PARAMETER(DTL.BOL_HPS_Movement_Number);
PARAMETER(DTL.BOL_Head_LFT);
PARAMETER(DTL.BOL_Head_EUT_KOA);
PARAMETER(DTL.BOL_Auth_Gate_Entry_Time);
PARAMETER(DTL.BOL_Head_Received_Market);
PARAMETER(DTL.BOL_Unused_Wgt_1);
PARAMETER(DTL.BOL_Unused_Wgt_2);
PARAMETER(DTL.BOL_Unused_Wgt_3);
PARAMETER(DTL.BOL_Unused_Wgt_4);
PARAMETER(DTL.BOL_Unused_Wgt_5);
PARAMETER(DTL.BOL_Auth_Gate_Entry_Date);
PARAMETER(DTL.BOL_Unused_Date_2);
PARAMETER(DTL.BOL_Unused_Date_3);
PARAMETER(DTL.BOL_Unused_Date_4);
PARAMETER(DTL.BOL_Unused_Date_5);
PARAMETER(DTL.TRK_Trucker_Code);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
PARAMETER(DTL.BOL_Ref_1);
PARAMETER(DTL.BOL_Ref_2);
PARAMETER(DTL.BOL_Ref_Status);
{
 //?Execute internal function

 EXECUTE FUNCTION(Crt Buy Order Detail  CR) TYPE(CRTOBJ) FILE(PKAXCPP)           AB1100530;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.BOL_Kill_Date);
 PARAMETER(PAR.BOL_Pln_Delv_Start_Time);
 PARAMETER(PAR.BOL_Pln_Delv_End_Time);
 PARAMETER(PAR.BOL_Pln_Head_Delv);
 PARAMETER(PAR.BOL_Shipped_Wgt);
 PARAMETER(PAR.BOL_Pln_Delv_Date);
 PARAMETER(PAR.BOL_Freight_UOM);
 PARAMETER(PAR.BOL_Freight_Unit_Amt);
 PARAMETER(PAR.BOL_Freight_Amt);
 PARAMETER(PAR.BOL_Freight_Allocation);
 PARAMETER(PAR.BOL_Head_Received);
 PARAMETER(PAR.BOL_Live_Wgt_Received);
 PARAMETER(PAR.BOL_Trucker_Payment_Sts);
 PARAMETER(PAR.BOL_Trucker_Check_Number);
 PARAMETER(PAR.BOL_Trucker_Check_Date);
 PARAMETER(PAR.BOL_AP_Voucher);
 PARAMETER(PAR.BOL_Trailer);
 PARAMETER(PAR.BOL_Freight_Exp_Paid_By);
 PARAMETER(PAR.BOL_Scheduled_Kill_Shift);
 PARAMETER(PAR.BOL_Truck_Scale_Weigh_Sts);
 PARAMETER(PAR.BOL_Shipped_Head);
 PARAMETER(PAR.Reported_to_USDA);
 PARAMETER(PAR.BOL_MPR_Prior_Day_Prch);
 PARAMETER(PAR.BOL_Violated_Auth_Tme_Sts);
 PARAMETER(PAR.BOL_Status_5);
 PARAMETER(PAR.BOL_Status_6);
 PARAMETER(PAR.BOL_Status_7);
 PARAMETER(PAR.BOL_HPS_Movement_Number);
 PARAMETER(PAR.BOL_Head_LFT);
 PARAMETER(PAR.BOL_Head_EUT_KOA);
 PARAMETER(PAR.BOL_Auth_Gate_Entry_Time);
 PARAMETER(PAR.BOL_Head_Received_Market);
 PARAMETER(PAR.BOL_Unused_Wgt_1);
 PARAMETER(PAR.BOL_Unused_Wgt_2);
 PARAMETER(PAR.BOL_Unused_Wgt_3);
 PARAMETER(PAR.BOL_Unused_Wgt_4);
 PARAMETER(PAR.BOL_Unused_Wgt_5);
 PARAMETER(PAR.BOL_Auth_Gate_Entry_Date);
 PARAMETER(PAR.BOL_Unused_Date_2);
 PARAMETER(PAR.BOL_Unused_Date_3);
 PARAMETER(PAR.BOL_Unused_Date_4);
 PARAMETER(PAR.BOL_Unused_Date_5);
 PARAMETER(PAR.TRK_Trucker_Code);
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PL_Location_Code);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 EXECUTE FUNCTION(Crt/Upd BO Load Ref   IF) TYPE(EXCINTFUN)                      AB1331981;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.BOL_Ref_1);
 PARAMETER(PAR.BOL_Ref_2);
 PARAMETER(PAR.BOL_Ref_Status);
 {
  //?Execute internal function

  //?C9426 032217 slm
  //?C9426 use the BOL Referene to store the Ref1,Ref2 and Ref Status
  EXECUTE FUNCTION(Crt/Chg BO Load Ref   RT) TYPE(RTVOBJ) FILE(PWACCPP)           AB1331982;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.BOL_Ref_1);
  PARAMETER(PAR.BOL_Ref_2);
  PARAMETER(PAR.BOL_Ref_Status);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Crt Buy Order Load Ref CR) TYPE(CRTOBJ) FILE(PWACCPP)          AB1331978;
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.BOH_Buy_Order_Number);
   PARAMETER(PAR.BOL_Load_Number);
   PARAMETER(PAR.BOL_Ref_1);
   PARAMETER(PAR.BOL_Ref_2);
   PARAMETER(PAR.BOL_Ref_Status);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Add Stamp-Sys Dt  IF) TYPE(EXCINTFUN)                      AB1237005;
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?Execute internal function

     // PAR.RS Record Status = CND.Active
     PAR.RS_Record_Status = 'A';

     // PAR.RS User Added = JOB.*USER
     PAR.RS_User_Added = JOB.*USER;

     // Call program Rtv System Date & Tim UP.
     CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
     PARAMETER(PAR.RS_Date_Added);
     PARAMETER(PAR.RS_Time_Added);

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

    }

   }

   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Buy Order Load Ref CH) TYPE(CHGOBJ) FILE(PWACCPP)          AB1331979;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(PAR.BOL_Ref_1);
   PARAMETER(PAR.BOL_Ref_2);
   PARAMETER(PAR.BOL_Ref_Status);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // Call program Rtv System Date & Tim UP.
     CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
     PARAMETER(PAR.RS_Date_Changed);
     PARAMETER(PAR.RS_Time_Changed);

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Buy Ord Dtl/WFrt  CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1148690;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.BOL_Kill_Date);
PARAMETER(DTL.BOL_Pln_Delv_Start_Time);
PARAMETER(DTL.BOL_Pln_Delv_End_Time);
PARAMETER(DTL.BOL_Pln_Head_Delv);
PARAMETER(DTL.BOL_Shipped_Wgt);
PARAMETER(DTL.BOL_Pln_Delv_Date);
PARAMETER(DTL.BOL_Freight_UOM);
PARAMETER(DTL.BOL_Freight_Unit_Amt);
PARAMETER(DTL.BOL_Freight_Amt);
PARAMETER(DTL.BOL_Freight_Allocation);
PARAMETER(DTL.BOL_Head_Received);
PARAMETER(DTL.BOL_Live_Wgt_Received);
PARAMETER(WRK.BOL_Trucker_Payment_Sts);
PARAMETER(DTL.BOL_Trucker_Check_Number);
PARAMETER(DTL.BOL_Trucker_Check_Date);
PARAMETER(DTL.BOL_AP_Voucher);
PARAMETER(DTL.BOL_Trailer);
PARAMETER(DTL.BOL_Freight_Exp_Paid_By);
PARAMETER(DTL.BOL_Scheduled_Kill_Shift);
PARAMETER(DTL.BOL_Truck_Scale_Weigh_Sts);
PARAMETER(DTL.BOL_Violated_Auth_Tme_Sts);
PARAMETER(DTL.BOLW_Movement_Number);
PARAMETER(DTL.TRK_Trucker_Code);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
PARAMETER(DTL.BOLW_Movement_Number);
PARAMETER(WRK.Movement_number_old_USR);
PARAMETER(LCL.No_Gate_Flag);
PARAMETER(DTL.BOL_Ref_1);
PARAMETER(DTL.BOL_Ref_2);
PARAMETER(DTL.BOL_Ref_Status);
PARAMETER(LCL.BOL_Ref_1_Old);
PARAMETER(LCL.BOL_Ref_2_Old);
PARAMETER(LCL.BOL_Ref_Status_Old);
{
 //?USER: Processing before Data read

 //?E2423 Mtech Live or Not Live *** Interfaces to HPS ***
 //?E2423 Mtech Live extra review with Purva and Susan
 //?Get the MTech Live Yes or No
 DO;

 //?Mtech Live Yes or no
 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER('MTECHLIVE');
 PARAMETER(WRK.System_Value_Alpha_USR);

 // LCL.MTech Live Yes or No = WRK.System Value Alpha    USR
 LCL.MTech_Live_Yes_or_No = WRK.System_Value_Alpha_USR;

 ENDDO;

 //?USER: Processing after Data read

 CASE;

 // IF PAR.BOL Freight UOM NE DB1.BOL Freight UOM
 IF PAR.BOL_Freight_UOM <> DB1.BOL_Freight_UOM;

 // OR PAR.BOL Freight Unit Amt EQ DB1.BOL Freight Unit Amt
 OR PAR.BOL_Freight_Unit_Amt = DB1.BOL_Freight_Unit_Amt;

 // OR PAR.BOL Freight Amt EQ PAR.BOL Freight Amt
 OR PAR.BOL_Freight_Amt = PAR.BOL_Freight_Amt;

 // Call program Chg Cal Net Pay       XF.
 CALL PROGRAM(Chg Cal Net Pay       XF) ('PKTEXFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);

 ENDIF;

 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

 //?E10812 JJH 01/29/18 - New Logic with No Gate Flag
 //?If Movement Number Changed
 CASE;

 // IF PAR.Movement number new usr NE PAR.Movement number old  USR
 IF PAR.Movement_number_new_usr <> PAR.Movement_number_old_USR;

 CASE;

 // IF PAR.No Gate Flag is Yes
 IF PAR.No_Gate_Flag = 'Y';

 // DB1.BOL Truck Scale Weigh Sts = CND.None
 DB1.BOL_Truck_Scale_Weigh_Sts = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.MTech Live Yes or No is No MTech not Live
 IF LCL.MTech_Live_Yes_or_No = 'N';

 // Call program Z1v HPS Farm Info     UP.
 CALL PROGRAM(Z1v HPS Farm Info     UP) ('HP249');
 PARAMETER(PGM.*Return_code);
 PARAMETER(PAR.Movement_number_new_usr);
 PARAMETER(WRK.Farm_site_Name_f_HPS_USR);
 PARAMETER(WRK.Farm_Site_USR);
 PARAMETER(WRK.HPS_FS_Comp_Relation_USR);
 PARAMETER(WRK.State);

 // IF LCL.MTech Live Yes or No is Yes MTech is Live
 IF LCL.MTech_Live_Yes_or_No = 'Y';

 //?e2423 get the farm site from the delivery tracking
 //?get the farm site and pull back farm site information
 EXECUTE FUNCTION(Rtv Farm Site Only    RT) TYPE(RTVOBJ) FILE(PLAFCPP)           AB1313312;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.BOL_Kill_Date);
 PARAMETER(WRK.Farm_Site_USR);
 // Call program Rtv HPS Farm Inf-Mtech UP.
 CALL PROGRAM(Rtv HPS Farm Inf-Mtech UP) ('HP293');
 PARAMETER(PGM.*Return_code);
 PARAMETER(WRK.Farm_site_Name_f_HPS_USR);
 PARAMETER(WRK.Farm_Site_USR);
 PARAMETER(WRK.HPS_FS_Comp_Relation_USR);
 PARAMETER(WRK.State);
 PARAMETER(NLL.HPS_Farm_County);
 PARAMETER(NLL.HPS_Cell_Manager_Code_USR);
 PARAMETER(NLL.HPS_Cell_Manager_Nm_USR);
 PARAMETER(NLL.MTech_Farm_Site_Ref);
 PARAMETER(NLL.MTech_Cell_Manager_Ref);

 ENDIF;

 ENDIF;

 CASE;

 // IF WRK.HPS FS Comp Relation USR is Contract
 IF WRK.HPS_FS_Comp_Relation_USR = 'CON';

 // DB1.BOL Truck Scale Weigh Sts = CND.No Spread
 DB1.BOL_Truck_Scale_Weigh_Sts = 'N';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Make BOL Sts = In/Out depending on BOLW records found
 CASE;

 // IF DB1.BOL Truck Scale Weigh Sts is No Spread
 IF DB1.BOL_Truck_Scale_Weigh_Sts = 'N';

 EXECUTE FUNCTION(Rtv f/ Edit BOL       RT) TYPE(RTVOBJ) FILE(PKEJCPP)           AB1215503;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(PAR.Movement_number_old_USR);
 PARAMETER(WRK.BOL_IN_record_found_USR);
 PARAMETER(WRK.BOL_OUT_record_found_USR);
 {
  //?USER: Initialize routine

  // PAR.BOL IN  record found  USR = CND.No
  PAR.BOL_IN_record_found_USR = 'N';

  // PAR.BOL OUT record found  USR = CND.No
  PAR.BOL_OUT_record_found_USR = 'N';

  //?USER: Process Data record

  CASE;

  // IF DB1.BOLW Weight Type is In(En)
  IF DB1.BOLW_Weight_Type = 'I';

  // PAR.BOL IN  record found  USR = CND.Yes
  PAR.BOL_IN_record_found_USR = 'Y';

  // IF DB1.BOLW Weight Type is Out(Fuera)
  IF DB1.BOLW_Weight_Type = 'O';

  // PAR.BOL OUT record found  USR = CND.Yes
  PAR.BOL_OUT_record_found_USR = 'Y';

  ENDIF;

 }

 CASE;

 // IF WRK.BOL OUT record found  USR is Yes
 IF WRK.BOL_OUT_record_found_USR = 'Y';

 // DB1.BOL Truck Scale Weigh Sts = CND.Out
 DB1.BOL_Truck_Scale_Weigh_Sts = 'O';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF WRK.BOL IN  record found  USR is Yes
 IF WRK.BOL_IN_record_found_USR = 'Y';

 // DB1.BOL Truck Scale Weigh Sts = CND.In
 DB1.BOL_Truck_Scale_Weigh_Sts = 'I';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Rtv to Change Mvmnt   RT) TYPE(RTVOBJ) FILE(PKEJCPP)           AB1215354;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(PAR.Movement_number_old_USR);
 PARAMETER(PAR.Movement_number_new_usr);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Dlt Buy Order Load Wt DO) TYPE(DLTOBJ) FILE(PKEJCPP)           AB1213884;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(DB1.PL_Location_Code);
  PARAMETER(DB1.BOLW_Movement_Number);
  PARAMETER(DB1.BOLW_Weight_Type);
  EXECUTE FUNCTION(Crt Buy Order Load Wt CR) TYPE(CRTOBJ) FILE(PKEJCPP)           AB1213882;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(DB1.PL_Location_Code);
  PARAMETER(PAR.Movement_number_new_usr);
  PARAMETER(DB1.BOLW_Weight_Type);
  PARAMETER(DB1.BOLW_Scale_Weight);
  PARAMETER(DB1.BOLW_Scale_Weight_Date);
  PARAMETER(DB1.BOLW_Scale_Weight_Time);
  PARAMETER(DB1.BOLW_Spread_Status);
  PARAMETER(DB1.BOLW_Unused_Sts_1);
  PARAMETER(DB1.BOLW_Unused_Sts_2);
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

 }

 ENDIF;

 //?E10812 JJH 01/29/18 - Update Buy Order Load Reference
 //?If Ref 1, or Ref2, or Ref Status changed
 CASE;

 // IF PAR.BOL Ref 1 NE PAR.BOL Ref 1 Old
 IF PAR.BOL_Ref_1 <> PAR.BOL_Ref_1_Old;

 // OR PAR.BOL Ref 2 NE PAR.BOL Ref 2 Old
 OR PAR.BOL_Ref_2 <> PAR.BOL_Ref_2_Old;

 // OR PAR.BOL Ref Status NE PAR.BOL Ref Status Old
 OR PAR.BOL_Ref_Status <> PAR.BOL_Ref_Status_Old;

 EXECUTE FUNCTION(Crt/Upd BO Load Ref   IF) TYPE(EXCINTFUN)                      AB1331981;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(PAR.BOL_Ref_1);
 PARAMETER(PAR.BOL_Ref_2);
 PARAMETER(PAR.BOL_Ref_Status);
 {
  //?Execute internal function

  //?C9426 032217 slm
  //?C9426 use the BOL Referene to store the Ref1,Ref2 and Ref Status
  EXECUTE FUNCTION(Crt/Chg BO Load Ref   RT) TYPE(RTVOBJ) FILE(PWACCPP)           AB1331982;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.BOL_Ref_1);
  PARAMETER(PAR.BOL_Ref_2);
  PARAMETER(PAR.BOL_Ref_Status);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Crt Buy Order Load Ref CR) TYPE(CRTOBJ) FILE(PWACCPP)          AB1331978;
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.BOH_Buy_Order_Number);
   PARAMETER(PAR.BOL_Load_Number);
   PARAMETER(PAR.BOL_Ref_1);
   PARAMETER(PAR.BOL_Ref_2);
   PARAMETER(PAR.BOL_Ref_Status);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Add Stamp-Sys Dt  IF) TYPE(EXCINTFUN)                      AB1237005;
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?Execute internal function

     // PAR.RS Record Status = CND.Active
     PAR.RS_Record_Status = 'A';

     // PAR.RS User Added = JOB.*USER
     PAR.RS_User_Added = JOB.*USER;

     // Call program Rtv System Date & Tim UP.
     CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
     PARAMETER(PAR.RS_Date_Added);
     PARAMETER(PAR.RS_Time_Added);

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

    }

   }

   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Buy Order Load Ref CH) TYPE(CHGOBJ) FILE(PWACCPP)          AB1331979;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(PAR.BOL_Ref_1);
   PARAMETER(PAR.BOL_Ref_2);
   PARAMETER(PAR.BOL_Ref_Status);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // Call program Rtv System Date & Tim UP.
     CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
     PARAMETER(PAR.RS_Date_Changed);
     PARAMETER(PAR.RS_Time_Changed);

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

 }

 ENDIF;

}


//?USER: Process command keys

CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

RETURN;

ENDIF;

