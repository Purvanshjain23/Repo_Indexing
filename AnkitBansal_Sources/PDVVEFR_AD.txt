// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDVVEFR
// ?Date: 14.08.2025 Time: 03:36:17
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?*** Setup Security & Company Title ***
// PAR.Application Code = CND.Order Management System
PAR.Application_Code = 'OMS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

//?***** Change Log and comments
//?** 11/11/2010 RMC E01135 Display cust po
//?** 09/05/2006 LJB L60905A Condition screen fields to output only
//?** if Status Y/N flag is No
//?USER: Initialize subfile header

CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

//?First time processing.
DO;

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

// CTL.Ham Group Production Date = JOB.*Job date
CTL.Ham_Group_Production_Date = JOB.*Job_date;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

ENDDO;

ENDIF;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program CHG Deadline Dt/Tm     XF.
CALL PROGRAM(CHG Deadline Dt/Tm     XF) ('PDYOXFR');
PARAMETER(CTL.Ham_Group_Production_Date);
PARAMETER(CTL.Company_Number);

//?** Condition screen fields to output only   09/05/2006 LJB L60905A
//?Output Only if Prod Date is < Today or parm access denied=Yes
CASE;

// IF CTL.Ham Group Production Date LT JOB.*Job date
IF CTL.Ham_Group_Production_Date < JOB.*Job_date;

// OR PAR.Status - Y or N is no
OR PAR.Status_Y_or_N = 'N';

// PAR.Yes/No Selection      USR = CND.No
PAR.Yes_No_Selection_USR = 'N';

//?Output Only if Prod Date is < Today or parm access denied=Yes
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Yes/No Selection      USR = CND.Yes
PAR.Yes_No_Selection_USR = 'Y';

ENDIF;

//?USER: Initialize subfile record (existing record)

//?Select Ham Group/Orders to Display.
DO;

CASE;

// IF DB1.Company Number EQ CTL.Company Number
IF DB1.Company_Number = CTL.Company_Number;

// AND DB1.Ham Group Production Date EQ CTL.Ham Group Production Date
AND DB1.Ham_Group_Production_Date = CTL.Ham_Group_Production_Date;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDDO;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?Continue Selections.
DO;

EXECUTE FUNCTION(RTV Cust #/DDD&T       RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1568530;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(RCD.Customer_Name);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER(WRK.Unused_Parm_Date_USR);
PARAMETER(RCD.Ham_Group_Number);
PARAMETER(WRK.Unused_Parm_Date_USR);
PARAMETER(WRK.Unused_Parm_Time_USR);
PARAMETER(PAR.Cancelled_Flag_USR);
{
 //?USER: Initialize routine

 //?05/23/16 RMC E4119 remove live with tpm check
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 //?Get Deadline Departure Date/Time.
 CASE;

 // IF DB1.Load ID is Blank
 IF DB1.Load_ID = *ZERO;

 // PAR.Deadline Departure Date = CON.*ZERO
 PAR.Deadline_Departure_Date = *ZERO;

 // PAR.Deadline Departure Time = CON.*ZERO
 PAR.Deadline_Departure_Time = *ZERO;

 //?Get Deadline Departure Date/Time.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?05/23/16 RMC E4119 remove live with tpm check
 EXECUTE FUNCTION(RTV Ddln DprtDT/TM/Seq RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1540628;
 PARAMETER(DB1.Load_ID);
 PARAMETER(WRK.Unused_Parm_Value_USR);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?Set Cancelled Flag.
 CASE;

 // IF DB1.Header Status is Cancelled
 IF DB1.Header_Status = 'X';

 // PAR.Cancelled Flag USR = CND.Yes
 PAR.Cancelled_Flag_USR = 'Y';

 //?Set Cancelled Flag.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Check Order Details for Cancelled Ham Group.
 DO;

 EXECUTE FUNCTION(CLC Ham Group Dtl Sts  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1571778;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Ham_Group_Number);
 PARAMETER(PAR.Cancelled_Flag_USR);
 {
  //?USER: Initialize routine

  // PAR.Cancelled Flag USR = CND.Yes
  PAR.Cancelled_Flag_USR = 'Y';

  //?USER: Process Data record

  CASE;

  // IF DB1.Ham Group Number EQ PAR.Ham Group Number
  IF DB1.Ham_Group_Number = PAR.Ham_Group_Number;

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Cancelled Flag USR = CND.No
  PAR.Cancelled_Flag_USR = 'N';

  ENDIF;

  ENDIF;

 }

 ENDDO;

 ENDIF;

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Select only order that are not cancelled.
DO;

CASE;

// IF PAR.Cancelled Flag USR is Yes
IF PAR.Cancelled_Flag_USR = 'Y';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDDO;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDDO;

ENDIF;

//?USER: Validate subfile control

CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Company Number
IF PGM.*Cursor_field = CTL.Company_Number;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(CTL.Company_Number);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> CTL.Ham Group Production Date
IF PGM.*Cursor_field = CTL.Ham_Group_Production_Date;

// Call program Zzz Production Date    SR.
CALL PROGRAM(Zzz Production Date    SR) ('PDWNSRR');
PARAMETER(CTL.Ham_Group_Production_Date);

ENDIF;

ENDIF;

//?USER: Validate subfile record fields

CASE;

// IF RCD.*SFLSEL is Option 5
IF RCD.*SFLSEL = '5'/'5';

//?Order Detail Inquiry.
DO;

EXECUTE FUNCTION(RTV Dsp Order Details  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1568901;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Event Code is Shipped Thru 07 History
 IF DB1.Event_Code >= '04';
 AND DB1.Event_Code <= '07';

 // Call program DSP Ord Inq Ship Dtl   DF.
 CALL PROGRAM(DSP Ord Inq Ship Dtl   DF) ('PDP3DFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Application_Code);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program DSP Ord Inquiry Detail DF.
 CALL PROGRAM(DSP Ord Inquiry Detail DF) ('PDPZDFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Application_Code);

 ENDIF;

}


// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDDO;

// IF RCD.*SFLSEL is Option 7
IF RCD.*SFLSEL = '7'/'7';

//?Order Comments Edit.
DO;

CASE;

// IF PAR.Status - Y or N is no
IF PAR.Status_Y_or_N = 'N';

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program EDT OP Order Comment   EF.
CALL PROGRAM(EDT OP Order Comment   EF) ('PDAGEFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDDO;

// IF *OTHERWISE
IF *OTHERWISE;

//?Continue Validations.
DO;

CASE;

// IF RCD.Ham Group Production Date LT JOB.*Job date
IF RCD.Ham_Group_Production_Date < JOB.*Job_date;

// AND PAR.Yes/No Selection      USR is Yes
AND PAR.Yes_No_Selection_USR = 'Y';

// Send error message - 'Production Date &1 must be equal to or greater than Current Date.'
ERROR(USR2879);
MSGPARM(RCD.Ham_Group_Production_Date);

ENDIF;

ENDDO;

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(CHG Ham Group/Order    CH) TYPE(CHGOBJ) FILE(PDNDCPP)          AC1564713;
PARAMETER(RCD.Ham_Group_Number);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Ham_Group_Production_Date);
PARAMETER(RCD.Ham_Group_Processing_Seq);
PARAMETER(RCD.Ham_Group_Sched_Comment);
PARAMETER(RCD.Deadline_Departure_Date);
PARAMETER(RCD.Deadline_Departure_Time);
{
 //?USER: Processing before Data update

 // DB1.EDI Status 1 = CND.Blank
 DB1.EDI_Status_1 = *BLANK;

 // DB1.EDI Status 2 = CND.Blank
 DB1.EDI_Status_2 = *BLANK;

 // DB1.EDI Status 3 = CND.Blank
 DB1.EDI_Status_3 = *BLANK;

 // DB1.Record Status = CND.Active
 DB1.Record_Status = 'A';

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Extra processing after DBF update

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?USER: Process command keys

CASE;

// IF CTL.*CMD key is CF19
IF CTL.*CMD_key = '19';

//?Goto Order Entry.
DO;

// Call program WW Cust/Order Inq O.E. DF.
CALL PROGRAM(WW Cust/Order Inq O.E. DF) ('PDSJDFR');
PARAMETER(CTL.Company_Number);
PARAMETER(PAR.Ship_To_Customer);

ENDDO;

// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

//?Print Ham Group Production Schedule.
DO;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// Call program PMT Print Option  SHR  PV.
CALL PROGRAM(PMT Print Option  SHR  PV) ('PDG0PVR');
PARAMETER('Ham Production Schedule');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Sbmjob override string = CONCAT(CON.JOBQ(,PAR.PRT Night Queue,CND.*None)
PGM.*Sbmjob_override_string = 'JOBQ(' + PAR.PRT_Night_Queue (*ZERO);

// PGM.*Sbmjob override string = CONCAT(PGM.*Sbmjob override string,CON.),CND.*None
PGM.*Sbmjob_override_string = PGM.*Sbmjob_override_string + ')' (*ZERO);

//?E001891 PASS IN HAM SPREAD SHEET WITH BLANKS DO NOT CREATE
//?E02202 DO NOT NEED THE HAM SPREAD SHEET ANY MORE
// Call program PRT Ham Prod Schedule  XF.
SBMJOB;
CALL PROGRAM(PRT Ham Prod Schedule  XF) ('PDWKXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Ham_Group_Production_Date);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
SBMJOBOVR JOB(HAMSCHED);
SBMJOBEND;

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

ENDIF;

ENDDO;

ENDIF;

