      *****************  RPG PROGRAM HEADING  ************************
     h option(*SRCSTMT:*NODEBUGIO)
      ****************************************************************
      *
      * SYSTEM:      Hog Production System
      * PROGRAM:     HP2063 - UT: Move Edited Transfers into HPS
      * PROGRAMMER:  LeAnne Ramsey
      * CREATED:     07/10/09
      *
      * FUNCTION:    This function reads the Editing File of Uploaded Transfer
      *              Movement Data and writes the records to the HPS files.
      *                                        64
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 07/28/09  LeAnne Ramsey
      *           We now allow multiple dates in a single upload. So,
      *           we had to modify our "date in a closed period" edit.
      *
      * 07/29/09  LeAnne Ramsey
      *           We added Scheduled Ship Date (CCYYMMDD format) to the
      *           Editing file.
      *
      * 10/15/13  LeAnne Ramsey (E2831)
      *           Recompile only. Added field 'MTech Reference'.
      *
      * 01/28/17  Brad Baden    (E7986)
      *           Add Business Office to *ENTRY parameter list.  When
      *           the Business Office is OKLIV, process file HSP2062,
      *           otherwise process file HSP2064 for IFLIV.  Also replaced
      *           getting the period information from data area DAPER with
      *           retrieving the period information from the Company
      *           Control file (HSP0071).
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhsp018    if   e           k disk
      *  Farm Site
      *
      *
     Fhsp0071   if   e           k disk
      *  Company Control
      *
      *
     Fhsp058    uf a e           k disk
      *  Movement event
      *
      *
     Fhsp074    uf a e           k disk
      *  Transfer header
      *
      *
     FHsp075    uf a e           k disk
      *  Transfer detail
      *
      *
     Fhsp2062   uf   e           k disk
      *   Editing file of uploaded transfers - Guymon
      *
     Fhsp2064   uf   e           k disk
      *   Editing file of uploaded transfers - Iowa
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Control and save fields
      *
     D first           s              1    inz('Y')
     D procfl          s              1    inz('Y')
     D svmvsn          s                   like(e1mvsn)
      *
      *
      * Workfields
      *
     D wkupdt          s                   like(meupdt)
     D wkuptm          s                   like(meuptm)
     D wklnno          s                   like(mdlnno)
      *
      *
      * Workfields for date manipulation
      *
     D wkisodate       s               D   datfmt(*iso)
      *
      *
      * Parms
      *
     D xxnodata        s              1
     D xxperclo        s              1
     D xxperrun        s              1
     D xxediterr       s              1
     D xxbusofc        s              5
      *
     D eeditfl         s                   like(e1editfl)
     D emvsn           s                   like(e1mvsn)
     D emdy            s                   like(e1mdy)
     D escdt           s                   like(e1scdt)
     D eticd           s                   like(e1ticd)
     D effscd          s                   like(e1ffscd)
     D efblcd          s                   like(e1fblcd)
     D efrmcd          s                   like(e1frmcd)
     D efhgsn          s                   like(e1fhgsn)
     D efppcd          s                   like(e1fppcd)
     D efptcd          s                   like(e1fptcd)
     D etfscd          s                   like(e1tfscd)
     D etblcd          s                   like(e1tblcd)
     D etrmcd          s                   like(e1trmcd)
     D ethgsn          s                   like(e1thgsn)
     D etppcd          s                   like(e1tppcd)
     D etptcd          s                   like(e1tptcd)
     D ehd             s                   like(e1hd)
     D esplit          s                   like(e1split)
     D etype           s                   like(e1type)
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      ****************************************************************
      * Data areas
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  Definition for external data area 'DAAPER'
      *  NOTE: The use of this data area commented out and replaced
      *        with checking file HSP0071 for the period and dates.
      *        E7986 Brad Baden
      *---------------------------------------------------------------
     D
     D*daaper          ds                  dtaara(daaper)
     D* daccyy                 1      4  0
     D* daper                  5      6  0
     D* dabpdt                 7     14  0
     D* daepdt                15     22  0
     D* dapgfl                23     23
     D* dappfl                24     24
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ***************************************************************************************
      * MAINLINE
      ***************************************************************************************
      *
      * We want to make "Period" checks first. And, only continue if there are no
      * errors. So, this is an all-or-nothing interface.
      *
     C                   exsr      $first
      *
      *
      * There were no errors, so read/process all the records in the Editing File.
      *
     C                   if        procfl = yes                                 If process
     C     *start        setll     hsp2062
     C     *start        setll     hsp2064
      *
     C                   dou       *in90 = *on                                  Do loop
     C                   if        xxbusofc = 'OKLIV'
     C                   read      hsp2062                                90
     C                   else
     C                   read      hsp2064                                90
     C                   endif                                                  if xxbusofc = OKLIV

     C                   if        *in90 = *off                                 If not EOF

     C                   exsr      $loadflds
      *
      * If this line represents a new Movement, write a Transfer Header
      *
     C                   if        emvsn <> svmvsn
     C                   exsr      $crtth
     C                   z-add     emvsn         svmvsn
     C                   z-add     0             wklnno
     C                   endif
      *
      * Write Transfer Detail
      * Write Movement Event
     C                   exsr      $crttd
     C                   exsr      $crtme
      *
      * Delete the "editing" record.
      *
     C                   if        xxbusofc = 'OKLIV'
     C                   delete    e1rec
     C                   else
     C                   delete    e2rec
     C                   endif
      *
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do loop
     C                   endif                                                  If process
      *
      * EOF Processing
      *
     C                   seton                                        lr
      /EJECT
      *----------------------------------------------------------------
      * Create a Transfer Header record
      *----------------------------------------------------------------
      *
     C     $crtth        begsr
      *
     C                   move      'SC'          mhmscd
     C                   z-add     escdt         mhscdt
      *
     C                   move      eticd         mhticd
     C                   z-add     emvsn         mhmvsn
      * Origin
     C                   z-add     effscd        mhorfs
     C                   move      efptcd        mhorpt
     C                   move      efppcd        mhorpp
      *
      * Retrieve Origin Farm Site Business Office
      *
     C     effscd        chain     hsp018                             92
     C                   if        *in92 = *off
     C                   move      fsfsbo        mhorbo
     C                   endif
      *
      * Destination
     C                   z-add     etfscd        mhdnfs
     C                   move      etptcd        mhdnpt
     C                   move      etppcd        mhdnpp
      *
      * Retrieve Destination Farm Site Business Office
      *
     C     etfscd        chain     hsp018                             92
     C                   if        *in92 = *off
     C                   move      fsfsbo        mhdnbo
     C                   endif
      *
     C                   write     mhrec
     C                   clear                   mhrec
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Create Transfer Detail Records
      *----------------------------------------------------------------
      *
     C     $crttd        begsr
      *
     C                   add       1             wklnno
      *
     C                   z-add     emvsn         mdmvsn
     C                   z-add     wklnno        mdlnno
     C                   z-add     efhgsn        mdorsn
     C                   z-add     ethgsn        mddnsn
     C                   z-add     ehd           mdschd
      *
     C                   write     mdrec
     C                   clear                   mdrec
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Create Movement Event Records
      *----------------------------------------------------------------
      *
     C     $crtme        begsr
      *
      * Set up TimeStamp
      *
     C                   z-add     wkupdt        meupdt
     C                   z-add     wkuptm        meuptm
     C                   move      sdusr         meuscd
     C                   move      sdpgm         mepgm
      *
      *
     C                   z-add     emvsn         memvsn
     C                   z-add     0             mecvno
     C                   z-add     wklnno        melnno
     C                   z-add     escdt         memedt
     C                   movel     'T'           memtcd
      *
      * Write an Event Record for the Origin Group
      *
     C                   z-add     efhgsn        mehgsn
     C                   movel     'O'           meodfl
     C                   z-add     ethgsn        mehsn
      *
     C                   write     merec
      *
      * Write an Event Record for the Destination Group
      *
     C                   z-add     ethgsn        mehgsn
     C                   move      'D'           meodfl
     C                   z-add     efhgsn        mehsn
      *
     C                   write     merec
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Make 1-time checks before processing
      *----------------------------------------------------------------
      *
     C     $first        begsr
      *
     C*                  in        daaper
     C                   if        xxbusofc = 'OKLIV'
     C                   eval      cccocd = '350'
     C                   else
     C                   eval      cccocd = '340'
     C                   endif                                                  if xxbusofc = OKLIV

     C     cccocd        chain     hsp0071
     C                   if        not %found(hsp0071)
     C                   eval      procfl = no
     C                   leaveSR                                               Leave subroutine
     C                   endif                                                 if not %found(hsp0071

     C     *start        setll     hsp2062
     C     *start        setll     hsp2064

     C                   dou       *in91 = *on                                  Do loop
     C                   if        xxbusofc = 'OKLIV'
     C                   read      hsp2062                                91
     C                   else
     C                   read      hsp2064                                91
     C                   endif                                                  if xxbusofc = OKLIV


     C                   if        *in91 = *off                                 If not EOF
     C                   exsr      $loadflds
      *
     C                   move      no            first
      *
     C                   if        eeditfl = yes
     C                   else
     C                   move      yes           xxediterr
     C                   endif
      *
      * Flip Scheduled Ship Date from 6,0 to 8,0 in CCMMDDYY format.
      *
     C                   select
     C                   when      escdt < ccbpdt
     C                   move      yes           xxperclo
      *
     C                   when      escdt >= ccbpdt and
     C                             escdt <= ccepdt and
     C                             ccppfl <> *blank
     C                   move      yes           xxperrun
     C                   endsl
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do loop
      *
      * If you did not have data, set the 'No Data' error flag.
      *
     C                   if        first = yes
     C                   move      yes           xxnodata
     C                   endif
      *
      * Were there any errors?
      *
     C                   if        xxnodata = yes or xxperclo = yes or
     C                             xxperrun = yes or xxediterr = yes
     C                   move      no            procfl
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Load fields
      *----------------------------------------------------------------
      *
     C     $loadflds     begsr
      *
      * Guymon fields
      *
     C                   if        xxbusofc = 'OKLIV'
     C                   eval      eeditfl = e1editfl
     C                   eval      emvsn   = e1mvsn
     C                   eval      emdy    = e1mdy
     C                   eval      escdt   = e1scdt
     C                   eval      eticd   = e1ticd
     C                   eval      effscd  = e1ffscd
     C                   eval      efblcd  = e1fblcd
     C                   eval      efrmcd  = e1frmcd
     C                   eval      efhgsn  = e1fhgsn
     C                   eval      efppcd  = e1fppcd
     C                   eval      efptcd  = e1fptcd
     C                   eval      etfscd  = e1tfscd
     C                   eval      etblcd  = e1tblcd
     C                   eval      etrmcd  = e1trmcd
     C                   eval      ethgsn  = e1thgsn
     C                   eval      etppcd  = e1tppcd
     C                   eval      etptcd  = e1tptcd
     C                   eval      ehd     = e1hd
     C                   eval      esplit  = e1split
     C                   eval      etype   = e1type
     C                   else
      * Iowa fields
     C                   eval      eeditfl = e2editfl
     C                   eval      emvsn   = e2mvsn
     C                   eval      emdy    = e2mdy
     C                   eval      escdt   = e2scdt
     C                   eval      eticd   = e2ticd
     C                   eval      effscd  = e2ffscd
     C                   eval      efblcd  = e2fblcd
     C                   eval      efrmcd  = e2frmcd
     C                   eval      efhgsn  = e2fhgsn
     C                   eval      efppcd  = e2fppcd
     C                   eval      efptcd  = e2fptcd
     C                   eval      etfscd  = e2tfscd
     C                   eval      etblcd  = e2tblcd
     C                   eval      etrmcd  = e2trmcd
     C                   eval      ethgsn  = e2thgsn
     C                   eval      etppcd  = e2tppcd
     C                   eval      etptcd  = e2tptcd
     C                   eval      ehd     = e2hd
     C                   eval      esplit  = e2split
     C                   eval      etype   = e2type
     C                   endif                                                  if xxbusofc = OKLIV
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parms
      *
     C     *entry        plist
     C                   parm                    xxnodata
     C                   parm                    xxperclo
     C                   parm                    xxperrun
     C                   parm                    xxediterr
     C                   parm                    xxbusofc
      *
      *
      * Set up the date/time/user for time-stamping the Movement Event record.
      *
     C     *mdy          move      udate         wkisodate
     C                   move      wkisodate     wkupdt
     C                   time                    wkuptm
      *
     C                   endsr
      /EJECT
