// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKG7E1R
// ?Date: 14.08.2025 Time: 02:49:31
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


//?USER: Initialize key screen

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

//?USER: Initialize detail screen (new record)

// DTL.RS Record Status = CND.Active
DTL.RS_Record_Status = 'A';

// DTL.Name USR = PAR.Name USR
DTL.Name_USR = PAR.Name_USR;

// DTL.Pen Sts = CND.Open
DTL.Pen_Sts = 'O';

// DTL.Stress/Market Type = CND.None
DTL.Stress_Market_Type = *BLANK;

//?USER: Initialize detail screen (existing record)

// Call program Rtv Stress Pens Only  XF.
CALL PROGRAM(Rtv Stress Pens Only  XF) ('PLPJXFR');
PARAMETER(DTL.Pen_Company_Number);
PARAMETER(DTL.Pen_Number);
PARAMETER(DTL.Stress_Market_Type);

// DTL.Text 25 #1 Usr = Condition name of DTL.Stress/Market Type
DTL.Text_25_#1_Usr = RTVCND(DTL.Stress_Market_Type);

// DTL.Pen Type Description Usr = Condition name of DB1.Pen Type
DTL.Pen_Type_Description_Usr = RTVCND(DB1.Pen_Type);

// DTL.Record Status Desc Usr = Condition name of DB1.RS Record Status
DTL.Record_Status_Desc_Usr = RTVCND(DB1.RS_Record_Status);

EXECUTE FUNCTION(Rtv Genetic Record    RT) TYPE(RTVOBJ) FILE(PKAIREP)           AB1107738;
PARAMETER(DB1.GN_Genetic_Code);
PARAMETER(DTL.Pen_Description);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.GN_Description = *BLANK;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Validate detail screen fields

// DTL.Text 25 #1 Usr = Condition name of DTL.Stress/Market Type
DTL.Text_25_#1_Usr = RTVCND(DTL.Stress_Market_Type);

EXECUTE FUNCTION(Rtv Genetic Record    RT) TYPE(RTVOBJ) FILE(PKAIREP)           AB1107738;
PARAMETER(DTL.GN_Genetic_Code);
PARAMETER(DTL.Pen_Description);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.GN_Description = *BLANK;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Pen Type Description Usr = Condition name of DTL.Pen Type
DTL.Pen_Type_Description_Usr = RTVCND(DTL.Pen_Type);

// DTL.Record Status Desc Usr = Condition name of DTL.RS Record Status
DTL.Record_Status_Desc_Usr = RTVCND(DTL.RS_Record_Status);

CASE;

// IF DTL.Stress/Market Type is Stress
IF DTL.Stress_Market_Type = 'S';

// AND DTL.Pen Type is Market
AND DTL.Pen_Type = 'M';

//?Good validation
// IF DTL.Stress/Market Type is Stress
IF DTL.Stress_Market_Type = 'S';

// Send error message - 'Stress must be Type=M'
ERROR(PRK1240);
MSGPARM(DTL.Stress_Market_Type);

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Pen/Pen Ext       IF) TYPE(EXCINTFUN) FILE(PKA3REP)        AB1299208;
PARAMETER(DTL.Pen_Company_Number);
PARAMETER(DTL.Pen_Number);
PARAMETER(DTL.Pen_Description);
PARAMETER(DTL.Pen_Maximun_Capacity);
PARAMETER(DTL.Pen_Current_Head);
PARAMETER(DTL.Pen_Current_Drive_Card_No);
PARAMETER(DTL.Pen_Sts);
PARAMETER(DTL.Pen_Drive_Sequence);
PARAMETER(DTL.Pen_Type);
PARAMETER(DTL.Pen_Adjustment);
PARAMETER(DTL.GN_Genetic_Code);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
PARAMETER(DTL.Stress_Market_Type);
{
 //?Execute internal function

 EXECUTE FUNCTION(Crt Pen               CO) TYPE(CRTOBJ) FILE(PKA3REP)           AB1102757;
 PARAMETER(PAR.Pen_Company_Number);
 PARAMETER(PAR.Pen_Number);
 PARAMETER(PAR.Pen_Description);
 PARAMETER(PAR.Pen_Maximun_Capacity);
 PARAMETER(PAR.Pen_Current_Head);
 PARAMETER(PAR.Pen_Current_Drive_Card_No);
 PARAMETER(PAR.Pen_Sts);
 PARAMETER(PAR.Pen_Drive_Sequence);
 PARAMETER(PAR.Pen_Type);
 PARAMETER(PAR.Pen_Adjustment);
 PARAMETER(PAR.GN_Genetic_Code);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 EXECUTE FUNCTION(Crt Pen Ext           CO) TYPE(CRTOBJ) FILE(PLBBREP)           AB1299107;
 PARAMETER(PAR.Pen_Company_Number);
 PARAMETER(PAR.Pen_Number);
 PARAMETER(PAR.Stress_Market_Type);
 PARAMETER(LCL.Pen_Ext_UnUsed_Sts_1);
 PARAMETER(LCL.Pen_Ext_UnUsed_Sts_2);
 PARAMETER(LCL.Pen_Ext_UnUsed_Sts_3);
 PARAMETER(LCL.Pen_Ext_UnUsed_Sts_4);
 PARAMETER(LCL.RS_User_Changed);
 PARAMETER(LCL.RS_Date_Changed);
 PARAMETER(LCL.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(LCL.RS_Job);
 PARAMETER(LCL.RS_Program);
 PARAMETER(LCL.RS_User_Added);
 PARAMETER(LCL.RS_Date_Added);
 PARAMETER(LCL.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp-Sys Dt  IF) TYPE(EXCINTFUN)                      AB1237005;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // Call program Rtv System Date & Tim UP.
   CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
   PARAMETER(PAR.RS_Date_Added);
   PARAMETER(PAR.RS_Time_Added);

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Pen/Pen Ext       IF) TYPE(EXCINTFUN) FILE(PKA3REP)        AB1299218;
PARAMETER(DTL.Pen_Company_Number);
PARAMETER(DTL.Pen_Number);
PARAMETER(DTL.Pen_Description);
PARAMETER(DTL.Pen_Maximun_Capacity);
PARAMETER(DTL.Pen_Current_Head);
PARAMETER(DTL.Pen_Current_Drive_Card_No);
PARAMETER(DTL.Pen_Sts);
PARAMETER(DTL.Pen_Drive_Sequence);
PARAMETER(DTL.Pen_Type);
PARAMETER(DTL.Pen_Adjustment);
PARAMETER(DTL.GN_Genetic_Code);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.Stress_Market_Type);
{
 //?Execute internal function

 EXECUTE FUNCTION(Chg Pen               CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1102758;
 PARAMETER(PAR.Pen_Company_Number);
 PARAMETER(PAR.Pen_Number);
 PARAMETER(PAR.Pen_Description);
 PARAMETER(PAR.Pen_Maximun_Capacity);
 PARAMETER(PAR.Pen_Current_Head);
 PARAMETER(PAR.Pen_Current_Drive_Card_No);
 PARAMETER(PAR.Pen_Sts);
 PARAMETER(PAR.Pen_Drive_Sequence);
 PARAMETER(PAR.Pen_Type);
 PARAMETER(PAR.Pen_Adjustment);
 PARAMETER(PAR.GN_Genetic_Code);
 PARAMETER(LCL.RS_User_Changed);
 PARAMETER(LCL.RS_Date_Changed);
 PARAMETER(LCL.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(LCL.RS_Job);
 PARAMETER(LCL.RS_Program);
 PARAMETER(LCL.RS_User_Added);
 PARAMETER(LCL.RS_Date_Added);
 PARAMETER(LCL.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 EXECUTE FUNCTION(Chg Pen Ext           CH) TYPE(CHGOBJ) FILE(PLBBREP)           AB1299108;
 PARAMETER(PAR.Pen_Company_Number);
 PARAMETER(PAR.Pen_Number);
 PARAMETER(PAR.Stress_Market_Type);
 PARAMETER(PAR.RS_Record_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // Call program Rtv System Date & Tim UP.
   CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
   PARAMETER(PAR.RS_Date_Changed);
   PARAMETER(PAR.RS_Time_Changed);

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


//?USER: Process command keys

CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

RETURN;

ENDIF;

