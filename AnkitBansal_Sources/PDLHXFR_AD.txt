// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDLHXFR
// ?Date: 14.08.2025 Time: 03:32:10
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Change Log
DO;

//?INV018 3/19/97 PLL  Added shift # to processing; hard-coded 1 for now
ENDDO;

// PAR.Shift Number = CON.1
PAR.Shift_Number = 1;

// PAR.Transaction Qty. Total = CON.*ZERO
PAR.Transaction_Qty_Total = *ZERO;

// PAR.Transaction Wgt. Total = CON.*ZERO
PAR.Transaction_Wgt_Total = *ZERO;

EXECUTE FUNCTION(RTV Backout Spec'l Adj RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1409857;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Transaction_Qty_Total);
PARAMETER(PAR.Transaction_Wgt_Total);
PARAMETER(PAR.Inventory_Trans_ID);
PARAMETER(PAR.Inventory_Trans_Type);
PARAMETER(PAR.Transaction_Date_Code);
{
 //?USER: Process Data record

 // PAR.Reason Code = CON.IAD
 PAR.Reason_Code = 'IAD';

 //?Special adjustment trans id and type are passed in as reference points
 CASE;

 // IF DB1.Inventory Trans. ID EQ PAR.Inventory Trans. ID
 IF DB1.Inventory_Trans_ID = PAR.Inventory_Trans_ID;

 // AND DB1.Inventory Trans. Type EQ PAR.Inventory Trans. Type
 AND DB1.Inventory_Trans_Type = PAR.Inventory_Trans_Type;

 // PAR.Transaction Qty. Total = PAR.Transaction Qty. Total + DB1.Transaction Quanti
 PAR.Transaction_Qty_Total = PAR.Transaction_Qty_Total + DB1.Transaction_Quantity;

 // PAR.Transaction Wgt. Total = PAR.Transaction Wgt. Total + DB1.Transaction Weight
 PAR.Transaction_Wgt_Total = PAR.Transaction_Wgt_Total + DB1.Transaction_Weight;

 // IF DB1.Inventory Trans. ID is Adjustment
 IF DB1.Inventory_Trans_ID = 'A';

 // AND DB1.Inventory Trans. Type is Adjustment Physical
 AND DB1.Inventory_Trans_Type = 'AP';

 // AND DB1.Reason Code EQ PAR.Reason Code
 AND DB1.Reason_Code = PAR.Reason_Code;

 QUIT;

 ENDIF;

}


CASE;

// IF PAR.Transaction Qty. Total NE WRK.ZERO
IF PAR.Transaction_Qty_Total <> WRK.ZERO;

// OR PAR.Transaction Wgt. Total NE WRK.ZERO
OR PAR.Transaction_Wgt_Total <> WRK.ZERO;

//?make transaction qty, wgt negative
// PAR.Transaction Qty. Total = CON.*ZERO - PAR.Transaction Qty. Total
PAR.Transaction_Qty_Total = *ZERO - PAR.Transaction_Qty_Total;

// PAR.Transaction Wgt. Total = CON.*ZERO - PAR.Transaction Wgt. Total
PAR.Transaction_Wgt_Total = *ZERO - PAR.Transaction_Wgt_Total;

EXECUTE FUNCTION(Rtv Base Values        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1125011;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(WRK.Description_Line_One);
PARAMETER(WRK.Description_Line_Two);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(PAR.UOM_Pricing);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Production_Date_Control);
PARAMETER(PAR.Catch_Weight_Status);
PARAMETER(WRK.Fresh_Chilling_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(UPD Balances Issue/Adj IF) TYPE(EXCINTFUN)                     AC1413367;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Production_Date);
PARAMETER('A');
PARAMETER('BO');
PARAMETER(PAR.Transaction_Date_Code);
PARAMETER(PAR.UOM_Primary);
PARAMETER('SG');
PARAMETER('Backout Special Adjustmts');
PARAMETER(PAR.Transaction_Qty_Total);
PARAMETER(PAR.Transaction_Wgt_Total);
PARAMETER(PAR.UOM_Primary);
PARAMETER(*BLANK);
PARAMETER(*MISSING);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(PAR.Shift_Number);
PARAMETER(PAR.Label_Date);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(PAR.Production_Date_Control);
PARAMETER(PAR.Catch_Weight_Status);
PARAMETER(PAR.Unit_Cost_Per_Pound);
PARAMETER('N');
{
 //?Execute internal function

 //?NOTES: WI517 DN 10/09/23-Per Business (Ace C./Ryan H.), we will NOT
 //?       pass in the 'negative' Qty/Wgt when processing the WIM API.
 //?       WIM API logic will handle this scenario.
 //?WI517 DN 07/05/23-Get WIM Module Release Status.
 EXECUTE FUNCTION(Rtv Module Release Sts RT) TYPE(RTVOBJ) FILE(PUC6REP)          AC2212908;
 PARAMETER('WIM');
 PARAMETER(1);
 PARAMETER(LCL.Module_Release_Status);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Record Status is Active
  IF DB1.Record_Status = 'A';

  MOVE *ALL (To: PAR From: DB1);

  ENDIF;

 }

 // PAR.Inventory Updated USR = CND.No
 PAR.Inventory_Updated_USR = 'N';

 // PAR.API was Called? U = CND.No
 PAR.API_was_Called_U = 'N';

 //?08/10/23 DN WI517-Call Existing Legacy Process.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Total S = PAR.Transaction Quantity
 PAR.Quantity_Total_S = PAR.Transaction_Quantity;

 // PAR.USR Transaction Weight = PAR.Transaction Weight
 PAR.USR_Transaction_Weight = PAR.Transaction_Weight;

 //?Adjust quantity, weight for trans type (make negative if issue)
 CASE;

 // IF PAR.Inventory Trans. Type is Issue types
 IF PAR.Inventory_Trans_Type = 'I'/'IO'/'RW';

 CASE;

 // IF PAR.USR Unship Flag is yes
 IF PAR.USR_Unship_Flag = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Qty
 CASE;

 // IF PAR.Transaction Quantity GT WRK.ZERO
 IF PAR.Transaction_Quantity > WRK.ZERO;

 // PAR.Quantity Total S = CON.*ZERO - PAR.Transaction Quantity
 PAR.Quantity_Total_S = *ZERO - PAR.Transaction_Quantity;

 ENDIF;

 //?Wgt
 CASE;

 // IF PAR.Transaction Weight GT WRK.ZERO
 IF PAR.Transaction_Weight > WRK.ZERO;

 // PAR.USR Transaction Weight = CON.*ZERO - PAR.Transaction Weight
 PAR.USR_Transaction_Weight = *ZERO - PAR.Transaction_Weight;

 ENDIF;

 ENDIF;

 ENDIF;

 // Send status message - 'Processing...'
 MESSAGE(USR2303 *STATUS);

 EXECUTE FUNCTION(Clc Convert Quantity   IF) TYPE(EXCINTFUN)                     AC1123260;
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Conversion_Factor_1);
 PARAMETER(PAR.Operation_Factor_1);
 PARAMETER(PAR.UOM_Second);
 PARAMETER(PAR.Conversion_Factor_2);
 PARAMETER(PAR.Operation_Factor_2);
 PARAMETER(PAR.UOM_Third);
 PARAMETER(PAR.UOM_Transaction);
 PARAMETER(PAR.Quantity_Total_S);
 PARAMETER(PAR.Quantity_based_on_U_M1_S);
 PARAMETER(PAR.Quantity_based_on_U_M2_S);
 PARAMETER(PAR.Quantity_based_on_U_M3_S);
 {
  //?Execute internal function

  //?Clear output parameters
  // PAR.USR Qty based on U/M1 = CON.*ZERO
  PAR.USR_Qty_based_on_U_M1 = *ZERO;

  // PAR.USR Qty based on U/M2 = CON.*ZERO
  PAR.USR_Qty_based_on_U_M2 = *ZERO;

  // PAR.USR Qty based on U/M3 = CON.*ZERO
  PAR.USR_Qty_based_on_U_M3 = *ZERO;

  //?Process based on transaction U/M
  CASE;

  // IF PAR.U/M - Primary EQ PAR.U/M - Transaction
  IF PAR.UOM_Primary = PAR.UOM_Transaction;

  // PAR.USR Qty based on U/M1 = PAR.Transaction Quantity
  PAR.USR_Qty_based_on_U_M1 = PAR.Transaction_Quantity;

  //?Process entered U/M2
  CASE;

  // IF PAR.U/M - Second is Entered
  IF PAR.UOM_Second <> *BLANK;

  //?Convert based on operation factor
  CASE;

  // IF PAR.Operation Factor 1 is Multiply
  IF PAR.Operation_Factor_1 = 'M';

  // PAR.Quantity based on U/M2 S = PAR.Transaction Quantity * PAR.Conversion Factor
  PAR.Quantity_based_on_U_M2_S = PAR.Transaction_Quantity * PAR.Conversion_Factor_1 'H';

  //?Convert based on operation factor
  // IF PAR.Operation Factor 1 is Divide
  IF PAR.Operation_Factor_1 = 'D';

  CASE;

  // IF PAR.Conversion Factor 1 is Entered
  IF PAR.Conversion_Factor_1 <> *ZERO;

  // PAR.Quantity based on U/M2 S = PAR.Transaction Quantity / PAR.Conversion Factor
  PAR.Quantity_based_on_U_M2_S = PAR.Transaction_Quantity / PAR.Conversion_Factor_1 'H';

  ENDIF;

  ENDIF;

  // PAR.Quantity based on U/M2 = PAR.Quantity based on U/M2 S
  PAR.USR_Qty_based_on_U_M2 = PAR.Quantity_based_on_U_M2_S;

  ENDIF;

  //?Process entered U/M3
  CASE;

  // IF PAR.U/M - Third is Entered
  IF PAR.UOM_Third <> *BLANK;

  //?Convert based on operation factor
  CASE;

  // IF PAR.Operation Factor 2 is Multiply
  IF PAR.Operation_Factor_2 = 'M';

  // PAR.Quantity based on U/M3 S = PAR.Quantity based on U/M2 S * PAR.Multiplier Two
  PAR.Quantity_based_on_U_M3_S = PAR.Quantity_based_on_U_M2_S * PAR.Conversion_Factor_2
  'H';

  //?Convert based on operation factor
  // IF PAR.Operation Factor 2 is Divide
  IF PAR.Operation_Factor_2 = 'D';

  CASE;

  // IF PAR.Conversion Factor 2 is Entered
  IF PAR.Conversion_Factor_2 <> *ZERO;

  // PAR.Quantity based on U/M3 S = PAR.Quantity based on U/M2 S / PAR.Conversion Fac
  PAR.Quantity_based_on_U_M3_S = PAR.Quantity_based_on_U_M2_S / PAR.Conversion_Factor_2
  'H';

  ENDIF;

  ENDIF;

  // PAR.Quantity based on U/M3 = PAR.Quantity based on U/M3 S
  PAR.USR_Qty_based_on_U_M3 = PAR.Quantity_based_on_U_M3_S;

  ENDIF;

  //?Process based on transaction U/M
  // IF PAR.U/M - Second EQ PAR.U/M - Transaction
  IF PAR.UOM_Second = PAR.UOM_Transaction;

  // PAR.Quantity based on U/M2 = PAR.Transaction Quantity
  PAR.USR_Qty_based_on_U_M2 = PAR.Transaction_Quantity;

  //?Convert based on operation factor
  CASE;

  // IF PAR.Operation Factor 1 is Multiply
  IF PAR.Operation_Factor_1 = 'M';

  CASE;

  // IF PAR.Conversion Factor 1 is Entered
  IF PAR.Conversion_Factor_1 <> *ZERO;

  // PAR.Quantity based on U/M1 = PAR.Transaction Quantity / PAR.Conversion Factor 1
  PAR.USR_Qty_based_on_U_M1 = PAR.Transaction_Quantity / PAR.Conversion_Factor_1 'H';

  ENDIF;

  //?Convert based on operation factor
  // IF PAR.Operation Factor 1 is Divide
  IF PAR.Operation_Factor_1 = 'D';

  // PAR.Quantity based on U/M1 = PAR.Transaction Quantity * PAR.Conversion Factor 1
  PAR.USR_Qty_based_on_U_M1 = PAR.Transaction_Quantity * PAR.Conversion_Factor_1 'H';

  ENDIF;

  //?Process entered U/M3
  CASE;

  // IF PAR.U/M - Third is Entered
  IF PAR.UOM_Third <> *BLANK;

  //?Convert based on operation factor
  CASE;

  // IF PAR.Operation Factor 2 is Multiply
  IF PAR.Operation_Factor_2 = 'M';

  // PAR.Quantity based on U/M3 S = PAR.Transaction Quantity * PAR.Conversion Factor
  PAR.Quantity_based_on_U_M3_S = PAR.Transaction_Quantity * PAR.Conversion_Factor_2 'H';

  //?Convert based on operation factor
  // IF PAR.Operation Factor 2 is Divide
  IF PAR.Operation_Factor_2 = 'D';

  CASE;

  // IF PAR.Conversion Factor 2 is Entered
  IF PAR.Conversion_Factor_2 <> *ZERO;

  // PAR.Quantity based on U/M3 S = PAR.Transaction Quantity / PAR.Conversion Factor
  PAR.Quantity_based_on_U_M3_S = PAR.Transaction_Quantity / PAR.Conversion_Factor_2 'H';

  ENDIF;

  ENDIF;

  // PAR.Quantity based on U/M3 = PAR.Quantity based on U/M3 S
  PAR.USR_Qty_based_on_U_M3 = PAR.Quantity_based_on_U_M3_S;

  ENDIF;

  //?Process based on transaction U/M
  // IF PAR.U/M - Third EQ PAR.U/M - Transaction
  IF PAR.UOM_Third = PAR.UOM_Transaction;

  // PAR.Quantity based on U/M3 = PAR.Transaction Quantity
  PAR.USR_Qty_based_on_U_M3 = PAR.Transaction_Quantity;

  //?Convert based on operation factor
  CASE;

  // IF PAR.Operation Factor 2 is Multiply
  IF PAR.Operation_Factor_2 = 'M';

  CASE;

  // IF PAR.Conversion Factor 2 is Entered
  IF PAR.Conversion_Factor_2 <> *ZERO;

  // PAR.Quantity based on U/M2 S = PAR.Transaction Quantity / PAR.Conversion Factor
  PAR.Quantity_based_on_U_M2_S = PAR.Transaction_Quantity / PAR.Conversion_Factor_2 'H';

  ENDIF;

  //?Convert based on operation factor
  // IF PAR.Operation Factor 2 is Divide
  IF PAR.Operation_Factor_2 = 'D';

  // PAR.Quantity based on U/M2 S = PAR.Transaction Quantity * PAR.Conversion Factor
  PAR.Quantity_based_on_U_M2_S = PAR.Transaction_Quantity * PAR.Conversion_Factor_2 'H';

  ENDIF;

  // PAR.Quantity based on U/M2 = PAR.Quantity based on U/M2 S
  PAR.USR_Qty_based_on_U_M2 = PAR.Quantity_based_on_U_M2_S;

  //?Convert based on operation factor
  CASE;

  // IF PAR.Operation Factor 1 is Multiply
  IF PAR.Operation_Factor_1 = 'M';

  CASE;

  // IF PAR.Conversion Factor 1 is Entered
  IF PAR.Conversion_Factor_1 <> *ZERO;

  // PAR.Quantity based on U/M1 = PAR.Quantity based on U/M2 S / PAR.Conversion Facto
  PAR.USR_Qty_based_on_U_M1 = PAR.Quantity_based_on_U_M2_S / PAR.Conversion_Factor_1 'H';

  ENDIF;

  //?Convert based on operation factor
  // IF PAR.Operation Factor 1 is Divide
  IF PAR.Operation_Factor_1 = 'D';

  // PAR.Quantity based on U/M1 = PAR.Quantity based on U/M2 S * PAR.Conversion Facto
  PAR.USR_Qty_based_on_U_M1 = PAR.Quantity_based_on_U_M2_S * PAR.Conversion_Factor_1 'H';

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(Clc Convert Cost       IF) TYPE(EXCINTFUN)                     AC1122884;
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Conversion_Factor_1);
 PARAMETER(PAR.Operation_Factor_1);
 PARAMETER(PAR.UOM_Second);
 PARAMETER(PAR.Conversion_Factor_2);
 PARAMETER(PAR.Operation_Factor_2);
 PARAMETER(PAR.UOM_Third);
 PARAMETER(PAR.Unit_Cost_Per_Pound);
 PARAMETER(PAR.UOM_Cost);
 PARAMETER(PAR.Cost_based_on_U_M1_S);
 PARAMETER(PAR.Cost_based_on_U_M2_S);
 PARAMETER(PAR.Cost_based_on_U_M3_S);
 {
  //?Execute internal function

  //?Initialize parameter values
  // PAR.Cost based on U/M1 = CON.*ZERO
  PAR.Cost_based_on_U_M1 = *ZERO;

  // PAR.Cost based on U/M2 = CON.*ZERO
  PAR.Cost_based_on_U_M2 = *ZERO;

  // PAR.Cost based on U/M3 = CON.*ZERO
  PAR.Cost_based_on_U_M3 = *ZERO;

  //?Process based on Unit of Measure entered
  CASE;

  // IF PAR.U/M - Primary EQ PAR.U/M - Cost
  IF PAR.UOM_Primary = PAR.UOM_Cost;

  // PAR.Cost based on U/M1 = PAR.USR Transaction-Unit Cost
  PAR.Cost_based_on_U_M1 = PAR.USR_Transaction_Unit_Cost;

  //?Process second U/M if entered
  CASE;

  // IF PAR.U/M - Second is Entered
  IF PAR.UOM_Second <> *BLANK;

  //?Convert based on operation code
  CASE;

  // IF PAR.Operation Factor 1 is Multiply
  IF PAR.Operation_Factor_1 = 'M';

  CASE;

  // IF PAR.Conversion Factor 1 is Entered
  IF PAR.Conversion_Factor_1 <> *ZERO;

  // PAR.Cost based on U/M2 S = PAR.USR Transaction-Unit Cost / PAR.Conversion Factor
  PAR.Cost_based_on_U_M2_S = PAR.USR_Transaction_Unit_Cost / PAR.Conversion_Factor_1 'H';

  ENDIF;

  //?Convert based on operation code
  // IF PAR.Operation Factor 1 is Divide
  IF PAR.Operation_Factor_1 = 'D';

  // PAR.Cost based on U/M2 S = PAR.USR Transaction-Unit Cost * PAR.Conversion Factor
  PAR.Cost_based_on_U_M2_S = PAR.USR_Transaction_Unit_Cost * PAR.Conversion_Factor_1 'H';

  ENDIF;

  // PAR.Cost based on U/M2 = PAR.Cost based on U/M2 S
  PAR.Cost_based_on_U_M2 = PAR.Cost_based_on_U_M2_S;

  ENDIF;

  //?Process third U/M if entered
  CASE;

  // IF PAR.U/M - Third is Entered
  IF PAR.UOM_Third <> *BLANK;

  CASE;

  // IF PAR.Operation Factor 2 is Multiply
  IF PAR.Operation_Factor_2 = 'M';

  CASE;

  // IF PAR.Conversion Factor 2 is Entered
  IF PAR.Conversion_Factor_2 <> *ZERO;

  // PAR.Cost based on U/M3 = PAR.Cost based on U/M2 S / PAR.Conversion Factor 2 *Rou
  PAR.Cost_based_on_U_M3 = PAR.Cost_based_on_U_M2_S / PAR.Conversion_Factor_2 'H';

  ENDIF;

  // IF PAR.Operation Factor 2 is Divide
  IF PAR.Operation_Factor_2 = 'D';

  // PAR.Cost based on U/M3 = PAR.Cost based on U/M2 S * PAR.Conversion Factor 2 *Rou
  PAR.Cost_based_on_U_M3 = PAR.Cost_based_on_U_M2_S * PAR.Conversion_Factor_2 'H';

  ENDIF;

  ENDIF;

  //?Process based on Unit of Measure entered
  // IF PAR.U/M - Second EQ PAR.U/M - Cost
  IF PAR.UOM_Second = PAR.UOM_Cost;

  // PAR.Cost based on U/M2 = PAR.USR Transaction-Unit Cost
  PAR.Cost_based_on_U_M2 = PAR.USR_Transaction_Unit_Cost;

  //?Convert based on operation factor
  CASE;

  // IF PAR.Operation Factor 1 is Multiply
  IF PAR.Operation_Factor_1 = 'M';

  // PAR.Cost based on U/M1 = PAR.USR Transaction-Unit Cost * PAR.Conversion Factor 1
  PAR.Cost_based_on_U_M1 = PAR.USR_Transaction_Unit_Cost * PAR.Conversion_Factor_1 'H';

  //?Convert based on operation factor
  // IF PAR.Operation Factor 1 is Divide
  IF PAR.Operation_Factor_1 = 'D';

  CASE;

  // IF PAR.Conversion Factor 1 is Entered
  IF PAR.Conversion_Factor_1 <> *ZERO;

  // PAR.Cost based on U/M1 = PAR.USR Transaction-Unit Cost / PAR.Conversion Factor 1
  PAR.Cost_based_on_U_M1 = PAR.USR_Transaction_Unit_Cost / PAR.Conversion_Factor_1 'H';

  ENDIF;

  ENDIF;

  //?Process third U/M if entered
  CASE;

  // IF PAR.U/M - Third is Entered
  IF PAR.UOM_Third <> *BLANK;

  CASE;

  // IF PAR.Operation Factor 2 is Multiply
  IF PAR.Operation_Factor_2 = 'M';

  CASE;

  // IF PAR.Conversion Factor 2 is Entered
  IF PAR.Conversion_Factor_2 <> *ZERO;

  // PAR.Cost based on U/M3 = PAR.USR Transaction-Unit Cost / PAR.Conversion Factor 2
  PAR.Cost_based_on_U_M3 = PAR.USR_Transaction_Unit_Cost / PAR.Conversion_Factor_2 'H';

  ENDIF;

  // IF PAR.Operation Factor 2 is Divide
  IF PAR.Operation_Factor_2 = 'D';

  // PAR.Cost based on U/M3 = PAR.USR Transaction-Unit Cost * PAR.Conversion Factor 2
  PAR.Cost_based_on_U_M3 = PAR.USR_Transaction_Unit_Cost * PAR.Conversion_Factor_2 'H';

  ENDIF;

  ENDIF;

  //?Process based on Unit of Measure entered
  // IF PAR.U/M - Third EQ PAR.U/M - Cost
  IF PAR.UOM_Third = PAR.UOM_Cost;

  // PAR.Cost based on U/M3 = PAR.USR Transaction-Unit Cost
  PAR.Cost_based_on_U_M3 = PAR.USR_Transaction_Unit_Cost;

  //?Convert based on operation factor
  CASE;

  // IF PAR.Operation Factor 2 is Multiply
  IF PAR.Operation_Factor_2 = 'M';

  // PAR.Cost based on U/M2 S = PAR.USR Transaction-Unit Cost * PAR.Conversion Factor
  PAR.Cost_based_on_U_M2_S = PAR.USR_Transaction_Unit_Cost * PAR.Conversion_Factor_2 'H';

  //?Convert based on operation factor
  // IF PAR.Operation Factor 2 is Divide
  IF PAR.Operation_Factor_2 = 'D';

  CASE;

  // IF PAR.Conversion Factor 2 is Entered
  IF PAR.Conversion_Factor_2 <> *ZERO;

  // PAR.Cost based on U/M2 S = PAR.USR Transaction-Unit Cost / PAR.Conversion Factor
  PAR.Cost_based_on_U_M2_S = PAR.USR_Transaction_Unit_Cost / PAR.Conversion_Factor_2 'H';

  ENDIF;

  ENDIF;

  // PAR.Cost based on U/M2 = PAR.Cost based on U/M2 S
  PAR.Cost_based_on_U_M2 = PAR.Cost_based_on_U_M2_S;

  //?Convert based on operation factor
  CASE;

  // IF PAR.Operation Factor 1 is Multiply
  IF PAR.Operation_Factor_1 = 'M';

  // PAR.Cost based on U/M1 = PAR.Cost based on U/M2 S * PAR.Conversion Factor 1 *Rou
  PAR.Cost_based_on_U_M1 = PAR.Cost_based_on_U_M2_S * PAR.Conversion_Factor_1 'H';

  //?Convert based on operation factor
  // IF PAR.Operation Factor 1 is Divide
  IF PAR.Operation_Factor_1 = 'D';

  CASE;

  // IF PAR.Conversion Factor 1 is Entered
  IF PAR.Conversion_Factor_1 <> *ZERO;

  // PAR.Cost based on U/M1 = PAR.Cost based on U/M2 S / PAR.Conversion Factor 1 *Rou
  PAR.Cost_based_on_U_M1 = PAR.Cost_based_on_U_M2_S / PAR.Conversion_Factor_1 'H';

  ENDIF;

  ENDIF;

  ENDIF;

 }

 // PAR.Extended Amount = PAR.Unit Cost Per Pound * PAR.USR Transaction Weight *
 PAR.Extended_Amount = PAR.Unit_Cost_Per_Pound * PAR.USR_Transaction_Weight;

 // PAR.USR Reason Code = PAR.Reason Code
 PAR.USR_Reason_Code = PAR.Reason_Code;

 //?Error if unit cost = 0
 CASE;

 // IF PAR.Unit Cost Pricing U/M EQ WRK.ZERO
 IF PAR.Unit_Cost_Per_Pound = WRK.ZERO;

 // PAR.USR Reason Code = CND.Error
 PAR.USR_Reason_Code = 'ERR';

 ENDIF;

 //?08/10/23 DN WI517-Call Legacy Process if Not Live or Parallel.
 CASE;

 // IF LCL.Module Release Status is Not Live
 IF LCL.Module_Release_Status = 'N';

 // OR LCL.Module Release Status is Parallel
 OR LCL.Module_Release_Status = 'P';

 //?09/22/23 DN WI517-Set 'Inventory Updated USR' Flag.
 // PAR.Inventory Updated USR = CND.Yes
 PAR.Inventory_Updated_USR = 'Y';

 EXECUTE FUNCTION(Rtv Item Typ/Grp/Cls  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1298334;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Next Sequence No.  RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1304410;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Inventory_Trans_ID);
 PARAMETER(PAR.Inventory_Trans_Type);
 PARAMETER(PAR.Transaction_Date_Code);
 PARAMETER(PAR.ITD_Sequence_Number);
 {
  //?USER: Processing if Data record not found

  // PAR.ITD Sequence Number = CON.1
  PAR.ITD_Sequence_Number = 1;

  //?USER: Process Data record

  // PAR.ITD Sequence Number = DB1.ITD Sequence Number + CON.1
  PAR.ITD_Sequence_Number = DB1.ITD_Sequence_Number + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt IC Trans. W/SystDt CR) TYPE(CRTOBJ) FILE(CAB7CPP)          AC2080125;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Inventory_Trans_ID);
 PARAMETER(PAR.Inventory_Trans_Type);
 PARAMETER(PAR.Transaction_Date_Code);
 PARAMETER(PAR.ITD_Sequence_Number);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.UOM_Transaction);
 PARAMETER(PAR.Item_Transaction_Source);
 PARAMETER(PAR.Description);
 PARAMETER(PAR.Quantity_Total_S);
 PARAMETER(PAR.USR_Transaction_Weight);
 PARAMETER(*ZERO);
 PARAMETER(PAR.UOM_Cost);
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(PAR.USR_Reason_Code);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Lot_ID);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Employee_Badge_Number);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Shift_Number);
 PARAMETER(PAR.Label_Date);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER('A');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program RTV System Date/Time   UP.
  CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
  PARAMETER(DB1.Job_Date);
  PARAMETER(DB1.Job_Time);

  //?USER: Processing after Data update

  // Call program Crt Export Rate Dtl   XF.
  CALL PROGRAM(Crt Export Rate Dtl   XF) ('POO5XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Inventory_Trans_ID);
  PARAMETER(DB1.Inventory_Trans_Type);
  PARAMETER(DB1.Transaction_Date_Code);
  PARAMETER(DB1.Sequence_Number);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.UOM_Transaction);
  PARAMETER(DB1.Item_Transaction_Source);
  PARAMETER(DB1.Description);
  PARAMETER(DB1.Transaction_Quantity);
  PARAMETER(DB1.Transaction_Weight);
  PARAMETER(DB1.USR_Transaction_Unit_Cost);
  PARAMETER(DB1.UOM_Cost);
  PARAMETER(DB1.Extended_Amount);
  PARAMETER(DB1.Ticket_Number);
  PARAMETER(DB1.GL_Document_Number);
  PARAMETER(DB1.GL_Update_Status);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Reference_Number_Code);
  PARAMETER(DB1.Lot_ID);
  PARAMETER(DB1.Transfer_Batch_Number);
  PARAMETER(DB1.Transfer_Batch_Sequence);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(DB1.Employee_Badge_Number);
  PARAMETER(DB1.Production_Time);
  PARAMETER(DB1.Shift_Number);
  PARAMETER(DB1.Label_Date);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.Job_Date);

 }

 //?** This creates or updates Item Balance Detail
 EXECUTE FUNCTION(CHG Value/Qty/Wgt      CH) TYPE(CHGOBJ) FILE(CAB1REP)          AC1413368;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Conversion_Factor_1);
 PARAMETER(PAR.Operation_Factor_1);
 PARAMETER(PAR.UOM_Second);
 PARAMETER(PAR.Conversion_Factor_2);
 PARAMETER(PAR.Operation_Factor_2);
 PARAMETER(PAR.UOM_Third);
 PARAMETER(PAR.Production_Date_Control);
 PARAMETER(PAR.Catch_Weight_Status);
 PARAMETER(PAR.Inventory_Trans_ID);
 PARAMETER(PAR.Inventory_Trans_Type);
 PARAMETER(PAR.Transaction_Date_Code);
 PARAMETER(PAR.UOM_Transaction);
 PARAMETER(PAR.Quantity_based_on_U_M1_S);
 PARAMETER(PAR.USR_Transaction_Weight);
 PARAMETER(PAR.Unit_Cost_Per_Pound);
 PARAMETER(PAR.UOM_Cost);
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.Label_Date);
 {
  //?USER: Processing before Data read

  // PAR.Shift Number = CON.1
  PAR.Shift_Number = 1;

  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt Item Bal. Detail   CR) TYPE(CRTOBJ) FILE(CAB1REP)          AC1120962;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Transaction_Weight);
  PARAMETER(PAR.Transaction_Quantity);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('N');
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Extended_Amount);
  PARAMETER(PAR.Label_Date_USR);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER('A');
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // Call program RTV System Date/Time   UP.
   CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
   PARAMETER(DB1.Job_Date);
   PARAMETER(DB1.Job_Time);

  }

  //?USER: Processing before Data update

  // PGM.*Record Data Changed = CND.*YES
  PGM.*Record_Data_Changed = 'Y';

  // DB1.Quantity on Hand - U/M1 = DB1.Quantity on Hand - U/M1 + PAR.Transaction Quan
  DB1.Quantity_on_Hand_UOM1 = DB1.Quantity_on_Hand_UOM1 + PAR.Transaction_Quantity;

  // DB1.Quantity on Hand - Weight = DB1.Quantity on Hand - Weight + PAR.Transaction
  DB1.Quantity_on_Hand_Weight = DB1.Quantity_on_Hand_Weight + PAR.Transaction_Weight;

  // DB1.Value of On Hand Inventor = DB1.Value of On Hand Inventor + PAR.Extended Amo
  DB1.Value_of_On_Hand_Inventor = DB1.Value_of_On_Hand_Inventor + PAR.Extended_Amount;

  //?If quantity is zero, so are weight, value of inventory
  CASE;

  // IF DB1.Quantity on Hand - U/M1 EQ WRK.ZERO
  IF DB1.Quantity_on_Hand_UOM1 = WRK.ZERO;

  // Call program UPD Create Weight Adj. XF.
  CALL PROGRAM(UPD Create Weight Adj. XF) ('PDMYXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Transaction_Date_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER(PAR.UOM_Transaction);
  PARAMETER(DB1.Quantity_on_Hand_Weight);
  PARAMETER(PAR.USR_Transaction_Unit_Cost);
  PARAMETER(PAR.UOM_Cost);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(PAR.Shift_Number);
  PARAMETER(DB1.Label_Date);

  // DB1.Quantity on Hand - Weight = CON.*ZERO
  DB1.Quantity_on_Hand_Weight = *ZERO;

  // DB1.Value of On Hand Inventor = CON.*ZERO
  DB1.Value_of_On_Hand_Inventor = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program RTV System Date/Time   UP.
  CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
  PARAMETER(DB1.Job_Date);
  PARAMETER(DB1.Job_Time);

  //?USER: Processing after Data update

  CASE;

  // IF DB1.Quantity on Hand - U/M1 EQ WRK.ZERO
  IF DB1.Quantity_on_Hand_UOM1 = WRK.ZERO;

  EXECUTE FUNCTION(Rtv Lot Tracking Flag RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1506123;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Lot_Tracking_Flag);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.Lot Tracking Flag is Not Yes
  IF PAR.Lot_Tracking_Flag = *BLANK/'N';

  EXECUTE FUNCTION(DLT Item Bal. Detail   DL) TYPE(DLTOBJ) FILE(CAB1REP)          AC1120964;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Production_Date);
  ENDIF;

  ENDIF;

 }

 //?11/25/09 PKD Comment out until we know what we need to do here.
 EXECUTE FUNCTION(RTV Sum Act Qty,Wgt,ValRT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1402850;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.On_Hand_Weight_Summary);
 PARAMETER(PAR.On_Hand_UOM1_Summary);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(PAR.Value_of_On_Hand_Inventor);
 {
  //?USER: Initialize routine

  // PAR.Quantity on Hand - Weight = CON.*ZERO
  PAR.Quantity_on_Hand_Weight = *ZERO;

  // PAR.Quantity on Hand - U/M1 = CON.*ZERO
  PAR.Quantity_on_Hand_UOM1 = *ZERO;

  // PAR.Quantity on Hand - U/M2 = CON.*ZERO
  PAR.Quantity_on_Hand_UOM2 = *ZERO;

  // PAR.Quantity on Hand - U/M3 = CON.*ZERO
  PAR.Quantity_on_Hand_UOM3 = *ZERO;

  // PAR.Value of On Hand Inventor = CON.*ZERO
  PAR.Value_of_On_Hand_Inventor = *ZERO;

  //?USER: Process Data record

  // PAR.Quantity on Hand - Weight = PAR.Quantity on Hand - Weight + DB1.Quantity on
  PAR.Quantity_on_Hand_Weight = PAR.Quantity_on_Hand_Weight + DB1.Quantity_on_Hand_Weight;

  // PAR.Quantity on Hand - U/M1 = PAR.Quantity on Hand - U/M1 + DB1.Quantity on Hand
  PAR.Quantity_on_Hand_UOM1 = PAR.Quantity_on_Hand_UOM1 + DB1.Quantity_on_Hand_UOM1;

  // PAR.Quantity on Hand - U/M2 = PAR.Quantity on Hand - U/M2 + DB1.Quantity on Hand
  PAR.Quantity_on_Hand_UOM2 = PAR.Quantity_on_Hand_UOM2 + DB1.Quantity_on_Hand_UOM2;

  // PAR.Quantity on Hand - U/M3 = PAR.Quantity on Hand - U/M3 + DB1.Quantity on Hand
  PAR.Quantity_on_Hand_UOM3 = PAR.Quantity_on_Hand_UOM3 + DB1.Quantity_on_Hand_UOM3;

  // PAR.Value of On Hand Inventor = PAR.Value of On Hand Inventor + DB1.Value of On
  PAR.Value_of_On_Hand_Inventor = PAR.Value_of_On_Hand_Inventor
  + DB1.Value_of_On_Hand_Inventor;

 }

 EXECUTE FUNCTION(Chg Val/Qty/Wgt        Ch) TYPE(CHGOBJ) FILE(CAB0REP)          AC1129181;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.On_Hand_Weight_Summary);
 PARAMETER(PAR.On_Hand_UOM1_Summary);
 PARAMETER(PAR.Value_of_On_Hand_Inventor);
 {
  //?USER: Processing before Data update

  // PGM.*Record Data Changed = CND.*YES
  PGM.*Record_Data_Changed = 'Y';

  //?Refresh the available to sell quantity
  // DB1.Quantity Avail. to Sell = DB1.On Hand U/M1 Summary
  DB1.Quantity_Avail_To_Sell = DB1.On_Hand_UOM1_Summary;

  // DB1.Quantity Avail. to Sell = DB1.Quantity Avail. to Sell - DB1.Quantity on Sale
  DB1.Quantity_Avail_To_Sell = DB1.Quantity_Avail_To_Sell - DB1.Quantity_on_Sales_Order;

  // DB1.Quantity Avail. to Sell = DB1.Quantity Avail. to Sell - DB1.Quantity on Purc
  DB1.Quantity_Avail_To_Sell = DB1.Quantity_Avail_To_Sell - DB1.Quantity_on_Purch_Order;

  // DB1.Quantity Avail. to Sell = DB1.Quantity Avail. to Sell - DB1.Quantity on Tran
  DB1.Quantity_Avail_To_Sell = DB1.Quantity_Avail_To_Sell - DB1.Quantity_on_Transfer;

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?** Process Auto-Locate Whse inventory             FP1127
 EXECUTE FUNCTION(RTV Warehouse Info     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1910512;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(NLL.Warehouse_Description);
 PARAMETER(NLL.Address_Line_1);
 PARAMETER(NLL.Address_Line_2);
 PARAMETER(NLL.Address_Line_3);
 PARAMETER(NLL.City);
 PARAMETER(NLL.Zip_Postal_Code);
 PARAMETER(NLL.Production_Warehouse_Code);
 PARAMETER(NLL.State_Code);
 PARAMETER(LCL.Lot_Tracking_Flag);
 PARAMETER(NLL.Default_Printer);
 PARAMETER(NLL.Warehouse_Type);
 PARAMETER(NLL.Trans_Contol_AS400_Plant);
 PARAMETER(LCL.Warehouse_Location);
 PARAMETER(NLL.Warehouse_Std_Chill_Time);
 PARAMETER(NLL.Warehouse_Chill_Time);
 PARAMETER(NLL.Include_in_Auto_Pre_Pick);
 PARAMETER(NLL.Default_Manifest_Copies);
 PARAMETER(NLL.Default_Load_Sequence);
 PARAMETER(NLL.WHS_Slotting_Limit_Type);
 PARAMETER(NLL.Shipping_Company);
 PARAMETER(NLL.Accounting_Company);
 PARAMETER(NLL.WHS_Sched_Prod_Max_Days);
 PARAMETER(NLL.WHS_Inventory_Chill_Time);
 PARAMETER(NLL.Parent_Warehouse);
 PARAMETER(NLL.Default_Shipping_Whs);
 PARAMETER(LCL.WHS_Live_with_Carlisle);
 PARAMETER(NLL.WHS_PFS_Interface);
 PARAMETER(NLL.WHS_Req_Meter_Reading_Shp);
 PARAMETER(NLL.WHS_Default_Load_Type);
 PARAMETER(NLL.WHS_TMS_Planning_Region);
 PARAMETER(NLL.Default_Carrier_Code);
 PARAMETER(NLL.Inventory_Logic_Version);
 PARAMETER(NLL.WHS_Auto_Inv_Restoration);
 PARAMETER(NLL.EDI_Status_1);
 PARAMETER(NLL.EDI_Status_2);
 PARAMETER(NLL.EDI_Status_3);
 PARAMETER(NLL.Record_Status);
 PARAMETER(NLL.Job_Time);
 PARAMETER(NLL.User_Id);
 PARAMETER(NLL.Job_Name);
 PARAMETER(NLL.Job_Date);
 {
  //?USER: Initialize routine

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Record selected = CND.*YES
  PGM.*Record_selected = 'Y';

 }

 //?** Process lot tracking if External, not Carlisle, Lot trk=Y
 CASE;

 // IF LCL.Warehouse Location is External
 IF LCL.Warehouse_Location = 'E';

 // AND LCL.WHS Live w/Carlisle is *No/Blank
 AND LCL.WHS_Live_with_Carlisle = *BLANK/'N';

 // AND LCL.Lot Tracking Flag is yes
 AND LCL.Lot_Tracking_Flag = 'Y';

 //?** For External whses: level=0, lot=last 5 digits of Load ID (optional)
 EXECUTE FUNCTION(RTV Whse Location Info RT) TYPE(RTVOBJ) FILE(PDL2REP)          AC1910914;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.Location_Code);
 PARAMETER(LCL.Location_Aisle);
 PARAMETER(LCL.Location_Bay);
 PARAMETER(LCL.Loc_Unused_Chill_Time);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 // LCL.Order Type - Sales = CND.Not Entered
 LCL.Order_Type_Sales = *BLANK;

 EXECUTE FUNCTION(RTV Order Type         RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1564834;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.Order_Type_Sales);
 {
  //?USER: Process Data record

  // PAR.Order Type - Sales = DB1.Order Type - Sales
  PAR.Order_Type_Sales = DB1.Order_Type_Sales;

  QUIT;

 }

 //?** Upd/add lot info if Transfer, or Issue, but not for shipped orders
 CASE;

 // IF LCL.Order Type - Sales is Not Regular Order
 IF LCL.Order_Type_Sales <> 'OR';

 // OR PAR.Order Number is Equal to zeros
 OR PAR.Order_Number = *ZERO;

 // Call program UPD Auto-Loc TR Ord ItmXF.
 CALL PROGRAM(UPD Auto-Loc TR Ord ItmXF) ('PMBVXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Lot_Number);
 PARAMETER(WRK.Location_Code);
 PARAMETER(WRK.Location_Level);
 PARAMETER(PAR.Quantity_Total_S);
 PARAMETER(PAR.Order_Number);

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?**************************************************************************
 //?09/27/24 DN SR20410-Commented Out & Moved Below.
 //?09/27/24 DN SR20410-Commented Out & Moved Below.
 //?09/27/24 DN SR20410-Only Call if NOT from PDLYXFR Program.
 CASE;

 // IF NOT PAR.Called From Program is UPD Backin Spec'l Adj  XF
 IF ! PAR.Called_From_Program = 'PDLYXFR';

 //?08/10/23 DN WI517-Call WIM API if Live or Parallel.
 CASE;

 // IF LCL.Module Release Status is Is Live
 IF LCL.Module_Release_Status = 'Y';

 // OR LCL.Module Release Status is Parallel
 OR LCL.Module_Release_Status = 'P';

 // PAR.API was Called? U = CND.Yes
 PAR.API_was_Called_U = 'Y';

 // LCL.API EccResult-MsgId U = CON.*BLANK
 LCL.API_EccResult_MsgId_U = *BLANK;

 // LCL.API EccResult-MsgDesc U = CON.*BLANK
 LCL.API_EccResult_MsgDesc_U = *BLANK;

 // LCL.API Request Key U = CON.*BLANK
 LCL.API_Request_Key_U = *BLANK;

 // LCL.API Name = CONCAT(CON.wim.ordershipping.invento,CON.ry,CON.*ZERO)
 LCL.API_Name = 'wim.ordershipping.invento' + 'ry' (*ZERO);

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1510877;
 PARAMETER('APIWAITTME');
 PARAMETER(LCL.API_Wait_Time_U);
 {
  //?USER: Process Data record

  // PAR.System Value Numeric = DB1.System Value Numeric
  PAR.System_Value_Numeric = DB1.System_Value_Numeric;

  QUIT;

 }

 //?Call API Wrapper Program for wim.ordershipping.inventory API.
 //?1/6/24 DN SR08283-Added 'API Request Key U' & 'API Mode U' Parms.
 // Call program API WIM Inv Shipping   UP.
 CALL PROGRAM(API WIM Inv Shipping   UP) ('PVAYUPR');
 PARAMETER(LCL.API_Wait_Time_U);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Inventory_Trans_ID);
 PARAMETER(PAR.Inventory_Trans_Type);
 PARAMETER(PAR.Transaction_Date_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Transaction_Source);
 PARAMETER(PAR.Description);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Shift_Number);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Transaction_Weight);
 PARAMETER(PAR.Transaction_Quantity);
 PARAMETER(PAR.USR_Unship_Flag);
 PARAMETER('N');
 PARAMETER(LCL.API_EccResult_MsgId_U);
 PARAMETER(LCL.API_EccResult_MsgDesc_U);
 PARAMETER(LCL.API_Request_Key_U);
 PARAMETER(*SNDRCV);

 //?API Call Successful? If Not, Create Log & Send Email.
 CASE;

 // IF LCL.API EccResult-MsgId U is Success
 IF LCL.API_EccResult_MsgId_U = 'ECC0000';

 // OR LCL.API EccResult-MsgId U is Timeout
 OR LCL.API_EccResult_MsgId_U = 'TIMEOUT';

 // PAR.Inventory Updated USR = CND.Yes
 PAR.Inventory_Updated_USR = 'Y';

 //?01/06/24 DN SR08283-Create Log Record for Timeout Transaction.
 CASE;

 // IF LCL.API EccResult-MsgId U is Timeout
 IF LCL.API_EccResult_MsgId_U = 'TIMEOUT';

 // Call program Crt WIM API Failure LogXF.
 CALL PROGRAM(Crt WIM API Failure LogXF) ('PVA8XFR');
 PARAMETER(LCL.API_Name);
 PARAMETER(LCL.API_EccResult_MsgId_U);
 PARAMETER(LCL.API_EccResult_MsgDesc_U);
 PARAMETER(LCL.API_Request_Key_U);
 PARAMETER(PAR.Called_From_Program);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Inventory_Trans_ID);
 PARAMETER(PAR.Inventory_Trans_Type);
 PARAMETER(PAR.Transaction_Date_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Transaction_Source);
 PARAMETER(PAR.Description);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Shift_Number);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Transaction_Weight);
 PARAMETER(PAR.Transaction_Quantity);
 PARAMETER('N');
 PARAMETER('N');

 ENDIF;

 //?API Call Successful? If Not, Create Log & Send Email.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?12/21/23 DN SR07943-Added 'API EccResult-MsgId U is Entered' Cond.
 CASE;

 // IF LCL.API EccResult-MsgId U is Entered
 IF LCL.API_EccResult_MsgId_U <> *BLANK;

 // PAR.Inventory Updated USR = CND.No
 PAR.Inventory_Updated_USR = 'N';

 //?1/6/24 DN SR08283-Added 'API Request Key' as Input Parm.
 // Call program Crt WIM API Failure LogXF.
 CALL PROGRAM(Crt WIM API Failure LogXF) ('PVA8XFR');
 PARAMETER(LCL.API_Name);
 PARAMETER(LCL.API_EccResult_MsgId_U);
 PARAMETER(LCL.API_EccResult_MsgDesc_U);
 PARAMETER(LCL.API_Request_Key_U);
 PARAMETER(PAR.Called_From_Program);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Inventory_Trans_ID);
 PARAMETER(PAR.Inventory_Trans_Type);
 PARAMETER(PAR.Transaction_Date_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Transaction_Source);
 PARAMETER(PAR.Description);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Shift_Number);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Transaction_Weight);
 PARAMETER(PAR.Transaction_Quantity);
 PARAMETER('N');
 PARAMETER('N');

 //?Keep Track of Batch Processing Functions so Email will NOT be Sent Here.
 CASE;

 // IF PAR.Called From Program is Exc Proc 947 Whs InvAdjXF
 IF PAR.Called_From_Program = 'PUGDXFR';

 // OR PAR.Called From Program is EDT Confirm Ship Detl  DF
 OR PAR.Called_From_Program = 'PDL8DFR';

 // OR PAR.Called From Program is ADD Ready to Confirm  XL
 OR PAR.Called_From_Program = 'PNTKXFR';

 // OR PAR.Called From Program is Exc Upd EDI 945 Trsn   XF
 OR PAR.Called_From_Program = 'PUEJXFR';

 // OR PAR.Called From Program is PFS Reopen Order      XL
 OR PAR.Called_From_Program = 'PNTWXFR';

 // OR PAR.Called From Program is WW Unship Orders       DF
 OR PAR.Called_From_Program = 'PDMLDFR';

 // OR PAR.Called From Program is UPD Backin Spec'l Adj  XF
 OR PAR.Called_From_Program = 'PDLYXFR';

 //?Keep Track of Batch Processing Functions so Email will NOT be Sent Here.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Send Email to Business & IT.
 // Call program Prc Eml Shipping & IT  XF.
 CALL PROGRAM(Prc Eml Shipping & IT  XF) ('PVA9XFR');
 PARAMETER(PAR.Called_From_Program);

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?**************************************************************************
}


ENDIF;

