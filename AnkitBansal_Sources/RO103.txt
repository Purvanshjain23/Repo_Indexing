      *
      * SYSTEM:      Resource Optimization
      * PROGRAM:     RO103
      * TITLE:       Change Status of Resource Optimization Header
      * PROGRAMMER:  LeAnne Ramsey
      * CREATED:     11/13/07
      *
      *
      * FUNCTION: Uses an edit record format to change the status of a header.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 06/12/08  LeAnne Ramsey
      *           There are no input fields now. The user can only change to
      *           Preliminary status.
      *
      * 02/17/10  LeAnne Ramsey
      *           Recompile only. Two new fields were added to the Resource Optimization Header:
      *                Cap&Blade Allocation % for Special Trim
      *                Cap&Blade Allocation % for Regular Trim
      *
      * 03/08/12  LeAnne Ramsey (E1984)
      *           Recompile only.
      *           Added 6 new Skirt Meat Allocation Flag fields to ROP100.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATION
      ****************************************************************
      *
     frod103    cf   e             workstn infds(iofeed)
      *
      *
     fcaabrel1  if   e           k disk
      * Company name and address
      *
      *
     frol100a   uf   e           k disk
      * Resource optimazation header
      *
      /eject
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     d revise          c                   'REVISE'
     d yes             c                   'Y'
     d no              c                   'N'
     d set1            c                   'SET1  '
     d edit1           c                   'EDIT1 '
     d scrn1           c                   'SCRN1 '
     d exit            c                   'EXIT  '
     d update          c                   'UPDATE'
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     d mode            s              6
     d pgm             s             10
     d msgfl           s             10
     d routne          s              6
     d rtncd           s              2
     d action          s                   like(mode)
     d maxmsg          s              2  0 inz(20)
      *
      *
      * Workfields for date manipulation
      *
     D wkwedt          s              8  0
      *
      *
      * Parms
      *
     d xxwedt          s                   like(ohwedt)
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('ROMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     c                   eval      routne = set1
      *
     c     *inlr         doweq     *off
     c     routne        caseq     set1          $set1
     c     routne        caseq     scrn1         $scrn1
     c     routne        caseq     update        $upd1
     c     routne        caseq     exit          $exit
     c                   endcs
     c                   enddo
      /eject
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     c     $set1         begsr
      *
      * Mode is always REVISE in this function.
      *
     C     key01         chain(n)  rol100a                            92
     C                   if        *in92 = *on                                  If no hit
     C                   seton                                        62
     C                   if        error < maxmsg
     c                   add       1             error
     c                   eval      mgid(e) = 'RO09008'
     c                   endif
     C                   endif                                                  If no hit
      *
     c                   eval      routne = scrn1
      *
     c                   endsr
      /eject
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     c     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     c                   exsr      $wrmsg
      *
      * Write screen 1 to CRT
     c                   write     ro103k1
     c                   write     ro103ec
     c                   exfmt     ro103r1
      *
      * Clear messages
     c                   exsr      $clmsg
      *
      * Reset action to be equal to the incoming mode.
      *
     c                   eval      action = mode
      *
      * Get user's input and set routine
      *
     c                   select
     c                   when      *in03 = *on                                  F3-exit
     c                   eval      rtncd = '03'
     c                   eval      routne = exit
      *
     c                   when      *in09 = *on                                  F9-accept
     C                   exsr      $upd1
     C                   eval      routne = exit
     c                   other
      *
     c                   eval      routne = scrn1
     c                   endsl
      *
     c                   endsr
      /eject
      *----------------------------------------------------------------
      * Update record in database file
      *----------------------------------------------------------------
      *
     C     $upd1         begsr
      *
      * If user action is revising, determine that the record he is accessing still
      * exists prior to attempting the update. Lock the record for update.
      *
     C                   if        error = 0 and                                If OK
     C                             action = revise
      *
     C     key01         chain     rol100a                            92
     C                   if        *in92 = *on                                  If not found
     C                   seton                                        62
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'RO09008'
     C                   endif
     C                   endif                                                  If not found
     C                   endif                                                  If OK
      *
      * If there are no errors, revise record.
      * MOVE DSPF fields to database file fields
      *
     C                   if        error = 0                                    If no error
     C                   move      'P'           ohrcstcd
     C                   update    ohrec
     C                   endif                                                  If no error
      *
      * Always redisplay when:
      *     1) there are errors
      *
     C                   select
     C                   when      error > 0
     C                   movel     scrn1         routne
     C                   other
      *
     C                   eval      rtncd = '00'
     C                   movel     exit          routne
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Set on last record indicator and end job
      *----------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        lr
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm Lists
      *
     C     *entry        plist
     C     d1mode        parm                    mode
     C                   parm                    d1cono
     C                   parm                    d1wemdy
     C     wkwedt        parm                    xxwedt
     C                   parm                    rtncd
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    wkwedt
     C                   kfld                    d1cono
      *
      *
     C                   movel     mode          action
      *
      * Hardcode Company for now.
      *
     C                   z-add     360           d1cono
     C     d1cono        chain     caabrel1                           92
     C                   if        *in92 = *off
     C                   move      abadtx        d1conm
     C                   endif
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /eject
