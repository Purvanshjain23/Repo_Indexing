// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNKZSRR
// ?Date: 14.08.2025 Time: 03:45:26
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// Execute function SFL Fold/Drop  RPG    US.
EXECUTE FUNCTION(SFL Fold/Drop  RPG    US) TYPE(EXCUSRSRC) ('POBHUFU');
PARAMETER(12);
{
 ) find text=#SFLCTL
 ) insert
 A                                      SFLDROP(CF07)
 A* 07                                  SFLFOLD(CF07)
}


//?USER: Load subfile record from DBF record

//?SEL:  Shipto Customer/Customer Name
CASE;

// IF DB1.Ship To Customer Flag is No Use as Ship to Cust
IF DB1.Ship_To_Customer_Flag = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?SEL:  Shipto Customer/Customer Name
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Type Code by Cust  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1625687;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Type_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Select type code
CASE;

// IF CTL.Type Code NE WRK.Blank for 4           USR
IF CTL.Type_Code <> WRK.Blank_for_4_USR;

CASE;

// IF RCD.Type Code EQ CTL.Type Code
IF RCD.Type_Code = CTL.Type_Code;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** Allow both a GE and CT on Customer Name
//?Search on Customer name
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?** Search if customer name is not blanks
CASE;

// IF CTL.Customer Name is Not Blank
IF CTL.Customer_Name <> *BLANK;

//?** Change the input to ctl context and output to wrk context then
//?** pass the work field to the qclscan program. Then test the results
//?** of the qclscan search
// LCL.First Letter 1 USR = SUBSTRING(CTL.Customer Name,CON.1,CON.1)
LCL.First_Letter_1_USR = SUBSTRING(CTL.Customer_Name:1:1);

// Execute function CVT Str to Upper Alpha US.
EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
PARAMETER(CTL.Customer_Name);
PARAMETER(WRK.Case_Upper_Field);
{
 PDWEUFR:  PGM PARM(&STRIN &STROUT)

 CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
}


CASE;

// IF LCL.First Letter 1 USR is *
IF LCL.First_Letter_1_USR = *;

// Call program CLC Call Qclscan       UP.
CALL PROGRAM(CLC Call Qclscan       UP) ('QCLSCAN');
PARAMETER(RCD.Customer_Name);
PARAMETER(30);
PARAMETER(1);
PARAMETER(WRK.Case_Upper_Field);
PARAMETER(30);
PARAMETER(1);
PARAMETER(1);
PARAMETER(*);
PARAMETER(WRK.USR_Qclscan_Result);

CASE;

// IF WRK.USR Qclscan Result ? is Does contain
IF WRK.USR_Qclscan_Result > 0;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Execute function CVT Str to Upper Alpha US.
EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
PARAMETER(RCD.Customer_Name);
PARAMETER(RCD.USR_Name);
{
 PDWEUFR:  PGM PARM(&STRIN &STROUT)

 CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
}


CASE;

// IF RCD.USR Name LT WRK.Case Upper Field
IF RCD.USR_Name < WRK.Case_Upper_Field;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

// Execute function SFL Fold/Drop  RPG 2  US.
EXECUTE FUNCTION(SFL Fold/Drop  RPG 2  US) TYPE(EXCUSRSRC) ('POBKUFR');
{
 C     MODE          IFEQ      '0'
 C                   SETON                                        89
 C                   ELSE
 C                   SETOFF                                       89
 C                   ENDIF
}


CASE;

// IF PAR.Ship To Customer is not equal to zero
IF PAR.Ship_To_Customer <> *ZERO;

// PGM.*Scan limit = CND.9999999
PGM.*Scan_limit = 9999999;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Scan limit = CND.9999999
PGM.*Scan_limit = 9999999;

ENDIF;

EXECUTE FUNCTION(Val Comment Exists    RT) TYPE(RTVOBJ) FILE(POAVCPP)           AC1829319;
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(RCD.Comment_Sts_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Comment Sts USR = CND.Does Not Exist
 PAR.Comment_Sts_USR = 'D';

 //?USER: Process Data record

 // PAR.Comment Sts USR = CND.Exists
 PAR.Comment_Sts_USR = 'E';

 QUIT;

}


//?USER: Process subfile control

CASE;

// IF CTL.USR Name NE WRK.USR Name
IF CTL.USR_Name <> WRK.USR_Name;

// Execute function CVT Str to Upper Alpha US.
EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
PARAMETER(CTL.USR_Name);
PARAMETER(CTL.USR_Name);
{
 PDWEUFR:  PGM PARM(&STRIN &STROUT)

 CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
}


// WRK.USR Name = CTL.USR Name
WRK.USR_Name = CTL.USR_Name;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?** Type Code = Sls Chnl
CASE;

// IF CTL.Type Code NE LCL.Type Code
IF CTL.Type_Code <> LCL.Type_Code;

// LCL.Type Code = CTL.Type Code
LCL.Type_Code = CTL.Type_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process changed subfile record

CASE;

// IF RCD.*SFLSEL is *Select
IF RCD.*SFLSEL = '1'/'1';

MOVE *ALL (To: PAR From: RCD);

ENDIF;

CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

// Call program Dsp Customer Comment  DF.
CALL PROGRAM(Dsp Customer Comment  DF) ('PMH6DFR');
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(*MISSING);
PARAMETER(RCD.Customer_Name);

ENDIF;

//?USER: Process command keys

CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Type Code
IF PGM.*Cursor_field = CTL.Type_Code;

// Call program SEL Type Codes         SR.
CALL PROGRAM(SEL Type Codes         SR) ('CABVSRR');
PARAMETER(CTL.Type_Code);

ENDIF;

ENDIF;

