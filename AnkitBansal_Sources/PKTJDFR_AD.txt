// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKTJDFR
// ?Date: 14.08.2025 Time: 02:52:41
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//? 6/16/2021 JBB SDD619 - Repayments by Business User
//?               P17058   Add a block of code to check if the Plant
//?                        is performing a repayment when option 11
//?                        to rebalance a tattoo is taken.
//?11/02/2020 ISE H16853 - CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
//?E34858 JJH 07/24/18 - Valid Users for Opt 20=Reprocess EvalTranUpl
//?- Recompile so that *USER PorkISTesting List condition is accepted
//?  to pick up ISJULIUSH.
//?      Also, for subfile option 7, add Company Number as primary
//?7/19/2006 slm Add rules when the Pay with Historical Aver is allowed
//?          at this time only when grade type is not = Meat
//?E9815 JBB  3/29/17  Recompiled for change to Producer History files
//?      Restrict subfile option 15 by checking company values file
//?      for companies not excluded to Pay with Historical Average.
//?      Currently, only new company 961 will be excluded from option.
//?      Also, for subfile option 7, add Company Number as primary
//?      key to the call function.
//?E3635 JJH 12/03/14 Recomplied so that the Option 20 will allow
//? all authorized users on the PorkISTesting List condition to
//? run option.
ENDDO;

EXECUTE FUNCTION(HPE073) TYPE(EXCINTFUN)                                        AB1188852;
{
 //?Execute internal function

 //?NEW Balance to Kill Report
 //?  PKDUDTR -- WW Bal to kill
 //?  PKGMPFR -- Prt Report
}


EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

EXECUTE FUNCTION(Rtv Validation Rules  RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126427;
PARAMETER(LCL.Carcass_Dbw_Min);
PARAMETER(LCL.Carcass_Dbw_Max);
PARAMETER(LCL.Carcass_Lgt_Min);
PARAMETER(LCL.Carcass_Lgt_Max);
PARAMETER(LCL.Lean_High_Min);
PARAMETER(LCL.Lean_High_Max);
PARAMETER(LCL.Lean_Low_Min);
PARAMETER(LCL.Lean_Low_Max);
PARAMETER(LCL.High_Yield_Min);
PARAMETER(LCL.High_Yield_Max);
PARAMETER(LCL.Low_Yield_Min);
PARAMETER(LCL.Low_Yield_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.BackFat_High_Min);
PARAMETER(LCL.BackFat_High_Max);
PARAMETER(LCL.BackFat_Low_Min);
PARAMETER(LCL.Backfat_Low_Max);
PARAMETER(LCL.LoinEye_High_Min);
PARAMETER(LCL.LoinEye_High_Max);
PARAMETER(LCL.LoinEye_Low_Min);
PARAMETER(LCL.LoinEye_Low_Max);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.EV Validation Code is Carcass has Double Weight
 IF DB1.EV_Validation_Code = 'CDB';

 //?Carcass double weight
 // PAR.Carcass Dbw Min = DB1.EV Minimum
 PAR.Carcass_Dbw_Min = DB1.EV_Minimum;

 // PAR.Carcass Dbw Max = DB1.EV Maximum
 PAR.Carcass_Dbw_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Carcass is Light Weight
 IF DB1.EV_Validation_Code = 'CLT';

 //?Carcass light weight
 // PAR.Carcass Lgt Min = DB1.EV Minimum
 PAR.Carcass_Lgt_Min = DB1.EV_Minimum;

 // PAR.Carcass Lgt Max = DB1.EV Maximum
 PAR.Carcass_Lgt_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Backfat is high
 IF DB1.EV_Validation_Code = 'BHI';

 //?backfat is high
 // PAR.BackFat High Min = DB1.EV Minimum
 PAR.BackFat_High_Min = DB1.EV_Minimum;

 // PAR.BackFat High Max = DB1.EV Maximum
 PAR.BackFat_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Backfat is Low
 IF DB1.EV_Validation_Code = 'BLW';

 //?Backfat is low
 // PAR.BackFat Low Min = DB1.EV Minimum
 PAR.BackFat_Low_Min = DB1.EV_Minimum;

 // PAR.Backfat Low Max = DB1.EV Maximum
 PAR.Backfat_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Loineye is High
 IF DB1.EV_Validation_Code = 'LHI';

 //?loineye is high
 // PAR.LoinEye High Min = DB1.EV Minimum
 PAR.LoinEye_High_Min = DB1.EV_Minimum;

 // PAR.LoinEye High Max = DB1.EV Maximum
 PAR.LoinEye_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Loineye is Low
 IF DB1.EV_Validation_Code = 'LLW';

 //?loineye is low
 // PAR.LoinEye Low Min = DB1.EV Minimum
 PAR.LoinEye_Low_Min = DB1.EV_Minimum;

 // PAR.LoinEye Low Max = DB1.EV Maximum
 PAR.LoinEye_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Percent Lean is high
 IF DB1.EV_Validation_Code = 'PLH';

 //?% Lean High
 // PAR.%Lean High Min = DB1.EV Minimum
 PAR.Lean_High_Min = DB1.EV_Minimum;

 // PAR.%Lean High Max = DB1.EV Maximum
 PAR.Lean_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Percent Lean is Low
 IF DB1.EV_Validation_Code = 'PLL';

 //?% Lean Low
 // PAR.%Lean Low Min = DB1.EV Minimum
 PAR.Lean_Low_Min = DB1.EV_Minimum;

 // PAR.%Lean Low Max = DB1.EV Maximum
 PAR.Lean_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is #Head is < % Allowed
 IF DB1.EV_Validation_Code = 'HLP';

 //?Head < Percent
 // PAR.Head < Percent Min = DB1.EV Minimum
 PAR.Head_Percent_Min = DB1.EV_Minimum;

 // PAR.Head < Percent Max = DB1.EV Maximum
 PAR.Head_Percent_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is #Head is > % Allowed
 IF DB1.EV_Validation_Code = 'HHP';

 //?Head > Percent
 // PAR.Head > Percent Min = DB1.EV Minimum
 PAR.Head_Percent_Min = DB1.EV_Minimum;

 // PAR.Head > Percent Max = DB1.EV Maximum
 PAR.Head_Percent_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Yield Amount is High
 IF DB1.EV_Validation_Code = 'YHI';

 //?Yield High
 // PAR.High Yield Min = DB1.EV Minimum
 PAR.High_Yield_Min = DB1.EV_Minimum;

 // PAR.High Yield Max = DB1.EV Maximum
 PAR.High_Yield_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Yield Amount is Low
 IF DB1.EV_Validation_Code = 'YLW';

 //?Yield Low
 // PAR.Low Yield Min = DB1.EV Minimum
 PAR.Low_Yield_Min = DB1.EV_Minimum;

 // PAR.Low Yield Max = DB1.EV Maximum
 PAR.Low_Yield_Max = DB1.EV_Maximum;

 ENDIF;

}


// LCL.Held Over Records Y/N = CND.No
LCL.Held_Over_Records_Y_N = 'N';

//?USER: Initialize subfile control

CASE;

// IF WRK.First Time Flag Usr EQ WRK.Blank USR
IF WRK.First_Time_Flag_Usr = WRK.Blank_USR;

// CTL.TH Schedule Kill Shift = CND.Shift 1
CTL.TH_Schedule_Kill_Shift = 1;

// CTL.BOH Company Number = WRK.CC Company Number
CTL.BOH_Company_Number = WRK.CC_Company_Number;

// CTL.CC Company Number = CTL.BOH Company Number
CTL.CC_Company_Number = CTL.BOH_Company_Number;

// CTL.TH Kill Balancing Sts = CND.Error
CTL.TH_Kill_Balancing_Sts = 'E';

// WRK.Display Print Prompt  Usr = CND.Prompt is to be displayed
WRK.Display_Print_Prompt_Usr = 'Y';

// WRK.First Time Flag Usr = CND.Yes
WRK.First_Time_Flag_Usr = 'Y';

// PAR.PRT Night Queue Run Sts = CND.No
PAR.PRT_Night_Queue_Run_Sts = 'N';

ENDIF;

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.Oms_Name);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


// LCL.Company Value Code    USR = CND.HPE Receiving Prc Type
LCL.Company_Value_Code_USR = 'HPERCVBTH';

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(LCL.Company_Value_Code_USR);
PARAMETER(LCL.HPERCVTYPE_Alpha_Usr);

CASE;

// IF CTL.TH Kill Date EQ WRK.Zero USR
IF CTL.TH_Kill_Date = WRK.Zero_USR;

EXECUTE FUNCTION(RTV Payment Prc        RT) TYPE(RTVOBJ) FILE(PKC4REP)          AB1146809;
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER(LCL.Pmt_Current_Payment_Step);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?USER: Initialize subfile record from DBF record

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

//?only for specify kill date
CASE;

// IF DB1.TH Kill Date EQ CTL.TH Kill Date
IF DB1.TH_Kill_Date = CTL.TH_Kill_Date;

//?only for specify kill date
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?ONLY FOR SELECTED BALANCE OR ERROR RECORD, OR ALL
CASE;

// IF DB1.TH Kill Balancing Sts EQ CTL.TH Kill Balancing Sts
IF DB1.TH_Kill_Balancing_Sts = CTL.TH_Kill_Balancing_Sts;

//?ONLY FOR SELECTED BALANCE OR ERROR RECORD, OR ALL
// IF CTL.TH Kill Balancing Sts EQ WRK.Blank Usr 1 fld Usr
IF CTL.TH_Kill_Balancing_Sts = WRK.Blank_Usr_1_fld_Usr;

//?ONLY FOR SELECTED BALANCE OR ERROR RECORD, OR ALL
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?OMT:  Hog Class Type = Resale
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?Only select Market, or subject
//?Do not select any resale hogs,
//?No resale hogs
CASE;

// IF DB1.TH Hog Class Type is Resale
IF DB1.TH_Hog_Class_Type = 'R';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Reverse Image Tattoo
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?Check if there are any error for this tattoo, If so this routine
//?will check which error and flag field in reverse image.
EXECUTE FUNCTION(RTV Check for Error   RT) TYPE(RTVOBJ) FILE(PKB6CPP)           AB1111032;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(999999);
PARAMETER('H');
PARAMETER(RCD.Error_Type_1_Usr);
PARAMETER(RCD.Error_Type_2_Usr);
PARAMETER(RCD.Error_Type_3_Usr);
PARAMETER(RCD.Error_Type_4_Usr);
PARAMETER(RCD.Error_Type_5_Usr);
PARAMETER(WRK.Error_Type_Found);
PARAMETER(WRK.Error_Type_6_Usr);
PARAMETER(WRK.Error_Type_7_Usr);
{
 //?USER: Initialize routine

 // PAR.Error Type 1 Usr = CND.No
 PAR.Error_Type_1_Usr = 'N';

 // PAR.Error Type 2 Usr = CND.No
 PAR.Error_Type_2_Usr = 'N';

 // PAR.Error Type 3 Usr = CND.No
 PAR.Error_Type_3_Usr = 'N';

 // PAR.Error Type 4 Usr = CND.No
 PAR.Error_Type_4_Usr = 'N';

 // PAR.Error Type 5 Usr = CND.No
 PAR.Error_Type_5_Usr = 'N';

 // PAR.Error Type Found = CND.No
 PAR.Error_Type_Found = 'N';

 // PAR.Error Type 6 Usr = CND.No
 PAR.Error_Type_6_Usr = 'N';

 // PAR.Error Type 7 Usr = CND.No
 PAR.Error_Type_7_Usr = 'N';

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Eval Val Error    RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1111051;
 PARAMETER(DB1.KV_Error_Code);
 PARAMETER(WRK.EV_Description);
 PARAMETER(WRK.EV_Minimum);
 PARAMETER(WRK.EV_Maximum);
 PARAMETER(WRK.EV_Type);
 {
  //?USER: Processing if Data record not found

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.EV_Description = *BLANK;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.EV_Minimum = *ZERO;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.EV_Maximum = *ZERO;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.EV_Type = *BLANK;

  QUIT;

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?Check for Type of Error to Send back Flag
 CASE;

 // IF WRK.EV Type is Carcass Weights
 IF WRK.EV_Type = 'C';

 // PAR.Error Type 1 Usr = CND.Critical Error
 PAR.Error_Type_1_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 //?Check for Type of Error to Send back Flag
 // IF WRK.EV Type is % Rule for Head Killed
 IF WRK.EV_Type = 'P';

 // PAR.Error Type 5 Usr = CND.Critical Error
 PAR.Error_Type_5_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 //?Check for Type of Error to Send back Flag
 // IF WRK.EV Type is % Lean
 IF WRK.EV_Type = 'L';

 // PAR.Error Type 2 Usr = CND.Critical Error
 PAR.Error_Type_2_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 //?Check for Type of Error to Send back Flag
 // IF WRK.EV Type is Yield
 IF WRK.EV_Type = 'Y';

 // OR DB1.KV Error Code is Yield Parameter Error
 OR DB1.KV_Error_Code = 'YLD';

 // PAR.Error Type 3 Usr = CND.Critical Error
 PAR.Error_Type_3_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 //?Check for Type of Error to Send back Flag
 // IF WRK.EV Type is Missing Transaction
 IF WRK.EV_Type = 'B';

 // PAR.Error Type 4 Usr = CND.Critical Error
 PAR.Error_Type_4_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 //?Check for Type of Error to Send back Flag
 // IF WRK.EV Type is Backfat
 IF WRK.EV_Type = 'F';

 // PAR.Error Type 6 Usr = CND.Critical Error
 PAR.Error_Type_6_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 //?Check for Type of Error to Send back Flag
 // IF WRK.EV Type is Loin Eye
 IF WRK.EV_Type = 'E';

 // PAR.Error Type 7 Usr = CND.Critical Error
 PAR.Error_Type_7_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 ENDIF;

}


CASE;

// IF RCD.Net Head Usr NE RCD.TH Head Killed
IF RCD.Net_Head_Usr <> RCD.TH_Head_Killed;

// RCD.Error Type 5 Usr = CND.Critical Error
RCD.Error_Type_5_Usr = 'Y';

ENDIF;

ENDIF;

CASE;

// IF DB1.TH Recalc Live Wgt is Greater than 0
IF DB1.TH_Recalc_Live_Wgt > *ZERO;

// RCD.Status 1 = CND.Yes
RCD.Status_1 = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Status 1 = CND.No
RCD.Status_1 = 'N';

ENDIF;

CASE;

// IF LCL.Held Over Records Y/N is Yes
IF LCL.Held_Over_Records_Y_N = 'Y';

CASE;

// IF RCD.TH Held Over is greater than 0
IF RCD.TH_Held_Over > *ZERO;

// OR RCD.TH Held Over Record is Yes
OR RCD.TH_Held_Over_Record = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

CASE;

// IF CTL.*CMD key is Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

CASE;

// IF CTL.*CMD key is CF08
IF CTL.*CMD_key = '08';

CASE;

// IF LCL.Held Over Records Y/N is Yes
IF LCL.Held_Over_Records_Y_N = 'Y';

// LCL.Held Over Records Y/N = CND.No
LCL.Held_Over_Records_Y_N = 'N';

// IF LCL.Held Over Records Y/N is No
IF LCL.Held_Over_Records_Y_N = 'N';

// LCL.Held Over Records Y/N = CND.Yes
LCL.Held_Over_Records_Y_N = 'Y';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.Oms_Name);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


CASE;

// IF CTL.TH Kill Date EQ WRK.Zero USR
IF CTL.TH_Kill_Date = WRK.Zero_USR;

// CTL.TH Kill Date = JOB.*Job date
CTL.TH_Kill_Date = JOB.*Job_date;

ENDIF;

//?F21-Print Bal to Kill Report
CASE;

// IF CTL.*CMD key is Print List
IF CTL.*CMD_key = '21';

// Call program Pmt Print Options     XF.
CALL PROGRAM(Pmt Print Options     XF) ('PDG0PVR');
PARAMETER('Print Balance to Kill');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('P/S');

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// WRK.Date Alpha USR = CVTVAR(CTL.TH Kill Date)
WRK.Date_Alpha_USR = CVTVAR(CTL.TH_Kill_Date);

// Execute command - 'SBM Prt Balance to Kill Report'
EXECUTE COMMAND(PRK0686);
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(WRK.Date_Alpha_USR);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(CTL.TH_Schedule_Kill_Shift);

ENDIF;

ENDIF;

//?CALC: Subfile record function fields

//?Get Producer name
//?Calculate Net Head
// RCD.Net Head Usr = RCD.TH Head Received - RCD.TH Yard Deads
RCD.Net_Head_Usr = RCD.TH_Head_Received - RCD.TH_Yard_Deads;

// RCD.Net Head Usr = RCD.Net Head Usr - RCD.TH Head Condemned
RCD.Net_Head_Usr = RCD.Net_Head_Usr - RCD.TH_Head_Condemned;

//?USER: Process subfile record (Pre-confirm)

// WRK.Requested by User to Bal = CND.No
WRK.Requested_by_User_to_Bal = 'N';

//?Subfile selection User
CASE;

// IF RCD.*SFLSEL NE WRK.Blank USR
IF RCD.*SFLSEL <> WRK.Blank_USR;

//?E9815 JBB  3/29/17  Check if company excluded from subfile option.
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER('XCOPAYHIST');
PARAMETER(LCL.Exclude_Flag);

//?Valid Option
CASE;

// IF RCD.*SFLSEL is WW Evaluation
IF RCD.*SFLSEL = '5'/'5';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// WRK.ET Tattoo Number = CVTVAR(RCD.TH Tattoo Number)
WRK.ET_Tattoo_Number = CVTVAR(RCD.TH_Tattoo_Number);

// Call program WW Eval Tran Dsp Only DF.
CALL PROGRAM(WW Eval Tran Dsp Only DF) ('PKTKDFR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TH_Purchase_Date);
PARAMETER(RCD.TH_Group_Reference);
PARAMETER(RCD.TH_Live_Purchase_UOM);
PARAMETER(RCD.TH_Live_Purchase_Price);
PARAMETER(RCD.TH_Resale_UOM);
PARAMETER(RCD.TH_Recalc_Live_Wgt_Yld);
PARAMETER(RCD.TH_Pricing_Date);
PARAMETER(RCD.TH_Resale_Spread_Sts);
PARAMETER(RCD.TH_Dead_On_Arrival);
PARAMETER(RCD.TH_Head_Received);
PARAMETER(RCD.TH_Yard_Deads);
PARAMETER(RCD.TH_Head_Condemned);
PARAMETER(RCD.TH_Head_Killed);
PARAMETER(RCD.TH_Head_Accepted);
PARAMETER(RCD.TH_Live_Wgt);
PARAMETER(RCD.TH_Hot_Wgt);
PARAMETER(RCD.TH_Tot_Loin_Eye_Depth);
PARAMETER(RCD.TH_Tot_Backfat_Inches);
PARAMETER(RCD.TH_Tot_Light_Reflectance);
PARAMETER(RCD.TH_Avg_Live_Wgt);
PARAMETER(RCD.TH_Avg_Hot_Wgt);
PARAMETER(RCD.TH_Avg_Light_Reflectance);
PARAMETER(RCD.TH_Avg_Lean_Percent);
PARAMETER(RCD.TH_Avg_Loin_Eye_Depth);
PARAMETER(RCD.TH_Avg_Backfat);
PARAMETER(RCD.TH_Std_Yield_Percent);
PARAMETER(RCD.TH_Actual_Yield);
PARAMETER(RCD.TH_Adj_Actual_Yield);
PARAMETER(RCD.TH_Yield_Difference);
PARAMETER(RCD.TH_Recalc_Live_Wgt);
PARAMETER(RCD.TH_CM_Base_Mkt_Price);
PARAMETER(RCD.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(RCD.TH_CM_Sort_Discount_Amt);
PARAMETER(RCD.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(RCD.TH_CM_Base_Carcass_Value);
PARAMETER(RCD.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(RCD.TH_CM_Carcass_Gross_Amt);
PARAMETER(RCD.TH_Deduction_Amt);
PARAMETER(RCD.TH_Payment_Sts);
PARAMETER(RCD.TH_Header_Error_Sts);
PARAMETER(RCD.TH_Detail_Error_Sts);
PARAMETER(RCD.TH_Kill_Balancing_Sts);
PARAMETER(RCD.TH_Bal_to_Kill_Gen);
PARAMETER(RCD.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(RCD.TH_Schedule_Kill_Shift);
PARAMETER(RCD.TH_Avg_Lean_EXC_ADD);
PARAMETER(RCD.TH_Head_Identified);
PARAMETER(RCD.TH_Percent_Identified);
PARAMETER(RCD.TH_Percent_Accepted);
PARAMETER(RCD.TH_PHA_Add_Type);
PARAMETER(RCD.TH_PHA_Average_Type);
PARAMETER(RCD.TH_PHA_Add_Reason);
PARAMETER(RCD.TH_Yld_Parm_Adj_Yield);
PARAMETER(RCD.DF_Defect_Code);
PARAMETER(RCD.THP_Process_Code);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
PARAMETER(RCD.GN_Genetic_Code);
PARAMETER(RCD.HC_Class_Code);
PARAMETER(RCD.Net_Head_Usr);
PARAMETER(PAR.Oms_System_Value_Alpha);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Valid Option
// IF RCD.*SFLSEL is *Option 7 request
IF RCD.*SFLSEL = '7'/'7';

//?display historical avg
// Call program Dsp Prcdr Histrcl Avg DF.
CALL PROGRAM(Dsp Prcdr Histrcl Avg DF) ('PKT0DFR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(PAR.Oms_System_Value_Alpha);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Valid Option
// IF RCD.*SFLSEL is Select Option 8
IF RCD.*SFLSEL = '8'/'8';

//?Display Error
// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// Call program Dsp Error             DF.
CALL PROGRAM(Dsp Error             DF) ('PKEUDFR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(*ZERO);
PARAMETER('H');

//?Valid Option
// IF RCD.*SFLSEL is *Option 10 (Reusable)
IF RCD.*SFLSEL = '10';

//?Display Loss Transactions
// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// Call program Dsp Loss Transactions DF.
CALL PROGRAM(Dsp Loss Transactions DF) ('PKT4DFR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TH_Purchase_Date);
PARAMETER(RCD.TH_Group_Reference);
PARAMETER(RCD.TH_Live_Purchase_UOM);
PARAMETER(RCD.TH_Live_Purchase_Price);
PARAMETER(RCD.TH_Resale_UOM);
PARAMETER(RCD.TH_Recalc_Live_Wgt_Yld);
PARAMETER(RCD.TH_Pricing_Date);
PARAMETER(RCD.TH_Resale_Spread_Sts);
PARAMETER(RCD.TH_Dead_On_Arrival);
PARAMETER(RCD.TH_Head_Received);
PARAMETER(RCD.TH_Yard_Deads);
PARAMETER(RCD.TH_Head_Condemned);
PARAMETER(RCD.TH_Head_Killed);
PARAMETER(RCD.TH_Live_Wgt);
PARAMETER(RCD.TH_Hot_Wgt);
PARAMETER(RCD.TH_Tot_Loin_Eye_Depth);
PARAMETER(RCD.TH_Tot_Backfat_Inches);
PARAMETER(RCD.TH_Tot_Light_Reflectance);
PARAMETER(RCD.TH_Std_Yield_Percent);
PARAMETER(RCD.TH_Actual_Yield);
PARAMETER(RCD.TH_CM_Base_Mkt_Price);
PARAMETER(RCD.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(RCD.TH_CM_Base_Carcass_Value);
PARAMETER(RCD.TH_CM_Carcass_Gross_Amt);
PARAMETER(RCD.TH_Deduction_Amt);
PARAMETER(RCD.TH_Carcass_Net_Amt);
PARAMETER(RCD.TH_Payment_Sts);
PARAMETER(RCD.TH_Kill_Balancing_Sts);
PARAMETER(RCD.TH_Schedule_Kill_Shift);
PARAMETER(RCD.DF_Defect_Code);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
PARAMETER(RCD.GN_Genetic_Code);
PARAMETER(RCD.HC_Class_Code);
PARAMETER(CTL.Oms_System_Value_Alpha);

//?Valid Option
// IF RCD.*SFLSEL is *Option 13 (Reusable)
IF RCD.*SFLSEL = '13';

//?Display Additional Tattoo Info
EXECUTE FUNCTION(Rtv Prdcr Name, Sts   RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1165413;
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(WRK.PD_Name);
PARAMETER(RCD.RS_Record_Status);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// Call program Dsp Add Tattoo Info   D1.
CALL PROGRAM(Dsp Add Tattoo Info   D1) ('PKRXD1R');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(WRK.PD_Name);

//?Valid Option
// IF RCD.*SFLSEL is *Option 14 (Resuable)
IF RCD.*SFLSEL = '14';

//?Edit Comments
// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// Call program Edt Tattoo Comment    EF.
CALL PROGRAM(Edt Tattoo Comment    EF) ('PKIVEFR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(LCL.THC_Comment_Type);
PARAMETER(CTL.Oms_System_Value_Alpha);

//?Valid Option
// IF RCD.*SFLSEL is Option 81
IF RCD.*SFLSEL = '81';

// AND JOB.*USER is Pork Test User
AND ( JOB.*USER = 'PRKTEST';

// OR JOB.*USER is Purva Patel
OR JOB.*USER = 'ISPPATE' );

EXECUTE FUNCTION(Rtv Validation Rules  RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126427;
PARAMETER(LCL.Carcass_Dbw_Min);
PARAMETER(LCL.Carcass_Dbw_Max);
PARAMETER(LCL.Carcass_Lgt_Min);
PARAMETER(LCL.Carcass_Lgt_Max);
PARAMETER(LCL.Lean_High_Min);
PARAMETER(LCL.Lean_High_Max);
PARAMETER(LCL.Lean_Low_Min);
PARAMETER(LCL.Lean_Low_Max);
PARAMETER(LCL.High_Yield_Min);
PARAMETER(LCL.High_Yield_Max);
PARAMETER(LCL.Low_Yield_Min);
PARAMETER(LCL.Low_Yield_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.BackFat_High_Min);
PARAMETER(LCL.BackFat_High_Max);
PARAMETER(LCL.BackFat_Low_Min);
PARAMETER(LCL.Backfat_Low_Max);
PARAMETER(LCL.LoinEye_High_Min);
PARAMETER(LCL.LoinEye_High_Max);
PARAMETER(LCL.LoinEye_Low_Min);
PARAMETER(LCL.LoinEye_Low_Max);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.EV Validation Code is Carcass has Double Weight
 IF DB1.EV_Validation_Code = 'CDB';

 //?Carcass double weight
 // PAR.Carcass Dbw Min = DB1.EV Minimum
 PAR.Carcass_Dbw_Min = DB1.EV_Minimum;

 // PAR.Carcass Dbw Max = DB1.EV Maximum
 PAR.Carcass_Dbw_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Carcass is Light Weight
 IF DB1.EV_Validation_Code = 'CLT';

 //?Carcass light weight
 // PAR.Carcass Lgt Min = DB1.EV Minimum
 PAR.Carcass_Lgt_Min = DB1.EV_Minimum;

 // PAR.Carcass Lgt Max = DB1.EV Maximum
 PAR.Carcass_Lgt_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Backfat is high
 IF DB1.EV_Validation_Code = 'BHI';

 //?backfat is high
 // PAR.BackFat High Min = DB1.EV Minimum
 PAR.BackFat_High_Min = DB1.EV_Minimum;

 // PAR.BackFat High Max = DB1.EV Maximum
 PAR.BackFat_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Backfat is Low
 IF DB1.EV_Validation_Code = 'BLW';

 //?Backfat is low
 // PAR.BackFat Low Min = DB1.EV Minimum
 PAR.BackFat_Low_Min = DB1.EV_Minimum;

 // PAR.Backfat Low Max = DB1.EV Maximum
 PAR.Backfat_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Loineye is High
 IF DB1.EV_Validation_Code = 'LHI';

 //?loineye is high
 // PAR.LoinEye High Min = DB1.EV Minimum
 PAR.LoinEye_High_Min = DB1.EV_Minimum;

 // PAR.LoinEye High Max = DB1.EV Maximum
 PAR.LoinEye_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Loineye is Low
 IF DB1.EV_Validation_Code = 'LLW';

 //?loineye is low
 // PAR.LoinEye Low Min = DB1.EV Minimum
 PAR.LoinEye_Low_Min = DB1.EV_Minimum;

 // PAR.LoinEye Low Max = DB1.EV Maximum
 PAR.LoinEye_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Percent Lean is high
 IF DB1.EV_Validation_Code = 'PLH';

 //?% Lean High
 // PAR.%Lean High Min = DB1.EV Minimum
 PAR.Lean_High_Min = DB1.EV_Minimum;

 // PAR.%Lean High Max = DB1.EV Maximum
 PAR.Lean_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Percent Lean is Low
 IF DB1.EV_Validation_Code = 'PLL';

 //?% Lean Low
 // PAR.%Lean Low Min = DB1.EV Minimum
 PAR.Lean_Low_Min = DB1.EV_Minimum;

 // PAR.%Lean Low Max = DB1.EV Maximum
 PAR.Lean_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is #Head is < % Allowed
 IF DB1.EV_Validation_Code = 'HLP';

 //?Head < Percent
 // PAR.Head < Percent Min = DB1.EV Minimum
 PAR.Head_Percent_Min = DB1.EV_Minimum;

 // PAR.Head < Percent Max = DB1.EV Maximum
 PAR.Head_Percent_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is #Head is > % Allowed
 IF DB1.EV_Validation_Code = 'HHP';

 //?Head > Percent
 // PAR.Head > Percent Min = DB1.EV Minimum
 PAR.Head_Percent_Min = DB1.EV_Minimum;

 // PAR.Head > Percent Max = DB1.EV Maximum
 PAR.Head_Percent_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Yield Amount is High
 IF DB1.EV_Validation_Code = 'YHI';

 //?Yield High
 // PAR.High Yield Min = DB1.EV Minimum
 PAR.High_Yield_Min = DB1.EV_Minimum;

 // PAR.High Yield Max = DB1.EV Maximum
 PAR.High_Yield_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Yield Amount is Low
 IF DB1.EV_Validation_Code = 'YLW';

 //?Yield Low
 // PAR.Low Yield Min = DB1.EV Minimum
 PAR.Low_Yield_Min = DB1.EV_Minimum;

 // PAR.Low Yield Max = DB1.EV Maximum
 PAR.Low_Yield_Max = DB1.EV_Maximum;

 ENDIF;

}


// Call program Bal/Val Tattoo        XF.
CALL PROGRAM(Bal/Val Tattoo        XF) ('PKAAXFR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TH_Purchase_Date);
PARAMETER(RCD.TH_Group_Reference);
PARAMETER(RCD.TH_Live_Purchase_UOM);
PARAMETER(RCD.TH_Live_Purchase_Price);
PARAMETER(RCD.TH_Live_Gross_Amt);
PARAMETER(RCD.TH_LIve_Net_Amt);
PARAMETER(RCD.TH_Resale_UOM);
PARAMETER(RCD.TH_Recalc_Live_Wgt_Yld);
PARAMETER(RCD.TH_Pricing_Date);
PARAMETER(RCD.TH_Resale_Spread_Sts);
PARAMETER(RCD.TH_Dead_On_Arrival);
PARAMETER(RCD.TH_Head_Received);
PARAMETER(RCD.TH_Yard_Deads);
PARAMETER(RCD.TH_Held_Over);
PARAMETER(RCD.TH_Head_Condemned);
PARAMETER(RCD.TH_Head_Killed);
PARAMETER(RCD.TH_Head_Adds);
PARAMETER(RCD.TH_Head_Accepted);
PARAMETER(RCD.TH_Live_Wgt);
PARAMETER(RCD.TH_Adj_Live_Wgt);
PARAMETER(RCD.TH_Hot_Wgt);
PARAMETER(RCD.TH_Tot_Loin_Eye_Depth);
PARAMETER(RCD.TH_Tot_Backfat_Inches);
PARAMETER(RCD.TH_Tot_Light_Reflectance);
PARAMETER(RCD.TH_Avg_Live_Wgt);
PARAMETER(RCD.TH_Avg_Hot_Wgt);
PARAMETER(RCD.TH_Avg_Light_Reflectance);
PARAMETER(RCD.TH_Avg_Lean_Percent);
PARAMETER(RCD.TH_Avg_Loin_Eye_Depth);
PARAMETER(RCD.TH_Avg_Backfat);
PARAMETER(RCD.TH_Std_Yield_Percent);
PARAMETER(RCD.TH_Actual_Yield);
PARAMETER(RCD.TH_Adj_Actual_Yield);
PARAMETER(RCD.TH_Yield_Difference);
PARAMETER(RCD.TH_Recalc_Live_Wgt);
PARAMETER(RCD.TH_CM_Market_Price);
PARAMETER(RCD.TH_CM_Base_Mkt_Price);
PARAMETER(RCD.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(RCD.TH_CM_Sort_Discount_Amt);
PARAMETER(RCD.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(RCD.TH_CM_Base_Carcass_Value);
PARAMETER(RCD.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(RCD.TH_CM_Carcass_Gross_Amt);
PARAMETER(RCD.TH_Deduction_Amt);
PARAMETER(RCD.TH_Total_Net_WO_Adds);
PARAMETER(RCD.TH_Carcass_Net_Amt);
PARAMETER(RCD.TH_Additions_Amt);
PARAMETER(RCD.TH_Payment_Gross);
PARAMETER(RCD.Th_Payment_Net_Amt);
PARAMETER(RCD.TH_AP_Voucher_Document#);
PARAMETER(RCD.TH_Freight_Amount);
PARAMETER(RCD.TH_Accrual_Amount);
PARAMETER(RCD.TH_Fixed_Cost_Amount);
PARAMETER(RCD.TH_Calc_Net_Sts);
PARAMETER(RCD.TH_Payment_Sts);
PARAMETER(RCD.TH_Bal_to_Kill_Gen);
PARAMETER(RCD.TH_Commission_A_P_Voucher);
PARAMETER(RCD.TH_Voucher_Payment_Date);
PARAMETER(RCD.TH_User_Error_Override);
PARAMETER(RCD.TH_Held_Over_Record);
PARAMETER(RCD.TH_Sex);
PARAMETER(RCD.TH_Held_Ovr_Completed_Dte);
PARAMETER(RCD.TH_Commission_Paid_Date);
PARAMETER(RCD.TH_Actual_Check_Date);
PARAMETER(RCD.TH_Shipped_Weight);
PARAMETER(RCD.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(RCD.TH_FFLI);
PARAMETER(RCD.TH_Kill_Product_Value);
PARAMETER(RCD.TH_Cut_Product_Value);
PARAMETER(RCD.TH_Render_Product_Value);
PARAMETER(RCD.TH_Head_Excluded);
PARAMETER(RCD.TH_CM_Bse_Mkt_Live_CWT);
PARAMETER(RCD.TH_CM_Bse_Mkt_Carc_CWT);
PARAMETER(RCD.TH_CM_Srt_Dsc_Live_CWT);
PARAMETER(RCD.TH_CM_Srt_Dsc_Carc_CWT);
PARAMETER(RCD.TH_CM_Yld_G_L_Live_CWT);
PARAMETER(RCD.TH_CM_Yld_G_L_Carc_CWT);
PARAMETER(RCD.TH_CM_Crc_Val_Live_CWT);
PARAMETER(RCD.TH_CM_Crc_Val_Carc_CWT);
PARAMETER(RCD.TH_CM_Lean_Prem_Live_CWT);
PARAMETER(RCD.TH_CM_Lean_Prem_Carc_CWT);
PARAMETER(RCD.TH_CM_Gross_Live_CWT);
PARAMETER(RCD.TH_CM_Gross_Carc_CWT);
PARAMETER(RCD.TH_Source_Type);
PARAMETER(RCD.TH_Scale_Ticket_Sts);
PARAMETER(RCD.TH_Payment_Type);
PARAMETER(RCD.TH_HPS_Movement_Ref_#);
PARAMETER(RCD.TH_Source_Code);
PARAMETER(RCD.TH_Hog_Class_Type);
PARAMETER(RCD.TH_Posted_to_HPS_Flag);
PARAMETER(RCD.TH_Schedule_Kill_Shift);
PARAMETER(RCD.TH_Shift_Held_Over);
PARAMETER(RCD.DF_Defect_Code);
PARAMETER(RCD.THP_Process_Code);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
PARAMETER(RCD.HB_Buyer_Code);
PARAMETER(RCD.GN_Genetic_Code);
PARAMETER(RCD.HC_Class_Code);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
PARAMETER(LCL.Carcass_Dbw_Min);
PARAMETER(LCL.Carcass_Dbw_Max);
PARAMETER(LCL.Carcass_Lgt_Min);
PARAMETER(LCL.Carcass_Lgt_Max);
PARAMETER(LCL.Lean_High_Min);
PARAMETER(LCL.Lean_High_Max);
PARAMETER(LCL.Lean_Low_Min);
PARAMETER(LCL.Lean_Low_Max);
PARAMETER(LCL.High_Yield_Min);
PARAMETER(LCL.High_Yield_Max);
PARAMETER(LCL.Low_Yield_Min);
PARAMETER(LCL.Low_Yield_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.BackFat_High_Min);
PARAMETER(LCL.BackFat_High_Max);
PARAMETER(LCL.BackFat_Low_Min);
PARAMETER(LCL.Backfat_Low_Max);
PARAMETER(LCL.LoinEye_High_Min);
PARAMETER(LCL.LoinEye_High_Max);
PARAMETER(LCL.LoinEye_Low_Min);
PARAMETER(LCL.LoinEye_Low_Max);
PARAMETER('N');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('N');
PARAMETER(LCL.Balance_First_Day_USR);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Valid Option
// IF *OTHERWISE
IF *OTHERWISE;

//?Option Valid Prior to Payment.
CASE;

// IF RCD.THP Process Code is Receiving
IF RCD.THP_Process_Code = 'RECV';

// OR RCD.THP Process Code is Slaughter
OR RCD.THP_Process_Code = 'SLG';

CASE;

// IF RCD.*SFLSEL is *option 9 request
IF RCD.*SFLSEL = '9'/'9';

//?Edit Live Price
// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// Call program Edt Live Price        E1.
CALL PROGRAM(Edt Live Price        E1) ('PKGBE1R');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);

// IF RCD.*SFLSEL is *Option 11 (Reusable)
IF RCD.*SFLSEL = '11';

CASE;

// IF RCD.TH Held Over is greater than 0
IF RCD.TH_Held_Over > *ZERO;

// OR RCD.TH Held Over Record is Yes
OR RCD.TH_Held_Over_Record = 'Y';

// Send error message - 'Option not allowed'
ERROR(PRK0648);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

//?Re-Balance Tattoo
// Call program Edt Tattoo Comment    EF.
CALL PROGRAM(Edt Tattoo Comment    EF) ('PKIVEFR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER('B');
PARAMETER(CTL.Oms_System_Value_Alpha);

EXECUTE FUNCTION(Val Comment Exist     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1230876;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER('B');
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

EXECUTE FUNCTION(Rtv Validation Rules  RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126427;
PARAMETER(LCL.Carcass_Dbw_Min);
PARAMETER(LCL.Carcass_Dbw_Max);
PARAMETER(LCL.Carcass_Lgt_Min);
PARAMETER(LCL.Carcass_Lgt_Max);
PARAMETER(LCL.Lean_High_Min);
PARAMETER(LCL.Lean_High_Max);
PARAMETER(LCL.Lean_Low_Min);
PARAMETER(LCL.Lean_Low_Max);
PARAMETER(LCL.High_Yield_Min);
PARAMETER(LCL.High_Yield_Max);
PARAMETER(LCL.Low_Yield_Min);
PARAMETER(LCL.Low_Yield_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.BackFat_High_Min);
PARAMETER(LCL.BackFat_High_Max);
PARAMETER(LCL.BackFat_Low_Min);
PARAMETER(LCL.Backfat_Low_Max);
PARAMETER(LCL.LoinEye_High_Min);
PARAMETER(LCL.LoinEye_High_Max);
PARAMETER(LCL.LoinEye_Low_Min);
PARAMETER(LCL.LoinEye_Low_Max);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.EV Validation Code is Carcass has Double Weight
 IF DB1.EV_Validation_Code = 'CDB';

 //?Carcass double weight
 // PAR.Carcass Dbw Min = DB1.EV Minimum
 PAR.Carcass_Dbw_Min = DB1.EV_Minimum;

 // PAR.Carcass Dbw Max = DB1.EV Maximum
 PAR.Carcass_Dbw_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Carcass is Light Weight
 IF DB1.EV_Validation_Code = 'CLT';

 //?Carcass light weight
 // PAR.Carcass Lgt Min = DB1.EV Minimum
 PAR.Carcass_Lgt_Min = DB1.EV_Minimum;

 // PAR.Carcass Lgt Max = DB1.EV Maximum
 PAR.Carcass_Lgt_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Backfat is high
 IF DB1.EV_Validation_Code = 'BHI';

 //?backfat is high
 // PAR.BackFat High Min = DB1.EV Minimum
 PAR.BackFat_High_Min = DB1.EV_Minimum;

 // PAR.BackFat High Max = DB1.EV Maximum
 PAR.BackFat_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Backfat is Low
 IF DB1.EV_Validation_Code = 'BLW';

 //?Backfat is low
 // PAR.BackFat Low Min = DB1.EV Minimum
 PAR.BackFat_Low_Min = DB1.EV_Minimum;

 // PAR.Backfat Low Max = DB1.EV Maximum
 PAR.Backfat_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Loineye is High
 IF DB1.EV_Validation_Code = 'LHI';

 //?loineye is high
 // PAR.LoinEye High Min = DB1.EV Minimum
 PAR.LoinEye_High_Min = DB1.EV_Minimum;

 // PAR.LoinEye High Max = DB1.EV Maximum
 PAR.LoinEye_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Loineye is Low
 IF DB1.EV_Validation_Code = 'LLW';

 //?loineye is low
 // PAR.LoinEye Low Min = DB1.EV Minimum
 PAR.LoinEye_Low_Min = DB1.EV_Minimum;

 // PAR.LoinEye Low Max = DB1.EV Maximum
 PAR.LoinEye_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Percent Lean is high
 IF DB1.EV_Validation_Code = 'PLH';

 //?% Lean High
 // PAR.%Lean High Min = DB1.EV Minimum
 PAR.Lean_High_Min = DB1.EV_Minimum;

 // PAR.%Lean High Max = DB1.EV Maximum
 PAR.Lean_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Percent Lean is Low
 IF DB1.EV_Validation_Code = 'PLL';

 //?% Lean Low
 // PAR.%Lean Low Min = DB1.EV Minimum
 PAR.Lean_Low_Min = DB1.EV_Minimum;

 // PAR.%Lean Low Max = DB1.EV Maximum
 PAR.Lean_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is #Head is < % Allowed
 IF DB1.EV_Validation_Code = 'HLP';

 //?Head < Percent
 // PAR.Head < Percent Min = DB1.EV Minimum
 PAR.Head_Percent_Min = DB1.EV_Minimum;

 // PAR.Head < Percent Max = DB1.EV Maximum
 PAR.Head_Percent_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is #Head is > % Allowed
 IF DB1.EV_Validation_Code = 'HHP';

 //?Head > Percent
 // PAR.Head > Percent Min = DB1.EV Minimum
 PAR.Head_Percent_Min = DB1.EV_Minimum;

 // PAR.Head > Percent Max = DB1.EV Maximum
 PAR.Head_Percent_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Yield Amount is High
 IF DB1.EV_Validation_Code = 'YHI';

 //?Yield High
 // PAR.High Yield Min = DB1.EV Minimum
 PAR.High_Yield_Min = DB1.EV_Minimum;

 // PAR.High Yield Max = DB1.EV Maximum
 PAR.High_Yield_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Yield Amount is Low
 IF DB1.EV_Validation_Code = 'YLW';

 //?Yield Low
 // PAR.Low Yield Min = DB1.EV Minimum
 PAR.Low_Yield_Min = DB1.EV_Minimum;

 // PAR.Low Yield Max = DB1.EV Maximum
 PAR.Low_Yield_Max = DB1.EV_Maximum;

 ENDIF;

}


// Call program Bal/Val Tattoo        XF.
CALL PROGRAM(Bal/Val Tattoo        XF) ('PKAAXFR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TH_Purchase_Date);
PARAMETER(RCD.TH_Group_Reference);
PARAMETER(RCD.TH_Live_Purchase_UOM);
PARAMETER(RCD.TH_Live_Purchase_Price);
PARAMETER(RCD.TH_Live_Gross_Amt);
PARAMETER(RCD.TH_LIve_Net_Amt);
PARAMETER(RCD.TH_Resale_UOM);
PARAMETER(RCD.TH_Recalc_Live_Wgt_Yld);
PARAMETER(RCD.TH_Pricing_Date);
PARAMETER(RCD.TH_Resale_Spread_Sts);
PARAMETER(RCD.TH_Dead_On_Arrival);
PARAMETER(RCD.TH_Head_Received);
PARAMETER(RCD.TH_Yard_Deads);
PARAMETER(RCD.TH_Held_Over);
PARAMETER(RCD.TH_Head_Condemned);
PARAMETER(RCD.TH_Head_Killed);
PARAMETER(RCD.TH_Head_Adds);
PARAMETER(RCD.TH_Head_Accepted);
PARAMETER(RCD.TH_Live_Wgt);
PARAMETER(RCD.TH_Adj_Live_Wgt);
PARAMETER(RCD.TH_Hot_Wgt);
PARAMETER(RCD.TH_Tot_Loin_Eye_Depth);
PARAMETER(RCD.TH_Tot_Backfat_Inches);
PARAMETER(RCD.TH_Tot_Light_Reflectance);
PARAMETER(RCD.TH_Avg_Live_Wgt);
PARAMETER(RCD.TH_Avg_Hot_Wgt);
PARAMETER(RCD.TH_Avg_Light_Reflectance);
PARAMETER(RCD.TH_Avg_Lean_Percent);
PARAMETER(RCD.TH_Avg_Loin_Eye_Depth);
PARAMETER(RCD.TH_Avg_Backfat);
PARAMETER(RCD.TH_Std_Yield_Percent);
PARAMETER(RCD.TH_Actual_Yield);
PARAMETER(RCD.TH_Adj_Actual_Yield);
PARAMETER(RCD.TH_Yield_Difference);
PARAMETER(RCD.TH_Recalc_Live_Wgt);
PARAMETER(RCD.TH_CM_Market_Price);
PARAMETER(RCD.TH_CM_Base_Mkt_Price);
PARAMETER(RCD.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(RCD.TH_CM_Sort_Discount_Amt);
PARAMETER(RCD.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(RCD.TH_CM_Base_Carcass_Value);
PARAMETER(RCD.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(RCD.TH_CM_Carcass_Gross_Amt);
PARAMETER(RCD.TH_Deduction_Amt);
PARAMETER(RCD.TH_Total_Net_WO_Adds);
PARAMETER(RCD.TH_Carcass_Net_Amt);
PARAMETER(RCD.TH_Additions_Amt);
PARAMETER(RCD.TH_Payment_Gross);
PARAMETER(RCD.Th_Payment_Net_Amt);
PARAMETER(RCD.TH_AP_Voucher_Document#);
PARAMETER(RCD.TH_Freight_Amount);
PARAMETER(RCD.TH_Accrual_Amount);
PARAMETER(RCD.TH_Fixed_Cost_Amount);
PARAMETER(RCD.TH_Calc_Net_Sts);
PARAMETER(RCD.TH_Payment_Sts);
PARAMETER(RCD.TH_Bal_to_Kill_Gen);
PARAMETER(RCD.TH_Commission_A_P_Voucher);
PARAMETER(RCD.TH_Voucher_Payment_Date);
PARAMETER(RCD.TH_User_Error_Override);
PARAMETER(RCD.TH_Held_Over_Record);
PARAMETER(RCD.TH_Sex);
PARAMETER(RCD.TH_Held_Ovr_Completed_Dte);
PARAMETER(RCD.TH_Commission_Paid_Date);
PARAMETER(RCD.TH_Actual_Check_Date);
PARAMETER(RCD.TH_Shipped_Weight);
PARAMETER(RCD.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(RCD.TH_FFLI);
PARAMETER(RCD.TH_Kill_Product_Value);
PARAMETER(RCD.TH_Cut_Product_Value);
PARAMETER(RCD.TH_Render_Product_Value);
PARAMETER(RCD.TH_Head_Excluded);
PARAMETER(RCD.TH_CM_Bse_Mkt_Live_CWT);
PARAMETER(RCD.TH_CM_Bse_Mkt_Carc_CWT);
PARAMETER(RCD.TH_CM_Srt_Dsc_Live_CWT);
PARAMETER(RCD.TH_CM_Srt_Dsc_Carc_CWT);
PARAMETER(RCD.TH_CM_Yld_G_L_Live_CWT);
PARAMETER(RCD.TH_CM_Yld_G_L_Carc_CWT);
PARAMETER(RCD.TH_CM_Crc_Val_Live_CWT);
PARAMETER(RCD.TH_CM_Crc_Val_Carc_CWT);
PARAMETER(RCD.TH_CM_Lean_Prem_Live_CWT);
PARAMETER(RCD.TH_CM_Lean_Prem_Carc_CWT);
PARAMETER(RCD.TH_CM_Gross_Live_CWT);
PARAMETER(RCD.TH_CM_Gross_Carc_CWT);
PARAMETER(RCD.TH_Source_Type);
PARAMETER(RCD.TH_Scale_Ticket_Sts);
PARAMETER(RCD.TH_Payment_Type);
PARAMETER(RCD.TH_HPS_Movement_Ref_#);
PARAMETER(RCD.TH_Source_Code);
PARAMETER(RCD.TH_Hog_Class_Type);
PARAMETER(RCD.TH_Posted_to_HPS_Flag);
PARAMETER(RCD.TH_Schedule_Kill_Shift);
PARAMETER(RCD.TH_Shift_Held_Over);
PARAMETER(RCD.DF_Defect_Code);
PARAMETER(RCD.THP_Process_Code);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
PARAMETER(RCD.HB_Buyer_Code);
PARAMETER(RCD.GN_Genetic_Code);
PARAMETER(RCD.HC_Class_Code);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
PARAMETER(LCL.Carcass_Dbw_Min);
PARAMETER(LCL.Carcass_Dbw_Max);
PARAMETER(LCL.Carcass_Lgt_Min);
PARAMETER(LCL.Carcass_Lgt_Max);
PARAMETER(LCL.Lean_High_Min);
PARAMETER(LCL.Lean_High_Max);
PARAMETER(LCL.Lean_Low_Min);
PARAMETER(LCL.Lean_Low_Max);
PARAMETER(LCL.High_Yield_Min);
PARAMETER(LCL.High_Yield_Max);
PARAMETER(LCL.Low_Yield_Min);
PARAMETER(LCL.Low_Yield_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.BackFat_High_Min);
PARAMETER(LCL.BackFat_High_Max);
PARAMETER(LCL.BackFat_Low_Min);
PARAMETER(LCL.Backfat_Low_Max);
PARAMETER(LCL.LoinEye_High_Min);
PARAMETER(LCL.LoinEye_High_Max);
PARAMETER(LCL.LoinEye_Low_Min);
PARAMETER(LCL.LoinEye_Low_Max);
PARAMETER('N');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('N');
PARAMETER(LCL.Balance_First_Day_USR);

//? 6/07/2021 JBB SDD619 - Repayments by Business Users
DO;

EXECUTE FUNCTION(Chk Tattoo Rcd Exists RT) TYPE(RTVOBJ) FILE(PWAXCPP)           AB1367910;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(LCL.Repay_Record_Exists);
{
 //?USER: Processing if Data record not found

 // PAR.Repay Record Exists = CND.No
 PAR.Repay_Record_Exists = 'N';

 //?USER: Process Data record

 //?Update status to Edited if not alsready marked
 CASE;

 // IF NOT DB1.TRD Repayment Status is Edited
 IF ! DB1.TRD_Repayment_Status = 'E';

 // AND NOT DB1.TRD Repayment Status is Repaid
 AND ! DB1.TRD_Repayment_Status = 'R';

 // PAR.Repay Record Exists = CND.Yes
 PAR.Repay_Record_Exists = 'Y';

 ENDIF;

}


//?If repayment record exists
CASE;

// IF LCL.Repay Record Exists is Yes
IF LCL.Repay_Record_Exists = 'Y';

// LCL.*Return code = CND.*Record already exists
LCL.*Return_code = 'Y2U0003';

//?If repayment record exists
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.*Return code = CND.*Record does not exist
LCL.*Return_code = 'Y2U0005';

ENDIF;

ENDDO;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Re-Balance Reason is Required.'
ERROR(PRK0929);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

// IF RCD.*SFLSEL is *Option 19
IF RCD.*SFLSEL = '19';

CASE;

// IF RCD.TH Held Over is greater than 0
IF RCD.TH_Held_Over > *ZERO;

// OR RCD.TH Held Over Record is Yes
OR RCD.TH_Held_Over_Record = 'Y';

// OR RCD.TH Source Type is Internal
OR RCD.TH_Source_Type = 'I';

// Send error message - 'Option not allowed'
ERROR(PRK0648);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Edt Recalc LvWgt Yld  E1.
CALL PROGRAM(Edt Recalc LvWgt Yld  E1) ('PLEYE1R');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF RCD.*SFLSEL is *Option 15 (Resuable)
IF RCD.*SFLSEL = '15';

//?If Exclude Company from Payment History/Average flag <> No
CASE;

// IF LCL.Exclude Flag is Yes
IF LCL.Exclude_Flag = 'Y';

// Send error message - 'Company &1 is not allowed to Pay with Historical Average'
ERROR(PRK1420);
MSGPARM(RCD.BOH_Company_Number);

//?If Exclude Company from Payment History/Average flag <> No
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?pay w/historical avgs
EXECUTE FUNCTION(Rtv BO Info           RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1100911;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(LCL.BOH_Payment_Type);
PARAMETER(LCL.PD_Producer_Code);
PARAMETER(LCL.PL_Location_Code);
PARAMETER(LCL.GN_Genetic_Code);
PARAMETER(LCL.PO_Option_Code);
PARAMETER(LCL.CMP_Program_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv CMP Info          RT) TYPE(RTVOBJ) FILE(PKARREP)           AB1116767;
PARAMETER(LCL.CMP_Program_Code);
PARAMETER(LCL.CMP_Description);
PARAMETER(LCL.CMP_Grading_Type);
PARAMETER(LCL.CMP_Sort_Basis);
PARAMETER(LCL.CMP_Carc_Wgt_Type);
PARAMETER(LCL.CMP_Std_Lean_Percent);
PARAMETER(LCL.CMP_Lean_Factor);
PARAMETER(LCL.CMP_Optimal_Row_Nbr_f_srt);
PARAMETER(LCL.CMP_Type);
PARAMETER(LCL.CMP_Market_Add_Deduct);
PARAMETER(LCL.RS_Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.CMP Grading Type is Meat Value
IF LCL.CMP_Grading_Type = 'M';

// Send error message - 'Option not allowed for CMP &1'
ERROR(PRK1157);
MSGPARM(LCL.CMP_Program_Code);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Pmt Pay w/Hist Avgs   PV.
CALL PROGRAM(Pmt Pay w/Hist Avgs   PV) ('PKTNPVR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TH_Head_Received);
PARAMETER(RCD.TH_Yard_Deads);
PARAMETER(RCD.TH_Head_Condemned);
PARAMETER(RCD.TH_Head_Killed);
PARAMETER(RCD.TH_Head_Accepted);
PARAMETER(RCD.TH_Adj_Actual_Yield);
PARAMETER(RCD.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(RCD.TH_Avg_Lean_EXC_ADD);
PARAMETER(RCD.TH_Head_Identified);
PARAMETER(RCD.TH_Percent_Identified);
PARAMETER(RCD.TH_Percent_Accepted);
PARAMETER(RCD.TH_PHA_Add_Type);
PARAMETER(RCD.TH_PHA_Average_Type);
PARAMETER(RCD.TH_PHA_Add_Reason);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(PAR.Oms_System_Value_Alpha);

ENDIF;

ENDIF;

// IF RCD.*SFLSEL is *Option 18
IF RCD.*SFLSEL = '18';

//?transfer carcs
CASE;

// IF RCD.TH Held Over Record is Yes
IF RCD.TH_Held_Over_Record = 'Y';

// Call program Pmt Trnsfr H/O Crcss  PV.
CALL PROGRAM(Pmt Trnsfr H/O Crcss  PV) ('PKTZPVR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TH_Purchase_Date);
PARAMETER(RCD.TH_Group_Reference);
PARAMETER(RCD.TH_Live_Purchase_UOM);
PARAMETER(RCD.TH_Live_Purchase_Price);
PARAMETER(RCD.TH_Live_Gross_Amt);
PARAMETER(RCD.TH_LIve_Net_Amt);
PARAMETER(RCD.TH_Resale_UOM);
PARAMETER(RCD.TH_Recalc_Live_Wgt_Yld);
PARAMETER(RCD.TH_Pricing_Date);
PARAMETER(RCD.TH_Resale_Spread_Sts);
PARAMETER(RCD.TH_Dead_On_Arrival);
PARAMETER(RCD.TH_Head_Received);
PARAMETER(RCD.TH_Yard_Deads);
PARAMETER(RCD.TH_Held_Over);
PARAMETER(RCD.TH_Head_Condemned);
PARAMETER(RCD.TH_Head_Killed);
PARAMETER(RCD.TH_Head_Adds);
PARAMETER(RCD.TH_Head_Accepted);
PARAMETER(RCD.TH_Live_Wgt);
PARAMETER(RCD.TH_Adj_Live_Wgt);
PARAMETER(RCD.TH_Hot_Wgt);
PARAMETER(RCD.TH_Tot_Loin_Eye_Depth);
PARAMETER(RCD.TH_Tot_Backfat_Inches);
PARAMETER(RCD.TH_Tot_Light_Reflectance);
PARAMETER(RCD.TH_Avg_Live_Wgt);
PARAMETER(RCD.TH_Avg_Hot_Wgt);
PARAMETER(RCD.TH_Avg_Light_Reflectance);
PARAMETER(RCD.TH_Avg_Lean_Percent);
PARAMETER(RCD.TH_Avg_Loin_Eye_Depth);
PARAMETER(RCD.TH_Avg_Backfat);
PARAMETER(RCD.TH_Std_Yield_Percent);
PARAMETER(RCD.TH_Actual_Yield);
PARAMETER(RCD.TH_Adj_Actual_Yield);
PARAMETER(RCD.TH_Yield_Difference);
PARAMETER(RCD.TH_Recalc_Live_Wgt);
PARAMETER(RCD.TH_CM_Market_Price);
PARAMETER(RCD.TH_CM_Base_Mkt_Price);
PARAMETER(RCD.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(RCD.TH_CM_Sort_Discount_Amt);
PARAMETER(RCD.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(RCD.TH_CM_Base_Carcass_Value);
PARAMETER(RCD.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(RCD.TH_CM_Carcass_Gross_Amt);
PARAMETER(RCD.TH_Deduction_Amt);
PARAMETER(RCD.TH_Total_Net_WO_Adds);
PARAMETER(RCD.TH_Carcass_Net_Amt);
PARAMETER(RCD.TH_Additions_Amt);
PARAMETER(RCD.TH_Payment_Gross);
PARAMETER(RCD.Th_Payment_Net_Amt);
PARAMETER(RCD.TH_AP_Voucher_Document#);
PARAMETER(RCD.TH_Freight_Amount);
PARAMETER(RCD.TH_Accrual_Amount);
PARAMETER(RCD.TH_Fixed_Cost_Amount);
PARAMETER(RCD.TH_Calc_Net_Sts);
PARAMETER(RCD.TH_Payment_Sts);
PARAMETER(RCD.TH_Bal_to_Kill_Gen);
PARAMETER(RCD.TH_Commission_A_P_Voucher);
PARAMETER(RCD.TH_Voucher_Payment_Date);
PARAMETER(RCD.TH_User_Error_Override);
PARAMETER(RCD.TH_Held_Over_Record);
PARAMETER(RCD.TH_Sex);
PARAMETER(RCD.TH_Held_Ovr_Completed_Dte);
PARAMETER(RCD.TH_Commission_Paid_Date);
PARAMETER(RCD.TH_Actual_Check_Date);
PARAMETER(RCD.TH_Shipped_Weight);
PARAMETER(RCD.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(RCD.TH_FFLI);
PARAMETER(RCD.TH_Kill_Product_Value);
PARAMETER(RCD.TH_Cut_Product_Value);
PARAMETER(RCD.TH_Render_Product_Value);
PARAMETER(RCD.TH_Head_Excluded);
PARAMETER(RCD.TH_CM_Bse_Mkt_Live_CWT);
PARAMETER(RCD.TH_CM_Bse_Mkt_Carc_CWT);
PARAMETER(RCD.TH_CM_Srt_Dsc_Live_CWT);
PARAMETER(RCD.TH_CM_Srt_Dsc_Carc_CWT);
PARAMETER(RCD.TH_CM_Yld_G_L_Live_CWT);
PARAMETER(RCD.TH_CM_Yld_G_L_Carc_CWT);
PARAMETER(RCD.TH_CM_Crc_Val_Live_CWT);
PARAMETER(RCD.TH_CM_Crc_Val_Carc_CWT);
PARAMETER(RCD.TH_CM_Lean_Prem_Live_CWT);
PARAMETER(RCD.TH_CM_Lean_Prem_Carc_CWT);
PARAMETER(RCD.TH_CM_Gross_Live_CWT);
PARAMETER(RCD.TH_CM_Gross_Carc_CWT);
PARAMETER(RCD.TH_Source_Type);
PARAMETER(RCD.TH_Scale_Ticket_Sts);
PARAMETER(RCD.TH_Payment_Type);
PARAMETER(RCD.TH_HPS_Movement_Ref_#);
PARAMETER(RCD.TH_Source_Code);
PARAMETER(RCD.TH_Hog_Class_Type);
PARAMETER(RCD.TH_Posted_to_HPS_Flag);
PARAMETER(RCD.TH_Schedule_Kill_Shift);
PARAMETER(RCD.TH_Shift_Held_Over);
PARAMETER(RCD.TH_Head_Identified);
PARAMETER(RCD.TH_Percent_Identified);
PARAMETER(RCD.TH_Percent_Accepted);
PARAMETER(RCD.DF_Defect_Code);
PARAMETER(RCD.THP_Process_Code);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
PARAMETER(RCD.HB_Buyer_Code);
PARAMETER(RCD.GN_Genetic_Code);
PARAMETER(RCD.HC_Class_Code);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
PARAMETER(PAR.Oms_System_Value_Alpha);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option allowed for held over tattoo only.'
ERROR(PRK0918);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?Option Valid Prior to Payment.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid Processed Code for this function'
ERROR(PRK0405);
MSGPARM(RCD.TH_Tattoo_Number);
MSGPARM(RCD.THP_Process_Code);

ENDIF;

ENDIF;

//?Option 97 = Balance First Day
CASE;

// IF RCD.*SFLSEL is Option 97
IF RCD.*SFLSEL = '97';

//?If Exclude Company from Payment History/Average flag <> No
CASE;

// IF LCL.Exclude Flag is Yes
IF LCL.Exclude_Flag = 'Y';

// Send error message - 'Company &1 is not allowed to Pay with Historical Average'
ERROR(PRK1420);
MSGPARM(RCD.BOH_Company_Number);

//?If Exclude Company from Payment History/Average flag <> No
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Validation Rules  RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126427;
PARAMETER(LCL.Carcass_Dbw_Min);
PARAMETER(LCL.Carcass_Dbw_Max);
PARAMETER(LCL.Carcass_Lgt_Min);
PARAMETER(LCL.Carcass_Lgt_Max);
PARAMETER(LCL.Lean_High_Min);
PARAMETER(LCL.Lean_High_Max);
PARAMETER(LCL.Lean_Low_Min);
PARAMETER(LCL.Lean_Low_Max);
PARAMETER(LCL.High_Yield_Min);
PARAMETER(LCL.High_Yield_Max);
PARAMETER(LCL.Low_Yield_Min);
PARAMETER(LCL.Low_Yield_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.BackFat_High_Min);
PARAMETER(LCL.BackFat_High_Max);
PARAMETER(LCL.BackFat_Low_Min);
PARAMETER(LCL.Backfat_Low_Max);
PARAMETER(LCL.LoinEye_High_Min);
PARAMETER(LCL.LoinEye_High_Max);
PARAMETER(LCL.LoinEye_Low_Min);
PARAMETER(LCL.LoinEye_Low_Max);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.EV Validation Code is Carcass has Double Weight
 IF DB1.EV_Validation_Code = 'CDB';

 //?Carcass double weight
 // PAR.Carcass Dbw Min = DB1.EV Minimum
 PAR.Carcass_Dbw_Min = DB1.EV_Minimum;

 // PAR.Carcass Dbw Max = DB1.EV Maximum
 PAR.Carcass_Dbw_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Carcass is Light Weight
 IF DB1.EV_Validation_Code = 'CLT';

 //?Carcass light weight
 // PAR.Carcass Lgt Min = DB1.EV Minimum
 PAR.Carcass_Lgt_Min = DB1.EV_Minimum;

 // PAR.Carcass Lgt Max = DB1.EV Maximum
 PAR.Carcass_Lgt_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Backfat is high
 IF DB1.EV_Validation_Code = 'BHI';

 //?backfat is high
 // PAR.BackFat High Min = DB1.EV Minimum
 PAR.BackFat_High_Min = DB1.EV_Minimum;

 // PAR.BackFat High Max = DB1.EV Maximum
 PAR.BackFat_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Backfat is Low
 IF DB1.EV_Validation_Code = 'BLW';

 //?Backfat is low
 // PAR.BackFat Low Min = DB1.EV Minimum
 PAR.BackFat_Low_Min = DB1.EV_Minimum;

 // PAR.Backfat Low Max = DB1.EV Maximum
 PAR.Backfat_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Loineye is High
 IF DB1.EV_Validation_Code = 'LHI';

 //?loineye is high
 // PAR.LoinEye High Min = DB1.EV Minimum
 PAR.LoinEye_High_Min = DB1.EV_Minimum;

 // PAR.LoinEye High Max = DB1.EV Maximum
 PAR.LoinEye_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Loineye is Low
 IF DB1.EV_Validation_Code = 'LLW';

 //?loineye is low
 // PAR.LoinEye Low Min = DB1.EV Minimum
 PAR.LoinEye_Low_Min = DB1.EV_Minimum;

 // PAR.LoinEye Low Max = DB1.EV Maximum
 PAR.LoinEye_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Percent Lean is high
 IF DB1.EV_Validation_Code = 'PLH';

 //?% Lean High
 // PAR.%Lean High Min = DB1.EV Minimum
 PAR.Lean_High_Min = DB1.EV_Minimum;

 // PAR.%Lean High Max = DB1.EV Maximum
 PAR.Lean_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Percent Lean is Low
 IF DB1.EV_Validation_Code = 'PLL';

 //?% Lean Low
 // PAR.%Lean Low Min = DB1.EV Minimum
 PAR.Lean_Low_Min = DB1.EV_Minimum;

 // PAR.%Lean Low Max = DB1.EV Maximum
 PAR.Lean_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is #Head is < % Allowed
 IF DB1.EV_Validation_Code = 'HLP';

 //?Head < Percent
 // PAR.Head < Percent Min = DB1.EV Minimum
 PAR.Head_Percent_Min = DB1.EV_Minimum;

 // PAR.Head < Percent Max = DB1.EV Maximum
 PAR.Head_Percent_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is #Head is > % Allowed
 IF DB1.EV_Validation_Code = 'HHP';

 //?Head > Percent
 // PAR.Head > Percent Min = DB1.EV Minimum
 PAR.Head_Percent_Min = DB1.EV_Minimum;

 // PAR.Head > Percent Max = DB1.EV Maximum
 PAR.Head_Percent_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Yield Amount is High
 IF DB1.EV_Validation_Code = 'YHI';

 //?Yield High
 // PAR.High Yield Min = DB1.EV Minimum
 PAR.High_Yield_Min = DB1.EV_Minimum;

 // PAR.High Yield Max = DB1.EV Maximum
 PAR.High_Yield_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Yield Amount is Low
 IF DB1.EV_Validation_Code = 'YLW';

 //?Yield Low
 // PAR.Low Yield Min = DB1.EV Minimum
 PAR.Low_Yield_Min = DB1.EV_Minimum;

 // PAR.Low Yield Max = DB1.EV Maximum
 PAR.Low_Yield_Max = DB1.EV_Maximum;

 ENDIF;

}


//?E9815 JBB  3/29/17  Add Company Number as primary key to function.
EXECUTE FUNCTION(Rtv GA Prod Hist Avgs RT) TYPE(RTVOBJ) FILE(PKCGCPP)           AB1226508;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.TH_Purchase_Date);
PARAMETER(LCL.PH_Summary_Type);
PARAMETER(LCL.PH_GA_Avg_Live_Wgt);
PARAMETER(LCL.TH_PHA_Yield_Percent);
PARAMETER(LCL.PH_GA_Avg_Lean);
PARAMETER(LCL.PH_GA_Avg_Backfat);
PARAMETER(LCL.PH_GA_Avg_Loin_Eye);
PARAMETER(LCL.PH_GA_Avg_Light_Ref);
PARAMETER(LCL.TH_PHA_Lean_Prm_Crc_CWT);
PARAMETER(LCL.PH_GA_Avg_Srt_Disc_Fctr);
PARAMETER(LCL.History_Avail_STS_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 // PAR.History Avail STS USR = CND.No
 PAR.History_Avail_STS_USR = 'N';

 // LCL.First Time Flag Usr = CND.Yes
 LCL.First_Time_Flag_Usr = 'Y';

 //?USER: Process Data record

 //?First Time Processing
 CASE;

 // IF LCL.First Time Flag Usr is Yes
 IF LCL.First_Time_Flag_Usr = 'Y';

 // LCL.PH Week Ending Date = DB1.PH Week Ending Date
 LCL.PH_Week_Ending_Date = DB1.PH_Week_Ending_Date;

 // LCL.First Time Flag Usr = CND.No
 LCL.First_Time_Flag_Usr = 'N';

 ENDIF;

 CASE;

 // IF DB1.PH Week Ending Date NE LCL.PH Week Ending Date
 IF DB1.PH_Week_Ending_Date <> LCL.PH_Week_Ending_Date;

 QUIT;

 ENDIF;

 CASE;

 // IF DB1.PH Summary Type is 2 Week
 IF DB1.PH_Summary_Type = '2WK';

 CASE;

 // IF DB1.PH GA Head Killed is GE 600
 IF DB1.PH_GA_Head_Killed >= 600;

 MOVE *ALL (To: PAR From: DB1);

 // PAR.History Avail STS USR = CND.Yes
 PAR.History_Avail_STS_USR = 'Y';

 QUIT;

 ENDIF;

 // IF DB1.PH Summary Type is 4 Week
 IF DB1.PH_Summary_Type = '4WK';

 CASE;

 // IF DB1.PH GA Head Killed is GT Zero
 IF DB1.PH_GA_Head_Killed > *ZERO;

 MOVE *ALL (To: PAR From: DB1);

 // PAR.History Avail STS USR = CND.Yes
 PAR.History_Avail_STS_USR = 'Y';

 QUIT;

 ENDIF;

 ENDIF;

}


// Call program Bal/Val Tattoo        XF.
CALL PROGRAM(Bal/Val Tattoo        XF) ('PKAAXFR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(LCL.TH_Purchase_Date);
PARAMETER(LCL.TH_Group_Reference);
PARAMETER(LCL.TH_Live_Purchase_UOM);
PARAMETER(LCL.TH_Live_Purchase_Price);
PARAMETER(LCL.TH_Live_Gross_Amt);
PARAMETER(LCL.TH_LIve_Net_Amt);
PARAMETER(LCL.TH_Resale_UOM);
PARAMETER(LCL.TH_Recalc_Live_Wgt_Yld);
PARAMETER(LCL.TH_Pricing_Date);
PARAMETER(LCL.TH_Resale_Spread_Sts);
PARAMETER(LCL.TH_Dead_On_Arrival);
PARAMETER(LCL.TH_Head_Received);
PARAMETER(LCL.TH_Yard_Deads);
PARAMETER(LCL.TH_Held_Over);
PARAMETER(LCL.TH_Head_Condemned);
PARAMETER(LCL.TH_Head_Killed);
PARAMETER(LCL.TH_Head_Adds);
PARAMETER(LCL.TH_Head_Accepted);
PARAMETER(LCL.TH_Live_Wgt);
PARAMETER(LCL.TH_Adj_Live_Wgt);
PARAMETER(LCL.TH_Hot_Wgt);
PARAMETER(LCL.TH_Tot_Loin_Eye_Depth);
PARAMETER(LCL.TH_Tot_Backfat_Inches);
PARAMETER(LCL.TH_Tot_Light_Reflectance);
PARAMETER(LCL.TH_Avg_Live_Wgt);
PARAMETER(LCL.TH_Avg_Hot_Wgt);
PARAMETER(LCL.TH_Avg_Light_Reflectance);
PARAMETER(LCL.TH_Avg_Lean_Percent);
PARAMETER(LCL.TH_Avg_Loin_Eye_Depth);
PARAMETER(LCL.TH_Avg_Backfat);
PARAMETER(LCL.TH_Std_Yield_Percent);
PARAMETER(LCL.TH_Actual_Yield);
PARAMETER(LCL.TH_Adj_Actual_Yield);
PARAMETER(LCL.TH_Yield_Difference);
PARAMETER(LCL.TH_Recalc_Live_Wgt);
PARAMETER(LCL.TH_CM_Market_Price);
PARAMETER(LCL.TH_CM_Base_Mkt_Price);
PARAMETER(LCL.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(LCL.TH_CM_Sort_Discount_Amt);
PARAMETER(LCL.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(LCL.TH_CM_Base_Carcass_Value);
PARAMETER(LCL.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(LCL.TH_CM_Carcass_Gross_Amt);
PARAMETER(LCL.TH_Deduction_Amt);
PARAMETER(LCL.TH_Total_Net_WO_Adds);
PARAMETER(LCL.TH_Carcass_Net_Amt);
PARAMETER(LCL.TH_Additions_Amt);
PARAMETER(LCL.TH_Payment_Gross);
PARAMETER(LCL.Th_Payment_Net_Amt);
PARAMETER(LCL.TH_AP_Voucher_Document#);
PARAMETER(LCL.TH_Freight_Amount);
PARAMETER(LCL.TH_Accrual_Amount);
PARAMETER(LCL.TH_Fixed_Cost_Amount);
PARAMETER(LCL.TH_Calc_Net_Sts);
PARAMETER(LCL.TH_Payment_Sts);
PARAMETER(*BLANK);
PARAMETER(LCL.TH_Commission_A_P_Voucher);
PARAMETER(LCL.TH_Voucher_Payment_Date);
PARAMETER(LCL.TH_User_Error_Override);
PARAMETER(LCL.TH_Held_Over_Record);
PARAMETER(LCL.TH_Sex);
PARAMETER(LCL.TH_Held_Ovr_Completed_Dte);
PARAMETER(LCL.TH_Commission_Paid_Date);
PARAMETER(LCL.TH_Actual_Check_Date);
PARAMETER(LCL.TH_Shipped_Weight);
PARAMETER(LCL.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(LCL.TH_FFLI);
PARAMETER(LCL.TH_Kill_Product_Value);
PARAMETER(LCL.TH_Cut_Product_Value);
PARAMETER(LCL.TH_Render_Product_Value);
PARAMETER(LCL.TH_Head_Excluded);
PARAMETER(LCL.TH_CM_Bse_Mkt_Live_CWT);
PARAMETER(LCL.TH_CM_Bse_Mkt_Carc_CWT);
PARAMETER(LCL.TH_CM_Srt_Dsc_Live_CWT);
PARAMETER(LCL.TH_CM_Srt_Dsc_Carc_CWT);
PARAMETER(LCL.TH_CM_Yld_G_L_Live_CWT);
PARAMETER(LCL.TH_CM_Yld_G_L_Carc_CWT);
PARAMETER(LCL.TH_CM_Crc_Val_Live_CWT);
PARAMETER(LCL.TH_CM_Crc_Val_Carc_CWT);
PARAMETER(LCL.TH_CM_Lean_Prem_Live_CWT);
PARAMETER(LCL.TH_CM_Lean_Prem_Carc_CWT);
PARAMETER(LCL.TH_CM_Gross_Live_CWT);
PARAMETER(LCL.TH_CM_Gross_Carc_CWT);
PARAMETER(LCL.TH_Source_Type);
PARAMETER(LCL.TH_Scale_Ticket_Sts);
PARAMETER(LCL.TH_Payment_Type);
PARAMETER(LCL.TH_HPS_Movement_Ref_#);
PARAMETER(LCL.TH_Source_Code);
PARAMETER(LCL.TH_Hog_Class_Type);
PARAMETER(LCL.TH_Posted_to_HPS_Flag);
PARAMETER(LCL.TH_Schedule_Kill_Shift);
PARAMETER(LCL.TH_Shift_Held_Over);
PARAMETER(LCL.DF_Defect_Code);
PARAMETER(LCL.THP_Process_Code);
PARAMETER(LCL.PD_Producer_Code);
PARAMETER(LCL.PL_Location_Code);
PARAMETER(LCL.HB_Buyer_Code);
PARAMETER(LCL.GN_Genetic_Code);
PARAMETER(LCL.HC_Class_Code);
PARAMETER(LCL.RS_User_Changed);
PARAMETER(LCL.RS_Date_Changed);
PARAMETER(LCL.RS_Time_Changed);
PARAMETER(LCL.RS_Record_Status);
PARAMETER(LCL.RS_Job);
PARAMETER(LCL.RS_Program);
PARAMETER(LCL.RS_User_Added);
PARAMETER(LCL.RS_Date_Added);
PARAMETER(LCL.RS_Time_Added);
PARAMETER(LCL.Carcass_Dbw_Min);
PARAMETER(LCL.Carcass_Dbw_Max);
PARAMETER(LCL.Carcass_Lgt_Min);
PARAMETER(LCL.Carcass_Lgt_Max);
PARAMETER(LCL.Lean_High_Min);
PARAMETER(LCL.Lean_High_Max);
PARAMETER(LCL.Lean_Low_Min);
PARAMETER(LCL.Lean_Low_Max);
PARAMETER(LCL.High_Yield_Min);
PARAMETER(LCL.High_Yield_Max);
PARAMETER(LCL.Low_Yield_Min);
PARAMETER(LCL.Low_Yield_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.BackFat_High_Min);
PARAMETER(LCL.BackFat_High_Max);
PARAMETER(LCL.BackFat_Low_Min);
PARAMETER(LCL.Backfat_Low_Max);
PARAMETER(LCL.LoinEye_High_Min);
PARAMETER(LCL.LoinEye_High_Max);
PARAMETER(LCL.LoinEye_Low_Min);
PARAMETER(LCL.LoinEye_Low_Max);
PARAMETER('Y');
PARAMETER('P');
PARAMETER(RCD.TH_PHA_Add_Type);
PARAMETER(RCD.TH_PHA_Average_Type);
PARAMETER(RCD.TH_PHA_Add_Reason);
PARAMETER(LCL.PH_GA_Avg_Live_Wgt);
PARAMETER(LCL.PH_GA_Adjusted_Yield);
PARAMETER(LCL.PH_GA_Avg_Lean);
PARAMETER(LCL.PH_GA_Avg_Backfat);
PARAMETER(LCL.PH_GA_Avg_Loin_Eye);
PARAMETER(LCL.PH_GA_Avg_Light_Ref);
PARAMETER(LCL.PH_GA_Lean_Prm_Carc_CWT);
PARAMETER(LCL.PH_GA_Avg_Srt_Disc_Fctr);
PARAMETER('N');
PARAMETER(LCL.Balance_First_Day_USR);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?Option 98 = Transfer Carcasses
CASE;

// IF RCD.*SFLSEL is Option 98
IF RCD.*SFLSEL = '98';

EXECUTE FUNCTION(Rtv Validation Rules  RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126427;
PARAMETER(LCL.Carcass_Dbw_Min);
PARAMETER(LCL.Carcass_Dbw_Max);
PARAMETER(LCL.Carcass_Lgt_Min);
PARAMETER(LCL.Carcass_Lgt_Max);
PARAMETER(LCL.Lean_High_Min);
PARAMETER(LCL.Lean_High_Max);
PARAMETER(LCL.Lean_Low_Min);
PARAMETER(LCL.Lean_Low_Max);
PARAMETER(LCL.High_Yield_Min);
PARAMETER(LCL.High_Yield_Max);
PARAMETER(LCL.Low_Yield_Min);
PARAMETER(LCL.Low_Yield_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.BackFat_High_Min);
PARAMETER(LCL.BackFat_High_Max);
PARAMETER(LCL.BackFat_Low_Min);
PARAMETER(LCL.Backfat_Low_Max);
PARAMETER(LCL.LoinEye_High_Min);
PARAMETER(LCL.LoinEye_High_Max);
PARAMETER(LCL.LoinEye_Low_Min);
PARAMETER(LCL.LoinEye_Low_Max);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.EV Validation Code is Carcass has Double Weight
 IF DB1.EV_Validation_Code = 'CDB';

 //?Carcass double weight
 // PAR.Carcass Dbw Min = DB1.EV Minimum
 PAR.Carcass_Dbw_Min = DB1.EV_Minimum;

 // PAR.Carcass Dbw Max = DB1.EV Maximum
 PAR.Carcass_Dbw_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Carcass is Light Weight
 IF DB1.EV_Validation_Code = 'CLT';

 //?Carcass light weight
 // PAR.Carcass Lgt Min = DB1.EV Minimum
 PAR.Carcass_Lgt_Min = DB1.EV_Minimum;

 // PAR.Carcass Lgt Max = DB1.EV Maximum
 PAR.Carcass_Lgt_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Backfat is high
 IF DB1.EV_Validation_Code = 'BHI';

 //?backfat is high
 // PAR.BackFat High Min = DB1.EV Minimum
 PAR.BackFat_High_Min = DB1.EV_Minimum;

 // PAR.BackFat High Max = DB1.EV Maximum
 PAR.BackFat_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Backfat is Low
 IF DB1.EV_Validation_Code = 'BLW';

 //?Backfat is low
 // PAR.BackFat Low Min = DB1.EV Minimum
 PAR.BackFat_Low_Min = DB1.EV_Minimum;

 // PAR.Backfat Low Max = DB1.EV Maximum
 PAR.Backfat_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Loineye is High
 IF DB1.EV_Validation_Code = 'LHI';

 //?loineye is high
 // PAR.LoinEye High Min = DB1.EV Minimum
 PAR.LoinEye_High_Min = DB1.EV_Minimum;

 // PAR.LoinEye High Max = DB1.EV Maximum
 PAR.LoinEye_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Loineye is Low
 IF DB1.EV_Validation_Code = 'LLW';

 //?loineye is low
 // PAR.LoinEye Low Min = DB1.EV Minimum
 PAR.LoinEye_Low_Min = DB1.EV_Minimum;

 // PAR.LoinEye Low Max = DB1.EV Maximum
 PAR.LoinEye_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Percent Lean is high
 IF DB1.EV_Validation_Code = 'PLH';

 //?% Lean High
 // PAR.%Lean High Min = DB1.EV Minimum
 PAR.Lean_High_Min = DB1.EV_Minimum;

 // PAR.%Lean High Max = DB1.EV Maximum
 PAR.Lean_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Percent Lean is Low
 IF DB1.EV_Validation_Code = 'PLL';

 //?% Lean Low
 // PAR.%Lean Low Min = DB1.EV Minimum
 PAR.Lean_Low_Min = DB1.EV_Minimum;

 // PAR.%Lean Low Max = DB1.EV Maximum
 PAR.Lean_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is #Head is < % Allowed
 IF DB1.EV_Validation_Code = 'HLP';

 //?Head < Percent
 // PAR.Head < Percent Min = DB1.EV Minimum
 PAR.Head_Percent_Min = DB1.EV_Minimum;

 // PAR.Head < Percent Max = DB1.EV Maximum
 PAR.Head_Percent_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is #Head is > % Allowed
 IF DB1.EV_Validation_Code = 'HHP';

 //?Head > Percent
 // PAR.Head > Percent Min = DB1.EV Minimum
 PAR.Head_Percent_Min = DB1.EV_Minimum;

 // PAR.Head > Percent Max = DB1.EV Maximum
 PAR.Head_Percent_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Yield Amount is High
 IF DB1.EV_Validation_Code = 'YHI';

 //?Yield High
 // PAR.High Yield Min = DB1.EV Minimum
 PAR.High_Yield_Min = DB1.EV_Minimum;

 // PAR.High Yield Max = DB1.EV Maximum
 PAR.High_Yield_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Yield Amount is Low
 IF DB1.EV_Validation_Code = 'YLW';

 //?Yield Low
 // PAR.Low Yield Min = DB1.EV Minimum
 PAR.Low_Yield_Min = DB1.EV_Minimum;

 // PAR.Low Yield Max = DB1.EV Maximum
 PAR.Low_Yield_Max = DB1.EV_Maximum;

 ENDIF;

}


EXECUTE FUNCTION(Rtv/Trnsfr Eval Trns  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1231627;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(LCL.Carcass_Dbw_Min);
PARAMETER(LCL.Carcass_Dbw_Max);
PARAMETER(LCL.Carcass_Lgt_Min);
PARAMETER(LCL.Carcass_Lgt_Max);
PARAMETER(LCL.Lean_High_Min);
PARAMETER(LCL.Lean_High_Max);
PARAMETER(LCL.Lean_Low_Min);
PARAMETER(LCL.Lean_Low_Max);
PARAMETER(LCL.High_Yield_Min);
PARAMETER(LCL.High_Yield_Max);
PARAMETER(LCL.Low_Yield_Min);
PARAMETER(LCL.Low_Yield_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.BackFat_High_Min);
PARAMETER(LCL.BackFat_High_Max);
PARAMETER(LCL.BackFat_Low_Min);
PARAMETER(LCL.Backfat_Low_Max);
PARAMETER(LCL.LoinEye_High_Min);
PARAMETER(LCL.LoinEye_High_Max);
PARAMETER(LCL.LoinEye_Low_Min);
PARAMETER(LCL.LoinEye_Low_Max);
{
 //?USER: Initialize routine

 //?S13236 RMC 6/12/18 fixed parms on call to rebalance the FROM date. It
 //?  was passing in DB1. which is from the last day's records. it needs to
 //?  pass in the PAR context previousely retrieved.  and only do it if there
 //? are transfer carcasses
 // LCL.First Time Flag Usr = CND.Yes
 LCL.First_Time_Flag_Usr = 'Y';

 //?USER: Process Data record

 CASE;

 // IF LCL.First Time Flag Usr is Yes
 IF LCL.First_Time_Flag_Usr = 'Y';

 // LCL.First Time Flag Usr = CND.No
 LCL.First_Time_Flag_Usr = 'N';

 // Net Head Usr
 LCL.Net_Head_Usr = ( DB1.TH_Head_Received - DB1.TH_Yard_Deads ) - DB1.TH_Head_Condemned;

 // LCL.Transfer Carcasses    USR = LCL.Net Head Usr - DB1.TH Head Killed
 LCL.Transfer_Carcasses_USR = LCL.Net_Head_Usr - DB1.TH_Head_Killed;

 // LCL.TH Kill Date = DB1.TH Kill Date
 LCL.TH_Kill_Date = DB1.TH_Kill_Date;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Kill Date Usr = DB1.TH Kill Date
 LCL.Kill_Date_Usr = DB1.TH_Kill_Date;

 ENDIF;

 //?USER: Exit processing

 CASE;

 // IF LCL.Transfer Carcasses    USR is *Zeros
 IF LCL.Transfer_Carcasses_USR = *ZERO;

 // IF LCL.Transfer Carcasses    USR is GT Zero
 IF LCL.Transfer_Carcasses_USR > *ZERO;

 //?Transfer from the Held Over To Date.
 EXECUTE FUNCTION(Rtv/Trnsfr Eval Trns  RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1227416;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(LCL.Kill_Date_Usr);
 PARAMETER(LCL.TH_Kill_Date);
 PARAMETER(LCL.Transfer_Carcasses_USR);
 {
  //?USER: Process Data record

  CASE;

  // IF PAR.Transfer Carcasses    USR is GT Zero
  IF PAR.Transfer_Carcasses_USR > *ZERO;

  //?9/29/2010 slm check for deleted record
  //?do not move the record if this is a deleted record
  CASE;

  // IF DB1.RS Record Status is Flag for Purge
  IF DB1.RS_Record_Status = 'D';

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Eval Next#        RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1135496;
  PARAMETER(DB1.ET_Company_Number);
  PARAMETER(PAR.Kill_Date_Usr);
  PARAMETER(WRK.ET_Scale_Sequence_Number);
  {
   //?USER: Processing if Data record not found

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.ET_Scale_Sequence_Number = 1;

   QUIT;

   //?USER: Process Data record

   CASE;

   // IF DB1.ET Scale Sequence Number is Entry Allowed
   IF DB1.ET_Scale_Sequence_Number >= 000001;
   AND DB1.ET_Scale_Sequence_Number <= 699999;

   // PAR.ET Scale Sequence Number = DB1.ET Scale Sequence Number + CON.1
   PAR.ET_Scale_Sequence_Number = DB1.ET_Scale_Sequence_Number + 1;

   QUIT;

   ENDIF;

  }

  EXECUTE FUNCTION(Create Evaluation Transac) TYPE(CRTOBJ) FILE(PKBVCPP)          AB1102931;
  PARAMETER(DB1.ET_Company_Number);
  PARAMETER(PAR.Kill_Date_Usr);
  PARAMETER(WRK.ET_Scale_Sequence_Number);
  PARAMETER(DB1.ET_Carcass_Number);
  PARAMETER(DB1.ET_Carcass_Number_Insert);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(DB1.ET_Lot);
  PARAMETER(DB1.ET_Shift);
  PARAMETER(DB1.ET_Hot_Wgt);
  PARAMETER(DB1.ET_Backfat_Thickness_Inch);
  PARAMETER(DB1.ET_Loin_Eye_Depth_Inches);
  PARAMETER(DB1.ET_Lean_Percent_NPPC);
  PARAMETER(DB1.ET_Backfat_Thickness_MM);
  PARAMETER(DB1.ET_Loineye_Depth_MM);
  PARAMETER(DB1.ET_Light_Reflectance_MM);
  PARAMETER(DB1.ET_Lean_Percent_FOM);
  PARAMETER(DB1.ET_Light_Reflectance);
  PARAMETER(DB1.ET_Trim_Area);
  PARAMETER(DB1.ET_Carcass_Sex);
  PARAMETER(DB1.ET_Error_Sts);
  PARAMETER(DB1.ET_Record_Add_Del_Sts);
  PARAMETER(DB1.ET_Record_Created_W_Avg);
  PARAMETER(DB1.ET_Record_Created_Status);
  PARAMETER(DB1.ET_User_Error_Override);
  PARAMETER(DB1.ET_Adjust_Add_Type);
  PARAMETER(DB1.ET_Broken_Back_Sts);
  PARAMETER(DB1.ET_Unused_Sts_2);
  PARAMETER(DB1.ET_Adjust_Add_Source);
  PARAMETER(DB1.ET_Unused_Sts_4);
  PARAMETER(DB1.ET_Unused_Sts_5);
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.Kill_Date_Usr);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  PARAMETER(DB1.RU_Date);
  PARAMETER(DB1.RU_Time);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(*MISSING);
   PARAMETER(*MISSING);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  EXECUTE FUNCTION(Dlt Eval Trans        DL) TYPE(DLTOBJ) FILE(PKBVCPP)           AB1102933;
  PARAMETER(DB1.ET_Company_Number);
  PARAMETER(DB1.ET_Kill_Date);
  PARAMETER(DB1.ET_Scale_Sequence_Number);
  PARAMETER(DB1.ET_Carcass_Number);
  PARAMETER(DB1.ET_Carcass_Number_Insert);
  // PAR.Transfer Carcasses    USR = PAR.Transfer Carcasses    USR - CON.1
  PAR.Transfer_Carcasses_USR = PAR.Transfer_Carcasses_USR - 1;

  ENDIF;

  ENDIF;

 }

 //?RMC - moved here from below
 EXECUTE FUNCTION(Rtv Tattoo 4/Balance  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1230440;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(LCL.TH_Kill_Date);
 PARAMETER(PAR.TH_Purchase_Date);
 PARAMETER(PAR.TH_Group_Reference);
 PARAMETER(PAR.TH_Live_Purchase_UOM);
 PARAMETER(PAR.TH_Live_Purchase_Price);
 PARAMETER(PAR.TH_Live_Gross_Amt);
 PARAMETER(PAR.TH_LIve_Net_Amt);
 PARAMETER(PAR.TH_Resale_UOM);
 PARAMETER(PAR.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(PAR.TH_Pricing_Date);
 PARAMETER(PAR.TH_Resale_Spread_Sts);
 PARAMETER(PAR.TH_Dead_On_Arrival);
 PARAMETER(PAR.TH_Head_Received);
 PARAMETER(PAR.TH_Yard_Deads);
 PARAMETER(PAR.TH_Held_Over);
 PARAMETER(PAR.TH_Head_Condemned);
 PARAMETER(PAR.TH_Head_Killed);
 PARAMETER(PAR.TH_Head_Adds);
 PARAMETER(PAR.TH_Head_Accepted);
 PARAMETER(PAR.TH_Live_Wgt);
 PARAMETER(PAR.TH_Adj_Live_Wgt);
 PARAMETER(PAR.TH_Hot_Wgt);
 PARAMETER(PAR.TH_Tot_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Tot_Backfat_Inches);
 PARAMETER(PAR.TH_Tot_Light_Reflectance);
 PARAMETER(PAR.TH_Avg_Live_Wgt);
 PARAMETER(PAR.TH_Avg_Hot_Wgt);
 PARAMETER(PAR.TH_Avg_Light_Reflectance);
 PARAMETER(PAR.TH_Avg_Lean_Percent);
 PARAMETER(PAR.TH_Avg_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Avg_Backfat);
 PARAMETER(PAR.TH_Std_Yield_Percent);
 PARAMETER(PAR.TH_Actual_Yield);
 PARAMETER(PAR.TH_Adj_Actual_Yield);
 PARAMETER(PAR.TH_Yield_Difference);
 PARAMETER(PAR.TH_Recalc_Live_Wgt);
 PARAMETER(PAR.TH_CM_Market_Price);
 PARAMETER(PAR.TH_CM_Base_Mkt_Price);
 PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(PAR.TH_CM_Sort_Discount_Amt);
 PARAMETER(PAR.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(PAR.TH_CM_Base_Carcass_Value);
 PARAMETER(PAR.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(PAR.TH_CM_Carcass_Gross_Amt);
 PARAMETER(PAR.TH_Deduction_Amt);
 PARAMETER(PAR.TH_Total_Net_WO_Adds);
 PARAMETER(PAR.TH_Carcass_Net_Amt);
 PARAMETER(PAR.TH_Additions_Amt);
 PARAMETER(PAR.TH_Payment_Gross);
 PARAMETER(PAR.Th_Payment_Net_Amt);
 PARAMETER(PAR.TH_AP_Voucher_Document#);
 PARAMETER(PAR.TH_Freight_Amount);
 PARAMETER(PAR.TH_Accrual_Amount);
 PARAMETER(PAR.TH_Fixed_Cost_Amount);
 PARAMETER(PAR.TH_Calc_Net_Sts);
 PARAMETER(PAR.TH_Payment_Sts);
 PARAMETER(PAR.TH_Bal_to_Kill_Gen);
 PARAMETER(PAR.TH_Commission_A_P_Voucher);
 PARAMETER(PAR.TH_Voucher_Payment_Date);
 PARAMETER(PAR.TH_User_Error_Override);
 PARAMETER(PAR.TH_Held_Over_Record);
 PARAMETER(PAR.TH_Sex);
 PARAMETER(PAR.TH_Held_Ovr_Completed_Dte);
 PARAMETER(PAR.TH_Commission_Paid_Date);
 PARAMETER(PAR.TH_Actual_Check_Date);
 PARAMETER(PAR.TH_Shipped_Weight);
 PARAMETER(PAR.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(PAR.TH_FFLI);
 PARAMETER(PAR.TH_Kill_Product_Value);
 PARAMETER(PAR.TH_Cut_Product_Value);
 PARAMETER(PAR.TH_Render_Product_Value);
 PARAMETER(PAR.TH_Head_Excluded);
 PARAMETER(PAR.TH_CM_Bse_Mkt_Live_CWT);
 PARAMETER(PAR.TH_CM_Bse_Mkt_Carc_CWT);
 PARAMETER(PAR.TH_CM_Srt_Dsc_Live_CWT);
 PARAMETER(PAR.TH_CM_Srt_Dsc_Carc_CWT);
 PARAMETER(PAR.TH_CM_Yld_G_L_Live_CWT);
 PARAMETER(PAR.TH_CM_Yld_G_L_Carc_CWT);
 PARAMETER(PAR.TH_CM_Crc_Val_Live_CWT);
 PARAMETER(PAR.TH_CM_Crc_Val_Carc_CWT);
 PARAMETER(PAR.TH_CM_Lean_Prem_Live_CWT);
 PARAMETER(PAR.TH_CM_Lean_Prem_Carc_CWT);
 PARAMETER(PAR.TH_CM_Gross_Live_CWT);
 PARAMETER(PAR.TH_CM_Gross_Carc_CWT);
 PARAMETER(PAR.TH_Source_Type);
 PARAMETER(PAR.TH_Scale_Ticket_Sts);
 PARAMETER(PAR.TH_Payment_Type);
 PARAMETER(PAR.TH_HPS_Movement_Ref_#);
 PARAMETER(PAR.TH_Source_Code);
 PARAMETER(PAR.TH_Hog_Class_Type);
 PARAMETER(PAR.TH_Posted_to_HPS_Flag);
 PARAMETER(PAR.TH_Schedule_Kill_Shift);
 PARAMETER(PAR.TH_Shift_Held_Over);
 PARAMETER(PAR.DF_Defect_Code);
 PARAMETER(PAR.THP_Process_Code);
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PL_Location_Code);
 PARAMETER(PAR.HB_Buyer_Code);
 PARAMETER(PAR.GN_Genetic_Code);
 PARAMETER(PAR.HC_Class_Code);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?RMC chg to PAR to pick up orig kill date fields
 // Call program Bal/Val Tattoo        XF.
 CALL PROGRAM(Bal/Val Tattoo        XF) ('PKAAXFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(LCL.TH_Kill_Date);
 PARAMETER(PAR.TH_Purchase_Date);
 PARAMETER(PAR.TH_Group_Reference);
 PARAMETER(PAR.TH_Live_Purchase_UOM);
 PARAMETER(PAR.TH_Live_Purchase_Price);
 PARAMETER(PAR.TH_Live_Gross_Amt);
 PARAMETER(PAR.TH_LIve_Net_Amt);
 PARAMETER(PAR.TH_Resale_UOM);
 PARAMETER(PAR.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(PAR.TH_Pricing_Date);
 PARAMETER(PAR.TH_Resale_Spread_Sts);
 PARAMETER(PAR.TH_Dead_On_Arrival);
 PARAMETER(PAR.TH_Head_Received);
 PARAMETER(PAR.TH_Yard_Deads);
 PARAMETER(PAR.TH_Held_Over);
 PARAMETER(PAR.TH_Head_Condemned);
 PARAMETER(PAR.TH_Head_Killed);
 PARAMETER(PAR.TH_Head_Adds);
 PARAMETER(PAR.TH_Head_Accepted);
 PARAMETER(PAR.TH_Live_Wgt);
 PARAMETER(PAR.TH_Adj_Live_Wgt);
 PARAMETER(PAR.TH_Hot_Wgt);
 PARAMETER(PAR.TH_Tot_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Tot_Backfat_Inches);
 PARAMETER(PAR.TH_Tot_Light_Reflectance);
 PARAMETER(PAR.TH_Avg_Live_Wgt);
 PARAMETER(PAR.TH_Avg_Hot_Wgt);
 PARAMETER(PAR.TH_Avg_Light_Reflectance);
 PARAMETER(PAR.TH_Avg_Lean_Percent);
 PARAMETER(PAR.TH_Avg_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Avg_Backfat);
 PARAMETER(PAR.TH_Std_Yield_Percent);
 PARAMETER(PAR.TH_Actual_Yield);
 PARAMETER(PAR.TH_Adj_Actual_Yield);
 PARAMETER(PAR.TH_Yield_Difference);
 PARAMETER(PAR.TH_Recalc_Live_Wgt);
 PARAMETER(PAR.TH_CM_Market_Price);
 PARAMETER(PAR.TH_CM_Base_Mkt_Price);
 PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(PAR.TH_CM_Sort_Discount_Amt);
 PARAMETER(PAR.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(PAR.TH_CM_Base_Carcass_Value);
 PARAMETER(PAR.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(PAR.TH_CM_Carcass_Gross_Amt);
 PARAMETER(PAR.TH_Deduction_Amt);
 PARAMETER(PAR.TH_Total_Net_WO_Adds);
 PARAMETER(PAR.TH_Carcass_Net_Amt);
 PARAMETER(PAR.TH_Additions_Amt);
 PARAMETER(PAR.TH_Payment_Gross);
 PARAMETER(PAR.Th_Payment_Net_Amt);
 PARAMETER(PAR.TH_AP_Voucher_Document#);
 PARAMETER(PAR.TH_Freight_Amount);
 PARAMETER(PAR.TH_Accrual_Amount);
 PARAMETER(PAR.TH_Fixed_Cost_Amount);
 PARAMETER(PAR.TH_Calc_Net_Sts);
 PARAMETER(PAR.TH_Payment_Sts);
 PARAMETER(*BLANK);
 PARAMETER(PAR.TH_Commission_A_P_Voucher);
 PARAMETER(PAR.TH_Voucher_Payment_Date);
 PARAMETER(PAR.TH_User_Error_Override);
 PARAMETER(PAR.TH_Held_Over_Record);
 PARAMETER(PAR.TH_Sex);
 PARAMETER(PAR.TH_Held_Ovr_Completed_Dte);
 PARAMETER(PAR.TH_Commission_Paid_Date);
 PARAMETER(PAR.TH_Actual_Check_Date);
 PARAMETER(PAR.TH_Shipped_Weight);
 PARAMETER(PAR.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(PAR.TH_FFLI);
 PARAMETER(PAR.TH_Kill_Product_Value);
 PARAMETER(PAR.TH_Cut_Product_Value);
 PARAMETER(PAR.TH_Render_Product_Value);
 PARAMETER(PAR.TH_Head_Excluded);
 PARAMETER(PAR.TH_CM_Bse_Mkt_Live_CWT);
 PARAMETER(PAR.TH_CM_Bse_Mkt_Carc_CWT);
 PARAMETER(PAR.TH_CM_Srt_Dsc_Live_CWT);
 PARAMETER(PAR.TH_CM_Srt_Dsc_Carc_CWT);
 PARAMETER(PAR.TH_CM_Yld_G_L_Live_CWT);
 PARAMETER(PAR.TH_CM_Yld_G_L_Carc_CWT);
 PARAMETER(PAR.TH_CM_Crc_Val_Live_CWT);
 PARAMETER(PAR.TH_CM_Crc_Val_Carc_CWT);
 PARAMETER(PAR.TH_CM_Lean_Prem_Live_CWT);
 PARAMETER(PAR.TH_CM_Lean_Prem_Carc_CWT);
 PARAMETER(PAR.TH_CM_Gross_Live_CWT);
 PARAMETER(PAR.TH_CM_Gross_Carc_CWT);
 PARAMETER(PAR.TH_Source_Type);
 PARAMETER(PAR.TH_Scale_Ticket_Sts);
 PARAMETER(PAR.TH_Payment_Type);
 PARAMETER(PAR.TH_HPS_Movement_Ref_#);
 PARAMETER(PAR.TH_Source_Code);
 PARAMETER(PAR.TH_Hog_Class_Type);
 PARAMETER(PAR.TH_Posted_to_HPS_Flag);
 PARAMETER(PAR.TH_Schedule_Kill_Shift);
 PARAMETER(PAR.TH_Shift_Held_Over);
 PARAMETER(PAR.DF_Defect_Code);
 PARAMETER(PAR.THP_Process_Code);
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PL_Location_Code);
 PARAMETER(PAR.HB_Buyer_Code);
 PARAMETER(PAR.GN_Genetic_Code);
 PARAMETER(PAR.HC_Class_Code);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 PARAMETER(PAR.Carcass_Dbw_Min);
 PARAMETER(PAR.Carcass_Dbw_Max);
 PARAMETER(PAR.Carcass_Lgt_Min);
 PARAMETER(PAR.Carcass_Lgt_Max);
 PARAMETER(PAR.Lean_High_Min);
 PARAMETER(PAR.Lean_High_Max);
 PARAMETER(PAR.Lean_Low_Min);
 PARAMETER(PAR.Lean_Low_Max);
 PARAMETER(PAR.High_Yield_Min);
 PARAMETER(PAR.High_Yield_Max);
 PARAMETER(PAR.Low_Yield_Min);
 PARAMETER(PAR.Low_Yield_Max);
 PARAMETER(PAR.Head_Percent_Min);
 PARAMETER(PAR.Head_Percent_Max);
 PARAMETER(PAR.Head_Percent_Min);
 PARAMETER(PAR.Head_Percent_Max);
 PARAMETER(PAR.BackFat_High_Min);
 PARAMETER(PAR.BackFat_High_Max);
 PARAMETER(PAR.BackFat_Low_Min);
 PARAMETER(PAR.Backfat_Low_Max);
 PARAMETER(PAR.LoinEye_High_Min);
 PARAMETER(PAR.LoinEye_High_Max);
 PARAMETER(PAR.LoinEye_Low_Min);
 PARAMETER(PAR.LoinEye_Low_Max);
 PARAMETER('N');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('N');
 PARAMETER(LCL.Balance_First_Day_USR);

 // IF LCL.Transfer Carcasses    USR is LT Zero
 IF LCL.Transfer_Carcasses_USR < *ZERO;

 //?Transfer from the Held Over From Date.
 // LCL.Transfer Carcasses    USR = LCL.Transfer Carcasses    USR * CON.-1 *
 LCL.Transfer_Carcasses_USR = LCL.Transfer_Carcasses_USR * -1;

 EXECUTE FUNCTION(Rtv/Trnsfr Eval Trns  RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1227416;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(LCL.TH_Kill_Date);
 PARAMETER(LCL.Kill_Date_Usr);
 PARAMETER(LCL.Transfer_Carcasses_USR);
 {
  //?USER: Process Data record

  CASE;

  // IF PAR.Transfer Carcasses    USR is GT Zero
  IF PAR.Transfer_Carcasses_USR > *ZERO;

  //?9/29/2010 slm check for deleted record
  //?do not move the record if this is a deleted record
  CASE;

  // IF DB1.RS Record Status is Flag for Purge
  IF DB1.RS_Record_Status = 'D';

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Eval Next#        RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1135496;
  PARAMETER(DB1.ET_Company_Number);
  PARAMETER(PAR.Kill_Date_Usr);
  PARAMETER(WRK.ET_Scale_Sequence_Number);
  {
   //?USER: Processing if Data record not found

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.ET_Scale_Sequence_Number = 1;

   QUIT;

   //?USER: Process Data record

   CASE;

   // IF DB1.ET Scale Sequence Number is Entry Allowed
   IF DB1.ET_Scale_Sequence_Number >= 000001;
   AND DB1.ET_Scale_Sequence_Number <= 699999;

   // PAR.ET Scale Sequence Number = DB1.ET Scale Sequence Number + CON.1
   PAR.ET_Scale_Sequence_Number = DB1.ET_Scale_Sequence_Number + 1;

   QUIT;

   ENDIF;

  }

  EXECUTE FUNCTION(Create Evaluation Transac) TYPE(CRTOBJ) FILE(PKBVCPP)          AB1102931;
  PARAMETER(DB1.ET_Company_Number);
  PARAMETER(PAR.Kill_Date_Usr);
  PARAMETER(WRK.ET_Scale_Sequence_Number);
  PARAMETER(DB1.ET_Carcass_Number);
  PARAMETER(DB1.ET_Carcass_Number_Insert);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(DB1.ET_Lot);
  PARAMETER(DB1.ET_Shift);
  PARAMETER(DB1.ET_Hot_Wgt);
  PARAMETER(DB1.ET_Backfat_Thickness_Inch);
  PARAMETER(DB1.ET_Loin_Eye_Depth_Inches);
  PARAMETER(DB1.ET_Lean_Percent_NPPC);
  PARAMETER(DB1.ET_Backfat_Thickness_MM);
  PARAMETER(DB1.ET_Loineye_Depth_MM);
  PARAMETER(DB1.ET_Light_Reflectance_MM);
  PARAMETER(DB1.ET_Lean_Percent_FOM);
  PARAMETER(DB1.ET_Light_Reflectance);
  PARAMETER(DB1.ET_Trim_Area);
  PARAMETER(DB1.ET_Carcass_Sex);
  PARAMETER(DB1.ET_Error_Sts);
  PARAMETER(DB1.ET_Record_Add_Del_Sts);
  PARAMETER(DB1.ET_Record_Created_W_Avg);
  PARAMETER(DB1.ET_Record_Created_Status);
  PARAMETER(DB1.ET_User_Error_Override);
  PARAMETER(DB1.ET_Adjust_Add_Type);
  PARAMETER(DB1.ET_Broken_Back_Sts);
  PARAMETER(DB1.ET_Unused_Sts_2);
  PARAMETER(DB1.ET_Adjust_Add_Source);
  PARAMETER(DB1.ET_Unused_Sts_4);
  PARAMETER(DB1.ET_Unused_Sts_5);
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.Kill_Date_Usr);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  PARAMETER(DB1.RU_Date);
  PARAMETER(DB1.RU_Time);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(*MISSING);
   PARAMETER(*MISSING);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  EXECUTE FUNCTION(Dlt Eval Trans        DL) TYPE(DLTOBJ) FILE(PKBVCPP)           AB1102933;
  PARAMETER(DB1.ET_Company_Number);
  PARAMETER(DB1.ET_Kill_Date);
  PARAMETER(DB1.ET_Scale_Sequence_Number);
  PARAMETER(DB1.ET_Carcass_Number);
  PARAMETER(DB1.ET_Carcass_Number_Insert);
  // PAR.Transfer Carcasses    USR = PAR.Transfer Carcasses    USR - CON.1
  PAR.Transfer_Carcasses_USR = PAR.Transfer_Carcasses_USR - 1;

  ENDIF;

  ENDIF;

 }

 //?RMC - moved here from below
 EXECUTE FUNCTION(Rtv Tattoo 4/Balance  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1230440;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(LCL.TH_Kill_Date);
 PARAMETER(PAR.TH_Purchase_Date);
 PARAMETER(PAR.TH_Group_Reference);
 PARAMETER(PAR.TH_Live_Purchase_UOM);
 PARAMETER(PAR.TH_Live_Purchase_Price);
 PARAMETER(PAR.TH_Live_Gross_Amt);
 PARAMETER(PAR.TH_LIve_Net_Amt);
 PARAMETER(PAR.TH_Resale_UOM);
 PARAMETER(PAR.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(PAR.TH_Pricing_Date);
 PARAMETER(PAR.TH_Resale_Spread_Sts);
 PARAMETER(PAR.TH_Dead_On_Arrival);
 PARAMETER(PAR.TH_Head_Received);
 PARAMETER(PAR.TH_Yard_Deads);
 PARAMETER(PAR.TH_Held_Over);
 PARAMETER(PAR.TH_Head_Condemned);
 PARAMETER(PAR.TH_Head_Killed);
 PARAMETER(PAR.TH_Head_Adds);
 PARAMETER(PAR.TH_Head_Accepted);
 PARAMETER(PAR.TH_Live_Wgt);
 PARAMETER(PAR.TH_Adj_Live_Wgt);
 PARAMETER(PAR.TH_Hot_Wgt);
 PARAMETER(PAR.TH_Tot_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Tot_Backfat_Inches);
 PARAMETER(PAR.TH_Tot_Light_Reflectance);
 PARAMETER(PAR.TH_Avg_Live_Wgt);
 PARAMETER(PAR.TH_Avg_Hot_Wgt);
 PARAMETER(PAR.TH_Avg_Light_Reflectance);
 PARAMETER(PAR.TH_Avg_Lean_Percent);
 PARAMETER(PAR.TH_Avg_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Avg_Backfat);
 PARAMETER(PAR.TH_Std_Yield_Percent);
 PARAMETER(PAR.TH_Actual_Yield);
 PARAMETER(PAR.TH_Adj_Actual_Yield);
 PARAMETER(PAR.TH_Yield_Difference);
 PARAMETER(PAR.TH_Recalc_Live_Wgt);
 PARAMETER(PAR.TH_CM_Market_Price);
 PARAMETER(PAR.TH_CM_Base_Mkt_Price);
 PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(PAR.TH_CM_Sort_Discount_Amt);
 PARAMETER(PAR.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(PAR.TH_CM_Base_Carcass_Value);
 PARAMETER(PAR.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(PAR.TH_CM_Carcass_Gross_Amt);
 PARAMETER(PAR.TH_Deduction_Amt);
 PARAMETER(PAR.TH_Total_Net_WO_Adds);
 PARAMETER(PAR.TH_Carcass_Net_Amt);
 PARAMETER(PAR.TH_Additions_Amt);
 PARAMETER(PAR.TH_Payment_Gross);
 PARAMETER(PAR.Th_Payment_Net_Amt);
 PARAMETER(PAR.TH_AP_Voucher_Document#);
 PARAMETER(PAR.TH_Freight_Amount);
 PARAMETER(PAR.TH_Accrual_Amount);
 PARAMETER(PAR.TH_Fixed_Cost_Amount);
 PARAMETER(PAR.TH_Calc_Net_Sts);
 PARAMETER(PAR.TH_Payment_Sts);
 PARAMETER(PAR.TH_Bal_to_Kill_Gen);
 PARAMETER(PAR.TH_Commission_A_P_Voucher);
 PARAMETER(PAR.TH_Voucher_Payment_Date);
 PARAMETER(PAR.TH_User_Error_Override);
 PARAMETER(PAR.TH_Held_Over_Record);
 PARAMETER(PAR.TH_Sex);
 PARAMETER(PAR.TH_Held_Ovr_Completed_Dte);
 PARAMETER(PAR.TH_Commission_Paid_Date);
 PARAMETER(PAR.TH_Actual_Check_Date);
 PARAMETER(PAR.TH_Shipped_Weight);
 PARAMETER(PAR.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(PAR.TH_FFLI);
 PARAMETER(PAR.TH_Kill_Product_Value);
 PARAMETER(PAR.TH_Cut_Product_Value);
 PARAMETER(PAR.TH_Render_Product_Value);
 PARAMETER(PAR.TH_Head_Excluded);
 PARAMETER(PAR.TH_CM_Bse_Mkt_Live_CWT);
 PARAMETER(PAR.TH_CM_Bse_Mkt_Carc_CWT);
 PARAMETER(PAR.TH_CM_Srt_Dsc_Live_CWT);
 PARAMETER(PAR.TH_CM_Srt_Dsc_Carc_CWT);
 PARAMETER(PAR.TH_CM_Yld_G_L_Live_CWT);
 PARAMETER(PAR.TH_CM_Yld_G_L_Carc_CWT);
 PARAMETER(PAR.TH_CM_Crc_Val_Live_CWT);
 PARAMETER(PAR.TH_CM_Crc_Val_Carc_CWT);
 PARAMETER(PAR.TH_CM_Lean_Prem_Live_CWT);
 PARAMETER(PAR.TH_CM_Lean_Prem_Carc_CWT);
 PARAMETER(PAR.TH_CM_Gross_Live_CWT);
 PARAMETER(PAR.TH_CM_Gross_Carc_CWT);
 PARAMETER(PAR.TH_Source_Type);
 PARAMETER(PAR.TH_Scale_Ticket_Sts);
 PARAMETER(PAR.TH_Payment_Type);
 PARAMETER(PAR.TH_HPS_Movement_Ref_#);
 PARAMETER(PAR.TH_Source_Code);
 PARAMETER(PAR.TH_Hog_Class_Type);
 PARAMETER(PAR.TH_Posted_to_HPS_Flag);
 PARAMETER(PAR.TH_Schedule_Kill_Shift);
 PARAMETER(PAR.TH_Shift_Held_Over);
 PARAMETER(PAR.DF_Defect_Code);
 PARAMETER(PAR.THP_Process_Code);
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PL_Location_Code);
 PARAMETER(PAR.HB_Buyer_Code);
 PARAMETER(PAR.GN_Genetic_Code);
 PARAMETER(PAR.HC_Class_Code);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?RMC chg to PAR to pick up orig kill date fields
 // Call program Bal/Val Tattoo        XF.
 CALL PROGRAM(Bal/Val Tattoo        XF) ('PKAAXFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(LCL.TH_Kill_Date);
 PARAMETER(PAR.TH_Purchase_Date);
 PARAMETER(PAR.TH_Group_Reference);
 PARAMETER(PAR.TH_Live_Purchase_UOM);
 PARAMETER(PAR.TH_Live_Purchase_Price);
 PARAMETER(PAR.TH_Live_Gross_Amt);
 PARAMETER(PAR.TH_LIve_Net_Amt);
 PARAMETER(PAR.TH_Resale_UOM);
 PARAMETER(PAR.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(PAR.TH_Pricing_Date);
 PARAMETER(PAR.TH_Resale_Spread_Sts);
 PARAMETER(PAR.TH_Dead_On_Arrival);
 PARAMETER(PAR.TH_Head_Received);
 PARAMETER(PAR.TH_Yard_Deads);
 PARAMETER(PAR.TH_Held_Over);
 PARAMETER(PAR.TH_Head_Condemned);
 PARAMETER(PAR.TH_Head_Killed);
 PARAMETER(PAR.TH_Head_Adds);
 PARAMETER(PAR.TH_Head_Accepted);
 PARAMETER(PAR.TH_Live_Wgt);
 PARAMETER(PAR.TH_Adj_Live_Wgt);
 PARAMETER(PAR.TH_Hot_Wgt);
 PARAMETER(PAR.TH_Tot_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Tot_Backfat_Inches);
 PARAMETER(PAR.TH_Tot_Light_Reflectance);
 PARAMETER(PAR.TH_Avg_Live_Wgt);
 PARAMETER(PAR.TH_Avg_Hot_Wgt);
 PARAMETER(PAR.TH_Avg_Light_Reflectance);
 PARAMETER(PAR.TH_Avg_Lean_Percent);
 PARAMETER(PAR.TH_Avg_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Avg_Backfat);
 PARAMETER(PAR.TH_Std_Yield_Percent);
 PARAMETER(PAR.TH_Actual_Yield);
 PARAMETER(PAR.TH_Adj_Actual_Yield);
 PARAMETER(PAR.TH_Yield_Difference);
 PARAMETER(PAR.TH_Recalc_Live_Wgt);
 PARAMETER(PAR.TH_CM_Market_Price);
 PARAMETER(PAR.TH_CM_Base_Mkt_Price);
 PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(PAR.TH_CM_Sort_Discount_Amt);
 PARAMETER(PAR.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(PAR.TH_CM_Base_Carcass_Value);
 PARAMETER(PAR.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(PAR.TH_CM_Carcass_Gross_Amt);
 PARAMETER(PAR.TH_Deduction_Amt);
 PARAMETER(PAR.TH_Total_Net_WO_Adds);
 PARAMETER(PAR.TH_Carcass_Net_Amt);
 PARAMETER(PAR.TH_Additions_Amt);
 PARAMETER(PAR.TH_Payment_Gross);
 PARAMETER(PAR.Th_Payment_Net_Amt);
 PARAMETER(PAR.TH_AP_Voucher_Document#);
 PARAMETER(PAR.TH_Freight_Amount);
 PARAMETER(PAR.TH_Accrual_Amount);
 PARAMETER(PAR.TH_Fixed_Cost_Amount);
 PARAMETER(PAR.TH_Calc_Net_Sts);
 PARAMETER(PAR.TH_Payment_Sts);
 PARAMETER(*BLANK);
 PARAMETER(PAR.TH_Commission_A_P_Voucher);
 PARAMETER(PAR.TH_Voucher_Payment_Date);
 PARAMETER(PAR.TH_User_Error_Override);
 PARAMETER(PAR.TH_Held_Over_Record);
 PARAMETER(PAR.TH_Sex);
 PARAMETER(PAR.TH_Held_Ovr_Completed_Dte);
 PARAMETER(PAR.TH_Commission_Paid_Date);
 PARAMETER(PAR.TH_Actual_Check_Date);
 PARAMETER(PAR.TH_Shipped_Weight);
 PARAMETER(PAR.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(PAR.TH_FFLI);
 PARAMETER(PAR.TH_Kill_Product_Value);
 PARAMETER(PAR.TH_Cut_Product_Value);
 PARAMETER(PAR.TH_Render_Product_Value);
 PARAMETER(PAR.TH_Head_Excluded);
 PARAMETER(PAR.TH_CM_Bse_Mkt_Live_CWT);
 PARAMETER(PAR.TH_CM_Bse_Mkt_Carc_CWT);
 PARAMETER(PAR.TH_CM_Srt_Dsc_Live_CWT);
 PARAMETER(PAR.TH_CM_Srt_Dsc_Carc_CWT);
 PARAMETER(PAR.TH_CM_Yld_G_L_Live_CWT);
 PARAMETER(PAR.TH_CM_Yld_G_L_Carc_CWT);
 PARAMETER(PAR.TH_CM_Crc_Val_Live_CWT);
 PARAMETER(PAR.TH_CM_Crc_Val_Carc_CWT);
 PARAMETER(PAR.TH_CM_Lean_Prem_Live_CWT);
 PARAMETER(PAR.TH_CM_Lean_Prem_Carc_CWT);
 PARAMETER(PAR.TH_CM_Gross_Live_CWT);
 PARAMETER(PAR.TH_CM_Gross_Carc_CWT);
 PARAMETER(PAR.TH_Source_Type);
 PARAMETER(PAR.TH_Scale_Ticket_Sts);
 PARAMETER(PAR.TH_Payment_Type);
 PARAMETER(PAR.TH_HPS_Movement_Ref_#);
 PARAMETER(PAR.TH_Source_Code);
 PARAMETER(PAR.TH_Hog_Class_Type);
 PARAMETER(PAR.TH_Posted_to_HPS_Flag);
 PARAMETER(PAR.TH_Schedule_Kill_Shift);
 PARAMETER(PAR.TH_Shift_Held_Over);
 PARAMETER(PAR.DF_Defect_Code);
 PARAMETER(PAR.THP_Process_Code);
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PL_Location_Code);
 PARAMETER(PAR.HB_Buyer_Code);
 PARAMETER(PAR.GN_Genetic_Code);
 PARAMETER(PAR.HC_Class_Code);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 PARAMETER(PAR.Carcass_Dbw_Min);
 PARAMETER(PAR.Carcass_Dbw_Max);
 PARAMETER(PAR.Carcass_Lgt_Min);
 PARAMETER(PAR.Carcass_Lgt_Max);
 PARAMETER(PAR.Lean_High_Min);
 PARAMETER(PAR.Lean_High_Max);
 PARAMETER(PAR.Lean_Low_Min);
 PARAMETER(PAR.Lean_Low_Max);
 PARAMETER(PAR.High_Yield_Min);
 PARAMETER(PAR.High_Yield_Max);
 PARAMETER(PAR.Low_Yield_Min);
 PARAMETER(PAR.Low_Yield_Max);
 PARAMETER(PAR.Head_Percent_Min);
 PARAMETER(PAR.Head_Percent_Max);
 PARAMETER(PAR.Head_Percent_Min);
 PARAMETER(PAR.Head_Percent_Max);
 PARAMETER(PAR.BackFat_High_Min);
 PARAMETER(PAR.BackFat_High_Max);
 PARAMETER(PAR.BackFat_Low_Min);
 PARAMETER(PAR.Backfat_Low_Max);
 PARAMETER(PAR.LoinEye_High_Min);
 PARAMETER(PAR.LoinEye_High_Max);
 PARAMETER(PAR.LoinEye_Low_Min);
 PARAMETER(PAR.LoinEye_Low_Max);
 PARAMETER('N');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('N');
 PARAMETER(LCL.Balance_First_Day_USR);

 ENDIF;

 //?Balance Held From Date.
 //?RMC chg to PAR to pick up orig kill date fields - and moved up
 //?     to run only if a transfer is necessary     6/11/18
}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Option 99 = Balance Second Day
CASE;

// IF RCD.*SFLSEL is Option 99
IF RCD.*SFLSEL = '99';

EXECUTE FUNCTION(Rtv Validation Rules  RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126427;
PARAMETER(LCL.Carcass_Dbw_Min);
PARAMETER(LCL.Carcass_Dbw_Max);
PARAMETER(LCL.Carcass_Lgt_Min);
PARAMETER(LCL.Carcass_Lgt_Max);
PARAMETER(LCL.Lean_High_Min);
PARAMETER(LCL.Lean_High_Max);
PARAMETER(LCL.Lean_Low_Min);
PARAMETER(LCL.Lean_Low_Max);
PARAMETER(LCL.High_Yield_Min);
PARAMETER(LCL.High_Yield_Max);
PARAMETER(LCL.Low_Yield_Min);
PARAMETER(LCL.Low_Yield_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.BackFat_High_Min);
PARAMETER(LCL.BackFat_High_Max);
PARAMETER(LCL.BackFat_Low_Min);
PARAMETER(LCL.Backfat_Low_Max);
PARAMETER(LCL.LoinEye_High_Min);
PARAMETER(LCL.LoinEye_High_Max);
PARAMETER(LCL.LoinEye_Low_Min);
PARAMETER(LCL.LoinEye_Low_Max);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.EV Validation Code is Carcass has Double Weight
 IF DB1.EV_Validation_Code = 'CDB';

 //?Carcass double weight
 // PAR.Carcass Dbw Min = DB1.EV Minimum
 PAR.Carcass_Dbw_Min = DB1.EV_Minimum;

 // PAR.Carcass Dbw Max = DB1.EV Maximum
 PAR.Carcass_Dbw_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Carcass is Light Weight
 IF DB1.EV_Validation_Code = 'CLT';

 //?Carcass light weight
 // PAR.Carcass Lgt Min = DB1.EV Minimum
 PAR.Carcass_Lgt_Min = DB1.EV_Minimum;

 // PAR.Carcass Lgt Max = DB1.EV Maximum
 PAR.Carcass_Lgt_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Backfat is high
 IF DB1.EV_Validation_Code = 'BHI';

 //?backfat is high
 // PAR.BackFat High Min = DB1.EV Minimum
 PAR.BackFat_High_Min = DB1.EV_Minimum;

 // PAR.BackFat High Max = DB1.EV Maximum
 PAR.BackFat_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Backfat is Low
 IF DB1.EV_Validation_Code = 'BLW';

 //?Backfat is low
 // PAR.BackFat Low Min = DB1.EV Minimum
 PAR.BackFat_Low_Min = DB1.EV_Minimum;

 // PAR.Backfat Low Max = DB1.EV Maximum
 PAR.Backfat_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Loineye is High
 IF DB1.EV_Validation_Code = 'LHI';

 //?loineye is high
 // PAR.LoinEye High Min = DB1.EV Minimum
 PAR.LoinEye_High_Min = DB1.EV_Minimum;

 // PAR.LoinEye High Max = DB1.EV Maximum
 PAR.LoinEye_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Loineye is Low
 IF DB1.EV_Validation_Code = 'LLW';

 //?loineye is low
 // PAR.LoinEye Low Min = DB1.EV Minimum
 PAR.LoinEye_Low_Min = DB1.EV_Minimum;

 // PAR.LoinEye Low Max = DB1.EV Maximum
 PAR.LoinEye_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Percent Lean is high
 IF DB1.EV_Validation_Code = 'PLH';

 //?% Lean High
 // PAR.%Lean High Min = DB1.EV Minimum
 PAR.Lean_High_Min = DB1.EV_Minimum;

 // PAR.%Lean High Max = DB1.EV Maximum
 PAR.Lean_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Percent Lean is Low
 IF DB1.EV_Validation_Code = 'PLL';

 //?% Lean Low
 // PAR.%Lean Low Min = DB1.EV Minimum
 PAR.Lean_Low_Min = DB1.EV_Minimum;

 // PAR.%Lean Low Max = DB1.EV Maximum
 PAR.Lean_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is #Head is < % Allowed
 IF DB1.EV_Validation_Code = 'HLP';

 //?Head < Percent
 // PAR.Head < Percent Min = DB1.EV Minimum
 PAR.Head_Percent_Min = DB1.EV_Minimum;

 // PAR.Head < Percent Max = DB1.EV Maximum
 PAR.Head_Percent_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is #Head is > % Allowed
 IF DB1.EV_Validation_Code = 'HHP';

 //?Head > Percent
 // PAR.Head > Percent Min = DB1.EV Minimum
 PAR.Head_Percent_Min = DB1.EV_Minimum;

 // PAR.Head > Percent Max = DB1.EV Maximum
 PAR.Head_Percent_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Yield Amount is High
 IF DB1.EV_Validation_Code = 'YHI';

 //?Yield High
 // PAR.High Yield Min = DB1.EV Minimum
 PAR.High_Yield_Min = DB1.EV_Minimum;

 // PAR.High Yield Max = DB1.EV Maximum
 PAR.High_Yield_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Yield Amount is Low
 IF DB1.EV_Validation_Code = 'YLW';

 //?Yield Low
 // PAR.Low Yield Min = DB1.EV Minimum
 PAR.Low_Yield_Min = DB1.EV_Minimum;

 // PAR.Low Yield Max = DB1.EV Maximum
 PAR.Low_Yield_Max = DB1.EV_Maximum;

 ENDIF;

}


// Call program Bal/Val Tattoo        XF.
CALL PROGRAM(Bal/Val Tattoo        XF) ('PKAAXFR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(LCL.TH_Purchase_Date);
PARAMETER(LCL.TH_Group_Reference);
PARAMETER(LCL.TH_Live_Purchase_UOM);
PARAMETER(LCL.TH_Live_Purchase_Price);
PARAMETER(LCL.TH_Live_Gross_Amt);
PARAMETER(LCL.TH_LIve_Net_Amt);
PARAMETER(LCL.TH_Resale_UOM);
PARAMETER(LCL.TH_Recalc_Live_Wgt_Yld);
PARAMETER(LCL.TH_Pricing_Date);
PARAMETER(LCL.TH_Resale_Spread_Sts);
PARAMETER(LCL.TH_Dead_On_Arrival);
PARAMETER(LCL.TH_Head_Received);
PARAMETER(LCL.TH_Yard_Deads);
PARAMETER(LCL.TH_Held_Over);
PARAMETER(LCL.TH_Head_Condemned);
PARAMETER(LCL.TH_Head_Killed);
PARAMETER(LCL.TH_Head_Adds);
PARAMETER(LCL.TH_Head_Accepted);
PARAMETER(LCL.TH_Live_Wgt);
PARAMETER(LCL.TH_Adj_Live_Wgt);
PARAMETER(LCL.TH_Hot_Wgt);
PARAMETER(LCL.TH_Tot_Loin_Eye_Depth);
PARAMETER(LCL.TH_Tot_Backfat_Inches);
PARAMETER(LCL.TH_Tot_Light_Reflectance);
PARAMETER(LCL.TH_Avg_Live_Wgt);
PARAMETER(LCL.TH_Avg_Hot_Wgt);
PARAMETER(LCL.TH_Avg_Light_Reflectance);
PARAMETER(LCL.TH_Avg_Lean_Percent);
PARAMETER(LCL.TH_Avg_Loin_Eye_Depth);
PARAMETER(LCL.TH_Avg_Backfat);
PARAMETER(LCL.TH_Std_Yield_Percent);
PARAMETER(LCL.TH_Actual_Yield);
PARAMETER(LCL.TH_Adj_Actual_Yield);
PARAMETER(LCL.TH_Yield_Difference);
PARAMETER(LCL.TH_Recalc_Live_Wgt);
PARAMETER(LCL.TH_CM_Market_Price);
PARAMETER(LCL.TH_CM_Base_Mkt_Price);
PARAMETER(LCL.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(LCL.TH_CM_Sort_Discount_Amt);
PARAMETER(LCL.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(LCL.TH_CM_Base_Carcass_Value);
PARAMETER(LCL.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(LCL.TH_CM_Carcass_Gross_Amt);
PARAMETER(LCL.TH_Deduction_Amt);
PARAMETER(LCL.TH_Total_Net_WO_Adds);
PARAMETER(LCL.TH_Carcass_Net_Amt);
PARAMETER(LCL.TH_Additions_Amt);
PARAMETER(LCL.TH_Payment_Gross);
PARAMETER(LCL.Th_Payment_Net_Amt);
PARAMETER(LCL.TH_AP_Voucher_Document#);
PARAMETER(LCL.TH_Freight_Amount);
PARAMETER(LCL.TH_Accrual_Amount);
PARAMETER(LCL.TH_Fixed_Cost_Amount);
PARAMETER(LCL.TH_Calc_Net_Sts);
PARAMETER(LCL.TH_Payment_Sts);
PARAMETER(LCL.TH_Bal_to_Kill_Gen);
PARAMETER(LCL.TH_Commission_A_P_Voucher);
PARAMETER(LCL.TH_Voucher_Payment_Date);
PARAMETER(LCL.TH_User_Error_Override);
PARAMETER(LCL.TH_Held_Over_Record);
PARAMETER(LCL.TH_Sex);
PARAMETER(LCL.TH_Held_Ovr_Completed_Dte);
PARAMETER(LCL.TH_Commission_Paid_Date);
PARAMETER(LCL.TH_Actual_Check_Date);
PARAMETER(LCL.TH_Shipped_Weight);
PARAMETER(LCL.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(LCL.TH_FFLI);
PARAMETER(LCL.TH_Kill_Product_Value);
PARAMETER(LCL.TH_Cut_Product_Value);
PARAMETER(LCL.TH_Render_Product_Value);
PARAMETER(LCL.TH_Head_Excluded);
PARAMETER(LCL.TH_CM_Bse_Mkt_Live_CWT);
PARAMETER(LCL.TH_CM_Bse_Mkt_Carc_CWT);
PARAMETER(LCL.TH_CM_Srt_Dsc_Live_CWT);
PARAMETER(LCL.TH_CM_Srt_Dsc_Carc_CWT);
PARAMETER(LCL.TH_CM_Yld_G_L_Live_CWT);
PARAMETER(LCL.TH_CM_Yld_G_L_Carc_CWT);
PARAMETER(LCL.TH_CM_Crc_Val_Live_CWT);
PARAMETER(LCL.TH_CM_Crc_Val_Carc_CWT);
PARAMETER(LCL.TH_CM_Lean_Prem_Live_CWT);
PARAMETER(LCL.TH_CM_Lean_Prem_Carc_CWT);
PARAMETER(LCL.TH_CM_Gross_Live_CWT);
PARAMETER(LCL.TH_CM_Gross_Carc_CWT);
PARAMETER(LCL.TH_Source_Type);
PARAMETER(LCL.TH_Scale_Ticket_Sts);
PARAMETER(LCL.TH_Payment_Type);
PARAMETER(LCL.TH_HPS_Movement_Ref_#);
PARAMETER(LCL.TH_Source_Code);
PARAMETER(LCL.TH_Hog_Class_Type);
PARAMETER(LCL.TH_Posted_to_HPS_Flag);
PARAMETER(LCL.TH_Schedule_Kill_Shift);
PARAMETER(LCL.TH_Shift_Held_Over);
PARAMETER(LCL.DF_Defect_Code);
PARAMETER(LCL.THP_Process_Code);
PARAMETER(LCL.PD_Producer_Code);
PARAMETER(LCL.PL_Location_Code);
PARAMETER(LCL.HB_Buyer_Code);
PARAMETER(LCL.GN_Genetic_Code);
PARAMETER(LCL.HC_Class_Code);
PARAMETER(LCL.RS_User_Changed);
PARAMETER(LCL.RS_Date_Changed);
PARAMETER(LCL.RS_Time_Changed);
PARAMETER(LCL.RS_Record_Status);
PARAMETER(LCL.RS_Job);
PARAMETER(LCL.RS_Program);
PARAMETER(LCL.RS_User_Added);
PARAMETER(LCL.RS_Date_Added);
PARAMETER(LCL.RS_Time_Added);
PARAMETER(LCL.Carcass_Dbw_Min);
PARAMETER(LCL.Carcass_Dbw_Max);
PARAMETER(LCL.Carcass_Lgt_Min);
PARAMETER(LCL.Carcass_Lgt_Max);
PARAMETER(LCL.Lean_High_Min);
PARAMETER(LCL.Lean_High_Max);
PARAMETER(LCL.Lean_Low_Min);
PARAMETER(LCL.Lean_Low_Max);
PARAMETER(LCL.High_Yield_Min);
PARAMETER(LCL.High_Yield_Max);
PARAMETER(LCL.Low_Yield_Min);
PARAMETER(LCL.Low_Yield_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.BackFat_High_Min);
PARAMETER(LCL.BackFat_High_Max);
PARAMETER(LCL.BackFat_Low_Min);
PARAMETER(LCL.Backfat_Low_Max);
PARAMETER(LCL.LoinEye_High_Min);
PARAMETER(LCL.LoinEye_High_Max);
PARAMETER(LCL.LoinEye_Low_Min);
PARAMETER(LCL.LoinEye_Low_Max);
PARAMETER('N');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('N');
PARAMETER(LCL.Balance_First_Day_USR);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Option 20 - Reprocess Eval Trans Upl
CASE;

// IF RCD.*SFLSEL is *Option 20
IF RCD.*SFLSEL = '20';

//?Documentation
DO;

//?12/2006   This function we have been told to allow the user to have
//?at this time this function will only be used by a IS person
//?not to be turned over to a user at this time per Purva.
//?This function will take the Eval Trans Upl and if flagged as a Y for
//?process, then change the Y to a N, once this is done then the
//?balance to kill should be run from the menu option
//?blance to kill by day.
//?02/06/07 slm Have been asked to stream line this so the user
//?         can do this buy themselfs.  Per Vic,
//?6/5/2008 AT THIS TIME WE ARE NOT GOING TO ALLOW THE USER TO RUN
//?THIS FUNCTION.
//?021207 slm ReProcess the Eval Tran Upl
DO;

//?2/05/2007 at this time we need to turn this over to the user
//?will use the following logic for what type of receiving
//?is being processed
//?Company Value will store the type of process for Receiving-slg
//?If Receiving is being reported as it happens this will be called
//?REALTIME  - At this time REALTIME will not be using this function.
//?If Receiving is being reported AS a BATCH process then this will be
//?BATCH
//?BATCH will have some cases where the hot scale rcrds
//?came up but the tattoo # was not found and the rcrd
//?was sent up was flagged as Invalid Tattoo Number,
//?and these records are flagged as P = Processed
//?The following process will unflag the Process
//?flagged records and make these records as UnProcessed
//?so that the user can run the "Run the Balance to Kill Again"
//?which will Rebalance this Tattoo number again.
//?This change will also change the Tattoo Header when
//?Completed, will flag the Tattoo Header as E, so that
//?the Payment Edit will error with Tattoo not balanced
//?Running the Balance to Kill report will rebalance all tattoos
ENDDO;

ENDDO;

//?ERROR MESSAGES
//?               - Option only allowed if company value is batch
//?               - Tattoo can not be in PAYMENT PROCESS
//?               - A record can not exits in the Carcass Detail
//?Company Value Code    USR = HPE Receiving Prc Type
// LCL.Company Value Code    USR = CND.HPE Receiving Prc Type
LCL.Company_Value_Code_USR = 'HPERCVBTH';

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(LCL.Company_Value_Code_USR);
PARAMETER(LCL.HPERCVTYPE_Alpha_Usr);

//?HPE Receiving Prc Type   = BATCH
CASE;

// IF LCL.HPERCVTYPE Alpha Usr is BATCH
IF LCL.HPERCVTYPE_Alpha_Usr = 'BATCH';

CASE;

// IF RCD.THP Process Code is NE Payment
IF RCD.THP_Process_Code <> 'PAYMNT';

EXECUTE FUNCTION(Val Crc Dtl for Val  RT) TYPE(RTVOBJ) FILE(PKB1CPP)            AB1277740;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

EXECUTE FUNCTION(Val Eval Trans Exists RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1277736;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF DB1.ET Record Add/Del Sts is Uploaded Records
 IF DB1.ET_Record_Add_Del_Sts = *BLANK/'D';

 //?Upload records were already applied to this tattoo number
 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 QUIT;

 ENDIF;

}


CASE;

// IF JOB.*USER is PorkISTesting
IF JOB.*USER = 'PRKTEST'/'ISPPATE'/'ISSMASO'/'ISRCENT'/'ISPURVAP'/'ISROSEM'/'ISSHARONZ'            +
/'ISSZURN'/'ISJHIGH'/'ISJBADE'/'ISJAMESB'/'ISDNGUY'/'ISDANNYN'/'PRKTESTGU'/'PRKTESTST'             +
/'PRKTESTTF'/'TPMTEST'/'TFTST961'/'ISSUSANM'/'ISJULIUSH'/'ISBGUTI'/'ISBARBG'/'ISBBARK'             +
/'ISNFOY'/'ISNATHANF'/'ISDREDD'/'ISABANS';

CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Evan Trans Already Exits'
ERROR(PRK1166);
MSGPARM(RCD.*SFLSEL);

ENDIF;

//?Unflag the Eval Trans Upl, and allow User to Reprocess
CASE;

// IF RCD.THP Process Code is NE Payment
IF RCD.THP_Process_Code <> 'PAYMNT';

// AND LCL.HPERCVTYPE Alpha Usr is BATCH
AND LCL.HPERCVTYPE_Alpha_Usr = 'BATCH';

// Call program UPD Eval Trans Upl ReDoXF.
CALL PROGRAM(UPD Eval Trans Upl ReDoXF) ('PLIOXFR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);

// Send information message - 'Eval Tran Upl - Reprocess'
MESSAGE(PRK1162 *INFO);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Carcass Dtl is Found'
ERROR(PRK1167);
MSGPARM(RCD.*SFLSEL);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Payment Process not Allow'
ERROR(PRK0453);
MSGPARM(RCD.*SFLSEL);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option not allowed'
ERROR(PRK0648);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

ENDIF;

//?USER: Exit program processing

//?Pass return code back to repayment program
// PGM.*Return code = LCL.*Return code
PGM.*Return_code = LCL.*Return_code;

