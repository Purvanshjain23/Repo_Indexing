// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for OMJHDFR
// ?Date: 14.08.2025 Time: 03:27:09
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?E3191 JJH 07/31/14 Add INVRST Application Code to restrict users
//?      who can use options 10=Post and 11=Cancel.
ENDDO;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('I/C');
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Printer Device = CON.*BLANK
PAR.PRT_Printer_Device = *BLANK;

// PGM.*Scan limit = CON.10000
PGM.*Scan_limit = 10000;

//?USER: Initialize subfile control

//?First Time
CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

//?Warehouse
CASE;

// IF PAR.Warehouse Code is Warehouse Code Blank
IF PAR.Warehouse_Code = *BLANK;

// CTL.Warehouse Code = LCL.Warehouse Code
CTL.Warehouse_Code = LCL.Warehouse_Code;

//?Warehouse
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Warehouse Code = PAR.Warehouse Code
CTL.Warehouse_Code = PAR.Warehouse_Code;

ENDIF;

CASE;

// IF PAR.Company Number is greater than zero
IF PAR.Company_Number > *ZERO;

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Company Number = LCL.Company Number
CTL.Company_Number = LCL.Company_Number;

ENDIF;

// CTL.Cycle Status = CND.Open
CTL.Cycle_Status = 'O';

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

ENDIF;

//?VAL:  Warehouse Code
CASE;

// IF CTL.Warehouse Code is Warehouse Code Blank
IF CTL.Warehouse_Code = *BLANK;

// Send error message - 'Warehouse Code is required.'
ERROR(USR2015);
MSGPARM(CTL.Warehouse_Code);

QUIT;

//?VAL:  Warehouse Code
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val User Whs Access   IF) TYPE(EXCINTFUN)                      AC1531984;
PARAMETER(JOB.*USER);
PARAMETER(CTL.Warehouse_Code);
PARAMETER('I');
PARAMETER('U');
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.User_Code_Model);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Retrieve User Warehouse Access Type
 CASE;

 // IF PAR.User Code Model is equal to blank
 IF PAR.User_Code_Model = *BLANK;

 EXECUTE FUNCTION(Rtv User Whs Access   RT) TYPE(RTVOBJ) FILE(PDL1REP)           AC1531985;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.UWA_Inventory_Trans);
 PARAMETER(PAR.UWA_Lot_Loc_Trans);
 PARAMETER(PAR.UWA_Shipping_Trans);
 PARAMETER(PAR.UWA_Cross_Applications);
 PARAMETER(PAR.UWA_Unused_Status_1);
 PARAMETER(PAR.UWA_Unused_Status_2);
 PARAMETER(PAR.UWA_Unused_Sts_3);
 PARAMETER(PAR.UWA_Unused_Sts_4);
 PARAMETER(PAR.UWA_Unused_Sts_5);
 PARAMETER(PAR.UWA_Unused_Sts_6);
 PARAMETER(PAR.UWA_Unused_Sts_7);
 PARAMETER(PAR.UWA_Unused_Sts_8);
 PARAMETER(PAR.UWA_Unused_Sts_9);
 PARAMETER(PAR.UWA_Unused_Sts_10);
 PARAMETER(PAR.UWA_Unused_Sts_11);
 PARAMETER(PAR.UWA_Unused_Sts_12);
 PARAMETER(PAR.UWA_Unused_Sts_13);
 PARAMETER(PAR.UWA_Unused_Sts_14);
 PARAMETER(PAR.UWA_Unused_Sts_15);
 PARAMETER(PAR.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Retrieve User Warehouse Access Type
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv User Whs Access   RT) TYPE(RTVOBJ) FILE(PDL1REP)           AC1531985;
 PARAMETER(PAR.User_Code_Model);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.UWA_Inventory_Trans);
 PARAMETER(PAR.UWA_Lot_Loc_Trans);
 PARAMETER(PAR.UWA_Shipping_Trans);
 PARAMETER(PAR.UWA_Cross_Applications);
 PARAMETER(PAR.UWA_Unused_Status_1);
 PARAMETER(PAR.UWA_Unused_Status_2);
 PARAMETER(PAR.UWA_Unused_Sts_3);
 PARAMETER(PAR.UWA_Unused_Sts_4);
 PARAMETER(PAR.UWA_Unused_Sts_5);
 PARAMETER(PAR.UWA_Unused_Sts_6);
 PARAMETER(PAR.UWA_Unused_Sts_7);
 PARAMETER(PAR.UWA_Unused_Sts_8);
 PARAMETER(PAR.UWA_Unused_Sts_9);
 PARAMETER(PAR.UWA_Unused_Sts_10);
 PARAMETER(PAR.UWA_Unused_Sts_11);
 PARAMETER(PAR.UWA_Unused_Sts_12);
 PARAMETER(PAR.UWA_Unused_Sts_13);
 PARAMETER(PAR.UWA_Unused_Sts_14);
 PARAMETER(PAR.UWA_Unused_Sts_15);
 PARAMETER(PAR.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 ENDIF;

 //?Validate Access
 CASE;

 // IF PAR.Record Found USR is Record Not Found
 IF PAR.Record_Found_USR = 'N';

 // Send error message - 'Access Denied to &1 for Warehouse &2.'
 ERROR(USR2776);
 MSGPARM(PAR.User_Profile_Name);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 //?Validate Access
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Inventory Transactions
 CASE;

 // IF PAR.Access Area Needed USR is Inventory Transactions
 IF PAR.Access_Area_Needed_USR = 'I';

 CASE;

 // IF PAR.Access Needed USR is Update
 IF PAR.Access_Needed_USR = 'U';

 CASE;

 // IF PAR.UWA Inventory Trans is *Not Update
 IF PAR.UWA_Inventory_Trans = 'N'/'R';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 // IF PAR.Access Needed USR is Read
 IF PAR.Access_Needed_USR = 'R';

 CASE;

 // IF PAR.UWA Inventory Trans is None
 IF PAR.UWA_Inventory_Trans = 'N';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 //?Lot Loc Transactions
 CASE;

 // IF PAR.Access Area Needed USR is Lot Loc Transactions
 IF PAR.Access_Area_Needed_USR = 'L';

 CASE;

 // IF PAR.Access Needed USR is Update
 IF PAR.Access_Needed_USR = 'U';

 CASE;

 // IF PAR.UWA Lot Loc Trans is *Not Update
 IF PAR.UWA_Lot_Loc_Trans = 'N'/'R';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 // IF PAR.Access Needed USR is Read
 IF PAR.Access_Needed_USR = 'R';

 CASE;

 // IF PAR.UWA Lot Loc Trans is None
 IF PAR.UWA_Lot_Loc_Trans = 'N';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 //?Shipping Transactions
 CASE;

 // IF PAR.Access Area Needed USR is Shipping Transactions
 IF PAR.Access_Area_Needed_USR = 'S';

 CASE;

 // IF PAR.Access Needed USR is Update
 IF PAR.Access_Needed_USR = 'U';

 CASE;

 // IF PAR.UWA Shipping Trans is *Not Update
 IF PAR.UWA_Shipping_Trans = 'N'/'R';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 // IF PAR.Access Needed USR is Read
 IF PAR.Access_Needed_USR = 'R';

 CASE;

 // IF PAR.UWA Shipping Trans is None
 IF PAR.UWA_Shipping_Trans = 'N';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 //?Cross Applications
 CASE;

 // IF PAR.Access Area Needed USR is Cross Applications
 IF PAR.Access_Area_Needed_USR = 'C';

 CASE;

 // IF PAR.Access Needed USR is Update
 IF PAR.Access_Needed_USR = 'U';

 CASE;

 // IF PAR.UWA Unused Sts is *Not Update
 IF PAR.UWA_Cross_Applications = 'N'/'R';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 // IF PAR.Access Needed USR is Read
 IF PAR.Access_Needed_USR = 'R';

 CASE;

 // IF PAR.UWA Unused Sts is None
 IF PAR.UWA_Cross_Applications = 'N';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

}


ENDIF;

//?USER: Initialize subfile record from DBF record

//?If company number entered, display only records for specified company
CASE;

// IF CTL.Company Number is not equal to zero
IF CTL.Company_Number <> *ZERO;

CASE;

// IF DB1.Company Number NE CTL.Company Number
IF DB1.Company_Number <> CTL.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Only display for specific co. if multi-co not allowed
CASE;

// IF PAR.Allow Multi-Company is no
IF PAR.Allow_Multi_Company = 'N';

CASE;

// IF DB1.Company Number NE PAR.Company Number
IF DB1.Company_Number <> PAR.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

CASE;

// IF RCD.Warehouse Code NE CTL.Warehouse Code
IF RCD.Warehouse_Code <> CTL.Warehouse_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// RCD.Status Description = Condition name of DB1.Cycle Status
RCD.Status_Description = RTVCND(DB1.Cycle_Status);

//?USER: Process subfile control (Pre-confirm)

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?  Create new Item
CASE;

// IF CTL.*CMD key is *Create
IF CTL.*CMD_key = '06';

// Call program Add Start Physical Cnt PV.
CALL PROGRAM(Add Start Physical Cnt PV) ('ICNYPVR');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?Process print physical count sheet
CASE;

// IF RCD.*SFLSEL is *Print
IF RCD.*SFLSEL = '6'/'6';

CASE;

// IF RCD.Cycle Status is Cancelled/Posted
IF RCD.Cycle_Status = 'C'/'P';

// Send error message - 'Printing not allowed on cancelled or posted physical.'
ERROR(USR2101);
MSGPARM(RCD.Cycle_Status);

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Company Number Pass   USR = RCD.Company Number
PAR.Company_Number_Pass_USR = RCD.Company_Number;

// Call program Zzz Pmt/Pass Co/Whs/Cy UP.
CALL PROGRAM(Zzz Pmt/Pass Co/Whs/Cy UP) ('PDWUUPR');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('I/C');
PARAMETER('ICPOCLP');
PARAMETER('Physical Count Sheet');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER('N');
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Cycle_Count_Code);

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print List has been submitted'
MESSAGE(USR1742 *INFO);

ENDIF;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process enter physical count
CASE;

// IF RCD.*SFLSEL is Opt 7
IF RCD.*SFLSEL = '7'/'7';

CASE;

// IF RCD.Cycle Status is Cancelled/Posted
IF RCD.Cycle_Status = 'C'/'P';

// Send error message - 'Physical count cannot be entered for a cycle that is cancelled or posted.'
ERROR(USR2102);
MSGPARM(RCD.Cycle_Status);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program ZZZ Enter Phys. Count  PV.
CALL PROGRAM(ZZZ Enter Phys. Count  PV) ('ICP7PVR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Physical_Start_Date);
PARAMETER(RCD.Cycle_Count_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process post physical
CASE;

// IF RCD.*SFLSEL is Option 10
IF RCD.*SFLSEL = '10';

//?E3191 JJH 07/31/14 - Access restriction by INVRST Application Code
EXECUTE FUNCTION(Rtv User/Application   IF) TYPE(EXCINTFUN)                     AC1920426;
PARAMETER(JOB.*USER);
PARAMETER('INVRST');
PARAMETER(LCL.Return_Code_Usr);
{
 //?Execute internal function

 // PAR.Return Code Usr = CND.*Blank
 PAR.Return_Code_Usr = *BLANK;

 EXECUTE FUNCTION(RTV Program Setup      RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1250561;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(NLL.Allow_Multi_Company);
 PARAMETER(NLL.Default_Printer);
 PARAMETER(NLL.Salesperson_Code);
 PARAMETER(LCL.User_Code_Model);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.User Code Model is equal to blank
 IF LCL.User_Code_Model = *BLANK;

 EXECUTE FUNCTION(RTV Appl Allowed       RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1920437;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Return_Code_Usr);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Return Code Usr = CND.*Record does not exist
  PAR.Return_Code_Usr = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Return Code Usr = CND.*Blank
  PAR.Return_Code_Usr = *BLANK;

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Appl Allowed       RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1920437;
 PARAMETER(LCL.User_Code_Model);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Return_Code_Usr);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Return Code Usr = CND.*Record does not exist
  PAR.Return_Code_Usr = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Return Code Usr = CND.*Blank
  PAR.Return_Code_Usr = *BLANK;

 }

 ENDIF;

}


CASE;

// IF LCL.Return Code Usr is *Blank
IF LCL.Return_Code_Usr = *BLANK;

CASE;

// IF RCD.Cycle Status is Cancelled/Posted
IF RCD.Cycle_Status = 'C'/'P';

// Send error message - 'Physical post not allowed on cancelled or posted cycle.'
ERROR(USR2103);
MSGPARM(RCD.Cycle_Status);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program ZZZ Post Physical Cnt  PV.
CALL PROGRAM(ZZZ Post Physical Cnt  PV) ('ICPZPVR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Cycle_Count_Code);
PARAMETER('PDW7CLP');
PARAMETER(RCD.Physical_Start_Date);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Send information message - 'Post physical has been submitted.'
MESSAGE(USR2104 *INFO);

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Application access denied for user &1 in application area &2'
ERROR(USR4459);
MSGPARM(JOB.*USER);
MSGPARM('INVRST');

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process cancel physical
CASE;

// IF RCD.*SFLSEL is Option 11
IF RCD.*SFLSEL = '11';

//?E3191 JJH 07/31/14 - Access restriction by INVRST Application Code
EXECUTE FUNCTION(Rtv User/Application   IF) TYPE(EXCINTFUN)                     AC1920426;
PARAMETER(JOB.*USER);
PARAMETER('INVRST');
PARAMETER(LCL.Return_Code_Usr);
{
 //?Execute internal function

 // PAR.Return Code Usr = CND.*Blank
 PAR.Return_Code_Usr = *BLANK;

 EXECUTE FUNCTION(RTV Program Setup      RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1250561;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(NLL.Allow_Multi_Company);
 PARAMETER(NLL.Default_Printer);
 PARAMETER(NLL.Salesperson_Code);
 PARAMETER(LCL.User_Code_Model);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.User Code Model is equal to blank
 IF LCL.User_Code_Model = *BLANK;

 EXECUTE FUNCTION(RTV Appl Allowed       RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1920437;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Return_Code_Usr);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Return Code Usr = CND.*Record does not exist
  PAR.Return_Code_Usr = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Return Code Usr = CND.*Blank
  PAR.Return_Code_Usr = *BLANK;

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Appl Allowed       RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1920437;
 PARAMETER(LCL.User_Code_Model);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Return_Code_Usr);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Return Code Usr = CND.*Record does not exist
  PAR.Return_Code_Usr = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Return Code Usr = CND.*Blank
  PAR.Return_Code_Usr = *BLANK;

 }

 ENDIF;

}


CASE;

// IF LCL.Return Code Usr is *Blank
IF LCL.Return_Code_Usr = *BLANK;

CASE;

// IF RCD.Cycle Status is Cancelled/Posted
IF RCD.Cycle_Status = 'C'/'P';

// Send error message - 'Canceling not allowed for physical that has been cancelled or posted.'
ERROR(USR2105);
MSGPARM(RCD.Cycle_Count_Code);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Zzz Cancel Physical Ct PV.
CALL PROGRAM(Zzz Cancel Physical Ct PV) ('PDW9PVR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Cycle_Count_Code);
PARAMETER('ICP0CLP');
PARAMETER(RCD.Physical_Start_Date);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Send error message - 'Cancel physical has been submitted.'
ERROR(USR2106);

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Application access denied for user &1 in application area &2'
ERROR(USR4459);
MSGPARM(JOB.*USER);
MSGPARM('INVRST');

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process print physical to book compare all quantities
CASE;

// IF RCD.*SFLSEL is Option 12
IF RCD.*SFLSEL = '12';

CASE;

// IF RCD.Cycle Status is Cancelled/Posted
IF RCD.Cycle_Status = 'C'/'P';

// Send error message - 'Printing not allowed on cancelled or posted physical.'
ERROR(USR2101);
MSGPARM(RCD.Cycle_Status);

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Company Number Pass   USR = RCD.Company Number
PAR.Company_Number_Pass_USR = RCD.Company_Number;

// Call program Zzz Pmt/Pass Co/Whs/Cy UP.
CALL PROGRAM(Zzz Pmt/Pass Co/Whs/Cy UP) ('PDWUUPR');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('I/C');
PARAMETER('ICPYCLP');
PARAMETER('Physical To Book Compare');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER('N');
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Cycle_Count_Code);

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print List has been submitted'
MESSAGE(USR1742 *INFO);

ENDIF;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process print physical to book compare no zero quantities
CASE;

// IF RCD.*SFLSEL is Option 13
IF RCD.*SFLSEL = '13';

CASE;

// IF RCD.Cycle Status is Cancelled/Posted
IF RCD.Cycle_Status = 'C'/'P';

// Send error message - 'Printing not allowed on cancelled or posted physical.'
ERROR(USR2101);
MSGPARM(RCD.Cycle_Status);

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Company Number Pass   USR = RCD.Company Number
PAR.Company_Number_Pass_USR = RCD.Company_Number;

// Call program Zzz Pmt/Pass Co/Whs/Cy UP.
CALL PROGRAM(Zzz Pmt/Pass Co/Whs/Cy UP) ('PDWUUPR');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('I/C');
PARAMETER('ICPYCLP');
PARAMETER('Physical To Book Compare');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER('Y');
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Cycle_Count_Code);

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print List has been submitted'
MESSAGE(USR1742 *INFO);

ENDIF;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process print AS Restoration Exceptions        PK0318 5/23/01
CASE;

// IF RCD.*SFLSEL is Option 14
IF RCD.*SFLSEL = '14';

CASE;

// IF RCD.Cycle Status is Cancelled/Posted
IF RCD.Cycle_Status = 'C'/'P';

// Send error message - 'Printing not allowed on cancelled or posted physical.'
ERROR(USR2101);
MSGPARM(RCD.Cycle_Status);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Zzz AS Restoration Exc PV.
CALL PROGRAM(Zzz AS Restoration Exc PV) ('POKQPVR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Cycle_Count_Code);
PARAMETER(RCD.Physical_Start_Date);

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'The report has been submitted.'
MESSAGE(USR2720 *INFO);

ENDIF;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Validate delete request
CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4';

// Send information message - 'Delete pending.  Confirm Y or N.'
MESSAGE(USR0597 *INFO);

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

//?USER: Process subfile record (Post-confirm)

//?Process delete request
CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4';

// Execute function Clr Program Message Q  US.
EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
{
 * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
 C                     CALL 'Y2CLMSC'
 C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
 C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
 * RESET FIRST MESSAGE ONLY FLAG.
 C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
}


// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

