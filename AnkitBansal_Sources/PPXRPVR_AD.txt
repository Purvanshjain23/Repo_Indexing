// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPXRPVR
// ?Date: 14.08.2025 Time: 03:42:14
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// WRK.Company = PAR.Company Number
WRK.Company = PAR.Company_Number;

//?** Initialize printer submit parms
// PAR.PRT Description = CON.Invoice Exception Report
PAR.PRT_Description = 'Invoice Exception Report';

// PAR.PRT Printer Device = CND.Not entered
PAR.PRT_Printer_Device = *BLANK;

// PAR.PRT Hold Output Sts = CND.*NO
PAR.PRT_Hold_Output_Sts = *NO;

// PAR.PRT Save Output Sts = CND.*NO
PAR.PRT_Save_Output_Sts = *NO;

// PAR.PRT Night Queue Run Sts = CND.blank
PAR.PRT_Night_Queue_Run_Sts = *BLANK;

// PAR.PRT Night Queue = CND.Not entered
PAR.PRT_Night_Queue = *BLANK;

// PAR.System Value Numeric = CON.1
PAR.System_Value_Numeric = 1;

//?* Control display of Load ID input        E004019
//?USER: Load screen

// DTL.Company Number = PAR.Company Number
DTL.Company_Number = PAR.Company_Number;

// WRK.Company = PAR.Company Number
WRK.Company = PAR.Company_Number;

// DTL.Description = Condition name of PAR.Process Cust Types Usr
DTL.Description = RTVCND(PAR.Process_Cust_Types_Usr);

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?6/18/2007 slm Fees and Payments only perform check on IC
CASE;

// IF PAR.Process Cust Types Usr is Inter-Co Customer's
IF PAR.Process_Cust_Types_Usr = 'IC';

// Call program Vry Fees & Payments PrcXF.
CALL PROGRAM(Vry Fees & Payments PrcXF) ('PMHPXFR');
PARAMETER(DTL.Company_Number);
PARAMETER('FEEPAYPROC');
PARAMETER(LCL.Fees_Payments_Prc_Usr);

CASE;

// IF LCL.Fees & Payments Prc Usr is *No/Blank
IF LCL.Fees_Payments_Prc_Usr = *BLANK/'N';

// DTL.From Date             USR = CON.*ZERO
DTL.From_Date_USR = *ZERO;

// DTL.To Date               USR = CON.*ZERO
DTL.To_Date_USR = *ZERO;

// Send error message - 'Fees & Payment is not define. Company Value is blank or N.'
ERROR(USR3739);
MSGPARM(DTL.Company_Number);

// IF *OTHERWISE
IF *OTHERWISE;

//?03/23/17 DN R9700-Commented out RTV Revenue Dates     UP & moved below.
//?03/23/17 DN R9700-Set From/Thru Ship Date Based on FEEPAYPROC Flag.
CASE;

// IF LCL.Fees & Payments Prc Usr is Yes
IF LCL.Fees_Payments_Prc_Usr = 'Y';

// Call program RTV Revenue Dates     UP.
CALL PROGRAM(RTV Revenue Dates     UP) ('TF817');
PARAMETER(DTL.From_Date_USR);
PARAMETER(DTL.To_Date_USR);

//?03/23/17 DN R9700-Set From/Thru Ship Date Based on FEEPAYPROC Flag.
// IF LCL.Fees & Payments Prc Usr is Inter-Company
IF LCL.Fees_Payments_Prc_Usr = 'I';

EXECUTE FUNCTION(Rtv Prior Saturday    RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1618543;
PARAMETER(DTL.Company_Number);
PARAMETER(JOB.*Job_date);
PARAMETER(DTL.To_Date_USR);
{
 //?USER: Initialize routine

 // LCL.First Time Flag = CND.Yes
 LCL.First_Time_Flag = 'Y';

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF LCL.First Time Flag is Yes
 IF LCL.First_Time_Flag = 'Y';

 // LCL.First Time Flag = CND.NO
 LCL.First_Time_Flag = 'N';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Day of Week is Saturday
 IF DB1.Day_of_Week = '7';

 // PAR.Date Out = DB1.Post to G/L Date
 PAR.Date_Out = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Prior Sunday      RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1410775;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.To_Date_USR);
PARAMETER(DTL.From_Date_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Date Sun USR = DB1.Post to G/L Date
 PAR.Date_Sun_USR = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

}


ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Call program RTV Revenue Dates     UP.
CALL PROGRAM(RTV Revenue Dates     UP) ('TF817');
PARAMETER(DTL.From_Date_USR);
PARAMETER(DTL.To_Date_USR);

ENDIF;

//?USER: Validate fields

CASE;

// IF PAR.Process Cust Types Usr is 3rd Party Customer(s)
IF PAR.Process_Cust_Types_Usr = 'TP';

//?Process F4 on Order Number
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Order Number
AND PGM.*Cursor_field = DTL.Order_Number;

// Call program Zzz Ord Avail to Invc  SR.
CALL PROGRAM(Zzz Ord Avail to Invc  SR) ('PDDSSRR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Load ID     From Ord Hdr if Live w/TPM       E004019
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Load ID
AND PGM.*Cursor_field = DTL.Load_ID;

//?05/23/16 RMC E4119 remove live with tpm check
// Call program SEL Shipped Load       SR.
CALL PROGRAM(SEL Shipped Load       SR) ('PDKWSRR');
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Company_Number);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?061807 SLM Fees and Payment verification
//?       Prompt on company number will only be allowed if
//?       users have Multi-company authority
//?       Load screen only was occuring on Init.
//?Process F4 on Company Number
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Company Number
IF PGM.*Cursor_field = DTL.Company_Number;

CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// Call program SEL Plant Company      SR.
CALL PROGRAM(SEL Plant Company      SR) ('PPFZSRR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Name);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

ENDIF;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.Process Cust Types Usr is Inter-Co Customer's
IF PAR.Process_Cust_Types_Usr = 'IC';

// Call program Vry Fees & Payments PrcXF.
CALL PROGRAM(Vry Fees & Payments PrcXF) ('PMHPXFR');
PARAMETER(DTL.Company_Number);
PARAMETER('FEEPAYPROC');
PARAMETER(LCL.Fees_Payments_Prc_Usr);

CASE;

// IF LCL.Fees & Payments Prc Usr is *No/Blank
IF LCL.Fees_Payments_Prc_Usr = *BLANK/'N';

// DTL.From Date             USR = CON.*ZERO
DTL.From_Date_USR = *ZERO;

// DTL.To Date               USR = CON.*ZERO
DTL.To_Date_USR = *ZERO;

// Send error message - 'Fees & Payment is not define. Company Value is blank or N.'
ERROR(USR3739);
MSGPARM(DTL.Company_Number);

QUIT;

// IF *OTHERWISE
IF *OTHERWISE;

//?03/23/17 DN R9700-Commented out RTV Revenue Dates     UP & moved below.
//?03/23/17 DN R9700-Set From/Thru Ship Date Based on FEEPAYPROC Flag.
CASE;

// IF LCL.Fees & Payments Prc Usr is Yes
IF LCL.Fees_Payments_Prc_Usr = 'Y';

// Call program RTV Revenue Dates     UP.
CALL PROGRAM(RTV Revenue Dates     UP) ('TF817');
PARAMETER(DTL.From_Date_USR);
PARAMETER(DTL.To_Date_USR);

//?03/23/17 DN R9700-Set From/Thru Ship Date Based on FEEPAYPROC Flag.
// IF LCL.Fees & Payments Prc Usr is Inter-Company
IF LCL.Fees_Payments_Prc_Usr = 'I';

EXECUTE FUNCTION(Rtv Prior Saturday    RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1618543;
PARAMETER(DTL.Company_Number);
PARAMETER(JOB.*Job_date);
PARAMETER(DTL.To_Date_USR);
{
 //?USER: Initialize routine

 // LCL.First Time Flag = CND.Yes
 LCL.First_Time_Flag = 'Y';

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF LCL.First Time Flag is Yes
 IF LCL.First_Time_Flag = 'Y';

 // LCL.First Time Flag = CND.NO
 LCL.First_Time_Flag = 'N';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Day of Week is Saturday
 IF DB1.Day_of_Week = '7';

 // PAR.Date Out = DB1.Post to G/L Date
 PAR.Date_Out = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Prior Sunday      RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1410775;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.To_Date_USR);
PARAMETER(DTL.From_Date_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Date Sun USR = DB1.Post to G/L Date
 PAR.Date_Sun_USR = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

}


ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Call program RTV Revenue Dates     UP.
CALL PROGRAM(RTV Revenue Dates     UP) ('TF817');
PARAMETER(DTL.From_Date_USR);
PARAMETER(DTL.To_Date_USR);

ENDIF;

//?USER: Validate relations

//?Validate company if entered
CASE;

// IF DTL.Company Number is not equal to zero
IF DTL.Company_Number <> *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Name = CON.*BLANK
DTL.Name = *BLANK;

// Send error message - 'Company Number not found'
ERROR(USR0163);

ENDIF;

ENDIF;

CASE;

// IF PAR.Process Cust Types Usr is 3rd Party Customer(s)
IF PAR.Process_Cust_Types_Usr = 'TP';

//?Select only Load, Order or Date.
CASE;

// IF DTL.Load ID is GT Zero
IF DTL.Load_ID > *ZERO;

CASE;

// IF DTL.Order Number is Not equal to zeros
IF DTL.Order_Number <> *ZERO;

// OR DTL.Requested Ship Date is entered
OR DTL.Requested_Ship_Date <> *ZERO;

// Send error message - 'You may print by Load, by Order, or by Date. Select only one.'
ERROR(USR2052);

ENDIF;

//?Select only Load, Order or Date.
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Order Number is Not equal to zeros
IF DTL.Order_Number <> *ZERO;

CASE;

// IF DTL.Load ID is GT Zero
IF DTL.Load_ID > *ZERO;

// OR DTL.Requested Ship Date is entered
OR DTL.Requested_Ship_Date <> *ZERO;

// Send error message - 'You may print by Load, by Order, or by Date. Select only one.'
ERROR(USR2052);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Requested Ship Date is entered
IF DTL.Requested_Ship_Date <> *ZERO;

CASE;

// IF DTL.Order Number is Not equal to zeros
IF DTL.Order_Number <> *ZERO;

// OR DTL.Load ID is GT Zero
OR DTL.Load_ID > *ZERO;

// Send error message - 'You may print by Load, by Order, or by Date. Select only one.'
ERROR(USR2052);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Validate Order Number
CASE;

// IF DTL.Order Number is Not equal to zeros
IF DTL.Order_Number <> *ZERO;

EXECUTE FUNCTION(RTV Ord Avail-Excpt RptRT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1782539;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 //?USER: Process Data record

 //?** Test Order Header selection criteria
 CASE;

 // IF DB1.Billing Activity Type is Not Invoice
 IF DB1.Billing_Activity_Type = '2'/'3'/'4';

 // OR DB1.Price Status is Unpriced
 OR DB1.Price_Status = 'U';

 // OR DB1.Header Status is Not confirmed
 OR DB1.Header_Status = 'L'/'A'/'X'/'C'/'E'/'H';

 // OR DB1.Actual Shipped Date is not entered
 OR DB1.Actual_Shipped_Date = *ZERO;

 // OR DB1.Event Code is Invoiced thru History
 OR DB1.Event_Code >= '06';
 AND DB1.Event_Code <= '07';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 //?** Test Order Header selection criteria
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Load Plan Order is yes
 IF DB1.Load_Plan_Order = 'Y';

 EXECUTE FUNCTION(RTV Load Status        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1297640;
 PARAMETER(DB1.Load_ID);
 PARAMETER(WRK.Load_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.Load Status is Locked or Shipped
 IF WRK.Load_Status = 'L'/'S';

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 ENDIF;

 ENDIF;

}


CASE;

// IF PGM.*Record selected is *NO
IF PGM.*Record_selected = 'N';

// Send error message - 'Order not Avail for Invoicing'
ERROR(USR2210);
MSGPARM(DTL.Order_Number);

ENDIF;

ENDIF;

//?Validate Load Number        Issue if Live w/TPM       E004019
CASE;

// IF DTL.Load ID NE WRK.ZERO
IF DTL.Load_ID <> WRK.ZERO;

EXECUTE FUNCTION(RTV Load Status        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1297640;
PARAMETER(DTL.Load_ID);
PARAMETER(WRK.Load_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

}


//?05/23/16 RMC E4119 remove live with tpm check
//?Load must be shipped
CASE;

// IF WRK.Load Status is Shipped
IF WRK.Load_Status = 'S';

//?Load must be shipped
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Load was not found or load is not shipped.'
ERROR(USR2315);
MSGPARM(DTL.Load_ID);

ENDIF;

ENDIF;

ENDIF;

//?USER: User defined action

MOVE *ALL (To: PAR From: DTL);

// PAR.Company Number Pass   USR = DTL.Company Number
PAR.Company_Number_Pass_USR = DTL.Company_Number;

// PAR.Order Number 2  PASS  USR = DTL.Load ID
PAR.Order_Number_2_PASS_USR = DTL.Load_ID;

// PAR.Order Number 1  PASS  USR = DTL.Order Number
PAR.Order_Number_1_PASS_USR = DTL.Order_Number;

// PAR.Thru Date Pass        USR = DTL.Requested Ship Date
PAR.Thru_Date_Pass_USR = DTL.Requested_Ship_Date;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

//?6/18/2007 slm Allow X Co was being handled. If user changed
//?          the screen the job was submitted without the user
//?          seeing the revenue dates. Don't submit until the
//?          screen has been redisplayed on a company# change.
CASE;

// IF WRK.Company NE DTL.Company Number
IF WRK.Company <> DTL.Company_Number;

// AND PAR.Allow Multi-Company is yes
AND PAR.Allow_Multi_Company = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Call program PRT Sbm Invc Excpt Rpt CL.
CALL PROGRAM(PRT Sbm Invc Excpt Rpt CL) ('PPX0UPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('OMS');
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Order_Number_1_PASS_USR);
PARAMETER(PAR.Thru_Date_Pass_USR);
PARAMETER(PAR.Order_Number_2_PASS_USR);
PARAMETER(1);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Status_Y_or_N);
PARAMETER('INVCEXCPTN');
PARAMETER(PAR.Process_Cust_Types_Usr);

CASE;

// IF WRK.Return Code Usr is *User Quit Requested
IF WRK.Return_Code_Usr = 'Y2U9999';

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

// Execute function SET Off Indics 99,35,36US.
EXECUTE FUNCTION(SET Off Indics 99,35,36US) TYPE(EXCUSRSRC) ('PDN7UFR');
{
 C                     SETOF                     99    SETOFF INDIC
 C                     SETOF                     35    SETOFF INDIC
 C                     SETOF                     36    SETOFF INDIC
}


// IF *OTHERWISE
IF *OTHERWISE;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

ENDIF;

// WRK.Company = DTL.Company Number
WRK.Company = DTL.Company_Number;

