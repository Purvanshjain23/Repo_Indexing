// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPXCDFR
// ?Date: 14.08.2025 Time: 03:42:09
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(RTV Sys Date Format    RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1264543;
PARAMETER(PAR.User_Profile_Name);
PARAMETER(PAR.System_Date_Format);

// PAR.User Profile Name = JOB.*USER
PAR.User_Profile_Name = JOB.*USER;

// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Printer Device = CND.Not entered
PAR.PRT_Printer_Device = *BLANK;

//?03/06/25 DN DO23471-Get 'Restrict to P2P' Flag for CST Module.
// Call program Rtv Restrict to P2P    XF.
CALL PROGRAM(Rtv Restrict to P2P    XF) ('PVKAXFR');
PARAMETER('CST');
PARAMETER(1);
PARAMETER(LCL.Restrict_to_P2P);

//?03/06/25 DN DO23471-Get 'Company Organization' Value.
EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
PARAMETER(PAR.Company_Number);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize subfile control

CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

// CTL.Record Status = CND.Active
CTL.Record_Status = 'A';

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

ENDIF;

// CTL.City = CTL.USR 15 Text           USR
CTL.City = CTL.USR_15_Text_USR;

// CTL.Type of Customer Sav = CTL.Type of Customer
CTL.Type_of_Customer_USR_SAV = CTL.Type_of_Customer_USR;

//?USER: Initialize subfile record from DBF record

// RCD.Type of Customer = CND.*BLANKS
RCD.Type_of_Customer_USR = *BLANK;

// RCD.Name  25A  USR = DB1.Customer Name
RCD.Name_25A_USR = DB1.Customer_Name;

//?** Set up Type of Customer
CASE;

// IF DB1.Ship To Customer Flag is Allow Use as Ship To Cust
IF DB1.Ship_To_Customer_Flag = 'Y';

// RCD.Type of Customer = CND.ShipTo
RCD.Type_of_Customer_USR = 'S';

CASE;

// IF DB1.A/R Customer Number EQ DB1.Ship To Customer
IF DB1.AR_Customer_Number = DB1.Ship_To_Customer;

// RCD.Type of Customer = CND.Ship to Bill To
RCD.Type_of_Customer_USR = 'X';

ENDIF;

//?** Set up Type of Customer
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DB1.A/R Customer Number EQ DB1.Ship To Customer
IF DB1.AR_Customer_Number = DB1.Ship_To_Customer;

// RCD.Type of Customer = CND.Bill To
RCD.Type_of_Customer_USR = 'B';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DB1.Parent Customer EQ DB1.Ship To Customer
IF DB1.Parent_Customer = DB1.Ship_To_Customer;

CASE;

// IF DB1.Parent Customer NE DB1.A/R Customer Number
IF DB1.Parent_Customer <> DB1.AR_Customer_Number;

// RCD.Type of Customer = CND.Parent
RCD.Type_of_Customer_USR = 'P';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?** Select by Type of Customer
CASE;

// IF CTL.Type of Customer NE WRK.BLANK
IF CTL.Type_of_Customer_USR <> WRK.BLANK;

CASE;

// IF CTL.Type of Customer EQ RCD.Type of Customer
IF CTL.Type_of_Customer_USR = RCD.Type_of_Customer_USR;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?** Select by Type of Customer
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

ENDIF;

//?** Select by Customer Name
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF CTL.Name 25A USR NE WRK.BLANK
IF CTL.Name_25A_USR <> WRK.BLANK;

// Call program CLC Call Qclscan       UP.
CALL PROGRAM(CLC Call Qclscan       UP) ('QCLSCAN');
PARAMETER(RCD.Name_25A_USR);
PARAMETER(25);
PARAMETER(1);
PARAMETER(CTL.Name_25A_USR);
PARAMETER(25);
PARAMETER(1);
PARAMETER(1);
PARAMETER(*BLANK);
PARAMETER(WRK.USR_Qclscan_Result);

CASE;

// IF WRK.USR Qclscan Result ? is Does contain
IF WRK.USR_Qclscan_Result > 0;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

// WRK.Text 1 Length USR = SUBSTRING(CTL.Name  25A  USR,CON.2,CON.1)
WRK.Text_1_Length_USR = SUBSTRING(CTL.Name_25A_USR:2:1);

// RCD.USR First New Subfile Rcd = CND.yes
RCD.USR_First_New_Subfile_Rcd = 'Y';

// PGM.*Scan limit = CON.999999
PGM.*Scan_limit = 999999;

//?** Display asterisk if A/R Comments exist
EXECUTE FUNCTION(Rtv Record count      RT) TYPE(RTVOBJ) FILE(POAVCPP)           AC1603538;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER('AR');
PARAMETER(LCL.USR_Count);
{
 //?USER: Processing if Data record not found

 // PAR.USR Count = CON.*ZERO
 PAR.USR_Count = 0;

 //?USER: Process Data record

 // PAR.USR Count = PAR.USR Count + CON.1
 PAR.USR_Count = PAR.USR_Count + 1;

}


CASE;

// IF LCL.USR Count is GT 0
IF LCL.USR_Count > *ZERO;

// RCD.USR Asterisk = CND.asterisk
RCD.USR_Asterisk = *;

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.USR Asterisk = CND.blank
RCD.USR_Asterisk = *BLANK;

ENDIF;

//?** See if ACTIVE Accrual exists for this customer
// RCD.Reverse Image Flag USR = CND.No
RCD.Reverse_Image_Flag_USR = 'N';

EXECUTE FUNCTION(Val Accrual Exists    RT) TYPE(RTVOBJ) FILE(OMHOREP)           AC1680822;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.Period Ending Date GE JOB.*Job date
 IF DB1.Period_Ending_Date >= JOB.*Job_date;

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// RCD.Reverse Image Flag USR = CND.Yes
RCD.Reverse_Image_Flag_USR = 'Y';

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

// CTL.USR Name = CTL.Name 25A USR
CTL.USR_Name = CTL.Name_25A_USR;

//?** Convert name to 25 char upper case
CASE;

// IF CTL.USR Name NE WRK.USR Name
IF CTL.USR_Name <> WRK.USR_Name;

// Execute function CVT Str to Upper Alpha US.
EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
PARAMETER(CTL.USR_Name);
PARAMETER(CTL.USR_Name);
{
 PDWEUFR:  PGM PARM(&STRIN &STROUT)

 CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
}


// WRK.USR Name = CTL.USR Name
WRK.USR_Name = CTL.USR_Name;

// CTL.Name 25A USR = CTL.USR Name
CTL.Name_25A_USR = CTL.USR_Name;

// WRK.Name 25A USR = CTL.USR Name
WRK.Name_25A_USR = CTL.USR_Name;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?** Check for Type of Customer request
CASE;

// IF CTL.Type of Customer Sav NE CTL.Type of Customer
IF CTL.Type_of_Customer_USR_SAV <> CTL.Type_of_Customer_USR;

// CTL.Type of Customer Sav = CTL.Type of Customer
CTL.Type_of_Customer_USR_SAV = CTL.Type_of_Customer_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?** Position on ship to customers
CASE;

// IF CTL.Ship To Customer NE CTL.Ship to Customer      USR
IF CTL.Ship_To_Customer <> CTL.Ship_to_Customer_USR;

// CTL.Ship to Customer      USR = CTL.Ship To Customer
CTL.Ship_to_Customer_USR = CTL.Ship_To_Customer;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?** Position on city
CASE;

// IF CTL.City NE CTL.USR 15 Text           USR
IF CTL.City <> CTL.USR_15_Text_USR;

// CTL.City = CTL.USR 15 Text           USR
CTL.City = CTL.USR_15_Text_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?F8=dsp ecommerce stuff
CASE;

// IF CTL.*CMD key is CF08
IF CTL.*CMD_key = '08';

//?03/06/25 DN DO23471-Inform User to Use P2P to Perform Action.
CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

// AND LCL.Restrict to P2P is Yes
AND LCL.Restrict_to_P2P = 'Y';

// Call program Pmt Use P2P Info Msg   PV.
CALL PROGRAM(Pmt Use P2P Info Msg   PV) ('PVJ7PVR');

QUIT;

ENDIF;

// Call program WW Cust EComm-DspOnly  DF.
CALL PROGRAM(WW Cust EComm-DspOnly  DF) ('PBYPDFR');

ENDIF;

//?F21=Process Print Phone Listing
CASE;

// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

// PAR.Customer Number Pass  USR = CTL.Ship To Customer
PAR.Customer_Number_Pass_USR = CTL.Ship_To_Customer;

// Call program PRT Pass Cst/Cty/St/StsUP.
CALL PROGRAM(PRT Pass Cst/Cty/St/StsUP) ('PDYQUPR');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('A/R');
PARAMETER('PDCOPCLP');
PARAMETER(PAR.Customer_Number_Pass_USR);
PARAMETER(CTL.City);
PARAMETER(CTL.State_Code);
PARAMETER(CTL.Record_Status);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER('Print Customer');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(*BLANK);

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

ENDIF;

//?Process Print Accrual List
CASE;

// IF CTL.*CMD key is CF22
IF CTL.*CMD_key = '22';

//?** Print Customer Accrual report by sales route
// Call program Pmt Cust Acrl - both  PV.
CALL PROGRAM(Pmt Cust Acrl - both  PV) ('PPBVPVR');

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?USER: Process subfile record (Pre-confirm)

//?5=Display A/R Summary
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

//?** Put blanks in new input parm for the DSP A/R Summary  03/27/06 LJB
// WRK.USR Check Y/N Status = CND.no
WRK.USR_Check_Y_N_Status = 'N';

// Call program DSP A/R Summary       XF.
CALL PROGRAM(DSP A/R Summary       XF) ('PPG5XFR');
PARAMETER(PAR.Company_Number);
PARAMETER(RCD.AR_Customer_Number);
PARAMETER(WRK.USR_Check_Y_N_Status);

ENDIF;

//?8=Display Detail
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

//?03/06/25 DN DO23471-Inform User to Use P2P to Perform Action.
CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

// AND LCL.Restrict to P2P is Yes
AND LCL.Restrict_to_P2P = 'Y';

// Call program Pmt Use P2P Info Msg   PV.
CALL PROGRAM(Pmt Use P2P Info Msg   PV) ('PVJ7PVR');

QUIT;

ENDIF;

// Call program Dsp Customer/Co Cust  D2.
CALL PROGRAM(Dsp Customer/Co Cust  D2) ('PMDKD2R');
PARAMETER(RCD.Ship_To_Customer);

ENDIF;

//?11=Display customer accruals
CASE;

// IF RCD.*SFLSEL is Option 11
IF RCD.*SFLSEL = '11';

// Call program WW Cust Accruals-Dsp  DF.
CALL PROGRAM(WW Cust Accruals-Dsp  DF) ('PPB2DFR');
PARAMETER(RCD.Ship_To_Customer);

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

