// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PUZQE1R
// ?Date: 14.08.2025 Time: 03:51:45
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications History
DO;

//?Shefali(PIO) 08-13-25 WI1374 State EPR Packaging Fee
//?        Regulation Fee field added to file with size 3.4
//?        Regulation Fee field added to screen as optional
//?Eric L 05-2023 WI572 CA Prop 12 Creation
ENDDO;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(NLL.Company_Number);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(NLL.Allow_Multi_Company);
PARAMETER(NLL.Default_Printer);
PARAMETER(NLL.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PGM.*Program mode = PAR.*Program mode
PGM.*Program_mode = PAR.*Program_mode;

//?USER: Initialize key screen

MOVE *ALL (To: KEY From: PAR);

//?USER: Validate key screen

CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

EXECUTE FUNCTION(RTV Reg Code PUC8REP) TYPE(RTVOBJ) FILE(PUC8REP)               AC2214513;
PARAMETER(PAR.Regulation_Code);
PARAMETER(PAR.Regulation_ID);

//?Errmsg
CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// Send error message - 'Regulation Code Mst already exists.'
ERROR(USR5317);
MSGPARM(KEY.Regulation_Code);

ENDIF;

EXECUTE FUNCTION(RTV Reg Code ID PUC8REP) TYPE(RTVOBJ) FILE(PUC8REP)            AC2214518;
PARAMETER(KEY.Regulation_ID);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


//?Errmsg
CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// Send error message - 'Regulation Code Identifier already exists'
ERROR(USR5314);
MSGPARM(KEY.Regulation_ID);

ENDIF;

ENDIF;

//?USER: Initialize detail screen (new record)

MOVE *ALL (To: DTL From: KEY);

// DTL.Default Regulation = CND.No
DTL.Default_Regulation = 'N';

//?USER: Initialize detail screen (existing record)

MOVE *ALL (To: DTL From: KEY);

// LCL.Regulation Code (LC) = CON.Default
LCL.Regulation_Code_LC = 'Default';

//?If 'DEFAULT' or 'Default'
CASE;

// IF DTL.Regulation Code is Default
IF DTL.Regulation_Code = 'DEFAULT';

// OR DTL.Regulation Code EQ LCL.Regulation Code (LC)
OR DTL.Regulation_Code = LCL.Regulation_Code_LC;

// LCL.Protect Screen Field = CND.Yes
LCL.Protect_Screen_Field = 'Y';

ENDIF;

//?USER: Validate detail screen fields

CASE;

// IF DTL.Regulation Code is Default
IF DTL.Regulation_Code = 'DEFAULT';

// DTL.Default Regulation = CND.Yes
DTL.Default_Regulation = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Default Regulation = CND.No
DTL.Default_Regulation = 'N';

ENDIF;

EXECUTE FUNCTION(RTV Val State Cd,rtn   RT) TYPE(RTVOBJ) FILE(CAACREP)          AC1573109;
PARAMETER(DTL.Regulation_Origin);
PARAMETER(PGM.*Return_code);
{
 //?USER: Processing if Data record not found

 // PAR.*Return code = CND.*Record does not exist
 PAR.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PAR.*Return code = CND.*Normal
 PAR.*Return_code = *BLANK;

 QUIT;

}


//?Validate Further
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Validate Further
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Country & Active   RT) TYPE(RTVOBJ) FILE(OME5REP)          AC2188228;
PARAMETER(DTL.Regulation_Origin);
PARAMETER(LCL.Record_Status);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 // PAR.Record Status = DB1.Record Status
 PAR.Record_Status = DB1.Record_Status;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Record Status = CND.Inactive
 PAR.Record_Status = 'I';

 ENDIF;

}


CASE;

// IF LCL.Record Status is Active
IF LCL.Record_Status = 'A';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid State or Country'
ERROR(USR5313);
MSGPARM(DTL.Regulation_Origin);

ENDIF;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Create Regulation Code Ms) TYPE(CRTOBJ) FILE(PUC8REP)          AC2214489;
PARAMETER(DTL.Regulation_Code);
PARAMETER(DTL.Regulation_ID);
PARAMETER(DTL.Regulation_Origin);
PARAMETER(DTL.Regulation_Desc);
PARAMETER(DTL.ShipTo_Est_Stm_Stop_Tot);
PARAMETER(DTL.Ship_To_Cust_Type);
PARAMETER(DTL.Default_Regulation);
PARAMETER(DTL.NonComp_Stm1_StopTot);
PARAMETER(DTL.NonComp_Stm2_StopTot);
PARAMETER(DTL.Compliancy_Stm1_Item);
PARAMETER(DTL.Compliancy_Stm2_Item);
PARAMETER(DTL.Regulation_Fee);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  //?*** Set RECORD STATUS field. ***
  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  //?*** Set CREATE fields. ***
  // PAR.Create Date = JOB.*Job date
  PAR.Create_Date = JOB.*Job_date;

  // PAR.Create Time = JOB.*Job time
  PAR.Create_Time = JOB.*Job_time;

  // PAR.Create User = JOB.*USER
  PAR.Create_User = JOB.*USER;

  // PAR.Create Program = JOB.*PROGRAM
  PAR.Create_Program = JOB.*PROGRAM;

  //?*** Set CHANGE fields. ***
  // PAR.Change Date = CON.*ZERO
  PAR.Change_Date = *ZERO;

  // PAR.Change Time = CON.*ZERO
  PAR.Change_Time = *ZERO;

  // PAR.Change User = CON.*BLANK
  PAR.Change_User = *BLANK;

  // PAR.Change Program = CON.*BLANK
  PAR.Change_Program = *BLANK;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Change Regulation Code Ms) TYPE(CHGOBJ) FILE(PUC8REP)          AC2214490;
PARAMETER(DTL.Regulation_Code);
PARAMETER(DTL.Regulation_ID);
PARAMETER(DTL.Regulation_Origin);
PARAMETER(DTL.Regulation_Desc);
PARAMETER(DTL.ShipTo_Est_Stm_Stop_Tot);
PARAMETER(DTL.Ship_To_Cust_Type);
PARAMETER(DTL.Default_Regulation);
PARAMETER(DTL.NonComp_Stm1_StopTot);
PARAMETER(DTL.NonComp_Stm2_StopTot);
PARAMETER(DTL.Compliancy_Stm1_Item);
PARAMETER(DTL.Compliancy_Stm2_Item);
PARAMETER(DTL.Regulation_Fee);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);

//?USER: Process command keys

CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

CASE;

// IF DTL.*CMD key is CF21
IF DTL.*CMD_key = '21';

// Call program Zzz Regulation Rcd    UP.
CALL PROGRAM(Zzz Regulation Rcd    UP) ('PUYXUPC');
PARAMETER(LCL.Return_Code_Usr);
PARAMETER('C/S');
PARAMETER('PUZSPFR');
PARAMETER(DTL.Regulation_Code);
PARAMETER(DTL.Regulation_ID);
PARAMETER(LCL.System_Value_Numeric);
PARAMETER('Print Record');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);

CASE;

// IF LCL.Return Code Usr is *Blank
IF LCL.Return_Code_Usr = *BLANK;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

RETURN;

