// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PWADEFR
// ?Date: 14.08.2025 Time: 02:55:50
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification History
DO;

//?R7522 JJH 12/26/16 - Producer Distribution Entry
//?- Change the Entry Type field to use Condition Value Displayer
//?R7522 JJH 12/26/16 - Producer Distribution Entry
//?- Create Edt Prdcr Distrib Ent
ENDDO;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(LCL.Oms_Warehouse_Code);
PARAMETER(LCL.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(LCL.Oms_SalesPerson_Code);
PARAMETER(LCL.Oms_Allow_Multi_Company);
PARAMETER(LCL.Oms_Default_Printer);
PARAMETER(LCL.Oms_Name);
PARAMETER(LCL.Oms_System_Value_Alpha);
PARAMETER(LCL.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


//?USER: Initialize subfile header

EXECUTE FUNCTION(Producer Name         DRV) TYPE(DRVFLD)                        AB1100361;
PARAMETER(CTL.Producer_Name_DRV);
PARAMETER(CTL.PD_Producer_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.Producer_Name_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Initialize subfile record (existing record)

//?SEL: Distribution Code
CASE;

// IF CTL.PD Distribution Code is Entered
IF CTL.PD_Distribution_Code <> *BLANK;

CASE;

// IF CTL.PD Distribution Code NE RCD.PD Distribution Code
IF CTL.PD_Distribution_Code <> RCD.PD_Distribution_Code;

// PGM.*Reload subfile = CND.*NO
PGM.*Reload_subfile = 'N';

ENDIF;

ENDIF;

//?USER: Initialize subfile record (new record)

// RCD.RS Record Status = CND.Active
RCD.RS_Record_Status = 'A';

//?CALC: Subfile control function fields

EXECUTE FUNCTION(Producer Name         DRV) TYPE(DRVFLD)                        AB1100361;
PARAMETER(CTL.Producer_Name_DRV);
PARAMETER(CTL.PD_Producer_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.Producer_Name_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Validate subfile record fields

//?<F4> Distribution Code
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> RCD.PD Distribution Code
AND PGM.*Cursor_field = RCD.PD_Distribution_Code;

// Call program Sel Prdcr DistributionSR.
CALL PROGRAM(Sel Prdcr DistributionSR) ('PVPVSRR');
PARAMETER(RCD.PD_Distribution_Code);

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Prdcr Distrib Ent IF) TYPE(EXCINTFUN) FILE(PVCRREP)        AB1329425;
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PD_Distribution_Code);
PARAMETER(RCD.PDE_Sequence_Number);
PARAMETER(RCD.PDE_Name);
PARAMETER(RCD.PDE_Destination_Type);
PARAMETER(RCD.PDE_Destination);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
{
 //?Execute internal function

 //?Get Next PDE Sequence Number
 EXECUTE FUNCTION(Rtv Prdcr Distrib Seq RT) TYPE(RTVOBJ) FILE(PVCRREP)           AB1329426;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PD_Distribution_Code);
 PARAMETER(LCL.PDE_Sequence_Number);
 {
  //?USER: Processing if Data record not found

  // PAR.PDE Sequence Number = CON.1
  PAR.PDE_Sequence_Number = 1;

  //?USER: Process Data record

  // PAR.PDE Sequence Number = DB1.PDE Sequence Number + CON.1
  PAR.PDE_Sequence_Number = DB1.PDE_Sequence_Number + 1;

  QUIT;

 }

 //?Create Producer Distribution Ent
 EXECUTE FUNCTION(Crt Prdcr Distrib Ent CR) TYPE(CRTOBJ) FILE(PVCRREP)           AB1329347;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PD_Distribution_Code);
 PARAMETER(LCL.PDE_Sequence_Number);
 PARAMETER(PAR.PDE_Name);
 PARAMETER(PAR.PDE_Destination_Type);
 PARAMETER(PAR.PDE_Destination);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp-Sys Dt  IF) TYPE(EXCINTFUN)                      AB1237005;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // Call program Rtv System Date & Tim UP.
   CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
   PARAMETER(PAR.RS_Date_Added);
   PARAMETER(PAR.RS_Time_Added);

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


//?USER: Delete DBF record

EXECUTE FUNCTION(Del Prdcr Distrib Ent DL) TYPE(DLTOBJ) FILE(PVCRREP)           AB1329349;
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PD_Distribution_Code);
PARAMETER(RCD.PDE_Sequence_Number);

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Prdcr Distrib Ent CH) TYPE(CHGOBJ) FILE(PVCRREP)           AB1329348;
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PD_Distribution_Code);
PARAMETER(RCD.PDE_Sequence_Number);
PARAMETER(RCD.PDE_Name);
PARAMETER(RCD.PDE_Destination_Type);
PARAMETER(RCD.PDE_Destination);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // Call program Rtv System Date & Tim UP.
  CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


