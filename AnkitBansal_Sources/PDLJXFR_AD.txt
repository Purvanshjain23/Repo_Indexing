// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDLJXFR
// ?Date: 14.08.2025 Time: 03:28:38
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?S13634 RMC Change for PP1 Date method
//?FP1110 change for DOS date method
EXECUTE FUNCTION(CLC Date Method        RT) TYPE(RTVOBJ) FILE(PDIPREP)          AC1284176;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Date_Method_Code);
PARAMETER(PAR.Actual_Shipped_Date);
PARAMETER(PAR.Requested_Delivery_Date);
PARAMETER(PAR.Pricing_Retrieved_Amount);
PARAMETER(PAR.Event_Called_From);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(PAR.OD_Market_Begin_Date);
PARAMETER(PAR.OD_Market_Ending_Date);
PARAMETER(PAR.Date_Used_for_Calculation);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Date_Error_Returned);
{
 //?USER: Process Data record

 //?Process "Control Date" field (Par.Date used for Calculation)
 //?*** Load with Market Pricing Date
 CASE;

 // IF DB1.CTL Date Type is Mkt Pricing Date
 IF DB1.CTL_Date_Type = 'M';

 // PAR.Date Used for Calculation = PAR.Market Pricing Date
 PAR.Date_Used_for_Calculation = PAR.Market_Pricing_Date;

 ENDIF;

 //?*** Load with Requested Delivery Date
 CASE;

 // IF DB1.CTL Date Type is Requested Delivery Date
 IF DB1.CTL_Date_Type = 'D';

 // PAR.Date Used for Calculation = PAR.Requested Delivery Date
 PAR.Date_Used_for_Calculation = PAR.Requested_Delivery_Date;

 ENDIF;

 //?*** Load with Current Date
 CASE;

 // IF DB1.CTL Date Type is Current Date
 IF DB1.CTL_Date_Type = 'C';

 // PAR.Date Used for Calculation = JOB.*Job date
 PAR.Date_Used_for_Calculation = JOB.*Job_date;

 ENDIF;

 //?*** Load with Requested Ship Date (PK0022)
 CASE;

 // IF DB1.CTL Date Type is Requested Ship Date
 IF DB1.CTL_Date_Type = 'Q';

 // PAR.Date Used for Calculation = PAR.Requested Ship Date
 PAR.Date_Used_for_Calculation = PAR.Requested_Ship_Date;

 ENDIF;

 //?*** Load with Market, Actual Ship, or Requested Ship date
 CASE;

 // IF DB1.CTL Date Type is Mkt Prc Date/Ship Date
 IF DB1.CTL_Date_Type = 'P';

 CASE;

 // IF PAR.Market Pricing Date is EQ Zero
 IF PAR.Market_Pricing_Date = *ZERO;

 CASE;

 // IF PAR.Actual Shipped Date is not entered
 IF PAR.Actual_Shipped_Date = *ZERO;

 // PAR.Date Used for Calculation = PAR.Requested Ship Date
 PAR.Date_Used_for_Calculation = PAR.Requested_Ship_Date;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Date Used for Calculation = PAR.Actual Shipped Date
 PAR.Date_Used_for_Calculation = PAR.Actual_Shipped_Date;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Date Used for Calculation = PAR.Market Pricing Date
 PAR.Date_Used_for_Calculation = PAR.Market_Pricing_Date;

 ENDIF;

 ENDIF;

 //?*** Load with Actual or Requested Ship date
 CASE;

 // IF DB1.CTL Date Type is Ship Date
 IF DB1.CTL_Date_Type = 'S';

 CASE;

 // IF PAR.Actual Shipped Date is not entered
 IF PAR.Actual_Shipped_Date = *ZERO;

 // PAR.Date Used for Calculation = PAR.Requested Ship Date
 PAR.Date_Used_for_Calculation = PAR.Requested_Ship_Date;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Date Used for Calculation = PAR.Actual Shipped Date
 PAR.Date_Used_for_Calculation = PAR.Actual_Shipped_Date;

 ENDIF;

 ENDIF;

 //?*** Load with Ordered Date
 CASE;

 // IF DB1.CTL Date Type is Ordered Date
 IF DB1.CTL_Date_Type = 'O';

 // PAR.Date Used for Calculation = PAR.Date of Orig. Entry Det.
 PAR.Date_Used_for_Calculation = PAR.Date_of_Orig_Entry_Det;

 ENDIF;

 //?*** Load with Date Range Average (From Date/To Date)
 CASE;

 // IF DB1.CTL Date Type is Date Range Average
 IF DB1.CTL_Date_Type = 'R';

 // PAR.Period Beginning Date = PAR.OD Market Begin Date
 PAR.Period_Beginning_Date = PAR.OD_Market_Begin_Date;

 // PAR.Period Ending Date = PAR.OD Market Ending Date
 PAR.Period_Ending_Date = PAR.OD_Market_Ending_Date;

 // PAR.Date Used for Calculation = PAR.OD Market Ending Date
 PAR.Date_Used_for_Calculation = PAR.OD_Market_Ending_Date;

 ENDIF;

 //?*** Load with Week Start based on Requested Ship Date
 CASE;

 // IF DB1.CTL Date Type is Week Start
 IF DB1.CTL_Date_Type = 'W';

 EXECUTE FUNCTION(Rtv Prior Sunday      RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1410775;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Requested_Ship_Date);
 PARAMETER(PAR.Date_Used_for_Calculation);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Day of Week is Sunday
  IF DB1.Day_of_Week = '1';

  // PAR.Date Sun USR = DB1.Post to G/L Date
  PAR.Date_Sun_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

 }

 ENDIF;

 //?Calculate Week Average Pricing (WPA, WP1, WP2, etc.)
 CASE;

 // IF DB1.CTL Average is yes
 IF DB1.CTL_Average = 'Y';

 // AND DB1.CTL Prior Week is Not Zeros
 AND DB1.CTL_Prior_Week <> *ZERO;

 // AND DB1.CTL Day of Week is EQ 0 (Not Used)
 AND DB1.CTL_Day_of_Week = *ZERO;

 //?Calc Beginning and Ending dates
 DO;

 //?Beginning Date
 // WRK.Day of Week (SYN) USR = PAR.Date Used for Calculation *DAY OF WEEK
 WRK.Day_of_Week_SYN_USR = DATEDTLS(PAR.Date_Used_for_Calculation 'DW' 1111111 'NONE' 'N'
 1);

 // PAR.Period Beginning Date = PAR.Date Used for Calculation
 PAR.Period_Beginning_Date = PAR.Date_Used_for_Calculation;

 //?Loop to find Sunday of calc date week
 // DOW WRK.Day of Week (SYN) USR is zNot Sunday
 DOW WRK.Day_of_Week_SYN_USR <> 7;

 // PAR.Period Beginning Date = PAR.Period Beginning Date + CON.-1 *DAYS
 PAR.Period_Beginning_Date = DATEINCR(PAR.Period_Beginning_Date '-1' 'DY' 1111111 'NONE'
 'N' 1);

 // WRK.Day of Week (SYN) USR = PAR.Period Beginning Date *DAY OF WEEK
 WRK.Day_of_Week_SYN_USR = DATEDTLS(PAR.Period_Beginning_Date 'DW' 1111111 'NONE' 'N' 1);

 ENDDO;

 // Calc days to subtract
 WRK.@Calc_50 = *ZERO - ( DB1.CTL_Prior_Week * 7 );

 // PAR.Period Beginning Date = PAR.Period Beginning Date + WRK.@Calc 5,0 *DAYS
 PAR.Period_Beginning_Date = DATEINCR(PAR.Period_Beginning_Date WRK.@Calc_50 'DY' 1111111
 'NONE' 'N' 1);

 //?Ending Date
 // PAR.Period Ending Date = PAR.Period Beginning Date + CON.6 *DAYS
 PAR.Period_Ending_Date = DATEINCR(PAR.Period_Beginning_Date 6 'DY' 1111111 'NONE' 'N' 1);

 // Number of days to add
 WRK.@Calc_50 = 7 * ( DB1.CTL_Number_of_Times - 1 );

 // PAR.Period Ending Date = PAR.Period Ending Date + WRK.@Calc 5,0 *DAYS
 PAR.Period_Ending_Date = DATEINCR(PAR.Period_Ending_Date WRK.@Calc_50 'DY' 1111111
 'NONE' 'N' 1);

 ENDDO;

 EXECUTE FUNCTION(Clc Date to Use f/Clc RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1998935;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Period_Ending_Date);
 PARAMETER(PAR.Date_Used_for_Calculation);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Public Holiday Status is yes
  IF DB1.Public_Holiday_Status = 'Y';

  // OR DB1.Day of Week is Sat/Sun
  OR DB1.Day_of_Week = '7'/'1';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date Used for Calculation = DB1.Post to G/L Date
  PAR.Date_Used_for_Calculation = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

 }

 //?Calculate Average
 CASE;

 // IF DB1.System using Date Method is Hog Procurement Eval.
 IF DB1.System_using_Date_Method = 'H';

 //?** Do not include Saturday for calculating the Average. **
 EXECUTE FUNCTION(RTV Wk Pr Avg Prc HPE RT) TYPE(RTVOBJ) FILE(OMF0CPP)           AC1460877;
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(PAR.Period_Ending_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Period_Beginning_Date);
 PARAMETER(PAR.Period_Ending_Date);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Date_Error_Returned);
 {
  //?USER: Initialize routine

  // PAR.USR Counter = CON.*ZERO
  PAR.USR_Counter = *ZERO;

  // WRK.Pricing Retrieved Amount = CON.*ZERO
  WRK.Pricing_Retrieved_Amount = *ZERO;

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  CASE;

  // IF DB1.Market Price Date GE PAR.Period Beginning Date
  IF DB1.Market_Price_Date >= PAR.Period_Beginning_Date;

  // AND DB1.Market Price Date LE PAR.Period Ending Date
  AND DB1.Market_Price_Date <= PAR.Period_Ending_Date;

  EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
  PARAMETER(PAR.Company_Number);
  PARAMETER(DB1.Market_Price_Date);
  PARAMETER(WRK.Accounting_Period_Code);
  PARAMETER(PAR.Day_of_Week);
  PARAMETER(WRK.Week_Number);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.Day of Week is Week Days
  IF PAR.Day_of_Week = '6'/'2'/'5'/'3'/'4';

  // PAR.USR Counter = PAR.USR Counter + CON.1
  PAR.USR_Counter = PAR.USR_Counter + 1;

  // WRK.Pricing Retrieved Amount = WRK.Pricing Retrieved Amount + DB1.Price per Pric
  WRK.Pricing_Retrieved_Amount = WRK.Pricing_Retrieved_Amount + DB1.Commodity_Market_Price;

  //?Calculate Average (Divide Total Price by Counter)
  CASE;

  // IF PAR.USR Counter is GE 1
  IF PAR.USR_Counter >= 1;

  // PAR.Pricing Retrieved Amount = WRK.Pricing Retrieved Amount / PAR.USR Counter *
  PAR.Pricing_Retrieved_Amount = WRK.Pricing_Retrieved_Amount / PAR.USR_Counter;

  //?Calculate Average (Divide Total Price by Counter)
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date Error Returned = CND.Week Prior Avg Error
  PAR.Date_Error_Returned = 'WPA';

  ENDIF;

  ENDIF;

  ENDIF;

 }

 // LCL.Pricing Date Used = PAR.Period Ending Date
 LCL.Pricing_Date_Used = PAR.Period_Ending_Date;

 //?Calculate Average
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Week Prior Avg Prc RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1293094;
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(PAR.Period_Ending_Date);
 PARAMETER(PAR.Period_Beginning_Date);
 PARAMETER(PAR.Period_Ending_Date);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Date_Error_Returned);
 {
  //?USER: Initialize routine

  // PAR.USR Counter = CON.*ZERO
  PAR.USR_Counter = *ZERO;

  // WRK.Pricing Retrieved Amount = CON.*ZERO
  WRK.Pricing_Retrieved_Amount = *ZERO;

  // LCL.First Time Flag = CND.Yes
  LCL.First_Time_Flag = 'Y';

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  CASE;

  // IF LCL.First Time Flag is Yes
  IF LCL.First_Time_Flag = 'Y';

  // PAR.Pricing Date Used = DB1.Market Price Date
  PAR.Pricing_Date_Used = DB1.Market_Price_Date;

  // LCL.First Time Flag = CND.NO
  LCL.First_Time_Flag = 'N';

  ENDIF;

  CASE;

  // IF DB1.Market Price Date GE PAR.Period Beginning Date
  IF DB1.Market_Price_Date >= PAR.Period_Beginning_Date;

  // AND DB1.Market Price Date LE PAR.Period Ending Date
  AND DB1.Market_Price_Date <= PAR.Period_Ending_Date;

  // PAR.USR Counter = PAR.USR Counter + CON.1
  PAR.USR_Counter = PAR.USR_Counter + 1;

  // WRK.Pricing Retrieved Amount = WRK.Pricing Retrieved Amount + DB1.Price per Pric
  WRK.Pricing_Retrieved_Amount = WRK.Pricing_Retrieved_Amount + DB1.Commodity_Market_Price;

  //?Calculate Average (Divide Total Price by Counter)
  CASE;

  // IF PAR.USR Counter is GE 1
  IF PAR.USR_Counter >= 1;

  // PAR.Pricing Retrieved Amount = WRK.Pricing Retrieved Amount / PAR.USR Counter *
  PAR.Pricing_Retrieved_Amount = WRK.Pricing_Retrieved_Amount / PAR.USR_Counter;

  //?Calculate Average (Divide Total Price by Counter)
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date Error Returned = CND.Week Prior Avg Error
  PAR.Date_Error_Returned = 'WPA';

  ENDIF;

  ENDIF;

 }

 ENDIF;

 // PAR.Pricing Date Used = LCL.Pricing Date Used
 PAR.Pricing_Date_Used = LCL.Pricing_Date_Used;

 //?Process Error Condition & Retrieve price if called from O/E
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // OR PAR.Pricing Retrieved Amount EQ WRK.ZERO
 OR PAR.Pricing_Retrieved_Amount = WRK.ZERO;

 // OR PAR.Date Used for Calculation NE LCL.Pricing Date Used
 OR ( PAR.Date_Used_for_Calculation <> LCL.Pricing_Date_Used;

 // AND DB1.System using Date Method is NE HPE
 AND DB1.System_using_Date_Method = 'A'/'I'/'O'/'S' );

 // PAR.Price Status = CND.Unpriced
 PAR.Price_Status = 'U';

 // PAR.Date Error Returned = CND.Week Prior Avg Error
 PAR.Date_Error_Returned = 'WPA';

 EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(PAR.Date_Used_for_Calculation);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Pricing_Date_Used);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Commodity Market Price = DB1.Commodity Market Price
  PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

 //?If market price not found use market code from company/item
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // Call program RTV Dflt Comm Mrkt     XF.
 CALL PROGRAM(RTV Dflt Comm Mrkt     XF) ('PDMNXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Default_Commod_Mark_basis);

 CASE;

 // IF PAR.Commodity Market Code NE PAR.Default Commod Mark basis
 IF PAR.Commodity_Market_Code <> PAR.Default_Commod_Mark_basis;

 EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
 PARAMETER(PAR.Default_Commod_Mark_basis);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(PAR.Date_Used_for_Calculation);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Pricing_Date_Used);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Commodity Market Price = DB1.Commodity Market Price
  PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?Calculate Non Average Pricing Methods
 CASE;

 // IF DB1.CTL Prior Week is Zero
 IF DB1.CTL_Prior_Week = *ZERO;

 // AND DB1.CTL Prior is Not Yes
 AND DB1.CTL_Prior = *BLANK/'N';

 // AND DB1.CTL Number of Times is Zero
 AND DB1.CTL_Number_of_Times = *ZERO;

 // AND DB1.CTL Average is no
 AND DB1.CTL_Average = 'N';

 // AND DB1.CTL Day of Week is EQ 0 (Not Used)
 AND DB1.CTL_Day_of_Week = *ZERO;

 //?Act/MKT/week start
 CASE;

 // IF DB1.CTL Date Type is Requested Delivery Date
 IF DB1.CTL_Date_Type = 'D';

 CASE;

 // IF PAR.Requested Delivery Date is not entered
 IF PAR.Requested_Delivery_Date = *ZERO;

 // PAR.Price Status = CND.Unpriced
 PAR.Price_Status = 'U';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.CTL Prior is blank
 IF DB1.CTL_Prior = *BLANK;

 EXECUTE FUNCTION(RTV Prior Day          RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1425841;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Date_Used_for_Calculation);
 PARAMETER(DB1.CTL_Prior_Day);
 PARAMETER(PAR.Date_From_USR);
 {
  //?USER: Initialize routine

  // PAR.Count USR = CON.*ZERO
  PAR.Count_USR = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF DB1.Day of Week is Week Days
  IF DB1.Day_of_Week = '6'/'2'/'5'/'3'/'4';

  // AND DB1.Public Holiday Status is no
  AND DB1.Public_Holiday_Status = 'N';

  CASE;

  // IF PAR.CTL Prior Day EQ PAR.Count USR
  IF PAR.CTL_Prior_Day = PAR.Count_USR;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

  ENDIF;

 }

 // PAR.Date Used for Calculation = PAR.Date From             USR
 PAR.Date_Used_for_Calculation = PAR.Date_From_USR;

 ENDIF;

 ENDIF;

 //?Act/MKT/week start
 // IF DB1.CTL Date Type is Ship Date
 IF DB1.CTL_Date_Type = 'S';

 CASE;

 // IF PAR.Actual Shipped Date is not entered
 IF PAR.Actual_Shipped_Date = *ZERO;

 // PAR.Price Status = CND.Unpriced
 PAR.Price_Status = 'U';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.CTL Prior is blank
 IF DB1.CTL_Prior = *BLANK;

 EXECUTE FUNCTION(RTV Prior Day          RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1425841;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Date_Used_for_Calculation);
 PARAMETER(DB1.CTL_Prior_Day);
 PARAMETER(PAR.Date_From_USR);
 {
  //?USER: Initialize routine

  // PAR.Count USR = CON.*ZERO
  PAR.Count_USR = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF DB1.Day of Week is Week Days
  IF DB1.Day_of_Week = '6'/'2'/'5'/'3'/'4';

  // AND DB1.Public Holiday Status is no
  AND DB1.Public_Holiday_Status = 'N';

  CASE;

  // IF PAR.CTL Prior Day EQ PAR.Count USR
  IF PAR.CTL_Prior_Day = PAR.Count_USR;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

  ENDIF;

 }

 // PAR.Date Used for Calculation = PAR.Date From             USR
 PAR.Date_Used_for_Calculation = PAR.Date_From_USR;

 ENDIF;

 ENDIF;

 //?Act/MKT/week start
 // IF DB1.CTL Date Type is Mkt Prc Date/Ship Date
 IF DB1.CTL_Date_Type = 'P';

 CASE;

 // IF PAR.Market Pricing Date is EQ Zero
 IF PAR.Market_Pricing_Date = *ZERO;

 CASE;

 // IF PAR.Actual Shipped Date is not entered
 IF PAR.Actual_Shipped_Date = *ZERO;

 // PAR.Price Status = CND.Unpriced
 PAR.Price_Status = 'U';

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Prior Day          RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1425841;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Date_Used_for_Calculation);
 PARAMETER(DB1.CTL_Prior_Day);
 PARAMETER(PAR.Date_From_USR);
 {
  //?USER: Initialize routine

  // PAR.Count USR = CON.*ZERO
  PAR.Count_USR = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF DB1.Day of Week is Week Days
  IF DB1.Day_of_Week = '6'/'2'/'5'/'3'/'4';

  // AND DB1.Public Holiday Status is no
  AND DB1.Public_Holiday_Status = 'N';

  CASE;

  // IF PAR.CTL Prior Day EQ PAR.Count USR
  IF PAR.CTL_Prior_Day = PAR.Count_USR;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

  ENDIF;

 }

 // PAR.Date Used for Calculation = PAR.Date From             USR
 PAR.Date_Used_for_Calculation = PAR.Date_From_USR;

 ENDIF;

 ENDIF;

 //?Act/MKT/week start
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.CTL Date Type is Week Start
 IF DB1.CTL_Date_Type = 'W';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?SPECIAL FOR PP1 - IF SATURDAY/Sunday THEN GET FRIDAYS PRICE
 CASE;

 // IF PAR.Date Method Code is PP1 - HPE
 IF PAR.Date_Method_Code = 'PP1';

 EXECUTE FUNCTION(RTV Day of Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1658821;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Date_Used_for_Calculation);
 PARAMETER(LCL.Day_of_Week);
 {
  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Day of Week is Saturday
 IF LCL.Day_of_Week = '7';

 // OR LCL.Day of Week is Sunday
 OR LCL.Day_of_Week = '1';

 //?RMC 8.20.18 GET FRIDAY'S PRICE IF SATURDAY KILL DATE
 EXECUTE FUNCTION(RTV Prior Day-Nt MktDy RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC2158119;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Date_Used_for_Calculation);
 PARAMETER(DB1.CTL_Prior_Day);
 PARAMETER(PAR.Date_From_USR);
 {
  //?USER: Initialize routine

  // PAR.Count USR = CON.*ZERO
  PAR.Count_USR = *ZERO;

  //?USER: Process Data record

  //?remove days of week check -> go back 1 day , period!
  CASE;

  // IF DB1.Public Holiday Status is no
  IF DB1.Public_Holiday_Status = 'N';

  CASE;

  // IF PAR.CTL Prior Day EQ PAR.Count USR
  IF PAR.CTL_Prior_Day = PAR.Count_USR;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  CASE;

  // IF DB1.Day of Week is Sunday
  IF DB1.Day_of_Week = '1';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

  ENDIF;

  ENDIF;

 }

 // PAR.Date Used for Calculation = PAR.Date From             USR
 PAR.Date_Used_for_Calculation = PAR.Date_From_USR;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Prior Day          RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1425841;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Date_Used_for_Calculation);
 PARAMETER(DB1.CTL_Prior_Day);
 PARAMETER(PAR.Date_From_USR);
 {
  //?USER: Initialize routine

  // PAR.Count USR = CON.*ZERO
  PAR.Count_USR = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF DB1.Day of Week is Week Days
  IF DB1.Day_of_Week = '6'/'2'/'5'/'3'/'4';

  // AND DB1.Public Holiday Status is no
  AND DB1.Public_Holiday_Status = 'N';

  CASE;

  // IF PAR.CTL Prior Day EQ PAR.Count USR
  IF PAR.CTL_Prior_Day = PAR.Count_USR;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

  ENDIF;

 }

 // PAR.Date Used for Calculation = PAR.Date From             USR
 PAR.Date_Used_for_Calculation = PAR.Date_From_USR;

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Date Method Code is NOT PP1
 IF PAR.Date_Method_Code <> 'PP1';

 EXECUTE FUNCTION(RTV Prior Day          RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1425841;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Date_Used_for_Calculation);
 PARAMETER(DB1.CTL_Prior_Day);
 PARAMETER(PAR.Date_From_USR);
 {
  //?USER: Initialize routine

  // PAR.Count USR = CON.*ZERO
  PAR.Count_USR = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF DB1.Day of Week is Week Days
  IF DB1.Day_of_Week = '6'/'2'/'5'/'3'/'4';

  // AND DB1.Public Holiday Status is no
  AND DB1.Public_Holiday_Status = 'N';

  CASE;

  // IF PAR.CTL Prior Day EQ PAR.Count USR
  IF PAR.CTL_Prior_Day = PAR.Count_USR;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

  ENDIF;

 }

 // PAR.Date Used for Calculation = PAR.Date From             USR
 PAR.Date_Used_for_Calculation = PAR.Date_From_USR;

 ENDIF;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(PAR.Date_Used_for_Calculation);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(WRK.Pricing_Date_Used);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Commodity Market Price = DB1.Commodity Market Price
  PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

 // PAR.Pricing Date Used = WRK.Pricing Date Used
 PAR.Pricing_Date_Used = WRK.Pricing_Date_Used;

 CASE;

 // IF PAR.Date Used for Calculation NE WRK.Pricing Date Used
 IF PAR.Date_Used_for_Calculation <> WRK.Pricing_Date_Used;

 // OR PGM.*Return code is *Record does not exist
 OR PGM.*Return_code = 'Y2U0005';

 // PAR.Date Error Returned = CND.Price Date Matching Error
 PAR.Date_Error_Returned = 'KPD';

 // PAR.Price Status = CND.Unpriced
 PAR.Price_Status = 'U';

 ENDIF;

 //?If market price not found use market code from company/item
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // Call program RTV Dflt Comm Mrkt     XF.
 CALL PROGRAM(RTV Dflt Comm Mrkt     XF) ('PDMNXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Default_Commod_Mark_basis);

 CASE;

 // IF PAR.Commodity Market Code NE PAR.Default Commod Mark basis
 IF PAR.Commodity_Market_Code <> PAR.Default_Commod_Mark_basis;

 EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
 PARAMETER(PAR.Default_Commod_Mark_basis);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(PAR.Date_Used_for_Calculation);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Pricing_Date_Used);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Commodity Market Price = DB1.Commodity Market Price
  PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

 ENDIF;

 ENDIF;

 //?Calculate Non Average Pricing Methods
 // IF DB1.CTL Prior Day is Zero
 IF DB1.CTL_Prior_Day = *ZERO;

 // AND DB1.CTL Prior Week is Zero
 AND DB1.CTL_Prior_Week = *ZERO;

 // AND DB1.CTL Prior is yes
 AND DB1.CTL_Prior = 'Y';

 // AND DB1.CTL Number of Times is Zero
 AND DB1.CTL_Number_of_Times = *ZERO;

 // AND DB1.CTL Average is Not Yes
 AND DB1.CTL_Average = *BLANK/'N';

 // AND DB1.CTL Day of Week is Not Equal to Zero
 AND DB1.CTL_Day_of_Week <> *ZERO;

 //?OD/RQS/ASD/MKD&ASD
 CASE;

 // IF DB1.CTL Date Type is Ordered Date
 IF DB1.CTL_Date_Type = 'O';

 CASE;

 // IF PAR.Date of Orig. Entry Det. is not entered
 IF PAR.Date_of_Orig_Entry_Det = *ZERO;

 // PAR.Price Status = CND.Unpriced
 PAR.Price_Status = 'U';

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Prior DOW         RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC2004131;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Date_Used_for_Calculation);
 PARAMETER(DB1.CTL_Day_of_Week);
 PARAMETER(PAR.Date_From_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // LCL.CTL Day of Week = CVTVAR(DB1.Day of Week)
  LCL.CTL_Day_of_Week = CVTVAR(DB1.Day_of_Week);

  CASE;

  // IF PAR.CTL Day of Week EQ LCL.CTL Day of Week
  IF PAR.CTL_Day_of_Week = LCL.CTL_Day_of_Week;

  CASE;

  // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
  IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  ENDIF;

 }

 // PAR.Date Used for Calculation = PAR.Date From             USR
 PAR.Date_Used_for_Calculation = PAR.Date_From_USR;

 ENDIF;

 //?OD/RQS/ASD/MKD&ASD
 // IF DB1.CTL Date Type is Requested Delivery Date
 IF DB1.CTL_Date_Type = 'D';

 CASE;

 // IF PAR.Requested Delivery Date is not entered
 IF PAR.Requested_Delivery_Date = *ZERO;

 // PAR.Price Status = CND.Unpriced
 PAR.Price_Status = 'U';

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Prior DOW         RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC2004131;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Date_Used_for_Calculation);
 PARAMETER(DB1.CTL_Day_of_Week);
 PARAMETER(PAR.Date_From_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // LCL.CTL Day of Week = CVTVAR(DB1.Day of Week)
  LCL.CTL_Day_of_Week = CVTVAR(DB1.Day_of_Week);

  CASE;

  // IF PAR.CTL Day of Week EQ LCL.CTL Day of Week
  IF PAR.CTL_Day_of_Week = LCL.CTL_Day_of_Week;

  CASE;

  // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
  IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  ENDIF;

 }

 // PAR.Date Used for Calculation = PAR.Date From             USR
 PAR.Date_Used_for_Calculation = PAR.Date_From_USR;

 ENDIF;

 //?OD/RQS/ASD/MKD&ASD
 // IF DB1.CTL Date Type is Ship Date
 IF DB1.CTL_Date_Type = 'S';

 CASE;

 // IF PAR.Actual Shipped Date is not entered
 IF PAR.Actual_Shipped_Date = *ZERO;

 // PAR.Price Status = CND.Unpriced
 PAR.Price_Status = 'U';

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Prior DOW         RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC2004131;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Date_Used_for_Calculation);
 PARAMETER(DB1.CTL_Day_of_Week);
 PARAMETER(PAR.Date_From_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // LCL.CTL Day of Week = CVTVAR(DB1.Day of Week)
  LCL.CTL_Day_of_Week = CVTVAR(DB1.Day_of_Week);

  CASE;

  // IF PAR.CTL Day of Week EQ LCL.CTL Day of Week
  IF PAR.CTL_Day_of_Week = LCL.CTL_Day_of_Week;

  CASE;

  // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
  IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  ENDIF;

 }

 // PAR.Date Used for Calculation = PAR.Date From             USR
 PAR.Date_Used_for_Calculation = PAR.Date_From_USR;

 ENDIF;

 //?OD/RQS/ASD/MKD&ASD
 // IF DB1.CTL Date Type is Mkt Prc Date/Ship Date
 IF DB1.CTL_Date_Type = 'P';

 CASE;

 // IF PAR.Market Pricing Date is EQ Zero
 IF PAR.Market_Pricing_Date = *ZERO;

 CASE;

 // IF PAR.Actual Shipped Date is not entered
 IF PAR.Actual_Shipped_Date = *ZERO;

 // PAR.Price Status = CND.Unpriced
 PAR.Price_Status = 'U';

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Prior DOW         RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC2004131;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Date_Used_for_Calculation);
 PARAMETER(DB1.CTL_Day_of_Week);
 PARAMETER(PAR.Date_From_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // LCL.CTL Day of Week = CVTVAR(DB1.Day of Week)
  LCL.CTL_Day_of_Week = CVTVAR(DB1.Day_of_Week);

  CASE;

  // IF PAR.CTL Day of Week EQ LCL.CTL Day of Week
  IF PAR.CTL_Day_of_Week = LCL.CTL_Day_of_Week;

  CASE;

  // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
  IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  ENDIF;

 }

 // PAR.Date Used for Calculation = PAR.Date From             USR
 PAR.Date_Used_for_Calculation = PAR.Date_From_USR;

 ENDIF;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(PAR.Date_Used_for_Calculation);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(WRK.Pricing_Date_Used);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Commodity Market Price = DB1.Commodity Market Price
  PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

 // PAR.Pricing Date Used = WRK.Pricing Date Used
 PAR.Pricing_Date_Used = WRK.Pricing_Date_Used;

 CASE;

 // IF PAR.Date Used for Calculation NE WRK.Pricing Date Used
 IF PAR.Date_Used_for_Calculation <> WRK.Pricing_Date_Used;

 // OR PGM.*Return code is *Record does not exist
 OR PGM.*Return_code = 'Y2U0005';

 // PAR.Date Error Returned = CND.Price Date Matching Error
 PAR.Date_Error_Returned = 'KPD';

 // PAR.Price Status = CND.Unpriced
 PAR.Price_Status = 'U';

 ENDIF;

 //?If market price not found use market code from company/item
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // Call program RTV Dflt Comm Mrkt     XF.
 CALL PROGRAM(RTV Dflt Comm Mrkt     XF) ('PDMNXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Default_Commod_Mark_basis);

 CASE;

 // IF PAR.Commodity Market Code NE PAR.Default Commod Mark basis
 IF PAR.Commodity_Market_Code <> PAR.Default_Commod_Mark_basis;

 EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
 PARAMETER(PAR.Default_Commod_Mark_basis);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(PAR.Date_Used_for_Calculation);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Pricing_Date_Used);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Commodity Market Price = DB1.Commodity Market Price
  PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 //?Calculate Day Prior Average
 CASE;

 // IF DB1.CTL Average is yes
 IF DB1.CTL_Average = 'Y';

 // AND DB1.CTL Number of Times is Not Zeros
 AND DB1.CTL_Number_of_Times <> *ZERO;

 // AND DB1.CTL Prior Day is Not Zeros
 AND ( DB1.CTL_Prior_Day <> *ZERO;

 // OR DB1.CTL Day of Week is Not Equal to Zero
 OR DB1.CTL_Day_of_Week <> *ZERO );

 //?Find date used for calc by prior day or day of week
 CASE;

 // IF DB1.CTL Prior Day is Not Zeros
 IF DB1.CTL_Prior_Day <> *ZERO;

 EXECUTE FUNCTION(RTV Prior Day          RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1425841;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Date_Used_for_Calculation);
 PARAMETER(DB1.CTL_Prior_Day);
 PARAMETER(PAR.Period_Beginning_Date);
 {
  //?USER: Initialize routine

  // PAR.Count USR = CON.*ZERO
  PAR.Count_USR = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF DB1.Day of Week is Week Days
  IF DB1.Day_of_Week = '6'/'2'/'5'/'3'/'4';

  // AND DB1.Public Holiday Status is no
  AND DB1.Public_Holiday_Status = 'N';

  CASE;

  // IF PAR.CTL Prior Day EQ PAR.Count USR
  IF PAR.CTL_Prior_Day = PAR.Count_USR;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

  ENDIF;

 }

 EXECUTE FUNCTION(RTV End Date for #Days RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1409345;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Period_Beginning_Date);
 PARAMETER(DB1.CTL_Number_of_Times);
 PARAMETER(WRK.Date_From_USR);
 {
  //?USER: Initialize routine

  // PAR.Count USR = CON.1
  PAR.Count_USR = 1;

  // PAR.Date From             USR = CON.*ZERO
  PAR.Date_From_USR = *ZERO;

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Public Holiday Status is no
  IF DB1.Public_Holiday_Status = 'N';

  // AND DB1.Day of Week is Week Days
  AND DB1.Day_of_Week = '6'/'2'/'5'/'3'/'4';

  CASE;

  // IF PAR.Count USR EQ PAR.CTL Number of Times
  IF PAR.Count_USR = PAR.CTL_Number_of_Times;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

  ENDIF;

 }

 //?If a date was found then move it into period end date else use begin date
 CASE;

 // IF WRK.Date From             USR is Not zeros
 IF WRK.Date_From_USR <> *ZERO;

 // PAR.Period Ending Date = WRK.Date From             USR
 PAR.Period_Ending_Date = WRK.Date_From_USR;

 //?If a date was found then move it into period end date else use begin date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Period Ending Date = PAR.Period Beginning Date
 PAR.Period_Ending_Date = PAR.Period_Beginning_Date;

 ENDIF;

 //?Find date used for calc by prior day or day of week
 // IF DB1.CTL Day of Week is Not Equal to Zero
 IF DB1.CTL_Day_of_Week <> *ZERO;

 CASE;

 // IF DB1.System using Date Method is Hog Procurement Eval.
 IF DB1.System_using_Date_Method = 'H';

 EXECUTE FUNCTION(Rtv Prc Dte w/DOW HPE RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1467953;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Date_Used_for_Calculation);
 PARAMETER(DB1.CTL_Number_of_Times);
 PARAMETER(DB1.CTL_Day_of_Week);
 PARAMETER(WRK.Date_From_USR);
 PARAMETER(WRK.Date_To_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // WRK.CTL Day of Week = CVTVAR(DB1.Day of Week)
  WRK.CTL_Day_of_Week = CVTVAR(DB1.Day_of_Week);

  //?The To Date will be the day of the week passed in
  CASE;

  // IF DB1.Public Holiday Status is no
  IF DB1.Public_Holiday_Status = 'N';

  // AND PAR.CTL Day of Week EQ WRK.CTL Day of Week
  AND PAR.CTL_Day_of_Week = WRK.CTL_Day_of_Week;

  // AND PAR.Count USR is Zero
  AND PAR.Count_USR = *ZERO;

  // PAR.Date To               USR = DB1.Post to G/L Date
  PAR.Date_To_USR = DB1.Post_to_G_L_Date;

  // PAR.Count USR = CON.1
  PAR.Count_USR = 1;

  ENDIF;

  //?The From Date will be Number of Times less the To Date
  CASE;

  // IF PAR.Count USR is GT 0
  IF PAR.Count_USR > *ZERO;

  CASE;

  // IF DB1.Day of Week is Week Days
  IF DB1.Day_of_Week = '6'/'2'/'5'/'3'/'4';

  // AND DB1.Public Holiday Status is no
  AND DB1.Public_Holiday_Status = 'N';

  CASE;

  // IF PAR.Count USR EQ PAR.CTL Number of Times
  IF PAR.Count_USR = PAR.CTL_Number_of_Times;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

  ENDIF;

  ENDIF;

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Prior Day by Day   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1409333;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Date_Used_for_Calculation);
 PARAMETER(DB1.CTL_Number_of_Times);
 PARAMETER(DB1.CTL_Day_of_Week);
 PARAMETER(WRK.Date_From_USR);
 PARAMETER(WRK.Date_To_USR);
 {
  //?USER: Initialize routine

  // PAR.Date From             USR = CON.*ZERO
  PAR.Date_From_USR = *ZERO;

  // PAR.Date To               USR = CON.*ZERO
  PAR.Date_To_USR = *ZERO;

  // PAR.Count USR = CON.*ZERO
  PAR.Count_USR = *ZERO;

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // WRK.CTL Day of Week = CVTVAR(DB1.Day of Week)
  WRK.CTL_Day_of_Week = CVTVAR(DB1.Day_of_Week);

  //?The To Date will be the day of the week passed in
  CASE;

  // IF DB1.Public Holiday Status is no
  IF DB1.Public_Holiday_Status = 'N';

  // AND PAR.CTL Day of Week EQ WRK.CTL Day of Week
  AND PAR.CTL_Day_of_Week = WRK.CTL_Day_of_Week;

  // AND PAR.Post to G/L Date NE DB1.Post to G/L Date
  AND PAR.Post_to_G_L_Date <> DB1.Post_to_G_L_Date;

  // AND PAR.Count USR is Zero
  AND PAR.Count_USR = *ZERO;

  // PAR.Date To               USR = DB1.Post to G/L Date
  PAR.Date_To_USR = DB1.Post_to_G_L_Date;

  // PAR.Count USR = CON.1
  PAR.Count_USR = 1;

  ENDIF;

  //?The From Date will be Number of Times less the To Date
  CASE;

  // IF PAR.Count USR is GT 0
  IF PAR.Count_USR > *ZERO;

  CASE;

  // IF PAR.Count USR EQ PAR.CTL Number of Times
  IF PAR.Count_USR = PAR.CTL_Number_of_Times;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

  ENDIF;

 }

 ENDIF;

 //?If a from Dt was found then move it into period begin date else date used
 CASE;

 // IF WRK.Date From             USR is Not zeros
 IF WRK.Date_From_USR <> *ZERO;

 // PAR.Period Beginning Date = WRK.Date From             USR
 PAR.Period_Beginning_Date = WRK.Date_From_USR;

 //?If a from Dt was found then move it into period begin date else date used
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Period Beginning Date = PAR.Date Used for Calculation
 PAR.Period_Beginning_Date = PAR.Date_Used_for_Calculation;

 ENDIF;

 //?If To date was found then move it into period end date else Begin date
 CASE;

 // IF WRK.Date To               USR is Not Zero
 IF WRK.Date_To_USR <> *ZERO;

 // PAR.Period Ending Date = WRK.Date To               USR
 PAR.Period_Ending_Date = WRK.Date_To_USR;

 //?If To date was found then move it into period end date else Begin date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Period Ending Date = PAR.Period Beginning Date
 PAR.Period_Ending_Date = PAR.Period_Beginning_Date;

 ENDIF;

 ENDIF;

 //?Calculate Average
 CASE;

 // IF DB1.System using Date Method is Hog Procurement Eval.
 IF DB1.System_using_Date_Method = 'H';

 //?** Do not include Saturday for calculating the Average. **
 EXECUTE FUNCTION(RTV Wk Pr Avg Prc HPE RT) TYPE(RTVOBJ) FILE(OMF0CPP)           AC1460877;
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(PAR.Period_Ending_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Period_Beginning_Date);
 PARAMETER(PAR.Period_Ending_Date);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Date_Error_Returned);
 {
  //?USER: Initialize routine

  // PAR.USR Counter = CON.*ZERO
  PAR.USR_Counter = *ZERO;

  // WRK.Pricing Retrieved Amount = CON.*ZERO
  WRK.Pricing_Retrieved_Amount = *ZERO;

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  CASE;

  // IF DB1.Market Price Date GE PAR.Period Beginning Date
  IF DB1.Market_Price_Date >= PAR.Period_Beginning_Date;

  // AND DB1.Market Price Date LE PAR.Period Ending Date
  AND DB1.Market_Price_Date <= PAR.Period_Ending_Date;

  EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
  PARAMETER(PAR.Company_Number);
  PARAMETER(DB1.Market_Price_Date);
  PARAMETER(WRK.Accounting_Period_Code);
  PARAMETER(PAR.Day_of_Week);
  PARAMETER(WRK.Week_Number);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.Day of Week is Week Days
  IF PAR.Day_of_Week = '6'/'2'/'5'/'3'/'4';

  // PAR.USR Counter = PAR.USR Counter + CON.1
  PAR.USR_Counter = PAR.USR_Counter + 1;

  // WRK.Pricing Retrieved Amount = WRK.Pricing Retrieved Amount + DB1.Price per Pric
  WRK.Pricing_Retrieved_Amount = WRK.Pricing_Retrieved_Amount + DB1.Commodity_Market_Price;

  //?Calculate Average (Divide Total Price by Counter)
  CASE;

  // IF PAR.USR Counter is GE 1
  IF PAR.USR_Counter >= 1;

  // PAR.Pricing Retrieved Amount = WRK.Pricing Retrieved Amount / PAR.USR Counter *
  PAR.Pricing_Retrieved_Amount = WRK.Pricing_Retrieved_Amount / PAR.USR_Counter;

  //?Calculate Average (Divide Total Price by Counter)
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date Error Returned = CND.Week Prior Avg Error
  PAR.Date_Error_Returned = 'WPA';

  ENDIF;

  ENDIF;

  ENDIF;

 }

 // LCL.Pricing Date Used = PAR.Period Ending Date
 LCL.Pricing_Date_Used = PAR.Period_Ending_Date;

 //?Calculate Average
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Week Prior Avg Prc RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1293094;
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(PAR.Period_Ending_Date);
 PARAMETER(PAR.Period_Beginning_Date);
 PARAMETER(PAR.Period_Ending_Date);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Date_Error_Returned);
 {
  //?USER: Initialize routine

  // PAR.USR Counter = CON.*ZERO
  PAR.USR_Counter = *ZERO;

  // WRK.Pricing Retrieved Amount = CON.*ZERO
  WRK.Pricing_Retrieved_Amount = *ZERO;

  // LCL.First Time Flag = CND.Yes
  LCL.First_Time_Flag = 'Y';

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  CASE;

  // IF LCL.First Time Flag is Yes
  IF LCL.First_Time_Flag = 'Y';

  // PAR.Pricing Date Used = DB1.Market Price Date
  PAR.Pricing_Date_Used = DB1.Market_Price_Date;

  // LCL.First Time Flag = CND.NO
  LCL.First_Time_Flag = 'N';

  ENDIF;

  CASE;

  // IF DB1.Market Price Date GE PAR.Period Beginning Date
  IF DB1.Market_Price_Date >= PAR.Period_Beginning_Date;

  // AND DB1.Market Price Date LE PAR.Period Ending Date
  AND DB1.Market_Price_Date <= PAR.Period_Ending_Date;

  // PAR.USR Counter = PAR.USR Counter + CON.1
  PAR.USR_Counter = PAR.USR_Counter + 1;

  // WRK.Pricing Retrieved Amount = WRK.Pricing Retrieved Amount + DB1.Price per Pric
  WRK.Pricing_Retrieved_Amount = WRK.Pricing_Retrieved_Amount + DB1.Commodity_Market_Price;

  //?Calculate Average (Divide Total Price by Counter)
  CASE;

  // IF PAR.USR Counter is GE 1
  IF PAR.USR_Counter >= 1;

  // PAR.Pricing Retrieved Amount = WRK.Pricing Retrieved Amount / PAR.USR Counter *
  PAR.Pricing_Retrieved_Amount = WRK.Pricing_Retrieved_Amount / PAR.USR_Counter;

  //?Calculate Average (Divide Total Price by Counter)
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date Error Returned = CND.Week Prior Avg Error
  PAR.Date_Error_Returned = 'WPA';

  ENDIF;

  ENDIF;

 }

 ENDIF;

 // PAR.Pricing Date Used = LCL.Pricing Date Used
 PAR.Pricing_Date_Used = LCL.Pricing_Date_Used;

 //?Process Error Condition & Retrieve price if called from O/E
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // OR PAR.Pricing Retrieved Amount EQ WRK.ZERO
 OR PAR.Pricing_Retrieved_Amount = WRK.ZERO;

 // OR PAR.Date Used for Calculation NE LCL.Pricing Date Used
 OR PAR.Date_Used_for_Calculation <> LCL.Pricing_Date_Used;

 // PAR.Price Status = CND.Unpriced
 PAR.Price_Status = 'U';

 // PAR.Date Error Returned = CND.Week Prior Avg Error
 PAR.Date_Error_Returned = 'WPA';

 EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(PAR.Date_Used_for_Calculation);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Pricing_Date_Used);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Commodity Market Price = DB1.Commodity Market Price
  PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

 //?If market price not found use market code from company/item
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // Call program RTV Dflt Comm Mrkt     XF.
 CALL PROGRAM(RTV Dflt Comm Mrkt     XF) ('PDMNXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Default_Commod_Mark_basis);

 CASE;

 // IF PAR.Commodity Market Code NE PAR.Default Commod Mark basis
 IF PAR.Commodity_Market_Code <> PAR.Default_Commod_Mark_basis;

 EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
 PARAMETER(PAR.Default_Commod_Mark_basis);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(PAR.Date_Used_for_Calculation);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Pricing_Date_Used);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Commodity Market Price = DB1.Commodity Market Price
  PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?Calculate Date Range Average (DRA)
 CASE;

 // IF DB1.CTL Average is yes
 IF DB1.CTL_Average = 'Y';

 // AND DB1.CTL Prior Week is Zero
 AND DB1.CTL_Prior_Week = *ZERO;

 // AND DB1.CTL Day of Week is EQ 0 (Not Used)
 AND DB1.CTL_Day_of_Week = *ZERO;

 //?Calculate Average
 CASE;

 // IF DB1.System using Date Method is Hog Procurement Eval.
 IF DB1.System_using_Date_Method = 'H';

 //?** Do not include Saturday for calculating the Average. **
 EXECUTE FUNCTION(RTV Wk Pr Avg Prc HPE RT) TYPE(RTVOBJ) FILE(OMF0CPP)           AC1460877;
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(PAR.Period_Ending_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Period_Beginning_Date);
 PARAMETER(PAR.Period_Ending_Date);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Date_Error_Returned);
 {
  //?USER: Initialize routine

  // PAR.USR Counter = CON.*ZERO
  PAR.USR_Counter = *ZERO;

  // WRK.Pricing Retrieved Amount = CON.*ZERO
  WRK.Pricing_Retrieved_Amount = *ZERO;

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  CASE;

  // IF DB1.Market Price Date GE PAR.Period Beginning Date
  IF DB1.Market_Price_Date >= PAR.Period_Beginning_Date;

  // AND DB1.Market Price Date LE PAR.Period Ending Date
  AND DB1.Market_Price_Date <= PAR.Period_Ending_Date;

  EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
  PARAMETER(PAR.Company_Number);
  PARAMETER(DB1.Market_Price_Date);
  PARAMETER(WRK.Accounting_Period_Code);
  PARAMETER(PAR.Day_of_Week);
  PARAMETER(WRK.Week_Number);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.Day of Week is Week Days
  IF PAR.Day_of_Week = '6'/'2'/'5'/'3'/'4';

  // PAR.USR Counter = PAR.USR Counter + CON.1
  PAR.USR_Counter = PAR.USR_Counter + 1;

  // WRK.Pricing Retrieved Amount = WRK.Pricing Retrieved Amount + DB1.Price per Pric
  WRK.Pricing_Retrieved_Amount = WRK.Pricing_Retrieved_Amount + DB1.Commodity_Market_Price;

  //?Calculate Average (Divide Total Price by Counter)
  CASE;

  // IF PAR.USR Counter is GE 1
  IF PAR.USR_Counter >= 1;

  // PAR.Pricing Retrieved Amount = WRK.Pricing Retrieved Amount / PAR.USR Counter *
  PAR.Pricing_Retrieved_Amount = WRK.Pricing_Retrieved_Amount / PAR.USR_Counter;

  //?Calculate Average (Divide Total Price by Counter)
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date Error Returned = CND.Week Prior Avg Error
  PAR.Date_Error_Returned = 'WPA';

  ENDIF;

  ENDIF;

  ENDIF;

 }

 // LCL.Pricing Date Used = PAR.Period Ending Date
 LCL.Pricing_Date_Used = PAR.Period_Ending_Date;

 //?Calculate Average
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Week Prior Avg Prc RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1293094;
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(PAR.Period_Ending_Date);
 PARAMETER(PAR.Period_Beginning_Date);
 PARAMETER(PAR.Period_Ending_Date);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Date_Error_Returned);
 {
  //?USER: Initialize routine

  // PAR.USR Counter = CON.*ZERO
  PAR.USR_Counter = *ZERO;

  // WRK.Pricing Retrieved Amount = CON.*ZERO
  WRK.Pricing_Retrieved_Amount = *ZERO;

  // LCL.First Time Flag = CND.Yes
  LCL.First_Time_Flag = 'Y';

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  CASE;

  // IF LCL.First Time Flag is Yes
  IF LCL.First_Time_Flag = 'Y';

  // PAR.Pricing Date Used = DB1.Market Price Date
  PAR.Pricing_Date_Used = DB1.Market_Price_Date;

  // LCL.First Time Flag = CND.NO
  LCL.First_Time_Flag = 'N';

  ENDIF;

  CASE;

  // IF DB1.Market Price Date GE PAR.Period Beginning Date
  IF DB1.Market_Price_Date >= PAR.Period_Beginning_Date;

  // AND DB1.Market Price Date LE PAR.Period Ending Date
  AND DB1.Market_Price_Date <= PAR.Period_Ending_Date;

  // PAR.USR Counter = PAR.USR Counter + CON.1
  PAR.USR_Counter = PAR.USR_Counter + 1;

  // WRK.Pricing Retrieved Amount = WRK.Pricing Retrieved Amount + DB1.Price per Pric
  WRK.Pricing_Retrieved_Amount = WRK.Pricing_Retrieved_Amount + DB1.Commodity_Market_Price;

  //?Calculate Average (Divide Total Price by Counter)
  CASE;

  // IF PAR.USR Counter is GE 1
  IF PAR.USR_Counter >= 1;

  // PAR.Pricing Retrieved Amount = WRK.Pricing Retrieved Amount / PAR.USR Counter *
  PAR.Pricing_Retrieved_Amount = WRK.Pricing_Retrieved_Amount / PAR.USR_Counter;

  //?Calculate Average (Divide Total Price by Counter)
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date Error Returned = CND.Week Prior Avg Error
  PAR.Date_Error_Returned = 'WPA';

  ENDIF;

  ENDIF;

 }

 ENDIF;

 // PAR.Pricing Date Used = LCL.Pricing Date Used
 PAR.Pricing_Date_Used = LCL.Pricing_Date_Used;

 //?Process Error Condition & Retrieve price if called from O/E
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // OR PAR.Pricing Retrieved Amount EQ WRK.ZERO
 OR PAR.Pricing_Retrieved_Amount = WRK.ZERO;

 // OR PAR.Date Used for Calculation NE LCL.Pricing Date Used
 OR PAR.Date_Used_for_Calculation <> LCL.Pricing_Date_Used;

 // PAR.Price Status = CND.Unpriced
 PAR.Price_Status = 'U';

 // PAR.Date Error Returned = CND.Week Prior Avg Error
 PAR.Date_Error_Returned = 'WPA';

 EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(PAR.Date_Used_for_Calculation);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Pricing_Date_Used);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Commodity Market Price = DB1.Commodity Market Price
  PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

 //?If market price not found use market code from company/item
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // Call program RTV Dflt Comm Mrkt     XF.
 CALL PROGRAM(RTV Dflt Comm Mrkt     XF) ('PDMNXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Default_Commod_Mark_basis);

 CASE;

 // IF PAR.Commodity Market Code NE PAR.Default Commod Mark basis
 IF PAR.Commodity_Market_Code <> PAR.Default_Commod_Mark_basis;

 EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
 PARAMETER(PAR.Default_Commod_Mark_basis);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(PAR.Date_Used_for_Calculation);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Pricing_Date_Used);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Commodity Market Price = DB1.Commodity Market Price
  PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

}


