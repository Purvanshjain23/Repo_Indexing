// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMSBDFR
// ?Date: 14.08.2025 Time: 03:43:55
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

//?USER: Initialize subfile control

CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

// CTL.Record Status = CND.Active
CTL.Record_Status = 'A';

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

ENDIF;

//?USER: Process subfile control (Pre-confirm)

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?F6=Create
CASE;

// IF CTL.*CMD key is *Create
IF CTL.*CMD_key = '06';

CASE;

// IF PAR.Access Denied (Y/N) is yes
IF PAR.Access_Denied_Y_N = 'Y';

// Send error message - 'Function not allowed.'
ERROR(USR1833);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Edt Freight Chrg INT  ER.
CALL PROGRAM(Edt Freight Chrg INT  ER) ('PMSCE1R');
PARAMETER(CTL.FC_Code);

ENDIF;

ENDIF;

//?F10=Edit xref to TMS EDI
CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

CASE;

// IF PAR.Access Denied (Y/N) is yes
IF PAR.Access_Denied_Y_N = 'Y';

// Send error message - 'Function not allowed.'
ERROR(USR1833);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Edt FC Xref to TMS    EF.
CALL PROGRAM(Edt FC Xref to TMS    EF) ('PBYZEFR');

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?2=Edit
CASE;

// IF RCD.*SFLSEL is *Edit
IF RCD.*SFLSEL = '2'/'2';

CASE;

// IF PAR.Access Denied (Y/N) is yes
IF PAR.Access_Denied_Y_N = 'Y';

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Edt Freight Chrg INT  ER.
CALL PROGRAM(Edt Freight Chrg INT  ER) ('PMSCE1R');
PARAMETER(RCD.FC_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

ENDIF;

//?3=Copy
CASE;

// IF RCD.*SFLSEL is *Copy
IF RCD.*SFLSEL = '3';

CASE;

// IF PAR.Access Denied (Y/N) is yes
IF PAR.Access_Denied_Y_N = 'Y';

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Pmt Copy FC to new    PV.
CALL PROGRAM(Pmt Copy FC to new    PV) ('PBY3PVR');
PARAMETER(RCD.FC_Code);
PARAMETER(RCD.FC_Description);
PARAMETER(LCL.Text_USR_6);

CASE;

// IF LCL.Text USR 6 NE WRK.Blank 6 USR
IF LCL.Text_USR_6 <> WRK.Blank_6_USR;

// Call program Edt Freight Chrg INT  ER.
CALL PROGRAM(Edt Freight Chrg INT  ER) ('PMSCE1R');
PARAMETER(LCL.Text_USR_6);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

ENDIF;

ENDIF;

//?4=Delete
CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

CASE;

// IF PAR.Access Denied (Y/N) is yes
IF PAR.Access_Denied_Y_N = 'Y';

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Charge Exists     RT) TYPE(RTVOBJ) FILE(POBCCPP)           AC1868987;
PARAMETER(RCD.FC_Code);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

ENDIF;

ENDIF;

//?5=Display
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

// Call program Dsp Freight Chrg INT  DR.
CALL PROGRAM(Dsp Freight Chrg INT  DR) ('PMSED1R');
PARAMETER(RCD.FC_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?7=Edit State
CASE;

// IF RCD.*SFLSEL is Option 7
IF RCD.*SFLSEL = '7'/'7';

CASE;

// IF PAR.Access Denied (Y/N) is yes
IF PAR.Access_Denied_Y_N = 'Y';

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.FC State Select is Yes
IF RCD.FC_State_Select = 'Y';

// Call program Zzz Frt Charge State  EF.
CALL PROGRAM(Zzz Frt Charge State  EF) ('POLREFR');
PARAMETER(RCD.FC_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

ENDIF;

//?8=Edit Comment
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

// Call program Zzz FrtChrg Comment   EF.
CALL PROGRAM(Zzz FrtChrg Comment   EF) ('PMBMEFR');
PARAMETER(RCD.FC_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?9=Edit Reference
CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

CASE;

// IF PAR.Access Denied (Y/N) is yes
IF PAR.Access_Denied_Y_N = 'Y';

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.FC Reference Required is Yes
IF RCD.FC_Reference_Required = 'Y';

// Call program Zzz Frt Chrg Ref      EF.
CALL PROGRAM(Zzz Frt Chrg Ref      EF) ('PMR4EFR');
PARAMETER(RCD.FC_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

ENDIF;

//?10=Edit Company
CASE;

// IF RCD.*SFLSEL is Option 10
IF RCD.*SFLSEL = '10';

CASE;

// IF PAR.Access Denied (Y/N) is yes
IF PAR.Access_Denied_Y_N = 'Y';

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.FC Company Select is Not All
IF RCD.FC_Company_Select = 'X'/'S';

// Call program Zzz FC Company        EF.
CALL PROGRAM(Zzz FC Company        EF) ('PMF9EFR');
PARAMETER(RCD.FC_Code);
PARAMETER(RCD.FC_Company_Select);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

ENDIF;

//?11=Edit Carrier
CASE;

// IF RCD.*SFLSEL is Option 11
IF RCD.*SFLSEL = '11';

CASE;

// IF PAR.Access Denied (Y/N) is yes
IF PAR.Access_Denied_Y_N = 'Y';

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.FC Carrier Select is Not All
IF RCD.FC_Company_Carrier_Select = 'X'/'S';

// Call program Zzz FC Co/Carrier     EF.
CALL PROGRAM(Zzz FC Co/Carrier     EF) ('PMF7EFR');
PARAMETER(RCD.FC_Code);
PARAMETER(RCD.FC_Company_Carrier_Select);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

ENDIF;

//?20=Display Freight States
CASE;

// IF RCD.*SFLSEL is Option 20
IF RCD.*SFLSEL = '20';

// Call program Zzz Frt Charge State  DF.
CALL PROGRAM(Zzz Frt Charge State  DF) ('PMSFDFR');
PARAMETER(RCD.FC_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?21=Display Freight Reference
CASE;

// IF RCD.*SFLSEL is Option 21
IF RCD.*SFLSEL = '21';

// Call program Dsp Frt Chrg Ref      DF.
CALL PROGRAM(Dsp Frt Chrg Ref      DF) ('PMSGDFR');
PARAMETER(RCD.FC_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?22=Display Company
CASE;

// IF RCD.*SFLSEL is Option 22
IF RCD.*SFLSEL = '22';

// Call program Zzz FC Company        DF.
CALL PROGRAM(Zzz FC Company        DF) ('PMGBDFR');
PARAMETER(RCD.FC_Code);
PARAMETER(RCD.FC_Company_Select);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?22=Display Carrier
CASE;

// IF RCD.*SFLSEL is Option 23
IF RCD.*SFLSEL = '23';

// Call program Zzz FC Co/Carrier     DF.
CALL PROGRAM(Zzz FC Co/Carrier     DF) ('PMGADFR');
PARAMETER(RCD.FC_Code);
PARAMETER(RCD.FC_Company_Carrier_Select);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?USER: Process subfile record (Post-confirm)

//?4=Delete
CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

EXECUTE FUNCTION(Del Freight Charge    DL) TYPE(DLTOBJ) FILE(POA9REP)           AC1626733;
PARAMETER(RCD.FC_Code);

EXECUTE FUNCTION(Del Frt Charge Rate   RT) TYPE(RTVOBJ) FILE(POBBCPP)           AC1868988;
PARAMETER(RCD.FC_Code);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Del Frt Charge Rate   DL) TYPE(DLTOBJ) FILE(POBBCPP)           AC1626860;
 PARAMETER(DB1.FC_Code);
 PARAMETER(DB1.FCR_Week_Begin_Date);
}


EXECUTE FUNCTION(Del Frt Chrg Ref      RT) TYPE(RTVOBJ) FILE(PMDJREP)           AC1868990;
PARAMETER(RCD.FC_Code);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Del Frt Chrg Ref      DL) TYPE(DLTOBJ) FILE(PMDJREP)           AC1866893;
 PARAMETER(DB1.FC_Code);
 PARAMETER(DB1.CR_Reference_Code);
}


EXECUTE FUNCTION(Del Frt Charge State  RT) TYPE(RTVOBJ) FILE(POBAREP)           AC1868991;
PARAMETER(RCD.FC_Code);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Del Frt Charge State  DL) TYPE(DLTOBJ) FILE(POBAREP)           AC1626935;
 PARAMETER(DB1.FC_Code);
 PARAMETER(DB1.State_Code);
}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

