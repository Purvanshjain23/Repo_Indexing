// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDORXFR
// ?Date: 14.08.2025 Time: 03:29:09
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Zero Parameters
MOVE *ALL (To: PAR From: CON);

//?Call Program to load return parameters
CASE;

// IF PAR.Event Called From is Invoice Update
IF PAR.Event_Called_From = '02';

EXECUTE FUNCTION(CLC Formula Dtls       RT) TYPE(RTVOBJ) FILE(PDIMCPP)          AC1314951;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.PRC_STRITM_Field_USR);
PARAMETER(PAR.PRC_CIDIFF_Field_USR);
PARAMETER(PAR.PRC_TOTAL_1_USR);
PARAMETER(PAR.PRC_SUBCRD_USR);
PARAMETER(PAR.PRC_TOTAL_2_USR);
PARAMETER(PAR.PRC_TOTAL_3_USR);
PARAMETER(PAR.PRC_MSCYLD_USR);
PARAMETER(PAR.PRC_CALCED_TOTAL_USR);
PARAMETER(PAR.PRC_CIFMPF_USR);
PARAMETER(PAR.PRC_IOVRFM_USR);
PARAMETER(PAR.PRC_CFRTOV_USR);
PARAMETER(PAR.PRC_OVERAGES_USR);
PARAMETER(PAR.PRC_TOTAL_PRICE_USR);
PARAMETER(PAR.Event_Called_From);
{
 //?USER: Process Data record

 //?       01=Unused ( MKTPRC )
 //?*** 02 PROCESS COMPONANT STRITM IF SELECTED *
 CASE;

 // IF DB1.Price Method Componant is STRITM
 IF DB1.Price_Method_Componant = 'STRITM';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 // PAR.Starting Product Price = PAR.Starting Product Price + DB1.Componant Price
 PAR.Starting_Product_Price = PAR.Starting_Product_Price + DB1.Componant_Price;

 ENDIF;

 //?*** 03 PROCESS COMPONANT CIDIFF IF SELECTED *
 CASE;

 // IF DB1.Price Method Componant is CIDIFF
 IF DB1.Price_Method_Componant = 'CIDIFF';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 // PAR.USR Cust/Item Differentl = PAR.USR Cust/Item Differentl + DB1.Componant Pric
 PAR.USR_Cust_Item_Differentl = PAR.USR_Cust_Item_Differentl + DB1.Componant_Price;

 ENDIF;

 //?       04=Unused ( TCRDVY )
 //?*** 05 PROCESS COMPONANT SUBCRD IF SELECTED *
 CASE;

 // IF DB1.Price Method Componant is SUBCRD
 IF DB1.Price_Method_Componant = 'SUBCRD';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 // PAR.Credit Value = PAR.Credit Value + DB1.Componant Price
 PAR.Credit_Value = PAR.Credit_Value + DB1.Componant_Price;

 ENDIF;

 //?*** 06 PROCESS COMPONANT MSCYLD IF SELECTED *
 CASE;

 // IF DB1.Price Method Componant is MSCYLD
 IF DB1.Price_Method_Componant = 'MSCYLD';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 // PAR.Muscle Yield Price = PAR.Muscle Yield Price + DB1.Componant Price
 PAR.Muscle_Yield_Price = PAR.Muscle_Yield_Price + DB1.Componant_Price;

 ENDIF;

 //?*** 07 PROCESS COMPONANT CIFMPF IF SELECTED *
 CASE;

 // IF DB1.Price Method Componant is CIFMPF
 IF DB1.Price_Method_Componant = 'CIFMPF';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 // PAR.Formula Processing Fee = PAR.Formula Processing Fee + DB1.Componant Price
 PAR.Formula_Processing_Fee = PAR.Formula_Processing_Fee + DB1.Componant_Price;

 ENDIF;

 //?*** 08 PROCESS COMPONANT IOVRFM IF SELECTED *
 CASE;

 // IF DB1.Price Method Componant is IOVRFM
 IF DB1.Price_Method_Componant = 'IOVRFM';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 // PAR.Item Overage PRC = PAR.Item Overage PRC + DB1.Componant Price
 PAR.Item_Overage_PRC = PAR.Item_Overage_PRC + DB1.Componant_Price;

 ENDIF;

 //?*** 09 PROCESS COMPONANT CFRTOV IF SELECTED *
 CASE;

 // IF DB1.Price Method Componant is CFRTOV
 IF DB1.Price_Method_Componant = 'CFRTOV';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 // PAR.Freight Cost = PAR.Freight Cost + DB1.Componant Price
 PAR.Freight_Cost = PAR.Freight_Cost + DB1.Componant_Price;

 ENDIF;

 //?       10=Unused ( CIOVMK )
 //?       11=Unused ( IOVMKT )
 //?USER: Exit processing

 // PAR.PRC STRITM Field USR = PAR.Starting Product Price * CON.1 *Rounded
 PAR.PRC_STRITM_Field_USR = PAR.Starting_Product_Price * 1 'H';

 // PAR.PRC CIDIFF Field USR = PAR.USR Cust/Item Differentl * CON.1 *Rounded
 PAR.PRC_CIDIFF_Field_USR = PAR.USR_Cust_Item_Differentl * 1 'H';

 // PAR.PRC TOTAL 1 USR = PAR.PRC STRITM Field USR + PAR.PRC CIDIFF Field USR
 PAR.PRC_TOTAL_1_USR = PAR.PRC_STRITM_Field_USR + PAR.PRC_CIDIFF_Field_USR;

 // WRK.USR Subtotal 1 Price = PAR.Starting Product Price + PAR.USR Cust/Item Differ
 WRK.USR_Subtotal_1_Price = PAR.Starting_Product_Price + PAR.USR_Cust_Item_Differentl;

 // PAR.PRC SUBCRD USR = PAR.Credit Value * CON.1 *Rounded
 PAR.PRC_SUBCRD_USR = PAR.Credit_Value * 1 'H';

 // WRK.USR Subtotal 2 Price = WRK.USR Subtotal 1 Price + PAR.Credit Value
 WRK.USR_Subtotal_2_Price = WRK.USR_Subtotal_1_Price + PAR.Credit_Value;

 // PAR.PRC TOTAL 2 USR = PAR.PRC TOTAL 1 USR + PAR.PRC SUBCRD USR
 PAR.PRC_TOTAL_2_USR = PAR.PRC_TOTAL_1_USR + PAR.PRC_SUBCRD_USR;

 // PAR.PRC TOTAL 3 USR = PAR.PRC TOTAL 2 USR
 PAR.PRC_TOTAL_3_USR = PAR.PRC_TOTAL_2_USR;

 // PAR.PRC MSCYLD USR = PAR.Muscle Yield Price * CON.1 *Rounded
 PAR.PRC_MSCYLD_USR = PAR.Muscle_Yield_Price * 1 'H';

 // WRK.Muscle Yield Price = PAR.Muscle Yield Price / CON.100 *
 WRK.Muscle_Yield_Price = PAR.Muscle_Yield_Price / 100;

 //?Divide running Unit Price total by Muscle Yield (if not equal 0)
 CASE;

 // IF WRK.Muscle Yield Price NE WRK.ZERO
 IF WRK.Muscle_Yield_Price <> WRK.ZERO;

 // PAR.PRC CALCED TOTAL USR = WRK.USR Subtotal 2 Price / WRK.Muscle Yield Price *Ro
 PAR.PRC_CALCED_TOTAL_USR = WRK.USR_Subtotal_2_Price / WRK.Muscle_Yield_Price 'H';

 //?Divide running Unit Price total by Muscle Yield (if not equal 0)
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.PRC CALCED TOTAL USR = CON.*ZERO
 PAR.PRC_CALCED_TOTAL_USR = *ZERO;

 ENDIF;

 // PAR.PRC CIFMPF USR = PAR.Formula Processing Fee * CON.1 *Rounded
 PAR.PRC_CIFMPF_USR = PAR.Formula_Processing_Fee * 1 'H';

 // PAR.PRC IOVRFM USR = PAR.Item Overage PRC * CON.1 *Rounded
 PAR.PRC_IOVRFM_USR = PAR.Item_Overage_PRC * 1 'H';

 // PAR.PRC CFRTOV USR = PAR.Freight Cost * CON.1 *Rounded
 PAR.PRC_CFRTOV_USR = PAR.Freight_Cost * 1 'H';

 // PAR.PRC OVERAGES USR = PAR.PRC IOVRFM USR + PAR.PRC CFRTOV USR
 PAR.PRC_OVERAGES_USR = PAR.PRC_IOVRFM_USR + PAR.PRC_CFRTOV_USR;

 // PAR.PRC TOTAL PRICE USR = PAR.PRC CALCED TOTAL USR + PAR.PRC CIFMPF USR
 PAR.PRC_TOTAL_PRICE_USR = PAR.PRC_CALCED_TOTAL_USR + PAR.PRC_CIFMPF_USR;

 // PAR.PRC TOTAL PRICE USR = PAR.PRC TOTAL PRICE USR + PAR.PRC OVERAGES USR
 PAR.PRC_TOTAL_PRICE_USR = PAR.PRC_TOTAL_PRICE_USR + PAR.PRC_OVERAGES_USR;

}


//?Call Program to load return parameters
// IF PAR.Event Called From is Pre-Update Invoice
IF PAR.Event_Called_From = **;

EXECUTE FUNCTION(CLC Formula Dtls Work  RT) TYPE(RTVOBJ) FILE(PDIMCPP)          AC1314127;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.PRC_STRITM_Field_USR);
PARAMETER(PAR.PRC_CIDIFF_Field_USR);
PARAMETER(PAR.PRC_TOTAL_1_USR);
PARAMETER(PAR.PRC_SUBCRD_USR);
PARAMETER(PAR.PRC_TOTAL_2_USR);
PARAMETER(PAR.PRC_TOTAL_3_USR);
PARAMETER(PAR.PRC_MSCYLD_USR);
PARAMETER(PAR.PRC_CALCED_TOTAL_USR);
PARAMETER(PAR.PRC_CIFMPF_USR);
PARAMETER(PAR.PRC_IOVRFM_USR);
PARAMETER(PAR.PRC_CFRTOV_USR);
PARAMETER(PAR.PRC_OVERAGES_USR);
PARAMETER(PAR.PRC_TOTAL_PRICE_USR);
PARAMETER(PAR.Event_Called_From);
{
 //?USER: Process Data record

 //?       01=Unused ( MKTPRC )
 //?*** 02 PROCESS COMPONANT STRITM IF SELECTED *
 CASE;

 // IF DB1.Price Method Componant is STRITM
 IF DB1.Price_Method_Componant = 'STRITM';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 // PAR.Starting Product Price = PAR.Starting Product Price + DB1.Componant Price
 PAR.Starting_Product_Price = PAR.Starting_Product_Price + DB1.Componant_Price;

 ENDIF;

 //?*** 03 PROCESS COMPONANT CIDIFF IF SELECTED *
 CASE;

 // IF DB1.Price Method Componant is CIDIFF
 IF DB1.Price_Method_Componant = 'CIDIFF';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 // PAR.USR Cust/Item Differentl = PAR.USR Cust/Item Differentl + DB1.Componant Pric
 PAR.USR_Cust_Item_Differentl = PAR.USR_Cust_Item_Differentl + DB1.Componant_Price;

 ENDIF;

 //?       04=Unused ( TCRDVY )
 //?*** 05 PROCESS COMPONANT SUBCRD IF SELECTED *
 CASE;

 // IF DB1.Price Method Componant is SUBCRD
 IF DB1.Price_Method_Componant = 'SUBCRD';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 // PAR.Credit Value = PAR.Credit Value + DB1.Componant Price
 PAR.Credit_Value = PAR.Credit_Value + DB1.Componant_Price;

 ENDIF;

 //?*** 06 PROCESS COMPONANT MSCYLD IF SELECTED *
 CASE;

 // IF DB1.Price Method Componant is MSCYLD
 IF DB1.Price_Method_Componant = 'MSCYLD';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 // PAR.Muscle Yield Price = PAR.Muscle Yield Price + DB1.Componant Price
 PAR.Muscle_Yield_Price = PAR.Muscle_Yield_Price + DB1.Componant_Price;

 ENDIF;

 //?*** 07 PROCESS COMPONANT CIFMPF IF SELECTED *
 CASE;

 // IF DB1.Price Method Componant is CIFMPF
 IF DB1.Price_Method_Componant = 'CIFMPF';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 // PAR.Formula Processing Fee = PAR.Formula Processing Fee + DB1.Componant Price
 PAR.Formula_Processing_Fee = PAR.Formula_Processing_Fee + DB1.Componant_Price;

 ENDIF;

 //?*** 08 PROCESS COMPONANT IOVRFM IF SELECTED *
 CASE;

 // IF DB1.Price Method Componant is IOVRFM
 IF DB1.Price_Method_Componant = 'IOVRFM';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 // PAR.Item Overage PRC = PAR.Item Overage PRC + DB1.Componant Price
 PAR.Item_Overage_PRC = PAR.Item_Overage_PRC + DB1.Componant_Price;

 ENDIF;

 //?*** 09 PROCESS COMPONANT CFRTOV IF SELECTED *
 CASE;

 // IF DB1.Price Method Componant is CFRTOV
 IF DB1.Price_Method_Componant = 'CFRTOV';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 // PAR.Freight Cost = PAR.Freight Cost + DB1.Componant Price
 PAR.Freight_Cost = PAR.Freight_Cost + DB1.Componant_Price;

 ENDIF;

 //?       10=Unused ( CIOVMK )
 //?       11=Unused ( IOVMKT )
 //?USER: Exit processing

 // PAR.PRC STRITM Field USR = PAR.Starting Product Price * CON.1 *Rounded
 PAR.PRC_STRITM_Field_USR = PAR.Starting_Product_Price * 1 'H';

 // PAR.PRC CIDIFF Field USR = PAR.USR Cust/Item Differentl * CON.1 *Rounded
 PAR.PRC_CIDIFF_Field_USR = PAR.USR_Cust_Item_Differentl * 1 'H';

 // PAR.PRC TOTAL 1 USR = PAR.PRC STRITM Field USR + PAR.PRC CIDIFF Field USR
 PAR.PRC_TOTAL_1_USR = PAR.PRC_STRITM_Field_USR + PAR.PRC_CIDIFF_Field_USR;

 // WRK.USR Subtotal 1 Price = PAR.Starting Product Price + PAR.USR Cust/Item Differ
 WRK.USR_Subtotal_1_Price = PAR.Starting_Product_Price + PAR.USR_Cust_Item_Differentl;

 // PAR.PRC SUBCRD USR = PAR.Credit Value * CON.1 *Rounded
 PAR.PRC_SUBCRD_USR = PAR.Credit_Value * 1 'H';

 // WRK.USR Subtotal 2 Price = WRK.USR Subtotal 1 Price + PAR.Credit Value
 WRK.USR_Subtotal_2_Price = WRK.USR_Subtotal_1_Price + PAR.Credit_Value;

 // PAR.PRC TOTAL 2 USR = PAR.PRC TOTAL 1 USR + PAR.PRC SUBCRD USR
 PAR.PRC_TOTAL_2_USR = PAR.PRC_TOTAL_1_USR + PAR.PRC_SUBCRD_USR;

 // PAR.PRC TOTAL 3 USR = PAR.PRC TOTAL 2 USR
 PAR.PRC_TOTAL_3_USR = PAR.PRC_TOTAL_2_USR;

 // PAR.PRC MSCYLD USR = PAR.Muscle Yield Price * CON.1 *Rounded
 PAR.PRC_MSCYLD_USR = PAR.Muscle_Yield_Price * 1 'H';

 // WRK.Muscle Yield Price = PAR.Muscle Yield Price / CON.100 *
 WRK.Muscle_Yield_Price = PAR.Muscle_Yield_Price / 100;

 //?Divide running Unit Price total by Muscle Yield (if not equal 0)
 CASE;

 // IF WRK.Muscle Yield Price NE WRK.ZERO
 IF WRK.Muscle_Yield_Price <> WRK.ZERO;

 // PAR.PRC CALCED TOTAL USR = WRK.USR Subtotal 2 Price / WRK.Muscle Yield Price *Ro
 PAR.PRC_CALCED_TOTAL_USR = WRK.USR_Subtotal_2_Price / WRK.Muscle_Yield_Price 'H';

 //?Divide running Unit Price total by Muscle Yield (if not equal 0)
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.PRC CALCED TOTAL USR = CON.*ZERO
 PAR.PRC_CALCED_TOTAL_USR = *ZERO;

 ENDIF;

 // PAR.PRC CIFMPF USR = PAR.Formula Processing Fee * CON.1 *Rounded
 PAR.PRC_CIFMPF_USR = PAR.Formula_Processing_Fee * 1 'H';

 // PAR.PRC IOVRFM USR = PAR.Item Overage PRC * CON.1 *Rounded
 PAR.PRC_IOVRFM_USR = PAR.Item_Overage_PRC * 1 'H';

 // PAR.PRC CFRTOV USR = PAR.Freight Cost * CON.1 *Rounded
 PAR.PRC_CFRTOV_USR = PAR.Freight_Cost * 1 'H';

 // PAR.PRC OVERAGES USR = PAR.PRC IOVRFM USR + PAR.PRC CFRTOV USR
 PAR.PRC_OVERAGES_USR = PAR.PRC_IOVRFM_USR + PAR.PRC_CFRTOV_USR;

 // PAR.PRC TOTAL PRICE USR = PAR.PRC CALCED TOTAL USR + PAR.PRC CIFMPF USR
 PAR.PRC_TOTAL_PRICE_USR = PAR.PRC_CALCED_TOTAL_USR + PAR.PRC_CIFMPF_USR;

 // PAR.PRC TOTAL PRICE USR = PAR.PRC TOTAL PRICE USR + PAR.PRC OVERAGES USR
 PAR.PRC_TOTAL_PRICE_USR = PAR.PRC_TOTAL_PRICE_USR + PAR.PRC_OVERAGES_USR;

}


ENDIF;

