// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POIXE1R
// ?Date: 14.08.2025 Time: 03:37:31
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize detail screen (existing record)

//?EDI info, advanced ship notice
EXECUTE FUNCTION(Rtv All Values FX/EM+ RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1743374;
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(LCL.Internet_Password);
PARAMETER(LCL.Email_Address);
PARAMETER(LCL.Email_User_ID);
PARAMETER(DTL.EDI_Trading_Partner_No);
PARAMETER(DTL.EDI_Cust_Duns_Number);
PARAMETER(DTL.EDI_Warehouse_Store_No);
PARAMETER(LCL.State_Tax_ID);
PARAMETER(LCL.Cust_Shipping_Temp_C_F);
PARAMETER(LCL.One_Invoice_Per_PO);
PARAMETER(DTL.EDI_Advanced_Ship_Notice);
PARAMETER(LCL.Customer_G_L_Vendor_Num);
PARAMETER(LCL.Air_Freight_Orders);
PARAMETER(LCL.Regional_Mgr_Fax_Email);
PARAMETER(LCL.Employee_Co_Packer_Sale);
PARAMETER(LCL.Customer_TF_Exempt_Code);
PARAMETER(LCL.Customer_Watch_Flag);
PARAMETER(LCL.Customer_Sales_Region);
PARAMETER(LCL.Customer_Market_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?A/R Customer Defaults
CASE;

// IF DB1.Ship To Customer EQ DB1.A/R Customer Number
IF DB1.Ship_To_Customer = DB1.AR_Customer_Number;

CASE;

// IF DTL.Print Invoice Sts is yes
IF DTL.Print_Invoice_Sts = 'Y';

// DTL.Print Invoice Sts = CND.yes
DTL.Print_Invoice_Sts = 'Y';

ENDIF;

CASE;

// IF DTL.EDI Invoice Sts EQ WRK.BLANK
IF DTL.EDI_Invoice_Sts = WRK.BLANK;

// DTL.EDI Invoice Sts = CND.no
DTL.EDI_Invoice_Sts = 'N';

ENDIF;

CASE;

// IF DTL.EDI Advanced Ship Notice EQ WRK.BLANK
IF DTL.EDI_Advanced_Ship_Notice = WRK.BLANK;

// DTL.EDI Advanced Ship Notice = CND.NO
DTL.EDI_Advanced_Ship_Notice = 'N';

ENDIF;

//?A/R Customer Defaults
// IF *OTHERWISE
IF *OTHERWISE;

//?** Outout only A/R Fields **
// LCL.STATUS = CND.Yes
LCL.STATUS = 'Y';

//?** Defaults **
// DTL.Print Invoice Sts = CND.no
DTL.Print_Invoice_Sts = 'N';

// DTL.Fax Invoice Flag = CND.No Automatic Fax Invoice
DTL.Fax_Invoice_Flag = 'N';

// DTL.EDI Invoice Sts = CND.no
DTL.EDI_Invoice_Sts = 'N';

// DTL.EDI Trading Partner No. = CON.*BLANK
DTL.EDI_Trading_Partner_No = *BLANK;

// DTL.EDI Warehouse/Store No. = CON.*BLANK
DTL.EDI_Warehouse_Store_No = *BLANK;

// DTL.EDI Advanced Ship Notice = CND.NO
DTL.EDI_Advanced_Ship_Notice = 'N';

// DTL.Bypass DDt/Delay w/Invcng = CND.Blank
DTL.Bypass_DDt_Delay_w_Invcng = *BLANK;

ENDIF;

EXECUTE FUNCTION(Rtv Bypass DDt Sts    RT) TYPE(RTVOBJ) FILE(CAEOREP)           AC2007943;
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(DTL.Bypass_DDt_Delay_w_Invcng);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?USER: Validate detail screen fields

//?VAL: EDI Info
CASE;

// IF DTL.EDI Invoice Sts is yes
IF DTL.EDI_Invoice_Sts = 'Y';

//?Trading Partner Number
CASE;

// IF DTL.EDI Trading Partner No. EQ WRK.BLANK
IF DTL.EDI_Trading_Partner_No = WRK.BLANK;

// Send error message - 'EDI Trading Partner Number is required.'
ERROR(USR3027);
MSGPARM(DTL.EDI_Trading_Partner_No);

ENDIF;

//?Customer Duns Number
CASE;

// IF DTL.EDI Cust Duns Number EQ WRK.BLANK
IF DTL.EDI_Cust_Duns_Number = WRK.BLANK;

// Send error message - 'EDI Customer Duns Number is required.'
ERROR(USR3028);
MSGPARM(DTL.EDI_Cust_Duns_Number);

ENDIF;

//?***  TA - 7/10/07 - Remit Duns # removed from Cust file
ENDIF;

//?VAL: ASN EDI Info
CASE;

// IF DTL.EDI Advanced Ship Notice is Yes
IF DTL.EDI_Advanced_Ship_Notice = 'Y';

//?Trading Partner Number
CASE;

// IF DTL.EDI Trading Partner No. EQ WRK.BLANK
IF DTL.EDI_Trading_Partner_No = WRK.BLANK;

// Send error message - 'EDI Trading Partner Number is required.'
ERROR(USR3027);
MSGPARM(DTL.EDI_Trading_Partner_No);

ENDIF;

//?Customer Duns Number
CASE;

// IF DTL.EDI Cust Duns Number EQ WRK.BLANK
IF DTL.EDI_Cust_Duns_Number = WRK.BLANK;

// Send error message - 'EDI Customer Duns Number is required.'
ERROR(USR3028);
MSGPARM(DTL.EDI_Cust_Duns_Number);

ENDIF;

ENDIF;

//?USER: Validate detail screen relations

//?Maintain Fax Numbers and Email Addresses for Invoicing  P000198
CASE;

// IF DTL.*CMD key is CF07
IF DTL.*CMD_key = '07';

//?Bill To Customers only                                P000198
CASE;

// IF LCL.STATUS is Yes
IF LCL.STATUS = 'Y';

// Send error message - 'A/R Customer is invalid.'
ERROR(USR2110);
MSGPARM(DTL.Ship_To_Customer);

//?Bill To Customers only                                P000198
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Edt Cust Dist Entry   EF.
CALL PROGRAM(Edt Cust Dist Entry   EF) ('PNPNEFR');
PARAMETER(DTL.AR_Customer_Number);

ENDIF;

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Cust f/Elec Comm  IF) TYPE(EXCINTFUN) FILE(CABBREP)        AC1612410;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Customer_Name);
PARAMETER(DTL.Address_Line_1);
PARAMETER(DTL.Address_Line_2);
PARAMETER(DTL.Address_Line_3);
PARAMETER(DTL.City);
PARAMETER(DTL.State_Code);
PARAMETER(DTL.County_Code);
PARAMETER(DTL.Zip_Postal_Code);
PARAMETER(DTL.Telephone_Number_FF);
PARAMETER(DTL.Fax_Number_FF);
PARAMETER(DTL.Alpha_Search);
PARAMETER(DTL.Federal_Tax_Id);
PARAMETER(DTL.New_Customer_Status);
PARAMETER(DTL.SIC_Number);
PARAMETER(DTL.D_B_Number);
PARAMETER(DTL.D_B_Rating);
PARAMETER(DTL.Date_of_D_B_Rating);
PARAMETER(DTL.Credit_Line_Expire_Date);
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.Parent_Customer);
PARAMETER(DTL.Credit_Check_AR_Customer);
PARAMETER(DTL.Credit_Check_Parent_Cust);
PARAMETER(DTL.Country_Code);
PARAMETER(DTL.EDI_Invoice_Sts);
PARAMETER(DTL.Order_Entry_Hold);
PARAMETER(DTL.Parent_Credit_Limit);
PARAMETER(DTL.AR_Credit_Limit);
PARAMETER(DTL.Order_Entry_Hold_Date);
PARAMETER(DTL.Ship_To_Customer_Flag);
PARAMETER(DTL.Field_vs_In_House_flag);
PARAMETER(DTL.Email_When_Order_Shipped);
PARAMETER(DTL.Print_Invoice_Sts);
PARAMETER(DTL.Item_Reference_Status);
PARAMETER(DTL.Statement_Print_Frequency);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Order_Entry_Hold);
PARAMETER(DTL.Order_Entry_Hold_Date);
PARAMETER(LCL.Internet_Password);
PARAMETER(LCL.Email_Address);
PARAMETER(DTL.EDI_Trading_Partner_No);
PARAMETER(DTL.EDI_Cust_Duns_Number);
PARAMETER(DTL.EDI_Warehouse_Store_No);
PARAMETER(LCL.State_Tax_ID);
PARAMETER(DTL.Cust_Shipping_Temp_C_F);
PARAMETER(LCL.One_Invoice_Per_PO);
PARAMETER(DTL.EDI_Advanced_Ship_Notice);
PARAMETER(LCL.Customer_G_L_Vendor_Num);
PARAMETER(LCL.Air_Freight_Orders);
PARAMETER(LCL.Regional_Mgr_Fax_Email);
PARAMETER(LCL.Employee_Co_Packer_Sale);
PARAMETER(LCL.Customer_TF_Exempt_Code);
PARAMETER(LCL.Customer_Watch_Flag);
PARAMETER(LCL.Customer_Sales_Region);
PARAMETER(LCL.Customer_Market_Code);
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(PAR.Company_Number);
PARAMETER(DTL.Bypass_DDt_Delay_w_Invcng);
{
 //?Execute internal function

 //?Update Customer & Customer Electronic Commerce File
 EXECUTE FUNCTION(CHG Customer Edt 2 new CH) TYPE(CHGOBJ) FILE(CABBREP)          AC1463477;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Customer_Name);
 PARAMETER(PAR.Address_Line_1);
 PARAMETER(PAR.Address_Line_2);
 PARAMETER(PAR.Address_Line_3);
 PARAMETER(PAR.City);
 PARAMETER(PAR.State_Code);
 PARAMETER(PAR.County_Code);
 PARAMETER(PAR.Zip_Postal_Code);
 PARAMETER(PAR.Telephone_Number_FF);
 PARAMETER(PAR.Fax_Number_FF);
 PARAMETER(PAR.Alpha_Search);
 PARAMETER(PAR.Federal_Tax_Id);
 PARAMETER(PAR.New_Customer_Status);
 PARAMETER(PAR.SIC_Number);
 PARAMETER(PAR.D_B_Number);
 PARAMETER(PAR.D_B_Rating);
 PARAMETER(PAR.Date_of_D_B_Rating);
 PARAMETER(PAR.Credit_Line_Expire_Date);
 PARAMETER(PAR.AR_Customer_Number);
 PARAMETER(PAR.Parent_Customer);
 PARAMETER(PAR.Credit_Check_AR_Customer);
 PARAMETER(PAR.Credit_Check_Parent_Cust);
 PARAMETER(PAR.Country_Code);
 PARAMETER(PAR.EDI_Invoice_Sts);
 PARAMETER(PAR.Order_Entry_Hold);
 PARAMETER(PAR.Parent_Credit_Limit);
 PARAMETER(PAR.AR_Credit_Limit);
 PARAMETER(PAR.Order_Entry_Hold_Date);
 PARAMETER(PAR.Ship_To_Customer_Flag);
 PARAMETER(PAR.Field_vs_In_House_flag);
 PARAMETER(PAR.Email_When_Order_Shipped);
 PARAMETER(PAR.Print_Invoice_Sts);
 PARAMETER(PAR.Item_Reference_Status);
 PARAMETER(PAR.Statement_Print_Frequency);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.USR_Order_Entry_Hold);
 PARAMETER(PAR.USR_Order_Entry_Hold_Date);
 PARAMETER(PAR.Internet_Password);
 PARAMETER(PAR.Email_Address);
 PARAMETER(PAR.EDI_Trading_Partner_No);
 PARAMETER(PAR.EDI_Cust_Duns_Number);
 PARAMETER(PAR.EDI_Warehouse_Store_No);
 PARAMETER(PAR.State_Tax_ID);
 PARAMETER(PAR.Cust_Shipping_Temp_C_F);
 PARAMETER(PAR.One_Invoice_Per_PO);
 PARAMETER(PAR.EDI_Advanced_Ship_Notice);
 PARAMETER(PAR.Customer_G_L_Vendor_Num);
 PARAMETER(PAR.Air_Freight_Orders);
 PARAMETER(PAR.Regional_Mgr_Fax_Email);
 PARAMETER(PAR.Employee_Co_Packer_Sale);
 PARAMETER(PAR.Customer_TF_Exempt_Code);
 PARAMETER(PAR.Customer_Watch_Flag);
 PARAMETER(PAR.Customer_Sales_Region);
 PARAMETER(PAR.Customer_Market_Code);
 PARAMETER(PAR.A_R_Customer);
 PARAMETER(PAR.Company_Number);
 {
  //?USER: Processing after Data read

  //?Create or change customer electronic commerce record
  EXECUTE FUNCTION(Val Cust Elec Exists  RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1569842;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(PAR.Email_User_ID);
  PARAMETER(LCL.Air_Freight_Orders);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Update user id if blank
  CASE;

  // IF PAR.Email User ID is Not Entered Blank
  IF PAR.Email_User_ID = *BLANK;

  // PAR.Customer Number Alpha = CVTVAR(DB1.Ship To Customer)
  PAR.Customer_Number_Alpha = CVTVAR(DB1.Ship_To_Customer);

  // PAR.Email User ID = CONCAT(CON.A,PAR.Customer Number Alpha,CON.*ZERO)
  PAR.Email_User_ID = 'A' + PAR.Customer_Number_Alpha (*ZERO);

  ENDIF;

  //?Create or change customer electronic commerce record
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  EXECUTE FUNCTION(Crt Customer Elec Comm CR) TYPE(CRTOBJ) FILE(PDNEREP)          AC1569823;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(PAR.Internet_Password);
  PARAMETER(PAR.Email_Address);
  PARAMETER(PAR.Email_User_ID);
  PARAMETER(PAR.EDI_Trading_Partner_No);
  PARAMETER(PAR.EDI_Cust_Duns_Number);
  PARAMETER(PAR.EDI_Warehouse_Store_No);
  PARAMETER(PAR.State_Tax_ID);
  PARAMETER(PAR.Cust_Shipping_Temp_C_F);
  PARAMETER(PAR.One_Invoice_Per_PO);
  PARAMETER(PAR.EDI_Advanced_Ship_Notice);
  PARAMETER(PAR.Customer_G_L_Vendor_Num);
  PARAMETER('N');
  PARAMETER(PAR.Regional_Mgr_Fax_Email);
  PARAMETER(PAR.Employee_Co_Packer_Sale);
  PARAMETER(PAR.Customer_TF_Exempt_Code);
  PARAMETER(PAR.Customer_Watch_Flag);
  PARAMETER(PAR.Customer_Sales_Region);
  PARAMETER(PAR.Customer_Market_Code);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  {
   //?USER: Processing before Data update

   //?Add customer to Pork Email File - This is an IBM file.
   // Call program Crt Cust Usr Id IBM Fl UP.
   CALL PROGRAM(Crt Cust Usr Id IBM Fl UP) ('PDW1UPR');
   PARAMETER(DB1.Email_Address);
   PARAMETER(DB1.Email_User_ID);

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?Create or change customer electronic commerce record
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Chg Customer Elec Comm CH) TYPE(CHGOBJ) FILE(PDNEREP)          AC1569824;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(PAR.Internet_Password);
  PARAMETER(PAR.Email_Address);
  PARAMETER(PAR.Email_User_ID);
  PARAMETER(PAR.EDI_Trading_Partner_No);
  PARAMETER(PAR.EDI_Cust_Duns_Number);
  PARAMETER(PAR.EDI_Warehouse_Store_No);
  PARAMETER(PAR.State_Tax_ID);
  PARAMETER(PAR.Cust_Shipping_Temp_C_F);
  PARAMETER(PAR.One_Invoice_Per_PO);
  PARAMETER(PAR.EDI_Advanced_Ship_Notice);
  PARAMETER(PAR.Customer_G_L_Vendor_Num);
  PARAMETER(PAR.Air_Freight_Orders);
  PARAMETER(PAR.Regional_Mgr_Fax_Email);
  PARAMETER(PAR.Employee_Co_Packer_Sale);
  PARAMETER(PAR.Customer_TF_Exempt_Code);
  PARAMETER(PAR.Customer_Watch_Flag);
  PARAMETER(PAR.Customer_Sales_Region);
  PARAMETER(PAR.Customer_Market_Code);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  {
   //?USER: Processing before Data update

   //?Add or change Pork Email Address in file. - This is an IBM file.
   // Call program Crt Cust Usr Id IBM Fl UP.
   CALL PROGRAM(Crt Cust Usr Id IBM Fl UP) ('PDW1UPR');
   PARAMETER(DB1.Email_Address);
   PARAMETER(DB1.Email_User_ID);

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

  //?OMS257:  save off old city/state for zone checking
  // PAR.Ship To City = DB1.City
  PAR.Ship_To_City = DB1.City;

  // PAR.Ship To State Code = DB1.State Code
  PAR.Ship_To_State_Code = DB1.State_Code;

  //?A/R Customer Changed: Create A/R Summary if necessary.
  CASE;

  // IF PAR.A/R Customer Number NE DB1.A/R Customer Number
  IF PAR.AR_Customer_Number <> DB1.AR_Customer_Number;

  EXECUTE FUNCTION(Val Customer in A/R SumRT) TYPE(RTVOBJ) FILE(ARBCREP)          AC1463166;
  PARAMETER(PAR.Company_Number);
  PARAMETER(DB1.AR_Customer_Number);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   // PGM.*Return code = CND.*Record already exists
   PGM.*Return_code = 'Y2U0003';

  }

  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // WRK.Current Month = JOB.*Job date *MONTH
  WRK.Current_Month = DATEDTLS(JOB.*Job_date 'MO' 1111111 'NONE' 'N' 1);

  EXECUTE FUNCTION(RTV Sales Route        RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1371227;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.AR_Customer_Number);
  PARAMETER(LCL.Sales_Route_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
  PARAMETER(LCL.Sales_Route_Code);
  PARAMETER(LCL.Salesperson_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(CRT A/R Summary        CR) TYPE(CRTOBJ) FILE(ARBCREP)          AC1109013;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.AR_Customer_Number);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Salesperson_Code);
  PARAMETER(LCL.Sales_Route_Code);
  PARAMETER(WRK.Current_Month);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

  ENDIF;

  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  //?If a Parent Order Entry Hold flag has been changed
  CASE;

  // IF PAR.Ship To Customer EQ PAR.Parent Customer
  IF PAR.Ship_To_Customer = PAR.Parent_Customer;

  CASE;

  // IF PAR.Order Entry Hold NE PAR.USR Order Entry Hold
  IF PAR.Order_Entry_Hold <> PAR.USR_Order_Entry_Hold;

  EXECUTE FUNCTION(CHG Child Par OE Hold  RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1463429;
  PARAMETER(PAR.Parent_Customer);
  PARAMETER(PAR.Order_Entry_Hold);
  PARAMETER(PAR.Order_Entry_Hold_Date);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(CHG Child Par OE Hold  CH) TYPE(CHGOBJ) FILE(CABBREP)          AC1463428;
   PARAMETER(DB1.Ship_To_Customer);
   PARAMETER(PAR.Order_Entry_Hold);
   PARAMETER(PAR.Order_Entry_Hold_Date);
   PARAMETER(JOB.*Job_time);
   PARAMETER(JOB.*USER);
   PARAMETER(JOB.*PROGRAM);
   PARAMETER(JOB.*Job_date);
  }

  ENDIF;

  EXECUTE FUNCTION(CHG Child Parent Cred. RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1395747;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Parent_Credit_Limit);
  {
   //?USER: Processing if Data record not found

   QUIT;

   //?USER: Process Data record

   CASE;

   // IF PAR.Parent Customer EQ DB1.Parent Customer
   IF PAR.Parent_Customer = DB1.Parent_Customer;

   EXECUTE FUNCTION(CHG CHild Parent Cred  CH) TYPE(CHGOBJ) FILE(CABBREP)          AC1395748;
   PARAMETER(DB1.Ship_To_Customer);
   PARAMETER(PAR.Parent_Credit_Limit);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?USER: Processing if Data record not found

    QUIT;

    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // DB1.Parent Credit Limit = PAR.Parent Credit Limit
    DB1.Parent_Credit_Limit = PAR.Parent_Credit_Limit;

   }

   ENDIF;

  }

  ENDIF;

  //?If A/R Customer Order Entry hold flag has Changed
  CASE;

  // IF PAR.Ship To Customer EQ PAR.A/R Customer Number
  IF PAR.Ship_To_Customer = PAR.AR_Customer_Number;

  CASE;

  // IF PAR.Order Entry Hold NE PAR.USR Order Entry Hold
  IF PAR.Order_Entry_Hold <> PAR.USR_Order_Entry_Hold;

  EXECUTE FUNCTION(CHG Child A/R OE Hold  RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1463425;
  PARAMETER(PAR.AR_Customer_Number);
  PARAMETER(PAR.Order_Entry_Hold);
  PARAMETER(PAR.Order_Entry_Hold_Date);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(CHG Child A/R OE Hold  CH) TYPE(CHGOBJ) FILE(CABBREP)          AC1463426;
   PARAMETER(DB1.Ship_To_Customer);
   PARAMETER(PAR.Order_Entry_Hold);
   PARAMETER(PAR.Order_Entry_Hold_Date);
   PARAMETER(JOB.*Job_time);
   PARAMETER(JOB.*USER);
   PARAMETER(JOB.*PROGRAM);
   PARAMETER(JOB.*Job_date);
  }

  ENDIF;

  EXECUTE FUNCTION(CHG Child A/R Credit   RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1399291;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.AR_Credit_Limit);
  {
   //?USER: Processing if Data record not found

   QUIT;

   //?USER: Process Data record

   CASE;

   // IF PAR.A/R Credit Limit NE DB1.A/R Credit Limit
   IF PAR.AR_Credit_Limit <> DB1.AR_Credit_Limit;

   // AND PAR.A/R Customer Number EQ DB1.A/R Customer Number
   AND PAR.AR_Customer_Number = DB1.AR_Customer_Number;

   EXECUTE FUNCTION(CHG Child A/R Credit   CH) TYPE(CHGOBJ) FILE(CABBREP)          AC1399298;
   PARAMETER(DB1.Ship_To_Customer);
   PARAMETER(PAR.AR_Credit_Limit);
   ENDIF;

   CASE;

   // IF PAR.A/R Customer Number NE DB1.A/R Customer Number
   IF PAR.AR_Customer_Number <> DB1.AR_Customer_Number;

   QUIT;

   ENDIF;

  }

  ENDIF;

  //?If city/state changed, create a destination-zone record (if not on file)
  CASE;

  // IF PAR.Ship To City NE PAR.City
  IF PAR.Ship_To_City <> PAR.City;

  // OR PAR.Ship To State Code NE PAR.State Code
  OR PAR.Ship_To_State_Code <> PAR.State_Code;

  EXECUTE FUNCTION(UPD Check Ship Zones   RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1486023;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.City);
  PARAMETER(DB1.State_Code);
  {
   //?USER: Process Data record

   // PAR.Shipping Zone Code = CON.*BLANK
   PAR.Shipping_Zone_Code = *BLANK;

   // Execute function CVT Str to Upper Alpha US.
   EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
   PARAMETER(PAR.City);
   PARAMETER(PAR.Destination_City);
   {
    PDWEUFR:  PGM PARM(&STRIN &STROUT)

    CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
   }

   EXECUTE FUNCTION(CRT PD Destination-ZoneCR) TYPE(CRTOBJ) FILE(PDLUREP)          AC1484040;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.State_Code);
   PARAMETER(PAR.Destination_City);
   PARAMETER(PAR.Shipping_Zone_Code);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER('A');
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?If the city/state already exists, that's ok.  We're just adding it if it
   //?doesn't exist
   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  ENDIF;

  //?PK0109 ---
  //?Old A/R Customer ifne New A/R Customer number --> chg open orders
  CASE;

  // IF PAR.A/R Customer NE PAR.A/R Customer Number
  IF PAR.A_R_Customer <> PAR.AR_Customer_Number;

  // LCL.Ship To Customer = DB1.Ship To Customer
  LCL.Ship_To_Customer = DB1.Ship_To_Customer;

  EXECUTE FUNCTION(Rtv Chg AR Cust/BllTo RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1573466;
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Ship_To_Customer);
  PARAMETER(DB1.AR_Customer_Number);
  {
   //?USER: Initialize routine

   // WRK.Ship To Customer = PAR.Ship To Customer
   WRK.Ship_To_Customer = PAR.Ship_To_Customer;

   EXECUTE FUNCTION(RTV Cust Name/Addr     RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1129143;
   PARAMETER(PAR.AR_Customer_Number);
   PARAMETER(PAR.Customer_Name);
   PARAMETER(PAR.Address_Line_1);
   PARAMETER(PAR.Address_Line_2);
   PARAMETER(PAR.Address_Line_3);
   PARAMETER(PAR.City);
   PARAMETER(PAR.State_Code);
   PARAMETER(PAR.Zip_Postal_Code);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // PAR.Ship To Customer = WRK.Ship To Customer
   PAR.Ship_To_Customer = WRK.Ship_To_Customer;

   //?USER: Process Data record

   EXECUTE FUNCTION(Chg AR cust/BillTo Ad CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC1573467;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(PAR.AR_Customer_Number);
   PARAMETER(PAR.AR_Customer_Number);
   PARAMETER(PAR.Customer_Name);
   PARAMETER(PAR.Address_Line_1);
   PARAMETER(PAR.Address_Line_2);
   PARAMETER(PAR.Address_Line_3);
   PARAMETER(PAR.City);
   PARAMETER(PAR.State_Code);
   PARAMETER(PAR.Zip_Postal_Code);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  ENDIF;

 }

 //?Update Company/Customer with Bypass DDt for Inv Sts
 EXECUTE FUNCTION(Upd Bypass DDt f/inv  RT) TYPE(RTVOBJ) FILE(CAEOREP)           AC1612411;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Bypass_DDt_Delay_w_Invcng);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Bypass DDt f/inv  CH) TYPE(CHGOBJ) FILE(CAEOREP)           AC1612412;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Bypass_DDt_Delay_w_Invcng);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

}


