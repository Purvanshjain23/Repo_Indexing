// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDZADFR
// ?Date: 14.08.2025 Time: 03:27:32
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('C/S');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Printer Device = CON.*BLANK
PAR.PRT_Printer_Device = *BLANK;

//?USER: Process subfile control (Pre-confirm)

//?Add New User Profile
CASE;

// IF CTL.*CMD key is *Add Details
IF CTL.*CMD_key = '06';

// Call program EDT User Profile       E1.
CALL PROGRAM(EDT User Profile       E1) ('PDZBE1R');
PARAMETER(CTL.User_Profile_Name);
PARAMETER(CTL.User_Code_Model);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Print User Profiles
CASE;

// IF CTL.*CMD key is *Print 21
IF CTL.*CMD_key = '21';

// Call program PMT Pass Model         UP.
CALL PROGRAM(PMT Pass Model         UP) ('PDAOUPR');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('C/A');
PARAMETER('PDZVPCLP');
PARAMETER(CTL.User_Code_Model);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER('User Profile Listing');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print List has been submitted'
MESSAGE(USR1742 *INFO);

ENDIF;

ENDIF;

//?Print User Profiles - Yields
CASE;

// IF CTL.*CMD key is CF22
IF CTL.*CMD_key = '22';

// Call program PMT Pass Model         UP.
CALL PROGRAM(PMT Pass Model         UP) ('PDAOUPR');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('C/A');
PARAMETER('PPD2PCLP');
PARAMETER(CTL.User_Code_Model);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER('User Profile Listing');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print List has been submitted'
MESSAGE(USR1742 *INFO);

ENDIF;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?USER: Process subfile record (Pre-confirm)

//?Perform is Change Selected
CASE;

// IF RCD.*SFLSEL is *Change Status
IF RCD.*SFLSEL = '2'/'2';

// RCD.User Code Model = CND.equal to blank
RCD.User_Code_Model = *BLANK;

// Call program EDT User Profile       E1.
CALL PROGRAM(EDT User Profile       E1) ('PDZBE1R');
PARAMETER(RCD.User_Profile_Name);
PARAMETER(RCD.User_Code_Model);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Validate Delete Request
CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

//?* If deleting a model, there must be no dependencies.
//?Validation for dependencies
CASE;

// IF RCD.User Code Model is equal to blank
IF RCD.User_Code_Model = *BLANK;

// LCL.USR Status (Y/N) = CND.yes
LCL.USR_Status_Y_N = 'Y';

EXECUTE FUNCTION(RTV by User Prf. Model RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1251008;
PARAMETER(RCD.User_Profile_Name);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


//?Checks to see if user are based on model before model is deleted.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Send error message - 'User Model has Dependent user profiles and can not be deleted.'
ERROR(USR1701);
MSGPARM(RCD.*SFLSEL);

//?Checks to see if user are based on model before model is deleted.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Validation for dependencies
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.User Original Entry = WRK.BLANK 1               USR
LCL.User_Original_Entry = WRK.BLANK_1_USR;

EXECUTE FUNCTION(Rtv User Prof Order    RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1590064;
PARAMETER(RCD.User_Profile_Name);
PARAMETER(LCL.Sales_Route_Code);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 // PAR.Sales Route Code = DB1.Sales Route Code
 PAR.Sales_Route_Code = DB1.Sales_Route_Code;

 QUIT;

}


EXECUTE FUNCTION(Rtv User Prof         RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1593077;
PARAMETER(RCD.User_Profile_Name);
PARAMETER(WRK.Sales_Route_Code_Ref_USR);
PARAMETER(LCL.Record_Found_OrdDtlUSR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// OR LCL.Record Found -OrdDtlUSR is Record Found
OR LCL.Record_Found_OrdDtlUSR = 'Y';

CASE;

// IF LCL.Sales Route Code is not entered
IF LCL.Sales_Route_Code = *BLANK;

// LCL.Sales Route Code = LCL.Sales Route Code Ref  USR
LCL.Sales_Route_Code = LCL.Sales_Route_Code_Ref_USR;

ENDIF;

// Call program Pmt User Prof Delete   PV.
CALL PROGRAM(Pmt User Prof Delete   PV) ('POCFPVR');
PARAMETER(RCD.User_Profile_Name);
PARAMETER(RCD.Description);
PARAMETER(LCL.User_Original_Entry);
PARAMETER(LCL.Sales_Route_Code);
PARAMETER(PGM.*Return_code);

ENDIF;

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?Perform Copy request
CASE;

// IF RCD.*SFLSEL is *Copy request
IF RCD.*SFLSEL = '3'/'3';

//?* Retrieve selected model to edit that it truely is a model
EXECUTE FUNCTION(RTV Validate Profile  RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1250992;
PARAMETER(RCD.User_Profile_Name);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.User Code Model is equal to blank
 IF DB1.User_Code_Model = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send error message - 'User Profile is not a model and can not be copied.'
 ERROR(USR1700);

 QUIT;

 ENDIF;

}


//?*  Prepare User Profile code for add using modeled on
// RCD.User Code Model = RCD.User Profile Name
RCD.User_Code_Model = RCD.User_Profile_Name;

// WRK.User Profile Name = RCD.User Profile Name
WRK.User_Profile_Name = RCD.User_Profile_Name;

// RCD.User Profile Name = CND.equal to blank
RCD.User_Profile_Name = *BLANK;

// Call program EDT User Profile       E1.
CALL PROGRAM(EDT User Profile       E1) ('PDZBE1R');
PARAMETER(RCD.User_Profile_Name);
PARAMETER(RCD.User_Code_Model);

// RCD.User Profile Name = WRK.User Profile Name
RCD.User_Profile_Name = WRK.User_Profile_Name;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Perform is Application Profile
CASE;

// IF RCD.*SFLSEL is *Application Profiles
IF RCD.*SFLSEL = '7'/'7';

CASE;

// IF RCD.User Code Model is equal to blank
IF RCD.User_Code_Model = *BLANK;

// Call program WW Application Prof.   DF.
CALL PROGRAM(WW Application Prof.   DF) ('PDZODFR');
PARAMETER(RCD.User_Profile_Name);
PARAMETER(RCD.Description);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.User_Code_Model);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program WW Application Prof.   DF.
CALL PROGRAM(WW Application Prof.   DF) ('PDZODFR');
PARAMETER(RCD.User_Code_Model);
PARAMETER(RCD.Description);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.User_Code_Model);

ENDIF;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?CM Entry Control
CASE;

// IF RCD.*SFLSEL is *Memo Entry Control
IF RCD.*SFLSEL = '9'/'9';

// WRK.Application Code = CND.Memo Processing
WRK.Application_Code = 'MEMO';

//?Validate Memo processing access & get default company
CASE;

// IF RCD.User Code Model is equal to blank
IF RCD.User_Code_Model = *BLANK;

EXECUTE FUNCTION(RTV Appl O/P           RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1250865;
PARAMETER(RCD.User_Profile_Name);
PARAMETER(WRK.Application_Code);
PARAMETER(PAR.Company_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


//?Validate Memo processing access & get default company
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Appl O/P           RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1250865;
PARAMETER(RCD.User_Code_Model);
PARAMETER(WRK.Application_Code);
PARAMETER(PAR.Company_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Access to Application Memos not authorized.'
ERROR(USR1978);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

//?Select company if allow multi company
CASE;

// IF RCD.Allow Multi-Company is yes
IF RCD.Allow_Multi_Company = 'Y';

// Call program SEL Co - Rtn 0 wo Sel  SR.
CALL PROGRAM(SEL Co - Rtn 0 wo Sel  SR) ('PDL7SRR');
PARAMETER(PAR.Company_Number);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// PAR.Accounting Company Number = CON.*ZERO
PAR.Company_Number = *ZERO;

ENDIF;

ENDIF;

//?Edit Memo entry control if have a company selected
CASE;

// IF PAR.Accounting Company Number is not equal to zero
IF PAR.Company_Number <> *ZERO;

// Call program EDT Cr/Dr/Ord Control  E1.
CALL PROGRAM(EDT Cr/Dr/Ord Control  E1) ('PDP5E1R');
PARAMETER(RCD.User_Profile_Name);
PARAMETER('C/M');
PARAMETER(PAR.Company_Number);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Edit Memo entry control if have a company selected
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'No Company selected.'
ERROR(USR1773);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

ENDIF;

//?Warehouse Access
CASE;

// IF RCD.*SFLSEL is Option 10
IF RCD.*SFLSEL = '10';

CASE;

// IF RCD.User Code Model is equal to blank
IF RCD.User_Code_Model = *BLANK;

// Call program Edt User Whs Access   EF.
CALL PROGRAM(Edt User Whs Access   EF) ('PDHREFR');
PARAMETER(RCD.User_Profile_Name);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Edt User Whs Access   EF.
CALL PROGRAM(Edt User Whs Access   EF) ('PDHREFR');
PARAMETER(RCD.User_Code_Model);

ENDIF;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?11=Production Line Access
CASE;

// IF RCD.*SFLSEL is Option 11
IF RCD.*SFLSEL = '11';

// Call program Edt Prod Line Access  EF.
CALL PROGRAM(Edt Prod Line Access  EF) ('POVQEFR');
PARAMETER(RCD.User_Profile_Name);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?12=Copy User Profile
CASE;

// IF RCD.*SFLSEL is Option 12
IF RCD.*SFLSEL = '12';

// Call program Cpy User Profile      PV.
CALL PROGRAM(Cpy User Profile      PV) ('PNVGPVR');
PARAMETER(RCD.User_Profile_Name);
PARAMETER(RCD.Description);
PARAMETER(RCD.User_Code_Model);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?13=Edit User Authority
CASE;

// IF RCD.*SFLSEL is Option 13
IF RCD.*SFLSEL = '13';

// Call program Edt User Authority    EF.
CALL PROGRAM(Edt User Authority    EF) ('PNY0EFR');
PARAMETER(RCD.User_Profile_Name);
PARAMETER(RCD.Description);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?USER: Process subfile record (Post-confirm)

//?Perform Delete
CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

//?User profile and any dependent records are deleted
CASE;

// IF RCD.User Code Model is equal to blank
IF RCD.User_Code_Model = *BLANK;

EXECUTE FUNCTION(RTV fo Delete User/Pro RT) TYPE(RTVOBJ) FILE(OPC0REP)          AC1252176;
PARAMETER(RCD.User_Profile_Name);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(DLT Order Entry Cntrl  DL) TYPE(DLTOBJ) FILE(OPC0REP)          AC1132101;
 PARAMETER(DB1.User_Profile_Name);
}


EXECUTE FUNCTION(RTV For Delete         RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1249137;
PARAMETER(RCD.User_Profile_Name);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(DLT Apllication Prof.  DL) TYPE(DLTOBJ) FILE(CADTREP)          AC1249130;
 PARAMETER(DB1.User_Profile_Name);
 PARAMETER(DB1.Application_Code);
 {
  //?USER: Processing before Data update

  // Send information message - 'Changes to Application Profile Model will change the Authority for
  MESSAGE(USR1696 *INFO);
  MSGPARM(PAR.User_Profile_Name);

 }

}


EXECUTE FUNCTION(Rtv for Delete        RT) TYPE(RTVOBJ) FILE(PDL1REP)           AC1590082;
PARAMETER(RCD.User_Profile_Name);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Del User Whs Access   DL) TYPE(DLTOBJ) FILE(PDL1REP)           AC1505207;
 PARAMETER(DB1.User_Profile_Name);
 PARAMETER(DB1.Warehouse_Code);
}


EXECUTE FUNCTION(DLT User Profile Contr DL) TYPE(DLTOBJ) FILE(CADRREP)          AC1142529;
PARAMETER(RCD.User_Profile_Name);
{
 //?USER: Processing before Data update

 //? Delete all application profile records for this user
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send error message - 'Cannot delete User Profile at this time, Application profile in use'
 ERROR(USR0903);
 MSGPARM(PAR.User_Profile_Name);

 QUIT;

 ENDIF;

}


EXECUTE FUNCTION(Del User Appl Whs     RT) TYPE(RTVOBJ) FILE(PNFOREP)           AC1959681;
PARAMETER(RCD.User_Profile_Name);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Del User Appl Whs     DL) TYPE(DLTOBJ) FILE(PNFOREP)           AC1959516;
 PARAMETER(DB1.User_Profile_Name);
 PARAMETER(DB1.Application_Code);
 PARAMETER(DB1.Warehouse_Code);
}


EXECUTE FUNCTION(Del User Profile      RT) TYPE(RTVOBJ) FILE(POCXREP)           AC2009125;
PARAMETER(RCD.User_Profile_Name);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Del User Profile Dft  DL) TYPE(DLTOBJ) FILE(POCXREP)           AC1665201;
 PARAMETER(DB1.User_Profile_Name);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?User profile and any dependent records are deleted
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV For Delete         RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1249137;
PARAMETER(RCD.User_Profile_Name);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(DLT Apllication Prof.  DL) TYPE(DLTOBJ) FILE(CADTREP)          AC1249130;
 PARAMETER(DB1.User_Profile_Name);
 PARAMETER(DB1.Application_Code);
 {
  //?USER: Processing before Data update

  // Send information message - 'Changes to Application Profile Model will change the Authority for
  MESSAGE(USR1696 *INFO);
  MSGPARM(PAR.User_Profile_Name);

 }

}


EXECUTE FUNCTION(RTV fo Delete User/Pro RT) TYPE(RTVOBJ) FILE(OPC0REP)          AC1252176;
PARAMETER(RCD.User_Profile_Name);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(DLT Order Entry Cntrl  DL) TYPE(DLTOBJ) FILE(OPC0REP)          AC1132101;
 PARAMETER(DB1.User_Profile_Name);
}


EXECUTE FUNCTION(Rtv for Delete        RT) TYPE(RTVOBJ) FILE(PDL1REP)           AC1590082;
PARAMETER(RCD.User_Profile_Name);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Del User Whs Access   DL) TYPE(DLTOBJ) FILE(PDL1REP)           AC1505207;
 PARAMETER(DB1.User_Profile_Name);
 PARAMETER(DB1.Warehouse_Code);
}


EXECUTE FUNCTION(DLT User Profile Contr DL) TYPE(DLTOBJ) FILE(CADRREP)          AC1142529;
PARAMETER(RCD.User_Profile_Name);
{
 //?USER: Processing before Data update

 //? Delete all application profile records for this user
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send error message - 'Cannot delete User Profile at this time, Application profile in use'
 ERROR(USR0903);
 MSGPARM(PAR.User_Profile_Name);

 QUIT;

 ENDIF;

}


EXECUTE FUNCTION(Del User Appl Whs     RT) TYPE(RTVOBJ) FILE(PNFOREP)           AC1959681;
PARAMETER(RCD.User_Profile_Name);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Del User Appl Whs     DL) TYPE(DLTOBJ) FILE(PNFOREP)           AC1959516;
 PARAMETER(DB1.User_Profile_Name);
 PARAMETER(DB1.Application_Code);
 PARAMETER(DB1.Warehouse_Code);
}


EXECUTE FUNCTION(Del User Profile      RT) TYPE(RTVOBJ) FILE(POCXREP)           AC2009125;
PARAMETER(RCD.User_Profile_Name);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Del User Profile Dft  DL) TYPE(DLTOBJ) FILE(POCXREP)           AC1665201;
 PARAMETER(DB1.User_Profile_Name);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
}


CASE;

// IF LCL.User Original Entry is equal to blank
IF LCL.User_Original_Entry = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv/Chg User Orig Entr RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1590252;
PARAMETER(RCD.User_Profile_Name);
PARAMETER(LCL.User_Original_Entry);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg User Orig Entry    CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1590253;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.USR_User_ID_Selected);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program TRG Order Hdr CHG Trig XT.
  CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Ship_To_Name);
  PARAMETER(DB1.Ship_To_Address_Line_1);
  PARAMETER(DB1.Ship_To_Address_Line_2);
  PARAMETER(DB1.Ship_To_Address_Line_3);
  PARAMETER(DB1.Ship_To_City);
  PARAMETER(DB1.Ship_To_State_Code);
  PARAMETER(DB1.Ship_To_Zip_Postal_Code);
  PARAMETER(DB1.Bill_to_Customer);
  PARAMETER(DB1.Bill_to_Name);
  PARAMETER(DB1.Bill_to_Address_Line_1);
  PARAMETER(DB1.Bill_to_Address_Line_2);
  PARAMETER(DB1.Bill_to_Address_Line_3);
  PARAMETER(DB1.Bill_to_City);
  PARAMETER(DB1.Bill_to_State_Code);
  PARAMETER(DB1.Bill_to_Zip_Postal_Code);
  PARAMETER(DB1.Customer_Purchase_Order_#);
  PARAMETER(DB1.Order_Date);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Cancel_Date);
  PARAMETER(DB1.Terms_Code);
  PARAMETER(DB1.Special_Instructions);
  PARAMETER(DB1.Special_Instructions_2);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Comment_Print_Acknowledge);
  PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
  PARAMETER(DB1.Comment_Print_Pick_Slip);
  PARAMETER(DB1.Comment_Print_Ship_Doc);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Order_in_Use);
  PARAMETER(DB1.Header_Status);
  PARAMETER(DB1.Header_Status_Last);
  PARAMETER(DB1.Order_Type_Print_Status);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.User_Original_Entry);
  PARAMETER(DB1.Date_of_Original_Entry);
  PARAMETER(DB1.Order_Value_Total);
  PARAMETER(DB1.Order_Weight_Total);
  PARAMETER(DB1.Credit_Hold);
  PARAMETER(DB1.Production_Hold);
  PARAMETER(DB1.New_Customer_Hold);
  PARAMETER(DB1.Requested_Delivery_Date);
  PARAMETER(DB1.Requested_Delivery_Time);
  PARAMETER(DB1.Accounts_Receiv_Ent_1);
  PARAMETER(DB1.Accounts_Receiv_Ent_2);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.LTL_Flag);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Shipping_Method);
  PARAMETER(DB1.Export_Status);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Shrink_Wrap);
  PARAMETER(DB1.Slip_Sheet);
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Reefer_Temperature);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Attach_to_Invoice_Number);
  PARAMETER(DB1.Load_Plan_Order);
  PARAMETER(DB1.Print_Pick_Slip);
  PARAMETER(DB1.Resell_Reference_Number);
  PARAMETER(DB1.Special_Comment_1);
  PARAMETER(DB1.Special_Comment_2);
  PARAMETER(DB1.Affect_Auto_Accruals);
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(DB1.Manager_Level_Code);
  PARAMETER(DB1.VP_Level_Code);
  PARAMETER(DB1.Attach_to_Order_Number);
  PARAMETER(DB1.Reason_for_Price_Audit);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Invoice_Date);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Trans_Contol_AS400_Plant);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.A_R_order_Value_Total);
  PARAMETER(DB1.Billing_Activity_Type);
  PARAMETER(DB1.Block_Order_Flag);
  PARAMETER(DB1.Order_Certification_Flag);
  PARAMETER(DB1.Invoice_Order_Value_Tot);
  PARAMETER(DB1.Process_Sts_for_3C);
  PARAMETER(DB1.Order_Conf_Fax_Sts);
  PARAMETER(DB1.Manifest_Fax_Sts);
  PARAMETER(DB1.Invoice_Fax_Sts);
  PARAMETER(DB1.Transfer_in_Storage_Ind);
  PARAMETER(DB1.Email_Cust_On_Order_Ship);
  PARAMETER(DB1.Order_Emailed);
  PARAMETER(DB1.Export_Docs_Go_w_Driver);
  PARAMETER(DB1.Shipping_Temp_Code_C_F);
  PARAMETER(DB1.Broker_Order_Status);
  PARAMETER(DB1.Air_Freight_Order);
  PARAMETER(DB1.Order_Requires_Review);
  PARAMETER(DB1.OH_Load_Plan_Ready);
  PARAMETER(DB1.Export_USDA_Approved);
  PARAMETER(DB1.HPB_Ship_to_Warehouse);
  PARAMETER(DB1.OH_TF_Exempt_Code);
  PARAMETER(DB1.OH_Appt_Confirmation_Dt);
  PARAMETER(DB1.JPN_Invoice_Issuance_Date);
  PARAMETER(DB1.Load_Actual_Shipped_Date);
  PARAMETER(DB1.Load_BOL_Complete_Date);
  PARAMETER(DB1.Load_Truck_Departure_Date);
  PARAMETER(DB1.Maximum_Gross_Weight);
  PARAMETER(DB1.Time_of_Original_Entry);
  PARAMETER(DB1.OH_Appt_Confirmation_Tm);
  PARAMETER(DB1.Load_BOL_Complete_Time);
  PARAMETER(DB1.Load_Truck_Departure_Time);
  PARAMETER(DB1.Act_Frt_Reference_Amount);
  PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
  PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
  PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
  PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);

 }

}


EXECUTE FUNCTION(Rtv/Chg User Orig Entr RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1593092;
PARAMETER(RCD.User_Profile_Name);
PARAMETER(LCL.User_Original_Entry);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg User Profile       CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1593093;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(PAR.USR_User_ID_Selected);
}


ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

