     h option(*SRCSTMT:*NODEBUGIO)
      *
      * ENVIRONMENT: Pork Division
      * SYSTEM:      Resource Optimization
      * PROGRAM:     RO201
      * TITLE:       Create RO Header, Control Data, Std Costs for Yields
      * PROGRAMMER:  Alice Brownfield
      * CREATED:     12/02/08
      *
      * FUNCTION:    We added this program when we wrote the Weekly Yield reports.
      *
      *              We wanted to use the Meat Costing and Margin Adjustment files/data
      *              for the Weekly Yield Reports. But, the users wanted the reports
      *              earlier in the week...prior to running Meat Costing/Margin Close.
      *              So, we basically do all the Meat Costing/Margin Close processing
      *              behind the scenes for the Weekly Yield Reports.
      *
      *              To do "behind-the-scenes" processing, we have to create some of the
      *              Weekly Control/Cost data. We do that thru this program which creates
      *              new records for a week from the prior week in:
      *                  ROP100 - Resource Optimization Header
      *                  ROP012 - Item Control Data
      *                  POAXCPP- Item Standard Cost
      *
      *              This program runs in the CLP that is kicked off from the
      *              Inventory Stock Closing. That CL runs Meat Costing, Margin
      *              Adustments and then Weekly Yield logic.
      *
      ***************************************************************************************
      * MODIFICATIONS:
      ***************************************************************************************
      * DATE      PROGRAMMER
      *
      * 03/02/09  LeAnne Ramsey
      *           Recompile only. New field Smoker Yield Percent added to Resource
      *           Optimization Header.
      *
      * 02/17/10  LeAnne Ramsey
      *           Recompile only. Two new fields were added to the Resource Optimization Header:
      *                Cap&Blade Allocation % for Special Trim
      *                Cap&Blade Allocation % for Regular Trim
      *
      * 03/08/12  LeAnne Ramsey (E1984)
      *           Recompile only.
      *           Added 6 new Skirt Meat Allocation Flag fields to ROP100.
      /EJECT
      ***************************************************************************************
      * FILE SPECIFICATION
      ***************************************************************************************
      *
     Fpdiorel1  if   e           k disk
      *  Item bill of material
      *
      *
     Fpoaxcpl3  uf a e           k disk
      *  Item standard cost
      *
      *
     Frop100    uf a e           k disk
      *  Resource optimization header
      *
      *
     frop012    uf a e           k disk
      * Item control data
      *
      /eject
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Control fields
      *
     D svwedt          s                   like(ohwedt)
     D svwesyn         s                   like(axaudt)
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *---------------------------------------------------------------
      * Local data area
      *---------------------------------------------------------------
      *
     Dlda             uds                  dtaara(*lda)
     D  ldwedt                29     36  0
     D  ldwesyn               37     43  0
      *
     D  ldcono                82     84  0
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      **********************************************************************************
      * Mainline
      **********************************************************************************
      *
      * Write records for the New Week for:
      *
      *    RO Header
     C                   exsr      $wrt100
      *    RO Control
     C                   exsr      $wrt012
      *    Std Cost
     C                   exsr      $wrtpoax
      *
     C                   seton                                        lr
      /eject
      *-----------------------------------------------------------------------------------
      * Write the RO Header record for the new week
      *-----------------------------------------------------------------------------------
      *
     C     $wrt100       begsr
      *
      * Does a record already exist for the week we are writing?
      *    If it exists, do nothing
      *    If it does not exist, write a record using the prior week.
      *
     C     key01         chain     rop100                             92
     C                   if        *in92 = *on                                  If no hit
      *
     C     key01         setgt     rop100
     C     ldcono        readpe(n) rop100                                 92    If prior
     C                   if        *in92 = *off
      *
     C                   z-add     ldwedt        ohwedt
     C                   move      'O'           ohrcstcd
     C                   z-add     0             ohbicrvl
     C                   z-add     0             ohaltrpc
     C                   z-add     0             ohbicapc
     C                   z-add     0             ohblcapc
      *
     C                   write     ohrec
      *
     C                   endif                                                  If prior
     C                   endif                                                  If no hit
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Write Item Control Data
      *----------------------------------------------------------------
      *
     C     $wrt012       begsr
      *
      * If we already have Item Control Records for this week:
      *    don't write anything
      * If we don't have records:
      *   Find the most recent week in the Item Control File for this company.
      *   Write a record for the new week for each record in the most recent week.
      *
     C     key01         chain     rop012                             92
     C                   if        *in92 = *on                                  If no hit
      *
     C     key01         setll     rop012
     C     ldcono        readpe(n) rop012                                 92
     C                   if        *in92 = *off                                 If prior
     C                   z-add     icwedt        svwedt
      *
      * Using the week-ending date just retrieved, read all the
      * records for this company/date. Write a new record with the
      * new Week-ending Date for each record read.
      *
     C     key03         setll     rop012
     C                   dou       *in91 = *on                                  Do copy
     C     key03         reade(n)  rop012                                 91
     C                   if        *in91 = *off                                 If not EOF
     C                   z-add     ldwedt        icwedt
     C                   write     icrec
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do copy
      *
     C                   endif                                                  If prior
     C                   endif                                                  If no hit
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Write Standard Cost Data
      *----------------------------------------------------------------
      *
     C     $wrtpoax      begsr
      *
      * If we already have Item Standard Cost records for this week:
      *    don't write anything
      * If we don't have records:
      *   Find the most recent record in the Item Standard Cost file for this Company.
      *   Write copies of them for the new week.
      *
     C     key04         chain     poaxcpl3                           92
     C                   if        *in92 = *on                                  If no hit
      *
     C     key04         setll     poaxcpl3
     C     ldcono        reade(n)  poaxcpl3                               92
     C                   if        *in92 = *off                                 If prior recs
     C                   z-add     axaudt        svwesyn
      *
      * Using the week-ending date just retrieved, read all the
      * records for this company/date. Write a new record with the
      * new Week-ending Date for each record read.
      *
     C     key02         setll     poaxcpl3
     C                   dou       *in91 = *on                                  Do copy
     C     key02         reade(n)  poaxcpl3                               91
     C                   if        *in91 = *off                                 If not EOF
     C                   z-add     ldwesyn       axaudt
     C                   z-add     0             axfrpr
     C                   z-add     0             axaatm
      *
     C                   z-add     sdstm         axaatm
     C                   movel     sdusr         axayna
     C                   movel     sdpgm         axa0na
     C                   z-add     sdsdt         axaxdt
      *
      * The users want Yield/Pump Percents retrieved/updated from the BOM.
      *
     C     key05         chain     pdiorel1                             92
     C                   if        *in92 = *off
     C     iobopr        div       100           axfcpc
     C     iobmy2        div       100           axgepc
     C                   endif
      *
     C                   write     @axcphk
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do copy
      *
     C                   endif                                                  If prior recs
     C                   endif                                                  If no hit
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Initialization
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    ldcono
     C                   kfld                    ldwedt
      *
     C     key02         klist
     C                   kfld                    ldcono
     C                   kfld                    svwesyn
      *
     C     key03         klist
     C                   kfld                    ldcono
     C                   kfld                    svwedt
      *
     C     key04         klist
     C                   kfld                    ldcono
     C                   kfld                    ldwesyn
      *
     C     key05         klist
     C                   kfld                    ldcono
     C                   kfld                    axhgcd
     C                   kfld                    axhgcd
      *
     C                   endsr
      /eject
