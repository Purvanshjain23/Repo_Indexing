// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNSAEFR
// ?Date: 14.08.2025 Time: 03:46:22
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(LCL.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

//?USER: Initialize subfile header

// CTL.COA Batch Volume = PAR.COA Batch Volume
CTL.COA_Batch_Volume = PAR.COA_Batch_Volume;

CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

// LCL.USR Display 1 = CND.No
LCL.USR_Display_1 = 'N';

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

//?Determine if any orders for the batch have been shipped
EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
PARAMETER(PAR.COA_Active_Whse_Tank);
PARAMETER(LCL.Shipping_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Check Ord for Batch) TYPE(RTVOBJ) FILE(PMAMREP)            AC1851232;
PARAMETER(LCL.Shipping_Company);
PARAMETER(CTL.COA_Batch_Number);
PARAMETER(LCL.USR_Orders_on_Load);
PARAMETER(LCL.USR_Ship_Y_N);
{
 //?USER: Initialize routine

 // PAR.USR Orders on Load = CND.no
 PAR.USR_Orders_on_Load = 'N';

 // PAR.USR Ship Y/N = CND.no
 PAR.USR_Ship_Y_N = 'N';

 //?USER: Process Data record

 // PAR.USR Orders on Load = CND.yes
 PAR.USR_Orders_on_Load = 'Y';

 CASE;

 // IF DB1.OHE Ship Status is Shipped
 IF DB1.OHE_Ship_Status = 'S';

 // PAR.USR Ship Y/N = CND.yes
 PAR.USR_Ship_Y_N = 'Y';

 ENDIF;

}


CASE;

// IF LCL.USR Ship Y/N is yes
IF LCL.USR_Ship_Y_N = 'Y';

// Send information message - 'Orders for this batch have been shipped -  can not update.'
MESSAGE(USR3822 *INFO);
MSGPARM(CTL.COA_Batch_Number);

ENDIF;

//?Also if Batch is closed, prevent update of feedstock
CASE;

// IF PAR.COA Batch Header Sts is Closed from shipping
IF PAR.COA_Batch_Header_Sts = 'C';

// LCL.USR Ship Y/N = CND.yes
LCL.USR_Ship_Y_N = 'Y';

// Send information message - 'COA Batch is Closed.'
MESSAGE(USR3873 *INFO);
MSGPARM(CTL.COA_Batch_Number);

ENDIF;

//?Hide sflsel if ADD or open/closed batch
CASE;

// IF LCL.USR Ship Y/N is yes
IF LCL.USR_Ship_Y_N = 'Y';

// OR PGM.*Program mode is *ADD
OR PGM.*Program_mode = 'ADD';

// LCL.USR Display 1 = CND.Yes
LCL.USR_Display_1 = 'Y';

ENDIF;

ENDIF;

//?USER: Initialize subfile record (existing record)

EXECUTE FUNCTION(Rtv Feedstock Desc    RT) TYPE(RTVOBJ) FILE(PNGFREP)           AC1990431;
PARAMETER(RCD.RFS_Feedstock_Code);
PARAMETER(RCD.RFS_Feedstock_Code_Desc);
PARAMETER(LCL.RFS_Feedstock_UOM);
PARAMETER(LCL.RFS_Feedstock_Comment);
PARAMETER(LCL.RFS_Feedstock_Biomass_Ind);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// RCD.Condition Desc. 2  USR = Condition name of RCD.COA BH Feedstock Measure
RCD.Condition_Desc_2_USR = RTVCND(RCD.COA_BH_Feedstock_Measure);

//?USER: Validate subfile record fields

EXECUTE FUNCTION(Rtv Feedstock Desc    RT) TYPE(RTVOBJ) FILE(PNGFREP)           AC1990431;
PARAMETER(RCD.RFS_Feedstock_Code);
PARAMETER(RCD.RFS_Feedstock_Code_Desc);
PARAMETER(LCL.RFS_Feedstock_UOM);
PARAMETER(LCL.RFS_Feedstock_Comment);
PARAMETER(LCL.RFS_Feedstock_Biomass_Ind);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'RFS Feedstock Code not found.'
ERROR(USR4322);

ENDIF;

CASE;

// IF RCD.COA BH Feedstock Measure EQ WRK.Blank for 3          USR
IF RCD.COA_BH_Feedstock_Measure = WRK.Blank_for_3_USR;

// RCD.COA BH Feedstock Measure = LCL.RFS Feedstock UOM
RCD.COA_BH_Feedstock_Measure = LCL.RFS_Feedstock_UOM;

ENDIF;

CASE;

// IF RCD.COA BH Feedstock Biomass EQ WRK.Blank for 3          USR
IF RCD.COA_BH_Feedstock_Biomass = WRK.Blank_for_3_USR;

// RCD.COA BH Feedstock Biomass = LCL.RFS Feedstock Biomass Ind
RCD.COA_BH_Feedstock_Biomass = LCL.RFS_Feedstock_Biomass_Ind;

ENDIF;

CASE;

// IF RCD.COA BH Feedstock Comment EQ WRK.BLANK
IF RCD.COA_BH_Feedstock_Comment = WRK.BLANK;

// RCD.COA BH Feedstock Comment = LCL.RFS Feedstock Comment
RCD.COA_BH_Feedstock_Comment = LCL.RFS_Feedstock_Comment;

ENDIF;

// RCD.Condition Desc. 2  USR = Condition name of RCD.COA BH Feedstock Measure
RCD.Condition_Desc_2_USR = RTVCND(RCD.COA_BH_Feedstock_Measure);

CASE;

// IF RCD.COA BHF Pct per Order is Entered
IF RCD.COA_BHF_Pct_per_Order > 0;

// AND RCD.COA BH Feedstock Volume is not entered
AND RCD.COA_BH_Feedstock_Volume = *ZERO;

// AND RCD.COA BH Feedstock Measure is Pounds
AND RCD.COA_BH_Feedstock_Measure = '110';

// Compute:Feedstock volume
RCD.COA_BH_Feedstock_Volume = ( CTL.COA_Batch_Volume * 7.3 ) ( RCD.COA_BHF_Pct_per_Order           +
/ 100 ) 'H';

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt COA BH Feedstock  IF) TYPE(EXCINTFUN) FILE(PNGHCPP)        AC1990438;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.COA_ULSD_Company_#);
PARAMETER(RCD.COA_Batch_Number);
PARAMETER(RCD.COA_BH_Feedstock_Sequence);
PARAMETER(RCD.RFS_Feedstock_Code);
PARAMETER(RCD.COA_BH_Feedstock_Volume);
PARAMETER(RCD.COA_BH_Feedstock_Measure);
PARAMETER(RCD.COA_BH_Feedstock_Biomass);
PARAMETER(RCD.COA_BH_Feedstock_Comment);
PARAMETER(RCD.COA_BHF_Pct_per_Order);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Last Seq #        RT) TYPE(RTVOBJ) FILE(PNGHCPP)           AC1990439;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.COA_ULSD_Company_#);
 PARAMETER(PAR.COA_Batch_Number);
 PARAMETER(LCL.COA_BH_Feedstock_Sequence);
 {
  //?USER: Processing if Data record not found

  // PAR.COA BH Feedstock Sequence = CON.*ZERO
  PAR.COA_BH_Feedstock_Sequence = 0;

  //?USER: Process Data record

  // PAR.COA BH Feedstock Sequence = DB1.COA BH Feedstock Sequence
  PAR.COA_BH_Feedstock_Sequence = DB1.COA_BH_Feedstock_Sequence;

 }

 // LCL.COA BH Feedstock Sequence = LCL.COA BH Feedstock Sequence + CON.1
 LCL.COA_BH_Feedstock_Sequence = LCL.COA_BH_Feedstock_Sequence + 1;

 EXECUTE FUNCTION(Crt COA BH Feedstock  CR) TYPE(CRTOBJ) FILE(PNGHCPP)           AC1990422;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.COA_ULSD_Company_#);
 PARAMETER(PAR.COA_Batch_Number);
 PARAMETER(LCL.COA_BH_Feedstock_Sequence);
 PARAMETER(PAR.RFS_Feedstock_Code);
 PARAMETER(PAR.COA_BH_Feedstock_Volume);
 PARAMETER(PAR.COA_BH_Feedstock_Measure);
 PARAMETER(PAR.COA_BH_Feedstock_Biomass);
 PARAMETER(PAR.COA_BH_Feedstock_Comment);
 PARAMETER(WRK.COA_BHF_Unused_Sts);
 PARAMETER(*BLANK);
 PARAMETER(PAR.COA_BHF_Pct_per_Order);
 PARAMETER(*BLANK);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

 }

}


//?USER: Delete DBF record

EXECUTE FUNCTION(Del COA BH Feedstock  DO) TYPE(DLTOBJ) FILE(PNGHCPP)           AC1990424;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.COA_ULSD_Company_#);
PARAMETER(RCD.COA_Batch_Number);
PARAMETER(RCD.COA_BH_Feedstock_Sequence);

//?USER: Change DBF record

EXECUTE FUNCTION(Chg COA BH Feedstock  CH) TYPE(CHGOBJ) FILE(PNGHCPP)           AC1990423;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.COA_ULSD_Company_#);
PARAMETER(RCD.COA_Batch_Number);
PARAMETER(RCD.COA_BH_Feedstock_Sequence);
PARAMETER(RCD.RFS_Feedstock_Code);
PARAMETER(RCD.COA_BH_Feedstock_Volume);
PARAMETER(RCD.COA_BH_Feedstock_Measure);
PARAMETER(RCD.COA_BH_Feedstock_Biomass);
PARAMETER(RCD.COA_BH_Feedstock_Comment);
PARAMETER(RCD.COA_BHF_Unused_Sts);
PARAMETER(RCD.COA_BHF_Unused_Cde);
PARAMETER(RCD.COA_BHF_Pct_per_Order);
PARAMETER(RCD.COA_Reviewed_By_Title);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Create_Date);
PARAMETER(RCD.Create_Time);
PARAMETER(RCD.Create_User);
PARAMETER(RCD.Create_Program);
PARAMETER(RCD.Change_Date);
PARAMETER(RCD.Change_Time);
PARAMETER(RCD.Change_User);
PARAMETER(RCD.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

}


