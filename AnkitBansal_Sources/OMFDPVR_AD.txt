// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for OMFDPVR
// ?Date: 14.08.2025 Time: 03:27:04
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?If Company Number is not passed from previous program get default
CASE;

// IF PAR.Accounting Company Number is Equal to zero
IF PAR.Company_Number = *ZERO;

// PAR.Accounting Company Number = WRK.Accounting Company Number
PAR.Company_Number = WRK.Company_Number;

ENDIF;

// PAR.PRT Printer Device = CND.Not entered
PAR.PRT_Printer_Device = *BLANK;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.Company Number Pass   USR = PAR.Accounting Company Number
PAR.Company_Number_Pass_USR = PAR.Company_Number;

CASE;

// IF PAR.Order Number is Greater then zero
IF PAR.Order_Number > *ZERO;

// LCL.Display Flag = CND.Yes
LCL.Display_Flag = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Display Flag = CND.No
LCL.Display_Flag = 'N';

ENDIF;

//?USER: Load screen

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(PAR.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Company Number = PAR.Company Number
DTL.Company_Number = PAR.Company_Number;

// DTL.Company Number CDE = PAR.Company Number
DTL.Company_Number_CDE = PAR.Company_Number;

// DTL.CD7 Int Numeric Key = PAR.Order Number
DTL.CD7_Int_Numeric_Key = PAR.Order_Number;

// DTL.Manifest Type STS = CND.Customer Summary & Detail
DTL.Manifest_Type_STS = 'C';

//?USER: Validate fields

// DTL.Company Number = DTL.Company Number CDE
DTL.Company_Number = DTL.Company_Number_CDE;

// DTL.Order Number = DTL.CD7 Int Numeric Key
DTL.Order_Number = DTL.CD7_Int_Numeric_Key;

//?Process F4 on Company Number
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Company Number CDE
IF PGM.*Cursor_field = DTL.Company_Number_CDE;

CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// Call program SEL Plant Company      SR.
CALL PROGRAM(SEL Plant Company      SR) ('PPFZSRR');
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.Name);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

ENDIF;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on From Order Number
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.CD7 Int Numeric Key
AND PGM.*Cursor_field = DTL.CD7_Int_Numeric_Key;

// Call program SEL Order for Manifest SR.
CALL PROGRAM(SEL Order for Manifest SR) ('PDNWSRR');
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.CD7_Int_Numeric_Key);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?USER: Validate relations

// DTL.Name = CON.*BLANK
DTL.Name = *BLANK;

// DTL.Company Number = DTL.Company Number CDE
DTL.Company_Number = DTL.Company_Number_CDE;

// DTL.Order Number = DTL.CD7 Int Numeric Key
DTL.Order_Number = DTL.CD7_Int_Numeric_Key;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Send error for company number
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

EXECUTE FUNCTION(Rtv Plant Co Status   RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1761084;
PARAMETER(DTL.Company_Number);
PARAMETER(LCL.Plant_Company_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?05/10/07 JRB Removed hard coding company number
//?Check for plant company
CASE;

// IF LCL.Plant Company Sts is Plant Company
IF LCL.Plant_Company_Sts = 'P';

//?Check for plant company
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Company Number = DTL.Company Number CDE
DTL.Company_Number = DTL.Company_Number_CDE;

// Send error message - 'Invalid Company Number'
ERROR(USR1783);
MSGPARM(DTL.Company_Number);

ENDIF;

//?Send error for company number
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Company Number not found'
ERROR(USR0163);

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

ENDIF;

EXECUTE FUNCTION(RTV Chk Order Exist    RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1129157;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.CD7_Int_Numeric_Key);
PARAMETER(WRK.Customer_Purchase_Order_#);
PARAMETER(WRK.Reason_Code);
PARAMETER(WRK.Order_in_Use);
PARAMETER(WRK.Header_Status);
PARAMETER(WRK.Accounts_Receiv_Ent_1);
PARAMETER(WRK.Accounts_Receiv_Ent_2);
PARAMETER(WRK.User_Id);
{
 //?USER: Processing if Data record not found

 // PAR.Reason Code = CON.*BLANK
 PAR.Reason_Code = *BLANK;

 // PAR.Order in Use = CND.no
 PAR.Order_in_Use = 'N';

 // PAR.Header Status = CND.*None
 PAR.Header_Status = *BLANK;

 // PAR.User Id = CON.*BLANK
 PAR.User_Id = *BLANK;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Send error for Order number
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Send error for Order number
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Order Number is not found'
ERROR(USR1362);
MSGPARM(DTL.Order_Number);

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

ENDIF;

EXECUTE FUNCTION(Upd Fax Detail        RT) TYPE(RTVOBJ) FILE(OPEYCPP)           AB1206264;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.CD7_Int_Numeric_Key);
PARAMETER('04');
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(Create Fax Detail) TYPE(CRTOBJ) FILE(PKEAREP)                  AB1206170;
 PARAMETER(PAR.FD_Application_Code);
 PARAMETER(PAR.FD_Fax_Area_Code);
 PARAMETER(PAR.FD_Fax_Number);
 PARAMETER(PAR.FD_Fax_Attention);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 //?USER: Process Data record

 EXECUTE FUNCTION(Change Fax Detail) TYPE(CHGOBJ) FILE(PKEAREP)                  AB1206171;
 PARAMETER(DB1.FD_Application_Code);
 PARAMETER(DB1.FD_Fax_Area_Code);
 PARAMETER(DB1.FD_Fax_Number);
 PARAMETER(PAR.FD_Fax_Attention);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


//?Send error for Order not being shipped
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Order is Not Shipped.'
ERROR(USR1363);
MSGPARM(DTL.Order_Number);

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

ENDIF;

//?USER: User defined action

MOVE *ALL (To: PAR From: DTL);

// PAR.Company Number Pass   USR = DTL.Company Number
PAR.Company_Number_Pass_USR = DTL.Company_Number_CDE;

// PAR.Order Number 1  PASS  USR = DTL.CD7 Int Numeric Key
PAR.Order_Number_1_PASS_USR = DTL.CD7_Int_Numeric_Key;

//?Submit Manifest Print
// Call program PRT Manifest          UP.
CALL PROGRAM(PRT Manifest          UP) ('PMDBUPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('O/M');
PARAMETER('OMD0PCLP');
PARAMETER('Print Manifest');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Order_Number_1_PASS_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(DTL.Manifest_Type_STS);

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

