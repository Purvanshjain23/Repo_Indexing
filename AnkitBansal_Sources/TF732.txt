      *
      * SYSTEM:      Triumph Foods
      * PROGRAM:     TF732
      * TITLE:       View Invoice Charge
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     03/08/05
      *
      *
      * FUNCTION: This View displays a specific record from the Invoice Charge file.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      /eject
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Ftfd732    cf   e             workstn infds(iofeed)
      *
      *
     Ftfp020    if   e           k disk
      *    Invoice header
      *
      *
     Ftfj021b   if   e           k disk
      *    Invoice charges + Charge codes
      *
      *
     Fcaabrel1  if   e           k disk
      *    Company name and address
      *
      *
     Ftfp006    if   e           k disk
      *    System module
      *
      *
     Ftfp097    if   e           k disk
      *    Status codes
      *
      *
     Ftfp098    if   e           k disk
      *    Charge frequency
      *
      /eject
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D rtncd           s              2
     D maxmsg          s              2  0  inz(20)
      *
      *
      * Workfields for date manipulation
      *
     D wkisodate       s               D   datfmt(*iso)
      *
      *
      * Parm fields
      *
     D xxicsn          s                   like(icicsn)
      *
     D xxcono          s                   like(cccono)
     D xxglcd          s                   like(ccgldbcd)
     D xxglcdds        s             25
      *
     D xxstatus        s              1
     D xxsystem        s              3
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /eject
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /eject
      *----------------------------------------------------------------
      * Set environment for Screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
     C     xxicsn        chain     tfj021b                            92
     C                   if        *in92 = *on                                  If not found
     C                   add       1             error
     C                   movel     'HS09008'     mgid(e)
     C                   else
      *
     C                   move      iccccd        d1cccd
     C                   move      iccccd        d1cccd2
     C                   move      icsysfl       d1sysfl
     C                   z-add     icicam        d1icam
     C                   z-add     icunit        d1unit
     C                   move      iciccom       d1iccom
     C                   z-add     icinsn        d1insn
     C                   move      icsmcd        d1smcd
     C                   move      icinfl        d1infl
      *
     C                   move      ccccds        d1ccds
     C                   z-add     cccono        d1cono
     C                   move      ccgldbcd      d1gldbcd
     C                   move      ccglcrcd      d1glcrcd
     C                   move      cccfqcd       d1cfqcd
     C                   move      ccucfl        d1ucfl
     C                   move      ccaist        d1aist
      *
      *
      * Flip Invoice Charge Date from CCYYMMDD to MMDDYY for display
      *
     C     *iso          test(d)                 icicdt                 92
     C                   if        *in92 = *off                                 If OK date
     C                   move      icicdt        wkisodate
     C     *mdy          move      wkisodate     d1icdtmdy
     C                   endif                                                  If OK date
      *
      * Retrieve descriptions
      *
     C                   exsr      $desc
      *
      * Retrieve Invoice dates if the Invoice Charge has an Invoice Number
      *
     C                   if        d1insn <> 0
     C                   exsr      $invoice
     C                   endif
     C                   endif                                                  If not found
      *
      * Display screen 1
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Perform operator I/O for screen 1
      *---------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to CRT
      *
     C                   write     tf732k1
     C                   write     tf732ec
     C                   exfmt     tf732r1
      *
      * Clear all messages
      *
     C                   exsr      $clmsg
      *
      * Process user's entry and set routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   move      '03'          rtncd
     C                   eval      routne = exit
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   eval      routne = set1
     C                   other
      *
     C                   eval      routne = exit
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command key record will be set on. So, redispaly the screen to the user.
      *
     C                   if        *in43 = *on
     C                   movel     set1          routne
     C                   endif
      *
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command key record will be set on. So, redispaly the screen to the user.
      *
     C                   if        *in43 = *on
     C                   movel     set1          routne
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * End job
      *----------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        lr
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Retrieve descriptions
      *---------------------------------------------------------------
      *
     C     $desc         begsr
      *
      * Invoice charge status
      *
     C     icinstcd      chain     tfp097                             92
     C                   if        *in92 = *off
     C                   move      ststds        d1stds
     C                   endif
      *
      * Company name
      *
     C     d1cono        chain     caabrel1                           92
     C                   if        *in92 = *off
     C                   move      abadtx        d1conm
     C                   endif
      *
      * GL debit code description
      *
     C                   call      'TF805'
     C                   parm      d1cono        xxcono
     C                   parm      d1gldbcd      xxglcd
     C     d1gldbcdds    parm      *blank        xxglcdds
     C                   parm      *blank        xxsystem
     C                   parm      *blank        xxstatus
      *
      *
      * GL credit code description
      *
     C                   call      'TF805'
     C                   parm      d1cono        xxcono
     C                   parm      d1glcrcd      xxglcd
     C     d1glcrcdds    parm      *blank        xxglcdds
     C                   parm      *blank        xxsystem
     C                   parm      *blank        xxstatus
      *
      * System module
      *
     C     d1smcd        chain     tfp006                             92
     C                   if        *in92 = *off
     C                   move      smsmds        d1smds
     C                   endif
      *
      * Charge frequency
      *
     C     d1cfqcd       chain     tfp098                             92
     C                   if        *in92 = *off
     C                   move      cfcfqds       d1cfqds
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Retrieve Invoice Header info
      *---------------------------------------------------------------
      *
     C     $invoice      begsr
      *
     C     d1insn        chain     tfp020                             92
     C                   if        *in92 = *off                                 If hit
      *
      * Flip Invoice Date from CCYYMMDD to MMDDYY for display
      *
     C                   if        ihindt <> 0
     C     *iso          test(d)                 ihindt                 92
     C                   if        *in92 = *off                                 If OK date
     C                   move      ihindt        wkisodate
     C     *mdy          move      wkisodate     d1indtmdy
     C                   endif                                                  If OK date
     C                   endif
      *
      * Flip Due Date from CCYYMMDD to MMDDYY for display
      *
     C                   if        ihdudt <> 0
     C     *iso          test(d)                 ihdudt                 92
     C                   if        *in92 = *off                                 If OK date
     C                   move      ihdudt        wkisodate
     C     *mdy          move      wkisodate     d1dudtmdy
     C                   endif                                                  If OK date
     C                   endif
      *
      * Flip Posted Date from CCYYMMDD to MMDDYY for display
      *
     C                   if        ihpodt <> 0
     C     *iso          test(d)                 ihpodt                 92
     C                   if        *in92 = *off                                 If OK date
     C                   move      ihpodt        wkisodate
     C     *mdy          move      wkisodate     d1podtmdy
     C                   endif                                                  If OK date
     C                   endif
      *
     C                   endif                                                  If hit
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *
     C     *entry        plist
     C     d1icsn        parm                    xxicsn
     C                   parm                    rtncd
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /eject
