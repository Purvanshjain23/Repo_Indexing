// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNQEDFR
// ?Date: 14.08.2025 Time: 03:46:08
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PGM.*Scan limit = CND.9999999
PGM.*Scan_limit = 9999999;

// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

//?USER: Initialize subfile control

//?FIRST TIME
CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

// CTL.Salesperson Code = PAR.Salesperson Code
CTL.Salesperson_Code = PAR.Salesperson_Code;

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

ENDIF;

EXECUTE FUNCTION(Rtv Plant Cos all     RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1809261;
PARAMETER(*ZERO);
PARAMETER(CTL.USR_Company_Number_1);
PARAMETER(CTL.USR_Company_Number_2);
PARAMETER(LCL.USR_Company_Number_3);
PARAMETER(LCL.USR_Company_Number_4);
PARAMETER(LCL.USR_Company_Number_5);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF PAR.USR Company Number 1 is Equal to zero
 IF PAR.USR_Company_Number_1 = *ZERO;

 // PAR.USR Company Number 1 = DB1.Company Number
 PAR.USR_Company_Number_1 = DB1.Company_Number;

 // IF PAR.USR Company Number 2 is Equal to zero
 IF PAR.USR_Company_Number_2 = *ZERO;

 // PAR.USR Company Number 2 = DB1.Company Number
 PAR.USR_Company_Number_2 = DB1.Company_Number;

 // IF PAR.USR Company Number 3 is Equal to zero
 IF PAR.USR_Company_Number_3 = *ZERO;

 // PAR.USR Company Number 3 = DB1.Company Number
 PAR.USR_Company_Number_3 = DB1.Company_Number;

 // IF PAR.USR Company Number 4 is Equal to zero
 IF PAR.USR_Company_Number_4 = *ZERO;

 // PAR.USR Company Number 4 = DB1.Company Number
 PAR.USR_Company_Number_4 = DB1.Company_Number;

 // IF PAR.USR Company Number 5 is Equal to zero
 IF PAR.USR_Company_Number_5 = *ZERO;

 // PAR.USR Company Number 5 = DB1.Company Number
 PAR.USR_Company_Number_5 = DB1.Company_Number;

 ENDIF;

}


// LCL.Salesperson Code = CTL.Salesperson Code
LCL.Salesperson_Code = CTL.Salesperson_Code;

// LCL.Type Code = CTL.Type Code
LCL.Type_Code = CTL.Type_Code;

//?USER: Initialize subfile record from DBF record

//?SEL: Ship To Customer only
CASE;

// IF RCD.Ship To Customer Flag is No Use as Ship to Cust
IF RCD.Ship_To_Customer_Flag = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL: Active Ship To
CASE;

// IF RCD.Record Status is Not Active
IF RCD.Record_Status = *BLANK/'D'/'I';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?RECORD SELECTED
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(Rtv Sales Freight Rgn RT) TYPE(RTVOBJ) FILE(PNF4REP)           AC2012223;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.CFR_Region_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Cust Frt Rgn Info RT) TYPE(RTVOBJ) FILE(PNGXREP)           AC2012071;
PARAMETER(RCD.CFR_Region_Code);
PARAMETER(NLL.CFR_Region_Description);
PARAMETER(RCD.Freight_Rate_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Cust Traf PrcInfo RT) TYPE(RTVOBJ) FILE(CAEOREP)           AC2015442;
PARAMETER(CTL.USR_Company_Number_1);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Type_Code);
PARAMETER(RCD.Absorbed_Freight_Rate_1);
PARAMETER(WRK.Mileage_To_Customer);
PARAMETER(RCD.Salesperson_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(RTV Cust Traf PrcInfo RT) TYPE(RTVOBJ) FILE(CAEOREP)           AC2015442;
PARAMETER(CTL.USR_Company_Number_2);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Type_Code);
PARAMETER(RCD.Absorbed_Freight_Rate_2);
PARAMETER(WRK.Mileage_To_Customer);
PARAMETER(RCD.Salesperson_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


ENDIF;

//?SEL: CTL.Salesperson Code
CASE;

// IF CTL.Salesperson Code is entered
IF CTL.Salesperson_Code <> *BLANK;

CASE;

// IF CTL.Salesperson Code NE RCD.Salesperson Code
IF CTL.Salesperson_Code <> RCD.Salesperson_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL: CTL.Type Code
CASE;

// IF CTL.Type Code is Entered
IF CTL.Type_Code <> *BLANK;

CASE;

// IF CTL.Type Code NE RCD.Type Code
IF CTL.Type_Code <> RCD.Type_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?CHG: CTL.Saleperson Code
CASE;

// IF CTL.Salesperson Code NE LCL.Salesperson Code
IF CTL.Salesperson_Code <> LCL.Salesperson_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?CHG: CTL.Type Code
CASE;

// IF CTL.Type Code NE LCL.Type Code
IF CTL.Type_Code <> LCL.Type_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F7=Edit Freight Region
CASE;

// IF CTL.*CMD key is CF07
IF CTL.*CMD_key = '07';

EXECUTE FUNCTION(Rtv SlsPerson Authrty RT) TYPE(RTVOBJ) FILE(PNGLREP)           AC2004314;
PARAMETER(PAR.Salesperson_Code);
PARAMETER('SF');
PARAMETER(LCL.Approval_Status);
{
 //?USER: Processing if Data record not found

 // PAR.Approval Status = CND.Denied
 PAR.Approval_Status = 'D';

 //?USER: Process Data record

 // PAR.Approval Status = CND.Approved
 PAR.Approval_Status = 'A';

}


CASE;

// IF LCL.Approval Status is Approved
IF LCL.Approval_Status = 'A';

// Call program Edt Cust Freight Rgn  EF.
CALL PROGRAM(Edt Cust Freight Rgn  EF) ('PNV5EFR');

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Function not allowed.'
ERROR(USR1833);

ENDIF;

ENDIF;

//?F4=Prompt
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Salesperson Code
IF PGM.*Cursor_field = CTL.Salesperson_Code;

// Call program SEL Active Salesperson SR.
CALL PROGRAM(SEL Active Salesperson SR) ('CABYSRR');
PARAMETER(CTL.Salesperson_Code);

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?2=Edit Details (IP Cust Pricing Dtl)
CASE;

// IF RCD.*SFLSEL is Option 2
IF RCD.*SFLSEL = '2'/'2';

// Call program Edt Cust Pricing Dtl  ER.
CALL PROGRAM(Edt Cust Pricing Dtl  ER) ('PNQIE1R');
PARAMETER(RCD.Ship_To_Customer);

ENDIF;

//?5=Edit Elements (IP Cust Price Elem)
CASE;

// IF RCD.*SFLSEL is Option 5
IF RCD.*SFLSEL = '5'/'5';

// Call program Edt IP Cust Prc Elem  EF.
CALL PROGRAM(Edt IP Cust Prc Elem  EF) ('PNPPEFR');
PARAMETER(RCD.Ship_To_Customer);

ENDIF;

//?8=Work With Items (IP Cust Item Pricing Dtl)
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

// Call program WW CustItem Prc Dtls  DF.
CALL PROGRAM(WW CustItem Prc Dtls  DF) ('PNQFDFR');
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Customer_Name);

ENDIF;

//?7=Edit Cust Item Elem (IP Cust Item Price Elem)
CASE;

// IF RCD.*SFLSEL is Option 7
IF RCD.*SFLSEL = '7'/'7';

// Call program Edt IP Cust ItmPrc El EF.
CALL PROGRAM(Edt IP Cust ItmPrc El EF) ('PNP4EFR');
PARAMETER(RCD.Ship_To_Customer);

ENDIF;

//?9=Edit Item Company Elem (IP Co Cust Item Prc Elem)
CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

// Call program Edt Co CstItm Prc Elm EF.
CALL PROGRAM(Edt Co CstItm Prc Elm EF) ('PNQLEFR');
PARAMETER(RCD.Ship_To_Customer);

ENDIF;

//?10=Display Accruals
CASE;

// IF RCD.*SFLSEL is Option 10
IF RCD.*SFLSEL = '10';

// Call program WW Cust Accruals-Dsp  DF.
CALL PROGRAM(WW Cust Accruals-Dsp  DF) ('PPB2DFR');
PARAMETER(RCD.Ship_To_Customer);

ENDIF;

//?USER: Final processing (Pre-confirm)

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

