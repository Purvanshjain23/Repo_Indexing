// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBNUEFR
// ?Date: 14.08.2025 Time: 03:48:39
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification History
DO;

//?CST/ITM Uma 07/07/25 - Recompilation due to DDS to DDL conversion of
//?PBBPREP - DP_PRODUCT_LOCATION"."US 23303: Add audit columns in DP*
ENDDO;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

//?USER: Initialize subfile header

CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// CTL.DP Product = PAR.DP Product
CTL.DP_Product = PAR.DP_Product;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

ENDIF;

EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
PARAMETER(CTL.DP_Product);
PARAMETER(CTL.Item_Description_Line_1);
PARAMETER(NLL.Description_Line_Two);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize subfile record (existing record)

//?Select: Location Contains ...
CASE;

// IF CTL.DP Location NE WRK.BLANK
IF CTL.DP_Location <> WRK.BLANK;

// Call program CLC Call Qclscan       UP.
CALL PROGRAM(CLC Call Qclscan       UP) ('QCLSCAN');
PARAMETER(RCD.DP_Location);
PARAMETER(20);
PARAMETER(1);
PARAMETER(CTL.DP_Location);
PARAMETER(20);
PARAMETER(1);
PARAMETER(1);
PARAMETER(*BLANK);
PARAMETER(WRK.USR_Qclscan_Result);

CASE;

// IF WRK.USR Qclscan Result ? is Does contain
IF WRK.USR_Qclscan_Result > 0;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Select: Salesperson
CASE;

// IF CTL.DP Salesperson Code is entered
IF CTL.DP_Salesperson_Code <> *BLANK;

// AND CTL.DP Salesperson Code NE RCD.DP Salesperson Code
AND CTL.DP_Salesperson_Code <> RCD.DP_Salesperson_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

EXECUTE FUNCTION(Rtv DP Location Nm    RT) TYPE(RTVOBJ) FILE(PBBOREP)           AC2097375;
PARAMETER(RCD.DP_Location);
PARAMETER(RCD.DP_Parent_Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?output the sales# For class c customers
// RCD.Text 5 all caps     USR = DB1.DP Location
RCD.Text_5_all_caps_USR = DB1.DP_Location;

//?USER: Validate subfile control

//?F4
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.DP Salesperson Code
IF PGM.*Cursor_field = CTL.DP_Salesperson_Code;

// Call program SEL Active Salesperson SR.
CALL PROGRAM(SEL Active Salesperson SR) ('CABYSRR');
PARAMETER(CTL.DP_Salesperson_Code);

ENDIF;

ENDIF;

CASE;

// IF CTL.DP Salesperson Code NE LCL.DP Salesperson Code
IF CTL.DP_Salesperson_Code <> LCL.DP_Salesperson_Code;

// LCL.DP Salesperson Code = CTL.DP Salesperson Code
LCL.DP_Salesperson_Code = CTL.DP_Salesperson_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Create new PRODUCT LOCATION  -- AND MAYBE LOCATION IF NEW TOO
CASE;

// IF CTL.*CMD key is CF06
IF CTL.*CMD_key = '06';

// LCL.DP Location = CON.*BLANK
LCL.DP_Location = *BLANK;

// Call program Sel DP Location       SL.
CALL PROGRAM(Sel DP Location       SL) ('PBO4SRR');
PARAMETER(LCL.DP_Location);

CASE;

// IF LCL.DP Location is Entered
IF LCL.DP_Location <> *BLANK;

EXECUTE FUNCTION(Rtv/Crt new Prod Loc   RT) TYPE(RTVOBJ) FILE(PBBPREP)          AC2097300;
PARAMETER(CTL.DP_Product);
PARAMETER(LCL.DP_Location);
{
 //?USER: Processing if Data record not found

 // Call program RTV Sys Dt yyyymmddtm UP.
 CALL PROGRAM(RTV Sys Dt yyyymmddtm UP) ('PBN2UPC');
 PARAMETER(LCL.DP_Date_Time_Stamp);

 EXECUTE FUNCTION(Crt DP Prod Location  CR) TYPE(CRTOBJ) FILE(PBBPREP)           AC2093169;
 PARAMETER('Demand');
 PARAMETER('Base');
 PARAMETER(PAR.DP_Product);
 PARAMETER(PAR.DP_Location);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(*BLANK);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER('AS400');
 PARAMETER(LCL.DP_Date_Time_Stamp);
 {
  //?USER: Processing if Data record already exists

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

 //?USER: Process Data record

 // Send error message - 'DP Product Location already exists.'
 ERROR(USR4733);

}


// IF *OTHERWISE
IF *OTHERWISE;

// Call program Pmt New Location Crt   PV.
CALL PROGRAM(Pmt New Location Crt   PV) ('PBOWPVR');
PARAMETER(CTL.DP_Product);
PARAMETER(LCL.DP_Location);

ENDIF;

CASE;

// IF LCL.DP Location is Entered
IF LCL.DP_Location <> *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?USER: Validate subfile record fields

CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> RCD.DP Salesperson Code
IF PGM.*Cursor_field = RCD.DP_Salesperson_Code;

// Call program SEL Active Salesperson SR.
CALL PROGRAM(SEL Active Salesperson SR) ('CABYSRR');
PARAMETER(RCD.DP_Salesperson_Code);

ENDIF;

ENDIF;

CASE;

// IF RCD.DP Salesperson Code is entered
IF RCD.DP_Salesperson_Code <> *BLANK;

EXECUTE FUNCTION(Val Salesperson Exist RT) TYPE(RTVOBJ) FILE(CAAPREP)           AC1995516;
PARAMETER(RCD.DP_Salesperson_Code);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send error message - 'Salesperson not found.'
ERROR(USR0039);
MSGPARM(RCD.DP_Salesperson_Code);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Salesperson NmeOnlyRT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1739999;
PARAMETER(RCD.DP_Salesperson_Code);
PARAMETER(RCD.DP_Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.DP Salesperson Name = CON.*BLANK
RCD.DP_Salesperson_Name = *BLANK;

ENDIF;

//?USER: Delete DBF record

EXECUTE FUNCTION(Del DP Prod Location  DO) TYPE(DLTOBJ) FILE(PBBPREP)           AC2093171;
PARAMETER(RCD.DP_Profile);
PARAMETER(RCD.DP_Scenario);
PARAMETER(RCD.DP_Product);
PARAMETER(RCD.DP_Location);

//?USER: Change DBF record

EXECUTE FUNCTION(Chg DP Prod Location  CH) TYPE(CHGOBJ) FILE(PBBPREP)           AC2093170;
PARAMETER(RCD.DP_Profile);
PARAMETER(RCD.DP_Scenario);
PARAMETER(RCD.DP_Product);
PARAMETER(RCD.DP_Location);
PARAMETER(RCD.DP_Local_Code);
PARAMETER(RCD.DP_Local_Description);
PARAMETER(RCD.DP_Sell_Price);
PARAMETER(RCD.DP_Standard_Cost);
PARAMETER(RCD.DP_Supply_Lead_Time);
PARAMETER(RCD.DP_Preferred_Lot_Qty);
PARAMETER(RCD.DP_Replenish_Period);
PARAMETER(RCD.DP_Planning_Freeze_Fence);
PARAMETER(RCD.DP_Replenish_Lead_Time);
PARAMETER(RCD.DP_Supplier_Code);
PARAMETER(RCD.DP_Minimum_Lot_Qty);
PARAMETER(RCD.DP_Order_Multiple);
PARAMETER(RCD.DP_Open_Stock);
PARAMETER(RCD.DP_Salesperson_Code);
PARAMETER(RCD.DP_Salesperson_Name);
PARAMETER(RCD.DP_System_of_Record);
PARAMETER(RCD.DP_Date_Time_Stamp);

