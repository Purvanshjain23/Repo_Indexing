// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKAAXFR
// ?Date: 14.08.2025 Time: 02:52:46
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Initialize
CASE;

// IF LCL.#Sequence Block is NULL
IF LCL.#Sequence_Block = *BLANK;

//?Delete All Errors for Tattoo if exists.
EXECUTE FUNCTION(Dlt All Error's       RT) TYPE(RTVOBJ) FILE(PKB6CPP)           AB1125417;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Delete Kill Validation) TYPE(DLTOBJ) FILE(PKB6CPP)             AB1104583;
 PARAMETER(DB1.KV_Company_Number);
 PARAMETER(DB1.KV_Kill_Date);
 PARAMETER(DB1.KV_TATTOO_NUMBER);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.KV_Record_Number);
 PARAMETER(DB1.KV_Record_Type);
 PARAMETER(DB1.KV_Error_Code);
}


//?Initialize Evaluation Transaction for re-balancing.
EXECUTE FUNCTION(Bal Init Eval Trans   RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1227909;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.ET Record Add/Del Sts is Add
 IF DB1.ET_Record_Add_Del_Sts = 'A';

 EXECUTE FUNCTION(Dlt Eval Trans        DL) TYPE(DLTOBJ) FILE(PKBVCPP)           AB1102933;
 PARAMETER(DB1.ET_Company_Number);
 PARAMETER(DB1.ET_Kill_Date);
 PARAMETER(DB1.ET_Scale_Sequence_Number);
 PARAMETER(DB1.ET_Carcass_Number);
 PARAMETER(DB1.ET_Carcass_Number_Insert);
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.ET Adjust/Add Type is Adjust w/Average Lean%
 IF DB1.ET_Adjust_Add_Type = 'LN%';

 EXECUTE FUNCTION(Bal Init EvlTrn NoFOM CH) TYPE(CHGOBJ) FILE(PKBVCPP)           AB1274728;
 PARAMETER(DB1.ET_Company_Number);
 PARAMETER(DB1.ET_Kill_Date);
 PARAMETER(DB1.ET_Scale_Sequence_Number);
 PARAMETER(DB1.ET_Carcass_Number);
 PARAMETER(DB1.ET_Carcass_Number_Insert);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER('A');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?060104 SLM  HPEBAL Add the ET Adjust/Add Source Initial to *none
 EXECUTE FUNCTION(Bal Init Eval Trans   CH) TYPE(CHGOBJ) FILE(PKBVCPP)           AB1227923;
 PARAMETER(DB1.ET_Company_Number);
 PARAMETER(DB1.ET_Kill_Date);
 PARAMETER(DB1.ET_Scale_Sequence_Number);
 PARAMETER(DB1.ET_Carcass_Number);
 PARAMETER(DB1.ET_Carcass_Number_Insert);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER('A');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

 ENDIF;

}


//?Delete Payment Tattoo Header Comments.
EXECUTE FUNCTION(Del Payment Comments  RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1231676;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER('P');
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Delete Tattoo Header Comm) TYPE(DLTOBJ) FILE(PKA4CPP)          AB1113203;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.THC_Comment_Line);
}


//?Set Status fields to begining value
// LCL.TH Header Error Sts = CND.No Header Error
LCL.TH_Header_Error_Sts = *BLANK;

// LCL.TH Detail Error Sts = CND.No
LCL.TH_Detail_Error_Sts = 'N';

// LCL.TH Kill Balancing Sts = CND.Not Balanced Record
LCL.TH_Kill_Balancing_Sts = *BLANK;

// LCL.THP Process Code = CON.SLG
LCL.THP_Process_Code = 'SLG';

//?LCL.TH Bal to Kill Gen
CASE;

// IF PAR.Requested by User to Bal is Yes
IF PAR.Requested_by_User_to_Bal = 'Y';

// LCL.TH Bal to Kill Gen = CND.User Requested Generated
LCL.TH_Bal_to_Kill_Gen = 'U';

//?LCL.TH Bal to Kill Gen
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.TH Bal to Kill Gen = PAR.TH Bal to Kill Gen
LCL.TH_Bal_to_Kill_Gen = PAR.TH_Bal_to_Kill_Gen;

ENDIF;

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER('BALHLDOVR');
PARAMETER(LCL.Auto_Balance_HldOvr_USR);

// LCL.Hold Over Bal Sts USR = CND.No
LCL.Hold_Over_Bal_Sts_USR = 'N';

// PAR.Balance First Day USR = CND.No
PAR.Balance_First_Day_USR = 'N';

//?05/27/04 PKD HPEBAL - Initialize with Tattoo Header Recalc
//?                      Live Weight Yield.
// LCL.TH Recalc Live Wgt Yld = PAR.TH Recalc Live Wgt Yld
LCL.TH_Recalc_Live_Wgt_Yld = PAR.TH_Recalc_Live_Wgt_Yld;

ENDIF;

// Call program RTV IHPE Shipper      XF.
CALL PROGRAM(RTV IHPE Shipper      XF) ('PPXJXFR');
PARAMETER(PGM.*Return_code);
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(LCL.CDI_Shipper_User);

//?Tattoo Header Accumulate/Validate Loss Transaction
CASE;

// IF LCL.#Sequence Block is NULL
IF LCL.#Sequence_Block = *BLANK;

EXECUTE FUNCTION(Rtv Bal/Tattoo Hdr    RT) TYPE(RTVOBJ) FILE(PKBSCPP)           AB1125412;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.TH_Head_Condemned);
PARAMETER(PAR.TH_Avg_Live_Wgt);
PARAMETER(LCL.TH_Detail_Error_Sts);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.LT Type Code is Carcass Loss
 IF DB1.LT_Type_Code = 02;

 // AND DB1.LTN Wgt is Zeros
 AND DB1.LTN_Wgt = *ZERO;

 // WRK.LTN Wgt = PAR.TH Avg Live Wgt
 WRK.LTN_Wgt = PAR.TH_Avg_Live_Wgt;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.LTN Wgt = DB1.LTN Wgt
 WRK.LTN_Wgt = DB1.LTN_Wgt;

 ENDIF;

 // Call program Val Loss Trans        XF.
 CALL PROGRAM(Val Loss Trans        XF) ('PKPJXFR');
 PARAMETER(DB1.LTN_Company_Number);
 PARAMETER(DB1.LTN_Kill_Date);
 PARAMETER(DB1.LTN_Record_Number);
 PARAMETER(DB1.LTN_Tattoo_Number);
 PARAMETER(DB1.LTN_Shift);
 PARAMETER(WRK.LTN_Wgt);
 PARAMETER(DB1.LTN_Extent);
 PARAMETER(DB1.LTN_Trim_Location);
 PARAMETER(WRK.LTN_Error_Sts);
 PARAMETER(DB1.LTN_Record_Created_Status);
 PARAMETER(DB1.LTN_User_Error_Override);
 PARAMETER(DB1.LTN_Source_Type);
 PARAMETER(DB1.LT_Type_Code);
 PARAMETER(DB1.LR_Reason_Code);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 PARAMETER(DB1.RU_Date);
 PARAMETER(DB1.RU_Time);
 PARAMETER(PAR.TH_Head_Condemned);
 PARAMETER(WRK.Loss_Error_1_Usr);
 PARAMETER(WRK.Loss_Error_2_Usr);
 PARAMETER(WRK.Loss_Error_3_Usr);
 PARAMETER(WRK.Loss_Error_4_Usr);
 PARAMETER(WRK.Loss_Error_5_Usr);
 PARAMETER(PAR.TH_Detail_Error_Sts);

 EXECUTE FUNCTION(Chg Loss Transaction  CH) TYPE(CHGOBJ) FILE(PKBSCPP)           AB1102906;
 PARAMETER(DB1.LTN_Company_Number);
 PARAMETER(DB1.LTN_Kill_Date);
 PARAMETER(DB1.LTN_Record_Number);
 PARAMETER(DB1.LTN_Tattoo_Number);
 PARAMETER(DB1.LTN_Shift);
 PARAMETER(WRK.LTN_Wgt);
 PARAMETER(DB1.LTN_Extent);
 PARAMETER(DB1.LTN_Trim_Location);
 PARAMETER(WRK.LTN_Error_Sts);
 PARAMETER(DB1.LTN_Record_Created_Status);
 PARAMETER(DB1.LTN_User_Error_Override);
 PARAMETER(DB1.LTN_Source_Type);
 PARAMETER(DB1.LT_Type_Code);
 PARAMETER(DB1.LR_Reason_Code);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 PARAMETER(DB1.RU_Date);
 PARAMETER(DB1.RU_Time);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(Upd Head Condemn      RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1227599;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Rtv Head Condemned    RT) TYPE(RTVOBJ) FILE(PKBSCPP)           AB1227600;
   PARAMETER(02);
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(PAR.TH_Head_Condemned);
   {
    //?USER: Initialize routine

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    // PAR.TH Head Condemned = PAR.TH Head Condemned + CON.1
    PAR.TH_Head_Condemned = PAR.TH_Head_Condemned + 1;

   }

   EXECUTE FUNCTION(Chg Head Condemned    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1227604;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(PAR.TH_Head_Condemned);
   PARAMETER('E');
   {
    //?USER: Processing after Data update

    EXECUTE FUNCTION(Upd Head Condemned    RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1227617;
    PARAMETER(DB1.BOH_Company_Number);
    PARAMETER(DB1.BOH_Buy_Order_Number);
    PARAMETER(DB1.BOL_Load_Number);
    PARAMETER(DB1.TH_Tattoo_Number);
    PARAMETER(DB1.TH_Kill_Date);
    PARAMETER(DB1.TH_Head_Condemned);
    {
     //?USER: Process Data record

     // LCL.Net Head Usr = DB1.TD Pen Head - DB1.TD Yard Dead
     LCL.Net_Head_Usr = DB1.TD_Pen_Head - DB1.TD_Yard_Dead;

     // Call program Rtv Stress Pens Only  XF.
     CALL PROGRAM(Rtv Stress Pens Only  XF) ('PLPJXFR');
     PARAMETER(DB1.Pen_Company_Number);
     PARAMETER(DB1.Pen_Number);
     PARAMETER(LCL.Stress_Market_Type);

     //?Stress pen is now defined at the pen ext instead of ST1
     CASE;

     // IF LCL.Stress/Market Type is Stress
     IF LCL.Stress_Market_Type = 'S';

     // IF LCL.Net Head Usr is *Zeros
     IF LCL.Net_Head_Usr = *ZERO;

     // IF *OTHERWISE
     IF *OTHERWISE;

     EXECUTE FUNCTION(Upd Head Condemned    RT) TYPE(RTVOBJ) FILE(PKDYCPP)           AB1227618;
     PARAMETER(DB1.BOH_Company_Number);
     PARAMETER(DB1.BOH_Buy_Order_Number);
     PARAMETER(DB1.BOL_Load_Number);
     PARAMETER(DB1.TH_Tattoo_Number);
     PARAMETER(DB1.TH_Kill_Date);
     PARAMETER(DB1.TD_Sequence_Number);
     PARAMETER(PAR.TH_Head_Condemned);
     {
      //?USER: Processing if Data record not found

      EXECUTE FUNCTION(Crt Tattoo Detail Ext  CR) TYPE(CRTOBJ) FILE(PKDYCPP)          AB1196901;
      PARAMETER(PAR.BOH_Company_Number);
      PARAMETER(PAR.BOH_Buy_Order_Number);
      PARAMETER(PAR.BOL_Load_Number);
      PARAMETER(PAR.TH_Tattoo_Number);
      PARAMETER(PAR.TH_Kill_Date);
      PARAMETER(PAR.TD_Sequence_Number);
      PARAMETER('N');
      PARAMETER(*ZERO);
      PARAMETER(PAR.TDE_Head_Condemned);
      PARAMETER(*ZERO);
      PARAMETER('N');
      PARAMETER('N');
      PARAMETER(PAR.RS_User_Changed);
      PARAMETER(PAR.RS_Date_Changed);
      PARAMETER(PAR.RS_Time_Changed);
      PARAMETER(PAR.RS_Record_Status);
      PARAMETER(PAR.RS_Job);
      PARAMETER(PAR.RS_Program);
      PARAMETER(PAR.RS_User_Added);
      PARAMETER(PAR.RS_Date_Added);
      PARAMETER(PAR.RS_Time_Added);
      {
       //?USER: Processing before Data update

       EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
       PARAMETER(DB1.RS_Record_Status);
       PARAMETER(DB1.RS_Job);
       PARAMETER(DB1.RS_Program);
       PARAMETER(DB1.RS_User_Added);
       PARAMETER(DB1.RS_Date_Added);
       PARAMETER(DB1.RS_Time_Added);
       {
        //?Execute internal function

        // PAR.RS Record Status = CND.Active
        PAR.RS_Record_Status = 'A';

        // PAR.RS User Added = JOB.*USER
        PAR.RS_User_Added = JOB.*USER;

        // PAR.RS Date Added = JOB.*Job date
        PAR.RS_Date_Added = JOB.*Job_date;

        // PAR.RS Time Added = JOB.*Job time
        PAR.RS_Time_Added = JOB.*Job_time;

        // PAR.RS Program = JOB.*PROGRAM
        PAR.RS_Program = JOB.*PROGRAM;

        // PAR.RS Job = JOB.*JOB
        PAR.RS_Job = JOB.*JOB;

       }

      }

      //?USER: Process Data record

      EXECUTE FUNCTION(Chg Head Condemned    CH) TYPE(CHGOBJ) FILE(PKDYCPP)           AB1227625;
      PARAMETER(DB1.BOH_Company_Number);
      PARAMETER(DB1.BOH_Buy_Order_Number);
      PARAMETER(DB1.BOL_Load_Number);
      PARAMETER(DB1.TH_Tattoo_Number);
      PARAMETER(DB1.TH_Kill_Date);
      PARAMETER(DB1.TD_Sequence_Number);
      PARAMETER(PAR.TDE_Head_Condemned);
     }

     QUIT;

     ENDIF;

    }

   }

  }

 }

}


ENDIF;

//?Tattoo Header Accumulate/Validate Evaluation Records
CASE;

// IF LCL.#Sequence Block is NULL
IF LCL.#Sequence_Block = *BLANK;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

// LCL.Net Head Usr = PAR.TH Head Received - PAR.TH Yard Deads
LCL.Net_Head_Usr = PAR.TH_Head_Received - PAR.TH_Yard_Deads;

// LCL.Net Head Usr = LCL.Net Head Usr - LCL.TH Head Condemned
LCL.Net_Head_Usr = LCL.Net_Head_Usr - LCL.TH_Head_Condemned;

// LCL.Net Head Adjusted Usr = LCL.TH Head Condemned + PAR.TH Yard Deads
LCL.Net_Head_Adjusted_Usr = LCL.TH_Head_Condemned + PAR.TH_Yard_Deads;

//?05/27/04 SLM HPEBAL - Changes to the No Fat-O-Meater calculations
//?                     and Balancing with Producer's History Average
//?                     *** change to RTV to pass the producer
EXECUTE FUNCTION(Bal/Val Eval Trans    RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1226457;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.TH_Head_Killed);
PARAMETER(LCL.TH_Head_Adds);
PARAMETER(LCL.TH_Head_Accepted);
PARAMETER(LCL.TH_Hot_Wgt);
PARAMETER(LCL.TH_Tot_Loin_Eye_Depth);
PARAMETER(LCL.TH_Tot_Backfat_Inches);
PARAMETER(LCL.TH_Tot_Light_Reflectance);
PARAMETER(LCL.TH_Header_Error_Sts);
PARAMETER(LCL.TH_Detail_Error_Sts);
PARAMETER(LCL.TH_Kill_Balancing_Sts);
PARAMETER(LCL.TH_Head_Excluded);
PARAMETER(LCL.TH_Head_Identified);
PARAMETER(LCL.TH_Head_Adjusted_LN);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.Carcass_Dbw_Min);
PARAMETER(PAR.Carcass_Dbw_Max);
PARAMETER(PAR.Carcass_Lgt_Min);
PARAMETER(PAR.Carcass_Lgt_Max);
PARAMETER(PAR.Lean_High_Min);
PARAMETER(PAR.Lean_High_Max);
PARAMETER(PAR.Lean_Low_Min);
PARAMETER(PAR.Lean_Low_Max);
PARAMETER(PAR.High_Yield_Min);
PARAMETER(PAR.High_Yield_Max);
PARAMETER(PAR.Low_Yield_Min);
PARAMETER(PAR.Low_Yield_Max);
PARAMETER(PAR.Head_Percent_Min);
PARAMETER(PAR.Head_Percent_Max);
PARAMETER(PAR.Head_Percent_Min);
PARAMETER(PAR.Head_Percent_Max);
PARAMETER(PAR.BackFat_High_Min);
PARAMETER(PAR.BackFat_High_Max);
PARAMETER(PAR.BackFat_Low_Min);
PARAMETER(PAR.Backfat_Low_Max);
PARAMETER(PAR.LoinEye_High_Min);
PARAMETER(PAR.LoinEye_High_Max);
PARAMETER(PAR.LoinEye_Low_Min);
PARAMETER(PAR.LoinEye_Low_Max);
PARAMETER(LCL.Hot_Wgt_Lean_Accum_Usr);
PARAMETER(LCL.Hot_Wgt_Backf_Accum_Usr);
PARAMETER(LCL.Hot_Wgt_Loine_Accum_Usr);
PARAMETER(LCL.Hot_Wgt_LghtR_Accum_Usr);
PARAMETER(LCL.Net_Head_Usr);
{
 //?USER: Initialize routine

 //?05/27/04 SLM HPEBAL - Changes to the No Fat-O-Meater calculations
 //?                      and Balancing with Producer's History Average
 MOVE *ALL (To: PAR From: CON);

 //?USER: Processing if Data record not found

 CASE;

 // IF PAR.Net Head Usr is *Zeros
 IF PAR.Net_Head_Usr = *ZERO;

 //?Net head is zeros if there are no transaction then this is ok
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.TH Header Error Sts = CND.No Kill Information
 PAR.TH_Header_Error_Sts = 'K';

 // PAR.TH Kill Balancing Sts = CND.Error
 PAR.TH_Kill_Balancing_Sts = 'E';

 EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(999999);
 PARAMETER('H');
 PARAMETER('HNE');
 PARAMETER('Header No Evaluation Recs');
 PARAMETER(*BLANKS);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(JOB.*JOB);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 {
  //?USER: Processing before Data update

  CASE;

  // IF PAR.KV Error Description is Entered
  IF PAR.KV_Error_Description <> *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
  PARAMETER(PAR.KV_Error_Code);
  PARAMETER(DB1.KV_Error_Description);
  {
   //?USER: Process Data record

   // PAR.EV Description = DB1.EV Description
   PAR.EV_Description = DB1.EV_Description;

  }

  ENDIF;

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDIF;

 //?USER: Process Data record

 //?TH Head Identified.
 CASE;

 // IF DB1.ET Record Add/Del Sts is Uploaded Records
 IF DB1.ET_Record_Add_Del_Sts = *BLANK/'D';

 // PAR.TH Head Identified = PAR.TH Head Identified + CON.1
 PAR.TH_Head_Identified = PAR.TH_Head_Identified + 1;

 ENDIF;

 CASE;

 // IF DB1.RS Record Status is Active
 IF DB1.RS_Record_Status = 'A';

 //?Initialize
 CASE;

 // IF LCL.#Sequence Block is NULL
 IF LCL.#Sequence_Block = *BLANK;

 // LCL.ET Error Sts = CND.Balance
 LCL.ET_Error_Sts = 'B';

 // LCL.ET Lean Percent NPPC = DB1.ET Lean Percent NPPC
 LCL.ET_Lean_Percent_NPPC = DB1.ET_Lean_Percent_NPPC;

 // LCL.ET Lean Percent FOM = DB1.ET Lean Percent FOM
 LCL.ET_Lean_Percent_FOM = DB1.ET_Lean_Percent_FOM;

 // LCL.ET Backfat Thickness MM = DB1.ET Backfat Thickness MM
 LCL.ET_Backfat_Thickness_MM = DB1.ET_Backfat_Thickness_MM;

 // LCL.ET Loineye Depth MM = DB1.ET Loineye Depth MM
 LCL.ET_Loineye_Depth_MM = DB1.ET_Loineye_Depth_MM;

 // LCL.ET Light Reflectance MM = DB1.ET Light Reflectance MM
 LCL.ET_Light_Reflectance_MM = DB1.ET_Light_Reflectance_MM;

 // LCL.RS Record Status = DB1.RS Record Status
 LCL.RS_Record_Status = DB1.RS_Record_Status;

 // LCL.ET Adjust/Add Type = CND.None
 LCL.ET_Adjust_Add_Type = *BLANK;

 // LCL.ET Adjust/Add Source = CND.*NONE
 LCL.ET_Adjust_Add_Source = *BLANK;

 ENDIF;

 //?Process Carcass
 CASE;

 // IF DB1.ET Backfat Thickness MM is Zero
 IF ( DB1.ET_Backfat_Thickness_MM = *ZERO;

 // AND DB1.ET Loineye Depth MM is zero
 AND DB1.ET_Loineye_Depth_MM = *ZERO;

 // AND DB1.ET Light Reflectance MM is EQ Zero
 AND DB1.ET_Light_Reflectance_MM = *ZERO );

 // LCL.ET Adjust/Add Type = CND.Adjust w/Average Lean%
 LCL.ET_Adjust_Add_Type = 'LN%';

 // LCL.ET Error Sts = CND.Error
 LCL.ET_Error_Sts = 'E';

 //?The reading cannot be replaced with averages because all of the
 //?carcasses have not been processed.  (See Exit Program)
 //?Process Carcass
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Calculate Lean % FOM
 CASE;

 // IF LCL.#Sequence Block is NULL
 IF LCL.#Sequence_Block = *BLANK;

 //?LEAN % FOM
 // LCL.Calculate All Usr = CND.No
 LCL.Calculate_All_Usr = 'N';

 // Call program Clc Inch to MM/Lean%FOM.
 CALL PROGRAM(Clc Inch to MM/Lean%FOM) ('PKINMMLP');
 PARAMETER(*ZERO);
 PARAMETER(DB1.ET_Backfat_Thickness_Inch);
 PARAMETER(DB1.ET_Loin_Eye_Depth_Inches);
 PARAMETER(DB1.ET_Light_Reflectance);
 PARAMETER(LCL.ET_Backfat_Thickness_MM);
 PARAMETER(LCL.ET_Loineye_Depth_MM);
 PARAMETER(LCL.ET_Light_Reflectance_MM);
 PARAMETER(LCL.ET_Lean_Percent_FOM);
 PARAMETER(LCL.Calculate_All_Usr);

 ENDIF;

 //?COMPUTE LEAN % Morrison Hot Scale
 DO;

 //?Calculate Lean % per Pork Rules
 //?Backfat/loin are in inches
 //?2.827
 //?+ (0.469 * Carcass Weight)
 //?- (0.7271657 * Backfat MM)
 //?+ (0.3867718 * Loin Eye MM)
 //?-----------------------------
 //?/ Carcass Weight
 //?* 100
 // LCL.Lean % Fld 1 Usr = CON.1 * CON.2.827 *
 LCL.Lean_Fld_1_Usr = 1 * 2.827;

 // LCL.Lean % Fld 2 Usr = CON.1 * CON.0.469 *
 LCL.Lean_Fld_2_Usr = 1 * 0.469;

 // LCL.Lean % Fld 3 Usr = CON.0.7271657
 LCL.Lean_Fld_3_Usr = 0.7271657;

 // LCL.Lean % Fld 4 Usr = CON.0.3867718
 LCL.Lean_Fld_4_Usr = 0.3867718;

 CASE;

 // IF DB1.ET Hot Wgt NE WRK.Zero USR
 IF DB1.ET_Hot_Wgt <> WRK.Zero_USR;

 // LEAN % COMPUTE
 LCL.Lean_Fld_5_Usr = ( ( ( ( LCL.Lean_Fld_1_Usr + ( LCL.Lean_Fld_2_Usr * DB1.ET_Hot_Wgt )
 ) - ( LCL.Lean_Fld_3_Usr * DB1.ET_Backfat_Thickness_MM ) ) + ( LCL.Lean_Fld_4_Usr                 +
 * DB1.ET_Loineye_Depth_MM ) ) / DB1.ET_Hot_Wgt ) * 100;

 ENDIF;

 // LCL.ET Lean Percent NPPC = LCL.Lean % Fld 5 Usr * CON.1 *Rounded
 LCL.ET_Lean_Percent_NPPC = LCL.Lean_Fld_5_Usr * 1 'H';

 ENDDO;

 //?Validate Hot Weight
 CASE;

 // IF DB1.ET Hot Wgt LE PAR.Carcass Lgt Max
 IF DB1.ET_Hot_Wgt <= PAR.Carcass_Lgt_Max;

 //?Carcass Light Weight Error
 // LCL.KV Error Code = CON.CLT
 LCL.KV_Error_Code = 'CLT';

 // LCL.ET Error Sts = CND.Error
 LCL.ET_Error_Sts = 'E';

 EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
 PARAMETER(DB1.ET_Company_Number);
 PARAMETER(DB1.ET_Kill_Date);
 PARAMETER(DB1.ET_Tattoo_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.ET_Scale_Sequence_Number);
 PARAMETER('E');
 PARAMETER(LCL.KV_Error_Code);
 PARAMETER(*BLANK);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  CASE;

  // IF PAR.KV Error Description is Entered
  IF PAR.KV_Error_Description <> *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
  PARAMETER(PAR.KV_Error_Code);
  PARAMETER(DB1.KV_Error_Description);
  {
   //?USER: Process Data record

   // PAR.EV Description = DB1.EV Description
   PAR.EV_Description = DB1.EV_Description;

  }

  ENDIF;

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 //?Validate Hot Weight
 // IF DB1.ET Hot Wgt GE PAR.Carcass Dbw Min
 IF DB1.ET_Hot_Wgt >= PAR.Carcass_Dbw_Min;

 //?Carcass Double Weight Error
 // LCL.KV Error Code = CON.CDB
 LCL.KV_Error_Code = 'CDB';

 // LCL.ET Error Sts = CND.Error
 LCL.ET_Error_Sts = 'E';

 EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
 PARAMETER(DB1.ET_Company_Number);
 PARAMETER(DB1.ET_Kill_Date);
 PARAMETER(DB1.ET_Tattoo_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.ET_Scale_Sequence_Number);
 PARAMETER('E');
 PARAMETER(LCL.KV_Error_Code);
 PARAMETER(*BLANK);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  CASE;

  // IF PAR.KV Error Description is Entered
  IF PAR.KV_Error_Description <> *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
  PARAMETER(PAR.KV_Error_Code);
  PARAMETER(DB1.KV_Error_Description);
  {
   //?USER: Process Data record

   // PAR.EV Description = DB1.EV Description
   PAR.EV_Description = DB1.EV_Description;

  }

  ENDIF;

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDIF;

 //?Validate Backfat
 CASE;

 // IF DB1.ET Backfat Thickness Inch LE PAR.Backfat Low Max
 IF DB1.ET_Backfat_Thickness_Inch <= PAR.Backfat_Low_Max;

 //?backfat to low  Error
 // LCL.KV Error Code = CON.BLW
 LCL.KV_Error_Code = 'BLW';

 // LCL.ET Error Sts = CND.Error
 LCL.ET_Error_Sts = 'E';

 EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
 PARAMETER(DB1.ET_Company_Number);
 PARAMETER(DB1.ET_Kill_Date);
 PARAMETER(DB1.ET_Tattoo_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.ET_Scale_Sequence_Number);
 PARAMETER('E');
 PARAMETER(LCL.KV_Error_Code);
 PARAMETER(*BLANK);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  CASE;

  // IF PAR.KV Error Description is Entered
  IF PAR.KV_Error_Description <> *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
  PARAMETER(PAR.KV_Error_Code);
  PARAMETER(DB1.KV_Error_Description);
  {
   //?USER: Process Data record

   // PAR.EV Description = DB1.EV Description
   PAR.EV_Description = DB1.EV_Description;

  }

  ENDIF;

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 //?Validate Backfat
 // IF DB1.ET Backfat Thickness Inch GE PAR.BackFat High Min
 IF DB1.ET_Backfat_Thickness_Inch >= PAR.BackFat_High_Min;

 //?backfat high error
 // LCL.KV Error Code = CON.BHI
 LCL.KV_Error_Code = 'BHI';

 // LCL.ET Error Sts = CND.Error
 LCL.ET_Error_Sts = 'E';

 EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
 PARAMETER(DB1.ET_Company_Number);
 PARAMETER(DB1.ET_Kill_Date);
 PARAMETER(DB1.ET_Tattoo_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.ET_Scale_Sequence_Number);
 PARAMETER('E');
 PARAMETER(LCL.KV_Error_Code);
 PARAMETER(*BLANK);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  CASE;

  // IF PAR.KV Error Description is Entered
  IF PAR.KV_Error_Description <> *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
  PARAMETER(PAR.KV_Error_Code);
  PARAMETER(DB1.KV_Error_Description);
  {
   //?USER: Process Data record

   // PAR.EV Description = DB1.EV Description
   PAR.EV_Description = DB1.EV_Description;

  }

  ENDIF;

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDIF;

 //?Validate Loineye
 CASE;

 // IF DB1.ET Loin-Eye Depth Inches LE PAR.LoinEye Low Max
 IF DB1.ET_Loin_Eye_Depth_Inches <= PAR.LoinEye_Low_Max;

 //?Loin eye  Light Error
 // LCL.KV Error Code = CON.LLW
 LCL.KV_Error_Code = 'LLW';

 // LCL.ET Error Sts = CND.Error
 LCL.ET_Error_Sts = 'E';

 EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
 PARAMETER(DB1.ET_Company_Number);
 PARAMETER(DB1.ET_Kill_Date);
 PARAMETER(DB1.ET_Tattoo_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.ET_Scale_Sequence_Number);
 PARAMETER('E');
 PARAMETER(LCL.KV_Error_Code);
 PARAMETER(*BLANK);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  CASE;

  // IF PAR.KV Error Description is Entered
  IF PAR.KV_Error_Description <> *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
  PARAMETER(PAR.KV_Error_Code);
  PARAMETER(DB1.KV_Error_Description);
  {
   //?USER: Process Data record

   // PAR.EV Description = DB1.EV Description
   PAR.EV_Description = DB1.EV_Description;

  }

  ENDIF;

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 //?Validate Loineye
 // IF DB1.ET Loin-Eye Depth Inches GE PAR.LoinEye High Min
 IF DB1.ET_Loin_Eye_Depth_Inches >= PAR.LoinEye_High_Min;

 //?Loin eye  High Error
 // LCL.KV Error Code = CON.LHI
 LCL.KV_Error_Code = 'LHI';

 // LCL.ET Error Sts = CND.Error
 LCL.ET_Error_Sts = 'E';

 EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
 PARAMETER(DB1.ET_Company_Number);
 PARAMETER(DB1.ET_Kill_Date);
 PARAMETER(DB1.ET_Tattoo_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.ET_Scale_Sequence_Number);
 PARAMETER('E');
 PARAMETER(LCL.KV_Error_Code);
 PARAMETER(*BLANK);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  CASE;

  // IF PAR.KV Error Description is Entered
  IF PAR.KV_Error_Description <> *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
  PARAMETER(PAR.KV_Error_Code);
  PARAMETER(DB1.KV_Error_Description);
  {
   //?USER: Process Data record

   // PAR.EV Description = DB1.EV Description
   PAR.EV_Description = DB1.EV_Description;

  }

  ENDIF;

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDIF;

 //?Validate  % Lean
 CASE;

 // IF LCL.ET Lean Percent NPPC LE PAR.%Lean Low Max
 IF LCL.ET_Lean_Percent_NPPC <= PAR.Lean_Low_Max;

 //?% Lean low  Error
 // LCL.KV Error Code = CON.PLL
 LCL.KV_Error_Code = 'PLL';

 // LCL.ET Error Sts = CND.Error
 LCL.ET_Error_Sts = 'E';

 EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
 PARAMETER(DB1.ET_Company_Number);
 PARAMETER(DB1.ET_Kill_Date);
 PARAMETER(DB1.ET_Tattoo_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.ET_Scale_Sequence_Number);
 PARAMETER('E');
 PARAMETER(LCL.KV_Error_Code);
 PARAMETER(*BLANK);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  CASE;

  // IF PAR.KV Error Description is Entered
  IF PAR.KV_Error_Description <> *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
  PARAMETER(PAR.KV_Error_Code);
  PARAMETER(DB1.KV_Error_Description);
  {
   //?USER: Process Data record

   // PAR.EV Description = DB1.EV Description
   PAR.EV_Description = DB1.EV_Description;

  }

  ENDIF;

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 //?Validate  % Lean
 // IF LCL.ET Lean Percent NPPC GE PAR.%Lean High Min
 IF LCL.ET_Lean_Percent_NPPC >= PAR.Lean_High_Min;

 //?% Lean High Error
 // LCL.KV Error Code = CON.PLH
 LCL.KV_Error_Code = 'PLH';

 // LCL.ET Error Sts = CND.Error
 LCL.ET_Error_Sts = 'E';

 EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
 PARAMETER(DB1.ET_Company_Number);
 PARAMETER(DB1.ET_Kill_Date);
 PARAMETER(DB1.ET_Tattoo_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.ET_Scale_Sequence_Number);
 PARAMETER('E');
 PARAMETER(LCL.KV_Error_Code);
 PARAMETER(*BLANK);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  CASE;

  // IF PAR.KV Error Description is Entered
  IF PAR.KV_Error_Description <> *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
  PARAMETER(PAR.KV_Error_Code);
  PARAMETER(DB1.KV_Error_Description);
  {
   //?USER: Process Data record

   // PAR.EV Description = DB1.EV Description
   PAR.EV_Description = DB1.EV_Description;

  }

  ENDIF;

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDIF;

 //?Process Balanced or Error
 CASE;

 // IF LCL.ET Error Sts is Balance
 IF LCL.ET_Error_Sts = 'B';

 // PAR.TH Head Analyzed = PAR.TH Head Analyzed + CON.1
 PAR.TH_Head_Accepted = PAR.TH_Head_Accepted + 1;

 //?Accumulate Totals
 DO;

 //?Accumulate totals
 // PAR.TH Head Killed = CON.1 + PAR.TH Head Killed
 PAR.TH_Head_Killed = 1 + PAR.TH_Head_Killed;

 // PAR.TH Tot Loin Eye Depth = PAR.TH Tot Loin Eye Depth + DB1.ET Loin-Eye Depth Inches
 PAR.TH_Tot_Loin_Eye_Depth = PAR.TH_Tot_Loin_Eye_Depth + DB1.ET_Loin_Eye_Depth_Inches;

 // PAR.TH Tot Backfat Inches = PAR.TH Tot Backfat Inches + DB1.ET Backfat Thickness Inch
 PAR.TH_Tot_Backfat_Inches = PAR.TH_Tot_Backfat_Inches + DB1.ET_Backfat_Thickness_Inch;

 // PAR.TH Tot Light Reflectance = PAR.TH Tot Light Reflectance + DB1.ET Light Reflectance
 PAR.TH_Tot_Light_Reflectance = PAR.TH_Tot_Light_Reflectance + DB1.ET_Light_Reflectance;

 // PAR.TH Hot Wgt = PAR.TH Hot Wgt + DB1.ET Hot Wgt
 PAR.TH_Hot_Wgt = PAR.TH_Hot_Wgt + DB1.ET_Hot_Wgt;

 //?Weighted accumulated Lean%
 // LCL.Hot Wgt/Weight Ext Usr = LCL.ET Lean Percent NPPC * DB1.ET Hot Wgt *
 LCL.Hot_Wgt_Weight_Ext_Usr = LCL.ET_Lean_Percent_NPPC * DB1.ET_Hot_Wgt;

 // PAR.Hot Wgt/Lean % Accum Usr = LCL.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/Lean % Accum Usr
 PAR.Hot_Wgt_Lean_Accum_Usr = LCL.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_Lean_Accum_Usr;

 //?Weighted accumulated Backfat
 // LCL.Hot Wgt/Weight Ext Usr = DB1.ET Backfat Thickness Inch * DB1.ET Hot Wgt *
 LCL.Hot_Wgt_Weight_Ext_Usr = DB1.ET_Backfat_Thickness_Inch * DB1.ET_Hot_Wgt;

 // PAR.Hot Wgt/Backf Accum Usr = LCL.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/Backf Accum Usr
 PAR.Hot_Wgt_Backf_Accum_Usr = LCL.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_Backf_Accum_Usr;

 //?Weighted accumulated Loin Eye
 // LCL.Hot Wgt/Weight Ext Usr = DB1.ET Loin-Eye Depth Inches * DB1.ET Hot Wgt *
 LCL.Hot_Wgt_Weight_Ext_Usr = DB1.ET_Loin_Eye_Depth_Inches * DB1.ET_Hot_Wgt;

 // PAR.Hot Wgt/Loine Accum Usr = LCL.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/Loine Accum Usr
 PAR.Hot_Wgt_Loine_Accum_Usr = LCL.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_Loine_Accum_Usr;

 //?Weighted accumulated Light Refl
 // LCL.Hot Wgt/Weight Ext Usr = DB1.ET Light Reflectance * DB1.ET Hot Wgt *
 LCL.Hot_Wgt_Weight_Ext_Usr = DB1.ET_Light_Reflectance * DB1.ET_Hot_Wgt;

 // PAR.Hot Wgt/LghtR Accum Usr = LCL.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/LghtR Accum Usr
 PAR.Hot_Wgt_LghtR_Accum_Usr = LCL.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_LghtR_Accum_Usr;

 ENDDO;

 //?Process Balanced or Error
 // IF LCL.ET Error Sts is Error
 IF LCL.ET_Error_Sts = 'E';

 // LCL.RS Record Status = CND.Flag for Purge
 LCL.RS_Record_Status = 'D';

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Chg Eval Transac      CH) TYPE(CHGOBJ) FILE(PKBVCPP)           AB1102932;
 PARAMETER(DB1.ET_Company_Number);
 PARAMETER(DB1.ET_Kill_Date);
 PARAMETER(DB1.ET_Scale_Sequence_Number);
 PARAMETER(DB1.ET_Carcass_Number);
 PARAMETER(DB1.ET_Carcass_Number_Insert);
 PARAMETER(DB1.ET_Tattoo_Number);
 PARAMETER(DB1.ET_Lot);
 PARAMETER(DB1.ET_Shift);
 PARAMETER(DB1.ET_Hot_Wgt);
 PARAMETER(DB1.ET_Backfat_Thickness_Inch);
 PARAMETER(DB1.ET_Loin_Eye_Depth_Inches);
 PARAMETER(LCL.ET_Lean_Percent_NPPC);
 PARAMETER(LCL.ET_Backfat_Thickness_MM);
 PARAMETER(LCL.ET_Loineye_Depth_MM);
 PARAMETER(LCL.ET_Light_Reflectance_MM);
 PARAMETER(LCL.ET_Lean_Percent_FOM);
 PARAMETER(DB1.ET_Light_Reflectance);
 PARAMETER(DB1.ET_Trim_Area);
 PARAMETER(DB1.ET_Carcass_Sex);
 PARAMETER(LCL.ET_Error_Sts);
 PARAMETER(DB1.ET_Record_Add_Del_Sts);
 PARAMETER(DB1.ET_Record_Created_W_Avg);
 PARAMETER(DB1.ET_Record_Created_Status);
 PARAMETER(DB1.ET_User_Error_Override);
 PARAMETER(LCL.ET_Adjust_Add_Type);
 PARAMETER(DB1.ET_Broken_Back_Sts);
 PARAMETER(LCL.ET_Adjust_Add_Source);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(LCL.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 PARAMETER(DB1.RU_Date);
 PARAMETER(DB1.RU_Time);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

 //?USER: Exit processing

 //?05/27/04 SLM HPEBAL - Changes to the No Fat-O-Meater calculations
 //?                      add Producer to the parms
 EXECUTE FUNCTION(Bal Eval Trans wo/FOM RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1226472;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER('LN%');
 PARAMETER(PAR.TH_Head_Killed);
 PARAMETER(PAR.TH_Head_Adds);
 PARAMETER(PAR.TH_Head_Accepted);
 PARAMETER(PAR.TH_Hot_Wgt);
 PARAMETER(PAR.TH_Tot_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Tot_Backfat_Inches);
 PARAMETER(PAR.TH_Tot_Light_Reflectance);
 PARAMETER(PAR.TH_Header_Error_Sts);
 PARAMETER(PAR.TH_Detail_Error_Sts);
 PARAMETER(PAR.TH_Kill_Balancing_Sts);
 PARAMETER(PAR.TH_Head_Excluded);
 PARAMETER(PAR.TH_Head_Identified);
 PARAMETER(PAR.TH_Head_Adjusted_LN);
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.Hot_Wgt_Lean_Accum_Usr);
 PARAMETER(PAR.Hot_Wgt_Backf_Accum_Usr);
 PARAMETER(PAR.Hot_Wgt_Loine_Accum_Usr);
 PARAMETER(PAR.Hot_Wgt_LghtR_Accum_Usr);
 PARAMETER(PAR.Net_Head_Usr);
 PARAMETER(PAR.Carcass_Dbw_Min);
 PARAMETER(PAR.Carcass_Dbw_Max);
 PARAMETER(PAR.Carcass_Lgt_Min);
 PARAMETER(PAR.Carcass_Lgt_Max);
 PARAMETER(PAR.Lean_High_Min);
 PARAMETER(PAR.Lean_High_Max);
 PARAMETER(PAR.Lean_Low_Min);
 PARAMETER(PAR.Lean_Low_Max);
 PARAMETER(PAR.High_Yield_Min);
 PARAMETER(PAR.High_Yield_Max);
 PARAMETER(PAR.Low_Yield_Min);
 PARAMETER(PAR.Low_Yield_Max);
 PARAMETER(PAR.Head_Percent_Min);
 PARAMETER(PAR.Head_Percent_Max);
 PARAMETER(PAR.Head_Percent_Min);
 PARAMETER(PAR.Head_Percent_Max);
 PARAMETER(PAR.BackFat_High_Min);
 PARAMETER(PAR.BackFat_High_Max);
 PARAMETER(PAR.BackFat_Low_Min);
 PARAMETER(PAR.Backfat_Low_Max);
 PARAMETER(PAR.LoinEye_High_Min);
 PARAMETER(PAR.LoinEye_High_Max);
 PARAMETER(PAR.LoinEye_Low_Min);
 PARAMETER(PAR.LoinEye_Low_Max);
 {
  //?USER: Initialize routine

  //?05/27/04 SLM HPEBAL - Changes to the No Fat-O-Meater calculations
  //?                      Add the New Sts ET adjust/add source
  //?                      ET adjust/add source = blanks is the initial value
  //?                      ET adjust/add source = L is Lots Avg
  //?                      ET adjust/add source = H is History Avg
  //?Flag - To allow us to know if this process went through
  //?       the change processing
  // LCL.Process Flag User = CND.No
  LCL.Process_Flag_User = 'N';

  //?Average Backfat, Loin Eye, Light Ref, & Lean % of Balanced Carcasses.
  CASE;

  // IF PAR.TH Hot Wgt NE LCL.Zero USR
  IF PAR.TH_Hot_Wgt <> LCL.Zero_USR;

  //?Weighted average
  //?05/27/04 SLM HPEBAL   ET adjust/add source = L is Lots Avg
  // LCL.ET Adjust/Add Source = CND.LOT - Lot Average
  LCL.ET_Adjust_Add_Source = 'L';

  //?02/06/02 PKD Change all of the calculations with *Rounded.
  // LCL.TH Avg Lean Percent = PAR.Hot Wgt/Lean % Accum Usr / PAR.TH Hot Wgt *Rounded
  LCL.TH_Avg_Lean_Percent = PAR.Hot_Wgt_Lean_Accum_Usr / PAR.TH_Hot_Wgt 'H';

  // LCL.TH Avg Backfat = PAR.Hot Wgt/Backf Accum Usr / PAR.TH Hot Wgt *Rounded
  LCL.TH_Avg_Backfat = PAR.Hot_Wgt_Backf_Accum_Usr / PAR.TH_Hot_Wgt 'H';

  // LCL.TH Avg Loin Eye Depth = PAR.Hot Wgt/Loine Accum Usr / PAR.TH Hot Wgt *Rounded
  LCL.TH_Avg_Loin_Eye_Depth = PAR.Hot_Wgt_Loine_Accum_Usr / PAR.TH_Hot_Wgt 'H';

  // LCL.TH Avg Light Reflectance = PAR.Hot Wgt/LghtR Accum Usr / PAR.TH Hot Wgt *Rounded
  LCL.TH_Avg_Light_Reflectance = PAR.Hot_Wgt_LghtR_Accum_Usr / PAR.TH_Hot_Wgt 'H';

  //?Average Backfat, Loin Eye, Light Ref, & Lean % of Balanced Carcasses.
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?05/27/04 SLM HPEBAL   ET adjust/add source = *NONE set to blank
  // LCL.ET Adjust/Add Source = CND.*NONE
  LCL.ET_Adjust_Add_Source = *BLANK;

  // LCL.TH Avg Lean Percent = CON.*ZERO
  LCL.TH_Avg_Lean_Percent = *ZERO;

  // LCL.TH Avg Backfat = CON.*ZERO
  LCL.TH_Avg_Backfat = *ZERO;

  // LCL.TH Avg Loin Eye Depth = CON.*ZERO
  LCL.TH_Avg_Loin_Eye_Depth = *ZERO;

  // LCL.TH Avg Light Reflectance = CON.*ZERO
  LCL.TH_Avg_Light_Reflectance = *ZERO;

  //?05/27/04 SLM HPEBAL - RTV Producer History, if found then used
  //?                      the Producer History, else the LCL
  //?                      fields have been init.
  EXECUTE FUNCTION(Rtv GA Prod Hist Avgs RT) TYPE(RTVOBJ) FILE(PKCGCPP)           AB1226508;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(LCL.PH_Summary_Type);
  PARAMETER(LCL.PH_GA_Avg_Live_Wgt);
  PARAMETER(LCL.PH_GA_Adjusted_Yield);
  PARAMETER(LCL.PH_GA_Avg_Lean);
  PARAMETER(LCL.PH_GA_Avg_Backfat);
  PARAMETER(LCL.PH_GA_Avg_Loin_Eye);
  PARAMETER(LCL.PH_GA_Avg_Light_Ref);
  PARAMETER(LCL.PH_GA_Lean_Prm_Carc_CWT);
  PARAMETER(LCL.PH_GA_Avg_Srt_Disc_Fctr);
  PARAMETER(LCL.History_Avail_STS_USR);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   // PAR.History Avail STS USR = CND.No
   PAR.History_Avail_STS_USR = 'N';

   // LCL.First Time Flag Usr = CND.Yes
   LCL.First_Time_Flag_Usr = 'Y';

   //?USER: Process Data record

   //?First Time Processing
   CASE;

   // IF LCL.First Time Flag Usr is Yes
   IF LCL.First_Time_Flag_Usr = 'Y';

   // LCL.PH Week Ending Date = DB1.PH Week Ending Date
   LCL.PH_Week_Ending_Date = DB1.PH_Week_Ending_Date;

   // LCL.First Time Flag Usr = CND.No
   LCL.First_Time_Flag_Usr = 'N';

   ENDIF;

   CASE;

   // IF DB1.PH Week Ending Date NE LCL.PH Week Ending Date
   IF DB1.PH_Week_Ending_Date <> LCL.PH_Week_Ending_Date;

   QUIT;

   ENDIF;

   CASE;

   // IF DB1.PH Summary Type is 2 Week
   IF DB1.PH_Summary_Type = '2WK';

   CASE;

   // IF DB1.PH GA Head Killed is GE 600
   IF DB1.PH_GA_Head_Killed >= 600;

   MOVE *ALL (To: PAR From: DB1);

   // PAR.History Avail STS USR = CND.Yes
   PAR.History_Avail_STS_USR = 'Y';

   QUIT;

   ENDIF;

   // IF DB1.PH Summary Type is 4 Week
   IF DB1.PH_Summary_Type = '4WK';

   CASE;

   // IF DB1.PH GA Head Killed is GT Zero
   IF DB1.PH_GA_Head_Killed > *ZERO;

   MOVE *ALL (To: PAR From: DB1);

   // PAR.History Avail STS USR = CND.Yes
   PAR.History_Avail_STS_USR = 'Y';

   QUIT;

   ENDIF;

   ENDIF;

  }

  CASE;

  // IF LCL.History Avail STS USR is Yes
  IF LCL.History_Avail_STS_USR = 'Y';

  //?05/27/04 SLM HPEBAL - History Avail STS USR = Yes Hst was sel.
  //?                      ET adjust/add source = H is History Avg
  // LCL.ET Adjust/Add Source = CND.HST - History Average
  LCL.ET_Adjust_Add_Source = 'H';

  // LCL.TH Avg Lean Percent = LCL.PH GA Avg Lean%
  LCL.TH_Avg_Lean_Percent = LCL.PH_GA_Avg_Lean;

  // LCL.TH Avg Backfat = LCL.PH GA Avg Backfat
  LCL.TH_Avg_Backfat = LCL.PH_GA_Avg_Backfat;

  // LCL.TH Avg Loin Eye Depth = LCL.PH GA Avg Loin Eye
  LCL.TH_Avg_Loin_Eye_Depth = LCL.PH_GA_Avg_Loin_Eye;

  // LCL.TH Avg Light Reflectance = LCL.PH GA Avg Light Ref
  LCL.TH_Avg_Light_Reflectance = LCL.PH_GA_Avg_Light_Ref;

  ENDIF;

  ENDIF;

  // LCL.Calculate All Usr = CND.Yes
  LCL.Calculate_All_Usr = 'Y';

  // Call program Clc Inch to MM/Lean%FOM.
  CALL PROGRAM(Clc Inch to MM/Lean%FOM) ('PKINMMLP');
  PARAMETER(WRK.Zero_USR);
  PARAMETER(LCL.TH_Avg_Backfat);
  PARAMETER(LCL.TH_Avg_Loin_Eye_Depth);
  PARAMETER(WRK.Zero_USR);
  PARAMETER(LCL.ET_Backfat_Thickness_MM);
  PARAMETER(LCL.ET_Loineye_Depth_MM);
  PARAMETER(WRK.Zero_USR);
  PARAMETER(WRK.Zero_USR);
  PARAMETER(LCL.Calculate_All_Usr);

  //?USER: Process Data record

  // LCL.ET Backfat Thickness Inch = LCL.TH Avg Backfat
  LCL.ET_Backfat_Thickness_Inch = LCL.TH_Avg_Backfat;

  // LCL.ET Loin-Eye Depth Inches = LCL.TH Avg Loin Eye Depth
  LCL.ET_Loin_Eye_Depth_Inches = LCL.TH_Avg_Loin_Eye_Depth;

  // LCL.ET Light Reflectance = LCL.TH Avg Light Reflectance
  LCL.ET_Light_Reflectance = LCL.TH_Avg_Light_Reflectance;

  // LCL.ET Lean Percent NPPC = LCL.TH Avg Lean Percent
  LCL.ET_Lean_Percent_NPPC = LCL.TH_Avg_Lean_Percent;

  // LCL.ET Error Sts = CND.Balance
  LCL.ET_Error_Sts = 'B';

  // LCL.RS Record Status = DB1.RS Record Status
  LCL.RS_Record_Status = DB1.RS_Record_Status;

  //?Validate Hot Weight
  CASE;

  // IF DB1.ET Hot Wgt LE PAR.Carcass Lgt Max
  IF DB1.ET_Hot_Wgt <= PAR.Carcass_Lgt_Max;

  //?Carcass Light Weight Error
  // LCL.KV Error Code = CON.CLT
  LCL.KV_Error_Code = 'CLT';

  // LCL.ET Error Sts = CND.Error
  LCL.ET_Error_Sts = 'E';

  EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
  PARAMETER(DB1.ET_Company_Number);
  PARAMETER(DB1.ET_Kill_Date);
  PARAMETER(DB1.ET_Tattoo_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.ET_Scale_Sequence_Number);
  PARAMETER('E');
  PARAMETER(LCL.KV_Error_Code);
  PARAMETER(*BLANK);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   CASE;

   // IF PAR.KV Error Description is Entered
   IF PAR.KV_Error_Description <> *BLANK;

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
   PARAMETER(PAR.KV_Error_Code);
   PARAMETER(DB1.KV_Error_Description);
   {
    //?USER: Process Data record

    // PAR.EV Description = DB1.EV Description
    PAR.EV_Description = DB1.EV_Description;

   }

   ENDIF;

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(*MISSING);
   PARAMETER(*MISSING);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?Validate Hot Weight
  // IF DB1.ET Hot Wgt GE PAR.Carcass Dbw Min
  IF DB1.ET_Hot_Wgt >= PAR.Carcass_Dbw_Min;

  //?Carcass Double Weight Error
  // LCL.KV Error Code = CON.CDB
  LCL.KV_Error_Code = 'CDB';

  // LCL.ET Error Sts = CND.Error
  LCL.ET_Error_Sts = 'E';

  EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
  PARAMETER(DB1.ET_Company_Number);
  PARAMETER(DB1.ET_Kill_Date);
  PARAMETER(DB1.ET_Tattoo_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.ET_Scale_Sequence_Number);
  PARAMETER('E');
  PARAMETER(LCL.KV_Error_Code);
  PARAMETER(*BLANK);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   CASE;

   // IF PAR.KV Error Description is Entered
   IF PAR.KV_Error_Description <> *BLANK;

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
   PARAMETER(PAR.KV_Error_Code);
   PARAMETER(DB1.KV_Error_Description);
   {
    //?USER: Process Data record

    // PAR.EV Description = DB1.EV Description
    PAR.EV_Description = DB1.EV_Description;

   }

   ENDIF;

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(*MISSING);
   PARAMETER(*MISSING);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDIF;

  //?Validate  % Lean
  CASE;

  // IF LCL.ET Lean Percent NPPC LE PAR.%Lean Low Max
  IF LCL.ET_Lean_Percent_NPPC <= PAR.Lean_Low_Max;

  //?% Lean low  Error
  // LCL.KV Error Code = CON.PLL
  LCL.KV_Error_Code = 'PLL';

  // LCL.ET Error Sts = CND.Error
  LCL.ET_Error_Sts = 'E';

  EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
  PARAMETER(DB1.ET_Company_Number);
  PARAMETER(DB1.ET_Kill_Date);
  PARAMETER(DB1.ET_Tattoo_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.ET_Scale_Sequence_Number);
  PARAMETER('E');
  PARAMETER(LCL.KV_Error_Code);
  PARAMETER(*BLANK);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   CASE;

   // IF PAR.KV Error Description is Entered
   IF PAR.KV_Error_Description <> *BLANK;

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
   PARAMETER(PAR.KV_Error_Code);
   PARAMETER(DB1.KV_Error_Description);
   {
    //?USER: Process Data record

    // PAR.EV Description = DB1.EV Description
    PAR.EV_Description = DB1.EV_Description;

   }

   ENDIF;

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(*MISSING);
   PARAMETER(*MISSING);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?Validate  % Lean
  // IF LCL.ET Lean Percent NPPC GE PAR.%Lean High Min
  IF LCL.ET_Lean_Percent_NPPC >= PAR.Lean_High_Min;

  //?% Lean High Error
  // LCL.KV Error Code = CON.PLH
  LCL.KV_Error_Code = 'PLH';

  // LCL.ET Error Sts = CND.Error
  LCL.ET_Error_Sts = 'E';

  EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
  PARAMETER(DB1.ET_Company_Number);
  PARAMETER(DB1.ET_Kill_Date);
  PARAMETER(DB1.ET_Tattoo_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.ET_Scale_Sequence_Number);
  PARAMETER('E');
  PARAMETER(LCL.KV_Error_Code);
  PARAMETER(*BLANK);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   CASE;

   // IF PAR.KV Error Description is Entered
   IF PAR.KV_Error_Description <> *BLANK;

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
   PARAMETER(PAR.KV_Error_Code);
   PARAMETER(DB1.KV_Error_Description);
   {
    //?USER: Process Data record

    // PAR.EV Description = DB1.EV Description
    PAR.EV_Description = DB1.EV_Description;

   }

   ENDIF;

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(*MISSING);
   PARAMETER(*MISSING);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDIF;

  //?Process Balanced or Error
  CASE;

  // IF LCL.ET Error Sts is Balance
  IF LCL.ET_Error_Sts = 'B';

  // PAR.TH Head Accepted = PAR.TH Head Accepted + CON.1
  PAR.TH_Head_Accepted = PAR.TH_Head_Accepted + 1;

  // PAR.TH Head Adjusted-LN% = PAR.TH Head Adjusted-LN% + CON.1
  PAR.TH_Head_Adjusted_LN = PAR.TH_Head_Adjusted_LN + 1;

  //?Accumulate Totals
  DO;

  //?Accumulate totals
  // PAR.TH Head Killed = CON.1 + PAR.TH Head Killed
  PAR.TH_Head_Killed = 1 + PAR.TH_Head_Killed;

  // PAR.TH Tot Loin Eye Depth = PAR.TH Tot Loin Eye Depth + LCL.ET Loin-Eye Depth Inches
  PAR.TH_Tot_Loin_Eye_Depth = PAR.TH_Tot_Loin_Eye_Depth + LCL.ET_Loin_Eye_Depth_Inches;

  // PAR.TH Tot Backfat Inches = PAR.TH Tot Backfat Inches + LCL.ET Backfat Thickness Inch
  PAR.TH_Tot_Backfat_Inches = PAR.TH_Tot_Backfat_Inches + LCL.ET_Backfat_Thickness_Inch;

  // PAR.TH Tot Light Reflectance = PAR.TH Tot Light Reflectance + LCL.ET Light Reflectance
  PAR.TH_Tot_Light_Reflectance = PAR.TH_Tot_Light_Reflectance + LCL.ET_Light_Reflectance;

  // PAR.TH Hot Wgt = PAR.TH Hot Wgt + DB1.ET Hot Wgt
  PAR.TH_Hot_Wgt = PAR.TH_Hot_Wgt + DB1.ET_Hot_Wgt;

  //?Weighted accumulated Lean%
  // LCL.Hot Wgt/Weight Ext Usr = LCL.ET Lean Percent NPPC * DB1.ET Hot Wgt *
  LCL.Hot_Wgt_Weight_Ext_Usr = LCL.ET_Lean_Percent_NPPC * DB1.ET_Hot_Wgt;

  // PAR.Hot Wgt/Lean % Accum Usr = LCL.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/Lean % Accum Usr
  PAR.Hot_Wgt_Lean_Accum_Usr = LCL.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_Lean_Accum_Usr;

  //?Weighted accumulated Backfat
  // LCL.Hot Wgt/Weight Ext Usr = LCL.ET Backfat Thickness Inch * DB1.ET Hot Wgt *
  LCL.Hot_Wgt_Weight_Ext_Usr = LCL.ET_Backfat_Thickness_Inch * DB1.ET_Hot_Wgt;

  // PAR.Hot Wgt/Backf Accum Usr = LCL.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/Backf Accum Usr
  PAR.Hot_Wgt_Backf_Accum_Usr = LCL.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_Backf_Accum_Usr;

  //?Weighted accumulated Loin Eye
  // LCL.Hot Wgt/Weight Ext Usr = LCL.ET Loin-Eye Depth Inches * DB1.ET Hot Wgt *
  LCL.Hot_Wgt_Weight_Ext_Usr = LCL.ET_Loin_Eye_Depth_Inches * DB1.ET_Hot_Wgt;

  // PAR.Hot Wgt/Loine Accum Usr = LCL.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/Loine Accum Usr
  PAR.Hot_Wgt_Loine_Accum_Usr = LCL.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_Loine_Accum_Usr;

  //?Weighted accumulated Light Refl
  // LCL.Hot Wgt/Weight Ext Usr = LCL.ET Light Reflectance * DB1.ET Hot Wgt *
  LCL.Hot_Wgt_Weight_Ext_Usr = LCL.ET_Light_Reflectance * DB1.ET_Hot_Wgt;

  // PAR.Hot Wgt/LghtR Accum Usr = LCL.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/LghtR Accum Usr
  PAR.Hot_Wgt_LghtR_Accum_Usr = LCL.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_LghtR_Accum_Usr;

  ENDDO;

  EXECUTE FUNCTION(Dlt Tto Eval Rec Err  RT) TYPE(RTVOBJ) FILE(PKB6CPP)           AB1144453;
  PARAMETER(DB1.ET_Company_Number);
  PARAMETER(DB1.ET_Kill_Date);
  PARAMETER(DB1.ET_Tattoo_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.ET_Scale_Sequence_Number);
  PARAMETER('E');
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Delete Kill Validation) TYPE(DLTOBJ) FILE(PKB6CPP)             AB1104583;
   PARAMETER(DB1.KV_Company_Number);
   PARAMETER(DB1.KV_Kill_Date);
   PARAMETER(DB1.KV_TATTOO_NUMBER);
   PARAMETER(DB1.KV_Buy_Order_Number);
   PARAMETER(DB1.KV_Load_Number);
   PARAMETER(DB1.KV_Record_Number);
   PARAMETER(DB1.KV_Record_Type);
   PARAMETER(DB1.KV_Error_Code);
  }

  // LCL.Process Flag User = CND.Yes
  LCL.Process_Flag_User = 'Y';

  //?Process Balanced or Error
  // IF LCL.ET Error Sts is Error
  IF LCL.ET_Error_Sts = 'E';

  // LCL.RS Record Status = CND.Flag for Purge
  LCL.RS_Record_Status = 'D';

  ENDIF;

  EXECUTE FUNCTION(Chg Eval Transac      CH) TYPE(CHGOBJ) FILE(PKBVCPP)           AB1102932;
  PARAMETER(DB1.ET_Company_Number);
  PARAMETER(DB1.ET_Kill_Date);
  PARAMETER(DB1.ET_Scale_Sequence_Number);
  PARAMETER(DB1.ET_Carcass_Number);
  PARAMETER(DB1.ET_Carcass_Number_Insert);
  PARAMETER(DB1.ET_Tattoo_Number);
  PARAMETER(DB1.ET_Lot);
  PARAMETER(DB1.ET_Shift);
  PARAMETER(DB1.ET_Hot_Wgt);
  PARAMETER(LCL.ET_Backfat_Thickness_Inch);
  PARAMETER(LCL.ET_Loin_Eye_Depth_Inches);
  PARAMETER(LCL.ET_Lean_Percent_NPPC);
  PARAMETER(LCL.ET_Backfat_Thickness_MM);
  PARAMETER(LCL.ET_Loineye_Depth_MM);
  PARAMETER(LCL.ET_Light_Reflectance);
  PARAMETER(DB1.ET_Lean_Percent_FOM);
  PARAMETER(LCL.ET_Light_Reflectance);
  PARAMETER(DB1.ET_Trim_Area);
  PARAMETER(DB1.ET_Carcass_Sex);
  PARAMETER(LCL.ET_Error_Sts);
  PARAMETER(DB1.ET_Record_Add_Del_Sts);
  PARAMETER(DB1.ET_Record_Created_W_Avg);
  PARAMETER(DB1.ET_Record_Created_Status);
  PARAMETER(DB1.ET_User_Error_Override);
  PARAMETER(DB1.ET_Adjust_Add_Type);
  PARAMETER(DB1.ET_Broken_Back_Sts);
  PARAMETER(LCL.ET_Adjust_Add_Source);
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(LCL.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  PARAMETER(DB1.RU_Date);
  PARAMETER(DB1.RU_Time);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  //?USER: Exit processing

  CASE;

  // IF LCL.Process Flag User is Yes
  IF LCL.Process_Flag_User = 'Y';

  //?05/27/04 SLM HPEBAL - Changes to the No Fat-O-Meater calculations
  //?                      Write a message to the Tattoo Hdr Comments
  //?                      If Lots Avg, or Producer Hst was used.
  //?                      ** All new
  CASE;

  // IF LCL.ET Adjust/Add Source is LOT - Lot Average
  IF LCL.ET_Adjust_Add_Source = 'L';

  // Retrieve message - 'LN%: Used Lot Averages'
  LCL.THC_Comment = RTVMSG(PRK1112);

  EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(LCL.THC_Comment_Line);
  PARAMETER(LCL.THC_Comment);
  PARAMETER('P');
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.BOH_Buy_Order_Number);
   PARAMETER(PAR.BOL_Load_Number);
   PARAMETER(PAR.TH_Tattoo_Number);
   PARAMETER(PAR.TH_Kill_Date);
   PARAMETER(PAR.THC_Comment_Line);
   {
    //?USER: Processing if Data record not found

    // PAR.THC Comment Line = CON.1
    PAR.THC_Comment_Line = 1;

    //?USER: Process Data record

    // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
    PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

    QUIT;

   }

   EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.BOH_Buy_Order_Number);
   PARAMETER(PAR.BOL_Load_Number);
   PARAMETER(PAR.TH_Tattoo_Number);
   PARAMETER(PAR.TH_Kill_Date);
   PARAMETER(PAR.THC_Comment_Line);
   PARAMETER(PAR.THC_Comment);
   PARAMETER(PAR.THC_Comment_Type);
   PARAMETER(PAR.RS_User_Changed);
   PARAMETER(PAR.RS_Date_Changed);
   PARAMETER(PAR.RS_Time_Changed);
   PARAMETER(PAR.RS_Record_Status);
   PARAMETER(PAR.RS_Job);
   PARAMETER(PAR.RS_Program);
   PARAMETER(PAR.RS_User_Added);
   PARAMETER(PAR.RS_Date_Added);
   PARAMETER(PAR.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?Execute internal function

     // PAR.RS Record Status = CND.Active
     PAR.RS_Record_Status = 'A';

     // PAR.RS User Added = JOB.*USER
     PAR.RS_User_Added = JOB.*USER;

     // PAR.RS Date Added = JOB.*Job date
     PAR.RS_Date_Added = JOB.*Job_date;

     // PAR.RS Time Added = JOB.*Job time
     PAR.RS_Time_Added = JOB.*Job_time;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

    }

   }

  }

  // IF LCL.ET Adjust/Add Source is HST - History Average
  IF LCL.ET_Adjust_Add_Source = 'H';

  // Retrieve message - 'LN%: Used Producer's &1 historical averages'
  LCL.THC_Comment = RTVMSG(PRK1113);
  PARAMETER(LCL.PH_Summary_Type);

  EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(LCL.THC_Comment_Line);
  PARAMETER(LCL.THC_Comment);
  PARAMETER('P');
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.BOH_Buy_Order_Number);
   PARAMETER(PAR.BOL_Load_Number);
   PARAMETER(PAR.TH_Tattoo_Number);
   PARAMETER(PAR.TH_Kill_Date);
   PARAMETER(PAR.THC_Comment_Line);
   {
    //?USER: Processing if Data record not found

    // PAR.THC Comment Line = CON.1
    PAR.THC_Comment_Line = 1;

    //?USER: Process Data record

    // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
    PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

    QUIT;

   }

   EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.BOH_Buy_Order_Number);
   PARAMETER(PAR.BOL_Load_Number);
   PARAMETER(PAR.TH_Tattoo_Number);
   PARAMETER(PAR.TH_Kill_Date);
   PARAMETER(PAR.THC_Comment_Line);
   PARAMETER(PAR.THC_Comment);
   PARAMETER(PAR.THC_Comment_Type);
   PARAMETER(PAR.RS_User_Changed);
   PARAMETER(PAR.RS_Date_Changed);
   PARAMETER(PAR.RS_Time_Changed);
   PARAMETER(PAR.RS_Record_Status);
   PARAMETER(PAR.RS_Job);
   PARAMETER(PAR.RS_Program);
   PARAMETER(PAR.RS_User_Added);
   PARAMETER(PAR.RS_Date_Added);
   PARAMETER(PAR.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?Execute internal function

     // PAR.RS Record Status = CND.Active
     PAR.RS_Record_Status = 'A';

     // PAR.RS User Added = JOB.*USER
     PAR.RS_User_Added = JOB.*USER;

     // PAR.RS Date Added = JOB.*Job date
     PAR.RS_Date_Added = JOB.*Job_date;

     // PAR.RS Time Added = JOB.*Job time
     PAR.RS_Time_Added = JOB.*Job_time;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

    }

   }

  }

  ENDIF;

  ENDIF;

 }

}


ENDIF;

//?Calculate Percent Identified & Percent Accepted
CASE;

// IF LCL.Net Head Usr is Not Zero
IF LCL.Net_Head_Usr <> *ZERO;

// Percent Identified
LCL.TH_Percent_Identified = ( LCL.TH_Head_Identified / LCL.Net_Head_Usr 'H' ) * 100 'H';

// Percent Analyzed
LCL.TH_Percent_Accepted = ( LCL.TH_Head_Accepted / LCL.Net_Head_Usr 'H' ) * 100 'H';

ENDIF;

//?Calculate Tattoo Header Averages/yield
DO;

//?Calculate Adj Live Weight
CASE;

// IF PAR.TH Head Received EQ LCL.Net Head Usr
IF PAR.TH_Head_Received = LCL.Net_Head_Usr;

// LCL.TH Adj Live Wgt = PAR.TH Live Wgt
LCL.TH_Adj_Live_Wgt = PAR.TH_Live_Wgt;

//?Calculate Adj Live Weight
// IF LCL.Net Head Usr EQ LCL.Zero USR
IF LCL.Net_Head_Usr = LCL.Zero_USR;

// LCL.TH Adj Live Wgt = CON.*ZERO
LCL.TH_Adj_Live_Wgt = *ZERO;

//?Calculate Adj Live Weight
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.*Synon (15,2) work field = LCL.Net Head Adjusted Usr * PAR.TH Avg Live Wgt *Rounded
LCL.*Synon_152_work_field = LCL.Net_Head_Adjusted_Usr * PAR.TH_Avg_Live_Wgt 'H';

// LCL.TH Adj Live Wgt = PAR.TH Live Wgt - LCL.*Synon (15,2) work field
LCL.TH_Adj_Live_Wgt = PAR.TH_Live_Wgt - LCL.*Synon_152_work_field;

ENDIF;

//?Calculate Adj Actual Yield
DO;

CASE;

// IF LCL.TH Adj Live Wgt NE LCL.Zero USR
IF LCL.TH_Adj_Live_Wgt <> LCL.Zero_USR;

//?actual yield percent: hot w / live wgt * 100
// Adj Actual Yield
LCL.TH_Adj_Actual_Yield = ( LCL.TH_Hot_Wgt / LCL.TH_Adj_Live_Wgt 'H' ) * 100 'H';

ENDIF;

ENDDO;

//?Calculate Hot Weight
CASE;

// IF LCL.TH Head Killed NE LCL.Zero USR
IF LCL.TH_Head_Killed <> LCL.Zero_USR;

//?Accumulated totals div by head killed
// LCL.TH Avg Hot Wgt = LCL.TH Hot Wgt / LCL.TH Head Killed *Rounded
LCL.TH_Avg_Hot_Wgt = LCL.TH_Hot_Wgt / LCL.TH_Head_Killed 'H';

// LCL.TH Avg Hot Wgt f/EXC = LCL.TH Avg Hot Wgt
LCL.TH_Avg_Hot_Wgt_EXC_ADD = LCL.TH_Avg_Hot_Wgt;

//?Calculate Hot Weight
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.TH Avg Hot Wgt = CON.*ZERO
LCL.TH_Avg_Hot_Wgt = *ZERO;

// LCL.TH Avg Hot Wgt f/EXC = CON.*ZERO
LCL.TH_Avg_Hot_Wgt_EXC_ADD = *ZERO;

ENDIF;

//?Weighted Averages
CASE;

// IF LCL.TH Hot Wgt NE LCL.Zero USR
IF LCL.TH_Hot_Wgt <> LCL.Zero_USR;

//?Weighted average
// LCL.TH Avg Lean Percent = LCL.Hot Wgt/Lean % Accum Usr / LCL.TH Hot Wgt *Rounded
LCL.TH_Avg_Lean_Percent = LCL.Hot_Wgt_Lean_Accum_Usr / LCL.TH_Hot_Wgt 'H';

// LCL.TH Avg Backfat = LCL.Hot Wgt/Backf Accum Usr / LCL.TH Hot Wgt *Rounded
LCL.TH_Avg_Backfat = LCL.Hot_Wgt_Backf_Accum_Usr / LCL.TH_Hot_Wgt 'H';

// LCL.TH Avg Loin Eye Depth = LCL.Hot Wgt/Loine Accum Usr / LCL.TH Hot Wgt *Rounded
LCL.TH_Avg_Loin_Eye_Depth = LCL.Hot_Wgt_Loine_Accum_Usr / LCL.TH_Hot_Wgt 'H';

// LCL.TH Avg Light Reflectance = LCL.Hot Wgt/LghtR Accum Usr / LCL.TH Hot Wgt *Rounded
LCL.TH_Avg_Light_Reflectance = LCL.Hot_Wgt_LghtR_Accum_Usr / LCL.TH_Hot_Wgt 'H';

// LCL.TH Avg Lean % EXC/ADD = LCL.TH Avg Lean Percent
LCL.TH_Avg_Lean_EXC_ADD = LCL.TH_Avg_Lean_Percent;

//?Weighted Averages
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.TH Avg Lean Percent = CON.*ZERO
LCL.TH_Avg_Lean_Percent = *ZERO;

// LCL.TH Avg Backfat = CON.*ZERO
LCL.TH_Avg_Backfat = *ZERO;

// LCL.TH Avg Loin Eye Depth = CON.*ZERO
LCL.TH_Avg_Loin_Eye_Depth = *ZERO;

// LCL.TH Avg Light Reflectance = CON.*ZERO
LCL.TH_Avg_Light_Reflectance = *ZERO;

// LCL.TH Avg Lean % f/EXC = CON.*ZERO
LCL.TH_Avg_Lean_EXC_ADD = *ZERO;

ENDIF;

//?Actual Yield Percent
CASE;

// IF PAR.TH Live Wgt NE LCL.Zero USR
IF PAR.TH_Live_Wgt <> LCL.Zero_USR;

//?actual yield percent: hot w / live wgt * 100
// TH Actual Yield Percent
LCL.TH_Actual_Yield = ( LCL.TH_Hot_Wgt / PAR.TH_Live_Wgt 'H' ) * 100 'H';

//?Actual Yield Percent
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.TH Actual Yield % = CON.*ZERO
LCL.TH_Actual_Yield = *ZERO;

ENDIF;

ENDDO;

EXECUTE FUNCTION(Upd Val Kill Trans    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1240659;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.TH_Recalc_Live_Wgt_Yld);
PARAMETER(LCL.TH_Head_Condemned);
PARAMETER(LCL.TH_Head_Killed);
PARAMETER(LCL.TH_Head_Adds);
PARAMETER(LCL.TH_Head_Accepted);
PARAMETER(LCL.TH_Adj_Live_Wgt);
PARAMETER(LCL.TH_Hot_Wgt);
PARAMETER(LCL.TH_Tot_Loin_Eye_Depth);
PARAMETER(LCL.TH_Tot_Backfat_Inches);
PARAMETER(LCL.TH_Tot_Light_Reflectance);
PARAMETER(LCL.TH_Avg_Hot_Wgt);
PARAMETER(LCL.TH_Avg_Light_Reflectance);
PARAMETER(LCL.TH_Avg_Lean_Percent);
PARAMETER(LCL.TH_Avg_Loin_Eye_Depth);
PARAMETER(LCL.TH_Avg_Backfat);
PARAMETER(LCL.TH_Actual_Yield);
PARAMETER(LCL.TH_Adj_Actual_Yield);
PARAMETER(LCL.TH_Fixed_Cost_Amount);
PARAMETER(LCL.TH_Header_Error_Sts);
PARAMETER(LCL.TH_Detail_Error_Sts);
PARAMETER(LCL.TH_Kill_Balancing_Sts);
PARAMETER(LCL.TH_Bal_to_Kill_Gen);
PARAMETER(LCL.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(LCL.TH_Head_Excluded);
PARAMETER(LCL.TH_Avg_Lean_EXC_ADD);
PARAMETER(LCL.TH_Head_Identified);
PARAMETER(LCL.TH_Percent_Identified);
PARAMETER(LCL.TH_Percent_Accepted);
PARAMETER(LCL.TH_Head_Adjusted_LN);
PARAMETER(LCL.TH_PHA_Head_Adds);
PARAMETER(LCL.TH_PHA_Add_Type);
PARAMETER(LCL.TH_PHA_Average_Type);
PARAMETER(LCL.TH_PHA_Add_Reason);
PARAMETER(LCL.TH_PHA_Yield_Percent);
PARAMETER(LCL.TH_PHA_Lean_Prm_Crc_CWT);
PARAMETER(LCL.TH_Yld_Parm_Adj_Yield);
PARAMETER(LCL.TH_PHA_Sort_Disc_Fctr);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Val Kill Trans    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1190805;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(PAR.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(PAR.TH_Head_Condemned);
 PARAMETER(PAR.TH_Head_Killed);
 PARAMETER(PAR.TH_Head_Adds);
 PARAMETER(PAR.TH_Head_Accepted);
 PARAMETER(PAR.TH_Adj_Live_Wgt);
 PARAMETER(PAR.TH_Hot_Wgt);
 PARAMETER(PAR.TH_Tot_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Tot_Backfat_Inches);
 PARAMETER(PAR.TH_Tot_Light_Reflectance);
 PARAMETER(PAR.TH_Avg_Hot_Wgt);
 PARAMETER(PAR.TH_Avg_Light_Reflectance);
 PARAMETER(PAR.TH_Avg_Lean_Percent);
 PARAMETER(PAR.TH_Avg_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Avg_Backfat);
 PARAMETER(PAR.TH_Actual_Yield);
 PARAMETER(PAR.TH_Adj_Actual_Yield);
 PARAMETER(PAR.TH_Fixed_Cost_Amount);
 PARAMETER(PAR.TH_Header_Error_Sts);
 PARAMETER(PAR.TH_Detail_Error_Sts);
 PARAMETER(PAR.TH_Kill_Balancing_Sts);
 PARAMETER(PAR.TH_Bal_to_Kill_Gen);
 PARAMETER(PAR.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(PAR.TH_Head_Excluded);
 PARAMETER(PAR.TH_Avg_Lean_EXC_ADD);
 PARAMETER(PAR.TH_Head_Identified);
 PARAMETER(PAR.TH_Percent_Identified);
 PARAMETER(PAR.TH_Percent_Accepted);
 PARAMETER(PAR.TH_Head_Adjusted_LN);
 PARAMETER(PAR.TH_PHA_Head_Adds);
 PARAMETER(PAR.TH_PHA_Add_Type);
 PARAMETER(PAR.TH_PHA_Average_Type);
 PARAMETER(PAR.TH_PHA_Add_Reason);
 PARAMETER(PAR.TH_PHA_Yield_Percent);
 PARAMETER(PAR.TH_PHA_Lean_Prm_Crc_CWT);
 PARAMETER(PAR.TH_Yld_Parm_Adj_Yield);
 PARAMETER(PAR.TH_PHA_Sort_Disc_Fctr);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


//?Re-Calculate for Held Overs: %ID, %Anal, AvgHtWgt f/EXC, Adj Yield%
CASE;

// IF PAR.TH Held Over Record is Yes
IF PAR.TH_Held_Over_Record = 'Y';

// OR LCL.TH Bal to Kill Gen is User Requested Generated
OR ( LCL.TH_Bal_to_Kill_Gen = 'U';

// AND PAR.TH Held Over is greater than 0
AND PAR.TH_Held_Over > *ZERO );

//?** WRK is accumulated values, LCL is for current record. **
//?   We will overlay the LCL values of current record with both
//?   days combined.
//?Combine the two days for hold over.
EXECUTE FUNCTION(Rtv Tot Hd ID/Anl/Net RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1240203;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(WRK.TH_Head_Received);
PARAMETER(WRK.TH_Yard_Deads);
PARAMETER(WRK.TH_Head_Condemned);
PARAMETER(WRK.TH_Head_Killed);
PARAMETER(WRK.TH_Head_Accepted);
PARAMETER(WRK.TH_Live_Wgt);
PARAMETER(WRK.TH_Adj_Live_Wgt);
PARAMETER(WRK.TH_Hot_Wgt);
PARAMETER(WRK.TH_Head_Identified);
PARAMETER(WRK.Hot_Wgt_Lean_Accum_Usr);
PARAMETER(WRK.Hot_Wgt_Backf_Accum_Usr);
PARAMETER(WRK.Hot_Wgt_Loine_Accum_Usr);
PARAMETER(WRK.Hot_Wgt_LghtR_Accum_Usr);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.TH Head Received = PAR.TH Head Received + DB1.TH Head Received
 PAR.TH_Head_Received = PAR.TH_Head_Received + DB1.TH_Head_Received;

 // PAR.TH Yard Deads = PAR.TH Yard Deads + DB1.TH Yard Deads
 PAR.TH_Yard_Deads = PAR.TH_Yard_Deads + DB1.TH_Yard_Deads;

 // PAR.TH Head Condemned = PAR.TH Head Condemned + DB1.TH Head Condemned
 PAR.TH_Head_Condemned = PAR.TH_Head_Condemned + DB1.TH_Head_Condemned;

 // PAR.TH Head Killed = PAR.TH Head Killed + DB1.TH Head Killed
 PAR.TH_Head_Killed = PAR.TH_Head_Killed + DB1.TH_Head_Killed;

 // PAR.TH Head Accepted = PAR.TH Head Accepted + DB1.TH Head Accepted
 PAR.TH_Head_Accepted = PAR.TH_Head_Accepted + DB1.TH_Head_Accepted;

 // PAR.TH Head Identified = PAR.TH Head Identified + DB1.TH Head Identified
 PAR.TH_Head_Identified = PAR.TH_Head_Identified + DB1.TH_Head_Identified;

 // PAR.TH Live Wgt = PAR.TH Live Wgt + DB1.TH Live Wgt
 PAR.TH_Live_Wgt = PAR.TH_Live_Wgt + DB1.TH_Live_Wgt;

 // PAR.TH Hot Wgt = PAR.TH Hot Wgt + DB1.TH Hot Wgt
 PAR.TH_Hot_Wgt = PAR.TH_Hot_Wgt + DB1.TH_Hot_Wgt;

 // Hot Wgt/Lean % Accum USR
 PAR.Hot_Wgt_Lean_Accum_Usr = PAR.Hot_Wgt_Lean_Accum_Usr + ( DB1.TH_Hot_Wgt
 * DB1.TH_Avg_Lean_Percent 'H' );

 // Hot Wgt/Backf Accum USR
 PAR.Hot_Wgt_Backf_Accum_Usr = PAR.Hot_Wgt_Backf_Accum_Usr + ( DB1.TH_Hot_Wgt
 * DB1.TH_Avg_Backfat 'H' );

 // Hot Wgt/Loine Accum Usr
 PAR.Hot_Wgt_Loine_Accum_Usr = PAR.Hot_Wgt_Loine_Accum_Usr + ( DB1.TH_Hot_Wgt
 * DB1.TH_Avg_Loin_Eye_Depth 'H' );

 // Hot Wgt/LghtR Accum Usr
 PAR.Hot_Wgt_LghtR_Accum_Usr = PAR.Hot_Wgt_LghtR_Accum_Usr + ( DB1.TH_Hot_Wgt
 * DB1.TH_Avg_Light_Reflectance 'H' );

}


// WRK.Net Head Usr
WRK.Net_Head_Usr = ( WRK.TH_Head_Received - WRK.TH_Yard_Deads ) - WRK.TH_Head_Condemned;

// LCL.Percent Identified
LCL.TH_Percent_Identified = ( WRK.TH_Head_Identified / WRK.Net_Head_Usr 'H' ) * 100 'H';

// LCL.Percent Analyzed
LCL.TH_Percent_Accepted = ( WRK.TH_Head_Accepted / WRK.Net_Head_Usr 'H' ) * 100 'H';

//?WRK.Adj Live Weight
CASE;

// IF WRK.TH Head Received EQ WRK.Net Head Usr
IF WRK.TH_Head_Received = WRK.Net_Head_Usr;

// WRK.TH Adj Live Wgt = WRK.TH Live Wgt
WRK.TH_Adj_Live_Wgt = WRK.TH_Live_Wgt;

//?WRK.Adj Live Weight
// IF WRK.Net Head Usr EQ LCL.Zero USR
IF WRK.Net_Head_Usr = LCL.Zero_USR;

// WRK.TH Adj Live Wgt = CON.*ZERO
WRK.TH_Adj_Live_Wgt = *ZERO;

//?WRK.Adj Live Weight
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Net Head Adjusted Usr
WRK.Net_Head_Adjusted_Usr = WRK.TH_Head_Condemned + WRK.TH_Yard_Deads;

// LCL.*Synon (15,2) work field = WRK.Net Head Adjusted Usr * PAR.TH Avg Live Wgt *Rounded
LCL.*Synon_152_work_field = WRK.Net_Head_Adjusted_Usr * PAR.TH_Avg_Live_Wgt 'H';

// WRK.TH Adj Live Wgt = WRK.TH Live Wgt - LCL.*Synon (15,2) work field
WRK.TH_Adj_Live_Wgt = WRK.TH_Live_Wgt - LCL.*Synon_152_work_field;

ENDIF;

//?WRK.Adj Actual Yield
CASE;

// IF WRK.TH Adj Live Wgt NE LCL.Zero USR
IF WRK.TH_Adj_Live_Wgt <> LCL.Zero_USR;

//?actual yield percent: hot w / live wgt * 100
// Adj Actual Yield
WRK.TH_Adj_Actual_Yield = ( WRK.TH_Hot_Wgt / WRK.TH_Adj_Live_Wgt 'H' ) * 100 'H';

ENDIF;

//?LCL.Average Hot Weight for Exclude or Add
CASE;

// IF WRK.TH Head Killed NE LCL.Zero USR
IF WRK.TH_Head_Killed <> LCL.Zero_USR;

//?Accumulated totals div by head killed
// LCL.TH Avg Hot Wgt EXC/ADD = WRK.TH Hot Wgt / WRK.TH Head Killed *Rounded
LCL.TH_Avg_Hot_Wgt_EXC_ADD = WRK.TH_Hot_Wgt / WRK.TH_Head_Killed 'H';

//?LCL.Average Hot Weight for Exclude or Add
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.TH Avg Hot Wgt EXC/ADD = CON.*ZERO
LCL.TH_Avg_Hot_Wgt_EXC_ADD = *ZERO;

ENDIF;

//?LCL.Average Lean Percent for Exclude or Add/Backfat/loinEye/etc.
CASE;

// IF WRK.TH Hot Wgt is Greater then Zero
IF WRK.TH_Hot_Wgt > *ZERO;

// LCL.TH Avg Lean Percent = WRK.Hot Wgt/Lean % Accum Usr / WRK.TH Hot Wgt *Rounded
LCL.TH_Avg_Lean_Percent = WRK.Hot_Wgt_Lean_Accum_Usr / WRK.TH_Hot_Wgt 'H';

// LCL.TH Avg Backfat = WRK.Hot Wgt/Backf Accum Usr / WRK.TH Hot Wgt *Rounded
LCL.TH_Avg_Backfat = WRK.Hot_Wgt_Backf_Accum_Usr / WRK.TH_Hot_Wgt 'H';

// LCL.TH Avg Loin Eye Depth = WRK.Hot Wgt/Loine Accum Usr / WRK.TH Hot Wgt *Rounded
LCL.TH_Avg_Loin_Eye_Depth = WRK.Hot_Wgt_Loine_Accum_Usr / WRK.TH_Hot_Wgt 'H';

// LCL.TH Avg Light Reflectance = WRK.Hot Wgt/LghtR Accum Usr / WRK.TH Hot Wgt *Rounded
LCL.TH_Avg_Light_Reflectance = WRK.Hot_Wgt_LghtR_Accum_Usr / WRK.TH_Hot_Wgt 'H';

// LCL.TH Avg Lean % EXC/ADD
LCL.TH_Avg_Lean_EXC_ADD = WRK.Hot_Wgt_Lean_Accum_Usr / WRK.TH_Hot_Wgt 'H';

ENDIF;

ENDIF;

CASE;

// IF PAR.Undo MPR USR is No
IF PAR.Undo_MPR_USR = 'N';

//?03/01/04 ??? Only EXTERNAL will be paid with Historical Average
//?             if Held Over more then 1 day.
//?08/19/04 PKD Externals and Internals will be balanced the same.
//?             starting 08/23/04 per Gary Louis.
CASE;

// IF PAR.BOH Company Number is SBD Farms of Guymon, Ok
IF PAR.BOH_Company_Number = 360;

//?Balance Held Over Tattoo (> 1 day)
CASE;

// IF PAR.TH Held Over is greater than 0
IF ( PAR.TH_Held_Over > *ZERO;

// OR PAR.TH Held Over Record is Yes
OR PAR.TH_Held_Over_Record = 'Y' );

//?Balance Held Over Tattoo
CASE;

// IF PAR.TH Source Type is External
IF PAR.TH_Source_Type = 'E';

// OR PAR.TH Source Type is Internal
OR PAR.TH_Source_Type = 'I';

EXECUTE FUNCTION(Rtv Held Over KillDt  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1227415;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.Kill_Date_Usr);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.TH Kill Date NE PAR.Kill Date 1 Usr
 IF DB1.TH_Kill_Date <> PAR.Kill_Date_1_Usr;

 // PAR.Kill Date Usr = DB1.TH Kill Date
 PAR.Kill_Date_Usr = DB1.TH_Kill_Date;

 QUIT;

 ENDIF;

}


//?Balance Held Over of greater then 1 day.
CASE;

// IF PAR.TH Held Over Record is Yes
IF PAR.TH_Held_Over_Record = 'Y';

// LCL.Day of Week USR = PAR.TH Kill Date *DAY OF WEEK
LCL.Day_of_Week_USR = DATEDTLS(PAR.TH_Kill_Date 'DW' 1111111 'NONE' 'N' 1);

// LCL.Held Over Days USR = PAR.TH Kill Date - LCL.Kill Date Usr *DAYS
LCL.Held_Over_Days_USR = DURATION(PAR.TH_Kill_Date LCL.Kill_Date_Usr 'DY' 1111111 'NONE'           +
'N' 1);

//?Monday or Held Over Days > 1
CASE;

// IF LCL.Day of Week USR is Mon
IF LCL.Day_of_Week_USR = 1;

// OR LCL.Held Over Days USR is GT 1
OR LCL.Held_Over_Days_USR > 1;

// LCL.TH PHA Add Type = CND.Entire Tattoo
LCL.TH_PHA_Add_Type = 'E';

// LCL.TH PHA Add Reason = CND.Hold Over
LCL.TH_PHA_Add_Reason = 4;

// Retrieve message - 'Heldover Tattoo:  Entire Lot was paid based on Producer'
LCL.THC_Comment = RTVMSG(PRK0932);

EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.THC_Comment_Line);
PARAMETER(LCL.THC_Comment);
PARAMETER('P');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 {
  //?USER: Processing if Data record not found

  // PAR.THC Comment Line = CON.1
  PAR.THC_Comment_Line = 1;

  //?USER: Process Data record

  // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
  PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 PARAMETER(PAR.THC_Comment);
 PARAMETER(PAR.THC_Comment_Type);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


// Retrieve message - '2 Week (2WK), 4 Week (4WK), or "last load" (HST) Average.'
LCL.THC_Comment = RTVMSG(PRK0947);

EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.THC_Comment_Line);
PARAMETER(LCL.THC_Comment);
PARAMETER('P');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 {
  //?USER: Processing if Data record not found

  // PAR.THC Comment Line = CON.1
  PAR.THC_Comment_Line = 1;

  //?USER: Process Data record

  // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
  PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 PARAMETER(PAR.THC_Comment);
 PARAMETER(PAR.THC_Comment_Type);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


EXECUTE FUNCTION(Rtv GA Prod Hist Avgs RT) TYPE(RTVOBJ) FILE(PKCGCPP)           AB1226508;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.TH_Purchase_Date);
PARAMETER(LCL.PH_Summary_Type);
PARAMETER(LCL.PH_GA_Avg_Live_Wgt);
PARAMETER(LCL.TH_PHA_Yield_Percent);
PARAMETER(LCL.PH_GA_Avg_Lean);
PARAMETER(LCL.PH_GA_Avg_Backfat);
PARAMETER(LCL.PH_GA_Avg_Loin_Eye);
PARAMETER(LCL.PH_GA_Avg_Light_Ref);
PARAMETER(LCL.TH_PHA_Lean_Prm_Crc_CWT);
PARAMETER(LCL.PH_GA_Avg_Srt_Disc_Fctr);
PARAMETER(LCL.History_Avail_STS_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 // PAR.History Avail STS USR = CND.No
 PAR.History_Avail_STS_USR = 'N';

 // LCL.First Time Flag Usr = CND.Yes
 LCL.First_Time_Flag_Usr = 'Y';

 //?USER: Process Data record

 //?First Time Processing
 CASE;

 // IF LCL.First Time Flag Usr is Yes
 IF LCL.First_Time_Flag_Usr = 'Y';

 // LCL.PH Week Ending Date = DB1.PH Week Ending Date
 LCL.PH_Week_Ending_Date = DB1.PH_Week_Ending_Date;

 // LCL.First Time Flag Usr = CND.No
 LCL.First_Time_Flag_Usr = 'N';

 ENDIF;

 CASE;

 // IF DB1.PH Week Ending Date NE LCL.PH Week Ending Date
 IF DB1.PH_Week_Ending_Date <> LCL.PH_Week_Ending_Date;

 QUIT;

 ENDIF;

 CASE;

 // IF DB1.PH Summary Type is 2 Week
 IF DB1.PH_Summary_Type = '2WK';

 CASE;

 // IF DB1.PH GA Head Killed is GE 600
 IF DB1.PH_GA_Head_Killed >= 600;

 MOVE *ALL (To: PAR From: DB1);

 // PAR.History Avail STS USR = CND.Yes
 PAR.History_Avail_STS_USR = 'Y';

 QUIT;

 ENDIF;

 // IF DB1.PH Summary Type is 4 Week
 IF DB1.PH_Summary_Type = '4WK';

 CASE;

 // IF DB1.PH GA Head Killed is GT Zero
 IF DB1.PH_GA_Head_Killed > *ZERO;

 MOVE *ALL (To: PAR From: DB1);

 // PAR.History Avail STS USR = CND.Yes
 PAR.History_Avail_STS_USR = 'Y';

 QUIT;

 ENDIF;

 ENDIF;

}


//?Average Type
CASE;

// IF LCL.PH Summary Type is 2 Week
IF LCL.PH_Summary_Type = '2WK';

// LCL.TH PHA Average Type = CND.2 Week
LCL.TH_PHA_Average_Type = '2WK';

//?Average Type
// IF LCL.PH Summary Type is 4 Week
IF LCL.PH_Summary_Type = '4WK';

// LCL.TH PHA Average Type = CND.4 Week
LCL.TH_PHA_Average_Type = '4WK';

//?Average Type
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.TH PHA Average Type = CND.Available History
LCL.TH_PHA_Average_Type = 'HST';

ENDIF;

//?Create Eval Trans records.
CASE;

// IF LCL.History Avail STS USR is Yes
IF LCL.History_Avail_STS_USR = 'Y';

// OR PAR.Bal w/History is Available History
OR PAR.Bal_w_History = 'A';

//?Balance w/Available History
CASE;

// IF PAR.Bal w/History is Available History
IF PAR.Bal_w_History = 'A';

// LCL.PH GA Avg Live Wgt = PAR.PH GA Avg Live Wgt
LCL.PH_GA_Avg_Live_Wgt = PAR.PH_GA_Avg_Live_Wgt;

// LCL.TH PHA Yield Percent = PAR.PH GA Adjusted Yield%
LCL.TH_PHA_Yield_Percent = PAR.PH_GA_Adjusted_Yield;

// LCL.TH PHA Lean Prm /Crc CWT = PAR.PH GA Lean Prm /Carc CWT
LCL.TH_PHA_Lean_Prm_Crc_CWT = PAR.PH_GA_Lean_Prm_Carc_CWT;

// LCL.TH PHA Sort Disc Fctr % = PAR.PH GA Avg Srt Disc Fctr * CON.100 *Rounded
LCL.TH_PHA_Sort_Disc_Fctr = PAR.PH_GA_Avg_Srt_Disc_Fctr * 100 'H';

// LCL.PH GA Avg Backfat = PAR.PH GA Avg Backfat
LCL.PH_GA_Avg_Backfat = PAR.PH_GA_Avg_Backfat;

// LCL.PH GA Avg Loin Eye = PAR.PH GA Avg Loin Eye
LCL.PH_GA_Avg_Loin_Eye = PAR.PH_GA_Avg_Loin_Eye;

// LCL.PH GA Avg Light Ref = PAR.PH GA Avg Light Ref
LCL.PH_GA_Avg_Light_Ref = PAR.PH_GA_Avg_Light_Ref;

// LCL.PH GA Avg Lean% = PAR.PH GA Avg Lean%
LCL.PH_GA_Avg_Lean = PAR.PH_GA_Avg_Lean;

// Retrieve message - '2WK/4WK history not available. Paid on last load delivered.'
LCL.THC_Comment = RTVMSG(PRK0933);
PARAMETER(*ZERO);

EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.THC_Comment_Line);
PARAMETER(LCL.THC_Comment);
PARAMETER('P');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 {
  //?USER: Processing if Data record not found

  // PAR.THC Comment Line = CON.1
  PAR.THC_Comment_Line = 1;

  //?USER: Process Data record

  // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
  PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 PARAMETER(PAR.THC_Comment);
 PARAMETER(PAR.THC_Comment_Type);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


//?Balance w/Available History
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.TH PHA Sort Disc Fctr % = LCL.PH GA Avg Srt Disc Fctr * CON.100 *Rounded
LCL.TH_PHA_Sort_Disc_Fctr = LCL.PH_GA_Avg_Srt_Disc_Fctr * 100 'H';

ENDIF;

EXECUTE FUNCTION(Bal Eval Trans w/PHA  IF) TYPE(EXCINTFUN)                      AB1226549;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.TH_Head_Killed);
PARAMETER(LCL.TH_Hot_Wgt);
PARAMETER(LCL.TH_Tot_Loin_Eye_Depth);
PARAMETER(LCL.TH_Tot_Backfat_Inches);
PARAMETER(LCL.TH_Tot_Light_Reflectance);
PARAMETER(PAR.TH_Avg_Live_Wgt);
PARAMETER(LCL.TH_Avg_Hot_Wgt);
PARAMETER(PAR.TH_Recalc_Live_Wgt);
PARAMETER(LCL.TH_Header_Error_Sts);
PARAMETER(LCL.TH_Detail_Error_Sts);
PARAMETER(LCL.TH_Kill_Balancing_Sts);
PARAMETER(PAR.TH_Source_Type);
PARAMETER(PAR.TH_Schedule_Kill_Shift);
PARAMETER(LCL.TH_Percent_Identified);
PARAMETER(LCL.TH_Percent_Accepted);
PARAMETER(LCL.TH_PHA_Head_Adds);
PARAMETER(LCL.TH_PHA_Add_Type);
PARAMETER(LCL.TH_PHA_Average_Type);
PARAMETER(LCL.TH_PHA_Add_Reason);
PARAMETER(LCL.TH_PHA_Yield_Percent);
PARAMETER(LCL.TH_PHA_Lean_Prm_Crc_CWT);
PARAMETER(LCL.PH_GA_Avg_Live_Wgt);
PARAMETER(LCL.PH_GA_Avg_Lean);
PARAMETER(LCL.PH_GA_Avg_Backfat);
PARAMETER(LCL.PH_GA_Avg_Loin_Eye);
PARAMETER(LCL.PH_GA_Avg_Light_Ref);
PARAMETER(LCL.Net_Head_Usr);
PARAMETER(LCL.Hot_Wgt_Lean_Accum_Usr);
PARAMETER(LCL.Hot_Wgt_Backf_Accum_Usr);
PARAMETER(LCL.Hot_Wgt_Loine_Accum_Usr);
PARAMETER(LCL.Hot_Wgt_LghtR_Accum_Usr);
PARAMETER(LCL.CDI_Shipper_User);
{
 //?Execute internal function

 // LCL.TH Avg Live Wgt = PAR.TH Avg Live Wgt
 LCL.TH_Avg_Live_Wgt = PAR.TH_Avg_Live_Wgt;

 //?* 02/20/04 PKD added check for Recalc Live Weight.
 //?06/04/04 SLM HPEBAL - Remove the Calculation of Avg Live Wgt
 //?                    - Moved the Adjust/Add Type as the first step
 //?                    - Calculate the Et Hot Wgt, write a Pay note
 //?                    - message to the tattoo header comments
 //?                    - combine the calculation of ET Hot Wgt
 //?                    - with the messaging
 //?03/28/05 SLM TFP0001 -
 //?                     - The payment on Hold Over for more then 1 day
 //?                     - Triumph will need to pay on the Producer
 //?                     - avg live weight.
 //?Adjust/Add Type
 CASE;

 // IF PAR.TH PHA Average Type is 2 Week
 IF PAR.TH_PHA_Average_Type = '2WK';

 // PAR.ET Adjust/Add Type = CND.Add w/2 Week Average
 PAR.ET_Adjust_Add_Type = '2WK';

 //?Adjust/Add Type
 // IF PAR.TH PHA Average Type is 4 Week
 IF PAR.TH_PHA_Average_Type = '4WK';

 // PAR.ET Adjust/Add Type = CND.Add w/4 Week Average
 PAR.ET_Adjust_Add_Type = '4WK';

 //?Adjust/Add Type
 // IF PAR.TH PHA Average Type is Available History
 IF PAR.TH_PHA_Average_Type = 'HST';

 // PAR.ET Adjust/Add Type = CND.Add w/Available History
 PAR.ET_Adjust_Add_Type = 'HST';

 ENDIF;

 //?          - Cal of ET Hot Wgt
 //?               - If the Avg Live Wgt = Zero or Recalc Lv Wgt
 //?                  and If the Tattoo Avg Hot Wgt > 0 then use the
 //?                         the Tattoo Avg Hot Wgt
 //?                      else use the GA Live Wgt to recalculate the
 //?                      the ET Hot Wgt
 //?               - If the Avg Live Wgt NOT = Zero or NOT Recalc Lv Wgt
 //?                      use the Tattoo Header Avg Live Wgt to
 //?                      calculate the ET HOT Weight.
 //?Calculate Hot Weight
 CASE;

 // IF PAR.TH Avg Live Wgt is EQ Zero
 IF PAR.TH_Avg_Live_Wgt = *ZERO;

 // OR PAR.TH Recalc Live Wgt is Greater than 0
 OR PAR.TH_Recalc_Live_Wgt > *ZERO;

 //?06/04/04 SLM HPEBAL Remove the Th Source Type is Internal
 //?06/25/04 PKD Only use the Carcass Weight if the Percent Accepted
 //?             is between 75 and 100 percent.
 //?03/28/05 SLM TFP0001 - Add the selection for Triumph on which
 //?                       calculation should be used.
 //?                       Guymon will pay on the lot average
 //?                       Triumph will not pay on the lot average
 //?ET Hot Wgt
 CASE;

 // IF PAR.TH Avg Hot Wgt is GT Zero
 IF PAR.TH_Avg_Hot_Wgt > *ZERO;

 // AND PAR.TH Percent Accepted is GE 75%
 AND ( PAR.TH_Percent_Accepted >= 75.00;

 // AND PAR.TH Percent Accepted is LE 100%
 AND PAR.TH_Percent_Accepted <= 100 );

 // AND PAR.CDI Shipper User is Guymon
 AND PAR.CDI_Shipper_User = *BLANK;

 //?The Tattoo Avg Hot Wgt (Lot) will be used
 // PAR.ET Hot Wgt = PAR.TH Avg Hot Wgt
 PAR.ET_Hot_Wgt = PAR.TH_Avg_Hot_Wgt;

 // PAR.ET Adjust/Add Type = CND.Add w/Lot Avg Hot Wft
 PAR.ET_Adjust_Add_Type = 'LOT';

 // Retrieve message - 'Hot Weight (LOT) based on Lot Average Hot Weight.'
 LCL.THC_Comment = RTVMSG(PRK1116);

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(LCL.THC_Comment_Line);
 PARAMETER(LCL.THC_Comment);
 PARAMETER('P');
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  {
   //?USER: Processing if Data record not found

   // PAR.THC Comment Line = CON.1
   PAR.THC_Comment_Line = 1;

   //?USER: Process Data record

   // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
   PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  PARAMETER(PAR.THC_Comment);
  PARAMETER(PAR.THC_Comment_Type);
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER(PAR.RS_Record_Status);
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  PARAMETER(PAR.RS_User_Added);
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

 }

 //?ET Hot Wgt
 // IF *OTHERWISE
 IF *OTHERWISE;

 // ET Hot Weight using PH GA
 PAR.ET_Hot_Wgt = PAR.PH_GA_Avg_Live_Wgt * ( PAR.TH_PHA_Yield_Percent / 100 'H' ) 'H';

 // Retrieve message - 'Hot Weight based on Producer historical Average Live'
 LCL.THC_Comment = RTVMSG(PRK1117);

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(LCL.THC_Comment_Line);
 PARAMETER(LCL.THC_Comment);
 PARAMETER('P');
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  {
   //?USER: Processing if Data record not found

   // PAR.THC Comment Line = CON.1
   PAR.THC_Comment_Line = 1;

   //?USER: Process Data record

   // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
   PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  PARAMETER(PAR.THC_Comment);
  PARAMETER(PAR.THC_Comment_Type);
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER(PAR.RS_Record_Status);
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  PARAMETER(PAR.RS_User_Added);
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

 }

 // Retrieve message - 'Weight and Average Adjusted Yield.'
 LCL.THC_Comment = RTVMSG(PRK1118);

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(LCL.THC_Comment_Line);
 PARAMETER(LCL.THC_Comment);
 PARAMETER('P');
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  {
   //?USER: Processing if Data record not found

   // PAR.THC Comment Line = CON.1
   PAR.THC_Comment_Line = 1;

   //?USER: Process Data record

   // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
   PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  PARAMETER(PAR.THC_Comment);
  PARAMETER(PAR.THC_Comment_Type);
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER(PAR.RS_Record_Status);
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  PARAMETER(PAR.RS_User_Added);
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

 }

 ENDIF;

 //?08/13/04 PKD Moved the creating of comments out of PHA processing
 //?             The comments need to be created for all types of
 //?             balancing, not just @ PHA.
 //?Calculate Hot Weight
 // IF *OTHERWISE
 IF *OTHERWISE;

 // ET Hot Wgt Frm Tatto ALW
 PAR.ET_Hot_Wgt = PAR.TH_Avg_Live_Wgt * ( PAR.TH_PHA_Yield_Percent / 100 'H' ) 'H';

 //?08/13/04 PKD Moved the creating of comments out of PHA processing
 //?             The comments need to be created for all types of
 //?             balancing, not just @ PHA.
 ENDIF;

 //?08/19/04 PKD Validate the Hot Weight with Evaluation Validation
 //?             Hot Weight range.  If the Hot Weight not within range
 //?             then do not add carcasses and mark the tattoo with
 //?             error.
 EXECUTE FUNCTION(Rtv Hot Weight Range  IF) TYPE(EXCINTFUN)                      AB1169711;
 PARAMETER(LCL.EV_Minimum);
 PARAMETER(LCL.EV_Maximum);
 {
  //?Execute internal function

  // PAR.EV Validation Code = CND.Carcass is Light Weight
  PAR.EV_Validation_Code = 'CLT';

  EXECUTE FUNCTION(Rtv Min/Max Values    RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1169636;
  PARAMETER(PAR.EV_Validation_Code);
  PARAMETER(WRK.EV_Minimum);
  PARAMETER(PAR.EV_Minimum);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.EV Validation Code = CND.Carcass has Double Weight
  PAR.EV_Validation_Code = 'CDB';

  EXECUTE FUNCTION(Rtv Min/Max Values    RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1169636;
  PARAMETER(PAR.EV_Validation_Code);
  PARAMETER(PAR.EV_Maximum);
  PARAMETER(WRK.EV_Maximum);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

 }

 //?Validate Hot Weight and Balance Tattoo
 CASE;

 // IF PAR.ET Hot Wgt is GT Zero
 IF PAR.ET_Hot_Wgt > *ZERO;

 //?Number of Carcasses to Add
 CASE;

 // IF PAR.TH PHA Add Type is Entire Tattoo
 IF PAR.TH_PHA_Add_Type = 'E';

 //?Pay Entire Tattoo w/PHA, then Purge All Transactions.
 EXECUTE FUNCTION(Bal Flag f/Purge All  RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1226536;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TH_Head_Killed);
 PARAMETER(PAR.TH_Hot_Wgt);
 PARAMETER(PAR.TH_Tot_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Tot_Backfat_Inches);
 PARAMETER(PAR.TH_Tot_Light_Reflectance);
 PARAMETER(PAR.Hot_Wgt_Lean_Accum_Usr);
 PARAMETER(PAR.Hot_Wgt_Backf_Accum_Usr);
 PARAMETER(PAR.Hot_Wgt_Loine_Accum_Usr);
 PARAMETER(PAR.Hot_Wgt_LghtR_Accum_Usr);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.RS Record Status is Active
  IF DB1.RS_Record_Status = 'A';

  EXECUTE FUNCTION(Chg Record Status     CH) TYPE(CHGOBJ) FILE(PKBVCPP)           AB1226537;
  PARAMETER(DB1.ET_Company_Number);
  PARAMETER(DB1.ET_Kill_Date);
  PARAMETER(DB1.ET_Scale_Sequence_Number);
  PARAMETER(DB1.ET_Carcass_Number);
  PARAMETER(DB1.ET_Carcass_Number_Insert);
  PARAMETER('D');
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  //?Subtract from Totals
  DO;

  //?Accumulate totals
  // PAR.TH Head Killed = PAR.TH Head Killed - CON.1
  PAR.TH_Head_Killed = PAR.TH_Head_Killed - 1;

  // PAR.TH Tot Loin Eye Depth = PAR.TH Tot Loin Eye Depth - DB1.ET Loin-Eye Depth Inches
  PAR.TH_Tot_Loin_Eye_Depth = PAR.TH_Tot_Loin_Eye_Depth - DB1.ET_Loin_Eye_Depth_Inches;

  // PAR.TH Tot Backfat Inches = PAR.TH Tot Backfat Inches - DB1.ET Backfat Thickness Inch
  PAR.TH_Tot_Backfat_Inches = PAR.TH_Tot_Backfat_Inches - DB1.ET_Backfat_Thickness_Inch;

  // PAR.TH Tot Light Reflectance = PAR.TH Tot Light Reflectance - DB1.ET Light Reflectance
  PAR.TH_Tot_Light_Reflectance = PAR.TH_Tot_Light_Reflectance - DB1.ET_Light_Reflectance;

  // PAR.TH Hot Wgt = PAR.TH Hot Wgt - DB1.ET Hot Wgt
  PAR.TH_Hot_Wgt = PAR.TH_Hot_Wgt - DB1.ET_Hot_Wgt;

  //?Weighted accumulated Lean%
  // LCL.Hot Wgt/Weight Ext Usr = DB1.ET Lean Percent NPPC * DB1.ET Hot Wgt *
  LCL.Hot_Wgt_Weight_Ext_Usr = DB1.ET_Lean_Percent_NPPC * DB1.ET_Hot_Wgt;

  // PAR.Hot Wgt/Lean % Accum Usr = PAR.Hot Wgt/Lean % Accum Usr - LCL.Hot Wgt/Weight Ext Usr
  PAR.Hot_Wgt_Lean_Accum_Usr = PAR.Hot_Wgt_Lean_Accum_Usr - LCL.Hot_Wgt_Weight_Ext_Usr;

  //?Weighted accumulated Backfat
  // LCL.Hot Wgt/Weight Ext Usr = DB1.ET Backfat Thickness Inch * DB1.ET Hot Wgt *
  LCL.Hot_Wgt_Weight_Ext_Usr = DB1.ET_Backfat_Thickness_Inch * DB1.ET_Hot_Wgt;

  // PAR.Hot Wgt/Backf Accum Usr = PAR.Hot Wgt/Backf Accum Usr - LCL.Hot Wgt/Weight Ext Usr
  PAR.Hot_Wgt_Backf_Accum_Usr = PAR.Hot_Wgt_Backf_Accum_Usr - LCL.Hot_Wgt_Weight_Ext_Usr;

  //?Weighted accumulated Loin Eye
  // LCL.Hot Wgt/Weight Ext Usr = DB1.ET Loin-Eye Depth Inches * DB1.ET Hot Wgt *
  LCL.Hot_Wgt_Weight_Ext_Usr = DB1.ET_Loin_Eye_Depth_Inches * DB1.ET_Hot_Wgt;

  // PAR.Hot Wgt/Loine Accum Usr = PAR.Hot Wgt/Loine Accum Usr - LCL.Hot Wgt/Weight Ext Usr
  PAR.Hot_Wgt_Loine_Accum_Usr = PAR.Hot_Wgt_Loine_Accum_Usr - LCL.Hot_Wgt_Weight_Ext_Usr;

  //?Weighted accumulated Light Refl
  // LCL.Hot Wgt/Weight Ext Usr = DB1.ET Light Reflectance * DB1.ET Hot Wgt *
  LCL.Hot_Wgt_Weight_Ext_Usr = DB1.ET_Light_Reflectance * DB1.ET_Hot_Wgt;

  // PAR.Hot Wgt/LghtR Accum Usr = PAR.Hot Wgt/LghtR Accum Usr - LCL.Hot Wgt/Weight Ext Usr
  PAR.Hot_Wgt_LghtR_Accum_Usr = PAR.Hot_Wgt_LghtR_Accum_Usr - LCL.Hot_Wgt_Weight_Ext_Usr;

  ENDDO;

  ENDIF;

 }

 // LCL.Carcass Count USR = PAR.Net Head Usr
 LCL.Carcass_Count_USR = PAR.Net_Head_Usr;

 // PAR.TH Head Killed = CON.*ZERO
 PAR.TH_Head_Killed = *ZERO;

 //?Number of Carcasses to Add
 // IF PAR.TH PHA Add Type is Balance To Kill
 IF PAR.TH_PHA_Add_Type = 'B';

 // LCL.Carcass Count USR = PAR.Net Head Usr - PAR.TH Head Killed
 LCL.Carcass_Count_USR = PAR.Net_Head_Usr - PAR.TH_Head_Killed;

 ENDIF;

 //?06/04/04 SLM HPEBAL - * out the Adjust/add Type Move at top
 //?                      and the hot wgt calc has also been chg
 //?                      and moved
 // PAR.ET Backfat Thickness Inch = PAR.PH GA Avg Backfat
 PAR.ET_Backfat_Thickness_Inch = PAR.PH_GA_Avg_Backfat;

 // PAR.ET Loin-Eye Depth Inches = PAR.PH GA Avg Loin Eye
 PAR.ET_Loin_Eye_Depth_Inches = PAR.PH_GA_Avg_Loin_Eye;

 // PAR.ET Light Reflectance = PAR.PH GA Avg Light Ref
 PAR.ET_Light_Reflectance = PAR.PH_GA_Avg_Light_Ref;

 // PAR.ET Lean Percent NPPC = PAR.PH GA Avg Lean%
 PAR.ET_Lean_Percent_NPPC = PAR.PH_GA_Avg_Lean;

 //?*-------------------------------------------------------------*
 //?* 07/02/01 PKD Needed to calculate the MM Values so the Competitor
 //?*              calculations would calculate the Lean Premium
 //?*              correctly.
 // LCL.Calculate All Usr = CND.Yes
 LCL.Calculate_All_Usr = 'Y';

 // Call program Clc Inch to MM/Lean%FOM.
 CALL PROGRAM(Clc Inch to MM/Lean%FOM) ('PKINMMLP');
 PARAMETER(PAR.ET_Lean_Percent_NPPC);
 PARAMETER(PAR.ET_Backfat_Thickness_Inch);
 PARAMETER(PAR.ET_Loin_Eye_Depth_Inches);
 PARAMETER(PAR.ET_Light_Reflectance);
 PARAMETER(PAR.ET_Backfat_Thickness_MM);
 PARAMETER(PAR.ET_Loineye_Depth_MM);
 PARAMETER(PAR.ET_Light_Reflectance_MM);
 PARAMETER(PAR.ET_Lean_Percent_FOM);
 PARAMETER(LCL.Calculate_All_Usr);

 //?*-------------------------------------------------------------*
 //?* 07/02/01 PKD Changed the parameters to pass in the PAR values
 //?*              instead of zeros for the MM values.
 //?* 05/27/04 SLM HPEBAL Pass in the LCL ET Adjust/Add source
 EXECUTE FUNCTION(Crt Eval Trans Rec    IF) TYPE(EXCINTFUN)                      AB1136539;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(LCL.ET_Scale_Sequence_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Schedule_Kill_Shift);
 PARAMETER(PAR.ET_Hot_Wgt);
 PARAMETER(PAR.ET_Backfat_Thickness_Inch);
 PARAMETER(PAR.ET_Loin_Eye_Depth_Inches);
 PARAMETER(PAR.ET_Lean_Percent_NPPC);
 PARAMETER(PAR.ET_Backfat_Thickness_MM);
 PARAMETER(PAR.ET_Loineye_Depth_MM);
 PARAMETER(PAR.ET_Light_Reflectance_MM);
 PARAMETER(PAR.ET_Lean_Percent_FOM);
 PARAMETER(PAR.ET_Light_Reflectance);
 PARAMETER(WRK.ET_Trim_Area);
 PARAMETER(WRK.ET_Carcass_Sex);
 PARAMETER('B');
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(PAR.ET_Adjust_Add_Type);
 PARAMETER(*BLANK);
 PARAMETER(LCL.ET_Adjust_Add_Source);
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Carcass_Count_USR);
 {
  //?Execute internal function

  // PAR.Carcass number        USR = PAR.Carcass Count USR
  PAR.Carcass_number_USR = PAR.Carcass_Count_USR;

  // DOW PAR.Carcass number        USR is GT Zero
  DOW PAR.Carcass_number_USR > *ZERO;

  EXECUTE FUNCTION(Rtv Eval Next#        RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1135496;
  PARAMETER(PAR.ET_Company_Number);
  PARAMETER(PAR.ET_Kill_Date);
  PARAMETER(PAR.ET_Scale_Sequence_Number);
  {
   //?USER: Processing if Data record not found

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.ET_Scale_Sequence_Number = 1;

   QUIT;

   //?USER: Process Data record

   CASE;

   // IF DB1.ET Scale Sequence Number is Entry Allowed
   IF DB1.ET_Scale_Sequence_Number >= 000001;
   AND DB1.ET_Scale_Sequence_Number <= 699999;

   // PAR.ET Scale Sequence Number = DB1.ET Scale Sequence Number + CON.1
   PAR.ET_Scale_Sequence_Number = DB1.ET_Scale_Sequence_Number + 1;

   QUIT;

   ENDIF;

  }

  EXECUTE FUNCTION(Create Evaluation Transac) TYPE(CRTOBJ) FILE(PKBVCPP)          AB1102931;
  PARAMETER(PAR.ET_Company_Number);
  PARAMETER(PAR.ET_Kill_Date);
  PARAMETER(PAR.ET_Scale_Sequence_Number);
  PARAMETER(PAR.ET_Scale_Sequence_Number);
  PARAMETER(000001);
  PARAMETER(PAR.ET_Tattoo_Number);
  PARAMETER(PAR.ET_Lot);
  PARAMETER(PAR.ET_Shift);
  PARAMETER(PAR.ET_Hot_Wgt);
  PARAMETER(PAR.ET_Backfat_Thickness_Inch);
  PARAMETER(PAR.ET_Loin_Eye_Depth_Inches);
  PARAMETER(PAR.ET_Lean_Percent_NPPC);
  PARAMETER(PAR.ET_Backfat_Thickness_MM);
  PARAMETER(PAR.ET_Loineye_Depth_MM);
  PARAMETER(PAR.ET_Light_Reflectance_MM);
  PARAMETER(PAR.ET_Lean_Percent_FOM);
  PARAMETER(PAR.ET_Light_Reflectance);
  PARAMETER(PAR.ET_Trim_Area);
  PARAMETER(PAR.ET_Carcass_Sex);
  PARAMETER(PAR.ET_Error_Sts);
  PARAMETER(PAR.ET_Record_Add_Del_Sts);
  PARAMETER(PAR.ET_Record_Created_W_Avg);
  PARAMETER(PAR.ET_Record_Created_Status);
  PARAMETER(PAR.ET_User_Error_Override);
  PARAMETER(PAR.ET_Adjust_Add_Type);
  PARAMETER(PAR.ET_Broken_Back_Sts);
  PARAMETER(PAR.ET_Unused_Sts_2);
  PARAMETER(PAR.ET_Adjust_Add_Source);
  PARAMETER(PAR.ET_Unused_Sts_4);
  PARAMETER(PAR.ET_Unused_Sts_5);
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.RU_Date);
  PARAMETER(PAR.RU_Time);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(*MISSING);
   PARAMETER(*MISSING);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  // PAR.Carcass number        USR = PAR.Carcass number        USR - CON.1
  PAR.Carcass_number_USR = PAR.Carcass_number_USR - 1;

  ENDDO;

 }

 //?*-------------------------------------------------------------*
 // PAR.TH PHA Head Adds = LCL.Carcass Count USR
 PAR.TH_PHA_Head_Adds = LCL.Carcass_Count_USR;

 //?Accumulate Totals
 DO;

 //?Accumulate totals
 // PAR.TH Head Killed = PAR.TH Head Killed + LCL.Carcass Count USR
 PAR.TH_Head_Killed = PAR.TH_Head_Killed + LCL.Carcass_Count_USR;

 // TH Hot Wgt
 PAR.TH_Hot_Wgt = PAR.TH_Hot_Wgt + ( PAR.ET_Hot_Wgt * LCL.Carcass_Count_USR );

 // TH Tot Loin Eye Depth
 PAR.TH_Tot_Loin_Eye_Depth = PAR.TH_Tot_Loin_Eye_Depth + ( PAR.ET_Loin_Eye_Depth_Inches
 * LCL.Carcass_Count_USR );

 // TH Tot Backfat Inches
 PAR.TH_Tot_Backfat_Inches = PAR.TH_Tot_Backfat_Inches + ( PAR.ET_Backfat_Thickness_Inch
 * LCL.Carcass_Count_USR );

 // TH Tot Light Reflectance
 PAR.TH_Tot_Light_Reflectance = PAR.TH_Tot_Light_Reflectance + ( PAR.ET_Light_Reflectance
 * LCL.Carcass_Count_USR );

 //?Weighted accumulated Lean%
 // Lean Percent
 LCL.Hot_Wgt_Weight_Ext_Usr = ( PAR.ET_Lean_Percent_NPPC * PAR.ET_Hot_Wgt )
 * LCL.Carcass_Count_USR;

 // PAR.Hot Wgt/Lean % Accum Usr = LCL.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/Lean % Accum Usr
 PAR.Hot_Wgt_Lean_Accum_Usr = LCL.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_Lean_Accum_Usr;

 //?Weighted accumulated Backfat
 // Backfat Thickness Inch
 LCL.Hot_Wgt_Weight_Ext_Usr = ( PAR.ET_Backfat_Thickness_Inch * PAR.ET_Hot_Wgt )
 * LCL.Carcass_Count_USR;

 // PAR.Hot Wgt/Backf Accum Usr = LCL.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/Backf Accum Usr
 PAR.Hot_Wgt_Backf_Accum_Usr = LCL.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_Backf_Accum_Usr;

 //?Weighted accumulated Loin Eye
 // Loin-Eye Depth Inches
 LCL.Hot_Wgt_Weight_Ext_Usr = ( PAR.ET_Loin_Eye_Depth_Inches * PAR.ET_Hot_Wgt )
 * LCL.Carcass_Count_USR;

 // PAR.Hot Wgt/Loine Accum Usr = LCL.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/Loine Accum Usr
 PAR.Hot_Wgt_Loine_Accum_Usr = LCL.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_Loine_Accum_Usr;

 //?Weighted accumulated Light Refl
 // Light Reflectances
 LCL.Hot_Wgt_Weight_Ext_Usr = ( PAR.ET_Light_Reflectance * PAR.ET_Hot_Wgt )
 * LCL.Carcass_Count_USR;

 // PAR.Hot Wgt/LghtR Accum Usr = LCL.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/LghtR Accum Usr
 PAR.Hot_Wgt_LghtR_Accum_Usr = LCL.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_LghtR_Accum_Usr;

 ENDDO;

 // PAR.TH Header Error Sts = CND.No Header Error
 PAR.TH_Header_Error_Sts = *BLANK;

 // PAR.TH Detail Error Sts = CND.No
 PAR.TH_Detail_Error_Sts = 'N';

 // PAR.TH Kill Balancing Sts = CND.Balance
 PAR.TH_Kill_Balancing_Sts = 'B';

 EXECUTE FUNCTION(Upd PHA Yld/LeanPrm   RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1226785;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_PHA_Yield_Percent);
 PARAMETER(PAR.TH_PHA_Lean_Prm_Crc_CWT);
 //?Validate Hot Weight and Balance Tattoo
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.TH Header Error Sts = CND.Header Error
 PAR.TH_Header_Error_Sts = 'E';

 // PAR.TH Detail Error Sts = CND.Yes
 PAR.TH_Detail_Error_Sts = 'Y';

 // PAR.TH Kill Balancing Sts = CND.Error
 PAR.TH_Kill_Balancing_Sts = 'E';

 EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(999999);
 PARAMETER('H');
 PARAMETER('HWA');
 PARAMETER('Hot Wgt for Adds Invalid');
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.RS_Record_Status);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  CASE;

  // IF PAR.KV Error Description is Entered
  IF PAR.KV_Error_Description <> *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
  PARAMETER(PAR.KV_Error_Code);
  PARAMETER(DB1.KV_Error_Description);
  {
   //?USER: Process Data record

   // PAR.EV Description = DB1.EV Description
   PAR.EV_Description = DB1.EV_Description;

  }

  ENDIF;

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDIF;

}


//?Create Eval Trans records.
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.TH Header Error Sts = CND.Header Error
LCL.TH_Header_Error_Sts = 'E';

// LCL.TH Detail Error Sts = CND.Yes
LCL.TH_Detail_Error_Sts = 'Y';

// LCL.TH Kill Balancing Sts = CND.Error
LCL.TH_Kill_Balancing_Sts = 'E';

EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(999998);
PARAMETER('H');
PARAMETER('PHA');
PARAMETER('Producer Hist Not Avail');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.RS_Record_Status);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 CASE;

 // IF PAR.KV Error Description is Entered
 IF PAR.KV_Error_Description <> *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
 PARAMETER(PAR.KV_Error_Code);
 PARAMETER(DB1.KV_Error_Description);
 {
  //?USER: Process Data record

  // PAR.EV Description = DB1.EV Description
  PAR.EV_Description = DB1.EV_Description;

 }

 ENDIF;

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(999999);
PARAMETER('H');
PARAMETER('PID');
PARAMETER('% Identified > 105%');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.RS_Record_Status);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 CASE;

 // IF PAR.KV Error Description is Entered
 IF PAR.KV_Error_Description <> *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
 PARAMETER(PAR.KV_Error_Code);
 PARAMETER(DB1.KV_Error_Description);
 {
  //?USER: Process Data record

  // PAR.EV Description = DB1.EV Description
  PAR.EV_Description = DB1.EV_Description;

 }

 ENDIF;

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


ENDIF;

// LCL.Hold Over Bal Sts USR = CND.Yes
LCL.Hold_Over_Bal_Sts_USR = 'Y';

//?Monday or Held Over Days > 1
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Balance First Day USR = CND.Yes
PAR.Balance_First_Day_USR = 'Y';

ENDIF;

//?Balance Held Over of greater then 1 day.
// IF PAR.TH Held Over is greater than 0
IF PAR.TH_Held_Over > *ZERO;

// LCL.Day of Week USR = PAR.TH Kill Date *DAY OF WEEK
LCL.Day_of_Week_USR = DATEDTLS(PAR.TH_Kill_Date 'DW' 1111111 'NONE' 'N' 1);

// LCL.Held Over Days USR = LCL.Kill Date Usr - PAR.TH Kill Date *DAYS
LCL.Held_Over_Days_USR = DURATION(LCL.Kill_Date_Usr PAR.TH_Kill_Date 'DY' 1111111 'NONE'           +
'N' 1);

//?Held Over Days > 1
CASE;

// IF LCL.Held Over Days USR is GT 1
IF LCL.Held_Over_Days_USR > 1;

// Call program Rtv Nxt Kill Dt 2 OMS XF.
CALL PROGRAM(Rtv Nxt Kill Dt 2 OMS XF) ('PDUXXFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.Kill_Date_Usr);

// LCL.Day of Week USR = LCL.Kill Date Usr *DAY OF WEEK
LCL.Day_of_Week_USR = DATEDTLS(LCL.Kill_Date_Usr 'DW' 1111111 'NONE' 'N' 1);

CASE;

// IF LCL.Day of Week USR is Mon
IF LCL.Day_of_Week_USR = 1;

// LCL.TH PHA Add Type = CND.Entire Tattoo
LCL.TH_PHA_Add_Type = 'E';

// LCL.TH PHA Add Reason = CND.Hold Over
LCL.TH_PHA_Add_Reason = 4;

// Retrieve message - 'Heldover Tattoo:  Entire Lot was paid based on Producer'
LCL.THC_Comment = RTVMSG(PRK0932);

EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.THC_Comment_Line);
PARAMETER(LCL.THC_Comment);
PARAMETER('P');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 {
  //?USER: Processing if Data record not found

  // PAR.THC Comment Line = CON.1
  PAR.THC_Comment_Line = 1;

  //?USER: Process Data record

  // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
  PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 PARAMETER(PAR.THC_Comment);
 PARAMETER(PAR.THC_Comment_Type);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


// Retrieve message - '2 Week (2WK), 4 Week (4WK), or "last load" (HST) Average.'
LCL.THC_Comment = RTVMSG(PRK0947);

EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.THC_Comment_Line);
PARAMETER(LCL.THC_Comment);
PARAMETER('P');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 {
  //?USER: Processing if Data record not found

  // PAR.THC Comment Line = CON.1
  PAR.THC_Comment_Line = 1;

  //?USER: Process Data record

  // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
  PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 PARAMETER(PAR.THC_Comment);
 PARAMETER(PAR.THC_Comment_Type);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


EXECUTE FUNCTION(Rtv GA Prod Hist Avgs RT) TYPE(RTVOBJ) FILE(PKCGCPP)           AB1226508;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.TH_Purchase_Date);
PARAMETER(LCL.PH_Summary_Type);
PARAMETER(LCL.PH_GA_Avg_Live_Wgt);
PARAMETER(LCL.TH_PHA_Yield_Percent);
PARAMETER(LCL.PH_GA_Avg_Lean);
PARAMETER(LCL.PH_GA_Avg_Backfat);
PARAMETER(LCL.PH_GA_Avg_Loin_Eye);
PARAMETER(LCL.PH_GA_Avg_Light_Ref);
PARAMETER(LCL.TH_PHA_Lean_Prm_Crc_CWT);
PARAMETER(LCL.PH_GA_Avg_Srt_Disc_Fctr);
PARAMETER(LCL.History_Avail_STS_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 // PAR.History Avail STS USR = CND.No
 PAR.History_Avail_STS_USR = 'N';

 // LCL.First Time Flag Usr = CND.Yes
 LCL.First_Time_Flag_Usr = 'Y';

 //?USER: Process Data record

 //?First Time Processing
 CASE;

 // IF LCL.First Time Flag Usr is Yes
 IF LCL.First_Time_Flag_Usr = 'Y';

 // LCL.PH Week Ending Date = DB1.PH Week Ending Date
 LCL.PH_Week_Ending_Date = DB1.PH_Week_Ending_Date;

 // LCL.First Time Flag Usr = CND.No
 LCL.First_Time_Flag_Usr = 'N';

 ENDIF;

 CASE;

 // IF DB1.PH Week Ending Date NE LCL.PH Week Ending Date
 IF DB1.PH_Week_Ending_Date <> LCL.PH_Week_Ending_Date;

 QUIT;

 ENDIF;

 CASE;

 // IF DB1.PH Summary Type is 2 Week
 IF DB1.PH_Summary_Type = '2WK';

 CASE;

 // IF DB1.PH GA Head Killed is GE 600
 IF DB1.PH_GA_Head_Killed >= 600;

 MOVE *ALL (To: PAR From: DB1);

 // PAR.History Avail STS USR = CND.Yes
 PAR.History_Avail_STS_USR = 'Y';

 QUIT;

 ENDIF;

 // IF DB1.PH Summary Type is 4 Week
 IF DB1.PH_Summary_Type = '4WK';

 CASE;

 // IF DB1.PH GA Head Killed is GT Zero
 IF DB1.PH_GA_Head_Killed > *ZERO;

 MOVE *ALL (To: PAR From: DB1);

 // PAR.History Avail STS USR = CND.Yes
 PAR.History_Avail_STS_USR = 'Y';

 QUIT;

 ENDIF;

 ENDIF;

}


//?Average Type
CASE;

// IF LCL.PH Summary Type is 2 Week
IF LCL.PH_Summary_Type = '2WK';

// LCL.TH PHA Average Type = CND.2 Week
LCL.TH_PHA_Average_Type = '2WK';

//?Average Type
// IF LCL.PH Summary Type is 4 Week
IF LCL.PH_Summary_Type = '4WK';

// LCL.TH PHA Average Type = CND.4 Week
LCL.TH_PHA_Average_Type = '4WK';

//?Average Type
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.TH PHA Average Type = CND.Available History
LCL.TH_PHA_Average_Type = 'HST';

ENDIF;

//?Create Eval Trans records.
CASE;

// IF LCL.History Avail STS USR is Yes
IF LCL.History_Avail_STS_USR = 'Y';

// OR PAR.Bal w/History is Available History
OR PAR.Bal_w_History = 'A';

//?Balance w/Available History
CASE;

// IF PAR.Bal w/History is Available History
IF PAR.Bal_w_History = 'A';

// LCL.PH GA Avg Live Wgt = PAR.PH GA Avg Live Wgt
LCL.PH_GA_Avg_Live_Wgt = PAR.PH_GA_Avg_Live_Wgt;

// LCL.TH PHA Yield Percent = PAR.PH GA Adjusted Yield%
LCL.TH_PHA_Yield_Percent = PAR.PH_GA_Adjusted_Yield;

// LCL.TH PHA Lean Prm /Crc CWT = PAR.PH GA Lean Prm /Carc CWT
LCL.TH_PHA_Lean_Prm_Crc_CWT = PAR.PH_GA_Lean_Prm_Carc_CWT;

// LCL.TH PHA Sort Disc Fctr % = PAR.PH GA Avg Srt Disc Fctr * CON.100 *Rounded
LCL.TH_PHA_Sort_Disc_Fctr = PAR.PH_GA_Avg_Srt_Disc_Fctr * 100 'H';

// LCL.PH GA Avg Backfat = PAR.PH GA Avg Backfat
LCL.PH_GA_Avg_Backfat = PAR.PH_GA_Avg_Backfat;

// LCL.PH GA Avg Loin Eye = PAR.PH GA Avg Loin Eye
LCL.PH_GA_Avg_Loin_Eye = PAR.PH_GA_Avg_Loin_Eye;

// LCL.PH GA Avg Light Ref = PAR.PH GA Avg Light Ref
LCL.PH_GA_Avg_Light_Ref = PAR.PH_GA_Avg_Light_Ref;

// LCL.PH GA Avg Lean% = PAR.PH GA Avg Lean%
LCL.PH_GA_Avg_Lean = PAR.PH_GA_Avg_Lean;

//?Balance w/Available History
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.TH PHA Sort Disc Fctr % = LCL.PH GA Avg Srt Disc Fctr * CON.100 *Rounded
LCL.TH_PHA_Sort_Disc_Fctr = LCL.PH_GA_Avg_Srt_Disc_Fctr * 100 'H';

ENDIF;

EXECUTE FUNCTION(Bal Eval Trans w/PHA  IF) TYPE(EXCINTFUN)                      AB1226549;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.TH_Head_Killed);
PARAMETER(LCL.TH_Hot_Wgt);
PARAMETER(LCL.TH_Tot_Loin_Eye_Depth);
PARAMETER(LCL.TH_Tot_Backfat_Inches);
PARAMETER(LCL.TH_Tot_Light_Reflectance);
PARAMETER(PAR.TH_Avg_Live_Wgt);
PARAMETER(LCL.TH_Avg_Hot_Wgt);
PARAMETER(PAR.TH_Recalc_Live_Wgt);
PARAMETER(LCL.TH_Header_Error_Sts);
PARAMETER(LCL.TH_Detail_Error_Sts);
PARAMETER(LCL.TH_Kill_Balancing_Sts);
PARAMETER(PAR.TH_Source_Type);
PARAMETER(PAR.TH_Schedule_Kill_Shift);
PARAMETER(LCL.TH_Percent_Identified);
PARAMETER(LCL.TH_Percent_Accepted);
PARAMETER(LCL.TH_PHA_Head_Adds);
PARAMETER(LCL.TH_PHA_Add_Type);
PARAMETER(LCL.TH_PHA_Average_Type);
PARAMETER(LCL.TH_PHA_Add_Reason);
PARAMETER(LCL.TH_PHA_Yield_Percent);
PARAMETER(LCL.TH_PHA_Lean_Prm_Crc_CWT);
PARAMETER(LCL.PH_GA_Avg_Live_Wgt);
PARAMETER(LCL.PH_GA_Avg_Lean);
PARAMETER(LCL.PH_GA_Avg_Backfat);
PARAMETER(LCL.PH_GA_Avg_Loin_Eye);
PARAMETER(LCL.PH_GA_Avg_Light_Ref);
PARAMETER(LCL.Net_Head_Usr);
PARAMETER(LCL.Hot_Wgt_Lean_Accum_Usr);
PARAMETER(LCL.Hot_Wgt_Backf_Accum_Usr);
PARAMETER(LCL.Hot_Wgt_Loine_Accum_Usr);
PARAMETER(LCL.Hot_Wgt_LghtR_Accum_Usr);
PARAMETER(LCL.CDI_Shipper_User);
{
 //?Execute internal function

 // LCL.TH Avg Live Wgt = PAR.TH Avg Live Wgt
 LCL.TH_Avg_Live_Wgt = PAR.TH_Avg_Live_Wgt;

 //?* 02/20/04 PKD added check for Recalc Live Weight.
 //?06/04/04 SLM HPEBAL - Remove the Calculation of Avg Live Wgt
 //?                    - Moved the Adjust/Add Type as the first step
 //?                    - Calculate the Et Hot Wgt, write a Pay note
 //?                    - message to the tattoo header comments
 //?                    - combine the calculation of ET Hot Wgt
 //?                    - with the messaging
 //?03/28/05 SLM TFP0001 -
 //?                     - The payment on Hold Over for more then 1 day
 //?                     - Triumph will need to pay on the Producer
 //?                     - avg live weight.
 //?Adjust/Add Type
 CASE;

 // IF PAR.TH PHA Average Type is 2 Week
 IF PAR.TH_PHA_Average_Type = '2WK';

 // PAR.ET Adjust/Add Type = CND.Add w/2 Week Average
 PAR.ET_Adjust_Add_Type = '2WK';

 //?Adjust/Add Type
 // IF PAR.TH PHA Average Type is 4 Week
 IF PAR.TH_PHA_Average_Type = '4WK';

 // PAR.ET Adjust/Add Type = CND.Add w/4 Week Average
 PAR.ET_Adjust_Add_Type = '4WK';

 //?Adjust/Add Type
 // IF PAR.TH PHA Average Type is Available History
 IF PAR.TH_PHA_Average_Type = 'HST';

 // PAR.ET Adjust/Add Type = CND.Add w/Available History
 PAR.ET_Adjust_Add_Type = 'HST';

 ENDIF;

 //?          - Cal of ET Hot Wgt
 //?               - If the Avg Live Wgt = Zero or Recalc Lv Wgt
 //?                  and If the Tattoo Avg Hot Wgt > 0 then use the
 //?                         the Tattoo Avg Hot Wgt
 //?                      else use the GA Live Wgt to recalculate the
 //?                      the ET Hot Wgt
 //?               - If the Avg Live Wgt NOT = Zero or NOT Recalc Lv Wgt
 //?                      use the Tattoo Header Avg Live Wgt to
 //?                      calculate the ET HOT Weight.
 //?Calculate Hot Weight
 CASE;

 // IF PAR.TH Avg Live Wgt is EQ Zero
 IF PAR.TH_Avg_Live_Wgt = *ZERO;

 // OR PAR.TH Recalc Live Wgt is Greater than 0
 OR PAR.TH_Recalc_Live_Wgt > *ZERO;

 //?06/04/04 SLM HPEBAL Remove the Th Source Type is Internal
 //?06/25/04 PKD Only use the Carcass Weight if the Percent Accepted
 //?             is between 75 and 100 percent.
 //?03/28/05 SLM TFP0001 - Add the selection for Triumph on which
 //?                       calculation should be used.
 //?                       Guymon will pay on the lot average
 //?                       Triumph will not pay on the lot average
 //?ET Hot Wgt
 CASE;

 // IF PAR.TH Avg Hot Wgt is GT Zero
 IF PAR.TH_Avg_Hot_Wgt > *ZERO;

 // AND PAR.TH Percent Accepted is GE 75%
 AND ( PAR.TH_Percent_Accepted >= 75.00;

 // AND PAR.TH Percent Accepted is LE 100%
 AND PAR.TH_Percent_Accepted <= 100 );

 // AND PAR.CDI Shipper User is Guymon
 AND PAR.CDI_Shipper_User = *BLANK;

 //?The Tattoo Avg Hot Wgt (Lot) will be used
 // PAR.ET Hot Wgt = PAR.TH Avg Hot Wgt
 PAR.ET_Hot_Wgt = PAR.TH_Avg_Hot_Wgt;

 // PAR.ET Adjust/Add Type = CND.Add w/Lot Avg Hot Wft
 PAR.ET_Adjust_Add_Type = 'LOT';

 // Retrieve message - 'Hot Weight (LOT) based on Lot Average Hot Weight.'
 LCL.THC_Comment = RTVMSG(PRK1116);

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(LCL.THC_Comment_Line);
 PARAMETER(LCL.THC_Comment);
 PARAMETER('P');
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  {
   //?USER: Processing if Data record not found

   // PAR.THC Comment Line = CON.1
   PAR.THC_Comment_Line = 1;

   //?USER: Process Data record

   // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
   PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  PARAMETER(PAR.THC_Comment);
  PARAMETER(PAR.THC_Comment_Type);
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER(PAR.RS_Record_Status);
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  PARAMETER(PAR.RS_User_Added);
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

 }

 //?ET Hot Wgt
 // IF *OTHERWISE
 IF *OTHERWISE;

 // ET Hot Weight using PH GA
 PAR.ET_Hot_Wgt = PAR.PH_GA_Avg_Live_Wgt * ( PAR.TH_PHA_Yield_Percent / 100 'H' ) 'H';

 // Retrieve message - 'Hot Weight based on Producer historical Average Live'
 LCL.THC_Comment = RTVMSG(PRK1117);

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(LCL.THC_Comment_Line);
 PARAMETER(LCL.THC_Comment);
 PARAMETER('P');
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  {
   //?USER: Processing if Data record not found

   // PAR.THC Comment Line = CON.1
   PAR.THC_Comment_Line = 1;

   //?USER: Process Data record

   // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
   PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  PARAMETER(PAR.THC_Comment);
  PARAMETER(PAR.THC_Comment_Type);
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER(PAR.RS_Record_Status);
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  PARAMETER(PAR.RS_User_Added);
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

 }

 // Retrieve message - 'Weight and Average Adjusted Yield.'
 LCL.THC_Comment = RTVMSG(PRK1118);

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(LCL.THC_Comment_Line);
 PARAMETER(LCL.THC_Comment);
 PARAMETER('P');
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  {
   //?USER: Processing if Data record not found

   // PAR.THC Comment Line = CON.1
   PAR.THC_Comment_Line = 1;

   //?USER: Process Data record

   // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
   PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  PARAMETER(PAR.THC_Comment);
  PARAMETER(PAR.THC_Comment_Type);
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER(PAR.RS_Record_Status);
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  PARAMETER(PAR.RS_User_Added);
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

 }

 ENDIF;

 //?08/13/04 PKD Moved the creating of comments out of PHA processing
 //?             The comments need to be created for all types of
 //?             balancing, not just @ PHA.
 //?Calculate Hot Weight
 // IF *OTHERWISE
 IF *OTHERWISE;

 // ET Hot Wgt Frm Tatto ALW
 PAR.ET_Hot_Wgt = PAR.TH_Avg_Live_Wgt * ( PAR.TH_PHA_Yield_Percent / 100 'H' ) 'H';

 //?08/13/04 PKD Moved the creating of comments out of PHA processing
 //?             The comments need to be created for all types of
 //?             balancing, not just @ PHA.
 ENDIF;

 //?08/19/04 PKD Validate the Hot Weight with Evaluation Validation
 //?             Hot Weight range.  If the Hot Weight not within range
 //?             then do not add carcasses and mark the tattoo with
 //?             error.
 EXECUTE FUNCTION(Rtv Hot Weight Range  IF) TYPE(EXCINTFUN)                      AB1169711;
 PARAMETER(LCL.EV_Minimum);
 PARAMETER(LCL.EV_Maximum);
 {
  //?Execute internal function

  // PAR.EV Validation Code = CND.Carcass is Light Weight
  PAR.EV_Validation_Code = 'CLT';

  EXECUTE FUNCTION(Rtv Min/Max Values    RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1169636;
  PARAMETER(PAR.EV_Validation_Code);
  PARAMETER(WRK.EV_Minimum);
  PARAMETER(PAR.EV_Minimum);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.EV Validation Code = CND.Carcass has Double Weight
  PAR.EV_Validation_Code = 'CDB';

  EXECUTE FUNCTION(Rtv Min/Max Values    RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1169636;
  PARAMETER(PAR.EV_Validation_Code);
  PARAMETER(PAR.EV_Maximum);
  PARAMETER(WRK.EV_Maximum);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

 }

 //?Validate Hot Weight and Balance Tattoo
 CASE;

 // IF PAR.ET Hot Wgt is GT Zero
 IF PAR.ET_Hot_Wgt > *ZERO;

 //?Number of Carcasses to Add
 CASE;

 // IF PAR.TH PHA Add Type is Entire Tattoo
 IF PAR.TH_PHA_Add_Type = 'E';

 //?Pay Entire Tattoo w/PHA, then Purge All Transactions.
 EXECUTE FUNCTION(Bal Flag f/Purge All  RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1226536;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TH_Head_Killed);
 PARAMETER(PAR.TH_Hot_Wgt);
 PARAMETER(PAR.TH_Tot_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Tot_Backfat_Inches);
 PARAMETER(PAR.TH_Tot_Light_Reflectance);
 PARAMETER(PAR.Hot_Wgt_Lean_Accum_Usr);
 PARAMETER(PAR.Hot_Wgt_Backf_Accum_Usr);
 PARAMETER(PAR.Hot_Wgt_Loine_Accum_Usr);
 PARAMETER(PAR.Hot_Wgt_LghtR_Accum_Usr);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.RS Record Status is Active
  IF DB1.RS_Record_Status = 'A';

  EXECUTE FUNCTION(Chg Record Status     CH) TYPE(CHGOBJ) FILE(PKBVCPP)           AB1226537;
  PARAMETER(DB1.ET_Company_Number);
  PARAMETER(DB1.ET_Kill_Date);
  PARAMETER(DB1.ET_Scale_Sequence_Number);
  PARAMETER(DB1.ET_Carcass_Number);
  PARAMETER(DB1.ET_Carcass_Number_Insert);
  PARAMETER('D');
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  //?Subtract from Totals
  DO;

  //?Accumulate totals
  // PAR.TH Head Killed = PAR.TH Head Killed - CON.1
  PAR.TH_Head_Killed = PAR.TH_Head_Killed - 1;

  // PAR.TH Tot Loin Eye Depth = PAR.TH Tot Loin Eye Depth - DB1.ET Loin-Eye Depth Inches
  PAR.TH_Tot_Loin_Eye_Depth = PAR.TH_Tot_Loin_Eye_Depth - DB1.ET_Loin_Eye_Depth_Inches;

  // PAR.TH Tot Backfat Inches = PAR.TH Tot Backfat Inches - DB1.ET Backfat Thickness Inch
  PAR.TH_Tot_Backfat_Inches = PAR.TH_Tot_Backfat_Inches - DB1.ET_Backfat_Thickness_Inch;

  // PAR.TH Tot Light Reflectance = PAR.TH Tot Light Reflectance - DB1.ET Light Reflectance
  PAR.TH_Tot_Light_Reflectance = PAR.TH_Tot_Light_Reflectance - DB1.ET_Light_Reflectance;

  // PAR.TH Hot Wgt = PAR.TH Hot Wgt - DB1.ET Hot Wgt
  PAR.TH_Hot_Wgt = PAR.TH_Hot_Wgt - DB1.ET_Hot_Wgt;

  //?Weighted accumulated Lean%
  // LCL.Hot Wgt/Weight Ext Usr = DB1.ET Lean Percent NPPC * DB1.ET Hot Wgt *
  LCL.Hot_Wgt_Weight_Ext_Usr = DB1.ET_Lean_Percent_NPPC * DB1.ET_Hot_Wgt;

  // PAR.Hot Wgt/Lean % Accum Usr = PAR.Hot Wgt/Lean % Accum Usr - LCL.Hot Wgt/Weight Ext Usr
  PAR.Hot_Wgt_Lean_Accum_Usr = PAR.Hot_Wgt_Lean_Accum_Usr - LCL.Hot_Wgt_Weight_Ext_Usr;

  //?Weighted accumulated Backfat
  // LCL.Hot Wgt/Weight Ext Usr = DB1.ET Backfat Thickness Inch * DB1.ET Hot Wgt *
  LCL.Hot_Wgt_Weight_Ext_Usr = DB1.ET_Backfat_Thickness_Inch * DB1.ET_Hot_Wgt;

  // PAR.Hot Wgt/Backf Accum Usr = PAR.Hot Wgt/Backf Accum Usr - LCL.Hot Wgt/Weight Ext Usr
  PAR.Hot_Wgt_Backf_Accum_Usr = PAR.Hot_Wgt_Backf_Accum_Usr - LCL.Hot_Wgt_Weight_Ext_Usr;

  //?Weighted accumulated Loin Eye
  // LCL.Hot Wgt/Weight Ext Usr = DB1.ET Loin-Eye Depth Inches * DB1.ET Hot Wgt *
  LCL.Hot_Wgt_Weight_Ext_Usr = DB1.ET_Loin_Eye_Depth_Inches * DB1.ET_Hot_Wgt;

  // PAR.Hot Wgt/Loine Accum Usr = PAR.Hot Wgt/Loine Accum Usr - LCL.Hot Wgt/Weight Ext Usr
  PAR.Hot_Wgt_Loine_Accum_Usr = PAR.Hot_Wgt_Loine_Accum_Usr - LCL.Hot_Wgt_Weight_Ext_Usr;

  //?Weighted accumulated Light Refl
  // LCL.Hot Wgt/Weight Ext Usr = DB1.ET Light Reflectance * DB1.ET Hot Wgt *
  LCL.Hot_Wgt_Weight_Ext_Usr = DB1.ET_Light_Reflectance * DB1.ET_Hot_Wgt;

  // PAR.Hot Wgt/LghtR Accum Usr = PAR.Hot Wgt/LghtR Accum Usr - LCL.Hot Wgt/Weight Ext Usr
  PAR.Hot_Wgt_LghtR_Accum_Usr = PAR.Hot_Wgt_LghtR_Accum_Usr - LCL.Hot_Wgt_Weight_Ext_Usr;

  ENDDO;

  ENDIF;

 }

 // LCL.Carcass Count USR = PAR.Net Head Usr
 LCL.Carcass_Count_USR = PAR.Net_Head_Usr;

 // PAR.TH Head Killed = CON.*ZERO
 PAR.TH_Head_Killed = *ZERO;

 //?Number of Carcasses to Add
 // IF PAR.TH PHA Add Type is Balance To Kill
 IF PAR.TH_PHA_Add_Type = 'B';

 // LCL.Carcass Count USR = PAR.Net Head Usr - PAR.TH Head Killed
 LCL.Carcass_Count_USR = PAR.Net_Head_Usr - PAR.TH_Head_Killed;

 ENDIF;

 //?06/04/04 SLM HPEBAL - * out the Adjust/add Type Move at top
 //?                      and the hot wgt calc has also been chg
 //?                      and moved
 // PAR.ET Backfat Thickness Inch = PAR.PH GA Avg Backfat
 PAR.ET_Backfat_Thickness_Inch = PAR.PH_GA_Avg_Backfat;

 // PAR.ET Loin-Eye Depth Inches = PAR.PH GA Avg Loin Eye
 PAR.ET_Loin_Eye_Depth_Inches = PAR.PH_GA_Avg_Loin_Eye;

 // PAR.ET Light Reflectance = PAR.PH GA Avg Light Ref
 PAR.ET_Light_Reflectance = PAR.PH_GA_Avg_Light_Ref;

 // PAR.ET Lean Percent NPPC = PAR.PH GA Avg Lean%
 PAR.ET_Lean_Percent_NPPC = PAR.PH_GA_Avg_Lean;

 //?*-------------------------------------------------------------*
 //?* 07/02/01 PKD Needed to calculate the MM Values so the Competitor
 //?*              calculations would calculate the Lean Premium
 //?*              correctly.
 // LCL.Calculate All Usr = CND.Yes
 LCL.Calculate_All_Usr = 'Y';

 // Call program Clc Inch to MM/Lean%FOM.
 CALL PROGRAM(Clc Inch to MM/Lean%FOM) ('PKINMMLP');
 PARAMETER(PAR.ET_Lean_Percent_NPPC);
 PARAMETER(PAR.ET_Backfat_Thickness_Inch);
 PARAMETER(PAR.ET_Loin_Eye_Depth_Inches);
 PARAMETER(PAR.ET_Light_Reflectance);
 PARAMETER(PAR.ET_Backfat_Thickness_MM);
 PARAMETER(PAR.ET_Loineye_Depth_MM);
 PARAMETER(PAR.ET_Light_Reflectance_MM);
 PARAMETER(PAR.ET_Lean_Percent_FOM);
 PARAMETER(LCL.Calculate_All_Usr);

 //?*-------------------------------------------------------------*
 //?* 07/02/01 PKD Changed the parameters to pass in the PAR values
 //?*              instead of zeros for the MM values.
 //?* 05/27/04 SLM HPEBAL Pass in the LCL ET Adjust/Add source
 EXECUTE FUNCTION(Crt Eval Trans Rec    IF) TYPE(EXCINTFUN)                      AB1136539;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(LCL.ET_Scale_Sequence_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Schedule_Kill_Shift);
 PARAMETER(PAR.ET_Hot_Wgt);
 PARAMETER(PAR.ET_Backfat_Thickness_Inch);
 PARAMETER(PAR.ET_Loin_Eye_Depth_Inches);
 PARAMETER(PAR.ET_Lean_Percent_NPPC);
 PARAMETER(PAR.ET_Backfat_Thickness_MM);
 PARAMETER(PAR.ET_Loineye_Depth_MM);
 PARAMETER(PAR.ET_Light_Reflectance_MM);
 PARAMETER(PAR.ET_Lean_Percent_FOM);
 PARAMETER(PAR.ET_Light_Reflectance);
 PARAMETER(WRK.ET_Trim_Area);
 PARAMETER(WRK.ET_Carcass_Sex);
 PARAMETER('B');
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(PAR.ET_Adjust_Add_Type);
 PARAMETER(*BLANK);
 PARAMETER(LCL.ET_Adjust_Add_Source);
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Carcass_Count_USR);
 {
  //?Execute internal function

  // PAR.Carcass number        USR = PAR.Carcass Count USR
  PAR.Carcass_number_USR = PAR.Carcass_Count_USR;

  // DOW PAR.Carcass number        USR is GT Zero
  DOW PAR.Carcass_number_USR > *ZERO;

  EXECUTE FUNCTION(Rtv Eval Next#        RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1135496;
  PARAMETER(PAR.ET_Company_Number);
  PARAMETER(PAR.ET_Kill_Date);
  PARAMETER(PAR.ET_Scale_Sequence_Number);
  {
   //?USER: Processing if Data record not found

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.ET_Scale_Sequence_Number = 1;

   QUIT;

   //?USER: Process Data record

   CASE;

   // IF DB1.ET Scale Sequence Number is Entry Allowed
   IF DB1.ET_Scale_Sequence_Number >= 000001;
   AND DB1.ET_Scale_Sequence_Number <= 699999;

   // PAR.ET Scale Sequence Number = DB1.ET Scale Sequence Number + CON.1
   PAR.ET_Scale_Sequence_Number = DB1.ET_Scale_Sequence_Number + 1;

   QUIT;

   ENDIF;

  }

  EXECUTE FUNCTION(Create Evaluation Transac) TYPE(CRTOBJ) FILE(PKBVCPP)          AB1102931;
  PARAMETER(PAR.ET_Company_Number);
  PARAMETER(PAR.ET_Kill_Date);
  PARAMETER(PAR.ET_Scale_Sequence_Number);
  PARAMETER(PAR.ET_Scale_Sequence_Number);
  PARAMETER(000001);
  PARAMETER(PAR.ET_Tattoo_Number);
  PARAMETER(PAR.ET_Lot);
  PARAMETER(PAR.ET_Shift);
  PARAMETER(PAR.ET_Hot_Wgt);
  PARAMETER(PAR.ET_Backfat_Thickness_Inch);
  PARAMETER(PAR.ET_Loin_Eye_Depth_Inches);
  PARAMETER(PAR.ET_Lean_Percent_NPPC);
  PARAMETER(PAR.ET_Backfat_Thickness_MM);
  PARAMETER(PAR.ET_Loineye_Depth_MM);
  PARAMETER(PAR.ET_Light_Reflectance_MM);
  PARAMETER(PAR.ET_Lean_Percent_FOM);
  PARAMETER(PAR.ET_Light_Reflectance);
  PARAMETER(PAR.ET_Trim_Area);
  PARAMETER(PAR.ET_Carcass_Sex);
  PARAMETER(PAR.ET_Error_Sts);
  PARAMETER(PAR.ET_Record_Add_Del_Sts);
  PARAMETER(PAR.ET_Record_Created_W_Avg);
  PARAMETER(PAR.ET_Record_Created_Status);
  PARAMETER(PAR.ET_User_Error_Override);
  PARAMETER(PAR.ET_Adjust_Add_Type);
  PARAMETER(PAR.ET_Broken_Back_Sts);
  PARAMETER(PAR.ET_Unused_Sts_2);
  PARAMETER(PAR.ET_Adjust_Add_Source);
  PARAMETER(PAR.ET_Unused_Sts_4);
  PARAMETER(PAR.ET_Unused_Sts_5);
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.RU_Date);
  PARAMETER(PAR.RU_Time);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(*MISSING);
   PARAMETER(*MISSING);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  // PAR.Carcass number        USR = PAR.Carcass number        USR - CON.1
  PAR.Carcass_number_USR = PAR.Carcass_number_USR - 1;

  ENDDO;

 }

 //?*-------------------------------------------------------------*
 // PAR.TH PHA Head Adds = LCL.Carcass Count USR
 PAR.TH_PHA_Head_Adds = LCL.Carcass_Count_USR;

 //?Accumulate Totals
 DO;

 //?Accumulate totals
 // PAR.TH Head Killed = PAR.TH Head Killed + LCL.Carcass Count USR
 PAR.TH_Head_Killed = PAR.TH_Head_Killed + LCL.Carcass_Count_USR;

 // TH Hot Wgt
 PAR.TH_Hot_Wgt = PAR.TH_Hot_Wgt + ( PAR.ET_Hot_Wgt * LCL.Carcass_Count_USR );

 // TH Tot Loin Eye Depth
 PAR.TH_Tot_Loin_Eye_Depth = PAR.TH_Tot_Loin_Eye_Depth + ( PAR.ET_Loin_Eye_Depth_Inches
 * LCL.Carcass_Count_USR );

 // TH Tot Backfat Inches
 PAR.TH_Tot_Backfat_Inches = PAR.TH_Tot_Backfat_Inches + ( PAR.ET_Backfat_Thickness_Inch
 * LCL.Carcass_Count_USR );

 // TH Tot Light Reflectance
 PAR.TH_Tot_Light_Reflectance = PAR.TH_Tot_Light_Reflectance + ( PAR.ET_Light_Reflectance
 * LCL.Carcass_Count_USR );

 //?Weighted accumulated Lean%
 // Lean Percent
 LCL.Hot_Wgt_Weight_Ext_Usr = ( PAR.ET_Lean_Percent_NPPC * PAR.ET_Hot_Wgt )
 * LCL.Carcass_Count_USR;

 // PAR.Hot Wgt/Lean % Accum Usr = LCL.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/Lean % Accum Usr
 PAR.Hot_Wgt_Lean_Accum_Usr = LCL.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_Lean_Accum_Usr;

 //?Weighted accumulated Backfat
 // Backfat Thickness Inch
 LCL.Hot_Wgt_Weight_Ext_Usr = ( PAR.ET_Backfat_Thickness_Inch * PAR.ET_Hot_Wgt )
 * LCL.Carcass_Count_USR;

 // PAR.Hot Wgt/Backf Accum Usr = LCL.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/Backf Accum Usr
 PAR.Hot_Wgt_Backf_Accum_Usr = LCL.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_Backf_Accum_Usr;

 //?Weighted accumulated Loin Eye
 // Loin-Eye Depth Inches
 LCL.Hot_Wgt_Weight_Ext_Usr = ( PAR.ET_Loin_Eye_Depth_Inches * PAR.ET_Hot_Wgt )
 * LCL.Carcass_Count_USR;

 // PAR.Hot Wgt/Loine Accum Usr = LCL.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/Loine Accum Usr
 PAR.Hot_Wgt_Loine_Accum_Usr = LCL.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_Loine_Accum_Usr;

 //?Weighted accumulated Light Refl
 // Light Reflectances
 LCL.Hot_Wgt_Weight_Ext_Usr = ( PAR.ET_Light_Reflectance * PAR.ET_Hot_Wgt )
 * LCL.Carcass_Count_USR;

 // PAR.Hot Wgt/LghtR Accum Usr = LCL.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/LghtR Accum Usr
 PAR.Hot_Wgt_LghtR_Accum_Usr = LCL.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_LghtR_Accum_Usr;

 ENDDO;

 // PAR.TH Header Error Sts = CND.No Header Error
 PAR.TH_Header_Error_Sts = *BLANK;

 // PAR.TH Detail Error Sts = CND.No
 PAR.TH_Detail_Error_Sts = 'N';

 // PAR.TH Kill Balancing Sts = CND.Balance
 PAR.TH_Kill_Balancing_Sts = 'B';

 EXECUTE FUNCTION(Upd PHA Yld/LeanPrm   RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1226785;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_PHA_Yield_Percent);
 PARAMETER(PAR.TH_PHA_Lean_Prm_Crc_CWT);
 //?Validate Hot Weight and Balance Tattoo
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.TH Header Error Sts = CND.Header Error
 PAR.TH_Header_Error_Sts = 'E';

 // PAR.TH Detail Error Sts = CND.Yes
 PAR.TH_Detail_Error_Sts = 'Y';

 // PAR.TH Kill Balancing Sts = CND.Error
 PAR.TH_Kill_Balancing_Sts = 'E';

 EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(999999);
 PARAMETER('H');
 PARAMETER('HWA');
 PARAMETER('Hot Wgt for Adds Invalid');
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.RS_Record_Status);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  CASE;

  // IF PAR.KV Error Description is Entered
  IF PAR.KV_Error_Description <> *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
  PARAMETER(PAR.KV_Error_Code);
  PARAMETER(DB1.KV_Error_Description);
  {
   //?USER: Process Data record

   // PAR.EV Description = DB1.EV Description
   PAR.EV_Description = DB1.EV_Description;

  }

  ENDIF;

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDIF;

}


//?Create Eval Trans records.
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.TH Header Error Sts = CND.Header Error
LCL.TH_Header_Error_Sts = 'E';

// LCL.TH Detail Error Sts = CND.Yes
LCL.TH_Detail_Error_Sts = 'Y';

// LCL.TH Kill Balancing Sts = CND.Error
LCL.TH_Kill_Balancing_Sts = 'E';

EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(999998);
PARAMETER('H');
PARAMETER('PHA');
PARAMETER('Producer Hist Not Avail');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.RS_Record_Status);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 CASE;

 // IF PAR.KV Error Description is Entered
 IF PAR.KV_Error_Description <> *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
 PARAMETER(PAR.KV_Error_Code);
 PARAMETER(DB1.KV_Error_Description);
 {
  //?USER: Process Data record

  // PAR.EV Description = DB1.EV Description
  PAR.EV_Description = DB1.EV_Description;

 }

 ENDIF;

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(999999);
PARAMETER('H');
PARAMETER('PID');
PARAMETER('% Identified > 105%');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.RS_Record_Status);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 CASE;

 // IF PAR.KV Error Description is Entered
 IF PAR.KV_Error_Description <> *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
 PARAMETER(PAR.KV_Error_Code);
 PARAMETER(DB1.KV_Error_Description);
 {
  //?USER: Process Data record

  // PAR.EV Description = DB1.EV Description
  PAR.EV_Description = DB1.EV_Description;

 }

 ENDIF;

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


ENDIF;

// LCL.Hold Over Bal Sts USR = CND.Yes
LCL.Hold_Over_Bal_Sts_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?*************************   PKD   *************************
CASE;

// IF PAR.TH Held Over Record is Yes
IF PAR.TH_Held_Over_Record = 'Y';

// PAR.Balance First Day USR = CND.Yes
PAR.Balance_First_Day_USR = 'Y';

ENDIF;

//?02/18/05 PKD COmmented out.
ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.TH Held Over Record is Yes
IF PAR.TH_Held_Over_Record = 'Y';

// PAR.Balance First Day USR = CND.Yes
PAR.Balance_First_Day_USR = 'Y';

ENDIF;

ENDIF;

//?Balance Held Over is Not > 1 Day and Not Held Overs
CASE;

// IF LCL.Hold Over Bal Sts USR is No
IF LCL.Hold_Over_Bal_Sts_USR = 'N';

//?Balance Tattoo
CASE;

// IF PAR.TH Held Over is *Zeros
IF PAR.TH_Held_Over = *ZERO;

// OR LCL.TH Bal to Kill Gen is User Requested Generated
OR LCL.TH_Bal_to_Kill_Gen = 'U';

//?08/18/04 SLM HPEBAL - External and Internals Hogs with same
//?                      validation rules
//?*------- External and Internal Balance Rules -------*
//?Percent Identified & Percent Analyzed Parameter Balancing
CASE;

// IF LCL.Net Head Usr is GT Zero
IF LCL.Net_Head_Usr > *ZERO;

CASE;

// IF PAR.Bal w/History is Prior Week History
IF PAR.Bal_w_History = 'P';

// LCL.TH PHA Add Type = PAR.TH PHA Add Type
LCL.TH_PHA_Add_Type = PAR.TH_PHA_Add_Type;

// LCL.TH PHA Add Reason = PAR.TH PHA Add Reason
LCL.TH_PHA_Add_Reason = PAR.TH_PHA_Add_Reason;

// LCL.TH PHA Average Type = PAR.TH PHA Average Type
LCL.TH_PHA_Average_Type = PAR.TH_PHA_Average_Type;

// LCL.PH GA Avg Live Wgt = PAR.PH GA Avg Live Wgt
LCL.PH_GA_Avg_Live_Wgt = PAR.PH_GA_Avg_Live_Wgt;

// LCL.TH PHA Yield Percent = PAR.PH GA Adjusted Yield%
LCL.TH_PHA_Yield_Percent = PAR.PH_GA_Adjusted_Yield;

// LCL.TH PHA Lean Prm /Crc CWT = PAR.PH GA Lean Prm /Carc CWT
LCL.TH_PHA_Lean_Prm_Crc_CWT = PAR.PH_GA_Lean_Prm_Carc_CWT;

// LCL.TH PHA Sort Disc Fctr % = PAR.PH GA Avg Srt Disc Fctr * CON.100 *Rounded
LCL.TH_PHA_Sort_Disc_Fctr = PAR.PH_GA_Avg_Srt_Disc_Fctr * 100 'H';

// LCL.PH GA Avg Backfat = PAR.PH GA Avg Backfat
LCL.PH_GA_Avg_Backfat = PAR.PH_GA_Avg_Backfat;

// LCL.PH GA Avg Loin Eye = PAR.PH GA Avg Loin Eye
LCL.PH_GA_Avg_Loin_Eye = PAR.PH_GA_Avg_Loin_Eye;

// LCL.PH GA Avg Light Ref = PAR.PH GA Avg Light Ref
LCL.PH_GA_Avg_Light_Ref = PAR.PH_GA_Avg_Light_Ref;

// LCL.PH GA Avg Lean% = PAR.PH GA Avg Lean%
LCL.PH_GA_Avg_Lean = PAR.PH_GA_Avg_Lean;

// Retrieve message - '2WK/4WK history not available. Paid on last load delivered.'
LCL.THC_Comment = RTVMSG(PRK0933);
PARAMETER(*ZERO);

EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.THC_Comment_Line);
PARAMETER(LCL.THC_Comment);
PARAMETER('P');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 {
  //?USER: Processing if Data record not found

  // PAR.THC Comment Line = CON.1
  PAR.THC_Comment_Line = 1;

  //?USER: Process Data record

  // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
  PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 PARAMETER(PAR.THC_Comment);
 PARAMETER(PAR.THC_Comment_Type);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


EXECUTE FUNCTION(Bal Eval Trans w/PHA  IF) TYPE(EXCINTFUN)                      AB1226549;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.TH_Head_Killed);
PARAMETER(LCL.TH_Hot_Wgt);
PARAMETER(LCL.TH_Tot_Loin_Eye_Depth);
PARAMETER(LCL.TH_Tot_Backfat_Inches);
PARAMETER(LCL.TH_Tot_Light_Reflectance);
PARAMETER(PAR.TH_Avg_Live_Wgt);
PARAMETER(LCL.TH_Avg_Hot_Wgt);
PARAMETER(PAR.TH_Recalc_Live_Wgt);
PARAMETER(LCL.TH_Header_Error_Sts);
PARAMETER(LCL.TH_Detail_Error_Sts);
PARAMETER(LCL.TH_Kill_Balancing_Sts);
PARAMETER(PAR.TH_Source_Type);
PARAMETER(PAR.TH_Schedule_Kill_Shift);
PARAMETER(LCL.TH_Percent_Identified);
PARAMETER(LCL.TH_Percent_Accepted);
PARAMETER(LCL.TH_PHA_Head_Adds);
PARAMETER(LCL.TH_PHA_Add_Type);
PARAMETER(LCL.TH_PHA_Average_Type);
PARAMETER(LCL.TH_PHA_Add_Reason);
PARAMETER(LCL.TH_PHA_Yield_Percent);
PARAMETER(LCL.TH_PHA_Lean_Prm_Crc_CWT);
PARAMETER(LCL.PH_GA_Avg_Live_Wgt);
PARAMETER(LCL.PH_GA_Avg_Lean);
PARAMETER(LCL.PH_GA_Avg_Backfat);
PARAMETER(LCL.PH_GA_Avg_Loin_Eye);
PARAMETER(LCL.PH_GA_Avg_Light_Ref);
PARAMETER(LCL.Net_Head_Usr);
PARAMETER(LCL.Hot_Wgt_Lean_Accum_Usr);
PARAMETER(LCL.Hot_Wgt_Backf_Accum_Usr);
PARAMETER(LCL.Hot_Wgt_Loine_Accum_Usr);
PARAMETER(LCL.Hot_Wgt_LghtR_Accum_Usr);
PARAMETER(LCL.CDI_Shipper_User);
{
 //?Execute internal function

 // LCL.TH Avg Live Wgt = PAR.TH Avg Live Wgt
 LCL.TH_Avg_Live_Wgt = PAR.TH_Avg_Live_Wgt;

 //?* 02/20/04 PKD added check for Recalc Live Weight.
 //?06/04/04 SLM HPEBAL - Remove the Calculation of Avg Live Wgt
 //?                    - Moved the Adjust/Add Type as the first step
 //?                    - Calculate the Et Hot Wgt, write a Pay note
 //?                    - message to the tattoo header comments
 //?                    - combine the calculation of ET Hot Wgt
 //?                    - with the messaging
 //?03/28/05 SLM TFP0001 -
 //?                     - The payment on Hold Over for more then 1 day
 //?                     - Triumph will need to pay on the Producer
 //?                     - avg live weight.
 //?Adjust/Add Type
 CASE;

 // IF PAR.TH PHA Average Type is 2 Week
 IF PAR.TH_PHA_Average_Type = '2WK';

 // PAR.ET Adjust/Add Type = CND.Add w/2 Week Average
 PAR.ET_Adjust_Add_Type = '2WK';

 //?Adjust/Add Type
 // IF PAR.TH PHA Average Type is 4 Week
 IF PAR.TH_PHA_Average_Type = '4WK';

 // PAR.ET Adjust/Add Type = CND.Add w/4 Week Average
 PAR.ET_Adjust_Add_Type = '4WK';

 //?Adjust/Add Type
 // IF PAR.TH PHA Average Type is Available History
 IF PAR.TH_PHA_Average_Type = 'HST';

 // PAR.ET Adjust/Add Type = CND.Add w/Available History
 PAR.ET_Adjust_Add_Type = 'HST';

 ENDIF;

 //?          - Cal of ET Hot Wgt
 //?               - If the Avg Live Wgt = Zero or Recalc Lv Wgt
 //?                  and If the Tattoo Avg Hot Wgt > 0 then use the
 //?                         the Tattoo Avg Hot Wgt
 //?                      else use the GA Live Wgt to recalculate the
 //?                      the ET Hot Wgt
 //?               - If the Avg Live Wgt NOT = Zero or NOT Recalc Lv Wgt
 //?                      use the Tattoo Header Avg Live Wgt to
 //?                      calculate the ET HOT Weight.
 //?Calculate Hot Weight
 CASE;

 // IF PAR.TH Avg Live Wgt is EQ Zero
 IF PAR.TH_Avg_Live_Wgt = *ZERO;

 // OR PAR.TH Recalc Live Wgt is Greater than 0
 OR PAR.TH_Recalc_Live_Wgt > *ZERO;

 //?06/04/04 SLM HPEBAL Remove the Th Source Type is Internal
 //?06/25/04 PKD Only use the Carcass Weight if the Percent Accepted
 //?             is between 75 and 100 percent.
 //?03/28/05 SLM TFP0001 - Add the selection for Triumph on which
 //?                       calculation should be used.
 //?                       Guymon will pay on the lot average
 //?                       Triumph will not pay on the lot average
 //?ET Hot Wgt
 CASE;

 // IF PAR.TH Avg Hot Wgt is GT Zero
 IF PAR.TH_Avg_Hot_Wgt > *ZERO;

 // AND PAR.TH Percent Accepted is GE 75%
 AND ( PAR.TH_Percent_Accepted >= 75.00;

 // AND PAR.TH Percent Accepted is LE 100%
 AND PAR.TH_Percent_Accepted <= 100 );

 // AND PAR.CDI Shipper User is Guymon
 AND PAR.CDI_Shipper_User = *BLANK;

 //?The Tattoo Avg Hot Wgt (Lot) will be used
 // PAR.ET Hot Wgt = PAR.TH Avg Hot Wgt
 PAR.ET_Hot_Wgt = PAR.TH_Avg_Hot_Wgt;

 // PAR.ET Adjust/Add Type = CND.Add w/Lot Avg Hot Wft
 PAR.ET_Adjust_Add_Type = 'LOT';

 // Retrieve message - 'Hot Weight (LOT) based on Lot Average Hot Weight.'
 LCL.THC_Comment = RTVMSG(PRK1116);

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(LCL.THC_Comment_Line);
 PARAMETER(LCL.THC_Comment);
 PARAMETER('P');
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  {
   //?USER: Processing if Data record not found

   // PAR.THC Comment Line = CON.1
   PAR.THC_Comment_Line = 1;

   //?USER: Process Data record

   // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
   PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  PARAMETER(PAR.THC_Comment);
  PARAMETER(PAR.THC_Comment_Type);
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER(PAR.RS_Record_Status);
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  PARAMETER(PAR.RS_User_Added);
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

 }

 //?ET Hot Wgt
 // IF *OTHERWISE
 IF *OTHERWISE;

 // ET Hot Weight using PH GA
 PAR.ET_Hot_Wgt = PAR.PH_GA_Avg_Live_Wgt * ( PAR.TH_PHA_Yield_Percent / 100 'H' ) 'H';

 // Retrieve message - 'Hot Weight based on Producer historical Average Live'
 LCL.THC_Comment = RTVMSG(PRK1117);

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(LCL.THC_Comment_Line);
 PARAMETER(LCL.THC_Comment);
 PARAMETER('P');
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  {
   //?USER: Processing if Data record not found

   // PAR.THC Comment Line = CON.1
   PAR.THC_Comment_Line = 1;

   //?USER: Process Data record

   // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
   PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  PARAMETER(PAR.THC_Comment);
  PARAMETER(PAR.THC_Comment_Type);
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER(PAR.RS_Record_Status);
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  PARAMETER(PAR.RS_User_Added);
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

 }

 // Retrieve message - 'Weight and Average Adjusted Yield.'
 LCL.THC_Comment = RTVMSG(PRK1118);

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(LCL.THC_Comment_Line);
 PARAMETER(LCL.THC_Comment);
 PARAMETER('P');
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  {
   //?USER: Processing if Data record not found

   // PAR.THC Comment Line = CON.1
   PAR.THC_Comment_Line = 1;

   //?USER: Process Data record

   // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
   PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  PARAMETER(PAR.THC_Comment);
  PARAMETER(PAR.THC_Comment_Type);
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER(PAR.RS_Record_Status);
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  PARAMETER(PAR.RS_User_Added);
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

 }

 ENDIF;

 //?08/13/04 PKD Moved the creating of comments out of PHA processing
 //?             The comments need to be created for all types of
 //?             balancing, not just @ PHA.
 //?Calculate Hot Weight
 // IF *OTHERWISE
 IF *OTHERWISE;

 // ET Hot Wgt Frm Tatto ALW
 PAR.ET_Hot_Wgt = PAR.TH_Avg_Live_Wgt * ( PAR.TH_PHA_Yield_Percent / 100 'H' ) 'H';

 //?08/13/04 PKD Moved the creating of comments out of PHA processing
 //?             The comments need to be created for all types of
 //?             balancing, not just @ PHA.
 ENDIF;

 //?08/19/04 PKD Validate the Hot Weight with Evaluation Validation
 //?             Hot Weight range.  If the Hot Weight not within range
 //?             then do not add carcasses and mark the tattoo with
 //?             error.
 EXECUTE FUNCTION(Rtv Hot Weight Range  IF) TYPE(EXCINTFUN)                      AB1169711;
 PARAMETER(LCL.EV_Minimum);
 PARAMETER(LCL.EV_Maximum);
 {
  //?Execute internal function

  // PAR.EV Validation Code = CND.Carcass is Light Weight
  PAR.EV_Validation_Code = 'CLT';

  EXECUTE FUNCTION(Rtv Min/Max Values    RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1169636;
  PARAMETER(PAR.EV_Validation_Code);
  PARAMETER(WRK.EV_Minimum);
  PARAMETER(PAR.EV_Minimum);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.EV Validation Code = CND.Carcass has Double Weight
  PAR.EV_Validation_Code = 'CDB';

  EXECUTE FUNCTION(Rtv Min/Max Values    RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1169636;
  PARAMETER(PAR.EV_Validation_Code);
  PARAMETER(PAR.EV_Maximum);
  PARAMETER(WRK.EV_Maximum);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

 }

 //?Validate Hot Weight and Balance Tattoo
 CASE;

 // IF PAR.ET Hot Wgt is GT Zero
 IF PAR.ET_Hot_Wgt > *ZERO;

 //?Number of Carcasses to Add
 CASE;

 // IF PAR.TH PHA Add Type is Entire Tattoo
 IF PAR.TH_PHA_Add_Type = 'E';

 //?Pay Entire Tattoo w/PHA, then Purge All Transactions.
 EXECUTE FUNCTION(Bal Flag f/Purge All  RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1226536;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TH_Head_Killed);
 PARAMETER(PAR.TH_Hot_Wgt);
 PARAMETER(PAR.TH_Tot_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Tot_Backfat_Inches);
 PARAMETER(PAR.TH_Tot_Light_Reflectance);
 PARAMETER(PAR.Hot_Wgt_Lean_Accum_Usr);
 PARAMETER(PAR.Hot_Wgt_Backf_Accum_Usr);
 PARAMETER(PAR.Hot_Wgt_Loine_Accum_Usr);
 PARAMETER(PAR.Hot_Wgt_LghtR_Accum_Usr);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.RS Record Status is Active
  IF DB1.RS_Record_Status = 'A';

  EXECUTE FUNCTION(Chg Record Status     CH) TYPE(CHGOBJ) FILE(PKBVCPP)           AB1226537;
  PARAMETER(DB1.ET_Company_Number);
  PARAMETER(DB1.ET_Kill_Date);
  PARAMETER(DB1.ET_Scale_Sequence_Number);
  PARAMETER(DB1.ET_Carcass_Number);
  PARAMETER(DB1.ET_Carcass_Number_Insert);
  PARAMETER('D');
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  //?Subtract from Totals
  DO;

  //?Accumulate totals
  // PAR.TH Head Killed = PAR.TH Head Killed - CON.1
  PAR.TH_Head_Killed = PAR.TH_Head_Killed - 1;

  // PAR.TH Tot Loin Eye Depth = PAR.TH Tot Loin Eye Depth - DB1.ET Loin-Eye Depth Inches
  PAR.TH_Tot_Loin_Eye_Depth = PAR.TH_Tot_Loin_Eye_Depth - DB1.ET_Loin_Eye_Depth_Inches;

  // PAR.TH Tot Backfat Inches = PAR.TH Tot Backfat Inches - DB1.ET Backfat Thickness Inch
  PAR.TH_Tot_Backfat_Inches = PAR.TH_Tot_Backfat_Inches - DB1.ET_Backfat_Thickness_Inch;

  // PAR.TH Tot Light Reflectance = PAR.TH Tot Light Reflectance - DB1.ET Light Reflectance
  PAR.TH_Tot_Light_Reflectance = PAR.TH_Tot_Light_Reflectance - DB1.ET_Light_Reflectance;

  // PAR.TH Hot Wgt = PAR.TH Hot Wgt - DB1.ET Hot Wgt
  PAR.TH_Hot_Wgt = PAR.TH_Hot_Wgt - DB1.ET_Hot_Wgt;

  //?Weighted accumulated Lean%
  // LCL.Hot Wgt/Weight Ext Usr = DB1.ET Lean Percent NPPC * DB1.ET Hot Wgt *
  LCL.Hot_Wgt_Weight_Ext_Usr = DB1.ET_Lean_Percent_NPPC * DB1.ET_Hot_Wgt;

  // PAR.Hot Wgt/Lean % Accum Usr = PAR.Hot Wgt/Lean % Accum Usr - LCL.Hot Wgt/Weight Ext Usr
  PAR.Hot_Wgt_Lean_Accum_Usr = PAR.Hot_Wgt_Lean_Accum_Usr - LCL.Hot_Wgt_Weight_Ext_Usr;

  //?Weighted accumulated Backfat
  // LCL.Hot Wgt/Weight Ext Usr = DB1.ET Backfat Thickness Inch * DB1.ET Hot Wgt *
  LCL.Hot_Wgt_Weight_Ext_Usr = DB1.ET_Backfat_Thickness_Inch * DB1.ET_Hot_Wgt;

  // PAR.Hot Wgt/Backf Accum Usr = PAR.Hot Wgt/Backf Accum Usr - LCL.Hot Wgt/Weight Ext Usr
  PAR.Hot_Wgt_Backf_Accum_Usr = PAR.Hot_Wgt_Backf_Accum_Usr - LCL.Hot_Wgt_Weight_Ext_Usr;

  //?Weighted accumulated Loin Eye
  // LCL.Hot Wgt/Weight Ext Usr = DB1.ET Loin-Eye Depth Inches * DB1.ET Hot Wgt *
  LCL.Hot_Wgt_Weight_Ext_Usr = DB1.ET_Loin_Eye_Depth_Inches * DB1.ET_Hot_Wgt;

  // PAR.Hot Wgt/Loine Accum Usr = PAR.Hot Wgt/Loine Accum Usr - LCL.Hot Wgt/Weight Ext Usr
  PAR.Hot_Wgt_Loine_Accum_Usr = PAR.Hot_Wgt_Loine_Accum_Usr - LCL.Hot_Wgt_Weight_Ext_Usr;

  //?Weighted accumulated Light Refl
  // LCL.Hot Wgt/Weight Ext Usr = DB1.ET Light Reflectance * DB1.ET Hot Wgt *
  LCL.Hot_Wgt_Weight_Ext_Usr = DB1.ET_Light_Reflectance * DB1.ET_Hot_Wgt;

  // PAR.Hot Wgt/LghtR Accum Usr = PAR.Hot Wgt/LghtR Accum Usr - LCL.Hot Wgt/Weight Ext Usr
  PAR.Hot_Wgt_LghtR_Accum_Usr = PAR.Hot_Wgt_LghtR_Accum_Usr - LCL.Hot_Wgt_Weight_Ext_Usr;

  ENDDO;

  ENDIF;

 }

 // LCL.Carcass Count USR = PAR.Net Head Usr
 LCL.Carcass_Count_USR = PAR.Net_Head_Usr;

 // PAR.TH Head Killed = CON.*ZERO
 PAR.TH_Head_Killed = *ZERO;

 //?Number of Carcasses to Add
 // IF PAR.TH PHA Add Type is Balance To Kill
 IF PAR.TH_PHA_Add_Type = 'B';

 // LCL.Carcass Count USR = PAR.Net Head Usr - PAR.TH Head Killed
 LCL.Carcass_Count_USR = PAR.Net_Head_Usr - PAR.TH_Head_Killed;

 ENDIF;

 //?06/04/04 SLM HPEBAL - * out the Adjust/add Type Move at top
 //?                      and the hot wgt calc has also been chg
 //?                      and moved
 // PAR.ET Backfat Thickness Inch = PAR.PH GA Avg Backfat
 PAR.ET_Backfat_Thickness_Inch = PAR.PH_GA_Avg_Backfat;

 // PAR.ET Loin-Eye Depth Inches = PAR.PH GA Avg Loin Eye
 PAR.ET_Loin_Eye_Depth_Inches = PAR.PH_GA_Avg_Loin_Eye;

 // PAR.ET Light Reflectance = PAR.PH GA Avg Light Ref
 PAR.ET_Light_Reflectance = PAR.PH_GA_Avg_Light_Ref;

 // PAR.ET Lean Percent NPPC = PAR.PH GA Avg Lean%
 PAR.ET_Lean_Percent_NPPC = PAR.PH_GA_Avg_Lean;

 //?*-------------------------------------------------------------*
 //?* 07/02/01 PKD Needed to calculate the MM Values so the Competitor
 //?*              calculations would calculate the Lean Premium
 //?*              correctly.
 // LCL.Calculate All Usr = CND.Yes
 LCL.Calculate_All_Usr = 'Y';

 // Call program Clc Inch to MM/Lean%FOM.
 CALL PROGRAM(Clc Inch to MM/Lean%FOM) ('PKINMMLP');
 PARAMETER(PAR.ET_Lean_Percent_NPPC);
 PARAMETER(PAR.ET_Backfat_Thickness_Inch);
 PARAMETER(PAR.ET_Loin_Eye_Depth_Inches);
 PARAMETER(PAR.ET_Light_Reflectance);
 PARAMETER(PAR.ET_Backfat_Thickness_MM);
 PARAMETER(PAR.ET_Loineye_Depth_MM);
 PARAMETER(PAR.ET_Light_Reflectance_MM);
 PARAMETER(PAR.ET_Lean_Percent_FOM);
 PARAMETER(LCL.Calculate_All_Usr);

 //?*-------------------------------------------------------------*
 //?* 07/02/01 PKD Changed the parameters to pass in the PAR values
 //?*              instead of zeros for the MM values.
 //?* 05/27/04 SLM HPEBAL Pass in the LCL ET Adjust/Add source
 EXECUTE FUNCTION(Crt Eval Trans Rec    IF) TYPE(EXCINTFUN)                      AB1136539;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(LCL.ET_Scale_Sequence_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Schedule_Kill_Shift);
 PARAMETER(PAR.ET_Hot_Wgt);
 PARAMETER(PAR.ET_Backfat_Thickness_Inch);
 PARAMETER(PAR.ET_Loin_Eye_Depth_Inches);
 PARAMETER(PAR.ET_Lean_Percent_NPPC);
 PARAMETER(PAR.ET_Backfat_Thickness_MM);
 PARAMETER(PAR.ET_Loineye_Depth_MM);
 PARAMETER(PAR.ET_Light_Reflectance_MM);
 PARAMETER(PAR.ET_Lean_Percent_FOM);
 PARAMETER(PAR.ET_Light_Reflectance);
 PARAMETER(WRK.ET_Trim_Area);
 PARAMETER(WRK.ET_Carcass_Sex);
 PARAMETER('B');
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(PAR.ET_Adjust_Add_Type);
 PARAMETER(*BLANK);
 PARAMETER(LCL.ET_Adjust_Add_Source);
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Carcass_Count_USR);
 {
  //?Execute internal function

  // PAR.Carcass number        USR = PAR.Carcass Count USR
  PAR.Carcass_number_USR = PAR.Carcass_Count_USR;

  // DOW PAR.Carcass number        USR is GT Zero
  DOW PAR.Carcass_number_USR > *ZERO;

  EXECUTE FUNCTION(Rtv Eval Next#        RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1135496;
  PARAMETER(PAR.ET_Company_Number);
  PARAMETER(PAR.ET_Kill_Date);
  PARAMETER(PAR.ET_Scale_Sequence_Number);
  {
   //?USER: Processing if Data record not found

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.ET_Scale_Sequence_Number = 1;

   QUIT;

   //?USER: Process Data record

   CASE;

   // IF DB1.ET Scale Sequence Number is Entry Allowed
   IF DB1.ET_Scale_Sequence_Number >= 000001;
   AND DB1.ET_Scale_Sequence_Number <= 699999;

   // PAR.ET Scale Sequence Number = DB1.ET Scale Sequence Number + CON.1
   PAR.ET_Scale_Sequence_Number = DB1.ET_Scale_Sequence_Number + 1;

   QUIT;

   ENDIF;

  }

  EXECUTE FUNCTION(Create Evaluation Transac) TYPE(CRTOBJ) FILE(PKBVCPP)          AB1102931;
  PARAMETER(PAR.ET_Company_Number);
  PARAMETER(PAR.ET_Kill_Date);
  PARAMETER(PAR.ET_Scale_Sequence_Number);
  PARAMETER(PAR.ET_Scale_Sequence_Number);
  PARAMETER(000001);
  PARAMETER(PAR.ET_Tattoo_Number);
  PARAMETER(PAR.ET_Lot);
  PARAMETER(PAR.ET_Shift);
  PARAMETER(PAR.ET_Hot_Wgt);
  PARAMETER(PAR.ET_Backfat_Thickness_Inch);
  PARAMETER(PAR.ET_Loin_Eye_Depth_Inches);
  PARAMETER(PAR.ET_Lean_Percent_NPPC);
  PARAMETER(PAR.ET_Backfat_Thickness_MM);
  PARAMETER(PAR.ET_Loineye_Depth_MM);
  PARAMETER(PAR.ET_Light_Reflectance_MM);
  PARAMETER(PAR.ET_Lean_Percent_FOM);
  PARAMETER(PAR.ET_Light_Reflectance);
  PARAMETER(PAR.ET_Trim_Area);
  PARAMETER(PAR.ET_Carcass_Sex);
  PARAMETER(PAR.ET_Error_Sts);
  PARAMETER(PAR.ET_Record_Add_Del_Sts);
  PARAMETER(PAR.ET_Record_Created_W_Avg);
  PARAMETER(PAR.ET_Record_Created_Status);
  PARAMETER(PAR.ET_User_Error_Override);
  PARAMETER(PAR.ET_Adjust_Add_Type);
  PARAMETER(PAR.ET_Broken_Back_Sts);
  PARAMETER(PAR.ET_Unused_Sts_2);
  PARAMETER(PAR.ET_Adjust_Add_Source);
  PARAMETER(PAR.ET_Unused_Sts_4);
  PARAMETER(PAR.ET_Unused_Sts_5);
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.RU_Date);
  PARAMETER(PAR.RU_Time);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(*MISSING);
   PARAMETER(*MISSING);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  // PAR.Carcass number        USR = PAR.Carcass number        USR - CON.1
  PAR.Carcass_number_USR = PAR.Carcass_number_USR - 1;

  ENDDO;

 }

 //?*-------------------------------------------------------------*
 // PAR.TH PHA Head Adds = LCL.Carcass Count USR
 PAR.TH_PHA_Head_Adds = LCL.Carcass_Count_USR;

 //?Accumulate Totals
 DO;

 //?Accumulate totals
 // PAR.TH Head Killed = PAR.TH Head Killed + LCL.Carcass Count USR
 PAR.TH_Head_Killed = PAR.TH_Head_Killed + LCL.Carcass_Count_USR;

 // TH Hot Wgt
 PAR.TH_Hot_Wgt = PAR.TH_Hot_Wgt + ( PAR.ET_Hot_Wgt * LCL.Carcass_Count_USR );

 // TH Tot Loin Eye Depth
 PAR.TH_Tot_Loin_Eye_Depth = PAR.TH_Tot_Loin_Eye_Depth + ( PAR.ET_Loin_Eye_Depth_Inches
 * LCL.Carcass_Count_USR );

 // TH Tot Backfat Inches
 PAR.TH_Tot_Backfat_Inches = PAR.TH_Tot_Backfat_Inches + ( PAR.ET_Backfat_Thickness_Inch
 * LCL.Carcass_Count_USR );

 // TH Tot Light Reflectance
 PAR.TH_Tot_Light_Reflectance = PAR.TH_Tot_Light_Reflectance + ( PAR.ET_Light_Reflectance
 * LCL.Carcass_Count_USR );

 //?Weighted accumulated Lean%
 // Lean Percent
 LCL.Hot_Wgt_Weight_Ext_Usr = ( PAR.ET_Lean_Percent_NPPC * PAR.ET_Hot_Wgt )
 * LCL.Carcass_Count_USR;

 // PAR.Hot Wgt/Lean % Accum Usr = LCL.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/Lean % Accum Usr
 PAR.Hot_Wgt_Lean_Accum_Usr = LCL.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_Lean_Accum_Usr;

 //?Weighted accumulated Backfat
 // Backfat Thickness Inch
 LCL.Hot_Wgt_Weight_Ext_Usr = ( PAR.ET_Backfat_Thickness_Inch * PAR.ET_Hot_Wgt )
 * LCL.Carcass_Count_USR;

 // PAR.Hot Wgt/Backf Accum Usr = LCL.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/Backf Accum Usr
 PAR.Hot_Wgt_Backf_Accum_Usr = LCL.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_Backf_Accum_Usr;

 //?Weighted accumulated Loin Eye
 // Loin-Eye Depth Inches
 LCL.Hot_Wgt_Weight_Ext_Usr = ( PAR.ET_Loin_Eye_Depth_Inches * PAR.ET_Hot_Wgt )
 * LCL.Carcass_Count_USR;

 // PAR.Hot Wgt/Loine Accum Usr = LCL.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/Loine Accum Usr
 PAR.Hot_Wgt_Loine_Accum_Usr = LCL.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_Loine_Accum_Usr;

 //?Weighted accumulated Light Refl
 // Light Reflectances
 LCL.Hot_Wgt_Weight_Ext_Usr = ( PAR.ET_Light_Reflectance * PAR.ET_Hot_Wgt )
 * LCL.Carcass_Count_USR;

 // PAR.Hot Wgt/LghtR Accum Usr = LCL.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/LghtR Accum Usr
 PAR.Hot_Wgt_LghtR_Accum_Usr = LCL.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_LghtR_Accum_Usr;

 ENDDO;

 // PAR.TH Header Error Sts = CND.No Header Error
 PAR.TH_Header_Error_Sts = *BLANK;

 // PAR.TH Detail Error Sts = CND.No
 PAR.TH_Detail_Error_Sts = 'N';

 // PAR.TH Kill Balancing Sts = CND.Balance
 PAR.TH_Kill_Balancing_Sts = 'B';

 EXECUTE FUNCTION(Upd PHA Yld/LeanPrm   RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1226785;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_PHA_Yield_Percent);
 PARAMETER(PAR.TH_PHA_Lean_Prm_Crc_CWT);
 //?Validate Hot Weight and Balance Tattoo
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.TH Header Error Sts = CND.Header Error
 PAR.TH_Header_Error_Sts = 'E';

 // PAR.TH Detail Error Sts = CND.Yes
 PAR.TH_Detail_Error_Sts = 'Y';

 // PAR.TH Kill Balancing Sts = CND.Error
 PAR.TH_Kill_Balancing_Sts = 'E';

 EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(999999);
 PARAMETER('H');
 PARAMETER('HWA');
 PARAMETER('Hot Wgt for Adds Invalid');
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.RS_Record_Status);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  CASE;

  // IF PAR.KV Error Description is Entered
  IF PAR.KV_Error_Description <> *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
  PARAMETER(PAR.KV_Error_Code);
  PARAMETER(DB1.KV_Error_Description);
  {
   //?USER: Process Data record

   // PAR.EV Description = DB1.EV Description
   PAR.EV_Description = DB1.EV_Description;

  }

  ENDIF;

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDIF;

}


// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF LCL.TH Percent Identified is GT 105%
IF LCL.TH_Percent_Identified > 105.00;

// LCL.TH PHA Add Type = CND.Entire Tattoo
LCL.TH_PHA_Add_Type = 'E';

// LCL.TH PHA Add Reason = CND.>105% Identification
LCL.TH_PHA_Add_Reason = 2;

EXECUTE FUNCTION(Rtv GA Prod Hist Avgs RT) TYPE(RTVOBJ) FILE(PKCGCPP)           AB1226508;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.TH_Purchase_Date);
PARAMETER(LCL.PH_Summary_Type);
PARAMETER(LCL.PH_GA_Avg_Live_Wgt);
PARAMETER(LCL.TH_PHA_Yield_Percent);
PARAMETER(LCL.PH_GA_Avg_Lean);
PARAMETER(LCL.PH_GA_Avg_Backfat);
PARAMETER(LCL.PH_GA_Avg_Loin_Eye);
PARAMETER(LCL.PH_GA_Avg_Light_Ref);
PARAMETER(LCL.TH_PHA_Lean_Prm_Crc_CWT);
PARAMETER(LCL.PH_GA_Avg_Srt_Disc_Fctr);
PARAMETER(LCL.History_Avail_STS_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 // PAR.History Avail STS USR = CND.No
 PAR.History_Avail_STS_USR = 'N';

 // LCL.First Time Flag Usr = CND.Yes
 LCL.First_Time_Flag_Usr = 'Y';

 //?USER: Process Data record

 //?First Time Processing
 CASE;

 // IF LCL.First Time Flag Usr is Yes
 IF LCL.First_Time_Flag_Usr = 'Y';

 // LCL.PH Week Ending Date = DB1.PH Week Ending Date
 LCL.PH_Week_Ending_Date = DB1.PH_Week_Ending_Date;

 // LCL.First Time Flag Usr = CND.No
 LCL.First_Time_Flag_Usr = 'N';

 ENDIF;

 CASE;

 // IF DB1.PH Week Ending Date NE LCL.PH Week Ending Date
 IF DB1.PH_Week_Ending_Date <> LCL.PH_Week_Ending_Date;

 QUIT;

 ENDIF;

 CASE;

 // IF DB1.PH Summary Type is 2 Week
 IF DB1.PH_Summary_Type = '2WK';

 CASE;

 // IF DB1.PH GA Head Killed is GE 600
 IF DB1.PH_GA_Head_Killed >= 600;

 MOVE *ALL (To: PAR From: DB1);

 // PAR.History Avail STS USR = CND.Yes
 PAR.History_Avail_STS_USR = 'Y';

 QUIT;

 ENDIF;

 // IF DB1.PH Summary Type is 4 Week
 IF DB1.PH_Summary_Type = '4WK';

 CASE;

 // IF DB1.PH GA Head Killed is GT Zero
 IF DB1.PH_GA_Head_Killed > *ZERO;

 MOVE *ALL (To: PAR From: DB1);

 // PAR.History Avail STS USR = CND.Yes
 PAR.History_Avail_STS_USR = 'Y';

 QUIT;

 ENDIF;

 ENDIF;

}


//?Average Type
CASE;

// IF LCL.PH Summary Type is 2 Week
IF LCL.PH_Summary_Type = '2WK';

// LCL.TH PHA Average Type = CND.2 Week
LCL.TH_PHA_Average_Type = '2WK';

//?Average Type
// IF LCL.PH Summary Type is 4 Week
IF LCL.PH_Summary_Type = '4WK';

// LCL.TH PHA Average Type = CND.4 Week
LCL.TH_PHA_Average_Type = '4WK';

//?Average Type
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.TH PHA Average Type = CND.Available History
LCL.TH_PHA_Average_Type = 'HST';

ENDIF;

// Retrieve message - '> 105% Identification: Entire Lot was paid based on Producer'
LCL.THC_Comment = RTVMSG(PRK0934);
PARAMETER(LCL.TH_PHA_Average_Type);

EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.THC_Comment_Line);
PARAMETER(LCL.THC_Comment);
PARAMETER('P');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 {
  //?USER: Processing if Data record not found

  // PAR.THC Comment Line = CON.1
  PAR.THC_Comment_Line = 1;

  //?USER: Process Data record

  // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
  PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 PARAMETER(PAR.THC_Comment);
 PARAMETER(PAR.THC_Comment_Type);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


// Retrieve message - '2 Week (2WK), 4 Week (4WK), or "last load" (HST) Average.'
LCL.THC_Comment = RTVMSG(PRK0947);

EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.THC_Comment_Line);
PARAMETER(LCL.THC_Comment);
PARAMETER('P');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 {
  //?USER: Processing if Data record not found

  // PAR.THC Comment Line = CON.1
  PAR.THC_Comment_Line = 1;

  //?USER: Process Data record

  // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
  PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 PARAMETER(PAR.THC_Comment);
 PARAMETER(PAR.THC_Comment_Type);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


//?Create Eval Trans records.
CASE;

// IF LCL.History Avail STS USR is Yes
IF LCL.History_Avail_STS_USR = 'Y';

// OR PAR.Bal w/History is Available History
OR PAR.Bal_w_History = 'A';

//?Balance w/Available History
CASE;

// IF PAR.Bal w/History is Available History
IF PAR.Bal_w_History = 'A';

// LCL.PH GA Avg Live Wgt = PAR.PH GA Avg Live Wgt
LCL.PH_GA_Avg_Live_Wgt = PAR.PH_GA_Avg_Live_Wgt;

// LCL.TH PHA Yield Percent = PAR.PH GA Adjusted Yield%
LCL.TH_PHA_Yield_Percent = PAR.PH_GA_Adjusted_Yield;

// LCL.TH PHA Lean Prm /Crc CWT = PAR.PH GA Lean Prm /Carc CWT
LCL.TH_PHA_Lean_Prm_Crc_CWT = PAR.PH_GA_Lean_Prm_Carc_CWT;

// LCL.TH PHA Sort Disc Fctr % = PAR.PH GA Avg Srt Disc Fctr * CON.100 *Rounded
LCL.TH_PHA_Sort_Disc_Fctr = PAR.PH_GA_Avg_Srt_Disc_Fctr * 100 'H';

// LCL.PH GA Avg Backfat = PAR.PH GA Avg Backfat
LCL.PH_GA_Avg_Backfat = PAR.PH_GA_Avg_Backfat;

// LCL.PH GA Avg Loin Eye = PAR.PH GA Avg Loin Eye
LCL.PH_GA_Avg_Loin_Eye = PAR.PH_GA_Avg_Loin_Eye;

// LCL.PH GA Avg Light Ref = PAR.PH GA Avg Light Ref
LCL.PH_GA_Avg_Light_Ref = PAR.PH_GA_Avg_Light_Ref;

// LCL.PH GA Avg Lean% = PAR.PH GA Avg Lean%
LCL.PH_GA_Avg_Lean = PAR.PH_GA_Avg_Lean;

//?Balance w/Available History
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.TH PHA Sort Disc Fctr % = LCL.PH GA Avg Srt Disc Fctr * CON.100 *Rounded
LCL.TH_PHA_Sort_Disc_Fctr = LCL.PH_GA_Avg_Srt_Disc_Fctr * 100 'H';

ENDIF;

EXECUTE FUNCTION(Bal Eval Trans w/PHA  IF) TYPE(EXCINTFUN)                      AB1226549;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.TH_Head_Killed);
PARAMETER(LCL.TH_Hot_Wgt);
PARAMETER(LCL.TH_Tot_Loin_Eye_Depth);
PARAMETER(LCL.TH_Tot_Backfat_Inches);
PARAMETER(LCL.TH_Tot_Light_Reflectance);
PARAMETER(PAR.TH_Avg_Live_Wgt);
PARAMETER(LCL.TH_Avg_Hot_Wgt);
PARAMETER(PAR.TH_Recalc_Live_Wgt);
PARAMETER(LCL.TH_Header_Error_Sts);
PARAMETER(LCL.TH_Detail_Error_Sts);
PARAMETER(LCL.TH_Kill_Balancing_Sts);
PARAMETER(PAR.TH_Source_Type);
PARAMETER(PAR.TH_Schedule_Kill_Shift);
PARAMETER(LCL.TH_Percent_Identified);
PARAMETER(LCL.TH_Percent_Accepted);
PARAMETER(LCL.TH_PHA_Head_Adds);
PARAMETER(LCL.TH_PHA_Add_Type);
PARAMETER(LCL.TH_PHA_Average_Type);
PARAMETER(LCL.TH_PHA_Add_Reason);
PARAMETER(LCL.TH_PHA_Yield_Percent);
PARAMETER(LCL.TH_PHA_Lean_Prm_Crc_CWT);
PARAMETER(LCL.PH_GA_Avg_Live_Wgt);
PARAMETER(LCL.PH_GA_Avg_Lean);
PARAMETER(LCL.PH_GA_Avg_Backfat);
PARAMETER(LCL.PH_GA_Avg_Loin_Eye);
PARAMETER(LCL.PH_GA_Avg_Light_Ref);
PARAMETER(LCL.Net_Head_Usr);
PARAMETER(LCL.Hot_Wgt_Lean_Accum_Usr);
PARAMETER(LCL.Hot_Wgt_Backf_Accum_Usr);
PARAMETER(LCL.Hot_Wgt_Loine_Accum_Usr);
PARAMETER(LCL.Hot_Wgt_LghtR_Accum_Usr);
PARAMETER(LCL.CDI_Shipper_User);
{
 //?Execute internal function

 // LCL.TH Avg Live Wgt = PAR.TH Avg Live Wgt
 LCL.TH_Avg_Live_Wgt = PAR.TH_Avg_Live_Wgt;

 //?* 02/20/04 PKD added check for Recalc Live Weight.
 //?06/04/04 SLM HPEBAL - Remove the Calculation of Avg Live Wgt
 //?                    - Moved the Adjust/Add Type as the first step
 //?                    - Calculate the Et Hot Wgt, write a Pay note
 //?                    - message to the tattoo header comments
 //?                    - combine the calculation of ET Hot Wgt
 //?                    - with the messaging
 //?03/28/05 SLM TFP0001 -
 //?                     - The payment on Hold Over for more then 1 day
 //?                     - Triumph will need to pay on the Producer
 //?                     - avg live weight.
 //?Adjust/Add Type
 CASE;

 // IF PAR.TH PHA Average Type is 2 Week
 IF PAR.TH_PHA_Average_Type = '2WK';

 // PAR.ET Adjust/Add Type = CND.Add w/2 Week Average
 PAR.ET_Adjust_Add_Type = '2WK';

 //?Adjust/Add Type
 // IF PAR.TH PHA Average Type is 4 Week
 IF PAR.TH_PHA_Average_Type = '4WK';

 // PAR.ET Adjust/Add Type = CND.Add w/4 Week Average
 PAR.ET_Adjust_Add_Type = '4WK';

 //?Adjust/Add Type
 // IF PAR.TH PHA Average Type is Available History
 IF PAR.TH_PHA_Average_Type = 'HST';

 // PAR.ET Adjust/Add Type = CND.Add w/Available History
 PAR.ET_Adjust_Add_Type = 'HST';

 ENDIF;

 //?          - Cal of ET Hot Wgt
 //?               - If the Avg Live Wgt = Zero or Recalc Lv Wgt
 //?                  and If the Tattoo Avg Hot Wgt > 0 then use the
 //?                         the Tattoo Avg Hot Wgt
 //?                      else use the GA Live Wgt to recalculate the
 //?                      the ET Hot Wgt
 //?               - If the Avg Live Wgt NOT = Zero or NOT Recalc Lv Wgt
 //?                      use the Tattoo Header Avg Live Wgt to
 //?                      calculate the ET HOT Weight.
 //?Calculate Hot Weight
 CASE;

 // IF PAR.TH Avg Live Wgt is EQ Zero
 IF PAR.TH_Avg_Live_Wgt = *ZERO;

 // OR PAR.TH Recalc Live Wgt is Greater than 0
 OR PAR.TH_Recalc_Live_Wgt > *ZERO;

 //?06/04/04 SLM HPEBAL Remove the Th Source Type is Internal
 //?06/25/04 PKD Only use the Carcass Weight if the Percent Accepted
 //?             is between 75 and 100 percent.
 //?03/28/05 SLM TFP0001 - Add the selection for Triumph on which
 //?                       calculation should be used.
 //?                       Guymon will pay on the lot average
 //?                       Triumph will not pay on the lot average
 //?ET Hot Wgt
 CASE;

 // IF PAR.TH Avg Hot Wgt is GT Zero
 IF PAR.TH_Avg_Hot_Wgt > *ZERO;

 // AND PAR.TH Percent Accepted is GE 75%
 AND ( PAR.TH_Percent_Accepted >= 75.00;

 // AND PAR.TH Percent Accepted is LE 100%
 AND PAR.TH_Percent_Accepted <= 100 );

 // AND PAR.CDI Shipper User is Guymon
 AND PAR.CDI_Shipper_User = *BLANK;

 //?The Tattoo Avg Hot Wgt (Lot) will be used
 // PAR.ET Hot Wgt = PAR.TH Avg Hot Wgt
 PAR.ET_Hot_Wgt = PAR.TH_Avg_Hot_Wgt;

 // PAR.ET Adjust/Add Type = CND.Add w/Lot Avg Hot Wft
 PAR.ET_Adjust_Add_Type = 'LOT';

 // Retrieve message - 'Hot Weight (LOT) based on Lot Average Hot Weight.'
 LCL.THC_Comment = RTVMSG(PRK1116);

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(LCL.THC_Comment_Line);
 PARAMETER(LCL.THC_Comment);
 PARAMETER('P');
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  {
   //?USER: Processing if Data record not found

   // PAR.THC Comment Line = CON.1
   PAR.THC_Comment_Line = 1;

   //?USER: Process Data record

   // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
   PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  PARAMETER(PAR.THC_Comment);
  PARAMETER(PAR.THC_Comment_Type);
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER(PAR.RS_Record_Status);
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  PARAMETER(PAR.RS_User_Added);
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

 }

 //?ET Hot Wgt
 // IF *OTHERWISE
 IF *OTHERWISE;

 // ET Hot Weight using PH GA
 PAR.ET_Hot_Wgt = PAR.PH_GA_Avg_Live_Wgt * ( PAR.TH_PHA_Yield_Percent / 100 'H' ) 'H';

 // Retrieve message - 'Hot Weight based on Producer historical Average Live'
 LCL.THC_Comment = RTVMSG(PRK1117);

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(LCL.THC_Comment_Line);
 PARAMETER(LCL.THC_Comment);
 PARAMETER('P');
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  {
   //?USER: Processing if Data record not found

   // PAR.THC Comment Line = CON.1
   PAR.THC_Comment_Line = 1;

   //?USER: Process Data record

   // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
   PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  PARAMETER(PAR.THC_Comment);
  PARAMETER(PAR.THC_Comment_Type);
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER(PAR.RS_Record_Status);
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  PARAMETER(PAR.RS_User_Added);
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

 }

 // Retrieve message - 'Weight and Average Adjusted Yield.'
 LCL.THC_Comment = RTVMSG(PRK1118);

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(LCL.THC_Comment_Line);
 PARAMETER(LCL.THC_Comment);
 PARAMETER('P');
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  {
   //?USER: Processing if Data record not found

   // PAR.THC Comment Line = CON.1
   PAR.THC_Comment_Line = 1;

   //?USER: Process Data record

   // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
   PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  PARAMETER(PAR.THC_Comment);
  PARAMETER(PAR.THC_Comment_Type);
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER(PAR.RS_Record_Status);
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  PARAMETER(PAR.RS_User_Added);
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

 }

 ENDIF;

 //?08/13/04 PKD Moved the creating of comments out of PHA processing
 //?             The comments need to be created for all types of
 //?             balancing, not just @ PHA.
 //?Calculate Hot Weight
 // IF *OTHERWISE
 IF *OTHERWISE;

 // ET Hot Wgt Frm Tatto ALW
 PAR.ET_Hot_Wgt = PAR.TH_Avg_Live_Wgt * ( PAR.TH_PHA_Yield_Percent / 100 'H' ) 'H';

 //?08/13/04 PKD Moved the creating of comments out of PHA processing
 //?             The comments need to be created for all types of
 //?             balancing, not just @ PHA.
 ENDIF;

 //?08/19/04 PKD Validate the Hot Weight with Evaluation Validation
 //?             Hot Weight range.  If the Hot Weight not within range
 //?             then do not add carcasses and mark the tattoo with
 //?             error.
 EXECUTE FUNCTION(Rtv Hot Weight Range  IF) TYPE(EXCINTFUN)                      AB1169711;
 PARAMETER(LCL.EV_Minimum);
 PARAMETER(LCL.EV_Maximum);
 {
  //?Execute internal function

  // PAR.EV Validation Code = CND.Carcass is Light Weight
  PAR.EV_Validation_Code = 'CLT';

  EXECUTE FUNCTION(Rtv Min/Max Values    RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1169636;
  PARAMETER(PAR.EV_Validation_Code);
  PARAMETER(WRK.EV_Minimum);
  PARAMETER(PAR.EV_Minimum);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.EV Validation Code = CND.Carcass has Double Weight
  PAR.EV_Validation_Code = 'CDB';

  EXECUTE FUNCTION(Rtv Min/Max Values    RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1169636;
  PARAMETER(PAR.EV_Validation_Code);
  PARAMETER(PAR.EV_Maximum);
  PARAMETER(WRK.EV_Maximum);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

 }

 //?Validate Hot Weight and Balance Tattoo
 CASE;

 // IF PAR.ET Hot Wgt is GT Zero
 IF PAR.ET_Hot_Wgt > *ZERO;

 //?Number of Carcasses to Add
 CASE;

 // IF PAR.TH PHA Add Type is Entire Tattoo
 IF PAR.TH_PHA_Add_Type = 'E';

 //?Pay Entire Tattoo w/PHA, then Purge All Transactions.
 EXECUTE FUNCTION(Bal Flag f/Purge All  RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1226536;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TH_Head_Killed);
 PARAMETER(PAR.TH_Hot_Wgt);
 PARAMETER(PAR.TH_Tot_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Tot_Backfat_Inches);
 PARAMETER(PAR.TH_Tot_Light_Reflectance);
 PARAMETER(PAR.Hot_Wgt_Lean_Accum_Usr);
 PARAMETER(PAR.Hot_Wgt_Backf_Accum_Usr);
 PARAMETER(PAR.Hot_Wgt_Loine_Accum_Usr);
 PARAMETER(PAR.Hot_Wgt_LghtR_Accum_Usr);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.RS Record Status is Active
  IF DB1.RS_Record_Status = 'A';

  EXECUTE FUNCTION(Chg Record Status     CH) TYPE(CHGOBJ) FILE(PKBVCPP)           AB1226537;
  PARAMETER(DB1.ET_Company_Number);
  PARAMETER(DB1.ET_Kill_Date);
  PARAMETER(DB1.ET_Scale_Sequence_Number);
  PARAMETER(DB1.ET_Carcass_Number);
  PARAMETER(DB1.ET_Carcass_Number_Insert);
  PARAMETER('D');
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  //?Subtract from Totals
  DO;

  //?Accumulate totals
  // PAR.TH Head Killed = PAR.TH Head Killed - CON.1
  PAR.TH_Head_Killed = PAR.TH_Head_Killed - 1;

  // PAR.TH Tot Loin Eye Depth = PAR.TH Tot Loin Eye Depth - DB1.ET Loin-Eye Depth Inches
  PAR.TH_Tot_Loin_Eye_Depth = PAR.TH_Tot_Loin_Eye_Depth - DB1.ET_Loin_Eye_Depth_Inches;

  // PAR.TH Tot Backfat Inches = PAR.TH Tot Backfat Inches - DB1.ET Backfat Thickness Inch
  PAR.TH_Tot_Backfat_Inches = PAR.TH_Tot_Backfat_Inches - DB1.ET_Backfat_Thickness_Inch;

  // PAR.TH Tot Light Reflectance = PAR.TH Tot Light Reflectance - DB1.ET Light Reflectance
  PAR.TH_Tot_Light_Reflectance = PAR.TH_Tot_Light_Reflectance - DB1.ET_Light_Reflectance;

  // PAR.TH Hot Wgt = PAR.TH Hot Wgt - DB1.ET Hot Wgt
  PAR.TH_Hot_Wgt = PAR.TH_Hot_Wgt - DB1.ET_Hot_Wgt;

  //?Weighted accumulated Lean%
  // LCL.Hot Wgt/Weight Ext Usr = DB1.ET Lean Percent NPPC * DB1.ET Hot Wgt *
  LCL.Hot_Wgt_Weight_Ext_Usr = DB1.ET_Lean_Percent_NPPC * DB1.ET_Hot_Wgt;

  // PAR.Hot Wgt/Lean % Accum Usr = PAR.Hot Wgt/Lean % Accum Usr - LCL.Hot Wgt/Weight Ext Usr
  PAR.Hot_Wgt_Lean_Accum_Usr = PAR.Hot_Wgt_Lean_Accum_Usr - LCL.Hot_Wgt_Weight_Ext_Usr;

  //?Weighted accumulated Backfat
  // LCL.Hot Wgt/Weight Ext Usr = DB1.ET Backfat Thickness Inch * DB1.ET Hot Wgt *
  LCL.Hot_Wgt_Weight_Ext_Usr = DB1.ET_Backfat_Thickness_Inch * DB1.ET_Hot_Wgt;

  // PAR.Hot Wgt/Backf Accum Usr = PAR.Hot Wgt/Backf Accum Usr - LCL.Hot Wgt/Weight Ext Usr
  PAR.Hot_Wgt_Backf_Accum_Usr = PAR.Hot_Wgt_Backf_Accum_Usr - LCL.Hot_Wgt_Weight_Ext_Usr;

  //?Weighted accumulated Loin Eye
  // LCL.Hot Wgt/Weight Ext Usr = DB1.ET Loin-Eye Depth Inches * DB1.ET Hot Wgt *
  LCL.Hot_Wgt_Weight_Ext_Usr = DB1.ET_Loin_Eye_Depth_Inches * DB1.ET_Hot_Wgt;

  // PAR.Hot Wgt/Loine Accum Usr = PAR.Hot Wgt/Loine Accum Usr - LCL.Hot Wgt/Weight Ext Usr
  PAR.Hot_Wgt_Loine_Accum_Usr = PAR.Hot_Wgt_Loine_Accum_Usr - LCL.Hot_Wgt_Weight_Ext_Usr;

  //?Weighted accumulated Light Refl
  // LCL.Hot Wgt/Weight Ext Usr = DB1.ET Light Reflectance * DB1.ET Hot Wgt *
  LCL.Hot_Wgt_Weight_Ext_Usr = DB1.ET_Light_Reflectance * DB1.ET_Hot_Wgt;

  // PAR.Hot Wgt/LghtR Accum Usr = PAR.Hot Wgt/LghtR Accum Usr - LCL.Hot Wgt/Weight Ext Usr
  PAR.Hot_Wgt_LghtR_Accum_Usr = PAR.Hot_Wgt_LghtR_Accum_Usr - LCL.Hot_Wgt_Weight_Ext_Usr;

  ENDDO;

  ENDIF;

 }

 // LCL.Carcass Count USR = PAR.Net Head Usr
 LCL.Carcass_Count_USR = PAR.Net_Head_Usr;

 // PAR.TH Head Killed = CON.*ZERO
 PAR.TH_Head_Killed = *ZERO;

 //?Number of Carcasses to Add
 // IF PAR.TH PHA Add Type is Balance To Kill
 IF PAR.TH_PHA_Add_Type = 'B';

 // LCL.Carcass Count USR = PAR.Net Head Usr - PAR.TH Head Killed
 LCL.Carcass_Count_USR = PAR.Net_Head_Usr - PAR.TH_Head_Killed;

 ENDIF;

 //?06/04/04 SLM HPEBAL - * out the Adjust/add Type Move at top
 //?                      and the hot wgt calc has also been chg
 //?                      and moved
 // PAR.ET Backfat Thickness Inch = PAR.PH GA Avg Backfat
 PAR.ET_Backfat_Thickness_Inch = PAR.PH_GA_Avg_Backfat;

 // PAR.ET Loin-Eye Depth Inches = PAR.PH GA Avg Loin Eye
 PAR.ET_Loin_Eye_Depth_Inches = PAR.PH_GA_Avg_Loin_Eye;

 // PAR.ET Light Reflectance = PAR.PH GA Avg Light Ref
 PAR.ET_Light_Reflectance = PAR.PH_GA_Avg_Light_Ref;

 // PAR.ET Lean Percent NPPC = PAR.PH GA Avg Lean%
 PAR.ET_Lean_Percent_NPPC = PAR.PH_GA_Avg_Lean;

 //?*-------------------------------------------------------------*
 //?* 07/02/01 PKD Needed to calculate the MM Values so the Competitor
 //?*              calculations would calculate the Lean Premium
 //?*              correctly.
 // LCL.Calculate All Usr = CND.Yes
 LCL.Calculate_All_Usr = 'Y';

 // Call program Clc Inch to MM/Lean%FOM.
 CALL PROGRAM(Clc Inch to MM/Lean%FOM) ('PKINMMLP');
 PARAMETER(PAR.ET_Lean_Percent_NPPC);
 PARAMETER(PAR.ET_Backfat_Thickness_Inch);
 PARAMETER(PAR.ET_Loin_Eye_Depth_Inches);
 PARAMETER(PAR.ET_Light_Reflectance);
 PARAMETER(PAR.ET_Backfat_Thickness_MM);
 PARAMETER(PAR.ET_Loineye_Depth_MM);
 PARAMETER(PAR.ET_Light_Reflectance_MM);
 PARAMETER(PAR.ET_Lean_Percent_FOM);
 PARAMETER(LCL.Calculate_All_Usr);

 //?*-------------------------------------------------------------*
 //?* 07/02/01 PKD Changed the parameters to pass in the PAR values
 //?*              instead of zeros for the MM values.
 //?* 05/27/04 SLM HPEBAL Pass in the LCL ET Adjust/Add source
 EXECUTE FUNCTION(Crt Eval Trans Rec    IF) TYPE(EXCINTFUN)                      AB1136539;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(LCL.ET_Scale_Sequence_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Schedule_Kill_Shift);
 PARAMETER(PAR.ET_Hot_Wgt);
 PARAMETER(PAR.ET_Backfat_Thickness_Inch);
 PARAMETER(PAR.ET_Loin_Eye_Depth_Inches);
 PARAMETER(PAR.ET_Lean_Percent_NPPC);
 PARAMETER(PAR.ET_Backfat_Thickness_MM);
 PARAMETER(PAR.ET_Loineye_Depth_MM);
 PARAMETER(PAR.ET_Light_Reflectance_MM);
 PARAMETER(PAR.ET_Lean_Percent_FOM);
 PARAMETER(PAR.ET_Light_Reflectance);
 PARAMETER(WRK.ET_Trim_Area);
 PARAMETER(WRK.ET_Carcass_Sex);
 PARAMETER('B');
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(PAR.ET_Adjust_Add_Type);
 PARAMETER(*BLANK);
 PARAMETER(LCL.ET_Adjust_Add_Source);
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Carcass_Count_USR);
 {
  //?Execute internal function

  // PAR.Carcass number        USR = PAR.Carcass Count USR
  PAR.Carcass_number_USR = PAR.Carcass_Count_USR;

  // DOW PAR.Carcass number        USR is GT Zero
  DOW PAR.Carcass_number_USR > *ZERO;

  EXECUTE FUNCTION(Rtv Eval Next#        RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1135496;
  PARAMETER(PAR.ET_Company_Number);
  PARAMETER(PAR.ET_Kill_Date);
  PARAMETER(PAR.ET_Scale_Sequence_Number);
  {
   //?USER: Processing if Data record not found

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.ET_Scale_Sequence_Number = 1;

   QUIT;

   //?USER: Process Data record

   CASE;

   // IF DB1.ET Scale Sequence Number is Entry Allowed
   IF DB1.ET_Scale_Sequence_Number >= 000001;
   AND DB1.ET_Scale_Sequence_Number <= 699999;

   // PAR.ET Scale Sequence Number = DB1.ET Scale Sequence Number + CON.1
   PAR.ET_Scale_Sequence_Number = DB1.ET_Scale_Sequence_Number + 1;

   QUIT;

   ENDIF;

  }

  EXECUTE FUNCTION(Create Evaluation Transac) TYPE(CRTOBJ) FILE(PKBVCPP)          AB1102931;
  PARAMETER(PAR.ET_Company_Number);
  PARAMETER(PAR.ET_Kill_Date);
  PARAMETER(PAR.ET_Scale_Sequence_Number);
  PARAMETER(PAR.ET_Scale_Sequence_Number);
  PARAMETER(000001);
  PARAMETER(PAR.ET_Tattoo_Number);
  PARAMETER(PAR.ET_Lot);
  PARAMETER(PAR.ET_Shift);
  PARAMETER(PAR.ET_Hot_Wgt);
  PARAMETER(PAR.ET_Backfat_Thickness_Inch);
  PARAMETER(PAR.ET_Loin_Eye_Depth_Inches);
  PARAMETER(PAR.ET_Lean_Percent_NPPC);
  PARAMETER(PAR.ET_Backfat_Thickness_MM);
  PARAMETER(PAR.ET_Loineye_Depth_MM);
  PARAMETER(PAR.ET_Light_Reflectance_MM);
  PARAMETER(PAR.ET_Lean_Percent_FOM);
  PARAMETER(PAR.ET_Light_Reflectance);
  PARAMETER(PAR.ET_Trim_Area);
  PARAMETER(PAR.ET_Carcass_Sex);
  PARAMETER(PAR.ET_Error_Sts);
  PARAMETER(PAR.ET_Record_Add_Del_Sts);
  PARAMETER(PAR.ET_Record_Created_W_Avg);
  PARAMETER(PAR.ET_Record_Created_Status);
  PARAMETER(PAR.ET_User_Error_Override);
  PARAMETER(PAR.ET_Adjust_Add_Type);
  PARAMETER(PAR.ET_Broken_Back_Sts);
  PARAMETER(PAR.ET_Unused_Sts_2);
  PARAMETER(PAR.ET_Adjust_Add_Source);
  PARAMETER(PAR.ET_Unused_Sts_4);
  PARAMETER(PAR.ET_Unused_Sts_5);
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.RU_Date);
  PARAMETER(PAR.RU_Time);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(*MISSING);
   PARAMETER(*MISSING);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  // PAR.Carcass number        USR = PAR.Carcass number        USR - CON.1
  PAR.Carcass_number_USR = PAR.Carcass_number_USR - 1;

  ENDDO;

 }

 //?*-------------------------------------------------------------*
 // PAR.TH PHA Head Adds = LCL.Carcass Count USR
 PAR.TH_PHA_Head_Adds = LCL.Carcass_Count_USR;

 //?Accumulate Totals
 DO;

 //?Accumulate totals
 // PAR.TH Head Killed = PAR.TH Head Killed + LCL.Carcass Count USR
 PAR.TH_Head_Killed = PAR.TH_Head_Killed + LCL.Carcass_Count_USR;

 // TH Hot Wgt
 PAR.TH_Hot_Wgt = PAR.TH_Hot_Wgt + ( PAR.ET_Hot_Wgt * LCL.Carcass_Count_USR );

 // TH Tot Loin Eye Depth
 PAR.TH_Tot_Loin_Eye_Depth = PAR.TH_Tot_Loin_Eye_Depth + ( PAR.ET_Loin_Eye_Depth_Inches
 * LCL.Carcass_Count_USR );

 // TH Tot Backfat Inches
 PAR.TH_Tot_Backfat_Inches = PAR.TH_Tot_Backfat_Inches + ( PAR.ET_Backfat_Thickness_Inch
 * LCL.Carcass_Count_USR );

 // TH Tot Light Reflectance
 PAR.TH_Tot_Light_Reflectance = PAR.TH_Tot_Light_Reflectance + ( PAR.ET_Light_Reflectance
 * LCL.Carcass_Count_USR );

 //?Weighted accumulated Lean%
 // Lean Percent
 LCL.Hot_Wgt_Weight_Ext_Usr = ( PAR.ET_Lean_Percent_NPPC * PAR.ET_Hot_Wgt )
 * LCL.Carcass_Count_USR;

 // PAR.Hot Wgt/Lean % Accum Usr = LCL.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/Lean % Accum Usr
 PAR.Hot_Wgt_Lean_Accum_Usr = LCL.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_Lean_Accum_Usr;

 //?Weighted accumulated Backfat
 // Backfat Thickness Inch
 LCL.Hot_Wgt_Weight_Ext_Usr = ( PAR.ET_Backfat_Thickness_Inch * PAR.ET_Hot_Wgt )
 * LCL.Carcass_Count_USR;

 // PAR.Hot Wgt/Backf Accum Usr = LCL.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/Backf Accum Usr
 PAR.Hot_Wgt_Backf_Accum_Usr = LCL.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_Backf_Accum_Usr;

 //?Weighted accumulated Loin Eye
 // Loin-Eye Depth Inches
 LCL.Hot_Wgt_Weight_Ext_Usr = ( PAR.ET_Loin_Eye_Depth_Inches * PAR.ET_Hot_Wgt )
 * LCL.Carcass_Count_USR;

 // PAR.Hot Wgt/Loine Accum Usr = LCL.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/Loine Accum Usr
 PAR.Hot_Wgt_Loine_Accum_Usr = LCL.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_Loine_Accum_Usr;

 //?Weighted accumulated Light Refl
 // Light Reflectances
 LCL.Hot_Wgt_Weight_Ext_Usr = ( PAR.ET_Light_Reflectance * PAR.ET_Hot_Wgt )
 * LCL.Carcass_Count_USR;

 // PAR.Hot Wgt/LghtR Accum Usr = LCL.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/LghtR Accum Usr
 PAR.Hot_Wgt_LghtR_Accum_Usr = LCL.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_LghtR_Accum_Usr;

 ENDDO;

 // PAR.TH Header Error Sts = CND.No Header Error
 PAR.TH_Header_Error_Sts = *BLANK;

 // PAR.TH Detail Error Sts = CND.No
 PAR.TH_Detail_Error_Sts = 'N';

 // PAR.TH Kill Balancing Sts = CND.Balance
 PAR.TH_Kill_Balancing_Sts = 'B';

 EXECUTE FUNCTION(Upd PHA Yld/LeanPrm   RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1226785;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_PHA_Yield_Percent);
 PARAMETER(PAR.TH_PHA_Lean_Prm_Crc_CWT);
 //?Validate Hot Weight and Balance Tattoo
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.TH Header Error Sts = CND.Header Error
 PAR.TH_Header_Error_Sts = 'E';

 // PAR.TH Detail Error Sts = CND.Yes
 PAR.TH_Detail_Error_Sts = 'Y';

 // PAR.TH Kill Balancing Sts = CND.Error
 PAR.TH_Kill_Balancing_Sts = 'E';

 EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(999999);
 PARAMETER('H');
 PARAMETER('HWA');
 PARAMETER('Hot Wgt for Adds Invalid');
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.RS_Record_Status);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  CASE;

  // IF PAR.KV Error Description is Entered
  IF PAR.KV_Error_Description <> *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
  PARAMETER(PAR.KV_Error_Code);
  PARAMETER(DB1.KV_Error_Description);
  {
   //?USER: Process Data record

   // PAR.EV Description = DB1.EV Description
   PAR.EV_Description = DB1.EV_Description;

  }

  ENDIF;

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDIF;

}


//?Create Eval Trans records.
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.TH Header Error Sts = CND.Header Error
LCL.TH_Header_Error_Sts = 'E';

// LCL.TH Detail Error Sts = CND.Yes
LCL.TH_Detail_Error_Sts = 'Y';

// LCL.TH Kill Balancing Sts = CND.Error
LCL.TH_Kill_Balancing_Sts = 'E';

EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(999998);
PARAMETER('H');
PARAMETER('PHA');
PARAMETER('Producer Hist Not Avail');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.RS_Record_Status);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 CASE;

 // IF PAR.KV Error Description is Entered
 IF PAR.KV_Error_Description <> *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
 PARAMETER(PAR.KV_Error_Code);
 PARAMETER(DB1.KV_Error_Description);
 {
  //?USER: Process Data record

  // PAR.EV Description = DB1.EV Description
  PAR.EV_Description = DB1.EV_Description;

 }

 ENDIF;

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(999999);
PARAMETER('H');
PARAMETER('PID');
PARAMETER('% Identified > 105%');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.RS_Record_Status);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 CASE;

 // IF PAR.KV Error Description is Entered
 IF PAR.KV_Error_Description <> *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
 PARAMETER(PAR.KV_Error_Code);
 PARAMETER(DB1.KV_Error_Description);
 {
  //?USER: Process Data record

  // PAR.EV Description = DB1.EV Description
  PAR.EV_Description = DB1.EV_Description;

 }

 ENDIF;

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


ENDIF;

// IF LCL.TH Percent Accepted is LT 75%
IF LCL.TH_Percent_Accepted < 75.00;

// LCL.TH PHA Add Type = CND.Balance To Kill
LCL.TH_PHA_Add_Type = 'B';

// LCL.TH PHA Add Reason = CND.<75% Analyzation
LCL.TH_PHA_Add_Reason = 1;

EXECUTE FUNCTION(Rtv GA Prod Hist Avgs RT) TYPE(RTVOBJ) FILE(PKCGCPP)           AB1226508;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.TH_Purchase_Date);
PARAMETER(LCL.PH_Summary_Type);
PARAMETER(LCL.PH_GA_Avg_Live_Wgt);
PARAMETER(LCL.TH_PHA_Yield_Percent);
PARAMETER(LCL.PH_GA_Avg_Lean);
PARAMETER(LCL.PH_GA_Avg_Backfat);
PARAMETER(LCL.PH_GA_Avg_Loin_Eye);
PARAMETER(LCL.PH_GA_Avg_Light_Ref);
PARAMETER(LCL.TH_PHA_Lean_Prm_Crc_CWT);
PARAMETER(LCL.PH_GA_Avg_Srt_Disc_Fctr);
PARAMETER(LCL.History_Avail_STS_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 // PAR.History Avail STS USR = CND.No
 PAR.History_Avail_STS_USR = 'N';

 // LCL.First Time Flag Usr = CND.Yes
 LCL.First_Time_Flag_Usr = 'Y';

 //?USER: Process Data record

 //?First Time Processing
 CASE;

 // IF LCL.First Time Flag Usr is Yes
 IF LCL.First_Time_Flag_Usr = 'Y';

 // LCL.PH Week Ending Date = DB1.PH Week Ending Date
 LCL.PH_Week_Ending_Date = DB1.PH_Week_Ending_Date;

 // LCL.First Time Flag Usr = CND.No
 LCL.First_Time_Flag_Usr = 'N';

 ENDIF;

 CASE;

 // IF DB1.PH Week Ending Date NE LCL.PH Week Ending Date
 IF DB1.PH_Week_Ending_Date <> LCL.PH_Week_Ending_Date;

 QUIT;

 ENDIF;

 CASE;

 // IF DB1.PH Summary Type is 2 Week
 IF DB1.PH_Summary_Type = '2WK';

 CASE;

 // IF DB1.PH GA Head Killed is GE 600
 IF DB1.PH_GA_Head_Killed >= 600;

 MOVE *ALL (To: PAR From: DB1);

 // PAR.History Avail STS USR = CND.Yes
 PAR.History_Avail_STS_USR = 'Y';

 QUIT;

 ENDIF;

 // IF DB1.PH Summary Type is 4 Week
 IF DB1.PH_Summary_Type = '4WK';

 CASE;

 // IF DB1.PH GA Head Killed is GT Zero
 IF DB1.PH_GA_Head_Killed > *ZERO;

 MOVE *ALL (To: PAR From: DB1);

 // PAR.History Avail STS USR = CND.Yes
 PAR.History_Avail_STS_USR = 'Y';

 QUIT;

 ENDIF;

 ENDIF;

}


//?Average Type
CASE;

// IF LCL.PH Summary Type is 2 Week
IF LCL.PH_Summary_Type = '2WK';

// LCL.TH PHA Average Type = CND.2 Week
LCL.TH_PHA_Average_Type = '2WK';

//?Average Type
// IF LCL.PH Summary Type is 4 Week
IF LCL.PH_Summary_Type = '4WK';

// LCL.TH PHA Average Type = CND.4 Week
LCL.TH_PHA_Average_Type = '4WK';

//?Average Type
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.TH PHA Average Type = CND.Available History
LCL.TH_PHA_Average_Type = 'HST';

ENDIF;

// Retrieve message - '< 75% Accepted:  Carcass Data added based on Producer'
LCL.THC_Comment = RTVMSG(PRK0935);
PARAMETER(LCL.TH_PHA_Average_Type);

EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.THC_Comment_Line);
PARAMETER(LCL.THC_Comment);
PARAMETER('P');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 {
  //?USER: Processing if Data record not found

  // PAR.THC Comment Line = CON.1
  PAR.THC_Comment_Line = 1;

  //?USER: Process Data record

  // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
  PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 PARAMETER(PAR.THC_Comment);
 PARAMETER(PAR.THC_Comment_Type);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


// Retrieve message - '2 Week (2WK), 4 Week (4WK), or "last load" (HST) Average.'
LCL.THC_Comment = RTVMSG(PRK0947);

EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.THC_Comment_Line);
PARAMETER(LCL.THC_Comment);
PARAMETER('P');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 {
  //?USER: Processing if Data record not found

  // PAR.THC Comment Line = CON.1
  PAR.THC_Comment_Line = 1;

  //?USER: Process Data record

  // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
  PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 PARAMETER(PAR.THC_Comment);
 PARAMETER(PAR.THC_Comment_Type);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


//?Create Eval Trans records.
CASE;

// IF LCL.History Avail STS USR is Yes
IF LCL.History_Avail_STS_USR = 'Y';

// OR PAR.Bal w/History is Available History
OR PAR.Bal_w_History = 'A';

//?Balance w/Available History
CASE;

// IF PAR.Bal w/History is Available History
IF PAR.Bal_w_History = 'A';

// LCL.PH GA Avg Live Wgt = PAR.PH GA Avg Live Wgt
LCL.PH_GA_Avg_Live_Wgt = PAR.PH_GA_Avg_Live_Wgt;

// LCL.TH PHA Yield Percent = PAR.PH GA Adjusted Yield%
LCL.TH_PHA_Yield_Percent = PAR.PH_GA_Adjusted_Yield;

// LCL.TH PHA Lean Prm /Crc CWT = PAR.PH GA Lean Prm /Carc CWT
LCL.TH_PHA_Lean_Prm_Crc_CWT = PAR.PH_GA_Lean_Prm_Carc_CWT;

// LCL.TH PHA Sort Disc Fctr % = PAR.PH GA Avg Srt Disc Fctr * CON.100 *Rounded
LCL.TH_PHA_Sort_Disc_Fctr = PAR.PH_GA_Avg_Srt_Disc_Fctr * 100 'H';

// LCL.PH GA Avg Backfat = PAR.PH GA Avg Backfat
LCL.PH_GA_Avg_Backfat = PAR.PH_GA_Avg_Backfat;

// LCL.PH GA Avg Loin Eye = PAR.PH GA Avg Loin Eye
LCL.PH_GA_Avg_Loin_Eye = PAR.PH_GA_Avg_Loin_Eye;

// LCL.PH GA Avg Light Ref = PAR.PH GA Avg Light Ref
LCL.PH_GA_Avg_Light_Ref = PAR.PH_GA_Avg_Light_Ref;

// LCL.PH GA Avg Lean% = PAR.PH GA Avg Lean%
LCL.PH_GA_Avg_Lean = PAR.PH_GA_Avg_Lean;

//?Balance w/Available History
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.TH PHA Sort Disc Fctr % = LCL.PH GA Avg Srt Disc Fctr * CON.100 *Rounded
LCL.TH_PHA_Sort_Disc_Fctr = LCL.PH_GA_Avg_Srt_Disc_Fctr * 100 'H';

ENDIF;

EXECUTE FUNCTION(Bal Eval Trans w/PHA  IF) TYPE(EXCINTFUN)                      AB1226549;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.TH_Head_Killed);
PARAMETER(LCL.TH_Hot_Wgt);
PARAMETER(LCL.TH_Tot_Loin_Eye_Depth);
PARAMETER(LCL.TH_Tot_Backfat_Inches);
PARAMETER(LCL.TH_Tot_Light_Reflectance);
PARAMETER(PAR.TH_Avg_Live_Wgt);
PARAMETER(LCL.TH_Avg_Hot_Wgt);
PARAMETER(PAR.TH_Recalc_Live_Wgt);
PARAMETER(LCL.TH_Header_Error_Sts);
PARAMETER(LCL.TH_Detail_Error_Sts);
PARAMETER(LCL.TH_Kill_Balancing_Sts);
PARAMETER(PAR.TH_Source_Type);
PARAMETER(PAR.TH_Schedule_Kill_Shift);
PARAMETER(LCL.TH_Percent_Identified);
PARAMETER(LCL.TH_Percent_Accepted);
PARAMETER(LCL.TH_PHA_Head_Adds);
PARAMETER(LCL.TH_PHA_Add_Type);
PARAMETER(LCL.TH_PHA_Average_Type);
PARAMETER(LCL.TH_PHA_Add_Reason);
PARAMETER(LCL.TH_PHA_Yield_Percent);
PARAMETER(LCL.TH_PHA_Lean_Prm_Crc_CWT);
PARAMETER(LCL.PH_GA_Avg_Live_Wgt);
PARAMETER(LCL.PH_GA_Avg_Lean);
PARAMETER(LCL.PH_GA_Avg_Backfat);
PARAMETER(LCL.PH_GA_Avg_Loin_Eye);
PARAMETER(LCL.PH_GA_Avg_Light_Ref);
PARAMETER(LCL.Net_Head_Usr);
PARAMETER(LCL.Hot_Wgt_Lean_Accum_Usr);
PARAMETER(LCL.Hot_Wgt_Backf_Accum_Usr);
PARAMETER(LCL.Hot_Wgt_Loine_Accum_Usr);
PARAMETER(LCL.Hot_Wgt_LghtR_Accum_Usr);
PARAMETER(LCL.CDI_Shipper_User);
{
 //?Execute internal function

 // LCL.TH Avg Live Wgt = PAR.TH Avg Live Wgt
 LCL.TH_Avg_Live_Wgt = PAR.TH_Avg_Live_Wgt;

 //?* 02/20/04 PKD added check for Recalc Live Weight.
 //?06/04/04 SLM HPEBAL - Remove the Calculation of Avg Live Wgt
 //?                    - Moved the Adjust/Add Type as the first step
 //?                    - Calculate the Et Hot Wgt, write a Pay note
 //?                    - message to the tattoo header comments
 //?                    - combine the calculation of ET Hot Wgt
 //?                    - with the messaging
 //?03/28/05 SLM TFP0001 -
 //?                     - The payment on Hold Over for more then 1 day
 //?                     - Triumph will need to pay on the Producer
 //?                     - avg live weight.
 //?Adjust/Add Type
 CASE;

 // IF PAR.TH PHA Average Type is 2 Week
 IF PAR.TH_PHA_Average_Type = '2WK';

 // PAR.ET Adjust/Add Type = CND.Add w/2 Week Average
 PAR.ET_Adjust_Add_Type = '2WK';

 //?Adjust/Add Type
 // IF PAR.TH PHA Average Type is 4 Week
 IF PAR.TH_PHA_Average_Type = '4WK';

 // PAR.ET Adjust/Add Type = CND.Add w/4 Week Average
 PAR.ET_Adjust_Add_Type = '4WK';

 //?Adjust/Add Type
 // IF PAR.TH PHA Average Type is Available History
 IF PAR.TH_PHA_Average_Type = 'HST';

 // PAR.ET Adjust/Add Type = CND.Add w/Available History
 PAR.ET_Adjust_Add_Type = 'HST';

 ENDIF;

 //?          - Cal of ET Hot Wgt
 //?               - If the Avg Live Wgt = Zero or Recalc Lv Wgt
 //?                  and If the Tattoo Avg Hot Wgt > 0 then use the
 //?                         the Tattoo Avg Hot Wgt
 //?                      else use the GA Live Wgt to recalculate the
 //?                      the ET Hot Wgt
 //?               - If the Avg Live Wgt NOT = Zero or NOT Recalc Lv Wgt
 //?                      use the Tattoo Header Avg Live Wgt to
 //?                      calculate the ET HOT Weight.
 //?Calculate Hot Weight
 CASE;

 // IF PAR.TH Avg Live Wgt is EQ Zero
 IF PAR.TH_Avg_Live_Wgt = *ZERO;

 // OR PAR.TH Recalc Live Wgt is Greater than 0
 OR PAR.TH_Recalc_Live_Wgt > *ZERO;

 //?06/04/04 SLM HPEBAL Remove the Th Source Type is Internal
 //?06/25/04 PKD Only use the Carcass Weight if the Percent Accepted
 //?             is between 75 and 100 percent.
 //?03/28/05 SLM TFP0001 - Add the selection for Triumph on which
 //?                       calculation should be used.
 //?                       Guymon will pay on the lot average
 //?                       Triumph will not pay on the lot average
 //?ET Hot Wgt
 CASE;

 // IF PAR.TH Avg Hot Wgt is GT Zero
 IF PAR.TH_Avg_Hot_Wgt > *ZERO;

 // AND PAR.TH Percent Accepted is GE 75%
 AND ( PAR.TH_Percent_Accepted >= 75.00;

 // AND PAR.TH Percent Accepted is LE 100%
 AND PAR.TH_Percent_Accepted <= 100 );

 // AND PAR.CDI Shipper User is Guymon
 AND PAR.CDI_Shipper_User = *BLANK;

 //?The Tattoo Avg Hot Wgt (Lot) will be used
 // PAR.ET Hot Wgt = PAR.TH Avg Hot Wgt
 PAR.ET_Hot_Wgt = PAR.TH_Avg_Hot_Wgt;

 // PAR.ET Adjust/Add Type = CND.Add w/Lot Avg Hot Wft
 PAR.ET_Adjust_Add_Type = 'LOT';

 // Retrieve message - 'Hot Weight (LOT) based on Lot Average Hot Weight.'
 LCL.THC_Comment = RTVMSG(PRK1116);

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(LCL.THC_Comment_Line);
 PARAMETER(LCL.THC_Comment);
 PARAMETER('P');
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  {
   //?USER: Processing if Data record not found

   // PAR.THC Comment Line = CON.1
   PAR.THC_Comment_Line = 1;

   //?USER: Process Data record

   // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
   PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  PARAMETER(PAR.THC_Comment);
  PARAMETER(PAR.THC_Comment_Type);
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER(PAR.RS_Record_Status);
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  PARAMETER(PAR.RS_User_Added);
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

 }

 //?ET Hot Wgt
 // IF *OTHERWISE
 IF *OTHERWISE;

 // ET Hot Weight using PH GA
 PAR.ET_Hot_Wgt = PAR.PH_GA_Avg_Live_Wgt * ( PAR.TH_PHA_Yield_Percent / 100 'H' ) 'H';

 // Retrieve message - 'Hot Weight based on Producer historical Average Live'
 LCL.THC_Comment = RTVMSG(PRK1117);

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(LCL.THC_Comment_Line);
 PARAMETER(LCL.THC_Comment);
 PARAMETER('P');
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  {
   //?USER: Processing if Data record not found

   // PAR.THC Comment Line = CON.1
   PAR.THC_Comment_Line = 1;

   //?USER: Process Data record

   // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
   PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  PARAMETER(PAR.THC_Comment);
  PARAMETER(PAR.THC_Comment_Type);
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER(PAR.RS_Record_Status);
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  PARAMETER(PAR.RS_User_Added);
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

 }

 // Retrieve message - 'Weight and Average Adjusted Yield.'
 LCL.THC_Comment = RTVMSG(PRK1118);

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(LCL.THC_Comment_Line);
 PARAMETER(LCL.THC_Comment);
 PARAMETER('P');
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  {
   //?USER: Processing if Data record not found

   // PAR.THC Comment Line = CON.1
   PAR.THC_Comment_Line = 1;

   //?USER: Process Data record

   // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
   PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  PARAMETER(PAR.THC_Comment);
  PARAMETER(PAR.THC_Comment_Type);
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER(PAR.RS_Record_Status);
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  PARAMETER(PAR.RS_User_Added);
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

 }

 ENDIF;

 //?08/13/04 PKD Moved the creating of comments out of PHA processing
 //?             The comments need to be created for all types of
 //?             balancing, not just @ PHA.
 //?Calculate Hot Weight
 // IF *OTHERWISE
 IF *OTHERWISE;

 // ET Hot Wgt Frm Tatto ALW
 PAR.ET_Hot_Wgt = PAR.TH_Avg_Live_Wgt * ( PAR.TH_PHA_Yield_Percent / 100 'H' ) 'H';

 //?08/13/04 PKD Moved the creating of comments out of PHA processing
 //?             The comments need to be created for all types of
 //?             balancing, not just @ PHA.
 ENDIF;

 //?08/19/04 PKD Validate the Hot Weight with Evaluation Validation
 //?             Hot Weight range.  If the Hot Weight not within range
 //?             then do not add carcasses and mark the tattoo with
 //?             error.
 EXECUTE FUNCTION(Rtv Hot Weight Range  IF) TYPE(EXCINTFUN)                      AB1169711;
 PARAMETER(LCL.EV_Minimum);
 PARAMETER(LCL.EV_Maximum);
 {
  //?Execute internal function

  // PAR.EV Validation Code = CND.Carcass is Light Weight
  PAR.EV_Validation_Code = 'CLT';

  EXECUTE FUNCTION(Rtv Min/Max Values    RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1169636;
  PARAMETER(PAR.EV_Validation_Code);
  PARAMETER(WRK.EV_Minimum);
  PARAMETER(PAR.EV_Minimum);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.EV Validation Code = CND.Carcass has Double Weight
  PAR.EV_Validation_Code = 'CDB';

  EXECUTE FUNCTION(Rtv Min/Max Values    RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1169636;
  PARAMETER(PAR.EV_Validation_Code);
  PARAMETER(PAR.EV_Maximum);
  PARAMETER(WRK.EV_Maximum);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

 }

 //?Validate Hot Weight and Balance Tattoo
 CASE;

 // IF PAR.ET Hot Wgt is GT Zero
 IF PAR.ET_Hot_Wgt > *ZERO;

 //?Number of Carcasses to Add
 CASE;

 // IF PAR.TH PHA Add Type is Entire Tattoo
 IF PAR.TH_PHA_Add_Type = 'E';

 //?Pay Entire Tattoo w/PHA, then Purge All Transactions.
 EXECUTE FUNCTION(Bal Flag f/Purge All  RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1226536;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TH_Head_Killed);
 PARAMETER(PAR.TH_Hot_Wgt);
 PARAMETER(PAR.TH_Tot_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Tot_Backfat_Inches);
 PARAMETER(PAR.TH_Tot_Light_Reflectance);
 PARAMETER(PAR.Hot_Wgt_Lean_Accum_Usr);
 PARAMETER(PAR.Hot_Wgt_Backf_Accum_Usr);
 PARAMETER(PAR.Hot_Wgt_Loine_Accum_Usr);
 PARAMETER(PAR.Hot_Wgt_LghtR_Accum_Usr);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.RS Record Status is Active
  IF DB1.RS_Record_Status = 'A';

  EXECUTE FUNCTION(Chg Record Status     CH) TYPE(CHGOBJ) FILE(PKBVCPP)           AB1226537;
  PARAMETER(DB1.ET_Company_Number);
  PARAMETER(DB1.ET_Kill_Date);
  PARAMETER(DB1.ET_Scale_Sequence_Number);
  PARAMETER(DB1.ET_Carcass_Number);
  PARAMETER(DB1.ET_Carcass_Number_Insert);
  PARAMETER('D');
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  //?Subtract from Totals
  DO;

  //?Accumulate totals
  // PAR.TH Head Killed = PAR.TH Head Killed - CON.1
  PAR.TH_Head_Killed = PAR.TH_Head_Killed - 1;

  // PAR.TH Tot Loin Eye Depth = PAR.TH Tot Loin Eye Depth - DB1.ET Loin-Eye Depth Inches
  PAR.TH_Tot_Loin_Eye_Depth = PAR.TH_Tot_Loin_Eye_Depth - DB1.ET_Loin_Eye_Depth_Inches;

  // PAR.TH Tot Backfat Inches = PAR.TH Tot Backfat Inches - DB1.ET Backfat Thickness Inch
  PAR.TH_Tot_Backfat_Inches = PAR.TH_Tot_Backfat_Inches - DB1.ET_Backfat_Thickness_Inch;

  // PAR.TH Tot Light Reflectance = PAR.TH Tot Light Reflectance - DB1.ET Light Reflectance
  PAR.TH_Tot_Light_Reflectance = PAR.TH_Tot_Light_Reflectance - DB1.ET_Light_Reflectance;

  // PAR.TH Hot Wgt = PAR.TH Hot Wgt - DB1.ET Hot Wgt
  PAR.TH_Hot_Wgt = PAR.TH_Hot_Wgt - DB1.ET_Hot_Wgt;

  //?Weighted accumulated Lean%
  // LCL.Hot Wgt/Weight Ext Usr = DB1.ET Lean Percent NPPC * DB1.ET Hot Wgt *
  LCL.Hot_Wgt_Weight_Ext_Usr = DB1.ET_Lean_Percent_NPPC * DB1.ET_Hot_Wgt;

  // PAR.Hot Wgt/Lean % Accum Usr = PAR.Hot Wgt/Lean % Accum Usr - LCL.Hot Wgt/Weight Ext Usr
  PAR.Hot_Wgt_Lean_Accum_Usr = PAR.Hot_Wgt_Lean_Accum_Usr - LCL.Hot_Wgt_Weight_Ext_Usr;

  //?Weighted accumulated Backfat
  // LCL.Hot Wgt/Weight Ext Usr = DB1.ET Backfat Thickness Inch * DB1.ET Hot Wgt *
  LCL.Hot_Wgt_Weight_Ext_Usr = DB1.ET_Backfat_Thickness_Inch * DB1.ET_Hot_Wgt;

  // PAR.Hot Wgt/Backf Accum Usr = PAR.Hot Wgt/Backf Accum Usr - LCL.Hot Wgt/Weight Ext Usr
  PAR.Hot_Wgt_Backf_Accum_Usr = PAR.Hot_Wgt_Backf_Accum_Usr - LCL.Hot_Wgt_Weight_Ext_Usr;

  //?Weighted accumulated Loin Eye
  // LCL.Hot Wgt/Weight Ext Usr = DB1.ET Loin-Eye Depth Inches * DB1.ET Hot Wgt *
  LCL.Hot_Wgt_Weight_Ext_Usr = DB1.ET_Loin_Eye_Depth_Inches * DB1.ET_Hot_Wgt;

  // PAR.Hot Wgt/Loine Accum Usr = PAR.Hot Wgt/Loine Accum Usr - LCL.Hot Wgt/Weight Ext Usr
  PAR.Hot_Wgt_Loine_Accum_Usr = PAR.Hot_Wgt_Loine_Accum_Usr - LCL.Hot_Wgt_Weight_Ext_Usr;

  //?Weighted accumulated Light Refl
  // LCL.Hot Wgt/Weight Ext Usr = DB1.ET Light Reflectance * DB1.ET Hot Wgt *
  LCL.Hot_Wgt_Weight_Ext_Usr = DB1.ET_Light_Reflectance * DB1.ET_Hot_Wgt;

  // PAR.Hot Wgt/LghtR Accum Usr = PAR.Hot Wgt/LghtR Accum Usr - LCL.Hot Wgt/Weight Ext Usr
  PAR.Hot_Wgt_LghtR_Accum_Usr = PAR.Hot_Wgt_LghtR_Accum_Usr - LCL.Hot_Wgt_Weight_Ext_Usr;

  ENDDO;

  ENDIF;

 }

 // LCL.Carcass Count USR = PAR.Net Head Usr
 LCL.Carcass_Count_USR = PAR.Net_Head_Usr;

 // PAR.TH Head Killed = CON.*ZERO
 PAR.TH_Head_Killed = *ZERO;

 //?Number of Carcasses to Add
 // IF PAR.TH PHA Add Type is Balance To Kill
 IF PAR.TH_PHA_Add_Type = 'B';

 // LCL.Carcass Count USR = PAR.Net Head Usr - PAR.TH Head Killed
 LCL.Carcass_Count_USR = PAR.Net_Head_Usr - PAR.TH_Head_Killed;

 ENDIF;

 //?06/04/04 SLM HPEBAL - * out the Adjust/add Type Move at top
 //?                      and the hot wgt calc has also been chg
 //?                      and moved
 // PAR.ET Backfat Thickness Inch = PAR.PH GA Avg Backfat
 PAR.ET_Backfat_Thickness_Inch = PAR.PH_GA_Avg_Backfat;

 // PAR.ET Loin-Eye Depth Inches = PAR.PH GA Avg Loin Eye
 PAR.ET_Loin_Eye_Depth_Inches = PAR.PH_GA_Avg_Loin_Eye;

 // PAR.ET Light Reflectance = PAR.PH GA Avg Light Ref
 PAR.ET_Light_Reflectance = PAR.PH_GA_Avg_Light_Ref;

 // PAR.ET Lean Percent NPPC = PAR.PH GA Avg Lean%
 PAR.ET_Lean_Percent_NPPC = PAR.PH_GA_Avg_Lean;

 //?*-------------------------------------------------------------*
 //?* 07/02/01 PKD Needed to calculate the MM Values so the Competitor
 //?*              calculations would calculate the Lean Premium
 //?*              correctly.
 // LCL.Calculate All Usr = CND.Yes
 LCL.Calculate_All_Usr = 'Y';

 // Call program Clc Inch to MM/Lean%FOM.
 CALL PROGRAM(Clc Inch to MM/Lean%FOM) ('PKINMMLP');
 PARAMETER(PAR.ET_Lean_Percent_NPPC);
 PARAMETER(PAR.ET_Backfat_Thickness_Inch);
 PARAMETER(PAR.ET_Loin_Eye_Depth_Inches);
 PARAMETER(PAR.ET_Light_Reflectance);
 PARAMETER(PAR.ET_Backfat_Thickness_MM);
 PARAMETER(PAR.ET_Loineye_Depth_MM);
 PARAMETER(PAR.ET_Light_Reflectance_MM);
 PARAMETER(PAR.ET_Lean_Percent_FOM);
 PARAMETER(LCL.Calculate_All_Usr);

 //?*-------------------------------------------------------------*
 //?* 07/02/01 PKD Changed the parameters to pass in the PAR values
 //?*              instead of zeros for the MM values.
 //?* 05/27/04 SLM HPEBAL Pass in the LCL ET Adjust/Add source
 EXECUTE FUNCTION(Crt Eval Trans Rec    IF) TYPE(EXCINTFUN)                      AB1136539;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(LCL.ET_Scale_Sequence_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Schedule_Kill_Shift);
 PARAMETER(PAR.ET_Hot_Wgt);
 PARAMETER(PAR.ET_Backfat_Thickness_Inch);
 PARAMETER(PAR.ET_Loin_Eye_Depth_Inches);
 PARAMETER(PAR.ET_Lean_Percent_NPPC);
 PARAMETER(PAR.ET_Backfat_Thickness_MM);
 PARAMETER(PAR.ET_Loineye_Depth_MM);
 PARAMETER(PAR.ET_Light_Reflectance_MM);
 PARAMETER(PAR.ET_Lean_Percent_FOM);
 PARAMETER(PAR.ET_Light_Reflectance);
 PARAMETER(WRK.ET_Trim_Area);
 PARAMETER(WRK.ET_Carcass_Sex);
 PARAMETER('B');
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(PAR.ET_Adjust_Add_Type);
 PARAMETER(*BLANK);
 PARAMETER(LCL.ET_Adjust_Add_Source);
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Carcass_Count_USR);
 {
  //?Execute internal function

  // PAR.Carcass number        USR = PAR.Carcass Count USR
  PAR.Carcass_number_USR = PAR.Carcass_Count_USR;

  // DOW PAR.Carcass number        USR is GT Zero
  DOW PAR.Carcass_number_USR > *ZERO;

  EXECUTE FUNCTION(Rtv Eval Next#        RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1135496;
  PARAMETER(PAR.ET_Company_Number);
  PARAMETER(PAR.ET_Kill_Date);
  PARAMETER(PAR.ET_Scale_Sequence_Number);
  {
   //?USER: Processing if Data record not found

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.ET_Scale_Sequence_Number = 1;

   QUIT;

   //?USER: Process Data record

   CASE;

   // IF DB1.ET Scale Sequence Number is Entry Allowed
   IF DB1.ET_Scale_Sequence_Number >= 000001;
   AND DB1.ET_Scale_Sequence_Number <= 699999;

   // PAR.ET Scale Sequence Number = DB1.ET Scale Sequence Number + CON.1
   PAR.ET_Scale_Sequence_Number = DB1.ET_Scale_Sequence_Number + 1;

   QUIT;

   ENDIF;

  }

  EXECUTE FUNCTION(Create Evaluation Transac) TYPE(CRTOBJ) FILE(PKBVCPP)          AB1102931;
  PARAMETER(PAR.ET_Company_Number);
  PARAMETER(PAR.ET_Kill_Date);
  PARAMETER(PAR.ET_Scale_Sequence_Number);
  PARAMETER(PAR.ET_Scale_Sequence_Number);
  PARAMETER(000001);
  PARAMETER(PAR.ET_Tattoo_Number);
  PARAMETER(PAR.ET_Lot);
  PARAMETER(PAR.ET_Shift);
  PARAMETER(PAR.ET_Hot_Wgt);
  PARAMETER(PAR.ET_Backfat_Thickness_Inch);
  PARAMETER(PAR.ET_Loin_Eye_Depth_Inches);
  PARAMETER(PAR.ET_Lean_Percent_NPPC);
  PARAMETER(PAR.ET_Backfat_Thickness_MM);
  PARAMETER(PAR.ET_Loineye_Depth_MM);
  PARAMETER(PAR.ET_Light_Reflectance_MM);
  PARAMETER(PAR.ET_Lean_Percent_FOM);
  PARAMETER(PAR.ET_Light_Reflectance);
  PARAMETER(PAR.ET_Trim_Area);
  PARAMETER(PAR.ET_Carcass_Sex);
  PARAMETER(PAR.ET_Error_Sts);
  PARAMETER(PAR.ET_Record_Add_Del_Sts);
  PARAMETER(PAR.ET_Record_Created_W_Avg);
  PARAMETER(PAR.ET_Record_Created_Status);
  PARAMETER(PAR.ET_User_Error_Override);
  PARAMETER(PAR.ET_Adjust_Add_Type);
  PARAMETER(PAR.ET_Broken_Back_Sts);
  PARAMETER(PAR.ET_Unused_Sts_2);
  PARAMETER(PAR.ET_Adjust_Add_Source);
  PARAMETER(PAR.ET_Unused_Sts_4);
  PARAMETER(PAR.ET_Unused_Sts_5);
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.RU_Date);
  PARAMETER(PAR.RU_Time);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(*MISSING);
   PARAMETER(*MISSING);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  // PAR.Carcass number        USR = PAR.Carcass number        USR - CON.1
  PAR.Carcass_number_USR = PAR.Carcass_number_USR - 1;

  ENDDO;

 }

 //?*-------------------------------------------------------------*
 // PAR.TH PHA Head Adds = LCL.Carcass Count USR
 PAR.TH_PHA_Head_Adds = LCL.Carcass_Count_USR;

 //?Accumulate Totals
 DO;

 //?Accumulate totals
 // PAR.TH Head Killed = PAR.TH Head Killed + LCL.Carcass Count USR
 PAR.TH_Head_Killed = PAR.TH_Head_Killed + LCL.Carcass_Count_USR;

 // TH Hot Wgt
 PAR.TH_Hot_Wgt = PAR.TH_Hot_Wgt + ( PAR.ET_Hot_Wgt * LCL.Carcass_Count_USR );

 // TH Tot Loin Eye Depth
 PAR.TH_Tot_Loin_Eye_Depth = PAR.TH_Tot_Loin_Eye_Depth + ( PAR.ET_Loin_Eye_Depth_Inches
 * LCL.Carcass_Count_USR );

 // TH Tot Backfat Inches
 PAR.TH_Tot_Backfat_Inches = PAR.TH_Tot_Backfat_Inches + ( PAR.ET_Backfat_Thickness_Inch
 * LCL.Carcass_Count_USR );

 // TH Tot Light Reflectance
 PAR.TH_Tot_Light_Reflectance = PAR.TH_Tot_Light_Reflectance + ( PAR.ET_Light_Reflectance
 * LCL.Carcass_Count_USR );

 //?Weighted accumulated Lean%
 // Lean Percent
 LCL.Hot_Wgt_Weight_Ext_Usr = ( PAR.ET_Lean_Percent_NPPC * PAR.ET_Hot_Wgt )
 * LCL.Carcass_Count_USR;

 // PAR.Hot Wgt/Lean % Accum Usr = LCL.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/Lean % Accum Usr
 PAR.Hot_Wgt_Lean_Accum_Usr = LCL.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_Lean_Accum_Usr;

 //?Weighted accumulated Backfat
 // Backfat Thickness Inch
 LCL.Hot_Wgt_Weight_Ext_Usr = ( PAR.ET_Backfat_Thickness_Inch * PAR.ET_Hot_Wgt )
 * LCL.Carcass_Count_USR;

 // PAR.Hot Wgt/Backf Accum Usr = LCL.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/Backf Accum Usr
 PAR.Hot_Wgt_Backf_Accum_Usr = LCL.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_Backf_Accum_Usr;

 //?Weighted accumulated Loin Eye
 // Loin-Eye Depth Inches
 LCL.Hot_Wgt_Weight_Ext_Usr = ( PAR.ET_Loin_Eye_Depth_Inches * PAR.ET_Hot_Wgt )
 * LCL.Carcass_Count_USR;

 // PAR.Hot Wgt/Loine Accum Usr = LCL.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/Loine Accum Usr
 PAR.Hot_Wgt_Loine_Accum_Usr = LCL.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_Loine_Accum_Usr;

 //?Weighted accumulated Light Refl
 // Light Reflectances
 LCL.Hot_Wgt_Weight_Ext_Usr = ( PAR.ET_Light_Reflectance * PAR.ET_Hot_Wgt )
 * LCL.Carcass_Count_USR;

 // PAR.Hot Wgt/LghtR Accum Usr = LCL.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/LghtR Accum Usr
 PAR.Hot_Wgt_LghtR_Accum_Usr = LCL.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_LghtR_Accum_Usr;

 ENDDO;

 // PAR.TH Header Error Sts = CND.No Header Error
 PAR.TH_Header_Error_Sts = *BLANK;

 // PAR.TH Detail Error Sts = CND.No
 PAR.TH_Detail_Error_Sts = 'N';

 // PAR.TH Kill Balancing Sts = CND.Balance
 PAR.TH_Kill_Balancing_Sts = 'B';

 EXECUTE FUNCTION(Upd PHA Yld/LeanPrm   RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1226785;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_PHA_Yield_Percent);
 PARAMETER(PAR.TH_PHA_Lean_Prm_Crc_CWT);
 //?Validate Hot Weight and Balance Tattoo
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.TH Header Error Sts = CND.Header Error
 PAR.TH_Header_Error_Sts = 'E';

 // PAR.TH Detail Error Sts = CND.Yes
 PAR.TH_Detail_Error_Sts = 'Y';

 // PAR.TH Kill Balancing Sts = CND.Error
 PAR.TH_Kill_Balancing_Sts = 'E';

 EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(999999);
 PARAMETER('H');
 PARAMETER('HWA');
 PARAMETER('Hot Wgt for Adds Invalid');
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.RS_Record_Status);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  CASE;

  // IF PAR.KV Error Description is Entered
  IF PAR.KV_Error_Description <> *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
  PARAMETER(PAR.KV_Error_Code);
  PARAMETER(DB1.KV_Error_Description);
  {
   //?USER: Process Data record

   // PAR.EV Description = DB1.EV Description
   PAR.EV_Description = DB1.EV_Description;

  }

  ENDIF;

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDIF;

}


//?Create Eval Trans records.
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.TH Header Error Sts = CND.Header Error
LCL.TH_Header_Error_Sts = 'E';

// LCL.TH Detail Error Sts = CND.Yes
LCL.TH_Detail_Error_Sts = 'Y';

// LCL.TH Kill Balancing Sts = CND.Error
LCL.TH_Kill_Balancing_Sts = 'E';

EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(999998);
PARAMETER('H');
PARAMETER('PHA');
PARAMETER('Producer Hist Not Avail');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.RS_Record_Status);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 CASE;

 // IF PAR.KV Error Description is Entered
 IF PAR.KV_Error_Description <> *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
 PARAMETER(PAR.KV_Error_Code);
 PARAMETER(DB1.KV_Error_Description);
 {
  //?USER: Process Data record

  // PAR.EV Description = DB1.EV Description
  PAR.EV_Description = DB1.EV_Description;

 }

 ENDIF;

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(999999);
PARAMETER('H');
PARAMETER('PAN');
PARAMETER('% Analyzed < 75%');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.RS_Record_Status);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 CASE;

 // IF PAR.KV Error Description is Entered
 IF PAR.KV_Error_Description <> *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
 PARAMETER(PAR.KV_Error_Code);
 PARAMETER(DB1.KV_Error_Description);
 {
  //?USER: Process Data record

  // PAR.EV Description = DB1.EV Description
  PAR.EV_Description = DB1.EV_Description;

 }

 ENDIF;

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


ENDIF;

// IF LCL.TH Percent Analyzed is GE 75%
IF LCL.TH_Percent_Accepted >= 75.00;

// AND LCL.TH Percent Analyzed is LT 100%
AND LCL.TH_Percent_Accepted < 100.00;

EXECUTE FUNCTION(Bal Eval Trans w/AVG  IF) TYPE(EXCINTFUN)                      AB1226566;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.TH_Head_Killed);
PARAMETER(LCL.TH_Head_Adds);
PARAMETER(LCL.TH_Hot_Wgt);
PARAMETER(LCL.TH_Tot_Loin_Eye_Depth);
PARAMETER(LCL.TH_Tot_Backfat_Inches);
PARAMETER(LCL.TH_Tot_Light_Reflectance);
PARAMETER(LCL.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(LCL.TH_Avg_Light_Reflectance);
PARAMETER(LCL.TH_Avg_Lean_EXC_ADD);
PARAMETER(LCL.TH_Avg_Loin_Eye_Depth);
PARAMETER(LCL.TH_Avg_Backfat);
PARAMETER(LCL.TH_Header_Error_Sts);
PARAMETER(LCL.TH_Detail_Error_Sts);
PARAMETER(LCL.TH_Kill_Balancing_Sts);
PARAMETER(PAR.TH_Schedule_Kill_Shift);
PARAMETER(LCL.Net_Head_Usr);
PARAMETER(LCL.Hot_Wgt_Lean_Accum_Usr);
PARAMETER(LCL.Hot_Wgt_Backf_Accum_Usr);
PARAMETER(LCL.Hot_Wgt_Loine_Accum_Usr);
PARAMETER(LCL.Hot_Wgt_LghtR_Accum_Usr);
{
 //?Execute internal function

 // LCL.Carcass Count USR = PAR.Net Head Usr - PAR.TH Head Killed
 LCL.Carcass_Count_USR = PAR.Net_Head_Usr - PAR.TH_Head_Killed;

 // PAR.ET Adjust/Add Type = CND.Add w/Average Value
 PAR.ET_Adjust_Add_Type = 'ADD';

 // PAR.ET Hot Wgt = PAR.TH Avg Hot Wgt
 PAR.ET_Hot_Wgt = PAR.TH_Avg_Hot_Wgt;

 // PAR.ET Backfat Thickness Inch = PAR.TH Avg Backfat
 PAR.ET_Backfat_Thickness_Inch = PAR.TH_Avg_Backfat;

 // PAR.ET Loin-Eye Depth Inches = PAR.TH Avg Loin Eye Depth
 PAR.ET_Loin_Eye_Depth_Inches = PAR.TH_Avg_Loin_Eye_Depth;

 // PAR.ET Light Reflectance = PAR.TH Avg Light Reflectance
 PAR.ET_Light_Reflectance = PAR.TH_Avg_Light_Reflectance;

 // PAR.ET Lean Percent NPPC = PAR.TH Avg Lean Percent
 PAR.ET_Lean_Percent_NPPC = PAR.TH_Avg_Lean_Percent;

 //?*-------------------------------------------------------------*
 //?* 07/02/01 PKD Needed to calculate the MM Values so the Competitor
 //?*              calculations would calculate the Lean Premium
 //?*              correctly.
 //?* 08/19/04 PKD Validate the Hot Weight with Evaluation Validation
 //?*             Hot Weight range.  If the Hot Weight not within range
 //?*             then do not add carcasses and mark the tattoo with
 //?*             error.
 EXECUTE FUNCTION(Rtv Hot Weight Range  IF) TYPE(EXCINTFUN)                      AB1169711;
 PARAMETER(LCL.EV_Minimum);
 PARAMETER(LCL.EV_Maximum);
 {
  //?Execute internal function

  // PAR.EV Validation Code = CND.Carcass is Light Weight
  PAR.EV_Validation_Code = 'CLT';

  EXECUTE FUNCTION(Rtv Min/Max Values    RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1169636;
  PARAMETER(PAR.EV_Validation_Code);
  PARAMETER(WRK.EV_Minimum);
  PARAMETER(PAR.EV_Minimum);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.EV Validation Code = CND.Carcass has Double Weight
  PAR.EV_Validation_Code = 'CDB';

  EXECUTE FUNCTION(Rtv Min/Max Values    RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1169636;
  PARAMETER(PAR.EV_Validation_Code);
  PARAMETER(PAR.EV_Maximum);
  PARAMETER(WRK.EV_Maximum);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

 }

 CASE;

 // IF PAR.ET Hot Wgt GE LCL.EV Minimum
 IF PAR.ET_Hot_Wgt >= LCL.EV_Minimum;

 // AND PAR.ET Hot Wgt LE LCL.EV Maximum
 AND PAR.ET_Hot_Wgt <= LCL.EV_Maximum;

 // LCL.Calculate All Usr = CND.Yes
 LCL.Calculate_All_Usr = 'Y';

 // Call program Clc Inch to MM/Lean%FOM.
 CALL PROGRAM(Clc Inch to MM/Lean%FOM) ('PKINMMLP');
 PARAMETER(PAR.ET_Lean_Percent_NPPC);
 PARAMETER(PAR.ET_Backfat_Thickness_Inch);
 PARAMETER(PAR.ET_Loin_Eye_Depth_Inches);
 PARAMETER(PAR.ET_Light_Reflectance);
 PARAMETER(PAR.ET_Backfat_Thickness_MM);
 PARAMETER(PAR.ET_Loineye_Depth_MM);
 PARAMETER(PAR.ET_Light_Reflectance_MM);
 PARAMETER(PAR.ET_Lean_Percent_FOM);
 PARAMETER(LCL.Calculate_All_Usr);

 //?*-------------------------------------------------------------*
 //?* 07/02/01 PKD Changed the parameters to pass in the PAR values
 //?*              instead of zeros for the MM values.
 //?* 05/28/04 SLM HPEBAL Populate the new parm on the et adjust/add source
 EXECUTE FUNCTION(Crt Eval Trans Rec    IF) TYPE(EXCINTFUN)                      AB1136539;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(LCL.ET_Scale_Sequence_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Schedule_Kill_Shift);
 PARAMETER(PAR.ET_Hot_Wgt);
 PARAMETER(PAR.ET_Backfat_Thickness_Inch);
 PARAMETER(PAR.ET_Loin_Eye_Depth_Inches);
 PARAMETER(PAR.ET_Lean_Percent_NPPC);
 PARAMETER(PAR.ET_Backfat_Thickness_MM);
 PARAMETER(PAR.ET_Loineye_Depth_MM);
 PARAMETER(PAR.ET_Light_Reflectance_MM);
 PARAMETER(PAR.ET_Lean_Percent_FOM);
 PARAMETER(PAR.ET_Light_Reflectance);
 PARAMETER(*BLANK);
 PARAMETER('U');
 PARAMETER('B');
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(PAR.ET_Adjust_Add_Type);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Carcass_Count_USR);
 {
  //?Execute internal function

  // PAR.Carcass number        USR = PAR.Carcass Count USR
  PAR.Carcass_number_USR = PAR.Carcass_Count_USR;

  // DOW PAR.Carcass number        USR is GT Zero
  DOW PAR.Carcass_number_USR > *ZERO;

  EXECUTE FUNCTION(Rtv Eval Next#        RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1135496;
  PARAMETER(PAR.ET_Company_Number);
  PARAMETER(PAR.ET_Kill_Date);
  PARAMETER(PAR.ET_Scale_Sequence_Number);
  {
   //?USER: Processing if Data record not found

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.ET_Scale_Sequence_Number = 1;

   QUIT;

   //?USER: Process Data record

   CASE;

   // IF DB1.ET Scale Sequence Number is Entry Allowed
   IF DB1.ET_Scale_Sequence_Number >= 000001;
   AND DB1.ET_Scale_Sequence_Number <= 699999;

   // PAR.ET Scale Sequence Number = DB1.ET Scale Sequence Number + CON.1
   PAR.ET_Scale_Sequence_Number = DB1.ET_Scale_Sequence_Number + 1;

   QUIT;

   ENDIF;

  }

  EXECUTE FUNCTION(Create Evaluation Transac) TYPE(CRTOBJ) FILE(PKBVCPP)          AB1102931;
  PARAMETER(PAR.ET_Company_Number);
  PARAMETER(PAR.ET_Kill_Date);
  PARAMETER(PAR.ET_Scale_Sequence_Number);
  PARAMETER(PAR.ET_Scale_Sequence_Number);
  PARAMETER(000001);
  PARAMETER(PAR.ET_Tattoo_Number);
  PARAMETER(PAR.ET_Lot);
  PARAMETER(PAR.ET_Shift);
  PARAMETER(PAR.ET_Hot_Wgt);
  PARAMETER(PAR.ET_Backfat_Thickness_Inch);
  PARAMETER(PAR.ET_Loin_Eye_Depth_Inches);
  PARAMETER(PAR.ET_Lean_Percent_NPPC);
  PARAMETER(PAR.ET_Backfat_Thickness_MM);
  PARAMETER(PAR.ET_Loineye_Depth_MM);
  PARAMETER(PAR.ET_Light_Reflectance_MM);
  PARAMETER(PAR.ET_Lean_Percent_FOM);
  PARAMETER(PAR.ET_Light_Reflectance);
  PARAMETER(PAR.ET_Trim_Area);
  PARAMETER(PAR.ET_Carcass_Sex);
  PARAMETER(PAR.ET_Error_Sts);
  PARAMETER(PAR.ET_Record_Add_Del_Sts);
  PARAMETER(PAR.ET_Record_Created_W_Avg);
  PARAMETER(PAR.ET_Record_Created_Status);
  PARAMETER(PAR.ET_User_Error_Override);
  PARAMETER(PAR.ET_Adjust_Add_Type);
  PARAMETER(PAR.ET_Broken_Back_Sts);
  PARAMETER(PAR.ET_Unused_Sts_2);
  PARAMETER(PAR.ET_Adjust_Add_Source);
  PARAMETER(PAR.ET_Unused_Sts_4);
  PARAMETER(PAR.ET_Unused_Sts_5);
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.RU_Date);
  PARAMETER(PAR.RU_Time);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(*MISSING);
   PARAMETER(*MISSING);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  // PAR.Carcass number        USR = PAR.Carcass number        USR - CON.1
  PAR.Carcass_number_USR = PAR.Carcass_number_USR - 1;

  ENDDO;

 }

 //?*-------------------------------------------------------------*
 // PAR.TH Head Adds = LCL.Carcass Count USR
 PAR.TH_Head_Adds = LCL.Carcass_Count_USR;

 //?Accumulate Totals
 DO;

 //?Accumulate totals
 // PAR.TH Head Killed = PAR.TH Head Killed + LCL.Carcass Count USR
 PAR.TH_Head_Killed = PAR.TH_Head_Killed + LCL.Carcass_Count_USR;

 // TH Tot Loin Eye Depth
 PAR.TH_Tot_Loin_Eye_Depth = PAR.TH_Tot_Loin_Eye_Depth + ( PAR.ET_Loin_Eye_Depth_Inches
 * LCL.Carcass_Count_USR );

 // TH Tot Backfat Inches
 PAR.TH_Tot_Backfat_Inches = PAR.TH_Tot_Backfat_Inches + ( PAR.ET_Backfat_Thickness_Inch
 * LCL.Carcass_Count_USR );

 // TH Tot Light Reflectance
 PAR.TH_Tot_Light_Reflectance = PAR.TH_Tot_Light_Reflectance + ( PAR.ET_Light_Reflectance
 * LCL.Carcass_Count_USR );

 // TH Hot Wgt
 PAR.TH_Hot_Wgt = PAR.TH_Hot_Wgt + ( PAR.ET_Hot_Wgt * LCL.Carcass_Count_USR );

 //?Weighted accumulated Lean%
 // Lean Percent
 LCL.Hot_Wgt_Weight_Ext_Usr = ( PAR.ET_Lean_Percent_NPPC * PAR.ET_Hot_Wgt )
 * LCL.Carcass_Count_USR;

 // PAR.Hot Wgt/Lean % Accum Usr = LCL.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/Lean % Accum Usr
 PAR.Hot_Wgt_Lean_Accum_Usr = LCL.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_Lean_Accum_Usr;

 //?Weighted accumulated Backfat
 // Backfat Thickness Inch
 LCL.Hot_Wgt_Weight_Ext_Usr = ( PAR.ET_Backfat_Thickness_Inch * PAR.ET_Hot_Wgt )
 * LCL.Carcass_Count_USR;

 // PAR.Hot Wgt/Backf Accum Usr = LCL.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/Backf Accum Usr
 PAR.Hot_Wgt_Backf_Accum_Usr = LCL.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_Backf_Accum_Usr;

 //?Weighted accumulated Loin Eye
 // Loin-Eye Depth Inches
 LCL.Hot_Wgt_Weight_Ext_Usr = ( PAR.ET_Loin_Eye_Depth_Inches * PAR.ET_Hot_Wgt )
 * LCL.Carcass_Count_USR;

 // PAR.Hot Wgt/Loine Accum Usr = LCL.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/Loine Accum Usr
 PAR.Hot_Wgt_Loine_Accum_Usr = LCL.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_Loine_Accum_Usr;

 //?Weighted accumulated Light Refl
 // Light Reflectances
 LCL.Hot_Wgt_Weight_Ext_Usr = ( PAR.ET_Light_Reflectance * PAR.ET_Hot_Wgt )
 * LCL.Carcass_Count_USR;

 // PAR.Hot Wgt/LghtR Accum Usr = LCL.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/LghtR Accum Usr
 PAR.Hot_Wgt_LghtR_Accum_Usr = LCL.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_LghtR_Accum_Usr;

 ENDDO;

 // PAR.TH Header Error Sts = CND.No Header Error
 PAR.TH_Header_Error_Sts = *BLANK;

 // PAR.TH Detail Error Sts = CND.No
 PAR.TH_Detail_Error_Sts = 'N';

 // PAR.TH Kill Balancing Sts = CND.Balance
 PAR.TH_Kill_Balancing_Sts = 'B';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.TH Header Error Sts = CND.Header Error
 PAR.TH_Header_Error_Sts = 'E';

 // PAR.TH Detail Error Sts = CND.Yes
 PAR.TH_Detail_Error_Sts = 'Y';

 // PAR.TH Kill Balancing Sts = CND.Error
 PAR.TH_Kill_Balancing_Sts = 'E';

 EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(999999);
 PARAMETER('H');
 PARAMETER('HWA');
 PARAMETER('Hot Wgt for Adds Invalid');
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.RS_Record_Status);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  CASE;

  // IF PAR.KV Error Description is Entered
  IF PAR.KV_Error_Description <> *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
  PARAMETER(PAR.KV_Error_Code);
  PARAMETER(DB1.KV_Error_Description);
  {
   //?USER: Process Data record

   // PAR.EV Description = DB1.EV Description
   PAR.EV_Description = DB1.EV_Description;

  }

  ENDIF;

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDIF;

}


// Retrieve message - '> or = 75% and < 100% Accepted:  Caracss data Added at the'
LCL.THC_Comment = RTVMSG(PRK0938);

EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.THC_Comment_Line);
PARAMETER(LCL.THC_Comment);
PARAMETER('P');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 {
  //?USER: Processing if Data record not found

  // PAR.THC Comment Line = CON.1
  PAR.THC_Comment_Line = 1;

  //?USER: Process Data record

  // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
  PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 PARAMETER(PAR.THC_Comment);
 PARAMETER(PAR.THC_Comment_Type);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


// Retrieve message - 'Average Carcass Value of the Lot.'
LCL.THC_Comment = RTVMSG(PRK0949);

EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.THC_Comment_Line);
PARAMETER(LCL.THC_Comment);
PARAMETER('P');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 {
  //?USER: Processing if Data record not found

  // PAR.THC Comment Line = CON.1
  PAR.THC_Comment_Line = 1;

  //?USER: Process Data record

  // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
  PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 PARAMETER(PAR.THC_Comment);
 PARAMETER(PAR.THC_Comment_Type);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


// IF LCL.TH Percent Analyzed is GT 100%
IF LCL.TH_Percent_Accepted > 100.00;

// AND LCL.TH Percent Analyzed is LE 105%
AND LCL.TH_Percent_Accepted <= 105.00;

EXECUTE FUNCTION(Bal Eval Trans w/EXC  IF) TYPE(EXCINTFUN)                      AB1226575;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.TH_Head_Killed);
PARAMETER(LCL.TH_Hot_Wgt);
PARAMETER(LCL.TH_Tot_Loin_Eye_Depth);
PARAMETER(LCL.TH_Tot_Backfat_Inches);
PARAMETER(LCL.TH_Tot_Light_Reflectance);
PARAMETER(LCL.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(LCL.TH_Avg_Light_Reflectance);
PARAMETER(LCL.TH_Avg_Lean_EXC_ADD);
PARAMETER(LCL.TH_Avg_Loin_Eye_Depth);
PARAMETER(LCL.TH_Avg_Backfat);
PARAMETER(LCL.TH_Header_Error_Sts);
PARAMETER(LCL.TH_Detail_Error_Sts);
PARAMETER(LCL.TH_Kill_Balancing_Sts);
PARAMETER(LCL.TH_Head_Excluded);
PARAMETER(LCL.Net_Head_Usr);
PARAMETER(LCL.Hot_Wgt_Lean_Accum_Usr);
PARAMETER(LCL.Hot_Wgt_Backf_Accum_Usr);
PARAMETER(LCL.Hot_Wgt_Loine_Accum_Usr);
PARAMETER(LCL.Hot_Wgt_LghtR_Accum_Usr);
{
 //?Execute internal function

 //?*** 9/17/2018 slm
 //?Modification History
 DO;

 //?*** 9/17/2018 slm
 //?*** 9/17/2018 Change RTV to use lf -- no errors
 ENDDO;

 // LCL.Carcass Count USR = PAR.Net Head Usr - PAR.TH Head Killed
 LCL.Carcass_Count_USR = PAR.Net_Head_Usr - PAR.TH_Head_Killed;

 CASE;

 // IF LCL.Carcass Count USR is NE Zero
 IF LCL.Carcass_Count_USR <> *ZERO;

 // LCL.Carcass Count USR = LCL.Carcass Count USR * CON.-1 *
 LCL.Carcass_Count_USR = LCL.Carcass_Count_USR * -1;

 //?*** 9/17/2018 slm
 //?*** 9/17/2018 Change RTV to use lf -- no errors
 EXECUTE FUNCTION(Bal Eval Trans w/EXC  RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1226579;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TH_Avg_Lean_Percent);
 PARAMETER(PAR.TH_Avg_Hot_Wgt);
 PARAMETER(LCL.Carcass_Count_USR);
 PARAMETER(PAR.TH_Head_Killed);
 PARAMETER(PAR.TH_Header_Error_Sts);
 PARAMETER(PAR.TH_Detail_Error_Sts);
 PARAMETER(PAR.TH_Kill_Balancing_Sts);
 PARAMETER(PAR.TH_Head_Excluded);
 PARAMETER(LCL.Count_USR);
 {
  //?USER: Initialize routine

  // PAR.Count USR = CON.*ZERO
  PAR.Count_USR = *ZERO;

  // PAR.TH Header Error Sts = CND.No Header Error
  PAR.TH_Header_Error_Sts = *BLANK;

  // PAR.TH Detail Error Sts = CND.No
  PAR.TH_Detail_Error_Sts = 'N';

  // PAR.TH Kill Balancing Sts = CND.Balance
  PAR.TH_Kill_Balancing_Sts = 'B';

  //?USER: Processing if Data record not found

  // PAR.TH Header Error Sts = CND.No Kill Information
  PAR.TH_Header_Error_Sts = 'K';

  // PAR.TH Detail Error Sts = CND.Yes
  PAR.TH_Detail_Error_Sts = 'Y';

  // PAR.TH Kill Balancing Sts = CND.Error
  PAR.TH_Kill_Balancing_Sts = 'E';

  //?USER: Process Data record

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

  CASE;

  // IF PAR.Count USR GT PAR.Carcass Count USR
  IF PAR.Count_USR > PAR.Carcass_Count_USR;

  QUIT;

  ENDIF;

  EXECUTE FUNCTION(Chg Add/Del Status    CH) TYPE(CHGOBJ) FILE(PKBVCPP)           AB1226580;
  PARAMETER(DB1.ET_Company_Number);
  PARAMETER(DB1.ET_Kill_Date);
  PARAMETER(DB1.ET_Scale_Sequence_Number);
  PARAMETER(DB1.ET_Carcass_Number);
  PARAMETER(DB1.ET_Carcass_Number_Insert);
  PARAMETER('D');
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  // PAR.TH Head Excluded = PAR.TH Head Excluded + CON.1
  PAR.TH_Head_Excluded = PAR.TH_Head_Excluded + 1;

  // PAR.TH Head Killed = PAR.TH Head Killed - CON.1
  PAR.TH_Head_Killed = PAR.TH_Head_Killed - 1;

 }

 //?4/5/04 RMC Delete carcs in reverse order if necessary to meet carc count
 CASE;

 // IF LCL.Count USR LT LCL.Carcass Count USR
 IF LCL.Count_USR < LCL.Carcass_Count_USR;

 EXECUTE FUNCTION(Bal Eval Trans w/EXC2 RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1259280;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TH_Avg_Lean_Percent);
 PARAMETER(PAR.TH_Avg_Hot_Wgt);
 PARAMETER(LCL.Carcass_Count_USR);
 PARAMETER(PAR.TH_Head_Killed);
 PARAMETER(PAR.TH_Header_Error_Sts);
 PARAMETER(PAR.TH_Detail_Error_Sts);
 PARAMETER(PAR.TH_Kill_Balancing_Sts);
 PARAMETER(PAR.TH_Head_Excluded);
 PARAMETER(LCL.Count_USR);
 {
  //?USER: Initialize routine

  // PAR.TH Header Error Sts = CND.No Header Error
  PAR.TH_Header_Error_Sts = *BLANK;

  // PAR.TH Detail Error Sts = CND.No
  PAR.TH_Detail_Error_Sts = 'N';

  // PAR.TH Kill Balancing Sts = CND.Balance
  PAR.TH_Kill_Balancing_Sts = 'B';

  //?USER: Processing if Data record not found

  // PAR.TH Header Error Sts = CND.No Kill Information
  PAR.TH_Header_Error_Sts = 'K';

  // PAR.TH Detail Error Sts = CND.Yes
  PAR.TH_Detail_Error_Sts = 'Y';

  // PAR.TH Kill Balancing Sts = CND.Error
  PAR.TH_Kill_Balancing_Sts = 'E';

  //?USER: Process Data record

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

  CASE;

  // IF PAR.Count USR GT PAR.Carcass Count USR
  IF PAR.Count_USR > PAR.Carcass_Count_USR;

  QUIT;

  ENDIF;

  EXECUTE FUNCTION(Chg Add/Del Status    CH) TYPE(CHGOBJ) FILE(PKBVCPP)           AB1226580;
  PARAMETER(DB1.ET_Company_Number);
  PARAMETER(DB1.ET_Kill_Date);
  PARAMETER(DB1.ET_Scale_Sequence_Number);
  PARAMETER(DB1.ET_Carcass_Number);
  PARAMETER(DB1.ET_Carcass_Number_Insert);
  PARAMETER('D');
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  // PAR.TH Head Excluded = PAR.TH Head Excluded + CON.1
  PAR.TH_Head_Excluded = PAR.TH_Head_Excluded + 1;

  // PAR.TH Head Killed = PAR.TH Head Killed - CON.1
  PAR.TH_Head_Killed = PAR.TH_Head_Killed - 1;

 }

 ENDIF;

 //?Subtract from Totals
 DO;

 //?Accumulate totals
 // Tot Loin Eye Depth
 PAR.TH_Tot_Loin_Eye_Depth = PAR.TH_Tot_Loin_Eye_Depth - ( PAR.TH_Avg_Loin_Eye_Depth
 * LCL.Carcass_Count_USR 'H' );

 // Tot Backfat Inches
 PAR.TH_Tot_Backfat_Inches = PAR.TH_Tot_Backfat_Inches - ( PAR.TH_Avg_Backfat
 * LCL.Carcass_Count_USR 'H' );

 // Tot Light Reflectance
 PAR.TH_Tot_Light_Reflectance = PAR.TH_Tot_Light_Reflectance - (
 PAR.TH_Avg_Light_Reflectance * LCL.Carcass_Count_USR 'H' );

 // Hot Wgt
 PAR.TH_Hot_Wgt = PAR.TH_Hot_Wgt - ( PAR.TH_Avg_Hot_Wgt * LCL.Carcass_Count_USR 'H' );

 //?Weighted accumulated Lean%
 // LCL.Hot Wgt/Weight Ext Usr = PAR.TH Avg Hot Wgt * PAR.TH Avg Lean Percent *
 LCL.Hot_Wgt_Weight_Ext_Usr = PAR.TH_Avg_Hot_Wgt * PAR.TH_Avg_Lean_Percent;

 // Hot Wgt/Lean % Accum Usr
 PAR.Hot_Wgt_Lean_Accum_Usr = PAR.Hot_Wgt_Lean_Accum_Usr - ( LCL.Hot_Wgt_Weight_Ext_Usr
 * LCL.Carcass_Count_USR 'H' );

 //?Weighted accumulated Backfat
 // LCL.Hot Wgt/Weight Ext Usr = PAR.TH Avg Hot Wgt * PAR.TH Avg Backfat *
 LCL.Hot_Wgt_Weight_Ext_Usr = PAR.TH_Avg_Hot_Wgt * PAR.TH_Avg_Backfat;

 // Hot Wgt/Backf Accum Usr
 PAR.Hot_Wgt_Backf_Accum_Usr = PAR.Hot_Wgt_Backf_Accum_Usr - ( LCL.Hot_Wgt_Weight_Ext_Usr
 * LCL.Carcass_Count_USR 'H' );

 //?Weighted accumulated Loin Eye
 // LCL.Hot Wgt/Weight Ext Usr = PAR.TH Avg Hot Wgt * PAR.TH Avg Loin Eye Depth *
 LCL.Hot_Wgt_Weight_Ext_Usr = PAR.TH_Avg_Hot_Wgt * PAR.TH_Avg_Loin_Eye_Depth;

 // Hot Wgt/Loine Accum Usr
 PAR.Hot_Wgt_Loine_Accum_Usr = PAR.Hot_Wgt_Loine_Accum_Usr - ( LCL.Hot_Wgt_Weight_Ext_Usr
 * LCL.Carcass_Count_USR 'H' );

 //?Weighted accumulated Light Refl
 // LCL.Hot Wgt/Weight Ext Usr = PAR.TH Avg Hot Wgt * PAR.TH Avg Light Reflectance *
 LCL.Hot_Wgt_Weight_Ext_Usr = PAR.TH_Avg_Hot_Wgt * PAR.TH_Avg_Light_Reflectance;

 // Hot Wgt/LghtR Accum Usr
 PAR.Hot_Wgt_LghtR_Accum_Usr = PAR.Hot_Wgt_LghtR_Accum_Usr - ( LCL.Hot_Wgt_Weight_Ext_Usr
 * LCL.Carcass_Count_USR 'H' );

 ENDDO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.TH Header Error Sts = CND.No Header Error
 PAR.TH_Header_Error_Sts = *BLANK;

 // PAR.TH Detail Error Sts = CND.No
 PAR.TH_Detail_Error_Sts = 'N';

 // PAR.TH Kill Balancing Sts = CND.Balance
 PAR.TH_Kill_Balancing_Sts = 'B';

 ENDIF;

}


// Retrieve message - '> 100% but < or = 105% Accepted:  To balance the Lot,'
LCL.THC_Comment = RTVMSG(PRK0939);

EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.THC_Comment_Line);
PARAMETER(LCL.THC_Comment);
PARAMETER('P');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 {
  //?USER: Processing if Data record not found

  // PAR.THC Comment Line = CON.1
  PAR.THC_Comment_Line = 1;

  //?USER: Process Data record

  // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
  PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 PARAMETER(PAR.THC_Comment);
 PARAMETER(PAR.THC_Comment_Type);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


// Retrieve message - 'deducted Average Gross Value for the Lot multiplied by the'
LCL.THC_Comment = RTVMSG(PRK0940);

EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.THC_Comment_Line);
PARAMETER(LCL.THC_Comment);
PARAMETER('P');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 {
  //?USER: Processing if Data record not found

  // PAR.THC Comment Line = CON.1
  PAR.THC_Comment_Line = 1;

  //?USER: Process Data record

  // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
  PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 PARAMETER(PAR.THC_Comment);
 PARAMETER(PAR.THC_Comment_Type);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


// Retrieve message - 'number of extra head Accepted.'
LCL.THC_Comment = RTVMSG(PRK0950);

EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.THC_Comment_Line);
PARAMETER(LCL.THC_Comment);
PARAMETER('P');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 {
  //?USER: Processing if Data record not found

  // PAR.THC Comment Line = CON.1
  PAR.THC_Comment_Line = 1;

  //?USER: Process Data record

  // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
  PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 PARAMETER(PAR.THC_Comment);
 PARAMETER(PAR.THC_Comment_Type);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


ENDIF;

ENDIF;

ENDIF;

//?*---------------------------------------------------*
//?08/18/04 SLM HPEBAL - External process * out
//?Re-Calculate Tattoo Header Averages/yield
DO;

//?Calculate Adj Actual Yield
DO;

CASE;

// IF LCL.TH Adj Live Wgt NE LCL.Zero USR
IF LCL.TH_Adj_Live_Wgt <> LCL.Zero_USR;

//?actual yield percent: hot w / live wgt * 100
// Adj Actual Yield
LCL.TH_Adj_Actual_Yield = ( LCL.TH_Hot_Wgt / LCL.TH_Adj_Live_Wgt 'H' ) * 100 'H';

// LCL.TH Yld Parm Adj Yield% = LCL.TH Adj Actual Yield %
LCL.TH_Yld_Parm_Adj_Yield = LCL.TH_Adj_Actual_Yield;

ENDIF;

ENDDO;

//?Calculate Hot Weight
CASE;

// IF LCL.TH Head Killed NE LCL.Zero USR
IF LCL.TH_Head_Killed <> LCL.Zero_USR;

//?Accumulated totals div by head killed
// LCL.TH Avg Hot Wgt = LCL.TH Hot Wgt / LCL.TH Head Killed *Rounded
LCL.TH_Avg_Hot_Wgt = LCL.TH_Hot_Wgt / LCL.TH_Head_Killed 'H';

//?Calculate Hot Weight
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.TH Avg Hot Wgt = CON.*ZERO
LCL.TH_Avg_Hot_Wgt = *ZERO;

ENDIF;

//?Weighted Averages
CASE;

// IF LCL.TH Hot Wgt NE LCL.Zero USR
IF LCL.TH_Hot_Wgt <> LCL.Zero_USR;

//?Weighted average
// LCL.TH Avg Lean Percent = LCL.Hot Wgt/Lean % Accum Usr / LCL.TH Hot Wgt *Rounded
LCL.TH_Avg_Lean_Percent = LCL.Hot_Wgt_Lean_Accum_Usr / LCL.TH_Hot_Wgt 'H';

// LCL.TH Avg Backfat = LCL.Hot Wgt/Backf Accum Usr / LCL.TH Hot Wgt *Rounded
LCL.TH_Avg_Backfat = LCL.Hot_Wgt_Backf_Accum_Usr / LCL.TH_Hot_Wgt 'H';

// LCL.TH Avg Loin Eye Depth = LCL.Hot Wgt/Loine Accum Usr / LCL.TH Hot Wgt *Rounded
LCL.TH_Avg_Loin_Eye_Depth = LCL.Hot_Wgt_Loine_Accum_Usr / LCL.TH_Hot_Wgt 'H';

// LCL.TH Avg Light Reflectance = LCL.Hot Wgt/LghtR Accum Usr / LCL.TH Hot Wgt *Rounded
LCL.TH_Avg_Light_Reflectance = LCL.Hot_Wgt_LghtR_Accum_Usr / LCL.TH_Hot_Wgt 'H';

//?Weighted Averages
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.TH Avg Lean Percent = CON.*ZERO
LCL.TH_Avg_Lean_Percent = *ZERO;

// LCL.TH Avg Backfat = CON.*ZERO
LCL.TH_Avg_Backfat = *ZERO;

// LCL.TH Avg Loin Eye Depth = CON.*ZERO
LCL.TH_Avg_Loin_Eye_Depth = *ZERO;

// LCL.TH Avg Light Reflectance = CON.*ZERO
LCL.TH_Avg_Light_Reflectance = *ZERO;

ENDIF;

//?Actual Yield Percent
CASE;

// IF PAR.TH Live Wgt NE LCL.Zero USR
IF PAR.TH_Live_Wgt <> LCL.Zero_USR;

//?actual yield percent: hot w / live wgt * 100
// TH Actual Yield Percent
LCL.TH_Actual_Yield = ( LCL.TH_Hot_Wgt / PAR.TH_Live_Wgt 'H' ) * 100 'H';

//?Actual Yield Percent
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.TH Actual Yield % = CON.*ZERO
LCL.TH_Actual_Yield = *ZERO;

ENDIF;

ENDDO;

EXECUTE FUNCTION(Upd Val Kill Trans    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1240659;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.TH_Recalc_Live_Wgt_Yld);
PARAMETER(LCL.TH_Head_Condemned);
PARAMETER(LCL.TH_Head_Killed);
PARAMETER(LCL.TH_Head_Adds);
PARAMETER(LCL.TH_Head_Accepted);
PARAMETER(LCL.TH_Adj_Live_Wgt);
PARAMETER(LCL.TH_Hot_Wgt);
PARAMETER(LCL.TH_Tot_Loin_Eye_Depth);
PARAMETER(LCL.TH_Tot_Backfat_Inches);
PARAMETER(LCL.TH_Tot_Light_Reflectance);
PARAMETER(LCL.TH_Avg_Hot_Wgt);
PARAMETER(LCL.TH_Avg_Light_Reflectance);
PARAMETER(LCL.TH_Avg_Lean_Percent);
PARAMETER(LCL.TH_Avg_Loin_Eye_Depth);
PARAMETER(LCL.TH_Avg_Backfat);
PARAMETER(LCL.TH_Actual_Yield);
PARAMETER(LCL.TH_Adj_Actual_Yield);
PARAMETER(LCL.TH_Fixed_Cost_Amount);
PARAMETER(LCL.TH_Header_Error_Sts);
PARAMETER(LCL.TH_Detail_Error_Sts);
PARAMETER(LCL.TH_Kill_Balancing_Sts);
PARAMETER(LCL.TH_Bal_to_Kill_Gen);
PARAMETER(LCL.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(LCL.TH_Head_Excluded);
PARAMETER(LCL.TH_Avg_Lean_EXC_ADD);
PARAMETER(LCL.TH_Head_Identified);
PARAMETER(LCL.TH_Percent_Identified);
PARAMETER(LCL.TH_Percent_Accepted);
PARAMETER(LCL.TH_Head_Adjusted_LN);
PARAMETER(LCL.TH_PHA_Head_Adds);
PARAMETER(LCL.TH_PHA_Add_Type);
PARAMETER(LCL.TH_PHA_Average_Type);
PARAMETER(LCL.TH_PHA_Add_Reason);
PARAMETER(LCL.TH_PHA_Yield_Percent);
PARAMETER(LCL.TH_PHA_Lean_Prm_Crc_CWT);
PARAMETER(LCL.TH_Yld_Parm_Adj_Yield);
PARAMETER(LCL.TH_PHA_Sort_Disc_Fctr);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Val Kill Trans    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1190805;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(PAR.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(PAR.TH_Head_Condemned);
 PARAMETER(PAR.TH_Head_Killed);
 PARAMETER(PAR.TH_Head_Adds);
 PARAMETER(PAR.TH_Head_Accepted);
 PARAMETER(PAR.TH_Adj_Live_Wgt);
 PARAMETER(PAR.TH_Hot_Wgt);
 PARAMETER(PAR.TH_Tot_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Tot_Backfat_Inches);
 PARAMETER(PAR.TH_Tot_Light_Reflectance);
 PARAMETER(PAR.TH_Avg_Hot_Wgt);
 PARAMETER(PAR.TH_Avg_Light_Reflectance);
 PARAMETER(PAR.TH_Avg_Lean_Percent);
 PARAMETER(PAR.TH_Avg_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Avg_Backfat);
 PARAMETER(PAR.TH_Actual_Yield);
 PARAMETER(PAR.TH_Adj_Actual_Yield);
 PARAMETER(PAR.TH_Fixed_Cost_Amount);
 PARAMETER(PAR.TH_Header_Error_Sts);
 PARAMETER(PAR.TH_Detail_Error_Sts);
 PARAMETER(PAR.TH_Kill_Balancing_Sts);
 PARAMETER(PAR.TH_Bal_to_Kill_Gen);
 PARAMETER(PAR.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(PAR.TH_Head_Excluded);
 PARAMETER(PAR.TH_Avg_Lean_EXC_ADD);
 PARAMETER(PAR.TH_Head_Identified);
 PARAMETER(PAR.TH_Percent_Identified);
 PARAMETER(PAR.TH_Percent_Accepted);
 PARAMETER(PAR.TH_Head_Adjusted_LN);
 PARAMETER(PAR.TH_PHA_Head_Adds);
 PARAMETER(PAR.TH_PHA_Add_Type);
 PARAMETER(PAR.TH_PHA_Average_Type);
 PARAMETER(PAR.TH_PHA_Add_Reason);
 PARAMETER(PAR.TH_PHA_Yield_Percent);
 PARAMETER(PAR.TH_PHA_Lean_Prm_Crc_CWT);
 PARAMETER(PAR.TH_Yld_Parm_Adj_Yield);
 PARAMETER(PAR.TH_PHA_Sort_Disc_Fctr);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


//?05/28/04 SLM HPEBAL - Chg object was * out to removed for clean up
//?                      * out in 12/01, the UPD above looks like it
//?                      replace the chg object.
//?05/28/04 SLM HPEBAL - Add new condition of RECALC
//?                      for the Yield Parameter Balancing
//?                      * out old case and copied new case
//?08/18/04 SLM HPEBAL - External and Internals Hogs with same
//?                      validation rules --- Yeilds
//?Extrnl or Int:  Yield Parameter Balancing
CASE;

// IF LCL.Net Head Usr is GT Zero
IF LCL.Net_Head_Usr > *ZERO;

// AND PAR.Bal w/History is *None
AND PAR.Bal_w_History = *BLANK;

// AND PAR.TH Recalc Live Wgt is EQ Zero
AND PAR.TH_Recalc_Live_Wgt = *ZERO;

//?05/27/04 SLM HPEBAL Added the above check on Recalc live weight
//?Re-Calculate for Held Overs: Adj Yield%
CASE;

// IF PAR.TH Held Over Record is Yes
IF PAR.TH_Held_Over_Record = 'Y';

// OR LCL.TH Bal to Kill Gen is User Requested Generated
OR ( LCL.TH_Bal_to_Kill_Gen = 'U';

// AND PAR.TH Held Over is greater than 0
AND PAR.TH_Held_Over > *ZERO );

//?** WRK is accumulated values, LCL is for current record. **
//?   We will overlay the LCL values of current record with both
//?   days combined.
//?Combine the two days for hold over.
EXECUTE FUNCTION(Rtv Tot Hd ID/Anl/Net RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1240203;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(WRK.TH_Head_Received);
PARAMETER(WRK.TH_Yard_Deads);
PARAMETER(WRK.TH_Head_Condemned);
PARAMETER(WRK.TH_Head_Killed);
PARAMETER(WRK.TH_Head_Accepted);
PARAMETER(WRK.TH_Live_Wgt);
PARAMETER(WRK.TH_Adj_Live_Wgt);
PARAMETER(WRK.TH_Hot_Wgt);
PARAMETER(WRK.TH_Head_Identified);
PARAMETER(WRK.Hot_Wgt_Lean_Accum_Usr);
PARAMETER(WRK.Hot_Wgt_Backf_Accum_Usr);
PARAMETER(WRK.Hot_Wgt_Loine_Accum_Usr);
PARAMETER(WRK.Hot_Wgt_LghtR_Accum_Usr);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.TH Head Received = PAR.TH Head Received + DB1.TH Head Received
 PAR.TH_Head_Received = PAR.TH_Head_Received + DB1.TH_Head_Received;

 // PAR.TH Yard Deads = PAR.TH Yard Deads + DB1.TH Yard Deads
 PAR.TH_Yard_Deads = PAR.TH_Yard_Deads + DB1.TH_Yard_Deads;

 // PAR.TH Head Condemned = PAR.TH Head Condemned + DB1.TH Head Condemned
 PAR.TH_Head_Condemned = PAR.TH_Head_Condemned + DB1.TH_Head_Condemned;

 // PAR.TH Head Killed = PAR.TH Head Killed + DB1.TH Head Killed
 PAR.TH_Head_Killed = PAR.TH_Head_Killed + DB1.TH_Head_Killed;

 // PAR.TH Head Accepted = PAR.TH Head Accepted + DB1.TH Head Accepted
 PAR.TH_Head_Accepted = PAR.TH_Head_Accepted + DB1.TH_Head_Accepted;

 // PAR.TH Head Identified = PAR.TH Head Identified + DB1.TH Head Identified
 PAR.TH_Head_Identified = PAR.TH_Head_Identified + DB1.TH_Head_Identified;

 // PAR.TH Live Wgt = PAR.TH Live Wgt + DB1.TH Live Wgt
 PAR.TH_Live_Wgt = PAR.TH_Live_Wgt + DB1.TH_Live_Wgt;

 // PAR.TH Hot Wgt = PAR.TH Hot Wgt + DB1.TH Hot Wgt
 PAR.TH_Hot_Wgt = PAR.TH_Hot_Wgt + DB1.TH_Hot_Wgt;

 // Hot Wgt/Lean % Accum USR
 PAR.Hot_Wgt_Lean_Accum_Usr = PAR.Hot_Wgt_Lean_Accum_Usr + ( DB1.TH_Hot_Wgt
 * DB1.TH_Avg_Lean_Percent 'H' );

 // Hot Wgt/Backf Accum USR
 PAR.Hot_Wgt_Backf_Accum_Usr = PAR.Hot_Wgt_Backf_Accum_Usr + ( DB1.TH_Hot_Wgt
 * DB1.TH_Avg_Backfat 'H' );

 // Hot Wgt/Loine Accum Usr
 PAR.Hot_Wgt_Loine_Accum_Usr = PAR.Hot_Wgt_Loine_Accum_Usr + ( DB1.TH_Hot_Wgt
 * DB1.TH_Avg_Loin_Eye_Depth 'H' );

 // Hot Wgt/LghtR Accum Usr
 PAR.Hot_Wgt_LghtR_Accum_Usr = PAR.Hot_Wgt_LghtR_Accum_Usr + ( DB1.TH_Hot_Wgt
 * DB1.TH_Avg_Light_Reflectance 'H' );

}


// WRK.Net Head Usr
WRK.Net_Head_Usr = ( WRK.TH_Head_Received - WRK.TH_Yard_Deads ) - WRK.TH_Head_Condemned;

//?WRK.Adj Live Weight
CASE;

// IF WRK.TH Head Received EQ WRK.Net Head Usr
IF WRK.TH_Head_Received = WRK.Net_Head_Usr;

CASE;

// IF WRK.Net Head Usr NE WRK.TH Head Killed
IF WRK.Net_Head_Usr <> WRK.TH_Head_Killed;

// WRK.Net Head Adjusted Usr = WRK.Net Head Usr - WRK.TH Head Killed
WRK.Net_Head_Adjusted_Usr = WRK.Net_Head_Usr - WRK.TH_Head_Killed;

// LCL.*Synon (15,2) work field = WRK.Net Head Adjusted Usr * PAR.TH Avg Live Wgt *Rounded
LCL.*Synon_152_work_field = WRK.Net_Head_Adjusted_Usr * PAR.TH_Avg_Live_Wgt 'H';

// WRK.TH Adj Live Wgt = WRK.TH Live Wgt - LCL.*Synon (15,2) work field
WRK.TH_Adj_Live_Wgt = WRK.TH_Live_Wgt - LCL.*Synon_152_work_field;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.TH Adj Live Wgt = WRK.TH Live Wgt
WRK.TH_Adj_Live_Wgt = WRK.TH_Live_Wgt;

ENDIF;

//?WRK.Adj Live Weight
// IF WRK.Net Head Usr EQ LCL.Zero USR
IF WRK.Net_Head_Usr = LCL.Zero_USR;

// WRK.TH Adj Live Wgt = CON.*ZERO
WRK.TH_Adj_Live_Wgt = *ZERO;

//?WRK.Adj Live Weight
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Net Head Adjusted Usr
WRK.Net_Head_Adjusted_Usr = WRK.TH_Head_Condemned + WRK.TH_Yard_Deads;

CASE;

// IF WRK.Net Head Usr NE WRK.TH Head Killed
IF WRK.Net_Head_Usr <> WRK.TH_Head_Killed;

// WRK.Net Head Adjusted Usr = WRK.Net Head Usr - WRK.TH Head Killed
WRK.Net_Head_Adjusted_Usr = WRK.Net_Head_Usr - WRK.TH_Head_Killed;

ENDIF;

// LCL.*Synon (15,2) work field = WRK.Net Head Adjusted Usr * PAR.TH Avg Live Wgt *Rounded
LCL.*Synon_152_work_field = WRK.Net_Head_Adjusted_Usr * PAR.TH_Avg_Live_Wgt 'H';

// WRK.TH Adj Live Wgt = WRK.TH Live Wgt - LCL.*Synon (15,2) work field
WRK.TH_Adj_Live_Wgt = WRK.TH_Live_Wgt - LCL.*Synon_152_work_field;

ENDIF;

//?wrk.Adj Actual Yield
CASE;

// IF WRK.TH Adj Live Wgt NE LCL.Zero USR
IF WRK.TH_Adj_Live_Wgt <> LCL.Zero_USR;

//?actual yield percent: hot w / live wgt * 100
// Adj Actual Yield
WRK.TH_Adj_Actual_Yield = ( WRK.TH_Hot_Wgt / WRK.TH_Adj_Live_Wgt 'H' ) * 100 'H';

// LCL.TH Yld Parm Adj Yield% = WRK.TH Adj Actual Yield %
LCL.TH_Yld_Parm_Adj_Yield = WRK.TH_Adj_Actual_Yield;

ENDIF;

//?Re-Calculate for Held Overs: Adj Yield%
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.TH Adj Actual Yield % = LCL.TH Adj Actual Yield %
WRK.TH_Adj_Actual_Yield = LCL.TH_Adj_Actual_Yield;

// LCL.TH Yld Parm Adj Yield% = WRK.TH Adj Actual Yield %
LCL.TH_Yld_Parm_Adj_Yield = WRK.TH_Adj_Actual_Yield;

ENDIF;

//?Validate Low and High Yield.
CASE;

// IF WRK.TH Adj Actual Yield % GT PAR.High Yield Min
IF WRK.TH_Adj_Actual_Yield > PAR.High_Yield_Min;

// OR WRK.TH Adj Actual Yield % LT PAR.Low Yield Max
OR WRK.TH_Adj_Actual_Yield < PAR.Low_Yield_Max;

// LCL.TH PHA Add Type = CND.Entire Tattoo
LCL.TH_PHA_Add_Type = 'E';

// LCL.TH PHA Add Reason = CND.Yield Parameter
LCL.TH_PHA_Add_Reason = 3;

EXECUTE FUNCTION(Rtv GA Prod Hist Avgs RT) TYPE(RTVOBJ) FILE(PKCGCPP)           AB1226508;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.TH_Purchase_Date);
PARAMETER(LCL.PH_Summary_Type);
PARAMETER(LCL.PH_GA_Avg_Live_Wgt);
PARAMETER(LCL.TH_PHA_Yield_Percent);
PARAMETER(LCL.PH_GA_Avg_Lean);
PARAMETER(LCL.PH_GA_Avg_Backfat);
PARAMETER(LCL.PH_GA_Avg_Loin_Eye);
PARAMETER(LCL.PH_GA_Avg_Light_Ref);
PARAMETER(LCL.TH_PHA_Lean_Prm_Crc_CWT);
PARAMETER(LCL.PH_GA_Avg_Srt_Disc_Fctr);
PARAMETER(LCL.History_Avail_STS_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 // PAR.History Avail STS USR = CND.No
 PAR.History_Avail_STS_USR = 'N';

 // LCL.First Time Flag Usr = CND.Yes
 LCL.First_Time_Flag_Usr = 'Y';

 //?USER: Process Data record

 //?First Time Processing
 CASE;

 // IF LCL.First Time Flag Usr is Yes
 IF LCL.First_Time_Flag_Usr = 'Y';

 // LCL.PH Week Ending Date = DB1.PH Week Ending Date
 LCL.PH_Week_Ending_Date = DB1.PH_Week_Ending_Date;

 // LCL.First Time Flag Usr = CND.No
 LCL.First_Time_Flag_Usr = 'N';

 ENDIF;

 CASE;

 // IF DB1.PH Week Ending Date NE LCL.PH Week Ending Date
 IF DB1.PH_Week_Ending_Date <> LCL.PH_Week_Ending_Date;

 QUIT;

 ENDIF;

 CASE;

 // IF DB1.PH Summary Type is 2 Week
 IF DB1.PH_Summary_Type = '2WK';

 CASE;

 // IF DB1.PH GA Head Killed is GE 600
 IF DB1.PH_GA_Head_Killed >= 600;

 MOVE *ALL (To: PAR From: DB1);

 // PAR.History Avail STS USR = CND.Yes
 PAR.History_Avail_STS_USR = 'Y';

 QUIT;

 ENDIF;

 // IF DB1.PH Summary Type is 4 Week
 IF DB1.PH_Summary_Type = '4WK';

 CASE;

 // IF DB1.PH GA Head Killed is GT Zero
 IF DB1.PH_GA_Head_Killed > *ZERO;

 MOVE *ALL (To: PAR From: DB1);

 // PAR.History Avail STS USR = CND.Yes
 PAR.History_Avail_STS_USR = 'Y';

 QUIT;

 ENDIF;

 ENDIF;

}


//?Average Type
CASE;

// IF LCL.PH Summary Type is 2 Week
IF LCL.PH_Summary_Type = '2WK';

// LCL.TH PHA Average Type = CND.2 Week
LCL.TH_PHA_Average_Type = '2WK';

//?Average Type
// IF LCL.PH Summary Type is 4 Week
IF LCL.PH_Summary_Type = '4WK';

// LCL.TH PHA Average Type = CND.4 Week
LCL.TH_PHA_Average_Type = '4WK';

//?Average Type
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.TH PHA Average Type = CND.Available History
LCL.TH_PHA_Average_Type = 'HST';

ENDIF;

// Retrieve message - '&1 Yield for Lot is outside 71.00-81.00% Yield Range.'
LCL.THC_Comment = RTVMSG(PRK0936);
PARAMETER(LCL.TH_Yld_Parm_Adj_Yield);
PARAMETER(LCL.TH_PHA_Average_Type);

EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.THC_Comment_Line);
PARAMETER(LCL.THC_Comment);
PARAMETER('P');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 {
  //?USER: Processing if Data record not found

  // PAR.THC Comment Line = CON.1
  PAR.THC_Comment_Line = 1;

  //?USER: Process Data record

  // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
  PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 PARAMETER(PAR.THC_Comment);
 PARAMETER(PAR.THC_Comment_Type);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


// Retrieve message - 'Paid entire Lot based on Producer 2 Week (2WK), 4 Week'
LCL.THC_Comment = RTVMSG(PRK0937);
PARAMETER(LCL.TH_Yld_Parm_Adj_Yield);
PARAMETER(LCL.TH_PHA_Average_Type);

EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.THC_Comment_Line);
PARAMETER(LCL.THC_Comment);
PARAMETER('P');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 {
  //?USER: Processing if Data record not found

  // PAR.THC Comment Line = CON.1
  PAR.THC_Comment_Line = 1;

  //?USER: Process Data record

  // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
  PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 PARAMETER(PAR.THC_Comment);
 PARAMETER(PAR.THC_Comment_Type);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


// Retrieve message - '(4WK), or "last load" (HST) Average.'
LCL.THC_Comment = RTVMSG(PRK0951);
PARAMETER(LCL.TH_Yld_Parm_Adj_Yield);
PARAMETER(LCL.TH_PHA_Average_Type);

EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.THC_Comment_Line);
PARAMETER(LCL.THC_Comment);
PARAMETER('P');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 {
  //?USER: Processing if Data record not found

  // PAR.THC Comment Line = CON.1
  PAR.THC_Comment_Line = 1;

  //?USER: Process Data record

  // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
  PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 PARAMETER(PAR.THC_Comment);
 PARAMETER(PAR.THC_Comment_Type);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


//?Create Eval Trans records.
CASE;

// IF LCL.History Avail STS USR is Yes
IF LCL.History_Avail_STS_USR = 'Y';

// OR PAR.Bal w/History is Available History
OR PAR.Bal_w_History = 'A';

//?Balance w/Available History
CASE;

// IF PAR.Bal w/History is Available History
IF PAR.Bal_w_History = 'A';

// LCL.PH GA Avg Live Wgt = PAR.PH GA Avg Live Wgt
LCL.PH_GA_Avg_Live_Wgt = PAR.PH_GA_Avg_Live_Wgt;

// LCL.TH PHA Yield Percent = PAR.PH GA Adjusted Yield%
LCL.TH_PHA_Yield_Percent = PAR.PH_GA_Adjusted_Yield;

// LCL.TH PHA Lean Prm /Crc CWT = PAR.PH GA Lean Prm /Carc CWT
LCL.TH_PHA_Lean_Prm_Crc_CWT = PAR.PH_GA_Lean_Prm_Carc_CWT;

// LCL.TH PHA Sort Disc Fctr % = PAR.PH GA Avg Srt Disc Fctr * CON.100 *Rounded
LCL.TH_PHA_Sort_Disc_Fctr = PAR.PH_GA_Avg_Srt_Disc_Fctr * 100 'H';

// LCL.PH GA Avg Backfat = PAR.PH GA Avg Backfat
LCL.PH_GA_Avg_Backfat = PAR.PH_GA_Avg_Backfat;

// LCL.PH GA Avg Loin Eye = PAR.PH GA Avg Loin Eye
LCL.PH_GA_Avg_Loin_Eye = PAR.PH_GA_Avg_Loin_Eye;

// LCL.PH GA Avg Light Ref = PAR.PH GA Avg Light Ref
LCL.PH_GA_Avg_Light_Ref = PAR.PH_GA_Avg_Light_Ref;

// LCL.PH GA Avg Lean% = PAR.PH GA Avg Lean%
LCL.PH_GA_Avg_Lean = PAR.PH_GA_Avg_Lean;

//?Balance w/Available History
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.TH PHA Sort Disc Fctr % = LCL.PH GA Avg Srt Disc Fctr * CON.100 *Rounded
LCL.TH_PHA_Sort_Disc_Fctr = LCL.PH_GA_Avg_Srt_Disc_Fctr * 100 'H';

ENDIF;

EXECUTE FUNCTION(Bal Eval Trans w/PHA  IF) TYPE(EXCINTFUN)                      AB1226549;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.TH_Head_Killed);
PARAMETER(LCL.TH_Hot_Wgt);
PARAMETER(LCL.TH_Tot_Loin_Eye_Depth);
PARAMETER(LCL.TH_Tot_Backfat_Inches);
PARAMETER(LCL.TH_Tot_Light_Reflectance);
PARAMETER(PAR.TH_Avg_Live_Wgt);
PARAMETER(LCL.TH_Avg_Hot_Wgt);
PARAMETER(PAR.TH_Recalc_Live_Wgt);
PARAMETER(LCL.TH_Header_Error_Sts);
PARAMETER(LCL.TH_Detail_Error_Sts);
PARAMETER(LCL.TH_Kill_Balancing_Sts);
PARAMETER(PAR.TH_Source_Type);
PARAMETER(PAR.TH_Schedule_Kill_Shift);
PARAMETER(LCL.TH_Percent_Identified);
PARAMETER(LCL.TH_Percent_Accepted);
PARAMETER(LCL.TH_PHA_Head_Adds);
PARAMETER(LCL.TH_PHA_Add_Type);
PARAMETER(LCL.TH_PHA_Average_Type);
PARAMETER(LCL.TH_PHA_Add_Reason);
PARAMETER(LCL.TH_PHA_Yield_Percent);
PARAMETER(LCL.TH_PHA_Lean_Prm_Crc_CWT);
PARAMETER(LCL.PH_GA_Avg_Live_Wgt);
PARAMETER(LCL.PH_GA_Avg_Lean);
PARAMETER(LCL.PH_GA_Avg_Backfat);
PARAMETER(LCL.PH_GA_Avg_Loin_Eye);
PARAMETER(LCL.PH_GA_Avg_Light_Ref);
PARAMETER(LCL.Net_Head_Usr);
PARAMETER(LCL.Hot_Wgt_Lean_Accum_Usr);
PARAMETER(LCL.Hot_Wgt_Backf_Accum_Usr);
PARAMETER(LCL.Hot_Wgt_Loine_Accum_Usr);
PARAMETER(LCL.Hot_Wgt_LghtR_Accum_Usr);
PARAMETER(LCL.CDI_Shipper_User);
{
 //?Execute internal function

 // LCL.TH Avg Live Wgt = PAR.TH Avg Live Wgt
 LCL.TH_Avg_Live_Wgt = PAR.TH_Avg_Live_Wgt;

 //?* 02/20/04 PKD added check for Recalc Live Weight.
 //?06/04/04 SLM HPEBAL - Remove the Calculation of Avg Live Wgt
 //?                    - Moved the Adjust/Add Type as the first step
 //?                    - Calculate the Et Hot Wgt, write a Pay note
 //?                    - message to the tattoo header comments
 //?                    - combine the calculation of ET Hot Wgt
 //?                    - with the messaging
 //?03/28/05 SLM TFP0001 -
 //?                     - The payment on Hold Over for more then 1 day
 //?                     - Triumph will need to pay on the Producer
 //?                     - avg live weight.
 //?Adjust/Add Type
 CASE;

 // IF PAR.TH PHA Average Type is 2 Week
 IF PAR.TH_PHA_Average_Type = '2WK';

 // PAR.ET Adjust/Add Type = CND.Add w/2 Week Average
 PAR.ET_Adjust_Add_Type = '2WK';

 //?Adjust/Add Type
 // IF PAR.TH PHA Average Type is 4 Week
 IF PAR.TH_PHA_Average_Type = '4WK';

 // PAR.ET Adjust/Add Type = CND.Add w/4 Week Average
 PAR.ET_Adjust_Add_Type = '4WK';

 //?Adjust/Add Type
 // IF PAR.TH PHA Average Type is Available History
 IF PAR.TH_PHA_Average_Type = 'HST';

 // PAR.ET Adjust/Add Type = CND.Add w/Available History
 PAR.ET_Adjust_Add_Type = 'HST';

 ENDIF;

 //?          - Cal of ET Hot Wgt
 //?               - If the Avg Live Wgt = Zero or Recalc Lv Wgt
 //?                  and If the Tattoo Avg Hot Wgt > 0 then use the
 //?                         the Tattoo Avg Hot Wgt
 //?                      else use the GA Live Wgt to recalculate the
 //?                      the ET Hot Wgt
 //?               - If the Avg Live Wgt NOT = Zero or NOT Recalc Lv Wgt
 //?                      use the Tattoo Header Avg Live Wgt to
 //?                      calculate the ET HOT Weight.
 //?Calculate Hot Weight
 CASE;

 // IF PAR.TH Avg Live Wgt is EQ Zero
 IF PAR.TH_Avg_Live_Wgt = *ZERO;

 // OR PAR.TH Recalc Live Wgt is Greater than 0
 OR PAR.TH_Recalc_Live_Wgt > *ZERO;

 //?06/04/04 SLM HPEBAL Remove the Th Source Type is Internal
 //?06/25/04 PKD Only use the Carcass Weight if the Percent Accepted
 //?             is between 75 and 100 percent.
 //?03/28/05 SLM TFP0001 - Add the selection for Triumph on which
 //?                       calculation should be used.
 //?                       Guymon will pay on the lot average
 //?                       Triumph will not pay on the lot average
 //?ET Hot Wgt
 CASE;

 // IF PAR.TH Avg Hot Wgt is GT Zero
 IF PAR.TH_Avg_Hot_Wgt > *ZERO;

 // AND PAR.TH Percent Accepted is GE 75%
 AND ( PAR.TH_Percent_Accepted >= 75.00;

 // AND PAR.TH Percent Accepted is LE 100%
 AND PAR.TH_Percent_Accepted <= 100 );

 // AND PAR.CDI Shipper User is Guymon
 AND PAR.CDI_Shipper_User = *BLANK;

 //?The Tattoo Avg Hot Wgt (Lot) will be used
 // PAR.ET Hot Wgt = PAR.TH Avg Hot Wgt
 PAR.ET_Hot_Wgt = PAR.TH_Avg_Hot_Wgt;

 // PAR.ET Adjust/Add Type = CND.Add w/Lot Avg Hot Wft
 PAR.ET_Adjust_Add_Type = 'LOT';

 // Retrieve message - 'Hot Weight (LOT) based on Lot Average Hot Weight.'
 LCL.THC_Comment = RTVMSG(PRK1116);

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(LCL.THC_Comment_Line);
 PARAMETER(LCL.THC_Comment);
 PARAMETER('P');
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  {
   //?USER: Processing if Data record not found

   // PAR.THC Comment Line = CON.1
   PAR.THC_Comment_Line = 1;

   //?USER: Process Data record

   // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
   PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  PARAMETER(PAR.THC_Comment);
  PARAMETER(PAR.THC_Comment_Type);
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER(PAR.RS_Record_Status);
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  PARAMETER(PAR.RS_User_Added);
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

 }

 //?ET Hot Wgt
 // IF *OTHERWISE
 IF *OTHERWISE;

 // ET Hot Weight using PH GA
 PAR.ET_Hot_Wgt = PAR.PH_GA_Avg_Live_Wgt * ( PAR.TH_PHA_Yield_Percent / 100 'H' ) 'H';

 // Retrieve message - 'Hot Weight based on Producer historical Average Live'
 LCL.THC_Comment = RTVMSG(PRK1117);

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(LCL.THC_Comment_Line);
 PARAMETER(LCL.THC_Comment);
 PARAMETER('P');
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  {
   //?USER: Processing if Data record not found

   // PAR.THC Comment Line = CON.1
   PAR.THC_Comment_Line = 1;

   //?USER: Process Data record

   // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
   PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  PARAMETER(PAR.THC_Comment);
  PARAMETER(PAR.THC_Comment_Type);
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER(PAR.RS_Record_Status);
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  PARAMETER(PAR.RS_User_Added);
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

 }

 // Retrieve message - 'Weight and Average Adjusted Yield.'
 LCL.THC_Comment = RTVMSG(PRK1118);

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(LCL.THC_Comment_Line);
 PARAMETER(LCL.THC_Comment);
 PARAMETER('P');
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  {
   //?USER: Processing if Data record not found

   // PAR.THC Comment Line = CON.1
   PAR.THC_Comment_Line = 1;

   //?USER: Process Data record

   // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
   PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  PARAMETER(PAR.THC_Comment);
  PARAMETER(PAR.THC_Comment_Type);
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER(PAR.RS_Record_Status);
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  PARAMETER(PAR.RS_User_Added);
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

 }

 ENDIF;

 //?08/13/04 PKD Moved the creating of comments out of PHA processing
 //?             The comments need to be created for all types of
 //?             balancing, not just @ PHA.
 //?Calculate Hot Weight
 // IF *OTHERWISE
 IF *OTHERWISE;

 // ET Hot Wgt Frm Tatto ALW
 PAR.ET_Hot_Wgt = PAR.TH_Avg_Live_Wgt * ( PAR.TH_PHA_Yield_Percent / 100 'H' ) 'H';

 //?08/13/04 PKD Moved the creating of comments out of PHA processing
 //?             The comments need to be created for all types of
 //?             balancing, not just @ PHA.
 ENDIF;

 //?08/19/04 PKD Validate the Hot Weight with Evaluation Validation
 //?             Hot Weight range.  If the Hot Weight not within range
 //?             then do not add carcasses and mark the tattoo with
 //?             error.
 EXECUTE FUNCTION(Rtv Hot Weight Range  IF) TYPE(EXCINTFUN)                      AB1169711;
 PARAMETER(LCL.EV_Minimum);
 PARAMETER(LCL.EV_Maximum);
 {
  //?Execute internal function

  // PAR.EV Validation Code = CND.Carcass is Light Weight
  PAR.EV_Validation_Code = 'CLT';

  EXECUTE FUNCTION(Rtv Min/Max Values    RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1169636;
  PARAMETER(PAR.EV_Validation_Code);
  PARAMETER(WRK.EV_Minimum);
  PARAMETER(PAR.EV_Minimum);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.EV Validation Code = CND.Carcass has Double Weight
  PAR.EV_Validation_Code = 'CDB';

  EXECUTE FUNCTION(Rtv Min/Max Values    RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1169636;
  PARAMETER(PAR.EV_Validation_Code);
  PARAMETER(PAR.EV_Maximum);
  PARAMETER(WRK.EV_Maximum);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

 }

 //?Validate Hot Weight and Balance Tattoo
 CASE;

 // IF PAR.ET Hot Wgt is GT Zero
 IF PAR.ET_Hot_Wgt > *ZERO;

 //?Number of Carcasses to Add
 CASE;

 // IF PAR.TH PHA Add Type is Entire Tattoo
 IF PAR.TH_PHA_Add_Type = 'E';

 //?Pay Entire Tattoo w/PHA, then Purge All Transactions.
 EXECUTE FUNCTION(Bal Flag f/Purge All  RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1226536;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TH_Head_Killed);
 PARAMETER(PAR.TH_Hot_Wgt);
 PARAMETER(PAR.TH_Tot_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Tot_Backfat_Inches);
 PARAMETER(PAR.TH_Tot_Light_Reflectance);
 PARAMETER(PAR.Hot_Wgt_Lean_Accum_Usr);
 PARAMETER(PAR.Hot_Wgt_Backf_Accum_Usr);
 PARAMETER(PAR.Hot_Wgt_Loine_Accum_Usr);
 PARAMETER(PAR.Hot_Wgt_LghtR_Accum_Usr);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.RS Record Status is Active
  IF DB1.RS_Record_Status = 'A';

  EXECUTE FUNCTION(Chg Record Status     CH) TYPE(CHGOBJ) FILE(PKBVCPP)           AB1226537;
  PARAMETER(DB1.ET_Company_Number);
  PARAMETER(DB1.ET_Kill_Date);
  PARAMETER(DB1.ET_Scale_Sequence_Number);
  PARAMETER(DB1.ET_Carcass_Number);
  PARAMETER(DB1.ET_Carcass_Number_Insert);
  PARAMETER('D');
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  //?Subtract from Totals
  DO;

  //?Accumulate totals
  // PAR.TH Head Killed = PAR.TH Head Killed - CON.1
  PAR.TH_Head_Killed = PAR.TH_Head_Killed - 1;

  // PAR.TH Tot Loin Eye Depth = PAR.TH Tot Loin Eye Depth - DB1.ET Loin-Eye Depth Inches
  PAR.TH_Tot_Loin_Eye_Depth = PAR.TH_Tot_Loin_Eye_Depth - DB1.ET_Loin_Eye_Depth_Inches;

  // PAR.TH Tot Backfat Inches = PAR.TH Tot Backfat Inches - DB1.ET Backfat Thickness Inch
  PAR.TH_Tot_Backfat_Inches = PAR.TH_Tot_Backfat_Inches - DB1.ET_Backfat_Thickness_Inch;

  // PAR.TH Tot Light Reflectance = PAR.TH Tot Light Reflectance - DB1.ET Light Reflectance
  PAR.TH_Tot_Light_Reflectance = PAR.TH_Tot_Light_Reflectance - DB1.ET_Light_Reflectance;

  // PAR.TH Hot Wgt = PAR.TH Hot Wgt - DB1.ET Hot Wgt
  PAR.TH_Hot_Wgt = PAR.TH_Hot_Wgt - DB1.ET_Hot_Wgt;

  //?Weighted accumulated Lean%
  // LCL.Hot Wgt/Weight Ext Usr = DB1.ET Lean Percent NPPC * DB1.ET Hot Wgt *
  LCL.Hot_Wgt_Weight_Ext_Usr = DB1.ET_Lean_Percent_NPPC * DB1.ET_Hot_Wgt;

  // PAR.Hot Wgt/Lean % Accum Usr = PAR.Hot Wgt/Lean % Accum Usr - LCL.Hot Wgt/Weight Ext Usr
  PAR.Hot_Wgt_Lean_Accum_Usr = PAR.Hot_Wgt_Lean_Accum_Usr - LCL.Hot_Wgt_Weight_Ext_Usr;

  //?Weighted accumulated Backfat
  // LCL.Hot Wgt/Weight Ext Usr = DB1.ET Backfat Thickness Inch * DB1.ET Hot Wgt *
  LCL.Hot_Wgt_Weight_Ext_Usr = DB1.ET_Backfat_Thickness_Inch * DB1.ET_Hot_Wgt;

  // PAR.Hot Wgt/Backf Accum Usr = PAR.Hot Wgt/Backf Accum Usr - LCL.Hot Wgt/Weight Ext Usr
  PAR.Hot_Wgt_Backf_Accum_Usr = PAR.Hot_Wgt_Backf_Accum_Usr - LCL.Hot_Wgt_Weight_Ext_Usr;

  //?Weighted accumulated Loin Eye
  // LCL.Hot Wgt/Weight Ext Usr = DB1.ET Loin-Eye Depth Inches * DB1.ET Hot Wgt *
  LCL.Hot_Wgt_Weight_Ext_Usr = DB1.ET_Loin_Eye_Depth_Inches * DB1.ET_Hot_Wgt;

  // PAR.Hot Wgt/Loine Accum Usr = PAR.Hot Wgt/Loine Accum Usr - LCL.Hot Wgt/Weight Ext Usr
  PAR.Hot_Wgt_Loine_Accum_Usr = PAR.Hot_Wgt_Loine_Accum_Usr - LCL.Hot_Wgt_Weight_Ext_Usr;

  //?Weighted accumulated Light Refl
  // LCL.Hot Wgt/Weight Ext Usr = DB1.ET Light Reflectance * DB1.ET Hot Wgt *
  LCL.Hot_Wgt_Weight_Ext_Usr = DB1.ET_Light_Reflectance * DB1.ET_Hot_Wgt;

  // PAR.Hot Wgt/LghtR Accum Usr = PAR.Hot Wgt/LghtR Accum Usr - LCL.Hot Wgt/Weight Ext Usr
  PAR.Hot_Wgt_LghtR_Accum_Usr = PAR.Hot_Wgt_LghtR_Accum_Usr - LCL.Hot_Wgt_Weight_Ext_Usr;

  ENDDO;

  ENDIF;

 }

 // LCL.Carcass Count USR = PAR.Net Head Usr
 LCL.Carcass_Count_USR = PAR.Net_Head_Usr;

 // PAR.TH Head Killed = CON.*ZERO
 PAR.TH_Head_Killed = *ZERO;

 //?Number of Carcasses to Add
 // IF PAR.TH PHA Add Type is Balance To Kill
 IF PAR.TH_PHA_Add_Type = 'B';

 // LCL.Carcass Count USR = PAR.Net Head Usr - PAR.TH Head Killed
 LCL.Carcass_Count_USR = PAR.Net_Head_Usr - PAR.TH_Head_Killed;

 ENDIF;

 //?06/04/04 SLM HPEBAL - * out the Adjust/add Type Move at top
 //?                      and the hot wgt calc has also been chg
 //?                      and moved
 // PAR.ET Backfat Thickness Inch = PAR.PH GA Avg Backfat
 PAR.ET_Backfat_Thickness_Inch = PAR.PH_GA_Avg_Backfat;

 // PAR.ET Loin-Eye Depth Inches = PAR.PH GA Avg Loin Eye
 PAR.ET_Loin_Eye_Depth_Inches = PAR.PH_GA_Avg_Loin_Eye;

 // PAR.ET Light Reflectance = PAR.PH GA Avg Light Ref
 PAR.ET_Light_Reflectance = PAR.PH_GA_Avg_Light_Ref;

 // PAR.ET Lean Percent NPPC = PAR.PH GA Avg Lean%
 PAR.ET_Lean_Percent_NPPC = PAR.PH_GA_Avg_Lean;

 //?*-------------------------------------------------------------*
 //?* 07/02/01 PKD Needed to calculate the MM Values so the Competitor
 //?*              calculations would calculate the Lean Premium
 //?*              correctly.
 // LCL.Calculate All Usr = CND.Yes
 LCL.Calculate_All_Usr = 'Y';

 // Call program Clc Inch to MM/Lean%FOM.
 CALL PROGRAM(Clc Inch to MM/Lean%FOM) ('PKINMMLP');
 PARAMETER(PAR.ET_Lean_Percent_NPPC);
 PARAMETER(PAR.ET_Backfat_Thickness_Inch);
 PARAMETER(PAR.ET_Loin_Eye_Depth_Inches);
 PARAMETER(PAR.ET_Light_Reflectance);
 PARAMETER(PAR.ET_Backfat_Thickness_MM);
 PARAMETER(PAR.ET_Loineye_Depth_MM);
 PARAMETER(PAR.ET_Light_Reflectance_MM);
 PARAMETER(PAR.ET_Lean_Percent_FOM);
 PARAMETER(LCL.Calculate_All_Usr);

 //?*-------------------------------------------------------------*
 //?* 07/02/01 PKD Changed the parameters to pass in the PAR values
 //?*              instead of zeros for the MM values.
 //?* 05/27/04 SLM HPEBAL Pass in the LCL ET Adjust/Add source
 EXECUTE FUNCTION(Crt Eval Trans Rec    IF) TYPE(EXCINTFUN)                      AB1136539;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(LCL.ET_Scale_Sequence_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Schedule_Kill_Shift);
 PARAMETER(PAR.ET_Hot_Wgt);
 PARAMETER(PAR.ET_Backfat_Thickness_Inch);
 PARAMETER(PAR.ET_Loin_Eye_Depth_Inches);
 PARAMETER(PAR.ET_Lean_Percent_NPPC);
 PARAMETER(PAR.ET_Backfat_Thickness_MM);
 PARAMETER(PAR.ET_Loineye_Depth_MM);
 PARAMETER(PAR.ET_Light_Reflectance_MM);
 PARAMETER(PAR.ET_Lean_Percent_FOM);
 PARAMETER(PAR.ET_Light_Reflectance);
 PARAMETER(WRK.ET_Trim_Area);
 PARAMETER(WRK.ET_Carcass_Sex);
 PARAMETER('B');
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(PAR.ET_Adjust_Add_Type);
 PARAMETER(*BLANK);
 PARAMETER(LCL.ET_Adjust_Add_Source);
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Carcass_Count_USR);
 {
  //?Execute internal function

  // PAR.Carcass number        USR = PAR.Carcass Count USR
  PAR.Carcass_number_USR = PAR.Carcass_Count_USR;

  // DOW PAR.Carcass number        USR is GT Zero
  DOW PAR.Carcass_number_USR > *ZERO;

  EXECUTE FUNCTION(Rtv Eval Next#        RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1135496;
  PARAMETER(PAR.ET_Company_Number);
  PARAMETER(PAR.ET_Kill_Date);
  PARAMETER(PAR.ET_Scale_Sequence_Number);
  {
   //?USER: Processing if Data record not found

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.ET_Scale_Sequence_Number = 1;

   QUIT;

   //?USER: Process Data record

   CASE;

   // IF DB1.ET Scale Sequence Number is Entry Allowed
   IF DB1.ET_Scale_Sequence_Number >= 000001;
   AND DB1.ET_Scale_Sequence_Number <= 699999;

   // PAR.ET Scale Sequence Number = DB1.ET Scale Sequence Number + CON.1
   PAR.ET_Scale_Sequence_Number = DB1.ET_Scale_Sequence_Number + 1;

   QUIT;

   ENDIF;

  }

  EXECUTE FUNCTION(Create Evaluation Transac) TYPE(CRTOBJ) FILE(PKBVCPP)          AB1102931;
  PARAMETER(PAR.ET_Company_Number);
  PARAMETER(PAR.ET_Kill_Date);
  PARAMETER(PAR.ET_Scale_Sequence_Number);
  PARAMETER(PAR.ET_Scale_Sequence_Number);
  PARAMETER(000001);
  PARAMETER(PAR.ET_Tattoo_Number);
  PARAMETER(PAR.ET_Lot);
  PARAMETER(PAR.ET_Shift);
  PARAMETER(PAR.ET_Hot_Wgt);
  PARAMETER(PAR.ET_Backfat_Thickness_Inch);
  PARAMETER(PAR.ET_Loin_Eye_Depth_Inches);
  PARAMETER(PAR.ET_Lean_Percent_NPPC);
  PARAMETER(PAR.ET_Backfat_Thickness_MM);
  PARAMETER(PAR.ET_Loineye_Depth_MM);
  PARAMETER(PAR.ET_Light_Reflectance_MM);
  PARAMETER(PAR.ET_Lean_Percent_FOM);
  PARAMETER(PAR.ET_Light_Reflectance);
  PARAMETER(PAR.ET_Trim_Area);
  PARAMETER(PAR.ET_Carcass_Sex);
  PARAMETER(PAR.ET_Error_Sts);
  PARAMETER(PAR.ET_Record_Add_Del_Sts);
  PARAMETER(PAR.ET_Record_Created_W_Avg);
  PARAMETER(PAR.ET_Record_Created_Status);
  PARAMETER(PAR.ET_User_Error_Override);
  PARAMETER(PAR.ET_Adjust_Add_Type);
  PARAMETER(PAR.ET_Broken_Back_Sts);
  PARAMETER(PAR.ET_Unused_Sts_2);
  PARAMETER(PAR.ET_Adjust_Add_Source);
  PARAMETER(PAR.ET_Unused_Sts_4);
  PARAMETER(PAR.ET_Unused_Sts_5);
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.RU_Date);
  PARAMETER(PAR.RU_Time);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(*MISSING);
   PARAMETER(*MISSING);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  // PAR.Carcass number        USR = PAR.Carcass number        USR - CON.1
  PAR.Carcass_number_USR = PAR.Carcass_number_USR - 1;

  ENDDO;

 }

 //?*-------------------------------------------------------------*
 // PAR.TH PHA Head Adds = LCL.Carcass Count USR
 PAR.TH_PHA_Head_Adds = LCL.Carcass_Count_USR;

 //?Accumulate Totals
 DO;

 //?Accumulate totals
 // PAR.TH Head Killed = PAR.TH Head Killed + LCL.Carcass Count USR
 PAR.TH_Head_Killed = PAR.TH_Head_Killed + LCL.Carcass_Count_USR;

 // TH Hot Wgt
 PAR.TH_Hot_Wgt = PAR.TH_Hot_Wgt + ( PAR.ET_Hot_Wgt * LCL.Carcass_Count_USR );

 // TH Tot Loin Eye Depth
 PAR.TH_Tot_Loin_Eye_Depth = PAR.TH_Tot_Loin_Eye_Depth + ( PAR.ET_Loin_Eye_Depth_Inches
 * LCL.Carcass_Count_USR );

 // TH Tot Backfat Inches
 PAR.TH_Tot_Backfat_Inches = PAR.TH_Tot_Backfat_Inches + ( PAR.ET_Backfat_Thickness_Inch
 * LCL.Carcass_Count_USR );

 // TH Tot Light Reflectance
 PAR.TH_Tot_Light_Reflectance = PAR.TH_Tot_Light_Reflectance + ( PAR.ET_Light_Reflectance
 * LCL.Carcass_Count_USR );

 //?Weighted accumulated Lean%
 // Lean Percent
 LCL.Hot_Wgt_Weight_Ext_Usr = ( PAR.ET_Lean_Percent_NPPC * PAR.ET_Hot_Wgt )
 * LCL.Carcass_Count_USR;

 // PAR.Hot Wgt/Lean % Accum Usr = LCL.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/Lean % Accum Usr
 PAR.Hot_Wgt_Lean_Accum_Usr = LCL.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_Lean_Accum_Usr;

 //?Weighted accumulated Backfat
 // Backfat Thickness Inch
 LCL.Hot_Wgt_Weight_Ext_Usr = ( PAR.ET_Backfat_Thickness_Inch * PAR.ET_Hot_Wgt )
 * LCL.Carcass_Count_USR;

 // PAR.Hot Wgt/Backf Accum Usr = LCL.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/Backf Accum Usr
 PAR.Hot_Wgt_Backf_Accum_Usr = LCL.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_Backf_Accum_Usr;

 //?Weighted accumulated Loin Eye
 // Loin-Eye Depth Inches
 LCL.Hot_Wgt_Weight_Ext_Usr = ( PAR.ET_Loin_Eye_Depth_Inches * PAR.ET_Hot_Wgt )
 * LCL.Carcass_Count_USR;

 // PAR.Hot Wgt/Loine Accum Usr = LCL.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/Loine Accum Usr
 PAR.Hot_Wgt_Loine_Accum_Usr = LCL.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_Loine_Accum_Usr;

 //?Weighted accumulated Light Refl
 // Light Reflectances
 LCL.Hot_Wgt_Weight_Ext_Usr = ( PAR.ET_Light_Reflectance * PAR.ET_Hot_Wgt )
 * LCL.Carcass_Count_USR;

 // PAR.Hot Wgt/LghtR Accum Usr = LCL.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/LghtR Accum Usr
 PAR.Hot_Wgt_LghtR_Accum_Usr = LCL.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_LghtR_Accum_Usr;

 ENDDO;

 // PAR.TH Header Error Sts = CND.No Header Error
 PAR.TH_Header_Error_Sts = *BLANK;

 // PAR.TH Detail Error Sts = CND.No
 PAR.TH_Detail_Error_Sts = 'N';

 // PAR.TH Kill Balancing Sts = CND.Balance
 PAR.TH_Kill_Balancing_Sts = 'B';

 EXECUTE FUNCTION(Upd PHA Yld/LeanPrm   RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1226785;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_PHA_Yield_Percent);
 PARAMETER(PAR.TH_PHA_Lean_Prm_Crc_CWT);
 //?Validate Hot Weight and Balance Tattoo
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.TH Header Error Sts = CND.Header Error
 PAR.TH_Header_Error_Sts = 'E';

 // PAR.TH Detail Error Sts = CND.Yes
 PAR.TH_Detail_Error_Sts = 'Y';

 // PAR.TH Kill Balancing Sts = CND.Error
 PAR.TH_Kill_Balancing_Sts = 'E';

 EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(999999);
 PARAMETER('H');
 PARAMETER('HWA');
 PARAMETER('Hot Wgt for Adds Invalid');
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.RS_Record_Status);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  CASE;

  // IF PAR.KV Error Description is Entered
  IF PAR.KV_Error_Description <> *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
  PARAMETER(PAR.KV_Error_Code);
  PARAMETER(DB1.KV_Error_Description);
  {
   //?USER: Process Data record

   // PAR.EV Description = DB1.EV Description
   PAR.EV_Description = DB1.EV_Description;

  }

  ENDIF;

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDIF;

}


//?Create Eval Trans records.
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.TH Header Error Sts = CND.Header Error
LCL.TH_Header_Error_Sts = 'E';

// LCL.TH Detail Error Sts = CND.Yes
LCL.TH_Detail_Error_Sts = 'Y';

// LCL.TH Kill Balancing Sts = CND.Error
LCL.TH_Kill_Balancing_Sts = 'E';

EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(999999);
PARAMETER('H');
PARAMETER('PHA');
PARAMETER('Producer Hist Not Avail');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.RS_Record_Status);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 CASE;

 // IF PAR.KV Error Description is Entered
 IF PAR.KV_Error_Description <> *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
 PARAMETER(PAR.KV_Error_Code);
 PARAMETER(DB1.KV_Error_Description);
 {
  //?USER: Process Data record

  // PAR.EV Description = DB1.EV Description
  PAR.EV_Description = DB1.EV_Description;

 }

 ENDIF;

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(999999);
PARAMETER('H');
PARAMETER('YLD');
PARAMETER('Yield Parameter Error');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.RS_Record_Status);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 CASE;

 // IF PAR.KV Error Description is Entered
 IF PAR.KV_Error_Description <> *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
 PARAMETER(PAR.KV_Error_Code);
 PARAMETER(DB1.KV_Error_Description);
 {
  //?USER: Process Data record

  // PAR.EV Description = DB1.EV Description
  PAR.EV_Description = DB1.EV_Description;

 }

 ENDIF;

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


ENDIF;

ENDIF;

ENDIF;

//?Balance Tattoo
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.TH Header Error Sts = CND.Header Error
LCL.TH_Header_Error_Sts = 'E';

// LCL.TH Detail Error Sts = CND.Yes
LCL.TH_Detail_Error_Sts = 'Y';

// LCL.TH Kill Balancing Sts = CND.Error
LCL.TH_Kill_Balancing_Sts = 'E';

EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(999999);
PARAMETER('H');
PARAMETER('HLD');
PARAMETER('Held Over Not Balanced');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.RS_Record_Status);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 CASE;

 // IF PAR.KV Error Description is Entered
 IF PAR.KV_Error_Description <> *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
 PARAMETER(PAR.KV_Error_Code);
 PARAMETER(DB1.KV_Error_Description);
 {
  //?USER: Process Data record

  // PAR.EV Description = DB1.EV Description
  PAR.EV_Description = DB1.EV_Description;

 }

 ENDIF;

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


ENDIF;

ENDIF;

//?Re-Calculate Tattoo Header Averages/yield
DO;

//?Calculate Adj Actual Yield
DO;

CASE;

// IF LCL.TH Adj Live Wgt NE LCL.Zero USR
IF LCL.TH_Adj_Live_Wgt <> LCL.Zero_USR;

//?actual yield percent: hot w / live wgt * 100
// Adj Actual Yield
LCL.TH_Adj_Actual_Yield = ( LCL.TH_Hot_Wgt / LCL.TH_Adj_Live_Wgt 'H' ) * 100 'H';

ENDIF;

ENDDO;

//?Calculate Hot Weight
CASE;

// IF LCL.TH Head Killed NE LCL.Zero USR
IF LCL.TH_Head_Killed <> LCL.Zero_USR;

//?Accumulated totals div by head killed
// LCL.TH Avg Hot Wgt = LCL.TH Hot Wgt / LCL.TH Head Killed *Rounded
LCL.TH_Avg_Hot_Wgt = LCL.TH_Hot_Wgt / LCL.TH_Head_Killed 'H';

//?Calculate Hot Weight
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.TH Avg Hot Wgt = CON.*ZERO
LCL.TH_Avg_Hot_Wgt = *ZERO;

ENDIF;

//?Weighted Averages
CASE;

// IF LCL.TH Hot Wgt NE LCL.Zero USR
IF LCL.TH_Hot_Wgt <> LCL.Zero_USR;

//?Weighted average
// LCL.TH Avg Lean Percent = LCL.Hot Wgt/Lean % Accum Usr / LCL.TH Hot Wgt *Rounded
LCL.TH_Avg_Lean_Percent = LCL.Hot_Wgt_Lean_Accum_Usr / LCL.TH_Hot_Wgt 'H';

// LCL.TH Avg Backfat = LCL.Hot Wgt/Backf Accum Usr / LCL.TH Hot Wgt *Rounded
LCL.TH_Avg_Backfat = LCL.Hot_Wgt_Backf_Accum_Usr / LCL.TH_Hot_Wgt 'H';

// LCL.TH Avg Loin Eye Depth = LCL.Hot Wgt/Loine Accum Usr / LCL.TH Hot Wgt *Rounded
LCL.TH_Avg_Loin_Eye_Depth = LCL.Hot_Wgt_Loine_Accum_Usr / LCL.TH_Hot_Wgt 'H';

// LCL.TH Avg Light Reflectance = LCL.Hot Wgt/LghtR Accum Usr / LCL.TH Hot Wgt *Rounded
LCL.TH_Avg_Light_Reflectance = LCL.Hot_Wgt_LghtR_Accum_Usr / LCL.TH_Hot_Wgt 'H';

//?Weighted Averages
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.TH Avg Lean Percent = CON.*ZERO
LCL.TH_Avg_Lean_Percent = *ZERO;

// LCL.TH Avg Backfat = CON.*ZERO
LCL.TH_Avg_Backfat = *ZERO;

// LCL.TH Avg Loin Eye Depth = CON.*ZERO
LCL.TH_Avg_Loin_Eye_Depth = *ZERO;

// LCL.TH Avg Light Reflectance = CON.*ZERO
LCL.TH_Avg_Light_Reflectance = *ZERO;

ENDIF;

//?Actual Yield Percent
CASE;

// IF PAR.TH Live Wgt NE LCL.Zero USR
IF PAR.TH_Live_Wgt <> LCL.Zero_USR;

//?actual yield percent: hot w / live wgt * 100
// TH Actual Yield Percent
LCL.TH_Actual_Yield = ( LCL.TH_Hot_Wgt / PAR.TH_Live_Wgt 'H' ) * 100 'H';

//?Actual Yield Percent
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.TH Actual Yield % = CON.*ZERO
LCL.TH_Actual_Yield = *ZERO;

ENDIF;

ENDDO;

ENDIF;

//?***********
//?05/27/04 PKD HPEBAL - Retrieve Yield for Recalculate Live Weight
//?                      if Tattoo Header value is zero and recalc
//?                      live wieght is 1 for External Producer only.
//?08/13/04 PKD Moved creating of the comment out from the PHA
//?             processing.  The comment needs to exist for all
//?             types of balancing, not just at history.
//?Recalc Live Weight
CASE;

// IF PAR.TH Recalc Live Wgt is Greater than 0
IF PAR.TH_Recalc_Live_Wgt > *ZERO;

CASE;

// IF PAR.TH Source Type is Internal
IF PAR.TH_Source_Type = 'I';

//?   *** On Internal ** Live Weight Based on Seaboard Formula
// Retrieve message - 'Live Weight based on Seaboard Formula.'
LCL.THC_Comment = RTVMSG(PRK1114);

EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.THC_Comment_Line);
PARAMETER(LCL.THC_Comment);
PARAMETER('P');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 {
  //?USER: Processing if Data record not found

  // PAR.THC Comment Line = CON.1
  PAR.THC_Comment_Line = 1;

  //?USER: Process Data record

  // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
  PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 PARAMETER(PAR.THC_Comment);
 PARAMETER(PAR.THC_Comment_Type);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


// IF *OTHERWISE
IF *OTHERWISE;

//?   *** External  **   Live Weight Based on producers historical
//?                      adjusted yeild
// Retrieve message - 'Live Weight based on Producer 2 Week (2WK), 4 Week'
LCL.THC_Comment = RTVMSG(PRK1115);

EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.THC_Comment_Line);
PARAMETER(LCL.THC_Comment);
PARAMETER('P');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 {
  //?USER: Processing if Data record not found

  // PAR.THC Comment Line = CON.1
  PAR.THC_Comment_Line = 1;

  //?USER: Process Data record

  // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
  PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 PARAMETER(PAR.THC_Comment);
 PARAMETER(PAR.THC_Comment_Type);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


// Retrieve message - '(4WK), or "last load" (HST) Average Adjusted Yield.'
LCL.THC_Comment = RTVMSG(PRK1121);

EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.THC_Comment_Line);
PARAMETER(LCL.THC_Comment);
PARAMETER('P');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 {
  //?USER: Processing if Data record not found

  // PAR.THC Comment Line = CON.1
  PAR.THC_Comment_Line = 1;

  //?USER: Process Data record

  // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
  PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.THC_Comment_Line);
 PARAMETER(PAR.THC_Comment);
 PARAMETER(PAR.THC_Comment_Type);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


//?Recalc Live Weight Yield Percent
CASE;

// IF LCL.TH Recalc Live Wgt Yld is EQ 0
IF LCL.TH_Recalc_Live_Wgt_Yld = 0;

EXECUTE FUNCTION(Rtv GA Prod Hist Avgs RT) TYPE(RTVOBJ) FILE(PKCGCPP)           AB1226508;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.TH_Purchase_Date);
PARAMETER(NLL.PH_Summary_Type);
PARAMETER(NLL.PH_GA_Avg_Live_Wgt);
PARAMETER(LCL.PH_GA_Adjusted_Yield);
PARAMETER(NLL.PH_GA_Avg_Lean);
PARAMETER(NLL.PH_GA_Avg_Backfat);
PARAMETER(NLL.PH_GA_Avg_Loin_Eye);
PARAMETER(NLL.PH_GA_Avg_Light_Ref);
PARAMETER(NLL.PH_GA_Lean_Prm_Carc_CWT);
PARAMETER(NLL.PH_GA_Avg_Srt_Disc_Fctr);
PARAMETER(NLL.History_Avail_STS_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 // PAR.History Avail STS USR = CND.No
 PAR.History_Avail_STS_USR = 'N';

 // LCL.First Time Flag Usr = CND.Yes
 LCL.First_Time_Flag_Usr = 'Y';

 //?USER: Process Data record

 //?First Time Processing
 CASE;

 // IF LCL.First Time Flag Usr is Yes
 IF LCL.First_Time_Flag_Usr = 'Y';

 // LCL.PH Week Ending Date = DB1.PH Week Ending Date
 LCL.PH_Week_Ending_Date = DB1.PH_Week_Ending_Date;

 // LCL.First Time Flag Usr = CND.No
 LCL.First_Time_Flag_Usr = 'N';

 ENDIF;

 CASE;

 // IF DB1.PH Week Ending Date NE LCL.PH Week Ending Date
 IF DB1.PH_Week_Ending_Date <> LCL.PH_Week_Ending_Date;

 QUIT;

 ENDIF;

 CASE;

 // IF DB1.PH Summary Type is 2 Week
 IF DB1.PH_Summary_Type = '2WK';

 CASE;

 // IF DB1.PH GA Head Killed is GE 600
 IF DB1.PH_GA_Head_Killed >= 600;

 MOVE *ALL (To: PAR From: DB1);

 // PAR.History Avail STS USR = CND.Yes
 PAR.History_Avail_STS_USR = 'Y';

 QUIT;

 ENDIF;

 // IF DB1.PH Summary Type is 4 Week
 IF DB1.PH_Summary_Type = '4WK';

 CASE;

 // IF DB1.PH GA Head Killed is GT Zero
 IF DB1.PH_GA_Head_Killed > *ZERO;

 MOVE *ALL (To: PAR From: DB1);

 // PAR.History Avail STS USR = CND.Yes
 PAR.History_Avail_STS_USR = 'Y';

 QUIT;

 ENDIF;

 ENDIF;

}


CASE;

// IF LCL.PH GA Adjusted Yield% is ne 0
IF LCL.PH_GA_Adjusted_Yield <> *ZERO;

// LCL.TH Recalc Live Wgt Yld = LCL.PH GA Adjusted Yield%
LCL.TH_Recalc_Live_Wgt_Yld = LCL.PH_GA_Adjusted_Yield;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.TH Header Error Sts = CND.Header Error
LCL.TH_Header_Error_Sts = 'E';

// LCL.TH Detail Error Sts = CND.Yes
LCL.TH_Detail_Error_Sts = 'Y';

// LCL.TH Kill Balancing Sts = CND.Error
LCL.TH_Kill_Balancing_Sts = 'E';

EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(999999);
PARAMETER('H');
PARAMETER('HLD');
PARAMETER('No HST for ReClc Live Wgt');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.RS_Record_Status);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 CASE;

 // IF PAR.KV Error Description is Entered
 IF PAR.KV_Error_Description <> *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
 PARAMETER(PAR.KV_Error_Code);
 PARAMETER(DB1.KV_Error_Description);
 {
  //?USER: Process Data record

  // PAR.EV Description = DB1.EV Description
  PAR.EV_Description = DB1.EV_Description;

 }

 ENDIF;

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Kill Balancing Status
CASE;

// IF LCL.TH Kill Balancing Sts is Error
IF LCL.TH_Kill_Balancing_Sts = 'E';

//?Kill Balancing Status
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF LCL.TH Head Killed is *Zeros
IF LCL.TH_Head_Killed = *ZERO;

// LCL.TH Kill Balancing Sts = CND.Balance
LCL.TH_Kill_Balancing_Sts = 'B';

// IF LCL.TH Head Killed EQ LCL.Net Head Usr
IF LCL.TH_Head_Killed = LCL.Net_Head_Usr;

// LCL.TH Kill Balancing Sts = CND.Balance
LCL.TH_Kill_Balancing_Sts = 'B';

// IF LCL.TH Head Killed NE LCL.Net Head Usr
IF LCL.TH_Head_Killed <> LCL.Net_Head_Usr;

// LCL.TH Kill Balancing Sts = CND.Error
LCL.TH_Kill_Balancing_Sts = 'E';

ENDIF;

ENDIF;

//?Paid Entire Tattoo w/PHA
CASE;

// IF LCL.TH PHA Add Type is Entire Tattoo
IF LCL.TH_PHA_Add_Type = 'E';

// LCL.TH Head Adds = CON.*ZERO
LCL.TH_Head_Adds = *ZERO;

// LCL.TH Head Adjusted-LN% = CON.*ZERO
LCL.TH_Head_Adjusted_LN = *ZERO;

// LCL.TH Head Excluded = CON.*ZERO
LCL.TH_Head_Excluded = *ZERO;

ENDIF;

EXECUTE FUNCTION(Upd Val Kill Trans    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1240659;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.TH_Recalc_Live_Wgt_Yld);
PARAMETER(LCL.TH_Head_Condemned);
PARAMETER(LCL.TH_Head_Killed);
PARAMETER(LCL.TH_Head_Adds);
PARAMETER(LCL.TH_Head_Accepted);
PARAMETER(LCL.TH_Adj_Live_Wgt);
PARAMETER(LCL.TH_Hot_Wgt);
PARAMETER(LCL.TH_Tot_Loin_Eye_Depth);
PARAMETER(LCL.TH_Tot_Backfat_Inches);
PARAMETER(LCL.TH_Tot_Light_Reflectance);
PARAMETER(LCL.TH_Avg_Hot_Wgt);
PARAMETER(LCL.TH_Avg_Light_Reflectance);
PARAMETER(LCL.TH_Avg_Lean_Percent);
PARAMETER(LCL.TH_Avg_Loin_Eye_Depth);
PARAMETER(LCL.TH_Avg_Backfat);
PARAMETER(LCL.TH_Actual_Yield);
PARAMETER(LCL.TH_Adj_Actual_Yield);
PARAMETER(LCL.TH_Fixed_Cost_Amount);
PARAMETER(LCL.TH_Header_Error_Sts);
PARAMETER(LCL.TH_Detail_Error_Sts);
PARAMETER(LCL.TH_Kill_Balancing_Sts);
PARAMETER(LCL.TH_Bal_to_Kill_Gen);
PARAMETER(LCL.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(LCL.TH_Head_Excluded);
PARAMETER(LCL.TH_Avg_Lean_EXC_ADD);
PARAMETER(LCL.TH_Head_Identified);
PARAMETER(LCL.TH_Percent_Identified);
PARAMETER(LCL.TH_Percent_Accepted);
PARAMETER(LCL.TH_Head_Adjusted_LN);
PARAMETER(LCL.TH_PHA_Head_Adds);
PARAMETER(LCL.TH_PHA_Add_Type);
PARAMETER(LCL.TH_PHA_Average_Type);
PARAMETER(LCL.TH_PHA_Add_Reason);
PARAMETER(LCL.TH_PHA_Yield_Percent);
PARAMETER(LCL.TH_PHA_Lean_Prm_Crc_CWT);
PARAMETER(LCL.TH_Yld_Parm_Adj_Yield);
PARAMETER(LCL.TH_PHA_Sort_Disc_Fctr);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Val Kill Trans    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1190805;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(PAR.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(PAR.TH_Head_Condemned);
 PARAMETER(PAR.TH_Head_Killed);
 PARAMETER(PAR.TH_Head_Adds);
 PARAMETER(PAR.TH_Head_Accepted);
 PARAMETER(PAR.TH_Adj_Live_Wgt);
 PARAMETER(PAR.TH_Hot_Wgt);
 PARAMETER(PAR.TH_Tot_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Tot_Backfat_Inches);
 PARAMETER(PAR.TH_Tot_Light_Reflectance);
 PARAMETER(PAR.TH_Avg_Hot_Wgt);
 PARAMETER(PAR.TH_Avg_Light_Reflectance);
 PARAMETER(PAR.TH_Avg_Lean_Percent);
 PARAMETER(PAR.TH_Avg_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Avg_Backfat);
 PARAMETER(PAR.TH_Actual_Yield);
 PARAMETER(PAR.TH_Adj_Actual_Yield);
 PARAMETER(PAR.TH_Fixed_Cost_Amount);
 PARAMETER(PAR.TH_Header_Error_Sts);
 PARAMETER(PAR.TH_Detail_Error_Sts);
 PARAMETER(PAR.TH_Kill_Balancing_Sts);
 PARAMETER(PAR.TH_Bal_to_Kill_Gen);
 PARAMETER(PAR.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(PAR.TH_Head_Excluded);
 PARAMETER(PAR.TH_Avg_Lean_EXC_ADD);
 PARAMETER(PAR.TH_Head_Identified);
 PARAMETER(PAR.TH_Percent_Identified);
 PARAMETER(PAR.TH_Percent_Accepted);
 PARAMETER(PAR.TH_Head_Adjusted_LN);
 PARAMETER(PAR.TH_PHA_Head_Adds);
 PARAMETER(PAR.TH_PHA_Add_Type);
 PARAMETER(PAR.TH_PHA_Average_Type);
 PARAMETER(PAR.TH_PHA_Add_Reason);
 PARAMETER(PAR.TH_PHA_Yield_Percent);
 PARAMETER(PAR.TH_PHA_Lean_Prm_Crc_CWT);
 PARAMETER(PAR.TH_Yld_Parm_Adj_Yield);
 PARAMETER(PAR.TH_PHA_Sort_Disc_Fctr);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


//?If Internal, and balanced change the TD Ext complete status to Yes
CASE;

// IF LCL.TH Kill Balancing Sts is Balance
IF LCL.TH_Kill_Balancing_Sts = 'B';

// AND PAR.TH Tattoo Number is Internals
AND PAR.TH_Tattoo_Number >= 7000;
AND PAR.TH_Tattoo_Number <= 7999;

EXECUTE FUNCTION(RtvChg Td Cmpl Sts     RT) TYPE(RTVOBJ) FILE(PKDYCPP)          AB1211238;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER('Y');
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Tattoo Detail Ext  CH) TYPE(CHGOBJ) FILE(PKDYCPP)          AB1196902;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TD_Sequence_Number);
 PARAMETER(PAR.Completed_Status);
 PARAMETER(DB1.Hot_Head);
 PARAMETER(DB1.TDE_Head_Condemned);
 PARAMETER(DB1.Head_2);
 PARAMETER(DB1.Status_1);
 PARAMETER(DB1.Status_2);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing after Data read

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


ENDIF;

