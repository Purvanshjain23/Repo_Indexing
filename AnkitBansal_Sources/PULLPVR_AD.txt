// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PULLPVR
// ?Date: 14.08.2025 Time: 03:50:45
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('P/S');
PARAMETER(NLL.Company_Number);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(LCL.Allow_Multi_Company);
PARAMETER(NLL.Default_Printer);
PARAMETER(NLL.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Load screen

// DTL.To Company USR = PAR.PFS Company Number
DTL.To_Company_USR = PAR.PFS_Company_Number;

//?Do Not Allow to Change To Company.
CASE;

// IF LCL.Allow Multi-Company is Not Yes
IF LCL.Allow_Multi_Company = *BLANK/'N';

// DTL.To Company USR = DTL.PFS Company Number
DTL.To_Company_USR = DTL.PFS_Company_Number;

ENDIF;

//?USER: Validate fields

//?Validations.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?To Company.
CASE;

// IF DTL.To Company USR is not equal to zero
IF DTL.To_Company_USR <> *ZERO;

//?Company Must Be a Plant.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
PARAMETER(DTL.To_Company_USR);
PARAMETER(LCL.Plant_Company_Sts);
PARAMETER(NLL.Company_Organization);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Plant Company Sts is Plant Company
IF LCL.Plant_Company_Sts = 'P';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Company Number must be a Plant company.'
ERROR(USR3706);
MSGPARM(DTL.To_Company_USR);

QUIT;

ENDIF;

ENDIF;

ENDIF;

//?Date Range Start is Blank, Use From Prod Date.
CASE;

// IF DTL.Date Range Start USR is Not Entered
IF DTL.Date_Range_Start_USR = *ZERO;

// DTL.Date Range Start USR = DTL.PFS Production Date
DTL.Date_Range_Start_USR = DTL.PFS_Production_Date;

ENDIF;

//?Production Date Range.
CASE;

// IF DTL.Date Range Start USR is Entered
IF DTL.Date_Range_Start_USR > *ZERO;

//?Start Date Range Cannot Equal From Prod Date if Copying to Same Company.
CASE;

// IF DTL.Date Range Start USR EQ DTL.PFS Production Date
IF DTL.Date_Range_Start_USR = DTL.PFS_Production_Date;

// AND DTL.PFS Company Number EQ DTL.To Company USR
AND DTL.PFS_Company_Number = DTL.To_Company_USR;

// LCL.Generic Message 80 USR = CON.Start date cannot equal
LCL.Generic_Message_80_USR = 'Start date cannot equal';

// LCL.Generic Message 80 USR = CONCAT(LCL.Generic Message 80 USR,CON.to From Prod Date for,CON.1)
LCL.Generic_Message_80_USR = LCL.Generic_Message_80_USR + 'to From Prod Date for' (1);

// LCL.Generic Message 80 USR = CONCAT(LCL.Generic Message 80 USR,CON.same Company.,CON.1)
LCL.Generic_Message_80_USR = LCL.Generic_Message_80_USR + 'same Company.' (1);

// Send error message - '&1'
ERROR(USR5117);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(DTL.Date_Range_Start_USR);

QUIT;

ENDIF;

//?Check Date Range End.
CASE;

// IF DTL.Date Range End USR is Entered
IF DTL.Date_Range_End_USR > *ZERO;

CASE;

// IF DTL.Date Range Start USR EQ DTL.Date Range End USR
IF DTL.Date_Range_Start_USR = DTL.Date_Range_End_USR;

// LCL.Generic Message 80 USR = CON.Prod Date range cannot be
LCL.Generic_Message_80_USR = 'Prod Date range cannot be';

// LCL.Generic Message 80 USR = CONCAT(LCL.Generic Message 80 USR,CON.equal.,CON.1)
LCL.Generic_Message_80_USR = LCL.Generic_Message_80_USR + 'equal.' (1);

// Send error message - '&1'
ERROR(USR5117);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(DTL.Date_Range_Start_USR);

QUIT;

// IF DTL.Date Range End USR LT DTL.Date Range Start USR
IF DTL.Date_Range_End_USR < DTL.Date_Range_Start_USR;

// LCL.Generic Message 80 USR = CON.Date Range To cannot be
LCL.Generic_Message_80_USR = 'Date Range To cannot be';

// LCL.Generic Message 80 USR = CONCAT(LCL.Generic Message 80 USR,CON.less than Date Range From,CON.
LCL.Generic_Message_80_USR = LCL.Generic_Message_80_USR + 'less than Date Range From' (1);

// Send error message - '&1'
ERROR(USR5117);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(DTL.Date_Range_End_USR);

QUIT;

// IF DTL.Date Range Start USR is Not Entered
IF DTL.Date_Range_Start_USR = *ZERO;

// Send error message - 'Value Required'
ERROR(USR1962);
MSGPARM(DTL.Date_Range_Start_USR);

QUIT;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?USER: User defined action

//?Delete all current & future date first except if To Company & Start
//?Date Range is equal to the From Co/From Prod Date.
EXECUTE FUNCTION(Upd Dlt Curr/Future Dt RT) TYPE(RTVOBJ) FILE(PUBBCPP)          AC2167166;
PARAMETER(DTL.To_Company_USR);
PARAMETER(DTL.Date_Range_Start_USR);
PARAMETER(DTL.Date_Range_End_USR);
PARAMETER(DTL.PFS_Company_Number);
PARAMETER(DTL.PFS_Production_Date);
{
 //?USER: Initialize routine

 // LCL.Current Date D8# = JOB.*Job date
 LCL.Current_Date_D8# = JOB.*Job_date;

 //?Set Date When to Quit Read.
 CASE;

 // IF PAR.Date Range End USR is Not Entered
 IF PAR.Date_Range_End_USR = *ZERO;

 // LCL.Production Date USR D8# = PAR.PFS Production Date
 LCL.Production_Date_USR_D8# = PAR.PFS_Production_Date;

 //?Set Date When to Quit Read.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Production Date USR D8# = PAR.Date Range End USR
 LCL.Production_Date_USR_D8# = PAR.Date_Range_End_USR;

 ENDIF;

 //?USER: Process Data record

 //?Delete from Date Range Else from Single Date.
 CASE;

 // IF PAR.Date Range End USR is Entered
 IF PAR.Date_Range_End_USR > *ZERO;

 CASE;

 // IF DB1.PFS Production Date GE PAR.PFS Production Date
 IF DB1.PFS_Production_Date >= PAR.PFS_Production_Date;

 // AND DB1.PFS Production Date LE PAR.Date Range End USR
 AND DB1.PFS_Production_Date <= PAR.Date_Range_End_USR;

 // AND DB1.PFS Production Date GE LCL.Current Date D8#
 AND DB1.PFS_Production_Date >= LCL.Current_Date_D8#;

 //?If Same Company/Same Date Then Do Not Delete.
 CASE;

 // IF PAR.From Company USR EQ PAR.PFS Company Number
 IF PAR.From_Company_USR = PAR.PFS_Company_Number;

 // AND PAR.From Prod Date YYYYMMDD EQ DB1.PFS Production Date
 AND PAR.From_Prod_Date_YYYYMMDD = DB1.PFS_Production_Date;

 //?If Same Company/Same Date Then Do Not Delete.
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Dlt PFS Bal Fallout CdeDL) TYPE(DLTOBJ) FILE(PUBBCPP)          AC2166129;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER(DB1.PFS_Production_Date);
 PARAMETER(DB1.PFS_Item_Code);
 ENDIF;

 ENDIF;

 //?Delete from Date Range Else from Single Date.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Delete from Single Date.
 CASE;

 // IF DB1.PFS Production Date EQ PAR.PFS Production Date
 IF DB1.PFS_Production_Date = PAR.PFS_Production_Date;

 // AND DB1.PFS Production Date GE LCL.Current Date D8#
 AND DB1.PFS_Production_Date >= LCL.Current_Date_D8#;

 EXECUTE FUNCTION(Dlt PFS Bal Fallout CdeDL) TYPE(DLTOBJ) FILE(PUBBCPP)          AC2166129;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER(DB1.PFS_Production_Date);
 PARAMETER(DB1.PFS_Item_Code);
 ENDIF;

 ENDIF;

 CASE;

 // IF DB1.PFS Production Date GT LCL.Production Date USR D8#
 IF DB1.PFS_Production_Date > LCL.Production_Date_USR_D8#;

 QUIT;

 ENDIF;

}


//?Re-Create PFS Balance Fallout Code if it does NOT exist. Existing
//?records will not be updated.
EXECUTE FUNCTION(Rtv Copy Fr/To Co Date RT) TYPE(RTVOBJ) FILE(PUBBCPP)          AC2166697;
PARAMETER(DTL.PFS_Company_Number);
PARAMETER(DTL.PFS_Production_Date);
PARAMETER(DTL.To_Company_USR);
PARAMETER(DTL.Date_Range_Start_USR);
PARAMETER(DTL.Date_Range_End_USR);
{
 //?USER: Initialize routine

 // LCL.Current Date D8# = JOB.*Job date
 LCL.Current_Date_D8# = JOB.*Job_date;

 //?Format Date Range Start.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.From Production Date = PAR.Date Range Start USR
 LCL.From_Production_Date = PAR.Date_Range_Start_USR;

 ENDIF;

 //?Format Date Range To.
 CASE;

 // IF PAR.Date Range To USR is Entered
 IF PAR.Date_Range_End_USR > *ZERO;

 // LCL.To Production Date = PAR.Date Range To USR
 LCL.To_Production_Date = PAR.Date_Range_End_USR;

 ENDIF;

 //?USER: Process Data record

 //?Do Not Copy if Both Balance & Fallout Sts = 'N'.
 CASE;

 // IF DB1.PFS Balance Flag is No
 IF DB1.PFS_Balance_Flag = 'N';

 // AND DB1.PFS Fallout Flag is No
 AND DB1.PFS_Fallout_Flag = 'N';

 //?Do Not Copy if Both Balance & Fallout Sts = 'N'.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Create for Single Date Else for a Date Range.
 CASE;

 // IF PAR.Date Range End USR is Not Entered
 IF PAR.Date_Range_End_USR = *ZERO;

 //?Create it if Not Found.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
 PARAMETER(PAR.To_Company_USR);
 PARAMETER(LCL.From_Production_Date);
 PARAMETER(LCL.Production_Day_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Production Day Status is yes
 IF LCL.Production_Day_Status = 'Y';

 EXECUTE FUNCTION(Upd Crt Balance FalloutRT) TYPE(RTVOBJ) FILE(PUBBCPP)          AC2166967;
 PARAMETER(PAR.To_Company_USR);
 PARAMETER(PAR.Date_Range_Start_USR);
 PARAMETER(DB1.PFS_Item_Code);
 PARAMETER(DB1.PFS_Balance_Flag);
 PARAMETER(DB1.PFS_Fallout_Flag);
 PARAMETER(DB1.PFS_Notes);
 PARAMETER(DB1.PFS_Record_Status);
 PARAMETER(DB1.PFS_Process_Status);
 PARAMETER(DB1.PFS_Error_Reason);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt PFS Bal Fallout CdeCR) TYPE(CRTOBJ) FILE(PUBBCPP)          AC2166127;
  PARAMETER(PAR.PFS_Company_Number);
  PARAMETER(PAR.PFS_Production_Date);
  PARAMETER(PAR.PFS_Item_Code);
  PARAMETER(PAR.PFS_Balance_Flag);
  PARAMETER(PAR.PFS_Fallout_Flag);
  PARAMETER(PAR.PFS_Notes);
  PARAMETER('A');
  PARAMETER(PAR.PFS_Process_Status);
  PARAMETER(PAR.PFS_Error_Reason);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Create Stamp 2    IF) TYPE(EXCINTFUN)                      AC2166252;
   PARAMETER(DB1.PFS_Process_Status);
   PARAMETER(DB1.PFS_Create_Date);
   PARAMETER(DB1.PFS_Create_Time);
   {
    //?Execute internal function

    // PAR.PFS Process Status = CND.Not Processed
    PAR.PFS_Process_Status = *ZERO;

    // LCL.USR Internal D8# YYYYMMDD = JOB.*Job date
    LCL.USR_Internal_D8#_YYYYMMDD = JOB.*Job_date;

    // PAR.PFS Create Date = LCL.USR Internal D8# YYYYMMDD
    PAR.PFS_Create_Date = LCL.USR_Internal_D8#_YYYYMMDD;

    // PAR.PFS Create Time = JOB.*Job time
    PAR.PFS_Create_Time = JOB.*Job_time;

   }

  }

 }

 ENDIF;

 ENDIF;

 //?Create for Single Date Else for a Date Range.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Date Range Start USR = PAR.Date Range Start USR
 LCL.Date_Range_Start_USR = PAR.Date_Range_Start_USR;

 //?Create Balance Fallout Code for Date Range.
 // DOW LCL.Date Range Start USR LE PAR.Date Range End USR
 DOW LCL.Date_Range_Start_USR <= PAR.Date_Range_End_USR;

 //?Format Start Date Range.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Post to G/L Date = LCL.Date Range Start USR
 LCL.Post_to_G_L_Date = LCL.Date_Range_Start_USR;

 ENDIF;

 EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
 PARAMETER(PAR.To_Company_USR);
 PARAMETER(LCL.Post_to_G_L_Date);
 PARAMETER(LCL.Production_Day_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Production Day Status is yes
 IF LCL.Production_Day_Status = 'Y';

 EXECUTE FUNCTION(Upd Crt Balance FalloutRT) TYPE(RTVOBJ) FILE(PUBBCPP)          AC2166967;
 PARAMETER(PAR.To_Company_USR);
 PARAMETER(LCL.Date_Range_Start_USR);
 PARAMETER(DB1.PFS_Item_Code);
 PARAMETER(DB1.PFS_Balance_Flag);
 PARAMETER(DB1.PFS_Fallout_Flag);
 PARAMETER(DB1.PFS_Notes);
 PARAMETER(DB1.PFS_Record_Status);
 PARAMETER(DB1.PFS_Process_Status);
 PARAMETER(DB1.PFS_Error_Reason);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt PFS Bal Fallout CdeCR) TYPE(CRTOBJ) FILE(PUBBCPP)          AC2166127;
  PARAMETER(PAR.PFS_Company_Number);
  PARAMETER(PAR.PFS_Production_Date);
  PARAMETER(PAR.PFS_Item_Code);
  PARAMETER(PAR.PFS_Balance_Flag);
  PARAMETER(PAR.PFS_Fallout_Flag);
  PARAMETER(PAR.PFS_Notes);
  PARAMETER('A');
  PARAMETER(PAR.PFS_Process_Status);
  PARAMETER(PAR.PFS_Error_Reason);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Create Stamp 2    IF) TYPE(EXCINTFUN)                      AC2166252;
   PARAMETER(DB1.PFS_Process_Status);
   PARAMETER(DB1.PFS_Create_Date);
   PARAMETER(DB1.PFS_Create_Time);
   {
    //?Execute internal function

    // PAR.PFS Process Status = CND.Not Processed
    PAR.PFS_Process_Status = *ZERO;

    // LCL.USR Internal D8# YYYYMMDD = JOB.*Job date
    LCL.USR_Internal_D8#_YYYYMMDD = JOB.*Job_date;

    // PAR.PFS Create Date = LCL.USR Internal D8# YYYYMMDD
    PAR.PFS_Create_Date = LCL.USR_Internal_D8#_YYYYMMDD;

    // PAR.PFS Create Time = JOB.*Job time
    PAR.PFS_Create_Time = JOB.*Job_time;

   }

  }

 }

 ENDIF;

 // LCL.Date Range Start USR = LCL.Date Range Start USR + CON.1 *DAYS
 LCL.Date_Range_Start_USR = DATEINCR(LCL.Date_Range_Start_USR 1 'DY' 1111111 'NONE' 'N' 1);

 ENDDO;

 ENDIF;

 ENDIF;

}


