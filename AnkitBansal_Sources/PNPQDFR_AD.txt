// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNPQDFR
// ?Date: 14.08.2025 Time: 03:46:03
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(LCL.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(WRK.Allow_Multi_Company);
PARAMETER(WRK.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PGM.*Scan limit = CND.9999999
PGM.*Scan_limit = 9999999;

// PGM.*Subfile mode = CND.Truncated
PGM.*Subfile_mode = 1;

EXECUTE FUNCTION(Rtv SlsPerson Authrty RT) TYPE(RTVOBJ) FILE(PNGLREP)           AC2004314;
PARAMETER(PAR.Salesperson_Code);
PARAMETER('IP');
PARAMETER(LCL.Approval_Status);
{
 //?USER: Processing if Data record not found

 // PAR.Approval Status = CND.Denied
 PAR.Approval_Status = 'D';

 //?USER: Process Data record

 // PAR.Approval Status = CND.Approved
 PAR.Approval_Status = 'A';

}


//?USER: Initialize subfile control

// LCL.Price Sheet Item Sts = CTL.Price Sheet Item Sts
LCL.Price_Sheet_Item_Sts = CTL.Price_Sheet_Item_Sts;

// LCL.IPD Price Sheet Price Mth = CTL.IPD Price Sheet Price Mth
LCL.IPD_Price_Sheet_Price_Mth = CTL.IPD_Price_Sheet_Price_Mth;

// LCL.Commodity Price Grp 1 USR = CTL.Commodity Price Grp 1 USR
LCL.Commodity_Price_Grp_1_USR = CTL.Commodity_Price_Grp_1_USR;

// LCL.Commodity Price Grp 2 USR = CTL.Commodity Price Grp 2 USR
LCL.Commodity_Price_Grp_2_USR = CTL.Commodity_Price_Grp_2_USR;

//?USER: Initialize subfile record from DBF record

//?SEL: Finished Goods
CASE;

// IF RCD.Item Type Code is Not Finished Good
IF RCD.Item_Type_Code <> 'FG';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Process Selected Record
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(WW Item Pricing Dtls  IF) TYPE(EXCINTFUN)                      AC2005015;
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Price_Sheet_Item_Sts);
PARAMETER(RCD.IPD_Price_Sheet_Price_Mth);
PARAMETER(RCD.Commodity_Price_Grp_1_USR);
PARAMETER(RCD.Market_Prem_Ded_1_USR);
PARAMETER(RCD.Commodity_Price_Grp_2_USR);
PARAMETER(RCD.Market_Prem_Ded_2_USR);
PARAMETER(RCD.Market_Price_USR);
PARAMETER(RCD.Market_Price_2_USR);
PARAMETER(RCD.Market_Percent_1_USR);
PARAMETER(RCD.Market_Percent_2_USR);
{
 //?Execute internal function

 EXECUTE FUNCTION(RTV IP Item Prcing Dt RT) TYPE(RTVOBJ) FILE(PNFZREP)           AC1981129;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Price_Sheet_Item_Sts);
 PARAMETER(PAR.IPD_Price_Sheet_Price_Mth);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Market Details    RT) TYPE(RTVOBJ) FILE(PNGBREP)           AC1989084;
 PARAMETER(PAR.Item_Code);
 PARAMETER('USD');
 PARAMETER(PAR.Commodity_Price_Grp_1_USR);
 PARAMETER(PAR.Market_Percent_1_USR);
 PARAMETER(PAR.Market_Prem_Ded_1_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Market Details    RT) TYPE(RTVOBJ) FILE(PNGBREP)           AC1989084;
 PARAMETER(PAR.Item_Code);
 PARAMETER('SBD');
 PARAMETER(PAR.Commodity_Price_Grp_2_USR);
 PARAMETER(PAR.Market_Percent_2_USR);
 PARAMETER(PAR.Market_Prem_Ded_2_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
 PARAMETER('USD');
 PARAMETER(PAR.Commodity_Price_Grp_1_USR);
 PARAMETER(JOB.*Job_date);
 PARAMETER(PAR.Market_Price_USR);
 PARAMETER(LCL.USR_Date_Priced);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Commodity Market Price = DB1.Commodity Market Price
  PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

 EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
 PARAMETER('SBD');
 PARAMETER(PAR.Commodity_Price_Grp_2_USR);
 PARAMETER(JOB.*Job_date);
 PARAMETER(PAR.Market_Price_2_USR);
 PARAMETER(LCL.USR_Date_Priced);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Commodity Market Price = DB1.Commodity Market Price
  PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

}


// LCL.YYYY numeric USR = JOB.*Job date *YEAR
LCL.YYYY_numeric_USR = DATEDTLS(JOB.*Job_date 'YR' 1111111 'NONE' 'N' 1);

// LCL.YYYY numeric USR = LCL.YYYY numeric USR - CON.1
LCL.YYYY_numeric_USR = LCL.YYYY_numeric_USR - 1;

EXECUTE FUNCTION(RTV Per Beg date       RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1831554;
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.YYYY_numeric_USR);
PARAMETER(1);
PARAMETER(LCL.Post_to_G_L_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PAR.Post to G/L Date = DB1.Post to G/L Date
 PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

 QUIT;

}


EXECUTE FUNCTION(Rtv Qty/Wgt Billed    RT) TYPE(RTVOBJ) FILE(OMHSTPP)           AC1770972;
PARAMETER(DB1.Item_Code);
PARAMETER(JOB.*Job_date);
PARAMETER(*ZERO);
PARAMETER(LCL.Post_to_G_L_Date);
PARAMETER(JOB.*Job_date);
PARAMETER(LCL.Quantity_Billed);
PARAMETER(RCD.Weight_Billed);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Actual Shipped Date LT PAR.From Date             USR
 IF DB1.Actual_Shipped_Date < PAR.From_Date_USR;

 QUIT;

 ENDIF;

 //?SEL:  Company Number
 CASE;

 // IF PAR.Company Number is greater than zero
 IF PAR.Company_Number > *ZERO;

 CASE;

 // IF DB1.Company Number NE PAR.Company Number
 IF DB1.Company_Number <> PAR.Company_Number;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Process Record
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // PAR.Quantity Billed = PAR.Quantity Billed + DB1.Quantity Billed
 PAR.Quantity_Billed = PAR.Quantity_Billed + DB1.Quantity_Billed;

 // PAR.Weight Billed = PAR.Weight Billed + DB1.Weight Billed
 PAR.Weight_Billed = PAR.Weight_Billed + DB1.Weight_Billed;

 ENDIF;

}


ENDIF;

//?SEL: CTL.Price Sheet Item Sts
CASE;

// IF CTL.Price Sheet Item Sts is *ALL values
IF CTL.Price_Sheet_Item_Sts = 'Y'/*BLANK;

CASE;

// IF CTL.Price Sheet Item Sts NE RCD.Price Sheet Item Sts
IF CTL.Price_Sheet_Item_Sts <> RCD.Price_Sheet_Item_Sts;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL: CTL.Price Sheet Price Method
CASE;

// IF CTL.IPD Price Sheet Price Mth is Not Blank
IF CTL.IPD_Price_Sheet_Price_Mth <> *BLANK;

CASE;

// IF CTL.IPD Price Sheet Price Mth NE RCD.IPD Price Sheet Price Mth
IF CTL.IPD_Price_Sheet_Price_Mth <> RCD.IPD_Price_Sheet_Price_Mth;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL: CTL.Commodity Price Group 1
CASE;

// IF CTL.Commodity Price Grp 1 USR is Not Blank
IF CTL.Commodity_Price_Grp_1_USR <> *BLANK;

CASE;

// IF CTL.Commodity Price Grp 1 USR NE RCD.Commodity Price Grp 1 USR
IF CTL.Commodity_Price_Grp_1_USR <> RCD.Commodity_Price_Grp_1_USR;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL: CTL.Commodity Price Group 2
CASE;

// IF CTL.Commodity Price Grp 2 USR is Not Blank
IF CTL.Commodity_Price_Grp_2_USR <> *BLANK;

CASE;

// IF CTL.Commodity Price Grp 2 USR NE RCD.Commodity Price Grp 2 USR
IF CTL.Commodity_Price_Grp_2_USR <> RCD.Commodity_Price_Grp_2_USR;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

// LCL.Commodity Price Grp 1 USR = CTL.Commodity Price Grp 1 USR
LCL.Commodity_Price_Grp_1_USR = CTL.Commodity_Price_Grp_1_USR;

// LCL.Commodity Price Grp 2 USR = CTL.Commodity Price Grp 2 USR
LCL.Commodity_Price_Grp_2_USR = CTL.Commodity_Price_Grp_2_USR;

//?USER: Process subfile control (Pre-confirm)

// LCL.Subfile Position Sts USR = CND.No
LCL.Subfile_Position_Sts_USR = 'N';

//?CHG: Control Function Fields
CASE;

// IF CTL.Price Sheet Item Sts NE LCL.Price Sheet Item Sts
IF CTL.Price_Sheet_Item_Sts <> LCL.Price_Sheet_Item_Sts;

// OR CTL.IPD Price Sheet Mkt Code NE LCL.IPD Price Sheet Mkt Code
OR CTL.IPD_Price_Sheet_Mkt_CdNU <> LCL.IPD_Price_Sheet_Mkt_CdNU;

// OR CTL.Commodity Price Grp 1 USR NE LCL.Commodity Price Grp 1 USR
OR CTL.Commodity_Price_Grp_1_USR <> LCL.Commodity_Price_Grp_1_USR;

// OR CTL.IPD Price Sheet Price Mth NE LCL.IPD Price Sheet Price Mth
OR CTL.IPD_Price_Sheet_Price_Mth <> LCL.IPD_Price_Sheet_Price_Mth;

// OR CTL.Commodity Price Grp 2 USR NE LCL.Commodity Price Grp 2 USR
OR CTL.Commodity_Price_Grp_2_USR <> LCL.Commodity_Price_Grp_2_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?F4 = Prompt
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

//?Item Structure Type
CASE;

// IF PGM.*Cursor field <IS> CTL.Item Structure Type Code
IF PGM.*Cursor_field = CTL.Item_Structure_Type_Code;

// Call program SEL Item Type Active   SR.
CALL PROGRAM(SEL Item Type Active   SR) ('PDENSRR');
PARAMETER(CTL.Item_Structure_Type_Code);

ENDIF;

//?Item Structure Group
CASE;

// IF PGM.*Cursor field <IS> CTL.Item Structure Group Code
IF PGM.*Cursor_field = CTL.Item_Structure_Group_Code;

// Call program SEL Item Group Active  SR.
CALL PROGRAM(SEL Item Group Active  SR) ('PDEMSRR');
PARAMETER(CTL.Item_Structure_Group_Code);

ENDIF;

//?Item Structure Class
CASE;

// IF PGM.*Cursor field <IS> CTL.Item Structure Class Code
IF PGM.*Cursor_field = CTL.Item_Structure_Class_Code;

// Call program SEL Item Class Active  SR.
CALL PROGRAM(SEL Item Class Active  SR) ('PDELSRR');
PARAMETER(CTL.Item_Structure_Class_Code);

ENDIF;

//?U.S.D.A Commodity Market
CASE;

// IF PGM.*Cursor field <IS> CTL.Default Commod Mark basis
IF PGM.*Cursor_field = CTL.Default_Commod_Mark_basis;

// Call program SEL Commod. Mkts Actve SR.
CALL PROGRAM(SEL Commod. Mkts Actve SR) ('PDEDSRR');
PARAMETER(CTL.Default_Commod_Mark_basis);

ENDIF;

//?U.S.D.A Commodity Price Group
CASE;

// IF PGM.*Cursor field <IS> CTL.Commodity Price Grp 1 USR
IF PGM.*Cursor_field = CTL.Commodity_Price_Grp_1_USR;

// Call program SEL Commod Grp Active  SR.
CALL PROGRAM(SEL Commod Grp Active  SR) ('PDECSRR');
PARAMETER(CTL.Commodity_Price_Grp_1_USR);

ENDIF;

//?U.S.D.A Price Method
CASE;

// IF PGM.*Cursor field <IS> CTL.Price Method Default
IF PGM.*Cursor_field = CTL.Price_Method_Default;

// Call program SEL OMS System Only    SR.
CALL PROGRAM(SEL OMS System Only    SR) ('PDZSSRR');
PARAMETER(WRK.ZERO);
PARAMETER(CTL.Price_Method_Default);

ENDIF;

//?Price Sheet Commodity Market
CASE;

// IF PGM.*Cursor field <IS> CTL.IPD Price Sheet Mkt Code
IF PGM.*Cursor_field = CTL.IPD_Price_Sheet_Mkt_CdNU;

// Call program SEL Commod. Mkts Actve SR.
CALL PROGRAM(SEL Commod. Mkts Actve SR) ('PDEDSRR');
PARAMETER(CTL.IPD_Price_Sheet_Mkt_CdNU);

ENDIF;

//?Price Sheet Commodity Price Group
CASE;

// IF PGM.*Cursor field <IS> CTL.Commodity Price Grp 2 USR
IF PGM.*Cursor_field = CTL.Commodity_Price_Grp_2_USR;

// Call program SEL Commod Grp Active  SR.
CALL PROGRAM(SEL Commod Grp Active  SR) ('PDECSRR');
PARAMETER(CTL.Commodity_Price_Grp_1_USR);

ENDIF;

//?Price Seet Price Method
CASE;

// IF PGM.*Cursor field <IS> CTL.IPD Price Sheet Price Mth
IF PGM.*Cursor_field = CTL.IPD_Price_Sheet_Price_Mth;

// Call program SEL OMS System Only    SR.
CALL PROGRAM(SEL OMS System Only    SR) ('PDZSSRR');
PARAMETER(WRK.ZERO);
PARAMETER(CTL.IPD_Price_Sheet_Price_Mth);

ENDIF;

ENDIF;

//?F5=Refresh
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?2 = Edit Item Details
CASE;

// IF RCD.*SFLSEL is *Edit
IF RCD.*SFLSEL = '2'/'2';

CASE;

// IF LCL.Approval Status is Approved
IF LCL.Approval_Status = 'A';

// Call program zEDT Item pricing Dtl ER.
CALL PROGRAM(zEDT Item pricing Dtl ER) ('PNPTE1R');
PARAMETER(RCD.Item_Code);

EXECUTE FUNCTION(WW Item Pricing Dtls  IF) TYPE(EXCINTFUN)                      AC2005015;
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Price_Sheet_Item_Sts);
PARAMETER(RCD.IPD_Price_Sheet_Price_Mth);
PARAMETER(RCD.Commodity_Price_Grp_1_USR);
PARAMETER(RCD.Market_Prem_Ded_1_USR);
PARAMETER(RCD.Commodity_Price_Grp_2_USR);
PARAMETER(RCD.Market_Prem_Ded_2_USR);
PARAMETER(RCD.Market_Price_USR);
PARAMETER(RCD.Market_Price_2_USR);
PARAMETER(RCD.Market_Percent_1_USR);
PARAMETER(RCD.Market_Percent_2_USR);
{
 //?Execute internal function

 EXECUTE FUNCTION(RTV IP Item Prcing Dt RT) TYPE(RTVOBJ) FILE(PNFZREP)           AC1981129;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Price_Sheet_Item_Sts);
 PARAMETER(PAR.IPD_Price_Sheet_Price_Mth);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Market Details    RT) TYPE(RTVOBJ) FILE(PNGBREP)           AC1989084;
 PARAMETER(PAR.Item_Code);
 PARAMETER('USD');
 PARAMETER(PAR.Commodity_Price_Grp_1_USR);
 PARAMETER(PAR.Market_Percent_1_USR);
 PARAMETER(PAR.Market_Prem_Ded_1_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Market Details    RT) TYPE(RTVOBJ) FILE(PNGBREP)           AC1989084;
 PARAMETER(PAR.Item_Code);
 PARAMETER('SBD');
 PARAMETER(PAR.Commodity_Price_Grp_2_USR);
 PARAMETER(PAR.Market_Percent_2_USR);
 PARAMETER(PAR.Market_Prem_Ded_2_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
 PARAMETER('USD');
 PARAMETER(PAR.Commodity_Price_Grp_1_USR);
 PARAMETER(JOB.*Job_date);
 PARAMETER(PAR.Market_Price_USR);
 PARAMETER(LCL.USR_Date_Priced);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Commodity Market Price = DB1.Commodity Market Price
  PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

 EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
 PARAMETER('SBD');
 PARAMETER(PAR.Commodity_Price_Grp_2_USR);
 PARAMETER(JOB.*Job_date);
 PARAMETER(PAR.Market_Price_2_USR);
 PARAMETER(LCL.USR_Date_Priced);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Commodity Market Price = DB1.Commodity Market Price
  PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

}


// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?5 = Display record
CASE;

// IF RCD.*SFLSEL is *5
IF RCD.*SFLSEL = '5';

// Call program Dsp Item pricing Dtl  DR.
CALL PROGRAM(Dsp Item pricing Dtl  DR) ('PNQDD1R');
PARAMETER(RCD.Item_Code);

ENDIF;

//?7 = Edit Market Details
CASE;

// IF RCD.*SFLSEL is Option 7
IF RCD.*SFLSEL = '7'/'7';

CASE;

// IF LCL.Approval Status is Approved
IF LCL.Approval_Status = 'A';

// Call program Edt Item Market Dls   EF.
CALL PROGRAM(Edt Item Market Dls   EF) ('PNRTEFR');
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Description_Line_One);

EXECUTE FUNCTION(WW Item Pricing Dtls  IF) TYPE(EXCINTFUN)                      AC2005015;
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Price_Sheet_Item_Sts);
PARAMETER(RCD.IPD_Price_Sheet_Price_Mth);
PARAMETER(RCD.Commodity_Price_Grp_1_USR);
PARAMETER(RCD.Market_Prem_Ded_1_USR);
PARAMETER(RCD.Commodity_Price_Grp_2_USR);
PARAMETER(RCD.Market_Prem_Ded_2_USR);
PARAMETER(RCD.Market_Price_USR);
PARAMETER(RCD.Market_Price_2_USR);
{
 //?Execute internal function

 EXECUTE FUNCTION(RTV IP Item Prcing Dt RT) TYPE(RTVOBJ) FILE(PNFZREP)           AC1981129;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Price_Sheet_Item_Sts);
 PARAMETER(PAR.IPD_Price_Sheet_Price_Mth);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Market Details    RT) TYPE(RTVOBJ) FILE(PNGBREP)           AC1989084;
 PARAMETER(PAR.Item_Code);
 PARAMETER('USD');
 PARAMETER(PAR.Commodity_Price_Grp_1_USR);
 PARAMETER(PAR.Market_Percent_1_USR);
 PARAMETER(PAR.Market_Prem_Ded_1_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Market Details    RT) TYPE(RTVOBJ) FILE(PNGBREP)           AC1989084;
 PARAMETER(PAR.Item_Code);
 PARAMETER('SBD');
 PARAMETER(PAR.Commodity_Price_Grp_2_USR);
 PARAMETER(PAR.Market_Percent_2_USR);
 PARAMETER(PAR.Market_Prem_Ded_2_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
 PARAMETER('USD');
 PARAMETER(PAR.Commodity_Price_Grp_1_USR);
 PARAMETER(JOB.*Job_date);
 PARAMETER(PAR.Market_Price_USR);
 PARAMETER(LCL.USR_Date_Priced);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Commodity Market Price = DB1.Commodity Market Price
  PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

 EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
 PARAMETER('SBD');
 PARAMETER(PAR.Commodity_Price_Grp_2_USR);
 PARAMETER(JOB.*Job_date);
 PARAMETER(PAR.Market_Price_2_USR);
 PARAMETER(LCL.USR_Date_Priced);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Commodity Market Price = DB1.Commodity Market Price
  PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

}


// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?8 = Display Market Details
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

// Call program Dsp Item Market Dls   DF.
CALL PROGRAM(Dsp Item Market Dls   DF) ('PNUFDFR');
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Description_Line_One);

ENDIF;

