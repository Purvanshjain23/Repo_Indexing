// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDC5EFR
// ?Date: 14.08.2025 Time: 03:27:58
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?08/02/12 RMC E2213 remove exp/dom std mix from screen
//?05/23/07 jrb Saved co num in LCL and removed hard coded co num.
EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('P/S');
PARAMETER(LCL.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize subfile header

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Prod Dept Info    RT) TYPE(RTVOBJ) FILE(PDI5REP)           AC1336752;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.USR_Description);
PARAMETER(PAR.Department_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.Text 3 Length USR = Condition name of CTL.SM Day of Week
CTL.Text_3_Length_USR = RTVCND(CTL.SM_Day_of_Week);

//?USER: Initialize subfile record (existing record)

EXECUTE FUNCTION(RTV Item desc/type     RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1128573;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Item_Description);
PARAMETER(WRK.Production_Date_Control);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF CTL.Item Code is Entered
IF CTL.Item_Code <> *ZERO;

// AND CTL.Item Code NE DB1.Item Code
AND CTL.Item_Code <> DB1.Item_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// Call program Rtv First Consumed Itm XF.
CALL PROGRAM(Rtv First Consumed Itm XF) ('POP1XFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Consumed_Item_Code);

//?USER: Initialize subfile record (new record)

// RCD.Record Status = CND.Active
RCD.Record_Status = 'A';

// WRK.Display Flag = CND.No
WRK.Display_Flag = 'N';

//?USER: Validate subfile record fields

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

CASE;

// IF RCD.Item Code is Entered
IF RCD.Item_Code <> *ZERO;

EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Item_Description);
PARAMETER(WRK.UOM_Primary);
PARAMETER(WRK.Unit_Weight);
PARAMETER(WRK.Item_Structure_Class_Code);
PARAMETER(WRK.Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(WRK.Item_Type_Code);
PARAMETER(WRK.Default_Warehouse);
PARAMETER(WRK.Fresh_Chilling_Time);
PARAMETER(WRK.Base_Conv_Loss_Item);
PARAMETER(WRK.Variety_Rendered_Cut);
PARAMETER(WRK.Credit_Item_Status);
PARAMETER(WRK.Std_Weight_Head_Var_Ren);
PARAMETER(WRK.Pieces_Per_Head);
PARAMETER(WRK.Department_Code);
PARAMETER(WRK.Group_for_Packaging);
PARAMETER(WRK.Seconds_Item);
PARAMETER(WRK.Piece_Count_Item);
PARAMETER(WRK.Pieces_Per_Bag);
PARAMETER(WRK.Bags_Per_Unit);
PARAMETER(WRK.Export_Domestic);
PARAMETER(WRK.Print_On_Schedule);
PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
PARAMETER(WRK.Fresh_Sched_As_Ordered);
PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
PARAMETER(RCD.Primal_Group_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?04/14/09 PKD FP1054 Allow WP Codes in the Standard Mix
//?Validate Item
CASE;

// IF WRK.Item Type Code is Finished Goods
IF WRK.Item_Type_Code = 'FG';

// OR WRK.Item Type Code is Work in Process
OR WRK.Item_Type_Code = 'WP';

//?Seconds
CASE;

// IF WRK.Seconds Item is Yes
IF WRK.Seconds_Item = 'Y';

// Send error message - 'Item &1 is a Seconds item..'
ERROR(USR2124);
MSGPARM(RCD.Item_Code);

ENDIF;

//?Finished Goods Base
CASE;

// IF PAR.Department Type is Pc/Wgt Converting
IF PAR.Department_Type = 'P'/'W';

//?Item must be Base Item.
CASE;

// IF WRK.Base/Conv/Loss Item is Not Base
IF WRK.Base_Conv_Loss_Item = *BLANK/'C'/'F'/'L';

// Send error message - 'Item must be a Base item if BOM type is 'C'.'
ERROR(USR2179);
MSGPARM(RCD.Item_Code);

ENDIF;

ENDIF;

//?Validate Item
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Item &1 must be a Finished Goods item.'
ERROR(USR2112);
MSGPARM(RCD.Item_Code);

ENDIF;

ENDIF;

CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

//?07/22/08 PKD S00360 Replaced Edit BOM with Display BOM.
// Call program DSP Bill of Material   ET.
CALL PROGRAM(DSP Bill of Material   ET) ('PPVMETR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);

ENDIF;

CASE;

// IF RCD.Pieces Override is Not Equal to Zeros
IF RCD.Pieces_Override <> *ZERO;

CASE;

// IF WRK.Piece Count Item is no
IF WRK.Piece_Count_Item = 'N';

// Send error message - 'Value not allowed'
ERROR(USR2209);
MSGPARM(RCD.Pieces_Override);

ENDIF;

ENDIF;

CASE;

// IF RCD.*SFLSEL is Option 7
IF RCD.*SFLSEL = '7'/'7';

//?05/27/09 PKD FP1054 Added WIP items associated with FG
// Call program Edt Std Mix WIP       EF.
CALL PROGRAM(Edt Std Mix WIP       EF) ('PNJHEFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.SM_Day_of_Week);
PARAMETER(RCD.Item_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Std Prod Mix Dist CR) TYPE(CRTOBJ) FILE(PDI6CPP)           AC1261519;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.SM_Day_of_Week);
PARAMETER(RCD.Item_Code);
PARAMETER(JOB.*Job_date);
PARAMETER(RCD.Mix_Priority);
PARAMETER(RCD.Mix_Percent);
PARAMETER(RCD.Export_Domestic_Mix_Pct);
PARAMETER(RCD.Select_Range_Max);
PARAMETER(RCD.SM_Unused_Sts_2);
PARAMETER(RCD.SM_Unused_Sts_3);
PARAMETER(RCD.Pieces_Override);
PARAMETER(RCD.SM_Unused_Nbr_2);
PARAMETER(RCD.Weight_Override);
PARAMETER(RCD.Primal_Group_Code);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(RCD.Record_Status);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Delete DBF record

EXECUTE FUNCTION(DLT Std Prod Mix Dist  DL) TYPE(DLTOBJ) FILE(PDI6CPP)          AC1261521;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.SM_Day_of_Week);
PARAMETER(RCD.Item_Code);

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Std Prod Mix Dist CH) TYPE(CHGOBJ) FILE(PDI6CPP)           AC1261520;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.SM_Day_of_Week);
PARAMETER(RCD.Item_Code);
PARAMETER(JOB.*Job_date);
PARAMETER(RCD.Mix_Priority);
PARAMETER(RCD.Mix_Percent);
PARAMETER(RCD.Export_Domestic_Mix_Pct);
PARAMETER(RCD.Select_Range_Max);
PARAMETER(RCD.Pieces_Override);
PARAMETER(RCD.Weight_Override);
PARAMETER(RCD.Primal_Group_Code);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(RCD.Record_Status);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Extra processing after DBF update

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?USER: Process command keys

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

