      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      Triumph Foods
      * PROGRAM:     TF101
      * TITLE:       Revise Cash Distribution Detail--Adjustments
      * PROGRAMMER:  LeAnne Ramsey
      * CREATED:     04/24/08
      *
      *
      * FUNCTION: Uses an edit record format to add/change/delete records.
      *           This is an I.S. Function to fix data problems.
      *
      *           This program is called from TF401-Work with Cash Distribution
      *           Detail--Adjustments.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      /eject
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Ftfd101    cf   e             workstn infds(iofeed)
      *
      *
     Ftfl013b   uf a e           k disk
      *   Cash distribution detail
      *
      /eject
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D create          c                   'CREATE'
     D revise          c                   'REVISE'
     D delete          c                   'DELETE'
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
     D update          c                   'UPDATE'
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D rtncd           s              2
     D action          s                   like(mode)
     D maxmsg          s              2  0  inz(20)
      *
      *
      * Workfields for date manipulation
      *
     D wkisodate       s               D   datfmt(*iso)
      *
      *
      * Workfields
      *
     D wksysfl         s                   like(cdsysfl)
      *
      *
      * Parms
      *
     D xxrwedt         s                   like(cdrwedt)
     D xxrcexfl        s                   like(cdrcexfl)
     D xxcwedt         s                   like(cdcwedt)
     D xxddt           s                   like(cdddt)
     D xxbtsn          s                   like(cdbtsn)
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /eject
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     update        $upd1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo
      /eject
      *------------------------------------------------------------------------------------
      * Set environment for screen 1
      *------------------------------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * Always retrieve the System-Generated Cash Detail record that this adjustment
      * is "adjusting".
      *
     C                   move      yes           wksysfl
     C     key01         chain(n)  tfl013b                            92
     C                   if        *in92 = *off                                 If hit
     C                   z-add     cdasxcdam     d1asxcdam1
     C                   z-add     cdtsxcdam     d1tsxcdam1
     C                   z-add     cdtafcdam     d1tafcdam1
     C                   z-add     cdtbccdam     d1tbccdam1
     C                   z-add     cdtoxcdam     d1toxcdam1
     C                   z-add     cdscdam       d1scdam1
     C                   z-add     cdtcdam       d1tcdam1
     C                   endif                                                  If hit
      *
      *
      * If incoming mode is REVISE or DELETE, then retrieve the database
      * record.  Do not lock the record.  Typically, in DELETE mode, these
      * values will not be displayed. However, if there is an error on the
      * delete action, the panel will be displayed with messages.
      *
     C                   select
     C                   when      mode = create                                WH create
     C                   move      *blank        d1ajrsn
     C                   z-add     0             d1asxcdam2
     C                   z-add     0             d1tsxcdam2
     C                   z-add     0             d1tafcdam2
     C                   z-add     0             d1tbccdam2
     C                   z-add     0             d1toxcdam2
     C                   z-add     0             d1scdam2
     C                   z-add     0             d1tcdam2
     C                   z-add     0             d1aajam2
      *
     C                   when      mode = revise or mode = delete               WH revise/delete
     C                   move      no            wksysfl
     C     key01         chain(n)  tfl013b                            92
     C                   if        *in92 = *on                                  If no hit
     C                   seton                                        62
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09008'
     C                   endif
     C                   else
      *
     C                   move      cdajrsn       d1ajrsn
     C                   z-add     cdasxcdam     d1asxcdam2
     C                   z-add     cdtsxcdam     d1tsxcdam2
     C                   z-add     cdtafcdam     d1tafcdam2
     C                   z-add     cdtbccdam     d1tbccdam2
     C                   z-add     cdtoxcdam     d1toxcdam2
     C                   z-add     cdscdam       d1scdam2
     C                   z-add     cdtcdam       d1tcdam2
     C                   z-add     cdaajam       d1aajam2
      *
     C                   endif                                                  If no hit
     C                   endsl
      *
      * If the user is deleting and there were no errors when retrieving the
      * record, go on to the update routine without displaying the screen.
      * Otherwise, display the screen.
      *
     C                   if        error = 0 and action = delete
     C                   eval      routne = update
     C                   else
     C                   eval      routne = scrn1
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Set indicators to control input/output fields and available
      * function keys.
     C                   exsr      $ind
      *
      *
      * Write screen 1 to CRT
      *
     C                   write     tf101k1
     C                   write     tf101ec
     C                   exfmt     tf101r1
      *
      * Clear messages
     C                   exsr      $clmsg
      *
      *
      * Reset action to be equal to the incoming mode.  This is required
      * in case the user took F11-Delete and got an error on the
      * deletion and now needs to be able to change the record and take
      * an action other than delete
      *
     C                   eval      action = mode
      *
      * Get user's input and set routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      rtncd = '03'
     C                   eval      routne = exit
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   eval      routne = set1
      *
     C                   when      *in09 = *on                                  F9-accept
     C                   exsr      $edit1
      *
     C                   if        error = 0
     C                   exsr      $upd1
     C                   else
     C                   eval      routne = scrn1
     C                   endif
      *
     C                   when      *in11 = *on or mode = delete                 F11-delete
     C                   eval      action = delete
     C                   eval      routne = update
     C                   other
      *
      * User has pressed enter
      *
     C                   eval      routne = edit1
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Set indicators to control/protect screen fields
      *----------------------------------------------------------------
      *
     C     $ind          begsr
      *
     c                   select
     C                   when      mode = revise
     C                   seton                                        60
      *
     C                   when      mode = create
     C                   seton                                        61
      *
     C                   when      mode = delete
     C                   seton                                        62
     c                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Edit input fields for screen 1
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * *IN62 will be on if the record the user is trying to access has
      * been deleted by another user.  So, only perform the edits for the
      * fields on the screen if the indicator is off
      *
     C                   if        *in62 = *off                                 If here
      *
      * Adjustment Reason required
      *
     C                   if        d1ajrsn = *blank
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
     C                   endif
      *
      * At least one adjustment value must be entered.
      *
     C                   if        d1asxcdam2 = 0 and                           If all 0
     C                             d1tsxcdam2 = 0 and
     C                             d1tafcdam2 = 0 and
     C                             d1tbccdam2 = 0 and
     C                             d1toxcdam2 = 0 and
     C                             d1scdam2   = 0 and
     C                             d1tcdam2   = 0 and
     C                             d1aajam2   = 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08103'
     C                   endif
     C                   endif                                                  If all 0
      *
     C                   endif                                                  If here
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *------------------------------------------------------------------------------------
      * Validate Adjustment Reason
      *------------------------------------------------------------------------------------
      *
     C     $ajrsn        begsr
      *
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Write/update/delete record in database file
      *----------------------------------------------------------------
      *
     C     $upd1         begsr
      *
      * If deleting, perform deletion integrity checks.
      *
     C                   if        action = delete
     C                   exsr      $dltck
     C                   endif
      *
      * If user action is revising or deleting, determine that the
      * record he is accessing still exists prior to attempting to
      * update.  Lock the record for update.
      *
     C                   if        error = 0 and                                If OK
     C                             (action = delete or action = revise)
     C                   move      no            wksysfl
     C     key01         chain     tfl013b                            92
     C                   if        *in92 = *on                                  If not found
     C                   seton                                        62
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09008'
     C                   endif
     C                   endif                                                  If not found
     C                   endif                                                  If OK
      *
      *
      * If there are no errors, delete, revise or create the record.
      *
     C                   if        error = 0                                    If no error
      *
     c                   select
     C                   when      action = delete
     C                   delete    cdrec
     C                   other
      *
      * Move DSPF fields to database file fields
      *
     C                   z-add     xxbtsn        cdbtsn
     C                   z-add     xxddt         cdddt
     C                   z-add     xxrwedt       cdrwedt
     C                   z-add     xxcwedt       cdcwedt
     C                   move      xxrcexfl      cdrcexfl
     C                   move      no            cdsysfl
      *
     C                   move      d1ajrsn       cdajrsn
     C                   z-add     d1asxcdam2    cdasxcdam
     C                   z-add     d1tsxcdam2    cdtsxcdam
     C                   z-add     d1tafcdam2    cdtafcdam
     C                   z-add     d1tbccdam2    cdtbccdam
     C                   z-add     d1toxcdam2    cdtoxcdam
     C                   z-add     d1scdam2      cdscdam
     C                   z-add     d1tcdam2      cdtcdam
     C                   z-add     d1aajam2      cdaajam
      *
     C                   if        action = create
     C                   write     cdrec
     C                   else
     C                   update    cdrec
     C                   endif
      *
     C                   endsl
     C                   endif                                                  If no error
      *
      * Always redisplay when:
      *     1) there are errors
      *
     C                   select
     C                   when      error > 0
     C                   movel     scrn1         routne
     C                   other
      *
     C                   eval      rtncd = '00'
     C                   movel     exit          routne
     C                   endsl
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------------------------------
      * Deletion integrity checks
      *-------------------------------------------------------------------------------------
      *
     C     $dltck        begsr
      *
      * There are no deletion integrity checks at this time.
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------------------------------
      * Write error messages
      *-------------------------------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Set on last record indicator and end job
      *----------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        lr
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm Lists
      *
     C     *entry        plist
     C     d1mode        parm                    mode
     C                   parm                    xxrwedt
     C     d1rcexfl      parm                    xxrcexfl
     C                   parm                    xxcwedt
     C                   parm                    xxddt
     C     d1btsn        parm                    xxbtsn
     C                   parm                    rtncd
      *
     C                   movel     mode          action
      *
      * Flip the 3 incoming dates into MMDDYY format for the screen.
      *
      * Daily date
      *
     C     *iso          test(d)                 xxddt                  92
     C                   if        *in92 = *off                                 If OK daily
     C                   move      xxddt         wkisodate
     C     *mdy          move      wkisodate     d1dmdy
     C                   endif                                                  If OK daily
      *
      * Revenue week ending date
      *
     C     *iso          test(d)                 xxrwedt                92
     C                   if        *in92 = *off
     C                   move      xxrwedt       wkisodate
     C     *mdy          move      wkisodate     d1rmdy
     C                   endif
      *
      * Cash week ending date
      *
     C     *iso          test(d)                 xxrwedt                92
     C                   if        *in92 = *off
     C                   move      xxcwedt       wkisodate
     C     *mdy          move      wkisodate     d1cmdy
     C                   endif
      *
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    xxrwedt
     C                   kfld                    xxrcexfl
     C                   kfld                    xxcwedt
     C                   kfld                    xxddt
     C                   kfld                    xxbtsn
     C                   kfld                    wksysfl
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /eject
