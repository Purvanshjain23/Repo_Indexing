// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKD1EFR
// ?Date: 14.08.2025 Time: 02:49:12
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?R10690 JJH 06/20/17 - Producer Address
//?- No logic changes, recompile only.
ENDDO;

// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


//?USER: Initialize subfile header

EXECUTE FUNCTION(Producer Name         DRV) TYPE(DRVFLD)                        AB1100361;
PARAMETER(CTL.Producer_Name_DRV);
PARAMETER(CTL.PD_Producer_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.Producer_Name_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Initialize subfile record (existing record)

EXECUTE FUNCTION(Rtv D/A Desc,UOM,Amt  RT) TYPE(RTVOBJ) FILE(PKBBREP)           AB1110683;
PARAMETER(DB1.DED_D_A_Code);
PARAMETER(RCD.D_A_Description_DRV);
PARAMETER(WRK.DED_Fix_Var_Sys);
PARAMETER(WRK.PSD_Variable_UOM);
PARAMETER(WRK.PSD_Variable_Amount);
PARAMETER(WRK.DED_Plant_Deduction);
PARAMETER(RCD.DED_Gl_Code);
PARAMETER(RCD.DED_Contra_Gl_Code);
PARAMETER(WRK.DED_Accrual_Only);
PARAMETER(WRK.DED_Reserve_Account_Upd);
PARAMETER(WRK.DED_Prdcr_Special_Proc);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize subfile record (new record)

// RCD.PSDP Company Number = CTL.PSDP Company Number
RCD.PSDP_Company_Number = CTL.PSDP_Company_Number;

// RCD.RS Record Status = CND.Active
RCD.RS_Record_Status = 'A';

//?USER: Validate subfile record fields

EXECUTE FUNCTION(Rtv D/A Desc,UOM,Amt  RT) TYPE(RTVOBJ) FILE(PKBBREP)           AB1110683;
PARAMETER(RCD.DED_D_A_Code);
PARAMETER(RCD.D_A_Description_DRV);
PARAMETER(WRK.DED_Fix_Var_Sys);
PARAMETER(WRK.PSD_Variable_UOM);
PARAMETER(WRK.PSD_Variable_Amount);
PARAMETER(WRK.DED_Plant_Deduction);
PARAMETER(RCD.DED_Gl_Code);
PARAMETER(RCD.DED_Contra_Gl_Code);
PARAMETER(WRK.DED_Accrual_Only);
PARAMETER(WRK.DED_Reserve_Account_Upd);
PARAMETER(WRK.DED_Prdcr_Special_Proc);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Validate uom for Accruals
CASE;

// IF RCD.PSD Variable UOM is Dead Head UOM
IF RCD.PSD_Variable_UOM = 'CH'/'DH'/'DY'/'YH'/'KH';

// AND WRK.DED Accrual Only is Yes
AND WRK.DED_Accrual_Only = 'Y';

// Send error message - 'Accrual & Dead Hd UOM Err'
ERROR(PRK0696);
MSGPARM(RCD.PSD_Variable_UOM);

//?Validate uom for Accruals
// IF WRK.DED Plant Deduction is Yes
IF WRK.DED_Plant_Deduction = 'Y';

// Send error message - 'Plant Transaction, are only allowed at the D/A not by producer.'
ERROR(PRK0417);
MSGPARM(RCD.DED_D_A_Code);

ENDIF;

//?Validate uom,amount for fixed/var/system
CASE;

// IF WRK.DED Fix/Var/Sys is Variable
IF WRK.DED_Fix_Var_Sys = 'V';

CASE;

// IF RCD.PSD Variable UOM EQ WRK.Blank USR
IF RCD.PSD_Variable_UOM = WRK.Blank_USR;

// Send error message - 'UOM is required for a variable D/A code.'
ERROR(PRK0412);
MSGPARM(RCD.PSD_Variable_UOM);

ENDIF;

CASE;

// IF WRK.DED Prdcr Special Proc is Deferred Payment
IF WRK.DED_Prdcr_Special_Proc = 'D';

//?041404 slm do not require variable amt if deferred payment
// IF WRK.DED Prdcr Special Proc is Reimbursement
IF WRK.DED_Prdcr_Special_Proc = 'I'/'Y';

// IF WRK.DED Reserve Account Upd is Yes
IF WRK.DED_Reserve_Account_Upd = 'Y';

// IF RCD.PSD Variable Amount is Zeros
IF RCD.PSD_Variable_Amount = *ZERO;

// Send error message - 'Amt is required for a variable D/A code.'
ERROR(PRK0413);
MSGPARM(RCD.PSD_Variable_Amount);

ENDIF;

CASE;

// IF RCD.PSD Varialbe Amount Sign EQ WRK.Blank USR
IF RCD.PSD_Varialbe_Amount_Sign = WRK.Blank_USR;

// Send error message - 'Amt Sign is required for D/A code.'
ERROR(PRK0410);
MSGPARM(RCD.PSD_Varialbe_Amount_Sign);

ENDIF;

//?Validate uom,amount for fixed/var/system
// IF *OTHERWISE
IF *OTHERWISE;

//?For a Fixed D/A code, or System, the UOM and AMT are not allowed.
CASE;

// IF RCD.PSD Variable UOM NE WRK.Blank USR
IF RCD.PSD_Variable_UOM <> WRK.Blank_USR;

// Send error message - 'This UOM is only allowed for Variable D/A Codes.'
ERROR(PRK0414);
MSGPARM(RCD.PSD_Variable_UOM);

ENDIF;

CASE;

// IF RCD.PSD Variable Amount NE WRK.Zero USR
IF RCD.PSD_Variable_Amount <> WRK.Zero_USR;

// Send error message - 'This amount is only allowed if this is a variable D/A code.'
ERROR(PRK0415);
MSGPARM(RCD.PSD_Variable_Amount);

ENDIF;

CASE;

// IF RCD.PSD Varialbe Amount Sign GT WRK.Blank USR
IF RCD.PSD_Varialbe_Amount_Sign > WRK.Blank_USR;

// Send error message - 'Amt Sign is not allowed for this D/A code.'
ERROR(PRK0416);
MSGPARM(RCD.PSD_Varialbe_Amount_Sign);

ENDIF;

ENDIF;

//?Validate Accept Date.
CASE;

// IF RCD.PSD Accept Date EQ WRK.Zero USR
IF RCD.PSD_Accept_Date = WRK.Zero_USR;

// AND RCD.PSD Decline Date NE WRK.Zero USR
AND RCD.PSD_Decline_Date <> WRK.Zero_USR;

// Send error message - 'Accept Date is required.'
ERROR(PRK0674);
MSGPARM(RCD.PSD_Accept_Date);

ENDIF;

//?Validate Decline Date
CASE;

// IF RCD.PSD Decline Date LT RCD.PSD Accept Date
IF RCD.PSD_Decline_Date < RCD.PSD_Accept_Date;

// AND RCD.PSD Decline Date NE WRK.Zero USR
AND RCD.PSD_Decline_Date <> WRK.Zero_USR;

// Send error message - 'Accept Date must be earlier than the Decline Date.'
ERROR(PRK0675);
MSGPARM(RCD.PSD_Accept_Date);
MSGPARM(RCD.PSD_Decline_Date);

ENDIF;

//?CALC: Subfile record function fields

EXECUTE FUNCTION(D/A Description       DRV) TYPE(DRVFLD)                        AB1104719;
PARAMETER(RCD.D_A_Description_DRV);
PARAMETER(RCD.DED_D_A_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv D/A Desc          RT) TYPE(RTVOBJ) FILE(PKBBREP)           AB1104724;
 PARAMETER(PAR.DED_D_A_Code);
 PARAMETER(PAR.D_A_Description_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Create DBF record

EXECUTE FUNCTION(Crt Producer D/A      CO) TYPE(CRTOBJ) FILE(PKBEREP)           AB1104705;
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PSDP_Company_Number);
PARAMETER(RCD.DED_D_A_Code);
PARAMETER(RCD.PSD_Variable_UOM);
PARAMETER(RCD.PSD_Variable_Amount);
PARAMETER(RCD.PSD_Varialbe_Amount_Sign);
PARAMETER(RCD.PSD_Accept_Date);
PARAMETER(RCD.PSD_Decline_Date);
PARAMETER(RCD.PSD_Expense_Paid_By);
PARAMETER(RCD.PSD_Status_Unused_2);
PARAMETER(RCD.PSD_Status_Unused_3);
PARAMETER(RCD.PSD_Status_Unused_4);
PARAMETER(RCD.PSD_Status_Unused_5);
PARAMETER(RCD.PSD_Status_Unused_6);
PARAMETER(RCD.PSD_Status_Unused_7);
PARAMETER(RCD.PSD_Status_Unused_8);
PARAMETER(RCD.PSD_Status_Unused_9);
PARAMETER(RCD.PSD_Status_Unused_10);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


//?USER: Delete DBF record

EXECUTE FUNCTION(Dlt Producer D/A      DO) TYPE(DLTOBJ) FILE(PKBEREP)           AB1104707;
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PSDP_Company_Number);
PARAMETER(RCD.DED_D_A_Code);

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Producer D/A      CH) TYPE(CHGOBJ) FILE(PKBEREP)           AB1104706;
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PSDP_Company_Number);
PARAMETER(RCD.DED_D_A_Code);
PARAMETER(RCD.PSD_Variable_UOM);
PARAMETER(RCD.PSD_Variable_Amount);
PARAMETER(RCD.PSD_Varialbe_Amount_Sign);
PARAMETER(RCD.PSD_Accept_Date);
PARAMETER(RCD.PSD_Decline_Date);
PARAMETER(RCD.PSD_Expense_Paid_By);
PARAMETER(RCD.PSD_Status_Unused_2);
PARAMETER(RCD.PSD_Status_Unused_3);
PARAMETER(RCD.PSD_Status_Unused_4);
PARAMETER(RCD.PSD_Status_Unused_5);
PARAMETER(RCD.PSD_Status_Unused_6);
PARAMETER(RCD.PSD_Status_Unused_7);
PARAMETER(RCD.PSD_Status_Unused_8);
PARAMETER(RCD.PSD_Status_Unused_9);
PARAMETER(RCD.PSD_Status_Unused_10);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


