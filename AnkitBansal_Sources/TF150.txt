      *****************  RPG PROGRAM HEADING  ************************
     h option(*SRCSTMT:*NODEBUGIO)
      *
      * SYSTEM:      Triumph Foods
      * PROGRAM:     TF150
      * TITLE:       Inventory: Revise Kill/Cut Data
      * PROGRAMMER:  LeAnne Ramsey
      * CREATED:     03/27/07
      *
      * FUNCTION: Uses an edit record format to add/change/delete records.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      * 12/01/08  LeAnne Ramsey
      *           File TFP050 was renamed from Cold Carcass Pounds to Kill/Cut Data.
      *           Fields were added to the file.
      *           The 2-letter prefix was changed from "CP" to "KC".
      *           Both Triumph and Seaboard will now be entering data for each record.
      *           So, we added F9=Accept to give the folks an extra chance to get it
      *           right.
      *
      * 11/06/17  Danny Nguyen    - R12011-Kill Cut Data for STF
      *           File TFP050 was changed to add 4 fields:
      *             KCXKLHD - STF KILLED HEAD
      *             KCXHCLB - STF HOT CARCASS LBS
      *             KCXCTHD - STF CUT HEAD
      *             KCXCCLB - STF COLD CARCASS LBS
      *           Added maintenance of the 4 fields on screen for Sioux City (440).
      *
      /eject
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Ftfd150    cf   e             workstn infds(iofeed)
      *
      *
     Ftfp099    if   e           k disk
      *   Function control
      *
      *
     Ftfp050    uf a e           k disk
      *   Kill/Cut data
      *
      /eject
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D create          c                   'CREATE'
     D revise          c                   'REVISE'
     D delete          c                   'DELETE'
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
     D update          c                   'UPDATE'
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D rtncd           s              2
     D action          s                   like(mode)
     D maxmsg          s              2  0  inz(20)
      *
      *
      *
      * Workfields for date manipulation
      *
     D wkwedt          s                   like(kcwedt)
     D wkisodate       s               D   datfmt(*iso)
     D wkdt            s              8  0
     D wkupdt          s              8  0
      *
      *
      * Parms
      *
     D xxwedt          s                   like(kcwedt)
     D xxwemdy         s                   like(d1wemdy)
     D xxsatdt         s              8  0
     D xxdt            s              8  0
     D xxyr            s              4  0
     D xxpe            s              4  0
     D xxwk            s              2  0
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /eject
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     update        $upd1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo
      /eject
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * If incoming mode is REVISE, then retrieve the database
      * record.  Do not lock the record.
      *
     C                   if        mode = revise                                If revise
     C     xxwedt        chain(n)  tfp050                             92
     C                   if        *in92 = *on                                  If no hit
     C                   seton                                        62
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09008'
     C                   endif
     C                   else
      *
     C                   z-add     kcyr          d1yr
     C                   z-add     kcwk          d1wk
     C                   z-add     kcsklhd       d1sklhd
     C                   z-add     kcshclb       d1shclb
     C                   z-add     kcscthd       d1scthd
     C                   z-add     kcscclb       d1scclb
      *
     C                   z-add     kctklhd       d1tklhd
     C                   z-add     kcthclb       d1thclb
     C                   z-add     kctcthd       d1tcthd
     C                   z-add     kctcclb       d1tcclb
      *
12011C                   z-add     kcxklhd       d1xklhd
  |  C                   z-add     kcxhclb       d1xhclb
  |  C                   z-add     kcxcthd       d1xcthd
12011C                   z-add     kcxcclb       d1xcclb
     C                   endif                                                  If no hit
     C                   endif                                                  If revise
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Set indicators to control input/output fields and available
      * function keys.
     C                   exsr      $ind
      *
      *
      * Write screen 1 to CRT
      *
     C                   write     tf150k1
     C                   write     tf150ec
     C                   exfmt     tf150r1
      *
      * Clear messages
     C                   exsr      $clmsg
      *
      *
      * Reset action to be equal to the incoming mode.  This is required
      * in case the user took F11-Delete and got an error on the
      * deletion and now needs to be able to change the record and take
      * an action other than delete
      *
     C                   eval      action = mode
      *
      * Get user's input and set routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      rtncd = '03'
     C                   eval      routne = exit
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   eval      routne = set1
      *
     C                   when      *in09 = *on                                  F9-accept
     C                   exsr      $edit1
      *
     C                   if        error = 0
     C                   exsr      $upd1
     C                   else
     C                   eval      routne = scrn1
     C                   endif
      *
     C                   when      *in11 = *on                                  F11-delete
     C                   eval      action = delete
     C                   eval      routne = update
     C                   other
      *
      * User has pressed enter
      *
     C                   eval      routne = edit1
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Set indicators to control/protect screen fields
      *----------------------------------------------------------------
      *
     C     $ind          begsr
      *
     C                   select
     C                   when      mode = revise
     C                   seton                                        60
      *
     C                   when      mode = create
     C                   seton                                        61
      *
     C                   when      mode = delete
     C                   seton                                        62
     c                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Edit input fields for screen 1
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * *IN62 will be on if the record the user is trying to access has
      * been deleted by another user.  So, only perform the edits for the
      * fields on the screen if the indicator is off
      *
     C                   if        *in62 = *off                                 If here
      *
      * In Create Mode, validate:
      *   1) Week-ending date
      *
     C                   if        mode = create
     C                   exsr      $wemdy
     C                   endif
      *
      * Always validate:
      *   1) killed head
      *   2) hot weight (aka: hot carcass pounds)
      *   3) cut head
      *   4) cold carcass pounds
      *   5) Last check to see if Inventory Close is running
      *
      * Seaboard
     C                   exsr      $sklhd
     C                   exsr      $shclb
     C                   exsr      $scthd
     C                   exsr      $scclb
      * Triumph
     C                   exsr      $tklhd
     C                   exsr      $thclb
     C                   exsr      $tcthd
     C                   exsr      $tcclb
      *
12011 * Sioux City
  |  C                   exsr      $xklhd
  |  C                   exsr      $xhclb
  |  C                   exsr      $xcthd
12011C                   exsr      $xcclb
      *
      * Last check to see if Inventory or Margin Adjustment Close (Final) is
      * running.
     C                   exsr      $finals
     C                   endif                                                  If here
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *------------------------------------------------------------------------------------
      * Validate Week-ending Date (in CREATE mode only)
      *------------------------------------------------------------------------------------
      *
      * Validations:
      *  1) required
      *  2) must be a valid date
      *  3) must be a Saturday (we will overlay user's entry with a Saturday)
      *  4) no weekly record can already exist for the date
      *  5) the date cannot be after the current "inventory" week in the Control record
      *
     C     $wemdy        begsr
      *
     C                   z-add     0             wkwedt
     C                   z-add     0             d1yr
     C                   z-add     0             d1wk
      *
     C                   select
     C                   when      d1wemdy = 0
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
      *
     C                   when      d1wemdy < 0
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   other
      *
     C     *mdy          test(d)                 d1wemdy                92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      * Flip the date from MMDDYY to CCYYMMDD and continue editing.
      *
     C     *mdy          move      d1wemdy       wkisodate
     C                   move      wkisodate     wkdt
      *
      * Retrieve Saturday week-ending date associated with the date.
      *
     C                   call      'TF811'
     C                   parm      wkdt          xxdt
     C                   parm      0             xxsatdt
     C     d1yr          parm      0             xxyr
     C                   parm      0             xxpe
     C     d1wk          parm      0             xxwk
      *
      * Get returned 'Saturday week-ending date' into MMDDYY format.
      * and plop it over the user-entered date (just in case the user
      * did not enter a week-ending date.)
      *
     C     *iso          test(d)                 xxsatdt                92
     C                   if        *in92 = *on                                  If bad Saturday
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09229'
     C                   endif
     C                   else
      *
      * Plop over user's date
      *
     C                   z-add     xxsatdt       wkwedt
     C                   move      xxsatdt       wkisodate
     C     *mdy          move      wkisodate     d1wemdy
     C                   endif                                                  If bad Saturday
     C                   endif                                                  If bad date
     C                   endsl
      *
      * If you have a valid Saturday date
      *
     C                   if        *in30 = *off                                 If ok so far
      *
      * Check that no record already exists for this week-ending date.
      *
     C     wkwedt        chain(n)  tfp050                             92
     C                   if        *in92 = *off                                 If already
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08111'
     C                   endif
     C                   endif                                                  If already
      *
      * Make Date comparisons against the Inventory Control record.
      *
     C     'INVENTORY '  chain     tfp099                             92
     C                   if        *in92 = *off                                 If inventory
      *
      * The date cannot be after the "current" week for "inventory".
      *
     C                   if        wkwedt > fncedt
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08113'
     C                   endif
     C                   endif
      *
      * The date cannot be for a Closed "inventory" week.
      *
     C                   if        wkwedt <= fnledt
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08123'
     C                   endif
     C                   endif
      *
     C                   endif                                                  If inventory
      *
      * The date cannot be for a "closed" Margin week.
      *
     C     'MARGIN    '  chain     tfp099                             92
     C                   if        *in92 = *off and                             If margin
     C                             wkwedt <= fnledt
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08101'
     C                   endif
     C                   endif                                                  If margin
      *
      * The date cannot be prior to 2007
      *
     C                   if        wkwedt < 20070000
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08114'
     C                   endif
     C                   endif
     C                   endif                                                  If ok so far
      *
     C                   endsr
      /eject
      *------------------------------------------------------------------------------------
      * Seaboard Killed Head
      *------------------------------------------------------------------------------------
      *
      * Validations:
      *  1) cannot be negative
      *
     C     $sklhd        begsr
      *
     C                   select
     C                   when      d1sklhd < 0
     C                   seton                                        37
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *------------------------------------------------------------------------------------
      * Triumph Kill Head
      *------------------------------------------------------------------------------------
      *
      * Validations:
      *  1) cannot be negative
      *
     C     $tklhd        begsr
      *
     C                   select
     C                   when      d1tklhd < 0
     C                   seton                                        38
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
12011 *------------------------------------------------------------------------------------
  |   * Sioux City Kill Head
  |   *------------------------------------------------------------------------------------
  |   *
  |   * Validations:
  |   *  1) cannot be negative
  |   *
  |  C     $xklhd        begsr
  |   *
  |  C                   select
  |  C                   when      d1xklhd < 0
  |  C                   seton                                        39
  |  C                   if        error < maxmsg
  |  C                   add       1             error
  |  C                   eval      mgid(e) = 'HS09000'
  |  C                   endif
  |  C                   endsl
  |   *
12011C                   endsr
      /eject
      *------------------------------------------------------------------------------------
      * Seaboard Hot Weight
      *------------------------------------------------------------------------------------
      *
      * Validations:
      *  1) cannot be negative
      *
     C     $shclb        begsr
      *
     C                   select
     C                   when      d1shclb < 0
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *------------------------------------------------------------------------------------
      * Triumph Hot Weight
      *------------------------------------------------------------------------------------
      *
      * Validations:
      *  1) cannot be negative
      *
     C     $thclb        begsr
      *
     C                   select
     C                   when      d1thclb < 0
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
12011 *------------------------------------------------------------------------------------
  |   * Sioux City Hot Weight
  |   *------------------------------------------------------------------------------------
  |   *
  |   * Validations:
  |   *  1) cannot be negative
  |   *
  |  C     $xhclb        begsr
  |   *
  |  C                   select
  |  C                   when      d1xhclb < 0
  |  C                   seton                                        40
  |  C                   if        error < maxmsg
  |  C                   add       1             error
  |  C                   eval      mgid(e) = 'HS09000'
  |  C                   endif
  |  C                   endsl
  |   *
12011C                   endsr
      /eject
      *------------------------------------------------------------------------------------
      * Seaboard Cut Head
      *------------------------------------------------------------------------------------
      *
      * Validations:
      *  1) cannot be negative
      *
     C     $scthd        begsr
      *
     C                   select
     C                   when      d1scthd < 0
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *------------------------------------------------------------------------------------
      * Triumph Cut Head
      *------------------------------------------------------------------------------------
      *
      * Validations:
      *  1) cannot be negative
      *
     C     $tcthd        begsr
      *
     C                   select
     C                   when      d1tcthd < 0
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
12011 *------------------------------------------------------------------------------------
  |   * Sioux City Cut Head
  |   *------------------------------------------------------------------------------------
  |   *
  |   * Validations:
  |   *  1) cannot be negative
  |   *
  |  C     $xcthd        begsr
  |   *
  |  C                   select
  |  C                   when      d1xcthd < 0
  |  C                   seton                                        41
  |  C                   if        error < maxmsg
  |  C                   add       1             error
  |  C                   eval      mgid(e) = 'HS09000'
  |  C                   endif
  |  C                   endsl
  |   *
12011C                   endsr
      /eject
      *------------------------------------------------------------------------------------
      * Seaboard Cold Carcass Pounds
      *------------------------------------------------------------------------------------
      *
      * Validations:
      *  1) cannot be negative
      *
     C     $scclb        begsr
      *
     C                   select
     C                   when      d1scclb < 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *------------------------------------------------------------------------------------
      * Triumph Cold Carcass Pounds
      *------------------------------------------------------------------------------------
      *
      * Validations:
      *  1) cannot be negative
      *
     C     $tcclb        begsr
      *
     C                   select
     C                   when      d1tcclb < 0
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
12011 *------------------------------------------------------------------------------------
  |   * Sioux City Cold Carcass Pounds
  |   *------------------------------------------------------------------------------------
  |   *
  |   * Validations:
  |   *  1) cannot be negative
  |   *
  |  C     $xcclb        begsr
  |   *
  |  C                   select
  |  C                   when      d1xcclb < 0
  |  C                   seton                                        42
  |  C                   if        error < maxmsg
  |  C                   add       1             error
  |  C                   eval      mgid(e) = 'HS09000'
  |  C                   endif
  |  C                   endsl
  |   *
12011C                   endsr
      /eject
      *-------------------------------------------------------------------------------------
      * Make 1 final check
      *-------------------------------------------------------------------------------------
      *
      * We don't want users changing a record if:
      *  a) a "final" Inventory Close is running
      *  b) a "final" Margin Close is running
      *
     C     $finals       begsr
      *
      * Retrieve the Inventory record from the Control file.
      *
     C     'INVENTORY '  chain     tfp099                             92
     C                   if        *in92 = *off and                             If hit
     C                             fnsbfl = yes and
     C                             fnpfcd = 'F' and
     C                             wkwedt = fncedt and
     C                             error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08100'
     C                   endif
      *
     C     'MARGIN    '  chain     tfp099                             92
     C                   if        *in92 = *off and                             If hit
     C                             fnsbfl = yes and
     C                             fnpfcd = 'F' and
     C                             wkwedt = fncedt and
     C                             error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08100'
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Write/update/delete record in database file
      *----------------------------------------------------------------
      *
     C     $upd1         begsr
      *
      * If user action is revising or deleting, determine that the
      * record he is accessing still exists prior to attempting to
      * update.  Lock the record for update.
      *
     C                   if        error = 0 and                                If OK
     C                             (action = delete or action = revise)
     C     xxwedt        chain     tfp050                             92
     C                   if        *in92 = *on                                  If not found
     C                   seton                                        62
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09008'
     C                   endif
     C                   endif                                                  If not found
     C                   endif                                                  If OK
      *
      * If there are no errors, create/revise/delete record.
      *
     C                   if        error = 0                                    If no error
      *
     c                   select
     C                   when      action = delete
     C                   delete    kcrec
     C                   other
      *
      * Move DSPF fields to database file fields
      *
     C                   z-add     d1sklhd       kcsklhd
     C                   z-add     d1shclb       kcshclb
     C                   z-add     d1scthd       kcscthd
     C                   z-add     d1scclb       kcscclb
      *
     C                   z-add     d1tklhd       kctklhd
     C                   z-add     d1thclb       kcthclb
     C                   z-add     d1tcthd       kctcthd
     C                   z-add     d1tcclb       kctcclb
      *
12011C                   z-add     d1xklhd       kcxklhd
  |  C                   z-add     d1xhclb       kcxhclb
  |  C                   z-add     d1xcthd       kcxcthd
12011C                   z-add     d1xcclb       kcxcclb
      *
      * Time Stamp
     C                   move      sdusr         kcupusr
     C                   z-add     wkupdt        kcupdt
     C                   time                    kcuptm
      *
     C                   if        action = create                              If create
     C                   z-add     d1yr          kcyr
     C                   z-add     d1wk          kcwk
     C                   z-add     wkwedt        kcwedt
     C                   move      kcwedt        wkisodate
     C                   subdur    6:*days       wkisodate
     C                   move      wkisodate     kcwbdt
     C                   write     kcrec
     C                   else
      *
     C                   update    kcrec
     C                   endif                                                  If create
     C                   endsl
     C                   endif                                                  If no error
      *
      * Always redisplay when:
      *     1) there are errors
      *
     C                   select
     C                   when      error > 0
     C                   movel     scrn1         routne
     C                   other
      *
     C                   eval      rtncd = '00'
     C                   movel     exit          routne
     C                   endsl
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------------------------------
      * Write error messages
      *-------------------------------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Set on last record indicator and end job
      *----------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        lr
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm Lists
      *
     C     *entry        plist
     C     d1mode        parm                    mode
     C     wkwedt        parm                    xxwedt
     C     d1wemdy       parm                    xxwemdy
     C                   parm                    rtncd
      *
     C                   movel     mode          action
      *
      * Key lists
      *   none
      *
      *
      * Save system date for record stamp
      *
     C     *mdy          move      udate         wkisodate
     C                   move      wkisodate     wkupdt
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
      * Retrieve the Inventory record from the Control file.
      *
     C     'INVENTORY '  chain     tfp099                             92
     C                   if        *in92 = *off                                 If hit
     C                   z-add     fncyr         d1yr
     C                   z-add     fncwk         d1wk
      *
      * If in Create mode,
      *   2) Default the Current End Date from the Function Control
      *      'Inventory' record into the Effective Date.
      *
     C                   select
     C                   when      mode = create
     C                   z-add     fncemdy       d1wemdy
     C
     C                   when      wkwedt < fncedt
     C                   seton                                        62
     C                   add       1             error
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08155'
     C                   endif
     C                   endsl
     C                   endif                                                  If hit
      *
     C                   endsr
      /eject
