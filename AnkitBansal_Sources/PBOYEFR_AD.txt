// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBOYEFR
// ?Date: 14.08.2025 Time: 03:48:45
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?E12048 - Set the First Time Flag = Y
// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

//?USER: Initialize subfile header

CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

// CTL.Record Status = CND.Active
CTL.Record_Status = 'A';

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

ENDIF;

//?USER: Initialize subfile record (existing record)

EXECUTE FUNCTION(RTV Parent Customer    RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1225254;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(LCL.Parent_Customer);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Parent Customer EQ DB1.Ship To Customer
IF LCL.Parent_Customer = DB1.Ship_To_Customer;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select one company
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

// AND PAR.Company Number EQ DB1.Company Number
AND PAR.Company_Number = DB1.Company_Number;

//?Select one company
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

EXECUTE FUNCTION(Customer Name DRV) TYPE(DRVFLD)                                AC1631131;
PARAMETER(RCD.Customer_Name_DRV);
PARAMETER(RCD.Ship_To_Customer);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Customer_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?Select Customer Name
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF CTL.Customer Name NE WRK.BLANK
IF CTL.Customer_Name <> WRK.BLANK;

// Call program CLC Call Qclscan       UP.
CALL PROGRAM(CLC Call Qclscan       UP) ('QCLSCAN');
PARAMETER(RCD.Customer_Name_DRV);
PARAMETER(30);
PARAMETER(1);
PARAMETER(CTL.Customer_Name);
PARAMETER(30);
PARAMETER(1);
PARAMETER(1);
PARAMETER(*BLANK);
PARAMETER(WRK.USR_Qclscan_Result);

CASE;

// IF WRK.USR Qclscan Result ? is Does contain
IF WRK.USR_Qclscan_Result > 0;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Select Class
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF CTL.CCE Classification ABC is Class Values
IF CTL.CCE_Classification_ABC = 'A'/'B'/'C';

CASE;

// IF CTL.CCE Classification ABC NE DB1.CCE Classification ABC
IF CTL.CCE_Classification_ABC <> DB1.CCE_Classification_ABC;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Select Record Status                                  E009708
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(RTV Parent Info        RT) TYPE(RTVOBJ) FILE(CABBREP)          AC2134548;
PARAMETER(1);
PARAMETER(NLL.Customer_Name);
PARAMETER(NLL.Address_Line_1);
PARAMETER(NLL.Address_Line_2);
PARAMETER(NLL.Address_Line_3);
PARAMETER(NLL.City);
PARAMETER(NLL.State_Code);
PARAMETER(NLL.County_Code);
PARAMETER(NLL.Zip_Postal_Code);
PARAMETER(NLL.Telephone_Number_FF);
PARAMETER(NLL.Fax_Number_FF);
PARAMETER(NLL.Alpha_Search);
PARAMETER(NLL.Federal_Tax_Id);
PARAMETER(NLL.New_Customer_Status);
PARAMETER(NLL.SIC_Number);
PARAMETER(NLL.D_B_Number);
PARAMETER(NLL.D_B_Rating);
PARAMETER(NLL.Date_of_D_B_Rating);
PARAMETER(NLL.Credit_Line_Expire_Date);
PARAMETER(NLL.AR_Customer_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(NLL.Credit_Check_AR_Customer);
PARAMETER(NLL.Credit_Check_Parent_Cust);
PARAMETER(NLL.Country_Code);
PARAMETER(NLL.EDI_Invoice_Sts);
PARAMETER(NLL.Order_Entry_Hold);
PARAMETER(NLL.Parent_Credit_Limit);
PARAMETER(NLL.AR_Credit_Limit);
PARAMETER(NLL.Order_Entry_Hold_Date);
PARAMETER(NLL.Ship_To_Customer_Flag);
PARAMETER(NLL.Field_vs_In_House_flag);
PARAMETER(NLL.Email_When_Order_Shipped);
PARAMETER(NLL.Print_Invoice_Sts);
PARAMETER(NLL.Item_Reference_Status);
PARAMETER(NLL.Statement_Print_Frequency);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(RCD.Record_Status);
{
 //?USER: Initialize routine

 //?Modifications and Comments
 DO;

 //?E12048 JJH 11/09/17 - Correct Record Selection
 //?- Change logic to include all Customer that have the same Parent
 //?  Customer and Ship To Customer.  Thus removing logic that required
 //?  the A/R Customer to also match.
 ENDDO;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 //?USER: Process Data record

 //?R10248 JJH 11/06/17 - Change Parent Customer Identification
 //?Old Logic
 CASE;

 // IF PAR.Parent Customer EQ DB1.Ship To Customer
 IF PAR.Parent_Customer = DB1.Ship_To_Customer;

 // AND PAR.Parent Customer EQ DB1.A/R Customer Number
 AND PAR.Parent_Customer = DB1.AR_Customer_Number;

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 ENDIF;

 CASE;

 // IF PAR.Parent Customer EQ DB1.Ship To Customer
 IF PAR.Parent_Customer = DB1.Ship_To_Customer;

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 ENDIF;

}


CASE;

// IF RCD.Record Status NE CTL.Record Status
IF RCD.Record_Status <> CTL.Record_Status;

// AND CTL.Record Status is Not Blanks
AND CTL.Record_Status = 'A'/'D'/'I';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// LCL.Record Status = CTL.Record Status
LCL.Record_Status = CTL.Record_Status;

ENDIF;

//?USER: Validate subfile control

CASE;

// IF CTL.Customer Name NE LCL.Customer Name
IF CTL.Customer_Name <> LCL.Customer_Name;

// LCL.Customer Name = CTL.Customer Name
LCL.Customer_Name = CTL.Customer_Name;

// Execute function CVT to Upper w/SpclChr US.
EXECUTE FUNCTION(CVT to Upper w/SpclChr US) TYPE(EXCUSRSRC) ('POODUFR');
PARAMETER(CTL.Customer_Name);
PARAMETER(CTL.Customer_Name);
{
 E                    AR1        30  1               ARRAY 2
 C                     MOVEA#IMKTX    AR1              LOAD ARRAY
 C                     Z-ADD1         X1      20       SET COUNTER
 C                     Z-ADD1         Y1      20       SET COUNTER
 * * * * * * * CHECK FOR ALPHABETIC CHARACTERS * * * * * * *
 C                     Z-ADD1         Y1
 C           Y1        DOWLT31
 C           AR1,Y1    IFEQ 'a'
 C                     MOVEL'A'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'b'
 C                     MOVEL'B'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'c'
 C                     MOVEL'C'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'd'
 C                     MOVEL'D'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'e'
 C                     MOVEL'E'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'f'
 C                     MOVEL'F'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'g'
 C                     MOVEL'G'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'h'
 C                     MOVEL'H'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'i'
 C                     MOVEL'I'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'j'
 C                     MOVEL'J'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'k'
 C                     MOVEL'K'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'l'
 C                     MOVEL'L'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'm'
 C                     MOVEL'M'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'n'
 C                     MOVEL'N'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'o'
 C                     MOVEL'O'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'p'
 C                     MOVEL'P'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'q'
 C                     MOVEL'Q'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'r'
 C                     MOVEL'R'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 's'
 C                     MOVEL'S'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 't'
 C                     MOVEL'T'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'u'
 C                     MOVEL'U'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'v'
 C                     MOVEL'V'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'w'
 C                     MOVEL'W'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'x'
 C                     MOVEL'X'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'y'
 C                     MOVEL'Y'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'z'
 C                     MOVEL'Z'       AR1,Y1
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     ADD  1         Y1
 C                     END
 C                     MOVEAAR1       #OMLTX           LOAD OUTPUT
}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF CTL.CCE Classification ABC NE LCL.CCE Classification ABC
IF CTL.CCE_Classification_ABC <> LCL.CCE_Classification_ABC;

// LCL.CCE Classification ABC = CTL.CCE Classification ABC
LCL.CCE_Classification_ABC = CTL.CCE_Classification_ABC;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF CTL.Record Status NE LCL.Record Status
IF CTL.Record_Status <> LCL.Record_Status;

// LCL.Record Status = CTL.Record Status
LCL.Record_Status = CTL.Record_Status;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Validate subfile record fields

EXECUTE FUNCTION(RTV Parent Info        RT) TYPE(RTVOBJ) FILE(CABBREP)          AC2134548;
PARAMETER(1);
PARAMETER(NLL.Customer_Name);
PARAMETER(NLL.Address_Line_1);
PARAMETER(NLL.Address_Line_2);
PARAMETER(NLL.Address_Line_3);
PARAMETER(NLL.City);
PARAMETER(NLL.State_Code);
PARAMETER(NLL.County_Code);
PARAMETER(NLL.Zip_Postal_Code);
PARAMETER(NLL.Telephone_Number_FF);
PARAMETER(NLL.Fax_Number_FF);
PARAMETER(NLL.Alpha_Search);
PARAMETER(NLL.Federal_Tax_Id);
PARAMETER(NLL.New_Customer_Status);
PARAMETER(NLL.SIC_Number);
PARAMETER(NLL.D_B_Number);
PARAMETER(NLL.D_B_Rating);
PARAMETER(NLL.Date_of_D_B_Rating);
PARAMETER(NLL.Credit_Line_Expire_Date);
PARAMETER(NLL.AR_Customer_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(NLL.Credit_Check_AR_Customer);
PARAMETER(NLL.Credit_Check_Parent_Cust);
PARAMETER(NLL.Country_Code);
PARAMETER(NLL.EDI_Invoice_Sts);
PARAMETER(NLL.Order_Entry_Hold);
PARAMETER(NLL.Parent_Credit_Limit);
PARAMETER(NLL.AR_Credit_Limit);
PARAMETER(NLL.Order_Entry_Hold_Date);
PARAMETER(NLL.Ship_To_Customer_Flag);
PARAMETER(NLL.Field_vs_In_House_flag);
PARAMETER(NLL.Email_When_Order_Shipped);
PARAMETER(NLL.Print_Invoice_Sts);
PARAMETER(NLL.Item_Reference_Status);
PARAMETER(NLL.Statement_Print_Frequency);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(LCL.Record_Status);
{
 //?USER: Initialize routine

 //?Modifications and Comments
 DO;

 //?E12048 JJH 11/09/17 - Correct Record Selection
 //?- Change logic to include all Customer that have the same Parent
 //?  Customer and Ship To Customer.  Thus removing logic that required
 //?  the A/R Customer to also match.
 ENDDO;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 //?USER: Process Data record

 //?R10248 JJH 11/06/17 - Change Parent Customer Identification
 //?Old Logic
 CASE;

 // IF PAR.Parent Customer EQ DB1.Ship To Customer
 IF PAR.Parent_Customer = DB1.Ship_To_Customer;

 // AND PAR.Parent Customer EQ DB1.A/R Customer Number
 AND PAR.Parent_Customer = DB1.AR_Customer_Number;

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 ENDIF;

 CASE;

 // IF PAR.Parent Customer EQ DB1.Ship To Customer
 IF PAR.Parent_Customer = DB1.Ship_To_Customer;

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 ENDIF;

}


//?Select Record Status                                  E009708
CASE;

// IF CTL.Record Status NE LCL.Record Status
IF CTL.Record_Status <> LCL.Record_Status;

// AND CTL.Record Status is Not Blanks
AND CTL.Record_Status = 'A'/'D'/'I';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?CALC: Subfile record function fields

EXECUTE FUNCTION(Customer Name DRV) TYPE(DRVFLD)                                AC1631131;
PARAMETER(RCD.Customer_Name_DRV);
PARAMETER(RCD.Ship_To_Customer);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Customer_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Rtv/Upd Class ABC     IF) TYPE(EXCINTFUN) FILE(PDNIREP)        AC2095862;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.CCE_Classification_ABC);
{
 //?Execute internal function

 //?Update class on the parent #
 EXECUTE FUNCTION(Rtv/Upd Class ABC     RT) TYPE(RTVOBJ) FILE(PDNIREP)           AC2095863;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.CCE_Classification_ABC);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Shipping Temp    CH) TYPE(CHGOBJ) FILE(PDNIREP)            AC1645932;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Cust_Shipping_Temp);
  PARAMETER(DB1.Cust_Shipping_Temp_C_F);
  PARAMETER(DB1.Print_Req_Delv_Tm_on_Docs);
  PARAMETER(DB1.Item_Age_Days_Fresh);
  PARAMETER(DB1.Item_Age_Days_Frozen);
  PARAMETER(PAR.CCE_Classification_ABC);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 //?Update class on ship to# for the parent
 EXECUTE FUNCTION(Rtv/Upd DP Class       RT) TYPE(RTVOBJ) FILE(CABBREP)          AC2100456;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.CCE_Classification_ABC);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv/Upd Class ABC     RT) TYPE(RTVOBJ) FILE(PDNIREP)           AC2095863;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(PAR.CCE_Classification_ABC);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Shipping Temp    CH) TYPE(CHGOBJ) FILE(PDNIREP)            AC1645932;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Ship_To_Customer);
   PARAMETER(DB1.Cust_Shipping_Temp);
   PARAMETER(DB1.Cust_Shipping_Temp_C_F);
   PARAMETER(DB1.Print_Req_Delv_Tm_on_Docs);
   PARAMETER(DB1.Item_Age_Days_Fresh);
   PARAMETER(DB1.Item_Age_Days_Frozen);
   PARAMETER(PAR.CCE_Classification_ABC);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

 }

 // LCL.DP Location = CON.*BLANK
 LCL.DP_Location = *BLANK;

 CASE;

 // IF PAR.Ship To Customer is GE 1000000
 IF PAR.Ship_To_Customer >= 1000000;

 // LCL.Customer Number Alpha = CVTVAR(PAR.Ship To Customer)
 LCL.Customer_Number_Alpha = CVTVAR(PAR.Ship_To_Customer);

 // LCL.DP Location = LCL.Customer Number Alpha
 LCL.DP_Location = LCL.Customer_Number_Alpha;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Ship To Customer is GE 100000
 IF PAR.Ship_To_Customer >= 100000;

 // LCL.USR number = PAR.Ship To Customer
 LCL.USR_number = PAR.Ship_To_Customer;

 // LCL.customer = CVTVAR(LCL.USR number)
 LCL.customer = CVTVAR(LCL.USR_number);

 // LCL.DP Location = LCL.customer
 LCL.DP_Location = LCL.customer;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Number 5,0            USR = PAR.Ship To Customer
 LCL.Number_50_USR = PAR.Ship_To_Customer;

 // LCL.Text USR 5 = CVTVAR(LCL.Number 5,0            USR)
 LCL.Text_USR_5 = CVTVAR(LCL.Number_50_USR);

 // LCL.DP Location = LCL.Text USR 5
 LCL.DP_Location = LCL.Text_USR_5;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Rtv/Chg Location Class RT) TYPE(RTVOBJ) FILE(PBBOREP)          AC2097954;
 PARAMETER(LCL.DP_Location);
 PARAMETER(PAR.CCE_Classification_ABC);
 PARAMETER(PAR.Ship_To_Customer);
 {
  //?USER: Process Data record

  // LCL.Parent Customer = CON.*ZERO
  LCL.Parent_Customer = *ZERO;

  // WRK.Text USR 7 = DB1.DP Location
  WRK.Text_USR_7 = DB1.DP_Location;

  // Execute function RPG TESTN for 7 pos.  US.
  EXECUTE FUNCTION(RPG TESTN for 7 pos.  US) TYPE(EXCUSRSRC) ('POKFUFR');
  PARAMETER(WRK.Text_USR_7);
  {
   C                     TESTN          WUY8TX  7  60
   C           *IN60     IFEQ '0'
   C                     MOVE 'DECERR ' WUH3TX
   C                     ELSE
   C                     MOVE '       ' WUH3TX
   C                     END
  }

  CASE;

  // IF WRK.Return Code Usr is DECERR
  IF WRK.Return_Code_Usr = 'DECERR';

  // WRK.Text USR 6 = DB1.DP Location
  WRK.Text_USR_6 = DB1.DP_Location;

  // Execute function RPG TESTN for 6 pos.  US.
  EXECUTE FUNCTION(RPG TESTN for 6 pos.  US) TYPE(EXCUSRSRC) ('POKHUFR');
  PARAMETER(WRK.Text_USR_6);
  {
   C                     TESTN          WUXLTX  6  60
   C           *IN60     IFEQ '0'
   C                     MOVE 'DECERR ' WUH3TX
   C                     ELSE
   C                     MOVE '       ' WUH3TX
   C                     END
  }

  CASE;

  // IF WRK.Return Code Usr is DECERR
  IF WRK.Return_Code_Usr = 'DECERR';

  // WRK.Text USR 5 = DB1.DP Location
  WRK.Text_USR_5 = DB1.DP_Location;

  // LCL.Parent Customer = CVTVAR(WRK.Text USR 5)
  LCL.Parent_Customer = CVTVAR(WRK.Text_USR_5);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Parent Customer = CVTVAR(WRK.Text USR 6)
  LCL.Parent_Customer = CVTVAR(WRK.Text_USR_6);

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Parent Customer = CVTVAR(WRK.Text USR 7)
  LCL.Parent_Customer = CVTVAR(WRK.Text_USR_7);

  ENDIF;

  CASE;

  // IF LCL.Parent Customer EQ PAR.Parent Customer
  IF LCL.Parent_Customer = PAR.Parent_Customer;

  EXECUTE FUNCTION(Chg DP Location Class CH) TYPE(CHGOBJ) FILE(PBBOREP)           AC2095662;
  PARAMETER(DB1.DP_Profile);
  PARAMETER(DB1.DP_Scenario);
  PARAMETER(DB1.DP_Location);
  PARAMETER(DB1.DP_Parent_Customer_Name);
  PARAMETER(PAR.CCE_Classification_ABC);
  PARAMETER(DB1.DP_System_of_Record);
  PARAMETER(DB1.DP_Date_Time_Stamp);
  ENDIF;

 }

 //?Update Classification for all the Ship To's Sold To's  E009708
 EXECUTE FUNCTION(Rtv/Upd Class for Sold RT) TYPE(RTVOBJ) FILE(CABBREP)          AC2134383;
 PARAMETER(0);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.CCE_Classification_ABC);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Sales Cst Sold To RT) TYPE(RTVOBJ) FILE(PBB6REP)           AC2114865;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(PAR.Sales_Sold_To_Code);
  PARAMETER(NLL.Record_Status);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV/Upd SST Class      RT) TYPE(RTVOBJ) FILE(PBB5REP)          AC2134391;
  PARAMETER(PAR.Sales_Sold_To_Code);
  PARAMETER(PAR.CCE_Classification_ABC);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Sls Sold To Class  CH) TYPE(CHGOBJ) FILE(PBB5REP)          AC2134392;
   PARAMETER(DB1.Sales_Sold_To_Code);
   PARAMETER(DB1.Sales_Sold_To_Desc);
   PARAMETER(PAR.Sales_Sold_To_DP_Class);
   PARAMETER(DB1.Sales_Sold_To_Sub_Class);
   PARAMETER(DB1.Sales_Sold_To_Salesperson);
   PARAMETER(DB1.Sales_Channel_Code);
   PARAMETER(DB1.SC_Market_Code);
   PARAMETER(DB1.Record_Status);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
    PARAMETER(DB1.Change_Date);
    PARAMETER(DB1.Change_Time);
    PARAMETER(DB1.Change_User);
    PARAMETER(DB1.Change_Program);
    {
     //?Execute internal function

     // PAR.Change Date = JOB.*Job date
     PAR.Change_Date = JOB.*Job_date;

     // PAR.Change Time = JOB.*Job time
     PAR.Change_Time = JOB.*Job_time;

     // PAR.Change User = JOB.*USER
     PAR.Change_User = JOB.*USER;

     // PAR.Change Program = JOB.*PROGRAM
     PAR.Change_Program = JOB.*PROGRAM;

    }

   }

  }

 }

}


