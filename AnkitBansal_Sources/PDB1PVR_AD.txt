// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDB1PVR
// ?Date: 14.08.2025 Time: 03:27:50
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(RTV Cooler Shrink %    RT) TYPE(RTVOBJ) FILE(CAAQREP)          AC1255852;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Cooler_Shrink_Percent);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Validate relations

//?To min carcass weight gt to max carcass weight
CASE;

// IF DTL.USR From Weight Range GT DTL.USR To Weight Range
IF DTL.USR_From_Weight_Range > DTL.USR_To_Weight_Range;

// Send error message - 'Min carcass weight cannot be greater than max carcass weight.'
ERROR(USR1736);
MSGPARM(DTL.USR_From_Weight_Range);
MSGPARM(DTL.USR_To_Weight_Range);

ENDIF;

//?Make sure weight range does not exist
EXECUTE FUNCTION(Chk Weight Range Exist RT) TYPE(RTVOBJ) FILE(PDI1REP)          AC1256412;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Cutout_Matrix_Code);
PARAMETER(DTL.Effective_Month_Day);
PARAMETER(DTL.USR_From_Weight_Range);
PARAMETER(DTL.USR_To_Weight_Range);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


//?If weight range exists send message
CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// Send error message - 'The To Weight Range already exist.'
ERROR(USR1740);
MSGPARM(DTL.USR_From_Weight_Range);
MSGPARM(DTL.USR_To_Weight_Range);

ENDIF;

//?If cooler shrink % eq 0 then load default
CASE;

// IF DTL.Cooler Shrink Percent is equal to zero
IF DTL.Cooler_Shrink_Percent = *ZERO;

// DTL.Cooler Shrink Percent = PAR.Cooler Shrink Percent
DTL.Cooler_Shrink_Percent = PAR.Cooler_Shrink_Percent;

ENDIF;

//?Calculate min live weight & max live weight
// WRK.USR Percent Work, 7.4 = DTL.Std Dressing Yield % / CON.100 *Rounded
WRK.USR_Percent_Work_7_4 = DTL.Std_Dressing_Yield_Pct / 100 'H';

//?If Yield percent is not zeros calc live weights
CASE;

// IF WRK.USR Percent Work, 7.4 is Not zeros
IF WRK.USR_Percent_Work_7_4 <> *ZERO;

// DTL.Min Live Weight = DTL.USR From Weight Range / WRK.USR Percent Work, 7.4 *Rou
DTL.Min_Live_Weight = DTL.USR_From_Weight_Range / WRK.USR_Percent_Work_7_4 'H';

// DTL.Max Live Weight = DTL.USR To Weight Range / WRK.USR Percent Work, 7.4 *Round
DTL.Max_Live_Weight = DTL.USR_To_Weight_Range / WRK.USR_Percent_Work_7_4 'H';

ENDIF;

//?USER: User defined action

//?Calculate Min/Max Live Weight
DO;

//?minimum live weight
EXECUTE FUNCTION(Clc Live Weight       IF) TYPE(EXCINTFUN)                      AC1528668;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.USR_From_Weight_Range);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(DTL.Min_Live_Weight);
PARAMETER(WRK.Numeric_Field_Not_Needed);
{
 //?Execute internal function

 // Call program Rtv Live Wgt Calc Flds XF.
 CALL PROGRAM(Rtv Live Wgt Calc Flds XF) ('PKOPXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Hot_Weight_Divisor);
 PARAMETER(PAR.Hot_Weight_Subtractor);
 PARAMETER(PAR.Hot_Weight_Multiplier);
 PARAMETER(PAR.Hot_Weight_Addition);

 //?Live weight
 CASE;

 // IF PAR.Hot Weight Divisor NE WRK.ZERO
 IF PAR.Hot_Weight_Divisor <> WRK.ZERO;

 // Synon (17,5) work field =       * Calc Yield
 PGM.*Synon_175_work_field = ( ( ( PAR.Hot_Weight_Total / PAR.Hot_Weight_Divisor )
 - PAR.Hot_Weight_Subtractor ) * PAR.Hot_Weight_Multiplier ) + PAR.Hot_Weight_Addition;

 //?Live Weight
 CASE;

 // IF PGM.*Synon (17,5) work field NE WRK.ZERO
 IF PGM.*Synon_175_work_field <> WRK.ZERO;

 // PAR.USR Weight = PAR.Hot Weight Total / PGM.*Synon (17,5) work field *Rounded
 PAR.USR_Weight = PAR.Hot_Weight_Total / PGM.*Synon_175_work_field 'H';

 // PAR.Live Weight Total USR = PAR.USR Weight
 PAR.Live_Weight_Total_USR = PAR.USR_Weight;

 // PAR.Live Weight 5.0 usr = PAR.USR Weight * CON.1 *Rounded
 PAR.Live_Weight_5_0_usr = PAR.USR_Weight * 1 'H';

 // PAR.Live Weight 11.1 usr = PAR.USR Weight * CON.1 *Rounded
 PAR.Live_Weight_11_1_usr = PAR.USR_Weight * 1 'H';

 //?Live Weight
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Live Weight Total USR = CON.*ZERO
 PAR.Live_Weight_Total_USR = *ZERO;

 // PAR.Live Weight 5.0 usr = CON.*ZERO
 PAR.Live_Weight_5_0_usr = *ZERO;

 // PAR.Live Weight 11.1 usr = CON.*ZERO
 PAR.Live_Weight_11_1_usr = *ZERO;

 ENDIF;

 //?Live weight
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Synon (17,5) work field = CON.*ZERO
 PGM.*Synon_175_work_field = *ZERO;

 // PAR.Live Weight Total USR = CON.*ZERO
 PAR.Live_Weight_Total_USR = *ZERO;

 // PAR.Live Weight 5.0 usr = CON.*ZERO
 PAR.Live_Weight_5_0_usr = *ZERO;

 // PAR.Live Weight 11.1 usr = CON.*ZERO
 PAR.Live_Weight_11_1_usr = *ZERO;

 ENDIF;

}


//?maximum live weight
EXECUTE FUNCTION(Clc Live Weight       IF) TYPE(EXCINTFUN)                      AC1528668;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.USR_To_Weight_Range);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(DTL.Max_Live_Weight);
PARAMETER(WRK.Numeric_Field_Not_Needed);
{
 //?Execute internal function

 // Call program Rtv Live Wgt Calc Flds XF.
 CALL PROGRAM(Rtv Live Wgt Calc Flds XF) ('PKOPXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Hot_Weight_Divisor);
 PARAMETER(PAR.Hot_Weight_Subtractor);
 PARAMETER(PAR.Hot_Weight_Multiplier);
 PARAMETER(PAR.Hot_Weight_Addition);

 //?Live weight
 CASE;

 // IF PAR.Hot Weight Divisor NE WRK.ZERO
 IF PAR.Hot_Weight_Divisor <> WRK.ZERO;

 // Synon (17,5) work field =       * Calc Yield
 PGM.*Synon_175_work_field = ( ( ( PAR.Hot_Weight_Total / PAR.Hot_Weight_Divisor )
 - PAR.Hot_Weight_Subtractor ) * PAR.Hot_Weight_Multiplier ) + PAR.Hot_Weight_Addition;

 //?Live Weight
 CASE;

 // IF PGM.*Synon (17,5) work field NE WRK.ZERO
 IF PGM.*Synon_175_work_field <> WRK.ZERO;

 // PAR.USR Weight = PAR.Hot Weight Total / PGM.*Synon (17,5) work field *Rounded
 PAR.USR_Weight = PAR.Hot_Weight_Total / PGM.*Synon_175_work_field 'H';

 // PAR.Live Weight Total USR = PAR.USR Weight
 PAR.Live_Weight_Total_USR = PAR.USR_Weight;

 // PAR.Live Weight 5.0 usr = PAR.USR Weight * CON.1 *Rounded
 PAR.Live_Weight_5_0_usr = PAR.USR_Weight * 1 'H';

 // PAR.Live Weight 11.1 usr = PAR.USR Weight * CON.1 *Rounded
 PAR.Live_Weight_11_1_usr = PAR.USR_Weight * 1 'H';

 //?Live Weight
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Live Weight Total USR = CON.*ZERO
 PAR.Live_Weight_Total_USR = *ZERO;

 // PAR.Live Weight 5.0 usr = CON.*ZERO
 PAR.Live_Weight_5_0_usr = *ZERO;

 // PAR.Live Weight 11.1 usr = CON.*ZERO
 PAR.Live_Weight_11_1_usr = *ZERO;

 ENDIF;

 //?Live weight
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Synon (17,5) work field = CON.*ZERO
 PGM.*Synon_175_work_field = *ZERO;

 // PAR.Live Weight Total USR = CON.*ZERO
 PAR.Live_Weight_Total_USR = *ZERO;

 // PAR.Live Weight 5.0 usr = CON.*ZERO
 PAR.Live_Weight_5_0_usr = *ZERO;

 // PAR.Live Weight 11.1 usr = CON.*ZERO
 PAR.Live_Weight_11_1_usr = *ZERO;

 ENDIF;

}


ENDDO;

EXECUTE FUNCTION(Crt Weight Range      CR) TYPE(CRTOBJ) FILE(PDI1REP)           AC1254504;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Cutout_Matrix_Code);
PARAMETER(DTL.Effective_Month_Day);
PARAMETER(DTL.USR_From_Weight_Range);
PARAMETER(DTL.USR_To_Weight_Range);
PARAMETER(DTL.Min_Live_Weight);
PARAMETER(DTL.Max_Live_Weight);
PARAMETER(DTL.Cooler_Shrink_Percent);
PARAMETER(DTL.Std_Dressing_Yield_Pct);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(Cpy Weight Range      RT) TYPE(RTVOBJ) FILE(PDIZREP)           AC1256654;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Cutout_Matrix_Code);
PARAMETER(DTL.Effective_Month_Day);
PARAMETER(DTL.Min_Carcass_Weight);
PARAMETER(DTL.Max_Carcass_Weight);
PARAMETER(DTL.USR_From_Weight_Range);
PARAMETER(DTL.USR_To_Weight_Range);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Cpy Weight Range      RT) TYPE(RTVOBJ) FILE(PDI4REP)           AC1256665;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Cutout_Matrix_Code);
 PARAMETER(DB1.Effective_Month_Day);
 PARAMETER(DB1.Min_Carcass_Weight);
 PARAMETER(DB1.Max_Carcass_Weight);
 PARAMETER(DB1.Lean_Percent);
 PARAMETER(PAR.USR_From_Weight_Range);
 PARAMETER(PAR.USR_To_Weight_Range);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Crt Cutout Item       CR) TYPE(CRTOBJ) FILE(PDI4REP)           AC1255832;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Cutout_Matrix_Code);
  PARAMETER(DB1.Effective_Month_Day);
  PARAMETER(PAR.USR_From_Weight_Range);
  PARAMETER(PAR.USR_To_Weight_Range);
  PARAMETER(DB1.Lean_Percent);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Percent_of_Carcass);
  PARAMETER(DB1.Primal_Group_Code);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 EXECUTE FUNCTION(Crt Distribution      CR) TYPE(CRTOBJ) FILE(PDIZREP)           AC1254596;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Cutout_Matrix_Code);
 PARAMETER(DB1.Effective_Month_Day);
 PARAMETER(PAR.USR_From_Weight_Range);
 PARAMETER(PAR.USR_To_Weight_Range);
 PARAMETER(DB1.Lean_Percent);
 PARAMETER(DB1.Average_Cold_Wgt);
 PARAMETER(DB1.Population_Percent);
 PARAMETER(DB1.Average_Lean_Percent);
 PARAMETER(DB1.Average_Backfat_Inches);
 PARAMETER(DB1.Average_Loin_Eye_Depth);
 PARAMETER(DB1.Population_Head);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


EXECUTE FUNCTION(Cpy Weight Range      RT) TYPE(RTVOBJ) FILE(PDJ0REP)           AC1333215;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Cutout_Matrix_Code);
PARAMETER(DTL.Effective_Month_Day);
PARAMETER(DTL.Min_Carcass_Weight);
PARAMETER(DTL.Max_Carcass_Weight);
PARAMETER(DTL.USR_From_Weight_Range);
PARAMETER(DTL.USR_To_Weight_Range);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Crt Dist Backfat      CR) TYPE(CRTOBJ) FILE(PDJ0REP)           AC1333073;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Cutout_Matrix_Code);
 PARAMETER(DB1.Effective_Month_Day);
 PARAMETER(PAR.USR_From_Weight_Range);
 PARAMETER(PAR.USR_To_Weight_Range);
 PARAMETER(DB1.Backfat_Inches);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


EXECUTE FUNCTION(Cpy Dist Loin-Eye     RT) TYPE(RTVOBJ) FILE(PDJ1REP)           AC1333221;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Cutout_Matrix_Code);
PARAMETER(DTL.Effective_Month_Day);
PARAMETER(DTL.Min_Carcass_Weight);
PARAMETER(DTL.Max_Carcass_Weight);
PARAMETER(DTL.USR_From_Weight_Range);
PARAMETER(DTL.USR_To_Weight_Range);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Crt Dist Loin-Eye     CR) TYPE(CRTOBJ) FILE(PDJ1REP)           AC1333092;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Cutout_Matrix_Code);
 PARAMETER(DB1.Effective_Month_Day);
 PARAMETER(PAR.USR_From_Weight_Range);
 PARAMETER(PAR.USR_To_Weight_Range);
 PARAMETER(DB1.Loin_Eye_Depth);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


