// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POOJPFR
// ?Date: 14.08.2025 Time: 12:06:18
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('A/R');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// PAR.Company Number = PAR.Company Number Pass   USR
PAR.Company_Number = PAR.Company_Number_Pass_USR;

//?***** Change Log and Comments
//?** 07/22/16 JBB E5262  Chargeback and Rebill Modifications
//?           Change report title to include Rebill
//?** 07/13/16 JBB E6458  Get actual explanation from the original
//?   invoice detail record for based upon the Charge Back invoice
//?   number.
//?RMC E2991 1/28/14 for CB use Orig Inv for CB instead of deriving inv #
//?** 06/14/10 LJB C000789  Daily's invoice number can start in pos
//?   1 or 2 for 5 digits. Determine which and convert.
//?** 06/07/10 LJB C000789 Wrap rtv explanation in IF so all recs
//?   are rtv'd even if the amounts are the same. Add Seq#.
//?** 02/07/08  RMC FP1271 Update Aging bucket per invoice for sql table
//?   which shows the summary per sales person/bucket
//?** 11/29/2006 LJB PK0039
//?** Retrieve Aging ranges from the new A/R Aging Control file
//?** instead of the company control file
//?*****
//?** 9/7/2006 LJB L60906B    Add a second retrieve for comments.
//?** If no comment for a suffix of IN then try with a suffix of DM.
//?*****
//?** 2/01/2006 LJB
//?** Add processing by Company # per Tim in A/R  (for Triumph)
//?*****
//?USER: Record selection processing

//?** Put passed 15.5 co# into 3.0 co#                  2/1/2006 LJB
// PAR.Company Number = PAR.Company Number Pass   USR
PAR.Company_Number = PAR.Company_Number_Pass_USR;

//?** Select company # if one is passed in
CASE;

// IF PAR.Company Number is not equal to zero
IF PAR.Company_Number <> *ZERO;

// AND DB1.Company Number NE PAR.Company Number
AND DB1.Company_Number <> PAR.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?** Select Salesman if one is passed in
CASE;

// IF PAR.Salesperson Code is entered
IF PAR.Salesperson_Code <> *BLANK;

// AND DB1.Salesperson Code NE PAR.Salesperson Code
AND DB1.Salesperson_Code <> PAR.Salesperson_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?** Exclude CB's if Include Charge Back flag is No
CASE;

// IF PAR.Include Charge Backs is No
IF PAR.Include_Charge_Backs = 'N';

// AND DB1.Invoice Suffix is Charge Backs
AND DB1.Invoice_Suffix = 'CB';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?** Exclude RB's if Include Rebills flag is No
CASE;

// IF PAR.Include Rebills is No
IF PAR.Include_Rebills = 'N';

// AND DB1.Invoice Suffix is Rebill
AND DB1.Invoice_Suffix = 'RB';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process top of page

//?** Remove hard-coded company#
EXECUTE FUNCTION(RTV Aging Heading Info RT) TYPE(RTVOBJ) FILE(ARBCREP)          AC1355876;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.AR_Customer_Number);
PARAMETER(TOP_Time_of_Last_Aging);
PARAMETER(TOP_Date_of_Last_Aging);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// TOP.Include Charge Backs = PAR.Include Charge Backs
TOP_Include_Charge_Backs = PAR.Include_Charge_Backs;

// TOP.Include Rebills = PAR.Include Rebills
TOP_Include_Rebills = PAR.Include_Rebills;

//?USER: Print required level headings

CASE;

IF NEW Salesperson_Code;
EXECUTE FUNCTION(RTV Salesperson Name   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1111501;
PARAMETER(CUR.Salesperson_Code);
PARAMETER(CUR.Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Print Salesperson Code header format
PRINT Salesperson Code header format;

ENDIF;

// SUPPRESSED PRINT A/R Customer Name header format

CASE;

IF NEW AR_Customer_Number;
EXECUTE FUNCTION(RTV Contact Info.      RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1356453;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.AR_Customer_Number);
PARAMETER(CUR.Credit_Contact_Name);
PARAMETER(CUR.Credit_Contact_Telephone);
PARAMETER(PAR.Credit_Contact_Bus_Title);
PARAMETER(CUR.Credit_Contact_Fax_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Retrieve aging ranges from A/R Aging Control file
//?** instead of the company control   11/29/2006 LJB PK0039
EXECUTE FUNCTION(RTV A/R Aging Control  RT) TYPE(RTVOBJ) FILE(PMADCPP)          AC1800594;
PARAMETER(PAR.A_R_Aging_Code);
PARAMETER(PAR.A_R_Aging_Days_1);
PARAMETER(PAR.A_R_Aging_Days_2);
PARAMETER(PAR.A_R_Aging_Days_3);
PARAMETER(PAR.A_R_Aging_Days_4);
PARAMETER(WRK.Age_by_Trans_or_Due_Date);
PARAMETER(WRK.Default_Y_N);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CUR.USR Age Heading A = PAR.A/R Aging Days - 1
CUR.USR_Age_Heading_A = PAR.A_R_Aging_Days_1;

// CUR.USR Age Heading B = CUR.USR Age Heading A + CON.1
CUR.USR_Age_Heading_B = CUR.USR_Age_Heading_A + 1;

// CUR.USR Age Heading C = PAR.A/R Aging Days - 2
CUR.USR_Age_Heading_C = PAR.A_R_Aging_Days_2;

// CUR.USR Age Heading D = CUR.USR Age Heading C + CON.1
CUR.USR_Age_Heading_D = CUR.USR_Age_Heading_C + 1;

// CUR.USR Age Heading E = PAR.A/R Aging Days - 3
CUR.USR_Age_Heading_E = PAR.A_R_Aging_Days_3;

// CUR.USR Age Heading F = CUR.USR Age Heading E + CON.1
CUR.USR_Age_Heading_F = CUR.USR_Age_Heading_E + 1;

// CUR.USR Age Heading G = PAR.A/R Aging Days - 4
CUR.USR_Age_Heading_G = PAR.A_R_Aging_Days_4;

// CUR.USR Age Heading H = PAR.A/R Aging Days - 4
CUR.USR_Age_Heading_H = PAR.A_R_Aging_Days_4;

// Print A/R Customer Number header format
PRINT A/R Customer Number header format;

ENDIF;

// SUPPRESSED PRINT Company Number header format

// SUPPRESSED PRINT Invoice Suffix header format

// SUPPRESSED PRINT Invoice Number header format

//?USER: On print of detail format

EXECUTE FUNCTION(CLC Age Cust Inv. CB   IF) TYPE(EXCINTFUN)                     AC1357496;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.AR_Customer_Number);
PARAMETER(CUR.Age_Due_Current_CB);
PARAMETER(CUR.Age_Due_Aging_1_CB);
PARAMETER(CUR.Age_Due_Aging_2_CB);
PARAMETER(CUR.Age_Due_Aging_3_CB);
PARAMETER(CUR.Age_Due_Aging_4_CB);
PARAMETER(CUR.Age_Due_Aging_5_CB);
PARAMETER(WRK.Age_Due_Current_W_O_CB);
PARAMETER(WRK.Age_Due_Aging_1_W_O_CB);
PARAMETER(WRK.Age_Due_Aging_2_W_O_CB);
PARAMETER(WRK.Age_Due_Aging_3_W_O_CB);
PARAMETER(WRK.Age_Due_Aging_4_W_O_CB);
PARAMETER(WRK.Age_Due_Aging_5_W_O_CB);
PARAMETER(CUR.Invoice_Number);
PARAMETER(CUR.Invoice_Suffix);
PARAMETER(PAR.A_R_Aging_Code);
{
 //?Execute internal function

 CASE;

 // IF PAR.Invoice Suffix is Charge Backs
 IF PAR.Invoice_Suffix = 'CB';

 //?Only ages Chargebacks alone
 EXECUTE FUNCTION(RTV CLC Age Cust CB    RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1357497;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.AR_Customer_Number);
 PARAMETER(PAR.Invoice_Number);
 PARAMETER(PAR.Invoice_Suffix);
 PARAMETER(PAR.Age_Due_Current_CB);
 PARAMETER(PAR.Age_Due_Aging_1_CB);
 PARAMETER(PAR.Age_Due_Aging_2_CB);
 PARAMETER(PAR.Age_Due_Aging_3_CB);
 PARAMETER(PAR.Age_Due_Aging_4_CB);
 PARAMETER(PAR.Age_Due_Aging_5_CB);
 PARAMETER(PAR.Age_Due_Current_W_O_CB);
 PARAMETER(PAR.Age_Due_Aging_1_W_O_CB);
 PARAMETER(PAR.Age_Due_Aging_2_W_O_CB);
 PARAMETER(PAR.Age_Due_Aging_3_W_O_CB);
 PARAMETER(PAR.Age_Due_Aging_4_W_O_CB);
 PARAMETER(PAR.Age_Due_Aging_5_W_O_CB);
 PARAMETER(PAR.A_R_Aging_Code);
 {
  //?USER: Initialize routine

  //?Clear all Aging related fields
  // PAR.USR Age Value 1 = CND.equal to zero
  PAR.USR_Age_Value_1 = *ZERO;

  // PAR.USR Age Value 2 = CND.equal to zero
  PAR.USR_Age_Value_2 = *ZERO;

  // PAR.USR Age Value 3 = CND.equal to zero
  PAR.USR_Age_Value_3 = *ZERO;

  // PAR.USR Age Value 4 = CND.equal to zero
  PAR.USR_Age_Value_4 = *ZERO;

  // PAR.USR Age Value 5 = CND.equal to zero
  PAR.USR_Age_Value_5 = *ZERO;

  // PAR.USR Age Current = CND.equal to zero
  PAR.USR_Age_Current = *ZERO;

  // PAR.USR Age Value 1 A = CND.equal to zero
  PAR.USR_Age_Value_1_A = *ZERO;

  // PAR.USR Age Value 2 A = CND.equal to zero
  PAR.USR_Age_Value_2_A = *ZERO;

  // PAR.USR Age Value 3 A = CND.equal to zero
  PAR.USR_Age_Value_3_A = *ZERO;

  // PAR.USR Age Value 4 A = CND.equal to zero
  PAR.USR_Age_Value_4_A = *ZERO;

  // PAR.USR Age Value 5 A = CND.equal to zero
  PAR.USR_Age_Value_5_A = *ZERO;

  // PAR.USR Age Current A = CND.equal to zero
  PAR.USR_Age_Current_A = *ZERO;

  // PAR.USR Age Value 1 B = CND.equal to zero
  PAR.USR_Age_Value_1_B = *ZERO;

  // PAR.USR Age Value 2 B = CND.equal to zero
  PAR.USR_Age_Value_2_B = *ZERO;

  // PAR.USR Age Value 3 B = CND.equal to zero
  PAR.USR_Age_Value_3_B = *ZERO;

  // PAR.USR Age Value 4 B = CND.equal to zero
  PAR.USR_Age_Value_4_B = *ZERO;

  // PAR.USR Age Value 5 B = CND.equal to zero
  PAR.USR_Age_Value_5_B = *ZERO;

  // PAR.USR Age Current B = CND.equal to zero
  PAR.USR_Age_Current_B = *ZERO;

  // PAR.Age $ Due-Current-W/O CB = CND.equal to zero
  PAR.Age_Due_Current_W_O_CB = *ZERO;

  // PAR.Age $ Due-Aging 1-W/O CB = CND.equal to zero
  PAR.Age_Due_Aging_1_W_O_CB = *ZERO;

  // PAR.Age $ Due-Aging 2-W/O CB = CND.equal to zero
  PAR.Age_Due_Aging_2_W_O_CB = *ZERO;

  // PAR.Age $ Due-Aging 3-W/O CB = CND.equal to zero
  PAR.Age_Due_Aging_3_W_O_CB = *ZERO;

  // PAR.Age $ Due-Aging 4-W/O CB = CND.equal to zero
  PAR.Age_Due_Aging_4_W_O_CB = *ZERO;

  // PAR.Age $ Due-Aging 5-W/O CB = CND.equal to zero
  PAR.Age_Due_Aging_5_W_O_CB = *ZERO;

  // PAR.Age $ Due - Current - CB = CND.equal to zero
  PAR.Age_Due_Current_CB = *ZERO;

  // PAR.Age $ Due - Aging 1 - CB = CND.equal to zero
  PAR.Age_Due_Aging_1_CB = *ZERO;

  // PAR.Age $ Due - Aging 2 - CB = CND.equal to zero
  PAR.Age_Due_Aging_2_CB = *ZERO;

  // PAR.Age $ Due - Aging 4 - CB = CND.equal to zero
  PAR.Age_Due_Aging_4_CB = *ZERO;

  // PAR.Age $ Due - Aging 3 - CB = CND.equal to zero
  PAR.Age_Due_Aging_3_CB = *ZERO;

  // PAR.Age $ Due - Aging 5 - CB = CND.equal to zero
  PAR.Age_Due_Aging_5_CB = *ZERO;

  //?***** Change Log and Comments
  //?** 11/29/2006 LJB PK0039
  //?** Aging date ranges are now in the A/R Aging Control file
  //?** Retrieve the aging from the control file using the aging
  //?** code that is passed in from the calling program
  //?*****
  //?USER: Process Data record

  CASE;

  // IF DB1.Remaining Balance Due is not equal to zeros
  IF DB1.Remaining_Balance_Due <> *ZERO;

  //?Compute Aging Day Ranges
  //?** 11/29/2006 LJB PK0039
  //?** Retrieve the aging from the control file using the aging
  //?** code that is passed in from the calling program
  EXECUTE FUNCTION(RTV A/R Aging Control  RT) TYPE(RTVOBJ) FILE(PMADCPP)          AC1800594;
  PARAMETER(PAR.A_R_Aging_Code);
  PARAMETER(PAR.A_R_Aging_Days_1);
  PARAMETER(PAR.A_R_Aging_Days_2);
  PARAMETER(PAR.A_R_Aging_Days_3);
  PARAMETER(PAR.A_R_Aging_Days_4);
  PARAMETER(WRK.Age_by_Trans_or_Due_Date);
  PARAMETER(WRK.Default_Y_N);
  PARAMETER(WRK.Record_Status);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Read the A/R Header File for Aging
  // PAR.USR Aging date - 1 = DB1.Due Date + PAR.A/R Aging Days - 1 *DAYS
  PAR.USR_Aging_date_1 = DATEINCR(DB1.Due_Date PAR.A_R_Aging_Days_1 'DY' 1111111 'NONE'
  'N' 1);

  // PAR.USR Aging date - 2 = DB1.Due Date + PAR.A/R Aging Days - 2 *DAYS
  PAR.USR_Aging_date_2 = DATEINCR(DB1.Due_Date PAR.A_R_Aging_Days_2 'DY' 1111111 'NONE'
  'N' 1);

  // PAR.USR Aging date - 3 = DB1.Due Date + PAR.A/R Aging Days - 3 *DAYS
  PAR.USR_Aging_date_3 = DATEINCR(DB1.Due_Date PAR.A_R_Aging_Days_3 'DY' 1111111 'NONE'
  'N' 1);

  // PAR.USR Aging date - 4 = DB1.Due Date + PAR.A/R Aging Days - 4 *DAYS
  PAR.USR_Aging_date_4 = DATEINCR(DB1.Due_Date PAR.A_R_Aging_Days_4 'DY' 1111111 'NONE'
  'N' 1);

  // PAR.USR Aging date - 5 = PAR.USR Aging date - 4
  PAR.USR_Aging_date_5 = PAR.USR_Aging_date_4;

  //?Fields -USR Age Value 1 accumulates aged Invoices and DM
  //?Fields USR Age Value A - Accumulates Chargebacks
  //?Fields USR Age Value B  is both Invoices and CB
  //?Field USR Total Credit Amount is OA or CM that is applied to Oldest amts
  //?Age Chargeback Headers
  CASE;

  // IF DB1.Invoice Suffix is Charge Backs and Rebills
  IF DB1.Invoice_Suffix = 'CB'/'RB';

  //?Current Due for CB
  CASE;

  // IF JOB.*Job date LE DB1.Due Date
  IF JOB.*Job_date <= DB1.Due_Date;

  // PAR.USR Age Current A = PAR.USR Age Current A + DB1.Remaining Balance Due
  PAR.USR_Age_Current_A = PAR.USR_Age_Current_A + DB1.Remaining_Balance_Due;

  ENDIF;

  //?Past Due Date 1 for CB
  CASE;

  // IF JOB.*Job date GT DB1.Due Date
  IF JOB.*Job_date > DB1.Due_Date;

  // AND JOB.*Job date LE PAR.USR Aging date - 1
  AND JOB.*Job_date <= PAR.USR_Aging_date_1;

  // PAR.USR Age Value 1 A = PAR.USR Age Value 1 A + DB1.Remaining Balance Due
  PAR.USR_Age_Value_1_A = PAR.USR_Age_Value_1_A + DB1.Remaining_Balance_Due;

  ENDIF;

  //?Past Due 2 for CB
  CASE;

  // IF JOB.*Job date GT PAR.USR Aging date - 1
  IF JOB.*Job_date > PAR.USR_Aging_date_1;

  // AND JOB.*Job date LE PAR.USR Aging date - 2
  AND JOB.*Job_date <= PAR.USR_Aging_date_2;

  // PAR.USR Age Value 2 A = PAR.USR Age Value 2 A + DB1.Remaining Balance Due
  PAR.USR_Age_Value_2_A = PAR.USR_Age_Value_2_A + DB1.Remaining_Balance_Due;

  ENDIF;

  //?Past Due date 3 for CB
  CASE;

  // IF JOB.*Job date GT PAR.USR Aging date - 2
  IF JOB.*Job_date > PAR.USR_Aging_date_2;

  // AND JOB.*Job date LE PAR.USR Aging date - 3
  AND JOB.*Job_date <= PAR.USR_Aging_date_3;

  // PAR.USR Age Value 3 A = PAR.USR Age Value 3 A + DB1.Remaining Balance Due
  PAR.USR_Age_Value_3_A = PAR.USR_Age_Value_3_A + DB1.Remaining_Balance_Due;

  ENDIF;

  //?Aging Value 4 for CB
  CASE;

  // IF JOB.*Job date GT PAR.USR Aging date - 3
  IF JOB.*Job_date > PAR.USR_Aging_date_3;

  // AND JOB.*Job date LE PAR.USR Aging date - 4
  AND JOB.*Job_date <= PAR.USR_Aging_date_4;

  // PAR.USR Age Value 4 A = PAR.USR Age Value 4 A + DB1.Remaining Balance Due
  PAR.USR_Age_Value_4_A = PAR.USR_Age_Value_4_A + DB1.Remaining_Balance_Due;

  ENDIF;

  //?Age 5 is anything over date 4 for CB
  CASE;

  // IF JOB.*Job date GT PAR.USR Aging date - 4
  IF JOB.*Job_date > PAR.USR_Aging_date_4;

  // PAR.USR Age Value 5 A = PAR.USR Age Value 5 A + DB1.Remaining Balance Due
  PAR.USR_Age_Value_5_A = PAR.USR_Age_Value_5_A + DB1.Remaining_Balance_Due;

  ENDIF;

  ENDIF;

  //?Move Values to Output Parameters
  //?This routine has been changed to age CB only
  // PAR.Age $ Due - Current - CB = PAR.USR Age Current A
  PAR.Age_Due_Current_CB = PAR.USR_Age_Current_A;

  // PAR.Age $ Due - Aging 1 - CB = PAR.USR Age Value 1 A
  PAR.Age_Due_Aging_1_CB = PAR.USR_Age_Value_1_A;

  // PAR.Age $ Due - Aging 2 - CB = PAR.USR Age Value 2 A
  PAR.Age_Due_Aging_2_CB = PAR.USR_Age_Value_2_A;

  // PAR.Age $ Due - Aging 3 - CB = PAR.USR Age Value 3 A
  PAR.Age_Due_Aging_3_CB = PAR.USR_Age_Value_3_A;

  // PAR.Age $ Due - Aging 4 - CB = PAR.USR Age Value 4 A
  PAR.Age_Due_Aging_4_CB = PAR.USR_Age_Value_4_A;

  // PAR.Age $ Due - Aging 5 - CB = PAR.USR Age Value 5 A
  PAR.Age_Due_Aging_5_CB = PAR.USR_Age_Value_5_A;

  // PAR.Age $ Due-Current-W/O CB = PAR.USR Age Current
  PAR.Age_Due_Current_W_O_CB = PAR.USR_Age_Current;

  // PAR.Age $ Due-Aging 1-W/O CB = PAR.USR Age Value 1
  PAR.Age_Due_Aging_1_W_O_CB = PAR.USR_Age_Value_1;

  // PAR.Age $ Due-Aging 2-W/O CB = PAR.USR Age Value 2
  PAR.Age_Due_Aging_2_W_O_CB = PAR.USR_Age_Value_2;

  // PAR.Age $ Due-Aging 3-W/O CB = PAR.USR Age Value 3
  PAR.Age_Due_Aging_3_W_O_CB = PAR.USR_Age_Value_3;

  // PAR.Age $ Due-Aging 4-W/O CB = PAR.USR Age Value 4
  PAR.Age_Due_Aging_4_W_O_CB = PAR.USR_Age_Value_4;

  // PAR.Age $ Due-Aging 5-W/O CB = PAR.USR Age Value 5
  PAR.Age_Due_Aging_5_W_O_CB = PAR.USR_Age_Value_5;

  ENDIF;

 }

 // IF PAR.Invoice Suffix is Rebill
 IF PAR.Invoice_Suffix = 'RB';

 //?Only ages Chargebacks alone
 EXECUTE FUNCTION(RTV CLC Age Cust RB    RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC2127342;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.AR_Customer_Number);
 PARAMETER(PAR.Invoice_Number);
 PARAMETER(PAR.Invoice_Suffix);
 PARAMETER(PAR.Age_Due_Current_CB);
 PARAMETER(PAR.Age_Due_Aging_1_CB);
 PARAMETER(PAR.Age_Due_Aging_2_CB);
 PARAMETER(PAR.Age_Due_Aging_3_CB);
 PARAMETER(PAR.Age_Due_Aging_4_CB);
 PARAMETER(PAR.Age_Due_Aging_5_CB);
 PARAMETER(PAR.Age_Due_Current_W_O_CB);
 PARAMETER(PAR.Age_Due_Aging_1_W_O_CB);
 PARAMETER(PAR.Age_Due_Aging_2_W_O_CB);
 PARAMETER(PAR.Age_Due_Aging_3_W_O_CB);
 PARAMETER(PAR.Age_Due_Aging_4_W_O_CB);
 PARAMETER(PAR.Age_Due_Aging_5_W_O_CB);
 PARAMETER(PAR.A_R_Aging_Code);
 {
  //?USER: Initialize routine

  //?Clear all Aging related fields
  // PAR.USR Age Value 1 = CND.equal to zero
  PAR.USR_Age_Value_1 = *ZERO;

  // PAR.USR Age Value 2 = CND.equal to zero
  PAR.USR_Age_Value_2 = *ZERO;

  // PAR.USR Age Value 3 = CND.equal to zero
  PAR.USR_Age_Value_3 = *ZERO;

  // PAR.USR Age Value 4 = CND.equal to zero
  PAR.USR_Age_Value_4 = *ZERO;

  // PAR.USR Age Value 5 = CND.equal to zero
  PAR.USR_Age_Value_5 = *ZERO;

  // PAR.USR Age Current = CND.equal to zero
  PAR.USR_Age_Current = *ZERO;

  // PAR.USR Age Value 1 A = CND.equal to zero
  PAR.USR_Age_Value_1_A = *ZERO;

  // PAR.USR Age Value 2 A = CND.equal to zero
  PAR.USR_Age_Value_2_A = *ZERO;

  // PAR.USR Age Value 3 A = CND.equal to zero
  PAR.USR_Age_Value_3_A = *ZERO;

  // PAR.USR Age Value 4 A = CND.equal to zero
  PAR.USR_Age_Value_4_A = *ZERO;

  // PAR.USR Age Value 5 A = CND.equal to zero
  PAR.USR_Age_Value_5_A = *ZERO;

  // PAR.USR Age Current A = CND.equal to zero
  PAR.USR_Age_Current_A = *ZERO;

  // PAR.USR Age Value 1 B = CND.equal to zero
  PAR.USR_Age_Value_1_B = *ZERO;

  // PAR.USR Age Value 2 B = CND.equal to zero
  PAR.USR_Age_Value_2_B = *ZERO;

  // PAR.USR Age Value 3 B = CND.equal to zero
  PAR.USR_Age_Value_3_B = *ZERO;

  // PAR.USR Age Value 4 B = CND.equal to zero
  PAR.USR_Age_Value_4_B = *ZERO;

  // PAR.USR Age Value 5 B = CND.equal to zero
  PAR.USR_Age_Value_5_B = *ZERO;

  // PAR.USR Age Current B = CND.equal to zero
  PAR.USR_Age_Current_B = *ZERO;

  // PAR.Age $ Due-Current-W/O CB = CND.equal to zero
  PAR.Age_Due_Current_W_O_CB = *ZERO;

  // PAR.Age $ Due-Aging 1-W/O CB = CND.equal to zero
  PAR.Age_Due_Aging_1_W_O_CB = *ZERO;

  // PAR.Age $ Due-Aging 2-W/O CB = CND.equal to zero
  PAR.Age_Due_Aging_2_W_O_CB = *ZERO;

  // PAR.Age $ Due-Aging 3-W/O CB = CND.equal to zero
  PAR.Age_Due_Aging_3_W_O_CB = *ZERO;

  // PAR.Age $ Due-Aging 4-W/O CB = CND.equal to zero
  PAR.Age_Due_Aging_4_W_O_CB = *ZERO;

  // PAR.Age $ Due-Aging 5-W/O CB = CND.equal to zero
  PAR.Age_Due_Aging_5_W_O_CB = *ZERO;

  // PAR.Age $ Due - Current - CB = CND.equal to zero
  PAR.Age_Due_Current_CB = *ZERO;

  // PAR.Age $ Due - Aging 1 - CB = CND.equal to zero
  PAR.Age_Due_Aging_1_CB = *ZERO;

  // PAR.Age $ Due - Aging 2 - CB = CND.equal to zero
  PAR.Age_Due_Aging_2_CB = *ZERO;

  // PAR.Age $ Due - Aging 4 - CB = CND.equal to zero
  PAR.Age_Due_Aging_4_CB = *ZERO;

  // PAR.Age $ Due - Aging 3 - CB = CND.equal to zero
  PAR.Age_Due_Aging_3_CB = *ZERO;

  // PAR.Age $ Due - Aging 5 - CB = CND.equal to zero
  PAR.Age_Due_Aging_5_CB = *ZERO;

  //?***** Change Log and Comments
  //?** 11/29/2006 LJB PK0039
  //?** Aging date ranges are now in the A/R Aging Control file
  //?** Retrieve the aging from the control file using the aging
  //?** code that is passed in from the calling program
  //?*****
  //?USER: Process Data record

  CASE;

  // IF DB1.Remaining Balance Due is not equal to zeros
  IF DB1.Remaining_Balance_Due <> *ZERO;

  //?Compute Aging Day Ranges
  //?** 11/29/2006 LJB PK0039
  //?** Retrieve the aging from the control file using the aging
  //?** code that is passed in from the calling program
  EXECUTE FUNCTION(RTV A/R Aging Control  RT) TYPE(RTVOBJ) FILE(PMADCPP)          AC1800594;
  PARAMETER(PAR.A_R_Aging_Code);
  PARAMETER(PAR.A_R_Aging_Days_1);
  PARAMETER(PAR.A_R_Aging_Days_2);
  PARAMETER(PAR.A_R_Aging_Days_3);
  PARAMETER(PAR.A_R_Aging_Days_4);
  PARAMETER(WRK.Age_by_Trans_or_Due_Date);
  PARAMETER(WRK.Default_Y_N);
  PARAMETER(WRK.Record_Status);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Read the A/R Header File for Aging
  // PAR.USR Aging date - 1 = DB1.Due Date + PAR.A/R Aging Days - 1 *DAYS
  PAR.USR_Aging_date_1 = DATEINCR(DB1.Due_Date PAR.A_R_Aging_Days_1 'DY' 1111111 'NONE'
  'N' 1);

  // PAR.USR Aging date - 2 = DB1.Due Date + PAR.A/R Aging Days - 2 *DAYS
  PAR.USR_Aging_date_2 = DATEINCR(DB1.Due_Date PAR.A_R_Aging_Days_2 'DY' 1111111 'NONE'
  'N' 1);

  // PAR.USR Aging date - 3 = DB1.Due Date + PAR.A/R Aging Days - 3 *DAYS
  PAR.USR_Aging_date_3 = DATEINCR(DB1.Due_Date PAR.A_R_Aging_Days_3 'DY' 1111111 'NONE'
  'N' 1);

  // PAR.USR Aging date - 4 = DB1.Due Date + PAR.A/R Aging Days - 4 *DAYS
  PAR.USR_Aging_date_4 = DATEINCR(DB1.Due_Date PAR.A_R_Aging_Days_4 'DY' 1111111 'NONE'
  'N' 1);

  // PAR.USR Aging date - 5 = PAR.USR Aging date - 4
  PAR.USR_Aging_date_5 = PAR.USR_Aging_date_4;

  //?Fields -USR Age Value 1 accumulates aged Invoices and DM
  //?Fields USR Age Value A - Accumulates Chargebacks
  //?Fields USR Age Value B  is both Invoices and CB
  //?Field USR Total Credit Amount is OA or CM that is applied to Oldest amts
  //?Age Chargeback Headers
  CASE;

  // IF DB1.Invoice Suffix is Charge Backs and Rebills
  IF DB1.Invoice_Suffix = 'CB'/'RB';

  //?Current Due for CB
  CASE;

  // IF JOB.*Job date LE DB1.Due Date
  IF JOB.*Job_date <= DB1.Due_Date;

  // PAR.USR Age Current A = PAR.USR Age Current A + DB1.Remaining Balance Due
  PAR.USR_Age_Current_A = PAR.USR_Age_Current_A + DB1.Remaining_Balance_Due;

  ENDIF;

  //?Past Due Date 1 for CB
  CASE;

  // IF JOB.*Job date GT DB1.Due Date
  IF JOB.*Job_date > DB1.Due_Date;

  // AND JOB.*Job date LE PAR.USR Aging date - 1
  AND JOB.*Job_date <= PAR.USR_Aging_date_1;

  // PAR.USR Age Value 1 A = PAR.USR Age Value 1 A + DB1.Remaining Balance Due
  PAR.USR_Age_Value_1_A = PAR.USR_Age_Value_1_A + DB1.Remaining_Balance_Due;

  ENDIF;

  //?Past Due 2 for CB
  CASE;

  // IF JOB.*Job date GT PAR.USR Aging date - 1
  IF JOB.*Job_date > PAR.USR_Aging_date_1;

  // AND JOB.*Job date LE PAR.USR Aging date - 2
  AND JOB.*Job_date <= PAR.USR_Aging_date_2;

  // PAR.USR Age Value 2 A = PAR.USR Age Value 2 A + DB1.Remaining Balance Due
  PAR.USR_Age_Value_2_A = PAR.USR_Age_Value_2_A + DB1.Remaining_Balance_Due;

  ENDIF;

  //?Past Due date 3 for CB
  CASE;

  // IF JOB.*Job date GT PAR.USR Aging date - 2
  IF JOB.*Job_date > PAR.USR_Aging_date_2;

  // AND JOB.*Job date LE PAR.USR Aging date - 3
  AND JOB.*Job_date <= PAR.USR_Aging_date_3;

  // PAR.USR Age Value 3 A = PAR.USR Age Value 3 A + DB1.Remaining Balance Due
  PAR.USR_Age_Value_3_A = PAR.USR_Age_Value_3_A + DB1.Remaining_Balance_Due;

  ENDIF;

  //?Aging Value 4 for CB
  CASE;

  // IF JOB.*Job date GT PAR.USR Aging date - 3
  IF JOB.*Job_date > PAR.USR_Aging_date_3;

  // AND JOB.*Job date LE PAR.USR Aging date - 4
  AND JOB.*Job_date <= PAR.USR_Aging_date_4;

  // PAR.USR Age Value 4 A = PAR.USR Age Value 4 A + DB1.Remaining Balance Due
  PAR.USR_Age_Value_4_A = PAR.USR_Age_Value_4_A + DB1.Remaining_Balance_Due;

  ENDIF;

  //?Age 5 is anything over date 4 for CB
  CASE;

  // IF JOB.*Job date GT PAR.USR Aging date - 4
  IF JOB.*Job_date > PAR.USR_Aging_date_4;

  // PAR.USR Age Value 5 A = PAR.USR Age Value 5 A + DB1.Remaining Balance Due
  PAR.USR_Age_Value_5_A = PAR.USR_Age_Value_5_A + DB1.Remaining_Balance_Due;

  ENDIF;

  ENDIF;

  //?Move Values to Output Parameters
  //?This routine has been changed to age CB only
  // PAR.Age $ Due - Current - CB = PAR.USR Age Current A
  PAR.Age_Due_Current_CB = PAR.USR_Age_Current_A;

  // PAR.Age $ Due - Aging 1 - CB = PAR.USR Age Value 1 A
  PAR.Age_Due_Aging_1_CB = PAR.USR_Age_Value_1_A;

  // PAR.Age $ Due - Aging 2 - CB = PAR.USR Age Value 2 A
  PAR.Age_Due_Aging_2_CB = PAR.USR_Age_Value_2_A;

  // PAR.Age $ Due - Aging 3 - CB = PAR.USR Age Value 3 A
  PAR.Age_Due_Aging_3_CB = PAR.USR_Age_Value_3_A;

  // PAR.Age $ Due - Aging 4 - CB = PAR.USR Age Value 4 A
  PAR.Age_Due_Aging_4_CB = PAR.USR_Age_Value_4_A;

  // PAR.Age $ Due - Aging 5 - CB = PAR.USR Age Value 5 A
  PAR.Age_Due_Aging_5_CB = PAR.USR_Age_Value_5_A;

  // PAR.Age $ Due-Current-W/O CB = PAR.USR Age Current
  PAR.Age_Due_Current_W_O_CB = PAR.USR_Age_Current;

  // PAR.Age $ Due-Aging 1-W/O CB = PAR.USR Age Value 1
  PAR.Age_Due_Aging_1_W_O_CB = PAR.USR_Age_Value_1;

  // PAR.Age $ Due-Aging 2-W/O CB = PAR.USR Age Value 2
  PAR.Age_Due_Aging_2_W_O_CB = PAR.USR_Age_Value_2;

  // PAR.Age $ Due-Aging 3-W/O CB = PAR.USR Age Value 3
  PAR.Age_Due_Aging_3_W_O_CB = PAR.USR_Age_Value_3;

  // PAR.Age $ Due-Aging 4-W/O CB = PAR.USR Age Value 4
  PAR.Age_Due_Aging_4_W_O_CB = PAR.USR_Age_Value_4;

  // PAR.Age $ Due-Aging 5-W/O CB = PAR.USR Age Value 5
  PAR.Age_Due_Aging_5_W_O_CB = PAR.USR_Age_Value_5;

  ENDIF;

 }

 ENDIF;

}


//?** Rtv organization                                   C000789
// Call program Rtv Plant Co/Org      XF.
CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
PARAMETER(DB1.Company_Number);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(WRK.Company_Organization);

//?E2991 RMC 1/27/14 Use Orig inv for CB instead of deriving it
EXECUTE FUNCTION(RTV CB Orig Inv Nbr  RT) TYPE(RTVOBJ) FILE(ARBDCPP)            AC2082675;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Invoice_Number);
PARAMETER(CUR.Invoice_Suffix);
PARAMETER(LCL.Original_Inv_for_CB);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Invoice Number = LCL.Original Inv for CB
LCL.Invoice_Number = LCL.Original_Inv_for_CB;

//?Transaction Amount
CASE;

// IF CUR.Age $ Due - Current - CB is greater than zero
IF CUR.Age_Due_Current_CB > *ZERO;

// LCL.Transaction Amount = CUR.Age $ Due - Current - CB
LCL.Transaction_Amount = CUR.Age_Due_Current_CB;

// LCL.Aging Bucket = CND.Aging bucket 1
LCL.Aging_Bucket = 1;

//?Transaction Amount
// IF CUR.Age $ Due - Aging 1 - CB is greater than zero
IF CUR.Age_Due_Aging_1_CB > *ZERO;

// LCL.Transaction Amount = CUR.Age $ Due - Aging 1 - CB
LCL.Transaction_Amount = CUR.Age_Due_Aging_1_CB;

// LCL.Aging Bucket = CND.Aging bucket 2
LCL.Aging_Bucket = 2;

//?Transaction Amount
// IF CUR.Age $ Due - Aging 2 - CB is greater than zero
IF CUR.Age_Due_Aging_2_CB > *ZERO;

// LCL.Transaction Amount = CUR.Age $ Due - Aging 2 - CB
LCL.Transaction_Amount = CUR.Age_Due_Aging_2_CB;

// LCL.Aging Bucket = CND.Aging bucket 3
LCL.Aging_Bucket = 3;

//?Transaction Amount
// IF CUR.Age $ Due - Aging 3 - CB is greater than zero
IF CUR.Age_Due_Aging_3_CB > *ZERO;

// LCL.Transaction Amount = CUR.Age $ Due - Aging 3 - CB
LCL.Transaction_Amount = CUR.Age_Due_Aging_3_CB;

// LCL.Aging Bucket = CND.Aging bucket 4
LCL.Aging_Bucket = 4;

//?Transaction Amount
// IF CUR.Age $ Due - Aging 4 - CB is greater than zero
IF CUR.Age_Due_Aging_4_CB > *ZERO;

// LCL.Transaction Amount = CUR.Age $ Due - Aging 4 - CB
LCL.Transaction_Amount = CUR.Age_Due_Aging_4_CB;

// LCL.Aging Bucket = CND.Aging bucket 5
LCL.Aging_Bucket = 5;

//?Transaction Amount
// IF CUR.Age $ Due - Aging 5 - CB is greater than zero
IF CUR.Age_Due_Aging_5_CB > *ZERO;

// LCL.Transaction Amount = CUR.Age $ Due - Aging 5 - CB
LCL.Transaction_Amount = CUR.Age_Due_Aging_5_CB;

// LCL.Aging Bucket = CND.Aging bucket 6
LCL.Aging_Bucket = 6;

ENDIF;

//?*** FP1271 RMC - 02/07/08 update aging bucket here for sql table to use
EXECUTE FUNCTION(Change A/R Aged CB by Nam) TYPE(CHGOBJ) FILE(PDLOCPP)          AC1477718;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.AR_Customer_Name);
PARAMETER(CUR.AR_Customer_Number);
PARAMETER(CUR.Invoice_Suffix);
PARAMETER(CUR.Invoice_Number);
PARAMETER(CUR.Sequence_Number);
PARAMETER(CUR.Order_Number_Ref);
PARAMETER(CUR.Due_Date);
PARAMETER(CUR.Salesperson_Code);
PARAMETER(CUR.CB_Grouping_Code);
PARAMETER(LCL.Aging_Bucket);

// CUR.Explanation = CON.*BLANK
CUR.Explanation = *BLANK;

//?Get Rebill or Charge Back Explanation
CASE;

// IF DB1.Invoice Suffix is Rebill
IF DB1.Invoice_Suffix = 'RB';

EXECUTE FUNCTION(RTV Rebill ExplanationRT) TYPE(RTVOBJ) FILE(ARBECPP)           AC2128860;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Invoice_Number);
PARAMETER('CB');
PARAMETER('RB');
PARAMETER(CUR.Explanation);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Get Rebill or Charge Back Explanation
// IF *OTHERWISE
IF *OTHERWISE;

//?** 07/13/2016 E4658 JBB  Fix Duplicate Explanations
//?** Get sequence number based upon the Invoice Number
// LCL.Invoice Number - CB = CUR.Invoice Number
LCL.Invoice_Number_CB = CUR.Invoice_Number;

EXECUTE FUNCTION(RTV Seq#/Comment for Inv#) TYPE(RTVOBJ) FILE(ARBECPP)          AC2124538;
PARAMETER(CUR.Company_Number);
PARAMETER(LCL.Original_Inv_for_CB);
PARAMETER(CUR.Sequence_Number);
PARAMETER(LCL.Invoice_Number_CB);
PARAMETER(CUR.Explanation);
{
 //?USER: Initialize routine

 // PAR.Explanation = CON.*BLANK
 PAR.Explanation = *BLANK;

 //?USER: Process Data record

 CASE;

 // IF DB1.A/R Dtl UnUsed Date 3 EQ PAR.Invoice Number - CB
 IF DB1.A_R_Invoice_Number_CB = PAR.Invoice_Number_CB;

 // PAR.Sequence Number = DB1.Sequence Number
 PAR.Sequence_Number = DB1.Sequence_Number;

 // PAR.Explanation = DB1.Explanation
 PAR.Explanation = DB1.Explanation;

 QUIT;

 ENDIF;

 //?USER: Exit processing

 // PGM.*Return code = CND.Record Not Found
 PGM.*Return_code = 'USR1160';

}


//?If record not found, use old way to get explanation
CASE;

// IF PGM.*Return code is Record Not Found
IF PGM.*Return_code = 'USR1160';

//?** wrap rtv in an IF, add seq#                        C000789
EXECUTE FUNCTION(Rtv Chrg Back Explan  IF) TYPE(EXCINTFUN)                      AC1995023;
PARAMETER(CUR.Company_Number);
PARAMETER(LCL.Invoice_Number);
PARAMETER('IN');
PARAMETER(CUR.Sequence_Number);
PARAMETER(CUR.Explanation);
PARAMETER(LCL.Transaction_Amount);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Chrg Back Explan  RT) TYPE(RTVOBJ) FILE(ARBECPP)           AC1637415;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Invoice_Number);
 PARAMETER(PAR.Invoice_Suffix);
 PARAMETER(PAR.Sequence_Number);
 PARAMETER(PAR.Explanation);
 PARAMETER(PAR.Transaction_Amount);
 {
  //?USER: Initialize routine

  //?***** Change Log and Comments
  DO;

  //?** 06/07/2010 LJB C000789  Pass sequence#, pass back out so
  //?**  next explanation will be selected if required.
  ENDDO;

  //?USER: Process Data record

  //?*** PK0333 ***
  CASE;

  // IF DB1.Adjustment Type Code is Chargeback
  IF DB1.Adjustment_Type_Code = 'CB';

  // OR DB1.Adjustment Type Code is Accrual Chargeback
  OR DB1.Adjustment_Type_Code = 'ACB';

  //?compare dollars
  CASE;

  // IF DB1.Transaction Amount EQ PAR.Transaction Amount
  IF DB1.Transaction_Amount = PAR.Transaction_Amount;

  // PAR.Explanation = DB1.Explanation
  PAR.Explanation = DB1.Explanation;

  // PAR.Sequence Number = DB1.Sequence Number
  PAR.Sequence_Number = DB1.Sequence_Number;

  QUIT;

  ENDIF;

  ENDIF;

 }

}


//?** If no comment, see if there is one for DM    9/7/2006 LJB L60906B
CASE;

// IF CUR.Explanation is Blank
IF CUR.Explanation = *BLANK;

EXECUTE FUNCTION(Rtv Chrg Back Explan  IF) TYPE(EXCINTFUN)                      AC1995023;
PARAMETER(CUR.Company_Number);
PARAMETER(LCL.Invoice_Number);
PARAMETER('DM');
PARAMETER(CUR.Sequence_Number);
PARAMETER(CUR.Explanation);
PARAMETER(LCL.Transaction_Amount);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Chrg Back Explan  RT) TYPE(RTVOBJ) FILE(ARBECPP)           AC1637415;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Invoice_Number);
 PARAMETER(PAR.Invoice_Suffix);
 PARAMETER(PAR.Sequence_Number);
 PARAMETER(PAR.Explanation);
 PARAMETER(PAR.Transaction_Amount);
 {
  //?USER: Initialize routine

  //?***** Change Log and Comments
  DO;

  //?** 06/07/2010 LJB C000789  Pass sequence#, pass back out so
  //?**  next explanation will be selected if required.
  ENDDO;

  //?USER: Process Data record

  //?*** PK0333 ***
  CASE;

  // IF DB1.Adjustment Type Code is Chargeback
  IF DB1.Adjustment_Type_Code = 'CB';

  // OR DB1.Adjustment Type Code is Accrual Chargeback
  OR DB1.Adjustment_Type_Code = 'ACB';

  //?compare dollars
  CASE;

  // IF DB1.Transaction Amount EQ PAR.Transaction Amount
  IF DB1.Transaction_Amount = PAR.Transaction_Amount;

  // PAR.Explanation = DB1.Explanation
  PAR.Explanation = DB1.Explanation;

  // PAR.Sequence Number = DB1.Sequence Number
  PAR.Sequence_Number = DB1.Sequence_Number;

  QUIT;

  ENDIF;

  ENDIF;

 }

}


ENDIF;

//?1/9/04 get explan. with AR Hdr trans amt instead of amount due.      RMC
CASE;

// IF CUR.Explanation is Blank
IF CUR.Explanation = *BLANK;

EXECUTE FUNCTION(RTV Trans Amt         RT) TYPE(RTVOBJ) FILE(ARBDCPP)           AC1682314;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Invoice_Number);
PARAMETER(CUR.Invoice_Suffix);
PARAMETER(WRK.Transaction_Amount);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Chrg Back Explan  IF) TYPE(EXCINTFUN)                      AC1995023;
PARAMETER(CUR.Company_Number);
PARAMETER(LCL.Invoice_Number);
PARAMETER('IN');
PARAMETER(CUR.Sequence_Number);
PARAMETER(CUR.Explanation);
PARAMETER(WRK.Transaction_Amount);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Chrg Back Explan  RT) TYPE(RTVOBJ) FILE(ARBECPP)           AC1637415;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Invoice_Number);
 PARAMETER(PAR.Invoice_Suffix);
 PARAMETER(PAR.Sequence_Number);
 PARAMETER(PAR.Explanation);
 PARAMETER(PAR.Transaction_Amount);
 {
  //?USER: Initialize routine

  //?***** Change Log and Comments
  DO;

  //?** 06/07/2010 LJB C000789  Pass sequence#, pass back out so
  //?**  next explanation will be selected if required.
  ENDDO;

  //?USER: Process Data record

  //?*** PK0333 ***
  CASE;

  // IF DB1.Adjustment Type Code is Chargeback
  IF DB1.Adjustment_Type_Code = 'CB';

  // OR DB1.Adjustment Type Code is Accrual Chargeback
  OR DB1.Adjustment_Type_Code = 'ACB';

  //?compare dollars
  CASE;

  // IF DB1.Transaction Amount EQ PAR.Transaction Amount
  IF DB1.Transaction_Amount = PAR.Transaction_Amount;

  // PAR.Explanation = DB1.Explanation
  PAR.Explanation = DB1.Explanation;

  // PAR.Sequence Number = DB1.Sequence Number
  PAR.Sequence_Number = DB1.Sequence_Number;

  QUIT;

  ENDIF;

  ENDIF;

 }

}


//?** If still no comment, see if there is one for DM w/AR trans amt LJB
CASE;

// IF CUR.Explanation is Blank
IF CUR.Explanation = *BLANK;

EXECUTE FUNCTION(Rtv Chrg Back Explan  IF) TYPE(EXCINTFUN)                      AC1995023;
PARAMETER(CUR.Company_Number);
PARAMETER(LCL.Invoice_Number);
PARAMETER('DM');
PARAMETER(CUR.Sequence_Number);
PARAMETER(CUR.Explanation);
PARAMETER(WRK.Transaction_Amount);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Chrg Back Explan  RT) TYPE(RTVOBJ) FILE(ARBECPP)           AC1637415;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Invoice_Number);
 PARAMETER(PAR.Invoice_Suffix);
 PARAMETER(PAR.Sequence_Number);
 PARAMETER(PAR.Explanation);
 PARAMETER(PAR.Transaction_Amount);
 {
  //?USER: Initialize routine

  //?***** Change Log and Comments
  DO;

  //?** 06/07/2010 LJB C000789  Pass sequence#, pass back out so
  //?**  next explanation will be selected if required.
  ENDDO;

  //?USER: Process Data record

  //?*** PK0333 ***
  CASE;

  // IF DB1.Adjustment Type Code is Chargeback
  IF DB1.Adjustment_Type_Code = 'CB';

  // OR DB1.Adjustment Type Code is Accrual Chargeback
  OR DB1.Adjustment_Type_Code = 'ACB';

  //?compare dollars
  CASE;

  // IF DB1.Transaction Amount EQ PAR.Transaction Amount
  IF DB1.Transaction_Amount = PAR.Transaction_Amount;

  // PAR.Explanation = DB1.Explanation
  PAR.Explanation = DB1.Explanation;

  // PAR.Sequence Number = DB1.Sequence Number
  PAR.Sequence_Number = DB1.Sequence_Number;

  QUIT;

  ENDIF;

  ENDIF;

 }

}


ENDIF;

ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv Note Exists       RT) TYPE(RTVOBJ) FILE(PMEDCPP)           AC1899753;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Invoice_Number);
PARAMETER(CUR.Invoice_Suffix);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


//?display asterisk if notes exist
CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// CUR.Text 1 Length USR = CON.*
CUR.Text_1_Length_USR = *;

//?display asterisk if notes exist
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Text 1 Length USR = CON.*BLANK
CUR.Text_1_Length_USR = *BLANK;

ENDIF;

ENDIF;

//?USER: Process after print of detail format

NXT.USR_Tot_Age_1_CB = SUM(CUR.Age_Due_Aging_1_CB);

NXT.USR_Tot_Age_2_CB = SUM(CUR.Age_Due_Aging_2_CB);

NXT.USR_Tot_Age_3_CB = SUM(CUR.Age_Due_Aging_3_CB);

NXT.USR_Tot_Age_4_CB = SUM(CUR.Age_Due_Aging_4_CB);

NXT.USR_Tot_Age_5_CB = SUM(CUR.Age_Due_Aging_5_CB);

NXT.USR_Tot_Cur_Due_CB = SUM(CUR.Age_Due_Current_CB);

//?USER: Print required level totals

// SUPPRESSED PRINT Invoice Number totals format

// SUPPRESSED PRINT Invoice Suffix totals format

// SUPPRESSED PRINT Company Number totals format

CASE;

IF NEW AR_Customer_Number;
// CUR.USR Tot. Due with CB = CUR.USR Tot Age 1  CB + CUR.USR Tot. Cur  Due CB
CUR.USR_Tot_Due_with_CB = CUR.USR_Tot_Age_1_CB + CUR.USR_Tot_Cur_Due_CB;

// CUR.USR Tot. Due with CB = CUR.USR Tot Age 2  CB + CUR.USR Tot. Due with CB
CUR.USR_Tot_Due_with_CB = CUR.USR_Tot_Age_2_CB + CUR.USR_Tot_Due_with_CB;

// CUR.USR Tot. Due with CB = CUR.USR Tot Age 3  CB + CUR.USR Tot. Due with CB
CUR.USR_Tot_Due_with_CB = CUR.USR_Tot_Age_3_CB + CUR.USR_Tot_Due_with_CB;

// CUR.USR Tot. Due with CB = CUR.USR Tot Age 4  CB + CUR.USR Tot. Due with CB
CUR.USR_Tot_Due_with_CB = CUR.USR_Tot_Age_4_CB + CUR.USR_Tot_Due_with_CB;

// CUR.USR Tot. Due with CB = CUR.USR Tot Age 5  CB + CUR.USR Tot. Due with CB
CUR.USR_Tot_Due_with_CB = CUR.USR_Tot_Age_5_CB + CUR.USR_Tot_Due_with_CB;

// Print A/R Customer Number totals format
PRINT A/R Customer Number totals format;

// CUR.USR Tot. Due with CB = CND.Zero
CUR.USR_Tot_Due_with_CB = *ZERO;

NXT.USR_Tot_Cur_Due_CB = SUM(CUR.USR_Tot_Cur_Due_CB);

NXT.USR_Tot_Age_1_CB = SUM(CUR.USR_Tot_Age_1_CB);

NXT.USR_Tot_Age_2_CB = SUM(CUR.USR_Tot_Age_2_CB);

NXT.USR_Tot_Age_3_CB = SUM(CUR.USR_Tot_Age_3_CB);

NXT.USR_Tot_Age_4_CB = SUM(CUR.USR_Tot_Age_4_CB);

NXT.USR_Tot_Age_5_CB = SUM(CUR.USR_Tot_Age_5_CB);

ENDIF;

// SUPPRESSED PRINT A/R Customer Name totals format

CASE;

IF NEW Salesperson_Code;
// CUR.USR Tot. Due with CB = CUR.USR Tot Age 1  CB + CUR.USR Tot. Cur  Due CB
CUR.USR_Tot_Due_with_CB = CUR.USR_Tot_Age_1_CB + CUR.USR_Tot_Cur_Due_CB;

// CUR.USR Tot. Due with CB = CUR.USR Tot Age 2  CB + CUR.USR Tot. Due with CB
CUR.USR_Tot_Due_with_CB = CUR.USR_Tot_Age_2_CB + CUR.USR_Tot_Due_with_CB;

// CUR.USR Tot. Due with CB = CUR.USR Tot Age 3  CB + CUR.USR Tot. Due with CB
CUR.USR_Tot_Due_with_CB = CUR.USR_Tot_Age_3_CB + CUR.USR_Tot_Due_with_CB;

// CUR.USR Tot. Due with CB = CUR.USR Tot Age 4  CB + CUR.USR Tot. Due with CB
CUR.USR_Tot_Due_with_CB = CUR.USR_Tot_Age_4_CB + CUR.USR_Tot_Due_with_CB;

// CUR.USR Tot. Due with CB = CUR.USR Tot Age 5  CB + CUR.USR Tot. Due with CB
CUR.USR_Tot_Due_with_CB = CUR.USR_Tot_Age_5_CB + CUR.USR_Tot_Due_with_CB;

// Print Salesperson Code totals format
PRINT Salesperson Code totals format;

NXT.USR_Fin_Cur_Due_w_o_cb = SUM(CUR.USR_Tot_Cur_Due_CB);

NXT.USR_Fin_Age_1_w_o_CB = SUM(CUR.USR_Tot_Age_1_CB);

NXT.USR_Fin_Age_2_w_o_CB = SUM(CUR.USR_Tot_Age_2_CB);

NXT.USR_Fin_Age_3_w_o_CB = SUM(CUR.USR_Tot_Age_3_CB);

NXT.USR_Fin_Age_4_w_o_CB = SUM(CUR.USR_Tot_Age_4_CB);

NXT.USR_Fin_Age_5_w_o_CB = SUM(CUR.USR_Tot_Age_5_CB);

NXT.USR_Tot_Cur_Due_CB = SUM(CUR.USR_Tot_Cur_Due_CB);

ENDIF;

//?USER: On print of final totals format

// CUR.USR Final Total = CUR.USR Fin Cur Due w/o cb + CUR.USR Fin Age 1 w/o CB
CUR.USR_Final_Total = CUR.USR_Fin_Cur_Due_w_o_cb + CUR.USR_Fin_Age_1_w_o_CB;

// CUR.USR Final Total = CUR.USR Fin Age 2 w/o CB + CUR.USR Final Total
CUR.USR_Final_Total = CUR.USR_Fin_Age_2_w_o_CB + CUR.USR_Final_Total;

// CUR.USR Final Total = CUR.USR Fin Age 3 w/o CB + CUR.USR Final Total
CUR.USR_Final_Total = CUR.USR_Fin_Age_3_w_o_CB + CUR.USR_Final_Total;

// CUR.USR Final Total = CUR.USR Fin Age 4 w/o CB + CUR.USR Final Total
CUR.USR_Final_Total = CUR.USR_Fin_Age_4_w_o_CB + CUR.USR_Final_Total;

// CUR.USR Final Total = CUR.USR Fin Age 5 w/o CB + CUR.USR Final Total
CUR.USR_Final_Total = CUR.USR_Fin_Age_5_w_o_CB + CUR.USR_Final_Total;

