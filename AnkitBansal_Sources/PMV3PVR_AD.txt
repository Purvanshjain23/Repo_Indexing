// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMV3PVR
// ?Date: 14.08.2025 Time: 03:44:15
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.Company Number = WRK.Company Number
PAR.Company_Number = WRK.Company_Number;

// PAR.Warehouse Code = WRK.Warehouse Code
PAR.Warehouse_Code = WRK.Warehouse_Code;

// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// LCL.Scheduled Ship Date = JOB.*Job date + CON.3 *DAYS
LCL.Scheduled_Ship_Date = DATEINCR(JOB.*Job_date 3 'DY' 1111110 'NONE' 'N' 1);

// LCL.Requested Ship Date = JOB.*Job date + CON.3 *DAYS
LCL.Requested_Ship_Date = DATEINCR(JOB.*Job_date 3 'DY' 1111110 'NONE' 'N' 1);

// LCL.Requested Delivery Date = JOB.*Job date + CON.5 *DAYS
LCL.Requested_Delivery_Date = DATEINCR(JOB.*Job_date 5 'DY' 1111110 'NONE' 'N' 1);

// Call program Rtv Plant Co/Org      XF.
CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.Plant_Company_Sts);
PARAMETER(WRK.Company_Organization);

//?***** Change Log and Comments
DO;

//?** 10/12/17   RMC E011229 Check dup po sans company
//?8/17/2011 LJB P001251  Add flag to pass to the Japanese Chilled
//?** Orders pgm indicating it is called from the menu,
//?** not from a program that is processing Sumi's spreadsheet
//?**
//?6/07/2010 LJB E000796  Don't default in the Company Number or
//?** warehouse code
//?**
EXECUTE FUNCTION(FP1309 Inventory Age  IF) TYPE(EXCINTFUN)                      AC1981251;
{
 //?Execute internal function

 //?FP1309 Inventory Age Code Description
}


//?4/26/2010 -- Remove the Age Code from this process
//?add the Item Days Age and the Production Age From and To
//?** FP1054 05/08/09  RMC added separate field for shipping marks.
//?** E00280 11/13/2008 LJB
//?** Make sure shipping marks are not duplicates.
ENDDO;

//?USER: Load screen

//?** Load default user profile company number into screen field
CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

//?** Don't default in the Co# & Plant code              E000796
//?** Default dates to next day and exclude Sundays
// DTL.Scheduled Ship Date = LCL.Scheduled Ship Date
DTL.Scheduled_Ship_Date = LCL.Scheduled_Ship_Date;

// DTL.Requested Ship Date = LCL.Requested Ship Date
DTL.Requested_Ship_Date = LCL.Requested_Ship_Date;

// DTL.Requested Delivery Date = LCL.Requested Delivery Date
DTL.Requested_Delivery_Date = LCL.Requested_Delivery_Date;

// DTL.Item Age Days = CON.0003
DTL.Item_Age_Days = 0003;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

ENDIF;

//?** E000796
CASE;

// IF DTL.Company Number is not equal to zero
IF DTL.Company_Number <> *ZERO;

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


ENDIF;

//?USER: Validate fields

//?** F4 to Prompt for screen fields
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

//?** Company Number
CASE;

// IF PGM.*Cursor field <IS> DTL.Company Number
IF PGM.*Cursor_field = DTL.Company_Number;

CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(DTL.Company_Number);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

ENDIF;

ENDIF;

//?** Warehouse code
CASE;

// IF PGM.*Cursor field <IS> DTL.Warehouse Code
IF PGM.*Cursor_field = DTL.Warehouse_Code;

// Call program SEL ShipCo/Warehouse   SR.
CALL PROGRAM(SEL ShipCo/Warehouse   SR) ('PPHQSRR');
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Company_Number);

ENDIF;

//?** Customer Number
CASE;

// IF PGM.*Cursor field <IS> DTL.Ship to Customer      USR
IF PGM.*Cursor_field = DTL.Ship_to_Customer_USR;

// Call program Zzz CPH Price Code    SL.
CALL PROGRAM(Zzz CPH Price Code    SL) ('PMVWSRR');
PARAMETER(DTL.Ship_to_Customer_USR);
PARAMETER(DTL.Price_Code_USR);
PARAMETER(NLL.Price_Start_Date);
PARAMETER(NLL.Price_End_Date);

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(DTL.Ship_to_Customer_USR);
PARAMETER(DTL.Ship_To_Name_DRV);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?** Price Code
CASE;

// IF PGM.*Cursor field <IS> DTL.Price Code USR
IF PGM.*Cursor_field = DTL.Price_Code_USR;

// Call program Zzz CPH Price Code    SL.
CALL PROGRAM(Zzz CPH Price Code    SL) ('PMVWSRR');
PARAMETER(DTL.Ship_to_Customer_USR);
PARAMETER(DTL.Price_Code_USR);
PARAMETER(NLL.Price_Start_Date);
PARAMETER(NLL.Price_End_Date);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?** Validate ship to customer is in Customer Price Header
CASE;

// IF DTL.Ship to Customer      USR is Entered
IF DTL.Ship_to_Customer_USR <> 0;

EXECUTE FUNCTION(VAL Customer Exists   RT) TYPE(RTVOBJ) FILE(POC6REP)           AC1887805;
PARAMETER(DTL.Ship_to_Customer_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Ship To Customer is not in Customer Price Header file'
ERROR(USR3959);
MSGPARM(DTL.Ship_to_Customer_USR);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?** Validate Customer Number
CASE;

// IF DTL.Ship to Customer      USR is Entered
IF DTL.Ship_to_Customer_USR <> 0;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(DTL.Ship_to_Customer_USR);
PARAMETER(DTL.Ship_To_Name_DRV);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Customer is not found.'
ERROR(USR0525);
MSGPARM(DTL.Ship_to_Customer_USR);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Shipping Co,Desc   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1738204;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Warehouse_Description);
PARAMETER(LCL.Shipping_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Validate Warehouse Code
CASE;

// IF DTL.Warehouse Description is equal to blank
IF DTL.Warehouse_Description = *BLANK;

// Send error message - 'Warehouse Codes not found.'
ERROR(USR0007);
MSGPARM(DTL.Warehouse_Code);

//?Validate Warehouse Code
// IF LCL.Shipping Company NE DTL.Company Number
IF LCL.Shipping_Company <> DTL.Company_Number;

// Send error message - 'Warehouse &1 cannot ship from Company &2'
ERROR(USR3362);
MSGPARM(DTL.Warehouse_Code);
MSGPARM(DTL.Company_Number);

ENDIF;

//?** Scheduled Ship Date cannot be before today
CASE;

// IF DTL.Scheduled Ship Date LT JOB.*Job date
IF DTL.Scheduled_Ship_Date < JOB.*Job_date;

// Send error message - 'Sched Ship Date must be in the future.'
ERROR(USR3022);
MSGPARM(DTL.Scheduled_Ship_Date);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?** Requested Ship Date cannot be before Scheduled Ship date
CASE;

// IF DTL.Requested Ship Date LT DTL.Scheduled Ship Date
IF DTL.Requested_Ship_Date < DTL.Scheduled_Ship_Date;

// Send error message - 'Requested Ship Date cannot be after Scheduled Ship Date'
ERROR(USR3979);
MSGPARM(DTL.Requested_Ship_Date);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?** Requested Delivery Date cannot be before Requested ship Date
CASE;

// IF DTL.Requested Delivery Date LT DTL.Requested Ship Date
IF DTL.Requested_Delivery_Date < DTL.Requested_Ship_Date;

// Send error message - 'Requested Delivery Date is before Scheduled Ship Date'
ERROR(USR3980);
MSGPARM(DTL.Requested_Delivery_Date);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?** Put day of week name for Scheduled Ship Date
CASE;

// IF DTL.Scheduled Ship Date is entered
IF DTL.Scheduled_Ship_Date <> *ZERO;

// Call program CLC Day of Week        XF.
CALL PROGRAM(CLC Day of Week        XF) ('PDXIXFR');
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(DTL.Day_of_the_Week_USR);

ENDIF;

//?** Put day of week name for Requested Delivery Date
CASE;

// IF DTL.Requested Delivery Date is entered
IF DTL.Requested_Delivery_Date <> *ZERO;

// Call program CLC Day of Week        XF.
CALL PROGRAM(CLC Day of Week        XF) ('PDXIXFR');
PARAMETER(DTL.Requested_Delivery_Date);
PARAMETER(DTL.Text_USR_9);

ENDIF;

//?** Put day of week name for Requested Ship Date
CASE;

// IF DTL.Requested Ship Date is entered
IF DTL.Requested_Ship_Date <> *ZERO;

// Call program CLC Day of Week        XF.
CALL PROGRAM(CLC Day of Week        XF) ('PDXIXFR');
PARAMETER(DTL.Requested_Ship_Date);
PARAMETER(DTL.Text_9_USR);

ENDIF;

//?after janelle approves- put marks on screen and comment this :
// DTL.ED Shipping Marks Txt = DTL.Customer Purchase Order #
DTL.ED_Shipping_Marks_Txt = DTL.Customer_Purchase_Order_#;

//?** P.O. is required and cannot be a duplicate       E00280
CASE;

// IF DTL.Customer Purchase Order # is Blank
IF DTL.Customer_Purchase_Order_# = *BLANK;

// Send error message - 'Shipping Marks are required'
ERROR(USR4080);
MSGPARM(DTL.Customer_Purchase_Order_#);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?** P.O. is required and cannot be a duplicate       E00280
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Co,Cust,PO         RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1279297;
PARAMETER(DTL.Ship_to_Customer_USR);
PARAMETER(DTL.Customer_Purchase_Order_#);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// Send error message - 'PO Number is a duplicate on another open order header.  Press Enter/Cmd Key
ERROR(USR2439);
MSGPARM(DTL.Customer_Purchase_Order_#);

ENDIF;

ENDIF;

//?after janelle approves- put marks on screen and uncomment this :
//?CALC: Screen function fields

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Ship To Name          DRV) TYPE(DRVFLD)                        AC1573561;
PARAMETER(DTL.Ship_To_Name_DRV);
PARAMETER(DTL.Ship_to_Customer_USR);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Age Code Desc DRV) TYPE(DRVFLD)                                AC1883805;
PARAMETER(DTL.Age_Code_Desc_DRV);
PARAMETER(DTL.Age_Code);
{
 //?Calculate derived field

 // PAR.Age Code Desc DRV = Condition name of PAR.Age Code
 PAR.Age_Code_Desc_DRV = RTVCND(PAR.Age_Code);

}


//?** Default Scheduled Ship Date to original value if it is blanked out
CASE;

// IF DTL.Scheduled Ship Date is not entered
IF DTL.Scheduled_Ship_Date = *ZERO;

// DTL.Scheduled Ship Date = LCL.Scheduled Ship Date
DTL.Scheduled_Ship_Date = LCL.Scheduled_Ship_Date;

ENDIF;

//?** Default Requested Ship Date to Scheduled if it is blanked out
CASE;

// IF DTL.Requested Ship Date is not entered
IF DTL.Requested_Ship_Date = *ZERO;

// DTL.Requested Ship Date = DTL.Scheduled Ship Date
DTL.Requested_Ship_Date = DTL.Scheduled_Ship_Date;

ENDIF;

//?** Default Requested Delivery Date to original if it is blanked out
CASE;

// IF DTL.Requested Delivery Date is not entered
IF DTL.Requested_Delivery_Date = *ZERO;

// DTL.Requested Delivery Date = LCL.Requested Delivery Date
DTL.Requested_Delivery_Date = LCL.Requested_Delivery_Date;

ENDIF;

//?USER: Validate relations

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Company_Name_DRV);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Ship To Customer Number must be entered
CASE;

// IF DTL.Ship to Customer      USR is Not entered
IF DTL.Ship_to_Customer_USR = *ZERO;

// Send error message - 'Invalid Customer Number'
ERROR(USR3981);
MSGPARM(DTL.Ship_to_Customer_USR);

ENDIF;

//?** Validate ship to customer is in Customer Price Header
CASE;

// IF DTL.Ship to Customer      USR is Entered
IF DTL.Ship_to_Customer_USR <> 0;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

EXECUTE FUNCTION(VAL Customer Exists   RT) TYPE(RTVOBJ) FILE(POC6REP)           AC1887805;
PARAMETER(DTL.Ship_to_Customer_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Ship To Customer is not in Customer Price Header file'
ERROR(USR3959);
MSGPARM(DTL.Ship_to_Customer_USR);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

ENDIF;

ENDIF;

//?** Check the date range
EXECUTE FUNCTION(Rtv Cust Prc Str/End  RT) TYPE(RTVOBJ) FILE(POC6REP)           AC1677734;
PARAMETER(DTL.Ship_to_Customer_USR);
PARAMETER(DTL.Price_Code_USR);
PARAMETER(WRK.Price_Start_Date);
PARAMETER(WRK.Price_End_Date);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Sched Ship Dt must be within date range of the price code
CASE;

// IF DTL.Scheduled Ship Date LT WRK.Price Start Date
IF DTL.Scheduled_Ship_Date < WRK.Price_Start_Date;

// OR DTL.Scheduled Ship Date GT WRK.Price End Date
OR DTL.Scheduled_Ship_Date > WRK.Price_End_Date;

// Send error message - 'Price Code &1 not found for customer or invalid date range.'
ERROR(USR3318);
MSGPARM(DTL.Price_Code_USR);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?fp1309 slm 04/26/2010
//?Validate the Item Days Age (From and to Date are not used)
// WRK.Prod OvrAge Frm Usr = CON.*ZERO
WRK.Prod_OvrAge_Frm_Usr = *ZERO;

// WRK.Prod OvrAge To Usr = CON.*ZERO
WRK.Prod_OvrAge_To_Usr = *ZERO;

// WRK.Production AgeDte Fr = CON.*ZERO
WRK.Production_AgeDte_Fr = *ZERO;

// WRK.Production AgeDte To = CON.*ZERO
WRK.Production_AgeDte_To = *ZERO;

// LCL.Error Status = CND.blank
LCL.Error_Status = *BLANK;

EXECUTE FUNCTION(Val Age Information   IF) TYPE(EXCINTFUN)                      AC1984951;
PARAMETER(WRK.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(DTL.Requested_Delivery_Date);
PARAMETER(DTL.Item_Age_Days);
PARAMETER(WRK.Production_Ovr_AgeDte_Fr);
PARAMETER(WRK.Production_Ovr_AgeDte_To);
PARAMETER(WRK.Production_AgeDte_Fr);
PARAMETER(WRK.Production_AgeDte_To);
PARAMETER(LCL.Error_Status);
PARAMETER(WRK.Company_Organization);
PARAMETER('V');
{
 //?Execute internal function

 // WRK.Error Flag            USR = CND.Blank
 WRK.Error_Flag_USR = *BLANK;

 // PAR.Error Status = CND.blank
 PAR.Error_Status = *BLANK;

 // WRK.Error Reason Descript 1 = CON.*BLANK
 WRK.Error_Reason_Descript_1 = *BLANK;

 // WRK.Error Reason Descript 2 = CON.*BLANK
 WRK.Error_Reason_Descript_2 = *BLANK;

 // WRK.Error Reason Descript 3 = CON.*BLANK
 WRK.Error_Reason_Descript_3 = *BLANK;

 // WRK.Error Reason Descript 4 = CON.*BLANK
 WRK.Error_Reason_Descript_4 = *BLANK;

 // WRK.Error Reason Descript 5 = CON.*BLANK
 WRK.Error_Reason_Descript_5 = *BLANK;

 CASE;

 // IF PAR.Company Organization is Seaboard
 IF PAR.Company_Organization = 'S';

 CASE;

 // IF PAR.Requested Delivery Date is not entered
 IF PAR.Requested_Delivery_Date = *ZERO;

 // Send error message - 'Requested Delv Date is required'
 ERROR(USR4329);
 MSGPARM(PAR.Requested_Delivery_Date);

 // IF PAR.Scheduled Ship Date is not entered
 IF PAR.Scheduled_Ship_Date = *ZERO;

 // Send error message - 'Scheduled Ship Date is required when orders are assigned to load.'
 ERROR(USR2230);
 MSGPARM(PAR.Scheduled_Ship_Date);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Val Age information   XF.
 CALL PROGRAM(Val Age information   XF) ('PNQNXFR');
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.Error_Flag_USR);
 PARAMETER(WRK.Error_Reason_Descript_1);
 PARAMETER(WRK.Error_Reason_Descript_2);
 PARAMETER(WRK.Error_Reason_Descript_3);
 PARAMETER(WRK.Error_Reason_Descript_4);
 PARAMETER(WRK.Error_Reason_Descript_5);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(PAR.Item_Age_Days);
 PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
 PARAMETER(PAR.Production_Ovr_AgeDte_To);
 PARAMETER(PAR.Production_AgeDte_Fr);
 PARAMETER(PAR.Production_AgeDte_To);

 //?Verify if message should be sent if validation is required
 CASE;

 // IF WRK.Error Flag            USR is Yes
 IF WRK.Error_Flag_USR = 'Y';

 // AND PAR.Production Dates Sts Usr is Validation routine
 AND PAR.Production_Dates_Sts_Usr = 'V';

 //?message 1 Product is shipped before product is made
 CASE;

 // IF WRK.Error Reason Descript 1 NE WRK.Blank for 30          USR
 IF WRK.Error_Reason_Descript_1 <> WRK.Blank_for_30_USR;

 // Send error message - 'Prd Date is invalid for requested delivery date'
 ERROR(USR4307);
 MSGPARM(PAR.Production_AgeDte_Fr);

 ENDIF;

 //?message 2 Either Days or override date but not both
 CASE;

 // IF WRK.Error Reason Descript 2 NE WRK.Blank for 30          USR
 IF WRK.Error_Reason_Descript_2 <> WRK.Blank_for_30_USR;

 // Send error message - 'Enter Age Days or Dates'
 ERROR(USR4304);
 MSGPARM(PAR.Item_Age_Days);
 MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
 MSGPARM(PAR.Production_Ovr_AgeDte_To);

 ENDIF;

 //?message 3 With Chill Days Either Days or Override Dates required
 CASE;

 // IF WRK.Error Reason Descript 3 NE WRK.Blank for 30          USR
 IF WRK.Error_Reason_Descript_3 <> WRK.Blank_for_30_USR;

 // Send error message - 'Override Dates is after shipped date'
 ERROR(USR4305);
 MSGPARM(PAR.Item_Age_Days);
 MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
 MSGPARM(PAR.Production_Ovr_AgeDte_To);

 ENDIF;

 //?message 4 From date is > then SHIP DATE
 CASE;

 // IF WRK.Error Reason Descript 4 NE WRK.Blank for 30          USR
 IF WRK.Error_Reason_Descript_4 <> WRK.Blank_for_30_USR;

 // Send error message - 'Override Dates is after shipped date'
 ERROR(USR4305);
 MSGPARM(PAR.Item_Age_Days);
 MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
 MSGPARM(PAR.Production_Ovr_AgeDte_To);

 ENDIF;

 //?message 5 To date is > then SHIP DATE
 CASE;

 // IF WRK.Error Reason Descript 5 NE WRK.Blank for 30          USR
 IF WRK.Error_Reason_Descript_5 <> WRK.Blank_for_30_USR;

 // Send error message - 'Override Dates is after shipped date'
 ERROR(USR4305);
 MSGPARM(PAR.Item_Age_Days);
 MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
 MSGPARM(PAR.Production_Ovr_AgeDte_To);

 ENDIF;

 CASE;

 // IF PAR.Production Ovr AgeDte Fr is not entered
 IF PAR.Production_Ovr_AgeDte_Fr = *ZERO;

 // Send error message - 'Invalid Item Age Days'
 ERROR(USR4309);
 MSGPARM(PAR.Item_Age_Days);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send error message - 'Invalid Production Override Age Frm/To Dates'
 ERROR(USR4310);
 MSGPARM(PAR.Production_AgeDte_Fr);
 MSGPARM(PAR.Production_AgeDte_To);

 ENDIF;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

}


CASE;

// IF LCL.Error Status is yes
IF LCL.Error_Status = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

ENDIF;

//?USER: User defined action

// PAR.Company Number Pass   USR = DTL.Company Number
PAR.Company_Number_Pass_USR = DTL.Company_Number;

// PAR.Customer Number Pass  USR = DTL.Ship to Customer      USR
PAR.Customer_Number_Pass_USR = DTL.Ship_to_Customer_USR;

// PAR.Date 1          PASS  USR = DTL.Scheduled Ship Date
PAR.Date_1_PASS_USR = DTL.Scheduled_Ship_Date;

// PAR.Date 2          PASS  USR = DTL.Requested Ship Date
PAR.Date_2_PASS_USR = DTL.Requested_Ship_Date;

// PAR.From Date Pass        USR = DTL.Requested Delivery Date
PAR.From_Date_Pass_USR = DTL.Requested_Delivery_Date;

// PAR.Order Number 1  PASS  USR = CON.*ZERO
PAR.Order_Number_1_PASS_USR = *ZERO;

// PAR.Warehouse Code PASS   USR = DTL.Warehouse Code
PAR.Warehouse_Code_PASS_USR = DTL.Warehouse_Code;

// PAR.System Value Numeric = CND.Equal to zero
PAR.System_Value_Numeric = *ZERO;

//?fp1309 add the item age days
// LCL.Days to Age  Pass Usr = DTL.Item Age Days
LCL.Days_to_Age_Pass_Usr = DTL.Item_Age_Days;

// LCL.Date 4 RGF   Pass = WRK.Production Ovr AgeDte Fr
LCL.Date_4_RGF_Pass = WRK.Production_Ovr_AgeDte_Fr;

// LCL.Date 4 RGT   Pass = WRK.Production Ovr AgeDte To
LCL.Date_4_RGT_Pass = WRK.Production_Ovr_AgeDte_To;

//?** Pass source of data to the program (Menu or Uploaded) P001251
// PAR.Change Flag USR = CND.Menu
PAR.Change_Flag_USR = 'M';

// Call program zzz Japan Chlld Orders CL.
CALL PROGRAM(zzz Japan Chlld Orders CL) ('PMV4UPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Customer_Number_Pass_USR);
PARAMETER(PAR.Date_1_PASS_USR);
PARAMETER(PAR.Date_2_PASS_USR);
PARAMETER(PAR.From_Date_Pass_USR);
PARAMETER(PAR.Order_Number_1_PASS_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(PAR.Warehouse_Code_PASS_USR);
PARAMETER(DTL.Price_Code_USR);
PARAMETER(PAR.Change_Flag_USR);
PARAMETER(DTL.Shipping_Instructions);
PARAMETER(DTL.Customer_Purchase_Order_#);
PARAMETER(LCL.Days_to_Age_Pass_Usr);
PARAMETER(LCL.Date_4_RGF_Pass);
PARAMETER(LCL.Date_4_RGT_Pass);
PARAMETER(DTL.ED_Shipping_Marks_Txt);

// WRK.Order Number = PAR.Order Number 1  PASS  USR
WRK.Order_Number = PAR.Order_Number_1_PASS_USR;

// WRK.Load ID = PAR.System Value Numeric
WRK.Load_ID = PAR.System_Value_Numeric;

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Japanese Chilled Order: &1 on Load &2 created'
MESSAGE(USR3957 *INFO);
MSGPARM(WRK.Order_Number);
MSGPARM(WRK.Load_ID);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Japanese Chilled Order ended in error - not created'
ERROR(USR3958);

ENDIF;

//?** Save the screen dates
// LCL.Scheduled Ship Date = DTL.Scheduled Ship Date
LCL.Scheduled_Ship_Date = DTL.Scheduled_Ship_Date;

// LCL.Requested Ship Date = DTL.Requested Ship Date
LCL.Requested_Ship_Date = DTL.Requested_Ship_Date;

// LCL.Requested Delivery Date = DTL.Requested Delivery Date
LCL.Requested_Delivery_Date = DTL.Requested_Delivery_Date;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?USER: Exit program processing

//?** Exit requested
CASE;

// IF DTL.*CMD key is *Exit
IF DTL.*CMD_key = '03';

PGM.*Return_code = 'Y2U9999';

RETURN;

ENDIF;

