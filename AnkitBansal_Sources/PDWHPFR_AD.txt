// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDWHPFR
// ?Date: 14.08.2025 Time: 12:04:42
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

// PAR.Count USR = CON.*ZERO
PAR.Count_USR = *ZERO;

//?USER: Record selection processing

EXECUTE FUNCTION(RTV Bill Type, Event   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1366339;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(WRK.Event_Code);
PARAMETER(WRK.Billing_Activity_Type);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.Billing Activity Type is Credit or Debit Memo
IF WRK.Billing_Activity_Type = '2'/'3';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Export/Domestic Selection
CASE;

// IF PGM.*Record selected is *NO
IF PGM.*Record_selected = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Export/Domestic is Domestic
IF PAR.Export_Domestic = 'D';

// WRK.Record Status = CND.Active
WRK.Record_Status = 'A';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Export/Domestic is Export
IF PAR.Export_Domestic = 'E';

// WRK.Record Status = CND.Active
WRK.Record_Status = 'A';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Record Status = CND.*blank
WRK.Record_Status = *BLANK;

ENDIF;

ENDIF;

CASE;

// IF WRK.Record Status is *blank
IF WRK.Record_Status = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Export/Department RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1504627;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Shipped_Item_Code);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Export_Domestic);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.Export/Domestic EQ WRK.Export/Domestic
IF PAR.Export_Domestic = WRK.Export_Domestic;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?USER: On print of first page format

MOVE *ALL (To: 1PG From: PAR);

EXECUTE FUNCTION(RTV Company Name Only  RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1100959;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Company_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.USR From Date = PAR.USR From Date
X1PG_USR_From_Date = PAR.USR_From_Date;

// 1PG.USR To Date = PAR.USR To Date
X1PG_USR_To_Date = PAR.USR_To_Date;

CASE;

// IF PAR.Export/Domestic is Domestic
IF PAR.Export_Domestic = 'D';

// 1PG.Export/Domestic Desc  USR = CON.Domestic
X1PG_Export_Domestic_Desc_USR = 'Domestic';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Export/Domestic is Export
IF PAR.Export_Domestic = 'E';

// 1PG.Export/Domestic Desc  USR = CON.Export
X1PG_Export_Domestic_Desc_USR = 'Export';

// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Export/Domestic Desc  USR = CON.*All
X1PG_Export_Domestic_Desc_USR = *All;

ENDIF;

ENDIF;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
// Print Accounting Company Number header format
PRINT Accounting Company Number header format;

ENDIF;

// SUPPRESSED PRINT Ship To State Code header format

// SUPPRESSED PRINT Carrier Code header format

// SUPPRESSED PRINT Order Number header format

//?USER: On print of detail format

// NXT.Weight Total 13.2     USR = NXT.Weight Total 13.2     USR + DB1.Weight Bille
NXT.Weight_Total_13_2_USR = NXT.Weight_Total_13_2_USR + DB1.Weight_Billed;

// NXT.Quantity On Hand   USR = NXT.Quantity On Hand   USR + DB1.Quantity Billed
NXT.Quantity_On_Hand_USR = NXT.Quantity_On_Hand_USR + DB1.Quantity_Billed;

// NXT.Total Freight Amount 13.2 = NXT.Total Freight Amount 13.2 + DB1.Actual Freig
NXT.Total_Freight_Amount_13_2 = NXT.Total_Freight_Amount_13_2                                      +
+ DB1.Actual_Freight_Amount;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

//?USER: Print required level totals

CASE;

IF NEW Order_Number;
EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(CUR.Carrier_Code);
PARAMETER(CUR.USR_Description_22);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


// NXT.Weight Total 13.2     USR = NXT.Weight Total 13.2     USR + CUR.Weight Total
NXT.Weight_Total_13_2_USR = NXT.Weight_Total_13_2_USR + CUR.Weight_Total_13_2_USR;

// NXT.Quantity On Hand   USR = NXT.Quantity On Hand   USR + CUR.Quantity On Hand
NXT.Quantity_On_Hand_USR = NXT.Quantity_On_Hand_USR + CUR.Quantity_On_Hand_USR;

// NXT.Total Freight Amount 13.2 = NXT.Total Freight Amount 13.2 + CUR.Total Freigh
NXT.Total_Freight_Amount_13_2 = NXT.Total_Freight_Amount_13_2                                      +
+ CUR.Total_Freight_Amount_13_2;

// Print Order Number totals format
PRINT Order Number totals format;

ENDIF;

CASE;

IF NEW Carrier_Code;
// NXT.Weight Total 13.2     USR = NXT.Weight Total 13.2     USR + CUR.Weight Total
NXT.Weight_Total_13_2_USR = NXT.Weight_Total_13_2_USR + CUR.Weight_Total_13_2_USR;

// NXT.Quantity On Hand   USR = NXT.Quantity On Hand   USR + CUR.Quantity On Hand
NXT.Quantity_On_Hand_USR = NXT.Quantity_On_Hand_USR + CUR.Quantity_On_Hand_USR;

// NXT.Total Freight Amount 13.2 = NXT.Total Freight Amount 13.2 + CUR.Total Freigh
NXT.Total_Freight_Amount_13_2 = NXT.Total_Freight_Amount_13_2                                      +
+ CUR.Total_Freight_Amount_13_2;

// Print Carrier Code totals format
PRINT Carrier Code totals format;

ENDIF;

CASE;

IF NEW Ship_To_State_Code;
CASE;

// IF CUR.Ship To State Code EQ WRK.BLANK
IF CUR.Ship_To_State_Code = WRK.BLANK;

EXECUTE FUNCTION(CRT Prt Frght by State CR) TYPE(CRTOBJ) ARRAY(Prt_Frght_by_StatAC1509052;
PARAMETER(CUR.Weight_Total_13_2_USR);
PARAMETER(CUR.Quantity_On_Hand_USR);
PARAMETER(CUR.Total_Freight_Amount_13_2);
PARAMETER('`');

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(CRT Prt Frght by State CR) TYPE(CRTOBJ) ARRAY(Prt_Frght_by_StatAC1509052;
PARAMETER(CUR.Weight_Total_13_2_USR);
PARAMETER(CUR.Quantity_On_Hand_USR);
PARAMETER(CUR.Total_Freight_Amount_13_2);
PARAMETER(CUR.Ship_To_State_Code);

ENDIF;

// PAR.Count USR = PAR.Count USR + CON.1
PAR.Count_USR = PAR.Count_USR + 1;

// NXT.Weight Total 13.2     USR = NXT.Weight Total 13.2     USR + CUR.Weight Total
NXT.Weight_Total_13_2_USR = NXT.Weight_Total_13_2_USR + CUR.Weight_Total_13_2_USR;

// NXT.Quantity On Hand   USR = NXT.Quantity On Hand   USR + CUR.Quantity On Hand
NXT.Quantity_On_Hand_USR = NXT.Quantity_On_Hand_USR + CUR.Quantity_On_Hand_USR;

// NXT.Total Freight Amount 13.2 = NXT.Total Freight Amount 13.2 + CUR.Total Freigh
NXT.Total_Freight_Amount_13_2 = NXT.Total_Freight_Amount_13_2                                      +
+ CUR.Total_Freight_Amount_13_2;

// Print Ship To State Code totals format
PRINT Ship To State Code totals format;

ENDIF;

// SUPPRESSED PRINT Accounting Company Number totals format

//?PRTOBJ calls after print of final totals format

//?Embedded PRTOBJ : PRT Frght by S/T St TtlPO
EXECUTE FUNCTION(PRT Frght by S/T St TtlPO) TYPE(PRTOBJ);
PARAMETER(PAR.Count_USR);

