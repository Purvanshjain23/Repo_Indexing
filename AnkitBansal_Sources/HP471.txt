      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      Hog Production
      * PROGRAM:     HP471
      * TITLE:       Specify Preliminary EOP Edits
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     05/13/04
      *
      *
      * FUNCTION: This function allows the user to run various EOP edits/listings
      *           prior to actually running the Period Close function. The
      *           functions/listings called from this function are also called
      *           from the Period Close function. So, we have to keep the LDA in
      *           synch with the LDA in HP477-Period Close.
      *
      *           This program is called from a menu.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 07/12/04  LeAnne Fedor
      *           This was hard-coded to run in the job queue 'DATAMART'--like
      *           the other EOP stuff. But, we removed this per Alice. So, it
      *           now runs in the normal queue.
      * 03/21/16  Barb Gutierrez
      *           Added company to screen.   T005449
      * 05/10/16  Barb Gutierrez
      *           Recompile Only.   E5752
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhpd471    cf   e             workstn infds(iofeed)
      *
      *
     Fhsp002    if   e           k disk
      *    Functions
      *
     Fhsp0071   if   e           k disk
      * Company control
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  NAMED CONSTANTS
      *---------------------------------------------------------------
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  Compile time array for SBMJOB used in QCMDEXC
      *---------------------------------------------------------------
     D cmd             s              1    dim(80) ctdata perrcd(80)
      *
      *
      *---------------------------------------------------------------
      * Standalone fields
      *---------------------------------------------------------------
      *
      * Standard fields
      *
     D pgm             s             10
     D msgfl           s             10
     D maxmsg          s              2  0  inz(20)
     D routne          s              6
      *
      *  Parms for use with QCMDEXC.  'LENGTH' is the length of the
      *  command that will be issued with QCMDEXC.  QCMDEXC requires
      *  the field containing length to be defined as 15 with 5 decimal
      *  positions.  The field 'CMDSBM' will hold the values of the
      *  submit job command when passed as a parm on the call to
      *  QCMDEXC.
      *
     D length          s             15  5 inz(80)
     D cmdsbm          s             80
      *
      *
      * Control fields
      *
     D termfl          s              1
      *
      *
      * Work fields for date manipulation
      *
     D wkcymdiso       s               D   datfmt(*iso)
     D wkmdydate       s               D   datfmt(*mdy)
     D wkepdt          s              8  0
      *
      *
      * Parm fields
      *
     D infncd          s             10
     D inbobo          s              5
     D indvfl          s              1
     D inbofl          s              1
     D oubobo          s              5
     D oubods          s             30
     D oudvcd          s              5
     D secfl           s              1
     D oubofl          s              1
     D ourmfl          s              1
      *
     D xxjobq          s             10     inz('*JOBD     ')
     D xxnite          s              1    inz('N')
     D xxcopy          s              1  0
      *
      *
      *---------------------------------------------------------------------------
      * DATA STRUCTURES
      *---------------------------------------------------------------------------
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *---------------------------------------------------------------
      *  Accounting period data area
      *---------------------------------------------------------------
      *
     D daaper          ds                  dtaara(daaper)
     D  daccyy                        4s 0
     D  daper                         2s 0
     D  dabpdt                        8s 0
     D  daepdt                        8s 0
     D  dapgfl                        1a
     D  dappfl                        1a
      *
      *---------------------------------------------------------------
      *  Local data area
      *---------------------------------------------------------------
      *
     Dlda             uds                  dtaara(*lda)
     D  ldbpdt                 1     08  0
     D  ldepdt                 9     16  0
     D  ldacpe                17     18  0
     D  ldeffl                19     19
     D  ldccyy                20     23  0
     D  ldbmdy                60     66  0
     D  ldemdy                70     76  0
     D  lderfl                80     80
     D  ldppacyr              81     84  0
     D  ldppacpe              85     86  0
      *
     D  ldcell               102    103  0
     D  ldfscd               109    113  0
     D  ldcocd               200    202
      *
     D  ldhd                 297    299  0
     D  ldcls                300    300
     D  ldgrp                301    301
     D  ldneg                302    302
     D  ldexp                303    303
     D  ldlow                304    304
     D  ldfed                305    305
      *
     D  ldoutu               401    410
     D  ldhold               411    411
     D  ldcopy               412    412  0
     D  ldoutq               413    422
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * Mainline
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
     C                   movel     scrn1         routne
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * If the user failed the initial security checks, set the indicator
      * to protect input fields and invalidate function keys.
      *
     C                   if        termfl = yes
     C                   seton                                        99
     C                   endif
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to crt
      *
     C                   write     hp471k1
     C                   write     hp471ec
     C                   exfmt     hp471r1
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-EXIT
     C                   eval      routne = exit
      *
     C                   when      *in17 = *on                                  F17-print options
     C                   eval      routne = scrn1
     C                   call      'HP451'
     C                   parm                    sdpgm
     C     ldcopy        parm      ldcopy        xxcopy
     C                   parm                    ldhold
     C                   parm                    ldoutq
     C                   parm                    xxnite
     C                   parm                    xxjobq
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                       API
     C                   eval      routne = scrn1
      *
     C                   when      *in08 = *on                                  F8-Submit
     C                   movel     edit1         routne
     C                   other
      *
     C                   movel     edit1         routne
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Edit input fields on Screen 1
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * Validate:
      *    Company
      *    Cut-off date
      *    Reports
      *
     C                   exsr      $company
      *
     C                   exsr      $cmdy
     C                   exsr      $reports
      *
      * If there are no errors, process the user's request
      *
     C                   if        error = 0 and *in08 = *on
     C                   exsr      $proc1
     C                   endif
      *
     C                   movel     scrn1         routne
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * company
      *----------------------------------------------------------------
      *
     C     $company      begsr
      *
     C                   if        d1cocd  = *blank
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS00175'
     C                   endif
     c                   else
     c     D1COCD        chain     hsp0071                            30
     c     *IN30         ifeq      *ON
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS00175'
     C                   endif
     C                   end
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Validate Cut-off Date
      *---------------------------------------------------------------
      *
     C     $cmdy         begsr
      *
     C                   z-add     0             ldepdt
      *
     C                   select
     C                   when      d1cmdy = 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
      *
     C                   when      d1cmdy < 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   other
      *
     C     *mdy          test(d)                 d1cmdy                 92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
     C                   z-add     d1cmdy        ldemdy
      *
      * Flip the date from MMDDYY to CCYYMMDD.
      *
     C     *mdy          move      d1cmdy        wkcymdiso
     C                   move      wkcymdiso     ldepdt
      *
      * Cut-off date cannot be prior to Beginning Period date or after
      * Ending Period date.
      *
     C                   select
     C                   when      ldepdt  < ldbpdt
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09216'
     C                   endif
      *
     C                   when      ldepdt > wkepdt
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09217'
     C                   endif
     C                   endsl
      *
     C                   endif                                                  If bad date
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Validate Reports
      *---------------------------------------------------------------
      *
     C     $reports      begsr
      *
     C                   select
     C                   when      d1cls = *blank and
     C                             d1grp = *blank and
     C                             d1neg = *blank and
     C                             d1low = *blank and
     C                             d1fed = *blank and
     C                             d1exp = *blank
     C                   seton                                        323334
     C                   seton                                        353738
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09218'
     C                   endif
     C                   other
      *
     C                   if        d1cls <> *blank and d1cls <> 'X'
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09220'
     C                   endif
     C                   endif
      *
     C                   if        d1grp <> *blank and d1grp <> 'X'
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09220'
     C                   endif
     C                   endif
      *
     C                   if        d1neg <> *blank and d1neg <> 'X'
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09220'
     C                   endif
     C                   endif
      *
     C                   if        d1low <> *blank and d1low <> 'X'
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09220'
     C                   endif
     C                   endif
      *
     C                   if        d1low = *blank and d1hd <> 0
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09219'
     C                   endif
     C                   endif
      *
     C                   if        d1low = 'X' and d1hd < 0
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   endif
      *
     C                   if        d1exp <> *blank and d1exp <> 'X'
     C                   seton                                        37
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09220'
     C                   endif
     C                   endif
      *
     C                   if        d1fed <> *blank and d1fed <> 'X'
     C                   seton                                        38
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09220'
     C                   endif
     C                   endif
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Security program
      *---------------------------------------------------------------
      *
     C     $sec          begsr
      *
      * Set up the fields to send into the security program
      *
     C                   movel     sdpgm         infncd                         PGM NAME
     C                   movel     *blank        inbobo                         SCREEN BO
     C                   move      *blank        oubobo                         BO CODE
     C                   move      *blank        oubods                         BO DESC
     C                   move      *blank        oudvcd                         FUNCTION DIV
     C                   movel     no            termfl                         TERMINAL FLG
      *
     C                   call      'HPSEC  '
      **** IN
     C                   parm                    mgid                           MSGID ARRAY
     C                   parm                    mgdt                           MSGDTA DATA
     C                   parm                    error                          # OF errorS
     C                   parm                    infncd                         FUNC CODE
     C                   parm                    inbobo                         BO CODE
     C                   parm                    indvfl                         CHECK DIV?
     C                   parm                    inbofl                         CHECK B.O.?
      **** OUT
     C                   parm                    oubobo                         BO CODE
     C                   parm                    oubods                         BO DESC.
     C                   parm                    oudvcd                         DIV CODE
     C                   parm                    secfl                          SEC ERR FLAG
     C                   parm                    oubofl                         B.O. ERR FLG
     C                   parm                    ourmfl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Process the user's request
      *---------------------------------------------------------------
      *
     C     $proc1        begsr
      *
      *
      * If the user submitted the job
      *
     C                   if        *in08 = *on                                  If F8
      *
     C                   move      d1cocd        ldcocd                           t5449
     C                   z-add     d1hd          ldhd
     C                   move      d1cls         ldcls
     C                   move      d1grp         ldgrp
     C                   move      d1neg         ldneg
     C                   move      d1exp         ldexp
     C                   move      d1low         ldlow
     C                   move      d1fed         ldfed
      *
     C                   out       lda
      *
      *
      * Move the 80-character compile time array 'CMD' to an
      * 80-character field for passing as a parm with QCMDEXC.
      *
     C                   movea     xxjobq        cmd(52)
     C                   movea     cmd           cmdsbm
     C                   call      'QCMDEXC'
     C                   parm                    cmdsbm
     C                   parm                    length
      *
      * Issue the standard request submission message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09003'
     C                   endif
     C                   endif                                                  If F8
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *---------------------------------------------------------------
      * Set last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        lr
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Initialization
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Key lists
      *   None
      *
      *
      * Initialize LDA fields. Remember that:
      *   This function calls the same programs that are run during a Period Close.
      *   So, we have to keep the LDA in synch with the LDA in HP477-Period Close.
      *
     C                   movel     'D'           ldeffl
     C                   movel     no            lderfl
      *
      * You won't need the 'prior period' info in this function; so, just set the
      * prior period fields to zero.
      *
     C                   z-add     0             ldppacyr
     C                   z-add     0             ldppacpe
      *
      * Initialize LDA fields that are used for on-demand reports.
      *
     C                   z-add     0             ldcell
     C                   z-add     0             ldfscd
      *
      * Initialize LDA fields for printing
      *
     C                   move      *blank        ldhold
     C                   z-add     0             ldcopy
     C                   movel     ldoutu        ldoutq
      *
      * Get this functions' number of copies, etc.
      *
     C     sdpgm         chain     hsp002                             92
     C                   if        *in92 = *off
     C                   z-add     fncopy        ldcopy
     C                   movel     fnhold        ldhold
     C                   endif
      *
     C                   if        ldcopy = 0
     C                   z-add     1             ldcopy
     C                   endif
      *
     C                   if        ldhold = *blank
     C                   movel     no            ldhold
     C                   endif
      *
      * Set up LDA and screen values using the data area for the current
      * accounting period.
      *
     C                   in        daaper
      *
      * Set up Beginning Period date.
      *
     C                   z-add     dabpdt        ldbpdt
     C     *iso          move      dabpdt        wkmdydate
     C                   move      wkmdydate     d1bmdy
     C                   z-add     d1bmdy        ldbmdy
      *
      * Set up Ending Period date and default it into the Cut-off Date field.
      *
     C                   z-add     daepdt        wkepdt
     C     *iso          move      daepdt        wkmdydate
     C                   move      wkmdydate     d1emdy
     C                   z-add     d1emdy        d1cmdy
      * Year/Period
     C                   z-add     daper         d1acpe
     C                   z-add     daper         ldacpe
     C                   z-add     daccyy        ldccyy
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
      *
      * Execute the security subroutine to determine user authorizations.
      * If there are security errors, set the Terminal Flag to YES.
      *
     C                   exsr      $sec
     C                   if        secfl = yes
     C                   movel     yes           termfl
     C                   endif
      *
     C                   endsr
      /EJECT
      *****************************************************************
      * COMPILE TIME ARRAY NAMED 'CMD' USED IN QCMDEXC
      *****************************************************************
** CMD table 'CMD' submits listings
SBMJOB CMD(CALL PGM(HP471CL)) JOB(PRELIMEDIT) JOBQ(__________)
