// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDCPPFR
// ?Date: 14.08.2025 Time: 12:03:41
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

//?08/23/19 DN S15343-Get BOXLOAD Minimum Quantity.
EXECUTE FUNCTION(RTV Numeric Value 2    RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC2169947;
PARAMETER(PAR.Company_Number);
PARAMETER('BOXLOAD');
PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Record selection processing

CASE;

// IF DB1.Billing Activity Type is Invoice
IF DB1.Billing_Activity_Type = '1';

// AND DB1.Load ID is Blank
AND DB1.Load_ID = *ZERO;

// AND DB1.Header Status is Not cancelled
AND DB1.Header_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

// AND DB1.Event Code is Entered Thru 05 Audit
AND DB1.Event_Code >= '01';
AND DB1.Event_Code <= '04';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?08/23/19 DN S15343-Select Matching U/M if Entered.
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF NOT PAR.U/M - Load Scheduling USR is Blank
IF ! PAR.U_M_Load_Scheduling_USR = *BLANK;

// LCL.Boxes Total Quantity = CON.*ZERO
LCL.Boxes_Total_Quantity = *ZERO;

// LCL.USR Unit of Measure = CND.*Blank
LCL.USR_Unit_of_Measure = *BLANK;

EXECUTE FUNCTION(RTV UM/Whs Code,BX Qty RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1625244;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(1);
PARAMETER(LCL.USR_Unit_of_Measure);
PARAMETER(LCL.Boxes_Total_Quantity);
{
 //?USER: Initialize routine

 // WRK.First Time Flag = CND.Yes
 WRK.First_Time_Flag = 'Y';

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?S17054 DN 04/08/21-Beyond this point, changed all 'U/M - Ordered'
 //?  to reference LCL Context instead of DB1.
 //?S17054 DN 04/08/21-Count Type 'Cases' (CS) as 'Boxes' (BX).
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.U/M - Ordered = DB1.U/M - Ordered
 LCL.U_M_Ordered = DB1.U_M_Ordered;

 CASE;

 // IF LCL.U/M - Ordered is Cases
 IF LCL.U_M_Ordered = 'CS';

 // LCL.U/M - Ordered = CND.EQ Boxes
 LCL.U_M_Ordered = 'BX';

 ENDIF;

 ENDIF;

 //?Accumulate the Box Quantity for slotting consideration  6/12/01
 CASE;

 // IF LCL.U/M - Ordered is EQ Boxes
 IF LCL.U_M_Ordered = 'BX';

 // PAR.Boxes Total Quantity = PAR.Boxes Total Quantity + DB1.Quantity Ordered
 PAR.Boxes_Total_Quantity = PAR.Boxes_Total_Quantity + DB1.Quantity_Ordered;

 ENDIF;

 CASE;

 // IF PAR.USR Unit of Measure is *Blank
 IF PAR.USR_Unit_of_Measure = *BLANK;

 // PAR.USR Unit of Measure = LCL.U/M - Ordered
 PAR.USR_Unit_of_Measure = LCL.U_M_Ordered;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.U/M - Ordered EQ PAR.USR Unit of Measure
 IF LCL.U_M_Ordered = PAR.USR_Unit_of_Measure;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Unit of Measure = CND.Mixed
 PAR.USR_Unit_of_Measure = 'MX';

 ENDIF;

 ENDIF;

 ENDIF;

}


// LCL.U/M - Load Scheduling USR = LCL.USR Unit of Measure
LCL.U_M_Load_Scheduling_USR = LCL.USR_Unit_of_Measure;

//?Chg MX to BX or CB
CASE;

// IF LCL.U/M - Load Scheduling USR is Mixed
IF LCL.U_M_Load_Scheduling_USR = 'MX';

CASE;

// IF LCL.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
IF LCL.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

// LCL.U/M - Load Scheduling USR = CND.Combo
LCL.U_M_Load_Scheduling_USR = 'CB';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.U/M - Load Scheduling USR = CND.Box
LCL.U_M_Load_Scheduling_USR = 'BX';

ENDIF;

ENDIF;

//?If User Selects 'Box' Then Allow to Match by 'Cases' (CS) Also.
CASE;

// IF PAR.U/M - Load Scheduling USR is Box
IF PAR.U_M_Load_Scheduling_USR = 'BX';

CASE;

// IF LCL.USR Unit of Measure is Cases
IF LCL.USR_Unit_of_Measure = 'CS';

// OR LCL.USR Unit of Measure is Boxed
OR LCL.USR_Unit_of_Measure = 'BX';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?If User Selects 'Box' Then Allow to Match by 'Cases' (CS) Also.
// IF *OTHERWISE
IF *OTHERWISE;

//?Must Match By User U/M Selection.
CASE;

// IF PAR.U/M - Load Scheduling USR NE LCL.U/M - Load Scheduling USR
IF PAR.U_M_Load_Scheduling_USR <> LCL.U_M_Load_Scheduling_USR;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?USER: On print of first page format

// 1PG.Company Number = PAR.Company Number
X1PG_Company_Number = PAR.Company_Number;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Order Number = PAR.Order Number
X1PG_Order_Number = PAR.Order_Number;

// 1PG.Ship To Customer = PAR.Ship To Customer
X1PG_Ship_To_Customer = PAR.Ship_To_Customer;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(X1PG_Ship_To_Customer);
PARAMETER(X1PG_Ship_To_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Scheduled Ship Date = PAR.Scheduled Ship Date
X1PG_Scheduled_Ship_Date = PAR.Scheduled_Ship_Date;

// 1PG.Scheduled Delivery Date = PAR.Scheduled Delivery Date
X1PG_Requested_Delivery_Date = PAR.Requested_Delivery_Date;

// 1PG.Header Status = PAR.Header Status
X1PG_Header_Status = PAR.Header_Status;

// 1PG.USR Description = Condition name of 1PG.Header Status
X1PG_USR_Description = RTVCND(X1PG_Header_Status);

// 1PG.Event Code = PAR.Event Code
X1PG_Event_Code = PAR.Event_Code;

EXECUTE FUNCTION(RTV Event Types Desc.  RT) TYPE(RTVOBJ) FILE(OPEZREP)          AC1376302;
PARAMETER(X1PG_Event_Code);
PARAMETER(X1PG_USR_Description_New);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Credit Hold = PAR.Credit Hold
X1PG_Credit_Hold = PAR.Credit_Hold;

// 1PG.Production Hold = PAR.Production Hold
X1PG_Production_Hold = PAR.Production_Hold;

// 1PG.Load Plan Order = PAR.Load Plan Order
X1PG_Load_Plan_Order = PAR.Load_Plan_Order;

// 1PG.LTL Flag = PAR.LTL Flag
X1PG_LTL_Flag = PAR.LTL_Flag;

// 1PG.Load Type = PAR.Load Type
X1PG_Load_Type = PAR.Load_Type;

// 1PG.USR Desc. 10 = Condition name of 1PG.Load Type
X1PG_USR_Desc_10 = RTVCND(X1PG_Load_Type);

//?08/23/19 DN S15343-Populate 'Slot U/M'.
// 1PG.U/M - Load Scheduling USR = PAR.U/M - Load Scheduling USR
1PG.U/M - Load Scheduling USR = PAR.U_M_Load_Scheduling_USR;

// 1PG.U/M - Load Scheduling Dsc = Condition name of PAR.U/M - Load Scheduling USR
X1PG_U_M_Load_Scheduling_Dsc = RTVCND(PAR.U_M_Load_Scheduling_USR);

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Print Company Number header format
PRINT Company Number header format;

ENDIF;

//?USER: On print of detail format

EXECUTE FUNCTION(RTV Cust Name, Status  RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1260359;
PARAMETER(CUR.Ship_To_Customer);
PARAMETER(CUR.Ship_To_Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?E2468 RMC 2.19.2013 calc ddt using req dt tm and print it.
// Call program CLC Deadln Depart Dt  XF.
CALL PROGRAM(CLC Deadln Depart Dt  XF) ('POSCXFR');
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(DB1.Ship_To_City);
PARAMETER(DB1.Ship_To_State_Code);
PARAMETER(DB1.Requested_Delivery_Date);
PARAMETER(DB1.Requested_Delivery_Time);
PARAMETER(CUR.Deadline_Depart_Date);
PARAMETER(LCL.Deadline_Depart_Time_LH);

// CUR.Deadline Depart Time 4,0 = LCL.Deadline Depart Time LH / CON.100 *
CUR.Deadline_Depart_Time_40 = LCL.Deadline_Depart_Time_LH / 100;

//?Force req deliv date if it cant be calculated
CASE;

// IF CUR.Deadline Depart Date is not entered
IF CUR.Deadline_Depart_Date = *ZERO;

// CUR.Deadline Depart Date = DB1.Requested Delivery Date
CUR.Deadline_Depart_Date = DB1.Requested_Delivery_Date;

// CUR.Deadline Depart Time 4,0 = DB1.Requested Delivery Time
CUR.Deadline_Depart_Time_40 = DB1.Requested_Delivery_Time;

ENDIF;

//?08/23/19 DN S15343-Set Slot U/M.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Boxes Total Quantity = CON.*ZERO
LCL.Boxes_Total_Quantity = *ZERO;

EXECUTE FUNCTION(RTV UM/Whs Code,BX Qty RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1625244;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(1);
PARAMETER(CUR.U_M_Load_Scheduling_USR);
PARAMETER(LCL.Boxes_Total_Quantity);
{
 //?USER: Initialize routine

 // WRK.First Time Flag = CND.Yes
 WRK.First_Time_Flag = 'Y';

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?S17054 DN 04/08/21-Beyond this point, changed all 'U/M - Ordered'
 //?  to reference LCL Context instead of DB1.
 //?S17054 DN 04/08/21-Count Type 'Cases' (CS) as 'Boxes' (BX).
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.U/M - Ordered = DB1.U/M - Ordered
 LCL.U_M_Ordered = DB1.U_M_Ordered;

 CASE;

 // IF LCL.U/M - Ordered is Cases
 IF LCL.U_M_Ordered = 'CS';

 // LCL.U/M - Ordered = CND.EQ Boxes
 LCL.U_M_Ordered = 'BX';

 ENDIF;

 ENDIF;

 //?Accumulate the Box Quantity for slotting consideration  6/12/01
 CASE;

 // IF LCL.U/M - Ordered is EQ Boxes
 IF LCL.U_M_Ordered = 'BX';

 // PAR.Boxes Total Quantity = PAR.Boxes Total Quantity + DB1.Quantity Ordered
 PAR.Boxes_Total_Quantity = PAR.Boxes_Total_Quantity + DB1.Quantity_Ordered;

 ENDIF;

 CASE;

 // IF PAR.USR Unit of Measure is *Blank
 IF PAR.USR_Unit_of_Measure = *BLANK;

 // PAR.USR Unit of Measure = LCL.U/M - Ordered
 PAR.USR_Unit_of_Measure = LCL.U_M_Ordered;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.U/M - Ordered EQ PAR.USR Unit of Measure
 IF LCL.U_M_Ordered = PAR.USR_Unit_of_Measure;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Unit of Measure = CND.Mixed
 PAR.USR_Unit_of_Measure = 'MX';

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Chg MX to BX or CB
CASE;

// IF CUR.U/M - Load Scheduling USR is Mixed
IF CUR.U_M_Load_Scheduling_USR = 'MX';

CASE;

// IF LCL.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
IF LCL.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

// CUR.U/M - Load Scheduling USR = CND.Combo
CUR.U_M_Load_Scheduling_USR = 'CB';

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.U/M - Load Scheduling USR = CND.Box
CUR.U_M_Load_Scheduling_USR = 'BX';

ENDIF;

ENDIF;

ENDIF;

//?USER: Process after print of detail format

NXT.Weight_1_1_SUM = SUM(CUR.Order_Weight_Total);

//?USER: Print required level totals

CASE;

IF NEW Company_Number;
// CUR.Count USR = CUR.Weight 1.1            SUM / CON.42000 *
CUR.Count_USR = CUR.Weight_1_1_SUM / 42000;

// Print Company Number totals format
PRINT Company Number totals format;

ENDIF;

