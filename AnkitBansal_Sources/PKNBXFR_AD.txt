// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKNBXFR
// ?Date: 14.08.2025 Time: 02:52:15
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modifications and Comments
DO;

//?H16853 ISE 11/09/2020 - Recompiled due to change in Buy Order Number
ENDDO;

// PAR.TH Source Type = CND.Internal
PAR.TH_Source_Type = 'I';

EXECUTE FUNCTION(Utl Clc Internal NPPC RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1204976;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.TH_Source_Type);
PARAMETER(PAR.Date_From_USR);
PARAMETER(PAR.Date_To_USR);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.TH Kill Date GT PAR.Date To   USR
 IF DB1.TH_Kill_Date > PAR.Date_To_USR;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Calculate NPPC
 CASE;

 // IF DB1.TH Hog Class Type is Resale
 IF DB1.TH_Hog_Class_Type = 'R';

 //?Calculate NPPC
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Set Live Gross and Payment Gross to Zeros and all net's to zero
 DO;

 // WRK.TH Live Gross Amt = CON.*ZERO
 WRK.TH_Live_Gross_Amt = *ZERO;

 // WRK.Th Payment Net Amt = CON.*ZERO
 WRK.Th_Payment_Net_Amt = *ZERO;

 // WRK.TH LIve Net Amt = CON.*ZERO
 WRK.TH_LIve_Net_Amt = *ZERO;

 // WRK.TH Carcass Net Amt = CON.*ZERO
 WRK.TH_Carcass_Net_Amt = *ZERO;

 // WRK.TH Total Net WO Adds = CON.*ZERO
 WRK.TH_Total_Net_WO_Adds = *ZERO;

 // WRK.TH Accrual Amount = CON.*ZERO
 WRK.TH_Accrual_Amount = *ZERO;

 ENDDO;

 //?Create d/a
 //?MILES = zero
 EXECUTE FUNCTION(Clc a Tattoo Prod D/A RT) TYPE(RTVOBJ) FILE(PKBEREP)           AB1143314;
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TH_Purchase_Date);
 PARAMETER(DB1.TH_Group_Reference);
 PARAMETER(DB1.TH_Live_Purchase_UOM);
 PARAMETER(DB1.TH_Live_Purchase_Price);
 PARAMETER(DB1.TH_Live_Gross_Amt);
 PARAMETER(DB1.TH_LIve_Net_Amt);
 PARAMETER(DB1.TH_Resale_UOM);
 PARAMETER(DB1.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(DB1.TH_Pricing_Date);
 PARAMETER(DB1.TH_Resale_Spread_Sts);
 PARAMETER(DB1.TH_Dead_On_Arrival);
 PARAMETER(DB1.TH_Head_Received);
 PARAMETER(DB1.TH_Yard_Deads);
 PARAMETER(DB1.TH_Held_Over);
 PARAMETER(DB1.TH_Head_Condemned);
 PARAMETER(DB1.TH_Head_Killed);
 PARAMETER(DB1.TH_Head_Adds);
 PARAMETER(DB1.TH_Head_Accepted);
 PARAMETER(DB1.TH_Live_Wgt);
 PARAMETER(DB1.TH_Adj_Live_Wgt);
 PARAMETER(DB1.TH_Hot_Wgt);
 PARAMETER(DB1.TH_Tot_Loin_Eye_Depth);
 PARAMETER(DB1.TH_Tot_Backfat_Inches);
 PARAMETER(DB1.TH_Tot_Light_Reflectance);
 PARAMETER(DB1.TH_Avg_Live_Wgt);
 PARAMETER(DB1.TH_Avg_Hot_Wgt);
 PARAMETER(DB1.TH_Avg_Light_Reflectance);
 PARAMETER(DB1.TH_Avg_Lean_Percent);
 PARAMETER(DB1.TH_Avg_Loin_Eye_Depth);
 PARAMETER(DB1.TH_Avg_Backfat);
 PARAMETER(DB1.TH_Std_Yield_Percent);
 PARAMETER(DB1.TH_Actual_Yield);
 PARAMETER(DB1.TH_Yield_Difference);
 PARAMETER(DB1.TH_Recalc_Live_Wgt);
 PARAMETER(DB1.TH_CM_Market_Price);
 PARAMETER(DB1.TH_CM_Base_Mkt_Price);
 PARAMETER(DB1.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(DB1.TH_CM_Sort_Discount_Amt);
 PARAMETER(DB1.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(DB1.TH_CM_Base_Carcass_Value);
 PARAMETER(DB1.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(DB1.TH_CM_Carcass_Gross_Amt);
 PARAMETER(DB1.TH_Deduction_Amt);
 PARAMETER(DB1.TH_Total_Net_WO_Adds);
 PARAMETER(DB1.TH_Carcass_Net_Amt);
 PARAMETER(DB1.TH_Additions_Amt);
 PARAMETER(WRK.TH_Payment_Gross);
 PARAMETER(DB1.Th_Payment_Net_Amt);
 PARAMETER(DB1.TH_AP_Voucher_Document#);
 PARAMETER(DB1.TH_Freight_Amount);
 PARAMETER(DB1.TH_Accrual_Amount);
 PARAMETER(DB1.TH_Fixed_Cost_Amount);
 PARAMETER(DB1.TH_Payment_Sts);
 PARAMETER(DB1.TH_Header_Error_Sts);
 PARAMETER(DB1.TH_Detail_Error_Sts);
 PARAMETER(DB1.TH_Kill_Balancing_Sts);
 PARAMETER(DB1.TH_Bal_to_Kill_Gen);
 PARAMETER(DB1.TH_Commission_A_P_Voucher);
 PARAMETER(DB1.TH_Voucher_Payment_Date);
 PARAMETER(DB1.TH_User_Error_Override);
 PARAMETER(DB1.TH_Held_Over_Record);
 PARAMETER(DB1.TH_Sex);
 PARAMETER(DB1.TH_Held_Ovr_Completed_Dte);
 PARAMETER(DB1.TH_Commission_Paid_Date);
 PARAMETER(DB1.TH_Actual_Check_Date);
 PARAMETER(DB1.TH_Shipped_Weight);
 PARAMETER(DB1.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(DB1.TH_FFLI);
 PARAMETER(DB1.TH_Kill_Product_Value);
 PARAMETER(DB1.TH_Cut_Product_Value);
 PARAMETER(DB1.TH_Render_Product_Value);
 PARAMETER(DB1.TH_Head_Excluded);
 PARAMETER(DB1.TH_CM_Gross_Live_CWT);
 PARAMETER(DB1.TH_Payment_Type);
 PARAMETER(DB1.TH_Hog_Class_Type);
 PARAMETER(DB1.TH_VC_Gross_Value_HD);
 PARAMETER(DB1.TH_Head_EUT_KOA);
 PARAMETER(DB1.HC_Class_Code);
 PARAMETER(*ZERO);
 {
  //?USER: Process Data record

  //?Date 03/24/2004 slm - Add logic for TFM Release 01 for all Ded/Add
  //?                      to verify the accept date and the decline date
  //?                      before the creations of the D/A
  // WRK.Process Flag User = CND.Yes
  WRK.Process_Flag_User = 'Y';

  // WRK.Zero USR = CON.*ZERO
  WRK.Zero_USR = *ZERO;

  CASE;

  // IF DB1.PSD Accept Date GT WRK.Zero USR
  IF DB1.PSD_Accept_Date > WRK.Zero_USR;

  CASE;

  // IF PAR.TH Purchase Date LT DB1.PSD Accept Date
  IF PAR.TH_Purchase_Date < DB1.PSD_Accept_Date;

  // WRK.Process Flag User = CND.No
  WRK.Process_Flag_User = 'N';

  ENDIF;

  ENDIF;

  CASE;

  // IF DB1.PSD Decline Date GT WRK.Zero USR
  IF DB1.PSD_Decline_Date > WRK.Zero_USR;

  CASE;

  // IF PAR.TH Purchase Date GT DB1.PSD Decline Date
  IF PAR.TH_Purchase_Date > DB1.PSD_Decline_Date;

  // WRK.Process Flag User = CND.No
  WRK.Process_Flag_User = 'N';

  ENDIF;

  ENDIF;

  CASE;

  // IF WRK.Process Flag User is Yes
  IF WRK.Process_Flag_User = 'Y';

  EXECUTE FUNCTION(Clc Prd Ded/Add       Rt) TYPE(RTVOBJ) FILE(PKBBREP)           AB1143315;
  PARAMETER(DB1.DED_D_A_Code);
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(DB1.PSDP_Company_Number);
  PARAMETER(DB1.PSD_Variable_UOM);
  PARAMETER(DB1.PSD_Variable_Amount);
  PARAMETER(DB1.PSD_Varialbe_Amount_Sign);
  PARAMETER(DB1.PSD_Expense_Paid_By);
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.TH_Purchase_Date);
  PARAMETER(PAR.TH_Group_Reference);
  PARAMETER(PAR.TH_Live_Purchase_UOM);
  PARAMETER(PAR.TH_Live_Purchase_Price);
  PARAMETER(PAR.TH_Live_Gross_Amt);
  PARAMETER(PAR.TH_LIve_Net_Amt);
  PARAMETER(PAR.TH_Resale_UOM);
  PARAMETER(PAR.TH_Recalc_Live_Wgt_Yld);
  PARAMETER(PAR.TH_Pricing_Date);
  PARAMETER(PAR.TH_Resale_Spread_Sts);
  PARAMETER(PAR.TH_Dead_On_Arrival);
  PARAMETER(PAR.TH_Head_Received);
  PARAMETER(PAR.TH_Yard_Deads);
  PARAMETER(PAR.TH_Held_Over);
  PARAMETER(PAR.TH_Head_Condemned);
  PARAMETER(PAR.TH_Head_Killed);
  PARAMETER(PAR.TH_Head_Adds);
  PARAMETER(PAR.TH_Head_Accepted);
  PARAMETER(PAR.TH_Live_Wgt);
  PARAMETER(PAR.TH_Adj_Live_Wgt);
  PARAMETER(PAR.TH_Hot_Wgt);
  PARAMETER(PAR.TH_Tot_Loin_Eye_Depth);
  PARAMETER(PAR.TH_Tot_Backfat_Inches);
  PARAMETER(PAR.TH_Tot_Light_Reflectance);
  PARAMETER(PAR.TH_Avg_Live_Wgt);
  PARAMETER(PAR.TH_Avg_Hot_Wgt);
  PARAMETER(PAR.TH_Avg_Light_Reflectance);
  PARAMETER(PAR.TH_Avg_Lean_Percent);
  PARAMETER(PAR.TH_Avg_Loin_Eye_Depth);
  PARAMETER(PAR.TH_Avg_Backfat);
  PARAMETER(PAR.TH_Std_Yield_Percent);
  PARAMETER(PAR.TH_Actual_Yield);
  PARAMETER(PAR.TH_Yield_Difference);
  PARAMETER(PAR.TH_Recalc_Live_Wgt);
  PARAMETER(PAR.TH_CM_Market_Price);
  PARAMETER(PAR.TH_CM_Base_Mkt_Price);
  PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
  PARAMETER(PAR.TH_CM_Sort_Discount_Amt);
  PARAMETER(PAR.TH_CM_Yield_Gain_Loss_Amt);
  PARAMETER(PAR.TH_CM_Base_Carcass_Value);
  PARAMETER(PAR.TH_CM_LN_AddOn_Deduct_Amt);
  PARAMETER(PAR.TH_CM_Carcass_Gross_Amt);
  PARAMETER(PAR.TH_Deduction_Amt);
  PARAMETER(PAR.TH_Total_Net_WO_Adds);
  PARAMETER(PAR.TH_Carcass_Net_Amt);
  PARAMETER(PAR.TH_Additions_Amt);
  PARAMETER(PAR.TH_Payment_Gross);
  PARAMETER(PAR.Th_Payment_Net_Amt);
  PARAMETER(PAR.TH_AP_Voucher_Document#);
  PARAMETER(PAR.TH_Freight_Amount);
  PARAMETER(PAR.TH_Accrual_Amount);
  PARAMETER(PAR.TH_Fixed_Cost_Amount);
  PARAMETER(PAR.TH_Payment_Sts);
  PARAMETER(PAR.TH_Header_Error_Sts);
  PARAMETER(PAR.TH_Detail_Error_Sts);
  PARAMETER(PAR.TH_Kill_Balancing_Sts);
  PARAMETER(PAR.TH_Bal_to_Kill_Gen);
  PARAMETER(PAR.TH_Commission_A_P_Voucher);
  PARAMETER(PAR.TH_Voucher_Payment_Date);
  PARAMETER(PAR.TH_User_Error_Override);
  PARAMETER(PAR.TH_Held_Over_Record);
  PARAMETER(PAR.TH_Sex);
  PARAMETER(PAR.TH_Held_Ovr_Completed_Dte);
  PARAMETER(PAR.TH_Commission_Paid_Date);
  PARAMETER(PAR.TH_Actual_Check_Date);
  PARAMETER(PAR.TH_Shipped_Weight);
  PARAMETER(PAR.TH_Avg_Hot_Wgt_EXC_ADD);
  PARAMETER(PAR.TH_FFLI);
  PARAMETER(PAR.TH_Kill_Product_Value);
  PARAMETER(PAR.TH_Cut_Product_Value);
  PARAMETER(PAR.TH_Render_Product_Value);
  PARAMETER(PAR.TH_Head_Excluded);
  PARAMETER(PAR.TH_CM_Gross_Live_CWT);
  PARAMETER(PAR.TH_Payment_Type);
  PARAMETER(PAR.TH_Hog_Class_Type);
  PARAMETER(PAR.TH_VC_Gross_Value_HD);
  PARAMETER(PAR.TH_Head_EUT_KOA);
  PARAMETER(WRK.THP_Process_Code);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(PAR.PSM_Miles_to_Company);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(HPE063 Frt Exp/Accruals) TYPE(EXCINTFUN)                       AB1192166;
   {
    //?Execute internal function

    //?2/26/96  HPE063   Allow the expense for freight to be paid
    //?                  by either Seaboard(us) or the producer
    //?                  Allow the system to process accruals thru
    //?                  the General Ledger.
   }

   // WRK.Record was selected usr = CND.*NO
   WRK.Record_was_selected_usr = 'N';

   //?Valid selection on weither to create the record
   CASE;

   // IF DB1.DED Plant Deduction is Not Yes
   IF DB1.DED_Plant_Deduction = *BLANK/'N';

   // AND DB1.DED Fix/Var/Sys is Fixed
   AND ( DB1.DED_Fix_Var_Sys = 'F';

   // OR DB1.DED Fix/Var/Sys is Variable
   OR DB1.DED_Fix_Var_Sys = 'V' );

   CASE;

   // IF PAR.TH Hog Class Type is Resale
   IF ( PAR.TH_Hog_Class_Type = 'R';

   // AND DB1.DED Include Resale is Yes
   AND DB1.DED_Include_Resale = 'Y' );

   // OR PAR.TH Hog Class Type is Market
   OR ( PAR.TH_Hog_Class_Type = 'M';

   // AND DB1.DED Include Market is Yes
   AND DB1.DED_Include_Market = 'Y' );

   // OR PAR.TH Hog Class Type is Subject
   OR ( PAR.TH_Hog_Class_Type = 'S';

   // AND DB1.DED Include Subject is Yes
   AND DB1.DED_Include_Subject = 'Y' );

   // WRK.Record was selected usr = CND.*YES
   WRK.Record_was_selected_usr = 'Y';

   ENDIF;

   ENDIF;

   //?41404 slm add PC Contract code and PSC subcontract code
   EXECUTE FUNCTION(Rtv Buy Order Type) TYPE(RTVOBJ) FILE(PKAWCPP)                 AB1193262;
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.BOH_Buy_Order_Number);
   PARAMETER(WRK.BOH_Buy_Order_Type);
   PARAMETER(WRK.PC_Contract_Code);
   PARAMETER(WRK.PSC_Sub_Contract_Code);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Validate to create tattoo ded/add based on Buy Order Type
   CASE;

   // IF WRK.Record was selected usr is *YES
   IF WRK.Record_was_selected_usr = 'Y';

   CASE;

   // IF WRK.BOH Buy Order Type is Contract
   IF WRK.BOH_Buy_Order_Type = 'C';

   CASE;

   // IF DB1.DED Valid BO Type is Contract List
   IF DB1.DED_Valid_BO_Type = 'C'/'1'/'2'/*BLANK;

   //?Still the value of Yes
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Record was selected usr = CND.*NO
   WRK.Record_was_selected_usr = 'N';

   ENDIF;

   // IF WRK.BOH Buy Order Type is Internal
   IF WRK.BOH_Buy_Order_Type = 'I';

   CASE;

   // IF DB1.DED Valid BO Type is Internal List
   IF DB1.DED_Valid_BO_Type = '1'/*BLANK/'I'/'3';

   //?Still the value of Yes
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Record was selected usr = CND.*NO
   WRK.Record_was_selected_usr = 'N';

   ENDIF;

   // IF WRK.BOH Buy Order Type is Open Market
   IF WRK.BOH_Buy_Order_Type = 'O';

   CASE;

   // IF DB1.DED Valid BO Type is Open List
   IF DB1.DED_Valid_BO_Type = '2'/*BLANK/'O'/'3';

   //?Still the value of Yes
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Record was selected usr = CND.*NO
   WRK.Record_was_selected_usr = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   //?Create the Tattoo Ded/Add
   CASE;

   // IF WRK.Record was selected usr is *YES
   IF WRK.Record_was_selected_usr = 'Y';

   // WRK.THD Expense Type = CND.Other
   WRK.THD_Expense_Type = 'O';

   // WRK.THD Commission Deduction = CND.No
   WRK.THD_Commission_Deduction = 'N';

   CASE;

   // IF DB1.DED Commission Deduction is Yes
   IF DB1.DED_Commission_Deduction = 'Y';

   // WRK.THD Commission Deduction = CND.Yes
   WRK.THD_Commission_Deduction = 'Y';

   ENDIF;

   // WRK.THD Expense Paid by = PAR.PSD Expense Paid By
   WRK.THD_Expense_Paid_by = PAR.PSD_Expense_Paid_By;

   CASE;

   // IF DB1.DED Fix/Var/Sys is Fixed
   IF DB1.DED_Fix_Var_Sys = 'F';

   EXECUTE FUNCTION(Clc UOM Extension     IF) TYPE(EXCINTFUN)                      AB1143053;
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.TH_Purchase_Date);
   PARAMETER(PAR.TH_Dead_On_Arrival);
   PARAMETER(PAR.TH_Head_Received);
   PARAMETER(PAR.TH_Yard_Deads);
   PARAMETER(PAR.TH_Held_Over);
   PARAMETER(PAR.TH_Head_Condemned);
   PARAMETER(PAR.TH_Head_Killed);
   PARAMETER(PAR.TH_Live_Wgt);
   PARAMETER(PAR.TH_Hot_Wgt);
   PARAMETER(PAR.TH_Avg_Live_Wgt);
   PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
   PARAMETER(PAR.TH_Payment_Gross);
   PARAMETER(PAR.TH_Shipped_Weight);
   PARAMETER(PAR.TH_Head_EUT_KOA);
   PARAMETER(DB1.DED_Fixed_UOM);
   PARAMETER(DB1.DED_Fixed_Unit_Amt);
   PARAMETER(WRK.Trans_Extended_Amt_Usr);
   PARAMETER(DB1.DED_D_A_Code);
   PARAMETER(PAR.PSM_Miles_to_Company);
   {
    //?Execute internal function

    //?Extension
    CASE;

    // IF PAR.Trans UOM USR is Flat
    IF PAR.Trans_UOM_USR = 'FL';

    //?* * * * *   FLAT    * * * * *
    //?FLAT
    CASE;

    // IF PAR.Trans UOM USR is Flat
    IF PAR.Trans_UOM_USR = 'FL';

    // PAR.Trans Extended Amt Usr = PAR.Trans Unit Amt Usr * CON.1 *Rounded
    PAR.Trans_Extended_Amt_Usr = PAR.Trans_Unit_Amt_Usr * 1 'H';

    ENDIF;

    //?Extension
    // IF PAR.Trans UOM USR is Head UOM
    IF PAR.Trans_UOM_USR = 'DH'/'RH'/'YH'/'CH'/'KH'/'NH'/'DY'/'RX'/'HM'/'DE';

    //?* * * * *    HEAD   * * * * *
    //?HEAD
    CASE;

    // IF PAR.Trans UOM USR is Received Head
    IF PAR.Trans_UOM_USR = 'RH';

    // PAR.Trans Extended Amt Usr = PAR.TH Head Received * PAR.Trans Unit Amt Usr *Roun
    PAR.Trans_Extended_Amt_Usr = PAR.TH_Head_Received * PAR.Trans_Unit_Amt_Usr 'H';

    //?HEAD
    // IF PAR.Trans UOM USR is Received Hd less Yard Dd
    IF PAR.Trans_UOM_USR = 'RX';

    // WRK.Net Head Usr = PAR.TH Head Received - PAR.TH Yard Deads
    WRK.Net_Head_Usr = PAR.TH_Head_Received - PAR.TH_Yard_Deads;

    // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
    PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

    //?HEAD
    // IF PAR.Trans UOM USR is Killed Head
    IF PAR.Trans_UOM_USR = 'KH';

    // PAR.Trans Extended Amt Usr = PAR.TH Head Killed * PAR.Trans Unit Amt Usr *Rounde
    PAR.Trans_Extended_Amt_Usr = PAR.TH_Head_Killed * PAR.Trans_Unit_Amt_Usr 'H';

    //?HEAD
    // IF PAR.Trans UOM USR is Condemned Head
    IF PAR.Trans_UOM_USR = 'CH';

    // PAR.Trans Extended Amt Usr = PAR.TH Head Condemned * PAR.Trans Unit Amt Usr *Rou
    PAR.Trans_Extended_Amt_Usr = PAR.TH_Head_Condemned * PAR.Trans_Unit_Amt_Usr 'H';

    //?HEAD
    // IF PAR.Trans UOM USR is Yard Deads Head
    IF PAR.Trans_UOM_USR = 'YH';

    // PAR.Trans Extended Amt Usr = PAR.TH Yard Deads * PAR.Trans Unit Amt Usr *Rounded
    PAR.Trans_Extended_Amt_Usr = PAR.TH_Yard_Deads * PAR.Trans_Unit_Amt_Usr 'H';

    //?HEAD
    // IF PAR.Trans UOM USR is DOA Head
    IF PAR.Trans_UOM_USR = 'DH';

    // PAR.Trans Extended Amt Usr = PAR.TH Dead On Arrival * PAR.Trans Unit Amt Usr *Ro
    PAR.Trans_Extended_Amt_Usr = PAR.TH_Dead_On_Arrival * PAR.Trans_Unit_Amt_Usr 'H';

    //?HEAD
    // IF PAR.Trans UOM USR is Net Head
    IF PAR.Trans_UOM_USR = 'NH';

    // WRK.Net Head Usr = PAR.TH Head Received
    WRK.Net_Head_Usr = PAR.TH_Head_Received;

    // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Yard Deads
    WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Yard_Deads;

    // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Head Condemned
    WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Head_Condemned;

    // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
    PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

    //?HEAD
    // IF PAR.Trans UOM USR is DOA Head + Yard Dead Head
    IF PAR.Trans_UOM_USR = 'DY';

    // WRK.Net Head Usr = PAR.TH Dead On Arrival + PAR.TH Yard Deads
    WRK.Net_Head_Usr = PAR.TH_Dead_On_Arrival + PAR.TH_Yard_Deads;

    // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
    PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

    //?HEAD
    // IF PAR.Trans UOM USR is DOA HD + Yard Dead + EUT
    IF PAR.Trans_UOM_USR = 'DE';

    // WRK.Net Head Usr = PAR.TH Dead On Arrival + PAR.TH Yard Deads
    WRK.Net_Head_Usr = PAR.TH_Dead_On_Arrival + PAR.TH_Yard_Deads;

    // WRK.Net Head Usr = WRK.Net Head Usr + PAR.TH Head EUT/KOA
    WRK.Net_Head_Usr = WRK.Net_Head_Usr + PAR.TH_Head_EUT_KOA;

    // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
    PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

    //?HEAD
    // IF PAR.Trans UOM USR is Received Head /100 Miles
    IF PAR.Trans_UOM_USR = 'HM';

    // PAR.Trans Extended Amt Usr =       *
    PAR.Trans_Extended_Amt_Usr = ( PAR.PSM_Miles_to_Company * PAR.TH_Head_Killed 'H' ) * (
    PAR.Trans_Unit_Amt_Usr / 100 'H' ) 'H';

    ENDIF;

    //?Extension
    // IF PAR.Trans UOM USR is Weight UOM
    IF PAR.Trans_UOM_USR = 'CW'/'LW'/'NL'/'SW'/'LX'/'SX';

    //?* * * * *    WEIGHT   * * * * *
    //?WEIGHT
    CASE;

    // IF PAR.Trans UOM USR is Live Hundred Weight
    IF PAR.Trans_UOM_USR = 'LW';

    // Live hundred wgt
    PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Live_Wgt / 100 'H' ) * PAR.Trans_Unit_Amt_Usr 'H';

    //?WEIGHT
    // IF PAR.Trans UOM USR is LW less Yard Dead Wgt
    IF PAR.Trans_UOM_USR = 'LX';

    //? Calc wgt of yard dead based on Th avg live wgt
    // WRK.Yard dead weight      USR = PAR.TH Avg Live Wgt * PAR.TH Yard Deads *
    WRK.Yard_dead_weight_USR = PAR.TH_Avg_Live_Wgt * PAR.TH_Yard_Deads;

    //?  Subtract Yard Dead wgt from Live Wgt
    // WRK.Live Weight           USR = PAR.TH Live Wgt - WRK.Yard dead weight      USR
    WRK.Live_Weight_USR = PAR.TH_Live_Wgt - WRK.Yard_dead_weight_USR;

    // Live hundred wgt less Yd
    PAR.Trans_Extended_Amt_Usr = ( WRK.Live_Weight_USR / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
    'H';

    //?WEIGHT
    // IF PAR.Trans UOM USR is Carcass Hundred Weight
    IF PAR.Trans_UOM_USR = 'CW';

    // Carcass Hundred Wgt
    PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Hot_Wgt / 100 'H' ) * PAR.Trans_Unit_Amt_Usr 'H';

    //?WEIGHT
    // IF PAR.Trans UOM USR is Net Live Weight
    IF PAR.Trans_UOM_USR = 'NL';

    // WRK.Net Head Usr = PAR.TH Head Received
    WRK.Net_Head_Usr = PAR.TH_Head_Received;

    // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Yard Deads
    WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Yard_Deads;

    // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Head Condemned
    WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Head_Condemned;

    //?* Insert avg live weight
    // WRK.Net Live Weight Usr = WRK.Net Head Usr * PAR.TH Avg Live Wgt *
    WRK.Net_Live_Weight_Usr = WRK.Net_Head_Usr * PAR.TH_Avg_Live_Wgt;

    // Net Live Weight
    PAR.Trans_Extended_Amt_Usr = ( WRK.Net_Live_Weight_Usr / 100 'H' )
    * PAR.Trans_Unit_Amt_Usr 'H';

    //?WEIGHT
    // IF PAR.Trans UOM USR is Shipped Weight - Doa's
    IF PAR.Trans_UOM_USR = 'SW';

    //?  Calc Avg shipped wgt, then calc wgt of DOA'S
    //?This rule was defined on 01/14/97
    //?The Calculations for Avg Shipped Weights are
    //?Head Received should be the live hogs that walk across the scale
    //?Doa's should be the hogs that died either after we collected
    //?      or before we weighed them
    //?Avg Shipped Weight : Shipped Weight /(Head Received + Doa's)
    // WRK.Hd Cnt Org Ship Usr = PAR.TH Head Received + PAR.TH Dead On Arrival
    WRK.Hd_Cnt_Org_Ship_Usr = PAR.TH_Head_Received + PAR.TH_Dead_On_Arrival;

    CASE;

    // IF WRK.Hd Cnt Org Ship Usr is *Zeros
    IF WRK.Hd_Cnt_Org_Ship_Usr = *ZERO;

    // WRK.Avg Weight USR = CON.*ZERO
    WRK.Avg_Weight_USR = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Avg Weight USR = PAR.TH Shipped Weight / WRK.Hd Cnt Org Ship Usr *
    WRK.Avg_Weight_USR = PAR.TH_Shipped_Weight / WRK.Hd_Cnt_Org_Ship_Usr;

    ENDIF;

    // WRK.Doa's Avg Weight Usr = WRK.Avg Weight USR * PAR.TH Dead On Arrival *
    WRK.Doa_s_Avg_Weight_Usr = WRK.Avg_Weight_USR * PAR.TH_Dead_On_Arrival;

    //?  Subtract doa's from Shipped Wgt
    // WRK.Ship Wgt Tot Usr = PAR.TH Shipped Weight - WRK.Doa's Avg Weight Usr
    WRK.Ship_Wgt_Tot_Usr = PAR.TH_Shipped_Weight - WRK.Doa_s_Avg_Weight_Usr;

    // Shipped Weight Total Ext
    PAR.Trans_Extended_Amt_Usr = ( WRK.Ship_Wgt_Tot_Usr / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
    'H';

    //?WEIGHT
    // IF PAR.Trans UOM USR is SW - Doa's WT - Yrd Dd WT
    IF PAR.Trans_UOM_USR = 'SX';

    //?  Calc Avg shipped wgt, then calc wgt of DOA'S and Yard Deads
    //?This rule was defined on 01/14/97
    //?The Calculations for Avg Shipped Weights are
    //?Head Received should be the live hogs that walk across the scale
    //?Doa's should be the hogs that died either after we collected
    //?      or before we weighed them
    //?Avg Shipped Weight : Shipped Weight /(Head Received + Doa's)
    // WRK.Hd Cnt Org Ship Usr = PAR.TH Head Received + PAR.TH Dead On Arrival
    WRK.Hd_Cnt_Org_Ship_Usr = PAR.TH_Head_Received + PAR.TH_Dead_On_Arrival;

    CASE;

    // IF WRK.Hd Cnt Org Ship Usr is *Zeros
    IF WRK.Hd_Cnt_Org_Ship_Usr = *ZERO;

    // WRK.Avg Weight USR = CON.*ZERO
    WRK.Avg_Weight_USR = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Avg Weight USR = PAR.TH Shipped Weight / WRK.Hd Cnt Org Ship Usr *
    WRK.Avg_Weight_USR = PAR.TH_Shipped_Weight / WRK.Hd_Cnt_Org_Ship_Usr;

    ENDIF;

    // WRK.Yard dead weight      USR = WRK.Avg Weight USR * PAR.TH Yard Deads *
    WRK.Yard_dead_weight_USR = WRK.Avg_Weight_USR * PAR.TH_Yard_Deads;

    // WRK.Doa's Avg Weight Usr = WRK.Avg Weight USR * PAR.TH Dead On Arrival *
    WRK.Doa_s_Avg_Weight_Usr = WRK.Avg_Weight_USR * PAR.TH_Dead_On_Arrival;

    //?  Subtract Doa's and Subtract Yard Dead wgt from Shipped Wgt
    // WRK.Ship Wgt Tot Usr = PAR.TH Shipped Weight - WRK.Doa's Avg Weight Usr
    WRK.Ship_Wgt_Tot_Usr = PAR.TH_Shipped_Weight - WRK.Doa_s_Avg_Weight_Usr;

    // WRK.Ship Wgt Tot Usr = WRK.Ship Wgt Tot Usr - WRK.Yard dead weight      USR
    WRK.Ship_Wgt_Tot_Usr = WRK.Ship_Wgt_Tot_Usr - WRK.Yard_dead_weight_USR;

    // Shipped wgt less Yd
    PAR.Trans_Extended_Amt_Usr = ( WRK.Ship_Wgt_Tot_Usr / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
    'H';

    ENDIF;

    //?Extension
    // IF PAR.Trans UOM USR is Value UOM
    IF PAR.Trans_UOM_USR = 'GV'/'BD';

    //?* * * * *    VALUE    * * * * *
    //?VALUE
    CASE;

    // IF PAR.Trans UOM USR is Gross Hundred Value
    IF PAR.Trans_UOM_USR = 'GV';

    // Gross Hundred Value
    PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Payment_Gross / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
    'H';

    //?VALUE
    // IF PAR.Trans UOM USR is Carcass Hundred Weight
    IF PAR.Trans_UOM_USR = 'CW';

    // Carcass Hundred Value
    PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Hot_Wgt / 100 'H' ) * PAR.Trans_Unit_Amt_Usr 'H';

    //?VALUE
    // IF PAR.Trans UOM USR is Base Market Dollars
    IF PAR.Trans_UOM_USR = 'BD';

    // Call program Clc Base Mkt Dollars  XF.
    CALL PROGRAM(Clc Base Mkt Dollars  XF) ('PKBSE01');
    PARAMETER(PAR.BOH_Company_Number);
    PARAMETER(PAR.TH_Purchase_Date);
    PARAMETER(PAR.TH_Live_Wgt);
    PARAMETER(PAR.DED_D_A_Code);
    PARAMETER(WRK.Base_Mkt_Prc_Amt_Tot_USR);

    CASE;

    // IF WRK.Base Mkt Prc Amt Tot USR GE WRK.Zero USR
    IF WRK.Base_Mkt_Prc_Amt_Tot_USR >= WRK.Zero_USR;

    // Base Market Dollars
    PAR.Trans_Extended_Amt_Usr = ( WRK.Base_Mkt_Prc_Amt_Tot_USR / 100 'H' )
    * PAR.Trans_Unit_Amt_Usr 'H';

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Trans Extended Amt Usr = CON.*ZERO
    PAR.Trans_Extended_Amt_Usr = *ZERO;

    ENDIF;

    ENDIF;

    //?Extension
    // IF PAR.Trans UOM USR is Percent UOM
    IF PAR.Trans_UOM_USR = *BLANK;

    //?* * * * *    PERCENT   * * * * *
    //?PERCENT
    CASE;

    // IF PAR.Trans UOM USR is Percent of Gross Value
    IF PAR.Trans_UOM_USR = *BLANK;

    // Percent of Gross Value
    PAR.Trans_Extended_Amt_Usr = ( PAR.Trans_Unit_Amt_Usr / 100 'H' ) * PAR.TH_Payment_Gross
    'H';

    ENDIF;

    ENDIF;

   }

   CASE;

   // IF WRK.Trans Extended Amt Usr is Not Zeros
   IF WRK.Trans_Extended_Amt_Usr <> *ZERO;

   //?Date 03/24/2004 Slm -- Update the Deferred Payment in place of Blank
   EXECUTE FUNCTION(Create Tattoo Deduction) TYPE(CRTOBJ) FILE(PKCDCPP)            AB1107817;
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.BOH_Buy_Order_Number);
   PARAMETER(PAR.BOL_Load_Number);
   PARAMETER(PAR.TH_Tattoo_Number);
   PARAMETER(PAR.TH_Kill_Date);
   PARAMETER(DB1.DED_D_A_Code);
   PARAMETER(DB1.DED_Fixed_Unit_Amt);
   PARAMETER(WRK.Trans_Extended_Amt_Usr);
   PARAMETER(DB1.DED_Fixed_Unit_Amt_Sign);
   PARAMETER(DB1.DED_Fixed_UOM);
   PARAMETER('S');
   PARAMETER(DB1.DED_Gl_Code);
   PARAMETER(DB1.DED_Contra_Gl_Code);
   PARAMETER(WRK.Zero_USR);
   PARAMETER(PAR.TH_Payment_Sts);
   PARAMETER(WRK.THD_Expense_Paid_by);
   PARAMETER(WRK.THD_Expense_Type);
   PARAMETER(*BLANK);
   PARAMETER(WRK.THD_Commission_Deduction);
   PARAMETER(WRK.THD_Deferred_Payment);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER('A');
   PARAMETER(JOB.*JOB);
   PARAMETER(JOB.*PROGRAM);
   PARAMETER(JOB.*USER);
   PARAMETER(JOB.*Job_date);
   PARAMETER(JOB.*Job_time);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?Execute internal function

     // PAR.RS Record Status = CND.Active
     PAR.RS_Record_Status = 'A';

     // PAR.RS User Added = JOB.*USER
     PAR.RS_User_Added = JOB.*USER;

     // PAR.RS Date Added = JOB.*Job date
     PAR.RS_Date_Added = JOB.*Job_date;

     // PAR.RS Time Added = JOB.*Job time
     PAR.RS_Time_Added = JOB.*Job_time;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

    }

   }

   CASE;

   // IF WRK.THD Commission Deduction is Yes
   IF WRK.THD_Commission_Deduction = 'Y';

   EXECUTE FUNCTION(Rtv/Chg Commission StsRT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1213004;
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.BOH_Buy_Order_Number);
   PARAMETER(PAR.BOL_Load_Number);
   PARAMETER(PAR.TH_Tattoo_Number);
   PARAMETER(PAR.TH_Kill_Date);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER('C');
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(Chg Commission Sts/Dt CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1213006;
    PARAMETER(DB1.BOH_Company_Number);
    PARAMETER(DB1.BOH_Buy_Order_Number);
    PARAMETER(DB1.BOL_Load_Number);
    PARAMETER(DB1.TH_Tattoo_Number);
    PARAMETER(DB1.TH_Kill_Date);
    PARAMETER(PAR.TH_Commission_A_P_Voucher);
    PARAMETER(PAR.TH_Commission_Paid_Date);
    PARAMETER(PAR.TH_Commission_Status);
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
   }

   ENDIF;

   ENDIF;

   // IF DB1.DED Fix/Var/Sys is Variable
   IF DB1.DED_Fix_Var_Sys = 'V';

   //?Create the D/A for Special Proc and Normal Proc
   CASE;

   // IF DB1.DED Prdcr Special Proc NE WRK.Blank USR
   IF DB1.DED_Prdcr_Special_Proc <> WRK.Blank_USR;

   EXECUTE FUNCTION(Clc D/A f/Prdcr Spcl  IF) TYPE(EXCINTFUN)                      AB1186548;
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.BOH_Buy_Order_Number);
   PARAMETER(PAR.BOL_Load_Number);
   PARAMETER(PAR.TH_Tattoo_Number);
   PARAMETER(PAR.TH_Kill_Date);
   PARAMETER(DB1.DED_D_A_Code);
   PARAMETER(DB1.DED_Gl_Code);
   PARAMETER(DB1.DED_Contra_Gl_Code);
   PARAMETER(PAR.TH_Payment_Sts);
   PARAMETER(WRK.THD_Expense_Paid_by);
   PARAMETER(WRK.THD_Expense_Type);
   PARAMETER(DB1.DED_Prdcr_Special_Proc);
   PARAMETER(PAR.PSD_Variable_UOM);
   PARAMETER(PAR.TH_Purchase_Date);
   PARAMETER(PAR.TH_Live_Purchase_UOM);
   PARAMETER(PAR.TH_Live_Purchase_Price);
   PARAMETER(PAR.TH_Dead_On_Arrival);
   PARAMETER(PAR.TH_Head_Received);
   PARAMETER(PAR.TH_Yard_Deads);
   PARAMETER(PAR.TH_Held_Over);
   PARAMETER(PAR.TH_Head_Condemned);
   PARAMETER(PAR.TH_Head_Killed);
   PARAMETER(PAR.TH_Live_Wgt);
   PARAMETER(PAR.TH_Hot_Wgt);
   PARAMETER(PAR.TH_Avg_Live_Wgt);
   PARAMETER(PAR.TH_CM_Market_Price);
   PARAMETER(PAR.TH_CM_Base_Mkt_Price);
   PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
   PARAMETER(PAR.TH_Payment_Gross);
   PARAMETER(PAR.TH_Held_Over_Record);
   PARAMETER(PAR.TH_Shipped_Weight);
   PARAMETER(PAR.TH_Payment_Type);
   PARAMETER(PAR.TH_VC_Gross_Value_HD);
   PARAMETER(PAR.TH_Head_EUT_KOA);
   PARAMETER(PAR.PSD_Varialbe_Amount_Sign);
   PARAMETER(WRK.PC_Contract_Code);
   PARAMETER(WRK.PSC_Sub_Contract_Code);
   {
    //?Execute internal function

    EXECUTE FUNCTION(HPE094) TYPE(EXCINTFUN)                                        AB1194665;
    //?Insurance Reimbursement Hd calculation
    CASE;

    // IF PAR.DED Prdcr Special Proc is Insurance Reimbursement
    IF PAR.DED_Prdcr_Special_Proc = 'I';

    //?Retrieve Reimb. hd total for paid tattoos on the BOL
    EXECUTE FUNCTION(Rtv BOL Reimb hd sum  RT) TYPE(RTVOBJ) FILE(PKCDCPP)           AB1186459;
    PARAMETER(PAR.BOH_Company_Number);
    PARAMETER(PAR.BOH_Buy_Order_Number);
    PARAMETER(PAR.BOL_Load_Number);
    PARAMETER(WRK.Re_imbursement_head_totl);
    {
     //?USER: Initialize routine

     // PAR.Re-imbursement head totl = WRK.Zero USR
     PAR.Re_imbursement_head_totl = WRK.Zero_USR;

     //?USER: Process Data record

     // PAR.Re-imbursement head totl = PAR.Re-imbursement head totl + DB1.THD Re-imburse
     PAR.Re_imbursement_head_totl = PAR.Re_imbursement_head_totl
     + DB1.THD_Re_imbursement_Head;

    }

    // WRK.Re-imbursement hd NEW USR = CON.*ZERO
    WRK.Re_imbursement_hd_NEW_USR = *ZERO;

    // WRK.Re-imbursement Price  USR = CON.*ZERO
    WRK.Re_imbursement_Price_USR = *ZERO;

    // WRK.Re-imbursement Wgt    USR = CON.*ZERO
    WRK.Re_imbursement_Wgt_USR = *ZERO;

    //?Move the correct head into work field to calc head to be paid full/half
    CASE;

    // IF PAR.PSD Variable UOM is Head UOM
    IF PAR.PSD_Variable_UOM = 'DH'/'RH'/'YH'/'CH'/'KH'/'NH'/'DY'/'RX'/'HM'/'DE';

    CASE;

    // IF PAR.PSD Variable UOM is Condemned Head
    IF PAR.PSD_Variable_UOM = 'CH';

    // WRK.Re-imbursement hd NEW USR = PAR.TH Head Condemned
    WRK.Re_imbursement_hd_NEW_USR = PAR.TH_Head_Condemned;

    // IF PAR.PSD Variable UOM is DOA Head
    IF PAR.PSD_Variable_UOM = 'DH';

    // WRK.Re-imbursement hd NEW USR = PAR.TH Dead On Arrival
    WRK.Re_imbursement_hd_NEW_USR = PAR.TH_Dead_On_Arrival;

    // IF PAR.PSD Variable UOM is Yard Deads Head
    IF PAR.PSD_Variable_UOM = 'YH';

    // WRK.Re-imbursement hd NEW USR = PAR.TH Yard Deads
    WRK.Re_imbursement_hd_NEW_USR = PAR.TH_Yard_Deads;

    // IF PAR.PSD Variable UOM is DOA Head + Yard Dead Head
    IF PAR.PSD_Variable_UOM = 'DY';

    // WRK.Re-imbursement hd NEW USR = PAR.TH Yard Deads + PAR.TH Dead On Arrival
    WRK.Re_imbursement_hd_NEW_USR = PAR.TH_Yard_Deads + PAR.TH_Dead_On_Arrival;

    // IF PAR.PSD Variable UOM is DOA HD + Yard Dead + EUT
    IF PAR.PSD_Variable_UOM = 'DE';

    // WRK.Re-imbursement hd NEW USR = PAR.TH Yard Deads + PAR.TH Dead On Arrival
    WRK.Re_imbursement_hd_NEW_USR = PAR.TH_Yard_Deads + PAR.TH_Dead_On_Arrival;

    // WRK.Re-imbursement hd NEW USR = WRK.Re-imbursement hd NEW USR + PAR.TH Head EUT/KOA
    WRK.Re_imbursement_hd_NEW_USR = WRK.Re_imbursement_hd_NEW_USR + PAR.TH_Head_EUT_KOA;

    // IF PAR.PSD Variable UOM is Killed Head
    IF PAR.PSD_Variable_UOM = 'KH';

    // WRK.Re-imbursement hd NEW USR = PAR.TH Head Killed
    WRK.Re_imbursement_hd_NEW_USR = PAR.TH_Head_Killed;

    // IF PAR.PSD Variable UOM is Net Head
    IF PAR.PSD_Variable_UOM = 'NH';

    // WRK.Net Head Usr = PAR.TH Head Received
    WRK.Net_Head_Usr = PAR.TH_Head_Received;

    // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Yard Deads
    WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Yard_Deads;

    // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Head Condemned
    WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Head_Condemned;

    ENDIF;

    ENDIF;

    //?Move the correct Price and Wgt into work fields
    CASE;

    // IF PAR.THD Payment Sts is Live anything
    IF PAR.THD_Payment_Sts = 'ML'/'PL'/'NL'/'SL'/'IL';

    // WRK.Re-imbursement Price  USR = PAR.TH Live Purchase Price
    WRK.Re_imbursement_Price_USR = PAR.TH_Live_Purchase_Price;

    CASE;

    // IF PAR.TH Live Purchase UOM is Shipped Weight List
    IF PAR.TH_Live_Purchase_UOM = 'SW'/'SX';

    //?This rule was defined on 01/14/97
    //?The Calculations for Avg Shipped Weights are
    //?Head Received should be the live hogs that walk across the scale
    //?Doa's should be the hogs that died either after we collected
    //?      or before we weighed them
    //?Avg Shipped Weight : Shipped Weight /(Head Received + Doa's)
    // WRK.Hd Cnt Org Ship Usr = PAR.TH Head Received + PAR.TH Dead On Arrival
    WRK.Hd_Cnt_Org_Ship_Usr = PAR.TH_Head_Received + PAR.TH_Dead_On_Arrival;

    CASE;

    // IF WRK.Hd Cnt Org Ship Usr is Not Zero
    IF WRK.Hd_Cnt_Org_Ship_Usr <> *ZERO;

    // WRK.Re-imbursement Wgt    USR = PAR.TH Shipped Weight / WRK.Hd Cnt Org Ship Usr
    WRK.Re_imbursement_Wgt_USR = PAR.TH_Shipped_Weight / WRK.Hd_Cnt_Org_Ship_Usr;

    ENDIF;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Re-imbursement Wgt    USR = PAR.TH Avg Live Wgt
    WRK.Re_imbursement_Wgt_USR = PAR.TH_Avg_Live_Wgt;

    ENDIF;

    //?Move the correct Price and Wgt into work fields
    // IF PAR.THD Payment Sts is Carcass anything
    IF PAR.THD_Payment_Sts = 'PC'/'NC'/'SC'/'IC';

    // WRK.Re-imbursement Wgt    USR = PAR.TH Avg Live Wgt
    WRK.Re_imbursement_Wgt_USR = PAR.TH_Avg_Live_Wgt;

    EXECUTE FUNCTION(Rtv comm grp/OMS Uom   IF) TYPE(EXCINTFUN)                     AB1217473;
    PARAMETER(PAR.BOH_Company_Number);
    PARAMETER(PAR.BOH_Buy_Order_Number);
    PARAMETER(PAR.Pricing_UOM_USR);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Comm/Group        RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1217474;
     PARAMETER(PAR.BOH_Company_Number);
     PARAMETER(PAR.BOH_Buy_Order_Number);
     PARAMETER(PAR.BOH_Commodity_Market_Code);
     PARAMETER(PAR.BOH_Commodity_Price_Group);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

      QUIT;

     }

     // Call program Rtv Commod Group U/M  XF.
     CALL PROGRAM(Rtv Commod Group U/M  XF) ('PDUVXFR');
     PARAMETER(PAR.BOH_Commodity_Price_Group);
     PARAMETER(PAR.Pricing_UOM_USR);

    }

    CASE;

    // IF PAR.Pricing UOM USR is Carcass Hundred Weight
    IF PAR.Pricing_UOM_USR = 'CW';

    //?Convert the Meat price to a Live Price
    // WRK.Re-imbursement Price  USR = CON..74 * PAR.TH CM Base Mkt Price *
    WRK.Re_imbursement_Price_USR = .74 * PAR.TH_CM_Base_Mkt_Price;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Re-imbursement Price  USR = PAR.TH CM Base Mkt Price
    WRK.Re_imbursement_Price_USR = PAR.TH_CM_Base_Mkt_Price;

    ENDIF;

    ENDIF;

    //?Calculate if there are Head and the limit hasnt already been reached.
    CASE;

    // IF WRK.Re-imbursement hd NEW USR is Greater than 0
    IF WRK.Re_imbursement_hd_NEW_USR > *ZERO;

    // AND WRK.Re-imbursement head totl is Less than upper limit 4
    AND WRK.Re_imbursement_head_totl < 4;

    // WRK.Re-imbursement full   USR = CON.*ZERO
    WRK.Re_imbursement_full_USR = *ZERO;

    // WRK.Re-imbursement half   USR = CON.*ZERO
    WRK.Re_imbursement_half_USR = *ZERO;

    // WRK.Trans Extended Amt Usr = CON.*ZERO
    WRK.Trans_Extended_Amt_Usr = *ZERO;

    // WRK.Trans Unit Amt Usr = CON.*ZERO
    WRK.Trans_Unit_Amt_Usr = *ZERO;

    //?Reduce the Tattoos head count as head are accumed either full or half.
    // DOW WRK.Re-imbursement hd NEW USR is Greater than 0
    DOW WRK.Re_imbursement_hd_NEW_USR > *ZERO;

    // WRK.Re-imbursement hd NEW USR = WRK.Re-imbursement hd NEW USR - CON.1
    WRK.Re_imbursement_hd_NEW_USR = WRK.Re_imbursement_hd_NEW_USR - 1;

    // WRK.Re-imbursement head totl = WRK.Re-imbursement head totl + CON.1
    WRK.Re_imbursement_head_totl = WRK.Re_imbursement_head_totl + 1;

    //?Accum hd to be paid full and head to be paid half value.
    CASE;

    // IF WRK.Re-imbursement head totl is Less than/eq full limit 2
    IF WRK.Re_imbursement_head_totl <= 4;

    // WRK.Re-imbursement full   USR = WRK.Re-imbursement full   USR + CON.1
    WRK.Re_imbursement_full_USR = WRK.Re_imbursement_full_USR + 1;

    //?Accum hd to be paid full and head to be paid half value.
    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF WRK.Re-imbursement head totl is Less than/eq half limit 4
    IF WRK.Re_imbursement_head_totl <= *ZERO;

    // WRK.Re-imbursement half   USR = WRK.Re-imbursement half   USR + CON.1
    WRK.Re_imbursement_half_USR = WRK.Re_imbursement_half_USR + 1;

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Fall-out because the limit has been reached.
    // WRK.Re-imbursement hd NEW USR = CON.*ZERO
    WRK.Re_imbursement_hd_NEW_USR = *ZERO;

    ENDIF;

    ENDIF;

    ENDDO;

    CASE;

    // IF WRK.Re-imbursement full   USR is Greater than 0
    IF WRK.Re_imbursement_full_USR > *ZERO;

    // Compute: Paid Full value
    WRK.Trans_Extended_Amt_Usr = ( WRK.Re_imbursement_Price_USR * (
    WRK.Re_imbursement_Wgt_USR / 100 ) 'H' ) * WRK.Re_imbursement_full_USR;

    ENDIF;

    CASE;

    // IF WRK.Re-imbursement half   USR is Greater than 0
    IF WRK.Re_imbursement_half_USR > *ZERO;

    // Compute: Paid Half value
    WRK.Trans_Unit_Amt_Usr = ( ( WRK.Re_imbursement_Price_USR * ( WRK.Re_imbursement_Wgt_USR
    / 100 ) 'H' ) / 2 ) * WRK.Re_imbursement_half_USR;

    //?Add calc'd half value to calc'd full value
    // WRK.Trans Extended Amt Usr = WRK.Trans Extended Amt Usr + WRK.Trans Unit Amt Usr
    WRK.Trans_Extended_Amt_Usr = WRK.Trans_Extended_Amt_Usr + WRK.Trans_Unit_Amt_Usr;

    ENDIF;

    //?Add calc'd half hd & calc'd full hd  to total re-imb hd for new rcd
    // WRK.THD Re-imbursement Head = WRK.Re-imbursement full   USR + WRK.Re-imbursement
    WRK.THD_Re_imbursement_Head = WRK.Re_imbursement_full_USR + WRK.Re_imbursement_half_USR;

    CASE;

    // IF WRK.Trans Extended Amt Usr NE WRK.Zero USR
    IF WRK.Trans_Extended_Amt_Usr <> WRK.Zero_USR;

    EXECUTE FUNCTION(Create Tattoo Deduction) TYPE(CRTOBJ) FILE(PKCDCPP)            AB1107817;
    PARAMETER(PAR.BOH_Company_Number);
    PARAMETER(PAR.BOH_Buy_Order_Number);
    PARAMETER(PAR.BOL_Load_Number);
    PARAMETER(PAR.TH_Tattoo_Number);
    PARAMETER(PAR.TH_Kill_Date);
    PARAMETER(PAR.DED_D_A_Code);
    PARAMETER(WRK.Re_imbursement_Price_USR);
    PARAMETER(WRK.Trans_Extended_Amt_Usr);
    PARAMETER(PAR.PSD_Varialbe_Amount_Sign);
    PARAMETER(PAR.PSD_Variable_UOM);
    PARAMETER('S');
    PARAMETER(PAR.THD_GL_Code);
    PARAMETER(PAR.THD_Contra_Gl_Code);
    PARAMETER(WRK.THD_Re_imbursement_Head);
    PARAMETER(PAR.THD_Payment_Sts);
    PARAMETER(PAR.THD_Expense_Paid_by);
    PARAMETER(PAR.THD_Expense_Type);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER('A');
    PARAMETER(JOB.*JOB);
    PARAMETER(JOB.*PROGRAM);
    PARAMETER(JOB.*USER);
    PARAMETER(JOB.*Job_date);
    PARAMETER(JOB.*Job_time);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
     PARAMETER(DB1.RS_Record_Status);
     PARAMETER(DB1.RS_Job);
     PARAMETER(DB1.RS_Program);
     PARAMETER(DB1.RS_User_Added);
     PARAMETER(DB1.RS_Date_Added);
     PARAMETER(DB1.RS_Time_Added);
     {
      //?Execute internal function

      // PAR.RS Record Status = CND.Active
      PAR.RS_Record_Status = 'A';

      // PAR.RS User Added = JOB.*USER
      PAR.RS_User_Added = JOB.*USER;

      // PAR.RS Date Added = JOB.*Job date
      PAR.RS_Date_Added = JOB.*Job_date;

      // PAR.RS Time Added = JOB.*Job time
      PAR.RS_Time_Added = JOB.*Job_time;

      // PAR.RS Program = JOB.*PROGRAM
      PAR.RS_Program = JOB.*PROGRAM;

      // PAR.RS Job = JOB.*JOB
      PAR.RS_Job = JOB.*JOB;

     }

    }

    ENDIF;

    ENDIF;

    //?Insurance Reimbursement Hd calculation
    // IF PAR.DED Prdcr Special Proc is Yard Dead Reimbursement
    IF PAR.DED_Prdcr_Special_Proc = 'Y';

    //?If the Tattoo is hold over.
    CASE;

    // IF PAR.TH Held Over Record is Yes
    IF PAR.TH_Held_Over_Record = 'Y';

    // AND PAR.TH Yard Deads is Not Zero
    AND PAR.TH_Yard_Deads <> *ZERO;

    EXECUTE FUNCTION(Rtv Held Over KillDts RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1233926;
    PARAMETER(PAR.BOH_Company_Number);
    PARAMETER(PAR.BOH_Buy_Order_Number);
    PARAMETER(PAR.BOL_Load_Number);
    PARAMETER(PAR.TH_Tattoo_Number);
    PARAMETER(PAR.TH_Kill_Date);
    PARAMETER(LCL.Kill_Date_Usr);
    {
     //?USER: Process Data record

     CASE;

     // IF DB1.TH Kill Date NE PAR.Kill Date 1 Usr
     IF DB1.TH_Kill_Date <> PAR.Kill_Date_1_Usr;

     // PAR.Kill Date Usr = DB1.TH Kill Date
     PAR.Kill_Date_Usr = DB1.TH_Kill_Date;

     QUIT;

     ENDIF;

    }

    // LCL.Held Over Days USR = PAR.TH Kill Date - LCL.Kill Date Usr *DAYS
    LCL.Held_Over_Days_USR = DURATION(PAR.TH_Kill_Date LCL.Kill_Date_Usr 'DY' 1111111 'NONE'
    'N' 1);

    CASE;

    // IF LCL.Held Over Days USR is GT 1
    IF LCL.Held_Over_Days_USR > 1;

    //?Do not send in miles, this is yard reim.
    EXECUTE FUNCTION(Clc UOM Extension     IF) TYPE(EXCINTFUN)                      AB1143053;
    PARAMETER(PAR.BOH_Company_Number);
    PARAMETER(PAR.TH_Purchase_Date);
    PARAMETER(PAR.TH_Dead_On_Arrival);
    PARAMETER(PAR.TH_Head_Received);
    PARAMETER(PAR.TH_Yard_Deads);
    PARAMETER(PAR.TH_Held_Over);
    PARAMETER(PAR.TH_Head_Condemned);
    PARAMETER(PAR.TH_Head_Killed);
    PARAMETER(PAR.TH_Live_Wgt);
    PARAMETER(PAR.TH_Hot_Wgt);
    PARAMETER(PAR.TH_Avg_Live_Wgt);
    PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
    PARAMETER(PAR.TH_Payment_Gross);
    PARAMETER(PAR.TH_Shipped_Weight);
    PARAMETER(PAR.TH_Head_EUT_KOA);
    PARAMETER(PAR.PSD_Variable_UOM);
    PARAMETER(PAR.TH_VC_Gross_Value_HD);
    PARAMETER(LCL.Trans_Extended_Amt_Usr);
    PARAMETER(PAR.DED_D_A_Code);
    PARAMETER(*ZERO);
    {
     //?Execute internal function

     //?Extension
     CASE;

     // IF PAR.Trans UOM USR is Flat
     IF PAR.Trans_UOM_USR = 'FL';

     //?* * * * *   FLAT    * * * * *
     //?FLAT
     CASE;

     // IF PAR.Trans UOM USR is Flat
     IF PAR.Trans_UOM_USR = 'FL';

     // PAR.Trans Extended Amt Usr = PAR.Trans Unit Amt Usr * CON.1 *Rounded
     PAR.Trans_Extended_Amt_Usr = PAR.Trans_Unit_Amt_Usr * 1 'H';

     ENDIF;

     //?Extension
     // IF PAR.Trans UOM USR is Head UOM
     IF PAR.Trans_UOM_USR = 'DH'/'RH'/'YH'/'CH'/'KH'/'NH'/'DY'/'RX'/'HM'/'DE';

     //?* * * * *    HEAD   * * * * *
     //?HEAD
     CASE;

     // IF PAR.Trans UOM USR is Received Head
     IF PAR.Trans_UOM_USR = 'RH';

     // PAR.Trans Extended Amt Usr = PAR.TH Head Received * PAR.Trans Unit Amt Usr *Roun
     PAR.Trans_Extended_Amt_Usr = PAR.TH_Head_Received * PAR.Trans_Unit_Amt_Usr 'H';

     //?HEAD
     // IF PAR.Trans UOM USR is Received Hd less Yard Dd
     IF PAR.Trans_UOM_USR = 'RX';

     // WRK.Net Head Usr = PAR.TH Head Received - PAR.TH Yard Deads
     WRK.Net_Head_Usr = PAR.TH_Head_Received - PAR.TH_Yard_Deads;

     // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
     PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

     //?HEAD
     // IF PAR.Trans UOM USR is Killed Head
     IF PAR.Trans_UOM_USR = 'KH';

     // PAR.Trans Extended Amt Usr = PAR.TH Head Killed * PAR.Trans Unit Amt Usr *Rounde
     PAR.Trans_Extended_Amt_Usr = PAR.TH_Head_Killed * PAR.Trans_Unit_Amt_Usr 'H';

     //?HEAD
     // IF PAR.Trans UOM USR is Condemned Head
     IF PAR.Trans_UOM_USR = 'CH';

     // PAR.Trans Extended Amt Usr = PAR.TH Head Condemned * PAR.Trans Unit Amt Usr *Rou
     PAR.Trans_Extended_Amt_Usr = PAR.TH_Head_Condemned * PAR.Trans_Unit_Amt_Usr 'H';

     //?HEAD
     // IF PAR.Trans UOM USR is Yard Deads Head
     IF PAR.Trans_UOM_USR = 'YH';

     // PAR.Trans Extended Amt Usr = PAR.TH Yard Deads * PAR.Trans Unit Amt Usr *Rounded
     PAR.Trans_Extended_Amt_Usr = PAR.TH_Yard_Deads * PAR.Trans_Unit_Amt_Usr 'H';

     //?HEAD
     // IF PAR.Trans UOM USR is DOA Head
     IF PAR.Trans_UOM_USR = 'DH';

     // PAR.Trans Extended Amt Usr = PAR.TH Dead On Arrival * PAR.Trans Unit Amt Usr *Ro
     PAR.Trans_Extended_Amt_Usr = PAR.TH_Dead_On_Arrival * PAR.Trans_Unit_Amt_Usr 'H';

     //?HEAD
     // IF PAR.Trans UOM USR is Net Head
     IF PAR.Trans_UOM_USR = 'NH';

     // WRK.Net Head Usr = PAR.TH Head Received
     WRK.Net_Head_Usr = PAR.TH_Head_Received;

     // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Yard Deads
     WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Yard_Deads;

     // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Head Condemned
     WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Head_Condemned;

     // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
     PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

     //?HEAD
     // IF PAR.Trans UOM USR is DOA Head + Yard Dead Head
     IF PAR.Trans_UOM_USR = 'DY';

     // WRK.Net Head Usr = PAR.TH Dead On Arrival + PAR.TH Yard Deads
     WRK.Net_Head_Usr = PAR.TH_Dead_On_Arrival + PAR.TH_Yard_Deads;

     // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
     PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

     //?HEAD
     // IF PAR.Trans UOM USR is DOA HD + Yard Dead + EUT
     IF PAR.Trans_UOM_USR = 'DE';

     // WRK.Net Head Usr = PAR.TH Dead On Arrival + PAR.TH Yard Deads
     WRK.Net_Head_Usr = PAR.TH_Dead_On_Arrival + PAR.TH_Yard_Deads;

     // WRK.Net Head Usr = WRK.Net Head Usr + PAR.TH Head EUT/KOA
     WRK.Net_Head_Usr = WRK.Net_Head_Usr + PAR.TH_Head_EUT_KOA;

     // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
     PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

     //?HEAD
     // IF PAR.Trans UOM USR is Received Head /100 Miles
     IF PAR.Trans_UOM_USR = 'HM';

     // PAR.Trans Extended Amt Usr =       *
     PAR.Trans_Extended_Amt_Usr = ( PAR.PSM_Miles_to_Company * PAR.TH_Head_Killed 'H' ) * (
     PAR.Trans_Unit_Amt_Usr / 100 'H' ) 'H';

     ENDIF;

     //?Extension
     // IF PAR.Trans UOM USR is Weight UOM
     IF PAR.Trans_UOM_USR = 'CW'/'LW'/'NL'/'SW'/'LX'/'SX';

     //?* * * * *    WEIGHT   * * * * *
     //?WEIGHT
     CASE;

     // IF PAR.Trans UOM USR is Live Hundred Weight
     IF PAR.Trans_UOM_USR = 'LW';

     // Live hundred wgt
     PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Live_Wgt / 100 'H' ) * PAR.Trans_Unit_Amt_Usr 'H';

     //?WEIGHT
     // IF PAR.Trans UOM USR is LW less Yard Dead Wgt
     IF PAR.Trans_UOM_USR = 'LX';

     //? Calc wgt of yard dead based on Th avg live wgt
     // WRK.Yard dead weight      USR = PAR.TH Avg Live Wgt * PAR.TH Yard Deads *
     WRK.Yard_dead_weight_USR = PAR.TH_Avg_Live_Wgt * PAR.TH_Yard_Deads;

     //?  Subtract Yard Dead wgt from Live Wgt
     // WRK.Live Weight           USR = PAR.TH Live Wgt - WRK.Yard dead weight      USR
     WRK.Live_Weight_USR = PAR.TH_Live_Wgt - WRK.Yard_dead_weight_USR;

     // Live hundred wgt less Yd
     PAR.Trans_Extended_Amt_Usr = ( WRK.Live_Weight_USR / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
     'H';

     //?WEIGHT
     // IF PAR.Trans UOM USR is Carcass Hundred Weight
     IF PAR.Trans_UOM_USR = 'CW';

     // Carcass Hundred Wgt
     PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Hot_Wgt / 100 'H' ) * PAR.Trans_Unit_Amt_Usr 'H';

     //?WEIGHT
     // IF PAR.Trans UOM USR is Net Live Weight
     IF PAR.Trans_UOM_USR = 'NL';

     // WRK.Net Head Usr = PAR.TH Head Received
     WRK.Net_Head_Usr = PAR.TH_Head_Received;

     // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Yard Deads
     WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Yard_Deads;

     // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Head Condemned
     WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Head_Condemned;

     //?* Insert avg live weight
     // WRK.Net Live Weight Usr = WRK.Net Head Usr * PAR.TH Avg Live Wgt *
     WRK.Net_Live_Weight_Usr = WRK.Net_Head_Usr * PAR.TH_Avg_Live_Wgt;

     // Net Live Weight
     PAR.Trans_Extended_Amt_Usr = ( WRK.Net_Live_Weight_Usr / 100 'H' )
     * PAR.Trans_Unit_Amt_Usr 'H';

     //?WEIGHT
     // IF PAR.Trans UOM USR is Shipped Weight - Doa's
     IF PAR.Trans_UOM_USR = 'SW';

     //?  Calc Avg shipped wgt, then calc wgt of DOA'S
     //?This rule was defined on 01/14/97
     //?The Calculations for Avg Shipped Weights are
     //?Head Received should be the live hogs that walk across the scale
     //?Doa's should be the hogs that died either after we collected
     //?      or before we weighed them
     //?Avg Shipped Weight : Shipped Weight /(Head Received + Doa's)
     // WRK.Hd Cnt Org Ship Usr = PAR.TH Head Received + PAR.TH Dead On Arrival
     WRK.Hd_Cnt_Org_Ship_Usr = PAR.TH_Head_Received + PAR.TH_Dead_On_Arrival;

     CASE;

     // IF WRK.Hd Cnt Org Ship Usr is *Zeros
     IF WRK.Hd_Cnt_Org_Ship_Usr = *ZERO;

     // WRK.Avg Weight USR = CON.*ZERO
     WRK.Avg_Weight_USR = *ZERO;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // WRK.Avg Weight USR = PAR.TH Shipped Weight / WRK.Hd Cnt Org Ship Usr *
     WRK.Avg_Weight_USR = PAR.TH_Shipped_Weight / WRK.Hd_Cnt_Org_Ship_Usr;

     ENDIF;

     // WRK.Doa's Avg Weight Usr = WRK.Avg Weight USR * PAR.TH Dead On Arrival *
     WRK.Doa_s_Avg_Weight_Usr = WRK.Avg_Weight_USR * PAR.TH_Dead_On_Arrival;

     //?  Subtract doa's from Shipped Wgt
     // WRK.Ship Wgt Tot Usr = PAR.TH Shipped Weight - WRK.Doa's Avg Weight Usr
     WRK.Ship_Wgt_Tot_Usr = PAR.TH_Shipped_Weight - WRK.Doa_s_Avg_Weight_Usr;

     // Shipped Weight Total Ext
     PAR.Trans_Extended_Amt_Usr = ( WRK.Ship_Wgt_Tot_Usr / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
     'H';

     //?WEIGHT
     // IF PAR.Trans UOM USR is SW - Doa's WT - Yrd Dd WT
     IF PAR.Trans_UOM_USR = 'SX';

     //?  Calc Avg shipped wgt, then calc wgt of DOA'S and Yard Deads
     //?This rule was defined on 01/14/97
     //?The Calculations for Avg Shipped Weights are
     //?Head Received should be the live hogs that walk across the scale
     //?Doa's should be the hogs that died either after we collected
     //?      or before we weighed them
     //?Avg Shipped Weight : Shipped Weight /(Head Received + Doa's)
     // WRK.Hd Cnt Org Ship Usr = PAR.TH Head Received + PAR.TH Dead On Arrival
     WRK.Hd_Cnt_Org_Ship_Usr = PAR.TH_Head_Received + PAR.TH_Dead_On_Arrival;

     CASE;

     // IF WRK.Hd Cnt Org Ship Usr is *Zeros
     IF WRK.Hd_Cnt_Org_Ship_Usr = *ZERO;

     // WRK.Avg Weight USR = CON.*ZERO
     WRK.Avg_Weight_USR = *ZERO;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // WRK.Avg Weight USR = PAR.TH Shipped Weight / WRK.Hd Cnt Org Ship Usr *
     WRK.Avg_Weight_USR = PAR.TH_Shipped_Weight / WRK.Hd_Cnt_Org_Ship_Usr;

     ENDIF;

     // WRK.Yard dead weight      USR = WRK.Avg Weight USR * PAR.TH Yard Deads *
     WRK.Yard_dead_weight_USR = WRK.Avg_Weight_USR * PAR.TH_Yard_Deads;

     // WRK.Doa's Avg Weight Usr = WRK.Avg Weight USR * PAR.TH Dead On Arrival *
     WRK.Doa_s_Avg_Weight_Usr = WRK.Avg_Weight_USR * PAR.TH_Dead_On_Arrival;

     //?  Subtract Doa's and Subtract Yard Dead wgt from Shipped Wgt
     // WRK.Ship Wgt Tot Usr = PAR.TH Shipped Weight - WRK.Doa's Avg Weight Usr
     WRK.Ship_Wgt_Tot_Usr = PAR.TH_Shipped_Weight - WRK.Doa_s_Avg_Weight_Usr;

     // WRK.Ship Wgt Tot Usr = WRK.Ship Wgt Tot Usr - WRK.Yard dead weight      USR
     WRK.Ship_Wgt_Tot_Usr = WRK.Ship_Wgt_Tot_Usr - WRK.Yard_dead_weight_USR;

     // Shipped wgt less Yd
     PAR.Trans_Extended_Amt_Usr = ( WRK.Ship_Wgt_Tot_Usr / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
     'H';

     ENDIF;

     //?Extension
     // IF PAR.Trans UOM USR is Value UOM
     IF PAR.Trans_UOM_USR = 'GV'/'BD';

     //?* * * * *    VALUE    * * * * *
     //?VALUE
     CASE;

     // IF PAR.Trans UOM USR is Gross Hundred Value
     IF PAR.Trans_UOM_USR = 'GV';

     // Gross Hundred Value
     PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Payment_Gross / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
     'H';

     //?VALUE
     // IF PAR.Trans UOM USR is Carcass Hundred Weight
     IF PAR.Trans_UOM_USR = 'CW';

     // Carcass Hundred Value
     PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Hot_Wgt / 100 'H' ) * PAR.Trans_Unit_Amt_Usr 'H';

     //?VALUE
     // IF PAR.Trans UOM USR is Base Market Dollars
     IF PAR.Trans_UOM_USR = 'BD';

     // Call program Clc Base Mkt Dollars  XF.
     CALL PROGRAM(Clc Base Mkt Dollars  XF) ('PKBSE01');
     PARAMETER(PAR.BOH_Company_Number);
     PARAMETER(PAR.TH_Purchase_Date);
     PARAMETER(PAR.TH_Live_Wgt);
     PARAMETER(PAR.DED_D_A_Code);
     PARAMETER(WRK.Base_Mkt_Prc_Amt_Tot_USR);

     CASE;

     // IF WRK.Base Mkt Prc Amt Tot USR GE WRK.Zero USR
     IF WRK.Base_Mkt_Prc_Amt_Tot_USR >= WRK.Zero_USR;

     // Base Market Dollars
     PAR.Trans_Extended_Amt_Usr = ( WRK.Base_Mkt_Prc_Amt_Tot_USR / 100 'H' )
     * PAR.Trans_Unit_Amt_Usr 'H';

     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Trans Extended Amt Usr = CON.*ZERO
     PAR.Trans_Extended_Amt_Usr = *ZERO;

     ENDIF;

     ENDIF;

     //?Extension
     // IF PAR.Trans UOM USR is Percent UOM
     IF PAR.Trans_UOM_USR = *BLANK;

     //?* * * * *    PERCENT   * * * * *
     //?PERCENT
     CASE;

     // IF PAR.Trans UOM USR is Percent of Gross Value
     IF PAR.Trans_UOM_USR = *BLANK;

     // Percent of Gross Value
     PAR.Trans_Extended_Amt_Usr = ( PAR.Trans_Unit_Amt_Usr / 100 'H' ) * PAR.TH_Payment_Gross
     'H';

     ENDIF;

     ENDIF;

    }

    CASE;

    // IF LCL.Trans Extended Amt Usr NE WRK.Zero USR
    IF LCL.Trans_Extended_Amt_Usr <> WRK.Zero_USR;

    EXECUTE FUNCTION(Create Tattoo Deduction) TYPE(CRTOBJ) FILE(PKCDCPP)            AB1107817;
    PARAMETER(PAR.BOH_Company_Number);
    PARAMETER(PAR.BOH_Buy_Order_Number);
    PARAMETER(PAR.BOL_Load_Number);
    PARAMETER(PAR.TH_Tattoo_Number);
    PARAMETER(PAR.TH_Kill_Date);
    PARAMETER(PAR.DED_D_A_Code);
    PARAMETER(PAR.TH_VC_Gross_Value_HD);
    PARAMETER(LCL.Trans_Extended_Amt_Usr);
    PARAMETER(PAR.PSD_Varialbe_Amount_Sign);
    PARAMETER(PAR.PSD_Variable_UOM);
    PARAMETER('S');
    PARAMETER(PAR.THD_GL_Code);
    PARAMETER(PAR.THD_Contra_Gl_Code);
    PARAMETER(PAR.TH_Yard_Deads);
    PARAMETER(PAR.THD_Payment_Sts);
    PARAMETER(PAR.THD_Expense_Paid_by);
    PARAMETER(PAR.THD_Expense_Type);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER('A');
    PARAMETER(JOB.*JOB);
    PARAMETER(JOB.*PROGRAM);
    PARAMETER(JOB.*USER);
    PARAMETER(JOB.*Job_date);
    PARAMETER(JOB.*Job_time);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
     PARAMETER(DB1.RS_Record_Status);
     PARAMETER(DB1.RS_Job);
     PARAMETER(DB1.RS_Program);
     PARAMETER(DB1.RS_User_Added);
     PARAMETER(DB1.RS_Date_Added);
     PARAMETER(DB1.RS_Time_Added);
     {
      //?Execute internal function

      // PAR.RS Record Status = CND.Active
      PAR.RS_Record_Status = 'A';

      // PAR.RS User Added = JOB.*USER
      PAR.RS_User_Added = JOB.*USER;

      // PAR.RS Date Added = JOB.*Job date
      PAR.RS_Date_Added = JOB.*Job_date;

      // PAR.RS Time Added = JOB.*Job time
      PAR.RS_Time_Added = JOB.*Job_time;

      // PAR.RS Program = JOB.*PROGRAM
      PAR.RS_Program = JOB.*PROGRAM;

      // PAR.RS Job = JOB.*JOB
      PAR.RS_Job = JOB.*JOB;

     }

    }

    ENDIF;

    ENDIF;

    ENDIF;

    //?Insurance Reimbursement Hd calculation
    // IF PAR.DED Prdcr Special Proc is Deferred Payment
    IF PAR.DED_Prdcr_Special_Proc = 'D';

    //?41404 slm add for deferred payment TFM
    //?Retrieve BREAK EVEN % from producer sub contract
    EXECUTE FUNCTION(Rtv PurchPrc Clc BrkEORT) TYPE(RTVOBJ) FILE(PKAQCPP)           AB1284224;
    PARAMETER(PAR.PC_Contract_Code);
    PARAMETER(PAR.PSC_Sub_Contract_Code);
    PARAMETER(WRK.PSC_Break_Even_Percent);
    {
     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    // WRK.Deferred Price Usr = CON.*ZERO
    WRK.Deferred_Price_Usr = *ZERO;

    // Deferred Price
    WRK.Deferred_Price_Usr = PAR.TH_CM_Base_Mkt_Price - ( PAR.TH_CM_Market_Price * (
    WRK.PSC_Break_Even_Percent / 100 'H' ) 'H' );

    // WRK.Trans Unit Amt Usr = WRK.Deferred Price Usr
    WRK.Trans_Unit_Amt_Usr = WRK.Deferred_Price_Usr;

    //?PLD miles = zero
    EXECUTE FUNCTION(Clc UOM Extension     IF) TYPE(EXCINTFUN)                      AB1143053;
    PARAMETER(PAR.BOH_Company_Number);
    PARAMETER(PAR.TH_Purchase_Date);
    PARAMETER(PAR.TH_Dead_On_Arrival);
    PARAMETER(PAR.TH_Head_Received);
    PARAMETER(PAR.TH_Yard_Deads);
    PARAMETER(PAR.TH_Held_Over);
    PARAMETER(PAR.TH_Head_Condemned);
    PARAMETER(PAR.TH_Head_Killed);
    PARAMETER(PAR.TH_Live_Wgt);
    PARAMETER(PAR.TH_Hot_Wgt);
    PARAMETER(PAR.TH_Avg_Live_Wgt);
    PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
    PARAMETER(PAR.TH_Payment_Gross);
    PARAMETER(PAR.TH_Shipped_Weight);
    PARAMETER(*MISSING);
    PARAMETER(PAR.PSD_Variable_UOM);
    PARAMETER(WRK.Trans_Unit_Amt_Usr);
    PARAMETER(WRK.Trans_Extended_Amt_Usr);
    PARAMETER(PAR.DED_D_A_Code);
    PARAMETER(*ZERO);
    {
     //?Execute internal function

     //?Extension
     CASE;

     // IF PAR.Trans UOM USR is Flat
     IF PAR.Trans_UOM_USR = 'FL';

     //?* * * * *   FLAT    * * * * *
     //?FLAT
     CASE;

     // IF PAR.Trans UOM USR is Flat
     IF PAR.Trans_UOM_USR = 'FL';

     // PAR.Trans Extended Amt Usr = PAR.Trans Unit Amt Usr * CON.1 *Rounded
     PAR.Trans_Extended_Amt_Usr = PAR.Trans_Unit_Amt_Usr * 1 'H';

     ENDIF;

     //?Extension
     // IF PAR.Trans UOM USR is Head UOM
     IF PAR.Trans_UOM_USR = 'DH'/'RH'/'YH'/'CH'/'KH'/'NH'/'DY'/'RX'/'HM'/'DE';

     //?* * * * *    HEAD   * * * * *
     //?HEAD
     CASE;

     // IF PAR.Trans UOM USR is Received Head
     IF PAR.Trans_UOM_USR = 'RH';

     // PAR.Trans Extended Amt Usr = PAR.TH Head Received * PAR.Trans Unit Amt Usr *Roun
     PAR.Trans_Extended_Amt_Usr = PAR.TH_Head_Received * PAR.Trans_Unit_Amt_Usr 'H';

     //?HEAD
     // IF PAR.Trans UOM USR is Received Hd less Yard Dd
     IF PAR.Trans_UOM_USR = 'RX';

     // WRK.Net Head Usr = PAR.TH Head Received - PAR.TH Yard Deads
     WRK.Net_Head_Usr = PAR.TH_Head_Received - PAR.TH_Yard_Deads;

     // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
     PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

     //?HEAD
     // IF PAR.Trans UOM USR is Killed Head
     IF PAR.Trans_UOM_USR = 'KH';

     // PAR.Trans Extended Amt Usr = PAR.TH Head Killed * PAR.Trans Unit Amt Usr *Rounde
     PAR.Trans_Extended_Amt_Usr = PAR.TH_Head_Killed * PAR.Trans_Unit_Amt_Usr 'H';

     //?HEAD
     // IF PAR.Trans UOM USR is Condemned Head
     IF PAR.Trans_UOM_USR = 'CH';

     // PAR.Trans Extended Amt Usr = PAR.TH Head Condemned * PAR.Trans Unit Amt Usr *Rou
     PAR.Trans_Extended_Amt_Usr = PAR.TH_Head_Condemned * PAR.Trans_Unit_Amt_Usr 'H';

     //?HEAD
     // IF PAR.Trans UOM USR is Yard Deads Head
     IF PAR.Trans_UOM_USR = 'YH';

     // PAR.Trans Extended Amt Usr = PAR.TH Yard Deads * PAR.Trans Unit Amt Usr *Rounded
     PAR.Trans_Extended_Amt_Usr = PAR.TH_Yard_Deads * PAR.Trans_Unit_Amt_Usr 'H';

     //?HEAD
     // IF PAR.Trans UOM USR is DOA Head
     IF PAR.Trans_UOM_USR = 'DH';

     // PAR.Trans Extended Amt Usr = PAR.TH Dead On Arrival * PAR.Trans Unit Amt Usr *Ro
     PAR.Trans_Extended_Amt_Usr = PAR.TH_Dead_On_Arrival * PAR.Trans_Unit_Amt_Usr 'H';

     //?HEAD
     // IF PAR.Trans UOM USR is Net Head
     IF PAR.Trans_UOM_USR = 'NH';

     // WRK.Net Head Usr = PAR.TH Head Received
     WRK.Net_Head_Usr = PAR.TH_Head_Received;

     // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Yard Deads
     WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Yard_Deads;

     // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Head Condemned
     WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Head_Condemned;

     // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
     PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

     //?HEAD
     // IF PAR.Trans UOM USR is DOA Head + Yard Dead Head
     IF PAR.Trans_UOM_USR = 'DY';

     // WRK.Net Head Usr = PAR.TH Dead On Arrival + PAR.TH Yard Deads
     WRK.Net_Head_Usr = PAR.TH_Dead_On_Arrival + PAR.TH_Yard_Deads;

     // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
     PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

     //?HEAD
     // IF PAR.Trans UOM USR is DOA HD + Yard Dead + EUT
     IF PAR.Trans_UOM_USR = 'DE';

     // WRK.Net Head Usr = PAR.TH Dead On Arrival + PAR.TH Yard Deads
     WRK.Net_Head_Usr = PAR.TH_Dead_On_Arrival + PAR.TH_Yard_Deads;

     // WRK.Net Head Usr = WRK.Net Head Usr + PAR.TH Head EUT/KOA
     WRK.Net_Head_Usr = WRK.Net_Head_Usr + PAR.TH_Head_EUT_KOA;

     // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
     PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

     //?HEAD
     // IF PAR.Trans UOM USR is Received Head /100 Miles
     IF PAR.Trans_UOM_USR = 'HM';

     // PAR.Trans Extended Amt Usr =       *
     PAR.Trans_Extended_Amt_Usr = ( PAR.PSM_Miles_to_Company * PAR.TH_Head_Killed 'H' ) * (
     PAR.Trans_Unit_Amt_Usr / 100 'H' ) 'H';

     ENDIF;

     //?Extension
     // IF PAR.Trans UOM USR is Weight UOM
     IF PAR.Trans_UOM_USR = 'CW'/'LW'/'NL'/'SW'/'LX'/'SX';

     //?* * * * *    WEIGHT   * * * * *
     //?WEIGHT
     CASE;

     // IF PAR.Trans UOM USR is Live Hundred Weight
     IF PAR.Trans_UOM_USR = 'LW';

     // Live hundred wgt
     PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Live_Wgt / 100 'H' ) * PAR.Trans_Unit_Amt_Usr 'H';

     //?WEIGHT
     // IF PAR.Trans UOM USR is LW less Yard Dead Wgt
     IF PAR.Trans_UOM_USR = 'LX';

     //? Calc wgt of yard dead based on Th avg live wgt
     // WRK.Yard dead weight      USR = PAR.TH Avg Live Wgt * PAR.TH Yard Deads *
     WRK.Yard_dead_weight_USR = PAR.TH_Avg_Live_Wgt * PAR.TH_Yard_Deads;

     //?  Subtract Yard Dead wgt from Live Wgt
     // WRK.Live Weight           USR = PAR.TH Live Wgt - WRK.Yard dead weight      USR
     WRK.Live_Weight_USR = PAR.TH_Live_Wgt - WRK.Yard_dead_weight_USR;

     // Live hundred wgt less Yd
     PAR.Trans_Extended_Amt_Usr = ( WRK.Live_Weight_USR / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
     'H';

     //?WEIGHT
     // IF PAR.Trans UOM USR is Carcass Hundred Weight
     IF PAR.Trans_UOM_USR = 'CW';

     // Carcass Hundred Wgt
     PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Hot_Wgt / 100 'H' ) * PAR.Trans_Unit_Amt_Usr 'H';

     //?WEIGHT
     // IF PAR.Trans UOM USR is Net Live Weight
     IF PAR.Trans_UOM_USR = 'NL';

     // WRK.Net Head Usr = PAR.TH Head Received
     WRK.Net_Head_Usr = PAR.TH_Head_Received;

     // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Yard Deads
     WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Yard_Deads;

     // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Head Condemned
     WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Head_Condemned;

     //?* Insert avg live weight
     // WRK.Net Live Weight Usr = WRK.Net Head Usr * PAR.TH Avg Live Wgt *
     WRK.Net_Live_Weight_Usr = WRK.Net_Head_Usr * PAR.TH_Avg_Live_Wgt;

     // Net Live Weight
     PAR.Trans_Extended_Amt_Usr = ( WRK.Net_Live_Weight_Usr / 100 'H' )
     * PAR.Trans_Unit_Amt_Usr 'H';

     //?WEIGHT
     // IF PAR.Trans UOM USR is Shipped Weight - Doa's
     IF PAR.Trans_UOM_USR = 'SW';

     //?  Calc Avg shipped wgt, then calc wgt of DOA'S
     //?This rule was defined on 01/14/97
     //?The Calculations for Avg Shipped Weights are
     //?Head Received should be the live hogs that walk across the scale
     //?Doa's should be the hogs that died either after we collected
     //?      or before we weighed them
     //?Avg Shipped Weight : Shipped Weight /(Head Received + Doa's)
     // WRK.Hd Cnt Org Ship Usr = PAR.TH Head Received + PAR.TH Dead On Arrival
     WRK.Hd_Cnt_Org_Ship_Usr = PAR.TH_Head_Received + PAR.TH_Dead_On_Arrival;

     CASE;

     // IF WRK.Hd Cnt Org Ship Usr is *Zeros
     IF WRK.Hd_Cnt_Org_Ship_Usr = *ZERO;

     // WRK.Avg Weight USR = CON.*ZERO
     WRK.Avg_Weight_USR = *ZERO;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // WRK.Avg Weight USR = PAR.TH Shipped Weight / WRK.Hd Cnt Org Ship Usr *
     WRK.Avg_Weight_USR = PAR.TH_Shipped_Weight / WRK.Hd_Cnt_Org_Ship_Usr;

     ENDIF;

     // WRK.Doa's Avg Weight Usr = WRK.Avg Weight USR * PAR.TH Dead On Arrival *
     WRK.Doa_s_Avg_Weight_Usr = WRK.Avg_Weight_USR * PAR.TH_Dead_On_Arrival;

     //?  Subtract doa's from Shipped Wgt
     // WRK.Ship Wgt Tot Usr = PAR.TH Shipped Weight - WRK.Doa's Avg Weight Usr
     WRK.Ship_Wgt_Tot_Usr = PAR.TH_Shipped_Weight - WRK.Doa_s_Avg_Weight_Usr;

     // Shipped Weight Total Ext
     PAR.Trans_Extended_Amt_Usr = ( WRK.Ship_Wgt_Tot_Usr / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
     'H';

     //?WEIGHT
     // IF PAR.Trans UOM USR is SW - Doa's WT - Yrd Dd WT
     IF PAR.Trans_UOM_USR = 'SX';

     //?  Calc Avg shipped wgt, then calc wgt of DOA'S and Yard Deads
     //?This rule was defined on 01/14/97
     //?The Calculations for Avg Shipped Weights are
     //?Head Received should be the live hogs that walk across the scale
     //?Doa's should be the hogs that died either after we collected
     //?      or before we weighed them
     //?Avg Shipped Weight : Shipped Weight /(Head Received + Doa's)
     // WRK.Hd Cnt Org Ship Usr = PAR.TH Head Received + PAR.TH Dead On Arrival
     WRK.Hd_Cnt_Org_Ship_Usr = PAR.TH_Head_Received + PAR.TH_Dead_On_Arrival;

     CASE;

     // IF WRK.Hd Cnt Org Ship Usr is *Zeros
     IF WRK.Hd_Cnt_Org_Ship_Usr = *ZERO;

     // WRK.Avg Weight USR = CON.*ZERO
     WRK.Avg_Weight_USR = *ZERO;

     // IF *OTHERWISE
     IF *OTHERWISE;

     // WRK.Avg Weight USR = PAR.TH Shipped Weight / WRK.Hd Cnt Org Ship Usr *
     WRK.Avg_Weight_USR = PAR.TH_Shipped_Weight / WRK.Hd_Cnt_Org_Ship_Usr;

     ENDIF;

     // WRK.Yard dead weight      USR = WRK.Avg Weight USR * PAR.TH Yard Deads *
     WRK.Yard_dead_weight_USR = WRK.Avg_Weight_USR * PAR.TH_Yard_Deads;

     // WRK.Doa's Avg Weight Usr = WRK.Avg Weight USR * PAR.TH Dead On Arrival *
     WRK.Doa_s_Avg_Weight_Usr = WRK.Avg_Weight_USR * PAR.TH_Dead_On_Arrival;

     //?  Subtract Doa's and Subtract Yard Dead wgt from Shipped Wgt
     // WRK.Ship Wgt Tot Usr = PAR.TH Shipped Weight - WRK.Doa's Avg Weight Usr
     WRK.Ship_Wgt_Tot_Usr = PAR.TH_Shipped_Weight - WRK.Doa_s_Avg_Weight_Usr;

     // WRK.Ship Wgt Tot Usr = WRK.Ship Wgt Tot Usr - WRK.Yard dead weight      USR
     WRK.Ship_Wgt_Tot_Usr = WRK.Ship_Wgt_Tot_Usr - WRK.Yard_dead_weight_USR;

     // Shipped wgt less Yd
     PAR.Trans_Extended_Amt_Usr = ( WRK.Ship_Wgt_Tot_Usr / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
     'H';

     ENDIF;

     //?Extension
     // IF PAR.Trans UOM USR is Value UOM
     IF PAR.Trans_UOM_USR = 'GV'/'BD';

     //?* * * * *    VALUE    * * * * *
     //?VALUE
     CASE;

     // IF PAR.Trans UOM USR is Gross Hundred Value
     IF PAR.Trans_UOM_USR = 'GV';

     // Gross Hundred Value
     PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Payment_Gross / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
     'H';

     //?VALUE
     // IF PAR.Trans UOM USR is Carcass Hundred Weight
     IF PAR.Trans_UOM_USR = 'CW';

     // Carcass Hundred Value
     PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Hot_Wgt / 100 'H' ) * PAR.Trans_Unit_Amt_Usr 'H';

     //?VALUE
     // IF PAR.Trans UOM USR is Base Market Dollars
     IF PAR.Trans_UOM_USR = 'BD';

     // Call program Clc Base Mkt Dollars  XF.
     CALL PROGRAM(Clc Base Mkt Dollars  XF) ('PKBSE01');
     PARAMETER(PAR.BOH_Company_Number);
     PARAMETER(PAR.TH_Purchase_Date);
     PARAMETER(PAR.TH_Live_Wgt);
     PARAMETER(PAR.DED_D_A_Code);
     PARAMETER(WRK.Base_Mkt_Prc_Amt_Tot_USR);

     CASE;

     // IF WRK.Base Mkt Prc Amt Tot USR GE WRK.Zero USR
     IF WRK.Base_Mkt_Prc_Amt_Tot_USR >= WRK.Zero_USR;

     // Base Market Dollars
     PAR.Trans_Extended_Amt_Usr = ( WRK.Base_Mkt_Prc_Amt_Tot_USR / 100 'H' )
     * PAR.Trans_Unit_Amt_Usr 'H';

     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Trans Extended Amt Usr = CON.*ZERO
     PAR.Trans_Extended_Amt_Usr = *ZERO;

     ENDIF;

     ENDIF;

     //?Extension
     // IF PAR.Trans UOM USR is Percent UOM
     IF PAR.Trans_UOM_USR = *BLANK;

     //?* * * * *    PERCENT   * * * * *
     //?PERCENT
     CASE;

     // IF PAR.Trans UOM USR is Percent of Gross Value
     IF PAR.Trans_UOM_USR = *BLANK;

     // Percent of Gross Value
     PAR.Trans_Extended_Amt_Usr = ( PAR.Trans_Unit_Amt_Usr / 100 'H' ) * PAR.TH_Payment_Gross
     'H';

     ENDIF;

     ENDIF;

    }

    CASE;

    // IF WRK.Trans Extended Amt Usr NE WRK.Zero USR
    IF WRK.Trans_Extended_Amt_Usr <> WRK.Zero_USR;

    EXECUTE FUNCTION(Create Tattoo Deduction) TYPE(CRTOBJ) FILE(PKCDCPP)            AB1107817;
    PARAMETER(PAR.BOH_Company_Number);
    PARAMETER(PAR.BOH_Buy_Order_Number);
    PARAMETER(PAR.BOL_Load_Number);
    PARAMETER(PAR.TH_Tattoo_Number);
    PARAMETER(PAR.TH_Kill_Date);
    PARAMETER(PAR.DED_D_A_Code);
    PARAMETER(WRK.Trans_Unit_Amt_Usr);
    PARAMETER(WRK.Trans_Extended_Amt_Usr);
    PARAMETER(PAR.PSD_Varialbe_Amount_Sign);
    PARAMETER(PAR.PSD_Variable_UOM);
    PARAMETER('S');
    PARAMETER(PAR.THD_GL_Code);
    PARAMETER(PAR.THD_Contra_Gl_Code);
    PARAMETER(*ZERO);
    PARAMETER(PAR.THD_Payment_Sts);
    PARAMETER(PAR.THD_Expense_Paid_by);
    PARAMETER(PAR.THD_Expense_Type);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER('Y');
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER('A');
    PARAMETER(JOB.*JOB);
    PARAMETER(JOB.*PROGRAM);
    PARAMETER(JOB.*USER);
    PARAMETER(JOB.*Job_date);
    PARAMETER(JOB.*Job_time);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
     PARAMETER(DB1.RS_Record_Status);
     PARAMETER(DB1.RS_Job);
     PARAMETER(DB1.RS_Program);
     PARAMETER(DB1.RS_User_Added);
     PARAMETER(DB1.RS_Date_Added);
     PARAMETER(DB1.RS_Time_Added);
     {
      //?Execute internal function

      // PAR.RS Record Status = CND.Active
      PAR.RS_Record_Status = 'A';

      // PAR.RS User Added = JOB.*USER
      PAR.RS_User_Added = JOB.*USER;

      // PAR.RS Date Added = JOB.*Job date
      PAR.RS_Date_Added = JOB.*Job_date;

      // PAR.RS Time Added = JOB.*Job time
      PAR.RS_Time_Added = JOB.*Job_time;

      // PAR.RS Program = JOB.*PROGRAM
      PAR.RS_Program = JOB.*PROGRAM;

      // PAR.RS Job = JOB.*JOB
      PAR.RS_Job = JOB.*JOB;

     }

    }

    ENDIF;

    ENDIF;

   }

   //?Create the D/A for Special Proc and Normal Proc
   // IF DB1.DED Reserve Account Upd is Yes
   IF DB1.DED_Reserve_Account_Upd = 'Y';

   CASE;

   // IF PAR.TH Payment Type is Live
   IF PAR.TH_Payment_Type = 'L';

   // PAR.Tot Cost Live CWT Usr = PAR.TH Live Purchase Price
   PAR.Tot_Cost_Live_CWT_Usr = PAR.TH_Live_Purchase_Price;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Tot Cost Live CWT Usr = PAR.TH CM Gross Live /CWT
   PAR.Tot_Cost_Live_CWT_Usr = PAR.TH_CM_Gross_Live_CWT;

   ENDIF;

   EXECUTE FUNCTION(Clc Reserve Amount    IF) TYPE(EXCINTFUN)                      AB1210078;
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.BOH_Buy_Order_Number);
   PARAMETER(PAR.BOL_Load_Number);
   PARAMETER(PAR.TH_Purchase_Date);
   PARAMETER(PAR.Tot_Cost_Live_CWT_Usr);
   PARAMETER(PAR.PD_Producer_Code);
   PARAMETER(PAR.Var_Net_Pay_Usr);
   {
    //?Execute internal function

    // PAR.Var Net Pay Usr = CON.*ZERO
    PAR.Var_Net_Pay_Usr = *ZERO;

    EXECUTE FUNCTION(Rtv Sub-Contract Type RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1209352;
    PARAMETER(PAR.BOH_Company_Number);
    PARAMETER(PAR.BOH_Buy_Order_Number);
    PARAMETER(PAR.PSC_FLoor_Price_+);
    PARAMETER(PAR.PSC_Sub_Contract_Type);
    PARAMETER(PAR.PC_Contract_Code);
    PARAMETER(PAR.PSC_Sub_Contract_Code);
    {
     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

     EXECUTE FUNCTION(Rtv Sub-Contract Type RT) TYPE(RTVOBJ) FILE(PKAQCPP)           AB1209362;
     PARAMETER(DB1.PC_Contract_Code);
     PARAMETER(DB1.PSC_Sub_Contract_Code);
     PARAMETER(PAR.PSC_FLoor_Price_+);
     PARAMETER(PAR.PSC_Sub_Contract_Type);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    // Call program Rtv Prior Sunday      XF.
    CALL PROGRAM(Rtv Prior Sunday      XF) ('PDLNXFR');
    PARAMETER(PAR.BOH_Company_Number);
    PARAMETER(PAR.TH_Purchase_Date);
    PARAMETER(PAR.PFP_Week_Ending_Date);

    EXECUTE FUNCTION(RTV Floor Price       RT) TYPE(RTVOBJ) FILE(PKECCPP)           AB1209357;
    PARAMETER(PAR.PC_Contract_Code);
    PARAMETER(PAR.PSC_Sub_Contract_Code);
    PARAMETER(PAR.PFP_Week_Ending_Date);
    PARAMETER(PAR.PFP_Adjusted_Floor_Price);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    EXECUTE FUNCTION(Val Reserv Acct Exists RT) TYPE(RTVOBJ) FILE(PKEECPP)          AB1209358;
    PARAMETER(PAR.PC_Contract_Code);
    PARAMETER(PAR.Balance_Exists_USR);
    {
     //?USER: Initialize routine

     // PAR.Balance Exists USR = CND.No
     PAR.Balance_Exists_USR = 'N';

     //?USER: Processing if Data record not found

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     CASE;

     // IF DB1.PAH Account Balance GT WRK.Zero USR
     IF DB1.PAH_Account_Balance > WRK.Zero_USR;

     // PAR.Balance Exists USR = CND.Yes
     PAR.Balance_Exists_USR = 'Y';

     ENDIF;

    }

    //?Calculate the unit price
    CASE;

    // IF PAR.Balance Exists USR is Yes
    IF PAR.Balance_Exists_USR = 'Y';

    // PGM.*Synon (15,2) work field = PAR.PFP Adjusted Floor Price + PAR.PSC FLoor Pric
    PGM.*Synon_152_work_field = PAR.PFP_Adjusted_Floor_Price + PAR.PSC_FLoor_Price_+;

    //?Determine unit price if there is a reserve account balance
    CASE;

    // IF PAR.TH CM Gross Live /CWT GT PGM.*Synon (15,2) work field
    IF PAR.TH_CM_Gross_Live_CWT > PGM.*Synon_152_work_field;

    // PAR.Var Net Pay Usr = PGM.*Synon (15,2) work field
    PAR.Var_Net_Pay_Usr = PGM.*Synon_152_work_field;

    //?Determine unit price if there is a reserve account balance
    // IF PAR.TH CM Gross Live /CWT GT PAR.PFP Adjusted Floor Price
    IF PAR.TH_CM_Gross_Live_CWT > PAR.PFP_Adjusted_Floor_Price;

    // PAR.Var Net Pay Usr = PAR.TH CM Gross Live /CWT
    PAR.Var_Net_Pay_Usr = PAR.TH_CM_Gross_Live_CWT;

    //?Determine unit price if there is a reserve account balance
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Var Net Pay Usr = PAR.PFP Adjusted Floor Price
    PAR.Var_Net_Pay_Usr = PAR.PFP_Adjusted_Floor_Price;

    ENDIF;

    //?Calculate the unit price
    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Determine unit price if there is no reserve account balance
    CASE;

    // IF PAR.TH CM Gross Live /CWT GT PAR.PFP Adjusted Floor Price
    IF PAR.TH_CM_Gross_Live_CWT > PAR.PFP_Adjusted_Floor_Price;

    // PAR.Var Net Pay Usr = PAR.TH CM Gross Live /CWT
    PAR.Var_Net_Pay_Usr = PAR.TH_CM_Gross_Live_CWT;

    //?Determine unit price if there is no reserve account balance
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Var Net Pay Usr = PAR.PFP Adjusted Floor Price
    PAR.Var_Net_Pay_Usr = PAR.PFP_Adjusted_Floor_Price;

    ENDIF;

    ENDIF;

    // PAR.Var Net Pay Usr = PAR.Var Net Pay Usr - PAR.TH CM Gross Live /CWT
    PAR.Var_Net_Pay_Usr = PAR.Var_Net_Pay_Usr - PAR.TH_CM_Gross_Live_CWT;

   }

   EXECUTE FUNCTION(Clc UOM Extension     IF) TYPE(EXCINTFUN)                      AB1143053;
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.TH_Purchase_Date);
   PARAMETER(PAR.TH_Dead_On_Arrival);
   PARAMETER(PAR.TH_Head_Received);
   PARAMETER(PAR.TH_Yard_Deads);
   PARAMETER(PAR.TH_Held_Over);
   PARAMETER(PAR.TH_Head_Condemned);
   PARAMETER(PAR.TH_Head_Killed);
   PARAMETER(PAR.TH_Live_Wgt);
   PARAMETER(PAR.TH_Hot_Wgt);
   PARAMETER(PAR.TH_Avg_Live_Wgt);
   PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
   PARAMETER(PAR.TH_Payment_Gross);
   PARAMETER(PAR.TH_Shipped_Weight);
   PARAMETER(PAR.TH_Head_EUT_KOA);
   PARAMETER(PAR.PSD_Variable_UOM);
   PARAMETER(PAR.Var_Net_Pay_Usr);
   PARAMETER(WRK.Trans_Extended_Amt_Usr);
   PARAMETER(DB1.DED_D_A_Code);
   PARAMETER(PAR.PSM_Miles_to_Company);
   {
    //?Execute internal function

    //?Extension
    CASE;

    // IF PAR.Trans UOM USR is Flat
    IF PAR.Trans_UOM_USR = 'FL';

    //?* * * * *   FLAT    * * * * *
    //?FLAT
    CASE;

    // IF PAR.Trans UOM USR is Flat
    IF PAR.Trans_UOM_USR = 'FL';

    // PAR.Trans Extended Amt Usr = PAR.Trans Unit Amt Usr * CON.1 *Rounded
    PAR.Trans_Extended_Amt_Usr = PAR.Trans_Unit_Amt_Usr * 1 'H';

    ENDIF;

    //?Extension
    // IF PAR.Trans UOM USR is Head UOM
    IF PAR.Trans_UOM_USR = 'DH'/'RH'/'YH'/'CH'/'KH'/'NH'/'DY'/'RX'/'HM'/'DE';

    //?* * * * *    HEAD   * * * * *
    //?HEAD
    CASE;

    // IF PAR.Trans UOM USR is Received Head
    IF PAR.Trans_UOM_USR = 'RH';

    // PAR.Trans Extended Amt Usr = PAR.TH Head Received * PAR.Trans Unit Amt Usr *Roun
    PAR.Trans_Extended_Amt_Usr = PAR.TH_Head_Received * PAR.Trans_Unit_Amt_Usr 'H';

    //?HEAD
    // IF PAR.Trans UOM USR is Received Hd less Yard Dd
    IF PAR.Trans_UOM_USR = 'RX';

    // WRK.Net Head Usr = PAR.TH Head Received - PAR.TH Yard Deads
    WRK.Net_Head_Usr = PAR.TH_Head_Received - PAR.TH_Yard_Deads;

    // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
    PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

    //?HEAD
    // IF PAR.Trans UOM USR is Killed Head
    IF PAR.Trans_UOM_USR = 'KH';

    // PAR.Trans Extended Amt Usr = PAR.TH Head Killed * PAR.Trans Unit Amt Usr *Rounde
    PAR.Trans_Extended_Amt_Usr = PAR.TH_Head_Killed * PAR.Trans_Unit_Amt_Usr 'H';

    //?HEAD
    // IF PAR.Trans UOM USR is Condemned Head
    IF PAR.Trans_UOM_USR = 'CH';

    // PAR.Trans Extended Amt Usr = PAR.TH Head Condemned * PAR.Trans Unit Amt Usr *Rou
    PAR.Trans_Extended_Amt_Usr = PAR.TH_Head_Condemned * PAR.Trans_Unit_Amt_Usr 'H';

    //?HEAD
    // IF PAR.Trans UOM USR is Yard Deads Head
    IF PAR.Trans_UOM_USR = 'YH';

    // PAR.Trans Extended Amt Usr = PAR.TH Yard Deads * PAR.Trans Unit Amt Usr *Rounded
    PAR.Trans_Extended_Amt_Usr = PAR.TH_Yard_Deads * PAR.Trans_Unit_Amt_Usr 'H';

    //?HEAD
    // IF PAR.Trans UOM USR is DOA Head
    IF PAR.Trans_UOM_USR = 'DH';

    // PAR.Trans Extended Amt Usr = PAR.TH Dead On Arrival * PAR.Trans Unit Amt Usr *Ro
    PAR.Trans_Extended_Amt_Usr = PAR.TH_Dead_On_Arrival * PAR.Trans_Unit_Amt_Usr 'H';

    //?HEAD
    // IF PAR.Trans UOM USR is Net Head
    IF PAR.Trans_UOM_USR = 'NH';

    // WRK.Net Head Usr = PAR.TH Head Received
    WRK.Net_Head_Usr = PAR.TH_Head_Received;

    // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Yard Deads
    WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Yard_Deads;

    // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Head Condemned
    WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Head_Condemned;

    // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
    PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

    //?HEAD
    // IF PAR.Trans UOM USR is DOA Head + Yard Dead Head
    IF PAR.Trans_UOM_USR = 'DY';

    // WRK.Net Head Usr = PAR.TH Dead On Arrival + PAR.TH Yard Deads
    WRK.Net_Head_Usr = PAR.TH_Dead_On_Arrival + PAR.TH_Yard_Deads;

    // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
    PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

    //?HEAD
    // IF PAR.Trans UOM USR is DOA HD + Yard Dead + EUT
    IF PAR.Trans_UOM_USR = 'DE';

    // WRK.Net Head Usr = PAR.TH Dead On Arrival + PAR.TH Yard Deads
    WRK.Net_Head_Usr = PAR.TH_Dead_On_Arrival + PAR.TH_Yard_Deads;

    // WRK.Net Head Usr = WRK.Net Head Usr + PAR.TH Head EUT/KOA
    WRK.Net_Head_Usr = WRK.Net_Head_Usr + PAR.TH_Head_EUT_KOA;

    // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
    PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

    //?HEAD
    // IF PAR.Trans UOM USR is Received Head /100 Miles
    IF PAR.Trans_UOM_USR = 'HM';

    // PAR.Trans Extended Amt Usr =       *
    PAR.Trans_Extended_Amt_Usr = ( PAR.PSM_Miles_to_Company * PAR.TH_Head_Killed 'H' ) * (
    PAR.Trans_Unit_Amt_Usr / 100 'H' ) 'H';

    ENDIF;

    //?Extension
    // IF PAR.Trans UOM USR is Weight UOM
    IF PAR.Trans_UOM_USR = 'CW'/'LW'/'NL'/'SW'/'LX'/'SX';

    //?* * * * *    WEIGHT   * * * * *
    //?WEIGHT
    CASE;

    // IF PAR.Trans UOM USR is Live Hundred Weight
    IF PAR.Trans_UOM_USR = 'LW';

    // Live hundred wgt
    PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Live_Wgt / 100 'H' ) * PAR.Trans_Unit_Amt_Usr 'H';

    //?WEIGHT
    // IF PAR.Trans UOM USR is LW less Yard Dead Wgt
    IF PAR.Trans_UOM_USR = 'LX';

    //? Calc wgt of yard dead based on Th avg live wgt
    // WRK.Yard dead weight      USR = PAR.TH Avg Live Wgt * PAR.TH Yard Deads *
    WRK.Yard_dead_weight_USR = PAR.TH_Avg_Live_Wgt * PAR.TH_Yard_Deads;

    //?  Subtract Yard Dead wgt from Live Wgt
    // WRK.Live Weight           USR = PAR.TH Live Wgt - WRK.Yard dead weight      USR
    WRK.Live_Weight_USR = PAR.TH_Live_Wgt - WRK.Yard_dead_weight_USR;

    // Live hundred wgt less Yd
    PAR.Trans_Extended_Amt_Usr = ( WRK.Live_Weight_USR / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
    'H';

    //?WEIGHT
    // IF PAR.Trans UOM USR is Carcass Hundred Weight
    IF PAR.Trans_UOM_USR = 'CW';

    // Carcass Hundred Wgt
    PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Hot_Wgt / 100 'H' ) * PAR.Trans_Unit_Amt_Usr 'H';

    //?WEIGHT
    // IF PAR.Trans UOM USR is Net Live Weight
    IF PAR.Trans_UOM_USR = 'NL';

    // WRK.Net Head Usr = PAR.TH Head Received
    WRK.Net_Head_Usr = PAR.TH_Head_Received;

    // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Yard Deads
    WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Yard_Deads;

    // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Head Condemned
    WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Head_Condemned;

    //?* Insert avg live weight
    // WRK.Net Live Weight Usr = WRK.Net Head Usr * PAR.TH Avg Live Wgt *
    WRK.Net_Live_Weight_Usr = WRK.Net_Head_Usr * PAR.TH_Avg_Live_Wgt;

    // Net Live Weight
    PAR.Trans_Extended_Amt_Usr = ( WRK.Net_Live_Weight_Usr / 100 'H' )
    * PAR.Trans_Unit_Amt_Usr 'H';

    //?WEIGHT
    // IF PAR.Trans UOM USR is Shipped Weight - Doa's
    IF PAR.Trans_UOM_USR = 'SW';

    //?  Calc Avg shipped wgt, then calc wgt of DOA'S
    //?This rule was defined on 01/14/97
    //?The Calculations for Avg Shipped Weights are
    //?Head Received should be the live hogs that walk across the scale
    //?Doa's should be the hogs that died either after we collected
    //?      or before we weighed them
    //?Avg Shipped Weight : Shipped Weight /(Head Received + Doa's)
    // WRK.Hd Cnt Org Ship Usr = PAR.TH Head Received + PAR.TH Dead On Arrival
    WRK.Hd_Cnt_Org_Ship_Usr = PAR.TH_Head_Received + PAR.TH_Dead_On_Arrival;

    CASE;

    // IF WRK.Hd Cnt Org Ship Usr is *Zeros
    IF WRK.Hd_Cnt_Org_Ship_Usr = *ZERO;

    // WRK.Avg Weight USR = CON.*ZERO
    WRK.Avg_Weight_USR = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Avg Weight USR = PAR.TH Shipped Weight / WRK.Hd Cnt Org Ship Usr *
    WRK.Avg_Weight_USR = PAR.TH_Shipped_Weight / WRK.Hd_Cnt_Org_Ship_Usr;

    ENDIF;

    // WRK.Doa's Avg Weight Usr = WRK.Avg Weight USR * PAR.TH Dead On Arrival *
    WRK.Doa_s_Avg_Weight_Usr = WRK.Avg_Weight_USR * PAR.TH_Dead_On_Arrival;

    //?  Subtract doa's from Shipped Wgt
    // WRK.Ship Wgt Tot Usr = PAR.TH Shipped Weight - WRK.Doa's Avg Weight Usr
    WRK.Ship_Wgt_Tot_Usr = PAR.TH_Shipped_Weight - WRK.Doa_s_Avg_Weight_Usr;

    // Shipped Weight Total Ext
    PAR.Trans_Extended_Amt_Usr = ( WRK.Ship_Wgt_Tot_Usr / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
    'H';

    //?WEIGHT
    // IF PAR.Trans UOM USR is SW - Doa's WT - Yrd Dd WT
    IF PAR.Trans_UOM_USR = 'SX';

    //?  Calc Avg shipped wgt, then calc wgt of DOA'S and Yard Deads
    //?This rule was defined on 01/14/97
    //?The Calculations for Avg Shipped Weights are
    //?Head Received should be the live hogs that walk across the scale
    //?Doa's should be the hogs that died either after we collected
    //?      or before we weighed them
    //?Avg Shipped Weight : Shipped Weight /(Head Received + Doa's)
    // WRK.Hd Cnt Org Ship Usr = PAR.TH Head Received + PAR.TH Dead On Arrival
    WRK.Hd_Cnt_Org_Ship_Usr = PAR.TH_Head_Received + PAR.TH_Dead_On_Arrival;

    CASE;

    // IF WRK.Hd Cnt Org Ship Usr is *Zeros
    IF WRK.Hd_Cnt_Org_Ship_Usr = *ZERO;

    // WRK.Avg Weight USR = CON.*ZERO
    WRK.Avg_Weight_USR = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Avg Weight USR = PAR.TH Shipped Weight / WRK.Hd Cnt Org Ship Usr *
    WRK.Avg_Weight_USR = PAR.TH_Shipped_Weight / WRK.Hd_Cnt_Org_Ship_Usr;

    ENDIF;

    // WRK.Yard dead weight      USR = WRK.Avg Weight USR * PAR.TH Yard Deads *
    WRK.Yard_dead_weight_USR = WRK.Avg_Weight_USR * PAR.TH_Yard_Deads;

    // WRK.Doa's Avg Weight Usr = WRK.Avg Weight USR * PAR.TH Dead On Arrival *
    WRK.Doa_s_Avg_Weight_Usr = WRK.Avg_Weight_USR * PAR.TH_Dead_On_Arrival;

    //?  Subtract Doa's and Subtract Yard Dead wgt from Shipped Wgt
    // WRK.Ship Wgt Tot Usr = PAR.TH Shipped Weight - WRK.Doa's Avg Weight Usr
    WRK.Ship_Wgt_Tot_Usr = PAR.TH_Shipped_Weight - WRK.Doa_s_Avg_Weight_Usr;

    // WRK.Ship Wgt Tot Usr = WRK.Ship Wgt Tot Usr - WRK.Yard dead weight      USR
    WRK.Ship_Wgt_Tot_Usr = WRK.Ship_Wgt_Tot_Usr - WRK.Yard_dead_weight_USR;

    // Shipped wgt less Yd
    PAR.Trans_Extended_Amt_Usr = ( WRK.Ship_Wgt_Tot_Usr / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
    'H';

    ENDIF;

    //?Extension
    // IF PAR.Trans UOM USR is Value UOM
    IF PAR.Trans_UOM_USR = 'GV'/'BD';

    //?* * * * *    VALUE    * * * * *
    //?VALUE
    CASE;

    // IF PAR.Trans UOM USR is Gross Hundred Value
    IF PAR.Trans_UOM_USR = 'GV';

    // Gross Hundred Value
    PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Payment_Gross / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
    'H';

    //?VALUE
    // IF PAR.Trans UOM USR is Carcass Hundred Weight
    IF PAR.Trans_UOM_USR = 'CW';

    // Carcass Hundred Value
    PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Hot_Wgt / 100 'H' ) * PAR.Trans_Unit_Amt_Usr 'H';

    //?VALUE
    // IF PAR.Trans UOM USR is Base Market Dollars
    IF PAR.Trans_UOM_USR = 'BD';

    // Call program Clc Base Mkt Dollars  XF.
    CALL PROGRAM(Clc Base Mkt Dollars  XF) ('PKBSE01');
    PARAMETER(PAR.BOH_Company_Number);
    PARAMETER(PAR.TH_Purchase_Date);
    PARAMETER(PAR.TH_Live_Wgt);
    PARAMETER(PAR.DED_D_A_Code);
    PARAMETER(WRK.Base_Mkt_Prc_Amt_Tot_USR);

    CASE;

    // IF WRK.Base Mkt Prc Amt Tot USR GE WRK.Zero USR
    IF WRK.Base_Mkt_Prc_Amt_Tot_USR >= WRK.Zero_USR;

    // Base Market Dollars
    PAR.Trans_Extended_Amt_Usr = ( WRK.Base_Mkt_Prc_Amt_Tot_USR / 100 'H' )
    * PAR.Trans_Unit_Amt_Usr 'H';

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Trans Extended Amt Usr = CON.*ZERO
    PAR.Trans_Extended_Amt_Usr = *ZERO;

    ENDIF;

    ENDIF;

    //?Extension
    // IF PAR.Trans UOM USR is Percent UOM
    IF PAR.Trans_UOM_USR = *BLANK;

    //?* * * * *    PERCENT   * * * * *
    //?PERCENT
    CASE;

    // IF PAR.Trans UOM USR is Percent of Gross Value
    IF PAR.Trans_UOM_USR = *BLANK;

    // Percent of Gross Value
    PAR.Trans_Extended_Amt_Usr = ( PAR.Trans_Unit_Amt_Usr / 100 'H' ) * PAR.TH_Payment_Gross
    'H';

    ENDIF;

    ENDIF;

   }

   CASE;

   // IF WRK.Trans Extended Amt Usr NE WRK.Zero USR
   IF WRK.Trans_Extended_Amt_Usr <> WRK.Zero_USR;

   //?Date 03/24/2004 Slm -- Update the Deferred Payment in place of Blank
   EXECUTE FUNCTION(Create Tattoo Deduction) TYPE(CRTOBJ) FILE(PKCDCPP)            AB1107817;
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.BOH_Buy_Order_Number);
   PARAMETER(PAR.BOL_Load_Number);
   PARAMETER(PAR.TH_Tattoo_Number);
   PARAMETER(PAR.TH_Kill_Date);
   PARAMETER(DB1.DED_D_A_Code);
   PARAMETER(PAR.PSD_Variable_Amount);
   PARAMETER(WRK.Trans_Extended_Amt_Usr);
   PARAMETER(PAR.PSD_Varialbe_Amount_Sign);
   PARAMETER(PAR.PSD_Variable_UOM);
   PARAMETER('S');
   PARAMETER(DB1.DED_Gl_Code);
   PARAMETER(DB1.DED_Contra_Gl_Code);
   PARAMETER(WRK.Zero_USR);
   PARAMETER(PAR.TH_Payment_Sts);
   PARAMETER(WRK.THD_Expense_Paid_by);
   PARAMETER(WRK.THD_Expense_Type);
   PARAMETER(DB1.DED_Reserve_Account_Upd);
   PARAMETER(WRK.THD_Commission_Deduction);
   PARAMETER(WRK.THD_Deferred_Payment);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER('A');
   PARAMETER(JOB.*JOB);
   PARAMETER(JOB.*PROGRAM);
   PARAMETER(JOB.*USER);
   PARAMETER(JOB.*Job_date);
   PARAMETER(JOB.*Job_time);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?Execute internal function

     // PAR.RS Record Status = CND.Active
     PAR.RS_Record_Status = 'A';

     // PAR.RS User Added = JOB.*USER
     PAR.RS_User_Added = JOB.*USER;

     // PAR.RS Date Added = JOB.*Job date
     PAR.RS_Date_Added = JOB.*Job_date;

     // PAR.RS Time Added = JOB.*Job time
     PAR.RS_Time_Added = JOB.*Job_time;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

    }

   }

   CASE;

   // IF WRK.THD Commission Deduction is Yes
   IF WRK.THD_Commission_Deduction = 'Y';

   EXECUTE FUNCTION(Rtv/Chg Commission StsRT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1213004;
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.BOH_Buy_Order_Number);
   PARAMETER(PAR.BOL_Load_Number);
   PARAMETER(PAR.TH_Tattoo_Number);
   PARAMETER(PAR.TH_Kill_Date);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER('C');
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(Chg Commission Sts/Dt CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1213006;
    PARAMETER(DB1.BOH_Company_Number);
    PARAMETER(DB1.BOH_Buy_Order_Number);
    PARAMETER(DB1.BOL_Load_Number);
    PARAMETER(DB1.TH_Tattoo_Number);
    PARAMETER(DB1.TH_Kill_Date);
    PARAMETER(PAR.TH_Commission_A_P_Voucher);
    PARAMETER(PAR.TH_Commission_Paid_Date);
    PARAMETER(PAR.TH_Commission_Status);
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
   }

   ENDIF;

   ENDIF;

   //?Create the D/A for Special Proc and Normal Proc
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Normal processing for the d/a code
   EXECUTE FUNCTION(Clc UOM Extension     IF) TYPE(EXCINTFUN)                      AB1143053;
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.TH_Purchase_Date);
   PARAMETER(PAR.TH_Dead_On_Arrival);
   PARAMETER(PAR.TH_Head_Received);
   PARAMETER(PAR.TH_Yard_Deads);
   PARAMETER(PAR.TH_Held_Over);
   PARAMETER(PAR.TH_Head_Condemned);
   PARAMETER(PAR.TH_Head_Killed);
   PARAMETER(PAR.TH_Live_Wgt);
   PARAMETER(PAR.TH_Hot_Wgt);
   PARAMETER(PAR.TH_Avg_Live_Wgt);
   PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
   PARAMETER(PAR.TH_Payment_Gross);
   PARAMETER(PAR.TH_Shipped_Weight);
   PARAMETER(PAR.TH_Head_EUT_KOA);
   PARAMETER(PAR.PSD_Variable_UOM);
   PARAMETER(PAR.PSD_Variable_Amount);
   PARAMETER(WRK.Trans_Extended_Amt_Usr);
   PARAMETER(DB1.DED_D_A_Code);
   PARAMETER(PAR.PSM_Miles_to_Company);
   {
    //?Execute internal function

    //?Extension
    CASE;

    // IF PAR.Trans UOM USR is Flat
    IF PAR.Trans_UOM_USR = 'FL';

    //?* * * * *   FLAT    * * * * *
    //?FLAT
    CASE;

    // IF PAR.Trans UOM USR is Flat
    IF PAR.Trans_UOM_USR = 'FL';

    // PAR.Trans Extended Amt Usr = PAR.Trans Unit Amt Usr * CON.1 *Rounded
    PAR.Trans_Extended_Amt_Usr = PAR.Trans_Unit_Amt_Usr * 1 'H';

    ENDIF;

    //?Extension
    // IF PAR.Trans UOM USR is Head UOM
    IF PAR.Trans_UOM_USR = 'DH'/'RH'/'YH'/'CH'/'KH'/'NH'/'DY'/'RX'/'HM'/'DE';

    //?* * * * *    HEAD   * * * * *
    //?HEAD
    CASE;

    // IF PAR.Trans UOM USR is Received Head
    IF PAR.Trans_UOM_USR = 'RH';

    // PAR.Trans Extended Amt Usr = PAR.TH Head Received * PAR.Trans Unit Amt Usr *Roun
    PAR.Trans_Extended_Amt_Usr = PAR.TH_Head_Received * PAR.Trans_Unit_Amt_Usr 'H';

    //?HEAD
    // IF PAR.Trans UOM USR is Received Hd less Yard Dd
    IF PAR.Trans_UOM_USR = 'RX';

    // WRK.Net Head Usr = PAR.TH Head Received - PAR.TH Yard Deads
    WRK.Net_Head_Usr = PAR.TH_Head_Received - PAR.TH_Yard_Deads;

    // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
    PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

    //?HEAD
    // IF PAR.Trans UOM USR is Killed Head
    IF PAR.Trans_UOM_USR = 'KH';

    // PAR.Trans Extended Amt Usr = PAR.TH Head Killed * PAR.Trans Unit Amt Usr *Rounde
    PAR.Trans_Extended_Amt_Usr = PAR.TH_Head_Killed * PAR.Trans_Unit_Amt_Usr 'H';

    //?HEAD
    // IF PAR.Trans UOM USR is Condemned Head
    IF PAR.Trans_UOM_USR = 'CH';

    // PAR.Trans Extended Amt Usr = PAR.TH Head Condemned * PAR.Trans Unit Amt Usr *Rou
    PAR.Trans_Extended_Amt_Usr = PAR.TH_Head_Condemned * PAR.Trans_Unit_Amt_Usr 'H';

    //?HEAD
    // IF PAR.Trans UOM USR is Yard Deads Head
    IF PAR.Trans_UOM_USR = 'YH';

    // PAR.Trans Extended Amt Usr = PAR.TH Yard Deads * PAR.Trans Unit Amt Usr *Rounded
    PAR.Trans_Extended_Amt_Usr = PAR.TH_Yard_Deads * PAR.Trans_Unit_Amt_Usr 'H';

    //?HEAD
    // IF PAR.Trans UOM USR is DOA Head
    IF PAR.Trans_UOM_USR = 'DH';

    // PAR.Trans Extended Amt Usr = PAR.TH Dead On Arrival * PAR.Trans Unit Amt Usr *Ro
    PAR.Trans_Extended_Amt_Usr = PAR.TH_Dead_On_Arrival * PAR.Trans_Unit_Amt_Usr 'H';

    //?HEAD
    // IF PAR.Trans UOM USR is Net Head
    IF PAR.Trans_UOM_USR = 'NH';

    // WRK.Net Head Usr = PAR.TH Head Received
    WRK.Net_Head_Usr = PAR.TH_Head_Received;

    // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Yard Deads
    WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Yard_Deads;

    // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Head Condemned
    WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Head_Condemned;

    // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
    PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

    //?HEAD
    // IF PAR.Trans UOM USR is DOA Head + Yard Dead Head
    IF PAR.Trans_UOM_USR = 'DY';

    // WRK.Net Head Usr = PAR.TH Dead On Arrival + PAR.TH Yard Deads
    WRK.Net_Head_Usr = PAR.TH_Dead_On_Arrival + PAR.TH_Yard_Deads;

    // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
    PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

    //?HEAD
    // IF PAR.Trans UOM USR is DOA HD + Yard Dead + EUT
    IF PAR.Trans_UOM_USR = 'DE';

    // WRK.Net Head Usr = PAR.TH Dead On Arrival + PAR.TH Yard Deads
    WRK.Net_Head_Usr = PAR.TH_Dead_On_Arrival + PAR.TH_Yard_Deads;

    // WRK.Net Head Usr = WRK.Net Head Usr + PAR.TH Head EUT/KOA
    WRK.Net_Head_Usr = WRK.Net_Head_Usr + PAR.TH_Head_EUT_KOA;

    // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
    PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

    //?HEAD
    // IF PAR.Trans UOM USR is Received Head /100 Miles
    IF PAR.Trans_UOM_USR = 'HM';

    // PAR.Trans Extended Amt Usr =       *
    PAR.Trans_Extended_Amt_Usr = ( PAR.PSM_Miles_to_Company * PAR.TH_Head_Killed 'H' ) * (
    PAR.Trans_Unit_Amt_Usr / 100 'H' ) 'H';

    ENDIF;

    //?Extension
    // IF PAR.Trans UOM USR is Weight UOM
    IF PAR.Trans_UOM_USR = 'CW'/'LW'/'NL'/'SW'/'LX'/'SX';

    //?* * * * *    WEIGHT   * * * * *
    //?WEIGHT
    CASE;

    // IF PAR.Trans UOM USR is Live Hundred Weight
    IF PAR.Trans_UOM_USR = 'LW';

    // Live hundred wgt
    PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Live_Wgt / 100 'H' ) * PAR.Trans_Unit_Amt_Usr 'H';

    //?WEIGHT
    // IF PAR.Trans UOM USR is LW less Yard Dead Wgt
    IF PAR.Trans_UOM_USR = 'LX';

    //? Calc wgt of yard dead based on Th avg live wgt
    // WRK.Yard dead weight      USR = PAR.TH Avg Live Wgt * PAR.TH Yard Deads *
    WRK.Yard_dead_weight_USR = PAR.TH_Avg_Live_Wgt * PAR.TH_Yard_Deads;

    //?  Subtract Yard Dead wgt from Live Wgt
    // WRK.Live Weight           USR = PAR.TH Live Wgt - WRK.Yard dead weight      USR
    WRK.Live_Weight_USR = PAR.TH_Live_Wgt - WRK.Yard_dead_weight_USR;

    // Live hundred wgt less Yd
    PAR.Trans_Extended_Amt_Usr = ( WRK.Live_Weight_USR / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
    'H';

    //?WEIGHT
    // IF PAR.Trans UOM USR is Carcass Hundred Weight
    IF PAR.Trans_UOM_USR = 'CW';

    // Carcass Hundred Wgt
    PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Hot_Wgt / 100 'H' ) * PAR.Trans_Unit_Amt_Usr 'H';

    //?WEIGHT
    // IF PAR.Trans UOM USR is Net Live Weight
    IF PAR.Trans_UOM_USR = 'NL';

    // WRK.Net Head Usr = PAR.TH Head Received
    WRK.Net_Head_Usr = PAR.TH_Head_Received;

    // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Yard Deads
    WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Yard_Deads;

    // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Head Condemned
    WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Head_Condemned;

    //?* Insert avg live weight
    // WRK.Net Live Weight Usr = WRK.Net Head Usr * PAR.TH Avg Live Wgt *
    WRK.Net_Live_Weight_Usr = WRK.Net_Head_Usr * PAR.TH_Avg_Live_Wgt;

    // Net Live Weight
    PAR.Trans_Extended_Amt_Usr = ( WRK.Net_Live_Weight_Usr / 100 'H' )
    * PAR.Trans_Unit_Amt_Usr 'H';

    //?WEIGHT
    // IF PAR.Trans UOM USR is Shipped Weight - Doa's
    IF PAR.Trans_UOM_USR = 'SW';

    //?  Calc Avg shipped wgt, then calc wgt of DOA'S
    //?This rule was defined on 01/14/97
    //?The Calculations for Avg Shipped Weights are
    //?Head Received should be the live hogs that walk across the scale
    //?Doa's should be the hogs that died either after we collected
    //?      or before we weighed them
    //?Avg Shipped Weight : Shipped Weight /(Head Received + Doa's)
    // WRK.Hd Cnt Org Ship Usr = PAR.TH Head Received + PAR.TH Dead On Arrival
    WRK.Hd_Cnt_Org_Ship_Usr = PAR.TH_Head_Received + PAR.TH_Dead_On_Arrival;

    CASE;

    // IF WRK.Hd Cnt Org Ship Usr is *Zeros
    IF WRK.Hd_Cnt_Org_Ship_Usr = *ZERO;

    // WRK.Avg Weight USR = CON.*ZERO
    WRK.Avg_Weight_USR = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Avg Weight USR = PAR.TH Shipped Weight / WRK.Hd Cnt Org Ship Usr *
    WRK.Avg_Weight_USR = PAR.TH_Shipped_Weight / WRK.Hd_Cnt_Org_Ship_Usr;

    ENDIF;

    // WRK.Doa's Avg Weight Usr = WRK.Avg Weight USR * PAR.TH Dead On Arrival *
    WRK.Doa_s_Avg_Weight_Usr = WRK.Avg_Weight_USR * PAR.TH_Dead_On_Arrival;

    //?  Subtract doa's from Shipped Wgt
    // WRK.Ship Wgt Tot Usr = PAR.TH Shipped Weight - WRK.Doa's Avg Weight Usr
    WRK.Ship_Wgt_Tot_Usr = PAR.TH_Shipped_Weight - WRK.Doa_s_Avg_Weight_Usr;

    // Shipped Weight Total Ext
    PAR.Trans_Extended_Amt_Usr = ( WRK.Ship_Wgt_Tot_Usr / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
    'H';

    //?WEIGHT
    // IF PAR.Trans UOM USR is SW - Doa's WT - Yrd Dd WT
    IF PAR.Trans_UOM_USR = 'SX';

    //?  Calc Avg shipped wgt, then calc wgt of DOA'S and Yard Deads
    //?This rule was defined on 01/14/97
    //?The Calculations for Avg Shipped Weights are
    //?Head Received should be the live hogs that walk across the scale
    //?Doa's should be the hogs that died either after we collected
    //?      or before we weighed them
    //?Avg Shipped Weight : Shipped Weight /(Head Received + Doa's)
    // WRK.Hd Cnt Org Ship Usr = PAR.TH Head Received + PAR.TH Dead On Arrival
    WRK.Hd_Cnt_Org_Ship_Usr = PAR.TH_Head_Received + PAR.TH_Dead_On_Arrival;

    CASE;

    // IF WRK.Hd Cnt Org Ship Usr is *Zeros
    IF WRK.Hd_Cnt_Org_Ship_Usr = *ZERO;

    // WRK.Avg Weight USR = CON.*ZERO
    WRK.Avg_Weight_USR = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Avg Weight USR = PAR.TH Shipped Weight / WRK.Hd Cnt Org Ship Usr *
    WRK.Avg_Weight_USR = PAR.TH_Shipped_Weight / WRK.Hd_Cnt_Org_Ship_Usr;

    ENDIF;

    // WRK.Yard dead weight      USR = WRK.Avg Weight USR * PAR.TH Yard Deads *
    WRK.Yard_dead_weight_USR = WRK.Avg_Weight_USR * PAR.TH_Yard_Deads;

    // WRK.Doa's Avg Weight Usr = WRK.Avg Weight USR * PAR.TH Dead On Arrival *
    WRK.Doa_s_Avg_Weight_Usr = WRK.Avg_Weight_USR * PAR.TH_Dead_On_Arrival;

    //?  Subtract Doa's and Subtract Yard Dead wgt from Shipped Wgt
    // WRK.Ship Wgt Tot Usr = PAR.TH Shipped Weight - WRK.Doa's Avg Weight Usr
    WRK.Ship_Wgt_Tot_Usr = PAR.TH_Shipped_Weight - WRK.Doa_s_Avg_Weight_Usr;

    // WRK.Ship Wgt Tot Usr = WRK.Ship Wgt Tot Usr - WRK.Yard dead weight      USR
    WRK.Ship_Wgt_Tot_Usr = WRK.Ship_Wgt_Tot_Usr - WRK.Yard_dead_weight_USR;

    // Shipped wgt less Yd
    PAR.Trans_Extended_Amt_Usr = ( WRK.Ship_Wgt_Tot_Usr / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
    'H';

    ENDIF;

    //?Extension
    // IF PAR.Trans UOM USR is Value UOM
    IF PAR.Trans_UOM_USR = 'GV'/'BD';

    //?* * * * *    VALUE    * * * * *
    //?VALUE
    CASE;

    // IF PAR.Trans UOM USR is Gross Hundred Value
    IF PAR.Trans_UOM_USR = 'GV';

    // Gross Hundred Value
    PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Payment_Gross / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
    'H';

    //?VALUE
    // IF PAR.Trans UOM USR is Carcass Hundred Weight
    IF PAR.Trans_UOM_USR = 'CW';

    // Carcass Hundred Value
    PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Hot_Wgt / 100 'H' ) * PAR.Trans_Unit_Amt_Usr 'H';

    //?VALUE
    // IF PAR.Trans UOM USR is Base Market Dollars
    IF PAR.Trans_UOM_USR = 'BD';

    // Call program Clc Base Mkt Dollars  XF.
    CALL PROGRAM(Clc Base Mkt Dollars  XF) ('PKBSE01');
    PARAMETER(PAR.BOH_Company_Number);
    PARAMETER(PAR.TH_Purchase_Date);
    PARAMETER(PAR.TH_Live_Wgt);
    PARAMETER(PAR.DED_D_A_Code);
    PARAMETER(WRK.Base_Mkt_Prc_Amt_Tot_USR);

    CASE;

    // IF WRK.Base Mkt Prc Amt Tot USR GE WRK.Zero USR
    IF WRK.Base_Mkt_Prc_Amt_Tot_USR >= WRK.Zero_USR;

    // Base Market Dollars
    PAR.Trans_Extended_Amt_Usr = ( WRK.Base_Mkt_Prc_Amt_Tot_USR / 100 'H' )
    * PAR.Trans_Unit_Amt_Usr 'H';

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Trans Extended Amt Usr = CON.*ZERO
    PAR.Trans_Extended_Amt_Usr = *ZERO;

    ENDIF;

    ENDIF;

    //?Extension
    // IF PAR.Trans UOM USR is Percent UOM
    IF PAR.Trans_UOM_USR = *BLANK;

    //?* * * * *    PERCENT   * * * * *
    //?PERCENT
    CASE;

    // IF PAR.Trans UOM USR is Percent of Gross Value
    IF PAR.Trans_UOM_USR = *BLANK;

    // Percent of Gross Value
    PAR.Trans_Extended_Amt_Usr = ( PAR.Trans_Unit_Amt_Usr / 100 'H' ) * PAR.TH_Payment_Gross
    'H';

    ENDIF;

    ENDIF;

   }

   CASE;

   // IF WRK.Trans Extended Amt Usr NE WRK.Zero USR
   IF WRK.Trans_Extended_Amt_Usr <> WRK.Zero_USR;

   //?Date 03/24/2004 Slm -- Update the Deferred Payment in place of Blank
   EXECUTE FUNCTION(Create Tattoo Deduction) TYPE(CRTOBJ) FILE(PKCDCPP)            AB1107817;
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.BOH_Buy_Order_Number);
   PARAMETER(PAR.BOL_Load_Number);
   PARAMETER(PAR.TH_Tattoo_Number);
   PARAMETER(PAR.TH_Kill_Date);
   PARAMETER(DB1.DED_D_A_Code);
   PARAMETER(PAR.PSD_Variable_Amount);
   PARAMETER(WRK.Trans_Extended_Amt_Usr);
   PARAMETER(PAR.PSD_Varialbe_Amount_Sign);
   PARAMETER(PAR.PSD_Variable_UOM);
   PARAMETER('S');
   PARAMETER(DB1.DED_Gl_Code);
   PARAMETER(DB1.DED_Contra_Gl_Code);
   PARAMETER(WRK.Zero_USR);
   PARAMETER(PAR.TH_Payment_Sts);
   PARAMETER(WRK.THD_Expense_Paid_by);
   PARAMETER(WRK.THD_Expense_Type);
   PARAMETER(*BLANK);
   PARAMETER(WRK.THD_Commission_Deduction);
   PARAMETER(WRK.THD_Deferred_Payment);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER('A');
   PARAMETER(JOB.*JOB);
   PARAMETER(JOB.*PROGRAM);
   PARAMETER(JOB.*USER);
   PARAMETER(JOB.*Job_date);
   PARAMETER(JOB.*Job_time);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?Execute internal function

     // PAR.RS Record Status = CND.Active
     PAR.RS_Record_Status = 'A';

     // PAR.RS User Added = JOB.*USER
     PAR.RS_User_Added = JOB.*USER;

     // PAR.RS Date Added = JOB.*Job date
     PAR.RS_Date_Added = JOB.*Job_date;

     // PAR.RS Time Added = JOB.*Job time
     PAR.RS_Time_Added = JOB.*Job_time;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

    }

   }

   CASE;

   // IF WRK.THD Commission Deduction is Yes
   IF WRK.THD_Commission_Deduction = 'Y';

   EXECUTE FUNCTION(Rtv/Chg Commission StsRT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1213004;
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.BOH_Buy_Order_Number);
   PARAMETER(PAR.BOL_Load_Number);
   PARAMETER(PAR.TH_Tattoo_Number);
   PARAMETER(PAR.TH_Kill_Date);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER('C');
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(Chg Commission Sts/Dt CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1213006;
    PARAMETER(DB1.BOH_Company_Number);
    PARAMETER(DB1.BOH_Buy_Order_Number);
    PARAMETER(DB1.BOL_Load_Number);
    PARAMETER(DB1.TH_Tattoo_Number);
    PARAMETER(DB1.TH_Kill_Date);
    PARAMETER(PAR.TH_Commission_A_P_Voucher);
    PARAMETER(PAR.TH_Commission_Paid_Date);
    PARAMETER(PAR.TH_Commission_Status);
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
   }

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

  }

  ENDIF;

 }

 //?Accumulate
 EXECUTE FUNCTION(Rtv Tattoo Hdr Totls RT) TYPE(RTVOBJ) FILE(PKCDCPP)            AB1143322;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.TH_Deduction_Amt);
 PARAMETER(WRK.TH_Additions_Amt);
 PARAMETER(WRK.TH_Accrual_Amount);
 PARAMETER('Y');
 PARAMETER(WRK.Freight_Tot_Ded_Add_Exp);
 {
  //?USER: Initialize routine

  // PAR.TH Deduction Amt = CON.*ZERO
  PAR.TH_Deduction_Amt = *ZERO;

  // PAR.TH Additions Amt = CON.*ZERO
  PAR.TH_Additions_Amt = *ZERO;

  // PAR.TH Accrual Amount = CON.*ZERO
  PAR.TH_Accrual_Amount = *ZERO;

  // PAR.Freight Tot Ded/Add Exp = CON.*ZERO
  PAR.Freight_Tot_Ded_Add_Exp = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF PAR.@Status Include Dead Hd is No, dont include Dead Hd
  IF PAR.@Status_Include_Dead_Hd = 'N';

  // AND DB1.THD UOM is Dead Head UOM
  AND DB1.THD_UOM = 'CH'/'DH'/'DY'/'YH'/'KH';

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF DB1.THD Expense Paid by is Producer
  IF DB1.THD_Expense_Paid_by = 'P';

  CASE;

  // IF DB1.THD Unit Amt Sign is Add
  IF DB1.THD_Unit_Amt_Sign = '+';

  // PAR.TH Additions Amt = PAR.TH Additions Amt + DB1.THD Ded/Add Amount
  PAR.TH_Additions_Amt = PAR.TH_Additions_Amt + DB1.THD_Ded_Add_Amount;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.TH Deduction Amt = PAR.TH Deduction Amt + DB1.THD Ded/Add Amount
  PAR.TH_Deduction_Amt = PAR.TH_Deduction_Amt + DB1.THD_Ded_Add_Amount;

  ENDIF;

  // IF DB1.THD Expense Paid by is Seaboard
  IF DB1.THD_Expense_Paid_by = 'S';

  CASE;

  // IF DB1.THD Expense Type is Freight
  IF DB1.THD_Expense_Type = 'F';

  CASE;

  // IF DB1.THD Unit Amt Sign is Add
  IF DB1.THD_Unit_Amt_Sign = '+';

  // PAR.Freight Tot Ded/Add Exp = PAR.Freight Tot Ded/Add Exp + DB1.THD Ded/Add Amou
  PAR.Freight_Tot_Ded_Add_Exp = PAR.Freight_Tot_Ded_Add_Exp + DB1.THD_Ded_Add_Amount;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Freight Tot Ded/Add Exp = PAR.Freight Tot Ded/Add Exp - DB1.THD Ded/Add Amou
  PAR.Freight_Tot_Ded_Add_Exp = PAR.Freight_Tot_Ded_Add_Exp - DB1.THD_Ded_Add_Amount;

  ENDIF;

  // IF DB1.THD Expense Type is Other
  IF DB1.THD_Expense_Type = 'O';

  CASE;

  // IF DB1.THD Unit Amt Sign is Add
  IF DB1.THD_Unit_Amt_Sign = '+';

  // PAR.TH Accrual Amount = PAR.TH Accrual Amount + DB1.THD Ded/Add Amount
  PAR.TH_Accrual_Amount = PAR.TH_Accrual_Amount + DB1.THD_Ded_Add_Amount;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.TH Accrual Amount = PAR.TH Accrual Amount - DB1.THD Ded/Add Amount
  PAR.TH_Accrual_Amount = PAR.TH_Accrual_Amount - DB1.THD_Ded_Add_Amount;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

 }

 // WRK.TH Total Net WO Adds = DB1.TH Payment Gross - WRK.TH Deduction Amt
 WRK.TH_Total_Net_WO_Adds = DB1.TH_Payment_Gross - WRK.TH_Deduction_Amt;

 // WRK.Th Payment Net Amt = DB1.TH Payment Gross + WRK.TH Additions Amt
 WRK.Th_Payment_Net_Amt = DB1.TH_Payment_Gross + WRK.TH_Additions_Amt;

 // WRK.Th Payment Net Amt = WRK.Th Payment Net Amt - WRK.TH Deduction Amt
 WRK.Th_Payment_Net_Amt = WRK.Th_Payment_Net_Amt - WRK.TH_Deduction_Amt;

 //?Calculate either live net or carcass net
 CASE;

 // IF DB1.TH Payment Sts is Live Payment
 IF DB1.TH_Payment_Sts = 'ML'/'SL'/'IL'/'NL';

 //?Calculate net amount for live payment
 // WRK.TH LIve Net Amt = DB1.TH Live Gross Amt + WRK.TH Additions Amt
 WRK.TH_LIve_Net_Amt = DB1.TH_Live_Gross_Amt + WRK.TH_Additions_Amt;

 // WRK.TH LIve Net Amt = WRK.TH LIve Net Amt - WRK.TH Deduction Amt
 WRK.TH_LIve_Net_Amt = WRK.TH_LIve_Net_Amt - WRK.TH_Deduction_Amt;

 //?Paying live if market hog will have carcass merit totals
 CASE;

 // IF DB1.TH Hog Class Type is Market
 IF DB1.TH_Hog_Class_Type = 'M';

 // WRK.TH Carcass Net Amt = DB1.TH CM Carcass Gross Amt + WRK.TH Additions Amt
 WRK.TH_Carcass_Net_Amt = DB1.TH_CM_Carcass_Gross_Amt + WRK.TH_Additions_Amt;

 // WRK.TH Carcass Net Amt = WRK.TH Carcass Net Amt - WRK.TH Deduction Amt
 WRK.TH_Carcass_Net_Amt = WRK.TH_Carcass_Net_Amt - WRK.TH_Deduction_Amt;

 ENDIF;

 //?Calculate either live net or carcass net
 // IF DB1.TH Payment Sts is Carcass Merit Payment
 IF DB1.TH_Payment_Sts = 'SC'/'IC';

 //?Calculate net amount for carcass merit fields
 //?and total without adds
 // WRK.TH Carcass Net Amt = DB1.TH CM Carcass Gross Amt + WRK.TH Additions Amt
 WRK.TH_Carcass_Net_Amt = DB1.TH_CM_Carcass_Gross_Amt + WRK.TH_Additions_Amt;

 // WRK.TH Carcass Net Amt = WRK.TH Carcass Net Amt - WRK.TH Deduction Amt
 WRK.TH_Carcass_Net_Amt = WRK.TH_Carcass_Net_Amt - WRK.TH_Deduction_Amt;

 ENDIF;

 EXECUTE FUNCTION(Chg Tto Ded/Add/Net   CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1143407;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TH_Live_Purchase_UOM);
 PARAMETER(DB1.TH_Live_Purchase_Price);
 PARAMETER(DB1.TH_Live_Gross_Amt);
 PARAMETER(WRK.TH_LIve_Net_Amt);
 PARAMETER(WRK.TH_Deduction_Amt);
 PARAMETER(WRK.TH_Total_Net_WO_Adds);
 PARAMETER(WRK.TH_Carcass_Net_Amt);
 PARAMETER(WRK.TH_Additions_Amt);
 PARAMETER(DB1.TH_Payment_Gross);
 PARAMETER(WRK.Th_Payment_Net_Amt);
 PARAMETER(WRK.TH_Accrual_Amount);
 PARAMETER(DB1.TH_Calc_Net_Sts);
 PARAMETER(DB1.TH_Payment_Type);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

 ENDIF;

}


