// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBWSXFR
// ?Date: 14.08.2025 Time: 03:49:35
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Determine if Current PFS Prod Sched Batch Hdr is B=Baseline
EXECUTE FUNCTION(Rtv PFS Prd Sch Bt Hd RT) TYPE(RTVOBJ) FILE(PBB2CPP)           AC2110176;
PARAMETER(PAR.PFS_Company_Number);
PARAMETER(PAR.PFS_Batch_Date);
PARAMETER(PAR.PFS_Batch_Time);
PARAMETER(PAR.PFS_User_ID);
PARAMETER(LCL.PFS_Baseline_Schedule);
PARAMETER(LCL.PFS_Batch_Sent_Date);
PARAMETER(LCL.PFS_Batch_Sent_Time);
PARAMETER(NLL.PFS_Record_Status);
PARAMETER(NLL.PFS_Process_Status);
PARAMETER(NLL.PFS_Error_Reason);
PARAMETER(LCL.PFS_Create_Date);
PARAMETER(LCL.PFS_Create_Time);
PARAMETER(NLL.PFS_Change_Date);
PARAMETER(NLL.PFS_Change_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?R9281 JJH 02/16/17 - Determine if intial Baseline for Com/Prd Date
EXECUTE FUNCTION(Rtv Baseline Co/PrdDt RT) TYPE(RTVOBJ) FILE(PBB2CPP)           AC2132364;
PARAMETER(PAR.PFS_Company_Number);
PARAMETER(PAR.PFS_Batch_Date);
PARAMETER(LCL.PFS_Baseline_Schedule_Cnt);
{
 //?USER: Initialize routine

 // LCL.PFS Baseline Schedule Cnt = CON.*ZERO
 LCL.PFS_Baseline_Schedule_Cnt = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.PFS Baseline Schedule is Baseline
 IF DB1.PFS_Baseline_Schedule = 'B';

 // LCL.PFS Baseline Schedule Cnt = LCL.PFS Baseline Schedule Cnt + CON.1
 LCL.PFS_Baseline_Schedule_Cnt = LCL.PFS_Baseline_Schedule_Cnt + 1;

 ENDIF;

 //?USER: Exit processing

 // PAR.PFS Baseline Schedule Cnt = LCL.PFS Baseline Schedule Cnt
 PAR.PFS_Baseline_Schedule_Cnt = LCL.PFS_Baseline_Schedule_Cnt;

}


CASE;

// IF LCL.PFS Baseline Schedule is Baseline
IF LCL.PFS_Baseline_Schedule = 'B';

// AND LCL.PFS Baseline Schedule Cnt is Equal (1)
AND LCL.PFS_Baseline_Schedule_Cnt = 1;

RETURN;

ENDIF;

//?Determine the Previous PFS Prod Sched Batch Hdr
//?E12065 JJH 11/14/17 - Correct logic to get Previous Batch
//?E14163 JJH 12/13/18 - Rtv Previous Batch with PFS Create Date/Time
EXECUTE FUNCTION(Rtv Prev ProdSchBtHdr RT) TYPE(RTVOBJ) FILE(PBB2CPP)           AC2121405;
PARAMETER(PAR.PFS_Company_Number);
PARAMETER(LCL.PFS_Create_Date);
PARAMETER(LCL.PFS_Create_Time);
PARAMETER(LCL.PFS_Company_Number);
PARAMETER(LCL.PFS_Batch_Date);
PARAMETER(LCL.PFS_Batch_Time);
PARAMETER(LCL.PFS_User_ID);
{
 //?USER: Initialize routine

 // LCL.Count USR = CON.*ZERO
 LCL.Count_USR = 0;

 //?USER: Process Data record

 CASE;

 // IF DB1.PFS Process Status is Sent
 IF DB1.PFS_Process_Status = 9;

 // LCL.Count USR = LCL.Count USR + CON.1
 LCL.Count_USR = LCL.Count_USR + 1;

 CASE;

 // IF LCL.Count USR is EQ 2
 IF LCL.Count_USR = 2;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

 ENDIF;

}


//?Compare Previous with Current PFS Prod Sched Batch Dtl, and create
//?Zero Qty to Fill Transaction if Deallocated Combo
//?E7453 JJH 10/10/16 - Missing items on New Production Schedule
//?R9035 JJH 01/31/17 - Compare to PFS Prod Sched Batch Cgn
//?R9372 JJH 02/23/17 - Changes between Current Prd Day and Work Ahead
//?E12065 JJH 11/13/17 - Correct Duplicate PFS Sequence Number
EXECUTE FUNCTION(Rtv Deallocated Combo RT) TYPE(RTVOBJ) FILE(PBC3CPP)           AC2131585;
PARAMETER(LCL.PFS_Company_Number);
PARAMETER(LCL.PFS_Batch_Date);
PARAMETER(LCL.PFS_Batch_Time);
PARAMETER(LCL.PFS_User_ID);
PARAMETER(PAR.PFS_Batch_Seq);
PARAMETER(PAR.PFS_Company_Number);
PARAMETER(PAR.PFS_Batch_Date);
PARAMETER(PAR.PFS_Batch_Time);
PARAMETER(PAR.PFS_User_ID);
{
 //?USER: Initialize routine

 //?E14252 JJH 12/17/18 - Add I/RST Order Detail Line comparison
 //?- Vfy PFS Prd Sch Bt Dt RT - PFS Prod Sched Batch Dtl
 //?E12852 JJH 03/28/18 - PFS Batch Seq for PFS Prod Sched Batch Cgn
 //?- Obtain the next PFS Batch Seq by retrieving the Last used PFS Batch
 //?  Seq by reading the PFS Prod Sched Batch Cgn file in Descending
 //?  order by PFS Batch Seq.
 //?USER: Process Data record

 CASE;

 // IF DB1.PFS Primary UOM is Combo
 IF DB1.PFS_Primary_UOM = 'CB';

 // AND NOT DB1.PFS Order Line Sts is Cancelled
 AND ! DB1.PFS_Order_Line_Sts = 'X';

 EXECUTE FUNCTION(RTV PFS PrdSchBtDt Ex RT) TYPE(RTVOBJ) FILE(PBB1CPP)           AC2121409;
 PARAMETER(PAR.PFS_Company_Number_Orig);
 PARAMETER(PAR.PFS_Batch_Date_Orig);
 PARAMETER(PAR.PFS_Batch_Time_Orig);
 PARAMETER(PAR.PFS_User_ID_Orig);
 PARAMETER(DB1.PFS_Item_Code);
 PARAMETER(DB1.PFS_Order_Number);
 PARAMETER(DB1.PFS_Baseline_Schedule);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  //?R9372 JJH 02/23/17 - Changes between Current Prd Day and Work Ahead
  CASE;

  // IF PAR.PFS Baseline Schedule is Not Baseline
  IF PAR.PFS_Baseline_Schedule = *BLANK;

  // OR PAR.PFS Baseline Schedule is Baseline
  OR PAR.PFS_Baseline_Schedule = 'B';

  CASE;

  // IF DB1.PFS Baseline Schedule is Baseline
  IF DB1.PFS_Baseline_Schedule = 'B';

  // OR DB1.PFS Baseline Schedule is Not Baseline
  OR DB1.PFS_Baseline_Schedule = *BLANK;

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

  QUIT;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  ENDIF;

  // IF PAR.PFS Baseline Schedule is Work Ahead
  IF PAR.PFS_Baseline_Schedule = 'W';

  CASE;

  // IF DB1.PFS Baseline Schedule is Work Ahead
  IF DB1.PFS_Baseline_Schedule = 'W';

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

  QUIT;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  ENDIF;

  ENDIF;

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 //?Verify that the item to be compared is in the Selection Criteria
 EXECUTE FUNCTION(Rtv PFS Prd Sch Bt Dt Rt) TYPE(RTVOBJ) FILE(PBB3CPP)           AC2129081;
 PARAMETER(PAR.PFS_Company_Number_Orig);
 PARAMETER(PAR.PFS_Batch_Date_Orig);
 PARAMETER(PAR.PFS_Batch_Time_Orig);
 PARAMETER(PAR.PFS_User_ID_Orig);
 PARAMETER(DB1.PFS_Item_Structure_Type);
 PARAMETER(DB1.PFS_Item_Structure_Group);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

 }

 CASE;

 // IF PGM.*Return code is *Record already exists
 IF PGM.*Return_code = 'Y2U0003';

 // LCL.PFS Company Number = PAR.PFS Company Number Orig
 LCL.PFS_Company_Number = PAR.PFS_Company_Number_Orig;

 // LCL.PFS Batch Date = PAR.PFS Batch Date Orig
 LCL.PFS_Batch_Date = PAR.PFS_Batch_Date_Orig;

 // LCL.PFS Batch Time = PAR.PFS Batch Time Orig
 LCL.PFS_Batch_Time = PAR.PFS_Batch_Time_Orig;

 // LCL.PFS User ID = PAR.PFS User ID Orig
 LCL.PFS_User_ID = PAR.PFS_User_ID_Orig;

 // LCL.PFS Fill Qty Prod = CON.*ZERO
 LCL.PFS_Fill_Qty_Prod = *ZERO;

 // LCL.PFS Fill Qty Ship Day 0 = CON.*ZERO
 LCL.PFS_Fill_Qty_Ship_Day_0 = 0;

 // LCL.PFS Fill Qty Ship Day 1 = CON.*ZERO
 LCL.PFS_Fill_Qty_Ship_Day_1 = 0;

 // LCL.PFS Fill Qty Ship Day 2 = CON.*ZERO
 LCL.PFS_Fill_Qty_Ship_Day_2 = 0;

 // LCL.PFS Order Line Sts = CND.Cancelled
 LCL.PFS_Order_Line_Sts = 'X';

 //?R9035 JJH 01/31/17 - Do not send as B=Baseline
 CASE;

 // IF DB1.PFS Baseline Schedule is Baseline
 IF DB1.PFS_Baseline_Schedule = 'B';

 // LCL.PFS Baseline Schedule = CND.Not Baseline
 LCL.PFS_Baseline_Schedule = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.PFS Baseline Schedule = DB1.PFS Baseline Schedule
 LCL.PFS_Baseline_Schedule = DB1.PFS_Baseline_Schedule;

 ENDIF;

 //?E9441 JJH 03/03/17 - Verify record does not exist
 //?E14252 JJH 12/17/18 - Add I/RST Order Detail Line comparison
 EXECUTE FUNCTION(Vfy PFS Prd Sch Bt Dt RT) TYPE(RTVOBJ) FILE(PBB1CPP)           AC2133315;
 PARAMETER(LCL.PFS_Company_Number);
 PARAMETER(LCL.PFS_Batch_Date);
 PARAMETER(LCL.PFS_Batch_Time);
 PARAMETER(LCL.PFS_User_ID);
 PARAMETER(DB1.PFS_Item_Code);
 PARAMETER(DB1.PFS_Order_Number);
 PARAMETER(DB1.PFS_Order_Line_Item_Nbr);
 PARAMETER(LCL.PFS_Baseline_Schedule);
 PARAMETER(LCL.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  CASE;

  // IF PAR.PFS Baseline Schedule is Baseline
  IF PAR.PFS_Baseline_Schedule = 'B';

  // OR PAR.PFS Baseline Schedule is Not Baseline
  OR PAR.PFS_Baseline_Schedule = *BLANK;

  CASE;

  // IF DB1.PFS Baseline Schedule is Baseline
  IF DB1.PFS_Baseline_Schedule = 'B';

  // OR DB1.PFS Baseline Schedule is Not Baseline
  OR DB1.PFS_Baseline_Schedule = *BLANK;

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

  QUIT;

  ENDIF;

  // IF PAR.PFS Baseline Schedule is Work Ahead
  IF PAR.PFS_Baseline_Schedule = 'W';

  CASE;

  // IF DB1.PFS Baseline Schedule is Work Ahead
  IF DB1.PFS_Baseline_Schedule = 'W';

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

  QUIT;

  ENDIF;

  ENDIF;

  //?USER: Exit processing

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

 }

 CASE;

 // IF LCL.Record Found USR is Record Not Found
 IF LCL.Record_Found_USR = 'N';

 //?E12852 JJH 03/28/18 - Obtain next PFS Batch Seq
 // Call program Rtv Last PFS Batch SeqXF.
 CALL PROGRAM(Rtv Last PFS Batch SeqXF) ('PUGUXFR');
 PARAMETER(PAR.PFS_Company_Number_Orig);
 PARAMETER(PAR.PFS_Batch_Date_Orig);
 PARAMETER(PAR.PFS_Batch_Time_Orig);
 PARAMETER(PAR.PFS_User_ID_Orig);
 PARAMETER(LCL.PFS_Batch_Seq);

 //?R15794 DN 11/20/19-Set New Fields.
 EXECUTE FUNCTION(Crt PFS Prd Sch Bt Dt CR) TYPE(CRTOBJ) FILE(PBB1CPP)           AC2109265;
 PARAMETER(LCL.PFS_Company_Number);
 PARAMETER(LCL.PFS_Batch_Date);
 PARAMETER(LCL.PFS_Batch_Time);
 PARAMETER(LCL.PFS_User_ID);
 PARAMETER(LCL.PFS_Batch_Seq);
 PARAMETER(DB1.PFS_Production_Date);
 PARAMETER(DB1.PFS_Item_Code);
 PARAMETER(DB1.PFS_Label_Type);
 PARAMETER(DB1.PFS_Order_Number);
 PARAMETER(DB1.PFS_Order_Line_Item_Nbr);
 PARAMETER(LCL.PFS_Order_Line_Sts);
 PARAMETER(DB1.PFS_Ordered_Qty);
 PARAMETER(DB1.PFS_Inventory_Alloc_Qty);
 PARAMETER(LCL.PFS_Fill_Qty_Prod);
 PARAMETER(LCL.PFS_Fill_Qty_Ship_Day_0);
 PARAMETER(LCL.PFS_Fill_Qty_Ship_Day_1);
 PARAMETER(LCL.PFS_Fill_Qty_Ship_Day_2);
 PARAMETER(DB1.PFS_Load_ID);
 PARAMETER(DB1.PFS_Loading_Sequence);
 PARAMETER(DB1.PFS_Scheduled_Ship_Date);
 PARAMETER(DB1.PFS_Load_Deadline_Date);
 PARAMETER(DB1.PFS_Load_Deadline_Time);
 PARAMETER(DB1.PFS_Item_Structure_Type);
 PARAMETER(DB1.PFS_Item_Structure_Group);
 PARAMETER(DB1.PFS_Item_Structure_Class);
 PARAMETER(DB1.PFS_Primary_UOM);
 PARAMETER(DB1.PFS_Fresh_Frozen);
 PARAMETER(DB1.PFS_Base_Converted);
 PARAMETER(LCL.PFS_Baseline_Schedule);
 PARAMETER(DB1.PFS_Palletize);
 PARAMETER(DB1.PFS_Pallet_Type);
 PARAMETER(DB1.PFS_Slip_Sheet);
 PARAMETER(DB1.PFS_Customer_Name);
 PARAMETER(DB1.PFS_Record_Status);
 PARAMETER(DB1.PFS_Process_Status);
 PARAMETER(DB1.PFS_Error_Reason);
 PARAMETER(DB1.PFS_Create_Date);
 PARAMETER(DB1.PFS_Create_Time);
 PARAMETER(DB1.PFS_Change_Date);
 PARAMETER(DB1.PFS_Change_Time);
 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

}


