// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPG4E1R
// ?Date: 14.08.2025 Time: 03:40:34
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(PAR.USR_Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(WRK.Allow_Multi_Company);
PARAMETER(WRK.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?Screen headings
CASE;

// IF PAR.Origination Point is Called From Menu
IF PAR.Origination_Point = 'M';

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('A/R');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?Screen headings
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('A/R');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


ENDIF;

// PAR.USR Update Flag = CND.No
PAR.USR_Update_Flag = *BLANK;

// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

//?USER: Initialize key screen

//?If first time flag is yes then default company
CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

// AND PAR.Allow Multi-Company is no
AND PAR.Allow_Multi_Company = 'N';

// KEY.Company Number = PAR.USR Company Number
KEY.Company_Number = PAR.USR_Company_Number;

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

ENDIF;

//?Fill Company name
CASE;

// IF KEY.Company Number is not equal to zero
IF KEY.Company_Number <> *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Fill customer name
CASE;

// IF PAR.Ship To Customer is not equal to zero
IF PAR.Ship_To_Customer <> *ZERO;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(KEY.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?USER: Validate key screen

//?If called from order entry, customer must be O/E entered
CASE;

// IF PAR.Origination Point is Called From Order Entry
IF PAR.Origination_Point = 'O';

CASE;

// IF KEY.Ship To Customer is not equal to zero
IF KEY.Ship_To_Customer <> *ZERO;

EXECUTE FUNCTION(RTV Cust Hold Status   RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1195877;
PARAMETER(KEY.Ship_To_Customer);
PARAMETER(WRK.Order_Entry_Hold);
PARAMETER(WRK.Parent_Credit_Limit);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.Order Entry Hold is Active-DONT USE
IF WRK.Order_Entry_Hold = *BLANK;

// Send error message - 'Customer is invalid if not created within Order Entry.'
ERROR(USR1403);
MSGPARM(KEY.Ship_To_Customer);

ENDIF;

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(KEY.Ship_To_Customer);
PARAMETER(KEY.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize detail screen (existing record)

// DTL.Company Name = KEY.Company Name
DTL.Company_Name = KEY.Company_Name;

// DTL.Customer Name = KEY.Customer Name
DTL.Customer_Name = KEY.Customer_Name;

EXECUTE FUNCTION(RTV Name, Status       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1260598;
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Status Description = Condition name of DTL.Record Status
DTL.Status_Description = RTVCND(DTL.Record_Status);

// PAR.Freight Overate Rate = DB1.Freight Overate Rate
PAR.Co_Cust_Overage_Rate_CWT = DB1.Co_Cust_Overage_Rate_CWT;

// PAR.Record Status = DB1.Record Status
PAR.Record_Status = DB1.Record_Status;

EXECUTE FUNCTION(Rtv Account info       RT) TYPE(RTVOBJ) FILE(OMGZCPP)          AC1214276;
PARAMETER(DB1.Company_Number);
PARAMETER(WRK.Extra_Amount_1);
PARAMETER(WRK.Extra_Number_1);
PARAMETER(WRK.Extra_Status_1);
PARAMETER(DTL.@G_L_Acct_Number);
PARAMETER(DTL.@G_L_Acct_Number_Sub);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.G/L Account for Dr = CON.*BLANK
 PAR.SH_Expense_Bucket = *BLANK;

 // PAR.G/L Sub Acount for Dr = CON.*BLANK
 PAR.G_L_Sub_Account = *BLANK;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Val G/L Act Cde 2 HPE XF.
CALL PROGRAM(Val G/L Act Cde 2 HPE XF) ('PKVBXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.G_L_Code);
PARAMETER(DTL.G_L_Code_Desc_USR);
PARAMETER(WRK.G_L_Account_Id_USR);
PARAMETER(WRK.G_L_Account_Type_1_USR);
PARAMETER(WRK.G_L_Account_Type_2_USR);
PARAMETER(WRK.Record_Found_USR);

//?USER: Process key screen request

CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

// Send error message - 'Function not allowed.'
ERROR(USR1833);

QUIT;

ENDIF;

//?USER: Validate detail screen fields

//?Select G/L Code
CASE;

// IF DTL.G/L Code is Selection
IF DTL.G_L_Code = '?';

// WRK.A/R G/L Code = DTL.A/R G/L Code
WRK.G_L_Code = DTL.G_L_Code;

// Call program Sel G/L Act Cde 2 HPE XF.
CALL PROGRAM(Sel G/L Act Cde 2 HPE XF) ('PKVCSRR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.G_L_Code);
PARAMETER(DTL.G_L_Code_Desc_USR);
PARAMETER(WRK.G_L_Account_Id_USR);
PARAMETER(*BLANK);
PARAMETER(*BLANK);

ENDIF;

//?Prompt G/L code
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.G/L Code
AND PGM.*Cursor_field = DTL.G_L_Code;

// WRK.A/R G/L Code = DTL.A/R G/L Code
WRK.G_L_Code = DTL.G_L_Code;

// Call program Sel G/L Act Cde 2 HPE XF.
CALL PROGRAM(Sel G/L Act Cde 2 HPE XF) ('PKVCSRR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.G_L_Code);
PARAMETER(DTL.G_L_Code_Desc_USR);
PARAMETER(WRK.G_L_Account_Id_USR);
PARAMETER(*BLANK);
PARAMETER(*BLANK);

ENDIF;

//?Validate G/L Code
CASE;

// IF DTL.A/R G/L Code is Entered
IF DTL.G_L_Code <> *BLANK;

// Call program Val G/L Act Cde 2 HPE XF.
CALL PROGRAM(Val G/L Act Cde 2 HPE XF) ('PKVBXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.G_L_Code);
PARAMETER(DTL.G_L_Code_Desc_USR);
PARAMETER(WRK.G_L_Account_Id_USR);
PARAMETER(WRK.G_L_Account_Type_1_USR);
PARAMETER(WRK.G_L_Account_Type_2_USR);
PARAMETER(WRK.Record_Found_USR);

ENDIF;

//?Price Audit processing
CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

CASE;

// IF PAR.Freight Overate Rate NE DTL.Freight Overate Rate
IF PAR.Co_Cust_Overage_Rate_CWT <> DTL.Co_Cust_Overage_Rate_CWT;

// PAR.USR Update Flag = CND.Yes
PAR.USR_Update_Flag = 'Y';

// IF PAR.Record Status NE DTL.Record Status
IF PAR.Record_Status <> DTL.Record_Status;

// PAR.USR Update Flag = CND.Yes
PAR.USR_Update_Flag = 'Y';

ENDIF;

ENDIF;

//?USER: Validate detail screen relations

// WRK.USR Display 1 = CND.No
WRK.USR_Display_1 = 'N';

//?USER: Change DBF record

EXECUTE FUNCTION(CHG Comp/Cust  w/G/L   CH) TYPE(CHGOBJ) FILE(CAEOREP)          AC1214324;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Terms_Code);
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(DTL.Special_Instructions_2);
PARAMETER(DTL.Special_Instructions);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Broker);
PARAMETER(DTL.P_O_Required_Flag);
PARAMETER(DTL.Deliver_after_time);
PARAMETER(DTL.Deliver_before_time);
PARAMETER(DTL.Alt_Remittance_Flag);
PARAMETER(DTL.Type_Code);
PARAMETER(DTL.Absorbed_Freight_Rate_CWT);
PARAMETER(DTL.Mileage_To_Customer);
PARAMETER(DTL.Co_Cust_Overage_Rate_CWT);
PARAMETER(DTL.Age_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Outside_Warehouse_Flag);
PARAMETER(DTL.Customer_Group_Code);
PARAMETER(DTL.Customer_Group_Code_2);
PARAMETER(DTL.G_L_Code);
PARAMETER(DTL.Commodity_Market_Code);
PARAMETER(DTL.Credit_Contact_Name);
PARAMETER(DTL.Credit_Contact_Telephone);
PARAMETER(DTL.Credit_Contact_Bus_Title);
PARAMETER(DTL.Credit_Contact_Fax_Number);
PARAMETER(DTL.Allow_Man_Qt_WO_Approval);
PARAMETER(DTL.Fax_Invoice_Flag);
PARAMETER(DTL.Fax_Invoice_Fax_Number);
PARAMETER(DTL.Fax_Invoice_Contact_Name);
PARAMETER(DTL.Distributor);
PARAMETER(DTL.Default_Shipping_Co_Sts);
PARAMETER(DTL.Ord_Ent_Default_Sls_Rte);
PARAMETER(DTL.Bypass_DDt_Delay_w_Invcng);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(WRK.Extra_Amount_1);
PARAMETER(WRK.Extra_Number_1);
PARAMETER(WRK.Extra_Status_1);
PARAMETER(DTL.@G_L_Acct_Number);
PARAMETER(DTL.@G_L_Acct_Number_Sub);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?USER: Processing after Data update

 EXECUTE FUNCTION(CHG OM Company/Cust    CH) TYPE(CHGOBJ) FILE(OMGZCPP)          AC1214274;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(PAR.Extra_Amount_1);
 PARAMETER(PAR.Extra_Number_1);
 PARAMETER(PAR.Extra_Status_1);
 PARAMETER(PAR.SH_Expense_Bucket);
 PARAMETER(PAR.G_L_Sub_Account);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 {
  //?USER: Processing before Data read

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(CRT OM Company/Cust    CR) TYPE(CRTOBJ) FILE(OMGZCPP)          AC1214273;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Extra_Amount_1);
  PARAMETER(PAR.Extra_Number_1);
  PARAMETER(PAR.Extra_Status_1);
  PARAMETER(PAR.SH_Expense_Bucket);
  PARAMETER(PAR.G_L_Sub_Account);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

}


//?USER: Process command keys

//?Price Audit
CASE;

// IF PAR.USR Update Flag is Yes
IF PAR.USR_Update_Flag = 'Y';

// Call program UPD Price Audit Update XF.
CALL PROGRAM(UPD Price Audit Update XF) ('PDMOXFR');
PARAMETER('CAEOREP');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER('Y');
PARAMETER('N');
PARAMETER('N');
PARAMETER('N');

// PAR.USR Update Flag = CND.No
PAR.USR_Update_Flag = *BLANK;

ENDIF;

// PGM.*Return code = CND.Update Occurred
PGM.*Return_code = 'UPDOCC';

//?Exit in change mode
CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

RETURN;

ENDIF;

