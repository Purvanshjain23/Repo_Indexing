// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDPXD1R
// ?Date: 14.08.2025 Time: 03:29:20
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('I/C');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Load detail screen from DBF record

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DB1.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Desc,U/Ms,CWT,PrcM RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1315777;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(DTL.Description_Line_One);
PARAMETER(WRK.Description_Line_Two);
PARAMETER(DTL.UOM_Primary);
PARAMETER(DTL.Conversion_Factor_1);
PARAMETER(DTL.Operation_Factor_1);
PARAMETER(DTL.UOM_Second);
PARAMETER(DTL.Conversion_Factor_2);
PARAMETER(DTL.Operation_Factor_2);
PARAMETER(DTL.UOM_Third);
PARAMETER(DTL.UOM_Pricing);
PARAMETER(DTL.Unit_Weight);
PARAMETER(DTL.Production_Date_Control);
PARAMETER(DTL.Catch_Weight_Status);
PARAMETER(WRK.Default_Commod_Mark_basis);
PARAMETER(WRK.Price_Method_Default);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Desc/Trans/Lot    RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1592633;
PARAMETER(DB1.Warehouse_Code);
PARAMETER(DTL.Warehouse_Description);
PARAMETER(LCL.Lot_Tracking_Flag);
PARAMETER(DTL.Trans_Contol_AS400_Plant);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Clc Consolidate On Hnd IF) TYPE(EXCINTFUN)                     AC1123255;
PARAMETER(DTL.UOM_Primary);
PARAMETER(DTL.Conversion_Factor_1);
PARAMETER(DTL.Operation_Factor_1);
PARAMETER(DTL.UOM_Second);
PARAMETER(DTL.Conversion_Factor_2);
PARAMETER(DTL.Operation_Factor_2);
PARAMETER(DTL.UOM_Third);
PARAMETER(DTL.On_Hand_UOM1_Summary);
PARAMETER(DTL.On_Hand_UOM2_Summary);
PARAMETER(DTL.On_Hand_UOM3_Summary);
PARAMETER(DTL.USR_Quantity);
{
 //?Execute internal function

 //?Calculate unit of measure 2 equivalent for unit of measure 3
 CASE;

 // IF PAR.Quantity on Hand - U/M3 is not equal zero
 IF PAR.Quantity_on_Hand_UOM3 <> *ZERO;

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 //?Convert based on operation code
 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Quantity based on U/M2 S = PAR.Quantity on Hand - U/M3 / PAR.Multiplier Two
 PAR.Quantity_based_on_U_M2_S = PAR.Quantity_on_Hand_UOM3 / PAR.Conversion_Factor_2 'H';

 ENDIF;

 //?Convert based on operation code
 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 // PAR.Quantity based on U/M2 S = PAR.Quantity on Hand - U/M3 * PAR.Conversion Fact
 PAR.Quantity_based_on_U_M2_S = PAR.Quantity_on_Hand_UOM3 * PAR.Conversion_Factor_2 'H';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity based on U/M2 S = PAR.Quantity based on U/M2 S + PAR.Quantity on Ha
 PAR.Quantity_based_on_U_M2_S = PAR.Quantity_based_on_U_M2_S + PAR.Quantity_on_Hand_UOM3;

 ENDIF;

 ENDIF;

 // PAR.Quantity based on U/M2 S = PAR.Quantity based on U/M2 S + PAR.Quantity on Ha
 PAR.Quantity_based_on_U_M2_S = PAR.Quantity_based_on_U_M2_S + PAR.Quantity_on_Hand_UOM2;

 //?Calculate unit of measure 1 equivalent for unit of measure 2
 CASE;

 // IF PAR.Quantity based on U/M2 S is not equal zero
 IF PAR.Quantity_based_on_U_M2_S <> *ZERO;

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Quantity based on U/M1 S = PAR.Quantity based on U/M2 S / PAR.Conversion Fac
 PAR.Quantity_based_on_U_M1_S = PAR.Quantity_based_on_U_M2_S / PAR.Conversion_Factor_1
 'H';

 ENDIF;

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 // PAR.Quantity based on U/M1 S = PAR.Quantity based on U/M2 S * PAR.Conversion Fac
 PAR.Quantity_based_on_U_M1_S = PAR.Quantity_based_on_U_M2_S * PAR.Conversion_Factor_1
 'H';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity based on U/M1 S = PAR.Quantity based on U/M1 S + PAR.Quantity based
 PAR.Quantity_based_on_U_M1_S = PAR.Quantity_based_on_U_M1_S
 + PAR.Quantity_based_on_U_M2_S;

 ENDIF;

 ENDIF;

 // PAR.Quantity based on U/M1 S = PAR.Quantity based on U/M1 S + PAR.Quantity on Ha
 PAR.Quantity_based_on_U_M1_S = PAR.Quantity_based_on_U_M1_S + PAR.Quantity_on_Hand_UOM1;

 // PAR.Quantity Total S = PAR.Quantity based on U/M1 S
 PAR.Quantity_Total_S = PAR.Quantity_based_on_U_M1_S;

}


//?Retrieve condition descriptions
// DTL.Condition Desc. 1  USR = Condition name of DTL.Trans Contol AS400/Plant
DTL.Condition_Desc_1_USR = RTVCND(DTL.Trans_Contol_AS400_Plant);

// DTL.Condition Desc. 2  USR = Condition name of DTL.Production Date Control
DTL.Condition_Desc_2_USR = RTVCND(DTL.Production_Date_Control);

// DTL.Condition Desc. 3  USR = Condition name of DTL.Catch Weight Status
DTL.Condition_Desc_3_USR = RTVCND(DTL.Catch_Weight_Status);

// DTL.Condition Desc. 4  USR = Condition name of DTL.Revaluation Cost Type
DTL.Condition_Desc_4_USR = RTVCND(DTL.Revaluation_Cost_Type);

// DTL.Condition Desc. 5  USR = Condition name of DTL.Record Status
DTL.Condition_Desc_5_USR = RTVCND(DTL.Record_Status);

EXECUTE FUNCTION(Rtv Item Class Desc    RT) TYPE(RTVOBJ) FILE(OMFAREP)          AC1205440;
PARAMETER(DB1.Item_Structure_Class_Code);
PARAMETER(DTL.Item_Structure_Class_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Group Description  RT) TYPE(RTVOBJ) FILE(OME9REP)          AC1202656;
PARAMETER(DB1.Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(DTL.Item_Structure_Group_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Type Description   RT) TYPE(RTVOBJ) FILE(OME8REP)          AC1229616;
PARAMETER(DB1.Item_Structure_Type_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Validate detail screen

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Item Class Desc    RT) TYPE(RTVOBJ) FILE(OMFAREP)          AC1205440;
PARAMETER(DTL.Item_Structure_Class_Code);
PARAMETER(DTL.Item_Structure_Class_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Group Description  RT) TYPE(RTVOBJ) FILE(OME9REP)          AC1202656;
PARAMETER(DTL.Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(DTL.Item_Structure_Group_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Type Description   RT) TYPE(RTVOBJ) FILE(OME8REP)          AC1229616;
PARAMETER(DTL.Item_Structure_Type_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Process command keys

//?Display item/warehouse detail
CASE;

// IF DTL.*CMD key is *On Hand Details
IF DTL.*CMD_key = '16';

// LCL.*Initial call = CND.*YES
LCL.*Initial_call = 'Y';

CASE;

// IF LCL.Lot Tracking Flag is yes
IF LCL.Lot_Tracking_Flag = 'Y';

// Call program Dsp Item Lot Locs     DF.
CALL PROGRAM(Dsp Item Lot Locs     DF) ('PDH2DFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(*ZERO);
PARAMETER(LCL.*Initial_call);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Dsp Item/Whse Inqy Dtl DF.
CALL PROGRAM(Dsp Item/Whse Inqy Dtl DF) ('ICQ9DFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Description_Line_One);
PARAMETER(DTL.UOM_Primary);
PARAMETER(DTL.Conversion_Factor_1);
PARAMETER(DTL.Operation_Factor_1);
PARAMETER(DTL.UOM_Second);
PARAMETER(DTL.Conversion_Factor_2);
PARAMETER(DTL.Operation_Factor_2);
PARAMETER(DTL.UOM_Third);
PARAMETER(DTL.Unit_Weight);
PARAMETER(DTL.Production_Date_Control);
PARAMETER(DTL.Catch_Weight_Status);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Warehouse_Description);
PARAMETER(DTL.Name);
PARAMETER(LCL.*Initial_call);

ENDIF;

ENDIF;

//?Display transaction detail
CASE;

// IF DTL.*CMD key is *Transaction Detail
IF DTL.*CMD_key = '19';

// Call program Dsp Transaction Dtl    DF.
CALL PROGRAM(Dsp Transaction Dtl    DF) ('ICR6DFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Description_Line_One);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Warehouse_Description);
PARAMETER(DTL.Name);

ENDIF;

