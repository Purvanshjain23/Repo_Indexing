// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMU6PFR
// ?Date: 14.08.2025 Time: 12:05:46
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('I/C');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


//?USER: Record selection processing

//?skip physical count
CASE;

// IF DB1.Inventory Trans. Type is Physical Count
IF DB1.Inventory_Trans_Type = 'P';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?** Determine the PA Group
// WRK.Avail Group Code 1 USR = CON.*BLANK
WRK.Avail_Group_Code_1_USR = *BLANK;

//?** Test Availability Group for F&G or passed in group code
CASE;

// IF PAR.Availability Group Code is All Finished & WIP
IF PAR.Availability_Group_Code = 'F&W';

//?** Test for Finished Goods first
EXECUTE FUNCTION(Val Existance         RT) TYPE(RTVOBJ) FILE(PDKLREP)           AC1390296;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER('ALL');
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF WRK.Record Found USR is Record Found
IF WRK.Record_Found_USR = 'Y';

// WRK.Avail Group Code 1 USR = CON.ALL
WRK.Avail_Group_Code_1_USR = 'ALL';

// IF *OTHERWISE
IF *OTHERWISE;

//?** Test for Work in Progress (WIP)
EXECUTE FUNCTION(Val Existance         RT) TYPE(RTVOBJ) FILE(PDKLREP)           AC1390296;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER('WIP');
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF WRK.Record Found USR is Record Found
IF WRK.Record_Found_USR = 'Y';

// WRK.Avail Group Code 1 USR = CON.WIP
WRK.Avail_Group_Code_1_USR = 'WIP';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** Test Availability Group for F&G or passed in group code
// IF *OTHERWISE
IF *OTHERWISE;

//?** Otherwise, test for the PA Group code that was passed in
EXECUTE FUNCTION(Val Existance         RT) TYPE(RTVOBJ) FILE(PDKLREP)           AC1390296;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(PAR.Availability_Group_Code);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF WRK.Record Found USR is Record Found
IF WRK.Record_Found_USR = 'Y';

// WRK.Avail Group Code 1 USR = PAR.Availability Group Code
WRK.Avail_Group_Code_1_USR = PAR.Availability_Group_Code;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Print required level headings

// SUPPRESSED PRINT Company Number header format

// SUPPRESSED PRINT Warehouse Code header format

// SUPPRESSED PRINT Item Code header format

// SUPPRESSED PRINT Shift Number header format

// SUPPRESSED PRINT Inventory Trans. ID header format

// SUPPRESSED PRINT Inventory Trans. Type header format

// SUPPRESSED PRINT Reason Code header format

//?USER: On print of detail format

MOVE *ALL (To: CUR From: DB1);

// PAR.To Date               USR = DB1.Transaction Date Code
PAR.To_Date_USR = DB1.Transaction_Date_Code;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

//?USER: Process after print of detail format

// WRK.Transaction Quantity = WRK.Transaction Quantity + CUR.Transaction Quantity
WRK.Transaction_Quantity = WRK.Transaction_Quantity + CUR.Transaction_Quantity;

// WRK.Transaction Weight = WRK.Transaction Weight + CUR.Transaction Weight
WRK.Transaction_Weight = WRK.Transaction_Weight + CUR.Transaction_Weight;

// WRK.Extended Amount = WRK.Extended Amount + CUR.Extended Amount
WRK.Extended_Amount = WRK.Extended_Amount + CUR.Extended_Amount;

//?USER: Print required level totals

// SUPPRESSED PRINT Reason Code totals format

// SUPPRESSED PRINT Inventory Trans. Type totals format

// SUPPRESSED PRINT Inventory Trans. ID totals format

CASE;

IF NEW Shift_Number;
// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

EXECUTE FUNCTION(RTV Pces/Bag,Bag/Unit  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1480428;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(WRK.Description_Line_One);
PARAMETER(WRK.Unit_Weight);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Calculate Pieces
WRK.USR_Pieces = ( WRK.Transaction_Quantity * PAR.Pieces_Per_Bag 'H' ) * PAR.Bags_Per_Unit         +
'H';

CASE;

// IF WRK.Transaction Weight is Not equal zero
IF WRK.Transaction_Weight <> *ZERO;

// WRK.USR Transaction-Unit Cost = WRK.Extended Amount / WRK.Transaction Weight *Rounded
WRK.USR_Transaction_Unit_Cost = WRK.Extended_Amount / WRK.Transaction_Weight 'H';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR Transaction-Unit Cost = CON.*ZERO
WRK.USR_Transaction_Unit_Cost = *ZERO;

ENDIF;

CASE;

// IF WRK.Transaction Quantity is not equal zero
IF WRK.Transaction_Quantity <> *ZERO;

// WRK.Weight 10.2           usr = WRK.Transaction Weight / WRK.Transaction Quantity *Rounded
WRK.Weight_10_2_usr = WRK.Transaction_Weight / WRK.Transaction_Quantity 'H';

ENDIF;

//?** Calc the Weight Difference
// WRK.USR Weight 2 = WRK.Weight 10.2           usr - WRK.Unit Weight
WRK.USR_Weight_2 = WRK.Weight_10_2_usr - WRK.Unit_Weight;

//?** Get the Sales Yield and the Standard pkg and labor costs
//?** Standard costs are stored only at the 360 company level at this time
// WRK.Company Number = CND.Guymon
WRK.Company_Number = 360;

EXECUTE FUNCTION(Rtv Item Sales Yield  RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1685363;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Item_Code);
PARAMETER(WRK.Sales_Yield);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv ITJ Standard Costs RT) TYPE(RTVOBJ) FILE(POAXCPP)          AC1885006;
PARAMETER(WRK.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(PAR.To_Date_USR);
PARAMETER(NLL.Yield);
PARAMETER(WRK.Pump_Yield);
PARAMETER(WRK.Std_Packaging_Cost_CWT);
PARAMETER(WRK.Std_Inc_Labor_Cost_CWT);
PARAMETER(WRK.Std_Total_Labor_Cost_CWT);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(Rtv Item Defaults      RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1371761;
PARAMETER(CUR.Item_Code);
PARAMETER(WRK.Item_Description);
PARAMETER(NLL.Description_Line_Two);
PARAMETER(WRK.UOM_Primary_Dft);
PARAMETER(NLL.Conversion_Factor_1);
PARAMETER(NLL.Operation_Factor_1);
PARAMETER(NLL.UOM_Second_Dft);
PARAMETER(NLL.Conversion_Factor_2);
PARAMETER(NLL.Operation_Factor_2);
PARAMETER(NLL.UOM_Third_Dft);
PARAMETER(NLL.UOM_Pricing_Dft);
PARAMETER(WRK.Unit_Weight);
PARAMETER(NLL.Catch_Weight_Status);
PARAMETER(NLL.Item_Structure_Class_Code);
PARAMETER(NLL.Item_Structure_Group_Code);
PARAMETER(NLL.Item_Structure_Type_Code);
PARAMETER(NLL.Item_Type_Code);
PARAMETER(NLL.Package_Type_Code);
PARAMETER(NLL.Base_Conv_Loss_Item);
PARAMETER(NLL.Variety_Rendered_Cut);
PARAMETER(NLL.Frozen_Make_to_Order_Sts);
PARAMETER(NLL.Credit_Item_Status);
PARAMETER(NLL.Seconds_Item);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Format the percentage before writing to the file
// WRK.Yield = WRK.Pump Yield * CON.100 *Rounded
WRK.Yield = WRK.Pump_Yield * 100 'H';

//?** Don't write if the transaction quantity is zeros
CASE;

// IF CUR.Transaction Quantity is not equal zero
IF CUR.Transaction_Quantity <> *ZERO;

EXECUTE FUNCTION(CRT WF Inv Trans Jrnl  CR) TYPE(CRTOBJ) FILE(PMDZCPP)          AC1884963;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Shift_Number);
PARAMETER(WRK.Avail_Group_Code_1_USR);
PARAMETER(CUR.Transaction_Date_Code);
PARAMETER(CUR.Inventory_Trans_ID);
PARAMETER(CUR.Inventory_Trans_Type);
PARAMETER(*ZERO);
PARAMETER(WRK.Transaction_Quantity);
PARAMETER(WRK.USR_Pieces);
PARAMETER(WRK.Transaction_Weight);
PARAMETER(WRK.Unit_Weight);
PARAMETER(WRK.USR_Transaction_Unit_Cost);
PARAMETER(WRK.Item_Description);
PARAMETER(CUR.UOM_Cost);
PARAMETER(WRK.UOM_Primary_Dft);
PARAMETER(WRK.Extended_Amount);
PARAMETER(CUR.Reason_Code);
PARAMETER(*ZERO);
PARAMETER(WRK.USR_Weight_2);
PARAMETER(WRK.Sales_Yield);
PARAMETER(WRK.Yield);
PARAMETER(WRK.Std_Packaging_Cost_CWT);
PARAMETER(WRK.Std_Inc_Labor_Cost_CWT);
PARAMETER(WRK.Std_Total_Labor_Cost_CWT);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);

ENDIF;

// Print Shift Number totals format
PRINT Shift Number totals format;

//?** Clear work variables
// WRK.Transaction Weight = CON.*ZERO
WRK.Transaction_Weight = *ZERO;

// WRK.Transaction Quantity = CON.*ZERO
WRK.Transaction_Quantity = *ZERO;

// WRK.Extended Amount = CON.*ZERO
WRK.Extended_Amount = *ZERO;

ENDIF;

// SUPPRESSED PRINT Item Code totals format

// SUPPRESSED PRINT Warehouse Code totals format

// SUPPRESSED PRINT Company Number totals format

