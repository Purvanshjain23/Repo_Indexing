// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDPKXFR
// ?Date: 14.08.2025 Time: 03:32:44
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(CHG Delete Detail Line RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1426408;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.Header_Status);
PARAMETER(PAR.Order_Value_Total);
PARAMETER(PAR.Order_Weight_Total);
PARAMETER(PAR.Scheduled_Ship_Date);
{
 //?USER: Initialize routine

 //?***** PA PROCESS - USE REQUESTED SHIP DATE FOR Ship Date USR *****
 // WRK.USR Quantity = CON.*ZERO
 WRK.USR_Quantity = *ZERO;

 //?USER: Process Data record

 //?Set control for inventory update
 // WRK.USR Status (Y/N) = CND.yes
 WRK.USR_Status_Y_N = 'Y';

 //?If negative quantity then no inventory update required
 CASE;

 // IF DB1.Quantity Ordered is Less than zero
 IF DB1.Quantity_Ordered < *ZERO;

 // WRK.USR Status (Y/N) = CND.no
 WRK.USR_Status_Y_N = 'N';

 ENDIF;

 //?Bypass if affect inventory is no
 CASE;

 // IF DB1.Affect Inventory Status is no
 IF DB1.Affect_Inventory_Status = 'N';

 // WRK.USR Status (Y/N) = CND.no
 WRK.USR_Status_Y_N = 'N';

 ENDIF;

 //?Bypass if entered status
 CASE;

 // IF DB1.Detail Line Status is Entered
 IF DB1.Detail_Line_Status = 'E';

 // WRK.USR Status (Y/N) = CND.no
 WRK.USR_Status_Y_N = 'N';

 ENDIF;

 //?Determine quantity open on this line
 DO;

 CASE;

 // IF DB1.Detail Line Status is Cancel Status Types
 IF DB1.Detail_Line_Status = 'L'/'A'/'E'/'H';

 //?If entered status force control value to N
 CASE;

 // IF DB1.Detail Line Status is Entered
 IF DB1.Detail_Line_Status = 'E';

 // WRK.USR Status (Y/N) = CND.no
 WRK.USR_Status_Y_N = 'N';

 ENDIF;

 // WRK.Quantity Ordered = DB1.Quantity Ordered - DB1.Quantity Shipped Total
 WRK.Quantity_Ordered = DB1.Quantity_Ordered - DB1.Quantity_Shipped_Total;

 // WRK.Quantity Allocated = DB1.Quantity Allocated
 WRK.Quantity_Scheduled = DB1.Quantity_Scheduled;

 // WRK.USR Order Weight = WRK.Quantity Ordered * DB1.Unit Weight Ordered U/M *Round
 WRK.USR_Order_Weight = WRK.Quantity_Ordered * DB1.Unit_Weight_Ordered_U_M 'H';

 // PAR.USR Order Weight = PAR.USR Order Weight - WRK.USR Order Weight
 PAR.USR_Order_Weight = PAR.USR_Order_Weight - WRK.USR_Order_Weight;

 // PAR.USR Order Value = PAR.USR Order Value - DB1.Extended Amount
 PAR.USR_Order_Value = PAR.USR_Order_Value - DB1.Extended_Amount;

 ENDIF;

 ENDDO;

 //?Process Inventory update if required by control field
 DO;

 // WRK.Quantity Backordered = DB1.Quantity Ordered - DB1.Quantity Scheduled
 WRK.Quantity_Backordered = DB1.Quantity_Ordered - DB1.Quantity_Scheduled;

 //?update availability  if Prod Plan sts is " " = yes - chgd fp1054 6/17/09
 CASE;

 // IF DB1.OD Production Plan Sts is Yes
 IF DB1.OD_Production_Plan_Sts = *BLANK;

 // PAR.Quantity Scheduled = DB1.Quantity Scheduled
 PAR.Quantity_Scheduled = DB1.Quantity_Scheduled;

 // PAR.Weight Scheduled = DB1.Weight Scheduled
 PAR.Weight_Scheduled = DB1.Weight_Scheduled;

 // Call program UPD Avail-To-Sell  ORD XF.
 CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Quantity_Scheduled);
 PARAMETER(PAR.Weight_Scheduled);
 PARAMETER('OD');
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(DB1.Item_Age_Days);
 PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
 PARAMETER(DB1.Production_Ovr_AgeDte_To);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Scheduled = CON.*ZERO
 PAR.Quantity_Scheduled = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 ENDIF;

 ENDDO;

 //?Update detail record to indicate delete status
 DO;

 CASE;

 // IF PAR.Header Status is Entered
 IF PAR.Header_Status = 'E';

 EXECUTE FUNCTION(DLT PD Order Detail    DL) TYPE(DLTOBJ) FILE(OPBGWKP)          AC1204566;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Set status to cancelled
 // WRK.Detail Line Status Last = DB1.Detail Line Status
 WRK.Detail_Line_Status_Last = DB1.Detail_Line_Status;

 // WRK.Detail Line Status = CND.Cancelled
 WRK.Detail_Line_Status = 'X';

 EXECUTE FUNCTION(CHG PD Order Detail    CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1425286;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Order_Group_Code);
 PARAMETER(WRK.Detail_Line_Status);
 PARAMETER(WRK.Detail_Line_Status_Last);
 PARAMETER(DB1.Billing_Detail_Cost_Dol);
 PARAMETER(DB1.Billing_Detail_Gross_Dol);
 PARAMETER(DB1.Billing_Detail_Net_Dol);
 PARAMETER(DB1.Quantity_to_Substitute);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Extended_Amount);
 PARAMETER(DB1.Market_Pricing_Date);
 PARAMETER(DB1.Commodity_Market_Code);
 PARAMETER(DB1.Date_Method_Code);
 PARAMETER(DB1.Price_Method_Code);
 PARAMETER(DB1.Price_Overage_Override);
 PARAMETER(DB1.Contract_Number);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Pricing_Date_Used);
 PARAMETER(DB1.U_M_Base_Price);
 PARAMETER(DB1.U_M_Ordered);
 PARAMETER(DB1.Work_Confirm_Status);
 PARAMETER(DB1.Work_Over_Short_Status);
 PARAMETER(DB1.OD_Production_Plan_Sts);
 PARAMETER(DB1.Order_Desc_Line_One);
 PARAMETER(DB1.Order_Desc_Line_Two);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Catch_Weight_Status);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Audit_Reason_Code);
 PARAMETER(DB1.Production_Date_Control);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.Quantity_Ordered);
 PARAMETER(DB1.Weight_Ordered);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.Quantity_Shipped_Total);
 PARAMETER(DB1.Weight_Shipped_Total);
 PARAMETER(DB1.Unit_Cost_Pricing_U_M);
 PARAMETER(DB1.Unit_Cost_Per_Pound);
 PARAMETER(DB1.Unit_Price);
 PARAMETER(DB1.Unit_Price_Credit);
 PARAMETER(DB1.Unit_Price_Ordered_U_M);
 PARAMETER(DB1.Unit_Weight_Ordered_U_M);
 PARAMETER(DB1.Tare_Weight_Total);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Affect_Inventory_Status);
 PARAMETER(DB1.Affect_Sales_Doll_Status);
 PARAMETER(DB1.Affect_Sales_Pnds_Status);
 PARAMETER(DB1.Item_Structure_Type_Code);
 PARAMETER(DB1.Item_Structure_Group_Code);
 PARAMETER(DB1.Item_Structure_Class_Code);
 PARAMETER(DB1.Item_Level);
 PARAMETER(DB1.Quality_Level);
 PARAMETER(DB1.Pricing_Product_Class_Rep);
 PARAMETER(DB1.Season_Product_Class_Repo);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.User_Profile_Name);
 PARAMETER(DB1.Country_Code);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.Substituted_Flag);
 PARAMETER(DB1.OD_Schedule_Override_Sts);
 PARAMETER(DB1.Invoice_Unit_Price);
 PARAMETER(DB1.Invoice_Extended_Amt);
 PARAMETER(DB1.Ham_Group_Number);
 PARAMETER(DB1.OD_Adj_Type_Override);
 PARAMETER(DB1.Affect_Trade_Fund);
 PARAMETER(DB1.Affect_Commission);
 PARAMETER(DB1.Affect_Pricing);
 PARAMETER(DB1.Released_by_User_Sts_Y_N);
 PARAMETER(DB1.Ord_TF_Exempt_Code);
 PARAMETER(DB1.OD_Pallet_Type);
 PARAMETER(DB1.Production_Warehouse);
 PARAMETER(DB1.OD_Price_Type);
 PARAMETER(DB1.Warehouse_Pallets_Loaded);
 PARAMETER(DB1.Consumed_Item_Code);
 PARAMETER(DB1.Deadline_Depart_Date_LH);
 PARAMETER(DB1.OD_Price_Type_Ref_Num);
 PARAMETER(DB1.OD_Firm_Date);
 PARAMETER(DB1.Deadline_Depart_Time_LH);
 PARAMETER(DB1.Price_Code);
 PARAMETER(DB1.Maximum_Net_Weight);
 PARAMETER(DB1.Substitution_Line_Number);
 PARAMETER(DB1.Max_Qty_to_sched_per_day);
 PARAMETER(DB1.Warehouse_Pallet_Tare);
 PARAMETER(DB1.Warehouse_Avg_Pallet_Tare);
 PARAMETER(DB1.OD_Item_Target_Price);
 PARAMETER(DB1.OD_Estimated_Gross_Weight);
 PARAMETER(DB1.OD_Maximum_Unit_Weight);
 PARAMETER(DB1.Order_Gate_Final_Price);
 PARAMETER(DB1.OD_Ceiling_Price);
 PARAMETER(DB1.OD_Gate_Final_Price_Adj);
 PARAMETER(DB1.OD_Weighted_Avg_Price);
 PARAMETER(DB1.OD_Original_Ordered_Qty);
 PARAMETER(DB1.OD_Cancel_Date);
 PARAMETER(DB1.OD_Unused_Prc_7);
 PARAMETER(DB1.OD_Unused_Prc_8);
 PARAMETER(DB1.OD_MPR_Sent_to_USDA_Sts);
 PARAMETER(DB1.OD_MPR_Prc_Ready_to_Send);
 PARAMETER(DB1.OD_UnUsed_Price_Sts_3);
 PARAMETER(DB1.Weight_Amount_Entered);
 PARAMETER(DB1.Item_Age_Days);
 PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
 PARAMETER(DB1.Production_Ovr_AgeDte_To);
 PARAMETER(DB1.OD_Spot_Buy);
 PARAMETER(DB1.OD_Clm_Full_Return_to_Plt);
 PARAMETER(DB1.Order_Line_Error_Type);
 PARAMETER(DB1.OD_Market_Begin_Date);
 PARAMETER(DB1.OD_Market_Ending_Date);
 PARAMETER(DB1.OD_Atch_to_Ord_ActShpDte);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 {
  //?USER: Processing after Data read

  //?E2247 RMC 10/03/12 Crt chg log if dtl has been sent to MPR USDA
  CASE;

  // IF DB1.OD MPR Sent to USDA Sts is yes
  IF DB1.OD_MPR_Sent_to_USDA_Sts = 'Y';

  //?If price type changes, then create type: ORDPRT
  CASE;

  // IF DB1.OD Price Type NE PAR.OD Price Type
  IF DB1.OD_Price_Type <> PAR.OD_Price_Type;

  //?change log prior has seq in pos 1-3, price type 5-7: '001 NEG     '
  // LCL.Text 3 Length USR = DB1.Order Sequence Number
  LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

  // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,DB1.OD Price Type,CON.1)
  LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + DB1.OD_Price_Type (1);

  // LCL.Change Log New Value = PAR.OD Price Type
  LCL.Change_Log_New_Value = PAR.OD_Price_Type;

  // Call program CRT Load/OrderChg n/ld XF.
  CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
  PARAMETER(*ZERO);
  PARAMETER('ORDPRT');
  PARAMETER('SLS');
  PARAMETER(LCL.Change_Log_Prior_Value);
  PARAMETER(LCL.Change_Log_New_Value);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);

  ENDIF;

  ENDIF;

  //?If not the transfer order nbr 9999999 -> crt chg logs
  CASE;

  // IF DB1.Order Number is ne 9999999
  IF DB1.Order_Number <> 9999999;

  //?If qty changes, then create type: ORDWGT & ORDQTY ->ALWAYS 6/14/13
  CASE;

  // IF DB1.Quantity Ordered NE PAR.Quantity Ordered
  IF DB1.Quantity_Ordered <> PAR.Quantity_Ordered;

  // OR PAR.Detail Line Status is Cancelled
  OR PAR.Detail_Line_Status = 'X';

  //?(do this off of qty, because wgt can change often since unit wgt changes)
  //?change log prior has seq in pos 1-3, weight in 5-11: '001 0000nnn'
  // LCL.Text 3 Length USR = DB1.Order Sequence Number
  LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

  // LCL.Weight Beg Inv usr = DB1.Weight Ordered
  LCL.Weight_Beg_Inv_usr = DB1.Weight_Ordered;

  // LCL.Text USR 7 = LCL.Weight Beg Inv usr
  LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

  // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
  LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

  // LCL.Weight Beg Inv usr = PAR.Weight Ordered
  LCL.Weight_Beg_Inv_usr = PAR.Weight_Ordered;

  //?WI642-For cancelled item line new weight is zero for log only.
  CASE;

  // IF PAR.Detail Line Status is Cancelled
  IF PAR.Detail_Line_Status = 'X';

  // LCL.Weight Beg Inv usr = CND.Not Entered
  LCL.Weight_Beg_Inv_usr = *ZERO;

  ENDIF;

  // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
  LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

  // Call program CRT Load/OrderChg n/ld XF.
  CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
  PARAMETER(*ZERO);
  PARAMETER('ORDWGT');
  PARAMETER('SLS');
  PARAMETER(LCL.Change_Log_Prior_Value);
  PARAMETER(LCL.Change_Log_New_Value);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);

  // LCL.Weight Beg Inv usr = DB1.Quantity Ordered
  LCL.Weight_Beg_Inv_usr = DB1.Quantity_Ordered;

  // LCL.Text USR 7 = LCL.Weight Beg Inv usr
  LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

  // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
  LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

  // LCL.Weight Beg Inv usr = PAR.Quantity Ordered
  LCL.Weight_Beg_Inv_usr = PAR.Quantity_Ordered;

  //?WI642-For cancelled item line new quantity is zero for log only.
  CASE;

  // IF PAR.Detail Line Status is Cancelled
  IF PAR.Detail_Line_Status = 'X';

  // LCL.Weight Beg Inv usr = CND.Not Entered
  LCL.Weight_Beg_Inv_usr = *ZERO;

  ENDIF;

  // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
  LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

  // Call program CRT Load/OrderChg n/ld XF.
  CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
  PARAMETER(*ZERO);
  PARAMETER('ORDQTY');
  PARAMETER('SLS');
  PARAMETER(LCL.Change_Log_Prior_Value);
  PARAMETER(LCL.Change_Log_New_Value);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);

  ENDIF;

  ENDIF;

  //?USER: Processing before Data update

  // DB1.Age Code = CND.Blank
  DB1.Age_Code = *BLANK;

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  EXECUTE FUNCTION(Rtv Item Typ/Grp/Cls  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1298334;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Type_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Production_Warehouse);
  PARAMETER(NLL.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Calc Gross Weight from tares...    copied from Dsp Gross Wgt function
  DO;

  // Call program Rtv Tare Weight        XF.
  CALL PROGRAM(Rtv Tare Weight        XF) ('PBI3XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Misc_Tare_Weight);

  //?wi464 change
  // Call program RTV Itm BxID & Tares  XF.
  CALL PROGRAM(RTV Itm BxID & Tares  XF) ('PBI4XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Box_Weight);
  PARAMETER(LCL.Number_Cases_On_A_Pallet);
  PARAMETER(LCL.Pallet_Tare_Weight);
  PARAMETER(LCL.Box_iD);
  PARAMETER(DB1.OD_Pallet_Type);

  // LCL.Total Tare USR = LCL.Box Weight + LCL.Misc Tare Weight
  LCL.Total_Tare_USR = LCL.Box_Weight + LCL.Misc_Tare_Weight;

  // Box + Misc Tare
  LCL.Weight_1_1_U = ( LCL.Box_Weight + LCL.Misc_Tare_Weight ) * DB1.Quantity_Ordered 'H';

  //?Pallet Tare
  CASE;

  // IF DB1.Palletize is yes
  IF DB1.Palletize = 'Y';

  CASE;

  // IF LCL.Number Cases On A Pallet is GT Zero
  IF LCL.Number_Cases_On_A_Pallet > *ZERO;

  // Pallet Weight
  LCL.Weight_1_2_U = ( DB1.Quantity_Ordered / LCL.Number_Cases_On_A_Pallet 'H' )
  * LCL.Pallet_Tare_Weight 'H';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Weight 1.2             .U = CON.*ZERO
  LCL.Weight_1_2_U = *ZERO;

  ENDIF;

  //?Pallet Tare
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Weight 1.2             .U = CON.*ZERO
  LCL.Weight_1_2_U = *ZERO;

  ENDIF;

  // Estimated Gross
  DB1.OD_Estimated_Gross_Weight = ( DB1.Weight_Ordered + LCL.Weight_1_1_U )
  + LCL.Weight_1_2_U;

  //?E00196 RMC 8/24/12 chk pfs interface SHPTRN too
  ENDDO;

 }

 ENDIF;

 ENDDO;

}


EXECUTE FUNCTION(DLT Detl Com p/Ord Dtl RT) TYPE(RTVOBJ) FILE(OPCPCPP)          AC1857620;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(*ZERO);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(DLT OP Detail Comment  DL) TYPE(DLTOBJ) FILE(OPCPCPP)          AC1128513;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Sequence_Number);
}


EXECUTE FUNCTION(DLT Shipping Fin       RT) TYPE(RTVOBJ) FILE(OMCRWKP)          AC1306738;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(*ZERO);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 EXECUTE FUNCTION(DLT Shipping Detail    DL) TYPE(DLTOBJ) FILE(OMCRWKP)          AC1306739;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Sequence_Number);
}


EXECUTE FUNCTION(CHG Dtl Price Status   RT) TYPE(RTVOBJ) FILE(PDIMCPP)          AC1426418;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER('I');
{
 //?USER: Process Data record

 EXECUTE FUNCTION(CHG Dtl Price Status   CH) TYPE(CHGOBJ) FILE(PDIMCPP)          AC1426417;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(DB1.Price_Detail_Sequence);
 PARAMETER(DB1.Componant_Price);
 PARAMETER(PAR.PD_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


EXECUTE FUNCTION(CHG Ship Dtl Form Sts  RT) TYPE(RTVOBJ) FILE(PDJKCPP)          AC1426420;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER('I');
{
 //?USER: Process Data record

 EXECUTE FUNCTION(CHG Ship Dtl Form Sts  CH) TYPE(CHGOBJ) FILE(PDJKCPP)          AC1426419;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Pricing_Sequence_Number);
 PARAMETER(PAR.PD_Status);
}


EXECUTE FUNCTION(Rtv & Dlt for Cancel  RT) TYPE(RTVOBJ) FILE(PDMSREP)           AC1612159;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Del Exp Doc Order Dtl  DL) TYPE(DLTOBJ) FILE(PDMSREP)          AC1524037;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.ED_Export_Document_Type);
 PARAMETER(DB1.Country_Code);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
}


//?RMC 11/28/07  Added this delete. if they shipped/unshipped/took order
//?    off the load/Cancelled the order, they were staying in the file.
EXECUTE FUNCTION(Del OrdDtl Inv Alloc  RT) TYPE(RTVOBJ) FILE(PDL8CPP)           AC1513139;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Del Order Inv Alloc   DL) TYPE(DLTOBJ) FILE(PDL8CPP)           AC1505797;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Allocation_Seq_#);
}


