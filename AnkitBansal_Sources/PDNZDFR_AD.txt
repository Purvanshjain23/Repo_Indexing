// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDNZDFR
// ?Date: 14.08.2025 Time: 03:29:01
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.Order Sequence Number = CON.*ZERO
PAR.Order_Sequence_Number = *ZERO;

// PAR.Order Secondary Line Seq = CON.*ZERO
PAR.Order_Secondary_Line_Seq = *ZERO;

//?Change Usr lines on screen to 999 to retrieve last order detail line
EXECUTE FUNCTION(RTV Last Order Seq #'s RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428469;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 MOVE *ALL (To: PAR From: DB1);

 ENDIF;

}


// PAR.Allow CMD13 Accept Price = CND.no
PAR.Allow_CMD13_Accept_Price = 'N';

// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// WRK.Display Flag = CND.No
WRK.Display_Flag = 'N';

//?USER: Initialize subfile control

//?RMC 6/4/13 use one RTV for OH fields, added cust po
EXECUTE FUNCTION(RTV Abs Frt,PO,Total  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2067291;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Customer_Purchase_Order_#);
PARAMETER(CTL.Order_Value_Total);
PARAMETER(CTL.Absorbed_Freight_Rate_CWT);
PARAMETER(CTL.Shipping_Method);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Event Date         RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1312203;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER('04');
PARAMETER(CTL.Actual_Ship_Date);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.USR Desc. 10 = Condition name of CTL.Price Audit
CTL.USR_Desc_10 = RTVCND(CTL.Price_Audit);

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Salesperson Name   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1111501;
PARAMETER(CTL.Salesperson_Code);
PARAMETER(CTL.Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(CRT Price Audit Log    CR) TYPE(CRTOBJ) FILE(PDKXCPP)          AC1409016;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Salesperson_Code);
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
PARAMETER('APE');
PARAMETER(CTL.Price_Audit);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // DB1.Job Name = JOB.*PROGRAM
 DB1.Job_Name = JOB.*PROGRAM;

}


//?** Retrieve shippping method from Order Header    2/16/06 LJB
//?** Retrieve condition name for retrieved status   2/16/06 LJB
// CTL.USR Shortened Name - 12 = Condition name of CTL.Shipping Method
CTL.USR_Shortened_Name_12 = RTVCND(CTL.Shipping_Method);

//?** Highlight freight if zeros and ship method = prepaid   2/17/06 LJB
CASE;

// IF CTL.Absorbed Freight Rate is EQ Zeros
IF CTL.Absorbed_Freight_Rate_CWT = *ZERO;

// AND CTL.Shipping Method is Prepaid
AND CTL.Shipping_Method = 'PR'/'PT';

// WRK.Display Flag = CND.Yes
WRK.Display_Flag = 'Y';

//?** Highlight freight if zeros and ship method = prepaid   2/17/06 LJB
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Display Flag = CND.No
WRK.Display_Flag = 'N';

ENDIF;

EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
PARAMETER(CTL.Company_Number);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?C2226 HPB display    8/17/12
CASE;

// IF LCL.Company Organization is High Plains Biodiesel
IF LCL.Company_Organization = 'H';

EXECUTE FUNCTION(RTV HPB Equiv only   RT) TYPE(RTVOBJ) FILE(PMAMREP)            AC2031845;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.HPB_Equivalence_Value_USR);
PARAMETER(LCL.OHE_HPB_RIN_Price);
PARAMETER(CTL.OHE_Override_Type_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF CTL.HPB Equivalence Value USR is Not Entered
IF CTL.HPB_Equivalence_Value_USR = *ZERO;

// CTL.HPB Equivalence Value USR = CON.1.5
CTL.HPB_Equivalence_Value_USR = 1.5;

ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv Gate Price        RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2064251;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(LCL.Order_Gate_Final_Price);
PARAMETER(LCL.OD_Gate_Final_Price_Adj);
PARAMETER(LCL.OD_Weighted_Avg_Price);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Order Gate Price is Not Zeros
 IF DB1.Order_Gate_Final_Price <> *ZERO;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


CASE;

// IF LCL.Order Gate/Final Price is Not Zeros
IF LCL.Order_Gate_Final_Price <> *ZERO;

EXECUTE FUNCTION(CLC Extend Prc f/ovrge RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2068676;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER('PM');
PARAMETER(CTL.Extended_Amount_Last);
{
 //?USER: Initialize routine

 // PAR.Extended Amount = CON.*ZERO
 PAR.Extended_Amount = *ZERO;

 EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
 PARAMETER(PAR.Company_Number);
 PARAMETER(NLL.Plant_Company_Sts);
 PARAMETER(PAR.Company_Organization);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?USER: Process Data record

 //?Load Quantity Shipped Total field.
 CASE;

 // IF DB1.Quantity Shipped Total is Equal to zero
 IF DB1.Quantity_Shipped_Total = *ZERO;

 // WRK.Quantity Shipped Total = CON.1
 WRK.Quantity_Shipped_Total = 1;

 //?Load Quantity Shipped Total field.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Quantity Shipped Total = DB1.Quantity Shipped Total
 WRK.Quantity_Shipped_Total = DB1.Quantity_Shipped_Total;

 ENDIF;

 //?Set quantity and weight according to order status
 CASE;

 // IF DB1.Detail Line Status is Avail/Alloc/Enter/Hold
 IF DB1.Detail_Line_Status = 'L'/'A'/'E'/'H';

 // AND DB1.Event Code is Entered Thru 03 Picked
 AND DB1.Event_Code >= '01';
 AND DB1.Event_Code <= '03';

 //?RMC 6/17/09 FP1054 use qty/wgt ordered instead of sched
 // PAR.USR Quantity = DB1.Quantity Ordered
 PAR.USR_Quantity = DB1.Quantity_Ordered;

 // PAR.USR Weight = DB1.Weight Ordered
 PAR.USR_Weight = DB1.Weight_Ordered;

 //?Set quantity and weight according to order status
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Quantity = WRK.Quantity Shipped Total
 PAR.USR_Quantity = WRK.Quantity_Shipped_Total;

 // PAR.USR Weight = DB1.Weight Shipped Total
 PAR.USR_Weight = DB1.Weight_Shipped_Total;

 ENDIF;

 // Call program RTV For Price Extent   XF.
 CALL PROGRAM(RTV For Price Extent   XF) ('PDXRXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(NLL.UOM_Pricing);
 PARAMETER(NLL.Unit_Weight);
 PARAMETER(NLL.Catch_Weight_Status);
 PARAMETER(PAR.Primal_Group_Code);

 // Call program RTV PrcMthTyp/PrcTyp  XF.
 CALL PROGRAM(RTV PrcMthTyp/PrcTyp  XF) ('PNS7XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Price_Method_Code);
 PARAMETER(LCL.Price_Method_Type);
 PARAMETER(LCL.PMH_Price_Type);

 //?Extend using price before gate price which is the Price overage override
 CASE;

 // IF LCL.Price Method Type is Gate Pricing
 IF LCL.Price_Method_Type = 'G';

 //?Use Price Overage Override
 CASE;

 // IF DB1.U/M - Base Price is Pounds
 IF DB1.U_M_Base_Price = 'LB';

 // PAR.Extended Amount = DB1.Price Overage Override * PAR.USR Weight *Rounded
 PAR.Extended_Amount = DB1.Price_Overage_Override * PAR.USR_Weight 'H';

 //?Use Price Overage Override
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Extended Amount = DB1.Price Overage Override * PAR.USR Quantity *Rounded
 PAR.Extended_Amount = DB1.Price_Overage_Override * PAR.USR_Quantity 'H';

 ENDIF;

 // PAR.Extended Amount Last = PAR.Extended Amount Last + PAR.Extended Amount
 PAR.Extended_Amount_Last = PAR.Extended_Amount_Last + PAR.Extended_Amount;

 //?Extend using price before gate price which is the Price overage override
 // IF *OTHERWISE
 IF *OTHERWISE;

 ENDIF;

}


ENDIF;

//?USER: Initialize subfile record from DBF record

//?Exclude cancelled lines
CASE;

// IF DB1.Detail Line Status is Cancelled
IF DB1.Detail_Line_Status = 'X';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?If last order sequence number has been read then allow CMD13=Yes
CASE;

// IF PAR.Order Sequence Number EQ DB1.Order Sequence Number
IF PAR.Order_Sequence_Number = DB1.Order_Sequence_Number;

// AND PAR.Order Secondary Line Seq EQ DB1.Order Secondary Line Seq
AND PAR.Order_Secondary_Line_Seq = DB1.Order_Secondary_Line_Seq;

// PAR.Allow CMD13 Accept Price = CND.yes
PAR.Allow_CMD13_Accept_Price = 'Y';

ENDIF;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?Save first line seq. numbers
CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// PAR.Seq No 1  PASS        USR = DB1.Order Sequence Number
PAR.Seq_No_1_PASS_USR = DB1.Order_Sequence_Number;

// PAR.Seq No 2  PASS        USR = DB1.Order Secondary Line Seq
PAR.Seq_No_2_PASS_USR = DB1.Order_Secondary_Line_Seq;

// CTL.Warehouse Code PASS   USR = DB1.Warehouse Code
CTL.Warehouse_Code_PASS_USR = DB1.Warehouse_Code;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

ENDIF;

//?Set substitution flag
CASE;

// IF DB1.Order Secondary Line Seq is GT 1
IF DB1.Order_Secondary_Line_Seq > 1;

// RCD.Substitution Flag = CND.yes
RCD.Substitution_Flag = 'Y';

//?Set substitution flag
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Substitution Flag = CND.Blanks
RCD.Substitution_Flag = *BLANK;

ENDIF;

// RCD.USR Quantity Shipped = RCD.Quantity Shipped Total
RCD.USR_Quantity_Shipped = RCD.Quantity_Shipped_Total;

EXECUTE FUNCTION(Val Check Exist        RT) TYPE(RTVOBJ) FILE(OMCRWKP)          AC1346895;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// RCD.USR Financials Exist = CND.yes
RCD.USR_Financials_Exist = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.USR Financials Exist = WRK.BLANK
RCD.USR_Financials_Exist = WRK.BLANK;

ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv Deduct/Add Exist  RT) TYPE(RTVOBJ) FILE(OMHQCPP)           AC1958156;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Deduct_Add_Sts_USR);
{
 //?USER: Initialize routine

 // PAR.Deduct/Add Sts USR = CND.blank
 PAR.Deduct_Add_Sts_USR = *BLANK;

 //?USER: Process Data record

 // PAR.Deduct/Add Sts USR = CND.yes
 PAR.Deduct_Add_Sts_USR = 'Y';

 QUIT;

}


//?USER: Process subfile control (Pre-confirm)

//?F13 - Accept Pricing
CASE;

// IF CTL.*CMD key is *Accept Pricing
IF CTL.*CMD_key = '13';

CASE;

// IF PAR.Allow CMD13 Accept Price is yes
IF PAR.Allow_CMD13_Accept_Price = 'Y';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Accept Pricing is not allowed until all detail lines have been displayed.'
ERROR(USR2373);

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

// Call program DSP Ship Price Details DF.
CALL PROGRAM(DSP Ship Price Details DF) ('PDM4DFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(PAR.Order_Type_Sales);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(PAR.Ship_To_Name);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Extended_Amount);
PARAMETER(RCD.Market_Pricing_Date);
PARAMETER(RCD.Commodity_Market_Code);
PARAMETER(RCD.Date_Method_Code);
PARAMETER(RCD.Price_Method_Code);
PARAMETER(RCD.Price_Overage_Override);
PARAMETER(RCD.Contract_Number);
PARAMETER(RCD.Price_Status);
PARAMETER(RCD.Pricing_Date_Used);
PARAMETER(RCD.U_M_Base_Price);
PARAMETER(RCD.U_M_Ordered);
PARAMETER(RCD.Order_Desc_Line_One);
PARAMETER(RCD.Price_Audit);
PARAMETER(RCD.Price_Audit_Reason_Code);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Quantity_Shipped_Total);
PARAMETER(RCD.Unit_Price);
PARAMETER(RCD.Unit_Price_Ordered_U_M);
PARAMETER(RCD.Unit_Weight_Ordered_U_M);
PARAMETER(RCD.Price_Code);
PARAMETER(RCD.OD_Ceiling_Price);
PARAMETER(RCD.OD_Market_Begin_Date);
PARAMETER(RCD.OD_Market_Ending_Date);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF RCD.*SFLSEL is *Financial Detail
IF RCD.*SFLSEL = '7'/'7';

// Call program DSP Ship Detail Finan. DF.
CALL PROGRAM(DSP Ship Detail Finan. DF) ('PDWRDFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Order_Desc_Line_One);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

// Call program Dsp Ord Dtl Accr      DF.
CALL PROGRAM(Dsp Ord Dtl Accr      DF) ('PNNEDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Ship_To_Customer);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

// PGM.*Reload subfile = CND.*NO
PGM.*Reload_subfile = 'N';

//?USER: Process subfile control (Post-confirm)

CASE;

// IF CTL.*CMD key is *Accept Pricing
IF CTL.*CMD_key = '13';

EXECUTE FUNCTION(UPD Accept Price Audit RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1311690;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 EXECUTE FUNCTION(RTV Next Audit Seq #   RT) TYPE(RTVOBJ) FILE(PDK3CPP)          AC1429793;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(999);
 PARAMETER(WRK.USR_Sequence_Num_New_ATR);
 {
  //?USER: Processing if Data record not found

  // PAR.USR Sequence Num. New ATR = CON.1
  PAR.USR_Sequence_Num_New_ATR = 1;

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PAR.USR Sequence Num. New ATR = DB1.Audit Sequence Number + CON.1
  PAR.USR_Sequence_Num_New_ATR = DB1.Audit_Sequence_Number + 1;

  QUIT;

 }

 EXECUTE FUNCTION(CRT Price Change Audit CR) TYPE(CRTOBJ) FILE(PDK3CPP)          AC1429780;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(WRK.USR_Sequence_Num_New_ATR);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Detail_Line_Status);
 PARAMETER(DB1.Detail_Line_Status_Last);
 PARAMETER(DB1.Extended_Amount);
 PARAMETER(DB1.Extended_Amount);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Price_Status);
 PARAMETER('M');
 PARAMETER(*BLANK);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Audit_Reason_Code);
 PARAMETER(DB1.Unit_Price);
 PARAMETER(DB1.Unit_Price);
 PARAMETER(DB1.Unit_Price_Credit);
 PARAMETER(DB1.Unit_Price_Credit);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Event_Code);
 PARAMETER('PA');
 PARAMETER(JOB.*PROGRAM);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 EXECUTE FUNCTION(CHG Price Audit        CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1307906;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER('M');
 PARAMETER(*BLANK);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

}


// CTL.Price Audit = CND.Manually Price Audited
CTL.Price_Audit = 'M';

EXECUTE FUNCTION(CRT Price Audit Log    CR) TYPE(CRTOBJ) FILE(PDKXCPP)          AC1409016;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Salesperson_Code);
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
PARAMETER('PAU');
PARAMETER(CTL.Price_Audit);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // DB1.Job Name = JOB.*PROGRAM
 DB1.Job_Name = JOB.*PROGRAM;

}


EXECUTE FUNCTION(CHG Price Audit        CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1309247;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(CTL.Price_Audit);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


// PAR.Price Audit = CTL.Price Audit
PAR.Price_Audit = CTL.Price_Audit;

//?2014/09/09 PKD Create 855 during Price Audit also
EXECUTE FUNCTION(Val for PO Ack        IF) TYPE(EXCINTFUN)                      AC2041958;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER('PA');
PARAMETER(LCL.Trans_Type_1_PASS_USR);
{
 //?Execute internal function

 // LCL.EDI Process Flag = CND.Do not process
 LCL.EDI_Process_Flag = 'N';

 //?Retrieve the BT Customer
 EXECUTE FUNCTION(Rtv Order Info ALL    RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1745072;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(NLL.Order_Type_Sales);
 PARAMETER(LCL.AR_Customer_Number);
 PARAMETER(NLL.Ship_To_Customer);
 PARAMETER(NLL.Ship_To_Name);
 PARAMETER(NLL.Ship_To_Address_Line_1);
 PARAMETER(NLL.Ship_To_Address_Line_2);
 PARAMETER(NLL.Ship_To_Address_Line_3);
 PARAMETER(NLL.Ship_To_City);
 PARAMETER(NLL.Ship_To_State_Code);
 PARAMETER(NLL.Ship_To_Zip_Postal_Code);
 PARAMETER(NLL.Bill_to_Customer);
 PARAMETER(NLL.Bill_to_Name);
 PARAMETER(NLL.Bill_to_Address_Line_1);
 PARAMETER(NLL.Bill_to_Address_Line_2);
 PARAMETER(NLL.Bill_to_Address_Line_3);
 PARAMETER(NLL.Bill_to_City);
 PARAMETER(NLL.Bill_to_State_Code);
 PARAMETER(NLL.Bill_to_Zip_Postal_Code);
 PARAMETER(LCL.Customer_Purchase_Order_#);
 PARAMETER(NLL.Order_Date);
 PARAMETER(NLL.Requested_Ship_Date);
 PARAMETER(NLL.Actual_Shipped_Date);
 PARAMETER(NLL.Cancel_Date);
 PARAMETER(NLL.Terms_Code);
 PARAMETER(NLL.Special_Instructions);
 PARAMETER(NLL.Special_Instructions_2);
 PARAMETER(NLL.Carrier_Code);
 PARAMETER(NLL.Comment_Print_Acknowledge);
 PARAMETER(NLL.Comment_Print_Inv_Cr_Memo);
 PARAMETER(NLL.Comment_Print_Pick_Slip);
 PARAMETER(NLL.Comment_Print_Ship_Doc);
 PARAMETER(NLL.Reason_Code);
 PARAMETER(NLL.Order_in_Use);
 PARAMETER(NLL.Header_Status);
 PARAMETER(NLL.Header_Status_Last);
 PARAMETER(NLL.Order_Type_Print_Status);
 PARAMETER(NLL.Scheduled_Ship_Date);
 PARAMETER(NLL.User_Original_Entry);
 PARAMETER(NLL.Date_of_Original_Entry);
 PARAMETER(NLL.Order_Value_Total);
 PARAMETER(NLL.Order_Weight_Total);
 PARAMETER(NLL.Credit_Hold);
 PARAMETER(NLL.Production_Hold);
 PARAMETER(NLL.New_Customer_Hold);
 PARAMETER(NLL.Requested_Delivery_Date);
 PARAMETER(NLL.Requested_Delivery_Time);
 PARAMETER(NLL.Accounts_Receiv_Ent_1);
 PARAMETER(NLL.Accounts_Receiv_Ent_2);
 PARAMETER(NLL.Load_ID);
 PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
 PARAMETER(NLL.Rated_Freight);
 PARAMETER(NLL.LTL_Flag);
 PARAMETER(NLL.Price_Audit);
 PARAMETER(LCL.Price_Status);
 PARAMETER(NLL.Shipping_Method);
 PARAMETER(NLL.Export_Status);
 PARAMETER(NLL.Palletize);
 PARAMETER(NLL.Shrink_Wrap);
 PARAMETER(NLL.Slip_Sheet);
 PARAMETER(NLL.Age_Code);
 PARAMETER(NLL.Reefer_Temperature);
 PARAMETER(NLL.Load_Type);
 PARAMETER(NLL.Attach_to_Invoice_Number);
 PARAMETER(NLL.Load_Plan_Order);
 PARAMETER(NLL.Print_Pick_Slip);
 PARAMETER(NLL.Resell_Reference_Number);
 PARAMETER(NLL.Special_Comment_1);
 PARAMETER(NLL.Special_Comment_2);
 PARAMETER(NLL.Affect_Auto_Accruals);
 PARAMETER(NLL.Sales_Route_Code);
 PARAMETER(NLL.Manager_Level_Code);
 PARAMETER(NLL.VP_Level_Code);
 PARAMETER(NLL.Attach_to_Order_Number);
 PARAMETER(NLL.Reason_for_Price_Audit);
 PARAMETER(NLL.Invoice_Number);
 PARAMETER(NLL.Invoice_Suffix);
 PARAMETER(NLL.Invoice_Date);
 PARAMETER(NLL.Event_Code);
 PARAMETER(NLL.Trans_Contol_AS400_Plant);
 PARAMETER(NLL.Modified_Flag);
 PARAMETER(NLL.A_R_order_Value_Total);
 PARAMETER(NLL.Billing_Activity_Type);
 PARAMETER(NLL.Block_Order_Flag);
 PARAMETER(NLL.Order_Certification_Flag);
 PARAMETER(NLL.Invoice_Order_Value_Tot);
 PARAMETER(NLL.Process_Sts_for_3C);
 PARAMETER(NLL.Order_Conf_Fax_Sts);
 PARAMETER(NLL.Manifest_Fax_Sts);
 PARAMETER(NLL.Invoice_Fax_Sts);
 PARAMETER(NLL.Transfer_in_Storage_Ind);
 PARAMETER(NLL.Email_Cust_On_Order_Ship);
 PARAMETER(NLL.Order_Emailed);
 PARAMETER(NLL.Export_Docs_Go_w_Driver);
 PARAMETER(NLL.Shipping_Temp_Code_C_F);
 PARAMETER(NLL.Broker_Order_Status);
 PARAMETER(NLL.Air_Freight_Order);
 PARAMETER(NLL.Order_Requires_Review);
 PARAMETER(NLL.OH_Load_Plan_Ready);
 PARAMETER(NLL.Export_USDA_Approved);
 PARAMETER(NLL.HPB_Ship_to_Warehouse);
 PARAMETER(NLL.OH_TF_Exempt_Code);
 PARAMETER(NLL.OH_Appt_Confirmation_Dt);
 PARAMETER(NLL.JPN_Invoice_Issuance_Date);
 PARAMETER(NLL.Load_Actual_Shipped_Date);
 PARAMETER(NLL.Load_BOL_Complete_Date);
 PARAMETER(NLL.Load_Truck_Departure_Date);
 PARAMETER(NLL.Maximum_Gross_Weight);
 PARAMETER(NLL.Time_of_Original_Entry);
 PARAMETER(NLL.OH_Appt_Confirmation_Tm);
 PARAMETER(NLL.Load_BOL_Complete_Time);
 PARAMETER(NLL.Load_Truck_Departure_Time);
 PARAMETER(NLL.Act_Frt_Reference_Amount);
 PARAMETER(NLL.Act_Non_Ref_Frt_Amount);
 PARAMETER(NLL.OH_Fuel_Surcharge_Amount);
 PARAMETER(NLL.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(NLL.OH_Total_Ref_Frt_Amt);
 PARAMETER(NLL.Claim_Number);
 PARAMETER(NLL.EDI_Status_1);
 PARAMETER(NLL.EDI_Status_2);
 PARAMETER(NLL.EDI_Status_3);
 PARAMETER(NLL.Job_Time);
 PARAMETER(NLL.User_Id);
 PARAMETER(NLL.Job_Name);
 PARAMETER(NLL.Job_Date);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Check to see it the BT Cust should get a POA/POAC (ack or chgd ack)
 EXECUTE FUNCTION(RTV BT Intrchg BT custRT) TYPE(RTVOBJ) FILE(PNGQREP)           AC2023144;
 PARAMETER(LCL.AR_Customer_Number);
 PARAMETER('POACK');
 PARAMETER(LCL.POC_POCA);
 PARAMETER(LCL.EDI_Trading_Partner_No);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  //?01/24/23 DN W95589-Check Record Status is Active for both 855 & 865.
  CASE;

  // IF DB1.Interchange Code is PO Acknowledgement  855
  IF DB1.Interchange_Code = 'POACK';

  // AND DB1.Record Status is Active
  AND DB1.Record_Status = 'A';

  // PAR.POC/POCA ?? = CND.PO Ack
  PAR.POC_POCA = 'POACK';

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF DB1.Interchange Code is PO Change Ack       865
  IF DB1.Interchange_Code = 'POCACK';

  // AND DB1.Record Status is Active
  AND DB1.Record_Status = 'A';

  // PAR.POC/POCA ?? = CND.PO Change Ack
  PAR.POC_POCA = 'POCACK';

  ENDIF;

  ENDIF;

 }

 //?W95589 DN 01/24/23-Commented Out & Moved Below.
 //?W95589 DN 01/24/23-Only Check if Record Exist to Set EDI POA Flag.
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 //?Chk to see if BT cust requires a EDI PO ACK
 CASE;

 // IF LCL.POC/POCA ?? is PO Ack
 IF LCL.POC_POCA = 'POACK';

 // LCL.EDI POA = CND.Yes
 LCL.EDI_POA = 'Y';

 //?Chk to see if BT cust requires a EDI PO ACK
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.EDI POA = CND.No
 LCL.EDI_POA = 'N';

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(RTV BT Intrchg BT custRT) TYPE(RTVOBJ) FILE(PNGQREP)           AC2023144;
 PARAMETER(LCL.AR_Customer_Number);
 PARAMETER('POCACK');
 PARAMETER(LCL.POC_POCA);
 PARAMETER(LCL.EDI_Trading_Partner_No);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  //?01/24/23 DN W95589-Check Record Status is Active for both 855 & 865.
  CASE;

  // IF DB1.Interchange Code is PO Acknowledgement  855
  IF DB1.Interchange_Code = 'POACK';

  // AND DB1.Record Status is Active
  AND DB1.Record_Status = 'A';

  // PAR.POC/POCA ?? = CND.PO Ack
  PAR.POC_POCA = 'POACK';

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF DB1.Interchange Code is PO Change Ack       865
  IF DB1.Interchange_Code = 'POCACK';

  // AND DB1.Record Status is Active
  AND DB1.Record_Status = 'A';

  // PAR.POC/POCA ?? = CND.PO Change Ack
  PAR.POC_POCA = 'POCACK';

  ENDIF;

  ENDIF;

 }

 //?W95589 DN 01/24/23-Commented Out & Moved Below.
 //?W95589 DN 01/24/23-Only Check if Record Exist to Set EDI POAC Flag.
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 //?Chk to see if BT cust requires a EDI PO Chg ACK
 CASE;

 // IF LCL.POC/POCA ?? is PO Change Ack
 IF LCL.POC_POCA = 'POCACK';

 // LCL.EDI POAC = CND.Yes
 LCL.EDI_POAC = 'Y';

 //?Chk to see if BT cust requires a EDI PO Chg ACK
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.EDI POAC = CND.NO
 LCL.EDI_POAC = 'N';

 ENDIF;

 ENDIF;

 //?See if a rcd has been written to OH ext.
 EXECUTE FUNCTION(RTV EDI PO Flag       RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC2023170;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.OHE_PO_ACK_Flag);
 PARAMETER(LCL.Record_Found_USR);
 {
  //?USER: Initialize routine

  //?3/11/14 SAZ If OHE PO ack flag = Blank, initialize to *NO
  //?3/11/14 SAZ If Record not found, initialize  OHE PO Ack Flag to *NO
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  // PAR.OHE PO ACK Flag = CND.*NO
  PAR.OHE_PO_ACK_Flag = *NO;

  //?USER: Process Data record

  // PAR.OHE PO ACK Flag = DB1.OHE PO ACK Flag
  PAR.OHE_PO_ACK_Flag = DB1.OHE_PO_ACK_Flag;

  CASE;

  // IF DB1.OHE PO ACK Flag is *Blank
  IF DB1.OHE_PO_ACK_Flag = *BLANK;

  // PAR.OHE PO ACK Flag = CND.*NO
  PAR.OHE_PO_ACK_Flag = *NO;

  ENDIF;

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

  QUIT;

 }

 //?Record found in Order header ext
 CASE;

 // IF LCL.Record Found USR is Record Found
 IF LCL.Record_Found_USR = 'Y';

 //?If flag blank, No ack has been sent for this PO yet.
 CASE;

 // IF LCL.OHE PO ACK Flag is *Blank
 IF LCL.OHE_PO_ACK_Flag = *BLANK;

 // OR LCL.OHE PO ACK Flag is *NO
 OR LCL.OHE_PO_ACK_Flag = *NO;

 CASE;

 // IF LCL.EDI POA is Yes
 IF LCL.EDI_POA = 'Y';

 // LCL.EDI Process Flag = CND.Process
 LCL.EDI_Process_Flag = 'Y';

 ENDIF;

 //?If flag blank, No ack has been sent for this PO yet.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?If flag not blank, 855 ack has been sent for this PO. Need to send
 //?another 855(865) if the customer is set up for it.
 CASE;

 // IF LCL.EDI POAC is Yes
 IF LCL.EDI_POAC = 'Y';

 // LCL.EDI Process Flag = CND.Process
 LCL.EDI_Process_Flag = 'Y';

 ENDIF;

 ENDIF;

 //?If record not found and POA is yes, send
 //?Record found in Order header ext
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.EDI POA is Yes
 IF LCL.EDI_POA = 'Y';

 // LCL.EDI Process Flag = CND.Process
 LCL.EDI_Process_Flag = 'Y';

 ENDIF;

 ENDIF;

 //?When all chks are done, need to check to see if the Cust PO
 //?has been entered. If not,do not send to customer.
 //?If Cust PO# not entered
 CASE;

 // IF LCL.Customer Purchase Order # is tba
 IF LCL.Customer_Purchase_Order_# = 'tba';

 // OR LCL.Customer Purchase Order # is TBA(cap)
 OR LCL.Customer_Purchase_Order_# = 'TBA';

 // OR LCL.Customer Purchase Order # is TBD(cap)
 OR LCL.Customer_Purchase_Order_# = 'TBD';

 // OR LCL.Customer Purchase Order # is tbd
 OR LCL.Customer_Purchase_Order_# = 'tbd';

 // OR LCL.Customer Purchase Order # is BLOCK(cap)
 OR LCL.Customer_Purchase_Order_# = 'BLOCK';

 // OR LCL.Customer Purchase Order # is Block
 OR LCL.Customer_Purchase_Order_# = 'Block';

 //?S13599 DN 08/16/18-Added check for 'TBD, tbd, BLOCK & Block'.
 // LCL.EDI Process Flag = CND.Do not process
 LCL.EDI_Process_Flag = 'N';

 // PAR.Trans Type 1 PASS     USR = CND.EDI PO does not exist
 PAR.Trans_Type_1_PASS_USR = 'NP';

 ENDIF;

 //?2014/09/10 PKD/SAZ Check if PO was sent via EDI for SYSCO.  If yes, then
 //?                   Create an 855; otherwise don't do it.
 //?E003964 SLM  02/24/2015 logic for SYSCO & DSYSCO Work the same
 CASE;

 // IF LCL.EDI Trading Partner No. is SYSCO Dailys
 IF LCL.EDI_Trading_Partner_No = 'DSYSCO';

 // OR LCL.EDI Trading Partner No. is SYSCO Foods
 OR LCL.EDI_Trading_Partner_No = 'SYSCO';

 EXECUTE FUNCTION(VAL PO Exists         RT) TYPE(RTVOBJ) FILE(ECP004)            AC2099993;
 PARAMETER(LCL.EDI_Trading_Partner_No);
 PARAMETER(LCL.Customer_Purchase_Order_#);
 PARAMETER(LCL.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

  QUIT;

 }

 //?VAL: Return Code
 CASE;

 // IF LCL.Record Found USR is Record Not Found
 IF LCL.Record_Found_USR = 'N';

 // LCL.EDI Process Flag = CND.Do not process
 LCL.EDI_Process_Flag = 'N';

 // PAR.Trans Type 1 PASS     USR = CND.NO Trade Partner PO
 PAR.Trans_Type_1_PASS_USR = 'TP';

 ENDIF;

 ENDIF;

 //? 7/13/2021 JBB SDD657 - Trading Partner Control
 // Call program Rtv EDI Manual PO Sts XF.
 CALL PROGRAM(Rtv EDI Manual PO Sts XF) ('PUTBXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER('POACK');
 PARAMETER(LCL.Send_EDI_Document_Y_N);

 //?If Send EDI Invoice = N, set EDI Process Flag = N
 CASE;

 // IF LCL.Send EDI Document Y/N is No
 IF LCL.Send_EDI_Document_Y_N = 'N';

 // LCL.EDI Process Flag = CND.Do not process
 LCL.EDI_Process_Flag = 'N';

 ENDIF;

 CASE;

 // IF LCL.EDI Process Flag is Process
 IF LCL.EDI_Process_Flag = 'Y';

 //?2014/09/09 PKD Added Price Audit condition
 //?Do we need to EDI 855/865?
 CASE;

 // IF PAR.Pricing Event Called From is Market Price Change
 IF PAR.Pricing_Event_Called_From = 'MPC';

 // OR PAR.Pricing Event Called From is Order Entry
 OR PAR.Pricing_Event_Called_From = 'OE';

 // OR PAR.Pricing Event Called From is Price Maintenance
 OR PAR.Pricing_Event_Called_From = 'PM';

 // OR PAR.Pricing Event Called From is Price Audit
 OR PAR.Pricing_Event_Called_From = 'PA';

 CASE;

 // IF LCL.Price Status is Priced
 IF LCL.Price_Status = 'P';

 // Call program Rtv/Crt EDI PO Ack    XF.
 CALL PROGRAM(Rtv/Crt EDI PO Ack    XF) ('PNYLXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Trans_Type_1_PASS_USR);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Trans Type 1 PASS     USR = CND.EDI Order is not Priced
 PAR.Trans_Type_1_PASS_USR = 'OP';

 ENDIF;

 ENDIF;

 ENDIF;

}


//?---------------------------
PGM.*Return_code = 'PAC';

RETURN;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

