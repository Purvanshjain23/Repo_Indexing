// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for OMT0PFR
// ?Date: 14.08.2025 Time: 12:03:16
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


//?Retrieve Year/Period/Week for From Date from Calendar file
EXECUTE FUNCTION(RTV Day/Wk/Prd/Yr     RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369048;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.USR_From_Date);
PARAMETER(WRK.Julian_Date);
PARAMETER(PAR.Prm_From_Period_Year);
PARAMETER(PAR.Prm_From_Period);
PARAMETER(PAR.Prm_From_Period_Week);
PARAMETER(WRK.Day_of_Week);
PARAMETER(WRK.Week_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Retrieve Year/Period/Week for To Date from Calendar file
EXECUTE FUNCTION(RTV Day/Wk/Prd/Yr     RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369048;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.USR_To_Date);
PARAMETER(WRK.Julian_Date);
PARAMETER(PAR.Prm_To_Period_Year);
PARAMETER(PAR.Prm_To_Period);
PARAMETER(PAR.Prm_To_Period_Week);
PARAMETER(WRK.Day_of_Week);
PARAMETER(WRK.Week_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Create Prior From Period Year
// PAR.Prior From Period Year = PAR.Prm From Period Year - CON.1
PAR.Prior_From_Period_Year = PAR.Prm_From_Period_Year - 1;

//?Create Prior To Period Year
// PAR.Prior To Period Year = PAR.Prm To Period Year - CON.1
PAR.Prior_To_Period_Year = PAR.Prm_To_Period_Year - 1;

//?From Julian Period - "USR From Julian Period"
// Call program Zzz Concat Yr/Per/Wk-8 US.
CALL PROGRAM(Zzz Concat Yr/Per/Wk-8 US) ('OMSJUPR');
PARAMETER(PAR.Prm_From_Period_Year);
PARAMETER(PAR.Prm_From_Period);
PARAMETER(PAR.Prm_From_Period_Week);
PARAMETER(PAR.USR_From_Julian_Period);

//?To Julian Period - "USR To Julian Period"
// Call program Zzz Concat Yr/Per/Wk-8 US.
CALL PROGRAM(Zzz Concat Yr/Per/Wk-8 US) ('OMSJUPR');
PARAMETER(PAR.Prm_To_Period_Year);
PARAMETER(PAR.Prm_To_Period);
PARAMETER(PAR.Prm_To_Period_Week);
PARAMETER(PAR.USR_To_Julian_Period);

//?From PRIOR Julian Period - "USR Prior From Julian Per"
// Call program Zzz Concat Yr/Per/Wk-8 US.
CALL PROGRAM(Zzz Concat Yr/Per/Wk-8 US) ('OMSJUPR');
PARAMETER(PAR.Prior_From_Period_Year);
PARAMETER(PAR.Prm_From_Period);
PARAMETER(PAR.Prm_From_Period_Week);
PARAMETER(PAR.USR_Prior_From_Julian_Per);

//?From PRIOR Julian Period - "USR Prior To Julian Per"
// Call program Zzz Concat Yr/Per/Wk-8 US.
CALL PROGRAM(Zzz Concat Yr/Per/Wk-8 US) ('OMSJUPR');
PARAMETER(PAR.Prior_To_Period_Year);
PARAMETER(PAR.Prm_To_Period);
PARAMETER(PAR.Prm_To_Period_Week);
PARAMETER(PAR.USR_Prior_To_Julian_Per);

//?USER: Record selection processing

//?Concat DB1 Period Year, Period, Week - "WRK.USR DB Julian Period"
// Call program Zzz Concat Yr/Per/Wk-8 US.
CALL PROGRAM(Zzz Concat Yr/Per/Wk-8 US) ('OMSJUPR');
PARAMETER(DB1.Accounting_Year_Code);
PARAMETER(DB1.Accounting_Period_Code);
PARAMETER(DB1.OM_Week);
PARAMETER(WRK.USR_DB_Julian_Period);

//?Check Sales VP
CASE;

// IF PAR.VP Level Code is Entered
IF PAR.VP_Level_Code <> *BLANK;

CASE;

// IF PAR.VP Level Code NE DB1.VP Level Code
IF PAR.VP_Level_Code <> DB1.VP_Level_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Check Sales Manager
CASE;

// IF PAR.Manager Level Code is Entered
IF PAR.Manager_Level_Code <> *BLANK;

CASE;

// IF PAR.Manager Level Code NE DB1.Manager Level Code
IF PAR.Manager_Level_Code <> DB1.Manager_Level_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Check Salesperson
CASE;

// IF PAR.Original Salesperson is entered
IF PAR.Original_Salesperson <> *BLANK;

CASE;

// IF PAR.Original Salesperson NE DB1.Original Salesperson
IF PAR.Original_Salesperson <> DB1.Original_Salesperson;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Check Item Structure Type
CASE;

// IF PAR.Item Structure Type Code is greater than zero
IF PAR.Item_Structure_Type_Code > *ZERO;

CASE;

// IF PAR.Item Structure Type Code NE DB1.Item Structure Type Code
IF PAR.Item_Structure_Type_Code <> DB1.Item_Structure_Type_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Check Item Structure Group
CASE;

// IF PAR.Item Structure Group Code is Entered
IF PAR.Item_Structure_Group_Code <> *ZERO;

CASE;

// IF PAR.Item Structure Group Code NE DB1.Item Structure Group Code
IF PAR.Item_Structure_Group_Code <> DB1.Item_Structure_Group_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Check for Date Range
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF WRK.USR DB Julian Period GT PAR.USR To Julian Period
IF WRK.USR_DB_Julian_Period > PAR.USR_To_Julian_Period;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Validate Billing Type
CASE;

// IF PAR.Billing Activity Type EQ WRK.BLANK
IF PAR.Billing_Activity_Type = WRK.BLANK;

//?Validate Billing Type
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Bill Type, Event   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1366339;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(WRK.Event_Code);
PARAMETER(WRK.Billing_Activity_Type);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.Billing Activity Type NE WRK.Billing Activity Type
IF PAR.Billing_Activity_Type <> WRK.Billing_Activity_Type;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Skip if don't affect sales $ or pnds.
CASE;

// IF DB1.Affect Sales Doll Status is Not Yes
IF DB1.Affect_Sales_Doll_Status = *BLANK/'N';

// AND DB1.Affect Sales Pnds Status is Not Yes
AND DB1.Affect_Sales_Pnds_Status = *BLANK/'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: On print of first page format

// 1PG.USR From Period = PAR.Prm From Period
X1PG_USR_From_Period = PAR.Prm_From_Period;

// 1PG.Usr From Period Week = PAR.Prm From Period Week
X1PG_Usr_From_Period_Week = PAR.Prm_From_Period_Week;

// 1PG.USR To Period = PAR.Prm To Period
X1PG_USR_To_Period = PAR.Prm_To_Period;

// 1PG.USR To Period Week = PAR.Prm To Period Week
X1PG_USR_To_Period_Week = PAR.Prm_To_Period_Week;

// 1PG.USR From Date = PAR.USR From Date
X1PG_USR_From_Date = PAR.USR_From_Date;

// 1PG.USR To Date = PAR.USR To Date
X1PG_USR_To_Date = PAR.USR_To_Date;

// 1PG.Company Number = PAR.Company Number
X1PG_Company_Number = PAR.Company_Number;

EXECUTE FUNCTION(RTV Company Name Only  RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1100959;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.VP Level Code = PAR.VP Level Code
X1PG_VP_Level_Code = PAR.VP_Level_Code;

EXECUTE FUNCTION(RTV VP Level Descript  RT) TYPE(RTVOBJ) FILE(PDIFREP)          AC1275069;
PARAMETER(X1PG_VP_Level_Code);
PARAMETER(X1PG_VP_Level_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Manager Level Code = PAR.Manager Level Code
X1PG_Manager_Level_Code = PAR.Manager_Level_Code;

EXECUTE FUNCTION(RTV Manager Descript   RT) TYPE(RTVOBJ) FILE(CAALREP)          AC1160582;
PARAMETER(X1PG_Manager_Level_Code);
PARAMETER(X1PG_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Original Salesperson = PAR.Original Salesperson
X1PG_Original_Salesperson = PAR.Original_Salesperson;

EXECUTE FUNCTION(RTV Salesperson Name   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1111501;
PARAMETER(X1PG_Original_Salesperson);
PARAMETER(X1PG_Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Item Structure Type Code = PAR.Item Structure Type Code
X1PG_Item_Structure_Type_Code = PAR.Item_Structure_Type_Code;

EXECUTE FUNCTION(Rtv Type Description   RT) TYPE(RTVOBJ) FILE(OME8REP)          AC1229616;
PARAMETER(X1PG_Item_Structure_Type_Code);
PARAMETER(X1PG_Item_Structure_Type_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Item Structure Group Code = PAR.Item Structure Group Code
X1PG_Item_Structure_Group_Code = PAR.Item_Structure_Group_Code;

EXECUTE FUNCTION(Rtv Group Description  RT) TYPE(RTVOBJ) FILE(OME9REP)          AC1202656;
PARAMETER(X1PG_Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(X1PG_Item_Structure_Group_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Billing Activity Type = PAR.Billing Activity Type
X1PG_Billing_Activity_Type = PAR.Billing_Activity_Type;

// 1PG.USR Desc. 10 = Condition name of 1PG.Billing Activity Type
X1PG_USR_Desc_10 = RTVCND(X1PG_Billing_Activity_Type);

//?Summary Only flag
// 1PG.USR Check Y/N Status = PAR.USR Check Y/N Status
X1PG_USR_Check_Y_N_Status = PAR.USR_Check_Y_N_Status;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
EXECUTE FUNCTION(RTV Company Name Only  RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1100959;
PARAMETER(PAR.Company_Number);
PARAMETER(CUR.Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Print Accounting Company Number header format
PRINT Accounting Company Number header format;

ENDIF;

CASE;

IF NEW VP_Level_Code;
//?Do not print if Summary Only
CASE;

// IF PAR.USR Check Y/N Status is yes
IF PAR.USR_Check_Y_N_Status = 'Y';

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

//?Do not print if Summary Only
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV VP Level Descript  RT) TYPE(RTVOBJ) FILE(PDIFREP)          AC1275069;
PARAMETER(CUR.VP_Level_Code);
PARAMETER(CUR.VP_Level_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// Print VP Level Code header format
PRINT VP Level Code header format;

ENDIF;

CASE;

IF NEW Manager_Level_Code;
//?Do not print if Summary Only
CASE;

// IF PAR.USR Check Y/N Status is yes
IF PAR.USR_Check_Y_N_Status = 'Y';

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

//?Do not print if Summary Only
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Manager Descript   RT) TYPE(RTVOBJ) FILE(CAALREP)          AC1160582;
PARAMETER(CUR.Manager_Level_Code);
PARAMETER(CUR.Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// Print Manager Level Code header format
PRINT Manager Level Code header format;

ENDIF;

CASE;

IF NEW Sales_Route_Code;
//?Do not print if Summary Only
CASE;

// IF PAR.USR Check Y/N Status is yes
IF PAR.USR_Check_Y_N_Status = 'Y';

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

//?Do not print if Summary Only
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Salesperson Name   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1111501;
PARAMETER(CUR.Original_Salesperson);
PARAMETER(CUR.Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// Print Sales Route Code header format
PRINT Sales Route Code header format;

ENDIF;

CASE;

IF NEW Item_Structure_Type_Code;
EXECUTE FUNCTION(Rtv Type Description   RT) TYPE(RTVOBJ) FILE(OME8REP)          AC1229616;
PARAMETER(CUR.Item_Structure_Type_Code);
PARAMETER(CUR.Item_Structure_Type_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Print Prod Structure Type Code header format
PRINT Prod Structure Type Code header format;

ENDIF;

CASE;

IF NEW Item_Structure_Group_Code;
// SUPPRESSED PRINT Prod Structure Group Code header format

ENDIF;

//?USER: On print of detail format

//?FOB amount
CASE;

// IF DB1.Affect Sales Doll Status is Not Yes
IF DB1.Affect_Sales_Doll_Status = *BLANK/'N';

// CUR.FOB Gross Amount = CON.*ZERO
CUR.FOB_Gross_Amount = *ZERO;

ENDIF;

//?Weight Billed
CASE;

// IF DB1.Affect Sales Pnds Status is Not Yes
IF DB1.Affect_Sales_Pnds_Status = *BLANK/'N';

// CUR.Weight Billed = CON.*ZERO
CUR.Weight_Billed = *ZERO;

ENDIF;

//?Calculate Current Range Sales
CASE;

// IF WRK.USR DB Julian Period GE PAR.USR From Julian Period
IF WRK.USR_DB_Julian_Period >= PAR.USR_From_Julian_Period;

// AND WRK.USR DB Julian Period LE PAR.USR To Julian Period
AND WRK.USR_DB_Julian_Period <= PAR.USR_To_Julian_Period;

// NXT.Vol 5 Cur # = NXT.Vol 5 Cur # + CUR.Weight Billed
NXT.Vol_5_Cur_# = NXT.Vol_5_Cur_# + CUR.Weight_Billed;

// NXT.Vol 5 Cur $ = NXT.Vol 5 Cur $ + CUR.FOB Gross Amount
NXT.Vol_5_Cur_$ = NXT.Vol_5_Cur_$ + CUR.FOB_Gross_Amount;

//?Add to Work amount to later check for zero, if Zero do not print
// WRK.USR Work Amount 1 = WRK.USR Work Amount 1 + CUR.Weight Billed
WRK.USR_Work_Amount_1 = WRK.USR_Work_Amount_1 + CUR.Weight_Billed;

// WRK.USR Work Amount 1 = WRK.USR Work Amount 1 + CUR.FOB Gross Amount
WRK.USR_Work_Amount_1 = WRK.USR_Work_Amount_1 + CUR.FOB_Gross_Amount;

ENDIF;

//?Calculate Prior Range Sales
CASE;

// IF WRK.USR DB Julian Period GE PAR.USR Prior From Julian Per
IF WRK.USR_DB_Julian_Period >= PAR.USR_Prior_From_Julian_Per;

// AND WRK.USR DB Julian Period LE PAR.USR Prior To Julian Per
AND WRK.USR_DB_Julian_Period <= PAR.USR_Prior_To_Julian_Per;

// NXT.Vol 5 Prior # = NXT.Vol 5 Prior # + CUR.Weight Billed
NXT.Vol_5_Prior_# = NXT.Vol_5_Prior_# + CUR.Weight_Billed;

// NXT.Vol 5 Prior $ = NXT.Vol 5 Prior $ + CUR.FOB Gross Amount
NXT.Vol_5_Prior_$ = NXT.Vol_5_Prior_$ + CUR.FOB_Gross_Amount;

//?Add to Work amount to later check for zero, if Zero do not print
// WRK.USR Work Amount 1 = WRK.USR Work Amount 1 + CUR.Weight Billed
WRK.USR_Work_Amount_1 = WRK.USR_Work_Amount_1 + CUR.Weight_Billed;

// WRK.USR Work Amount 1 = WRK.USR Work Amount 1 + CUR.FOB Gross Amount
WRK.USR_Work_Amount_1 = WRK.USR_Work_Amount_1 + CUR.FOB_Gross_Amount;

ENDIF;

//?Calculate PTD Cur Sales
CASE;

// IF DB1.Accounting Year Code EQ PAR.Prm To Period Year
IF DB1.Accounting_Year_Code = PAR.Prm_To_Period_Year;

// AND DB1.Accounting Period Code EQ PAR.Prm To Period
AND DB1.Accounting_Period_Code = PAR.Prm_To_Period;

// AND DB1.OM Week LE PAR.Prm To Period Week
AND DB1.OM_Week <= PAR.Prm_To_Period_Week;

// NXT.Vol 5 PTD Cur # = NXT.Vol 5 PTD Cur # + CUR.Weight Billed
NXT.Vol_5_PTD_Cur_# = NXT.Vol_5_PTD_Cur_# + CUR.Weight_Billed;

// NXT.Vol 5 PTD Cur $ = NXT.Vol 5 PTD Cur $ + CUR.FOB Gross Amount
NXT.Vol_5_PTD_Cur_$ = NXT.Vol_5_PTD_Cur_$ + CUR.FOB_Gross_Amount;

//?Add to Work amount to later check for zero, if Zero do not print
// WRK.USR Work Amount 1 = WRK.USR Work Amount 1 + CUR.Weight Billed
WRK.USR_Work_Amount_1 = WRK.USR_Work_Amount_1 + CUR.Weight_Billed;

// WRK.USR Work Amount 1 = WRK.USR Work Amount 1 + CUR.FOB Gross Amount
WRK.USR_Work_Amount_1 = WRK.USR_Work_Amount_1 + CUR.FOB_Gross_Amount;

ENDIF;

//?Calculate PTD Prior Sales
CASE;

// IF DB1.Accounting Year Code EQ PAR.Prior To Period Year
IF DB1.Accounting_Year_Code = PAR.Prior_To_Period_Year;

// AND DB1.Accounting Period Code EQ PAR.Prm To Period
AND DB1.Accounting_Period_Code = PAR.Prm_To_Period;

// AND DB1.OM Week LE PAR.Prm To Period Week
AND DB1.OM_Week <= PAR.Prm_To_Period_Week;

// NXT.Vol 5 PTD Prior # = NXT.Vol 5 PTD Prior # + CUR.Weight Billed
NXT.Vol_5_PTD_Prior_# = NXT.Vol_5_PTD_Prior_# + CUR.Weight_Billed;

// NXT.Vol 5 PTD Prior $ = NXT.Vol 5 PTD Prior $ + CUR.FOB Gross Amount
NXT.Vol_5_PTD_Prior_$ = NXT.Vol_5_PTD_Prior_$ + CUR.FOB_Gross_Amount;

//?Add to Work amount to later check for zero, if Zero do not print
// WRK.USR Work Amount 1 = WRK.USR Work Amount 1 + CUR.Weight Billed
WRK.USR_Work_Amount_1 = WRK.USR_Work_Amount_1 + CUR.Weight_Billed;

// WRK.USR Work Amount 1 = WRK.USR Work Amount 1 + CUR.FOB Gross Amount
WRK.USR_Work_Amount_1 = WRK.USR_Work_Amount_1 + CUR.FOB_Gross_Amount;

ENDIF;

//?Calculate YTD Cur Sales
CASE;

// IF DB1.Accounting Year Code EQ PAR.Prm To Period Year
IF DB1.Accounting_Year_Code = PAR.Prm_To_Period_Year;

// AND WRK.USR DB Julian Period LE PAR.USR To Julian Period
AND WRK.USR_DB_Julian_Period <= PAR.USR_To_Julian_Period;

// NXT.Vol 5 YTD Cur # = NXT.Vol 5 YTD Cur # + CUR.Weight Billed
NXT.Vol_5_YTD_Cur_# = NXT.Vol_5_YTD_Cur_# + CUR.Weight_Billed;

// NXT.Vol 5 YTD Cur $ = NXT.Vol 5 YTD Cur $ + CUR.FOB Gross Amount
NXT.Vol_5_YTD_Cur_$ = NXT.Vol_5_YTD_Cur_$ + CUR.FOB_Gross_Amount;

//?Add to Work amount to later check for zero, if Zero do not print
// WRK.USR Work Amount 1 = WRK.USR Work Amount 1 + CUR.Weight Billed
WRK.USR_Work_Amount_1 = WRK.USR_Work_Amount_1 + CUR.Weight_Billed;

// WRK.USR Work Amount 1 = WRK.USR Work Amount 1 + CUR.FOB Gross Amount
WRK.USR_Work_Amount_1 = WRK.USR_Work_Amount_1 + CUR.FOB_Gross_Amount;

ENDIF;

//?Calculate YTD Prior Sales
CASE;

// IF DB1.Accounting Year Code EQ PAR.Prior To Period Year
IF DB1.Accounting_Year_Code = PAR.Prior_To_Period_Year;

// AND WRK.USR DB Julian Period LE PAR.USR Prior To Julian Per
AND WRK.USR_DB_Julian_Period <= PAR.USR_Prior_To_Julian_Per;

// NXT.Vol 5 YTD Prior # = NXT.Vol 5 YTD Prior # + CUR.Weight Billed
NXT.Vol_5_YTD_Prior_# = NXT.Vol_5_YTD_Prior_# + CUR.Weight_Billed;

// NXT.Vol 5 YTD Prior $ = NXT.Vol 5 YTD Prior $ + CUR.FOB Gross Amount
NXT.Vol_5_YTD_Prior_$ = NXT.Vol_5_YTD_Prior_$ + CUR.FOB_Gross_Amount;

//?Add to Work amount to later check for zero, if Zero do not print
// WRK.USR Work Amount 1 = WRK.USR Work Amount 1 + CUR.Weight Billed
WRK.USR_Work_Amount_1 = WRK.USR_Work_Amount_1 + CUR.Weight_Billed;

// WRK.USR Work Amount 1 = WRK.USR Work Amount 1 + CUR.FOB Gross Amount
WRK.USR_Work_Amount_1 = WRK.USR_Work_Amount_1 + CUR.FOB_Gross_Amount;

ENDIF;

//?USER: Print required level totals

CASE;

IF NEW Item_Structure_Group_Code;
EXECUTE FUNCTION(Rtv Group Description  RT) TYPE(RTVOBJ) FILE(OME9REP)          AC1202656;
PARAMETER(CUR.Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(CUR.Item_Structure_Group_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Divide totals by 1000 to condense (case is to enable grouping)
CASE;

// IF WRK.USR Status (Y/N) EQ WRK.USR Status (Y/N)
IF WRK.USR_Status_Y_N = WRK.USR_Status_Y_N;

EXECUTE FUNCTION(Rtv. Prd Typ Sum/Array) TYPE(RTVOBJ) ARRAY(Product_Type_SummaryAC1239113;
PARAMETER(WRK.Usr_Prod_Type_Cur_$);
PARAMETER(WRK.Usr_Prod_Type_Prior_$);
PARAMETER(WRK.Usr_Prod_Type_PTD_Cur_$);
PARAMETER(WRK.Usr_Prod_Type_PTD_Prior_$);
PARAMETER(WRK.Usr_Prod_Type_YTD_Cur_$);
PARAMETER(WRK.Usr_Prod_Type_YTD_Prior_$);
PARAMETER(WRK.Usr_Prod_Type_Cur_#);
PARAMETER(WRK.Usr_Prod_Type_Prior_#);
PARAMETER(WRK.Usr_Prod_Type_PTD_Cur_#);
PARAMETER(WRK.Usr_Prod_Type_PTD_Prior_#);
PARAMETER(WRK.Usr_Prod_Type_YTD_Cur_#);
PARAMETER(WRK.Usr_Prod_Type_YTD_Prior_#);
PARAMETER(CUR.Item_Structure_Type_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// WRK.Usr Prod Type Cur $ = WRK.Usr Prod Type Cur $ + CUR.Vol 5 Cur $
WRK.Usr_Prod_Type_Cur_$ = WRK.Usr_Prod_Type_Cur_$ + CUR.Vol_5_Cur_$;

// WRK.Usr Prod Type Prior $ = WRK.Usr Prod Type Prior $ + CUR.Vol 5 Prior $
WRK.Usr_Prod_Type_Prior_$ = WRK.Usr_Prod_Type_Prior_$ + CUR.Vol_5_Prior_$;

// WRK.Usr Prod Type Diff $ = WRK.Usr Prod Type Diff $ + CUR.Vol 5 Prior $
WRK.Usr_Prod_Type_Diff_$ = WRK.Usr_Prod_Type_Diff_$ + CUR.Vol_5_Prior_$;

// WRK.Usr Prod Type PTD Cur $ = WRK.Usr Prod Type PTD Cur $ + CUR.Vol 5 PTD Cur $
WRK.Usr_Prod_Type_PTD_Cur_$ = WRK.Usr_Prod_Type_PTD_Cur_$ + CUR.Vol_5_PTD_Cur_$;

// WRK.Usr Prod Type PTD Prior $ = WRK.Usr Prod Type PTD Prior $ + CUR.Vol 5 PTD Pr
WRK.Usr_Prod_Type_PTD_Prior_$ = WRK.Usr_Prod_Type_PTD_Prior_$ + CUR.Vol_5_PTD_Prior_$;

// WRK.Usr Prod Type YTD Cur $ = WRK.Usr Prod Type YTD Cur $ + CUR.Vol 5 YTD Cur $
WRK.Usr_Prod_Type_YTD_Cur_$ = WRK.Usr_Prod_Type_YTD_Cur_$ + CUR.Vol_5_YTD_Cur_$;

// WRK.Usr Prod Type YTD Prior $ = WRK.Usr Prod Type YTD Prior $ + CUR.Vol 5 YTD Pr
WRK.Usr_Prod_Type_YTD_Prior_$ = WRK.Usr_Prod_Type_YTD_Prior_$ + CUR.Vol_5_YTD_Prior_$;

// WRK.Usr Prod Type Cur # = WRK.Usr Prod Type Cur # + CUR.Vol 5 Cur #
WRK.Usr_Prod_Type_Cur_# = WRK.Usr_Prod_Type_Cur_# + CUR.Vol_5_Cur_#;

// WRK.Usr Prod Type Prior # = WRK.Usr Prod Type Prior # + CUR.Vol 5 Prior #
WRK.Usr_Prod_Type_Prior_# = WRK.Usr_Prod_Type_Prior_# + CUR.Vol_5_Prior_#;

// WRK.Usr Prod Type Diff # = WRK.Usr Prod Type Diff # + CUR.Vol 5 Prior #
WRK.Usr_Prod_Type_Diff_# = WRK.Usr_Prod_Type_Diff_# + CUR.Vol_5_Prior_#;

// WRK.Usr Prod Type PTD Cur # = WRK.Usr Prod Type PTD Cur # + CUR.Vol 5 PTD Cur #
WRK.Usr_Prod_Type_PTD_Cur_# = WRK.Usr_Prod_Type_PTD_Cur_# + CUR.Vol_5_PTD_Cur_#;

// WRK.Usr Prod Type PTD Prior # = WRK.Usr Prod Type PTD Prior # + CUR.Vol 5 PTD Pr
WRK.Usr_Prod_Type_PTD_Prior_# = WRK.Usr_Prod_Type_PTD_Prior_# + CUR.Vol_5_PTD_Prior_#;

// WRK.Usr Prod Type YTD Cur # = WRK.Usr Prod Type YTD Cur # + CUR.Vol 5 YTD Cur #
WRK.Usr_Prod_Type_YTD_Cur_# = WRK.Usr_Prod_Type_YTD_Cur_# + CUR.Vol_5_YTD_Cur_#;

// WRK.Usr Prod Type YTD Prior # = WRK.Usr Prod Type YTD Prior # + CUR.Vol 5 YTD Pr
WRK.Usr_Prod_Type_YTD_Prior_# = WRK.Usr_Prod_Type_YTD_Prior_# + CUR.Vol_5_YTD_Prior_#;

EXECUTE FUNCTION(CHG Prd Type Sum/array CH) TYPE(CHGOBJ) ARRAY(Product_Type_SummAC1239108;
PARAMETER(WRK.Usr_Prod_Type_Cur_$);
PARAMETER(WRK.Usr_Prod_Type_Prior_$);
PARAMETER(WRK.Usr_Prod_Type_PTD_Cur_$);
PARAMETER(WRK.Usr_Prod_Type_PTD_Prior_$);
PARAMETER(WRK.Usr_Prod_Type_YTD_Cur_$);
PARAMETER(WRK.Usr_Prod_Type_YTD_Prior_$);
PARAMETER(WRK.Usr_Prod_Type_Cur_#);
PARAMETER(WRK.Usr_Prod_Type_Prior_#);
PARAMETER(WRK.Usr_Prod_Type_PTD_Cur_#);
PARAMETER(WRK.Usr_Prod_Type_PTD_Prior_#);
PARAMETER(WRK.Usr_Prod_Type_YTD_Cur_#);
PARAMETER(WRK.Usr_Prod_Type_YTD_Prior_#);
PARAMETER(CUR.Item_Structure_Type_Code);

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Usr Prod Type Cur $ = CUR.Vol 5 Cur $
WRK.Usr_Prod_Type_Cur_$ = CUR.Vol_5_Cur_$;

// WRK.Usr Prod Type Prior $ = CUR.Vol 5 Prior $
WRK.Usr_Prod_Type_Prior_$ = CUR.Vol_5_Prior_$;

// WRK.Usr Prod Type Diff $ = CUR.Vol 5 Prior $
WRK.Usr_Prod_Type_Diff_$ = CUR.Vol_5_Prior_$;

// WRK.Usr Prod Type PTD Cur $ = CUR.Vol 5 PTD Cur $
WRK.Usr_Prod_Type_PTD_Cur_$ = CUR.Vol_5_PTD_Cur_$;

// WRK.Usr Prod Type PTD Prior $ = CUR.Vol 5 PTD Prior $
WRK.Usr_Prod_Type_PTD_Prior_$ = CUR.Vol_5_PTD_Prior_$;

// WRK.Usr Prod Type YTD Cur $ = CUR.Vol 5 YTD Cur $
WRK.Usr_Prod_Type_YTD_Cur_$ = CUR.Vol_5_YTD_Cur_$;

// WRK.Usr Prod Type YTD Prior $ = CUR.Vol 5 YTD Prior $
WRK.Usr_Prod_Type_YTD_Prior_$ = CUR.Vol_5_YTD_Prior_$;

// WRK.Usr Prod Type Cur # = CUR.Vol 5 Cur #
WRK.Usr_Prod_Type_Cur_# = CUR.Vol_5_Cur_#;

// WRK.Usr Prod Type Prior # = CUR.Vol 5 Prior #
WRK.Usr_Prod_Type_Prior_# = CUR.Vol_5_Prior_#;

// WRK.Usr Prod Type Diff # = CUR.Vol 5 Prior #
WRK.Usr_Prod_Type_Diff_# = CUR.Vol_5_Prior_#;

// WRK.Usr Prod Type PTD Cur # = CUR.Vol 5 PTD Cur #
WRK.Usr_Prod_Type_PTD_Cur_# = CUR.Vol_5_PTD_Cur_#;

// WRK.Usr Prod Type PTD Prior # = CUR.Vol 5 PTD Prior #
WRK.Usr_Prod_Type_PTD_Prior_# = CUR.Vol_5_PTD_Prior_#;

// WRK.Usr Prod Type YTD Cur # = CUR.Vol 5 YTD Cur #
WRK.Usr_Prod_Type_YTD_Cur_# = CUR.Vol_5_YTD_Cur_#;

// WRK.Usr Prod Type YTD Prior # = CUR.Vol 5 YTD Prior #
WRK.Usr_Prod_Type_YTD_Prior_# = CUR.Vol_5_YTD_Prior_#;

EXECUTE FUNCTION(CRT Prd Typ Sum/Array  CR) TYPE(CRTOBJ) ARRAY(Product_Type_SummAC1239111;
PARAMETER(WRK.Usr_Prod_Type_Cur_$);
PARAMETER(WRK.Usr_Prod_Type_Prior_$);
PARAMETER(WRK.Usr_Prod_Type_PTD_Cur_$);
PARAMETER(WRK.Usr_Prod_Type_PTD_Prior_$);
PARAMETER(WRK.Usr_Prod_Type_YTD_Cur_$);
PARAMETER(WRK.Usr_Prod_Type_YTD_Prior_$);
PARAMETER(WRK.Usr_Prod_Type_Cur_#);
PARAMETER(WRK.Usr_Prod_Type_Prior_#);
PARAMETER(WRK.Usr_Prod_Type_PTD_Cur_#);
PARAMETER(WRK.Usr_Prod_Type_PTD_Prior_#);
PARAMETER(WRK.Usr_Prod_Type_YTD_Cur_#);
PARAMETER(WRK.Usr_Prod_Type_YTD_Prior_#);
PARAMETER(CUR.Item_Structure_Type_Code);

ENDIF;

ENDIF;

//?Calculate Differences             (case is to enable grouping)
CASE;

// IF WRK.USR Status (Y/N) EQ WRK.USR Status (Y/N)
IF WRK.USR_Status_Y_N = WRK.USR_Status_Y_N;

// CUR.Vol 5 Cur Diff # = CUR.Vol 5 Cur # - CUR.Vol 5 Prior #
CUR.Vol_5_Cur_Diff_# = CUR.Vol_5_Cur_# - CUR.Vol_5_Prior_#;

// CUR.Vol 5 Cur Diff $ = CUR.Vol 5 Cur $ - CUR.Vol 5 Prior $
CUR.Vol_5_Cur_Diff_$ = CUR.Vol_5_Cur_$ - CUR.Vol_5_Prior_$;

// CUR.Vol 5 PTD Diff # = CUR.Vol 5 PTD Cur # - CUR.Vol 5 PTD Prior #
CUR.Vol_5_PTD_Diff_# = CUR.Vol_5_PTD_Cur_# - CUR.Vol_5_PTD_Prior_#;

// CUR.Vol 5 PTD Diff $ = CUR.Vol 5 PTD Cur $ - CUR.Vol 5 PTD Prior $
CUR.Vol_5_PTD_Diff_$ = CUR.Vol_5_PTD_Cur_$ - CUR.Vol_5_PTD_Prior_$;

// CUR.Vol 5 YTD Diff # = CUR.Vol 5 YTD Cur # - CUR.Vol 5 YTD Prior #
CUR.Vol_5_YTD_Diff_# = CUR.Vol_5_YTD_Cur_# - CUR.Vol_5_YTD_Prior_#;

// CUR.Vol 5 YTD Diff $ = CUR.Vol 5 YTD Cur $ - CUR.Vol 5 YTD Prior $
CUR.Vol_5_YTD_Diff_$ = CUR.Vol_5_YTD_Cur_$ - CUR.Vol_5_YTD_Prior_$;

ENDIF;

//?Accumulate totals                 (case is to enable grouping)
CASE;

// IF WRK.USR Status (Y/N) EQ WRK.USR Status (Y/N)
IF WRK.USR_Status_Y_N = WRK.USR_Status_Y_N;

// NXT.Vol 5 Cur # = NXT.Vol 5 Cur # + CUR.Vol 5 Cur #
NXT.Vol_5_Cur_# = NXT.Vol_5_Cur_# + CUR.Vol_5_Cur_#;

// NXT.Vol 5 Cur $ = NXT.Vol 5 Cur $ + CUR.Vol 5 Cur $
NXT.Vol_5_Cur_$ = NXT.Vol_5_Cur_$ + CUR.Vol_5_Cur_$;

// NXT.Vol 5 Prior # = NXT.Vol 5 Prior # + CUR.Vol 5 Prior #
NXT.Vol_5_Prior_# = NXT.Vol_5_Prior_# + CUR.Vol_5_Prior_#;

// NXT.Vol 5 Prior $ = NXT.Vol 5 Prior $ + CUR.Vol 5 Prior $
NXT.Vol_5_Prior_$ = NXT.Vol_5_Prior_$ + CUR.Vol_5_Prior_$;

// NXT.Vol 5 PTD Cur # = NXT.Vol 5 PTD Cur # + CUR.Vol 5 PTD Cur #
NXT.Vol_5_PTD_Cur_# = NXT.Vol_5_PTD_Cur_# + CUR.Vol_5_PTD_Cur_#;

// NXT.Vol 5 PTD Cur $ = NXT.Vol 5 PTD Cur $ + CUR.Vol 5 PTD Cur $
NXT.Vol_5_PTD_Cur_$ = NXT.Vol_5_PTD_Cur_$ + CUR.Vol_5_PTD_Cur_$;

// NXT.Vol 5 PTD Prior # = NXT.Vol 5 PTD Prior # + CUR.Vol 5 PTD Prior #
NXT.Vol_5_PTD_Prior_# = NXT.Vol_5_PTD_Prior_# + CUR.Vol_5_PTD_Prior_#;

// NXT.Vol 5 PTD Prior $ = NXT.Vol 5 PTD Prior $ + CUR.Vol 5 PTD Prior $
NXT.Vol_5_PTD_Prior_$ = NXT.Vol_5_PTD_Prior_$ + CUR.Vol_5_PTD_Prior_$;

// NXT.Vol 5 YTD Cur # = NXT.Vol 5 YTD Cur # + CUR.Vol 5 YTD Cur #
NXT.Vol_5_YTD_Cur_# = NXT.Vol_5_YTD_Cur_# + CUR.Vol_5_YTD_Cur_#;

// NXT.Vol 5 YTD Cur $ = NXT.Vol 5 YTD Cur $ + CUR.Vol 5 YTD Cur $
NXT.Vol_5_YTD_Cur_$ = NXT.Vol_5_YTD_Cur_$ + CUR.Vol_5_YTD_Cur_$;

// NXT.Vol 5 YTD Prior # = NXT.Vol 5 YTD Prior # + CUR.Vol 5 YTD Prior #
NXT.Vol_5_YTD_Prior_# = NXT.Vol_5_YTD_Prior_# + CUR.Vol_5_YTD_Prior_#;

// NXT.Vol 5 YTD Prior $ = NXT.Vol 5 YTD Prior $ + CUR.Vol 5 YTD Prior $
NXT.Vol_5_YTD_Prior_$ = NXT.Vol_5_YTD_Prior_$ + CUR.Vol_5_YTD_Prior_$;

// NXT.Vol 5 Cur Diff # = NXT.Vol 5 Cur Diff # + CUR.Vol 5 Cur Diff #
NXT.Vol_5_Cur_Diff_# = NXT.Vol_5_Cur_Diff_# + CUR.Vol_5_Cur_Diff_#;

// NXT.Vol 5 Cur Diff $ = NXT.Vol 5 Cur Diff $ + CUR.Vol 5 Cur Diff $
NXT.Vol_5_Cur_Diff_$ = NXT.Vol_5_Cur_Diff_$ + CUR.Vol_5_Cur_Diff_$;

// NXT.Vol 5 PTD Diff # = NXT.Vol 5 PTD Diff # + CUR.Vol 5 PTD Diff #
NXT.Vol_5_PTD_Diff_# = NXT.Vol_5_PTD_Diff_# + CUR.Vol_5_PTD_Diff_#;

// NXT.Vol 5 PTD Diff $ = NXT.Vol 5 PTD Diff $ + CUR.Vol 5 PTD Diff $
NXT.Vol_5_PTD_Diff_$ = NXT.Vol_5_PTD_Diff_$ + CUR.Vol_5_PTD_Diff_$;

// NXT.Vol 5 YTD Diff # = NXT.Vol 5 YTD Diff # + CUR.Vol 5 YTD Diff #
NXT.Vol_5_YTD_Diff_# = NXT.Vol_5_YTD_Diff_# + CUR.Vol_5_YTD_Diff_#;

// NXT.Vol 5 YTD Diff $ = NXT.Vol 5 YTD Diff $ + CUR.Vol 5 YTD Diff $
NXT.Vol_5_YTD_Diff_$ = NXT.Vol_5_YTD_Diff_$ + CUR.Vol_5_YTD_Diff_$;

ENDIF;

// Print Prod Structure Group Code totals format
PRINT Prod Structure Group Code totals format;

ENDIF;

CASE;

IF NEW Item_Structure_Type_Code;
//?Divide totals by 1000 to condense (case is to enable grouping)
CASE;

// IF WRK.USR Status (Y/N) EQ WRK.USR Status (Y/N)
IF WRK.USR_Status_Y_N = WRK.USR_Status_Y_N;

EXECUTE FUNCTION(Rtv. Prd Typ Sum/Array) TYPE(RTVOBJ) ARRAY(Product_Type_SummaryAC1239113;
PARAMETER(WRK.Usr_Prod_Type_Cur_$);
PARAMETER(WRK.Usr_Prod_Type_Prior_$);
PARAMETER(WRK.Usr_Prod_Type_PTD_Cur_$);
PARAMETER(WRK.Usr_Prod_Type_PTD_Prior_$);
PARAMETER(WRK.Usr_Prod_Type_YTD_Cur_$);
PARAMETER(WRK.Usr_Prod_Type_YTD_Prior_$);
PARAMETER(WRK.Usr_Prod_Type_Cur_#);
PARAMETER(WRK.Usr_Prod_Type_Prior_#);
PARAMETER(WRK.Usr_Prod_Type_PTD_Cur_#);
PARAMETER(WRK.Usr_Prod_Type_PTD_Prior_#);
PARAMETER(WRK.Usr_Prod_Type_YTD_Cur_#);
PARAMETER(WRK.Usr_Prod_Type_YTD_Prior_#);
PARAMETER(CUR.Item_Structure_Type_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// WRK.Usr Prod Type Cur $ = WRK.Usr Prod Type Cur $ + CUR.Vol 5 Cur $
WRK.Usr_Prod_Type_Cur_$ = WRK.Usr_Prod_Type_Cur_$ + CUR.Vol_5_Cur_$;

// WRK.Usr Prod Type Prior $ = WRK.Usr Prod Type Prior $ + CUR.Vol 5 Prior $
WRK.Usr_Prod_Type_Prior_$ = WRK.Usr_Prod_Type_Prior_$ + CUR.Vol_5_Prior_$;

// WRK.Usr Prod Type Diff $ = WRK.Usr Prod Type Diff $ + CUR.Vol 5 Prior $
WRK.Usr_Prod_Type_Diff_$ = WRK.Usr_Prod_Type_Diff_$ + CUR.Vol_5_Prior_$;

// WRK.Usr Prod Type PTD Cur $ = WRK.Usr Prod Type PTD Cur $ + CUR.Vol 5 PTD Cur $
WRK.Usr_Prod_Type_PTD_Cur_$ = WRK.Usr_Prod_Type_PTD_Cur_$ + CUR.Vol_5_PTD_Cur_$;

// WRK.Usr Prod Type PTD Prior $ = WRK.Usr Prod Type PTD Prior $ + CUR.Vol 5 PTD Pr
WRK.Usr_Prod_Type_PTD_Prior_$ = WRK.Usr_Prod_Type_PTD_Prior_$ + CUR.Vol_5_PTD_Prior_$;

// WRK.Usr Prod Type YTD Cur $ = WRK.Usr Prod Type YTD Cur $ + CUR.Vol 5 YTD Cur $
WRK.Usr_Prod_Type_YTD_Cur_$ = WRK.Usr_Prod_Type_YTD_Cur_$ + CUR.Vol_5_YTD_Cur_$;

// WRK.Usr Prod Type YTD Prior $ = WRK.Usr Prod Type YTD Prior $ + CUR.Vol 5 YTD Pr
WRK.Usr_Prod_Type_YTD_Prior_$ = WRK.Usr_Prod_Type_YTD_Prior_$ + CUR.Vol_5_YTD_Prior_$;

// WRK.Usr Prod Type Cur # = WRK.Usr Prod Type Cur # + CUR.Vol 5 Cur #
WRK.Usr_Prod_Type_Cur_# = WRK.Usr_Prod_Type_Cur_# + CUR.Vol_5_Cur_#;

// WRK.Usr Prod Type Prior # = WRK.Usr Prod Type Prior # + CUR.Vol 5 Prior #
WRK.Usr_Prod_Type_Prior_# = WRK.Usr_Prod_Type_Prior_# + CUR.Vol_5_Prior_#;

// WRK.Usr Prod Type Diff # = WRK.Usr Prod Type Diff # + CUR.Vol 5 Prior #
WRK.Usr_Prod_Type_Diff_# = WRK.Usr_Prod_Type_Diff_# + CUR.Vol_5_Prior_#;

// WRK.Usr Prod Type PTD Cur # = WRK.Usr Prod Type PTD Cur # + CUR.Vol 5 PTD Cur #
WRK.Usr_Prod_Type_PTD_Cur_# = WRK.Usr_Prod_Type_PTD_Cur_# + CUR.Vol_5_PTD_Cur_#;

// WRK.Usr Prod Type PTD Prior # = WRK.Usr Prod Type PTD Prior # + CUR.Vol 5 PTD Pr
WRK.Usr_Prod_Type_PTD_Prior_# = WRK.Usr_Prod_Type_PTD_Prior_# + CUR.Vol_5_PTD_Prior_#;

// WRK.Usr Prod Type YTD Cur # = WRK.Usr Prod Type YTD Cur # + CUR.Vol 5 YTD Cur #
WRK.Usr_Prod_Type_YTD_Cur_# = WRK.Usr_Prod_Type_YTD_Cur_# + CUR.Vol_5_YTD_Cur_#;

// WRK.Usr Prod Type YTD Prior # = WRK.Usr Prod Type YTD Prior # + CUR.Vol 5 YTD Pr
WRK.Usr_Prod_Type_YTD_Prior_# = WRK.Usr_Prod_Type_YTD_Prior_# + CUR.Vol_5_YTD_Prior_#;

EXECUTE FUNCTION(CHG Prd Type Sum/array CH) TYPE(CHGOBJ) ARRAY(Product_Type_SummAC1239108;
PARAMETER(WRK.Usr_Prod_Type_Cur_$);
PARAMETER(WRK.Usr_Prod_Type_Prior_$);
PARAMETER(WRK.Usr_Prod_Type_PTD_Cur_$);
PARAMETER(WRK.Usr_Prod_Type_PTD_Prior_$);
PARAMETER(WRK.Usr_Prod_Type_YTD_Cur_$);
PARAMETER(WRK.Usr_Prod_Type_YTD_Prior_$);
PARAMETER(WRK.Usr_Prod_Type_Cur_#);
PARAMETER(WRK.Usr_Prod_Type_Prior_#);
PARAMETER(WRK.Usr_Prod_Type_PTD_Cur_#);
PARAMETER(WRK.Usr_Prod_Type_PTD_Prior_#);
PARAMETER(WRK.Usr_Prod_Type_YTD_Cur_#);
PARAMETER(WRK.Usr_Prod_Type_YTD_Prior_#);
PARAMETER(CUR.Item_Structure_Type_Code);

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Usr Prod Type Cur $ = CUR.Vol 5 Cur $
WRK.Usr_Prod_Type_Cur_$ = CUR.Vol_5_Cur_$;

// WRK.Usr Prod Type Prior $ = CUR.Vol 5 Prior $
WRK.Usr_Prod_Type_Prior_$ = CUR.Vol_5_Prior_$;

// WRK.Usr Prod Type Diff $ = CUR.Vol 5 Prior $
WRK.Usr_Prod_Type_Diff_$ = CUR.Vol_5_Prior_$;

// WRK.Usr Prod Type PTD Cur $ = CUR.Vol 5 PTD Cur $
WRK.Usr_Prod_Type_PTD_Cur_$ = CUR.Vol_5_PTD_Cur_$;

// WRK.Usr Prod Type PTD Prior $ = CUR.Vol 5 PTD Prior $
WRK.Usr_Prod_Type_PTD_Prior_$ = CUR.Vol_5_PTD_Prior_$;

// WRK.Usr Prod Type YTD Cur $ = CUR.Vol 5 YTD Cur $
WRK.Usr_Prod_Type_YTD_Cur_$ = CUR.Vol_5_YTD_Cur_$;

// WRK.Usr Prod Type YTD Prior $ = CUR.Vol 5 YTD Prior $
WRK.Usr_Prod_Type_YTD_Prior_$ = CUR.Vol_5_YTD_Prior_$;

// WRK.Usr Prod Type Cur # = CUR.Vol 5 Cur #
WRK.Usr_Prod_Type_Cur_# = CUR.Vol_5_Cur_#;

// WRK.Usr Prod Type Prior # = CUR.Vol 5 Prior #
WRK.Usr_Prod_Type_Prior_# = CUR.Vol_5_Prior_#;

// WRK.Usr Prod Type Diff # = CUR.Vol 5 Prior #
WRK.Usr_Prod_Type_Diff_# = CUR.Vol_5_Prior_#;

// WRK.Usr Prod Type PTD Cur # = CUR.Vol 5 PTD Cur #
WRK.Usr_Prod_Type_PTD_Cur_# = CUR.Vol_5_PTD_Cur_#;

// WRK.Usr Prod Type PTD Prior # = CUR.Vol 5 PTD Prior #
WRK.Usr_Prod_Type_PTD_Prior_# = CUR.Vol_5_PTD_Prior_#;

// WRK.Usr Prod Type YTD Cur # = CUR.Vol 5 YTD Cur #
WRK.Usr_Prod_Type_YTD_Cur_# = CUR.Vol_5_YTD_Cur_#;

// WRK.Usr Prod Type YTD Prior # = CUR.Vol 5 YTD Prior #
WRK.Usr_Prod_Type_YTD_Prior_# = CUR.Vol_5_YTD_Prior_#;

EXECUTE FUNCTION(CRT Prd Typ Sum/Array  CR) TYPE(CRTOBJ) ARRAY(Product_Type_SummAC1239111;
PARAMETER(WRK.Usr_Prod_Type_Cur_$);
PARAMETER(WRK.Usr_Prod_Type_Prior_$);
PARAMETER(WRK.Usr_Prod_Type_PTD_Cur_$);
PARAMETER(WRK.Usr_Prod_Type_PTD_Prior_$);
PARAMETER(WRK.Usr_Prod_Type_YTD_Cur_$);
PARAMETER(WRK.Usr_Prod_Type_YTD_Prior_$);
PARAMETER(WRK.Usr_Prod_Type_Cur_#);
PARAMETER(WRK.Usr_Prod_Type_Prior_#);
PARAMETER(WRK.Usr_Prod_Type_PTD_Cur_#);
PARAMETER(WRK.Usr_Prod_Type_PTD_Prior_#);
PARAMETER(WRK.Usr_Prod_Type_YTD_Cur_#);
PARAMETER(WRK.Usr_Prod_Type_YTD_Prior_#);
PARAMETER(CUR.Item_Structure_Type_Code);

ENDIF;

ENDIF;

//?Calculate Differences             (case is to enable grouping)
CASE;

// IF WRK.USR Status (Y/N) EQ WRK.USR Status (Y/N)
IF WRK.USR_Status_Y_N = WRK.USR_Status_Y_N;

// CUR.Vol 5 Cur Diff # = CUR.Vol 5 Cur # - CUR.Vol 5 Prior #
CUR.Vol_5_Cur_Diff_# = CUR.Vol_5_Cur_# - CUR.Vol_5_Prior_#;

// CUR.Vol 5 Cur Diff $ = CUR.Vol 5 Cur $ - CUR.Vol 5 Prior $
CUR.Vol_5_Cur_Diff_$ = CUR.Vol_5_Cur_$ - CUR.Vol_5_Prior_$;

// CUR.Vol 5 PTD Diff # = CUR.Vol 5 PTD Cur # - CUR.Vol 5 PTD Prior #
CUR.Vol_5_PTD_Diff_# = CUR.Vol_5_PTD_Cur_# - CUR.Vol_5_PTD_Prior_#;

// CUR.Vol 5 PTD Diff $ = CUR.Vol 5 PTD Cur $ - CUR.Vol 5 PTD Prior $
CUR.Vol_5_PTD_Diff_$ = CUR.Vol_5_PTD_Cur_$ - CUR.Vol_5_PTD_Prior_$;

// CUR.Vol 5 YTD Diff # = CUR.Vol 5 YTD Cur # - CUR.Vol 5 YTD Prior #
CUR.Vol_5_YTD_Diff_# = CUR.Vol_5_YTD_Cur_# - CUR.Vol_5_YTD_Prior_#;

// CUR.Vol 5 YTD Diff $ = CUR.Vol 5 YTD Cur $ - CUR.Vol 5 YTD Prior $
CUR.Vol_5_YTD_Diff_$ = CUR.Vol_5_YTD_Cur_$ - CUR.Vol_5_YTD_Prior_$;

ENDIF;

//?Accumulate totals                 (case is to enable grouping)
CASE;

// IF WRK.USR Status (Y/N) EQ WRK.USR Status (Y/N)
IF WRK.USR_Status_Y_N = WRK.USR_Status_Y_N;

// NXT.Vol 5 Cur # = NXT.Vol 5 Cur # + CUR.Vol 5 Cur #
NXT.Vol_5_Cur_# = NXT.Vol_5_Cur_# + CUR.Vol_5_Cur_#;

// NXT.Vol 5 Cur $ = NXT.Vol 5 Cur $ + CUR.Vol 5 Cur $
NXT.Vol_5_Cur_$ = NXT.Vol_5_Cur_$ + CUR.Vol_5_Cur_$;

// NXT.Vol 5 Prior # = NXT.Vol 5 Prior # + CUR.Vol 5 Prior #
NXT.Vol_5_Prior_# = NXT.Vol_5_Prior_# + CUR.Vol_5_Prior_#;

// NXT.Vol 5 Prior $ = NXT.Vol 5 Prior $ + CUR.Vol 5 Prior $
NXT.Vol_5_Prior_$ = NXT.Vol_5_Prior_$ + CUR.Vol_5_Prior_$;

// NXT.Vol 5 PTD Cur # = NXT.Vol 5 PTD Cur # + CUR.Vol 5 PTD Cur #
NXT.Vol_5_PTD_Cur_# = NXT.Vol_5_PTD_Cur_# + CUR.Vol_5_PTD_Cur_#;

// NXT.Vol 5 PTD Cur $ = NXT.Vol 5 PTD Cur $ + CUR.Vol 5 PTD Cur $
NXT.Vol_5_PTD_Cur_$ = NXT.Vol_5_PTD_Cur_$ + CUR.Vol_5_PTD_Cur_$;

// NXT.Vol 5 PTD Prior # = NXT.Vol 5 PTD Prior # + CUR.Vol 5 PTD Prior #
NXT.Vol_5_PTD_Prior_# = NXT.Vol_5_PTD_Prior_# + CUR.Vol_5_PTD_Prior_#;

// NXT.Vol 5 PTD Prior $ = NXT.Vol 5 PTD Prior $ + CUR.Vol 5 PTD Prior $
NXT.Vol_5_PTD_Prior_$ = NXT.Vol_5_PTD_Prior_$ + CUR.Vol_5_PTD_Prior_$;

// NXT.Vol 5 YTD Cur # = NXT.Vol 5 YTD Cur # + CUR.Vol 5 YTD Cur #
NXT.Vol_5_YTD_Cur_# = NXT.Vol_5_YTD_Cur_# + CUR.Vol_5_YTD_Cur_#;

// NXT.Vol 5 YTD Cur $ = NXT.Vol 5 YTD Cur $ + CUR.Vol 5 YTD Cur $
NXT.Vol_5_YTD_Cur_$ = NXT.Vol_5_YTD_Cur_$ + CUR.Vol_5_YTD_Cur_$;

// NXT.Vol 5 YTD Prior # = NXT.Vol 5 YTD Prior # + CUR.Vol 5 YTD Prior #
NXT.Vol_5_YTD_Prior_# = NXT.Vol_5_YTD_Prior_# + CUR.Vol_5_YTD_Prior_#;

// NXT.Vol 5 YTD Prior $ = NXT.Vol 5 YTD Prior $ + CUR.Vol 5 YTD Prior $
NXT.Vol_5_YTD_Prior_$ = NXT.Vol_5_YTD_Prior_$ + CUR.Vol_5_YTD_Prior_$;

// NXT.Vol 5 Cur Diff # = NXT.Vol 5 Cur Diff # + CUR.Vol 5 Cur Diff #
NXT.Vol_5_Cur_Diff_# = NXT.Vol_5_Cur_Diff_# + CUR.Vol_5_Cur_Diff_#;

// NXT.Vol 5 Cur Diff $ = NXT.Vol 5 Cur Diff $ + CUR.Vol 5 Cur Diff $
NXT.Vol_5_Cur_Diff_$ = NXT.Vol_5_Cur_Diff_$ + CUR.Vol_5_Cur_Diff_$;

// NXT.Vol 5 PTD Diff # = NXT.Vol 5 PTD Diff # + CUR.Vol 5 PTD Diff #
NXT.Vol_5_PTD_Diff_# = NXT.Vol_5_PTD_Diff_# + CUR.Vol_5_PTD_Diff_#;

// NXT.Vol 5 PTD Diff $ = NXT.Vol 5 PTD Diff $ + CUR.Vol 5 PTD Diff $
NXT.Vol_5_PTD_Diff_$ = NXT.Vol_5_PTD_Diff_$ + CUR.Vol_5_PTD_Diff_$;

// NXT.Vol 5 YTD Diff # = NXT.Vol 5 YTD Diff # + CUR.Vol 5 YTD Diff #
NXT.Vol_5_YTD_Diff_# = NXT.Vol_5_YTD_Diff_# + CUR.Vol_5_YTD_Diff_#;

// NXT.Vol 5 YTD Diff $ = NXT.Vol 5 YTD Diff $ + CUR.Vol 5 YTD Diff $
NXT.Vol_5_YTD_Diff_$ = NXT.Vol_5_YTD_Diff_$ + CUR.Vol_5_YTD_Diff_$;

ENDIF;

// Print Prod Structure Type Code totals format
PRINT Prod Structure Type Code totals format;

ENDIF;

CASE;

IF NEW Sales_Route_Code;
//?Do not print if Summary Only
CASE;

// IF PAR.USR Check Y/N Status is yes
IF PAR.USR_Check_Y_N_Status = 'Y';

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

//?Calculate Differences             (case is to enable grouping)
CASE;

// IF WRK.USR Status (Y/N) EQ WRK.USR Status (Y/N)
IF WRK.USR_Status_Y_N = WRK.USR_Status_Y_N;

// CUR.Vol 5 Cur Diff # = CUR.Vol 5 Cur # - CUR.Vol 5 Prior #
CUR.Vol_5_Cur_Diff_# = CUR.Vol_5_Cur_# - CUR.Vol_5_Prior_#;

// CUR.Vol 5 Cur Diff $ = CUR.Vol 5 Cur $ - CUR.Vol 5 Prior $
CUR.Vol_5_Cur_Diff_$ = CUR.Vol_5_Cur_$ - CUR.Vol_5_Prior_$;

// CUR.Vol 5 PTD Diff # = CUR.Vol 5 PTD Cur # - CUR.Vol 5 PTD Prior #
CUR.Vol_5_PTD_Diff_# = CUR.Vol_5_PTD_Cur_# - CUR.Vol_5_PTD_Prior_#;

// CUR.Vol 5 PTD Diff $ = CUR.Vol 5 PTD Cur $ - CUR.Vol 5 PTD Prior $
CUR.Vol_5_PTD_Diff_$ = CUR.Vol_5_PTD_Cur_$ - CUR.Vol_5_PTD_Prior_$;

// CUR.Vol 5 YTD Diff # = CUR.Vol 5 YTD Cur # - CUR.Vol 5 YTD Prior #
CUR.Vol_5_YTD_Diff_# = CUR.Vol_5_YTD_Cur_# - CUR.Vol_5_YTD_Prior_#;

// CUR.Vol 5 YTD Diff $ = CUR.Vol 5 YTD Cur $ - CUR.Vol 5 YTD Prior $
CUR.Vol_5_YTD_Diff_$ = CUR.Vol_5_YTD_Cur_$ - CUR.Vol_5_YTD_Prior_$;

ENDIF;

//?Accumulate totals                 (case is to enable grouping)
CASE;

// IF WRK.USR Status (Y/N) EQ WRK.USR Status (Y/N)
IF WRK.USR_Status_Y_N = WRK.USR_Status_Y_N;

// NXT.Vol 5 Cur # = NXT.Vol 5 Cur # + CUR.Vol 5 Cur #
NXT.Vol_5_Cur_# = NXT.Vol_5_Cur_# + CUR.Vol_5_Cur_#;

// NXT.Vol 5 Cur $ = NXT.Vol 5 Cur $ + CUR.Vol 5 Cur $
NXT.Vol_5_Cur_$ = NXT.Vol_5_Cur_$ + CUR.Vol_5_Cur_$;

// NXT.Vol 5 Prior # = NXT.Vol 5 Prior # + CUR.Vol 5 Prior #
NXT.Vol_5_Prior_# = NXT.Vol_5_Prior_# + CUR.Vol_5_Prior_#;

// NXT.Vol 5 Prior $ = NXT.Vol 5 Prior $ + CUR.Vol 5 Prior $
NXT.Vol_5_Prior_$ = NXT.Vol_5_Prior_$ + CUR.Vol_5_Prior_$;

// NXT.Vol 5 PTD Cur # = NXT.Vol 5 PTD Cur # + CUR.Vol 5 PTD Cur #
NXT.Vol_5_PTD_Cur_# = NXT.Vol_5_PTD_Cur_# + CUR.Vol_5_PTD_Cur_#;

// NXT.Vol 5 PTD Cur $ = NXT.Vol 5 PTD Cur $ + CUR.Vol 5 PTD Cur $
NXT.Vol_5_PTD_Cur_$ = NXT.Vol_5_PTD_Cur_$ + CUR.Vol_5_PTD_Cur_$;

// NXT.Vol 5 PTD Prior # = NXT.Vol 5 PTD Prior # + CUR.Vol 5 PTD Prior #
NXT.Vol_5_PTD_Prior_# = NXT.Vol_5_PTD_Prior_# + CUR.Vol_5_PTD_Prior_#;

// NXT.Vol 5 PTD Prior $ = NXT.Vol 5 PTD Prior $ + CUR.Vol 5 PTD Prior $
NXT.Vol_5_PTD_Prior_$ = NXT.Vol_5_PTD_Prior_$ + CUR.Vol_5_PTD_Prior_$;

// NXT.Vol 5 YTD Cur # = NXT.Vol 5 YTD Cur # + CUR.Vol 5 YTD Cur #
NXT.Vol_5_YTD_Cur_# = NXT.Vol_5_YTD_Cur_# + CUR.Vol_5_YTD_Cur_#;

// NXT.Vol 5 YTD Cur $ = NXT.Vol 5 YTD Cur $ + CUR.Vol 5 YTD Cur $
NXT.Vol_5_YTD_Cur_$ = NXT.Vol_5_YTD_Cur_$ + CUR.Vol_5_YTD_Cur_$;

// NXT.Vol 5 YTD Prior # = NXT.Vol 5 YTD Prior # + CUR.Vol 5 YTD Prior #
NXT.Vol_5_YTD_Prior_# = NXT.Vol_5_YTD_Prior_# + CUR.Vol_5_YTD_Prior_#;

// NXT.Vol 5 YTD Prior $ = NXT.Vol 5 YTD Prior $ + CUR.Vol 5 YTD Prior $
NXT.Vol_5_YTD_Prior_$ = NXT.Vol_5_YTD_Prior_$ + CUR.Vol_5_YTD_Prior_$;

// NXT.Vol 5 Cur Diff # = NXT.Vol 5 Cur Diff # + CUR.Vol 5 Cur Diff #
NXT.Vol_5_Cur_Diff_# = NXT.Vol_5_Cur_Diff_# + CUR.Vol_5_Cur_Diff_#;

// NXT.Vol 5 Cur Diff $ = NXT.Vol 5 Cur Diff $ + CUR.Vol 5 Cur Diff $
NXT.Vol_5_Cur_Diff_$ = NXT.Vol_5_Cur_Diff_$ + CUR.Vol_5_Cur_Diff_$;

// NXT.Vol 5 PTD Diff # = NXT.Vol 5 PTD Diff # + CUR.Vol 5 PTD Diff #
NXT.Vol_5_PTD_Diff_# = NXT.Vol_5_PTD_Diff_# + CUR.Vol_5_PTD_Diff_#;

// NXT.Vol 5 PTD Diff $ = NXT.Vol 5 PTD Diff $ + CUR.Vol 5 PTD Diff $
NXT.Vol_5_PTD_Diff_$ = NXT.Vol_5_PTD_Diff_$ + CUR.Vol_5_PTD_Diff_$;

// NXT.Vol 5 YTD Diff # = NXT.Vol 5 YTD Diff # + CUR.Vol 5 YTD Diff #
NXT.Vol_5_YTD_Diff_# = NXT.Vol_5_YTD_Diff_# + CUR.Vol_5_YTD_Diff_#;

// NXT.Vol 5 YTD Diff $ = NXT.Vol 5 YTD Diff $ + CUR.Vol 5 YTD Diff $
NXT.Vol_5_YTD_Diff_$ = NXT.Vol_5_YTD_Diff_$ + CUR.Vol_5_YTD_Diff_$;

ENDIF;

// Print Sales Route Code totals format
PRINT Sales Route Code totals format;

ENDIF;

CASE;

IF NEW Manager_Level_Code;
//?Do not print if Summary Only
CASE;

// IF PAR.USR Check Y/N Status is yes
IF PAR.USR_Check_Y_N_Status = 'Y';

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

//?Calculate Differences             (case is to enable grouping)
CASE;

// IF WRK.USR Status (Y/N) EQ WRK.USR Status (Y/N)
IF WRK.USR_Status_Y_N = WRK.USR_Status_Y_N;

// CUR.Vol 5 Cur Diff # = CUR.Vol 5 Cur # - CUR.Vol 5 Prior #
CUR.Vol_5_Cur_Diff_# = CUR.Vol_5_Cur_# - CUR.Vol_5_Prior_#;

// CUR.Vol 5 Cur Diff $ = CUR.Vol 5 Cur $ - CUR.Vol 5 Prior $
CUR.Vol_5_Cur_Diff_$ = CUR.Vol_5_Cur_$ - CUR.Vol_5_Prior_$;

// CUR.Vol 5 PTD Diff # = CUR.Vol 5 PTD Cur # - CUR.Vol 5 PTD Prior #
CUR.Vol_5_PTD_Diff_# = CUR.Vol_5_PTD_Cur_# - CUR.Vol_5_PTD_Prior_#;

// CUR.Vol 5 PTD Diff $ = CUR.Vol 5 PTD Cur $ - CUR.Vol 5 PTD Prior $
CUR.Vol_5_PTD_Diff_$ = CUR.Vol_5_PTD_Cur_$ - CUR.Vol_5_PTD_Prior_$;

// CUR.Vol 5 YTD Diff # = CUR.Vol 5 YTD Cur # - CUR.Vol 5 YTD Prior #
CUR.Vol_5_YTD_Diff_# = CUR.Vol_5_YTD_Cur_# - CUR.Vol_5_YTD_Prior_#;

// CUR.Vol 5 YTD Diff $ = CUR.Vol 5 YTD Cur $ - CUR.Vol 5 YTD Prior $
CUR.Vol_5_YTD_Diff_$ = CUR.Vol_5_YTD_Cur_$ - CUR.Vol_5_YTD_Prior_$;

ENDIF;

//?Accumulate totals                 (case is to enable grouping)
CASE;

// IF WRK.USR Status (Y/N) EQ WRK.USR Status (Y/N)
IF WRK.USR_Status_Y_N = WRK.USR_Status_Y_N;

// NXT.Vol 5 Cur # = NXT.Vol 5 Cur # + CUR.Vol 5 Cur #
NXT.Vol_5_Cur_# = NXT.Vol_5_Cur_# + CUR.Vol_5_Cur_#;

// NXT.Vol 5 Cur $ = NXT.Vol 5 Cur $ + CUR.Vol 5 Cur $
NXT.Vol_5_Cur_$ = NXT.Vol_5_Cur_$ + CUR.Vol_5_Cur_$;

// NXT.Vol 5 Prior # = NXT.Vol 5 Prior # + CUR.Vol 5 Prior #
NXT.Vol_5_Prior_# = NXT.Vol_5_Prior_# + CUR.Vol_5_Prior_#;

// NXT.Vol 5 Prior $ = NXT.Vol 5 Prior $ + CUR.Vol 5 Prior $
NXT.Vol_5_Prior_$ = NXT.Vol_5_Prior_$ + CUR.Vol_5_Prior_$;

// NXT.Vol 5 PTD Cur # = NXT.Vol 5 PTD Cur # + CUR.Vol 5 PTD Cur #
NXT.Vol_5_PTD_Cur_# = NXT.Vol_5_PTD_Cur_# + CUR.Vol_5_PTD_Cur_#;

// NXT.Vol 5 PTD Cur $ = NXT.Vol 5 PTD Cur $ + CUR.Vol 5 PTD Cur $
NXT.Vol_5_PTD_Cur_$ = NXT.Vol_5_PTD_Cur_$ + CUR.Vol_5_PTD_Cur_$;

// NXT.Vol 5 PTD Prior # = NXT.Vol 5 PTD Prior # + CUR.Vol 5 PTD Prior #
NXT.Vol_5_PTD_Prior_# = NXT.Vol_5_PTD_Prior_# + CUR.Vol_5_PTD_Prior_#;

// NXT.Vol 5 PTD Prior $ = NXT.Vol 5 PTD Prior $ + CUR.Vol 5 PTD Prior $
NXT.Vol_5_PTD_Prior_$ = NXT.Vol_5_PTD_Prior_$ + CUR.Vol_5_PTD_Prior_$;

// NXT.Vol 5 YTD Cur # = NXT.Vol 5 YTD Cur # + CUR.Vol 5 YTD Cur #
NXT.Vol_5_YTD_Cur_# = NXT.Vol_5_YTD_Cur_# + CUR.Vol_5_YTD_Cur_#;

// NXT.Vol 5 YTD Cur $ = NXT.Vol 5 YTD Cur $ + CUR.Vol 5 YTD Cur $
NXT.Vol_5_YTD_Cur_$ = NXT.Vol_5_YTD_Cur_$ + CUR.Vol_5_YTD_Cur_$;

// NXT.Vol 5 YTD Prior # = NXT.Vol 5 YTD Prior # + CUR.Vol 5 YTD Prior #
NXT.Vol_5_YTD_Prior_# = NXT.Vol_5_YTD_Prior_# + CUR.Vol_5_YTD_Prior_#;

// NXT.Vol 5 YTD Prior $ = NXT.Vol 5 YTD Prior $ + CUR.Vol 5 YTD Prior $
NXT.Vol_5_YTD_Prior_$ = NXT.Vol_5_YTD_Prior_$ + CUR.Vol_5_YTD_Prior_$;

// NXT.Vol 5 Cur Diff # = NXT.Vol 5 Cur Diff # + CUR.Vol 5 Cur Diff #
NXT.Vol_5_Cur_Diff_# = NXT.Vol_5_Cur_Diff_# + CUR.Vol_5_Cur_Diff_#;

// NXT.Vol 5 Cur Diff $ = NXT.Vol 5 Cur Diff $ + CUR.Vol 5 Cur Diff $
NXT.Vol_5_Cur_Diff_$ = NXT.Vol_5_Cur_Diff_$ + CUR.Vol_5_Cur_Diff_$;

// NXT.Vol 5 PTD Diff # = NXT.Vol 5 PTD Diff # + CUR.Vol 5 PTD Diff #
NXT.Vol_5_PTD_Diff_# = NXT.Vol_5_PTD_Diff_# + CUR.Vol_5_PTD_Diff_#;

// NXT.Vol 5 PTD Diff $ = NXT.Vol 5 PTD Diff $ + CUR.Vol 5 PTD Diff $
NXT.Vol_5_PTD_Diff_$ = NXT.Vol_5_PTD_Diff_$ + CUR.Vol_5_PTD_Diff_$;

// NXT.Vol 5 YTD Diff # = NXT.Vol 5 YTD Diff # + CUR.Vol 5 YTD Diff #
NXT.Vol_5_YTD_Diff_# = NXT.Vol_5_YTD_Diff_# + CUR.Vol_5_YTD_Diff_#;

// NXT.Vol 5 YTD Diff $ = NXT.Vol 5 YTD Diff $ + CUR.Vol 5 YTD Diff $
NXT.Vol_5_YTD_Diff_$ = NXT.Vol_5_YTD_Diff_$ + CUR.Vol_5_YTD_Diff_$;

ENDIF;

// Print Manager Level Code totals format
PRINT Manager Level Code totals format;

ENDIF;

CASE;

IF NEW VP_Level_Code;
//?Do not print if Summary Only
CASE;

// IF PAR.USR Check Y/N Status is yes
IF PAR.USR_Check_Y_N_Status = 'Y';

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

//?Calculate Differences             (case is to enable grouping)
CASE;

// IF WRK.USR Status (Y/N) EQ WRK.USR Status (Y/N)
IF WRK.USR_Status_Y_N = WRK.USR_Status_Y_N;

// CUR.Vol 5 Cur Diff # = CUR.Vol 5 Cur # - CUR.Vol 5 Prior #
CUR.Vol_5_Cur_Diff_# = CUR.Vol_5_Cur_# - CUR.Vol_5_Prior_#;

// CUR.Vol 5 Cur Diff $ = CUR.Vol 5 Cur $ - CUR.Vol 5 Prior $
CUR.Vol_5_Cur_Diff_$ = CUR.Vol_5_Cur_$ - CUR.Vol_5_Prior_$;

// CUR.Vol 5 PTD Diff # = CUR.Vol 5 PTD Cur # - CUR.Vol 5 PTD Prior #
CUR.Vol_5_PTD_Diff_# = CUR.Vol_5_PTD_Cur_# - CUR.Vol_5_PTD_Prior_#;

// CUR.Vol 5 PTD Diff $ = CUR.Vol 5 PTD Cur $ - CUR.Vol 5 PTD Prior $
CUR.Vol_5_PTD_Diff_$ = CUR.Vol_5_PTD_Cur_$ - CUR.Vol_5_PTD_Prior_$;

// CUR.Vol 5 YTD Diff # = CUR.Vol 5 YTD Cur # - CUR.Vol 5 YTD Prior #
CUR.Vol_5_YTD_Diff_# = CUR.Vol_5_YTD_Cur_# - CUR.Vol_5_YTD_Prior_#;

// CUR.Vol 5 YTD Diff $ = CUR.Vol 5 YTD Cur $ - CUR.Vol 5 YTD Prior $
CUR.Vol_5_YTD_Diff_$ = CUR.Vol_5_YTD_Cur_$ - CUR.Vol_5_YTD_Prior_$;

ENDIF;

//?Accumulate totals                 (case is to enable grouping)
CASE;

// IF WRK.USR Status (Y/N) EQ WRK.USR Status (Y/N)
IF WRK.USR_Status_Y_N = WRK.USR_Status_Y_N;

// NXT.Vol 5 Cur # = NXT.Vol 5 Cur # + CUR.Vol 5 Cur #
NXT.Vol_5_Cur_# = NXT.Vol_5_Cur_# + CUR.Vol_5_Cur_#;

// NXT.Vol 5 Cur $ = NXT.Vol 5 Cur $ + CUR.Vol 5 Cur $
NXT.Vol_5_Cur_$ = NXT.Vol_5_Cur_$ + CUR.Vol_5_Cur_$;

// NXT.Vol 5 Prior # = NXT.Vol 5 Prior # + CUR.Vol 5 Prior #
NXT.Vol_5_Prior_# = NXT.Vol_5_Prior_# + CUR.Vol_5_Prior_#;

// NXT.Vol 5 Prior $ = NXT.Vol 5 Prior $ + CUR.Vol 5 Prior $
NXT.Vol_5_Prior_$ = NXT.Vol_5_Prior_$ + CUR.Vol_5_Prior_$;

// NXT.Vol 5 PTD Cur # = NXT.Vol 5 PTD Cur # + CUR.Vol 5 PTD Cur #
NXT.Vol_5_PTD_Cur_# = NXT.Vol_5_PTD_Cur_# + CUR.Vol_5_PTD_Cur_#;

// NXT.Vol 5 PTD Cur $ = NXT.Vol 5 PTD Cur $ + CUR.Vol 5 PTD Cur $
NXT.Vol_5_PTD_Cur_$ = NXT.Vol_5_PTD_Cur_$ + CUR.Vol_5_PTD_Cur_$;

// NXT.Vol 5 PTD Prior # = NXT.Vol 5 PTD Prior # + CUR.Vol 5 PTD Prior #
NXT.Vol_5_PTD_Prior_# = NXT.Vol_5_PTD_Prior_# + CUR.Vol_5_PTD_Prior_#;

// NXT.Vol 5 PTD Prior $ = NXT.Vol 5 PTD Prior $ + CUR.Vol 5 PTD Prior $
NXT.Vol_5_PTD_Prior_$ = NXT.Vol_5_PTD_Prior_$ + CUR.Vol_5_PTD_Prior_$;

// NXT.Vol 5 YTD Cur # = NXT.Vol 5 YTD Cur # + CUR.Vol 5 YTD Cur #
NXT.Vol_5_YTD_Cur_# = NXT.Vol_5_YTD_Cur_# + CUR.Vol_5_YTD_Cur_#;

// NXT.Vol 5 YTD Cur $ = NXT.Vol 5 YTD Cur $ + CUR.Vol 5 YTD Cur $
NXT.Vol_5_YTD_Cur_$ = NXT.Vol_5_YTD_Cur_$ + CUR.Vol_5_YTD_Cur_$;

// NXT.Vol 5 YTD Prior # = NXT.Vol 5 YTD Prior # + CUR.Vol 5 YTD Prior #
NXT.Vol_5_YTD_Prior_# = NXT.Vol_5_YTD_Prior_# + CUR.Vol_5_YTD_Prior_#;

// NXT.Vol 5 YTD Prior $ = NXT.Vol 5 YTD Prior $ + CUR.Vol 5 YTD Prior $
NXT.Vol_5_YTD_Prior_$ = NXT.Vol_5_YTD_Prior_$ + CUR.Vol_5_YTD_Prior_$;

// NXT.Vol 5 Cur Diff # = NXT.Vol 5 Cur Diff # + CUR.Vol 5 Cur Diff #
NXT.Vol_5_Cur_Diff_# = NXT.Vol_5_Cur_Diff_# + CUR.Vol_5_Cur_Diff_#;

// NXT.Vol 5 Cur Diff $ = NXT.Vol 5 Cur Diff $ + CUR.Vol 5 Cur Diff $
NXT.Vol_5_Cur_Diff_$ = NXT.Vol_5_Cur_Diff_$ + CUR.Vol_5_Cur_Diff_$;

// NXT.Vol 5 PTD Diff # = NXT.Vol 5 PTD Diff # + CUR.Vol 5 PTD Diff #
NXT.Vol_5_PTD_Diff_# = NXT.Vol_5_PTD_Diff_# + CUR.Vol_5_PTD_Diff_#;

// NXT.Vol 5 PTD Diff $ = NXT.Vol 5 PTD Diff $ + CUR.Vol 5 PTD Diff $
NXT.Vol_5_PTD_Diff_$ = NXT.Vol_5_PTD_Diff_$ + CUR.Vol_5_PTD_Diff_$;

// NXT.Vol 5 YTD Diff # = NXT.Vol 5 YTD Diff # + CUR.Vol 5 YTD Diff #
NXT.Vol_5_YTD_Diff_# = NXT.Vol_5_YTD_Diff_# + CUR.Vol_5_YTD_Diff_#;

// NXT.Vol 5 YTD Diff $ = NXT.Vol 5 YTD Diff $ + CUR.Vol 5 YTD Diff $
NXT.Vol_5_YTD_Diff_$ = NXT.Vol_5_YTD_Diff_$ + CUR.Vol_5_YTD_Diff_$;

ENDIF;

// Print VP Level Code totals format
PRINT VP Level Code totals format;

ENDIF;

// SUPPRESSED PRINT Accounting Company Number totals format

//?USER: On print of final totals format

//?Calculate Differences             (case is to enable grouping)
CASE;

// IF WRK.USR Status (Y/N) EQ WRK.USR Status (Y/N)
IF WRK.USR_Status_Y_N = WRK.USR_Status_Y_N;

// CUR.Vol 5 Cur Diff # = CUR.Vol 5 Cur # - CUR.Vol 5 Prior #
CUR.Vol_5_Cur_Diff_# = CUR.Vol_5_Cur_# - CUR.Vol_5_Prior_#;

// CUR.Vol 5 Cur Diff $ = CUR.Vol 5 Cur $ - CUR.Vol 5 Prior $
CUR.Vol_5_Cur_Diff_$ = CUR.Vol_5_Cur_$ - CUR.Vol_5_Prior_$;

// CUR.Vol 5 PTD Diff # = CUR.Vol 5 PTD Cur # - CUR.Vol 5 PTD Prior #
CUR.Vol_5_PTD_Diff_# = CUR.Vol_5_PTD_Cur_# - CUR.Vol_5_PTD_Prior_#;

// CUR.Vol 5 PTD Diff $ = CUR.Vol 5 PTD Cur $ - CUR.Vol 5 PTD Prior $
CUR.Vol_5_PTD_Diff_$ = CUR.Vol_5_PTD_Cur_$ - CUR.Vol_5_PTD_Prior_$;

// CUR.Vol 5 YTD Diff # = CUR.Vol 5 YTD Cur # - CUR.Vol 5 YTD Prior #
CUR.Vol_5_YTD_Diff_# = CUR.Vol_5_YTD_Cur_# - CUR.Vol_5_YTD_Prior_#;

// CUR.Vol 5 YTD Diff $ = CUR.Vol 5 YTD Cur $ - CUR.Vol 5 YTD Prior $
CUR.Vol_5_YTD_Diff_$ = CUR.Vol_5_YTD_Cur_$ - CUR.Vol_5_YTD_Prior_$;

ENDIF;

// CUR.Company Number = PAR.Company Number
CUR.Company_Number = PAR.Company_Number;

