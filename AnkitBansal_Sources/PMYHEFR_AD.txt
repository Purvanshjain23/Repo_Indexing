// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMYHEFR
// ?Date: 14.08.2025 Time: 03:44:31
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.Change Flag USR = CND.No
PAR.Change_Flag_USR = 'N';

// PAR.System Value Numeric = CON.1
PAR.System_Value_Numeric = 1;

// PAR.PRT Description = CON.JCO Plant Invoices
PAR.PRT_Description = 'JCO Plant Invoices';

// PAR.PRT Night Queue = CND.JOBD
PAR.PRT_Night_Queue = *JOBD;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.Status - Y or N = CND.no
PAR.Status_Y_or_N = 'N';

//?***** Change Log and Comments
DO;

//?** 06/14/2013 LJB D002587
//?** Customer Purchase Order# added. A partial PO# is allowed so
//?** select all orders that contain the passed in value.
//?*****
//?** 04/02/2013 RMC E2494
//?** Changes for calculating adjusted unit price from entered gate price
//?  Output gate price after the order is invoiced, dont req date because
//?  one person may enter the price and another may enter the date
//?*****
//?** 06/22/2012 LJB E002158
//?** Both Gate Price and JPN Issuance Date must be entered in
//?** in the ctl fields. Error if only one is entered.
//?** Default the JPN Issuance Date into the subfile field. If it is
//?** blank, then default in the original Invoice Date.
//?*****
//?** 06/13/2012 LJB E002129
//?** Add Invoice Issuance Date to subfile. Add Gate Price and
//?** Issuance Date to Control Record. If ctl price or date are entered
//?** then update order detail gate price and order header
//?** jpn invoice issuance date.
//?*****
//?** 10/09/2008 LJB E00254
//?** Require an email address before submitting the report.
ENDDO;

//?USER: Initialize subfile header

EXECUTE FUNCTION(Customer Name DRV) TYPE(DRVFLD)                                AC1631131;
PARAMETER(CTL.Customer_Name_DRV);
PARAMETER(CTL.Ship_To_Customer);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Customer_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// CTL.Order Number = PAR.Order Number
CTL.Order_Number = PAR.Order_Number;

CASE;

// IF PAR.Order Number is Greater then zero
IF PAR.Order_Number > *ZERO;

EXECUTE FUNCTION(Rtv JCO needed flds  RT) TYPE(RTVOBJ) FILE(OPBFCPP)            AC2068085;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Actual_Shipped_Date);
PARAMETER(CTL.Header_Status);
PARAMETER(CTL.Change_Date);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// CTL.Actual Ship Date = CTL.Actual Shipped Date
CTL.Actual_Ship_Date = CTL.Actual_Shipped_Date;

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Actual Shipped Date = PAR.Actual Shipped Date
CTL.Actual_Shipped_Date = PAR.Actual_Shipped_Date;

// CTL.Actual Ship Date = PAR.Actual Ship Date
CTL.Actual_Ship_Date = PAR.Actual_Ship_Date;

ENDIF;

SET CURSOR;

//?USER: Initialize subfile record (existing record)

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// RCD.Change Flag USR = PAR.Change Flag USR
RCD.Change_Flag_USR = PAR.Change_Flag_USR;

//?** Test date range if it is entered
CASE;

// IF CTL.Actual Shipped Date is entered
IF CTL.Actual_Shipped_Date <> *ZERO;

//?** Select only within date range
CASE;

// IF DB1.Actual Shipped Date LT CTL.Actual Shipped Date
IF DB1.Actual_Shipped_Date < CTL.Actual_Shipped_Date;

// OR DB1.Actual Shipped Date GT CTL.Actual Ship Date
OR DB1.Actual_Shipped_Date > CTL.Actual_Ship_Date;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** If Order# passed in, only select matching
CASE;

// IF PAR.Order Number is Greater then zero
IF PAR.Order_Number > *ZERO;

// AND DB1.Order Number NE PAR.Order Number
AND DB1.Order_Number <> PAR.Order_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?** Test Header Status of Shipped,  if invoiced then protect gate prc
CASE;

// IF DB1.Header Status is Confirmed
IF DB1.Header_Status = 'R';

//?** Test Header Status of Shipped,  if invoiced then protect gate prc
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DB1.Header Status is Complete
IF DB1.Header_Status = 'C';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** Only retrieve order type = OR
CASE;

// IF DB1.Header Status is Confirmed
IF DB1.Header_Status = 'R';

//?** Only retrieve order type = OR
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DB1.Order Type - Sales is Regular Order
IF DB1.Order_Type_Sales = 'OR';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** If selected, retrieve order gate price (if it exists)
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(RTV Order Gate Price  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1900008;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.Price_Method_Code);
PARAMETER(RCD.Order_Gate_Final_Price);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Price Method Code = DB1.Price Method Code
 PAR.Price_Method_Code = DB1.Price_Method_Code;

 //?** Gate price is the same for all. Quit after non-zero price found.
 CASE;

 // IF DB1.Order Gate Price is Greater than zero
 IF DB1.Order_Gate_Final_Price > *ZERO;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?** Save for later testing, if a value was retrieved
CASE;

// IF RCD.Order Gate/Final Price is Greater than zero
IF RCD.Order_Gate_Final_Price > *ZERO;

// RCD.Order Gate Price USR = RCD.Order Gate/Final Price
RCD.Order_Gate_Price_USR = RCD.Order_Gate_Final_Price;

// RCD.Display Flag = CND.No
RCD.Display_Flag = 'N';

ENDIF;

EXECUTE FUNCTION(RTV JPN InvDt or InvDt RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC2046799;
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.Invoice_Date);
PARAMETER(LCL.JPN_Invoice_Issuance_Date);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


//?If JPN issuance date is blank default with Invoice date
CASE;

// IF RCD.JPN Invoice Issuance Date is Not Entered
IF RCD.JPN_Invoice_Issuance_Date = *ZERO;

// RCD.JPN Invoice Issuance Date = LCL.Invoice Date
RCD.JPN_Invoice_Issuance_Date = LCL.Invoice_Date;

//?If JPN issuance date is blank default with Invoice date
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.JPN Invoice Issuance Date = LCL.JPN Invoice Issuance Date
RCD.JPN_Invoice_Issuance_Date = LCL.JPN_Invoice_Issuance_Date;

ENDIF;

//?** Save for change processing-if date was changed     E002129
//?** Change to save the screen date                     E002344
// RCD.Change Date = RCD.JPN Invoice Issuance Date
RCD.Change_Date = RCD.JPN_Invoice_Issuance_Date;

// WRK.JPN Invoice Issuance Date = RCD.JPN Invoice Issuance Date
WRK.JPN_Invoice_Issuance_Date = RCD.JPN_Invoice_Issuance_Date;

//?Protect price if method is DVG & invoiced
CASE;

// IF RCD.Header Status is Complete
IF RCD.Header_Status = 'C';

// AND LCL.Price Method Code is Deviated Gate Price
AND ( LCL.Price_Method_Code = 'DVG';

// OR LCL.Price Method Code is Deviated Flat Duty Item
OR LCL.Price_Method_Code = 'DVF' );

// RCD.Output Only 1 USR = CND.yes
RCD.Output_Only_1_USR = 'Y';

//?Protect price if method is DVG & invoiced
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Output Only 1 USR = CND.no
RCD.Output_Only_1_USR = 'N';

ENDIF;

ENDIF;

ENDIF;

//?CALC: Subfile control function fields

//?Save ctl issuance date
CASE;

// IF CTL.JPN Invoice Issuance Date is Entered
IF CTL.JPN_Invoice_Issuance_Date <> *ZERO;

// PAR.JPN Invoice Issuance Date = CTL.JPN Invoice Issuance Date
PAR.JPN_Invoice_Issuance_Date = CTL.JPN_Invoice_Issuance_Date;

// PAR.Status - Y or N = CND.yes
PAR.Status_Y_or_N = 'Y';

ENDIF;

//?Save ctl gate price
CASE;

// IF CTL.Order Gate/Final Price is Greater than zero
IF CTL.Order_Gate_Final_Price > *ZERO;

// PAR.Order Gate/Final Price = CTL.Order Gate/Final Price
PAR.Order_Gate_Final_Price = CTL.Order_Gate_Final_Price;

// PAR.Change Flag USR = CND.Yes
PAR.Change_Flag_USR = 'Y';

ENDIF;

//?USER: Validate subfile control

CASE;

// IF CTL.*CMD key is *Accept Pricing
IF CTL.*CMD_key = '13';

// WRK.Error Flag            USR = CND.Blank
WRK.Error_Flag_USR = *BLANK;

//?Gate Price & Issuance Date must both be entered       E002158
CASE;

// IF CTL.JPN Invoice Issuance Date is Entered
IF ( CTL.JPN_Invoice_Issuance_Date <> *ZERO;

// AND CTL.Order Gate Price is Equal zero
AND CTL.Order_Gate_Final_Price = *ZERO );

// Send error message - 'Price is invalid.  Please enter again.'
ERROR(USR2555);
MSGPARM(CTL.Order_Gate_Final_Price);

// WRK.Error Flag            USR = CND.Yes
WRK.Error_Flag_USR = 'Y';

ENDIF;

//?Gate Price & Issuance Date must both be entered       E002158
CASE;

// IF CTL.JPN Invoice Issuance Date is Not Entered
IF ( CTL.JPN_Invoice_Issuance_Date = *ZERO;

// AND CTL.Order Gate Price is Greater than zero
AND CTL.Order_Gate_Final_Price > *ZERO );

// Send error message - 'Date must be entered.'
ERROR(USR0231);
MSGPARM(CTL.JPN_Invoice_Issuance_Date);

// WRK.Error Flag            USR = CND.Yes
WRK.Error_Flag_USR = 'Y';

ENDIF;

//?Only update subfile if no errors in the selection fields.
CASE;

// IF WRK.Error Flag            USR is Blank
IF WRK.Error_Flag_USR = *BLANK;

CASE;

// IF CTL.JPN Invoice Issuance Date is Entered
IF CTL.JPN_Invoice_Issuance_Date <> *ZERO;

// OR CTL.Order Gate/Final Price is Greater than zero
OR CTL.Order_Gate_Final_Price > *ZERO;

//?pass in order # too...just upd that order if its entered
//?pass in a/r customer as work context
// Call program RTV CHG Ord Gate Price XF.
CALL PROGRAM(RTV CHG Ord Gate Price XF) ('PBD3XFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(WRK.AR_Customer_Number);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(WRK.Customer_Purchase_Order_#);
PARAMETER(CTL.Header_Status);
PARAMETER(CTL.JPN_Invoice_Issuance_Date);
PARAMETER(CTL.Actual_Shipped_Date);
PARAMETER(CTL.Actual_Ship_Date);
PARAMETER(CTL.Order_Gate_Final_Price);
PARAMETER(WRK.Display_Flag);
PARAMETER(CTL.Change_Date);
PARAMETER(WRK.Order_Gate_Price_USR);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?USER: Validate subfile record relations

// PAR.Company Number Pass   USR = RCD.Company Number
PAR.Company_Number_Pass_USR = RCD.Company_Number;

// PAR.Order Number 1  PASS  USR = RCD.Order Number
PAR.Order_Number_1_PASS_USR = RCD.Order_Number;

//?5=dsp ord inq
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

// Call program DSP Order vs. Ship Dtl DF.
CALL PROGRAM(DSP Order vs. Ship Dtl DF) ('PDP7DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Type_Sales);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Ship_To_Name);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER(RCD.Order_Date);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Header_Status);
PARAMETER(RCD.Credit_Hold);
PARAMETER(RCD.Production_Hold);
PARAMETER(RCD.New_Customer_Hold);
PARAMETER(RCD.Sales_Route_Code);
PARAMETER('OMS');

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?6=Print only
CASE;

// IF RCD.*SFLSEL is *Print
IF RCD.*SFLSEL = '6'/'6';

CASE;

// IF RCD.Order Gate/Final Price is Greater than zero
IF RCD.Order_Gate_Final_Price > *ZERO;

// PAR.Email Format = CND.*Print
PAR.Email_Format = 'P';

// PAR.PRT Hold Output Sts = CND.*NO
PAR.PRT_Hold_Output_Sts = *NO;

// PAR.PRT Save Output Sts = CND.*NO
PAR.PRT_Save_Output_Sts = *NO;

// PAR.Email Address = CND.Blank
PAR.Email_Address = *BLANK;

// Call program SBM Prt JCO Plnt Invcs CL.
CALL PROGRAM(SBM Prt JCO Plnt Invcs CL) ('PMYJUPC');
PARAMETER(LCL.Return_Code_Usr);
PARAMETER('OMS');
PARAMETER(PAR.PRT_Description);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Order_Number_1_PASS_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(PAR.Email_Address);
PARAMETER(PAR.Email_Format);
PARAMETER(RCD.Ship_To_Name);
PARAMETER(RCD.Customer_Purchase_Order_#);

// Send information message - 'Report has been printed.'
MESSAGE(USR2100 *INFO);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

ENDIF;

//?8=Email
CASE;

// IF RCD.*SFLSEL is *8
IF RCD.*SFLSEL = '8';

CASE;

// IF RCD.Order Gate/Final Price is Greater than zero
IF RCD.Order_Gate_Final_Price > *ZERO;

CASE;

// IF RCD.Order Gate/Final Price is Greater than zero
IF RCD.Order_Gate_Final_Price > *ZERO;

// PAR.Email Format = CND.*Email
PAR.Email_Format = 'E';

// PAR.PRT Hold Output Sts = CND.*YES
PAR.PRT_Hold_Output_Sts = *YES;

// PAR.PRT Save Output Sts = CND.*YES
PAR.PRT_Save_Output_Sts = *YES;

// Call program SBM Prt JCO Plnt Invcs CL.
CALL PROGRAM(SBM Prt JCO Plnt Invcs CL) ('PMYJUPC');
PARAMETER(LCL.Return_Code_Usr);
PARAMETER('OMS');
PARAMETER(PAR.PRT_Description);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Order_Number_1_PASS_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(PAR.Email_Address);
PARAMETER(PAR.Email_Format);
PARAMETER(RCD.Ship_To_Name);
PARAMETER(RCD.Customer_Purchase_Order_#);

//?** Require an email address                              E00254
CASE;

// IF LCL.Return Code Usr is Email is Blanks
IF LCL.Return_Code_Usr = 'USR3670';

// Send error message - 'Email address cannot be left blank. Enter a valid email address.'
ERROR(USR3670);
MSGPARM(PAR.Email_Address);

//?** Require an email address                              E00254
// IF *OTHERWISE
IF *OTHERWISE;

// Send information message - 'Report has been emailed'
MESSAGE(USR3896 *INFO);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(RTV Chg Ord Gate Price IF) TYPE(EXCINTFUN) FILE(OPBFCPP)       AC1900022;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Header_Status);
PARAMETER(RCD.Order_Gate_Final_Price);
PARAMETER(RCD.Order_Gate_Price_USR);
PARAMETER(RCD.Display_Flag);
PARAMETER(RCD.JPN_Invoice_Issuance_Date);
PARAMETER(RCD.Change_Date);
{
 //?Execute internal function

 //?** Update subfile line items for Japanese Gate Priced Invoices  E002129
 CASE;

 // IF PAR.Order Gate Price NE PAR.Order Gate Price USR
 IF PAR.Order_Gate_Final_Price <> PAR.Order_Gate_Price_USR;

 //?E2494 RMC 4/01/2013 Gate Price - calc weighted price avg and gate adj
 //?If invoiced....
 CASE;

 // IF PAR.Header Status is Complete
 IF PAR.Header_Status = 'C';

 //?no price chg allowed after order is invoiced
 EXECUTE FUNCTION(RTV Order Gate Price  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1900008;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Price_Method_Code);
 PARAMETER(LCL.Order_Gate_Final_Price);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Price Method Code = DB1.Price Method Code
  PAR.Price_Method_Code = DB1.Price_Method_Code;

  //?** Gate price is the same for all. Quit after non-zero price found.
  CASE;

  // IF DB1.Order Gate Price is Greater than zero
  IF DB1.Order_Gate_Final_Price > *ZERO;

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

  ENDIF;

 }

 CASE;

 // IF LCL.Price Method Code is Deviated Flat Duty Item
 IF LCL.Price_Method_Code = 'DVF';

 // OR LCL.Price Method Code is Deviated Gate Price
 OR LCL.Price_Method_Code = 'DVG';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Exc Calc Gat Prc Aj/Av XF.
 CALL PROGRAM(Exc Calc Gat Prc Aj/Av XF) ('PBIGXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Gate_Final_Price);
 PARAMETER(PAR.OD_Gate_Final_Price_Adj);
 PARAMETER(PAR.OD_Weighted_Avg_Price);

 EXECUTE FUNCTION(CHG Order Gate Price   RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1900014;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.OD_Gate_Final_Price_Adj);
 PARAMETER(PAR.OD_Weighted_Avg_Price);
 PARAMETER(PAR.Order_Gate_Final_Price);
 PARAMETER(PAR.Display_Flag);
 {
  //?USER: Initialize routine

  // PAR.Display Flag = CND.No
  PAR.Display_Flag = 'N';

  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Not cancelled
  IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

  //?E2494 RMC 4.1.13 upd gate price adj and weight avg price
  EXECUTE FUNCTION(CHG Order Gate Price   CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1900015;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Order_Gate_Final_Price);
  PARAMETER(PAR.OD_Gate_Final_Price_Adj);
  PARAMETER(PAR.OD_Weighted_Avg_Price);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PAR.Display Flag = CND.Yes
  PAR.Display_Flag = 'Y';

  ENDIF;

 }

 EXECUTE FUNCTION(CHG JPN Issue Date     CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC2045942;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.JPN_Invoice_Issuance_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program TRG Order Hdr CHG Trig XT.
  CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Ship_To_Name);
  PARAMETER(DB1.Ship_To_Address_Line_1);
  PARAMETER(DB1.Ship_To_Address_Line_2);
  PARAMETER(DB1.Ship_To_Address_Line_3);
  PARAMETER(DB1.Ship_To_City);
  PARAMETER(DB1.Ship_To_State_Code);
  PARAMETER(DB1.Ship_To_Zip_Postal_Code);
  PARAMETER(DB1.Bill_to_Customer);
  PARAMETER(DB1.Bill_to_Name);
  PARAMETER(DB1.Bill_to_Address_Line_1);
  PARAMETER(DB1.Bill_to_Address_Line_2);
  PARAMETER(DB1.Bill_to_Address_Line_3);
  PARAMETER(DB1.Bill_to_City);
  PARAMETER(DB1.Bill_to_State_Code);
  PARAMETER(DB1.Bill_to_Zip_Postal_Code);
  PARAMETER(DB1.Customer_Purchase_Order_#);
  PARAMETER(DB1.Order_Date);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Cancel_Date);
  PARAMETER(DB1.Terms_Code);
  PARAMETER(DB1.Special_Instructions);
  PARAMETER(DB1.Special_Instructions_2);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Comment_Print_Acknowledge);
  PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
  PARAMETER(DB1.Comment_Print_Pick_Slip);
  PARAMETER(DB1.Comment_Print_Ship_Doc);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Order_in_Use);
  PARAMETER(DB1.Header_Status);
  PARAMETER(DB1.Header_Status_Last);
  PARAMETER(DB1.Order_Type_Print_Status);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.User_Original_Entry);
  PARAMETER(DB1.Date_of_Original_Entry);
  PARAMETER(DB1.Order_Value_Total);
  PARAMETER(DB1.Order_Weight_Total);
  PARAMETER(DB1.Credit_Hold);
  PARAMETER(DB1.Production_Hold);
  PARAMETER(DB1.New_Customer_Hold);
  PARAMETER(DB1.Requested_Delivery_Date);
  PARAMETER(DB1.Requested_Delivery_Time);
  PARAMETER(DB1.Accounts_Receiv_Ent_1);
  PARAMETER(DB1.Accounts_Receiv_Ent_2);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.LTL_Flag);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Shipping_Method);
  PARAMETER(DB1.Export_Status);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Shrink_Wrap);
  PARAMETER(DB1.Slip_Sheet);
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Reefer_Temperature);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Attach_to_Invoice_Number);
  PARAMETER(DB1.Load_Plan_Order);
  PARAMETER(DB1.Print_Pick_Slip);
  PARAMETER(DB1.Resell_Reference_Number);
  PARAMETER(DB1.Special_Comment_1);
  PARAMETER(DB1.Special_Comment_2);
  PARAMETER(DB1.Affect_Auto_Accruals);
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(DB1.Manager_Level_Code);
  PARAMETER(DB1.VP_Level_Code);
  PARAMETER(DB1.Attach_to_Order_Number);
  PARAMETER(DB1.Reason_for_Price_Audit);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Invoice_Date);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Trans_Contol_AS400_Plant);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.A_R_order_Value_Total);
  PARAMETER(DB1.Billing_Activity_Type);
  PARAMETER(DB1.Block_Order_Flag);
  PARAMETER(DB1.Order_Certification_Flag);
  PARAMETER(DB1.Invoice_Order_Value_Tot);
  PARAMETER(DB1.Process_Sts_for_3C);
  PARAMETER(DB1.Order_Conf_Fax_Sts);
  PARAMETER(DB1.Manifest_Fax_Sts);
  PARAMETER(DB1.Invoice_Fax_Sts);
  PARAMETER(DB1.Transfer_in_Storage_Ind);
  PARAMETER(DB1.Email_Cust_On_Order_Ship);
  PARAMETER(DB1.Order_Emailed);
  PARAMETER(DB1.Export_Docs_Go_w_Driver);
  PARAMETER(DB1.Shipping_Temp_Code_C_F);
  PARAMETER(DB1.Broker_Order_Status);
  PARAMETER(DB1.Air_Freight_Order);
  PARAMETER(DB1.Order_Requires_Review);
  PARAMETER(DB1.OH_Load_Plan_Ready);
  PARAMETER(DB1.Export_USDA_Approved);
  PARAMETER(DB1.HPB_Ship_to_Warehouse);
  PARAMETER(DB1.OH_TF_Exempt_Code);
  PARAMETER(DB1.OH_Appt_Confirmation_Dt);
  PARAMETER(DB1.JPN_Invoice_Issuance_Date);
  PARAMETER(DB1.Load_Actual_Shipped_Date);
  PARAMETER(DB1.Load_BOL_Complete_Date);
  PARAMETER(DB1.Load_Truck_Departure_Date);
  PARAMETER(DB1.Maximum_Gross_Weight);
  PARAMETER(DB1.Time_of_Original_Entry);
  PARAMETER(DB1.OH_Appt_Confirmation_Tm);
  PARAMETER(DB1.Load_BOL_Complete_Time);
  PARAMETER(DB1.Load_Truck_Departure_Time);
  PARAMETER(DB1.Act_Frt_Reference_Amount);
  PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
  PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
  PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
  PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);

 }

 ENDIF;

 //?If invoiced....
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Exc Calc Gat Prc Aj/Av XF.
 CALL PROGRAM(Exc Calc Gat Prc Aj/Av XF) ('PBIGXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Gate_Final_Price);
 PARAMETER(PAR.OD_Gate_Final_Price_Adj);
 PARAMETER(PAR.OD_Weighted_Avg_Price);

 EXECUTE FUNCTION(CHG Order Gate Price   RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1900014;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.OD_Gate_Final_Price_Adj);
 PARAMETER(PAR.OD_Weighted_Avg_Price);
 PARAMETER(PAR.Order_Gate_Final_Price);
 PARAMETER(PAR.Display_Flag);
 {
  //?USER: Initialize routine

  // PAR.Display Flag = CND.No
  PAR.Display_Flag = 'N';

  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Not cancelled
  IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

  //?E2494 RMC 4.1.13 upd gate price adj and weight avg price
  EXECUTE FUNCTION(CHG Order Gate Price   CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1900015;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Order_Gate_Final_Price);
  PARAMETER(PAR.OD_Gate_Final_Price_Adj);
  PARAMETER(PAR.OD_Weighted_Avg_Price);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PAR.Display Flag = CND.Yes
  PAR.Display_Flag = 'Y';

  ENDIF;

 }

 //?E2494 RMC 4/01/2013 Calc Gate Price from previous calcd adjustment
 // Call program CLC Price/Price Audit  XF.
 CALL PROGRAM(CLC Price/Price Audit  XF) ('PDPRXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('PM');
 PARAMETER(LCL.Order_Value_Total);
 PARAMETER(LCL.Order_Weight_Total);
 PARAMETER(LCL.Production_Hold);
 PARAMETER(LCL.USR_New_Order);

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.JPN Invoice Issuance Date NE PAR.Change Date
 IF PAR.JPN_Invoice_Issuance_Date <> PAR.Change_Date;

 CASE;

 // IF PAR.JPN Invoice Issuance Date is Entered
 IF PAR.JPN_Invoice_Issuance_Date <> *ZERO;

 EXECUTE FUNCTION(CHG JPN Issue Date     CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC2045942;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.JPN_Invoice_Issuance_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program TRG Order Hdr CHG Trig XT.
  CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Ship_To_Name);
  PARAMETER(DB1.Ship_To_Address_Line_1);
  PARAMETER(DB1.Ship_To_Address_Line_2);
  PARAMETER(DB1.Ship_To_Address_Line_3);
  PARAMETER(DB1.Ship_To_City);
  PARAMETER(DB1.Ship_To_State_Code);
  PARAMETER(DB1.Ship_To_Zip_Postal_Code);
  PARAMETER(DB1.Bill_to_Customer);
  PARAMETER(DB1.Bill_to_Name);
  PARAMETER(DB1.Bill_to_Address_Line_1);
  PARAMETER(DB1.Bill_to_Address_Line_2);
  PARAMETER(DB1.Bill_to_Address_Line_3);
  PARAMETER(DB1.Bill_to_City);
  PARAMETER(DB1.Bill_to_State_Code);
  PARAMETER(DB1.Bill_to_Zip_Postal_Code);
  PARAMETER(DB1.Customer_Purchase_Order_#);
  PARAMETER(DB1.Order_Date);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Cancel_Date);
  PARAMETER(DB1.Terms_Code);
  PARAMETER(DB1.Special_Instructions);
  PARAMETER(DB1.Special_Instructions_2);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Comment_Print_Acknowledge);
  PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
  PARAMETER(DB1.Comment_Print_Pick_Slip);
  PARAMETER(DB1.Comment_Print_Ship_Doc);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Order_in_Use);
  PARAMETER(DB1.Header_Status);
  PARAMETER(DB1.Header_Status_Last);
  PARAMETER(DB1.Order_Type_Print_Status);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.User_Original_Entry);
  PARAMETER(DB1.Date_of_Original_Entry);
  PARAMETER(DB1.Order_Value_Total);
  PARAMETER(DB1.Order_Weight_Total);
  PARAMETER(DB1.Credit_Hold);
  PARAMETER(DB1.Production_Hold);
  PARAMETER(DB1.New_Customer_Hold);
  PARAMETER(DB1.Requested_Delivery_Date);
  PARAMETER(DB1.Requested_Delivery_Time);
  PARAMETER(DB1.Accounts_Receiv_Ent_1);
  PARAMETER(DB1.Accounts_Receiv_Ent_2);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.LTL_Flag);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Shipping_Method);
  PARAMETER(DB1.Export_Status);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Shrink_Wrap);
  PARAMETER(DB1.Slip_Sheet);
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Reefer_Temperature);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Attach_to_Invoice_Number);
  PARAMETER(DB1.Load_Plan_Order);
  PARAMETER(DB1.Print_Pick_Slip);
  PARAMETER(DB1.Resell_Reference_Number);
  PARAMETER(DB1.Special_Comment_1);
  PARAMETER(DB1.Special_Comment_2);
  PARAMETER(DB1.Affect_Auto_Accruals);
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(DB1.Manager_Level_Code);
  PARAMETER(DB1.VP_Level_Code);
  PARAMETER(DB1.Attach_to_Order_Number);
  PARAMETER(DB1.Reason_for_Price_Audit);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Invoice_Date);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Trans_Contol_AS400_Plant);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.A_R_order_Value_Total);
  PARAMETER(DB1.Billing_Activity_Type);
  PARAMETER(DB1.Block_Order_Flag);
  PARAMETER(DB1.Order_Certification_Flag);
  PARAMETER(DB1.Invoice_Order_Value_Tot);
  PARAMETER(DB1.Process_Sts_for_3C);
  PARAMETER(DB1.Order_Conf_Fax_Sts);
  PARAMETER(DB1.Manifest_Fax_Sts);
  PARAMETER(DB1.Invoice_Fax_Sts);
  PARAMETER(DB1.Transfer_in_Storage_Ind);
  PARAMETER(DB1.Email_Cust_On_Order_Ship);
  PARAMETER(DB1.Order_Emailed);
  PARAMETER(DB1.Export_Docs_Go_w_Driver);
  PARAMETER(DB1.Shipping_Temp_Code_C_F);
  PARAMETER(DB1.Broker_Order_Status);
  PARAMETER(DB1.Air_Freight_Order);
  PARAMETER(DB1.Order_Requires_Review);
  PARAMETER(DB1.OH_Load_Plan_Ready);
  PARAMETER(DB1.Export_USDA_Approved);
  PARAMETER(DB1.HPB_Ship_to_Warehouse);
  PARAMETER(DB1.OH_TF_Exempt_Code);
  PARAMETER(DB1.OH_Appt_Confirmation_Dt);
  PARAMETER(DB1.JPN_Invoice_Issuance_Date);
  PARAMETER(DB1.Load_Actual_Shipped_Date);
  PARAMETER(DB1.Load_BOL_Complete_Date);
  PARAMETER(DB1.Load_Truck_Departure_Date);
  PARAMETER(DB1.Maximum_Gross_Weight);
  PARAMETER(DB1.Time_of_Original_Entry);
  PARAMETER(DB1.OH_Appt_Confirmation_Tm);
  PARAMETER(DB1.Load_BOL_Complete_Time);
  PARAMETER(DB1.Load_Truck_Departure_Time);
  PARAMETER(DB1.Act_Frt_Reference_Amount);
  PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
  PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
  PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
  PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);

 }

 ENDIF;

 ENDIF;

}


//?USER: Exit program processing

RETURN;

