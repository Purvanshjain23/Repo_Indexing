// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKLHXFR
// ?Date: 14.08.2025 Time: 02:49:52
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modifications and Comments
DO;

//?H16853 ISE 11/02/20 - Increased the Buy Order Number field
//?  length from 5 to 7.
ENDDO;

//?Load all validation errors for min/max
EXECUTE FUNCTION(Rtv Validation Rules  RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126427;
PARAMETER(WRK.Carcass_Dbw_Min);
PARAMETER(WRK.Carcass_Dbw_Max);
PARAMETER(WRK.Carcass_Lgt_Min);
PARAMETER(WRK.Carcass_Lgt_Max);
PARAMETER(WRK.Lean_High_Min);
PARAMETER(WRK.Lean_High_Max);
PARAMETER(WRK.Lean_Low_Min);
PARAMETER(WRK.Lean_Low_Max);
PARAMETER(WRK.High_Yield_Min);
PARAMETER(WRK.High_Yield_Max);
PARAMETER(WRK.Low_Yield_Min);
PARAMETER(WRK.Low_Yield_Max);
PARAMETER(WRK.Head_Percent_Min);
PARAMETER(WRK.Head_Percent_Max);
PARAMETER(WRK.Head_Percent_Min);
PARAMETER(WRK.Head_Percent_Max);
PARAMETER(WRK.BackFat_High_Min);
PARAMETER(WRK.BackFat_High_Max);
PARAMETER(WRK.BackFat_Low_Min);
PARAMETER(WRK.Backfat_Low_Max);
PARAMETER(WRK.LoinEye_High_Min);
PARAMETER(WRK.LoinEye_High_Max);
PARAMETER(WRK.LoinEye_Low_Min);
PARAMETER(WRK.LoinEye_Low_Max);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.EV Validation Code is Carcass has Double Weight
 IF DB1.EV_Validation_Code = 'CDB';

 //?Carcass double weight
 // PAR.Carcass Dbw Min = DB1.EV Minimum
 PAR.Carcass_Dbw_Min = DB1.EV_Minimum;

 // PAR.Carcass Dbw Max = DB1.EV Maximum
 PAR.Carcass_Dbw_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Carcass is Light Weight
 IF DB1.EV_Validation_Code = 'CLT';

 //?Carcass light weight
 // PAR.Carcass Lgt Min = DB1.EV Minimum
 PAR.Carcass_Lgt_Min = DB1.EV_Minimum;

 // PAR.Carcass Lgt Max = DB1.EV Maximum
 PAR.Carcass_Lgt_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Backfat is high
 IF DB1.EV_Validation_Code = 'BHI';

 //?backfat is high
 // PAR.BackFat High Min = DB1.EV Minimum
 PAR.BackFat_High_Min = DB1.EV_Minimum;

 // PAR.BackFat High Max = DB1.EV Maximum
 PAR.BackFat_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Backfat is Low
 IF DB1.EV_Validation_Code = 'BLW';

 //?Backfat is low
 // PAR.BackFat Low Min = DB1.EV Minimum
 PAR.BackFat_Low_Min = DB1.EV_Minimum;

 // PAR.Backfat Low Max = DB1.EV Maximum
 PAR.Backfat_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Loineye is High
 IF DB1.EV_Validation_Code = 'LHI';

 //?loineye is high
 // PAR.LoinEye High Min = DB1.EV Minimum
 PAR.LoinEye_High_Min = DB1.EV_Minimum;

 // PAR.LoinEye High Max = DB1.EV Maximum
 PAR.LoinEye_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Loineye is Low
 IF DB1.EV_Validation_Code = 'LLW';

 //?loineye is low
 // PAR.LoinEye Low Min = DB1.EV Minimum
 PAR.LoinEye_Low_Min = DB1.EV_Minimum;

 // PAR.LoinEye Low Max = DB1.EV Maximum
 PAR.LoinEye_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Percent Lean is high
 IF DB1.EV_Validation_Code = 'PLH';

 //?% Lean High
 // PAR.%Lean High Min = DB1.EV Minimum
 PAR.Lean_High_Min = DB1.EV_Minimum;

 // PAR.%Lean High Max = DB1.EV Maximum
 PAR.Lean_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Percent Lean is Low
 IF DB1.EV_Validation_Code = 'PLL';

 //?% Lean Low
 // PAR.%Lean Low Min = DB1.EV Minimum
 PAR.Lean_Low_Min = DB1.EV_Minimum;

 // PAR.%Lean Low Max = DB1.EV Maximum
 PAR.Lean_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is #Head is < % Allowed
 IF DB1.EV_Validation_Code = 'HLP';

 //?Head < Percent
 // PAR.Head < Percent Min = DB1.EV Minimum
 PAR.Head_Percent_Min = DB1.EV_Minimum;

 // PAR.Head < Percent Max = DB1.EV Maximum
 PAR.Head_Percent_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is #Head is > % Allowed
 IF DB1.EV_Validation_Code = 'HHP';

 //?Head > Percent
 // PAR.Head > Percent Min = DB1.EV Minimum
 PAR.Head_Percent_Min = DB1.EV_Minimum;

 // PAR.Head > Percent Max = DB1.EV Maximum
 PAR.Head_Percent_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Yield Amount is High
 IF DB1.EV_Validation_Code = 'YHI';

 //?Yield High
 // PAR.High Yield Min = DB1.EV Minimum
 PAR.High_Yield_Min = DB1.EV_Minimum;

 // PAR.High Yield Max = DB1.EV Maximum
 PAR.High_Yield_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Yield Amount is Low
 IF DB1.EV_Validation_Code = 'YLW';

 //?Yield Low
 // PAR.Low Yield Min = DB1.EV Minimum
 PAR.Low_Yield_Min = DB1.EV_Minimum;

 // PAR.Low Yield Max = DB1.EV Maximum
 PAR.Low_Yield_Max = DB1.EV_Maximum;

 ENDIF;

}


//?Read the Tatto file either all/ or 1 record
CASE;

// IF PAR.TH Tattoo Number is Zero
IF PAR.TH_Tattoo_Number = *ZERO;

//?New 1/18/05 delete held overs that were undone
// Call program Zzz Held Over Undo    XF.
CALL PROGRAM(Zzz Held Over Undo    XF) ('PLFGXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.Current_Kill_Date);

//?Batch balancing, upl will have shift but payment edit
//?      will process all shifts
//?Accumulate Totals Validate all Tatto's Carcass
EXECUTE FUNCTION(Chg Fls/Bal ALL Tatto RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1125399;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.Current_Kill_Date);
PARAMETER(PAR.TH_Schedule_Kill_Shift);
PARAMETER(WRK.Carcass_Dbw_Min);
PARAMETER(WRK.Carcass_Dbw_Max);
PARAMETER(WRK.Carcass_Lgt_Min);
PARAMETER(WRK.Carcass_Lgt_Max);
PARAMETER(WRK.Lean_High_Min);
PARAMETER(WRK.Lean_High_Max);
PARAMETER(WRK.Lean_Low_Min);
PARAMETER(WRK.Lean_Low_Max);
PARAMETER(WRK.High_Yield_Min);
PARAMETER(WRK.High_Yield_Max);
PARAMETER(WRK.Low_Yield_Min);
PARAMETER(WRK.Low_Yield_Max);
PARAMETER(WRK.Head_Percent_Min);
PARAMETER(WRK.Head_Percent_Max);
PARAMETER(WRK.Head_Percent_Min);
PARAMETER(WRK.Head_Percent_Max);
PARAMETER(WRK.BackFat_High_Min);
PARAMETER(WRK.BackFat_High_Max);
PARAMETER(WRK.BackFat_Low_Min);
PARAMETER(WRK.Backfat_Low_Max);
PARAMETER(WRK.LoinEye_High_Min);
PARAMETER(WRK.LoinEye_High_Max);
PARAMETER(WRK.LoinEye_Low_Min);
PARAMETER(WRK.LoinEye_Low_Max);
PARAMETER(PAR.Requested_by_User_to_Bal);
{
 //?USER: Process Data record

 CASE;

 // IF PAR.TH Schedule Kill Shift NE WRK.Blank Usr 1 fld Usr
 IF PAR.TH_Schedule_Kill_Shift <> WRK.Blank_Usr_1_fld_Usr;

 CASE;

 // IF PAR.TH Schedule Kill Shift EQ DB1.TH Schedule Kill Shift
 IF PAR.TH_Schedule_Kill_Shift = DB1.TH_Schedule_Kill_Shift;

 //?Pass in what shift to process
 //?subject or market hogs process
 CASE;

 // IF DB1.TH Hog Class Type is Market
 IF DB1.TH_Hog_Class_Type = 'M';

 // OR DB1.TH Hog Class Type is Subject
 OR DB1.TH_Hog_Class_Type = 'S';

 //?If receiving or slaughter processing code
 CASE;

 // IF DB1.THP Process Code is Receiving
 IF DB1.THP_Process_Code = 'RECV';

 // OR DB1.THP Process Code is Slaughter
 OR DB1.THP_Process_Code = 'SLG';

 // Call program Val Kill Transaction  XF.
 CALL PROGRAM(Val Kill Transaction  XF) ('PKHJXFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TH_Purchase_Date);
 PARAMETER(DB1.TH_Group_Reference);
 PARAMETER(DB1.TH_Live_Purchase_UOM);
 PARAMETER(DB1.TH_Live_Purchase_Price);
 PARAMETER(DB1.TH_Live_Gross_Amt);
 PARAMETER(DB1.TH_LIve_Net_Amt);
 PARAMETER(DB1.TH_Resale_UOM);
 PARAMETER(DB1.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(DB1.TH_Pricing_Date);
 PARAMETER(DB1.TH_Resale_Spread_Sts);
 PARAMETER(DB1.TH_Dead_On_Arrival);
 PARAMETER(DB1.TH_Head_Received);
 PARAMETER(DB1.TH_Yard_Deads);
 PARAMETER(DB1.TH_Held_Over);
 PARAMETER(DB1.TH_Head_Condemned);
 PARAMETER(DB1.TH_Head_Killed);
 PARAMETER(DB1.TH_Head_Adds);
 PARAMETER(DB1.TH_Head_Accepted);
 PARAMETER(DB1.TH_Live_Wgt);
 PARAMETER(DB1.TH_Adj_Live_Wgt);
 PARAMETER(DB1.TH_Hot_Wgt);
 PARAMETER(DB1.TH_Tot_Loin_Eye_Depth);
 PARAMETER(DB1.TH_Tot_Backfat_Inches);
 PARAMETER(DB1.TH_Tot_Light_Reflectance);
 PARAMETER(DB1.TH_Avg_Live_Wgt);
 PARAMETER(DB1.TH_Avg_Hot_Wgt);
 PARAMETER(DB1.TH_Avg_Light_Reflectance);
 PARAMETER(DB1.TH_Avg_Lean_Percent);
 PARAMETER(DB1.TH_Avg_Loin_Eye_Depth);
 PARAMETER(DB1.TH_Avg_Backfat);
 PARAMETER(DB1.TH_Std_Yield_Percent);
 PARAMETER(DB1.TH_Actual_Yield);
 PARAMETER(DB1.TH_Adj_Actual_Yield);
 PARAMETER(DB1.TH_Yield_Difference);
 PARAMETER(DB1.TH_Recalc_Live_Wgt);
 PARAMETER(DB1.TH_CM_Market_Price);
 PARAMETER(DB1.TH_CM_Base_Mkt_Price);
 PARAMETER(DB1.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(DB1.TH_CM_Sort_Discount_Amt);
 PARAMETER(DB1.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(DB1.TH_CM_Base_Carcass_Value);
 PARAMETER(DB1.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(DB1.TH_CM_Carcass_Gross_Amt);
 PARAMETER(DB1.TH_Deduction_Amt);
 PARAMETER(DB1.TH_Total_Net_WO_Adds);
 PARAMETER(DB1.TH_Carcass_Net_Amt);
 PARAMETER(DB1.TH_Additions_Amt);
 PARAMETER(DB1.TH_Payment_Gross);
 PARAMETER(DB1.Th_Payment_Net_Amt);
 PARAMETER(DB1.TH_AP_Voucher_Document#);
 PARAMETER(DB1.TH_Freight_Amount);
 PARAMETER(DB1.TH_Accrual_Amount);
 PARAMETER(DB1.TH_Fixed_Cost_Amount);
 PARAMETER(DB1.TH_Calc_Net_Sts);
 PARAMETER(DB1.TH_Payment_Sts);
 PARAMETER(WRK.TH_Header_Error_Sts);
 PARAMETER(WRK.TH_Detail_Error_Sts);
 PARAMETER(WRK.TH_Kill_Balancing_Sts);
 PARAMETER(WRK.TH_Bal_to_Kill_Gen);
 PARAMETER(DB1.TH_Commission_A_P_Voucher);
 PARAMETER(DB1.TH_Voucher_Payment_Date);
 PARAMETER(DB1.TH_User_Error_Override);
 PARAMETER(DB1.TH_Held_Over_Record);
 PARAMETER(DB1.TH_Sex);
 PARAMETER(DB1.TH_Held_Ovr_Completed_Dte);
 PARAMETER(DB1.TH_Commission_Paid_Date);
 PARAMETER(DB1.TH_Actual_Check_Date);
 PARAMETER(DB1.TH_Shipped_Weight);
 PARAMETER(DB1.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(DB1.TH_FFLI);
 PARAMETER(DB1.TH_Kill_Product_Value);
 PARAMETER(DB1.TH_Cut_Product_Value);
 PARAMETER(DB1.TH_Render_Product_Value);
 PARAMETER(DB1.TH_Head_Excluded);
 PARAMETER(DB1.TH_CM_Bse_Mkt_Live_CWT);
 PARAMETER(DB1.TH_CM_Bse_Mkt_Carc_CWT);
 PARAMETER(DB1.TH_CM_Srt_Dsc_Live_CWT);
 PARAMETER(DB1.TH_CM_Srt_Dsc_Carc_CWT);
 PARAMETER(DB1.TH_CM_Yld_G_L_Live_CWT);
 PARAMETER(DB1.TH_CM_Yld_G_L_Carc_CWT);
 PARAMETER(DB1.TH_CM_Crc_Val_Live_CWT);
 PARAMETER(DB1.TH_CM_Crc_Val_Carc_CWT);
 PARAMETER(DB1.TH_CM_Lean_Prem_Live_CWT);
 PARAMETER(DB1.TH_CM_Lean_Prem_Carc_CWT);
 PARAMETER(DB1.TH_CM_Gross_Live_CWT);
 PARAMETER(DB1.TH_CM_Gross_Carc_CWT);
 PARAMETER(DB1.TH_Source_Type);
 PARAMETER(DB1.TH_Scale_Ticket_Sts);
 PARAMETER(DB1.TH_Payment_Type);
 PARAMETER(DB1.TH_HPS_Movement_Ref_#);
 PARAMETER(DB1.TH_Source_Code);
 PARAMETER(DB1.TH_Hog_Class_Type);
 PARAMETER(DB1.TH_Posted_to_HPS_Flag);
 PARAMETER(DB1.TH_Schedule_Kill_Shift);
 PARAMETER(DB1.TH_Shift_Held_Over);
 PARAMETER(DB1.DF_Defect_Code);
 PARAMETER(DB1.THP_Process_Code);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.HB_Buyer_Code);
 PARAMETER(DB1.GN_Genetic_Code);
 PARAMETER(DB1.HC_Class_Code);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 PARAMETER(PAR.Carcass_Dbw_Min);
 PARAMETER(PAR.Carcass_Dbw_Max);
 PARAMETER(PAR.Carcass_Lgt_Min);
 PARAMETER(PAR.Carcass_Lgt_Max);
 PARAMETER(PAR.Lean_High_Min);
 PARAMETER(PAR.Lean_High_Max);
 PARAMETER(PAR.Lean_Low_Min);
 PARAMETER(PAR.Lean_Low_Max);
 PARAMETER(PAR.High_Yield_Min);
 PARAMETER(PAR.High_Yield_Max);
 PARAMETER(PAR.Low_Yield_Min);
 PARAMETER(PAR.Low_Yield_Max);
 PARAMETER(PAR.Head_Percent_Min);
 PARAMETER(PAR.Head_Percent_Max);
 PARAMETER(PAR.Head_Percent_Min);
 PARAMETER(PAR.Head_Percent_Max);
 PARAMETER(PAR.BackFat_High_Min);
 PARAMETER(PAR.BackFat_High_Max);
 PARAMETER(PAR.BackFat_Low_Min);
 PARAMETER(PAR.Backfat_Low_Max);
 PARAMETER(PAR.LoinEye_High_Min);
 PARAMETER(PAR.LoinEye_High_Max);
 PARAMETER(PAR.LoinEye_Low_Min);
 PARAMETER(PAR.LoinEye_Low_Max);
 PARAMETER(PAR.Requested_by_User_to_Bal);

 //?If system says to balance tattoo then create records
 CASE;

 // IF WRK.TH Kill Balancing Sts is Balance
 IF WRK.TH_Kill_Balancing_Sts = 'B';

 CASE;

 // IF WRK.TH Bal to Kill Gen is System Generated
 IF WRK.TH_Bal_to_Kill_Gen = 'G';

 // Call program Crt Add Rec By Tatto  XF.
 CALL PROGRAM(Crt Add Rec By Tatto  XF) ('PKLQXFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);

 // Call program Val Kill Transaction  XF.
 CALL PROGRAM(Val Kill Transaction  XF) ('PKHJXFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TH_Purchase_Date);
 PARAMETER(DB1.TH_Group_Reference);
 PARAMETER(DB1.TH_Live_Purchase_UOM);
 PARAMETER(DB1.TH_Live_Purchase_Price);
 PARAMETER(DB1.TH_Live_Gross_Amt);
 PARAMETER(DB1.TH_LIve_Net_Amt);
 PARAMETER(DB1.TH_Resale_UOM);
 PARAMETER(DB1.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(DB1.TH_Pricing_Date);
 PARAMETER(DB1.TH_Resale_Spread_Sts);
 PARAMETER(DB1.TH_Dead_On_Arrival);
 PARAMETER(DB1.TH_Head_Received);
 PARAMETER(DB1.TH_Yard_Deads);
 PARAMETER(DB1.TH_Held_Over);
 PARAMETER(DB1.TH_Head_Condemned);
 PARAMETER(DB1.TH_Head_Killed);
 PARAMETER(DB1.TH_Head_Adds);
 PARAMETER(DB1.TH_Head_Accepted);
 PARAMETER(DB1.TH_Live_Wgt);
 PARAMETER(DB1.TH_Adj_Live_Wgt);
 PARAMETER(DB1.TH_Hot_Wgt);
 PARAMETER(DB1.TH_Tot_Loin_Eye_Depth);
 PARAMETER(DB1.TH_Tot_Backfat_Inches);
 PARAMETER(DB1.TH_Tot_Light_Reflectance);
 PARAMETER(DB1.TH_Avg_Live_Wgt);
 PARAMETER(DB1.TH_Avg_Hot_Wgt);
 PARAMETER(DB1.TH_Avg_Light_Reflectance);
 PARAMETER(DB1.TH_Avg_Lean_Percent);
 PARAMETER(DB1.TH_Avg_Loin_Eye_Depth);
 PARAMETER(DB1.TH_Avg_Backfat);
 PARAMETER(DB1.TH_Std_Yield_Percent);
 PARAMETER(DB1.TH_Actual_Yield);
 PARAMETER(DB1.TH_Adj_Actual_Yield);
 PARAMETER(DB1.TH_Yield_Difference);
 PARAMETER(DB1.TH_Recalc_Live_Wgt);
 PARAMETER(DB1.TH_CM_Market_Price);
 PARAMETER(DB1.TH_CM_Base_Mkt_Price);
 PARAMETER(DB1.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(DB1.TH_CM_Sort_Discount_Amt);
 PARAMETER(DB1.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(DB1.TH_CM_Base_Carcass_Value);
 PARAMETER(DB1.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(DB1.TH_CM_Carcass_Gross_Amt);
 PARAMETER(DB1.TH_Deduction_Amt);
 PARAMETER(DB1.TH_Total_Net_WO_Adds);
 PARAMETER(DB1.TH_Carcass_Net_Amt);
 PARAMETER(DB1.TH_Additions_Amt);
 PARAMETER(DB1.TH_Payment_Gross);
 PARAMETER(DB1.Th_Payment_Net_Amt);
 PARAMETER(DB1.TH_AP_Voucher_Document#);
 PARAMETER(DB1.TH_Freight_Amount);
 PARAMETER(DB1.TH_Accrual_Amount);
 PARAMETER(DB1.TH_Fixed_Cost_Amount);
 PARAMETER(DB1.TH_Calc_Net_Sts);
 PARAMETER(DB1.TH_Payment_Sts);
 PARAMETER(WRK.TH_Header_Error_Sts);
 PARAMETER(WRK.TH_Detail_Error_Sts);
 PARAMETER(WRK.TH_Kill_Balancing_Sts);
 PARAMETER(WRK.TH_Bal_to_Kill_Gen);
 PARAMETER(DB1.TH_Commission_A_P_Voucher);
 PARAMETER(DB1.TH_Voucher_Payment_Date);
 PARAMETER(DB1.TH_User_Error_Override);
 PARAMETER(DB1.TH_Held_Over_Record);
 PARAMETER(DB1.TH_Sex);
 PARAMETER(DB1.TH_Held_Ovr_Completed_Dte);
 PARAMETER(DB1.TH_Commission_Paid_Date);
 PARAMETER(DB1.TH_Actual_Check_Date);
 PARAMETER(DB1.TH_Shipped_Weight);
 PARAMETER(DB1.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(DB1.TH_FFLI);
 PARAMETER(DB1.TH_Kill_Product_Value);
 PARAMETER(DB1.TH_Cut_Product_Value);
 PARAMETER(DB1.TH_Render_Product_Value);
 PARAMETER(DB1.TH_Head_Excluded);
 PARAMETER(DB1.TH_CM_Bse_Mkt_Live_CWT);
 PARAMETER(DB1.TH_CM_Bse_Mkt_Carc_CWT);
 PARAMETER(DB1.TH_CM_Srt_Dsc_Live_CWT);
 PARAMETER(DB1.TH_CM_Srt_Dsc_Carc_CWT);
 PARAMETER(DB1.TH_CM_Yld_G_L_Live_CWT);
 PARAMETER(DB1.TH_CM_Yld_G_L_Carc_CWT);
 PARAMETER(DB1.TH_CM_Crc_Val_Live_CWT);
 PARAMETER(DB1.TH_CM_Crc_Val_Carc_CWT);
 PARAMETER(DB1.TH_CM_Lean_Prem_Live_CWT);
 PARAMETER(DB1.TH_CM_Lean_Prem_Carc_CWT);
 PARAMETER(DB1.TH_CM_Gross_Live_CWT);
 PARAMETER(DB1.TH_CM_Gross_Carc_CWT);
 PARAMETER(DB1.TH_Source_Type);
 PARAMETER(DB1.TH_Scale_Ticket_Sts);
 PARAMETER(DB1.TH_Payment_Type);
 PARAMETER(DB1.TH_HPS_Movement_Ref_#);
 PARAMETER(DB1.TH_Source_Code);
 PARAMETER(DB1.TH_Hog_Class_Type);
 PARAMETER(DB1.TH_Posted_to_HPS_Flag);
 PARAMETER(DB1.TH_Schedule_Kill_Shift);
 PARAMETER(DB1.TH_Shift_Held_Over);
 PARAMETER(DB1.DF_Defect_Code);
 PARAMETER(DB1.THP_Process_Code);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.HB_Buyer_Code);
 PARAMETER(DB1.GN_Genetic_Code);
 PARAMETER(DB1.HC_Class_Code);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 PARAMETER(PAR.Carcass_Dbw_Min);
 PARAMETER(PAR.Carcass_Dbw_Max);
 PARAMETER(PAR.Carcass_Lgt_Min);
 PARAMETER(PAR.Carcass_Lgt_Max);
 PARAMETER(PAR.Lean_High_Min);
 PARAMETER(PAR.Lean_High_Max);
 PARAMETER(PAR.Lean_Low_Min);
 PARAMETER(PAR.Lean_Low_Max);
 PARAMETER(PAR.High_Yield_Min);
 PARAMETER(PAR.High_Yield_Max);
 PARAMETER(PAR.Low_Yield_Min);
 PARAMETER(PAR.Low_Yield_Max);
 PARAMETER(PAR.Head_Percent_Min);
 PARAMETER(PAR.Head_Percent_Max);
 PARAMETER(PAR.Head_Percent_Min);
 PARAMETER(PAR.Head_Percent_Max);
 PARAMETER(PAR.BackFat_High_Min);
 PARAMETER(PAR.BackFat_High_Max);
 PARAMETER(PAR.BackFat_Low_Min);
 PARAMETER(PAR.Backfat_Low_Max);
 PARAMETER(PAR.LoinEye_High_Min);
 PARAMETER(PAR.LoinEye_High_Max);
 PARAMETER(PAR.LoinEye_Low_Min);
 PARAMETER(PAR.LoinEye_Low_Max);
 PARAMETER(PAR.Requested_by_User_to_Bal);

 ENDIF;

 ENDIF;

 //?If receiving or slaughter processing code
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?This tattoo header is in the process code at the incorrect time
 //?either this is wip or payment
 // WRK.TH Header Error Sts = CND.No Kill Information
 WRK.TH_Header_Error_Sts = 'K';

 // WRK.TH Kill Balancing Sts = CND.Error
 WRK.TH_Kill_Balancing_Sts = 'E';

 EXECUTE FUNCTION(RTV Check For Pay Err RT) TYPE(RTVOBJ) FILE(PKB6CPP)           AB1140596;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(999999);
 PARAMETER('H');
 PARAMETER('HPC');
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(999999);
 PARAMETER('H');
 PARAMETER('HPC');
 PARAMETER('Header Process Code Invld');
 PARAMETER(*BLANKS);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(JOB.*JOB);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 {
  //?USER: Processing before Data update

  CASE;

  // IF PAR.KV Error Description is Entered
  IF PAR.KV_Error_Description <> *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
  PARAMETER(PAR.KV_Error_Code);
  PARAMETER(DB1.KV_Error_Description);
  {
   //?USER: Process Data record

   // PAR.EV Description = DB1.EV Description
   PAR.EV_Description = DB1.EV_Description;

  }

  ENDIF;

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDIF;

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 EXECUTE FUNCTION(Chg Tattoo Hdr Bal Sts CH) TYPE(CHGOBJ) FILE(PKA1CPP)          AB1151602;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.TH_Header_Error_Sts);
 PARAMETER(WRK.TH_Kill_Balancing_Sts);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

 ENDIF;

 //?Resale
 CASE;

 // IF DB1.TH Hog Class Type is Resale
 IF DB1.TH_Hog_Class_Type = 'R';

 //?RESALE UPDATE ADJUSTED LIVE WEIGHT
 // WRK.Net Head Usr = DB1.TH Head Received - DB1.TH Yard Deads
 WRK.Net_Head_Usr = DB1.TH_Head_Received - DB1.TH_Yard_Deads;

 // WRK.Net Head Usr = WRK.Net Head Usr - DB1.TH Head Condemned
 WRK.Net_Head_Usr = WRK.Net_Head_Usr - DB1.TH_Head_Condemned;

 //?Calculate Adj Live Weight
 CASE;

 // IF DB1.TH Head Received EQ WRK.Net Head Usr
 IF DB1.TH_Head_Received = WRK.Net_Head_Usr;

 // *MO.VE             1183529*Bu = ilt. in functions
 WRK.TH_Adj_Live_Wgt = DB1.TH_Live_Wgt;

 //?Calculate Adj Live Weight
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.TH Adj Live Wgt = WRK.Net Head Usr * DB1.TH Avg Live Wgt *
 WRK.TH_Adj_Live_Wgt = WRK.Net_Head_Usr * DB1.TH_Avg_Live_Wgt;

 ENDIF;

 EXECUTE FUNCTION(Chg Adj lv Wgt/Adj Yld CH) TYPE(CHGOBJ) FILE(PKA1CPP)          AB1151612;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.TH_Adj_Live_Wgt);
 PARAMETER(DB1.TH_Adj_Actual_Yield);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 QUIT;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?All and will be used in payments
 //?subject or market hogs process
 CASE;

 // IF DB1.TH Hog Class Type is Market
 IF DB1.TH_Hog_Class_Type = 'M';

 // OR DB1.TH Hog Class Type is Subject
 OR DB1.TH_Hog_Class_Type = 'S';

 //?If receiving or slaughter processing code
 CASE;

 // IF DB1.THP Process Code is Receiving
 IF DB1.THP_Process_Code = 'RECV';

 // OR DB1.THP Process Code is Slaughter
 OR DB1.THP_Process_Code = 'SLG';

 // Call program Val Kill Transaction  XF.
 CALL PROGRAM(Val Kill Transaction  XF) ('PKHJXFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TH_Purchase_Date);
 PARAMETER(DB1.TH_Group_Reference);
 PARAMETER(DB1.TH_Live_Purchase_UOM);
 PARAMETER(DB1.TH_Live_Purchase_Price);
 PARAMETER(DB1.TH_Live_Gross_Amt);
 PARAMETER(DB1.TH_LIve_Net_Amt);
 PARAMETER(DB1.TH_Resale_UOM);
 PARAMETER(DB1.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(DB1.TH_Pricing_Date);
 PARAMETER(DB1.TH_Resale_Spread_Sts);
 PARAMETER(DB1.TH_Dead_On_Arrival);
 PARAMETER(DB1.TH_Head_Received);
 PARAMETER(DB1.TH_Yard_Deads);
 PARAMETER(DB1.TH_Held_Over);
 PARAMETER(DB1.TH_Head_Condemned);
 PARAMETER(DB1.TH_Head_Killed);
 PARAMETER(DB1.TH_Head_Adds);
 PARAMETER(DB1.TH_Head_Accepted);
 PARAMETER(DB1.TH_Live_Wgt);
 PARAMETER(DB1.TH_Adj_Live_Wgt);
 PARAMETER(DB1.TH_Hot_Wgt);
 PARAMETER(DB1.TH_Tot_Loin_Eye_Depth);
 PARAMETER(DB1.TH_Tot_Backfat_Inches);
 PARAMETER(DB1.TH_Tot_Light_Reflectance);
 PARAMETER(DB1.TH_Avg_Live_Wgt);
 PARAMETER(DB1.TH_Avg_Hot_Wgt);
 PARAMETER(DB1.TH_Avg_Light_Reflectance);
 PARAMETER(DB1.TH_Avg_Lean_Percent);
 PARAMETER(DB1.TH_Avg_Loin_Eye_Depth);
 PARAMETER(DB1.TH_Avg_Backfat);
 PARAMETER(DB1.TH_Std_Yield_Percent);
 PARAMETER(DB1.TH_Actual_Yield);
 PARAMETER(DB1.TH_Adj_Actual_Yield);
 PARAMETER(DB1.TH_Yield_Difference);
 PARAMETER(DB1.TH_Recalc_Live_Wgt);
 PARAMETER(DB1.TH_CM_Market_Price);
 PARAMETER(DB1.TH_CM_Base_Mkt_Price);
 PARAMETER(DB1.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(DB1.TH_CM_Sort_Discount_Amt);
 PARAMETER(DB1.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(DB1.TH_CM_Base_Carcass_Value);
 PARAMETER(DB1.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(DB1.TH_CM_Carcass_Gross_Amt);
 PARAMETER(DB1.TH_Deduction_Amt);
 PARAMETER(DB1.TH_Total_Net_WO_Adds);
 PARAMETER(DB1.TH_Carcass_Net_Amt);
 PARAMETER(DB1.TH_Additions_Amt);
 PARAMETER(DB1.TH_Payment_Gross);
 PARAMETER(DB1.Th_Payment_Net_Amt);
 PARAMETER(DB1.TH_AP_Voucher_Document#);
 PARAMETER(DB1.TH_Freight_Amount);
 PARAMETER(DB1.TH_Accrual_Amount);
 PARAMETER(DB1.TH_Fixed_Cost_Amount);
 PARAMETER(DB1.TH_Calc_Net_Sts);
 PARAMETER(DB1.TH_Payment_Sts);
 PARAMETER(WRK.TH_Header_Error_Sts);
 PARAMETER(WRK.TH_Detail_Error_Sts);
 PARAMETER(WRK.TH_Kill_Balancing_Sts);
 PARAMETER(WRK.TH_Bal_to_Kill_Gen);
 PARAMETER(DB1.TH_Commission_A_P_Voucher);
 PARAMETER(DB1.TH_Voucher_Payment_Date);
 PARAMETER(DB1.TH_User_Error_Override);
 PARAMETER(DB1.TH_Held_Over_Record);
 PARAMETER(DB1.TH_Sex);
 PARAMETER(DB1.TH_Held_Ovr_Completed_Dte);
 PARAMETER(DB1.TH_Commission_Paid_Date);
 PARAMETER(DB1.TH_Actual_Check_Date);
 PARAMETER(DB1.TH_Shipped_Weight);
 PARAMETER(DB1.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(DB1.TH_FFLI);
 PARAMETER(DB1.TH_Kill_Product_Value);
 PARAMETER(DB1.TH_Cut_Product_Value);
 PARAMETER(DB1.TH_Render_Product_Value);
 PARAMETER(DB1.TH_Head_Excluded);
 PARAMETER(DB1.TH_CM_Bse_Mkt_Live_CWT);
 PARAMETER(DB1.TH_CM_Bse_Mkt_Carc_CWT);
 PARAMETER(DB1.TH_CM_Srt_Dsc_Live_CWT);
 PARAMETER(DB1.TH_CM_Srt_Dsc_Carc_CWT);
 PARAMETER(DB1.TH_CM_Yld_G_L_Live_CWT);
 PARAMETER(DB1.TH_CM_Yld_G_L_Carc_CWT);
 PARAMETER(DB1.TH_CM_Crc_Val_Live_CWT);
 PARAMETER(DB1.TH_CM_Crc_Val_Carc_CWT);
 PARAMETER(DB1.TH_CM_Lean_Prem_Live_CWT);
 PARAMETER(DB1.TH_CM_Lean_Prem_Carc_CWT);
 PARAMETER(DB1.TH_CM_Gross_Live_CWT);
 PARAMETER(DB1.TH_CM_Gross_Carc_CWT);
 PARAMETER(DB1.TH_Source_Type);
 PARAMETER(DB1.TH_Scale_Ticket_Sts);
 PARAMETER(DB1.TH_Payment_Type);
 PARAMETER(DB1.TH_HPS_Movement_Ref_#);
 PARAMETER(DB1.TH_Source_Code);
 PARAMETER(DB1.TH_Hog_Class_Type);
 PARAMETER(DB1.TH_Posted_to_HPS_Flag);
 PARAMETER(DB1.TH_Schedule_Kill_Shift);
 PARAMETER(DB1.TH_Shift_Held_Over);
 PARAMETER(DB1.DF_Defect_Code);
 PARAMETER(DB1.THP_Process_Code);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.HB_Buyer_Code);
 PARAMETER(DB1.GN_Genetic_Code);
 PARAMETER(DB1.HC_Class_Code);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 PARAMETER(PAR.Carcass_Dbw_Min);
 PARAMETER(PAR.Carcass_Dbw_Max);
 PARAMETER(PAR.Carcass_Lgt_Min);
 PARAMETER(PAR.Carcass_Lgt_Max);
 PARAMETER(PAR.Lean_High_Min);
 PARAMETER(PAR.Lean_High_Max);
 PARAMETER(PAR.Lean_Low_Min);
 PARAMETER(PAR.Lean_Low_Max);
 PARAMETER(PAR.High_Yield_Min);
 PARAMETER(PAR.High_Yield_Max);
 PARAMETER(PAR.Low_Yield_Min);
 PARAMETER(PAR.Low_Yield_Max);
 PARAMETER(PAR.Head_Percent_Min);
 PARAMETER(PAR.Head_Percent_Max);
 PARAMETER(PAR.Head_Percent_Min);
 PARAMETER(PAR.Head_Percent_Max);
 PARAMETER(PAR.BackFat_High_Min);
 PARAMETER(PAR.BackFat_High_Max);
 PARAMETER(PAR.BackFat_Low_Min);
 PARAMETER(PAR.Backfat_Low_Max);
 PARAMETER(PAR.LoinEye_High_Min);
 PARAMETER(PAR.LoinEye_High_Max);
 PARAMETER(PAR.LoinEye_Low_Min);
 PARAMETER(PAR.LoinEye_Low_Max);
 PARAMETER(PAR.Requested_by_User_to_Bal);

 //?If system says to balance tattoo then create records
 CASE;

 // IF WRK.TH Kill Balancing Sts is Balance
 IF WRK.TH_Kill_Balancing_Sts = 'B';

 CASE;

 // IF WRK.TH Bal to Kill Gen is System Generated
 IF WRK.TH_Bal_to_Kill_Gen = 'G';

 // Call program Crt Add Rec By Tatto  XF.
 CALL PROGRAM(Crt Add Rec By Tatto  XF) ('PKLQXFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);

 // Call program Val Kill Transaction  XF.
 CALL PROGRAM(Val Kill Transaction  XF) ('PKHJXFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TH_Purchase_Date);
 PARAMETER(DB1.TH_Group_Reference);
 PARAMETER(DB1.TH_Live_Purchase_UOM);
 PARAMETER(DB1.TH_Live_Purchase_Price);
 PARAMETER(DB1.TH_Live_Gross_Amt);
 PARAMETER(DB1.TH_LIve_Net_Amt);
 PARAMETER(DB1.TH_Resale_UOM);
 PARAMETER(DB1.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(DB1.TH_Pricing_Date);
 PARAMETER(DB1.TH_Resale_Spread_Sts);
 PARAMETER(DB1.TH_Dead_On_Arrival);
 PARAMETER(DB1.TH_Head_Received);
 PARAMETER(DB1.TH_Yard_Deads);
 PARAMETER(DB1.TH_Held_Over);
 PARAMETER(DB1.TH_Head_Condemned);
 PARAMETER(DB1.TH_Head_Killed);
 PARAMETER(DB1.TH_Head_Adds);
 PARAMETER(DB1.TH_Head_Accepted);
 PARAMETER(DB1.TH_Live_Wgt);
 PARAMETER(DB1.TH_Adj_Live_Wgt);
 PARAMETER(DB1.TH_Hot_Wgt);
 PARAMETER(DB1.TH_Tot_Loin_Eye_Depth);
 PARAMETER(DB1.TH_Tot_Backfat_Inches);
 PARAMETER(DB1.TH_Tot_Light_Reflectance);
 PARAMETER(DB1.TH_Avg_Live_Wgt);
 PARAMETER(DB1.TH_Avg_Hot_Wgt);
 PARAMETER(DB1.TH_Avg_Light_Reflectance);
 PARAMETER(DB1.TH_Avg_Lean_Percent);
 PARAMETER(DB1.TH_Avg_Loin_Eye_Depth);
 PARAMETER(DB1.TH_Avg_Backfat);
 PARAMETER(DB1.TH_Std_Yield_Percent);
 PARAMETER(DB1.TH_Actual_Yield);
 PARAMETER(DB1.TH_Adj_Actual_Yield);
 PARAMETER(DB1.TH_Yield_Difference);
 PARAMETER(DB1.TH_Recalc_Live_Wgt);
 PARAMETER(DB1.TH_CM_Market_Price);
 PARAMETER(DB1.TH_CM_Base_Mkt_Price);
 PARAMETER(DB1.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(DB1.TH_CM_Sort_Discount_Amt);
 PARAMETER(DB1.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(DB1.TH_CM_Base_Carcass_Value);
 PARAMETER(DB1.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(DB1.TH_CM_Carcass_Gross_Amt);
 PARAMETER(DB1.TH_Deduction_Amt);
 PARAMETER(DB1.TH_Total_Net_WO_Adds);
 PARAMETER(DB1.TH_Carcass_Net_Amt);
 PARAMETER(DB1.TH_Additions_Amt);
 PARAMETER(DB1.TH_Payment_Gross);
 PARAMETER(DB1.Th_Payment_Net_Amt);
 PARAMETER(DB1.TH_AP_Voucher_Document#);
 PARAMETER(DB1.TH_Freight_Amount);
 PARAMETER(DB1.TH_Accrual_Amount);
 PARAMETER(DB1.TH_Fixed_Cost_Amount);
 PARAMETER(DB1.TH_Calc_Net_Sts);
 PARAMETER(DB1.TH_Payment_Sts);
 PARAMETER(WRK.TH_Header_Error_Sts);
 PARAMETER(WRK.TH_Detail_Error_Sts);
 PARAMETER(WRK.TH_Kill_Balancing_Sts);
 PARAMETER(WRK.TH_Bal_to_Kill_Gen);
 PARAMETER(DB1.TH_Commission_A_P_Voucher);
 PARAMETER(DB1.TH_Voucher_Payment_Date);
 PARAMETER(DB1.TH_User_Error_Override);
 PARAMETER(DB1.TH_Held_Over_Record);
 PARAMETER(DB1.TH_Sex);
 PARAMETER(DB1.TH_Held_Ovr_Completed_Dte);
 PARAMETER(DB1.TH_Commission_Paid_Date);
 PARAMETER(DB1.TH_Actual_Check_Date);
 PARAMETER(DB1.TH_Shipped_Weight);
 PARAMETER(DB1.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(DB1.TH_FFLI);
 PARAMETER(DB1.TH_Kill_Product_Value);
 PARAMETER(DB1.TH_Cut_Product_Value);
 PARAMETER(DB1.TH_Render_Product_Value);
 PARAMETER(DB1.TH_Head_Excluded);
 PARAMETER(DB1.TH_CM_Bse_Mkt_Live_CWT);
 PARAMETER(DB1.TH_CM_Bse_Mkt_Carc_CWT);
 PARAMETER(DB1.TH_CM_Srt_Dsc_Live_CWT);
 PARAMETER(DB1.TH_CM_Srt_Dsc_Carc_CWT);
 PARAMETER(DB1.TH_CM_Yld_G_L_Live_CWT);
 PARAMETER(DB1.TH_CM_Yld_G_L_Carc_CWT);
 PARAMETER(DB1.TH_CM_Crc_Val_Live_CWT);
 PARAMETER(DB1.TH_CM_Crc_Val_Carc_CWT);
 PARAMETER(DB1.TH_CM_Lean_Prem_Live_CWT);
 PARAMETER(DB1.TH_CM_Lean_Prem_Carc_CWT);
 PARAMETER(DB1.TH_CM_Gross_Live_CWT);
 PARAMETER(DB1.TH_CM_Gross_Carc_CWT);
 PARAMETER(DB1.TH_Source_Type);
 PARAMETER(DB1.TH_Scale_Ticket_Sts);
 PARAMETER(DB1.TH_Payment_Type);
 PARAMETER(DB1.TH_HPS_Movement_Ref_#);
 PARAMETER(DB1.TH_Source_Code);
 PARAMETER(DB1.TH_Hog_Class_Type);
 PARAMETER(DB1.TH_Posted_to_HPS_Flag);
 PARAMETER(DB1.TH_Schedule_Kill_Shift);
 PARAMETER(DB1.TH_Shift_Held_Over);
 PARAMETER(DB1.DF_Defect_Code);
 PARAMETER(DB1.THP_Process_Code);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.HB_Buyer_Code);
 PARAMETER(DB1.GN_Genetic_Code);
 PARAMETER(DB1.HC_Class_Code);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 PARAMETER(PAR.Carcass_Dbw_Min);
 PARAMETER(PAR.Carcass_Dbw_Max);
 PARAMETER(PAR.Carcass_Lgt_Min);
 PARAMETER(PAR.Carcass_Lgt_Max);
 PARAMETER(PAR.Lean_High_Min);
 PARAMETER(PAR.Lean_High_Max);
 PARAMETER(PAR.Lean_Low_Min);
 PARAMETER(PAR.Lean_Low_Max);
 PARAMETER(PAR.High_Yield_Min);
 PARAMETER(PAR.High_Yield_Max);
 PARAMETER(PAR.Low_Yield_Min);
 PARAMETER(PAR.Low_Yield_Max);
 PARAMETER(PAR.Head_Percent_Min);
 PARAMETER(PAR.Head_Percent_Max);
 PARAMETER(PAR.Head_Percent_Min);
 PARAMETER(PAR.Head_Percent_Max);
 PARAMETER(PAR.BackFat_High_Min);
 PARAMETER(PAR.BackFat_High_Max);
 PARAMETER(PAR.BackFat_Low_Min);
 PARAMETER(PAR.Backfat_Low_Max);
 PARAMETER(PAR.LoinEye_High_Min);
 PARAMETER(PAR.LoinEye_High_Max);
 PARAMETER(PAR.LoinEye_Low_Min);
 PARAMETER(PAR.LoinEye_Low_Max);
 PARAMETER(PAR.Requested_by_User_to_Bal);

 ENDIF;

 ENDIF;

 //?If receiving or slaughter processing code
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?This tattoo header is in the process code at the incorrect time
 //?either this is wip or payment
 // WRK.TH Header Error Sts = CND.No Kill Information
 WRK.TH_Header_Error_Sts = 'K';

 // WRK.TH Kill Balancing Sts = CND.Error
 WRK.TH_Kill_Balancing_Sts = 'E';

 EXECUTE FUNCTION(RTV Check For Pay Err RT) TYPE(RTVOBJ) FILE(PKB6CPP)           AB1140596;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(999999);
 PARAMETER('H');
 PARAMETER('HPC');
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(999999);
 PARAMETER('H');
 PARAMETER('HPC');
 PARAMETER('Header Process Code Invld');
 PARAMETER(*BLANKS);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(JOB.*JOB);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 {
  //?USER: Processing before Data update

  CASE;

  // IF PAR.KV Error Description is Entered
  IF PAR.KV_Error_Description <> *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
  PARAMETER(PAR.KV_Error_Code);
  PARAMETER(DB1.KV_Error_Description);
  {
   //?USER: Process Data record

   // PAR.EV Description = DB1.EV Description
   PAR.EV_Description = DB1.EV_Description;

  }

  ENDIF;

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDIF;

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 EXECUTE FUNCTION(Chg Tattoo Hdr Bal Sts CH) TYPE(CHGOBJ) FILE(PKA1CPP)          AB1151602;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.TH_Header_Error_Sts);
 PARAMETER(WRK.TH_Kill_Balancing_Sts);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

 ENDIF;

 //?Resale
 CASE;

 // IF DB1.TH Hog Class Type is Resale
 IF DB1.TH_Hog_Class_Type = 'R';

 //?RESALE UPDATE ADJUSTED LIVE WEIGHT
 // WRK.Net Head Usr = DB1.TH Head Received - DB1.TH Yard Deads
 WRK.Net_Head_Usr = DB1.TH_Head_Received - DB1.TH_Yard_Deads;

 // WRK.Net Head Usr = WRK.Net Head Usr - DB1.TH Head Condemned
 WRK.Net_Head_Usr = WRK.Net_Head_Usr - DB1.TH_Head_Condemned;

 //?Calculate Adj Live Weight
 CASE;

 // IF DB1.TH Head Received EQ WRK.Net Head Usr
 IF DB1.TH_Head_Received = WRK.Net_Head_Usr;

 // *MO.VE             1183529*Bu = ilt. in functions
 WRK.TH_Adj_Live_Wgt = DB1.TH_Live_Wgt;

 //?Calculate Adj Live Weight
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.TH Adj Live Wgt = WRK.Net Head Usr * DB1.TH Avg Live Wgt *
 WRK.TH_Adj_Live_Wgt = WRK.Net_Head_Usr * DB1.TH_Avg_Live_Wgt;

 ENDIF;

 EXECUTE FUNCTION(Chg Adj lv Wgt/Adj Yld CH) TYPE(CHGOBJ) FILE(PKA1CPP)          AB1151612;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.TH_Adj_Live_Wgt);
 PARAMETER(DB1.TH_Adj_Actual_Yield);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

 ENDIF;

}


//?Only on batch processing
//?Print Exception reports
//?      Print Evaluation errors
//?      Print Loss errors
CASE;

// IF PAR.TH Schedule Kill Shift EQ WRK.Blank Usr 1 fld Usr
IF PAR.TH_Schedule_Kill_Shift = WRK.Blank_Usr_1_fld_Usr;

//?shift  1
// Call program Zzz Eval/Loss Excepts PF.
CALL PROGRAM(Zzz Eval/Loss Excepts PF) ('PKLIPFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(1);
PARAMETER(PAR.Current_Kill_Date);
PARAMETER(PAR.TH_Kill_Balancing_Sts);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Execution_Location_USR);

//?shift  2
// Call program Zzz Eval/Loss Excepts PF.
CALL PROGRAM(Zzz Eval/Loss Excepts PF) ('PKLIPFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(2);
PARAMETER(PAR.Current_Kill_Date);
PARAMETER(PAR.TH_Kill_Balancing_Sts);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Execution_Location_USR);

// IF *OTHERWISE
IF *OTHERWISE;

//?shift requested
// Call program Zzz Eval/Loss Excepts PF.
CALL PROGRAM(Zzz Eval/Loss Excepts PF) ('PKLIPFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.TH_Schedule_Kill_Shift);
PARAMETER(PAR.Current_Kill_Date);
PARAMETER(PAR.TH_Kill_Balancing_Sts);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Execution_Location_USR);

ENDIF;

//?Read the Tatto file either all/ or 1 record
// IF *OTHERWISE
IF *OTHERWISE;

//?Interactive balancing
//?Accumulate Totals Validate all Tatto's Carcass
EXECUTE FUNCTION(Chg Fls/Bal 1 Tatto   RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1126906;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TH_Schedule_Kill_Shift);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(WRK.Carcass_Dbw_Min);
PARAMETER(WRK.Carcass_Dbw_Max);
PARAMETER(WRK.Carcass_Lgt_Min);
PARAMETER(WRK.Carcass_Lgt_Max);
PARAMETER(WRK.Lean_High_Min);
PARAMETER(WRK.Lean_High_Max);
PARAMETER(WRK.Lean_Low_Min);
PARAMETER(WRK.Lean_Low_Max);
PARAMETER(WRK.High_Yield_Min);
PARAMETER(WRK.High_Yield_Max);
PARAMETER(WRK.Low_Yield_Min);
PARAMETER(WRK.Low_Yield_Max);
PARAMETER(WRK.Head_Percent_Min);
PARAMETER(WRK.Head_Percent_Max);
PARAMETER(WRK.Head_Percent_Min);
PARAMETER(WRK.Head_Percent_Max);
PARAMETER(WRK.BackFat_High_Min);
PARAMETER(WRK.BackFat_High_Max);
PARAMETER(WRK.BackFat_Low_Min);
PARAMETER(WRK.Backfat_Low_Max);
PARAMETER(WRK.LoinEye_High_Min);
PARAMETER(WRK.LoinEye_High_Max);
PARAMETER(WRK.LoinEye_Low_Min);
PARAMETER(WRK.LoinEye_Low_Max);
PARAMETER(PAR.Requested_by_User_to_Bal);
{
 //?USER: Process Data record

 //?subject or market hogs process
 CASE;

 // IF DB1.TH Hog Class Type is Market
 IF DB1.TH_Hog_Class_Type = 'M';

 // OR DB1.TH Hog Class Type is Subject
 OR DB1.TH_Hog_Class_Type = 'S';

 //?If receiving or slaughter processing code
 CASE;

 // IF DB1.THP Process Code is Receiving
 IF DB1.THP_Process_Code = 'RECV';

 // OR DB1.THP Process Code is Slaughter
 OR DB1.THP_Process_Code = 'SLG';

 CASE;

 // IF PAR.Requested by User to Bal is Yes
 IF PAR.Requested_by_User_to_Bal = 'Y';

 // Call program Zzz Add Rec by Tatto  XF.
 CALL PROGRAM(Zzz Add Rec by Tatto  XF) ('PKLPXFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(PAR.Requested_by_User_to_Bal);

 ENDIF;

 // Call program Val Kill Transaction  XF.
 CALL PROGRAM(Val Kill Transaction  XF) ('PKHJXFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TH_Purchase_Date);
 PARAMETER(DB1.TH_Group_Reference);
 PARAMETER(DB1.TH_Live_Purchase_UOM);
 PARAMETER(DB1.TH_Live_Purchase_Price);
 PARAMETER(DB1.TH_Live_Gross_Amt);
 PARAMETER(DB1.TH_LIve_Net_Amt);
 PARAMETER(DB1.TH_Resale_UOM);
 PARAMETER(DB1.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(DB1.TH_Pricing_Date);
 PARAMETER(DB1.TH_Resale_Spread_Sts);
 PARAMETER(DB1.TH_Dead_On_Arrival);
 PARAMETER(DB1.TH_Head_Received);
 PARAMETER(DB1.TH_Yard_Deads);
 PARAMETER(DB1.TH_Held_Over);
 PARAMETER(DB1.TH_Head_Condemned);
 PARAMETER(DB1.TH_Head_Killed);
 PARAMETER(DB1.TH_Head_Adds);
 PARAMETER(DB1.TH_Head_Accepted);
 PARAMETER(DB1.TH_Live_Wgt);
 PARAMETER(DB1.TH_Adj_Live_Wgt);
 PARAMETER(DB1.TH_Hot_Wgt);
 PARAMETER(DB1.TH_Tot_Loin_Eye_Depth);
 PARAMETER(DB1.TH_Tot_Backfat_Inches);
 PARAMETER(DB1.TH_Tot_Light_Reflectance);
 PARAMETER(DB1.TH_Avg_Live_Wgt);
 PARAMETER(DB1.TH_Avg_Hot_Wgt);
 PARAMETER(DB1.TH_Avg_Light_Reflectance);
 PARAMETER(DB1.TH_Avg_Lean_Percent);
 PARAMETER(DB1.TH_Avg_Loin_Eye_Depth);
 PARAMETER(DB1.TH_Avg_Backfat);
 PARAMETER(DB1.TH_Std_Yield_Percent);
 PARAMETER(DB1.TH_Actual_Yield);
 PARAMETER(DB1.TH_Adj_Actual_Yield);
 PARAMETER(DB1.TH_Yield_Difference);
 PARAMETER(DB1.TH_Recalc_Live_Wgt);
 PARAMETER(DB1.TH_CM_Market_Price);
 PARAMETER(DB1.TH_CM_Base_Mkt_Price);
 PARAMETER(DB1.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(DB1.TH_CM_Sort_Discount_Amt);
 PARAMETER(DB1.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(DB1.TH_CM_Base_Carcass_Value);
 PARAMETER(DB1.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(DB1.TH_CM_Carcass_Gross_Amt);
 PARAMETER(DB1.TH_Deduction_Amt);
 PARAMETER(DB1.TH_Total_Net_WO_Adds);
 PARAMETER(DB1.TH_Carcass_Net_Amt);
 PARAMETER(DB1.TH_Additions_Amt);
 PARAMETER(DB1.TH_Payment_Gross);
 PARAMETER(DB1.Th_Payment_Net_Amt);
 PARAMETER(DB1.TH_AP_Voucher_Document#);
 PARAMETER(DB1.TH_Freight_Amount);
 PARAMETER(DB1.TH_Accrual_Amount);
 PARAMETER(DB1.TH_Fixed_Cost_Amount);
 PARAMETER(DB1.TH_Calc_Net_Sts);
 PARAMETER(DB1.TH_Payment_Sts);
 PARAMETER(WRK.TH_Header_Error_Sts);
 PARAMETER(WRK.TH_Detail_Error_Sts);
 PARAMETER(WRK.TH_Kill_Balancing_Sts);
 PARAMETER(WRK.TH_Bal_to_Kill_Gen);
 PARAMETER(DB1.TH_Commission_A_P_Voucher);
 PARAMETER(DB1.TH_Voucher_Payment_Date);
 PARAMETER(DB1.TH_User_Error_Override);
 PARAMETER(DB1.TH_Held_Over_Record);
 PARAMETER(DB1.TH_Sex);
 PARAMETER(DB1.TH_Held_Ovr_Completed_Dte);
 PARAMETER(DB1.TH_Commission_Paid_Date);
 PARAMETER(DB1.TH_Actual_Check_Date);
 PARAMETER(DB1.TH_Shipped_Weight);
 PARAMETER(DB1.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(DB1.TH_FFLI);
 PARAMETER(DB1.TH_Kill_Product_Value);
 PARAMETER(DB1.TH_Cut_Product_Value);
 PARAMETER(DB1.TH_Render_Product_Value);
 PARAMETER(DB1.TH_Head_Excluded);
 PARAMETER(DB1.TH_CM_Bse_Mkt_Live_CWT);
 PARAMETER(DB1.TH_CM_Bse_Mkt_Carc_CWT);
 PARAMETER(DB1.TH_CM_Srt_Dsc_Live_CWT);
 PARAMETER(DB1.TH_CM_Srt_Dsc_Carc_CWT);
 PARAMETER(DB1.TH_CM_Yld_G_L_Live_CWT);
 PARAMETER(DB1.TH_CM_Yld_G_L_Carc_CWT);
 PARAMETER(DB1.TH_CM_Crc_Val_Live_CWT);
 PARAMETER(DB1.TH_CM_Crc_Val_Carc_CWT);
 PARAMETER(DB1.TH_CM_Lean_Prem_Live_CWT);
 PARAMETER(DB1.TH_CM_Lean_Prem_Carc_CWT);
 PARAMETER(DB1.TH_CM_Gross_Live_CWT);
 PARAMETER(DB1.TH_CM_Gross_Carc_CWT);
 PARAMETER(DB1.TH_Source_Type);
 PARAMETER(DB1.TH_Scale_Ticket_Sts);
 PARAMETER(DB1.TH_Payment_Type);
 PARAMETER(DB1.TH_HPS_Movement_Ref_#);
 PARAMETER(DB1.TH_Source_Code);
 PARAMETER(DB1.TH_Hog_Class_Type);
 PARAMETER(DB1.TH_Posted_to_HPS_Flag);
 PARAMETER(DB1.TH_Schedule_Kill_Shift);
 PARAMETER(DB1.TH_Shift_Held_Over);
 PARAMETER(DB1.DF_Defect_Code);
 PARAMETER(DB1.THP_Process_Code);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.HB_Buyer_Code);
 PARAMETER(DB1.GN_Genetic_Code);
 PARAMETER(DB1.HC_Class_Code);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 PARAMETER(PAR.Carcass_Dbw_Min);
 PARAMETER(PAR.Carcass_Dbw_Max);
 PARAMETER(PAR.Carcass_Lgt_Min);
 PARAMETER(PAR.Carcass_Lgt_Max);
 PARAMETER(PAR.Lean_High_Min);
 PARAMETER(PAR.Lean_High_Max);
 PARAMETER(PAR.Lean_Low_Min);
 PARAMETER(PAR.Lean_Low_Max);
 PARAMETER(PAR.High_Yield_Min);
 PARAMETER(PAR.High_Yield_Max);
 PARAMETER(PAR.Low_Yield_Min);
 PARAMETER(PAR.Low_Yield_Max);
 PARAMETER(PAR.Head_Percent_Min);
 PARAMETER(PAR.Head_Percent_Max);
 PARAMETER(PAR.Head_Percent_Min);
 PARAMETER(PAR.Head_Percent_Max);
 PARAMETER(PAR.BackFat_High_Min);
 PARAMETER(PAR.BackFat_High_Max);
 PARAMETER(PAR.BackFat_Low_Min);
 PARAMETER(PAR.Backfat_Low_Max);
 PARAMETER(PAR.LoinEye_High_Min);
 PARAMETER(PAR.LoinEye_High_Max);
 PARAMETER(PAR.LoinEye_Low_Min);
 PARAMETER(PAR.LoinEye_Low_Max);
 PARAMETER(PAR.Requested_by_User_to_Bal);

 //?Tattoo is either balanced or ready to create add records
 CASE;

 // IF WRK.TH Kill Balancing Sts is Balance
 IF WRK.TH_Kill_Balancing_Sts = 'B';

 //?If true this will then create plug records
 CASE;

 // IF WRK.TH Bal to Kill Gen is System Generated
 IF WRK.TH_Bal_to_Kill_Gen = 'G';

 // OR WRK.TH Bal to Kill Gen is User Requested Generated
 OR WRK.TH_Bal_to_Kill_Gen = 'U';

 // Call program Crt Add Rec By Tatto  XF.
 CALL PROGRAM(Crt Add Rec By Tatto  XF) ('PKLQXFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);

 //?After creation revalidate for totals and reverifing
 // Call program Val Kill Transaction  XF.
 CALL PROGRAM(Val Kill Transaction  XF) ('PKHJXFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TH_Purchase_Date);
 PARAMETER(DB1.TH_Group_Reference);
 PARAMETER(DB1.TH_Live_Purchase_UOM);
 PARAMETER(DB1.TH_Live_Purchase_Price);
 PARAMETER(DB1.TH_Live_Gross_Amt);
 PARAMETER(DB1.TH_LIve_Net_Amt);
 PARAMETER(DB1.TH_Resale_UOM);
 PARAMETER(DB1.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(DB1.TH_Pricing_Date);
 PARAMETER(DB1.TH_Resale_Spread_Sts);
 PARAMETER(DB1.TH_Dead_On_Arrival);
 PARAMETER(DB1.TH_Head_Received);
 PARAMETER(DB1.TH_Yard_Deads);
 PARAMETER(DB1.TH_Held_Over);
 PARAMETER(DB1.TH_Head_Condemned);
 PARAMETER(DB1.TH_Head_Killed);
 PARAMETER(DB1.TH_Head_Adds);
 PARAMETER(DB1.TH_Head_Accepted);
 PARAMETER(DB1.TH_Live_Wgt);
 PARAMETER(DB1.TH_Adj_Live_Wgt);
 PARAMETER(DB1.TH_Hot_Wgt);
 PARAMETER(DB1.TH_Tot_Loin_Eye_Depth);
 PARAMETER(DB1.TH_Tot_Backfat_Inches);
 PARAMETER(DB1.TH_Tot_Light_Reflectance);
 PARAMETER(DB1.TH_Avg_Live_Wgt);
 PARAMETER(DB1.TH_Avg_Hot_Wgt);
 PARAMETER(DB1.TH_Avg_Light_Reflectance);
 PARAMETER(DB1.TH_Avg_Lean_Percent);
 PARAMETER(DB1.TH_Avg_Loin_Eye_Depth);
 PARAMETER(DB1.TH_Avg_Backfat);
 PARAMETER(DB1.TH_Std_Yield_Percent);
 PARAMETER(DB1.TH_Actual_Yield);
 PARAMETER(DB1.TH_Adj_Actual_Yield);
 PARAMETER(DB1.TH_Yield_Difference);
 PARAMETER(DB1.TH_Recalc_Live_Wgt);
 PARAMETER(DB1.TH_CM_Market_Price);
 PARAMETER(DB1.TH_CM_Base_Mkt_Price);
 PARAMETER(DB1.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(DB1.TH_CM_Sort_Discount_Amt);
 PARAMETER(DB1.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(DB1.TH_CM_Base_Carcass_Value);
 PARAMETER(DB1.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(DB1.TH_CM_Carcass_Gross_Amt);
 PARAMETER(DB1.TH_Deduction_Amt);
 PARAMETER(DB1.TH_Total_Net_WO_Adds);
 PARAMETER(DB1.TH_Carcass_Net_Amt);
 PARAMETER(DB1.TH_Additions_Amt);
 PARAMETER(DB1.TH_Payment_Gross);
 PARAMETER(DB1.Th_Payment_Net_Amt);
 PARAMETER(DB1.TH_AP_Voucher_Document#);
 PARAMETER(DB1.TH_Freight_Amount);
 PARAMETER(DB1.TH_Accrual_Amount);
 PARAMETER(DB1.TH_Fixed_Cost_Amount);
 PARAMETER(DB1.TH_Calc_Net_Sts);
 PARAMETER(DB1.TH_Payment_Sts);
 PARAMETER(WRK.TH_Header_Error_Sts);
 PARAMETER(WRK.TH_Detail_Error_Sts);
 PARAMETER(WRK.TH_Kill_Balancing_Sts);
 PARAMETER(WRK.TH_Bal_to_Kill_Gen);
 PARAMETER(DB1.TH_Commission_A_P_Voucher);
 PARAMETER(DB1.TH_Voucher_Payment_Date);
 PARAMETER(DB1.TH_User_Error_Override);
 PARAMETER(DB1.TH_Held_Over_Record);
 PARAMETER(DB1.TH_Sex);
 PARAMETER(DB1.TH_Held_Ovr_Completed_Dte);
 PARAMETER(DB1.TH_Commission_Paid_Date);
 PARAMETER(DB1.TH_Actual_Check_Date);
 PARAMETER(DB1.TH_Shipped_Weight);
 PARAMETER(DB1.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(DB1.TH_FFLI);
 PARAMETER(DB1.TH_Kill_Product_Value);
 PARAMETER(DB1.TH_Cut_Product_Value);
 PARAMETER(DB1.TH_Render_Product_Value);
 PARAMETER(DB1.TH_Head_Excluded);
 PARAMETER(DB1.TH_CM_Bse_Mkt_Live_CWT);
 PARAMETER(DB1.TH_CM_Bse_Mkt_Carc_CWT);
 PARAMETER(DB1.TH_CM_Srt_Dsc_Live_CWT);
 PARAMETER(DB1.TH_CM_Srt_Dsc_Carc_CWT);
 PARAMETER(DB1.TH_CM_Yld_G_L_Live_CWT);
 PARAMETER(DB1.TH_CM_Yld_G_L_Carc_CWT);
 PARAMETER(DB1.TH_CM_Crc_Val_Live_CWT);
 PARAMETER(DB1.TH_CM_Crc_Val_Carc_CWT);
 PARAMETER(DB1.TH_CM_Lean_Prem_Live_CWT);
 PARAMETER(DB1.TH_CM_Lean_Prem_Carc_CWT);
 PARAMETER(DB1.TH_CM_Gross_Live_CWT);
 PARAMETER(DB1.TH_CM_Gross_Carc_CWT);
 PARAMETER(DB1.TH_Source_Type);
 PARAMETER(DB1.TH_Scale_Ticket_Sts);
 PARAMETER(DB1.TH_Payment_Type);
 PARAMETER(DB1.TH_HPS_Movement_Ref_#);
 PARAMETER(DB1.TH_Source_Code);
 PARAMETER(DB1.TH_Hog_Class_Type);
 PARAMETER(DB1.TH_Posted_to_HPS_Flag);
 PARAMETER(DB1.TH_Schedule_Kill_Shift);
 PARAMETER(DB1.TH_Shift_Held_Over);
 PARAMETER(DB1.DF_Defect_Code);
 PARAMETER(DB1.THP_Process_Code);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.HB_Buyer_Code);
 PARAMETER(DB1.GN_Genetic_Code);
 PARAMETER(DB1.HC_Class_Code);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 PARAMETER(PAR.Carcass_Dbw_Min);
 PARAMETER(PAR.Carcass_Dbw_Max);
 PARAMETER(PAR.Carcass_Lgt_Min);
 PARAMETER(PAR.Carcass_Lgt_Max);
 PARAMETER(PAR.Lean_High_Min);
 PARAMETER(PAR.Lean_High_Max);
 PARAMETER(PAR.Lean_Low_Min);
 PARAMETER(PAR.Lean_Low_Max);
 PARAMETER(PAR.High_Yield_Min);
 PARAMETER(PAR.High_Yield_Max);
 PARAMETER(PAR.Low_Yield_Min);
 PARAMETER(PAR.Low_Yield_Max);
 PARAMETER(PAR.Head_Percent_Min);
 PARAMETER(PAR.Head_Percent_Max);
 PARAMETER(PAR.Head_Percent_Min);
 PARAMETER(PAR.Head_Percent_Max);
 PARAMETER(PAR.BackFat_High_Min);
 PARAMETER(PAR.BackFat_High_Max);
 PARAMETER(PAR.BackFat_Low_Min);
 PARAMETER(PAR.Backfat_Low_Max);
 PARAMETER(PAR.LoinEye_High_Min);
 PARAMETER(PAR.LoinEye_High_Max);
 PARAMETER(PAR.LoinEye_Low_Min);
 PARAMETER(PAR.LoinEye_Low_Max);
 PARAMETER(PAR.Requested_by_User_to_Bal);

 ENDIF;

 //?Tattoo is either balanced or ready to create add records
 // IF *OTHERWISE
 IF *OTHERWISE;

 ENDIF;

 //?If receiving or slaughter processing code
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?This tattoo header is in the process code at the incorrect time
 //?either this is wip or payment
 // WRK.TH Header Error Sts = CND.No Kill Information
 WRK.TH_Header_Error_Sts = 'K';

 // WRK.TH Kill Balancing Sts = CND.Error
 WRK.TH_Kill_Balancing_Sts = 'E';

 EXECUTE FUNCTION(RTV Check For Pay Err RT) TYPE(RTVOBJ) FILE(PKB6CPP)           AB1140596;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(999999);
 PARAMETER('H');
 PARAMETER('HPC');
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(999999);
 PARAMETER('H');
 PARAMETER('HPC');
 PARAMETER('Header Process Code Invld');
 PARAMETER(*BLANKS);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(JOB.*JOB);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 {
  //?USER: Processing before Data update

  CASE;

  // IF PAR.KV Error Description is Entered
  IF PAR.KV_Error_Description <> *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
  PARAMETER(PAR.KV_Error_Code);
  PARAMETER(DB1.KV_Error_Description);
  {
   //?USER: Process Data record

   // PAR.EV Description = DB1.EV Description
   PAR.EV_Description = DB1.EV_Description;

  }

  ENDIF;

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDIF;

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 EXECUTE FUNCTION(Chg Tattoo Hdr Bal Sts CH) TYPE(CHGOBJ) FILE(PKA1CPP)          AB1151602;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.TH_Header_Error_Sts);
 PARAMETER(WRK.TH_Kill_Balancing_Sts);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

 //?subject or market hogs process
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Net Head Usr = DB1.TH Head Received - DB1.TH Yard Deads
 WRK.Net_Head_Usr = DB1.TH_Head_Received - DB1.TH_Yard_Deads;

 // WRK.Net Head Usr = WRK.Net Head Usr - DB1.TH Head Condemned
 WRK.Net_Head_Usr = WRK.Net_Head_Usr - DB1.TH_Head_Condemned;

 //?Calculate Adj Live Weight
 CASE;

 // IF DB1.TH Head Received EQ WRK.Net Head Usr
 IF DB1.TH_Head_Received = WRK.Net_Head_Usr;

 // *MO.VE             1183529*Bu = ilt. in functions
 WRK.TH_Adj_Live_Wgt = DB1.TH_Live_Wgt;

 //?Calculate Adj Live Weight
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.TH Adj Live Wgt = WRK.Net Head Usr * DB1.TH Avg Live Wgt *
 WRK.TH_Adj_Live_Wgt = WRK.Net_Head_Usr * DB1.TH_Avg_Live_Wgt;

 ENDIF;

 EXECUTE FUNCTION(Chg Adj lv Wgt/Adj Yld CH) TYPE(CHGOBJ) FILE(PKA1CPP)          AB1151612;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.TH_Adj_Live_Wgt);
 PARAMETER(DB1.TH_Adj_Actual_Yield);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

}


ENDIF;

