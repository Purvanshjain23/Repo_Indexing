// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDOEEFR
// ?Date: 14.08.2025 Time: 03:29:04
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

//?USER: Initialize subfile header

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(PAR.Company_Number);
PARAMETER(CTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?First time processing
CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

//?Populate Screen user fields/parms
DO;

// CTL.Ship To Customer = PAR.Ship To Customer
CTL.Ship_To_Customer = PAR.Ship_To_Customer;

// CTL.Ship To Name = PAR.Ship To Name
CTL.Ship_To_Name = PAR.Ship_To_Name;

EXECUTE FUNCTION(RTV Pricing Info       RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1313023;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Extended_Amount);
PARAMETER(CTL.Market_Pricing_Date);
PARAMETER(CTL.Commodity_Market_Code);
PARAMETER(CTL.Date_Method_Code);
PARAMETER(CTL.Price_Method_Code);
PARAMETER(CTL.Price_Overage_Override);
PARAMETER(CTL.Contract_Number);
PARAMETER(CTL.U_M_Base_Price);
PARAMETER(CTL.U_M_Ordered);
PARAMETER(CTL.Description_Line_One);
PARAMETER(CTL.Quantity_Scheduled);
PARAMETER(CTL.Unit_Price);
PARAMETER(CTL.Unit_Price_Ordered_U_M);
PARAMETER(CTL.Unit_Weight_Ordered_U_M);
PARAMETER(CTL.Requested_Ship_Date);
PARAMETER(CTL.Price_Code);
PARAMETER(CTL.OD_Market_Begin_Date);
PARAMETER(CTL.OD_Market_Ending_Date);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program CLC Price Item         XF.
CALL PROGRAM(CLC Price Item         XF) ('PDG9XFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Price_Method_Code);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(*ZERO);
PARAMETER(**);
PARAMETER(CTL.OD_Ceiling_Price);
PARAMETER(CTL.OD_Market_Begin_Date);
PARAMETER(CTL.OD_Market_Ending_Date);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Requested_Delivery_Date);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(WRK.Error_Return);
PARAMETER('S');

EXECUTE FUNCTION(RTV Req Delv/Hdr Sts  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1598298;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(WRK.Header_Status);
PARAMETER(CTL.Requested_Delivery_Date);
PARAMETER(WRK.Requested_Delivery_Time);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.USR Ship To Customer = CTL.Ship To Customer
PAR.USR_Ship_To_Customer = CTL.Ship_To_Customer;

// PAR.Item Code = CTL.Item Code
PAR.Item_Code = CTL.Item_Code;

// PAR.Requested Ship Date = CTL.Requested Ship Date
PAR.Requested_Ship_Date = CTL.Requested_Ship_Date;

// PAR.Quantity Allocated = CTL.Quantity Allocated
PAR.Quantity_Scheduled = CTL.Quantity_Scheduled;

// PAR.Price Overage Override = CTL.Price Overage Override
PAR.Price_Overage_Override = CTL.Price_Overage_Override;

// PAR.Price Method Code = CTL.Price Method Code
PAR.Price_Method_Code = CTL.Price_Method_Code;

// PAR.Date Method Code = CTL.Date Method Code
PAR.Date_Method_Code = CTL.Date_Method_Code;

// PAR.Contract Number = CTL.Contract Number
PAR.Contract_Number = CTL.Contract_Number;

// PAR.Market Pricing Date = CTL.Market Pricing Date
PAR.Market_Pricing_Date = CTL.Market_Pricing_Date;

// PAR.Commodity Market Code = CTL.Commodity Market Code
PAR.Commodity_Market_Code = CTL.Commodity_Market_Code;

ENDDO;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

ENDIF;

//?USER: Initialize subfile record (existing record)

//?Skip TCRDVY
CASE;

// IF DB1.Price Method Componant is TCRDVY
IF DB1.Price_Method_Componant = 'TCRDVY';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Skip components not part of Formula Pricing
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(VAL Check Existence    RT) TYPE(RTVOBJ) FILE(PDIKREP)          AC1314692;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Price_Method_Code);
PARAMETER(DB1.Price_Method_Componant);

//?Don't select components which are not part of Formula processing
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Don't select components which are not part of Formula processing
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Fill Description/field controlling whether Input or Output
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(PDIJREP)          AC1251625;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Price_Method_Componant);
PARAMETER(RCD.Price_Componant_Desc);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DB1.Price Method Componant is STRITM
IF DB1.Price_Method_Componant = 'STRITM';

// OR DB1.Price Method Componant is SUBCRD
OR DB1.Price_Method_Componant = 'SUBCRD';

// OR DB1.Price Method Componant is MSCYLD
OR DB1.Price_Method_Componant = 'MSCYLD';

// OR DB1.Price Method Componant is TLCRDV
OR DB1.Price_Method_Componant = 'TLCRDV';

// OR DB1.Price Method Componant is TLCRDY
OR DB1.Price_Method_Componant = 'TLCRDY';

// RCD.USR Update Flag = CND.No
RCD.USR_Update_Flag = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.USR Update Flag = CND.Yes
RCD.USR_Update_Flag = 'Y';

ENDIF;

ENDIF;

//?USER: Validate subfile control

//?Select Customer
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Ship To Customer
AND PGM.*Cursor_field = CTL.Ship_To_Customer;

//?4/1/04 slm Add Shipped to Customer with selection on Customer name
// Call program SEL Cust/ShpTo Flag 'Y'SR.
CALL PROGRAM(SEL Cust/ShpTo Flag 'Y'SR) ('PDYSSRR');
PARAMETER(CTL.Ship_To_Customer);

ENDIF;

//?Select Item Code
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Item Code
AND PGM.*Cursor_field = CTL.Item_Code;

// Call program SEL Actv Finished Good SR.
CALL PROGRAM(SEL Actv Finished Good SR) ('PDNHSRR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);

ENDIF;

//?Select Price Method Code
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Price Method Code
AND PGM.*Cursor_field = CTL.Price_Method_Code;

// Call program SEL OMS System Only    SR.
CALL PROGRAM(SEL OMS System Only    SR) ('PDZSSRR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Price_Method_Code);

ENDIF;

//?Select Date Method
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Date Method Code
AND PGM.*Cursor_field = CTL.Date_Method_Code;

// Call program Sel Market Date Method SR.
CALL PROGRAM(Sel Market Date Method SR) ('PDKISRR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Date_Method_Code);

ENDIF;

//?Select Contract Number
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Contract Number
AND PGM.*Cursor_field = CTL.Contract_Number;

// Call program Zzz Item Contract Nbr  SR.
CALL PROGRAM(Zzz Item Contract Nbr  SR) ('PDOFSRR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Market_Pricing_Date);
PARAMETER(CTL.Contract_Number);
PARAMETER(CTL.Price_Overage_Override);
PARAMETER(CTL.Market_Pricing_Date);
PARAMETER(CTL.Date_Method_Code);
PARAMETER(CTL.Price_Method_Code);
PARAMETER(CTL.Commodity_Market_Code);

ENDIF;

//?Select Commodity Market Code
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Commodity Market Code
AND PGM.*Cursor_field = CTL.Commodity_Market_Code;

// Call program SEL Commod. Mkts Actve SR.
CALL PROGRAM(SEL Commod. Mkts Actve SR) ('PDEDSRR');
PARAMETER(CTL.Commodity_Market_Code);

ENDIF;

// PAR.Error Status = CND.no
PAR.Error_Status = 'N';

CASE;

// IF PAR.Price Overage Override NE CTL.Price Overage Override
IF PAR.Price_Overage_Override <> CTL.Price_Overage_Override;

// OR PAR.Price Method Code NE CTL.Price Method Code
OR PAR.Price_Method_Code <> CTL.Price_Method_Code;

// OR PAR.Date Method Code NE CTL.Date Method Code
OR PAR.Date_Method_Code <> CTL.Date_Method_Code;

// OR PAR.Market Pricing Date NE CTL.Market Pricing Date
OR PAR.Market_Pricing_Date <> CTL.Market_Pricing_Date;

// OR PAR.Commodity Market Code NE CTL.Commodity Market Code
OR PAR.Commodity_Market_Code <> CTL.Commodity_Market_Code;

// OR PAR.Contract Number NE CTL.Contract Number
OR PAR.Contract_Number <> CTL.Contract_Number;

// OR PAR.Item Code NE CTL.Item Code
OR PAR.Item_Code <> CTL.Item_Code;

// OR PAR.USR Ship To Customer NE CTL.Ship To Customer
OR PAR.USR_Ship_To_Customer <> CTL.Ship_To_Customer;

//?Get Customer name
CASE;

// IF PAR.Ship To Customer NE CTL.Ship To Customer
IF PAR.Ship_To_Customer <> CTL.Ship_To_Customer;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Ship_To_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Error on return
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Error on return
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Customer Master not found.'
ERROR(USR0170);
MSGPARM(CTL.Ship_To_Customer);

// PAR.Error Status = CND.yes
PAR.Error_Return = 'Y';

ENDIF;

ENDIF;

//?Item Processing
CASE;

// IF PAR.Item Code NE CTL.Item Code
IF PAR.Item_Code <> CTL.Item_Code;

EXECUTE FUNCTION(Rtv Descriptions      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1140665;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Description_Line_One);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program RTV for Ord.Detail     XF.
CALL PROGRAM(RTV for Ord.Detail     XF) ('PDC3XFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(WRK.Order_Desc_Line_One);
PARAMETER(WRK.Order_Desc_Line_Two);
PARAMETER(CTL.U_M_Ordered);
PARAMETER(CTL.U_M_Base_Price);
PARAMETER(CTL.Unit_Weight_Ordered_U_M);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.STS_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Default_Commod_Mark_basis);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Item_Type_Code);
PARAMETER(WRK.Commodity_Price_Group);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Price_Method_Code);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Item_Target_Price);
PARAMETER(WRK.Error_Status);

//?Not found error
CASE;

// IF WRK.Error Status is yes
IF WRK.Error_Status = 'Y';

// Send error message - 'Company Item not found.'
ERROR(USR0326);
MSGPARM(WRK.Company_Number_CDE);
MSGPARM(CTL.Item_Code);

// PAR.Error Status = CND.yes
PAR.Error_Status = 'Y';

ENDIF;

//?Check that Item is Finished good.
CASE;

// IF WRK.Item Type Code is Not Finished Good
IF WRK.Item_Type_Code <> 'FG';

// Send information message - 'Item is not Finished Good'
MESSAGE(USR1956 *INFO);

ENDIF;

ENDIF;

//?Ship Date
CASE;

// IF CTL.Requested Ship Date is not entered
IF CTL.Requested_Ship_Date = *ZERO;

// Send error message - 'Ship Date must be entered if Order Number is Blank.'
ERROR(USR1435);
MSGPARM(CTL.Requested_Ship_Date);

// PAR.Error Status = CND.yes
PAR.Error_Status = 'Y';

ENDIF;

//?Quantity required
CASE;

// IF CTL.Quantity Allocated is Equal to zero
IF CTL.Quantity_Scheduled = *ZERO;

// Send error message - 'Quantity must be entered.'
ERROR(USR0578);
MSGPARM(CTL.Quantity_Scheduled);

// PAR.Error Status = CND.yes
PAR.Error_Status = 'Y';

ENDIF;

//?Price Method code
CASE;

// IF CTL.Price Method Code is Blank
IF CTL.Price_Method_Code = *BLANK;

// CTL.Price Method Code = WRK.Price Method Code
CTL.Price_Method_Code = WRK.Price_Method_Code;

ENDIF;

EXECUTE FUNCTION(RTV Prc Mth Typ by Sys RT) TYPE(RTVOBJ) FILE(PDIHREP)          AC1365458;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Price_Method_Code);
PARAMETER(WRK.Price_Method_Type);
PARAMETER('O');
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Check return
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// OR CTL.Price Method Code is Deviated
OR CTL.Price_Method_Code = 'DEV';

//?Check return
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Price Method invalid'
ERROR(USR1957);
MSGPARM(CTL.Price_Method_Code);

// PAR.Error Status = CND.yes
PAR.Error_Status = 'Y';

ENDIF;

EXECUTE FUNCTION(RTV Comod. Markt. Code RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1263958;
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Country_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Check return
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Check return
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Error Status = CND.yes
PAR.Error_Status = 'Y';

ENDIF;

//?Commodity Market Code
CASE;

// IF WRK.Price Method Type is Market or Formula
IF WRK.Price_Method_Type = 'F'/'K';

// AND CTL.Commodity Market Code is Not Entered
AND CTL.Commodity_Market_Code = *BLANK;

// CTL.Commodity Market Code = WRK.Commodity Market Code
CTL.Commodity_Market_Code = WRK.Commodity_Market_Code;

ENDIF;

//?Retrieve Contract Defaults
CASE;

// IF CTL.Contract Number is Entered
IF CTL.Contract_Number > *ZERO;

EXECUTE FUNCTION(RTV Contract Defaults  RT) TYPE(RTVOBJ) FILE(OPCIREP)          AC1277302;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Item_Code);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(CTL.Contract_Number);
PARAMETER(CTL.Price_Overage_Override);
PARAMETER(CTL.Market_Pricing_Date);
PARAMETER(CTL.Date_Method_Code);
PARAMETER(CTL.Price_Method_Code);
PARAMETER(CTL.Commodity_Market_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Check return
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Check return
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Error Status = CND.yes
PAR.Error_Status = 'Y';

ENDIF;

ENDIF;

// WRK.Contract Number = CTL.Contract Number
WRK.Contract_Number = CTL.Contract_Number;

EXECUTE FUNCTION(EDT Order Detail Edits IF) TYPE(EXCINTFUN)                     AC1425282;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);
PARAMETER(CTL.Item_Code);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Market_Pricing_Date);
PARAMETER(CTL.Commodity_Market_Code);
PARAMETER(CTL.Date_Method_Code);
PARAMETER(CTL.Price_Method_Code);
PARAMETER(CTL.Price_Overage_Override);
PARAMETER(WRK.Contract_Number);
PARAMETER(CTL.Requested_Ship_Date);
PARAMETER(CTL.Quantity_Scheduled);
PARAMETER(PAR.Cntrt_Enter_no_QT_Price);
PARAMETER(PAR.Cntrt_#_does_not_Exit);
PARAMETER(PAR.Qty_ordered_Contract);
PARAMETER(PAR.Contract_Expired);
PARAMETER(PAR.Price_Override_Required);
PARAMETER(PAR.Price_Method_QT_Cntrt_0);
PARAMETER(PAR.Prc_Code_FRM_or_MKT);
PARAMETER(PAR.Mkt_Pricing_Date_not_0);
PARAMETER(PAR.Mkt_Meth_and_Date_both);
PARAMETER(PAR.Price_Override_Req_EXT);
PARAMETER(PAR.Contract_Exists_for_Item);
PARAMETER(PAR.Price_Override_not_Allowd);
PARAMETER(CTL.Requested_Ship_Date);
PARAMETER(WRK.Price_Method_Type);
{
 //?Execute internal function

 // PAR.Contract Exists for Item = CND.blank
 PAR.Contract_Exists_for_Item = *BLANK;

 // PAR.Cntrt Enter no QT Price = CND.blank
 PAR.Cntrt_Enter_no_QT_Price = *BLANK;

 // PAR.Cntrt.# does not Exit = CND.blank
 PAR.Cntrt_#_does_not_Exit = *BLANK;

 // PAR.Qty ordered > Contract = CND.blank
 PAR.Qty_ordered_Contract = *BLANK;

 // PAR.Contract Expired = CND.blank
 PAR.Contract_Expired = *BLANK;

 // PAR.Price Override Required = CND.blank
 PAR.Price_Override_Required = *BLANK;

 // PAR.Price Method QT & Cntrt 0 = CND.blank
 PAR.Price_Method_QT_Cntrt_0 = *BLANK;

 // PAR.Prc Code FRM or MKT = CND.blank
 PAR.Prc_Code_FRM_or_MKT = *BLANK;

 // PAR.Mkt Pricing Date not 0 = CND.blank
 PAR.Mkt_Pricing_Date_not_0 = *BLANK;

 // PAR.Mkt Meth. and Date both = CND.blank
 PAR.Mkt_Meth_and_Date_both = *BLANK;

 // PAR.Price Override Req. EXT = CND.blank
 PAR.Price_Override_Req_EXT = *BLANK;

 // PAR.Price Override not Allowd = CND.blank
 PAR.Price_Override_not_Allowd = *BLANK;

 //?Get Price Method Type
 EXECUTE FUNCTION(RTV Prc Mth Typ by Sys RT) TYPE(RTVOBJ) FILE(PDIHREP)          AC1365458;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Price_Method_Code);
 PARAMETER(PAR.Price_Method_Type);
 PARAMETER('O');
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Check if Contract exists for Item
 //?A Contract Exists for this customer and item.
 CASE;

 // IF PAR.Contract Number is Zero
 IF PAR.Contract_Number = *ZERO;

 EXECUTE FUNCTION(RTV Edt for Existing   RT) TYPE(RTVOBJ) FILE(OPCIREP)          AC1291147;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Order_Date);
 PARAMETER(PAR.Contract_Number);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  CASE;

  // IF PAR.Effective Date GE DB1.Effective Date
  IF PAR.Effective_Date >= DB1.Effective_Date;

  // AND PAR.Effective Date LE DB1.End Date Effective
  AND PAR.Effective_Date <= DB1.End_Date_Effective;

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

  ENDIF;

  // PAR.Contract Number = DB1.Contract Number
  PAR.Contract_Number = DB1.Contract_Number;

 }

 // WRK.Contract Number = PAR.Contract Number
 WRK.Contract_Number = PAR.Contract_Number;

 CASE;

 // IF PGM.*Return code is *Record already exists
 IF PGM.*Return_code = 'Y2U0003';

 // PAR.Contract Exists for Item = CND.yes
 PAR.Contract_Exists_for_Item = 'Y';

 ENDIF;

 ENDIF;

 //?Edit Contract Number
 CASE;

 // IF PAR.Contract Number is Entered
 IF PAR.Contract_Number > *ZERO;

 EXECUTE FUNCTION(RTV Val. Contract #    RT) TYPE(RTVOBJ) FILE(OPCIREP)          AC1267683;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Effective_Date);
 PARAMETER(PAR.End_Date_Effective);
 PARAMETER(PAR.Maximum_Quantity);
 PARAMETER(PAR.Quantity_Sold);
 PARAMETER(PAR.Contract_Number);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Set Contract Error Parms
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PAR.Cntrt.# does not Exit = CND.yes
 PAR.Cntrt_#_does_not_Exit = 'Y';

 //?Set Contract Error Parms
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Total Quantity Ordered = PAR.Quantity Sold + PAR.Quantity Ordered
 WRK.Total_Quantity_Ordered = PAR.Quantity_Sold + PAR.Quantity_Ordered;

 CASE;

 // IF WRK.Total Quantity Ordered GT PAR.Maximum Quantity
 IF WRK.Total_Quantity_Ordered > PAR.Maximum_Quantity;

 // PAR.Qty ordered > Contract = CND.yes
 PAR.Qty_ordered_Contract = 'Y';

 ENDIF;

 CASE;

 // IF PAR.End Date Effective LE PAR.Order Date
 IF PAR.End_Date_Effective <= PAR.Order_Date;

 // PAR.Contract Expired = CND.yes
 PAR.Contract_Expired = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

 //?Validity Checking
 //?Price Override and Manual Price Method
 CASE;

 // IF PAR.Price Method Type is Manual Pricing
 IF PAR.Price_Method_Type = 'M';

 // AND PAR.Price Overage Override is Equal zero
 AND PAR.Price_Overage_Override = *ZERO;

 // PAR.Price Override Required = CND.yes
 PAR.Price_Override_Required = 'Y';

 ENDIF;

 //?Price override and EXT price method
 CASE;

 // IF PAR.Price Method Type is Extended Pricing
 IF PAR.Price_Method_Type = 'X';

 // AND PAR.Price Overage Override is Equal zero
 AND PAR.Price_Overage_Override = *ZERO;

 // PAR.Price Override Req. EXT = CND.yes
 PAR.Price_Override_Req_EXT = 'Y';

 ENDIF;

 //?FRM / MKT Checks
 CASE;

 // IF PAR.Price Method Type is Market or Formula
 IF PAR.Price_Method_Type = 'F'/'K';

 //?Market Code Must be entered
 CASE;

 // IF PAR.Commodity Market Code is Not Entered
 IF PAR.Commodity_Market_Code = *BLANK;

 // PAR.Prc Code FRM or MKT = CND.yes
 PAR.Prc_Code_FRM_or_MKT = 'Y';

 ENDIF;

 //?Market Price Date field not zero
 CASE;

 // IF PAR.Market Pricing Date is NE Zero
 IF PAR.Market_Pricing_Date <> *ZERO;

 // PAR.Mkt Pricing Date not 0 = CND.yes
 PAR.Mkt_Pricing_Date_not_0 = 'Y';

 ENDIF;

 CASE;

 // IF PAR.Price Overage Override is Not Zeros
 IF PAR.Price_Overage_Override <> *ZERO;

 // PAR.Price Override not Allowd = CND.yes
 PAR.Price_Override_not_Allowd = 'Y';

 ENDIF;

 ENDIF;

 //?MKT date Method entered and Mkt Price Date both entered.
 CASE;

 // IF PAR.Date Method Code is Entered
 IF PAR.Date_Method_Code <> *BLANK;

 // AND PAR.Market Pricing Date is NE Zero
 AND PAR.Market_Pricing_Date <> *ZERO;

 // PAR.Mkt Meth. and Date both = CND.yes
 PAR.Mkt_Meth_and_Date_both = 'Y';

 ENDIF;

}


//?Contract exists for this item
CASE;

// IF PAR.Contract Exists for Item is yes
IF PAR.Contract_Exists_for_Item = 'Y';

// Send information message - 'Item &1 has Contract number &2 in effect.'
MESSAGE(USR1851 *INFO);
MSGPARM(CTL.Item_Code);
MSGPARM(WRK.Contract_Number);

ENDIF;

//?Contract not found
CASE;

// IF PAR.Cntrt.# does not Exit is yes
IF PAR.Cntrt_#_does_not_Exit = 'Y';

// Send error message - 'OPP Item Contract not found in contract file.'
ERROR(USR1803);
MSGPARM(CTL.Contract_Number);

// PAR.Error Status = CND.yes
PAR.Error_Status = 'Y';

ENDIF;

//?Quantity ordered exceeds contact quantity available
CASE;

// IF PAR.Qty ordered > Contract is yes
IF PAR.Qty_ordered_Contract = 'Y';

// Send information message - 'Quantity Ordered > Maximum quantity on Contract &2.'
MESSAGE(USR1806 *INFO);
MSGPARM(CTL.Quantity_Scheduled);
MSGPARM(WRK.Contract_Number);

ENDIF;

//?Contract has passed expiration date
CASE;

// IF PAR.Contract Expired is yes
IF PAR.Contract_Expired = 'Y';

// AND CTL.Contract Number is Entered
AND CTL.Contract_Number > *ZERO;

// Send information message - 'Contract Effective date has expired for this item.'
MESSAGE(USR1810 *INFO);
MSGPARM(CTL.Contract_Number);

ENDIF;

//?Date Method Code
CASE;

// IF CTL.Date Method Code NE WRK.BLANK
IF CTL.Date_Method_Code <> WRK.BLANK;

EXECUTE FUNCTION(VAL Date Method Exists RT) TYPE(RTVOBJ) FILE(PDIPREP)          AC1365305;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Date_Method_Code);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER('O');
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Date Method is invalid.'
ERROR(USR2161);
MSGPARM(CTL.Date_Method_Code);

ENDIF;

ENDIF;

//?Price Override required for MAN Price Code
CASE;

// IF PAR.Price Override Required is yes
IF PAR.Price_Override_Required = 'Y';

// Send error message - 'Price Override Req. W/MAN pricing method.'
ERROR(USR1772);
MSGPARM(CTL.Price_Method_Code);
MSGPARM(CTL.Price_Overage_Override);

// PAR.Error Status = CND.yes
PAR.Error_Status = 'Y';

ENDIF;

//?Price Override required when Price Method is EXT
CASE;

// IF PAR.Price Override Req. EXT is yes
IF PAR.Price_Override_Req_EXT = 'Y';

// Send error message - 'Price Override Req. w/EXT price method.'
ERROR(USR1774);
MSGPARM(CTL.Price_Method_Code);
MSGPARM(CTL.Price_Overage_Override);

// PAR.Error Status = CND.yes
PAR.Error_Status = 'Y';

ENDIF;

//?Price Override not allowed for FRM or MKT
CASE;

// IF PAR.Price Override not Allowd is yes
IF PAR.Price_Override_not_Allowd = 'Y';

// Send error message - 'Price Override not allowed with Price Method chosen'
ERROR(USR1807);
MSGPARM(CTL.Price_Overage_Override);

ENDIF;

//?Market code/prc date must be entered with FRM or MKT price code
CASE;

// IF PAR.Prc Code FRM or MKT is yes
IF PAR.Prc_Code_FRM_or_MKT = 'Y';

// Send error message - 'Market Code must be entered for Price method chosen.'
ERROR(USR1750);
MSGPARM(CTL.Commodity_Market_Code);

// PAR.Error Status = CND.yes
PAR.Error_Status = 'Y';

ENDIF;

//?Date method/Pricing Date
CASE;

// IF PAR.Mkt Meth. and Date both is yes
IF PAR.Mkt_Meth_and_Date_both = 'Y';

CASE;

// IF CTL.Date Method Code is Day Prior Ship
IF CTL.Date_Method_Code = 'DPS';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Date Method and Market Price Date or Range are not allowed.'
ERROR(USR2097);
MSGPARM(CTL.Market_Pricing_Date);
MSGPARM(CTL.Date_Method_Code);

ENDIF;

//?Date method/Pricing Date
// IF CTL.Date Method Code NE WRK.BLANK
IF CTL.Date_Method_Code <> WRK.BLANK;

//?Date method/Pricing Date
// IF PAR.Mkt Pricing Date not 0 is blank
IF PAR.Mkt_Pricing_Date_not_0 = *BLANK;

// AND WRK.Price Method Type is Market or Formula
AND WRK.Price_Method_Type = 'F'/'K';

// Send error message - 'Market Price Date required.'
ERROR(USR1749);
MSGPARM(CTL.Market_Pricing_Date);

ENDIF;

//?Reset other price fields when price code is a Manual or Extended
CASE;

// IF WRK.Price Method Type is Manual Pricing
IF WRK.Price_Method_Type = 'M';

// OR WRK.Price Method Type is Extended Pricing
OR WRK.Price_Method_Type = 'X';

// CTL.Date Method Code = CND.Not Entered
CTL.Date_Method_Code = *BLANK;

// CTL.Market Pricing Date = CND.EQ Zero
CTL.Market_Pricing_Date = *ZERO;

ENDIF;

//?Process if no errors
CASE;

// IF PAR.Error Status is yes
IF PAR.Error_Status = 'Y';

//?Process if no errors
// IF *OTHERWISE
IF *OTHERWISE;

// Call program CLC Price Item         XF.
CALL PROGRAM(CLC Price Item         XF) ('PDG9XFR');
PARAMETER(PAR.Company_Number);
PARAMETER(CTL.Price_Method_Code);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(*ZERO);
PARAMETER(**);
PARAMETER(CTL.OD_Ceiling_Price);
PARAMETER(CTL.OD_Market_Begin_Date);
PARAMETER(CTL.OD_Market_Ending_Date);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Requested_Delivery_Date);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);
PARAMETER(PAR.Error_Return);
PARAMETER('S');

CASE;

// IF PAR.Error Return is All Entered Values
IF PAR.Error_Return = 'CFR'/'CID'/'CIF'/'CIO'/'QPE'/'EXT'/'XPE'/'FPE'/'IOM'/'IOV'/'MPE'            +
/'KPE'/'MKT'/'MSC'/'OVR'/'STR'/'SUB'/'TRC'/'WPA'/'RWB'/'ITERR'/'CRD'/'MSL'/'GAT';

// Send error message - 'Error in Pricing Routine.  Review pricing codes.'
ERROR(USR1850);
MSGPARM(CTL.Market_Pricing_Date);
MSGPARM(CTL.Date_Method_Code);
MSGPARM(CTL.Price_Method_Code);
MSGPARM(CTL.Commodity_Market_Code);
MSGPARM(PAR.Error_Return);

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Extended Amount = CTL.Unit Price Ordered U/M * CTL.Quantity Scheduled *Round
CTL.Extended_Amount = CTL.Unit_Price_Ordered_U_M * CTL.Quantity_Scheduled 'H';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reset Parms
DO;

// PAR.USR Ship To Customer = CTL.Ship To Customer
PAR.USR_Ship_To_Customer = CTL.Ship_To_Customer;

// PAR.Item Code = CTL.Item Code
PAR.Item_Code = CTL.Item_Code;

// PAR.Requested Ship Date = CTL.Requested Ship Date
PAR.Requested_Ship_Date = CTL.Requested_Ship_Date;

// PAR.Quantity Allocated = CTL.Quantity Allocated
PAR.Quantity_Scheduled = CTL.Quantity_Scheduled;

// PAR.Price Overage Override = CTL.Price Overage Override
PAR.Price_Overage_Override = CTL.Price_Overage_Override;

// PAR.Price Method Code = CTL.Price Method Code
PAR.Price_Method_Code = CTL.Price_Method_Code;

// PAR.Date Method Code = CTL.Date Method Code
PAR.Date_Method_Code = CTL.Date_Method_Code;

// PAR.Contract Number = CTL.Contract Number
PAR.Contract_Number = CTL.Contract_Number;

// PAR.Market Pricing Date = CTL.Market Pricing Date
PAR.Market_Pricing_Date = CTL.Market_Pricing_Date;

// PAR.Commodity Market Code = CTL.Commodity Market Code
PAR.Commodity_Market_Code = CTL.Commodity_Market_Code;

ENDDO;

ENDIF;

ENDIF;

// IF CTL.Quantity Allocated NE PAR.Quantity Allocated
IF CTL.Quantity_Scheduled <> PAR.Quantity_Scheduled;

// CTL.Extended Amount = CTL.Unit Price Ordered U/M * CTL.Quantity Scheduled *Round
CTL.Extended_Amount = CTL.Unit_Price_Ordered_U_M * CTL.Quantity_Scheduled 'H';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PAR.Quantity Allocated = CTL.Quantity Allocated
PAR.Quantity_Scheduled = CTL.Quantity_Scheduled;

ENDIF;

//?USER: Validate subfile record fields

EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(PDIJREP)          AC1251625;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Price_Method_Componant);
PARAMETER(RCD.Price_Componant_Desc);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG PD Shp Dtl Prc Wrk CH) TYPE(CHGOBJ) FILE(PDIMCPP)          AC1313075;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Price_Method_Componant);
PARAMETER(RCD.Price_Detail_Sequence);
PARAMETER(RCD.Componant_Price);
PARAMETER(RCD.PD_Status);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);

//?USER: Extra processing after DBF update

// Call program CLC Pricing using File XF.
CALL PROGRAM(CLC Pricing using File XF) ('PDOJXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);
PARAMETER(CTL.Price_Detail_Sequence);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Price_Method_Code);
PARAMETER(CTL.U_M_Ordered);
PARAMETER(CTL.Unit_Price);
PARAMETER(WRK.Unit_Price_Credit);
PARAMETER(CTL.Unit_Price_Ordered_U_M);
PARAMETER(**);

// CTL.Extended Amount = CTL.Unit Price Ordered U/M * CTL.Quantity Scheduled *Round
CTL.Extended_Amount = CTL.Unit_Price_Ordered_U_M * CTL.Quantity_Scheduled 'H';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?USER: Process command keys

//?Formula Details
CASE;

// IF CTL.*CMD key is *Formula Details
IF CTL.*CMD_key = '22';

EXECUTE FUNCTION(RTV Price Meth Type    RT) TYPE(RTVOBJ) FILE(PDIHREP)          AC1268519;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Price_Method_Code);
PARAMETER(WRK.Price_Method_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.Price Method Type is Formula Pricing
IF WRK.Price_Method_Type = 'F';

// Call program RTV Ship Pricing Totl  XF.
CALL PROGRAM(RTV Ship Pricing Totl  XF) ('PDOMXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);
PARAMETER(PAR.USR_Total_Consumed_Items);
PARAMETER(PAR.USR_Muscle_Yield_Amt);
PARAMETER(PAR.Total_Credit_Dollars);
PARAMETER(PAR.USR_Formula_Overages);
PARAMETER(PAR.USR_Differential);
PARAMETER(PAR.Starting_Product_Price);
PARAMETER(PAR.Credit_Value);
PARAMETER(PAR.Muscle_Yield_Price);
PARAMETER(PAR.Standard_Overage_Underage);
PARAMETER(PAR.USR_Cust_Item_Differentl);
PARAMETER(**);

// Call program Zzz Price Simul Dtl WK EF.
CALL PROGRAM(Zzz Price Simul Dtl WK EF) ('PDOLEFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Market_Pricing_Date);
PARAMETER(CTL.Date_Method_Code);
PARAMETER(CTL.Price_Method_Code);
PARAMETER(CTL.U_M_Ordered);
PARAMETER(CTL.Quantity_Scheduled);
PARAMETER(CTL.Unit_Price);
PARAMETER(WRK.Unit_Price_Credit);
PARAMETER(CTL.Unit_Price_Ordered_U_M);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Requested_Ship_Date);
PARAMETER(CTL.Company_Name);
PARAMETER(PAR.USR_Total_Consumed_Items);
PARAMETER(PAR.USR_Muscle_Yield_Amt);
PARAMETER(PAR.Total_Credit_Dollars);
PARAMETER(PAR.USR_Formula_Overages);
PARAMETER(PAR.USR_Differential);
PARAMETER(PAR.Starting_Product_Price);
PARAMETER(PAR.Credit_Value);
PARAMETER(PAR.Muscle_Yield_Price);
PARAMETER(PAR.Standard_Overage_Underage);
PARAMETER(PAR.USR_Cust_Item_Differentl);

// Call program CLC Pricing using File XF.
CALL PROGRAM(CLC Pricing using File XF) ('PDOJXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);
PARAMETER(CTL.Price_Detail_Sequence);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Price_Method_Code);
PARAMETER(CTL.U_M_Ordered);
PARAMETER(CTL.Unit_Price);
PARAMETER(WRK.Unit_Price_Credit);
PARAMETER(CTL.Unit_Price_Ordered_U_M);
PARAMETER(**);

// CTL.Extended Amount = CTL.Unit Price Ordered U/M * CTL.Quantity Scheduled *Round
CTL.Extended_Amount = CTL.Unit_Price_Ordered_U_M * CTL.Quantity_Scheduled 'H';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

//?Cmd key not allowed except for Formula pricing
// Send error message - 'Function not available for this entry'
ERROR(USR1942);

ENDIF;

ENDIF;

