// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBX1XFR
// ?Date: 14.08.2025 Time: 03:49:43
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modification History
DO;

//? 5/04/2018 JBB E30128 - Don't send TMSORDMSG on Sunday 4:00 to 7:30
//?   Adam Gotsche has requested that the message that is sent from
//?   the job TMSORDMSG on the job scheduler not send messages during
//?   the maintenance period on Sundays between 4:00 AM and 7:30 AM.
//?   The following Company Values records are used:
//?      TMSORDMSDY - This is the day of the week to check.  Currently
//?                   set to 1 for Sunday.
//?      TMSORDMSFT - This is the From Time. Currently set to 4
//?      TMSORDMSTT - This is the To Time. Currently set to 7.3
ENDDO;

//? 5/04/2018 JBB E30128 - Don't send TMSORDMSG on Sunday 4:00 to 7:30
// LCL.Day of Week (SYN) USR = JOB.*Job date *DAY OF WEEK
LCL.Day_of_Week_SYN_USR = DATEDTLS(JOB.*Job_date 'DW' 1111111 'NONE' 'N' 1);

//?If this is Sunday, do not process between 4:00am and 7:30am
CASE;

// IF LCL.Day of Week (SYN) USR is Sunday
IF LCL.Day_of_Week_SYN_USR = 7;

//?Retrieve From Time from the Company Values for Guymon
EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
PARAMETER(360);
PARAMETER('TMSORDMSFT');
PARAMETER(LCL.Time_From);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Retrieve To Time from the Company Values for Guymon
EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
PARAMETER(360);
PARAMETER('TMSORDMSTT');
PARAMETER(LCL.Time_To);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If job date and time between From Time and To Time, exit program
CASE;

// IF JOB.*Job time GT LCL.Time From
IF JOB.*Job_time > LCL.Time_From;

// AND JOB.*Job time LT LCL.Time To
AND JOB.*Job_time < LCL.Time_To;

RETURN;

ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv Last DtaCollectDt RT) TYPE(RTVOBJ) FILE(PBATCPP)           AC2125803;
PARAMETER(LCL.AS_Last_Update_Date);
PARAMETER(LCL.AS_Last_Update_Time);
{
 //?USER: Process Data record

 //?read oldest NOT Processed Order Trigger Record
 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(Rtv Last Data CllctnCd RT) TYPE(RTVOBJ) FILE(PDMXCPP)          AC2125806;
PARAMETER(360);
PARAMETER('TMSORD');
PARAMETER(LCL.AS_Hours_Between_Cllctns);
PARAMETER(LCL.AS_Minutes_Btwn_Cllctns);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.AS Last Update Date EQ JOB.*Job date
IF LCL.AS_Last_Update_Date = JOB.*Job_date;

// AND LCL.AS Last Update Time GE JOB.*Job time
AND LCL.AS_Last_Update_Time >= JOB.*Job_time;

QUIT;

ENDIF;

//?Calc the elapsed time and send the msg
CASE;

// IF LCL.AS Last Update Date NE WRK.ZERO
IF LCL.AS_Last_Update_Date <> WRK.ZERO;

// AND LCL.AS Hours Between Cllctns NE WRK.ZERO
AND ( LCL.AS_Hours_Between_Cllctns <> WRK.ZERO;

// OR LCL.AS Minutes Btwn Cllctns NE WRK.ZERO
OR LCL.AS_Minutes_Btwn_Cllctns <> WRK.ZERO );

//?Calculate the hour/minutes between the last update and now.
//?Add the elapsed hhmm to the ((elapsed days * 24 hrs) * 100))
//?  ( Do the * 100 to get the days into a hhhmm  5,0 format)
// WRK.Number of Days = JOB.*Job date - LCL.AS Last Update Date *DAYS
WRK.Number_of_Days = DURATION(JOB.*Job_date LCL.AS_Last_Update_Date 'DY' 1111111 'NONE'            +
'N' 1);

CASE;

// IF JOB.*Job time LE LCL.AS Last Update Time
IF JOB.*Job_time <= LCL.AS_Last_Update_Time;

// LCL.Job Time            14992 = JOB.*Job time + CON.240000
LCL.Job_Time_1 = JOB.*Job_time + 240000;

// WRK.Hours/Minutes         USR = LCL.Job Time            14992 - LCL.AS Last Update Time *HHMM
WRK.Hours_Minutes_USR = TIMELAPSED(LCL.Job_Time_1 LCL.AS_Last_Update_Time 'HM');

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Hours/Minutes         USR = JOB.*Job time - LCL.AS Last Update Time *HHMM
WRK.Hours_Minutes_USR = TIMELAPSED(JOB.*Job_time LCL.AS_Last_Update_Time 'HM');

ENDIF;

//?(This stmt doesnt add the minutes correctly, but that's ok! we just want
//?We just want to know how much time has lapsed since the last upd.)
// WRK.Hours/Minutes Elapsed USR = WRK.Hours/Minutes         USR + WRK.Days Elapsed in Hours USR
WRK.Hours_Minutes_Elapsed_USR = WRK.Hours_Minutes_USR + WRK.Days_Elapsed_in_Hours_USR;

//?Put the db1 hour/minutes into 1 field--  5,0 hhhmm
// WRK.Time Between Collctns USR = LCL.AS Hours Between Cllctns * CON.100 *
WRK.Time_Between_Collctns_USR = LCL.AS_Hours_Between_Cllctns * 100;

// WRK.Time Between Collctns USR = WRK.Time Between Collctns USR + LCL.AS Minutes Btwn Cllctns
WRK.Time_Between_Collctns_USR = WRK.Time_Between_Collctns_USR                                      +
+ LCL.AS_Minutes_Btwn_Cllctns;

//?Send Msg if hours/minutes between last update and now is > db1 hrs, min
CASE;

// IF WRK.Hours/Minutes Elapsed USR GT WRK.Time Between Collctns USR
IF WRK.Hours_Minutes_Elapsed_USR > WRK.Time_Between_Collctns_USR;

EXECUTE FUNCTION(RTV Alpha Value W/O Co RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1754635;
PARAMETER('TMSORD');
PARAMETER(LCL.Email_Address);
{
 //?USER: Initialize routine

 // PAR.System Value Alpha = CON.*BLANK
 PAR.System_Value_Alpha = *BLANK;

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// LCL.Date Out (6,0) USR = LCL.AS Last Update Date
LCL.Date_Out_60_USR = LCL.AS_Last_Update_Date;

// LCL.Date Out (6,0) USR = LCL.Date Out (6,0) USR * CON.100.0001 *
LCL.Date_Out_60_USR = LCL.Date_Out_60_USR * 100.0001;

// LCL.Date (Char-6) USR = CVTVAR(LCL.Date Out (6,0) USR)
LCL.Date_Char_6_USR = CVTVAR(LCL.Date_Out_60_USR);

// LCL.Time  6A             USR = CVTVAR(LCL.AS Last Update Time)
LCL.Time_6A_USR = CVTVAR(LCL.AS_Last_Update_Time);

// LCL.Text USR 15 = CONCAT(LCL.Date (Char-6) USR,LCL.Time  6A             USR,CON.1)
LCL.Text_USR_15 = LCL.Date_Char_6_USR + LCL.Time_6A_USR (1);

// LCL.Error Reason Descript 7 = CONCAT(CON.TMS Order Trigger not,CON.processed since,CON.1)
LCL.Error_Reason_Descript_7 = 'TMS Order Trigger not' + 'processed since' (1);

// LCL.Pager Msg 256 USR = CONCAT(LCL.Error Reason Descript 7,LCL.Text USR 15,CON.2)
LCL.Pager_Msg_256_USR = LCL.Error_Reason_Descript_7 + LCL.Text_USR_15 (2);

// Call program CLP Exe ESNDMAIL Cmd   UP.
CALL PROGRAM(CLP Exe ESNDMAIL Cmd   UP) ('PPW6UPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(LCL.Email_Address);
PARAMETER('TMS Order Trigger Process');
PARAMETER(LCL.Pager_Msg_256_USR);

ENDIF;

ENDIF;

