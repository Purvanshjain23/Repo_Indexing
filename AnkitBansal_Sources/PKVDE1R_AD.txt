// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKVDE1R
// ?Date: 14.08.2025 Time: 02:53:04
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?MODIFICATIONS
//?H16853 ISE 11/09/2020 - Recompiled due to change in Buy Order Number
EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(LCL.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


//?6/14/2007 slm  Truck Movement Gate Project FT379
//?Get the Company and the company value for the HPETRKMVW
//?IF the value is Y then allow weight to be zero
//?IF the value is N or blank weight is require
//?Get the HPETRKMVW - Allow the entry of zero on the weight
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(LCL.CC_Company_Number);
PARAMETER('HPETRKMVW');
PARAMETER(LCL.Truck_Mov#_Wgt_allow_Zero);

//?USER: Initialize detail screen (existing record)

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Name_USR);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


EXECUTE FUNCTION(Name Producer DRV) TYPE(DRVFLD)                                AB1110026;
PARAMETER(DTL.Name_Producer_DRV);
PARAMETER(DTL.PD_Producer_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.Name_Producer_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Name Producer Loc DRV) TYPE(DRVFLD)                            AB1110027;
PARAMETER(DTL.Name_Producer_Loc_DRV);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PL_Location_Code);
 PARAMETER(PAR.Name_Producer_Loc_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// DTL.Text 10 2 USR = Condition name of DTL.BOLW Weight Type
DTL.Text_10_2_USR = RTVCND(DTL.BOLW_Weight_Type);

// DTL.Text 10 1 USR = Condition name of DTL.BOLW Spread Status
DTL.Text_10_1_USR = RTVCND(DTL.BOLW_Spread_Status);

//?USER: Validate detail screen fields

CASE;

// IF LCL.Truck Mov# Wgt allow Zero is Yes
IF LCL.Truck_Mov#_Wgt_allow_Zero = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.BOLW Scale Weight is Zeros
IF DTL.BOLW_Scale_Weight = *ZERO;

// Send error message - 'Weight is Required'
ERROR(PRK0362);
MSGPARM(DTL.BOLW_Scale_Weight);

ENDIF;

ENDIF;

//?CALC: Detail screen function fields

EXECUTE FUNCTION(Name Producer DRV) TYPE(DRVFLD)                                AB1110026;
PARAMETER(DTL.Name_Producer_DRV);
PARAMETER(DTL.PD_Producer_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.Name_Producer_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Name Producer Loc DRV) TYPE(DRVFLD)                            AB1110027;
PARAMETER(DTL.Name_Producer_Loc_DRV);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PL_Location_Code);
 PARAMETER(PAR.Name_Producer_Loc_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Buy Order Load Wt CH) TYPE(CHGOBJ) FILE(PKEJCPP)           AB1213883;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.BOLW_Movement_Number);
PARAMETER(DTL.BOLW_Weight_Type);
PARAMETER(DTL.BOLW_Scale_Weight);
PARAMETER(DTL.BOLW_Scale_Weight_Date);
PARAMETER(DTL.BOLW_Scale_Weight_Time);
PARAMETER(DTL.BOLW_Spread_Status);
PARAMETER(DTL.BOLW_Unused_Sts_1);
PARAMETER(DTL.BOLW_Unused_Sts_2);
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


