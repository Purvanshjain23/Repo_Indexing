// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PUQ3DFR
// ?Date: 14.08.2025 Time: 03:51:08
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(NLL.Company_Number);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(NLL.Allow_Multi_Company);
PARAMETER(NLL.Default_Printer);
PARAMETER(NLL.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PGM.*Scan limit = CND.999999
PGM.*Scan_limit = 999999;

//?USER: Initialize subfile record from DBF record

//?Select By City.
CASE;

// IF CTL.City is NE Blanks
IF CTL.City <> *BLANK;

CASE;

// IF CTL.City NE RCD.City
IF CTL.City <> RCD.City;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Select By State Code.
CASE;

// IF CTL.State Code is State code not Blanks
IF CTL.State_Code <> *BLANK;

CASE;

// IF CTL.State Code NE RCD.State Code
IF CTL.State_Code <> RCD.State_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Record Selected, Continue Processing.
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(Rtv Buying Group Info RT) TYPE(RTVOBJ) FILE(PUAAREP)           AC2184469;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Buying_Group);
PARAMETER(RCD.Buying_Group_Opt_In_Out);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Select By Buying Group.
CASE;

// IF CTL.Buying Group is Entered
IF CTL.Buying_Group <> *BLANK;

CASE;

// IF CTL.Buying Group NE RCD.Buying Group
IF CTL.Buying_Group <> RCD.Buying_Group;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Select By Buying Group Opt In/Out.
CASE;

// IF NOT CTL.Buying Group Opt In/Out is Not Entered
IF ! CTL.Buying_Group_Opt_In_Out = *BLANK;

CASE;

// IF CTL.Buying Group Opt In/Out NE RCD.Buying Group Opt In/Out
IF CTL.Buying_Group_Opt_In_Out <> RCD.Buying_Group_Opt_In_Out;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Toggle Buying Group Opt In/Out Status.
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF PAR.Buying Group Opt In/Out is Not Entered
IF PAR.Buying_Group_Opt_In_Out = *BLANK;

//?Display All.
// IF *OTHERWISE
IF *OTHERWISE;

//?Toggle By Opt 'In' Status.
CASE;

// IF PAR.Buying Group Opt In/Out is In
IF PAR.Buying_Group_Opt_In_Out = 'I';

CASE;

// IF PAR.Buying Group Opt In/Out EQ RCD.Buying Group Opt In/Out
IF PAR.Buying_Group_Opt_In_Out = RCD.Buying_Group_Opt_In_Out;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Toggle By Opt 'Out' Status.
CASE;

// IF PAR.Buying Group Opt In/Out is Out
IF PAR.Buying_Group_Opt_In_Out = 'O';

CASE;

// IF PAR.Buying Group Opt In/Out EQ RCD.Buying Group Opt In/Out
IF PAR.Buying_Group_Opt_In_Out = RCD.Buying_Group_Opt_In_Out;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?City Code Control Pos Change Reload Subfile.
CASE;

// IF CTL.City NE LCL.City
IF CTL.City <> LCL.City;

// LCL.City = CTL.City
LCL.City = CTL.City;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?State Code Control Pos Change Reload Subfile.
CASE;

// IF CTL.State Code NE LCL.State Code
IF CTL.State_Code <> LCL.State_Code;

// LCL.State Code = CTL.State Code
LCL.State_Code = CTL.State_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Buying Group Control Pos Change Reload Subfile.
CASE;

// IF CTL.Buying Group NE LCL.Buying Group
IF CTL.Buying_Group <> LCL.Buying_Group;

// LCL.Buying Group = CTL.Buying Group
LCL.Buying_Group = CTL.Buying_Group;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Buying Group Opt In/Out Control Pos Change Reload Subfile.
CASE;

// IF CTL.Buying Group Opt In/Out NE LCL.Buying Group Opt In/Out
IF CTL.Buying_Group_Opt_In_Out <> LCL.Buying_Group_Opt_In_Out;

// LCL.Buying Group Opt In/Out = CTL.Buying Group Opt In/Out
LCL.Buying_Group_Opt_In_Out = CTL.Buying_Group_Opt_In_Out;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F4=Prompt
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

//?State Code.
CASE;

// IF PGM.*Cursor field <IS> CTL.State Code
IF PGM.*Cursor_field = CTL.State_Code;

// Call program SEL State              SR.
CALL PROGRAM(SEL State              SR) ('CAAHSRR');
PARAMETER(CTL.State_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Buying Group.
CASE;

// IF PGM.*Cursor field <IS> CTL.Buying Group
IF PGM.*Cursor_field = CTL.Buying_Group;

// Call program Sel Buying Group      SR.
CALL PROGRAM(Sel Buying Group      SR) ('PUQ1SRR');
PARAMETER(CTL.Buying_Group);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?F10=Toggle Opt In/Out.
CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

CASE;

// IF PAR.Buying Group Opt In/Out is Not Entered
IF PAR.Buying_Group_Opt_In_Out = *BLANK;

// PAR.Buying Group Opt In/Out = CND.In
PAR.Buying_Group_Opt_In_Out = 'I';

// CTL.Text 1 USR 30 = CON.**Opt In**
CTL.Text_1_USR_30 = '**Opt In**';

// IF PAR.Buying Group Opt In/Out is In
IF PAR.Buying_Group_Opt_In_Out = 'I';

// PAR.Buying Group Opt In/Out = CND.Out
PAR.Buying_Group_Opt_In_Out = 'O';

// CTL.Text 1 USR 30 = CON.**Opt Out**
CTL.Text_1_USR_30 = '**Opt Out**';

// IF *OTHERWISE
IF *OTHERWISE;

//?Display ALL.
// PAR.Buying Group Opt In/Out = CND.Not Entered
PAR.Buying_Group_Opt_In_Out = *BLANK;

// CTL.Text 1 USR 30 = CON.***ALL***
CTL.Text_1_USR_30 = '***ALL***';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F11=Email Buying Group Listing.
CASE;

// IF CTL.*CMD key is CF11
IF CTL.*CMD_key = '11';

//?Must Enter a Valid Value.
CASE;

// IF CTL.Buying Group Opt In/Out is Not Entered
IF CTL.Buying_Group_Opt_In_Out = *BLANK;

// LCL.Generic Message 80 USR = CON.Must enter a valid value.
LCL.Generic_Message_80_USR = 'Must enter a valid value.';

// Send error message - '&1'
ERROR(USR5085);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(CTL.Buying_Group_Opt_In_Out);

QUIT;

ENDIF;

// LCL.Email Address = CON.*BLANK
LCL.Email_Address = *BLANK;

// Call program Pmt Enter Email Addr  PV.
CALL PROGRAM(Pmt Enter Email Addr  PV) ('POWGPVR');
PARAMETER(LCL.Email_Address);

//?Export Data to Excel via SEQUEL.
CASE;

// IF LCL.Email Address is Entered
IF LCL.Email_Address <> *BLANK;

// Call program Zzz Buying Group Info CL.
CALL PROGRAM(Zzz Buying Group Info CL) ('PUQ7UPC');
PARAMETER(CTL.Buying_Group_Opt_In_Out);
PARAMETER(LCL.Email_Address);

// Send information message - '&1'
MESSAGE(USR4976 *INFO);
MSGPARM('Job submitted.');

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?F4=Prompt
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

//?Buying Group.
CASE;

// IF PGM.*Cursor field <IS> RCD.Buying Group
IF PGM.*Cursor_field = RCD.Buying_Group;

// Call program Sel Buying Group      SR.
CALL PROGRAM(Sel Buying Group      SR) ('PUQ1SRR');
PARAMETER(RCD.Buying_Group);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?Validate Buying Group.
CASE;

// IF RCD.Buying Group is Entered
IF RCD.Buying_Group <> *BLANK;

EXECUTE FUNCTION(Val Active Buying Grp RT) TYPE(RTVOBJ) FILE(PUB1REP)           AC2184571;
PARAMETER(RCD.Buying_Group);
PARAMETER(LCL.Record_Status);
{
 //?USER: Initialize routine

 // PAR.Record Status = CND.*blank
 PAR.Record_Status = *BLANK;

 //?USER: Process Data record

 // PAR.Record Status = DB1.Record Status
 PAR.Record_Status = DB1.Record_Status;

}


//?Record Exist?
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?If Not Active, Send Error Msg.
CASE;

// IF NOT LCL.Record Status is Active
IF ! LCL.Record_Status = 'A';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// LCL.Generic Message 80 USR = CON.Buying Group not active.
LCL.Generic_Message_80_USR = 'Buying Group not active.';

// Send error message - '&1'
ERROR(USR5085);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(RCD.Buying_Group);

QUIT;

ENDIF;

//?Record Exist?
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// LCL.Generic Message 80 USR = CON.Buying Group not found.
LCL.Generic_Message_80_USR = 'Buying Group not found.';

// Send error message - '&1'
ERROR(USR5085);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(RCD.Buying_Group);

QUIT;

ENDIF;

//?Validate Buying Group.
// IF *OTHERWISE
IF *OTHERWISE;

//?Buying Group is required.
CASE;

// IF NOT RCD.Buying Group Opt In/Out is Not Entered
IF ! RCD.Buying_Group_Opt_In_Out = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// LCL.Generic Message 80 USR = CON.Buying Group required.
LCL.Generic_Message_80_USR = 'Buying Group required.';

// Send error message - '&1'
ERROR(USR5085);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(RCD.Buying_Group);

QUIT;

ENDIF;

ENDIF;

//?USER: Process subfile record (Post-confirm)

EXECUTE FUNCTION(Chg Buying Group Info CH) TYPE(CHGOBJ) FILE(PUAAREP)           AC2184587;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Buying_Group);
PARAMETER(RCD.Buying_Group_Opt_In_Out);
{
 //?USER: Processing after Data read

 //?If Buying Group Info Changed Then Update Else Quit.
 CASE;

 // IF PAR.Buying Group NE DB1.Buying Group
 IF PAR.Buying_Group <> DB1.Buying_Group;

 // OR PAR.Buying Group Opt In/Out NE DB1.Buying Group Opt In/Out
 OR PAR.Buying_Group_Opt_In_Out <> DB1.Buying_Group_Opt_In_Out;

 //?Continue to update.
 //?If Buying Group Info Changed Then Update Else Quit.
 // IF *OTHERWISE
 IF *OTHERWISE;

 QUIT;

 ENDIF;

 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

}


