      *****************  RPG PROGRAM HEADING  ************************
      * SYSTEM:      HOG PRODUCTION
      * PROGRAM:     HP477
      * TITLE:       SPECIFY PERIOD CLOSE
      * PROGRAMMER:  LEANNE FEDOR
      * CREATED:     07/13/94
      *
      * FUNCTION: THIS FUNCTION ALLOWS THE USER TO CLOSE THE
      *           PERIOD. THE "PERIOD CLOSE" FUNCTION CLOSES
      *           ALL BUSINESS OFFICES AT THE SAME TIME.
      *
      *           REQUIRED SELECTION: EDIT/FINAL FLAG
      *
      *           THIS PROGRAM IS CALLED FROM A MENU.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      * 08/09/94  R. Centonze   ADD REPORT OPTIONS: # COPY, HOLD (Y/N),
      *                         OUTQ TO DISPLAY AND *LDA OUTPUT. ADD
      *                         'RUN IN NIGHT JOBQ' TO DISPLAY AND
      *                         SBMJOB OUTPUT.
      *
      * 04/26/95  LEANNE FEDOR
      *           CHANGED F4 ROUTINE TO REDISPLAY SCREEN INSTEAD OF
      *           EDITING SCREEN.
      *
      * 12/31/96  LEANNE FEDOR
      *           SEABOARD HAS SWITCHED FROM 13 PERIODS TO 12 PERIODS
      *           FOR ACCOUNTING PURPOSES. AS A RESULT OF THIS CHANGE,
      *           HPS MUST NOW ACCESS THE OMS CALENDAR FILE TO GET THE
      *           'NEXT' PERIOD INFO FOR UPDATING OF THE HPS ACCOUNTING
      *           PERIOD DATA AREA. SO, WHEN THE USER TAKES A 'FINAL'
      *           CLOSE, VERIFY THAT THE OMS CALENDAR FILE HAS THE
      *           'NEXT' PERIOD INFO. IF IT DOESN'T ISSUE A TERMINAL
      *           ERROR MESSAGE.
      *
      * 02/08/00  LeAnne Fedor
      *           Removed print options (hold, copies, outque, etc.) from screen
      *           and replaced them with a function key that calls the pop-up
      *           window of print options.
      *
      * 09/26/01  LeAnne Fedor
      *           Added prior period to local data area.
      *
      * 07/16/03  LeAnne Fedor
      *           We now have some EOP reports that can be generated on-demand as well as
      *           in the EOP process.  The on-demand versions have multiple user selections
      *           that are populated in the LDA. So, to prevent data decimal errors on these
      *           selectors during the EOP run, we must now initialize these LDA values--
      *           even though they are not part of the EOP job run.
      *
      * 10/22/03  LeAnne Fedor
      *           The EOP job clogs up the job queue. Every time Pork closes the period, the
      *           operations people (Jeannie) have to continuously move other jobs around so
      *           those jobs can run. So, we are going to hardcode the job queue to be the
      *           job queue that the Datamart Stuff runs in.  We think this should work since
      *           no Datamart stuff will be running during the day.
      *
      * 03/01/16  R. Centonze   Add company to the screen
      * 05/10/16  Barb Gutierrez   E5752
      *           Recompile Only.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     FHPD477    CF   E             WORKSTN
     F                                     INFDS(IOFEED)
      *
     Fhsp0071   if   e           k disk
      * Company control
      *
     FHSP002    IF   E           K DISK
      *    FUNCTIONS         (KEY: FNFNCD)
      *
     FHSP009    IF   E           K DISK
      *    BUSINESS OFFICE           (KEY: BOBOCD)
      *
     FHSL061A   IF   E           K DISK
      *  CONTROL FILE: EXPENSE INTERFACE FROM G/L TO HPS
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  NAMED CONSTANTS
      *---------------------------------------------------------------
      *
     D CREATE          C                   CONST('CREATE')
     D REVISE          C                   CONST('REVISE')
     D DELETE          C                   CONST('DELETE')
     D VIEW            C                   CONST('VIEW  ')
     D SELECT          C                   CONST('SELECT')
     D YES             C                   CONST('Y')
     D NO              C                   CONST('N')
     D SET1            C                   CONST('SET1  ')
     D EDIT1           C                   CONST('EDIT1 ')
     D SCRN1           C                   CONST('SCRN1 ')
     D EXIT            C                   CONST('EXIT  ')
     D UPDATE          C                   CONST('UPDATE')
      *
      *
      *
      *---------------------------------------------------------------
      * TABLE AND ARRAY SPECIFICATIONS
      *---------------------------------------------------------------
      *
      * COMPILE TIME ARRAY FOR SUBMIT JOB COMMAND USED IN QCMDEXC
      *
     D CMD             S              1    DIM(80) CTDATA PERRCD(80)
      *
      *
      * EDIT/FINAL FLAGS AND DESCRIPTIONS
      *
     D EFF             S              1    DIM(2) CTDATA PERRCD(1)              EDIT/FINAL DSC
     D EFD             S             10    DIM(2) ALT(EFF)
      *
      *
      *---------------------------------------------------------------
      * STANDALONE FIELDS
      *---------------------------------------------------------------
      *
      * Standard fields
      *
     D pgm             s             10
     D msgfl           s             10
     D maxmsg          s              2  0  inz(20)
     D routne          s              6
     D rtncd           s              2    inz('00')
      *
      *  Parms for use with QCMDEXC.  'LENGTH' is the length of the
      *  command that will be issued with QCMDEXC.  QCMDEXC requires
      *  the field containing length to be defined as 15 with 5 decimal
      *  positions.  The field 'CMDSBM' will hold the values of the
      *  submit job command when passed as a parm on the call to
      *  QCMDEXC.
      *
     D length          s             15  5 inz(80)
     D cmdsbm          s             80
      *
      *
      * Workfields
      *
     D wkppendt        s              8  0
     D wkccyymmdd      s              8  0
     D wkyymmdd        s              6  0
      *
      *
      * Parm fields
      *
     D xxjobq          s             10
     D xxnite          s              1    inz('N')
     D xxcopy          s              1  0
      *
     D xxeffl          s                   like(dfeffl)
     D xxefds          s                   like(dfefds)
      *
     D xxcocd          s              3  0
     D xxreturn        s              7a
      *
     D xxjulian        s              5  0
     D xxcyymmddi      s              7  0
      *
     D xxhpscdyr       s              4  0
     D xxhpscdwk       s              2  0
     D xxhpspicdt      s              5  0
      *
     D xxcdwk          s              2  0
     D xxday           s              1a
      *
     D xxacyr          s              4  0
     D xxacpe          s              2  0
     D xxacwk          s              2  0
      *
     D xxnacyr         s              4  0
     D xxnacpe         s              2  0
      *
     D xxnbgdt         s              8  0
     D xxnendt         s              8  0
      *
      *---------------------------------------------------------------------------
      * DATA STRUCTURES
      *---------------------------------------------------------------------------
      *
      *---------------------------------------------------------------
      * STANDARD ERROR MESSAGE HANDLING DATA STRUCTURES
      *---------------------------------------------------------------
      *
      * FOR ERROR MESSAGE HANDLING, A PACKED INDEX (E) IS REQUIRED.
      * FOR PROGRAM READABILITY, DEFINE A CORRESPONDING ERROR COUNT
      * FIELD CALLED 'ERROR'
      *
     D                 DS                  INZ
     D  ERROR                  1      2P 0
     D  E                      1      2P 0
      *
      * THIS DATA STRUCTURE SUPPLIES THE NAME OF THE MESSAGE FILE TO
      * THE MESSAGE HANDLING CL PROGRAM.  THE FIELD NAME MSGFIL MUST BE
      * CONSTANT. THE VALUE IN QUOTES IS THE NAME OF THE SPECIFIC
      * MESSAGE FILE CONTAINING THE USER DEFINED MESSAGES.
      *
     D                 DS                  INZ
     D  MSGFIL                 1     10    INZ('HSMSGF    ')
      *
      * THE FOLLOWING 3 DATA STRUCTURES ARE USED TO SPEED MESSAGE
      * HANDLING SINCE IT IS FASTER TO CLEAR DATA STRUCTURES THAN
      * ARRAYS.  EACH IS ASSOCIATED WITH A STANDARD MESSAGE ARRAY.
      *
     D MGI             DS           140    INZ
     D  MGID                   1    140
     D                                     DIM(20)                              MSG ID ARRAY
      *
     D MGD             DS          1000    INZ
     D  MGDT                   1   1000
     D                                     DIM(20)                              MSG PARMS
      *
     D MGWK            DS            50    INZ
     D  MGW                    1     50
     D                                     DIM(50)                              MSG WORK PARMS
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      *  DEFINITION FOR EXTERNAL DATA AREA 'DAAPER' WHICH HOLDS
      *  THE "CURRENT" ACCOUNTING PERIOD
      *---------------------------------------------------------------
     D                 DS
     D  DAAPER                 1     24
     D  DACCYY                 1      4  0
     D  DAPER                  5      6  0
     D  DABPDT                 7     14  0
     D  DAEPDT                15     22  0
     D  DAPGFL                23     23
     D  DAPPFL                24     24
      *
      *---------------------------------------------------------------
      *  LOCAL DATA AREA
      *---------------------------------------------------------------
      *
     D LDA            UDS
     D  LDBPDT                 1     08  0
     D  LDEPDT                 9     16  0
     D  LDPER                 17     18  0
     D  LDEFFL                19     19
     D  LDCCYY                20     23  0
     D  LDBMDY                60     66  0
     D  LDEMDY                70     76  0
     D  LDERFL                80     80
     D  LDPPACYR              81     84  0
     D  LDPPACPE              85     86  0
      *
     D  ldcocd               200    202
      *
      * (Note: Cell and Farm site are not populated for EOP...only for on-demand
      *  versions of some EOP reports. They are initialized to zero to prevent
      *  data decimal abends.)
      *
     D  ldcell               102    103  0
     D  ldfscd               109    113  0
      *
     D  ldhd                 297    299  0
      *
     D  LDOUTU               401    410
     D  LDHOLD               411    411
     D  LDCOPY               412    412  0
     D  LDOUTQ               413    422
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAIN LINE
      ****************************************************************
      *
     C                   MOVEL     SET1          ROUTNE
      *
     C     *INLR         DOWEQ     *OFF                                         MAIN DO LOOP
      *
     C     ROUTNE        CASEQ     SET1          $SET1
     C     ROUTNE        CASEQ     SCRN1         $SCRN1
     C     ROUTNE        CASEQ     EDIT1         $EDIT1
      *
     C     ROUTNE        CASEQ     EXIT          $EXIT
     C                   ENDCS
     C                   ENDDO                                                  MAIN DO LOOP
      /EJECT
      *----------------------------------------------------------------
      * $SET1 - SUBROUTINE TO SET ENVIRONMENT FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $SET1         BEGSR
      *
      *  SET ROUTINE TO DISPLAY SCREEN
      *
     C                   MOVEL     SCRN1         ROUTNE
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $SCRN1 - SUBROUTINE TO PERFORM OPERATOR I/O FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $SCRN1        BEGSR
      *
      * IF THE USER FAILED THE INITIAL SECURITY CHECKS, SETON 99
      * TO PROTECT INPUT FIELDS AND INVALIDATE FUNCTION KEYS.
      *
     C     TERMFL        IFEQ      YES
     C                   SETON                                        99
     C                   ENDIF
      *
      * WRITE THE ERROR MESSAGES FROM THE ERROR ARRAYS TO THE
      * ERROR MESSAGE SUBFILE
      *
     C                   EXSR      $WRMSG
      *
      * WRITE SCREEN 1 TO CRT
      *
     C                   WRITE     HP477K1
     C                   WRITE     HP477EC
     C                   EXFMT     HP477R1
      *
      * CLEAR THE MESSAGES FROM THE MESSAGE DATA STRUCTURES AND PROGRAM
      * MESSAGE QUEUE.
      *
     C                   EXSR      $CLMSG
      *
      * GET USER'S ENTRY AND SET THE NEXT ROUTINE
      *
     C                   SELECT
     C     *IN03         WHENEQ    *ON                                          F3-EXIT
     C     TERMFL        OREQ      YES                                          BAD USER
     C                   MOVEL     EXIT          ROUTNE
      *
     C     *IN17         WHENEQ    *ON                                          F17-PRINT OPT
     C                   MOVEL     SCRN1         ROUTNE
     C                   CALL      'HP451'
     C                   PARM                    SDPGM
     C     LDCOPY        PARM      LDCOPY        XXCOPY
     C                   PARM                    LDHOLD
     C                   PARM                    LDOUTQ
     C                   PARM                    XXNITE
     C                   PARM                    XXJOBQ
      *
     C     *IN20         WHENEQ    *ON                                          F20-WRKSPLF
     C                   CALL      'UTWRKSPL'
     C                   MOVEL     SCRN1         ROUTNE
      *
     C     *IN04         WHENEQ    *ON                                          F4-PROMPT
     C                   EXSR      $F4S1
     C                   MOVEL     SCRN1         ROUTNE
      *
     C     *IN08         WHENEQ    *ON                                          F8-SUBMIT
     C                   MOVEL     EDIT1         ROUTNE
     C                   OTHER
      *
      * USER HAS PRESSED ENTER
      *
     C                   MOVEL     EDIT1         ROUTNE
     C                   ENDSL
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $EDIT1 - SUBROUTINE TO EDIT INPUT FIELDS FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $EDIT1        BEGSR
      *
      * Validate:
      *   1) company
      *
     C                   exsr      $company
      *
      * VERIFY THAT EITHER EDIT OR FINAL WAS SELECTED
      *
     C                   Z-ADD     1             X                 2 0
     C     DFEFFL        LOOKUP    EFF(X)                                 90
     C     *IN90         IFEQ      *ON                                          IF GOOD FLAG
     C                   MOVEL     EFD(X)        DFEFDS
     C                   ELSE
     C                   MOVE      *BLANK        DFEFDS
     C                   SETON                                        33
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09107'     MGID(E)
     C                   ENDIF
     C                   ENDIF                                                  IF GOOD FLAG
      *
      *
      * IF 'FINAL' WAS SELECTED,
      *   1)  VERIFY THAT THE OMS CALENDAR FILE HAS BEEN
      *       SET UP WITH THE 'NEXT' PERIOD INFO.  IF NOT,
      *       ISSUE A TERMINAL MESSAGE. (IF THE CALENDAR FILE
      *       IS NOT SET UP, THEN THE HPS DATA AREA FOR
      *       'CURRENT' ACCOUNTING PERIOD WILL BE SCREWED UP.)
      *   2)  VERIFY THAT A G/L EXPENSE INTERFACE IS NOT
      *       PARTIALLY COMPLETED (IE: CHECK THE INTERFACE
      *       STATUS CODE FOR THE YEAR/PERIOD.)
      *
     C                   MOVE      D1COCD        XXCOCD
     C     DFEFFL        IFEQ      'F'                                          IF FINAL
     C                   EXSR      $NEXT
     C                   EXSR      $ISCD
     C                   ENDIF                                                  IF FINAL
      *
      *
      * IF THERE ARE NO ERRORS, EXECUTE THE SUBROUTINE TO PROCESS THE
      * USERS REQUEST
      *
     C     ERROR         IFEQ      0
     C     *IN44         IFEQ      *OFF
     C                   SETON                                        44
     C                   ELSE
     C                   EXSR      $PROC1
     C                   ENDIF
     C                   ELSE
     C                   SETOFF                                       44
     C                   ENDIF
      *
     C                   MOVEL     SCRN1         ROUTNE
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * company
      *----------------------------------------------------------------
      *
     C     $company      begsr
      *
     C                   if        d1cocd  = *blank
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS00175'
     C                   endif
     c                   else
     c     D1COCD        chain     hsp0071                            35
     c     *IN35         ifeq      *ON
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS00175'
     C                   endif
     C                   end
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * $NEXT - DETERMINE IF OMS CALENDAR FILE HAS 'NEXT' PERIOD INFO
      *---------------------------------------------------------------
      *
     C     $NEXT         BEGSR
      *
      *
      *
      * CALL THE PROGRAM TO ACCESS THE OMS CALENDAR FILE.
      *   INPUT PARMS:
      *               COMPANY
      *               CURRENT ACCOUNTING PERIOD
      *               CURRENT ACCOUNTING PERIOD YEAR
      *   OUTPUT PARMS:
      *               NEXT ACCOUNTING PERIOD
      *               NEXT ACCOUNTING PERIOD YEAR
      *               BEGINNING DATE OF NEXT ACCOUNTING PERIOD
      *               ENDING DATE OF NEXT ACCOUNTING PERIOD
      *
      *
     C                   CALL      'HP223'
     C                   PARM                    XXCOCD
     C                   PARM      DACCYY        XXACYR
     C                   PARM      DAPER         XXACPE
     C                   PARM      0             XXNACYR
     C                   PARM      0             XXNACPE
     C                   PARM      0             XXNBGDT
     C                   PARM      0             XXNENDT
      *
      * IF THERE WERE ANY PROBLEMS IN THE OMS CALENDAR FILE,
      * THE NEXT PERIOD ENDING DATE WILL BE ZERO.
      *
     C     XXNENDT       IFEQ      0
     C                   SETON                                        33
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00850'     MGID(E)
     C                   CLEAR                   MGW
     C                   MOVEA     BOCOCD        MGW(1)
     C                   MOVEA     MGW           MGDT(E)
     C                   ENDIF
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $ISCD - CHECK G/L EXPENSE INTERFACE STATUS CODE FOR YEAR/PERIOD
      *----------------------------------------------------------------
      *
     C     $ISCD         BEGSR
      *
     C     KEY01         CHAIN     HSL061A                            92
      *
     C                   SELECT
     C     *IN92         WHENEQ    *ON
      *
     C     EIISCD        WHENNE    'C'
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00879'     MGID(E)
     C                   ENDIF
     C                   ENDSL
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $SEC   - CALL SECURITY PROGRAM
      *---------------------------------------------------------------
      *
     C     $SEC          BEGSR
      *
      * SETUP THE FIELDS TO SEND INTO THE SECURITY PROGRAM
      *
     C                   MOVEL     sdpgm         INFNCD                         PGM NAME
     C                   MOVE      *BLANK        INBOBO                         SCREEN BO
      *
     C                   MOVE      *BLANK        OUBOBO                         BO CODE
     C                   MOVE      *BLANK        OUBODS                         BO DESC
     C                   MOVE      *BLANK        OUDVCD                         FUNCTION DIV
     C                   MOVEL     NO            TERMFL            1            TERMINAL FLG
      *
     C                   CALL      'HPSEC  '
      **** IN
     C                   PARM                    MGID                           MSGID ARRAY
     C                   PARM                    MGDT                           MSGDTA DATA
     C                   PARM                    ERROR                          # OF ERRORS
     C                   PARM                    INFNCD           10            FUNC CODE
     C                   PARM                    INBOBO            5            BO CODE
     C                   PARM                    INDVFL            1            CHECK DIV?
     C                   PARM                    INBOFL            1            CHECK B.O.?
      **** OUT
     C                   PARM                    OUBOBO            5            BO CODE
     C                   PARM                    OUBODS           30            BO DESC.
     C                   PARM                    OUDVCD            5            DIV CODE
     C                   PARM                    SECFL             1            SEC FLAG
     C                   PARM                    OUBOFL            1            BO ERRFLG
     C                   PARM                    OURMFL            1
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $PROC1 - SUBROUTINE TO PROCESS THE USER'S REQUEST
      *---------------------------------------------------------------
      *
     C     $PROC1        BEGSR
      *
      *  IF USER TOOK F8=SUBMIT EDIT/FINAL
      *
     C     *IN08         IFEQ      *ON                                          IF F8=SBMJOB
      *
      * PLACE OPTIONS INTO LOCAL DATA AREA AND OUTPUT AREA
      *
     C                   Z-ADD     DABPDT        LDBPDT
     C                   Z-ADD     DAEPDT        LDEPDT
     C                   Z-ADD     DAPER         LDPER
     C                   Z-ADD     DACCYY        LDCCYY
     C                   MOVEL     DFEFFL        LDEFFL
     C                   Z-ADD     DFBMDY        LDBMDY
     C                   Z-ADD     DFEMDY        LDEMDY
     C                   MOVEL     NO            LDERFL
     C                   move      d1cocd        ldcocd                           e5290
      *
     C                   OUT       LDA
      *
      * The EOP job clogs up the job queue. Every time Pork closes the period, the
      * operations people (Jeannie) have to continuously move other jobs around so
      * those jobs can run. So, we are going to hardcode/override the job queue to be
      * the job queue that the Datamart Stuff runs in.  We think this should work since
      * no Datamart stuff will be running during the day.
      *
     C                   movel     'DATAMARTQ '  xxjobq
      *
      * MOVE THE 80-CHARACTER COMPILE TIME ARRAY 'CMD' TO A
      * 80-CHARACTER FIELD FOR SUBMITTING THE CORRECT REPORT.
      *
     C                   MOVEA     XXJOBQ        CMD(52)
     C                   MOVEA     CMD           CMDSBM
      *
     C                   CALL      'QCMDEXC'
     C                   PARM                    CMDSBM
     C                   PARM                    LENGTH
      *
      * ISSUE STANDARD REQUEST SUBMISSION MESSAGE
      *
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09003'     MGID(E)
     C                   ENDIF                                                  IF F8=SBMJOB
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $F4S1 - F4 PROMPT ON SCREEN 1
      *---------------------------------------------------------------
      *
     C     $F4S1         BEGSR
      *
     C                   SELECT
      *
      * IF EDIT/FINAL FLAG
      *
     C     FLD           WHENEQ    'DFEFFL'
     C                   MOVE      *BLANK        XXEFFL
     C                   MOVE      *BLANK        XXEFDS
     C                   CALL      'HP525'
     C                   PARM                    XXEFFL
     C                   PARM                    XXEFDS
     C                   SETON                                        53
     C     XXEFFL        IFNE      *BLANK                                       IF SELECTED
     C                   MOVEL     XXEFFL        DFEFFL
     C                   MOVEL     XXEFDS        DFEFDS
     C                   ENDIF                                                  IF SELECTED
     C                   OTHER
      *
      * F4 NOT VALID FOR THIS FIELD SO ISSUE MESSAGE
      *
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09011'     MGID(E)
     C                   ENDIF
      *
     C                   ENDSL
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $DATE -  MANIPULATE DATES WITH DATE UTILITY
      *---------------------------------------------------------------
      *
     C     $DATE         BEGSR
      *
     C                   CALL      'UT80060R'
     C                   PARM                    PFRM8             8 0
     C                   PARM                    PTO8              8 0
     C                   PARM                    PFRFMT            4
     C                   PARM                    PTOFMT            4
     C                   PARM                    PDAYS             4 0
     C                   PARM                    PCODE             1
     C                   PARM                    PRTRN             1
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $WRMSG - SUBROUTINE TO WRITE ERROR MESSAGES
      *---------------------------------------------------------------
      *
     C     $WRMSG        BEGSR
      *
     C                   CALL      'UT80045J'                           43
     C                   PARM                    MGID
     C                   PARM                    MGDT
     C                   PARM                    ERROR
     C                   PARM      SDPGM         PGM
     C                   PARM      MSGFIL        MSGFL
      *
      * IF CALL TO UT80045J FAILED, A MESSAGE HARDCODED IN THE DSPF
      * COMMAND KEY RECORD WILL BE SET ON. SO, REDISPLAY SCREEN TO USER
      *
     C     *IN43         IFEQ      *ON
     C                   MOVEL     SET1          ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      *
      *----------------------------------------------------------------
      * $CLMSG - SUBROUTINE TO CLEAR MESSAGES
      *----------------------------------------------------------------
      *
     C     $CLMSG        BEGSR
      *
     C                   CALL      'UT80045J'                           43
     C                   PARM      *BLANK        MGI
     C                   PARM      *BLANK        MGD
     C                   PARM      *ZEROS        ERROR
     C                   PARM      SDPGM         PGM
     C                   PARM      MSGFIL        MSGFL
      *
      * IF CALL TO UT80045J FAILED, A MESSAGE HARDCODED IN THE DSPF
      * COMMAND KEY RECORD WILL BE SET ON. SO, REDISPLAY SCREEN TO USER
      *
     C     *IN43         IFEQ      *ON
     C                   MOVEL     SET1          ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      *
      *----------------------------------------------------------------
      * $EXIT - SUBROUTINE TO SET ON LR AND END JOB
      *----------------------------------------------------------------
      *
     C     $EXIT         BEGSR
     C                   SETON                                        LR
     C                   ENDSR
      *
      /EJECT
      *----------------------------------------------------------------
      * Set up to retrieve the year/period number of the prior period
      *----------------------------------------------------------------
      *
      * This subroutine gives you the prior period which you will put into the
      * local data area and use in the EOP processing.
      *
     C     $prior        begsr
      *
      * Subtract 1 day from the beginning period date to get the ending date
      * of the previous period.
      *
     C                   Z-ADD     DABPDT        PFRM8
     C                   MOVEL     'CYMD'        PFRFMT
     C                   MOVEL     'CYMD'        PTOFMT
     C                   Z-ADD     1             PDAYS
     C                   MOVE      'D'           PCODE
     C                   MOVE      *BLANK        PRTRN
     C                   EXSR      $DATE
     C     PRTRN         IFEQ      *BLANK                                       IF OK
     C                   Z-ADD     PTO8          WKPPENDT
     C                   ENDIF                                                  IF OK
      *
      *
      * Get the date into the SYNON format of CYYMMDD.
      *
     C                   movel     wkppendt      wkccyymmdd
     C                   z-add     wkccyymmdd    wkyymmdd
     C                   if        wkccyymmdd >= 20000000
     C     wkyymmdd      add       1000000       xxcyymmddi
     C                   else
     C                   z-add     wkyymmdd      xxcyymmddi
     C                   endif
      *
      * Call the SYNON program that will return the year/period associated
      * with the date you have sent in.
      *
     C                   call      'POF3XFR'
     C                   parm      *blank        xxreturn
     C                   parm                    xxcocd
     C                   parm                    xxcyymmddi
     C                   parm      0             xxjulian
     C     ldppacyr      parm      0             xxacyr
     C     ldppacpe      parm      0             xxacpe
     C                   parm      0             xxacwk
     C                   parm      *blank        xxday
     C                   parm      0             xxcdwk
     C                   parm      0             xxhpspicdt
     C                   parm      0             xxhpscdyr
     C                   parm      0             xxhpscdwk
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * INITIALIZATION SUBROUTINE
      *---------------------------------------------------------------
      *
     C     *INZSR        BEGSR
      *
      * KEY LISTS
      *
     C     KEY01         KLIST
     C                   KFLD                    DACCYY
     C                   KFLD                    DAPER
      *
      *
      * YOU WILL NEED A BUSINESS OFFICE FOR THE CALLS TO THE OMS
      * CALENDAR FILE. SO, RETRIEVE THE FIRST BUSINESS OFFICE IN
      * THE BUSINESS OFFICE FILE. AFTER RETRIEVING THE VALUE, SET IT
      * UP AS A NUMERIC PARM FOR  THE CALLS.
      * (NOTE: AS OF 11/8/95, ALL 'BUSINESS OFFICES' ARE SET UP
      * TO BE COMPANY '350' IN THE HOG PRODUCTION SYSTEM.)
      *
     C*                  Z-ADD     0             XXCOCD
     C*    *LOVAL        SETLL     HSP009
     C*                  READ      HSP009                                 92
     C*    *IN92         IFEQ      *OFF                                         IF RECORD
     C*                  TESTN                   BOCOCD               92
     C*    *IN92         IFEQ      *ON                                          IF NUMERIC
     C*                  MOVE      BOCOCD        XXCOCD
     C*                  ENDIF                                                  IF NUMERIC
     C*                  ENDIF                                                  IF RECORD
      *
      *
      * DEFINE LDA
      *
     C     *DTAARA       DEFINE    *LDA          LDA
     C                   IN        LDA
      *
      * Initialize LDA fields that are used for on-demand reports.
      *
     C                   z-add     0             ldcell
     C                   z-add     0             ldfscd
     C                   z-add     0             ldhd
      *
      * Initialize LDA fields for printing
      *
     C                   MOVE      *BLANK        LDHOLD
     C                   Z-ADD     0             LDCOPY
     C                   MOVEL     LDOUTU        LDOUTQ
      *
      * GET THIS FUNCTION'S NUMBER OF COPIES, HOLD YES/NO
      *
     C     SDPGM         CHAIN     HSP002                             92
     C     *IN92         IFEQ      *OFF
     C                   Z-ADD     FNCOPY        LDCOPY
     C                   MOVEL     FNHOLD        LDHOLD
     C                   ENDIF
      *
     C     LDCOPY        IFEQ      0
     C                   Z-ADD     1             LDCOPY
     C                   ENDIF
      *
     C     LDHOLD        IFEQ      *BLANK
     C                   MOVEL     NO            LDHOLD
     C                   ENDIF
      *
      * BRING IN THE DATA AREA THAT CONTAINS THE CURRENT ACCOUNTING
      * PERIOD.    MOVE THE DATA AREA VALUES TO THE SCREEN AFTER
      * FLIPPING THE DATES.
      *
     C     *DTAARA       DEFINE                  DAAPER
     C                   IN        daaper
     C                   Z-ADD     DAPER         DFPER
      *
      * BEGINNING PERIOD DATE
      *
     C                   Z-ADD     DABPDT        PFRM8
     C                   MOVEL     'CYMD'        PFRFMT
     C                   MOVEL     'MDY '        PTOFMT
     C                   Z-ADD     0             PDAYS
     C                   MOVE      *BLANK        PCODE
     C                   MOVE      *BLANK        PRTRN
     C                   EXSR      $DATE
     C     PRTRN         IFEQ      *BLANK                                       IF OK
     C                   Z-ADD     PTO8          DFBMDY
     C                   ENDIF                                                  IF OK
      *
      * ENDING PERIOD DATE
     C                   Z-ADD     DAEPDT        PFRM8
     C                   Z-ADD     0             PDAYS
     C                   MOVE      *BLANK        PCODE
     C                   MOVE      *BLANK        PRTRN
     C                   EXSR      $DATE
     C     PRTRN         IFEQ      *BLANK                                       IF OK
     C                   Z-ADD     PTO8          DFEMDY
     C                   ENDIF                                                  IF OK
      *
      * Retrieve the year/period of the 'prior' period.
      *
     C                   exsr      $prior
      *
      * Set up default job queue
      *
     C                   MOVEL     '*JOBD'       XXJOBQ
      *
      * THE FOLLOWING STANDARD CODE MUST BE INCLUDED TO MAKE THE
      * STANDARD ERROR MESSAGE HANDLING PROGRAM FUNCTION PROPERLY.
      * THIS CODE SETS AND CLEARS THE PROGRAM MESSAGE QUEUE.
      *
     C                   MOVEL     '*'           MSGPGM                         SET QUEUE
     C                   EXSR      $CLMSG                                       CLEAR MSG
      *
      * EXECUTE THE SECURITY SUBROUTINE TO DETERMINE USER
      * AUTHORIZATIONS.
      *
     C                   EXSR      $SEC
      *
      * IF ERRORS ON INITIAL CALL, SET TERMINAL FLAG TO YES.
      *
     C     SECFL         IFEQ      YES
     C                   MOVEL     YES           TERMFL
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      *****************************************************************
      * COMPILE TIME ARRAY NAMED 'CMD' USED IN QCMDEXC
      *****************************************************************
** CMD TABLE
SBMJOB CMD(CALL PGM(HP477CL)) JOB(CLOSEPEROD) JOBQ(__________)
** EFF
EEDIT
FFINAL
