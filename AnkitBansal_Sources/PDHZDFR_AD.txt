// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDHZDFR
// ?Date: 14.08.2025 Time: 03:34:41
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('I/C');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(Rtv Allow Multi-Whs   RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1512192;
PARAMETER(JOB.*USER);
PARAMETER(PAR.Allow_Multi_Warehouse);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

// PAR.Variance USR = CND.Variance Not Equal Zero
PAR.Variance_USR = 'NE';

// PAR.Display Prt Opt Pmt USR = CND.*YES
PAR.Display_Prt_Opt_Pmt_USR = *YES;

// PGM.*Scan limit = CON.9999999
PGM.*Scan_limit = 9999999;

//?***** Change Log and Comments
DO;

//?** 03/05/2009 LJB FP1127
//?** Change this program to a display only function by removing
//?** option 2 to edit and displaying all records, not just variance.
//?04/19/04 slm Multi-Company -  Source would not compile so revisted
//?  for missing parms.
ENDDO;

//?USER: Initialize subfile control

CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

// CTL.Warehouse Code = PAR.Warehouse Code
CTL.Warehouse_Code = PAR.Warehouse_Code;

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

ENDIF;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


// PAR.Lot Number = CTL.Lot Number
PAR.Lot_Number = CTL.Lot_Number;

//?Accumulate Location On-Hand
CASE;

// IF CTL.Item Code is Entered
IF CTL.Item_Code <> *ZERO;

EXECUTE FUNCTION(Rtv Item On-Hand      RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC1528760;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Quantity_Loc_On_Hand_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Quantity Loc On-Hand USR = PAR.Quantity Loc On-Hand USR + DB1.ILL Item Qty O
 PAR.Quantity_Loc_On_Hand_USR = PAR.Quantity_Loc_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

}


//?Accumulate Location On-Hand
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Quantity Loc On-Hand USR = CON.*ZERO
CTL.Quantity_Loc_On_Hand_USR = *ZERO;

ENDIF;

//?USER: Initialize subfile record from DBF record

//?RCDSEL:  Item Code
CASE;

// IF CTL.Item Code is Entered
IF CTL.Item_Code <> *ZERO;

// AND CTL.Item Code NE RCD.Item Code
AND CTL.Item_Code <> RCD.Item_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?RCDSEL:  Production Date (label is Recv Date)
CASE;

// IF CTL.Production Date is entered
IF CTL.Production_Date <> *ZERO;

// AND CTL.Production Date NE RCD.Production Date
AND CTL.Production_Date <> RCD.Production_Date;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// RCD.Quantity On-Hand USR = RCD.Quantity on Hand - U/M1
RCD.Quantity_On_Hand_USR = RCD.Quantity_on_Hand_UOM1;

EXECUTE FUNCTION(Rtv Lot/Loc Qty Total RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC1505784;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Quantity_Loc_On_Hand_USR);
PARAMETER(RCD.Lot_Number);
PARAMETER(RCD.Multi_Lot_Sts_USR);
PARAMETER(WRK.Weight_11_2_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 // PAR.Multi Lot Sts USR = CND.no
 PAR.Multi_Lot_Sts_USR = 'N';

 //?USER: Process Data record

 // PAR.Quantity Loc On-Hand USR = PAR.Quantity Loc On-Hand USR + DB1.Item Qty On-Ha
 PAR.Quantity_Loc_On_Hand_USR = PAR.Quantity_Loc_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

 CASE;

 // IF DB1.ILL Unit Weight is Equal to zero
 IF DB1.ILL_Unit_Weight = *ZERO;

 EXECUTE FUNCTION(RTV Unit Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1298772;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.ILL_Unit_Weight);
 PARAMETER(NLL.Quality_Level);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.ILL Unit Weight = DB1.ILL Unit Weight
 LCL.ILL_Unit_Weight = DB1.ILL_Unit_Weight;

 ENDIF;

 // Weight
 PAR.Weight_11_2_USR = PAR.Weight_11_2_USR + ( DB1.ILL_Item_Qty_On_Hand
 * LCL.ILL_Unit_Weight 'H' );

 CASE;

 // IF PAR.Lot Number EQ WRK.ZERO
 IF PAR.Lot_Number = WRK.ZERO;

 // PAR.Lot Number = DB1.Lot Number
 PAR.Lot_Number = DB1.Lot_Number;

 ENDIF;

 CASE;

 // IF PAR.Lot Number NE DB1.Lot Number
 IF PAR.Lot_Number <> DB1.Lot_Number;

 // PAR.Multi Lot Sts USR = CND.yes
 PAR.Multi_Lot_Sts_USR = 'Y';

 ENDIF;

}


// RCD.Quantity Loc Var USR = RCD.Quantity On-Hand USR - RCD.Quantity Loc On-Hand U
RCD.Quantity_Loc_Var_USR = RCD.Quantity_On_Hand_USR - RCD.Quantity_Loc_On_Hand_USR;

//?** Always display records, not just variance    FP1127  03/05/2009
//?RCDSEL:  Lot Number
CASE;

// IF CTL.Lot Number NE WRK.ZERO
IF CTL.Lot_Number <> WRK.ZERO;

// AND CTL.Lot Number NE RCD.Lot Number
AND CTL.Lot_Number <> RCD.Lot_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process subfile control (Pre-confirm)

EXECUTE FUNCTION(Rtv Lot Tracking Flag RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1506123;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.Lot_Tracking_Flag);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Print Variance
CASE;

// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

// Call program Zzz Lot/Loc Var/Recv  PV.
CALL PROGRAM(Zzz Lot/Loc Var/Recv  PV) ('PDOJPVR');
PARAMETER(PAR.Status_Flag_1_Y_N);
PARAMETER(PAR.Status_Flag_2_Y_N);

//?Print Prompt
CASE;

// IF PAR.Display Prt Opt Pmt USR is *YES
IF PAR.Display_Prt_Opt_Pmt_USR = *YES;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// Call program PMT Prt/Sbm Opt    SHR PV.
CALL PROGRAM(PMT Prt/Sbm Opt    SHR PV) ('PDKMPVR');
PARAMETER('Print Item Lot/Loc Var');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('I/C');
PARAMETER(1);
PARAMETER(PAR.Hold_On_Jobq);
PARAMETER(PAR.Job_Log_Create);
PARAMETER(PAR.Hold);
PARAMETER(PAR.Log);

ENDIF;

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// Retrieve message - 'JOB(&1) jobq(&2) log(&3) hold(&4)'
PGM.*Sbmjob_override_string = RTVMSG(USR2684);
PARAMETER('PRTLOTVAR');
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Log);
PARAMETER(PAR.Hold);

// WRK.Date (Alpha) USR = CVTVAR(CTL.Production Date)
WRK.Date_Alpha_USR = CVTVAR(CTL.Production_Date);

// Call program PRT Lot/Loc Var/Recv  UP.
SBMJOB;
CALL PROGRAM(PRT Lot/Loc Var/Recv  UP) ('PDLGUPC');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(WRK.Date_Alpha_USR);
PARAMETER(PAR.Variance_USR);
PARAMETER(PAR.Status_Flag_1_Y_N);
PARAMETER(PAR.Status_Flag_2_Y_N);
PARAMETER('V');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER('D');
PARAMETER('PDJTPFR');
PARAMETER('PDJTPFR$');
SBMJOBEND;

// Send information message - 'Job &1 has been submitted to job queue &2.'
MESSAGE(USR2685 *INFO);
MSGPARM('PRTLOCVAR');
MSGPARM(PAR.PRT_Night_Queue);

ENDIF;

ENDIF;

//?Print Inventory Received
CASE;

// IF CTL.*CMD key is CF22
IF CTL.*CMD_key = '22';

//?Print Prompt
CASE;

// IF PAR.Display Prt Opt Pmt USR is *YES
IF PAR.Display_Prt_Opt_Pmt_USR = *YES;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// Call program PMT Prt/Sbm Opt    SHR PV.
CALL PROGRAM(PMT Prt/Sbm Opt    SHR PV) ('PDKMPVR');
PARAMETER('Print Received Inventory');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('I/C');
PARAMETER(1);
PARAMETER(PAR.Hold_On_Jobq);
PARAMETER(PAR.Job_Log_Create);
PARAMETER(PAR.Hold);
PARAMETER(PAR.Log);

ENDIF;

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// Retrieve message - 'JOB(&1) jobq(&2) log(&3) hold(&4)'
PGM.*Sbmjob_override_string = RTVMSG(USR2684);
PARAMETER('PRTLOTVAR');
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Log);
PARAMETER(PAR.Hold);

// WRK.Date (Alpha) USR = CVTVAR(CTL.Production Date)
WRK.Date_Alpha_USR = CVTVAR(CTL.Production_Date);

// Call program PRT Lot/Loc Var/Recv  UP.
SBMJOB;
CALL PROGRAM(PRT Lot/Loc Var/Recv  UP) ('PDLGUPC');
PARAMETER(CTL.Company_Number);
PARAMETER(*ZERO);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(WRK.Date_Alpha_USR);
PARAMETER(*BLANK);
PARAMETER('N');
PARAMETER('N');
PARAMETER('R');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER('S');
PARAMETER('PDJTPFR');
PARAMETER('PDJTPFR$');
SBMJOBEND;

// Send information message - 'Job &1 has been submitted to job queue &2.'
MESSAGE(USR2685 *INFO);
MSGPARM('PRTLOCVAR');
MSGPARM(PAR.PRT_Night_Queue);

ENDIF;

ENDIF;

//?** Remove F10 toggle for variance only/all
//?Lot Number changed in the control context.
CASE;

// IF PAR.Lot Number NE CTL.Lot Number
IF PAR.Lot_Number <> CTL.Lot_Number;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?CALC: Subfile record function fields

EXECUTE FUNCTION(Item Desc DRV) TYPE(DRVFLD)                                    AC1505592;
PARAMETER(RCD.Item_Desc_DRV);
PARAMETER(RCD.Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Desc_DRV);
 PARAMETER(WRK.Description_Line_Two);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Process subfile record (Pre-confirm)

//?** Remove 2=Edit. This will be display only, no editing  FP1127
//?Display Locations
CASE;

// IF RCD.*SFLSEL is Option 5
IF RCD.*SFLSEL = '5'/'5';

CASE;

// IF PAR.Lot Tracking Flag is yes
IF PAR.Lot_Tracking_Flag = 'Y';

// LCL.*Initial call = CND.*YES
LCL.*Initial_call = 'Y';

// Call program Dsp Item Lot Locs     DF.
CALL PROGRAM(Dsp Item Lot Locs     DF) ('PDH2DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(LCL.*Initial_call);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not available.  Lot Tracking Flag must equal 'Y'.'
ERROR(USR2665);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?Display Lot Trans
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

CASE;

// IF PAR.Lot Tracking Flag is yes
IF PAR.Lot_Tracking_Flag = 'Y';

// Call program Dsp Item Lot Trans    DF.
CALL PROGRAM(Dsp Item Lot Trans    DF) ('PDKXDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Lot_Number);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not available.  Lot Tracking Flag must equal 'Y'.'
ERROR(USR2665);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?USER: Final processing (Pre-confirm)

// PAR.Display Prt Opt Pmt USR = CND.*YES
PAR.Display_Prt_Opt_Pmt_USR = *YES;

