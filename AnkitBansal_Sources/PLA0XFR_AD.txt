// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLA0XFR
// ?Date: 14.08.2025 Time: 02:53:34
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?MODIFICATIONS
//?11/02/2020 ISE H16853 - CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
CASE;

// IF PAR.DT Movement Number is Entered
IF PAR.DT_Movement_Number <> *ZERO;

EXECUTE FUNCTION(Val DT per Movement   RT) TYPE(RTVOBJ) FILE(PLAFCPP)           AB1248715;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.DSH_Kill_Date);
PARAMETER(PAR.DT_Delivery_Date);
PARAMETER(PAR.DT_Delivery_Time);
PARAMETER(PAR.DT_Delivery_Time_Seq);
PARAMETER(PAR.DT_Movement_Number);
PARAMETER(WRK.Return_Code_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Return Code USR = CND.*Record does not exist
 PAR.Return_Code_USR = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Return Code USR = CND.*Normal
 PAR.Return_Code_USR = *BLANK;

}


// IF PAR.BOH Buy Order Number is NE Zero
IF PAR.BOH_Buy_Order_Number <> *ZERO;

EXECUTE FUNCTION(Val DT per BOL        RT) TYPE(RTVOBJ) FILE(PLAFCPP)           AB1247617;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.DSH_Kill_Date);
PARAMETER(PAR.DT_Delivery_Date);
PARAMETER(PAR.DT_Delivery_Time);
PARAMETER(PAR.DT_Delivery_Time_Seq);
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(WRK.Return_Code_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Return Code USR = CND.*Record does not exist
 PAR.Return_Code_USR = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Return Code USR = CND.*Normal
 PAR.Return_Code_USR = *BLANK;

}


// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Delivery Tracking cannot be created.'
ERROR(PRK1078);

QUIT;

ENDIF;

//?Create Delv Tracking if not there.
CASE;

// IF WRK.Return Code USR is *Record does not exist
IF WRK.Return_Code_USR = 'Y2U0005';

CASE;

// IF PAR.BOH Buy Order Number is NE Zero
IF PAR.BOH_Buy_Order_Number <> *ZERO;

EXECUTE FUNCTION(Rtv Bo Kill Date      RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1247939;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.DSH_Kill_Date);
PARAMETER(LCL.PD_Producer_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

CASE;

// IF PAR.BOH Buy Order Number is NE Zero
IF PAR.BOH_Buy_Order_Number <> *ZERO;

EXECUTE FUNCTION(Rtv Crt Dlv Trck f/BO RT) TYPE(RTVOBJ) FILE(PLAECPP)           AB1246253;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.DSH_Kill_Date);
PARAMETER(PAR.DT_Delivery_Date);
PARAMETER(PAR.DT_Delivery_Time);
PARAMETER(PAR.DT_Delivery_Time_Seq);
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(WRK.Blank_Usr_2);
{
 //?USER: Processing if Data record not found

 // PAR.CC Company Number = PAR.BOH Company Number
 PAR.CC_Company_Number = PAR.BOH_Company_Number;

 EXECUTE FUNCTION(Rtv BOL for DT Create RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1247499;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.DSH_Kill_Date);
 PARAMETER(PAR.DSD_Delivery_Time);
 PARAMETER(LCL.BOL_Pln_Delv_End_Time);
 PARAMETER(LCL.BOL_Pln_Head_Delv);
 PARAMETER(LCL.BOL_Shipped_Wgt);
 PARAMETER(PAR.DSD_Delivery_Date);
 PARAMETER(LCL.BOL_Head_Received);
 PARAMETER(LCL.BOL_Shipped_Head);
 PARAMETER(LCL.PD_Producer_Code);
 PARAMETER(LCL.PL_Location_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Call program Rtv Val DelvDt/Tim    XF.
 CALL PROGRAM(Rtv Val DelvDt/Tim    XF) ('PLBWXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.DSH_Kill_Date);
 PARAMETER(PAR.DSD_Delivery_Date);
 PARAMETER(PAR.DSD_Delivery_Time);
 PARAMETER(PAR.DSD_Delivery_Time_Seq);
 PARAMETER(WRK.Return_Code_USR);

 EXECUTE FUNCTION(Rtv Accum LvWt p/ BOL RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1247001;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(LCL.TH_Avg_Live_Wgt);
 PARAMETER(WRK.Weight_Tot_USR);
 PARAMETER(LCL.DT_Movement_Number);
 PARAMETER(LCL.DT_Hog_Group_Reference);
 {
  //?USER: Initialize routine

  // PAR.Weight Tot USR = CON.*ZERO
  PAR.Weight_Tot_USR = *ZERO;

  // PAR.TH Avg Live Wgt = CON.*ZERO
  PAR.TH_Avg_Live_Wgt = *ZERO;

  //?USER: Process Data record

  // PAR.Weight Tot USR = PAR.Weight Tot USR + DB1.TH Live Wgt
  PAR.Weight_Tot_USR = PAR.Weight_Tot_USR + DB1.TH_Live_Wgt;

  // PAR.DT Movement Number = DB1.TH HPS Movement Ref #
  PAR.DT_Movement_Number = DB1.TH_HPS_Movement_Ref_#;

  // PAR.DT Hog Group Code = DB1.TH Group Reference
  PAR.DT_Hog_Group_Reference = DB1.TH_Group_Reference;

  CASE;

  // IF DB1.TH Hog Class Type is Market
  IF DB1.TH_Hog_Class_Type = 'M';

  // AND PAR.TH Avg Live Wgt is EQ Zero
  AND PAR.TH_Avg_Live_Wgt = *ZERO;

  // PAR.TH Avg Live Wgt = DB1.TH Avg Live Wgt
  PAR.TH_Avg_Live_Wgt = DB1.TH_Avg_Live_Wgt;

  ENDIF;

 }

 EXECUTE FUNCTION(Rtv Producer Nm, Srce RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1162488;
 PARAMETER(LCL.PD_Producer_Code);
 PARAMETER(WRK.PD_Name);
 PARAMETER(LCL.TH_Source_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Source Type       RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1141829;
 PARAMETER(LCL.TH_Source_Code);
 PARAMETER(LCL.TH_Source_Type);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.TH Source Type is Internal
 IF LCL.TH_Source_Type = 'I';

 // LCL.DT Hog Group Code = CON.*BLANK
 LCL.DT_Hog_Group_Reference = *BLANK;

 ENDIF;

 // LCL.DT Scheduled Hour = PAR.DSD Delivery Time / CON.100 *
 LCL.DT_Scheduled_Hour = PAR.DSD_Delivery_Time / 100;

 // LCL.DT Delivered Weight lbs = LCL.BOL Shipped Head * LCL.TH Avg Live Wgt *
 LCL.DT_Delivered_Weight_lbs = LCL.BOL_Shipped_Head * LCL.TH_Avg_Live_Wgt;

 // Call program Rtv System Date & Tim UP.
 CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
 PARAMETER(WRK.*DATE);
 PARAMETER(WRK.*TIME);

 CASE;

 // IF PAR.BOLW Weight Type is In(En)
 IF PAR.BOLW_Weight_Type = 'I';

 // LCL.DT TrkScl Weigh-In Date = WRK.*DATE
 LCL.DT_TrkScl_Weigh_In_Date = WRK.*DATE;

 // LCL.DT TrkScl Weigh-In Time = WRK.*TIME / CON.100 *
 LCL.DT_TrkScl_Weigh_In_Time = WRK.*TIME / 100;

 // IF PAR.BOLW Weight Type is Out(Fuera)
 IF PAR.BOLW_Weight_Type = 'O';

 // LCL.DT TrkScl Weigh-Out Date = WRK.*DATE
 LCL.DT_TrkScl_Weigh_Out_Date = WRK.*DATE;

 // LCL.DT TrkScl Weigh-Out Time = WRK.*TIME / CON.100 *
 LCL.DT_TrkScl_Weigh_Out_Time = WRK.*TIME / 100;

 ENDIF;

 EXECUTE FUNCTION(Crt Delivery Tracking CR) TYPE(CRTOBJ) FILE(PLAFCPP)           AB1244756;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.DSH_Kill_Date);
 PARAMETER(PAR.DSD_Delivery_Date);
 PARAMETER(PAR.DSD_Delivery_Time);
 PARAMETER(PAR.DSD_Delivery_Time_Seq);
 PARAMETER(PAR.DSH_Kill_Date);
 PARAMETER(*ZERO);
 PARAMETER(LCL.DT_Scheduled_Hour);
 PARAMETER('U');
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(LCL.DT_Hog_Group_Reference);
 PARAMETER(LCL.BOL_Shipped_Head);
 PARAMETER(LCL.DT_Delivered_Weight_lbs);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER('F');
 PARAMETER(LCL.DT_Movement_Number);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Blank_Usr_2);
 PARAMETER(WRK.Blank_Usr_2);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(LCL.DT_TrkScl_Weigh_In_Date);
 PARAMETER(LCL.DT_TrkScl_Weigh_In_Time);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.DT_TrkScl_Weigh_Out_Date);
 PARAMETER(LCL.DT_TrkScl_Weigh_Out_Time);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.TH_Source_Type);
 PARAMETER(WRK.DT_GATE_UPDATE_YES);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Blank_USR);
 PARAMETER(WRK.Blank_USR);
 PARAMETER(LCL.PD_Producer_Code);
 PARAMETER(LCL.PL_Location_Code);
 PARAMETER(LCL.TH_Source_Code);
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

  //?USER: Processing if Data record already exists

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Processing after Data update

  EXECUTE FUNCTION(Upd Farm, Movement    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1251472;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(PAR.DT_Movement_Number);
  PARAMETER(PAR.DT_Farm_Site_Code);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.TH HPS Farm Site NE PAR.TH HPS Farm Site
   IF DB1.TH_HPS_Farm_Site <> PAR.TH_HPS_Farm_Site;

   CASE;

   // IF DB1.TH Source Type is Internal
   IF DB1.TH_Source_Type = 'I';

   //?Due to test with e2423 SAW that we were change the
   //?movement and farm site and not the state code
   //?use this retrieve regardless of Not Live Or Live with MTech
   // Call program Rtv HPS Farm Inf-Mtech UP.
   CALL PROGRAM(Rtv HPS Farm Inf-Mtech UP) ('HP293');
   PARAMETER(PGM.*Return_code);
   PARAMETER(NLL.Farm_site_Name_f_HPS_USR);
   PARAMETER(PAR.TH_HPS_Farm_Site);
   PARAMETER(NLL.HPS_FS_Comp_Relation_USR);
   PARAMETER(WRK.State);
   PARAMETER(NLL.HPS_Farm_County);
   PARAMETER(NLL.HPS_Cell_Manager_Code_USR);
   PARAMETER(NLL.HPS_Cell_Manager_Nm_USR);
   PARAMETER(NLL.MTech_Farm_Site_Ref);
   PARAMETER(NLL.MTech_Cell_Manager_Ref);

   EXECUTE FUNCTION(Chg Farm, Movement    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1251473;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(PAR.TH_HPS_Movement_Ref_#);
   PARAMETER(WRK.State);
   PARAMETER(PAR.TH_HPS_Farm_Site);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg Farm, Movement    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1251473;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(PAR.TH_HPS_Movement_Ref_#);
   PARAMETER(DB1.TH_State);
   PARAMETER(PAR.TH_HPS_Farm_Site);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

   ENDIF;

   ENDIF;

  }

 }

 //?3/17/03 create detail to match Unscheduled Tracking record
 EXECUTE FUNCTION(Crt Delv Sched Dtl    CR) TYPE(CRTOBJ) FILE(PLAECPP)           AB1244727;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.DSH_Kill_Date);
 PARAMETER(PAR.DSD_Delivery_Date);
 PARAMETER(PAR.DSD_Delivery_Time);
 PARAMETER(PAR.DSD_Delivery_Time_Seq);
 PARAMETER(LCL.DT_Scheduled_Hour);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(LCL.DT_Hog_Group_Reference);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER('F');
 PARAMETER(LCL.DT_Movement_Number);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER('N');
 PARAMETER(WRK.DSD_Sched_Route_Start_Pnt);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Blank_Usr_1_fld_Usr);
 PARAMETER(WRK.Blank_Usr_1_fld_Usr);
 PARAMETER(WRK.Blank_Usr_1_fld_Usr);
 PARAMETER('A');
 PARAMETER('A');
 PARAMETER('O');
 PARAMETER(LCL.TH_Source_Type);
 PARAMETER(WRK.Blank_Usr_1_fld_Usr);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.TH_Source_Code);
 PARAMETER(LCL.PD_Producer_Code);
 PARAMETER(LCL.PL_Location_Code);
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 EXECUTE FUNCTION(Rtv Shipped Head      RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1226281;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(LCL.BOL_Shipped_Head);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Accum LvWt p/ BOL RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1247001;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(LCL.TH_Avg_Live_Wgt);
 PARAMETER(WRK.Weight_Tot_USR);
 PARAMETER(LCL.DT_Movement_Number);
 PARAMETER(LCL.DT_Hog_Group_Reference);
 {
  //?USER: Initialize routine

  // PAR.Weight Tot USR = CON.*ZERO
  PAR.Weight_Tot_USR = *ZERO;

  // PAR.TH Avg Live Wgt = CON.*ZERO
  PAR.TH_Avg_Live_Wgt = *ZERO;

  //?USER: Process Data record

  // PAR.Weight Tot USR = PAR.Weight Tot USR + DB1.TH Live Wgt
  PAR.Weight_Tot_USR = PAR.Weight_Tot_USR + DB1.TH_Live_Wgt;

  // PAR.DT Movement Number = DB1.TH HPS Movement Ref #
  PAR.DT_Movement_Number = DB1.TH_HPS_Movement_Ref_#;

  // PAR.DT Hog Group Code = DB1.TH Group Reference
  PAR.DT_Hog_Group_Reference = DB1.TH_Group_Reference;

  CASE;

  // IF DB1.TH Hog Class Type is Market
  IF DB1.TH_Hog_Class_Type = 'M';

  // AND PAR.TH Avg Live Wgt is EQ Zero
  AND PAR.TH_Avg_Live_Wgt = *ZERO;

  // PAR.TH Avg Live Wgt = DB1.TH Avg Live Wgt
  PAR.TH_Avg_Live_Wgt = DB1.TH_Avg_Live_Wgt;

  ENDIF;

 }

 //?New 1/28/04
 CASE;

 // IF DB1.DSD Source Type is Internal
 IF DB1.DSD_Source_Type = 'I';

 // LCL.DT Hog Group Code = DB1.DSD Hog Group Code
 LCL.DT_Hog_Group_Reference = DB1.DSD_Hog_Group_Code;

 // LCL.DT Movement Number = DB1.DSD Movement Number
 LCL.DT_Movement_Number = DB1.DSD_Movement_Number;

 ENDIF;

 // LCL.DT Delivered Weight lbs = LCL.BOL Shipped Head * LCL.TH Avg Live Wgt *
 LCL.DT_Delivered_Weight_lbs = LCL.BOL_Shipped_Head * LCL.TH_Avg_Live_Wgt;

 CASE;

 // IF PAR.BOLW Weight Type is In(En)
 IF PAR.BOLW_Weight_Type = 'I';

 // LCL.DT TrkScl Weigh-In Date = JOB.*Job date
 LCL.DT_TrkScl_Weigh_In_Date = JOB.*Job_date;

 // LCL.DT TrkScl Weigh-In Time = JOB.*Job time / CON.100 *
 LCL.DT_TrkScl_Weigh_In_Time = JOB.*Job_time / 100;

 // IF PAR.BOLW Weight Type is Out(Fuera)
 IF PAR.BOLW_Weight_Type = 'O';

 // LCL.DT TrkScl Weigh-Out Date = JOB.*Job date
 LCL.DT_TrkScl_Weigh_Out_Date = JOB.*Job_date;

 // LCL.DT TrkScl Weigh-Out Time = JOB.*Job time / CON.100 *
 LCL.DT_TrkScl_Weigh_Out_Time = JOB.*Job_time / 100;

 ENDIF;

 //?10/15/03 If it was transferrd, use Transfer Sts from DSD
 CASE;

 // IF DB1.DSD Transfer Sts is *ALL values
 IF DB1.DSD_Transfer_Sts = 'P'/'M';

 // LCL.DT Delivery Initiation = DB1.DSD Transfer Sts
 LCL.DT_Delivery_Initiation = DB1.DSD_Transfer_Sts;

 //?10/15/03 If it was transferrd, use Transfer Sts from DSD
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.DT Delivery Initiation = CND.Scheduled
 LCL.DT_Delivery_Initiation = 'S';

 ENDIF;

 //?Note:  Check this out Susan Mason Mtech
 EXECUTE FUNCTION(Crt Delivery Tracking CR) TYPE(CRTOBJ) FILE(PLAFCPP)           AB1244756;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.DSH_Kill_Date);
 PARAMETER(DB1.DSD_Delivery_Date);
 PARAMETER(DB1.DSD_Delivery_Time);
 PARAMETER(DB1.DSD_Delivery_Time_Seq);
 PARAMETER(DB1.DSH_Kill_Date);
 PARAMETER(*ZERO);
 PARAMETER(DB1.DSD_Scheduled_Hour);
 PARAMETER(LCL.DT_Delivery_Initiation);
 PARAMETER(DB1.DSD_Farm_Site_Code);
 PARAMETER(DB1.DSD_Building);
 PARAMETER(DB1.DSD_Room);
 PARAMETER(DB1.DSD_Sire_Line_Code);
 PARAMETER(LCL.DT_Hog_Group_Reference);
 PARAMETER(LCL.BOL_Shipped_Head);
 PARAMETER(LCL.DT_Delivered_Weight_lbs);
 PARAMETER(DB1.DSD_Trucker_Code_HPS);
 PARAMETER(DB1.DSD_Driver);
 PARAMETER(DB1.DSD_Loading_Crew);
 PARAMETER(DB1.CHR_Code);
 PARAMETER(DB1.DSD_Load_Type);
 PARAMETER(DB1.DSD_Full_Split_Load);
 PARAMETER(LCL.DT_Movement_Number);
 PARAMETER(DB1.DSD_Truck_ID);
 PARAMETER(DB1.DSD_Trailer_ID);
 PARAMETER(DB1.DSD_Transportation_Office);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Blank_Usr_2);
 PARAMETER(DB1.DSD_Sched_Route_Start_Pnt);
 PARAMETER(DB1.DSD_Sched_Route_Start_Dte);
 PARAMETER(DB1.DSD_Sched_Route_Start_Tim);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.DSD_Sch_Farm_Arrival_Date);
 PARAMETER(DB1.DSD_Sch_Farm_Arrival_Time);
 PARAMETER(*ZERO);
 PARAMETER(DB1.DSD_Sch_Start_Load_Date);
 PARAMETER(DB1.DSD_Sch_Start_Load_Time);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(LCL.DT_TrkScl_Weigh_In_Date);
 PARAMETER(LCL.DT_TrkScl_Weigh_In_Time);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.DT_TrkScl_Weigh_Out_Date);
 PARAMETER(LCL.DT_TrkScl_Weigh_Out_Time);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.DSD_Source_Type);
 PARAMETER(WRK.DT_GATE_UPDATE_YES);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.DSD_Scheduled_Delv_Head);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Blank_USR);
 PARAMETER(WRK.Blank_USR);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.SR_Source_Code);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

  //?USER: Processing if Data record already exists

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Processing after Data update

  EXECUTE FUNCTION(Upd Farm, Movement    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1251472;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(PAR.DT_Movement_Number);
  PARAMETER(PAR.DT_Farm_Site_Code);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.TH HPS Farm Site NE PAR.TH HPS Farm Site
   IF DB1.TH_HPS_Farm_Site <> PAR.TH_HPS_Farm_Site;

   CASE;

   // IF DB1.TH Source Type is Internal
   IF DB1.TH_Source_Type = 'I';

   //?Due to test with e2423 SAW that we were change the
   //?movement and farm site and not the state code
   //?use this retrieve regardless of Not Live Or Live with MTech
   // Call program Rtv HPS Farm Inf-Mtech UP.
   CALL PROGRAM(Rtv HPS Farm Inf-Mtech UP) ('HP293');
   PARAMETER(PGM.*Return_code);
   PARAMETER(NLL.Farm_site_Name_f_HPS_USR);
   PARAMETER(PAR.TH_HPS_Farm_Site);
   PARAMETER(NLL.HPS_FS_Comp_Relation_USR);
   PARAMETER(WRK.State);
   PARAMETER(NLL.HPS_Farm_County);
   PARAMETER(NLL.HPS_Cell_Manager_Code_USR);
   PARAMETER(NLL.HPS_Cell_Manager_Nm_USR);
   PARAMETER(NLL.MTech_Farm_Site_Ref);
   PARAMETER(NLL.MTech_Cell_Manager_Ref);

   EXECUTE FUNCTION(Chg Farm, Movement    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1251473;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(PAR.TH_HPS_Movement_Ref_#);
   PARAMETER(WRK.State);
   PARAMETER(PAR.TH_HPS_Farm_Site);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg Farm, Movement    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1251473;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(PAR.TH_HPS_Movement_Ref_#);
   PARAMETER(DB1.TH_State);
   PARAMETER(PAR.TH_HPS_Farm_Site);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

   ENDIF;

   ENDIF;

  }

 }

 //?USER: Exit processing

 CASE;

 // IF DB1.DSD Full/Split Load is Split
 IF DB1.DSD_Full_Split_Load = 'S';

 EXECUTE FUNCTION(Rtv Crt Tracking Splt RT) TYPE(RTVOBJ) FILE(PLAGCPP)           AB1250086;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.DSH_Kill_Date);
 PARAMETER(DB1.DSD_Delivery_Date);
 PARAMETER(DB1.DSD_Delivery_Time);
 PARAMETER(DB1.DSD_Delivery_Time_Seq);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Crt Delv Trckng Split CR) TYPE(CRTOBJ) FILE(PLAJCPP)           AB1245170;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(DB1.DSH_Kill_Date);
  PARAMETER(DB1.DSD_Delivery_Date);
  PARAMETER(DB1.DSD_Delivery_Time);
  PARAMETER(DB1.DSD_Delivery_Time_Seq);
  PARAMETER(DB1.DSS_Split_Sequence);
  PARAMETER(DB1.DSS_Building);
  PARAMETER(DB1.DSS_Room);
  PARAMETER(DB1.DSS_Sire_Line_Code);
  PARAMETER(DB1.DSS_Hog_Group_Code);
  PARAMETER(DB1.DSS_Scheduled_Head);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER('N');
  PARAMETER('N');
  PARAMETER('N');
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

 }

 ENDIF;

}


// IF *OTHERWISE
IF *OTHERWISE;

// PAR.CC Company Number = PAR.BOH Company Number
PAR.CC_Company_Number = PAR.BOH_Company_Number;

EXECUTE FUNCTION(RTV Crt Dlv Tracking  RT) TYPE(RTVOBJ) FILE(PLAECPP)           AB1246250;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.DSH_Kill_Date);
PARAMETER(PAR.DT_Delivery_Date);
PARAMETER(PAR.DT_Delivery_Time);
PARAMETER(PAR.DT_Delivery_Time_Seq);
PARAMETER(PAR.DT_Movement_Number);
PARAMETER(LCL.Return_Code_USR);
{
 //?USER: Initialize routine

 // PAR.Return Code USR = CND.*Normal
 PAR.Return_Code_USR = *BLANK;

 //?USER: Processing if Data record not found

 // PAR.Return Code USR = CND.*Record does not exist
 PAR.Return_Code_USR = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 EXECUTE FUNCTION(Rtv Shipped Head      RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1226281;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(LCL.BOL_Shipped_Head);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Accum LvWt p/ BOL RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1247001;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(LCL.TH_Avg_Live_Wgt);
 PARAMETER(WRK.Weight_Tot_USR);
 PARAMETER(LCL.DT_Movement_Number);
 PARAMETER(LCL.DT_Hog_Group_Reference);
 {
  //?USER: Initialize routine

  // PAR.Weight Tot USR = CON.*ZERO
  PAR.Weight_Tot_USR = *ZERO;

  // PAR.TH Avg Live Wgt = CON.*ZERO
  PAR.TH_Avg_Live_Wgt = *ZERO;

  //?USER: Process Data record

  // PAR.Weight Tot USR = PAR.Weight Tot USR + DB1.TH Live Wgt
  PAR.Weight_Tot_USR = PAR.Weight_Tot_USR + DB1.TH_Live_Wgt;

  // PAR.DT Movement Number = DB1.TH HPS Movement Ref #
  PAR.DT_Movement_Number = DB1.TH_HPS_Movement_Ref_#;

  // PAR.DT Hog Group Code = DB1.TH Group Reference
  PAR.DT_Hog_Group_Reference = DB1.TH_Group_Reference;

  CASE;

  // IF DB1.TH Hog Class Type is Market
  IF DB1.TH_Hog_Class_Type = 'M';

  // AND PAR.TH Avg Live Wgt is EQ Zero
  AND PAR.TH_Avg_Live_Wgt = *ZERO;

  // PAR.TH Avg Live Wgt = DB1.TH Avg Live Wgt
  PAR.TH_Avg_Live_Wgt = DB1.TH_Avg_Live_Wgt;

  ENDIF;

 }

 //?NEW 1/28/04 IF EXTERNAL, USE WHATS ON THE TH ELSE USE THIS FROM THE DSD
 CASE;

 // IF DB1.DSD Source Type is Internal
 IF DB1.DSD_Source_Type = 'I';

 // LCL.DT Movement Number = DB1.DSD Movement Number
 LCL.DT_Movement_Number = DB1.DSD_Movement_Number;

 // LCL.DT Hog Group Code = DB1.DSD Hog Group Code
 LCL.DT_Hog_Group_Reference = DB1.DSD_Hog_Group_Code;

 ENDIF;

 // LCL.DT Delivered Weight lbs = LCL.BOL Shipped Head * LCL.TH Avg Live Wgt *
 LCL.DT_Delivered_Weight_lbs = LCL.BOL_Shipped_Head * LCL.TH_Avg_Live_Wgt;

 EXECUTE FUNCTION(Crt Delivery Tracking CR) TYPE(CRTOBJ) FILE(PLAFCPP)           AB1244756;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.DSH_Kill_Date);
 PARAMETER(DB1.DSD_Delivery_Date);
 PARAMETER(DB1.DSD_Delivery_Time);
 PARAMETER(DB1.DSD_Delivery_Time_Seq);
 PARAMETER(DB1.DSH_Kill_Date);
 PARAMETER(*ZERO);
 PARAMETER(DB1.DSD_Scheduled_Hour);
 PARAMETER('S');
 PARAMETER(DB1.DSD_Farm_Site_Code);
 PARAMETER(DB1.DSD_Building);
 PARAMETER(DB1.DSD_Room);
 PARAMETER(DB1.DSD_Sire_Line_Code);
 PARAMETER(LCL.DT_Hog_Group_Reference);
 PARAMETER(LCL.BOL_Shipped_Head);
 PARAMETER(LCL.DT_Delivered_Weight_lbs);
 PARAMETER(DB1.DSD_Trucker_Code_HPS);
 PARAMETER(DB1.DSD_Driver);
 PARAMETER(DB1.DSD_Loading_Crew);
 PARAMETER(DB1.CHR_Code);
 PARAMETER(DB1.DSD_Load_Type);
 PARAMETER(DB1.DSD_Full_Split_Load);
 PARAMETER(LCL.DT_Movement_Number);
 PARAMETER(DB1.DSD_Truck_ID);
 PARAMETER(DB1.DSD_Trailer_ID);
 PARAMETER(DB1.DSD_Transportation_Office);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Blank_Usr_2);
 PARAMETER(DB1.DSD_Sched_Route_Start_Pnt);
 PARAMETER(DB1.DSD_Sched_Route_Start_Dte);
 PARAMETER(DB1.DSD_Sched_Route_Start_Tim);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.DSD_Sch_Farm_Arrival_Date);
 PARAMETER(DB1.DSD_Sch_Farm_Arrival_Time);
 PARAMETER(*ZERO);
 PARAMETER(DB1.DSD_Sch_Start_Load_Date);
 PARAMETER(DB1.DSD_Sch_Start_Load_Time);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.DSD_Source_Type);
 PARAMETER(WRK.Blank_Usr_1_fld_Usr);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.DSD_Scheduled_Delv_Head);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Blank_USR);
 PARAMETER(WRK.Blank_USR);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.SR_Source_Code);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

  //?USER: Processing if Data record already exists

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Processing after Data update

  EXECUTE FUNCTION(Upd Farm, Movement    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1251472;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(PAR.DT_Movement_Number);
  PARAMETER(PAR.DT_Farm_Site_Code);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.TH HPS Farm Site NE PAR.TH HPS Farm Site
   IF DB1.TH_HPS_Farm_Site <> PAR.TH_HPS_Farm_Site;

   CASE;

   // IF DB1.TH Source Type is Internal
   IF DB1.TH_Source_Type = 'I';

   //?Due to test with e2423 SAW that we were change the
   //?movement and farm site and not the state code
   //?use this retrieve regardless of Not Live Or Live with MTech
   // Call program Rtv HPS Farm Inf-Mtech UP.
   CALL PROGRAM(Rtv HPS Farm Inf-Mtech UP) ('HP293');
   PARAMETER(PGM.*Return_code);
   PARAMETER(NLL.Farm_site_Name_f_HPS_USR);
   PARAMETER(PAR.TH_HPS_Farm_Site);
   PARAMETER(NLL.HPS_FS_Comp_Relation_USR);
   PARAMETER(WRK.State);
   PARAMETER(NLL.HPS_Farm_County);
   PARAMETER(NLL.HPS_Cell_Manager_Code_USR);
   PARAMETER(NLL.HPS_Cell_Manager_Nm_USR);
   PARAMETER(NLL.MTech_Farm_Site_Ref);
   PARAMETER(NLL.MTech_Cell_Manager_Ref);

   EXECUTE FUNCTION(Chg Farm, Movement    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1251473;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(PAR.TH_HPS_Movement_Ref_#);
   PARAMETER(WRK.State);
   PARAMETER(PAR.TH_HPS_Farm_Site);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg Farm, Movement    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1251473;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(PAR.TH_HPS_Movement_Ref_#);
   PARAMETER(DB1.TH_State);
   PARAMETER(PAR.TH_HPS_Farm_Site);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

   ENDIF;

   ENDIF;

  }

 }

 //?USER: Exit processing

 CASE;

 // IF DB1.DSD Full/Split Load is Split
 IF DB1.DSD_Full_Split_Load = 'S';

 EXECUTE FUNCTION(Rtv Crt Tracking Splt RT) TYPE(RTVOBJ) FILE(PLAGCPP)           AB1250086;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.DSH_Kill_Date);
 PARAMETER(DB1.DSD_Delivery_Date);
 PARAMETER(DB1.DSD_Delivery_Time);
 PARAMETER(DB1.DSD_Delivery_Time_Seq);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Crt Delv Trckng Split CR) TYPE(CRTOBJ) FILE(PLAJCPP)           AB1245170;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(DB1.DSH_Kill_Date);
  PARAMETER(DB1.DSD_Delivery_Date);
  PARAMETER(DB1.DSD_Delivery_Time);
  PARAMETER(DB1.DSD_Delivery_Time_Seq);
  PARAMETER(DB1.DSS_Split_Sequence);
  PARAMETER(DB1.DSS_Building);
  PARAMETER(DB1.DSS_Room);
  PARAMETER(DB1.DSS_Sire_Line_Code);
  PARAMETER(DB1.DSS_Hog_Group_Code);
  PARAMETER(DB1.DSS_Scheduled_Head);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER('N');
  PARAMETER('N');
  PARAMETER('N');
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

 }

 ENDIF;

}


ENDIF;

//?Hard error:  Tracking could not be created because BOL and DSD dont exist.
CASE;

// IF LCL.Return Code USR is *Record does not exist
IF LCL.Return_Code_USR = 'Y2U0005';

// Send error message - 'Delivery Tracking cannot be created.'
ERROR(PRK1078);

PGM.*Return_code = 'ERROR';

RETURN;

ENDIF;

ENDIF;

CASE;

// IF PAR.Status 2 is Yes
IF PAR.Status_2 = 'Y';

// PAR.Status 1 = CND.No
PAR.Status_1 = 'N';

// DOW PAR.Status 1 is No
DOW PAR.Status_1 = 'N';

// Call program Edt Delivery Tracking ER.
CALL PROGRAM(Edt Delivery Tracking ER) ('PLAZE1R');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.DSH_Kill_Date);
PARAMETER(PAR.DT_Delivery_Date);
PARAMETER(PAR.DT_Delivery_Time);
PARAMETER(PAR.DT_Delivery_Time_Seq);
PARAMETER(PAR.Status_1);
PARAMETER(PAR.Trk_Arrival_Sched_Sts);

ENDDO;

ENDIF;

