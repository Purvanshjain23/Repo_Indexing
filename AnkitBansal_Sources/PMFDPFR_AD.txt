// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMFDPFR
// ?Date: 14.08.2025 Time: 12:05:33
// ?------------------------------------------------------------------------------------------------

//?USER: Print required level headings

// SUPPRESSED PRINT ISC Week Ending Date header format

// SUPPRESSED PRINT ISC Warehouse Company header format

// SUPPRESSED PRINT ISC Warehouse Code header format

// SUPPRESSED PRINT ISC Item Code header format

//?USER: On print of detail format

CASE;

// IF DB1.Inventory Trans. Type is Adjustment Quantity
IF DB1.Inventory_Trans_Type = 'A';

// PAR.WF Trans Total type A = DB1.Transaction Weight
PAR.WF_Trans_Total_type_A = DB1.Transaction_Weight;

// PAR.WF Trans Total type A qty = DB1.Transaction Quantity
PAR.WF_Trans_Total_type_A_qty = DB1.Transaction_Quantity;

// IF DB1.Inventory Trans. Type is Adjustment Physical
IF DB1.Inventory_Trans_Type = 'AP';

// PAR.WF Trans Total type AP = DB1.Transaction Weight
PAR.WF_Trans_Total_type_AP = DB1.Transaction_Weight;

// PAR.WF Trans Total type AP qt = DB1.Transaction Quantity
PAR.WF_Trans_Total_type_AP_qt = DB1.Transaction_Quantity;

// IF DB1.Inventory Trans. Type is Adjustment Weight
IF DB1.Inventory_Trans_Type = 'AW';

// PAR.WF Trans total Type AW = DB1.Transaction Weight
PAR.WF_Trans_total_Type_AW = DB1.Transaction_Weight;

// PAR.WF Trans total Type AW qt = DB1.Transaction Quantity
PAR.WF_Trans_total_Type_AW_qt = DB1.Transaction_Quantity;

// IF DB1.Inventory Trans. Type is Issue Order Process
IF DB1.Inventory_Trans_Type = 'IO';

// PAR.WF Trans total Type IO = DB1.Transaction Weight
PAR.WF_Trans_total_Type_IO = DB1.Transaction_Weight;

// PAR.WF Trans total Type IO qt = DB1.Transaction Quantity
PAR.WF_Trans_total_Type_IO_qt = DB1.Transaction_Quantity;

// IF DB1.Inventory Trans. Type is Transfer Warehouse
IF DB1.Inventory_Trans_Type = 'TW';

// PAR.WF Trans total Type TW = DB1.Transaction Weight
PAR.WF_Trans_total_Type_TW = DB1.Transaction_Weight;

// PAR.WF Trans total Type TW qt = DB1.Transaction Quantity
PAR.WF_Trans_total_Type_TW_qt = DB1.Transaction_Quantity;

// IF DB1.Inventory Trans. Type is Receipt Production
IF DB1.Inventory_Trans_Type = 'RR';

// PAR.WF Trans Total type RR = DB1.Transaction Weight
PAR.WF_Trans_Total_type_RR = DB1.Transaction_Weight;

// PAR.WF Trans Total type RR qt = DB1.Transaction Quantity
PAR.WF_Trans_Total_type_RR_qt = DB1.Transaction_Quantity;

// IF DB1.Inventory Trans. Type is Receipt Miscellaneous
IF DB1.Inventory_Trans_Type = 'R';

// PAR.WF Trans Total type R Wgt = DB1.Transaction Weight
PAR.WF_Trans_Total_type_R_Wgt = DB1.Transaction_Weight;

// PAR.WF Trans Total type R qty = DB1.Transaction Quantity
PAR.WF_Trans_Total_type_R_qty = DB1.Transaction_Quantity;

// IF DB1.Inventory Trans. Type is Issue Miscellaneous
IF DB1.Inventory_Trans_Type = 'I';

// PAR.WF Trans Total type I Wgt = DB1.Transaction Weight
PAR.WF_Trans_Total_type_I_Wgt = DB1.Transaction_Weight;

// PAR.WF Trans Total type I qty = DB1.Transaction Quantity
PAR.WF_Trans_Total_type_I_qty = DB1.Transaction_Quantity;

ENDIF;

//?USER: Print required level totals

CASE;

IF NEW ISC_Item_Code;
EXECUTE FUNCTION(Rtv Chg/Crt ISC TranSm RT) TYPE(RTVOBJ) FILE(PMALCPP)          AC1814056;
PARAMETER(CUR.ISC_Week_Ending_Date);
PARAMETER(CUR.ISC_Warehouse_Company);
PARAMETER(CUR.ISC_Warehouse_Code);
PARAMETER(CUR.ISC_Item_Code);
PARAMETER(PAR.WF_Trans_Total_type_A);
PARAMETER(PAR.WF_Trans_total_Type_AW);
PARAMETER(PAR.WF_Trans_Total_type_AP);
PARAMETER(PAR.WF_Trans_total_Type_IO);
PARAMETER(PAR.WF_Trans_Total_type_RR);
PARAMETER(PAR.WF_Trans_total_Type_TW);
PARAMETER(PAR.WF_Trans_Total_type_RR_qt);
PARAMETER(PAR.WF_Trans_Total_type_A_qty);
PARAMETER(PAR.WF_Trans_total_Type_TW_qt);
PARAMETER(PAR.WF_Trans_total_Type_AW_qt);
PARAMETER(PAR.WF_Trans_Total_type_AP_qt);
PARAMETER(PAR.WF_Trans_total_Type_IO_qt);
PARAMETER(PAR.WF_Trans_Total_type_R_Wgt);
PARAMETER(PAR.WF_Trans_Total_type_R_qty);
PARAMETER(PAR.WF_Trans_Total_type_I_Wgt);
PARAMETER(PAR.WF_Trans_Total_type_I_qty);
PARAMETER(PAR.Status_Y_or_N);
{
 //?USER: Initialize routine

 //?RMC Rtv Prior week ending date to get ISC Lst End Inv Adj
 //?R9083 06/26/17 DN-Update date conversion due to Synon version difference.
 // LCL.Date Out (8,0) USR = PAR.ISC Week Ending Date
 LCL.Date_Out_80_USR = PAR.ISC_Week_Ending_Date;

 // WRK.Date (Char-8) USR = CVTVAR(LCL.Date Out (8,0) USR)
 WRK.Date_Char_8_USR = CVTVAR(LCL.Date_Out_80_USR);

 // WRK.Date (Char-6) USR = SUBSTRING(WRK.Date (Char-8) USR,CON.3,CON.6)
 WRK.Date_Char_6_USR = SUBSTRING(WRK.Date_Char_8_USR:3:6);

 // WRK.Date (Alpha) USR = CONCAT(CON.1,WRK.Date (Char-6) USR,CND.*None)
 WRK.Date_Alpha_USR = '1' + WRK.Date_Char_6_USR (*ZERO);

 // WRK.To Date               USR = CVTVAR(WRK.Date (Alpha) USR)
 WRK.To_Date_USR = CVTVAR(WRK.Date_Alpha_USR);

 EXECUTE FUNCTION(Rtv Prior Saturday    RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1618543;
 PARAMETER(PAR.ISC_Warehouse_Company);
 PARAMETER(WRK.To_Date_USR);
 PARAMETER(WRK.Date_Out);
 {
  //?USER: Initialize routine

  // LCL.First Time Flag = CND.Yes
  LCL.First_Time_Flag = 'Y';

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF LCL.First Time Flag is Yes
  IF LCL.First_Time_Flag = 'Y';

  // LCL.First Time Flag = CND.NO
  LCL.First_Time_Flag = 'N';

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF DB1.Day of Week is Saturday
  IF DB1.Day_of_Week = '7';

  // PAR.Date Out = DB1.Post to G/L Date
  PAR.Date_Out = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  ENDIF;

 }

 // WRK.Date (Alpha) USR = CVTVAR(WRK.Date Out)
 WRK.Date_Alpha_USR = CVTVAR(WRK.Date_Out);

 // WRK.Date (Char-6) USR = SUBSTRING(WRK.Date (Alpha) USR,CON.2,CON.6)
 WRK.Date_Char_6_USR = SUBSTRING(WRK.Date_Alpha_USR:2:6);

 // LCL.Date (Char-8) USR = CONCAT(CON.20,WRK.Date (Char-6) USR,CON.*ZERO)
 LCL.Date_Char_8_USR = '20' + WRK.Date_Char_6_USR (*ZERO);

 // PAR.Last Week Ending Date USR = CVTVAR(LCL.Date (Char-8) USR)
 PAR.Last_Week_Ending_Date_USR = CVTVAR(LCL.Date_Char_8_USR);

 //?USER: Processing if Data record not found

 CASE;

 // IF PAR.ISC Warehouse Code is Warehouse Code not Blank
 IF PAR.ISC_Warehouse_Code <> *BLANK;

 // AND PAR.Status - Y or N is Not Yes
 AND PAR.Status_Y_or_N = *BLANK/'N';

 EXECUTE FUNCTION(Rtv for WF ISC Dwnld  RT) TYPE(RTVOBJ) FILE(PPBSCPP)           AC1813961;
 PARAMETER(PAR.ISC_Week_Ending_Date);
 PARAMETER(PAR.ISC_Warehouse_Company);
 PARAMETER(PAR.ISC_Warehouse_Code);
 PARAMETER(PAR.ISC_Item_Code);
 PARAMETER(PAR.ISC_Begin_Inv_Final_Qty);
 PARAMETER(PAR.ISC_Begin_Inv_Final_Lbs);
 PARAMETER(PAR.WF_ISC_Floor_Prod_Adj_qty);
 PARAMETER(PAR.WF_ISC_Floor_Prod_Adj_Lbs);
 PARAMETER(PAR.ISC_Sun_Ship_Inv_Adj_Qty);
 PARAMETER(PAR.ISC_Sun_Ship_Inv_Adj_Lbs);
 PARAMETER(PAR.ISC_Unsh_Ship_Inv_Adj_Qty);
 PARAMETER(PAR.ISC_Unsh_Ship_Inv_Adj_Lbs);
 PARAMETER(PAR.WF_ISC_Part_Rej_Curr_Qty);
 PARAMETER(PAR.WF_ISC_Part_Rej_Curr_Lbs);
 PARAMETER(PAR.WF_ISC_End_Inv_Adj_Qty);
 PARAMETER(PAR.WF_ISC_End_Inv_Adj_Lbs);
 PARAMETER(PAR.ISC_Ending_Inv_Final_Qty);
 PARAMETER(PAR.ISC_Ending_Inv_Final_Lbs);
 PARAMETER(PAR.Weight_Sales_usr);
 PARAMETER(PAR.Weight_End_Inv_usr);
 PARAMETER(PAR.Weight_Prod_usr);
 PARAMETER(PAR.Weight_Beg_Inv_usr);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  CASE;

  // IF DB1.ISC Item U/M - Pricing is Head Set
  IF DB1.ISC_Item_UOM_Pricing = 'HS';

  // OR DB1.ISC Item U/M - Pricing is Each
  OR DB1.ISC_Item_UOM_Pricing = 'EA';

  //?For Casings -- use qty
  // Compute: qty    sales usr
  PAR.Weight_Sales_usr = PAR.Weight_Sales_usr + ( DB1.ISC_Shipment_Final_Qty * 1 'H' );

  // Compute: qty    End inv
  PAR.Weight_End_Inv_usr = ( DB1.ISC_Ending_Inv_Final_Qty * 1 'H' ) + PAR.Weight_End_Inv_usr;

  // Compute: Qty    prod usr
  PAR.Weight_Prod_usr = PAR.Weight_Prod_usr + ( ( DB1.ISC_Floor_Production_Qty
  + DB1.ISC_Floor_Prod_Adj_Qty ) * 1 'H' );

  // Compute: Qty   beg inv us
  PAR.Weight_Beg_Inv_usr = PAR.Weight_Beg_Inv_usr + ( DB1.ISC_Begin_Inv_Final_Qty * 1 'H' );

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Compute: weight sales usr
  PAR.Weight_Sales_usr = PAR.Weight_Sales_usr + ( DB1.ISC_Shipment_Final_Lbs * 1 'H' );

  // Compute: weight End inv
  PAR.Weight_End_Inv_usr = ( DB1.ISC_Ending_Inv_Final_Lbs * 1 'H' ) + PAR.Weight_End_Inv_usr;

  // Compute: Weight prod usr
  PAR.Weight_Prod_usr = PAR.Weight_Prod_usr + ( ( DB1.ISC_Floor_Production_Lbs
  + DB1.ISC_Floor_Prod_Adj_Lbs ) * 1 'H' );

  // Compute weight beg inv us
  PAR.Weight_Beg_Inv_usr = PAR.Weight_Beg_Inv_usr + ( DB1.ISC_Begin_Inv_Final_Lbs * 1 'H' );

  ENDIF;

 }

 EXECUTE FUNCTION(Rtv Last Week End Inv RT) TYPE(RTVOBJ) FILE(PPBSCPP)           AC1822035;
 PARAMETER(PAR.Last_Week_Ending_Date_USR);
 PARAMETER(PAR.ISC_Warehouse_Company);
 PARAMETER(PAR.ISC_Warehouse_Code);
 PARAMETER(PAR.ISC_Item_Code);
 PARAMETER(PAR.WF_Lst_Sun_Shp_Inv_Adj_Qt);
 PARAMETER(PAR.WF_Lst_Sun_Shp_Inv_Adj_Lb);
 PARAMETER(PAR.WF_Lst_Unsh_Ship_Inv_Qty);
 PARAMETER(PAR.WF_Lst_Unsh_Ship_Inv_Lbs);
 PARAMETER(PAR.WF_ISC_Part_Rej_Last_Qty);
 PARAMETER(PAR.WF_ISC_Part_Rej_Last_Lbs);
 PARAMETER(PAR.WF_Lst_End_Inv_Adj_Qty);
 PARAMETER(PAR.WF_Lst_End_Inv_Adj_Lbs);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Combine Warehouses
 EXECUTE FUNCTION(Rtv for WF ISC DwnCMB RT) TYPE(RTVOBJ) FILE(PPBSCPP)           AC1814060;
 PARAMETER(PAR.ISC_Week_Ending_Date);
 PARAMETER(PAR.ISC_Warehouse_Company);
 PARAMETER(PAR.ISC_Item_Code);
 PARAMETER(PAR.ISC_Begin_Inv_Final_Lbs);
 PARAMETER(PAR.ISC_Ending_Inv_Final_Lbs);
 PARAMETER(PAR.ISC_Begin_Inv_Final_Qty);
 PARAMETER(PAR.ISC_Ending_Inv_Final_Qty);
 PARAMETER(PAR.ISC_Unsh_Ship_Inv_Adj_Lbs);
 PARAMETER(PAR.ISC_Unsh_Ship_Inv_Adj_Qty);
 PARAMETER(PAR.ISC_Sun_Ship_Inv_Adj_Lbs);
 PARAMETER(PAR.ISC_Sun_Ship_Inv_Adj_Qty);
 PARAMETER(PAR.WF_ISC_Floor_Prod_Adj_Lbs);
 PARAMETER(PAR.WF_ISC_Floor_Prod_Adj_qty);
 PARAMETER(PAR.WF_ISC_Part_Rej_Curr_Lbs);
 PARAMETER(PAR.WF_ISC_Part_Rej_Curr_Qty);
 PARAMETER(PAR.WF_ISC_End_Inv_Adj_Lbs);
 PARAMETER(PAR.WF_ISC_End_Inv_Adj_Qty);
 PARAMETER(PAR.Weight_Sales_usr);
 PARAMETER(PAR.Weight_End_Inv_usr);
 PARAMETER(PAR.Weight_Prod_usr);
 PARAMETER(PAR.Weight_Beg_Inv_usr);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.ISC Warehouse Company EQ PAR.ISC Warehouse Company
  IF DB1.ISC_Warehouse_Company = PAR.ISC_Warehouse_Company;

  // PAR.ISC Beg Inv Final Lbs = PAR.ISC Beg Inv Final Lbs + DB1.ISC Beg Inv Final Lbs
  PAR.ISC_Begin_Inv_Final_Lbs = PAR.ISC_Begin_Inv_Final_Lbs + DB1.ISC_Begin_Inv_Final_Lbs;

  // PAR.ISC Beg Inv Final Qty = PAR.ISC Beg Inv Final Qty + DB1.ISC Beg Inv Final Qty
  PAR.ISC_Begin_Inv_Final_Qty = PAR.ISC_Begin_Inv_Final_Qty + DB1.ISC_Begin_Inv_Final_Qty;

  // PAR.ISC End Inv Final Lbs = PAR.ISC End Inv Final Lbs + DB1.ISC End Inv Final Lbs
  PAR.ISC_Ending_Inv_Final_Lbs = PAR.ISC_Ending_Inv_Final_Lbs
  + DB1.ISC_Ending_Inv_Final_Lbs;

  // PAR.ISC End Inv Final Qty = PAR.ISC End Inv Final Qty + DB1.ISC End Inv Final Qty
  PAR.ISC_Ending_Inv_Final_Qty = PAR.ISC_Ending_Inv_Final_Qty
  + DB1.ISC_Ending_Inv_Final_Qty;

  // PAR.ISC Unsh/Ship Inv Adj Lbs = PAR.ISC Unsh/Ship Inv Adj Lbs + DB1.ISC Unsh/Ship Inv Adj Lbs
  PAR.ISC_Unsh_Ship_Inv_Adj_Lbs = PAR.ISC_Unsh_Ship_Inv_Adj_Lbs
  + DB1.ISC_Unsh_Ship_Inv_Adj_Lbs;

  // PAR.ISC Unsh/Ship Inv Adj Qty = PAR.ISC Unsh/Ship Inv Adj Qty + DB1.ISC Unsh/Ship Inv Adj Qty
  PAR.ISC_Unsh_Ship_Inv_Adj_Qty = PAR.ISC_Unsh_Ship_Inv_Adj_Qty
  + DB1.ISC_Unsh_Ship_Inv_Adj_Qty;

  // PAR.ISC Sun Shp Inv Adj Lbs = PAR.ISC Sun Shp Inv Adj Lbs + DB1.ISC Sun Shp Inv Adj Lbs
  PAR.ISC_Sun_Ship_Inv_Adj_Lbs = PAR.ISC_Sun_Ship_Inv_Adj_Lbs
  + DB1.ISC_Sun_Ship_Inv_Adj_Lbs;

  // PAR.ISC Sun Shp Inv Adj Qty = PAR.ISC Sun Shp Inv Adj Qty + DB1.ISC Sun Shp Inv Adj Lbs
  PAR.ISC_Sun_Ship_Inv_Adj_Qty = PAR.ISC_Sun_Ship_Inv_Adj_Qty
  + DB1.ISC_Sun_Ship_Inv_Adj_Lbs;

  // PAR.WF ISC Floor Prod Adj Lbs = PAR.WF ISC Floor Prod Adj Lbs + DB1.ISC Floor Prod Adj Lbs
  PAR.WF_ISC_Floor_Prod_Adj_Lbs = PAR.WF_ISC_Floor_Prod_Adj_Lbs
  + DB1.ISC_Floor_Prod_Adj_Lbs;

  // PAR.WF ISC Floor Prod Adj qty = PAR.WF ISC Floor Prod Adj qty + DB1.ISC Floor Prod Adj Qty
  PAR.WF_ISC_Floor_Prod_Adj_qty = PAR.WF_ISC_Floor_Prod_Adj_qty
  + DB1.ISC_Floor_Prod_Adj_Qty;

  // PAR.WF ISC End Inv Adj Lbs = PAR.WF ISC End Inv Adj Lbs + DB1.ISC End Inv Adj Lbs
  PAR.WF_ISC_End_Inv_Adj_Lbs = PAR.WF_ISC_End_Inv_Adj_Lbs + DB1.ISC_Ending_Inv_Adj_Lbs;

  // PAR.WF ISC End Inv Adj Qty = PAR.WF ISC End Inv Adj Qty + DB1.ISC End Inv Adj Qty
  PAR.WF_ISC_End_Inv_Adj_Qty = PAR.WF_ISC_End_Inv_Adj_Qty + DB1.ISC_Ending_Inv_Adj_Qty;

  // PAR.WF ISC Part/Rej Curr Lbs = PAR.WF ISC Part/Rej Curr Lbs + DB1.ISC End Inv Partial Lbs
  PAR.WF_ISC_Part_Rej_Curr_Lbs = PAR.WF_ISC_Part_Rej_Curr_Lbs
  + DB1.ISC_End_Inv_Partial_Lbs;

  // PAR.WF ISC Part/Rej Curr Qty = PAR.WF ISC Part/Rej Curr Qty + DB1.ISC End Inv Partial Qty
  PAR.WF_ISC_Part_Rej_Curr_Qty = PAR.WF_ISC_Part_Rej_Curr_Qty
  + DB1.ISC_End_Inv_Partial_Qty;

  CASE;

  // IF DB1.ISC Item U/M - Pricing is Head Set
  IF DB1.ISC_Item_UOM_Pricing = 'HS';

  // OR DB1.ISC Item U/M - Pricing is Each
  OR DB1.ISC_Item_UOM_Pricing = 'EA';

  //?For Casings -- use qty
  // Compute: qty    sales usr
  PAR.Weight_Sales_usr = PAR.Weight_Sales_usr + ( DB1.ISC_Shipment_Final_Qty * 1 'H' );

  // Compute: qty    End inv
  PAR.Weight_End_Inv_usr = ( DB1.ISC_Ending_Inv_Final_Qty * 1 'H' ) + PAR.Weight_End_Inv_usr;

  // Compute: Qty    prod usr
  PAR.Weight_Prod_usr = PAR.Weight_Prod_usr + ( ( DB1.ISC_Floor_Production_Qty
  + DB1.ISC_Floor_Prod_Adj_Qty ) * 1 'H' );

  // Compute: Qty   beg inv us
  PAR.Weight_Beg_Inv_usr = PAR.Weight_Beg_Inv_usr + ( DB1.ISC_Begin_Inv_Final_Qty * 1 'H' );

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Compute: weight sales usr
  PAR.Weight_Sales_usr = PAR.Weight_Sales_usr + ( DB1.ISC_Shipment_Final_Lbs * 1 'H' );

  // Compute: weight End inv
  PAR.Weight_End_Inv_usr = ( DB1.ISC_Ending_Inv_Final_Lbs * 1 'H' ) + PAR.Weight_End_Inv_usr;

  // Compute: Weight prod usr
  PAR.Weight_Prod_usr = PAR.Weight_Prod_usr + ( ( DB1.ISC_Floor_Production_Lbs
  + DB1.ISC_Floor_Prod_Adj_Lbs ) * 1 'H' );

  // Compute weight beg inv us
  PAR.Weight_Beg_Inv_usr = PAR.Weight_Beg_Inv_usr + ( DB1.ISC_Begin_Inv_Final_Lbs * 1 'H' );

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(Rtv Last Week EndI-CM RT) TYPE(RTVOBJ) FILE(PPBSCPP)           AC1822045;
 PARAMETER(PAR.Last_Week_Ending_Date_USR);
 PARAMETER(PAR.ISC_Warehouse_Company);
 PARAMETER(PAR.ISC_Item_Code);
 PARAMETER(PAR.WF_Lst_Sun_Shp_Inv_Adj_Qt);
 PARAMETER(PAR.WF_Lst_Sun_Shp_Inv_Adj_Lb);
 PARAMETER(PAR.WF_Lst_Unsh_Ship_Inv_Qty);
 PARAMETER(PAR.WF_Lst_Unsh_Ship_Inv_Lbs);
 PARAMETER(PAR.WF_ISC_Part_Rej_Last_Qty);
 PARAMETER(PAR.WF_ISC_Part_Rej_Last_Lbs);
 PARAMETER(PAR.WF_Lst_End_Inv_Adj_Qty);
 PARAMETER(PAR.WF_Lst_End_Inv_Adj_Lbs);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF PAR.ISC Warehouse Company EQ DB1.ISC Warehouse Company
  IF PAR.ISC_Warehouse_Company = DB1.ISC_Warehouse_Company;

  // PAR.ISC End Inv Adj Lbs = PAR.ISC End Inv Adj Lbs + DB1.ISC End Inv Adj Lbs
  PAR.ISC_Ending_Inv_Adj_Lbs = PAR.ISC_Ending_Inv_Adj_Lbs + DB1.ISC_Ending_Inv_Adj_Lbs;

  // PAR.ISC End Inv Adj Qty = PAR.ISC End Inv Adj Qty + DB1.ISC End Inv Adj Qty
  PAR.ISC_Ending_Inv_Adj_Qty = PAR.ISC_Ending_Inv_Adj_Qty + DB1.ISC_Ending_Inv_Adj_Qty;

  // PAR.ISC End Inv Partial Lbs = PAR.ISC End Inv Partial Lbs + DB1.ISC End Inv Partial Lbs
  PAR.ISC_End_Inv_Partial_Lbs = PAR.ISC_End_Inv_Partial_Lbs + DB1.ISC_End_Inv_Partial_Lbs;

  // PAR.ISC End Inv Partial Qty = PAR.ISC End Inv Partial Qty + DB1.ISC End Inv Partial Qty
  PAR.ISC_End_Inv_Partial_Qty = PAR.ISC_End_Inv_Partial_Qty + DB1.ISC_End_Inv_Partial_Qty;

  // PAR.ISC Sun Shp Inv Adj Qty = PAR.ISC Sun Shp Inv Adj Qty + DB1.ISC Sun Shp Inv Adj Qty
  PAR.ISC_Sun_Ship_Inv_Adj_Qty = PAR.ISC_Sun_Ship_Inv_Adj_Qty
  + DB1.ISC_Sun_Ship_Inv_Adj_Qty;

  // PAR.ISC Sun Shp Inv Adj Lbs = PAR.ISC Sun Shp Inv Adj Lbs + DB1.ISC Sun Shp Inv Adj Lbs
  PAR.ISC_Sun_Ship_Inv_Adj_Lbs = PAR.ISC_Sun_Ship_Inv_Adj_Lbs
  + DB1.ISC_Sun_Ship_Inv_Adj_Lbs;

  // PAR.ISC Unsh/Ship Inv Adj Qty = PAR.ISC Unsh/Ship Inv Adj Qty + DB1.ISC Unsh/Ship Inv Adj Qty
  PAR.ISC_Unsh_Ship_Inv_Adj_Qty = PAR.ISC_Unsh_Ship_Inv_Adj_Qty
  + DB1.ISC_Unsh_Ship_Inv_Adj_Qty;

  // PAR.ISC Unsh/Ship Inv Adj Lbs = PAR.ISC Unsh/Ship Inv Adj Lbs + DB1.ISC Unsh/Ship Inv Adj Lbs
  PAR.ISC_Unsh_Ship_Inv_Adj_Lbs = PAR.ISC_Unsh_Ship_Inv_Adj_Lbs
  + DB1.ISC_Unsh_Ship_Inv_Adj_Lbs;

  ENDIF;

 }

 ENDIF;

 //?RMC take WF ISC Floor Prod Adj Lbs off of compute.theyre in the "A" type
 //?RMC add this week's WF ISC End Inv Adj & last week's-rev sign of last wk
 // PAR.WF Lst End Inv Adj Lbs = CON.*ZERO - PAR.WF Lst End Inv Adj Lbs
 PAR.WF_Lst_End_Inv_Adj_Lbs = *ZERO - PAR.WF_Lst_End_Inv_Adj_Lbs;

 // PAR.WF Lst End Inv Adj Qty = CON.*ZERO - PAR.WF Lst End Inv Adj Qty
 PAR.WF_Lst_End_Inv_Adj_Qty = *ZERO - PAR.WF_Lst_End_Inv_Adj_Qty;

 // PAR.WF Lst Sun Shp Inv Adj Lb = CON.*ZERO - PAR.WF Lst Sun Shp Inv Adj Lb
 PAR.WF_Lst_Sun_Shp_Inv_Adj_Lb = *ZERO - PAR.WF_Lst_Sun_Shp_Inv_Adj_Lb;

 // PAR.WF Lst Sun Shp Inv Adj Qt = CON.*ZERO - PAR.WF Lst Sun Shp Inv Adj Qt
 PAR.WF_Lst_Sun_Shp_Inv_Adj_Qt = *ZERO - PAR.WF_Lst_Sun_Shp_Inv_Adj_Qt;

 // PAR.WF Lst Unsh/Ship Inv Lbs = CON.*ZERO - PAR.WF Lst Unsh/Ship Inv Lbs
 PAR.WF_Lst_Unsh_Ship_Inv_Lbs = *ZERO - PAR.WF_Lst_Unsh_Ship_Inv_Lbs;

 // PAR.WF Lst Unsh/Ship Inv Qty = CON.*ZERO - PAR.WF Lst Unsh/Ship Inv Qty
 PAR.WF_Lst_Unsh_Ship_Inv_Qty = *ZERO - PAR.WF_Lst_Unsh_Ship_Inv_Qty;

 // PAR.WF ISC Part/Rej Last Lbs = CON.*ZERO - PAR.WF ISC Part/Rej Last Lbs
 PAR.WF_ISC_Part_Rej_Last_Lbs = *ZERO - PAR.WF_ISC_Part_Rej_Last_Lbs;

 // PAR.WF ISC Part/Rej Last Qty = CON.*ZERO - PAR.WF ISC Part/Rej Last Qty
 PAR.WF_ISC_Part_Rej_Last_Qty = *ZERO - PAR.WF_ISC_Part_Rej_Last_Qty;

 // Compute:Est End Inv Lbs
 PAR.WF_Estimated_End_Inv_Lbs = ( ( ( ( ( ( ( ( ( ( ( ( ( PAR.ISC_Begin_Inv_Final_Lbs
 + PAR.WF_Trans_Total_type_A ) + PAR.WF_Trans_total_Type_AW ) + PAR.WF_Trans_Total_type_AP         +
 ) + PAR.WF_Trans_Total_type_RR ) + PAR.WF_Trans_total_Type_TW )                                   +
 + PAR.WF_Trans_total_Type_IO ) + PAR.WF_ISC_End_Inv_Adj_Lbs )                                     +
 + PAR.WF_Lst_End_Inv_Adj_Lbs ) + PAR.WF_ISC_Part_Rej_Curr_Lbs )                                   +
 + PAR.WF_ISC_Part_Rej_Last_Lbs ) + PAR.WF_Lst_Unsh_Ship_Inv_Lbs )                                 +
 + PAR.WF_Lst_Sun_Shp_Inv_Adj_Lb ) + PAR.ISC_Unsh_Ship_Inv_Adj_Lbs )                               +
 + PAR.ISC_Sun_Ship_Inv_Adj_Lbs;

 // Compute:Est End Inv Qty
 PAR.WF_Estimated_End_Inv_Qty = ( ( ( ( ( ( ( ( ( ( ( ( ( PAR.ISC_Begin_Inv_Final_Qty
 + PAR.WF_Trans_Total_type_A_qty ) + PAR.WF_Trans_total_Type_AW_qt )                               +
 + PAR.WF_Trans_Total_type_AP_qt ) + PAR.WF_Trans_Total_type_RR_qt )                               +
 + PAR.WF_Trans_total_Type_TW_qt ) + PAR.WF_Trans_total_Type_IO_qt )                               +
 + PAR.WF_ISC_End_Inv_Adj_Qty ) + PAR.WF_Lst_End_Inv_Adj_Qty )                                     +
 + PAR.WF_ISC_Part_Rej_Curr_Qty ) + PAR.WF_ISC_Part_Rej_Last_Qty )                                 +
 + PAR.WF_Lst_Sun_Shp_Inv_Adj_Qt ) + PAR.WF_Lst_Unsh_Ship_Inv_Qty )                                +
 + PAR.ISC_Unsh_Ship_Inv_Adj_Qty ) + PAR.ISC_Sun_Ship_Inv_Adj_Qty;

 //?RMC dont calc these two fields 05/16/07
 EXECUTE FUNCTION(Crt WF ISC Trans Sum  CR) TYPE(CRTOBJ) FILE(PMALCPP)           AC1814050;
 PARAMETER(PAR.ISC_Week_Ending_Date);
 PARAMETER(PAR.ISC_Warehouse_Company);
 PARAMETER(PAR.ISC_Warehouse_Code);
 PARAMETER(PAR.ISC_Item_Code);
 PARAMETER(PAR.ISC_Begin_Inv_Final_Lbs);
 PARAMETER(PAR.ISC_Ending_Inv_Final_Lbs);
 PARAMETER(PAR.ISC_Begin_Inv_Final_Qty);
 PARAMETER(PAR.ISC_Ending_Inv_Final_Qty);
 PARAMETER(PAR.ISC_Unsh_Ship_Inv_Adj_Lbs);
 PARAMETER(PAR.ISC_Unsh_Ship_Inv_Adj_Qty);
 PARAMETER(PAR.ISC_Sun_Ship_Inv_Adj_Lbs);
 PARAMETER(PAR.ISC_Sun_Ship_Inv_Adj_Qty);
 PARAMETER(PAR.WF_Estimated_End_Inv_Lbs);
 PARAMETER(PAR.WF_Estimated_End_Inv_Qty);
 PARAMETER(PAR.WF_ISC_Part_Rej_Last_Lbs);
 PARAMETER(PAR.WF_ISC_Part_Rej_Last_Qty);
 PARAMETER(PAR.WF_Trans_Total_type_A);
 PARAMETER(PAR.WF_Trans_total_Type_AW);
 PARAMETER(PAR.WF_Trans_Total_type_AP);
 PARAMETER(PAR.WF_Trans_total_Type_IO);
 PARAMETER(PAR.WF_Trans_Total_type_RR);
 PARAMETER(PAR.WF_Trans_total_Type_TW);
 PARAMETER(PAR.WF_Trans_Total_type_RR_qt);
 PARAMETER(PAR.WF_Trans_Total_type_A_qty);
 PARAMETER(PAR.WF_Trans_total_Type_TW_qt);
 PARAMETER(PAR.WF_Trans_total_Type_AW_qt);
 PARAMETER(PAR.WF_Trans_Total_type_AP_qt);
 PARAMETER(PAR.WF_Trans_total_Type_IO_qt);
 PARAMETER(PAR.WF_ISC_Floor_Prod_Adj_Lbs);
 PARAMETER(PAR.WF_ISC_Floor_Prod_Adj_qty);
 PARAMETER(PAR.WF_ISC_Part_Rej_Curr_Lbs);
 PARAMETER(PAR.WF_ISC_Part_Rej_Curr_Qty);
 PARAMETER(PAR.WF_ISC_End_Inv_Adj_Lbs);
 PARAMETER(PAR.WF_ISC_End_Inv_Adj_Qty);
 PARAMETER(PAR.WF_Lst_End_Inv_Adj_Lbs);
 PARAMETER(PAR.WF_Lst_End_Inv_Adj_Qty);
 PARAMETER(PAR.WF_Lst_Sun_Shp_Inv_Adj_Lb);
 PARAMETER(PAR.WF_Lst_Sun_Shp_Inv_Adj_Qt);
 PARAMETER(PAR.WF_Lst_Unsh_Ship_Inv_Lbs);
 PARAMETER(PAR.WF_Lst_Unsh_Ship_Inv_Qty);
 PARAMETER(PAR.WF_Trans_Total_type_R_Wgt);
 PARAMETER(PAR.WF_Trans_Total_type_R_qty);
 PARAMETER(PAR.WF_Trans_Total_type_I_Wgt);
 PARAMETER(PAR.WF_Trans_Total_type_I_qty);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
}


// PAR.WF Trans Total type A = CON.*ZERO
PAR.WF_Trans_Total_type_A = *ZERO;

// PAR.WF Trans Total type AP = CON.*ZERO
PAR.WF_Trans_Total_type_AP = *ZERO;

// PAR.WF Trans total Type AW = CON.*ZERO
PAR.WF_Trans_total_Type_AW = *ZERO;

// PAR.WF Trans total Type IO = CON.*ZERO
PAR.WF_Trans_total_Type_IO = *ZERO;

// PAR.WF Trans Total type RR = CON.*ZERO
PAR.WF_Trans_Total_type_RR = *ZERO;

// PAR.WF Trans total Type TW = CON.*ZERO
PAR.WF_Trans_total_Type_TW = *ZERO;

// PAR.WF Trans Total type A qty = CON.*ZERO
PAR.WF_Trans_Total_type_A_qty = *ZERO;

// PAR.WF Trans Total type AP qt = CON.*ZERO
PAR.WF_Trans_Total_type_AP_qt = *ZERO;

// PAR.WF Trans total Type AW qt = CON.*ZERO
PAR.WF_Trans_total_Type_AW_qt = *ZERO;

// PAR.WF Trans total Type IO qt = CON.*ZERO
PAR.WF_Trans_total_Type_IO_qt = *ZERO;

// PAR.WF Trans Total type RR qt = CON.*ZERO
PAR.WF_Trans_Total_type_RR_qt = *ZERO;

// PAR.WF Trans total Type TW qt = CON.*ZERO
PAR.WF_Trans_total_Type_TW_qt = *ZERO;

// PAR.WF Trans Total type I qty = CON.*ZERO
PAR.WF_Trans_Total_type_I_qty = *ZERO;

// PAR.WF Trans Total type R qty = CON.*ZERO
PAR.WF_Trans_Total_type_R_qty = *ZERO;

// PAR.WF Trans Total type I Wgt = CON.*ZERO
PAR.WF_Trans_Total_type_I_Wgt = *ZERO;

// PAR.WF Trans Total type R Wgt = CON.*ZERO
PAR.WF_Trans_Total_type_R_Wgt = *ZERO;

// Print ISC Item Code totals format
PRINT ISC Item Code totals format;

ENDIF;

CASE;

IF NEW ISC_Warehouse_Code;
// Print ISC Warehouse Code totals format
PRINT ISC Warehouse Code totals format;

ENDIF;

CASE;

IF NEW ISC_Warehouse_Company;
// Print ISC Warehouse Company totals format
PRINT ISC Warehouse Company totals format;

ENDIF;

CASE;

IF NEW ISC_Week_Ending_Date;
// Print ISC Week Ending Date totals format
PRINT ISC Week Ending Date totals format;

ENDIF;

