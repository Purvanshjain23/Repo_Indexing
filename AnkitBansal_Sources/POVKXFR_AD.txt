// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POVKXFR
// ?Date: 14.08.2025 Time: 03:39:10
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(Rtv Head Cut/Cold Wgt RT) TYPE(RTVOBJ) FILE(POCRCPP)           AC1665520;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Department_Code);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Production_Shift);
PARAMETER(PAR.Head_Cut);
PARAMETER(PAR.Cold_Weight);
PARAMETER(PAR.Avg_Cold_Weight);
PARAMETER(WRK.Start_Weight);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Exc Calc Comp Wgts    RT) TYPE(RTVOBJ) FILE(POC0CPP)           AC1669693;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Department_Code);
PARAMETER(PAR.Production_Line_Code);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Production_Shift);
PARAMETER(PAR.Head_Cut);
PARAMETER(PAR.Cold_Weight);
PARAMETER(PAR.Avg_Cold_Weight);
PARAMETER(PAR.Total_Line_Weight);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Wgt Component USR = CON.*ZERO
 PAR.Wgt_Component_USR = *ZERO;

 EXECUTE FUNCTION(Rtv Component Info    RT) TYPE(RTVOBJ) FILE(POCZREP)           AC1669682;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Yld_Component_Code);
 PARAMETER(PAR.PLYC_Type);
 PARAMETER(PAR.PLYC_Percent_of_Weight);
 PARAMETER(PAR.PLYC_Comment);
 PARAMETER(PAR.Credit_Item_Inc_Exc_Sts);
 PARAMETER(PAR.Type_Inc_Exc_Sts);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Group_Inc_Exc_Sts);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Class_Inc_Exc_Sts);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(WRK.YC_Required_Sts);
 PARAMETER(PAR.YC_Component_Group);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.PLYC Type is Start Weight Entry
 IF PAR.PLYC_Type = 'SW';

 // OR PAR.PLYC Type is Auto-calculated
 OR PAR.PLYC_Type = 'AC';

 // PAR.Wgt Produced USR = PAR.Wgt Produced USR + DB1.YDL Yld Comp Weight
 PAR.Wgt_Produced_USR = PAR.Wgt_Produced_USR + DB1.YDL_Yld_Comp_Weight;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?05/02/07 PKD Added Component Type of MS-Retrieve w/Mult Item Str
 //?SEL: Item Structure
 CASE;

 // IF PAR.PLYC Type is Retrieve w/Mult Item Str
 IF PAR.PLYC_Type = 'MS';

 // PAR.Wgt Component USR = CON.*ZERO
 PAR.Wgt_Component_USR = *ZERO;

 EXECUTE FUNCTION(Rtv Yld Comp Wgt      RT) TYPE(RTVOBJ) FILE(PMAQREP)           AC1818437;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Yld_Component_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(PAR.Credit_Item_Inc_Exc_Sts);
 PARAMETER(PAR.Wgt_Component_USR);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Yld Comp Wgt      RT) TYPE(RTVOBJ) FILE(POCTCPP)           AC1669752;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Department_Code);
  PARAMETER(DB1.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(PAR.Credit_Item_Inc_Exc_Sts);
  PARAMETER(DB1.Type_Inc_Exc_Sts);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(DB1.Group_Inc_Exc_Sts);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Class_Inc_Exc_Sts);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(PAR.Wgt_Component_USR);
  {
   //?USER: Process Data record

   // PGM.*Record selected = CND.*YES
   PGM.*Record_selected = 'Y';

   //?SEL:  Credit Items
   CASE;

   // IF PAR.Credit Item Inc/Exc Sts is Entered
   IF PAR.Credit_Item_Inc_Exc_Sts = 'E'/'I';

   CASE;

   // IF PAR.Credit Item Inc/Exc Sts is Include
   IF PAR.Credit_Item_Inc_Exc_Sts = 'I';

   CASE;

   // IF DB1.Credit Item Status is no
   IF DB1.Credit_Item_Status = 'N';

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Credit Item Inc/Exc Sts is Exclude
   IF PAR.Credit_Item_Inc_Exc_Sts = 'E';

   CASE;

   // IF DB1.Credit Item Status is yes
   IF DB1.Credit_Item_Status = 'Y';

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   //?SEL:  Type
   CASE;

   // IF PAR.Item Structure Type Code is Entered
   IF PAR.Item_Structure_Type_Code <> *ZERO;

   CASE;

   // IF PAR.Type Inc/Exc Sts is Include
   IF PAR.Type_Inc_Exc_Sts = 'I';

   CASE;

   // IF PAR.Item Structure Type Code NE DB1.Item Structure Type Code
   IF PAR.Item_Structure_Type_Code <> DB1.Item_Structure_Type_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Type Inc/Exc Sts is Exclude
   IF PAR.Type_Inc_Exc_Sts = 'E';

   CASE;

   // IF PAR.Item Structure Type Code EQ DB1.Item Structure Type Code
   IF PAR.Item_Structure_Type_Code = DB1.Item_Structure_Type_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   //?SEL:  Group
   CASE;

   // IF PAR.Item Structure Group Code is Entered
   IF PAR.Item_Structure_Group_Code <> *ZERO;

   CASE;

   // IF PAR.Group Inc/Exc Sts is Include
   IF PAR.Group_Inc_Exc_Sts = 'I';

   CASE;

   // IF PAR.Item Structure Group Code NE DB1.Item Structure Group Code
   IF PAR.Item_Structure_Group_Code <> DB1.Item_Structure_Group_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Group Inc/Exc Sts is Exclude
   IF PAR.Group_Inc_Exc_Sts = 'E';

   CASE;

   // IF PAR.Item Structure Group Code EQ DB1.Item Structure Group Code
   IF PAR.Item_Structure_Group_Code = DB1.Item_Structure_Group_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   //?SEL:  Class
   CASE;

   // IF PAR.Item Structure Class Code is Entered
   IF PAR.Item_Structure_Class_Code <> *ZERO;

   CASE;

   // IF PAR.Class Inc/Exc Sts is Include
   IF PAR.Class_Inc_Exc_Sts = 'I';

   CASE;

   // IF PAR.Item Structure Class Code NE DB1.Item Structure Class Code
   IF PAR.Item_Structure_Class_Code <> DB1.Item_Structure_Class_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Class Inc/Exc Sts is Exclude
   IF PAR.Class_Inc_Exc_Sts = 'E';

   CASE;

   // IF PAR.Item Structure Class Code EQ DB1.Item Structure Class Code
   IF PAR.Item_Structure_Class_Code = DB1.Item_Structure_Class_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   CASE;

   // IF PGM.*Record selected is *YES
   IF PGM.*Record_selected = 'Y';

   // Total Product Weight
   LCL.Wgt_Total_USR = ( ( DB1.RM_Production_Wgt - DB1.Beginning_WIP_Inv_Wgt )
   + DB1.Ending_WIP_Inv_Wgt ) - DB1.Product_Delete_Wgt;

   // PAR.Wgt Component USR = PAR.Wgt Component USR + LCL.Wgt Total USR
   PAR.Wgt_Component_USR = PAR.Wgt_Component_USR + LCL.Wgt_Total_USR;

   ENDIF;

  }

 }

 //?SEL: Item Structure
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Credit Item Inc/Exc Sts is Include/Exclude
 IF PAR.Credit_Item_Inc_Exc_Sts = 'E'/'I';

 // OR PAR.Item Structure Type Code is Entered
 OR PAR.Item_Structure_Type_Code <> *ZERO;

 // OR PAR.Item Structure Group Code is Entered
 OR PAR.Item_Structure_Group_Code <> *ZERO;

 // OR PAR.Item Structure Class Code is Entered
 OR PAR.Item_Structure_Class_Code <> *ZERO;

 // PAR.Wgt Component USR = CON.*ZERO
 PAR.Wgt_Component_USR = *ZERO;

 EXECUTE FUNCTION(Rtv Yld Comp Wgt      RT) TYPE(RTVOBJ) FILE(POCTCPP)           AC1669752;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(PAR.Credit_Item_Inc_Exc_Sts);
 PARAMETER(PAR.Type_Inc_Exc_Sts);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Group_Inc_Exc_Sts);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Class_Inc_Exc_Sts);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Wgt_Component_USR);
 {
  //?USER: Process Data record

  // PGM.*Record selected = CND.*YES
  PGM.*Record_selected = 'Y';

  //?SEL:  Credit Items
  CASE;

  // IF PAR.Credit Item Inc/Exc Sts is Entered
  IF PAR.Credit_Item_Inc_Exc_Sts = 'E'/'I';

  CASE;

  // IF PAR.Credit Item Inc/Exc Sts is Include
  IF PAR.Credit_Item_Inc_Exc_Sts = 'I';

  CASE;

  // IF DB1.Credit Item Status is no
  IF DB1.Credit_Item_Status = 'N';

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  // IF PAR.Credit Item Inc/Exc Sts is Exclude
  IF PAR.Credit_Item_Inc_Exc_Sts = 'E';

  CASE;

  // IF DB1.Credit Item Status is yes
  IF DB1.Credit_Item_Status = 'Y';

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  ENDIF;

  ENDIF;

  //?SEL:  Type
  CASE;

  // IF PAR.Item Structure Type Code is Entered
  IF PAR.Item_Structure_Type_Code <> *ZERO;

  CASE;

  // IF PAR.Type Inc/Exc Sts is Include
  IF PAR.Type_Inc_Exc_Sts = 'I';

  CASE;

  // IF PAR.Item Structure Type Code NE DB1.Item Structure Type Code
  IF PAR.Item_Structure_Type_Code <> DB1.Item_Structure_Type_Code;

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  // IF PAR.Type Inc/Exc Sts is Exclude
  IF PAR.Type_Inc_Exc_Sts = 'E';

  CASE;

  // IF PAR.Item Structure Type Code EQ DB1.Item Structure Type Code
  IF PAR.Item_Structure_Type_Code = DB1.Item_Structure_Type_Code;

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  ENDIF;

  ENDIF;

  //?SEL:  Group
  CASE;

  // IF PAR.Item Structure Group Code is Entered
  IF PAR.Item_Structure_Group_Code <> *ZERO;

  CASE;

  // IF PAR.Group Inc/Exc Sts is Include
  IF PAR.Group_Inc_Exc_Sts = 'I';

  CASE;

  // IF PAR.Item Structure Group Code NE DB1.Item Structure Group Code
  IF PAR.Item_Structure_Group_Code <> DB1.Item_Structure_Group_Code;

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  // IF PAR.Group Inc/Exc Sts is Exclude
  IF PAR.Group_Inc_Exc_Sts = 'E';

  CASE;

  // IF PAR.Item Structure Group Code EQ DB1.Item Structure Group Code
  IF PAR.Item_Structure_Group_Code = DB1.Item_Structure_Group_Code;

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  ENDIF;

  ENDIF;

  //?SEL:  Class
  CASE;

  // IF PAR.Item Structure Class Code is Entered
  IF PAR.Item_Structure_Class_Code <> *ZERO;

  CASE;

  // IF PAR.Class Inc/Exc Sts is Include
  IF PAR.Class_Inc_Exc_Sts = 'I';

  CASE;

  // IF PAR.Item Structure Class Code NE DB1.Item Structure Class Code
  IF PAR.Item_Structure_Class_Code <> DB1.Item_Structure_Class_Code;

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  // IF PAR.Class Inc/Exc Sts is Exclude
  IF PAR.Class_Inc_Exc_Sts = 'E';

  CASE;

  // IF PAR.Item Structure Class Code EQ DB1.Item Structure Class Code
  IF PAR.Item_Structure_Class_Code = DB1.Item_Structure_Class_Code;

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  ENDIF;

  ENDIF;

  CASE;

  // IF PGM.*Record selected is *YES
  IF PGM.*Record_selected = 'Y';

  // Total Product Weight
  LCL.Wgt_Total_USR = ( ( DB1.RM_Production_Wgt - DB1.Beginning_WIP_Inv_Wgt )
  + DB1.Ending_WIP_Inv_Wgt ) - DB1.Product_Delete_Wgt;

  // PAR.Wgt Component USR = PAR.Wgt Component USR + LCL.Wgt Total USR
  PAR.Wgt_Component_USR = PAR.Wgt_Component_USR + LCL.Wgt_Total_USR;

  ENDIF;

 }

 ENDIF;

 ENDIF;

 //?Wgt Component for Special Calculation
 CASE;

 // IF PAR.PLYC Type is Special Calculation
 IF PAR.PLYC_Type = 'SC';

 //?RIB Line
 CASE;

 // IF PAR.Department Code is CUT
 IF PAR.Department_Code = 'CUT';

 // AND PAR.Production Line Code is Ribs
 AND PAR.Production_Line_Code = 'RIB';

 // PAR.Wgt Component USR
 PAR.Wgt_Component_USR = PAR.Wgt_Component_USR - ( ( PAR.Head_Cut * 2 'H' ) * 0.3 'H' );

 ENDIF;

 //?Picnic Line
 CASE;

 // IF PAR.Department Code is CUT
 IF PAR.Department_Code = 'CUT';

 // AND PAR.Production Line Code is Picnic
 AND PAR.Production_Line_Code = 'PICNIC';

 // PAR.Wgt Component USR
 PAR.Wgt_Component_USR = ( PAR.Wgt_Component_USR / .743 'H' ) * .735 'H';

 ENDIF;

 //?Trim Line
 CASE;

 // IF PAR.Department Code is CUT
 IF PAR.Department_Code = 'CUT';

 // AND PAR.Production Line Code is Trim
 AND PAR.Production_Line_Code = 'TRIM';

 CASE;

 // IF DB1.Yld Component Code is Butt Trim
 IF DB1.Yld_Component_Code = 'BUTTTRM';

 EXECUTE FUNCTION(Rtv Trim Total        RT) TYPE(RTVOBJ) FILE(POCTCPP)           AC1672800;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER('BUTT');
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(720);
 PARAMETER(LCL.Wgt_Total_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Wgt Total USR
  PAR.Wgt_Total_USR = PAR.Wgt_Total_USR + ( ( ( DB1.RM_Production_Wgt
  - DB1.Beginning_WIP_Inv_Wgt ) + DB1.Ending_WIP_Inv_Wgt ) - DB1.Product_Delete_Wgt );

 }

 // PAR.Wgt Component USR = PAR.Wgt Component USR - LCL.Wgt Total USR
 PAR.Wgt_Component_USR = PAR.Wgt_Component_USR - LCL.Wgt_Total_USR;

 // IF DB1.Yld Component Code is Rib Trim
 IF DB1.Yld_Component_Code = 'RIBTRM';

 // PAR.Wgt Component USR = CON.*ZERO
 PAR.Wgt_Component_USR = *ZERO;

 EXECUTE FUNCTION(Rtv Yld Comp Wgt      RT) TYPE(RTVOBJ) FILE(POCTCPP)           AC1669752;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER('RIB');
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(PAR.Credit_Item_Inc_Exc_Sts);
 PARAMETER(PAR.Type_Inc_Exc_Sts);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Group_Inc_Exc_Sts);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Class_Inc_Exc_Sts);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Wgt_Component_USR);
 {
  //?USER: Process Data record

  // PGM.*Record selected = CND.*YES
  PGM.*Record_selected = 'Y';

  //?SEL:  Credit Items
  CASE;

  // IF PAR.Credit Item Inc/Exc Sts is Entered
  IF PAR.Credit_Item_Inc_Exc_Sts = 'E'/'I';

  CASE;

  // IF PAR.Credit Item Inc/Exc Sts is Include
  IF PAR.Credit_Item_Inc_Exc_Sts = 'I';

  CASE;

  // IF DB1.Credit Item Status is no
  IF DB1.Credit_Item_Status = 'N';

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  // IF PAR.Credit Item Inc/Exc Sts is Exclude
  IF PAR.Credit_Item_Inc_Exc_Sts = 'E';

  CASE;

  // IF DB1.Credit Item Status is yes
  IF DB1.Credit_Item_Status = 'Y';

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  ENDIF;

  ENDIF;

  //?SEL:  Type
  CASE;

  // IF PAR.Item Structure Type Code is Entered
  IF PAR.Item_Structure_Type_Code <> *ZERO;

  CASE;

  // IF PAR.Type Inc/Exc Sts is Include
  IF PAR.Type_Inc_Exc_Sts = 'I';

  CASE;

  // IF PAR.Item Structure Type Code NE DB1.Item Structure Type Code
  IF PAR.Item_Structure_Type_Code <> DB1.Item_Structure_Type_Code;

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  // IF PAR.Type Inc/Exc Sts is Exclude
  IF PAR.Type_Inc_Exc_Sts = 'E';

  CASE;

  // IF PAR.Item Structure Type Code EQ DB1.Item Structure Type Code
  IF PAR.Item_Structure_Type_Code = DB1.Item_Structure_Type_Code;

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  ENDIF;

  ENDIF;

  //?SEL:  Group
  CASE;

  // IF PAR.Item Structure Group Code is Entered
  IF PAR.Item_Structure_Group_Code <> *ZERO;

  CASE;

  // IF PAR.Group Inc/Exc Sts is Include
  IF PAR.Group_Inc_Exc_Sts = 'I';

  CASE;

  // IF PAR.Item Structure Group Code NE DB1.Item Structure Group Code
  IF PAR.Item_Structure_Group_Code <> DB1.Item_Structure_Group_Code;

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  // IF PAR.Group Inc/Exc Sts is Exclude
  IF PAR.Group_Inc_Exc_Sts = 'E';

  CASE;

  // IF PAR.Item Structure Group Code EQ DB1.Item Structure Group Code
  IF PAR.Item_Structure_Group_Code = DB1.Item_Structure_Group_Code;

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  ENDIF;

  ENDIF;

  //?SEL:  Class
  CASE;

  // IF PAR.Item Structure Class Code is Entered
  IF PAR.Item_Structure_Class_Code <> *ZERO;

  CASE;

  // IF PAR.Class Inc/Exc Sts is Include
  IF PAR.Class_Inc_Exc_Sts = 'I';

  CASE;

  // IF PAR.Item Structure Class Code NE DB1.Item Structure Class Code
  IF PAR.Item_Structure_Class_Code <> DB1.Item_Structure_Class_Code;

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  // IF PAR.Class Inc/Exc Sts is Exclude
  IF PAR.Class_Inc_Exc_Sts = 'E';

  CASE;

  // IF PAR.Item Structure Class Code EQ DB1.Item Structure Class Code
  IF PAR.Item_Structure_Class_Code = DB1.Item_Structure_Class_Code;

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  ENDIF;

  ENDIF;

  CASE;

  // IF PGM.*Record selected is *YES
  IF PGM.*Record_selected = 'Y';

  // Total Product Weight
  LCL.Wgt_Total_USR = ( ( DB1.RM_Production_Wgt - DB1.Beginning_WIP_Inv_Wgt )
  + DB1.Ending_WIP_Inv_Wgt ) - DB1.Product_Delete_Wgt;

  // PAR.Wgt Component USR = PAR.Wgt Component USR + LCL.Wgt Total USR
  PAR.Wgt_Component_USR = PAR.Wgt_Component_USR + LCL.Wgt_Total_USR;

  ENDIF;

 }

 // PAR.Wgt Component USR
 PAR.Wgt_Component_USR = PAR.Wgt_Component_USR - ( PAR.Wgt_Component_USR - ( (
 PAR.Head_Cut * 2 'H' ) * 0.3 'H' ) );

 ENDIF;

 ENDIF;

 //?Belly - Single Rib - Export Trim
 CASE;

 // IF DB1.Department Code is Belly
 IF DB1.Department_Code = 'BELLY';

 // AND DB1.Production Line Code is Single Rib
 AND DB1.Production_Line_Code = 'SGLRIB';

 //?(1) Wgt Compnent USR - SHTBEL EXPBLYTRSH weight  (which is item 64000)
 CASE;

 // IF DB1.Yld Component Code is Export Trim
 IF DB1.Yld_Component_Code = 'EXPTRM';

 EXECUTE FUNCTION(Rtv Prod Weight 1 compRT) TYPE(RTVOBJ) FILE(POC0CPP)           AC1686467;
 PARAMETER(DB1.Company_Number);
 PARAMETER('BELLY');
 PARAMETER('SHTBEL');
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER('EXPBLYTRSH');
 PARAMETER(LCL.Weight_Tot_Start_Need_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Yld Component Code is Inedible
  IF DB1.Yld_Component_Code = 'ZINEDIBLE';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Weight Tot Start Need USR = PAR.Weight Tot Start Need USR + DB1.YDL Yld Comp Weight
  PAR.Weight_Tot_Start_Need_USR = PAR.Weight_Tot_Start_Need_USR + DB1.YDL_Yld_Comp_Weight;

  ENDIF;

 }

 // PAR.Wgt Component USR = PAR.Wgt Component USR - LCL.Weight Tot Start Need USR
 PAR.Wgt_Component_USR = PAR.Wgt_Component_USR - LCL.Weight_Tot_Start_Need_USR;

 ENDIF;

 ENDIF;

 //?Belly - Single Rib - Inedible
 CASE;

 // IF DB1.Department Code is Belly
 IF DB1.Department_Code = 'BELLY';

 // AND DB1.Production Line Code is Single Rib
 AND DB1.Production_Line_Code = 'SGLRIB';

 //?(1) Get Comp total wt, except Inedible (2) Get Finished Weight
 CASE;

 // IF DB1.Yld Component Code is Inedible
 IF DB1.Yld_Component_Code = 'ZINEDIBLE';

 EXECUTE FUNCTION(Rtv Prod Weight,O InedRT) TYPE(RTVOBJ) FILE(POC0CPP)           AC1684711;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(LCL.Weight_Tot_Start_Need_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Yld Component Code is Inedible
  IF DB1.Yld_Component_Code = 'ZINEDIBLE';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Weight Tot Start Need USR = PAR.Weight Tot Start Need USR + DB1.YDL Yld Comp Weight
  PAR.Weight_Tot_Start_Need_USR = PAR.Weight_Tot_Start_Need_USR + DB1.YDL_Yld_Comp_Weight;

  ENDIF;

 }

 EXECUTE FUNCTION(Rtv Start Weight      RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1678965;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(PAR.Start_Weight);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.Wgt Component USR = PAR.Start Weight - LCL.Weight Tot Start Need USR
 PAR.Wgt_Component_USR = PAR.Start_Weight - LCL.Weight_Tot_Start_Need_USR;

 ENDIF;

 ENDIF;

 //?Belly - Sheet Belly  - Inedible
 CASE;

 // IF DB1.Department Code is Belly
 IF DB1.Department_Code = 'BELLY';

 // AND DB1.Production Line Code is Sheet Belly
 AND DB1.Production_Line_Code = 'SHTBEL';

 //?(1) Get Comp total wt, except Inedible (2) Get Finished Weight
 CASE;

 // IF DB1.Yld Component Code is Inedible
 IF DB1.Yld_Component_Code = 'ZINEDIBLE';

 EXECUTE FUNCTION(Rtv Prod Weight,O InedRT) TYPE(RTVOBJ) FILE(POC0CPP)           AC1684711;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(LCL.Weight_Tot_Start_Need_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Yld Component Code is Inedible
  IF DB1.Yld_Component_Code = 'ZINEDIBLE';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Weight Tot Start Need USR = PAR.Weight Tot Start Need USR + DB1.YDL Yld Comp Weight
  PAR.Weight_Tot_Start_Need_USR = PAR.Weight_Tot_Start_Need_USR + DB1.YDL_Yld_Comp_Weight;

  ENDIF;

 }

 EXECUTE FUNCTION(Rtv Start Weight      RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1678965;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(PAR.Start_Weight);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.Wgt Component USR = PAR.Start Weight - LCL.Weight Tot Start Need USR
 PAR.Wgt_Component_USR = PAR.Start_Weight - LCL.Weight_Tot_Start_Need_USR;

 ENDIF;

 ENDIF;

 //?Belly - Skinless - Inedible
 CASE;

 // IF DB1.Department Code is Belly
 IF DB1.Department_Code = 'BELLY';

 // AND DB1.Production Line Code is Skinless
 AND DB1.Production_Line_Code = 'SKINLS';

 //?(1) Get Comp total wt, except Inedible (2) Get Finished Weight
 CASE;

 // IF DB1.Yld Component Code is Inedible
 IF DB1.Yld_Component_Code = 'ZINEDIBLE';

 EXECUTE FUNCTION(Rtv Prod Weight,O InedRT) TYPE(RTVOBJ) FILE(POC0CPP)           AC1684711;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(LCL.Weight_Tot_Start_Need_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Yld Component Code is Inedible
  IF DB1.Yld_Component_Code = 'ZINEDIBLE';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Weight Tot Start Need USR = PAR.Weight Tot Start Need USR + DB1.YDL Yld Comp Weight
  PAR.Weight_Tot_Start_Need_USR = PAR.Weight_Tot_Start_Need_USR + DB1.YDL_Yld_Comp_Weight;

  ENDIF;

 }

 EXECUTE FUNCTION(Rtv Start Weight      RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1678965;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(PAR.Start_Weight);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?4/6/04 Chg Start Wt if less than the sum of the components.
 CASE;

 // IF PAR.Start Weight LT LCL.Weight Tot Start Need USR
 IF PAR.Start_Weight < LCL.Weight_Tot_Start_Need_USR;

 EXECUTE FUNCTION(Upd Start Weight      RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1678961;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(LCL.Weight_Tot_Start_Need_USR);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt Start Weight      CR) TYPE(CRTOBJ) FILE(POCSCPP)           AC1678963;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(PAR.Start_Weight);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Ending_Weight);
  PARAMETER(PAR.Converting_Start_Weight);
  PARAMETER(PAR.Converting_End_Weight);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Total_Line_Weight);
  PARAMETER(PAR.Production_Standard_Yld);
  PARAMETER(PAR.Actual_Yield);
  PARAMETER(PAR.Yield_Variance);
  PARAMETER(PAR.Weight_Variance);
  PARAMETER(PAR.YDL_Comment);
  PARAMETER(PAR.YDL_Post_Status);
  PARAMETER(PAR.YDL_Process_Status);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Start Weight      CH) TYPE(CHGOBJ) FILE(POCSCPP)           AC1678964;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Department_Code);
  PARAMETER(DB1.Production_Line_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Production_Shift);
  PARAMETER(PAR.Start_Weight);
  PARAMETER(DB1.Start_Pieces);
  PARAMETER(DB1.Pct_Pieces_Converted);
  {
   //?USER: Processing after Data read

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 // PAR.Wgt Component USR = CON.*ZERO
 PAR.Wgt_Component_USR = *ZERO;

 //?4/6/04 Chg Start Wt if less than the sum of the components.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Wgt Component USR = PAR.Start Weight - LCL.Weight Tot Start Need USR
 PAR.Wgt_Component_USR = PAR.Start_Weight - LCL.Weight_Tot_Start_Need_USR;

 ENDIF;

 ENDIF;

 ENDIF;

 //?Belly - Skinls - Sknboxed
 CASE;

 // IF DB1.Department Code is Belly
 IF DB1.Department_Code = 'BELLY';

 // AND DB1.Production Line Code is Skinless
 AND DB1.Production_Line_Code = 'SKINLS';

 //?Item Str Wgt - (belly/sglrib/sknsglrib wgt)- (belly/shtbel/sknshtbel wgt)
 CASE;

 // IF DB1.Yld Component Code is Skins Boxed
 IF DB1.Yld_Component_Code = 'SKNBOXED';

 EXECUTE FUNCTION(Rtv Prod Weight 1 compRT) TYPE(RTVOBJ) FILE(POC0CPP)           AC1686467;
 PARAMETER(DB1.Company_Number);
 PARAMETER('BELLY');
 PARAMETER('SGLRIB');
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER('SKNSGLRIB');
 PARAMETER(LCL.Weight_Tot_Start_Need_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Yld Component Code is Inedible
  IF DB1.Yld_Component_Code = 'ZINEDIBLE';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Weight Tot Start Need USR = PAR.Weight Tot Start Need USR + DB1.YDL Yld Comp Weight
  PAR.Weight_Tot_Start_Need_USR = PAR.Weight_Tot_Start_Need_USR + DB1.YDL_Yld_Comp_Weight;

  ENDIF;

 }

 // PAR.Wgt Component USR = PAR.Wgt Component USR - LCL.Weight Tot Start Need USR
 PAR.Wgt_Component_USR = PAR.Wgt_Component_USR - LCL.Weight_Tot_Start_Need_USR;

 EXECUTE FUNCTION(Rtv Prod Weight 1 compRT) TYPE(RTVOBJ) FILE(POC0CPP)           AC1686467;
 PARAMETER(DB1.Company_Number);
 PARAMETER('BELLY');
 PARAMETER('SHTBEL');
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER('SKNSHTBEL');
 PARAMETER(LCL.Weight_Tot_Start_Need_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Yld Component Code is Inedible
  IF DB1.Yld_Component_Code = 'ZINEDIBLE';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Weight Tot Start Need USR = PAR.Weight Tot Start Need USR + DB1.YDL Yld Comp Weight
  PAR.Weight_Tot_Start_Need_USR = PAR.Weight_Tot_Start_Need_USR + DB1.YDL_Yld_Comp_Weight;

  ENDIF;

 }

 // PAR.Wgt Component USR = PAR.Wgt Component USR - LCL.Weight Tot Start Need USR
 PAR.Wgt_Component_USR = PAR.Wgt_Component_USR - LCL.Weight_Tot_Start_Need_USR;

 ENDIF;

 ENDIF;

 //?Loins - Boning - Tenderloin/BiSirloin
 CASE;

 // IF DB1.Department Code is Loin Boning
 IF DB1.Department_Code = 'LOINS';

 // AND DB1.Production Line Code is Boning
 AND DB1.Production_Line_Code = 'BONING';

 //?(This comp wgt per the item str)-(Cut biloin wgt per same item str)
 CASE;

 // IF DB1.Yld Component Code is Bone In Sirloin
 IF DB1.Yld_Component_Code = 'BISIRLOIN';

 // OR DB1.Yld Component Code is Tenderloin
 OR DB1.Yld_Component_Code = 'TENDERLOIN';

 // LCL.Production Line Code = DB1.Production Line Code
 LCL.Production_Line_Code = DB1.Production_Line_Code;

 // WRK.Weight Prod 1 USR = CON.*ZERO
 WRK.Weight_Prod_1_USR = *ZERO;

 EXECUTE FUNCTION(Rtv Yld Comp Wgt      RT) TYPE(RTVOBJ) FILE(POCTCPP)           AC1669752;
 PARAMETER(DB1.Company_Number);
 PARAMETER('CUT');
 PARAMETER('BILOIN');
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(PAR.Credit_Item_Inc_Exc_Sts);
 PARAMETER(PAR.Type_Inc_Exc_Sts);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Group_Inc_Exc_Sts);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Class_Inc_Exc_Sts);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(WRK.Weight_Prod_1_USR);
 {
  //?USER: Process Data record

  // PGM.*Record selected = CND.*YES
  PGM.*Record_selected = 'Y';

  //?SEL:  Credit Items
  CASE;

  // IF PAR.Credit Item Inc/Exc Sts is Entered
  IF PAR.Credit_Item_Inc_Exc_Sts = 'E'/'I';

  CASE;

  // IF PAR.Credit Item Inc/Exc Sts is Include
  IF PAR.Credit_Item_Inc_Exc_Sts = 'I';

  CASE;

  // IF DB1.Credit Item Status is no
  IF DB1.Credit_Item_Status = 'N';

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  // IF PAR.Credit Item Inc/Exc Sts is Exclude
  IF PAR.Credit_Item_Inc_Exc_Sts = 'E';

  CASE;

  // IF DB1.Credit Item Status is yes
  IF DB1.Credit_Item_Status = 'Y';

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  ENDIF;

  ENDIF;

  //?SEL:  Type
  CASE;

  // IF PAR.Item Structure Type Code is Entered
  IF PAR.Item_Structure_Type_Code <> *ZERO;

  CASE;

  // IF PAR.Type Inc/Exc Sts is Include
  IF PAR.Type_Inc_Exc_Sts = 'I';

  CASE;

  // IF PAR.Item Structure Type Code NE DB1.Item Structure Type Code
  IF PAR.Item_Structure_Type_Code <> DB1.Item_Structure_Type_Code;

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  // IF PAR.Type Inc/Exc Sts is Exclude
  IF PAR.Type_Inc_Exc_Sts = 'E';

  CASE;

  // IF PAR.Item Structure Type Code EQ DB1.Item Structure Type Code
  IF PAR.Item_Structure_Type_Code = DB1.Item_Structure_Type_Code;

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  ENDIF;

  ENDIF;

  //?SEL:  Group
  CASE;

  // IF PAR.Item Structure Group Code is Entered
  IF PAR.Item_Structure_Group_Code <> *ZERO;

  CASE;

  // IF PAR.Group Inc/Exc Sts is Include
  IF PAR.Group_Inc_Exc_Sts = 'I';

  CASE;

  // IF PAR.Item Structure Group Code NE DB1.Item Structure Group Code
  IF PAR.Item_Structure_Group_Code <> DB1.Item_Structure_Group_Code;

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  // IF PAR.Group Inc/Exc Sts is Exclude
  IF PAR.Group_Inc_Exc_Sts = 'E';

  CASE;

  // IF PAR.Item Structure Group Code EQ DB1.Item Structure Group Code
  IF PAR.Item_Structure_Group_Code = DB1.Item_Structure_Group_Code;

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  ENDIF;

  ENDIF;

  //?SEL:  Class
  CASE;

  // IF PAR.Item Structure Class Code is Entered
  IF PAR.Item_Structure_Class_Code <> *ZERO;

  CASE;

  // IF PAR.Class Inc/Exc Sts is Include
  IF PAR.Class_Inc_Exc_Sts = 'I';

  CASE;

  // IF PAR.Item Structure Class Code NE DB1.Item Structure Class Code
  IF PAR.Item_Structure_Class_Code <> DB1.Item_Structure_Class_Code;

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  // IF PAR.Class Inc/Exc Sts is Exclude
  IF PAR.Class_Inc_Exc_Sts = 'E';

  CASE;

  // IF PAR.Item Structure Class Code EQ DB1.Item Structure Class Code
  IF PAR.Item_Structure_Class_Code = DB1.Item_Structure_Class_Code;

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  ENDIF;

  ENDIF;

  CASE;

  // IF PGM.*Record selected is *YES
  IF PGM.*Record_selected = 'Y';

  // Total Product Weight
  LCL.Wgt_Total_USR = ( ( DB1.RM_Production_Wgt - DB1.Beginning_WIP_Inv_Wgt )
  + DB1.Ending_WIP_Inv_Wgt ) - DB1.Product_Delete_Wgt;

  // PAR.Wgt Component USR = PAR.Wgt Component USR + LCL.Wgt Total USR
  PAR.Wgt_Component_USR = PAR.Wgt_Component_USR + LCL.Wgt_Total_USR;

  ENDIF;

 }

 // PAR.Wgt Component USR = PAR.Wgt Component USR - WRK.Weight Prod 1 USR
 PAR.Wgt_Component_USR = PAR.Wgt_Component_USR - WRK.Weight_Prod_1_USR;

 ENDIF;

 ENDIF;

 //?Loins - Boning - Inedible
 CASE;

 // IF DB1.Department Code is Loin Boning
 IF DB1.Department_Code = 'LOINS';

 // AND DB1.Production Line Code is Boning
 AND DB1.Production_Line_Code = 'BONING';

 //?(1) Get Comp total wt, except Inedible (2) Get Finished Weight
 CASE;

 // IF DB1.Yld Component Code is Inedible
 IF DB1.Yld_Component_Code = 'ZINEDIBLE';

 EXECUTE FUNCTION(Rtv Prod Weight,O InedRT) TYPE(RTVOBJ) FILE(POC0CPP)           AC1684711;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(LCL.Weight_Tot_Start_Need_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Yld Component Code is Inedible
  IF DB1.Yld_Component_Code = 'ZINEDIBLE';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Weight Tot Start Need USR = PAR.Weight Tot Start Need USR + DB1.YDL Yld Comp Weight
  PAR.Weight_Tot_Start_Need_USR = PAR.Weight_Tot_Start_Need_USR + DB1.YDL_Yld_Comp_Weight;

  ENDIF;

 }

 EXECUTE FUNCTION(Rtv Start Weight      RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1678965;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(PAR.Start_Weight);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?4/6/04 Chg Start Wt if less than the sum of the components.
 CASE;

 // IF PAR.Start Weight LT LCL.Weight Tot Start Need USR
 IF PAR.Start_Weight < LCL.Weight_Tot_Start_Need_USR;

 EXECUTE FUNCTION(Upd Start Weight      RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1678961;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(LCL.Weight_Tot_Start_Need_USR);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt Start Weight      CR) TYPE(CRTOBJ) FILE(POCSCPP)           AC1678963;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(PAR.Start_Weight);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Ending_Weight);
  PARAMETER(PAR.Converting_Start_Weight);
  PARAMETER(PAR.Converting_End_Weight);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Total_Line_Weight);
  PARAMETER(PAR.Production_Standard_Yld);
  PARAMETER(PAR.Actual_Yield);
  PARAMETER(PAR.Yield_Variance);
  PARAMETER(PAR.Weight_Variance);
  PARAMETER(PAR.YDL_Comment);
  PARAMETER(PAR.YDL_Post_Status);
  PARAMETER(PAR.YDL_Process_Status);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Start Weight      CH) TYPE(CHGOBJ) FILE(POCSCPP)           AC1678964;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Department_Code);
  PARAMETER(DB1.Production_Line_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Production_Shift);
  PARAMETER(PAR.Start_Weight);
  PARAMETER(DB1.Start_Pieces);
  PARAMETER(DB1.Pct_Pieces_Converted);
  {
   //?USER: Processing after Data read

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 // PAR.Wgt Component USR = CON.*ZERO
 PAR.Wgt_Component_USR = *ZERO;

 //?4/6/04 Chg Start Wt if less than the sum of the components.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Wgt Component USR = PAR.Start Weight - LCL.Weight Tot Start Need USR
 PAR.Wgt_Component_USR = PAR.Start_Weight - LCL.Weight_Tot_Start_Need_USR;

 ENDIF;

 ENDIF;

 ENDIF;

 //?Loins - Boning - Cut Loss
 CASE;

 // IF DB1.Department Code is Loin Boning
 IF DB1.Department_Code = 'LOINS';

 // AND DB1.Production Line Code is Boning
 AND DB1.Production_Line_Code = 'BONING';

 //?Wgt =  .70% of dept line SW
 CASE;

 // IF DB1.Yld Component Code is Cut Loss
 IF DB1.Yld_Component_Code = 'CUTLOSS';

 EXECUTE FUNCTION(Rtv Start Weight      RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1678965;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(PAR.Start_Weight);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.Wgt Component USR = PAR.Start Weight * CON..007 *Rounded
 PAR.Wgt_Component_USR = PAR.Start_Weight * .007 'H';

 ENDIF;

 ENDIF;

 ENDIF;

 //?Bone IN Loin
 CASE;

 // IF PAR.Production Line Code is Bone-In Loin
 IF PAR.Production_Line_Code = 'BILOIN';

 // AND DB1.Yld Component Code is Loin Conversion Weight
 AND DB1.Yld_Component_Code = 'LOINCNV';

 //?Add 2% to the Converions Weight
 // PAR.Wgt Component USR
 PAR.Wgt_Component_USR = PAR.Wgt_Component_USR * 1.02 'H';

 ENDIF;

 //?Bone-In Smoker
 CASE;

 // IF DB1.Yld Component Code is Bone-In Smoker
 IF DB1.Yld_Component_Code = 'BISMKTRM';

 // PAR.Wgt Component USR = PAR.Wgt Component USR * CON.-1 *
 PAR.Wgt_Component_USR = PAR.Wgt_Component_USR * -1;

 ENDIF;

 // PAR.Wgt Produced USR = PAR.Wgt Produced USR + PAR.Wgt Component USR
 PAR.Wgt_Produced_USR = PAR.Wgt_Produced_USR + PAR.Wgt_Component_USR;

 EXECUTE FUNCTION(Chg Yld Daily Wgt     CH) TYPE(CHGOBJ) FILE(POC0CPP)           AC1669643;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(DB1.Yld_Component_Code);
 PARAMETER(PAR.Wgt_Component_USR);
 PARAMETER(DB1.YDL_Component_Group);
 PARAMETER(DB1.YDL_Unused_Sts_1);
 PARAMETER(DB1.YDL_Unused_Sts_2);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?Calculate Start Weight for Department and Line
 CASE;

 // IF DB1.Yld Component Code is Finished
 IF DB1.Yld_Component_Code = 'FINISHED';

 //?Belly
 CASE;

 // IF DB1.Department Code is Belly
 IF DB1.Department_Code = 'BELLY';

 //?Line: SGLRIB SHTBEL- dont do shtbel as of 6/9/04 RMC
 CASE;

 // IF DB1.Production Line Code is Single Rib
 IF DB1.Production_Line_Code = 'SGLRIB';

 EXECUTE FUNCTION(Rtv Component Std     RT) TYPE(RTVOBJ) FILE(PPAGCPP)           AC1684708;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Yld_Component_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(LCL.PLYC_Std_Percent);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 // Start Weight
 PAR.Start_Weight = PAR.Wgt_Component_USR / ( LCL.PLYC_Std_Percent / 100 'H' ) 'H';

 EXECUTE FUNCTION(Upd Start Weight      RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1678961;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(PAR.Start_Weight);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt Start Weight      CR) TYPE(CRTOBJ) FILE(POCSCPP)           AC1678963;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(PAR.Start_Weight);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Ending_Weight);
  PARAMETER(PAR.Converting_Start_Weight);
  PARAMETER(PAR.Converting_End_Weight);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Total_Line_Weight);
  PARAMETER(PAR.Production_Standard_Yld);
  PARAMETER(PAR.Actual_Yield);
  PARAMETER(PAR.Yield_Variance);
  PARAMETER(PAR.Weight_Variance);
  PARAMETER(PAR.YDL_Comment);
  PARAMETER(PAR.YDL_Post_Status);
  PARAMETER(PAR.YDL_Process_Status);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Start Weight      CH) TYPE(CHGOBJ) FILE(POCSCPP)           AC1678964;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Department_Code);
  PARAMETER(DB1.Production_Line_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Production_Shift);
  PARAMETER(PAR.Start_Weight);
  PARAMETER(DB1.Start_Pieces);
  PARAMETER(DB1.Pct_Pieces_Converted);
  {
   //?USER: Processing after Data read

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 ENDIF;

 //?Line: SHTBEL- get from the cut belly sheetbly component  6/15/04
 CASE;

 // IF DB1.Production Line Code is Sheet Belly
 IF DB1.Production_Line_Code = 'SHTBEL';

 EXECUTE FUNCTION(Rtv Start Weight 2    RT) TYPE(RTVOBJ) FILE(POC0CPP)           AC1685610;
 PARAMETER(DB1.Company_Number);
 PARAMETER('CUT');
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER('BELLY');
 PARAMETER('SHEETBLY');
 PARAMETER(PAR.Start_Weight);
 {
  //?USER: Process Data record

  // PAR.YDL Yld Comp Weight = PAR.YDL Yld Comp Weight + DB1.YDL Yld Comp Weight
  PAR.YDL_Yld_Comp_Weight = PAR.YDL_Yld_Comp_Weight + DB1.YDL_Yld_Comp_Weight;

  CASE;

  // IF DB1.Yld Component Code is Loin Conversion Weight
  IF DB1.Yld_Component_Code = 'LOINCNV';

  CASE;

  // IF DB1.YDL Yld Mix Percent is not equal to zeros
  IF DB1.YDL_Yld_Mix_Percent <> *ZERO;

  // PAR.YDL Yld Comp Weight =       *
  PAR.YDL_Yld_Comp_Weight = PAR.YDL_Yld_Comp_Weight * .8 'H';

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(Upd Start Weight      RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1678961;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(PAR.Start_Weight);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt Start Weight      CR) TYPE(CRTOBJ) FILE(POCSCPP)           AC1678963;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(PAR.Start_Weight);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Ending_Weight);
  PARAMETER(PAR.Converting_Start_Weight);
  PARAMETER(PAR.Converting_End_Weight);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Total_Line_Weight);
  PARAMETER(PAR.Production_Standard_Yld);
  PARAMETER(PAR.Actual_Yield);
  PARAMETER(PAR.Yield_Variance);
  PARAMETER(PAR.Weight_Variance);
  PARAMETER(PAR.YDL_Comment);
  PARAMETER(PAR.YDL_Post_Status);
  PARAMETER(PAR.YDL_Process_Status);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Start Weight      CH) TYPE(CHGOBJ) FILE(POCSCPP)           AC1678964;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Department_Code);
  PARAMETER(DB1.Production_Line_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Production_Shift);
  PARAMETER(PAR.Start_Weight);
  PARAMETER(DB1.Start_Pieces);
  PARAMETER(DB1.Pct_Pieces_Converted);
  {
   //?USER: Processing after Data read

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 ENDIF;

 //?Line: SKINLS
 CASE;

 // IF DB1.Production Line Code is Skinless
 IF DB1.Production_Line_Code = 'SKINLS';

 EXECUTE FUNCTION(Rtv Start Weight 2    RT) TYPE(RTVOBJ) FILE(POC0CPP)           AC1685610;
 PARAMETER(DB1.Company_Number);
 PARAMETER('CUT');
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER('BELLY');
 PARAMETER('SKNLSBLY');
 PARAMETER(PAR.Start_Weight);
 {
  //?USER: Process Data record

  // PAR.YDL Yld Comp Weight = PAR.YDL Yld Comp Weight + DB1.YDL Yld Comp Weight
  PAR.YDL_Yld_Comp_Weight = PAR.YDL_Yld_Comp_Weight + DB1.YDL_Yld_Comp_Weight;

  CASE;

  // IF DB1.Yld Component Code is Loin Conversion Weight
  IF DB1.Yld_Component_Code = 'LOINCNV';

  CASE;

  // IF DB1.YDL Yld Mix Percent is not equal to zeros
  IF DB1.YDL_Yld_Mix_Percent <> *ZERO;

  // PAR.YDL Yld Comp Weight =       *
  PAR.YDL_Yld_Comp_Weight = PAR.YDL_Yld_Comp_Weight * .8 'H';

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(Upd Start Weight      RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1678961;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(PAR.Start_Weight);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt Start Weight      CR) TYPE(CRTOBJ) FILE(POCSCPP)           AC1678963;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(PAR.Start_Weight);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Ending_Weight);
  PARAMETER(PAR.Converting_Start_Weight);
  PARAMETER(PAR.Converting_End_Weight);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Total_Line_Weight);
  PARAMETER(PAR.Production_Standard_Yld);
  PARAMETER(PAR.Actual_Yield);
  PARAMETER(PAR.Yield_Variance);
  PARAMETER(PAR.Weight_Variance);
  PARAMETER(PAR.YDL_Comment);
  PARAMETER(PAR.YDL_Post_Status);
  PARAMETER(PAR.YDL_Process_Status);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Start Weight      CH) TYPE(CHGOBJ) FILE(POCSCPP)           AC1678964;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Department_Code);
  PARAMETER(DB1.Production_Line_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Production_Shift);
  PARAMETER(PAR.Start_Weight);
  PARAMETER(DB1.Start_Pieces);
  PARAMETER(DB1.Pct_Pieces_Converted);
  {
   //?USER: Processing after Data read

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Calc Prod Std Yield %
CASE;

// IF PAR.Department Code is CUT
IF PAR.Department_Code = 'CUT';

//?Actual Yield
CASE;

// IF PAR.Cold Weight is Greater than zero
IF PAR.Cold_Weight > *ZERO;

// Actual Yield
PAR.Actual_Yield = ( PAR.Total_Line_Weight / PAR.Cold_Weight 'H' ) * 100 'H';

//?Actual Yield
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Actual Yield = CON.*ZERO
PAR.Actual_Yield = *ZERO;

ENDIF;

EXECUTE FUNCTION(Rtv Line Std Yield    RT) TYPE(RTVOBJ) FILE(POC2CPP)           AC1671633;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Department_Code);
PARAMETER(PAR.Production_Line_Code);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Production_Standard_Yld);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 // LCL.First Time Flag = CND.Yes
 LCL.First_Time_Flag = 'Y';

 //?USER: Process Data record

 // PAR.Production Standard Yld% = DB1.Production Standard Yld%
 PAR.Production_Standard_Yld = DB1.Production_Standard_Yld;

 QUIT;

}


CASE;

// IF PAR.Total Line Weight is Greater than zero
IF PAR.Total_Line_Weight > *ZERO;

EXECUTE FUNCTION(Exc Calc Mix Pct      RT) TYPE(RTVOBJ) FILE(POC0CPP)           AC1670638;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Department_Code);
PARAMETER(PAR.Production_Line_Code);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Production_Shift);
PARAMETER(PAR.Total_Line_Weight);
{
 //?USER: Process Data record

 // PAR.YDL Yld Mix Percent = CON.*ZERO
 PAR.YDL_Yld_Mix_Percent = *ZERO;

 // PAR.YDL Yld Standard Pct = CON.*ZERO
 PAR.YDL_Yld_Standard_Pct = *ZERO;

 // PAR.YDL Yld Weight Diff = CON.*ZERO
 PAR.YDL_Yld_Weight_Diff = *ZERO;

 CASE;

 // IF DB1.YDL Yld Comp Weight is Greater than zero
 IF DB1.YDL_Yld_Comp_Weight > *ZERO;

 // Mix Percent
 PAR.YDL_Yld_Mix_Percent = ( DB1.YDL_Yld_Comp_Weight / PAR.Total_Line_Weight 'H' ) * 100
 'H';

 ENDIF;

 //?STD %  - std from yld comp std file and spec calcs from bom
 CASE;

 // IF DB1.Department Code is Belly
 IF DB1.Department_Code = 'BELLY';

 // AND DB1.Production Line Code is Skinless
 AND DB1.Production_Line_Code = 'SKINLS';

 // AND DB1.Yld Component Code is Finished
 AND DB1.Yld_Component_Code = 'FINISHED';

 //?Std% = sum((wgt produced/item bom sales yield)) / sw
 EXECUTE FUNCTION(Clc Skinls Finish Std IF) TYPE(EXCINTFUN)                      AC1685406;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER('FINISHED');
 PARAMETER(PAR.YDL_Yld_Standard_Pct);
 PARAMETER(PAR.Total_Line_Weight);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Component Info    RT) TYPE(RTVOBJ) FILE(POCZREP)           AC1669682;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Yld_Component_Code);
  PARAMETER(LCL.PLYC_Type);
  PARAMETER(WRK.PLYC_Percent_of_Weight);
  PARAMETER(WRK.PLYC_Comment);
  PARAMETER(LCL.Credit_Item_Inc_Exc_Sts);
  PARAMETER(WRK.Type_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Type_Code);
  PARAMETER(WRK.Group_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Group_Code);
  PARAMETER(WRK.Class_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Class_Code);
  PARAMETER(WRK.YC_Required_Sts);
  PARAMETER(WRK.YC_Component_Group);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.PLYC Type is Retrieve w/Mult Item Str
  IF LCL.PLYC_Type = 'MS';

  EXECUTE FUNCTION(Rtv Skinls Fin Std    RT) TYPE(RTVOBJ) FILE(PMAQREP)           AC1857634;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Yld_Component_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(LCL.Credit_Item_Inc_Exc_Sts);
  PARAMETER(PAR.Start_Weight);
  PARAMETER(PAR.YDL_Yld_Standard_Pct);
  PARAMETER(LCL.Unused_Weight_Rate_1);
  PARAMETER(LCL.Weight_Prod_2_USR);
  {
   //?USER: Initialize routine

   // PAR.Unused Weight Rate 1 = CON.*ZERO
   PAR.Unused_Weight_Rate_1 = *ZERO;

   // PAR.Weight Prod 2 USR = CON.*ZERO
   PAR.Weight_Prod_2_USR = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(Rtv Skinls Fin Std    RT) TYPE(RTVOBJ) FILE(POCPCPP)           AC1685407;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Department_Code);
   PARAMETER(DB1.Production_Line_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Production_Shift);
   PARAMETER(PAR.Credit_Item_Inc_Exc_Sts);
   PARAMETER(DB1.Type_Inc_Exc_Sts);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(DB1.Group_Inc_Exc_Sts);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Class_Inc_Exc_Sts);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(PAR.YDL_Yld_Standard_Pct);
   PARAMETER(PAR.Start_Weight);
   PARAMETER(PAR.Unused_Weight_Rate_1);
   PARAMETER(PAR.Weight_Prod_2_USR);
   {
    //?USER: Initialize routine

    // LCL.Unused Weight Rate 1 = CON.*ZERO
    LCL.Unused_Weight_Rate_1 = *ZERO;

    // LCL.Weight Prod 2 USR = CON.*ZERO
    LCL.Weight_Prod_2_USR = *ZERO;

    // PAR.YDL Yld Standard Pct = CON.*ZERO
    PAR.YDL_Yld_Standard_Pct = *ZERO;

    //?USER: Process Data record

    // PGM.*Record selected = CND.*YES
    PGM.*Record_selected = 'Y';

    //?SEL:  Credit Items
    CASE;

    // IF PAR.Credit Item Inc/Exc Sts is Entered
    IF PAR.Credit_Item_Inc_Exc_Sts = 'E'/'I';

    CASE;

    // IF PAR.Credit Item Inc/Exc Sts is Include
    IF PAR.Credit_Item_Inc_Exc_Sts = 'I';

    CASE;

    // IF DB1.Credit Item Status is no
    IF DB1.Credit_Item_Status = 'N';

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Credit Item Inc/Exc Sts is Exclude
    IF PAR.Credit_Item_Inc_Exc_Sts = 'E';

    CASE;

    // IF DB1.Credit Item Status is yes
    IF DB1.Credit_Item_Status = 'Y';

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    //?SEL:  Type
    CASE;

    // IF PAR.Item Structure Type Code is Entered
    IF PAR.Item_Structure_Type_Code <> *ZERO;

    CASE;

    // IF PAR.Type Inc/Exc Sts is Include
    IF PAR.Type_Inc_Exc_Sts = 'I';

    CASE;

    // IF PAR.Item Structure Type Code NE DB1.Item Structure Type Code
    IF PAR.Item_Structure_Type_Code <> DB1.Item_Structure_Type_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Type Inc/Exc Sts is Exclude
    IF PAR.Type_Inc_Exc_Sts = 'E';

    CASE;

    // IF PAR.Item Structure Type Code EQ DB1.Item Structure Type Code
    IF PAR.Item_Structure_Type_Code = DB1.Item_Structure_Type_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    //?SEL:  Group
    CASE;

    // IF PAR.Item Structure Group Code is Entered
    IF PAR.Item_Structure_Group_Code <> *ZERO;

    CASE;

    // IF PAR.Group Inc/Exc Sts is Include
    IF PAR.Group_Inc_Exc_Sts = 'I';

    CASE;

    // IF PAR.Item Structure Group Code NE DB1.Item Structure Group Code
    IF PAR.Item_Structure_Group_Code <> DB1.Item_Structure_Group_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Group Inc/Exc Sts is Exclude
    IF PAR.Group_Inc_Exc_Sts = 'E';

    CASE;

    // IF PAR.Item Structure Group Code EQ DB1.Item Structure Group Code
    IF PAR.Item_Structure_Group_Code = DB1.Item_Structure_Group_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    //?SEL:  Class
    CASE;

    // IF PAR.Item Structure Class Code is Entered
    IF PAR.Item_Structure_Class_Code <> *ZERO;

    CASE;

    // IF PAR.Class Inc/Exc Sts is Include
    IF PAR.Class_Inc_Exc_Sts = 'I';

    CASE;

    // IF PAR.Item Structure Class Code NE DB1.Item Structure Class Code
    IF PAR.Item_Structure_Class_Code <> DB1.Item_Structure_Class_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Class Inc/Exc Sts is Exclude
    IF PAR.Class_Inc_Exc_Sts = 'E';

    CASE;

    // IF PAR.Item Structure Class Code EQ DB1.Item Structure Class Code
    IF PAR.Item_Structure_Class_Code = DB1.Item_Structure_Class_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    CASE;

    // IF PGM.*Record selected is *YES
    IF PGM.*Record_selected = 'Y';

    EXECUTE FUNCTION(Rtv Item Sales Yield  RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1685363;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Item_Code);
    PARAMETER(LCL.Sales_Yield);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?Loin Boning : Calc 80025 Sales Yld from wgt, pieces, and avg zone wgt
    CASE;

    // IF DB1.Item Code is Bone Ls Loin
    IF DB1.Item_Code = 80025;

    EXECUTE FUNCTION(Rtv Bone In Zone Wgt  RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1688369;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Department_Code);
    PARAMETER(DB1.Production_Line_Code);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Production_Shift);
    PARAMETER(LCL.Bone_In_Zone_Avg_Loin_Wgt);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF DB1.Yld Transaction Pieces is NE Zeros
    IF DB1.Yld_Transaction_Pieces <> *ZERO;

    // AND LCL.Bone In Zone Avg Loin Wgt is GT Zero
    AND LCL.Bone_In_Zone_Avg_Loin_Wgt > *ZERO;

    // 80025 Sales Yield
    LCL.Sales_Yield = ( ( DB1.Yld_Transaction_Weight / DB1.Yld_Transaction_Pieces 'H' )
    / LCL.Bone_In_Zone_Avg_Loin_Wgt ) * 100;

    ENDIF;

    ENDIF;

    CASE;

    // IF DB1.Department Code is Belly
    IF DB1.Department_Code = 'BELLY';

    // AND DB1.Production Line Code is Skinless
    AND DB1.Production_Line_Code = 'SKINLS';

    // AND DB1.Item Code is Belly
    AND DB1.Item_Code = 57150;

    //?Adjust belly item 57150 with Heavy Bellies WIP item 2320 deletes
    EXECUTE FUNCTION(Rtv Del Pend f/1 Item RT) TYPE(RTVOBJ) FILE(POCOCPP)           AC1688209;
    PARAMETER(DB1.Company_Number);
    PARAMETER('CUT');
    PARAMETER('BELLY');
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Production_Shift);
    PARAMETER(2320);
    PARAMETER(LCL.Delete_Pending_Wgt);
    {
     //?USER: Process Data record

     // PAR.Delete Pending Wgt = PAR.Delete Pending Wgt + DB1.Delete Pending Wgt
     PAR.Delete_Pending_Wgt = PAR.Delete_Pending_Wgt + DB1.Delete_Pending_Wgt;

    }

    // Compute:total SW
    LCL.Weight_Prod_1_USR = ( ( DB1.Yld_Transaction_Weight - ( LCL.Delete_Pending_Wgt * .77
    'H' ) ) / ( LCL.Sales_Yield / 100 ) + ) + LCL.Delete_Pending_Wgt;

    // Adj Sales Yld for 57150
    LCL.Sales_Yield = ( DB1.Yld_Transaction_Weight / LCL.Weight_Prod_1_USR 'H' ) * 100;

    //?SUM(Standard Start Weight)
    CASE;

    // IF LCL.Sales Yield is not equal to zeros
    IF LCL.Sales_Yield <> *ZERO;

    // Accum Sales Yld for items
    LCL.Unused_Weight_Rate_1 = ( DB1.Yld_Transaction_Weight / ( LCL.Sales_Yield / 100 )
    + 'H' ) + LCL.Unused_Weight_Rate_1;

    ENDIF;

    // LCL.Weight Prod 2 USR = LCL.Weight Prod 2 USR + DB1.Yld Transaction Weight
    LCL.Weight_Prod_2_USR = LCL.Weight_Prod_2_USR + DB1.Yld_Transaction_Weight;

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?SUM(Standard Start Weight)
    CASE;

    // IF LCL.Sales Yield is not equal to zeros
    IF LCL.Sales_Yield <> *ZERO;

    // Accum Sales Yld for items
    LCL.Unused_Weight_Rate_1 = ( DB1.Yld_Transaction_Weight / ( LCL.Sales_Yield / 100 )
    + 'H' ) + LCL.Unused_Weight_Rate_1;

    ENDIF;

    // LCL.Weight Prod 2 USR = LCL.Weight Prod 2 USR + DB1.Yld Transaction Weight
    LCL.Weight_Prod_2_USR = LCL.Weight_Prod_2_USR + DB1.Yld_Transaction_Weight;

    ENDIF;

    ENDIF;

    //?USER: Exit processing

    CASE;

    // IF LCL.Unused Weight Rate 1 is Greater than zero
    IF LCL.Unused_Weight_Rate_1 > *ZERO;

    // Compute:Std Pct
    PAR.YDL_Yld_Standard_Pct = ( LCL.Weight_Prod_2_USR / LCL.Unused_Weight_Rate_1 'H' ) * 100
    'H';

    ENDIF;

    // PAR.Unused Weight Rate 1 = PAR.Unused Weight Rate 1 + LCL.Unused Weight Rate 1
    PAR.Unused_Weight_Rate_1 = PAR.Unused_Weight_Rate_1 + LCL.Unused_Weight_Rate_1;

    // PAR.Weight Prod 2 USR = PAR.Weight Prod 2 USR + LCL.Weight Prod 2 USR
    PAR.Weight_Prod_2_USR = PAR.Weight_Prod_2_USR + LCL.Weight_Prod_2_USR;

   }

   //?USER: Exit processing

   CASE;

   // IF PAR.Unused Weight Rate 1 is Greater than zero
   IF PAR.Unused_Weight_Rate_1 > *ZERO;

   // Compute:Std Pct
   PAR.YDL_Yld_Standard_Pct = ( PAR.Weight_Prod_2_USR / PAR.Unused_Weight_Rate_1 'H' ) * 100
   'H';

   ENDIF;

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Skinls Fin Std    RT) TYPE(RTVOBJ) FILE(POCPCPP)           AC1685407;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(LCL.Credit_Item_Inc_Exc_Sts);
  PARAMETER(WRK.Type_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Type_Code);
  PARAMETER(WRK.Group_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Group_Code);
  PARAMETER(WRK.Class_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Class_Code);
  PARAMETER(PAR.YDL_Yld_Standard_Pct);
  PARAMETER(PAR.Start_Weight);
  PARAMETER(LCL.Unused_Weight_Rate_1);
  PARAMETER(LCL.Weight_Prod_2_USR);
  {
   //?USER: Initialize routine

   // LCL.Unused Weight Rate 1 = CON.*ZERO
   LCL.Unused_Weight_Rate_1 = *ZERO;

   // LCL.Weight Prod 2 USR = CON.*ZERO
   LCL.Weight_Prod_2_USR = *ZERO;

   // PAR.YDL Yld Standard Pct = CON.*ZERO
   PAR.YDL_Yld_Standard_Pct = *ZERO;

   //?USER: Process Data record

   // PGM.*Record selected = CND.*YES
   PGM.*Record_selected = 'Y';

   //?SEL:  Credit Items
   CASE;

   // IF PAR.Credit Item Inc/Exc Sts is Entered
   IF PAR.Credit_Item_Inc_Exc_Sts = 'E'/'I';

   CASE;

   // IF PAR.Credit Item Inc/Exc Sts is Include
   IF PAR.Credit_Item_Inc_Exc_Sts = 'I';

   CASE;

   // IF DB1.Credit Item Status is no
   IF DB1.Credit_Item_Status = 'N';

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Credit Item Inc/Exc Sts is Exclude
   IF PAR.Credit_Item_Inc_Exc_Sts = 'E';

   CASE;

   // IF DB1.Credit Item Status is yes
   IF DB1.Credit_Item_Status = 'Y';

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   //?SEL:  Type
   CASE;

   // IF PAR.Item Structure Type Code is Entered
   IF PAR.Item_Structure_Type_Code <> *ZERO;

   CASE;

   // IF PAR.Type Inc/Exc Sts is Include
   IF PAR.Type_Inc_Exc_Sts = 'I';

   CASE;

   // IF PAR.Item Structure Type Code NE DB1.Item Structure Type Code
   IF PAR.Item_Structure_Type_Code <> DB1.Item_Structure_Type_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Type Inc/Exc Sts is Exclude
   IF PAR.Type_Inc_Exc_Sts = 'E';

   CASE;

   // IF PAR.Item Structure Type Code EQ DB1.Item Structure Type Code
   IF PAR.Item_Structure_Type_Code = DB1.Item_Structure_Type_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   //?SEL:  Group
   CASE;

   // IF PAR.Item Structure Group Code is Entered
   IF PAR.Item_Structure_Group_Code <> *ZERO;

   CASE;

   // IF PAR.Group Inc/Exc Sts is Include
   IF PAR.Group_Inc_Exc_Sts = 'I';

   CASE;

   // IF PAR.Item Structure Group Code NE DB1.Item Structure Group Code
   IF PAR.Item_Structure_Group_Code <> DB1.Item_Structure_Group_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Group Inc/Exc Sts is Exclude
   IF PAR.Group_Inc_Exc_Sts = 'E';

   CASE;

   // IF PAR.Item Structure Group Code EQ DB1.Item Structure Group Code
   IF PAR.Item_Structure_Group_Code = DB1.Item_Structure_Group_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   //?SEL:  Class
   CASE;

   // IF PAR.Item Structure Class Code is Entered
   IF PAR.Item_Structure_Class_Code <> *ZERO;

   CASE;

   // IF PAR.Class Inc/Exc Sts is Include
   IF PAR.Class_Inc_Exc_Sts = 'I';

   CASE;

   // IF PAR.Item Structure Class Code NE DB1.Item Structure Class Code
   IF PAR.Item_Structure_Class_Code <> DB1.Item_Structure_Class_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Class Inc/Exc Sts is Exclude
   IF PAR.Class_Inc_Exc_Sts = 'E';

   CASE;

   // IF PAR.Item Structure Class Code EQ DB1.Item Structure Class Code
   IF PAR.Item_Structure_Class_Code = DB1.Item_Structure_Class_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   CASE;

   // IF PGM.*Record selected is *YES
   IF PGM.*Record_selected = 'Y';

   EXECUTE FUNCTION(Rtv Item Sales Yield  RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1685363;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Sales_Yield);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Loin Boning : Calc 80025 Sales Yld from wgt, pieces, and avg zone wgt
   CASE;

   // IF DB1.Item Code is Bone Ls Loin
   IF DB1.Item_Code = 80025;

   EXECUTE FUNCTION(Rtv Bone In Zone Wgt  RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1688369;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Department_Code);
   PARAMETER(DB1.Production_Line_Code);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Production_Shift);
   PARAMETER(LCL.Bone_In_Zone_Avg_Loin_Wgt);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF DB1.Yld Transaction Pieces is NE Zeros
   IF DB1.Yld_Transaction_Pieces <> *ZERO;

   // AND LCL.Bone In Zone Avg Loin Wgt is GT Zero
   AND LCL.Bone_In_Zone_Avg_Loin_Wgt > *ZERO;

   // 80025 Sales Yield
   LCL.Sales_Yield = ( ( DB1.Yld_Transaction_Weight / DB1.Yld_Transaction_Pieces 'H' )
   / LCL.Bone_In_Zone_Avg_Loin_Wgt ) * 100;

   ENDIF;

   ENDIF;

   CASE;

   // IF DB1.Department Code is Belly
   IF DB1.Department_Code = 'BELLY';

   // AND DB1.Production Line Code is Skinless
   AND DB1.Production_Line_Code = 'SKINLS';

   // AND DB1.Item Code is Belly
   AND DB1.Item_Code = 57150;

   //?Adjust belly item 57150 with Heavy Bellies WIP item 2320 deletes
   EXECUTE FUNCTION(Rtv Del Pend f/1 Item RT) TYPE(RTVOBJ) FILE(POCOCPP)           AC1688209;
   PARAMETER(DB1.Company_Number);
   PARAMETER('CUT');
   PARAMETER('BELLY');
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Production_Shift);
   PARAMETER(2320);
   PARAMETER(LCL.Delete_Pending_Wgt);
   {
    //?USER: Process Data record

    // PAR.Delete Pending Wgt = PAR.Delete Pending Wgt + DB1.Delete Pending Wgt
    PAR.Delete_Pending_Wgt = PAR.Delete_Pending_Wgt + DB1.Delete_Pending_Wgt;

   }

   // Compute:total SW
   LCL.Weight_Prod_1_USR = ( ( DB1.Yld_Transaction_Weight - ( LCL.Delete_Pending_Wgt * .77
   'H' ) ) / ( LCL.Sales_Yield / 100 ) + ) + LCL.Delete_Pending_Wgt;

   // Adj Sales Yld for 57150
   LCL.Sales_Yield = ( DB1.Yld_Transaction_Weight / LCL.Weight_Prod_1_USR 'H' ) * 100;

   //?SUM(Standard Start Weight)
   CASE;

   // IF LCL.Sales Yield is not equal to zeros
   IF LCL.Sales_Yield <> *ZERO;

   // Accum Sales Yld for items
   LCL.Unused_Weight_Rate_1 = ( DB1.Yld_Transaction_Weight / ( LCL.Sales_Yield / 100 )
   + 'H' ) + LCL.Unused_Weight_Rate_1;

   ENDIF;

   // LCL.Weight Prod 2 USR = LCL.Weight Prod 2 USR + DB1.Yld Transaction Weight
   LCL.Weight_Prod_2_USR = LCL.Weight_Prod_2_USR + DB1.Yld_Transaction_Weight;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?SUM(Standard Start Weight)
   CASE;

   // IF LCL.Sales Yield is not equal to zeros
   IF LCL.Sales_Yield <> *ZERO;

   // Accum Sales Yld for items
   LCL.Unused_Weight_Rate_1 = ( DB1.Yld_Transaction_Weight / ( LCL.Sales_Yield / 100 )
   + 'H' ) + LCL.Unused_Weight_Rate_1;

   ENDIF;

   // LCL.Weight Prod 2 USR = LCL.Weight Prod 2 USR + DB1.Yld Transaction Weight
   LCL.Weight_Prod_2_USR = LCL.Weight_Prod_2_USR + DB1.Yld_Transaction_Weight;

   ENDIF;

   ENDIF;

   //?USER: Exit processing

   CASE;

   // IF LCL.Unused Weight Rate 1 is Greater than zero
   IF LCL.Unused_Weight_Rate_1 > *ZERO;

   // Compute:Std Pct
   PAR.YDL_Yld_Standard_Pct = ( LCL.Weight_Prod_2_USR / LCL.Unused_Weight_Rate_1 'H' ) * 100
   'H';

   ENDIF;

   // PAR.Unused Weight Rate 1 = PAR.Unused Weight Rate 1 + LCL.Unused Weight Rate 1
   PAR.Unused_Weight_Rate_1 = PAR.Unused_Weight_Rate_1 + LCL.Unused_Weight_Rate_1;

   // PAR.Weight Prod 2 USR = PAR.Weight Prod 2 USR + LCL.Weight Prod 2 USR
   PAR.Weight_Prod_2_USR = PAR.Weight_Prod_2_USR + LCL.Weight_Prod_2_USR;

  }

  ENDIF;

 }

 //?STD %  - std from yld comp std file and spec calcs from bom
 // IF DB1.Department Code is Loin Boning
 IF DB1.Department_Code = 'LOINS';

 // AND DB1.Production Line Code is Boning
 AND DB1.Production_Line_Code = 'BONING';

 // AND DB1.Yld Component Code is Boneless Loin-Strap On
 AND ( DB1.Yld_Component_Code = 'BNLSSTRON';

 // OR DB1.Yld Component Code is Boneless Loin-Strap Off
 OR DB1.Yld_Component_Code = 'BNLSSTROFF' );

 EXECUTE FUNCTION(Clc Bonless Loins Std IF) TYPE(EXCINTFUN)                      AC1687896;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(DB1.Yld_Component_Code);
 PARAMETER(PAR.YDL_Yld_Standard_Pct);
 PARAMETER(PAR.Total_Line_Weight);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Component Info    RT) TYPE(RTVOBJ) FILE(POCZREP)           AC1669682;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Yld_Component_Code);
  PARAMETER(LCL.PLYC_Type);
  PARAMETER(WRK.PLYC_Percent_of_Weight);
  PARAMETER(WRK.PLYC_Comment);
  PARAMETER(LCL.Credit_Item_Inc_Exc_Sts);
  PARAMETER(WRK.Type_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Type_Code);
  PARAMETER(WRK.Group_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Group_Code);
  PARAMETER(WRK.Class_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Class_Code);
  PARAMETER(WRK.YC_Required_Sts);
  PARAMETER(WRK.YC_Component_Group);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.PLYC Type is Retrieve w/Mult Item Str
  IF LCL.PLYC_Type = 'MS';

  EXECUTE FUNCTION(Rtv Skinls Fin Std    RT) TYPE(RTVOBJ) FILE(PMAQREP)           AC1857634;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Yld_Component_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(LCL.Credit_Item_Inc_Exc_Sts);
  PARAMETER(PAR.Start_Weight);
  PARAMETER(PAR.YDL_Yld_Standard_Pct);
  PARAMETER(LCL.Unused_Weight_Rate_1);
  PARAMETER(LCL.Weight_Prod_2_USR);
  {
   //?USER: Initialize routine

   // PAR.Unused Weight Rate 1 = CON.*ZERO
   PAR.Unused_Weight_Rate_1 = *ZERO;

   // PAR.Weight Prod 2 USR = CON.*ZERO
   PAR.Weight_Prod_2_USR = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(Rtv Skinls Fin Std    RT) TYPE(RTVOBJ) FILE(POCPCPP)           AC1685407;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Department_Code);
   PARAMETER(DB1.Production_Line_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Production_Shift);
   PARAMETER(PAR.Credit_Item_Inc_Exc_Sts);
   PARAMETER(DB1.Type_Inc_Exc_Sts);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(DB1.Group_Inc_Exc_Sts);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Class_Inc_Exc_Sts);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(PAR.YDL_Yld_Standard_Pct);
   PARAMETER(PAR.Start_Weight);
   PARAMETER(PAR.Unused_Weight_Rate_1);
   PARAMETER(PAR.Weight_Prod_2_USR);
   {
    //?USER: Initialize routine

    // LCL.Unused Weight Rate 1 = CON.*ZERO
    LCL.Unused_Weight_Rate_1 = *ZERO;

    // LCL.Weight Prod 2 USR = CON.*ZERO
    LCL.Weight_Prod_2_USR = *ZERO;

    // PAR.YDL Yld Standard Pct = CON.*ZERO
    PAR.YDL_Yld_Standard_Pct = *ZERO;

    //?USER: Process Data record

    // PGM.*Record selected = CND.*YES
    PGM.*Record_selected = 'Y';

    //?SEL:  Credit Items
    CASE;

    // IF PAR.Credit Item Inc/Exc Sts is Entered
    IF PAR.Credit_Item_Inc_Exc_Sts = 'E'/'I';

    CASE;

    // IF PAR.Credit Item Inc/Exc Sts is Include
    IF PAR.Credit_Item_Inc_Exc_Sts = 'I';

    CASE;

    // IF DB1.Credit Item Status is no
    IF DB1.Credit_Item_Status = 'N';

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Credit Item Inc/Exc Sts is Exclude
    IF PAR.Credit_Item_Inc_Exc_Sts = 'E';

    CASE;

    // IF DB1.Credit Item Status is yes
    IF DB1.Credit_Item_Status = 'Y';

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    //?SEL:  Type
    CASE;

    // IF PAR.Item Structure Type Code is Entered
    IF PAR.Item_Structure_Type_Code <> *ZERO;

    CASE;

    // IF PAR.Type Inc/Exc Sts is Include
    IF PAR.Type_Inc_Exc_Sts = 'I';

    CASE;

    // IF PAR.Item Structure Type Code NE DB1.Item Structure Type Code
    IF PAR.Item_Structure_Type_Code <> DB1.Item_Structure_Type_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Type Inc/Exc Sts is Exclude
    IF PAR.Type_Inc_Exc_Sts = 'E';

    CASE;

    // IF PAR.Item Structure Type Code EQ DB1.Item Structure Type Code
    IF PAR.Item_Structure_Type_Code = DB1.Item_Structure_Type_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    //?SEL:  Group
    CASE;

    // IF PAR.Item Structure Group Code is Entered
    IF PAR.Item_Structure_Group_Code <> *ZERO;

    CASE;

    // IF PAR.Group Inc/Exc Sts is Include
    IF PAR.Group_Inc_Exc_Sts = 'I';

    CASE;

    // IF PAR.Item Structure Group Code NE DB1.Item Structure Group Code
    IF PAR.Item_Structure_Group_Code <> DB1.Item_Structure_Group_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Group Inc/Exc Sts is Exclude
    IF PAR.Group_Inc_Exc_Sts = 'E';

    CASE;

    // IF PAR.Item Structure Group Code EQ DB1.Item Structure Group Code
    IF PAR.Item_Structure_Group_Code = DB1.Item_Structure_Group_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    //?SEL:  Class
    CASE;

    // IF PAR.Item Structure Class Code is Entered
    IF PAR.Item_Structure_Class_Code <> *ZERO;

    CASE;

    // IF PAR.Class Inc/Exc Sts is Include
    IF PAR.Class_Inc_Exc_Sts = 'I';

    CASE;

    // IF PAR.Item Structure Class Code NE DB1.Item Structure Class Code
    IF PAR.Item_Structure_Class_Code <> DB1.Item_Structure_Class_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Class Inc/Exc Sts is Exclude
    IF PAR.Class_Inc_Exc_Sts = 'E';

    CASE;

    // IF PAR.Item Structure Class Code EQ DB1.Item Structure Class Code
    IF PAR.Item_Structure_Class_Code = DB1.Item_Structure_Class_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    CASE;

    // IF PGM.*Record selected is *YES
    IF PGM.*Record_selected = 'Y';

    EXECUTE FUNCTION(Rtv Item Sales Yield  RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1685363;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Item_Code);
    PARAMETER(LCL.Sales_Yield);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?Loin Boning : Calc 80025 Sales Yld from wgt, pieces, and avg zone wgt
    CASE;

    // IF DB1.Item Code is Bone Ls Loin
    IF DB1.Item_Code = 80025;

    EXECUTE FUNCTION(Rtv Bone In Zone Wgt  RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1688369;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Department_Code);
    PARAMETER(DB1.Production_Line_Code);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Production_Shift);
    PARAMETER(LCL.Bone_In_Zone_Avg_Loin_Wgt);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF DB1.Yld Transaction Pieces is NE Zeros
    IF DB1.Yld_Transaction_Pieces <> *ZERO;

    // AND LCL.Bone In Zone Avg Loin Wgt is GT Zero
    AND LCL.Bone_In_Zone_Avg_Loin_Wgt > *ZERO;

    // 80025 Sales Yield
    LCL.Sales_Yield = ( ( DB1.Yld_Transaction_Weight / DB1.Yld_Transaction_Pieces 'H' )
    / LCL.Bone_In_Zone_Avg_Loin_Wgt ) * 100;

    ENDIF;

    ENDIF;

    CASE;

    // IF DB1.Department Code is Belly
    IF DB1.Department_Code = 'BELLY';

    // AND DB1.Production Line Code is Skinless
    AND DB1.Production_Line_Code = 'SKINLS';

    // AND DB1.Item Code is Belly
    AND DB1.Item_Code = 57150;

    //?Adjust belly item 57150 with Heavy Bellies WIP item 2320 deletes
    EXECUTE FUNCTION(Rtv Del Pend f/1 Item RT) TYPE(RTVOBJ) FILE(POCOCPP)           AC1688209;
    PARAMETER(DB1.Company_Number);
    PARAMETER('CUT');
    PARAMETER('BELLY');
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Production_Shift);
    PARAMETER(2320);
    PARAMETER(LCL.Delete_Pending_Wgt);
    {
     //?USER: Process Data record

     // PAR.Delete Pending Wgt = PAR.Delete Pending Wgt + DB1.Delete Pending Wgt
     PAR.Delete_Pending_Wgt = PAR.Delete_Pending_Wgt + DB1.Delete_Pending_Wgt;

    }

    // Compute:total SW
    LCL.Weight_Prod_1_USR = ( ( DB1.Yld_Transaction_Weight - ( LCL.Delete_Pending_Wgt * .77
    'H' ) ) / ( LCL.Sales_Yield / 100 ) + ) + LCL.Delete_Pending_Wgt;

    // Adj Sales Yld for 57150
    LCL.Sales_Yield = ( DB1.Yld_Transaction_Weight / LCL.Weight_Prod_1_USR 'H' ) * 100;

    //?SUM(Standard Start Weight)
    CASE;

    // IF LCL.Sales Yield is not equal to zeros
    IF LCL.Sales_Yield <> *ZERO;

    // Accum Sales Yld for items
    LCL.Unused_Weight_Rate_1 = ( DB1.Yld_Transaction_Weight / ( LCL.Sales_Yield / 100 )
    + 'H' ) + LCL.Unused_Weight_Rate_1;

    ENDIF;

    // LCL.Weight Prod 2 USR = LCL.Weight Prod 2 USR + DB1.Yld Transaction Weight
    LCL.Weight_Prod_2_USR = LCL.Weight_Prod_2_USR + DB1.Yld_Transaction_Weight;

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?SUM(Standard Start Weight)
    CASE;

    // IF LCL.Sales Yield is not equal to zeros
    IF LCL.Sales_Yield <> *ZERO;

    // Accum Sales Yld for items
    LCL.Unused_Weight_Rate_1 = ( DB1.Yld_Transaction_Weight / ( LCL.Sales_Yield / 100 )
    + 'H' ) + LCL.Unused_Weight_Rate_1;

    ENDIF;

    // LCL.Weight Prod 2 USR = LCL.Weight Prod 2 USR + DB1.Yld Transaction Weight
    LCL.Weight_Prod_2_USR = LCL.Weight_Prod_2_USR + DB1.Yld_Transaction_Weight;

    ENDIF;

    ENDIF;

    //?USER: Exit processing

    CASE;

    // IF LCL.Unused Weight Rate 1 is Greater than zero
    IF LCL.Unused_Weight_Rate_1 > *ZERO;

    // Compute:Std Pct
    PAR.YDL_Yld_Standard_Pct = ( LCL.Weight_Prod_2_USR / LCL.Unused_Weight_Rate_1 'H' ) * 100
    'H';

    ENDIF;

    // PAR.Unused Weight Rate 1 = PAR.Unused Weight Rate 1 + LCL.Unused Weight Rate 1
    PAR.Unused_Weight_Rate_1 = PAR.Unused_Weight_Rate_1 + LCL.Unused_Weight_Rate_1;

    // PAR.Weight Prod 2 USR = PAR.Weight Prod 2 USR + LCL.Weight Prod 2 USR
    PAR.Weight_Prod_2_USR = PAR.Weight_Prod_2_USR + LCL.Weight_Prod_2_USR;

   }

   //?USER: Exit processing

   CASE;

   // IF PAR.Unused Weight Rate 1 is Greater than zero
   IF PAR.Unused_Weight_Rate_1 > *ZERO;

   // Compute:Std Pct
   PAR.YDL_Yld_Standard_Pct = ( PAR.Weight_Prod_2_USR / PAR.Unused_Weight_Rate_1 'H' ) * 100
   'H';

   ENDIF;

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Skinls Fin Std    RT) TYPE(RTVOBJ) FILE(POCPCPP)           AC1685407;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(LCL.Credit_Item_Inc_Exc_Sts);
  PARAMETER(WRK.Type_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Type_Code);
  PARAMETER(WRK.Group_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Group_Code);
  PARAMETER(WRK.Class_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Class_Code);
  PARAMETER(PAR.YDL_Yld_Standard_Pct);
  PARAMETER(PAR.Start_Weight);
  PARAMETER(LCL.Unused_Weight_Rate_1);
  PARAMETER(LCL.Weight_Prod_2_USR);
  {
   //?USER: Initialize routine

   // LCL.Unused Weight Rate 1 = CON.*ZERO
   LCL.Unused_Weight_Rate_1 = *ZERO;

   // LCL.Weight Prod 2 USR = CON.*ZERO
   LCL.Weight_Prod_2_USR = *ZERO;

   // PAR.YDL Yld Standard Pct = CON.*ZERO
   PAR.YDL_Yld_Standard_Pct = *ZERO;

   //?USER: Process Data record

   // PGM.*Record selected = CND.*YES
   PGM.*Record_selected = 'Y';

   //?SEL:  Credit Items
   CASE;

   // IF PAR.Credit Item Inc/Exc Sts is Entered
   IF PAR.Credit_Item_Inc_Exc_Sts = 'E'/'I';

   CASE;

   // IF PAR.Credit Item Inc/Exc Sts is Include
   IF PAR.Credit_Item_Inc_Exc_Sts = 'I';

   CASE;

   // IF DB1.Credit Item Status is no
   IF DB1.Credit_Item_Status = 'N';

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Credit Item Inc/Exc Sts is Exclude
   IF PAR.Credit_Item_Inc_Exc_Sts = 'E';

   CASE;

   // IF DB1.Credit Item Status is yes
   IF DB1.Credit_Item_Status = 'Y';

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   //?SEL:  Type
   CASE;

   // IF PAR.Item Structure Type Code is Entered
   IF PAR.Item_Structure_Type_Code <> *ZERO;

   CASE;

   // IF PAR.Type Inc/Exc Sts is Include
   IF PAR.Type_Inc_Exc_Sts = 'I';

   CASE;

   // IF PAR.Item Structure Type Code NE DB1.Item Structure Type Code
   IF PAR.Item_Structure_Type_Code <> DB1.Item_Structure_Type_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Type Inc/Exc Sts is Exclude
   IF PAR.Type_Inc_Exc_Sts = 'E';

   CASE;

   // IF PAR.Item Structure Type Code EQ DB1.Item Structure Type Code
   IF PAR.Item_Structure_Type_Code = DB1.Item_Structure_Type_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   //?SEL:  Group
   CASE;

   // IF PAR.Item Structure Group Code is Entered
   IF PAR.Item_Structure_Group_Code <> *ZERO;

   CASE;

   // IF PAR.Group Inc/Exc Sts is Include
   IF PAR.Group_Inc_Exc_Sts = 'I';

   CASE;

   // IF PAR.Item Structure Group Code NE DB1.Item Structure Group Code
   IF PAR.Item_Structure_Group_Code <> DB1.Item_Structure_Group_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Group Inc/Exc Sts is Exclude
   IF PAR.Group_Inc_Exc_Sts = 'E';

   CASE;

   // IF PAR.Item Structure Group Code EQ DB1.Item Structure Group Code
   IF PAR.Item_Structure_Group_Code = DB1.Item_Structure_Group_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   //?SEL:  Class
   CASE;

   // IF PAR.Item Structure Class Code is Entered
   IF PAR.Item_Structure_Class_Code <> *ZERO;

   CASE;

   // IF PAR.Class Inc/Exc Sts is Include
   IF PAR.Class_Inc_Exc_Sts = 'I';

   CASE;

   // IF PAR.Item Structure Class Code NE DB1.Item Structure Class Code
   IF PAR.Item_Structure_Class_Code <> DB1.Item_Structure_Class_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Class Inc/Exc Sts is Exclude
   IF PAR.Class_Inc_Exc_Sts = 'E';

   CASE;

   // IF PAR.Item Structure Class Code EQ DB1.Item Structure Class Code
   IF PAR.Item_Structure_Class_Code = DB1.Item_Structure_Class_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   CASE;

   // IF PGM.*Record selected is *YES
   IF PGM.*Record_selected = 'Y';

   EXECUTE FUNCTION(Rtv Item Sales Yield  RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1685363;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Sales_Yield);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Loin Boning : Calc 80025 Sales Yld from wgt, pieces, and avg zone wgt
   CASE;

   // IF DB1.Item Code is Bone Ls Loin
   IF DB1.Item_Code = 80025;

   EXECUTE FUNCTION(Rtv Bone In Zone Wgt  RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1688369;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Department_Code);
   PARAMETER(DB1.Production_Line_Code);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Production_Shift);
   PARAMETER(LCL.Bone_In_Zone_Avg_Loin_Wgt);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF DB1.Yld Transaction Pieces is NE Zeros
   IF DB1.Yld_Transaction_Pieces <> *ZERO;

   // AND LCL.Bone In Zone Avg Loin Wgt is GT Zero
   AND LCL.Bone_In_Zone_Avg_Loin_Wgt > *ZERO;

   // 80025 Sales Yield
   LCL.Sales_Yield = ( ( DB1.Yld_Transaction_Weight / DB1.Yld_Transaction_Pieces 'H' )
   / LCL.Bone_In_Zone_Avg_Loin_Wgt ) * 100;

   ENDIF;

   ENDIF;

   CASE;

   // IF DB1.Department Code is Belly
   IF DB1.Department_Code = 'BELLY';

   // AND DB1.Production Line Code is Skinless
   AND DB1.Production_Line_Code = 'SKINLS';

   // AND DB1.Item Code is Belly
   AND DB1.Item_Code = 57150;

   //?Adjust belly item 57150 with Heavy Bellies WIP item 2320 deletes
   EXECUTE FUNCTION(Rtv Del Pend f/1 Item RT) TYPE(RTVOBJ) FILE(POCOCPP)           AC1688209;
   PARAMETER(DB1.Company_Number);
   PARAMETER('CUT');
   PARAMETER('BELLY');
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Production_Shift);
   PARAMETER(2320);
   PARAMETER(LCL.Delete_Pending_Wgt);
   {
    //?USER: Process Data record

    // PAR.Delete Pending Wgt = PAR.Delete Pending Wgt + DB1.Delete Pending Wgt
    PAR.Delete_Pending_Wgt = PAR.Delete_Pending_Wgt + DB1.Delete_Pending_Wgt;

   }

   // Compute:total SW
   LCL.Weight_Prod_1_USR = ( ( DB1.Yld_Transaction_Weight - ( LCL.Delete_Pending_Wgt * .77
   'H' ) ) / ( LCL.Sales_Yield / 100 ) + ) + LCL.Delete_Pending_Wgt;

   // Adj Sales Yld for 57150
   LCL.Sales_Yield = ( DB1.Yld_Transaction_Weight / LCL.Weight_Prod_1_USR 'H' ) * 100;

   //?SUM(Standard Start Weight)
   CASE;

   // IF LCL.Sales Yield is not equal to zeros
   IF LCL.Sales_Yield <> *ZERO;

   // Accum Sales Yld for items
   LCL.Unused_Weight_Rate_1 = ( DB1.Yld_Transaction_Weight / ( LCL.Sales_Yield / 100 )
   + 'H' ) + LCL.Unused_Weight_Rate_1;

   ENDIF;

   // LCL.Weight Prod 2 USR = LCL.Weight Prod 2 USR + DB1.Yld Transaction Weight
   LCL.Weight_Prod_2_USR = LCL.Weight_Prod_2_USR + DB1.Yld_Transaction_Weight;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?SUM(Standard Start Weight)
   CASE;

   // IF LCL.Sales Yield is not equal to zeros
   IF LCL.Sales_Yield <> *ZERO;

   // Accum Sales Yld for items
   LCL.Unused_Weight_Rate_1 = ( DB1.Yld_Transaction_Weight / ( LCL.Sales_Yield / 100 )
   + 'H' ) + LCL.Unused_Weight_Rate_1;

   ENDIF;

   // LCL.Weight Prod 2 USR = LCL.Weight Prod 2 USR + DB1.Yld Transaction Weight
   LCL.Weight_Prod_2_USR = LCL.Weight_Prod_2_USR + DB1.Yld_Transaction_Weight;

   ENDIF;

   ENDIF;

   //?USER: Exit processing

   CASE;

   // IF LCL.Unused Weight Rate 1 is Greater than zero
   IF LCL.Unused_Weight_Rate_1 > *ZERO;

   // Compute:Std Pct
   PAR.YDL_Yld_Standard_Pct = ( LCL.Weight_Prod_2_USR / LCL.Unused_Weight_Rate_1 'H' ) * 100
   'H';

   ENDIF;

   // PAR.Unused Weight Rate 1 = PAR.Unused Weight Rate 1 + LCL.Unused Weight Rate 1
   PAR.Unused_Weight_Rate_1 = PAR.Unused_Weight_Rate_1 + LCL.Unused_Weight_Rate_1;

   // PAR.Weight Prod 2 USR = PAR.Weight Prod 2 USR + LCL.Weight Prod 2 USR
   PAR.Weight_Prod_2_USR = PAR.Weight_Prod_2_USR + LCL.Weight_Prod_2_USR;

  }

  ENDIF;

 }

 //?STD %  - std from yld comp std file and spec calcs from bom
 // IF DB1.Department Code is Loin Boning
 IF DB1.Department_Code = 'LOINS';

 // AND DB1.Production Line Code is Boning
 AND DB1.Production_Line_Code = 'BONING';

 // AND DB1.Yld Component Code is Bone In Sirloin
 AND ( DB1.Yld_Component_Code = 'BISIRLOIN';

 // OR DB1.Yld Component Code is Bone Less Sirloin
 OR DB1.Yld_Component_Code = 'BLSSIRLOIN' );

 EXECUTE FUNCTION(Clc Loins Sirloin Std IF) TYPE(EXCINTFUN)                      AC1687877;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(DB1.Yld_Component_Code);
 PARAMETER(PAR.YDL_Yld_Standard_Pct);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Prod Weight 1 compRT) TYPE(RTVOBJ) FILE(POC0CPP)           AC1686467;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(PAR.Yld_Component_Code);
  PARAMETER(LCL.YDL_Yld_Comp_Weight);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   CASE;

   // IF DB1.Yld Component Code is Inedible
   IF DB1.Yld_Component_Code = 'ZINEDIBLE';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Weight Tot Start Need USR = PAR.Weight Tot Start Need USR + DB1.YDL Yld Comp Weight
   PAR.Weight_Tot_Start_Need_USR = PAR.Weight_Tot_Start_Need_USR + DB1.YDL_Yld_Comp_Weight;

   ENDIF;

  }

  CASE;

  // IF PAR.Yld Component Code is Bone In Sirloin
  IF PAR.Yld_Component_Code = 'BISIRLOIN';

  // LCL.Yld Component Code = CND.Bone Less Sirloin
  LCL.Yld_Component_Code = 'BLSSIRLOIN';

  // IF PAR.Yld Component Code is Bone Less Sirloin
  IF PAR.Yld_Component_Code = 'BLSSIRLOIN';

  // LCL.Yld Component Code = CND.Bone In Sirloin
  LCL.Yld_Component_Code = 'BISIRLOIN';

  ENDIF;

  EXECUTE FUNCTION(Rtv Prod Weight 1 compRT) TYPE(RTVOBJ) FILE(POC0CPP)           AC1686467;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(LCL.Yld_Component_Code);
  PARAMETER(LCL.Weight_Prod_2_USR);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   CASE;

   // IF DB1.Yld Component Code is Inedible
   IF DB1.Yld_Component_Code = 'ZINEDIBLE';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Weight Tot Start Need USR = PAR.Weight Tot Start Need USR + DB1.YDL Yld Comp Weight
   PAR.Weight_Tot_Start_Need_USR = PAR.Weight_Tot_Start_Need_USR + DB1.YDL_Yld_Comp_Weight;

   ENDIF;

  }

  CASE;

  // IF PAR.Yld Component Code is Bone In Sirloin
  IF PAR.Yld_Component_Code = 'BISIRLOIN';

  //?Std% =(bi comp wgt*.1714)/((bls sirloin comp wgt/2) + bi sirloin comp wgt)
  //? Perform if weights arent zero
  CASE;

  // IF LCL.Weight Prod 2 USR is Not equal zero
  IF LCL.Weight_Prod_2_USR <> *ZERO;

  // OR LCL.YDL Yld Comp Weight is Not equal zero
  OR LCL.YDL_Yld_Comp_Weight <> *ZERO;

  // Compute:BISIRLOIN STD %
  PAR.YDL_Yld_Standard_Pct = ( ( LCL.YDL_Yld_Comp_Weight * .1714 'H' ) / ( (
  LCL.Weight_Prod_2_USR * 2 'H' ) + LCL.YDL_Yld_Comp_Weight ) * 'H' ) * 100;

  ENDIF;

  // IF PAR.Yld Component Code is Bone Less Sirloin
  IF PAR.Yld_Component_Code = 'BLSSIRLOIN';

  //?Std% =(blsComp wgt*.0857)/((bi Sirloin comp wgt/2) + Bls sirloin comp wgt)
  //? Perform if weights arent zero
  CASE;

  // IF LCL.Weight Prod 2 USR is Not equal zero
  IF LCL.Weight_Prod_2_USR <> *ZERO;

  // OR LCL.YDL Yld Comp Weight is Not equal zero
  OR LCL.YDL_Yld_Comp_Weight <> *ZERO;

  // Compute:BLSSIRLOIN STD %
  PAR.YDL_Yld_Standard_Pct = ( ( LCL.YDL_Yld_Comp_Weight * .0857 'H' ) / ( (
  LCL.Weight_Prod_2_USR / 2 ) + LCL.YDL_Yld_Comp_Weight ) * 'H' ) * 100 'H';

  ENDIF;

  ENDIF;

 }

 //?STD %  - std from yld comp std file and spec calcs from bom
 // IF DB1.Department Code is Loin Boning
 IF DB1.Department_Code = 'LOINS';

 // AND DB1.Production Line Code is Boning
 AND DB1.Production_Line_Code = 'BONING';

 // AND DB1.Yld Component Code is Shoulder Loin
 AND DB1.Yld_Component_Code = 'SHLDRLOIN';

 // PAR.YDL Yld Standard Pct = PAR.YDL Yld Mix Percent
 PAR.YDL_Yld_Standard_Pct = PAR.YDL_Yld_Mix_Percent;

 //?STD %  - std from yld comp std file and spec calcs from bom
 // IF DB1.Department Code is Loin Boning
 IF DB1.Department_Code = 'LOINS';

 // AND DB1.Production Line Code is Boning
 AND DB1.Production_Line_Code = 'BONING';

 // AND DB1.Yld Component Code is Inedible
 AND DB1.Yld_Component_Code = 'ZINEDIBLE';

 //?Std% = sum(std wt prod*Std Ined % in each Itm BOM for 96309) / (Tot SW)
 EXECUTE FUNCTION(Clc Loin Bng Ined Std IF) TYPE(EXCINTFUN)                      AC1688266;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(PAR.YDL_Yld_Standard_Pct);
 PARAMETER(PAR.Total_Line_Weight);
 {
  //?Execute internal function

  //?07/30/09 PKD Added processing for Multiple Structures for a
  //?             Component.
  // LCL.Weight Prod 1 USR = CON.*ZERO
  LCL.Weight_Prod_1_USR = *ZERO;

  // LCL.Weight Prod 2 USR = CON.*ZERO
  LCL.Weight_Prod_2_USR = *ZERO;

  // PAR.Yld Component Code = CND.Boneless Loin-Strap On
  PAR.Yld_Component_Code = 'BNLSSTRON';

  EXECUTE FUNCTION(Rtv Component Info    RT) TYPE(RTVOBJ) FILE(POCZREP)           AC1669682;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Yld_Component_Code);
  PARAMETER(WRK.PLYC_Type);
  PARAMETER(WRK.PLYC_Percent_of_Weight);
  PARAMETER(WRK.PLYC_Comment);
  PARAMETER(WRK.Credit_Item_Inc_Exc_Sts);
  PARAMETER(WRK.Type_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Type_Code);
  PARAMETER(WRK.Group_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Group_Code);
  PARAMETER(WRK.Class_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Class_Code);
  PARAMETER(WRK.YC_Required_Sts);
  PARAMETER(WRK.YC_Component_Group);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.PLYC Type is Retrieve w/Mult Item Str
  IF WRK.PLYC_Type = 'MS';

  EXECUTE FUNCTION(Rtv Loin Bng Ined Std RT) TYPE(RTVOBJ) FILE(PMAQREP)           AC1948991;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Yld_Component_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(WRK.Credit_Item_Inc_Exc_Sts);
  PARAMETER(LCL.Weight_Prod_1_USR);
  PARAMETER(LCL.Weight_Prod_2_USR);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Rtv Loin Bng Ined Std RT) TYPE(RTVOBJ) FILE(POCPCPP)           AC1688269;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Department_Code);
   PARAMETER(DB1.Production_Line_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Production_Shift);
   PARAMETER(PAR.Credit_Item_Inc_Exc_Sts);
   PARAMETER(DB1.Type_Inc_Exc_Sts);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(DB1.Group_Inc_Exc_Sts);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Class_Inc_Exc_Sts);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(PAR.Weight_Prod_1_USR);
   PARAMETER(PAR.Weight_Prod_2_USR);
   {
    //?USER: Process Data record

    // PGM.*Record selected = CND.*YES
    PGM.*Record_selected = 'Y';

    //?SEL:  Credit Items
    CASE;

    // IF PAR.Credit Item Inc/Exc Sts is Entered
    IF PAR.Credit_Item_Inc_Exc_Sts = 'E'/'I';

    CASE;

    // IF PAR.Credit Item Inc/Exc Sts is Include
    IF PAR.Credit_Item_Inc_Exc_Sts = 'I';

    CASE;

    // IF DB1.Credit Item Status is no
    IF DB1.Credit_Item_Status = 'N';

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Credit Item Inc/Exc Sts is Exclude
    IF PAR.Credit_Item_Inc_Exc_Sts = 'E';

    CASE;

    // IF DB1.Credit Item Status is yes
    IF DB1.Credit_Item_Status = 'Y';

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    //?SEL:  Type
    CASE;

    // IF PAR.Item Structure Type Code is Entered
    IF PAR.Item_Structure_Type_Code <> *ZERO;

    CASE;

    // IF PAR.Type Inc/Exc Sts is Include
    IF PAR.Type_Inc_Exc_Sts = 'I';

    CASE;

    // IF PAR.Item Structure Type Code NE DB1.Item Structure Type Code
    IF PAR.Item_Structure_Type_Code <> DB1.Item_Structure_Type_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Type Inc/Exc Sts is Exclude
    IF PAR.Type_Inc_Exc_Sts = 'E';

    CASE;

    // IF PAR.Item Structure Type Code EQ DB1.Item Structure Type Code
    IF PAR.Item_Structure_Type_Code = DB1.Item_Structure_Type_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    //?SEL:  Group
    CASE;

    // IF PAR.Item Structure Group Code is Entered
    IF PAR.Item_Structure_Group_Code <> *ZERO;

    CASE;

    // IF PAR.Group Inc/Exc Sts is Include
    IF PAR.Group_Inc_Exc_Sts = 'I';

    CASE;

    // IF PAR.Item Structure Group Code NE DB1.Item Structure Group Code
    IF PAR.Item_Structure_Group_Code <> DB1.Item_Structure_Group_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Group Inc/Exc Sts is Exclude
    IF PAR.Group_Inc_Exc_Sts = 'E';

    CASE;

    // IF PAR.Item Structure Group Code EQ DB1.Item Structure Group Code
    IF PAR.Item_Structure_Group_Code = DB1.Item_Structure_Group_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    //?SEL:  Class
    CASE;

    // IF PAR.Item Structure Class Code is Entered
    IF PAR.Item_Structure_Class_Code <> *ZERO;

    CASE;

    // IF PAR.Class Inc/Exc Sts is Include
    IF PAR.Class_Inc_Exc_Sts = 'I';

    CASE;

    // IF PAR.Item Structure Class Code NE DB1.Item Structure Class Code
    IF PAR.Item_Structure_Class_Code <> DB1.Item_Structure_Class_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Class Inc/Exc Sts is Exclude
    IF PAR.Class_Inc_Exc_Sts = 'E';

    CASE;

    // IF PAR.Item Structure Class Code EQ DB1.Item Structure Class Code
    IF PAR.Item_Structure_Class_Code = DB1.Item_Structure_Class_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    CASE;

    // IF PGM.*Record selected is *YES
    IF PGM.*Record_selected = 'Y';

    //?Sales Yield
    CASE;

    // IF DB1.Item Code is Bone Ls Loin
    IF DB1.Item_Code = 80025;

    EXECUTE FUNCTION(Rtv Bone In Zone Wgt  RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1688369;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Department_Code);
    PARAMETER(DB1.Production_Line_Code);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Production_Shift);
    PARAMETER(LCL.Bone_In_Zone_Avg_Loin_Wgt);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF DB1.Yld Transaction Pieces is NE Zeros
    IF DB1.Yld_Transaction_Pieces <> *ZERO;

    // AND LCL.Bone In Zone Avg Loin Wgt is GT Zero
    AND LCL.Bone_In_Zone_Avg_Loin_Wgt > *ZERO;

    // 80025 Sales Yield
    LCL.Sales_Yield = ( ( DB1.Yld_Transaction_Weight / DB1.Yld_Transaction_Pieces 'H' )
    / LCL.Bone_In_Zone_Avg_Loin_Wgt ) * 100;

    ENDIF;

    //?Sales Yield
    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(Rtv Item Sales Yield  RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1685363;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Item_Code);
    PARAMETER(LCL.Sales_Yield);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    ENDIF;

    CASE;

    // IF LCL.Sales Yield is not equal to zeros
    IF LCL.Sales_Yield <> *ZERO;

    // Compute:Std wt
    WRK.Unused_Weight_Rate_1 = DB1.Yld_Transaction_Weight / ( LCL.Sales_Yield / 100 ) 'H';

    ENDIF;

    EXECUTE FUNCTION(Rtv Item Sales Yield  RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1685363;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(96309);
    PARAMETER(LCL.Sales_Yield);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF LCL.Sales Yield is not equal to zeros
    IF LCL.Sales_Yield <> *ZERO;

    // Accum Ined Yld for items
    PAR.Weight_Prod_1_USR = ( WRK.Unused_Weight_Rate_1 * ( LCL.Sales_Yield / 100 ) + )
    + PAR.Weight_Prod_1_USR;

    ENDIF;

    ENDIF;

    // PAR.Weight Prod 2 USR = PAR.Weight Prod 2 USR + DB1.Yld Transaction Weight
    PAR.Weight_Prod_2_USR = PAR.Weight_Prod_2_USR + DB1.Yld_Transaction_Weight;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Loin Bng Ined Std RT) TYPE(RTVOBJ) FILE(POCPCPP)           AC1688269;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(WRK.Credit_Item_Inc_Exc_Sts);
  PARAMETER(WRK.Type_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Type_Code);
  PARAMETER(WRK.Group_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Group_Code);
  PARAMETER(WRK.Class_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Class_Code);
  PARAMETER(LCL.Weight_Prod_1_USR);
  PARAMETER(LCL.Weight_Prod_2_USR);
  {
   //?USER: Process Data record

   // PGM.*Record selected = CND.*YES
   PGM.*Record_selected = 'Y';

   //?SEL:  Credit Items
   CASE;

   // IF PAR.Credit Item Inc/Exc Sts is Entered
   IF PAR.Credit_Item_Inc_Exc_Sts = 'E'/'I';

   CASE;

   // IF PAR.Credit Item Inc/Exc Sts is Include
   IF PAR.Credit_Item_Inc_Exc_Sts = 'I';

   CASE;

   // IF DB1.Credit Item Status is no
   IF DB1.Credit_Item_Status = 'N';

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Credit Item Inc/Exc Sts is Exclude
   IF PAR.Credit_Item_Inc_Exc_Sts = 'E';

   CASE;

   // IF DB1.Credit Item Status is yes
   IF DB1.Credit_Item_Status = 'Y';

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   //?SEL:  Type
   CASE;

   // IF PAR.Item Structure Type Code is Entered
   IF PAR.Item_Structure_Type_Code <> *ZERO;

   CASE;

   // IF PAR.Type Inc/Exc Sts is Include
   IF PAR.Type_Inc_Exc_Sts = 'I';

   CASE;

   // IF PAR.Item Structure Type Code NE DB1.Item Structure Type Code
   IF PAR.Item_Structure_Type_Code <> DB1.Item_Structure_Type_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Type Inc/Exc Sts is Exclude
   IF PAR.Type_Inc_Exc_Sts = 'E';

   CASE;

   // IF PAR.Item Structure Type Code EQ DB1.Item Structure Type Code
   IF PAR.Item_Structure_Type_Code = DB1.Item_Structure_Type_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   //?SEL:  Group
   CASE;

   // IF PAR.Item Structure Group Code is Entered
   IF PAR.Item_Structure_Group_Code <> *ZERO;

   CASE;

   // IF PAR.Group Inc/Exc Sts is Include
   IF PAR.Group_Inc_Exc_Sts = 'I';

   CASE;

   // IF PAR.Item Structure Group Code NE DB1.Item Structure Group Code
   IF PAR.Item_Structure_Group_Code <> DB1.Item_Structure_Group_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Group Inc/Exc Sts is Exclude
   IF PAR.Group_Inc_Exc_Sts = 'E';

   CASE;

   // IF PAR.Item Structure Group Code EQ DB1.Item Structure Group Code
   IF PAR.Item_Structure_Group_Code = DB1.Item_Structure_Group_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   //?SEL:  Class
   CASE;

   // IF PAR.Item Structure Class Code is Entered
   IF PAR.Item_Structure_Class_Code <> *ZERO;

   CASE;

   // IF PAR.Class Inc/Exc Sts is Include
   IF PAR.Class_Inc_Exc_Sts = 'I';

   CASE;

   // IF PAR.Item Structure Class Code NE DB1.Item Structure Class Code
   IF PAR.Item_Structure_Class_Code <> DB1.Item_Structure_Class_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Class Inc/Exc Sts is Exclude
   IF PAR.Class_Inc_Exc_Sts = 'E';

   CASE;

   // IF PAR.Item Structure Class Code EQ DB1.Item Structure Class Code
   IF PAR.Item_Structure_Class_Code = DB1.Item_Structure_Class_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   CASE;

   // IF PGM.*Record selected is *YES
   IF PGM.*Record_selected = 'Y';

   //?Sales Yield
   CASE;

   // IF DB1.Item Code is Bone Ls Loin
   IF DB1.Item_Code = 80025;

   EXECUTE FUNCTION(Rtv Bone In Zone Wgt  RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1688369;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Department_Code);
   PARAMETER(DB1.Production_Line_Code);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Production_Shift);
   PARAMETER(LCL.Bone_In_Zone_Avg_Loin_Wgt);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF DB1.Yld Transaction Pieces is NE Zeros
   IF DB1.Yld_Transaction_Pieces <> *ZERO;

   // AND LCL.Bone In Zone Avg Loin Wgt is GT Zero
   AND LCL.Bone_In_Zone_Avg_Loin_Wgt > *ZERO;

   // 80025 Sales Yield
   LCL.Sales_Yield = ( ( DB1.Yld_Transaction_Weight / DB1.Yld_Transaction_Pieces 'H' )
   / LCL.Bone_In_Zone_Avg_Loin_Wgt ) * 100;

   ENDIF;

   //?Sales Yield
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Rtv Item Sales Yield  RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1685363;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Sales_Yield);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

   CASE;

   // IF LCL.Sales Yield is not equal to zeros
   IF LCL.Sales_Yield <> *ZERO;

   // Compute:Std wt
   WRK.Unused_Weight_Rate_1 = DB1.Yld_Transaction_Weight / ( LCL.Sales_Yield / 100 ) 'H';

   ENDIF;

   EXECUTE FUNCTION(Rtv Item Sales Yield  RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1685363;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(96309);
   PARAMETER(LCL.Sales_Yield);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.Sales Yield is not equal to zeros
   IF LCL.Sales_Yield <> *ZERO;

   // Accum Ined Yld for items
   PAR.Weight_Prod_1_USR = ( WRK.Unused_Weight_Rate_1 * ( LCL.Sales_Yield / 100 ) + )
   + PAR.Weight_Prod_1_USR;

   ENDIF;

   ENDIF;

   // PAR.Weight Prod 2 USR = PAR.Weight Prod 2 USR + DB1.Yld Transaction Weight
   PAR.Weight_Prod_2_USR = PAR.Weight_Prod_2_USR + DB1.Yld_Transaction_Weight;

  }

  ENDIF;

  // PAR.Yld Component Code = CND.Boneless Loin-Strap Off
  PAR.Yld_Component_Code = 'BNLSSTROFF';

  EXECUTE FUNCTION(Rtv Component Info    RT) TYPE(RTVOBJ) FILE(POCZREP)           AC1669682;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Yld_Component_Code);
  PARAMETER(WRK.PLYC_Type);
  PARAMETER(WRK.PLYC_Percent_of_Weight);
  PARAMETER(WRK.PLYC_Comment);
  PARAMETER(WRK.Credit_Item_Inc_Exc_Sts);
  PARAMETER(WRK.Type_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Type_Code);
  PARAMETER(WRK.Group_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Group_Code);
  PARAMETER(WRK.Class_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Class_Code);
  PARAMETER(WRK.YC_Required_Sts);
  PARAMETER(WRK.YC_Component_Group);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.PLYC Type is Retrieve w/Mult Item Str
  IF WRK.PLYC_Type = 'MS';

  EXECUTE FUNCTION(Rtv Loin Bng Ined Std RT) TYPE(RTVOBJ) FILE(PMAQREP)           AC1948991;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Yld_Component_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(WRK.Credit_Item_Inc_Exc_Sts);
  PARAMETER(LCL.Weight_Prod_1_USR);
  PARAMETER(LCL.Weight_Prod_2_USR);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Rtv Loin Bng Ined Std RT) TYPE(RTVOBJ) FILE(POCPCPP)           AC1688269;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Department_Code);
   PARAMETER(DB1.Production_Line_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Production_Shift);
   PARAMETER(PAR.Credit_Item_Inc_Exc_Sts);
   PARAMETER(DB1.Type_Inc_Exc_Sts);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(DB1.Group_Inc_Exc_Sts);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Class_Inc_Exc_Sts);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(PAR.Weight_Prod_1_USR);
   PARAMETER(PAR.Weight_Prod_2_USR);
   {
    //?USER: Process Data record

    // PGM.*Record selected = CND.*YES
    PGM.*Record_selected = 'Y';

    //?SEL:  Credit Items
    CASE;

    // IF PAR.Credit Item Inc/Exc Sts is Entered
    IF PAR.Credit_Item_Inc_Exc_Sts = 'E'/'I';

    CASE;

    // IF PAR.Credit Item Inc/Exc Sts is Include
    IF PAR.Credit_Item_Inc_Exc_Sts = 'I';

    CASE;

    // IF DB1.Credit Item Status is no
    IF DB1.Credit_Item_Status = 'N';

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Credit Item Inc/Exc Sts is Exclude
    IF PAR.Credit_Item_Inc_Exc_Sts = 'E';

    CASE;

    // IF DB1.Credit Item Status is yes
    IF DB1.Credit_Item_Status = 'Y';

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    //?SEL:  Type
    CASE;

    // IF PAR.Item Structure Type Code is Entered
    IF PAR.Item_Structure_Type_Code <> *ZERO;

    CASE;

    // IF PAR.Type Inc/Exc Sts is Include
    IF PAR.Type_Inc_Exc_Sts = 'I';

    CASE;

    // IF PAR.Item Structure Type Code NE DB1.Item Structure Type Code
    IF PAR.Item_Structure_Type_Code <> DB1.Item_Structure_Type_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Type Inc/Exc Sts is Exclude
    IF PAR.Type_Inc_Exc_Sts = 'E';

    CASE;

    // IF PAR.Item Structure Type Code EQ DB1.Item Structure Type Code
    IF PAR.Item_Structure_Type_Code = DB1.Item_Structure_Type_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    //?SEL:  Group
    CASE;

    // IF PAR.Item Structure Group Code is Entered
    IF PAR.Item_Structure_Group_Code <> *ZERO;

    CASE;

    // IF PAR.Group Inc/Exc Sts is Include
    IF PAR.Group_Inc_Exc_Sts = 'I';

    CASE;

    // IF PAR.Item Structure Group Code NE DB1.Item Structure Group Code
    IF PAR.Item_Structure_Group_Code <> DB1.Item_Structure_Group_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Group Inc/Exc Sts is Exclude
    IF PAR.Group_Inc_Exc_Sts = 'E';

    CASE;

    // IF PAR.Item Structure Group Code EQ DB1.Item Structure Group Code
    IF PAR.Item_Structure_Group_Code = DB1.Item_Structure_Group_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    //?SEL:  Class
    CASE;

    // IF PAR.Item Structure Class Code is Entered
    IF PAR.Item_Structure_Class_Code <> *ZERO;

    CASE;

    // IF PAR.Class Inc/Exc Sts is Include
    IF PAR.Class_Inc_Exc_Sts = 'I';

    CASE;

    // IF PAR.Item Structure Class Code NE DB1.Item Structure Class Code
    IF PAR.Item_Structure_Class_Code <> DB1.Item_Structure_Class_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Class Inc/Exc Sts is Exclude
    IF PAR.Class_Inc_Exc_Sts = 'E';

    CASE;

    // IF PAR.Item Structure Class Code EQ DB1.Item Structure Class Code
    IF PAR.Item_Structure_Class_Code = DB1.Item_Structure_Class_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    CASE;

    // IF PGM.*Record selected is *YES
    IF PGM.*Record_selected = 'Y';

    //?Sales Yield
    CASE;

    // IF DB1.Item Code is Bone Ls Loin
    IF DB1.Item_Code = 80025;

    EXECUTE FUNCTION(Rtv Bone In Zone Wgt  RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1688369;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Department_Code);
    PARAMETER(DB1.Production_Line_Code);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Production_Shift);
    PARAMETER(LCL.Bone_In_Zone_Avg_Loin_Wgt);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF DB1.Yld Transaction Pieces is NE Zeros
    IF DB1.Yld_Transaction_Pieces <> *ZERO;

    // AND LCL.Bone In Zone Avg Loin Wgt is GT Zero
    AND LCL.Bone_In_Zone_Avg_Loin_Wgt > *ZERO;

    // 80025 Sales Yield
    LCL.Sales_Yield = ( ( DB1.Yld_Transaction_Weight / DB1.Yld_Transaction_Pieces 'H' )
    / LCL.Bone_In_Zone_Avg_Loin_Wgt ) * 100;

    ENDIF;

    //?Sales Yield
    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(Rtv Item Sales Yield  RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1685363;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Item_Code);
    PARAMETER(LCL.Sales_Yield);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    ENDIF;

    CASE;

    // IF LCL.Sales Yield is not equal to zeros
    IF LCL.Sales_Yield <> *ZERO;

    // Compute:Std wt
    WRK.Unused_Weight_Rate_1 = DB1.Yld_Transaction_Weight / ( LCL.Sales_Yield / 100 ) 'H';

    ENDIF;

    EXECUTE FUNCTION(Rtv Item Sales Yield  RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1685363;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(96309);
    PARAMETER(LCL.Sales_Yield);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF LCL.Sales Yield is not equal to zeros
    IF LCL.Sales_Yield <> *ZERO;

    // Accum Ined Yld for items
    PAR.Weight_Prod_1_USR = ( WRK.Unused_Weight_Rate_1 * ( LCL.Sales_Yield / 100 ) + )
    + PAR.Weight_Prod_1_USR;

    ENDIF;

    ENDIF;

    // PAR.Weight Prod 2 USR = PAR.Weight Prod 2 USR + DB1.Yld Transaction Weight
    PAR.Weight_Prod_2_USR = PAR.Weight_Prod_2_USR + DB1.Yld_Transaction_Weight;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Loin Bng Ined Std RT) TYPE(RTVOBJ) FILE(POCPCPP)           AC1688269;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(WRK.Credit_Item_Inc_Exc_Sts);
  PARAMETER(WRK.Type_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Type_Code);
  PARAMETER(WRK.Group_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Group_Code);
  PARAMETER(WRK.Class_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Class_Code);
  PARAMETER(LCL.Weight_Prod_1_USR);
  PARAMETER(LCL.Weight_Prod_2_USR);
  {
   //?USER: Process Data record

   // PGM.*Record selected = CND.*YES
   PGM.*Record_selected = 'Y';

   //?SEL:  Credit Items
   CASE;

   // IF PAR.Credit Item Inc/Exc Sts is Entered
   IF PAR.Credit_Item_Inc_Exc_Sts = 'E'/'I';

   CASE;

   // IF PAR.Credit Item Inc/Exc Sts is Include
   IF PAR.Credit_Item_Inc_Exc_Sts = 'I';

   CASE;

   // IF DB1.Credit Item Status is no
   IF DB1.Credit_Item_Status = 'N';

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Credit Item Inc/Exc Sts is Exclude
   IF PAR.Credit_Item_Inc_Exc_Sts = 'E';

   CASE;

   // IF DB1.Credit Item Status is yes
   IF DB1.Credit_Item_Status = 'Y';

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   //?SEL:  Type
   CASE;

   // IF PAR.Item Structure Type Code is Entered
   IF PAR.Item_Structure_Type_Code <> *ZERO;

   CASE;

   // IF PAR.Type Inc/Exc Sts is Include
   IF PAR.Type_Inc_Exc_Sts = 'I';

   CASE;

   // IF PAR.Item Structure Type Code NE DB1.Item Structure Type Code
   IF PAR.Item_Structure_Type_Code <> DB1.Item_Structure_Type_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Type Inc/Exc Sts is Exclude
   IF PAR.Type_Inc_Exc_Sts = 'E';

   CASE;

   // IF PAR.Item Structure Type Code EQ DB1.Item Structure Type Code
   IF PAR.Item_Structure_Type_Code = DB1.Item_Structure_Type_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   //?SEL:  Group
   CASE;

   // IF PAR.Item Structure Group Code is Entered
   IF PAR.Item_Structure_Group_Code <> *ZERO;

   CASE;

   // IF PAR.Group Inc/Exc Sts is Include
   IF PAR.Group_Inc_Exc_Sts = 'I';

   CASE;

   // IF PAR.Item Structure Group Code NE DB1.Item Structure Group Code
   IF PAR.Item_Structure_Group_Code <> DB1.Item_Structure_Group_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Group Inc/Exc Sts is Exclude
   IF PAR.Group_Inc_Exc_Sts = 'E';

   CASE;

   // IF PAR.Item Structure Group Code EQ DB1.Item Structure Group Code
   IF PAR.Item_Structure_Group_Code = DB1.Item_Structure_Group_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   //?SEL:  Class
   CASE;

   // IF PAR.Item Structure Class Code is Entered
   IF PAR.Item_Structure_Class_Code <> *ZERO;

   CASE;

   // IF PAR.Class Inc/Exc Sts is Include
   IF PAR.Class_Inc_Exc_Sts = 'I';

   CASE;

   // IF PAR.Item Structure Class Code NE DB1.Item Structure Class Code
   IF PAR.Item_Structure_Class_Code <> DB1.Item_Structure_Class_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Class Inc/Exc Sts is Exclude
   IF PAR.Class_Inc_Exc_Sts = 'E';

   CASE;

   // IF PAR.Item Structure Class Code EQ DB1.Item Structure Class Code
   IF PAR.Item_Structure_Class_Code = DB1.Item_Structure_Class_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   CASE;

   // IF PGM.*Record selected is *YES
   IF PGM.*Record_selected = 'Y';

   //?Sales Yield
   CASE;

   // IF DB1.Item Code is Bone Ls Loin
   IF DB1.Item_Code = 80025;

   EXECUTE FUNCTION(Rtv Bone In Zone Wgt  RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1688369;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Department_Code);
   PARAMETER(DB1.Production_Line_Code);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Production_Shift);
   PARAMETER(LCL.Bone_In_Zone_Avg_Loin_Wgt);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF DB1.Yld Transaction Pieces is NE Zeros
   IF DB1.Yld_Transaction_Pieces <> *ZERO;

   // AND LCL.Bone In Zone Avg Loin Wgt is GT Zero
   AND LCL.Bone_In_Zone_Avg_Loin_Wgt > *ZERO;

   // 80025 Sales Yield
   LCL.Sales_Yield = ( ( DB1.Yld_Transaction_Weight / DB1.Yld_Transaction_Pieces 'H' )
   / LCL.Bone_In_Zone_Avg_Loin_Wgt ) * 100;

   ENDIF;

   //?Sales Yield
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Rtv Item Sales Yield  RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1685363;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Sales_Yield);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

   CASE;

   // IF LCL.Sales Yield is not equal to zeros
   IF LCL.Sales_Yield <> *ZERO;

   // Compute:Std wt
   WRK.Unused_Weight_Rate_1 = DB1.Yld_Transaction_Weight / ( LCL.Sales_Yield / 100 ) 'H';

   ENDIF;

   EXECUTE FUNCTION(Rtv Item Sales Yield  RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1685363;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(96309);
   PARAMETER(LCL.Sales_Yield);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.Sales Yield is not equal to zeros
   IF LCL.Sales_Yield <> *ZERO;

   // Accum Ined Yld for items
   PAR.Weight_Prod_1_USR = ( WRK.Unused_Weight_Rate_1 * ( LCL.Sales_Yield / 100 ) + )
   + PAR.Weight_Prod_1_USR;

   ENDIF;

   ENDIF;

   // PAR.Weight Prod 2 USR = PAR.Weight Prod 2 USR + DB1.Yld Transaction Weight
   PAR.Weight_Prod_2_USR = PAR.Weight_Prod_2_USR + DB1.Yld_Transaction_Weight;

  }

  ENDIF;

  // Compute: Ined Yld Std Pct
  PAR.YDL_Yld_Standard_Pct = ( LCL.Weight_Prod_1_USR / PAR.Total_Line_Weight 'H' ) * 100
  'H';

 }

 //?STD %  - std from yld comp std file and spec calcs from bom
 // IF DB1.Department Code is Belly
 IF ( DB1.Department_Code = 'BELLY';

 // AND DB1.Production Line Code is Sheet Belly
 AND DB1.Production_Line_Code = 'SHTBEL';

 // AND DB1.Yld Component Code is Finished
 AND DB1.Yld_Component_Code = 'FINISHED' );

 // OR DB1.Department Code is Belly
 OR ( DB1.Department_Code = 'BELLY';

 // AND DB1.Production Line Code is Single Rib
 AND DB1.Production_Line_Code = 'SGLRIB';

 // AND DB1.Yld Component Code is Finished
 AND DB1.Yld_Component_Code = 'FINISHED' );

 EXECUTE FUNCTION(Clc Skinls Finish Std IF) TYPE(EXCINTFUN)                      AC1685406;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER('FINISHED');
 PARAMETER(PAR.YDL_Yld_Standard_Pct);
 PARAMETER(PAR.Total_Line_Weight);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Component Info    RT) TYPE(RTVOBJ) FILE(POCZREP)           AC1669682;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Yld_Component_Code);
  PARAMETER(LCL.PLYC_Type);
  PARAMETER(WRK.PLYC_Percent_of_Weight);
  PARAMETER(WRK.PLYC_Comment);
  PARAMETER(LCL.Credit_Item_Inc_Exc_Sts);
  PARAMETER(WRK.Type_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Type_Code);
  PARAMETER(WRK.Group_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Group_Code);
  PARAMETER(WRK.Class_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Class_Code);
  PARAMETER(WRK.YC_Required_Sts);
  PARAMETER(WRK.YC_Component_Group);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.PLYC Type is Retrieve w/Mult Item Str
  IF LCL.PLYC_Type = 'MS';

  EXECUTE FUNCTION(Rtv Skinls Fin Std    RT) TYPE(RTVOBJ) FILE(PMAQREP)           AC1857634;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Yld_Component_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(LCL.Credit_Item_Inc_Exc_Sts);
  PARAMETER(PAR.Start_Weight);
  PARAMETER(PAR.YDL_Yld_Standard_Pct);
  PARAMETER(LCL.Unused_Weight_Rate_1);
  PARAMETER(LCL.Weight_Prod_2_USR);
  {
   //?USER: Initialize routine

   // PAR.Unused Weight Rate 1 = CON.*ZERO
   PAR.Unused_Weight_Rate_1 = *ZERO;

   // PAR.Weight Prod 2 USR = CON.*ZERO
   PAR.Weight_Prod_2_USR = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(Rtv Skinls Fin Std    RT) TYPE(RTVOBJ) FILE(POCPCPP)           AC1685407;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Department_Code);
   PARAMETER(DB1.Production_Line_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Production_Shift);
   PARAMETER(PAR.Credit_Item_Inc_Exc_Sts);
   PARAMETER(DB1.Type_Inc_Exc_Sts);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(DB1.Group_Inc_Exc_Sts);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Class_Inc_Exc_Sts);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(PAR.YDL_Yld_Standard_Pct);
   PARAMETER(PAR.Start_Weight);
   PARAMETER(PAR.Unused_Weight_Rate_1);
   PARAMETER(PAR.Weight_Prod_2_USR);
   {
    //?USER: Initialize routine

    // LCL.Unused Weight Rate 1 = CON.*ZERO
    LCL.Unused_Weight_Rate_1 = *ZERO;

    // LCL.Weight Prod 2 USR = CON.*ZERO
    LCL.Weight_Prod_2_USR = *ZERO;

    // PAR.YDL Yld Standard Pct = CON.*ZERO
    PAR.YDL_Yld_Standard_Pct = *ZERO;

    //?USER: Process Data record

    // PGM.*Record selected = CND.*YES
    PGM.*Record_selected = 'Y';

    //?SEL:  Credit Items
    CASE;

    // IF PAR.Credit Item Inc/Exc Sts is Entered
    IF PAR.Credit_Item_Inc_Exc_Sts = 'E'/'I';

    CASE;

    // IF PAR.Credit Item Inc/Exc Sts is Include
    IF PAR.Credit_Item_Inc_Exc_Sts = 'I';

    CASE;

    // IF DB1.Credit Item Status is no
    IF DB1.Credit_Item_Status = 'N';

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Credit Item Inc/Exc Sts is Exclude
    IF PAR.Credit_Item_Inc_Exc_Sts = 'E';

    CASE;

    // IF DB1.Credit Item Status is yes
    IF DB1.Credit_Item_Status = 'Y';

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    //?SEL:  Type
    CASE;

    // IF PAR.Item Structure Type Code is Entered
    IF PAR.Item_Structure_Type_Code <> *ZERO;

    CASE;

    // IF PAR.Type Inc/Exc Sts is Include
    IF PAR.Type_Inc_Exc_Sts = 'I';

    CASE;

    // IF PAR.Item Structure Type Code NE DB1.Item Structure Type Code
    IF PAR.Item_Structure_Type_Code <> DB1.Item_Structure_Type_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Type Inc/Exc Sts is Exclude
    IF PAR.Type_Inc_Exc_Sts = 'E';

    CASE;

    // IF PAR.Item Structure Type Code EQ DB1.Item Structure Type Code
    IF PAR.Item_Structure_Type_Code = DB1.Item_Structure_Type_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    //?SEL:  Group
    CASE;

    // IF PAR.Item Structure Group Code is Entered
    IF PAR.Item_Structure_Group_Code <> *ZERO;

    CASE;

    // IF PAR.Group Inc/Exc Sts is Include
    IF PAR.Group_Inc_Exc_Sts = 'I';

    CASE;

    // IF PAR.Item Structure Group Code NE DB1.Item Structure Group Code
    IF PAR.Item_Structure_Group_Code <> DB1.Item_Structure_Group_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Group Inc/Exc Sts is Exclude
    IF PAR.Group_Inc_Exc_Sts = 'E';

    CASE;

    // IF PAR.Item Structure Group Code EQ DB1.Item Structure Group Code
    IF PAR.Item_Structure_Group_Code = DB1.Item_Structure_Group_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    //?SEL:  Class
    CASE;

    // IF PAR.Item Structure Class Code is Entered
    IF PAR.Item_Structure_Class_Code <> *ZERO;

    CASE;

    // IF PAR.Class Inc/Exc Sts is Include
    IF PAR.Class_Inc_Exc_Sts = 'I';

    CASE;

    // IF PAR.Item Structure Class Code NE DB1.Item Structure Class Code
    IF PAR.Item_Structure_Class_Code <> DB1.Item_Structure_Class_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Class Inc/Exc Sts is Exclude
    IF PAR.Class_Inc_Exc_Sts = 'E';

    CASE;

    // IF PAR.Item Structure Class Code EQ DB1.Item Structure Class Code
    IF PAR.Item_Structure_Class_Code = DB1.Item_Structure_Class_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    CASE;

    // IF PGM.*Record selected is *YES
    IF PGM.*Record_selected = 'Y';

    EXECUTE FUNCTION(Rtv Item Sales Yield  RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1685363;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Item_Code);
    PARAMETER(LCL.Sales_Yield);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?Loin Boning : Calc 80025 Sales Yld from wgt, pieces, and avg zone wgt
    CASE;

    // IF DB1.Item Code is Bone Ls Loin
    IF DB1.Item_Code = 80025;

    EXECUTE FUNCTION(Rtv Bone In Zone Wgt  RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1688369;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Department_Code);
    PARAMETER(DB1.Production_Line_Code);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Production_Shift);
    PARAMETER(LCL.Bone_In_Zone_Avg_Loin_Wgt);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF DB1.Yld Transaction Pieces is NE Zeros
    IF DB1.Yld_Transaction_Pieces <> *ZERO;

    // AND LCL.Bone In Zone Avg Loin Wgt is GT Zero
    AND LCL.Bone_In_Zone_Avg_Loin_Wgt > *ZERO;

    // 80025 Sales Yield
    LCL.Sales_Yield = ( ( DB1.Yld_Transaction_Weight / DB1.Yld_Transaction_Pieces 'H' )
    / LCL.Bone_In_Zone_Avg_Loin_Wgt ) * 100;

    ENDIF;

    ENDIF;

    CASE;

    // IF DB1.Department Code is Belly
    IF DB1.Department_Code = 'BELLY';

    // AND DB1.Production Line Code is Skinless
    AND DB1.Production_Line_Code = 'SKINLS';

    // AND DB1.Item Code is Belly
    AND DB1.Item_Code = 57150;

    //?Adjust belly item 57150 with Heavy Bellies WIP item 2320 deletes
    EXECUTE FUNCTION(Rtv Del Pend f/1 Item RT) TYPE(RTVOBJ) FILE(POCOCPP)           AC1688209;
    PARAMETER(DB1.Company_Number);
    PARAMETER('CUT');
    PARAMETER('BELLY');
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Production_Shift);
    PARAMETER(2320);
    PARAMETER(LCL.Delete_Pending_Wgt);
    {
     //?USER: Process Data record

     // PAR.Delete Pending Wgt = PAR.Delete Pending Wgt + DB1.Delete Pending Wgt
     PAR.Delete_Pending_Wgt = PAR.Delete_Pending_Wgt + DB1.Delete_Pending_Wgt;

    }

    // Compute:total SW
    LCL.Weight_Prod_1_USR = ( ( DB1.Yld_Transaction_Weight - ( LCL.Delete_Pending_Wgt * .77
    'H' ) ) / ( LCL.Sales_Yield / 100 ) + ) + LCL.Delete_Pending_Wgt;

    // Adj Sales Yld for 57150
    LCL.Sales_Yield = ( DB1.Yld_Transaction_Weight / LCL.Weight_Prod_1_USR 'H' ) * 100;

    //?SUM(Standard Start Weight)
    CASE;

    // IF LCL.Sales Yield is not equal to zeros
    IF LCL.Sales_Yield <> *ZERO;

    // Accum Sales Yld for items
    LCL.Unused_Weight_Rate_1 = ( DB1.Yld_Transaction_Weight / ( LCL.Sales_Yield / 100 )
    + 'H' ) + LCL.Unused_Weight_Rate_1;

    ENDIF;

    // LCL.Weight Prod 2 USR = LCL.Weight Prod 2 USR + DB1.Yld Transaction Weight
    LCL.Weight_Prod_2_USR = LCL.Weight_Prod_2_USR + DB1.Yld_Transaction_Weight;

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?SUM(Standard Start Weight)
    CASE;

    // IF LCL.Sales Yield is not equal to zeros
    IF LCL.Sales_Yield <> *ZERO;

    // Accum Sales Yld for items
    LCL.Unused_Weight_Rate_1 = ( DB1.Yld_Transaction_Weight / ( LCL.Sales_Yield / 100 )
    + 'H' ) + LCL.Unused_Weight_Rate_1;

    ENDIF;

    // LCL.Weight Prod 2 USR = LCL.Weight Prod 2 USR + DB1.Yld Transaction Weight
    LCL.Weight_Prod_2_USR = LCL.Weight_Prod_2_USR + DB1.Yld_Transaction_Weight;

    ENDIF;

    ENDIF;

    //?USER: Exit processing

    CASE;

    // IF LCL.Unused Weight Rate 1 is Greater than zero
    IF LCL.Unused_Weight_Rate_1 > *ZERO;

    // Compute:Std Pct
    PAR.YDL_Yld_Standard_Pct = ( LCL.Weight_Prod_2_USR / LCL.Unused_Weight_Rate_1 'H' ) * 100
    'H';

    ENDIF;

    // PAR.Unused Weight Rate 1 = PAR.Unused Weight Rate 1 + LCL.Unused Weight Rate 1
    PAR.Unused_Weight_Rate_1 = PAR.Unused_Weight_Rate_1 + LCL.Unused_Weight_Rate_1;

    // PAR.Weight Prod 2 USR = PAR.Weight Prod 2 USR + LCL.Weight Prod 2 USR
    PAR.Weight_Prod_2_USR = PAR.Weight_Prod_2_USR + LCL.Weight_Prod_2_USR;

   }

   //?USER: Exit processing

   CASE;

   // IF PAR.Unused Weight Rate 1 is Greater than zero
   IF PAR.Unused_Weight_Rate_1 > *ZERO;

   // Compute:Std Pct
   PAR.YDL_Yld_Standard_Pct = ( PAR.Weight_Prod_2_USR / PAR.Unused_Weight_Rate_1 'H' ) * 100
   'H';

   ENDIF;

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Skinls Fin Std    RT) TYPE(RTVOBJ) FILE(POCPCPP)           AC1685407;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(LCL.Credit_Item_Inc_Exc_Sts);
  PARAMETER(WRK.Type_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Type_Code);
  PARAMETER(WRK.Group_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Group_Code);
  PARAMETER(WRK.Class_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Class_Code);
  PARAMETER(PAR.YDL_Yld_Standard_Pct);
  PARAMETER(PAR.Start_Weight);
  PARAMETER(LCL.Unused_Weight_Rate_1);
  PARAMETER(LCL.Weight_Prod_2_USR);
  {
   //?USER: Initialize routine

   // LCL.Unused Weight Rate 1 = CON.*ZERO
   LCL.Unused_Weight_Rate_1 = *ZERO;

   // LCL.Weight Prod 2 USR = CON.*ZERO
   LCL.Weight_Prod_2_USR = *ZERO;

   // PAR.YDL Yld Standard Pct = CON.*ZERO
   PAR.YDL_Yld_Standard_Pct = *ZERO;

   //?USER: Process Data record

   // PGM.*Record selected = CND.*YES
   PGM.*Record_selected = 'Y';

   //?SEL:  Credit Items
   CASE;

   // IF PAR.Credit Item Inc/Exc Sts is Entered
   IF PAR.Credit_Item_Inc_Exc_Sts = 'E'/'I';

   CASE;

   // IF PAR.Credit Item Inc/Exc Sts is Include
   IF PAR.Credit_Item_Inc_Exc_Sts = 'I';

   CASE;

   // IF DB1.Credit Item Status is no
   IF DB1.Credit_Item_Status = 'N';

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Credit Item Inc/Exc Sts is Exclude
   IF PAR.Credit_Item_Inc_Exc_Sts = 'E';

   CASE;

   // IF DB1.Credit Item Status is yes
   IF DB1.Credit_Item_Status = 'Y';

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   //?SEL:  Type
   CASE;

   // IF PAR.Item Structure Type Code is Entered
   IF PAR.Item_Structure_Type_Code <> *ZERO;

   CASE;

   // IF PAR.Type Inc/Exc Sts is Include
   IF PAR.Type_Inc_Exc_Sts = 'I';

   CASE;

   // IF PAR.Item Structure Type Code NE DB1.Item Structure Type Code
   IF PAR.Item_Structure_Type_Code <> DB1.Item_Structure_Type_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Type Inc/Exc Sts is Exclude
   IF PAR.Type_Inc_Exc_Sts = 'E';

   CASE;

   // IF PAR.Item Structure Type Code EQ DB1.Item Structure Type Code
   IF PAR.Item_Structure_Type_Code = DB1.Item_Structure_Type_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   //?SEL:  Group
   CASE;

   // IF PAR.Item Structure Group Code is Entered
   IF PAR.Item_Structure_Group_Code <> *ZERO;

   CASE;

   // IF PAR.Group Inc/Exc Sts is Include
   IF PAR.Group_Inc_Exc_Sts = 'I';

   CASE;

   // IF PAR.Item Structure Group Code NE DB1.Item Structure Group Code
   IF PAR.Item_Structure_Group_Code <> DB1.Item_Structure_Group_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Group Inc/Exc Sts is Exclude
   IF PAR.Group_Inc_Exc_Sts = 'E';

   CASE;

   // IF PAR.Item Structure Group Code EQ DB1.Item Structure Group Code
   IF PAR.Item_Structure_Group_Code = DB1.Item_Structure_Group_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   //?SEL:  Class
   CASE;

   // IF PAR.Item Structure Class Code is Entered
   IF PAR.Item_Structure_Class_Code <> *ZERO;

   CASE;

   // IF PAR.Class Inc/Exc Sts is Include
   IF PAR.Class_Inc_Exc_Sts = 'I';

   CASE;

   // IF PAR.Item Structure Class Code NE DB1.Item Structure Class Code
   IF PAR.Item_Structure_Class_Code <> DB1.Item_Structure_Class_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Class Inc/Exc Sts is Exclude
   IF PAR.Class_Inc_Exc_Sts = 'E';

   CASE;

   // IF PAR.Item Structure Class Code EQ DB1.Item Structure Class Code
   IF PAR.Item_Structure_Class_Code = DB1.Item_Structure_Class_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   CASE;

   // IF PGM.*Record selected is *YES
   IF PGM.*Record_selected = 'Y';

   EXECUTE FUNCTION(Rtv Item Sales Yield  RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1685363;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Sales_Yield);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Loin Boning : Calc 80025 Sales Yld from wgt, pieces, and avg zone wgt
   CASE;

   // IF DB1.Item Code is Bone Ls Loin
   IF DB1.Item_Code = 80025;

   EXECUTE FUNCTION(Rtv Bone In Zone Wgt  RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1688369;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Department_Code);
   PARAMETER(DB1.Production_Line_Code);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Production_Shift);
   PARAMETER(LCL.Bone_In_Zone_Avg_Loin_Wgt);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF DB1.Yld Transaction Pieces is NE Zeros
   IF DB1.Yld_Transaction_Pieces <> *ZERO;

   // AND LCL.Bone In Zone Avg Loin Wgt is GT Zero
   AND LCL.Bone_In_Zone_Avg_Loin_Wgt > *ZERO;

   // 80025 Sales Yield
   LCL.Sales_Yield = ( ( DB1.Yld_Transaction_Weight / DB1.Yld_Transaction_Pieces 'H' )
   / LCL.Bone_In_Zone_Avg_Loin_Wgt ) * 100;

   ENDIF;

   ENDIF;

   CASE;

   // IF DB1.Department Code is Belly
   IF DB1.Department_Code = 'BELLY';

   // AND DB1.Production Line Code is Skinless
   AND DB1.Production_Line_Code = 'SKINLS';

   // AND DB1.Item Code is Belly
   AND DB1.Item_Code = 57150;

   //?Adjust belly item 57150 with Heavy Bellies WIP item 2320 deletes
   EXECUTE FUNCTION(Rtv Del Pend f/1 Item RT) TYPE(RTVOBJ) FILE(POCOCPP)           AC1688209;
   PARAMETER(DB1.Company_Number);
   PARAMETER('CUT');
   PARAMETER('BELLY');
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Production_Shift);
   PARAMETER(2320);
   PARAMETER(LCL.Delete_Pending_Wgt);
   {
    //?USER: Process Data record

    // PAR.Delete Pending Wgt = PAR.Delete Pending Wgt + DB1.Delete Pending Wgt
    PAR.Delete_Pending_Wgt = PAR.Delete_Pending_Wgt + DB1.Delete_Pending_Wgt;

   }

   // Compute:total SW
   LCL.Weight_Prod_1_USR = ( ( DB1.Yld_Transaction_Weight - ( LCL.Delete_Pending_Wgt * .77
   'H' ) ) / ( LCL.Sales_Yield / 100 ) + ) + LCL.Delete_Pending_Wgt;

   // Adj Sales Yld for 57150
   LCL.Sales_Yield = ( DB1.Yld_Transaction_Weight / LCL.Weight_Prod_1_USR 'H' ) * 100;

   //?SUM(Standard Start Weight)
   CASE;

   // IF LCL.Sales Yield is not equal to zeros
   IF LCL.Sales_Yield <> *ZERO;

   // Accum Sales Yld for items
   LCL.Unused_Weight_Rate_1 = ( DB1.Yld_Transaction_Weight / ( LCL.Sales_Yield / 100 )
   + 'H' ) + LCL.Unused_Weight_Rate_1;

   ENDIF;

   // LCL.Weight Prod 2 USR = LCL.Weight Prod 2 USR + DB1.Yld Transaction Weight
   LCL.Weight_Prod_2_USR = LCL.Weight_Prod_2_USR + DB1.Yld_Transaction_Weight;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?SUM(Standard Start Weight)
   CASE;

   // IF LCL.Sales Yield is not equal to zeros
   IF LCL.Sales_Yield <> *ZERO;

   // Accum Sales Yld for items
   LCL.Unused_Weight_Rate_1 = ( DB1.Yld_Transaction_Weight / ( LCL.Sales_Yield / 100 )
   + 'H' ) + LCL.Unused_Weight_Rate_1;

   ENDIF;

   // LCL.Weight Prod 2 USR = LCL.Weight Prod 2 USR + DB1.Yld Transaction Weight
   LCL.Weight_Prod_2_USR = LCL.Weight_Prod_2_USR + DB1.Yld_Transaction_Weight;

   ENDIF;

   ENDIF;

   //?USER: Exit processing

   CASE;

   // IF LCL.Unused Weight Rate 1 is Greater than zero
   IF LCL.Unused_Weight_Rate_1 > *ZERO;

   // Compute:Std Pct
   PAR.YDL_Yld_Standard_Pct = ( LCL.Weight_Prod_2_USR / LCL.Unused_Weight_Rate_1 'H' ) * 100
   'H';

   ENDIF;

   // PAR.Unused Weight Rate 1 = PAR.Unused Weight Rate 1 + LCL.Unused Weight Rate 1
   PAR.Unused_Weight_Rate_1 = PAR.Unused_Weight_Rate_1 + LCL.Unused_Weight_Rate_1;

   // PAR.Weight Prod 2 USR = PAR.Weight Prod 2 USR + LCL.Weight Prod 2 USR
   PAR.Weight_Prod_2_USR = PAR.Weight_Prod_2_USR + LCL.Weight_Prod_2_USR;

  }

  ENDIF;

 }

 //?STD %  - std from yld comp std file and spec calcs from bom
 //?STD %  - std from yld comp std file and spec calcs from bom
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Component Std     RT) TYPE(RTVOBJ) FILE(PPAGCPP)           AC1684708;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Yld_Component_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(PAR.YDL_Yld_Standard_Pct);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 ENDIF;

 //?Actual - Std Weight Diff
 CASE;

 // IF PAR.YDL Yld Standard Pct is Greater than zero
 IF PAR.YDL_Yld_Standard_Pct > *ZERO;

 // Compute: yld weight diff
 PAR.YDL_Yld_Weight_Diff = ( ( PAR.YDL_Yld_Mix_Percent / 100 ) * PAR.Total_Line_Weight
 'H' ) - ( ( PAR.YDL_Yld_Standard_Pct / 100 ) * PAR.Total_Line_Weight 'H' );

 //?Actual - Std Weight Diff
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.YDL Yld Weight Diff = CON.*ZERO
 PAR.YDL_Yld_Weight_Diff = *ZERO;

 ENDIF;

 EXECUTE FUNCTION(Chg Mix Percent       CH) TYPE(CHGOBJ) FILE(POC0CPP)           AC1670639;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(DB1.Yld_Component_Code);
 PARAMETER(PAR.YDL_Yld_Mix_Percent);
 PARAMETER(PAR.YDL_Yld_Standard_Pct);
 PARAMETER(PAR.YDL_Yld_Weight_Diff);
 PARAMETER(DB1.YDL_Component_Group);
 PARAMETER(DB1.YDL_Unused_Sts_1);
 PARAMETER(DB1.YDL_Unused_Sts_2);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?Save TRIM for later
 CASE;

 // IF DB1.Department Code is Belly
 IF ( DB1.Department_Code = 'BELLY';

 // AND DB1.Production Line Code is Skinless
 AND DB1.Production_Line_Code = 'SKINLS';

 // AND DB1.Yld Component Code is Trim Yield
 AND DB1.Yld_Component_Code = 'TRIMYIELD' );

 // OR DB1.Department Code is Loin Boning
 OR ( DB1.Department_Code = 'LOINS';

 // AND DB1.Production Line Code is Boning
 AND DB1.Production_Line_Code = 'BONING';

 // AND DB1.Yld Component Code is Pork Loin Trimmings
 AND DB1.Yld_Component_Code = 'PLOINTRIM' );

 // LCL.YDL Yld Mix Percent 1 = PAR.YDL Yld Mix Percent
 LCL.YDL_Yld_Mix_Percent_1 = PAR.YDL_Yld_Mix_Percent;

 ENDIF;

 //?USER: Exit processing

 CASE;

 // IF PAR.Department Code is Belly
 IF ( PAR.Department_Code = 'BELLY';

 // AND PAR.Production Line Code is Skinless
 AND PAR.Production_Line_Code = 'SKINLS' );

 // OR PAR.Department Code is Loin Boning
 OR ( PAR.Department_Code = 'LOINS';

 // AND PAR.Production Line Code is Boning
 AND PAR.Production_Line_Code = 'BONING' );

 CASE;

 // IF PAR.Department Code is Belly
 IF PAR.Department_Code = 'BELLY';

 // LCL.Yld Component Code = CND.Trim Yield
 LCL.Yld_Component_Code = 'TRIMYIELD';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Yld Component Code = CND.Pork Loin Trimmings
 LCL.Yld_Component_Code = 'PLOINTRIM';

 ENDIF;

 //?std% = 1 - sum(other comp. std%)
 EXECUTE FUNCTION(Rtv Std %, OMT Trim   RT) TYPE(RTVOBJ) FILE(POC0CPP)           AC1685377;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Production_Line_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Production_Shift);
 PARAMETER(LCL.Yld_Component_Code);
 PARAMETER(LCL.Percent_7_4_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Yld Component Code EQ PAR.Yld Component Code
  IF DB1.Yld_Component_Code = PAR.Yld_Component_Code;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF DB1.Department Code is Loin Boning
  IF DB1.Department_Code = 'LOINS';

  //?SAVE BONLESS LOIN STRAP OFF AMOUNTS    & combine with strap on
  CASE;

  // IF DB1.Yld Component Code is Boneless Loin-Strap Off
  IF DB1.Yld_Component_Code = 'BNLSSTROFF';

  // LCL.YDL Yld Comp Weight = DB1.YDL Yld Comp Weight
  LCL.YDL_Yld_Comp_Weight = DB1.YDL_Yld_Comp_Weight;

  // LCL.YDL Yld Standard Pct = DB1.YDL Yld Standard Pct
  LCL.YDL_Yld_Standard_Pct = DB1.YDL_Yld_Standard_Pct;

  //?SAVE BONLESS LOIN STRAP OFF AMOUNTS    & combine with strap on
  // IF DB1.Yld Component Code is Boneless Loin-Strap On
  IF DB1.Yld_Component_Code = 'BNLSSTRON';

  // WRK.YDL Yld Comp Weight = LCL.YDL Yld Comp Weight + DB1.YDL Yld Comp Weight
  WRK.YDL_Yld_Comp_Weight = LCL.YDL_Yld_Comp_Weight + DB1.YDL_Yld_Comp_Weight;

  // LCL.Weight Rate 1 = LCL.YDL Yld Comp Weight * LCL.YDL Yld Standard Pct *
  LCL.Unused_Weight_Rate_1 = LCL.YDL_Yld_Comp_Weight * LCL.YDL_Yld_Standard_Pct;

  // LCL.Weight Rate 2 = DB1.YDL Yld Comp Weight * DB1.YDL Yld Standard Pct *
  LCL.Unused_Weight_Rate_2 = DB1.YDL_Yld_Comp_Weight * DB1.YDL_Yld_Standard_Pct;

  // LCL.Weight Rate 1 = LCL.Weight Rate 1 + LCL.Weight Rate 2
  LCL.Unused_Weight_Rate_1 = LCL.Unused_Weight_Rate_1 + LCL.Unused_Weight_Rate_2;

  CASE;

  // IF WRK.YDL Yld Comp Weight is Not equal zero
  IF WRK.YDL_Yld_Comp_Weight <> *ZERO;

  // LCL.YDL Yld Standard Pct = LCL.Weight Rate 1 / WRK.YDL Yld Comp Weight *Rounded
  LCL.YDL_Yld_Standard_Pct = LCL.Unused_Weight_Rate_1 / WRK.YDL_Yld_Comp_Weight 'H';

  ENDIF;

  // PAR.Percent 7.4 USR = PAR.Percent 7.4 USR + LCL.YDL Yld Standard Pct
  PAR.Percent_7_4_USR = PAR.Percent_7_4_USR + LCL.YDL_Yld_Standard_Pct;

  //?SAVE BONLESS LOIN STRAP OFF AMOUNTS    & combine with strap on
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Percent 7.4 USR = PAR.Percent 7.4 USR + DB1.YDL Yld Standard Pct
  PAR.Percent_7_4_USR = PAR.Percent_7_4_USR + DB1.YDL_Yld_Standard_Pct;

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Percent 7.4 USR = PAR.Percent 7.4 USR + DB1.YDL Yld Standard Pct
  PAR.Percent_7_4_USR = PAR.Percent_7_4_USR + DB1.YDL_Yld_Standard_Pct;

  ENDIF;

  ENDIF;

 }

 // PAR.YDL Yld Standard Pct = CON.100 - LCL.Percent 7.4 USR
 PAR.YDL_Yld_Standard_Pct = 100 - LCL.Percent_7_4_USR;

 //?Actual - Std Weight Diff
 CASE;

 // IF PAR.YDL Yld Standard Pct is Greater than zero
 IF PAR.YDL_Yld_Standard_Pct > *ZERO;

 // Compute: yld weight diff
 PAR.YDL_Yld_Weight_Diff = ( ( LCL.YDL_Yld_Mix_Percent_1 / 100 ) * PAR.Total_Line_Weight
 'H' ) - ( ( PAR.YDL_Yld_Standard_Pct / 100 ) * PAR.Total_Line_Weight 'H' );

 //?Actual - Std Weight Diff
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.YDL Yld Weight Diff = CON.*ZERO
 PAR.YDL_Yld_Weight_Diff = *ZERO;

 ENDIF;

 EXECUTE FUNCTION(Chg Mix Percent       CH) TYPE(CHGOBJ) FILE(POC0CPP)           AC1670639;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Production_Line_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Production_Shift);
 PARAMETER(LCL.Yld_Component_Code);
 PARAMETER(LCL.YDL_Yld_Mix_Percent_1);
 PARAMETER(PAR.YDL_Yld_Standard_Pct);
 PARAMETER(PAR.YDL_Yld_Weight_Diff);
 PARAMETER(PAR.YDL_Component_Group);
 PARAMETER(PAR.YDL_Unused_Sts_1);
 PARAMETER(PAR.YDL_Unused_Sts_2);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

}


ENDIF;

//?Calc Prod Std Yield %
// IF PAR.Department Code is Belly
IF PAR.Department_Code = 'BELLY';

// OR PAR.Department Code is Loin Boning
OR PAR.Department_Code = 'LOINS';

EXECUTE FUNCTION(Rtv Start Weight      RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1678965;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Department_Code);
PARAMETER(PAR.Production_Line_Code);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Production_Shift);
PARAMETER(LCL.Start_Weight);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Belly & loins use start weight whereas CUT uses Cold Weight
CASE;

// IF LCL.Start Weight is Greater than zero
IF LCL.Start_Weight > *ZERO;

EXECUTE FUNCTION(Exc Calc Mix Pct      RT) TYPE(RTVOBJ) FILE(POC0CPP)           AC1670638;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Department_Code);
PARAMETER(PAR.Production_Line_Code);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Production_Shift);
PARAMETER(LCL.Start_Weight);
{
 //?USER: Process Data record

 // PAR.YDL Yld Mix Percent = CON.*ZERO
 PAR.YDL_Yld_Mix_Percent = *ZERO;

 // PAR.YDL Yld Standard Pct = CON.*ZERO
 PAR.YDL_Yld_Standard_Pct = *ZERO;

 // PAR.YDL Yld Weight Diff = CON.*ZERO
 PAR.YDL_Yld_Weight_Diff = *ZERO;

 CASE;

 // IF DB1.YDL Yld Comp Weight is Greater than zero
 IF DB1.YDL_Yld_Comp_Weight > *ZERO;

 // Mix Percent
 PAR.YDL_Yld_Mix_Percent = ( DB1.YDL_Yld_Comp_Weight / PAR.Total_Line_Weight 'H' ) * 100
 'H';

 ENDIF;

 //?STD %  - std from yld comp std file and spec calcs from bom
 CASE;

 // IF DB1.Department Code is Belly
 IF DB1.Department_Code = 'BELLY';

 // AND DB1.Production Line Code is Skinless
 AND DB1.Production_Line_Code = 'SKINLS';

 // AND DB1.Yld Component Code is Finished
 AND DB1.Yld_Component_Code = 'FINISHED';

 //?Std% = sum((wgt produced/item bom sales yield)) / sw
 EXECUTE FUNCTION(Clc Skinls Finish Std IF) TYPE(EXCINTFUN)                      AC1685406;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER('FINISHED');
 PARAMETER(PAR.YDL_Yld_Standard_Pct);
 PARAMETER(PAR.Total_Line_Weight);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Component Info    RT) TYPE(RTVOBJ) FILE(POCZREP)           AC1669682;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Yld_Component_Code);
  PARAMETER(LCL.PLYC_Type);
  PARAMETER(WRK.PLYC_Percent_of_Weight);
  PARAMETER(WRK.PLYC_Comment);
  PARAMETER(LCL.Credit_Item_Inc_Exc_Sts);
  PARAMETER(WRK.Type_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Type_Code);
  PARAMETER(WRK.Group_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Group_Code);
  PARAMETER(WRK.Class_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Class_Code);
  PARAMETER(WRK.YC_Required_Sts);
  PARAMETER(WRK.YC_Component_Group);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.PLYC Type is Retrieve w/Mult Item Str
  IF LCL.PLYC_Type = 'MS';

  EXECUTE FUNCTION(Rtv Skinls Fin Std    RT) TYPE(RTVOBJ) FILE(PMAQREP)           AC1857634;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Yld_Component_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(LCL.Credit_Item_Inc_Exc_Sts);
  PARAMETER(PAR.Start_Weight);
  PARAMETER(PAR.YDL_Yld_Standard_Pct);
  PARAMETER(LCL.Unused_Weight_Rate_1);
  PARAMETER(LCL.Weight_Prod_2_USR);
  {
   //?USER: Initialize routine

   // PAR.Unused Weight Rate 1 = CON.*ZERO
   PAR.Unused_Weight_Rate_1 = *ZERO;

   // PAR.Weight Prod 2 USR = CON.*ZERO
   PAR.Weight_Prod_2_USR = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(Rtv Skinls Fin Std    RT) TYPE(RTVOBJ) FILE(POCPCPP)           AC1685407;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Department_Code);
   PARAMETER(DB1.Production_Line_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Production_Shift);
   PARAMETER(PAR.Credit_Item_Inc_Exc_Sts);
   PARAMETER(DB1.Type_Inc_Exc_Sts);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(DB1.Group_Inc_Exc_Sts);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Class_Inc_Exc_Sts);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(PAR.YDL_Yld_Standard_Pct);
   PARAMETER(PAR.Start_Weight);
   PARAMETER(PAR.Unused_Weight_Rate_1);
   PARAMETER(PAR.Weight_Prod_2_USR);
   {
    //?USER: Initialize routine

    // LCL.Unused Weight Rate 1 = CON.*ZERO
    LCL.Unused_Weight_Rate_1 = *ZERO;

    // LCL.Weight Prod 2 USR = CON.*ZERO
    LCL.Weight_Prod_2_USR = *ZERO;

    // PAR.YDL Yld Standard Pct = CON.*ZERO
    PAR.YDL_Yld_Standard_Pct = *ZERO;

    //?USER: Process Data record

    // PGM.*Record selected = CND.*YES
    PGM.*Record_selected = 'Y';

    //?SEL:  Credit Items
    CASE;

    // IF PAR.Credit Item Inc/Exc Sts is Entered
    IF PAR.Credit_Item_Inc_Exc_Sts = 'E'/'I';

    CASE;

    // IF PAR.Credit Item Inc/Exc Sts is Include
    IF PAR.Credit_Item_Inc_Exc_Sts = 'I';

    CASE;

    // IF DB1.Credit Item Status is no
    IF DB1.Credit_Item_Status = 'N';

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Credit Item Inc/Exc Sts is Exclude
    IF PAR.Credit_Item_Inc_Exc_Sts = 'E';

    CASE;

    // IF DB1.Credit Item Status is yes
    IF DB1.Credit_Item_Status = 'Y';

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    //?SEL:  Type
    CASE;

    // IF PAR.Item Structure Type Code is Entered
    IF PAR.Item_Structure_Type_Code <> *ZERO;

    CASE;

    // IF PAR.Type Inc/Exc Sts is Include
    IF PAR.Type_Inc_Exc_Sts = 'I';

    CASE;

    // IF PAR.Item Structure Type Code NE DB1.Item Structure Type Code
    IF PAR.Item_Structure_Type_Code <> DB1.Item_Structure_Type_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Type Inc/Exc Sts is Exclude
    IF PAR.Type_Inc_Exc_Sts = 'E';

    CASE;

    // IF PAR.Item Structure Type Code EQ DB1.Item Structure Type Code
    IF PAR.Item_Structure_Type_Code = DB1.Item_Structure_Type_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    //?SEL:  Group
    CASE;

    // IF PAR.Item Structure Group Code is Entered
    IF PAR.Item_Structure_Group_Code <> *ZERO;

    CASE;

    // IF PAR.Group Inc/Exc Sts is Include
    IF PAR.Group_Inc_Exc_Sts = 'I';

    CASE;

    // IF PAR.Item Structure Group Code NE DB1.Item Structure Group Code
    IF PAR.Item_Structure_Group_Code <> DB1.Item_Structure_Group_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Group Inc/Exc Sts is Exclude
    IF PAR.Group_Inc_Exc_Sts = 'E';

    CASE;

    // IF PAR.Item Structure Group Code EQ DB1.Item Structure Group Code
    IF PAR.Item_Structure_Group_Code = DB1.Item_Structure_Group_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    //?SEL:  Class
    CASE;

    // IF PAR.Item Structure Class Code is Entered
    IF PAR.Item_Structure_Class_Code <> *ZERO;

    CASE;

    // IF PAR.Class Inc/Exc Sts is Include
    IF PAR.Class_Inc_Exc_Sts = 'I';

    CASE;

    // IF PAR.Item Structure Class Code NE DB1.Item Structure Class Code
    IF PAR.Item_Structure_Class_Code <> DB1.Item_Structure_Class_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Class Inc/Exc Sts is Exclude
    IF PAR.Class_Inc_Exc_Sts = 'E';

    CASE;

    // IF PAR.Item Structure Class Code EQ DB1.Item Structure Class Code
    IF PAR.Item_Structure_Class_Code = DB1.Item_Structure_Class_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    CASE;

    // IF PGM.*Record selected is *YES
    IF PGM.*Record_selected = 'Y';

    EXECUTE FUNCTION(Rtv Item Sales Yield  RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1685363;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Item_Code);
    PARAMETER(LCL.Sales_Yield);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?Loin Boning : Calc 80025 Sales Yld from wgt, pieces, and avg zone wgt
    CASE;

    // IF DB1.Item Code is Bone Ls Loin
    IF DB1.Item_Code = 80025;

    EXECUTE FUNCTION(Rtv Bone In Zone Wgt  RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1688369;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Department_Code);
    PARAMETER(DB1.Production_Line_Code);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Production_Shift);
    PARAMETER(LCL.Bone_In_Zone_Avg_Loin_Wgt);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF DB1.Yld Transaction Pieces is NE Zeros
    IF DB1.Yld_Transaction_Pieces <> *ZERO;

    // AND LCL.Bone In Zone Avg Loin Wgt is GT Zero
    AND LCL.Bone_In_Zone_Avg_Loin_Wgt > *ZERO;

    // 80025 Sales Yield
    LCL.Sales_Yield = ( ( DB1.Yld_Transaction_Weight / DB1.Yld_Transaction_Pieces 'H' )
    / LCL.Bone_In_Zone_Avg_Loin_Wgt ) * 100;

    ENDIF;

    ENDIF;

    CASE;

    // IF DB1.Department Code is Belly
    IF DB1.Department_Code = 'BELLY';

    // AND DB1.Production Line Code is Skinless
    AND DB1.Production_Line_Code = 'SKINLS';

    // AND DB1.Item Code is Belly
    AND DB1.Item_Code = 57150;

    //?Adjust belly item 57150 with Heavy Bellies WIP item 2320 deletes
    EXECUTE FUNCTION(Rtv Del Pend f/1 Item RT) TYPE(RTVOBJ) FILE(POCOCPP)           AC1688209;
    PARAMETER(DB1.Company_Number);
    PARAMETER('CUT');
    PARAMETER('BELLY');
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Production_Shift);
    PARAMETER(2320);
    PARAMETER(LCL.Delete_Pending_Wgt);
    {
     //?USER: Process Data record

     // PAR.Delete Pending Wgt = PAR.Delete Pending Wgt + DB1.Delete Pending Wgt
     PAR.Delete_Pending_Wgt = PAR.Delete_Pending_Wgt + DB1.Delete_Pending_Wgt;

    }

    // Compute:total SW
    LCL.Weight_Prod_1_USR = ( ( DB1.Yld_Transaction_Weight - ( LCL.Delete_Pending_Wgt * .77
    'H' ) ) / ( LCL.Sales_Yield / 100 ) + ) + LCL.Delete_Pending_Wgt;

    // Adj Sales Yld for 57150
    LCL.Sales_Yield = ( DB1.Yld_Transaction_Weight / LCL.Weight_Prod_1_USR 'H' ) * 100;

    //?SUM(Standard Start Weight)
    CASE;

    // IF LCL.Sales Yield is not equal to zeros
    IF LCL.Sales_Yield <> *ZERO;

    // Accum Sales Yld for items
    LCL.Unused_Weight_Rate_1 = ( DB1.Yld_Transaction_Weight / ( LCL.Sales_Yield / 100 )
    + 'H' ) + LCL.Unused_Weight_Rate_1;

    ENDIF;

    // LCL.Weight Prod 2 USR = LCL.Weight Prod 2 USR + DB1.Yld Transaction Weight
    LCL.Weight_Prod_2_USR = LCL.Weight_Prod_2_USR + DB1.Yld_Transaction_Weight;

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?SUM(Standard Start Weight)
    CASE;

    // IF LCL.Sales Yield is not equal to zeros
    IF LCL.Sales_Yield <> *ZERO;

    // Accum Sales Yld for items
    LCL.Unused_Weight_Rate_1 = ( DB1.Yld_Transaction_Weight / ( LCL.Sales_Yield / 100 )
    + 'H' ) + LCL.Unused_Weight_Rate_1;

    ENDIF;

    // LCL.Weight Prod 2 USR = LCL.Weight Prod 2 USR + DB1.Yld Transaction Weight
    LCL.Weight_Prod_2_USR = LCL.Weight_Prod_2_USR + DB1.Yld_Transaction_Weight;

    ENDIF;

    ENDIF;

    //?USER: Exit processing

    CASE;

    // IF LCL.Unused Weight Rate 1 is Greater than zero
    IF LCL.Unused_Weight_Rate_1 > *ZERO;

    // Compute:Std Pct
    PAR.YDL_Yld_Standard_Pct = ( LCL.Weight_Prod_2_USR / LCL.Unused_Weight_Rate_1 'H' ) * 100
    'H';

    ENDIF;

    // PAR.Unused Weight Rate 1 = PAR.Unused Weight Rate 1 + LCL.Unused Weight Rate 1
    PAR.Unused_Weight_Rate_1 = PAR.Unused_Weight_Rate_1 + LCL.Unused_Weight_Rate_1;

    // PAR.Weight Prod 2 USR = PAR.Weight Prod 2 USR + LCL.Weight Prod 2 USR
    PAR.Weight_Prod_2_USR = PAR.Weight_Prod_2_USR + LCL.Weight_Prod_2_USR;

   }

   //?USER: Exit processing

   CASE;

   // IF PAR.Unused Weight Rate 1 is Greater than zero
   IF PAR.Unused_Weight_Rate_1 > *ZERO;

   // Compute:Std Pct
   PAR.YDL_Yld_Standard_Pct = ( PAR.Weight_Prod_2_USR / PAR.Unused_Weight_Rate_1 'H' ) * 100
   'H';

   ENDIF;

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Skinls Fin Std    RT) TYPE(RTVOBJ) FILE(POCPCPP)           AC1685407;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(LCL.Credit_Item_Inc_Exc_Sts);
  PARAMETER(WRK.Type_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Type_Code);
  PARAMETER(WRK.Group_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Group_Code);
  PARAMETER(WRK.Class_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Class_Code);
  PARAMETER(PAR.YDL_Yld_Standard_Pct);
  PARAMETER(PAR.Start_Weight);
  PARAMETER(LCL.Unused_Weight_Rate_1);
  PARAMETER(LCL.Weight_Prod_2_USR);
  {
   //?USER: Initialize routine

   // LCL.Unused Weight Rate 1 = CON.*ZERO
   LCL.Unused_Weight_Rate_1 = *ZERO;

   // LCL.Weight Prod 2 USR = CON.*ZERO
   LCL.Weight_Prod_2_USR = *ZERO;

   // PAR.YDL Yld Standard Pct = CON.*ZERO
   PAR.YDL_Yld_Standard_Pct = *ZERO;

   //?USER: Process Data record

   // PGM.*Record selected = CND.*YES
   PGM.*Record_selected = 'Y';

   //?SEL:  Credit Items
   CASE;

   // IF PAR.Credit Item Inc/Exc Sts is Entered
   IF PAR.Credit_Item_Inc_Exc_Sts = 'E'/'I';

   CASE;

   // IF PAR.Credit Item Inc/Exc Sts is Include
   IF PAR.Credit_Item_Inc_Exc_Sts = 'I';

   CASE;

   // IF DB1.Credit Item Status is no
   IF DB1.Credit_Item_Status = 'N';

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Credit Item Inc/Exc Sts is Exclude
   IF PAR.Credit_Item_Inc_Exc_Sts = 'E';

   CASE;

   // IF DB1.Credit Item Status is yes
   IF DB1.Credit_Item_Status = 'Y';

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   //?SEL:  Type
   CASE;

   // IF PAR.Item Structure Type Code is Entered
   IF PAR.Item_Structure_Type_Code <> *ZERO;

   CASE;

   // IF PAR.Type Inc/Exc Sts is Include
   IF PAR.Type_Inc_Exc_Sts = 'I';

   CASE;

   // IF PAR.Item Structure Type Code NE DB1.Item Structure Type Code
   IF PAR.Item_Structure_Type_Code <> DB1.Item_Structure_Type_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Type Inc/Exc Sts is Exclude
   IF PAR.Type_Inc_Exc_Sts = 'E';

   CASE;

   // IF PAR.Item Structure Type Code EQ DB1.Item Structure Type Code
   IF PAR.Item_Structure_Type_Code = DB1.Item_Structure_Type_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   //?SEL:  Group
   CASE;

   // IF PAR.Item Structure Group Code is Entered
   IF PAR.Item_Structure_Group_Code <> *ZERO;

   CASE;

   // IF PAR.Group Inc/Exc Sts is Include
   IF PAR.Group_Inc_Exc_Sts = 'I';

   CASE;

   // IF PAR.Item Structure Group Code NE DB1.Item Structure Group Code
   IF PAR.Item_Structure_Group_Code <> DB1.Item_Structure_Group_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Group Inc/Exc Sts is Exclude
   IF PAR.Group_Inc_Exc_Sts = 'E';

   CASE;

   // IF PAR.Item Structure Group Code EQ DB1.Item Structure Group Code
   IF PAR.Item_Structure_Group_Code = DB1.Item_Structure_Group_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   //?SEL:  Class
   CASE;

   // IF PAR.Item Structure Class Code is Entered
   IF PAR.Item_Structure_Class_Code <> *ZERO;

   CASE;

   // IF PAR.Class Inc/Exc Sts is Include
   IF PAR.Class_Inc_Exc_Sts = 'I';

   CASE;

   // IF PAR.Item Structure Class Code NE DB1.Item Structure Class Code
   IF PAR.Item_Structure_Class_Code <> DB1.Item_Structure_Class_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Class Inc/Exc Sts is Exclude
   IF PAR.Class_Inc_Exc_Sts = 'E';

   CASE;

   // IF PAR.Item Structure Class Code EQ DB1.Item Structure Class Code
   IF PAR.Item_Structure_Class_Code = DB1.Item_Structure_Class_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   CASE;

   // IF PGM.*Record selected is *YES
   IF PGM.*Record_selected = 'Y';

   EXECUTE FUNCTION(Rtv Item Sales Yield  RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1685363;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Sales_Yield);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Loin Boning : Calc 80025 Sales Yld from wgt, pieces, and avg zone wgt
   CASE;

   // IF DB1.Item Code is Bone Ls Loin
   IF DB1.Item_Code = 80025;

   EXECUTE FUNCTION(Rtv Bone In Zone Wgt  RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1688369;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Department_Code);
   PARAMETER(DB1.Production_Line_Code);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Production_Shift);
   PARAMETER(LCL.Bone_In_Zone_Avg_Loin_Wgt);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF DB1.Yld Transaction Pieces is NE Zeros
   IF DB1.Yld_Transaction_Pieces <> *ZERO;

   // AND LCL.Bone In Zone Avg Loin Wgt is GT Zero
   AND LCL.Bone_In_Zone_Avg_Loin_Wgt > *ZERO;

   // 80025 Sales Yield
   LCL.Sales_Yield = ( ( DB1.Yld_Transaction_Weight / DB1.Yld_Transaction_Pieces 'H' )
   / LCL.Bone_In_Zone_Avg_Loin_Wgt ) * 100;

   ENDIF;

   ENDIF;

   CASE;

   // IF DB1.Department Code is Belly
   IF DB1.Department_Code = 'BELLY';

   // AND DB1.Production Line Code is Skinless
   AND DB1.Production_Line_Code = 'SKINLS';

   // AND DB1.Item Code is Belly
   AND DB1.Item_Code = 57150;

   //?Adjust belly item 57150 with Heavy Bellies WIP item 2320 deletes
   EXECUTE FUNCTION(Rtv Del Pend f/1 Item RT) TYPE(RTVOBJ) FILE(POCOCPP)           AC1688209;
   PARAMETER(DB1.Company_Number);
   PARAMETER('CUT');
   PARAMETER('BELLY');
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Production_Shift);
   PARAMETER(2320);
   PARAMETER(LCL.Delete_Pending_Wgt);
   {
    //?USER: Process Data record

    // PAR.Delete Pending Wgt = PAR.Delete Pending Wgt + DB1.Delete Pending Wgt
    PAR.Delete_Pending_Wgt = PAR.Delete_Pending_Wgt + DB1.Delete_Pending_Wgt;

   }

   // Compute:total SW
   LCL.Weight_Prod_1_USR = ( ( DB1.Yld_Transaction_Weight - ( LCL.Delete_Pending_Wgt * .77
   'H' ) ) / ( LCL.Sales_Yield / 100 ) + ) + LCL.Delete_Pending_Wgt;

   // Adj Sales Yld for 57150
   LCL.Sales_Yield = ( DB1.Yld_Transaction_Weight / LCL.Weight_Prod_1_USR 'H' ) * 100;

   //?SUM(Standard Start Weight)
   CASE;

   // IF LCL.Sales Yield is not equal to zeros
   IF LCL.Sales_Yield <> *ZERO;

   // Accum Sales Yld for items
   LCL.Unused_Weight_Rate_1 = ( DB1.Yld_Transaction_Weight / ( LCL.Sales_Yield / 100 )
   + 'H' ) + LCL.Unused_Weight_Rate_1;

   ENDIF;

   // LCL.Weight Prod 2 USR = LCL.Weight Prod 2 USR + DB1.Yld Transaction Weight
   LCL.Weight_Prod_2_USR = LCL.Weight_Prod_2_USR + DB1.Yld_Transaction_Weight;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?SUM(Standard Start Weight)
   CASE;

   // IF LCL.Sales Yield is not equal to zeros
   IF LCL.Sales_Yield <> *ZERO;

   // Accum Sales Yld for items
   LCL.Unused_Weight_Rate_1 = ( DB1.Yld_Transaction_Weight / ( LCL.Sales_Yield / 100 )
   + 'H' ) + LCL.Unused_Weight_Rate_1;

   ENDIF;

   // LCL.Weight Prod 2 USR = LCL.Weight Prod 2 USR + DB1.Yld Transaction Weight
   LCL.Weight_Prod_2_USR = LCL.Weight_Prod_2_USR + DB1.Yld_Transaction_Weight;

   ENDIF;

   ENDIF;

   //?USER: Exit processing

   CASE;

   // IF LCL.Unused Weight Rate 1 is Greater than zero
   IF LCL.Unused_Weight_Rate_1 > *ZERO;

   // Compute:Std Pct
   PAR.YDL_Yld_Standard_Pct = ( LCL.Weight_Prod_2_USR / LCL.Unused_Weight_Rate_1 'H' ) * 100
   'H';

   ENDIF;

   // PAR.Unused Weight Rate 1 = PAR.Unused Weight Rate 1 + LCL.Unused Weight Rate 1
   PAR.Unused_Weight_Rate_1 = PAR.Unused_Weight_Rate_1 + LCL.Unused_Weight_Rate_1;

   // PAR.Weight Prod 2 USR = PAR.Weight Prod 2 USR + LCL.Weight Prod 2 USR
   PAR.Weight_Prod_2_USR = PAR.Weight_Prod_2_USR + LCL.Weight_Prod_2_USR;

  }

  ENDIF;

 }

 //?STD %  - std from yld comp std file and spec calcs from bom
 // IF DB1.Department Code is Loin Boning
 IF DB1.Department_Code = 'LOINS';

 // AND DB1.Production Line Code is Boning
 AND DB1.Production_Line_Code = 'BONING';

 // AND DB1.Yld Component Code is Boneless Loin-Strap On
 AND ( DB1.Yld_Component_Code = 'BNLSSTRON';

 // OR DB1.Yld Component Code is Boneless Loin-Strap Off
 OR DB1.Yld_Component_Code = 'BNLSSTROFF' );

 EXECUTE FUNCTION(Clc Bonless Loins Std IF) TYPE(EXCINTFUN)                      AC1687896;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(DB1.Yld_Component_Code);
 PARAMETER(PAR.YDL_Yld_Standard_Pct);
 PARAMETER(PAR.Total_Line_Weight);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Component Info    RT) TYPE(RTVOBJ) FILE(POCZREP)           AC1669682;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Yld_Component_Code);
  PARAMETER(LCL.PLYC_Type);
  PARAMETER(WRK.PLYC_Percent_of_Weight);
  PARAMETER(WRK.PLYC_Comment);
  PARAMETER(LCL.Credit_Item_Inc_Exc_Sts);
  PARAMETER(WRK.Type_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Type_Code);
  PARAMETER(WRK.Group_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Group_Code);
  PARAMETER(WRK.Class_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Class_Code);
  PARAMETER(WRK.YC_Required_Sts);
  PARAMETER(WRK.YC_Component_Group);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.PLYC Type is Retrieve w/Mult Item Str
  IF LCL.PLYC_Type = 'MS';

  EXECUTE FUNCTION(Rtv Skinls Fin Std    RT) TYPE(RTVOBJ) FILE(PMAQREP)           AC1857634;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Yld_Component_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(LCL.Credit_Item_Inc_Exc_Sts);
  PARAMETER(PAR.Start_Weight);
  PARAMETER(PAR.YDL_Yld_Standard_Pct);
  PARAMETER(LCL.Unused_Weight_Rate_1);
  PARAMETER(LCL.Weight_Prod_2_USR);
  {
   //?USER: Initialize routine

   // PAR.Unused Weight Rate 1 = CON.*ZERO
   PAR.Unused_Weight_Rate_1 = *ZERO;

   // PAR.Weight Prod 2 USR = CON.*ZERO
   PAR.Weight_Prod_2_USR = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(Rtv Skinls Fin Std    RT) TYPE(RTVOBJ) FILE(POCPCPP)           AC1685407;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Department_Code);
   PARAMETER(DB1.Production_Line_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Production_Shift);
   PARAMETER(PAR.Credit_Item_Inc_Exc_Sts);
   PARAMETER(DB1.Type_Inc_Exc_Sts);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(DB1.Group_Inc_Exc_Sts);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Class_Inc_Exc_Sts);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(PAR.YDL_Yld_Standard_Pct);
   PARAMETER(PAR.Start_Weight);
   PARAMETER(PAR.Unused_Weight_Rate_1);
   PARAMETER(PAR.Weight_Prod_2_USR);
   {
    //?USER: Initialize routine

    // LCL.Unused Weight Rate 1 = CON.*ZERO
    LCL.Unused_Weight_Rate_1 = *ZERO;

    // LCL.Weight Prod 2 USR = CON.*ZERO
    LCL.Weight_Prod_2_USR = *ZERO;

    // PAR.YDL Yld Standard Pct = CON.*ZERO
    PAR.YDL_Yld_Standard_Pct = *ZERO;

    //?USER: Process Data record

    // PGM.*Record selected = CND.*YES
    PGM.*Record_selected = 'Y';

    //?SEL:  Credit Items
    CASE;

    // IF PAR.Credit Item Inc/Exc Sts is Entered
    IF PAR.Credit_Item_Inc_Exc_Sts = 'E'/'I';

    CASE;

    // IF PAR.Credit Item Inc/Exc Sts is Include
    IF PAR.Credit_Item_Inc_Exc_Sts = 'I';

    CASE;

    // IF DB1.Credit Item Status is no
    IF DB1.Credit_Item_Status = 'N';

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Credit Item Inc/Exc Sts is Exclude
    IF PAR.Credit_Item_Inc_Exc_Sts = 'E';

    CASE;

    // IF DB1.Credit Item Status is yes
    IF DB1.Credit_Item_Status = 'Y';

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    //?SEL:  Type
    CASE;

    // IF PAR.Item Structure Type Code is Entered
    IF PAR.Item_Structure_Type_Code <> *ZERO;

    CASE;

    // IF PAR.Type Inc/Exc Sts is Include
    IF PAR.Type_Inc_Exc_Sts = 'I';

    CASE;

    // IF PAR.Item Structure Type Code NE DB1.Item Structure Type Code
    IF PAR.Item_Structure_Type_Code <> DB1.Item_Structure_Type_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Type Inc/Exc Sts is Exclude
    IF PAR.Type_Inc_Exc_Sts = 'E';

    CASE;

    // IF PAR.Item Structure Type Code EQ DB1.Item Structure Type Code
    IF PAR.Item_Structure_Type_Code = DB1.Item_Structure_Type_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    //?SEL:  Group
    CASE;

    // IF PAR.Item Structure Group Code is Entered
    IF PAR.Item_Structure_Group_Code <> *ZERO;

    CASE;

    // IF PAR.Group Inc/Exc Sts is Include
    IF PAR.Group_Inc_Exc_Sts = 'I';

    CASE;

    // IF PAR.Item Structure Group Code NE DB1.Item Structure Group Code
    IF PAR.Item_Structure_Group_Code <> DB1.Item_Structure_Group_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Group Inc/Exc Sts is Exclude
    IF PAR.Group_Inc_Exc_Sts = 'E';

    CASE;

    // IF PAR.Item Structure Group Code EQ DB1.Item Structure Group Code
    IF PAR.Item_Structure_Group_Code = DB1.Item_Structure_Group_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    //?SEL:  Class
    CASE;

    // IF PAR.Item Structure Class Code is Entered
    IF PAR.Item_Structure_Class_Code <> *ZERO;

    CASE;

    // IF PAR.Class Inc/Exc Sts is Include
    IF PAR.Class_Inc_Exc_Sts = 'I';

    CASE;

    // IF PAR.Item Structure Class Code NE DB1.Item Structure Class Code
    IF PAR.Item_Structure_Class_Code <> DB1.Item_Structure_Class_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Class Inc/Exc Sts is Exclude
    IF PAR.Class_Inc_Exc_Sts = 'E';

    CASE;

    // IF PAR.Item Structure Class Code EQ DB1.Item Structure Class Code
    IF PAR.Item_Structure_Class_Code = DB1.Item_Structure_Class_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    CASE;

    // IF PGM.*Record selected is *YES
    IF PGM.*Record_selected = 'Y';

    EXECUTE FUNCTION(Rtv Item Sales Yield  RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1685363;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Item_Code);
    PARAMETER(LCL.Sales_Yield);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?Loin Boning : Calc 80025 Sales Yld from wgt, pieces, and avg zone wgt
    CASE;

    // IF DB1.Item Code is Bone Ls Loin
    IF DB1.Item_Code = 80025;

    EXECUTE FUNCTION(Rtv Bone In Zone Wgt  RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1688369;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Department_Code);
    PARAMETER(DB1.Production_Line_Code);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Production_Shift);
    PARAMETER(LCL.Bone_In_Zone_Avg_Loin_Wgt);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF DB1.Yld Transaction Pieces is NE Zeros
    IF DB1.Yld_Transaction_Pieces <> *ZERO;

    // AND LCL.Bone In Zone Avg Loin Wgt is GT Zero
    AND LCL.Bone_In_Zone_Avg_Loin_Wgt > *ZERO;

    // 80025 Sales Yield
    LCL.Sales_Yield = ( ( DB1.Yld_Transaction_Weight / DB1.Yld_Transaction_Pieces 'H' )
    / LCL.Bone_In_Zone_Avg_Loin_Wgt ) * 100;

    ENDIF;

    ENDIF;

    CASE;

    // IF DB1.Department Code is Belly
    IF DB1.Department_Code = 'BELLY';

    // AND DB1.Production Line Code is Skinless
    AND DB1.Production_Line_Code = 'SKINLS';

    // AND DB1.Item Code is Belly
    AND DB1.Item_Code = 57150;

    //?Adjust belly item 57150 with Heavy Bellies WIP item 2320 deletes
    EXECUTE FUNCTION(Rtv Del Pend f/1 Item RT) TYPE(RTVOBJ) FILE(POCOCPP)           AC1688209;
    PARAMETER(DB1.Company_Number);
    PARAMETER('CUT');
    PARAMETER('BELLY');
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Production_Shift);
    PARAMETER(2320);
    PARAMETER(LCL.Delete_Pending_Wgt);
    {
     //?USER: Process Data record

     // PAR.Delete Pending Wgt = PAR.Delete Pending Wgt + DB1.Delete Pending Wgt
     PAR.Delete_Pending_Wgt = PAR.Delete_Pending_Wgt + DB1.Delete_Pending_Wgt;

    }

    // Compute:total SW
    LCL.Weight_Prod_1_USR = ( ( DB1.Yld_Transaction_Weight - ( LCL.Delete_Pending_Wgt * .77
    'H' ) ) / ( LCL.Sales_Yield / 100 ) + ) + LCL.Delete_Pending_Wgt;

    // Adj Sales Yld for 57150
    LCL.Sales_Yield = ( DB1.Yld_Transaction_Weight / LCL.Weight_Prod_1_USR 'H' ) * 100;

    //?SUM(Standard Start Weight)
    CASE;

    // IF LCL.Sales Yield is not equal to zeros
    IF LCL.Sales_Yield <> *ZERO;

    // Accum Sales Yld for items
    LCL.Unused_Weight_Rate_1 = ( DB1.Yld_Transaction_Weight / ( LCL.Sales_Yield / 100 )
    + 'H' ) + LCL.Unused_Weight_Rate_1;

    ENDIF;

    // LCL.Weight Prod 2 USR = LCL.Weight Prod 2 USR + DB1.Yld Transaction Weight
    LCL.Weight_Prod_2_USR = LCL.Weight_Prod_2_USR + DB1.Yld_Transaction_Weight;

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?SUM(Standard Start Weight)
    CASE;

    // IF LCL.Sales Yield is not equal to zeros
    IF LCL.Sales_Yield <> *ZERO;

    // Accum Sales Yld for items
    LCL.Unused_Weight_Rate_1 = ( DB1.Yld_Transaction_Weight / ( LCL.Sales_Yield / 100 )
    + 'H' ) + LCL.Unused_Weight_Rate_1;

    ENDIF;

    // LCL.Weight Prod 2 USR = LCL.Weight Prod 2 USR + DB1.Yld Transaction Weight
    LCL.Weight_Prod_2_USR = LCL.Weight_Prod_2_USR + DB1.Yld_Transaction_Weight;

    ENDIF;

    ENDIF;

    //?USER: Exit processing

    CASE;

    // IF LCL.Unused Weight Rate 1 is Greater than zero
    IF LCL.Unused_Weight_Rate_1 > *ZERO;

    // Compute:Std Pct
    PAR.YDL_Yld_Standard_Pct = ( LCL.Weight_Prod_2_USR / LCL.Unused_Weight_Rate_1 'H' ) * 100
    'H';

    ENDIF;

    // PAR.Unused Weight Rate 1 = PAR.Unused Weight Rate 1 + LCL.Unused Weight Rate 1
    PAR.Unused_Weight_Rate_1 = PAR.Unused_Weight_Rate_1 + LCL.Unused_Weight_Rate_1;

    // PAR.Weight Prod 2 USR = PAR.Weight Prod 2 USR + LCL.Weight Prod 2 USR
    PAR.Weight_Prod_2_USR = PAR.Weight_Prod_2_USR + LCL.Weight_Prod_2_USR;

   }

   //?USER: Exit processing

   CASE;

   // IF PAR.Unused Weight Rate 1 is Greater than zero
   IF PAR.Unused_Weight_Rate_1 > *ZERO;

   // Compute:Std Pct
   PAR.YDL_Yld_Standard_Pct = ( PAR.Weight_Prod_2_USR / PAR.Unused_Weight_Rate_1 'H' ) * 100
   'H';

   ENDIF;

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Skinls Fin Std    RT) TYPE(RTVOBJ) FILE(POCPCPP)           AC1685407;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(LCL.Credit_Item_Inc_Exc_Sts);
  PARAMETER(WRK.Type_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Type_Code);
  PARAMETER(WRK.Group_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Group_Code);
  PARAMETER(WRK.Class_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Class_Code);
  PARAMETER(PAR.YDL_Yld_Standard_Pct);
  PARAMETER(PAR.Start_Weight);
  PARAMETER(LCL.Unused_Weight_Rate_1);
  PARAMETER(LCL.Weight_Prod_2_USR);
  {
   //?USER: Initialize routine

   // LCL.Unused Weight Rate 1 = CON.*ZERO
   LCL.Unused_Weight_Rate_1 = *ZERO;

   // LCL.Weight Prod 2 USR = CON.*ZERO
   LCL.Weight_Prod_2_USR = *ZERO;

   // PAR.YDL Yld Standard Pct = CON.*ZERO
   PAR.YDL_Yld_Standard_Pct = *ZERO;

   //?USER: Process Data record

   // PGM.*Record selected = CND.*YES
   PGM.*Record_selected = 'Y';

   //?SEL:  Credit Items
   CASE;

   // IF PAR.Credit Item Inc/Exc Sts is Entered
   IF PAR.Credit_Item_Inc_Exc_Sts = 'E'/'I';

   CASE;

   // IF PAR.Credit Item Inc/Exc Sts is Include
   IF PAR.Credit_Item_Inc_Exc_Sts = 'I';

   CASE;

   // IF DB1.Credit Item Status is no
   IF DB1.Credit_Item_Status = 'N';

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Credit Item Inc/Exc Sts is Exclude
   IF PAR.Credit_Item_Inc_Exc_Sts = 'E';

   CASE;

   // IF DB1.Credit Item Status is yes
   IF DB1.Credit_Item_Status = 'Y';

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   //?SEL:  Type
   CASE;

   // IF PAR.Item Structure Type Code is Entered
   IF PAR.Item_Structure_Type_Code <> *ZERO;

   CASE;

   // IF PAR.Type Inc/Exc Sts is Include
   IF PAR.Type_Inc_Exc_Sts = 'I';

   CASE;

   // IF PAR.Item Structure Type Code NE DB1.Item Structure Type Code
   IF PAR.Item_Structure_Type_Code <> DB1.Item_Structure_Type_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Type Inc/Exc Sts is Exclude
   IF PAR.Type_Inc_Exc_Sts = 'E';

   CASE;

   // IF PAR.Item Structure Type Code EQ DB1.Item Structure Type Code
   IF PAR.Item_Structure_Type_Code = DB1.Item_Structure_Type_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   //?SEL:  Group
   CASE;

   // IF PAR.Item Structure Group Code is Entered
   IF PAR.Item_Structure_Group_Code <> *ZERO;

   CASE;

   // IF PAR.Group Inc/Exc Sts is Include
   IF PAR.Group_Inc_Exc_Sts = 'I';

   CASE;

   // IF PAR.Item Structure Group Code NE DB1.Item Structure Group Code
   IF PAR.Item_Structure_Group_Code <> DB1.Item_Structure_Group_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Group Inc/Exc Sts is Exclude
   IF PAR.Group_Inc_Exc_Sts = 'E';

   CASE;

   // IF PAR.Item Structure Group Code EQ DB1.Item Structure Group Code
   IF PAR.Item_Structure_Group_Code = DB1.Item_Structure_Group_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   //?SEL:  Class
   CASE;

   // IF PAR.Item Structure Class Code is Entered
   IF PAR.Item_Structure_Class_Code <> *ZERO;

   CASE;

   // IF PAR.Class Inc/Exc Sts is Include
   IF PAR.Class_Inc_Exc_Sts = 'I';

   CASE;

   // IF PAR.Item Structure Class Code NE DB1.Item Structure Class Code
   IF PAR.Item_Structure_Class_Code <> DB1.Item_Structure_Class_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Class Inc/Exc Sts is Exclude
   IF PAR.Class_Inc_Exc_Sts = 'E';

   CASE;

   // IF PAR.Item Structure Class Code EQ DB1.Item Structure Class Code
   IF PAR.Item_Structure_Class_Code = DB1.Item_Structure_Class_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   CASE;

   // IF PGM.*Record selected is *YES
   IF PGM.*Record_selected = 'Y';

   EXECUTE FUNCTION(Rtv Item Sales Yield  RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1685363;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Sales_Yield);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Loin Boning : Calc 80025 Sales Yld from wgt, pieces, and avg zone wgt
   CASE;

   // IF DB1.Item Code is Bone Ls Loin
   IF DB1.Item_Code = 80025;

   EXECUTE FUNCTION(Rtv Bone In Zone Wgt  RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1688369;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Department_Code);
   PARAMETER(DB1.Production_Line_Code);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Production_Shift);
   PARAMETER(LCL.Bone_In_Zone_Avg_Loin_Wgt);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF DB1.Yld Transaction Pieces is NE Zeros
   IF DB1.Yld_Transaction_Pieces <> *ZERO;

   // AND LCL.Bone In Zone Avg Loin Wgt is GT Zero
   AND LCL.Bone_In_Zone_Avg_Loin_Wgt > *ZERO;

   // 80025 Sales Yield
   LCL.Sales_Yield = ( ( DB1.Yld_Transaction_Weight / DB1.Yld_Transaction_Pieces 'H' )
   / LCL.Bone_In_Zone_Avg_Loin_Wgt ) * 100;

   ENDIF;

   ENDIF;

   CASE;

   // IF DB1.Department Code is Belly
   IF DB1.Department_Code = 'BELLY';

   // AND DB1.Production Line Code is Skinless
   AND DB1.Production_Line_Code = 'SKINLS';

   // AND DB1.Item Code is Belly
   AND DB1.Item_Code = 57150;

   //?Adjust belly item 57150 with Heavy Bellies WIP item 2320 deletes
   EXECUTE FUNCTION(Rtv Del Pend f/1 Item RT) TYPE(RTVOBJ) FILE(POCOCPP)           AC1688209;
   PARAMETER(DB1.Company_Number);
   PARAMETER('CUT');
   PARAMETER('BELLY');
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Production_Shift);
   PARAMETER(2320);
   PARAMETER(LCL.Delete_Pending_Wgt);
   {
    //?USER: Process Data record

    // PAR.Delete Pending Wgt = PAR.Delete Pending Wgt + DB1.Delete Pending Wgt
    PAR.Delete_Pending_Wgt = PAR.Delete_Pending_Wgt + DB1.Delete_Pending_Wgt;

   }

   // Compute:total SW
   LCL.Weight_Prod_1_USR = ( ( DB1.Yld_Transaction_Weight - ( LCL.Delete_Pending_Wgt * .77
   'H' ) ) / ( LCL.Sales_Yield / 100 ) + ) + LCL.Delete_Pending_Wgt;

   // Adj Sales Yld for 57150
   LCL.Sales_Yield = ( DB1.Yld_Transaction_Weight / LCL.Weight_Prod_1_USR 'H' ) * 100;

   //?SUM(Standard Start Weight)
   CASE;

   // IF LCL.Sales Yield is not equal to zeros
   IF LCL.Sales_Yield <> *ZERO;

   // Accum Sales Yld for items
   LCL.Unused_Weight_Rate_1 = ( DB1.Yld_Transaction_Weight / ( LCL.Sales_Yield / 100 )
   + 'H' ) + LCL.Unused_Weight_Rate_1;

   ENDIF;

   // LCL.Weight Prod 2 USR = LCL.Weight Prod 2 USR + DB1.Yld Transaction Weight
   LCL.Weight_Prod_2_USR = LCL.Weight_Prod_2_USR + DB1.Yld_Transaction_Weight;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?SUM(Standard Start Weight)
   CASE;

   // IF LCL.Sales Yield is not equal to zeros
   IF LCL.Sales_Yield <> *ZERO;

   // Accum Sales Yld for items
   LCL.Unused_Weight_Rate_1 = ( DB1.Yld_Transaction_Weight / ( LCL.Sales_Yield / 100 )
   + 'H' ) + LCL.Unused_Weight_Rate_1;

   ENDIF;

   // LCL.Weight Prod 2 USR = LCL.Weight Prod 2 USR + DB1.Yld Transaction Weight
   LCL.Weight_Prod_2_USR = LCL.Weight_Prod_2_USR + DB1.Yld_Transaction_Weight;

   ENDIF;

   ENDIF;

   //?USER: Exit processing

   CASE;

   // IF LCL.Unused Weight Rate 1 is Greater than zero
   IF LCL.Unused_Weight_Rate_1 > *ZERO;

   // Compute:Std Pct
   PAR.YDL_Yld_Standard_Pct = ( LCL.Weight_Prod_2_USR / LCL.Unused_Weight_Rate_1 'H' ) * 100
   'H';

   ENDIF;

   // PAR.Unused Weight Rate 1 = PAR.Unused Weight Rate 1 + LCL.Unused Weight Rate 1
   PAR.Unused_Weight_Rate_1 = PAR.Unused_Weight_Rate_1 + LCL.Unused_Weight_Rate_1;

   // PAR.Weight Prod 2 USR = PAR.Weight Prod 2 USR + LCL.Weight Prod 2 USR
   PAR.Weight_Prod_2_USR = PAR.Weight_Prod_2_USR + LCL.Weight_Prod_2_USR;

  }

  ENDIF;

 }

 //?STD %  - std from yld comp std file and spec calcs from bom
 // IF DB1.Department Code is Loin Boning
 IF DB1.Department_Code = 'LOINS';

 // AND DB1.Production Line Code is Boning
 AND DB1.Production_Line_Code = 'BONING';

 // AND DB1.Yld Component Code is Bone In Sirloin
 AND ( DB1.Yld_Component_Code = 'BISIRLOIN';

 // OR DB1.Yld Component Code is Bone Less Sirloin
 OR DB1.Yld_Component_Code = 'BLSSIRLOIN' );

 EXECUTE FUNCTION(Clc Loins Sirloin Std IF) TYPE(EXCINTFUN)                      AC1687877;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(DB1.Yld_Component_Code);
 PARAMETER(PAR.YDL_Yld_Standard_Pct);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Prod Weight 1 compRT) TYPE(RTVOBJ) FILE(POC0CPP)           AC1686467;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(PAR.Yld_Component_Code);
  PARAMETER(LCL.YDL_Yld_Comp_Weight);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   CASE;

   // IF DB1.Yld Component Code is Inedible
   IF DB1.Yld_Component_Code = 'ZINEDIBLE';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Weight Tot Start Need USR = PAR.Weight Tot Start Need USR + DB1.YDL Yld Comp Weight
   PAR.Weight_Tot_Start_Need_USR = PAR.Weight_Tot_Start_Need_USR + DB1.YDL_Yld_Comp_Weight;

   ENDIF;

  }

  CASE;

  // IF PAR.Yld Component Code is Bone In Sirloin
  IF PAR.Yld_Component_Code = 'BISIRLOIN';

  // LCL.Yld Component Code = CND.Bone Less Sirloin
  LCL.Yld_Component_Code = 'BLSSIRLOIN';

  // IF PAR.Yld Component Code is Bone Less Sirloin
  IF PAR.Yld_Component_Code = 'BLSSIRLOIN';

  // LCL.Yld Component Code = CND.Bone In Sirloin
  LCL.Yld_Component_Code = 'BISIRLOIN';

  ENDIF;

  EXECUTE FUNCTION(Rtv Prod Weight 1 compRT) TYPE(RTVOBJ) FILE(POC0CPP)           AC1686467;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(LCL.Yld_Component_Code);
  PARAMETER(LCL.Weight_Prod_2_USR);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   CASE;

   // IF DB1.Yld Component Code is Inedible
   IF DB1.Yld_Component_Code = 'ZINEDIBLE';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Weight Tot Start Need USR = PAR.Weight Tot Start Need USR + DB1.YDL Yld Comp Weight
   PAR.Weight_Tot_Start_Need_USR = PAR.Weight_Tot_Start_Need_USR + DB1.YDL_Yld_Comp_Weight;

   ENDIF;

  }

  CASE;

  // IF PAR.Yld Component Code is Bone In Sirloin
  IF PAR.Yld_Component_Code = 'BISIRLOIN';

  //?Std% =(bi comp wgt*.1714)/((bls sirloin comp wgt/2) + bi sirloin comp wgt)
  //? Perform if weights arent zero
  CASE;

  // IF LCL.Weight Prod 2 USR is Not equal zero
  IF LCL.Weight_Prod_2_USR <> *ZERO;

  // OR LCL.YDL Yld Comp Weight is Not equal zero
  OR LCL.YDL_Yld_Comp_Weight <> *ZERO;

  // Compute:BISIRLOIN STD %
  PAR.YDL_Yld_Standard_Pct = ( ( LCL.YDL_Yld_Comp_Weight * .1714 'H' ) / ( (
  LCL.Weight_Prod_2_USR * 2 'H' ) + LCL.YDL_Yld_Comp_Weight ) * 'H' ) * 100;

  ENDIF;

  // IF PAR.Yld Component Code is Bone Less Sirloin
  IF PAR.Yld_Component_Code = 'BLSSIRLOIN';

  //?Std% =(blsComp wgt*.0857)/((bi Sirloin comp wgt/2) + Bls sirloin comp wgt)
  //? Perform if weights arent zero
  CASE;

  // IF LCL.Weight Prod 2 USR is Not equal zero
  IF LCL.Weight_Prod_2_USR <> *ZERO;

  // OR LCL.YDL Yld Comp Weight is Not equal zero
  OR LCL.YDL_Yld_Comp_Weight <> *ZERO;

  // Compute:BLSSIRLOIN STD %
  PAR.YDL_Yld_Standard_Pct = ( ( LCL.YDL_Yld_Comp_Weight * .0857 'H' ) / ( (
  LCL.Weight_Prod_2_USR / 2 ) + LCL.YDL_Yld_Comp_Weight ) * 'H' ) * 100 'H';

  ENDIF;

  ENDIF;

 }

 //?STD %  - std from yld comp std file and spec calcs from bom
 // IF DB1.Department Code is Loin Boning
 IF DB1.Department_Code = 'LOINS';

 // AND DB1.Production Line Code is Boning
 AND DB1.Production_Line_Code = 'BONING';

 // AND DB1.Yld Component Code is Shoulder Loin
 AND DB1.Yld_Component_Code = 'SHLDRLOIN';

 // PAR.YDL Yld Standard Pct = PAR.YDL Yld Mix Percent
 PAR.YDL_Yld_Standard_Pct = PAR.YDL_Yld_Mix_Percent;

 //?STD %  - std from yld comp std file and spec calcs from bom
 // IF DB1.Department Code is Loin Boning
 IF DB1.Department_Code = 'LOINS';

 // AND DB1.Production Line Code is Boning
 AND DB1.Production_Line_Code = 'BONING';

 // AND DB1.Yld Component Code is Inedible
 AND DB1.Yld_Component_Code = 'ZINEDIBLE';

 //?Std% = sum(std wt prod*Std Ined % in each Itm BOM for 96309) / (Tot SW)
 EXECUTE FUNCTION(Clc Loin Bng Ined Std IF) TYPE(EXCINTFUN)                      AC1688266;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(PAR.YDL_Yld_Standard_Pct);
 PARAMETER(PAR.Total_Line_Weight);
 {
  //?Execute internal function

  //?07/30/09 PKD Added processing for Multiple Structures for a
  //?             Component.
  // LCL.Weight Prod 1 USR = CON.*ZERO
  LCL.Weight_Prod_1_USR = *ZERO;

  // LCL.Weight Prod 2 USR = CON.*ZERO
  LCL.Weight_Prod_2_USR = *ZERO;

  // PAR.Yld Component Code = CND.Boneless Loin-Strap On
  PAR.Yld_Component_Code = 'BNLSSTRON';

  EXECUTE FUNCTION(Rtv Component Info    RT) TYPE(RTVOBJ) FILE(POCZREP)           AC1669682;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Yld_Component_Code);
  PARAMETER(WRK.PLYC_Type);
  PARAMETER(WRK.PLYC_Percent_of_Weight);
  PARAMETER(WRK.PLYC_Comment);
  PARAMETER(WRK.Credit_Item_Inc_Exc_Sts);
  PARAMETER(WRK.Type_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Type_Code);
  PARAMETER(WRK.Group_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Group_Code);
  PARAMETER(WRK.Class_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Class_Code);
  PARAMETER(WRK.YC_Required_Sts);
  PARAMETER(WRK.YC_Component_Group);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.PLYC Type is Retrieve w/Mult Item Str
  IF WRK.PLYC_Type = 'MS';

  EXECUTE FUNCTION(Rtv Loin Bng Ined Std RT) TYPE(RTVOBJ) FILE(PMAQREP)           AC1948991;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Yld_Component_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(WRK.Credit_Item_Inc_Exc_Sts);
  PARAMETER(LCL.Weight_Prod_1_USR);
  PARAMETER(LCL.Weight_Prod_2_USR);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Rtv Loin Bng Ined Std RT) TYPE(RTVOBJ) FILE(POCPCPP)           AC1688269;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Department_Code);
   PARAMETER(DB1.Production_Line_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Production_Shift);
   PARAMETER(PAR.Credit_Item_Inc_Exc_Sts);
   PARAMETER(DB1.Type_Inc_Exc_Sts);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(DB1.Group_Inc_Exc_Sts);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Class_Inc_Exc_Sts);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(PAR.Weight_Prod_1_USR);
   PARAMETER(PAR.Weight_Prod_2_USR);
   {
    //?USER: Process Data record

    // PGM.*Record selected = CND.*YES
    PGM.*Record_selected = 'Y';

    //?SEL:  Credit Items
    CASE;

    // IF PAR.Credit Item Inc/Exc Sts is Entered
    IF PAR.Credit_Item_Inc_Exc_Sts = 'E'/'I';

    CASE;

    // IF PAR.Credit Item Inc/Exc Sts is Include
    IF PAR.Credit_Item_Inc_Exc_Sts = 'I';

    CASE;

    // IF DB1.Credit Item Status is no
    IF DB1.Credit_Item_Status = 'N';

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Credit Item Inc/Exc Sts is Exclude
    IF PAR.Credit_Item_Inc_Exc_Sts = 'E';

    CASE;

    // IF DB1.Credit Item Status is yes
    IF DB1.Credit_Item_Status = 'Y';

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    //?SEL:  Type
    CASE;

    // IF PAR.Item Structure Type Code is Entered
    IF PAR.Item_Structure_Type_Code <> *ZERO;

    CASE;

    // IF PAR.Type Inc/Exc Sts is Include
    IF PAR.Type_Inc_Exc_Sts = 'I';

    CASE;

    // IF PAR.Item Structure Type Code NE DB1.Item Structure Type Code
    IF PAR.Item_Structure_Type_Code <> DB1.Item_Structure_Type_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Type Inc/Exc Sts is Exclude
    IF PAR.Type_Inc_Exc_Sts = 'E';

    CASE;

    // IF PAR.Item Structure Type Code EQ DB1.Item Structure Type Code
    IF PAR.Item_Structure_Type_Code = DB1.Item_Structure_Type_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    //?SEL:  Group
    CASE;

    // IF PAR.Item Structure Group Code is Entered
    IF PAR.Item_Structure_Group_Code <> *ZERO;

    CASE;

    // IF PAR.Group Inc/Exc Sts is Include
    IF PAR.Group_Inc_Exc_Sts = 'I';

    CASE;

    // IF PAR.Item Structure Group Code NE DB1.Item Structure Group Code
    IF PAR.Item_Structure_Group_Code <> DB1.Item_Structure_Group_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Group Inc/Exc Sts is Exclude
    IF PAR.Group_Inc_Exc_Sts = 'E';

    CASE;

    // IF PAR.Item Structure Group Code EQ DB1.Item Structure Group Code
    IF PAR.Item_Structure_Group_Code = DB1.Item_Structure_Group_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    //?SEL:  Class
    CASE;

    // IF PAR.Item Structure Class Code is Entered
    IF PAR.Item_Structure_Class_Code <> *ZERO;

    CASE;

    // IF PAR.Class Inc/Exc Sts is Include
    IF PAR.Class_Inc_Exc_Sts = 'I';

    CASE;

    // IF PAR.Item Structure Class Code NE DB1.Item Structure Class Code
    IF PAR.Item_Structure_Class_Code <> DB1.Item_Structure_Class_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Class Inc/Exc Sts is Exclude
    IF PAR.Class_Inc_Exc_Sts = 'E';

    CASE;

    // IF PAR.Item Structure Class Code EQ DB1.Item Structure Class Code
    IF PAR.Item_Structure_Class_Code = DB1.Item_Structure_Class_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    CASE;

    // IF PGM.*Record selected is *YES
    IF PGM.*Record_selected = 'Y';

    //?Sales Yield
    CASE;

    // IF DB1.Item Code is Bone Ls Loin
    IF DB1.Item_Code = 80025;

    EXECUTE FUNCTION(Rtv Bone In Zone Wgt  RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1688369;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Department_Code);
    PARAMETER(DB1.Production_Line_Code);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Production_Shift);
    PARAMETER(LCL.Bone_In_Zone_Avg_Loin_Wgt);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF DB1.Yld Transaction Pieces is NE Zeros
    IF DB1.Yld_Transaction_Pieces <> *ZERO;

    // AND LCL.Bone In Zone Avg Loin Wgt is GT Zero
    AND LCL.Bone_In_Zone_Avg_Loin_Wgt > *ZERO;

    // 80025 Sales Yield
    LCL.Sales_Yield = ( ( DB1.Yld_Transaction_Weight / DB1.Yld_Transaction_Pieces 'H' )
    / LCL.Bone_In_Zone_Avg_Loin_Wgt ) * 100;

    ENDIF;

    //?Sales Yield
    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(Rtv Item Sales Yield  RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1685363;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Item_Code);
    PARAMETER(LCL.Sales_Yield);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    ENDIF;

    CASE;

    // IF LCL.Sales Yield is not equal to zeros
    IF LCL.Sales_Yield <> *ZERO;

    // Compute:Std wt
    WRK.Unused_Weight_Rate_1 = DB1.Yld_Transaction_Weight / ( LCL.Sales_Yield / 100 ) 'H';

    ENDIF;

    EXECUTE FUNCTION(Rtv Item Sales Yield  RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1685363;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(96309);
    PARAMETER(LCL.Sales_Yield);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF LCL.Sales Yield is not equal to zeros
    IF LCL.Sales_Yield <> *ZERO;

    // Accum Ined Yld for items
    PAR.Weight_Prod_1_USR = ( WRK.Unused_Weight_Rate_1 * ( LCL.Sales_Yield / 100 ) + )
    + PAR.Weight_Prod_1_USR;

    ENDIF;

    ENDIF;

    // PAR.Weight Prod 2 USR = PAR.Weight Prod 2 USR + DB1.Yld Transaction Weight
    PAR.Weight_Prod_2_USR = PAR.Weight_Prod_2_USR + DB1.Yld_Transaction_Weight;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Loin Bng Ined Std RT) TYPE(RTVOBJ) FILE(POCPCPP)           AC1688269;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(WRK.Credit_Item_Inc_Exc_Sts);
  PARAMETER(WRK.Type_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Type_Code);
  PARAMETER(WRK.Group_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Group_Code);
  PARAMETER(WRK.Class_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Class_Code);
  PARAMETER(LCL.Weight_Prod_1_USR);
  PARAMETER(LCL.Weight_Prod_2_USR);
  {
   //?USER: Process Data record

   // PGM.*Record selected = CND.*YES
   PGM.*Record_selected = 'Y';

   //?SEL:  Credit Items
   CASE;

   // IF PAR.Credit Item Inc/Exc Sts is Entered
   IF PAR.Credit_Item_Inc_Exc_Sts = 'E'/'I';

   CASE;

   // IF PAR.Credit Item Inc/Exc Sts is Include
   IF PAR.Credit_Item_Inc_Exc_Sts = 'I';

   CASE;

   // IF DB1.Credit Item Status is no
   IF DB1.Credit_Item_Status = 'N';

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Credit Item Inc/Exc Sts is Exclude
   IF PAR.Credit_Item_Inc_Exc_Sts = 'E';

   CASE;

   // IF DB1.Credit Item Status is yes
   IF DB1.Credit_Item_Status = 'Y';

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   //?SEL:  Type
   CASE;

   // IF PAR.Item Structure Type Code is Entered
   IF PAR.Item_Structure_Type_Code <> *ZERO;

   CASE;

   // IF PAR.Type Inc/Exc Sts is Include
   IF PAR.Type_Inc_Exc_Sts = 'I';

   CASE;

   // IF PAR.Item Structure Type Code NE DB1.Item Structure Type Code
   IF PAR.Item_Structure_Type_Code <> DB1.Item_Structure_Type_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Type Inc/Exc Sts is Exclude
   IF PAR.Type_Inc_Exc_Sts = 'E';

   CASE;

   // IF PAR.Item Structure Type Code EQ DB1.Item Structure Type Code
   IF PAR.Item_Structure_Type_Code = DB1.Item_Structure_Type_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   //?SEL:  Group
   CASE;

   // IF PAR.Item Structure Group Code is Entered
   IF PAR.Item_Structure_Group_Code <> *ZERO;

   CASE;

   // IF PAR.Group Inc/Exc Sts is Include
   IF PAR.Group_Inc_Exc_Sts = 'I';

   CASE;

   // IF PAR.Item Structure Group Code NE DB1.Item Structure Group Code
   IF PAR.Item_Structure_Group_Code <> DB1.Item_Structure_Group_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Group Inc/Exc Sts is Exclude
   IF PAR.Group_Inc_Exc_Sts = 'E';

   CASE;

   // IF PAR.Item Structure Group Code EQ DB1.Item Structure Group Code
   IF PAR.Item_Structure_Group_Code = DB1.Item_Structure_Group_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   //?SEL:  Class
   CASE;

   // IF PAR.Item Structure Class Code is Entered
   IF PAR.Item_Structure_Class_Code <> *ZERO;

   CASE;

   // IF PAR.Class Inc/Exc Sts is Include
   IF PAR.Class_Inc_Exc_Sts = 'I';

   CASE;

   // IF PAR.Item Structure Class Code NE DB1.Item Structure Class Code
   IF PAR.Item_Structure_Class_Code <> DB1.Item_Structure_Class_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Class Inc/Exc Sts is Exclude
   IF PAR.Class_Inc_Exc_Sts = 'E';

   CASE;

   // IF PAR.Item Structure Class Code EQ DB1.Item Structure Class Code
   IF PAR.Item_Structure_Class_Code = DB1.Item_Structure_Class_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   CASE;

   // IF PGM.*Record selected is *YES
   IF PGM.*Record_selected = 'Y';

   //?Sales Yield
   CASE;

   // IF DB1.Item Code is Bone Ls Loin
   IF DB1.Item_Code = 80025;

   EXECUTE FUNCTION(Rtv Bone In Zone Wgt  RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1688369;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Department_Code);
   PARAMETER(DB1.Production_Line_Code);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Production_Shift);
   PARAMETER(LCL.Bone_In_Zone_Avg_Loin_Wgt);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF DB1.Yld Transaction Pieces is NE Zeros
   IF DB1.Yld_Transaction_Pieces <> *ZERO;

   // AND LCL.Bone In Zone Avg Loin Wgt is GT Zero
   AND LCL.Bone_In_Zone_Avg_Loin_Wgt > *ZERO;

   // 80025 Sales Yield
   LCL.Sales_Yield = ( ( DB1.Yld_Transaction_Weight / DB1.Yld_Transaction_Pieces 'H' )
   / LCL.Bone_In_Zone_Avg_Loin_Wgt ) * 100;

   ENDIF;

   //?Sales Yield
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Rtv Item Sales Yield  RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1685363;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Sales_Yield);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

   CASE;

   // IF LCL.Sales Yield is not equal to zeros
   IF LCL.Sales_Yield <> *ZERO;

   // Compute:Std wt
   WRK.Unused_Weight_Rate_1 = DB1.Yld_Transaction_Weight / ( LCL.Sales_Yield / 100 ) 'H';

   ENDIF;

   EXECUTE FUNCTION(Rtv Item Sales Yield  RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1685363;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(96309);
   PARAMETER(LCL.Sales_Yield);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.Sales Yield is not equal to zeros
   IF LCL.Sales_Yield <> *ZERO;

   // Accum Ined Yld for items
   PAR.Weight_Prod_1_USR = ( WRK.Unused_Weight_Rate_1 * ( LCL.Sales_Yield / 100 ) + )
   + PAR.Weight_Prod_1_USR;

   ENDIF;

   ENDIF;

   // PAR.Weight Prod 2 USR = PAR.Weight Prod 2 USR + DB1.Yld Transaction Weight
   PAR.Weight_Prod_2_USR = PAR.Weight_Prod_2_USR + DB1.Yld_Transaction_Weight;

  }

  ENDIF;

  // PAR.Yld Component Code = CND.Boneless Loin-Strap Off
  PAR.Yld_Component_Code = 'BNLSSTROFF';

  EXECUTE FUNCTION(Rtv Component Info    RT) TYPE(RTVOBJ) FILE(POCZREP)           AC1669682;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Yld_Component_Code);
  PARAMETER(WRK.PLYC_Type);
  PARAMETER(WRK.PLYC_Percent_of_Weight);
  PARAMETER(WRK.PLYC_Comment);
  PARAMETER(WRK.Credit_Item_Inc_Exc_Sts);
  PARAMETER(WRK.Type_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Type_Code);
  PARAMETER(WRK.Group_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Group_Code);
  PARAMETER(WRK.Class_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Class_Code);
  PARAMETER(WRK.YC_Required_Sts);
  PARAMETER(WRK.YC_Component_Group);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.PLYC Type is Retrieve w/Mult Item Str
  IF WRK.PLYC_Type = 'MS';

  EXECUTE FUNCTION(Rtv Loin Bng Ined Std RT) TYPE(RTVOBJ) FILE(PMAQREP)           AC1948991;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Yld_Component_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(WRK.Credit_Item_Inc_Exc_Sts);
  PARAMETER(LCL.Weight_Prod_1_USR);
  PARAMETER(LCL.Weight_Prod_2_USR);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Rtv Loin Bng Ined Std RT) TYPE(RTVOBJ) FILE(POCPCPP)           AC1688269;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Department_Code);
   PARAMETER(DB1.Production_Line_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Production_Shift);
   PARAMETER(PAR.Credit_Item_Inc_Exc_Sts);
   PARAMETER(DB1.Type_Inc_Exc_Sts);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(DB1.Group_Inc_Exc_Sts);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Class_Inc_Exc_Sts);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(PAR.Weight_Prod_1_USR);
   PARAMETER(PAR.Weight_Prod_2_USR);
   {
    //?USER: Process Data record

    // PGM.*Record selected = CND.*YES
    PGM.*Record_selected = 'Y';

    //?SEL:  Credit Items
    CASE;

    // IF PAR.Credit Item Inc/Exc Sts is Entered
    IF PAR.Credit_Item_Inc_Exc_Sts = 'E'/'I';

    CASE;

    // IF PAR.Credit Item Inc/Exc Sts is Include
    IF PAR.Credit_Item_Inc_Exc_Sts = 'I';

    CASE;

    // IF DB1.Credit Item Status is no
    IF DB1.Credit_Item_Status = 'N';

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Credit Item Inc/Exc Sts is Exclude
    IF PAR.Credit_Item_Inc_Exc_Sts = 'E';

    CASE;

    // IF DB1.Credit Item Status is yes
    IF DB1.Credit_Item_Status = 'Y';

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    //?SEL:  Type
    CASE;

    // IF PAR.Item Structure Type Code is Entered
    IF PAR.Item_Structure_Type_Code <> *ZERO;

    CASE;

    // IF PAR.Type Inc/Exc Sts is Include
    IF PAR.Type_Inc_Exc_Sts = 'I';

    CASE;

    // IF PAR.Item Structure Type Code NE DB1.Item Structure Type Code
    IF PAR.Item_Structure_Type_Code <> DB1.Item_Structure_Type_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Type Inc/Exc Sts is Exclude
    IF PAR.Type_Inc_Exc_Sts = 'E';

    CASE;

    // IF PAR.Item Structure Type Code EQ DB1.Item Structure Type Code
    IF PAR.Item_Structure_Type_Code = DB1.Item_Structure_Type_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    //?SEL:  Group
    CASE;

    // IF PAR.Item Structure Group Code is Entered
    IF PAR.Item_Structure_Group_Code <> *ZERO;

    CASE;

    // IF PAR.Group Inc/Exc Sts is Include
    IF PAR.Group_Inc_Exc_Sts = 'I';

    CASE;

    // IF PAR.Item Structure Group Code NE DB1.Item Structure Group Code
    IF PAR.Item_Structure_Group_Code <> DB1.Item_Structure_Group_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Group Inc/Exc Sts is Exclude
    IF PAR.Group_Inc_Exc_Sts = 'E';

    CASE;

    // IF PAR.Item Structure Group Code EQ DB1.Item Structure Group Code
    IF PAR.Item_Structure_Group_Code = DB1.Item_Structure_Group_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    //?SEL:  Class
    CASE;

    // IF PAR.Item Structure Class Code is Entered
    IF PAR.Item_Structure_Class_Code <> *ZERO;

    CASE;

    // IF PAR.Class Inc/Exc Sts is Include
    IF PAR.Class_Inc_Exc_Sts = 'I';

    CASE;

    // IF PAR.Item Structure Class Code NE DB1.Item Structure Class Code
    IF PAR.Item_Structure_Class_Code <> DB1.Item_Structure_Class_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Class Inc/Exc Sts is Exclude
    IF PAR.Class_Inc_Exc_Sts = 'E';

    CASE;

    // IF PAR.Item Structure Class Code EQ DB1.Item Structure Class Code
    IF PAR.Item_Structure_Class_Code = DB1.Item_Structure_Class_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    CASE;

    // IF PGM.*Record selected is *YES
    IF PGM.*Record_selected = 'Y';

    //?Sales Yield
    CASE;

    // IF DB1.Item Code is Bone Ls Loin
    IF DB1.Item_Code = 80025;

    EXECUTE FUNCTION(Rtv Bone In Zone Wgt  RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1688369;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Department_Code);
    PARAMETER(DB1.Production_Line_Code);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Production_Shift);
    PARAMETER(LCL.Bone_In_Zone_Avg_Loin_Wgt);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF DB1.Yld Transaction Pieces is NE Zeros
    IF DB1.Yld_Transaction_Pieces <> *ZERO;

    // AND LCL.Bone In Zone Avg Loin Wgt is GT Zero
    AND LCL.Bone_In_Zone_Avg_Loin_Wgt > *ZERO;

    // 80025 Sales Yield
    LCL.Sales_Yield = ( ( DB1.Yld_Transaction_Weight / DB1.Yld_Transaction_Pieces 'H' )
    / LCL.Bone_In_Zone_Avg_Loin_Wgt ) * 100;

    ENDIF;

    //?Sales Yield
    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(Rtv Item Sales Yield  RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1685363;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Item_Code);
    PARAMETER(LCL.Sales_Yield);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    ENDIF;

    CASE;

    // IF LCL.Sales Yield is not equal to zeros
    IF LCL.Sales_Yield <> *ZERO;

    // Compute:Std wt
    WRK.Unused_Weight_Rate_1 = DB1.Yld_Transaction_Weight / ( LCL.Sales_Yield / 100 ) 'H';

    ENDIF;

    EXECUTE FUNCTION(Rtv Item Sales Yield  RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1685363;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(96309);
    PARAMETER(LCL.Sales_Yield);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF LCL.Sales Yield is not equal to zeros
    IF LCL.Sales_Yield <> *ZERO;

    // Accum Ined Yld for items
    PAR.Weight_Prod_1_USR = ( WRK.Unused_Weight_Rate_1 * ( LCL.Sales_Yield / 100 ) + )
    + PAR.Weight_Prod_1_USR;

    ENDIF;

    ENDIF;

    // PAR.Weight Prod 2 USR = PAR.Weight Prod 2 USR + DB1.Yld Transaction Weight
    PAR.Weight_Prod_2_USR = PAR.Weight_Prod_2_USR + DB1.Yld_Transaction_Weight;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Loin Bng Ined Std RT) TYPE(RTVOBJ) FILE(POCPCPP)           AC1688269;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(WRK.Credit_Item_Inc_Exc_Sts);
  PARAMETER(WRK.Type_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Type_Code);
  PARAMETER(WRK.Group_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Group_Code);
  PARAMETER(WRK.Class_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Class_Code);
  PARAMETER(LCL.Weight_Prod_1_USR);
  PARAMETER(LCL.Weight_Prod_2_USR);
  {
   //?USER: Process Data record

   // PGM.*Record selected = CND.*YES
   PGM.*Record_selected = 'Y';

   //?SEL:  Credit Items
   CASE;

   // IF PAR.Credit Item Inc/Exc Sts is Entered
   IF PAR.Credit_Item_Inc_Exc_Sts = 'E'/'I';

   CASE;

   // IF PAR.Credit Item Inc/Exc Sts is Include
   IF PAR.Credit_Item_Inc_Exc_Sts = 'I';

   CASE;

   // IF DB1.Credit Item Status is no
   IF DB1.Credit_Item_Status = 'N';

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Credit Item Inc/Exc Sts is Exclude
   IF PAR.Credit_Item_Inc_Exc_Sts = 'E';

   CASE;

   // IF DB1.Credit Item Status is yes
   IF DB1.Credit_Item_Status = 'Y';

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   //?SEL:  Type
   CASE;

   // IF PAR.Item Structure Type Code is Entered
   IF PAR.Item_Structure_Type_Code <> *ZERO;

   CASE;

   // IF PAR.Type Inc/Exc Sts is Include
   IF PAR.Type_Inc_Exc_Sts = 'I';

   CASE;

   // IF PAR.Item Structure Type Code NE DB1.Item Structure Type Code
   IF PAR.Item_Structure_Type_Code <> DB1.Item_Structure_Type_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Type Inc/Exc Sts is Exclude
   IF PAR.Type_Inc_Exc_Sts = 'E';

   CASE;

   // IF PAR.Item Structure Type Code EQ DB1.Item Structure Type Code
   IF PAR.Item_Structure_Type_Code = DB1.Item_Structure_Type_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   //?SEL:  Group
   CASE;

   // IF PAR.Item Structure Group Code is Entered
   IF PAR.Item_Structure_Group_Code <> *ZERO;

   CASE;

   // IF PAR.Group Inc/Exc Sts is Include
   IF PAR.Group_Inc_Exc_Sts = 'I';

   CASE;

   // IF PAR.Item Structure Group Code NE DB1.Item Structure Group Code
   IF PAR.Item_Structure_Group_Code <> DB1.Item_Structure_Group_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Group Inc/Exc Sts is Exclude
   IF PAR.Group_Inc_Exc_Sts = 'E';

   CASE;

   // IF PAR.Item Structure Group Code EQ DB1.Item Structure Group Code
   IF PAR.Item_Structure_Group_Code = DB1.Item_Structure_Group_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   //?SEL:  Class
   CASE;

   // IF PAR.Item Structure Class Code is Entered
   IF PAR.Item_Structure_Class_Code <> *ZERO;

   CASE;

   // IF PAR.Class Inc/Exc Sts is Include
   IF PAR.Class_Inc_Exc_Sts = 'I';

   CASE;

   // IF PAR.Item Structure Class Code NE DB1.Item Structure Class Code
   IF PAR.Item_Structure_Class_Code <> DB1.Item_Structure_Class_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Class Inc/Exc Sts is Exclude
   IF PAR.Class_Inc_Exc_Sts = 'E';

   CASE;

   // IF PAR.Item Structure Class Code EQ DB1.Item Structure Class Code
   IF PAR.Item_Structure_Class_Code = DB1.Item_Structure_Class_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   CASE;

   // IF PGM.*Record selected is *YES
   IF PGM.*Record_selected = 'Y';

   //?Sales Yield
   CASE;

   // IF DB1.Item Code is Bone Ls Loin
   IF DB1.Item_Code = 80025;

   EXECUTE FUNCTION(Rtv Bone In Zone Wgt  RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1688369;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Department_Code);
   PARAMETER(DB1.Production_Line_Code);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Production_Shift);
   PARAMETER(LCL.Bone_In_Zone_Avg_Loin_Wgt);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF DB1.Yld Transaction Pieces is NE Zeros
   IF DB1.Yld_Transaction_Pieces <> *ZERO;

   // AND LCL.Bone In Zone Avg Loin Wgt is GT Zero
   AND LCL.Bone_In_Zone_Avg_Loin_Wgt > *ZERO;

   // 80025 Sales Yield
   LCL.Sales_Yield = ( ( DB1.Yld_Transaction_Weight / DB1.Yld_Transaction_Pieces 'H' )
   / LCL.Bone_In_Zone_Avg_Loin_Wgt ) * 100;

   ENDIF;

   //?Sales Yield
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Rtv Item Sales Yield  RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1685363;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Sales_Yield);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

   CASE;

   // IF LCL.Sales Yield is not equal to zeros
   IF LCL.Sales_Yield <> *ZERO;

   // Compute:Std wt
   WRK.Unused_Weight_Rate_1 = DB1.Yld_Transaction_Weight / ( LCL.Sales_Yield / 100 ) 'H';

   ENDIF;

   EXECUTE FUNCTION(Rtv Item Sales Yield  RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1685363;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(96309);
   PARAMETER(LCL.Sales_Yield);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.Sales Yield is not equal to zeros
   IF LCL.Sales_Yield <> *ZERO;

   // Accum Ined Yld for items
   PAR.Weight_Prod_1_USR = ( WRK.Unused_Weight_Rate_1 * ( LCL.Sales_Yield / 100 ) + )
   + PAR.Weight_Prod_1_USR;

   ENDIF;

   ENDIF;

   // PAR.Weight Prod 2 USR = PAR.Weight Prod 2 USR + DB1.Yld Transaction Weight
   PAR.Weight_Prod_2_USR = PAR.Weight_Prod_2_USR + DB1.Yld_Transaction_Weight;

  }

  ENDIF;

  // Compute: Ined Yld Std Pct
  PAR.YDL_Yld_Standard_Pct = ( LCL.Weight_Prod_1_USR / PAR.Total_Line_Weight 'H' ) * 100
  'H';

 }

 //?STD %  - std from yld comp std file and spec calcs from bom
 // IF DB1.Department Code is Belly
 IF ( DB1.Department_Code = 'BELLY';

 // AND DB1.Production Line Code is Sheet Belly
 AND DB1.Production_Line_Code = 'SHTBEL';

 // AND DB1.Yld Component Code is Finished
 AND DB1.Yld_Component_Code = 'FINISHED' );

 // OR DB1.Department Code is Belly
 OR ( DB1.Department_Code = 'BELLY';

 // AND DB1.Production Line Code is Single Rib
 AND DB1.Production_Line_Code = 'SGLRIB';

 // AND DB1.Yld Component Code is Finished
 AND DB1.Yld_Component_Code = 'FINISHED' );

 EXECUTE FUNCTION(Clc Skinls Finish Std IF) TYPE(EXCINTFUN)                      AC1685406;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER('FINISHED');
 PARAMETER(PAR.YDL_Yld_Standard_Pct);
 PARAMETER(PAR.Total_Line_Weight);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Component Info    RT) TYPE(RTVOBJ) FILE(POCZREP)           AC1669682;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Yld_Component_Code);
  PARAMETER(LCL.PLYC_Type);
  PARAMETER(WRK.PLYC_Percent_of_Weight);
  PARAMETER(WRK.PLYC_Comment);
  PARAMETER(LCL.Credit_Item_Inc_Exc_Sts);
  PARAMETER(WRK.Type_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Type_Code);
  PARAMETER(WRK.Group_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Group_Code);
  PARAMETER(WRK.Class_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Class_Code);
  PARAMETER(WRK.YC_Required_Sts);
  PARAMETER(WRK.YC_Component_Group);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.PLYC Type is Retrieve w/Mult Item Str
  IF LCL.PLYC_Type = 'MS';

  EXECUTE FUNCTION(Rtv Skinls Fin Std    RT) TYPE(RTVOBJ) FILE(PMAQREP)           AC1857634;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Yld_Component_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(LCL.Credit_Item_Inc_Exc_Sts);
  PARAMETER(PAR.Start_Weight);
  PARAMETER(PAR.YDL_Yld_Standard_Pct);
  PARAMETER(LCL.Unused_Weight_Rate_1);
  PARAMETER(LCL.Weight_Prod_2_USR);
  {
   //?USER: Initialize routine

   // PAR.Unused Weight Rate 1 = CON.*ZERO
   PAR.Unused_Weight_Rate_1 = *ZERO;

   // PAR.Weight Prod 2 USR = CON.*ZERO
   PAR.Weight_Prod_2_USR = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(Rtv Skinls Fin Std    RT) TYPE(RTVOBJ) FILE(POCPCPP)           AC1685407;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Department_Code);
   PARAMETER(DB1.Production_Line_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Production_Shift);
   PARAMETER(PAR.Credit_Item_Inc_Exc_Sts);
   PARAMETER(DB1.Type_Inc_Exc_Sts);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(DB1.Group_Inc_Exc_Sts);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Class_Inc_Exc_Sts);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(PAR.YDL_Yld_Standard_Pct);
   PARAMETER(PAR.Start_Weight);
   PARAMETER(PAR.Unused_Weight_Rate_1);
   PARAMETER(PAR.Weight_Prod_2_USR);
   {
    //?USER: Initialize routine

    // LCL.Unused Weight Rate 1 = CON.*ZERO
    LCL.Unused_Weight_Rate_1 = *ZERO;

    // LCL.Weight Prod 2 USR = CON.*ZERO
    LCL.Weight_Prod_2_USR = *ZERO;

    // PAR.YDL Yld Standard Pct = CON.*ZERO
    PAR.YDL_Yld_Standard_Pct = *ZERO;

    //?USER: Process Data record

    // PGM.*Record selected = CND.*YES
    PGM.*Record_selected = 'Y';

    //?SEL:  Credit Items
    CASE;

    // IF PAR.Credit Item Inc/Exc Sts is Entered
    IF PAR.Credit_Item_Inc_Exc_Sts = 'E'/'I';

    CASE;

    // IF PAR.Credit Item Inc/Exc Sts is Include
    IF PAR.Credit_Item_Inc_Exc_Sts = 'I';

    CASE;

    // IF DB1.Credit Item Status is no
    IF DB1.Credit_Item_Status = 'N';

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Credit Item Inc/Exc Sts is Exclude
    IF PAR.Credit_Item_Inc_Exc_Sts = 'E';

    CASE;

    // IF DB1.Credit Item Status is yes
    IF DB1.Credit_Item_Status = 'Y';

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    //?SEL:  Type
    CASE;

    // IF PAR.Item Structure Type Code is Entered
    IF PAR.Item_Structure_Type_Code <> *ZERO;

    CASE;

    // IF PAR.Type Inc/Exc Sts is Include
    IF PAR.Type_Inc_Exc_Sts = 'I';

    CASE;

    // IF PAR.Item Structure Type Code NE DB1.Item Structure Type Code
    IF PAR.Item_Structure_Type_Code <> DB1.Item_Structure_Type_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Type Inc/Exc Sts is Exclude
    IF PAR.Type_Inc_Exc_Sts = 'E';

    CASE;

    // IF PAR.Item Structure Type Code EQ DB1.Item Structure Type Code
    IF PAR.Item_Structure_Type_Code = DB1.Item_Structure_Type_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    //?SEL:  Group
    CASE;

    // IF PAR.Item Structure Group Code is Entered
    IF PAR.Item_Structure_Group_Code <> *ZERO;

    CASE;

    // IF PAR.Group Inc/Exc Sts is Include
    IF PAR.Group_Inc_Exc_Sts = 'I';

    CASE;

    // IF PAR.Item Structure Group Code NE DB1.Item Structure Group Code
    IF PAR.Item_Structure_Group_Code <> DB1.Item_Structure_Group_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Group Inc/Exc Sts is Exclude
    IF PAR.Group_Inc_Exc_Sts = 'E';

    CASE;

    // IF PAR.Item Structure Group Code EQ DB1.Item Structure Group Code
    IF PAR.Item_Structure_Group_Code = DB1.Item_Structure_Group_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    //?SEL:  Class
    CASE;

    // IF PAR.Item Structure Class Code is Entered
    IF PAR.Item_Structure_Class_Code <> *ZERO;

    CASE;

    // IF PAR.Class Inc/Exc Sts is Include
    IF PAR.Class_Inc_Exc_Sts = 'I';

    CASE;

    // IF PAR.Item Structure Class Code NE DB1.Item Structure Class Code
    IF PAR.Item_Structure_Class_Code <> DB1.Item_Structure_Class_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    // IF PAR.Class Inc/Exc Sts is Exclude
    IF PAR.Class_Inc_Exc_Sts = 'E';

    CASE;

    // IF PAR.Item Structure Class Code EQ DB1.Item Structure Class Code
    IF PAR.Item_Structure_Class_Code = DB1.Item_Structure_Class_Code;

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    ENDIF;

    ENDIF;

    ENDIF;

    CASE;

    // IF PGM.*Record selected is *YES
    IF PGM.*Record_selected = 'Y';

    EXECUTE FUNCTION(Rtv Item Sales Yield  RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1685363;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Item_Code);
    PARAMETER(LCL.Sales_Yield);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?Loin Boning : Calc 80025 Sales Yld from wgt, pieces, and avg zone wgt
    CASE;

    // IF DB1.Item Code is Bone Ls Loin
    IF DB1.Item_Code = 80025;

    EXECUTE FUNCTION(Rtv Bone In Zone Wgt  RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1688369;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Department_Code);
    PARAMETER(DB1.Production_Line_Code);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Production_Shift);
    PARAMETER(LCL.Bone_In_Zone_Avg_Loin_Wgt);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF DB1.Yld Transaction Pieces is NE Zeros
    IF DB1.Yld_Transaction_Pieces <> *ZERO;

    // AND LCL.Bone In Zone Avg Loin Wgt is GT Zero
    AND LCL.Bone_In_Zone_Avg_Loin_Wgt > *ZERO;

    // 80025 Sales Yield
    LCL.Sales_Yield = ( ( DB1.Yld_Transaction_Weight / DB1.Yld_Transaction_Pieces 'H' )
    / LCL.Bone_In_Zone_Avg_Loin_Wgt ) * 100;

    ENDIF;

    ENDIF;

    CASE;

    // IF DB1.Department Code is Belly
    IF DB1.Department_Code = 'BELLY';

    // AND DB1.Production Line Code is Skinless
    AND DB1.Production_Line_Code = 'SKINLS';

    // AND DB1.Item Code is Belly
    AND DB1.Item_Code = 57150;

    //?Adjust belly item 57150 with Heavy Bellies WIP item 2320 deletes
    EXECUTE FUNCTION(Rtv Del Pend f/1 Item RT) TYPE(RTVOBJ) FILE(POCOCPP)           AC1688209;
    PARAMETER(DB1.Company_Number);
    PARAMETER('CUT');
    PARAMETER('BELLY');
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Production_Shift);
    PARAMETER(2320);
    PARAMETER(LCL.Delete_Pending_Wgt);
    {
     //?USER: Process Data record

     // PAR.Delete Pending Wgt = PAR.Delete Pending Wgt + DB1.Delete Pending Wgt
     PAR.Delete_Pending_Wgt = PAR.Delete_Pending_Wgt + DB1.Delete_Pending_Wgt;

    }

    // Compute:total SW
    LCL.Weight_Prod_1_USR = ( ( DB1.Yld_Transaction_Weight - ( LCL.Delete_Pending_Wgt * .77
    'H' ) ) / ( LCL.Sales_Yield / 100 ) + ) + LCL.Delete_Pending_Wgt;

    // Adj Sales Yld for 57150
    LCL.Sales_Yield = ( DB1.Yld_Transaction_Weight / LCL.Weight_Prod_1_USR 'H' ) * 100;

    //?SUM(Standard Start Weight)
    CASE;

    // IF LCL.Sales Yield is not equal to zeros
    IF LCL.Sales_Yield <> *ZERO;

    // Accum Sales Yld for items
    LCL.Unused_Weight_Rate_1 = ( DB1.Yld_Transaction_Weight / ( LCL.Sales_Yield / 100 )
    + 'H' ) + LCL.Unused_Weight_Rate_1;

    ENDIF;

    // LCL.Weight Prod 2 USR = LCL.Weight Prod 2 USR + DB1.Yld Transaction Weight
    LCL.Weight_Prod_2_USR = LCL.Weight_Prod_2_USR + DB1.Yld_Transaction_Weight;

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?SUM(Standard Start Weight)
    CASE;

    // IF LCL.Sales Yield is not equal to zeros
    IF LCL.Sales_Yield <> *ZERO;

    // Accum Sales Yld for items
    LCL.Unused_Weight_Rate_1 = ( DB1.Yld_Transaction_Weight / ( LCL.Sales_Yield / 100 )
    + 'H' ) + LCL.Unused_Weight_Rate_1;

    ENDIF;

    // LCL.Weight Prod 2 USR = LCL.Weight Prod 2 USR + DB1.Yld Transaction Weight
    LCL.Weight_Prod_2_USR = LCL.Weight_Prod_2_USR + DB1.Yld_Transaction_Weight;

    ENDIF;

    ENDIF;

    //?USER: Exit processing

    CASE;

    // IF LCL.Unused Weight Rate 1 is Greater than zero
    IF LCL.Unused_Weight_Rate_1 > *ZERO;

    // Compute:Std Pct
    PAR.YDL_Yld_Standard_Pct = ( LCL.Weight_Prod_2_USR / LCL.Unused_Weight_Rate_1 'H' ) * 100
    'H';

    ENDIF;

    // PAR.Unused Weight Rate 1 = PAR.Unused Weight Rate 1 + LCL.Unused Weight Rate 1
    PAR.Unused_Weight_Rate_1 = PAR.Unused_Weight_Rate_1 + LCL.Unused_Weight_Rate_1;

    // PAR.Weight Prod 2 USR = PAR.Weight Prod 2 USR + LCL.Weight Prod 2 USR
    PAR.Weight_Prod_2_USR = PAR.Weight_Prod_2_USR + LCL.Weight_Prod_2_USR;

   }

   //?USER: Exit processing

   CASE;

   // IF PAR.Unused Weight Rate 1 is Greater than zero
   IF PAR.Unused_Weight_Rate_1 > *ZERO;

   // Compute:Std Pct
   PAR.YDL_Yld_Standard_Pct = ( PAR.Weight_Prod_2_USR / PAR.Unused_Weight_Rate_1 'H' ) * 100
   'H';

   ENDIF;

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Skinls Fin Std    RT) TYPE(RTVOBJ) FILE(POCPCPP)           AC1685407;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(LCL.Credit_Item_Inc_Exc_Sts);
  PARAMETER(WRK.Type_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Type_Code);
  PARAMETER(WRK.Group_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Group_Code);
  PARAMETER(WRK.Class_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Class_Code);
  PARAMETER(PAR.YDL_Yld_Standard_Pct);
  PARAMETER(PAR.Start_Weight);
  PARAMETER(LCL.Unused_Weight_Rate_1);
  PARAMETER(LCL.Weight_Prod_2_USR);
  {
   //?USER: Initialize routine

   // LCL.Unused Weight Rate 1 = CON.*ZERO
   LCL.Unused_Weight_Rate_1 = *ZERO;

   // LCL.Weight Prod 2 USR = CON.*ZERO
   LCL.Weight_Prod_2_USR = *ZERO;

   // PAR.YDL Yld Standard Pct = CON.*ZERO
   PAR.YDL_Yld_Standard_Pct = *ZERO;

   //?USER: Process Data record

   // PGM.*Record selected = CND.*YES
   PGM.*Record_selected = 'Y';

   //?SEL:  Credit Items
   CASE;

   // IF PAR.Credit Item Inc/Exc Sts is Entered
   IF PAR.Credit_Item_Inc_Exc_Sts = 'E'/'I';

   CASE;

   // IF PAR.Credit Item Inc/Exc Sts is Include
   IF PAR.Credit_Item_Inc_Exc_Sts = 'I';

   CASE;

   // IF DB1.Credit Item Status is no
   IF DB1.Credit_Item_Status = 'N';

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Credit Item Inc/Exc Sts is Exclude
   IF PAR.Credit_Item_Inc_Exc_Sts = 'E';

   CASE;

   // IF DB1.Credit Item Status is yes
   IF DB1.Credit_Item_Status = 'Y';

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   //?SEL:  Type
   CASE;

   // IF PAR.Item Structure Type Code is Entered
   IF PAR.Item_Structure_Type_Code <> *ZERO;

   CASE;

   // IF PAR.Type Inc/Exc Sts is Include
   IF PAR.Type_Inc_Exc_Sts = 'I';

   CASE;

   // IF PAR.Item Structure Type Code NE DB1.Item Structure Type Code
   IF PAR.Item_Structure_Type_Code <> DB1.Item_Structure_Type_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Type Inc/Exc Sts is Exclude
   IF PAR.Type_Inc_Exc_Sts = 'E';

   CASE;

   // IF PAR.Item Structure Type Code EQ DB1.Item Structure Type Code
   IF PAR.Item_Structure_Type_Code = DB1.Item_Structure_Type_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   //?SEL:  Group
   CASE;

   // IF PAR.Item Structure Group Code is Entered
   IF PAR.Item_Structure_Group_Code <> *ZERO;

   CASE;

   // IF PAR.Group Inc/Exc Sts is Include
   IF PAR.Group_Inc_Exc_Sts = 'I';

   CASE;

   // IF PAR.Item Structure Group Code NE DB1.Item Structure Group Code
   IF PAR.Item_Structure_Group_Code <> DB1.Item_Structure_Group_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Group Inc/Exc Sts is Exclude
   IF PAR.Group_Inc_Exc_Sts = 'E';

   CASE;

   // IF PAR.Item Structure Group Code EQ DB1.Item Structure Group Code
   IF PAR.Item_Structure_Group_Code = DB1.Item_Structure_Group_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   //?SEL:  Class
   CASE;

   // IF PAR.Item Structure Class Code is Entered
   IF PAR.Item_Structure_Class_Code <> *ZERO;

   CASE;

   // IF PAR.Class Inc/Exc Sts is Include
   IF PAR.Class_Inc_Exc_Sts = 'I';

   CASE;

   // IF PAR.Item Structure Class Code NE DB1.Item Structure Class Code
   IF PAR.Item_Structure_Class_Code <> DB1.Item_Structure_Class_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   // IF PAR.Class Inc/Exc Sts is Exclude
   IF PAR.Class_Inc_Exc_Sts = 'E';

   CASE;

   // IF PAR.Item Structure Class Code EQ DB1.Item Structure Class Code
   IF PAR.Item_Structure_Class_Code = DB1.Item_Structure_Class_Code;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   CASE;

   // IF PGM.*Record selected is *YES
   IF PGM.*Record_selected = 'Y';

   EXECUTE FUNCTION(Rtv Item Sales Yield  RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1685363;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Sales_Yield);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Loin Boning : Calc 80025 Sales Yld from wgt, pieces, and avg zone wgt
   CASE;

   // IF DB1.Item Code is Bone Ls Loin
   IF DB1.Item_Code = 80025;

   EXECUTE FUNCTION(Rtv Bone In Zone Wgt  RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1688369;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Department_Code);
   PARAMETER(DB1.Production_Line_Code);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Production_Shift);
   PARAMETER(LCL.Bone_In_Zone_Avg_Loin_Wgt);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF DB1.Yld Transaction Pieces is NE Zeros
   IF DB1.Yld_Transaction_Pieces <> *ZERO;

   // AND LCL.Bone In Zone Avg Loin Wgt is GT Zero
   AND LCL.Bone_In_Zone_Avg_Loin_Wgt > *ZERO;

   // 80025 Sales Yield
   LCL.Sales_Yield = ( ( DB1.Yld_Transaction_Weight / DB1.Yld_Transaction_Pieces 'H' )
   / LCL.Bone_In_Zone_Avg_Loin_Wgt ) * 100;

   ENDIF;

   ENDIF;

   CASE;

   // IF DB1.Department Code is Belly
   IF DB1.Department_Code = 'BELLY';

   // AND DB1.Production Line Code is Skinless
   AND DB1.Production_Line_Code = 'SKINLS';

   // AND DB1.Item Code is Belly
   AND DB1.Item_Code = 57150;

   //?Adjust belly item 57150 with Heavy Bellies WIP item 2320 deletes
   EXECUTE FUNCTION(Rtv Del Pend f/1 Item RT) TYPE(RTVOBJ) FILE(POCOCPP)           AC1688209;
   PARAMETER(DB1.Company_Number);
   PARAMETER('CUT');
   PARAMETER('BELLY');
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Production_Shift);
   PARAMETER(2320);
   PARAMETER(LCL.Delete_Pending_Wgt);
   {
    //?USER: Process Data record

    // PAR.Delete Pending Wgt = PAR.Delete Pending Wgt + DB1.Delete Pending Wgt
    PAR.Delete_Pending_Wgt = PAR.Delete_Pending_Wgt + DB1.Delete_Pending_Wgt;

   }

   // Compute:total SW
   LCL.Weight_Prod_1_USR = ( ( DB1.Yld_Transaction_Weight - ( LCL.Delete_Pending_Wgt * .77
   'H' ) ) / ( LCL.Sales_Yield / 100 ) + ) + LCL.Delete_Pending_Wgt;

   // Adj Sales Yld for 57150
   LCL.Sales_Yield = ( DB1.Yld_Transaction_Weight / LCL.Weight_Prod_1_USR 'H' ) * 100;

   //?SUM(Standard Start Weight)
   CASE;

   // IF LCL.Sales Yield is not equal to zeros
   IF LCL.Sales_Yield <> *ZERO;

   // Accum Sales Yld for items
   LCL.Unused_Weight_Rate_1 = ( DB1.Yld_Transaction_Weight / ( LCL.Sales_Yield / 100 )
   + 'H' ) + LCL.Unused_Weight_Rate_1;

   ENDIF;

   // LCL.Weight Prod 2 USR = LCL.Weight Prod 2 USR + DB1.Yld Transaction Weight
   LCL.Weight_Prod_2_USR = LCL.Weight_Prod_2_USR + DB1.Yld_Transaction_Weight;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?SUM(Standard Start Weight)
   CASE;

   // IF LCL.Sales Yield is not equal to zeros
   IF LCL.Sales_Yield <> *ZERO;

   // Accum Sales Yld for items
   LCL.Unused_Weight_Rate_1 = ( DB1.Yld_Transaction_Weight / ( LCL.Sales_Yield / 100 )
   + 'H' ) + LCL.Unused_Weight_Rate_1;

   ENDIF;

   // LCL.Weight Prod 2 USR = LCL.Weight Prod 2 USR + DB1.Yld Transaction Weight
   LCL.Weight_Prod_2_USR = LCL.Weight_Prod_2_USR + DB1.Yld_Transaction_Weight;

   ENDIF;

   ENDIF;

   //?USER: Exit processing

   CASE;

   // IF LCL.Unused Weight Rate 1 is Greater than zero
   IF LCL.Unused_Weight_Rate_1 > *ZERO;

   // Compute:Std Pct
   PAR.YDL_Yld_Standard_Pct = ( LCL.Weight_Prod_2_USR / LCL.Unused_Weight_Rate_1 'H' ) * 100
   'H';

   ENDIF;

   // PAR.Unused Weight Rate 1 = PAR.Unused Weight Rate 1 + LCL.Unused Weight Rate 1
   PAR.Unused_Weight_Rate_1 = PAR.Unused_Weight_Rate_1 + LCL.Unused_Weight_Rate_1;

   // PAR.Weight Prod 2 USR = PAR.Weight Prod 2 USR + LCL.Weight Prod 2 USR
   PAR.Weight_Prod_2_USR = PAR.Weight_Prod_2_USR + LCL.Weight_Prod_2_USR;

  }

  ENDIF;

 }

 //?STD %  - std from yld comp std file and spec calcs from bom
 //?STD %  - std from yld comp std file and spec calcs from bom
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Component Std     RT) TYPE(RTVOBJ) FILE(PPAGCPP)           AC1684708;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Yld_Component_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(PAR.YDL_Yld_Standard_Pct);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 ENDIF;

 //?Actual - Std Weight Diff
 CASE;

 // IF PAR.YDL Yld Standard Pct is Greater than zero
 IF PAR.YDL_Yld_Standard_Pct > *ZERO;

 // Compute: yld weight diff
 PAR.YDL_Yld_Weight_Diff = ( ( PAR.YDL_Yld_Mix_Percent / 100 ) * PAR.Total_Line_Weight
 'H' ) - ( ( PAR.YDL_Yld_Standard_Pct / 100 ) * PAR.Total_Line_Weight 'H' );

 //?Actual - Std Weight Diff
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.YDL Yld Weight Diff = CON.*ZERO
 PAR.YDL_Yld_Weight_Diff = *ZERO;

 ENDIF;

 EXECUTE FUNCTION(Chg Mix Percent       CH) TYPE(CHGOBJ) FILE(POC0CPP)           AC1670639;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(DB1.Yld_Component_Code);
 PARAMETER(PAR.YDL_Yld_Mix_Percent);
 PARAMETER(PAR.YDL_Yld_Standard_Pct);
 PARAMETER(PAR.YDL_Yld_Weight_Diff);
 PARAMETER(DB1.YDL_Component_Group);
 PARAMETER(DB1.YDL_Unused_Sts_1);
 PARAMETER(DB1.YDL_Unused_Sts_2);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?Save TRIM for later
 CASE;

 // IF DB1.Department Code is Belly
 IF ( DB1.Department_Code = 'BELLY';

 // AND DB1.Production Line Code is Skinless
 AND DB1.Production_Line_Code = 'SKINLS';

 // AND DB1.Yld Component Code is Trim Yield
 AND DB1.Yld_Component_Code = 'TRIMYIELD' );

 // OR DB1.Department Code is Loin Boning
 OR ( DB1.Department_Code = 'LOINS';

 // AND DB1.Production Line Code is Boning
 AND DB1.Production_Line_Code = 'BONING';

 // AND DB1.Yld Component Code is Pork Loin Trimmings
 AND DB1.Yld_Component_Code = 'PLOINTRIM' );

 // LCL.YDL Yld Mix Percent 1 = PAR.YDL Yld Mix Percent
 LCL.YDL_Yld_Mix_Percent_1 = PAR.YDL_Yld_Mix_Percent;

 ENDIF;

 //?USER: Exit processing

 CASE;

 // IF PAR.Department Code is Belly
 IF ( PAR.Department_Code = 'BELLY';

 // AND PAR.Production Line Code is Skinless
 AND PAR.Production_Line_Code = 'SKINLS' );

 // OR PAR.Department Code is Loin Boning
 OR ( PAR.Department_Code = 'LOINS';

 // AND PAR.Production Line Code is Boning
 AND PAR.Production_Line_Code = 'BONING' );

 CASE;

 // IF PAR.Department Code is Belly
 IF PAR.Department_Code = 'BELLY';

 // LCL.Yld Component Code = CND.Trim Yield
 LCL.Yld_Component_Code = 'TRIMYIELD';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Yld Component Code = CND.Pork Loin Trimmings
 LCL.Yld_Component_Code = 'PLOINTRIM';

 ENDIF;

 //?std% = 1 - sum(other comp. std%)
 EXECUTE FUNCTION(Rtv Std %, OMT Trim   RT) TYPE(RTVOBJ) FILE(POC0CPP)           AC1685377;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Production_Line_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Production_Shift);
 PARAMETER(LCL.Yld_Component_Code);
 PARAMETER(LCL.Percent_7_4_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Yld Component Code EQ PAR.Yld Component Code
  IF DB1.Yld_Component_Code = PAR.Yld_Component_Code;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF DB1.Department Code is Loin Boning
  IF DB1.Department_Code = 'LOINS';

  //?SAVE BONLESS LOIN STRAP OFF AMOUNTS    & combine with strap on
  CASE;

  // IF DB1.Yld Component Code is Boneless Loin-Strap Off
  IF DB1.Yld_Component_Code = 'BNLSSTROFF';

  // LCL.YDL Yld Comp Weight = DB1.YDL Yld Comp Weight
  LCL.YDL_Yld_Comp_Weight = DB1.YDL_Yld_Comp_Weight;

  // LCL.YDL Yld Standard Pct = DB1.YDL Yld Standard Pct
  LCL.YDL_Yld_Standard_Pct = DB1.YDL_Yld_Standard_Pct;

  //?SAVE BONLESS LOIN STRAP OFF AMOUNTS    & combine with strap on
  // IF DB1.Yld Component Code is Boneless Loin-Strap On
  IF DB1.Yld_Component_Code = 'BNLSSTRON';

  // WRK.YDL Yld Comp Weight = LCL.YDL Yld Comp Weight + DB1.YDL Yld Comp Weight
  WRK.YDL_Yld_Comp_Weight = LCL.YDL_Yld_Comp_Weight + DB1.YDL_Yld_Comp_Weight;

  // LCL.Weight Rate 1 = LCL.YDL Yld Comp Weight * LCL.YDL Yld Standard Pct *
  LCL.Unused_Weight_Rate_1 = LCL.YDL_Yld_Comp_Weight * LCL.YDL_Yld_Standard_Pct;

  // LCL.Weight Rate 2 = DB1.YDL Yld Comp Weight * DB1.YDL Yld Standard Pct *
  LCL.Unused_Weight_Rate_2 = DB1.YDL_Yld_Comp_Weight * DB1.YDL_Yld_Standard_Pct;

  // LCL.Weight Rate 1 = LCL.Weight Rate 1 + LCL.Weight Rate 2
  LCL.Unused_Weight_Rate_1 = LCL.Unused_Weight_Rate_1 + LCL.Unused_Weight_Rate_2;

  CASE;

  // IF WRK.YDL Yld Comp Weight is Not equal zero
  IF WRK.YDL_Yld_Comp_Weight <> *ZERO;

  // LCL.YDL Yld Standard Pct = LCL.Weight Rate 1 / WRK.YDL Yld Comp Weight *Rounded
  LCL.YDL_Yld_Standard_Pct = LCL.Unused_Weight_Rate_1 / WRK.YDL_Yld_Comp_Weight 'H';

  ENDIF;

  // PAR.Percent 7.4 USR = PAR.Percent 7.4 USR + LCL.YDL Yld Standard Pct
  PAR.Percent_7_4_USR = PAR.Percent_7_4_USR + LCL.YDL_Yld_Standard_Pct;

  //?SAVE BONLESS LOIN STRAP OFF AMOUNTS    & combine with strap on
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Percent 7.4 USR = PAR.Percent 7.4 USR + DB1.YDL Yld Standard Pct
  PAR.Percent_7_4_USR = PAR.Percent_7_4_USR + DB1.YDL_Yld_Standard_Pct;

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Percent 7.4 USR = PAR.Percent 7.4 USR + DB1.YDL Yld Standard Pct
  PAR.Percent_7_4_USR = PAR.Percent_7_4_USR + DB1.YDL_Yld_Standard_Pct;

  ENDIF;

  ENDIF;

 }

 // PAR.YDL Yld Standard Pct = CON.100 - LCL.Percent 7.4 USR
 PAR.YDL_Yld_Standard_Pct = 100 - LCL.Percent_7_4_USR;

 //?Actual - Std Weight Diff
 CASE;

 // IF PAR.YDL Yld Standard Pct is Greater than zero
 IF PAR.YDL_Yld_Standard_Pct > *ZERO;

 // Compute: yld weight diff
 PAR.YDL_Yld_Weight_Diff = ( ( LCL.YDL_Yld_Mix_Percent_1 / 100 ) * PAR.Total_Line_Weight
 'H' ) - ( ( PAR.YDL_Yld_Standard_Pct / 100 ) * PAR.Total_Line_Weight 'H' );

 //?Actual - Std Weight Diff
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.YDL Yld Weight Diff = CON.*ZERO
 PAR.YDL_Yld_Weight_Diff = *ZERO;

 ENDIF;

 EXECUTE FUNCTION(Chg Mix Percent       CH) TYPE(CHGOBJ) FILE(POC0CPP)           AC1670639;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Production_Line_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Production_Shift);
 PARAMETER(LCL.Yld_Component_Code);
 PARAMETER(LCL.YDL_Yld_Mix_Percent_1);
 PARAMETER(PAR.YDL_Yld_Standard_Pct);
 PARAMETER(PAR.YDL_Yld_Weight_Diff);
 PARAMETER(PAR.YDL_Component_Group);
 PARAMETER(PAR.YDL_Unused_Sts_1);
 PARAMETER(PAR.YDL_Unused_Sts_2);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

}


ENDIF;

CASE;

// IF PAR.Department Code is Belly
IF PAR.Department_Code = 'BELLY';

EXECUTE FUNCTION(Rtv Finished Mix %    RT) TYPE(RTVOBJ) FILE(POC0CPP)           AC1685319;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Department_Code);
PARAMETER(PAR.Production_Line_Code);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Production_Shift);
PARAMETER('FINISHED');
PARAMETER(PAR.Actual_Yield);
PARAMETER(PAR.Production_Standard_Yld);
{
 //?USER: Process Data record

 // PAR.YDL Yld Mix Percent = DB1.YDL Yld Mix Percent
 PAR.YDL_Yld_Mix_Percent = DB1.YDL_Yld_Mix_Percent;

 // PAR.YDL Yld Standard Pct = DB1.YDL Yld Standard Pct
 PAR.YDL_Yld_Standard_Pct = DB1.YDL_Yld_Standard_Pct;

}


// IF PAR.Department Code is Loin Boning
IF PAR.Department_Code = 'LOINS';

EXECUTE FUNCTION(Rtv Bnls Loin Mix %  RT) TYPE(RTVOBJ) FILE(POC0CPP)            AC1687887;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Department_Code);
PARAMETER(PAR.Production_Line_Code);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Production_Shift);
PARAMETER(PAR.Actual_Yield);
PARAMETER(PAR.Production_Standard_Yld);
{
 //?USER: Initialize routine

 // PAR.YDL Yld Mix Percent = CON.*ZERO
 PAR.YDL_Yld_Mix_Percent = *ZERO;

 // WRK.Weight Prod 1 USR = CON.*ZERO
 WRK.Weight_Prod_1_USR = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.Yld Component Code is Boneless Loin-Strap Off
 IF DB1.Yld_Component_Code = 'BNLSSTROFF';

 // OR DB1.Yld Component Code is Boneless Loin-Strap On
 OR DB1.Yld_Component_Code = 'BNLSSTRON';

 // Computed:for wghtd Std%
 WRK.Unused_Weight_Rate_2 = ( DB1.YDL_Yld_Comp_Weight * ( DB1.YDL_Yld_Standard_Pct / 100 )
 'H' ) + WRK.Unused_Weight_Rate_2;

 // WRK.Weight Prod 1 USR = WRK.Weight Prod 1 USR + DB1.YDL Yld Comp Weight
 WRK.Weight_Prod_1_USR = WRK.Weight_Prod_1_USR + DB1.YDL_Yld_Comp_Weight;

 //?Add mixed pct% together -- dont calc weighted avg.
 // PAR.YDL Yld Mix Percent = PAR.YDL Yld Mix Percent + DB1.YDL Yld Mix Percent
 PAR.YDL_Yld_Mix_Percent = PAR.YDL_Yld_Mix_Percent + DB1.YDL_Yld_Mix_Percent;

 ENDIF;

 //?USER: Exit processing

 CASE;

 // IF WRK.Weight Prod 1 USR is Not equal zero
 IF WRK.Weight_Prod_1_USR <> *ZERO;

 // Compute: Std pct
 PAR.YDL_Yld_Standard_Pct = ( WRK.Unused_Weight_Rate_2 / WRK.Weight_Prod_1_USR 'H' ) * 100
 'H';

 ENDIF;

}


ENDIF;

ENDIF;

// PAR.Yield Variance = PAR.Actual Yield - PAR.Production Standard Yld%
PAR.Yield_Variance = PAR.Actual_Yield - PAR.Production_Standard_Yld;

CASE;

// IF PAR.Department Code is CUT
IF PAR.Department_Code = 'CUT';

// Weight Variance
PAR.Weight_Variance = PAR.Total_Line_Weight - ( PAR.Cold_Weight * (                                +
PAR.Production_Standard_Yld / 100 'H' ) 'H' );

// IF PAR.Department Code is Belly
IF PAR.Department_Code = 'BELLY';

// Weight Variance
PAR.Weight_Variance = LCL.Start_Weight * ( PAR.Yield_Variance / 100 ) 'H';

// IF PAR.Department Code is Loin Boning
IF PAR.Department_Code = 'LOINS';

// Weight Variance
PAR.Weight_Variance = LCL.Start_Weight * ( PAR.Yield_Variance / 100 ) 'H';

ENDIF;

EXECUTE FUNCTION(Rtv Chg Actual Yld    RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1664772;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Department_Code);
PARAMETER(PAR.Production_Line_Code);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Production_Shift);
PARAMETER(PAR.Total_Line_Weight);
PARAMETER(PAR.Production_Standard_Yld);
PARAMETER(PAR.Actual_Yield);
PARAMETER(PAR.Yield_Variance);
PARAMETER(PAR.Weight_Variance);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Daily Line Header CH) TYPE(CHGOBJ) FILE(POCSCPP)           AC1664740;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(DB1.Start_Weight);
 PARAMETER(DB1.Start_Pieces);
 PARAMETER(DB1.Ending_Weight);
 PARAMETER(DB1.Converting_Start_Weight);
 PARAMETER(DB1.Converting_End_Weight);
 PARAMETER(DB1.Pct_Pieces_Converted);
 PARAMETER(PAR.Total_Line_Weight);
 PARAMETER(PAR.Production_Standard_Yld);
 PARAMETER(PAR.Actual_Yield);
 PARAMETER(PAR.Yield_Variance);
 PARAMETER(PAR.Weight_Variance);
 PARAMETER(DB1.YDL_Comment);
 PARAMETER(DB1.YDL_Post_Status);
 PARAMETER(DB1.YDL_Process_Status);
 PARAMETER(DB1.Hogs_Cut);
 PARAMETER(DB1.Bone_In_Zone_Avg_Loin_Wgt);
 PARAMETER(DB1.Bone_Ls_Zone_Start_Wgt);
 PARAMETER(DB1.Bone_Ls_Zone_Piece_Count);
 PARAMETER(DB1.Conv_Finished_Pc_Count);
 PARAMETER(DB1.Loins_Returned_From_Cut);
 PARAMETER(DB1.Start_Wgt_Returned_f_Cut);
 PARAMETER(DB1.YDLH_Unused_Wgt);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


CASE;

// IF PAR.Department Code is CUT
IF PAR.Department_Code = 'CUT';

EXECUTE FUNCTION(Exc Calc Dept Yield   RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1671400;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Department_Code);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Production_Shift);
PARAMETER(PAR.Head_Cut);
PARAMETER(PAR.Cold_Weight);
PARAMETER(PAR.Avg_Cold_Weight);
{
 //?USER: Initialize routine

 EXECUTE FUNCTION(Rtv Dept Std Yield    RT) TYPE(RTVOBJ) FILE(POC2CPP)           AC1671624;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Production_Standard_Yld);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  // LCL.First Time Flag = CND.Yes
  LCL.First_Time_Flag = 'Y';

  //?USER: Process Data record

  //?First Time
  CASE;

  // IF LCL.First Time Flag is Yes
  IF LCL.First_Time_Flag = 'Y';

  // LCL.Effective Date = DB1.Effective Date
  LCL.Effective_Date = DB1.Effective_Date;

  // LCL.First Time Flag = CND.NO
  LCL.First_Time_Flag = 'N';

  ENDIF;

  //?Date Changed
  CASE;

  // IF LCL.Effective Date NE DB1.Effective Date
  IF LCL.Effective_Date <> DB1.Effective_Date;

  QUIT;

  ENDIF;

  // LCL.Production Standard Yld% = DB1.Production Standard Yld%
  LCL.Production_Standard_Yld = DB1.Production_Standard_Yld;

  CASE;

  // IF LCL.Production Standard Yld% is equal to zero
  IF LCL.Production_Standard_Yld = *ZERO;

  EXECUTE FUNCTION(Rtv Line Std Yield    RT) TYPE(RTVOBJ) FILE(POC2CPP)           AC1671633;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(DB1.Production_Line_Code);
  PARAMETER(PAR.Effective_Date);
  PARAMETER(LCL.Production_Standard_Yld);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   // LCL.First Time Flag = CND.Yes
   LCL.First_Time_Flag = 'Y';

   //?USER: Process Data record

   // PAR.Production Standard Yld% = DB1.Production Standard Yld%
   PAR.Production_Standard_Yld = DB1.Production_Standard_Yld;

   QUIT;

  }

  ENDIF;

  // PAR.Production Standard Yld% = PAR.Production Standard Yld% + LCL.Production Standard Yld%
  PAR.Production_Standard_Yld = PAR.Production_Standard_Yld + LCL.Production_Standard_Yld;

 }

 //?USER: Process Data record

 // PAR.Wgt Total USR = PAR.Wgt Total USR + DB1.Total Line Weight
 PAR.Wgt_Total_USR = PAR.Wgt_Total_USR + DB1.Total_Line_Weight;

 //?USER: Exit processing

 CASE;

 // IF PAR.Wgt Total USR is Greater than zero
 IF PAR.Wgt_Total_USR > *ZERO;

 // AND PAR.Cold Weight is Greater than zero
 AND PAR.Cold_Weight > *ZERO;

 // Actual Yield
 PAR.Actual_Yield = ( PAR.Wgt_Total_USR / PAR.Cold_Weight 'H' ) * 100 'H';

 // PAR.Yield Variance = PAR.Actual Yield - PAR.Production Standard Yld%
 PAR.Yield_Variance = PAR.Actual_Yield - PAR.Production_Standard_Yld;

 // Weight Variance
 PAR.Weight_Variance = PAR.Wgt_Total_USR - ( PAR.Cold_Weight * (
 PAR.Production_Standard_Yld / 100 'H' ) 'H' );

 EXECUTE FUNCTION(Upd Actual Yield Info RT) TYPE(RTVOBJ) FILE(POCRCPP)           AC1671410;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Production_Shift);
 PARAMETER(PAR.Production_Standard_Yld);
 PARAMETER(PAR.Actual_Yield);
 PARAMETER(PAR.Yield_Variance);
 PARAMETER(PAR.Weight_Variance);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Actual Yield Info CH) TYPE(CHGOBJ) FILE(POCRCPP)           AC1671411;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Department_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Production_Shift);
  PARAMETER(PAR.Production_Standard_Yld);
  PARAMETER(PAR.Actual_Yield);
  PARAMETER(PAR.Yield_Variance);
  PARAMETER(PAR.Weight_Variance);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 ENDIF;

}


ENDIF;

//?Upd Start Wt for Single Rib, Sheet Belly for CUT dept
CASE;

// IF PAR.Department Code is Belly
IF PAR.Department_Code = 'BELLY';

EXECUTE FUNCTION(Rtv Upd Comp Start Wt RT) TYPE(RTVOBJ) FILE(POCYREP)           AC1684735;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Department_Code);
PARAMETER(PAR.Production_Line_Code);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Production_Shift);
PARAMETER(LCL.Start_Weight);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Start Weight      RT) TYPE(RTVOBJ) FILE(POCZREP)           AC1669973;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Yld_Component_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Production_Shift);
 PARAMETER(PAR.Start_Weight);
 PARAMETER('AC');
 {
  //?USER: Process Data record

  CASE;

  // IF PAR.PLYC Type EQ DB1.PLYC Type
  IF PAR.PLYC_Type = DB1.PLYC_Type;

  EXECUTE FUNCTION(Chg Yld Daily Wgt     RT) TYPE(RTVOBJ) FILE(POC0CPP)           AC1669642;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Department_Code);
  PARAMETER(DB1.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(DB1.Yld_Component_Code);
  PARAMETER(PAR.YDL_Yld_Comp_Weight);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Crt Yld Daily Yld Cmp CR) TYPE(CRTOBJ) FILE(POC0CPP)           AC1669587;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Production_Line_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Production_Shift);
   PARAMETER(PAR.Yld_Component_Code);
   PARAMETER(PAR.YDL_Yld_Comp_Weight);
   PARAMETER(PAR.YDL_Yld_Mix_Percent);
   PARAMETER(PAR.YDL_Yld_Standard_Pct);
   PARAMETER(PAR.YDL_Yld_Weight_Diff);
   PARAMETER(WRK.YDL_Component_Group);
   PARAMETER(WRK.YDL_Unused_Sts_1);
   PARAMETER(WRK.YDL_Unused_Sts_2);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?USER: Process Data record

   EXECUTE FUNCTION(Rtv Component Info    RT) TYPE(RTVOBJ) FILE(POCZREP)           AC1669682;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Department_Code);
   PARAMETER(DB1.Production_Line_Code);
   PARAMETER(DB1.Yld_Component_Code);
   PARAMETER(WRK.PLYC_Type);
   PARAMETER(LCL.PLYC_Percent_of_Weight);
   PARAMETER(WRK.PLYC_Comment);
   PARAMETER(WRK.Credit_Item_Inc_Exc_Sts);
   PARAMETER(WRK.Type_Inc_Exc_Sts);
   PARAMETER(WRK.Item_Structure_Type_Code);
   PARAMETER(WRK.Group_Inc_Exc_Sts);
   PARAMETER(WRK.Item_Structure_Group_Code);
   PARAMETER(WRK.Class_Inc_Exc_Sts);
   PARAMETER(WRK.Item_Structure_Class_Code);
   PARAMETER(WRK.YC_Required_Sts);
   PARAMETER(WRK.YC_Component_Group);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.PLYC Percent of Weight is Greater than zero
   IF LCL.PLYC_Percent_of_Weight > *ZERO;

   // LCL.YDL Yld Comp Weight
   LCL.YDL_Yld_Comp_Weight = PAR.YDL_Yld_Comp_Weight * ( LCL.PLYC_Percent_of_Weight / 100
   'H' ) 'H';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.YDL Yld Comp Weight = PAR.YDL Yld Comp Weight
   LCL.YDL_Yld_Comp_Weight = PAR.YDL_Yld_Comp_Weight;

   ENDIF;

   EXECUTE FUNCTION(Chg Yld Daily Wgt     CH) TYPE(CHGOBJ) FILE(POC0CPP)           AC1669643;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Department_Code);
   PARAMETER(DB1.Production_Line_Code);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Production_Shift);
   PARAMETER(DB1.Yld_Component_Code);
   PARAMETER(LCL.YDL_Yld_Comp_Weight);
   PARAMETER(DB1.YDL_Component_Group);
   PARAMETER(DB1.YDL_Unused_Sts_1);
   PARAMETER(DB1.YDL_Unused_Sts_2);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  ENDIF;

 }

}


ENDIF;

