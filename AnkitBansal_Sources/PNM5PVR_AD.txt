// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNM5PVR
// ?Date: 14.08.2025 Time: 03:45:43
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(LCL.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?***** Change Log and comments
DO;

//?E1860  RMC 01/28/13 Allow volume to be -0-
//?E1860  RMC 12/20/11 Allow rin type & batch seq entry
//?FP1322 RMC 11/10/09 New function: BUY Separated RIN only is allowed
ENDDO;

//?USER: Load screen

// DTL.Company Number = PAR.Company Number
DTL.Company_Number = PAR.Company_Number;

// DTL.RFS Transaction Type = CND.Buy
DTL.RFS_Transaction_Type = 'BUY';

// DTL.COA Bio-diesel Fuel Code = CND.B100
DTL.COA_Bio_diesel_Fuel_Code = 'B100';

// DTL.COA RIN Type Flag = CND.Separated
DTL.COA_RIN_Type_Flag = 2;

// DTL.Condition Desc. 1  USR = Condition name of DTL.COA RIN Type Flag
DTL.Condition_Desc_1_USR = RTVCND(DTL.COA_RIN_Type_Flag);

// DTL.COA RIN Transaction Date = JOB.*Job date
DTL.COA_RIN_Transaction_Date = JOB.*Job_date;

// DTL.COA RIN Transaction Time = JOB.*Job time
DTL.COA_RIN_Transaction_Time = JOB.*Job_time;

// DTL.COA RIN EMTS Sts = CND.Not Processed
DTL.COA_RIN_EMTS_Sts = 0;

// DTL.COA RIN SoldFull/Splt Sts = CND.Fully Sold
DTL.COA_RIN_SoldFull_Splt_Sts = 'F';

// DTL.COA BHR RFS Version Nbr = CND.RFS 2
DTL.COA_BHR_RFS_Version_Nbr = 2;

EXECUTE FUNCTION(RTV Fuel Code Dft,dsc RT) TYPE(RTVOBJ) FILE(PNGCREP)           AC1990657;
PARAMETER(DTL.RFS_Fuel_Code);
PARAMETER(DTL.RFS_Fuel_Code_Description);
PARAMETER('Y');
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.RFS Fuel Code Default EQ PAR.RFS Fuel Code Default
 IF DB1.RFS_Fuel_Code_Default = PAR.RFS_Fuel_Code_Default;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Trans Rsn Dft,Dsc RT) TYPE(RTVOBJ) FILE(PNGGREP)           AC1990859;
PARAMETER(DTL.RFS_Transaction_Type);
PARAMETER(DTL.RFS_Trans_Reason_Code);
PARAMETER(DTL.RFS_Trans_Reason_Desc);
PARAMETER('Y');
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.RFS Trans Reason Dft EQ PAR.RFS Trans Reason Dft
 IF DB1.RFS_Trans_Reason_Dft = PAR.RFS_Trans_Reason_Dft;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


// DTL.COA ULSD Company # = CON.4846
DTL.COA_ULSD_Company_# = 4846;

//?USER: Process command keys

CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.COA Ship To Warehouse
IF PGM.*Cursor_field = DTL.COA_Ship_To_Warehouse;

// Call program SEL AcctCo/Warehouse   SR.
CALL PROGRAM(SEL AcctCo/Warehouse   SR) ('PMCQSRR');
PARAMETER(DTL.COA_Ship_To_Warehouse);
PARAMETER(DTL.Company_Number);

ENDIF;

ENDIF;

//?USER: Validate fields

CASE;

// IF DTL.*CMD key is CF04
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.COA RIN Trans Partner Id
IF PGM.*Cursor_field = DTL.COA_RIN_Trans_Partner_Id;

// Call program Sel HPB Trans Partner SL.
CALL PROGRAM(Sel HPB Trans Partner SL) ('PNM1SRR');
PARAMETER(DTL.Company_Number);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(DTL.COA_RIN_Trans_Partner_Id);

ENDIF;

ENDIF;

CASE;

// IF DTL.COA Bio-diesel Fuel Code is B100
IF DTL.COA_Bio_diesel_Fuel_Code = 'B100';

// OR DTL.COA Bio-diesel Fuel Code is B99.9
OR DTL.COA_Bio_diesel_Fuel_Code = 'B99.9';

// DTL.Condition Desc. 4  USR = Condition name of DTL.COA Bio-diesel Fuel Code
DTL.Condition_Desc_4_USR = RTVCND(DTL.COA_Bio_diesel_Fuel_Code);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid Fuel Code'
ERROR(USR4234);
MSGPARM(DTL.COA_Bio_diesel_Fuel_Code);

ENDIF;

//?Val warehouse per Rin Type
CASE;

// IF DTL.COA RIN Type Flag is Assigned
IF DTL.COA_RIN_Type_Flag = '1';

//?Val warehouse per Rin Type
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.COA Ship To Warehouse = CON.*BLANK
DTL.COA_Ship_To_Warehouse = *BLANK;

ENDIF;

// DTL.Condition Desc. 1  USR = Condition name of DTL.COA RIN Type Flag
DTL.Condition_Desc_1_USR = RTVCND(DTL.COA_RIN_Type_Flag);

CASE;

// IF DTL.COA BHR Gallon Price is not entered
IF DTL.COA_BHR_Gallon_Price = *ZERO;

// AND DTL.COA BHR RIN Price is not entered
AND DTL.COA_BHR_RIN_Price = *ZERO;

// Send error message - 'Enter RIN price or Per Gallon Price.'
ERROR(USR4328);
MSGPARM(DTL.COA_BHR_RIN_Price);
MSGPARM(DTL.COA_BHR_Gallon_Price);

ENDIF;

EXECUTE FUNCTION(RTV Check for Batch #  RT) TYPE(RTVOBJ) FILE(PMCCCPP)          AC1853166;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.COA_ULSD_Company_#);
PARAMETER(DTL.COA_Batch_Number);

CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send information message - 'Batch doesnt exist and will be created for ULSD Company &1'
MESSAGE(USR4232 *INFO);
MSGPARM(DTL.COA_ULSD_Company_#);

ENDIF;

// DTL.COA RIN Volume in Gallons = DTL.COA RIN Quantity
DTL.COA_RIN_Volume_in_Gallons = DTL.COA_RIN_Quantity;

EXECUTE FUNCTION(Rtv Last Sec f/Btch/SecRT) TYPE(RTVOBJ) FILE(PMDACPP)          AC1963881;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.COA_ULSD_Company_#);
PARAMETER(DTL.COA_Batch_Number);
PARAMETER(DTL.COA_Batch_Header_RIN_Seq);
PARAMETER(DTL.COA_Batch_Hdr_RIN_Seq_Sec);
{
 //?USER: Processing if Data record not found

 // PAR.COA Batch Hdr RIN Seq Sec = CON.*ZERO
 PAR.COA_Batch_Hdr_RIN_Seq_Sec = *ZERO;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// DTL.COA Batch Hdr RIN Seq Sec = DTL.COA Batch Hdr RIN Seq Sec + CON.1
DTL.COA_Batch_Hdr_RIN_Seq_Sec = DTL.COA_Batch_Hdr_RIN_Seq_Sec + 1;

//?USER: User defined action

EXECUTE FUNCTION(RTV Check for Batch #  RT) TYPE(RTVOBJ) FILE(PMCCCPP)          AC1853166;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.COA_ULSD_Company_#);
PARAMETER(DTL.COA_Batch_Number);

CASE;

// IF PGM.*Return code is COA Batch Header       NF
IF PGM.*Return_code = 'USR3803';

EXECUTE FUNCTION(Crt Batch from Outside CR) TYPE(CRTOBJ) FILE(PMCCCPP)          AC1964792;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.COA_ULSD_Company_#);
PARAMETER(DTL.COA_Batch_Number);
PARAMETER(DTL.COA_Ship_To_Warehouse);
PARAMETER(DTL.COA_Bio_diesel_Fuel_Code);
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER('Created from outside BUY');
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER('O');
PARAMETER('Y');
PARAMETER('N');
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('BDS');
PARAMETER(004);
PARAMETER(DTL.COA_Batch_Header_RIN);
PARAMETER(*ZERO);
PARAMETER(DTL.COA_RIN_EEEEEEEE);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(DTL.RFS_Fuel_Code);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(LCL.COA_RIN_Equivalence_Valu);
PARAMETER(DTL.COA_RIN_Quantity);
PARAMETER(DTL.COA_ULSD_Facility_#);
PARAMETER(LCL.COA_Co_Product_Code);
PARAMETER(*BLANK);
PARAMETER(DTL.COA_Transaction_Comment);
PARAMETER(LCL.COA_BH_RFS_Version_Nbr);
PARAMETER(LCL.COA_BH_EMTS_Sts);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(LCL.COA_BH_Equiv_Value_f_SEP);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(LCL.RFS_Feedstock_Code_1);
PARAMETER(*ZERO);
PARAMETER(LCL.COA_BH_Feedstck_Measure_1);
PARAMETER(LCL.COA_BH_Feedstck_Biomass_1);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(LCL.COA_BH_Feedstck_Measure_2);
PARAMETER(LCL.COA_BH_Feedstck_Biomass_2);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(LCL.COA_BH_Feedstck_Measure_3);
PARAMETER(LCL.COA_BH_Feedstck_Biomass_3);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER('A');
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  //?*** Set RECORD STATUS field. ***
  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  //?*** Set CREATE fields. ***
  // PAR.Create Date = JOB.*Job date
  PAR.Create_Date = JOB.*Job_date;

  // PAR.Create Time = JOB.*Job time
  PAR.Create_Time = JOB.*Job_time;

  // PAR.Create User = JOB.*USER
  PAR.Create_User = JOB.*USER;

  // PAR.Create Program = JOB.*PROGRAM
  PAR.Create_Program = JOB.*PROGRAM;

  //?*** Set CHANGE fields. ***
  // PAR.Change Date = CON.*ZERO
  PAR.Change_Date = *ZERO;

  // PAR.Change Time = CON.*ZERO
  PAR.Change_Time = *ZERO;

  // PAR.Change User = CON.*BLANK
  PAR.Change_User = *BLANK;

  // PAR.Change Program = CON.*BLANK
  PAR.Change_Program = *BLANK;

 }

 //?USER: Processing after Data update

 EXECUTE FUNCTION(RTV Build Batch Detail RT) TYPE(RTVOBJ) FILE(PMCBREP)          AC1851345;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.COA_Bio_diesel_Fuel_Code);
 PARAMETER(DB1.COA_ULSD_Company_#);
 PARAMETER(DB1.COA_Batch_Number);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Record Status is Active
  IF DB1.Record_Status = 'A';

  //?W104274 DN 07/27/22-Passed in COA Test & COA Limit Max.
  EXECUTE FUNCTION(RTV for Create Record  RT) TYPE(RTVOBJ) FILE(PMCDCPP)          AC1851389;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.COA_ULSD_Company_#);
  PARAMETER(PAR.COA_Batch_Number);
  PARAMETER(DB1.COA_Property);
  PARAMETER(DB1.COA_Test);
  PARAMETER(DB1.COA_Test_Method);
  PARAMETER(DB1.COA_Unit_of_Measure);
  PARAMETER(DB1.COA_Limit);
  PARAMETER(DB1.COA_Limit_Max);
  PARAMETER(DB1.COA_Print_Sequence);
  PARAMETER(*ZERO);
  PARAMETER(DB1.COA_OMS_Item_Code);
  PARAMETER(DB1.Sold_To_Customer_hpb_biod);
  PARAMETER(DB1.COA_Footnote_Indicator);
  PARAMETER(DB1.COA_Fuel_Desc2_Prop_Value);
  PARAMETER(DB1.Record_Status);
  {
   //?USER: Processing if Data record not found

   //?W104274 DN 07/27/22-Passed in COA Test & COA Limit Max.
   EXECUTE FUNCTION(Crt COA Batch Detail  CR) TYPE(CRTOBJ) FILE(PMCDCPP)           AC1847455;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.COA_ULSD_Company_#);
   PARAMETER(PAR.COA_Batch_Number);
   PARAMETER(PAR.COA_Property);
   PARAMETER(PAR.COA_Test);
   PARAMETER(PAR.COA_Test_Method);
   PARAMETER(PAR.COA_Unit_of_Measure);
   PARAMETER(PAR.COA_Limit);
   PARAMETER(PAR.COA_Limit_Max);
   PARAMETER(PAR.COA_Print_Sequence);
   PARAMETER(PAR.COA_Property_Value);
   PARAMETER(PAR.COA_OMS_Item_Code);
   PARAMETER(PAR.Sold_To_Customer_hpb_biod);
   PARAMETER(PAR.COA_Footnote_Indicator);
   PARAMETER(PAR.COA_Fuel_Desc2_Prop_Value);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Create_Date);
    PARAMETER(DB1.Create_Time);
    PARAMETER(DB1.Create_User);
    PARAMETER(DB1.Create_Program);
    PARAMETER(DB1.Change_Date);
    PARAMETER(DB1.Change_Time);
    PARAMETER(DB1.Change_User);
    PARAMETER(DB1.Change_Program);
    {
     //?Execute internal function

     //?*** Set RECORD STATUS field. ***
     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     //?*** Set CREATE fields. ***
     // PAR.Create Date = JOB.*Job date
     PAR.Create_Date = JOB.*Job_date;

     // PAR.Create Time = JOB.*Job time
     PAR.Create_Time = JOB.*Job_time;

     // PAR.Create User = JOB.*USER
     PAR.Create_User = JOB.*USER;

     // PAR.Create Program = JOB.*PROGRAM
     PAR.Create_Program = JOB.*PROGRAM;

     //?*** Set CHANGE fields. ***
     // PAR.Change Date = CON.*ZERO
     PAR.Change_Date = *ZERO;

     // PAR.Change Time = CON.*ZERO
     PAR.Change_Time = *ZERO;

     // PAR.Change User = CON.*BLANK
     PAR.Change_User = *BLANK;

     // PAR.Change Program = CON.*BLANK
     PAR.Change_Program = *BLANK;

    }

   }

  }

  ENDIF;

 }

 EXECUTE FUNCTION(CHG Increment Batch #  CH) TYPE(CHGOBJ) FILE(CAASREP)          AC1853165;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.COA_Batch_Number);
 {
  //?USER: Processing before Data update

  // DB1.Next HPB Batch Number = PAR.COA Batch Number + CON.1
  DB1.Next_HPB_Batch_Number = PAR.COA_Batch_Number + 1;

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


ENDIF;

EXECUTE FUNCTION(Crt COA Batch Hdr RIN CR) TYPE(CRTOBJ) FILE(PMDACPP)           AC1858626;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.COA_ULSD_Company_#);
PARAMETER(DTL.COA_Batch_Number);
PARAMETER(DTL.COA_Batch_Header_RIN_Seq);
PARAMETER(DTL.COA_Batch_Hdr_RIN_Seq_Sec);
PARAMETER(DTL.COA_Batch_Header_RIN);
PARAMETER(DTL.COA_RIN_SSSSSSSS);
PARAMETER(DTL.COA_RIN_EEEEEEEE);
PARAMETER(DTL.COA_RIN_Volume_in_Gallons);
PARAMETER(DTL.COA_RIN_Transaction_Date);
PARAMETER(DTL.COA_RIN_Transaction_Time);
PARAMETER(DTL.COA_RIN_Trans_Partner_Nm);
PARAMETER(DTL.COA_RIN_Trans_Partner_Id);
PARAMETER(DTL.COA_Retired_RIN_Reason_Cd);
PARAMETER(DTL.COA_Retired_RIN_Date);
PARAMETER(DTL.COA_Retired_RIN_Time);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Order_Sequence_Number);
PARAMETER(DTL.Order_Secondary_Line_Seq);
PARAMETER(DTL.Case_Sequence_Number);
PARAMETER(DTL.COA_Rail_Car);
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.COA_Date_of_1st_Load);
PARAMETER(DTL.COA_RIN_Unused_Time);
PARAMETER(DTL.COA_RIN_Modified_Sts);
PARAMETER(DTL.COA_RIN_Unused_Text);
PARAMETER(DTL.COA_RIN_SoldFull_Splt_Sts);
PARAMETER(DTL.COA_RIN_Gallons_Sold);
PARAMETER(DTL.COA_Ship_To_Warehouse);
PARAMETER(DTL.COA_RIN_Type_Flag);
PARAMETER(DTL.COA_RIN_Customer_PO#);
PARAMETER(DTL.COA_Shipping_Company);
PARAMETER(DTL.COA_Ref_Load_Id);
PARAMETER(DTL.COA_Reference_Batch_NbrNU);
PARAMETER(DTL.COA_Reference_Btch_Seq_NU);
PARAMETER(DTL.RFS_Compliance_Period);
PARAMETER(DTL.RFS_Report_Year);
PARAMETER(DTL.COA_RIN_Int_Ext_Company);
PARAMETER(DTL.COA_BHR_Unused_Sts_2);
PARAMETER(DTL.COA_BHR_Net_Galls_to_Sell);
PARAMETER(DTL.COA_BHR_Unused_Date_2);
PARAMETER(DTL.COA_BHR_Unused_Text);
PARAMETER(DTL.COA_BHR_Loadout_Temp);
PARAMETER(DTL.COA_ULSD_Facility_#);
PARAMETER(DTL.COA_Batch_RIN_Volume);
PARAMETER(DTL.COA_RIN_Quantity);
PARAMETER(DTL.RFS_Transaction_Type);
PARAMETER(DTL.RFS_Trans_Reason_Code);
PARAMETER(DTL.RFS_Fuel_Code);
PARAMETER(DTL.COA_BHR_RIN_Gen_Year);
PARAMETER(DTL.COA_BHR_RIN_Price);
PARAMETER(DTL.COA_BHR_Gallon_Price);
PARAMETER(DTL.COA_Transaction_Comment);
PARAMETER(DTL.COA_RIN_Supporting_Text_1);
PARAMETER(DTL.COA_RIN_Supporting_Nbr_1);
PARAMETER(DTL.COA_RIN_Supporting_Text_2);
PARAMETER(DTL.COA_RIN_Supporting_Nbr_2);
PARAMETER(DTL.COA_BHR_RFS_Version_Nbr);
PARAMETER(DTL.COA_GEN_EMTS_Sts);
PARAMETER(DTL.COA_GEN_EMTS_Date_Sent);
PARAMETER(DTL.COA_GEN_EMTS_Time_Sent);
PARAMETER(DTL.COA_RIN_EMTS_Sts);
PARAMETER(DTL.COA_RIN_EMTS_Date_Sent);
PARAMETER(DTL.COA_RIN_EMTS_Time_Sent);
PARAMETER(DTL.COA_EMTS_PTD_Nbr);
PARAMETER(DTL.COA_EMTS_Batch_Nbr);
PARAMETER(DTL.COA_BHR_Unused_Sts_3);
PARAMETER(DTL.COA_BHR_Unused_Nbr);
PARAMETER(DTL.COA_EMTS_Trans_Id);
PARAMETER(DTL.COA_EMTS_Return_Code);
PARAMETER(DTL.COA_BHR_Unused_Date_3);
PARAMETER(DTL.COA_BHR_Equiv_Value);
PARAMETER(DTL.COA_BHR_RINs_to_Sell_Sep);
PARAMETER(DTL.COA_Unassgnd_Txfrd_RINS);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  //?*** Set RECORD STATUS field. ***
  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  //?*** Set CREATE fields. ***
  // PAR.Create Date = JOB.*Job date
  PAR.Create_Date = JOB.*Job_date;

  // PAR.Create Time = JOB.*Job time
  PAR.Create_Time = JOB.*Job_time;

  // PAR.Create User = JOB.*USER
  PAR.Create_User = JOB.*USER;

  // PAR.Create Program = JOB.*PROGRAM
  PAR.Create_Program = JOB.*PROGRAM;

  //?*** Set CHANGE fields. ***
  // PAR.Change Date = CON.*ZERO
  PAR.Change_Date = *ZERO;

  // PAR.Change Time = CON.*ZERO
  PAR.Change_Time = *ZERO;

  // PAR.Change User = CON.*BLANK
  PAR.Change_User = *BLANK;

  // PAR.Change Program = CON.*BLANK
  PAR.Change_Program = *BLANK;

 }

}


// PAR.COA ULSD Company # = DTL.COA ULSD Company #
PAR.COA_ULSD_Company_# = DTL.COA_ULSD_Company_#;

// PAR.COA Batch Number = DTL.COA Batch Number
PAR.COA_Batch_Number = DTL.COA_Batch_Number;

// PAR.COA Batch Header RIN Seq = DTL.COA Batch Header RIN Seq
PAR.COA_Batch_Header_RIN_Seq = DTL.COA_Batch_Header_RIN_Seq;

