      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      Hog Production System
      * PROGRAM:     Cost Movements: Build/Edit Origin Group Data
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     03/11/03
      *
      * FUNCTION:    This function builds/edits the origin group data.
      *              It prints an error listing and passes back out a flag
      *              indicating whether the data was clean or had errors.
      *
      ********************************************************************************************
      * MODIFICATIONS:
      ********************************************************************************************
      * DATE      PROGRAMMER
      *
      * 11/24/03  LeAnne Fedor
      *           Add logic for all Phase 3 fields.
      *
      * 12/22/03  LeAnne Fedor
      *           Changed logic that calculates 'inventory head' for file HSP117.
      *           We added logic to retrieve/accumulate Cull Sale head. This logic
      *           is just like the logic we already have in place for daily dead and
      *           inventory adjustment head for 'current inventory'. Prior to this,
      *           we omitted all Cull Sales from the current inventory logic.
      *
      * 12/13/04  LeAnne Fedor
      *           Six of our support files have been renamed to be the 'workfiles'
      *           that they truly are:
      *                          HSP113  became HSP352
      *                          HSP114  became HSP357
      *                          HSP115  became HSP358
      *                          HSP116  became HSP359
      *                          HSP117  became HSP360
      *                          HSP119  became HSP361
      *            These workfiles are cleared at the beginning of each run. So, they hold
      *            only period data now.
      *
      * 03/21/05  LeAnne Fedor
      *           Recompile only. 'Cost per Head' field size was changed in Farm Cost file.
      *
      * 07/06/09  LeAnne Ramsey
      *           Recompile only. Added new field 'Continuous Flow Flag' to Hog Group file.
      *
      * 05/20/11  LeAnne Ramsey (E1557)
      *           Recompile only. Added Yard Dead to HSJ085E.
      *
      * 03/26/20  Danny Nguyen - P405 - Farm Number Increase
      *           Recompile only. Increased Bin Code (@@BNCD) in HSPREF file from 5A to 6A.
      *
      * 05/10/22 Eric L SDN736 Recompiled ticket nbr increase (TKNO & RTNO 7.0 TO 9.0)
      /EJECT
      ********************************************************************************************
      * FILE SPECIFICATIONS
      ********************************************************************************************
      *
     Fhsp028    if   e           k disk
      *    Farm cost
      *
      *
     Fhsl034d   if   e           k disk
      *    Hog group
      *
      *
     Fhsl038e   if   e           k disk
      *    Feed ticket detail
      *
      *
     Fhsl048b   if   e           k disk
      *    Expense ticket
      *
      *
     Fhsl064b   if   e           k disk
      *    Check detail
      *
      *
     Fhsl065c   if   e           k disk
      *    Check adjustments
      *
      *
     Fhsl068d   if   e           k disk
      *    Killed/dead hogs
      *
      *
     Fhsl069a   if   e           k disk    rename(iarec:iareca)
      *    Inventory adjustments
      *
      *
     Fhsl069c   if   e           k disk
      *    Inventory adjustments
      *
      *
     Fhsj075g   if   e           k disk    rename(mdrec:mdrecg) prefix(p1)
      *    Transfer movement detail + transfer movement header
      *
      *
     Fhsj075i   if   e           k disk    rename(mdrec:mdreci) prefix(p2)
      *    Transfer movement detail + transfer movement header
      *
      *
     Fhsj085e   if   e           k disk
      *    Sales detail + sales header
      *
      *
     Fhsp352    if a e           k disk
      *    Cost movements: Origin groups
      *
      *
     Fhsp357    o    e           k disk
      *    Cost movements: Origin group feed
      *
      *
     Fhsp358    uf a e           k disk
      *    Cost movements: Origin group expenses
      *
      *
     Fhsp359    o    e           k disk
      *    Cost movements: Origin group cull sales
      *
      *
     Fhsp360    o    e           k disk
      *    Cost movements: Origin group inventory
      *
      *
     Fhsp361    o    e           k disk
      *    Cost movements: Origin group summarized expenses
      *
      *
      *
     Fhsp362    if   e           k disk
      *    Cost movements: Workfile: Movement Detail
      *
      *
     Fqprint    o    f   85        printer oflind(*inof)
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
      *
     D nocost          c                   'There is no Cost per Head value-
     D                                      in the Farm Cost file for the-
     D                                      period for Farm:'
      *
     D noerror         c                   'There were no errors.'
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
     D arrfscd         s              5p 0 dim(500) ascend
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D dash            s             85    inz(*all'-')
     D rtime           s              6  0
      *
      *
      * Print fields
      *
     D l1msg           s             78
      *
      *
      * Control fields
      *
     D newfl           s              1
     D first           s              1    inz('Y')
     D svhgsn          s                   like(oehgsn)
     D svexcd          s                   like(oeexcd)
     D svrcdt          s                   like(oercdt)
      *
      *
      * Workfields
      *
     D wkavglb         s             13  7
      *
     D wkxtam          s                   like(ogxtam)
      *
     D wkfdlb          s                   like(ogfdlb)
     D wkftam          s                   like(ogftam)
      *
     D wkcuam          s                   like(ogcuam)
     D wkculvhd        s                   like(ogculvhd)
     D wkculvlb        s                   like(ogculvlb)
      *
     D wkddhd          s                   like(ogddhd)
     D wkddlb          s                   like(ogddlb)
      *
     D wkdoahd         s                   like(ogdoahd)
     D wkdoalb         s                   like(ogdoalb)
     D wklb            s                   like(ogdoalb)
      *
     D wkkoahd         s                   like(ogkoahd)
     D wkkoalb         s                   like(ogkoalb)
      *
     D wkiahd          s                   like(ogiahd)
      *
      *
      * Workfields for date manipulation
      *
     D wkdt            s                   like(ogrcdt)
     D wkisodate       s               D   datfmt(*iso)
      *
      *
      * Parm fields
      *
     D xxerror         s              1
      *
      *
      * Parm fields for the generic movement program
      *
     D zzcymd          s              8  0
      *
     D @@nu50          s              5  0
     D gpihd           s                   like(@@nu50)
     D pinhd           s                   like(@@nu50)
     D tinhd           s                   like(@@nu50)
     D tisphd          s                   like(@@nu50)
     D tidphd          s                   like(@@nu50)
     D pouhd           s                   like(@@nu50)
     D touhd           s                   like(@@nu50)
     D tosphd          s                   like(@@nu50)
     D todphd          s                   like(@@nu50)
     D rinhd           s                   like(@@nu50)
     D rouhd           s                   like(@@nu50)
     D qinhd           s                   like(@@nu50)
     D qouhd           s                   like(@@nu50)
     D morhd           s                   like(@@nu50)
     D inahd           s                   like(@@nu50)
      *
     D @@nu92          s              9  2
     D pinlb           s                   like(@@nu92)
     D tinlb           s                   like(@@nu92)
     D tisplb          s                   like(@@nu92)
     D tidplb          s                   like(@@nu92)
     D poulb           s                   like(@@nu92)
     D toulb           s                   like(@@nu92)
     D tosplb          s                   like(@@nu92)
     D todplb          s                   like(@@nu92)
     D rinlb           s                   like(@@nu92)
     D roulb           s                   like(@@nu92)
     D qinlb           s                   like(@@nu92)
     D qoulb           s                   like(@@nu92)
     D morlb           s                   like(@@nu92)
      *
      *
      * Array indexes
      *
     D x               s              3  0
     D y               s              3  0
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Local data area.
      *---------------------------------------------------------------
      *
     Dlda             uds                  dtaara(*lda)
     D  ldbpdt                 1     08  0
     D  ldepdt                 9     16  0
     D  ldper                 17     18  0
     D  ldeffl                19     19
     D  ldccyy                20     23  0
     D  ldbmdy                60     66  0
     D  ldemdy                70     76  0
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ***************************************************************************************
      * MAINLINE
      ***************************************************************************************
      *
      * Print headings
      *
     C                   except    h1hdr
      *
      * Read each movement detail record in the Workfile that drives this function.
      *
     C     *loval        setll     hsp362
      *
     C                   dou       *in90 = *on                                  Do movements
     C                   read      hsp362                                 90
     C                   if        *in90 = *off                                 If read
      *
      * Clear accumulators
     C                   z-add     0             wkxtam
      *
     C                   z-add     0             wkfdlb
     C                   z-add     0             wkftam
      *
     C                   z-add     0             wkcuam
     C                   z-add     0             wkculvhd
     C                   z-add     0             wkculvlb
      *
     C                   z-add     0             wkddhd
     C                   z-add     0             wkddlb
      *
     C                   z-add     0             wkdoahd
     C                   z-add     0             wkdoalb
      *
     C                   z-add     0             wkkoahd
     C                   z-add     0             wkkoalb
      *
     C                   z-add     0             wkiahd
      *
      * If you already have origin data for this group/date, you will only
      * need to process Inventory for Nur/Grow Finish Groups.....all other
      * required data will have already been generated for this group/date.
      *
     C     key01         chain     hsp352                             92
     C                   if        *in92 = *off                                 If already have
     C                   move      no            newfl
     C                   else
     C                   move      yes           newfl
     C                   endif                                                  If already have
      *
      *
      * For Nursery and Grow Finish Groups
      *
     C                   select
     C                   when      wdorppcd = 'NUR  ' or wdorppcd = 'GF   '
      *
     C                   if        newfl = yes
     C                   exsr      $feed
     C                   exsr      $expenses
     C                   exsr      $cullsales
     C                   exsr      $dailydead
     C                   exsr      $doakoa
     C                   exsr      $adjust
     C                   endif
      *
     C                   exsr      $inventory
      *
      * For BGF groups, you need to retrieve a Farm Cost per Head
      *
     C                   when      wdorppcd = 'BGF  ' and newfl = yes
     C                   exsr      $farmcost
     C                   endsl
      *
      * Write an origin group record--for all groups/phases when this
      * is the first time thru the logic for a group/date.
      *
     C                   if        newfl = yes
     C                   exsr      $wrt352
     C                   endif
      *
     C                   endif                                                  If read
     C                   enddo                                                  Do movements
      *
      *----------------------------------------------------------------
      * EOF processing
      *----------------------------------------------------------------
      *
      * Create records for the Summarized Expense file.
      *
     C                   exsr      $sumexp
      *
      * If there were no errors, then print the No Error blurb.
      *
     C                   select
     C                   when      xxerror = no
     C                   seton                                        87
     C                   eval      l1msg = noerror
     C                   except    l1dtl
     C                   other
      *
      * Otherwise, print the error farm array.
      *
     C                   move      nocost        l1msg
     C                   z-add     0             x
     C                   sorta     arrfscd
      *
     C                   do        500                                          Do array
     C                   add       1             x
      *
     C                   if        arrfscd(x) <> 0                              If got a farm
     C                   if        *inof = *on
     C                   except    h1hdr
     C                   endif
     C                   except    l1dtl
     C                   endif                                                  If got a farm
      *
     C                   enddo                                                  Do array
     C                   endsl
      *
     C                   seton                                        lr
      /eject
      *---------------------------------------------------------------------------------------
      * Process feed tickets for the origin group
      *---------------------------------------------------------------------------------------
      *
     C     $feed         begsr
      *
     C     wdorhgsn      setll     hsl038e
      *
     C                   dou       *in93 = *on                                  Do feed loop
     C     wdorhgsn      reade     hsl038e                                93
     C                   if        *in93 = *off                                 If more feed
      *
     C                   if        (fdtrcd = 'D' and fdtkdt <= wdrcdt) or       If process
     C                             (fdtrcd = 'P' and fdtkdt <= ldepdt) or
     C                             (fdtrcd = 'A' and fdtkdt <= ldepdt)
      *
      * Populate fields and write the Origin Group Feed Record
      *
     C                   z-add     ldccyy        ofacyr
     C                   z-add     ldper         ofacpe
      *
     C                   z-add     wdrcdt        ofrcdt
      *
     C                   z-add     wdorhgsn      ofhgsn
      *
     C                   z-add     fdtkno        oftkno
     C                   z-add     fdtkdt        oftkdt
     C                   move      fdrncd        ofrncd
     C                   z-add     fdfdlb        offdlb
      *
      * Accumulate the 4 feed amounts into the Ticket Amount field:
      *   1) ingredient
      *   2) manufacturing
      *   3) delivery
      *   4) medication
     C                   z-add     fdinam        offtam
     C                   add       fdmfam        offtam
     C                   add       fddlam        offtam
     C                   add       fdmdam        offtam
      *
      * Accumulate Ticket Pounds and Ticket Amount field for later updating of
      * the Origin Group record.
      *
     C                   add       offtam        wkftam
     C                   add       offdlb        wkfdlb
      *
     C                   write     ofrec
     C                   clear                   ofrec
      *
     C                   endif                                                  If process
     C                   endif                                                  If more feed
     C                   enddo                                                  Do feed loop
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------------------------------
      * Process expense tickets for the origin group
      *---------------------------------------------------------------------------------------
      *
     C     $expenses     begsr
      *
     C     wdorhgsn      setll     hsl048b
      *
     C                   dou       *in93 = *on                                  Do expenses
     C     wdorhgsn      reade     hsl048b                                93
     C                   if        *in93 = *off and wdrcdt >= xtxbdt            If more exp
      *
      * Populate fields and then write the Origin Group Expense record
      *
     C                   z-add     ldccyy        oeacyr
     C                   z-add     ldper         oeacpe
      *
     C                   z-add     wdrcdt        oercdt
     C                   z-add     wdorhgsn      oehgsn
      *
     C                   z-add     xtxtsn        oextsn
     C                   z-add     xtxbdt        oexbdt
     C                   z-add     xtxedt        oexedt
     C                   move      xtexcd        oeexcd
     C                   z-add     xtxtam        oextam
      *
      * Accumulate this Ticket Amount field for later updating of the Origin
      * Group record.
     C                   add       oextam        wkxtam
      *
     C                   write     oerec
     C                   clear                   oerec
      *
     C                   endif                                                  If more exp
     C                   enddo                                                  Do expenses
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------------------------------
      * Process cull sale movements for the origin group
      *---------------------------------------------------------------------------------------
      *
     C     $cullsales    begsr
      *
     C     wdorhgsn      setll     hsj085e
      *
     C                   dou       *in93 = *on                                  Do cull sales
     C     wdorhgsn      reade     hsj085e                                93
     C                   if        *in93 = *off and                             If more sales
     C                             shstcd = 'CULLS' and
     C                             shrcdt <= ldepdt and
     C                             (shmscd = 'FP' or shmscd = 'PP')
      *
      * Retrieve the check detail records(s) for this movement/group to get
      * the 'gross amount'.
      *
     C     key03         setll     hsl064b
      *
     C                   dou       *in94 = *on                                  Do check detail
     C     key03         reade     hsl064b                                94
     C                   if        *in94 = *off                                 If not eof
     C                   add       cdgram        occuam
      *
      * Now, retrieve all the adjustments for this detail line so that
      * you can get to the 'net' amount for the check detail line.
      * (NOTE: Deductions/additions are carried in the Adjustment file
      * with the appropriate +/- sign. So, just 'add' them to the 'gross'.)
      *
     C     key05         setll     hsl065c
     C                   dou       *in92 = *on                                  Do ded/add
     C     key05         reade     hsl065c                                92
     C                   if        *in92 = *off and cjcjfl = 'D'
     C                   add       cjcjam        occuam
     C                   endif
     C                   enddo                                                  Do ded/add
      *
     C                   endif                                                  If not eof
     C                   enddo                                                  Do check detail
      *
      * Populate fields and write the Origin Group Cull Sale record
      *
     C                   z-add     ldccyy        ocacyr
     C                   z-add     ldper         ocacpe
      *
     C                   z-add     wdorhgsn      ochgsn
     C                   z-add     wdrcdt        ocrcdt
      *
     C                   z-add     shmvsn        occumvsn
     C                   z-add     shrcdt        occurcdt
     C                   move      shmscd        occumscd
      *
     C                   z-add     sglvhd        occulvhd
     C                   z-add     sglvlb        occulvlb
      *
      * Accumulate fields for later updating of the Origin Group record.
      *
     C                   add       occuam        wkcuam
     C                   add       occulvhd      wkculvhd
     C                   add       occulvlb      wkculvlb
      *
     C                   write     ocrec
     C                   clear                   ocrec
      *
     C                   endif                                                  If more sales
     C                   enddo                                                  Do cull sales
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------------------------------
      * Process daily dead movements for the origin group
      *---------------------------------------------------------------------------------------
      *
     C     $dailydead    begsr
      *
     C     wdorhgsn      setll     hsl068d
      *
     C                   dou       *in93 = *on                                  Do daily dead
     C     wdorhgsn      reade     hsl068d                                93
     C                   if        *in93 = *off and                             If more
     C                             kdkddt <= wdrcdt
     C                   add       kdkdhd        wkddhd
     C                   add       kdkdlb        wkddlb
     C                   endif                                                  If more
     C                   enddo                                                  Do daily dead
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------------------------------
      * Retrieve DOA and KOA from Transfers and Sales for the origin group
      *---------------------------------------------------------------------------------------
      *
     C     $doakoa       begsr
      *
      * Retrieve DOA from Sales
      *
     C     wdorhgsn      setll     hsj085e
      *
     C                   dou       *in93 = *on                                  Do sales
     C     wdorhgsn      reade     hsj085e                                93    If more sales
     C                   if        *in93 = *off and
     C                             shrcdt <= wdrcdt and
     C                             (shmscd = 'FP' or shmscd = 'PP')
     C                   add       sgdohd        wkdoahd
     C                   add       sgdolb        wkdoalb
     C                   endif                                                  If more sales
     C                   enddo                                                  Do sales
      *
      *
      * Retrieve DOA and KOA from Transfers Out Of this origin group.
      *
     C     wdorhgsn      setll     hsj075g
     C                   dou       *in93 = *on                                  Do tran out
     C     wdorhgsn      reade     hsj075g                                93
     C                   if        *in93 = *off and
     C                             p1mhrcdt <= wdrcdt
     C                   add       p1mddoahd     wkdoahd
     C                   add       p1mdkoahd     wkkoahd
      *
     C                   if        p1mddohd <> 0
     C     p1mddolb      div       p1mddohd      wkavglb
     C     p1mddoahd     mult      wkavglb       wklb
     C                   add       wklb          wkdoalb
     C     p1mdkoahd     mult      wkavglb       wklb
     C                   add       wklb          wkkoalb
     C                   endif
      *
     C                   endif
     C                   enddo                                                  Do tran out
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------------------------------
      * Process inventory adjustments for the origin group
      *---------------------------------------------------------------------------------------
      *
     C     $adjust       begsr
      *
     C     wdorhgsn      setll     hsl069a
      *
     C                   dou       *in93 = *on                                  Do inv adjust
     C     wdorhgsn      reade     hsl069a                                93
     C                   if        *in93 = *off and
     C                             iaiadt <= wdrcdt
     C                   add       iaiahd        wkiahd
     C                   endif
     C                   enddo                                                  Do inv adjust
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------------
      * Retrieve Current Inventory head for a Nursery or Grow Finish Group
      *---------------------------------------------------------------------
      *
      * This is a multi-step process:
      *  1) retrieve Inventory head as of the day 'Previous' to the Received Date
      *  2) get an in/out head value for Received Date---the 'Same' day head count
      *  3) get inventory adjustment head for Received Date
      *  4) get daily dead head for Received Date
      *  5) get Cull Sale head for Received Date
      *  6) calculate the 'inventory' head that will ultimately be used to
      *     calculate the 'per head' rate out of the group.
      *
      *
     C     $inventory    begsr
      *
      * Step 1:
      * Retrieve the inventory head for the date 'previous' to the Received
      * Date of the movement.
      *
     C                   move      wdrcdt        wkisodate
     C     wkisodate     subdur    1:*days       wkisodate
     C                   move      wkisodate     wkdt
      *
     C                   z-add     wkdt          zzcymd
     C                   call      'HPMOVE'      plist01
      *
     C                   z-add     gpihd         oipdayhd
      *
      * Step 2:
      * Retrieve/calculate a 'Same' Day in/out head value from sales and transfers.
      *
     C                   exsr      $sameday
      *
      *
      * Step 3: Retrieve all inventory adjustment head for the group on
      * the date equal to the Received Date of the movement being processed.
      *
     C     key04         setll     hsl069c
     C                   dou       *in94 = *on                                  Do adjusted
     C     key04         reade     hsl069c                                94
     C                   if        *in94 = *off
     C                   add       iaiahd        oiiahd
     C                   endif
     C                   enddo                                                  Do adjusted
      *
      *
      * Step 4: Retrieve all daily dead head for the group on
      * the date equal to the Received Date of the movement being processed.
      *
     C     key01         setll     hsl068d
     C                   dou       *in94 = *on                                  Do daily dead
     C     key01         reade     hsl068d                                94
     C                   if        *in94 = *off
     C                   add       kdkdhd        oikdhd
     C                   endif
     C                   enddo                                                  Do daily dead
      *
      *
      * Step 5: Retrieve all Cull Sale head for the group on
      * the date equal to the Received Date of the movement being processed.
      *
     C     wdorhgsn      setll     hsj085e
     C                   dou       *in94 = *on                                  Do sales out
     C     wdorhgsn      reade     hsj085e                                94
     C                   if        *in94 = *off and
     C                             shrcdt = wdrcdt and
     C                             shstcd = 'CULLS'
     C                   add       sglvhd        oicuhd
     C                   add       sgdohd        oicuhd
     C                   endif
     C                   enddo                                                  Do sales out
      *
      *
      * Step 6:
      * Calculate Current Inventory head as:
      *     +  previous day inventory head
      *     +  same day head
      *     +  inventory adjustment head
      *     -  daily dead head
      *     -  cull sale head
      *     -  doa/koa head for the movement/line being processed
      *
     C                   eval      oiinhd = oipdayhd + oisdayhd + oiiahd
     C                             - oikdhd - oicuhd - wddohd
      *
      *
      * Populate fields and write the record for the Origin Group Inventory
      *
     C                   z-add     wdorhgsn      oihgsn
     C                   z-add     wdmvsn        oimvsn
     C                   z-add     wdlnno        oilnno
      *
     C                   z-add     wddohd        oidohd
     C                   z-add     wdrcdt        oircdt
      *
     C                   z-add     ldccyy        oiacyr
     C                   z-add     ldper         oiacpe
      *
     C                   write     oirec
     C                   clear                   oirec
      *
     C                   endsr
      /eject
      *--------------------------------------------------------------------------------------
      * Retrieve a Same-Day in/out head for a group
      *--------------------------------------------------------------------------------------
      *
      * Retrieve the in/out head on all sales/transfer movements for the RECEIVED DATE
      * that have:
      *    1) a movement NUMBER that IS LESS THAN the movement we are processing or
      *    2) the same movement number but a line number that is less
      *
     C     $sameday      begsr
      *
      * Retrieve/accumulate head In To this origin group from transfers
      *
     C     wdorhgsn      setll     hsj075i
     C                   dou       *in94 = *on                                  Do in to
     C     wdorhgsn      reade     hsj075i                                94
     C                   if        *in94 = *off and
     C                             p2mhrcdt = wdrcdt and
     C                             (p2mhmvsn < wdmvsn or
     C                             (p2mhmvsn = wdmvsn and p2mdlnno < wdlnno))
     C                   add       p2mdqlhd      oisdayhd
     C                   add       p2mdrjhd      oisdayhd
     C                   endif
     C                   enddo                                                  Do in to
      *
      *  Retrieve/accumulate head Out Of this origin group from transfers
      *  (include DOA/KOA at destination farm)
      *
     C     wdorhgsn      setll     hsj075g
     C                   dou       *in94 = *on                                  Do tran out
     C     wdorhgsn      reade     hsj075g                                94
     C                   if        *in94 = *off and
     C                             p1mhrcdt = wdrcdt and
     C                             (p1mhmvsn < wdmvsn or
     C                             (p1mhmvsn = wdmvsn and p1mdlnno < wdlnno))
     C                   sub       p1mdqlhd      oisdayhd
     C                   sub       p1mdrjhd      oisdayhd
     C                   sub       p1mddohd      oisdayhd
     C                   endif
     C                   enddo                                                  Do tran out
      *
      * Retrieve/accumulate head Out Of this origin group from sales
      * (Omit CULL sales)
      *
     C     wdorhgsn      setll     hsj085e
     C                   dou       *in94 = *on                                  Do sales out
     C     wdorhgsn      reade     hsj085e                                94
     C                   if        *in94 = *off and
     C                             shrcdt = wdrcdt and
     C                             shmvsn < wdmvsn and
     C                             shstcd <> 'CULLS'
     C                   sub       sglvhd        oisdayhd
     C                   sub       sgdohd        oisdayhd
     C                   endif
     C                   enddo                                                  Do sales out
      *
     C                   endsr
      /eject
      *--------------------------------------------------------------------------------------
      * Retrieve a Farm Cost for a BGF group
      *--------------------------------------------------------------------------------------
      *
      * For BGF Groups, go to the farm cost file to get average cost for the farm site.
      * Attempt to retrieve an exact hit. If there are no exact matches,
      * retrieve the first one prior. Use the Received Date at the destination farm
      * as the effective date.
      *
     C     $farmcost     begsr
      *
     C     key02         chain     hsp028                             92
     C                   if        *in92 = *on
     C     key02         setll     hsp028
     C     wdorfscd      readpe    hsp028                                 92
     C                   endif
      *
     C                   if        *in92 = *off and fcefdt >= ldbpdt            If something
     C                   z-add     fchdrt        oghdrt
     C                   z-add     fcefdt        ogefdt
     C                   endif                                                  If something
      *
      * If you could not find any Farm Cost, it is an error. So, write
      * the farm to an array holding the 'error' farms. You will use
      * this at the end of the program to print a listing of farms in error.
      *
     C                   if        oghdrt = 0
     C                   move      yes           xxerror
      *
     C                   z-add     1             x
     C     wdorfscd      lookup    arrfscd(x)                             92
     C                   if        *in92 = *off                                 If not there
     C                   add       1             y
     C                   z-add     wdorfscd      arrfscd(y)
     C                   endif                                                  If not there
      *
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------------------------------
      * Create Summarized Expense records
      *---------------------------------------------------------------------------------------
      *
     C     $sumexp       begsr
      *
     C     *loval        setll     hsp358
      *
     C                   dou       *in90 = *on                                  Do summary
     C                   read(n)   hsp358                                 90
     C                   if        *in90 = *off                                 If read
      *
     C                   select
     C                   when      first = yes
     C                   move      no            first
     C                   z-add     oehgsn        svhgsn
     C                   z-add     oercdt        svrcdt
     C                   move      oeexcd        svexcd
     C                   z-add     0             wkxtam
      *
     C                   when      oehgsn <> svhgsn or
     C                             oercdt <> svrcdt or
     C                             oeexcd <> svexcd
     C                   exsr      $wrt361
     C                   endsl
      *
     C                   add       oextam        wkxtam
      *
     C                   endif                                                  If read
     C                   enddo                                                  Do summary
      *
      * Write out last summarized record
      *
     C                   if        first = no
     C                   exsr      $wrt361
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------------------------------
      * Write a summarized expense record
      *---------------------------------------------------------------------------------------
      *
     C     $wrt361       begsr
      *
      * Populate fields and then write the Origin Group Summarized Expense record
      *
     C                   z-add     ldccyy        osacyr
     C                   z-add     ldper         osacpe
      *
     C                   z-add     svrcdt        osrcdt
     C                   z-add     svhgsn        oshgsn
     C                   move      svexcd        osexcd
     C                   z-add     wkxtam        osxtam
      *
     C                   write     osrec
     C                   clear                   osrec
      *
     C                   z-add     0             wkxtam
     C                   z-add     oehgsn        svhgsn
     C                   z-add     oercdt        svrcdt
     C                   move      oeexcd        svexcd
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------------------------------
      * Write an Origin Group record
      *---------------------------------------------------------------------------------------
      *
     C     $wrt352       begsr
      *
     C                   z-add     ldccyy        ogacyr
     C                   z-add     ldper         ogacpe
      *
     C                   z-add     wdrcdt        ogrcdt
     C                   move      wdorppcd      ogppcd
     C                   z-add     wdorfscd      ogfscd
     C                   z-add     wdorhgsn      oghgsn
      * Expense
     C                   z-add     wkxtam        ogxtam
      * Feed
     C                   z-add     wkfdlb        ogfdlb
     C                   z-add     wkftam        ogftam
      * Cull sale
     C                   z-add     wkcuam        ogcuam
     C                   z-add     wkculvhd      ogculvhd
     C                   z-add     wkculvlb      ogculvlb
      *
      * Daily dead
     C                   z-add     wkddhd        ogddhd
     C                   z-add     wkddlb        ogddlb
      * DOA
     C                   z-add     wkdoahd       ogdoahd
     C                   z-add     wkdoalb       ogdoalb
      * KOA
     C                   z-add     wkkoahd       ogkoahd
     C                   z-add     wkkoalb       ogkoalb
      *
      * Inventory adjustment
     C                   z-add     wkiahd        ogiahd
      *
      * If the origin group is not BGF, retrieve its Open Date.
      *
     C                   z-add     0             ogopdt
     C                   if        wdorppcd <> 'BGF  '
     C     wdorhgsn      chain     hsl034d                            92
     C                   if        *in92 = *off
     C                   z-add     hgopdt        ogopdt
     C                   endif
     C                   endif
      *
     C                   write     ogrec
     C                   clear                   ogrec
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *
     C     *entry        plist
     C                   parm                    xxerror
      *
     C     plist01       plist
     C                   parm                    wdorhgsn
     C                   parm                    zzcymd
      * Head
     C                   parm                    gpihd                          GROUP INV
     C                   parm                    pinhd                          PIG IN
     C                   parm                    tinhd                          TRSF IN
     C                   parm                    tisphd                         SAME PHASE
     C                   parm                    tidphd                         DIFF PHASE
     C                   parm                    pouhd                          PIGS OUT
     C                   parm                    touhd                          TRSF OUT
     C                   parm                    tosphd                         SAME PHASE
     C                   parm                    tosphd                         DIFF PHASE
     C                   parm                    rinhd                          REJECT IN
     C                   parm                    rouhd                          REJECT OUT
     C                   parm                    qinhd                          QUALITY IN
     C                   parm                    qouhd                          QUALITY OUT
     C                   parm                    morhd                          MORTALITY
     C                   parm                    inahd                          INV ADJ
      * Pounds
     C                   parm                    pinlb                          PIG IN
     C                   parm                    tinlb                          TRSF IN
     C                   parm                    tisplb                         SAME PHASE
     C                   parm                    tidplb                         DIFF PHASE
     C                   parm                    poulb                          PIG OUT
     C                   parm                    toulb                          TRSF OUT
     C                   parm                    tosplb                         SAME PHASE
     C                   parm                    todplb                         DIFF PHASE
     C                   parm                    rinlb                          REJECT IN
     C                   parm                    roulb                          REJECT OUT
     C                   parm                    qinlb                          QUALITY IN
     C                   parm                    qoulb                          QUALITY OUT
     C                   parm                    morlb                          MORTALITY
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    wdorhgsn
     C                   kfld                    wdrcdt
      *
     C     key02         klist
     C                   kfld                    wdorfscd
     C                   kfld                    wdrcdt
      *
     C     key03         klist
     C                   kfld                    sgmvsn
     C                   kfld                    wdorhgsn
      *
     C     key04         klist
     C                   kfld                    wdrcdt
     C                   kfld                    wdorhgsn
      *
     C     key05         klist
     C                   kfld                    cdchdt
     C                   kfld                    cdcvno
     C                   kfld                    cdchno
     C                   kfld                    cdlnno
      *
      * Set up heading values
      *
     C                   time                    rtime
      *
     C                   endsr
      /EJECT
      *-------------------------------------------------------------
      * Report heading lines
      *-------------------------------------------------------------
      *
     Oqprint    e            h1hdr          1 01
     O                       sdpgm               10
     O                                           52 'HOG PRODUCTION SYSTEM'
     O                                           75 'DATE'
     O                       udate         y     85
      *
     O          e            h1hdr          1
     O                       sdusr               10
     O                                           44 'COSTING MOVEMENTS:'
     O                                           58 'ERROR LISTING'
     O                                           75 'TIME'
     O                       rtime               85 '  :  :  '
      *
     O          e            h1hdr          1
     O                                           75 'PAGE'
     O                       page          z     85
      *
      *
     O          e            h1hdr          2
     O                                            7 'PERIOD:'
     O                       ldper         m     11
     O                       ldbmdy        y     20
     O                                           23 'TO'
     O                       ldemdy        y     32
      *
     O          e            h1hdr          1
     O                       dash                85
      *
      *-------------------------------------------------------------
      * Detail line
      *-------------------------------------------------------------
      *
     O          e            l1dtl       1
     O                       l1msg               78
     O              n87      arrfscd (x)   z     85
      *
      /EJECT
