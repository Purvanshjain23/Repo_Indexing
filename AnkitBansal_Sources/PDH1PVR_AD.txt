// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDH1PVR
// ?Date: 14.08.2025 Time: 03:34:43
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('I/C');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(Rtv Allow Multi-Whs   RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1512192;
PARAMETER(JOB.*USER);
PARAMETER(PAR.Allow_Multi_Warehouse);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

//?USER: Load screen

CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

// DTL.Company Number = PAR.Company Number
DTL.Company_Number = PAR.Company_Number;

// DTL.Warehouse Code = PAR.Warehouse Code
DTL.Warehouse_Code = PAR.Warehouse_Code;

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

ENDIF;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


//?USER: Validate fields

//?SEL:  To Location Code
CASE;

// IF PGM.*Cursor field <IS> DTL.Location Code USR
IF PGM.*Cursor_field = DTL.Location_Code_USR;

// AND DTL.*CMD key is *Prompt
AND DTL.*CMD_key = '04';

// Call program Sel Whs Location      SR.
CALL PROGRAM(Sel Whs Location      SR) ('PDHSSRR');
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Location_Code_USR);

ENDIF;

EXECUTE FUNCTION(Rtv Lot/Loc/Lvl Info  RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC1527052;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Production_Date);
PARAMETER(DTL.Lot_Number);
PARAMETER(DTL.Location_Code);
PARAMETER(DTL.Location_Level);
PARAMETER(DTL.ILL_Item_Qty_On_Hand);
PARAMETER(DTL.ILL_Unit_Weight);
PARAMETER(DTL.ILL_Avail_Ship_Date);
PARAMETER(DTL.ILL_Unused_Date_1);
PARAMETER(DTL.ILL_Status);
PARAMETER(DTL.Inv_Hold_Reason_Code);
PARAMETER(PAR.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


//?LLT Trans Qty
CASE;

// IF DTL.LLT Trans Qty is GT Zero
IF DTL.LLT_Transaction_Qty > *ZERO;

//?LLT Trans Qty
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.LLT Trans Qty = DTL.ILL Item Qty On-Hand
DTL.LLT_Transaction_Qty = DTL.ILL_Item_Qty_On_Hand;

ENDIF;

//?IC Item Lot Location   NF
CASE;

// IF PAR.Record Found USR is Record Not Found
IF PAR.Record_Found_USR = 'N';

// Send error message - 'Item Lot Location not found.'
ERROR(USR2634);
MSGPARM(DTL.Lot_Number);
MSGPARM(DTL.Location_Code);
MSGPARM(DTL.ILL_Location_Level);

ENDIF;

//?Init:  To Location Level
CASE;

// IF DTL.Item Code is Pancreas
IF DTL.Item_Code = 93210;

// DTL.Location Level USR = CON.1
DTL.Location_Level_USR = 1;

ENDIF;

//?VAL:  To Location Code
CASE;

// IF DTL.Location Code USR NE WRK.BLANK
IF DTL.Location_Code_USR <> WRK.BLANK;

EXECUTE FUNCTION(Val Location Exists   RT) TYPE(RTVOBJ) FILE(PDL2REP)           AC1513682;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Location_Code_USR);
PARAMETER(PAR.Record_Found_PS_CD_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found -PS CD USR = CND.Record Not Found
 PAR.Record_Found_PS_CD_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found -PS CD USR = CND.Record Found
 PAR.Record_Found_PS_CD_USR = 'Y';

}


CASE;

// IF PAR.Record Found -PS CD USR is Record Not Found
IF PAR.Record_Found_PS_CD_USR = 'N';

// Send error message - 'Warehouse Location &2 does not exist for Warehouse &1.'
ERROR(USR2705);
MSGPARM(DTL.Warehouse_Code);
MSGPARM(DTL.Location_Code_USR);

ENDIF;

ENDIF;

//?VAL:  To Location Level
CASE;

// IF DTL.Location Level USR is 0 through 5
IF DTL.Location_Level_USR >= 0;
AND DTL.Location_Level_USR <= 5;

//?VAL:  To Location Level
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Level must be between 0 and 5.'
ERROR(USR3135);
MSGPARM(DTL.Location_Level_USR);

ENDIF;

//?VAL:  Transfer Quantity
CASE;

// IF DTL.LLT Trans Qty GT DTL.ILL Item Qty On-Hand
IF DTL.LLT_Transaction_Qty > DTL.ILL_Item_Qty_On_Hand;

// Send error message - 'Transfer Quantity &1 cannot exceed the Quantity on Hand &2.'
ERROR(USR2704);
MSGPARM(DTL.LLT_Transaction_Qty);
MSGPARM(DTL.ILL_Item_Qty_On_Hand);

ENDIF;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


//?CALC: Screen function fields

EXECUTE FUNCTION(Item Desc DRV) TYPE(DRVFLD)                                    AC1505592;
PARAMETER(DTL.Item_Desc_DRV);
PARAMETER(DTL.Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Desc_DRV);
 PARAMETER(WRK.Description_Line_Two);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: User defined action

//?WI517 DN 10/12/23-Setup Eradani's Environment Libraries.
// Call program Upd Setup Eradani Libs CL.
CALL PROGRAM(Upd Setup Eradani Libs CL) ('PVBFUPC');

EXECUTE FUNCTION(Relocate Item         IF) TYPE(EXCINTFUN)                      AC1510640;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Production_Date);
PARAMETER(DTL.Lot_Number);
PARAMETER(DTL.Location_Code);
PARAMETER(DTL.Location_Level);
PARAMETER(DTL.ILL_Unit_Weight);
PARAMETER(DTL.ILL_Avail_Ship_Date);
PARAMETER(DTL.ILL_Unused_Date_1);
PARAMETER(DTL.ILL_Status);
PARAMETER(DTL.Inv_Hold_Reason_Code);
PARAMETER(DTL.Location_Code_USR);
PARAMETER(DTL.Location_Level_USR);
PARAMETER(DTL.LLT_Transaction_Qty);
PARAMETER(DTL.Warehouse_Code);
PARAMETER('R');
{
 //?Execute internal function

 // Send status message - 'Processing...'
 MESSAGE(USR2303 *STATUS);

 //?Update From Lot/Location
 // PAR.Quantity Loc Trans USR = PAR.LLT Trans Qty * CON.-1 *
 PAR.Quantity_Loc_Trans_USR = PAR.LLT_Transaction_Qty * -1;

 EXECUTE FUNCTION(Crt Item Lot/Loc Trns IF) TYPE(EXCINTFUN)                      AC1510270;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER('T');
 PARAMETER(JOB.*Job_date);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Quantity_Loc_Trans_USR);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Lot_Number);
 PARAMETER(PAR.Location_Code);
 PARAMETER(PAR.Location_Level);
 PARAMETER(PAR.Transfer_Warehouse_Code);
 PARAMETER(PAR.Lot_Number);
 PARAMETER(PAR.Location_Code_USR);
 PARAMETER(PAR.Location_Level_USR);
 PARAMETER(*ZERO);
 PARAMETER('P');
 PARAMETER(WRK.LTT_Unused_Sts_1);
 PARAMETER(WRK.LTT_Unused_Sts_2);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Seq #        RT) TYPE(RTVOBJ) FILE(PDL7CPP)           AC1510279;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.LLT_Transaction_Type);
  PARAMETER(PAR.LLT_Transaction_Date);
  PARAMETER(PAR.LLT_Sequence_Number);
  {
   //?USER: Processing if Data record not found

   // PAR.LLT Sequence # = CON.1
   PAR.LLT_Sequence_Number = 1;

   //?USER: Process Data record

   // PAR.LLT Sequence # = DB1.LLT Sequence # + CON.1
   PAR.LLT_Sequence_Number = DB1.LLT_Sequence_Number + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Item Lot/Loc Trns CR) TYPE(CRTOBJ) FILE(PDL7CPP)           AC1505285;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.LLT_Transaction_Type);
  PARAMETER(PAR.LLT_Transaction_Date);
  PARAMETER(PAR.LLT_Sequence_Number);
  PARAMETER(PAR.LLT_Production_Date);
  PARAMETER(PAR.LLT_Transaction_Qty);
  PARAMETER(PAR.LLT_Transaction_Wgt);
  PARAMETER(PAR.LLT_Lot_Number);
  PARAMETER(PAR.Location_Code);
  PARAMETER(PAR.LLT_Location_Level);
  PARAMETER(PAR.Transfer_Warehouse_Code);
  PARAMETER(PAR.LLT_Transfer_Lot_Number);
  PARAMETER(PAR.Transfer_Location_Code);
  PARAMETER(PAR.LLT_Transfer_Loc_Level);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.LLT_Status);
  PARAMETER(PAR.LTT_Unused_Sts_1);
  PARAMETER(PAR.LTT_Unused_Sts_2);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 EXECUTE FUNCTION(Upd ReLoc Qty On-Hand RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC1512889;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Lot_Number);
 PARAMETER(PAR.Location_Code);
 PARAMETER(PAR.Location_Level);
 PARAMETER(PAR.ILL_Unit_Weight);
 PARAMETER(PAR.ILL_Avail_Ship_Date);
 PARAMETER(PAR.ILL_Unused_Date_1);
 PARAMETER(PAR.ILL_Status);
 PARAMETER(PAR.Inv_Hold_Reason_Code);
 PARAMETER(PAR.Quantity_Loc_Trans_USR);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt Item Loc          CR) TYPE(CRTOBJ) FILE(PDL5CPP)           AC1505603;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Lot_Number);
  PARAMETER(PAR.Location_Code);
  PARAMETER(PAR.Location_Level);
  PARAMETER(PAR.Quantity_Loc_Trans_USR);
  PARAMETER(PAR.ILL_Unit_Weight);
  PARAMETER(PAR.ILL_Co_Packer_Lot_Num);
  PARAMETER(PAR.ILL_Item_Wgt_On_Hand);
  PARAMETER(PAR.ILL_Unused_Qty_3);
  PARAMETER(PAR.ILL_Unused_Wgt_3);
  PARAMETER(PAR.ILL_Avail_Ship_Date);
  PARAMETER(PAR.ILL_Unused_Date_1);
  PARAMETER(PAR.ILL_Unused_Date_2);
  PARAMETER(PAR.ILL_Unused_Nbr_1);
  PARAMETER(PAR.ILL_Customer_Code);
  PARAMETER(PAR.ILL_Status);
  PARAMETER(PAR.ILL_Unused_Sts_1);
  PARAMETER(PAR.ILL_Unused_Sts_2);
  PARAMETER(PAR.ILL_Unused_Sts_3);
  PARAMETER(PAR.Inv_Hold_Reason_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.ILL Item Qty On-Hand = DB1.ILL Item Qty On-Hand + PAR.Quantity Loc Trans USR
  PAR.ILL_Item_Qty_On_Hand = DB1.ILL_Item_Qty_On_Hand + PAR.Quantity_Loc_Trans_USR;

  CASE;

  // IF PAR.ILL Item Qty On-Hand is GT Zero
  IF PAR.ILL_Item_Qty_On_Hand > *ZERO;

  EXECUTE FUNCTION(Chg Quantity On-Hand  CH) TYPE(CHGOBJ) FILE(PDL5CPP)           AC1512891;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Lot_Number);
  PARAMETER(DB1.Location_Code);
  PARAMETER(DB1.Location_Level);
  PARAMETER(PAR.ILL_Item_Qty_On_Hand);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Del Item Location     DL) TYPE(DLTOBJ) FILE(PDL5CPP)           AC1517026;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Lot_Number);
  PARAMETER(DB1.Location_Code);
  PARAMETER(DB1.Location_Level);
  EXECUTE FUNCTION(Del Item Balance Dtl  RT) TYPE(RTVOBJ) FILE(CAB1REP)           AC1544110;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Production_Date);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Quantity on Hand - U/M1 is Equal to zero
   IF DB1.Quantity_on_Hand_UOM1 = *ZERO;

   EXECUTE FUNCTION(Del Item Balance Dtl  DL) TYPE(DLTOBJ) FILE(CAB1REP)           AC1544111;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Production_Date);
   ENDIF;

  }

  ENDIF;

 }

 //?Create To Lot/Location
 EXECUTE FUNCTION(Val Location Exists   RT) TYPE(RTVOBJ) FILE(PDL2REP)           AC1513682;
 PARAMETER(PAR.Transfer_Warehouse_Code);
 PARAMETER(PAR.Location_Code_USR);
 PARAMETER(LCL.Record_Found_PS_CD_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found -PS CD USR = CND.Record Not Found
  PAR.Record_Found_PS_CD_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found -PS CD USR = CND.Record Found
  PAR.Record_Found_PS_CD_USR = 'Y';

 }

 //?Create Warehouse Location if one does not exist.
 CASE;

 // IF LCL.Record Found -PS CD USR is Record Not Found
 IF LCL.Record_Found_PS_CD_USR = 'N';

 // LCL.Location Aisle = SUBSTRING(PAR.Location Code USR,CON.1,CON.1)
 LCL.Location_Aisle = SUBSTRING(PAR.Location_Code_USR:1:1);

 // LCL.Location Bay Alpha = SUBSTRING(PAR.Location Code USR,CON.2,CON.2)
 LCL.Location_Bay_Alpha = SUBSTRING(PAR.Location_Code_USR:2:2);

 // LCL.Location Bay = CVTVAR(LCL.Location Bay Alpha)
 LCL.Location_Bay = CVTVAR(LCL.Location_Bay_Alpha);

 EXECUTE FUNCTION(Crt Whs Location      CR) TYPE(CRTOBJ) FILE(PDL2REP)           AC1505238;
 PARAMETER(PAR.Transfer_Warehouse_Code);
 PARAMETER(PAR.Location_Code_USR);
 PARAMETER(LCL.Location_Aisle);
 PARAMETER(LCL.Location_Bay);
 PARAMETER(*ZERO);
 PARAMETER(WRK.WL_Unused_Sts_1);
 PARAMETER(WRK.WL_Unused_Sts_2);
 PARAMETER(WRK.WL_PFS_Zone);
 PARAMETER('F');
 PARAMETER(WRK.EDI_Status_1);
 PARAMETER(WRK.EDI_Status_2);
 PARAMETER(WRK.EDI_Status_3);
 PARAMETER(WRK.Record_Status);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 EXECUTE FUNCTION(Clc Loc Avail Shp Dte IF) TYPE(EXCINTFUN)                      AC1510130;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Location_Code_USR);
 PARAMETER(PAR.Avail_Ship_Date_USR);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Loc Type          RT) TYPE(RTVOBJ) FILE(PDL2REP)           AC1510129;
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Location_Code);
  PARAMETER(PAR.WLT_Type_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Chill Time        RT) TYPE(RTVOBJ) FILE(PDL3REP)           AC1510134;
  PARAMETER(PAR.WLT_Type_Code);
  PARAMETER(PAR.WLT_Type_Chill_Time);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.ILL Avail Ship Date = PAR.Production Date + PAR.WLT Type Chill Time *DAYS
  PAR.ILL_Avail_Ship_Date = DATEINCR(PAR.Production_Date PAR.WLT_Type_Chill_Time 'DY'
  1111111 'NONE' 'N' 1);

 }

 //?To Location Available Ship Date
 CASE;

 // IF PAR.Avail Ship Date USR LT PAR.ILL Avail Ship Date
 IF PAR.Avail_Ship_Date_USR < PAR.ILL_Avail_Ship_Date;

 // PAR.ILL Avail Ship Date = PAR.Avail Ship Date USR
 PAR.ILL_Avail_Ship_Date = PAR.Avail_Ship_Date_USR;

 ENDIF;

 EXECUTE FUNCTION(Crt Item Lot/Loc Trns IF) TYPE(EXCINTFUN)                      AC1510270;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Transfer_Warehouse_Code);
 PARAMETER('RT');
 PARAMETER(JOB.*Job_date);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.LLT_Transaction_Qty);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Lot_Number);
 PARAMETER(PAR.Location_Code_USR);
 PARAMETER(PAR.Location_Level_USR);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Lot_Number);
 PARAMETER(PAR.Location_Code);
 PARAMETER(PAR.Location_Level);
 PARAMETER(*ZERO);
 PARAMETER('P');
 PARAMETER(WRK.LTT_Unused_Sts_1);
 PARAMETER(WRK.LTT_Unused_Sts_2);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Seq #        RT) TYPE(RTVOBJ) FILE(PDL7CPP)           AC1510279;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.LLT_Transaction_Type);
  PARAMETER(PAR.LLT_Transaction_Date);
  PARAMETER(PAR.LLT_Sequence_Number);
  {
   //?USER: Processing if Data record not found

   // PAR.LLT Sequence # = CON.1
   PAR.LLT_Sequence_Number = 1;

   //?USER: Process Data record

   // PAR.LLT Sequence # = DB1.LLT Sequence # + CON.1
   PAR.LLT_Sequence_Number = DB1.LLT_Sequence_Number + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Item Lot/Loc Trns CR) TYPE(CRTOBJ) FILE(PDL7CPP)           AC1505285;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.LLT_Transaction_Type);
  PARAMETER(PAR.LLT_Transaction_Date);
  PARAMETER(PAR.LLT_Sequence_Number);
  PARAMETER(PAR.LLT_Production_Date);
  PARAMETER(PAR.LLT_Transaction_Qty);
  PARAMETER(PAR.LLT_Transaction_Wgt);
  PARAMETER(PAR.LLT_Lot_Number);
  PARAMETER(PAR.Location_Code);
  PARAMETER(PAR.LLT_Location_Level);
  PARAMETER(PAR.Transfer_Warehouse_Code);
  PARAMETER(PAR.LLT_Transfer_Lot_Number);
  PARAMETER(PAR.Transfer_Location_Code);
  PARAMETER(PAR.LLT_Transfer_Loc_Level);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.LLT_Status);
  PARAMETER(PAR.LTT_Unused_Sts_1);
  PARAMETER(PAR.LTT_Unused_Sts_2);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 EXECUTE FUNCTION(Upd ReLoc Qty On-Hand RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC1512889;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Transfer_Warehouse_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Lot_Number);
 PARAMETER(PAR.Location_Code_USR);
 PARAMETER(PAR.Location_Level_USR);
 PARAMETER(PAR.ILL_Unit_Weight);
 PARAMETER(PAR.ILL_Avail_Ship_Date);
 PARAMETER(PAR.ILL_Unused_Date_1);
 PARAMETER(PAR.ILL_Status);
 PARAMETER(PAR.Inv_Hold_Reason_Code);
 PARAMETER(PAR.LLT_Transaction_Qty);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt Item Loc          CR) TYPE(CRTOBJ) FILE(PDL5CPP)           AC1505603;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Lot_Number);
  PARAMETER(PAR.Location_Code);
  PARAMETER(PAR.Location_Level);
  PARAMETER(PAR.Quantity_Loc_Trans_USR);
  PARAMETER(PAR.ILL_Unit_Weight);
  PARAMETER(PAR.ILL_Co_Packer_Lot_Num);
  PARAMETER(PAR.ILL_Item_Wgt_On_Hand);
  PARAMETER(PAR.ILL_Unused_Qty_3);
  PARAMETER(PAR.ILL_Unused_Wgt_3);
  PARAMETER(PAR.ILL_Avail_Ship_Date);
  PARAMETER(PAR.ILL_Unused_Date_1);
  PARAMETER(PAR.ILL_Unused_Date_2);
  PARAMETER(PAR.ILL_Unused_Nbr_1);
  PARAMETER(PAR.ILL_Customer_Code);
  PARAMETER(PAR.ILL_Status);
  PARAMETER(PAR.ILL_Unused_Sts_1);
  PARAMETER(PAR.ILL_Unused_Sts_2);
  PARAMETER(PAR.ILL_Unused_Sts_3);
  PARAMETER(PAR.Inv_Hold_Reason_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.ILL Item Qty On-Hand = DB1.ILL Item Qty On-Hand + PAR.Quantity Loc Trans USR
  PAR.ILL_Item_Qty_On_Hand = DB1.ILL_Item_Qty_On_Hand + PAR.Quantity_Loc_Trans_USR;

  CASE;

  // IF PAR.ILL Item Qty On-Hand is GT Zero
  IF PAR.ILL_Item_Qty_On_Hand > *ZERO;

  EXECUTE FUNCTION(Chg Quantity On-Hand  CH) TYPE(CHGOBJ) FILE(PDL5CPP)           AC1512891;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Lot_Number);
  PARAMETER(DB1.Location_Code);
  PARAMETER(DB1.Location_Level);
  PARAMETER(PAR.ILL_Item_Qty_On_Hand);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Del Item Location     DL) TYPE(DLTOBJ) FILE(PDL5CPP)           AC1517026;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Lot_Number);
  PARAMETER(DB1.Location_Code);
  PARAMETER(DB1.Location_Level);
  EXECUTE FUNCTION(Del Item Balance Dtl  RT) TYPE(RTVOBJ) FILE(CAB1REP)           AC1544110;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Production_Date);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Quantity on Hand - U/M1 is Equal to zero
   IF DB1.Quantity_on_Hand_UOM1 = *ZERO;

   EXECUTE FUNCTION(Del Item Balance Dtl  DL) TYPE(DLTOBJ) FILE(CAB1REP)           AC1544111;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Production_Date);
   ENDIF;

  }

  ENDIF;

 }

 //?** Process Auto-Locate Whse inventory added       FP1127
 //?Transfer Item Balance/Item Balance Detail.
 CASE;

 // IF PAR.Reloc/Trans STS USR is Transfer
 IF PAR.Reloc_Trans_STS_USR = 'T';

 EXECUTE FUNCTION(RTV Next Tran Batch #  CH) TYPE(CHGOBJ) FILE(CAASREP)          AC1313177;
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.Transfer_Batch_Number);
 {
  //?USER: Processing after Data read

  // PGM.*Record Data Changed = CND.*YES
  PGM.*Record_Data_Changed = 'Y';

  //?USER: Processing before Data update

  // PAR.Transfer Batch Number = DB1.Next Batch Number
  PAR.Transfer_Batch_Number = DB1.Next_HPB_Batch_Number;

  // DB1.Next Batch Number = DB1.Next Batch Number + CON.1
  DB1.Next_HPB_Batch_Number = DB1.Next_HPB_Batch_Number + 1;

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 // LCL.Transaction Quantity = PAR.LLT Trans Qty
 LCL.Transaction_Quantity = PAR.LLT_Transaction_Qty;

 EXECUTE FUNCTION(RTV Label Date         RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1479448;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Label_Date);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Base Values        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1125011;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Description_Line_One);
 PARAMETER(LCL.Description_Line_Two);
 PARAMETER(LCL.UOM_Primary);
 PARAMETER(LCL.Conversion_Factor_1);
 PARAMETER(LCL.Operation_Factor_1);
 PARAMETER(LCL.UOM_Second);
 PARAMETER(LCL.Conversion_Factor_2);
 PARAMETER(LCL.Operation_Factor_2);
 PARAMETER(LCL.UOM_Third);
 PARAMETER(LCL.UOM_Pricing);
 PARAMETER(LCL.Unit_Weight);
 PARAMETER(LCL.Production_Date_Control);
 PARAMETER(LCL.Catch_Weight_Status);
 PARAMETER(LCL.Fresh_Chilling_Time);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Clc Convert Weight     XF) TYPE(EXCINTFUN)                     AC1215306;
 PARAMETER(LCL.UOM_Primary);
 PARAMETER(LCL.Conversion_Factor_1);
 PARAMETER(LCL.Operation_Factor_1);
 PARAMETER(LCL.UOM_Second);
 PARAMETER(LCL.Conversion_Factor_2);
 PARAMETER(LCL.Operation_Factor_2);
 PARAMETER(LCL.UOM_Third);
 PARAMETER(LCL.UOM_Transaction);
 PARAMETER(LCL.Unit_Weight);
 PARAMETER(LCL.USR_Weight_based_on_U_M1);
 PARAMETER(LCL.USR_Weight_based_on_U_M2);
 PARAMETER(LCL.USR_Weight_based_on_U_M3);
 {
  //?Execute internal function

  // PAR.USR Weight based on U/M1 = CON.*ZERO
  PAR.USR_Weight_based_on_U_M1 = *ZERO;

  // PAR.USR Weight based on U/M2 = CON.*ZERO
  PAR.USR_Weight_based_on_U_M2 = *ZERO;

  // PAR.USR Weight based on U/M3 = CON.*ZERO
  PAR.USR_Weight_based_on_U_M3 = *ZERO;

  // PAR.USR Weight based on U/M1 = PAR.Transaction Weight
  PAR.USR_Weight_based_on_U_M1 = PAR.Transaction_Weight;

  //?Process entered U/M2
  CASE;

  // IF PAR.U/M - Second is Entered
  IF PAR.UOM_Second <> *BLANK;

  //?Convert based on operation factor
  CASE;

  // IF PAR.Operation Factor 1 is Multiply
  IF PAR.Operation_Factor_1 = 'M';

  CASE;

  // IF PAR.Conversion Factor 1 is Entered
  IF PAR.Conversion_Factor_1 <> *ZERO;

  // WRK.USR Weight = PAR.Transaction Weight / PAR.Conversion Factor 1 *Rounded
  WRK.USR_Weight = PAR.Transaction_Weight / PAR.Conversion_Factor_1 'H';

  ENDIF;

  //?Convert based on operation factor
  // IF PAR.Operation Factor 1 is Divide
  IF PAR.Operation_Factor_1 = 'D';

  // WRK.USR Weight = PAR.Transaction Weight * PAR.Conversion Factor 1 *Rounded
  WRK.USR_Weight = PAR.Transaction_Weight * PAR.Conversion_Factor_1 'H';

  ENDIF;

  // PAR.USR Weight based on U/M2 = WRK.USR Weight
  PAR.USR_Weight_based_on_U_M2 = WRK.USR_Weight;

  ENDIF;

  //?Process entered U/M3
  CASE;

  // IF PAR.U/M - Third is Entered
  IF PAR.UOM_Third <> *BLANK;

  //?Convert based on operation factor
  CASE;

  // IF PAR.Operation Factor 2 is Multiply
  IF PAR.Operation_Factor_2 = 'M';

  CASE;

  // IF PAR.Conversion Factor 2 is Entered
  IF PAR.Conversion_Factor_2 <> *ZERO;

  // PAR.USR Weight based on U/M3 = WRK.USR Weight / PAR.Conversion Factor 2 *Rounded
  PAR.USR_Weight_based_on_U_M3 = WRK.USR_Weight / PAR.Conversion_Factor_2 'H';

  ENDIF;

  //?Convert based on operation factor
  // IF PAR.Operation Factor 2 is Divide
  IF PAR.Operation_Factor_2 = 'D';

  // PAR.USR Weight based on U/M3 = WRK.USR Weight * PAR.Conversion Factor 2 *Rounded
  PAR.USR_Weight_based_on_U_M3 = WRK.USR_Weight * PAR.Conversion_Factor_2 'H';

  ENDIF;

  ENDIF;

 }

 // LCL.Transaction Weight = LCL.Transaction Quantity * LCL.USR Weight based on U/M1 *Rounded
 LCL.Transaction_Weight = LCL.Transaction_Quantity * LCL.USR_Weight_based_on_U_M1 'H';

 EXECUTE FUNCTION(Rtv Status/Default     RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC1152524;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(LCL.Unit_Cost_Per_Pound);
 PARAMETER(LCL.Cost_Update_Pending);
 PARAMETER(LCL.Post_GL_Status);
 PARAMETER(LCL.Vendor_Item_Whse_Default);
 PARAMETER(LCL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Status/Default     RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC1152524;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Transfer_Warehouse_Code);
 PARAMETER(LCL.Unit_Cost_Detail);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(LCL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?** Add: Process Auto-Locate Whse inventory             FP1127
 //?9/29/23 DN WI517-Added Parm 'Inventory Updated USR',
 //?  'Called From Program' & 'API was Called? U'.
 EXECUTE FUNCTION(UPD Balances Transfer  IF) TYPE(EXCINTFUN)                     AC1413797;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Label_Date);
 PARAMETER('T');
 PARAMETER('TW');
 PARAMETER(JOB.*Job_date);
 PARAMETER(LCL.UOM_Primary);
 PARAMETER('IC');
 PARAMETER('Warehouse Transfer');
 PARAMETER(LCL.Transaction_Quantity);
 PARAMETER(LCL.Transaction_Weight);
 PARAMETER('LB');
 PARAMETER('TRF');
 PARAMETER(LCL.Transfer_Batch_Number);
 PARAMETER(LCL.Transfer_Batch_Sequence);
 PARAMETER(*ZERO);
 PARAMETER(1);
 PARAMETER(LCL.UOM_Primary);
 PARAMETER(LCL.Conversion_Factor_1);
 PARAMETER(LCL.Operation_Factor_1);
 PARAMETER(LCL.UOM_Second);
 PARAMETER(LCL.Conversion_Factor_2);
 PARAMETER(LCL.Operation_Factor_2);
 PARAMETER(LCL.UOM_Third);
 PARAMETER(LCL.Production_Date_Control);
 PARAMETER(LCL.Catch_Weight_Status);
 PARAMETER(LCL.Unit_Cost_Per_Pound);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Transfer_Warehouse_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Unit_Cost_Detail);
 PARAMETER('N');
 PARAMETER('N');
 PARAMETER(PAR.Lot_Number);
 PARAMETER(*ZERO);
 PARAMETER(NLL.Inventory_Updated_USR);
 PARAMETER(NLL.API_was_Called_U);
 PARAMETER('PDH1PVR');
 {
  //?Execute internal function

  //?NOTES: WI517 DN 10/09/23-Per Business (Ace C./Ryan H.), we will NOT
  //?       pass in the 'negative' Qty/Wgt when processing the WIM API.
  //?       WIM API logic will handle this scenario.
  //?WI517 DN 07/05/23-Get WIM Module Release Status.
  EXECUTE FUNCTION(Rtv Module Release Sts RT) TYPE(RTVOBJ) FILE(PUC6REP)          AC2212908;
  PARAMETER('WIM');
  PARAMETER(1);
  PARAMETER(LCL.Module_Release_Status);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   CASE;

   // IF DB1.Record Status is Active
   IF DB1.Record_Status = 'A';

   MOVE *ALL (To: PAR From: DB1);

   ENDIF;

  }

  // PAR.Inventory Updated USR = CND.No
  PAR.Inventory_Updated_USR = 'N';

  // PAR.API was Called? U = CND.No
  PAR.API_was_Called_U = 'N';

  //?WI517 DN 10/09/23-Save Original Transaction Qty/Wgt in LCL context.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Transaction Quantity = PAR.Transaction Quantity
  LCL.Transaction_Quantity = PAR.Transaction_Quantity;

  // LCL.Transaction Weight = PAR.Transaction Weight
  LCL.Transaction_Weight = PAR.Transaction_Weight;

  ENDIF;

  //?08/10/23 DN WI517-Call Existing Legacy Process.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.USR Reason Code = PAR.Reason Code
  PAR.USR_Reason_Code = PAR.Reason_Code;

  //?Error if FROM unit cost = 0
  CASE;

  // IF PAR.Unit Cost Pricing U/M EQ WRK.ZERO
  IF PAR.Unit_Cost_Per_Pound = WRK.ZERO;

  // PAR.USR Reason Code = CND.Error
  PAR.USR_Reason_Code = 'ERR';

  ENDIF;

  EXECUTE FUNCTION(Clc Convert Quantity   IF) TYPE(EXCINTFUN)                     AC1123260;
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Conversion_Factor_1);
  PARAMETER(PAR.Operation_Factor_1);
  PARAMETER(PAR.UOM_Second);
  PARAMETER(PAR.Conversion_Factor_2);
  PARAMETER(PAR.Operation_Factor_2);
  PARAMETER(PAR.UOM_Third);
  PARAMETER(PAR.UOM_Transaction);
  PARAMETER(PAR.Transaction_Quantity);
  PARAMETER(PAR.Quantity_based_on_U_M1_S);
  PARAMETER(PAR.Quantity_based_on_U_M2_S);
  PARAMETER(PAR.Quantity_based_on_U_M3_S);
  {
   //?Execute internal function

   //?Clear output parameters
   // PAR.USR Qty based on U/M1 = CON.*ZERO
   PAR.USR_Qty_based_on_U_M1 = *ZERO;

   // PAR.USR Qty based on U/M2 = CON.*ZERO
   PAR.USR_Qty_based_on_U_M2 = *ZERO;

   // PAR.USR Qty based on U/M3 = CON.*ZERO
   PAR.USR_Qty_based_on_U_M3 = *ZERO;

   //?Process based on transaction U/M
   CASE;

   // IF PAR.U/M - Primary EQ PAR.U/M - Transaction
   IF PAR.UOM_Primary = PAR.UOM_Transaction;

   // PAR.USR Qty based on U/M1 = PAR.Transaction Quantity
   PAR.USR_Qty_based_on_U_M1 = PAR.Transaction_Quantity;

   //?Process entered U/M2
   CASE;

   // IF PAR.U/M - Second is Entered
   IF PAR.UOM_Second <> *BLANK;

   //?Convert based on operation factor
   CASE;

   // IF PAR.Operation Factor 1 is Multiply
   IF PAR.Operation_Factor_1 = 'M';

   // PAR.Quantity based on U/M2 S = PAR.Transaction Quantity * PAR.Conversion Factor
   PAR.Quantity_based_on_U_M2_S = PAR.Transaction_Quantity * PAR.Conversion_Factor_1 'H';

   //?Convert based on operation factor
   // IF PAR.Operation Factor 1 is Divide
   IF PAR.Operation_Factor_1 = 'D';

   CASE;

   // IF PAR.Conversion Factor 1 is Entered
   IF PAR.Conversion_Factor_1 <> *ZERO;

   // PAR.Quantity based on U/M2 S = PAR.Transaction Quantity / PAR.Conversion Factor
   PAR.Quantity_based_on_U_M2_S = PAR.Transaction_Quantity / PAR.Conversion_Factor_1 'H';

   ENDIF;

   ENDIF;

   // PAR.Quantity based on U/M2 = PAR.Quantity based on U/M2 S
   PAR.USR_Qty_based_on_U_M2 = PAR.Quantity_based_on_U_M2_S;

   ENDIF;

   //?Process entered U/M3
   CASE;

   // IF PAR.U/M - Third is Entered
   IF PAR.UOM_Third <> *BLANK;

   //?Convert based on operation factor
   CASE;

   // IF PAR.Operation Factor 2 is Multiply
   IF PAR.Operation_Factor_2 = 'M';

   // PAR.Quantity based on U/M3 S = PAR.Quantity based on U/M2 S * PAR.Multiplier Two
   PAR.Quantity_based_on_U_M3_S = PAR.Quantity_based_on_U_M2_S * PAR.Conversion_Factor_2
   'H';

   //?Convert based on operation factor
   // IF PAR.Operation Factor 2 is Divide
   IF PAR.Operation_Factor_2 = 'D';

   CASE;

   // IF PAR.Conversion Factor 2 is Entered
   IF PAR.Conversion_Factor_2 <> *ZERO;

   // PAR.Quantity based on U/M3 S = PAR.Quantity based on U/M2 S / PAR.Conversion Fac
   PAR.Quantity_based_on_U_M3_S = PAR.Quantity_based_on_U_M2_S / PAR.Conversion_Factor_2
   'H';

   ENDIF;

   ENDIF;

   // PAR.Quantity based on U/M3 = PAR.Quantity based on U/M3 S
   PAR.USR_Qty_based_on_U_M3 = PAR.Quantity_based_on_U_M3_S;

   ENDIF;

   //?Process based on transaction U/M
   // IF PAR.U/M - Second EQ PAR.U/M - Transaction
   IF PAR.UOM_Second = PAR.UOM_Transaction;

   // PAR.Quantity based on U/M2 = PAR.Transaction Quantity
   PAR.USR_Qty_based_on_U_M2 = PAR.Transaction_Quantity;

   //?Convert based on operation factor
   CASE;

   // IF PAR.Operation Factor 1 is Multiply
   IF PAR.Operation_Factor_1 = 'M';

   CASE;

   // IF PAR.Conversion Factor 1 is Entered
   IF PAR.Conversion_Factor_1 <> *ZERO;

   // PAR.Quantity based on U/M1 = PAR.Transaction Quantity / PAR.Conversion Factor 1
   PAR.USR_Qty_based_on_U_M1 = PAR.Transaction_Quantity / PAR.Conversion_Factor_1 'H';

   ENDIF;

   //?Convert based on operation factor
   // IF PAR.Operation Factor 1 is Divide
   IF PAR.Operation_Factor_1 = 'D';

   // PAR.Quantity based on U/M1 = PAR.Transaction Quantity * PAR.Conversion Factor 1
   PAR.USR_Qty_based_on_U_M1 = PAR.Transaction_Quantity * PAR.Conversion_Factor_1 'H';

   ENDIF;

   //?Process entered U/M3
   CASE;

   // IF PAR.U/M - Third is Entered
   IF PAR.UOM_Third <> *BLANK;

   //?Convert based on operation factor
   CASE;

   // IF PAR.Operation Factor 2 is Multiply
   IF PAR.Operation_Factor_2 = 'M';

   // PAR.Quantity based on U/M3 S = PAR.Transaction Quantity * PAR.Conversion Factor
   PAR.Quantity_based_on_U_M3_S = PAR.Transaction_Quantity * PAR.Conversion_Factor_2 'H';

   //?Convert based on operation factor
   // IF PAR.Operation Factor 2 is Divide
   IF PAR.Operation_Factor_2 = 'D';

   CASE;

   // IF PAR.Conversion Factor 2 is Entered
   IF PAR.Conversion_Factor_2 <> *ZERO;

   // PAR.Quantity based on U/M3 S = PAR.Transaction Quantity / PAR.Conversion Factor
   PAR.Quantity_based_on_U_M3_S = PAR.Transaction_Quantity / PAR.Conversion_Factor_2 'H';

   ENDIF;

   ENDIF;

   // PAR.Quantity based on U/M3 = PAR.Quantity based on U/M3 S
   PAR.USR_Qty_based_on_U_M3 = PAR.Quantity_based_on_U_M3_S;

   ENDIF;

   //?Process based on transaction U/M
   // IF PAR.U/M - Third EQ PAR.U/M - Transaction
   IF PAR.UOM_Third = PAR.UOM_Transaction;

   // PAR.Quantity based on U/M3 = PAR.Transaction Quantity
   PAR.USR_Qty_based_on_U_M3 = PAR.Transaction_Quantity;

   //?Convert based on operation factor
   CASE;

   // IF PAR.Operation Factor 2 is Multiply
   IF PAR.Operation_Factor_2 = 'M';

   CASE;

   // IF PAR.Conversion Factor 2 is Entered
   IF PAR.Conversion_Factor_2 <> *ZERO;

   // PAR.Quantity based on U/M2 S = PAR.Transaction Quantity / PAR.Conversion Factor
   PAR.Quantity_based_on_U_M2_S = PAR.Transaction_Quantity / PAR.Conversion_Factor_2 'H';

   ENDIF;

   //?Convert based on operation factor
   // IF PAR.Operation Factor 2 is Divide
   IF PAR.Operation_Factor_2 = 'D';

   // PAR.Quantity based on U/M2 S = PAR.Transaction Quantity * PAR.Conversion Factor
   PAR.Quantity_based_on_U_M2_S = PAR.Transaction_Quantity * PAR.Conversion_Factor_2 'H';

   ENDIF;

   // PAR.Quantity based on U/M2 = PAR.Quantity based on U/M2 S
   PAR.USR_Qty_based_on_U_M2 = PAR.Quantity_based_on_U_M2_S;

   //?Convert based on operation factor
   CASE;

   // IF PAR.Operation Factor 1 is Multiply
   IF PAR.Operation_Factor_1 = 'M';

   CASE;

   // IF PAR.Conversion Factor 1 is Entered
   IF PAR.Conversion_Factor_1 <> *ZERO;

   // PAR.Quantity based on U/M1 = PAR.Quantity based on U/M2 S / PAR.Conversion Facto
   PAR.USR_Qty_based_on_U_M1 = PAR.Quantity_based_on_U_M2_S / PAR.Conversion_Factor_1 'H';

   ENDIF;

   //?Convert based on operation factor
   // IF PAR.Operation Factor 1 is Divide
   IF PAR.Operation_Factor_1 = 'D';

   // PAR.Quantity based on U/M1 = PAR.Quantity based on U/M2 S * PAR.Conversion Facto
   PAR.USR_Qty_based_on_U_M1 = PAR.Quantity_based_on_U_M2_S * PAR.Conversion_Factor_1 'H';

   ENDIF;

   ENDIF;

  }

  // PAR.Extended Amount = PAR.Unit Cost Pricing U/M * PAR.Transaction Weight *Rounde
  PAR.Extended_Amount = PAR.Unit_Cost_Per_Pound * PAR.Transaction_Weight 'H';

  //?Adjust sign of transaction based on transaction type
  CASE;

  // IF PAR.Inventory Trans. Type is Transfer Warehouse
  IF PAR.Inventory_Trans_Type = 'TW';

  // PAR.Transfer Batch Sequence = PAR.Transfer Batch Sequence + CON.1
  PAR.Transfer_Batch_Sequence = PAR.Transfer_Batch_Sequence + 1;

  // WRK.Transaction Weight = PAR.Transaction Weight
  WRK.Transaction_Weight = PAR.Transaction_Weight;

  // WRK.Transaction Quantity = PAR.Transaction Quantity
  WRK.Transaction_Quantity = PAR.Transaction_Quantity;

  CASE;

  // IF PAR.USR Unship Flag is yes
  IF PAR.USR_Unship_Flag = 'Y';

  //?if this is an Unship, reverse the TO whse qty/wgt (neg rct)
  // WRK.Transaction Quantity = CON.*ZERO - WRK.Transaction Quantity
  WRK.Transaction_Quantity = *ZERO - WRK.Transaction_Quantity;

  // WRK.Transaction Weight = CON.*ZERO - WRK.Transaction Weight
  WRK.Transaction_Weight = *ZERO - WRK.Transaction_Weight;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?if this is NOT an Unship, reverse the FROM whse qty, wgt (reverse issue)
  // PAR.Transaction Quantity = CON.*ZERO - PAR.Transaction Quantity
  PAR.Transaction_Quantity = *ZERO - PAR.Transaction_Quantity;

  // PAR.Quantity based on U/M1 S = CON.*ZERO - PAR.Quantity based on U/M1 S
  PAR.Quantity_based_on_U_M1_S = *ZERO - PAR.Quantity_based_on_U_M1_S;

  // PAR.Transaction Weight = CON.*ZERO - PAR.Transaction Weight
  PAR.Transaction_Weight = *ZERO - PAR.Transaction_Weight;

  // PAR.Extended Amount = CON.*ZERO - PAR.Extended Amount
  PAR.Extended_Amount = *ZERO - PAR.Extended_Amount;

  ENDIF;

  ENDIF;

  //?08/10/23 DN WI517-Call Legacy Process if Not Live or Parallel.
  CASE;

  // IF LCL.Module Release Status is Not Live
  IF LCL.Module_Release_Status = 'N';

  // OR LCL.Module Release Status is Parallel
  OR LCL.Module_Release_Status = 'P';

  //?09/26/23 DN WI517-Set 'Inventory Updated USR' Flag.
  // PAR.Inventory Updated USR = CND.Yes
  PAR.Inventory_Updated_USR = 'Y';

  //?**************************************************************************
  //?The following block of code will update Item Balance,
  //?Item Balance Detail and Transaction Detail for the FROM ITEM
  //?**************************************************************************
  EXECUTE FUNCTION(Rtv Item Typ/Grp/Cls  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1298334;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Sequence No.  RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1304410;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Inventory_Trans_ID);
  PARAMETER(PAR.Inventory_Trans_Type);
  PARAMETER(PAR.Transaction_Date_Code);
  PARAMETER(PAR.ITD_Sequence_Number);
  {
   //?USER: Processing if Data record not found

   // PAR.ITD Sequence Number = CON.1
   PAR.ITD_Sequence_Number = 1;

   //?USER: Process Data record

   // PAR.ITD Sequence Number = DB1.ITD Sequence Number + CON.1
   PAR.ITD_Sequence_Number = DB1.ITD_Sequence_Number + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt IC Trans. W/SystDt CR) TYPE(CRTOBJ) FILE(CAB7CPP)          AC2080125;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Inventory_Trans_ID);
  PARAMETER(PAR.Inventory_Trans_Type);
  PARAMETER(PAR.Transaction_Date_Code);
  PARAMETER(PAR.ITD_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.UOM_Transaction);
  PARAMETER(PAR.Item_Transaction_Source);
  PARAMETER(PAR.Description);
  PARAMETER(PAR.Transaction_Quantity);
  PARAMETER(PAR.Transaction_Weight);
  PARAMETER(*ZERO);
  PARAMETER(PAR.UOM_Cost);
  PARAMETER(PAR.Extended_Amount);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER('N');
  PARAMETER(PAR.USR_Reason_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Transfer_Batch_Number);
  PARAMETER(PAR.Transfer_Batch_Sequence);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Shift_Number);
  PARAMETER(PAR.Label_Date);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER('A');
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // Call program RTV System Date/Time   UP.
   CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
   PARAMETER(DB1.Job_Date);
   PARAMETER(DB1.Job_Time);

   //?USER: Processing after Data update

   // Call program Crt Export Rate Dtl   XF.
   CALL PROGRAM(Crt Export Rate Dtl   XF) ('POO5XFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Inventory_Trans_ID);
   PARAMETER(DB1.Inventory_Trans_Type);
   PARAMETER(DB1.Transaction_Date_Code);
   PARAMETER(DB1.Sequence_Number);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.UOM_Transaction);
   PARAMETER(DB1.Item_Transaction_Source);
   PARAMETER(DB1.Description);
   PARAMETER(DB1.Transaction_Quantity);
   PARAMETER(DB1.Transaction_Weight);
   PARAMETER(DB1.USR_Transaction_Unit_Cost);
   PARAMETER(DB1.UOM_Cost);
   PARAMETER(DB1.Extended_Amount);
   PARAMETER(DB1.Ticket_Number);
   PARAMETER(DB1.GL_Document_Number);
   PARAMETER(DB1.GL_Update_Status);
   PARAMETER(DB1.Reason_Code);
   PARAMETER(DB1.Reference_Number_Code);
   PARAMETER(DB1.Lot_ID);
   PARAMETER(DB1.Transfer_Batch_Number);
   PARAMETER(DB1.Transfer_Batch_Sequence);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(DB1.Employee_Badge_Number);
   PARAMETER(DB1.Production_Time);
   PARAMETER(DB1.Shift_Number);
   PARAMETER(DB1.Label_Date);
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.Job_Date);

  }

  EXECUTE FUNCTION(CHG Value/Qty/Wgt      CH) TYPE(CHGOBJ) FILE(CAB1REP)          AC1413368;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Conversion_Factor_1);
  PARAMETER(PAR.Operation_Factor_1);
  PARAMETER(PAR.UOM_Second);
  PARAMETER(PAR.Conversion_Factor_2);
  PARAMETER(PAR.Operation_Factor_2);
  PARAMETER(PAR.UOM_Third);
  PARAMETER(PAR.Production_Date_Control);
  PARAMETER(PAR.Catch_Weight_Status);
  PARAMETER(PAR.Inventory_Trans_ID);
  PARAMETER(PAR.Inventory_Trans_Type);
  PARAMETER(PAR.Transaction_Date_Code);
  PARAMETER(PAR.UOM_Transaction);
  PARAMETER(PAR.Quantity_based_on_U_M1_S);
  PARAMETER(PAR.Transaction_Weight);
  PARAMETER(*ZERO);
  PARAMETER(PAR.UOM_Cost);
  PARAMETER(PAR.Extended_Amount);
  PARAMETER(PAR.Label_Date);
  {
   //?USER: Processing before Data read

   // PAR.Shift Number = CON.1
   PAR.Shift_Number = 1;

   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Crt Item Bal. Detail   CR) TYPE(CRTOBJ) FILE(CAB1REP)          AC1120962;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(PAR.Transaction_Weight);
   PARAMETER(PAR.Transaction_Quantity);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER('N');
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Extended_Amount);
   PARAMETER(PAR.Label_Date_USR);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER('A');
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // Call program RTV System Date/Time   UP.
    CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
    PARAMETER(DB1.Job_Date);
    PARAMETER(DB1.Job_Time);

   }

   //?USER: Processing before Data update

   // PGM.*Record Data Changed = CND.*YES
   PGM.*Record_Data_Changed = 'Y';

   // DB1.Quantity on Hand - U/M1 = DB1.Quantity on Hand - U/M1 + PAR.Transaction Quan
   DB1.Quantity_on_Hand_UOM1 = DB1.Quantity_on_Hand_UOM1 + PAR.Transaction_Quantity;

   // DB1.Quantity on Hand - Weight = DB1.Quantity on Hand - Weight + PAR.Transaction
   DB1.Quantity_on_Hand_Weight = DB1.Quantity_on_Hand_Weight + PAR.Transaction_Weight;

   // DB1.Value of On Hand Inventor = DB1.Value of On Hand Inventor + PAR.Extended Amo
   DB1.Value_of_On_Hand_Inventor = DB1.Value_of_On_Hand_Inventor + PAR.Extended_Amount;

   //?If quantity is zero, so are weight, value of inventory
   CASE;

   // IF DB1.Quantity on Hand - U/M1 EQ WRK.ZERO
   IF DB1.Quantity_on_Hand_UOM1 = WRK.ZERO;

   // Call program UPD Create Weight Adj. XF.
   CALL PROGRAM(UPD Create Weight Adj. XF) ('PDMYXFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.Transaction_Date_Code);
   PARAMETER(DB1.Production_Date);
   PARAMETER(PAR.UOM_Transaction);
   PARAMETER(DB1.Quantity_on_Hand_Weight);
   PARAMETER(PAR.USR_Transaction_Unit_Cost);
   PARAMETER(PAR.UOM_Cost);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(PAR.Shift_Number);
   PARAMETER(DB1.Label_Date);

   // DB1.Quantity on Hand - Weight = CON.*ZERO
   DB1.Quantity_on_Hand_Weight = *ZERO;

   // DB1.Value of On Hand Inventor = CON.*ZERO
   DB1.Value_of_On_Hand_Inventor = *ZERO;

   ENDIF;

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // Call program RTV System Date/Time   UP.
   CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
   PARAMETER(DB1.Job_Date);
   PARAMETER(DB1.Job_Time);

   //?USER: Processing after Data update

   CASE;

   // IF DB1.Quantity on Hand - U/M1 EQ WRK.ZERO
   IF DB1.Quantity_on_Hand_UOM1 = WRK.ZERO;

   EXECUTE FUNCTION(Rtv Lot Tracking Flag RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1506123;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.Lot_Tracking_Flag);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF PAR.Lot Tracking Flag is Not Yes
   IF PAR.Lot_Tracking_Flag = *BLANK/'N';

   EXECUTE FUNCTION(DLT Item Bal. Detail   DL) TYPE(DLTOBJ) FILE(CAB1REP)          AC1120964;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Production_Date);
   ENDIF;

   ENDIF;

  }

  //?11/25/09 PKD Comment out until we know what we need to do here.
  EXECUTE FUNCTION(RTV Sum Act Qty,Wgt,ValRT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1402850;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.On_Hand_Weight_Summary);
  PARAMETER(PAR.On_Hand_UOM1_Summary);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(PAR.Value_of_On_Hand_Inventor);
  {
   //?USER: Initialize routine

   // PAR.Quantity on Hand - Weight = CON.*ZERO
   PAR.Quantity_on_Hand_Weight = *ZERO;

   // PAR.Quantity on Hand - U/M1 = CON.*ZERO
   PAR.Quantity_on_Hand_UOM1 = *ZERO;

   // PAR.Quantity on Hand - U/M2 = CON.*ZERO
   PAR.Quantity_on_Hand_UOM2 = *ZERO;

   // PAR.Quantity on Hand - U/M3 = CON.*ZERO
   PAR.Quantity_on_Hand_UOM3 = *ZERO;

   // PAR.Value of On Hand Inventor = CON.*ZERO
   PAR.Value_of_On_Hand_Inventor = *ZERO;

   //?USER: Process Data record

   // PAR.Quantity on Hand - Weight = PAR.Quantity on Hand - Weight + DB1.Quantity on
   PAR.Quantity_on_Hand_Weight = PAR.Quantity_on_Hand_Weight + DB1.Quantity_on_Hand_Weight;

   // PAR.Quantity on Hand - U/M1 = PAR.Quantity on Hand - U/M1 + DB1.Quantity on Hand
   PAR.Quantity_on_Hand_UOM1 = PAR.Quantity_on_Hand_UOM1 + DB1.Quantity_on_Hand_UOM1;

   // PAR.Quantity on Hand - U/M2 = PAR.Quantity on Hand - U/M2 + DB1.Quantity on Hand
   PAR.Quantity_on_Hand_UOM2 = PAR.Quantity_on_Hand_UOM2 + DB1.Quantity_on_Hand_UOM2;

   // PAR.Quantity on Hand - U/M3 = PAR.Quantity on Hand - U/M3 + DB1.Quantity on Hand
   PAR.Quantity_on_Hand_UOM3 = PAR.Quantity_on_Hand_UOM3 + DB1.Quantity_on_Hand_UOM3;

   // PAR.Value of On Hand Inventor = PAR.Value of On Hand Inventor + DB1.Value of On
   PAR.Value_of_On_Hand_Inventor = PAR.Value_of_On_Hand_Inventor
   + DB1.Value_of_On_Hand_Inventor;

  }

  EXECUTE FUNCTION(Chg Val/Qty/Wgt        Ch) TYPE(CHGOBJ) FILE(CAB0REP)          AC1129181;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.On_Hand_Weight_Summary);
  PARAMETER(PAR.On_Hand_UOM1_Summary);
  PARAMETER(PAR.Value_of_On_Hand_Inventor);
  {
   //?USER: Processing before Data update

   // PGM.*Record Data Changed = CND.*YES
   PGM.*Record_Data_Changed = 'Y';

   //?Refresh the available to sell quantity
   // DB1.Quantity Avail. to Sell = DB1.On Hand U/M1 Summary
   DB1.Quantity_Avail_To_Sell = DB1.On_Hand_UOM1_Summary;

   // DB1.Quantity Avail. to Sell = DB1.Quantity Avail. to Sell - DB1.Quantity on Sale
   DB1.Quantity_Avail_To_Sell = DB1.Quantity_Avail_To_Sell - DB1.Quantity_on_Sales_Order;

   // DB1.Quantity Avail. to Sell = DB1.Quantity Avail. to Sell - DB1.Quantity on Purc
   DB1.Quantity_Avail_To_Sell = DB1.Quantity_Avail_To_Sell - DB1.Quantity_on_Purch_Order;

   // DB1.Quantity Avail. to Sell = DB1.Quantity Avail. to Sell - DB1.Quantity on Tran
   DB1.Quantity_Avail_To_Sell = DB1.Quantity_Avail_To_Sell - DB1.Quantity_on_Transfer;

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?** FP1127:
  //?** Update location quantity on hand for External warehouse that
  //?** is lot controlled and not Carlisle controlled
  //?** Optional Lot number is passed in from the calling program
  EXECUTE FUNCTION(RTV Warehouse Info     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1910512;
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(NLL.Warehouse_Description);
  PARAMETER(NLL.Address_Line_1);
  PARAMETER(NLL.Address_Line_2);
  PARAMETER(NLL.Address_Line_3);
  PARAMETER(NLL.City);
  PARAMETER(NLL.Zip_Postal_Code);
  PARAMETER(NLL.Production_Warehouse_Code);
  PARAMETER(NLL.State_Code);
  PARAMETER(LCL.Lot_Tracking_Flag);
  PARAMETER(NLL.Default_Printer);
  PARAMETER(NLL.Warehouse_Type);
  PARAMETER(NLL.Trans_Contol_AS400_Plant);
  PARAMETER(LCL.Warehouse_Location);
  PARAMETER(NLL.Warehouse_Std_Chill_Time);
  PARAMETER(NLL.Warehouse_Chill_Time);
  PARAMETER(NLL.Include_in_Auto_Pre_Pick);
  PARAMETER(NLL.Default_Manifest_Copies);
  PARAMETER(NLL.Default_Load_Sequence);
  PARAMETER(NLL.WHS_Slotting_Limit_Type);
  PARAMETER(NLL.Shipping_Company);
  PARAMETER(NLL.Accounting_Company);
  PARAMETER(NLL.WHS_Sched_Prod_Max_Days);
  PARAMETER(NLL.WHS_Inventory_Chill_Time);
  PARAMETER(NLL.Parent_Warehouse);
  PARAMETER(NLL.Default_Shipping_Whs);
  PARAMETER(LCL.WHS_Live_with_Carlisle);
  PARAMETER(NLL.WHS_PFS_Interface);
  PARAMETER(NLL.WHS_Req_Meter_Reading_Shp);
  PARAMETER(NLL.WHS_Default_Load_Type);
  PARAMETER(NLL.WHS_TMS_Planning_Region);
  PARAMETER(NLL.Default_Carrier_Code);
  PARAMETER(NLL.Inventory_Logic_Version);
  PARAMETER(NLL.WHS_Auto_Inv_Restoration);
  PARAMETER(NLL.EDI_Status_1);
  PARAMETER(NLL.EDI_Status_2);
  PARAMETER(NLL.EDI_Status_3);
  PARAMETER(NLL.Record_Status);
  PARAMETER(NLL.Job_Time);
  PARAMETER(NLL.User_Id);
  PARAMETER(NLL.Job_Name);
  PARAMETER(NLL.Job_Date);
  {
   //?USER: Initialize routine

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Record selected = CND.*YES
   PGM.*Record_selected = 'Y';

  }

  //?** Process lot tracking if External, not Carlisle, Lot trk=Y
  CASE;

  // IF LCL.Warehouse Location is External
  IF LCL.Warehouse_Location = 'E';

  // AND LCL.WHS Live w/Carlisle is *No/Blank
  AND LCL.WHS_Live_with_Carlisle = *BLANK/'N';

  // AND LCL.Lot Tracking Flag is yes
  AND LCL.Lot_Tracking_Flag = 'Y';

  EXECUTE FUNCTION(RTV Whse Location Info RT) TYPE(RTVOBJ) FILE(PDL2REP)          AC1910914;
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(WRK.Location_Code);
  PARAMETER(LCL.Location_Aisle);
  PARAMETER(LCL.Location_Bay);
  PARAMETER(LCL.Loc_Unused_Chill_Time);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?** Lot # will be the "from warehouse" lot# or zeros    FP1127
  // Call program UPD Auto-Loc TR Ord ItmXF.
  CALL PROGRAM(UPD Auto-Loc TR Ord ItmXF) ('PMBVXFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Lot_Number);
  PARAMETER(WRK.Location_Code);
  PARAMETER(WRK.Location_Level);
  PARAMETER(PAR.Transaction_Quantity);
  PARAMETER(PAR.Order_Number);

  ENDIF;

  //?**************************************************************************
  //?The following block of code will update Item Balance,
  //?Item Balance Detail and Transaction Detail for the TO ITEM
  //?**************************************************************************
  //?** 12/05/2008 LJB FP1127 Update Auto-Locate Whse inventory
  //?** Only process auto-locate if not a Carlisle Controlled warehouse
  //?** and lot tracking has been turned on.
  //?12/04/06 PKD PK0040 Only add inventory to the To Warehouse
  //?             if the Inter-Plant Transfer is No.  If the Inter-Plant
  //?             Transfer is Yes, then the receiving plant's receiving
  //?             process will add the inventory to the To Warehouse.
  EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
  PARAMETER(PAR.USR_Warehouse_Code);
  PARAMETER(LCL.Shipping_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.Inter-Plant Transfer USR is No
  IF PAR.Inter_Plant_Transfer_USR = 'N';

  //?Validate that Item Balance for TO Whse exists; if not, create it
  EXECUTE FUNCTION(Val Item Balance       RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC1312393;
  PARAMETER(LCL.Shipping_Company);
  PARAMETER(PAR.Item_Code_USR);
  PARAMETER(PAR.USR_Warehouse_Code);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  //?Create item balance if none exists
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Create item balance if none exists
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Crt Item Balance       CR) TYPE(CRTOBJ) FILE(CAB0REP)          AC1119976;
  PARAMETER(LCL.Shipping_Company);
  PARAMETER(PAR.Item_Code_USR);
  PARAMETER(PAR.USR_Warehouse_Code);
  PARAMETER(PAR.Unit_Cost_Detail);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('N');
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(WRK.EDI_Status_1);
  PARAMETER(WRK.EDI_Status_2);
  PARAMETER(WRK.EDI_Status_3);
  PARAMETER('A');
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

  //?Error if unit cost = 0
  CASE;

  // IF PAR.Unit Cost - Detail EQ WRK.ZERO
  IF PAR.Unit_Cost_Detail = WRK.ZERO;

  // PAR.USR Reason Code = CND.Error
  PAR.USR_Reason_Code = 'ERR';

  //?Error if unit cost = 0
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.USR Reason Code = PAR.Reason Code
  PAR.USR_Reason_Code = PAR.Reason_Code;

  ENDIF;

  EXECUTE FUNCTION(Rtv Item Typ/Grp/Cls  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1298334;
  PARAMETER(LCL.Shipping_Company);
  PARAMETER(PAR.Item_Code_USR);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.Extended Amount = PAR.Unit Cost - Detail * WRK.Transaction Weight *Rounded
  PAR.Extended_Amount = PAR.Unit_Cost_Detail * WRK.Transaction_Weight 'H';

  EXECUTE FUNCTION(Rtv Next Sequence No.  RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1304410;
  PARAMETER(LCL.Shipping_Company);
  PARAMETER(PAR.Item_Code_USR);
  PARAMETER(PAR.USR_Warehouse_Code);
  PARAMETER(PAR.Inventory_Trans_ID);
  PARAMETER(PAR.Inventory_Trans_Type);
  PARAMETER(PAR.Transaction_Date_Code);
  PARAMETER(PAR.ITD_Sequence_Number);
  {
   //?USER: Processing if Data record not found

   // PAR.ITD Sequence Number = CON.1
   PAR.ITD_Sequence_Number = 1;

   //?USER: Process Data record

   // PAR.ITD Sequence Number = DB1.ITD Sequence Number + CON.1
   PAR.ITD_Sequence_Number = DB1.ITD_Sequence_Number + 1;

   QUIT;

  }

  //?Reset Production/Label Date if Lot Tracking warehouse.
  DO;

  // PAR.Production Date RGT = PAR.Production Date USR
  PAR.Production_Date_RGT = PAR.Production_Date_USR;

  // PAR.Label Date  USR = PAR.Label Date
  PAR.Label_Date_USR = PAR.Label_Date;

  //?Determine the Lot Tracking Flag for From Warehouse.
  //?If the From Warehouse Lot Tracking Flag is "N", then perform the
  //?following "Clc" to determine if the To Warehouse Lot Tracking
  //?Flag is "Y" and replace the Production Date with Job Date if it
  //?is "Y".
  ENDDO;

  EXECUTE FUNCTION(Crt IC Trans. W/SystDt CR) TYPE(CRTOBJ) FILE(CAB7CPP)          AC2080125;
  PARAMETER(LCL.Shipping_Company);
  PARAMETER(PAR.Item_Code_USR);
  PARAMETER(PAR.USR_Warehouse_Code);
  PARAMETER(PAR.Inventory_Trans_ID);
  PARAMETER(PAR.Inventory_Trans_Type);
  PARAMETER(PAR.Transaction_Date_Code);
  PARAMETER(PAR.ITD_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Production_Date_RGT);
  PARAMETER(PAR.UOM_Transaction);
  PARAMETER(PAR.Item_Transaction_Source);
  PARAMETER(PAR.Description);
  PARAMETER(WRK.Transaction_Quantity);
  PARAMETER(WRK.Transaction_Weight);
  PARAMETER(*ZERO);
  PARAMETER(PAR.UOM_Cost);
  PARAMETER(PAR.Extended_Amount);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(PAR.USR_Reason_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Transfer_Batch_Number);
  PARAMETER(PAR.Transfer_Batch_Sequence);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Shift_Number);
  PARAMETER(PAR.Label_Date_USR);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER('A');
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // Call program RTV System Date/Time   UP.
   CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
   PARAMETER(DB1.Job_Date);
   PARAMETER(DB1.Job_Time);

   //?USER: Processing after Data update

   // Call program Crt Export Rate Dtl   XF.
   CALL PROGRAM(Crt Export Rate Dtl   XF) ('POO5XFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Inventory_Trans_ID);
   PARAMETER(DB1.Inventory_Trans_Type);
   PARAMETER(DB1.Transaction_Date_Code);
   PARAMETER(DB1.Sequence_Number);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.UOM_Transaction);
   PARAMETER(DB1.Item_Transaction_Source);
   PARAMETER(DB1.Description);
   PARAMETER(DB1.Transaction_Quantity);
   PARAMETER(DB1.Transaction_Weight);
   PARAMETER(DB1.USR_Transaction_Unit_Cost);
   PARAMETER(DB1.UOM_Cost);
   PARAMETER(DB1.Extended_Amount);
   PARAMETER(DB1.Ticket_Number);
   PARAMETER(DB1.GL_Document_Number);
   PARAMETER(DB1.GL_Update_Status);
   PARAMETER(DB1.Reason_Code);
   PARAMETER(DB1.Reference_Number_Code);
   PARAMETER(DB1.Lot_ID);
   PARAMETER(DB1.Transfer_Batch_Number);
   PARAMETER(DB1.Transfer_Batch_Sequence);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(DB1.Employee_Badge_Number);
   PARAMETER(DB1.Production_Time);
   PARAMETER(DB1.Shift_Number);
   PARAMETER(DB1.Label_Date);
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.Job_Date);

  }

  //?11/25/09 PKD Comment out until we know what we need to do here.
  //?* Post transaction to Item Balance & Item Balance Detail
  EXECUTE FUNCTION(Prc Create Dtl Receipt IF) TYPE(EXCINTFUN)                     AC1322507;
  PARAMETER(LCL.Shipping_Company);
  PARAMETER(PAR.Item_Code_USR);
  PARAMETER(PAR.USR_Warehouse_Code);
  PARAMETER(PAR.Inventory_Trans_ID);
  PARAMETER(PAR.Inventory_Trans_Type);
  PARAMETER(PAR.Transaction_Date_Code);
  PARAMETER(PAR.ITD_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Shift_Number);
  PARAMETER(PAR.Label_Date_USR);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Prc Create Dtl Receipt RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1139933;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Inventory_Trans_ID);
   PARAMETER(PAR.Inventory_Trans_Type);
   PARAMETER(PAR.Transaction_Date_Code);
   PARAMETER(PAR.ITD_Sequence_Number);
   PARAMETER(PAR.Sequence_Number);
   PARAMETER(PAR.Shift_Number);
   PARAMETER(PAR.Label_Date);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(Rtv Base Values        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1125011;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(WRK.Description_Line_Two);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Conversion_Factor_1);
    PARAMETER(PAR.Operation_Factor_1);
    PARAMETER(PAR.UOM_Second);
    PARAMETER(PAR.Conversion_Factor_2);
    PARAMETER(PAR.Operation_Factor_2);
    PARAMETER(PAR.UOM_Third);
    PARAMETER(WRK.UOM_Pricing);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Production_Date_Control);
    PARAMETER(PAR.Catch_Weight_Status);
    PARAMETER(WRK.Fresh_Chilling_Time);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    EXECUTE FUNCTION(Rtv Quantity/Dollars   RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC1163281;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(PAR.Unit_Cost_Per_Pound);
    PARAMETER(PAR.Quantity_on_Hand_Weight);
    PARAMETER(PAR.Quantity_on_Hand_UOM1);
    PARAMETER(PAR.Quantity_on_Hand_UOM2);
    PARAMETER(PAR.Quantity_on_Hand_UOM3);
    PARAMETER(WRK.Value_of_On_Hand_Inventor);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    EXECUTE FUNCTION(UPD Value/Qty/Wgt      CH) TYPE(CHGOBJ) FILE(CAB0REP)          AC1413030;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Inventory_Trans_ID);
    PARAMETER(DB1.Inventory_Trans_Type);
    PARAMETER(DB1.Transaction_Date_Code);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.UOM_Transaction);
    PARAMETER(DB1.Transaction_Quantity);
    PARAMETER(DB1.Transaction_Weight);
    PARAMETER(PAR.Unit_Cost_Per_Pound);
    PARAMETER(DB1.UOM_Cost);
    PARAMETER(DB1.Extended_Amount);
    PARAMETER(PAR.Shift_Number);
    PARAMETER(DB1.Label_Date);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Conversion_Factor_1);
    PARAMETER(PAR.Operation_Factor_1);
    PARAMETER(PAR.UOM_Second);
    PARAMETER(PAR.Conversion_Factor_2);
    PARAMETER(PAR.Operation_Factor_2);
    PARAMETER(PAR.UOM_Third);
    PARAMETER(PAR.Production_Date_Control);
    PARAMETER(PAR.Catch_Weight_Status);
    PARAMETER(PAR.Quantity_on_Hand_Weight);
    PARAMETER(PAR.Quantity_on_Hand_UOM1);
    PARAMETER(PAR.Quantity_on_Hand_UOM2);
    PARAMETER(PAR.Quantity_on_Hand_UOM3);
    {
     //?USER: Processing before Data read

     EXECUTE FUNCTION(Clc Convert Cost       IF) TYPE(EXCINTFUN)                     AC1122884;
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Conversion_Factor_1);
     PARAMETER(PAR.Operation_Factor_1);
     PARAMETER(PAR.UOM_Second);
     PARAMETER(PAR.Conversion_Factor_2);
     PARAMETER(PAR.Operation_Factor_2);
     PARAMETER(PAR.UOM_Third);
     PARAMETER(PAR.USR_Transaction_Unit_Cost);
     PARAMETER(PAR.UOM_Cost);
     PARAMETER(PAR.Cost_based_on_U_M1_S);
     PARAMETER(PAR.Cost_based_on_U_M2_S);
     PARAMETER(PAR.Cost_based_on_U_M3_S);
     {
      //?Execute internal function

      //?Initialize parameter values
      // PAR.Cost based on U/M1 = CON.*ZERO
      PAR.Cost_based_on_U_M1 = *ZERO;

      // PAR.Cost based on U/M2 = CON.*ZERO
      PAR.Cost_based_on_U_M2 = *ZERO;

      // PAR.Cost based on U/M3 = CON.*ZERO
      PAR.Cost_based_on_U_M3 = *ZERO;

      //?Process based on Unit of Measure entered
      CASE;

      // IF PAR.U/M - Primary EQ PAR.U/M - Cost
      IF PAR.UOM_Primary = PAR.UOM_Cost;

      // PAR.Cost based on U/M1 = PAR.USR Transaction-Unit Cost
      PAR.Cost_based_on_U_M1 = PAR.USR_Transaction_Unit_Cost;

      //?Process second U/M if entered
      CASE;

      // IF PAR.U/M - Second is Entered
      IF PAR.UOM_Second <> *BLANK;

      //?Convert based on operation code
      CASE;

      // IF PAR.Operation Factor 1 is Multiply
      IF PAR.Operation_Factor_1 = 'M';

      CASE;

      // IF PAR.Conversion Factor 1 is Entered
      IF PAR.Conversion_Factor_1 <> *ZERO;

      // PAR.Cost based on U/M2 S = PAR.USR Transaction-Unit Cost / PAR.Conversion Factor
      PAR.Cost_based_on_U_M2_S = PAR.USR_Transaction_Unit_Cost / PAR.Conversion_Factor_1 'H';

      ENDIF;

      //?Convert based on operation code
      // IF PAR.Operation Factor 1 is Divide
      IF PAR.Operation_Factor_1 = 'D';

      // PAR.Cost based on U/M2 S = PAR.USR Transaction-Unit Cost * PAR.Conversion Factor
      PAR.Cost_based_on_U_M2_S = PAR.USR_Transaction_Unit_Cost * PAR.Conversion_Factor_1 'H';

      ENDIF;

      // PAR.Cost based on U/M2 = PAR.Cost based on U/M2 S
      PAR.Cost_based_on_U_M2 = PAR.Cost_based_on_U_M2_S;

      ENDIF;

      //?Process third U/M if entered
      CASE;

      // IF PAR.U/M - Third is Entered
      IF PAR.UOM_Third <> *BLANK;

      CASE;

      // IF PAR.Operation Factor 2 is Multiply
      IF PAR.Operation_Factor_2 = 'M';

      CASE;

      // IF PAR.Conversion Factor 2 is Entered
      IF PAR.Conversion_Factor_2 <> *ZERO;

      // PAR.Cost based on U/M3 = PAR.Cost based on U/M2 S / PAR.Conversion Factor 2 *Rou
      PAR.Cost_based_on_U_M3 = PAR.Cost_based_on_U_M2_S / PAR.Conversion_Factor_2 'H';

      ENDIF;

      // IF PAR.Operation Factor 2 is Divide
      IF PAR.Operation_Factor_2 = 'D';

      // PAR.Cost based on U/M3 = PAR.Cost based on U/M2 S * PAR.Conversion Factor 2 *Rou
      PAR.Cost_based_on_U_M3 = PAR.Cost_based_on_U_M2_S * PAR.Conversion_Factor_2 'H';

      ENDIF;

      ENDIF;

      //?Process based on Unit of Measure entered
      // IF PAR.U/M - Second EQ PAR.U/M - Cost
      IF PAR.UOM_Second = PAR.UOM_Cost;

      // PAR.Cost based on U/M2 = PAR.USR Transaction-Unit Cost
      PAR.Cost_based_on_U_M2 = PAR.USR_Transaction_Unit_Cost;

      //?Convert based on operation factor
      CASE;

      // IF PAR.Operation Factor 1 is Multiply
      IF PAR.Operation_Factor_1 = 'M';

      // PAR.Cost based on U/M1 = PAR.USR Transaction-Unit Cost * PAR.Conversion Factor 1
      PAR.Cost_based_on_U_M1 = PAR.USR_Transaction_Unit_Cost * PAR.Conversion_Factor_1 'H';

      //?Convert based on operation factor
      // IF PAR.Operation Factor 1 is Divide
      IF PAR.Operation_Factor_1 = 'D';

      CASE;

      // IF PAR.Conversion Factor 1 is Entered
      IF PAR.Conversion_Factor_1 <> *ZERO;

      // PAR.Cost based on U/M1 = PAR.USR Transaction-Unit Cost / PAR.Conversion Factor 1
      PAR.Cost_based_on_U_M1 = PAR.USR_Transaction_Unit_Cost / PAR.Conversion_Factor_1 'H';

      ENDIF;

      ENDIF;

      //?Process third U/M if entered
      CASE;

      // IF PAR.U/M - Third is Entered
      IF PAR.UOM_Third <> *BLANK;

      CASE;

      // IF PAR.Operation Factor 2 is Multiply
      IF PAR.Operation_Factor_2 = 'M';

      CASE;

      // IF PAR.Conversion Factor 2 is Entered
      IF PAR.Conversion_Factor_2 <> *ZERO;

      // PAR.Cost based on U/M3 = PAR.USR Transaction-Unit Cost / PAR.Conversion Factor 2
      PAR.Cost_based_on_U_M3 = PAR.USR_Transaction_Unit_Cost / PAR.Conversion_Factor_2 'H';

      ENDIF;

      // IF PAR.Operation Factor 2 is Divide
      IF PAR.Operation_Factor_2 = 'D';

      // PAR.Cost based on U/M3 = PAR.USR Transaction-Unit Cost * PAR.Conversion Factor 2
      PAR.Cost_based_on_U_M3 = PAR.USR_Transaction_Unit_Cost * PAR.Conversion_Factor_2 'H';

      ENDIF;

      ENDIF;

      //?Process based on Unit of Measure entered
      // IF PAR.U/M - Third EQ PAR.U/M - Cost
      IF PAR.UOM_Third = PAR.UOM_Cost;

      // PAR.Cost based on U/M3 = PAR.USR Transaction-Unit Cost
      PAR.Cost_based_on_U_M3 = PAR.USR_Transaction_Unit_Cost;

      //?Convert based on operation factor
      CASE;

      // IF PAR.Operation Factor 2 is Multiply
      IF PAR.Operation_Factor_2 = 'M';

      // PAR.Cost based on U/M2 S = PAR.USR Transaction-Unit Cost * PAR.Conversion Factor
      PAR.Cost_based_on_U_M2_S = PAR.USR_Transaction_Unit_Cost * PAR.Conversion_Factor_2 'H';

      //?Convert based on operation factor
      // IF PAR.Operation Factor 2 is Divide
      IF PAR.Operation_Factor_2 = 'D';

      CASE;

      // IF PAR.Conversion Factor 2 is Entered
      IF PAR.Conversion_Factor_2 <> *ZERO;

      // PAR.Cost based on U/M2 S = PAR.USR Transaction-Unit Cost / PAR.Conversion Factor
      PAR.Cost_based_on_U_M2_S = PAR.USR_Transaction_Unit_Cost / PAR.Conversion_Factor_2 'H';

      ENDIF;

      ENDIF;

      // PAR.Cost based on U/M2 = PAR.Cost based on U/M2 S
      PAR.Cost_based_on_U_M2 = PAR.Cost_based_on_U_M2_S;

      //?Convert based on operation factor
      CASE;

      // IF PAR.Operation Factor 1 is Multiply
      IF PAR.Operation_Factor_1 = 'M';

      // PAR.Cost based on U/M1 = PAR.Cost based on U/M2 S * PAR.Conversion Factor 1 *Rou
      PAR.Cost_based_on_U_M1 = PAR.Cost_based_on_U_M2_S * PAR.Conversion_Factor_1 'H';

      //?Convert based on operation factor
      // IF PAR.Operation Factor 1 is Divide
      IF PAR.Operation_Factor_1 = 'D';

      CASE;

      // IF PAR.Conversion Factor 1 is Entered
      IF PAR.Conversion_Factor_1 <> *ZERO;

      // PAR.Cost based on U/M1 = PAR.Cost based on U/M2 S / PAR.Conversion Factor 1 *Rou
      PAR.Cost_based_on_U_M1 = PAR.Cost_based_on_U_M2_S / PAR.Conversion_Factor_1 'H';

      ENDIF;

      ENDIF;

      ENDIF;

     }

     EXECUTE FUNCTION(Clc Convert Quantity   IF) TYPE(EXCINTFUN)                     AC1123260;
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Conversion_Factor_1);
     PARAMETER(PAR.Operation_Factor_1);
     PARAMETER(PAR.UOM_Second);
     PARAMETER(PAR.Conversion_Factor_2);
     PARAMETER(PAR.Operation_Factor_2);
     PARAMETER(PAR.UOM_Third);
     PARAMETER(PAR.UOM_Transaction);
     PARAMETER(PAR.Transaction_Quantity);
     PARAMETER(PAR.Quantity_based_on_U_M1_S);
     PARAMETER(PAR.Quantity_based_on_U_M2_S);
     PARAMETER(PAR.Quantity_based_on_U_M3_S);
     {
      //?Execute internal function

      //?Clear output parameters
      // PAR.USR Qty based on U/M1 = CON.*ZERO
      PAR.USR_Qty_based_on_U_M1 = *ZERO;

      // PAR.USR Qty based on U/M2 = CON.*ZERO
      PAR.USR_Qty_based_on_U_M2 = *ZERO;

      // PAR.USR Qty based on U/M3 = CON.*ZERO
      PAR.USR_Qty_based_on_U_M3 = *ZERO;

      //?Process based on transaction U/M
      CASE;

      // IF PAR.U/M - Primary EQ PAR.U/M - Transaction
      IF PAR.UOM_Primary = PAR.UOM_Transaction;

      // PAR.USR Qty based on U/M1 = PAR.Transaction Quantity
      PAR.USR_Qty_based_on_U_M1 = PAR.Transaction_Quantity;

      //?Process entered U/M2
      CASE;

      // IF PAR.U/M - Second is Entered
      IF PAR.UOM_Second <> *BLANK;

      //?Convert based on operation factor
      CASE;

      // IF PAR.Operation Factor 1 is Multiply
      IF PAR.Operation_Factor_1 = 'M';

      // PAR.Quantity based on U/M2 S = PAR.Transaction Quantity * PAR.Conversion Factor
      PAR.Quantity_based_on_U_M2_S = PAR.Transaction_Quantity * PAR.Conversion_Factor_1 'H';

      //?Convert based on operation factor
      // IF PAR.Operation Factor 1 is Divide
      IF PAR.Operation_Factor_1 = 'D';

      CASE;

      // IF PAR.Conversion Factor 1 is Entered
      IF PAR.Conversion_Factor_1 <> *ZERO;

      // PAR.Quantity based on U/M2 S = PAR.Transaction Quantity / PAR.Conversion Factor
      PAR.Quantity_based_on_U_M2_S = PAR.Transaction_Quantity / PAR.Conversion_Factor_1 'H';

      ENDIF;

      ENDIF;

      // PAR.Quantity based on U/M2 = PAR.Quantity based on U/M2 S
      PAR.USR_Qty_based_on_U_M2 = PAR.Quantity_based_on_U_M2_S;

      ENDIF;

      //?Process entered U/M3
      CASE;

      // IF PAR.U/M - Third is Entered
      IF PAR.UOM_Third <> *BLANK;

      //?Convert based on operation factor
      CASE;

      // IF PAR.Operation Factor 2 is Multiply
      IF PAR.Operation_Factor_2 = 'M';

      // PAR.Quantity based on U/M3 S = PAR.Quantity based on U/M2 S * PAR.Multiplier Two
      PAR.Quantity_based_on_U_M3_S = PAR.Quantity_based_on_U_M2_S * PAR.Conversion_Factor_2
      'H';

      //?Convert based on operation factor
      // IF PAR.Operation Factor 2 is Divide
      IF PAR.Operation_Factor_2 = 'D';

      CASE;

      // IF PAR.Conversion Factor 2 is Entered
      IF PAR.Conversion_Factor_2 <> *ZERO;

      // PAR.Quantity based on U/M3 S = PAR.Quantity based on U/M2 S / PAR.Conversion Fac
      PAR.Quantity_based_on_U_M3_S = PAR.Quantity_based_on_U_M2_S / PAR.Conversion_Factor_2
      'H';

      ENDIF;

      ENDIF;

      // PAR.Quantity based on U/M3 = PAR.Quantity based on U/M3 S
      PAR.USR_Qty_based_on_U_M3 = PAR.Quantity_based_on_U_M3_S;

      ENDIF;

      //?Process based on transaction U/M
      // IF PAR.U/M - Second EQ PAR.U/M - Transaction
      IF PAR.UOM_Second = PAR.UOM_Transaction;

      // PAR.Quantity based on U/M2 = PAR.Transaction Quantity
      PAR.USR_Qty_based_on_U_M2 = PAR.Transaction_Quantity;

      //?Convert based on operation factor
      CASE;

      // IF PAR.Operation Factor 1 is Multiply
      IF PAR.Operation_Factor_1 = 'M';

      CASE;

      // IF PAR.Conversion Factor 1 is Entered
      IF PAR.Conversion_Factor_1 <> *ZERO;

      // PAR.Quantity based on U/M1 = PAR.Transaction Quantity / PAR.Conversion Factor 1
      PAR.USR_Qty_based_on_U_M1 = PAR.Transaction_Quantity / PAR.Conversion_Factor_1 'H';

      ENDIF;

      //?Convert based on operation factor
      // IF PAR.Operation Factor 1 is Divide
      IF PAR.Operation_Factor_1 = 'D';

      // PAR.Quantity based on U/M1 = PAR.Transaction Quantity * PAR.Conversion Factor 1
      PAR.USR_Qty_based_on_U_M1 = PAR.Transaction_Quantity * PAR.Conversion_Factor_1 'H';

      ENDIF;

      //?Process entered U/M3
      CASE;

      // IF PAR.U/M - Third is Entered
      IF PAR.UOM_Third <> *BLANK;

      //?Convert based on operation factor
      CASE;

      // IF PAR.Operation Factor 2 is Multiply
      IF PAR.Operation_Factor_2 = 'M';

      // PAR.Quantity based on U/M3 S = PAR.Transaction Quantity * PAR.Conversion Factor
      PAR.Quantity_based_on_U_M3_S = PAR.Transaction_Quantity * PAR.Conversion_Factor_2 'H';

      //?Convert based on operation factor
      // IF PAR.Operation Factor 2 is Divide
      IF PAR.Operation_Factor_2 = 'D';

      CASE;

      // IF PAR.Conversion Factor 2 is Entered
      IF PAR.Conversion_Factor_2 <> *ZERO;

      // PAR.Quantity based on U/M3 S = PAR.Transaction Quantity / PAR.Conversion Factor
      PAR.Quantity_based_on_U_M3_S = PAR.Transaction_Quantity / PAR.Conversion_Factor_2 'H';

      ENDIF;

      ENDIF;

      // PAR.Quantity based on U/M3 = PAR.Quantity based on U/M3 S
      PAR.USR_Qty_based_on_U_M3 = PAR.Quantity_based_on_U_M3_S;

      ENDIF;

      //?Process based on transaction U/M
      // IF PAR.U/M - Third EQ PAR.U/M - Transaction
      IF PAR.UOM_Third = PAR.UOM_Transaction;

      // PAR.Quantity based on U/M3 = PAR.Transaction Quantity
      PAR.USR_Qty_based_on_U_M3 = PAR.Transaction_Quantity;

      //?Convert based on operation factor
      CASE;

      // IF PAR.Operation Factor 2 is Multiply
      IF PAR.Operation_Factor_2 = 'M';

      CASE;

      // IF PAR.Conversion Factor 2 is Entered
      IF PAR.Conversion_Factor_2 <> *ZERO;

      // PAR.Quantity based on U/M2 S = PAR.Transaction Quantity / PAR.Conversion Factor
      PAR.Quantity_based_on_U_M2_S = PAR.Transaction_Quantity / PAR.Conversion_Factor_2 'H';

      ENDIF;

      //?Convert based on operation factor
      // IF PAR.Operation Factor 2 is Divide
      IF PAR.Operation_Factor_2 = 'D';

      // PAR.Quantity based on U/M2 S = PAR.Transaction Quantity * PAR.Conversion Factor
      PAR.Quantity_based_on_U_M2_S = PAR.Transaction_Quantity * PAR.Conversion_Factor_2 'H';

      ENDIF;

      // PAR.Quantity based on U/M2 = PAR.Quantity based on U/M2 S
      PAR.USR_Qty_based_on_U_M2 = PAR.Quantity_based_on_U_M2_S;

      //?Convert based on operation factor
      CASE;

      // IF PAR.Operation Factor 1 is Multiply
      IF PAR.Operation_Factor_1 = 'M';

      CASE;

      // IF PAR.Conversion Factor 1 is Entered
      IF PAR.Conversion_Factor_1 <> *ZERO;

      // PAR.Quantity based on U/M1 = PAR.Quantity based on U/M2 S / PAR.Conversion Facto
      PAR.USR_Qty_based_on_U_M1 = PAR.Quantity_based_on_U_M2_S / PAR.Conversion_Factor_1 'H';

      ENDIF;

      //?Convert based on operation factor
      // IF PAR.Operation Factor 1 is Divide
      IF PAR.Operation_Factor_1 = 'D';

      // PAR.Quantity based on U/M1 = PAR.Quantity based on U/M2 S * PAR.Conversion Facto
      PAR.USR_Qty_based_on_U_M1 = PAR.Quantity_based_on_U_M2_S * PAR.Conversion_Factor_1 'H';

      ENDIF;

      ENDIF;

     }

     //?USER: Processing before Data update

     // PGM.*Record Data Changed = CND.*YES
     PGM.*Record_Data_Changed = 'Y';

     //?(Creates IB if not found or updates if it exists)
     //?Update IC Item Balance Detail
     EXECUTE FUNCTION(UPD Value/Qty          RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1413032;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Item_Code);
     PARAMETER(DB1.Warehouse_Code);
     PARAMETER(PAR.Production_Date);
     PARAMETER(PAR.Inventory_Trans_ID);
     PARAMETER(PAR.Inventory_Trans_Type);
     PARAMETER(PAR.Transaction_Date_Code);
     PARAMETER(PAR.UOM_Transaction);
     PARAMETER(PAR.Transaction_Quantity);
     PARAMETER(PAR.Transaction_Weight);
     PARAMETER(PAR.UOM_Cost);
     PARAMETER(PAR.Extended_Amount);
     PARAMETER(PAR.Shift_Number);
     PARAMETER(PAR.Label_Date);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Conversion_Factor_1);
     PARAMETER(PAR.Operation_Factor_1);
     PARAMETER(PAR.UOM_Second);
     PARAMETER(PAR.Conversion_Factor_2);
     PARAMETER(PAR.Operation_Factor_2);
     PARAMETER(PAR.UOM_Third);
     PARAMETER(DB1.Item_Structure_Class_Code);
     PARAMETER(DB1.Item_Structure_Group_Code);
     PARAMETER(DB1.Item_Structure_Type_Code);
     PARAMETER(PAR.Quantity_based_on_U_M1_S);
     {
      //?USER: Processing if Data record not found

      CASE;

      // IF PAR.Quantity based on U/M1 S EQ WRK.ZERO
      IF PAR.Quantity_based_on_U_M1_S = WRK.ZERO;

      EXECUTE FUNCTION(Crt Item Bal. Detail   CR) TYPE(CRTOBJ) FILE(CAB1REP)          AC1120962;
      PARAMETER(PAR.Company_Number);
      PARAMETER(PAR.Item_Code);
      PARAMETER(PAR.Warehouse_Code);
      PARAMETER(PAR.Production_Date);
      PARAMETER(*ZERO);
      PARAMETER(*ZERO);
      PARAMETER(*ZERO);
      PARAMETER(*ZERO);
      PARAMETER(*BLANK);
      PARAMETER(*ZERO);
      PARAMETER(PAR.Quantity_based_on_U_M1_S);
      PARAMETER(*ZERO);
      PARAMETER(*ZERO);
      PARAMETER(*ZERO);
      PARAMETER(*ZERO);
      PARAMETER('N');
      PARAMETER(*ZERO);
      PARAMETER(*ZERO);
      PARAMETER(*ZERO);
      PARAMETER(*ZERO);
      PARAMETER(*ZERO);
      PARAMETER(*ZERO);
      PARAMETER(*ZERO);
      PARAMETER(*ZERO);
      PARAMETER(PAR.Label_Date);
      PARAMETER(PAR.Item_Structure_Class_Code);
      PARAMETER(PAR.Item_Structure_Group_Code);
      PARAMETER(PAR.Item_Structure_Type_Code);
      PARAMETER(*BLANK);
      PARAMETER(*BLANK);
      PARAMETER(*BLANK);
      PARAMETER('A');
      {
       //?USER: Processing before Data update

       EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
       PARAMETER(DB1.Job_Time);
       PARAMETER(DB1.User_Id);
       PARAMETER(DB1.Job_Name);
       PARAMETER(DB1.Job_Date);
       {
        //?Execute internal function

        // PAR.Job Time = JOB.*Job time
        PAR.Job_Time = JOB.*Job_time;

        // PAR.User Id = JOB.*USER
        PAR.User_Id = JOB.*USER;

        // PAR.Job Name = JOB.*JOB
        PAR.Job_Name = JOB.*JOB;

        // PAR.Job Date = JOB.*Job date
        PAR.Job_Date = JOB.*Job_date;

       }

       // Call program RTV System Date/Time   UP.
       CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
       PARAMETER(DB1.Job_Date);
       PARAMETER(DB1.Job_Time);

      }

      // IF *OTHERWISE
      IF *OTHERWISE;

      EXECUTE FUNCTION(Crt Item Bal. Detail   CR) TYPE(CRTOBJ) FILE(CAB1REP)          AC1120962;
      PARAMETER(PAR.Company_Number);
      PARAMETER(PAR.Item_Code);
      PARAMETER(PAR.Warehouse_Code);
      PARAMETER(PAR.Production_Date);
      PARAMETER(*ZERO);
      PARAMETER(*ZERO);
      PARAMETER(*ZERO);
      PARAMETER(*ZERO);
      PARAMETER(*BLANK);
      PARAMETER(PAR.Transaction_Weight);
      PARAMETER(PAR.Quantity_based_on_U_M1_S);
      PARAMETER(*ZERO);
      PARAMETER(*ZERO);
      PARAMETER(*ZERO);
      PARAMETER(*ZERO);
      PARAMETER('N');
      PARAMETER(*ZERO);
      PARAMETER(*ZERO);
      PARAMETER(*ZERO);
      PARAMETER(*ZERO);
      PARAMETER(*ZERO);
      PARAMETER(*ZERO);
      PARAMETER(*ZERO);
      PARAMETER(PAR.Extended_Amount);
      PARAMETER(PAR.Label_Date);
      PARAMETER(PAR.Item_Structure_Class_Code);
      PARAMETER(PAR.Item_Structure_Group_Code);
      PARAMETER(PAR.Item_Structure_Type_Code);
      PARAMETER(*BLANK);
      PARAMETER(*BLANK);
      PARAMETER(*BLANK);
      PARAMETER('A');
      {
       //?USER: Processing before Data update

       EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
       PARAMETER(DB1.Job_Time);
       PARAMETER(DB1.User_Id);
       PARAMETER(DB1.Job_Name);
       PARAMETER(DB1.Job_Date);
       {
        //?Execute internal function

        // PAR.Job Time = JOB.*Job time
        PAR.Job_Time = JOB.*Job_time;

        // PAR.User Id = JOB.*USER
        PAR.User_Id = JOB.*USER;

        // PAR.Job Name = JOB.*JOB
        PAR.Job_Name = JOB.*JOB;

        // PAR.Job Date = JOB.*Job date
        PAR.Job_Date = JOB.*Job_date;

       }

       // Call program RTV System Date/Time   UP.
       CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
       PARAMETER(DB1.Job_Date);
       PARAMETER(DB1.Job_Time);

      }

      ENDIF;

      //?USER: Process Data record

      //?Calculate new On Hand Value
      CASE;

      // IF PAR.Inventory Trans. Type is Adjustment Cycle Count
      IF PAR.Inventory_Trans_Type = 'AC';

      // PAR.Value of On Hand Inventor = DB1.Value of On Hand Inventor + PAR.Extended Amo
      PAR.Value_of_On_Hand_Inventor = DB1.Value_of_On_Hand_Inventor + PAR.Extended_Amount;

      //?Calculate new On Hand Value
      // IF PAR.Inventory Trans. Type is Quantity based Avg. Cost
      IF PAR.Inventory_Trans_Type = 'R'/'RP'/'S'/'TW'/'RW'/'RR';

      // PAR.Value of On Hand Inventor = DB1.Value of On Hand Inventor + PAR.Extended Amo
      PAR.Value_of_On_Hand_Inventor = DB1.Value_of_On_Hand_Inventor + PAR.Extended_Amount;

      ENDIF;

      // PAR.Quantity on Hand - Weight = PAR.Transaction Weight + DB1.Quantity on Hand -
      PAR.Quantity_on_Hand_Weight = PAR.Transaction_Weight + DB1.Quantity_on_Hand_Weight;

      // PAR.Quantity on Hand - U/M1 = DB1.Quantity on Hand - U/M1 + PAR.Quantity based o
      PAR.Quantity_on_Hand_UOM1 = DB1.Quantity_on_Hand_UOM1 + PAR.Quantity_based_on_U_M1_S;

      //?If quantity goes TO exactly 0, wgt and value to go 0
      CASE;

      // IF PAR.Quantity on Hand - U/M1 EQ WRK.ZERO
      IF PAR.Quantity_on_Hand_UOM1 = WRK.ZERO;

      // Call program UPD Create Weight Adj. XF.
      CALL PROGRAM(UPD Create Weight Adj. XF) ('PDMYXFR');
      PARAMETER(DB1.Company_Number);
      PARAMETER(DB1.Item_Code);
      PARAMETER(DB1.Warehouse_Code);
      PARAMETER(PAR.Transaction_Date_Code);
      PARAMETER(DB1.Production_Date);
      PARAMETER(PAR.UOM_Transaction);
      PARAMETER(PAR.Quantity_on_Hand_Weight);
      PARAMETER(PAR.Unit_Cost_Per_Pound);
      PARAMETER(PAR.UOM_Cost);
      PARAMETER(DB1.Item_Structure_Class_Code);
      PARAMETER(DB1.Item_Structure_Group_Code);
      PARAMETER(DB1.Item_Structure_Type_Code);
      PARAMETER(PAR.Shift_Number);
      PARAMETER(DB1.Label_Date);

      // PAR.Quantity on Hand - Weight = CON.*ZERO
      PAR.Quantity_on_Hand_Weight = *ZERO;

      // PAR.Value of On Hand Inventor = CON.*ZERO
      PAR.Value_of_On_Hand_Inventor = *ZERO;

      ENDIF;

      EXECUTE FUNCTION(Rtv Lot Tracking Flag RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1506123;
      PARAMETER(DB1.Warehouse_Code);
      PARAMETER(PAR.Lot_Tracking_Flag);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

      CASE;

      // IF PAR.Quantity on Hand - U/M1 EQ WRK.ZERO
      IF PAR.Quantity_on_Hand_UOM1 = WRK.ZERO;

      // AND DB1.Production Date NE WRK.ZERO
      AND DB1.Production_Date <> WRK.ZERO;

      // AND PAR.Lot Tracking Flag is Not Yes
      AND PAR.Lot_Tracking_Flag = *BLANK/'N';

      EXECUTE FUNCTION(DLT Item Bal. Detail   DL) TYPE(DLTOBJ) FILE(CAB1REP)          AC1120964;
      PARAMETER(DB1.Company_Number);
      PARAMETER(DB1.Item_Code);
      PARAMETER(DB1.Warehouse_Code);
      PARAMETER(DB1.Production_Date);
      // IF *OTHERWISE
      IF *OTHERWISE;

      EXECUTE FUNCTION(Chg Item Bal. Detail   CH) TYPE(CHGOBJ) FILE(CAB1REP)          AC1120963;
      PARAMETER(DB1.Company_Number);
      PARAMETER(DB1.Item_Code);
      PARAMETER(DB1.Warehouse_Code);
      PARAMETER(DB1.Production_Date);
      PARAMETER(DB1.Physical_Count_Weight);
      PARAMETER(DB1.Physical_Count_Qty_UOM1);
      PARAMETER(DB1.Physical_Count_Qty_UOM2);
      PARAMETER(DB1.Physical_Count_Qty_UOM3);
      PARAMETER(DB1.Physical_Count_Status);
      PARAMETER(PAR.Quantity_on_Hand_Weight);
      PARAMETER(PAR.Quantity_on_Hand_UOM1);
      PARAMETER(DB1.Quantity_on_Hand_UOM2);
      PARAMETER(DB1.Quantity_on_Hand_UOM3);
      PARAMETER(DB1.Quantity_In_Chill);
      PARAMETER(DB1.Weight_In_Chill);
      PARAMETER(DB1.Update_Exception_Status);
      PARAMETER(DB1.Physical_Start_Weight);
      PARAMETER(DB1.Physical_Start_UOM1);
      PARAMETER(DB1.Physical_Start_UOM2);
      PARAMETER(DB1.Physical_Start_UOM3);
      PARAMETER(DB1.Physical_Start_Date);
      PARAMETER(DB1.Unit_Cost_Per_Pound);
      PARAMETER(DB1.Last_Cost);
      PARAMETER(PAR.Value_of_On_Hand_Inventor);
      PARAMETER(DB1.Item_Structure_Class_Code);
      PARAMETER(DB1.Item_Structure_Group_Code);
      PARAMETER(DB1.Item_Structure_Type_Code);
      {
       //?USER: Processing before Data update

       EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
       PARAMETER(DB1.Job_Time);
       PARAMETER(DB1.User_Id);
       PARAMETER(DB1.Job_Name);
       PARAMETER(DB1.Job_Date);
       {
        //?Execute internal function

        // PAR.Job Time = JOB.*Job time
        PAR.Job_Time = JOB.*Job_time;

        // PAR.User Id = JOB.*USER
        PAR.User_Id = JOB.*USER;

        // PAR.Job Name = JOB.*JOB
        PAR.Job_Name = JOB.*JOB;

        // PAR.Job Date = JOB.*Job date
        PAR.Job_Date = JOB.*Job_date;

       }

       // DB1.Job Name = JOB.*PROGRAM
       DB1.Job_Name = JOB.*PROGRAM;

      }

      ENDIF;

     }

     //?Update the quantity/weight on hand in the item balance file
     EXECUTE FUNCTION(RTV Sum Act Qty,Wgt,ValRT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1402850;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Item_Code);
     PARAMETER(DB1.Warehouse_Code);
     PARAMETER(DB1.On_Hand_Weight_Summary);
     PARAMETER(DB1.On_Hand_UOM1_Summary);
     PARAMETER(WRK.Numeric_Field_Not_Needed);
     PARAMETER(WRK.Numeric_Field_Not_Needed);
     PARAMETER(DB1.Value_of_On_Hand_Inventor);
     {
      //?USER: Initialize routine

      // PAR.Quantity on Hand - Weight = CON.*ZERO
      PAR.Quantity_on_Hand_Weight = *ZERO;

      // PAR.Quantity on Hand - U/M1 = CON.*ZERO
      PAR.Quantity_on_Hand_UOM1 = *ZERO;

      // PAR.Quantity on Hand - U/M2 = CON.*ZERO
      PAR.Quantity_on_Hand_UOM2 = *ZERO;

      // PAR.Quantity on Hand - U/M3 = CON.*ZERO
      PAR.Quantity_on_Hand_UOM3 = *ZERO;

      // PAR.Value of On Hand Inventor = CON.*ZERO
      PAR.Value_of_On_Hand_Inventor = *ZERO;

      //?USER: Process Data record

      // PAR.Quantity on Hand - Weight = PAR.Quantity on Hand - Weight + DB1.Quantity on
      PAR.Quantity_on_Hand_Weight = PAR.Quantity_on_Hand_Weight + DB1.Quantity_on_Hand_Weight;

      // PAR.Quantity on Hand - U/M1 = PAR.Quantity on Hand - U/M1 + DB1.Quantity on Hand
      PAR.Quantity_on_Hand_UOM1 = PAR.Quantity_on_Hand_UOM1 + DB1.Quantity_on_Hand_UOM1;

      // PAR.Quantity on Hand - U/M2 = PAR.Quantity on Hand - U/M2 + DB1.Quantity on Hand
      PAR.Quantity_on_Hand_UOM2 = PAR.Quantity_on_Hand_UOM2 + DB1.Quantity_on_Hand_UOM2;

      // PAR.Quantity on Hand - U/M3 = PAR.Quantity on Hand - U/M3 + DB1.Quantity on Hand
      PAR.Quantity_on_Hand_UOM3 = PAR.Quantity_on_Hand_UOM3 + DB1.Quantity_on_Hand_UOM3;

      // PAR.Value of On Hand Inventor = PAR.Value of On Hand Inventor + DB1.Value of On
      PAR.Value_of_On_Hand_Inventor = PAR.Value_of_On_Hand_Inventor
      + DB1.Value_of_On_Hand_Inventor;

     }

     EXECUTE FUNCTION(Available Primary U/M) TYPE(DRVFLD)                            AC1123809;
     PARAMETER(DB1.Quantity_Avail_To_Sell);
     PARAMETER(DB1.On_Hand_UOM1_Summary);
     PARAMETER(DB1.Quantity_Scheduled_UOM1);
     {
      //?Calculate derived field

      // PAR.Available Primary U/M = PAR.On Hand Primary U/M - PAR.USR Allocated Primary
      PAR.Available_Primary_U_M = PAR.On_Hand_Primary_U_M - PAR.USR_Allocated_Primary_U_M;

     }

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

   }

  }

  //?** Process Auto-Locate Whse inventory             FP1127
  EXECUTE FUNCTION(RTV Warehouse Info     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1910512;
  PARAMETER(PAR.USR_Warehouse_Code);
  PARAMETER(NLL.Warehouse_Description);
  PARAMETER(NLL.Address_Line_1);
  PARAMETER(NLL.Address_Line_2);
  PARAMETER(NLL.Address_Line_3);
  PARAMETER(NLL.City);
  PARAMETER(NLL.Zip_Postal_Code);
  PARAMETER(NLL.Production_Warehouse_Code);
  PARAMETER(NLL.State_Code);
  PARAMETER(LCL.Lot_Tracking_Flag);
  PARAMETER(NLL.Default_Printer);
  PARAMETER(NLL.Warehouse_Type);
  PARAMETER(NLL.Trans_Contol_AS400_Plant);
  PARAMETER(LCL.Warehouse_Location);
  PARAMETER(NLL.Warehouse_Std_Chill_Time);
  PARAMETER(NLL.Warehouse_Chill_Time);
  PARAMETER(NLL.Include_in_Auto_Pre_Pick);
  PARAMETER(NLL.Default_Manifest_Copies);
  PARAMETER(NLL.Default_Load_Sequence);
  PARAMETER(NLL.WHS_Slotting_Limit_Type);
  PARAMETER(NLL.Shipping_Company);
  PARAMETER(NLL.Accounting_Company);
  PARAMETER(NLL.WHS_Sched_Prod_Max_Days);
  PARAMETER(NLL.WHS_Inventory_Chill_Time);
  PARAMETER(NLL.Parent_Warehouse);
  PARAMETER(NLL.Default_Shipping_Whs);
  PARAMETER(LCL.WHS_Live_with_Carlisle);
  PARAMETER(NLL.WHS_PFS_Interface);
  PARAMETER(NLL.WHS_Req_Meter_Reading_Shp);
  PARAMETER(NLL.WHS_Default_Load_Type);
  PARAMETER(NLL.WHS_TMS_Planning_Region);
  PARAMETER(NLL.Default_Carrier_Code);
  PARAMETER(NLL.Inventory_Logic_Version);
  PARAMETER(NLL.WHS_Auto_Inv_Restoration);
  PARAMETER(NLL.EDI_Status_1);
  PARAMETER(NLL.EDI_Status_2);
  PARAMETER(NLL.EDI_Status_3);
  PARAMETER(NLL.Record_Status);
  PARAMETER(NLL.Job_Time);
  PARAMETER(NLL.User_Id);
  PARAMETER(NLL.Job_Name);
  PARAMETER(NLL.Job_Date);
  {
   //?USER: Initialize routine

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Record selected = CND.*YES
   PGM.*Record_selected = 'Y';

  }

  //?** Process lot tracking if External, not Carlisle, Lot trk=Y
  CASE;

  // IF LCL.Warehouse Location is External
  IF LCL.Warehouse_Location = 'E';

  // AND LCL.WHS Live w/Carlisle is *No/Blank
  AND LCL.WHS_Live_with_Carlisle = *BLANK/'N';

  // AND LCL.Lot Tracking Flag is yes
  AND LCL.Lot_Tracking_Flag = 'Y';

  //?** Lot Number is passed in and is optional
  EXECUTE FUNCTION(RTV Whse Location Info RT) TYPE(RTVOBJ) FILE(PDL2REP)          AC1910914;
  PARAMETER(PAR.USR_Warehouse_Code);
  PARAMETER(WRK.Location_Code);
  PARAMETER(LCL.Location_Aisle);
  PARAMETER(LCL.Location_Bay);
  PARAMETER(LCL.Loc_Unused_Chill_Time);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?** Lot# will be the "to warehouse" lot# or zeros    FP1127
  // Call program UPD Auto-Loc TR Ord ItmXF.
  CALL PROGRAM(UPD Auto-Loc TR Ord ItmXF) ('PMBVXFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code_USR);
  PARAMETER(PAR.USR_Warehouse_Code);
  PARAMETER(PAR.Transaction_Date_Code);
  PARAMETER(PAR.Lot_Number_USR);
  PARAMETER(WRK.Location_Code);
  PARAMETER(WRK.Location_Level);
  PARAMETER(WRK.Transaction_Quantity);
  PARAMETER(PAR.Order_Number);

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  //?**************************************************************************
  //?08/10/23 DN WI517-Call WIM API if Live or Parallel.
  CASE;

  // IF LCL.Module Release Status is Is Live
  IF LCL.Module_Release_Status = 'Y';

  // OR LCL.Module Release Status is Parallel
  OR LCL.Module_Release_Status = 'P';

  // PAR.API was Called? U = CND.Yes
  PAR.API_was_Called_U = 'Y';

  // LCL.API EccResult-MsgId U = CON.*BLANK
  LCL.API_EccResult_MsgId_U = *BLANK;

  // LCL.API EccResult-MsgDesc U = CON.*BLANK
  LCL.API_EccResult_MsgDesc_U = *BLANK;

  // LCL.API Request Key U = CON.*BLANK
  LCL.API_Request_Key_U = *BLANK;

  // LCL.API Name = CONCAT(CON.wim.ordershipping.invento,CON.ry,CON.*ZERO)
  LCL.API_Name = 'wim.ordershipping.invento' + 'ry' (*ZERO);

  EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1510877;
  PARAMETER('APIWAITTME');
  PARAMETER(LCL.API_Wait_Time_U);
  {
   //?USER: Process Data record

   // PAR.System Value Numeric = DB1.System Value Numeric
   PAR.System_Value_Numeric = DB1.System_Value_Numeric;

   QUIT;

  }

  //?Call API Wrapper Program for wim.ordershipping.inventory API.
  //?1/6/24 DN SR08283-Added 'API Request Key U' & 'API Mode U' Parms.
  // Call program API WIM Inv Shipping   UP.
  CALL PROGRAM(API WIM Inv Shipping   UP) ('PVAYUPR');
  PARAMETER(LCL.API_Wait_Time_U);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Inventory_Trans_ID);
  PARAMETER(PAR.Inventory_Trans_Type);
  PARAMETER(PAR.Transaction_Date_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Transaction_Source);
  PARAMETER(PAR.Description);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Shift_Number);
  PARAMETER(PAR.USR_Warehouse_Code);
  PARAMETER(LCL.Transaction_Weight);
  PARAMETER(LCL.Transaction_Quantity);
  PARAMETER(PAR.USR_Unship_Flag);
  PARAMETER(PAR.Inter_Plant_Transfer_USR);
  PARAMETER(LCL.API_EccResult_MsgId_U);
  PARAMETER(LCL.API_EccResult_MsgDesc_U);
  PARAMETER(LCL.API_Request_Key_U);
  PARAMETER(*SNDRCV);

  //?API Call Successful? If Not, Create Log & Send Email.
  CASE;

  // IF LCL.API EccResult-MsgId U is Success
  IF LCL.API_EccResult_MsgId_U = 'ECC0000';

  // OR LCL.API EccResult-MsgId U is Timeout
  OR LCL.API_EccResult_MsgId_U = 'TIMEOUT';

  // PAR.Inventory Updated USR = CND.Yes
  PAR.Inventory_Updated_USR = 'Y';

  //?01/06/24 DN SR08283-Create Log Record for Timeout Transaction.
  CASE;

  // IF LCL.API EccResult-MsgId U is Timeout
  IF LCL.API_EccResult_MsgId_U = 'TIMEOUT';

  // Call program Crt WIM API Failure LogXF.
  CALL PROGRAM(Crt WIM API Failure LogXF) ('PVA8XFR');
  PARAMETER(LCL.API_Name);
  PARAMETER(LCL.API_EccResult_MsgId_U);
  PARAMETER(LCL.API_EccResult_MsgDesc_U);
  PARAMETER(LCL.API_Request_Key_U);
  PARAMETER(PAR.Called_From_Program);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Inventory_Trans_ID);
  PARAMETER(PAR.Inventory_Trans_Type);
  PARAMETER(PAR.Transaction_Date_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Transaction_Source);
  PARAMETER(PAR.Description);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Shift_Number);
  PARAMETER(PAR.USR_Warehouse_Code);
  PARAMETER(LCL.Transaction_Weight);
  PARAMETER(LCL.Transaction_Quantity);
  PARAMETER(PAR.USR_Unship_Flag);
  PARAMETER(PAR.Inter_Plant_Transfer_USR);

  ENDIF;

  //?API Call Successful? If Not, Create Log & Send Email.
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?SR07943 DN 12/21/23-Added 'API EccResult-MsgId U is Entered' Cond.
  CASE;

  // IF LCL.API EccResult-MsgId U is Entered
  IF LCL.API_EccResult_MsgId_U <> *BLANK;

  // PAR.Inventory Updated USR = CND.No
  PAR.Inventory_Updated_USR = 'N';

  //?1/6/24 DN SR08283-Added 'API Request Key' as Input Parm.
  // Call program Crt WIM API Failure LogXF.
  CALL PROGRAM(Crt WIM API Failure LogXF) ('PVA8XFR');
  PARAMETER(LCL.API_Name);
  PARAMETER(LCL.API_EccResult_MsgId_U);
  PARAMETER(LCL.API_EccResult_MsgDesc_U);
  PARAMETER(LCL.API_Request_Key_U);
  PARAMETER(PAR.Called_From_Program);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Inventory_Trans_ID);
  PARAMETER(PAR.Inventory_Trans_Type);
  PARAMETER(PAR.Transaction_Date_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Transaction_Source);
  PARAMETER(PAR.Description);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Shift_Number);
  PARAMETER(PAR.USR_Warehouse_Code);
  PARAMETER(LCL.Transaction_Weight);
  PARAMETER(LCL.Transaction_Quantity);
  PARAMETER(PAR.USR_Unship_Flag);
  PARAMETER(PAR.Inter_Plant_Transfer_USR);

  //?Keep Track of Batch Processing Functions so Email will NOT be Sent Here.
  CASE;

  // IF PAR.Called From Program is Exc Upd EDI 944 Trsn   XF
  IF PAR.Called_From_Program = 'PUDLXFR';

  // OR PAR.Called From Program is EDT Confirm Ship Detl  DF
  OR PAR.Called_From_Program = 'PDL8DFR';

  // OR PAR.Called From Program is ADD Ready to Confirm  XL
  OR PAR.Called_From_Program = 'PNTKXFR';

  // OR PAR.Called From Program is Exc Upd EDI 945 Trsn   XF
  OR PAR.Called_From_Program = 'PUEJXFR';

  // OR PAR.Called From Program is PFS Reopen Order      XL
  OR PAR.Called_From_Program = 'PNTWXFR';

  // OR PAR.Called From Program is WW Unship Orders       DF
  OR PAR.Called_From_Program = 'PDMLDFR';

  //?Keep Track of Batch Processing Functions so Email will NOT be Sent Here.
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Send Email to Business & IT.
  // Call program Prc Eml Shipping & IT  XF.
  CALL PROGRAM(Prc Eml Shipping & IT  XF) ('PVA9XFR');
  PARAMETER(PAR.Called_From_Program);

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  //?**************************************************************************
 }

 ENDIF;

}


//?Initialize Detail fields
DO;

// DTL.Item Code = CON.*ZERO
DTL.Item_Code = *ZERO;

// DTL.Production Date = CON.*ZERO
DTL.Production_Date = *ZERO;

// DTL.ILL Item Qty On-Hand = CON.*ZERO
DTL.ILL_Item_Qty_On_Hand = *ZERO;

// DTL.Lot Number = CON.*ZERO
DTL.Lot_Number = *ZERO;

// DTL.ILL Avail Ship Date = CON.*ZERO
DTL.ILL_Avail_Ship_Date = *ZERO;

// DTL.Location Code = CON.*BLANK
DTL.Location_Code = *BLANK;

// DTL.ILL Status = WRK.BLANK
DTL.ILL_Status = WRK.BLANK;

// DTL.Location Level = CON.*ZERO
DTL.Location_Level = *ZERO;

// DTL.Inv Hold Reason Code = WRK.BLANK
DTL.Inv_Hold_Reason_Code = WRK.BLANK;

// DTL.Lot Number USR = CON.*ZERO
DTL.Lot_Number_USR = *ZERO;

// DTL.Location Code USR = CON.*BLANK
DTL.Location_Code_USR = *BLANK;

// DTL.Location Level USR = CON.*ZERO
DTL.Location_Level_USR = *ZERO;

// DTL.LLT Trans Qty = CON.*ZERO
DTL.LLT_Transaction_Qty = *ZERO;

ENDDO;

