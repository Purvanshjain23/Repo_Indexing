// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POWLDFR
// ?Date: 14.08.2025 Time: 03:39:21
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('YR');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(Rtv Yld Profile Dft   RT) TYPE(RTVOBJ) FILE(POCXREP)           AC1665295;
PARAMETER(JOB.*USER);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.Production_Line_Code);
PARAMETER(LCL.User_Department);
PARAMETER(LCL.User_Access);
PARAMETER(WRK.Count_USR);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 // AND DB1.User Line In Process is yes
 AND DB1.User_Line_In_Process = 'Y';

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Count USR = PAR.Count USR + CON.1
 PAR.Count_USR = PAR.Count_USR + 1;

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 ENDIF;

}


EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.Allow_Multi_Company);
PARAMETER(LCL.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

// LCL.Select Options USR = CON.2=Edit
LCL.Select_Options_USR = '2=Edit';

// LCL.Select Options USR = CONCAT(LCL.Select Options USR,CON.4=Delete Trans,CON.1)
LCL.Select_Options_USR = LCL.Select_Options_USR + '4=Delete Trans' (1);

// LCL.Select Options USR = CONCAT(LCL.Select Options USR,CON.7=Recapture Trans,CON.1)
LCL.Select_Options_USR = LCL.Select_Options_USR + '7=Recapture Trans' (1);

// LCL.Select Options USR = CONCAT(LCL.Select Options USR,CON.9=Next Production,CON.1)
LCL.Select_Options_USR = LCL.Select_Options_USR + '9=Next Production' (1);

//?USER: Initialize subfile control

CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

// CTL.Company Number = WRK.Company Number
CTL.Company_Number = WRK.Company_Number;

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

ENDIF;

//?USER: Initialize subfile record from DBF record

CASE;

// IF CTL.Company Number is greater than zero
IF CTL.Company_Number > *ZERO;

CASE;

// IF CTL.Company Number NE RCD.Company Number
IF CTL.Company_Number <> RCD.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?2=Edit
CASE;

// IF RCD.*SFLSEL is *Edit
IF RCD.*SFLSEL = '2'/'2';

CASE;

// IF RCD.YDL Process Status is 00-Reporting Not Started
IF RCD.YDL_Process_Status = *BLANK;

// Call program Zzz Prod Date/Shift   PV.
CALL PROGRAM(Zzz Prod Date/Shift   PV) ('POWMPVR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Production_Line_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Production_Shift);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'End of Shift Setup for Department &1 and Line &2 has already been performed
ERROR(USR3243);
MSGPARM(RCD.Department_Code);
MSGPARM(RCD.Production_Line_Code);

ENDIF;

ENDIF;

//?4=Delete Transactions
CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

CASE;

// IF RCD.YDL Process Status is Yield Approved
IF RCD.YDL_Process_Status = '03'/'04';

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF JOB.*USER is Rose/Purva
IF JOB.*USER = 'ISPURVAP'/'ISRCENT';

// OR LCL.User Department is Accounting
OR LCL.User_Department = 'AC';

EXECUTE FUNCTION(Dlt Yld Detail Trans  RT) TYPE(RTVOBJ) FILE(POCPCPP)           AC1671461;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Production_Line_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Production_Shift);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Dlt Yld Detail Trans  DL) TYPE(DLTOBJ) FILE(POCPCPP)           AC1664094;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Partial_Item_Code);
 PARAMETER(DB1.Yld_Transaction_Code);
 PARAMETER(DB1.Yld_Transaction_Seq);
}


EXECUTE FUNCTION(Dlt Yld Inventory Bal RT) TYPE(RTVOBJ) FILE(POCOCPP)           AC1671462;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Production_Line_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Production_Shift);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Dlt Yld Inventory Bal DO) TYPE(DLTOBJ) FILE(POCOCPP)           AC1664075;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Partial_Item_Code);
}


EXECUTE FUNCTION(Chg Process Status    CH) TYPE(CHGOBJ) FILE(POCSCPP)           AC1665842;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Production_Line_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Production_Shift);
PARAMETER(RCD.YDL_Post_Status);
PARAMETER(*BLANK);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

ENDIF;

//?6=Recapture Transactions
CASE;

// IF RCD.*SFLSEL is Option 6
IF RCD.*SFLSEL = '6'/'6';

CASE;

// IF RCD.YDL Process Status is 04=Yield Approved AC
IF RCD.YDL_Process_Status = '04';

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF JOB.*USER is Rose/Purva
IF JOB.*USER = 'ISPURVAP'/'ISRCENT';

// OR LCL.User Department is Accounting
OR LCL.User_Department = 'AC';

EXECUTE FUNCTION(Rtv Init Production   RT) TYPE(RTVOBJ) FILE(POCPCPP)           AC1673663;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Production_Line_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Production_Shift);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Dlt Yld Detail Trans  DL) TYPE(DLTOBJ) FILE(POCPCPP)           AC1664094;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Partial_Item_Code);
 PARAMETER(DB1.Yld_Transaction_Code);
 PARAMETER(DB1.Yld_Transaction_Seq);
}


EXECUTE FUNCTION(Rtv Init Prod/Pending RT) TYPE(RTVOBJ) FILE(POCOCPP)           AC1673665;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Production_Line_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Production_Shift);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Prod/Pending      CH) TYPE(CHGOBJ) FILE(POCOCPP)           AC1673666;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Partial_Item_Code);
 PARAMETER(DB1.Yld_Inv_Balance_Type);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 CASE;

 // IF DB1.Yld Inv Balance Type is WIP Reject
 IF DB1.Yld_Inv_Balance_Type = 'RJ';

 EXECUTE FUNCTION(Chg BeginInv/Not Used CH) TYPE(CHGOBJ) FILE(POCOCPP)           AC1671134;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Partial_Item_Code);
 PARAMETER(DB1.Yld_Inv_Balance_Type);
 PARAMETER(*ZERO);
 PARAMETER(DB1.Not_Used_Wgt);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

}


// Call program Zzz Process Shift End XF.
CALL PROGRAM(Zzz Process Shift End XF) ('POVOXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Production_Line_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Production_Shift);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

ENDIF;

//?7=Next Production Date
CASE;

// IF RCD.*SFLSEL is Option 7
IF RCD.*SFLSEL = '7'/'7';

// Call program Zzz Next Date/Shift   PV.
CALL PROGRAM(Zzz Next Date/Shift   PV) ('POWKPVR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Production_Line_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Production_Shift);
PARAMETER(RCD.YDL_Post_Status);
PARAMETER(RCD.YDL_Process_Status);
PARAMETER(LCL.Record_Found_USR);
PARAMETER(LCL.Yld_Program_USR);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Chg Process Status    CH) TYPE(CHGOBJ) FILE(POCSCPP)           AC1665842;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Production_Line_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Production_Shift);
PARAMETER('P');
PARAMETER(04);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

ENDIF;

//?9=Rollback - open previous shift
CASE;

// IF RCD.*SFLSEL is 9
IF RCD.*SFLSEL = '9';

//?Rollback
CASE;

// IF JOB.*USER is Rose/Purva
IF JOB.*USER = 'ISPURVAP'/'ISRCENT';

// OR LCL.User Department is Accounting
OR LCL.User_Department = 'AC';

EXECUTE FUNCTION(Rtv Open Prior Shift  RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1801769;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Production_Line_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Production_Shift);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Production Date EQ PAR.Production Date
 IF DB1.Production_Date = PAR.Production_Date;

 // AND DB1.Production Shift EQ PAR.Production Shift
 AND DB1.Production_Shift = PAR.Production_Shift;

 EXECUTE FUNCTION(Del Daily Line Header DL) TYPE(DLTOBJ) FILE(POCSCPP)           AC1664741;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Chg Process Status    CH) TYPE(CHGOBJ) FILE(POCSCPP)           AC1665842;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER('O');
 PARAMETER(03);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 QUIT;

 ENDIF;

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Rollback
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

