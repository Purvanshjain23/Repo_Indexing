// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POPJDFR
// ?Date: 14.08.2025 Time: 03:38:25
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('P/S');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize subfile control

MOVE *ALL (To: CTL From: PAR);

EXECUTE FUNCTION(RTV Desc/Type/LotTrk  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1471511;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.Warehouse_Description);
PARAMETER(LCL.Lot_Tracking_Flag);
PARAMETER(LCL.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize subfile record from DBF record

EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(WRK.Item_Description);
PARAMETER(WRK.UOM_Primary);
PARAMETER(WRK.Unit_Weight);
PARAMETER(WRK.Item_Structure_Class_Code);
PARAMETER(WRK.Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(WRK.Item_Type_Code);
PARAMETER(WRK.Default_Warehouse);
PARAMETER(WRK.Fresh_Chilling_Time);
PARAMETER(WRK.Base_Conv_Loss_Item);
PARAMETER(WRK.Variety_Rendered_Cut);
PARAMETER(WRK.Credit_Item_Status);
PARAMETER(WRK.Std_Weight_Head_Var_Ren);
PARAMETER(WRK.Pieces_Per_Head);
PARAMETER(WRK.Department_Code);
PARAMETER(WRK.Group_for_Packaging);
PARAMETER(WRK.Seconds_Item);
PARAMETER(WRK.Piece_Count_Item);
PARAMETER(WRK.Pieces_Per_Bag);
PARAMETER(WRK.Bags_Per_Unit);
PARAMETER(WRK.Export_Domestic);
PARAMETER(WRK.Print_On_Schedule);
PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
PARAMETER(WRK.Fresh_Sched_As_Ordered);
PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
PARAMETER(WRK.Primal_Group_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Sch Item Info 6dy IF) TYPE(EXCINTFUN)                      AC1644441;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.USR_Day_1);
PARAMETER(CTL.USR_Day_2);
PARAMETER(CTL.USR_Day_3);
PARAMETER(CTL.USR_Day_4);
PARAMETER(CTL.USR_Day_5);
PARAMETER(RCD.Qty_On_Hand_USR);
PARAMETER(RCD.Qty_Sched_Prod_1_USR);
PARAMETER(RCD.Qty_Sched_Ord_1_USR);
PARAMETER(RCD.Qty_Sched_Ord_2_USR);
PARAMETER(RCD.Qty_Sched_Prod_2_USR);
PARAMETER(RCD.Qty_Sched_Ord_3_USR);
PARAMETER(RCD.Qty_Sched_Prod_3_USR);
PARAMETER(RCD.Qty_Sched_Ord_4_USR);
PARAMETER(RCD.Qty_Sched_Prod_4_USR);
PARAMETER(RCD.Qty_Sched_Ord_5_USR);
PARAMETER(RCD.Qty_Sched_Prod_5_USR);
PARAMETER(CTL.USR_Day_1);
PARAMETER(CTL.USR_Day_6);
PARAMETER(WRK.Qty_EOD_Inv_6_USR);
PARAMETER(RCD.Qty_Sched_Ord_6_USR);
PARAMETER(WRK.UOM_Primary);
PARAMETER(WRK.Unit_Weight);
PARAMETER(WRK.Fresh_Chilling_Time);
PARAMETER(WRK.Piece_Count_Item);
PARAMETER(WRK.Pieces_Per_Bag);
PARAMETER(WRK.Bags_Per_Unit);
PARAMETER(WRK.Pieces_Prod_1_USR);
PARAMETER(WRK.Pieces_Prod_2_USR);
PARAMETER(WRK.Pieces_Prod_3_USR);
PARAMETER(WRK.Pieces_Prod_4_USR);
PARAMETER(WRK.Pieces_Prod_5_USR);
PARAMETER(WRK.Pieces_Prod_6_USR);
PARAMETER(WRK.Weight_Prod_1_USR);
PARAMETER(WRK.Weight_Prod_2_USR);
PARAMETER(WRK.Weight_Prod_3_USR);
PARAMETER(WRK.Weight_Prod_4_USR);
PARAMETER(WRK.Weight_Prod_5_USR);
PARAMETER(WRK.Weight_Prod_6_USR);
PARAMETER(WRK.Pieces_Schd_1_USR);
PARAMETER(WRK.Pieces_Schd_2_USR);
PARAMETER(WRK.Pieces_Schd_3_USR);
PARAMETER(WRK.Pieces_schd_4_USR);
PARAMETER(WRK.Pieces_Schd_5_USR);
PARAMETER(WRK.Pieces_Schd_6_USR);
PARAMETER(WRK.Weight_Schd_1_USR);
PARAMETER(WRK.Weight_Schd_2_USR);
PARAMETER(WRK.Weight_Schd_3_USR);
PARAMETER(WRK.Weight_Schd_4_USR);
PARAMETER(WRK.Weight_Schd_5_USR);
PARAMETER(WRK.Weight_Schd_6_USR);
{
 //?Execute internal function

 MOVE *ALL (To: PAR From: CON);

 EXECUTE FUNCTION(Rtv Lot Tracking Flag RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1506123;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(LCL.Lot_Tracking_Flag);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Inventory
 CASE;

 // IF LCL.Lot Tracking Flag is yes
 IF LCL.Lot_Tracking_Flag = 'Y';

 EXECUTE FUNCTION(Rtv Item Loc Qty Tot  RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC1517365;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Qty_On_Hand_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Quantity Loc On-Hand USR = PAR.Quantity Loc On-Hand USR + DB1.ILL Item Qty O
  PAR.Quantity_Loc_On_Hand_USR = PAR.Quantity_Loc_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

 }

 //?Inventory
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV On Hand Qty f/Whse RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC1514970;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Qty_On_Hand_USR);
 {
  //?USER: Process Data record

  // PAR.On Hand U/M1 Summary = PAR.On Hand U/M1 Summary + DB1.On Hand U/M1 Summary
  PAR.On_Hand_UOM1_Summary = PAR.On_Hand_UOM1_Summary + DB1.On_Hand_UOM1_Summary;

 }

 ENDIF;

 //?If inventory qty is less than zero then make zero
 CASE;

 // IF PAR.Qty On-Hand USR is LT Zero
 IF PAR.Qty_On_Hand_USR < *ZERO;

 // PAR.Qty On-Hand USR = CON.*ZERO
 PAR.Qty_On_Hand_USR = *ZERO;

 ENDIF;

 //?Production & Scheduled Shipments
 // PAR.Ord/Sch Sts USR = CND.Scheduled
 PAR.Ord_Sch_Sts_USR = 'S';

 //?Day 1
 DO;

 CASE;

 // IF PAR.USR Day 1 EQ JOB.*Job date
 IF PAR.USR_Day_1 = JOB.*Job_date;

 // LCL.Production Type = CND.Schedule
 LCL.Production_Type = 'S';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Production Type = CND.Plan
 LCL.Production_Type = 'P';

 ENDIF;

 EXECUTE FUNCTION(Rtv Production        RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1459979;
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.Production_Type);
 PARAMETER(PAR.USR_Day_1);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Production_USR);
 PARAMETER(PAR.Pieces_Production_USR);
 PARAMETER(LCL.PS_Production_Warehouse);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // Weight Production
  PAR.Weight_Production_USR = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
  - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
  - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // PAR.PS Shift/Priority = DB1.PS Shift/Priority
  PAR.PS_Production_Warehouse = DB1.PS_Production_Warehouse;

 }

 //?Scheduled Production Quantity
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Qty Sched Prod
 PAR.Qty_Sched_Prod_1_USR = PAR.Pieces_Production_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit 'H' ) 'H';

 //?Scheduled Production Quantity
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Qty Sched Prod 1 USR = PAR.Weight Production USR / PAR.Unit Weight *Rounded
 PAR.Qty_Sched_Prod_1_USR = PAR.Weight_Production_USR / PAR.Unit_Weight 'H';

 ENDIF;

 EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.USR_Day_1);
 PARAMETER(WRK.Weight_Scheduled_SUM);
 PARAMETER(PAR.Qty_Sched_Ord_1_USR);
 PARAMETER(PAR.Ord_Sch_Sts_USR);
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  CASE;

  // IF PAR.Ord/Sch Sts USR is Scheduled
  IF PAR.Ord_Sch_Sts_USR = 'S';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  // IF PAR.Ord/Sch Sts USR is Ordered
  IF PAR.Ord_Sch_Sts_USR = 'O';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

  ENDIF;

  ENDIF;

 }

 ENDDO;

 //?Day 2
 DO;

 CASE;

 // IF PAR.USR Day 2 NE WRK.ZERO
 IF PAR.USR_Day_2 <> WRK.ZERO;

 EXECUTE FUNCTION(Rtv Production        RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1459979;
 PARAMETER(PAR.Company_Number);
 PARAMETER('P');
 PARAMETER(PAR.USR_Day_2);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Production_USR);
 PARAMETER(PAR.Pieces_Production_USR);
 PARAMETER(LCL.PS_Production_Warehouse);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // Weight Production
  PAR.Weight_Production_USR = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
  - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
  - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // PAR.PS Shift/Priority = DB1.PS Shift/Priority
  PAR.PS_Production_Warehouse = DB1.PS_Production_Warehouse;

 }

 EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.USR_Day_2);
 PARAMETER(WRK.Weight_Scheduled_SUM);
 PARAMETER(PAR.Qty_Sched_Ord_2_USR);
 PARAMETER(PAR.Ord_Sch_Sts_USR);
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  CASE;

  // IF PAR.Ord/Sch Sts USR is Scheduled
  IF PAR.Ord_Sch_Sts_USR = 'S';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  // IF PAR.Ord/Sch Sts USR is Ordered
  IF PAR.Ord_Sch_Sts_USR = 'O';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

  ENDIF;

  ENDIF;

 }

 //?Scheduled Production Quantity
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Qty Sched Prod
 PAR.Qty_Sched_Prod_2_USR = PAR.Pieces_Production_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit 'H' ) 'H';

 //?Scheduled Production Quantity
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Qty Sched Prod 2 USR = PAR.Weight Production USR / PAR.Unit Weight *Rounded
 PAR.Qty_Sched_Prod_2_USR = PAR.Weight_Production_USR / PAR.Unit_Weight 'H';

 ENDIF;

 ENDIF;

 ENDDO;

 //?Day 3
 DO;

 CASE;

 // IF PAR.USR Day 3 NE WRK.ZERO
 IF PAR.USR_Day_3 <> WRK.ZERO;

 EXECUTE FUNCTION(Rtv Production        RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1459979;
 PARAMETER(PAR.Company_Number);
 PARAMETER('P');
 PARAMETER(PAR.USR_Day_3);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Production_USR);
 PARAMETER(PAR.Pieces_Production_USR);
 PARAMETER(LCL.PS_Production_Warehouse);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // Weight Production
  PAR.Weight_Production_USR = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
  - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
  - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // PAR.PS Shift/Priority = DB1.PS Shift/Priority
  PAR.PS_Production_Warehouse = DB1.PS_Production_Warehouse;

 }

 EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.USR_Day_3);
 PARAMETER(WRK.Weight_Scheduled_SUM);
 PARAMETER(PAR.Qty_Sched_Ord_3_USR);
 PARAMETER(PAR.Ord_Sch_Sts_USR);
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  CASE;

  // IF PAR.Ord/Sch Sts USR is Scheduled
  IF PAR.Ord_Sch_Sts_USR = 'S';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  // IF PAR.Ord/Sch Sts USR is Ordered
  IF PAR.Ord_Sch_Sts_USR = 'O';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

  ENDIF;

  ENDIF;

 }

 //?Scheduled Production Quantity
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Qty Sched Prod
 PAR.Qty_Sched_Prod_3_USR = PAR.Pieces_Production_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit 'H' ) 'H';

 //?Scheduled Production Quantity
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Qty Sched Prod 3 USR = PAR.Weight Production USR / PAR.Unit Weight *Rounded
 PAR.Qty_Sched_Prod_3_USR = PAR.Weight_Production_USR / PAR.Unit_Weight 'H';

 ENDIF;

 ENDIF;

 ENDDO;

 //?Day 4
 DO;

 CASE;

 // IF PAR.USR Day 4 NE WRK.ZERO
 IF PAR.USR_Day_4 <> WRK.ZERO;

 EXECUTE FUNCTION(Rtv Production        RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1459979;
 PARAMETER(PAR.Company_Number);
 PARAMETER('P');
 PARAMETER(PAR.USR_Day_4);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Production_USR);
 PARAMETER(PAR.Pieces_Production_USR);
 PARAMETER(LCL.PS_Production_Warehouse);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // Weight Production
  PAR.Weight_Production_USR = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
  - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
  - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // PAR.PS Shift/Priority = DB1.PS Shift/Priority
  PAR.PS_Production_Warehouse = DB1.PS_Production_Warehouse;

 }

 EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.USR_Day_4);
 PARAMETER(WRK.Weight_Scheduled_SUM);
 PARAMETER(PAR.Qty_Sched_Ord_4_USR);
 PARAMETER(PAR.Ord_Sch_Sts_USR);
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  CASE;

  // IF PAR.Ord/Sch Sts USR is Scheduled
  IF PAR.Ord_Sch_Sts_USR = 'S';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  // IF PAR.Ord/Sch Sts USR is Ordered
  IF PAR.Ord_Sch_Sts_USR = 'O';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

  ENDIF;

  ENDIF;

 }

 //?scheduled Production Quantity
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Qty Sched Prod
 PAR.Qty_Sched_Prod_4_USR = PAR.Pieces_Production_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit 'H' ) 'H';

 //?scheduled Production Quantity
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Qty Sched Prod 4 USR = PAR.Weight Production USR / PAR.Unit Weight *Rounded
 PAR.Qty_Sched_Prod_4_USR = PAR.Weight_Production_USR / PAR.Unit_Weight 'H';

 ENDIF;

 ENDIF;

 ENDDO;

 //?Day 5
 DO;

 CASE;

 // IF PAR.USR Day 5 NE WRK.ZERO
 IF PAR.USR_Day_5 <> WRK.ZERO;

 EXECUTE FUNCTION(Rtv Production        RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1459979;
 PARAMETER(PAR.Company_Number);
 PARAMETER('P');
 PARAMETER(PAR.USR_Day_5);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Production_USR);
 PARAMETER(PAR.Pieces_Production_USR);
 PARAMETER(LCL.PS_Production_Warehouse);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // Weight Production
  PAR.Weight_Production_USR = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
  - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
  - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // PAR.PS Shift/Priority = DB1.PS Shift/Priority
  PAR.PS_Production_Warehouse = DB1.PS_Production_Warehouse;

 }

 EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.USR_Day_5);
 PARAMETER(WRK.Weight_Scheduled_SUM);
 PARAMETER(PAR.Qty_Sched_Ord_5_USR);
 PARAMETER(PAR.Ord_Sch_Sts_USR);
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  CASE;

  // IF PAR.Ord/Sch Sts USR is Scheduled
  IF PAR.Ord_Sch_Sts_USR = 'S';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  // IF PAR.Ord/Sch Sts USR is Ordered
  IF PAR.Ord_Sch_Sts_USR = 'O';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

  ENDIF;

  ENDIF;

 }

 //?scheduled Production Quantity
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Qty Sched Prod
 PAR.Qty_Sched_Prod_5_USR = PAR.Pieces_Production_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit 'H' ) 'H';

 //?scheduled Production Quantity
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Qty Sched Prod 5 USR = PAR.Weight Production USR / PAR.Unit Weight *Rounded
 PAR.Qty_Sched_Prod_5_USR = PAR.Weight_Production_USR / PAR.Unit_Weight 'H';

 ENDIF;

 ENDIF;

 ENDDO;

 //?Day 6 - is one day prior to day 1
 DO;

 CASE;

 // IF PAR.USR Day 6 EQ JOB.*Job date
 IF PAR.USR_Day_6 = JOB.*Job_date;

 // LCL.Production Type = CND.Schedule
 LCL.Production_Type = 'S';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Production Type = CND.Plan
 LCL.Production_Type = 'P';

 ENDIF;

 EXECUTE FUNCTION(Rtv PA Prod < FDate   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1644799;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.USR_Day_6);
 PARAMETER(PAR.Qty_Sched_Prod_6_USR);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Production Date LT JOB.*Job date
  IF DB1.Production_Date < JOB.*Job_date;

  QUIT;

  ENDIF;

  CASE;

  // IF DB1.Production Date EQ JOB.*Job date
  IF DB1.Production_Date = JOB.*Job_date;

  // AND DB1.Production Type is Plan
  AND DB1.Production_Type = 'P';

  // IF DB1.Production Type is Schedule Saved in the am
  IF DB1.Production_Type = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Calculate Production based on Unit Weight or Pieces
  CASE;

  // IF PAR.Unit Weight is Greater than zero
  IF PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y';

  EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(LCL.USR_Day_1);
  PARAMETER(LCL.Quantity_Production_USR);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Weight_Standard);
  PARAMETER(DB1.PS_Pieces_Standard);
  PARAMETER(DB1.PS_Weight_Converted);
  PARAMETER(DB1.PS_Pieces_Converted);
  PARAMETER(DB1.PS_Weight_Prod_Adj);
  PARAMETER(DB1.PS_Pieces_Prod_Adj);
  PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  {
   //?Execute internal function

   CASE;

   // IF PAR.Production Date EQ JOB.*Job date
   IF PAR.Production_Date = JOB.*Job_date;

   // AND PAR.Production Type is Plan
   AND PAR.Production_Type = 'P';

   // IF PAR.Fresh Chilling Time is GT Zero
   IF PAR.Fresh_Chilling_Time > *ZERO;

   // AND PAR.Avail Ship Date USR EQ JOB.*Job date
   AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

   // IF PAR.Production Date LT JOB.*Job date
   IF PAR.Production_Date < JOB.*Job_date;

   // AND PAR.Production Type is Plan
   AND PAR.Production_Type = 'P';

   // AND PAR.Fresh Chilling Time is GT Zero
   AND PAR.Fresh_Chilling_Time > *ZERO;

   // IF PAR.Production Date LT JOB.*Job date
   IF PAR.Production_Date < JOB.*Job_date;

   // AND PAR.Avail Ship Date USR GT JOB.*Job date
   AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

   // IF PAR.Production Type is Schedule Saved in the am
   IF PAR.Production_Type = 'X';

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Calculate Production
   CASE;

   // IF PAR.Piece Count Item is Not Yes
   IF PAR.Piece_Count_Item = *BLANK/'N';

   // AND PAR.Unit Weight is Greater than zero
   AND PAR.Unit_Weight > *ZERO;

   // Production (No Dec)
   PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
   - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

   //?Calculate Production
   // IF PAR.Piece Count Item is yes
   IF PAR.Piece_Count_Item = 'Y';

   // AND PAR.Pieces Per Bag is GT Zero
   AND PAR.Pieces_Per_Bag > *ZERO;

   // AND PAR.Bags Per Unit is GT Zero
   AND PAR.Bags_Per_Unit > *ZERO;

   //? **If Piece count item use  PIECE fields
   // Production (No Dec)
   PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
   - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

   ENDIF;

   //?If production is negative then make zero
   CASE;

   // IF PAR.Quantity Production USR is LT Zero
   IF PAR.Quantity_Production_USR < *ZERO;

   // PAR.Quantity Production USR = CON.*ZERO
   PAR.Quantity_Production_USR = *ZERO;

   ENDIF;

   // PAR.Production Date USR = PAR.Production Date
   PAR.Production_Date_USR = PAR.Production_Date;

   ENDIF;

  }

  // PAR.Quantity Production USR = PAR.Quantity Production USR + LCL.Quantity Production USR
  PAR.Quantity_Production_USR = PAR.Quantity_Production_USR + LCL.Quantity_Production_USR;

  ENDIF;

  ENDIF;

 }

 //?Rtv Sched qty & Wgt which is what it was doing... FP1054 4/15/09
 EXECUTE FUNCTION(Rtv Sched Ship ALL    RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1515089;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.USR_Day_6);
 PARAMETER(WRK.Weight_Scheduled_SUM);
 PARAMETER(PAR.Qty_Sched_Ord_6_USR);
 PARAMETER('Y');
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  CASE;

  // IF PAR.Status Flag 10 Y/N is Yes
  IF PAR.Status_Flag_10_Y_N = 'Y';

  //?FP1054 if Yes, accum Scheduled qty & wgt as it was before
  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?FP1054 if no, accum Ordered & qty & wgt
  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

  ENDIF;

  ENDIF;

 }

 //?Scheduled Production Quantity
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Qty Sched Prod
 PAR.Qty_Sched_Prod_6_USR = PAR.Pieces_Production_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit 'H' ) 'H';

 //?Scheduled Production Quantity
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Qty Sched Prod 6 USR = PAR.Weight Production USR / PAR.Unit Weight *Rounded
 PAR.Qty_Sched_Prod_6_USR = PAR.Weight_Production_USR / PAR.Unit_Weight 'H';

 ENDIF;

 ENDDO;

}


// Compute: Tot Sched Ord
RCD.Quantity_7_0_USR = ( ( ( ( RCD.Qty_Sched_Ord_1_USR + RCD.Qty_Sched_Ord_2_USR )                 +
+ RCD.Qty_Sched_Ord_3_USR ) + RCD.Qty_Sched_Ord_4_USR ) + RCD.Qty_Sched_Ord_5_USR )               +
+ RCD.Qty_Sched_Ord_6_USR;

// Compute: Tot Sched Prod
RCD.Scheduled_Production = ( ( ( ( RCD.Qty_Sched_Prod_1_USR + RCD.Qty_Sched_Prod_2_USR )           +
+ RCD.Qty_Sched_Prod_3_USR ) + RCD.Qty_Sched_Prod_4_USR ) + RCD.Qty_Sched_Prod_5_USR )            +
+ RCD.Qty_Sched_Prod_6_USR;

// Compute: Variance
RCD.Qty_On_Hand_USR_2 = ( RCD.Qty_On_Hand_USR + RCD.Scheduled_Production )                         +
- RCD.Quantity_7_0_USR;

//?CALC: Subfile control function fields

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(CTL.Company_Name_DRV);
PARAMETER(CTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Process subfile record (Pre-confirm)

//?Dsp:  Item Orders        opt 8
CASE;

// IF RCD.*SFLSEL is *8
IF RCD.*SFLSEL = '8';

// LCL.*Initial call = CND.*YES
LCL.*Initial_call = 'Y';

// Call program Zzz Item Orders       DF.
CALL PROGRAM(Zzz Item Orders       DF) ('PDO7DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(JOB.*Job_date);
PARAMETER(CTL.Company_Name_DRV);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.*Initial_call);
PARAMETER(LCL.Warehouse_Type);

ENDIF;

//?Dsp:  Item Warehouse Inquiry Detail
CASE;

// IF RCD.*SFLSEL is 9
IF RCD.*SFLSEL = '9';

CASE;

// IF CTL.Warehouse Code is Warehouse Code Blank
IF CTL.Warehouse_Code = *BLANK;

// Send error message - 'Warehouse Code is required.'
ERROR(USR2015);
MSGPARM(CTL.Warehouse_Code);

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.*Initial call = CND.*YES
LCL.*Initial_call = 'Y';

CASE;

// IF LCL.Lot Tracking Flag is yes
IF LCL.Lot_Tracking_Flag = 'Y';

// Call program Dsp Item Lot Locs     DF.
CALL PROGRAM(Dsp Item Lot Locs     DF) ('PDH2DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(*ZERO);
PARAMETER(LCL.*Initial_call);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Base Values PA    RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1416510;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(LCL.Item_Description);
PARAMETER(WRK.Description_Line_Two);
PARAMETER(LCL.UOM_Primary);
PARAMETER(LCL.Conversion_Factor_1);
PARAMETER(LCL.Operation_Factor_1);
PARAMETER(LCL.UOM_Second);
PARAMETER(LCL.Conversion_Factor_2);
PARAMETER(LCL.Operation_Factor_2);
PARAMETER(LCL.UOM_Third);
PARAMETER(LCL.UOM_Pricing);
PARAMETER(LCL.Unit_Weight);
PARAMETER(LCL.Production_Date_Control);
PARAMETER(LCL.Catch_Weight_Status);
PARAMETER(LCL.Fresh_Chilling_Time);
PARAMETER(LCL.Base_Conv_Loss_Item);
PARAMETER(LCL.Piece_Count_Item);
PARAMETER(LCL.Pieces_Per_Bag);
PARAMETER(LCL.Bags_Per_Unit);
PARAMETER(LCL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Dsp Item/Whse Inqy Dtl DF.
CALL PROGRAM(Dsp Item/Whse Inqy Dtl DF) ('ICQ9DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(LCL.Item_Description);
PARAMETER(LCL.UOM_Primary);
PARAMETER(LCL.Conversion_Factor_1);
PARAMETER(LCL.Operation_Factor_1);
PARAMETER(LCL.UOM_Second);
PARAMETER(LCL.Conversion_Factor_2);
PARAMETER(LCL.Operation_Factor_2);
PARAMETER(LCL.UOM_Third);
PARAMETER(LCL.Unit_Weight);
PARAMETER(LCL.Production_Date_Control);
PARAMETER(LCL.Catch_Weight_Status);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.Warehouse_Description);
PARAMETER(LCL.Company_Name);
PARAMETER(LCL.*Initial_call);

ENDIF;

ENDIF;

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

