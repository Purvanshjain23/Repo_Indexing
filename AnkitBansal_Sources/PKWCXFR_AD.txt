// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKWCXFR
// ?Date: 14.08.2025 Time: 02:53:08
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modifications and Comments
DO;

//?11/02/2020 ISE H16853 - CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
//?WHD 69081 09/17/2020 RMC if sort loss > 0, make it .00 ..cant have -0 loss
//?  on LS118B (came about from new prestige contract)
//?T15265 RMC 07/29/19 Get last reported date from MPR control -- will auto-
//?  adjust if job is reran - per plant. file is updated after all kill
//?  dates are processed after the Loop
//?S15008 RMC 05/20/19 Estimated - Report as EST for type 1,5 if rpt date
//?  matches BOH rpt date.  if not type 1,5 do as normal
//?S13526 RMC 10/16/18 LS118C-if prod doesnt have site, use state from TH
//?S13526 RMC 9.07.18 LS118C-if prod has a site, use state from site
//?        for origin -- on a company value    MPRORGST
//?R12679 RMC 3.02.18 LS118C-dont report packer owned (9) until they can be
//?  priced..which is the day after kill most likely. they were getting
//?  reported the morning after entry into the system  (per Guy, David C)
//?R11747 RMC 9.25.17 Dont report Avg Live Weight for STF - Per Guy/DavidCary
//?S11374 RMC 07/31/17 - do the below if it hasnt been reported yet
//?R7841 RMC 11/10/16 - When BOH writes to ls118C, then update it with curr
//?  reporting date and time '1' so it will report on the LS119A,B
//?  Move upd Estimated head PKE4CPP into the Repeat While Kill date loop
//?   to report each BO for the kill dates to be processed.
//?  Needs to be include/rpt for BO that will be priced between 1:30-1:30.
//?R7307 RMC 09/23/16 - New purchase types- affect ls118C Ownerhip determtn
//?E3814 JJH 10/07/15 - Recompile because PS Premises ID added to
//?  Producer Site. - No logic changes.
//?E3577 11/6/14 RMC  For BO created from Hedged BO, force type to 2
//?  in Slaughter; for Hedged BOH (with no BOL) force Purch type to 2
//?  in prior day purch LS118C
//?4/16/01  Process kill dates until the Reporting date is reached,
//?         not the Curr Paym Date.
//?4/19/01  Create Estimated Purchases for LS119A Dly Purch Summary
//?8/16/02  Create new file with Prior day Sched Dtl  - PKFHCPP
//?12/09/02  Bld Prior Day Sched with BOL access path keyed on Delv Date
//?          instead of Kill date.        (LS118A)
//?  On Build Estimated Fields for LS119A, create Detail rcd with rpt time=1
//?02/26/04 RMC Prior Day Purch: MPR Head = SUM(TH Hd Rcvd for QM hogs)
//?             instead of the BOL Head Received.     (LS118C)
//?01/04/06  Bld Prior Day Purch 118C - check base price >0, not just n=0
//?01/04/06  Use co from input parm.
//?04/24/06 RMC Prior Day Purch: If Prod Purch Type=Packer Owned 9
//?         or Internal, output ls118c (pke7cpp) with -0- base price.
//?04/24/07 RMC Prior Day Purch: Dont chg Purch Type to 1=Negotiated-> EVER!
//?06/16/08 RMC Prior Day Purch: Output State in MPR Origin field    PKE7CPP
//?12/19/08 RMC E00315 for 960  Estimated Purch: dont report purch type 1,5
ENDDO;

// Call program Rtv System Date       UP.
CALL PROGRAM(Rtv System Date       UP) ('PKPSUPR');
PARAMETER(PAR.MPR_Reporting_Date);

// PAR.MPR Reporting Time = CND.Not Applicable
PAR.MPR_Reporting_Time = 3;

//?* Retrieve the default Company Number for the User *
//? RMC 1/4/6 not now.. use input parm Company
//?* Validate if Kill Day Sts is Yes for the Current Date *
//?03/26/09 PKD/RMC Do not need to check the Kill Day Sts.  Handled
//?                 by the scheduled job on the PC.
//?   - If Invalid Y/N USR = Y, then Kill Day Sts = N.
//?   - If Invalid Y/N USR = N, then Kill Day Sts = Y.
//?03/26/09 PKD/RMC Invalid = No all the time.
// LCL.Invalid Y/N USR = CND.No
LCL.Invalid_Y_N_USR = 'N';

//?Continue processing if Invalid Y/N is No.
CASE;

// IF LCL.Invalid Y/N USR is No
IF LCL.Invalid_Y_N_USR = 'N';

//?* Set Reporting Day Status to Yes                              *
// PAR.MPR Day Sts USR = CND.Yes
PAR.MPR_Day_Sts_USR = 'Y';

//?* Retrieve the Last Kill Date Reported from the Company Values *
//?* Retrieve the Last Kill Date Reported from the MPR Control -
//?   will auto-set if a rerun (ie. job date = LAST job date)
// Call program Exc MPR Ctl-Chk Rerun XF.
CALL PROGRAM(Exc MPR Ctl-Chk Rerun XF) ('PWJKXFR');
PARAMETER(PAR.Company_Number_USR);
PARAMETER(WRK.MPR_Last_Kill_Dt_Reported);

// PAR.Last Kill Date Rptd USR = WRK.MPR Last Kill Dt Reported
PAR.Last_Kill_Date_Rptd_USR = WRK.MPR_Last_Kill_Dt_Reported;

//?* Retrieve the Current Payment Date *
EXECUTE FUNCTION(RTV Payment Prc        RT) TYPE(RTVOBJ) FILE(PKC4REP)          AB1146809;
PARAMETER(PAR.Company_Number_USR);
PARAMETER(PAR.Pmt_Current_Payment_Date);
PARAMETER(LCL.Pmt_Current_Payment_Step);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?* Retrieve Plant Establishment Number from the Company Values *
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.Company_Number_USR);
PARAMETER('PLTESTNO');
PARAMETER(LCL.System_Value_Alpha_USR);

// PAR.MPR Identification Num = LCL.System Value Alpha    USR
PAR.MPR_Identification_Num = LCL.System_Value_Alpha_USR;

//?R7841 RMC 11.17 Delete estimated head records -- if a rerun they'll exist
EXECUTE FUNCTION(Rtv Del Estmtd Purch  RT) TYPE(RTVOBJ) FILE(PKE4CPP)           AB1329165;
PARAMETER(PAR.Company_Number_USR);
PARAMETER(PAR.MPR_Reporting_Date);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Del MPR Estmtd Purch  DL) TYPE(DLTOBJ) FILE(PKE4CPP)           AB1235482;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.MPR_Reporting_Date);
 PARAMETER(DB1.MPR_Purchase_Type_Code);
}


//?* Build Prior Day files for paid Kill Dates *
//?Process each day, starting with the day after the Last Kill Date
//?Reported, until the Reporting Date is reached.
// PAR.Kill Date Usr = PAR.Last Kill Date Rptd USR + CON.1 *DAYS
PAR.Kill_Date_Usr = DATEINCR(PAR.Last_Kill_Date_Rptd_USR 1 'DY' 1111111 'NONE' 'N' 1);

//?Process Kill Date while Kill Date < Reporting Date
// DOW PAR.Kill Date Usr LT PAR.MPR Reporting Date
DOW PAR.Kill_Date_Usr < PAR.MPR_Reporting_Date;

//?* Validate if Kill Day Sts for the Date in the Calendar is Yes *
// Call program VAL Kill Day    2 OMS XF.
CALL PROGRAM(VAL Kill Day    2 OMS XF) ('PDWBXFR');
PARAMETER(PAR.Company_Number_USR);
PARAMETER(PAR.Kill_Date_Usr);
PARAMETER(LCL.Invalid_Y_N_USR);

//?   - If Invalid Y/N USR = Y, then Kill Day Sts = N.
//?   - If Invalid Y/N USR = N, then Kill Day Sts = Y.
//?If Kill Day Sts = Y, then build the Prior Day Report files
CASE;

// IF LCL.Invalid Y/N USR is No
IF LCL.Invalid_Y_N_USR = 'N';

//?***** Build File B: MPR Prior Day Slaughtered *****
//?DOC:  Slaughter Swine  LS118B
DO;

//?Process the Tattoo Header for each Kill Date between the
//?Last Kill Date Reported and the Current Payment Date.
//?1)  Both Internal and External Producers are processed.
//?2)  Do not process Resale Tattoo's.
//?3)  Only process Hold Over Tattoo's when they are completed.
//?    When processing the Tattoo with Held Over Status = Y,
//?    combine both Kill Date for creating one record.
//?4)  On Monday, create the data for both Friday and Saturday, if
//?    killed on Saturday.
//?3/29/01 Prior Day Slg -- If Live Wgt is 0, then output NULL
//?        If Purch Type is 9, output NULL slg base price, slg avg net price,
//?         slg low net price, slg high net price, slg avg sort loss
//?  (these correlate to item nbrs 15,16,17,18,21)
//?Lot Identification:   Tattoo Number. As of 02/26/04 = TattooLoad
//?Class Code        :   The Class Code will = 1 (Barrows/Gilts)
//?Purchase Type Code:   The Purchase Type Code is identified for
//?                      the producer in the Producer file.
//?Head Count        :   TH Head Killed
//?Base Price        :   TH CM Bse Mkt Carc /CWT.  If the Source
//?                      is Internal, this value will be 0.
//?Average Net Price :   TH Payment Gross plus Additional Expense
//?                      incured by Seaboard.  Divide the total by
//?                      Hot Weight divided by 100.
//?Lowest Net Price  :   This value will be 0.
//?Highest Net Price :   This value will be 0.
//?Avg Live Weight   :   TH Avg Live Wgt.  If the Payment Type
//?                      is Carcass Merit, this value will be 0.
//?Avg Carcass Weight:   TH Avg Hot Wgt.  If the Payment Type
//?                      is Live, this value will be 0.
//?Average Sort Loss :   This value will be 0.
//?Avg Backfat-Inches:   TH Avg Backfat
//?Avg LoinEye-Inches:   TH Avg Loin Eye Depth
//?Avg Lean Percent  :   TH Avg Lean Percent
//?5/27/03  Avg Sort Loss calc depends on the CMP Grading Type
//?9/17/2020 sort loss cant be > 00 .. so make it .00 if >0
ENDDO;

EXECUTE FUNCTION(MPR Bld Prior Day Slg RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1235740;
PARAMETER(PAR.Company_Number_USR);
PARAMETER(PAR.Kill_Date_Usr);
PARAMETER(PAR.MPR_Identification_Num);
PARAMETER(PAR.MPR_Reporting_Date);
PARAMETER(PAR.MPR_Reporting_Time);
{
 //?USER: Initialize routine

 // LCL.PD Producer Code = CON.*BLANK
 LCL.PD_Producer_Code = *BLANK;

 //?R11747 9.25.17 RMC Dont report Avg Live Weight for STF
 //?9/24/02 RMC Output 2 dec avg backfat and loin eye
 //?5/28/03 RMC Output for Sort Loss Calc
 //?2/25/04 RMC Only report price data for Non-Packer Producers (was Internal)
 //?2/26/04 RMC Lot = TattooLoad because SBD research hogs may have the
 //?same Tattoo on multiple loads.  This makes the pke6cpp rcd unique
 //?11/04/16 RMC R7805 use BOH Purch type
 //?01/04/17 RMC R8309 rpt avg live wt on all
 //?9/17/2020 RMC sort loss cant be > 00 .. so make it .00 if >0
 //?USER: Process Data record

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?OMT: Resales
 CASE;

 // IF DB1.TH Hog Class Type is Resale
 IF DB1.TH_Hog_Class_Type = 'R';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?OMT: Held Over Head > 0
 CASE;

 // IF DB1.TH Held Over is greater than 0
 IF DB1.TH_Held_Over > *ZERO;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?OMT: Held Over Record = Y & Held Over Completed = 0
 CASE;

 // IF DB1.TH Held Over Record is Yes
 IF DB1.TH_Held_Over_Record = 'Y';

 // AND DB1.TH Held/Ovr Completed Dte is EQ Zero
 AND DB1.TH_Held_Ovr_Completed_Dte = *ZERO;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?OMT: Balanced
 CASE;

 // IF DB1.TH Kill Balancing Sts is Not Balanced Carcass
 IF DB1.TH_Kill_Balancing_Sts = 'E'/*BLANK;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?Process Selected Tattoo
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 //?Changed 02/26/04 because Research hogs for SBD have the same tattoo #
 //?on multiple loads.  This makes the pke6cpp rcd unique
 // WRK.Tattoo Nbr Alpha Usr = CVTVAR(DB1.TH Tattoo Number)
 WRK.Tattoo_Nbr_Alpha_Usr = CVTVAR(DB1.TH_Tattoo_Number);

 // WRK.Buy Order Load Alpha = CVTVAR(DB1.BOL Load Number)
 WRK.Buy_Order_Load_Alpha = CVTVAR(DB1.BOL_Load_Number);

 // PAR.MPR Lot Identification = CONCAT(WRK.Tattoo Nbr Alpha Usr,WRK.Buy Order Load Alpha,CON.*ZERO)
 PAR.MPR_Lot_Identification = WRK.Tattoo_Nbr_Alpha_Usr + WRK.Buy_Order_Load_Alpha (*ZERO);

 // PAR.MPR Slg Class Code = CND.Barrows/Gilts
 PAR.MPR_Slg_Class_Code = 1;

 EXECUTE FUNCTION(Rtv CMP grading type  RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1254102;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(LCL.BOH_Hedge_Reference_BO);
 PARAMETER(LCL.CMP_Grading_Type);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv CMP Grading type  RT) TYPE(RTVOBJ) FILE(PKARREP)           AB1254103;
  PARAMETER(DB1.CMP_Program_Code);
  PARAMETER(PAR.CMP_Grading_Type);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.BOH Hedge Reference BO = DB1.BOH Hedge Reference BO
  PAR.BOH_Hedge_Reference_BO = DB1.BOH_Hedge_Reference_BO;

 }

 //?R7805 11/04/16 RMC R7805 Use new BOH Purch Type
 EXECUTE FUNCTION(Rtv BOH Prod PurchTyp RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1328976;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(LCL.BOH_MPR_Purchase_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?BOH or PRDCR PURCH TYPE
 CASE;

 // IF LCL.BOH MPR Purchase Type is *ALL values
 IF LCL.BOH_MPR_Purchase_Type = '01'/'02'/'03'/'04'/'05'/'06'/'07'/'08'/'09'/'10'/'11';

 // PAR.MPR Slg Purchase Type = CVTVAR(LCL.BOH MPR Purchase Type)
 PAR.MPR_Slg_Purchase_Type = CVTVAR(LCL.BOH_MPR_Purchase_Type);

 //?BOH or PRDCR PURCH TYPE
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV MPR Prdcr Purch TpRT) TYPE(RTVOBJ) FILE(PKE3CPP)           AB1235599;
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(PAR.MPR_Slg_Purchase_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 ENDIF;

 // PAR.MPR Slg Head = DB1.TH Head Killed
 PAR.MPR_Slg_Head = DB1.TH_Head_Killed;

 // PAR.MPR Slg Base Price = DB1.TH CM Bse Mkt Carc /CWT
 PAR.MPR_Slg_Base_Price = DB1.TH_CM_Bse_Mkt_Carc_CWT;

 // PAR.MPR Slg Low Net Price = CON.*ZERO
 PAR.MPR_Slg_Low_Net_Price = *ZERO;

 // PAR.MPR Slg High Net Price = CON.*ZERO
 PAR.MPR_Slg_High_Net_Price = *ZERO;

 // PAR.MPR Slg Avg Live Wgt = DB1.TH Avg Live Wgt
 PAR.MPR_Slg_Avg_Live_Wgt = DB1.TH_Avg_Live_Wgt;

 // PAR.MPR Slg Avg Carc Wgt = DB1.TH Avg Hot Wgt
 PAR.MPR_Slg_Avg_Carc_Wgt = DB1.TH_Avg_Hot_Wgt;

 //?*** New sort loss calc            5/27/03
 //?Sort loss per grading type
 CASE;

 // IF LCL.CMP Grading Type is Sort Discount Factor
 IF LCL.CMP_Grading_Type = 'S';

 // PAR.MPR Slg Avg Sort Loss = DB1.TH CM Lean Prem Carc /CWT
 PAR.MPR_Slg_Avg_Sort_Loss = DB1.TH_CM_Lean_Prem_Carc_CWT;

 //?Sort loss per grading type
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.TH Hot Wgt is Not Zero
 IF DB1.TH_Hot_Wgt > *ZERO;

 // Comp:MPR Sort Loss
 PAR.MPR_Slg_Avg_Sort_Loss = DB1.TH_MPR_Sort_Loss / ( DB1.TH_Hot_Wgt / 100 'H' ) 'H';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.MPR Slg Avg Sort Loss = CON.*ZERO
 PAR.MPR_Slg_Avg_Sort_Loss = *ZERO;

 ENDIF;

 ENDIF;

 //?9/17/2020 cant be reported as  >0 so make it .00
 CASE;

 // IF PAR.MPR Slg Avg Sort Loss is Entered GT 0
 IF PAR.MPR_Slg_Avg_Sort_Loss > 0;

 // PAR.MPR Slg Avg Sort Loss = CND.EQ zero
 PAR.MPR_Slg_Avg_Sort_Loss = *ZERO;

 ENDIF;

 //?***
 CASE;

 // IF DB1.TH Avg Backfat - 2 Dec is Entered
 IF DB1.TH_Avg_Backfat_2_Dec > 0;

 // PAR.MPR Slg Avg Backfat = DB1.TH Avg Backfat - 2 Dec
 PAR.MPR_Slg_Avg_Backfat = DB1.TH_Avg_Backfat_2_Dec;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.MPR Slg Avg Backfat = DB1.TH Avg Backfat
 PAR.MPR_Slg_Avg_Backfat = DB1.TH_Avg_Backfat;

 ENDIF;

 CASE;

 // IF DB1.TH Avg Loin Eye - 2 dec is Entered
 IF DB1.TH_Avg_Loin_Eye_2_dec > 0;

 // PAR.MPR Slg Avg Loin Depth = DB1.TH Avg Loin Eye - 2 dec
 PAR.MPR_Slg_Avg_Loin_Depth = DB1.TH_Avg_Loin_Eye_2_dec;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.MPR Slg Avg Loin Depth = DB1.TH Avg Loin Eye Depth
 PAR.MPR_Slg_Avg_Loin_Depth = DB1.TH_Avg_Loin_Eye_Depth;

 ENDIF;

 // PAR.MPR Slg Avg Lean % = DB1.TH Avg Lean Percent
 PAR.MPR_Slg_Avg_Lean = DB1.TH_Avg_Lean_Percent;

 // LCL.TH Payment Gross = DB1.TH Payment Gross
 LCL.TH_Payment_Gross = DB1.TH_Payment_Gross;

 // LCL.TH Hot Wgt = DB1.TH Hot Wgt
 LCL.TH_Hot_Wgt = DB1.TH_Hot_Wgt;

 //?If Held Over Record = Y, sum info for all days
 CASE;

 // IF DB1.TH Held Over Record is Yes
 IF DB1.TH_Held_Over_Record = 'Y';

 EXECUTE FUNCTION(Prt Crc Sum (Hld Ovr) IF) TYPE(EXCINTFUN)                      AB1147033;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(LCL.TH_Kill_Date);
 PARAMETER(LCL.TH_Dead_On_Arrival);
 PARAMETER(LCL.TH_Head_Received);
 PARAMETER(LCL.TH_Yard_Deads);
 PARAMETER(LCL.TH_Head_Condemned);
 PARAMETER(PAR.MPR_Slg_Head);
 PARAMETER(LCL.TH_Head_Adds);
 PARAMETER(LCL.TH_Live_Wgt);
 PARAMETER(LCL.TH_Adj_Live_Wgt);
 PARAMETER(LCL.TH_Hot_Wgt);
 PARAMETER(PAR.MPR_Slg_Avg_Live_Wgt);
 PARAMETER(PAR.MPR_Slg_Avg_Carc_Wgt);
 PARAMETER(PAR.MPR_Slg_Avg_Lean);
 PARAMETER(LCL.TH_Avg_Loin_Eye_Depth);
 PARAMETER(LCL.TH_Avg_Backfat);
 PARAMETER(LCL.TH_Actual_Yield);
 PARAMETER(LCL.TH_Adj_Actual_Yield);
 PARAMETER(LCL.TH_CM_Base_Mkt_Price);
 PARAMETER(LCL.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(LCL.TH_CM_Sort_Discount_Amt);
 PARAMETER(LCL.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(LCL.TH_CM_Base_Carcass_Value);
 PARAMETER(LCL.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(LCL.TH_CM_Carcass_Gross_Amt);
 PARAMETER(LCL.TH_Deduction_Amt);
 PARAMETER(LCL.TH_Carcass_Net_Amt);
 PARAMETER(LCL.TH_Additions_Amt);
 PARAMETER(LCL.TH_Payment_Gross);
 PARAMETER(LCL.Th_Payment_Net_Amt);
 PARAMETER(LCL.TH_Fixed_Cost_Amount);
 PARAMETER(LCL.TH_Shipped_Weight);
 PARAMETER(LCL.TH_FFLI);
 PARAMETER(LCL.TH_Head_Excluded);
 PARAMETER(LCL.TH_CM_Bse_Mkt_Live_CWT);
 PARAMETER(PAR.MPR_Slg_Base_Price);
 PARAMETER(LCL.TH_CM_Srt_Dsc_Live_CWT);
 PARAMETER(LCL.TH_CM_Srt_Dsc_Carc_CWT);
 PARAMETER(LCL.TH_CM_Yld_G_L_Live_CWT);
 PARAMETER(LCL.TH_CM_Yld_G_L_Carc_CWT);
 PARAMETER(LCL.TH_CM_Crc_Val_Live_CWT);
 PARAMETER(LCL.TH_CM_Crc_Val_Carc_CWT);
 PARAMETER(LCL.TH_CM_Lean_Prem_Live_CWT);
 PARAMETER(LCL.TH_CM_Lean_Prem_Carc_CWT);
 PARAMETER(LCL.TH_CM_Gross_Live_CWT);
 PARAMETER(LCL.TH_CM_Gross_Carc_CWT);
 PARAMETER(LCL.TH_Head_Adjusted_LN);
 PARAMETER(LCL.TH_PHA_Head_Adds);
 PARAMETER(LCL.TH_Excluded_Gross_Value);
 PARAMETER(LCL.TH_Excluded_Carc_Val);
 PARAMETER(LCL.TH_Excluded_Premium);
 PARAMETER(LCL.TH_Meat_Value_Factor_Amt);
 PARAMETER(LCL.TH_Avg_Loin_Eye_2_dec);
 PARAMETER(LCL.TH_Avg_Backfat_2_Dec);
 PARAMETER(LCL.TH_Head_LFT);
 PARAMETER(LCL.TH_Head_EUT_KOA);
 PARAMETER('N');
 PARAMETER('Y');
 PARAMETER(WRK.CMP_Grading_Type);
 {
  //?Execute internal function

  //?Modification History Created Str slm 061208
  DO;

  //?9/24/02 RMC Calc 2 dec backfat and loin eye
  //?050108 slm e00216 need additional fields on ho for meat
  //?061208 SLM E00144 LFT Head and Uat/Koa Head
  ENDDO;

  MOVE *ALL (To: PAR From: CON);

  EXECUTE FUNCTION(Prt Crc Sum (Hld Ovr) RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1147407;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.TH_Dead_On_Arrival);
  PARAMETER(PAR.TH_Head_Received);
  PARAMETER(PAR.TH_Yard_Deads);
  PARAMETER(PAR.TH_Head_Condemned);
  PARAMETER(PAR.TH_Head_Killed);
  PARAMETER(PAR.TH_Head_Adds);
  PARAMETER(PAR.TH_Live_Wgt);
  PARAMETER(PAR.TH_Adj_Live_Wgt);
  PARAMETER(PAR.TH_Hot_Wgt);
  PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
  PARAMETER(PAR.TH_CM_Sort_Discount_Amt);
  PARAMETER(PAR.TH_CM_Yield_Gain_Loss_Amt);
  PARAMETER(PAR.TH_CM_Base_Carcass_Value);
  PARAMETER(PAR.TH_CM_LN_AddOn_Deduct_Amt);
  PARAMETER(PAR.TH_CM_Carcass_Gross_Amt);
  PARAMETER(PAR.TH_Deduction_Amt);
  PARAMETER(PAR.TH_Carcass_Net_Amt);
  PARAMETER(PAR.TH_Additions_Amt);
  PARAMETER(PAR.TH_Payment_Gross);
  PARAMETER(PAR.Th_Payment_Net_Amt);
  PARAMETER(PAR.TH_Fixed_Cost_Amount);
  PARAMETER(PAR.TH_Head_Excluded);
  PARAMETER(PAR.TH_Head_Adjusted_LN);
  PARAMETER(PAR.TH_PHA_Head_Adds);
  PARAMETER(PAR.TH_Excluded_Gross_Value);
  PARAMETER(PAR.TH_Excluded_Carc_Val);
  PARAMETER(PAR.TH_Excluded_Premium);
  PARAMETER(PAR.TH_Meat_Value_Factor_Amt);
  PARAMETER(PAR.TH_Head_LFT);
  PARAMETER(PAR.TH_Head_EUT_KOA);
  PARAMETER(PAR.Lean_Wgt_USR);
  PARAMETER(PAR.Backfat_Wgt_USR);
  PARAMETER(PAR.Loin_Eye_Wgt_USR);
  PARAMETER(PAR.Print_Carcass_Analysis_Us);
  PARAMETER(PAR.Backfat_Wgt_USR_2);
  PARAMETER(PAR.Loin_Eye_Wgt_USR_2);
  PARAMETER(PAR.Status_3);
  PARAMETER(PAR.CMP_Grading_Type);
  {
   //?USER: Initialize routine

   // WRK.First Time Flag Usr = CND.Yes
   WRK.First_Time_Flag_Usr = 'Y';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   //?061208 slm E00144 LFT and eut/koa
   //?050108 slm get TH Fixed Cost Amount
   //?               TH Meat Value Factor Amt
   //?First Kill Date
   CASE;

   // IF WRK.First Time Flag Usr is Yes
   IF WRK.First_Time_Flag_Usr = 'Y';

   // WRK.First Time Flag Usr = CND.No
   WRK.First_Time_Flag_Usr = 'N';

   ENDIF;

   // PAR.TH Kill Date = DB1.TH Kill Date
   PAR.TH_Kill_Date = DB1.TH_Kill_Date;

   // PAR.TH Dead On Arrival = PAR.TH Dead On Arrival + DB1.TH Dead On Arrival
   PAR.TH_Dead_On_Arrival = PAR.TH_Dead_On_Arrival + DB1.TH_Dead_On_Arrival;

   // PAR.TH Head LFT = PAR.TH Head LFT + DB1.TH Head LFT
   PAR.TH_Head_LFT = PAR.TH_Head_LFT + DB1.TH_Head_LFT;

   // PAR.TH Head EUT/KOA = PAR.TH Head EUT/KOA + DB1.TH Head EUT/KOA
   PAR.TH_Head_EUT_KOA = PAR.TH_Head_EUT_KOA + DB1.TH_Head_EUT_KOA;

   // PAR.TH Head Received = PAR.TH Head Received + DB1.TH Head Received
   PAR.TH_Head_Received = PAR.TH_Head_Received + DB1.TH_Head_Received;

   // PAR.TH Yard Deads = PAR.TH Yard Deads + DB1.TH Yard Deads
   PAR.TH_Yard_Deads = PAR.TH_Yard_Deads + DB1.TH_Yard_Deads;

   // PAR.TH Head Condemned = PAR.TH Head Condemned + DB1.TH Head Condemned
   PAR.TH_Head_Condemned = PAR.TH_Head_Condemned + DB1.TH_Head_Condemned;

   // PAR.TH Head Killed = PAR.TH Head Killed + DB1.TH Head Killed
   PAR.TH_Head_Killed = PAR.TH_Head_Killed + DB1.TH_Head_Killed;

   // PAR.TH Head Adds = PAR.TH Head Adds + DB1.TH Head Adds
   PAR.TH_Head_Adds = PAR.TH_Head_Adds + DB1.TH_Head_Adds;

   // PAR.TH Live Wgt = PAR.TH Live Wgt + DB1.TH Live Wgt
   PAR.TH_Live_Wgt = PAR.TH_Live_Wgt + DB1.TH_Live_Wgt;

   // PAR.TH Adj Live Wgt = PAR.TH Adj Live Wgt + DB1.TH Adj Live Wgt
   PAR.TH_Adj_Live_Wgt = PAR.TH_Adj_Live_Wgt + DB1.TH_Adj_Live_Wgt;

   // PAR.TH Hot Wgt = PAR.TH Hot Wgt + DB1.TH Hot Wgt
   PAR.TH_Hot_Wgt = PAR.TH_Hot_Wgt + DB1.TH_Hot_Wgt;

   // PAR.TH CM Base Mkt Price Amt = PAR.TH CM Base Mkt Price Amt + DB1.TH CM Base Mkt
   PAR.TH_CM_Base_Mkt_Price_Amt = PAR.TH_CM_Base_Mkt_Price_Amt
   + DB1.TH_CM_Base_Mkt_Price_Amt;

   //?5/29/03 new for sort loss print
   CASE;

   // IF PAR.Status 3 is Yes
   IF PAR.Status_3 = 'Y';

   // PAR.TH CM Sort Discount Amt = PAR.TH CM Sort Discount Amt + DB1.TH MPR Sort Loss
   PAR.TH_CM_Sort_Discount_Amt = PAR.TH_CM_Sort_Discount_Amt + DB1.TH_MPR_Sort_Loss;

   //?5/29/03 new for sort loss print
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.TH CM Sort Discount Amt = PAR.TH CM Sort Discount Amt + DB1.TH CM Sort Discount Amt
   PAR.TH_CM_Sort_Discount_Amt = PAR.TH_CM_Sort_Discount_Amt + DB1.TH_CM_Sort_Discount_Amt;

   ENDIF;

   // PAR.TH CM Yield Gain/Loss Amt = PAR.TH CM Yield Gain/Loss Amt + DB1.TH CM Yield
   PAR.TH_CM_Yield_Gain_Loss_Amt = PAR.TH_CM_Yield_Gain_Loss_Amt
   + DB1.TH_CM_Yield_Gain_Loss_Amt;

   CASE;

   // IF PAR.CMP Grading Type is Meat Value
   IF PAR.CMP_Grading_Type = 'M';

   // PAR.TH CM Base Carcass Value = PAR.TH CM Base Carcass Value + DB1.TH Fixed Cost Amount
   PAR.TH_CM_Base_Carcass_Value = PAR.TH_CM_Base_Carcass_Value + DB1.TH_Fixed_Cost_Amount;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.TH CM Base Carcass Value = PAR.TH CM Base Carcass Value + DB1.TH CM Base Car
   PAR.TH_CM_Base_Carcass_Value = PAR.TH_CM_Base_Carcass_Value
   + DB1.TH_CM_Base_Carcass_Value;

   ENDIF;

   // PAR.TH CM LN AddOn/Deduct Amt = PAR.TH CM LN AddOn/Deduct Amt + DB1.TH CM LN Add
   PAR.TH_CM_LN_AddOn_Deduct_Amt = PAR.TH_CM_LN_AddOn_Deduct_Amt
   + DB1.TH_CM_LN_AddOn_Deduct_Amt;

   // PAR.TH CM Carcass Gross Amt = PAR.TH CM Carcass Gross Amt + DB1.TH CM Carcass Gross Amt
   PAR.TH_CM_Carcass_Gross_Amt = PAR.TH_CM_Carcass_Gross_Amt + DB1.TH_CM_Carcass_Gross_Amt;

   // PAR.TH Carcass Net Amt = PAR.TH Carcass Net Amt + DB1.TH Carcass Net Amt
   PAR.TH_Carcass_Net_Amt = PAR.TH_Carcass_Net_Amt + DB1.TH_Carcass_Net_Amt;

   // PAR.TH Payment Gross = PAR.TH Payment Gross + DB1.TH Payment Gross
   PAR.TH_Payment_Gross = PAR.TH_Payment_Gross + DB1.TH_Payment_Gross;

   // PAR.Th Payment Net Amt = PAR.Th Payment Net Amt + DB1.Th Payment Net Amt
   PAR.Th_Payment_Net_Amt = PAR.Th_Payment_Net_Amt + DB1.Th_Payment_Net_Amt;

   // Wgt USR =       * Lean % * Wgt USR
   PAR.Lean_Wgt_USR = PAR.Lean_Wgt_USR + ( DB1.TH_Avg_Lean_Percent * DB1.TH_Hot_Wgt 'H' );

   // Wgt USR =       * Backfat * Wgt USR
   PAR.Backfat_Wgt_USR = PAR.Backfat_Wgt_USR + ( DB1.TH_Avg_Backfat * DB1.TH_Hot_Wgt 'H' );

   // Wgt USR =       * Loin-Eye * Wgt USR
   PAR.Loin_Eye_Wgt_USR = PAR.Loin_Eye_Wgt_USR + ( DB1.TH_Avg_Loin_Eye_Depth
   * DB1.TH_Hot_Wgt 'H' );

   // Wgt USR 2 =       * Backfat2 * Wgt USR
   PAR.Backfat_Wgt_USR_2 = PAR.Backfat_Wgt_USR_2 + ( DB1.TH_Avg_Backfat_2_Dec
   * DB1.TH_Hot_Wgt 'H' );

   // Wgt USR 2 =       * Loin-Eye2 * Wgt USR
   PAR.Loin_Eye_Wgt_USR_2 = PAR.Loin_Eye_Wgt_USR_2 + ( DB1.TH_Avg_Loin_Eye_2_dec
   * DB1.TH_Hot_Wgt 'H' );

   // PAR.TH Deduction Amt = PAR.TH Deduction Amt + DB1.TH Deduction Amt
   PAR.TH_Deduction_Amt = PAR.TH_Deduction_Amt + DB1.TH_Deduction_Amt;

   // PAR.TH Additions Amt = PAR.TH Additions Amt + DB1.TH Additions Amt
   PAR.TH_Additions_Amt = PAR.TH_Additions_Amt + DB1.TH_Additions_Amt;

   //?Analysis to Payments
   CASE;

   // IF PAR.Print Carcass Analysis Us is Yes
   IF PAR.Print_Carcass_Analysis_Us = 'Y';

   EXECUTE FUNCTION(Prt Crc Sum (Hld Ovr) RT) TYPE(RTVOBJ) FILE(PKDNCPP)           AB1177503;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(WRK.TH_CA_Base_Mkt_Price_Amt);
   PARAMETER(WRK.TH_CA_Sort_Discount_Amt);
   PARAMETER(WRK.TH_CA_Yield_Gain_Loss_Amt);
   PARAMETER(WRK.TH_CA_Base_Carcass_Value);
   PARAMETER(WRK.TH_CA_Lean_Premium_Amt);
   PARAMETER(WRK.TH_CA_Carcass_Gross_Amt);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // PAR.TH CA Base Mkt Price Amt = PAR.TH CA Base Mkt Price Amt + WRK.TH CA Base Mkt
   PAR.TH_CA_Base_Mkt_Price_Amt = PAR.TH_CA_Base_Mkt_Price_Amt
   + WRK.TH_CA_Base_Mkt_Price_Amt;

   // PAR.TH CA Sort Discount Amt = PAR.TH CA Sort Discount Amt + WRK.TH CA Sort Disco
   PAR.TH_CA_Sort_Discount_Amt = PAR.TH_CA_Sort_Discount_Amt + WRK.TH_CA_Sort_Discount_Amt;

   // PAR.TH CA Yield Gain/Loss Amt = PAR.TH CA Yield Gain/Loss Amt + WRK.TH CA Yield
   PAR.TH_CA_Yield_Gain_Loss_Amt = PAR.TH_CA_Yield_Gain_Loss_Amt
   + WRK.TH_CA_Yield_Gain_Loss_Amt;

   // PAR.TH CA Base Carcass Value = PAR.TH CA Base Carcass Value + WRK.TH CA Base Car
   PAR.TH_CA_Base_Carcass_Value = PAR.TH_CA_Base_Carcass_Value
   + WRK.TH_CA_Base_Carcass_Value;

   // PAR.TH CA Lean Premium Amt = PAR.TH CA Lean Premium Amt + WRK.TH CA Lean Premium
   PAR.TH_CA_Lean_Premium_Amt = PAR.TH_CA_Lean_Premium_Amt + WRK.TH_CA_Lean_Premium_Amt;

   // PAR.TH CA Carcass Gross Amt = PAR.TH CA Carcass Gross Amt + WRK.TH CA Carcass Gr
   PAR.TH_CA_Carcass_Gross_Amt = PAR.TH_CA_Carcass_Gross_Amt + WRK.TH_CA_Carcass_Gross_Amt;

   ENDIF;

   //?PK0166 - New fields
   // PAR.TH Head Excluded = PAR.TH Head Excluded + DB1.TH Head Excluded
   PAR.TH_Head_Excluded = PAR.TH_Head_Excluded + DB1.TH_Head_Excluded;

   // PAR.TH Excluded Gross Value = PAR.TH Excluded Gross Value + DB1.TH Excluded Gross Value
   PAR.TH_Excluded_Gross_Value = PAR.TH_Excluded_Gross_Value + DB1.TH_Excluded_Gross_Value;

   // PAR.TH Excluded Carc Val = PAR.TH Excluded Carc Val + DB1.TH Excluded Carc Val
   PAR.TH_Excluded_Carc_Val = PAR.TH_Excluded_Carc_Val + DB1.TH_Excluded_Carc_Val;

   // PAR.TH Excluded Premium = PAR.TH Excluded Premium + DB1.TH Excluded Premium
   PAR.TH_Excluded_Premium = PAR.TH_Excluded_Premium + DB1.TH_Excluded_Premium;

   // PAR.TH Head Adjusted-LN% = PAR.TH Head Adjusted-LN% + DB1.TH Head Adjusted-LN%
   PAR.TH_Head_Adjusted_LN = PAR.TH_Head_Adjusted_LN + DB1.TH_Head_Adjusted_LN;

   // PAR.TH PHA Head Adds = PAR.TH PHA Head Adds + DB1.TH PHA Head Adds
   PAR.TH_PHA_Head_Adds = PAR.TH_PHA_Head_Adds + DB1.TH_PHA_Head_Adds;

   //?050108 slm get TH Fixed Cost Amount
   // PAR.TH Fixed Cost Amount = PAR.TH Fixed Cost Amount + DB1.TH Fixed Cost Amount
   PAR.TH_Fixed_Cost_Amount = PAR.TH_Fixed_Cost_Amount + DB1.TH_Fixed_Cost_Amount;

   // PAR.TH Meat Value Factor Amt = PAR.TH Meat Value Factor Amt + DB1.TH Meat Value Factor Amt
   PAR.TH_Meat_Value_Factor_Amt = PAR.TH_Meat_Value_Factor_Amt
   + DB1.TH_Meat_Value_Factor_Amt;

   //?USER: Exit processing

   //?Analysis to Payments
   CASE;

   // IF PAR.Print Carcass Analysis Us is Yes
   IF PAR.Print_Carcass_Analysis_Us = 'Y';

   // PAR.TH CM Base Mkt Price Amt = PAR.TH CA Base Mkt Price Amt
   PAR.TH_CM_Base_Mkt_Price_Amt = PAR.TH_CA_Base_Mkt_Price_Amt;

   // PAR.TH CM Sort Discount Amt = PAR.TH CA Sort Discount Amt
   PAR.TH_CM_Sort_Discount_Amt = PAR.TH_CA_Sort_Discount_Amt;

   // PAR.TH CM Yield Gain/Loss Amt = PAR.TH CA Yield Gain/Loss Amt
   PAR.TH_CM_Yield_Gain_Loss_Amt = PAR.TH_CA_Yield_Gain_Loss_Amt;

   // PAR.TH CM Base Carcass Value = PAR.TH CA Base Carcass Value
   PAR.TH_CM_Base_Carcass_Value = PAR.TH_CA_Base_Carcass_Value;

   // PAR.TH CM LN AddOn/Deduct Amt = PAR.TH CA Lean Premium Amt
   PAR.TH_CM_LN_AddOn_Deduct_Amt = PAR.TH_CA_Lean_Premium_Amt;

   // PAR.TH CM Carcass Gross Amt = PAR.TH CA Carcass Gross Amt
   PAR.TH_CM_Carcass_Gross_Amt = PAR.TH_CA_Carcass_Gross_Amt;

   ENDIF;

  }

  //?Calculate Live /CWT and Carc /CWT
  CASE;

  // IF WRK.#Sequence Block is NULL
  IF WRK.#Sequence_Block = *BLANK;

  //?Calculate Carc/CWT if Par.Th Hot Wt is n= 0
  CASE;

  // IF PAR.TH Hot Wgt NE WRK.Zero USR
  IF PAR.TH_Hot_Wgt <> WRK.Zero_USR;

  // TH CM Bse Mkt Carc /CWT
  PAR.TH_CM_Bse_Mkt_Carc_CWT = PAR.TH_CM_Base_Mkt_Price_Amt / ( PAR.TH_Hot_Wgt / 100 'H' )
  'H';

  // TH CM Srt Dsc Carc /CWT
  PAR.TH_CM_Srt_Dsc_Carc_CWT = PAR.TH_CM_Sort_Discount_Amt / ( PAR.TH_Hot_Wgt / 100 'H' )
  'H';

  // TH CM Crc Val Carc /CWT
  WRK.TH_CM_Crc_Val_Carc_CWT = PAR.TH_CM_Base_Carcass_Value / ( PAR.TH_Hot_Wgt / 100 'H' )
  'H';

  // PAR.TH CM Crc Val Carc /CWT = WRK.TH CM Crc Val Carc /CWT
  PAR.TH_CM_Crc_Val_Carc_CWT = WRK.TH_CM_Crc_Val_Carc_CWT;

  // TH CM Lean Prem Carc /CWT
  PAR.TH_CM_Lean_Prem_Carc_CWT = PAR.TH_CM_LN_AddOn_Deduct_Amt / ( PAR.TH_Hot_Wgt / 100
  'H' ) 'H';

  // TH CM Gross Carc /CWT
  PAR.TH_CM_Gross_Carc_CWT = PAR.TH_CM_Carcass_Gross_Amt / ( PAR.TH_Hot_Wgt / 100 'H' )
  'H';

  //?Calculate Carc/CWT if Par.Th Hot Wt is n= 0
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.TH CM Bse Mkt Carc /CWT = CON.*ZERO
  PAR.TH_CM_Bse_Mkt_Carc_CWT = *ZERO;

  // PAR.TH CM Srt Dsc Carc /CWT = CON.*ZERO
  PAR.TH_CM_Srt_Dsc_Carc_CWT = *ZERO;

  // PAR.TH CM Yld G/L Carc /CWT = CON.*ZERO
  PAR.TH_CM_Yld_G_L_Carc_CWT = *ZERO;

  // PAR.TH CM Crc Val Carc /CWT = CON.*ZERO
  PAR.TH_CM_Crc_Val_Carc_CWT = *ZERO;

  // PAR.TH CM Lean Prem Carc /CWT = CON.*ZERO
  PAR.TH_CM_Lean_Prem_Carc_CWT = *ZERO;

  // PAR.TH CM Gross Carc /CWT = CON.*ZERO
  PAR.TH_CM_Gross_Carc_CWT = *ZERO;

  ENDIF;

  //?Calculate Live/CWT if Par.Th live wt is n= 0
  CASE;

  // IF PAR.TH Live Wgt NE WRK.Zero USR
  IF PAR.TH_Live_Wgt <> WRK.Zero_USR;

  // TH CM Bse Mkt Live /CWT
  PAR.TH_CM_Bse_Mkt_Live_CWT = PAR.TH_CM_Base_Mkt_Price_Amt / ( PAR.TH_Live_Wgt / 100 'H' )
  'H';

  // TH CM Srt Dsc Live /CWT
  PAR.TH_CM_Srt_Dsc_Live_CWT = PAR.TH_CM_Sort_Discount_Amt / ( PAR.TH_Live_Wgt / 100 'H' )
  'H';

  // TH CM Yld G/L live /CWT
  PAR.TH_CM_Yld_G_L_Live_CWT = PAR.TH_CM_Yield_Gain_Loss_Amt / ( PAR.TH_Live_Wgt / 100 'H' )
  'H';

  // TH CM Crc Val Live /CWT
  PAR.TH_CM_Crc_Val_Live_CWT = PAR.TH_CM_Base_Carcass_Value / ( PAR.TH_Live_Wgt / 100 'H' )
  'H';

  // TH CM Lean Prem Live /CWT
  PAR.TH_CM_Lean_Prem_Live_CWT = PAR.TH_CM_LN_AddOn_Deduct_Amt / ( PAR.TH_Live_Wgt / 100
  'H' ) 'H';

  // TH CM Gross Live /CWT
  PAR.TH_CM_Gross_Live_CWT = PAR.TH_CM_Carcass_Gross_Amt / ( PAR.TH_Live_Wgt / 100 'H' )
  'H';

  //?Calculate Live/CWT if Par.Th live wt is n= 0
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.TH CM Bse Mkt Live /CWT = CON.*ZERO
  PAR.TH_CM_Bse_Mkt_Live_CWT = *ZERO;

  // PAR.TH CM Srt Dsc Live /CWT = CON.*ZERO
  PAR.TH_CM_Srt_Dsc_Live_CWT = *ZERO;

  // PAR.TH CM Yld G/L Live /CWT = CON.*ZERO
  PAR.TH_CM_Yld_G_L_Live_CWT = *ZERO;

  // PAR.TH CM Crc Val Live /CWT = CON.*ZERO
  PAR.TH_CM_Crc_Val_Live_CWT = *ZERO;

  // PAR.TH CM Lean Prem Live /CWT = CON.*ZERO
  PAR.TH_CM_Lean_Prem_Live_CWT = *ZERO;

  // PAR.TH CM Gross Live /CWT = CON.*ZERO
  PAR.TH_CM_Gross_Live_CWT = *ZERO;

  ENDIF;

  ENDIF;

  //?Calc Avg Live Wt
  CASE;

  // IF PAR.TH Head Received is *Zeros
  IF PAR.TH_Head_Received = *ZERO;

  // WRK.TH Avg Live Wgt = CON.*ZERO
  WRK.TH_Avg_Live_Wgt = *ZERO;

  //?Calc Avg Live Wt
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.TH Avg Live Wgt = PAR.TH Live Wgt / PAR.TH Head Received *
  WRK.TH_Avg_Live_Wgt = PAR.TH_Live_Wgt / PAR.TH_Head_Received;

  ENDIF;

  //?Calc Adj Live Weight
  CASE;

  // IF PAR.TH Head Received EQ PAR.TH Head Killed
  IF PAR.TH_Head_Received = PAR.TH_Head_Killed;

  // WRK.TH Adj Live Wgt = PAR.TH Live Wgt
  WRK.TH_Adj_Live_Wgt = PAR.TH_Live_Wgt;

  //?Calc Adj Live Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.TH Adj Live Wgt = PAR.TH Head Killed * WRK.TH Avg Live Wgt *
  WRK.TH_Adj_Live_Wgt = PAR.TH_Head_Killed * WRK.TH_Avg_Live_Wgt;

  ENDIF;

  // PAR.TH Avg Live Wgt = WRK.TH Avg Live Wgt
  PAR.TH_Avg_Live_Wgt = WRK.TH_Avg_Live_Wgt;

  // PAR.TH Adj Live Wgt = WRK.TH Adj Live Wgt
  PAR.TH_Adj_Live_Wgt = WRK.TH_Adj_Live_Wgt;

  //?Calc Actual Yield %
  CASE;

  // IF PAR.TH Live Wgt NE WRK.Zero USR
  IF PAR.TH_Live_Wgt <> WRK.Zero_USR;

  // TH Actual Yield %
  PAR.TH_Actual_Yield = ( PAR.TH_Hot_Wgt / PAR.TH_Live_Wgt 'H' ) * 100 'H';

  //?Calc Actual Yield %
  // IF *OTHERWISE
  IF *OTHERWISE;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.TH_Actual_Yield = *ZERO;

  ENDIF;

  //?Calc Adj Actual Yield %
  CASE;

  // IF PAR.TH Adj Live Wgt NE WRK.Zero USR
  IF PAR.TH_Adj_Live_Wgt <> WRK.Zero_USR;

  // TH Adj Actual Yield %
  PAR.TH_Adj_Actual_Yield = ( PAR.TH_Hot_Wgt / PAR.TH_Adj_Live_Wgt 'H' ) * 100 'H';

  //?Calc Adj Actual Yield %
  // IF *OTHERWISE
  IF *OTHERWISE;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.TH_Adj_Actual_Yield = *ZERO;

  ENDIF;

  //?Calc Avg Hot Wt
  CASE;

  // IF PAR.TH Head Killed NE WRK.Zero USR
  IF PAR.TH_Head_Killed <> WRK.Zero_USR;

  // PAR.TH Avg Hot Wgt = PAR.TH Hot Wgt / PAR.TH Head Killed *Rounded
  PAR.TH_Avg_Hot_Wgt = PAR.TH_Hot_Wgt / PAR.TH_Head_Killed 'H';

  //?Calc Avg Hot Wt
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.TH Avg Hot Wgt = CON.*ZERO
  PAR.TH_Avg_Hot_Wgt = *ZERO;

  ENDIF;

  //?Calc Avg Lean %, Loin eye, & Backfat
  CASE;

  // IF PAR.TH Hot Wgt NE WRK.Zero USR
  IF PAR.TH_Hot_Wgt <> WRK.Zero_USR;

  // PAR.TH Avg Lean Percent = PAR.Lean % * Wgt USR / PAR.TH Hot Wgt *Rounded
  PAR.TH_Avg_Lean_Percent = PAR.Lean_Wgt_USR / PAR.TH_Hot_Wgt 'H';

  // PAR.TH Avg Loin Eye Depth = PAR.Loin-Eye * Wgt USR / PAR.TH Hot Wgt *Rounded
  PAR.TH_Avg_Loin_Eye_Depth = PAR.Loin_Eye_Wgt_USR / PAR.TH_Hot_Wgt 'H';

  // PAR.TH Avg Backfat = PAR.Backfat * Wgt USR / PAR.TH Hot Wgt *Rounded
  PAR.TH_Avg_Backfat = PAR.Backfat_Wgt_USR / PAR.TH_Hot_Wgt 'H';

  // PAR.TH Avg Loin Eye - 2 dec = PAR.Loin-Eye * Wgt USR 2 / PAR.TH Hot Wgt *Rounded
  PAR.TH_Avg_Loin_Eye_2_dec = PAR.Loin_Eye_Wgt_USR_2 / PAR.TH_Hot_Wgt 'H';

  // PAR.TH Avg Backfat - 2 Dec = PAR.Backfat * Wgt USR 2 / PAR.TH Hot Wgt *Rounded
  PAR.TH_Avg_Backfat_2_Dec = PAR.Backfat_Wgt_USR_2 / PAR.TH_Hot_Wgt 'H';

  //?Calc Avg Lean %, Loin eye, & Backfat
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.TH Avg Lean Percent = CON.*ZERO
  PAR.TH_Avg_Lean_Percent = *ZERO;

  // PAR.TH Avg Loin Eye Depth = CON.*ZERO
  PAR.TH_Avg_Loin_Eye_Depth = *ZERO;

  // PAR.TH Avg Backfat = CON.*ZERO
  PAR.TH_Avg_Backfat = *ZERO;

  // PAR.TH Avg Loin Eye - 2 dec = CON.*ZERO
  PAR.TH_Avg_Loin_Eye_2_dec = *ZERO;

  // PAR.TH Avg Backfat - 2 Dec = CON.*ZERO
  PAR.TH_Avg_Backfat_2_Dec = *ZERO;

  ENDIF;

  // TH FFLI
  PAR.TH_FFLI = ( 51.537 + ( .035 * PAR.TH_Hot_Wgt ) ) - ( 12.26 * PAR.TH_Avg_Backfat );

 }

 // PAR.MPR Slg Avg Sort Loss = LCL.TH CM Srt Dsc Carc /CWT
 PAR.MPR_Slg_Avg_Sort_Loss = LCL.TH_CM_Srt_Dsc_Carc_CWT;

 //?5/29/03  Sort loss per grading type
 CASE;

 // IF LCL.CMP Grading Type is Sort Discount Factor
 IF LCL.CMP_Grading_Type = 'S';

 // PAR.MPR Slg Avg Sort Loss = LCL.TH CM Lean Prem Carc /CWT
 PAR.MPR_Slg_Avg_Sort_Loss = LCL.TH_CM_Lean_Prem_Carc_CWT;

 ENDIF;

 //?9/17/2020 cant be reported as  >0 so make it .00
 CASE;

 // IF PAR.MPR Slg Avg Sort Loss is Entered GT 0
 IF PAR.MPR_Slg_Avg_Sort_Loss > 0;

 // PAR.MPR Slg Avg Sort Loss = CND.EQ zero
 PAR.MPR_Slg_Avg_Sort_Loss = *ZERO;

 ENDIF;

 CASE;

 // IF LCL.TH Avg Backfat - 2 Dec is Entered
 IF LCL.TH_Avg_Backfat_2_Dec > 0;

 // PAR.MPR Slg Avg Backfat = LCL.TH Avg Backfat - 2 Dec
 PAR.MPR_Slg_Avg_Backfat = LCL.TH_Avg_Backfat_2_Dec;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.MPR Slg Avg Backfat = LCL.TH Avg Backfat
 PAR.MPR_Slg_Avg_Backfat = LCL.TH_Avg_Backfat;

 ENDIF;

 CASE;

 // IF LCL.TH Avg Loin Eye - 2 dec is Entered
 IF LCL.TH_Avg_Loin_Eye_2_dec > 0;

 // PAR.MPR Slg Avg Loin Depth = LCL.TH Avg Loin Eye - 2 dec
 PAR.MPR_Slg_Avg_Loin_Depth = LCL.TH_Avg_Loin_Eye_2_dec;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.MPR Slg Avg Loin Depth = LCL.TH Avg Loin Eye Depth
 PAR.MPR_Slg_Avg_Loin_Depth = LCL.TH_Avg_Loin_Eye_Depth;

 ENDIF;

 ENDIF;

 //?* Include all Seaboard Expenses in the Avg Net Price *
 EXECUTE FUNCTION(Rtv MPR Seaboard Exp  RT) TYPE(RTVOBJ) FILE(PKCDCPP)           AB1235745;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(LCL.Addt_Cst_Ttl_Usr);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Addt Cst Ttl Usr = PAR.Addt Cst Ttl Usr + DB1.THD Ded/Add Amount
  PAR.Addt_Cst_Ttl_Usr = PAR.Addt_Cst_Ttl_Usr + DB1.THD_Ded_Add_Amount;

 }

 // LCL.TH Payment Gross = LCL.TH Payment Gross + LCL.Addt Cst Ttl Usr
 LCL.TH_Payment_Gross = LCL.TH_Payment_Gross + LCL.Addt_Cst_Ttl_Usr;

 //?MPR Slg Avg Net Price
 CASE;

 // IF LCL.TH Hot Wgt is Greater then Zero
 IF LCL.TH_Hot_Wgt > *ZERO;

 //?RMC 4/09/01  dont round, per Jancie
 //?RMC 11/26/01 Round, per Jancie on x1/...
 //?RMC 11/27/01 took out x4 which was a (hot wt * 1) before the /100
 // MPR Slg Avg Net Price
 PAR.MPR_Slg_Avg_Net_Price = LCL.TH_Payment_Gross / ( LCL.TH_Hot_Wgt / 100 ) 'H';

 ENDIF;

 //?Dont report Avg Live Weight for STF   RMC    09/25/17
 CASE;

 // IF DB1.BOH Company Number is Sioux City
 IF DB1.BOH_Company_Number = 440;

 // PAR.MPR Slg Avg Live Wgt = CON.*ZERO
 PAR.MPR_Slg_Avg_Live_Wgt = *ZERO;

 ENDIF;

 //?Only report price data for Non-Packer Producers
 CASE;

 // IF PAR.MPR Slg Purchase Type is Packer Owned
 IF PAR.MPR_Slg_Purchase_Type = 9;

 // PAR.MPR Slg Base Price = CON.*ZERO
 PAR.MPR_Slg_Base_Price = *ZERO;

 // PAR.MPR Slg Avg Net Price = CON.*ZERO
 PAR.MPR_Slg_Avg_Net_Price = *ZERO;

 // PAR.MPR Slg Low Net Price = CON.*ZERO
 PAR.MPR_Slg_Low_Net_Price = *ZERO;

 // PAR.MPR Slg High Net Price = CON.*ZERO
 PAR.MPR_Slg_High_Net_Price = *ZERO;

 // PAR.MPR Slg Avg Sort Loss = CON.*ZERO
 PAR.MPR_Slg_Avg_Sort_Loss = *ZERO;

 ENDIF;

 EXECUTE FUNCTION(Upd Prior Day Slg     RT) TYPE(RTVOBJ) FILE(PKE6CPP)           AB1235843;
 PARAMETER(PAR.MPR_Identification_Num);
 PARAMETER(PAR.MPR_Reporting_Date);
 PARAMETER(PAR.MPR_Reporting_Time);
 PARAMETER(PAR.MPR_Lot_Identification);
 PARAMETER(PAR.MPR_Slg_Class_Code);
 PARAMETER(PAR.MPR_Slg_Purchase_Type);
 PARAMETER(PAR.MPR_Slg_Head);
 PARAMETER(PAR.MPR_Slg_Base_Price);
 PARAMETER(PAR.MPR_Slg_Avg_Net_Price);
 PARAMETER(PAR.MPR_Slg_Low_Net_Price);
 PARAMETER(PAR.MPR_Slg_High_Net_Price);
 PARAMETER(PAR.MPR_Slg_Avg_Live_Wgt);
 PARAMETER(PAR.MPR_Slg_Avg_Carc_Wgt);
 PARAMETER(PAR.MPR_Slg_Avg_Sort_Loss);
 PARAMETER(PAR.MPR_Slg_Avg_Backfat);
 PARAMETER(PAR.MPR_Slg_Avg_Loin_Depth);
 PARAMETER(PAR.MPR_Slg_Avg_Lean);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt Prior Day Slg     CR) TYPE(CRTOBJ) FILE(PKE6CPP)           AB1235712;
  PARAMETER(PAR.MPR_Identification_Num);
  PARAMETER(PAR.MPR_Reporting_Date);
  PARAMETER(PAR.MPR_Reporting_Time);
  PARAMETER(PAR.MPR_Lot_Identification);
  PARAMETER(PAR.MPR_Slg_Class_Code);
  PARAMETER(PAR.MPR_Slg_Purchase_Type);
  PARAMETER(PAR.MPR_Slg_Head);
  PARAMETER(PAR.MPR_Slg_Base_Price);
  PARAMETER(PAR.MPR_Slg_Avg_Net_Price);
  PARAMETER(PAR.MPR_Slg_Low_Net_Price);
  PARAMETER(PAR.MPR_Slg_High_Net_Price);
  PARAMETER(PAR.MPR_Slg_Avg_Live_Wgt);
  PARAMETER(PAR.MPR_Slg_Avg_Carc_Wgt);
  PARAMETER(PAR.MPR_Slg_Avg_Sort_Loss);
  PARAMETER(PAR.MPR_Slg_Avg_Backfat);
  PARAMETER(PAR.MPR_Slg_Avg_Loin_Depth);
  PARAMETER(PAR.MPR_Slg_Avg_Lean);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp-Sys Dt  IF) TYPE(EXCINTFUN)                      AB1237005;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // Call program Rtv System Date & Tim UP.
    CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
    PARAMETER(PAR.RS_Date_Added);
    PARAMETER(PAR.RS_Time_Added);

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Prior Day Slg     CH) TYPE(CHGOBJ) FILE(PKE6CPP)           AB1235713;
  PARAMETER(DB1.MPR_Identification_Num);
  PARAMETER(DB1.MPR_Reporting_Date);
  PARAMETER(DB1.MPR_Reporting_Time);
  PARAMETER(DB1.MPR_Lot_Identification);
  PARAMETER(PAR.MPR_Slg_Class_Code);
  PARAMETER(PAR.MPR_Slg_Purchase_Type);
  PARAMETER(PAR.MPR_Slg_Head);
  PARAMETER(PAR.MPR_Slg_Base_Price);
  PARAMETER(PAR.MPR_Slg_Avg_Net_Price);
  PARAMETER(PAR.MPR_Slg_Low_Net_Price);
  PARAMETER(PAR.MPR_Slg_High_Net_Price);
  PARAMETER(PAR.MPR_Slg_Avg_Live_Wgt);
  PARAMETER(PAR.MPR_Slg_Avg_Carc_Wgt);
  PARAMETER(PAR.MPR_Slg_Avg_Sort_Loss);
  PARAMETER(PAR.MPR_Slg_Avg_Backfat);
  PARAMETER(PAR.MPR_Slg_Avg_Loin_Depth);
  PARAMETER(PAR.MPR_Slg_Avg_Lean);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // Call program Rtv System Date & Tim UP.
    CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
    PARAMETER(PAR.RS_Date_Changed);
    PARAMETER(PAR.RS_Time_Changed);

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

}


//?RMC T15265 7/29/19 Update Last Kill date reported in MPR control file
//?  after all the kill days have been processed - outside of Loop
// LCL.System Value Numeric  USR = PAR.Kill Date Usr
LCL.System_Value_Numeric_USR = PAR.Kill_Date_Usr;

// PAR.Last Kill Date Rptd USR = LCL.System Value Numeric  USR
PAR.Last_Kill_Date_Rptd_USR = LCL.System_Value_Numeric_USR;

ENDIF;

//?***** Build File C: MPR Prior Day Purchased   *****
//?DOC:  Purchased Swine    LS118C
DO;

//?Process the Buy Order Header with Buy Order Date equal to the
//?Kill Date being reported/processed.
//?1)  Only process Buy Orders for External Producers.
//?2)  For each Buy Order selected, the Buy Order Load is processed
//?    for creating a record in the MPR Prior Day Purchased file.
//?3)  If the Base Price for the Load = Zero, then do not create a
//?    record in the MPR Prior Day Purchased file.
//?Lot Identification:   Concatenate Buy Order Num & Load Num
//?Ownership Code    :   The Ownership Code is based on the Purchase
//?                      Type Code identified for the Producer.
//?                      If Purchase Type Code = 1, 2, 3, 4
//?                           Ownership Code = 3
//?                      If Purchase Type Code = 5, 6, 7, 8
//?                           Ownership Code = 2
//?                      If Purchase Type Code = 9
//?                           Ownership Code = 1
//?Class Code        :   The Class Code will = 1 (Barrows/Gilts)
//?Purchase Type Code:   The Purchase Type Code is identified for
//?                      the producer in the Producer file.
//?Head Count        :   The Head Count is the Planned Delivery Head
//?                      for the Buy Order Load.
//?Avg Live Weight   :   The Average Live Weight will be Zero for
//?                      all loads processed.  We have not received
//?                      these loads yet.  Also, the Average Live
//?                      Weight only needs reporting, if the Payment
//?                      Type is Live.  If the Payment Type is
//?                      Carcass Merit, then the Average Live Weight
//?                      will be zero.
//?Base Price ($/CWT):   The Base Price will be Zero for all loads
//?                      processed.  We do not know the Base Price
//?                      until the Market Prices have been entered
//?                      into the system.
//?*------------------------------------------------------------*
//?01/18/01 PKD
//?- Currently, for all of our purchases for the future, we do not
//?  know the Base Price.
//?- One record in the MPR Prior Day Purchased file will be created
//?  with zeros and blanks for sending to the USDA.
//?03/29/01 RMC
//?- Do not send a blank record.
//?04/17/01 RMC
//?  Report Purchases when we have the price, which is actually after they're
//?  slaughtered.  Read the BO Hdr by Kill Date, and get the Base price which
//?  which includes the (Cutout * 88.7%) +- overage/underage.
//? For example, hog slaughtered 4/17/01, are reported on 4/18
//?  as Prior Day Purchased.
//?08/22/01 PKD T568
//?  Changed the Rtv for procesing the Buy Order Header to Position
//?  on the Kill Date instead of restrict.  This will process all
//?  Buy Order that have been created for future Kill Dates.  If
//?  a Buy Order Quote was entered, then the purchase would be
//?  reported the day after the Buy Order is created.  For Buy Orders
//?  with Market Date Method of Day Prior Delivery, the purchase
//?  will be reported the day the hogs are killed instead of after
//?  hogs have been killed.
//?- Once the purchase has been reported, the BOL MPR Prior Day Purch
//?  field is changed to Y, so it does not get reported again.
//?*------------------------------------------------------------*
//?10/09/01 RMC  If Rerun, the LS118 records have already been created &
//? and the BOL have been flagged as prior-day-purch-reported = Y, so
//?  if no records were created on this run, check for records already
//?  existing in the file for this date, and change the Record Added
//?  to = Y so the records will be sent to the USDA in the CL.
//?*------------------------------------------------------------*
//?9/20/02  Prior Day Purch from the BOL -- use BOL Head Received
//?  if > 0, else use the Plan Head Delv(which is what it did already)
//?*------------------------------------------------------------*
//?02/26/04 RMC Prior Day Purch: MPR Head = SUM(TH Hd Rcvd for QM hogs)
//?             instead of the BOL Head Received.
//?*------------------------------------------------------------*
//?01/04/06 RMC Prior Day Purch: check base price>0, not just n=0
//?             instead of the BOL Head Received.
//?*------------------------------------------------------------*
//?04/24/06 RMC Prior Day Purch: If Prod Purch Type=Packer Owned 9
//?         or Internal, output ls118c (pke7cpp) with -0- base price.
//?         If packer owned make ownership=1 when creating pke7cpp,
//?         Check price > 0 or Ownership=1 when creating pke7cpp
//?         because Ownership=1 its packer owned and price is -0-
//?*------------------------------------------------------------*
//?11/24/06 RMC Prior Day Purch: If Prod Purch Type=Packer Sold =5,6,7,8
//?         Dont make ownership=1 when theres a quoted base price.
//?  Reported to us by Brad K and Mike Lynch - USDA
//?*------------------------------------------------------------*
//?04/24/07 RMC Prior Day Purch: Dont chg purch type to 1 EVER.
//?  Reported to us by Jerry L and Mike Lynch - USDA
//?*------------------------------------------------------------*
//?11/05/14 RMC E3577 Prior Day Purch: Hedge BO wont have a BOL, so create
//?  from the BOH, using the BOH Hedge Head as the head, force purchase
//?   type to 2
//?*------------------------------------------------------------*
//?11/01/17 RMC S11998 Prior Day Purch: cant calc price for PPI until purch
//?  date >= job date. its a day prior method
//?*------------------------------------------------------------*
//?R12679 RMC 3.02.18 LS118C-dont report packer owned (9) until they can be
//?  priced..which is the day after kill most likely. they were getting
//?  reported the morning after entry into the system  (per Guy, David C)
//?  So every purch type is now only reported when it can be priced.
ENDDO;

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.Company_Number_USR);
PARAMETER('MPRORGST');
PARAMETER(LCL.MPR_Origin_from_Site_USR);

EXECUTE FUNCTION(Rtv MPR Prior Day PrchRT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1236193;
PARAMETER(PAR.Company_Number_USR);
PARAMETER(PAR.Kill_Date_Usr);
PARAMETER(PAR.MPR_Identification_Num);
PARAMETER(PAR.MPR_Reporting_Date);
PARAMETER(PAR.MPR_Reporting_Time);
PARAMETER(WRK.Record_Added_Usr);
PARAMETER(LCL.MPR_Origin_from_Site_USR);
{
 //?USER: Initialize routine

 //?PK0254  Create MPR Prior Day Purchases
 //?  Initialize constant fields
 // PAR.MPR Pur Class Code = CND.Barrows/Gilts
 PAR.MPR_Pur_Class_Code = 1;

 // PAR.MPR Pur Avg Live Wgt = CON.*ZERO
 PAR.MPR_Pur_Avg_Live_Wgt = *ZERO;

 // PAR.MPR Pur Base Price = CON.*ZERO
 PAR.MPR_Pur_Base_Price = *ZERO;

 // PAR.Record Added Usr = CND.No
 PAR.Record_Added_Usr = 'N';

 //?USER: Process Data record

 //?R7805 11/04/16 RMC R7805 Use new BOH Purch Type
 CASE;

 // IF DB1.BOH MPR Purchase Type is *ALL values
 IF DB1.BOH_MPR_Purchase_Type = '01'/'02'/'03'/'04'/'05'/'06'/'07'/'08'/'09'/'10'/'11';

 // PAR.MPR Pur Purchase Type = CVTVAR(DB1.BOH MPR Purchase Type)
 PAR.MPR_Pur_Purchase_Type = CVTVAR(DB1.BOH_MPR_Purchase_Type);

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV MPR Prdcr Purch TpRT) TYPE(RTVOBJ) FILE(PKE3CPP)           AB1235599;
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(PAR.MPR_Pur_Purchase_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 ENDIF;

 //?Purchase Ownership Code
 CASE;

 // IF DB1.BOH Buy Order Type is Internal
 IF DB1.BOH_Buy_Order_Type = 'I';

 // OR PAR.MPR Pur Purchase Type is Packer Owned
 OR PAR.MPR_Pur_Purchase_Type = 9;

 // PAR.MPR Pur Ownership Code = CND.Packer Owned
 PAR.MPR_Pur_Ownership_Code = 1;

 //?Purchase Ownership Code
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.MPR Pur Purchase Type is Packer Sold
 IF PAR.MPR_Pur_Purchase_Type >= 5;
 AND PAR.MPR_Pur_Purchase_Type <= 8;

 // OR PAR.MPR Pur Purchase Type is PckSld Neg Formula
 OR PAR.MPR_Pur_Purchase_Type = 11;

 //?R7307 RMC 9/29/16  added type 11
 // PAR.MPR Pur Ownership Code = CND.Packer Sold
 PAR.MPR_Pur_Ownership_Code = 2;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.MPR Pur Ownership Code = CND.All Other
 PAR.MPR_Pur_Ownership_Code = 3;

 ENDIF;

 ENDIF;

 //?RMC comment this code per MIKE LYNCH usda 04/24/07
 //?E3577 11/5/14 RMC Original code before HEDGE
 CASE;

 // IF DB1.BOH Buy Order Type is Not Hedge
 IF DB1.BOH_Buy_Order_Type = 'C'/'I'/'O';

 EXECUTE FUNCTION(Rtv Crt MPR PriorDyPrcRT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1236194;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(PAR.MPR_Identification_Num);
 PARAMETER(PAR.MPR_Reporting_Date);
 PARAMETER(PAR.MPR_Reporting_Time);
 PARAMETER(PAR.MPR_Pur_Ownership_Code);
 PARAMETER(PAR.MPR_Pur_Class_Code);
 PARAMETER(PAR.MPR_Pur_Purchase_Type);
 PARAMETER(PAR.MPR_Pur_Base_Price);
 PARAMETER(PAR.Record_Added_Usr);
 PARAMETER(DB1.BOH_Payment_Type);
 PARAMETER(DB1.BOH_Market_Add_Deduct);
 PARAMETER(DB1.BOH_Quote_Price_Type);
 PARAMETER(DB1.BOH_Quoted_Base_Mkt_Price);
 PARAMETER(DB1.BOH_Commodity_Market_Code);
 PARAMETER(DB1.BOH_Commodity_Price_Group);
 PARAMETER(DB1.BOH_Market_Date_Method);
 PARAMETER(DB1.BOH_MPR_Reporting_Date);
 PARAMETER(DB1.BOH_MPR_Reporting_Time);
 PARAMETER(DB1.PC_Contract_Code);
 PARAMETER(DB1.PSC_Sub_Contract_Code);
 PARAMETER(DB1.PO_Option_Code);
 PARAMETER(DB1.CMP_Program_Code);
 PARAMETER(PAR.MPR_Origin_from_Site_USR);
 {
  //?USER: Initialize routine

  //?S14406 RMC 1/22/19 If the BOL was prev reported - LOT exists in pke7cpp
  //?  with the same reporting date/time - then let it go thru the CASE stmt
  //?  so it will update the MPR Pur Base Price in case it has changed which
  //?  happens if they didnt get entered into AS400, or usda error
  //?S12679 RMC 3/2/18 dont report packer owned (9) until they can be priced
  //?  either....still do not report its price. makes them reported with
  //?  the same timing as type 3 et al.
  //?R6410
  //?RMC Added chk for MMP and not kill date yet. dont output until kill<curr
  //? this price cant be calc until all markets have a price
  // WRK.BOH Market Date Method = CND.1 Day Prior Purchase Date
  WRK.BOH_Market_Date_Method = 'PP1';

  //?USER: Process Data record

  CASE;

  // IF DB1.RS Record Status is Active
  IF DB1.RS_Record_Status = 'A';

  //?RMC added check for ACTIVE record sts 04/23/07
  //?RMC upd price if it was sent before on same REPORTING DATE/TIME 1.22.19
  CASE;

  // IF DB1.BOL MPR Prior Day Prch is Not Yes
  IF DB1.BOL_MPR_Prior_Day_Prch = *BLANK/'N';

  // OR DB1.BOL MPR Prior Day Prch is Yes
  OR DB1.BOL_MPR_Prior_Day_Prch = 'Y';

  //?RMC 1.22.19 Added YES above so it goes thru here regardless
  // WRK.Buy Order Number Alpha = CVTVAR(DB1.BOH Buy Order Number)
  WRK.Buy_Order_Number_Alpha = CVTVAR(DB1.BOH_Buy_Order_Number);

  // WRK.Buy Order Load Alpha = CVTVAR(DB1.BOL Load Number)
  WRK.Buy_Order_Load_Alpha = CVTVAR(DB1.BOL_Load_Number);

  // PAR.MPR Lot Identification = CONCAT(WRK.Buy Order Number Alpha,WRK.Buy Order Load Alpha,CON.*ZE
  PAR.MPR_Lot_Identification = WRK.Buy_Order_Number_Alpha + WRK.Buy_Order_Load_Alpha (0);

  EXECUTE FUNCTION(Rtv Tattoo Market Hd  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1257803;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(LCL.Head_Total_USR);
  {
   //?USER: Initialize routine

   // PAR.Head Total USR = CON.*ZERO
   PAR.Head_Total_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF DB1.TH Hog Class Type is Market
   IF DB1.TH_Hog_Class_Type = 'M';

   // PAR.Head Total USR = PAR.Head Total USR + DB1.TH Head Received
   PAR.Head_Total_USR = PAR.Head_Total_USR + DB1.TH_Head_Received;

   ENDIF;

  }

  EXECUTE FUNCTION(Rtv PL State          RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1236090;
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(DB1.PL_Location_Code);
  PARAMETER(PAR.MPR_Origin);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?Get state from site on first mkt tattoo  TFS S13526  9.7.18 added here
  CASE;

  // IF PAR.MPR Origin from Site USR is Yes
  IF PAR.MPR_Origin_from_Site_USR = 'Y';

  EXECUTE FUNCTION(Rtv Site ID f/mkt tt   RT) TYPE(RTVOBJ) FILE(PKDNCPP)          AB1346192;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(WRK.PS_State);
  {
   //?USER: Initialize routine

   // PAR.PS State = CON.*BLANK
   PAR.PS_State = *BLANK;

   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   //?get the state for the site on the 1st mkt tattoo
   CASE;

   // IF DB1.PS Site ID is Not Blank
   IF DB1.PS_Site_ID <> *BLANK;

   EXECUTE FUNCTION(Rtv Class Type        RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1346193;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(WRK.TH_Hog_Class_Type);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.TH Hog Class Type is Market
   IF WRK.TH_Hog_Class_Type = 'M';

   EXECUTE FUNCTION(Rtv Site State WRTN   RT) TYPE(RTVOBJ) FILE(PLATREP)           AB1298470;
   PARAMETER(DB1.PD_Producer_Code);
   PARAMETER(DB1.PS_Site_ID);
   PARAMETER(WRK.PS_State);
   PARAMETER(WRK.*Return_code);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   CASE;

   // IF WRK.PS State is Entered
   IF WRK.PS_State <> *BLANK;

   // PAR.PS State = WRK.PS State
   PAR.PS_State = WRK.PS_State;

   QUIT;

   ENDIF;

   ENDIF;

   ENDIF;

  }

  CASE;

  // IF WRK.PS State is Entered
  IF WRK.PS_State <> *BLANK;

  // PAR.MPR Origin = WRK.PS State
  PAR.MPR_Origin = WRK.PS_State;

  ENDIF;

  //?Get state from site on first mkt tattoo  TFS S13526  9.7.18 added here
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv State f/mpr       RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1346828;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(WRK.TH_State);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   CASE;

   // IF DB1.TH Hog Class Type is Market
   IF DB1.TH_Hog_Class_Type = 'M';

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

   ENDIF;

  }

  CASE;

  // IF WRK.TH State is Entered
  IF WRK.TH_State <> *BLANK;

  // PAR.MPR Origin = WRK.TH State
  PAR.MPR_Origin = WRK.TH_State;

  ENDIF;

  ENDIF;

  //?9/20/02 new MPR Compliance issue; 02/26/04 sum(th hd rcvd MARKET)
  CASE;

  // IF LCL.Head Total USR is Greater then Zero
  IF LCL.Head_Total_USR > *ZERO;

  // PAR.MPR Pur Head = LCL.Head Total USR
  PAR.MPR_Pur_Head = LCL.Head_Total_USR;

  //?9/20/02 new MPR Compliance issue; 02/26/04 sum(th hd rcvd MARKET)
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.MPR Pur Head = DB1.BOL Pln Head Delv
  PAR.MPR_Pur_Head = DB1.BOL_Pln_Head_Delv;

  ENDIF;

  //?RMC 3.2.18  If packer owned, dont rpt until price can be calc'd
  CASE;

  // IF PAR.PO Option Code is Multi Market Price
  IF PAR.PO_Option_Code = 'MMP';

  // AND DB1.BOL Kill Date GT JOB.*Job date
  AND ( DB1.BOL_Kill_Date > JOB.*Job_date;

  // OR DB1.BOL Kill Date EQ JOB.*Job date
  OR DB1.BOL_Kill_Date = JOB.*Job_date;

  // AND PAR.BOH Market Date Method NE WRK.BOH Market Date Method
  AND PAR.BOH_Market_Date_Method <> WRK.BOH_Market_Date_Method );

  //?S12837 3.27.18 Unless it is mkt date method = PP1 then it can be priced.
  //?   was checking if kill date >= job date and not checking for PP1
  //?RMC 3.2.18 dont chk packer owned here. want to try to calc it below
  //?RMC 4/24/06 If packer owned, output -0- price - per MikeLynch USDA
  //?RMC Added chk for MMP and not kill date yet. dont output until kill<curr
  //? this price cant be calc until all markets have a price
  // PAR.MPR Pur Base Price = CON.*ZERO
  PAR.MPR_Pur_Base_Price = *ZERO;

  //?RMC 3.2.18  If packer owned, dont rpt until price can be calc'd
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Base Price        RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1238247;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.BOL_Kill_Date);
  PARAMETER(LCL.TH_Avg_Live_Wgt);
  PARAMETER(LCL.TH_CM_Base_Mkt_Price);
  PARAMETER(PAR.BOH_Market_Add_Deduct);
  PARAMETER(PAR.BOH_Quote_Price_Type);
  PARAMETER(PAR.BOH_Quoted_Base_Mkt_Price);
  PARAMETER(PAR.BOH_Commodity_Market_Code);
  PARAMETER(PAR.BOH_Commodity_Price_Group);
  PARAMETER(PAR.BOH_Market_Date_Method);
  PARAMETER(PAR.PC_Contract_Code);
  PARAMETER(PAR.PSC_Sub_Contract_Code);
  PARAMETER(PAR.PO_Option_Code);
  PARAMETER(PAR.CMP_Program_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?S12837 RMC - get sub-ctr info for price calc. 3/26/18 cpy here from rcdfnd
   // LCL.PSC Market Percent   NU = CON.*ZERO
   LCL.PSC_Market_Percent_NU = *ZERO;

   // LCL.PSC Mkt Percent = CON.*ZERO
   LCL.PSC_Mkt_Percent = *ZERO;

   // LCL.PSC Break Even Percent = CON.*ZERO
   LCL.PSC_Break_Even_Percent = *ZERO;

   EXECUTE FUNCTION(Rtv PrSb-Cont Carc/Sm RT) TYPE(RTVOBJ) FILE(PKAQCPP)           AB1259622;
   PARAMETER(PAR.PC_Contract_Code);
   PARAMETER(PAR.PSC_Sub_Contract_Code);
   PARAMETER(LCL.PSC_Market_Percent_NU);
   PARAMETER(LCL.PSC_Break_Even_Percent);
   PARAMETER(LCL.PSC_Mkt_Percent);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // Call program Clc Base Mkt Price    XF.
   CALL PROGRAM(Clc Base Mkt Price    XF) ('PKJ7XFR');
   PARAMETER(PAR.BOH_Market_Add_Deduct);
   PARAMETER(PAR.BOH_Quote_Price_Type);
   PARAMETER(PAR.BOH_Quoted_Base_Mkt_Price);
   PARAMETER(PAR.BOH_Commodity_Market_Code);
   PARAMETER(PAR.BOH_Commodity_Price_Group);
   PARAMETER(PAR.BOH_Market_Date_Method);
   PARAMETER(PAR.PC_Contract_Code);
   PARAMETER(PAR.PSC_Sub_Contract_Code);
   PARAMETER(PAR.PO_Option_Code);
   PARAMETER(PAR.CMP_Program_Code);
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.BOH_Buy_Order_Number);
   PARAMETER(PAR.BOL_Load_Number);
   PARAMETER(LCL.TH_Tattoo_Number);
   PARAMETER(PAR.TH_Kill_Date);
   PARAMETER(PAR.TH_Kill_Date);
   PARAMETER(LCL.TH_Live_Wgt);
   PARAMETER(PAR.TH_CM_Base_Mkt_Price);
   PARAMETER(LCL.PSC_Floor_Price);
   PARAMETER(LCL.PSC_Ceiling_Price);
   PARAMETER(LCL.PSC_Market_Percent_NU);
   PARAMETER(LCL.PSC_Mkt_Percent);
   PARAMETER(LCL.Market_Price_USR);
   PARAMETER(LCL.Pricing_UOM_USR);
   PARAMETER(LCL.Pricing_Date_USR);

   CASE;

   // IF PAR.TH CM Base Mkt Price EQ PAR.BOH Market Add/Deduct
   IF PAR.TH_CM_Base_Mkt_Price = PAR.BOH_Market_Add_Deduct;

   // PAR.TH CM Base Mkt Price = CON.*ZERO
   PAR.TH_CM_Base_Mkt_Price = *ZERO;

   ENDIF;

   //?11/01/17 RMC also check for date being hit with market date method=PPI
   CASE;

   // IF PAR.TH Kill Date GT JOB.*Job date
   IF PAR.TH_Kill_Date > JOB.*Job_date;

   //?11/9/17  dont chk market date method. its true for PP1 and  CUR
   CASE;

   // IF PAR.BOH Quoted Base Mkt Price is Zeros
   IF PAR.BOH_Quoted_Base_Mkt_Price = *ZERO;

   //?04/12/18 report a quoted base market priced load- dont zero it out
   // PAR.TH CM Base Mkt Price = CON.*ZERO
   PAR.TH_CM_Base_Mkt_Price = *ZERO;

   ENDIF;

   ENDIF;

   //?USER: Process Data record

   //?S00313 RMC - get sub-ctr info for price calc. it was 000000
   // LCL.PSC Market Percent   NU = CON.*ZERO
   LCL.PSC_Market_Percent_NU = *ZERO;

   // LCL.PSC Mkt Percent = CON.*ZERO
   LCL.PSC_Mkt_Percent = *ZERO;

   // LCL.PSC Break Even Percent = CON.*ZERO
   LCL.PSC_Break_Even_Percent = *ZERO;

   EXECUTE FUNCTION(Rtv PrSb-Cont Carc/Sm RT) TYPE(RTVOBJ) FILE(PKAQCPP)           AB1259622;
   PARAMETER(PAR.PC_Contract_Code);
   PARAMETER(PAR.PSC_Sub_Contract_Code);
   PARAMETER(LCL.PSC_Market_Percent_NU);
   PARAMETER(LCL.PSC_Break_Even_Percent);
   PARAMETER(LCL.PSC_Mkt_Percent);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // Call program Clc Base Mkt Price    XF.
   CALL PROGRAM(Clc Base Mkt Price    XF) ('PKJ7XFR');
   PARAMETER(PAR.BOH_Market_Add_Deduct);
   PARAMETER(PAR.BOH_Quote_Price_Type);
   PARAMETER(PAR.BOH_Quoted_Base_Mkt_Price);
   PARAMETER(PAR.BOH_Commodity_Market_Code);
   PARAMETER(PAR.BOH_Commodity_Price_Group);
   PARAMETER(PAR.BOH_Market_Date_Method);
   PARAMETER(PAR.PC_Contract_Code);
   PARAMETER(PAR.PSC_Sub_Contract_Code);
   PARAMETER(PAR.PO_Option_Code);
   PARAMETER(PAR.CMP_Program_Code);
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(DB1.TH_Purchase_Date);
   PARAMETER(DB1.TH_Live_Wgt);
   PARAMETER(PAR.TH_CM_Base_Mkt_Price);
   PARAMETER(LCL.PSC_Floor_Price);
   PARAMETER(LCL.PSC_Ceiling_Price);
   PARAMETER(LCL.PSC_Market_Percent_NU);
   PARAMETER(LCL.PSC_Mkt_Percent);
   PARAMETER(LCL.Market_Price_USR);
   PARAMETER(LCL.Pricing_UOM_USR);
   PARAMETER(LCL.Pricing_Date_USR);

   //?IF PRICE = + - DED, THEN ZERO IT OUT
   CASE;

   // IF PAR.TH CM Base Mkt Price EQ PAR.BOH Market Add/Deduct
   IF PAR.TH_CM_Base_Mkt_Price = PAR.BOH_Market_Add_Deduct;

   // OR PAR.TH CM Base Mkt Price is LT 1.00
   OR PAR.TH_CM_Base_Mkt_Price < 1;

   //?RMC 4/25/06 added comp lt 1
   // PAR.TH CM Base Mkt Price = CON.*ZERO
   PAR.TH_CM_Base_Mkt_Price = *ZERO;

   ENDIF;

   //?11/01/17 RMC also check for date being hit with market date method=PPI
   CASE;

   // IF DB1.TH Purchase Date GT JOB.*Job date
   IF DB1.TH_Purchase_Date > JOB.*Job_date;

   CASE;

   // IF PAR.BOH Quoted Base Mkt Price is Zeros
   IF PAR.BOH_Quoted_Base_Mkt_Price = *ZERO;

   //?04/12/18 report a quoted base market priced load- dont zero it out
   //?11/9/17  dont chk market date method. its true for PP1 and  CUR
   // PAR.TH CM Base Mkt Price = CON.*ZERO
   PAR.TH_CM_Base_Mkt_Price = *ZERO;

   ENDIF;

   ENDIF;

   // PAR.TH Avg Live Wgt = DB1.TH Avg Live Wgt
   PAR.TH_Avg_Live_Wgt = DB1.TH_Avg_Live_Wgt;

   QUIT;

  }

  //?11/01/17 RMC also check for date being hit with market date method=PPI
  //?  in above RTV
  CASE;

  // IF PAR.MPR Pur Ownership Code is Packer Owned
  IF PAR.MPR_Pur_Ownership_Code = 1;

  // PAR.MPR Pur Base Price = CON.*ZERO
  PAR.MPR_Pur_Base_Price = *ZERO;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.MPR Pur Base Price = LCL.TH CM Base Mkt Price
  PAR.MPR_Pur_Base_Price = LCL.TH_CM_Base_Mkt_Price;

  ENDIF;

  ENDIF;

  //?If Live, output Avg Live Wt
  CASE;

  // IF PAR.BOH Payment Type is Live
  IF PAR.BOH_Payment_Type = 'L';

  // PAR.MPR Pur Avg Live Wgt = LCL.TH Avg Live Wgt
  PAR.MPR_Pur_Avg_Live_Wgt = LCL.TH_Avg_Live_Wgt;

  //?If Live, output Avg Live Wt
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.MPR Pur Avg Live Wgt = CON.*ZERO
  PAR.MPR_Pur_Avg_Live_Wgt = *ZERO;

  ENDIF;

  //?Change comp to > 0; RMC added comp Ownership=1, price is zero 4/25/06
  CASE;

  // IF PAR.MPR Pur Base Price is Entered GT 0
  IF PAR.MPR_Pur_Base_Price > 0;

  // OR PAR.MPR Pur Ownership Code is Packer Owned
  OR ( PAR.MPR_Pur_Ownership_Code = 1;

  // AND LCL.TH CM Base Mkt Price is Not Zeros
  AND LCL.TH_CM_Base_Mkt_Price <> *ZERO );

  //?RMC 3.2.18 R12679 report packer owned when a price was able to be calcd
  //?ONLY CREATE IF IT WAS NOT PREVIOUSLY REPORTED. If it was on a diff date
  //?  then we dont want to do it again.
  EXECUTE FUNCTION(Rtv Upd PriorDayPrch  RT) TYPE(RTVOBJ) FILE(PKE7CPP)           AB1236196;
  PARAMETER(PAR.MPR_Identification_Num);
  PARAMETER(PAR.MPR_Reporting_Date);
  PARAMETER(PAR.MPR_Reporting_Time);
  PARAMETER(PAR.MPR_Lot_Identification);
  PARAMETER(PAR.MPR_Pur_Ownership_Code);
  PARAMETER(PAR.MPR_Pur_Class_Code);
  PARAMETER(PAR.MPR_Pur_Purchase_Type);
  PARAMETER(PAR.MPR_Pur_Head);
  PARAMETER(PAR.MPR_Pur_Avg_Live_Wgt);
  PARAMETER(PAR.MPR_Pur_Base_Price);
  PARAMETER(PAR.MPR_Origin);
  PARAMETER(DB1.BOL_MPR_Prior_Day_Prch);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.BOL MPR Prior Day Prch is Not Yes
   IF PAR.BOL_MPR_Prior_Day_Prch = *BLANK/'N';

   EXECUTE FUNCTION(Crt Prior Day Purch   CR) TYPE(CRTOBJ) FILE(PKE7CPP)           AB1235726;
   PARAMETER(PAR.MPR_Identification_Num);
   PARAMETER(PAR.MPR_Reporting_Date);
   PARAMETER(PAR.MPR_Reporting_Time);
   PARAMETER(PAR.MPR_Lot_Identification);
   PARAMETER(PAR.MPR_Pur_Ownership_Code);
   PARAMETER(PAR.MPR_Pur_Class_Code);
   PARAMETER(PAR.MPR_Pur_Purchase_Type);
   PARAMETER(PAR.MPR_Pur_Head);
   PARAMETER(PAR.MPR_Pur_Avg_Live_Wgt);
   PARAMETER(PAR.MPR_Pur_Base_Price);
   PARAMETER(PAR.MPR_Origin);
   PARAMETER(PAR.RS_User_Changed);
   PARAMETER(PAR.RS_Date_Changed);
   PARAMETER(PAR.RS_Time_Changed);
   PARAMETER(PAR.RS_Record_Status);
   PARAMETER(PAR.RS_Job);
   PARAMETER(PAR.RS_Program);
   PARAMETER(PAR.RS_User_Added);
   PARAMETER(PAR.RS_Date_Added);
   PARAMETER(PAR.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Add Stamp-Sys Dt  IF) TYPE(EXCINTFUN)                      AB1237005;
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?Execute internal function

     // PAR.RS Record Status = CND.Active
     PAR.RS_Record_Status = 'A';

     // PAR.RS User Added = JOB.*USER
     PAR.RS_User_Added = JOB.*USER;

     // Call program Rtv System Date & Tim UP.
     CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
     PARAMETER(PAR.RS_Date_Added);
     PARAMETER(PAR.RS_Time_Added);

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

    }

   }

   ENDIF;

   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Prior Day Purch   CH) TYPE(CHGOBJ) FILE(PKE7CPP)           AB1235727;
   PARAMETER(DB1.MPR_Identification_Num);
   PARAMETER(DB1.MPR_Reporting_Date);
   PARAMETER(DB1.MPR_Reporting_Time);
   PARAMETER(DB1.MPR_Lot_Identification);
   PARAMETER(PAR.MPR_Pur_Ownership_Code);
   PARAMETER(PAR.MPR_Pur_Class_Code);
   PARAMETER(PAR.MPR_Pur_Purchase_Type);
   PARAMETER(PAR.MPR_Pur_Head);
   PARAMETER(PAR.MPR_Pur_Avg_Live_Wgt);
   PARAMETER(PAR.MPR_Pur_Base_Price);
   PARAMETER(PAR.MPR_Origin);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // Call program Rtv System Date & Tim UP.
     CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
     PARAMETER(PAR.RS_Date_Changed);
     PARAMETER(PAR.RS_Time_Changed);

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

  CASE;

  // IF DB1.BOL MPR Prior Day Prch is Not Yes
  IF DB1.BOL_MPR_Prior_Day_Prch = *BLANK/'N';

  EXECUTE FUNCTION(Chg MPR PriorDayPurch CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1239197;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER('Y');
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // Call program Rtv System Date & Tim UP.
    CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
    PARAMETER(PAR.RS_Date_Changed);
    PARAMETER(PAR.RS_Time_Changed);

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  EXECUTE FUNCTION(Chg BOH MPR ReportDtT CH) TYPE(CHGOBJ) FILE(PKAWCPP)           AB1329119;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(PAR.MPR_Reporting_Date);
  PARAMETER(1);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  //?R7841 RMC 11.10.16 set to report Curr Day on LS119A,B, afternoon LS119A
  CASE;

  // IF PAR.Record Added Usr is No
  IF PAR.Record_Added_Usr = 'N';

  // PAR.Record Added Usr = CND.Yes
  PAR.Record_Added_Usr = 'Y';

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

 }

 ENDIF;

}


//?If Rerun -- records would have been created on 1st pass, so chg flag to Y
CASE;

// IF WRK.Record Added Usr is No
IF WRK.Record_Added_Usr = 'N';

EXECUTE FUNCTION(Rtv Record f/RptDay   RT) TYPE(RTVOBJ) FILE(PKE7CPP)           AB1239407;
PARAMETER(PAR.MPR_Identification_Num);
PARAMETER(PAR.MPR_Reporting_Date);
PARAMETER(PAR.MPR_Reporting_Time);
PARAMETER(WRK.Record_Added_Usr);
{
 //?USER: Process Data record

 // PAR.Record Added Usr = CND.Yes
 PAR.Record_Added_Usr = 'Y';

 QUIT;

}


ENDIF;

//?LS118C Created Y/N
CASE;

// IF WRK.Record Added Usr is No
IF WRK.Record_Added_Usr = 'N';

// AND PAR.MPR LS118C file created is Not Yes
AND PAR.MPR_LS118C_file_created = *BLANK/'N';

// PAR.MPR LS118C file created = CND.No
PAR.MPR_LS118C_file_created = 'N';

//?LS118C Created Y/N
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.MPR LS118C file created = CND.Yes
PAR.MPR_LS118C_file_created = 'Y';

ENDIF;

//?11/17/16 R7307 RMC "The morning 119A form needs to include the
//?the Estimate number of hogs for each purchase type that you believe that
//?you will be PRICING between 1:30pm and 1:30pm. Est s/be >=Actual"per usda
//?Based on the above from usda, use the kill dates being reported, not the
//?reporting date, so this is moved into the Repeat While killdate loop
//?05/20/19 S15008 RMC Add NEG only if ls118a report date = boh rpt date
//?06/03/19 S15008 RMC Upd BOH MPR EST STS when reported on estimate
EXECUTE FUNCTION(MPR Bld Estimtd f/Sch RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1238357;
PARAMETER(PAR.Company_Number_USR);
PARAMETER(PAR.Kill_Date_Usr);
PARAMETER(PAR.MPR_Identification_Num);
PARAMETER(PAR.MPR_Reporting_Date);
{
 //?USER: Process Data record

 //?R7841 chg from BOL Pln Head Delv TO TH Head Received
 CASE;

 // IF DB1.RS Record Status is Active
 IF DB1.RS_Record_Status = 'A';

 EXECUTE FUNCTION(Rtv Tattoo Market Hd  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1257803;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(LCL.Head_Total_USR);
 {
  //?USER: Initialize routine

  // PAR.Head Total USR = CON.*ZERO
  PAR.Head_Total_USR = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF DB1.TH Hog Class Type is Market
  IF DB1.TH_Hog_Class_Type = 'M';

  // PAR.Head Total USR = PAR.Head Total USR + DB1.TH Head Received
  PAR.Head_Total_USR = PAR.Head_Total_USR + DB1.TH_Head_Received;

  ENDIF;

 }

 //?R7805 11/04/16 RMC R7805 Use new BOH Purch Type
 EXECUTE FUNCTION(Rtv BOH Reporting Dt  RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1351682;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(LCL.BOH_MPR_Reporting_Date);
 PARAMETER(LCL.BOH_MPR_EST_RPT_STS);
 PARAMETER(LCL.BOH_MPR_Purchase_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.BOH MPR Purchase Type is *ALL values
 IF LCL.BOH_MPR_Purchase_Type = '01'/'02'/'03'/'04'/'05'/'06'/'07'/'08'/'09'/'10'/'11';

 // WRK.MPR Purchase Type = CVTVAR(LCL.BOH MPR Purchase Type)
 WRK.MPR_Purchase_Type = CVTVAR(LCL.BOH_MPR_Purchase_Type);

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV MPR Prdcr Purch TpRT) TYPE(RTVOBJ) FILE(PKE3CPP)           AB1235599;
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(WRK.MPR_Purchase_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 ENDIF;

 CASE;

 // IF WRK.MPR Purchase Type is Negotiated
 IF WRK.MPR_Purchase_Type = 1;

 //?Report negotiated on same day 118a is reported 5.20.19 - and not already
 CASE;

 // IF LCL.BOH MPR Reporting Date EQ PAR.MPR Reporting Date
 IF LCL.BOH_MPR_Reporting_Date = PAR.MPR_Reporting_Date;

 // AND LCL.BOH Status 2 is Not Yes
 AND LCL.BOH_MPR_EST_RPT_STS = *BLANK;

 // PAR.MPR Est Purch Type 1 Hd = PAR.MPR Est Purch Type 1 Hd + LCL.Head Total USR
 PAR.MPR_Est_Purch_Type_1_Hd = PAR.MPR_Est_Purch_Type_1_Hd + LCL.Head_Total_USR;

 ENDIF;

 // IF WRK.MPR Purchase Type is Oth Mkt Formula
 IF WRK.MPR_Purchase_Type = 2;

 // PAR.MPR Est Purch Type 2 Hd = PAR.MPR Est Purch Type 2 Hd + LCL.Head Total USR
 PAR.MPR_Est_Purch_Type_2_Hd = PAR.MPR_Est_Purch_Type_2_Hd + LCL.Head_Total_USR;

 // IF WRK.MPR Purchase Type is Pork Mkt Formula
 IF WRK.MPR_Purchase_Type = 3;

 // PAR.MPR Est Purch Type 3 Hd = PAR.MPR Est Purch Type 3 Hd + LCL.Head Total USR
 PAR.MPR_Est_Purch_Type_3_Hd = PAR.MPR_Est_Purch_Type_3_Hd + LCL.Head_Total_USR;

 // IF WRK.MPR Purchase Type is Oth Purchase Arng
 IF WRK.MPR_Purchase_Type = 4;

 // PAR.MPR Est Purch Type 4 Hd = PAR.MPR Est Purch Type 4 Hd + LCL.Head Total USR
 PAR.MPR_Est_Purch_Type_4_Hd = PAR.MPR_Est_Purch_Type_4_Hd + LCL.Head_Total_USR;

 // IF WRK.MPR Purchase Type is PckSld Negotiated
 IF WRK.MPR_Purchase_Type = 5;

 //?Report negotiated on same day 118a is reported 5.20.19
 CASE;

 // IF LCL.BOH MPR Reporting Date EQ PAR.MPR Reporting Date
 IF LCL.BOH_MPR_Reporting_Date = PAR.MPR_Reporting_Date;

 // AND LCL.BOH Status 2 is Not Yes
 AND LCL.BOH_MPR_EST_RPT_STS = *BLANK;

 // PAR.MPR Est Purch Type 5 Hd = PAR.MPR Est Purch Type 5 Hd + LCL.Head Total USR
 PAR.MPR_Est_Purch_Type_5_Hd = PAR.MPR_Est_Purch_Type_5_Hd + LCL.Head_Total_USR;

 ENDIF;

 // IF WRK.MPR Purchase Type is PckSld Oth Mkt Formula
 IF WRK.MPR_Purchase_Type = 6;

 // PAR.MPR Est Purch Type 6 Hd = PAR.MPR Est Purch Type 6 Hd + LCL.Head Total USR
 PAR.MPR_Est_Purch_Type_6_Hd = PAR.MPR_Est_Purch_Type_6_Hd + LCL.Head_Total_USR;

 // IF WRK.MPR Purchase Type is PckSld Pork Mkt Formula
 IF WRK.MPR_Purchase_Type = 7;

 // PAR.MPR Est Purch Type 7 Hd = PAR.MPR Est Purch Type 7 Hd + LCL.Head Total USR
 PAR.MPR_Est_Purch_Type_7_Hd = PAR.MPR_Est_Purch_Type_7_Hd + LCL.Head_Total_USR;

 // IF WRK.MPR Purchase Type is PckSld Oth Purchase Arng
 IF WRK.MPR_Purchase_Type = 8;

 // PAR.MPR Est Purch Type 8 Hd = PAR.MPR Est Purch Type 8 Hd + LCL.Head Total USR
 PAR.MPR_Est_Purch_Type_8_Hd = PAR.MPR_Est_Purch_Type_8_Hd + LCL.Head_Total_USR;

 // IF WRK.MPR Purchase Type is Other Neg Formula
 IF WRK.MPR_Purchase_Type = 10;

 // PAR.MPR Est Purch Type 10 Hd = PAR.MPR Est Purch Type 10 Hd + LCL.Head Total USR
 PAR.MPR_Est_Purch_Type_10_Hd = PAR.MPR_Est_Purch_Type_10_Hd + LCL.Head_Total_USR;

 // IF WRK.MPR Purchase Type is PckSld Neg Formula
 IF WRK.MPR_Purchase_Type = 11;

 // PAR.MPR Est Purch Type 11 Hd = PAR.MPR Est Purch Type 11 Hd + LCL.Head Total USR
 PAR.MPR_Est_Purch_Type_11_Hd = PAR.MPR_Est_Purch_Type_11_Hd + LCL.Head_Total_USR;

 ENDIF;

 EXECUTE FUNCTION(Rtv Crt/Chg Prior Dtl RT) TYPE(RTVOBJ) FILE(PKFHCPP)           AB1243291;
 PARAMETER(PAR.MPR_Identification_Num);
 PARAMETER(PAR.MPR_Reporting_Date);
 PARAMETER(1);
 PARAMETER(DB1.BOL_Kill_Date);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(LCL.Head_Total_USR);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt MPR Prior Day Sch CR) TYPE(CRTOBJ) FILE(PKFHCPP)           AB1243269;
  PARAMETER(PAR.MPR_Identification_Num);
  PARAMETER(PAR.MPR_Reporting_Date);
  PARAMETER(PAR.MPR_Reporting_Time);
  PARAMETER(PAR.BOL_Kill_Date);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.PL_Location_Code);
  PARAMETER(PAR.BOL_Pln_Head_Delv);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp-Sys Dt  IF) TYPE(EXCINTFUN)                      AB1237005;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // Call program Rtv System Date & Tim UP.
    CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
    PARAMETER(PAR.RS_Date_Added);
    PARAMETER(PAR.RS_Time_Added);

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Change MPR Prior Day Sche) TYPE(CHGOBJ) FILE(PKFHCPP)          AB1243270;
  PARAMETER(DB1.MPR_Identification_Num);
  PARAMETER(DB1.MPR_Reporting_Date);
  PARAMETER(DB1.MPR_Reporting_Time);
  PARAMETER(DB1.BOL_Kill_Date);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(DB1.PL_Location_Code);
  PARAMETER(PAR.BOL_Pln_Head_Delv);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // Call program Rtv System Date & Tim UP.
    CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
    PARAMETER(PAR.RS_Date_Changed);
    PARAMETER(PAR.RS_Time_Changed);

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 //?ADDED 6.3.19 RMC
 CASE;

 // IF LCL.BOH Status 2 is Not Yes
 IF LCL.BOH_MPR_EST_RPT_STS = *BLANK;

 EXECUTE FUNCTION(Chg BOH MPR Est Sts   CH) TYPE(CHGOBJ) FILE(PKAWCPP)           AB1351990;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER('Y');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

 ENDIF;

 //?USER: Exit processing

 //?E00315 12/19/08 Dont report Estimated Purch for 960 purch types 1,5
 //?  by checking Company Value MPRRPTEST
 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER('MPRRPTEST');
 PARAMETER(LCL.Status_1);

 CASE;

 // IF PAR.MPR Est Purch Type 1 Hd is ne Zero
 IF PAR.MPR_Est_Purch_Type_1_Hd <> 0;

 CASE;

 // IF LCL.Status 1 is Yes
 IF LCL.Status_1 = 'Y';

 EXECUTE FUNCTION(Rtv Upd Estmtd Purch  RT) TYPE(RTVOBJ) FILE(PKE4CPP)           AB1238358;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(PAR.MPR_Reporting_Date);
 PARAMETER(1);
 PARAMETER(PAR.MPR_Est_Purch_Type_1_Hd);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt MPR Estmtd Purch  CR) TYPE(CRTOBJ) FILE(PKE4CPP)           AB1235480;
  PARAMETER(PAR.CC_Company_Number);
  PARAMETER(PAR.MPR_Reporting_Date);
  PARAMETER(PAR.MPR_Purchase_Type_Code);
  PARAMETER(PAR.MPR_Estimated_Head);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Process Data record

  // LCL.MPR Estimated Head = DB1.MPR Estimated Head + PAR.MPR Estimated Head
  LCL.MPR_Estimated_Head = DB1.MPR_Estimated_Head + PAR.MPR_Estimated_Head;

  EXECUTE FUNCTION(Chg MPR Estmtd Purch  CH) TYPE(CHGOBJ) FILE(PKE4CPP)           AB1235481;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(DB1.MPR_Reporting_Date);
  PARAMETER(DB1.MPR_Purchase_Type_Code);
  PARAMETER(LCL.MPR_Estimated_Head);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.MPR Est Purch Type 2 Hd is ne Zero
 IF PAR.MPR_Est_Purch_Type_2_Hd <> 0;

 EXECUTE FUNCTION(Rtv Upd Estmtd Purch  RT) TYPE(RTVOBJ) FILE(PKE4CPP)           AB1238358;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(PAR.MPR_Reporting_Date);
 PARAMETER(2);
 PARAMETER(PAR.MPR_Est_Purch_Type_2_Hd);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt MPR Estmtd Purch  CR) TYPE(CRTOBJ) FILE(PKE4CPP)           AB1235480;
  PARAMETER(PAR.CC_Company_Number);
  PARAMETER(PAR.MPR_Reporting_Date);
  PARAMETER(PAR.MPR_Purchase_Type_Code);
  PARAMETER(PAR.MPR_Estimated_Head);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Process Data record

  // LCL.MPR Estimated Head = DB1.MPR Estimated Head + PAR.MPR Estimated Head
  LCL.MPR_Estimated_Head = DB1.MPR_Estimated_Head + PAR.MPR_Estimated_Head;

  EXECUTE FUNCTION(Chg MPR Estmtd Purch  CH) TYPE(CHGOBJ) FILE(PKE4CPP)           AB1235481;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(DB1.MPR_Reporting_Date);
  PARAMETER(DB1.MPR_Purchase_Type_Code);
  PARAMETER(LCL.MPR_Estimated_Head);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 CASE;

 // IF PAR.MPR Est Purch Type 3 Hd is ne Zero
 IF PAR.MPR_Est_Purch_Type_3_Hd <> 0;

 EXECUTE FUNCTION(Rtv Upd Estmtd Purch  RT) TYPE(RTVOBJ) FILE(PKE4CPP)           AB1238358;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(PAR.MPR_Reporting_Date);
 PARAMETER(3);
 PARAMETER(PAR.MPR_Est_Purch_Type_3_Hd);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt MPR Estmtd Purch  CR) TYPE(CRTOBJ) FILE(PKE4CPP)           AB1235480;
  PARAMETER(PAR.CC_Company_Number);
  PARAMETER(PAR.MPR_Reporting_Date);
  PARAMETER(PAR.MPR_Purchase_Type_Code);
  PARAMETER(PAR.MPR_Estimated_Head);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Process Data record

  // LCL.MPR Estimated Head = DB1.MPR Estimated Head + PAR.MPR Estimated Head
  LCL.MPR_Estimated_Head = DB1.MPR_Estimated_Head + PAR.MPR_Estimated_Head;

  EXECUTE FUNCTION(Chg MPR Estmtd Purch  CH) TYPE(CHGOBJ) FILE(PKE4CPP)           AB1235481;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(DB1.MPR_Reporting_Date);
  PARAMETER(DB1.MPR_Purchase_Type_Code);
  PARAMETER(LCL.MPR_Estimated_Head);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 CASE;

 // IF PAR.MPR Est Purch Type 4 Hd is ne Zero
 IF PAR.MPR_Est_Purch_Type_4_Hd <> 0;

 EXECUTE FUNCTION(Rtv Upd Estmtd Purch  RT) TYPE(RTVOBJ) FILE(PKE4CPP)           AB1238358;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(PAR.MPR_Reporting_Date);
 PARAMETER(4);
 PARAMETER(PAR.MPR_Est_Purch_Type_4_Hd);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt MPR Estmtd Purch  CR) TYPE(CRTOBJ) FILE(PKE4CPP)           AB1235480;
  PARAMETER(PAR.CC_Company_Number);
  PARAMETER(PAR.MPR_Reporting_Date);
  PARAMETER(PAR.MPR_Purchase_Type_Code);
  PARAMETER(PAR.MPR_Estimated_Head);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Process Data record

  // LCL.MPR Estimated Head = DB1.MPR Estimated Head + PAR.MPR Estimated Head
  LCL.MPR_Estimated_Head = DB1.MPR_Estimated_Head + PAR.MPR_Estimated_Head;

  EXECUTE FUNCTION(Chg MPR Estmtd Purch  CH) TYPE(CHGOBJ) FILE(PKE4CPP)           AB1235481;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(DB1.MPR_Reporting_Date);
  PARAMETER(DB1.MPR_Purchase_Type_Code);
  PARAMETER(LCL.MPR_Estimated_Head);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 CASE;

 // IF PAR.MPR Est Purch Type 5 Hd is ne Zero
 IF PAR.MPR_Est_Purch_Type_5_Hd <> 0;

 CASE;

 // IF LCL.Status 1 is Yes
 IF LCL.Status_1 = 'Y';

 EXECUTE FUNCTION(Rtv Upd Estmtd Purch  RT) TYPE(RTVOBJ) FILE(PKE4CPP)           AB1238358;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(PAR.MPR_Reporting_Date);
 PARAMETER(5);
 PARAMETER(PAR.MPR_Est_Purch_Type_5_Hd);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt MPR Estmtd Purch  CR) TYPE(CRTOBJ) FILE(PKE4CPP)           AB1235480;
  PARAMETER(PAR.CC_Company_Number);
  PARAMETER(PAR.MPR_Reporting_Date);
  PARAMETER(PAR.MPR_Purchase_Type_Code);
  PARAMETER(PAR.MPR_Estimated_Head);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Process Data record

  // LCL.MPR Estimated Head = DB1.MPR Estimated Head + PAR.MPR Estimated Head
  LCL.MPR_Estimated_Head = DB1.MPR_Estimated_Head + PAR.MPR_Estimated_Head;

  EXECUTE FUNCTION(Chg MPR Estmtd Purch  CH) TYPE(CHGOBJ) FILE(PKE4CPP)           AB1235481;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(DB1.MPR_Reporting_Date);
  PARAMETER(DB1.MPR_Purchase_Type_Code);
  PARAMETER(LCL.MPR_Estimated_Head);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.MPR Est Purch Type 6 Hd is ne Zero
 IF PAR.MPR_Est_Purch_Type_6_Hd <> 0;

 EXECUTE FUNCTION(Rtv Upd Estmtd Purch  RT) TYPE(RTVOBJ) FILE(PKE4CPP)           AB1238358;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(PAR.MPR_Reporting_Date);
 PARAMETER(6);
 PARAMETER(PAR.MPR_Est_Purch_Type_6_Hd);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt MPR Estmtd Purch  CR) TYPE(CRTOBJ) FILE(PKE4CPP)           AB1235480;
  PARAMETER(PAR.CC_Company_Number);
  PARAMETER(PAR.MPR_Reporting_Date);
  PARAMETER(PAR.MPR_Purchase_Type_Code);
  PARAMETER(PAR.MPR_Estimated_Head);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Process Data record

  // LCL.MPR Estimated Head = DB1.MPR Estimated Head + PAR.MPR Estimated Head
  LCL.MPR_Estimated_Head = DB1.MPR_Estimated_Head + PAR.MPR_Estimated_Head;

  EXECUTE FUNCTION(Chg MPR Estmtd Purch  CH) TYPE(CHGOBJ) FILE(PKE4CPP)           AB1235481;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(DB1.MPR_Reporting_Date);
  PARAMETER(DB1.MPR_Purchase_Type_Code);
  PARAMETER(LCL.MPR_Estimated_Head);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 CASE;

 // IF PAR.MPR Est Purch Type 7 Hd is ne Zero
 IF PAR.MPR_Est_Purch_Type_7_Hd <> 0;

 EXECUTE FUNCTION(Rtv Upd Estmtd Purch  RT) TYPE(RTVOBJ) FILE(PKE4CPP)           AB1238358;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(PAR.MPR_Reporting_Date);
 PARAMETER(7);
 PARAMETER(PAR.MPR_Est_Purch_Type_7_Hd);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt MPR Estmtd Purch  CR) TYPE(CRTOBJ) FILE(PKE4CPP)           AB1235480;
  PARAMETER(PAR.CC_Company_Number);
  PARAMETER(PAR.MPR_Reporting_Date);
  PARAMETER(PAR.MPR_Purchase_Type_Code);
  PARAMETER(PAR.MPR_Estimated_Head);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Process Data record

  // LCL.MPR Estimated Head = DB1.MPR Estimated Head + PAR.MPR Estimated Head
  LCL.MPR_Estimated_Head = DB1.MPR_Estimated_Head + PAR.MPR_Estimated_Head;

  EXECUTE FUNCTION(Chg MPR Estmtd Purch  CH) TYPE(CHGOBJ) FILE(PKE4CPP)           AB1235481;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(DB1.MPR_Reporting_Date);
  PARAMETER(DB1.MPR_Purchase_Type_Code);
  PARAMETER(LCL.MPR_Estimated_Head);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 CASE;

 // IF PAR.MPR Est Purch Type 8 Hd is ne Zero
 IF PAR.MPR_Est_Purch_Type_8_Hd <> 0;

 EXECUTE FUNCTION(Rtv Upd Estmtd Purch  RT) TYPE(RTVOBJ) FILE(PKE4CPP)           AB1238358;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(PAR.MPR_Reporting_Date);
 PARAMETER(8);
 PARAMETER(PAR.MPR_Est_Purch_Type_8_Hd);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt MPR Estmtd Purch  CR) TYPE(CRTOBJ) FILE(PKE4CPP)           AB1235480;
  PARAMETER(PAR.CC_Company_Number);
  PARAMETER(PAR.MPR_Reporting_Date);
  PARAMETER(PAR.MPR_Purchase_Type_Code);
  PARAMETER(PAR.MPR_Estimated_Head);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Process Data record

  // LCL.MPR Estimated Head = DB1.MPR Estimated Head + PAR.MPR Estimated Head
  LCL.MPR_Estimated_Head = DB1.MPR_Estimated_Head + PAR.MPR_Estimated_Head;

  EXECUTE FUNCTION(Chg MPR Estmtd Purch  CH) TYPE(CHGOBJ) FILE(PKE4CPP)           AB1235481;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(DB1.MPR_Reporting_Date);
  PARAMETER(DB1.MPR_Purchase_Type_Code);
  PARAMETER(LCL.MPR_Estimated_Head);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 CASE;

 // IF PAR.MPR Est Purch Type 10 Hd is ne Zero
 IF PAR.MPR_Est_Purch_Type_10_Hd <> 0;

 EXECUTE FUNCTION(Rtv Upd Estmtd Purch  RT) TYPE(RTVOBJ) FILE(PKE4CPP)           AB1238358;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(PAR.MPR_Reporting_Date);
 PARAMETER(10);
 PARAMETER(PAR.MPR_Est_Purch_Type_10_Hd);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt MPR Estmtd Purch  CR) TYPE(CRTOBJ) FILE(PKE4CPP)           AB1235480;
  PARAMETER(PAR.CC_Company_Number);
  PARAMETER(PAR.MPR_Reporting_Date);
  PARAMETER(PAR.MPR_Purchase_Type_Code);
  PARAMETER(PAR.MPR_Estimated_Head);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Process Data record

  // LCL.MPR Estimated Head = DB1.MPR Estimated Head + PAR.MPR Estimated Head
  LCL.MPR_Estimated_Head = DB1.MPR_Estimated_Head + PAR.MPR_Estimated_Head;

  EXECUTE FUNCTION(Chg MPR Estmtd Purch  CH) TYPE(CHGOBJ) FILE(PKE4CPP)           AB1235481;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(DB1.MPR_Reporting_Date);
  PARAMETER(DB1.MPR_Purchase_Type_Code);
  PARAMETER(LCL.MPR_Estimated_Head);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 CASE;

 // IF PAR.MPR Est Purch Type 11 Hd is ne Zero
 IF PAR.MPR_Est_Purch_Type_11_Hd <> 0;

 EXECUTE FUNCTION(Rtv Upd Estmtd Purch  RT) TYPE(RTVOBJ) FILE(PKE4CPP)           AB1238358;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(PAR.MPR_Reporting_Date);
 PARAMETER(11);
 PARAMETER(PAR.MPR_Est_Purch_Type_11_Hd);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt MPR Estmtd Purch  CR) TYPE(CRTOBJ) FILE(PKE4CPP)           AB1235480;
  PARAMETER(PAR.CC_Company_Number);
  PARAMETER(PAR.MPR_Reporting_Date);
  PARAMETER(PAR.MPR_Purchase_Type_Code);
  PARAMETER(PAR.MPR_Estimated_Head);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Process Data record

  // LCL.MPR Estimated Head = DB1.MPR Estimated Head + PAR.MPR Estimated Head
  LCL.MPR_Estimated_Head = DB1.MPR_Estimated_Head + PAR.MPR_Estimated_Head;

  EXECUTE FUNCTION(Chg MPR Estmtd Purch  CH) TYPE(CHGOBJ) FILE(PKE4CPP)           AB1235481;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(DB1.MPR_Reporting_Date);
  PARAMETER(DB1.MPR_Purchase_Type_Code);
  PARAMETER(LCL.MPR_Estimated_Head);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

}


//?* Increment the Date by 1 *
// PAR.Kill Date Usr = PAR.Kill Date Usr + CON.1 *DAYS
PAR.Kill_Date_Usr = DATEINCR(PAR.Kill_Date_Usr 1 'DY' 1111111 'NONE' 'N' 1);

ENDDO;

//?RMC T15265 7/29/19 Update Last Kill date reported in MPR control file
// Call program Exc MPR Ctl-Upd aft   XF.
CALL PROGRAM(Exc MPR Ctl-Upd aft   XF) ('PWJLXFR');
PARAMETER(PAR.Company_Number_USR);
PARAMETER(PAR.Last_Kill_Date_Rptd_USR);

//?***** Build File A: MPR Prior Day Scheduled   *****
//?DOC:  Scheduled Swine   LS118A
DO;

//?Process the Buy Order Load by Kill Date for each Calendar
//?day after the Last Kill Date Reported for 14 days.  After
//?processing the 14th day, create a record.
//?1)  Both Internal and External Producers are included.
//?2)  If the Reporting Date is Monday and the Last Kill Date
//?    Reported is Friday, then Day 1 will start with Saturday.
//?3)  If the Reporting Date is Monday and the Last Kill Date
//?    Reported is Saturday, then Day 1 will start with Sunday.
//?Head Count (1-14 days):  SUM(BOL Pln Head Delv) for the day
//?                         being processed.
//?3/18/02  If Sat/Fri last reported kill, start with Monday.
//? So exclude Sat/Sunday when setting up 1st kill date here.
//?12/09/02  Bld Prior Day Sched with BOL access path keyed on Delv Date
//?          instead of Kill date.        (LS118A)
//?01/28/03 PKD Only add 1 to Last Kill Date Reported if it's Sat
//?             or Sunday.  The Last Kill Date Reported has already
//?             been updated in the Slaughter processing.
//?03/18/03 PKD If Sat/Fri last reported kill, start with Monday.
//?             So exclude Sat/Sunday when setting up 1st kill date here.
//?07/01/03 PKD Day 1 should be Reporting Date according to Jancie & Mel.
ENDDO;

//?- Commented out 07/01/03 -
// PAR.Kill Date Usr = PAR.MPR Reporting Date
PAR.Kill_Date_Usr = PAR.MPR_Reporting_Date;

//?--------------------------
// LCL.Count USR = CON.1
LCL.Count_USR = 1;

// DOW LCL.Count USR is LE 14
DOW LCL.Count_USR <= 14;

EXECUTE FUNCTION(MPR Bld Prior Day Sch RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1235848;
PARAMETER(PAR.Company_Number_USR);
PARAMETER(PAR.Kill_Date_Usr);
PARAMETER(LCL.Planned_Kill_USR);
PARAMETER(PAR.MPR_Identification_Num);
PARAMETER(PAR.MPR_Reporting_Date);
PARAMETER(PAR.MPR_Reporting_Time);
{
 //?USER: Initialize routine

 // PAR.Planned Kill USR = CON.*ZERO
 PAR.Planned_Kill_USR = *ZERO;

 //?USER: Process Data record

 // PAR.Planned Kill USR = PAR.Planned Kill USR + DB1.BOL Pln Head Delv
 PAR.Planned_Kill_USR = PAR.Planned_Kill_USR + DB1.BOL_Pln_Head_Delv;

 EXECUTE FUNCTION(Rtv Crt/Chg Prior Dtl RT) TYPE(RTVOBJ) FILE(PKFHCPP)           AB1243291;
 PARAMETER(PAR.MPR_Identification_Num);
 PARAMETER(PAR.MPR_Reporting_Date);
 PARAMETER(PAR.MPR_Reporting_Time);
 PARAMETER(DB1.BOL_Pln_Delv_Date);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.BOL_Pln_Head_Delv);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt MPR Prior Day Sch CR) TYPE(CRTOBJ) FILE(PKFHCPP)           AB1243269;
  PARAMETER(PAR.MPR_Identification_Num);
  PARAMETER(PAR.MPR_Reporting_Date);
  PARAMETER(PAR.MPR_Reporting_Time);
  PARAMETER(PAR.BOL_Kill_Date);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.PL_Location_Code);
  PARAMETER(PAR.BOL_Pln_Head_Delv);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp-Sys Dt  IF) TYPE(EXCINTFUN)                      AB1237005;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // Call program Rtv System Date & Tim UP.
    CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
    PARAMETER(PAR.RS_Date_Added);
    PARAMETER(PAR.RS_Time_Added);

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Change MPR Prior Day Sche) TYPE(CHGOBJ) FILE(PKFHCPP)          AB1243270;
  PARAMETER(DB1.MPR_Identification_Num);
  PARAMETER(DB1.MPR_Reporting_Date);
  PARAMETER(DB1.MPR_Reporting_Time);
  PARAMETER(DB1.BOL_Kill_Date);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(DB1.PL_Location_Code);
  PARAMETER(PAR.BOL_Pln_Head_Delv);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // Call program Rtv System Date & Tim UP.
    CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
    PARAMETER(PAR.RS_Date_Changed);
    PARAMETER(PAR.RS_Time_Changed);

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

}


//?Move Planned Kill to appropriate Day
CASE;

// IF LCL.Count USR is One
IF LCL.Count_USR = 1;

// PAR.MPR Sch Head Day 1 = LCL.Planned Kill USR
PAR.MPR_Sch_Head_Day_1 = LCL.Planned_Kill_USR;

//?Move Planned Kill to appropriate Day
// IF LCL.Count USR is Two
IF LCL.Count_USR = 2;

// PAR.MPR Sch Head Day 2 = LCL.Planned Kill USR
PAR.MPR_Sch_Head_Day_2 = LCL.Planned_Kill_USR;

//?Move Planned Kill to appropriate Day
// IF LCL.Count USR is Three
IF LCL.Count_USR = 3;

// PAR.MPR Sch Head Day 3 = LCL.Planned Kill USR
PAR.MPR_Sch_Head_Day_3 = LCL.Planned_Kill_USR;

//?Move Planned Kill to appropriate Day
// IF LCL.Count USR is Four
IF LCL.Count_USR = 4;

// PAR.MPR Sch Head Day 4 = LCL.Planned Kill USR
PAR.MPR_Sch_Head_Day_4 = LCL.Planned_Kill_USR;

//?Move Planned Kill to appropriate Day
// IF LCL.Count USR is Five
IF LCL.Count_USR = 5;

// PAR.MPR Sch Head Day 5 = LCL.Planned Kill USR
PAR.MPR_Sch_Head_Day_5 = LCL.Planned_Kill_USR;

//?Move Planned Kill to appropriate Day
// IF LCL.Count USR is Six
IF LCL.Count_USR = 6;

// PAR.MPR Sch Head Day 6 = LCL.Planned Kill USR
PAR.MPR_Sch_Head_Day_6 = LCL.Planned_Kill_USR;

//?Move Planned Kill to appropriate Day
// IF LCL.Count USR is Seven
IF LCL.Count_USR = 7;

// PAR.MPR Sch Head Day 7 = LCL.Planned Kill USR
PAR.MPR_Sch_Head_Day_7 = LCL.Planned_Kill_USR;

//?Move Planned Kill to appropriate Day
// IF LCL.Count USR is Eight
IF LCL.Count_USR = 8;

// PAR.MPR Sch Head Day 8 = LCL.Planned Kill USR
PAR.MPR_Sch_Head_Day_8 = LCL.Planned_Kill_USR;

//?Move Planned Kill to appropriate Day
// IF LCL.Count USR is Nine
IF LCL.Count_USR = 9;

// PAR.MPR Sch Head Day 9 = LCL.Planned Kill USR
PAR.MPR_Sch_Head_Day_9 = LCL.Planned_Kill_USR;

//?Move Planned Kill to appropriate Day
// IF LCL.Count USR is Ten
IF LCL.Count_USR = 10;

// PAR.MPR Sch Head Day 10 = LCL.Planned Kill USR
PAR.MPR_Sch_Head_Day_10 = LCL.Planned_Kill_USR;

//?Move Planned Kill to appropriate Day
// IF LCL.Count USR is Eleven
IF LCL.Count_USR = 11;

// PAR.MPR Sch Head Day 11 = LCL.Planned Kill USR
PAR.MPR_Sch_Head_Day_11 = LCL.Planned_Kill_USR;

//?Move Planned Kill to appropriate Day
// IF LCL.Count USR is Twelve
IF LCL.Count_USR = 12;

// PAR.MPR Sch Head Day 12 = LCL.Planned Kill USR
PAR.MPR_Sch_Head_Day_12 = LCL.Planned_Kill_USR;

//?Move Planned Kill to appropriate Day
// IF LCL.Count USR is Thirteen
IF LCL.Count_USR = 13;

// PAR.MPR Sch Head Day 13 = LCL.Planned Kill USR
PAR.MPR_Sch_Head_Day_13 = LCL.Planned_Kill_USR;

//?Move Planned Kill to appropriate Day
// IF LCL.Count USR is Fourteen
IF LCL.Count_USR = 14;

// PAR.MPR Sch Head Day 14 = LCL.Planned Kill USR
PAR.MPR_Sch_Head_Day_14 = LCL.Planned_Kill_USR;

ENDIF;

// PAR.Kill Date Usr = PAR.Kill Date Usr + CON.1 *DAYS
PAR.Kill_Date_Usr = DATEINCR(PAR.Kill_Date_Usr 1 'DY' 1111111 'NONE' 'N' 1);

// LCL.Count USR = LCL.Count USR + CON.1
LCL.Count_USR = LCL.Count_USR + 1;

ENDDO;

EXECUTE FUNCTION(Upd Prior Day Sched   RT) TYPE(RTVOBJ) FILE(PKE5CPP)           AB1235855;
PARAMETER(PAR.MPR_Identification_Num);
PARAMETER(PAR.MPR_Reporting_Date);
PARAMETER(PAR.MPR_Reporting_Time);
PARAMETER(PAR.MPR_Sch_Head_Day_1);
PARAMETER(PAR.MPR_Sch_Head_Day_2);
PARAMETER(PAR.MPR_Sch_Head_Day_3);
PARAMETER(PAR.MPR_Sch_Head_Day_4);
PARAMETER(PAR.MPR_Sch_Head_Day_5);
PARAMETER(PAR.MPR_Sch_Head_Day_6);
PARAMETER(PAR.MPR_Sch_Head_Day_7);
PARAMETER(PAR.MPR_Sch_Head_Day_8);
PARAMETER(PAR.MPR_Sch_Head_Day_9);
PARAMETER(PAR.MPR_Sch_Head_Day_10);
PARAMETER(PAR.MPR_Sch_Head_Day_11);
PARAMETER(PAR.MPR_Sch_Head_Day_12);
PARAMETER(PAR.MPR_Sch_Head_Day_13);
PARAMETER(PAR.MPR_Sch_Head_Day_14);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(Crt Prior Day Sched   CR) TYPE(CRTOBJ) FILE(PKE5CPP)           AB1235729;
 PARAMETER(PAR.MPR_Identification_Num);
 PARAMETER(PAR.MPR_Reporting_Date);
 PARAMETER(PAR.MPR_Reporting_Time);
 PARAMETER(PAR.MPR_Sch_Head_Day_1);
 PARAMETER(PAR.MPR_Sch_Head_Day_2);
 PARAMETER(PAR.MPR_Sch_Head_Day_3);
 PARAMETER(PAR.MPR_Sch_Head_Day_4);
 PARAMETER(PAR.MPR_Sch_Head_Day_5);
 PARAMETER(PAR.MPR_Sch_Head_Day_6);
 PARAMETER(PAR.MPR_Sch_Head_Day_7);
 PARAMETER(PAR.MPR_Sch_Head_Day_8);
 PARAMETER(PAR.MPR_Sch_Head_Day_9);
 PARAMETER(PAR.MPR_Sch_Head_Day_10);
 PARAMETER(PAR.MPR_Sch_Head_Day_11);
 PARAMETER(PAR.MPR_Sch_Head_Day_12);
 PARAMETER(PAR.MPR_Sch_Head_Day_13);
 PARAMETER(PAR.MPR_Sch_Head_Day_14);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp-Sys Dt  IF) TYPE(EXCINTFUN)                      AB1237005;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // Call program Rtv System Date & Tim UP.
   CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
   PARAMETER(PAR.RS_Date_Added);
   PARAMETER(PAR.RS_Time_Added);

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Prior Day Sched   CH) TYPE(CHGOBJ) FILE(PKE5CPP)           AB1235730;
 PARAMETER(DB1.MPR_Identification_Num);
 PARAMETER(DB1.MPR_Reporting_Date);
 PARAMETER(DB1.MPR_Reporting_Time);
 PARAMETER(PAR.MPR_Sch_Head_Day_1);
 PARAMETER(PAR.MPR_Sch_Head_Day_2);
 PARAMETER(PAR.MPR_Sch_Head_Day_3);
 PARAMETER(PAR.MPR_Sch_Head_Day_4);
 PARAMETER(PAR.MPR_Sch_Head_Day_5);
 PARAMETER(PAR.MPR_Sch_Head_Day_6);
 PARAMETER(PAR.MPR_Sch_Head_Day_7);
 PARAMETER(PAR.MPR_Sch_Head_Day_8);
 PARAMETER(PAR.MPR_Sch_Head_Day_9);
 PARAMETER(PAR.MPR_Sch_Head_Day_10);
 PARAMETER(PAR.MPR_Sch_Head_Day_11);
 PARAMETER(PAR.MPR_Sch_Head_Day_12);
 PARAMETER(PAR.MPR_Sch_Head_Day_13);
 PARAMETER(PAR.MPR_Sch_Head_Day_14);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // Call program Rtv System Date & Tim UP.
   CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
   PARAMETER(PAR.RS_Date_Changed);
   PARAMETER(PAR.RS_Time_Changed);

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


//?***** Build File LS119A: MPR Daily Purchase Summary Estimated fields ****
//?This happens every morning. Jancie can maintain it throughout the day.
//?12/09/02 Create detail here too, with reporting time=1
//?12/19/08 E00315 RMC dont report est purch for purch type 1,5 for 960
//?09/23/16 R7307 RMC New purch types
//?11/17/16 R7307 RMC "The morning 119A form needs to include the
//?the Estimate number of hogs for each purchase type that you believe that
//?you will be PRICING between 1:30pm and 1:30pm. Est s/be >=Actual"per usda
//?Based on the above from usda, use the kill dates being reported, not the
//?reporting date, so this is moved into the Repeat While killdate loop
//?Continue processing if Invalid Y/N is No.
// IF *OTHERWISE
IF *OTHERWISE;

//?* Set Reporting Day Status to No                               *
// PAR.MPR Day Sts USR = CND.No
PAR.MPR_Day_Sts_USR = 'N';

ENDIF;

