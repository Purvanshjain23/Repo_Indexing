// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKFTXFR
// ?Date: 14.08.2025 Time: 02:51:35
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modification History
DO;

EXECUTE FUNCTION(HPE025) TYPE(EXCINTFUN)                                        AB1187109;
{
 //?Execute internal function

 //?This project is to allow reporting of yards/held over after
 //?sent to kill has been already been reported
 //?Special Notes:
 //?Also correction to Held Over in reporting of Shipped Weight
 //?on the next days kill.
 //?Fixes were to correct the dollars spreading of $'s and Weight
 //?and freight in relationship to the correct record
 //?Also correct the create of deduction and additions on the reporting
 //?of the subject tattoo, to use new routine.
}


EXECUTE FUNCTION(HPE063 Frt Exp/Accruals) TYPE(EXCINTFUN)                       AB1192166;
{
 //?Execute internal function

 //?2/26/96  HPE063   Allow the expense for freight to be paid
 //?                  by either Seaboard(us) or the producer
 //?                  Allow the system to process accruals thru
 //?                  the General Ledger.
}


//?2/26/2008 slm the process code on the tattoo detail was being
//?change to open.  change to not update this field
//?H16853 ISE 11/02/20 - Increased the Buy Order Number field
//?  length from 5 to 7.
ENDDO;

//?Routine to read the tattoo detail wrk and update the tattoo detail
EXECUTE FUNCTION(Rtv/Chg TTDW/CHG TTD2 RT) TYPE(RTVOBJ) FILE(PKDRCPP)           AB1284870;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.Kill_Date_2_USR);
PARAMETER(PAR.Held_Over_Records_Y_N);
{
 //?USER: Initialize routine

 //?MODIFICATION HISTORY
 DO;

 //?FUNCTION - READ THE TATTOO DETAIL WRK FILE
 //?BECAUSE THERE WERE CHANGES, UPDATE THE TATTOO DETAIL
 EXECUTE FUNCTION(HPE025NEW) TYPE(EXCINTFUN)                                     AB1187401;
 {
  //?Execute internal function

  //?Modification/changes History
  //?12/01/96   New routine
 }

 ENDDO;

 //?USER: Process Data record

 //?Change all tattoo details, and zero out next rec lv and pd hd
 //?totals together
 //?H16749 use the system date instead of the job date
 //?Change the Tattoo detail and the next tattoo detail
 DO;

 //?Update Current Record
 // WRK.TD Live Wgt = DB1.TDWC Pen Head * DB1.TDW Avg Live Wgt *
 WRK.TD_Live_Wgt = DB1.TDWC_Pen_Head * DB1.TDW_Avg_Live_Wgt;

 CASE;

 // IF DB1.TDWC Held Over is greater than 0
 IF DB1.TDWC_Held_Over > *ZERO;

 // WRK.TD Held Over Status = CND.Ready-Hld Over Processing
 WRK.TD_Held_Over_Status = 'Y';

 // IF DB1.TDW Held Over is greater than 0
 IF DB1.TDW_Held_Over > *ZERO;

 // WRK.TD Held Over Status = CND.Ready-Hld Over Processing
 WRK.TD_Held_Over_Status = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.TD Held Over Status = CND.Blank
 WRK.TD_Held_Over_Status = *BLANK;

 ENDIF;

 CASE;

 // IF WRK.TD Held Over Status is Ready-Hld Over Processing
 IF WRK.TD_Held_Over_Status = 'Y';

 //?H16749 slm 08/20/2020 use the system date instead of the job date
 EXECUTE FUNCTION(Chg TDtl Aft SntKil2Sydch) TYPE(CHGOBJ) FILE(PKA2CPP)          AB1284869;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TDW_Sequence_Number);
 PARAMETER(WRK.TD_Live_Wgt);
 PARAMETER(DB1.TDWC_Pen_Head);
 PARAMETER(DB1.TDWC_Yard_Dead);
 PARAMETER(DB1.TDWC_Held_Over);
 PARAMETER(WRK.TD_Held_Over_Status);
 PARAMETER(DB1.TDW_Avg_Live_Wgt);
 PARAMETER(DB1.TDW_Gen_Bal_to_Kill);
 PARAMETER(DB1.TDW_User_Status_1);
 PARAMETER(DB1.TDW_User_Status_2);
 PARAMETER(WRK.TD_User_Status_3);
 PARAMETER(DB1.TDW_User_Date_1);
 PARAMETER(DB1.TDW_User_Date_2);
 PARAMETER(DB1.Org_Pen_Company);
 PARAMETER(DB1.Org_Pen_Number);
 PARAMETER(DB1.Change_Pen_Co_Number);
 PARAMETER(DB1.Change_Pen_Number);
 {
  //?USER: Processing after Data read

  //?H16749 SLM 8/20/2020 use the system date instead of the job date
  EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // Call program Rtv System Date & Tim UP.
   CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
   PARAMETER(PAR.RS_Date_Changed);
   PARAMETER(PAR.RS_Time_Changed);

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?H16749 slm 08/20/2020 use the system date instead of the job date
 EXECUTE FUNCTION(Chg TDtl Aft SntKil2Sydch) TYPE(CHGOBJ) FILE(PKA2CPP)          AB1284869;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TDW_Sequence_Number);
 PARAMETER(WRK.TD_Live_Wgt);
 PARAMETER(DB1.TDWC_Pen_Head);
 PARAMETER(DB1.TDWC_Yard_Dead);
 PARAMETER(DB1.TDWC_Held_Over);
 PARAMETER(WRK.TD_Held_Over_Status);
 PARAMETER(DB1.TDW_Avg_Live_Wgt);
 PARAMETER(DB1.TDW_Gen_Bal_to_Kill);
 PARAMETER(DB1.TDW_User_Status_1);
 PARAMETER(DB1.TDW_User_Status_2);
 PARAMETER(WRK.TD_User_Status_3);
 PARAMETER(DB1.TDW_User_Date_1);
 PARAMETER(DB1.TDW_User_Date_2);
 PARAMETER(DB1.Org_Pen_Company);
 PARAMETER(DB1.Org_Pen_Number);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 {
  //?USER: Processing after Data read

  //?H16749 SLM 8/20/2020 use the system date instead of the job date
  EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // Call program Rtv System Date & Tim UP.
   CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
   PARAMETER(PAR.RS_Date_Changed);
   PARAMETER(PAR.RS_Time_Changed);

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

 CASE;

 // IF DB1.TDWC Next Record Kill Dte NE WRK.Zero USR
 IF DB1.TDWC_Next_Record_Kill_Dte <> WRK.Zero_USR;

 //?H16749 slm 08/20/2020 use the system date instead of the job date
 EXECUTE FUNCTION(Chg TDtl A/SntKilNR SydCH) TYPE(CHGOBJ) FILE(PKA2CPP)          AB1186398;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TDWC_Next_Record_Kill_Dte);
 PARAMETER(DB1.TDW_Sequence_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.Change_Pen_Co_Number);
 PARAMETER(DB1.Change_Pen_Number);
 {
  //?USER: Processing after Data read

  //?H163749 SLM 8/18/2020
  //?change from jobdate to system date
  EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // Call program Rtv System Date & Tim UP.
   CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
   PARAMETER(PAR.RS_Date_Changed);
   PARAMETER(PAR.RS_Time_Changed);

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

 ENDDO;

}


//?Routine to read the tattoo detail wrk and accumulate the tattoo hdr
//?add all totals to the header, and zero out the next day
//?Then the split routing
EXECUTE FUNCTION(Rtv/Chg TTDW Aft Snt  RT) TYPE(RTVOBJ) FILE(PKDRCPP)           AB1186396;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.Kill_Date_2_USR);
PARAMETER(PAR.Held_Over_Records_Y_N);
{
 //?USER: Initialize routine

 //?MODIFICATION HISTORY
 DO;

 //?NEW FUNCTION - HPEO25
 //?Fuction - Read the tattoo detail wrk file
 //?because there were changes, add the Tattoo Header together
 //?zero out the next kill date
 //?add the tattoo d/a together and zero out the next kill tattoo d/a
 EXECUTE FUNCTION(HPE025) TYPE(EXCINTFUN)                                        AB1187109;
 {
  //?Execute internal function

  //?This project is to allow reporting of yards/held over after
  //?sent to kill has been already been reported
  //?Special Notes:
  //?Also correction to Held Over in reporting of Shipped Weight
  //?on the next days kill.
  //?Fixes were to correct the dollars spreading of $'s and Weight
  //?and freight in relationship to the correct record
  //?Also correct the create of deduction and additions on the reporting
  //?of the subject tattoo, to use new routine.
 }

 EXECUTE FUNCTION(HPE063 Frt Exp/Accruals) TYPE(EXCINTFUN)                       AB1192166;
 {
  //?Execute internal function

  //?2/26/96  HPE063   Allow the expense for freight to be paid
  //?                  by either Seaboard(us) or the producer
  //?                  Allow the system to process accruals thru
  //?                  the General Ledger.
 }

 ENDDO;

 // WRK.First Time Flag Usr = CND.Yes
 WRK.First_Time_Flag_Usr = 'Y';

 //?USER: Process Data record

 // Call program Rtv Nxt Kill Dt 2 OMS XF.
 CALL PROGRAM(Rtv Nxt Kill Dt 2 OMS XF) ('PDUXXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.Next_Kill_Date);

 CASE;

 // IF WRK.First Time Flag Usr is Yes
 IF WRK.First_Time_Flag_Usr = 'Y';

 //?Count the total yard deads and the total held over for the tattoo
 //?header
 // WRK.TH Yard Deads = CON.*ZERO
 WRK.TH_Yard_Deads = *ZERO;

 // WRK.TH Held Over = CON.*ZERO
 WRK.TH_Held_Over = *ZERO;

 // WRK.First Time Flag Usr = CND.No
 WRK.First_Time_Flag_Usr = 'N';

 //?The follow routine will update or create the Tattoo headers
 //?If this record is held over then add the tattoo hdr/tattoo d/a/zero next
 CASE;

 // IF DB1.TDWC Held Over Status is Ready-Hld Over Processing
 IF DB1.TDWC_Held_Over_Status = 'Y';

 //?This fun will accumulate the tattoo postion by date to eof
 EXECUTE FUNCTION(RTV Tattoo Totals Add RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1182669;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.TH_Purchase_Date);
 PARAMETER(WRK.TH_Live_Purchase_UOM);
 PARAMETER(WRK.TH_Live_Purchase_Price);
 PARAMETER(WRK.TH_Live_Gross_Amt);
 PARAMETER(WRK.TH_LIve_Net_Amt);
 PARAMETER(WRK.TH_Dead_On_Arrival);
 PARAMETER(WRK.TH_Head_Received);
 PARAMETER(WRK.TH_Yard_Deads);
 PARAMETER(WRK.TH_Held_Over);
 PARAMETER(WRK.TH_Head_Condemned);
 PARAMETER(WRK.TH_Head_Killed);
 PARAMETER(WRK.TH_Live_Wgt);
 PARAMETER(WRK.TH_Avg_Live_Wgt);
 PARAMETER(WRK.TH_Deduction_Amt);
 PARAMETER(WRK.TH_Total_Net_WO_Adds);
 PARAMETER(WRK.TH_Carcass_Net_Amt);
 PARAMETER(WRK.TH_Additions_Amt);
 PARAMETER(WRK.TH_Payment_Gross);
 PARAMETER(WRK.Th_Payment_Net_Amt);
 PARAMETER(WRK.TH_AP_Voucher_Document#);
 PARAMETER(WRK.TH_Freight_Amount);
 PARAMETER(WRK.TH_Accrual_Amount);
 PARAMETER(WRK.TH_Voucher_Payment_Date);
 PARAMETER(WRK.TH_Shipped_Weight);
 PARAMETER(WRK.PD_Producer_Code);
 PARAMETER(WRK.PL_Location_Code);
 PARAMETER(WRK.Kill_Date_1_Usr);
 PARAMETER(WRK.Kill_Date_2_USR);
 PARAMETER(WRK.Kill_Date_3_Usr);
 {
  //?USER: Initialize routine

  //?MODIFICATION HISTORY
  DO;

  //?Purpose: Accumulate the tattoo header dollars and wgt, and totals
  //?that will be placed on the orginal tattoo header
  EXECUTE FUNCTION(HPE025) TYPE(EXCINTFUN)                                        AB1187109;
  {
   //?Execute internal function

   //?This project is to allow reporting of yards/held over after
   //?sent to kill has been already been reported
   //?Special Notes:
   //?Also correction to Held Over in reporting of Shipped Weight
   //?on the next days kill.
   //?Fixes were to correct the dollars spreading of $'s and Weight
   //?and freight in relationship to the correct record
   //?Also correct the create of deduction and additions on the reporting
   //?of the subject tattoo, to use new routine.
  }

  EXECUTE FUNCTION(HPE063 Frt Exp/Accruals) TYPE(EXCINTFUN)                       AB1192166;
  {
   //?Execute internal function

   //?2/26/96  HPE063   Allow the expense for freight to be paid
   //?                  by either Seaboard(us) or the producer
   //?                  Allow the system to process accruals thru
   //?                  the General Ledger.
  }

  ENDDO;

  //?Set Par add fields to zero
  DO;

  // PAR.Kill Date 1 Usr = CON.*ZERO
  PAR.Kill_Date_1_Usr = *ZERO;

  // PAR.Kill Date 2 USR = CON.*ZERO
  PAR.Kill_Date_2_USR = *ZERO;

  // PAR.Kill Date 3 Usr = CON.*ZERO
  PAR.Kill_Date_3_Usr = *ZERO;

  // PAR.TH Purchase Date = WRK.Zero USR
  PAR.TH_Purchase_Date = WRK.Zero_USR;

  // PAR.TH Live Gross Amt = WRK.Zero USR
  PAR.TH_Live_Gross_Amt = WRK.Zero_USR;

  // PAR.TH LIve Net Amt = WRK.Zero USR
  PAR.TH_LIve_Net_Amt = WRK.Zero_USR;

  // PAR.TH Dead On Arrival = WRK.Zero USR
  PAR.TH_Dead_On_Arrival = WRK.Zero_USR;

  // PAR.TH Head Received = WRK.Zero USR
  PAR.TH_Head_Received = WRK.Zero_USR;

  // PAR.TH Yard Deads = WRK.Zero USR
  PAR.TH_Yard_Deads = WRK.Zero_USR;

  // PAR.TH Held Over = WRK.Zero USR
  PAR.TH_Held_Over = WRK.Zero_USR;

  // PAR.TH Head Condemned = WRK.Zero USR
  PAR.TH_Head_Condemned = WRK.Zero_USR;

  // PAR.TH Live Wgt = WRK.Zero USR
  PAR.TH_Live_Wgt = WRK.Zero_USR;

  // PAR.TH Avg Live Wgt = WRK.Zero USR
  PAR.TH_Avg_Live_Wgt = WRK.Zero_USR;

  // PAR.TH Deduction Amt = WRK.Zero USR
  PAR.TH_Deduction_Amt = WRK.Zero_USR;

  // PAR.TH Head Received = WRK.Zero USR
  PAR.TH_Head_Received = WRK.Zero_USR;

  // PAR.TH Yard Deads = WRK.Zero USR
  PAR.TH_Yard_Deads = WRK.Zero_USR;

  // PAR.TH Deduction Amt = WRK.Zero USR
  PAR.TH_Deduction_Amt = WRK.Zero_USR;

  // PAR.TH Total Net WO Adds = WRK.Zero USR
  PAR.TH_Total_Net_WO_Adds = WRK.Zero_USR;

  // PAR.TH Carcass Net Amt = WRK.Zero USR
  PAR.TH_Carcass_Net_Amt = WRK.Zero_USR;

  // PAR.TH Additions Amt = WRK.Zero USR
  PAR.TH_Additions_Amt = WRK.Zero_USR;

  // PAR.TH Payment Gross = WRK.Zero USR
  PAR.TH_Payment_Gross = WRK.Zero_USR;

  // PAR.Th Payment Net Amt = WRK.Zero USR
  PAR.Th_Payment_Net_Amt = WRK.Zero_USR;

  // PAR.TH Freight Amount = WRK.Zero USR
  PAR.TH_Freight_Amount = WRK.Zero_USR;

  // PAR.TH Accrual Amount = WRK.Zero USR
  PAR.TH_Accrual_Amount = WRK.Zero_USR;

  // PAR.TH Shipped Weight = WRK.Zero USR
  PAR.TH_Shipped_Weight = WRK.Zero_USR;

  // PAR.PD Producer Code = CON.*BLANK
  PAR.PD_Producer_Code = *BLANK;

  // PAR.PL Location Code = CON.*BLANK
  PAR.PL_Location_Code = *BLANK;

  ENDDO;

  //?USER: Process Data record

  //?Load kill dates
  CASE;

  // IF PAR.Kill Date 1 Usr EQ WRK.Zero USR
  IF PAR.Kill_Date_1_Usr = WRK.Zero_USR;

  // PAR.Kill Date 1 Usr = DB1.TH Kill Date
  PAR.Kill_Date_1_Usr = DB1.TH_Kill_Date;

  //?Load kill dates
  // IF PAR.Kill Date 2 USR EQ WRK.Zero USR
  IF PAR.Kill_Date_2_USR = WRK.Zero_USR;

  // PAR.Kill Date 2 USR = DB1.TH Kill Date
  PAR.Kill_Date_2_USR = DB1.TH_Kill_Date;

  //?Load kill dates
  // IF PAR.Kill Date 3 Usr EQ WRK.Zero USR
  IF PAR.Kill_Date_3_Usr = WRK.Zero_USR;

  // PAR.Kill Date 3 Usr = DB1.TH Kill Date
  PAR.Kill_Date_3_Usr = DB1.TH_Kill_Date;

  ENDIF;

  CASE;

  // IF PAR.Kill Date 3 Usr is Not Found Kill Date
  IF PAR.Kill_Date_3_Usr = *ZERO;

  //?accumulate detail or move detail
  DO;

  // PAR.TH Purchase Date = DB1.TH Purchase Date
  PAR.TH_Purchase_Date = DB1.TH_Purchase_Date;

  // PAR.TH Live Gross Amt = PAR.TH Live Gross Amt + DB1.TH Live Gross Amt
  PAR.TH_Live_Gross_Amt = PAR.TH_Live_Gross_Amt + DB1.TH_Live_Gross_Amt;

  // PAR.TH LIve Net Amt = PAR.TH LIve Net Amt + DB1.TH LIve Net Amt
  PAR.TH_LIve_Net_Amt = PAR.TH_LIve_Net_Amt + DB1.TH_LIve_Net_Amt;

  // PAR.TH Dead On Arrival = PAR.TH Dead On Arrival + DB1.TH Dead On Arrival
  PAR.TH_Dead_On_Arrival = PAR.TH_Dead_On_Arrival + DB1.TH_Dead_On_Arrival;

  // PAR.TH Head Received = PAR.TH Head Received + DB1.TH Head Received
  PAR.TH_Head_Received = PAR.TH_Head_Received + DB1.TH_Head_Received;

  // PAR.TH Yard Deads = PAR.TH Yard Deads + DB1.TH Yard Deads
  PAR.TH_Yard_Deads = PAR.TH_Yard_Deads + DB1.TH_Yard_Deads;

  // PAR.TH Held Over = PAR.TH Held Over + DB1.TH Held Over
  PAR.TH_Held_Over = PAR.TH_Held_Over + DB1.TH_Held_Over;

  // PAR.TH Head Condemned = PAR.TH Head Condemned + DB1.TH Head Condemned
  PAR.TH_Head_Condemned = PAR.TH_Head_Condemned + DB1.TH_Head_Condemned;

  // PAR.TH Live Wgt = PAR.TH Live Wgt + DB1.TH Live Wgt
  PAR.TH_Live_Wgt = PAR.TH_Live_Wgt + DB1.TH_Live_Wgt;

  // PAR.TH Avg Live Wgt = DB1.TH Avg Live Wgt
  PAR.TH_Avg_Live_Wgt = DB1.TH_Avg_Live_Wgt;

  // PAR.TH Deduction Amt = PAR.TH Deduction Amt + DB1.TH Deduction Amt
  PAR.TH_Deduction_Amt = PAR.TH_Deduction_Amt + DB1.TH_Deduction_Amt;

  // PAR.TH Total Net WO Adds = PAR.TH Total Net WO Adds + DB1.TH Total Net WO Adds
  PAR.TH_Total_Net_WO_Adds = PAR.TH_Total_Net_WO_Adds + DB1.TH_Total_Net_WO_Adds;

  // PAR.TH Carcass Net Amt = PAR.TH Carcass Net Amt + DB1.TH Carcass Net Amt
  PAR.TH_Carcass_Net_Amt = PAR.TH_Carcass_Net_Amt + DB1.TH_Carcass_Net_Amt;

  // PAR.TH Additions Amt = PAR.TH Additions Amt + DB1.TH Additions Amt
  PAR.TH_Additions_Amt = PAR.TH_Additions_Amt + DB1.TH_Additions_Amt;

  // PAR.TH Payment Gross = PAR.TH Payment Gross + DB1.TH Payment Gross
  PAR.TH_Payment_Gross = PAR.TH_Payment_Gross + DB1.TH_Payment_Gross;

  // PAR.Th Payment Net Amt = PAR.Th Payment Net Amt + DB1.Th Payment Net Amt
  PAR.Th_Payment_Net_Amt = PAR.Th_Payment_Net_Amt + DB1.Th_Payment_Net_Amt;

  // PAR.TH Freight Amount = PAR.TH Freight Amount + DB1.TH Freight Amount
  PAR.TH_Freight_Amount = PAR.TH_Freight_Amount + DB1.TH_Freight_Amount;

  // PAR.TH Shipped Weight = PAR.TH Shipped Weight + DB1.TH Shipped Weight
  PAR.TH_Shipped_Weight = PAR.TH_Shipped_Weight + DB1.TH_Shipped_Weight;

  // PAR.TH Accrual Amount = PAR.TH Accrual Amount + DB1.TH Accrual Amount
  PAR.TH_Accrual_Amount = PAR.TH_Accrual_Amount + DB1.TH_Accrual_Amount;

  // PAR.TH AP Voucher/Document# = DB1.TH AP Voucher/Document#
  PAR.TH_AP_Voucher_Document# = DB1.TH_AP_Voucher_Document#;

  // PAR.TH Voucher Payment Date = DB1.TH Voucher Payment Date
  PAR.TH_Voucher_Payment_Date = DB1.TH_Voucher_Payment_Date;

  // PAR.PD Producer Code = DB1.PD Producer Code
  PAR.PD_Producer_Code = DB1.PD_Producer_Code;

  // PAR.PL Location Code = DB1.PL Location Code
  PAR.PL_Location_Code = DB1.PL_Location_Code;

  ENDDO;

  ENDIF;

 }

 //?This tattoo header should be update will the totals for both days
 EXECUTE FUNCTION(Crt TTO HDR Add/AfKil RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1186468;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.TH_Purchase_Date);
 PARAMETER(WRK.TH_Live_Gross_Amt);
 PARAMETER(WRK.TH_LIve_Net_Amt);
 PARAMETER(WRK.TH_Head_Received);
 PARAMETER(WRK.TH_Live_Wgt);
 PARAMETER(WRK.TH_Avg_Live_Wgt);
 PARAMETER(WRK.TH_Deduction_Amt);
 PARAMETER(WRK.TH_Total_Net_WO_Adds);
 PARAMETER(WRK.TH_Additions_Amt);
 PARAMETER(WRK.TH_Payment_Gross);
 PARAMETER(WRK.Th_Payment_Net_Amt);
 PARAMETER(WRK.TH_Freight_Amount);
 PARAMETER(WRK.TH_Accrual_Amount);
 PARAMETER(WRK.TH_Shipped_Weight);
 PARAMETER(WRK.Kill_Date_2_USR);
 {
  //?USER: Initialize routine

  //?Modification History
  DO;

  //?Purpose
  //?This routine will update the fields accumulate to add
  //?back into the Org tattoo detail
  EXECUTE FUNCTION(HPE025) TYPE(EXCINTFUN)                                        AB1187109;
  {
   //?Execute internal function

   //?This project is to allow reporting of yards/held over after
   //?sent to kill has been already been reported
   //?Special Notes:
   //?Also correction to Held Over in reporting of Shipped Weight
   //?on the next days kill.
   //?Fixes were to correct the dollars spreading of $'s and Weight
   //?and freight in relationship to the correct record
   //?Also correct the create of deduction and additions on the reporting
   //?of the subject tattoo, to use new routine.
  }

  ENDDO;

  //?USER: Process Data record

  // WRK.TH Live Gross Amt = PAR.TH Live Gross Amt
  WRK.TH_Live_Gross_Amt = PAR.TH_Live_Gross_Amt;

  // WRK.TH LIve Net Amt = PAR.TH LIve Net Amt
  WRK.TH_LIve_Net_Amt = PAR.TH_LIve_Net_Amt;

  // WRK.TH Head Received = PAR.TH Head Received
  WRK.TH_Head_Received = PAR.TH_Head_Received;

  // WRK.TH Live Wgt = PAR.TH Live Wgt
  WRK.TH_Live_Wgt = PAR.TH_Live_Wgt;

  // WRK.TH Deduction Amt = PAR.TH Deduction Amt
  WRK.TH_Deduction_Amt = PAR.TH_Deduction_Amt;

  // WRK.TH Total Net WO Adds = PAR.TH Total Net WO Adds
  WRK.TH_Total_Net_WO_Adds = PAR.TH_Total_Net_WO_Adds;

  // WRK.TH Additions Amt = PAR.TH Additions Amt
  WRK.TH_Additions_Amt = PAR.TH_Additions_Amt;

  // WRK.TH Payment Gross = PAR.TH Payment Gross
  WRK.TH_Payment_Gross = PAR.TH_Payment_Gross;

  // WRK.Th Payment Net Amt = PAR.Th Payment Net Amt
  WRK.Th_Payment_Net_Amt = PAR.Th_Payment_Net_Amt;

  // WRK.TH Freight Amount = PAR.TH Freight Amount
  WRK.TH_Freight_Amount = PAR.TH_Freight_Amount;

  // WRK.TH Shipped Weight = PAR.TH Shipped Weight
  WRK.TH_Shipped_Weight = PAR.TH_Shipped_Weight;

  // WRK.TH Accrual Amount = PAR.TH Accrual Amount
  WRK.TH_Accrual_Amount = PAR.TH_Accrual_Amount;

  EXECUTE FUNCTION(Crt Tto Hdr Add/Afkil CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1190800;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.TH_Purchase_Date);
  PARAMETER(DB1.TH_Group_Reference);
  PARAMETER(DB1.TH_Live_Purchase_UOM);
  PARAMETER(DB1.TH_Live_Purchase_Price);
  PARAMETER(WRK.TH_Live_Gross_Amt);
  PARAMETER(WRK.TH_LIve_Net_Amt);
  PARAMETER(DB1.TH_Resale_UOM);
  PARAMETER(DB1.TH_Recalc_Live_Wgt_Yld);
  PARAMETER(DB1.TH_Pricing_Date);
  PARAMETER(DB1.TH_Resale_Spread_Sts);
  PARAMETER(WRK.TH_Head_Received);
  PARAMETER(WRK.TH_Live_Wgt);
  PARAMETER(DB1.TH_Adj_Live_Wgt);
  PARAMETER(WRK.TH_Deduction_Amt);
  PARAMETER(WRK.TH_Additions_Amt);
  PARAMETER(WRK.TH_Payment_Gross);
  PARAMETER(WRK.Th_Payment_Net_Amt);
  PARAMETER(DB1.TH_AP_Voucher_Document#);
  PARAMETER(WRK.TH_Freight_Amount);
  PARAMETER(WRK.TH_Accrual_Amount);
  PARAMETER(DB1.TH_Voucher_Payment_Date);
  PARAMETER(WRK.TH_Shipped_Weight);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  //?Read the Tattoo ded/add by key but for next kill date
  //?then delete record and add back to orginal record
  EXECUTE FUNCTION(Rtv/Chg Tttoo D/A  ADD RT) TYPE(RTVOBJ) FILE(PKCDCPP)          AB1187289;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(PAR.Kill_Date_2_USR);
  PARAMETER(DB1.TH_Kill_Date);
  {
   //?USER: Initialize routine

   //?Modification History
   DO;

   //?Read next kill date and add to last kill date then delete the
   //?next kill date tattoo d/a that are not dead transactions
   EXECUTE FUNCTION(HPE025) TYPE(EXCINTFUN)                                        AB1187109;
   {
    //?Execute internal function

    //?This project is to allow reporting of yards/held over after
    //?sent to kill has been already been reported
    //?Special Notes:
    //?Also correction to Held Over in reporting of Shipped Weight
    //?on the next days kill.
    //?Fixes were to correct the dollars spreading of $'s and Weight
    //?and freight in relationship to the correct record
    //?Also correct the create of deduction and additions on the reporting
    //?of the subject tattoo, to use new routine.
   }

   ENDDO;

   //?USER: Process Data record

   //?Read D/As except those with a Dead Head UOM
   CASE;

   // IF DB1.THD UOM is Dead Head UOM
   IF DB1.THD_UOM = 'CH'/'DH'/'DY'/'YH'/'KH';

   //?Read D/As except those with a Dead Head UOM
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.THD Ded/Add Amount = WRK.THD Ded/Add Amount
   WRK.THD_Ded_Add_Amount = WRK.THD_Ded_Add_Amount;

   EXECUTE FUNCTION(Change Tattoo Deduction) TYPE(CHGOBJ) FILE(PKCDCPP)            AB1107818;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(DB1.DED_D_A_Code);
   PARAMETER(DB1.THD_Unit_Amt);
   PARAMETER(*ZERO);
   PARAMETER(DB1.THD_Unit_Amt_Sign);
   PARAMETER(DB1.THD_UOM);
   PARAMETER(DB1.THD_Transaction_Created);
   PARAMETER(DB1.THD_GL_Code);
   PARAMETER(DB1.THD_Contra_Gl_Code);
   PARAMETER(DB1.THD_Re_imbursement_Head);
   PARAMETER(DB1.THD_Payment_Sts);
   PARAMETER(DB1.THD_Expense_Paid_by);
   PARAMETER(DB1.THD_Expense_Type);
   PARAMETER(DB1.THD_Reserve_Account_Upd);
   PARAMETER(DB1.THD_Commission_Deduction);
   PARAMETER(DB1.THD_Deferred_Payment);
   PARAMETER(DB1.THD_Status_4);
   PARAMETER(DB1.THD_Status_5);
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

   EXECUTE FUNCTION(Chg Add to Exists Ded) TYPE(CHGOBJ) FILE(PKCDCPP)              AB1187292;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(PAR.Kill_Date_1_Usr);
   PARAMETER(DB1.DED_D_A_Code);
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(WRK.THD_Ded_Add_Amount);
   {
    //?USER: Processing before Data read

    //?Modification History
    DO;

    //?Purpose:  Add the amount of the transaction to tattoo d/a
    EXECUTE FUNCTION(HPE025) TYPE(EXCINTFUN)                                        AB1187109;
    {
     //?Execute internal function

     //?This project is to allow reporting of yards/held over after
     //?sent to kill has been already been reported
     //?Special Notes:
     //?Also correction to Held Over in reporting of Shipped Weight
     //?on the next days kill.
     //?Fixes were to correct the dollars spreading of $'s and Weight
     //?and freight in relationship to the correct record
     //?Also correct the create of deduction and additions on the reporting
     //?of the subject tattoo, to use new routine.
    }

    ENDDO;

    //?USER: Processing after Data read

    // PAR.THD Ded/Add Amount = DB1.THD Ded/Add Amount + PAR.Trans Extended Amt Usr
    PAR.THD_Ded_Add_Amount = DB1.THD_Ded_Add_Amount + PAR.Trans_Extended_Amt_Usr;

    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

   ENDIF;

  }

 }

 //?Update the yard deads and held over in first record only
 EXECUTE FUNCTION(Rtv TTD Tot Yard/Hld  RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1187277;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.TH_Yard_Deads);
 PARAMETER(WRK.TH_Held_Over);
 {
  //?USER: Initialize routine

  // PAR.TD Yard Dead = CON.*ZERO
  PAR.TD_Yard_Dead = *ZERO;

  // PAR.TD Held Over = CON.*ZERO
  PAR.TD_Held_Over = *ZERO;

  //?USER: Process Data record

  // PAR.TD Yard Dead = PAR.TD Yard Dead + DB1.TD Yard Dead
  PAR.TD_Yard_Dead = PAR.TD_Yard_Dead + DB1.TD_Yard_Dead;

  // PAR.TD Held Over = PAR.TD Held Over + DB1.TD Held Over
  PAR.TD_Held_Over = PAR.TD_Held_Over + DB1.TD_Held_Over;

 }

 EXECUTE FUNCTION(Chg Yard/Held Amount  CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1187278;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.TH_Yard_Deads);
 PARAMETER(WRK.TH_Held_Over);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 //?This tattoo header totals should be zero out IF THERE IS A NEXT
 CASE;

 // IF PAR.Kill Date 2 USR NE WRK.Zero USR
 IF PAR.Kill_Date_2_USR <> WRK.Zero_USR;

 EXECUTE FUNCTION(Chg TTO HDR Zero/Afkil RT) TYPE(RTVOBJ) FILE(PKA1CPP)          AB1187288;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(WRK.Next_Kill_Date);
 PARAMETER(WRK.TH_Purchase_Date);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(WRK.TH_AP_Voucher_Document#);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg TTO HDR Zero/Afkil CH) TYPE(CHGOBJ) FILE(PKA1CPP)          AB1190801;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.TH_Purchase_Date);
  PARAMETER(DB1.TH_Group_Reference);
  PARAMETER(DB1.TH_Live_Purchase_UOM);
  PARAMETER(DB1.TH_Live_Purchase_Price);
  PARAMETER(PAR.TH_Live_Gross_Amt);
  PARAMETER(PAR.TH_LIve_Net_Amt);
  PARAMETER(DB1.TH_Resale_UOM);
  PARAMETER(DB1.TH_Recalc_Live_Wgt_Yld);
  PARAMETER(DB1.TH_Pricing_Date);
  PARAMETER(DB1.TH_Resale_Spread_Sts);
  PARAMETER(PAR.TH_Head_Received);
  PARAMETER(PAR.TH_Live_Wgt);
  PARAMETER(DB1.TH_Adj_Live_Wgt);
  PARAMETER(PAR.TH_Deduction_Amt);
  PARAMETER(PAR.TH_Additions_Amt);
  PARAMETER(PAR.TH_Payment_Gross);
  PARAMETER(PAR.Th_Payment_Net_Amt);
  PARAMETER(DB1.TH_AP_Voucher_Document#);
  PARAMETER(PAR.TH_Freight_Amount);
  PARAMETER(DB1.TH_Voucher_Payment_Date);
  PARAMETER(PAR.TH_Shipped_Weight);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 EXECUTE FUNCTION(Rtv TTD Tot Yard/Hld  RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1187277;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(WRK.Next_Kill_Date);
 PARAMETER(WRK.TH_Yard_Deads);
 PARAMETER(WRK.TH_Held_Over);
 {
  //?USER: Initialize routine

  // PAR.TD Yard Dead = CON.*ZERO
  PAR.TD_Yard_Dead = *ZERO;

  // PAR.TD Held Over = CON.*ZERO
  PAR.TD_Held_Over = *ZERO;

  //?USER: Process Data record

  // PAR.TD Yard Dead = PAR.TD Yard Dead + DB1.TD Yard Dead
  PAR.TD_Yard_Dead = PAR.TD_Yard_Dead + DB1.TD_Yard_Dead;

  // PAR.TD Held Over = PAR.TD Held Over + DB1.TD Held Over
  PAR.TD_Held_Over = PAR.TD_Held_Over + DB1.TD_Held_Over;

 }

 EXECUTE FUNCTION(Chg Yard/Held Amount  CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1187278;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(WRK.Next_Kill_Date);
 PARAMETER(WRK.TH_Yard_Deads);
 PARAMETER(WRK.TH_Held_Over);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

 //?If this record is held over then add the tattoo hdr/tattoo d/a/zero next
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Update the yard deads and held over in first record only
 EXECUTE FUNCTION(Rtv TTD Tot Yard/Hld  RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1187277;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.TH_Yard_Deads);
 PARAMETER(WRK.TH_Held_Over);
 {
  //?USER: Initialize routine

  // PAR.TD Yard Dead = CON.*ZERO
  PAR.TD_Yard_Dead = *ZERO;

  // PAR.TD Held Over = CON.*ZERO
  PAR.TD_Held_Over = *ZERO;

  //?USER: Process Data record

  // PAR.TD Yard Dead = PAR.TD Yard Dead + DB1.TD Yard Dead
  PAR.TD_Yard_Dead = PAR.TD_Yard_Dead + DB1.TD_Yard_Dead;

  // PAR.TD Held Over = PAR.TD Held Over + DB1.TD Held Over
  PAR.TD_Held_Over = PAR.TD_Held_Over + DB1.TD_Held_Over;

 }

 EXECUTE FUNCTION(Chg Yard/Held Amount  CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1187278;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.TH_Yard_Deads);
 PARAMETER(WRK.TH_Held_Over);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

 ENDIF;

 //?Now split out the tattoo detail, tattoo header
 //?This routine will now read the tattoo detail and split the
 //?tattoo header
 //?Sent to kill processing Yard Deads, and Held Overs
 DO;

 EXECUTE FUNCTION(Rtv/Chg TttDtl Kill/Af RT) TYPE(RTVOBJ) FILE(PKA2CPP)          AB1186412;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TDW_Sequence_Number);
 PARAMETER(WRK.Next_Kill_Date);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.TDP Process Code is Driven to Kill/Resold
  IF DB1.TDP_Process_Code = 'K';

  //?Only the sent to kill records could have been changed
  //?   after these hogs were sent to kill
  // WRK.Td Pen Head Org Usr = DB1.TD Pen Head
  WRK.Td_Pen_Head_Org_Usr = DB1.TD_Pen_Head;

  // WRK.td Pen Head Wgt Org Usr = DB1.TD Live Wgt
  WRK.td_Pen_Head_Wgt_Org_Usr = DB1.TD_Live_Wgt;

  // WRK.TD Live Wgt = CON.*ZERO
  WRK.TD_Live_Wgt = *ZERO;

  // WRK.Head Held Over Usr = CON.*ZERO
  WRK.Head_Held_Over_Usr = *ZERO;

  //?Held Over Processing
  CASE;

  // IF DB1.TD Held Over Status is Ready-Hld Over Processing
  IF DB1.TD_Held_Over_Status = 'Y';

  //?Take care of the tattoo detail
  //?  HEAD REC - YARD DEADS, HELD OVER = NET HEAD
  DO;

  // WRK.Net Head Usr = DB1.TD Pen Head - DB1.TD Yard Dead
  WRK.Net_Head_Usr = DB1.TD_Pen_Head - DB1.TD_Yard_Dead;

  // WRK.Net Head Usr = WRK.Net Head Usr - DB1.TD Held Over
  WRK.Net_Head_Usr = WRK.Net_Head_Usr - DB1.TD_Held_Over;

  ENDDO;

  // WRK.TD Held Over Status = CND.Blank
  WRK.TD_Held_Over_Status = *BLANK;

  //?Pen Head/Held Over Head
  CASE;

  // IF DB1.TD Pen Head EQ DB1.TD Held Over
  IF DB1.TD_Pen_Head = DB1.TD_Held_Over;

  //?Held over all of tattoo detail
  // WRK.TD Pen Head = DB1.TD Held Over
  WRK.TD_Pen_Head = DB1.TD_Held_Over;

  // WRK.TD Live Wgt = DB1.TD Live Wgt
  WRK.TD_Live_Wgt = DB1.TD_Live_Wgt;

  //?Pen Head/Held Over Head
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Held over only paritial  new record
  // WRK.TD Pen Head = DB1.TD Held Over
  WRK.TD_Pen_Head = DB1.TD_Held_Over;

  // WRK.TD Live Wgt = DB1.TD Held Over * DB1.TD Avg Live Wgt *
  WRK.TD_Live_Wgt = DB1.TD_Held_Over * DB1.TD_Avg_Live_Wgt;

  ENDIF;

  // WRK.Date USR = DB1.TH Kill Date
  WRK.Date_USR = DB1.TH_Kill_Date;

  // WRK.Yard Dead             USR = DB1.TD Yard Dead
  WRK.Yard_Dead_USR = DB1.TD_Yard_Dead;

  // WRK.Head Held Over Usr = WRK.TD Pen Head
  WRK.Head_Held_Over_Usr = WRK.TD_Pen_Head;

  // WRK.Held Over Pen Co      USR = DB1.Pen Company Number
  WRK.Held_Over_Pen_Co_USR = DB1.Pen_Company_Number;

  // WRK.Held Over Pen Nbr     USR = DB1.Held Over Pen Number
  WRK.Held_Over_Pen_Nbr_USR = DB1.Held_Over_Pen_Number;

  // WRK.Next Kill Date = PAR.Kill Date 2 USR
  WRK.Next_Kill_Date = PAR.Kill_Date_2_USR;

  //?Create Tattoo dtl with same tattoo, held over pen & head, nxt kill dt
  //? and recalc live wgt
  // Call program Crt/Chg TttDtl Kill/Af XF.
  CALL PROGRAM(Crt/Chg TttDtl Kill/Af XF) ('PLLOXFR');
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(WRK.Next_Kill_Date);
  PARAMETER(DB1.TD_Sequence_Number);
  PARAMETER(WRK.TD_Live_Wgt);
  PARAMETER(WRK.TD_Pen_Head);
  PARAMETER(DB1.TD_Avg_Live_Wgt);
  PARAMETER(DB1.TD_Gen_Bal_To_Kill);
  PARAMETER(DB1.TD_Recs_Created_for_HO);
  PARAMETER(DB1.TD_User_Status_2);
  PARAMETER(DB1.TD_User_Status_3);
  PARAMETER(DB1.TD_User_Date_1);
  PARAMETER(DB1.TD_User_Date_2);
  PARAMETER(WRK.Held_Over_Pen_Co_USR);
  PARAMETER(WRK.Held_Over_Pen_Nbr_USR);

  //?Tattoo hdr:  Reduce hd rcvd by the held over head & recalc live wgt
  //?Create Tattoo hdr with same tattoo, held over head, nxt kill dt
  //? and recalc live wgt
  //?This routine will split the information into the tattoo hdr
  //?for the held over record and change the org record
  //?Or if you want to call this the split routine.
  //?This routine will split out the tattoo headers, and
  //?  the tattoo ded/add
  // Call program Rtv/Chg Split Tto Rcd XF.
  CALL PROGRAM(Rtv/Chg Split Tto Rcd XF) ('PKFAXFR');
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(WRK.Date_USR);
  PARAMETER(WRK.Head_Held_Over_Usr);
  PARAMETER(WRK.Next_Kill_Date);

  //?Held Over Processing
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Date USR = DB1.TH Kill Date
  WRK.Date_USR = DB1.TH_Kill_Date;

  // WRK.Yard Dead             USR = DB1.TD Yard Dead
  WRK.Yard_Dead_USR = DB1.TD_Yard_Dead;

  // WRK.Held Over Pen Co      USR = DB1.Held Over Pen Company Num
  WRK.Held_Over_Pen_Co_USR = DB1.Held_Over_Pen_Company_Num;

  // WRK.Held Over Pen Nbr     USR = DB1.Held Over Pen Number
  WRK.Held_Over_Pen_Nbr_USR = DB1.Held_Over_Pen_Number;

  // WRK.TD Pen Head = DB1.TD Pen Head
  WRK.TD_Pen_Head = DB1.TD_Pen_Head;

  // WRK.TD Held Over Status = DB1.TD Held Over Status
  WRK.TD_Held_Over_Status = DB1.TD_Held_Over_Status;

  ENDIF;

  //?remainder
  // WRK.TD Live Wgt = WRK.td Pen Head Wgt Org Usr - WRK.TD Live Wgt
  WRK.TD_Live_Wgt = WRK.td_Pen_Head_Wgt_Org_Usr - WRK.TD_Live_Wgt;

  // WRK.TD Pen Head = WRK.Td Pen Head Org Usr - WRK.Head Held Over Usr
  WRK.TD_Pen_Head = WRK.Td_Pen_Head_Org_Usr - WRK.Head_Held_Over_Usr;

  //?H16749 SLM 8/21/2020 use system date instead of job date
  EXECUTE FUNCTION(Chg Tattoo Detail   SydCH) TYPE(CHGOBJ) FILE(PKA2CPP)          AB1353953;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(WRK.Date_USR);
  PARAMETER(PAR.TD_Sequence_Number);
  PARAMETER(WRK.TD_Live_Wgt);
  PARAMETER(WRK.TD_Pen_Head);
  PARAMETER(WRK.Yard_Dead_USR);
  PARAMETER(WRK.Head_Held_Over_Usr);
  PARAMETER(WRK.TD_Held_Over_Status);
  PARAMETER(DB1.TD_Drive_Time);
  PARAMETER(DB1.TD_Drive_Hour);
  PARAMETER(DB1.TD_Drive_Card_Number);
  PARAMETER(DB1.TD_Avg_Live_Wgt);
  PARAMETER(DB1.TD_Gen_Bal_To_Kill);
  PARAMETER(DB1.TD_Recs_Created_for_HO);
  PARAMETER(DB1.TD_User_Status_2);
  PARAMETER(DB1.TD_User_Status_3);
  PARAMETER(DB1.TD_User_Date_1);
  PARAMETER(DB1.TD_User_Date_2);
  PARAMETER(DB1.TD_Drive_Date);
  PARAMETER(DB1.Pen_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(DB1.TDP_Process_Code);
  PARAMETER(DB1.Held_Over_Pen_Company_Num);
  PARAMETER(DB1.Held_Over_Pen_Number);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // Call program Rtv System Date & Tim UP.
    CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
    PARAMETER(PAR.RS_Date_Changed);
    PARAMETER(PAR.RS_Time_Changed);

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  CASE;

  // IF WRK.Yard Dead             USR NE WRK.Zero USR
  IF WRK.Yard_Dead_USR <> WRK.Zero_USR;

  //?Yard deads message
  // Call program Crt Tattoo Action Comm XF.
  CALL PROGRAM(Crt Tattoo Action Comm XF) ('PKV4XFR');
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(WRK.Date_USR);
  PARAMETER(WRK.Yard_Dead_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('YA');
  PARAMETER(*BLANK);

  ENDIF;

  CASE;

  // IF WRK.Td Pen Head Org Usr NE WRK.TD Pen Head
  IF WRK.Td_Pen_Head_Org_Usr <> WRK.TD_Pen_Head;

  //?Held over message
  // Call program Crt Tattoo Action Comm XF.
  CALL PROGRAM(Crt Tattoo Action Comm XF) ('PKV4XFR');
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(WRK.Date_USR);
  PARAMETER(*ZERO);
  PARAMETER(WRK.Head_Held_Over_Usr);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('AK');
  PARAMETER(*BLANK);

  ENDIF;

  ENDIF;

 }

 ENDDO;

 //?RECOUNT PENS
 DO;

 //?ORG record pen number recount
 EXECUTE FUNCTION(Rtv Recount Pen Head  RT) TYPE(RTVOBJ) FILE(PKA3REP)           AB1186410;
 PARAMETER(DB1.Org_Pen_Company);
 PARAMETER(DB1.Org_Pen_Number);
 {
  //?USER: Initialize routine

  //?012397  SUSAN MASON
  //?CHANGE THE COUNT OF PEN BECAUSE CLOSE PENS THE HEAD CNT WAS
  //?BEING ZERO OUT
  //?USER: Process Data record

  //?This pen is open
  // WRK.TD Pen Head = CON.*ZERO
  WRK.TD_Pen_Head = *ZERO;

  //?Read only tattoo detail that are open to accumulate pen head
  EXECUTE FUNCTION(Rtv Pen Totals        RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1186453;
  PARAMETER(PAR.Pen_Company_Number);
  PARAMETER(WRK.TD_Pen_Head);
  PARAMETER(DB1.Pen_Number);
  {
   //?USER: Initialize routine

   // PAR.TD Pen Head = CON.*ZERO
   PAR.TD_Pen_Head = *ZERO;

   //?USER: Process Data record

   // PAR.TD Pen Head = DB1.TD Pen Head + PAR.TD Pen Head
   PAR.TD_Pen_Head = DB1.TD_Pen_Head + PAR.TD_Pen_Head;

  }

  EXECUTE FUNCTION(Chg Pen               CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1102758;
  PARAMETER(DB1.Pen_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(DB1.Pen_Description);
  PARAMETER(DB1.Pen_Maximun_Capacity);
  PARAMETER(WRK.TD_Pen_Head);
  PARAMETER(DB1.Pen_Current_Drive_Card_No);
  PARAMETER(DB1.Pen_Sts);
  PARAMETER(DB1.Pen_Drive_Sequence);
  PARAMETER(DB1.Pen_Type);
  PARAMETER(DB1.Pen_Adjustment);
  PARAMETER(DB1.GN_Genetic_Code);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  // WRK.Pen Description = CON.*BLANK
  WRK.Pen_Description = *BLANK;

  // WRK.GN Genetic Code = CON.*BLANK
  WRK.GN_Genetic_Code = *BLANK;

  EXECUTE FUNCTION(Rtv Pen GENETICS      RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1107816;
  PARAMETER(PAR.Pen_Company_Number);
  PARAMETER(PAR.Pen_Number);
  PARAMETER(WRK.Pen_Description);
  PARAMETER(WRK.GN_Genetic_Code);
  {
   //?USER: Processing if Data record not found

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Pen_Description = *BLANK;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.GN_Genetic_Code = *BLANK;

   //?USER: Process Data record

   CASE;

   // IF DB1.TDP Process Code is Drive Card Printed
   IF DB1.TDP_Process_Code = 'D';

   // OR DB1.TDP Process Code is Open
   OR DB1.TDP_Process_Code = 'O';

   EXECUTE FUNCTION(Rtv Tattoo GENETICS) TYPE(RTVOBJ) FILE(PKA1CPP)                AB1107783;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(WRK.Genetic_Code_USR);
   PARAMETER(WRK.Pen_Desc_USR);
   {
    //?USER: Processing if Data record not found

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.GN_Genetic_Code = *BLANK;

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.Pen_Description = *BLANK;

    //?USER: Process Data record

    // PAR.GN Genetic Code = DB1.GN Genetic Code
    PAR.GN_Genetic_Code = DB1.GN_Genetic_Code;

    EXECUTE FUNCTION(Rtv Genetic Record    RT) TYPE(RTVOBJ) FILE(PKAIREP)           AB1107738;
    PARAMETER(DB1.GN_Genetic_Code);
    PARAMETER(PAR.Pen_Description);
    {
     //?USER: Processing if Data record not found

     // *MO.VE             1183529*Bu = ilt. in functions
     PAR.GN_Description = *BLANK;

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

   }

   CASE;

   // IF PAR.GN Genetic Code is BLANKS
   IF PAR.GN_Genetic_Code = *BLANK;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.GN_Genetic_Code = WRK.Genetic_Code_USR;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Pen_Description = WRK.Pen_Desc_USR;

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF WRK.Genetic Code USR NE PAR.GN Genetic Code
   IF WRK.Genetic_Code_USR <> PAR.GN_Genetic_Code;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Pen_Description = 'MIXED';

   ENDIF;

   ENDIF;

   ENDIF;

  }

  EXECUTE FUNCTION(Chg Pen Genetics      CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1119678;
  PARAMETER(PAR.Pen_Company_Number);
  PARAMETER(PAR.Pen_Number);
  PARAMETER(WRK.Pen_Description);
  PARAMETER(WRK.GN_Genetic_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 //?Org Held over pen number recount
 EXECUTE FUNCTION(Rtv Recount Pen Head  RT) TYPE(RTVOBJ) FILE(PKA3REP)           AB1186410;
 PARAMETER(DB1.Org_Pen_Company);
 PARAMETER(DB1.Org_Hld_Ovr_Pen_Number);
 {
  //?USER: Initialize routine

  //?012397  SUSAN MASON
  //?CHANGE THE COUNT OF PEN BECAUSE CLOSE PENS THE HEAD CNT WAS
  //?BEING ZERO OUT
  //?USER: Process Data record

  //?This pen is open
  // WRK.TD Pen Head = CON.*ZERO
  WRK.TD_Pen_Head = *ZERO;

  //?Read only tattoo detail that are open to accumulate pen head
  EXECUTE FUNCTION(Rtv Pen Totals        RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1186453;
  PARAMETER(PAR.Pen_Company_Number);
  PARAMETER(WRK.TD_Pen_Head);
  PARAMETER(DB1.Pen_Number);
  {
   //?USER: Initialize routine

   // PAR.TD Pen Head = CON.*ZERO
   PAR.TD_Pen_Head = *ZERO;

   //?USER: Process Data record

   // PAR.TD Pen Head = DB1.TD Pen Head + PAR.TD Pen Head
   PAR.TD_Pen_Head = DB1.TD_Pen_Head + PAR.TD_Pen_Head;

  }

  EXECUTE FUNCTION(Chg Pen               CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1102758;
  PARAMETER(DB1.Pen_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(DB1.Pen_Description);
  PARAMETER(DB1.Pen_Maximun_Capacity);
  PARAMETER(WRK.TD_Pen_Head);
  PARAMETER(DB1.Pen_Current_Drive_Card_No);
  PARAMETER(DB1.Pen_Sts);
  PARAMETER(DB1.Pen_Drive_Sequence);
  PARAMETER(DB1.Pen_Type);
  PARAMETER(DB1.Pen_Adjustment);
  PARAMETER(DB1.GN_Genetic_Code);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  // WRK.Pen Description = CON.*BLANK
  WRK.Pen_Description = *BLANK;

  // WRK.GN Genetic Code = CON.*BLANK
  WRK.GN_Genetic_Code = *BLANK;

  EXECUTE FUNCTION(Rtv Pen GENETICS      RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1107816;
  PARAMETER(PAR.Pen_Company_Number);
  PARAMETER(PAR.Pen_Number);
  PARAMETER(WRK.Pen_Description);
  PARAMETER(WRK.GN_Genetic_Code);
  {
   //?USER: Processing if Data record not found

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Pen_Description = *BLANK;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.GN_Genetic_Code = *BLANK;

   //?USER: Process Data record

   CASE;

   // IF DB1.TDP Process Code is Drive Card Printed
   IF DB1.TDP_Process_Code = 'D';

   // OR DB1.TDP Process Code is Open
   OR DB1.TDP_Process_Code = 'O';

   EXECUTE FUNCTION(Rtv Tattoo GENETICS) TYPE(RTVOBJ) FILE(PKA1CPP)                AB1107783;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(WRK.Genetic_Code_USR);
   PARAMETER(WRK.Pen_Desc_USR);
   {
    //?USER: Processing if Data record not found

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.GN_Genetic_Code = *BLANK;

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.Pen_Description = *BLANK;

    //?USER: Process Data record

    // PAR.GN Genetic Code = DB1.GN Genetic Code
    PAR.GN_Genetic_Code = DB1.GN_Genetic_Code;

    EXECUTE FUNCTION(Rtv Genetic Record    RT) TYPE(RTVOBJ) FILE(PKAIREP)           AB1107738;
    PARAMETER(DB1.GN_Genetic_Code);
    PARAMETER(PAR.Pen_Description);
    {
     //?USER: Processing if Data record not found

     // *MO.VE             1183529*Bu = ilt. in functions
     PAR.GN_Description = *BLANK;

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

   }

   CASE;

   // IF PAR.GN Genetic Code is BLANKS
   IF PAR.GN_Genetic_Code = *BLANK;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.GN_Genetic_Code = WRK.Genetic_Code_USR;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Pen_Description = WRK.Pen_Desc_USR;

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF WRK.Genetic Code USR NE PAR.GN Genetic Code
   IF WRK.Genetic_Code_USR <> PAR.GN_Genetic_Code;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Pen_Description = 'MIXED';

   ENDIF;

   ENDIF;

   ENDIF;

  }

  EXECUTE FUNCTION(Chg Pen Genetics      CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1119678;
  PARAMETER(PAR.Pen_Company_Number);
  PARAMETER(PAR.Pen_Number);
  PARAMETER(WRK.Pen_Description);
  PARAMETER(WRK.GN_Genetic_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 //?CHG record pen number recount
 EXECUTE FUNCTION(Rtv Recount Pen Head  RT) TYPE(RTVOBJ) FILE(PKA3REP)           AB1186410;
 PARAMETER(DB1.Change_Pen_Co_Number);
 PARAMETER(DB1.Change_Pen_Number);
 {
  //?USER: Initialize routine

  //?012397  SUSAN MASON
  //?CHANGE THE COUNT OF PEN BECAUSE CLOSE PENS THE HEAD CNT WAS
  //?BEING ZERO OUT
  //?USER: Process Data record

  //?This pen is open
  // WRK.TD Pen Head = CON.*ZERO
  WRK.TD_Pen_Head = *ZERO;

  //?Read only tattoo detail that are open to accumulate pen head
  EXECUTE FUNCTION(Rtv Pen Totals        RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1186453;
  PARAMETER(PAR.Pen_Company_Number);
  PARAMETER(WRK.TD_Pen_Head);
  PARAMETER(DB1.Pen_Number);
  {
   //?USER: Initialize routine

   // PAR.TD Pen Head = CON.*ZERO
   PAR.TD_Pen_Head = *ZERO;

   //?USER: Process Data record

   // PAR.TD Pen Head = DB1.TD Pen Head + PAR.TD Pen Head
   PAR.TD_Pen_Head = DB1.TD_Pen_Head + PAR.TD_Pen_Head;

  }

  EXECUTE FUNCTION(Chg Pen               CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1102758;
  PARAMETER(DB1.Pen_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(DB1.Pen_Description);
  PARAMETER(DB1.Pen_Maximun_Capacity);
  PARAMETER(WRK.TD_Pen_Head);
  PARAMETER(DB1.Pen_Current_Drive_Card_No);
  PARAMETER(DB1.Pen_Sts);
  PARAMETER(DB1.Pen_Drive_Sequence);
  PARAMETER(DB1.Pen_Type);
  PARAMETER(DB1.Pen_Adjustment);
  PARAMETER(DB1.GN_Genetic_Code);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  // WRK.Pen Description = CON.*BLANK
  WRK.Pen_Description = *BLANK;

  // WRK.GN Genetic Code = CON.*BLANK
  WRK.GN_Genetic_Code = *BLANK;

  EXECUTE FUNCTION(Rtv Pen GENETICS      RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1107816;
  PARAMETER(PAR.Pen_Company_Number);
  PARAMETER(PAR.Pen_Number);
  PARAMETER(WRK.Pen_Description);
  PARAMETER(WRK.GN_Genetic_Code);
  {
   //?USER: Processing if Data record not found

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Pen_Description = *BLANK;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.GN_Genetic_Code = *BLANK;

   //?USER: Process Data record

   CASE;

   // IF DB1.TDP Process Code is Drive Card Printed
   IF DB1.TDP_Process_Code = 'D';

   // OR DB1.TDP Process Code is Open
   OR DB1.TDP_Process_Code = 'O';

   EXECUTE FUNCTION(Rtv Tattoo GENETICS) TYPE(RTVOBJ) FILE(PKA1CPP)                AB1107783;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(WRK.Genetic_Code_USR);
   PARAMETER(WRK.Pen_Desc_USR);
   {
    //?USER: Processing if Data record not found

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.GN_Genetic_Code = *BLANK;

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.Pen_Description = *BLANK;

    //?USER: Process Data record

    // PAR.GN Genetic Code = DB1.GN Genetic Code
    PAR.GN_Genetic_Code = DB1.GN_Genetic_Code;

    EXECUTE FUNCTION(Rtv Genetic Record    RT) TYPE(RTVOBJ) FILE(PKAIREP)           AB1107738;
    PARAMETER(DB1.GN_Genetic_Code);
    PARAMETER(PAR.Pen_Description);
    {
     //?USER: Processing if Data record not found

     // *MO.VE             1183529*Bu = ilt. in functions
     PAR.GN_Description = *BLANK;

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

   }

   CASE;

   // IF PAR.GN Genetic Code is BLANKS
   IF PAR.GN_Genetic_Code = *BLANK;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.GN_Genetic_Code = WRK.Genetic_Code_USR;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Pen_Description = WRK.Pen_Desc_USR;

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF WRK.Genetic Code USR NE PAR.GN Genetic Code
   IF WRK.Genetic_Code_USR <> PAR.GN_Genetic_Code;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Pen_Description = 'MIXED';

   ENDIF;

   ENDIF;

   ENDIF;

  }

  EXECUTE FUNCTION(Chg Pen Genetics      CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1119678;
  PARAMETER(PAR.Pen_Company_Number);
  PARAMETER(PAR.Pen_Number);
  PARAMETER(WRK.Pen_Description);
  PARAMETER(WRK.GN_Genetic_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDDO;

}


//?Update the Balance to Kill (Only) because of report after edit
EXECUTE FUNCTION(Chg THdr Bal To Err   IF) TYPE(EXCINTFUN)                      AB1276940;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
{
 //?Execute internal function

 EXECUTE FUNCTION(Chg THdr Bal to Err   RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1276941;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.TH Kill Balancing Sts is Balance
  IF DB1.TH_Kill_Balancing_Sts = 'B';

  // AND DB1.THP Process Code is NE Payment
  AND DB1.THP_Process_Code <> 'PAYMNT';

  EXECUTE FUNCTION(Chg THdr Bal to Err   CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1276942;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.TH_Purchase_Date);
  PARAMETER('E');
  {
   //?USER: Processing after Data read

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  ENDIF;

 }

}


