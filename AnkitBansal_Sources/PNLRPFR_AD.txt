// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNLRPFR
// ?Date: 14.08.2025 Time: 12:05:56
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification history
//?** 12/22/22 EL 103904  Add: One customer selection
//?** 03/28/2017 LJB E009707  Add: invoice suffix selection,
//?        parent number and name, Print adj types for partial
//?        selection, ie if W is entered then print all adj types
//?        that begin with W
//?** 06/22/2016 JBB E5262 - Charge Backs and Rebills project
//?        Change report title from Write-Off to Adjustment Type
EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('A/R');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// PAR.USR Display field = CND.no
PAR.USR_Display_field = 'N';

// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

//?USER: On print of first page format

MOVE *ALL (To: 1PG From: PAR);

//?** Print *ALL if no company number, else print company name
CASE;

// IF PAR.Company Number is Equal to zero
IF PAR.Company_Number = *ZERO;

// 1PG.Company Name = CON.*ALL
X1PG_Company_Name = *ALL;

//?** Print *ALL if no company number, else print company name
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?** Print company name for 2nd customer number         E009707
CASE;

// IF PAR.USR Company Number 2 is not equal to zero
IF PAR.USR_Company_Number_2 <> *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(X1PG_USR_Company_Number_2);
PARAMETER(X1PG_Description_2_usr);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?** Print company name for 3rd customer number         E009707
CASE;

// IF PAR.USR Company Number 3 is not equal to zero
IF PAR.USR_Company_Number_3 <> *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(X1PG_USR_Company_Number_3);
PARAMETER(X1PG_Description_3_usr);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Fill in Adj Types for "Begins With"                   E009707
// 1PG.USR Adjustment Type 1 = PAR.USR Adjustment Type 1
X1PG_USR_Adjustment_Type_1 = PAR.USR_Adjustment_Type_1;

// 1PG.USR Adjustment Type 2 = PAR.USR Adjustment Type 2
X1PG_USR_Adjustment_Type_2 = PAR.USR_Adjustment_Type_2;

// 1PG.USR Adjustment Type 3 = PAR.USR Adjustment Type 3
X1PG_USR_Adjustment_Type_3 = PAR.USR_Adjustment_Type_3;

// 1PG.USR Adjustment Type 4 = PAR.USR Adjustment Type 4
X1PG_USR_Adjustment_Type_4 = PAR.USR_Adjustment_Type_4;

// 1PG.USR Adjustment Type 5 = PAR.USR Adjustment Type 5
X1PG_USR_Adjustment_Type_5 = PAR.USR_Adjustment_Type_5;

// 1PG.USR Adjustment Type 6 = PAR.USR Adjustment Type 6
X1PG_USR_Adjustment_Type_6 = PAR.USR_Adjustment_Type_6;

// 1PG.USR Adjustment Type 7 = PAR.USR Adjustment Type 7
X1PG_USR_Adjustment_Type_7 = PAR.USR_Adjustment_Type_7;

// 1PG.USR Adjustment Type 8 = PAR.USR Adjustment Type 8
X1PG_USR_Adjustment_Type_8 = PAR.USR_Adjustment_Type_8;

// 1PG.USR Adjustment Type 9 = PAR.USR Adjustment Type 9
X1PG_USR_Adjustment_Type_9 = PAR.USR_Adjustment_Type_9;

// 1PG.USR Adjustment Type 10 = PAR.USR Adjustment Type 10
X1PG_USR_Adjustment_Type_10 = PAR.USR_Adjustment_Type_10;

// 1PG.USR From Date = PAR.From Date             USR
X1PG_USR_From_Date = PAR.From_Date_USR;

// 1PG.USR Through Date = PAR.Thru Date             USR
X1PG_USR_Through_Date = PAR.Thru_Date_USR;

// 1PG.A/R Customer Number = PAR.A/R Customer Number
X1PG_AR_Customer_Number = PAR.AR_Customer_Number;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

//?USER: Null report processing

// PAR.USR Display field = CND.yes
PAR.USR_Display_field = 'Y';

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


//?USER: Print required level headings

// SUPPRESSED PRINT Company Number header format

CASE;

IF NEW AR_Customer_Name;
MOVE *ALL (To: CUR From: DB1);

// Print A/R Customer Name header format
PRINT A/R Customer Name header format;

ENDIF;

// SUPPRESSED PRINT A/R Customer Number header format

// SUPPRESSED PRINT CUSTOMER NUMBER header format

// SUPPRESSED PRINT Customer Name header format

// SUPPRESSED PRINT Payment/Deposit Date header format

// SUPPRESSED PRINT Invoice Number header format

// SUPPRESSED PRINT Invoice Suffix header format

// SUPPRESSED PRINT Sequence Number header format

//?USER: On print of detail format

MOVE *ALL (To: CUR From: DB1);

//?USER: Process after print of detail format

// NXT.USR Transaction amount = NXT.USR Transaction amount + CUR.Transaction Amount
NXT.USR_Transaction_amount = NXT.USR_Transaction_amount + CUR.Transaction_Amount;

//?USER: Print required level totals

// SUPPRESSED PRINT Sequence Number totals format

// SUPPRESSED PRINT Invoice Suffix totals format

// SUPPRESSED PRINT Invoice Number totals format

// SUPPRESSED PRINT Payment/Deposit Date totals format

// SUPPRESSED PRINT Customer Name totals format

// SUPPRESSED PRINT CUSTOMER NUMBER totals format

// SUPPRESSED PRINT A/R Customer Number totals format

CASE;

IF NEW AR_Customer_Name;
// Print A/R Customer Name totals format
PRINT A/R Customer Name totals format;

// NXT.Total Transaction Amount = NXT.Total Transaction Amount + CUR.USR Transaction amount
NXT.Total_Transaction_Amount = NXT.Total_Transaction_Amount + CUR.USR_Transaction_amount;

ENDIF;

// SUPPRESSED PRINT Company Number totals format

