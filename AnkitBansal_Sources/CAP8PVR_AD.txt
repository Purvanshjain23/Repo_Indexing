// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for CAP8PVR
// ?Date: 14.08.2025 Time: 03:26:49
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(WRK.Allow_Multi_Company);
PARAMETER(WRK.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Load screen

//?Retrieve contact type description if entered
CASE;

// IF DTL.Contact Type Code is Not equal to blank
IF DTL.Contact_Type_Code <> *BLANK;

EXECUTE FUNCTION(RTV Contact Type Desc RT) TYPE(RTVOBJ) FILE(CAEDREP)           AC1162762;
PARAMETER(DTL.Contact_Type_Code);
PARAMETER(DTL.USR_Hold_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?USER: Validate relations

EXECUTE FUNCTION(RTV Contact Type Desc RT) TYPE(RTVOBJ) FILE(CAEDREP)           AC1162762;
PARAMETER(DTL.Contact_Type_Code);
PARAMETER(DTL.USR_Hold_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(zTV Contact Name       ZZ) TYPE(RTVOBJ) FILE(CAD0REP)          AC1143972;
PARAMETER(DTL.Contact_Number);
PARAMETER(PAR.Primary_Contact_Name);
PARAMETER(PAR.Primary_Contact_Bus_Title);
{
 //?USER: Processing if Data record not found

 // PAR.Primary Contact Bus Title = CON.*BLANK
 PAR.Primary_Contact_Bus_Title = *BLANK;

 // PAR.Primary Contact First Nam = CON.*BLANK
 PAR.Primary_Contact_First_Nam = *BLANK;

 // PAR.Primary Contact Last Name = CON.*BLANK
 PAR.Primary_Contact_Name = *BLANK;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Execute function CPY Compress F/L Names US.
EXECUTE FUNCTION(CPY Compress F/L Names US) TYPE(EXCUSRSRC) ('UFNAME');
PARAMETER(PAR.Primary_Contact_First_Nam);
PARAMETER(PAR.Primary_Contact_Name);
PARAMETER(DTL.USR_Compressed_Name);
{
 0038 E                    IN          2 99               INDICATORS
 E                    UFL        32  1               FIRST & LAST NAME
 0039 E                    ULN        20  1               LAST NAME
 0040 E                    UFN        12  1               FIRST NAME
 0041 C*************************
 C                     MOVE #IA3NA    UFNAM  12
 C                     MOVE #IA6NA    ULNAME 20
 C                     MOVEA*IN,85    UIN85   2
 C                     MOVEA*IN,86    UIN86   2
 C                     MOVEA*IN,87    UIN87   2
 C                     EXSR UFNAME
 C                     MOVEAUFL       #ODQNA
 C                     MOVEAUIN85     *IN,85
 C                     MOVEAUIN86     *IN,86
 C                     MOVEAUIN87     *IN,87
 0042 C           UFNAME    BEGSR
 0002 C******************************************
 0003 C** NAME SUBROUTINE
 0004 C** COMPRESS FIRST NAME AND LAST NAME FOR BETTER READABILITY
 0037 C******************************************
 0046 C                     SETOF                     858687
 0047 C                     MOVE *BLANKS   UFL
 0059 C                     MOVEAULNAME    ULN              LAST NAME
 0060 C                     MOVEAUFNAM     UFN              FIRST NAME
 0061 C                     Z-ADD0         U1      20
 0062 C                     Z-ADD0         U2      20
 *
 0063 C********* BEGIN WORK ON FIRST NAME
 *
 0064 C           UFIRST    TAG
 0065 C                     ADD  1         U2
 0066 C                     ADD  1         U1
 0073 C           UFN,U1    COMP ' '                      85END OF FIRST NM
 0074 C   85                ADD  1         U1                NAME=2 BLANKS
 0075 C   85      U1        COMP 12                   86                TH
 0076 C   85N86   UFN,U1    COMP ' '                      87CHECK 2 BLANKS
 0077 C   85      U1        SUB  1         U1               GET BACK B4 CK
 0079 C   85 86
 0080 COR 85 87             GOTO UOUT                       END OF FIRST NM
 0081 C                     MOVE UFN,U1    UFL,U2           PUT LETTERS IN
 0082 C           U1        CABNE12        UFIRST
 0085 C           UOUT      TAG
 0086 C                     MOVE ' '       UFL,U2             NAME
 0094 C                     Z-ADD0         U1               END OF FIRST NM
 0096 C********* START LAST NAME WORK
 0097 C           ULAST     TAG
 0098 C                     ADD  1         U2
 0099 C           U2        COMP 32                   85    GET OUT-NM DONE
 0100 C   85                GOTO UEND
 0101 C                     ADD  1         U1
 0105 C           ULN,U1    COMP ' '                      85END OF LAST NAM
 0106 C   85                ADD  1         U1                NAME=2 BLANKS
 0107 C   85      U1        COMP 20                   86    GT LNA@ LENGTH
 0108 C   85N86   ULN,U1    COMP ' '                      87CHECK 2 BLANKS
 0109 C   85      U1        SUB  1         U1               GET BACK B4 CK
 0110 C   85 86
 0111 COR 85 87             GOTO UEND
 0112 C                     MOVE ULN,U1    UFL,U2
 0113 C           U1        CABNE20        ULAST
 0123 C           UEND      ENDSR
 /EJECT
 0124 C***************************************************************
}


//?USER: User defined action

//?Create the new customer/contact attachment
EXECUTE FUNCTION(RTV Next Sequence #   RT) TYPE(RTVOBJ) FILE(CAEMCPP)           AC1160093;
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(99999);
{
 //?USER: Processing if Data record not found

 // PAR.Contact Sequence Number = CON.1
 PAR.Contact_Sequence_Number = 1;

 //?USER: Process Data record

 // PAR.Contact Sequence Number = DB1.Contact Sequence Number + CON.1
 PAR.Contact_Sequence_Number = DB1.Contact_Sequence_Number + 1;

 QUIT;

}


// DTL.Contact Sequence Number = PAR.highest sequence number + CON.1
DTL.Contact_Sequence_Number = PAR.highest_sequence_number + 1;

EXECUTE FUNCTION(Crt Customer Contact  CR) TYPE(CRTOBJ) FILE(CAEMCPP)           AC1159588;
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(DTL.Contact_Sequence_Number);
PARAMETER(DTL.Contact_Type_Code);
PARAMETER(DTL.Contact_Number);
PARAMETER(*MISSING);
PARAMETER(WRK.EDI_Status_1);
PARAMETER(WRK.EDI_Status_2);
PARAMETER(WRK.EDI_Status_3);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


