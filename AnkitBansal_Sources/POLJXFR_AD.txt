// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POLJXFR
// ?Date: 14.08.2025 Time: 03:37:55
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Comments and History
DO;

//?E3191 JJH 08/07/14 Automated Inventory Restoration
//? No changes maded.  New parameter added and then removed.
//?E3191 JJH 08/21/14 Automated Inventory Restoration
//? Added INVRSTPT Company Value to list the Inventory Restoration
//? Printer by Company
//? Added EXCMSG for Printer, Hold, and Save OVRPRTF values
ENDDO;

//?*** Run for CFH after CF1                    PK0306 10/03/01 ****
//?*********************************************
//?*** CF1 ***
//?*********************************************
//?Start Physical Count
DO;

//?***** Create Physical Count Control *****
// Call program RTV System Date/Time   UP.
CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
PARAMETER(LCL.Current_System_Date);
PARAMETER(LCL.Current_System_Time);

// PAR.Physical Start Date = LCL.Current System Date
PAR.Physical_Start_Date = LCL.Current_System_Date;

// PAR.Cycle Status = CND.Open
PAR.Cycle_Status = 'O';

EXECUTE FUNCTION(Crt Physical Count    RT) TYPE(RTVOBJ) FILE(OMHCCPP)           AC1626524;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Physical_Start_Date);
PARAMETER(PAR.Cycle_Count_Code);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(Crt Physical Count     CR) TYPE(CRTOBJ) FILE(OMHCCPP)          AC1217193;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Physical_Start_Date);
 PARAMETER(PAR.Cycle_Count_Code);
 PARAMETER('O');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

//?Item Balance Detail: Physical Count Start has already been updated.
// IF *OTHERWISE
IF *OTHERWISE;

//?***** Update Item Balance Detail w/Physical Count Start *****
EXECUTE FUNCTION(Upd Physical Start Dt  RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC1152141;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Cycle_Count_Code);
PARAMETER(PAR.Physical_Start_Date);
{
 //?USER: Process Data record

 // PAR.Record Selected       USR = CND.yes
 PAR.Record_Selected_USR = 'Y';

 EXECUTE FUNCTION(Upd Phys. Start Dt/Qty RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1152144;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.USR_From_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Phys. Start Qty.   CH) TYPE(CHGOBJ) FILE(CAB1REP)          AC1152145;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER('P');
  PARAMETER(DB1.Quantity_on_Hand_Weight);
  PARAMETER(DB1.Quantity_on_Hand_UOM1);
  PARAMETER(DB1.Quantity_on_Hand_UOM2);
  PARAMETER(DB1.Quantity_on_Hand_UOM3);
  PARAMETER(PAR.USR_From_Date);
  {
   //?USER: Processing before Data update

   // DB1.Physical Count Weight = CON.*ZERO
   DB1.Physical_Count_Weight = *ZERO;

   // DB1.Physical Count Qty - U/M1 = CON.*ZERO
   DB1.Physical_Count_Qty_UOM1 = *ZERO;

   // DB1.Physical Count Qty - U/M2 = CON.*ZERO
   DB1.Physical_Count_Qty_UOM2 = *ZERO;

   // DB1.Physical Count Qty - U/M3 = CON.*ZERO
   DB1.Physical_Count_Qty_UOM3 = *ZERO;

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

}


ENDIF;

ENDDO;

//?***** Perform Physical Count using Item Lot Location *****
//?E3191 JJH 08/21/14 Add EXCMSG for Printer, Hold, Save OVRPRTF
// Call program Rtv Company Values-All XF.
CALL PROGRAM(Rtv Company Values-All XF) ('PNW3XFR');
PARAMETER(PAR.Company_Number);
PARAMETER('INVRSTPT');
PARAMETER(NLL.Description);
PARAMETER(NLL.System_Value_Type);
PARAMETER(LCL.PRT_Printer_Device);
PARAMETER(NLL.System_Value_Numeric);
PARAMETER(NLL.Record_Status);

// Call program EXC Command OVRPRTF    UP.
CALL PROGRAM(EXC Command OVRPRTF    UP) ('PDQVUPC');
PARAMETER('POLMPFR$');
PARAMETER(LCL.PRT_Printer_Device);
PARAMETER(*YES);
PARAMETER(*YES);
PARAMETER(1);

// Call program PRC Physical Count    PF.
CALL PROGRAM(PRC Physical Count    PF) ('POLMPFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Cycle_Count_Code);
PARAMETER(PAR.Physical_Start_Date);

