// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNPNEFR
// ?Date: 14.08.2025 Time: 03:46:02
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.Allow_Multi_Company);
PARAMETER(LCL.Default_Printer);
PARAMETER(LCL.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?R14851 DN 04/16/19-Get Company Organization.
EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
PARAMETER(LCL.Company_Number);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize subfile header

EXECUTE FUNCTION(Customer Name DRV) TYPE(DRVFLD)                                AC1631131;
PARAMETER(CTL.Customer_Name_DRV);
PARAMETER(PAR.Ship_To_Customer);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Customer_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Initialize subfile record (existing record)

//?SEL: Distribution Code
CASE;

// IF CTL.Distribution Code is Entered
IF CTL.Distribution_Code <> *BLANK;

CASE;

// IF CTL.Distribution Code NE RCD.Distribution Code
IF CTL.Distribution_Code <> RCD.Distribution_Code;

// PGM.*Reload subfile = CND.*NO
PGM.*Reload_subfile = 'N';

ENDIF;

ENDIF;

//?USER: Initialize subfile record (new record)

// RCD.Record Status = CND.Active
RCD.Record_Status = 'A';

CASE;

// IF PAR.STATUS is No
IF PAR.STATUS = 'N';

// RCD.Distribution Code = CND.Shipping Bill of Lading
RCD.Distribution_Code = 'SH-BOL';

ENDIF;

//?USER: Validate subfile record fields

//?F4
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> RCD.Distribution Code
AND PGM.*Cursor_field = RCD.Distribution_Code;

// Call program Sel Distribution      SR.
CALL PROGRAM(Sel Distribution      SR) ('PNPISRR');
PARAMETER(RCD.Distribution_Code);

ENDIF;

//?select record status
CASE;

// IF CTL.Record Status is Not Blanks
IF CTL.Record_Status = 'A'/'D'/'I';

CASE;

// IF RCD.Record Status NE CTL.Record Status
IF RCD.Record_Status <> CTL.Record_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?select entry type
CASE;

// IF CTL.CDE Destination Type NE WRK.USR Blank Field
IF CTL.CDE_Destination_Type <> WRK.USR_Blank_Field;

CASE;

// IF RCD.CDE Destination Type NE CTL.CDE Destination Type
IF RCD.CDE_Destination_Type <> CTL.CDE_Destination_Type;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?S15356 DN 08/26/19-Allow Type 'O' if Distribution Cde is 'AR-INVOICE'.
CASE;

// IF RCD.CDE Destination Type is One Email/Invoice
IF RCD.CDE_Destination_Type = 'O';

//?Allow All Organizations to Use Type 'O' (One Email/Invoice).
CASE;

// IF RCD.Distribution Code is Invoice
IF RCD.Distribution_Code = 'AR-INVOICE';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Generic Message 80 USR = CONCAT(CON.Type invalid. Distributio,CON.n code must be AR-INVOICE,C
LCL.Generic_Message_80_USR = 'Type invalid. Distributio' + 'n code must be AR-INVOICE' (*ZERO);

// LCL.Generic Message 80 USR = CONCAT(LCL.Generic Message 80 USR,CON..,CON.*ZERO)
LCL.Generic_Message_80_USR = LCL.Generic_Message_80_USR + '.' (*ZERO);

// Send error message - '&1'
ERROR(USR5085);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(RCD.CDE_Destination_Type);

ENDIF;

ENDIF;

CASE;

// IF PAR.STATUS is No
IF PAR.STATUS = 'N';

CASE;

// IF RCD.Distribution Code is Shipping Bill of Lading
IF RCD.Distribution_Code = 'SH-BOL';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Cust Distribution Entry not valid for customer.'
ERROR(USR5182);

ENDIF;

ENDIF;

CASE;

// IF PAR.STATUS is Yes
IF PAR.STATUS = 'Y';

CASE;

// IF RCD.Distribution Code is Shipping Bill of Lading
IF RCD.Distribution_Code = 'SH-BOL';

// Send error message - 'Cust Distribution Entry not valid for customer.'
ERROR(USR5182);

ENDIF;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Cust Dist Entry   IF) TYPE(EXCINTFUN) FILE(PNF7REP)        AC1978922;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Distribution_Code);
PARAMETER(RCD.CDE_Sequence_Number);
PARAMETER(RCD.CDE_Name);
PARAMETER(RCD.CDE_Destination_Type);
PARAMETER(RCD.CDE_Destination);
PARAMETER('A');
PARAMETER(RCD.Create_Date);
PARAMETER(RCD.Create_Time);
PARAMETER(RCD.Create_User);
PARAMETER(RCD.Create_Program);
PARAMETER(RCD.Change_Date);
PARAMETER(RCD.Change_Time);
PARAMETER(RCD.Change_User);
PARAMETER(RCD.Change_Program);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Cust Dist Nxt seq#RT) TYPE(RTVOBJ) FILE(PNF7REP)           AC1978927;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Distribution_Code);
 PARAMETER(PAR.CDE_Sequence_Number);
 {
  //?USER: Processing if Data record not found

  // PAR.CDE Sequence Number = CON.1
  PAR.CDE_Sequence_Number = 1;

  //?USER: Process Data record

  // PAR.CDE Sequence Number = CON.1 + DB1.CDE Sequence Number
  PAR.CDE_Sequence_Number = 1 + DB1.CDE_Sequence_Number;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Cust Dist Entry   CR) TYPE(CRTOBJ) FILE(PNF7REP)           AC1978863;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Distribution_Code);
 PARAMETER(PAR.CDE_Sequence_Number);
 PARAMETER(PAR.CDE_Name);
 PARAMETER(PAR.CDE_Destination_Type);
 PARAMETER(PAR.CDE_Destination);
 PARAMETER('A');
 PARAMETER(PAR.Create_Date);
 PARAMETER(PAR.Create_Time);
 PARAMETER(PAR.Create_User);
 PARAMETER(PAR.Create_Program);
 PARAMETER(PAR.Change_Date);
 PARAMETER(PAR.Change_Time);
 PARAMETER(PAR.Change_User);
 PARAMETER(PAR.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

 }

}


//?USER: Delete DBF record

EXECUTE FUNCTION(Dlt Cust Dist Entry   DL) TYPE(DLTOBJ) FILE(PNF7REP)           AC1978865;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Distribution_Code);
PARAMETER(RCD.CDE_Sequence_Number);

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Cust Dist         CG) TYPE(CHGOBJ) FILE(PNF7REP)           AC1978864;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Distribution_Code);
PARAMETER(RCD.CDE_Sequence_Number);
PARAMETER(RCD.CDE_Name);
PARAMETER(RCD.CDE_Destination_Type);
PARAMETER(RCD.CDE_Destination);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Create_Date);
PARAMETER(RCD.Create_Time);
PARAMETER(RCD.Create_User);
PARAMETER(RCD.Create_Program);
PARAMETER(RCD.Change_Date);
PARAMETER(RCD.Change_Time);
PARAMETER(RCD.Change_User);
PARAMETER(RCD.Change_Program);
{
 //?USER: Processing before Data read

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(LCL.Change_Date);
 PARAMETER(LCL.Change_Time);
 PARAMETER(LCL.Change_User);
 PARAMETER(LCL.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

}


