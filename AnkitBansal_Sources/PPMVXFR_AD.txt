// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPMVXFR
// ?Date: 14.08.2025 Time: 03:41:13
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?ISE 08/11/20 418 Evaluate PFS Manufacturing ID field with Manufacturer
//?             Id field if not blank, else use Company name and address
EXECUTE FUNCTION(PFS One Product       RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1732176;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
{
 //?USER: Process Data record

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?Process Record
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // PAR.PFS Company Number = DB1.Company Number
 PAR.PFS_Company_Number = DB1.Company_Number;

 // PAR.PFS Item Code = DB1.Item Code
 PAR.PFS_Item_Code = DB1.Item_Code;

 // PAR.PFS Label Type = DB1.Label Type
 PAR.PFS_Label_Type = DB1.Label_Type;

 //?02/17/07 PKD Removed apostrophe from descriptions
 //?08/15/07 RMC Removed apostrophe from label lines too
 EXECUTE FUNCTION(PFS Item Descriptin   IF) TYPE(EXCINTFUN)                      AC1810272;
 PARAMETER(DB1.Description_Line_One);
 PARAMETER(DB1.Description_Line_Two);
 PARAMETER(DB1.Item_Label_Line_1);
 PARAMETER(DB1.Item_Label_Line_2);
 PARAMETER(DB1.Item_Label_Line_3);
 PARAMETER(PAR.PFS_Item_Description_1);
 PARAMETER(PAR.PFS_Item_Description_2);
 PARAMETER(PAR.PFS_Item_Label_Line_1);
 PARAMETER(PAR.PFS_Item_Label_Line_2);
 PARAMETER(PAR.PFS_Item_Label_Line_3);
 {
  //?Execute internal function

  //?PFS Item Description 1
  // WRK.USR Hold Description = PAR.Description Line One
  WRK.USR_Hold_Description = PAR.Description_Line_One;

  // WRK.USR Description = CON.*BLANK
  WRK.USR_Description = *BLANK;

  // Execute function Rmv Apostrophe     30US.
  EXECUTE FUNCTION(Rmv Apostrophe     30US) TYPE(EXCUSRSRC) ('PMD6UFR');
  PARAMETER(WRK.USR_Hold_Description);
  PARAMETER(WRK.USR_Description);
  {
   E                    TXT     1   1  1               ARRAY 1
   E                    AR1        30  1               ARRAY 1
   E                    AR2        30  1               ARRAY 2
   C                     MOVEAWUCUNA    AR1              LOAD ARRAY
   C                     MOVEA*BLANKS   AR2              INIT TO BLANKS
   C                     Z-ADD1         X       30       SET COUNTER
   C                     Z-ADD1         Y       30       SET COUNTER
   C                     MOVE 'N'       STOP    1        FLAG
   C           X         DOWLT31
   C           AR1,X     IFEQ TXT,1
   C                     ADD  1         X
   C                     ELSE
   C                     MOVE AR1,X     AR2,Y
   C                     ADD  1         Y
   C                     ADD  1         X
   C                     END
   C                     END
   C                     MOVEAAR2       WUJNNA           LOAD OUTPUT
   **
   '
  }

  // PAR.PFS Item Description 1 = WRK.USR Description
  PAR.PFS_Item_Description_1 = WRK.USR_Description;

  //?PFS Item Description 2
  // WRK.USR Hold Description = PAR.Description Line Two
  WRK.USR_Hold_Description = PAR.Description_Line_Two;

  // WRK.USR Description = CON.*BLANK
  WRK.USR_Description = *BLANK;

  // Execute function Rmv Apostrophe     30US.
  EXECUTE FUNCTION(Rmv Apostrophe     30US) TYPE(EXCUSRSRC) ('PMD6UFR');
  PARAMETER(WRK.USR_Hold_Description);
  PARAMETER(WRK.USR_Description);
  {
   E                    TXT     1   1  1               ARRAY 1
   E                    AR1        30  1               ARRAY 1
   E                    AR2        30  1               ARRAY 2
   C                     MOVEAWUCUNA    AR1              LOAD ARRAY
   C                     MOVEA*BLANKS   AR2              INIT TO BLANKS
   C                     Z-ADD1         X       30       SET COUNTER
   C                     Z-ADD1         Y       30       SET COUNTER
   C                     MOVE 'N'       STOP    1        FLAG
   C           X         DOWLT31
   C           AR1,X     IFEQ TXT,1
   C                     ADD  1         X
   C                     ELSE
   C                     MOVE AR1,X     AR2,Y
   C                     ADD  1         Y
   C                     ADD  1         X
   C                     END
   C                     END
   C                     MOVEAAR2       WUJNNA           LOAD OUTPUT
   **
   '
  }

  // PAR.PFS Item Description 2 = WRK.USR Description
  PAR.PFS_Item_Description_2 = WRK.USR_Description;

  //?PFS Item Label line 1
  // WRK.USR Hold Description = PAR.Item Label Line 1
  WRK.USR_Hold_Description = PAR.Item_Label_Line_1;

  // WRK.USR Description = CON.*BLANK
  WRK.USR_Description = *BLANK;

  // Execute function Rmv Apostrophe     30US.
  EXECUTE FUNCTION(Rmv Apostrophe     30US) TYPE(EXCUSRSRC) ('PMD6UFR');
  PARAMETER(WRK.USR_Hold_Description);
  PARAMETER(WRK.USR_Description);
  {
   E                    TXT     1   1  1               ARRAY 1
   E                    AR1        30  1               ARRAY 1
   E                    AR2        30  1               ARRAY 2
   C                     MOVEAWUCUNA    AR1              LOAD ARRAY
   C                     MOVEA*BLANKS   AR2              INIT TO BLANKS
   C                     Z-ADD1         X       30       SET COUNTER
   C                     Z-ADD1         Y       30       SET COUNTER
   C                     MOVE 'N'       STOP    1        FLAG
   C           X         DOWLT31
   C           AR1,X     IFEQ TXT,1
   C                     ADD  1         X
   C                     ELSE
   C                     MOVE AR1,X     AR2,Y
   C                     ADD  1         Y
   C                     ADD  1         X
   C                     END
   C                     END
   C                     MOVEAAR2       WUJNNA           LOAD OUTPUT
   **
   '
  }

  // PAR.PFS Item Label Line 1 = WRK.USR Description
  PAR.PFS_Item_Label_Line_1 = WRK.USR_Description;

  //?PFS Item Label line 2
  // WRK.USR Hold Description = PAR.Item Label Line 2
  WRK.USR_Hold_Description = PAR.Item_Label_Line_2;

  // WRK.USR Description = CON.*BLANK
  WRK.USR_Description = *BLANK;

  // Execute function Rmv Apostrophe     30US.
  EXECUTE FUNCTION(Rmv Apostrophe     30US) TYPE(EXCUSRSRC) ('PMD6UFR');
  PARAMETER(WRK.USR_Hold_Description);
  PARAMETER(WRK.USR_Description);
  {
   E                    TXT     1   1  1               ARRAY 1
   E                    AR1        30  1               ARRAY 1
   E                    AR2        30  1               ARRAY 2
   C                     MOVEAWUCUNA    AR1              LOAD ARRAY
   C                     MOVEA*BLANKS   AR2              INIT TO BLANKS
   C                     Z-ADD1         X       30       SET COUNTER
   C                     Z-ADD1         Y       30       SET COUNTER
   C                     MOVE 'N'       STOP    1        FLAG
   C           X         DOWLT31
   C           AR1,X     IFEQ TXT,1
   C                     ADD  1         X
   C                     ELSE
   C                     MOVE AR1,X     AR2,Y
   C                     ADD  1         Y
   C                     ADD  1         X
   C                     END
   C                     END
   C                     MOVEAAR2       WUJNNA           LOAD OUTPUT
   **
   '
  }

  // PAR.PFS Item Label Line 2 = WRK.USR Description
  PAR.PFS_Item_Label_Line_2 = WRK.USR_Description;

  //?PFS Item Label line 3
  // WRK.USR Hold Description = PAR.Item Label Line 3
  WRK.USR_Hold_Description = PAR.Item_Label_Line_3;

  // WRK.USR Description = CON.*BLANK
  WRK.USR_Description = *BLANK;

  // Execute function Rmv Apostrophe     30US.
  EXECUTE FUNCTION(Rmv Apostrophe     30US) TYPE(EXCUSRSRC) ('PMD6UFR');
  PARAMETER(WRK.USR_Hold_Description);
  PARAMETER(WRK.USR_Description);
  {
   E                    TXT     1   1  1               ARRAY 1
   E                    AR1        30  1               ARRAY 1
   E                    AR2        30  1               ARRAY 2
   C                     MOVEAWUCUNA    AR1              LOAD ARRAY
   C                     MOVEA*BLANKS   AR2              INIT TO BLANKS
   C                     Z-ADD1         X       30       SET COUNTER
   C                     Z-ADD1         Y       30       SET COUNTER
   C                     MOVE 'N'       STOP    1        FLAG
   C           X         DOWLT31
   C           AR1,X     IFEQ TXT,1
   C                     ADD  1         X
   C                     ELSE
   C                     MOVE AR1,X     AR2,Y
   C                     ADD  1         Y
   C                     ADD  1         X
   C                     END
   C                     END
   C                     MOVEAAR2       WUJNNA           LOAD OUTPUT
   **
   '
  }

  // PAR.PFS Item Label Line 3 = WRK.USR Description
  PAR.PFS_Item_Label_Line_3 = WRK.USR_Description;

 }

 CASE;

 // IF PAR.PFS Item Label Line 1 is Not Entered
 IF PAR.PFS_Item_Label_Line_1 = *BLANK;

 // PAR.PFS Item Label Line 1 = PAR.PFS Item Description 1
 PAR.PFS_Item_Label_Line_1 = PAR.PFS_Item_Description_1;

 ENDIF;

 // PAR.PFS Primary UOM = DB1.U/M - Primary
 PAR.PFS_Primary_UOM = DB1.UOM_Primary;

 // PAR.PFS Catch Weight Item = DB1.Catch Weight Status
 PAR.PFS_Catch_Weight_Item = DB1.Catch_Weight_Status;

 // PAR.PFS Unit Weight = DB1.Unit Weight
 PAR.PFS_Unit_Weight = DB1.Unit_Weight;

 // PAR.PFS Minimum Weight /Case = DB1.Minimum Weight Per Case
 PAR.PFS_Minimum_Weight_Case = DB1.Minimum_Weight_Per_Case;

 // PAR.PFS Maximum Weight /Case = DB1.Maximum Weight Per Case
 PAR.PFS_Maximum_Weight_Case = DB1.Maximum_Weight_Per_Case;

 // PAR.PFS Piece Count Item = DB1.Piece Count Item
 PAR.PFS_Piece_Count_Item = DB1.Piece_Count_Item;

 // PAR.PFS Pieces Per Unit = DB1.Pieces Per Bag * DB1.Bags Per Unit *Rounded
 PAR.PFS_Pieces_Per_Unit = DB1.Pieces_Per_Bag * DB1.Bags_Per_Unit 'H';

 // Call program Rtv Box ID for Item   XF.
 CALL PROGRAM(Rtv Box ID for Item   XF) ('PPOEXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.PFS_Box_ID);

 // PAR.PFS Item Misc Tare = DB1.Misc Tare Weight
 PAR.PFS_Item_Misc_Tare = DB1.Misc_Tare_Weight;

 // PAR.PFS Fresh Chill Code = CND.Day
 PAR.PFS_Fresh_Chill_Code = 'D';

 // PAR.PFS Fresh Chill Day/Hrs = CON.*ZERO
 PAR.PFS_Fresh_Chill_Day_Hrs = *ZERO;

 // PAR.PFS Use/Frz/Sell By Days = DB1.Use/Freeze/Sell By Days
 PAR.PFS_Use_Frz_Sell_By_Days = DB1.Use_Freeze_Sell_By_Days;

 // PAR.PFS Aged Frozen Days = CON.90
 PAR.PFS_Aged_Frozen_Days = 90;

 EXECUTE FUNCTION(Rtv Dept/Line         RT) TYPE(RTVOBJ) FILE(POCNREP)           AC1664090;
 PARAMETER(DB1.Item_Structure_Type_Code);
 PARAMETER(DB1.Item_Structure_Group_Code);
 PARAMETER(DB1.Item_Structure_Class_Code);
 PARAMETER(LCL.Department_Code);
 PARAMETER(LCL.Production_Line_Code);
 PARAMETER(NLL.WIP_Usage_Dept_Code);
 PARAMETER(NLL.WIP_Usage_Prod_Line_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF DB1.Item Type Code is Work in Process
 IF DB1.Item_Type_Code = 'WP';

 // PAR.PFS WIP Box ID = PAR.PFS Box ID
 PAR.PFS_WIP_Box_ID = PAR.PFS_Box_ID;

 // PAR.PFS WIP Misc Tare = PAR.PFS Item Misc Tare
 PAR.PFS_WIP_Misc_Tare = PAR.PFS_Item_Misc_Tare;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.WIP Item Code = DB1.Item Code + CON.9000000
 PAR.WIP_Item_Code = DB1.Item_Code + 9000000;

 // Call program Rtv Box ID for Item   XF.
 CALL PROGRAM(Rtv Box ID for Item   XF) ('PPOEXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.WIP_Item_Code);
 PARAMETER(PAR.PFS_WIP_Box_ID);

 // Call program Rtv Misc Tare         XF.
 CALL PROGRAM(Rtv Misc Tare         XF) ('PPO6XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.WIP_Item_Code);
 PARAMETER(PAR.PFS_WIP_Misc_Tare);

 ENDIF;

 // PAR.PFS Cases /Pallet = DB1.Number Cases On A Pallet
 PAR.PFS_Cases_Pallet = DB1.Number_Cases_On_A_Pallet;

 // PAR.PFS Default Warehouse = DB1.Default Warehouse
 PAR.PFS_Default_Warehouse = DB1.Default_Warehouse;

 //?10/17/06 PKD Uncommented out check for St. Jo default
 //?100% Frozen for Guymon & St. Joseph
 CASE;

 // IF DB1.Sold 100% Frozen is yes
 IF DB1.Sold_100_Percent_Frozen = 'Y';

 CASE;

 // IF DB1.Company Number is Guymon
 IF DB1.Company_Number = 360;

 // PAR.PFS Default Warehouse = CND.Cloverleaf Freezer
 PAR.PFS_Default_Warehouse = 'CF1';

 // IF DB1.Company Number is St. Joseph
 IF DB1.Company_Number = 960;

 // PAR.PFS Default Warehouse = CND.St. Joseph Cold Storage
 PAR.PFS_Default_Warehouse = 'SF1';

 // IF DB1.Company Number is Seaboard Triumph Foods
 IF DB1.Company_Number = 440;

 // PAR.PFS Default Warehouse = CND.Seaboard Triumph - Frozen
 PAR.PFS_Default_Warehouse = 'STF';

 ENDIF;

 ENDIF;

 //?Department ID
 CASE;

 // IF LCL.Department Code is Entered
 IF LCL.Department_Code <> *BLANK;

 // AND LCL.Production Line Code is Entered
 AND LCL.Production_Line_Code <> *BLANK;

 // LCL.Text 1 Length USR = CON.-
 LCL.Text_1_Length_USR = '-';

 // PAR.PFS Department ID = CONCAT(LCL.Department Code,LCL.Text 1 Length USR,CON.*ZERO)
 PAR.PFS_Department_ID = LCL.Department_Code + LCL.Text_1_Length_USR (*ZERO);

 // PAR.PFS Department ID = CONCAT(PAR.PFS Department ID,LCL.Production Line Code,CON.*ZERO)
 PAR.PFS_Department_ID = PAR.PFS_Department_ID + LCL.Production_Line_Code (*ZERO);

 ENDIF;

 //?07/18/2014 PKD E3163 Commented out the hardcoding of Manufacturing Code
 //?08/08/2020 ISE 418   Get manufacturer number from item default
 //?extension. If the value is blank, use Federal Tax
 //?from Company Name and Address file as default value
 //?comment out existing logic of retrieving the manufacturer id
 EXECUTE FUNCTION(RTV Manufacturer Code) TYPE(RTVOBJ) FILE(PBBTREP)              AC2185838;
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.@AS_Seal_Number_Numeric);
 {
  //?USER: Process Data record

  // PAR.IDE Manufacturer Nbr = DB1.IDE Manufacturer Nbr
  PAR.IDE_Manufacturer_Nbr = DB1.IDE_Manufacturer_Nbr;

 }

 CASE;

 // IF LCL.@AS Seal Number Numeric is ZeroValue
 IF LCL.@AS_Seal_Number_Numeric = 0;

 EXECUTE FUNCTION(RTV Federal ID         RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1379325;
 PARAMETER(DB1.Company_Number);
 PARAMETER(LCL.AS_Manufacturers_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.PFS Manufacturer ID = CVTVAR(LCL.AS Manufacturers Code)
 PAR.PFS_Manufacturer_ID = CVTVAR(LCL.AS_Manufacturers_Code);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.PFS Manufacturer ID = LCL.@AS Seal Number Numeric
 PAR.PFS_Manufacturer_ID = LCL.@AS_Seal_Number_Numeric;

 ENDIF;

 // PAR.PFS Chill Date Flag = CND.No
 PAR.PFS_Chill_Date_Flag = 'N';

 // PAR.PFS Chill Label Dt Offset = CON.*ZERO
 PAR.PFS_Chill_Label_Dt_Offset = *ZERO;

 // PAR.PFS Workcenter = DB1.Default Workcenter
 PAR.PFS_Workcenter = DB1.Default_Workcenter;

 //?-----------------------------
 //?02/22/07 PKD Replaced to use XF.  Also used for InfoQuest Export Rate
 //?Output Export/Domestic     RMC 4/27/06
 //?12/05/06 PKD Use Quality Level for Export or Domestic.
 // Call program Rtv Boning/Export Cls XF.
 CALL PROGRAM(Rtv Boning/Export Cls XF) ('PMD5XFR');
 PARAMETER(DB1.Quality_Level);
 PARAMETER(DB1.Item_Structure_Class_Code);
 PARAMETER(DB1.Item_Structure_Group_Code);
 PARAMETER(DB1.Item_Structure_Type_Code);
 PARAMETER(PAR.PFS_Bone_In_Boneless);
 PARAMETER(PAR.PFS_Pass_Rate_Exp_Dom);

 //?-----------------------------
 //?PFS Record Status
 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 // PAR.PFS Record Status = CND.Change
 PAR.PFS_Record_Status = 'C';

 CASE;

 // IF DB1.Item Structure Type Code is NE 900
 IF DB1.Item_Structure_Type_Code <> 900;

 // AND PAR.PFS Box ID is Not Entered
 AND PAR.PFS_Box_ID = *ZERO;

 // PAR.PFS Record Status = CND.Delete
 PAR.PFS_Record_Status = 'D';

 // PAR.PFS Workcenter = CON.*BLANK
 PAR.PFS_Workcenter = *BLANK;

 ENDIF;

 //?PFS Record Status
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.PFS Record Status = CND.Delete
 PAR.PFS_Record_Status = 'D';

 // PAR.PFS Workcenter = CON.*BLANK
 PAR.PFS_Workcenter = *BLANK;

 ENDIF;

 //?04/24/09 PKD Do not send down the Workcenter from the AS/400
 // PAR.PFS Workcenter = CON.*BLANK
 PAR.PFS_Workcenter = *BLANK;

 //?E3787 JJH 08/03/15 - Upd 5 new fields added to PFS Product.
 // PAR.PFS Item Structure Type = DB1.Item Structure Type Code
 PAR.PFS_Item_Structure_Type = DB1.Item_Structure_Type_Code;

 // PAR.PFS Item Structure Group = DB1.Item Structure Group Code
 PAR.PFS_Item_Structure_Group = DB1.Item_Structure_Group_Code;

 // PAR.PFS Item Structure Class = DB1.Item Structure Class Code
 PAR.PFS_Item_Structure_Class = DB1.Item_Structure_Class_Code;

 // PAR.PFS Base/Converted = DB1.Base/Conv/Loss Item
 PAR.PFS_Base_Converted = DB1.Base_Conv_Loss_Item;

 //?PAR.PFS Fresh/Frozen
 CASE;

 // IF DB1.Sold 100% Frozen is yes
 IF DB1.Sold_100_Percent_Frozen = 'Y';

 // PAR.PFS Fresh/Frozen = CND.Frozen
 PAR.PFS_Fresh_Frozen = 'FZ';

 //?PAR.PFS Fresh/Frozen
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.PFS Fresh/Frozen = CND.Fresh
 PAR.PFS_Fresh_Frozen = 'FR';

 ENDIF;

 //?E3787 JJH 09/22/15 - Upd 3 new fields added to PFS Product.
 EXECUTE FUNCTION(Rtv Type Description   RT) TYPE(RTVOBJ) FILE(OME8REP)          AC1229616;
 PARAMETER(DB1.Item_Structure_Type_Code);
 PARAMETER(PAR.PFS_Item_Structure_TypeD);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Group Desc) TYPE(RTVOBJ) FILE(OME9REP)                     AC1663396;
 PARAMETER(DB1.Item_Structure_Group_Code);
 PARAMETER(PAR.PFS_Item_Structure_GroupD);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Class Desc) TYPE(RTVOBJ) FILE(OMFAREP)                     AC1663397;
 PARAMETER(DB1.Item_Structure_Class_Code);
 PARAMETER(PAR.PFS_Item_Structure_ClassD);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Regul Code ID RT) TYPE(RTVOBJ) FILE(PBBTREP)               AC2215136;
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.PFS_Reg_Code_ID);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?04/10/24 SP WI608-Start
 EXECUTE FUNCTION(Rtv All fields        RT) TYPE(RTVOBJ) FILE(PBBNREP)           AC2225165;
 PARAMETER(PAR.PFS_Item_Code);
 PARAMETER(NLL.DP_Product_Description);
 PARAMETER(NLL.DP_Sell_Price);
 PARAMETER(NLL.DP_Standard_Cost);
 PARAMETER(NLL.DP_Product_Type);
 PARAMETER(NLL.DP_Base_Unit_of_Measure);
 PARAMETER(NLL.DP_Product_Group);
 PARAMETER(NLL.DP_Product_Class);
 PARAMETER(NLL.DP_Product_Form);
 PARAMETER(NLL.DP_Product_Brand);
 PARAMETER(LCL.PFS_Sub_Class);
 PARAMETER(NLL.DP_Total_Pieces_per_unit);
 PARAMETER(NLL.DP_Unit_Weight_Average);
 PARAMETER(NLL.DP_Record_Status);
 PARAMETER(NLL.DP_System_of_Record);
 PARAMETER(NLL.DP_Date_Time_Stamp);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Upd PFS Product       RT) TYPE(RTVOBJ) FILE(PPA5REP)           AC1732160;
 PARAMETER(PAR.PFS_Company_Number);
 PARAMETER(PAR.PFS_Item_Code);
 PARAMETER(PAR.PFS_Item_Description_1);
 PARAMETER(PAR.PFS_Item_Description_2);
 PARAMETER(PAR.PFS_Label_Type);
 PARAMETER(PAR.PFS_Item_Label_Line_1);
 PARAMETER(PAR.PFS_Item_Label_Line_2);
 PARAMETER(PAR.PFS_Item_Label_Line_3);
 PARAMETER(PAR.PFS_Primary_UOM);
 PARAMETER(PAR.PFS_Catch_Weight_Item);
 PARAMETER(PAR.PFS_Unit_Weight);
 PARAMETER(PAR.PFS_Minimum_Weight_Case);
 PARAMETER(PAR.PFS_Maximum_Weight_Case);
 PARAMETER(PAR.PFS_Piece_Count_Item);
 PARAMETER(PAR.PFS_Pieces_Per_Unit);
 PARAMETER(PAR.PFS_Box_ID);
 PARAMETER(PAR.PFS_Item_Misc_Tare);
 PARAMETER(PAR.PFS_WIP_Box_ID);
 PARAMETER(PAR.PFS_WIP_Misc_Tare);
 PARAMETER(PAR.PFS_Fresh_Chill_Code);
 PARAMETER(PAR.PFS_Fresh_Chill_Day_Hrs);
 PARAMETER(PAR.PFS_Use_Frz_Sell_By_Days);
 PARAMETER(PAR.PFS_Aged_Frozen_Days);
 PARAMETER(PAR.PFS_Department_ID);
 PARAMETER(PAR.PFS_Manufacturer_ID);
 PARAMETER(PAR.PFS_Cases_Pallet);
 PARAMETER(PAR.PFS_Default_Warehouse);
 PARAMETER(PAR.PFS_Chill_Date_Flag);
 PARAMETER(PAR.PFS_Chill_Label_Dt_Offset);
 PARAMETER(PAR.PFS_Workcenter);
 PARAMETER(PAR.PFS_Item_Primal_Group);
 PARAMETER(PAR.PFS_Bone_In_Boneless);
 PARAMETER(PAR.PFS_Pass_Rate_Exp_Dom);
 PARAMETER(PAR.PFS_Product_Unused_Sts_2);
 PARAMETER(PAR.PFS_Product_Unused_Sts_3);
 PARAMETER(PAR.PFS_Reg_Code_ID);
 PARAMETER(PAR.PFS_Product_Unused_Sts_5);
 PARAMETER(PAR.PFS_Item_Structure_Type);
 PARAMETER(PAR.PFS_Item_Structure_TypeD);
 PARAMETER(PAR.PFS_Item_Structure_Group);
 PARAMETER(PAR.PFS_Item_Structure_GroupD);
 PARAMETER(PAR.PFS_Item_Structure_Class);
 PARAMETER(PAR.PFS_Item_Structure_ClassD);
 PARAMETER(PAR.PFS_Fresh_Frozen);
 PARAMETER(PAR.PFS_Base_Converted);
 PARAMETER(LCL.PFS_Sub_Class);
 PARAMETER(PAR.PFS_Record_Status);
 {
  //?USER: Processing if Data record not found

  //?E3787 JJH 08/03/15 - Update 5 new fields in PFS Product
  //?WI608 Santosh 04/10/24 - Updated new field "PFS Sub Class".
  //?      Also set PFS Create Date as Job date & PFS Create Time as Job time
  EXECUTE FUNCTION(Crt PFS Product       CR) TYPE(CRTOBJ) FILE(PPA5REP)           AC1731453;
  PARAMETER(PAR.PFS_Company_Number);
  PARAMETER(PAR.PFS_Item_Code);
  PARAMETER(PAR.PFS_Item_Description_1);
  PARAMETER(PAR.PFS_Item_Description_2);
  PARAMETER(PAR.PFS_Label_Type);
  PARAMETER(PAR.PFS_Item_Label_Line_1);
  PARAMETER(PAR.PFS_Item_Label_Line_2);
  PARAMETER(PAR.PFS_Item_Label_Line_3);
  PARAMETER(PAR.PFS_Primary_UOM);
  PARAMETER(PAR.PFS_Catch_Weight_Item);
  PARAMETER(PAR.PFS_Unit_Weight);
  PARAMETER(PAR.PFS_Minimum_Weight_Case);
  PARAMETER(PAR.PFS_Maximum_Weight_Case);
  PARAMETER(PAR.PFS_Piece_Count_Item);
  PARAMETER(PAR.PFS_Pieces_Per_Unit);
  PARAMETER(PAR.PFS_Box_ID);
  PARAMETER(PAR.PFS_Item_Misc_Tare);
  PARAMETER(PAR.PFS_WIP_Box_ID);
  PARAMETER(PAR.PFS_WIP_Misc_Tare);
  PARAMETER(PAR.PFS_Fresh_Chill_Code);
  PARAMETER(PAR.PFS_Fresh_Chill_Day_Hrs);
  PARAMETER(PAR.PFS_Use_Frz_Sell_By_Days);
  PARAMETER(PAR.PFS_Aged_Frozen_Days);
  PARAMETER(PAR.PFS_Department_ID);
  PARAMETER(PAR.PFS_Manufacturer_ID);
  PARAMETER(PAR.PFS_Cases_Pallet);
  PARAMETER(PAR.PFS_Default_Warehouse);
  PARAMETER(PAR.PFS_Chill_Date_Flag);
  PARAMETER(PAR.PFS_Chill_Label_Dt_Offset);
  PARAMETER(PAR.PFS_Workcenter);
  PARAMETER(PAR.PFS_Item_Primal_Group);
  PARAMETER(PAR.PFS_Bone_In_Boneless);
  PARAMETER(PAR.PFS_Pass_Rate_Exp_Dom);
  PARAMETER(PAR.PFS_Product_Unused_Sts_2);
  PARAMETER(PAR.PFS_Product_Unused_Sts_3);
  PARAMETER(PAR.PFS_Reg_Code_ID);
  PARAMETER(PAR.PFS_Product_Unused_Sts_5);
  PARAMETER(PAR.PFS_Item_Structure_Type);
  PARAMETER(PAR.PFS_Item_Structure_TypeD);
  PARAMETER(PAR.PFS_Item_Structure_Group);
  PARAMETER(PAR.PFS_Item_Structure_GroupD);
  PARAMETER(PAR.PFS_Item_Structure_Class);
  PARAMETER(PAR.PFS_Item_Structure_ClassD);
  PARAMETER(PAR.PFS_Fresh_Frozen);
  PARAMETER(PAR.PFS_Base_Converted);
  PARAMETER(PAR.PFS_Sub_Class);
  PARAMETER(PAR.PFS_Record_Status);
  PARAMETER(PAR.PFS_Process_Status);
  PARAMETER(PAR.PFS_Error_Reason);
  PARAMETER(JOB.*Job_date);
  PARAMETER(JOB.*Job_time);
  PARAMETER(PAR.PFS_Change_Date);
  PARAMETER(PAR.PFS_Change_Time);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Create Stamp      IF) TYPE(EXCINTFUN)                      AC1732162;
   PARAMETER(DB1.PFS_Process_Status);
   PARAMETER(DB1.PFS_Create_Date);
   PARAMETER(DB1.PFS_Create_Time);
   {
    //?Execute internal function

    // PAR.PFS Process Status = CND.Not Processed
    PAR.PFS_Process_Status = *ZERO;

    // PAR.PFS Create Date = JOB.*Job date
    PAR.PFS_Create_Date = JOB.*Job_date;

    // PAR.PFS Create Time = JOB.*Job time
    PAR.PFS_Create_Time = JOB.*Job_time;

   }

  }

  //?USER: Process Data record

  //?E3787 JJH 08/03/15 - Update 5 new fields in PFS Product
  //?WI608 Santosh 04/10/24 - Updated new field "PFS Sub Class".
  EXECUTE FUNCTION(Chg PFS Product       CH) TYPE(CHGOBJ) FILE(PPA5REP)           AC1731454;
  PARAMETER(DB1.PFS_Company_Number);
  PARAMETER(DB1.PFS_Item_Code);
  PARAMETER(PAR.PFS_Item_Description_1);
  PARAMETER(PAR.PFS_Item_Description_2);
  PARAMETER(PAR.PFS_Label_Type);
  PARAMETER(PAR.PFS_Item_Label_Line_1);
  PARAMETER(PAR.PFS_Item_Label_Line_2);
  PARAMETER(PAR.PFS_Item_Label_Line_3);
  PARAMETER(PAR.PFS_Primary_UOM);
  PARAMETER(PAR.PFS_Catch_Weight_Item);
  PARAMETER(PAR.PFS_Unit_Weight);
  PARAMETER(PAR.PFS_Minimum_Weight_Case);
  PARAMETER(PAR.PFS_Maximum_Weight_Case);
  PARAMETER(PAR.PFS_Piece_Count_Item);
  PARAMETER(PAR.PFS_Pieces_Per_Unit);
  PARAMETER(PAR.PFS_Box_ID);
  PARAMETER(PAR.PFS_Item_Misc_Tare);
  PARAMETER(PAR.PFS_WIP_Box_ID);
  PARAMETER(PAR.PFS_WIP_Misc_Tare);
  PARAMETER(PAR.PFS_Fresh_Chill_Code);
  PARAMETER(PAR.PFS_Fresh_Chill_Day_Hrs);
  PARAMETER(PAR.PFS_Use_Frz_Sell_By_Days);
  PARAMETER(PAR.PFS_Aged_Frozen_Days);
  PARAMETER(PAR.PFS_Department_ID);
  PARAMETER(PAR.PFS_Manufacturer_ID);
  PARAMETER(PAR.PFS_Cases_Pallet);
  PARAMETER(PAR.PFS_Default_Warehouse);
  PARAMETER(PAR.PFS_Chill_Date_Flag);
  PARAMETER(PAR.PFS_Chill_Label_Dt_Offset);
  PARAMETER(PAR.PFS_Workcenter);
  PARAMETER(PAR.PFS_Item_Primal_Group);
  PARAMETER(PAR.PFS_Bone_In_Boneless);
  PARAMETER(PAR.PFS_Pass_Rate_Exp_Dom);
  PARAMETER(PAR.PFS_Product_Unused_Sts_2);
  PARAMETER(PAR.PFS_Product_Unused_Sts_3);
  PARAMETER(PAR.PFS_Reg_Code_ID);
  PARAMETER(PAR.PFS_Product_Unused_Sts_5);
  PARAMETER(PAR.PFS_Item_Structure_Type);
  PARAMETER(PAR.PFS_Item_Structure_TypeD);
  PARAMETER(PAR.PFS_Item_Structure_Group);
  PARAMETER(PAR.PFS_Item_Structure_GroupD);
  PARAMETER(PAR.PFS_Item_Structure_Class);
  PARAMETER(PAR.PFS_Item_Structure_ClassD);
  PARAMETER(PAR.PFS_Fresh_Frozen);
  PARAMETER(PAR.PFS_Base_Converted);
  PARAMETER(PAR.PFS_Sub_Class);
  PARAMETER(PAR.PFS_Record_Status);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Change Stamp      IF) TYPE(EXCINTFUN)                      AC1732163;
   PARAMETER(DB1.PFS_Change_Date);
   PARAMETER(DB1.PFS_Change_Time);
   {
    //?Execute internal function

    // PAR.PFS Change Date = JOB.*Job date
    PAR.PFS_Change_Date = JOB.*Job_date;

    // PAR.PFS Change time = JOB.*Job time
    PAR.PFS_Change_Time = JOB.*Job_time;

   }

  }

 }

 //?04/10/24 SP WI608-End
 //?*** DONT SEND PT AND REJECTS ANY MORE     *** RMC 4/6/6
 ENDIF;

}


