// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBHDDFR
// ?Date: 31.08.2025 Time: 22:18:13
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

//?USER: Initialize subfile control

CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

MOVE *ALL (To: CTL From: PAR);

// CTL.Company Number = WRK.Company Number
CTL.Company_Number = WRK.Company_Number;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

ENDIF;

// PGM.*Scan limit = CON.1000
PGM.*Scan_limit = 1000;

// LCL.Company Number = CTL.Company Number
LCL.Company_Number = CTL.Company_Number;

//?USER: Initialize subfile record from DBF record

CASE;

// IF RCD.Order Number EQ LCL.USR Order Number
IF RCD.Order_Number = LCL.USR_Order_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

//?Selecting by Ship To Customer Number
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF CTL.Ship To Customer is not equal to zero
IF CTL.Ship_To_Customer <> *ZERO;

CASE;

// IF RCD.Ship To Customer EQ CTL.Ship To Customer
IF RCD.Ship_To_Customer = CTL.Ship_To_Customer;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Selecting by Header Status
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF CTL.Header Status is *None
IF CTL.Header_Status = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.Header Status EQ CTL.Header Status
IF RCD.Header_Status = CTL.Header_Status;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

// LCL.USR Order Number = DB1.Order Number
LCL.USR_Order_Number = DB1.Order_Number;

EXECUTE FUNCTION(RTV MPR Bld Dwnld     RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2052459;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Type_Sales);
PARAMETER(LCL.AR_Customer_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(RCD.Ship_To_Zip_Postal_Code);
PARAMETER(LCL.Order_Date);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Header_Status);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Date_of_Original_Entry);
PARAMETER(LCL.Order_Weight_Total);
PARAMETER(RCD.Requested_Delivery_Date);
PARAMETER(RCD.Price_Status);
PARAMETER(RCD.Shipping_Method);
PARAMETER(LCL.Export_Status);
PARAMETER(LCL.Block_Order_Flag);
PARAMETER(LCL.Type_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 EXECUTE FUNCTION(Rtv Customer Type     RT) TYPE(RTVOBJ) FILE(CAEOREP)           AC1585599;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(PAR.Type_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

}


//?dft usa
CASE;

// IF RCD.Country Code is Blank
IF RCD.Country_Code = *BLANK;

// RCD.Country Code = CND.USA
RCD.Country_Code = 'USA';

ENDIF;

// LCL.Country Code = RCD.Country Code
LCL.Country_Code = RCD.Country_Code;

// LCL.Text USR 5 = RCD.Ship To Zip/Postal Code
LCL.Text_USR_5 = RCD.Ship_To_Zip_Postal_Code;

// RCD.MPR Zip Code = CVTVAR(LCL.Text USR 5)
RCD.MPR_Zip_Code = CVTVAR(LCL.Text_USR_5);

//?Mexico
CASE;

// IF RCD.Country Code is Mexico
IF RCD.Country_Code = 'MEX';

//?Default Texas zip for MEX
CASE;

// IF RCD.Ship To State Code is International Accounts
IF RCD.Ship_To_State_Code = '.';

// RCD.Ship To State Code = CND.Texas
RCD.Ship_To_State_Code = 'TX';

// RCD.MPR Zip Code = CND.Texas 73301
RCD.MPR_Zip_Code = 73301;

ENDIF;

// RCD.Country Code = CND.USA
RCD.Country_Code = 'USA';

ENDIF;

EXECUTE FUNCTION(RTV Val Canada state  RT) TYPE(RTVOBJ) FILE(PBARCPP)           AC2065080;
PARAMETER('CAN');
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// LCL.Country Code = CND.Canada
LCL.Country_Code = 'CAN';

ENDIF;

//?Canada province
CASE;

// IF LCL.Country Code is Canada
IF LCL.Country_Code = 'CAN';

EXECUTE FUNCTION(Rtv Consignee         RT) TYPE(RTVOBJ) FILE(PDMRREP)           AC2058046;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('H');
PARAMETER(LCL.ED_Consignee_Addr_1);
PARAMETER(LCL.ED_Consignee_Addr_2);
PARAMETER(LCL.ED_Consignee_Addr_3);
PARAMETER(LCL.ED_Consignee_Addr_4);
PARAMETER(LCL.ED_MPR_Canadian_Province);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF LCL.ED MPR Canadian Province is *ALL values
IF LCL.ED_MPR_Canadian_Province = 'ON'/'AB'/'BC'/'YU'/'MB'/'NT'/'NU'/'NS'/'SA'/'QB'/'QC';

// RCD.Ship To State Code = LCL.ED MPR Canadian Province
RCD.Ship_To_State_Code = LCL.ED_MPR_Canadian_Province;

ENDIF;

// RCD.MPR Zip Code = CND.Canada default
RCD.MPR_Zip_Code = 99999;

ENDIF;

EXECUTE FUNCTION(Rtv Rate per Zip      RT) TYPE(RTVOBJ) FILE(PBARCPP)           AC2056566;
PARAMETER(LCL.Country_Code);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(RCD.MPR_Zip_Code);
PARAMETER(LCL.MPR_FOB_Rate_per_Mile);
PARAMETER(RCD.MPR_FOB_Miles_to_Omaha);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF RCD.MPR FOB Miles to Omaha is Not Entered
IF RCD.MPR_FOB_Miles_to_Omaha = *ZERO;

// RCD.Text 1 Length USR = CND.Question mark
RCD.Text_1_Length_USR = '?';

ENDIF;

ENDIF;

//?CALC: Subfile control function fields

//?Selecting Company
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Company Number
AND PGM.*Cursor_field = CTL.Company_Number;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(CTL.Company_Number);

ENDIF;

//?Select Warehouse
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Warehouse Code
AND PGM.*Cursor_field = CTL.Warehouse_Code;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(CTL.Warehouse_Code);

ENDIF;

//?Verify Active Warehouse
CASE;

// IF CTL.Warehouse Code is Warehouse Code not Blank
IF CTL.Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Warehouse Codes not found.'
ERROR(USR0007);
MSGPARM(CTL.Warehouse_Code);

ENDIF;

ENDIF;

//?Select Customer Number
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Ship To Customer
AND PGM.*Cursor_field = CTL.Ship_To_Customer;

// Call program SEL Cust/ShpTo Flag 'Y'SR.
CALL PROGRAM(SEL Cust/ShpTo Flag 'Y'SR) ('PDYSSRR');
PARAMETER(CTL.Ship_To_Customer);

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?**************************************************************************
//?Selecting by Company Number
CASE;

// IF CTL.Company Number NE LCL.Company Number
IF CTL.Company_Number <> LCL.Company_Number;

// LCL.USR Order Number = CON.*ZERO
LCL.USR_Order_Number = *ZERO;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Selecting by Customer Number
CASE;

// IF CTL.Ship To Customer NE PAR.Ship To Customer
IF CTL.Ship_To_Customer <> PAR.Ship_To_Customer;

// PAR.Ship To Customer = CTL.Ship To Customer
PAR.Ship_To_Customer = CTL.Ship_To_Customer;

// LCL.USR Order Number = CON.*ZERO
LCL.USR_Order_Number = *ZERO;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Selecting by Header Status
CASE;

// IF CTL.Header Status NE PAR.Header Status
IF CTL.Header_Status <> PAR.Header_Status;

// PAR.Header Status = CTL.Header Status
PAR.Header_Status = CTL.Header_Status;

// LCL.USR Order Number = CON.*ZERO
LCL.USR_Order_Number = *ZERO;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?1=Sel for Reprocess -- blank out mpr sts fld
CASE;

// IF RCD.*SFLSEL is *Select
IF RCD.*SFLSEL = '1'/'1';

EXECUTE FUNCTION(Rtv/Chg MPR Sts       RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2058348;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(*BLANK);
{
 //?USER: Initialize routine

 // WRK.Order Number = CON.*ZERO
 WRK.Order_Number = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.OD MPR Sent to USDA Sts is Error
 IF DB1.OD_MPR_Sent_to_USDA_Sts = 'E';

 EXECUTE FUNCTION(Chg MPR USDA Sts      CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC2052542;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(PAR.OD_MPR_Sent_to_USDA_Sts);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

}


// LCL.USR Order Number = CON.*ZERO
LCL.USR_Order_Number = *ZERO;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Option 2 = edt zip
CASE;

// IF RCD.*SFLSEL is *Edit
IF RCD.*SFLSEL = '2'/'2';

// Call program EDT State/Zip Code    E1.
CALL PROGRAM(EDT State/Zip Code    E1) ('PBHGE1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

// LCL.USR Order Number = CON.*ZERO
LCL.USR_Order_Number = *ZERO;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Option 5 = Order Inquiry Detail
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

// Call program DSP Ord Inquiry Detail DF.
CALL PROGRAM(DSP Ord Inquiry Detail DF) ('PDPZDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(PAR.Application_Code);

ENDIF;

//?Option 8=Ordered vs. Shipped Details
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

// Call program DSP Order vs. Ship Dtl DF.
CALL PROGRAM(DSP Order vs. Ship Dtl DF) ('PDP7DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Type_Sales);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Customer_Name);
PARAMETER(LCL.Customer_Purchase_Order_#);
PARAMETER(LCL.Order_Date);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Header_Status);
PARAMETER(LCL.Credit_Hold);
PARAMETER(LCL.Production_Hold);
PARAMETER(LCL.New_Customer_Hold);
PARAMETER(RCD.Sales_Route_Code);
PARAMETER(PAR.Application_Code);

ENDIF;

//?Option 9 = dsp cust addr
CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

// Call program DSP Customer Address  DR.
CALL PROGRAM(DSP Customer Address  DR) ('PDGID1R');
PARAMETER(RCD.Ship_To_Customer);

ENDIF;

//?3=Sel for Dont Reprocess (zip or price error )
CASE;

// IF RCD.*SFLSEL is *Copy
IF RCD.*SFLSEL = '3';

EXECUTE FUNCTION(Rtv/Chg MPR Sts       RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2058348;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('Z');
{
 //?USER: Initialize routine

 // WRK.Order Number = CON.*ZERO
 WRK.Order_Number = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.OD MPR Sent to USDA Sts is Error
 IF DB1.OD_MPR_Sent_to_USDA_Sts = 'E';

 EXECUTE FUNCTION(Chg MPR USDA Sts      CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC2052542;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(PAR.OD_MPR_Sent_to_USDA_Sts);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

}


// LCL.USR Order Number = CON.*ZERO
LCL.USR_Order_Number = *ZERO;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process command keys

CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

// Call program Dsp MPR FOB Omaha Rt  DF.
CALL PROGRAM(Dsp MPR FOB Omaha Rt  DF) ('PBHCDFR');

ENDIF;

