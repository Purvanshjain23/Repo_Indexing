// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLCADFR
// ?Date: 14.08.2025 Time: 02:53:44
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?...H16853 ISE 11/05/2020-Recompiled due to change in Buy Order Number
//?FP1180 The Business Rules are different then the Edit Delivery Pgm
DO;

//?FP1180
//?Per LeAnn all changes to programs for the driver in reference
//?to the trucker will not happen here due to the
//?user does not use this program at receiving time
//?this function is only used at scheduling
//?For the Driver Validation & Driver Selection do not use
//?Trucker field from the validation of the driver nor on the
//?selection of the driver
//?Prior to FP1180 the logic for this function and the Edit Delivery
//?Tracking were the same - NOW this function will stay as.
//?The Edit Delivery Tracking will be the function that the
//?Trucker Code is protected
//?Do not pull the Trucker from the Driver Validation nor
//?the Driver selection.
//?This program is only being change to except the parms
//?into this function --- BUT DO NOT USE THEM PER LEANNE.
ENDDO;

//?* note
//?This function is assuming that all the records are Internal
//?User does not use this function for external producers
EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


//?E2423 Mtech Live or Not Live *** Interfaces to HPS ***
//?E2423 Mtech Live extra review with Purva and Susan
//?Get the MTech Live Yes or No
DO;

//?Mtech Live Yes or no
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('MTECHLIVE');
PARAMETER(WRK.System_Value_Alpha_USR);

// LCL.MTech Live Yes or No = WRK.System Value Alpha    USR
LCL.MTech_Live_Yes_or_No = WRK.System_Value_Alpha_USR;

ENDDO;

//?USER: Initialize subfile control

//?Accum for CTL context head totals
DO;

// CTL.DSH Planned Kill Head = PAR.DSH Planned Kill Head
CTL.DSH_Planned_Kill_Head = PAR.DSH_Planned_Kill_Head;

EXECUTE FUNCTION(Rtv Accum by SrcCode  RT) TYPE(RTVOBJ) FILE(PLAECPP)           AB1245734;
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.DSH_Kill_Date);
PARAMETER(CTL.Head_Total_CNT_USR);
PARAMETER(CTL.Head_Total_OTH_USR);
PARAMETER(CTL.Head_Total_SBD_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?Date 03/17/2004 By Susan Mason  TFM Release 01 for Head Total SBD
 CASE;

 // IF DB1.SR Source Code is Contract
 IF DB1.SR_Source_Code = 'CPR';

 // PAR.Head Total CNT USR = PAR.Head Total CNT USR + DB1.DSD Scheduled Delv Head
 PAR.Head_Total_CNT_USR = PAR.Head_Total_CNT_USR + DB1.DSD_Scheduled_Delv_Head;

 // IF DB1.SR Source Code is Open Daily Buys
 IF DB1.SR_Source_Code = 'ODB';

 // PAR.Head Total OTH USR = PAR.Head Total OTH USR + DB1.DSD Scheduled Delv Head
 PAR.Head_Total_OTH_USR = PAR.Head_Total_OTH_USR + DB1.DSD_Scheduled_Delv_Head;

 // IF DB1.SR Source Code is Seaboard
 IF DB1.SR_Source_Code = 'SBD';

 // OR DB1.SR Source Code is Triumph Foods Member
 OR DB1.SR_Source_Code = 'TFM';

 //?Date 03/17/2004 Susan Mason Add condition = Triumph Foods Member
 // PAR.Head Total SBD USR = PAR.Head Total SBD USR + DB1.DSD Scheduled Delv Head
 PAR.Head_Total_SBD_USR = PAR.Head_Total_SBD_USR + DB1.DSD_Scheduled_Delv_Head;

 ENDIF;

}


// Compute: Sched Head USR
CTL.Scheduled_Head_USR = ( CTL.Head_Total_SBD_USR + CTL.Head_Total_CNT_USR )                       +
+ CTL.Head_Total_OTH_USR;

// CTL.DIFF Total Head = CTL.DSH Planned Kill Head - CTL.Scheduled Head USR
CTL.DIFF_Total_Head = CTL.DSH_Planned_Kill_Head - CTL.Scheduled_Head_USR;

ENDDO;

//?USER: Initialize subfile record from DBF record

// RCD.Driver USR = RCD.DSD Driver
RCD.Driver_USR = RCD.DSD_Driver;

// RCD.Trucker Code HPS USR = RCD.DSD Trucker Code HPS
RCD.Trucker_Code_HPS_USR = RCD.DSD_Trucker_Code_HPS;

// RCD.DT Trailer ID = RCD.DSD Trailer ID
RCD.DT_Trailer_ID = RCD.DSD_Trailer_ID;

// RCD.DT Truck ID = RCD.DSD Truck ID
RCD.DT_Truck_ID = RCD.DSD_Truck_ID;

// RCD.Loading Crew USR = RCD.DSD Loading Crew
RCD.Loading_Crew_USR = RCD.DSD_Loading_Crew;

// RCD.Sched Route Start Pnt USR = RCD.DSD Sched Route Start Pnt
RCD.Sched_Route_Start_Pnt_USR = RCD.DSD_Sched_Route_Start_Pnt;

// RCD.Sched Route Start Tim USR = RCD.DSD Sched Route Start Tim
RCD.Sched_Route_Start_Tim_USR = RCD.DSD_Sched_Route_Start_Tim;

// RCD.Sch Farm Depart Time USR = RCD.DSD Sch Farm Depart Time
RCD.Sch_Farm_Depart_Time_USR = RCD.DSD_Sch_Start_Load_Time;

// RCD.Sched Route Start Dte USR = RCD.DSD Sched Route Start Dte
RCD.Sched_Route_Start_Dte_USR = RCD.DSD_Sched_Route_Start_Dte;

// RCD.Sch Farm Depart Date USR = RCD.DSD Sch Farm Depart Date
RCD.Sch_Farm_Depart_Date_USR = RCD.DSD_Sch_Start_Load_Date;

// RCD.Code USR = RCD.CHR Code
RCD.Code_USR = RCD.CHR_Code;

//?E2423 Mtech Live extra review with Purva and Susan
CASE;

// IF LCL.MTech Live Yes or No is Yes MTech is Live
IF LCL.MTech_Live_Yes_or_No = 'Y';

//?E2423 WILL NOT BE USING THIS PROGRAM
// IF WRK.MTech Live Yes or No is No MTech not Live
IF WRK.MTech_Live_Yes_or_No = 'N';

//?E2423 verify that this is working
// Call program Val HPS Farm Site DS  UP.
CALL PROGRAM(Val HPS Farm Site DS  UP) ('HP271');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(RCD.DSD_Farm_Site_Code);
PARAMETER(NLL.Farm_site_Name_f_HPS_USR);
PARAMETER(NLL.State);
PARAMETER(WRK.DT_Transportation_Office);
PARAMETER(NLL.DT_Trucker_Code_HPS);
PARAMETER(NLL.DT_Loading_Crew);
PARAMETER(NLL.DT_Driver);
PARAMETER(NLL.MTech_Farm_Site_Ref);
PARAMETER(NLL.MTech_Trucker_Ref);
PARAMETER(NLL.MTech_Load_Crew_Ref);
PARAMETER(NLL.MTech_Driver_Ref);

CASE;

// IF DB1.DSD Transportation Office EQ WRK.Blank USR
IF DB1.DSD_Transportation_Office = WRK.Blank_USR;

// RCD.DSD Transportation Office = WRK.DT Transportation Office
RCD.DSD_Transportation_Office = WRK.DT_Transportation_Office;

ENDIF;

CASE;

// IF RCD.DSD Sched Route Start Pnt EQ WRK.Blank Usr 1 fld Usr
IF RCD.DSD_Sched_Route_Start_Pnt = WRK.Blank_Usr_1_fld_Usr;

// Call program Z1Val HPS Trans Office UP.
CALL PROGRAM(Z1Val HPS Trans Office UP) ('HP290');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(RCD.DSD_Transportation_Office);
PARAMETER(NLL.HPS_Trans_Ofc_Desc_USR);
PARAMETER(WRK.RS_Record_Status);
PARAMETER(RCD.Sched_Route_Start_Pnt_USR);

ENDIF;

ENDIF;

CASE;

// IF LCL.MTech Live Yes or No is Yes MTech is Live
IF LCL.MTech_Live_Yes_or_No = 'Y';

//?E2423 WILL NOT BE USING THIS PROGRAM
// IF LCL.MTech Live Yes or No is Yes MTech is Live
IF LCL.MTech_Live_Yes_or_No = 'Y';

CASE;

// IF RCD.Driver USR is Not Entered
IF RCD.Driver_USR = *BLANK;

// RCD.Driver USR = WRK.DT Driver
RCD.Driver_USR = WRK.DT_Driver;

ENDIF;

CASE;

// IF RCD.Trucker Code HPS USR is Not Entered
IF RCD.Trucker_Code_HPS_USR = *BLANK;

// RCD.Trucker Code HPS USR = WRK.DT Trucker Code HPS
RCD.Trucker_Code_HPS_USR = WRK.DT_Trucker_Code_HPS;

ENDIF;

CASE;

// IF RCD.Loading Crew USR is Not Entered
IF RCD.Loading_Crew_USR = *BLANK;

// RCD.Loading Crew USR = WRK.DT Loading Crew
RCD.Loading_Crew_USR = WRK.DT_Loading_Crew;

ENDIF;

CASE;

// IF RCD.DT Truck ID is Not Entered
IF RCD.DT_Truck_ID = *BLANK;

// OR RCD.DT Trailer ID is Not Entered
OR RCD.DT_Trailer_ID = *BLANK;

// Call program Val HPS Driver        UP.
CALL PROGRAM(Val HPS Driver        UP) ('HP272');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(RCD.Driver_USR);
PARAMETER(NLL.HPS_Driver_Name);
PARAMETER(NLL.DT_Transportation_Office);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.DT_Truck_ID);
PARAMETER(RCD.DT_Trailer_ID);
PARAMETER(NLL.DT_Trucker_Code_HPS);
PARAMETER(NLL.DT_Trucker_Name_Usr_25);
PARAMETER(NLL.MTech_Trucker_Ref);
PARAMETER(NLL.MTech_Driver_Ref);

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?F4=PROMPT CTL
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.DSD Farm Site Code
IF PGM.*Cursor_field = CTL.DSD_Farm_Site_Code;

// Call program Sel HPS Farm Site     UP.
CALL PROGRAM(Sel HPS Farm Site     UP) ('HP5003');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(CTL.DSD_Farm_Site_Code);
PARAMETER(WRK.Farm_site_Name_f_HPS_USR);
PARAMETER(NLL.MTech_Farm_Site_Ref);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> CTL.DSD Driver
IF PGM.*Cursor_field = CTL.DSD_Driver;

// Call program Sel HPS Driver        UP.
CALL PROGRAM(Sel HPS Driver        UP) ('HP574');
PARAMETER('A');
PARAMETER(CTL.DSD_Driver);
PARAMETER(WRK.Condition_Name_USR);
PARAMETER(CTL.DSD_Transportation_Office);
PARAMETER(WRK.UnUsed_Fld_5_Usr);
PARAMETER(WRK.UnUsed_Txt_25_Usr);
PARAMETER(NLL.MTech_Trucker_Ref);
PARAMETER(NLL.MTech_Driver_Ref);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> CTL.DSD Trucker Code HPS
IF PGM.*Cursor_field = CTL.DSD_Trucker_Code_HPS;

// Call program Sel HPS Trucker       UP.
CALL PROGRAM(Sel HPS Trucker       UP) ('HP538');
PARAMETER('A');
PARAMETER(CTL.DSD_Trucker_Code_HPS);
PARAMETER(WRK.Condition_Name_USR);
PARAMETER(NLL.MTech_Trucker_Ref);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> CTL.DSD Loading Crew
IF PGM.*Cursor_field = CTL.DSD_Loading_Crew;

// Call program Sel HPS Load Crew     UP.
CALL PROGRAM(Sel HPS Load Crew     UP) ('HP592');
PARAMETER('A');
PARAMETER(CTL.DSD_Loading_Crew);
PARAMETER(WRK.Condition_Name_USR);
PARAMETER(NLL.MTech_Load_Crew_Ref);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

CASE;

// IF LCL.MTech Live Yes or No is Yes MTech is Live
IF LCL.MTech_Live_Yes_or_No = 'Y';

// LCL.Return Code USR = CND.*Normal
LCL.Return_Code_USR = *BLANK;

// IF LCL.MTech Live Yes or No is No MTech not Live
IF LCL.MTech_Live_Yes_or_No = 'N';

//?F4=PROMPT RCD
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> RCD.Driver USR
IF PGM.*Cursor_field = RCD.Driver_USR;

// Call program Sel HPS Driver        UP.
CALL PROGRAM(Sel HPS Driver        UP) ('HP574');
PARAMETER('A');
PARAMETER(RCD.Driver_USR);
PARAMETER(WRK.Condition_Name_USR);
PARAMETER(RCD.DSD_Transportation_Office);
PARAMETER(WRK.UnUsed_Fld_5_Usr);
PARAMETER(WRK.UnUsed_Txt_25_Usr);
PARAMETER(NLL.MTech_Trucker_Ref);
PARAMETER(NLL.MTech_Driver_Ref);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> RCD.Trucker Code HPS USR
IF PGM.*Cursor_field = RCD.Trucker_Code_HPS_USR;

// Call program Sel HPS Trucker       UP.
CALL PROGRAM(Sel HPS Trucker       UP) ('HP538');
PARAMETER('A');
PARAMETER(RCD.Trucker_Code_HPS_USR);
PARAMETER(WRK.Condition_Name_USR);
PARAMETER(NLL.MTech_Trucker_Ref);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> RCD.Loading Crew USR
IF PGM.*Cursor_field = RCD.Loading_Crew_USR;

// Call program Sel HPS Load Crew     UP.
CALL PROGRAM(Sel HPS Load Crew     UP) ('HP592');
PARAMETER('A');
PARAMETER(RCD.Loading_Crew_USR);
PARAMETER(WRK.Condition_Name_USR);
PARAMETER(NLL.MTech_Load_Crew_Ref);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> RCD.Code USR
IF PGM.*Cursor_field = RCD.Code_USR;

// Call program Sel Contrct Hauler Rs SR.
CALL PROGRAM(Sel Contrct Hauler Rs SR) ('PLDSSRR');
PARAMETER(RCD.Code_USR);

ENDIF;

ENDIF;

// LCL.Return Code USR = CND.*Normal
LCL.Return_Code_USR = *BLANK;

//?Validate Driver
CASE;

// IF RCD.Driver USR is Entered
IF RCD.Driver_USR <> *BLANK;

// Call program Val HPS Driver        UP.
CALL PROGRAM(Val HPS Driver        UP) ('HP272');
PARAMETER(LCL.Return_Code_USR);
PARAMETER(RCD.Driver_USR);
PARAMETER(NLL.HPS_Driver_Name);
PARAMETER(NLL.DT_Transportation_Office);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.DT_Truck_ID);
PARAMETER(RCD.DT_Trailer_ID);
PARAMETER(WRK.UnUsed_Fld_5_Usr);
PARAMETER(WRK.UnUsed_Txt_25_Usr);
PARAMETER(NLL.MTech_Trucker_Ref);
PARAMETER(NLL.MTech_Driver_Ref);

CASE;

// IF LCL.Return Code USR is Error Found
IF LCL.Return_Code_USR = 'ERROR';

// Send error message - 'Driver &1 not found.'
ERROR(PRK1066);
MSGPARM(RCD.Driver_USR);

ENDIF;

CASE;

// IF RCD.DT Truck ID is Not Entered
IF RCD.DT_Truck_ID = *BLANK;

// RCD.DT Truck ID = WRK.DT Truck ID
RCD.DT_Truck_ID = WRK.DT_Truck_ID;

ENDIF;

CASE;

// IF RCD.DT Trailer ID is Not Entered
IF RCD.DT_Trailer_ID = *BLANK;

// RCD.DT Trailer ID = WRK.DT Trailer ID
RCD.DT_Trailer_ID = WRK.DT_Trailer_ID;

ENDIF;

ENDIF;

//?Validate Trucker  / Contract Hauler Reason
CASE;

// IF RCD.Trucker Code HPS USR is Entered
IF RCD.Trucker_Code_HPS_USR <> *BLANK;

// Call program Val HPS Trucker       UP.
CALL PROGRAM(Val HPS Trucker       UP) ('HP275');
PARAMETER(LCL.Return_Code_USR);
PARAMETER(RCD.Trucker_Code_HPS_USR);
PARAMETER(WRK.HPS_Trucker_Name);
PARAMETER(WRK.HPS_Trucker_Type);
PARAMETER(WRK.RS_Record_Status);
PARAMETER(NLL.MTech_Trucker_Ref);

CASE;

// IF LCL.Return Code USR is Error Found
IF LCL.Return_Code_USR = 'ERROR';

// Send error message - 'Trucker &1 not found.'
ERROR(PRK1064);
MSGPARM(RCD.Trucker_Code_HPS_USR);

ENDIF;

//?Val Contract Hauler Reason   9/02/03
CASE;

// IF WRK.HPS Trucker Type is Contract
IF WRK.HPS_Trucker_Type = 'C';

CASE;

// IF RCD.Code USR is Not Entered
IF RCD.Code_USR = *BLANK;

// Send error message - 'Contract Hauler Reason required for Contracted Trucker &1'
ERROR(PRK1096);
MSGPARM(RCD.Code_USR);
MSGPARM(RCD.Trucker_Code_HPS_USR);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Contrct Hauler Rs RT) TYPE(RTVOBJ) FILE(PLANREP)           AB1255540;
PARAMETER(RCD.Code_USR);
PARAMETER(WRK.Return_Code_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Return Code USR = CND.*Record does not exist
 PAR.Return_Code_USR = 'Y2U0005';

 //?USER: Process Data record

 // PAR.Return Code USR = CND.*Normal
 PAR.Return_Code_USR = *BLANK;

}


CASE;

// IF WRK.Return Code USR is *Record does not exist
IF WRK.Return_Code_USR = 'Y2U0005';

// Send error message - 'Contract Hauler Reason not found.'
ERROR(PRK1094);
MSGPARM(RCD.Code_USR);

ENDIF;

ENDIF;

//?Val Contract Hauler Reason   9/02/03
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Code USR = CON.*BLANK
RCD.Code_USR = *BLANK;

ENDIF;

ENDIF;

//?Validate Loading Crew
CASE;

// IF RCD.Loading Crew USR is Entered
IF RCD.Loading_Crew_USR <> *BLANK;

// Call program Val HPS Loading Crew  UP.
CALL PROGRAM(Val HPS Loading Crew  UP) ('HP273');
PARAMETER(LCL.Return_Code_USR);
PARAMETER(RCD.Loading_Crew_USR);
PARAMETER(WRK.HPS_Loading_Crew_Desc);
PARAMETER(WRK.DT_Transportation_Office);
PARAMETER(WRK.RS_Record_Status);
PARAMETER(NLL.MTech_Load_Crew_Ref);

CASE;

// IF LCL.Return Code USR is Error Found
IF LCL.Return_Code_USR = 'ERROR';

// Send error message - 'Loading Crew &1 not found.'
ERROR(PRK1065);
MSGPARM(RCD.Loading_Crew_USR);

ENDIF;

ENDIF;

//?Validate Sch Start Loading
CASE;

// IF RCD.Sch Farm Depart Date USR is Entered
IF RCD.Sch_Farm_Depart_Date_USR <> *ZERO;

//?Validate Sch Start Loading
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Date is Required'
ERROR(PRK0641);
MSGPARM(RCD.Sch_Farm_Depart_Date_USR);

ENDIF;

CASE;

// IF LCL.Return Code USR is *Normal
IF LCL.Return_Code_USR = *BLANK;

//?UPDATE
CASE;

// IF RCD.DSD Lock Status is Open
IF RCD.DSD_Lock_Status = 'O';

CASE;

// IF RCD.DSD HPS Post Status is Posted/Deleted/Repost
IF RCD.DSD_HPS_Post_Status = 'D'/'P'/'R'/'E';

//?SET:  Movement Printed
CASE;

// IF RCD.DSD Movement Printed is Printed
IF RCD.DSD_Movement_Printed = 'P';

// RCD.DSD Movement Printed = CND.Reprint
RCD.DSD_Movement_Printed = 'R';

ENDIF;

EXECUTE FUNCTION(Chg Delv Sched Dtl    CH) TYPE(CHGOBJ) FILE(PLAECPP)           AB1244728;
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.DSH_Kill_Date);
PARAMETER(RCD.DSD_Delivery_Date);
PARAMETER(RCD.DSD_Delivery_Time);
PARAMETER(RCD.DSD_Delivery_Time_Seq);
PARAMETER(RCD.DSD_Scheduled_Hour);
PARAMETER(RCD.DSD_Farm_Site_Code);
PARAMETER(RCD.DSD_Building);
PARAMETER(RCD.DSD_Room);
PARAMETER(RCD.DSD_Sire_Line_Code);
PARAMETER(RCD.DSD_Hog_Group_Code);
PARAMETER(RCD.DSD_Unused_Head);
PARAMETER(RCD.DSD_Scheduled_Delv_Head);
PARAMETER(RCD.DSD_Scheduled_Kill_Head);
PARAMETER(RCD.DSD_Transportation_Office);
PARAMETER(RCD.Trucker_Code_HPS_USR);
PARAMETER(RCD.Driver_USR);
PARAMETER(RCD.Loading_Crew_USR);
PARAMETER(RCD.Code_USR);
PARAMETER(RCD.DSD_Load_Type);
PARAMETER(RCD.DSD_Full_Split_Load);
PARAMETER(RCD.DSD_Movement_Number);
PARAMETER(RCD.DT_Truck_ID);
PARAMETER(RCD.DT_Trailer_ID);
PARAMETER(RCD.DSD_Movement_Printed);
PARAMETER(RCD.Sched_Route_Start_Pnt_USR);
PARAMETER(RCD.Sched_Route_Start_Dte_USR);
PARAMETER(RCD.Sched_Route_Start_Tim_USR);
PARAMETER(RCD.DSD_Sch_Farm_Arrival_Date);
PARAMETER(RCD.DSD_Sch_Farm_Arrival_Time);
PARAMETER(RCD.Sch_Farm_Depart_Date_USR);
PARAMETER(RCD.Sch_Farm_Depart_Time_USR);
PARAMETER(RCD.DSD_Receiving_Shift);
PARAMETER(RCD.DSD_Kill_Shift);
PARAMETER(RCD.DSD_BOL_Kill_Shift);
PARAMETER(RCD.DSD_HPS_Post_Status);
PARAMETER(RCD.DSD_HPE_Post_Status);
PARAMETER(RCD.DSD_Lock_Status);
PARAMETER(RCD.DSD_Source_Type);
PARAMETER(RCD.DSD_Transfer_Sts);
PARAMETER(RCD.DSD_Unused_Date);
PARAMETER(RCD.DSD_Unused_Time);
PARAMETER(RCD.SR_Source_Code);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.DSD_PRD_Srv_Batch_ID);
PARAMETER(RCD.DSD_PRD_Srv_Sched_ID);
PARAMETER(RCD.DSD_Ref_1);
PARAMETER(RCD.DSD_Ref_2);
PARAMETER(RCD.DSD_Ref_Status);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Chg Delv Sched Dtl    CH) TYPE(CHGOBJ) FILE(PLAECPP)           AB1244728;
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.DSH_Kill_Date);
PARAMETER(RCD.DSD_Delivery_Date);
PARAMETER(RCD.DSD_Delivery_Time);
PARAMETER(RCD.DSD_Delivery_Time_Seq);
PARAMETER(RCD.DSD_Scheduled_Hour);
PARAMETER(RCD.DSD_Farm_Site_Code);
PARAMETER(RCD.DSD_Building);
PARAMETER(RCD.DSD_Room);
PARAMETER(RCD.DSD_Sire_Line_Code);
PARAMETER(RCD.DSD_Hog_Group_Code);
PARAMETER(RCD.DSD_Unused_Head);
PARAMETER(RCD.DSD_Scheduled_Delv_Head);
PARAMETER(RCD.DSD_Scheduled_Kill_Head);
PARAMETER(RCD.DSD_Transportation_Office);
PARAMETER(RCD.Trucker_Code_HPS_USR);
PARAMETER(RCD.Driver_USR);
PARAMETER(RCD.Loading_Crew_USR);
PARAMETER(RCD.Code_USR);
PARAMETER(RCD.DSD_Load_Type);
PARAMETER(RCD.DSD_Full_Split_Load);
PARAMETER(RCD.DSD_Movement_Number);
PARAMETER(RCD.DT_Truck_ID);
PARAMETER(RCD.DT_Trailer_ID);
PARAMETER(RCD.DSD_Movement_Printed);
PARAMETER(RCD.Sched_Route_Start_Pnt_USR);
PARAMETER(RCD.Sched_Route_Start_Dte_USR);
PARAMETER(RCD.Sched_Route_Start_Tim_USR);
PARAMETER(RCD.DSD_Sch_Farm_Arrival_Date);
PARAMETER(RCD.DSD_Sch_Farm_Arrival_Time);
PARAMETER(RCD.Sch_Farm_Depart_Date_USR);
PARAMETER(RCD.Sch_Farm_Depart_Time_USR);
PARAMETER(RCD.DSD_Receiving_Shift);
PARAMETER(RCD.DSD_Kill_Shift);
PARAMETER(RCD.DSD_BOL_Kill_Shift);
PARAMETER(RCD.DSD_HPS_Post_Status);
PARAMETER(RCD.DSD_HPE_Post_Status);
PARAMETER(RCD.DSD_Lock_Status);
PARAMETER(RCD.DSD_Source_Type);
PARAMETER(RCD.DSD_Transfer_Sts);
PARAMETER(RCD.DSD_Unused_Date);
PARAMETER(RCD.DSD_Unused_Time);
PARAMETER(RCD.SR_Source_Code);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.DSD_PRD_Srv_Batch_ID);
PARAMETER(RCD.DSD_PRD_Srv_Sched_ID);
PARAMETER(RCD.DSD_Ref_1);
PARAMETER(RCD.DSD_Ref_2);
PARAMETER(RCD.DSD_Ref_Status);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


ENDIF;

ENDIF;

ENDIF;

ENDIF;

