// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDVXPVR
// ?Date: 14.08.2025 Time: 03:36:23
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification log:
DO;

//?WI642   JM-02/19/25 USDA FAS 98 and FAS99
//?- Create load order change log when adding new item lines.
//?- Changes are inside 'CRT PD Order Detail    CR'.
ENDDO;

// PAR.Successful Completion USR = CND.No
PAR.Successful_Completion_USR = 'N';

//?USER: Validate fields

CASE;

// IF DTL.*CMD key is CF04
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Ham Group Number USR
AND PGM.*Cursor_field = DTL.Ham_Group_Number_USR;

// Call program SEL Ham Group          XF.
CALL PROGRAM(SEL Ham Group          XF) ('PDWCXFR');
PARAMETER(DTL.Ham_Group_Number_USR);

ENDIF;

//?USER: Validate relations

CASE;

// IF DTL.Ham Group Number USR is Entered
IF DTL.Ham_Group_Number_USR <> *ZERO;

EXECUTE FUNCTION(VAL Item Company       RT) TYPE(RTVOBJ) FILE(PDM1REP)          AC1568024;
PARAMETER(DTL.Ham_Group_Number_USR);
PARAMETER(PAR.Company_Number);
{
 //?USER: Processing if Data record not found

 // Send error message - 'Ham group doesn't have any items.'
 ERROR(USR2878);
 MSGPARM(PAR.Ham_Group_Number);

 //?USER: Process Data record

 EXECUTE FUNCTION(VAL Exist Company/Item RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1527869;
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.Ham_Group_Item_Code);
 {
  //?USER: Initialize routine

  //?Template version identifier - Edit to reflect current version.
  //?Template version identifier - Edit to reflect current version.
  EXECUTE FUNCTION(@Template Version) TYPE(EXCINTFUN)                             AC1523909;
  PARAMETER('1');
 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send error message - 'Ham group item: &2 not defined for order company.'
 ERROR(USR2877);
 MSGPARM(DB1.Ham_Group_Number);
 MSGPARM(DB1.Ham_Group_Item_Code);

 ENDIF;

}


ENDIF;

//?USER: User defined action

EXECUTE FUNCTION(BLD Order Details      RT) TYPE(RTVOBJ) FILE(PDM1REP)          AC1567972;
PARAMETER(DTL.Ham_Group_Number_USR);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Country_Code);
PARAMETER(PAR.Successful_Completion_USR);
{
 //?USER: Initialize routine

 // PAR.Successful Completion USR = CND.No
 PAR.Successful_Completion_USR = 'N';

 //?USER: Process Data record

 // PAR.Order Sequence Number = PAR.Order Sequence Number + CON.1
 PAR.Order_Sequence_Number = PAR.Order_Sequence_Number + 1;

 EXECUTE FUNCTION(RTV for Order Dtl Ent. RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1332418;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Type_Sales);
 PARAMETER(WRK.Unused_Parm_Date_USR);
 PARAMETER(PAR.Requested_Ship_Date);
 PARAMETER(PAR.Comment_Print_Acknowledge);
 PARAMETER(PAR.Comment_Print_Inv_Cr_Memo);
 PARAMETER(PAR.Comment_Print_Pick_Slip);
 PARAMETER(PAR.Comment_Print_Ship_Doc);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(WRK.Unused_Parm_Value_USR);
 PARAMETER(WRK.Unused_Parm_Value_USR);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(PAR.Requested_Delivery_Time);
 PARAMETER(LCL.Load_ID);
 PARAMETER(NLL.Shipping_Method);
 PARAMETER(PAR.Palletize);
 PARAMETER(WRK.Unused_Parm_Status_USR);
 PARAMETER(PAR.Slip_Sheet);
 PARAMETER(WRK.Unused_Parm_Value_USR);
 PARAMETER(WRK.Unused_Parm_Status_USR);
 PARAMETER(WRK.Unused_Parm_CD9_USR);
 PARAMETER(WRK.Unused_Parm_Status_USR);
 PARAMETER(WRK.Unused_Parm_Status_USR);
 PARAMETER(WRK.Block_Order_Flag);
 PARAMETER(PAR.Broker_Order_Status);
 PARAMETER(LCL.OH_Load_Plan_Ready);
 PARAMETER(WRK.HPB_Ship_to_Warehouse);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV TF EXEMPT         RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1916975;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.OH_TF_Exempt_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Load ID is GT Zero
 IF LCL.Load_ID > *ZERO;

 EXECUTE FUNCTION(RTV Deadln DepartDT/TM RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1497302;
 PARAMETER(LCL.Load_ID);
 PARAMETER(LCL.Deadline_Departure_Date);
 PARAMETER(LCL.Deadline_Departure_Time);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  QUIT;

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 ENDIF;

 // Call program RTV for Ord.Detail     XF.
 CALL PROGRAM(RTV for Ord.Detail     XF) ('PDC3XFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.Ham_Group_Item_Code);
 PARAMETER(PAR.Order_Desc_Line_One);
 PARAMETER(PAR.Order_Desc_Line_Two);
 PARAMETER(PAR.U_M_Ordered);
 PARAMETER(PAR.U_M_Base_Price);
 PARAMETER(PAR.Unit_Weight_Ordered_U_M);
 PARAMETER(PAR.Item_Level);
 PARAMETER(PAR.Production_Date_Control);
 PARAMETER(PAR.Catch_Weight_Status);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(WRK.Unused_Parm_CD9_USR);
 PARAMETER(WRK.Unused_Parm_CD7_USR);
 PARAMETER(WRK.Unused_Parm_Status_USR);
 PARAMETER(WRK.Unused_Parm_CD9_USR);
 PARAMETER(WRK.Unused_Parm_CD9_USR);
 PARAMETER(WRK.Unused_Parm_CD9_USR);
 PARAMETER(WRK.Unused_Parm_Value_USR);
 PARAMETER(WRK.Unused_Parm_Status_USR);
 PARAMETER(WRK.Item_Target_Price);
 PARAMETER(WRK.Unused_Parm_Status_USR);

 EXECUTE FUNCTION(RTV Affect Fields      RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1264364;
 PARAMETER(PAR.Order_Type_Sales);
 PARAMETER(PAR.Affect_Inventory_Status);
 PARAMETER(PAR.Affect_Sales_Doll_Status);
 PARAMETER(PAR.Affect_Sales_Pnds_Status);
 PARAMETER(WRK.Unused_Parm_Status_USR);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Broker Order Status is yes
 IF PAR.Broker_Order_Status = 'Y';

 // LCL.Affect Commission = CND.yes
 LCL.Affect_Commission = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Affect Commission = CND.no
 LCL.Affect_Commission = 'N';

 ENDIF;

 EXECUTE FUNCTION(CRT PD Order Detail    CR) TYPE(CRTOBJ) FILE(OPBGWKP)          AC1425283;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(1);
 PARAMETER(DB1.Ham_Group_Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(*ZERO);
 PARAMETER('E');
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Comment_Print_Acknowledge);
 PARAMETER(PAR.Comment_Print_Inv_Cr_Memo);
 PARAMETER(PAR.Comment_Print_Pick_Slip);
 PARAMETER(PAR.Comment_Print_Ship_Doc);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER('MAN');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('U');
 PARAMETER(*ZERO);
 PARAMETER(PAR.U_M_Base_Price);
 PARAMETER(PAR.U_M_Ordered);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Order_Desc_Line_One);
 PARAMETER(PAR.Order_Desc_Line_Two);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Palletize);
 PARAMETER(PAR.Slip_Sheet);
 PARAMETER(PAR.Catch_Weight_Status);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Production_Date_Control);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Unit_Weight_Ordered_U_M);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Requested_Ship_Date);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Affect_Inventory_Status);
 PARAMETER(PAR.Affect_Sales_Doll_Status);
 PARAMETER(PAR.Affect_Sales_Pnds_Status);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Level);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*USER);
 PARAMETER(PAR.Country_Code);
 PARAMETER('01');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.Ham_Group_Number);
 PARAMETER(*BLANK);
 PARAMETER('Y');
 PARAMETER(LCL.Affect_Commission);
 PARAMETER('Y');
 PARAMETER(*BLANK);
 PARAMETER(LCL.OH_TF_Exempt_Code);
 PARAMETER(*BLANK);
 PARAMETER(WRK.Blank_for_3_USR);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Deadline_Departure_Date);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Deadline_Departure_Time);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Item_Target_Price);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 {
  //?USER: Processing before Data update

  // DB1.Age Code = CND.Blank
  DB1.Age_Code = *BLANK;

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program Rtv First Consumed Itm XF.
  CALL PROGRAM(Rtv First Consumed Itm XF) ('POP1XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Consumed_Item_Code);

  EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Production_Warehouse);
  PARAMETER(NLL.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Calc Gross Weight from tares...    copied from Dsp Gross Wgt function
  DO;

  // Call program Rtv Tare Weight        XF.
  CALL PROGRAM(Rtv Tare Weight        XF) ('PBI3XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Misc_Tare_Weight);

  //?wi464
  // Call program RTV Itm BxID & Tares  XF.
  CALL PROGRAM(RTV Itm BxID & Tares  XF) ('PBI4XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Box_Weight);
  PARAMETER(LCL.Number_Cases_On_A_Pallet);
  PARAMETER(LCL.Pallet_Tare_Weight);
  PARAMETER(LCL.Box_iD);
  PARAMETER(DB1.OD_Pallet_Type);

  // LCL.Total Tare USR = LCL.Box Weight + LCL.Misc Tare Weight
  LCL.Total_Tare_USR = LCL.Box_Weight + LCL.Misc_Tare_Weight;

  // Box + Misc Tare
  LCL.Weight_1_1_U = ( LCL.Box_Weight + LCL.Misc_Tare_Weight ) * DB1.Quantity_Ordered 'H';

  //?Pallet Tare
  CASE;

  // IF DB1.Palletize is yes
  IF DB1.Palletize = 'Y';

  CASE;

  // IF LCL.Number Cases On A Pallet is GT Zero
  IF LCL.Number_Cases_On_A_Pallet > *ZERO;

  // Pallet Weight
  LCL.Weight_1_2_U = ( DB1.Quantity_Ordered / LCL.Number_Cases_On_A_Pallet 'H' )
  * LCL.Pallet_Tare_Weight 'H';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Weight 1.2             .U = CON.*ZERO
  LCL.Weight_1_2_U = *ZERO;

  ENDIF;

  //?Pallet Tare
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Weight 1.2             .U = CON.*ZERO
  LCL.Weight_1_2_U = *ZERO;

  ENDIF;

  // Estimated Gross
  DB1.OD_Estimated_Gross_Weight = ( DB1.Weight_Ordered + LCL.Weight_1_1_U )
  + LCL.Weight_1_2_U;

  //?E00196 RMC 8/24/12 chk pfs interface SHPTRN too
  ENDDO;

  //?USER: Processing after Data update

  //?WI642   JM-02/19/25-Add load order change log on new items.
  //?WI642   JM-02/19/25-Crt chg log if dtl has been sent to MPR USDA
  CASE;

  // IF DB1.OD MPR Prc Ready to Send is yes
  IF DB1.OD_MPR_Prc_Ready_to_Send = 'Y';

  //?Always create price type log ORDPRT
  // LCL.Text 3 Length USR = DB1.Order Sequence Number
  LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

  // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,CND.Not Entered,CON.1)
  LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + *BLANK (1);

  // LCL.Change Log New Value = PAR.OD Price Type
  LCL.Change_Log_New_Value = PAR.OD_Price_Type;

  // Call program CRT Load/OrderChg n/ld XF.
  CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
  PARAMETER(*ZERO);
  PARAMETER('ORDPRT');
  PARAMETER('SLS');
  PARAMETER(LCL.Change_Log_Prior_Value);
  PARAMETER(LCL.Change_Log_New_Value);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);

  ENDIF;

  //?WI642   JM-02/19/25-If not the transfer order nbr 9999999->crt chg logs
  CASE;

  // IF DB1.Order Number is ne 9999999
  IF DB1.Order_Number <> 9999999;

  // LCL.Text 3 Length USR = DB1.Order Sequence Number
  LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

  // LCL.Weight Beg Inv usr = CND.Not Entered
  LCL.Weight_Beg_Inv_usr = *ZERO;

  // LCL.Text USR 7 = LCL.Weight Beg Inv usr
  LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

  // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
  LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

  // LCL.Weight Beg Inv usr = PAR.Weight Ordered
  LCL.Weight_Beg_Inv_usr = PAR.Weight_Ordered;

  // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
  LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

  // Call program CRT Load/OrderChg n/ld XF.
  CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
  PARAMETER(*ZERO);
  PARAMETER('ORDWGT');
  PARAMETER('SLS');
  PARAMETER(LCL.Change_Log_Prior_Value);
  PARAMETER(LCL.Change_Log_New_Value);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);

  // LCL.Weight Beg Inv usr = CND.Not Entered
  LCL.Weight_Beg_Inv_usr = *ZERO;

  // LCL.Text USR 7 = LCL.Weight Beg Inv usr
  LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

  // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
  LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

  // LCL.Weight Beg Inv usr = PAR.Quantity Ordered
  LCL.Weight_Beg_Inv_usr = PAR.Quantity_Ordered;

  // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
  LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

  // Call program CRT Load/OrderChg n/ld XF.
  CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
  PARAMETER(*ZERO);
  PARAMETER('ORDQTY');
  PARAMETER('SLS');
  PARAMETER(LCL.Change_Log_Prior_Value);
  PARAMETER(LCL.Change_Log_New_Value);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);

  ENDIF;

 }

 // PAR.Successful Completion USR = CND.Yes
 PAR.Successful_Completion_USR = 'Y';

}


