// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLNOE1R
// ?Date: 14.08.2025 Time: 02:54:49
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?MODIFICATIONS
//?11/02/2020 ISE H16853 - CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(LCL.Oms_Warehouse_Code);
PARAMETER(LCL.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(LCL.Oms_SalesPerson_Code);
PARAMETER(LCL.Oms_Allow_Multi_Company);
PARAMETER(LCL.Oms_Default_Printer);
PARAMETER(LCL.Oms_Name);
PARAMETER(LCL.Oms_System_Value_Alpha);
PARAMETER(LCL.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


CASE;

// IF LCL.Oms Access Denied (Y/N) is Yes
IF LCL.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

//?USER: Initialize detail screen (new record)

MOVE *ALL (To: DTL From: PAR);

CASE;

// IF PAR.Entry Status USR is Enter
IF PAR.Entry_Status_USR = 'E';

// Call program Rtv System Date & Tim UP.
CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
PARAMETER(DTL.BOLS_Entry_Date);
PARAMETER(DTL.BOLS_Entry_Time);

// IF PAR.Entry Status USR is Depart
IF PAR.Entry_Status_USR = 'D';

// Call program Rtv System Date & Tim UP.
CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
PARAMETER(DTL.BOLS_Depart_Date);
PARAMETER(DTL.BOLS_Depart_Time);

ENDIF;

//?USER: Initialize detail screen (existing record)

MOVE *ALL (To: DTL From: PAR);

CASE;

// IF PAR.Entry Status USR is Enter
IF PAR.Entry_Status_USR = 'E';

// Call program Rtv System Date & Tim UP.
CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
PARAMETER(DTL.BOLS_Entry_Date);
PARAMETER(DTL.BOLS_Entry_Time);

// IF PAR.Entry Status USR is Depart
IF PAR.Entry_Status_USR = 'D';

// Call program Rtv System Date & Tim UP.
CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
PARAMETER(DTL.BOLS_Depart_Date);
PARAMETER(DTL.BOLS_Depart_Time);

ENDIF;

//?USER: Validate detail screen fields

//?Display
CASE;

// IF PAR.Entry Status USR is Display
IF PAR.Entry_Status_USR = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?VAL: Enter
CASE;

// IF PAR.Entry Status USR is Enter
IF PAR.Entry_Status_USR = 'E';

//?VAL: Guard
CASE;

// IF DTL.BOLS Entry Guard is Not Entered
IF DTL.BOLS_Entry_Guard = *BLANK;

// Send error message - 'Value Required.'
ERROR(PRK1201);
MSGPARM(DTL.BOLS_Entry_Guard);

ENDIF;

//?VAL: Entry Comment
CASE;

// IF DTL.BOLS Entry Comment is Not Entered
IF DTL.BOLS_Entry_Comment = *BLANK;

// Send error message - 'Value Required.'
ERROR(PRK1201);
MSGPARM(DTL.BOLS_Entry_Comment);

ENDIF;

ENDIF;

//?VAL: Depart
CASE;

// IF PAR.Entry Status USR is Depart
IF PAR.Entry_Status_USR = 'D';

//?VAL: Guard
CASE;

// IF DTL.BOLS Depart Guard is Not Entered
IF DTL.BOLS_Depart_Guard = *BLANK;

// Send error message - 'Value Required.'
ERROR(PRK1201);
MSGPARM(DTL.BOLS_Depart_Guard);

ENDIF;

ENDIF;

//?VAL: Change
CASE;

// IF PAR.Entry Status USR is Change
IF PAR.Entry_Status_USR = 'C';

//?VAL: Entry Information
CASE;

// IF DTL.BOLS Depart Date is Entered
IF DTL.BOLS_Depart_Date <> *ZERO;

// OR DTL.BOLS Depart Time is Entered
OR DTL.BOLS_Depart_Time <> *ZERO;

// OR DTL.BOLS Depart Guard is Entered
OR DTL.BOLS_Depart_Guard <> *BLANK;

CASE;

// IF DTL.BOLS Entry Date is Not Entered
IF DTL.BOLS_Entry_Date = *ZERO;

// OR DTL.BOLS Entry Time is Not Entered
OR DTL.BOLS_Entry_Time = *ZERO;

// OR DTL.BOLS Entry Guard is Not Entered
OR DTL.BOLS_Entry_Guard = *BLANK;

// Send error message - 'Entry Information Required if Depart Information Exists.'
ERROR(PRK1202);

ENDIF;

ENDIF;

//?VAL: Entry Date Entered
CASE;

// IF DTL.BOLS Entry Date is Entered
IF DTL.BOLS_Entry_Date <> *ZERO;

CASE;

// IF DTL.BOLS Entry Time is Not Entered
IF DTL.BOLS_Entry_Time = *ZERO;

// OR DTL.BOLS Entry Guard is Not Entered
OR DTL.BOLS_Entry_Guard = *BLANK;

// Send error message - 'All Entry Information Required.'
ERROR(PRK1203);

ENDIF;

ENDIF;

//?VAL: Entry Time Entered
CASE;

// IF DTL.BOLS Entry Time is Entered
IF DTL.BOLS_Entry_Time <> *ZERO;

CASE;

// IF DTL.BOLS Entry Date is Not Entered
IF DTL.BOLS_Entry_Date = *ZERO;

// OR DTL.BOLS Entry Guard is Not Entered
OR DTL.BOLS_Entry_Guard = *BLANK;

// Send error message - 'All Entry Information Required.'
ERROR(PRK1203);

ENDIF;

ENDIF;

//?VAL: Entry Guard Entered
CASE;

// IF DTL.BOLS Entry Guard is Entered
IF DTL.BOLS_Entry_Guard <> *BLANK;

CASE;

// IF DTL.BOLS Entry Date is Not Entered
IF DTL.BOLS_Entry_Date = *ZERO;

// OR DTL.BOLS Entry Time is Not Entered
OR DTL.BOLS_Entry_Time = *ZERO;

// Send error message - 'All Entry Information Required.'
ERROR(PRK1203);

ENDIF;

ENDIF;

//?VAL: Depart Date Entered
CASE;

// IF DTL.BOLS Depart Date is Entered
IF DTL.BOLS_Depart_Date <> *ZERO;

CASE;

// IF DTL.BOLS Depart Time is Not Entered
IF DTL.BOLS_Depart_Time = *ZERO;

// OR DTL.BOLS Depart Guard is Not Entered
OR DTL.BOLS_Depart_Guard = *BLANK;

// Send error message - 'All Departure Information Required.'
ERROR(PRK1204);

ENDIF;

ENDIF;

//?VAL: Depart Time Entered
CASE;

// IF DTL.BOLS Depart Time is Entered
IF DTL.BOLS_Depart_Time <> *ZERO;

CASE;

// IF DTL.BOLS Depart Date is Not Entered
IF DTL.BOLS_Depart_Date = *ZERO;

// OR DTL.BOLS Depart Guard is Not Entered
OR DTL.BOLS_Depart_Guard = *BLANK;

// Send error message - 'All Departure Information Required.'
ERROR(PRK1204);

ENDIF;

ENDIF;

//?VAL: Depart Guard Entered
CASE;

// IF DTL.BOLS Depart Guard is Entered
IF DTL.BOLS_Depart_Guard <> *BLANK;

CASE;

// IF DTL.BOLS Depart Date is Not Entered
IF DTL.BOLS_Depart_Date = *ZERO;

// OR DTL.BOLS Depart Time is Not Entered
OR DTL.BOLS_Depart_Time = *ZERO;

// Send error message - 'All Departure Information Required.'
ERROR(PRK1204);

ENDIF;

ENDIF;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Security Gate Log IF) TYPE(EXCINTFUN) FILE(PLA9CPP)        AB1293259;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.BOLS_Entry_Date);
PARAMETER(DTL.BOLS_Entry_Time);
PARAMETER(DTL.BOLS_Entry_Guard);
PARAMETER(DTL.BOLS_Entry_Comment);
PARAMETER(DTL.BOLS_Depart_Date);
PARAMETER(DTL.BOLS_Depart_Time);
PARAMETER(DTL.BOLS_Depart_Guard);
PARAMETER(DTL.BOLS_Depart_Comment);
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
{
 //?Execute internal function

 // Call program Rtv System Date & Tim UP.
 CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
 PARAMETER(PAR.SG_Date);
 PARAMETER(NLL.*TIME);

 EXECUTE FUNCTION(Rtv Next Sequence     RT) TYPE(RTVOBJ) FILE(PLA9CPP)           AB1293262;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.SG_Date);
 PARAMETER(PAR.SG_Sequence_Number);
 {
  //?USER: Processing if Data record not found

  // PAR.SG Sequence Number = CON.1
  PAR.SG_Sequence_Number = 1;

  //?USER: Process Data record

  // PAR.SG Sequence Number = DB1.SG Sequence Number + CON.1
  PAR.SG_Sequence_Number = DB1.SG_Sequence_Number + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Security Gate Log CR) TYPE(CRTOBJ) FILE(PLA9CPP)           AB1293239;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.SG_Date);
 PARAMETER(PAR.SG_Sequence_Number);
 PARAMETER(PAR.BOLS_Entry_Date);
 PARAMETER(PAR.BOLS_Entry_Time);
 PARAMETER(PAR.BOLS_Entry_Guard);
 PARAMETER(PAR.BOLS_Entry_Comment);
 PARAMETER(PAR.BOLS_Depart_Date);
 PARAMETER(PAR.BOLS_Depart_Time);
 PARAMETER(PAR.BOLS_Depart_Guard);
 PARAMETER(PAR.BOLS_Depart_Comment);
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp-Sys Dt  IF) TYPE(EXCINTFUN)                      AB1237005;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // Call program Rtv System Date & Tim UP.
   CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
   PARAMETER(PAR.RS_Date_Added);
   PARAMETER(PAR.RS_Time_Added);

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Security Gate Log CH) TYPE(CHGOBJ) FILE(PLA9CPP)           AB1293240;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.SG_Date);
PARAMETER(DTL.SG_Sequence_Number);
PARAMETER(DTL.BOLS_Entry_Date);
PARAMETER(DTL.BOLS_Entry_Time);
PARAMETER(DTL.BOLS_Entry_Guard);
PARAMETER(DTL.BOLS_Entry_Comment);
PARAMETER(DTL.BOLS_Depart_Date);
PARAMETER(DTL.BOLS_Depart_Time);
PARAMETER(DTL.BOLS_Depart_Guard);
PARAMETER(DTL.BOLS_Depart_Comment);
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


