// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPBGPVR
// ?Date: 14.08.2025 Time: 03:39:49
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.Company Number Pass   USR = PAR.Company Number
PAR.Company_Number_Pass_USR = PAR.Company_Number;

//?RMC 10/22/04 EXPCOM Removed co from screen
//?RMC 05/23/07 DLY029 Db Changes - broker code to 6A
//?RMC 08/14/07 DLY029 added payee type sel which calls a driver over
//?    the broker perf report
//?USER: Load screen

// DTL.Print (Yes/No) USR = CND.Yes
DTL.Print_Yes_No_USR = 'Y';

CASE;

// IF PAR.Allow Multi-Company is no
IF PAR.Allow_Multi_Company = 'N';

// DTL.Company Number = PAR.Company Number
DTL.Company_Number = PAR.Company_Number;

ENDIF;

//?USER: Validate fields

//?Process F4 on Company Number
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Company Number CDE
IF PGM.*Cursor_field = DTL.Company_Number_CDE;

CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(DTL.Company_Number);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

ENDIF;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Accrual
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Accrual Code
AND PGM.*Cursor_field = DTL.Accrual_Code;

// Call program SEL Accrual Cde Brkrd SR.
CALL PROGRAM(SEL Accrual Cde Brkrd SR) ('PMQCSRR');
PARAMETER(DTL.Accrual_Code);

ENDIF;

//?Process F4 on Ship to Customer Number
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.USR Ship to Customer CD7
AND PGM.*Cursor_field = DTL.USR_Ship_to_Customer_CD7;

//?040804 slm add ship to customer with customer name selection
// Call program SEL Cust/ShpTo Flag 'Y'SR.
CALL PROGRAM(SEL Cust/ShpTo Flag 'Y'SR) ('PDYSSRR');
PARAMETER(DTL.USR_Ship_to_Customer_CD7);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Broker
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Broker Code
AND PGM.*Cursor_field = DTL.Broker_Code;

// Call program Sel Broker            SL.
CALL PROGRAM(Sel Broker            SL) ('POY6SRR');
PARAMETER(DTL.Broker_Code);

ENDIF;

//?CALC: Screen function fields

EXECUTE FUNCTION(Broker Name DRV) TYPE(DRVFLD)                                  AC1675815;
PARAMETER(DTL.Broker_Name_DRV);
PARAMETER(DTL.Broker_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Broker Info       RT) TYPE(RTVOBJ) FILE(POC5REP)           AC1675816;
 PARAMETER(*MISSING);
 PARAMETER(PAR.Broker_Name_DRV);
 PARAMETER(NLL.Broker_Address_Line_1);
 PARAMETER(NLL.Broker_Address_Line_2);
 PARAMETER(NLL.Broker_City);
 PARAMETER(NLL.Broker_State);
 PARAMETER(NLL.Broker_Zip);
 PARAMETER(NLL.Broker_Office_Manager);
 PARAMETER(NLL.Broker_Telephone_Number);
 PARAMETER(NLL.Broker_Fax_Number);
 PARAMETER(NLL.Broker_Email_Address);
 PARAMETER(NLL.Broker_G_L_Vendor_Number);
 PARAMETER(NLL.Salesperson_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Validate relations

// DTL.Name = CON.*BLANK
DTL.Name = *BLANK;

//?Validate Accrual
CASE;

// IF DTL.Accrual Code is Entered
IF DTL.Accrual_Code <> *BLANK;

EXECUTE FUNCTION(RTV All Values Active  RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1357710;
PARAMETER(DTL.Accrual_Code);
PARAMETER(DTL.Accrual_Description);
PARAMETER(WRK.Automatic_Accrual_Y_N);
PARAMETER(WRK.Print_On_Invoice_Y_N);
PARAMETER(WRK.Rate_Usage);
PARAMETER(WRK.Add_on_Allowance);
PARAMETER(WRK.Accrual_Type);
PARAMETER(WRK.Reverse_Accrual_Code);
PARAMETER(WRK.UOM_Primary_Dft);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.Accrual Type is Types requiring Broker
IF WRK.Accrual_Type = 'CM'/'CR'/'TX'/'BG'/'PR';

CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Accrual Program Code not found.'
ERROR(USR1514);
MSGPARM(DTL.Accrual_Code);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//?DLY029 RMC 06/19/07 was invalid for TF only.
// Send error message - 'Accrual Code &1 not valid for this report.'
ERROR(USR3325);
MSGPARM(DTL.Accrual_Code);

ENDIF;

ENDIF;

//?If from date gt through date, error message
CASE;

// IF DTL.USR From Date GT DTL.USR Through Date
IF DTL.USR_From_Date > DTL.USR_Through_Date;

// Send error message - 'From date exceeds to date.  Please re-enter.'
ERROR(USR0319);
MSGPARM(DTL.USR_From_Date);

ENDIF;

//?Validate ship to customer if entered
CASE;

// IF DTL.USR Ship to Customer CD7 is Entered
IF DTL.USR_Ship_to_Customer_CD7 <> *ZERO;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(DTL.USR_Ship_to_Customer_CD7);
PARAMETER(DTL.Ship_To_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Customer is not found.'
ERROR(USR0525);
MSGPARM(DTL.USR_Ship_to_Customer_CD7);

ENDIF;

ENDIF;

//?Validate broker
CASE;

// IF DTL.Broker Code is Entered
IF DTL.Broker_Code <> *BLANK;

EXECUTE FUNCTION(Rtv Broker Name       RT) TYPE(RTVOBJ) FILE(POC5REP)           AC1676428;
PARAMETER(DTL.Broker_Code);
PARAMETER(DTL.Broker_Name_DRV);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.Broker Name DRV is blanks
IF DTL.Broker_Name_DRV = *BLANK;

// Send error message - 'Broker News not found.'
ERROR(USR3288);
MSGPARM(DTL.Broker_Code);

ENDIF;

ENDIF;

//?** Default Print Y/N to Yes if invalid entry
CASE;

// IF DTL.Print (Yes/No) USR is Only
IF DTL.Print_Yes_No_USR = 'O';

// OR DTL.Print (Yes/No) USR is Blank
OR DTL.Print_Yes_No_USR = *BLANK;

// PAR.Print (Yes/No) USR = CND.Yes
PAR.Print_Yes_No_USR = 'Y';

//?** Default Print Y/N to Yes if invalid entry
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Print (Yes/No) USR = DTL.Print (Yes/No) USR
PAR.Print_Yes_No_USR = DTL.Print_Yes_No_USR;

ENDIF;

// DTL.Condition Desc. 1  USR = Condition name of DTL.Payee Type
DTL.Condition_Desc_1_USR = RTVCND(DTL.Payee_Type);

//?USER: User defined action

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Broker Performance Report');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);
PARAMETER(*MISSING);
PARAMETER(1);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

//?Submit job for Print
// PAR.From Date Pass        USR = DTL.USR From Date
PAR.From_Date_Pass_USR = DTL.USR_From_Date;

// PAR.Thru Date Pass        USR = DTL.USR Through Date
PAR.Thru_Date_Pass_USR = DTL.USR_Through_Date;

// PAR.Customer Number Pass  USR = DTL.USR Ship to Customer CD7
PAR.Customer_Number_Pass_USR = DTL.USR_Ship_to_Customer_CD7;

// PAR.System Value Numeric = PAR.PRT Number of Copies
PAR.System_Value_Numeric = PAR.PRT_Number_of_Copies;

// Call program PRT Broker Perf       UP.
SBMJOB;
CALL PROGRAM(PRT Broker Perf       UP) ('PPBFUPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(DTL.Accrual_Code);
PARAMETER(DTL.Broker_Code);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(DTL.USR_Ship_to_Customer_CD7);
PARAMETER(PAR.From_Date_Pass_USR);
PARAMETER(PAR.Thru_Date_Pass_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER('N');
PARAMETER(PAR.Print_Yes_No_USR);
PARAMETER(DTL.Payee_Type);
PARAMETER(DTL.Company_Number);
SBMJOBOVR JOB(BROKERPERF);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

//?USER: Exit program processing

CASE;

// IF DTL.*CMD key is *Exit
IF DTL.*CMD_key = '03';

PGM.*Return_code = 'Y2U9999';

RETURN;

ENDIF;

