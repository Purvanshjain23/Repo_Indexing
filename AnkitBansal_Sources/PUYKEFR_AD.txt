// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PUYKEFR
// ?Date: 14.08.2025 Time: 03:51:42
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter AccessRP4IF) TYPE(EXCINTFUN)                     AC2213833;
PARAMETER('C/S');
PARAMETER(NLL.Company_Number);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(NLL.Allow_Multi_Company);
PARAMETER(NLL.Default_Printer);
PARAMETER(NLL.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/ApplicationRP4IF) TYPE(EXCINTFUN)                     AC2213834;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue DestRP4.
  EXECUTE FUNCTION(SET Message Queue DestRP4) TYPE(EXCUSRSRC) ('PUY1UFR');
  {
   C                   MOVEL     '*PRV '       ZAPGRL                         PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue DestRP4.
  EXECUTE FUNCTION(SET Message Queue DestRP4) TYPE(EXCUSRSRC) ('PUY1UFR');
  {
   C                   MOVEL     '*PRV '       ZAPGRL                         PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen HeadingsRP4 IF) TYPE(EXCINTFUN)                     AC2213823;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40RP4U.
  EXECUTE FUNCTION(CLC Center Txt Str 40RP4U) TYPE(EXCUSRSRC) ('PUYYUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   D UCT             S              1    DIM(40)                              CENTER TABLE
   C                   MOVEA     #IDSC4        UCT                            LOAD ARRAY
   C                   Z-ADD     40            UX                2 0          SET COUNTER
   C     UX            DOWGT     0
   C     UCT(UX)       IFEQ      ' '
   C                   SUB       1             UX
   C                   ELSE
   C                   Z-ADD     UX            UXH               2 0
   C                   Z-ADD     0             UX
   C                   END
   C                   END
   C     40            SUB       UXH           UX
   C     UX            DIV       2             UX
   C     UX            IFGT      0
   C                   MOVE      *BLANKS       UCT
   C                   MOVEA     #IDSC4        UCT(UX)
   C                   END
   C                   MOVEA     UCT           #ODE40                         LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co HeadRP4U.
  EXECUTE FUNCTION(MOV Appl Desc-Co HeadRP4U) TYPE(EXCUSRSRC) ('PUYZUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                   MOVE      #IDE40        ##CMP            40
  }

 }

}


//?USER: Initialize subfile header

// LCL.Module ID = CTL.Module ID
LCL.Module_ID = CTL.Module_ID;

// LCL.Release Number = CTL.Release Number
LCL.Release_Number = CTL.Release_Number;

// LCL.Record Status = CTL.Record Status
LCL.Record_Status = CTL.Record_Status;

//?USER: Initialize subfile record (existing record)

//?Select by Module ID.
CASE;

// IF CTL.Module ID is Not Entered
IF CTL.Module_ID = *BLANK;

// OR CTL.Module ID EQ RCD.Module ID
OR CTL.Module_ID = RCD.Module_ID;

//?Select by Module ID.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select by Release Number.
CASE;

// IF CTL.Release Number is 0
IF CTL.Release_Number = 0;

// OR CTL.Release Number EQ RCD.Release Number
OR CTL.Release_Number = RCD.Release_Number;

//?Select by Release Number.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select by Record Status.
CASE;

// IF CTL.Record Status is *blank
IF CTL.Record_Status = *BLANK;

// OR CTL.Record Status EQ RCD.Record Status
OR CTL.Record_Status = RCD.Record_Status;

//?Select by Record Status.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Validate subfile control

//?Reload Subfile.
CASE;

// IF CTL.Module ID NE LCL.Module ID
IF CTL.Module_ID <> LCL.Module_ID;

// LCL.Module ID = CTL.Module ID
LCL.Module_ID = CTL.Module_ID;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload Subfile.
// IF CTL.Release Number NE LCL.Release Number
IF CTL.Release_Number <> LCL.Release_Number;

// LCL.Release Number = CTL.Release Number
LCL.Release_Number = CTL.Release_Number;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload Subfile.
// IF CTL.Record Status NE LCL.Record Status
IF CTL.Record_Status <> LCL.Record_Status;

// LCL.Record Status = CTL.Record Status
LCL.Record_Status = CTL.Record_Status;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Transformation Ctl CR) TYPE(CRTOBJ) FILE(PUC6REP)          AC2212897;
PARAMETER(RCD.Module_ID);
PARAMETER(RCD.Release_Number);
PARAMETER(RCD.Module_Release_Status);
PARAMETER(RCD.Module_Release_Desc);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Update_Date_Timestamp);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Crt Time Stamp DDL IF) TYPE(EXCINTFUN)                     AC2212929;
 PARAMETER(DB1.Create_Date_Timestamp);
 PARAMETER(DB1.Create_User_ID);
 PARAMETER(DB1.Create_Program_Name);
 PARAMETER(DB1.Update_User_Id);
 PARAMETER(DB1.Update_Program_Name);
 {
  //?Execute internal function

  //?*** Set CREATE Time Stamp Info.
  // PAR.Create Date Timestamp = JOB.*System timestamp
  PAR.Create_Date_Timestamp = JOB.*System_timestamp;

  // PAR.Create User ID = JOB.*USER
  PAR.Create_User_ID = JOB.*USER;

  // PAR.Create Program Name = JOB.*PROGRAM
  PAR.Create_Program_Name = JOB.*PROGRAM;

  //?*** Set CHANGE Time Stamp Info.
  //?Cannot set Update Date TS here, will error.
  // PAR.Update User Id = CON.*BLANK
  PAR.Update_User_Id = *BLANK;

  // PAR.Update Program Name = CON.*BLANK
  PAR.Update_Program_Name = *BLANK;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Transformation Ctl CH) TYPE(CHGOBJ) FILE(PUC6REP)          AC2212898;
PARAMETER(RCD.Module_ID);
PARAMETER(RCD.Release_Number);
PARAMETER(RCD.Module_Release_Status);
PARAMETER(RCD.Module_Release_Desc);
PARAMETER(RCD.Record_Status);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Time Stamp DDL IF) TYPE(EXCINTFUN)                     AC2212930;
 PARAMETER(DB1.Update_Date_Timestamp);
 PARAMETER(DB1.Update_User_Id);
 PARAMETER(DB1.Update_Program_Name);
 {
  //?Execute internal function

  //?*** Set CHANGE Time Stamp Info.
  // PAR.Update Date Timestamp = JOB.*System timestamp
  PAR.Update_Date_Timestamp = JOB.*System_timestamp;

  // PAR.Update User Id = JOB.*USER
  PAR.Update_User_Id = JOB.*USER;

  // PAR.Update Program Name = JOB.*PROGRAM
  PAR.Update_Program_Name = JOB.*PROGRAM;

 }

}


