      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      Hog Production System
      * PROGRAM:     HP278TERR
      * TITLE:       SYNON/WEB: Edit/Post Shipped Sales into HPS
      * PROGRAMMER:  Susan Mason
      * CREATED:     08/19/11
      *
      * FUNCTION:  This program will be called interactively from SYNON programs(s):
      *            It will:
      *                 a) validate and send back the error message of what is wrong
      *                 a) retrieve/edit a single SYNON Delivery Tracking record
      *                 b) update/create an HPS movement if there are no errors
      *
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 04/01/04  LeAnne Fedor
      *           You can no longer have Nursery groups since we no longer
      *           allow Nursery Groups on Market Sales.
      *
      * 01/24/05  LeAnne Fedor
      *           The records that we get will now have a Hog Group Code as well as
      *           a farm/building/room.
      *
      *           Prior to this, we defaulted the oldest Hog Group in the bldg/room.
      *           Now, we will validate the Hog Group they send.
      *           If the group is valid,
      *             we will use the user's group.
      *           If the group is not valid,
      *             we will fall back on our 'default the oldest group' logic.
      *
      *           We have not been and will not edit bldg/room.
      *
      * 07/02/09  LeAnne Ramsey
      *           Recompile only. Added new field 'Continuous Flow Flag' to Hog Group file.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fplafcpl1  if   e           k disk
      *   Synon: Delivery tracking
      *
      *
     Fplajcpl1  if   e           k disk
      *   Synon: Delivery tracking split
      *
      *
     Fhsp018    if   e           k disk
      *    Farm site
      *
      *
     Fhsp034    if   e           k disk
      *    Hog group
      *
      *
     Fhsl034p   if   e           k disk    rename(hgrec:hgrecp)
      *    Hog group
      *
      *
     Fhsp046    if   e           k disk
      *    Trucker
      *
      *
     Fhsp058    uf a e           k disk
      *   Movement event
      *
      *
     Fhsp067    if   e           k disk
      *    Load type
      *
      *
     Fhsp084    uf a e           k disk
      *   Sales movement header
      *
      *
     Fhsp085    uf a e           k disk
      *   Sales movement detail
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      * These arrays are used to edit/update the Synon split records.
      *
     D arhgsn          s              7  0 dim(100)
     D arshhd          s              5  0 dim(100)
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Control/save fields
      *
     D svsplit         s                   like(afxist)
     D svptct          s                   like(shptct)
     D wkstatus        s              1
      *
      *
      * Workfields
      *
     D wkavlb          s             15  9
     D wkremlb         s                   like(sgshlb)
     D wklb            s                   like(sgshlb)
      *
     D wkfsbo          s                   like(fsfsbo)
     D wkfscd          s                   like(fsfscd)
     D wkalphfscd      s              5
      *
     D wkblcd          s                   like(hgblcd)
     D wkrmcd          s                   like(hgrmcd)
     D wkhgsn          s                   like(hghgsn)
     D wkhgcd          s                   like(hghgcd)
     D wkopdt          s                   like(hgopdt)
      *
     D wkscdt          s                   like(shscdt)
     D wkackldt        s                   like(shsckldt)
     D wkshdt          s                   like(shshdt)
     D wkmvsn          s                   like(shmvsn)
     D wkltcd          s                   like(shltcd)
     D wkticd          s                   like(shticd)
     D wkcvno          s                   like(shcvno) inz(360516)
      *
     D wkshhd          s                   like(sgshhd)
     D wkshlb          s                   like(sgshlb)
      *
      *
      * Workfields for date manipulation
      *
     D wkudate         s                   like(shscdt)
     D wkcymdiso       s               D   datfmt(*iso)
      *
      *
      * Parms
      *
     D xxsynondt       s              7  0
     D xxccyymmdd      s              8  0
      *
     d xxhonb          s                   like(afhonb)
     d xxfxdt          s                   like(affxdt)
     d xxe9dt          s                   like(afe9dt)
     d xxajth          s                   like(afajth)
     d xxh4a1          s                   like(afh4a1)
     d xxmvsn          s                   like(afiea1)
     d xxrtrn          s             10
      *
      * Array indexes
      *
     D x               s              3  0
     D y               s              3  0
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Definition for external data area DAMVSN-Movement number
      *---------------------------------------------------------------
     D
     D                 ds
     D  damvsn                 1      7  0
      *
      *----------------------------------------------------------------------
      * Definition for external data area 'DAAPER-Current Accounting Period'
      *----------------------------------------------------------------------
     D
     D daaper          ds                  dtaara(daaper)
     D  daccyy                 1      4  0
     D  daper                  5      6  0
     D  dabpdt                 7     14  0
     D  daepdt                15     22  0
     D  dapgfl                23     23
     D  dappfl                24     24
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
      * Retrieve the SYNON record in Delivery Tracking that goes with the
      * incoming SYNON parms.
      *
     C     key02         chain     plafcpl1                           92
     C                   if        *in92 = *off                                 If synon hit
      *
      * Initialize workfields
      *
     C                   exsr      $clear
      *
      * First, if there is a SYNON movement number, you need to save some values
      * and do some checking on the HPS side.
     C
     C                   if        wkmvsn <> 0
     C                   exsr      $checknbr
     C                   endif
      *
      * Continue processing the Synon record if there is no Error so far.
      *
     C                   if        wkstatus = ' '                               If continue
     C                   exsr      $edit
      *
      * Format out put parm to tell prior program what is the error code.
      *
     C                   if        wkstatus = ' '                               If continue
      * Not in error     go to pass upd
     C                   GOTO      PROCUPD
     C                   ELSE
      * we have a error
     C                   movel     errnum        xxrtrn
     C                   move      wkstatus      xxrtrn
     C                   Call      'sssssss'
     C                   GOTO      PASSUPD
     C                   endif
      *
      *    ONLY WANT A VALIDATION FOR THIS SUPPORT ISSUE
      *    PASS ANY UPDATE
      *
      * Create HPS records if there are no errors.
      *
     C     PROCUPD       TAG
     C                   Call      'MOVEREV'
     C                   if        wkstatus = ' '
     C                   exsr      $movement
     C                   endif
      *
      *    ONLY WANT A VALIDATION FOR THIS SUPPORT ISSUE
      *
     C     PASSUPD       TAG
     C                   endif                                                  If continue
      *
     C                   endif                                                  If synon hit
      *
      * EOF processing
     C                   seton                                        lr
      /eject
      *---------------------------------------------------------------
      * Clear/populate workfields
      *---------------------------------------------------------------
      *
      * Synon fields are difficult to work with. SO, we will move values into
      * workfields.
      *
     C     $clear        begsr
      *
     C                   move      *blank        wkstatus
     C                   move      afxist        svsplit
     C                   z-add     0             svptct
      *
     C                   z-add     afiea1        wkmvsn
     C                   z-add     afica1        wkfscd
     C                   movel     aflgcd        wkhgcd
     C                   move      wkfscd        wkalphfscd
     C                   move      afk0cd        wkblcd
     C                   move      afk1cd        wkrmcd
     C                   move      afxhst        wkltcd
     C                   move      aflicd        wkticd
     C                   z-add     0             wkscdt
     C                   z-add     afida1        wkshhd
     C                   z-add     afipa1        wkshlb
      *
     C                   z-add     0             wkshdt
     C                   z-add     0             wkackldt                       actual kill date
     C                   z-add     0             wkhgsn
     C                   move      *blank        wkfsbo
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Edit Synon fields
      *---------------------------------------------------------------
      *
     C     $edit         begsr
      *
      * Validate fields that are always in the Delivery Tracking file:
      * (Since we think this program is called interactively, I stop editing at
      *  the first error.)
      *  1) farm site
      *  2) load type
      *  3) trucker
      *  4) shipped date
      *  5) actual kill date (from Delivery Tracking file)
      *  6) shipped head
      *  7) shipped pounds
      *
      *  ERRNUM = 1
     c                   Z-ADD     1             ERRNUM            5 0
     C                   exsr      $fscd
      *
      *  ERRNUM = 2
     c     ERRNUM        ADD       1             ERRNUM            5 0
     C                   if        wkstatus = ' '
     C                   exsr      $ltcd
     C                   endif
      *
      *  ERRNUM = 3
     c                   ADD       1             ERRNUM            5 0
     C                   if        wkstatus = ' '
     C                   exsr      $ticd
     C                   endif
      *
      *  ERRNUM = 4
     c                   ADD       1             ERRNUM            5 0
     C                   if        wkstatus = ' '
     C                   exsr      $shdt
     C                   endif
      *
      *  ERRNUM = 5
     c                   ADD       1             ERRNUM            5 0
     C                   if        wkstatus = ' '
     C                   exsr      $ackldt
     C                   endif
      *
      *  ERRNUM = 6
     c                   ADD       1             ERRNUM            5 0
     C                   if        wkstatus = ' '
     C                   exsr      $shhd
     C                   endif
      *
      *  ERRNUM = 7
     c                   ADD       1             ERRNUM            5 0
     C                   if        wkstatus = ' '
     C                   exsr      $shlb
     C                   endif
      *
      * If there are no errors so far, then validate Hog Group/Head.
      * The tricky part is, if this is a 'split' then these fields are in
      * multiple records in a different file. If it is not a 'split' these
      * fields are in the record you are already validating!
      *
      *  ERRNUM = 8
     C                   ADD       1             ERRNUM            5 0
     C                   if        wkstatus = ' '                               If still OK
      *
     C                   if        svsplit = 'S'
     C                   exsr      $splits
     C                   else
     C                   exsr      $hgcd
     C                   endif
      *
     C                   endif                                                  If still OK
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Farm Site
      *---------------------------------------------------------------
      *
     C     $fscd         begsr
      *
     C     wkfscd        chain     hsp018                             92
     C                   if        *in92 = *on                                  If no hit
     C                   move      'E'           wkstatus
     C                   Call      'ssssss1'
     C                   else
     C                   move      fsfsbo        wkfsbo
     C                   endif                                                  If no hit
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Load Type
      *---------------------------------------------------------------
      *
     C     $ltcd         begsr
      *
     C     wkltcd        chain     hsp067                             92
     C                   if        *in92 = *on                                  If no hit
     C                   move      'E'           wkstatus
     C                   Call      'ssssss2'
     C                   endif                                                  If no hit
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Trucker
      *---------------------------------------------------------------
      *
     C     $ticd         begsr
      *
     C                   if        wkticd <> *blank
      *
     C     wkticd        chain     hsp046                             92
     C                   if        *in92 = *on or tiaist <> 'A'
     C                   move      'E'           wkstatus
     C                   Call      'ssssss3'
     C                   endif
      *
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Shipped date (Start Loading Date)
      *---------------------------------------------------------------
      *
     C     $shdt         begsr
      *
     C                   if        afffdt = 0                                   If zero date
     C                   move      'E'           wkstatus
     C                   Call      'ssssss4'
     C                   else
      * Date edits
     C                   z-add     afffdt        xxsynondt
     C                   exsr      $dates
      *
      * Additional edit  -  ship date cannot be greater than today
     C                   if        wkstatus = ' ' and
     C                             xxccyymmdd > wkudate
     C                   move      'E'           wkstatus
     C                   Call      'ssssss5'
     C                   endif
      *
     C                   if        wkstatus = ' '
     C                   z-add     xxccyymmdd    wkshdt
      *
     C                   if        wkscdt = 0
     C                   z-add     xxccyymmdd    wkscdt
     C                   endif
      *
     C                   endif
      *
     C                   endif                                                  If zero date
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Scheduled Kill Date (DT Actual Kill Date)
      *---------------------------------------------------------------
      *
     C     $ackldt       begsr
      *
     C                   if        affxdt = 0                                   If zero date
     C                   move      'E'           wkstatus
     C                   Call      'ssssss6'
     C                   else
      *
     C                   z-add     affxdt        xxsynondt
     C                   exsr      $dates
      *
     C                   if        wkstatus = ' '
     C                   z-add     xxccyymmdd    wkackldt
     C                   endif
     C                   endif                                                  If zero date
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate dates
      *---------------------------------------------------------------
      *
     C     $dates        begsr
      *
      * Get Synon date into CCYYMMDD format
      *
     C                   call      'HP8011'
     C                   parm                    xxsynondt
     C                   parm      0             xxccyymmdd
      *
      * Date validations:
      *   1) date must be a valid date
      *   2) date cannot be in a closed period
      *   3) if the date is in the current period, the period close programs
      *      cannot be running
      *
     C     *iso          test(d)                 xxccyymmdd             92
     C                   if        *in92 = *on                                  If bad date
     C                   move      'E'           wkstatus
     C                   Call      'ssssss7'
     C                   else
      *
     C                   in        daaper
      *
     C                   if        xxccyymmdd < dabpdt or
     C                             (xxccyymmdd >= dabpdt and
     C                              xxccyymmdd <= daepdt and
     C                              dappfl <> *blank)
     C                   move      'E'           wkstatus
     C                   Call      'ssssss8'
     C                   endif
      *
     C                   endif                                                  If bad date
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Shipped Head (DT Delivered Head)
      *---------------------------------------------------------------
      *
      * Note: Purva indicates the SYNON field should have head in it....regardless of
      * whether the SYNON pounds field is valued or not. So, we will edit for a value
      * greater than zero. (If this changes and we start allowing a head value of zero,
      * review the logic for creating an HPS scheduled vs shipped movement.
      *
     C     $shhd         begsr
      *
     C                   if        wkshhd <= 0
     C                   move      'E'           wkstatus
     C                   Call      'ssssss9'
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Shipped Pounds (Delivered Weight Pounds)
      *---------------------------------------------------------------
      *
     C     $shlb         begsr
      *
     C                   if        wkshlb < 0
     C                   move      'E'           wkstatus
     C                   Call      'sssss10'
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Hog Group
      *---------------------------------------------------------------
      *
     C     $hgcd         begsr
      *
     C                   z-add     0             wkhgsn
      *
     C     wkhgcd        chain     hsp034                             92
     C                   if        *in92 = *off and
     C                             hggscd = 'OP' and
     C                             hgopdt <= wkshdt and
     C                             hgppcd <> 'NUR  ' and
     C                             hgfscd = wkfscd
     C                   z-add     hghgsn        wkhgsn
     C                   move      hgblcd        wkblcd
     C                   move      hgrmcd        wkrmcd
     C                   else
      *
      * If there is an error on the Hog Group, we will fall back on our
      * 'default the oldest group' logic and try again to get a valid group.
      *
     C                   exsr      $oldest
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Find the open group in the farm/building/room
      *---------------------------------------------------------------
      *
      * Find the oldest open group in a room. (The group must have an
      * open date on/before the scheduled ship date. We do not allow
      * Nursery groups.)
      *
     C     $oldest       begsr
      *
     C                   z-add     99999999      wkopdt
     C                   z-add     0             wkhgsn
      *
     C     key01         setll     hsl034p
      *
     C                   dou       *in93 = *on                                  Do loop
     C     key01         reade     hsl034p                                93
     C                   if        *in93 = *off and
     C                             hgopdt <= wkshdt and
     C                             hgopdt < wkopdt and
     C                             hgppcd <> 'NUR  ' and
     C                             hgfscd = wkfscd
     C                   z-add     hgopdt        wkopdt
     C                   z-add     hghgsn        wkhgsn
     C                   endif
     C                   enddo                                                  Do loop
      *
      * It is an error when you can't find an open group in the building/room.
      *
     C                   if        wkhgsn = 0
     C                   move      'E'           wkstatus
     C                   Call      'sssss11'
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Edit logic for Synon 'split' movements
      *---------------------------------------------------------------
      *
     C     $splits       begsr
      *
      * Initialize the arrays and indexes
      *
     C                   z-add     0             arhgsn
     C                   z-add     0             arshhd
     C                   z-add     0             x
     C                   z-add     0             y
      *
      * Process the Synon Delivery Tracking Split file. If you don't have any
      * split records, something is wrong on the SYNON side; so, just get out.
      *
     C     key02         setll     plajcpl1                               92
     C                   if        *in92 = *off                                 If no splits
     C                   move      'E'           wkstatus
     c                   Call      'sssss12'
     C                   else
      *
     C                   dou       *in91 = *on or wkstatus = 'E'                Do split loop
     C     key02         reade     plajcpl1                               91
     C                   if        *in91 = *off and wkstatus = ' '              If not EOF
      *
      *
      * Check shipped head. Continue editing if Shipped Head is OK
      *
     C                   z-add     ajiha1        wkshhd
     C                   exsr      $shhd
     C                   if        wkstatus = ' '                               If still OK
      *
      * Validate Hog Group.
      *
     C                   move      ajlkcd        wkhgcd
     C                   move      ajk4cd        wkblcd
     C                   move      ajk5cd        wkrmcd
     C                   exsr      $hgcd
      *
      *
      * If there are no errors, check that the Hog Group is only on the
      * movement 1 time.
     C                   if        wkstatus = ' '                               If good group
     C                   eval      x = 1
     C     wkhgsn        lookup    arhgsn(x)                              92
     C                   if        *in92 = *on                                  If dup
     C                   move      'E'           wkstatus
     c                   Call      'sssss13'
     C                   else
      *
      * This was not a duplicate record; so, set up the array entries.
      *
     C                   add       1             y
     C                   eval      arhgsn(y) = wkhgsn
     C                   z-add     wkshhd        arshhd(y)
     C                   endif                                                  If dup
     C                   endif                                                  If good group
      *
     C                   endif                                                  If still OK
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do split loop
      *
     C                   endif                                                  If no splits
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Create HPS Movement
      *---------------------------------------------------------------
      *
     C     $movement     begsr
      *
      * If you do not have a movement number, then:
      *     1) get a new HPS movement number and write records
      * If you have a movement number, then:
      *     1) delete existing HPS movement and rewrite with the same number
      *
      * New movement
     C                   select
     C                   when      wkmvsn = 0
      *
     C     *lock         in        damvsn
     C                   add       1             damvsn
     C                   out       damvsn
     C                   z-add     damvsn        wkmvsn
     C                   z-add     damvsn        xxmvsn
      *
     C                   exsr      $create
      *
      * Movement already exists
      *
     C                   other
     C                   exsr      $delete
     C                   exsr      $create
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Delete existing movements
      *---------------------------------------------------------------
      *
     C     $delete       begsr
      *
     C                   exsr      $dltsh
     C                   exsr      $dltsd
     C                   exsr      $dltme
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Delete Sales Movement Header record
      *----------------------------------------------------------------
      *
     C     $dltsh        begsr
      *
     C     wkmvsn        chain     hsp084                             92
     C                   if        *in92 = *off
     C                   delete    shrec
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Delete Sales Movement Detail Records
      *----------------------------------------------------------------
      *
     C     $dltsd        begsr
      *
     C     wkmvsn        setll     hsp085
      *
     C                   dou       *in91 = *on                                  Do detail
     C     wkmvsn        reade     hsp085                                 91
     C                   if        *in91 = *off                                 If not EOF
     C                   delete    sgrec
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do detail
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Delete Movement Event records
      *----------------------------------------------------------------
      *
     C     $dltme        begsr
      *
     C     wkmvsn        setll     hsp058
      *
     C                   dou       *in91 = *on                                  Do events
     C     wkmvsn        reade     hsp058                                 91
     C                   if        *in91 = *off                                 If not EOF
     C                   delete    merec
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do events
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Create HPS movement records
      *---------------------------------------------------------------
      *
     C     $create       begsr
      *
      * Always create a single Sales Movement Header record
      *
     C                   exsr      $crtsh
      *
      * Calculate the 'shipped pounds per head' that you will have to distribute to each
      * detail record.
      *
     C                   if        wkshhd <> 0
     C     wkshlb        div(h)    wkshhd        wkavlb
     C                   endif
      *
      * If this is a Synon split, you will be creating multiple detail records;
      * otherwise, create a single detail record.
      *
     C                   if        svsplit = 'S'
     C                   exsr      $arrays
     C                   else
     C                   exsr      $crtsd
     C                   exsr      $crtme
     C                   endif
      *
     C                   endsr
      /eject
      *-----------------------------------------------------------------------------------
      * Read the array entries for the Synon split records and create HPS detail records
      *-----------------------------------------------------------------------------------
      *
     C     $arrays       begsr
      *
     C                   z-add     wkshlb        wkremlb                        Remain = Shipped
     C                   z-add     0             x
      *
      * Process the arrays for this split
      *
     C                   do        y                                            Do arrays
     C                   add       1             x
     C                   z-add     arhgsn(x)     wkhgsn
     C                   z-add     arshhd(x)     wkshhd
      *
      * Distribute pounds
     C                   z-add     0             wkshlb
      *
      * If last record.
     C                   if        x = y                                        If last record
     C                   z-add     wkremlb       wkshlb
     C                   else
      *
     C                   if        wkremlb = 0                                  If lbs left
     C                   z-add     wkremlb       wkshlb
     C                   else
     C     wkshhd        mult      wkavlb        wklb
     C                   if        wklb > wkremlb
     C                   z-add     wkremlb       wkshlb
     C                   z-add     0             wkremlb
     C                   else
     C                   z-add     wklb          wkshlb
     C     wkremlb       sub       wklb          wkremlb
     C                   endif
     C                   endif                                                  If lbs left
     C                   endif                                                  If last record
      *
     C                   exsr      $crtsd
     C                   exsr      $crtme
     C                   enddo                                                  Do arrays
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Create HPS Sales movement header
      *---------------------------------------------------------------
      *
     C     $crtsh        begsr
      *
     C                   z-add     wkudate       shupdt
     C                   time                    shuptm
     C                   movel     sdpgm         shpgm
      *
     C                   move      *blank        shtpcd
     C                   z-add     0             shepdt
     C                   z-add     0             shpodt
      *
     C                   move      'MRKTS'       shstcd
     C                   z-add     wkcvno        shcvno
     C                   z-add     wkmvsn        shmvsn
     C                   z-add     wkfscd        shfscd
     C                   move      wkfsbo        shfsbo
     C                   move      wkltcd        shltcd
     C                   move      wkticd        shticd
     C                   z-add     svptct        shptct
      *
     C                   z-add     wkscdt        shscdt
     C                   z-add     wkackldt      shsckldt
      *
      *
      * If the SYNON field 'DT Delivered Wt LBS' is zero,
      *    a) then this movement will be treated as a 'scheduled' HPS movement
      * Otherwise:
      *    b) the movement will be treated as a 'shipped' movement in HPS
      *
     C                   select
     C                   when      wkshlb = 0
     C                   move      'SC'          shmscd
     C                   z-add     0             shshdt
     C                   z-add     0             shrcdt
      *
     C                   when      wkshlb > 0
     C                   move      'SH'          shmscd
     C                   z-add     wkshdt        shshdt
     C                   z-add     wkackldt      shrcdt
     C                   endsl
      *
     C                   write     shrec
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------------------------------
      * Create HPS Sales movement detail records
      *-------------------------------------------------------------------------------------
      *
     C     $crtsd        begsr
      *
      * This isn't really an edit; we just have to do some quirky scheduled head logic.
      * Since I truly have no way of matching up incoming SYNON records to existing HPS
      * detail records and I do not have 'scheduled head' in the SYNON files, I have
      * to make something up here for 'scheduled head' on the HPS records. So, I decided
      * that I would set 'scheduled head' to:
      *    a) to zero when the Delivery Tracking record has a Movement Number
      *    b) to 'shipped head' the Delivery Tracking record does not have a Movement Nbr
      *
     C                   if        afiea1 = 0
     C                   z-add     0             sgschd
     C                   else
     C                   z-add     wkshhd        sgschd
     C                   endif
      *
      * If you wrote the HPS Movement Header out as "scheduled",
      *     set shipped head and pounds to zero
      *
     C                   if        shmscd = 'SC'
     C                   z-add     0             sgshhd
     C                   z-add     0             sgshlb
     C                   else
     C                   z-add     wkshhd        sgshhd
     C                   z-add     wkshlb        sgshlb
     C                   endif
      *
      * The remaining fields are straight-forward.
      *
     C                   z-add     wkmvsn        sgmvsn
     C                   z-add     wkhgsn        sghgsn
      *
     C                   z-add     0             sglvhd
     C                   z-add     0             sglvlb
     C                   z-add     0             sgdohd
     C                   z-add     0             sgdolb
     C                   z-add     0             sgcdhd
     C                   z-add     0             sgcdlb
     C                   z-add     0             sgydhd
     C                   z-add     0             sgydlb
      *
     C                   write     sgrec
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------------------------------
      * Create HPS Movement Event records
      *-------------------------------------------------------------------------------------
      *
     C     $crtme        begsr
      *
     C                   z-add     wkudate       meupdt
     C                   time                    meuptm
     C                   movel     sdusr         meuscd
     C                   movel     sdpgm         mepgm
      *
     C                   z-add     wkmvsn        memvsn
     C                   z-add     0             mehsn
     C                   z-add     wkcvno        mecvno
     C                   z-add     0             melnno
      *
     C                   z-add     wkhgsn        mehgsn
     C                   movel     'S'           memtcd
     C                   movel     'O'           meodfl
     C                   z-add     wkackldt      memedt
      *
     C                   write     merec
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * SYNON sent a movement number into this program
      *---------------------------------------------------------------
      *
     C     $checknbr     begsr
      *
     C     wkmvsn        chain(n)  hsp084                             92
     C                   select
     C                   when      *in92 = *on
      *
     C                   when      shmscd <> 'SC' and shmscd <> 'SH'
     C                   move      'E'           wkstatus
     c                   Call      'sssss14'
     C                   other
      *
     C                   z-add     shptct        svptct
     C                   z-add     shscdt        wkscdt
     C                   endsl
     C
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
     C     *entry        plist
     C     afhonb        parm                    xxhonb
     C     affxdt        parm                    xxfxdt
     C     afe9dt        parm                    xxe9dt
     C     afajth        parm                    xxajth
     C     afh4a1        parm                    xxh4a1
     C                   parm                    xxmvsn
     C                   parm                    xxrtrn
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    wkfscd
     C                   kfld                    wkblcd
     C                   kfld                    wkrmcd
      *
     C     key02         klist
     C                   kfld                    afhonb
     C                   kfld                    affxdt
     C                   kfld                    afe9dt
     C                   kfld                    afajth
     C                   kfld                    afh4a1
      *
      * Flip system date to CCYYMMDD for populating update dates in records.
      *
     C     *mdy          move      udate         wkcymdiso
     C                   move      wkcymdiso     wkudate
      *
      *
      * Define the Data Area that contains the Planned Shipment number
      *
     C     *dtaara       define                  damvsn
      *
     C                   endsr
      /EJECT
