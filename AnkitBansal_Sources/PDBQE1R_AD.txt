// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDBQE1R
// ?Date: 14.08.2025 Time: 03:33:55
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(WRK.Allow_Multi_Company);
PARAMETER(WRK.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize detail screen (existing record)

//?If Auto-numbering get next # and protect New Customer field.
EXECUTE FUNCTION(RTV Cust # Increment   RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1836850;
PARAMETER(*ZERO);
PARAMETER(LCL.USR_Check_Y_N_Status);
PARAMETER(LCL.Customer_Number_NBR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Auto Customers Numbering? = DB1.Auto Customers Numbering?
 PAR.Auto_Customers_Numbering = DB1.Auto_Customers_Numbering;

 //?Ensure that the customer # retrieved is from when the Control
 //?record is locked.
 CASE;

 // IF DB1.Auto Customers Numbering? is yes
 IF DB1.Auto_Customers_Numbering = 'Y';

 EXECUTE FUNCTION(CHG Get lck incr Cust# CH) TYPE(CHGOBJ) FILE(CAASREP)          AC1836814;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Customer_Number_NBR);
 {
  //?USER: Processing before Data update

  // LCL.Record Found USR = CND.Record Found
  LCL.Record_Found_USR = 'Y';

  //?Loop and increment until we find an available Customer #
  // DOW LCL.Record Found USR is Record Found
  DOW LCL.Record_Found_USR = 'Y';

  EXECUTE FUNCTION(RTV Check Existence    RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1524178;
  PARAMETER(DB1.Next_Customer_#);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   // PGM.*Return code = CND.*Record already exists
   PGM.*Return_code = 'Y2U0003';

  }

  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // LCL.Record Found USR = CND.Record Not Found
  LCL.Record_Found_USR = 'N';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // DB1.Next Customer # = DB1.Next Customer # + CON.1
  DB1.Next_Customer_# = DB1.Next_Customer_# + 1;

  ENDIF;

  ENDDO;

  // PAR.Customer Number       NBR = DB1.Next Customer #
  PAR.Customer_Number_NBR = DB1.Next_Customer_#;

  // DB1.Next Customer # = DB1.Next Customer # + CON.1
  DB1.Next_Customer_# = DB1.Next_Customer_# + 1;

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

}


//?Auto-Numbering defined in '000' record on Company Control
CASE;

// IF LCL.USR Check Y/N Status is yes
IF LCL.USR_Check_Y_N_Status = 'Y';

// DTL.Customer Number       NBR = LCL.Customer Number       NBR
DTL.Customer_Number_NBR = LCL.Customer_Number_NBR;

ENDIF;

//?USER: Validate detail screen fields

EXECUTE FUNCTION(VAL Ship to Customer   RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1452403;
PARAMETER(DTL.Customer_Number_NBR);
PARAMETER(WRK.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'This customer already exists.'
ERROR(USR2533);
MSGPARM(DTL.Customer_Number_NBR);

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(CHG Customer           CH) TYPE(CHGOBJ) FILE(CABBREP)          AC1107938;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Customer_Name);
PARAMETER(DTL.Address_Line_1);
PARAMETER(DTL.Address_Line_2);
PARAMETER(DTL.Address_Line_3);
PARAMETER(DTL.City);
PARAMETER(DTL.State_Code);
PARAMETER(DTL.County_Code);
PARAMETER(DTL.Zip_Postal_Code);
PARAMETER(DTL.Telephone_Number_FF);
PARAMETER(DTL.Fax_Number_FF);
PARAMETER(DTL.Alpha_Search);
PARAMETER(DTL.Federal_Tax_Id);
PARAMETER(DTL.New_Customer_Status);
PARAMETER(DTL.SIC_Number);
PARAMETER(DTL.D_B_Number);
PARAMETER(DTL.D_B_Rating);
PARAMETER(DTL.Date_of_D_B_Rating);
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.Parent_Customer);
PARAMETER(DTL.Credit_Check_AR_Customer);
PARAMETER(DTL.Credit_Check_Parent_Cust);
PARAMETER(DTL.Country_Code);
PARAMETER(DTL.EDI_Invoice_Sts);
PARAMETER(DTL.Order_Entry_Hold);
PARAMETER(DTL.Parent_Credit_Limit);
PARAMETER(DTL.AR_Credit_Limit);
PARAMETER(DTL.Order_Entry_Hold_Date);
PARAMETER(DTL.Ship_To_Customer_Flag);
PARAMETER(DTL.Field_vs_In_House_flag);
PARAMETER(DTL.Email_When_Order_Shipped);
PARAMETER(DTL.Print_Invoice_Sts);
PARAMETER(DTL.Item_Reference_Status);
PARAMETER(DTL.Statement_Print_Frequency);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Process command keys

// PAR.Customer Number       NBR = DTL.Customer Number       NBR
PAR.Customer_Number_NBR = DTL.Customer_Number_NBR;

// PGM.*Return code = CND.Work with Details
PGM.*Return_code = 'WD';

RETURN;

