// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PWNFPVR
// ?Date: 14.08.2025 Time: 02:57:03
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification history
DO;

//?11/10/2021 JBB HD87450 - Update Buy Order Header with Commodity
//?                         Function modified.  Added Commodity Market
//?                         Code and Commodity Price Group fields to
//?                         the screen along with "Changed" fields.
//?                         New logic updates the Buy Order Header
//?                         file with the New Commodity values.
ENDDO;

//?Set all Changed Flags to No
// LCL.Changed - Producer = CND.No
LCL.Changed_Producer = 'N';

// LCL.Changed - Location = CND.No
LCL.Changed_Location = 'N';

// LCL.Changed - Contract = CND.No
LCL.Changed_Contract = 'N';

// LCL.Changed - Sub-Contract = CND.No
LCL.Changed_Sub_Contract = 'N';

// LCL.Changed - Market Code = CND.No
LCL.Changed_Market_Code = 'N';

// LCL.Changed - Price Group = CND.No
LCL.Changed_Price_Group = 'N';

// LCL.Changed - Site ID = CND.No
LCL.Changed_Site_ID = 'N';

//?USER: Load screen

//?Load screen values from incoming parameters
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.TRH Repayment ID = PAR.TRH Repayment ID
DTL.TRH_Repayment_ID = PAR.TRH_Repayment_ID;

// DTL.BOH Company Number = PAR.BOH Company Number
DTL.BOH_Company_Number = PAR.BOH_Company_Number;

// DTL.BOH Buy Order Number = PAR.BOH Buy Order Number
DTL.BOH_Buy_Order_Number = PAR.BOH_Buy_Order_Number;

// DTL.BOL Load Number = PAR.BOL Load Number
DTL.BOL_Load_Number = PAR.BOL_Load_Number;

// DTL.TH Tattoo Number = PAR.TH Tattoo Number
DTL.TH_Tattoo_Number = PAR.TH_Tattoo_Number;

// DTL.TH Kill Date = PAR.TH Kill Date
DTL.TH_Kill_Date = PAR.TH_Kill_Date;

// DTL.TRD Head Received = PAR.TRD Head Received
DTL.TRD_Pen_Head = PAR.TRD_Pen_Head;

// DTL.TRD Payment Sts = PAR.TRD Payment Sts
DTL.TRD_Payment_Sts = PAR.TRD_Payment_Sts;

// DTL.TRD Process Code = PAR.TRD Process Code
DTL.TRD_Process_Code = PAR.TRD_Process_Code;

// DTL.SR Source Code = PAR.SR Source Code
DTL.SR_Source_Code = PAR.SR_Source_Code;

ENDIF;

//?Retrieve Current values
EXECUTE FUNCTION(Rtv Comm/Group        RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1217474;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOH_Commodity_Market_Code);
PARAMETER(DTL.BOH_Commodity_Price_Group);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(Rtv Producer          RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1146757;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Site ID            RT) TYPE(RTVOBJ) FILE(PKDNCPP)          AB1268433;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(NLL.PD_Producer_Code);
PARAMETER(DTL.PS_Site_ID);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Sub-Contract Type RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1209352;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(NLL.PSC_FLoor_Price_+);
PARAMETER(NLL.PSC_Sub_Contract_Type);
PARAMETER(DTL.PC_Contract_Code);
PARAMETER(DTL.PSC_Sub_Contract_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 EXECUTE FUNCTION(Rtv Sub-Contract Type RT) TYPE(RTVOBJ) FILE(PKAQCPP)           AB1209362;
 PARAMETER(DB1.PC_Contract_Code);
 PARAMETER(DB1.PSC_Sub_Contract_Code);
 PARAMETER(PAR.PSC_FLoor_Price_+);
 PARAMETER(PAR.PSC_Sub_Contract_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?Default New values to Current values to test for change later
// DTL.Producer Code New = DTL.PD Producer Code
DTL.Producer_Code_New = DTL.PD_Producer_Code;

// DTL.Location Code New = DTL.PL Location Code
DTL.Location_Code_New = DTL.PL_Location_Code;

// DTL.Contract Code New = DTL.PC Contract Code
DTL.Contract_Code_New = DTL.PC_Contract_Code;

// DTL.Sub-Contract Code New = DTL.PSC Sub-Contract Code
DTL.Sub_Contract_Code_New = DTL.PSC_Sub_Contract_Code;

// DTL.Commodity Market Code New = DTL.BOH Commodity Market Code
DTL.Commodity_Market_Code_New = DTL.BOH_Commodity_Market_Code;

// DTL.Commodity Price Group New = DTL.BOH Commodity Price Group
DTL.Commodity_Price_Group_New = DTL.BOH_Commodity_Price_Group;

// DTL.Site Id New = DTL.PS Site ID
DTL.Site_Id_New = DTL.PS_Site_ID;

//?USER: Validate fields

//?F4=Prompt
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

//?Prompt on Producer Code New
CASE;

// IF PGM.*Cursor field <IS> DTL.Producer Code New
IF PGM.*Cursor_field = DTL.Producer_Code_New;

// Call program Sel Producer          SR.
CALL PROGRAM(Sel Producer          SR) ('PKA1SRR');
PARAMETER(DTL.Producer_Code_New);

ENDIF;

//?Prompt on Location Code New
CASE;

// IF PGM.*Cursor field <IS> DTL.Location Code New
IF PGM.*Cursor_field = DTL.Location_Code_New;

// Call program Sel Producer Loc      SR.
CALL PROGRAM(Sel Producer Loc      SR) ('PKKMSRR');
PARAMETER(DTL.Producer_Code_New);
PARAMETER(DTL.Location_Code_New);

ENDIF;

//?Prompt on Producer Site ID
CASE;

// IF PGM.*Cursor field <IS> DTL.Site Id New
IF PGM.*Cursor_field = DTL.Site_Id_New;

// Call program Sel Producer Site     SR.
CALL PROGRAM(Sel Producer Site     SR) ('PLGKSRR');
PARAMETER(DTL.Producer_Code_New);
PARAMETER(DTL.Site_Id_New);
PARAMETER(LCL.Oms_System_Value_Alpha);

ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv Prod Loc Exist    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1343763;
PARAMETER(DTL.Producer_Code_New);
PARAMETER(DTL.Location_Code_New);
PARAMETER(NLL.PL_Name);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


//?If record not found, send error message; ELSE get Contract Info
CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send error message - 'Repay: New Prod/Loc   NF'
ERROR(PRK1592);
MSGPARM(DTL.Producer_Code_New);
MSGPARM(DTL.Location_Code_New);

//?If record not found, send error message; ELSE get Contract Info
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Sb-Ctr BO info-DTEDF) TYPE(RTVOBJ) FILE(PKAQCPP)           AB1269440;
PARAMETER(DTL.Contract_Code_New);
PARAMETER(DTL.Sub_Contract_Code_New);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(DTL.Commodity_Market_Code_New);
PARAMETER(DTL.Commodity_Price_Group_New);
PARAMETER(NLL.PSC_Mkt_+_or);
PARAMETER(NLL.PSC_Market_Date_Method);
PARAMETER(DTL.Producer_Code_New);
PARAMETER(DTL.Location_Code_New);
PARAMETER(NLL.GN_Genetic_Code);
PARAMETER(NLL.PO_Option_Code);
PARAMETER(NLL.CMP_Program_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

EXECUTE FUNCTION(Rtv PrdSite Inform    RT) TYPE(RTVOBJ) FILE(PLATREP)           AB1273272;
PARAMETER(DTL.Producer_Code_New);
PARAMETER(DTL.Site_Id_New);
PARAMETER(NLL.PS_Site_Name);
PARAMETER(NLL.PS_Manager);
PARAMETER(NLL.PS_Address);
PARAMETER(NLL.PS_City);
PARAMETER(NLL.PS_State);
PARAMETER(NLL.PS_Zip_Code);
PARAMETER(NLL.PS_Latitude);
PARAMETER(NLL.PS_Longitude);
PARAMETER(NLL.PS_User_Mileage_1);
PARAMETER(NLL.PS_User_Mileage_2);
PARAMETER(NLL.PS_Facility_Type_County);
PARAMETER(NLL.PS_Status_1);
PARAMETER(NLL.PS_Status_2);
PARAMETER(NLL.PS_Status_3);
PARAMETER(NLL.PS_Trace_Sequence_#);
PARAMETER(NLL.PS_Veterinarian);
PARAMETER(NLL.PS_Nutritionist);
PARAMETER(NLL.PS_Premises_ID);
PARAMETER(NLL.RS_Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If Producer Site New record not found, send error message
CASE;

// IF NOT PGM.*Return code is *Normal
IF ! PGM.*Return_code = *BLANK;

// Send error message - 'Repay: Site ID        NF'
ERROR(PRK1593);
MSGPARM(DTL.Site_Id_New);

ENDIF;

//?USER: Validate relations

//?If Producer Code changed, display "Changed"
CASE;

// IF DTL.PD Producer Code NE DTL.Producer Code New
IF DTL.PD_Producer_Code <> DTL.Producer_Code_New;

// LCL.Changed - Producer = CND.Yes
LCL.Changed_Producer = 'Y';

//?If Producer Code changed, display "Changed"
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Changed - Producer = CND.No
LCL.Changed_Producer = 'N';

ENDIF;

//?If Location Code changed, display "Changed"
CASE;

// IF DTL.PL Location Code NE DTL.Location Code New
IF DTL.PL_Location_Code <> DTL.Location_Code_New;

// LCL.Changed - Location = CND.Yes
LCL.Changed_Location = 'Y';

//?If Location Code changed, display "Changed"
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Changed - Location = CND.No
LCL.Changed_Location = 'N';

ENDIF;

//?If Contract Code changed, display "Changed"
CASE;

// IF DTL.PC Contract Code NE DTL.Contract Code New
IF DTL.PC_Contract_Code <> DTL.Contract_Code_New;

// LCL.Changed - Contract = CND.Yes
LCL.Changed_Contract = 'Y';

//?If Contract Code changed, display "Changed"
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Changed - Contract = CND.No
LCL.Changed_Contract = 'N';

ENDIF;

//?If Sub-Contract Code changed, display "Changed"
CASE;

// IF DTL.PSC Sub-Contract Code NE DTL.Sub-Contract Code New
IF DTL.PSC_Sub_Contract_Code <> DTL.Sub_Contract_Code_New;

// LCL.Changed - Sub-Contract = CND.Yes
LCL.Changed_Sub_Contract = 'Y';

//?If Sub-Contract Code changed, display "Changed"
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Changed - Sub-Contract = CND.No
LCL.Changed_Sub_Contract = 'N';

ENDIF;

//?If Commodity Market Code changed, display "Changed"
CASE;

// IF DTL.BOH Commodity Market Code NE DTL.Commodity Market Code New
IF DTL.BOH_Commodity_Market_Code <> DTL.Commodity_Market_Code_New;

// LCL.Changed - Market Code = CND.Yes
LCL.Changed_Market_Code = 'Y';

//?If Commodity Market Code changed, display "Changed"
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Changed - Market Code = CND.No
LCL.Changed_Market_Code = 'N';

ENDIF;

//?If Commodity Price Group changed, display "Changed"
CASE;

// IF DTL.BOH Commodity Price Group NE DTL.Commodity Price Group New
IF DTL.BOH_Commodity_Price_Group <> DTL.Commodity_Price_Group_New;

// LCL.Changed - Price Group = CND.Yes
LCL.Changed_Price_Group = 'Y';

//?If Commodity Price Group changed, display "Changed"
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Changed - Price Group = CND.No
LCL.Changed_Price_Group = 'N';

ENDIF;

//?If Site ID changed, display "Changed"
CASE;

// IF DTL.PS Site ID NE DTL.Site Id New
IF DTL.PS_Site_ID <> DTL.Site_Id_New;

// LCL.Changed - Site ID = CND.Yes
LCL.Changed_Site_ID = 'Y';

//?If Site ID changed, display "Changed"
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Changed - Site ID = CND.No
LCL.Changed_Site_ID = 'N';

ENDIF;

//?USER: User defined action

//?Check for changes and perform updates
CASE;

// IF LCL.Changed - Producer is Yes
IF LCL.Changed_Producer = 'Y';

// OR LCL.Changed - Location is Yes
OR LCL.Changed_Location = 'Y';

// OR LCL.Changed - Contract is Yes
OR LCL.Changed_Contract = 'Y';

// OR LCL.Changed - Sub-Contract is Yes
OR LCL.Changed_Sub_Contract = 'Y';

// OR LCL.Changed - Site ID is Yes
OR LCL.Changed_Site_ID = 'Y';

// OR LCL.Changed - Market Code is Yes
OR LCL.Changed_Market_Code = 'Y';

// OR LCL.Changed - Price Group is Yes
OR LCL.Changed_Price_Group = 'Y';

// Call program Upd Prod Files-Repay  XF.
CALL PROGRAM(Upd Prod Files-Repay  XF) ('PWNGXFR');
PARAMETER(DTL.Producer_Code_New);
PARAMETER(DTL.Location_Code_New);
PARAMETER(DTL.Contract_Code_New);
PARAMETER(DTL.Sub_Contract_Code_New);
PARAMETER(DTL.Site_Id_New);
PARAMETER(DTL.Commodity_Market_Code_New);
PARAMETER(DTL.Commodity_Price_Group_New);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.PC_Contract_Code);
PARAMETER(DTL.PSC_Sub_Contract_Code);
PARAMETER(DTL.BOH_Commodity_Market_Code);
PARAMETER(DTL.BOH_Commodity_Price_Group);
PARAMETER(DTL.PS_Site_ID);
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.TRH_Repayment_ID);
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);

//?If Producer changed, create a system comment
CASE;

// IF LCL.Changed - Producer is Yes
IF LCL.Changed_Producer = 'Y';

// LCL.TRC Comment = CONCAT(CON.Producer changed from,DTL.PD Producer Code,CND.*One)
LCL.TRC_Comment = 'Producer changed from' + DTL.PD_Producer_Code (1);

// LCL.TRC Comment = CONCAT(LCL.TRC Comment,CON.to,CND.*One)
LCL.TRC_Comment = LCL.TRC_Comment + 'to' (1);

// LCL.TRC Comment = CONCAT(LCL.TRC Comment,DTL.Producer Code New,CND.*One)
LCL.TRC_Comment = LCL.TRC_Comment + DTL.Producer_Code_New (1);

EXECUTE FUNCTION(Crt Tattoo Repay Cmnt CR) TYPE(CRTOBJ) FILE(PWAYCPP)           AB1364775;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.TRH_Repayment_ID);
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.TRC_Comment);
PARAMETER('S');
{
 //?USER: Processing before Data update

 //?Make sure BOH Company Number is populated
 CASE;

 // IF PAR.BOH Company Number is *ZERO
 IF PAR.BOH_Company_Number = *ZERO;

 // DB1.BOH Company Number = PAR.CC Company Number
 DB1.BOH_Company_Number = PAR.CC_Company_Number;

 ENDIF;

 EXECUTE FUNCTION(Rtv Next Comment Seq# RT) TYPE(RTVOBJ) FILE(PWAYCPP)           AB1366735;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.TRH_Repayment_ID);
 PARAMETER(DB1.TRC_Sequence);
 {
  //?USER: Processing if Data record not found

  // PAR.TRC Sequence = CON.1
  PAR.TRC_Sequence = 1;

  //?USER: Process Data record

  // PAR.TRC Sequence = DB1.TRC Sequence + CON.1
  PAR.TRC_Sequence = DB1.TRC_Sequence + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


ENDIF;

//?If Location changed, create a system comment
CASE;

// IF LCL.Changed - Location is Yes
IF LCL.Changed_Location = 'Y';

// LCL.TRC Comment = CONCAT(CON.Location changed from,DTL.PL Location Code,CND.*One)
LCL.TRC_Comment = 'Location changed from' + DTL.PL_Location_Code (1);

// LCL.TRC Comment = CONCAT(LCL.TRC Comment,CON.to,CND.*One)
LCL.TRC_Comment = LCL.TRC_Comment + 'to' (1);

// LCL.TRC Comment = CONCAT(LCL.TRC Comment,DTL.Location Code New,CND.*One)
LCL.TRC_Comment = LCL.TRC_Comment + DTL.Location_Code_New (1);

EXECUTE FUNCTION(Crt Tattoo Repay Cmnt CR) TYPE(CRTOBJ) FILE(PWAYCPP)           AB1364775;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.TRH_Repayment_ID);
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.TRC_Comment);
PARAMETER('S');
{
 //?USER: Processing before Data update

 //?Make sure BOH Company Number is populated
 CASE;

 // IF PAR.BOH Company Number is *ZERO
 IF PAR.BOH_Company_Number = *ZERO;

 // DB1.BOH Company Number = PAR.CC Company Number
 DB1.BOH_Company_Number = PAR.CC_Company_Number;

 ENDIF;

 EXECUTE FUNCTION(Rtv Next Comment Seq# RT) TYPE(RTVOBJ) FILE(PWAYCPP)           AB1366735;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.TRH_Repayment_ID);
 PARAMETER(DB1.TRC_Sequence);
 {
  //?USER: Processing if Data record not found

  // PAR.TRC Sequence = CON.1
  PAR.TRC_Sequence = 1;

  //?USER: Process Data record

  // PAR.TRC Sequence = DB1.TRC Sequence + CON.1
  PAR.TRC_Sequence = DB1.TRC_Sequence + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


ENDIF;

//?If Contract changed, create a system comment
CASE;

// IF LCL.Changed - Contract is Yes
IF LCL.Changed_Contract = 'Y';

// LCL.TRC Comment = CONCAT(CON.Contract changed from,DTL.PC Contract Code,CND.*One)
LCL.TRC_Comment = 'Contract changed from' + DTL.PC_Contract_Code (1);

// LCL.TRC Comment = CONCAT(LCL.TRC Comment,CON.to,CND.*One)
LCL.TRC_Comment = LCL.TRC_Comment + 'to' (1);

// LCL.TRC Comment = CONCAT(LCL.TRC Comment,DTL.Contract Code New,CND.*One)
LCL.TRC_Comment = LCL.TRC_Comment + DTL.Contract_Code_New (1);

EXECUTE FUNCTION(Crt Tattoo Repay Cmnt CR) TYPE(CRTOBJ) FILE(PWAYCPP)           AB1364775;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.TRH_Repayment_ID);
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.TRC_Comment);
PARAMETER('S');
{
 //?USER: Processing before Data update

 //?Make sure BOH Company Number is populated
 CASE;

 // IF PAR.BOH Company Number is *ZERO
 IF PAR.BOH_Company_Number = *ZERO;

 // DB1.BOH Company Number = PAR.CC Company Number
 DB1.BOH_Company_Number = PAR.CC_Company_Number;

 ENDIF;

 EXECUTE FUNCTION(Rtv Next Comment Seq# RT) TYPE(RTVOBJ) FILE(PWAYCPP)           AB1366735;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.TRH_Repayment_ID);
 PARAMETER(DB1.TRC_Sequence);
 {
  //?USER: Processing if Data record not found

  // PAR.TRC Sequence = CON.1
  PAR.TRC_Sequence = 1;

  //?USER: Process Data record

  // PAR.TRC Sequence = DB1.TRC Sequence + CON.1
  PAR.TRC_Sequence = DB1.TRC_Sequence + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


ENDIF;

//?If Sub-Contract changed, create a system comment
CASE;

// IF LCL.Changed - Sub-Contract is Yes
IF LCL.Changed_Sub_Contract = 'Y';

// LCL.TRC Comment = CONCAT(CON.Sub-Contract changed from,DTL.PSC Sub-Contract Code,CND.*One)
LCL.TRC_Comment = 'Sub-Contract changed from' + DTL.PSC_Sub_Contract_Code (1);

// LCL.TRC Comment = CONCAT(LCL.TRC Comment,CON.to,CND.*One)
LCL.TRC_Comment = LCL.TRC_Comment + 'to' (1);

// LCL.TRC Comment = CONCAT(LCL.TRC Comment,DTL.Sub-Contract Code New,CND.*One)
LCL.TRC_Comment = LCL.TRC_Comment + DTL.Sub_Contract_Code_New (1);

EXECUTE FUNCTION(Crt Tattoo Repay Cmnt CR) TYPE(CRTOBJ) FILE(PWAYCPP)           AB1364775;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.TRH_Repayment_ID);
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.TRC_Comment);
PARAMETER('S');
{
 //?USER: Processing before Data update

 //?Make sure BOH Company Number is populated
 CASE;

 // IF PAR.BOH Company Number is *ZERO
 IF PAR.BOH_Company_Number = *ZERO;

 // DB1.BOH Company Number = PAR.CC Company Number
 DB1.BOH_Company_Number = PAR.CC_Company_Number;

 ENDIF;

 EXECUTE FUNCTION(Rtv Next Comment Seq# RT) TYPE(RTVOBJ) FILE(PWAYCPP)           AB1366735;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.TRH_Repayment_ID);
 PARAMETER(DB1.TRC_Sequence);
 {
  //?USER: Processing if Data record not found

  // PAR.TRC Sequence = CON.1
  PAR.TRC_Sequence = 1;

  //?USER: Process Data record

  // PAR.TRC Sequence = DB1.TRC Sequence + CON.1
  PAR.TRC_Sequence = DB1.TRC_Sequence + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


ENDIF;

//?If Commodity Market Code value changed, create a system comment
CASE;

// IF LCL.Changed - Market Code is Yes
IF LCL.Changed_Market_Code = 'Y';

// LCL.TRC Comment = CONCAT(CON.Market Code changed from,DTL.BOH Commodity Market Code,CND.*One)
LCL.TRC_Comment = 'Market Code changed from' + DTL.BOH_Commodity_Market_Code (1);

// LCL.TRC Comment = CONCAT(LCL.TRC Comment,CON.to,CND.*One)
LCL.TRC_Comment = LCL.TRC_Comment + 'to' (1);

// LCL.TRC Comment = CONCAT(LCL.TRC Comment,DTL.Commodity Market Code New,CND.*One)
LCL.TRC_Comment = LCL.TRC_Comment + DTL.Commodity_Market_Code_New (1);

EXECUTE FUNCTION(Crt Tattoo Repay Cmnt CR) TYPE(CRTOBJ) FILE(PWAYCPP)           AB1364775;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.TRH_Repayment_ID);
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.TRC_Comment);
PARAMETER('S');
{
 //?USER: Processing before Data update

 //?Make sure BOH Company Number is populated
 CASE;

 // IF PAR.BOH Company Number is *ZERO
 IF PAR.BOH_Company_Number = *ZERO;

 // DB1.BOH Company Number = PAR.CC Company Number
 DB1.BOH_Company_Number = PAR.CC_Company_Number;

 ENDIF;

 EXECUTE FUNCTION(Rtv Next Comment Seq# RT) TYPE(RTVOBJ) FILE(PWAYCPP)           AB1366735;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.TRH_Repayment_ID);
 PARAMETER(DB1.TRC_Sequence);
 {
  //?USER: Processing if Data record not found

  // PAR.TRC Sequence = CON.1
  PAR.TRC_Sequence = 1;

  //?USER: Process Data record

  // PAR.TRC Sequence = DB1.TRC Sequence + CON.1
  PAR.TRC_Sequence = DB1.TRC_Sequence + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


ENDIF;

//?If Commodity Price Group value changed, create a system comment
CASE;

// IF LCL.Changed - Price Group is Yes
IF LCL.Changed_Price_Group = 'Y';

// LCL.TRC Comment = CONCAT(CON.Price Group changed from,DTL.BOH Commodity Price Group,CND.*One)
LCL.TRC_Comment = 'Price Group changed from' + DTL.BOH_Commodity_Price_Group (1);

// LCL.TRC Comment = CONCAT(LCL.TRC Comment,CON.to,CND.*One)
LCL.TRC_Comment = LCL.TRC_Comment + 'to' (1);

// LCL.TRC Comment = CONCAT(LCL.TRC Comment,DTL.Commodity Price Group New,CND.*One)
LCL.TRC_Comment = LCL.TRC_Comment + DTL.Commodity_Price_Group_New (1);

EXECUTE FUNCTION(Crt Tattoo Repay Cmnt CR) TYPE(CRTOBJ) FILE(PWAYCPP)           AB1364775;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.TRH_Repayment_ID);
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.TRC_Comment);
PARAMETER('S');
{
 //?USER: Processing before Data update

 //?Make sure BOH Company Number is populated
 CASE;

 // IF PAR.BOH Company Number is *ZERO
 IF PAR.BOH_Company_Number = *ZERO;

 // DB1.BOH Company Number = PAR.CC Company Number
 DB1.BOH_Company_Number = PAR.CC_Company_Number;

 ENDIF;

 EXECUTE FUNCTION(Rtv Next Comment Seq# RT) TYPE(RTVOBJ) FILE(PWAYCPP)           AB1366735;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.TRH_Repayment_ID);
 PARAMETER(DB1.TRC_Sequence);
 {
  //?USER: Processing if Data record not found

  // PAR.TRC Sequence = CON.1
  PAR.TRC_Sequence = 1;

  //?USER: Process Data record

  // PAR.TRC Sequence = DB1.TRC Sequence + CON.1
  PAR.TRC_Sequence = DB1.TRC_Sequence + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


ENDIF;

//?If Site ID changed, create a system comment
CASE;

// IF LCL.Changed - Site ID is Yes
IF LCL.Changed_Site_ID = 'Y';

// LCL.TRC Comment = CONCAT(CON.Site ID changed from,DTL.PS Site ID,CND.*One)
LCL.TRC_Comment = 'Site ID changed from' + DTL.PS_Site_ID (1);

// LCL.TRC Comment = CONCAT(LCL.TRC Comment,CON.to,CND.*One)
LCL.TRC_Comment = LCL.TRC_Comment + 'to' (1);

// LCL.TRC Comment = CONCAT(LCL.TRC Comment,DTL.Site Id New,CND.*One)
LCL.TRC_Comment = LCL.TRC_Comment + DTL.Site_Id_New (1);

EXECUTE FUNCTION(Crt Tattoo Repay Cmnt CR) TYPE(CRTOBJ) FILE(PWAYCPP)           AB1364775;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.TRH_Repayment_ID);
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.TRC_Comment);
PARAMETER('S');
{
 //?USER: Processing before Data update

 //?Make sure BOH Company Number is populated
 CASE;

 // IF PAR.BOH Company Number is *ZERO
 IF PAR.BOH_Company_Number = *ZERO;

 // DB1.BOH Company Number = PAR.CC Company Number
 DB1.BOH_Company_Number = PAR.CC_Company_Number;

 ENDIF;

 EXECUTE FUNCTION(Rtv Next Comment Seq# RT) TYPE(RTVOBJ) FILE(PWAYCPP)           AB1366735;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.TRH_Repayment_ID);
 PARAMETER(DB1.TRC_Sequence);
 {
  //?USER: Processing if Data record not found

  // PAR.TRC Sequence = CON.1
  PAR.TRC_Sequence = 1;

  //?USER: Process Data record

  // PAR.TRC Sequence = DB1.TRC Sequence + CON.1
  PAR.TRC_Sequence = DB1.TRC_Sequence + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


ENDIF;

// Call program Chg Tatt Repay Dtl Sts XF.
CALL PROGRAM(Chg Tatt Repay Dtl Sts XF) ('PWNQXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.TRH_Repayment_ID);
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER('E');

// LCL.TRC Comment = CONCAT(CON.Tattoo record marked as e,CON.dited (Prod/Loc/Site/CAK/,CND.*None)
LCL.TRC_Comment = 'Tattoo record marked as e' + 'dited (Prod/Loc/Site/CAK/' (*ZERO);

// LCL.TRC Comment = CONCAT(LCL.TRC Comment,CON.Sub-CAK),CND.*None)
LCL.TRC_Comment = LCL.TRC_Comment + 'Sub-CAK)' (*ZERO);

EXECUTE FUNCTION(Crt Tattoo Repay Cmnt CR) TYPE(CRTOBJ) FILE(PWAYCPP)           AB1364775;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.TRH_Repayment_ID);
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(LCL.TRC_Comment);
PARAMETER('S');
{
 //?USER: Processing before Data update

 //?Make sure BOH Company Number is populated
 CASE;

 // IF PAR.BOH Company Number is *ZERO
 IF PAR.BOH_Company_Number = *ZERO;

 // DB1.BOH Company Number = PAR.CC Company Number
 DB1.BOH_Company_Number = PAR.CC_Company_Number;

 ENDIF;

 EXECUTE FUNCTION(Rtv Next Comment Seq# RT) TYPE(RTVOBJ) FILE(PWAYCPP)           AB1366735;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.TRH_Repayment_ID);
 PARAMETER(DB1.TRC_Sequence);
 {
  //?USER: Processing if Data record not found

  // PAR.TRC Sequence = CON.1
  PAR.TRC_Sequence = 1;

  //?USER: Process Data record

  // PAR.TRC Sequence = DB1.TRC Sequence + CON.1
  PAR.TRC_Sequence = DB1.TRC_Sequence + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


ENDIF;

