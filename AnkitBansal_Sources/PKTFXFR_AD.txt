// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKTFXFR
// ?Date: 14.08.2025 Time: 02:51:17
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modifications and Comments
DO;

//?SDN440 RMC 05/20/21 - ADDED CHECK FOR PORKISTESTING USER BEFORE
//?- Submitting Create EDI Carcass Summary/Detail (PWEHXFR)
//?H16853 ISE 11/09/2020 - Recompiled due to change in Buy Order Number
//?E13291 JBB  7/06/18 - Payment Push Automation
//?- Add a Push Type parameter to the submitted call of the Push to
//?  Pay process called at the end of this process.  Passed in an 'A'
//?  to signify this is an Automatic call of the Push to Pay process.
//?E10169 JBB  4/25/18 - Do not print MPR Comparison report for 961
//?- Jerry reported that on 4/3/18, that the Paid values and the USDA
//?  values did not match for a Tattoo#.  This was because 960 and
//?  440 had the same Tattoo# on the same day because of the Payment
//?  Push process.  Susan says that the report is not needed for
//?  Company 961 because all of the values should be 440 values.
//?E10169 JJH 11/28/17 - Payment Producer Post Modifications
//?- This logic was re-instated after we corrected the error in the
//?  PWEHXFR program that was generating an error.
//?- Submit Create EDI Carcass Summary/Detail (PWEHXFR)
//?- This function was created to submit the EDI Carcass Summary and
//?  Detail as a seperate job.  If this job fails, it can be
//?  cancelled without affecting the other portions of the Post
//?  Producer Payments.
//?- Because this process uses FTP, and SFTP these processes some
//?  sometimes fail and it takes time to resolve, and this causes
//?  other jobs in the job queue to be delayed.
//?- This will allow the Post Payment Processing to complete, instead
//?  of waiting to resolve issues regarding FTP and SFTP.
//?- We have the option to run the ReCreate the EDI files for a
//?  Kill Date (PLGIPVR) as an on-demand job.
//?E9904  JBB  9/08/2017 - Push Payment from 440 to 961
//?- Add a submit to the Payment Push driver program if the current
//?  company is set up to perform a push.  Currently, only company 440
//?  is set up in the Company Values file to perform a payment push.
//?E10169 JJH 08/22/17 - Post Payment Producer Modifications
//?- Modify program so that it will generate the EDI Carcasss Summary
//?  and Detail if *USER is PorkISTesting
//?E10169 JJH 08/22/17 - Post Payment Producer Modifications
//?- Temporarily disable the job that submits separte job to be
//?  processed in PRKFTPQ for FTP/SFTP/Emails.  We could not successfully
//?  test this process.
//?E10169 JJH 08/14/17 - Post Payment Producer Modifications
//?- Allow FTP Method (FTP, SFTP, or Email) for PrkISTesting to be
//?  determined by the Ext ProducerFTPMethod XF - Producer (PWDUXFR)
//?E10169 JJH 08/07/17 - Payment Producer Post Modifications
//?- Submit Create EDI Carcass Summary/Detail (PWEHXFR)
//?- This function was created to submit the EDI Carcass Summary and
//?  Detail as a seperate job.  If this job fails, it can be
//?  cancelled without affecting the other portions of the Post
//?  Producer Payments.
//?- Because this process uses FTP, and SFTP these processes some
//?  sometimes fail and it takes time to resolve, and this causes
//?  other jobs in the job queue to be delayed.
//?- This will allow the Post Payment Processing to complete, instead
//?  of waiting to resolve issues regarding FTP and SFTP.
//?- We have the option to run the ReCreate the EDI files for a
//?  Kill Date (PLGIPVR) as an on-demand job.
//?E10169 JJH 07/26/17 - Payment Producer Post Modifications
//?- Recompile to allow *USER LST: PorkISTesting to alllow Susan
//?  Blakey and Julius High to run the Payment Post Edit. This
//?  allows IT to process when troubleshooting problems.
//?E10169 - Posting changes STF and testing 7/9/2017
DO;

//?slm 07/09/17 Changes due to TPMTESTF is not yet established
//?to allow us to run some areas so I bypass section that are for
//?production only.
//?At this time the test data, will not be sent to the IHUB
//?see 2nd part of step 6.
//?slm 07/09/17 Allow all of the EDI Carcass Detail/Summary file to
//?be created when in the testing but do not ftp to the folders
//?but send these files out via Email/Julius will be working
//?on the email of the edi carcass detail/edi carcass summary
//?see step 7.  At this time this is * out waiting for us to
//?to have this ready via email
//?also at this time 440 WILL NOT FTP to folders, and until the
//?.net has something to cover 440, we will send these files via
//?email, Julius and I will get these,
//?carcass summary/crcass detail,
//?un * this statement when that section is ready Step 7
ENDDO;

//?RMC 04/28/17 T8163 added email sql with M3 ap vouchers, in step 7
//?RMC 11/23/05 added co to mplus msgs
//?S0555 SLM 11/14/2008 When the EDI create is being perform
DO;

//?S0555 SLM 11/14/2008 When the EDI create is being perform
//?pass new parm to state the EDI will need to send out the files
//?to the web.  Or do not send the files to the web
//?The sequels are not to be performed then the process flag
//?on the EDI carcass summary & detail will be set to a P for
//?process.  the sequels do not pick up records that are mark P
//?If the sequels will be  performed then the process flag will
//?be set to A for Active, the sequels will pick up all
//?records that are active, and then the sequels will perform
//?another update to change these active records to P for process
ENDDO;

//?slm 06/26/2013 - Put the EDI, purge of tattoo pending(960)
//?AT step 7 user selecting the payment post twice and edi was getting
//?kicked off twice while the other one was running
//?E3625 JJH 12/04/14 - Recompile because PrklISTesting List for
//? field *USER to add users Julius High (ISJHIGH) and Collin Lynch
//? ISCLYNC.
ENDDO;

EXECUTE FUNCTION(Rtv Payment Processing RT) TYPE(RTVOBJ) FILE(PKC4REP)          AB1147409;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER(WRK.Pmt_Current_Payment_Step);
PARAMETER(WRK.PP_Commission_Paym_Error);
PARAMETER(WRK.PP_Payment_Error);
PARAMETER(WRK.PP_Unused_Nbr_1);
PARAMETER(WRK.PP_Repayment_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Office Dist List USR = CON.PRKHPPST
LCL.Office_Dist_List_USR = 'PRKHPPST';

//?1/17/2008 SLM ADD DUE TO THE FACT THAT MPLUS COULD NOT
//?SEND A COMPLETED MESSAGE DUE TO COMPLETED MESSAGES DO NOT
//?GO TO QSYSOPR. THEY GO TO THE USER
//?Added the HPEPAYCMP in company value to get
//?the distro list for the completed job message that we build
//?this is the last message only.  all other message
//?PRKHPPST - will be for guymon
//?TFHPEPAYP - will be for stjoe
//?Get the distro list for Office Dist List USR2
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPEPAYPCMP');
PARAMETER(LCL.Office_Dist_List_USR2);

//?Step 6, 7, & Roll Kill Date
CASE;

// IF WRK.PP Payment Error is No Errors
IF WRK.PP_Payment_Error = 'N';

// AND WRK.PP Commission Paym Error is No Errors
AND WRK.PP_Commission_Paym_Error = 'N';

//?Step 6: Payment Post
DO;

EXECUTE FUNCTION(Current Time) TYPE(DRVFLD)                                     AB1204687;
PARAMETER(PAR.Current_Time);
{
 //?Calculate derived field

 // Execute function Rtv Current Time      US.
 EXECUTE FUNCTION(Rtv Current Time      US) TYPE(EXCUSRSRC) ('PKM1UFR');
 PARAMETER(PAR.Current_Time);
 {
  C                     TIME           #OA1TM
 }

}


// Retrieve message - 'Payment Post for &3 &1 started at &2.'
WRK.Office_Dist_Message_USR = RTVMSG(PRK0785);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER(PAR.Current_Time);
PARAMETER(PAR.CC_Company_Number);

// Call program Snd Pager Msg (MPLUS) UP.
CALL PROGRAM(Snd Pager Msg (MPLUS) UP) ('POMSUPC');
PARAMETER(LCL.Office_Dist_List_USR);
PARAMETER(WRK.Office_Dist_Message_USR);

//?Step 6:  Producer Posting
CASE;

// IF WRK.Pmt Current Payment Step is Less or Equal to Step 6
IF WRK.Pmt_Current_Payment_Step <= 00006;

//?Step 6  Payment posting and producer Post/Create Producer Vouchers
CASE;

// IF WRK.Pmt Current Payment Step is Greater then or Equal 5
IF WRK.Pmt_Current_Payment_Step >= 00005;

// WRK.Pmt Current Payment Step = CND.00006 Producer Payment
WRK.Pmt_Current_Payment_Step = 00006;

EXECUTE FUNCTION(Upd Paymnt Prc         CH) TYPE(CHGOBJ) FILE(PKC4REP)          AB1146820;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Step);
PARAMETER(WRK.PP_Commission_Paym_Error);
PARAMETER(WRK.PP_Payment_Error);
PARAMETER(WRK.PP_Unused_Nbr_1);
PARAMETER(WRK.PP_Repayment_Status);
{
 //?USER: Processing before Data read

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


// Call program Prt Pay Chk Post Rep  PF.
CALL PROGRAM(Prt Pay Chk Post Rep  PF) ('PKT1PFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER('P');
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER('U');
PARAMETER(WRK.@Payment_Error);

//?This report will print a report by producer, and create checks
// Call program Prt Payment Edit/Post PF.
CALL PROGRAM(Prt Payment Edit/Post PF) ('PKS2PFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER('P');
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER('U');
PARAMETER(WRK.@Payment_Error);

//?This report will print comm paid by TH producer, and create checks
// Call program Prt Payment Comm E/P  PF.
CALL PROGRAM(Prt Payment Comm E/P  PF) ('PKPMPFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER('P');
PARAMETER(WRK.@Payment_Error);
PARAMETER(PAR.Oms_System_Value_Alpha);

//?PK0166- Update TH Ext with Excluded Carcass Data
// Call program Rtv Excep Deleted Sum XF.
CALL PROGRAM(Rtv Excep Deleted Sum XF) ('PKT5XFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Date);

// Call program Prt Pur-Jrn Prm/      PF.
CALL PROGRAM(Prt Pur-Jrn Prm/      PF) ('PKTTPFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER('P');
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER('U');
PARAMETER(WRK.@Payment_Sts);

// Call program Prt Pur-Jrn Rsl       PF.
CALL PROGRAM(Prt Pur-Jrn Rsl       PF) ('PKTZPFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER('P');
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER('U');
PARAMETER(WRK.@Payment_Sts);

//?PK0254 - MPR comparison
//? 4/25/18 JBB E30419-Do not print MPR Comparison report for 961
CASE;

// IF NOT PAR.CC Company Number is Triumph Foods-2
IF ! PAR.CC_Company_Number = 961;

// Call program Prt MPR Comparison   PF.
CALL PROGRAM(Prt MPR Comparison   PF) ('PKWZPFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER(PAR.Oms_System_Value_Alpha);

ENDIF;

//?PK - Change Delivery Tracking with BOL Summary 12/23/03
// Call program Exc DT BOL Sum Fields XF.
CALL PROGRAM(Exc DT BOL Sum Fields XF) ('PLD4XFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Date);

//?PK0495 - Change Delivery Sched Header status to 10=Closed
EXECUTE FUNCTION(Rtv Chg Sts/Date/Time RT) TYPE(RTVOBJ) FILE(PLADCPP)           AB1245573;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER(10);
{
 //?USER: Process Data record

 // LCL.DSH Opened to Live Date = DB1.DSH Opened to Live Date
 LCL.DSH_Opened_to_Live_Date = DB1.DSH_Opened_to_Live_Date;

 // LCL.DSH Opened to Live Time = DB1.DSH Opened to Live Time
 LCL.DSH_Opened_to_Live_Time = DB1.DSH_Opened_to_Live_Time;

 // LCL.DSH Posted to HPS Date = DB1.DSH Posted to HPS Date
 LCL.DSH_Posted_to_HPS_Date = DB1.DSH_Posted_to_HPS_Date;

 // LCL.DSH Posted to HPS Time = DB1.DSH Posted to HPS Time
 LCL.DSH_Posted_to_HPS_Time = DB1.DSH_Posted_to_HPS_Time;

 // LCL.DSH Sched Closed Date = DB1.DSH Sched Closed Date
 LCL.DSH_Sched_Closed_Date = DB1.DSH_Sched_Closed_Date;

 // LCL.DSH Sched Closed Time = DB1.DSH Sched Closed Time
 LCL.DSH_Sched_Closed_Time = DB1.DSH_Sched_Closed_Time;

 // LCL.DSH BOL Printed Date = DB1.DSH BOL Printed Date
 LCL.DSH_BOL_Printed_Date = DB1.DSH_BOL_Printed_Date;

 // LCL.DSH BOL Printed Time = DB1.DSH BOL Printed Time
 LCL.DSH_BOL_Printed_Time = DB1.DSH_BOL_Printed_Time;

 CASE;

 // IF PAR.DSH Status is 02-Opened to Live Prod
 IF PAR.DSH_Status = '02';

 // LCL.DSH Opened to Live Date = JOB.*Job date
 LCL.DSH_Opened_to_Live_Date = JOB.*Job_date;

 // LCL.DSH Opened to Live Time = JOB.*Job time / CON.100 *
 LCL.DSH_Opened_to_Live_Time = JOB.*Job_time / 100;

 // IF PAR.DSH Status is 03-Posted to HPS
 IF PAR.DSH_Status = '03';

 // LCL.DSH Posted to HPS Date = JOB.*Job date
 LCL.DSH_Posted_to_HPS_Date = JOB.*Job_date;

 // LCL.DSH Posted to HPS Time = JOB.*Job time / CON.100 *
 LCL.DSH_Posted_to_HPS_Time = JOB.*Job_time / 100;

 // IF PAR.DSH Status is 05-BOL/Movement Printed
 IF PAR.DSH_Status = '05';

 // LCL.DSH BOL Printed Date = JOB.*Job date
 LCL.DSH_BOL_Printed_Date = JOB.*Job_date;

 // LCL.DSH BOL Printed Time = JOB.*Job time / CON.100 *
 LCL.DSH_BOL_Printed_Time = JOB.*Job_time / 100;

 // IF PAR.DSH Status is 10=Schedule Closed
 IF PAR.DSH_Status = '10';

 // LCL.DSH Sched Closed Date = JOB.*Job date
 LCL.DSH_Sched_Closed_Date = JOB.*Job_date;

 // LCL.DSH Sched Closed Time = JOB.*Job time / CON.100 *
 LCL.DSH_Sched_Closed_Time = JOB.*Job_time / 100;

 EXECUTE FUNCTION(Upd Lock Status       RT) TYPE(RTVOBJ) FILE(PLAECPP)           AB1252437;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.DSH_Kill_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Lock Status       CH) TYPE(CHGOBJ) FILE(PLAECPP)           AB1252438;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(DB1.DSH_Kill_Date);
  PARAMETER(DB1.DSD_Delivery_Date);
  PARAMETER(DB1.DSD_Delivery_Time);
  PARAMETER(DB1.DSD_Delivery_Time_Seq);
  PARAMETER('L');
 }

 ENDIF;

 EXECUTE FUNCTION(Chg DSH Sts           CH) TYPE(CHGOBJ) FILE(PLADCPP)           AB1245572;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.DSH_Kill_Date);
 PARAMETER(DB1.DSH_Planned_Kill_Head);
 PARAMETER(DB1.DSH_Requested_Delv_Head);
 PARAMETER(PAR.DSH_Status);
 PARAMETER(DB1.DSH_Ext_Sch_Create_Date);
 PARAMETER(DB1.DSH_Ext_Sch_Create_Time);
 PARAMETER(LCL.DSH_Opened_to_Live_Date);
 PARAMETER(LCL.DSH_Opened_to_Live_Time);
 PARAMETER(LCL.DSH_Posted_to_HPS_Date);
 PARAMETER(LCL.DSH_Posted_to_HPS_Time);
 PARAMETER(LCL.DSH_Unused_Sts_1);
 PARAMETER(LCL.DSH_Sched_Closed_Date);
 PARAMETER(LCL.DSH_Sched_Closed_Time);
 PARAMETER(DB1.DSH_Unused_Sts_2);
 PARAMETER(LCL.DSH_BOL_Printed_Date);
 PARAMETER(DB1.DSH_BOL_Printed_Time);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


//?PK0495 - Recalc Pen Inventory for the day    04/02/03
// WRK.CC Company Number = PAR.CC Company Number
WRK.CC_Company_Number = PAR.CC_Company_Number;

// Call program Exc Pen Inv Recalc    XF.
CALL PROGRAM(Exc Pen Inv Recalc    XF) ('PLC7XFR');
PARAMETER(WRK.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Date);

//?PK0541 - Update 1st kill time for each TH    09/05/03
// WRK.CC Company Number = PAR.CC Company Number
WRK.CC_Company_Number = PAR.CC_Company_Number;

// Call program Exc Kill Hour for TH  XF.
CALL PROGRAM(Exc Kill Hour for TH  XF) ('PLDUXFR');
PARAMETER(WRK.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Date);

//?4/9/04  FOM Upl to FtP Site
//?11/23/05 do for Guymon only. extra pgming is req to do for Triumph
CASE;

// IF PAR.CC Company Number is SBD Farms of Guymon, Ok
IF PAR.CC_Company_Number = 360;

// Call program Upl EvUpl to Ftp site UP.
CALL PROGRAM(Upl EvUpl to Ftp site UP) ('PLDMUPR');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER(WRK.Blank_Usr_2);

ENDIF;

//?E10169 SLM 07/09/17 - Eval Trans Upl Erp
CASE;

// IF JOB.*USER is PorkISTesting
IF JOB.*USER = 'PRKTEST'/'ISPPATE'/'ISSMASO'/'ISRCENT'/'ISPURVAP'/'ISROSEM'/'ISSHARONZ'            +
/'ISSZURN'/'ISJHIGH'/'ISJBADE'/'ISJAMESB'/'ISDNGUY'/'ISDANNYN'/'PRKTESTGU'/'PRKTESTST'             +
/'PRKTESTTF'/'TPMTEST'/'TFTST961'/'ISSUSANM'/'ISJULIUSH'/'ISBGUTI'/'ISBARBG'/'ISBBARK'             +
/'ISNFOY'/'ISNATHANF'/'ISDREDD'/'ISABANS';

//?slm 7/9/2017 add due to testing
//?Do not allow the next process to be run if the condition is true
//?TPMTESTF does not have all of the files that are need to perform
//?the next function, and we do not need this portion if we are testing.
// IF *OTHERWISE
IF *OTHERWISE;

//?will be send hot scale data to the Ihub then to Ifor
//?Step 6UPL:  Eval Trans Upl to Eval Trans Upl Erp
CASE;

// IF WRK.Pmt Current Payment Step is 00006 Producer Payment
IF WRK.Pmt_Current_Payment_Step = 00006;

//?8/26/2014 slm p3321
//?Read the Eval Trans Upl BY Company and restrict on Kill date
//?Read the Eval Trans Upl and either create these records or
//?update the records in the EVAL TRANS UPL Erp
// WRK.Company Number Alpha Usr = PAR.CC Company Number
WRK.Company_Number_Alpha_Usr = PAR.CC_Company_Number;

// Call program Bld Erp EvalTrnUplAct XF.
SBMJOB;
CALL PROGRAM(Bld Erp EvalTrnUplAct XF) ('PLVAXFR');
PARAMETER(WRK.Company_Number_Alpha_Usr);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER(WRK.Pmt_Current_Payment_Date);
SBMJOBOVR JOB(EVERPUPLOD);
SBMJOBOVR LOG(4;
SBMJOBOVR 00;
SBMJOBOVR *SECLVL);
SBMJOBOVR HOLD(*JOBD);
SBMJOBEND;

// LCL.Office Dist List USR3 = CON.PRKHPEINFO
LCL.Office_Dist_List_USR3 = 'PRKHPEINFO';

EXECUTE FUNCTION(Current Time) TYPE(DRVFLD)                                     AB1204687;
PARAMETER(PAR.Current_Time);
{
 //?Calculate derived field

 // Execute function Rtv Current Time      US.
 EXECUTE FUNCTION(Rtv Current Time      US) TYPE(EXCUSRSRC) ('PKM1UFR');
 PARAMETER(PAR.Current_Time);
 {
  C                     TIME           #OA1TM
 }

}


// Retrieve message - 'Creation of HPE Eval Trans upl Erp for &3 &1 started at &2. - EVERPUPLOD'
WRK.Office_Dist_Message_USR = RTVMSG(PRK1313);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER(PAR.Current_Time);
PARAMETER(PAR.CC_Company_Number);

// Call program Snd Pager Msg (MPLUS) UP.
CALL PROGRAM(Snd Pager Msg (MPLUS) UP) ('POMSUPC');
PARAMETER(LCL.Office_Dist_List_USR3);
PARAMETER(WRK.Office_Dist_Message_USR);

ENDIF;

ENDIF;

// WRK.Pmt Current Payment Step = CND.00007 Carcass Summary
WRK.Pmt_Current_Payment_Step = 00007;

EXECUTE FUNCTION(Upd Paymnt Prc         CH) TYPE(CHGOBJ) FILE(PKC4REP)          AB1146820;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Step);
PARAMETER(WRK.PP_Commission_Paym_Error);
PARAMETER(WRK.PP_Payment_Error);
PARAMETER(WRK.PP_Unused_Nbr_1);
PARAMETER(WRK.PP_Repayment_Status);
{
 //?USER: Processing before Data read

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


ENDIF;

ENDIF;

//?1/17/2008 SLM Change to use Office Dist List USR2 load from compvalue
//?See above
EXECUTE FUNCTION(Current Time) TYPE(DRVFLD)                                     AB1204687;
PARAMETER(PAR.Current_Time);
{
 //?Calculate derived field

 // Execute function Rtv Current Time      US.
 EXECUTE FUNCTION(Rtv Current Time      US) TYPE(EXCUSRSRC) ('PKM1UFR');
 PARAMETER(PAR.Current_Time);
 {
  C                     TIME           #OA1TM
 }

}


// Retrieve message - 'Payment Post for &3 &1 completed at &2.'
WRK.Office_Dist_Message_USR = RTVMSG(PRK0784);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER(PAR.Current_Time);
PARAMETER(PAR.CC_Company_Number);

// Call program Snd Pager Msg (MPLUS) UP.
CALL PROGRAM(Snd Pager Msg (MPLUS) UP) ('POMSUPC');
PARAMETER(LCL.Office_Dist_List_USR2);
PARAMETER(WRK.Office_Dist_Message_USR);

ENDDO;

//?Step 7:  Reports, sbm carcass sheets prt/fax and also EDI
CASE;

// IF WRK.Pmt Current Payment Step is 00007 Carcass Summary
IF WRK.Pmt_Current_Payment_Step = 00007;

//?Carcass summary, carcass detail, & additional processing
DO;

// Call program Upd Tto/Prd Lean Dist XF.
CALL PROGRAM(Upd Tto/Prd Lean Dist XF) ('PKTDXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Date);

//?*** Print Carc Sum and Crc Dtl consecutively    *** 91896
// Execute command - 'SBM Prt Crc Dtl/Sum'
EXECUTE COMMAND(PRK0782);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);

// Execute command - 'SBM Fax Crc Dtl/Sum'
EXECUTE COMMAND(PRK0783);
PARAMETER('P');
PARAMETER('N');
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER('N');

// WRK.Pmt Current Payment Step = CND.99999 Normal EOJ
WRK.Pmt_Current_Payment_Step = 99999;

EXECUTE FUNCTION(Upd Paymnt Prc         CH) TYPE(CHGOBJ) FILE(PKC4REP)          AB1146820;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Step);
PARAMETER(WRK.PP_Commission_Paym_Error);
PARAMETER(WRK.PP_Payment_Error);
PARAMETER(WRK.PP_Unused_Nbr_1);
PARAMETER(WRK.PP_Repayment_Status);
{
 //?USER: Processing before Data read

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


ENDDO;

EXECUTE FUNCTION(Current Time) TYPE(DRVFLD)                                     AB1204687;
PARAMETER(PAR.Current_Time);
{
 //?Calculate derived field

 // Execute function Rtv Current Time      US.
 EXECUTE FUNCTION(Rtv Current Time      US) TYPE(EXCUSRSRC) ('PKM1UFR');
 PARAMETER(PAR.Current_Time);
 {
  C                     TIME           #OA1TM
 }

}


// Retrieve message - 'Payment Post Fax/Print Carc Summary and Detail for &3 &1 submitted at &2.'
WRK.Office_Dist_Message_USR = RTVMSG(PRK0792);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER(PAR.Current_Time);
PARAMETER(PAR.CC_Company_Number);

// Call program Snd Pager Msg (MPLUS) UP.
CALL PROGRAM(Snd Pager Msg (MPLUS) UP) ('POMSUPC');
PARAMETER(LCL.Office_Dist_List_USR);
PARAMETER(WRK.Office_Dist_Message_USR);

//?Sequel M3 voucher data created
// LCL.Date Alpha USR = CVTVAR(JOB.*Job date)
LCL.Date_Alpha_USR = CVTVAR(JOB.*Job_date);

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('M3HPEVCH');
PARAMETER(LCL.Live_with_M3_USR);

CASE;

// IF LCL.Live with M3   USR is No
IF LCL.Live_with_M3_USR = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('M3HPEDST');
PARAMETER(LCL.EMail_Address);

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('M3DIVISION');
PARAMETER(LCL.M3_Division_#_USR);

CASE;

// IF PAR.CC Company Number is SBD Farms of Guymon, Ok
IF PAR.CC_Company_Number = 360;

// Execute command - 'EXECUTE Sequel M3 HPE inter-company payments'
EXECUTE COMMAND(PRK1431);
PARAMETER(LCL.Date_Alpha_USR);
PARAMETER(LCL.EMail_Address);

ENDIF;

ENDIF;

//?Moved to Step 7 due to user running payment post twice
//?R10169 JJH 07/10/17 - New Logic for 360, 960, 961, and 440
//?R10169 JJH 08/22/17 - Temporarily disable the SBMJOB to PRKFTPQ
CASE;

// IF JOB.*USER is PorkISTesting
IF JOB.*USER = 'PRKTEST'/'ISPPATE'/'ISSMASO'/'ISRCENT'/'ISPURVAP'/'ISROSEM'/'ISSHARONZ'            +
/'ISSZURN'/'ISJHIGH'/'ISJBADE'/'ISJAMESB'/'ISDNGUY'/'ISDANNYN'/'PRKTESTGU'/'PRKTESTST'             +
/'PRKTESTTF'/'TPMTEST'/'TFTST961'/'ISSUSANM'/'ISJULIUSH'/'ISBGUTI'/'ISBARBG'/'ISBBARK'             +
/'ISNFOY'/'ISNATHANF'/'ISDREDD'/'ISABANS';

//?RMC 5/20/21  ADDED THIS CHECK
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Crt EDI Carcass Sum/DtXF.
SBMJOB;
CALL PROGRAM(Crt EDI Carcass Sum/DtXF) ('PWEHXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Date);
SBMJOBOVR JOB(HPEEDIFTP);
SBMJOBOVR JOBQ(QGPL/PORKFTPQ);
SBMJOBOVR LOG(4;
SBMJOBOVR 00;
SBMJOBOVR *SECLVL);
SBMJOBEND;

ENDIF;

//?Roll dates for 360 & 960 and purge the tattoo pending for 960 only
//?For 960, go back 2 kill days to purge pending unused tattoos
CASE;

// IF PAR.CC Company Number is SBD Farms of Guymon, Ok
IF PAR.CC_Company_Number = 360;

EXECUTE FUNCTION(Del Unused Tattoo #   RT) TYPE(RTVOBJ) FILE(PKFJCPP)           AB1248208;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Date);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Del Tattoo Pending    DL) TYPE(DLTOBJ) FILE(PKFJCPP)           AB1243800;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.TP_Tattoo_Date);
 PARAMETER(DB1.TP_Tattoo_Number);
}


//?For 960, go back 2 kill days to purge pending unused tattoos
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Rtv Prev Kill Date    XF.
CALL PROGRAM(Rtv Prev Kill Date    XF) ('PDRUXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER(WRK.Date_USR);

// Call program Rtv Prev Kill Date    XF.
CALL PROGRAM(Rtv Prev Kill Date    XF) ('PDRUXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Date_USR);
PARAMETER(WRK.Date_USR);

EXECUTE FUNCTION(Del Unused Tattoo #   RT) TYPE(RTVOBJ) FILE(PKFJCPP)           AB1248208;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Date_USR);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Del Tattoo Pending    DL) TYPE(DLTOBJ) FILE(PKFJCPP)           AB1243800;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.TP_Tattoo_Date);
 PARAMETER(DB1.TP_Tattoo_Number);
}


ENDIF;

ENDIF;

//?End Of Job:  Roll Kill Date    99999 Normal EOJ
CASE;

// IF WRK.Pmt Current Payment Step is 99999 Normal EOJ
IF WRK.Pmt_Current_Payment_Step = 99999;

//?Step End of Job update payment date and step
DO;

EXECUTE FUNCTION(Chg Payment Date/Step  IF) TYPE(EXCINTFUN)                     AB1147406;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER(WRK.Pmt_Current_Payment_Step);
{
 //?Execute internal function

 //?This function will move either current kill
 //?or next kill date to payment date, and set next number to zero.
 //?This routine should only be used at the tail end of
 //?the batch processing.
 EXECUTE FUNCTION(Rtv Payment Processing RT) TYPE(RTVOBJ) FILE(PKC4REP)          AB1147409;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(WRK.Pmt_Current_Payment_Date);
 PARAMETER(WRK.Pmt_Current_Payment_Step);
 PARAMETER(WRK.PP_Commission_Paym_Error);
 PARAMETER(WRK.PP_Payment_Error);
 PARAMETER(WRK.PP_Unused_Nbr_1);
 PARAMETER(WRK.PP_Repayment_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Pmt Current Payment Step is 99999 Normal EOJ
 IF PAR.Pmt_Current_Payment_Step = 99999;

 //?Based on Payment date Get Next Current Kill date
 // Call program Rtv Nxt Kill Dt 2 OMS XF.
 CALL PROGRAM(Rtv Nxt Kill Dt 2 OMS XF) ('PDUXXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(WRK.Pmt_Current_Payment_Date);
 PARAMETER(WRK.Current_Kill_Date);

 // WRK.Pmt Current Payment Step = CON.1
 WRK.Pmt_Current_Payment_Step = 1;

 // WRK.Pmt Payment Error = CND.No Validation Performed
 WRK.Pmt_Payment_Error = *BLANK;

 // WRK.PP Commission Paym Error = CND.No Errors
 WRK.PP_Commission_Paym_Error = 'N';

 EXECUTE FUNCTION(Chg Payment Date/Step  CH) TYPE(CHGOBJ) FILE(PKC4REP)          AB1147408;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(WRK.Current_Kill_Date);
 PARAMETER(WRK.Pmt_Current_Payment_Step);
 PARAMETER(WRK.PP_Commission_Paym_Error);
 PARAMETER(WRK.PP_Payment_Error);
 {
  //?USER: Processing before Data read

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?*ERROR PAYMENT STEP NOT AT END OF JOB
 // Send error message - 'Payment Processing Error'
 ERROR(PRK0436);

 // PGM.*Return code = CND.Payment Processing Error
 PGM.*Return_code = 'PRK0436';

 ENDIF;

}


ENDDO;

//? 9/08/2017 JBB E9904 - Payment Push from 440 to 961
// Call program Rtv Company Value Nbr XF.
CALL PROGRAM(Rtv Company Value Nbr XF) ('PDHGXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPEPSHTOCO');
PARAMETER(LCL.Push_To_Company);

//?If Push To Company found, submit the Payment Push process
CASE;

// IF LCL.Push To Company is Greater Then *zero
IF LCL.Push_To_Company > *ZERO;

// LCL.Number 1 USR = PAR.PRT Copies
LCL.Number_1_USR = PAR.PRT_Copies;

// Execute command - 'SBM TF2 Payment Push'
EXECUTE COMMAND(PRK1459);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(LCL.Number_1_USR);
PARAMETER(*JOBD);
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER('A');

ENDIF;

ENDIF;

ENDIF;

