// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POA8PVR
// ?Date: 14.08.2025 Time: 03:36:39
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.Company Number Pass   USR = PAR.Company Number
PAR.Company_Number_Pass_USR = PAR.Company_Number;

//?USER: Load screen

// DTL.Company Number = PAR.Company Number
DTL.Company_Number = PAR.Company_Number;

// DTL.Company Number CDE = PAR.Company Number
DTL.Company_Number_CDE = PAR.Company_Number;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.USR_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Print Zeros USR = CND.no
DTL.Print_Zeros_USR = 'N';

// DTL.USR Detail or Summary = CND.Report Selection 1
DTL.USR_Detail_or_Summary = 1;

//?** Add Include chargebacks             LJB 12/11/2006 PK0039
// DTL.Include Charge Backs = CND.No
DTL.Include_Charge_Backs = 'N';

//?** Add Include Rebills                 JBB 06/24/2016 E5262
// DTL.Include Rebills = CND.No
DTL.Include_Rebills = 'N';

//?02/16/24 SP O300252-START
// DTL.Include Credit Memos = CND.No
DTL.Include_Credit_Memos = 'N';

//?02/16/24 SP O300252-END
//?USER: Validate fields

//?Process F4 on Company Number
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Company Number CDE
IF PGM.*Cursor_field = DTL.Company_Number_CDE;

CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// Call program SEL Company by Number  SR.
CALL PROGRAM(SEL Company by Number  SR) ('CAAJSRR');
PARAMETER(DTL.Company_Number_CDE);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

ENDIF;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Validate A/R Customer number
CASE;

// IF DTL.A/R Customer Number is not equal to zero
IF DTL.AR_Customer_Number <> *ZERO;

EXECUTE FUNCTION(VAL A/R Customer       RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1452402;
PARAMETER(DTL.AR_Customer_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'A/R Customer is invalid.'
ERROR(USR2110);
MSGPARM(DTL.AR_Customer_Number);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?Process F4 on Parent Customer
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Parent Customer
IF PGM.*Cursor_field = DTL.Parent_Customer;

// Call program SEL Parent Customer /P SR.
CALL PROGRAM(SEL Parent Customer /P SR) ('PVBBSRR');
PARAMETER(DTL.Parent_Customer);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Validate Parent Customer number
CASE;

// IF DTL.Parent Customer is not equal to zero
IF DTL.Parent_Customer <> *ZERO;

EXECUTE FUNCTION(VAL Parent Customer    RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1452401;
PARAMETER(DTL.Parent_Customer);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Parent Number not found.'
ERROR(USR2394);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?USER: Validate relations

// DTL.USR Company Name = CON.*BLANK
DTL.USR_Company_Name = *BLANK;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.USR_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Company not found - Test for Multi-Co = Yes
CASE;

// IF PGM.*Return code is Company not found
IF PGM.*Return_code = 'USR0003';

CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// DTL.USR Company Name = CON.*ALL
DTL.USR_Company_Name = *ALL;

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Company Number = DTL.Company Number CDE
DTL.Company_Number = DTL.Company_Number_CDE;

// Send error message - 'Company Number not found'
ERROR(USR0163);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Validate From Date
CASE;

// IF DTL.USR From Date is not equal zero
IF DTL.USR_From_Date <> *ZERO;

EXECUTE FUNCTION(RTV Calendar           RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1102049;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.USR_From_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.Calendar not found
 PGM.*Return_code = 'USR0018';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Validate From Date
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Date entered is not found in the Calendar file'
ERROR(USR0567);
MSGPARM(DTL.USR_From_Date);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(DTL.Parent_Customer);
PARAMETER(DTL.Name_25A_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Validate Sales Route to A/R Customer Sales Route if entered
CASE;

// IF DTL.Sales Route Code is entered
IF DTL.Sales_Route_Code <> *BLANK;

// AND DTL.A/R Customer Number is not equal to zero
AND DTL.AR_Customer_Number <> *ZERO;

EXECUTE FUNCTION(RTV Type & Sales Route RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1449526;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(PAR.Sales_Route_Code);
PARAMETER(PAR.Type_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.Sales Route Code is entered
IF DTL.Sales_Route_Code <> *BLANK;

// AND DTL.Sales Route Code NE PAR.Sales Route Code
AND DTL.Sales_Route_Code <> PAR.Sales_Route_Code;

// Send error message - 'A/R customer's sales route is not equal to sales route &1.'
ERROR(USR2447);
MSGPARM(DTL.Sales_Route_Code);
MSGPARM(DTL.AR_Customer_Number);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1270614;
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(DTL.Sales_Route_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** If Include Chargebacks is blanks, default to N
CASE;

// IF DTL.Include Charge Backs is Blank
IF DTL.Include_Charge_Backs = *BLANK;

// DTL.Include Charge Backs = CND.No
DTL.Include_Charge_Backs = 'N';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?** If Include Rebills is blank, default to N  06/24/2016 JBB E6252
CASE;

// IF DTL.Include Rebills is Blank
IF DTL.Include_Rebills = *BLANK;

// DTL.Include Rebills = CND.No
DTL.Include_Rebills = 'N';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?02/20/24 SP O300252-START
//?Validate Parent Customer
CASE;

// IF DTL.AR Customer Number is not equal to zero
IF DTL.AR_Customer_Number <> *ZERO;

// AND DTL.Parent Customer is not equal to zero
AND DTL.Parent_Customer <> *ZERO;

EXECUTE FUNCTION(RTV Chk AR Customer Exist) TYPE(RTVOBJ) FILE(CABBREP)          AC2221896;
PARAMETER(DTL.Parent_Customer);
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(LCL.STS_AR_Customer_Valid);
{
 //?USER: Initialize routine

 // PAR.STS: AR Customer Valid? = CND.No
 PAR.STS_AR_Customer_Valid = 'N';

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF PAR.AR Customer Number EQ DB1.AR Customer Number
 IF PAR.AR_Customer_Number = DB1.AR_Customer_Number;

 // PAR.STS: AR Customer Valid? = CND.Yes
 PAR.STS_AR_Customer_Valid = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF LCL.STS: AR Customer Valid? is Yes
IF LCL.STS_AR_Customer_Valid = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'A/R Customer is invalid.'
ERROR(USR2110);
MSGPARM(DTL.AR_Customer_Number);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?02/20/24 SP O300252-END
//?** Email address cannot be left blank
CASE;

// IF DTL.Email Address is Blank
IF DTL.Email_Address = *BLANK;

// Send error message - 'Email address cannot be left blank. Enter a valid email address.'
ERROR(USR3670);
MSGPARM(DTL.Email_Address);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?USER: User defined action

MOVE *ALL (To: PAR From: DTL);

//?Submit job for Print
//?** Retrieve the Default Record aging code   12/05/06 LJB PK0039
EXECUTE FUNCTION(RTV Default Aging Code RT) TYPE(RTVOBJ) FILE(PMADCPP)          AC1801040;
PARAMETER(WRK.A_R_Aging_Code);
PARAMETER(WRK.A_R_Aging_Days_1);
PARAMETER(WRK.A_R_Aging_Days_2);
PARAMETER(WRK.A_R_Aging_Days_3);
PARAMETER(WRK.A_R_Aging_Days_4);
PARAMETER(WRK.Age_by_Trans_or_Due_Date);
PARAMETER(WRK.Default_Y_N);
PARAMETER(WRK.Record_Status);
{
 //?USER: Initialize routine

 // PAR.A/R Aging Code = CND.Not Entered
 PAR.A_R_Aging_Code = *BLANK;

 //?USER: Process Data record

 // PAR.A/R Aging Code = DB1.A/R Aging Code
 PAR.A_R_Aging_Code = DB1.A_R_Aging_Code;

 CASE;

 // IF DB1.Default Y/N is yes
 IF DB1.Default_Y_N = 'Y';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


// PAR.Company Number Pass   USR = DTL.Company Number CDE
PAR.Company_Number_Pass_USR = DTL.Company_Number_CDE;

// PAR.Date 1          PASS  USR = DTL.USR From Date
PAR.Date_1_PASS_USR = DTL.USR_From_Date;

// PAR.Customer Number Pass  USR = DTL.A/R Customer Number
PAR.Customer_Number_Pass_USR = DTL.AR_Customer_Number;

//?10/14/21 DN W84562-Passed in 'Crt Exp Enh Aging Rpt USR' Flag.
// Call program PRT Pmt&Pass Co/DtFile UP.
SBMJOB;
CALL PROGRAM(PRT Pmt&Pass Co/DtFile UP) ('POA9UPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Customer_Number_Pass_USR);
PARAMETER(PAR.Date_1_PASS_USR);
PARAMETER(DTL.Include_Charge_Backs);
PARAMETER(DTL.Include_Rebills);
PARAMETER(DTL.USR_Detail_or_Summary);
PARAMETER(DTL.Print_Zeros_USR);
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(DTL.Name);
PARAMETER(DTL.Sales_Route_Description);
PARAMETER('N');
PARAMETER(DTL.Include_Credit_Memos);
PARAMETER(WRK.A_R_Aging_Code);
PARAMETER(DTL.Email_Address);
PARAMETER(DTL.Parent_Customer);
SBMJOBOVR JOB(AGINGFILE);
SBMJOBOVR LOG(4;
SBMJOBOVR 00;
SBMJOBOVR *SECLVL);
SBMJOBEND;

//?02/16/24 SP O300252-END
CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'File is being Created'
MESSAGE(USR2933 *INFO);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?USER: Exit program processing

CASE;

// IF DTL.*CMD key is *Exit
IF DTL.*CMD_key = '03';

PGM.*Return_code = 'Y2U9999';

RETURN;

ENDIF;

