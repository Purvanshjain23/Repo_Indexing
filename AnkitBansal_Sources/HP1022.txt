      *These two lines here to aid in debugging when needed***************
     H debug(*yes)
     H option(*srcstmt:*nodebugio)
      ****************************************************************
      *
      * SYSTEM:      Hog Production
      * PROGRAM:     HP1022
      * TITLE:       Revise Nur/Fin Target Table
      * PROGRAMMER:  Sharon Zurn
      * CREATED:     12/27/06
      *
      * FUNCTION: This is an edit record function that revises the Target Table on
      *           a Nur/Fin Target Master record.
      *
      *           The field 'mode' contains the value passed into
      *           this program from the calling program.  The field
      *           'd1mode' is the screen field that displays the
      *           value of 'mode'.  Mode will be CREATE, REVISE or
      *           DELETE.           Once in the program, mode and
      *           d1mode will never change.  However, the action
      *           being performed can change depending on the function
      *           keys the user takes.
      *
      ***************************************************************************************
      * MODIFICATIONS:
      ***************************************************************************************
      *
      * 11/07/07  LeAnne Ramsey
      *           Cleaned up code.
      *           Also, we removed 2 fields from the Nur/Fin Yearly Targets file:
      *                  GF Transfer in Head
      *                  NF Transfer in Head
      *
      * 12/10/08  LeAnne Ramsey
      *           Recompile only.
      *           Added GF "GDU" targets to the Nur/Fin Yearly Targets file.
      /eject
      ***************************************************************************************
      * FILE SPECIFICATIONS
      ***************************************************************************************
      *
     Fhpd1022   cf   e             workstn infds(iofeed)
      *
      *
     Fhsp122    uf a e           k disk    infds(dbfeed)
      *    Nur/Fin target master
      *
      *
     Fhsp123    if   e           k disk
      *    Nur/Fin yearly targets
      *
      /eject
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D create          c                   'CREATE'
     D revise          c                   'REVISE'
     D delete          c                   'DELETE'
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET   '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
     D update          c                   'UPDATE'
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D rtncd           s              2
     D action          s                   like(mode)
     D maxmsg          s              2  0  inz(20)
      *
      *
      * Parms
      *
     D xxobpod         s                   like(d1obpod)
     D xxobcell        s                   like(d1obcell)
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /eject
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     update        $upd1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo
      /eject
      *----------------------------------------------------------------
      * Set environment for Screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * Clear fields on display panel
      *
     C                   if        mode = create
     C                   z-add     0             d1obcell
     C                   z-add     0             d1obpod
     C                   move      *blank        d1ntds
     C                   endif
      *
      * If incoming mode is REVISE or DELETE, then retrieve the database
      * records using the parms passed in.  Do not lock the records.
      * Typically, in DELETE mode these retrieved values will not be
      * displayed. However, if there is an error on the delete action
      * the panel will be displayed.
      *
     C                   if        mode = revise or mode = delete               If revise/dlt
     C     key01         chain(n)  hsp122                               92
     C                   if        *in92 = *off
     C                   move      ntntds        d1ntds
     C                   else
      *
     C                   seton                                        62
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09008'     mgid(e)
     C                   endif
     C                   endif
     C                   endif                                                  If revise/dlt
      *
      * If the user is deleting, go on to the update routine and don't
      * display the screen. Otherwise, display screen 1.
      *
     C                   if        error = 0 and action = delete
     C                   eval      routne = update
     C                   else
     C                   eval      routne = scrn1
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Perform operator I/O for screen 1
      *---------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Set indicators to control input/output fields and available
      * function keys.
      *
     c                   select
     C                   when      mode = revise
     C                   seton                                        60
      *
     C                   when      mode = create
     C                   seton                                        61
      *
     C                   when      mode = delete
     C                   seton                                        62
     c                   endsl
      *
      * Write screen 1 to CRT
      *
     C                   write     hp1022k1
     C                   write     hp1022ec
     C                   exfmt     hp1022r1
      *
      * Clear all messages
      *
     C                   exsr      $clmsg
      *
      * Reset action to be equal to the incoming mode.  This is required
      * in case the user took F11-Delete and got an error on the
      * deletion and now needs to be able to change the record and take
      * an action other than delete
      *
     C                   eval      action = mode
      *
      * Process user's entry and set routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   move      *blank        rtncd
     C                   eval      routne = exit
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   eval      routne = set1
      *
     C                   when      *in11 = *on or mode = delete                 F11-delete
     C                   eval      action = delete
     C                   eval      routne = update
     C                   other
      *
     C                   eval      routne = edit1
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Edit screen 1
      *---------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * *IN62 will be on if the record the user is trying to access has
      * been deleted by another user.  So, only perform the edits for the
      * fields on the screen if the indicator is off
      *
     C                   if        *in62 = *off                                 If here
      *
      * If you are creating a new record, validate:
      *   1) origin BGF cell
      *   2) origin BGF pod
      *
     C                   if        action = create
     C                   exsr      $obcell
     C                   exsr      $obpod
     C                   endif
      *
      * Always validate:
      * 1) target table description
      *
     C                   exsr      $ntds
     C                   endif                                                  If here
      *
      * If there are no errors, attempt the write/update; otherwise,
      * redisplay the screen.  If a record has been deleted out from
      * under the user (*IN62 is ON), then the error message will be
      * issued in the update subroutine.  So, always perform this code.
      *
     C                   if        error = 0
     C                   exsr      $upd1
     C                   else
     C                   eval      routne = scrn1
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate Origin BGF Cell
      *----------------------------------------------------------------
      *
      * Validations:
      *   1) required
      *   2) cannot be negative
      *
     C     $obcell       begsr
      *
     C                   select
     C                   when      d1obcell = 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
      *
     C                   when      d1obcell < 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate Origin BGF Pod
      *----------------------------------------------------------------
      *
      * Validations:
      *   1) required
      *   2) cannot be negative
      *   3) combination of Cell/Pod cannot already exist in Target Table Master
      *
     C     $obpod        begsr
      *
     C                   select
     C                   when      d1obpod = 0
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
      *
     C                   when      d1obpod < 0
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   endsl
      *
      * Combination of Cell/Pod cannot already exist.
      *
     C                   if        *in31 = *off and *in32 = *off                If OK
     C     key01         chain(n)  hsp122                             92
     C                   if        *in92 = *off                                 If found
     C                   seton                                        3132
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS02020'
     C                   endif
     C                   endif                                                  If found
     C                   endif                                                  If OK
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Validate target table description
      *----------------------------------------------------------------
      *
      * Validations:
      *   1) required
      *
     C     $ntds         begsr
      *
     C                   eval      d1ntds  = %triml(d1ntds)
      *
     C                   if        d1ntds  = *blank                             If no desc
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
     C                   endif                                                  If no desc
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Write/update/delete record in database file
      *---------------------------------------------------------------
      *
     C     $upd1         begsr
      *
      * If the user is deleting,
      *   perform deletion integrity checks
      *
     C                   if        action = delete
     C                   exsr      $dltck
     C                   endif
      *
      * If user action is revising or deleting, determine that the
      * record he is accessing still exists prior to attempting to
      * update.  Lock the record for update.
      *
     C                   if        error = 0 and                                If OK
     C                             (action = delete or action = revise)
      *
     C     key01         chain     hsp122                             92
     C                   if        *in92 = *on                                  If not found
     C                   seton                                        62
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09008'
     C                   endif
      *
     C                   endif                                                  If not found
     C                   endif                                                  If OK
      *
      * If there are no errors, delete, revise or create the record.
      *
     C                   if        error = 0                                    If no error
      *
      * When deleting, delete all table/farm links before deleting
      * the target table record.
      *
     c                   select
     C                   when      action = delete
     C                   delete    ntrec
     C                   other
      *
      * Move DSPF fields to database file fields
      *
     C                   z-add     d1obpod       ntobpod
     C                   z-add     d1obcell      ntobcell
     C                   move      d1ntds        ntntds
      *
     C                   if        action = create                              If create
     C                   write     ntrec
     C                   else
     C                   update    ntrec
     C                   endif                                                  If create
     C                   endsl
     C                   endif                                                  If no error
      *
      * Set next routine
      *
     C                   select
     C                   when      mode = create                                Wh creating
     C                   if        error = 0
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09040'
     C                   eval      routne = set1
     c                   else
     C                   eval      routne = scrn1
     C                   endif
      *
     C                   when      error <> 0                                   Wh errors
     C                   eval      routne = scrn1
     C                   other
      *
     C                   eval      routne = exit
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Deletion integrity checks
      *----------------------------------------------------------------
      *
     C     $dltck        begsr
      *
      * A target table cannot be deleted if it has yearly targets associated
      * with it.
      *
     C     key01         chain     hsp123                             92
     C                   if        *in92 = *off and error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS02023'
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command key record will be set on. So, redispaly the screen to the user.
      *
     C                   if        *in43 = *on
     C                   movel     set1          routne
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command key record will be set on. So, redispaly the screen to the user.
      *
     C                   if        *in43 = *on
     C                   movel     set1          routne
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Set on last record indicator and end job
      *----------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm Lists
      *
     C     *entry        plist
     C     d1mode        parm                    mode
     C     d1obcell      parm                    xxobcell
     C     d1obpod       parm                    xxobpod
     C                   parm                    rtncd
      *
     C                   eval      action = mode
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    d1obcell
     C                   kfld                    d1obpod
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /eject
