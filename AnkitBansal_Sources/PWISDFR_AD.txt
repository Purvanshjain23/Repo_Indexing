// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PWISDFR
// ?Date: 14.08.2025 Time: 02:56:35
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?RMC 4/13/20 added reprocess select "P"
EXECUTE FUNCTION(Val Application/UserRP4IF) TYPE(EXCINTFUN)                     AB1350460;
PARAMETER(WRK.Oms_Warehouse_Code);
PARAMETER(WRK.CC_Company_Number);
PARAMETER('C/S');
PARAMETER(WRK.Oms_SalesPerson_Code);
PARAMETER(WRK.Oms_Allow_Multi_Company);
PARAMETER(WRK.Oms_Default_Printer);
PARAMETER(WRK.Oms_Name);
PARAMETER(WRK.Oms_System_Value_Alpha);
PARAMETER(WRK.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to CompanyRP4US.
 EXECUTE FUNCTION(Mov ApplN to CompanyRP4US) TYPE(EXCUSRSRC) ('PWIVUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                   movel     #IEVTX        ##CMP
 }

 ENDIF;

}


// PGM.*Scan limit = CND.No Max
PGM.*Scan_limit = 999999;

//?USER: Initialize subfile record from DBF record

CASE;

// IF CTL.MGL Company is *ZERO
IF CTL.MGL_Company = *ZERO;

// OR CTL.MGL Company EQ RCD.MGL Company
OR CTL.MGL_Company = RCD.MGL_Company;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF CTL.MGL Division EQ WRK.Blank Usr 3 char
IF CTL.MGL_Division = WRK.Blank_Usr_3_char;

// OR CTL.MGL Division EQ RCD.MGL Division
OR CTL.MGL_Division = RCD.MGL_Division;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF CTL.MGL Key Value EQ WRK.Blank Usr 3 char
IF CTL.MGL_Key_Value = WRK.Blank_Usr_3_char;

// OR RCD.MGL Key Value GE CTL.MGL Key Value
OR RCD.MGL_Key_Value >= CTL.MGL_Key_Value;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF CTL.Text 10 1 USR NE WRK.Blank Usr 3 char
IF CTL.Text_10_1_USR <> WRK.Blank_Usr_3_char;

// LCL.MGL Parameter Value = RCD.MGL Parameter Value
LCL.MGL_Parameter_Value = RCD.MGL_Parameter_Value;

// LCL.#Txt USR = SUBSTRING(LCL.MGL Parameter Value,CON.95,CON.80)
LCL.#Txt_USR = SUBSTRING(LCL.MGL_Parameter_Value:95:80);

// Execute function Eus Search for String  US.
EXECUTE FUNCTION(Eus Search for String  US) TYPE(EXCUSRSRC) ('PWITUFR');
PARAMETER(LCL.#Txt_USR);
PARAMETER(CTL.Text_10_1_USR);
PARAMETER(LCL.Record_Found_USR);
{
 * Search if Text 10 String Exist.
 d string_data     S            200a
 d scan_data       S             10a
 d pos             S             10i 0
 *
 c                   eval      string_data = #IC6TX
 c                   eval      scan_data = %trim(#IJPTX)
 c                   eval      #OH7ST = 'N'
 c                   eval      pos = %scan(%trim(scan_data):string_data)
 c                   if        pos > 0
 c                   eval      #OH7ST = 'Y'                                 String Found
 c                   endif
 *
}


CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

CASE;

// IF CTL.Text 10 1 USR NE LCL.Text 10 1 USR
IF CTL.Text_10_1_USR <> LCL.Text_10_1_USR;

// LCL.Text 10 1 USR = CTL.Text 10 1 USR
LCL.Text_10_1_USR = CTL.Text_10_1_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?5=Dsp Hdr
CASE;

// IF RCD.*SFLSEL is *Option 5 request
IF RCD.*SFLSEL = '5'/'5';

// Call program Dsp GL Interface Hdr  DR.
CALL PROGRAM(Dsp GL Interface Hdr  DR) ('PWIXD1R');
PARAMETER(RCD.MGL_Company);
PARAMETER(RCD.MGL_Division);
PARAMETER(RCD.MGL_Key_Value);

ENDIF;

//?8=Email it
CASE;

// IF RCD.*SFLSEL is *Option 8 request
IF RCD.*SFLSEL = '8'/'8';

// Call program PMT Enter Email       PV.
CALL PROGRAM(PMT Enter Email       PV) ('PLLSPVR');
PARAMETER(LCL.EMail_Address);

CASE;

// IF LCL.EMail Address is Entered
IF LCL.EMail_Address <> *BLANK;

// LCL.Company Number Alpha Usr = RCD.MGL Company
LCL.Company_Number_Alpha_Usr = RCD.MGL_Company;

// Execute command - 'EXECUTE Sequel M3 HPE VOUCHERS'
EXECUTE COMMAND(PRK1537);
PARAMETER(LCL.EMail_Address);
PARAMETER(LCL.Company_Number_Alpha_Usr);
PARAMETER(RCD.MGL_Division);
PARAMETER(RCD.MGL_Key_Value);

ENDIF;

ENDIF;

//?R=Reprocess it
CASE;

// IF RCD.*SFLSEL is Payment
IF RCD.*SFLSEL = 'P';

EXECUTE FUNCTION(Rtv Chg Headr to Reprs RT) TYPE(RTVOBJ) FILE(PLB9CPP)          AB1353841;
PARAMETER(RCD.MGL_Company);
PARAMETER(RCD.MGL_Division);
PARAMETER(RCD.MGL_Key_Value);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg M3 GL Interface Hd CH) TYPE(CHGOBJ) FILE(PLB9CPP)          AB1324299;
 PARAMETER(DB1.MGL_Company);
 PARAMETER(DB1.MGL_Division);
 PARAMETER(DB1.MGL_Key_Value);
 PARAMETER(DB1.MGL_Interface);
 PARAMETER(DB1.MGL_Status);
 PARAMETER(DB1.MGL_Description);
 PARAMETER(DB1.MGL_Change_Number);
 PARAMETER(DB1.MGL_Text_Identity);
 PARAMETER(DB1.MGL_Change_Date_8_0);
 PARAMETER(DB1.MGL_Entry_Date_8_0);
 PARAMETER(0);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


ENDIF;

