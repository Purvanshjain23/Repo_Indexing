      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      Hog Production System
      * PROGRAM:     Workfile: Grow Finish Groups--Sow/Sire Detail
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     06/28/05
      *
      * FUNCTION:    This function builds the detail sow/sire line records for each
      *              Grow Finish group record in workfile GF Groups--Nursery Sources
      *              that has a BGF farm.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 10/18/10  LeAnne Ramsey  (E1079)
      *           Recompile only. Sire Line Company is now 2-characters instead
      *           of one in file HSP098-Sire Lines.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhsp098    if   e           k disk
      *  Sire Lines
      *
      *
     Fhsp328    if   e           k disk
      *  Workfile: Nursery Groups--Sow/sire summary
      *
      *
     Fhsp329    if   e           k disk
      *  Workfile: Grow finish groups--nursery sources
      *
      *
     Fhsp3312   uf a e           k disk
      *  Workfile: Grow Finish groups--Sow/Sire Detail
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
     D arrcomb         s             10a   dim(50)
     D arrsicd         s              5a   dim(50)
     D arrfscd         s              5p 0 dim(50)
     D arrrchd         s              5s 0 dim(50)
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      *
      * Control fields
      *
     D first           s              1    inz('Y')
     D svhgsn          s                   like(whdnhgsn)
      *
      *
      * Workfields
      *
     D wkrchd          s                   like(w5rchd)
     D wkremhd         s                   like(w5rchd)
     D wkhd            s                   like(w5rchd)
     D wkcn            s              3  0
     D wkpr            s             15  8
      *
     D wkalphfscd      s              5
     D wkcomb          s             10
      *
     D wksicd          s                   like(whsicd)
     D wkfscd          s                   like(whorfscd)
     D wkhgsn          s                   like(whdnhgsn)
      *
     D wksysdt         s              8  0
      *
      *
      * Workfields for date manipulation
      *
     D wkcymdiso       s               D   datfmt(*iso)
      *
      *
      *
      * Define parms for the generic movement program
      *
     D @@nu50          s              5  0
     D gpihd           s                   like(@@nu50)
     D pinhd           s                   like(@@nu50)
     D tinhd           s                   like(@@nu50)
     D tisphd          s                   like(@@nu50)
     D tidphd          s                   like(@@nu50)
     D pouhd           s                   like(@@nu50)
     D touhd           s                   like(@@nu50)
     D tosphd          s                   like(@@nu50)
     D todphd          s                   like(@@nu50)
     D rinhd           s                   like(@@nu50)
     D rouhd           s                   like(@@nu50)
     D qinhd           s                   like(@@nu50)
     D qouhd           s                   like(@@nu50)
     D morhd           s                   like(@@nu50)
     D inahd           s                   like(@@nu50)
      *
     D @@nu92          s              9  2
     D pinlb           s                   like(@@nu92)
     D tinlb           s                   like(@@nu92)
     D tisplb          s                   like(@@nu92)
     D tidplb          s                   like(@@nu92)
     D poulb           s                   like(@@nu92)
     D toulb           s                   like(@@nu92)
     D tosplb          s                   like(@@nu92)
     D todplb          s                   like(@@nu92)
     D rinlb           s                   like(@@nu92)
     D roulb           s                   like(@@nu92)
     D qinlb           s                   like(@@nu92)
     D qoulb           s                   like(@@nu92)
     D morlb           s                   like(@@nu92)
      *
      *
      * Array indexes
      *
     D x               s              3  0
     D y               s              3  0
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ***************************************************************************************
      * MAINLINE
      ***************************************************************************************
      *
      * Process each record in the Workfile: Grow Finish Groups--Nursery Sources.
      * (Note: In this workfile, the destination groups are all Grow Finish Groups.)
      *
      *
     C     *loval        setll     hsp329
      *
     C                   dou       *in90 = *on                                  Main do loop
     C                   read      hsp329                                 90
     C                   if        *in90 = *off                                 If not EOF
     C
      *
      * First time
     C                   if        first = yes
     C                   exsr      $clear
     C                   move      no            first
     C                   endif
      *
      * Accumulate total head received
      *
     C                   add       w5rchd        wkrchd
      *
      * If the record has a BGF source farm,
      * retrieve the sire line records for the origin group and build distribution arrays
      *
     C                   if        w5orfscd <> 0
     C                   exsr      $nursery
     C                   endif
      *
      * Always write a record--even when there was no BGF source farm.
      *
     C                   exsr      $wrt3312
      *
     C                   endif                                                  If not EOF
     C                   enddo                                                  Main do loop
      *
      *
      * EOF Processing
      *
     C                   seton                                        lr
      /eject
      *---------------------------------------------------------------------
      * Retrieve the summarized sow/sire line records for the nursery group
      *---------------------------------------------------------------------
      *
     C     $nursery      begsr
      *
     C                   z-add     0             wkcn
     C                   z-add     0             wkhd
     C                   z-add     w5rchd        wkremhd
      *
     C     w5orhgsn      setll     hsp328
      *
     C                   dou       *in91 = *on                                  Nursery loop
     C     w5orhgsn      reade     hsp328                                 91
     C                   if        *in91 = *off                                 If not EOF
     C                   add       1             wkcn
      *
      * Determine how many head should go with this record. If you are on
      * the last record (or only have 1 record), then use all the remaining
      * head; otherwise, calculate the head to associate with this record.
      *
     C                   select
     C                   when      wkcn = w4sino
     C                   z-add     wkremhd       wkhd
     C                   other
     C     w4dopr        mult      .01           wkpr
     C     w5rchd        mult      wkpr          wkhd
     C                   sub       wkhd          wkremhd
     C                   endsl
      *
      * Set up a combination field of farm/sire line for the array lookup:
      *
     C                   move(p)   w4orfscd      wkalphfscd
     C                   eval      wkcomb = wkalphfscd + w4sicd
      *
      * Do the array lookup
      *
     C                   z-add     1             x
     C     wkcomb        lookup    arrcomb(x)                             92
     C                   if        *in92 = *on                                  If exists
     C                   add       wkhd          arrrchd(x)
     C                   else
     C                   add       1             y
     C                   move      wkcomb        arrcomb(y)
     C                   move      w4sicd        arrsicd(y)
     C                   z-add     w4orfscd      arrfscd(y)
     C                   z-add     wkhd          arrrchd(y)
     C                   endif                                                  If exists
      *
     C                   endif                                                  If not EOF
     C                   enddo                                                  Doses loop
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Write records to GF Groups-Sow/Sire Detail
      *----------------------------------------------------------------
      *
     C     $wrt3312      begsr
      *
     C                   clear                   whrec
      *
      *
      * Don't have Sire Lines--so update an existing UNK?? record or write
      * an UNK?? record if none already exists.
      *
     C                   if        y = 0                                        If no sire info
      *
      * Set up key fields
     C                   z-add     w5dnhgsn      wkhgsn
     C                   move      'UNK??'       wksicd
     C                   z-add     0             wkfscd
      *
     C     key01         chain     hsp3312                            92
     C                   if        *in92 = *off                                 If exists
     C                   add       wkrchd        whrchd
     C                   update    whrec
     C                   else
      *
     C                   move      w5dnppcd      whdnppcd
     C                   z-add     w5dnfscd      whdnfscd
     C                   z-add     w5dncell      whdncell
     C                   z-add     w5dnhgsn      whdnhgsn
     C                   move      w5dnhgcd      whdnhgcd
     C                   z-add     0             whorfscd
     C                   move      'UNK??'       whsicd
     C                   move      'UNK??'       whgg0
     C                   z-add     wkrchd        whrchd
     C                   write     whrec
     C                   endif                                                  If exists
      *
      *
      * Have some Sire Lines---so, write 1 or more records from arrays
      *
     C                   else
     C                   move      w5dnppcd      whdnppcd
     C                   z-add     w5dnfscd      whdnfscd
     C                   z-add     w5dncell      whdncell
     C                   z-add     w5dnhgsn      whdnhgsn
     C                   move      w5dnhgcd      whdnhgcd
      *
      * Write a record for each element in the sire line array.
      *
     C                   do        y             x
     C                   move      arrsicd(x)    whsicd
     C                   z-add     arrfscd(x)    whorfscd
     C                   z-add     arrrchd(x)    whrchd
      *
      * Retrieve Cognos Report Grouping associated with Sire Line
      *
     C     whsicd        chain     hsp098                             92
     C                   if        *in92 = *off
     C                   move      sigg0         whgg0
     C                   else
     C                   move      'UNK??'       whgg0
     C                   endif
      *
     C                   write     whrec
     C                   enddo
     C                   endif                                                  If no sire info
      *
      * Clear/initialize for next group
      *
     C                   exsr      $clear
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Clear routine
      *----------------------------------------------------------------
      *
     C     $clear        begsr
      *
      * Clear arrays and set array indexes back to zero
      *
     C                   move      *blank        arrcomb
     C                   move      *blank        arrsicd
     C                   z-add     0             arrrchd
     C                   z-add     0             arrfscd
     C                   z-add     0             x
     C                   z-add     0             y
      *
      * Clear accumulators
      *
     C                   z-add     0             wkrchd
     C                   z-add     0             wkremhd
     C                   z-add     0             wkhd
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      *
      * Parm lists
      *
     C     plist01       plist
     C                   parm                    svhgsn
     C                   parm                    wksysdt
      * Head
     C                   parm                    gpihd                          GROUP INV
     C                   parm                    pinhd                          PIG IN
     C                   parm                    tinhd                          TRSF IN
     C                   parm                    tisphd                         SAME PHASE
     C                   parm                    tidphd                         DIFF PHASE
     C                   parm                    pouhd                          PIGS OUT
     C                   parm                    touhd                          TRSF OUT
     C                   parm                    tosphd                         SAME PHASE
     C                   parm                    tosphd                         DIFF PHASE
     C                   parm                    rinhd                          REJECT IN
     C                   parm                    rouhd                          REJECT OUT
     C                   parm                    qinhd                          QUALITY IN
     C                   parm                    qouhd                          QUALITY OUT
     C                   parm                    morhd                          MORTALITY
     C                   parm                    inahd                          INV ADJ
      * Pounds
     C                   parm                    pinlb                          PIG IN
     C                   parm                    tinlb                          TRSF IN
     C                   parm                    tisplb                         SAME PHASE
     C                   parm                    tidplb                         DIFF PHASE
     C                   parm                    poulb                          PIG OUT
     C                   parm                    toulb                          TRSF OUT
     C                   parm                    tosplb                         SAME PHASE
     C                   parm                    todplb                         DIFF PHASE
     C                   parm                    rinlb                          REJECT IN
     C                   parm                    roulb                          REJECT OUT
     C                   parm                    qinlb                          QUALITY IN
     C                   parm                    qoulb                          QUALITY OUT
     C                   parm                    morlb                          MORTALITY
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    wkhgsn
     C                   kfld                    wkfscd
     C                   kfld                    wksicd
      *
      *
      * Put system date into work field.
      *
     C     *mdy          movel     udate         wkcymdiso
     C                   movel     wkcymdiso     wksysdt
      *
      *
     C                   endsr
      /EJECT
