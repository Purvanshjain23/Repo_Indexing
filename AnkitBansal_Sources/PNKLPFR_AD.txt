// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNKLPFR
// ?Date: 14.08.2025 Time: 12:05:56
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


EXECUTE FUNCTION(Rtv Prior Sunday      RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1410775;
PARAMETER(360);
PARAMETER(PAR.Actual_Shipped_Date);
PARAMETER(PAR.From_Date_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Date Sun USR = DB1.Post to G/L Date
 PAR.Date_Sun_USR = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

}


// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

// WRK.Record Processed Usr = CND.No
WRK.Record_Processed_Usr = 'N';

//?USER: Record selection processing

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

CASE;

// IF DB1.Actual Shipped Date LT PAR.From Date             USR
IF DB1.Actual_Shipped_Date < PAR.From_Date_USR;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Added 12/04/19 RMC
CASE;

// IF DB1.Order Type - Sales is Not Regular Order
IF DB1.Order_Type_Sales <> 'OR';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process top of page

// TOP.Company Name = CON.*All
TOP_Company_Name = *All;

// TOP.To Date               USR = PAR.Actual Shipped Date
TOP_To_Date_USR = PAR.Actual_Shipped_Date;

//?USER: Print required level headings

// SUPPRESSED PRINT Type Code header format

// SUPPRESSED PRINT Actual Shipped Date header format

// SUPPRESSED PRINT Ship To Customer header format

// SUPPRESSED PRINT Invoice Number header format

// SUPPRESSED PRINT Shipped Item Code header format

//?USER: On print of detail format

//?** Calculation instructions documentation
//?** Transfer Price = 3rd party fob gross / 3rd party weight billed
//?** Invoice net/lb = invoice fob gross / invoice weight billed
//?** Adjustment/lb = invoice net/lb - transfer price
//?** Sales Adjustment Amount = Adjustment/lb * Invoice Weight Billed
//?** to apply:
//?** New SH fob gross = old fob gross amount - sales adjustment amount
//?** New ledgered accrual =  old ledgered accrual + sales adjust amount
//?** New NonLedgrd accrual = Old NonLedgrd accrual + sales adjust amount
//?** Only create Shipping Dtl Accrual if Weight Billed is not zeros
//?** Only create History Dtl Accrual if Weight Billed is not zeros
MOVE *ALL (To: CUR From: DB1);

EXECUTE FUNCTION(RTV Item desc/GL Sub   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1947430;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Shipped_Item_Code);
PARAMETER(LCL.Item_Description);
PARAMETER(CUR.GL_Sub_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Accrual Code = CND.Inter-Co Sales Accrual
LCL.Accrual_Code = 'ISA';

EXECUTE FUNCTION(RTV Accrual Info-All   RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1825083;
PARAMETER(LCL.Accrual_Code);
PARAMETER(LCL.Accrual_Description);
PARAMETER(LCL.Automatic_Accrual_Y_N);
PARAMETER(LCL.Print_On_Invoice_Y_N);
PARAMETER(LCL.Rate_Usage);
PARAMETER(LCL.Add_on_Allowance);
PARAMETER(LCL.Accrual_Type);
PARAMETER(LCL.Sub_Ledger_Code);
PARAMETER(LCL.Reverse_Accrual_Code);
PARAMETER(LCL.UOM_Primary_Dft);
PARAMETER(LCL.G_L_Code_Dr);
PARAMETER(LCL.G_L_Code_Cr);
PARAMETER(LCL.G_L_Sub_Account_Code);
PARAMETER(LCL.Sales_History_Exp_Bucket);
PARAMETER(LCL.Post_to_G_L_Y_N);
PARAMETER(LCL.All_Products_Y_N);
PARAMETER(LCL.Accrual_Rate);
PARAMETER(LCL.Accrual_Rate_Type);
PARAMETER(LCL.Accrual_Detail_Search);
PARAMETER(LCL.Standard_Schedule_Y_N);
PARAMETER(LCL.Affect_Sales_Realz_Rpt);
PARAMETER(LCL.Affect_Invoice_Price);
PARAMETER(LCL.Invoice_Print_Type);
PARAMETER(LCL.Max_Accrual_Amount);
PARAMETER(LCL.Max_Accrual_Amount_Type);
PARAMETER(LCL.Record_Status);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Retro Comm Calculated = CND.blank
LCL.Retro_Comm_Calculated = *BLANK;

// CUR.Transfer Price short usr = CON.*ZERO
CUR.Transfer_Price_short_usr = *ZERO;

// WRK.Weight Shipped Total = CON.*ZERO
WRK.Weight_Shipped_Total = *ZERO;

// WRK.FOB Gross Amount      USR = CON.*ZERO
WRK.FOB_Gross_Amount_USR = *ZERO;

// Call program Clc Transfer Price    XF.
CALL PROGRAM(Clc Transfer Price    XF) ('PNKOXFR');
PARAMETER(CUR.Shipped_Item_Code);
PARAMETER(PAR.Actual_Shipped_Date);
PARAMETER(DB1.Company_Number);
PARAMETER(WRK.Weight_Shipped_Total);
PARAMETER(WRK.FOB_Gross_Amount_USR);
PARAMETER(DB1.Shipping_Company_Number);
PARAMETER(PAR.From_Date_USR);
PARAMETER(PAR.Actual_Shipped_Date);
PARAMETER(CUR.Ship_To_Customer);
PARAMETER('G');

// CUR.Weight Shipped Total = WRK.Weight Shipped Total
CUR.Weight_Shipped_Total = WRK.Weight_Shipped_Total;

//?** Put calc'd fob gross into 3rd party fob gross
// CUR.FOB Gross Amount-5    USR = WRK.FOB Gross Amount      USR
CUR.FOB_Gross_Amount_5_USR = WRK.FOB_Gross_Amount_USR;

//?Calculate CUR.Transfer Price USR (3rd party net per lb)
CASE;

// IF CUR.Weight Shipped Total is Greater than zero
IF CUR.Weight_Shipped_Total > *ZERO;

// CUR.Transfer Price short usr = CUR.FOB Gross Amount-5    USR / CUR.Weight Shipped Total *Rounded
CUR.Transfer_Price_short_usr = CUR.FOB_Gross_Amount_5_USR / CUR.Weight_Shipped_Total 'H';

ENDIF;

//?Calculate invoice net per lb
CASE;

// IF CUR.Weight Billed is Greater than zero
IF CUR.Weight_Billed > *ZERO;

// CUR.Price Adjustment Amount = CUR.FOB Gross Amount / CUR.Weight Billed *Rounded
CUR.Price_Adjustment_Amount = CUR.FOB_Gross_Amount / CUR.Weight_Billed 'H';

ENDIF;

//?E1449 No 3rd Party Sales for Item.
//?OVERRIDE: Transfer Price = Invoice Price, if 3rd Party Sales = Zero
CASE;

// IF CUR.Weight Shipped Total is Equal to zero
IF CUR.Weight_Shipped_Total = *ZERO;

// CUR.Transfer Price short usr = CUR.Price Adjustment Amount
CUR.Transfer_Price_short_usr = CUR.Price_Adjustment_Amount;

// CUR.Explaination Text 1 = CON.No 3rd Party Sales
CUR.Explaination_Text_1 = 'No 3rd Party Sales';

//?OVERRIDE: Transfer Price = Invoice Price, if 3rd Party Sales = Zero
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Explaination Text 1 = CON.*BLANK
CUR.Explaination_Text_1 = *BLANK;

ENDIF;

//?E1449 ------------------------------------------------------
// CUR.Price 1 USR = CUR.Price Adjustment Amount - CUR.Transfer Price short usr
CUR.Price_1_USR = CUR.Price_Adjustment_Amount - CUR.Transfer_Price_short_usr;

// CUR.Sales Adjustment usr = CUR.Weight Billed * CUR.Price 1 USR *Rounded
CUR.Sales_Adjustment_usr = CUR.Weight_Billed * CUR.Price_1_USR 'H';

//?** Calculate FOB Gross "After"
// CUR.FOB Gross Amount-2    USR = CUR.FOB Gross Amount - CUR.Sales Adjustment usr
CUR.FOB_Gross_Amount_2_USR = CUR.FOB_Gross_Amount - CUR.Sales_Adjustment_usr;

//?***** UPDATE Sales History, Shipping Dtl Accrual, History Dtl Accrual
//?** UPDATE Ledgrd TF Accrual before,after & FOB Gross Amount
CASE;

// IF LCL.Ledger Accrual (Y/N) is yes
IF LCL.Post_to_G_L_Y_N = 'Y';

//?** Ledgered Accrual - Before and After
// CUR.Ledgrd Accrl Amt 1 Usr = CUR.Ledgrd Trd Fund Accrl Amt + CUR.Sales Adjustment usr
CUR.Ledgrd_Accrl_Amt_1_Usr = CUR.Ledgrd_Trd_Fund_Accrl_Amt + CUR.Sales_Adjustment_usr;

EXECUTE FUNCTION(CHG FOB & Trade fund  CH) TYPE(CHGOBJ) FILE(OMHSTPP)           AC1769171;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(DB1.Order_Sequence_Number);
PARAMETER(DB1.Order_Secondary_Line_Seq);
PARAMETER(CUR.FOB_Gross_Amount_2_USR);
PARAMETER(CUR.Ledgrd_Accrl_Amt_1_Usr);
{
 //?USER: Processing after Data read

 // DB1.Data Mart Process Sts = CND.no
 DB1.Data_Mart_Process_Sts = 'N';

 // DB1.Process Sts for 3C = CND.No
 DB1.Process_Sts_for_3C = 'N';

}


ENDIF;

//?** CREATE Shipping Dtl Acrual
CASE;

// IF DB1.Weight Billed is Not equal zero
IF DB1.Weight_Billed <> *ZERO;

EXECUTE FUNCTION(Rtv LAST SEQ F/ORDER  RT) TYPE(RTVOBJ) FILE(OMHRCPP)           AC1858759;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(DB1.Order_Sequence_Number);
PARAMETER(DB1.Order_Secondary_Line_Seq);
PARAMETER(LCL.Sequence_Number);
{
 //?USER: Process Data record

 // PAR.Sequence Number = DB1.Sequence Number
 PAR.Sequence_Number = DB1.Sequence_Number;

}


//?calc sequence number
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// LCL.Sequence Number = CON.1
LCL.Sequence_Number = 1;

//?calc sequence number
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Sequence Number = LCL.Sequence Number + CON.1
LCL.Sequence_Number = LCL.Sequence_Number + 1;

ENDIF;

// LCL.Accrual Rate = LCL.Accrual Rate / CON.100 *
LCL.Accrual_Rate = LCL.Accrual_Rate / 100;

// Call program Val G/L Act Cde 2 HPE XF.
CALL PROGRAM(Val G/L Act Cde 2 HPE XF) ('PKVBXFR');
PARAMETER(CUR.Company_Number);
PARAMETER(LCL.G_L_Code_Dr);
PARAMETER(LCL.G_L_Code_Desc_USR);
PARAMETER(LCL.SDA_JDE_Account_ID_Dr);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(LCL.Record_Found_USR);

// Call program Val G/L Act Cde 2 HPE XF.
CALL PROGRAM(Val G/L Act Cde 2 HPE XF) ('PKVBXFR');
PARAMETER(CUR.Company_Number);
PARAMETER(LCL.G_L_Code_Cr);
PARAMETER(LCL.G_L_Code_Desc_USR);
PARAMETER(LCL.SDA_JDE_Account_ID_Cr);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(LCL.Record_Found_USR);

EXECUTE FUNCTION(G/L Sub Ledger DRV) TYPE(DRVFLD)                               AC1830688;
PARAMETER(LCL.SDA_G_L_Sub_Ledger);
PARAMETER(LCL.Sub_Ledger_Code);
PARAMETER(LCL.AR_Customer_Number);
PARAMETER(CUR.Ship_To_Customer);
PARAMETER(LCL.Broker_Code);
{
 //?Calculate derived field

 //?A/R Customer
 CASE;

 // IF PAR.Sub Ledger Code is A/R Customer
 IF PAR.Sub_Ledger_Code = 'A';

 EXECUTE FUNCTION(Rtv g/l Vendor        RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1680257;
 PARAMETER(PAR.AR_Customer_Number);
 PARAMETER(PAR.G_L_Sub_Ledger_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?Ship To Customer
 CASE;

 // IF PAR.Sub Ledger Code is Ship To Customer
 IF PAR.Sub_Ledger_Code = 'S';

 EXECUTE FUNCTION(Rtv g/l Vendor        RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1680257;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.G_L_Sub_Ledger_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?Broker
 CASE;

 // IF PAR.Sub Ledger Code is Broker
 IF PAR.Sub_Ledger_Code = 'B';

 // OR PAR.Sub Ledger Code is Buyer Group
 OR PAR.Sub_Ledger_Code = 'G';

 EXECUTE FUNCTION(Rtv Broker Info       RT) TYPE(RTVOBJ) FILE(POC5REP)           AC1675816;
 PARAMETER(PAR.Broker_Code);
 PARAMETER(LCL.Broker_Name);
 PARAMETER(LCL.Broker_Address_Line_1);
 PARAMETER(LCL.Broker_Address_Line_2);
 PARAMETER(LCL.Broker_City);
 PARAMETER(LCL.Broker_State);
 PARAMETER(LCL.Broker_Zip);
 PARAMETER(LCL.Broker_Office_Manager);
 PARAMETER(LCL.Broker_Telephone_Number);
 PARAMETER(LCL.Broker_Fax_Number);
 PARAMETER(LCL.Broker_Email_Address);
 PARAMETER(PAR.G_L_Sub_Ledger_DRV);
 PARAMETER(LCL.Salesperson_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

}


EXECUTE FUNCTION(CRT OM Ship Dtl Accrul CR) TYPE(CRTOBJ) FILE(OMHRCPP)          AC1337844;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(DB1.Order_Sequence_Number);
PARAMETER(DB1.Order_Secondary_Line_Seq);
PARAMETER(LCL.Sequence_Number);
PARAMETER(LCL.Accrual_Rate);
PARAMETER(*ZERO);
PARAMETER(CUR.Sales_Adjustment_usr);
PARAMETER(CUR.Sales_Adjustment_usr);
PARAMETER(CUR.Shipped_Item_Code);
PARAMETER(CUR.Ship_To_Customer);
PARAMETER(DB1.AR_Customer_Number);
PARAMETER(LCL.Broker_Code);
PARAMETER(DB1.Actual_Shipped_Date);
PARAMETER(CUR.Weight_Billed);
PARAMETER(LCL.Use_G_L_Code_Dr_Cr);
PARAMETER(LCL.Retro_Comm_Calculated);
PARAMETER(LCL.Accrual_Type);
PARAMETER(LCL.Affect_Sales_Realz_Rpt);
PARAMETER(LCL.Affect_Invoice_Price);
PARAMETER(LCL.Print_On_Invoice_Y_N);
PARAMETER(LCL.Invoice_Print_Type);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.Post_to_G_L_Y_N);
PARAMETER(LCL.Accrual_Rate_Type);
PARAMETER(DB1.Invoice_Date);
PARAMETER(LCL.Sub_Ledger_Code);
PARAMETER(LCL.SDA_G_L_Sub_Ledger);
PARAMETER(LCL.G_L_Code_Dr);
PARAMETER(LCL.G_L_Code_Cr);
PARAMETER(LCL.SDA_JDE_Account_ID_Dr);
PARAMETER(LCL.SDA_JDE_Account_ID_Cr);
PARAMETER(LCL.Accrual_Code);
PARAMETER(LCL.Sales_History_Exp_Bucket);
PARAMETER(LCL.G_L_Sub_Account);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(JOB.*Job_time);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*JOB);
PARAMETER(JOB.*Job_date);
{
 //?USER: Processing before Data update

 // DB1.Job Time = JOB.*Job time
 DB1.Job_Time = JOB.*Job_time;

 // DB1.User Id = JOB.*USER
 DB1.User_Id = JOB.*USER;

 // DB1.Job Name = JOB.*JOB
 DB1.Job_Name = JOB.*JOB;

 // DB1.Job Date = JOB.*Job date
 DB1.Job_Date = JOB.*Job_date;

}


ENDIF;

//?** CREATE History Dtl Accrual
CASE;

// IF DB1.Weight Billed is Not equal zero
IF DB1.Weight_Billed <> *ZERO;

EXECUTE FUNCTION(CRT PD History Dtl Acc CO) TYPE(CRTOBJ) FILE(PDICCPP)          AC1255124;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(DB1.Order_Sequence_Number);
PARAMETER(DB1.Order_Secondary_Line_Seq);
PARAMETER(LCL.Sequence_Number);
PARAMETER(LCL.Accrual_Rate);
PARAMETER(CUR.Sales_Adjustment_usr);
PARAMETER(CUR.Sales_Adjustment_usr);
PARAMETER(CUR.Shipped_Item_Code);
PARAMETER(CUR.Ship_To_Customer);
PARAMETER(DB1.Actual_Shipped_Date);
PARAMETER(CUR.Weight_Billed);
PARAMETER(LCL.Use_G_L_Code_Dr_Cr);
PARAMETER(LCL.Retro_Comm_Calculated);
PARAMETER(LCL.Accrual_Type);
PARAMETER(LCL.Affect_Sales_Realz_Rpt);
PARAMETER(LCL.Affect_Invoice_Price);
PARAMETER(LCL.Print_On_Invoice_Y_N);
PARAMETER(LCL.Invoice_Print_Type);
PARAMETER(PAR.Actual_Shipped_Date);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.Sales_History_Exp_Bucket);
PARAMETER(LCL.G_L_Sub_Account);
PARAMETER(LCL.Post_to_G_L_Y_N);
PARAMETER(LCL.Accrual_Rate_Type);
PARAMETER(DB1.Invoice_Date);
PARAMETER(LCL.Sub_Ledger_Code);
PARAMETER(LCL.SDA_G_L_Sub_Ledger);
PARAMETER(LCL.G_L_Code_Dr);
PARAMETER(LCL.G_L_Code_Cr);
PARAMETER(LCL.SDA_JDE_Account_ID_Dr);
PARAMETER(LCL.SDA_JDE_Account_ID_Cr);
PARAMETER(LCL.Broker_Code);
PARAMETER(LCL.Accrual_Code);
PARAMETER(JOB.*Job_time);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*JOB);
PARAMETER(JOB.*Job_date);
{
 //?USER: Processing after Data update

 //?08/09/2007 Todd Johnson
 //?Based on EIS Specifications - FDD Accruals
 EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
 PARAMETER(DB1.Company_Number);
 PARAMETER(NLL.Plant_Company_Sts);
 PARAMETER(LCL.Company_Organization);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Company Organization is Daily's
 IF LCL.Company_Organization = 'D';

 //?If Accrual Type is TF
 CASE;

 // IF DB1.Accrual Type is Trade Fund/Marketing
 IF DB1.Accrual_Type = 'TF';

 EXECUTE FUNCTION(Rtv Descriptions      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1140665;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.Description_Line_One);
 PARAMETER(NLL.Description_Line_Two);
 PARAMETER(NLL.UOM_Primary);
 PARAMETER(NLL.UOM_Second);
 PARAMETER(NLL.UOM_Third);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV All Header Fields  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1326885;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(NLL.Order_Type_Sales);
 PARAMETER(NLL.AR_Customer_Number);
 PARAMETER(NLL.Ship_To_Customer);
 PARAMETER(NLL.Ship_To_Name);
 PARAMETER(NLL.Ship_To_Address_Line_1);
 PARAMETER(NLL.Ship_To_Address_Line_2);
 PARAMETER(NLL.Ship_To_Address_Line_3);
 PARAMETER(NLL.Ship_To_City);
 PARAMETER(NLL.Ship_To_State_Code);
 PARAMETER(NLL.Ship_To_Zip_Postal_Code);
 PARAMETER(NLL.Bill_to_Customer);
 PARAMETER(NLL.Bill_to_Name);
 PARAMETER(NLL.Bill_to_Address_Line_1);
 PARAMETER(NLL.Bill_to_Address_Line_2);
 PARAMETER(NLL.Bill_to_Address_Line_3);
 PARAMETER(NLL.Bill_to_City);
 PARAMETER(NLL.Bill_to_State_Code);
 PARAMETER(NLL.Bill_to_Zip_Postal_Code);
 PARAMETER(NLL.Customer_Purchase_Order_#);
 PARAMETER(NLL.Order_Date);
 PARAMETER(NLL.Requested_Ship_Date);
 PARAMETER(NLL.Actual_Shipped_Date);
 PARAMETER(NLL.Cancel_Date);
 PARAMETER(NLL.Terms_Code);
 PARAMETER(NLL.Special_Instructions);
 PARAMETER(NLL.Special_Instructions_2);
 PARAMETER(NLL.Carrier_Code);
 PARAMETER(NLL.Comment_Print_Acknowledge);
 PARAMETER(NLL.Comment_Print_Inv_Cr_Memo);
 PARAMETER(NLL.Comment_Print_Pick_Slip);
 PARAMETER(NLL.Comment_Print_Ship_Doc);
 PARAMETER(NLL.Reason_Code);
 PARAMETER(NLL.Order_in_Use);
 PARAMETER(NLL.Header_Status);
 PARAMETER(NLL.Header_Status_Last);
 PARAMETER(NLL.Order_Type_Print_Status);
 PARAMETER(NLL.Scheduled_Ship_Date);
 PARAMETER(NLL.User_Original_Entry);
 PARAMETER(NLL.Date_of_Original_Entry);
 PARAMETER(NLL.Order_Value_Total);
 PARAMETER(NLL.Order_Weight_Total);
 PARAMETER(NLL.Credit_Hold);
 PARAMETER(NLL.Production_Hold);
 PARAMETER(NLL.New_Customer_Hold);
 PARAMETER(NLL.Requested_Delivery_Date);
 PARAMETER(NLL.Requested_Delivery_Time);
 PARAMETER(NLL.Accounts_Receiv_Ent_1);
 PARAMETER(NLL.Accounts_Receiv_Ent_2);
 PARAMETER(NLL.Load_ID);
 PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
 PARAMETER(NLL.Rated_Freight);
 PARAMETER(NLL.LTL_Flag);
 PARAMETER(NLL.Price_Audit);
 PARAMETER(NLL.Price_Status);
 PARAMETER(NLL.Shipping_Method);
 PARAMETER(NLL.Export_Status);
 PARAMETER(NLL.Palletize);
 PARAMETER(NLL.Shrink_Wrap);
 PARAMETER(NLL.Slip_Sheet);
 PARAMETER(NLL.Age_Code);
 PARAMETER(NLL.Reefer_Temperature);
 PARAMETER(NLL.Load_Type);
 PARAMETER(NLL.Attach_to_Invoice_Number);
 PARAMETER(NLL.Load_Plan_Order);
 PARAMETER(NLL.Print_Pick_Slip);
 PARAMETER(NLL.Resell_Reference_Number);
 PARAMETER(NLL.Special_Comment_1);
 PARAMETER(NLL.Special_Comment_2);
 PARAMETER(NLL.Affect_Auto_Accruals);
 PARAMETER(NLL.Sales_Route_Code);
 PARAMETER(NLL.Manager_Level_Code);
 PARAMETER(NLL.VP_Level_Code);
 PARAMETER(NLL.Attach_to_Order_Number);
 PARAMETER(NLL.Reason_for_Price_Audit);
 PARAMETER(LCL.Invoice_Number);
 PARAMETER(NLL.Invoice_Suffix);
 PARAMETER(LCL.Invoice_Date);
 PARAMETER(NLL.Event_Code);
 PARAMETER(NLL.Trans_Contol_AS400_Plant);
 PARAMETER(NLL.Modified_Flag);
 PARAMETER(NLL.A_R_order_Value_Total);
 PARAMETER(NLL.Billing_Activity_Type);
 PARAMETER(NLL.Block_Order_Flag);
 PARAMETER(NLL.Order_Certification_Flag);
 PARAMETER(NLL.EDI_Status_1);
 PARAMETER(NLL.EDI_Status_2);
 PARAMETER(NLL.EDI_Status_3);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Convert fields first
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Invoice date to YYYYMMDD
 // LCL.USR Internal D8# YYYYMMDD = LCL.Invoice Date
 LCL.USR_Internal_D8#_YYYYMMDD = LCL.Invoice_Date;

 //?Sub Ledger to Char
 // LCL.USR Work Field 5,0 = DB1.HDA G/L Sub Ledger
 LCL.USR_Work_Field_50 = DB1.HDA_G_L_Sub_Ledger;

 // LCL.Text USR 5 = CVTVAR(LCL.USR Work Field 5,0)
 LCL.Text_USR_5 = CVTVAR(LCL.USR_Work_Field_50);

 //?Invoice Number to Char
 // LCL.USR number = LCL.Invoice Number
 LCL.USR_number = LCL.Invoice_Number;

 // LCL.Invoice Number 6 USR = CVTVAR(LCL.USR number)
 LCL.Invoice_Number_6_USR = CVTVAR(LCL.USR_number);

 ENDIF;

 // Call program Zzz Crt ACCR TRANS RCD.
 CALL PROGRAM(Zzz Crt ACCR TRANS RCD) ('PMLQUPR');
 PARAMETER(DB1.Accrual_Rate);
 PARAMETER(DB1.Extended_Amount);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Weight_Billed);
 PARAMETER(LCL.Description_Line_One);
 PARAMETER(LCL.USR_Internal_D8#_YYYYMMDD);
 PARAMETER(LCL.Text_USR_5);
 PARAMETER(LCL.Invoice_Number_6_USR);

 ENDIF;

 ENDIF;

}


ENDIF;

//?** Accumulate total sales adjustment amount
// NXT.Sales Adjustment 3 Usr = NXT.Sales Adjustment 3 Usr + CUR.Sales Adjustment usr
NXT.Sales_Adjustment_3_Usr = NXT.Sales_Adjustment_3_Usr + CUR.Sales_Adjustment_usr;

//?** Accumulate total "before" Ledgered TF Accrual amount
// NXT.Ledgrd Accrl Amt 2 Usr = NXT.Ledgrd Accrl Amt 2 Usr + CUR.Ledgrd Trd Fund Accrl Amt
NXT.Ledgrd_Accrl_Amt_2_Usr = NXT.Ledgrd_Accrl_Amt_2_Usr + CUR.Ledgrd_Trd_Fund_Accrl_Amt;

//?** Accumulate total "after" Ledgered Accrual amount
// NXT.Ledgrd Accrl Amt 3 Usr = NXT.Ledgrd Accrl Amt 3 Usr + CUR.Ledgrd Accrl Amt 1 Usr
NXT.Ledgrd_Accrl_Amt_3_Usr = NXT.Ledgrd_Accrl_Amt_3_Usr + CUR.Ledgrd_Accrl_Amt_1_Usr;

//?USER: Print required level totals

// SUPPRESSED PRINT Shipped Item Code totals format

// SUPPRESSED PRINT Invoice Number totals format

// SUPPRESSED PRINT Ship To Customer totals format

// SUPPRESSED PRINT Actual Shipped Date totals format

// SUPPRESSED PRINT Type Code totals format

