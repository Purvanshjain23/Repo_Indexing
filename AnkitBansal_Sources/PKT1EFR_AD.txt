// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKT1EFR
// ?Date: 14.08.2025 Time: 02:52:52
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?H16853 ISE 01/23/2021 - Increased the length from 5 to 7 and
//?                        corrected the alignment of Buy Order Number field
ENDDO;

// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


// LCL.First Time Flag Usr = CND.Yes
LCL.First_Time_Flag_Usr = 'Y';

// Call program Rtv User Code Model   XF.
CALL PROGRAM(Rtv User Code Model   XF) ('POYBXFR');
PARAMETER(JOB.*USER);
PARAMETER(LCL.User_Code_Model_USR);

//?USER: Initialize subfile record (existing record)

CASE;

// IF LCL.User Code Model USR is Procurement 2
IF LCL.User_Code_Model_USR = 'PORKPROC2';

// OR LCL.User Code Model USR is IS
OR LCL.User_Code_Model_USR = 'ISBGUTI';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF LCL.First Time Flag Usr is Yes
IF LCL.First_Time_Flag_Usr = 'Y';

CASE;

// IF PAR.CE Data Exist is No
IF PAR.CE_Data_Exist = 'N';

CASE;

// IF PAR.Status 1 is Yes
IF PAR.Status_1 = 'Y';

// Send information message - 'Condemns entered for the Shift must be deleted.'
MESSAGE(PRK0926 *INFO);

ENDIF;

ENDIF;

// LCL.First Time Flag Usr = CND.No
LCL.First_Time_Flag_Usr = 'N';

ENDIF;

ENDIF;

// RCD.Time USR = RCD.RU Time / CON.100 *
RCD.Time_USR = RCD.RU_Time / 100;

//?USER: Initialize subfile record (new record)

CASE;

// IF LCL.User Code Model USR is Procurement 2
IF LCL.User_Code_Model_USR = 'PORKPROC2';

// OR LCL.User Code Model USR is IS
OR LCL.User_Code_Model_USR = 'ISBGUTI';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF LCL.First Time Flag Usr is Yes
IF LCL.First_Time_Flag_Usr = 'Y';

CASE;

// IF PAR.CE Data Exist is Yes
IF PAR.CE_Data_Exist = 'Y';

CASE;

// IF PAR.Status 1 is Yes
IF PAR.Status_1 = 'Y';

// Send information message - 'Condemns must be entered for the Shift.'
MESSAGE(PRK0927 *INFO);

ENDIF;

ENDIF;

// LCL.First Time Flag Usr = CND.No
LCL.First_Time_Flag_Usr = 'N';

ENDIF;

ENDIF;

//?USER: Validate subfile record fields

// RCD.RU Time = RCD.Time USR * CON.100 *
RCD.RU_Time = RCD.Time_USR * 100;

// RCD.LT Type Code = CND.Carcass Loss
RCD.LT_Type_Code = 02;

// RCD.LTN Extent = CND.Full
RCD.LTN_Extent = 01;

// RCD.LTN Trim Location = CND.Trim
RCD.LTN_Trim_Location = 00;

// RCD.LTN Company Number = CTL.LTN Company Number
RCD.LTN_Company_Number = CTL.LTN_Company_Number;

// RCD.BOH Company Number = CTL.LTN Company Number
RCD.BOH_Company_Number = CTL.LTN_Company_Number;

// RCD.LTN Kill Date = CTL.LTN Kill Date
RCD.LTN_Kill_Date = CTL.LTN_Kill_Date;

// RCD.TH Kill Date = CTL.LTN Kill Date
RCD.TH_Kill_Date = CTL.LTN_Kill_Date;

// LCL.Return Code USR = CND.*Normal
LCL.Return_Code_USR = *BLANK;

CASE;

// IF RCD.LTN Tattoo Number is Internal Hot Scale
IF RCD.LTN_Tattoo_Number = 9999;

CASE;

// IF RCD.RU Date EQ WRK.Zero USR
IF RCD.RU_Date = WRK.Zero_USR;

// RCD.RU Date = CTL.LTN Kill Date
RCD.RU_Date = CTL.LTN_Kill_Date;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.RU Date EQ WRK.Zero USR
IF RCD.RU_Date = WRK.Zero_USR;

// RCD.RU Date = CTL.LTN Kill Date
RCD.RU_Date = CTL.LTN_Kill_Date;

ENDIF;

CASE;

// IF RCD.RU Time EQ WRK.Zero USR
IF RCD.RU_Time = WRK.Zero_USR;

// RCD.RU Time = JOB.*Job time
RCD.RU_Time = JOB.*Job_time;

// RCD.Time USR = RCD.RU Time / CON.100 *
RCD.Time_USR = RCD.RU_Time / 100;

ENDIF;

ENDIF;

//?Retrieve Internal Tattoo
CASE;

// IF RCD.LTN Tattoo Number is Internal Hot Scale
IF RCD.LTN_Tattoo_Number = 9999;

EXECUTE FUNCTION(Time Inc/Dec          IF) TYPE(EXCINTFUN)                      AB1229919;
PARAMETER('-1800');
PARAMETER(LCL.End_Time_TME);
PARAMETER(LCL.End_date_DTE);
PARAMETER(LCL.End_hour_USR);
PARAMETER(LCL.End_minute_USR);
PARAMETER(RCD.RU_Time);
PARAMETER(RCD.RU_Date);
{
 //?Execute internal function

 // PAR.Begin time USR = CVTVAR(PAR.Begin time TME)
 PAR.Begin_time_USR = CVTVAR(PAR.Begin_time_TME);

 // LCL.Date From Convert USR = CVTVAR(PAR.Begin date in sysfmt DTE)
 LCL.Date_From_Convert_USR = CVTVAR(PAR.Begin_date_in_sysfmt_DTE);

 // Call program Cvt Date              UP.
 CALL PROGRAM(Cvt Date              UP) ('PKPOUPR');
 PARAMETER(LCL.Date_From_Convert_USR);
 PARAMETER(PAR.Begin_date_in_sysfmt_USR);
 PARAMETER(*CYMD);
 PARAMETER(*MDY);
 PARAMETER(*NONE);

 // Call program Zzze Inc/Dec          UP.
 CALL PROGRAM(Zzze Inc/Dec          UP) ('PKUCUPR');
 PARAMETER('-1800');
 PARAMETER(PAR.End_time_USR);
 PARAMETER(PAR.End_date_USR);
 PARAMETER(PAR.End_date_2_CYYMMDD_USR);
 PARAMETER(PAR.End_hour_USR);
 PARAMETER(PAR.End_minute_USR);
 PARAMETER(PAR.Begin_time_USR);
 PARAMETER(PAR.Begin_date_in_sysfmt_USR);

 // Call program Cvt Date              UP.
 CALL PROGRAM(Cvt Date              UP) ('PKPOUPR');
 PARAMETER(PAR.End_date_USR);
 PARAMETER(LCL.Date_To_Convert_USR);
 PARAMETER(*MDY);
 PARAMETER(*CYMD);
 PARAMETER(*NONE);

 // LCL.Date Alpha USR = LCL.Date To Convert USR
 LCL.Date_Alpha_USR = LCL.Date_To_Convert_USR;

 // PAR.End date DTE = CVTVAR(LCL.Date Alpha USR)
 PAR.End_date_DTE = CVTVAR(LCL.Date_Alpha_USR);

 // PAR.End Time TME = CVTVAR(PAR.End time USR)
 PAR.End_Time_TME = CVTVAR(PAR.End_time_USR);

}


EXECUTE FUNCTION(Rtv Condemned Tattoo  RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1229900;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(LCL.End_date_DTE);
PARAMETER(LCL.End_Time_TME);
PARAMETER(RCD.TH_Tattoo_Number);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.TD Pen Head is GT Zero
 IF DB1.TD_Pen_Head > *ZERO;

 EXECUTE FUNCTION(Rtv PayTyp/Src Hc     Rt) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1177466;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(LCL.TH_Source_Type);
 PARAMETER(LCL.TH_Payment_Type);
 PARAMETER(LCL.TH_Hog_Class_Type);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.TH Hog Class Type is Market
 IF LCL.TH_Hog_Class_Type = 'M';

 // PAR.TH Tattoo Number = DB1.TH Tattoo Number
 PAR.TH_Tattoo_Number = DB1.TH_Tattoo_Number;

 QUIT;

 ENDIF;

 ENDIF;

}


//?Retrieve Internal Tattoo
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.TH Tattoo Number = RCD.LTN Tattoo Number
RCD.TH_Tattoo_Number = RCD.LTN_Tattoo_Number;

ENDIF;

EXECUTE FUNCTION(Rtv Tatts/BoLd/LvWt   RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1227662;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.LTN_Wgt);
PARAMETER(LCL.TH_Sex);
PARAMETER(RCD.LTN_Source_Type);
PARAMETER(LCL.TH_Hog_Class_Type);
PARAMETER(LCL.THP_Process_Code);
PARAMETER(LCL.HC_Class_Code);
PARAMETER(LCL.Return_Code_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Return Code USR = CND.*Record does not exist
 PAR.Return_Code_USR = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Process Code Validation
CASE;

// IF LCL.Return Code USR is *Normal
IF LCL.Return_Code_USR = *BLANK;

//?Process code validated
CASE;

// IF LCL.THP Process Code is Receiving
IF LCL.THP_Process_Code = 'RECV';

//?Process code validated
// IF LCL.THP Process Code is Slaughter
IF LCL.THP_Process_Code = 'SLG';

//?Process code validated
// IF *OTHERWISE
IF *OTHERWISE;

//?Tattoo Process code is not Receiving or Slaughter
//?Can not enter data until that time
// Send error message - 'Tattoo is not Ready for Slaughter.'
ERROR(PRK0373);
MSGPARM(RCD.LTN_Tattoo_Number);
MSGPARM(LCL.THP_Process_Code);

QUIT;

ENDIF;

CASE;

// IF LCL.TH Hog Class Type is Resale
IF LCL.TH_Hog_Class_Type = 'R';

// Send error message - 'Tattoo is resale'
ERROR(PRK0468);
MSGPARM(RCD.LTN_Tattoo_Number);

// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

//?Process Code Validation
// IF *OTHERWISE
IF *OTHERWISE;

//?Invalid Tattoo Number
// Send error message - 'Tattoo Number Not Found'
ERROR(PRK0368);
MSGPARM(RCD.LTN_Tattoo_Number);

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Loss Transaction  IF) TYPE(EXCINTFUN) FILE(PKBSCPP)        AB1136499;
PARAMETER(RCD.LTN_Company_Number);
PARAMETER(RCD.LTN_Kill_Date);
PARAMETER(RCD.LTN_Record_Number);
PARAMETER(RCD.LTN_Tattoo_Number);
PARAMETER(CTL.LTN_Shift);
PARAMETER(RCD.LTN_Wgt);
PARAMETER(RCD.LTN_Extent);
PARAMETER(RCD.LTN_Trim_Location);
PARAMETER(RCD.LTN_Error_Sts);
PARAMETER('M');
PARAMETER(RCD.LTN_User_Error_Override);
PARAMETER(RCD.LTN_Source_Type);
PARAMETER(RCD.LT_Type_Code);
PARAMETER(RCD.LR_Reason_Code);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.RU_Date);
PARAMETER(RCD.RU_Time);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Loss Trans Next   RT) TYPE(RTVOBJ) FILE(PKBSCPP)           AB1135836;
 PARAMETER(PAR.LTN_Company_Number);
 PARAMETER(PAR.LTN_Kill_Date);
 PARAMETER(PAR.LTN_Record_Number);
 {
  //?USER: Processing if Data record not found

  // PAR.LTN Record Number = CON.1
  PAR.LTN_Record_Number = 1;

  QUIT;

  //?USER: Process Data record

  CASE;

  // IF DB1.LTN Record Number is Entry Allowed
  IF DB1.LTN_Record_Number >= 000001;
  AND DB1.LTN_Record_Number <= 699999;

  // PAR.LTN Record Number = DB1.LTN Record Number + CON.1
  PAR.LTN_Record_Number = DB1.LTN_Record_Number + 1;

  QUIT;

  ENDIF;

 }

 EXECUTE FUNCTION(Crt Loss Transaction  CR) TYPE(CRTOBJ) FILE(PKBSCPP)           AB1102905;
 PARAMETER(PAR.LTN_Company_Number);
 PARAMETER(PAR.LTN_Kill_Date);
 PARAMETER(PAR.LTN_Record_Number);
 PARAMETER(PAR.LTN_Tattoo_Number);
 PARAMETER(PAR.LTN_Shift);
 PARAMETER(PAR.LTN_Wgt);
 PARAMETER(PAR.LTN_Extent);
 PARAMETER(PAR.LTN_Trim_Location);
 PARAMETER(PAR.LTN_Error_Sts);
 PARAMETER(PAR.LTN_Record_Created_Status);
 PARAMETER(PAR.LTN_User_Error_Override);
 PARAMETER(PAR.LTN_Source_Type);
 PARAMETER(PAR.LT_Type_Code);
 PARAMETER(PAR.LR_Reason_Code);
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.RU_Date);
 PARAMETER(PAR.RU_Time);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp-Sys Dt  IF) TYPE(EXCINTFUN)                      AB1237005;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // Call program Rtv System Date & Tim UP.
   CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
   PARAMETER(PAR.RS_Date_Added);
   PARAMETER(PAR.RS_Time_Added);

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 EXECUTE FUNCTION(Upd Head Condemn      RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1227599;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Head Condemned    RT) TYPE(RTVOBJ) FILE(PKBSCPP)           AB1227600;
  PARAMETER(02);
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(PAR.TH_Head_Condemned);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.TH Head Condemned = PAR.TH Head Condemned + CON.1
   PAR.TH_Head_Condemned = PAR.TH_Head_Condemned + 1;

  }

  EXECUTE FUNCTION(Chg Head Condemned    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1227604;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(PAR.TH_Head_Condemned);
  PARAMETER('E');
  {
   //?USER: Processing after Data update

   EXECUTE FUNCTION(Upd Head Condemned    RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1227617;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(DB1.TH_Head_Condemned);
   {
    //?USER: Process Data record

    // LCL.Net Head Usr = DB1.TD Pen Head - DB1.TD Yard Dead
    LCL.Net_Head_Usr = DB1.TD_Pen_Head - DB1.TD_Yard_Dead;

    // Call program Rtv Stress Pens Only  XF.
    CALL PROGRAM(Rtv Stress Pens Only  XF) ('PLPJXFR');
    PARAMETER(DB1.Pen_Company_Number);
    PARAMETER(DB1.Pen_Number);
    PARAMETER(LCL.Stress_Market_Type);

    //?Stress pen is now defined at the pen ext instead of ST1
    CASE;

    // IF LCL.Stress/Market Type is Stress
    IF LCL.Stress_Market_Type = 'S';

    // IF LCL.Net Head Usr is *Zeros
    IF LCL.Net_Head_Usr = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(Upd Head Condemned    RT) TYPE(RTVOBJ) FILE(PKDYCPP)           AB1227618;
    PARAMETER(DB1.BOH_Company_Number);
    PARAMETER(DB1.BOH_Buy_Order_Number);
    PARAMETER(DB1.BOL_Load_Number);
    PARAMETER(DB1.TH_Tattoo_Number);
    PARAMETER(DB1.TH_Kill_Date);
    PARAMETER(DB1.TD_Sequence_Number);
    PARAMETER(PAR.TH_Head_Condemned);
    {
     //?USER: Processing if Data record not found

     EXECUTE FUNCTION(Crt Tattoo Detail Ext  CR) TYPE(CRTOBJ) FILE(PKDYCPP)          AB1196901;
     PARAMETER(PAR.BOH_Company_Number);
     PARAMETER(PAR.BOH_Buy_Order_Number);
     PARAMETER(PAR.BOL_Load_Number);
     PARAMETER(PAR.TH_Tattoo_Number);
     PARAMETER(PAR.TH_Kill_Date);
     PARAMETER(PAR.TD_Sequence_Number);
     PARAMETER('N');
     PARAMETER(*ZERO);
     PARAMETER(PAR.TDE_Head_Condemned);
     PARAMETER(*ZERO);
     PARAMETER('N');
     PARAMETER('N');
     PARAMETER(PAR.RS_User_Changed);
     PARAMETER(PAR.RS_Date_Changed);
     PARAMETER(PAR.RS_Time_Changed);
     PARAMETER(PAR.RS_Record_Status);
     PARAMETER(PAR.RS_Job);
     PARAMETER(PAR.RS_Program);
     PARAMETER(PAR.RS_User_Added);
     PARAMETER(PAR.RS_Date_Added);
     PARAMETER(PAR.RS_Time_Added);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
      PARAMETER(DB1.RS_Record_Status);
      PARAMETER(DB1.RS_Job);
      PARAMETER(DB1.RS_Program);
      PARAMETER(DB1.RS_User_Added);
      PARAMETER(DB1.RS_Date_Added);
      PARAMETER(DB1.RS_Time_Added);
      {
       //?Execute internal function

       // PAR.RS Record Status = CND.Active
       PAR.RS_Record_Status = 'A';

       // PAR.RS User Added = JOB.*USER
       PAR.RS_User_Added = JOB.*USER;

       // PAR.RS Date Added = JOB.*Job date
       PAR.RS_Date_Added = JOB.*Job_date;

       // PAR.RS Time Added = JOB.*Job time
       PAR.RS_Time_Added = JOB.*Job_time;

       // PAR.RS Program = JOB.*PROGRAM
       PAR.RS_Program = JOB.*PROGRAM;

       // PAR.RS Job = JOB.*JOB
       PAR.RS_Job = JOB.*JOB;

      }

     }

     //?USER: Process Data record

     EXECUTE FUNCTION(Chg Head Condemned    CH) TYPE(CHGOBJ) FILE(PKDYCPP)           AB1227625;
     PARAMETER(DB1.BOH_Company_Number);
     PARAMETER(DB1.BOH_Buy_Order_Number);
     PARAMETER(DB1.BOL_Load_Number);
     PARAMETER(DB1.TH_Tattoo_Number);
     PARAMETER(DB1.TH_Kill_Date);
     PARAMETER(DB1.TD_Sequence_Number);
     PARAMETER(PAR.TDE_Head_Condemned);
    }

    QUIT;

    ENDIF;

   }

  }

 }

}


//?USER: Delete DBF record

EXECUTE FUNCTION(Dlt Loss Trans/UPD TH IF) TYPE(EXCINTFUN) FILE(PKBSCPP)        AB1227694;
PARAMETER(RCD.LTN_Company_Number);
PARAMETER(RCD.LTN_Kill_Date);
PARAMETER(RCD.LTN_Record_Number);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
{
 //?Execute internal function

 EXECUTE FUNCTION(Dlt Loss Transaction  DO) TYPE(DLTOBJ) FILE(PKBSCPP)           AB1102907;
 PARAMETER(PAR.LTN_Company_Number);
 PARAMETER(PAR.LTN_Kill_Date);
 PARAMETER(PAR.LTN_Record_Number);
 EXECUTE FUNCTION(Upd Head Condemn      RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1227599;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Head Condemned    RT) TYPE(RTVOBJ) FILE(PKBSCPP)           AB1227600;
  PARAMETER(02);
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(PAR.TH_Head_Condemned);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.TH Head Condemned = PAR.TH Head Condemned + CON.1
   PAR.TH_Head_Condemned = PAR.TH_Head_Condemned + 1;

  }

  EXECUTE FUNCTION(Chg Head Condemned    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1227604;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(PAR.TH_Head_Condemned);
  PARAMETER('E');
  {
   //?USER: Processing after Data update

   EXECUTE FUNCTION(Upd Head Condemned    RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1227617;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(DB1.TH_Head_Condemned);
   {
    //?USER: Process Data record

    // LCL.Net Head Usr = DB1.TD Pen Head - DB1.TD Yard Dead
    LCL.Net_Head_Usr = DB1.TD_Pen_Head - DB1.TD_Yard_Dead;

    // Call program Rtv Stress Pens Only  XF.
    CALL PROGRAM(Rtv Stress Pens Only  XF) ('PLPJXFR');
    PARAMETER(DB1.Pen_Company_Number);
    PARAMETER(DB1.Pen_Number);
    PARAMETER(LCL.Stress_Market_Type);

    //?Stress pen is now defined at the pen ext instead of ST1
    CASE;

    // IF LCL.Stress/Market Type is Stress
    IF LCL.Stress_Market_Type = 'S';

    // IF LCL.Net Head Usr is *Zeros
    IF LCL.Net_Head_Usr = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(Upd Head Condemned    RT) TYPE(RTVOBJ) FILE(PKDYCPP)           AB1227618;
    PARAMETER(DB1.BOH_Company_Number);
    PARAMETER(DB1.BOH_Buy_Order_Number);
    PARAMETER(DB1.BOL_Load_Number);
    PARAMETER(DB1.TH_Tattoo_Number);
    PARAMETER(DB1.TH_Kill_Date);
    PARAMETER(DB1.TD_Sequence_Number);
    PARAMETER(PAR.TH_Head_Condemned);
    {
     //?USER: Processing if Data record not found

     EXECUTE FUNCTION(Crt Tattoo Detail Ext  CR) TYPE(CRTOBJ) FILE(PKDYCPP)          AB1196901;
     PARAMETER(PAR.BOH_Company_Number);
     PARAMETER(PAR.BOH_Buy_Order_Number);
     PARAMETER(PAR.BOL_Load_Number);
     PARAMETER(PAR.TH_Tattoo_Number);
     PARAMETER(PAR.TH_Kill_Date);
     PARAMETER(PAR.TD_Sequence_Number);
     PARAMETER('N');
     PARAMETER(*ZERO);
     PARAMETER(PAR.TDE_Head_Condemned);
     PARAMETER(*ZERO);
     PARAMETER('N');
     PARAMETER('N');
     PARAMETER(PAR.RS_User_Changed);
     PARAMETER(PAR.RS_Date_Changed);
     PARAMETER(PAR.RS_Time_Changed);
     PARAMETER(PAR.RS_Record_Status);
     PARAMETER(PAR.RS_Job);
     PARAMETER(PAR.RS_Program);
     PARAMETER(PAR.RS_User_Added);
     PARAMETER(PAR.RS_Date_Added);
     PARAMETER(PAR.RS_Time_Added);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
      PARAMETER(DB1.RS_Record_Status);
      PARAMETER(DB1.RS_Job);
      PARAMETER(DB1.RS_Program);
      PARAMETER(DB1.RS_User_Added);
      PARAMETER(DB1.RS_Date_Added);
      PARAMETER(DB1.RS_Time_Added);
      {
       //?Execute internal function

       // PAR.RS Record Status = CND.Active
       PAR.RS_Record_Status = 'A';

       // PAR.RS User Added = JOB.*USER
       PAR.RS_User_Added = JOB.*USER;

       // PAR.RS Date Added = JOB.*Job date
       PAR.RS_Date_Added = JOB.*Job_date;

       // PAR.RS Time Added = JOB.*Job time
       PAR.RS_Time_Added = JOB.*Job_time;

       // PAR.RS Program = JOB.*PROGRAM
       PAR.RS_Program = JOB.*PROGRAM;

       // PAR.RS Job = JOB.*JOB
       PAR.RS_Job = JOB.*JOB;

      }

     }

     //?USER: Process Data record

     EXECUTE FUNCTION(Chg Head Condemned    CH) TYPE(CHGOBJ) FILE(PKDYCPP)           AB1227625;
     PARAMETER(DB1.BOH_Company_Number);
     PARAMETER(DB1.BOH_Buy_Order_Number);
     PARAMETER(DB1.BOL_Load_Number);
     PARAMETER(DB1.TH_Tattoo_Number);
     PARAMETER(DB1.TH_Kill_Date);
     PARAMETER(DB1.TD_Sequence_Number);
     PARAMETER(PAR.TDE_Head_Condemned);
    }

    QUIT;

    ENDIF;

   }

  }

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Loss Transaction  CH) TYPE(CHGOBJ) FILE(PKBSCPP)           AB1102906;
PARAMETER(RCD.LTN_Company_Number);
PARAMETER(RCD.LTN_Kill_Date);
PARAMETER(RCD.LTN_Record_Number);
PARAMETER(RCD.LTN_Tattoo_Number);
PARAMETER(RCD.LTN_Shift);
PARAMETER(RCD.LTN_Wgt);
PARAMETER(RCD.LTN_Extent);
PARAMETER(RCD.LTN_Trim_Location);
PARAMETER(RCD.LTN_Error_Sts);
PARAMETER(RCD.LTN_Record_Created_Status);
PARAMETER(RCD.LTN_User_Error_Override);
PARAMETER(RCD.LTN_Source_Type);
PARAMETER(RCD.LT_Type_Code);
PARAMETER(RCD.LR_Reason_Code);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(JOB.*JOB);
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
PARAMETER(RCD.RU_Date);
PARAMETER(RCD.RU_Time);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

 //?USER: Processing after Data update

 EXECUTE FUNCTION(Upd Head Condemn      RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1227599;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Head Condemned    RT) TYPE(RTVOBJ) FILE(PKBSCPP)           AB1227600;
  PARAMETER(02);
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(PAR.TH_Head_Condemned);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.TH Head Condemned = PAR.TH Head Condemned + CON.1
   PAR.TH_Head_Condemned = PAR.TH_Head_Condemned + 1;

  }

  EXECUTE FUNCTION(Chg Head Condemned    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1227604;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(PAR.TH_Head_Condemned);
  PARAMETER('E');
  {
   //?USER: Processing after Data update

   EXECUTE FUNCTION(Upd Head Condemned    RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1227617;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(DB1.TH_Head_Condemned);
   {
    //?USER: Process Data record

    // LCL.Net Head Usr = DB1.TD Pen Head - DB1.TD Yard Dead
    LCL.Net_Head_Usr = DB1.TD_Pen_Head - DB1.TD_Yard_Dead;

    // Call program Rtv Stress Pens Only  XF.
    CALL PROGRAM(Rtv Stress Pens Only  XF) ('PLPJXFR');
    PARAMETER(DB1.Pen_Company_Number);
    PARAMETER(DB1.Pen_Number);
    PARAMETER(LCL.Stress_Market_Type);

    //?Stress pen is now defined at the pen ext instead of ST1
    CASE;

    // IF LCL.Stress/Market Type is Stress
    IF LCL.Stress_Market_Type = 'S';

    // IF LCL.Net Head Usr is *Zeros
    IF LCL.Net_Head_Usr = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(Upd Head Condemned    RT) TYPE(RTVOBJ) FILE(PKDYCPP)           AB1227618;
    PARAMETER(DB1.BOH_Company_Number);
    PARAMETER(DB1.BOH_Buy_Order_Number);
    PARAMETER(DB1.BOL_Load_Number);
    PARAMETER(DB1.TH_Tattoo_Number);
    PARAMETER(DB1.TH_Kill_Date);
    PARAMETER(DB1.TD_Sequence_Number);
    PARAMETER(PAR.TH_Head_Condemned);
    {
     //?USER: Processing if Data record not found

     EXECUTE FUNCTION(Crt Tattoo Detail Ext  CR) TYPE(CRTOBJ) FILE(PKDYCPP)          AB1196901;
     PARAMETER(PAR.BOH_Company_Number);
     PARAMETER(PAR.BOH_Buy_Order_Number);
     PARAMETER(PAR.BOL_Load_Number);
     PARAMETER(PAR.TH_Tattoo_Number);
     PARAMETER(PAR.TH_Kill_Date);
     PARAMETER(PAR.TD_Sequence_Number);
     PARAMETER('N');
     PARAMETER(*ZERO);
     PARAMETER(PAR.TDE_Head_Condemned);
     PARAMETER(*ZERO);
     PARAMETER('N');
     PARAMETER('N');
     PARAMETER(PAR.RS_User_Changed);
     PARAMETER(PAR.RS_Date_Changed);
     PARAMETER(PAR.RS_Time_Changed);
     PARAMETER(PAR.RS_Record_Status);
     PARAMETER(PAR.RS_Job);
     PARAMETER(PAR.RS_Program);
     PARAMETER(PAR.RS_User_Added);
     PARAMETER(PAR.RS_Date_Added);
     PARAMETER(PAR.RS_Time_Added);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
      PARAMETER(DB1.RS_Record_Status);
      PARAMETER(DB1.RS_Job);
      PARAMETER(DB1.RS_Program);
      PARAMETER(DB1.RS_User_Added);
      PARAMETER(DB1.RS_Date_Added);
      PARAMETER(DB1.RS_Time_Added);
      {
       //?Execute internal function

       // PAR.RS Record Status = CND.Active
       PAR.RS_Record_Status = 'A';

       // PAR.RS User Added = JOB.*USER
       PAR.RS_User_Added = JOB.*USER;

       // PAR.RS Date Added = JOB.*Job date
       PAR.RS_Date_Added = JOB.*Job_date;

       // PAR.RS Time Added = JOB.*Job time
       PAR.RS_Time_Added = JOB.*Job_time;

       // PAR.RS Program = JOB.*PROGRAM
       PAR.RS_Program = JOB.*PROGRAM;

       // PAR.RS Job = JOB.*JOB
       PAR.RS_Job = JOB.*JOB;

      }

     }

     //?USER: Process Data record

     EXECUTE FUNCTION(Chg Head Condemned    CH) TYPE(CHGOBJ) FILE(PKDYCPP)           AB1227625;
     PARAMETER(DB1.BOH_Company_Number);
     PARAMETER(DB1.BOH_Buy_Order_Number);
     PARAMETER(DB1.BOL_Load_Number);
     PARAMETER(DB1.TH_Tattoo_Number);
     PARAMETER(DB1.TH_Kill_Date);
     PARAMETER(DB1.TD_Sequence_Number);
     PARAMETER(PAR.TDE_Head_Condemned);
    }

    QUIT;

    ENDIF;

   }

  }

 }

}


//?USER: Process command keys

CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

CASE;

// IF LCL.User Code Model USR is Procurement 2
IF LCL.User_Code_Model_USR = 'PORKPROC2';

// OR LCL.User Code Model USR is IS
OR LCL.User_Code_Model_USR = 'ISBGUTI';

// PAR.Status 1 = CND.Early
PAR.Status_1 = 'E';

RETURN;

ENDIF;

ENDIF;

//?USER: Exit program processing

CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

CASE;

// IF LCL.User Code Model USR is Procurement 2
IF LCL.User_Code_Model_USR = 'PORKPROC2';

// OR LCL.User Code Model USR is IS
OR LCL.User_Code_Model_USR = 'ISBGUTI';

// PAR.Status 1 = CND.Early
PAR.Status_1 = 'E';

RETURN;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Condmns Existance RT) TYPE(RTVOBJ) FILE(PKBSCPP)           AB1230757;
PARAMETER(CTL.LTN_Company_Number);
PARAMETER(CTL.LTN_Kill_Date);
PARAMETER(CTL.LTN_Shift);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.LT Type Code is Carcass Loss
 IF DB1.LT_Type_Code = 02;

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 ENDIF;

}


CASE;

// IF PAR.CE Data Exist is No
IF PAR.CE_Data_Exist = 'N';

CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// Send information message - 'Condemns entered for the Shift must be deleted.'
MESSAGE(PRK0926 *INFO);

// PAR.Status 1 = CND.Yes
PAR.Status_1 = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Status 1 = CND.No
PAR.Status_1 = 'N';

ENDIF;

// IF PAR.CE Data Exist is Yes
IF PAR.CE_Data_Exist = 'Y';

CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send information message - 'Condemns must be entered for the Shift.'
MESSAGE(PRK0927 *INFO);

// PAR.Status 1 = CND.Yes
PAR.Status_1 = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Status 1 = CND.No
PAR.Status_1 = 'N';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

