// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDT2DFR
// ?Date: 14.08.2025 Time: 03:29:58
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?Modification history
DO;

//?*****
//?07/20/2016 JBB E6458 - Correct Duplicate CB Comments on Aging Report
//?           Allow user to toggle between Bank and CB Invoice Number
//?*****
ENDDO;

//?07/20/2016 JBB E6458 - Default Toggle value to Bank
// LCL.Bank/CB Invoice Toggle = CND.Bank
LCL.Bank_CB_Invoice_Toggle = 'B';

//?USER: Initialize subfile control

// CTL.Accounting Company Number = PAR.Accounting Company Number
CTL.Company_Number = PAR.Company_Number;

// CTL.Bank Code = PAR.Bank Code
CTL.Bank_Code = PAR.Bank_Code;

// CTL.Invoice Number = PAR.Invoice Number
CTL.Invoice_Number = PAR.Invoice_Number;

// CTL.Invoice Suffix = PAR.Invoice Suffix
CTL.Invoice_Suffix = PAR.Invoice_Suffix;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Order for Invc    RT) TYPE(RTVOBJ) FILE(ARBDCPP)           AC1645464;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Invoice_Number);
PARAMETER(CTL.Order_Number_Ref);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?07/20/2016 JBB E6458 - Set column headeing text
//?Determine column heading for Bank or CB Invoice
CASE;

// IF LCL.Bank/CB Invoice Toggle is Bank
IF LCL.Bank_CB_Invoice_Toggle = 'B';

// CTL.Text 2 = CON.*BLANK
CTL.Text_2 = *BLANK;

// CTL.Text 7 Alpha Usr = CON.Bank
CTL.Text_7_Alpha_Usr = 'Bank';

//?Determine column heading for Bank or CB Invoice
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Text 2 = CON.CB
CTL.Text_2 = 'CB';

// CTL.Text 7 Alpha Usr = CON.Invoice
CTL.Text_7_Alpha_Usr = 'Invoice';

ENDIF;

//?USER: Initialize subfile record from DBF record

// RCD.USR Shortened name = DB1.Explanation
RCD.USR_Shortened_name = DB1.Explanation;

//?07/20/2016 JBB E6458 - Determine Bank or CB Invoice value
//?Determine column heading for Bank or CB Invoice
CASE;

// IF LCL.Bank/CB Invoice Toggle is Bank
IF LCL.Bank_CB_Invoice_Toggle = 'B';

// RCD.Text USR 7 = RCD.Bank Code
RCD.Text_USR_7 = RCD.Bank_Code;

//?Determine column heading for Bank or CB Invoice
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR Hold Description = CVTVAR(RCD.A/R Dtl UnUsed Date 3)
WRK.USR_Hold_Description = CVTVAR(RCD.A_R_Invoice_Number_CB);

// Execute function CLC Remove LeadZeros 30US.
EXECUTE FUNCTION(CLC Remove LeadZeros 30US) TYPE(EXCUSRSRC) ('OMNHUFR');
PARAMETER(WRK.USR_Hold_Description);
PARAMETER(WRK.USR_Description);
{
 E                    AR1        30  1               ARRAY 1
 E                    AR2        30  1               ARRAY 2
 C                     MOVEAWUCUNA    AR1              LOAD ARRAY
 C                     Z-ADD1         X       20       SET COUNTER
 C                     Z-ADD1         Y       20       SET COUNTER
 C                     MOVE 'N'       STOP    1        FLAG
 C           X         DOWLT31
 C           AR1,X     IFEQ '0'
 C           STOP      ANDEQ'N'
 C                     ADD  1         X
 C                     ELSE
 C                     MOVE AR1,X     AR2,Y
 C                     ADD  1         Y
 C                     ADD  1         X
 C                     MOVE 'Y'       STOP
 C                     END
 C                     END
 C                     MOVEAAR2       WUJNNA           LOAD OUTPUT
}


// RCD.Text USR 7 = WRK.USR Description
RCD.Text_USR_7 = WRK.USR_Description;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?F11 = Toggle Bank / CB Invoice
CASE;

// IF CTL.*CMD key is CF11
IF CTL.*CMD_key = '11';

//?If Bank, change to CB Invoice, ELSE change to Bank
CASE;

// IF LCL.Bank/CB Invoice Toggle is Bank
IF LCL.Bank_CB_Invoice_Toggle = 'B';

// LCL.Bank/CB Invoice Toggle = CND.CB Invoice
LCL.Bank_CB_Invoice_Toggle = 'I';

//?If Bank, change to CB Invoice, ELSE change to Bank
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Bank/CB Invoice Toggle = CND.Bank
LCL.Bank_CB_Invoice_Toggle = 'B';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

CASE;

// IF RCD.*SFLSEL is *Edit
IF RCD.*SFLSEL = '2'/'2';

// Call program Edt Explanation       E1.
CALL PROGRAM(Edt Explanation       E1) ('PONWE1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
PARAMETER(RCD.Sequence_Number);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

