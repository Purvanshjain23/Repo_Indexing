// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKW4PVR
// ?Date: 14.08.2025 Time: 02:53:12
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?H16853 ISE 11/05/2020-Recompiled due to change in Buy Order Number
EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

//?USER: Load screen

CASE;

// IF WRK.First Time Flag Usr EQ WRK.Blank USR
IF WRK.First_Time_Flag_Usr = WRK.Blank_USR;

// DTL.HRH Company Number = WRK.CC Company Number
DTL.HRH_Company_Number = WRK.CC_Company_Number;

// WRK.Display Print Prompt  Usr = CND.Prompt is to be displayed
WRK.Display_Print_Prompt_Usr = 'Y';

// WRK.First Time Flag Usr = CND.Yes
WRK.First_Time_Flag_Usr = 'Y';

// DTL.Type of Popltn Rpt    USR = CND.Head
DTL.Type_of_Popltn_Rpt_USR = 'H';

// DTL.Create Outfile USR = CND.No
DTL.Create_Outfile_USR = 'N';

ENDIF;

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(DTL.HRH_Company_Number);
PARAMETER(WRK.Oms_Name);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


// DTL.Oms Name = PAR.Oms Name
DTL.Oms_Name = PAR.Oms_Name;

//?USER: Validate fields

// DTL.SR Description = WRK.Blank USR
DTL.SR_Description = WRK.Blank_USR;

//?Select Cutout Matrix or Farm Site or Producer Location
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

//?Select Cutout Matrix Code/Effective Date
CASE;

// IF PGM.*Cursor field <IS> DTL.Cutout Matrix Code USR
IF PGM.*Cursor_field = DTL.Cutout_Matrix_Code_USR;

// OR PGM.*Cursor field <IS> DTL.Effective Month/Day USR
OR PGM.*Cursor_field = DTL.Effective_Month_Day_USR;

// Call program Sel Cutout Matrix     SR.
CALL PROGRAM(Sel Cutout Matrix     SR) ('PDAZSRR');
PARAMETER(DTL.HRH_Company_Number);
PARAMETER(DTL.Cutout_Matrix_Code_USR);
PARAMETER(DTL.Effective_Month_Day_USR);
PARAMETER(DTL.Description_30_USR);

ENDIF;

//?Select Farm Site
CASE;

// IF PGM.*Cursor field <IS> DTL.HRH Farm Site
IF PGM.*Cursor_field = DTL.HRH_Farm_Site;

// Call program Sel HPS Farm Site     UP.
CALL PROGRAM(Sel HPS Farm Site     UP) ('HP5003');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(DTL.HRH_Farm_Site);
PARAMETER(DTL.Farm_site_Name_f_HPS_USR);
PARAMETER(NLL.MTech_Farm_Site_Ref);

ENDIF;

//?Select producer location
CASE;

// IF PGM.*Cursor field <IS> DTL.HRH Prdcr Location Code
IF PGM.*Cursor_field = DTL.HRH_Prdcr_Location_Code;

// Call program Sel Producer Loc      SR.
CALL PROGRAM(Sel Producer Loc      SR) ('PKKMSRR');
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.HRH_Prdcr_Location_Code);

ENDIF;

ENDIF;

//?Validate Cutout Matrix
CASE;

// IF DTL.Cutout Matrix Code USR EQ WRK.Blank USR
IF DTL.Cutout_Matrix_Code_USR = WRK.Blank_USR;

// OR DTL.Effective Month/Day USR EQ WRK.Zero USR
OR DTL.Effective_Month_Day_USR = WRK.Zero_USR;

// Send error message - 'Cutout Matrix and Effective Mo/Dar are required.'
ERROR(PRK0628);
MSGPARM(DTL.Cutout_Matrix_Code_USR);
MSGPARM(DTL.Effective_Month_Day_USR);

//?Validate Cutout Matrix
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Val Cutout Matrix     XF.
CALL PROGRAM(Val Cutout Matrix     XF) ('PDLGXFR');
PARAMETER(DTL.HRH_Company_Number);
PARAMETER(DTL.Cutout_Matrix_Code_USR);
PARAMETER(DTL.Effective_Month_Day_USR);
PARAMETER(DTL.Description_30_USR);
PARAMETER(WRK.Record_Found_USR);

CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// Send error message - 'Cutout Matrix is invalid.'
ERROR(PRK0627);
MSGPARM(DTL.Cutout_Matrix_Code_USR);

ENDIF;

ENDIF;

//?Validate Farm Site
CASE;

// IF DTL.HRH Farm Site NE WRK.Zero USR
IF DTL.HRH_Farm_Site <> WRK.Zero_USR;

// DTL.Farm site Name f/ HPS USR = WRK.Blank USR
DTL.Farm_site_Name_f_HPS_USR = WRK.Blank_USR;

//?Validate Farm Site as being valid and a GrowFinish production phase
// Call program Val HPS Farm Site     UP.
CALL PROGRAM(Val HPS Farm Site     UP) ('HP256');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(DTL.HRH_Farm_Site);
PARAMETER(*BLANK);
PARAMETER(DTL.Farm_site_Name_f_HPS_USR);
PARAMETER(NLL.MTech_Farm_Site_Ref);

CASE;

// IF DTL.Farm site Name f/ HPS USR EQ WRK.Blank USR
IF DTL.Farm_site_Name_f_HPS_USR = WRK.Blank_USR;

// Send error message - 'Farm Site &1 invalid.'
ERROR(PRK0688);
MSGPARM(DTL.HRH_Farm_Site);

ENDIF;

ENDIF;

//?Outfile
CASE;

// IF DTL.Create Outfile USR is Yes
IF DTL.Create_Outfile_USR = 'Y';

CASE;

// IF DTL.Document Name USR EQ WRK.Blank USR
IF DTL.Document_Name_USR = WRK.Blank_USR;

// Send error message - 'Document Name required.'
ERROR(PRK0988);
MSGPARM(DTL.Document_Name_USR);

ENDIF;

ENDIF;

//?CALC: Screen function fields

EXECUTE FUNCTION(Producer Name         DRV) TYPE(DRVFLD)                        AB1100361;
PARAMETER(DTL.Producer_Name_DRV);
PARAMETER(DTL.PD_Producer_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.Producer_Name_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// DTL.SR Type Desc = Condition name of DTL.HRH Source Type
DTL.SR_Type_Desc = RTVCND(DTL.HRH_Source_Type);

// DTL.Payment type Desc Usr 16 = Condition name of DTL.HRH Payment Type
DTL.Payment_type_Desc_Usr_16 = RTVCND(DTL.HRH_Payment_Type);

// DTL.@Description 16 Usr = Condition name of DTL.Report Type Usr
DTL.@Description_16_Usr = RTVCND(DTL.Report_Type_Usr);

// DTL.Type of Dist Desc Usr = Condition name of DTL.HRH Type Of Distribution
DTL.Type_of_Dist_Desc_Usr = RTVCND(DTL.HRH_Type_Of_Distribution);

EXECUTE FUNCTION(Rtv Source Desc       RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1124642;
PARAMETER(DTL.SR_Source_Code);
PARAMETER(DTL.SR_Description);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Type of Popltn Desc   USR = Condition name of DTL.Type of Popltn Rpt    USR
DTL.Type_of_Popltn_Desc_USR = RTVCND(DTL.Type_of_Popltn_Rpt_USR);

EXECUTE FUNCTION(Pdctn Loc Name DRV) TYPE(DRVFLD)                               AB1100402;
PARAMETER(DTL.Pdctn_Loc_Name_DRV);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.HRH_Prdcr_Location_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PL_Location_Code);
 PARAMETER(PAR.Pdctn_Loc_Name_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Validate relations

CASE;

// IF DTL.PD Producer Code NE WRK.Blank USR
IF DTL.PD_Producer_Code <> WRK.Blank_USR;

CASE;

// IF DTL.HRH Tattoo Number NE WRK.Zero USR
IF DTL.HRH_Tattoo_Number <> WRK.Zero_USR;

// Send error message - 'Either Producer or Tattoo for this report'
ERROR(PRK0490);
MSGPARM(DTL.HRH_Payment_Type);
MSGPARM(DTL.HRH_Tattoo_Number);

ENDIF;

CASE;

// IF DTL.HRH Prdcr Location Code is Blank
IF DTL.HRH_Prdcr_Location_Code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Pdctn Loc Name DRV is Not Blank
IF DTL.Pdctn_Loc_Name_DRV <> *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Producer Location not found.'
ERROR(PRK0015);

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.HRH Prdcr Location Code is Blank
IF DTL.HRH_Prdcr_Location_Code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Producer Location not found.'
ERROR(PRK0015);

ENDIF;

ENDIF;

//?tattoo selection from and to dates must be the same
CASE;

// IF DTL.Report Type Usr is Tattoo
IF DTL.Report_Type_Usr = 'T';

CASE;

// IF DTL.Create Outfile USR is No
IF DTL.Create_Outfile_USR = 'N';

CASE;

// IF DTL.HRH Tattoo Number NE WRK.Zero USR
IF DTL.HRH_Tattoo_Number <> WRK.Zero_USR;

CASE;

// IF DTL.HRH From Kill Date NE DTL.HRH To Kill Date
IF DTL.HRH_From_Kill_Date <> DTL.HRH_To_Kill_Date;

// Send error message - 'From & To Kill date must be the same when selecting Tattoo processing'
ERROR(PRK0498);
MSGPARM(DTL.HRH_To_Kill_Date);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.HRH From Kill Date NE DTL.HRH To Kill Date
IF DTL.HRH_From_Kill_Date <> DTL.HRH_To_Kill_Date;

// Send error message - 'From & To Kill date must be the same when selecting Tattoo processing'
ERROR(PRK0498);
MSGPARM(DTL.HRH_To_Kill_Date);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?If tattoo selected check for exists, if one tattoo
CASE;

// IF DTL.Report Type Usr is Tattoo
IF DTL.Report_Type_Usr = 'T';

CASE;

// IF DTL.HRH Tattoo Number NE WRK.Zero USR
IF DTL.HRH_Tattoo_Number <> WRK.Zero_USR;

EXECUTE FUNCTION(Val Crcss Dtl/Tatto  RT) TYPE(RTVOBJ) FILE(PKB1CPP)            AB1160924;
PARAMETER(DTL.HRH_Company_Number);
PARAMETER(DTL.HRH_From_Kill_Date);
PARAMETER(DTL.HRH_Tattoo_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'No Carcass Detail Record'
ERROR(PRK0514);
MSGPARM(DTL.HRH_From_Kill_Date);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Crcss Dtl/Kildte   RT) TYPE(RTVOBJ) FILE(PKB1CPP)          AB1160926;
PARAMETER(DTL.HRH_Company_Number);
PARAMETER(DTL.HRH_From_Kill_Date);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = *BLANK;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'No Carcass Detail Record'
ERROR(PRK0514);
MSGPARM(DTL.HRH_From_Kill_Date);

ENDIF;

ENDIF;

//?If tattoo selected check for exists, if one tattoo
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.HRH Tattoo Number NE WRK.Zero USR
IF DTL.HRH_Tattoo_Number <> WRK.Zero_USR;

EXECUTE FUNCTION(Val Crcss Dtl/Tatto  RT) TYPE(RTVOBJ) FILE(PKB1CPP)            AB1160924;
PARAMETER(DTL.HRH_Company_Number);
PARAMETER(DTL.HRH_From_Kill_Date);
PARAMETER(DTL.HRH_Tattoo_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'No Carcass Detail Record'
ERROR(PRK0514);
MSGPARM(DTL.HRH_From_Kill_Date);

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF DTL.HRH Kill Shift is *ALL values
IF DTL.HRH_Kill_Shift = '1'/'2'/'3'/*BLANK;

// DTL.Condition Name 1 USR = Condition name of DTL.HRH Kill Shift
DTL.Condition_Name_1_USR = RTVCND(DTL.HRH_Kill_Shift);

ENDIF;

CASE;

// IF DTL.Report Type Usr is Farm Site
IF DTL.Report_Type_Usr = 'F';

// DTL.PD Producer Code = CND.SEABOA
DTL.PD_Producer_Code = 'SEABOA';

ENDIF;

//?USER: User defined action

CASE;

// IF DTL.Report Type Usr is Farm Site
IF DTL.Report_Type_Usr = 'F';

// DTL.PD Producer Code = CND.SEABOA
DTL.PD_Producer_Code = 'SEABOA';

ENDIF;

// Call program Pmt Print Options Size XF.
CALL PROGRAM(Pmt Print Options Size XF) ('PDV8PVR');
PARAMETER('Hog Population Report');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER('N');
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('P/S');
PARAMETER(2);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// WRK.Date Alpha USR = CVTVAR(DTL.HRH From Kill Date)
WRK.Date_Alpha_USR = CVTVAR(DTL.HRH_From_Kill_Date);

// WRK.Date Alpha Usr 2 = CVTVAR(DTL.HRH To Kill Date)
WRK.Date_Alpha_Usr_2 = CVTVAR(DTL.HRH_To_Kill_Date);

// WRK.Tattoo Nbr Alpha Usr = CVTVAR(DTL.HRH Tattoo Number)
WRK.Tattoo_Nbr_Alpha_Usr = CVTVAR(DTL.HRH_Tattoo_Number);

// WRK.Farm Site Alpha       USR = CVTVAR(DTL.HRH Farm Site)
WRK.Farm_Site_Alpha_USR = CVTVAR(DTL.HRH_Farm_Site);

// Execute command - 'SBM Prt Hog Population Primal Optimization'
EXECUTE COMMAND(PRK0987);
PARAMETER(DTL.Report_Type_Usr);
PARAMETER(DTL.HRH_Type_Of_Distribution);
PARAMETER(DTL.HRH_Company_Number);
PARAMETER(DTL.HRH_Source_Type);
PARAMETER(DTL.HRH_Payment_Type);
PARAMETER(DTL.SR_Source_Code);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(WRK.Tattoo_Nbr_Alpha_Usr);
PARAMETER(WRK.Date_Alpha_USR);
PARAMETER(WRK.Date_Alpha_Usr_2);
PARAMETER(WRK.Farm_Site_Alpha_USR);
PARAMETER(DTL.HRH_Kill_Shift);
PARAMETER(DTL.Type_of_Popltn_Rpt_USR);
PARAMETER(DTL.Oms_System_Value_Alpha);
PARAMETER(DTL.Cutout_Matrix_Code_USR);
PARAMETER(DTL.Effective_Month_Day_USR);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(DTL.HRH_Prdcr_Location_Code);
PARAMETER(DTL.Create_Outfile_USR);
PARAMETER(DTL.Document_Name_USR);

ENDIF;

