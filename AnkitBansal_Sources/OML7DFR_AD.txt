// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for OML7DFR
// ?Date: 14.08.2025 Time: 03:27:17
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?***** Change Log and comments
DO;

//?** 03/17/2022 RMC
//?** added new sales hist exp bucket value: REVADJ
//?*****
//?** 06/29/2009 LJB FP1314
//?** Allow new accrual type = SA - Sales Adjustment
//?** Option 5 is not allowed with SA accrual type
//?** Add Option 8 to display accrual code information
//?** Option 2 to Edit is not allowed with ISA accrual code
//?*****
//?EXPCOM - RMC 10/21/04 Remove company from the accrual master
//?*****
//?** 01/04/2007 LJB
//?** Add input parm to deny access to processing and make
//?** View Only, if the parm equals Y. Also, hide the options and
//?** disable the F6 to Create key.
//?*****
//?DLY029 - RMC 05/30/07 Remove opt 8=Edt Non Compatibles, added pgm
//?for option 5 if detail search is item str
//?*****
//?E4057 JJH 04/28/15 - Add EQ Selector for Accrural Rate Type
ENDDO;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// PAR.PRT Printer Device = CON.*BLANK
PAR.PRT_Printer_Device = *BLANK;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

//?USER: Initialize subfile control

CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// CTL.Record Status = CND.Active
CTL.Record_Status = 'A';

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

ENDIF;

// LCL.G/L Account Category = CTL.G/L Account Category
LCL.G_L_Account_Category = CTL.G_L_Account_Category;

//?USER: Initialize subfile record from DBF record

CASE;

// IF PAR.Access Limited Sts USR is yes
IF PAR.Access_Limited_Sts_USR = 'Y';

EXECUTE FUNCTION(Sel Accrual Type      IF) TYPE(EXCINTFUN)                      AC2025141;
PARAMETER(PGM.*Record_selected);
PARAMETER(RCD.Accrual_Type);
{
 //?Execute internal function

 EXECUTE FUNCTION(Val Accrual Type Exst RT) TYPE(RTVOBJ) FILE(PNHKREP)           AC2025142;
 PARAMETER(JOB.*USER);
 PARAMETER(PAR.Accrual_Type);
 PARAMETER(LCL.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 CASE;

 // IF LCL.Record Found USR is Record Not Found
 IF LCL.Record_Found_USR = 'N';

 // PAR.*Record selected = CND.*NO
 PAR.*Record_selected = 'N';

 ENDIF;

}


ENDIF;

EXECUTE FUNCTION(Rtv Accr Prog EXT     RT) TYPE(RTVOBJ) FILE(PBAMREP)           AC2048357;
PARAMETER(RCD.Accrual_Code);
PARAMETER(RCD.G_L_Account_Category);
PARAMETER(NLL.APE_Excl_Collect_ShpMthd);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?SEL: Account Category
CASE;

// IF CTL.G/L Account Category is Entered
IF CTL.G_L_Account_Category <> *BLANK;

CASE;

// IF RCD.G/L Account Category NE CTL.G/L Account Category
IF RCD.G_L_Account_Category <> CTL.G_L_Account_Category;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?CHG: Account Category
CASE;

// IF CTL.G/L Account Category NE LCL.G/L Account Category
IF CTL.G_L_Account_Category <> LCL.G_L_Account_Category;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?SEL:  Account Category
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.G/L Account Category
IF PGM.*Cursor_field = CTL.G_L_Account_Category;

// Call program Sel G/L Acct Catgry   SR.
CALL PROGRAM(Sel G/L Acct Catgry   SR) ('PLRSSRR');
PARAMETER(CTL.G_L_Account_Category);

ENDIF;

ENDIF;

//?F6=Accrual code create processing
CASE;

// IF CTL.*CMD key is *Create
IF CTL.*CMD_key = '06';

CASE;

// IF PAR.Access Limited Sts USR is yes
IF PAR.Access_Limited_Sts_USR = 'Y';

// Send error message - 'Function not allowed.'
ERROR(USR1833);

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Accrual Code = CON.*BLANK
CTL.Accrual_Code = *BLANK;

// Call program EDT Accrual Program   E1.
CALL PROGRAM(EDT Accrual Program   E1) ('OML6E1R');
PARAMETER(CTL.Accrual_Code);
PARAMETER(PAR.Allow_Multi_Company);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

// PAR.Accrual Code = CTL.Accrual Code
PAR.Accrual_Code = CTL.Accrual_Code;

//?F21=Process Print request
CASE;

// IF CTL.*CMD key is *Print 21
IF CTL.*CMD_key = '21';

// Call program PMT&Pass Acrl Mstr Prt UP.
CALL PROGRAM(PMT&Pass Acrl Mstr Prt UP) ('PDBHUPR');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('O/M');
PARAMETER('PDBXCLP');
PARAMETER(CTL.Automatic_Accrual_Y_N);
PARAMETER(CTL.Add_on_Allowance);
PARAMETER(CTL.Record_Status);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER('Print Accrual Codes');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);

//?Printed Message
CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print List has been submitted'
MESSAGE(USR1742 *INFO);

ENDIF;

ENDIF;

//?F22=Process Print Dependencies request
CASE;

// IF CTL.*CMD key is *Print Dependencies
IF CTL.*CMD_key = '22';

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Print Accrual Dependency');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);
PARAMETER(*MISSING);
PARAMETER(1);

// PAR.System Value Numeric = PAR.PRT Number of Copies
PAR.System_Value_Numeric = PAR.PRT_Number_of_Copies;

// Call program Prt Pass Acrl UsagePrt UP.
SBMJOB;
CALL PROGRAM(Prt Pass Acrl UsagePrt UP) ('PDYZCLP');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(CTL.Accrual_Code);
PARAMETER(CTL.Record_Status);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.System_Value_Numeric);
SBMJOBOVR JOB(ACCRLDEPS);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

//?Printed Message
CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'The report has been submitted.'
MESSAGE(USR2720 *INFO);

ENDIF;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?USER: Process subfile record (Pre-confirm)

//?2= Edit - Process change accrual code request
CASE;

// IF RCD.*SFLSEL is *Change
IF RCD.*SFLSEL = '2';

//?** Don't allow editing of ISA accrual code     FP1314
CASE;

// IF RCD.Accrual Code is Inter-Co Sales Accrual
IF RCD.Accrual_Code = 'ISA';

// OR PAR.Access Limited Sts USR is yes
OR PAR.Access_Limited_Sts_USR = 'Y';

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

//?** Don't allow editing of ISA accrual code     FP1314
// IF *OTHERWISE
IF *OTHERWISE;

// Call program EDT Accrual Program   E1.
CALL PROGRAM(EDT Accrual Program   E1) ('OML6E1R');
PARAMETER(RCD.Accrual_Code);
PARAMETER(PAR.Allow_Multi_Company);

ENDIF;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?4=Validate delete request
CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4';

CASE;

// IF PAR.Access Limited Sts USR is yes
IF PAR.Access_Limited_Sts_USR = 'Y';

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

//?VAL: Delete
CASE;

// IF RCD.Rate Usage is Customer Accrual
IF RCD.Rate_Usage = 'C';

//?RMC 08/01/07 val usage. dont allow if used on a customer
EXECUTE FUNCTION(Rtv Chk Accl Used     RT) TYPE(RTVOBJ) FILE(OMHOREP)           AC1839161;
PARAMETER(RCD.Accrual_Code);
PARAMETER(LCL.Status_Y_or_N);
{
 //?USER: Processing if Data record not found

 // PAR.Status - Y or N = CND.no
 PAR.Status_Y_or_N = 'N';

 //?USER: Process Data record

 // PAR.Status - Y or N = CND.yes
 PAR.Status_Y_or_N = 'Y';

 QUIT;

}


//?ERROR: Accrual Code attached to Customer Accrual
CASE;

// IF LCL.Status - Y or N is yes
IF LCL.Status_Y_or_N = 'Y';

// Send error message - 'Accrual code &1 exists on customers. Cannot delete.'
ERROR(USR3768);
MSGPARM(RCD.Accrual_Code);

//?ERROR: Accrual Code attached to Customer Accrual
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

// RCD.Record Status = CND.Deleted
RCD.Record_Status = 'D';

ENDIF;

//?VAL: Delete
// IF RCD.Rate Usage is Accrual Program
IF RCD.Rate_Usage = 'P';

EXECUTE FUNCTION(Val Accrual Code Exst RT) TYPE(RTVOBJ) FILE(OMHRCPP)           AC1891577;
PARAMETER(RCD.Accrual_Code);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


//?ERROR: Accrual Code attached to Product Program
CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// Send error message - 'Accrual code &1 exists on Product Programs. Cannot delete.'
ERROR(USR4227);
MSGPARM(RCD.Accrual_Code);

//?ERROR: Accrual Code attached to Product Program
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

// RCD.Record Status = CND.Deleted
RCD.Record_Status = 'D';

ENDIF;

//?VAL: Delete
// IF RCD.Rate Usage is Order
IF RCD.Rate_Usage = 'O';

EXECUTE FUNCTION(VAl ACode Exists      RT) TYPE(RTVOBJ) FILE(OMHQCPP)           AC1964258;
PARAMETER(RCD.Accrual_Code);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


//?ERROR: Accrual Code attached to Sales Order
CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// Send error message - 'Accrual code &1 exists on orders. Cannot delete.'
ERROR(USR4226);
MSGPARM(RCD.Accrual_Code);

//?ERROR: Accrual Code attached to Sales Order
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

// RCD.Record Status = CND.Deleted
RCD.Record_Status = 'D';

ENDIF;

EXECUTE FUNCTION(Val Rate Exists       RT) TYPE(RTVOBJ) FILE(PNFVREP)           AC1965605;
PARAMETER(RCD.Accrual_Code);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


//?ERROR: Accrual Code attached to Accrual Program Rate
CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// Send error message - 'Accrual code &1 exists on Program Rates. Cannot delete.'
ERROR(USR4239);
MSGPARM(RCD.Accrual_Code);

//?ERROR: Accrual Code attached to Accrual Program Rate
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

// RCD.Record Status = CND.Deleted
RCD.Record_Status = 'D';

ENDIF;

//?VAL: Delete
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

ENDIF;

//?5=Edit Detail by item or structure
CASE;

// IF RCD.*SFLSEL is Option 5
IF RCD.*SFLSEL = '5'/'5';

CASE;

// IF RCD.All Products (Y/N) is Yes
IF RCD.All_Products_Y_N = 'Y';

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

//?Edit Detail
CASE;

// IF RCD.Accrual Type is Customer Accrual
IF RCD.Accrual_Type = 'BG'/'CM'/'CR'/'DA'/'IF'/'PR'/'TX'/'TF'/'CC'/'FA'/'SF'/'WF'/'CF'             +
/'LF';

EXECUTE FUNCTION(Val Rate Exist f/Code RT) TYPE(RTVOBJ) FILE(PPAJREP)           AC1711535;
PARAMETER(RCD.Accrual_Code);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


//?Call correct dtl pgm
CASE;

// IF WRK.Record Found USR is Record Found
IF WRK.Record_Found_USR = 'Y';

// Send error message - 'Option is not allowed. Customer Accrual Ranges exist.'
ERROR(USR3398);
MSGPARM(RCD.*SFLSEL);

//?Call correct dtl pgm
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.Accrual Detail Search is Item
IF RCD.Accrual_Detail_Search = 'I';

// Call program Edt Cust Program Item EF.
CALL PROGRAM(Edt Cust Program Item EF) ('PPD7EFR');
PARAMETER(RCD.Accrual_Code);
PARAMETER(RCD.Accrual_Type);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// IF RCD.Accrual Detail Search is Item Structure
IF RCD.Accrual_Detail_Search = 'S';

// Call program Edt Accrual Cd Dt Str EF.
CALL PROGRAM(Edt Accrual Cd Dt Str EF) ('PMHMEFR');
PARAMETER(RCD.Accrual_Code);
PARAMETER(RCD.Accrual_Type);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// IF RCD.Accrual Detail Search is Program Rate
IF RCD.Accrual_Detail_Search = 'P';

// Call program Edt Accrl Pgm Rate    EF.
CALL PROGRAM(Edt Accrl Pgm Rate    EF) ('PNNNEFR');
PARAMETER(RCD.Accrual_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?Edit Detail
// IF RCD.Accrual Type is Product Accrual
IF RCD.Accrual_Type = 'PC'/'PF'/'PD';

//?Work With Product Accrual
// Call program WW Product Programs   DF.
CALL PROGRAM(WW Product Programs   DF) ('PMWTDFR');
PARAMETER(RCD.Accrual_Code);
PARAMETER(RCD.Accrual_Description);
PARAMETER(RCD.Accrual_Type);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

//?Edit Detail
// IF RCD.Accrual Type is Sales Adjustment
IF RCD.Accrual_Type = 'SA';

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

ENDIF;

//?7=Process dsp usage
CASE;

// IF RCD.*SFLSEL is Option 7
IF RCD.*SFLSEL = '7'/'7';

// Call program WW Accrual Code Usage DF.
CALL PROGRAM(WW Accrual Code Usage DF) ('PPD8DFR');
PARAMETER(RCD.Accrual_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?8=Display Accrual
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

// Call program DSP Accrual Program   D1.
CALL PROGRAM(DSP Accrual Program   D1) ('PNKSD1R');
PARAMETER(RCD.Accrual_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?USER: Process subfile record (Post-confirm)

//?Process Delete/Undelete accrual code request
CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4';

EXECUTE FUNCTION(CHG OM Accrual Code Ma CH) TYPE(CHGOBJ) FILE(OMHLREP)          AC1221696;
PARAMETER(RCD.Accrual_Code);
PARAMETER(RCD.Accrual_Description);
PARAMETER(RCD.Automatic_Accrual_Y_N);
PARAMETER(RCD.Print_On_Invoice_Y_N);
PARAMETER(RCD.Rate_Usage);
PARAMETER(RCD.Add_on_Allowance);
PARAMETER(RCD.Accrual_Type);
PARAMETER(RCD.Sub_Ledger_Code);
PARAMETER(RCD.Reverse_Accrual_Code);
PARAMETER(RCD.UOM_Primary_Dft);
PARAMETER(RCD.G_L_Code_Dr);
PARAMETER(RCD.G_L_Code_Cr);
PARAMETER(RCD.G_L_Sub_Account_Code);
PARAMETER(RCD.Sales_History_Exp_Bucket);
PARAMETER(RCD.Post_to_G_L_Y_N);
PARAMETER(RCD.All_Products_Y_N);
PARAMETER(RCD.Accrual_Rate);
PARAMETER(RCD.Accrual_Rate_Type);
PARAMETER(RCD.Accrual_Detail_Search);
PARAMETER(RCD.Standard_Schedule_Y_N);
PARAMETER(RCD.Affect_Sales_Realz_Rpt);
PARAMETER(RCD.Affect_Invoice_Price);
PARAMETER(RCD.Invoice_Print_Type);
PARAMETER(RCD.Max_Accrual_Amount);
PARAMETER(RCD.Max_Accrual_Amount_Type);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER('D');
PARAMETER(RCD.G_L_Account_Category);
PARAMETER(LCL.APE_Excl_Collect_ShpMthd);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?USER: Processing after Data update

 EXECUTE FUNCTION(Upd Accr Prog EXT     RT) TYPE(RTVOBJ) FILE(PBAMREP)           AC2048410;
 PARAMETER(DB1.Accrual_Code);
 PARAMETER(PAR.G_L_Account_Category);
 PARAMETER(PAR.APE_Excl_Collect_ShpMthd);
 PARAMETER(PAR.Record_Status);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt Accr Prog EXT     CR) TYPE(CRTOBJ) FILE(PBAMREP)           AC2048281;
  PARAMETER(PAR.Accrual_Code);
  PARAMETER(PAR.G_L_Account_Category);
  PARAMETER(PAR.APE_Excl_Collect_ShpMthd);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Create_Date);
  PARAMETER(PAR.Create_Time);
  PARAMETER(PAR.Create_User);
  PARAMETER(PAR.Create_Program);
  PARAMETER(PAR.Change_Date);
  PARAMETER(PAR.Change_Time);
  PARAMETER(PAR.Change_User);
  PARAMETER(PAR.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    //?*** Set RECORD STATUS field. ***
    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    //?*** Set CREATE fields. ***
    // PAR.Create Date = JOB.*Job date
    PAR.Create_Date = JOB.*Job_date;

    // PAR.Create Time = JOB.*Job time
    PAR.Create_Time = JOB.*Job_time;

    // PAR.Create User = JOB.*USER
    PAR.Create_User = JOB.*USER;

    // PAR.Create Program = JOB.*PROGRAM
    PAR.Create_Program = JOB.*PROGRAM;

    //?*** Set CHANGE fields. ***
    // PAR.Change Date = CON.*ZERO
    PAR.Change_Date = *ZERO;

    // PAR.Change Time = CON.*ZERO
    PAR.Change_Time = *ZERO;

    // PAR.Change User = CON.*BLANK
    PAR.Change_User = *BLANK;

    // PAR.Change Program = CON.*BLANK
    PAR.Change_Program = *BLANK;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Accr Prog EXT     CH) TYPE(CHGOBJ) FILE(PBAMREP)           AC2048282;
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(PAR.G_L_Account_Category);
  PARAMETER(PAR.APE_Excl_Collect_ShpMthd);
  PARAMETER(PAR.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

 }

}


ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

