// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDMYEFR
// ?Date: 14.08.2025 Time: 03:28:48
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PAR.Application Code = CND.Order Management System
PAR.Application_Code = 'OMS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(WRK.Company_Number);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.USR Case Quantity = CND.EQ *ZERO
PAR.USR_Case_Quantity = *ZERO;

// PAR.USR Case Weight = CND.EQ *ZERO
PAR.USR_Case_Weight = *ZERO;

// PAR.USR Display field = CND.yes
PAR.USR_Display_field = 'Y';

// PAR.USR Display 1 = CND.Yes
PAR.USR_Display_1 = 'Y';

// PAR.USR Display 2 = CND.Yes
PAR.USR_Display_2 = 'Y';

// LCL.RFS Volume Corr Mthd  USR = CND.API Volume Corr Table
LCL.RFS_Volume_Corr_Mthd_USR = 'A';

//?USER: Initialize subfile header

// CTL.Customer Purchase Order # = PAR.Customer Purchase Order #
CTL.Customer_Purchase_Order_# = PAR.Customer_Purchase_Order_#;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.Quantity Allocated = PAR.Quantity Allocated
CTL.Quantity_Scheduled = PAR.Quantity_Scheduled;

// CTL.Weight Allocated = PAR.Weight Allocated
CTL.Weight_Scheduled = PAR.Weight_Scheduled;

EXECUTE FUNCTION(RTV Manifest detail    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1309792;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);
PARAMETER(CTL.U_M_Ordered);
PARAMETER(WRK.Catch_Weight_Status);
PARAMETER(PAR.Production_Date_Control);
PARAMETER(CTL.Quantity_Scheduled);
PARAMETER(CTL.Weight_Scheduled);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?WI464
EXECUTE FUNCTION(Rtv Pallet Type 2     RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2196042;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(LCL.OD_Pallet_Type);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// Call program RTV for Ord.Detail     XF.
CALL PROGRAM(RTV for Ord.Detail     XF) ('PDC3XFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.USR_Item_Type_Description);
PARAMETER(WRK.Description_Line_Two);
PARAMETER(WRK.UOM_Primary);
PARAMETER(WRK.UOM_Pricing);
PARAMETER(PAR.Unit_Weight);
PARAMETER(WRK.Item_Level);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(PAR.Catch_Weight_Status);
PARAMETER(WRK.Item_Structure_Class_Code);
PARAMETER(WRK.Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(WRK.Default_Commod_Mark_basis);
PARAMETER(WRK.Transportation_Temp);
PARAMETER(WRK.Item_Type_Code);
PARAMETER(WRK.Commodity_Price_Group);
PARAMETER(WRK.Default_Warehouse);
PARAMETER(WRK.Price_Method_Default);
PARAMETER(CTL.Chilling_Time_USR);
PARAMETER(WRK.Variety_Rendered_Cut);
PARAMETER(WRK.Item_Target_Price);
PARAMETER(WRK.Error_Status);

//?If CW sts not found for item, use what's on order
CASE;

// IF PAR.Catch Weight Status EQ WRK.BLANK
IF PAR.Catch_Weight_Status = WRK.BLANK;

// PAR.Catch Weight Status = WRK.Catch Weight Status
PAR.Catch_Weight_Status = WRK.Catch_Weight_Status;

ENDIF;

// WRK.Case Sequence Number = CND.Zero
WRK.Case_Sequence_Number = *ZERO;

EXECUTE FUNCTION(RTV Next Key           RT) TYPE(RTVOBJ) FILE(OMFNCPP)          AC1310085;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);
PARAMETER(WRK.Case_Sequence_Number);
{
 //?USER: Processing if Data record not found

 // PAR.Case Sequence Number = CON.1
 PAR.Case_Sequence_Number = 1;

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 QUIT;

 //?USER: Process Data record

 CASE;

 // IF PAR.Company Number EQ DB1.Company Number
 IF PAR.Company_Number = DB1.Company_Number;

 // AND PAR.Order Number EQ DB1.Order Number
 AND PAR.Order_Number = DB1.Order_Number;

 // AND PAR.Order Sequence Number EQ DB1.Order Sequence Number
 AND PAR.Order_Sequence_Number = DB1.Order_Sequence_Number;

 // AND PAR.Order Secondary Line Seq EQ DB1.Order Secondary Line Seq
 AND PAR.Order_Secondary_Line_Seq = DB1.Order_Secondary_Line_Seq;

 // PAR.Case Sequence Number = DB1.Case Sequence Number
 PAR.Case_Sequence_Number = DB1.Case_Sequence_Number;

 // IF *OTHERWISE
 IF *OTHERWISE;

 QUIT;

 ENDIF;

 //?USER: Exit processing

 // PAR.Case Sequence Number = CON.1 + PAR.Case Sequence Number
 PAR.Case_Sequence_Number = 1 + PAR.Case_Sequence_Number;

}


// PAR.USR Update Flag = CND.No
PAR.USR_Update_Flag = *BLANK;

//?If production date control is no then do not display label date
CASE;

// IF PAR.Production Date Control is no
IF PAR.Production_Date_Control = 'N';

// PAR.USR Display 2 = CND.No
PAR.USR_Display_2 = 'N';

ENDIF;

// CTL.Ship To Customer = PAR.Ship To Customer
CTL.Ship_To_Customer = PAR.Ship_To_Customer;

// CTL.Ship To Name = PAR.Ship To Name
CTL.Ship_To_Name = PAR.Ship_To_Name;

//?FP1110 HPB modifications - RMC 11/07/7
// CTL.COA Batch Number = PAR.HPB COA Batch Number
CTL.COA_Batch_Number = PAR.HPB_COA_Batch_Number;

EXECUTE FUNCTION(RTV Prod Temp-HPB     RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1877050;
PARAMETER(PAR.Load_ID);
PARAMETER(LCL.Product_Temperature);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.COA Temperature Loadout = LCL.Product Temperature
LCL.COA_Temperature_Loadout = LCL.Product_Temperature;

EXECUTE FUNCTION(Rtv HPB fields        RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1855470;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.Production_Warehouse_Code);
PARAMETER(LCL.Warehouse_Location);
PARAMETER(CTL.WHS_Req_Meter_Reading_Shp);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?FP1322 chk for an open tank per prod whse on the order's whse
EXECUTE FUNCTION(Rtv Acct Co          RT) TYPE(RTVOBJ) FILE(CAADREP)            AC1802492;
PARAMETER(LCL.Production_Warehouse_Code);
PARAMETER(LCL.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Get Batch Dens,Ld RT) TYPE(RTVOBJ) FILE(PMCCCPP)           AC1901194;
PARAMETER(LCL.Accounting_Company);
PARAMETER(CTL.COA_Batch_Number);
PARAMETER(LCL.COA_Density_Loadout);
PARAMETER(LCL.COA_Density_Reference);
PARAMETER(LCL.COA_Temperature_Ref);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 EXECUTE FUNCTION(RTV Temp Reference    RT) TYPE(RTVOBJ) FILE(PMCAREP)           AC1876036;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.COA_Bio_diesel_Fuel_Code);
 PARAMETER(PAR.COA_Temperature_Ref);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 QUIT;

}


//?USER: Initialize subfile record (existing record)

// WRK.Case Sequence Number = DB1.Case Sequence Number
WRK.Case_Sequence_Number = DB1.Case_Sequence_Number;

// RCD.Case Sequence Number = WRK.Case Sequence Number
RCD.Case_Sequence_Number = WRK.Case_Sequence_Number;

//?FP1110
// RCD.HPB Meter Start Gallon = DB1.HPB Meter Start Gallon
RCD.HPB_Meter_Start_Gallon = DB1.HPB_Meter_Start_Gallon;

// RCD.HPB Meter Ending Gallon = DB1.HPB Meter Ending Gallon
RCD.HPB_Meter_Ending_Gallon = DB1.HPB_Meter_Ending_Gallon;

//?USER: Initialize subfile record (new record)

// WRK.Case Sequence Number = WRK.Case Sequence Number + CON.1
WRK.Case_Sequence_Number = WRK.Case_Sequence_Number + 1;

// RCD.Case Sequence Number = WRK.Case Sequence Number
RCD.Case_Sequence_Number = WRK.Case_Sequence_Number;

//?USER: Validate subfile control

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

CASE;

// IF PAR.USR Display 1 is No
IF PAR.USR_Display_1 = 'N';

// PAR.USR Display 1 = CND.Yes
PAR.USR_Display_1 = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Display 1 = CND.No
PAR.USR_Display_1 = 'N';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Validate subfile record fields

//?Select Production Date
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> RCD.Production Date
AND PGM.*Cursor_field = RCD.Production_Date;

// Call program Sel Prod Date-Manifest SR.
CALL PROGRAM(Sel Prod Date-Manifest SR) ('PDZESRR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Label_Date);

ENDIF;

//?Delete Manifest Record
CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?Compute standard weight for non-catchweight items
CASE;

// IF PAR.Catch Weight Status is Not Yes
IF PAR.Catch_Weight_Status = *BLANK/'N';

// RCD.Case Weight = RCD.Case Quantity * PAR.Unit Weight *
RCD.Case_Weight = RCD.Case_Quantity * PAR.Unit_Weight;

ENDIF;

//?If Y is entered for USR edit for Quantity & Weight
CASE;

// IF RCD.USR Zero Value is Yes
IF RCD.USR_Zero_Value = 'Y';

CASE;

// IF RCD.Case Quantity is NE *ZERO
IF RCD.Case_Quantity <> *ZERO;

// OR RCD.Case Weight is NE *ZERO
OR RCD.Case_Weight <> *ZERO;

// Send error message - 'Quantity and Weight must be Zero if Zero flag is Y.'
ERROR(USR1588);
MSGPARM(RCD.USR_Case_Quantity);
MSGPARM(RCD.USR_Case_Weight);

ENDIF;

ENDIF;

//?IF " " Entered for Zero Quantity flag
CASE;

// IF RCD.USR Zero Value is No
IF RCD.USR_Zero_Value = *BLANK;

CASE;

// IF RCD.Case Quantity is EQ *ZERO
IF RCD.Case_Quantity = *ZERO;

// OR RCD.Case Weight is EQ *ZERO
OR RCD.Case_Weight = *ZERO;

// Send error message - 'Quantity and Weight are required.'
ERROR(USR1325);
MSGPARM(RCD.Case_Quantity);
MSGPARM(RCD.Case_Weight);

ENDIF;

ENDIF;

//?Production Date
CASE;

// IF PAR.Production Date Control is yes
IF PAR.Production_Date_Control = 'Y';

// AND RCD.Production Date is not entered
AND RCD.Production_Date = *ZERO;

// AND RCD.USR Zero Value is No
AND RCD.USR_Zero_Value = *BLANK;

// Send error message - 'Production date must be entered for a production date controlled item.'
ERROR(USR1916);
MSGPARM(RCD.Production_Date);

//?Production Date
// IF *OTHERWISE
IF *OTHERWISE;

//?Production Date must be <= current date
CASE;

// IF RCD.Production Date GT JOB.*Job date
IF RCD.Production_Date > JOB.*Job_date;

// Send error message - 'Date must be less than or equal to the current date.'
ERROR(USR3001);
MSGPARM(RCD.Production_Date);

//?Production Date must be <= current date
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Label Date = RCD.Production Date
RCD.Label_Date = RCD.Production_Date;

ENDIF;

ENDIF;

//?Label Date edit
CASE;

// IF PAR.Production Date Control is yes
IF PAR.Production_Date_Control = 'Y';

// AND RCD.USR Zero Value is No
AND RCD.USR_Zero_Value = *BLANK;

EXECUTE FUNCTION(RTV Label Date         RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1479448;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(WRK.Label_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Info Message if entered a different label date
CASE;

// IF RCD.Label Date NE WRK.Label Date
IF RCD.Label_Date <> WRK.Label_Date;

// AND RCD.Label Date NE WRK.ZERO
AND RCD.Label_Date <> WRK.ZERO;

// Send information message - 'Label Date has been corrected for Date &1'
MESSAGE(USR2536 *INFO);
MSGPARM(RCD.Production_Date);

ENDIF;

// RCD.Label Date = WRK.Label Date
RCD.Label_Date = WRK.Label_Date;

ENDIF;

//?Label Date must be >= Prod Date
CASE;

// IF RCD.Label Date LT RCD.Production Date
IF RCD.Label_Date < RCD.Production_Date;

// Send error message - 'Label Date cannot be less than Production Date.'
ERROR(USR2537);
MSGPARM(RCD.Label_Date);

ENDIF;

ENDIF;

//?FP1110 HPB project - new validation for meter readings, weight calc
CASE;

// IF CTL.WHS Req Meter Reading Shp is Yes
IF CTL.WHS_Req_Meter_Reading_Shp = 'Y';

// RCD.HPB COA Batch Number = CTL.COA Batch Number
RCD.HPB_COA_Batch_Number = CTL.COA_Batch_Number;

//?Calc HPB Net Gallons
CASE;

// IF RCD.HPB Meter Start Gallon GT RCD.HPB Meter Ending Gallon
IF RCD.HPB_Meter_Start_Gallon > RCD.HPB_Meter_Ending_Gallon;

// Send error message - 'Meter Start Gallons cant be greater than the Meter Ending Gallons.'
ERROR(USR3843);
MSGPARM(RCD.HPB_Meter_Start_Gallon);
MSGPARM(RCD.HPB_Meter_Ending_Gallon);

//?Calc HPB Net Gallons
// IF *OTHERWISE
IF *OTHERWISE;

//?Calc Total Gross Gallon for manifest detail
CASE;

// IF RCD.Case Quantity is EQ *ZERO
IF RCD.Case_Quantity = *ZERO;

// RCD.Case Quantity = RCD.HPB Meter Ending Gallon - RCD.HPB Meter Start Gallon
RCD.Case_Quantity = RCD.HPB_Meter_Ending_Gallon - RCD.HPB_Meter_Start_Gallon;

//?add 1 to make it inclusive
// RCD.Case Quantity = RCD.Case Quantity + CON.1
RCD.Case_Quantity = RCD.Case_Quantity + 1;

// RCD.HPB Meter Total Gallon = RCD.Case Quantity
RCD.HPB_Meter_Total_Gallon = RCD.Case_Quantity;

//?Calc Total Gross Gallon for manifest detail
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.HPB Meter Total Gallon = RCD.HPB Meter Ending Gallon - RCD.HPB Meter Start Gallon
RCD.HPB_Meter_Total_Gallon = RCD.HPB_Meter_Ending_Gallon - RCD.HPB_Meter_Start_Gallon;

// RCD.HPB Meter Total Gallon = RCD.HPB Meter Total Gallon + CON.1
RCD.HPB_Meter_Total_Gallon = RCD.HPB_Meter_Total_Gallon + 1;

CASE;

// IF RCD.Case Quantity NE RCD.HPB Meter Total Gallon
IF RCD.Case_Quantity <> RCD.HPB_Meter_Total_Gallon;

// Send error message - 'Quantity and Total gallons must equal. Enter -0- for qty to default.'
ERROR(USR3844);
MSGPARM(RCD.Case_Quantity);

ENDIF;

ENDIF;

//?RMC -- Round Net Gallons to a whole number per Tom 4/23/08
//?Calc Factor or Use API Table - 7/14/10
CASE;

// IF LCL.RFS Volume Corr Mthd  USR is Calculate factor per Prop
IF LCL.RFS_Volume_Corr_Mthd_USR = 'C';

//?New formula - after 6/27/10 -  goes in with RFS2/EMTS    P000579
// WRK.COA Temp Conv Factor 1 = CON.-.00045767
WRK.COA_Temp_Conv_Factor_1 = -.00045767;

// WRK.COA Temp Conv Factor 2 = CON.1.02746025
WRK.COA_Temp_Conv_Factor_2 = 1.02746025;

// Compute: rcd.Net gallons
WRK.Quantity_7_0_USR = RCD.HPB_Meter_Total_Gallon * ( ( WRK.COA_Temp_Conv_Factor_1                 +
* LCL.COA_Temperature_Loadout ) + WRK.COA_Temp_Conv_Factor_2 ) 'H';

// Compute: density ref NEW
WRK.COA_Density_Ref_Adj_4_dec = ( ( WRK.COA_Temp_Conv_Factor_1                                     +
* LCL.COA_Temperature_Loadout ) + WRK.COA_Temp_Conv_Factor_2 ) * LCL.COA_Density_Loadout;

//?Calc Factor or Use API Table - 7/14/10
// IF LCL.RFS Volume Corr Mthd  USR is API Volume Corr Table
IF LCL.RFS_Volume_Corr_Mthd_USR = 'A';

// LCL.RFS Loadout Temperature = LCL.COA Temperature Loadout
LCL.RFS_Loadout_Temperature = LCL.COA_Temperature_Loadout;

EXECUTE FUNCTION(Rtv API Vol Cor Fctor RT) TYPE(RTVOBJ) FILE(PNGJREP)           AC1999417;
PARAMETER(30);
PARAMETER(LCL.RFS_Loadout_Temperature);
PARAMETER(LCL.RFS_API_Vol_Corr_Factor);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.HPB Temperature Adjustmnt = LCL.RFS API Vol Corr Factor
WRK.HPB_Temperature_Adjustmnt = LCL.RFS_API_Vol_Corr_Factor;

// Compute: rcd.Net gallons
WRK.Quantity_7_0_USR = RCD.HPB_Meter_Total_Gallon * WRK.HPB_Temperature_Adjustmnt 'H';

// Compute: density ref NEW
WRK.COA_Density_Ref_Adj_4_dec = WRK.HPB_Temperature_Adjustmnt * LCL.COA_Density_Loadout            +
'H';

ENDIF;

// RCD.HPB Meter Net Gallon = WRK.Quantity 7.0 USR
RCD.HPB_Meter_Net_Gallon = WRK.Quantity_7_0_USR;

// RCD.HPB Density Ref Gravity = WRK.COA Density Ref Adj 4 dec
RCD.HPB_Density_Ref_Gravity = WRK.COA_Density_Ref_Adj_4_dec;

ENDIF;

//?Calc Gross weight from density loadout and other factor
// Compute: Fuel Weight
RCD.Case_Weight = ( RCD.HPB_Meter_Total_Gallon * LCL.COA_Density_Loadout ) * 8.33;

//?Calc Net weight from density loadout and other factor
// Compute: Fuel Weight
RCD.HPB_Meter_Net_Weight = ( RCD.HPB_Meter_Net_Gallon * LCL.COA_Density_Loadout ) * 8.33;

ENDIF;

//?E4119L MG project -- calc gross weight   8/10/16 RMC
EXECUTE FUNCTION(Rtv Tare Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1228249;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(LCL.Description_Line_One);
PARAMETER(LCL.Misc_Tare_Weight);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


EXECUTE FUNCTION(RTV Itm BxID & Tares  RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1939974;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(LCL.Box_Weight);
PARAMETER(LCL.Number_Cases_On_A_Pallet);
PARAMETER(LCL.Pallet_Tare_Weight);
PARAMETER(LCL.Box_iD);
{
 //?USER: Initialize routine

 // PAR.Unit Weight = CON.*ZERO
 PAR.Unit_Weight = *ZERO;

 // PAR.Pallet Tare Weight = CON.*ZERO
 PAR.Pallet_Tare_Weight = *ZERO;

 // PAR.Number Cases On A Pallet = CON.*ZERO
 PAR.Number_Cases_On_A_Pallet = *ZERO;

 // PAR.Box iD = CON.*ZERO
 PAR.Box_iD = *ZERO;

 //?USER: Process Data record

 // PAR.Unit Weight = CON.*ZERO
 PAR.Unit_Weight = *ZERO;

 EXECUTE FUNCTION(RTV Typ/Pk/UntWgt/Plt RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1601775;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Component_Item_Code);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Number_Cases_On_A_Pallet);
 PARAMETER(PAR.Item_Type_Code);
 PARAMETER(PAR.Package_Type_Code);
 PARAMETER(PAR.Pallet_Tare_Weight);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

 CASE;

 // IF PAR.Item Type Code is Packaging and Supplies
 IF PAR.Item_Type_Code = 'PS';

 // AND PAR.Package Type Code is Box
 AND PAR.Package_Type_Code = 'B';

 // PAR.Box iD = DB1.Component Item Code
 PAR.Box_iD = DB1.Component_Item_Code;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Unit Weight = CON.*ZERO
 PAR.Unit_Weight = *ZERO;

 ENDIF;

}


// LCL.Total Tare USR = LCL.Box Weight + LCL.Misc Tare Weight
LCL.Total_Tare_USR = LCL.Box_Weight + LCL.Misc_Tare_Weight;

//?WI464 get wt for order's pallet type
CASE;

// IF LCL.OD Pallet Type is None
IF LCL.OD_Pallet_Type = *BLANK;

//?WI464 get wt for order's pallet type
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Pallet Weight     RT) TYPE(RTVOBJ) FILE(PUB6CPP)           AC2209418;
PARAMETER(LCL.OD_Pallet_Type);
PARAMETER(LCL.Pallet_Tare_Weight);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Pallet Tare
CASE;

// IF LCL.Palletize is yes
IF LCL.Palletize = 'Y';

CASE;

// IF LCL.Number Cases On A Pallet is GT Zero
IF LCL.Number_Cases_On_A_Pallet > *ZERO;

// Pallet Weight
LCL.Weight_1_2_U = ( RCD.Case_Quantity / LCL.Number_Cases_On_A_Pallet 'H' )                        +
* LCL.Pallet_Tare_Weight 'H';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Weight 1.2             .U = CON.*ZERO
LCL.Weight_1_2_U = *ZERO;

ENDIF;

//?Pallet Tare
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Weight 1.2             .U = CON.*ZERO
LCL.Weight_1_2_U = *ZERO;

ENDIF;

EXECUTE FUNCTION(Rtv Live w/Carlisle   RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1747217;
PARAMETER(RCD.Warehouse_Code);
PARAMETER(LCL.WHS_Live_with_Carlisle);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?E00196 RMC 8/24/12 chk pfs interface SHPTRN too
EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
PARAMETER(RCD.Company_Number);
PARAMETER('SHPTRN');
PARAMETER(LCL.PFS_AccuSort_Active);
PARAMETER(LCL.PFS_Carlisle_Active);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Box & Miscellaneous Tare
CASE;

// IF LCL.WHS Live w/Carlisle is Yes
IF LCL.WHS_Live_with_Carlisle = 'Y';

// AND LCL.PFS Carlisle Active is Yes
AND LCL.PFS_Carlisle_Active = 'Y';

//?Box & Miscellaneous Tare
// IF *OTHERWISE
IF *OTHERWISE;

// Box + Misc Tare
LCL.Weight_2_1_U = ( LCL.Box_Weight + LCL.Misc_Tare_Weight ) * RCD.Case_Quantity 'H';

ENDIF;

// RCD.Manifest Gross Weight = RCD.Case Weight + LCL.Weight 2.1             .U
RCD.Manifest_Gross_Weight = RCD.Case_Weight + LCL.Weight_2_1_U;

// PAR.USR Case Quantity = RCD.Case Quantity + PAR.USR Case Quantity
PAR.USR_Case_Quantity = RCD.Case_Quantity + PAR.USR_Case_Quantity;

// PAR.USR Case Weight = RCD.Case Weight + PAR.USR Case Weight
PAR.USR_Case_Weight = RCD.Case_Weight + PAR.USR_Case_Weight;

//?R11974 DN 11/08/17-Calc Manifest Net Weight in Kg for Seaboard Org.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
PARAMETER(RCD.Company_Number);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

CASE;

// IF RCD.Case Weight is NE *ZERO
IF RCD.Case_Weight <> *ZERO;

EXECUTE FUNCTION(Clc Weight to Kilogram IF) TYPE(EXCINTFUN)                     AC2145548;
PARAMETER(RCD.Case_Weight);
PARAMETER(RCD.Manifest_Net_Weight_Kg);
{
 //?Execute internal function

 //?Round Case Weight to 1 Decimal Place.
 //?RMC 10/14/19 increase precision - DO NOT DO THIS  10/16/19 PER AARON C
 // LCL.Net Weight Kg USR 11.4 = PAR.Case Weight * CON..45359 *
 LCL.Net_Weight_Kg_USR_11_4 = PAR.Case_Weight * .45359;

 // LCL.Net Weight Kilograms = LCL.Net Weight Kg USR 11.4 * CON.1 *Rounded
 LCL.Net_Weight_Kilograms = LCL.Net_Weight_Kg_USR_11_4 * 1 'H';

 // PAR.Manifest Net Weight - Kg = LCL.Net Weight Kilograms
 PAR.Manifest_Net_Weight_Kg = LCL.Net_Weight_Kilograms;

}


ENDIF;

ENDIF;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(ADD Manifest Detl Rec  CR) TYPE(CRTOBJ) FILE(OMFNCPP)          AC1402362;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Case_Sequence_Number);
PARAMETER(RCD.Case_Quantity);
PARAMETER(RCD.Case_Weight);
PARAMETER(RCD.Inventory_Updated_Flag);
PARAMETER(RCD.Label_Date);
PARAMETER(RCD.PT_Serial_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Manifest_Gross_Weight);
PARAMETER(RCD.Manifest_Lot_ID);
PARAMETER(RCD.Manifest_Total_Tare);
PARAMETER(RCD.Manifest_Co_Park_Lot_Nbr);
PARAMETER(RCD.Manifest_Pallet_Number);
PARAMETER(RCD.Manifest_Shift);
PARAMETER(RCD.HPB_Meter_Net_Gallon);
PARAMETER(RCD.Manifest_Net_Weight_Kg);
PARAMETER(RCD.Manifest_Unused_Status_1A);
PARAMETER(RCD.Manifest_Unused_Status_2A);
PARAMETER(RCD.Manifest_Unused_Date);
PARAMETER(RCD.HPB_COA_Batch_Number);
PARAMETER(RCD.HPB_Meter_Start_Gallon);
PARAMETER(RCD.HPB_Meter_Ending_Gallon);
PARAMETER(RCD.HPB_Meter_Total_Gallon);
PARAMETER(RCD.HPB_Meter_Net_Weight);
PARAMETER(RCD.HPB_Density_Ref_Gravity);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER('A');
PARAMETER(*MISSING);
PARAMETER(PAR.USR_Update_Flag);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?USER: Processing after Data update

 // PAR.USR Update Flag = CND.Yes
 PAR.USR_Update_Flag = 'Y';

}


//?USER: Delete DBF record

EXECUTE FUNCTION(DLT Manifest Detail    DL) TYPE(DLTOBJ) FILE(OMFNCPP)          AC1310362;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Case_Sequence_Number);
PARAMETER(PAR.USR_Update_Flag);
PARAMETER(PAR.COA_RIN_Modified_Sts);
{
 //?USER: Processing after Data update

 // PAR.USR Update Flag = CND.Yes
 PAR.USR_Update_Flag = 'Y';

 // PAR.COA RIN Modified Sts = CND.yes
 PAR.COA_RIN_Modified_Sts = 'Y';

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG OM Manifest Detail CH) TYPE(CHGOBJ) FILE(OMFNCPP)          AC1402363;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Case_Sequence_Number);
PARAMETER(RCD.Case_Quantity);
PARAMETER(RCD.Case_Weight);
PARAMETER(RCD.Inventory_Updated_Flag);
PARAMETER(RCD.Label_Date);
PARAMETER(RCD.PT_Serial_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Manifest_Gross_Weight);
PARAMETER(RCD.Manifest_Lot_ID);
PARAMETER(RCD.Manifest_Total_Tare);
PARAMETER(RCD.Manifest_Co_Park_Lot_Nbr);
PARAMETER(RCD.Manifest_Pallet_Number);
PARAMETER(RCD.Manifest_Shift);
PARAMETER(RCD.HPB_Meter_Net_Gallon);
PARAMETER(RCD.Manifest_Net_Weight_Kg);
PARAMETER(RCD.Manifest_Unused_Status_1A);
PARAMETER(RCD.Manifest_Unused_Status_2A);
PARAMETER(RCD.Manifest_Unused_Date);
PARAMETER(RCD.HPB_COA_Batch_Number);
PARAMETER(RCD.HPB_Meter_Start_Gallon);
PARAMETER(RCD.HPB_Meter_Ending_Gallon);
PARAMETER(RCD.HPB_Meter_Total_Gallon);
PARAMETER(RCD.HPB_Meter_Net_Weight);
PARAMETER(RCD.HPB_Density_Ref_Gravity);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Job_Time);
PARAMETER(RCD.User_Id);
PARAMETER(RCD.Job_Name);
PARAMETER(RCD.Job_Date);
PARAMETER(*MISSING);
PARAMETER(PAR.USR_Update_Flag);
PARAMETER(PAR.COA_RIN_Modified_Sts);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?USER: Processing after Data update

 // PAR.USR Update Flag = CND.Yes
 PAR.USR_Update_Flag = 'Y';

 // PAR.COA RIN Modified Sts = CND.yes
 PAR.COA_RIN_Modified_Sts = 'Y';

}


//?USER: Process command keys

//?Subfile has been updated
CASE;

// IF PAR.USR Update Flag is Yes
IF PAR.USR_Update_Flag = 'Y';

EXECUTE FUNCTION(RTV Chg for Confirm    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1310188;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);
PARAMETER(CTL.Item_Code);
PARAMETER(PAR.USR_Case_Quantity);
PARAMETER(PAR.USR_Case_Weight);
PARAMETER(PAR.USR_Under_Min);
PARAMETER(PAR.USR_Over_Max);
PARAMETER(PAR.USR_Exit_Program);
{
 //?USER: Initialize routine

 // PAR.USR Exit Program = CND.yes
 PAR.USR_Exit_Program = 'Y';

 // PAR.USR Over Max = CND.no
 PAR.USR_Over_Max = 'N';

 // PAR.USR Under Min = CND.no
 PAR.USR_Under_Min = 'N';

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Total Confirmed    RT) TYPE(RTVOBJ) FILE(OMFNCPP)          AC1310317;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(*ZERO);
 PARAMETER(PAR.USR_Case_Quantity);
 PARAMETER(PAR.USR_Case_Weight);
 PARAMETER(PAR.HPB_Meter_Net_Gallon);
 PARAMETER(PAR.HPB_Meter_Net_Weight);
 {
  //?USER: Initialize routine

  // PAR.USR Case Quantity = CND.EQ *ZERO
  PAR.USR_Case_Quantity = *ZERO;

  // PAR.USR Case Weight = CND.EQ *ZERO
  PAR.USR_Case_Weight = *ZERO;

  // PAR.HPB Meter Net Gallon = CND.Equal to zero
  PAR.HPB_Meter_Net_Gallon = *ZERO;

  // PAR.HPB Meter Net Weight = CND.Not Entered
  PAR.HPB_Meter_Net_Weight = *ZERO;

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PAR.USR Case Quantity = DB1.Case Quantity + PAR.USR Case Quantity
  PAR.USR_Case_Quantity = DB1.Case_Quantity + PAR.USR_Case_Quantity;

  // PAR.USR Case Weight = DB1.Case Weight + PAR.USR Case Weight
  PAR.USR_Case_Weight = DB1.Case_Weight + PAR.USR_Case_Weight;

  //?Only HPB will have these   4/14/08
  // PAR.HPB Meter Net Gallon = DB1.HPB Meter Net Gallon + PAR.HPB Meter Net Gallon
  PAR.HPB_Meter_Net_Gallon = DB1.HPB_Meter_Net_Gallon + PAR.HPB_Meter_Net_Gallon;

  // PAR.HPB Meter Net Weight = DB1.HPB Meter Net Weight + PAR.HPB Meter Net Weight
  PAR.HPB_Meter_Net_Weight = DB1.HPB_Meter_Net_Weight + PAR.HPB_Meter_Net_Weight;

 }

 //?Check min/max from the item master
 // PAR.USR Min Weight = CND.Not Entered
 PAR.USR_Min_Weight = *ZERO;

 // PAR.USR Max Weight = CND.Not Entered
 PAR.USR_Max_Weight = *ZERO;

 EXECUTE FUNCTION(RTV Qty Min/Max        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1402211;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Minimum_Weight_Per_Case);
 PARAMETER(PAR.Maximum_Weight_Per_Case);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.USR Min Weight = PAR.Minimum Weight Per Case * PAR.USR Case Quantity *Rounde
 PAR.USR_Min_Weight = PAR.Minimum_Weight_Per_Case * PAR.USR_Case_Quantity 'H';

 // PAR.USR Max Weight = PAR.Maximum Weight Per Case * PAR.USR Case Quantity *Rounde
 PAR.USR_Max_Weight = PAR.Maximum_Weight_Per_Case * PAR.USR_Case_Quantity 'H';

 //?Weight entered as shipped is less than Minimum
 CASE;

 // IF PAR.USR Case Weight LT PAR.USR Min Weight
 IF PAR.USR_Case_Weight < PAR.USR_Min_Weight;

 // PAR.USR Under Min = CND.yes
 PAR.USR_Under_Min = 'Y';

 // PAR.USR Exit Program = CND.no
 PAR.USR_Exit_Program = 'N';

 //?Exit Prog. No  will set the program back to beginning
 ENDIF;

 //?Weight entered is greater than the maxiumum
 CASE;

 // IF PAR.USR Case Weight GT PAR.USR Max Weight
 IF PAR.USR_Case_Weight > PAR.USR_Max_Weight;

 // PAR.USR Over Max = CND.yes
 PAR.USR_Over_Max = 'Y';

 // PAR.USR Exit Program = CND.no
 PAR.USR_Exit_Program = 'N';

 //?Exit prog. no will set program back to beginning
 ENDIF;

 CASE;

 // IF PAR.USR Case Quantity GT DB1.Quantity Allocated
 IF PAR.USR_Case_Quantity > DB1.Quantity_Scheduled;

 // WRK.Work Over/Short Status = CND.Overage
 WRK.Work_Over_Short_Status = 'O';

 ENDIF;

 CASE;

 // IF PAR.USR Case Quantity LT DB1.Quantity Allocated
 IF PAR.USR_Case_Quantity < DB1.Quantity_Scheduled;

 // WRK.Work Over/Short Status = CND.Short
 WRK.Work_Over_Short_Status = 'S';

 ENDIF;

 // WRK.Detail Line Status = CND.Confirmed
 WRK.Detail_Line_Status = 'R';

 // WRK.Detail Line Status Last = DB1.Detail Line Status
 WRK.Detail_Line_Status_Last = DB1.Detail_Line_Status;

 //?FP1110 HPB ONLY 4/14/08 Output net gallons and net weight to Ord Dtl
 //?  if Warehouse is Req Meter Readings is YES.
 //?  Every other warehouse puts out the gross from manifest dtl
 EXECUTE FUNCTION(Rtv HPB fields        RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1855470;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(LCL.Production_Warehouse_Code);
 PARAMETER(LCL.Warehouse_Location);
 PARAMETER(LCL.WHS_Req_Meter_Reading_Shp);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.WHS Req Meter Reading Shp is Yes
 IF LCL.WHS_Req_Meter_Reading_Shp = 'Y';

 EXECUTE FUNCTION(CHG Confirmed Qty      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1314641;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(WRK.Detail_Line_Status);
 PARAMETER(WRK.Detail_Line_Status_Last);
 PARAMETER('P');
 PARAMETER(WRK.Work_Over_Short_Status);
 PARAMETER(PAR.HPB_Meter_Net_Gallon);
 PARAMETER(PAR.HPB_Meter_Net_Weight);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.Substituted_Flag);
 PARAMETER(DB1.OD_Schedule_Override_Sts);
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(CHG Confirmed Qty      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1314641;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(WRK.Detail_Line_Status);
 PARAMETER(WRK.Detail_Line_Status_Last);
 PARAMETER('P');
 PARAMETER(WRK.Work_Over_Short_Status);
 PARAMETER(PAR.USR_Case_Quantity);
 PARAMETER(PAR.USR_Case_Weight);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.Substituted_Flag);
 PARAMETER(DB1.OD_Schedule_Override_Sts);
 ENDIF;

}


EXECUTE FUNCTION(RTV Crt/Chg HPB Batch RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC1855749;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(PAR.Load_ID);
PARAMETER(CTL.COA_Batch_Number);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(RTV Stop Drop Seq     RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1855766;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Stop_Drop_Sequence_Number);
 PARAMETER(PAR.Order_Number);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(CRT Existing OHE       CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC1816936;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Stop_Drop_Sequence_Number);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER('R');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.OHE_Carrier_SCAC_Code);
 PARAMETER(LCL.OHE_Spot_Buy);
 PARAMETER(LCL.OHE_PO_ACK_Flag);
 PARAMETER(LCL.OHE_Override_Type_Code);
 PARAMETER(LCL.OHE_Backhaul_Status);
 PARAMETER(LCL.OHE_Backhaul_ETA_AM_PM);
 PARAMETER(LCL.OHE_Load_Haul_Type);
 PARAMETER(LCL.OHE_Backhaul_Carrier_Code);
 PARAMETER(LCL.OHE_Bookings_Confirmed);
 PARAMETER(LCL.OHE_EDI_Error_Reasons);
 PARAMETER(LCL.OHE_EDI_Error_Reasons_2);
 PARAMETER(PAR.HPB_COA_Batch_Number);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(LCL.OHE_EDI_943_Action);
 PARAMETER(LCL.OHE_EDI_944_Action);
 PARAMETER(LCL.OHE_EDI_940_Action);
 PARAMETER(LCL.OHE_EDI_945_Action);
 PARAMETER(LCL.OHE_EDI_856_Action);
 PARAMETER(LCL.OHE_EDI_824_Action);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(LCL.OHE_Email_BOL_Sent);
 PARAMETER(LCL.OHE_EDI_Order_Automated);
 PARAMETER(LCL.OHE_EDI_601_Action);
 PARAMETER(LCL.OHE_Unused_Status_4);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.EDI_Status_1);
 PARAMETER(LCL.EDI_Status_2);
 PARAMETER(LCL.EDI_Status_3);
 PARAMETER('A');
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

 }

 //?USER: Process Data record

 CASE;

 // IF DB1.Load ID is Blank
 IF DB1.Load_ID = *ZERO;

 // LCL.Load ID = PAR.Load ID
 LCL.Load_ID = PAR.Load_ID;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Load ID = DB1.Load ID
 LCL.Load_ID = DB1.Load_ID;

 ENDIF;

 CASE;

 // IF DB1.Stop/Drop Sequence Number is Not Entered
 IF DB1.Stop_Drop_Sequence_Number = *ZERO;

 EXECUTE FUNCTION(RTV Stop Drop Seq     RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1855766;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Stop_Drop_Sequence_Number);
 PARAMETER(PAR.Order_Number);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Stop/Drop Sequence Number = DB1.Stop/Drop Sequence Number
 LCL.Stop_Drop_Sequence_Number = DB1.Stop_Drop_Sequence_Number;

 ENDIF;

 EXECUTE FUNCTION(CHG HPB Batch/Load    CH) TYPE(CHGOBJ) FILE(PMAMREP)           AC1855750;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.Load_ID);
 PARAMETER(LCL.Stop_Drop_Sequence_Number);
 PARAMETER(PAR.HPB_COA_Batch_Number);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

 }

}


CASE;

// IF PAR.USR Exit Program is yes
IF PAR.USR_Exit_Program = 'Y';

RETURN;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Program mode = CND.*CHANGE
PGM.*Program_mode = 'CHG';

//?Weight entered as shipped is less than Minimum
CASE;

// IF PAR.USR Under Min is yes
IF PAR.USR_Under_Min = 'Y';

// Send error message - 'Weight Shipped Less than Minimum for that item.'
ERROR(USR2283);
MSGPARM(WRK.Case_Weight);

// PAR.USR Under Min = CND.no
PAR.USR_Under_Min = 'N';

ENDIF;

//?Weight entered is greater than the maxiumum
CASE;

// IF PAR.USR Over Max is yes
IF PAR.USR_Over_Max = 'Y';

// Send error message - 'Weight Shipped Greater than Maximum for that item.'
ERROR(USR2284);
MSGPARM(WRK.Case_Weight);

// PAR.USR Over Max = CND.no
PAR.USR_Over_Max = 'N';

ENDIF;

ENDIF;

ENDIF;

