// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLBAXFR
// ?Date: 14.08.2025 Time: 02:53:36
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modification history
DO;

//? 4/20/2017 JBB C9426 - Add Ref fields to Delivery Sched Template
//?                       Create Delivery Sched Detail records with
//?                       the new Ref fields from the Delivery Sched
//?                       Template file.
//?11/05/2020 ISE H16853 Recompiled due to change in Buy Order Number
ENDDO;

// LCL.Date From USR = PAR.Date From USR
LCL.Date_From_USR = PAR.Date_From_USR;

// DOW LCL.Date From USR LE PAR.Date To   USR
DOW LCL.Date_From_USR <= PAR.Date_To_USR;

// Call program VAL Kill Day    2 OMS XF.
CALL PROGRAM(VAL Kill Day    2 OMS XF) ('PDWBXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(LCL.Date_From_USR);
PARAMETER(LCL.Invalid_Y_N_USR);

CASE;

// IF LCL.Invalid Y/N USR is No
IF LCL.Invalid_Y_N_USR = 'N';

EXECUTE FUNCTION(Rtv Plnd Kill f/Date  RT) TYPE(RTVOBJ) FILE(PKAOCPP)           AB1127652;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(LCL.Date_From_USR);
PARAMETER(LCL.DSH_Planned_Kill_Head);
{
 //?USER: Initialize routine

 // PAR.Planned Kill USR = CON.*ZERO
 PAR.Planned_Kill_USR = *ZERO;

 //?USER: Processing if Data record not found

 // PAR.Planned Kill USR = CON.*ZERO
 PAR.Planned_Kill_USR = *ZERO;

 //?USER: Process Data record

 // PAR.Planned Kill USR = PAR.Planned Kill USR + DB1.KP Planned Kill
 PAR.Planned_Kill_USR = PAR.Planned_Kill_USR + DB1.KP_Planned_Kill;

}


// Call program Rtv Day of Week No    XF.
CALL PROGRAM(Rtv Day of Week No    XF) ('POTKXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(LCL.Date_From_USR);
PARAMETER(LCL.DST_Kill_Day_of_Week);

EXECUTE FUNCTION(Rtv Crt DS Detail     RT) TYPE(RTVOBJ) FILE(PLACREP)           AB1245574;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(LCL.DST_Kill_Day_of_Week);
PARAMETER(LCL.Date_From_USR);
PARAMETER(LCL.DSH_Requested_Delv_Head);
{
 //?USER: Initialize routine

 //?Modification history
 DO;

 //?4/12/2017 JBB C9426 - Populate Delivery Sched Detail with Ref
 //?                      fields from Delivery Sched Template.
 ENDDO;

 //?USER: Process Data record

 //?Delivery Date is on or before the kill date
 CASE;

 // IF DB1.DST Delivery Day of Week EQ DB1.DST Kill Day of Week
 IF DB1.DST_Delivery_Day_of_Week = DB1.DST_Kill_Day_of_Week;

 // LCL.DSD Delivery Date = PAR.Date From USR
 LCL.DSD_Delivery_Date = PAR.Date_From_USR;

 //?Delivery Date is on or before the kill date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Day of Week USR = CVTVAR(DB1.DST Delivery Day of Week)
 LCL.Day_of_Week_USR = CVTVAR(DB1.DST_Delivery_Day_of_Week);

 // WRK.Day of Week USR = CVTVAR(PAR.DST Kill Day of Week)
 WRK.Day_of_Week_USR = CVTVAR(PAR.DST_Kill_Day_of_Week);

 // WRK.Day of Week USR = WRK.Day of Week USR - LCL.Day of Week USR
 WRK.Day_of_Week_USR = WRK.Day_of_Week_USR - LCL.Day_of_Week_USR;

 // WRK.Day of Week USR = CON.*ZERO - WRK.Day of Week USR
 WRK.Day_of_Week_USR = *ZERO - WRK.Day_of_Week_USR;

 // LCL.DSD Delivery Date = PAR.Date From USR + WRK.Day of Week USR *DAYS
 LCL.DSD_Delivery_Date = DATEINCR(PAR.Date_From_USR WRK.Day_of_Week_USR 'DY' 1111111
 'NONE' 'N' 1);

 ENDIF;

 // LCL.DSD Scheduled Hour = DB1.DST Delivery Time / CON.100 *
 LCL.DSD_Scheduled_Hour = DB1.DST_Delivery_Time / 100;

 EXECUTE FUNCTION(Crt Delv Sched Dtl    CR) TYPE(CRTOBJ) FILE(PLAECPP)           AB1244727;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(PAR.Date_From_USR);
 PARAMETER(LCL.DSD_Delivery_Date);
 PARAMETER(DB1.DST_Delivery_Time);
 PARAMETER(DB1.DST_Delivery_Time_Seq);
 PARAMETER(LCL.DSD_Scheduled_Hour);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(DB1.DST_Unused_Head);
 PARAMETER(DB1.DST_Scheduled_Delv_Head);
 PARAMETER(DB1.DST_Scheduled_Kill_Head);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(WRK.Blank_Usr_2);
 PARAMETER('F');
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER('N');
 PARAMETER(WRK.Blank_Usr_2);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.DST_Receiving_Shift);
 PARAMETER(DB1.DST_Kill_Shift);
 PARAMETER(DB1.DST_BOL_Kill_Shift);
 PARAMETER('N');
 PARAMETER('N');
 PARAMETER('O');
 PARAMETER(DB1.DST_Source_Type);
 PARAMETER(WRK.Blank_Usr_1_fld_Usr);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.SR_Source_Code);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.DST_Ref_1);
 PARAMETER(DB1.DST_Ref_2);
 PARAMETER(DB1.DST_Ref_Status);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 // PAR.DSH Requested Delv Head = PAR.DSH Requested Delv Head + DB1.DST Requested Delv Head
 PAR.DSH_Requested_Delv_Head = PAR.DSH_Requested_Delv_Head + DB1.DST_Unused_Head;

}


// LCL.DSH Ext Sch Create Time = JOB.*Job time / CON.100 *
LCL.DSH_Ext_Sch_Create_Time = JOB.*Job_time / 100;

EXECUTE FUNCTION(Crt Delv Sched Hdr    CR) TYPE(CRTOBJ) FILE(PLADCPP)           AB1244701;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(LCL.Date_From_USR);
PARAMETER(LCL.DSH_Planned_Kill_Head);
PARAMETER(LCL.DSH_Requested_Delv_Head);
PARAMETER(02);
PARAMETER(JOB.*Job_date);
PARAMETER(LCL.DSH_Ext_Sch_Create_Time);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('N');
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('N');
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


ENDIF;

// LCL.Date From USR = LCL.Date From USR + CON.1 *DAYS
LCL.Date_From_USR = DATEINCR(LCL.Date_From_USR 1 'DY' 1111111 'NONE' 'N' 1);

ENDDO;

