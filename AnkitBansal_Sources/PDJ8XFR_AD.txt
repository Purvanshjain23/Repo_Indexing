// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDJ8XFR
// ?Date: 14.08.2025 Time: 03:32:04
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(UPD Resync Itm Bal/Dtl RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC1402514;
PARAMETER(960);
{
 //?USER: Process Data record

 // PAR.Unit Cost Pricing U/M = CON.*ZERO
 PAR.Unit_Cost_Per_Pound = *ZERO;

 EXECUTE FUNCTION(RTV Sum Qty,Wgt,Value  RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1402525;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.On_Hand_Weight_Summary);
 PARAMETER(PAR.On_Hand_UOM1_Summary);
 PARAMETER(PAR.On_Hand_UOM2_Summary);
 PARAMETER(PAR.On_Hand_UOM3_Summary);
 PARAMETER(PAR.Value_of_On_Hand_Inventor);
 {
  //?USER: Initialize routine

  // PAR.Quantity on Hand - Weight = CON.*ZERO
  PAR.Quantity_on_Hand_Weight = *ZERO;

  // PAR.Quantity on Hand - U/M1 = CON.*ZERO
  PAR.Quantity_on_Hand_UOM1 = *ZERO;

  // PAR.Quantity on Hand - U/M2 = CON.*ZERO
  PAR.Quantity_on_Hand_UOM2 = *ZERO;

  // PAR.Quantity on Hand - U/M3 = CON.*ZERO
  PAR.Quantity_on_Hand_UOM3 = *ZERO;

  // PAR.Value of On Hand Inventor = CON.*ZERO
  PAR.Value_of_On_Hand_Inventor = *ZERO;

  //?USER: Process Data record

  // PAR.Quantity on Hand - Weight = PAR.Quantity on Hand - Weight + DB1.Quantity on
  PAR.Quantity_on_Hand_Weight = PAR.Quantity_on_Hand_Weight + DB1.Quantity_on_Hand_Weight;

  // PAR.Quantity on Hand - U/M1 = PAR.Quantity on Hand - U/M1 + DB1.Quantity on Hand
  PAR.Quantity_on_Hand_UOM1 = PAR.Quantity_on_Hand_UOM1 + DB1.Quantity_on_Hand_UOM1;

  // PAR.Quantity on Hand - U/M2 = PAR.Quantity on Hand - U/M2 + DB1.Quantity on Hand
  PAR.Quantity_on_Hand_UOM2 = PAR.Quantity_on_Hand_UOM2 + DB1.Quantity_on_Hand_UOM2;

  // PAR.Quantity on Hand - U/M3 = PAR.Quantity on Hand - U/M3 + DB1.Quantity on Hand
  PAR.Quantity_on_Hand_UOM3 = PAR.Quantity_on_Hand_UOM3 + DB1.Quantity_on_Hand_UOM3;

  CASE;

  // IF DB1.Quantity on Hand - Weight is Not equal zero
  IF DB1.Quantity_on_Hand_Weight <> *ZERO;

  // OR DB1.Quantity on Hand - U/M1 is not equal zero
  OR DB1.Quantity_on_Hand_UOM1 <> *ZERO;

  // PAR.Value of On Hand Inventor = PAR.Value of On Hand Inventor + DB1.Value of On
  PAR.Value_of_On_Hand_Inventor = PAR.Value_of_On_Hand_Inventor
  + DB1.Value_of_On_Hand_Inventor;

  ENDIF;

 }

 CASE;

 // IF PAR.On Hand Weight Summary NE WRK.ZERO
 IF PAR.On_Hand_Weight_Summary <> WRK.ZERO;

 // PAR.Unit Cost Pricing U/M = PAR.Value of On Hand Inventor / PAR.On Hand Weight S
 PAR.Unit_Cost_Per_Pound = PAR.Value_of_On_Hand_Inventor / PAR.On_Hand_Weight_Summary 'H';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Unit Cost Pricing U/M = CON.*ZERO
 PAR.Unit_Cost_Per_Pound = *ZERO;

 ENDIF;

 EXECUTE FUNCTION(Chg Item Balance       CH) TYPE(CHGOBJ) FILE(CAB0REP)          AC1119977;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Unit_Cost_Per_Pound);
 PARAMETER(DB1.Last_Cost);
 PARAMETER(DB1.Cost_per_Primary_UOM);
 PARAMETER(DB1.Cost_per_Pricing_UOM);
 PARAMETER(DB1.Revaluation_Cost);
 PARAMETER(DB1.Revaluation_Eff_Date);
 PARAMETER(DB1.Revaluation_Cost_Type);
 PARAMETER(DB1.Last_Revaluation_Cost);
 PARAMETER(DB1.Last_Revaluation_Eff_Date);
 PARAMETER(PAR.On_Hand_Weight_Summary);
 PARAMETER(PAR.On_Hand_UOM1_Summary);
 PARAMETER(PAR.On_Hand_UOM2_Summary);
 PARAMETER(PAR.On_Hand_UOM3_Summary);
 PARAMETER(DB1.Quantity_In_Chill);
 PARAMETER(DB1.Weight_In_Chill);
 PARAMETER(DB1.Quantity_Scheduled_UOM1);
 PARAMETER(DB1.Quantity_on_Sales_Order);
 PARAMETER(DB1.Quantity_on_Purch_Order);
 PARAMETER(DB1.Quantity_on_Transfer);
 PARAMETER(PAR.On_Hand_UOM1_Summary);
 PARAMETER(DB1.Cycle_Count_Code_IB);
 PARAMETER(DB1.Date_of_Last_Order);
 PARAMETER(DB1.Date_of_Last_Shipment);
 PARAMETER(PAR.Value_of_On_Hand_Inventor);
 PARAMETER(DB1.Inventory_Planning_Type);
 PARAMETER(DB1.Safety_Allowance_Percent);
 PARAMETER(DB1.Safety_Allowance_Quantity);
 PARAMETER(DB1.Stock_Out_Date);
 PARAMETER(DB1.Buyer_Code);
 PARAMETER(DB1.Lead_Time_Last);
 PARAMETER(DB1.Lead_Time_Date_Last);
 PARAMETER(DB1.Lead_Time_Next_to_Last);
 PARAMETER(DB1.Lead_Time_Date_Next_Lst);
 PARAMETER(DB1.Lead_Time_Exception);
 PARAMETER(DB1.Usage_Qty_per_Cycle);
 PARAMETER(DB1.Usage_Weight_per_Cycle);
 PARAMETER(DB1.Inventory_Management);
 PARAMETER(DB1.Minimum_Quantity);
 PARAMETER(DB1.Maximum_Quantity);
 PARAMETER(DB1.Last_Physical_Count);
 PARAMETER(DB1.Requisition_Mode);
 PARAMETER(DB1.Cost_Update_Pending);
 PARAMETER(DB1.Post_GL_Status);
 PARAMETER(DB1.Vendor_Item_Whse_Default);
 PARAMETER(DB1.Item_Structure_Class_Code);
 PARAMETER(DB1.Item_Structure_Group_Code);
 PARAMETER(DB1.Item_Structure_Type_Code);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Record_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


