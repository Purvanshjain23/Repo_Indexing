// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPDLPFR
// ?Date: 14.08.2025 Time: 12:06:29
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification history
//?******** slm 10/10/2019
//?During Tech design just making a note that we
//?need to change.
//?********
//?05/13/04 SLM PKTR01 Multi-Company Load Header  Remove Co from LV
//?                    took Purva version, and added the logic for
//?                    selection 1pg, and customer at the top of page
//?03/20/08 RMC S00166 Chg CF2 to SJG
//?10/17/19 JBB E15650 - Multi-Stop Seaboard Warehouse Report
//?             WI359    1. Modify access path OMFJCPLZ from Actual
//?                         Ship Date/Load to Company/Actual Ship
//?                         Date/Load.
//?                      2. Restrict report by Company Number.
//?                      3. Add two more colomns for more warehouses
//?                      4. Remove hard coding of warehouses. Instead,
//?                         populate column headings with warehouses
//?                         passed in as parameters.
EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.Print (Yes/No) USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

//?USER: Record selection processing

CASE;

// IF DB1.Actual Ship Date GT PAR.Date To               USR
IF DB1.Actual_Ship_Date > PAR.Date_To_USR;

// Execute function SET End of File 'A'    US.
EXECUTE FUNCTION(SET End of File 'A'    US) TYPE(EXCUSRSRC) ('PDGOUFR');
{
 C                     MOVEL'1'       W0EOFA           END OF FILE 'B'
}


ENDIF;

CASE;

// IF DB1.Total Stops is One Stop
IF DB1.Total_Stops = 1;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process top of page

MOVE *ALL (To: TOP From: PAR);

// TOP.Date From             USR = PAR.Actual Ship Date
TOP_Date_From_USR = PAR.Actual_Ship_Date;

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(TOP_Company_Name_DRV);
PARAMETER(TOP_Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// TOP.Text USR 40 = CONCAT(PAR.Warehouse 1 USR,PAR.Warehouse 2 USR,CND.*One)
TOP_Text_USR_40 = PAR.Warehouse_1_USR + PAR.Warehouse_2_USR (1);

// TOP.Text USR 40 = CONCAT(TOP.Text USR 40,PAR.Warehouse 3 USR,CND.*One)
TOP_Text_USR_40 = TOP_Text_USR_40 + PAR.Warehouse_3_USR (1);

// TOP.Text USR 40 = CONCAT(TOP.Text USR 40,PAR.Warehouse 4 USR,CND.*One)
TOP_Text_USR_40 = TOP_Text_USR_40 + PAR.Warehouse_4_USR (1);

// TOP.Text USR 40 = CONCAT(TOP.Text USR 40,PAR.Warehouse 5 USR,CND.*One)
TOP_Text_USR_40 = TOP_Text_USR_40 + PAR.Warehouse_5_USR (1);

// TOP.Text USR 40 = CONCAT(TOP.Text USR 40,PAR.Warehouse 6 USR,CND.*One)
TOP_Text_USR_40 = TOP_Text_USR_40 + PAR.Warehouse_6_USR (1);

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
// SUPPRESSED PRINT Company Number header format

ENDIF;

CASE;

IF NEW Actual_Ship_Date;
// Print Actual Ship Date header format
PRINT Actual Ship Date header format;

ENDIF;

// SUPPRESSED PRINT Load ID header format

//?USER: On print of detail format

// WRK.Print Yes/No          USR = CND.No
WRK.Print_Yes_No_USR = 'N';

//?******** slm 10/10/2019
//?During Tech design just making a note that we
//?need to change.
//?SLM WI359 - This will change due to the warehouse
//?are from multiple companies and not hard coded
//?******** slm 10/10/2019
//?10/17/19 JBB E15650 - Add capability for up to 6 warehouses
EXECUTE FUNCTION(Rtv ShpWgt w/ 6 Whs   RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC2177529;
PARAMETER(CUR.Load_ID);
PARAMETER(PAR.Warehouse_1_USR);
PARAMETER(PAR.Warehouse_2_USR);
PARAMETER(PAR.Warehouse_3_USR);
PARAMETER(PAR.Warehouse_4_USR);
PARAMETER(PAR.Warehouse_5_USR);
PARAMETER(PAR.Warehouse_6_USR);
PARAMETER(CUR.Weight_1_USR);
PARAMETER(CUR.Weight_2_USR);
PARAMETER(CUR.Weight_3_USR);
PARAMETER(CUR.Weight_4_USR);
PARAMETER(CUR.Weight_5_USR);
PARAMETER(CUR.Weight_6_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?Accumulate weight for each warehouse
 //?* Warehouse 1 *
 CASE;

 // IF PAR.Warehouse 1 USR is Entered
 IF PAR.Warehouse_1_USR <> *BLANK;

 EXECUTE FUNCTION(Rtv Shipped Wgt Total RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1683390;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Warehouse_1_USR);
 PARAMETER(LCL.Weight_Shipped_Total);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Weight Shipped Total = PAR.Weight Shipped Total + DB1.Weight Shipped Total
  PAR.Weight_Shipped_Total = PAR.Weight_Shipped_Total + DB1.Weight_Shipped_Total;

 }

 // PAR.Weight 1 USR = PAR.Weight 1 USR + LCL.Weight Shipped Total
 PAR.Weight_1_USR = PAR.Weight_1_USR + LCL.Weight_Shipped_Total;

 ENDIF;

 //?* Warehouse 2 *
 CASE;

 // IF PAR.Warehouse 2 USR is Entered
 IF PAR.Warehouse_2_USR <> *BLANK;

 EXECUTE FUNCTION(Rtv Shipped Wgt Total RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1683390;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Warehouse_2_USR);
 PARAMETER(LCL.Weight_Shipped_Total);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Weight Shipped Total = PAR.Weight Shipped Total + DB1.Weight Shipped Total
  PAR.Weight_Shipped_Total = PAR.Weight_Shipped_Total + DB1.Weight_Shipped_Total;

 }

 // PAR.Weight 2 USR = PAR.Weight 2 USR + LCL.Weight Shipped Total
 PAR.Weight_2_USR = PAR.Weight_2_USR + LCL.Weight_Shipped_Total;

 ENDIF;

 //?* Warehouse 3 *
 CASE;

 // IF PAR.Warehouse 3 USR is Entered
 IF PAR.Warehouse_3_USR <> *BLANK;

 EXECUTE FUNCTION(Rtv Shipped Wgt Total RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1683390;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Warehouse_3_USR);
 PARAMETER(LCL.Weight_Shipped_Total);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Weight Shipped Total = PAR.Weight Shipped Total + DB1.Weight Shipped Total
  PAR.Weight_Shipped_Total = PAR.Weight_Shipped_Total + DB1.Weight_Shipped_Total;

 }

 // PAR.Weight 3 USR = PAR.Weight 3 USR + LCL.Weight Shipped Total
 PAR.Weight_3_USR = PAR.Weight_3_USR + LCL.Weight_Shipped_Total;

 ENDIF;

 //?* Warehouse 4 *
 CASE;

 // IF PAR.Warehouse 4 USR is Entered
 IF PAR.Warehouse_4_USR <> *BLANK;

 EXECUTE FUNCTION(Rtv Shipped Wgt Total RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1683390;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Warehouse_4_USR);
 PARAMETER(LCL.Weight_Shipped_Total);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Weight Shipped Total = PAR.Weight Shipped Total + DB1.Weight Shipped Total
  PAR.Weight_Shipped_Total = PAR.Weight_Shipped_Total + DB1.Weight_Shipped_Total;

 }

 // PAR.Weight 4 USR = PAR.Weight 4 USR + LCL.Weight Shipped Total
 PAR.Weight_4_USR = PAR.Weight_4_USR + LCL.Weight_Shipped_Total;

 ENDIF;

 //?10/17/19 JBB E15650 - Add capability for up to 6 warehouses
 //?* Warehouse 5 *
 CASE;

 // IF PAR.Warehouse 5 USR is Entered
 IF PAR.Warehouse_5_USR <> *BLANK;

 EXECUTE FUNCTION(Rtv Shipped Wgt Total RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1683390;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Warehouse_5_USR);
 PARAMETER(LCL.Weight_Shipped_Total);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Weight Shipped Total = PAR.Weight Shipped Total + DB1.Weight Shipped Total
  PAR.Weight_Shipped_Total = PAR.Weight_Shipped_Total + DB1.Weight_Shipped_Total;

 }

 // PAR.Weight 5 USR = PAR.Weight 5 USR + LCL.Weight Shipped Total
 PAR.Weight_5_USR = PAR.Weight_5_USR + LCL.Weight_Shipped_Total;

 ENDIF;

 //?* Warehouse 6 *
 CASE;

 // IF PAR.Warehouse 6 USR is Entered
 IF PAR.Warehouse_6_USR <> *BLANK;

 EXECUTE FUNCTION(Rtv Shipped Wgt Total RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1683390;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Warehouse_6_USR);
 PARAMETER(LCL.Weight_Shipped_Total);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Weight Shipped Total = PAR.Weight Shipped Total + DB1.Weight Shipped Total
  PAR.Weight_Shipped_Total = PAR.Weight_Shipped_Total + DB1.Weight_Shipped_Total;

 }

 // PAR.Weight 6 USR = PAR.Weight 6 USR + LCL.Weight Shipped Total
 PAR.Weight_6_USR = PAR.Weight_6_USR + LCL.Weight_Shipped_Total;

 ENDIF;

}


//?Determine if format is to be printed
CASE;

// IF CUR.Weight 1 USR is Greater than zero
IF CUR.Weight_1_USR > *ZERO;

//?If weights for warehouses 2 thru 6 are all zero, do not print
CASE;

// IF CUR.Weight 2 USR is Greater than zero
IF CUR.Weight_2_USR > *ZERO;

// OR CUR.Weight 3 USR is Greater than zero
OR CUR.Weight_3_USR > *ZERO;

// OR CUR.Weight 4 USR is Greater than zero
OR CUR.Weight_4_USR > *ZERO;

// OR CUR.Weight 5 USR is Greater than zero
OR CUR.Weight_5_USR > *ZERO;

// OR CUR.Weight 6 USR is Greater than zero
OR CUR.Weight_6_USR > *ZERO;

//?If weights for warehouses 2 thru 6 are all zero, do not print
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

ENDIF;

//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : Prt Multi-Stop SbdWhs PO
CASE;

// IF PGM.*Print format is Do not print format
IF PGM.*Print_format = 'N';

QUIT;

ENDIF;

//?10/17/19 JBB E15650 - Add capability for up to 6 warehouses
EXECUTE FUNCTION(Prt Multi-Stop SbdWhs PO) TYPE(PRTOBJ);
PARAMETER(CUR.Load_ID);
PARAMETER(PAR.Warehouse_1_USR);
PARAMETER(PAR.Warehouse_2_USR);
PARAMETER(PAR.Warehouse_3_USR);
PARAMETER(PAR.Warehouse_4_USR);
PARAMETER(PAR.Warehouse_5_USR);
PARAMETER(PAR.Warehouse_6_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Weight Shipped Total = PAR.Weight Shipped Total + DB1.Weight Shipped Total
 PAR.Weight_Shipped_Total = PAR.Weight_Shipped_Total + DB1.Weight_Shipped_Total;

}


//?USER: Process after print of detail format

CASE;

// IF PGM.*Print format is Print format
IF PGM.*Print_format = 'Y';

NXT.Total_Count = CNT();

NXT.Weight_1_SUM = SUM(CUR.Weight_1_USR);

NXT.Weight_2_SUM = SUM(CUR.Weight_2_USR);

NXT.Weight_3_Sum = SUM(CUR.Weight_3_USR);

NXT.Weight_4_Sum = SUM(CUR.Weight_4_USR);

//?10/17/19 JBB E15650 - Add capability for up to 6 warehouses
NXT.Weight_5_Sum = SUM(CUR.Weight_5_USR);

NXT.Weight_6_Sum = SUM(CUR.Weight_6_USR);

ENDIF;

//?USER: Print required level totals

// SUPPRESSED PRINT Load ID totals format

CASE;

IF NEW Actual_Ship_Date;
// Print Actual Ship Date totals format
PRINT Actual Ship Date totals format;

NXT.Total_Count_SUM = SUM(CUR.Total_Count);

NXT.Weight_1_SUM = SUM(CUR.Weight_1_SUM);

NXT.Weight_2_SUM = SUM(CUR.Weight_2_SUM);

NXT.Weight_3_Sum = SUM(CUR.Weight_3_Sum);

NXT.Weight_4_Sum = SUM(CUR.Weight_4_Sum);

//?10/17/19 JBB E15650 - Add capability for up to 6 warehouses
NXT.Weight_5_Sum = SUM(CUR.Weight_5_Sum);

NXT.Weight_6_Sum = SUM(CUR.Weight_6_Sum);

ENDIF;

// SUPPRESSED PRINT Company Number totals format

