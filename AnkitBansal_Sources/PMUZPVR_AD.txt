// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMUZPVR
// ?Date: 14.08.2025 Time: 03:44:10
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PAR.Application Code = CND.Order Management System
PAR.Application_Code = 'OMS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

//?***** Change Log and comments
DO;

//?** 05/29/2009 LJB E00411
//?** Add optional Shipped Item Code to prompt and report
ENDDO;

//?USER: Load screen

CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

// DTL.Company = PAR.Company Number
DTL.Company = PAR.Company_Number;

EXECUTE FUNCTION(RTV Company Name Only  RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1100959;
PARAMETER(PAR.Company_Number);
PARAMETER(DTL.Company_Name_DRV);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Thru Date             USR = JOB.*Job date
DTL.Thru_Date_USR = JOB.*Job_date;

// DTL.To Date               USR = JOB.*Job date
DTL.To_Date_USR = JOB.*Job_date;

// DTL.Text USR 5 = CON."   "
DTL.Text_USR_5 = '"   "';

// PAR.Carrier Code = CND.not entered
PAR.Carrier_Code = *BLANK;

ENDIF;

//?USER: Validate fields

//?** Prompts
//?** Customer
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Ship to Customer      USR
AND PGM.*Cursor_field = DTL.Ship_to_Customer_USR;

// Call program SEL Customer by Name   SR.
CALL PROGRAM(SEL Customer by Name   SR) ('PDCJSRR');
PARAMETER(DTL.Ship_to_Customer_USR);

EXECUTE FUNCTION(RTV Name Only          RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1493704;
PARAMETER(DTL.Ship_to_Customer_USR);
PARAMETER(DTL.Customer_Name_DRV);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

//?** Carrier
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Text USR 5
AND PGM.*Cursor_field = DTL.Text_USR_5;

// PAR.Carrier Code = SUBSTRING(DTL.Text USR 5,CON.2,CON.3)
PAR.Carrier_Code = SUBSTRING(DTL.Text_USR_5:2:3);

// Call program SEL Carrier Name       SR.
CALL PROGRAM(SEL Carrier Name       SR) ('PDWHSRR');
PARAMETER(PAR.Carrier_Code);
PARAMETER(DTL.Carrier_Name_DRV);

// WRK.Text USR 4 = CONCAT(PAR.Carrier Code,CON.",CON.*ZERO)
WRK.Text_USR_4 = PAR.Carrier_Code + '"' (*ZERO);

// DTL.Text USR 5 = CONCAT(CON.",WRK.Text USR 4,CON.*ZERO)
DTL.Text_USR_5 = '"' + WRK.Text_USR_4 (*ZERO);

ENDIF;

//?** Company
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Company
IF PGM.*Cursor_field = DTL.Company;

CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// Call program SEL Co By Number       SR.
CALL PROGRAM(SEL Co By Number       SR) ('PDMESRR');
PARAMETER(DTL.Company);
PARAMETER(DTL.Company_Name_DRV);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

ENDIF;

// WRK.First Letter 1 USR = SUBSTRING(DTL.Text USR 5,CON.1,CON.1)
WRK.First_Letter_1_USR = SUBSTRING(DTL.Text_USR_5:1:1);

// WRK.Text 1 Length USR = SUBSTRING(DTL.Text USR 5,CON.5,CON.1)
WRK.Text_1_Length_USR = SUBSTRING(DTL.Text_USR_5:5:1);

//?** Carrier must begin & end with quotes
CASE;

// IF PAR.Carrier Code is entered
IF PAR.Carrier_Code <> *BLANK;

CASE;

// IF WRK.First Letter 1 USR is Not Quote
IF WRK.First_Letter_1_USR <> '"';

// OR WRK.Text 1 Length USR is Not Quote
OR WRK.Text_1_Length_USR <> '"';

// Send error message - 'Field must begin & end with single quotes'
ERROR(USR3946);
MSGPARM(DTL.Text_USR_5);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?CALC: Screen function fields

EXECUTE FUNCTION(Customer Name DRV) TYPE(DRVFLD)                                AC1631131;
PARAMETER(DTL.Customer_Name_DRV);
PARAMETER(DTL.Ship_to_Customer_USR);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Customer_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Carrier Name DRV) TYPE(DRVFLD)                                 AC1582201;
PARAMETER(DTL.Carrier_Name_DRV);
PARAMETER(PAR.Carrier_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Carrier_Name_DRV);
 PARAMETER(NLL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

}


//?** Co# = zeros
CASE;

// IF DTL.Company is Equal to zero
IF DTL.Company = *ZERO;

// DTL.Company Name DRV = CON.*ALL
DTL.Company_Name_DRV = *ALL;

//?** Co# = zeros
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.Company);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


ENDIF;

//?USER: Validate relations

//?** Date Tests
CASE;

// IF DTL.Thru Date             USR is Not Entered
IF DTL.Thru_Date_USR = *ZERO;

// Send error message - 'Date must be entered.'
ERROR(USR0231);
MSGPARM(DTL.Thru_Date_USR);

//?** Date Tests
// IF DTL.To Date               USR is Not Entered
IF DTL.To_Date_USR = *ZERO;

// Send error message - 'Date must be entered.'
ERROR(USR0231);
MSGPARM(DTL.To_Date_USR);

//?** Date Tests
// IF DTL.Thru Date             USR GT DTL.To Date               USR
IF DTL.Thru_Date_USR > DTL.To_Date_USR;

// Send error message - 'Date &1 cannot be before date &2'
ERROR(USR3945);
MSGPARM(DTL.Thru_Date_USR);
MSGPARM(DTL.To_Date_USR);

ENDIF;

//?** Email address must be entered
CASE;

// IF DTL.Email Address is Blank
IF DTL.Email_Address = *BLANK;

// Send error message - 'Email address cannot be left blank. Enter a valid email address.'
ERROR(USR3670);
MSGPARM(DTL.Email_Address);

ENDIF;

//?** Company Number required when Customer is requested
CASE;

// IF DTL.Ship to Customer      USR is Entered
IF DTL.Ship_to_Customer_USR <> 0;

CASE;

// IF DTL.Company is Equal to zero
IF DTL.Company = *ZERO;

SET CURSOR;

// Send error message - 'Company Number is required with selected entry.'
ERROR(USR3947);
MSGPARM(DTL.Company);

ENDIF;

ENDIF;

//?** Extract carrier code from quoted string
// PAR.Carrier Code = SUBSTRING(DTL.Text USR 5,CON.2,CON.3)
PAR.Carrier_Code = SUBSTRING(DTL.Text_USR_5:2:3);

//?** Company Number required when Carrier is requested
CASE;

// IF PAR.Carrier Code is entered
IF PAR.Carrier_Code <> *BLANK;

CASE;

// IF DTL.Company is Equal to zero
IF DTL.Company = *ZERO;

SET CURSOR;

// Send error message - 'Company Number is required with selected entry.'
ERROR(USR3947);
MSGPARM(DTL.Company);

ENDIF;

ENDIF;

//?** Only one report selection at a time
CASE;

// IF DTL.Ship to Customer      USR is Entered
IF ( DTL.Ship_to_Customer_USR <> 0;

// AND DTL.Load ID USR is entered
AND DTL.Load_ID_USR <> *ZERO );

// OR DTL.Load ID USR is entered
OR ( DTL.Load_ID_USR <> *ZERO;

// AND PAR.Carrier Code is entered
AND PAR.Carrier_Code <> *BLANK );

// OR DTL.Ship to Customer      USR is Entered
OR ( DTL.Ship_to_Customer_USR <> 0;

// AND PAR.Carrier Code is entered
AND PAR.Carrier_Code <> *BLANK );

// Send error message - 'Only one report selection allowed.'
ERROR(USR2314);

ENDIF;

//?USER: User defined action

// PAR.Select Option = CND.Blank
PAR.Select_Option = *BLANK;

// PAR.From Date Pass        USR = DTL.Thru Date             USR
PAR.From_Date_Pass_USR = DTL.Thru_Date_USR;

// PAR.Thru Date Pass        USR = DTL.To Date               USR
PAR.Thru_Date_Pass_USR = DTL.To_Date_USR;

// PAR.Company Number Pass   USR = DTL.Company
PAR.Company_Number_Pass_USR = DTL.Company;

// PAR.Customer Number Pass  USR = DTL.Ship to Customer      USR
PAR.Customer_Number_Pass_USR = DTL.Ship_to_Customer_USR;

// PAR.Order Number 1  PASS  USR = DTL.Load ID USR
PAR.Order_Number_1_PASS_USR = DTL.Load_ID_USR;

// PAR.Text USR 5 = DTL.Text USR 5
PAR.Text_USR_5 = DTL.Text_USR_5;

// PAR.Email Address = DTL.Email Address
PAR.Email_Address = DTL.Email_Address;

//?** Add new report: by Shipped Item Code            E00411
// PAR.Item Code PASS        USR = DTL.Shipped Item Code
PAR.Item_Code_PASS_USR = DTL.Shipped_Item_Code;

//?** Determine which Sequel Report to run
CASE;

// IF DTL.Ship to Customer      USR is Not entered
IF DTL.Ship_to_Customer_USR = *ZERO;

// AND DTL.Load ID USR is Not entered
AND DTL.Load_ID_USR = *ZERO;

// AND PAR.Carrier Code is not entered
AND PAR.Carrier_Code = *BLANK;

// AND DTL.Shipped Item Code is Not Entered
AND DTL.Shipped_Item_Code = *ZERO;

CASE;

// IF DTL.Company is not equal to zero
IF DTL.Company <> *ZERO;

// PAR.Select Option = CND.Option 1
PAR.Select_Option = 1;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Select Option = CND.Option 5
PAR.Select_Option = 5;

ENDIF;

//?** Determine which Sequel Report to run
// IF DTL.Ship to Customer      USR is Entered
IF DTL.Ship_to_Customer_USR <> 0;

// PAR.Select Option = CND.Option 2
PAR.Select_Option = 2;

//?** Determine which Sequel Report to run
// IF DTL.Load ID USR is entered
IF DTL.Load_ID_USR <> *ZERO;

// PAR.Select Option = CND.Option 3
PAR.Select_Option = 3;

//?** Determine which Sequel Report to run
// IF PAR.Carrier Code is entered
IF PAR.Carrier_Code <> *BLANK;

// PAR.Select Option = CND.Option 4
PAR.Select_Option = 4;

//?** Determine which Sequel Report to run
// IF DTL.Shipped Item Code is Entered
IF DTL.Shipped_Item_Code <> *ZERO;

// PAR.Select Option = CND.Option 6
PAR.Select_Option = 6;

ENDIF;

// Call program CLP Itm Frt Cmpr-Excel UP.
CALL PROGRAM(CLP Itm Frt Cmpr-Excel UP) ('PMU0UPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(PAR.Text_USR_5);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Customer_Number_Pass_USR);
PARAMETER(PAR.From_Date_Pass_USR);
PARAMETER(PAR.Thru_Date_Pass_USR);
PARAMETER(PAR.Order_Number_1_PASS_USR);
PARAMETER(PAR.Item_Code_PASS_USR);
PARAMETER(PAR.Email_Address);
PARAMETER(PAR.Select_Option);

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Report has been emailed'
MESSAGE(USR3896 *INFO);

// IF *OTHERWISE
IF *OTHERWISE;

// Send information message - 'Call to program ended in error.'
MESSAGE(USR0417 *INFO);

ENDIF;

// DTL.Text USR 5 = CON."   "
DTL.Text_USR_5 = '"   "';

// PAR.Carrier Code = CND.not entered
PAR.Carrier_Code = *BLANK;

// DTL.Ship to Customer      USR = CON.*ZERO
DTL.Ship_to_Customer_USR = *ZERO;

// DTL.Load ID USR = CON.*ZERO
DTL.Load_ID_USR = *ZERO;

// PAR.From Date Pass        USR = CON.*ZERO
PAR.From_Date_Pass_USR = *ZERO;

// PAR.Thru Date Pass        USR = CON.*ZERO
PAR.Thru_Date_Pass_USR = *ZERO;

// PAR.Company Number Pass   USR = CON.*ZERO
PAR.Company_Number_Pass_USR = *ZERO;

// PAR.Customer Number Pass  USR = CON.*ZERO
PAR.Customer_Number_Pass_USR = *ZERO;

// PAR.Order Number 1  PASS  USR = CON.*ZERO
PAR.Order_Number_1_PASS_USR = *ZERO;

// PAR.Email Address = CON.*BLANK
PAR.Email_Address = *BLANK;

