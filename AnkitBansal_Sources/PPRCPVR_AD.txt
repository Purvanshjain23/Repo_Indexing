// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPRCPVR
// ?Date: 14.08.2025 Time: 03:41:40
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('I/C');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('I/C');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(WRK.Allow_Multi_Company);
PARAMETER(WRK.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Load screen

//?R9083 02/16/17 DN-Set Inventory Valuation Grouping.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.ISC Warehouse Company = DTL.ISC Warehouse Company
LCL.ISC_Warehouse_Company = DTL.ISC_Warehouse_Company;

//?Default Grouping with User Company Default if Blanks.
CASE;

// IF LCL.ISC Warehouse Company is Equal to zero
IF LCL.ISC_Warehouse_Company = *ZERO;

CASE;

// IF DTL.ISC Warehouse Code is Blanks
IF DTL.ISC_Warehouse_Code = *BLANK;

// LCL.ISC Warehouse Company = WRK.Company Number
LCL.ISC_Warehouse_Company = WRK.Company_Number;

// IF *OTHERWISE
IF *OTHERWISE;

//?RMC S12531 use warehouses shipping co.
EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
PARAMETER(DTL.ISC_Warehouse_Code);
PARAMETER(LCL.Shipping_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.ISC Warehouse Company = LCL.Shipping Company
LCL.ISC_Warehouse_Company = LCL.Shipping_Company;

ENDIF;

//?Default Grouping with User Company Default if Blanks.
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.ISC_Warehouse_Company);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


ENDIF;

EXECUTE FUNCTION(RTV Desc & Val Alpha  RT) TYPE(RTVOBJ) FILE(PDKMREP)           AC2131892;
PARAMETER(LCL.ISC_Warehouse_Company);
PARAMETER('IVFGROUP');
PARAMETER(DTL.Inv_Valuation_Group_Desc);
PARAMETER(DTL.IVF_Valuation_Grouping);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

CASE;

// IF DTL.IVF Week Ending Date is Not Entered
IF DTL.IVF_Week_Ending_Date = *ZERO;

// DTL.IVF Week Ending Date = CND.eq 20991231
DTL.IVF_Week_Ending_Date = 20991231;

//?R9083 02/16/17 DN-Modified to Also RST by Grouping.
EXECUTE FUNCTION(Rtv Latest Not Posted RT) TYPE(RTVOBJ) FILE(PPBTCPP)           AC1741455;
PARAMETER(DTL.IVF_Valuation_Grouping);
PARAMETER(DTL.IVF_Week_Ending_Date);
{
 //?USER: Processing if Data record not found

 // PAR.IVF Week Ending Date = CON.*ZERO
 PAR.IVF_Week_Ending_Date = *ZERO;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

CASE;

// IF DTL.Print Zeros USR is blank
IF DTL.Print_Zeros_USR = *BLANK;

// DTL.Print Zeros USR = CND.no
DTL.Print_Zeros_USR = 'N';

ENDIF;

//?USER: Validate fields

//?R9083 02/16/17 DN-Modified to Also RST by Grouping.
EXECUTE FUNCTION(Val IVF Date          RT) TYPE(RTVOBJ) FILE(PPBTCPP)           AC1770763;
PARAMETER(DTL.IVF_Valuation_Grouping);
PARAMETER(DTL.IVF_Week_Ending_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

//?R9083 02/22/17 DN-Added New Message to Show Grouping Sts in Msg.
// Send error message - 'Inventory Value File for group &1 not found.'
ERROR(USR4975);
MSGPARM(DTL.IVF_Valuation_Grouping);

ENDIF;

CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

//?F4 on Company
CASE;

// IF PGM.*Cursor field <IS> DTL.ISC Warehouse Company
IF PGM.*Cursor_field = DTL.ISC_Warehouse_Company;

CASE;

// IF WRK.Allow Multi-Company is yes
IF WRK.Allow_Multi_Company = 'Y';

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(DTL.ISC_Warehouse_Company);

ENDIF;

ENDIF;

//?F4 on Whse
CASE;

// IF PGM.*Cursor field <IS> DTL.ISC Warehouse Code
IF PGM.*Cursor_field = DTL.ISC_Warehouse_Code;

// Call program SEL AcctCo/Warehouse   SR.
CALL PROGRAM(SEL AcctCo/Warehouse   SR) ('PMCQSRR');
PARAMETER(DTL.ISC_Warehouse_Code);
PARAMETER(DTL.ISC_Warehouse_Company);

ENDIF;

ENDIF;

//?05/15/07 JRB Removed hard coded companies
EXECUTE FUNCTION(Rtv Plant Co Status   RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1761084;
PARAMETER(DTL.ISC_Warehouse_Company);
PARAMETER(LCL.Plant_Company_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?val co
CASE;

// IF DTL.ISC Warehouse Company is not equal to zero
IF DTL.ISC_Warehouse_Company <> *ZERO;

CASE;

// IF LCL.Plant Company Sts is Plant Company
IF LCL.Plant_Company_Sts = 'P';

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.ISC_Warehouse_Company);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Company not found.'
ERROR(USR2831);
MSGPARM(DTL.ISC_Warehouse_Company);

ENDIF;

//?val co
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Company Name DRV = CON.*BLANK
DTL.Company_Name_DRV = *BLANK;

ENDIF;

//?val whse
CASE;

// IF DTL.ISC Warehouse Code is Warehouse Code not Blank
IF DTL.ISC_Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(Warehouse Desc DRV) TYPE(DRVFLD)                               AC1532477;
PARAMETER(DTL.Warehouse_Desc_DRV);
PARAMETER(DTL.ISC_Warehouse_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

}


CASE;

// IF DTL.Warehouse Desc DRV is equal to blank
IF DTL.Warehouse_Desc_DRV = *BLANK;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.ISC_Warehouse_Code);

ENDIF;

//?val whse
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Warehouse Desc DRV = CON.*BLANK
DTL.Warehouse_Desc_DRV = *BLANK;

ENDIF;

//?val co for whse
CASE;

// IF DTL.ISC Warehouse Company is not equal to zero
IF DTL.ISC_Warehouse_Company <> *ZERO;

// AND DTL.ISC Warehouse Code is Warehouse Code not Blank
AND DTL.ISC_Warehouse_Code <> *BLANK;

//?PK0040 RMC 12/7/6 use Accounting Co sel for validation
EXECUTE FUNCTION(Rtv Acct Co          RT) TYPE(RTVOBJ) FILE(CAADREP)            AC1802492;
PARAMETER(DTL.ISC_Warehouse_Code);
PARAMETER(LCL.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Accounting Company NE DTL.ISC Warehouse Company
IF LCL.Accounting_Company <> DTL.ISC_Warehouse_Company;

// Send error message - 'Warehouse &1 and Acctng Company &2 combo invalid.'
ERROR(USR3675);
MSGPARM(DTL.ISC_Warehouse_Code);
MSGPARM(DTL.ISC_Warehouse_Company);

ENDIF;

ENDIF;

//?R9083 02/16/17 DN-Set Inventory Valuation Grouping.
// LCL.ISC Warehouse Company = DTL.ISC Warehouse Company
LCL.ISC_Warehouse_Company = DTL.ISC_Warehouse_Company;

//?Default Grouping with User Company Default or Warehouse
CASE;

// IF LCL.ISC Warehouse Company is Equal to zero
IF LCL.ISC_Warehouse_Company = *ZERO;

CASE;

// IF DTL.ISC Warehouse Code is Blanks
IF DTL.ISC_Warehouse_Code = *BLANK;

// LCL.ISC Warehouse Company = WRK.Company Number
LCL.ISC_Warehouse_Company = WRK.Company_Number;

// IF *OTHERWISE
IF *OTHERWISE;

//?RMC S12531 use warehouses shipping co.
//?RMC W67377 use warehouses ACCTNG   co.
EXECUTE FUNCTION(Rtv Acct Co          RT) TYPE(RTVOBJ) FILE(CAADREP)            AC1802492;
PARAMETER(DTL.ISC_Warehouse_Code);
PARAMETER(LCL.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.ISC Warehouse Company = LCL.Accounting Company
LCL.ISC_Warehouse_Company = LCL.Accounting_Company;

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Desc & Val Alpha  RT) TYPE(RTVOBJ) FILE(PDKMREP)           AC2131892;
PARAMETER(LCL.ISC_Warehouse_Company);
PARAMETER('IVFGROUP');
PARAMETER(DTL.Inv_Valuation_Group_Desc);
PARAMETER(DTL.IVF_Valuation_Grouping);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: User defined action

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Inventory Value Report');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('I/C');
PARAMETER(*MISSING);
PARAMETER(1);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.System Value Numeric = PAR.PRT Number of Copies
PAR.System_Value_Numeric = PAR.PRT_Number_of_Copies;

//?R9083 06/26/17 DN-Update date conversion due to Synon version difference.
// LCL.Date Out (8,0) USR = DTL.IVF Week Ending Date
LCL.Date_Out_80_USR = DTL.IVF_Week_Ending_Date;

// WRK.Date (Char-8) USR = CVTVAR(LCL.Date Out (8,0) USR)
WRK.Date_Char_8_USR = CVTVAR(LCL.Date_Out_80_USR);

// WRK.Company Number Pass   USR = DTL.ISC Warehouse Company
WRK.Company_Number_Pass_USR = DTL.ISC_Warehouse_Company;

//?Download doc sts and name       1/23/06
CASE;

// IF DTL.Document Name USR is Not Entered
IF DTL.Document_Name_USR = *BLANK;

// PAR.Status - Y or N = CND.no
PAR.Status_Y_or_N = 'N';

//?Download doc sts and name       1/23/06
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Status - Y or N = CND.yes
PAR.Status_Y_or_N = 'Y';

ENDIF;

// WRK.Email addr 1 = DTL.Email Address
WRK.Email_addr_1 = DTL.Email_Address;

// Execute function *Move-Right.
EXECUTE FUNCTION(*Move-Right) TYPE(EXCUSRSRC) ('PDUIUFR');
PARAMETER(WRK.Email_Addr_2);
PARAMETER(DTL.Email_Address);
{
 C                     MOVE #IPANA    #OO9NA
}


//?R9083 02/20/17 DN-Moved PAR to PAR Array List & Added Group & Grp Dsc Parm
// Call program Prt Inv Stk Value Rpt UP.
SBMJOB;
CALL PROGRAM(Prt Inv Stk Value Rpt UP) ('PPRBUPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(WRK.Company_Number_Pass_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(DTL.ISC_Warehouse_Code);
PARAMETER(WRK.Date_Char_8_USR);
PARAMETER(DTL.Print_Zeros_USR);
PARAMETER(PAR.Status_Y_or_N);
PARAMETER(DTL.Document_Name_USR);
PARAMETER('N');
PARAMETER(WRK.Email_addr_1);
PARAMETER(WRK.Email_Addr_2);
PARAMETER(DTL.IVF_Valuation_Grouping);
PARAMETER(DTL.Inv_Valuation_Group_Desc);
SBMJOBOVR JOB(INVSTKVAL);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

ENDIF;

