// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKPZXFR
// ?Date: 14.08.2025 Time: 02:52:28
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?H16853 ISE 11/02/20 - Increased the Buy Order Number field
//?                      length from 5 to 7.
//?E00144 06/16/2008  Slm Add EUT/KOA TO head received for Avg
//?                   get the EUT/KOA from the Buy Order LOad
//?Spread the Net BOL Weight from the (IN - OUT) Records
//?  Calculate Net Head Received =  sum(mkt,sub head) + sum(mkt,sub doa)
//?  Calculate Avg Live Wgt = ((In - Out) - sum(resale weight))/net head
//?  BOL Live Weight Rcvd  = Avg Live Wgt * sum(Head Received)
// PAR.Resale Tattoo Wt      USR = CON.*ZERO
PAR.Resale_Tattoo_Wt_USR = *ZERO;

// PAR.Head Subj & Mkt Total USR = CON.*ZERO
PAR.Head_Subj_Mkt_Total_USR = *ZERO;

// PAR.Head Subj & Mkt DOA   USR = CON.*ZERO
PAR.Head_Subj_Mkt_DOA_USR = *ZERO;

// PAR.Tattoo Number USR = CON.*ZERO
PAR.Tattoo_Number_USR = *ZERO;

EXECUTE FUNCTION(Rtv BOL for Spread    RT) TYPE(RTVOBJ) FILE(PKEJCPP)           AB1214391;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.PL_Location_Code);
PARAMETER(PAR.BOLW_Movement_Number);
PARAMETER('I');
PARAMETER(PAR.BOLW_Scale_Wt_IN_USR);
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(Rtv BOL for Spread    RT) TYPE(RTVOBJ) FILE(PKEJCPP)           AB1214391;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.PL_Location_Code);
PARAMETER(PAR.BOLW_Movement_Number);
PARAMETER('O');
PARAMETER(PAR.BOLW_Scale_Wt_OUT_USR);
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(Rtv BOL Ttt for Sprd  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1214394;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.Resale_Tattoo_Wt_USR);
PARAMETER(PAR.Head_Subj_Mkt_Total_USR);
PARAMETER(PAR.Head_Subj_Mkt_DOA_USR);
PARAMETER(PAR.Tattoo_Number_USR);
PARAMETER(PAR.Kill_Date_Usr);
{
 //?USER: Initialize routine

 // WRK.TH Head Received = CON.*ZERO
 WRK.TH_Head_Received = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.TH Hog Class Type is Resale
 IF DB1.TH_Hog_Class_Type = 'R';

 // PAR.Resale Tattoo Wt      USR = PAR.Resale Tattoo Wt      USR + DB1.TH Live Wgt
 PAR.Resale_Tattoo_Wt_USR = PAR.Resale_Tattoo_Wt_USR + DB1.TH_Live_Wgt;

 ENDIF;

 CASE;

 // IF DB1.TH Hog Class Type is Subject
 IF DB1.TH_Hog_Class_Type = 'S';

 // OR DB1.TH Hog Class Type is Market
 OR DB1.TH_Hog_Class_Type = 'M';

 // PAR.Head Subj & Mkt Total USR = PAR.Head Subj & Mkt Total USR + DB1.TH Head Rece
 PAR.Head_Subj_Mkt_Total_USR = PAR.Head_Subj_Mkt_Total_USR + DB1.TH_Head_Received;

 // PAR.Head Subj & Mkt DOA   USR = PAR.Head Subj & Mkt DOA   USR + DB1.TH Dead On A
 PAR.Head_Subj_Mkt_DOA_USR = PAR.Head_Subj_Mkt_DOA_USR + DB1.TH_Dead_On_Arrival;

 //?Save the Tattoo with the most head
 CASE;

 // IF DB1.TH Head Received GT WRK.TH Head Received
 IF DB1.TH_Head_Received > WRK.TH_Head_Received;

 // PAR.Tattoo Number USR = DB1.TH Tattoo Number
 PAR.Tattoo_Number_USR = DB1.TH_Tattoo_Number;

 // PAR.Kill Date Usr = DB1.TH Kill Date
 PAR.Kill_Date_Usr = DB1.TH_Kill_Date;

 // WRK.TH Head Received = DB1.TH Head Received
 WRK.TH_Head_Received = DB1.TH_Head_Received;

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Eut/Koa Total     RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1287305;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(LCL.BOL_Head_EUT_KOA);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.Head Subj & Mkt Total USR = PAR.Head Subj & Mkt Total USR + LCL.BOL Head EUT/KOA
PAR.Head_Subj_Mkt_Total_USR = PAR.Head_Subj_Mkt_Total_USR + LCL.BOL_Head_EUT_KOA;

// WRK.Weight Tot USR = PAR.BOLW Scale Wt IN      USR - PAR.BOLW Scale Wt OUT     U
WRK.Weight_Tot_USR = PAR.BOLW_Scale_Wt_IN_USR - PAR.BOLW_Scale_Wt_OUT_USR;

// WRK.Weight Total Usr 2 = WRK.Weight Tot USR - PAR.Resale Tattoo Wt      USR
WRK.Weight_Total_Usr_2 = WRK.Weight_Tot_USR - PAR.Resale_Tattoo_Wt_USR;

// Compute: Avg live wt
WRK.TH_Avg_Live_Wgt = WRK.Weight_Total_Usr_2 / ( PAR.Head_Subj_Mkt_Total_USR                       +
+ PAR.Head_Subj_Mkt_DOA_USR ) 'H';

// Compute: live wt round df
PAR.Weight_Rounding_Diff_USR = WRK.TH_Avg_Live_Wgt * ( PAR.Head_Subj_Mkt_Total_USR                 +
+ PAR.Head_Subj_Mkt_DOA_USR ) 'H';

// PAR.Weight Rounding Diff  USR = WRK.Weight Total Usr 2 - PAR.Weight Rounding Diff  USR
PAR.Weight_Rounding_Diff_USR = WRK.Weight_Total_Usr_2 - PAR.Weight_Rounding_Diff_USR;

// WRK.BOL Live Wgt Received = CON.*ZERO
WRK.BOL_Live_Wgt_Received = *ZERO;

EXECUTE FUNCTION(Rtv/Chg BOL Spr TH,TD RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1214412;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(WRK.TH_Avg_Live_Wgt);
PARAMETER(WRK.BOL_Live_Wgt_Received);
PARAMETER(PAR.Tattoo_Number_USR);
PARAMETER(PAR.Weight_Rounding_Diff_USR);
PARAMETER(PAR.Kill_Date_Usr);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.TH Hog Class Type is Not Resale
 IF DB1.TH_Hog_Class_Type = 'M'/'S';

 // WRK.TH Live Wgt = PAR.TH Avg Live Wgt * DB1.TH Head Received *Rounded
 WRK.TH_Live_Wgt = PAR.TH_Avg_Live_Wgt * DB1.TH_Head_Received 'H';

 // WRK.TH DOA Weight = PAR.TH Avg Live Wgt * DB1.TH Dead On Arrival *Rounded
 WRK.TH_DOA_Weight = PAR.TH_Avg_Live_Wgt * DB1.TH_Dead_On_Arrival 'H';

 CASE;

 // IF DB1.TH Tattoo Number EQ PAR.Tattoo Number USR
 IF DB1.TH_Tattoo_Number = PAR.Tattoo_Number_USR;

 // AND DB1.TH Kill Date EQ PAR.Kill Date Usr
 AND DB1.TH_Kill_Date = PAR.Kill_Date_Usr;

 // WRK.TH Live Wgt = WRK.TH Live Wgt + PAR.Weight Rounding Diff  USR
 WRK.TH_Live_Wgt = WRK.TH_Live_Wgt + PAR.Weight_Rounding_Diff_USR;

 ENDIF;

 //?*----------------------------------------------------------------*
 //?* 08/08/00 PKP 1) Added the Reset of Kill Balancing Status to
 //?*                 require balacing of the Tattoo again after the
 //?*                 Weights have changed.
 //?*              2) Added Kill Balancing Status as a parm in the
 //?*                 CHGOBJ for Tattoo Header.
 //?* 08/30/02 PKP 1) Only change the Kill Balancing Status to Error
 //?*                 if the Tattoo is unpaid.
 //?Reset Kill Balancing Status.
 CASE;

 // IF DB1.TH Kill Balancing Sts is Balance
 IF DB1.TH_Kill_Balancing_Sts = 'B';

 // AND DB1.THP Process Code is NE Payment
 AND DB1.THP_Process_Code <> 'PAYMNT';

 // LCL.TH Kill Balancing Sts = CND.Error
 LCL.TH_Kill_Balancing_Sts = 'E';

 //?Reset Kill Balancing Status.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.TH Kill Balancing Sts = DB1.TH Kill Balancing Sts
 LCL.TH_Kill_Balancing_Sts = DB1.TH_Kill_Balancing_Sts;

 ENDIF;

 EXECUTE FUNCTION(Chg Live,Avg Live Wt  CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1214413;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.TH_Live_Wgt);
 PARAMETER(PAR.TH_Avg_Live_Wgt);
 PARAMETER(LCL.TH_Kill_Balancing_Sts);
 PARAMETER(WRK.TH_DOA_Weight);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 //?*-------------------------------------------------------------*
 EXECUTE FUNCTION(Rtv/Chg TD Wgt Spread RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1214430;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(PAR.TH_Avg_Live_Wgt);
 PARAMETER(PAR.Weight_Rounding_Diff_USR);
 PARAMETER(PAR.Tattoo_Number_USR);
 {
  //?USER: Initialize routine

  // WRK.First Time Flag Usr = CND.Yes
  WRK.First_Time_Flag_Usr = 'Y';

  //?USER: Process Data record

  // WRK.TD Live Wgt = PAR.TD Avg Live Wgt * DB1.TD Pen Head *
  WRK.TD_Live_Wgt = PAR.TD_Avg_Live_Wgt * DB1.TD_Pen_Head;

  //?e00144 slm 063008 during test of this project
  //?e00144 during this project found that the diff was being add
  //?    to every record, should only be add to 1
  //?    was causing the weight to be increased on every record
  //?    first time logicl I put in place was not being used
  //?e00144 slm 071408 Support issue div by zero due to Held Over on
  //?on the Head received from the pen was zero
  CASE;

  // IF WRK.First Time Flag Usr is Yes
  IF WRK.First_Time_Flag_Usr = 'Y';

  CASE;

  // IF DB1.TH Tattoo Number EQ PAR.Tattoo Number USR
  IF DB1.TH_Tattoo_Number = PAR.Tattoo_Number_USR;

  CASE;

  // IF DB1.TD Pen Head is *Zeros
  IF DB1.TD_Pen_Head = *ZERO;

  // WRK.Avg Live Wgt Usr 4 = CON.*ZERO
  WRK.Avg_Live_Wgt_Usr_4 = *ZERO;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.TD Live Wgt = WRK.TD Live Wgt + PAR.Weight Rounding Diff  USR
  WRK.TD_Live_Wgt = WRK.TD_Live_Wgt + PAR.Weight_Rounding_Diff_USR;

  // WRK.Avg Live Wgt Usr 4 = WRK.TD Live Wgt / DB1.TD Pen Head *
  WRK.Avg_Live_Wgt_Usr_4 = WRK.TD_Live_Wgt / DB1.TD_Pen_Head;

  // WRK.First Time Flag Usr = CND.No
  WRK.First_Time_Flag_Usr = 'N';

  ENDIF;

  EXECUTE FUNCTION(Chg Tattoo Detail     CH) TYPE(CHGOBJ) FILE(PKA2CPP)           AB1101751;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.TD_Sequence_Number);
  PARAMETER(WRK.TD_Live_Wgt);
  PARAMETER(DB1.TD_Pen_Head);
  PARAMETER(DB1.TD_Yard_Dead);
  PARAMETER(DB1.TD_Held_Over);
  PARAMETER(DB1.TD_Held_Over_Status);
  PARAMETER(DB1.TD_Drive_Time);
  PARAMETER(DB1.TD_Drive_Hour);
  PARAMETER(DB1.TD_Drive_Card_Number);
  PARAMETER(WRK.Avg_Live_Wgt_Usr_4);
  PARAMETER(DB1.TD_Gen_Bal_To_Kill);
  PARAMETER(DB1.TD_Recs_Created_for_HO);
  PARAMETER(DB1.TD_User_Status_2);
  PARAMETER(DB1.TD_User_Status_3);
  PARAMETER(DB1.TD_User_Date_1);
  PARAMETER(DB1.TD_User_Date_2);
  PARAMETER(DB1.TD_Drive_Date);
  PARAMETER(DB1.Pen_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(DB1.TDP_Process_Code);
  PARAMETER(DB1.Held_Over_Pen_Company_Num);
  PARAMETER(DB1.Held_Over_Pen_Number);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Chg Tattoo Detail     CH) TYPE(CHGOBJ) FILE(PKA2CPP)           AB1101751;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.TD_Sequence_Number);
  PARAMETER(WRK.TD_Live_Wgt);
  PARAMETER(DB1.TD_Pen_Head);
  PARAMETER(DB1.TD_Yard_Dead);
  PARAMETER(DB1.TD_Held_Over);
  PARAMETER(DB1.TD_Held_Over_Status);
  PARAMETER(DB1.TD_Drive_Time);
  PARAMETER(DB1.TD_Drive_Hour);
  PARAMETER(DB1.TD_Drive_Card_Number);
  PARAMETER(PAR.TD_Avg_Live_Wgt);
  PARAMETER(DB1.TD_Gen_Bal_To_Kill);
  PARAMETER(DB1.TD_Recs_Created_for_HO);
  PARAMETER(DB1.TD_User_Status_2);
  PARAMETER(DB1.TD_User_Status_3);
  PARAMETER(DB1.TD_User_Date_1);
  PARAMETER(DB1.TD_User_Date_2);
  PARAMETER(DB1.TD_Drive_Date);
  PARAMETER(DB1.Pen_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(DB1.TDP_Process_Code);
  PARAMETER(DB1.Held_Over_Pen_Company_Num);
  PARAMETER(DB1.Held_Over_Pen_Number);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Chg Tattoo Detail     CH) TYPE(CHGOBJ) FILE(PKA2CPP)           AB1101751;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.TD_Sequence_Number);
  PARAMETER(WRK.TD_Live_Wgt);
  PARAMETER(DB1.TD_Pen_Head);
  PARAMETER(DB1.TD_Yard_Dead);
  PARAMETER(DB1.TD_Held_Over);
  PARAMETER(DB1.TD_Held_Over_Status);
  PARAMETER(DB1.TD_Drive_Time);
  PARAMETER(DB1.TD_Drive_Hour);
  PARAMETER(DB1.TD_Drive_Card_Number);
  PARAMETER(PAR.TD_Avg_Live_Wgt);
  PARAMETER(DB1.TD_Gen_Bal_To_Kill);
  PARAMETER(DB1.TD_Recs_Created_for_HO);
  PARAMETER(DB1.TD_User_Status_2);
  PARAMETER(DB1.TD_User_Status_3);
  PARAMETER(DB1.TD_User_Date_1);
  PARAMETER(DB1.TD_User_Date_2);
  PARAMETER(DB1.TD_Drive_Date);
  PARAMETER(DB1.Pen_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(DB1.TDP_Process_Code);
  PARAMETER(DB1.Held_Over_Pen_Company_Num);
  PARAMETER(DB1.Held_Over_Pen_Number);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  ENDIF;

 }

 EXECUTE FUNCTION(Rtv/Chg for TST Wgt   RT) TYPE(RTVOBJ) FILE(PKB3CPP)           AB1214442;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(PAR.TH_Avg_Live_Wgt);
 PARAMETER(PAR.Tattoo_Number_USR);
 PARAMETER(PAR.Weight_Rounding_Diff_USR);
 {
  //?USER: Initialize routine

  // WRK.First Time Flag Usr = CND.Yes
  WRK.First_Time_Flag_Usr = 'Y';

  //?USER: Process Data record

  //?e00144 slm 063008 during test of this project
  //?e00144 during this project found that the diff was being add
  //?    to every record, should only be add to 1
  //?    was causing the weight to be increased on every record
  //?    first time logicl I put in place was not being used
  // WRK.TST Wgt = PAR.TH Avg Live Wgt * DB1.TST Head *
  WRK.TST_Wgt = PAR.TH_Avg_Live_Wgt * DB1.TST_Head;

  CASE;

  // IF WRK.First Time Flag Usr is Yes
  IF WRK.First_Time_Flag_Usr = 'Y';

  CASE;

  // IF DB1.TH Tattoo Number EQ PAR.Tattoo Number USR
  IF DB1.TH_Tattoo_Number = PAR.Tattoo_Number_USR;

  // WRK.TST Wgt = WRK.TST Wgt + PAR.Weight Rounding Diff  USR
  WRK.TST_Wgt = WRK.TST_Wgt + PAR.Weight_Rounding_Diff_USR;

  // WRK.First Time Flag Usr = CND.No
  WRK.First_Time_Flag_Usr = 'N';

  ENDIF;

  ENDIF;

  EXECUTE FUNCTION(Chg Tattoo Scale Tkt  CH) TYPE(CHGOBJ) FILE(PKB3CPP)           AB1113770;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.TST_Sequence_Number);
  PARAMETER(DB1.TST_Head);
  PARAMETER(WRK.TST_Wgt);
  PARAMETER(DB1.TST_Wgt_Date);
  PARAMETER(DB1.TST_Wgt_Time);
  PARAMETER(DB1.TST_Wgt_Hour);
  PARAMETER(DB1.TST_Last_Zero_Date);
  PARAMETER(DB1.TST_Last_Zero_Time);
  PARAMETER(DB1.TST_Record_Created_Status);
  PARAMETER(DB1.Pen_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 //?Accum to update BOL Live weight received
 // PAR.BOL Live Wgt Received = PAR.BOL Live Wgt Received + WRK.TH Live Wgt
 PAR.BOL_Live_Wgt_Received = PAR.BOL_Live_Wgt_Received + WRK.TH_Live_Wgt;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Accum to update BOL Live weight received
 // PAR.BOL Live Wgt Received = PAR.BOL Live Wgt Received + DB1.TH Live Wgt
 PAR.BOL_Live_Wgt_Received = PAR.BOL_Live_Wgt_Received + DB1.TH_Live_Wgt;

 ENDIF;

}


EXECUTE FUNCTION(Rtv/Chg Bol Live Wt   RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1214420;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(WRK.BOL_Live_Wgt_Received);
PARAMETER(WRK.DT_Delivered_Head);
{
 //?USER: Process Data record

 // WRK.BOL Head Received = DB1.BOL Head Received
 WRK.BOL_Head_Received = DB1.BOL_Head_Received;

 // WRK.BOL Live Wgt Received = PAR.BOL Live Wgt Received
 WRK.BOL_Live_Wgt_Received = PAR.BOL_Live_Wgt_Received;

 //?Calculate freight based on the unit of measure
 // WRK.BOL Freight Amt = DB1.BOL Freight Amt
 WRK.BOL_Freight_Amt = DB1.BOL_Freight_Amt;

 EXECUTE FUNCTION(Chk tatto Paid for Bol RT) TYPE(RTVOBJ) FILE(PKA1CPP)          AB1183687;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(WRK.Tattoo_is_paid_Usr);
 PARAMETER(WRK.Held_Over_Records_Y_N);
 PARAMETER(WRK.Tot_Frt_Spdb_aft_pay_Usr);
 {
  //?USER: Initialize routine

  // PAR.Tot Frt Spdb aft pay Usr = CON.*ZERO
  PAR.Tot_Frt_Spdb_aft_pay_Usr = *ZERO;

  // PAR.Held Over Records Y/N = CND.No
  PAR.Held_Over_Records_Y_N = 'N';

  // PAR.Tattoo is paid Usr = CND.No
  PAR.Tattoo_is_paid_Usr = 'N';

  //?USER: Process Data record

  //?If one tattoo is paid but freight was spread then accumulate
  //?what is paid, for held over respread problem
  //?when this probelm goes away, then just flag that there is one paid
  CASE;

  // IF DB1.TH Payment Sts is Paid Anything
  IF DB1.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

  //?CHECK IF FREIGHT AMOUNT IS IN RECORD
  CASE;

  // IF DB1.TH Freight Amount is Not Zeros
  IF DB1.TH_Freight_Amount <> *ZERO;

  // PAR.Tattoo is paid Usr = CND.Yes
  PAR.Tattoo_is_paid_Usr = 'Y';

  ENDIF;

  // PAR.Tot Frt Spdb aft pay Usr = PAR.Tot Frt Spdb aft pay Usr + DB1.TH Freight Amo
  PAR.Tot_Frt_Spdb_aft_pay_Usr = PAR.Tot_Frt_Spdb_aft_pay_Usr + DB1.TH_Freight_Amount;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?CHECK FOR HELD OVER RECORD
  CASE;

  // IF DB1.TH Held Over Record is Yes
  IF DB1.TH_Held_Over_Record = 'Y';

  // OR DB1.TH Held Over is greater than 0
  OR DB1.TH_Held_Over > *ZERO;

  // PAR.Held Over Records Y/N = CND.Yes
  PAR.Held_Over_Records_Y_N = 'Y';

  ENDIF;

  ENDIF;

 }

 CASE;

 // IF DB1.BOL Freight Allocation is Freight is Allocated
 IF DB1.BOL_Freight_Allocation = 'Y';

 // AND WRK.Tattoo is paid Usr is Yes
 AND WRK.Tattoo_is_paid_Usr = 'Y';

 // IF DB1.BOL Trucker Payment Sts is Paid Trucker
 IF DB1.BOL_Trucker_Payment_Sts = 'PT';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Clc Freight Amt       XF.
 CALL PROGRAM(Clc Freight Amt       XF) ('PKQ5XFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.BOL_Freight_UOM);
 PARAMETER(DB1.BOL_Freight_Unit_Amt);
 PARAMETER(WRK.BOL_Freight_Amt);
 PARAMETER(DB1.BOL_Freight_Allocation);
 PARAMETER(WRK.BOL_Head_Received);
 PARAMETER(WRK.BOL_Live_Wgt_Received);

 ENDIF;

 CASE;

 // IF WRK.BOL Freight Amt is Not Zeros
 IF WRK.BOL_Freight_Amt <> *ZERO;

 // AND WRK.BOL Head Received is Greater then Zero
 AND WRK.BOL_Head_Received > *ZERO;

 // AND DB1.BOL Trucker Payment Sts is Blank
 AND DB1.BOL_Trucker_Payment_Sts = *BLANK;

 // WRK.BOL Trucker Payment Sts = CND.Select Trucker
 WRK.BOL_Trucker_Payment_Sts = 'ST';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.BOL Trucker Payment Sts = DB1.BOL Trucker Payment Sts
 WRK.BOL_Trucker_Payment_Sts = DB1.BOL_Trucker_Payment_Sts;

 ENDIF;

 EXECUTE FUNCTION(Chg Buy Order Detail  CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1100531;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.BOL_Kill_Date);
 PARAMETER(DB1.BOL_Pln_Delv_Start_Time);
 PARAMETER(DB1.BOL_Pln_Delv_End_Time);
 PARAMETER(DB1.BOL_Pln_Head_Delv);
 PARAMETER(DB1.BOL_Shipped_Wgt);
 PARAMETER(DB1.BOL_Pln_Delv_Date);
 PARAMETER(DB1.BOL_Freight_UOM);
 PARAMETER(DB1.BOL_Freight_Unit_Amt);
 PARAMETER(WRK.BOL_Freight_Amt);
 PARAMETER(DB1.BOL_Freight_Allocation);
 PARAMETER(WRK.BOL_Head_Received);
 PARAMETER(WRK.BOL_Live_Wgt_Received);
 PARAMETER(WRK.BOL_Trucker_Payment_Sts);
 PARAMETER(DB1.BOL_Trucker_Check_Number);
 PARAMETER(DB1.BOL_Trucker_Check_Date);
 PARAMETER(DB1.BOL_AP_Voucher);
 PARAMETER(DB1.BOL_Trailer);
 PARAMETER(DB1.BOL_Freight_Exp_Paid_By);
 PARAMETER(DB1.BOL_Scheduled_Kill_Shift);
 PARAMETER('S');
 PARAMETER(DB1.BOL_Violated_Auth_Tme_Sts);
 PARAMETER(DB1.TRK_Trucker_Code);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 // PAR.DT Delivered Head = WRK.BOL Shipped Head
 PAR.DT_Delivered_Head = WRK.BOL_Shipped_Head;

}


EXECUTE FUNCTION(Rtv/Chg BOLW Sts      RT) TYPE(RTVOBJ) FILE(PKEJCPP)           AB1214557;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.PL_Location_Code);
PARAMETER(PAR.BOLW_Movement_Number);
PARAMETER('I');
PARAMETER('S');
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Buy Order Load Wt CH) TYPE(CHGOBJ) FILE(PKEJCPP)           AB1213883;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.BOLW_Movement_Number);
 PARAMETER(DB1.BOLW_Weight_Type);
 PARAMETER(DB1.BOLW_Scale_Weight);
 PARAMETER(DB1.BOLW_Scale_Weight_Date);
 PARAMETER(DB1.BOLW_Scale_Weight_Time);
 PARAMETER(PAR.BOLW_Spread_Status);
 PARAMETER(DB1.BOLW_Unused_Sts_1);
 PARAMETER(DB1.BOLW_Unused_Sts_2);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


EXECUTE FUNCTION(Rtv/Chg BOLW Sts      RT) TYPE(RTVOBJ) FILE(PKEJCPP)           AB1214557;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.PL_Location_Code);
PARAMETER(PAR.BOLW_Movement_Number);
PARAMETER('O');
PARAMETER('S');
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Buy Order Load Wt CH) TYPE(CHGOBJ) FILE(PKEJCPP)           AB1213883;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.BOLW_Movement_Number);
 PARAMETER(DB1.BOLW_Weight_Type);
 PARAMETER(DB1.BOLW_Scale_Weight);
 PARAMETER(DB1.BOLW_Scale_Weight_Date);
 PARAMETER(DB1.BOLW_Scale_Weight_Time);
 PARAMETER(PAR.BOLW_Spread_Status);
 PARAMETER(DB1.BOLW_Unused_Sts_1);
 PARAMETER(DB1.BOLW_Unused_Sts_2);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


