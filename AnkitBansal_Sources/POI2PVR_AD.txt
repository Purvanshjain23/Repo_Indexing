// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POI2PVR
// ?Date: 14.08.2025 Time: 03:37:32
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

//?***** Change Log and Comments
DO;

//?*****
//?** 11/03/2017 RMC WHD 24841 S12015  chk multi company for company input
//?*****
//?** 01/06/2017 JBB E8562  Hard code jobq to PORKDIVQ2 if not going
//?**            night job queue.
//?*****
//?*****
//?** 09/26/2013 SLM Only made changes to perform testing w/o going
//?** to batch processing. Now have put the code back.
//?*****
//?*****
//?** 07/21/08 SLM E00143 Allow selection and summary at the Parent
//?** or the A/R Customer, or at the Ship To Customer
//?*****
//?*****
//?** 03/24/08 SAZ E00068 Customer number F4 did not work.
//?** Accrual Type has been added as a required field
//?*****
//?*****
//?** 06/18/2007 LJB DLY029
//?** Accrual Type has been added as a required field
//?*****
ENDDO;

//?USER: Load screen

CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

// DTL.Company Number = PAR.Company Number
DTL.Company_Number = PAR.Company_Number;

// DTL.Company Number CDE = PAR.Company Number
DTL.Company_Number_CDE = PAR.Company_Number;

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

// DTL.Report Type = CND.Summary
DTL.Report_Type = 'S';

// DTL.Condition Desc. 1  USR = Condition name of DTL.Report Type
DTL.Condition_Desc_1_USR = RTVCND(DTL.Report_Type);

// DTL.Accrual Code = CND.Not Entered
DTL.Accrual_Code = *BLANK;

EXECUTE FUNCTION(RTV Accrual Descript   RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1285204;
PARAMETER(DTL.Accrual_Code);
PARAMETER(DTL.Accrual_Description_DRV);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Accrual Type added as a required field        06/18/2007 LJB DLY029
// DTL.Accrual Type = CND.Trade Fund
DTL.Accrual_Type = 'TF';

// DTL.Accrual Description = Condition name of DTL.Accrual Type
DTL.Accrual_Description = RTVCND(DTL.Accrual_Type);

// DTL.Ledger Accrual (Y/N) = CND.yes
DTL.Post_to_G_L_Y_N = 'Y';

ENDIF;

// DTL.Company Number = DTL.Company Number CDE
DTL.Company_Number = DTL.Company_Number_CDE;

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Validate fields

//?VAL: Actual Ship Date Range
CASE;

// IF DTL.Date From             USR is Not Entered
IF DTL.Date_From_USR = *ZERO;

// Send error message - 'Date must be entered.'
ERROR(USR0231);
MSGPARM(DTL.Date_From_USR);

//?VAL: Actual Ship Date Range
// IF DTL.Date To               USR is Not Entered
IF DTL.Date_To_USR = *ZERO;

// Send error message - 'Date must be entered.'
ERROR(USR0231);
MSGPARM(DTL.Date_To_USR);

//?VAL: Actual Ship Date Range
// IF DTL.Date To               USR LT DTL.Date From             USR
IF DTL.Date_To_USR < DTL.Date_From_USR;

// Send error message - '"To Date" cannot be less than the "From Date".'
ERROR(USR2719);

ENDIF;

//?** F4 to prompt
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Parent Customer
IF PGM.*Cursor_field = DTL.Parent_Customer;

// Call program SEL Parent Customer    SR.
CALL PROGRAM(SEL Parent Customer    SR) ('PDWBSRR');
PARAMETER(DTL.Parent_Customer);

// IF PGM.*Cursor field <IS> DTL.A/R Customer Number
IF PGM.*Cursor_field = DTL.AR_Customer_Number;

// Call program SEL A/R Customer       SR.
CALL PROGRAM(SEL A/R Customer       SR) ('PDXESRR');
PARAMETER(DTL.AR_Customer_Number);

// IF PGM.*Cursor field <IS> DTL.Ship To Customer
IF PGM.*Cursor_field = DTL.Ship_To_Customer;

// Call program SEL Ship To Customer   SR.
CALL PROGRAM(SEL Ship To Customer   SR) ('PDR5SRR');
PARAMETER(DTL.Ship_To_Customer);

// IF PGM.*Cursor field <IS> DTL.Accrual Code
IF PGM.*Cursor_field = DTL.Accrual_Code;

// Call program SEL Acrl Code by/REnt SR.
CALL PROGRAM(SEL Acrl Code by/REnt SR) ('PNNGSRR');
PARAMETER('P');
PARAMETER(DTL.Accrual_Code);

// IF PGM.*Cursor field <IS> DTL.Company Number CDE
IF PGM.*Cursor_field = DTL.Company_Number_CDE;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(DTL.Company_Number);

// DTL.Company Number CDE = DTL.Company Number
DTL.Company_Number_CDE = DTL.Company_Number;

ENDIF;

ENDIF;

// DTL.Company Number = DTL.Company Number CDE
DTL.Company_Number = DTL.Company_Number_CDE;

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


CASE;

// IF DTL.*CMD key is Select Dwnload & Email
IF DTL.*CMD_key = '06';

// AND DTL.Report Type is Detail
AND DTL.Report_Type = 'D';

// IF DTL.*CMD key is Select Dwnload & Email
IF DTL.*CMD_key = '06';

// Send error message - 'Function not allowed.'
ERROR(USR1833);

ENDIF;

//?CALC: Screen function fields

//?PARENT NAME
EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(DTL.Parent_Customer);
PARAMETER(DTL.Parent_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?A/R NAME
EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.A_R_Customer_Name_Usr);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?SHIP TO NAME
EXECUTE FUNCTION(Ship To Name          DRV) TYPE(DRVFLD)                        AC1573561;
PARAMETER(DTL.Ship_To_Name_DRV);
PARAMETER(DTL.Ship_To_Customer);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// DTL.Condition Desc. 1  USR = Condition name of DTL.Report Type
DTL.Condition_Desc_1_USR = RTVCND(DTL.Report_Type);

EXECUTE FUNCTION(Accrual Description DRV) TYPE(DRVFLD)                          AC1706268;
PARAMETER(DTL.Accrual_Description_DRV);
PARAMETER(DTL.Accrual_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Accrual Descript   RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1285204;
 PARAMETER(PAR.Accrual_Code);
 PARAMETER(PAR.Accrual_Description_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?** Accrual Type added as a required field     06/18/2007 LJB DLY029
// DTL.Accrual Description = Condition name of DTL.Accrual Type
DTL.Accrual_Description = RTVCND(DTL.Accrual_Type);

//?USER: Validate relations

EXECUTE FUNCTION(Rtv Plant Co Status   RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1761084;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(LCL.Plant_Company_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Validate company
CASE;

// IF DTL.Company Number is Equal to zero
IF DTL.Company_Number = *ZERO;

// DTL.Company Name DRV = CON.*ALL
DTL.Company_Name_DRV = *ALL;

//?05/11/07 JRB Removed hard coded companies
//?Validate company
// IF LCL.Plant Company Sts is Plant Company
IF LCL.Plant_Company_Sts = 'P';

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?Validate company
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Company Name DRV = CON.*BLANK
DTL.Company_Name_DRV = *BLANK;

// Send error message - 'Company Number not found'
ERROR(USR0163);

ENDIF;

//?** Validate Ship To #, if it is entered
CASE;

// IF DTL.Ship To Customer is not equal to zero
IF DTL.Ship_To_Customer <> *ZERO;

CASE;

// IF DTL.Ship To Name          DRV is blanks
IF DTL.Ship_To_Name_DRV = *BLANK;

// Send error message - 'Customer Master not found.'
ERROR(USR0170);
MSGPARM(DTL.Ship_To_Customer);

ENDIF;

ENDIF;

//?** Accrual Type is required.            06/18/2007 LJB DLY029
CASE;

// IF DTL.Accrual Type is *ALL values
IF DTL.Accrual_Type = 'TF'/'CM'/'DA'/'CR'/'TX'/'BG'/'PR'/'IF'/'PF'/'PC'/'FA'/'SA'/'CC'             +
/'SF'/'WF'/'CF'/'LF'/'PD';

//?** Accrual Type is required.            06/18/2007 LJB DLY029
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Accrual Type Not Found or not entered.'
ERROR(USR3738);
MSGPARM(DTL.Accrual_Type);

ENDIF;

//?** Accrual Code is now an optional field     06/18/2007 LJB DLY029
CASE;

// IF DTL.Accrual Code is Entered
IF DTL.Accrual_Code <> *BLANK;

EXECUTE FUNCTION(RTV Accrual Descript   RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1285204;
PARAMETER(DTL.Accrual_Code);
PARAMETER(DTL.Accrual_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.Accrual Description DRV is equal to blank
IF DTL.Accrual_Description_DRV = *BLANK;

// Send error message - 'Accrual Program Code not found.'
ERROR(USR1514);
MSGPARM(DTL.Accrual_Code);

ENDIF;

ENDIF;

//?USER: User defined action

// DTL.Company Number = DTL.Company Number CDE
DTL.Company_Number = DTL.Company_Number_CDE;

CASE;

// IF DTL.*CMD key is Select Dwnload & Email
IF DTL.*CMD_key = '06';

// Call program Pmt Enter Email Addr  PV.
CALL PROGRAM(Pmt Enter Email Addr  PV) ('POWGPVR');
PARAMETER(LCL.Email_Address);

CASE;

// IF LCL.Email Address is Entered
IF LCL.Email_Address <> *BLANK;

//?NO REPORT ON EMAIL SEND THE DOWNLOAD FILES ONLY
//?set the copies to 1 for the default
// Retrieve message - 'JOB(&1) jobq(&2) log(&3) hold(&4)'
PGM.*Sbmjob_override_string = RTVMSG(USR2684);
PARAMETER('PRTCSTACRU');
PARAMETER('PORKDIVQ2');
PARAMETER(LCL.Log);
PARAMETER(LCL.Hold);

// WRK.Copies NBR USR = CON.1
WRK.Copies_NBR_USR = 1;

//?** Item Type Code contains the Accrual Code and Quality Level
//?** contains the Accrual type
//?Place the Accrual code in the Item Type code on the array
//?Place the Accrual type in the Quality level on the array
//?Build the Break Field
CASE;

// IF DTL.Ship To Customer is not equal to zero
IF DTL.Ship_To_Customer <> *ZERO;

// WRK.WF Sales History - BrkTyp = CND.Ship To
WRK.WF_Sales_History_BrkTyp = 'S';

//?Build the Break Field
// IF DTL.A/R Customer Number is not equal to zero
IF DTL.AR_Customer_Number <> *ZERO;

// WRK.WF Sales History - BrkTyp = CND.Bill To
WRK.WF_Sales_History_BrkTyp = 'B';

//?Build the Break Field
// IF DTL.Parent Customer is not equal to zero
IF DTL.Parent_Customer <> *ZERO;

// WRK.WF Sales History - BrkTyp = CND.Parent
WRK.WF_Sales_History_BrkTyp = 'P';

//?Build the Break Field
// IF *OTHERWISE
IF *OTHERWISE;

//?Nothing select then default Ship To due to this is what it was
//?before changes on Parent or A/R
// WRK.WF Sales History - BrkTyp = CND.Ship To
WRK.WF_Sales_History_BrkTyp = 'S';

ENDIF;

// Call program Prt Cust Accrual      CL.
SBMJOB;
CALL PROGRAM(Prt Cust Accrual      CL) ('POI3UPR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Date_From_USR);
PARAMETER(DTL.Date_To_USR);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(WRK.Copies_NBR_USR);
PARAMETER(DTL.Accrual_Code);
PARAMETER(DTL.Accrual_Type);
PARAMETER(DTL.Post_to_G_L_Y_N);
PARAMETER(DTL.Report_Type);
PARAMETER(DTL.Parent_Customer);
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(WRK.WF_Sales_History_BrkTyp);
PARAMETER(LCL.Email_Address);
SBMJOBOVR JOB(PRCSTACRU);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

// Send information message - 'The Accrual Listing has been sent to the jobq.'
MESSAGE(USR3985 *INFO);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Call program PMT Prt/Sbm Opt    SHR PV.
CALL PROGRAM(PMT Prt/Sbm Opt    SHR PV) ('PDKMPVR');
PARAMETER('Customer Accrual Report');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('A/R');
PARAMETER(1);
PARAMETER(LCL.Hold_On_Jobq);
PARAMETER(LCL.Job_Log_Create);
PARAMETER(LCL.Hold);
PARAMETER(LCL.Log);

//?Build the Break and submit
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?If Night Queue Status is NO, change job queue to PORKDIVQ2
CASE;

// IF PAR.PRT Night Queue Run Sts is no
IF PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Night Queue = CON.PORKDIVQ2
PAR.PRT_Night_Queue = 'PORKDIVQ2';

ENDIF;

// Retrieve message - 'JOB(&1) jobq(&2) log(&3) hold(&4)'
PGM.*Sbmjob_override_string = RTVMSG(USR2684);
PARAMETER('PRTCSTACRU');
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(LCL.Log);
PARAMETER(LCL.Hold);

// WRK.Copies NBR USR = PAR.PRT Number of Copies
WRK.Copies_NBR_USR = PAR.PRT_Number_of_Copies;

//?** Item Type Code contains the Accrual Code and Quality Level
//?** contains the Accrual type
//?BUILD THE BREAK
CASE;

// IF DTL.Ship To Customer is not equal to zero
IF DTL.Ship_To_Customer <> *ZERO;

// WRK.WF Sales History - BrkTyp = CND.Ship To
WRK.WF_Sales_History_BrkTyp = 'S';

//?BUILD THE BREAK
// IF DTL.A/R Customer Number is not equal to zero
IF DTL.AR_Customer_Number <> *ZERO;

// WRK.WF Sales History - BrkTyp = CND.Bill To
WRK.WF_Sales_History_BrkTyp = 'B';

//?BUILD THE BREAK
// IF DTL.Parent Customer is not equal to zero
IF DTL.Parent_Customer <> *ZERO;

// WRK.WF Sales History - BrkTyp = CND.Parent
WRK.WF_Sales_History_BrkTyp = 'P';

//?BUILD THE BREAK
// IF *OTHERWISE
IF *OTHERWISE;

//?Nothing select then default Ship To due to this is what it was
//?before changes on Parent or A/R
// WRK.WF Sales History - BrkTyp = CND.Ship To
WRK.WF_Sales_History_BrkTyp = 'S';

ENDIF;

//?Email is blank -- This will create report
// Call program Prt Cust Accrual      CL.
SBMJOB;
CALL PROGRAM(Prt Cust Accrual      CL) ('POI3UPR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Date_From_USR);
PARAMETER(DTL.Date_To_USR);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(WRK.Copies_NBR_USR);
PARAMETER(DTL.Accrual_Code);
PARAMETER(DTL.Accrual_Type);
PARAMETER(DTL.Post_to_G_L_Y_N);
PARAMETER(DTL.Report_Type);
PARAMETER(DTL.Parent_Customer);
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(WRK.WF_Sales_History_BrkTyp);
PARAMETER(*BLANK);
SBMJOBOVR JOB(PRCUSTACRU);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

// Send information message - 'The Accrual Listing has been sent to the jobq.'
MESSAGE(USR3985 *INFO);

ENDIF;

ENDIF;

