// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKPKEFR
// ?Date: 14.08.2025 Time: 02:50:05
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?05/28/04 SLM HPEBAL - Populate parms on the et adjust/add source
//?                      in the create routine
//?01/23/21 ISE H16853 - Increased the length from 5 to 7 and corrected the
//?                      alignment of Buy Order Number field.
// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


EXECUTE FUNCTION(Rtv Validation Rules  RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126427;
PARAMETER(WRK.Carcass_Dbw_Min);
PARAMETER(WRK.Carcass_Dbw_Max);
PARAMETER(WRK.Carcass_Lgt_Min);
PARAMETER(WRK.Carcass_Lgt_Max);
PARAMETER(WRK.Lean_High_Min);
PARAMETER(WRK.Lean_High_Max);
PARAMETER(WRK.Lean_Low_Min);
PARAMETER(WRK.Lean_Low_Max);
PARAMETER(WRK.High_Yield_Min);
PARAMETER(WRK.High_Yield_Max);
PARAMETER(WRK.Low_Yield_Min);
PARAMETER(WRK.Low_Yield_Max);
PARAMETER(WRK.Head_Percent_Min);
PARAMETER(WRK.Head_Percent_Max);
PARAMETER(WRK.Head_Percent_Min);
PARAMETER(WRK.Head_Percent_Max);
PARAMETER(WRK.BackFat_High_Min);
PARAMETER(WRK.BackFat_High_Max);
PARAMETER(WRK.BackFat_Low_Min);
PARAMETER(WRK.Backfat_Low_Max);
PARAMETER(WRK.LoinEye_High_Min);
PARAMETER(WRK.LoinEye_High_Max);
PARAMETER(WRK.LoinEye_Low_Min);
PARAMETER(WRK.LoinEye_Low_Max);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.EV Validation Code is Carcass has Double Weight
 IF DB1.EV_Validation_Code = 'CDB';

 //?Carcass double weight
 // PAR.Carcass Dbw Min = DB1.EV Minimum
 PAR.Carcass_Dbw_Min = DB1.EV_Minimum;

 // PAR.Carcass Dbw Max = DB1.EV Maximum
 PAR.Carcass_Dbw_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Carcass is Light Weight
 IF DB1.EV_Validation_Code = 'CLT';

 //?Carcass light weight
 // PAR.Carcass Lgt Min = DB1.EV Minimum
 PAR.Carcass_Lgt_Min = DB1.EV_Minimum;

 // PAR.Carcass Lgt Max = DB1.EV Maximum
 PAR.Carcass_Lgt_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Backfat is high
 IF DB1.EV_Validation_Code = 'BHI';

 //?backfat is high
 // PAR.BackFat High Min = DB1.EV Minimum
 PAR.BackFat_High_Min = DB1.EV_Minimum;

 // PAR.BackFat High Max = DB1.EV Maximum
 PAR.BackFat_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Backfat is Low
 IF DB1.EV_Validation_Code = 'BLW';

 //?Backfat is low
 // PAR.BackFat Low Min = DB1.EV Minimum
 PAR.BackFat_Low_Min = DB1.EV_Minimum;

 // PAR.Backfat Low Max = DB1.EV Maximum
 PAR.Backfat_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Loineye is High
 IF DB1.EV_Validation_Code = 'LHI';

 //?loineye is high
 // PAR.LoinEye High Min = DB1.EV Minimum
 PAR.LoinEye_High_Min = DB1.EV_Minimum;

 // PAR.LoinEye High Max = DB1.EV Maximum
 PAR.LoinEye_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Loineye is Low
 IF DB1.EV_Validation_Code = 'LLW';

 //?loineye is low
 // PAR.LoinEye Low Min = DB1.EV Minimum
 PAR.LoinEye_Low_Min = DB1.EV_Minimum;

 // PAR.LoinEye Low Max = DB1.EV Maximum
 PAR.LoinEye_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Percent Lean is high
 IF DB1.EV_Validation_Code = 'PLH';

 //?% Lean High
 // PAR.%Lean High Min = DB1.EV Minimum
 PAR.Lean_High_Min = DB1.EV_Minimum;

 // PAR.%Lean High Max = DB1.EV Maximum
 PAR.Lean_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Percent Lean is Low
 IF DB1.EV_Validation_Code = 'PLL';

 //?% Lean Low
 // PAR.%Lean Low Min = DB1.EV Minimum
 PAR.Lean_Low_Min = DB1.EV_Minimum;

 // PAR.%Lean Low Max = DB1.EV Maximum
 PAR.Lean_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is #Head is < % Allowed
 IF DB1.EV_Validation_Code = 'HLP';

 //?Head < Percent
 // PAR.Head < Percent Min = DB1.EV Minimum
 PAR.Head_Percent_Min = DB1.EV_Minimum;

 // PAR.Head < Percent Max = DB1.EV Maximum
 PAR.Head_Percent_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is #Head is > % Allowed
 IF DB1.EV_Validation_Code = 'HHP';

 //?Head > Percent
 // PAR.Head > Percent Min = DB1.EV Minimum
 PAR.Head_Percent_Min = DB1.EV_Minimum;

 // PAR.Head > Percent Max = DB1.EV Maximum
 PAR.Head_Percent_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Yield Amount is High
 IF DB1.EV_Validation_Code = 'YHI';

 //?Yield High
 // PAR.High Yield Min = DB1.EV Minimum
 PAR.High_Yield_Min = DB1.EV_Minimum;

 // PAR.High Yield Max = DB1.EV Maximum
 PAR.High_Yield_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Yield Amount is Low
 IF DB1.EV_Validation_Code = 'YLW';

 //?Yield Low
 // PAR.Low Yield Min = DB1.EV Minimum
 PAR.Low_Yield_Min = DB1.EV_Minimum;

 // PAR.Low Yield Max = DB1.EV Maximum
 PAR.Low_Yield_Max = DB1.EV_Maximum;

 ENDIF;

}


//?USER: Initialize subfile header

// CTL.Shift Description USR = Condition name of PAR.ET Shift
CTL.Shift_Description_USR = RTVCND(PAR.ET_Shift);

//?USER: Validate subfile record fields

// RCD.ET Company Number = CTL.ET Company Number
RCD.ET_Company_Number = CTL.ET_Company_Number;

// RCD.BOH Company Number = CTL.ET Company Number
RCD.BOH_Company_Number = CTL.ET_Company_Number;

// RCD.ET Kill Date = CTL.ET Kill Date
RCD.ET_Kill_Date = CTL.ET_Kill_Date;

// RCD.TH Kill Date = CTL.ET Kill Date
RCD.TH_Kill_Date = CTL.ET_Kill_Date;

// RCD.TH Tattoo Number = RCD.ET Tattoo Number
RCD.TH_Tattoo_Number = RCD.ET_Tattoo_Number;

// WRK.Return Code USR = CND.*Normal
WRK.Return_Code_USR = *BLANK;

CASE;

// IF RCD.BOH Buy Order Number is EQ Zero
IF RCD.BOH_Buy_Order_Number = *ZERO;

// OR RCD.BOL Load Number is EQ Zero
OR RCD.BOL_Load_Number = *ZERO;

EXECUTE FUNCTION(Rtv Tatts/Bo Load     RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1135414;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(WRK.TH_Sex);
PARAMETER(WRK.TH_Source_Type);
PARAMETER(WRK.TH_Hog_Class_Type);
PARAMETER(WRK.THP_Process_Code);
PARAMETER(WRK.HC_Class_Code);
PARAMETER(WRK.Return_Code_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Return Code USR = CND.*Record does not exist
 PAR.Return_Code_USR = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

EXECUTE FUNCTION(Rtv Tatts Info        RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1212126;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(WRK.TH_Sex);
PARAMETER(WRK.TH_Source_Type);
PARAMETER(WRK.TH_Hog_Class_Type);
PARAMETER(WRK.THP_Process_Code);
PARAMETER(WRK.HC_Class_Code);
PARAMETER(WRK.Return_Code_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Return Code USR = CND.*Record does not exist
 PAR.Return_Code_USR = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// Call program CLC MM to Inches      XF.
CALL PROGRAM(CLC MM to Inches      XF) ('PKMMINCH');
PARAMETER(RCD.ET_Backfat_Thickness_Inch);
PARAMETER(RCD.ET_Loin_Eye_Depth_Inches);
PARAMETER(RCD.ET_Lean_Percent_NPPC);
PARAMETER(RCD.ET_Backfat_Thickness_MM);
PARAMETER(RCD.ET_Loineye_Depth_MM);
PARAMETER(RCD.ET_Light_Reflectance_MM);
PARAMETER(RCD.ET_Lean_Percent_FOM);
PARAMETER(RCD.ET_Light_Reflectance);

CASE;

// IF WRK.Return Code USR is *Normal
IF WRK.Return_Code_USR = *BLANK;

//?Correct Processing code
CASE;

// IF WRK.THP Process Code is Receiving
IF WRK.THP_Process_Code = 'RECV';

//?Either Receiving or Slaughter is valid
//?Correct Processing code
// IF WRK.THP Process Code is Slaughter
IF WRK.THP_Process_Code = 'SLG';

//?Either Receiving or Slaughter is valid
//?Correct Processing code
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Tattoo is not Ready for Slaughter.'
ERROR(PRK0373);
MSGPARM(RCD.ET_Tattoo_Number);
MSGPARM(WRK.THP_Process_Code);

QUIT;

ENDIF;

CASE;

// IF WRK.TH Hog Class Type is Resale
IF WRK.TH_Hog_Class_Type = 'R';

//?Resale is not allowed to receive kill information, because hog are
//?not killed for resale
// Send error message - 'Tattoo is resale'
ERROR(PRK0468);
MSGPARM(RCD.ET_Tattoo_Number);

ENDIF;

//?SEX
CASE;

// IF RCD.ET Carcass Sex EQ WRK.Blank USR
IF RCD.ET_Carcass_Sex = WRK.Blank_USR;

// RCD.ET Carcass Sex = WRK.TH Sex
RCD.ET_Carcass_Sex = WRK.TH_Sex;

ENDIF;

//?IF add mode move tattoo to lot
CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

// RCD.ET Lot = RCD.ET Tattoo Number
RCD.ET_Lot = RCD.ET_Tattoo_Number;

ENDIF;

// RCD.ET Lean Percent NPPC = CON.*ZERO
RCD.ET_Lean_Percent_NPPC = *ZERO;

// RCD.ET Lean Percent FOM = CON.*ZERO
RCD.ET_Lean_Percent_FOM = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

//?Invalid Tattoo Number
// Send error message - 'Tattoo Number Not Found'
ERROR(PRK0368);
MSGPARM(RCD.ET_Tattoo_Number);

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Eval Trans Rec    IF) TYPE(EXCINTFUN) FILE(PKBVCPP)        AB1136539;
PARAMETER(RCD.ET_Company_Number);
PARAMETER(RCD.ET_Kill_Date);
PARAMETER(RCD.ET_Scale_Sequence_Number);
PARAMETER(RCD.ET_Carcass_Number);
PARAMETER(RCD.ET_Carcass_Number_Insert);
PARAMETER(RCD.ET_Tattoo_Number);
PARAMETER(RCD.ET_Tattoo_Number);
PARAMETER(CTL.ET_Shift);
PARAMETER(RCD.ET_Hot_Wgt);
PARAMETER(RCD.ET_Backfat_Thickness_Inch);
PARAMETER(RCD.ET_Loin_Eye_Depth_Inches);
PARAMETER(RCD.ET_Lean_Percent_NPPC);
PARAMETER(RCD.ET_Backfat_Thickness_MM);
PARAMETER(RCD.ET_Loineye_Depth_MM);
PARAMETER(RCD.ET_Light_Reflectance_MM);
PARAMETER(RCD.ET_Lean_Percent_FOM);
PARAMETER(RCD.ET_Light_Reflectance);
PARAMETER(RCD.ET_Trim_Area);
PARAMETER(RCD.ET_Carcass_Sex);
PARAMETER(RCD.ET_Error_Sts);
PARAMETER(RCD.ET_Record_Add_Del_Sts);
PARAMETER(RCD.ET_Record_Created_W_Avg);
PARAMETER('M');
PARAMETER(RCD.ET_User_Error_Override);
PARAMETER(RCD.ET_Adjust_Add_Type);
PARAMETER(RCD.ET_Broken_Back_Sts);
PARAMETER(RCD.ET_Adjust_Add_Source);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
PARAMETER(RCD.Carcass_Count_USR);
{
 //?Execute internal function

 // PAR.Carcass number        USR = PAR.Carcass Count USR
 PAR.Carcass_number_USR = PAR.Carcass_Count_USR;

 // DOW PAR.Carcass number        USR is GT Zero
 DOW PAR.Carcass_number_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Eval Next#        RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1135496;
 PARAMETER(PAR.ET_Company_Number);
 PARAMETER(PAR.ET_Kill_Date);
 PARAMETER(PAR.ET_Scale_Sequence_Number);
 {
  //?USER: Processing if Data record not found

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.ET_Scale_Sequence_Number = 1;

  QUIT;

  //?USER: Process Data record

  CASE;

  // IF DB1.ET Scale Sequence Number is Entry Allowed
  IF DB1.ET_Scale_Sequence_Number >= 000001;
  AND DB1.ET_Scale_Sequence_Number <= 699999;

  // PAR.ET Scale Sequence Number = DB1.ET Scale Sequence Number + CON.1
  PAR.ET_Scale_Sequence_Number = DB1.ET_Scale_Sequence_Number + 1;

  QUIT;

  ENDIF;

 }

 EXECUTE FUNCTION(Create Evaluation Transac) TYPE(CRTOBJ) FILE(PKBVCPP)          AB1102931;
 PARAMETER(PAR.ET_Company_Number);
 PARAMETER(PAR.ET_Kill_Date);
 PARAMETER(PAR.ET_Scale_Sequence_Number);
 PARAMETER(PAR.ET_Scale_Sequence_Number);
 PARAMETER(000001);
 PARAMETER(PAR.ET_Tattoo_Number);
 PARAMETER(PAR.ET_Lot);
 PARAMETER(PAR.ET_Shift);
 PARAMETER(PAR.ET_Hot_Wgt);
 PARAMETER(PAR.ET_Backfat_Thickness_Inch);
 PARAMETER(PAR.ET_Loin_Eye_Depth_Inches);
 PARAMETER(PAR.ET_Lean_Percent_NPPC);
 PARAMETER(PAR.ET_Backfat_Thickness_MM);
 PARAMETER(PAR.ET_Loineye_Depth_MM);
 PARAMETER(PAR.ET_Light_Reflectance_MM);
 PARAMETER(PAR.ET_Lean_Percent_FOM);
 PARAMETER(PAR.ET_Light_Reflectance);
 PARAMETER(PAR.ET_Trim_Area);
 PARAMETER(PAR.ET_Carcass_Sex);
 PARAMETER(PAR.ET_Error_Sts);
 PARAMETER(PAR.ET_Record_Add_Del_Sts);
 PARAMETER(PAR.ET_Record_Created_W_Avg);
 PARAMETER(PAR.ET_Record_Created_Status);
 PARAMETER(PAR.ET_User_Error_Override);
 PARAMETER(PAR.ET_Adjust_Add_Type);
 PARAMETER(PAR.ET_Broken_Back_Sts);
 PARAMETER(PAR.ET_Unused_Sts_2);
 PARAMETER(PAR.ET_Adjust_Add_Source);
 PARAMETER(PAR.ET_Unused_Sts_4);
 PARAMETER(PAR.ET_Unused_Sts_5);
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.RU_Date);
 PARAMETER(PAR.RU_Time);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 // PAR.Carcass number        USR = PAR.Carcass number        USR - CON.1
 PAR.Carcass_number_USR = PAR.Carcass_number_USR - 1;

 ENDDO;

}


//?USER: Delete DBF record

EXECUTE FUNCTION(Dlt Eval Trans        DL) TYPE(DLTOBJ) FILE(PKBVCPP)           AB1102933;
PARAMETER(RCD.ET_Company_Number);
PARAMETER(RCD.ET_Kill_Date);
PARAMETER(RCD.ET_Scale_Sequence_Number);
PARAMETER(RCD.ET_Carcass_Number);
PARAMETER(RCD.ET_Carcass_Number_Insert);

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Eval Transac      CH) TYPE(CHGOBJ) FILE(PKBVCPP)           AB1102932;
PARAMETER(RCD.ET_Company_Number);
PARAMETER(RCD.ET_Kill_Date);
PARAMETER(RCD.ET_Scale_Sequence_Number);
PARAMETER(RCD.ET_Carcass_Number);
PARAMETER(RCD.ET_Carcass_Number_Insert);
PARAMETER(RCD.ET_Tattoo_Number);
PARAMETER(RCD.ET_Lot);
PARAMETER(RCD.ET_Shift);
PARAMETER(RCD.ET_Hot_Wgt);
PARAMETER(RCD.ET_Backfat_Thickness_Inch);
PARAMETER(RCD.ET_Loin_Eye_Depth_Inches);
PARAMETER(RCD.ET_Lean_Percent_NPPC);
PARAMETER(RCD.ET_Backfat_Thickness_MM);
PARAMETER(RCD.ET_Loineye_Depth_MM);
PARAMETER(RCD.ET_Light_Reflectance_MM);
PARAMETER(RCD.ET_Lean_Percent_FOM);
PARAMETER(RCD.ET_Light_Reflectance);
PARAMETER(RCD.ET_Trim_Area);
PARAMETER(RCD.ET_Carcass_Sex);
PARAMETER(RCD.ET_Error_Sts);
PARAMETER(RCD.ET_Record_Add_Del_Sts);
PARAMETER(RCD.ET_Record_Created_W_Avg);
PARAMETER(RCD.ET_Record_Created_Status);
PARAMETER(RCD.ET_User_Error_Override);
PARAMETER(RCD.ET_Adjust_Add_Type);
PARAMETER(RCD.ET_Broken_Back_Sts);
PARAMETER(RCD.ET_Adjust_Add_Source);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
PARAMETER(RCD.RU_Date);
PARAMETER(RCD.RU_Time);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


