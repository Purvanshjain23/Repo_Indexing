// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPD7EFR
// ?Date: 14.08.2025 Time: 03:40:04
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?EXPCOM RMC 10/21/04  Remove company from file
//?DLY029 RMC 05/30/07  Rate type must = item's pricing UOM
//?DLY029 RMC 08/09/07  added rate type "G" to all sales condition
//?E4057 JJH 05/06/15 - Price Credit Memo Fixes
//?- Recompiled because $/Quantity by qty shipped QR
//?  removed from Cases LST of Accrual Rate Type.
//?- Recompiled because $/Lb by Weight Billed WR
//?  removed from Pounds LST of Accrual Rate Type.
ENDDO;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.Status - Y or N = CND.no
PAR.Status_Y_or_N = 'N';

//?USER: Initialize subfile header

EXECUTE FUNCTION(RTV Accrual Descript   RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1285204;
PARAMETER(CTL.Accrual_Code);
PARAMETER(CTL.Accrual_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize subfile record (existing record)

EXECUTE FUNCTION(Item Description DRV) TYPE(DRVFLD)                             AC1633414;
PARAMETER(RCD.Item_Description_DRV);
PARAMETER(RCD.Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Description   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1325690;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Description_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Initialize subfile record (new record)

// RCD.Accrual Code = CTL.Accrual Code
RCD.Accrual_Code = CTL.Accrual_Code;

// RCD.Record Status = CND.Active
RCD.Record_Status = 'A';

//?USER: Validate subfile record fields

//?F4=Prompt
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> RCD.Item Code
IF PGM.*Cursor_field = RCD.Item_Code;

// Call program SEL Item Default       SR.
CALL PROGRAM(SEL Item Default       SR) ('OMZ8SRR');
PARAMETER(RCD.Item_Code);

ENDIF;

ENDIF;

//?Val: Rate Type condition All Sales
CASE;

// IF RCD.Accrual Rate Type is All Sales
IF RCD.Accrual_Rate_Type = 'W'/'S'/'Q'/'G'/'FA';

//?Val: Rate Type condition All Sales
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Rate Type &1 not valid.'
ERROR(USR3397);
MSGPARM(RCD.Accrual_Rate_Type);

ENDIF;

EXECUTE FUNCTION(Rtv Item Pricing UOM  RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC1825735;
PARAMETER(RCD.Item_Code);
PARAMETER(WRK.Description_Line_One);
PARAMETER(WRK.Description_Line_Two);
PARAMETER(WRK.UOM_Pricing_Dft);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Val: Item
CASE;

// IF WRK.Description Line One is equal to blank
IF WRK.Description_Line_One = *BLANK;

// Send error message - 'Item not found'
ERROR(USR0374);
MSGPARM(RCD.Item_Code);

ENDIF;

//?VAL: Accrual Rate Type $/LB
CASE;

// IF RCD.Accrual Rate Type is $/Lb
IF RCD.Accrual_Rate_Type = 'W';

// OR RCD.Accrual Rate Type is $/Lb by Weight Billed
OR RCD.Accrual_Rate_Type = 'WR';

// LCL.U/M - Pricing = CND.Pounds
LCL.UOM_Pricing = 'LB';

//?VAL: Accrual Rate Type $/LB
// IF RCD.Accrual Rate Type is $/Quantity
IF RCD.Accrual_Rate_Type = 'Q';

// OR RCD.Accrual Rate Type is $/Quantity by qty shipped
OR RCD.Accrual_Rate_Type = 'QR';

// LCL.U/M - Pricing = CND.Cases
LCL.UOM_Pricing = 'CS';

//?VAL: Accrual Rate Type $/LB
// IF RCD.Accrual Rate Type is % of Net Sales
IF RCD.Accrual_Rate_Type = 'S';

// OR RCD.Accrual Rate Type is % of NetSls by NetSls/Lb
OR RCD.Accrual_Rate_Type = 'SR';

// OR RCD.Accrual Rate Type is % of NetSls per Sls/Month
OR RCD.Accrual_Rate_Type = 'SS';

// OR RCD.Accrual Rate Type is % of Gross Extended Amt
OR RCD.Accrual_Rate_Type = 'G';

//?dont care for sales so make it the same as the item's
// LCL.U/M - Pricing = WRK.U/M - Pricing Dft
LCL.UOM_Pricing = WRK.UOM_Pricing_Dft;

ENDIF;

//?8/30/07 SAZ For Dailys pricing U/M is CWT, but the accrual will be based
//? on lbs. So this validation is commented out.
//?09/04/07 PKD DLY029 -- Validate the Accrual is the same type as
//?             Pricing Unit of Measure.
//?VAL: Accrual Rate Type = LB
CASE;

// IF RCD.Accrual Rate Type is Pounds
IF RCD.Accrual_Rate_Type = 'W';

CASE;

// IF LCL.U/M - Pricing is Carcass Hundred Weight
IF LCL.UOM_Pricing = 'CW';

// OR LCL.U/M - Pricing is Pounds
OR LCL.UOM_Pricing = 'LB';

// OR LCL.U/M - Pricing is Thousand
OR LCL.UOM_Pricing = 'M';

// OR LCL.U/M - Pricing is Tons
OR LCL.UOM_Pricing = 'TN';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Pricing U/M must be equal to Rate type's U/M &1'
ERROR(USR3740);
MSGPARM(WRK.UOM_Pricing_Dft);
MSGPARM(LCL.UOM_Pricing);

ENDIF;

//?VAL: Accrual Rate Type = LB
// IF RCD.Accrual Rate Type is Cases
IF RCD.Accrual_Rate_Type = 'Q';

CASE;

// IF LCL.U/M - Pricing is Carcass Hundred Weight
IF LCL.UOM_Pricing = 'CW';

// OR LCL.U/M - Pricing is Pounds
OR LCL.UOM_Pricing = 'LB';

// OR LCL.U/M - Pricing is Thousand
OR LCL.UOM_Pricing = 'M';

// OR LCL.U/M - Pricing is Tons
OR LCL.UOM_Pricing = 'TN';

// Send error message - 'Pricing U/M must be equal to Rate type's U/M &1'
ERROR(USR3740);
MSGPARM(WRK.UOM_Pricing_Dft);
MSGPARM(LCL.UOM_Pricing);

ENDIF;

ENDIF;

//?CALC: Subfile record function fields

EXECUTE FUNCTION(Item Description DRV) TYPE(DRVFLD)                             AC1633414;
PARAMETER(RCD.Item_Description_DRV);
PARAMETER(RCD.Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Description   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1325690;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Description_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Create DBF record

EXECUTE FUNCTION(Crt Accrual Code Dtl  IF) TYPE(EXCINTFUN) FILE(PPAHREP)        AC1686206;
PARAMETER(RCD.Accrual_Code);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Accrual_Rate_Type);
PARAMETER(RCD.Accrual_Rate);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Create_Date);
PARAMETER(RCD.Create_Time);
PARAMETER(RCD.Create_User);
PARAMETER(RCD.Create_Program);
PARAMETER(RCD.Change_Date);
PARAMETER(RCD.Change_Time);
PARAMETER(RCD.Change_User);
PARAMETER(RCD.Change_Program);
PARAMETER(PAR.Status_Y_or_N);
{
 //?Execute internal function

 EXECUTE FUNCTION(Crt Accrual Code Dtl  CR) TYPE(CRTOBJ) FILE(PPAHREP)           AC1686041;
 PARAMETER(PAR.Accrual_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Accrual_Rate_Type);
 PARAMETER(PAR.Accrual_Rate);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Create_Date);
 PARAMETER(PAR.Create_Time);
 PARAMETER(PAR.Create_User);
 PARAMETER(PAR.Create_Program);
 PARAMETER(PAR.Change_Date);
 PARAMETER(PAR.Change_Time);
 PARAMETER(PAR.Change_User);
 PARAMETER(PAR.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

 }

 // PAR.Status - Y or N = CND.yes
 PAR.Status_Y_or_N = 'Y';

}


//?USER: Delete DBF record

EXECUTE FUNCTION(Del Accrual Code Dtl  IF) TYPE(EXCINTFUN) FILE(PPAHREP)        AC1686207;
PARAMETER(RCD.Accrual_Code);
PARAMETER(RCD.Item_Code);
PARAMETER(PAR.Status_Y_or_N);
{
 //?Execute internal function

 EXECUTE FUNCTION(Del Accrual Code Dtl  DO) TYPE(DLTOBJ) FILE(PPAHREP)           AC1686043;
 PARAMETER(PAR.Accrual_Code);
 PARAMETER(PAR.Item_Code);
 // PAR.Status - Y or N = CND.yes
 PAR.Status_Y_or_N = 'Y';

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Accrl Dtl & SetFlg IF) TYPE(EXCINTFUN) FILE(PPAHREP)       AC1686141;
PARAMETER(RCD.Accrual_Code);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Accrual_Rate_Type);
PARAMETER(RCD.Accrual_Rate);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Create_Date);
PARAMETER(RCD.Create_Time);
PARAMETER(RCD.Create_User);
PARAMETER(RCD.Create_Program);
PARAMETER(RCD.Change_Date);
PARAMETER(RCD.Change_Time);
PARAMETER(RCD.Change_User);
PARAMETER(RCD.Change_Program);
PARAMETER(PAR.Status_Y_or_N);
{
 //?Execute internal function

 EXECUTE FUNCTION(Chg Accrual Code Dtl  CH) TYPE(CHGOBJ) FILE(PPAHREP)           AC1686042;
 PARAMETER(PAR.Accrual_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Accrual_Rate_Type);
 PARAMETER(PAR.Accrual_Rate);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Create_Date);
 PARAMETER(PAR.Create_Time);
 PARAMETER(PAR.Create_User);
 PARAMETER(PAR.Create_Program);
 PARAMETER(PAR.Change_Date);
 PARAMETER(PAR.Change_Time);
 PARAMETER(PAR.Change_User);
 PARAMETER(PAR.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

 // PAR.Status - Y or N = CND.yes
 PAR.Status_Y_or_N = 'Y';

}


//?USER: Extra processing after DBF update

// Send information message - 'After confirm, press F3 to update customers.'
MESSAGE(USR3400 *INFO);

//?USER: Exit program processing

//?Update Customers with this accrual code. (delete then create items)
CASE;

// IF PAR.Status - Y or N is yes
IF PAR.Status_Y_or_N = 'Y';

// Send status message - 'Processing...'
MESSAGE(USR2303 *STATUS);

EXECUTE FUNCTION(Rtv & Crt Cust Accrls RT) TYPE(RTVOBJ) FILE(OMHOREP)           AC1686124;
PARAMETER(CTL.Accrual_Code);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV & Del Cust Accrls RT) TYPE(RTVOBJ) FILE(OMHPREP)           AC1686139;
 PARAMETER(DB1.Accrual_Code);
 PARAMETER(DB1.Ship_To_Customer);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(DLT OM Cust Accrual De DL) TYPE(DLTOBJ) FILE(OMHPREP)          AC1221731;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(*MISSING);
  PARAMETER(DB1.Item_Code);
 }

 EXECUTE FUNCTION(Rtv & Crt Cust Accrls RT) TYPE(RTVOBJ) FILE(PPAHREP)           AC1686123;
 PARAMETER(PAR.Accrual_Code);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.CAH_Sequence_No);
 PARAMETER(DB1.Period_Beginning_Date);
 PARAMETER(DB1.Period_Ending_Date);
 PARAMETER(DB1.Accrual_Rate_Type);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(CRT OM Cust Accrual De CR) TYPE(CRTOBJ) FILE(OMHPREP)          AC1221729;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(PAR.CAH_Sequence_No);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Accrual_Rate);
  PARAMETER(DB1.Accrual_Rate_Type);
  PARAMETER(WRK.Blank_for_4_USR);
  PARAMETER(WRK.Blank_for_4_USR);
  PARAMETER(WRK.Blank_for_4_USR);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

}


ENDIF;

