// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLB6DFR
// ?Date: 14.08.2025 Time: 02:53:42
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?E50577 JJH 07/25/19 - Load Type conditions for 2D, 3D, 4D
//?- Recompile only, No Logic Changes
//?H16853 ISE 11/05/2020-Recompiled due to change in Buy Order Number
ENDDO;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


// PAR.PRT Night Queue Run Sts = CND.No
PAR.PRT_Night_Queue_Run_Sts = 'N';

//?Post on Exit if something was changed.
// PAR.Status 1 = CND.No
PAR.Status_1 = 'N';

//?Modification History
DO;

//?e2423  slm Mtech
//?e2423  slm 02/26/2012
//?Now using condition file on load type and transportation office
//?S00766 slm 04/22/2009
//?The following change object was blanking out the source type
//?S00766 Slm - Per Alice and LeAnn leave the Source Type
//?when the posting in HPS is completed then a HPS program will
//?clear the source type.
//?Also do not allow 4=clear if the record is locked.
ENDDO;

//?E2423 Mtech Live or Not Live *** Interfaces to HPS ***
//?E2423 Mtech Live will not use this HPS program
//?Get the MTech Live Yes or No
DO;

//?Mtech Live Yes or no
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('MTECHLIVE');
PARAMETER(WRK.System_Value_Alpha_USR);

// LCL.MTech Live Yes or No = WRK.System Value Alpha    USR
LCL.MTech_Live_Yes_or_No = WRK.System_Value_Alpha_USR;

ENDDO;

//?E2423 This program should not be used but just in case someone
//?trys to use this we will not allow update or post
//?if live with mtech
//?USER: Initialize subfile control

//?Accum for CTL context head totals
DO;

// CTL.DSH Planned Kill Head = PAR.DSH Planned Kill Head
CTL.DSH_Planned_Kill_Head = PAR.DSH_Planned_Kill_Head;

EXECUTE FUNCTION(Rtv Accum by SrcCode  RT) TYPE(RTVOBJ) FILE(PLAECPP)           AB1245734;
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.DSH_Kill_Date);
PARAMETER(CTL.Head_Total_CNT_USR);
PARAMETER(CTL.Head_Total_OTH_USR);
PARAMETER(CTL.Head_Total_SBD_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?Date 03/17/2004 By Susan Mason  TFM Release 01 for Head Total SBD
 CASE;

 // IF DB1.SR Source Code is Contract
 IF DB1.SR_Source_Code = 'CPR';

 // PAR.Head Total CNT USR = PAR.Head Total CNT USR + DB1.DSD Scheduled Delv Head
 PAR.Head_Total_CNT_USR = PAR.Head_Total_CNT_USR + DB1.DSD_Scheduled_Delv_Head;

 // IF DB1.SR Source Code is Open Daily Buys
 IF DB1.SR_Source_Code = 'ODB';

 // PAR.Head Total OTH USR = PAR.Head Total OTH USR + DB1.DSD Scheduled Delv Head
 PAR.Head_Total_OTH_USR = PAR.Head_Total_OTH_USR + DB1.DSD_Scheduled_Delv_Head;

 // IF DB1.SR Source Code is Seaboard
 IF DB1.SR_Source_Code = 'SBD';

 // OR DB1.SR Source Code is Triumph Foods Member
 OR DB1.SR_Source_Code = 'TFM';

 //?Date 03/17/2004 Susan Mason Add condition = Triumph Foods Member
 // PAR.Head Total SBD USR = PAR.Head Total SBD USR + DB1.DSD Scheduled Delv Head
 PAR.Head_Total_SBD_USR = PAR.Head_Total_SBD_USR + DB1.DSD_Scheduled_Delv_Head;

 ENDIF;

}


// Compute: Sched Head USR
CTL.Scheduled_Head_USR = ( CTL.Head_Total_SBD_USR + CTL.Head_Total_CNT_USR )                       +
+ CTL.Head_Total_OTH_USR;

// CTL.DIFF Total Head = CTL.DSH Planned Kill Head - CTL.Scheduled Head USR
CTL.DIFF_Total_Head = CTL.DSH_Planned_Kill_Head - CTL.Scheduled_Head_USR;

ENDDO;

// LCL.DSD Full/Split Load = CTL.DSD Full/Split Load
LCL.DSD_Full_Split_Load = CTL.DSD_Full_Split_Load;

// LCL.DSD Load Type = CTL.DSD Load Type
LCL.DSD_Load_Type = CTL.DSD_Load_Type;

// LCL.DSD Farm Site Code = CTL.DSD Farm Site Code
LCL.DSD_Farm_Site_Code = CTL.DSD_Farm_Site_Code;

// LCL.DSD Movement Number = CTL.DSD Movement Number
LCL.DSD_Movement_Number = CTL.DSD_Movement_Number;

// LCL.DSD HPS Post Status = CTL.DSD HPS Post Status
LCL.DSD_HPS_Post_Status = CTL.DSD_HPS_Post_Status;

// LCL.DSD Movement Printed = CTL.DSD Movement Printed
LCL.DSD_Movement_Printed = CTL.DSD_Movement_Printed;

// LCL.DSD Transportation Office = CTL.DSD Transportation Office
LCL.DSD_Transportation_Office = CTL.DSD_Transportation_Office;

//?USER: Initialize subfile record from DBF record

// RCD.Load Type USR = RCD.DSD Load Type
RCD.Load_Type_USR = RCD.DSD_Load_Type;

// RCD.Farm Site USR = RCD.DSD Farm Site Code
RCD.Farm_Site_USR = RCD.DSD_Farm_Site_Code;

// RCD.Building USR = RCD.DSD Building
RCD.Building_USR = RCD.DSD_Building;

// RCD.Room USR = RCD.DSD Room
RCD.Room_USR = RCD.DSD_Room;

// RCD.Scheduled Head 3.0 USR = RCD.DSD Scheduled Delv Head
RCD.Scheduled_Head_3_0_USR = RCD.DSD_Scheduled_Delv_Head;

//?OUTPUT ONLY:  Load Type, Farm, Building, Room, Head
CASE;

// IF RCD.DSD Lock Status is Locked
IF RCD.DSD_Lock_Status = 'L';

// RCD.Display Output Only 2 USR = CND.Yes
RCD.Display_Output_Only_2_USR = 'Y';

// RCD.Display Output Only Usr = CND.Yes
RCD.Display_Output_Only_Usr = 'Y';

//?OUTPUT ONLY:  Load Type, Farm, Building, Room, Head
// IF *OTHERWISE
IF *OTHERWISE;

//?OUTPUT ONLY:  Building, Room, Head
CASE;

// IF RCD.DSD Full/Split Load is Split
IF RCD.DSD_Full_Split_Load = 'S';

// RCD.Display Output Only Usr = CND.Yes
RCD.Display_Output_Only_Usr = 'Y';

//?OUTPUT ONLY:  Building, Room, Head
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Display Output Only Usr = CND.No
RCD.Display_Output_Only_Usr = 'N';

ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv Next Line No      RT) TYPE(RTVOBJ) FILE(PLAKCPP)           AB1244994;
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.DSH_Kill_Date);
PARAMETER(RCD.DSD_Delivery_Date);
PARAMETER(RCD.DSD_Delivery_Time);
PARAMETER(RCD.DSD_Delivery_Time_Seq);
PARAMETER(WRK.DSC_Line_Number);
{
 //?USER: Processing if Data record not found

 // PAR.DSC Line Number = CON.1
 PAR.DSC_Line_Number = 1;

 //?USER: Process Data record

 // PAR.DSC Line Number = DB1.DSC Line Number + CON.1
 PAR.DSC_Line_Number = DB1.DSC_Line_Number + 1;

 QUIT;

}


//?Asterisk for Comments
CASE;

// IF WRK.DSC Line Number is comments exist
IF WRK.DSC_Line_Number > 1;

// RCD.Asterisk Text Field = CON.*
RCD.Asterisk_Text_Field = *;

//?Asterisk for Comments
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Asterisk Text Field = CON.*BLANK
RCD.Asterisk_Text_Field = *BLANK;

ENDIF;

//?SEL: Full/Split
CASE;

// IF CTL.DSD Full/Split Load NE WRK.Blank USR
IF CTL.DSD_Full_Split_Load <> WRK.Blank_USR;

CASE;

// IF CTL.DSD Full/Split Load NE RCD.DSD Full/Split Load
IF CTL.DSD_Full_Split_Load <> RCD.DSD_Full_Split_Load;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?E2423 Live with Mtech or Not live with Mtech
//?Note: Susan   -- Load Type going in as a condition instead of
//?HPS data base file
//?Removed Load type
//?SEL: Farm Site
CASE;

// IF CTL.DSD Farm Site Code is Entered
IF CTL.DSD_Farm_Site_Code > *ZERO;

CASE;

// IF CTL.DSD Farm Site Code NE RCD.Farm Site USR
IF CTL.DSD_Farm_Site_Code <> RCD.Farm_Site_USR;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL: Movement Number
CASE;

// IF CTL.DSD Movement Number is Entered
IF CTL.DSD_Movement_Number <> *ZERO;

CASE;

// IF CTL.DSD Movement Number NE RCD.DSD Movement Number
IF CTL.DSD_Movement_Number <> RCD.DSD_Movement_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL: Post Status
CASE;

// IF CTL.DSD HPS Post Status is Entered
IF CTL.DSD_HPS_Post_Status = 'A'/'D'/'E'/'N'/'P'/'R';

CASE;

// IF CTL.DSD HPS Post Status NE RCD.DSD HPS Post Status
IF CTL.DSD_HPS_Post_Status <> RCD.DSD_HPS_Post_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL: Movement Printed
CASE;

// IF CTL.DSD Movement Printed is *ALL values
IF CTL.DSD_Movement_Printed = 'P'/'N'/'R';

CASE;

// IF CTL.DSD Movement Printed NE RCD.DSD Movement Printed
IF CTL.DSD_Movement_Printed <> RCD.DSD_Movement_Printed;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?Reload Subfile
CASE;

// IF CTL.DSD Load Type NE LCL.DSD Load Type
IF CTL.DSD_Load_Type <> LCL.DSD_Load_Type;

// OR CTL.DSD Full/Split Load NE LCL.DSD Full/Split Load
OR CTL.DSD_Full_Split_Load <> LCL.DSD_Full_Split_Load;

// OR CTL.DSD Farm Site Code NE LCL.DSD Farm Site Code
OR CTL.DSD_Farm_Site_Code <> LCL.DSD_Farm_Site_Code;

// OR CTL.DSD Movement Number NE LCL.DSD Movement Number
OR CTL.DSD_Movement_Number <> LCL.DSD_Movement_Number;

// OR CTL.DSD HPS Post Status NE LCL.DSD HPS Post Status
OR CTL.DSD_HPS_Post_Status <> LCL.DSD_HPS_Post_Status;

// OR CTL.DSD Movement Printed NE LCL.DSD Movement Printed
OR CTL.DSD_Movement_Printed <> LCL.DSD_Movement_Printed;

// OR CTL.*CMD key is Refresh
OR CTL.*CMD_key = '05';

// OR CTL.DSD Transportation Office NE LCL.DSD Transportation Office
OR CTL.DSD_Transportation_Office <> LCL.DSD_Transportation_Office;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?F20=Post
CASE;

// IF CTL.*CMD key is CF20
IF CTL.*CMD_key = '20';

EXECUTE FUNCTION(Rtv DSH Status        RT) TYPE(RTVOBJ) FILE(PLADCPP)           AB1247374;
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.DSH_Kill_Date);
PARAMETER(LCL.DSH_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.DSH Status is Open for Live Prod
IF LCL.DSH_Status = '02'/'03'/'05';

CASE;

// IF LCL.MTech Live Yes or No is No MTech not Live
IF LCL.MTech_Live_Yes_or_No = 'N';

// Call program Z1Pst Delivery Sched UP.
CALL PROGRAM(Z1Pst Delivery Sched UP) ('HP277CL');
PARAMETER(CTL.DSH_Kill_Date);

CASE;

// IF LCL.DSH Status is 02-Opened to Live Prod
IF LCL.DSH_Status = '02';

EXECUTE FUNCTION(Rtv Chg Sts/Date/Time RT) TYPE(RTVOBJ) FILE(PLADCPP)           AB1245573;
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.DSH_Kill_Date);
PARAMETER(03);
{
 //?USER: Process Data record

 // LCL.DSH Opened to Live Date = DB1.DSH Opened to Live Date
 LCL.DSH_Opened_to_Live_Date = DB1.DSH_Opened_to_Live_Date;

 // LCL.DSH Opened to Live Time = DB1.DSH Opened to Live Time
 LCL.DSH_Opened_to_Live_Time = DB1.DSH_Opened_to_Live_Time;

 // LCL.DSH Posted to HPS Date = DB1.DSH Posted to HPS Date
 LCL.DSH_Posted_to_HPS_Date = DB1.DSH_Posted_to_HPS_Date;

 // LCL.DSH Posted to HPS Time = DB1.DSH Posted to HPS Time
 LCL.DSH_Posted_to_HPS_Time = DB1.DSH_Posted_to_HPS_Time;

 // LCL.DSH Sched Closed Date = DB1.DSH Sched Closed Date
 LCL.DSH_Sched_Closed_Date = DB1.DSH_Sched_Closed_Date;

 // LCL.DSH Sched Closed Time = DB1.DSH Sched Closed Time
 LCL.DSH_Sched_Closed_Time = DB1.DSH_Sched_Closed_Time;

 // LCL.DSH BOL Printed Date = DB1.DSH BOL Printed Date
 LCL.DSH_BOL_Printed_Date = DB1.DSH_BOL_Printed_Date;

 // LCL.DSH BOL Printed Time = DB1.DSH BOL Printed Time
 LCL.DSH_BOL_Printed_Time = DB1.DSH_BOL_Printed_Time;

 CASE;

 // IF PAR.DSH Status is 02-Opened to Live Prod
 IF PAR.DSH_Status = '02';

 // LCL.DSH Opened to Live Date = JOB.*Job date
 LCL.DSH_Opened_to_Live_Date = JOB.*Job_date;

 // LCL.DSH Opened to Live Time = JOB.*Job time / CON.100 *
 LCL.DSH_Opened_to_Live_Time = JOB.*Job_time / 100;

 // IF PAR.DSH Status is 03-Posted to HPS
 IF PAR.DSH_Status = '03';

 // LCL.DSH Posted to HPS Date = JOB.*Job date
 LCL.DSH_Posted_to_HPS_Date = JOB.*Job_date;

 // LCL.DSH Posted to HPS Time = JOB.*Job time / CON.100 *
 LCL.DSH_Posted_to_HPS_Time = JOB.*Job_time / 100;

 // IF PAR.DSH Status is 05-BOL/Movement Printed
 IF PAR.DSH_Status = '05';

 // LCL.DSH BOL Printed Date = JOB.*Job date
 LCL.DSH_BOL_Printed_Date = JOB.*Job_date;

 // LCL.DSH BOL Printed Time = JOB.*Job time / CON.100 *
 LCL.DSH_BOL_Printed_Time = JOB.*Job_time / 100;

 // IF PAR.DSH Status is 10=Schedule Closed
 IF PAR.DSH_Status = '10';

 // LCL.DSH Sched Closed Date = JOB.*Job date
 LCL.DSH_Sched_Closed_Date = JOB.*Job_date;

 // LCL.DSH Sched Closed Time = JOB.*Job time / CON.100 *
 LCL.DSH_Sched_Closed_Time = JOB.*Job_time / 100;

 EXECUTE FUNCTION(Upd Lock Status       RT) TYPE(RTVOBJ) FILE(PLAECPP)           AB1252437;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.DSH_Kill_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Lock Status       CH) TYPE(CHGOBJ) FILE(PLAECPP)           AB1252438;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(DB1.DSH_Kill_Date);
  PARAMETER(DB1.DSD_Delivery_Date);
  PARAMETER(DB1.DSD_Delivery_Time);
  PARAMETER(DB1.DSD_Delivery_Time_Seq);
  PARAMETER('L');
 }

 ENDIF;

 EXECUTE FUNCTION(Chg DSH Sts           CH) TYPE(CHGOBJ) FILE(PLADCPP)           AB1245572;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.DSH_Kill_Date);
 PARAMETER(DB1.DSH_Planned_Kill_Head);
 PARAMETER(DB1.DSH_Requested_Delv_Head);
 PARAMETER(PAR.DSH_Status);
 PARAMETER(DB1.DSH_Ext_Sch_Create_Date);
 PARAMETER(DB1.DSH_Ext_Sch_Create_Time);
 PARAMETER(LCL.DSH_Opened_to_Live_Date);
 PARAMETER(LCL.DSH_Opened_to_Live_Time);
 PARAMETER(LCL.DSH_Posted_to_HPS_Date);
 PARAMETER(LCL.DSH_Posted_to_HPS_Time);
 PARAMETER(LCL.DSH_Unused_Sts_1);
 PARAMETER(LCL.DSH_Sched_Closed_Date);
 PARAMETER(LCL.DSH_Sched_Closed_Time);
 PARAMETER(DB1.DSH_Unused_Sts_2);
 PARAMETER(LCL.DSH_BOL_Printed_Date);
 PARAMETER(DB1.DSH_BOL_Printed_Time);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF LCL.MTech Live Yes or No is Yes MTech is Live
IF LCL.MTech_Live_Yes_or_No = 'Y';

//?mtech live will not use this feature
ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Function Key is not allowed.'
ERROR(PRK0693);

ENDIF;

ENDIF;

//?F21=Print Schedule
CASE;

// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

// Call program Pmt Print Options WEB XF.
CALL PROGRAM(Pmt Print Options WEB XF) ('POT2PVR');
PARAMETER('Print Delivery Schedule');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('HPE');

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Retrieve message - 'JOB(&1) jobq(&2) log(&3) hold(&4)'
PGM.*Sbmjob_override_string = RTVMSG(PRK0812);
PARAMETER('PRTDELVSCH');
PARAMETER(*JOBD);
PARAMETER(*JOBD_JOBD_JOBD);
PARAMETER(*NO);

// Call program Prt Delivery Schedule CL.
SBMJOB;
CALL PROGRAM(Prt Delivery Schedule CL) ('PLBZUPR');
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.DSH_Kill_Date);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
SBMJOBEND;

// Send information message - 'Delivery Schedule printed for &1'
MESSAGE(PRK1055 *INFO);
MSGPARM(CTL.DSH_Kill_Date);

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?NOTE: SUSAN remove the load type code field so we can make this
//?a condition by change the load type to a status field
//?SEL:  Farm Site, Building/Room no longer load type
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> RCD.Farm Site USR
IF PGM.*Cursor_field = RCD.Farm_Site_USR;

// Call program Sel HPS Farm Site     UP.
CALL PROGRAM(Sel HPS Farm Site     UP) ('HP5003');
PARAMETER(LCL.Return_Code_USR);
PARAMETER(RCD.Farm_Site_USR);
PARAMETER(LCL.Farm_site_Name_f_HPS_USR);
PARAMETER(NLL.MTech_Farm_Site_Ref);

// IF PGM.*Cursor field <IS> RCD.Building USR
IF PGM.*Cursor_field = RCD.Building_USR;

// OR PGM.*Cursor field <IS> RCD.Room USR
OR PGM.*Cursor_field = RCD.Room_USR;

//?E2423 Mtech Live will not use this HPS program
CASE;

// IF LCL.MTech Live Yes or No is No MTech not Live
IF LCL.MTech_Live_Yes_or_No = 'N';

// Call program Z1Sel HPS Building/RoomUP.
CALL PROGRAM(Z1Sel HPS Building/RoomUP) ('HP5950');
PARAMETER(RCD.Farm_Site_USR);
PARAMETER(LCL.Farm_site_Name_f_HPS_USR);
PARAMETER(RCD.Building_USR);
PARAMETER(RCD.Room_USR);
PARAMETER(RCD.DSD_Hog_Group_Code);
PARAMETER(LCL.HPS_Hog_Group_Status);
PARAMETER(LCL.HPS_Hog_Production_Phase);
PARAMETER(LCL.HPS_Hog_Production_Type);

// IF LCL.MTech Live Yes or No is Yes MTech is Live
IF LCL.MTech_Live_Yes_or_No = 'Y';

//?E2423 Mtech Live will not use this HPS program
ENDIF;

ENDIF;

ENDIF;

//?VAL:  Farm Site
CASE;

// IF RCD.Farm Site USR is Entered
IF RCD.Farm_Site_USR <> *ZERO;

// Call program Val HPS Farm Site DS  UP.
CALL PROGRAM(Val HPS Farm Site DS  UP) ('HP271');
PARAMETER(LCL.Return_Code_USR);
PARAMETER(RCD.Farm_Site_USR);
PARAMETER(LCL.Farm_site_Name_f_HPS_USR);
PARAMETER(LCL.State);
PARAMETER(LCL.DSD_Transportation_Office);
PARAMETER(LCL.DSD_Trucker_Code_HPS);
PARAMETER(LCL.DSD_Loading_Crew);
PARAMETER(LCL.DSD_Driver);
PARAMETER(NLL.MTech_Farm_Site_Ref);
PARAMETER(NLL.MTech_Trucker_Ref);
PARAMETER(NLL.MTech_Load_Crew_Ref);
PARAMETER(NLL.MTech_Driver_Ref);

CASE;

// IF LCL.Return Code USR is Error Found
IF LCL.Return_Code_USR = 'ERROR';

// Send error message - 'Farm Site &1 invalid.'
ERROR(PRK0688);
MSGPARM(RCD.Farm_Site_USR);

QUIT;

ENDIF;

//?NOTE: SUSAN 02062013 REMOVE LOAD TYPE AS A FIELD IN FILE
//?will now be used as a condition
//?VAL:  Farm Site
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.PD Producer Code = CON.*BLANK
RCD.PD_Producer_Code = *BLANK;

// RCD.PL Location Code = CON.*BLANK
RCD.PL_Location_Code = *BLANK;

// RCD.DSD Source Type = WRK.Blank Usr 1 fld Usr
RCD.DSD_Source_Type = WRK.Blank_Usr_1_fld_Usr;

// RCD.SR Source Code = CON.*BLANK
RCD.SR_Source_Code = *BLANK;

// RCD.DSD Sire Line Code = CON.*BLANK
RCD.DSD_Sire_Line_Code = *BLANK;

// RCD.DSD Hog Group Code = CON.*BLANK
RCD.DSD_Hog_Group_Code = *BLANK;

// RCD.DSD Trucker Code HPS = CON.*BLANK
RCD.DSD_Trucker_Code_HPS = *BLANK;

// RCD.DSD Driver = CON.*BLANK
RCD.DSD_Driver = *BLANK;

// RCD.DSD Loading Crew = CON.*BLANK
RCD.DSD_Loading_Crew = *BLANK;

// RCD.DSD Transportation Office = CON.*BLANK
RCD.DSD_Transportation_Office = *BLANK;

ENDIF;

//?VAL: Building, Room, Scheduled Head
CASE;

// IF RCD.DSD Full/Split Load is Full
IF RCD.DSD_Full_Split_Load = 'F';

//?E2423 Mtech Live will not use this HPS program
//?VAL:  Building/Room
CASE;

// IF RCD.Building USR is Entered
IF RCD.Building_USR <> *BLANK;

// OR RCD.Room USR is Entered
OR RCD.Room_USR <> *BLANK;

//?E2423 Mtech Live will not use this HPS program
//?If changed
CASE;

// IF RCD.Building USR NE RCD.DSD Building
IF RCD.Building_USR <> RCD.DSD_Building;

// OR RCD.Room USR NE RCD.DSD Room
OR RCD.Room_USR <> RCD.DSD_Room;

CASE;

// IF LCL.MTech Live Yes or No is No MTech not Live
IF LCL.MTech_Live_Yes_or_No = 'N';

// Call program Z1Val HPS Building/RoomUP.
CALL PROGRAM(Z1Val HPS Building/RoomUP) ('HP274');
PARAMETER(LCL.Return_Code_USR);
PARAMETER(RCD.DSD_Delivery_Date);
PARAMETER(RCD.Farm_Site_USR);
PARAMETER(RCD.Building_USR);
PARAMETER(RCD.Room_USR);
PARAMETER(RCD.DSD_Hog_Group_Code);
PARAMETER(RCD.DSD_Sire_Line_Code);

CASE;

// IF LCL.Return Code USR is Error Found
IF LCL.Return_Code_USR = 'ERROR';

// Send error message - 'Building/Room not valid.'
ERROR(PRK1077);
MSGPARM(RCD.Building_USR);
MSGPARM(RCD.Room_USR);

QUIT;

// IF LCL.Return Code USR is Multiple group no selectn
IF LCL.Return_Code_USR = 'SELECT';

// Send error message - 'Building/Room has multiple groups. Please select one.'
ERROR(PRK1129);
MSGPARM(RCD.Building_USR);
MSGPARM(RCD.Room_USR);

QUIT;

ENDIF;

ENDIF;

// RCD.DSD Building = CON.*BLANK
RCD.DSD_Building = *BLANK;

// RCD.DSD Room = CON.*BLANK
RCD.DSD_Room = *BLANK;

ENDIF;

//?VAL:  Building/Room
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.DSD Sire Line Code = CON.*BLANK
RCD.DSD_Sire_Line_Code = *BLANK;

// RCD.DSD Hog Group Code = CON.*BLANK
RCD.DSD_Hog_Group_Code = *BLANK;

ENDIF;

//?VAL: Building, Room, Scheduled Head
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.DSD Sire Line Code = CON.*BLANK
RCD.DSD_Sire_Line_Code = *BLANK;

// RCD.DSD Hog Group Code = CON.*BLANK
RCD.DSD_Hog_Group_Code = *BLANK;

ENDIF;

CASE;

// IF LCL.MTech Live Yes or No is No MTech not Live
IF LCL.MTech_Live_Yes_or_No = 'N';

//?UPDATE
CASE;

// IF RCD.DSD Lock Status is Open
IF RCD.DSD_Lock_Status = 'O';

CASE;

// IF RCD.DSD HPS Post Status is Del/Err/Post/RePost
IF RCD.DSD_HPS_Post_Status = 'D'/'P'/'R'/'E';

//?SET:  Movement Printed
CASE;

// IF RCD.DSD Movement Printed is Printed
IF RCD.DSD_Movement_Printed = 'P';

// RCD.DSD Movement Printed = CND.Reprint
RCD.DSD_Movement_Printed = 'R';

ENDIF;

//?Delete OR Repost
CASE;

// IF RCD.Load Type USR NE WRK.Blank USR
IF RCD.Load_Type_USR <> WRK.Blank_USR;

// AND RCD.Farm Site USR is Not Entered
AND RCD.Farm_Site_USR = *ZERO;

// AND RCD.Building USR is Not Entered
AND RCD.Building_USR = *BLANK;

// AND RCD.Room USR is Not Entered
AND RCD.Room_USR = *BLANK;

// AND RCD.Scheduled Head 3.0 USR is Zero
AND RCD.Scheduled_Head_3_0_USR = *ZERO;

// RCD.DSD HPS Post Status = CND.Deleted
RCD.DSD_HPS_Post_Status = 'D';

// RCD.DSD HPE Post Status = CND.Deleted
RCD.DSD_HPE_Post_Status = 'D';

EXECUTE FUNCTION(Chg Farm Detail       CH) TYPE(CHGOBJ) FILE(PLAECPP)           AB1248295;
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.DSH_Kill_Date);
PARAMETER(RCD.DSD_Delivery_Date);
PARAMETER(RCD.DSD_Delivery_Time);
PARAMETER(RCD.DSD_Delivery_Time_Seq);
PARAMETER(RCD.DSD_Farm_Site_Code);
PARAMETER(RCD.DSD_Building);
PARAMETER(RCD.DSD_Room);
PARAMETER(RCD.DSD_Sire_Line_Code);
PARAMETER(RCD.DSD_Hog_Group_Code);
PARAMETER(RCD.DSD_Scheduled_Delv_Head);
PARAMETER(RCD.DSD_Transportation_Office);
PARAMETER(RCD.DSD_Trucker_Code_HPS);
PARAMETER(RCD.DSD_Driver);
PARAMETER(RCD.DSD_Loading_Crew);
PARAMETER(RCD.CHR_Code);
PARAMETER(RCD.DSD_Load_Type);
PARAMETER(RCD.DSD_Full_Split_Load);
PARAMETER(RCD.DSD_Movement_Number);
PARAMETER(RCD.DSD_Truck_ID);
PARAMETER(RCD.DSD_Trailer_ID);
PARAMETER(RCD.DSD_Movement_Printed);
PARAMETER(RCD.DSD_Sched_Route_Start_Pnt);
PARAMETER(RCD.DSD_Sched_Route_Start_Dte);
PARAMETER(RCD.DSD_Sch_Start_Load_Date);
PARAMETER(RCD.DSD_HPS_Post_Status);
PARAMETER(RCD.DSD_HPE_Post_Status);
PARAMETER(RCD.DSD_Source_Type);
PARAMETER(RCD.DSD_Transfer_Sts);
PARAMETER(RCD.DSD_Unused_Date);
PARAMETER(RCD.DSD_Unused_Time);
PARAMETER(RCD.SR_Source_Code);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


// PAR.Status 1 = CND.Yes
PAR.Status_1 = 'Y';

//?Delete OR Repost
// IF RCD.Load Type USR NE RCD.DSD Load Type
IF RCD.Load_Type_USR <> RCD.DSD_Load_Type;

// OR RCD.Farm Site USR NE RCD.DSD Farm Site Code
OR RCD.Farm_Site_USR <> RCD.DSD_Farm_Site_Code;

// OR RCD.Building USR NE RCD.DSD Building
OR RCD.Building_USR <> RCD.DSD_Building;

// OR RCD.Room USR NE RCD.DSD Room
OR RCD.Room_USR <> RCD.DSD_Room;

// OR RCD.Scheduled Head 3.0 USR NE RCD.DSD Scheduled Delv Head
OR RCD.Scheduled_Head_3_0_USR <> RCD.DSD_Scheduled_Delv_Head;

// RCD.DSD HPS Post Status = CND.Repost
RCD.DSD_HPS_Post_Status = 'R';

// RCD.DSD HPE Post Status = CND.Repost
RCD.DSD_HPE_Post_Status = 'R';

// PAR.Status 1 = CND.Yes
PAR.Status_1 = 'Y';

CASE;

// IF RCD.DSD Sched Route Start Dte is Not Entered
IF RCD.DSD_Sched_Route_Start_Dte = 0;

// RCD.DSD Sched Route Start Dte = RCD.DSD Delivery Date
RCD.DSD_Sched_Route_Start_Dte = RCD.DSD_Delivery_Date;

ENDIF;

//?New 9/8/04
CASE;

// IF RCD.DSD Sch Start Load Date is Not Entered
IF RCD.DSD_Sch_Start_Load_Date = 0;

// RCD.DSD Sch Start Load Date = RCD.DSD Delivery Date
RCD.DSD_Sch_Start_Load_Date = RCD.DSD_Delivery_Date;

ENDIF;

CASE;

// IF RCD.DSD Sch Farm Depart Date is Not Entered
IF RCD.DSD_Sch_Start_Load_Date = 0;

// RCD.DSD Sch Farm Depart Date = RCD.DSD Delivery Date
RCD.DSD_Sch_Start_Load_Date = RCD.DSD_Delivery_Date;

ENDIF;

//?Changes if Farm Site Changed
CASE;

// IF RCD.DSD Farm Site Code NE RCD.Farm Site USR
IF RCD.DSD_Farm_Site_Code <> RCD.Farm_Site_USR;

// RCD.DSD Driver = LCL.DSD Driver
RCD.DSD_Driver = LCL.DSD_Driver;

// RCD.DSD Trucker Code HPS = LCL.DSD Trucker Code HPS
RCD.DSD_Trucker_Code_HPS = LCL.DSD_Trucker_Code_HPS;

// RCD.DSD Loading Crew = LCL.DSD Loading Crew
RCD.DSD_Loading_Crew = LCL.DSD_Loading_Crew;

//?E2423 Mtech Live extra review with Purva and Susan
//?the transportation office is now a condition
//?DSD Sched Route Start Pnt
CASE;

// IF WRK.MTech Live Yes or No is No MTech not Live
IF WRK.MTech_Live_Yes_or_No = 'N';

//?issue with other fields be populating
// Call program Z1Val HPS Trans Office UP.
CALL PROGRAM(Z1Val HPS Trans Office UP) ('HP290');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(RCD.DSD_Transportation_Office);
PARAMETER(WRK.HPS_Trans_Ofc_Desc_USR);
PARAMETER(WRK.RS_Record_Status);
PARAMETER(RCD.DSD_Sched_Route_Start_Pnt);

// IF WRK.MTech Live Yes or No is Yes MTech is Live
IF WRK.MTech_Live_Yes_or_No = 'Y';

//?issue with other fields be populating
//?This is not a issue due to the fact the users should not be
//?using this funcation when we are live with Mtech
ENDIF;

ENDIF;

//?Upd Prdcr if Farm Site entered
CASE;

// IF RCD.Farm Site USR is Entered
IF RCD.Farm_Site_USR <> *ZERO;

// RCD.PD Producer Code = CND.SEABOA
RCD.PD_Producer_Code = 'SEABOA';

// RCD.PL Location Code = CND.Seaboard
RCD.PL_Location_Code = 'SB01';

// RCD.DSD Source Type = CND.Internal
RCD.DSD_Source_Type = 'I';

// RCD.SR Source Code = CND.Seaboard
RCD.SR_Source_Code = 'SBD';

ENDIF;

EXECUTE FUNCTION(Chg Farm Detail       CH) TYPE(CHGOBJ) FILE(PLAECPP)           AB1248295;
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.DSH_Kill_Date);
PARAMETER(RCD.DSD_Delivery_Date);
PARAMETER(RCD.DSD_Delivery_Time);
PARAMETER(RCD.DSD_Delivery_Time_Seq);
PARAMETER(RCD.Farm_Site_USR);
PARAMETER(RCD.Building_USR);
PARAMETER(RCD.Room_USR);
PARAMETER(RCD.DSD_Sire_Line_Code);
PARAMETER(RCD.DSD_Hog_Group_Code);
PARAMETER(RCD.Scheduled_Head_3_0_USR);
PARAMETER(RCD.DSD_Transportation_Office);
PARAMETER(RCD.DSD_Trucker_Code_HPS);
PARAMETER(RCD.DSD_Driver);
PARAMETER(RCD.DSD_Loading_Crew);
PARAMETER(RCD.CHR_Code);
PARAMETER(RCD.Load_Type_USR);
PARAMETER(RCD.DSD_Full_Split_Load);
PARAMETER(RCD.DSD_Movement_Number);
PARAMETER(RCD.DSD_Truck_ID);
PARAMETER(RCD.DSD_Trailer_ID);
PARAMETER(RCD.DSD_Movement_Printed);
PARAMETER(RCD.DSD_Sched_Route_Start_Pnt);
PARAMETER(RCD.DSD_Sched_Route_Start_Dte);
PARAMETER(RCD.DSD_Sch_Start_Load_Date);
PARAMETER(RCD.DSD_HPS_Post_Status);
PARAMETER(RCD.DSD_HPE_Post_Status);
PARAMETER(RCD.DSD_Source_Type);
PARAMETER(RCD.DSD_Transfer_Sts);
PARAMETER(RCD.DSD_Unused_Date);
PARAMETER(RCD.DSD_Unused_Time);
PARAMETER(RCD.SR_Source_Code);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//?Changes if Farm Site Changed
CASE;

// IF RCD.DSD Farm Site Code NE RCD.Farm Site USR
IF RCD.DSD_Farm_Site_Code <> RCD.Farm_Site_USR;

// RCD.DSD Trucker Code HPS = LCL.DSD Trucker Code HPS
RCD.DSD_Trucker_Code_HPS = LCL.DSD_Trucker_Code_HPS;

// RCD.DSD Driver = LCL.DSD Driver
RCD.DSD_Driver = LCL.DSD_Driver;

// RCD.DSD Loading Crew = LCL.DSD Loading Crew
RCD.DSD_Loading_Crew = LCL.DSD_Loading_Crew;

CASE;

// IF WRK.MTech Live Yes or No is No MTech not Live
IF WRK.MTech_Live_Yes_or_No = 'N';

// Call program Z1Val HPS Trans Office UP.
CALL PROGRAM(Z1Val HPS Trans Office UP) ('HP290');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(RCD.DSD_Transportation_Office);
PARAMETER(WRK.HPS_Trans_Ofc_Desc_USR);
PARAMETER(WRK.RS_Record_Status);
PARAMETER(RCD.DSD_Sched_Route_Start_Pnt);

ENDIF;

ENDIF;

//?Upd Prdcr if Farm Site entered
CASE;

// IF RCD.Farm Site USR is Entered
IF RCD.Farm_Site_USR <> *ZERO;

// RCD.PD Producer Code = CND.SEABOA
RCD.PD_Producer_Code = 'SEABOA';

// RCD.PL Location Code = CND.Seaboard
RCD.PL_Location_Code = 'SB01';

// RCD.DSD Source Type = CND.Internal
RCD.DSD_Source_Type = 'I';

// RCD.SR Source Code = CND.Seaboard
RCD.SR_Source_Code = 'SBD';

ENDIF;

//?New 9/8/04
CASE;

// IF RCD.DSD Sch Start Load Date is Not Entered
IF RCD.DSD_Sch_Start_Load_Date = 0;

// RCD.DSD Sch Start Load Date = RCD.DSD Delivery Date
RCD.DSD_Sch_Start_Load_Date = RCD.DSD_Delivery_Date;

ENDIF;

EXECUTE FUNCTION(Chg Farm Detail       CH) TYPE(CHGOBJ) FILE(PLAECPP)           AB1248295;
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.DSH_Kill_Date);
PARAMETER(RCD.DSD_Delivery_Date);
PARAMETER(RCD.DSD_Delivery_Time);
PARAMETER(RCD.DSD_Delivery_Time_Seq);
PARAMETER(RCD.Farm_Site_USR);
PARAMETER(RCD.Building_USR);
PARAMETER(RCD.Room_USR);
PARAMETER(RCD.DSD_Sire_Line_Code);
PARAMETER(RCD.DSD_Hog_Group_Code);
PARAMETER(RCD.Scheduled_Head_3_0_USR);
PARAMETER(RCD.DSD_Transportation_Office);
PARAMETER(RCD.DSD_Trucker_Code_HPS);
PARAMETER(RCD.DSD_Driver);
PARAMETER(RCD.DSD_Loading_Crew);
PARAMETER(RCD.CHR_Code);
PARAMETER(RCD.Load_Type_USR);
PARAMETER(RCD.DSD_Full_Split_Load);
PARAMETER(*ZERO);
PARAMETER(RCD.DSD_Truck_ID);
PARAMETER(RCD.DSD_Trailer_ID);
PARAMETER('N');
PARAMETER(RCD.DSD_Sched_Route_Start_Pnt);
PARAMETER(RCD.DSD_Delivery_Date);
PARAMETER(RCD.DSD_Sch_Start_Load_Date);
PARAMETER('N');
PARAMETER('N');
PARAMETER(RCD.DSD_Source_Type);
PARAMETER(RCD.DSD_Transfer_Sts);
PARAMETER(RCD.DSD_Unused_Date);
PARAMETER(RCD.DSD_Unused_Time);
PARAMETER(RCD.SR_Source_Code);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


ENDIF;

ENDIF;

//?1=Add Slot
CASE;

// IF RCD.*SFLSEL is *Select
IF RCD.*SFLSEL = '1'/'1';

CASE;

// IF RCD.DSD Lock Status is Locked
IF RCD.DSD_Lock_Status = 'L';

// Send error message - 'Option Not allowed record is "Locked"'
ERROR(PRK1223);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Next Seq Num      RT) TYPE(RTVOBJ) FILE(PLAECPP)           AB1248408;
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.DSH_Kill_Date);
PARAMETER(RCD.DSD_Delivery_Date);
PARAMETER(RCD.DSD_Delivery_Time);
PARAMETER(LCL.DSD_Delivery_Time_Seq);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.DSD Delivery Time Seq = CON.1
 PAR.DSD_Delivery_Time_Seq = 1;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.DSD Delivery Time Seq = DB1.DSD Delivery Time Seq + CON.1
 PAR.DSD_Delivery_Time_Seq = DB1.DSD_Delivery_Time_Seq + 1;

 QUIT;

}


EXECUTE FUNCTION(Crt Delv Sched Dtl    CR) TYPE(CRTOBJ) FILE(PLAECPP)           AB1244727;
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.DSH_Kill_Date);
PARAMETER(RCD.DSD_Delivery_Date);
PARAMETER(RCD.DSD_Delivery_Time);
PARAMETER(LCL.DSD_Delivery_Time_Seq);
PARAMETER(RCD.DSD_Scheduled_Hour);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER('F');
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER('N');
PARAMETER(WRK.Blank_USR);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(RCD.DSD_Receiving_Shift);
PARAMETER(RCD.DSD_Kill_Shift);
PARAMETER(RCD.DSD_BOL_Kill_Shift);
PARAMETER('N');
PARAMETER('N');
PARAMETER('O');
PARAMETER(WRK.Blank_USR);
PARAMETER(WRK.Blank_Usr_1_fld_Usr);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?2=Edt Split
CASE;

// IF RCD.*SFLSEL is Edit
IF RCD.*SFLSEL = '2'/'2';

// Call program Zzz Delivery Split    ET.
CALL PROGRAM(Zzz Delivery Split    ET) ('PLB9ETR');
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.DSH_Kill_Date);
PARAMETER(RCD.DSD_Delivery_Date);
PARAMETER(RCD.DSD_Delivery_Time);
PARAMETER(RCD.DSD_Delivery_Time_Seq);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?4=Clear Slot
CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

CASE;

// IF RCD.DSD Lock Status is Locked
IF RCD.DSD_Lock_Status = 'L';

// Send error message - 'Option Not allowed record is "Locked"'
ERROR(PRK1223);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.DSD HPE Post Status is Not posted/Error
IF RCD.DSD_HPE_Post_Status = 'E'/'N';

// AND RCD.DSD HPS Post Status is Not posted/Error
AND RCD.DSD_HPS_Post_Status = 'E'/'N';

// RCD.DSD HPE Post Status = CND.Not Posted
RCD.DSD_HPE_Post_Status = 'N';

// RCD.DSD HPS Post Status = CND.Not Posted
RCD.DSD_HPS_Post_Status = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.DSD HPE Post Status = CND.Deleted
RCD.DSD_HPE_Post_Status = 'D';

// RCD.DSD HPS Post Status = CND.Deleted
RCD.DSD_HPS_Post_Status = 'D';

ENDIF;

//?S00766 slm 04/22/2009
//?The following change object was blanking out the source type
//?S00766 Slm - Per Alice and LeAnn leave the Source Type
//?when the posting in HPS is completed then a HPS program will
//?clear the source type.
EXECUTE FUNCTION(Chg Clear Slot EXT   CH) TYPE(CHGOBJ) FILE(PLAECPP)            AB1251029;
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.DSH_Kill_Date);
PARAMETER(RCD.DSD_Delivery_Date);
PARAMETER(RCD.DSD_Delivery_Time);
PARAMETER(RCD.DSD_Delivery_Time_Seq);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER('F');
PARAMETER(RCD.DSD_Movement_Number);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER('N');
PARAMETER(RCD.DSD_Sched_Route_Start_Pnt);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(RCD.DSD_Sch_Farm_Arrival_Date);
PARAMETER(RCD.DSD_Sch_Farm_Arrival_Time);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(RCD.DSD_HPS_Post_Status);
PARAMETER(RCD.DSD_HPE_Post_Status);
PARAMETER('O');
PARAMETER(RCD.DSD_Source_Type);
PARAMETER(WRK.Blank_Usr_2);
PARAMETER(RCD.DSD_Unused_Date);
PARAMETER(RCD.DSD_Unused_Time);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?5=Move Slot
CASE;

// IF RCD.*SFLSEL is Select Option 5
IF RCD.*SFLSEL = '5'/'5';

CASE;

// IF RCD.DSD Movement Number is Not entered
IF RCD.DSD_Movement_Number = *ZERO;

// Send error message - 'Option not allowed'
ERROR(PRK0648);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Zzz Move Slot         PV.
CALL PROGRAM(Zzz Move Slot         PV) ('PLEQPVR');
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.DSH_Kill_Date);
PARAMETER(RCD.DSD_Delivery_Date);
PARAMETER(RCD.DSD_Delivery_Time);
PARAMETER(RCD.DSD_Delivery_Time_Seq);
PARAMETER(RCD.DSD_Movement_Number);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?7=Dsp Detail
CASE;

// IF RCD.*SFLSEL is Select Option 7
IF RCD.*SFLSEL = '7'/'7';

// Call program Dsp Delv Sched Dtl    DR.
CALL PROGRAM(Dsp Delv Sched Dtl    DR) ('PLARD1R');
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.DSH_Kill_Date);
PARAMETER(RCD.DSD_Delivery_Date);
PARAMETER(RCD.DSD_Delivery_Time);
PARAMETER(RCD.DSD_Delivery_Time_Seq);

ENDIF;

//?9=Edt Comm
CASE;

// IF RCD.*SFLSEL is Select Option 9
IF RCD.*SFLSEL = '9'/'9';

// Call program Edt Delivery Sched Cm EF.
CALL PROGRAM(Edt Delivery Sched Cm EF) ('PLAXEFR');
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.DSH_Kill_Date);
PARAMETER(RCD.DSD_Delivery_Date);
PARAMETER(RCD.DSD_Delivery_Time);
PARAMETER(RCD.DSD_Delivery_Time_Seq);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?USER: Process command keys

//?SEL:  Load Type removed, Farm Site, Transp Office
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.DSD Farm Site Code
IF PGM.*Cursor_field = CTL.DSD_Farm_Site_Code;

// Call program Sel HPS Farm Site     UP.
CALL PROGRAM(Sel HPS Farm Site     UP) ('HP5003');
PARAMETER(LCL.Return_Code_USR);
PARAMETER(CTL.DSD_Farm_Site_Code);
PARAMETER(LCL.Farm_site_Name_f_HPS_USR);
PARAMETER(NLL.MTech_Farm_Site_Ref);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

//?Transportation Office is in the condition file
ENDIF;

ENDIF;

//?USER: Exit program processing

CASE;

// IF LCL.MTech Live Yes or No is No MTech not Live
IF LCL.MTech_Live_Yes_or_No = 'N';

//?Post automatically if its been posted once, and something was changed.
EXECUTE FUNCTION(Rtv DSH Status        RT) TYPE(RTVOBJ) FILE(PLADCPP)           AB1247374;
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.DSH_Kill_Date);
PARAMETER(LCL.DSH_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.DSH Status is 03-Posted to HPS/HPE
IF LCL.DSH_Status = '03';

// AND PAR.Status 1 is Yes
AND PAR.Status_1 = 'Y';

// Call program Z1Pst Delivery Sched UP.
CALL PROGRAM(Z1Pst Delivery Sched UP) ('HP277CL');
PARAMETER(CTL.DSH_Kill_Date);

ENDIF;

ENDIF;

