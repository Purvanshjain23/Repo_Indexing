     *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      Hog Production
      * PROGRAM:     HP7708
      * TITLE:       View All Budget Items/Farm Budgets
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     03/10/04
      *
      *
      * FUNCTION: This is a View that displays the records in the Farm Budget Detail file.
      *
      *           Restrictors:
      *               None
      *
      *           Positioners:
      *               None
      *
      *           Selectors:
      *               Budget item
      *               Farm site
      *               Budget number
      *               Budget status
      *               Budget template code
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 10/13/04  LeAnne Fedor
      *           Recompile only. Cost Per Unit Amount was changed from
      *           9,2 to 9,4.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhpd7708   cf   e             workstn
     F                                     sfile(hp7708s1:hdrrn1)
     F                                     infds(iofeed)
      *
      *
     Fhsl181c   if   e           k disk
      *  Items  (logical selects only active items that have a Budget Flag = YES)
      *
      *
     Fhsl181d   if   e           k disk    rename(imrec:imrecd)
      *  Items
      *
      *
     Fhsj189e   if   e           k disk
      *    Farm budget detail + farm budget header
      *
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      *
     D upper           c                   'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
     D lower           c                   'abcdefghijklmnopqrstuvwxyz'
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D maxmsg          s              2  0  inz(20)
     D routne          s              6
     D maxrrn          s              4  0
     D reset           s              1    inz('N')
     D norecs          s              1    inz('N')
     D count           s              2  0
     D wkflow          s                   like(idflow)
     D rtncd           s              2
     D svrrn1          s                   like(hdrrn1)
      *
      *
      * Workfields required for subfile paging--see initialization
      * subroutine.
      *
     D wkplin          s              2  0
     D wkrlin          s              2  0
      *
      *
      * Control fields
      *
     D procfl          s              1
      *
     D svbgit          s                   like(c1bgit)
     D svbtcd          s                   like(c1btcd)
     D svfscd          s                   like(c1fscd)
     D svfbsn          s                   like(c1fbsn)
     D svfbscd         s                   like(c1fbscd)
     D svdesc          s                   like(c1desc)
      *
      *
      * Workfields
      *
     D wkdesc          s             25
     D wkbgit          s                   like(c1bgit)
     D nbrchar         s              2  0
      *
     D wkname          s                   like(c1desc)
     D wkbgitds        s                   like(c1desc)
     D length          s              2  0
      *
      *
      * Parms
      *
     D xxbgit          s                   like(d1bgit)
      *
     D xxbtcd          s                   like(d1btcd)
     D xxbtds          s             25
      *
     D xxaist          s              1
     D xxfbsn          s                   like(d1fbsn)
      *
     D xxfbscd         s                   like(d1fbscd)
     D xxfbsds         s              8
      *
     D xxfscd          s                   like(d1fscd)
     D xxfsnm          s             25
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * Clear and fill the subfile
      *
     C                   exsr      $clr1
     C                   exsr      $frsh1
      *
      * Set routine to display screen
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      *
      * This subfile has Fold/Unfold capabilities.  The DDS uses the keywords
      * (SFLDROP, SFLFOLD) to determine whether the user is folded or unfolded
      * and to redisplay the screen in the same mode as when he last saw it.
      * Indicators 78 and 79 are assigned in the DDS to the keywords.
      *
     C                   setoff                                       7879
     C                   if        fold = '0'
     C                   seton                                        78
     C                   else
     C                   seton                                        79
     C                   endif
      *
      * Write screen 1 to crt
      *
     C                   write     hp7708k1
     C                   write     hp7708ec
     C                   exfmt     hp7708c1
      *
      * Save the value of the lowest subfile rrn on the screen for
      * later repositioning of the subfile
      *
     C                   eval      wkflow = idflow
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
     C                   if        error = 0
     C                   exsr      $chksv
     C                   else
     C                   eval      routne = scrn1
     C                   endif
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   movel     yes           reset
     C                   eval      routne = set1
      *
      *
      * Reposition the subfile if the user has changed any of the positioners
      * or selectors in the control record.
      *
     C                   when      c1bgit <> svbgit or
     C                             c1desc <> svdesc or
     C                             c1fscd <> svfscd or
     C                             c1fbsn <> svfbsn or
     C                             c1btcd <> svbtcd or
     C                             c1fbscd <> svfbscd
     C                   exsr      $chksv
      *
     C                   when      *in25 = *on                                  F25-rollup
     C                   exsr      $load1
     C                   other
      *
      * User has pressed enter
      *
     C                   eval      routne = set1
     C                   move      yes           reset
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Save the control record positioners/selectors
      *----------------------------------------------------------------
      *
     C     $chksv        begsr
      *
     C                   movel     no            reset
     C                   eval      routne = set1
      *
     C                   z-add     c1fscd        svfscd
     C                   z-add     c1fbsn        svfbsn
     C                   move      c1btcd        svbtcd
     C                   move      c1fbscd       svfbscd
      *
      * Prepare to scan on Budget Item
      *  1) trim leading/trailing blanks
      *  2) find first non-blank position from right
      *
     C                   eval      c1bgit = %trim(c1bgit)
     C     ' '           checkr    c1bgit        nbrchar
     C                   movel     c1bgit        svbgit
      *
      *
      * Prepare to scan on Budget Item Description
      *  1) trim leading/trailing blanks
      *  2) find first non-blank position from right
      *
     C                   eval      c1desc = %trim(c1desc)
     C     ' '           checkr    c1desc        length
     C                   movel     c1desc        svdesc
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * F4 prompt on screen 1
      *---------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      * Budget item
     C                   select
     C                   when      fld = 'C1BGIT'
     C                   call      'HP5038'
     C                   parm      *blank        xxbgit
     C                   seton                                        51
     C                   if        xxbgit <> *blank
     C                   move      xxbgit        c1bgit
     C                   endif
      *
      * Budget number
     C                   when      fld = 'C1FBSN'
     C                   call      'HP5043'
     C                   parm      'N'           xxfbscd
     C                   parm      0             xxfbsn
     C                   seton                                        55
     C                   if        xxfbsn <> 0
     C                   z-add     xxfbsn        c1fbsn
     C                   endif
      *
      * Farm site
     C                   when      fld = 'C1FSCD'
     C                   call      'HP5040'
     C                   parm      *blank        xxaist
     C                   parm      0             xxfscd
     C                   parm      *blank        xxfsnm
     C                   seton                                        54
     C                   if        xxfscd <> 0
     C                   z-add     xxfscd        c1fscd
     C                   endif
      *
      * Budget status
     C                   when      fld = 'C1FBSCD'
     C                   call      'HP5044'
     C                   parm      *blank        xxfbscd
     C                   parm      *blank        xxfbsds
     C                   seton                                        53
     C                   if        xxfbscd <> *blank
     C                   movel     xxfbscd       c1fbscd
     C                   endif
      *
      * Budget template
     C                   when      fld = 'C1BTCD'
     C                   call      'HP5039'
     C                   parm      *blank        xxaist
     C                   parm      *blank        xxbtcd
     C                   parm      *blank        xxbtds
     C                   seton                                        52
     C                   if        xxbtcd <> *blank
     C                   move      xxbtcd        c1btcd
     C                   endif
     C                   other
      *
      * F4 not valid for this field...issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error                                        013
     C                   movel     'HS09011'     mgid(e)
     C                   endif
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Clear subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $clr1         begsr
      *
     C                   z-add     0             svrrn1
      *
     C                   clear                   hp7708s1
     C                   seton                                        83        sflclr
     C                   write     hp7708c1
     C                   setoff                                       818283
      *                                                    81=sfldsp
      *                                                    82=sflend
      *                                                    83=sflclr
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Refresh/fill the subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $frsh1        begsr
      *
      * Set position in file
      *
     C     *loval        setll     hsj189e
      *
      *
      * The field 'reset' is a flag field to indicate whether you are
      * attempting to reposition the user close to where he was in the
      * subfile.
      * The lowest subfile RRN on the screen from the DSPF feedback
      * area (IDFLOW) was retrieved earlier and put in WKFLOW.
      * Add to WKFLOW the number of lines on your subfile page or the
      * number less 1 to determine a subfile RRN to reposition to.
      *
      *
     C                   if        reset = yes
     C                   eval      maxrrn = wkflow + wkrlin
     C                   else
      *
      * Don't try to reposition the user, just start the subfile over
      *
     C                   eval      maxrrn = wkplin
     C                   endif
      *
      * Load the subfile until you have the required number of records.
      * The number will depend on whether uou are repositioning the
      * subfile or not. Stop if you get to the end of the subfile.
      *
     C                   dou       svrrn1 >= maxrrn or *in82 = *on
     C                   exsr      $load1
     C                   enddo
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Load subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $load1        begsr
      *
     C                   z-add     svrrn1        hdrrn1
      *
      * Set the count of records on the subfile page to zero.
      *
     C                   z-add     0             count
      *
      * Fill the subfile until the end of the database file or
      * you have filled all the lines on the subfile page.
      *
     C                   setoff                                       82
     C                   dou       *in82 = *on or count >= wkplin               Do fill
     C                   read      hsj189e                                82
     C                   if        *in82 = *off                                 If read
     C                   move      yes           procfl
      *
      *
      * Populate 'description' for the Budget Item.
      * Retrieve any active Item record for this Budget Item value to
      * get a description. If you don't have any 'active' records,
      * try again for 'inactive' ones.
      *
     C     jdbgit        chain     hsl181c                            92
     C                   if        *in92 = *off                                 If active
     C                   else
     C     jdbgit        chain     hsl181d                            92
     C                   if        *in92 = *off
     C                   endif
     C                   endif                                                  If active
      *
     C                   select
     C                   when      *in92 = *on
     C                   eval      d1desc = *blank
      *
     C                   when      imitcd = imbgit
     C                   eval      d1desc = imitds
     C                   other
      *
     C                   eval      d1desc = imbgit
     C                   endsl
      *
      * Only include records that match the user's selectors
      *
      * Budget Item
     C                   if        c1bgit <> *blank
     C     lower:upper   xlate     c1bgit        wkdesc
     C     lower:upper   xlate     jdbgit        wkbgit
     C     wkdesc:nbrcharscan      wkbgit                                 92
     C                   if        *in92 = *off
     C                   move      no            procfl
     C                   endif
     C                   endif
      *
      * Budget item description
      *
     C                   if        c1desc <> *blank
     C     lower:upper   xlate     c1desc        wkname
     C     lower:upper   xlate     d1desc        wkbgitds
     C     wkname:length scan      wkbgitds                               92
     C                   if        *in92 = *off
     C                   move      no            procfl
     C                   endif
     C                   endif
      *
      * Farm site
     C                   if        c1fscd <> 0 and
     C                             c1fscd <> jhfscd
     C                   move      no            procfl
     C                   endif
      *
      * Budget number
     C                   if        c1fbsn <> 0 and
     C                             c1fbsn <> jhfbsn
     C                   move      no            procfl
     C                   endif
      *
      *
      * Budget Status
     C                   if        c1fbscd > *blank and
     C                             c1fbscd <> jhfbscd
     C                   move      no            procfl
     C                   endif
      *
      *
      * Budget template code
      *
     C                   if        c1btcd <> *blank and
     C                             c1btcd <> jhbtcd
     C                   move      no            procfl
     C                   endif
      *
     C                   if        procfl = yes                                 If process
     C                   add       1             count
     C                   add       1             hdrrn1
     C                   move      jdbgit        d1bgit
     C                   z-add     jdbgqt        d1bgqt
     C                   z-add     jhfscd        d1fscd
     C                   z-add     jhfbsn        d1fbsn
     C                   move      jhbtcd        d1btcd
     C                   move      jhfbscd       d1fbscd
     C                   write     hp7708s1
     C                   seton                                        81
      *
      * For positioning, place the subfile relative record number into
      * the sflrcdnbr field (hdpag1)
      *
     C                   eval      hdpag1 = hdrrn1
      *
     C                   endif                                                  If process
     C                   endif                                                  If read
     C                   enddo                                                  Do fill loop
      *
      * If no records were written to the subfile, then issue
      * the standard message 'No data to Display'.
      *
     C                   if        hdrrn1 = 0                                   If no recs
     C                   movel     yes           norecs
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09002'
     C                   endif
      *
     C                   else
     C                   movel     no            norecs
     C                   endif                                                  If no recs
      *
     C                   z-add     hdrrn1        svrrn1
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Seton last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      *
      /EJECT
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *     None
      *
      * To support F5-Refresh, logic requires the number of lines on
      * the subfile page and also the number of lines less 1.  By
      * setting these values up as constant work fields, the processing
      * logic can be standardized between programs.
      *
     C                   z-add     12            wkplin                         sflpag
     C     wkplin        sub       1             wkrlin                         sflpag - 1
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /eject
