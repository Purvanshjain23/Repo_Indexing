// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMD8XFR
// ?Date: 14.08.2025 Time: 03:42:48
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?***** Change Log and Comments
DO;

//?09/20/2011 LJB P001251 Don't lock if errors pending in Order Detail
//?   in function 'EDT Lock Load Edit/INF IF - Load Header'
//?11/03/2009 LJB E00495  Change to restrict on the passed in date
//?10/01/2009 LJB E00495  Don't lock if shipping after today
//?RMC 07/24/09 FP1054 dont lock if shipping later than tomorrow
//?RMC 02/23/07 Lock the loads in batch that are still "U"nlocked or
//?  "C"ombined leaving current date and later.
//?RMC 04/05/07 Added Company & Sched ship date parms
ENDDO;

EXECUTE FUNCTION(Rtv Lock Loads- Batch RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1810451;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Scheduled_Ship_Date);
{
 //?USER: Initialize routine

 //?***** Change Log and Comments
 DO;

 //?** 11/03/2009 LJB E00495
 //?** Change to restrict on the date entered and pass Yes in the
 //?** Lock Option Status so the date won't be checked
 //?** 09/30/2009 LJB E00495
 //?** Base Deadline Departure Date calcs on the Carrier appointment
 //?** date/time, if entered. Auto-lock if shipping today, else,
 //?** return "Y" in the error status field.
 ENDDO;

 //?USER: Process Data record

 CASE;

 // IF DB1.Company Number EQ PAR.Company Number
 IF DB1.Company_Number = PAR.Company_Number;

 CASE;

 // IF DB1.Load Status is Unlock
 IF DB1.Load_Status = 'U';

 // OR DB1.Load Status is Combined
 OR DB1.Load_Status = 'C';

 //?P001251 09/20/2011 Don't lock if errors still pending in Order Detail
 //?E00495 11/04/2009 Pass Yes as lock option so date won't be checked
 EXECUTE FUNCTION(EDT Lock Load Edit/INF IF) TYPE(EXCINTFUN)                     AC1481296;
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Company_Number);
 PARAMETER(WRK.*SFLSEL);
 PARAMETER('N');
 PARAMETER(WRK.Error_Status);
 PARAMETER('Y');
 {
  //?Execute internal function

  //?** Chk for ord detail errors still pending  9.20.2011 P001251 LJB
  //?** Chg lock option override sts to *job date chk   8.23.09 E00495
  //?** Add lock option override sts for sched ship date chk  7.24.09 FP1054
  //?** Add Override Total Load Miles - WRK context     E00207 8/13/08
  EXECUTE FUNCTION(RTV Load for Load Plan RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1264653;
  PARAMETER(PAR.Load_ID);
  PARAMETER(WRK.Scheduled_Ship_Date);
  PARAMETER(PAR.Load_Status);
  PARAMETER(WRK.Reefer_Temperature);
  PARAMETER(PAR.Total_Load_Order_Weight);
  PARAMETER(WRK.Flat_Amount);
  PARAMETER(WRK.Allocate_Pounds_Miles);
  PARAMETER(PAR.Carrier_Code);
  PARAMETER(PAR.Truck_Size);
  PARAMETER(WRK.Rated_Freight);
  PARAMETER(WRK.Load_Type);
  PARAMETER(WRK.Schedule_Sequence_Number);
  PARAMETER(WRK.Total_Load_Miles);
  PARAMETER(PAR.Shipping_Method);
  PARAMETER(WRK.Ship_From_Warehouse);
  PARAMETER(WRK.Ship_To_State_Code);
  PARAMETER(WRK.Carrier_Broker);
  PARAMETER(PAR.Load_Acceptance_Flag);
  PARAMETER(WRK.Override_Total_Load_Miles);
  PARAMETER(WRK.Shipping_Temp_C_F_txt);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV Any Ord/Blk  on Ld RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1448300;
  PARAMETER(PAR.Load_ID);
  PARAMETER(WRK.USR_Check_Y_N_Status);
  PARAMETER(PAR.Block_Order_Flag);
  {
   //?USER: Initialize routine

   //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
   // PAR.USR Check Y/N Status = CND.blank
   PAR.USR_Check_Y_N_Status = *BLANK;

   //?OMS203:  need to know if there are any Block orders on load
   // PAR.Block Order Flag = CND.Firm Order
   PAR.Block_Order_Flag = 'F';

   //?USER: Process Data record

   // PAR.USR Check Y/N Status = CND.yes
   PAR.USR_Check_Y_N_Status = 'Y';

   CASE;

   // IF DB1.Block Order Flag is Block Order
   IF DB1.Block_Order_Flag = 'B';

   // PAR.Block Order Flag = DB1.Block Order Flag
   PAR.Block_Order_Flag = DB1.Block_Order_Flag;

   QUIT;

   ENDIF;

  }

  EXECUTE FUNCTION(EDT Lock Load Edits-INFIF) TYPE(EXCINTFUN)                     AC1481297;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Company_Number);
  PARAMETER(WRK.Scheduled_Ship_Date);
  PARAMETER(PAR.Load_Status);
  PARAMETER(PAR.Total_Load_Order_Weight);
  PARAMETER(PAR.Carrier_Code);
  PARAMETER(PAR.Truck_Size);
  PARAMETER(PAR.Shipping_Method);
  PARAMETER(PAR.Load_Acceptance_Flag);
  PARAMETER(PAR.*SFLSEL);
  PARAMETER(PAR.Error_Status);
  PARAMETER(PAR.Block_Order_Flag);
  PARAMETER(PAR.STATUS);
  PARAMETER(PAR.Lock_option_override_sts);
  {
   //?Execute internal function

   //?assume will have error
   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   EXECUTE FUNCTION(VAL Set Int.Acc No Hdg IF) TYPE(EXCINTFUN)                     AC1460523;
   PARAMETER('LOCKLD');
   PARAMETER(WRK.Numeric_Field_Not_Needed);
   PARAMETER(WRK.TXT_field_not_needed);
   PARAMETER(WRK.TXT_field_not_needed);
   PARAMETER(WRK.TXT_field_not_needed);
   PARAMETER(WRK.TXT_field_not_needed);
   PARAMETER(WRK.TXT_field_not_needed);
   PARAMETER(WRK.TXT_field_not_needed);
   PARAMETER(PAR.Access_Denied_Y_N);
   {
    //?Execute internal function

    // PAR.User Profile Name = JOB.*USER
    PAR.User_Profile_Name = JOB.*USER;

    EXECUTE FUNCTION(VAL User/Appl No Exit  IF) TYPE(EXCINTFUN)                     AC1460535;
    PARAMETER(PAR.User_Profile_Name);
    PARAMETER(PAR.Application_Code);
    PARAMETER(WRK.Company_Number);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Allow_Multi_Company);
    PARAMETER(PAR.Default_Printer);
    PARAMETER(PAR.Salesperson_Code);
    PARAMETER(WRK.Access_Denied_Y_N);
    {
     //?Execute internal function

     //?RMC 5/11/09 Rtv default company from user profile --
     //?  Override user code model company if it exists
     EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
     PARAMETER(PAR.User_Profile_Name);
     PARAMETER(PAR.Allow_Multi_Company);
     PARAMETER(PAR.Default_Printer);
     PARAMETER(PAR.Salesperson_Code);
     PARAMETER(LCL.Company_Number);
     PARAMETER(PAR.User_Code_Model);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     //?User Profile Record Not found
     CASE;

     // IF PGM.*Return code is *Record does not exist
     IF PGM.*Return_code = 'Y2U0005';

     // PAR.Access Denied (Y/N) = CND.yes
     PAR.Access_Denied_Y_N = 'Y';

     //?User Profile Record Not found
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Access Denied (Y/N) = CND.no
     PAR.Access_Denied_Y_N = 'N';

     ENDIF;

     CASE;

     // IF PAR.User Code Model is equal to blank
     IF PAR.User_Code_Model = *BLANK;

     EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
     PARAMETER(PAR.User_Profile_Name);
     PARAMETER(PAR.Application_Code);
     PARAMETER(PAR.Company_Number);
     PARAMETER(LCL.Warehouse_Code);
     {
      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     // IF *OTHERWISE
     IF *OTHERWISE;

     EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
     PARAMETER(PAR.User_Code_Model);
     PARAMETER(PAR.Application_Code);
     PARAMETER(PAR.Company_Number);
     PARAMETER(LCL.Warehouse_Code);
     {
      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     ENDIF;

     // PAR.Warehouse Code = LCL.Warehouse Code
     PAR.Warehouse_Code = LCL.Warehouse_Code;

     //?Return code when not normal for Application Profile
     CASE;

     // IF PGM.*Return code is *Normal
     IF PGM.*Return_code = *BLANK;

     // PAR.Access Denied (Y/N) = CND.no
     PAR.Access_Denied_Y_N = 'N';

     //?Return code when not normal for Application Profile
     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.Access Denied (Y/N) = CND.yes
     PAR.Access_Denied_Y_N = 'Y';

     ENDIF;

     CASE;

     // IF LCL.Company Number is greater than zero
     IF LCL.Company_Number > *ZERO;

     // PAR.Company Number = LCL.Company Number
     PAR.Company_Number = LCL.Company_Number;

     CASE;

     // IF LCL.Warehouse Code is Not Blanks
     IF LCL.Warehouse_Code <> *BLANK;

     EXECUTE FUNCTION(RTV Prod Whse for Co  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1757887;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(LCL.Shipping_Company);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      CASE;

      // IF DB1.Record Status is Active
      IF DB1.Record_Status = 'A';

      CASE;

      // IF DB1.Production Warehouse Code is Warehouse Code not Blank
      IF DB1.Production_Warehouse_Code <> *BLANK;

      // PAR.Warehouse Code = DB1.Production Warehouse Code
      PAR.Warehouse_Code = DB1.Production_Warehouse_Code;

      QUIT;

      ENDIF;

      ENDIF;

     }

     ENDIF;

     ENDIF;

    }

    // PAR.Company Number = WRK.Company Number
    PAR.Company_Number = WRK.Company_Number;

    // PAR.Access Denied (Y/N) = WRK.Access Denied (Y/N)
    PAR.Access_Denied_Y_N = WRK.Access_Denied_Y_N;

    //?If access denied is no, rtv co. name
    CASE;

    // IF WRK.Access Denied (Y/N) is no
    IF WRK.Access_Denied_Y_N = 'N';

    EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
    PARAMETER(WRK.Company_Number);
    PARAMETER(PAR.Name);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    ENDIF;

   }

   CASE;

   // IF PAR.Access Denied (Y/N) is yes
   IF PAR.Access_Denied_Y_N = 'Y';

   // Send information message - 'User not allowed to  Lock/Unlock Loads.'
   MESSAGE(USR2543 *INFO);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(VAL no Stop Entered    RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1295710;
   PARAMETER(PAR.Load_ID);
   PARAMETER(PAR.USR_Orders_on_Load);
   {
    //?USER: Initialize routine

    // PAR.Status - Y or N = CND.no
    PAR.Status_Y_or_N = 'N';

    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    CASE;

    // IF DB1.Stop/Drop is EQ Zero
    IF DB1.Stop_Drop = *ZERO;

    // PAR.Status - Y or N = CND.yes
    PAR.Status_Y_or_N = 'Y';

    QUIT;

    ENDIF;

   }

   //?Validate lock request
   CASE;

   // IF PGM.*Return code is *Record does not exist
   IF PGM.*Return_code = 'Y2U0005';

   // Send information message - 'No orders assigned to load &1; Can't lock'
   MESSAGE(USR2544 *INFO);
   MSGPARM(PAR.Load_ID);
   MSGPARM(PAR.*SFLSEL);

   //?Validate lock request
   // IF PAR.Block Order Flag is Block Order
   IF PAR.Block_Order_Flag = 'B';

   // Send information message - 'Load &2 contains Block Orders--no update allowed.'
   MESSAGE(USR2545 *INFO);
   MSGPARM(PAR.*SFLSEL);
   MSGPARM(PAR.Load_ID);

   //?Validate lock request
   // IF PAR.Load Status is Locked thru Invoiced
   IF PAR.Load_Status = 'I'/'L'/'S';

   // Send information message - 'Load &2 cannot be locked due to load status'
   MESSAGE(USR2546 *INFO);
   MSGPARM(PAR.*SFLSEL);
   MSGPARM(PAR.Load_ID);

   //?Validate lock request
   // IF PAR.Carrier Code EQ WRK.BLANK
   IF PAR.Carrier_Code = WRK.BLANK;

   // AND PAR.STATUS is No
   AND PAR.STATUS = 'N';

   // Send information message - 'Carrier must be entered for load &2'
   MESSAGE(USR2547 *INFO);
   MSGPARM(PAR.Carrier_Code);
   MSGPARM(PAR.Load_ID);

   //?Validate lock request
   // IF PAR.Truck Size EQ WRK.BLANK
   IF PAR.Truck_Size = WRK.BLANK;

   // Send information message - 'Truck size must be entered for load &2'
   MESSAGE(USR2548 *INFO);
   MSGPARM(PAR.Truck_Size);
   MSGPARM(PAR.Load_ID);

   //?Validate lock request
   // IF PAR.Shipping Method EQ WRK.BLANK
   IF PAR.Shipping_Method = WRK.BLANK;

   // Send information message - 'Shipping Method required to lock load.'
   MESSAGE(USR2549 *INFO);
   MSGPARM(PAR.Shipping_Method);

   //?Validate lock request
   // IF PAR.USR Orders on Load is yes
   IF PAR.USR_Orders_on_Load = 'Y';

   // Send information message - 'Function not allowed; Load &1 has orders tied to it which are not
   MESSAGE(USR2550 *INFO);
   MSGPARM(PAR.Load_ID);

   //?Validate lock request
   // IF PAR.Load Acceptance Flag is Load not Accepted
   IF PAR.Load_Acceptance_Flag = 'U';

   // Send information message - 'Load cannot be locked, it is unaccepted.'
   MESSAGE(USR2551 *INFO);
   MSGPARM(PAR.Load_ID);

   //?Validate lock request
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Hold, Use-by load  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1304327;
   PARAMETER(PAR.Order_in_Use);
   PARAMETER(PAR.Header_Status);
   PARAMETER(PAR.Load_ID);
   {
    //?USER: Initialize routine

    //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    //?If find 1 order on load which is held/cancelled, set par flag and exit
    CASE;

    // IF DB1.Header Status is Hold
    IF DB1.Header_Status = 'H';

    // PAR.Header Status = DB1.Header Status
    PAR.Header_Status = DB1.Header_Status;

    QUIT;

    //?If find 1 order on load which is held/cancelled, set par flag and exit
    // IF DB1.Header Status is Cancelled
    IF DB1.Header_Status = 'X';

    // PAR.Header Status = DB1.Header Status
    PAR.Header_Status = DB1.Header_Status;

    QUIT;

    //?If find 1 order on load which is held/cancelled, set par flag and exit
    // IF DB1.Order in Use is yes
    IF DB1.Order_in_Use = 'Y';

    // PAR.Order in Use = DB1.Order in Use
    PAR.Order_in_Use = DB1.Order_in_Use;

    QUIT;

    ENDIF;

   }

   //?Error if held/cancelled/in use order(s) on load
   CASE;

   // IF PAR.Header Status is Hold
   IF PAR.Header_Status = 'H';

   // Send information message - 'Load &1 contains orders on Hold.  Load cannot be Locked.'
   MESSAGE(USR2552 *INFO);
   MSGPARM(PAR.Load_ID);
   MSGPARM(PAR.*SFLSEL);

   //?Error if held/cancelled/in use order(s) on load
   // IF PAR.Header Status is Cancelled
   IF PAR.Header_Status = 'X';

   // Send information message - 'Load &1 contains cancelled order(s).  Load cannot be Locked.'
   MESSAGE(USR2553 *INFO);
   MSGPARM(PAR.Load_ID);
   MSGPARM(PAR.*SFLSEL);

   //?Error if held/cancelled/in use order(s) on load
   // IF PAR.Order in Use is yes
   IF PAR.Order_in_Use = 'Y';

   // Send information message - 'Load &2 has order(s) in use; Load cannot be locked.'
   MESSAGE(USR2554 *INFO);
   MSGPARM(PAR.*SFLSEL);
   MSGPARM(PAR.Load_ID);

   //?Error if held/cancelled/in use order(s) on load
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Ord Requires Revw RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2027682;
   PARAMETER(PAR.Load_ID);
   PARAMETER(LCL.Order_Requires_Review);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?** Check for errors in Export Order Automation Upload   P001251
   CASE;

   // IF LCL.Order Requires Review is Yes
   IF LCL.Order_Requires_Review = 'Y';

   //?** Cannot lock load if errors in Order Detail         P001251
   // Send error message - 'Order has detail lines that require review'
   ERROR(USR4464);
   MSGPARM(PAR.*SFLSEL);
   MSGPARM(PAR.Load_ID);

   //?** Check for errors in Export Order Automation Upload   P001251
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Rtv Min & Max Pounds  RT) TYPE(RTVOBJ) FILE(OMFKREP)           AC1197715;
   PARAMETER(PAR.Truck_Size);
   PARAMETER(PAR.Maximum_pounds);
   PARAMETER(PAR.Minimum_pounds);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Do not want to lock the load if the Load Weight is not
   //?within range.  -Purva 5/5/99 C0007042
   //?Check minimum and maximum pounds
   CASE;

   // IF PAR.Total Weight LT PAR.Minimum pounds
   IF PAR.Total_Load_Order_Weight < PAR.Minimum_pounds;

   // Send information message - 'Load weight is less than the minimum weight allowed for load &1.'
   MESSAGE(USR1262 *INFO);
   MSGPARM(PAR.Load_ID);

   // PAR.Error Status = CND.no
   PAR.Error_Status = 'N';

   //?Check minimum and maximum pounds
   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Total Weight GT PAR.Maximum pounds
   IF PAR.Total_Load_Order_Weight > PAR.Maximum_pounds;

   // Send information message - 'Load weight is greater than maximum allowed for truck size.'
   MESSAGE(USR2231 *INFO);

   // PAR.Error Status = CND.no
   PAR.Error_Status = 'N';

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Check Sched ship date if not called from a LOCK option  FP1054 7/24/09
   CASE;

   // IF PAR.Lock option override sts is No
   IF PAR.Lock_option_override_sts = 'N';

   // AND PAR.Scheduled Ship Date GT JOB.*Job date
   AND PAR.Scheduled_Ship_Date > JOB.*Job_date;

   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   //?Check Sched ship date if not called from a LOCK option  FP1054 7/24/09
   // IF *OTHERWISE
   IF *OTHERWISE;

   // Send information message - 'Locking load pending'
   MESSAGE(USR1273 *INFO);

   // PAR.Error Status = CND.no
   PAR.Error_Status = 'N';

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

   //?***** Change Log and Comments
   DO;

   //?*****
   //?** 09/20/2011 LJB P001251  Export Order Automation Upload
   //?** Cannot lock load if there are errors still pending in the
   //?** Order Detail record
   //?*****
   //?** Auto lock if shipping today & no errors            E00495
   ENDDO;

  }

 }

 CASE;

 // IF WRK.Error Status is no
 IF WRK.Error_Status = 'N';

 //?** This update recalcs the DDD/T based on Carrier appt dt/tm E00495
 EXECUTE FUNCTION(UPD Lock Load Update   IF) TYPE(EXCINTFUN)                     AC1451094;
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Company_Number);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Load Header All,Mg RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC2124794;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(PAR.Flat_Amount);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(PAR.Total_Stops);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(PAR.Total_Load_Miles);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(PAR.Ship_From_Warehouse);
  PARAMETER(PAR.Ship_To_State_Code);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(PAR.Carrier_Broker);
  PARAMETER(PAR.Export_Status);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(PAR.Deadline_Departure_Date);
  PARAMETER(PAR.Deadline_Departure_Time);
  PARAMETER(PAR.MG_Created_Load);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?.** Use carr appt dt/tm, if entered, for DDD/T calcs   E00495
  //?Fill in ship from whse deadline depart, if locking load and none entered
  CASE;

  // IF PAR.Ship From Warehouse EQ WRK.BLANK
  IF PAR.Ship_From_Warehouse = WRK.BLANK;

  EXECUTE FUNCTION(Rtv/Chg Whs,ld miles  RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1471360;
  PARAMETER(PAR.Load_ID);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(RTV First Order Whse   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1397882;
   PARAMETER(DB1.Load_ID);
   PARAMETER(1);
   PARAMETER(PAR.Ship_From_Warehouse);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(WRK.TXT_field_not_needed);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
     PARAMETER(DB1.Warehouse_Code);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     MOVE *ALL (To: PAR From: DB1);

     QUIT;

    }

    QUIT;

   }

   CASE;

   // IF DB1.Warehouse Code EQ PAR.Ship From Warehouse
   IF DB1.Warehouse_Code = PAR.Ship_From_Warehouse;

   // PAR.Warehouse Code = CON.*BLANK
   PAR.Warehouse_Code = *BLANK;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Warehouse Code = DB1.Warehouse Code
   PAR.Warehouse_Code = DB1.Warehouse_Code;

   ENDIF;

   //?** 11/16/2007 LJB FP1251 Total Load Miles will = zeros if no
   //?** Miles Between Cities record exists
   //?** Override total load miles will take precedence over tlm  E00207
   //?E4119 RMC 7/15/16  Upd miles if NOT MG LOAD
   CASE;

   // IF DB1.MG Created Load is Yes
   IF DB1.MG_Created_Load = 'Y';

   // PAR.Total Load Miles = DB1.Total Load Miles
   PAR.Total_Load_Miles = DB1.Total_Load_Miles;

   // PAR.Override Total Load Miles = DB1.Override Total Load Miles
   PAR.Override_Total_Load_Miles = DB1.Override_Total_Load_Miles;

   //?E4119 RMC 7/15/16  Upd miles if NOT MG LOAD
   // IF *OTHERWISE
   IF *OTHERWISE;

   // Call program CLC Total Load Miles   XF.
   CALL PROGRAM(CLC Total Load Miles   XF) ('PDW3XFR');
   PARAMETER(DB1.Load_ID);
   PARAMETER(PAR.Total_Load_Miles);
   PARAMETER(PAR.Override_Total_Load_Miles);

   ENDIF;

   //?** Add override miles to the update            E00207 LJB 08/13/08
   EXECUTE FUNCTION(CHG Ship FrmWhs,ld mls CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1471384;
   PARAMETER(DB1.Load_ID);
   PARAMETER(PAR.Total_Load_Miles);
   PARAMETER(PAR.Ship_From_Warehouse);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Override_Total_Load_Miles);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  CASE;

  // IF PAR.MG Created Load is Not MG Created Load
  IF PAR.MG_Created_Load = *BLANK;

  //?** RTV carrier appt date/time                         E00495
  EXECUTE FUNCTION(RTV 1st Carr Apt Dt/Tm RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1954073;
  PARAMETER(PAR.Load_ID);
  PARAMETER(*ZERO);
  PARAMETER(WRK.LD_Carrier_Appt_Date);
  PARAMETER(PAR.Deadline_Departure_Time);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   // PAR.LD Carrier Appt Date = DB1.LD Carrier Appt Date
   PAR.LD_Carrier_Appt_Date = DB1.LD_Carrier_Appt_Date;

   // PAR.LD Carrier Appt Time = DB1.LD Carrier Appt Time
   PAR.LD_Carrier_Appt_Time = DB1.LD_Carrier_Appt_Time;

   QUIT;

  }

  //?** Use carr appt dt/tm, if entered, for DDD/T calcs   E00495
  CASE;

  // IF WRK.LD Carrier Appt Date is Entered
  IF WRK.LD_Carrier_Appt_Date > 0;

  // PAR.Deadline Departure Date = WRK.LD Carrier Appt Date
  PAR.Deadline_Departure_Date = WRK.LD_Carrier_Appt_Date;

  //?** Use carr appt dt/tm, if entered, for DDD/T calcs   E00495
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv 1st Ord Delv Dt/Tm RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1456727;
  PARAMETER(PAR.Load_ID);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Deadline_Departure_Date);
  PARAMETER(PAR.Requested_Delivery_Time);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Rtv Delivery Date/Time RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1445871;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Ship_To_Name);
   PARAMETER(WRK.Ship_To_City);
   PARAMETER(NLL.Ship_To_State_Code);
   PARAMETER(PAR.Requested_Delivery_Date);
   PARAMETER(PAR.Requested_Delivery_Time);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   QUIT;

  }

  // PAR.Deadline Departure Time = PAR.Requested Delivery Time * CON.100 *
  PAR.Deadline_Departure_Time = PAR.Requested_Delivery_Time * 100;

  ENDIF;

  EXECUTE FUNCTION(CLC Departure Date/TimeIF) TYPE(EXCINTFUN)                     AC1456426;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Deadline_Departure_Date);
  PARAMETER(PAR.Deadline_Departure_Time);
  {
   //?Execute internal function

   //?***** Change Log and Comments
   DO;

   //?** The Date and Time being calculated are the latest date and time
   //?** that the truck can leave the warehouse and still make the
   //?** delivery on time.
   //?*****
   //?** E00495 LJB 09.23.2009
   //?** Carrier Appt Date and Time are in the parm Deadline Departure
   //?** date and time, if called from "UPD Ld Mi,Whse,DDD/T IF"
   //?*****
   //?** E00207 LJB 08/11/2008
   //?** Override Total Load Miles has been added to the
   //?** Retrieve Total Load Miles function
   //?*****
   //?** FP1251 LJB 12/26/2007
   //?** If no Miles To Next record, change SSD/T to zeros.
   //?** Scheduled Deliv Date has (should have) Requested Delivery Date in it
   ENDDO;

   EXECUTE FUNCTION(RTV Shipping Method    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1572676;
   PARAMETER(PAR.Load_ID);
   PARAMETER(LCL.Shipping_Method);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.Shipping Method is Collect Truck
   IF LCL.Shipping_Method = 'CT';

   // OR LCL.Shipping Method is Collect Rail
   OR LCL.Shipping_Method = 'CR';

   //?** Treat CT & CR the same           FP1251 LJB 12/26/2007
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV 1st Stop Mileage   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1456048;
   PARAMETER(PAR.Load_ID);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Miles_to_next_stop);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   //?** Calc miles between all stops then retrieve 1st stop miles
   CASE;

   // IF PAR.Miles to next stop is Not Entered
   IF PAR.Miles_to_next_stop = *ZERO;

   //?** Override miles will be returned, if entered
   // Call program CLC Total Load Miles   XF.
   CALL PROGRAM(CLC Total Load Miles   XF) ('PDW3XFR');
   PARAMETER(PAR.Load_ID);
   PARAMETER(WRK.Total_Load_Miles);
   PARAMETER(WRK.Override_Total_Load_Miles);

   EXECUTE FUNCTION(RTV 1st Stop Mileage   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1456048;
   PARAMETER(PAR.Load_ID);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Miles_to_next_stop);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   ENDIF;

   //?** 11/16/2007 LJB FP1251 Error if no miles, set SDD/SDT to zeros
   CASE;

   // IF PAR.Miles to next stop is Not Entered
   IF PAR.Miles_to_next_stop = *ZERO;

   // PAR.Scheduled Delivery Date = CND.not entered
   PAR.Scheduled_Delivery_Date = *ZERO;

   // PAR.Scheduled Delivery Time = CND.Not Entered
   PAR.Scheduled_Delivery_Time = *ZERO;

   //?** 11/16/2007 LJB FP1251 Error if no miles, set SDD/SDT to zeros
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Hours Required = CON.*ZERO
   PAR.Hours_Required = *ZERO;

   // LCL.Hours Required = CON.*ZERO
   LCL.Hours_Required = *ZERO;

   EXECUTE FUNCTION(RTV Legal Run Miles DscRT) TYPE(RTVOBJ) FILE(PDLGCPP)          AC1456042;
   PARAMETER(PAR.Miles_to_next_stop);
   PARAMETER(LCL.Hours_Required);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   //?09/09/11 PKD E1659 Additional Route Hours
   // Call program Rtv Addtnl Route Hrs  XF.
   CALL PROGRAM(Rtv Addtnl Route Hrs  XF) ('PMACXFR');
   PARAMETER(PAR.Load_ID);
   PARAMETER(LCL.Additional_Route_Hours);

   // PAR.Hours Required = LCL.Hours Required + LCL.Additional Route Hours
   PAR.Hours_Required = LCL.Hours_Required + LCL.Additional_Route_Hours;

   //?get number of whole days + remaining hours
   CASE;

   // IF PAR.Hours Required is Zero
   IF PAR.Hours_Required = *ZERO;

   //?get number of whole days + remaining hours
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.@Days 5 = PAR.Hours Required / CON.24 *
   PAR.@Days_5 = PAR.Hours_Required / 24;

   // WRK.USR Hours 5.0 = PAR.@Days 5 * CON.24 *
   WRK.USR_Hours_5_0 = PAR.@Days_5 * 24;

   // PAR.USR Hours 5.0 = PAR.Hours Required - WRK.USR Hours 5.0
   PAR.USR_Hours_5_0 = PAR.Hours_Required - WRK.USR_Hours_5_0;

   // WRK.@Numeric 6,0 = PAR.USR Hours 5.0 * CON.10000 *
   WRK.@Numeric_60 = PAR.USR_Hours_5_0 * 10000;

   //?Subtract whole days
   CASE;

   // IF PAR.@Days 5 is greater than zero
   IF PAR.@Days_5 > *ZERO;

   // PAR.@Days 5 = PAR.@Days 5 * CON.-1 *
   PAR.@Days_5 = PAR.@Days_5 * -1;

   // PAR.Scheduled Delivery Date = PAR.Scheduled Delivery Date + PAR.@Days 5 *DAYS
   PAR.Scheduled_Delivery_Date = DATEINCR(PAR.Scheduled_Delivery_Date PAR.@Days_5 'DY'
   1111111 'NONE' 'N' 1);

   ENDIF;

   //?Calculate # whole days + hours left
   CASE;

   // IF WRK.@Numeric 6,0 GE PAR.Scheduled Delivery Time
   IF WRK.@Numeric_60 >= PAR.Scheduled_Delivery_Time;

   // WRK.@Numeric 6,0 = WRK.@Numeric 6,0 - PAR.Scheduled Delivery Time
   WRK.@Numeric_60 = WRK.@Numeric_60 - PAR.Scheduled_Delivery_Time;

   // PAR.@Days 5 = CON.-1
   PAR.@Days_5 = -1;

   // PAR.Scheduled Delivery Date = PAR.Scheduled Delivery Date + PAR.@Days 5 *DAYS
   PAR.Scheduled_Delivery_Date = DATEINCR(PAR.Scheduled_Delivery_Date PAR.@Days_5 'DY'
   1111111 'NONE' 'N' 1);

   // PAR.Scheduled Delivery Time = CON.240000 - WRK.@Numeric 6,0
   PAR.Scheduled_Delivery_Time = 240000 - WRK.@Numeric_60;

   //?Calculate # whole days + hours left
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Scheduled Delivery Time = PAR.Scheduled Delivery Time - WRK.@Numeric 6,0
   PAR.Scheduled_Delivery_Time = PAR.Scheduled_Delivery_Time - WRK.@Numeric_60;

   ENDIF;

   ENDIF;

   ENDIF;

   EXECUTE FUNCTION(RTV Total Ld Mi/Sts    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1496186;
   PARAMETER(PAR.Load_ID);
   PARAMETER(WRK.TXT_field_not_needed);
   PARAMETER(WRK.Total_Load_Miles);
   PARAMETER(WRK.Override_Total_Load_Miles);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

  //?---------------------------------------------------------------
  EXECUTE FUNCTION(RTV Last Stop Consign  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1377331;
  PARAMETER(PAR.Load_ID);
  PARAMETER(WRK.Ship_To_Customer);
  PARAMETER(WRK.Ship_To_Name);
  PARAMETER(WRK.Ship_To_Address_Line_1);
  PARAMETER(WRK.Ship_To_Address_Line_2);
  PARAMETER(WRK.Ship_To_Address_Line_3);
  PARAMETER(WRK.Ship_To_City);
  PARAMETER(PAR.Ship_To_State_Code);
  PARAMETER(WRK.Ship_To_Zip_Postal_Code);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(RTV for B.O.L. Print   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1377319;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(PAR.Ship_To_Customer);
   PARAMETER(PAR.Ship_To_Name);
   PARAMETER(PAR.Ship_To_Address_Line_1);
   PARAMETER(PAR.Ship_To_Address_Line_2);
   PARAMETER(PAR.Ship_To_Address_Line_3);
   PARAMETER(PAR.Ship_To_City);
   PARAMETER(PAR.Ship_To_State_Code);
   PARAMETER(PAR.Ship_To_Zip_Postal_Code);
   PARAMETER(WRK.TXT_field_not_needed);
   PARAMETER(WRK.TXT_field_not_needed);
   PARAMETER(WRK.TXT_field_not_needed);
   PARAMETER(WRK.Numeric_Field_Not_Needed);
   PARAMETER(WRK.Numeric_Field_Not_Needed);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   QUIT;

  }

  //?---------------------------------------------------------------
  //?OMS132:  Fill in Flat Amount as required
  CASE;

  // IF PAR.Total Stops is One Stop
  IF PAR.Total_Stops = 1;

  // AND PAR.Flat Amount EQ WRK.ZERO
  AND PAR.Flat_Amount = WRK.ZERO;

  //?get flat amount for destination city
  EXECUTE FUNCTION(RTV Ship To City/St-Ld RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1454218;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Destination_City);
  PARAMETER(PAR.State_Code);
  {
   //?USER: Initialize routine

   //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  // Execute function CVT Str to Upper Alpha US.
  EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
  PARAMETER(PAR.Destination_City);
  PARAMETER(WRK.Destination_City);
  {
   PDWEUFR:  PGM PARM(&STRIN &STROUT)

   CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
  }

  // PAR.Destination City = WRK.Destination City
  PAR.Destination_City = WRK.Destination_City;

  EXECUTE FUNCTION(RTV Destination Amount RT) TYPE(RTVOBJ) FILE(PDLECPP)          AC1454806;
  PARAMETER(PAR.Carrier_Broker);
  PARAMETER(PAR.Ship_From_Warehouse);
  PARAMETER(PAR.Destination_City);
  PARAMETER(PAR.State_Code);
  PARAMETER(PAR.Flat_Amount);
  {
   //?USER: Process Data record

   //?only pass out FLAT amt.  (it could now be a ML rate too)  01/03/07
   CASE;

   // IF DB1.CDR Unit of Measure is Flat
   IF DB1.CDR_Unit_of_Measure = 'FL';

   MOVE *ALL (To: PAR From: DB1);

   ENDIF;

  }

  ENDIF;

  //?Calc Load U/M           -- RMC 6/16/06
  DO;

  //?** All boxes=BX, All combos=CB, Any mix of the two=MX   E00239 11/12/08
  // Call program RTV UM/Whs Code,BX Qty XF.
  CALL PROGRAM(RTV UM/Whs Code,BX Qty XF) ('PPYXXFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Load_U_M);

  ENDDO;

  EXECUTE FUNCTION(CHG Lock Load Update   CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1454811;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER('L');
  PARAMETER(PAR.Flat_Amount);
  PARAMETER(PAR.Ship_From_Warehouse);
  PARAMETER(PAR.Ship_To_State_Code);
  PARAMETER(PAR.Deadline_Departure_Date);
  PARAMETER(PAR.Deadline_Departure_Time);
  PARAMETER(PAR.Load_U_M);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  //?OMS261:  if sched to ship today, print prelim pick at all whses
  //?Sched to ship today
  CASE;

  // IF PAR.Scheduled Ship Date EQ JOB.*Job date
  IF PAR.Scheduled_Ship_Date = JOB.*Job_date;

  EXECUTE FUNCTION(RTV All Whses on Load  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1483728;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.USR_Warehouse_Code);
  PARAMETER(PAR.USR_CDE_Parm_1);
  PARAMETER(PAR.USR_CDE_Parm_2);
  PARAMETER(PAR.USR_CDE_Parm_3);
  PARAMETER(PAR.USR_CDE_Parm_4);
  PARAMETER(PAR.USR_CDE_Parm_5);
  PARAMETER(PAR.USR_CDE_Parm_6);
  PARAMETER(PAR.USR_CDE_Parm_7);
  PARAMETER(PAR.USR_CDE_Parm_8);
  PARAMETER(PAR.USR_CDE_Parm_9);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV All Whses on Order RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1483729;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.USR_Warehouse_Code);
   PARAMETER(PAR.USR_CDE_Parm_1);
   PARAMETER(PAR.USR_CDE_Parm_2);
   PARAMETER(PAR.USR_CDE_Parm_3);
   PARAMETER(PAR.USR_CDE_Parm_4);
   PARAMETER(PAR.USR_CDE_Parm_5);
   PARAMETER(PAR.USR_CDE_Parm_6);
   PARAMETER(PAR.USR_CDE_Parm_7);
   PARAMETER(PAR.USR_CDE_Parm_8);
   PARAMETER(PAR.USR_CDE_Parm_9);
   {
    //?USER: Process Data record

    CASE;

    // IF DB1.Warehouse Code EQ PAR.USR Warehouse Code
    IF DB1.Warehouse_Code = PAR.USR_Warehouse_Code;

    // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 1
    IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_1;

    // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 2
    IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_2;

    // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 3
    IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_3;

    // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 4
    IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_4;

    // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 5
    IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_5;

    // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 6
    IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_6;

    // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 7
    IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_7;

    // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 8
    IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_8;

    // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 9
    IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_9;

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?current warehouse not already being used
    //?Fill in first blank warehouse
    CASE;

    // IF PAR.USR Warehouse Code EQ WRK.BLANK
    IF PAR.USR_Warehouse_Code = WRK.BLANK;

    // PAR.USR Warehouse Code = DB1.Warehouse Code
    PAR.USR_Warehouse_Code = DB1.Warehouse_Code;

    //?Fill in first blank warehouse
    // IF PAR.USR CDE Parm 1 EQ WRK.BLANK
    IF PAR.USR_CDE_Parm_1 = WRK.BLANK;

    // PAR.USR CDE Parm 1 = DB1.Warehouse Code
    PAR.USR_CDE_Parm_1 = DB1.Warehouse_Code;

    //?Fill in first blank warehouse
    // IF PAR.USR CDE Parm 2 EQ WRK.BLANK
    IF PAR.USR_CDE_Parm_2 = WRK.BLANK;

    // PAR.USR CDE Parm 2 = DB1.Warehouse Code
    PAR.USR_CDE_Parm_2 = DB1.Warehouse_Code;

    //?Fill in first blank warehouse
    // IF PAR.USR CDE Parm 3 EQ WRK.BLANK
    IF PAR.USR_CDE_Parm_3 = WRK.BLANK;

    // PAR.USR CDE Parm 3 = DB1.Warehouse Code
    PAR.USR_CDE_Parm_3 = DB1.Warehouse_Code;

    //?Fill in first blank warehouse
    // IF PAR.USR CDE Parm 4 EQ WRK.BLANK
    IF PAR.USR_CDE_Parm_4 = WRK.BLANK;

    // PAR.USR CDE Parm 4 = DB1.Warehouse Code
    PAR.USR_CDE_Parm_4 = DB1.Warehouse_Code;

    //?Fill in first blank warehouse
    // IF PAR.USR CDE Parm 5 EQ WRK.BLANK
    IF PAR.USR_CDE_Parm_5 = WRK.BLANK;

    // PAR.USR CDE Parm 5 = DB1.Warehouse Code
    PAR.USR_CDE_Parm_5 = DB1.Warehouse_Code;

    //?Fill in first blank warehouse
    // IF PAR.USR CDE Parm 6 EQ WRK.BLANK
    IF PAR.USR_CDE_Parm_6 = WRK.BLANK;

    // PAR.USR CDE Parm 6 = DB1.Warehouse Code
    PAR.USR_CDE_Parm_6 = DB1.Warehouse_Code;

    //?Fill in first blank warehouse
    // IF PAR.USR CDE Parm 7 EQ WRK.BLANK
    IF PAR.USR_CDE_Parm_7 = WRK.BLANK;

    // PAR.USR CDE Parm 7 = DB1.Warehouse Code
    PAR.USR_CDE_Parm_7 = DB1.Warehouse_Code;

    //?Fill in first blank warehouse
    // IF PAR.USR CDE Parm 8 EQ WRK.BLANK
    IF PAR.USR_CDE_Parm_8 = WRK.BLANK;

    // PAR.USR CDE Parm 8 = DB1.Warehouse Code
    PAR.USR_CDE_Parm_8 = DB1.Warehouse_Code;

    //?Fill in first blank warehouse
    // IF PAR.USR CDE Parm 9 EQ WRK.BLANK
    IF PAR.USR_CDE_Parm_9 = WRK.BLANK;

    // PAR.USR CDE Parm 9 = DB1.Warehouse Code
    PAR.USR_CDE_Parm_9 = DB1.Warehouse_Code;

    ENDIF;

    ENDIF;

   }

  }

  // PAR.Company Number Pass   USR = PAR.Company Number
  PAR.Company_Number_Pass_USR = PAR.Company_Number;

  // PAR.Order Number 1  PASS  USR = PAR.Load ID
  PAR.Order_Number_1_PASS_USR = PAR.Load_ID;

  // PAR.Date 1          PASS  USR = PAR.Scheduled Ship Date
  PAR.Date_1_PASS_USR = PAR.Scheduled_Ship_Date;

  // WRK.USR Select/Omit Flag = CND.Select
  WRK.USR_Select_Omit_Flag = 'S';

  // WRK.USR Detail or Summary = CND.Detail
  WRK.USR_Detail_or_Summary = 'D';

  // WRK.AUTO PRINT PRELIM PICK = CND.AUTO PRINT YES
  WRK.AUTO_PRINT_PRELIM_PICK = 'Y';

  //?letting all the other parms default in the CL
  //?If warehouse exists for load then print.
  CASE;

  // IF PAR.USR Warehouse Code is Warehouse Code not Blank
  IF PAR.USR_Warehouse_Code <> *BLANK;

  // Call program Pass Pre Pick @LoadLockUP.
  CALL PROGRAM(Pass Pre Pick @LoadLockUP) ('PDBDUPC');
  PARAMETER(PAR.Return_Code_Usr);
  PARAMETER('OMS');
  PARAMETER('PDIZPCLP');
  PARAMETER(WRK.USR_Detail_or_Summary);
  PARAMETER('Auto Print Prelim. Pick');
  PARAMETER(WRK.PRT_Printer_Device);
  PARAMETER(WRK.PRT_Hold_Output_Sts);
  PARAMETER(WRK.PRT_Save_Output_Sts);
  PARAMETER(WRK.PRT_Night_Queue_Run_Sts);
  PARAMETER(WRK.PRT_Night_Queue);
  PARAMETER(PAR.Company_Number_Pass_USR);
  PARAMETER(PAR.Date_1_PASS_USR);
  PARAMETER(PAR.Order_Number_1_PASS_USR);
  PARAMETER(WRK.System_Value_Numeric);
  PARAMETER(PAR.USR_Warehouse_Code);
  PARAMETER(PAR.USR_CDE_Parm_1);
  PARAMETER(PAR.USR_CDE_Parm_2);
  PARAMETER(PAR.USR_CDE_Parm_3);
  PARAMETER(PAR.USR_CDE_Parm_4);
  PARAMETER(PAR.USR_CDE_Parm_5);
  PARAMETER(PAR.USR_CDE_Parm_6);
  PARAMETER(PAR.USR_CDE_Parm_7);
  PARAMETER(PAR.USR_CDE_Parm_8);
  PARAMETER(PAR.USR_CDE_Parm_9);
  PARAMETER(WRK.USR_Select_Omit_Flag);
  PARAMETER(WRK.AUTO_PRINT_PRELIM_PICK);

  ENDIF;

  ENDIF;

  EXECUTE FUNCTION(EDT Lock Load          IF) TYPE(EXCINTFUN)                     AC1419469;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Company_Number);
  {
   //?Execute internal function

   //?*** Return Plant Code from first Order Header
   EXECUTE FUNCTION(zzV for Accusort Load  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1322485;
   PARAMETER(PAR.Load_ID);
   PARAMETER(PAR.Trans_Contol_AS400_Plant);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1305919;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(WRK.Trans_Contol_AS400_Plant);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428569;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Trans_Contol_AS400_Plant);
     {
      //?USER: Process Data record

      CASE;

      // IF DB1.Detail Line Status is Not cancelled
      IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

      EXECUTE FUNCTION(Rtv Desc/Trans Control RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304130;
      PARAMETER(DB1.Warehouse_Code);
      PARAMETER(WRK.Warehouse_Description);
      PARAMETER(PAR.Trans_Contol_AS400_Plant);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

      QUIT;

      ENDIF;

     }

     CASE;

     // IF WRK.Trans Contol AS400/Plant is Plant
     IF WRK.Trans_Contol_AS400_Plant = 'P';

     // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
     PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

     QUIT;

     ENDIF;

    }

    CASE;

    // IF WRK.Trans Contol AS400/Plant is Plant
    IF WRK.Trans_Contol_AS400_Plant = 'P';

    // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
    PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

    QUIT;

    ENDIF;

   }

   EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
   PARAMETER(PAR.Company_Number);
   PARAMETER('LDORDD');
   PARAMETER(LCL.PFS_AccuSort_Active);
   PARAMETER(LCL.PFS_Carlisle_Active);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?UPD:  AccuSort
   CASE;

   // IF LCL.PFS AccuSort Active is Yes
   IF LCL.PFS_AccuSort_Active = 'Y';

   //?AccuSort:  Create Order Header and Order Detail
   CASE;

   // IF PAR.Trans Contol AS400/Plant is Plant
   IF PAR.Trans_Contol_AS400_Plant = 'P';

   // Call program Zzz Lock/Unlock Box ID XF.
   CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
   PARAMETER('L');

   // Call program Zzz AS Order Hdr/Dtl   XF.
   CALL PROGRAM(Zzz AS Order Hdr/Dtl   XF) ('PDQPXFR');
   PARAMETER(PAR.Load_ID);
   PARAMETER(PAR.Company_Number);

   // Call program Zzz Lock/Unlock Box ID XF.
   CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
   PARAMETER('U');

   ENDIF;

   ENDIF;

   //?UPD:  Carlisle
   CASE;

   // IF LCL.PFS Carlisle Active is Yes
   IF LCL.PFS_Carlisle_Active = 'Y';

   // Call program PFS Lock Load/Order   XF.
   CALL PROGRAM(PFS Lock Load/Order   XF) ('PPNLXFR');
   PARAMETER(PAR.Load_ID);

   ENDIF;

   //?** 07/28/2017 RMC R131331 if load had a whs with edi wso interchange, then
   // Call program Exc Create EDI f/Lock XF.
   CALL PROGRAM(Exc Create EDI f/Lock XF) ('PUDNXFR');
   PARAMETER(PAR.Load_ID);

  }

  CASE;

  // IF JOB.*PROGRAM is PRT Audit Report
  IF JOB.*PROGRAM = 'PDSNPFR';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function Clr Program Message Q  US.
  EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
  {
   * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
   C                     CALL 'Y2CLMSC'
   C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
   C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
   * RESET FIRST MESSAGE ONLY FLAG.
   C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
  }

  //?Sched to ship today
  CASE;

  // IF PAR.Scheduled Ship Date EQ JOB.*Job date
  IF PAR.Scheduled_Ship_Date = JOB.*Job_date;

  CASE;

  // IF PAR.USR Warehouse Code is Warehouse Code not Blank
  IF PAR.USR_Warehouse_Code <> *BLANK;

  // Call program RTV Warehouse Dflt PrtrXF.
  CALL PROGRAM(RTV Warehouse Dflt PrtrXF) ('PDCHXFR');
  PARAMETER(PAR.USR_Warehouse_Code);
  PARAMETER(NLL.Default_Printer);
  PARAMETER(LCL.Include_in_Auto_Pre_Pick);

  //?RMC DLY029 10/30/07 - sndmsg only if Warehouse is set up for auto-print
  CASE;

  // IF LCL.Include in Auto Pre Pick is Incl in Auto Prelim Pick
  IF LCL.Include_in_Auto_Pre_Pick = 'Y';

  // Send information message - 'Preliminary Pick Printing at printer for warehouses: &1 &2 &3 &4 &5
  MESSAGE(USR2565 *INFO);
  MSGPARM(PAR.USR_Warehouse_Code);
  MSGPARM(PAR.USR_CDE_Parm_1);
  MSGPARM(PAR.USR_CDE_Parm_2);
  MSGPARM(PAR.USR_CDE_Parm_3);
  MSGPARM(PAR.USR_CDE_Parm_4);
  MSGPARM(PAR.USR_CDE_Parm_5);
  MSGPARM(PAR.USR_CDE_Parm_6);
  MSGPARM(PAR.USR_CDE_Parm_7);
  MSGPARM(PAR.USR_CDE_Parm_8);
  MSGPARM(PAR.USR_CDE_Parm_9);

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Send information message - 'Preliminary Pick not printed, no order details.'
  MESSAGE(USR2715 *INFO);

  ENDIF;

  ENDIF;

  ENDIF;

  //?***** Change Log and comments
  DO;

  //?** 07/15/16  RMC E4119 Dont recalc deadl depart,miles if MG Created Load
  //?** 09/30/2009 LJB E00495
  //?**   Use carrier date/time, if entered, to calc DDD/T
  //?** 11/16/2007 LJB FP1251 Deadline Depart Date and Time will be
  //?** zeros if there is no Miles Between Cities record
  ENDDO;

 }

 // LCL.Load Status = CND.Lock
 LCL.Load_Status = 'L';

 // LCL.Load Change Type = CND.Lock Load
 LCL.Load_Change_Type = 'LOCK';

 // LCL.Department Control Code = CND.Traffic Dept
 LCL.Department_Control_Code = 'TRF';

 // Call program CRT Load/Order Chg Log XF.
 CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
 PARAMETER(DB1.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Load_Change_Type);
 PARAMETER(LCL.Department_Control_Code);
 PARAMETER(LCL.Load_Status);
 PARAMETER('L');
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Company_Number);
 PARAMETER(*ZERO);

 ENDIF;

 ENDIF;

 ENDIF;

}


