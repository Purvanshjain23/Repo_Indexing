// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBDWEFR
// ?Date: 14.08.2025 Time: 03:47:31
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?***  Modifications  ***
DO;

//?TPA071110 - Take out explicit creation of Item Category for
//?            St Joseph 960 and replace with read to Company Def
//?            Internal. All plant companies will have G/L codes
//?            created for them.
ENDDO;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('C/S');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

//?** Set up parameters for submit of print **
// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Printer Device = CND.Not entered
PAR.PRT_Printer_Device = *BLANK;

//?USER: Initialize subfile header

// CTL.Item Category Number = CON.6
CTL.Item_Category_Number = 6;

CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

// CTL.Record Status = CND.Active
CTL.Record_Status = 'A';

// WRK.Record Status = CTL.Record Status
WRK.Record_Status = CTL.Record_Status;

ENDIF;

//?USER: Initialize subfile record (existing record)

CASE;

// IF DB1.Item Category Number is Entered
IF DB1.Item_Category_Number <> *ZERO;

CASE;

// IF DB1.Item Category Number NE CTL.Item Category Number
IF DB1.Item_Category_Number <> CTL.Item_Category_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv Item Catefory TypeRT) TYPE(RTVOBJ) FILE(POBHREP)           AC2045856;
PARAMETER(RCD.Item_Category_Type_Number);
PARAMETER(RCD.Item_Category_Type_Code);
PARAMETER(RCD.Item_Category_Type_Desc);
{
 //?USER: Process Data record

 // PAR.Item Category Type Desc = DB1.Item Category Type Desc
 PAR.Item_Category_Type_Desc = DB1.Item_Category_Type_Desc;

}


CASE;

// IF CTL.Record Status is Active/Inactive
IF CTL.Record_Status = 'A'/'I';

CASE;

// IF DB1.Record Status EQ CTL.Record Status
IF DB1.Record_Status = CTL.Record_Status;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Initialize subfile record (new record)

// RCD.Record Status = CND.Active
RCD.Record_Status = 'A';

// RCD.Item Category Number = CON.06
RCD.Item_Category_Number = 06;

//?USER: Validate subfile control

CASE;

// IF CTL.Record Status NE WRK.Record Status
IF CTL.Record_Status <> WRK.Record_Status;

// AND PGM.*Program mode is *CHANGE
AND PGM.*Program_mode = 'CHG';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// WRK.Record Status = CTL.Record Status
WRK.Record_Status = CTL.Record_Status;

ENDIF;

//?USER: Validate subfile record relations

//?Physical Delete only allowed if the IS staff performs this
CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

// AND JOB.*USER is All IS DEV/PRD & Prktest
AND JOB.*USER = 'ALICEB'/'ISALICEB'/'PRKTEST'/'ISPURVAP'/'ISPPATE'/'ISROSEM'/'ISRCENT'             +
/'ISSMASO'/'ISSUSANM'/'ISLBUSE'/'ISLARAB'/'ISWGAUS'/'ISELOUC';

EXECUTE FUNCTION(Val PrmGrp        CT06RT) TYPE(RTVOBJ) FILE(CABZREP)           AC2045722;
PARAMETER(RCD.Item_Category_Number);
PARAMETER(RCD.Item_Category_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(WRK.Return_Code_Usr);
{
 //?USER: Processing if Data record not found

 // PAR.Return Code Usr = CND.*Blank
 PAR.Return_Code_Usr = *BLANK;

 //?USER: Process Data record

 // PAR.Return Code Usr = CND.Record Found
 PAR.Return_Code_Usr = 'RCDFND';

}


CASE;

// IF WRK.Return Code Usr is Record Found
IF WRK.Return_Code_Usr = 'RCDFND';

// Send error message - 'PRMGRP Can not be deleted if found on Co/Item'
ERROR(USR4527);

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

//?Physical Delete only allowed if the IS staff performs this
// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

//?Physical Delete only allowed if the IS staff performs this
// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

//?USER: Create DBF record

//?Physical Delete only allowed if the IS staff performs this
EXECUTE FUNCTION(CRT PD Item CategoryC06IF) TYPE(EXCINTFUN) FILE(PDJIREP)       AC2045710;
PARAMETER(RCD.Company_Number);
PARAMETER(CTL.Item_Category_Number);
PARAMETER(RCD.Item_Category_Code);
PARAMETER(RCD.Description);
PARAMETER(RCD.Item_Category_Type_Number);
PARAMETER(RCD.Item_Category_Type_Code);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(RCD.Item_Category_Type_Desc);
{
 //?Execute internal function

 // PAR.Item Category Type Code = PAR.Item Category Code
 PAR.Item_Category_Type_Code = PAR.Item_Category_Code;

 EXECUTE FUNCTION(Rtv Item Categ Number RT) TYPE(RTVOBJ) FILE(POBHREP)           AC2045857;
 PARAMETER(PAR.Item_Category_Type_Number);
 PARAMETER(PAR.Item_Category_Type_Code);
 PARAMETER(PAR.Item_Category_Type_Desc);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Category_Number);
 PARAMETER(PAR.Item_Category_Code);
 PARAMETER(PAR.Description);
 {
  //?USER: Initialize routine

  // PAR.Item Category Type Number = CON.*ZERO
  PAR.Item_Category_Type_Number = *ZERO;

  //?USER: Processing if Data record not found

  //?Item Category Code and Item Category Type Code are the same
  //?get the last item category type number and add 1 to it
  // PAR.Item Category Type Number = CON.1
  PAR.Item_Category_Type_Number = 1;

  EXECUTE FUNCTION(Create Item Category Type) TYPE(CRTOBJ) FILE(POBHREP)          AC1631464;
  PARAMETER(PAR.Item_Category_Type_Number);
  PARAMETER(PAR.Item_Category_Code);
  PARAMETER(PAR.Item_Category_Type_Desc);
  PARAMETER(WRK.EDI_Status_1);
  PARAMETER(WRK.EDI_Status_2);
  PARAMETER(WRK.EDI_Status_3);
  PARAMETER('A');
  PARAMETER(WRK.Job_Time);
  PARAMETER(WRK.User_Id);
  PARAMETER(WRK.Job_Name);
  PARAMETER(WRK.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  //?Item Category Code and Item Category Type Code are the same
  //?get the last item category type number and add 1 to it
  // PAR.Item Category Type Number = DB1.Item Category Type Number + CON.1
  PAR.Item_Category_Type_Number = DB1.Item_Category_Type_Number + 1;

  EXECUTE FUNCTION(Create Item Category Type) TYPE(CRTOBJ) FILE(POBHREP)          AC1631464;
  PARAMETER(PAR.Item_Category_Type_Number);
  PARAMETER(PAR.Item_Category_Code);
  PARAMETER(PAR.Item_Category_Type_Desc);
  PARAMETER(WRK.EDI_Status_1);
  PARAMETER(WRK.EDI_Status_2);
  PARAMETER(WRK.EDI_Status_3);
  PARAMETER('A');
  PARAMETER(WRK.Job_Time);
  PARAMETER(WRK.User_Id);
  PARAMETER(WRK.Job_Name);
  PARAMETER(WRK.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 EXECUTE FUNCTION(CRT PD Item Category   CR) TYPE(CRTOBJ) FILE(PDJIREP)          AC1396173;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Category_Number);
 PARAMETER(PAR.Item_Category_Code);
 PARAMETER(PAR.Description);
 PARAMETER(PAR.Item_Category_Type_Number);
 PARAMETER(PAR.Item_Category_Type_Code);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Job_Time);
 PARAMETER(PAR.User_Id);
 PARAMETER(PAR.Job_Name);
 PARAMETER(PAR.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


//?USER: Delete DBF record

//?Physical Delete only allowed if the IS staff performs this
EXECUTE FUNCTION(Dlt Item Category  C06IF) TYPE(EXCINTFUN) FILE(PDJIREP)        AC2045716;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Category_Number);
PARAMETER(RCD.Item_Category_Code);
{
 //?Execute internal function

 EXECUTE FUNCTION(Dlt Item Category TypeRT) TYPE(RTVOBJ) FILE(POBHREP)           AC2048710;
 PARAMETER(PAR.Item_Category_Number);
 PARAMETER(PAR.Item_Category_Code);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Delete Item Category Type) TYPE(DLTOBJ) FILE(POBHREP)          AC1631466;
  PARAMETER(DB1.Item_Category_Type_Number);
  PARAMETER(DB1.Item_Category_Type_Code);
 }

 EXECUTE FUNCTION(Delete Item Category) TYPE(DLTOBJ) FILE(PDJIREP)               AC1627289;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Category_Number);
 PARAMETER(PAR.Item_Category_Code);
}


//?USER: Change DBF record

//?Physical Delete only allowed if the IS staff performs this
EXECUTE FUNCTION(Chg Item Category Ct06IF) TYPE(EXCINTFUN) FILE(PDJIREP)        AC2045709;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Category_Number);
PARAMETER(RCD.Item_Category_Code);
PARAMETER(RCD.Description);
PARAMETER(RCD.Item_Category_Type_Number);
PARAMETER(RCD.Item_Category_Type_Code);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Item_Category_Type_Desc);
{
 //?Execute internal function

 EXECUTE FUNCTION(Change Item Category Type) TYPE(CHGOBJ) FILE(POBHREP)          AC1631465;
 PARAMETER(PAR.Item_Category_Type_Number);
 PARAMETER(PAR.Item_Category_Type_Code);
 PARAMETER(PAR.Item_Category_Type_Desc);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 {
  //?USER: Processing after Data read

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 EXECUTE FUNCTION(Change Item Category) TYPE(CHGOBJ) FILE(PDJIREP)               AC1627290;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Category_Number);
 PARAMETER(PAR.Item_Category_Code);
 PARAMETER(PAR.Description);
 PARAMETER(PAR.Item_Category_Type_Number);
 PARAMETER(PAR.Item_Category_Type_Code);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 PARAMETER(WRK.Job_Time);
 PARAMETER(WRK.User_Id);
 PARAMETER(WRK.Job_Name);
 PARAMETER(WRK.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


//?USER: Process command keys

//?** Prompt for print options first time around **
CASE;

// IF CTL.*CMD key is *Print List
IF CTL.*CMD_key = '21';

// PAR.PRT Description = CON.Primal Group Report
PAR.PRT_Description = 'Primal Group Report';

// Call program PMT Print Option  SHR  PV.
CALL PROGRAM(PMT Print Option  SHR  PV) ('PDG0PVR');
PARAMETER(PAR.PRT_Description);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('C/S');

//?** Submit print job unless quit is requested **
CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

//?** Submit print job unless quit is requested **
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.System Value Numeric = PAR.PRT Number of Copies
PAR.System_Value_Numeric = PAR.PRT_Number_of_Copies;

EXECUTE FUNCTION(Prt PD Item Category   IF) TYPE(EXCINTFUN)                     AC2045149;
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(PAR.PRT_Description);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Category_Number);
{
 //?Execute internal function

 EXECUTE FUNCTION(RTV for Print Item Cats) TYPE(RTVOBJ) FILE(PDJYREP)            AC2045150;
 PARAMETER(PAR.Return_Code_Usr);
 PARAMETER(PAR.PRT_Description);
 PARAMETER(PAR.PRT_Printer_Device);
 PARAMETER(PAR.PRT_Hold_Output_Sts);
 PARAMETER(PAR.PRT_Save_Output_Sts);
 PARAMETER(PAR.System_Value_Numeric);
 PARAMETER(PAR.Item_Category_Number);
 {
  //?USER: Process Data record

  // Call program Zzz Item Category      UP.
  SBMJOB;
  CALL PROGRAM(Zzz Item Category      UP) ('PPU6UPC');
  PARAMETER(PAR.Return_Code_Usr);
  PARAMETER(PAR.PRT_Printer_Device);
  PARAMETER(PAR.PRT_Hold_Output_Sts);
  PARAMETER(PAR.PRT_Save_Output_Sts);
  PARAMETER(PAR.System_Value_Numeric);
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Item_Category_Number);
  SBMJOBOVR JOB(ITEMCATEGO);
  SBMJOBOVR JOBD(*USRPRF);
  SBMJOBEND;

 }

}


//?** Send print job submitted message to the user **
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

ENDIF;

ENDIF;

