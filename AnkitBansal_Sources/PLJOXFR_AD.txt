// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLJOXFR
// ?Date: 14.08.2025 Time: 02:54:28
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modificaitons and Comments
DO;

//?E3503 JJH 11/29/14 - Add new I-Parm: Truck Auth Entry Time USR
//?H16853 ISE 11/02/2020 CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
ENDDO;

// LCL.*Record selected = CND.*YES
LCL.*Record_selected = 'Y';

// WRK.Weight 8.0 USR = CVTVAR(PAR.Text 8 USR)
WRK.Weight_8_0_USR = CVTVAR(PAR.Text_8_USR);

// PAR.BOLW Scale Weight = WRK.Weight 8.0 USR
PAR.BOLW_Scale_Weight = WRK.Weight_8_0_USR;

//?Process Trucks  at the Gate
CASE;

// IF LCL.*Record selected is *YES
IF LCL.*Record_selected = 'Y';

CASE;

// IF PAR.BOLW Weight Type is Out(Fuera)
IF PAR.BOLW_Weight_Type = 'O';

EXECUTE FUNCTION(Rtv Buy Order Load    RT) TYPE(RTVOBJ) FILE(PKEJCPP)           AB1214079;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.PL_Location_Code);
PARAMETER(PAR.BOLW_Movement_Number);
PARAMETER('I');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?E3503 JJH 11/29/14 - Pass in I-Parm: Truck Auth Entry Time USR
EXECUTE FUNCTION(Crt Scale BOL Weight  CR) TYPE(CRTOBJ) FILE(PKEJCPP)           AB1213976;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.PL_Location_Code);
PARAMETER(PAR.BOLW_Movement_Number);
PARAMETER(PAR.BOLW_Weight_Type);
PARAMETER(PAR.BOLW_Scale_Weight);
PARAMETER(PAR.BOLW_Scale_Weight_Date);
PARAMETER(PAR.BOLW_Scale_Weight_Time);
PARAMETER(PAR.BOLW_Spread_Status);
PARAMETER(PAR.BOLW_Unused_Sts_1);
PARAMETER(PAR.BOLW_Unused_Sts_2);
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.RS_User_Changed);
PARAMETER(PAR.RS_Date_Changed);
PARAMETER(PAR.RS_Time_Changed);
PARAMETER(PAR.RS_Record_Status);
PARAMETER(PAR.RS_Job);
PARAMETER(PAR.RS_Program);
PARAMETER(PAR.RS_User_Added);
PARAMETER(PAR.RS_Date_Added);
PARAMETER(PAR.RS_Time_Added);
PARAMETER(PAR.Scheduled_Kill_Date_USR);
PARAMETER(PAR.Buy_Order_Number);
PARAMETER(PAR.Load_Number);
PARAMETER(PAR.SR_Type);
PARAMETER(PAR.Truck_Auth_Entry_Time_USR);
{
 //?USER: Processing before Data update

 //?E2423 Mtech Live or Not Live *** Interfaces to HPS ***
 //?Get the MTech Live Yes or No
 DO;

 //?Mtech Live Yes or no
 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER('MTECHLIVE');
 PARAMETER(WRK.System_Value_Alpha_USR);

 // LCL.MTech Live Yes or No = WRK.System Value Alpha    USR
 LCL.MTech_Live_Yes_or_No = WRK.System_Value_Alpha_USR;

 ENDDO;

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

 // Call program Rtv System Date       UP.
 CALL PROGRAM(Rtv System Date       UP) ('PKPSUPR');
 PARAMETER(WRK.System_Value_Numeric_USR);

 // Execute function Rtv Current Time      US.
 EXECUTE FUNCTION(Rtv Current Time      US) TYPE(EXCUSRSRC) ('PKM1UFR');
 PARAMETER(DB1.RS_Time_Added);
 {
  C                     TIME           #OA1TM
 }

 // DB1.BOLW Scale Weight Date = WRK.System Value Numeric  USR
 DB1.BOLW_Scale_Weight_Date = WRK.System_Value_Numeric_USR;

 // DB1.RS Date Added = WRK.System Value Numeric  USR
 DB1.RS_Date_Added = WRK.System_Value_Numeric_USR;

 // DB1.BOLW Scale Weight Time = DB1.RS Time Added
 DB1.BOLW_Scale_Weight_Time = DB1.RS_Time_Added;

 CASE;

 // IF PAR.BOLW Weight Type is In
 IF PAR.BOLW_Weight_Type = 'I';

 //?*-----------------------------------------------------------*
 //?* 01/23/03 PKD PK0495-Retrieve the Buy Order and Load Number
 //?               the Delivery Schedule Detail File instead of the
 //?               next available load.
 //?* 03/23/04 PKD TFHPE - If Producer Code is Seaboard, then retrieve
 //?                the Buy Order Load from the Delivery Schedule
 //?                Detail, otherwise retrieve from Buy Order Load.
 CASE;

 // IF PAR.SR Type is Internal
 IF PAR.SR_Type = 'I';

 //?Bring back farm
 EXECUTE FUNCTION(Rtv Buy Order LoadFarmRT) TYPE(RTVOBJ) FILE(PLAECPP)           AB1313314;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.BOLW_Movement_Number);
 PARAMETER(LCL.Return_Code_USR);
 PARAMETER(LCL.DSH_Kill_Date);
 PARAMETER(LCL.DSD_Farm_Site_Code);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Return Code USR = CND.*Record does not exist
  PAR.Return_Code_USR = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Return Code USR = CND.*Normal
  PAR.Return_Code_USR = *BLANK;

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 // DB1.BOH Company Number = PAR.CC Company Number
 DB1.BOH_Company_Number = PAR.CC_Company_Number;

 // LCL.Load Number 2.0 USR = PAR.BOLW Movement Number
 LCL.Load_Number_2_0_USR = PAR.BOLW_Movement_Number;

 // DB1.BOL Load Number = LCL.Load Number 2.0 USR
 DB1.BOL_Load_Number = LCL.Load_Number_2_0_USR;

 // DB1.BOH Buy Order Number
 DB1.BOH_Buy_Order_Number = PAR.BOLW_Movement_Number / 100;

 ENDIF;

 EXECUTE FUNCTION(Upd Trk Scl Weigh Sts RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1214077;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER('I');
 {
  //?USER: Process Data record

  CASE;

  // IF PAR.BOL Truck Scale Weigh Sts is Respread
  IF PAR.BOL_Truck_Scale_Weigh_Sts = 'R';

  // AND DB1.BOL Truck Scale Weigh Sts is Not Spread
  AND DB1.BOL_Truck_Scale_Weigh_Sts = 'I'/'N'/*BLANK/'O'/'R'/'A'/'C';

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Chg Trk Scl Weigh Sts CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1214078;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(PAR.BOL_Truck_Scale_Weigh_Sts);
  PARAMETER(DB1.BOL_Shipped_Head);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  ENDIF;

  CASE;

  // IF PAR.BOL Truck Scale Weigh Sts is Respread
  IF PAR.BOL_Truck_Scale_Weigh_Sts = 'R';

  EXECUTE FUNCTION(Upd Hdr/Bal Status    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1230832;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER('E');
  PARAMETER('E');
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.TH Hog Class Type is Not Resale
   IF DB1.TH_Hog_Class_Type = 'M'/'S';

   EXECUTE FUNCTION(Chg Hdr/Bal Status    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1230833;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(PAR.TH_Header_Error_Sts);
   PARAMETER(PAR.TH_Kill_Balancing_Sts);
   ENDIF;

  }

  ENDIF;

 }

 //?E3503 JJH 11/29/14 - Create Buy Order Load Comment - In
 // Call program Crt BOL System Comment XF.
 CALL PROGRAM(Crt BOL System Comment XF) ('PLVZXFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER('Truck In');
 PARAMETER(*BLANK);
 PARAMETER('N');
 PARAMETER(PAR.Truck_Auth_Entry_Time_USR);

 // IF PAR.BOLW Weight Type is Out
 IF PAR.BOLW_Weight_Type = 'O';

 CASE;

 // IF PAR.SR Type is Internal
 IF PAR.SR_Type = 'I';

 CASE;

 // IF LCL.MTech Live Yes or No is No MTech not Live
 IF LCL.MTech_Live_Yes_or_No = 'N';

 //?11/8/2021 only need documentation
 //?This will not happen due to internal is live
 //?E2423 Mtech Live will not use the HPS program
 // Call program Z1v HPS Farm Info     UP.
 CALL PROGRAM(Z1v HPS Farm Info     UP) ('HP249');
 PARAMETER(PGM.*Return_code);
 PARAMETER(PAR.BOLW_Movement_Number);
 PARAMETER(WRK.Farm_site_Name_f_HPS_USR);
 PARAMETER(WRK.Farm_Site_USR);
 PARAMETER(PAR.HPS_FS_Comp_Relation_USR);
 PARAMETER(WRK.State);

 // IF LCL.MTech Live Yes or No is Yes MTech is Live
 IF LCL.MTech_Live_Yes_or_No = 'Y';

 //?E2423 Mtech Live will use pgm by farm site
 //?Leanne  crt new program to get farm information by farm site
 // WRK.Farm Site USR = LCL.DSD Farm Site Code
 WRK.Farm_Site_USR = LCL.DSD_Farm_Site_Code;

 // Call program Rtv HPS Farm Inf-Mtech UP.
 CALL PROGRAM(Rtv HPS Farm Inf-Mtech UP) ('HP293');
 PARAMETER(PGM.*Return_code);
 PARAMETER(WRK.Farm_site_Name_f_HPS_USR);
 PARAMETER(WRK.Farm_Site_USR);
 PARAMETER(PAR.HPS_FS_Comp_Relation_USR);
 PARAMETER(WRK.State);
 PARAMETER(WRK.HPS_Farm_County);
 PARAMETER(WRK.HPS_Cell_Manager_Code_USR);
 PARAMETER(WRK.HPS_Cell_Manager_Nm_USR);
 PARAMETER(NLL.MTech_Farm_Site_Ref);
 PARAMETER(NLL.MTech_Cell_Manager_Ref);

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.HPS FS Comp Relation USR = WRK.Blank USR
 PAR.HPS_FS_Comp_Relation_USR = WRK.Blank_USR;

 ENDIF;

 //?BOL Truck Scale Weight Status
 CASE;

 // IF PAR.HPS FS Comp Relation USR is Contract
 IF PAR.HPS_FS_Comp_Relation_USR = 'CON';

 //?do this for contract too .....per jancie 8/24/05
 // PAR.BOL Truck Scale Weigh Sts = CND.Out
 PAR.BOL_Truck_Scale_Weigh_Sts = 'O';

 //?BOL Truck Scale Weight Status
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.BOL Truck Scale Weigh Sts = CND.Out
 PAR.BOL_Truck_Scale_Weigh_Sts = 'O';

 ENDIF;

 EXECUTE FUNCTION(Upd Trk Scl Weigh Sts RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1214077;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.BOL_Truck_Scale_Weigh_Sts);
 {
  //?USER: Process Data record

  CASE;

  // IF PAR.BOL Truck Scale Weigh Sts is Respread
  IF PAR.BOL_Truck_Scale_Weigh_Sts = 'R';

  // AND DB1.BOL Truck Scale Weigh Sts is Not Spread
  AND DB1.BOL_Truck_Scale_Weigh_Sts = 'I'/'N'/*BLANK/'O'/'R'/'A'/'C';

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Chg Trk Scl Weigh Sts CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1214078;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(PAR.BOL_Truck_Scale_Weigh_Sts);
  PARAMETER(DB1.BOL_Shipped_Head);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  ENDIF;

  CASE;

  // IF PAR.BOL Truck Scale Weigh Sts is Respread
  IF PAR.BOL_Truck_Scale_Weigh_Sts = 'R';

  EXECUTE FUNCTION(Upd Hdr/Bal Status    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1230832;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER('E');
  PARAMETER('E');
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.TH Hog Class Type is Not Resale
   IF DB1.TH_Hog_Class_Type = 'M'/'S';

   EXECUTE FUNCTION(Chg Hdr/Bal Status    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1230833;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(PAR.TH_Header_Error_Sts);
   PARAMETER(PAR.TH_Kill_Balancing_Sts);
   ENDIF;

  }

  ENDIF;

 }

 ENDIF;

 //?USER: Processing after Data update

 // PAR.Buy Order Number = DB1.BOH Buy Order Number
 PAR.Buy_Order_Number = DB1.BOH_Buy_Order_Number;

 // PAR.Load Number = DB1.BOL Load Number
 PAR.Load_Number = DB1.BOL_Load_Number;

}


//?PK0495 1/21/03  Create/Chg Delivery tracking scl weigh-in,-out date/time
CASE;

// IF PAR.Scheduled Kill Date   USR is Entered
IF PAR.Scheduled_Kill_Date_USR > 0;

//?added this val-occasionally rcds got crtd with -000000- date. RMC 03/09/7
//?0611/07 slm
//?SUSAN WIP ----- E001648 review the arrival logical here
//?** For truck entry, please have weighin and arrival be the same
EXECUTE FUNCTION(Crt/Chg from Accpt TrkRT) TYPE(RTVOBJ) FILE(PLAFCPP)           AB1279061;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.Buy_Order_Number);
PARAMETER(PAR.Load_Number);
PARAMETER(PAR.Scheduled_Kill_Date_USR);
PARAMETER(PAR.BOLW_Weight_Type);
{
 //?USER: Processing if Data record not found

 //?routine for Gate to also update the Arrival time
 EXECUTE FUNCTION(Rtv Crt Dlv Trck f/BOGaRT) TYPE(RTVOBJ) FILE(PLAECPP)          AB1280042;
 PARAMETER(LCL.CC_Company_Number);
 PARAMETER(LCL.DSH_Kill_Date);
 PARAMETER(LCL.DSD_Delivery_Date);
 PARAMETER(LCL.DSD_Delivery_Time);
 PARAMETER(LCL.DSD_Delivery_Time_Seq);
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.BOLW_Weight_Type);
 {
  //?USER: Processing if Data record not found

  // PAR.CC Company Number = PAR.BOH Company Number
  PAR.CC_Company_Number = PAR.BOH_Company_Number;

  EXECUTE FUNCTION(Rtv BOL for DT Create RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1247499;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.DSH_Kill_Date);
  PARAMETER(PAR.DSD_Delivery_Time);
  PARAMETER(LCL.BOL_Pln_Delv_End_Time);
  PARAMETER(LCL.BOL_Pln_Head_Delv);
  PARAMETER(LCL.BOL_Shipped_Wgt);
  PARAMETER(PAR.DSD_Delivery_Date);
  PARAMETER(LCL.BOL_Head_Received);
  PARAMETER(LCL.BOL_Shipped_Head);
  PARAMETER(LCL.PD_Producer_Code);
  PARAMETER(LCL.PL_Location_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // Call program Rtv Val DelvDt/Tim&ArvXF.
  CALL PROGRAM(Rtv Val DelvDt/Tim&ArvXF) ('PLQKXFR');
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.DSH_Kill_Date);
  PARAMETER(PAR.DSD_Delivery_Date);
  PARAMETER(PAR.DSD_Delivery_Time);
  PARAMETER(PAR.DSD_Delivery_Time_Seq);
  PARAMETER(LCL.DT_Arrive_@_Plant_Date);
  PARAMETER(LCL.DT_Arrive_@_Plant_Time);
  PARAMETER(WRK.Return_Code_USR);

  EXECUTE FUNCTION(Rtv Accum LvWt p/ BOL RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1247001;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(LCL.TH_Avg_Live_Wgt);
  PARAMETER(WRK.Weight_Tot_USR);
  PARAMETER(LCL.DT_Movement_Number);
  PARAMETER(LCL.DT_Hog_Group_Reference);
  {
   //?USER: Initialize routine

   // PAR.Weight Tot USR = CON.*ZERO
   PAR.Weight_Tot_USR = *ZERO;

   // PAR.TH Avg Live Wgt = CON.*ZERO
   PAR.TH_Avg_Live_Wgt = *ZERO;

   //?USER: Process Data record

   // PAR.Weight Tot USR = PAR.Weight Tot USR + DB1.TH Live Wgt
   PAR.Weight_Tot_USR = PAR.Weight_Tot_USR + DB1.TH_Live_Wgt;

   // PAR.DT Movement Number = DB1.TH HPS Movement Ref #
   PAR.DT_Movement_Number = DB1.TH_HPS_Movement_Ref_#;

   // PAR.DT Hog Group Code = DB1.TH Group Reference
   PAR.DT_Hog_Group_Reference = DB1.TH_Group_Reference;

   CASE;

   // IF DB1.TH Hog Class Type is Market
   IF DB1.TH_Hog_Class_Type = 'M';

   // AND PAR.TH Avg Live Wgt is EQ Zero
   AND PAR.TH_Avg_Live_Wgt = *ZERO;

   // PAR.TH Avg Live Wgt = DB1.TH Avg Live Wgt
   PAR.TH_Avg_Live_Wgt = DB1.TH_Avg_Live_Wgt;

   ENDIF;

  }

  EXECUTE FUNCTION(Rtv Producer Nm, Srce RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1162488;
  PARAMETER(LCL.PD_Producer_Code);
  PARAMETER(WRK.PD_Name);
  PARAMETER(LCL.TH_Source_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Source Type       RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1141829;
  PARAMETER(LCL.TH_Source_Code);
  PARAMETER(LCL.TH_Source_Type);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.TH Source Type is Internal
  IF LCL.TH_Source_Type = 'I';

  // LCL.DT Hog Group Code = CON.*BLANK
  LCL.DT_Hog_Group_Reference = *BLANK;

  ENDIF;

  // LCL.DT Scheduled Hour = PAR.DSD Delivery Time / CON.100 *
  LCL.DT_Scheduled_Hour = PAR.DSD_Delivery_Time / 100;

  // LCL.DT Delivered Weight lbs = LCL.BOL Shipped Head * LCL.TH Avg Live Wgt *
  LCL.DT_Delivered_Weight_lbs = LCL.BOL_Shipped_Head * LCL.TH_Avg_Live_Wgt;

  //?9/11/2007 slm This was changed only to make sure we are using
  //?the same routines when we create the arrival date and weight date
  //?and used time from current
  // Call program Rtv System Date       UP.
  CALL PROGRAM(Rtv System Date       UP) ('PKPSUPR');
  PARAMETER(WRK.System_Value_Numeric_USR);

  // Execute function Rtv Current Time      US.
  EXECUTE FUNCTION(Rtv Current Time      US) TYPE(EXCUSRSRC) ('PKM1UFR');
  PARAMETER(LCL.RS_Time_Added);
  {
   C                     TIME           #OA1TM
  }

  CASE;

  // IF PAR.BOLW Weight Type is In(En)
  IF PAR.BOLW_Weight_Type = 'I';

  // LCL.DT TrkScl Weigh-In Date = WRK.System Value Numeric  USR
  LCL.DT_TrkScl_Weigh_In_Date = WRK.System_Value_Numeric_USR;

  // LCL.DT TrkScl Weigh-In Time = LCL.RS Time Added / CON.100 *
  LCL.DT_TrkScl_Weigh_In_Time = LCL.RS_Time_Added / 100;

  // IF PAR.BOLW Weight Type is Out(Fuera)
  IF PAR.BOLW_Weight_Type = 'O';

  // LCL.DT TrkScl Weigh-Out Date = WRK.System Value Numeric  USR
  LCL.DT_TrkScl_Weigh_Out_Date = WRK.System_Value_Numeric_USR;

  // LCL.DT TrkScl Weigh-Out Time = LCL.RS Time Added / CON.100 *
  LCL.DT_TrkScl_Weigh_Out_Time = LCL.RS_Time_Added / 100;

  ENDIF;

  //?slm 07/22/2011 E001648
  //?E001648 Truckers will call in now to the hpe gropu and
  //?the arrival date and arrival time will be update the 11 from
  //?WW Delivery receiving.
  //?This process will not update the arrival date and time
  EXECUTE FUNCTION(Crt Delivery Tracking CR) TYPE(CRTOBJ) FILE(PLAFCPP)           AB1244756;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.DSH_Kill_Date);
  PARAMETER(PAR.DSD_Delivery_Date);
  PARAMETER(PAR.DSD_Delivery_Time);
  PARAMETER(PAR.DSD_Delivery_Time_Seq);
  PARAMETER(PAR.DSH_Kill_Date);
  PARAMETER(*ZERO);
  PARAMETER(LCL.DT_Scheduled_Hour);
  PARAMETER('U');
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(LCL.DT_Hog_Group_Reference);
  PARAMETER(LCL.BOL_Shipped_Head);
  PARAMETER(LCL.DT_Delivered_Weight_lbs);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER('F');
  PARAMETER(LCL.DT_Movement_Number);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.Blank_Usr_2);
  PARAMETER(WRK.Blank_Usr_2);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.DT_Arrive_@_Plant_Date);
  PARAMETER(LCL.DT_Arrive_@_Plant_Time);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(LCL.DT_TrkScl_Weigh_In_Date);
  PARAMETER(LCL.DT_TrkScl_Weigh_In_Time);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.DT_TrkScl_Weigh_Out_Date);
  PARAMETER(LCL.DT_TrkScl_Weigh_Out_Time);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.TH_Source_Type);
  PARAMETER(WRK.DT_GATE_UPDATE_YES);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.Blank_USR);
  PARAMETER(WRK.Blank_USR);
  PARAMETER(LCL.PD_Producer_Code);
  PARAMETER(LCL.PL_Location_Code);
  PARAMETER(LCL.TH_Source_Code);
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

   //?USER: Processing if Data record already exists

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   //?USER: Processing after Data update

   EXECUTE FUNCTION(Upd Farm, Movement    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1251472;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(PAR.DT_Movement_Number);
   PARAMETER(PAR.DT_Farm_Site_Code);
   {
    //?USER: Process Data record

    CASE;

    // IF DB1.TH HPS Farm Site NE PAR.TH HPS Farm Site
    IF DB1.TH_HPS_Farm_Site <> PAR.TH_HPS_Farm_Site;

    CASE;

    // IF DB1.TH Source Type is Internal
    IF DB1.TH_Source_Type = 'I';

    //?Due to test with e2423 SAW that we were change the
    //?movement and farm site and not the state code
    //?use this retrieve regardless of Not Live Or Live with MTech
    // Call program Rtv HPS Farm Inf-Mtech UP.
    CALL PROGRAM(Rtv HPS Farm Inf-Mtech UP) ('HP293');
    PARAMETER(PGM.*Return_code);
    PARAMETER(NLL.Farm_site_Name_f_HPS_USR);
    PARAMETER(PAR.TH_HPS_Farm_Site);
    PARAMETER(NLL.HPS_FS_Comp_Relation_USR);
    PARAMETER(WRK.State);
    PARAMETER(NLL.HPS_Farm_County);
    PARAMETER(NLL.HPS_Cell_Manager_Code_USR);
    PARAMETER(NLL.HPS_Cell_Manager_Nm_USR);
    PARAMETER(NLL.MTech_Farm_Site_Ref);
    PARAMETER(NLL.MTech_Cell_Manager_Ref);

    EXECUTE FUNCTION(Chg Farm, Movement    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1251473;
    PARAMETER(DB1.BOH_Company_Number);
    PARAMETER(DB1.BOH_Buy_Order_Number);
    PARAMETER(DB1.BOL_Load_Number);
    PARAMETER(DB1.TH_Tattoo_Number);
    PARAMETER(DB1.TH_Kill_Date);
    PARAMETER(PAR.TH_HPS_Movement_Ref_#);
    PARAMETER(WRK.State);
    PARAMETER(PAR.TH_HPS_Farm_Site);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
     PARAMETER(DB1.RS_User_Changed);
     PARAMETER(DB1.RS_Date_Changed);
     PARAMETER(DB1.RS_Time_Changed);
     PARAMETER(DB1.RS_Job);
     PARAMETER(DB1.RS_Program);
     {
      //?Execute internal function

      // PAR.RS User Changed = JOB.*USER
      PAR.RS_User_Changed = JOB.*USER;

      // PAR.RS Date Changed = JOB.*Job date
      PAR.RS_Date_Changed = JOB.*Job_date;

      // PAR.RS Time Changed = JOB.*Job time
      PAR.RS_Time_Changed = JOB.*Job_time;

      // PAR.RS Job = JOB.*JOB
      PAR.RS_Job = JOB.*JOB;

      // PAR.RS Program = JOB.*PROGRAM
      PAR.RS_Program = JOB.*PROGRAM;

     }

    }

    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(Chg Farm, Movement    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1251473;
    PARAMETER(DB1.BOH_Company_Number);
    PARAMETER(DB1.BOH_Buy_Order_Number);
    PARAMETER(DB1.BOL_Load_Number);
    PARAMETER(DB1.TH_Tattoo_Number);
    PARAMETER(DB1.TH_Kill_Date);
    PARAMETER(PAR.TH_HPS_Movement_Ref_#);
    PARAMETER(DB1.TH_State);
    PARAMETER(PAR.TH_HPS_Farm_Site);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
     PARAMETER(DB1.RS_User_Changed);
     PARAMETER(DB1.RS_Date_Changed);
     PARAMETER(DB1.RS_Time_Changed);
     PARAMETER(DB1.RS_Job);
     PARAMETER(DB1.RS_Program);
     {
      //?Execute internal function

      // PAR.RS User Changed = JOB.*USER
      PAR.RS_User_Changed = JOB.*USER;

      // PAR.RS Date Changed = JOB.*Job date
      PAR.RS_Date_Changed = JOB.*Job_date;

      // PAR.RS Time Changed = JOB.*Job time
      PAR.RS_Time_Changed = JOB.*Job_time;

      // PAR.RS Job = JOB.*JOB
      PAR.RS_Job = JOB.*JOB;

      // PAR.RS Program = JOB.*PROGRAM
      PAR.RS_Program = JOB.*PROGRAM;

     }

    }

    ENDIF;

    ENDIF;

   }

  }

  //?3/17/03 create detail to match Unscheduled Tracking record
  EXECUTE FUNCTION(Crt Delv Sched Dtl    CR) TYPE(CRTOBJ) FILE(PLAECPP)           AB1244727;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.DSH_Kill_Date);
  PARAMETER(PAR.DSD_Delivery_Date);
  PARAMETER(PAR.DSD_Delivery_Time);
  PARAMETER(PAR.DSD_Delivery_Time_Seq);
  PARAMETER(LCL.DT_Scheduled_Hour);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(LCL.DT_Hog_Group_Reference);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER('F');
  PARAMETER(LCL.DT_Movement_Number);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER('N');
  PARAMETER(WRK.DSD_Sched_Route_Start_Pnt);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.Blank_Usr_1_fld_Usr);
  PARAMETER(WRK.Blank_Usr_1_fld_Usr);
  PARAMETER(WRK.Blank_Usr_1_fld_Usr);
  PARAMETER('A');
  PARAMETER('A');
  PARAMETER('O');
  PARAMETER(LCL.TH_Source_Type);
  PARAMETER(WRK.Blank_Usr_1_fld_Usr);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.TH_Source_Code);
  PARAMETER(LCL.PD_Producer_Code);
  PARAMETER(LCL.PL_Location_Code);
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  EXECUTE FUNCTION(Rtv Shipped Head      RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1226281;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(LCL.BOL_Shipped_Head);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Accum LvWt p/ BOL RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1247001;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(LCL.TH_Avg_Live_Wgt);
  PARAMETER(WRK.Weight_Tot_USR);
  PARAMETER(LCL.DT_Movement_Number);
  PARAMETER(LCL.DT_Hog_Group_Reference);
  {
   //?USER: Initialize routine

   // PAR.Weight Tot USR = CON.*ZERO
   PAR.Weight_Tot_USR = *ZERO;

   // PAR.TH Avg Live Wgt = CON.*ZERO
   PAR.TH_Avg_Live_Wgt = *ZERO;

   //?USER: Process Data record

   // PAR.Weight Tot USR = PAR.Weight Tot USR + DB1.TH Live Wgt
   PAR.Weight_Tot_USR = PAR.Weight_Tot_USR + DB1.TH_Live_Wgt;

   // PAR.DT Movement Number = DB1.TH HPS Movement Ref #
   PAR.DT_Movement_Number = DB1.TH_HPS_Movement_Ref_#;

   // PAR.DT Hog Group Code = DB1.TH Group Reference
   PAR.DT_Hog_Group_Reference = DB1.TH_Group_Reference;

   CASE;

   // IF DB1.TH Hog Class Type is Market
   IF DB1.TH_Hog_Class_Type = 'M';

   // AND PAR.TH Avg Live Wgt is EQ Zero
   AND PAR.TH_Avg_Live_Wgt = *ZERO;

   // PAR.TH Avg Live Wgt = DB1.TH Avg Live Wgt
   PAR.TH_Avg_Live_Wgt = DB1.TH_Avg_Live_Wgt;

   ENDIF;

  }

  //?New 1/28/04
  CASE;

  // IF DB1.DSD Source Type is Internal
  IF DB1.DSD_Source_Type = 'I';

  // LCL.DT Hog Group Code = DB1.DSD Hog Group Code
  LCL.DT_Hog_Group_Reference = DB1.DSD_Hog_Group_Code;

  // LCL.DT Movement Number = DB1.DSD Movement Number
  LCL.DT_Movement_Number = DB1.DSD_Movement_Number;

  ENDIF;

  // LCL.DT Delivered Weight lbs = LCL.BOL Shipped Head * LCL.TH Avg Live Wgt *
  LCL.DT_Delivered_Weight_lbs = LCL.BOL_Shipped_Head * LCL.TH_Avg_Live_Wgt;

  //?9/11/2007 slm Do not move job date
  //?              Reported by TF that job date was being used
  //?10/15/03 If it was transferrd, use Transfer Sts from DSD
  CASE;

  // IF DB1.DSD Transfer Sts is *ALL values
  IF DB1.DSD_Transfer_Sts = 'P'/'M';

  // LCL.DT Delivery Initiation = DB1.DSD Transfer Sts
  LCL.DT_Delivery_Initiation = DB1.DSD_Transfer_Sts;

  //?10/15/03 If it was transferrd, use Transfer Sts from DSD
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.DT Delivery Initiation = CND.Scheduled
  LCL.DT_Delivery_Initiation = 'S';

  ENDIF;

  // Call program Rtv System Date       UP.
  CALL PROGRAM(Rtv System Date       UP) ('PKPSUPR');
  PARAMETER(WRK.System_Value_Numeric_USR);

  // Execute function Rtv Current Time      US.
  EXECUTE FUNCTION(Rtv Current Time      US) TYPE(EXCUSRSRC) ('PKM1UFR');
  PARAMETER(LCL.RS_Time_Added);
  {
   C                     TIME           #OA1TM
  }

  CASE;

  // IF PAR.BOLW Weight Type is In(En)
  IF PAR.BOLW_Weight_Type = 'I';

  // LCL.DT TrkScl Weigh-In Date = WRK.System Value Numeric  USR
  LCL.DT_TrkScl_Weigh_In_Date = WRK.System_Value_Numeric_USR;

  // LCL.DT TrkScl Weigh-In Time = LCL.RS Time Added / CON.100 *
  LCL.DT_TrkScl_Weigh_In_Time = LCL.RS_Time_Added / 100;

  // IF PAR.BOLW Weight Type is Out(Fuera)
  IF PAR.BOLW_Weight_Type = 'O';

  // LCL.DT TrkScl Weigh-Out Date = WRK.System Value Numeric  USR
  LCL.DT_TrkScl_Weigh_Out_Date = WRK.System_Value_Numeric_USR;

  // LCL.DT TrkScl Weigh-Out Time = LCL.RS Time Added
  LCL.DT_TrkScl_Weigh_Out_Time = LCL.RS_Time_Added;

  // LCL.DT TrkScl Weigh-Out Time = LCL.RS Time Added / CON.100 *
  LCL.DT_TrkScl_Weigh_Out_Time = LCL.RS_Time_Added / 100;

  ENDIF;

  // LCL.DT Arrive @ Plant Date = LCL.DT TrkScl Weigh-In Date
  LCL.DT_Arrive_@_Plant_Date = LCL.DT_TrkScl_Weigh_In_Date;

  // LCL.DT Arrive @ Plant Time = LCL.RS Time Added / CON.100 *
  LCL.DT_Arrive_@_Plant_Time = LCL.RS_Time_Added / 100;

  EXECUTE FUNCTION(Crt Delivery Tracking CR) TYPE(CRTOBJ) FILE(PLAFCPP)           AB1244756;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(DB1.DSH_Kill_Date);
  PARAMETER(DB1.DSD_Delivery_Date);
  PARAMETER(DB1.DSD_Delivery_Time);
  PARAMETER(DB1.DSD_Delivery_Time_Seq);
  PARAMETER(DB1.DSH_Kill_Date);
  PARAMETER(*ZERO);
  PARAMETER(DB1.DSD_Scheduled_Hour);
  PARAMETER(LCL.DT_Delivery_Initiation);
  PARAMETER(DB1.DSD_Farm_Site_Code);
  PARAMETER(DB1.DSD_Building);
  PARAMETER(DB1.DSD_Room);
  PARAMETER(DB1.DSD_Sire_Line_Code);
  PARAMETER(LCL.DT_Hog_Group_Reference);
  PARAMETER(LCL.BOL_Shipped_Head);
  PARAMETER(LCL.DT_Delivered_Weight_lbs);
  PARAMETER(DB1.DSD_Trucker_Code_HPS);
  PARAMETER(DB1.DSD_Driver);
  PARAMETER(DB1.DSD_Loading_Crew);
  PARAMETER(DB1.CHR_Code);
  PARAMETER(DB1.DSD_Load_Type);
  PARAMETER(DB1.DSD_Full_Split_Load);
  PARAMETER(LCL.DT_Movement_Number);
  PARAMETER(DB1.DSD_Truck_ID);
  PARAMETER(DB1.DSD_Trailer_ID);
  PARAMETER(DB1.DSD_Transportation_Office);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.Blank_Usr_2);
  PARAMETER(DB1.DSD_Sched_Route_Start_Pnt);
  PARAMETER(DB1.DSD_Sched_Route_Start_Dte);
  PARAMETER(DB1.DSD_Sched_Route_Start_Tim);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.DT_Arrive_@_Plant_Date);
  PARAMETER(LCL.DT_Arrive_@_Plant_Time);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(LCL.DT_TrkScl_Weigh_In_Date);
  PARAMETER(LCL.DT_TrkScl_Weigh_In_Time);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.DT_TrkScl_Weigh_Out_Date);
  PARAMETER(LCL.DT_TrkScl_Weigh_Out_Time);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.DSD_Source_Type);
  PARAMETER(WRK.DT_GATE_UPDATE_YES);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.DSD_Scheduled_Delv_Head);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.Blank_USR);
  PARAMETER(WRK.Blank_USR);
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(DB1.PL_Location_Code);
  PARAMETER(DB1.SR_Source_Code);
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

   //?USER: Processing if Data record already exists

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   //?USER: Processing after Data update

   EXECUTE FUNCTION(Upd Farm, Movement    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1251472;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(PAR.DT_Movement_Number);
   PARAMETER(PAR.DT_Farm_Site_Code);
   {
    //?USER: Process Data record

    CASE;

    // IF DB1.TH HPS Farm Site NE PAR.TH HPS Farm Site
    IF DB1.TH_HPS_Farm_Site <> PAR.TH_HPS_Farm_Site;

    CASE;

    // IF DB1.TH Source Type is Internal
    IF DB1.TH_Source_Type = 'I';

    //?Due to test with e2423 SAW that we were change the
    //?movement and farm site and not the state code
    //?use this retrieve regardless of Not Live Or Live with MTech
    // Call program Rtv HPS Farm Inf-Mtech UP.
    CALL PROGRAM(Rtv HPS Farm Inf-Mtech UP) ('HP293');
    PARAMETER(PGM.*Return_code);
    PARAMETER(NLL.Farm_site_Name_f_HPS_USR);
    PARAMETER(PAR.TH_HPS_Farm_Site);
    PARAMETER(NLL.HPS_FS_Comp_Relation_USR);
    PARAMETER(WRK.State);
    PARAMETER(NLL.HPS_Farm_County);
    PARAMETER(NLL.HPS_Cell_Manager_Code_USR);
    PARAMETER(NLL.HPS_Cell_Manager_Nm_USR);
    PARAMETER(NLL.MTech_Farm_Site_Ref);
    PARAMETER(NLL.MTech_Cell_Manager_Ref);

    EXECUTE FUNCTION(Chg Farm, Movement    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1251473;
    PARAMETER(DB1.BOH_Company_Number);
    PARAMETER(DB1.BOH_Buy_Order_Number);
    PARAMETER(DB1.BOL_Load_Number);
    PARAMETER(DB1.TH_Tattoo_Number);
    PARAMETER(DB1.TH_Kill_Date);
    PARAMETER(PAR.TH_HPS_Movement_Ref_#);
    PARAMETER(WRK.State);
    PARAMETER(PAR.TH_HPS_Farm_Site);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
     PARAMETER(DB1.RS_User_Changed);
     PARAMETER(DB1.RS_Date_Changed);
     PARAMETER(DB1.RS_Time_Changed);
     PARAMETER(DB1.RS_Job);
     PARAMETER(DB1.RS_Program);
     {
      //?Execute internal function

      // PAR.RS User Changed = JOB.*USER
      PAR.RS_User_Changed = JOB.*USER;

      // PAR.RS Date Changed = JOB.*Job date
      PAR.RS_Date_Changed = JOB.*Job_date;

      // PAR.RS Time Changed = JOB.*Job time
      PAR.RS_Time_Changed = JOB.*Job_time;

      // PAR.RS Job = JOB.*JOB
      PAR.RS_Job = JOB.*JOB;

      // PAR.RS Program = JOB.*PROGRAM
      PAR.RS_Program = JOB.*PROGRAM;

     }

    }

    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(Chg Farm, Movement    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1251473;
    PARAMETER(DB1.BOH_Company_Number);
    PARAMETER(DB1.BOH_Buy_Order_Number);
    PARAMETER(DB1.BOL_Load_Number);
    PARAMETER(DB1.TH_Tattoo_Number);
    PARAMETER(DB1.TH_Kill_Date);
    PARAMETER(PAR.TH_HPS_Movement_Ref_#);
    PARAMETER(DB1.TH_State);
    PARAMETER(PAR.TH_HPS_Farm_Site);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
     PARAMETER(DB1.RS_User_Changed);
     PARAMETER(DB1.RS_Date_Changed);
     PARAMETER(DB1.RS_Time_Changed);
     PARAMETER(DB1.RS_Job);
     PARAMETER(DB1.RS_Program);
     {
      //?Execute internal function

      // PAR.RS User Changed = JOB.*USER
      PAR.RS_User_Changed = JOB.*USER;

      // PAR.RS Date Changed = JOB.*Job date
      PAR.RS_Date_Changed = JOB.*Job_date;

      // PAR.RS Time Changed = JOB.*Job time
      PAR.RS_Time_Changed = JOB.*Job_time;

      // PAR.RS Job = JOB.*JOB
      PAR.RS_Job = JOB.*JOB;

      // PAR.RS Program = JOB.*PROGRAM
      PAR.RS_Program = JOB.*PROGRAM;

     }

    }

    ENDIF;

    ENDIF;

   }

  }

  //?USER: Exit processing

  CASE;

  // IF DB1.DSD Full/Split Load is Split
  IF DB1.DSD_Full_Split_Load = 'S';

  EXECUTE FUNCTION(Rtv Crt Tracking Splt RT) TYPE(RTVOBJ) FILE(PLAGCPP)           AB1250086;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(DB1.DSH_Kill_Date);
  PARAMETER(DB1.DSD_Delivery_Date);
  PARAMETER(DB1.DSD_Delivery_Time);
  PARAMETER(DB1.DSD_Delivery_Time_Seq);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Crt Delv Trckng Split CR) TYPE(CRTOBJ) FILE(PLAJCPP)           AB1245170;
   PARAMETER(DB1.CC_Company_Number);
   PARAMETER(DB1.DSH_Kill_Date);
   PARAMETER(DB1.DSD_Delivery_Date);
   PARAMETER(DB1.DSD_Delivery_Time);
   PARAMETER(DB1.DSD_Delivery_Time_Seq);
   PARAMETER(DB1.DSS_Split_Sequence);
   PARAMETER(DB1.DSS_Building);
   PARAMETER(DB1.DSS_Room);
   PARAMETER(DB1.DSS_Sire_Line_Code);
   PARAMETER(DB1.DSS_Hog_Group_Code);
   PARAMETER(DB1.DSS_Scheduled_Head);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER('N');
   PARAMETER('N');
   PARAMETER('N');
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?Execute internal function

     // PAR.RS Record Status = CND.Active
     PAR.RS_Record_Status = 'A';

     // PAR.RS User Added = JOB.*USER
     PAR.RS_User_Added = JOB.*USER;

     // PAR.RS Date Added = JOB.*Job date
     PAR.RS_Date_Added = JOB.*Job_date;

     // PAR.RS Time Added = JOB.*Job time
     PAR.RS_Time_Added = JOB.*Job_time;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

    }

   }

  }

  ENDIF;

 }

 //?USER: Process Data record

 //?This function was clone from the regular Weight In Function
 //?and was modified to update the Arrive @ Plant date and time
 //?9/11/2007 slm use the same routines for the time and date
 // Call program Rtv System Date       UP.
 CALL PROGRAM(Rtv System Date       UP) ('PKPSUPR');
 PARAMETER(WRK.System_Value_Numeric_USR);

 // Execute function Rtv Current Time      US.
 EXECUTE FUNCTION(Rtv Current Time      US) TYPE(EXCUSRSRC) ('PKM1UFR');
 PARAMETER(LCL.RS_Time_Added);
 {
  C                     TIME           #OA1TM
 }

 CASE;

 // IF PAR.BOLW Weight Type is In(En)
 IF PAR.BOLW_Weight_Type = 'I';

 // LCL.DT TrkScl Weigh-In Date = WRK.System Value Numeric  USR
 LCL.DT_TrkScl_Weigh_In_Date = WRK.System_Value_Numeric_USR;

 // LCL.DT TrkScl Weigh-In Time = LCL.RS Time Added / CON.100 *
 LCL.DT_TrkScl_Weigh_In_Time = LCL.RS_Time_Added / 100;

 // IF PAR.BOLW Weight Type is Out(Fuera)
 IF PAR.BOLW_Weight_Type = 'O';

 // LCL.DT TrkScl Weigh-Out Date = WRK.System Value Numeric  USR
 LCL.DT_TrkScl_Weigh_Out_Date = WRK.System_Value_Numeric_USR;

 // LCL.DT TrkScl Weigh-Out Time = LCL.RS Time Added / CON.100 *
 LCL.DT_TrkScl_Weigh_Out_Time = LCL.RS_Time_Added / 100;

 ENDIF;

 //?Remove the arrival date ad arrival time being populated here
 // WRK.GATE STS YES USER = CND.*Yes
 WRK.GATE_STS_YES_USER = *YES;

 EXECUTE FUNCTION(Chg Delivery TrkGateO CH) TYPE(CHGOBJ) FILE(PLAFCPP)           AB1304487;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.DSH_Kill_Date);
 PARAMETER(DB1.DT_Delivery_Date);
 PARAMETER(DB1.DT_Delivery_Time);
 PARAMETER(DB1.DT_Delivery_Time_Seq);
 PARAMETER(DB1.DT_Actual_Kill_Date);
 PARAMETER(DB1.DT_Actual_Delivery_Hour);
 PARAMETER(DB1.DT_Scheduled_Hour);
 PARAMETER(DB1.DT_Delivery_Initiation);
 PARAMETER(DB1.DT_Farm_Site_Code);
 PARAMETER(DB1.DT_Building);
 PARAMETER(DB1.DT_Room);
 PARAMETER(DB1.DT_Sire_Line_Code);
 PARAMETER(DB1.DT_Hog_Group_Reference);
 PARAMETER(DB1.DT_Delivered_Head);
 PARAMETER(DB1.DT_Delivered_Weight_lbs);
 PARAMETER(DB1.DT_Trucker_Code_HPS);
 PARAMETER(DB1.DT_Driver);
 PARAMETER(DB1.DT_Loading_Crew);
 PARAMETER(DB1.CHR_Code);
 PARAMETER(DB1.DT_Load_Type);
 PARAMETER(DB1.DT_Full_Split_Load);
 PARAMETER(DB1.DT_Movement_Number);
 PARAMETER(DB1.DT_Truck_ID);
 PARAMETER(DB1.DT_Trailer_ID);
 PARAMETER(DB1.DT_Transportation_Office);
 PARAMETER(DB1.DT_Transprtn_Office_Date);
 PARAMETER(DB1.DT_Transprtn_Office_Time);
 PARAMETER(DB1.DT_Arrive@Frm_v_StartLd);
 PARAMETER(DB1.DT_On_Time_Farm_Arrvl_Sts);
 PARAMETER(DB1.DT_Route_Start_Pnt);
 PARAMETER(DB1.DT_Route_Start_Date);
 PARAMETER(DB1.DT_Route_Start_Time);
 PARAMETER(DB1.DT_Route_Start_Variance);
 PARAMETER(DB1.DT_Wait_@_Transp_Offc_Tm);
 PARAMETER(DB1.DT_Arrive_@_Farm_Date);
 PARAMETER(DB1.DT_Arrive_@_Farm_Time);
 PARAMETER(DB1.DT_Drive_Time_To_Farm);
 PARAMETER(DB1.DT_Start_Loading_Date);
 PARAMETER(DB1.DT_Start_Loading_Time);
 PARAMETER(DB1.DT_Start_Loading_Variance);
 PARAMETER(DB1.DT_Wait_@_Farm);
 PARAMETER(DB1.DT_Frm_End_Loading_Date);
 PARAMETER(DB1.DT_Frm_End_Loading_Time);
 PARAMETER(DB1.DT_Load_Time);
 PARAMETER(DB1.DT_Leave_Farm_Date);
 PARAMETER(DB1.DT_Leave_Farm_Time);
 PARAMETER(DB1.DT_Wait_Depart_Frm);
 PARAMETER(DB1.DT_Plt_TrkWsh_Arvl_Date);
 PARAMETER(DB1.DT_Plt_TrkWsh_Arvl_Time);
 PARAMETER(DB1.DT_Arrive_@_Plant_Date);
 PARAMETER(DB1.DT_Arrive_@_Plant_Time);
 PARAMETER(DB1.DT_Wait_@_TrkWsh);
 PARAMETER(DB1.DT_Drive_Time_To_Plant);
 PARAMETER(DB1.DT_Delv_Time_Variance);
 PARAMETER(DB1.DT_On_Time_Delivery);
 PARAMETER(DB1.Delivery_Reason_Code);
 PARAMETER(LCL.DT_TrkScl_Weigh_In_Date);
 PARAMETER(LCL.DT_TrkScl_Weigh_In_Time);
 PARAMETER(DB1.DT_Wait_@_TrkScl);
 PARAMETER(DB1.DT_To_Recv_Dock_Date);
 PARAMETER(DB1.DT_To_Recv_Dock_Time);
 PARAMETER(DB1.DT_Wait_Rcv_Dock);
 PARAMETER(DB1.DT_Start_Unloading_Date);
 PARAMETER(DB1.DT_Start_Unloading_Time);
 PARAMETER(DB1.DT_Wait_@_Rcv_Dock);
 PARAMETER(DB1.DT_End_Unload_Date);
 PARAMETER(DB1.DT_End_Unload_Time);
 PARAMETER(DB1.DT_Unload_Time);
 PARAMETER(DB1.DT_Unload_Variance_Time);
 PARAMETER(LCL.DT_TrkScl_Weigh_Out_Date);
 PARAMETER(LCL.DT_TrkScl_Weigh_Out_Time);
 PARAMETER(DB1.DT_Wait_Time_@_the_Plant);
 PARAMETER(DB1.DT_Formula_Wait_Tm_@_Plt);
 PARAMETER(DB1.DT_Source_Type);
 PARAMETER(WRK.GATE_STS_YES_USER);
 PARAMETER(DB1.DT_Unused_Date);
 PARAMETER(DB1.DT_Unused_Time);
 PARAMETER(DB1.DT_Unused_Wait_Time);
 PARAMETER(DB1.DT_Error_Sts);
 PARAMETER(DB1.DT_Error_Reason);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.SR_Source_Code);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


ENDIF;

//?GET THE COMPANY AND THE COMPANY VALUES FOR HPETRKURL1
// LCL.CC Company Number = PAR.CC Company Number
LCL.CC_Company_Number = PAR.CC_Company_Number;

//?GET THE TRUCK GATE URL
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(LCL.CC_Company_Number);
PARAMETER('HPETRKURL1');
PARAMETER(LCL.System_Value_Alpha_USR);

CASE;

// IF LCL.System Value Alpha    USR is No
IF LCL.System_Value_Alpha_USR = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.URL USR = LCL.System Value Alpha    USR
LCL.URL_USR = LCL.System_Value_Alpha_USR;

// Call program Snd Url TF           Clp.
CALL PROGRAM(Snd Url TF           Clp) ('PKSNDURL');
PARAMETER(LCL.URL_USR);

ENDIF;

ENDIF;

